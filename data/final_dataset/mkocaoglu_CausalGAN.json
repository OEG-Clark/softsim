{"home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.config.str2bool": [[4, 7], ["v.lower"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "#return (v is True) or (v.lower() in ('true', '1'))", "\n", "    ", "return", "v", "is", "True", "or", "v", ".", "lower", "(", ")", "in", "(", "'true'", ",", "'1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.config.add_argument_group": [[11, 15], ["parser.add_argument_group", "arg_lists.append"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.config.add_argument_group"], ["def", "add_argument_group", "(", "name", ")", ":", "\n", "    ", "arg", "=", "parser", ".", "add_argument_group", "(", "name", ")", "\n", "arg_lists", ".", "append", "(", "arg", ")", "\n", "return", "arg", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.config.gpu_logic": [[113, 123], ["None"], "function", ["None"], ["def", "gpu_logic", "(", "config", ")", ":", "\n", "\n", "#consistency between use_gpu and num_gpu", "\n", "    ", "if", "config", ".", "num_gpu", ">", "0", ":", "\n", "        ", "config", ".", "use_gpu", "=", "True", "\n", "", "else", ":", "\n", "        ", "config", ".", "use_gpu", "=", "False", "\n", "#        if config.use_gpu and config.num_gpu==0:", "\n", "#            config.num_gpu=1", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.config.get_config": [[125, 143], ["parser.parse_known_args", "config.gpu_logic", "max", "print"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.config.gpu_logic"], ["", "def", "get_config", "(", ")", ":", "\n", "    ", "config", ",", "unparsed", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "config", "=", "gpu_logic", "(", "config", ")", "\n", "config", ".", "num_devices", "=", "max", "(", "1", ",", "config", ".", "num_gpu", ")", "#that are used in backprop", "\n", "\n", "\n", "#Just for BEGAN:", "\n", "##this has to respect gpu/cpu", "\n", "##data_format = 'NCHW'", "\n", "#if config.use_gpu:", "\n", "#    data_format = 'NCHW'", "\n", "#else:", "\n", "#    data_format = 'NHWC'", "\n", "#setattr(config, 'data_format', data_format)", "\n", "\n", "print", "(", "'Loaded ./config.py'", ")", "\n", "\n", "return", "config", ",", "unparsed", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.main.get_trainer": [[23, 76], ["print", "tensorflow.reset_default_graph", "config.get_config", "causal_controller.config.get_config", "causal_dcgan.config.get_config", "causal_began.config.get_config", "numpy.random.seed", "utils.prepare_dirs_and_logger", "causal_graph.get_causal_graph", "trainer.Trainer", "print", "utils.save_configs", "ValueError"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.config.get_config", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.config.get_config", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.config.get_config", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.config.get_config", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.prepare_dirs_and_logger", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.causal_graph.get_causal_graph", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.utils.save_configs"], ["def", "get_trainer", "(", ")", ":", "\n", "    ", "print", "(", "'tf: resetting default graph!'", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "#for repeated calls in ipython", "\n", "\n", "\n", "####GET CONFIGURATION####", "\n", "#TODO:load configurations from previous model when loading previous model", "\n", "##if load_path:", "\n", "#load config files from dir", "\n", "#except if pt_load_path, get cc_config from before", "\n", "#overwrite is_train, is_pretrain with current args--sort of a mess", "\n", "\n", "##else:", "\n", "config", ",", "_", "=", "get_config", "(", ")", "\n", "cc_config", ",", "_", "=", "get_cc_config", "(", ")", "\n", "dcgan_config", ",", "_", "=", "get_dcgan_config", "(", ")", "\n", "began_config", ",", "_", "=", "get_began_config", "(", ")", "\n", "\n", "###SEEDS###", "\n", "np", ".", "random", ".", "seed", "(", "config", ".", "seed", ")", "\n", "#tf.set_random_seed(config.seed) # Not working right now.", "\n", "\n", "prepare_dirs_and_logger", "(", "config", ")", "\n", "if", "not", "config", ".", "load_path", ":", "\n", "        ", "print", "(", "'saving config because load path not given'", ")", "\n", "save_configs", "(", "config", ",", "cc_config", ",", "dcgan_config", ",", "began_config", ")", "\n", "\n", "#Resolve model differences and batch_size", "\n", "", "if", "config", ".", "model_type", ":", "\n", "        ", "if", "config", ".", "model_type", "==", "'dcgan'", ":", "\n", "            ", "config", ".", "batch_size", "=", "dcgan_config", ".", "batch_size", "\n", "cc_config", ".", "batch_size", "=", "dcgan_config", ".", "batch_size", "# make sure the batch size of cc is the same as the image model", "\n", "config", ".", "Model", "=", "CausalGAN", ".", "CausalGAN", "\n", "model_config", "=", "dcgan_config", "\n", "", "if", "config", ".", "model_type", "==", "'began'", ":", "\n", "            ", "config", ".", "batch_size", "=", "began_config", ".", "batch_size", "\n", "cc_config", ".", "batch_size", "=", "began_config", ".", "batch_size", "# make sure the batch size of cc is the same as the image model", "\n", "config", ".", "Model", "=", "CausalBEGAN", ".", "CausalBEGAN", "\n", "model_config", "=", "began_config", "\n", "\n", "", "", "else", ":", "#no image model", "\n", "        ", "model_config", "=", "None", "\n", "config", ".", "batch_size", "=", "cc_config", ".", "batch_size", "\n", "\n", "if", "began_config", ".", "is_train", "or", "dcgan_config", ".", "is_train", ":", "\n", "            ", "raise", "ValueError", "(", "'need to specify model_type for is_train=True'", ")", "\n", "\n", "#Interpret causal_model keyword", "\n", "", "", "cc_config", ".", "graph", "=", "get_causal_graph", "(", "config", ".", "causal_model", ")", "\n", "\n", "#Builds and loads specified models:", "\n", "trainer", "=", "Trainer", "(", "config", ",", "cc_config", ",", "model_config", ")", "\n", "return", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.main.main": [[77, 85], ["trainer.pretrain_loop", "trainer.train_loop"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.trainer.Trainer.pretrain_loop", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.trainer.Trainer.train_loop"], ["", "def", "main", "(", "trainer", ")", ":", "\n", "#Do pretraining", "\n", "    ", "if", "trainer", ".", "cc_config", ".", "is_pretrain", ":", "\n", "        ", "trainer", ".", "pretrain_loop", "(", ")", "\n", "\n", "", "if", "trainer", ".", "model_config", ":", "\n", "        ", "if", "trainer", ".", "model_config", ".", "is_train", ":", "\n", "            ", "trainer", ".", "train_loop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.data_loader.DataLoader.__init__": [[24, 54], ["setattr", "pandas.read_csv", "data_loader.DataLoader.all_attr.mean", "data_loader.DataLoader.attr.mean", "os.path.join", "len", "int", "glob.glob.glob", "os.path.join"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "label_names", ",", "config", ")", ":", "\n", "        ", "self", ".", "label_names", "=", "label_names", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "scale_size", "=", "config", ".", "input_scale_size", "\n", "#self.data_format=config.data_format", "\n", "self", ".", "split", "=", "config", ".", "split", "\n", "self", ".", "do_shuffle", "=", "config", ".", "do_shuffle", "\n", "self", ".", "num_worker", "=", "config", ".", "num_worker", "\n", "self", ".", "is_crop", "=", "config", ".", "is_crop", "\n", "self", ".", "is_grayscale", "=", "config", ".", "grayscale", "\n", "\n", "attr_file", "=", "glob", "(", "\"{}/*.{}\"", ".", "format", "(", "config", ".", "data_path", ",", "'txt'", ")", ")", "[", "0", "]", "\n", "setattr", "(", "config", ",", "'attr_file'", ",", "attr_file", ")", "\n", "\n", "attributes", "=", "pd", ".", "read_csv", "(", "config", ".", "attr_file", ",", "delim_whitespace", "=", "True", ")", "#+-1", "\n", "#Store all labels for reference", "\n", "self", ".", "all_attr", "=", "0.5", "*", "(", "attributes", "+", "1", ")", "# attributes is {0,1}", "\n", "self", ".", "all_label_means", "=", "self", ".", "all_attr", ".", "mean", "(", ")", "\n", "\n", "#but only return desired labels in queues", "\n", "self", ".", "attr", "=", "self", ".", "all_attr", "[", "label_names", "]", "\n", "self", ".", "label_means", "=", "self", ".", "attr", ".", "mean", "(", ")", "# attributes is 0,1", "\n", "\n", "self", ".", "image_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_path", ",", "'images'", ")", "\n", "self", ".", "filenames", "=", "[", "os", ".", "path", ".", "join", "(", "self", ".", "image_dir", ",", "j", ")", "for", "j", "in", "self", ".", "attr", ".", "index", "]", "\n", "\n", "self", ".", "num_examples_per_epoch", "=", "len", "(", "self", ".", "filenames", ")", "\n", "self", ".", "min_fraction_of_examples_in_queue", "=", "0.001", "#go faster during debug", "\n", "#self.min_fraction_of_examples_in_queue=0.01", "\n", "self", ".", "min_queue_examples", "=", "int", "(", "self", ".", "num_examples_per_epoch", "*", "self", ".", "min_fraction_of_examples_in_queue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.data_loader.DataLoader.get_label_queue": [[56, 79], ["tensorflow.convert_to_tensor", "tensorflow.to_float", "max", "tensorflow.train.shuffle_batch", "tensorflow.name_scope", "tensorflow.train.slice_input_producer", "zip", "tensorflow.split", "len"], "methods", ["None"], ["", "def", "get_label_queue", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "tf_labels", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "attr", ".", "values", ",", "dtype", "=", "tf", ".", "uint8", ")", "#0,1", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'label_queue'", ")", ":", "\n", "            ", "uint_label", "=", "tf", ".", "train", ".", "slice_input_producer", "(", "[", "tf_labels", "]", ")", "[", "0", "]", "\n", "", "label", "=", "tf", ".", "to_float", "(", "uint_label", ")", "\n", "\n", "#All labels, not just those in causal_model", "\n", "dict_data", "=", "{", "sl", ":", "tl", "for", "sl", ",", "tl", "in", "\n", "zip", "(", "self", ".", "label_names", ",", "tf", ".", "split", "(", "label", ",", "len", "(", "self", ".", "label_names", ")", ")", ")", "}", "\n", "\n", "\n", "num_preprocess_threads", "=", "max", "(", "self", ".", "num_worker", "-", "3", ",", "1", ")", "\n", "\n", "data_batch", "=", "tf", ".", "train", ".", "shuffle_batch", "(", "\n", "dict_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_threads", "=", "num_preprocess_threads", ",", "\n", "capacity", "=", "self", ".", "min_queue_examples", "+", "3", "*", "batch_size", ",", "\n", "min_after_dequeue", "=", "self", ".", "min_queue_examples", ",", "\n", ")", "\n", "\n", "return", "data_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.data_loader.DataLoader.get_data_queue": [[80, 131], ["tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.read_file", "tensorflow.image.decode_jpeg", "tensorflow.cast", "tensorflow.to_float", "print", "max", "tensorflow.train.shuffle_batch", "tensorflow.name_scope", "tensorflow.train.slice_input_producer", "tensorflow.image.resize_image_with_crop_or_pad", "getattr", "tensorflow.image.resize_images", "tensorflow.image.random_flip_left_right", "tensorflow.summary.image", "tensorflow.expand_dims", "zip", "dict_data.keys", "tensorflow.split", "len"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.keys"], ["", "def", "get_data_queue", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "image_files", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "filenames", ",", "dtype", "=", "tf", ".", "string", ")", "\n", "tf_labels", "=", "tf", ".", "convert_to_tensor", "(", "self", ".", "attr", ".", "values", ",", "dtype", "=", "tf", ".", "uint8", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'filename_queue'", ")", ":", "\n", "#must be list", "\n", "            ", "str_queue", "=", "tf", ".", "train", ".", "slice_input_producer", "(", "[", "image_files", ",", "tf_labels", "]", ")", "\n", "", "img_filename", ",", "uint_label", "=", "str_queue", "\n", "\n", "img_contents", "=", "tf", ".", "read_file", "(", "img_filename", ")", "\n", "image", "=", "tf", ".", "image", ".", "decode_jpeg", "(", "img_contents", ",", "channels", "=", "3", ")", "\n", "\n", "image", "=", "tf", ".", "cast", "(", "image", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "if", "self", ".", "config", ".", "is_crop", ":", "#use dcgan cropping", "\n", "#dcgan center-crops input to 108x108, outputs 64x64 #centrally crops it #We emulate that here", "\n", "            ", "image", "=", "tf", ".", "image", ".", "resize_image_with_crop_or_pad", "(", "image", ",", "108", ",", "108", ")", "\n", "#image=tf.image.resize_bilinear(image,[scale_size,scale_size])#must be 4D", "\n", "\n", "resize_method", "=", "getattr", "(", "tf", ".", "image", ".", "ResizeMethod", ",", "self", ".", "config", ".", "resize_method", ")", "\n", "image", "=", "tf", ".", "image", ".", "resize_images", "(", "image", ",", "[", "self", ".", "scale_size", ",", "self", ".", "scale_size", "]", ",", "\n", "method", "=", "resize_method", ")", "\n", "#Some dataset enlargement. Might as well.", "\n", "image", "=", "tf", ".", "image", ".", "random_flip_left_right", "(", "image", ")", "\n", "\n", "##carpedm-began crops to 128x128 starting at (50,25), then resizes to 64x64", "\n", "#image=tf.image.crop_to_bounding_box(image, 50, 25, 128, 128)", "\n", "#image=tf.image.resize_nearest_neighbor(image, [scale_size, scale_size])", "\n", "\n", "tf", ".", "summary", ".", "image", "(", "'real_image'", ",", "tf", ".", "expand_dims", "(", "image", ",", "0", ")", ")", "\n", "\n", "\n", "\n", "", "label", "=", "tf", ".", "to_float", "(", "uint_label", ")", "\n", "#Creates a dictionary  {'Male',male_tensor, 'Young',young_tensor} etc..", "\n", "dict_data", "=", "{", "sl", ":", "tl", "for", "sl", ",", "tl", "in", "\n", "zip", "(", "self", ".", "label_names", ",", "tf", ".", "split", "(", "label", ",", "len", "(", "self", ".", "label_names", ")", ")", ")", "}", "\n", "assert", "not", "'x'", "in", "dict_data", ".", "keys", "(", ")", "#don't have a label named \"x\"", "\n", "dict_data", "[", "'x'", "]", "=", "image", "\n", "\n", "print", "(", "'Filling queue with %d Celeb images before starting to train. '", "\n", "'I don\\'t know how long this will take'", "%", "self", ".", "min_queue_examples", ")", "\n", "num_preprocess_threads", "=", "max", "(", "self", ".", "num_worker", ",", "1", ")", "\n", "\n", "data_batch", "=", "tf", ".", "train", ".", "shuffle_batch", "(", "\n", "dict_data", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_threads", "=", "num_preprocess_threads", ",", "\n", "capacity", "=", "self", ".", "min_queue_examples", "+", "3", "*", "batch_size", ",", "\n", "min_after_dequeue", "=", "self", ".", "min_queue_examples", ",", "\n", ")", "\n", "return", "data_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.data_loader.logodds": [[12, 14], ["numpy.log"], "function", ["None"], ["def", "logodds", "(", "p", ")", ":", "\n", "    ", "return", "np", ".", "log", "(", "p", "/", "(", "1.", "-", "p", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.trainer.Trainer.__init__": [[17, 156], ["os.path.join", "os.path.join", "tensorflow.placeholder_with_default", "print", "causal_controller.CausalController.CausalController", "print", "data_loader.DataLoader", "tensorflow.train.Saver", "tensorflow.summary.FileWriter", "print", "tensorflow.GPUOptions", "tensorflow.ConfigProto", "tensorflow.train.Supervisor", "tensorflow.train.Supervisor.prepare_or_wait_for_session", "trainer.Trainer.sess.run", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "print", "trainer.Trainer.data.get_label_queue", "trainer.Trainer.cc.build_pretrain", "trainer.Trainer.config.Model", "trainer.Trainer.data.get_data_queue", "utils.distribute_input_data", "utils.distribute_input_data", "print", "print", "trainer.Trainer.cc.load", "print", "figure_scripts.pairwise.crosstab", "print", "trainer.Trainer.sess.run", "trainer.Trainer.cc.saver.save", "trainer.Trainer.sess.run", "pnt_str.format.format.format", "print", "print", "tensorflow.variable_scope", "utils.get_available_gpus", "trainer.Trainer.model.build_train_op", "trainer.Trainer.model.build_summary_op", "pnt_str.format.format.format", "print", "gpu.replace().replace", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.device", "tensorflow.name_scope", "trainer.Trainer.model", "gpu.replace", "tensorflow.get_variable_scope"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.data_loader.DataLoader.get_label_queue", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.build_pretrain", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.data_loader.DataLoader.get_data_queue", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.distribute_input_data", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.distribute_input_data", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.load", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.pairwise.crosstab", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.get_available_gpus", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.CausalGAN.build_train_op", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.CausalGAN.build_summary_op"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "cc_config", ",", "model_config", "=", "None", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "cc_config", "=", "cc_config", "\n", "self", ".", "model_dir", "=", "config", ".", "model_dir", "\n", "self", ".", "cc_config", ".", "model_dir", "=", "config", ".", "model_dir", "\n", "\n", "self", ".", "model_config", "=", "model_config", "\n", "if", "self", ".", "model_config", ":", "\n", "            ", "self", ".", "model_config", ".", "model_dir", "=", "config", ".", "model_dir", "\n", "\n", "", "self", ".", "save_model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'checkpoints'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_model_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "save_model_dir", ")", "\n", "\n", "", "self", ".", "summary_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'summaries'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "summary_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "summary_dir", ")", "\n", "\n", "", "self", ".", "load_path", "=", "config", ".", "load_path", "\n", "self", ".", "use_gpu", "=", "config", ".", "use_gpu", "\n", "\n", "#This tensor controls batch_size for all models", "\n", "#Not expected to change during training, but during testing it can be", "\n", "#helpful to change it", "\n", "\n", "self", ".", "batch_size", "=", "tf", ".", "placeholder_with_default", "(", "self", ".", "config", ".", "batch_size", ",", "[", "]", ",", "name", "=", "'batch_size'", ")", "\n", "\n", "loader_batch_size", "=", "config", ".", "num_devices", "*", "config", ".", "batch_size", "\n", "\n", "#Always need to build CC", "\n", "print", "(", "'setting up CausalController'", ")", "\n", "cc_batch_size", "=", "config", ".", "num_devices", "*", "self", ".", "batch_size", "#Tensor/placeholder", "\n", "self", ".", "cc", "=", "CausalController", "(", "cc_batch_size", ",", "cc_config", ")", "\n", "self", ".", "step", "=", "self", ".", "cc", ".", "step", "\n", "\n", "#Data", "\n", "print", "(", "'setting up data'", ")", "\n", "self", ".", "data", "=", "DataLoader", "(", "self", ".", "cc", ".", "label_names", ",", "config", ")", "\n", "\n", "if", "self", ".", "cc_config", ".", "is_pretrain", "or", "self", ".", "config", ".", "build_pretrain", ":", "\n", "            ", "print", "(", "'setup pretrain'", ")", "\n", "#queue system to feed labels quickly. This does not queue images", "\n", "label_queue", "=", "self", ".", "data", ".", "get_label_queue", "(", "loader_batch_size", ")", "\n", "self", ".", "cc", ".", "build_pretrain", "(", "label_queue", ")", "\n", "\n", "#Build Model", "\n", "", "if", "self", ".", "model_config", ":", "\n", "#Will build both gen and discrim", "\n", "            ", "self", ".", "model", "=", "self", ".", "config", ".", "Model", "(", "self", ".", "batch_size", ",", "self", ".", "model_config", ")", "\n", "\n", "#Trainer step is defined as cc.step+model.step", "\n", "#e.g. 10k iter pretrain and 100k iter image model", "\n", "#will have image summaries at 100k but trainer model saved at Model-110k", "\n", "self", ".", "step", "+=", "self", ".", "model", ".", "step", "\n", "\n", "# This queue holds (image,label) pairs, and is used for training conditional GANs", "\n", "data_queue", "=", "self", ".", "data", ".", "get_data_queue", "(", "loader_batch_size", ")", "\n", "\n", "self", ".", "real_data_by_gpu", "=", "distribute_input_data", "(", "data_queue", ",", "config", ".", "num_gpu", ")", "\n", "self", ".", "fake_data_by_gpu", "=", "distribute_input_data", "(", "self", ".", "cc", ".", "label_dict", ",", "config", ".", "num_gpu", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'tower'", ")", ":", "\n", "                ", "for", "gpu", "in", "get_available_gpus", "(", ")", ":", "\n", "                    ", "print", "(", "'using device:'", ",", "gpu", ")", "\n", "\n", "real_data", "=", "self", ".", "real_data_by_gpu", "[", "gpu", "]", "\n", "fake_data", "=", "self", ".", "fake_data_by_gpu", "[", "gpu", "]", "\n", "tower", "=", "gpu", ".", "replace", "(", "'/'", ",", "''", ")", ".", "replace", "(", "':'", ",", "'_'", ")", "\n", "\n", "with", "tf", ".", "device", "(", "gpu", ")", ",", "tf", ".", "name_scope", "(", "tower", ")", ":", "\n", "#Build num_gpu copies of graph: inputs->gradient", "\n", "#Updates self.tower_dict", "\n", "                        ", "self", ".", "model", "(", "real_data", ",", "fake_data", ")", "\n", "\n", "#allow future gpu to use same variables", "\n", "", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "\n", "", "", "if", "self", ".", "model_config", ".", "is_train", "or", "self", ".", "config", ".", "build_train", ":", "\n", "                ", "self", ".", "model", ".", "build_train_op", "(", ")", "\n", "self", ".", "model", ".", "build_summary_op", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "'Image model not built'", ")", "\n", "\n", "", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "keep_checkpoint_every_n_hours", "=", "2", ")", "\n", "self", ".", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "summary_dir", ")", "\n", "\n", "print", "(", "'trainer.model_dir:'", ",", "self", ".", "model_dir", ")", "\n", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "allow_growth", "=", "True", ",", "\n", "per_process_gpu_memory_fraction", "=", "0.333", ")", "\n", "sess_config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ",", "\n", "gpu_options", "=", "gpu_options", ")", "\n", "\n", "sv", "=", "tf", ".", "train", ".", "Supervisor", "(", "\n", "logdir", "=", "self", ".", "save_model_dir", ",", "\n", "is_chief", "=", "True", ",", "\n", "saver", "=", "self", ".", "saver", ",", "\n", "summary_op", "=", "None", ",", "\n", "summary_writer", "=", "self", ".", "summary_writer", ",", "\n", "save_model_secs", "=", "300", ",", "\n", "global_step", "=", "self", ".", "step", ",", "\n", "ready_for_local_init_op", "=", "None", "\n", ")", "\n", "self", ".", "sess", "=", "sv", ".", "prepare_or_wait_for_session", "(", "config", "=", "sess_config", ")", "\n", "\n", "if", "cc_config", ".", "pt_load_path", ":", "\n", "            ", "print", "(", "'Attempting to load pretrain model:'", ",", "cc_config", ".", "pt_load_path", ")", "\n", "self", ".", "cc", ".", "load", "(", "self", ".", "sess", ",", "cc_config", ".", "pt_load_path", ")", "\n", "\n", "print", "(", "'Check tvd after restore'", ")", "\n", "info", "=", "crosstab", "(", "self", ",", "report_tvd", "=", "True", ")", "\n", "print", "(", "'tvd after load:'", ",", "info", "[", "'tvd'", "]", ")", "\n", "\n", "#save copy of cc model in new dir", "\n", "cc_step", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "cc", ".", "step", ")", "\n", "self", ".", "cc", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "self", ".", "cc", ".", "save_model_name", ",", "cc_step", ")", "\n", "\n", "", "if", "config", ".", "load_path", ":", "#Declare loading point", "\n", "            ", "pnt_str", "=", "'Loaded variables at ccStep:{}'", "\n", "cc_step", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "cc", ".", "step", ")", "\n", "pnt_str", "=", "pnt_str", ".", "format", "(", "cc_step", ")", "\n", "print", "(", "'pntstr'", ",", "pnt_str", ")", "\n", "if", "self", ".", "model_config", ":", "\n", "                ", "pnt_str", "+=", "' imagemodelStep:{}'", "\n", "model_step", "=", "self", ".", "sess", ".", "run", "\n", "pnt_str", "=", "pnt_str", ".", "format", "(", "model_step", ")", "\n", "", "print", "(", "pnt_str", ")", "\n", "\n", "#PREPARE training:", "\n", "#TODO save as Variables so they are restored to same values when load model", "\n", "", "fixed_batch_size", "=", "256", "#get this many fixed z values", "\n", "\n", "self", ".", "fetch_fixed_z", "=", "{", "n", ".", "z", ":", "n", ".", "z", "for", "n", "in", "self", ".", "cc", ".", "nodes", "}", "\n", "if", "model_config", ":", "\n", "            ", "self", ".", "fetch_fixed_z", "[", "self", ".", "model", ".", "z_gen", "]", "=", "self", ".", "model", ".", "z_gen", "\n", "\n", "#feed_dict that ensures constant inputs", "\n", "#add feed_fixed_z[self.cc.Male.label]=1*ones() to intervene", "\n", "", "self", ".", "feed_fixed_z", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "fetch_fixed_z", ",", "{", "self", ".", "batch_size", ":", "fixed_batch_size", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.trainer.Trainer.pretrain_loop": [[157, 236], ["hasattr", "trainer.Trainer.sess.run", "figure_scripts.pairwise.crosstab", "tqdm.trange", "print", "trainer.Trainer.sess.run", "print", "trainer.Trainer.cc.critic_update", "trainer.Trainer.sess.run", "figure_scripts.pairwise.crosstab", "trainer.Trainer.cc.saver.save", "print", "figure_scripts.pairwise.crosstab", "print", "trainer.Trainer.pretrain_loop.break_pretrain"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.pairwise.crosstab", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.critic_update", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.pairwise.crosstab", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.pairwise.crosstab"], ["", "def", "pretrain_loop", "(", "self", ",", "num_iter", "=", "None", ")", ":", "\n", "        ", "'''\n        num_iter : is the number of *additional* iterations to do\n        baring one of the quit conditions (the model may already be\n        trained for some number of iterations). Defaults to\n        cc_config.pretrain_iter.\n\n        '''", "\n", "#TODO: potentially should be moved into CausalController for consistency", "\n", "\n", "num_iter", "=", "num_iter", "or", "self", ".", "cc", ".", "config", ".", "pretrain_iter", "\n", "\n", "if", "hasattr", "(", "self", ",", "'model'", ")", ":", "\n", "            ", "model_step", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "model", ".", "step", ")", "\n", "assert", "model_step", "==", "0", ",", "'if pretraining, model should not be trained already'", "\n", "\n", "", "cc_step", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "cc", ".", "step", ")", "\n", "if", "cc_step", ">", "0", ":", "\n", "            ", "print", "(", "'Resuming training of already optimized CC model at\\\n                  step:'", ",", "cc_step", ")", "\n", "\n", "", "label_stats", "=", "crosstab", "(", "self", ",", "report_tvd", "=", "True", ")", "\n", "\n", "def", "break_pretrain", "(", "label_stats", ",", "counter", ")", ":", "\n", "            ", "c1", "=", "counter", ">=", "self", ".", "cc", ".", "config", ".", "min_pretrain_iter", "\n", "c2", "=", "(", "label_stats", "[", "'tvd'", "]", "<", "self", ".", "cc", ".", "config", ".", "min_tvd", ")", "\n", "return", "(", "c1", "and", "c2", ")", "\n", "\n", "", "for", "counter", "in", "trange", "(", "cc_step", ",", "cc_step", "+", "num_iter", ")", ":", "\n", "#Check for early exit", "\n", "            ", "if", "counter", "%", "(", "10", "*", "self", ".", "cc", ".", "config", ".", "log_step", ")", "==", "0", ":", "\n", "                ", "label_stats", "=", "crosstab", "(", "self", ",", "report_tvd", "=", "True", ")", "\n", "print", "(", "'ptstep:'", ",", "counter", ",", "'  TVD:'", ",", "label_stats", "[", "'tvd'", "]", ")", "\n", "if", "break_pretrain", "(", "label_stats", ",", "counter", ")", ":", "\n", "                    ", "print", "(", "'Completed Pretrain by TVD Qualification'", ")", "\n", "break", "\n", "\n", "#Optimize critic", "\n", "", "", "self", ".", "cc", ".", "critic_update", "(", "self", ".", "sess", ")", "\n", "\n", "#one iter causal controller", "\n", "fetch_dict", "=", "{", "\n", "\"pretrain_op\"", ":", "self", ".", "cc", ".", "train_op", ",", "\n", "'cc_step'", ":", "self", ".", "cc", ".", "step", ",", "\n", "'step'", ":", "self", ".", "step", ",", "\n", "}", "\n", "\n", "#update what to run", "\n", "if", "counter", "%", "self", ".", "cc", ".", "config", ".", "log_step", "==", "0", ":", "\n", "                ", "fetch_dict", ".", "update", "(", "{", "\n", "\"summary\"", ":", "self", ".", "cc", ".", "summary_op", ",", "\n", "\"c_loss\"", ":", "self", ".", "cc", ".", "c_loss", ",", "\n", "\"dcc_loss\"", ":", "self", ".", "cc", ".", "dcc_loss", ",", "\n", "}", ")", "\n", "", "result", "=", "self", ".", "sess", ".", "run", "(", "fetch_dict", ")", "\n", "\n", "#update summaries", "\n", "if", "counter", "%", "self", ".", "cc", ".", "config", ".", "log_step", "==", "0", ":", "\n", "                ", "if", "counter", "%", "(", "10", "*", "self", ".", "cc", ".", "config", ".", "log_step", ")", "==", "0", ":", "\n", "                    ", "sum_tvd", "=", "make_summary", "(", "'misc/tvd'", ",", "label_stats", "[", "'tvd'", "]", ")", "\n", "self", ".", "summary_writer", ".", "add_summary", "(", "sum_tvd", ",", "result", "[", "'cc_step'", "]", ")", "\n", "\n", "", "self", ".", "summary_writer", ".", "add_summary", "(", "result", "[", "'summary'", "]", ",", "result", "[", "'cc_step'", "]", ")", "\n", "self", ".", "summary_writer", ".", "flush", "(", ")", "\n", "\n", "c_loss", "=", "result", "[", "'c_loss'", "]", "\n", "dcc_loss", "=", "result", "[", "'dcc_loss'", "]", "\n", "print", "(", "\"[{}/{}] Loss_C: {:.6f} Loss_DCC: {:.6f}\"", ".", "format", "(", "counter", ",", "cc_step", "+", "num_iter", ",", "c_loss", ",", "dcc_loss", ")", ")", "\n", "\n", "", "if", "counter", "%", "(", "10", "*", "self", ".", "cc", ".", "config", ".", "log_step", ")", "==", "0", ":", "\n", "                ", "self", ".", "cc", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "self", ".", "cc", ".", "save_model_name", ",", "result", "[", "'cc_step'", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "label_stats", "=", "crosstab", "(", "self", ",", "report_tvd", "=", "True", ")", "\n", "self", ".", "cc", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "self", ".", "cc", ".", "save_model_name", ",", "self", ".", "cc", ".", "step", ")", "\n", "print", "(", "'Completed Pretrain by Exhausting all Pretrain Steps!'", ")", "\n", "\n", "", "print", "(", "'step:'", ",", "result", "[", "'cc_step'", "]", ",", "'  TVD:'", ",", "label_stats", "[", "'tvd'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.trainer.Trainer.train_loop": [[238, 268], ["print", "tqdm.trange", "trainer.Trainer.model.train_step", "trainer.Trainer.sess.run", "trainer.Trainer.summary_writer.add_summary", "trainer.Trainer.summary_writer.flush", "trainer.Trainer.causal_sampling", "trainer.Trainer.label_interpolation", "trainer.Trainer.sample_diversity", "trainer.Trainer.causal_sampling"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.CausalGAN.train_step", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.trainer.Trainer.causal_sampling", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.trainer.Trainer.label_interpolation", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.trainer.Trainer.sample_diversity", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.trainer.Trainer.causal_sampling"], ["", "def", "train_loop", "(", "self", ",", "num_iter", "=", "None", ")", ":", "\n", "        ", "'''\n        This is a function for handling the training of either CausalBEGAN or\n        CausalGAN models. The python function Model.train_step() is called\n        num_iter times and some general image save features: intervening,\n        conditioning, etc are done here too.\n        '''", "\n", "num_iter", "=", "num_iter", "or", "self", ".", "model_config", ".", "num_iter", "\n", "\n", "#Train loop", "\n", "print", "(", "'Entering train loop..'", ")", "\n", "for", "counter", "in", "trange", "(", "num_iter", ")", ":", "\n", "\n", "            ", "self", ".", "model", ".", "train_step", "(", "self", ".", "sess", ",", "counter", ")", "\n", "\n", "#scalar and histogram summaries", "\n", "if", "counter", "%", "self", ".", "config", ".", "log_step", "==", "0", ":", "\n", "                ", "step", ",", "summ", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "step", ",", "self", ".", "model", ".", "summary_op", "]", ")", "\n", "self", ".", "summary_writer", ".", "add_summary", "(", "summ", ",", "step", ")", "\n", "self", ".", "summary_writer", ".", "flush", "(", ")", "\n", "\n", "#expensive summaries", "\n", "", "if", "counter", "%", "(", "self", ".", "config", ".", "log_step", "*", "50", ")", "==", "0", ":", "\n", "                ", "self", ".", "causal_sampling", "(", "[", "8", ",", "16", "]", ")", "\n", "self", ".", "label_interpolation", "(", ")", "\n", "self", ".", "sample_diversity", "(", ")", "\n", "\n", "#more rare events", "\n", "", "if", "counter", "%", "(", "self", ".", "config", ".", "log_step", "*", "100", ")", "==", "0", ":", "\n", "                ", "self", ".", "causal_sampling", "(", "[", "2", ",", "10", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.trainer.Trainer.sample_label": [[270, 272], ["trainer.Trainer.cc.sample_label"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.sample_label"], ["", "", "", "def", "sample_label", "(", "self", ",", "cond_dict", "=", "None", ",", "do_dict", "=", "None", ",", "N", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "cc", ".", "sample_label", "(", "self", ".", "sess", ",", "cond_dict", "=", "cond_dict", ",", "do_dict", "=", "do_dict", ",", "N", "=", "N", ")", "\n", "##", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.trainer.Trainer.label_interpolation": [[275, 310], ["os.path.join", "numpy.tile().reshape", "fixed_z.update", "print", "os.path.exists", "os.mkdir", "fixed_z.copy", "trainer.Trainer.sess.run", "save_name.format", "utils.save_image", "save_name.format", "numpy.repeat", "numpy.tile", "trainer.Trainer.feed_fixed_z.items", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.save_image", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items"], ["", "def", "label_interpolation", "(", "self", ",", "inputs", "=", "None", ",", "save_dir", "=", "None", ",", "ext", "=", "'.pdf'", ")", ":", "\n", "        ", "'''\n        Holding all other inputs the same, move a causal controller\n        labels between 0 and 1. Recalculate the downstream effects to capture the causal effect.\n\n        For each label, this makes an 8x8 image with each row being\n        an instance of z_fixed with varying label\n        '''", "\n", "\n", "interpolation_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'label_interpolation'", ")", "\n", "save_dir", "=", "save_dir", "or", "interpolation_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "\n", "", "inputs", "=", "inputs", "or", "{", "}", "\n", "\n", "#use the first 8 values", "\n", "#contrasting np.repeat and np.tile to get all combinations", "\n", "fixed_z", "=", "inputs", "or", "{", "k", ":", "np", ".", "repeat", "(", "v", "[", ":", "8", "]", ",", "8", ",", "axis", "=", "0", ")", "for", "k", ",", "v", "in", "self", ".", "feed_fixed_z", ".", "items", "(", ")", "}", "\n", "setval", "=", "np", ".", "tile", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "8", ")", ",", "8", ")", ".", "reshape", "(", "[", "64", ",", "1", "]", ")", "\n", "\n", "fixed_z", ".", "update", "(", "{", "self", ".", "batch_size", ":", "64", "}", ")", "\n", "save_name", "=", "'{}/{}_G_interp_{}'", "+", "ext", "\n", "\n", "#make 8x8 image", "\n", "for", "node", "in", "self", ".", "cc", ".", "nodes", ":", "\n", "\n", "            ", "fd", "=", "fixed_z", ".", "copy", "(", ")", "\n", "fd", "[", "node", ".", "label", "]", "=", "setval", "\n", "images", ",", "step", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "G", ",", "self", ".", "model", ".", "step", "]", ",", "fd", ")", "\n", "interp_path", "=", "save_name", ".", "format", "(", "save_dir", ",", "step", ",", "node", ".", "name", ")", "\n", "save_image", "(", "images", ",", "interp_path", ",", "nrow", "=", "8", ")", "\n", "\n", "", "out_str", "=", "\"[*] Interpolation Samples saved: \"", "+", "save_name", "\n", "print", "(", "save_name", ".", "format", "(", "save_dir", ",", "step", ",", "'*'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.trainer.Trainer.causal_sampling": [[311, 397], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.prod", "print", "print", "print", "len", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "trainer.Trainer.sample_label", "trainer.Trainer.sample_label", "trainer.Trainer.sample_label", "trainer.Trainer.sample_label", "trainer.Trainer.sess.run", "trainer.Trainer.sess.run", "trainer.Trainer.sess.run", "trainer.Trainer.sess.run", "trainer.Trainer.sess.run", "os.path.join.format", "os.path.join.format", "os.path.join.format", "os.path.join.format", "utils.save_image", "utils.save_image", "utils.save_image", "utils.save_image", "map", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "trainer.Trainer.iteritems", "trainer.Trainer.iteritems", "trainer.Trainer.iteritems", "trainer.Trainer.iteritems"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.sample_label", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.sample_label", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.sample_label", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.sample_label", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.save_image", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.save_image", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.save_image", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.save_image"], ["", "def", "causal_sampling", "(", "self", ",", "img_shape", ",", "ext", "=", "'.pdf'", ")", ":", "\n", "        ", "'''\n        sampling new noise inputs each time, draw samples from\n        interventional distributions.\n        Recalculate downstream effects given a label value\n\n        img_shape must have rows divisible by 2\n\n        This function implements the following three sampling techniques: \n        1) Images where \n            Top half is sampled from the intervention do(label=1)\n            Bottom half is sampled from the intervention do(label=0)\n        2) Images where\n            Top half is sampled from the intervention do(label=1/0)\n            Bottom half is sampled conditioned on |label = 1/0\n        3) Image where \n            Top half is sampled conditioned on |label = 1\n            Bottom half is sampled conditioned on |label = 0\n        '''", "\n", "\n", "assert", "len", "(", "img_shape", ")", "==", "2", ",", "'2d shape for output'", "\n", "assert", "img_shape", "[", "0", "]", "%", "2", "==", "0", ",", "'should have equal top and bot half'", "\n", "\n", "shape_str", "=", "'_'", "+", "'x'", ".", "join", "(", "map", "(", "str", ",", "img_shape", ")", ")", "\n", "\n", "#sample given(Label=1/0)", "\n", "conditioning_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'label_conditioning'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "conditioning_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "conditioning_dir", ")", "\n", "\n", "#sample do(Label=1/0)", "\n", "", "intervention_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'label_intervention'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "intervention_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "intervention_dir", ")", "\n", "\n", "#sample do(Label=1)/given(Label=1)", "\n", "#sample do(Label=0)/given(Label=0)", "\n", "", "intv_v_conditioning_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'label_intv_v_conditioning'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "intv_v_conditioning_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "intv_v_conditioning_dir", ")", "\n", "\n", "", "save_name_cond", "=", "os", ".", "path", ".", "join", "(", "conditioning_dir", ",", "'{}_condition_{}'", "+", "shape_str", "+", "ext", ")", "\n", "save_name_intv", "=", "os", ".", "path", ".", "join", "(", "intervention_dir", ",", "'{}_interv_{}'", "+", "shape_str", "+", "ext", ")", "\n", "save_name_intvcond", "=", "os", ".", "path", ".", "join", "(", "intv_v_conditioning_dir", ",", "'{}_intvcond_{}={}'", "+", "shape_str", "+", "ext", ")", "\n", "\n", "half_shape", "=", "[", "img_shape", "[", "0", "]", "//", "2", ",", "img_shape", "[", "1", "]", "]", "\n", "N", "=", "np", ".", "prod", "(", "half_shape", ")", "\n", "\n", "for", "name", "in", "self", ".", "cc", ".", "node_names", ":", "\n", "#First sample labels (two step more efficient)", "\n", "#ex:{'Male':1}", "\n", "            ", "c0", "=", "self", ".", "sample_label", "(", "cond_dict", "=", "{", "name", ":", "0", "}", ",", "N", "=", "N", ")", "\n", "c1", "=", "self", ".", "sample_label", "(", "cond_dict", "=", "{", "name", ":", "1", "}", ",", "N", "=", "N", ")", "\n", "d0", "=", "self", ".", "sample_label", "(", "do_dict", "=", "{", "name", ":", "0", "}", ",", "N", "=", "N", ")", "\n", "d1", "=", "self", ".", "sample_label", "(", "do_dict", "=", "{", "name", ":", "1", "}", ",", "N", "=", "N", ")", "\n", "\n", "feed_c0", "=", "{", "self", ".", "cc", ".", "label_dict", "[", "k", "]", ":", "v", "for", "k", ",", "v", "in", "c0", ".", "iteritems", "(", ")", "}", "\n", "feed_c1", "=", "{", "self", ".", "cc", ".", "label_dict", "[", "k", "]", ":", "v", "for", "k", ",", "v", "in", "c1", ".", "iteritems", "(", ")", "}", "\n", "feed_d0", "=", "{", "self", ".", "cc", ".", "label_dict", "[", "k", "]", ":", "v", "for", "k", ",", "v", "in", "d0", ".", "iteritems", "(", ")", "}", "\n", "feed_d1", "=", "{", "self", ".", "cc", ".", "label_dict", "[", "k", "]", ":", "v", "for", "k", ",", "v", "in", "d1", ".", "iteritems", "(", ")", "}", "\n", "\n", "feed_c0", "[", "self", ".", "batch_size", "]", "=", "N", "\n", "feed_c1", "[", "self", ".", "batch_size", "]", "=", "N", "\n", "feed_d0", "[", "self", ".", "batch_size", "]", "=", "N", "\n", "feed_d1", "[", "self", ".", "batch_size", "]", "=", "N", "\n", "\n", "step", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "model", ".", "step", ")", "\n", "c0_images", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "model", ".", "G", ",", "feed_c0", ")", "\n", "c1_images", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "model", ".", "G", ",", "feed_c1", ")", "\n", "d0_images", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "model", ".", "G", ",", "feed_d0", ")", "\n", "d1_images", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "model", ".", "G", ",", "feed_d1", ")", "\n", "\n", "save_path_cond", "=", "save_name_cond", ".", "format", "(", "step", ",", "name", ")", "\n", "save_path_intv", "=", "save_name_intv", ".", "format", "(", "step", ",", "name", ")", "\n", "save_path_intvcond0", "=", "save_name_intvcond", ".", "format", "(", "step", ",", "name", ",", "0", ")", "\n", "save_path_intvcond1", "=", "save_name_intvcond", ".", "format", "(", "step", ",", "name", ",", "1", ")", "\n", "\n", "#saveimage fills row by row from top left", "\n", "save_image", "(", "np", ".", "concatenate", "(", "[", "c1_images", ",", "c0_images", "]", ")", ",", "save_path_cond", ",", "nrow", "=", "img_shape", "[", "0", "]", ")", "\n", "save_image", "(", "np", ".", "concatenate", "(", "[", "d1_images", ",", "d0_images", "]", ")", ",", "save_path_intv", ",", "nrow", "=", "img_shape", "[", "0", "]", ")", "\n", "save_image", "(", "np", ".", "concatenate", "(", "[", "d0_images", ",", "c0_images", "]", ")", ",", "save_path_intvcond0", ",", "nrow", "=", "img_shape", "[", "0", "]", ")", "\n", "save_image", "(", "np", ".", "concatenate", "(", "[", "d1_images", ",", "c1_images", "]", ")", ",", "save_path_intvcond1", ",", "nrow", "=", "img_shape", "[", "0", "]", ")", "\n", "\n", "", "print", "(", "\"[*] Conditioning Samples saved: \"", "+", "conditioning_dir", ")", "\n", "print", "(", "\"[*] Intervention Samples saved: \"", "+", "intervention_dir", ")", "\n", "print", "(", "\"[*] Intervention vs Condition Samples saved: \"", "+", "intv_v_conditioning_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.trainer.Trainer.sample_diversity": [[399, 422], ["os.path.join", "os.path.join", "feed_fixed.update", "trainer.Trainer.sess.run", "print", "os.path.join.format", "utils.save_image", "print", "os.path.exists", "os.mkdir", "trainer.Trainer.feed_fixed_z.items"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.save_image", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items"], ["", "def", "sample_diversity", "(", "self", ",", "save_dir", "=", "None", ",", "ext", "=", "'.pdf'", ")", ":", "\n", "        ", "'''\n        This is to make a 16x16 image from fixed inputs\n        to examine the image diversity over time\n        '''", "\n", "#Make 16x16 image", "\n", "nrow", "=", "16", "\n", "diversity_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'image_diversity'", ")", "\n", "save_dir", "=", "save_dir", "or", "diversity_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "", "save_name", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'{}_G_diversity'", "+", "ext", ")", "\n", "\n", "feed_fixed", "=", "{", "k", ":", "v", "[", ":", "256", "]", "for", "k", ",", "v", "in", "self", ".", "feed_fixed_z", ".", "items", "(", ")", "}", "\n", "feed_fixed", ".", "update", "(", "{", "self", ".", "batch_size", ":", "256", "}", ")", "\n", "\n", "step", ",", "images", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "step", ",", "self", ".", "model", ".", "G", "]", ",", "feed_dict", "=", "feed_fixed", ")", "\n", "\n", "print", "(", "'image shape'", ",", "images", ".", "shape", ")", "\n", "\n", "save_path", "=", "save_name", ".", "format", "(", "step", ")", "\n", "save_image", "(", "images", ",", "save_path", ",", "nrow", "=", "nrow", ")", "\n", "print", "(", "\"[*] Diversity Sample saved: {}\"", ".", "format", "(", "save_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.download_file_from_google_drive": [[13, 25], ["requests.Session", "requests.Session.get", "download.get_confirm_token", "download.save_response_content", "requests.Session.get"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.get_confirm_token", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.save_response_content"], ["def", "download_file_from_google_drive", "(", "id", ",", "destination", ")", ":", "\n", "    ", "URL", "=", "\"https://docs.google.com/uc?export=download\"", "\n", "session", "=", "requests", ".", "Session", "(", ")", "\n", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "{", "'id'", ":", "id", "}", ",", "stream", "=", "True", ")", "\n", "token", "=", "get_confirm_token", "(", "response", ")", "\n", "\n", "if", "token", ":", "\n", "        ", "params", "=", "{", "'id'", ":", "id", ",", "'confirm'", ":", "token", "}", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "params", ",", "stream", "=", "True", ")", "\n", "\n", "", "save_response_content", "(", "response", ",", "destination", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.get_confirm_token": [[26, 31], ["response.cookies.items", "key.startswith"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items"], ["", "def", "get_confirm_token", "(", "response", ")", ":", "\n", "    ", "for", "key", ",", "value", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "'download_warning'", ")", ":", "\n", "            ", "return", "value", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.save_response_content": [[32, 39], ["int", "response.headers.get", "open", "tqdm.tqdm", "response.iter_content", "f.write"], "function", ["None"], ["", "def", "save_response_content", "(", "response", ",", "destination", ",", "chunk_size", "=", "32", "*", "1024", ")", ":", "\n", "    ", "total_size", "=", "int", "(", "response", ".", "headers", ".", "get", "(", "'content-length'", ",", "0", ")", ")", "\n", "with", "open", "(", "destination", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "for", "chunk", "in", "tqdm", "(", "response", ".", "iter_content", "(", "chunk_size", ")", ",", "total", "=", "total_size", ",", "\n", "unit", "=", "'B'", ",", "unit_scale", "=", "True", ",", "desc", "=", "destination", ")", ":", "\n", "            ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                ", "f", ".", "write", "(", "chunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.unzip": [[40, 46], ["print", "os.path.dirname", "os.remove", "zipfile.ZipFile", "zf.extractall"], "function", ["None"], ["", "", "", "", "def", "unzip", "(", "filepath", ")", ":", "\n", "    ", "print", "(", "\"Extracting: \"", "+", "filepath", ")", "\n", "base_path", "=", "os", ".", "path", ".", "dirname", "(", "filepath", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "filepath", ")", "as", "zf", ":", "\n", "        ", "zf", ".", "extractall", "(", "base_path", ")", "\n", "", "os", ".", "remove", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.download_celeb_a": [[47, 72], ["os.path.join", "os.path.join", "os.path.exists", "os.path.join", "os.path.exists", "os.rename", "os.remove", "download.download_attr_file", "print", "print", "download.download_file_from_google_drive", "zipfile.ZipFile", "zf.extractall", "os.path.exists", "os.mkdir", "os.path.join", "zf.namelist"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.download_attr_file", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.download_file_from_google_drive"], ["", "def", "download_celeb_a", "(", "base_path", ")", ":", "\n", "    ", "data_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'celebA'", ")", "\n", "images_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'images'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "        ", "print", "(", "'[!] Found celeb-A - skip'", ")", "\n", "return", "\n", "\n", "", "filename", ",", "drive_id", "=", "\"img_align_celeba.zip\"", ",", "\"0B7EVK8r0v71pZjFTYXZWM3FlRnM\"", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "filename", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "print", "(", "'[*] {} already exists'", ".", "format", "(", "save_path", ")", ")", "\n", "", "else", ":", "\n", "        ", "download_file_from_google_drive", "(", "drive_id", ",", "save_path", ")", "\n", "\n", "", "zip_dir", "=", "''", "\n", "with", "zipfile", ".", "ZipFile", "(", "save_path", ")", "as", "zf", ":", "\n", "        ", "zip_dir", "=", "zf", ".", "namelist", "(", ")", "[", "0", "]", "\n", "zf", ".", "extractall", "(", "base_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "data_path", ")", "\n", "", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"img_align_celeba\"", ")", ",", "images_path", ")", "\n", "os", ".", "remove", "(", "save_path", ")", "\n", "\n", "download_attr_file", "(", "data_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.download_attr_file": [[74, 79], ["os.path.join", "download.download_file_from_google_drive", "download.delete_top_line"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.download_file_from_google_drive", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.delete_top_line"], ["", "def", "download_attr_file", "(", "data_path", ")", ":", "\n", "    ", "attr_gdID", "=", "'0B7EVK8r0v71pblRyaVFSWGxPY0U'", "\n", "attr_fname", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'list_attr_celeba.txt'", ")", "\n", "download_file_from_google_drive", "(", "attr_gdID", ",", "attr_fname", ")", "\n", "delete_top_line", "(", "attr_fname", ")", "#make pandas readable", "\n", "#Top line was just an integer saying how many samples there were", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.prepare_data_dir": [[81, 84], ["os.path.exists", "os.mkdir"], "function", ["None"], ["", "def", "prepare_data_dir", "(", "path", "=", "'./data'", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.check_link": [[86, 92], ["os.path.join", "os.path.exists", "os.path.join", "os.path.relpath", "os.symlink"], "function", ["None"], ["", "", "def", "check_link", "(", "in_dir", ",", "basename", ",", "out_dir", ")", ":", "\n", "    ", "in_file", "=", "os", ".", "path", ".", "join", "(", "in_dir", ",", "basename", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "in_file", ")", ":", "\n", "        ", "link_file", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "basename", ")", "\n", "rel_link", "=", "os", ".", "path", ".", "relpath", "(", "in_file", ",", "out_dir", ")", "\n", "os", ".", "symlink", "(", "rel_link", ",", "link_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.add_splits": [[93, 120], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "range", "range", "range", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "download.check_link", "download.check_link", "download.check_link"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.check_link", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.check_link", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.check_link"], ["", "", "def", "add_splits", "(", "base_path", ")", ":", "\n", "    ", "data_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "'celebA'", ")", "\n", "images_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'images'", ")", "\n", "train_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'splits'", ",", "'train'", ")", "\n", "valid_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'splits'", ",", "'valid'", ")", "\n", "test_dir", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'splits'", ",", "'test'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "train_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "train_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "valid_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "valid_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "test_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "test_dir", ")", "\n", "\n", "# these constants based on the standard celebA splits", "\n", "", "NUM_EXAMPLES", "=", "202599", "\n", "TRAIN_STOP", "=", "162770", "\n", "VALID_STOP", "=", "182637", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "TRAIN_STOP", ")", ":", "\n", "        ", "basename", "=", "\"{:06d}.jpg\"", ".", "format", "(", "i", "+", "1", ")", "\n", "check_link", "(", "images_path", ",", "basename", ",", "train_dir", ")", "\n", "", "for", "i", "in", "range", "(", "TRAIN_STOP", ",", "VALID_STOP", ")", ":", "\n", "        ", "basename", "=", "\"{:06d}.jpg\"", ".", "format", "(", "i", "+", "1", ")", "\n", "check_link", "(", "images_path", ",", "basename", ",", "valid_dir", ")", "\n", "", "for", "i", "in", "range", "(", "VALID_STOP", ",", "NUM_EXAMPLES", ")", ":", "\n", "        ", "basename", "=", "\"{:06d}.jpg\"", ".", "format", "(", "i", "+", "1", ")", "\n", "check_link", "(", "images_path", ",", "basename", ",", "test_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.download.delete_top_line": [[121, 124], ["open().readlines", "open().writelines", "open", "open"], "function", ["None"], ["", "", "def", "delete_top_line", "(", "txt_fname", ")", ":", "\n", "    ", "lines", "=", "open", "(", "txt_fname", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "open", "(", "txt_fname", ",", "'w'", ")", ".", "writelines", "(", "lines", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.causal_graph.get_causal_graph": [[325, 343], ["zip", "complete_all.append", "so_far.append", "ValueError", "causal_graphs.keys"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.keys"], ["def", "get_causal_graph", "(", "causal_model", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "#define complete_all", "\n", "    ", "list_nodes", ",", "_", "=", "zip", "(", "*", "all_nodes", ")", "\n", "complete_all", "=", "[", "]", "\n", "so_far", "=", "[", "]", "\n", "for", "node", "in", "list_nodes", ":", "\n", "        ", "complete_all", ".", "append", "(", "[", "node", ",", "so_far", "[", ":", "]", "]", ")", "\n", "so_far", ".", "append", "(", "node", ")", "\n", "", "causal_graphs", "[", "'complete_all'", "]", "=", "complete_all", "\n", "\n", "\n", "if", "not", "causal_model", "in", "causal_graphs", ".", "keys", "(", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'the specified graph:'", ",", "causal_model", ",", "' was not one of\\\n                         those listed in '", ",", "__file__", ")", "\n", "\n", "", "else", ":", "\n", "        ", "return", "causal_graphs", "[", "causal_model", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.utils.make_summary": [[20, 22], ["tensorflow.core.framework.summary_pb2.Summary", "tensorflow.core.framework.summary_pb2.Summary.Value"], "function", ["None"], ["def", "make_summary", "(", "name", ",", "val", ")", ":", "\n", "    ", "return", "summary_pb2", ".", "Summary", "(", "value", "=", "[", "summary_pb2", ".", "Summary", ".", "Value", "(", "tag", "=", "name", ",", "simple_value", "=", "val", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.utils.summary_stats": [[23, 31], ["tensorflow.reduce_mean", "tensorflow.sqrt", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.reduce_mean", "tensorflow.summary.histogram", "tensorflow.square"], "function", ["None"], ["", "def", "summary_stats", "(", "name", ",", "tensor", ",", "collections", "=", "None", ",", "hist", "=", "False", ")", ":", "\n", "    ", "collections", "=", "collections", "or", "[", "tf", ".", "GraphKeys", ".", "SUMMARIES", "]", "\n", "ave", "=", "tf", ".", "reduce_mean", "(", "tensor", ")", "\n", "std", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "ave", "-", "tensor", ")", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "name", "+", "'_ave'", ",", "ave", ",", "collections", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "name", "+", "'_std'", ",", "std", ",", "collections", ")", "\n", "if", "hist", ":", "\n", "        ", "tf", ".", "summary", ".", "histogram", "(", "name", "+", "'_hist'", ",", "tensor", ",", "collections", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.utils.prepare_dirs_and_logger": [[33, 73], ["os.path.join", "config.load_path.strip", "config.load_path.strip.startswith", "hasattr", "os.path.join", "os.path.join", "os.path.dirname", "functools.partial", "shutil.copytree", "config.load_path.startswith", "utils.get_time", "os.path.realpath", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.get_time"], ["", "", "def", "prepare_dirs_and_logger", "(", "config", ")", ":", "\n", "\n", "    ", "if", "config", ".", "load_path", ":", "\n", "        ", "strip_lp", "=", "config", ".", "load_path", ".", "strip", "(", "'./'", ")", "\n", "if", "strip_lp", ".", "startswith", "(", "config", ".", "log_dir", ")", ":", "\n", "            ", "config", ".", "model_dir", "=", "config", ".", "load_path", "\n", "", "else", ":", "\n", "            ", "if", "config", ".", "load_path", ".", "startswith", "(", "config", ".", "dataset", ")", ":", "\n", "                ", "config", ".", "model_name", "=", "config", ".", "load_path", "\n", "", "else", ":", "\n", "                ", "config", ".", "model_name", "=", "\"{}_{}\"", ".", "format", "(", "config", ".", "dataset", ",", "config", ".", "load_path", ")", "\n", "", "", "", "else", ":", "#new model", "\n", "        ", "config", ".", "model_name", "=", "\"{}_{}\"", ".", "format", "(", "config", ".", "dataset", ",", "get_time", "(", ")", ")", "\n", "if", "config", ".", "descrip", ":", "\n", "            ", "config", ".", "model_name", "+=", "'_'", "+", "config", ".", "descrip", "\n", "\n", "\n", "", "", "if", "not", "hasattr", "(", "config", ",", "'model_dir'", ")", ":", "\n", "        ", "config", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "log_dir", ",", "config", ".", "model_name", ")", "\n", "", "config", ".", "data_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_dir", ",", "config", ".", "dataset", ")", "\n", "\n", "\n", "if", "not", "config", ".", "load_path", ":", "\n", "        ", "config", ".", "log_code_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "model_dir", ",", "'code'", ")", "\n", "for", "path", "in", "[", "config", ".", "log_dir", ",", "config", ".", "data_dir", ",", "\n", "config", ".", "model_dir", "]", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "#Copy python code in directory into model_dir/code for future reference:", "\n", "#All python files in this directory are copied.", "\n", "", "", "code_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "sys", ".", "argv", "[", "0", "]", ")", ")", "\n", "\n", "##additionally, all python files in these directories are also copied. Also symlinks are copied. The idea is to allow easier model loading in the future", "\n", "allowed_dirs", "=", "[", "'causal_controller'", ",", "'causal_began'", ",", "'causal_dcgan'", ",", "'figure_scripts'", "]", "\n", "\n", "#ignore copy of all non-*.py except for these directories", "\n", "#If you make another folder you want copied, you have to add it here", "\n", "ignore_these", "=", "partial", "(", "ignore_except", ",", "allowed_dirs", "=", "allowed_dirs", ")", "\n", "shutil", ".", "copytree", "(", "code_dir", ",", "config", ".", "log_code_dir", ",", "symlinks", "=", "True", ",", "ignore", "=", "ignore_these", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.utils.ignore_except": [[81, 87], ["filter", "filter", "f.endswith"], "function", ["None"], ["", "", "def", "ignore_except", "(", "src", ",", "contents", ",", "allowed_dirs", ")", ":", "\n", "    ", "files", "=", "filter", "(", "os", ".", "path", ".", "isfile", ",", "contents", ")", "\n", "dirs", "=", "filter", "(", "os", ".", "path", ".", "isdir", ",", "contents", ")", "\n", "ignored_files", "=", "[", "f", "for", "f", "in", "files", "if", "not", "f", ".", "endswith", "(", "'.py'", ")", "]", "\n", "ignored_dirs", "=", "[", "d", "for", "d", "in", "dirs", "if", "not", "d", "in", "allowed_dirs", "]", "\n", "return", "ignored_files", "+", "ignored_dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.utils.get_time": [[88, 90], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_time", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m%d_%H%M%S\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.utils.save_configs": [[91, 98], ["print", "utils.save_config", "utils.save_config", "utils.save_config", "utils.save_config"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.save_config", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.save_config", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.save_config", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.save_config"], ["", "def", "save_configs", "(", "config", ",", "cc_config", ",", "dcgan_config", ",", "began_config", ")", ":", "\n", "    ", "model_dir", "=", "config", ".", "model_dir", "\n", "print", "(", "\"[*] MODEL dir: %s\"", "%", "model_dir", ")", "\n", "save_config", "(", "config", ")", "\n", "save_config", "(", "cc_config", ",", "'cc_params.json'", ",", "model_dir", ")", "\n", "save_config", "(", "dcgan_config", ",", "'dcgan_params.json'", ",", "model_dir", ")", "\n", "save_config", "(", "began_config", ",", "'began_params.json'", ",", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.utils.save_config": [[100, 108], ["os.path.join", "print", "open", "json.dump"], "function", ["None"], ["", "def", "save_config", "(", "config", ",", "name", "=", "\"params.json\"", ",", "where", "=", "None", ")", ":", "\n", "    ", "where", "=", "where", "or", "config", ".", "model_dir", "\n", "param_path", "=", "os", ".", "path", ".", "join", "(", "where", ",", "name", ")", "\n", "\n", "print", "(", "\"[*] PARAM path: %s\"", "%", "param_path", ")", "\n", "\n", "with", "open", "(", "param_path", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "config", ".", "__dict__", ",", "fp", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.utils.get_available_gpus": [[109, 113], ["device_lib.list_local_devices"], "function", ["None"], ["", "", "def", "get_available_gpus", "(", ")", ":", "\n", "    ", "from", "tensorflow", ".", "python", ".", "client", "import", "device_lib", "\n", "local_device_protos", "=", "device_lib", ".", "list_local_devices", "(", ")", "\n", "return", "[", "x", ".", "name", "for", "x", "in", "local_device_protos", "if", "x", ".", "device_type", "==", "'GPU'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.utils.distribute_input_data": [[114, 138], ["utils.get_available_gpus", "data_loader.items", "len", "ValueError", "tensorflow.split", "zip", "len"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.get_available_gpus", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items"], ["", "def", "distribute_input_data", "(", "data_loader", ",", "num_gpu", ")", ":", "\n", "    ", "'''\n    data_loader is a dictionary of tensors that are fed into our model\n\n    This function takes that dictionary of n*batch_size dimension tensors\n    and breaks it up into n dictionaries with the same key of tensors with\n    dimension batch_size. One is given to each gpu\n    '''", "\n", "if", "num_gpu", "==", "0", ":", "\n", "        ", "return", "{", "'/cpu:0'", ":", "data_loader", "}", "\n", "\n", "", "gpus", "=", "get_available_gpus", "(", ")", "\n", "if", "num_gpu", ">", "len", "(", "gpus", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'number of gpus specified={}, more than gpus available={}'", ".", "format", "(", "num_gpu", ",", "len", "(", "gpus", ")", ")", ")", "\n", "\n", "", "gpus", "=", "gpus", "[", ":", "num_gpu", "]", "\n", "\n", "data_by_gpu", "=", "{", "g", ":", "{", "}", "for", "g", "in", "gpus", "}", "\n", "for", "key", ",", "value", "in", "data_loader", ".", "items", "(", ")", ":", "\n", "        ", "spl_vals", "=", "tf", ".", "split", "(", "value", ",", "num_gpu", ")", "\n", "for", "gpu", ",", "val", "in", "zip", "(", "gpus", ",", "spl_vals", ")", ":", "\n", "            ", "data_by_gpu", "[", "gpu", "]", "[", "key", "]", "=", "val", "\n", "\n", "", "", "return", "data_by_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.utils.rank": [[140, 142], ["len"], "function", ["None"], ["", "def", "rank", "(", "array", ")", ":", "\n", "    ", "return", "len", "(", "array", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.utils.make_grid": [[143, 163], ["min", "int", "numpy.zeros", "range", "math.ceil", "int", "int", "range", "float"], "function", ["None"], ["", "def", "make_grid", "(", "tensor", ",", "nrow", "=", "8", ",", "padding", "=", "2", ",", "\n", "normalize", "=", "False", ",", "scale_each", "=", "False", ")", ":", "\n", "    ", "\"\"\"Code based on https://github.com/pytorch/vision/blob/master/torchvision/utils.py\n    minor improvement, row/col was reversed\"\"\"", "\n", "nmaps", "=", "tensor", ".", "shape", "[", "0", "]", "\n", "ymaps", "=", "min", "(", "nrow", ",", "nmaps", ")", "\n", "xmaps", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "nmaps", ")", "/", "ymaps", ")", ")", "\n", "height", ",", "width", "=", "int", "(", "tensor", ".", "shape", "[", "1", "]", "+", "padding", ")", ",", "int", "(", "tensor", ".", "shape", "[", "2", "]", "+", "padding", ")", "\n", "grid", "=", "np", ".", "zeros", "(", "[", "height", "*", "ymaps", "+", "1", "+", "padding", "//", "2", ",", "width", "*", "xmaps", "+", "1", "+", "padding", "//", "2", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "k", "=", "0", "\n", "for", "y", "in", "range", "(", "ymaps", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "xmaps", ")", ":", "\n", "            ", "if", "k", ">=", "nmaps", ":", "\n", "                ", "break", "\n", "", "h", ",", "h_width", "=", "y", "*", "height", "+", "1", "+", "padding", "//", "2", ",", "height", "-", "padding", "\n", "w", ",", "w_width", "=", "x", "*", "width", "+", "1", "+", "padding", "//", "2", ",", "width", "-", "padding", "\n", "\n", "grid", "[", "h", ":", "h", "+", "h_width", ",", "w", ":", "w", "+", "w_width", "]", "=", "tensor", "[", "k", "]", "\n", "k", "=", "k", "+", "1", "\n", "", "", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.None.utils.save_image": [[164, 170], ["utils.make_grid", "PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.make_grid"], ["", "def", "save_image", "(", "tensor", ",", "filename", ",", "nrow", "=", "8", ",", "padding", "=", "2", ",", "\n", "normalize", "=", "False", ",", "scale_each", "=", "False", ")", ":", "\n", "    ", "ndarr", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "nrow", ",", "padding", "=", "padding", ",", "\n", "normalize", "=", "normalize", ",", "scale_each", "=", "scale_each", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "ndarr", ")", "\n", "im", ".", "save", "(", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.pairwise.calc_tvd": [[17, 51], ["label_dict.keys", "attr.drop_duplicates", "df2.rename.reset_index().reset_index", "df2.rename.rename", "pandas.merge", "pandas.value_counts", "pandas.DataFrame.from_dict", "pandas.merge", "pandas.value_counts", "real_pdf.subtract", "numpy.min", "ValueError", "len", "numpy.round", "pd.value_counts.sum", "real_pdf.subtract.abs().sum", "df2.rename.reset_index", "v.ravel", "label_dict.items", "real_pdf.subtract.abs"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.keys", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.merge", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.merge", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items"], ["def", "calc_tvd", "(", "label_dict", ",", "attr", ")", ":", "\n", "    ", "'''\n    attr should be a 0,1 pandas dataframe with\n    columns corresponding to label names\n\n    for example:\n    names=zip(*self.graph)[0]\n    calc_tvd(label_dict,attr[names])\n\n    label_dict should be a dictionary key:1d-array of samples\n    '''", "\n", "####Calculate Total Variation####", "\n", "if", "np", ".", "min", "(", "attr", ".", "values", ")", "<", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'calc_tvd received \\\n                 attr that may not have been in {0,1}'", ")", "\n", "\n", "", "label_names", "=", "label_dict", ".", "keys", "(", ")", "\n", "attr", "=", "attr", "[", "label_names", "]", "\n", "\n", "df2", "=", "attr", ".", "drop_duplicates", "(", ")", "\n", "df2", "=", "df2", ".", "reset_index", "(", "drop", "=", "True", ")", ".", "reset_index", "(", ")", "\n", "df2", "=", "df2", ".", "rename", "(", "columns", "=", "{", "'index'", ":", "'ID'", "}", ")", "\n", "real_data_id", "=", "pd", ".", "merge", "(", "attr", ",", "df2", ")", "\n", "real_counts", "=", "pd", ".", "value_counts", "(", "real_data_id", "[", "'ID'", "]", ")", "\n", "real_pdf", "=", "real_counts", "/", "len", "(", "attr", ")", "\n", "\n", "label_list_dict", "=", "{", "k", ":", "np", ".", "round", "(", "v", ".", "ravel", "(", ")", ")", "for", "k", ",", "v", "in", "label_dict", ".", "items", "(", ")", "}", "\n", "df_dat", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "label_list_dict", ")", "\n", "dat_id", "=", "pd", ".", "merge", "(", "df_dat", ",", "df2", ",", "on", "=", "label_names", ",", "how", "=", "'left'", ")", "\n", "dat_counts", "=", "pd", ".", "value_counts", "(", "dat_id", "[", "'ID'", "]", ")", "\n", "dat_pdf", "=", "dat_counts", "/", "dat_counts", ".", "sum", "(", ")", "\n", "diff", "=", "real_pdf", ".", "subtract", "(", "dat_pdf", ",", "fill_value", "=", "0", ")", "\n", "tvd", "=", "0.5", "*", "diff", ".", "abs", "(", ")", ".", "sum", "(", ")", "\n", "return", "tvd", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.pairwise.crosstab": [[53, 154], ["len", "print", "time.time", "sample.sample", "print", "os.path.join", "print", "time.time", "sample.sample.items", "print", "str", "time.time", "pairwise.calc_tvd", "print", "open", "lab_f.write", "joint.keys", "lab_f.write", "itertools.combinations", "time.time", "model.sess.run", "lab_f.write", "lab_f.write", "numpy.mean", "lab_f.write", "lab_f.write", "joint.keys", "pandas.DataFrame", "pandas.crosstab", "pandas.crosstab", "lab_f.write", "pd.crosstab.to_csv", "lab_f.write", "lab_f.write", "lab_f.write", "lab_f.write", "time.time", "time.time", "pd.crosstab.__repr__", "pd.crosstab.__repr__", "numpy.hstack", "str", "str", "str", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.calc_tvd", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.keys", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.keys", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.pairwise.crosstab", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.pairwise.crosstab", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.__repr__", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.__repr__"], ["", "def", "crosstab", "(", "model", ",", "result_dir", "=", "None", ",", "report_tvd", "=", "True", ",", "no_save", "=", "False", ",", "N", "=", "500000", ")", ":", "\n", "    ", "'''\n    This is a script for outputing [0,1/2], [1/2,1] binned pdfs\n    including the marginals and the pairwise comparisons\n\n    report_tvd is given as optional because it is somewhat time consuming\n\n    result_dir is where to save the distribution text files. defaults to\n    model.cc.model_dir\n\n    '''", "\n", "result_dir", "=", "result_dir", "or", "model", ".", "cc", ".", "model_dir", "\n", "result", "=", "{", "}", "\n", "\n", "n_labels", "=", "len", "(", "model", ".", "cc", ".", "nodes", ")", "\n", "\n", "#Not really sure how this should scale", "\n", "#N=1000*n_labels", "\n", "#N=500*n_labels**2#open to ideas that avoid a while loop", "\n", "#N=12000", "\n", "\n", "#tvd will not be reported as low unless N is large", "\n", "#N=500000 #default", "\n", "\n", "print", "(", "'Calculating joint distribution with'", ",", ")", "\n", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "label_dict", "=", "sample", "(", "model", ",", "fetch_dict", "=", "model", ".", "cc", ".", "label_dict", ",", "N", "=", "N", ")", "\n", "print", "(", "'sampling model N='", ",", "N", ",", "' times took '", ",", "time", ".", "time", "(", ")", "-", "t0", ",", "'sec'", ")", "\n", "\n", "\n", "#fake_labels=model.cc.fake_labels", "\n", "\n", "str_step", "=", "str", "(", "model", ".", "sess", ".", "run", "(", "model", ".", "cc", ".", "step", ")", ")", "+", "'_'", "\n", "\n", "attr", "=", "model", ".", "data", ".", "attr", "\n", "attr", "=", "attr", "[", "model", ".", "cc", ".", "node_names", "]", "\n", "\n", "lab_xtab_fn", "=", "os", ".", "path", ".", "join", "(", "result_dir", ",", "str_step", "+", "'glabel_crosstab.txt'", ")", "\n", "print", "(", "'Writing to files:'", ",", "lab_xtab_fn", ")", "\n", "\n", "if", "report_tvd", ":", "\n", "        ", "t0", "=", "time", ".", "time", "(", ")", "\n", "tvd", "=", "calc_tvd", "(", "label_dict", ",", "attr", ")", "\n", "result", "[", "'tvd'", "]", "=", "tvd", "\n", "print", "(", "'calculating tvd from samples took '", ",", "time", ".", "time", "(", ")", "-", "t0", ",", "'sec'", ")", "\n", "\n", "if", "no_save", ":", "\n", "            ", "return", "result", "\n", "\n", "", "", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "joint", "=", "{", "}", "\n", "label_joint", "=", "{", "}", "\n", "#for name, lab in zip(model.cc.node_names,list_labels):", "\n", "for", "name", ",", "lab", "in", "label_dict", ".", "items", "(", ")", ":", "\n", "        ", "joint", "[", "name", "]", "=", "{", "'g_fake_label'", ":", "lab", "}", "\n", "\n", "\n", "#with open(dfl_xtab_fn,'w') as dlf_f, open(lab_xtab_fn,'w') as lab_f, open(gvsd_xtab_fn,'w') as gldf_f:", "\n", "", "with", "open", "(", "lab_xtab_fn", ",", "'w'", ")", "as", "lab_f", ":", "\n", "        ", "if", "report_tvd", ":", "\n", "            ", "lab_f", ".", "write", "(", "'TVD:'", "+", "str", "(", "tvd", ")", "+", "'\\n\\n'", ")", "\n", "", "lab_f", ".", "write", "(", "'Marginals:\\n'", ")", "\n", "\n", "#Marginals", "\n", "for", "name", "in", "joint", ".", "keys", "(", ")", ":", "\n", "            ", "lab_f", ".", "write", "(", "'Node: '", "+", "name", "+", "'\\n'", ")", "\n", "\n", "true_marg", "=", "np", ".", "mean", "(", "(", "attr", "[", "name", "]", ">", "0.5", ")", ".", "values", ")", "\n", "lab_marg", "=", "(", "joint", "[", "name", "]", "[", "'g_fake_label'", "]", ">", "0.5", ")", ".", "astype", "(", "'int'", ")", "\n", "\n", "lab_f", ".", "write", "(", "'  mean='", "+", "str", "(", "np", ".", "mean", "(", "lab_marg", ")", ")", "+", "'\\t'", "+", "'true mean='", "+", "str", "(", "true_marg", ")", "+", "'\\n'", ")", "\n", "\n", "lab_f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "\n", "#Pairs of labels", "\n", "", "lab_f", ".", "write", "(", "'\\nPairwise:\\n'", ")", "\n", "\n", "for", "node1", ",", "node2", "in", "combinations", "(", "joint", ".", "keys", "(", ")", ",", "r", "=", "2", ")", ":", "\n", "\n", "            ", "lab_node1", "=", "(", "joint", "[", "node1", "]", "[", "'g_fake_label'", "]", ">", "0.5", ")", ".", "astype", "(", "'int'", ")", "\n", "lab_node2", "=", "(", "joint", "[", "node2", "]", "[", "'g_fake_label'", "]", ">", "0.5", ")", ".", "astype", "(", "'int'", ")", "\n", "lab_df", "=", "pd", ".", "DataFrame", "(", "data", "=", "np", ".", "hstack", "(", "[", "lab_node1", ",", "lab_node2", "]", ")", ",", "columns", "=", "[", "node1", ",", "node2", "]", ")", "\n", "lab_ct", "=", "pd", ".", "crosstab", "(", "index", "=", "lab_df", "[", "node1", "]", ",", "columns", "=", "lab_df", "[", "node2", "]", ",", "margins", "=", "True", ",", "normalize", "=", "True", ")", "\n", "\n", "true_ct", "=", "pd", ".", "crosstab", "(", "index", "=", "attr", "[", "node1", "]", ",", "columns", "=", "attr", "[", "node2", "]", ",", "margins", "=", "True", ",", "normalize", "=", "True", ")", "\n", "\n", "\n", "lab_f", ".", "write", "(", "'\\n\\tFake:\\n'", ")", "\n", "lab_ct", ".", "to_csv", "(", "lab_xtab_fn", ",", "mode", "=", "'a'", ")", "\n", "lab_f", ".", "write", "(", "lab_ct", ".", "__repr__", "(", ")", ")", "\n", "lab_f", ".", "write", "(", "'\\n\\tReal:\\n'", ")", "\n", "lab_f", ".", "write", "(", "true_ct", ".", "__repr__", "(", ")", ")", "\n", "\n", "lab_f", ".", "write", "(", "'\\n\\n'", ")", "\n", "\n", "", "", "print", "(", "'calculating pairwise crosstabs and saving results took '", ",", "time", ".", "time", "(", ")", "-", "t0", ",", "'sec'", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.nhwc_to_nchw": [[28, 30], ["tensorflow.transpose"], "function", ["None"], ["tf", ".", "summary", ".", "scalar", "(", "name", "+", "'_std'", ",", "std", ",", "collections", ")", "\n", "if", "hist", ":", "\n", "        ", "tf", ".", "summary", ".", "histogram", "(", "name", "+", "'_hist'", ",", "tensor", ",", "collections", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.to_nchw_numpy": [[30, 36], ["image.transpose"], "function", ["None"], ["        ", "tf", ".", "summary", ".", "histogram", "(", "name", "+", "'_hist'", ",", "tensor", ",", "collections", ")", "\n", "\n", "\n", "", "", "def", "prepare_dirs_and_logger", "(", "config", ")", ":", "\n", "\n", "    ", "if", "config", ".", "load_path", ":", "\n", "        ", "strip_lp", "=", "config", ".", "load_path", ".", "strip", "(", "'./'", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.norm_img": [[37, 47], ["tensorflow.cast", "utils.to_nchw_numpy"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.to_nchw_numpy"], ["if", "strip_lp", ".", "startswith", "(", "config", ".", "log_dir", ")", ":", "\n", "            ", "config", ".", "model_dir", "=", "config", ".", "load_path", "\n", "", "else", ":", "\n", "            ", "if", "config", ".", "load_path", ".", "startswith", "(", "config", ".", "dataset", ")", ":", "\n", "                ", "config", ".", "model_name", "=", "config", ".", "load_path", "\n", "", "else", ":", "\n", "                ", "config", ".", "model_name", "=", "\"{}_{}\"", ".", "format", "(", "config", ".", "dataset", ",", "config", ".", "load_path", ")", "\n", "", "", "", "else", ":", "#new model", "\n", "        ", "config", ".", "model_name", "=", "\"{}_{}\"", ".", "format", "(", "config", ".", "dataset", ",", "get_time", "(", ")", ")", "\n", "if", "config", ".", "descrip", ":", "\n", "            ", "config", ".", "model_name", "+=", "'_'", "+", "config", ".", "descrip", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.nchw_to_nhwc": [[50, 52], ["tensorflow.transpose"], "function", ["None"], ["", "", "if", "not", "hasattr", "(", "config", ",", "'model_dir'", ")", ":", "\n", "        ", "config", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "log_dir", ",", "config", ".", "model_name", ")", "\n", "", "config", ".", "data_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_dir", ",", "config", ".", "dataset", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.to_nhwc": [[52, 58], ["utils.nchw_to_nhwc"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.nchw_to_nhwc"], ["", "config", ".", "data_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_dir", ",", "config", ".", "dataset", ")", "\n", "\n", "\n", "if", "not", "config", ".", "load_path", ":", "\n", "        ", "config", ".", "log_code_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "model_dir", ",", "'code'", ")", "\n", "for", "path", "in", "[", "config", ".", "log_dir", ",", "config", ".", "data_dir", ",", "\n", "config", ".", "model_dir", "]", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.denorm_img": [[58, 60], ["tensorflow.clip_by_value", "utils.to_nhwc"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.to_nhwc"], ["config", ".", "model_dir", "]", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.read_prepared_uint8_image": [[62, 72], ["scipy.misc.imread", "numpy.all", "ValueError", "numpy.array"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.imread"], ["#Copy python code in directory into model_dir/code for future reference:", "\n", "#All python files in this directory are copied.", "\n", "", "", "code_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "sys", ".", "argv", "[", "0", "]", ")", ")", "\n", "\n", "##additionally, all python files in these directories are also copied. Also symlinks are copied. The idea is to allow easier model loading in the future", "\n", "allowed_dirs", "=", "[", "'causal_controller'", ",", "'causal_began'", ",", "'causal_dcgan'", ",", "'figure_scripts'", "]", "\n", "\n", "#ignore copy of all non-*.py except for these directories", "\n", "#If you make another folder you want copied, you have to add it here", "\n", "ignore_these", "=", "partial", "(", "ignore_except", ",", "allowed_dirs", "=", "allowed_dirs", ")", "\n", "shutil", ".", "copytree", "(", "code_dir", ",", "config", ".", "log_code_dir", ",", "symlinks", "=", "True", ",", "ignore", "=", "ignore_these", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.make_encode_dir": [[73, 84], ["os.path.join", "os.path.exists", "os.mkdir", "print", "str"], "function", ["None"], ["\n", "\n", "#        model_files = [f for f in listdir(code_dir) if isfile(join(code_dir, f))]", "\n", "#        for f in model_files:", "\n", "#            if f.endswith('.py'):", "\n", "#                shutil.copy2(f,config.log_code_dir)", "\n", "\n", "\n", "", "", "def", "ignore_except", "(", "src", ",", "contents", ",", "allowed_dirs", ")", ":", "\n", "    ", "files", "=", "filter", "(", "os", ".", "path", ".", "isfile", ",", "contents", ")", "\n", "dirs", "=", "filter", "(", "os", ".", "path", ".", "isdir", ",", "contents", ")", "\n", "ignored_files", "=", "[", "f", "for", "f", "in", "files", "if", "not", "f", ".", "endswith", "(", "'.py'", ")", "]", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.make_sample_dir": [[85, 97], ["os.path.join", "os.path.exists", "os.mkdir", "print"], "function", ["None"], ["ignored_dirs", "=", "[", "d", "for", "d", "in", "dirs", "if", "not", "d", "in", "allowed_dirs", "]", "\n", "return", "ignored_files", "+", "ignored_dirs", "\n", "\n", "", "def", "get_time", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m%d_%H%M%S\"", ")", "\n", "\n", "", "def", "save_configs", "(", "config", ",", "cc_config", ",", "dcgan_config", ",", "began_config", ")", ":", "\n", "    ", "model_dir", "=", "config", ".", "model_dir", "\n", "print", "(", "\"[*] MODEL dir: %s\"", "%", "model_dir", ")", "\n", "save_config", "(", "config", ")", "\n", "save_config", "(", "cc_config", ",", "'cc_params.json'", ",", "model_dir", ")", "\n", "save_config", "(", "dcgan_config", ",", "'dcgan_params.json'", ",", "model_dir", ")", "\n", "save_config", "(", "began_config", ",", "'began_params.json'", ",", "model_dir", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.guess_model_step": [[98, 107], ["str", "tensorflow.train.get_checkpoint_state", "os.path.basename", "model.sess.run"], "function", ["None"], ["\n", "\n", "", "def", "save_config", "(", "config", ",", "name", "=", "\"params.json\"", ",", "where", "=", "None", ")", ":", "\n", "    ", "where", "=", "where", "or", "config", ".", "model_dir", "\n", "param_path", "=", "os", ".", "path", ".", "join", "(", "where", ",", "name", ")", "\n", "\n", "print", "(", "\"[*] PARAM path: %s\"", "%", "param_path", ")", "\n", "\n", "with", "open", "(", "param_path", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "config", ".", "__dict__", ",", "fp", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.infer_grid_image_shape": [[108, 114], ["None"], "function", ["None"], ["\n", "", "", "def", "get_available_gpus", "(", ")", ":", "\n", "    ", "from", "tensorflow", ".", "python", ".", "client", "import", "device_lib", "\n", "local_device_protos", "=", "device_lib", ".", "list_local_devices", "(", ")", "\n", "return", "[", "x", ".", "name", "for", "x", "in", "local_device_protos", "if", "x", ".", "device_type", "==", "'GPU'", "]", "\n", "\n", "", "def", "distribute_input_data", "(", "data_loader", ",", "num_gpu", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.save_figure_images": [[116, 129], ["print", "utils.began_save_image", "utils.dcgan_save_images"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.began_save_image", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.dcgan_save_images"], ["\n", "if", "num_gpu", "==", "0", ":", "\n", "        ", "return", "{", "'/cpu:0'", ":", "data_loader", "}", "\n", "\n", "", "gpus", "=", "get_available_gpus", "(", ")", "\n", "if", "num_gpu", ">", "len", "(", "gpus", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'number of gpus specified={}, more than gpus available={}'", ".", "format", "(", "num_gpu", ",", "len", "(", "gpus", ")", ")", ")", "\n", "\n", "", "gpus", "=", "gpus", "[", ":", "num_gpu", "]", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.make_grid": [[132, 151], ["min", "int", "numpy.zeros", "range", "math.ceil", "math.ceil", "int", "int", "range", "float"], "function", ["None"], ["for", "key", ",", "value", "in", "data_loader", ".", "items", "(", ")", ":", "\n", "        ", "spl_vals", "=", "tf", ".", "split", "(", "value", ",", "num_gpu", ")", "\n", "for", "gpu", ",", "val", "in", "zip", "(", "gpus", ",", "spl_vals", ")", ":", "\n", "            ", "data_by_gpu", "[", "gpu", "]", "[", "key", "]", "=", "val", "\n", "\n", "", "", "return", "data_by_gpu", "\n", "\n", "\n", "", "def", "rank", "(", "array", ")", ":", "\n", "    ", "return", "len", "(", "array", ".", "shape", ")", "\n", "\n", "", "def", "make_grid", "(", "tensor", ",", "nrow", "=", "8", ",", "padding", "=", "2", ",", "\n", "normalize", "=", "False", ",", "scale_each", "=", "False", ")", ":", "\n", "    ", "\"\"\"Code based on https://github.com/pytorch/vision/blob/master/torchvision/utils.py\n    minor improvement, row/col was reversed\"\"\"", "\n", "nmaps", "=", "tensor", ".", "shape", "[", "0", "]", "\n", "ymaps", "=", "min", "(", "nrow", ",", "nmaps", ")", "\n", "xmaps", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "nmaps", ")", "/", "ymaps", ")", ")", "\n", "height", ",", "width", "=", "int", "(", "tensor", ".", "shape", "[", "1", "]", "+", "padding", ")", ",", "int", "(", "tensor", ".", "shape", "[", "2", "]", "+", "padding", ")", "\n", "grid", "=", "np", ".", "zeros", "(", "[", "height", "*", "ymaps", "+", "1", "+", "padding", "//", "2", ",", "width", "*", "xmaps", "+", "1", "+", "padding", "//", "2", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.began_save_image": [[152, 158], ["utils.make_grid", "PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.make_grid"], ["k", "=", "0", "\n", "for", "y", "in", "range", "(", "ymaps", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "xmaps", ")", ":", "\n", "            ", "if", "k", ">=", "nmaps", ":", "\n", "                ", "break", "\n", "", "h", ",", "h_width", "=", "y", "*", "height", "+", "1", "+", "padding", "//", "2", ",", "height", "-", "padding", "\n", "w", ",", "w_width", "=", "x", "*", "width", "+", "1", "+", "padding", "//", "2", ",", "width", "-", "padding", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.get_image": [[164, 170], ["utils.imread", "utils.transform"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.imread", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.transform"], ["", "def", "save_image", "(", "tensor", ",", "filename", ",", "nrow", "=", "8", ",", "padding", "=", "2", ",", "\n", "normalize", "=", "False", ",", "scale_each", "=", "False", ")", ":", "\n", "    ", "ndarr", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "nrow", ",", "padding", "=", "padding", ",", "\n", "normalize", "=", "normalize", ",", "scale_each", "=", "scale_each", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "ndarr", ")", "\n", "im", ".", "save", "(", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.dcgan_save_images": [[171, 173], ["utils.imsave", "utils.inverse_transform"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.imsave", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.inverse_transform"], []], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.imread": [[174, 179], ["scipy.misc.imread().astype", "scipy.misc.imread().astype", "scipy.misc.imread", "scipy.misc.imread"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.imread", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.imread"], []], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.merge_images": [[180, 182], ["utils.inverse_transform"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.inverse_transform"], []], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.merge": [[183, 191], ["numpy.zeros", "enumerate"], "function", ["None"], []], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.imsave": [[192, 194], ["scipy.misc.imsave", "utils.merge"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.imsave", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.merge"], []], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.center_crop": [[195, 204], ["int", "int", "scipy.misc.imresize", "round", "round"], "function", ["None"], []], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.transform": [[205, 214], ["utils.center_crop", "scipy.misc.imresize", "numpy.array"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.center_crop"], []], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.figure_scripts.utils.inverse_transform": [[215, 217], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Arrows.__init__": [[30, 40], ["tensorflow.variable_scope", "tensorflow.placeholder_with_default", "tensorflow.random_uniform", "tensorflow.random_uniform", "tensorflow.random_uniform", "models.Arrows.build", "tensorflow.contrib.framework.get_variables"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.FC10_Generator.build"], ["def", "__init__", "(", "self", ",", "N", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Arrow'", ")", "as", "scope", ":", "\n", "            ", "self", ".", "N", "=", "tf", ".", "placeholder_with_default", "(", "N", ",", "shape", "=", "[", "]", ")", "\n", "#self.N=tf.constant(N) #how many to sample at a time", "\n", "self", ".", "e1", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "N", ",", "1", "]", ",", "0", ",", "1", ")", "\n", "self", ".", "e2", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "N", ",", "1", "]", ",", "0", ",", "1", ")", "\n", "self", ".", "e3", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "N", ",", "1", "]", ",", "0", ",", "1", ")", "\n", "self", ".", "build", "(", ")", "\n", "#WARN. some of these are not trainable: i.e. poly", "\n", "self", ".", "var", "=", "tf", ".", "contrib", ".", "framework", ".", "get_variables", "(", "scope", ")", "\n", "", "", "def", "build", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Arrows.build": [[40, 42], ["None"], "methods", ["None"], ["", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Arrows.normalize_output": [[43, 51], ["None"], "methods", ["None"], ["", "def", "normalize_output", "(", "self", ",", "X", ")", ":", "\n", "        ", "'''\n        I think that data literally in [0,1] was difficult for sigmoid network.\n        Therefore, I am normalizing it to [bdry_buffer,1-bdry_buffer]\n\n        X: assumed to be in [0,1]\n        '''", "\n", "return", "(", "1.", "-", "2", "*", "self", ".", "bdry_buffer", ")", "*", "X", "+", "self", ".", "bdry_buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Generator.__init__": [[56, 65], ["tensorflow.variable_scope", "tensorflow.placeholder_with_default", "models.Generator.build", "tensorflow.contrib.framework.get_variables", "tensorflow.Variable", "tensorflow.contrib.framework.get_variables"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.FC10_Generator.build"], ["def", "__init__", "(", "self", ",", "N", ",", "hidden_size", "=", "10", ",", "z_dim", "=", "10", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Gen'", ")", "as", "scope", ":", "\n", "            ", "self", ".", "N", "=", "tf", ".", "placeholder_with_default", "(", "N", ",", "shape", "=", "[", "]", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "build", "(", ")", "\n", "self", ".", "tr_var", "=", "tf", ".", "contrib", ".", "framework", ".", "get_variables", "(", "scope", ")", "\n", "self", ".", "step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "'step'", ",", "trainable", "=", "False", ")", "\n", "self", ".", "var", "=", "tf", ".", "contrib", ".", "framework", ".", "get_variables", "(", "scope", ")", "\n", "", "", "def", "build", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Generator.build": [[65, 67], ["Exception"], "methods", ["None"], ["", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "raise", "Exception", "(", "'must override'", ")", "\n", "", "def", "smallNN", "(", "self", ",", "inputs", ",", "name", "=", "'smallNN'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Generator.smallNN": [[67, 78], ["tensorflow.variable_scope", "isinstance", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.sigmoid", "tensorflow.concat", "models.linear", "models.linear", "models.linear"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear"], ["", "def", "smallNN", "(", "self", ",", "inputs", ",", "name", "=", "'smallNN'", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "                ", "inputs", "=", "tf", ".", "concat", "(", "inputs", ",", "axis", "=", "1", ")", "\n", "", "h01", "=", "tf", ".", "tanh", "(", "linear", "(", "inputs", ",", "self", ".", "hidden_size", ",", "name", "+", "'l1'", ")", ")", "\n", "h11", "=", "tf", ".", "tanh", "(", "linear", "(", "h01", ",", "self", ".", "hidden_size", ",", "name", "+", "'l21'", ")", ")", "\n", "#h21 = output_nonlinearity(linear(h11, 1, name+'l31'))", "\n", "#h21 = linear(h11, 1, name+'l31')", "\n", "h21", "=", "tf", ".", "sigmoid", "(", "linear", "(", "h11", ",", "1", ",", "name", "+", "'l31'", ")", ")", "\n", "\n", "", "return", "h21", "#rank2", "\n", "#return tf.sigmoid(h21)#rank2", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.CompleteArrows.build": [[149, 158], ["tensorflow.variable_scope", "models.poly", "models.poly", "models.poly", "tensorflow.concat", "models.CompleteArrows.normalize_output"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.poly", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.poly", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.poly", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Arrows.normalize_output"], ["def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "X1", "=", "poly", "(", "self", ".", "e1", ",", "name", "=", "'X1'", ")", "\n", "#self.X2=0.5*poly(self.X1,name='X1cX2')+0.5*self.e2", "\n", "#self.X3=0.5*poly(self.X1,self.X2,name='X1X2cX3')+0.5*self.e3", "\n", "self", ".", "X2", "=", "poly", "(", "self", ".", "X1", ",", "self", ".", "e2", ",", "name", "=", "'X1cX2'", ")", "\n", "self", ".", "X3", "=", "poly", "(", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "e3", ",", "name", "=", "'X1X2cX3'", ")", "\n", "self", ".", "X", "=", "tf", ".", "concat", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "X3", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "X", "=", "self", ".", "normalize_output", "(", "self", ".", "X", ")", "\n", "#print 'completearrowX.shape:',self.X.get_shape().as_list()", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.CompleteGenerator.build": [[161, 169], ["tensorflow.variable_scope", "tensorflow.random_uniform", "tensorflow.split", "models.CompleteGenerator.smallNN", "models.CompleteGenerator.smallNN", "models.CompleteGenerator.smallNN", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Generator.smallNN", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Generator.smallNN", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Generator.smallNN", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat"], ["def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "z", "=", "tf", ".", "random_uniform", "(", "(", "self", ".", "N", ",", "self", ".", "x_dim", "*", "self", ".", "z_dim", ")", ",", "0", ",", "1", ",", "name", "=", "'z'", ")", "\n", "z1", ",", "z2", ",", "z3", "=", "tf", ".", "split", "(", "self", ".", "z", ",", "3", ",", "axis", "=", "1", ")", "#3=x_dim", "\n", "self", ".", "X1", "=", "self", ".", "smallNN", "(", "z1", ",", "'X1'", ")", "\n", "self", ".", "X2", "=", "self", ".", "smallNN", "(", "[", "self", ".", "X1", ",", "z2", "]", ",", "'X1cX2'", ")", "\n", "self", ".", "X3", "=", "self", ".", "smallNN", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "z3", "]", ",", "'X1X2cX3'", ")", "\n", "self", ".", "X", "=", "tf", ".", "concat", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "X3", "]", ",", "axis", "=", "1", ")", "\n", "#print 'completegenX.shape:',self.X.get_shape().as_list()", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.ColliderArrows.build": [[173, 181], ["tensorflow.variable_scope", "models.poly", "models.poly", "models.poly", "tensorflow.concat", "models.ColliderArrows.normalize_output"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.poly", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.poly", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.poly", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Arrows.normalize_output"], ["def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "X1", "=", "poly", "(", "self", ".", "e1", ",", "name", "=", "'X1'", ")", "\n", "self", ".", "X3", "=", "poly", "(", "self", ".", "e3", ",", "name", "=", "'X3'", ")", "\n", "#self.X2=0.5*poly(self.X1,self.X3,name='X1X3cX2')+0.5*self.e2", "\n", "self", ".", "X2", "=", "poly", "(", "self", ".", "X1", ",", "self", ".", "X3", ",", "self", ".", "e2", ",", "name", "=", "'X1X3cX2'", ")", "\n", "self", ".", "X", "=", "tf", ".", "concat", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "X3", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "X", "=", "self", ".", "normalize_output", "(", "self", ".", "X", ")", "\n", "", "", "", "class", "ColliderGenerator", "(", "Generator", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.ColliderGenerator.build": [[183, 191], ["tensorflow.variable_scope", "tensorflow.random_uniform", "tensorflow.split", "models.ColliderGenerator.smallNN", "models.ColliderGenerator.smallNN", "models.ColliderGenerator.smallNN", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Generator.smallNN", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Generator.smallNN", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Generator.smallNN", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat"], ["def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "z", "=", "tf", ".", "random_uniform", "(", "(", "self", ".", "N", ",", "self", ".", "x_dim", "*", "self", ".", "z_dim", ")", ",", "0", ",", "1", ",", "name", "=", "'z'", ")", "\n", "z1", ",", "z2", ",", "z3", "=", "tf", ".", "split", "(", "self", ".", "z", ",", "3", ",", "axis", "=", "1", ")", "#3=x_dim", "\n", "self", ".", "X1", "=", "self", ".", "smallNN", "(", "z1", ",", "'X1'", ")", "\n", "self", ".", "X3", "=", "self", ".", "smallNN", "(", "z3", ",", "'X3'", ")", "\n", "self", ".", "X2", "=", "self", ".", "smallNN", "(", "[", "self", ".", "X1", ",", "self", ".", "X3", ",", "z2", "]", ",", "'X1X3cX2'", ")", "\n", "self", ".", "X", "=", "tf", ".", "concat", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "X3", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.LinearArrows.build": [[194, 203], ["tensorflow.variable_scope", "models.poly", "models.poly", "models.poly", "tensorflow.concat", "models.LinearArrows.normalize_output"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.poly", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.poly", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.poly", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Arrows.normalize_output"], ["def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "X1", "=", "poly", "(", "self", ".", "e1", ",", "name", "=", "'X1'", ")", "\n", "#self.X2=0.5*poly(self.X1,name='X2')+0.5*self.e2", "\n", "#self.X3=0.5*poly(self.X2,name='X3')+0.5*self.e3", "\n", "self", ".", "X2", "=", "poly", "(", "self", ".", "X1", ",", "self", ".", "e2", ",", "name", "=", "'X2'", ")", "\n", "self", ".", "X3", "=", "poly", "(", "self", ".", "X2", ",", "self", ".", "e3", ",", "name", "=", "'X3'", ")", "\n", "self", ".", "X", "=", "tf", ".", "concat", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "X3", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "X", "=", "self", ".", "normalize_output", "(", "self", ".", "X", ")", "\n", "", "", "", "class", "LinearGenerator", "(", "Generator", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.LinearGenerator.build": [[205, 213], ["tensorflow.variable_scope", "tensorflow.random_uniform", "tensorflow.split", "models.LinearGenerator.smallNN", "models.LinearGenerator.smallNN", "models.LinearGenerator.smallNN", "tensorflow.concat"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Generator.smallNN", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Generator.smallNN", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Generator.smallNN", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat"], ["def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "z", "=", "tf", ".", "random_uniform", "(", "(", "self", ".", "N", ",", "self", ".", "x_dim", "*", "self", ".", "z_dim", ")", ",", "0", ",", "1", ",", "name", "=", "'z'", ")", "\n", "z1", ",", "z2", ",", "z3", "=", "tf", ".", "split", "(", "self", ".", "z", ",", "3", ",", "axis", "=", "1", ")", "#3=x_dim", "\n", "self", ".", "X1", "=", "self", ".", "smallNN", "(", "z1", ",", "'X1'", ")", "\n", "self", ".", "X2", "=", "self", ".", "smallNN", "(", "[", "self", ".", "X1", ",", "z2", "]", ",", "'X2'", ")", "\n", "self", ".", "X3", "=", "self", ".", "smallNN", "(", "[", "self", ".", "X2", ",", "z3", "]", ",", "'X3'", ")", "\n", "self", ".", "X", "=", "tf", ".", "concat", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "X3", "]", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.NetworkArrows.build": [[216, 225], ["tensorflow.variable_scope", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.sigmoid", "models.NetworkArrows.normalize_output", "models.linear", "models.linear", "models.linear", "models.linear", "models.linear"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Arrows.normalize_output", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear"], ["def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "hidden_size", "=", "10", "\n", "h0", "=", "tf", ".", "tanh", "(", "linear", "(", "self", ".", "e1", ",", "self", ".", "hidden_size", ",", "'netarrow0'", ")", ")", "\n", "h1", "=", "tf", ".", "tanh", "(", "linear", "(", "h0", ",", "self", ".", "hidden_size", ",", "'netarrow1'", ")", ")", "\n", "h2", "=", "tf", ".", "tanh", "(", "linear", "(", "h1", ",", "self", ".", "hidden_size", ",", "'netarrow2'", ")", ")", "\n", "h3", "=", "tf", ".", "tanh", "(", "linear", "(", "h2", ",", "self", ".", "hidden_size", ",", "'netarrow3'", ")", ")", "\n", "h4", "=", "tf", ".", "sigmoid", "(", "linear", "(", "h3", ",", "self", ".", "x_dim", ",", "'netarrow4'", ")", ")", "\n", "self", ".", "X", "=", "self", ".", "normalize_output", "(", "h4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.FC3_Generator.build": [[228, 235], ["tensorflow.random_uniform", "tensorflow.split", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.sigmoid", "models.linear", "models.linear", "models.linear"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear"], ["def", "build", "(", "self", ")", ":", "\n", "        ", "z", "=", "tf", ".", "random_uniform", "(", "(", "self", ".", "N", ",", "self", ".", "x_dim", "*", "self", ".", "z_dim", ")", ",", "0", ",", "1", ",", "name", "=", "'z'", ")", "\n", "z1", ",", "z2", ",", "z3", "=", "tf", ".", "split", "(", "z", ",", "3", ",", "axis", "=", "1", ")", "#3=x_dim", "\n", "h0", "=", "tf", ".", "tanh", "(", "linear", "(", "z1", ",", "self", ".", "hidden_size", ",", "'fc3gen0'", ")", ")", "\n", "h1", "=", "tf", ".", "tanh", "(", "linear", "(", "h0", ",", "self", ".", "hidden_size", ",", "'fc3gen1'", ")", ")", "\n", "h2", "=", "tf", ".", "sigmoid", "(", "linear", "(", "h1", ",", "self", ".", "x_dim", ",", "'fc3gen2'", ")", ")", "\n", "self", ".", "X", "=", "h2", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.FC5_Generator.build": [[238, 247], ["tensorflow.random_uniform", "tensorflow.split", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.sigmoid", "models.linear", "models.linear", "models.linear", "models.linear", "models.linear"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear"], ["def", "build", "(", "self", ")", ":", "\n", "        ", "z", "=", "tf", ".", "random_uniform", "(", "(", "self", ".", "N", ",", "self", ".", "x_dim", "*", "self", ".", "z_dim", ")", ",", "0", ",", "1", ",", "name", "=", "'z'", ")", "\n", "z1", ",", "z2", ",", "z3", "=", "tf", ".", "split", "(", "z", ",", "3", ",", "axis", "=", "1", ")", "#3=x_dim", "\n", "h0", "=", "tf", ".", "tanh", "(", "linear", "(", "z1", ",", "self", ".", "hidden_size", ",", "'fc5gen0'", ")", ")", "\n", "h1", "=", "tf", ".", "tanh", "(", "linear", "(", "h0", ",", "self", ".", "hidden_size", ",", "'fc5gen1'", ")", ")", "\n", "h2", "=", "tf", ".", "tanh", "(", "linear", "(", "h1", ",", "self", ".", "hidden_size", ",", "'fc5gen2'", ")", ")", "\n", "h3", "=", "tf", ".", "tanh", "(", "linear", "(", "h2", ",", "self", ".", "hidden_size", ",", "'fc5gen3'", ")", ")", "\n", "h4", "=", "tf", ".", "sigmoid", "(", "linear", "(", "h3", ",", "self", ".", "x_dim", ",", "'fc5gen4'", ")", ")", "\n", "self", ".", "X", "=", "h4", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.FC10_Generator.build": [[250, 264], ["tensorflow.random_uniform", "tensorflow.split", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.tanh", "tensorflow.sigmoid", "models.linear", "models.linear", "models.linear", "models.linear", "models.linear", "models.linear", "models.linear", "models.linear", "models.linear", "models.linear"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear"], ["def", "build", "(", "self", ")", ":", "\n", "        ", "z", "=", "tf", ".", "random_uniform", "(", "(", "self", ".", "N", ",", "self", ".", "x_dim", "*", "self", ".", "z_dim", ")", ",", "0", ",", "1", ",", "name", "=", "'z'", ")", "\n", "z1", ",", "z2", ",", "z3", "=", "tf", ".", "split", "(", "z", ",", "3", ",", "axis", "=", "1", ")", "#3=x_dim", "\n", "h0", "=", "tf", ".", "tanh", "(", "linear", "(", "z1", ",", "self", ".", "hidden_size", ",", "'fc10gen0'", ")", ")", "\n", "h1", "=", "tf", ".", "tanh", "(", "linear", "(", "h0", ",", "self", ".", "hidden_size", ",", "'fc10gen1'", ")", ")", "\n", "h2", "=", "tf", ".", "tanh", "(", "linear", "(", "h1", ",", "self", ".", "hidden_size", ",", "'fc10gen2'", ")", ")", "\n", "h3", "=", "tf", ".", "tanh", "(", "linear", "(", "h2", ",", "self", ".", "hidden_size", ",", "'fc10gen3'", ")", ")", "\n", "h4", "=", "tf", ".", "tanh", "(", "linear", "(", "h3", ",", "self", ".", "hidden_size", ",", "'fc10gen4'", ")", ")", "\n", "h5", "=", "tf", ".", "tanh", "(", "linear", "(", "h4", ",", "self", ".", "hidden_size", ",", "'fc10gen5'", ")", ")", "\n", "h6", "=", "tf", ".", "tanh", "(", "linear", "(", "h5", ",", "self", ".", "hidden_size", ",", "'fc10gen6'", ")", ")", "\n", "h7", "=", "tf", ".", "tanh", "(", "linear", "(", "h6", ",", "self", ".", "hidden_size", ",", "'fc10gen7'", ")", ")", "\n", "h8", "=", "tf", ".", "tanh", "(", "linear", "(", "h7", ",", "self", ".", "hidden_size", ",", "'fc10gen8'", ")", ")", "\n", "h9", "=", "tf", ".", "sigmoid", "(", "linear", "(", "h8", ",", "self", ".", "x_dim", ",", "'fc10gen9'", ")", ")", "\n", "self", ".", "X", "=", "h9", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.sxe": [[7, 13], ["tensorflow.nn.sigmoid_cross_entropy_with_logits", "isinstance", "tensorflow.ones_like"], "function", ["None"], ["def", "sxe", "(", "logits", ",", "labels", ")", ":", "\n", "#use zeros or ones if pass in scalar", "\n", "    ", "if", "not", "isinstance", "(", "labels", ",", "tf", ".", "Tensor", ")", ":", "\n", "        ", "labels", "=", "labels", "*", "tf", ".", "ones_like", "(", "logits", ")", "\n", "", "return", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.linear": [[15, 24], ["tensorflow.uniform_unit_scaling_initializer", "tensorflow.random_normal_initializer", "tensorflow.constant_initializer", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.matmul", "input_.get_shape"], "function", ["None"], ["", "def", "linear", "(", "input_", ",", "output_dim", ",", "scope", "=", "None", ",", "stddev", "=", ".7", ")", ":", "\n", "    ", "unif", "=", "tf", ".", "uniform_unit_scaling_initializer", "(", ")", "\n", "norm", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "const", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "'linear'", ")", ":", "\n", "#w = tf.get_variable('w', [input_.get_shape()[1], output_dim], initializer=unif)", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "'w'", ",", "[", "input_", ".", "get_shape", "(", ")", "[", "1", "]", ",", "output_dim", "]", ",", "initializer", "=", "norm", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "[", "output_dim", "]", ",", "initializer", "=", "const", ")", "\n", "return", "tf", ".", "matmul", "(", "input_", ",", "w", ")", "+", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.poly": [[82, 145], ["isinstance", "isinstance", "ValueError", "ValueError", "cause.get_shape().as_list", "ValueError", "tensorflow.variable_scope", "len", "np.random.rand().astype", "np.hstack", "np.reshape", "np.reshape", "np.reshape", "np.sum", "np.min", "np.max", "tensorflow.Variable", "tensorflow.concat", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reshape", "len", "cause2.get_shape().as_list", "ValueError", "cause3.get_shape().as_list", "ValueError", "cause.get_shape", "len", "len", "tensorflow.ones_like", "tensorflow.ones_like", "tensorflow.ones_like", "np.random.rand", "cause2.get_shape().as_list", "cause2.get_shape", "cause3.get_shape().as_list", "cause3.get_shape", "slice", "np.ones", "g.reshape", "cause2.get_shape", "cause3.get_shape"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape"], ["def", "poly", "(", "cause", ",", "cause2", "=", "None", ",", "cause3", "=", "None", ",", "name", "=", "'poly1d'", ",", "reuse", "=", "None", ")", ":", "\n", "#assumes input is in [0,1]. Enforces output is in [0,1]", "\n", "#if cause2 is not given, this is a cubic poly is 1 variable", "\n", "\n", "#cause and cause2 should be given as tensors like (N,1)", "\n", "\n", "#Check conditions", "\n", "    ", "if", "isinstance", "(", "cause2", ",", "str", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'cause2 was a string. you probably forgot to include\\\n                         the \"name=\" keyword when specifying only 1 cause'", ")", "\n", "", "if", "isinstance", "(", "cause3", ",", "str", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'cause3 was a string. you probably forgot to include\\\n                         the \"name=\" keyword when specifying only 1 cause'", ")", "\n", "", "if", "not", "len", "(", "cause", ".", "shape", ")", ">=", "2", ":", "\n", "        ", "cshape", "=", "cause", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "raise", "ValueError", "(", "'cause and cause2 must have len(shape)>=2. shape was'", ",", "cshape", ")", "\n", "", "if", "cause2", "is", "not", "None", ":", "\n", "        ", "if", "not", "len", "(", "cause2", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ">=", "2", ":", "\n", "            ", "cshape2", "=", "cause2", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "raise", "ValueError", "(", "'cause and cause2 must have len(shape)>=2. shape was %r'", "%", "(", "cshape2", ")", ")", "\n", "", "", "if", "cause3", "is", "not", "None", ":", "\n", "        ", "if", "not", "len", "(", "cause3", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ">=", "2", ":", "\n", "            ", "cshape3", "=", "cause3", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "raise", "ValueError", "(", "'cause and cause3 must have len(shape)>=2. shape was %r'", "%", "(", "cshape3", ")", ")", "\n", "\n", "#Start", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "if", "cause2", "is", "not", "None", "and", "cause3", "is", "not", "None", ":", "\n", "            ", "inputs", "=", "[", "tf", ".", "ones_like", "(", "cause", ")", ",", "cause", ",", "cause2", ",", "cause3", "]", "\n", "", "if", "cause2", "is", "not", "None", "and", "cause3", "is", "None", ":", "\n", "            ", "inputs", "=", "[", "tf", ".", "ones_like", "(", "cause", ")", ",", "cause", ",", "cause2", "]", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "[", "tf", ".", "ones_like", "(", "cause", ")", ",", "cause", "]", "\n", "", "dim", "=", "len", "(", "inputs", ")", "#2 or 3 or 4", "\n", "\n", "C", "=", "np", ".", "random", ".", "rand", "(", "1", ",", "dim", ",", "dim", ",", "dim", ")", ".", "astype", "(", "np", ".", "float32", ")", "#unif", "\n", "C", "=", "2", "*", "C", "-", "1", "#unif[-1,1]", "\n", "\n", "n", "=", "200", "\n", "N", "=", "n", "**", "(", "dim", "-", "1", ")", "\n", "grids", "=", "np", ".", "mgrid", "[", "[", "slice", "(", "0", ",", "1", ",", "1.", "/", "n", ")", "for", "i", "in", "inputs", "[", "1", ":", "]", "]", "]", "\n", "y", "=", "np", ".", "hstack", "(", "[", "np", ".", "ones", "(", "(", "N", ",", "1", ")", ")", "]", "+", "[", "g", ".", "reshape", "(", "N", ",", "1", ")", "for", "g", "in", "grids", "]", ")", "\n", "y1", "=", "np", ".", "reshape", "(", "y", ",", "[", "N", ",", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "y2", "=", "np", ".", "reshape", "(", "y", ",", "[", "N", ",", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "y3", "=", "np", ".", "reshape", "(", "y", ",", "[", "N", ",", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "\n", "test_poly", "=", "np", ".", "sum", "(", "y1", "*", "y2", "*", "y3", "*", "C", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "Cmin", "=", "np", ".", "min", "(", "test_poly", ")", "\n", "Cmax", "=", "np", ".", "max", "(", "test_poly", ")", "\n", "#normalize [0,1]->[0,1]", "\n", "C", "[", "0", ",", "0", ",", "0", ",", "0", "]", "-=", "Cmin", "\n", "C", "/=", "(", "Cmax", "-", "Cmin", ")", "\n", "\n", "coeff", "=", "tf", ".", "Variable", "(", "C", ",", "name", "=", "'coef'", ",", "trainable", "=", "False", ")", "\n", "\n", "#M=cause.get_shape.as_list()[0]", "\n", "x", "=", "tf", ".", "concat", "(", "inputs", ",", "axis", "=", "1", ")", "\n", "x1", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "dim", ",", "1", ",", "1", "]", ")", "\n", "x2", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "1", ",", "dim", ",", "1", "]", ")", "\n", "x3", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "1", ",", "1", ",", "dim", "]", ")", "\n", "\n", "poly", "=", "tf", ".", "reduce_sum", "(", "x1", "*", "x2", "*", "x3", "*", "coeff", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "return", "tf", ".", "reshape", "(", "poly", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.minibatch": [[266, 273], ["models.linear", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.concat", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.abs", "tensorflow.exp", "tensorflow.transpose"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat"], ["", "", "def", "minibatch", "(", "input_", ",", "num_kernels", "=", "5", ",", "kernel_dim", "=", "3", ")", ":", "\n", "    ", "x", "=", "linear", "(", "input_", ",", "num_kernels", "*", "kernel_dim", ",", "scope", "=", "'minibatch'", ",", "stddev", "=", "0.02", ")", "\n", "activation", "=", "tf", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", "num_kernels", ",", "kernel_dim", ")", ")", "\n", "diffs", "=", "tf", ".", "expand_dims", "(", "activation", ",", "3", ")", "-", "tf", ".", "expand_dims", "(", "tf", ".", "transpose", "(", "activation", ",", "[", "1", ",", "2", ",", "0", "]", ")", ",", "0", ")", "\n", "abs_diffs", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "diffs", ")", ",", "2", ")", "\n", "minibatch_features", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "-", "abs_diffs", ")", ",", "2", ")", "\n", "return", "tf", ".", "concat", "(", "[", "input_", ",", "minibatch_features", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Discriminator": [[275, 288], ["tensorflow.variable_scope", "tensorflow.nn.relu", "tensorflow.maximum", "tensorflow.nn.relu", "tensorflow.maximum", "models.linear", "models.linear", "models.linear", "models.minibatch", "tensorflow.nn.relu", "tensorflow.maximum", "models.linear"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.minibatch", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear"], ["", "def", "Discriminator", "(", "input_", ",", "hidden_size", ",", "minibatch_layer", "=", "True", ",", "alpha", "=", "0.5", ",", "reuse", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'discriminator'", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "h0_", "=", "tf", ".", "nn", ".", "relu", "(", "linear", "(", "input_", ",", "hidden_size", ",", "'disc0'", ")", ")", "\n", "h0", "=", "tf", ".", "maximum", "(", "alpha", "*", "h0_", ",", "h0_", ")", "\n", "h1_", "=", "tf", ".", "nn", ".", "relu", "(", "linear", "(", "h0", ",", "hidden_size", ",", "'disc1'", ")", ")", "\n", "h1", "=", "tf", ".", "maximum", "(", "alpha", "*", "h1_", ",", "h1_", ")", "\n", "if", "minibatch_layer", ":", "\n", "            ", "h2", "=", "minibatch", "(", "h1", ")", "\n", "", "else", ":", "\n", "            ", "h2_", "=", "tf", ".", "nn", ".", "relu", "(", "linear", "(", "h1", ",", "hidden_size", ",", "'disc2'", ")", ")", "\n", "h2", "=", "tf", ".", "maximum", "(", "alpha", "*", "h2_", ",", "h2_", ")", "\n", "", "h3", "=", "linear", "(", "h2", ",", "1", ",", "'disc3'", ")", "\n", "return", "h3", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.config.str2bool": [[3, 5], ["v.lower"], "function", ["None"], ["\n", "def", "str2bool", "(", "v", ")", ":", "\n", "#return (v is True) or (v.lower() in ('true', '1'))", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.config.add_argument_group": [[12, 16], ["parser.add_argument_group", "arg_lists.append"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.config.add_argument_group"], ["    ", "arg", "=", "parser", ".", "add_argument_group", "(", "name", ")", "\n", "arg_lists", ".", "append", "(", "arg", ")", "\n", "return", "arg", "\n", "\n", "# Data", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.config.get_config": [[59, 64], ["parser.parse_known_args"], "function", ["None"], [")", "\n", "\n", "# Misc", "\n", "misc_arg", "=", "add_argument_group", "(", "'Misc'", ")", "\n", "#misc_arg.add_argument('--build_all', type=str2bool, default=False,", "\n", "#                     help='''normally specifying is_pretrain=False will cause", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.main.get_trainer": [[18, 32], ["print", "tensorflow.reset_default_graph", "print", "trainer.Trainer", "print", "tensorflow.logging.set_verbosity"], "function", ["None"], ["from", "causal_dcgan", "import", "CausalGAN", "\n", "\n", "from", "IPython", ".", "core", "import", "debugger", "\n", "debug", "=", "debugger", ".", "Pdb", "(", ")", ".", "set_trace", "\n", "\n", "def", "get_trainer", "(", ")", ":", "\n", "    ", "print", "(", "'tf: resetting default graph!'", ")", "\n", "tf", ".", "reset_default_graph", "(", ")", "#for repeated calls in ipython", "\n", "\n", "\n", "####GET CONFIGURATION####", "\n", "#TODO:load configurations from previous model when loading previous model", "\n", "##if load_path:", "\n", "#load config files from dir", "\n", "#except if pt_load_path, get cc_config from before", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.main.main": [[34, 38], ["trainer.train"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.Trainer.train"], ["\n", "##else:", "\n", "config", ",", "_", "=", "get_config", "(", ")", "\n", "cc_config", ",", "_", "=", "get_cc_config", "(", ")", "\n", "dcgan_config", ",", "_", "=", "get_dcgan_config", "(", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.main.get_model": [[41, 45], ["main.get_trainer", "config.get_config"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.main.get_trainer", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.config.get_config"], ["###SEEDS###", "\n", "np", ".", "random", ".", "seed", "(", "config", ".", "seed", ")", "\n", "#tf.set_random_seed(config.seed) # Not working right now.", "\n", "\n", "prepare_dirs_and_logger", "(", "config", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.GAN.__init__": [[21, 35], ["trainer.GAN.prepare_model_dir", "trainer.GAN.prepare_logger", "trainer.GAN.build_summaries", "tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.assign", "trainer.GAN.build_model"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.Trainer.prepare_model_dir", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.GAN.prepare_logger", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.GAN.build_summaries", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.Trainer.build_model"], ["self", ".", "cc_config", ".", "model_dir", "=", "config", ".", "model_dir", "\n", "\n", "self", ".", "model_config", "=", "model_config", "\n", "if", "self", ".", "model_config", ":", "\n", "            ", "self", ".", "model_config", ".", "model_dir", "=", "config", ".", "model_dir", "\n", "\n", "", "self", ".", "save_model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'checkpoints'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_model_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "save_model_dir", ")", "\n", "\n", "", "self", ".", "summary_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'summaries'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "summary_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "summary_dir", ")", "\n", "\n", "", "self", ".", "load_path", "=", "config", ".", "load_path", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.GAN.build_model": [[36, 61], ["Gen", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "optimizer", "optimizer", "optimizer.minimize", "optimizer.minimize", "tensorflow.variable_scope", "models.Discriminator", "scope.reuse_variables", "models.Discriminator", "tensorflow.contrib.framework.get_variables", "models.sxe", "models.sxe", "models.sxe", "tensorflow.control_dependencies", "tensorflow.group"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Discriminator", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Discriminator", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.sxe", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.sxe", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.sxe"], ["self", ".", "use_gpu", "=", "config", ".", "use_gpu", "\n", "\n", "#This tensor controls batch_size for all models", "\n", "#Not expected to change during training, but during testing it can be", "\n", "#helpful to change it", "\n", "\n", "self", ".", "batch_size", "=", "tf", ".", "placeholder_with_default", "(", "self", ".", "config", ".", "batch_size", ",", "[", "]", ",", "name", "=", "'batch_size'", ")", "\n", "\n", "loader_batch_size", "=", "config", ".", "num_devices", "*", "config", ".", "batch_size", "\n", "\n", "#Always need to build CC", "\n", "print", "(", "'setting up CausalController'", ")", "\n", "cc_batch_size", "=", "config", ".", "num_devices", "*", "self", ".", "batch_size", "#Tensor/placeholder", "\n", "self", ".", "cc", "=", "CausalController", "(", "cc_batch_size", ",", "cc_config", ")", "\n", "self", ".", "step", "=", "self", ".", "cc", ".", "step", "\n", "\n", "#Data", "\n", "print", "(", "'setting up data'", ")", "\n", "self", ".", "data", "=", "DataLoader", "(", "self", ".", "cc", ".", "label_names", ",", "config", ")", "\n", "\n", "if", "self", ".", "cc_config", ".", "is_pretrain", "or", "self", ".", "config", ".", "build_pretrain", ":", "\n", "            ", "print", "(", "'setup pretrain'", ")", "\n", "#queue system to feed labels quickly. This does not queue images", "\n", "label_queue", "=", "self", ".", "data", ".", "get_label_queue", "(", "loader_batch_size", ")", "\n", "self", ".", "cc", ".", "build_pretrain", "(", "label_queue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.GAN.build_summaries": [[62, 71], ["tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.placeholder", "tensorflow.summary.image", "tensorflow.summary.FileWriter"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.merge"], ["#Build Model", "\n", "", "if", "self", ".", "model_config", ":", "\n", "#Will build both gen and discrim", "\n", "            ", "self", ".", "model", "=", "self", ".", "config", ".", "Model", "(", "self", ".", "batch_size", ",", "self", ".", "model_config", ")", "\n", "\n", "#Trainer step is defined as cc.step+model.step", "\n", "#e.g. 10k iter pretrain and 100k iter image model", "\n", "#will have image summaries at 100k but trainer model saved at Model-110k", "\n", "self", ".", "step", "+=", "self", ".", "model", ".", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.GAN.record_losses": [[72, 77], ["utils.summary_losses", "trainer.GAN.summary_writer.add_summary", "trainer.GAN.summary_writer.add_summary", "trainer.GAN.summary_writer.flush"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.summary_losses"], ["# This queue holds (image,label) pairs, and is used for training conditional GANs", "\n", "data_queue", "=", "self", ".", "data", ".", "get_data_queue", "(", "loader_batch_size", ")", "\n", "\n", "self", ".", "real_data_by_gpu", "=", "distribute_input_data", "(", "data_queue", ",", "config", ".", "num_gpu", ")", "\n", "self", ".", "fake_data_by_gpu", "=", "distribute_input_data", "(", "self", ".", "cc", ".", "label_dict", ",", "config", ".", "num_gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.GAN.record_tvd": [[78, 86], ["utils.calc_tvd", "trainer.GAN.log_tvd", "utils.make_summary", "utils.make_summary", "trainer.GAN.summary_writer.add_summary", "trainer.GAN.summary_writer.add_summary", "trainer.GAN.summary_writer.flush"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.calc_tvd", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.GAN.log_tvd", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.make_summary", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.make_summary"], ["with", "tf", ".", "variable_scope", "(", "'tower'", ")", ":", "\n", "                ", "for", "gpu", "in", "get_available_gpus", "(", ")", ":", "\n", "                    ", "print", "(", "'using device:'", ",", "gpu", ")", "\n", "\n", "real_data", "=", "self", ".", "real_data_by_gpu", "[", "gpu", "]", "\n", "fake_data", "=", "self", ".", "fake_data_by_gpu", "[", "gpu", "]", "\n", "tower", "=", "gpu", ".", "replace", "(", "'/'", ",", "''", ")", ".", "replace", "(", "':'", ",", "'_'", ")", "\n", "\n", "with", "tf", ".", "device", "(", "gpu", ")", ",", "tf", ".", "name_scope", "(", "tower", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.GAN.record_scatter": [[86, 93], ["sess.run", "numpy.split", "utils.summary_scatterplots", "sess.run", "trainer.GAN.summary_writer.add_summary", "trainer.GAN.summary_writer.flush", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.summary_scatterplots"], ["with", "tf", ".", "device", "(", "gpu", ")", ",", "tf", ".", "name_scope", "(", "tower", ")", ":", "\n", "#Build num_gpu copies of graph: inputs->gradient", "\n", "#Updates self.tower_dict", "\n", "                        ", "self", ".", "model", "(", "real_data", ",", "fake_data", ")", "\n", "\n", "#allow future gpu to use same variables", "\n", "", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.GAN.prepare_model_dir": [[129, 134], ["os.path.join", "print", "os.path.exists", "os.mkdir"], "methods", ["None"], ["\n", "#save copy of cc model in new dir", "\n", "cc_step", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "cc", ".", "step", ")", "\n", "self", ".", "cc", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "self", ".", "cc", ".", "save_model_name", ",", "cc_step", ")", "\n", "\n", "", "if", "config", ".", "load_path", ":", "#Declare loading point", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.GAN.prepare_logger": [[134, 141], ["logging.getLogger", "os.path.join", "logging.FileHandler", "trainer.GAN.logger.addHandler", "trainer.GAN.logger.setLevel", "trainer.GAN.logger.info"], "methods", ["None"], ["", "if", "config", ".", "load_path", ":", "#Declare loading point", "\n", "            ", "pnt_str", "=", "'Loaded variables at ccStep:{}'", "\n", "cc_step", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "cc", ".", "step", ")", "\n", "pnt_str", "=", "pnt_str", ".", "format", "(", "cc_step", ")", "\n", "print", "(", "'pntstr'", ",", "pnt_str", ")", "\n", "if", "self", ".", "model_config", ":", "\n", "                ", "pnt_str", "+=", "' imagemodelStep:{}'", "\n", "model_step", "=", "self", ".", "sess", ".", "run", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.GAN.log_tvd": [[141, 144], ["trainer.GAN.logger.info", "str", "str", "str"], "methods", ["None"], ["model_step", "=", "self", ".", "sess", ".", "run", "\n", "pnt_str", "=", "pnt_str", ".", "format", "(", "model_step", ")", "\n", "", "print", "(", "pnt_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.Trainer.__init__": [[147, 199], ["trainer.Trainer.prepare_model_dir", "tensorflow.Variable", "tensorflow.assign", "trainer.Trainer.build_model", "tensorflow.summary.FileWriter", "tensorflow.train.Saver", "tensorflow.GPUOptions", "tensorflow.ConfigProto", "tensorflow.Session", "tensorflow.global_variables_initializer", "trainer.Trainer.sess.run", "print", "trainer.Trainer.saver.restore", "trainer.Trainer.data_scatterplot"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.Trainer.prepare_model_dir", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.Trainer.build_model", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.Trainer.data_scatterplot"], ["", "fixed_batch_size", "=", "256", "#get this many fixed z values", "\n", "\n", "self", ".", "fetch_fixed_z", "=", "{", "n", ".", "z", ":", "n", ".", "z", "for", "n", "in", "self", ".", "cc", ".", "nodes", "}", "\n", "if", "model_config", ":", "\n", "            ", "self", ".", "fetch_fixed_z", "[", "self", ".", "model", ".", "z_gen", "]", "=", "self", ".", "model", ".", "z_gen", "\n", "\n", "#feed_dict that ensures constant inputs", "\n", "#add feed_fixed_z[self.cc.Male.label]=1*ones() to intervene", "\n", "", "self", ".", "feed_fixed_z", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "fetch_fixed_z", ",", "{", "self", ".", "batch_size", ":", "fixed_batch_size", "}", ")", "\n", "\n", "", "def", "pretrain_loop", "(", "self", ",", "num_iter", "=", "None", ")", ":", "\n", "        ", "'''\n        num_iter : is the number of *additional* iterations to do\n        baring one of the quit conditions (the model may already be\n        trained for some number of iterations). Defaults to\n        cc_config.pretrain_iter.\n\n        '''", "\n", "#TODO: potentially should be moved into CausalController for consistency", "\n", "\n", "num_iter", "=", "num_iter", "or", "self", ".", "cc", ".", "config", ".", "pretrain_iter", "\n", "\n", "if", "hasattr", "(", "self", ",", "'model'", ")", ":", "\n", "            ", "model_step", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "model", ".", "step", ")", "\n", "assert", "model_step", "==", "0", ",", "'if pretraining, model should not be trained already'", "\n", "\n", "", "cc_step", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "cc", ".", "step", ")", "\n", "if", "cc_step", ">", "0", ":", "\n", "            ", "print", "(", "'Resuming training of already optimized CC model at\\\n                  step:'", ",", "cc_step", ")", "\n", "\n", "", "label_stats", "=", "crosstab", "(", "self", ",", "report_tvd", "=", "True", ")", "\n", "\n", "def", "break_pretrain", "(", "label_stats", ",", "counter", ")", ":", "\n", "            ", "c1", "=", "counter", ">=", "self", ".", "cc", ".", "config", ".", "min_pretrain_iter", "\n", "c2", "=", "(", "label_stats", "[", "'tvd'", "]", "<", "self", ".", "cc", ".", "config", ".", "min_tvd", ")", "\n", "return", "(", "c1", "and", "c2", ")", "\n", "\n", "", "for", "counter", "in", "trange", "(", "cc_step", ",", "cc_step", "+", "num_iter", ")", ":", "\n", "#Check for early exit", "\n", "            ", "if", "counter", "%", "(", "10", "*", "self", ".", "cc", ".", "config", ".", "log_step", ")", "==", "0", ":", "\n", "                ", "label_stats", "=", "crosstab", "(", "self", ",", "report_tvd", "=", "True", ")", "\n", "print", "(", "'ptstep:'", ",", "counter", ",", "'  TVD:'", ",", "label_stats", "[", "'tvd'", "]", ")", "\n", "if", "break_pretrain", "(", "label_stats", ",", "counter", ")", ":", "\n", "                    ", "print", "(", "'Completed Pretrain by TVD Qualification'", ")", "\n", "break", "\n", "\n", "#Optimize critic", "\n", "", "", "self", ".", "cc", ".", "critic_update", "(", "self", ".", "sess", ")", "\n", "\n", "#one iter causal controller", "\n", "fetch_dict", "=", "{", "\n", "\"pretrain_op\"", ":", "self", ".", "cc", ".", "train_op", ",", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.Trainer.data_scatterplot": [[201, 208], ["trainer.Trainer.sess.run", "numpy.split", "utils.summary_scatterplots", "trainer.Trainer.sess.run", "trainer.Trainer.summary_writer.add_summary", "trainer.Trainer.summary_writer.flush", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.summary_scatterplots"], ["'step'", ":", "self", ".", "step", ",", "\n", "}", "\n", "\n", "#update what to run", "\n", "if", "counter", "%", "self", ".", "cc", ".", "config", ".", "log_step", "==", "0", ":", "\n", "                ", "fetch_dict", ".", "update", "(", "{", "\n", "\"summary\"", ":", "self", ".", "cc", ".", "summary_op", ",", "\n", "\"c_loss\"", ":", "self", ".", "cc", ".", "c_loss", ",", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.Trainer.build_model": [[210, 222], ["tensorflow.placeholder", "tensorflow.summary.image", "trainer.GAN", "tensorflow.control_dependencies", "tensorflow.group", "models.GeneratorTypes.keys"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.keys"], ["}", ")", "\n", "", "result", "=", "self", ".", "sess", ".", "run", "(", "fetch_dict", ")", "\n", "\n", "#update summaries", "\n", "if", "counter", "%", "self", ".", "cc", ".", "config", ".", "log_step", "==", "0", ":", "\n", "                ", "if", "counter", "%", "(", "10", "*", "self", ".", "cc", ".", "config", ".", "log_step", ")", "==", "0", ":", "\n", "                    ", "sum_tvd", "=", "make_summary", "(", "'misc/tvd'", ",", "label_stats", "[", "'tvd'", "]", ")", "\n", "self", ".", "summary_writer", ".", "add_summary", "(", "sum_tvd", ",", "result", "[", "'cc_step'", "]", ")", "\n", "\n", "", "self", ".", "summary_writer", ".", "add_summary", "(", "result", "[", "'summary'", "]", ",", "result", "[", "'cc_step'", "]", ")", "\n", "self", ".", "summary_writer", ".", "flush", "(", ")", "\n", "\n", "c_loss", "=", "result", "[", "'c_loss'", "]", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.Trainer.train": [[224, 268], ["utils.Timer", "utils.Timer", "utils.Timer", "utils.Timer", "tqdm.trange", "print", "print", "print", "print", "print", "trainer.Trainer.train_timer.on", "trainer.Trainer.sess.run", "trainer.Trainer.train_timer.off", "trainer.Trainer.saver.save", "trainer.Trainer.losses_timer.on", "gan.record_losses", "trainer.Trainer.losses_timer.off", "trainer.Trainer.tvd_timer.on", "gan.record_tvd", "trainer.Trainer.tvd_timer.off", "trainer.Trainer.scatter_timer.on", "gan.record_scatter", "trainer.Trainer.scatter_timer.off"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.Timer.on", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.Timer.off", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.Timer.on", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.GAN.record_losses", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.Timer.off", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.Timer.on", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.GAN.record_tvd", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.Timer.off", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.Timer.on", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.GAN.record_scatter", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.Timer.off"], ["print", "(", "\"[{}/{}] Loss_C: {:.6f} Loss_DCC: {:.6f}\"", ".", "format", "(", "counter", ",", "cc_step", "+", "num_iter", ",", "c_loss", ",", "dcc_loss", ")", ")", "\n", "\n", "", "if", "counter", "%", "(", "10", "*", "self", ".", "cc", ".", "config", ".", "log_step", ")", "==", "0", ":", "\n", "                ", "self", ".", "cc", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "self", ".", "cc", ".", "save_model_name", ",", "result", "[", "'cc_step'", "]", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "label_stats", "=", "crosstab", "(", "self", ",", "report_tvd", "=", "True", ")", "\n", "self", ".", "cc", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "self", ".", "cc", ".", "save_model_name", ",", "self", ".", "cc", ".", "step", ")", "\n", "print", "(", "'Completed Pretrain by Exhausting all Pretrain Steps!'", ")", "\n", "\n", "", "print", "(", "'step:'", ",", "result", "[", "'cc_step'", "]", ",", "'  TVD:'", ",", "label_stats", "[", "'tvd'", "]", ")", "\n", "\n", "\n", "", "def", "train_loop", "(", "self", ",", "num_iter", "=", "None", ")", ":", "\n", "        ", "'''\n        This is a function for handling the training of either CausalBEGAN or\n        CausalGAN models. The python function Model.train_step() is called\n        num_iter times and some general image save features: intervening,\n        conditioning, etc are done here too.\n        '''", "\n", "num_iter", "=", "num_iter", "or", "self", ".", "model_config", ".", "num_iter", "\n", "\n", "#Train loop", "\n", "print", "(", "'Entering train loop..'", ")", "\n", "for", "counter", "in", "trange", "(", "num_iter", ")", ":", "\n", "\n", "            ", "self", ".", "model", ".", "train_step", "(", "self", ".", "sess", ",", "counter", ")", "\n", "\n", "#scalar and histogram summaries", "\n", "if", "counter", "%", "self", ".", "config", ".", "log_step", "==", "0", ":", "\n", "                ", "step", ",", "summ", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "step", ",", "self", ".", "model", ".", "summary_op", "]", ")", "\n", "self", ".", "summary_writer", ".", "add_summary", "(", "summ", ",", "step", ")", "\n", "self", ".", "summary_writer", ".", "flush", "(", ")", "\n", "\n", "#expensive summaries", "\n", "", "if", "counter", "%", "(", "self", ".", "config", ".", "log_step", "*", "50", ")", "==", "0", ":", "\n", "                ", "self", ".", "causal_sampling", "(", "[", "8", ",", "16", "]", ")", "\n", "self", ".", "label_interpolation", "(", ")", "\n", "self", ".", "sample_diversity", "(", ")", "\n", "\n", "#more rare events", "\n", "", "if", "counter", "%", "(", "self", ".", "config", ".", "log_step", "*", "100", ")", "==", "0", ":", "\n", "                ", "self", ".", "causal_sampling", "(", "[", "2", ",", "10", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.trainer.Trainer.prepare_model_dir": [[270, 307], ["print", "os.path.join", "os.path.join", "os.path.join", "print", "print", "os.path.join", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "open", "json.dump", "os.path.join", "os.path.dirname", "os.path.realpath", "f.endswith", "datetime.datetime.datetime.now().strftime", "os.path.exists", "os.makedirs", "os.listdir", "os.path.isfile", "shutil.copy2", "os.path.join", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "", "", "def", "sample_label", "(", "self", ",", "cond_dict", "=", "None", ",", "do_dict", "=", "None", ",", "N", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "cc", ".", "sample_label", "(", "self", ".", "sess", ",", "cond_dict", "=", "cond_dict", ",", "do_dict", "=", "do_dict", ",", "N", "=", "N", ")", "\n", "##", "\n", "\n", "##Sampling and figure methods", "\n", "", "def", "label_interpolation", "(", "self", ",", "inputs", "=", "None", ",", "save_dir", "=", "None", ",", "ext", "=", "'.pdf'", ")", ":", "\n", "        ", "'''\n        Holding all other inputs the same, move a causal controller\n        labels between 0 and 1. Recalculate the downstream effects to capture the causal effect.\n\n        For each label, this makes an 8x8 image with each row being\n        an instance of z_fixed with varying label\n        '''", "\n", "\n", "interpolation_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'label_interpolation'", ")", "\n", "save_dir", "=", "save_dir", "or", "interpolation_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "save_dir", ")", "\n", "\n", "", "inputs", "=", "inputs", "or", "{", "}", "\n", "\n", "#use the first 8 values", "\n", "#contrasting np.repeat and np.tile to get all combinations", "\n", "fixed_z", "=", "inputs", "or", "{", "k", ":", "np", ".", "repeat", "(", "v", "[", ":", "8", "]", ",", "8", ",", "axis", "=", "0", ")", "for", "k", ",", "v", "in", "self", ".", "feed_fixed_z", ".", "items", "(", ")", "}", "\n", "setval", "=", "np", ".", "tile", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "8", ")", ",", "8", ")", ".", "reshape", "(", "[", "64", ",", "1", "]", ")", "\n", "\n", "fixed_z", ".", "update", "(", "{", "self", ".", "batch_size", ":", "64", "}", ")", "\n", "save_name", "=", "'{}/{}_G_interp_{}'", "+", "ext", "\n", "\n", "#make 8x8 image", "\n", "for", "node", "in", "self", ".", "cc", ".", "nodes", ":", "\n", "\n", "            ", "fd", "=", "fixed_z", ".", "copy", "(", ")", "\n", "fd", "[", "node", ".", "label", "]", "=", "setval", "\n", "images", ",", "step", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "model", ".", "G", ",", "self", ".", "model", ".", "step", "]", ",", "fd", ")", "\n", "interp_path", "=", "save_name", ".", "format", "(", "save_dir", ",", "step", ",", "node", ".", "name", ")", "\n", "save_image", "(", "images", ",", "interp_path", ",", "nrow", "=", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.Timer.__init__": [[157, 160], ["None"], "methods", ["None"], ["", "h", ",", "h_width", "=", "y", "*", "height", "+", "1", "+", "padding", "//", "2", ",", "height", "-", "padding", "\n", "w", ",", "w_width", "=", "x", "*", "width", "+", "1", "+", "padding", "//", "2", ",", "width", "-", "padding", "\n", "\n", "grid", "[", "h", ":", "h", "+", "h_width", ",", "w", ":", "w", "+", "w_width", "]", "=", "tensor", "[", "k", "]", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.Timer.on": [[160, 162], ["time.time"], "methods", ["None"], ["grid", "[", "h", ":", "h", "+", "h_width", ",", "w", ":", "w", "+", "w_width", "]", "=", "tensor", "[", "k", "]", "\n", "k", "=", "k", "+", "1", "\n", "", "", "return", "grid", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.Timer.off": [[162, 165], ["time.time"], "methods", ["None"], ["", "", "return", "grid", "\n", "\n", "", "def", "save_image", "(", "tensor", ",", "filename", ",", "nrow", "=", "8", ",", "padding", "=", "2", ",", "\n", "normalize", "=", "False", ",", "scale_each", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.Timer.__str__": [[165, 168], ["None"], "methods", ["None"], ["normalize", "=", "False", ",", "scale_each", "=", "False", ")", ":", "\n", "    ", "ndarr", "=", "make_grid", "(", "tensor", ",", "nrow", "=", "nrow", ",", "padding", "=", "padding", ",", "\n", "normalize", "=", "normalize", ",", "scale_each", "=", "scale_each", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "ndarr", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.make_summary": [[19, 21], ["tensorflow.core.framework.summary_pb2.Summary", "tensorflow.core.framework.summary_pb2.Summary.Value"], "function", ["None"], ["\n", "def", "make_summary", "(", "name", ",", "val", ")", ":", "\n", "    ", "return", "summary_pb2", ".", "Summary", "(", "value", "=", "[", "summary_pb2", ".", "Summary", ".", "Value", "(", "tag", "=", "name", ",", "simple_value", "=", "val", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.summary_losses": [[22, 27], ["sess.run", "utils.make_summary", "utils.make_summary"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.make_summary", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.make_summary"], ["\n", "", "def", "summary_stats", "(", "name", ",", "tensor", ",", "collections", "=", "None", ",", "hist", "=", "False", ")", ":", "\n", "    ", "collections", "=", "collections", "or", "[", "tf", ".", "GraphKeys", ".", "SUMMARIES", "]", "\n", "ave", "=", "tf", ".", "reduce_mean", "(", "tensor", ")", "\n", "std", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "ave", "-", "tensor", ")", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "name", "+", "'_ave'", ",", "ave", ",", "collections", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.calc_tvd": [[28, 45], ["sess.run", "sess.run", "numpy.histogramdd", "numpy.histogramdd", "numpy.max", "utils.make_summary", "utils.make_summary", "numpy.sum", "numpy.abs", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.make_summary", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.make_summary"], ["tf", ".", "summary", ".", "scalar", "(", "name", "+", "'_std'", ",", "std", ",", "collections", ")", "\n", "if", "hist", ":", "\n", "        ", "tf", ".", "summary", ".", "histogram", "(", "name", "+", "'_hist'", ",", "tensor", ",", "collections", ")", "\n", "\n", "\n", "", "", "def", "prepare_dirs_and_logger", "(", "config", ")", ":", "\n", "\n", "    ", "if", "config", ".", "load_path", ":", "\n", "        ", "strip_lp", "=", "config", ".", "load_path", ".", "strip", "(", "'./'", ")", "\n", "if", "strip_lp", ".", "startswith", "(", "config", ".", "log_dir", ")", ":", "\n", "            ", "config", ".", "model_dir", "=", "config", ".", "load_path", "\n", "", "else", ":", "\n", "            ", "if", "config", ".", "load_path", ".", "startswith", "(", "config", ".", "dataset", ")", ":", "\n", "                ", "config", ".", "model_name", "=", "config", ".", "load_path", "\n", "", "else", ":", "\n", "                ", "config", ".", "model_name", "=", "\"{}_{}\"", ".", "format", "(", "config", ".", "dataset", ",", "config", ".", "load_path", ")", "\n", "", "", "", "else", ":", "#new model", "\n", "        ", "config", ".", "model_name", "=", "\"{}_{}\"", ".", "format", "(", "config", ".", "dataset", ",", "get_time", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.summary_stats": [[48, 55], ["tensorflow.reduce_mean", "tensorflow.sqrt", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.reduce_mean", "tensorflow.summary.histogram", "tensorflow.square"], "function", ["None"], ["\n", "\n", "", "", "if", "not", "hasattr", "(", "config", ",", "'model_dir'", ")", ":", "\n", "        ", "config", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "log_dir", ",", "config", ".", "model_name", ")", "\n", "", "config", ".", "data_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_dir", ",", "config", ".", "dataset", ")", "\n", "\n", "\n", "if", "not", "config", ".", "load_path", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.summary_scatterplots": [[56, 63], ["tensorflow.name_scope", "utils.summary_scatter2d", "utils.summary_scatter2d", "utils.summary_scatter2d", "matplotlib.close"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.summary_scatter2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.summary_scatter2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.summary_scatter2d"], ["        ", "config", ".", "log_code_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "model_dir", ",", "'code'", ")", "\n", "for", "path", "in", "[", "config", ".", "log_dir", ",", "config", ".", "data_dir", ",", "\n", "config", ".", "model_dir", "]", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "#Copy python code in directory into model_dir/code for future reference:", "\n", "#All python files in this directory are copied.", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.summary_scatter2d": [[66, 79], ["utils.scatter2d", "scatter2d.canvas.draw", "scatter2d.canvas.tostring_rgb", "numpy.fromstring", "scatter2d.canvas.get_width_height", "np.fromstring.reshape", "matplotlib.close"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.scatter2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape"], ["##additionally, all python files in these directories are also copied. Also symlinks are copied. The idea is to allow easier model loading in the future", "\n", "allowed_dirs", "=", "[", "'causal_controller'", ",", "'causal_began'", ",", "'causal_dcgan'", ",", "'figure_scripts'", "]", "\n", "\n", "#ignore copy of all non-*.py except for these directories", "\n", "#If you make another folder you want copied, you have to add it here", "\n", "ignore_these", "=", "partial", "(", "ignore_except", ",", "allowed_dirs", "=", "allowed_dirs", ")", "\n", "shutil", ".", "copytree", "(", "code_dir", ",", "config", ".", "log_code_dir", ",", "symlinks", "=", "True", ",", "ignore", "=", "ignore_these", ")", "\n", "\n", "\n", "#        model_files = [f for f in listdir(code_dir) if isfile(join(code_dir, f))]", "\n", "#        for f in model_files:", "\n", "#            if f.endswith('.py'):", "\n", "#                shutil.copy2(f,config.log_code_dir)", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.scatter2d": [[80, 99], ["matplotlib.figure", "matplotlib.scatter", "matplotlib.title", "matplotlib.xlim", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "ValueError", "ValueError", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max"], "function", ["None"], ["\n", "", "", "def", "ignore_except", "(", "src", ",", "contents", ",", "allowed_dirs", ")", ":", "\n", "    ", "files", "=", "filter", "(", "os", ".", "path", ".", "isfile", ",", "contents", ")", "\n", "dirs", "=", "filter", "(", "os", ".", "path", ".", "isdir", ",", "contents", ")", "\n", "ignored_files", "=", "[", "f", "for", "f", "in", "files", "if", "not", "f", ".", "endswith", "(", "'.py'", ")", "]", "\n", "ignored_dirs", "=", "[", "d", "for", "d", "in", "dirs", "if", "not", "d", "in", "allowed_dirs", "]", "\n", "return", "ignored_files", "+", "ignored_dirs", "\n", "\n", "", "def", "get_time", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m%d_%H%M%S\"", ")", "\n", "\n", "", "def", "save_configs", "(", "config", ",", "cc_config", ",", "dcgan_config", ",", "began_config", ")", ":", "\n", "    ", "model_dir", "=", "config", ".", "model_dir", "\n", "print", "(", "\"[*] MODEL dir: %s\"", "%", "model_dir", ")", "\n", "save_config", "(", "config", ")", "\n", "save_config", "(", "cc_config", ",", "'cc_params.json'", ",", "model_dir", ")", "\n", "save_config", "(", "dcgan_config", ",", "'dcgan_params.json'", ",", "model_dir", ")", "\n", "save_config", "(", "began_config", ",", "'began_params.json'", ",", "model_dir", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.prepare_dirs_and_logger": [[101, 141], ["logging.Formatter", "logging.getLogger", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join", "logging.getLogger.removeHandler", "config.load_path.startswith", "hasattr", "os.path.join", "os.path.join", "os.path.dirname", "config.load_path.startswith", "utils.get_time", "os.path.realpath", "f.endswith", "os.path.exists", "os.makedirs", "os.listdir", "os.path.isfile", "shutil.copy2", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.get_time"], ["    ", "where", "=", "where", "or", "config", ".", "model_dir", "\n", "param_path", "=", "os", ".", "path", ".", "join", "(", "where", ",", "name", ")", "\n", "\n", "print", "(", "\"[*] PARAM path: %s\"", "%", "param_path", ")", "\n", "\n", "with", "open", "(", "param_path", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "config", ".", "__dict__", ",", "fp", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n", "", "", "def", "get_available_gpus", "(", ")", ":", "\n", "    ", "from", "tensorflow", ".", "python", ".", "client", "import", "device_lib", "\n", "local_device_protos", "=", "device_lib", ".", "list_local_devices", "(", ")", "\n", "return", "[", "x", ".", "name", "for", "x", "in", "local_device_protos", "if", "x", ".", "device_type", "==", "'GPU'", "]", "\n", "\n", "", "def", "distribute_input_data", "(", "data_loader", ",", "num_gpu", ")", ":", "\n", "    ", "'''\n    data_loader is a dictionary of tensors that are fed into our model\n\n    This function takes that dictionary of n*batch_size dimension tensors\n    and breaks it up into n dictionaries with the same key of tensors with\n    dimension batch_size. One is given to each gpu\n    '''", "\n", "if", "num_gpu", "==", "0", ":", "\n", "        ", "return", "{", "'/cpu:0'", ":", "data_loader", "}", "\n", "\n", "", "gpus", "=", "get_available_gpus", "(", ")", "\n", "if", "num_gpu", ">", "len", "(", "gpus", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'number of gpus specified={}, more than gpus available={}'", ".", "format", "(", "num_gpu", ",", "len", "(", "gpus", ")", ")", ")", "\n", "\n", "", "gpus", "=", "gpus", "[", ":", "num_gpu", "]", "\n", "\n", "data_by_gpu", "=", "{", "g", ":", "{", "}", "for", "g", "in", "gpus", "}", "\n", "for", "key", ",", "value", "in", "data_loader", ".", "items", "(", ")", ":", "\n", "        ", "spl_vals", "=", "tf", ".", "split", "(", "value", ",", "num_gpu", ")", "\n", "for", "gpu", ",", "val", "in", "zip", "(", "gpus", ",", "spl_vals", ")", ":", "\n", "            ", "data_by_gpu", "[", "gpu", "]", "[", "key", "]", "=", "val", "\n", "\n", "", "", "return", "data_by_gpu", "\n", "\n", "\n", "", "def", "rank", "(", "array", ")", ":", "\n", "    ", "return", "len", "(", "array", ".", "shape", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.get_time": [[142, 144], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["\n", "", "def", "make_grid", "(", "tensor", ",", "nrow", "=", "8", ",", "padding", "=", "2", ",", "\n", "normalize", "=", "False", ",", "scale_each", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.utils.save_config": [[145, 153], ["os.path.join", "print", "print", "open", "json.dump"], "function", ["None"], ["    ", "\"\"\"Code based on https://github.com/pytorch/vision/blob/master/torchvision/utils.py\n    minor improvement, row/col was reversed\"\"\"", "\n", "nmaps", "=", "tensor", ".", "shape", "[", "0", "]", "\n", "ymaps", "=", "min", "(", "nrow", ",", "nmaps", ")", "\n", "xmaps", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "nmaps", ")", "/", "ymaps", ")", ")", "\n", "height", ",", "width", "=", "int", "(", "tensor", ".", "shape", "[", "1", "]", "+", "padding", ")", ",", "int", "(", "tensor", ".", "shape", "[", "2", "]", "+", "padding", ")", "\n", "grid", "=", "np", ".", "zeros", "(", "[", "height", "*", "ymaps", "+", "1", "+", "padding", "//", "2", ",", "width", "*", "xmaps", "+", "1", "+", "padding", "//", "2", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "k", "=", "0", "\n", "for", "y", "in", "range", "(", "ymaps", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.__init__": [[12, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "dict", "=", "{", "}", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.__len__": [[14, 19], ["len", "len", "ArrayDict.ArrayDict.dict.values"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "dict", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "dict", ".", "values", "(", ")", "[", "0", "]", ")", "\n", "", "", "def", "__repr__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.__repr__": [[19, 21], ["repr"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "repr", "(", "self", ".", "dict", ")", "\n", "", "def", "keys", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.keys": [[21, 23], ["ArrayDict.ArrayDict.dict.keys"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.keys"], ["", "def", "keys", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dict", ".", "keys", "(", ")", "\n", "", "def", "items", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items": [[23, 25], ["ArrayDict.ArrayDict.dict.items"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items"], ["", "def", "items", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dict", ".", "items", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.validate_dict": [[26, 49], ["ArrayDict.ArrayDict.dict.items", "a_dict.items", "isinstance", "ValueError", "ValueError", "numpy.array", "a_dict.keys", "ArrayDict.ArrayDict.dict.keys", "numpy.all", "ValueError", "numpy.all", "ValueError"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.keys", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.keys"], ["", "def", "validate_dict", "(", "self", ",", "a_dict", ")", ":", "\n", "#Check keys", "\n", "        ", "for", "key", ",", "val", "in", "self", ".", "dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "key", "in", "a_dict", ".", "keys", "(", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'key:'", ",", "key", ",", "'was not in a_dict.keys()'", ")", "\n", "\n", "", "", "for", "key", ",", "val", "in", "a_dict", ".", "items", "(", ")", ":", "\n", "#Check same keys", "\n", "            ", "if", "not", "key", "in", "self", ".", "dict", ".", "keys", "(", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'argument key:'", ",", "key", ",", "'was not in self.dict'", ")", "\n", "\n", "", "if", "isinstance", "(", "val", ",", "np", ".", "ndarray", ")", ":", "\n", "#print('ndarray')", "\n", "                ", "my_val", "=", "self", ".", "dict", "[", "key", "]", "\n", "if", "not", "np", ".", "all", "(", "val", ".", "shape", "[", "1", ":", "]", "==", "my_val", ".", "shape", "[", "1", ":", "]", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "'key:'", ",", "key", ",", "'value shape'", ",", "val", ".", "shape", ",", "'does\\\n                                     not match existing shape'", ",", "my_val", ".", "shape", ")", "\n", "", "", "else", ":", "#scalar", "\n", "                ", "a_val", "=", "np", ".", "array", "(", "[", "[", "val", "]", "]", ")", "#[1,1]shape array", "\n", "my_val", "=", "self", ".", "dict", "[", "key", "]", "\n", "if", "not", "np", ".", "all", "(", "my_val", ".", "shape", "[", "1", ":", "]", "==", "a_val", ".", "shape", "[", "1", ":", "]", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "'key:'", ",", "key", ",", "'value shape'", ",", "val", ".", "shape", ",", "'does\\\n                                     not match existing shape'", ",", "my_val", ".", "shape", ")", "\n", "", "", "", "", "def", "arr_dict", "(", "self", ",", "a_dict", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.arr_dict": [[49, 54], ["isinstance", "a_dict.values", "numpy.array", "a_dict.items"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items"], ["", "", "", "", "def", "arr_dict", "(", "self", ",", "a_dict", ")", ":", "\n", "        ", "if", "isinstance", "(", "a_dict", ".", "values", "(", ")", "[", "0", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "return", "a_dict", "\n", "", "else", ":", "\n", "            ", "return", "{", "k", ":", "np", ".", "array", "(", "[", "[", "v", "]", "]", ")", "for", "k", ",", "v", "in", "a_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat": [[56, 62], ["ArrayDict.ArrayDict.arr_dict", "ArrayDict.ArrayDict.validate_dict", "numpy.vstack", "ArrayDict.ArrayDict.items"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.arr_dict", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.validate_dict", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items"], ["", "", "def", "concat", "(", "self", ",", "a_dict", ")", ":", "\n", "        ", "if", "self", ".", "dict", "==", "{", "}", ":", "\n", "            ", "self", ".", "dict", "=", "self", ".", "arr_dict", "(", "a_dict", ")", "#store interally as array", "\n", "", "else", ":", "\n", "            ", "self", ".", "validate_dict", "(", "a_dict", ")", "\n", "self", ".", "dict", "=", "{", "k", ":", "np", ".", "vstack", "(", "[", "v", ",", "a_dict", "[", "k", "]", "]", ")", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.__getitem__": [[63, 65], ["ArrayDict.ArrayDict.items"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items"], ["", "", "def", "__getitem__", "(", "self", ",", "at", ")", ":", "\n", "        ", "return", "{", "k", ":", "v", "[", "at", "]", "for", "k", ",", "v", "in", "self", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.models.lrelu": [[6, 12], ["tensorflow.variable_scope", "tensorflow.abs"], "function", ["None"], ["\n", "def", "sxe", "(", "logits", ",", "labels", ")", ":", "\n", "#use zeros or ones if pass in scalar", "\n", "    ", "if", "not", "isinstance", "(", "labels", ",", "tf", ".", "Tensor", ")", ":", "\n", "        ", "labels", "=", "labels", "*", "tf", ".", "ones_like", "(", "logits", ")", "\n", "", "return", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.models.DiscriminatorW": [[14, 33], ["tensorflow.variable_scope", "range", "tensorflow.contrib.framework.get_variables", "scope.reuse_variables", "slim.fully_connected", "tensorflow.nn.sigmoid", "str"], "function", ["None"], ["#def linear(input_, output_dim, scope=None, stddev=10.):", "\n", "", "def", "linear", "(", "input_", ",", "output_dim", ",", "scope", "=", "None", ",", "stddev", "=", ".7", ")", ":", "\n", "    ", "unif", "=", "tf", ".", "uniform_unit_scaling_initializer", "(", ")", "\n", "norm", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "const", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "'linear'", ")", ":", "\n", "#w = tf.get_variable('w', [input_.get_shape()[1], output_dim], initializer=unif)", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "'w'", ",", "[", "input_", ".", "get_shape", "(", ")", "[", "1", "]", ",", "output_dim", "]", ",", "initializer", "=", "norm", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "[", "output_dim", "]", ",", "initializer", "=", "const", ")", "\n", "return", "tf", ".", "matmul", "(", "input_", ",", "w", ")", "+", "b", "\n", "\n", "\n", "", "", "class", "Arrows", ":", "\n", "    ", "x_dim", "=", "3", "\n", "e_dim", "=", "3", "\n", "bdry_buffer", "=", "0.05", "# output in [bdry_buffer,1-bdry_buffer]", "\n", "def", "__init__", "(", "self", ",", "N", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Arrow'", ")", "as", "scope", ":", "\n", "            ", "self", ".", "N", "=", "tf", ".", "placeholder_with_default", "(", "N", ",", "shape", "=", "[", "]", ")", "\n", "#self.N=tf.constant(N) #how many to sample at a time", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.models.Grad_Penalty": [[35, 53], ["tensorflow.random_uniform", "tensorflow.sqrt", "tensorflow.reduce_mean", "Discriminator", "tensorflow.gradients", "tensorflow.reduce_sum", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.Discriminator"], ["self", ".", "e2", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "N", ",", "1", "]", ",", "0", ",", "1", ")", "\n", "self", ".", "e3", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "N", ",", "1", "]", ",", "0", ",", "1", ")", "\n", "self", ".", "build", "(", ")", "\n", "#WARN. some of these are not trainable: i.e. poly", "\n", "self", ".", "var", "=", "tf", ".", "contrib", ".", "framework", ".", "get_variables", "(", "scope", ")", "\n", "", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "normalize_output", "(", "self", ",", "X", ")", ":", "\n", "        ", "'''\n        I think that data literally in [0,1] was difficult for sigmoid network.\n        Therefore, I am normalizing it to [bdry_buffer,1-bdry_buffer]\n\n        X: assumed to be in [0,1]\n        '''", "\n", "return", "(", "1.", "-", "2", "*", "self", ".", "bdry_buffer", ")", "*", "X", "+", "self", ".", "bdry_buffer", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.config.str2bool": [[11, 14], ["v.lower"], "function", ["None"], ["def", "add_argument_group", "(", "name", ")", ":", "\n", "    ", "arg", "=", "parser", ".", "add_argument_group", "(", "name", ")", "\n", "arg_lists", ".", "append", "(", "arg", ")", "\n", "return", "arg", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.config.add_argument_group": [[18, 22], ["parser.add_argument_group", "arg_lists.append"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.config.add_argument_group"], ["#data_arg.add_argument('--batch_size', type=int, default=16)#default set elsewhere", "\n", "data_arg", ".", "add_argument", "(", "'--causal_model'", ",", "type", "=", "str", ",", "\n", "help", "=", "'''Matches the argument with a key in ./causal_graph.py and sets the graph attribute of cc_config to be a list of lists defining the causal graph'''", ")", "\n", "data_arg", ".", "add_argument", "(", "'--data_dir'", ",", "type", "=", "str", ",", "default", "=", "'data'", ")", "\n", "data_arg", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'celebA'", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.config.get_config": [[111, 115], ["parser.parse_known_args", "print"], "function", ["None"], ["\n", "\n", "def", "gpu_logic", "(", "config", ")", ":", "\n", "\n", "#consistency between use_gpu and num_gpu", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.summary_scalar": [[17, 19], ["tensorflow.summary.scalar"], "methods", ["None"], ["def", "summary_scalar", "(", "self", ",", "name", ",", "ten", ")", ":", "\n", "        ", "tf", ".", "summary", ".", "scalar", "(", "name", ",", "ten", ",", "collections", "=", "self", ".", "summs", ")", "\n", "", "def", "summary_stats", "(", "self", ",", "name", ",", "ten", ",", "hist", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.summary_stats": [[19, 21], ["utils.summary_stats"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats"], ["", "def", "summary_stats", "(", "self", ",", "name", ",", "ten", ",", "hist", "=", "False", ")", ":", "\n", "        ", "summary_stats", "(", "name", ",", "ten", ",", "collections", "=", "self", ".", "summs", ",", "hist", "=", "hist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.load": [[22, 34], ["print", "CausalController.CausalController.saver.restore", "hasattr", "tensorflow.train.Saver"], "methods", ["None"], ["", "def", "load", "(", "self", ",", "sess", ",", "path", ")", ":", "\n", "        ", "'''\n        sess is a tf.Session object\n        path is the path of the file you want to load, (not the directory)\n        Example\n        ./checkpoint/somemodel/saved/model.ckpt-3000\n        (leave off the extensions)\n        '''", "\n", "if", "not", "hasattr", "(", "self", ",", "'saver'", ")", ":", "#should have one now", "\n", "            ", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "self", ".", "var", ")", "\n", "", "print", "(", "'Attempting to load model:'", ",", "path", ")", "\n", "self", ".", "saver", ".", "restore", "(", "sess", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.__init__": [[35, 138], ["print", "zip", "list", "CausalController.CausalController.__dict__.update", "tensorflow.contrib.framework.get_variables", "tensorflow.get_collection", "tensorflow.train.Saver", "os.path.join", "os.path.join", "os.path.join", "len", "print", "tensorflow.variable_scope", "tensorflow.Variable", "tensorflow.assign", "zip", "tensorflow.concat", "tensorflow.concat", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "CausalController.CausalNode", "node.setup_tensor", "CausalController.CausalController.list_labels", "CausalController.CausalController.list_label_logits"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalNode.setup_tensor", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.list_labels", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.list_label_logits"], ["", "def", "__init__", "(", "self", ",", "batch_size", ",", "config", ")", ":", "\n", "        ", "'''\n        Args:\n            config    : This carries all the aguments defined in\n            causal_controller/config.py with it. It also defines config.graph,\n            which is a nested list that specifies the graph\n\n            batch_size: This is separate from config because it is actually a\n            tf.placeholder so that batch_size can be set during sess.run, but\n            also synchronized between the models.\n\n        A causal graph (config.graph) is specified as follows:\n            just supply a list of pairs (node, node_parents)\n\n            Example: A->B<-C; D->E\n\n            [ ['A',[]],\n              ['B',['A','C']],\n              ['C',[]],\n              ['D',[]],\n              ['E',['D']]\n            ]\n\n            I use a list right now instead of a dict because I don't think\n            dict.keys() are gauranteed to be returned a particular order.\n            TODO:A good improvement would be to use collections.OrderedDict\n\n            #old\n            #Pass indep_causal=True to use Unif[0,1] labels\n            #input_dict allows the model to take in some aritrary input instead\n            #of using tf_random_uniform nodes\n            #pass reuse if constructing for a second time\n\n            Access nodes ether with:\n            model.cc.node_dict['Male']\n            or with:\n            model.cc.Male\n\n\n        Other models such as began/dcgan are intended to be build more than\n        once (for example on 2 gpus), but causal_controller is just built once.\n\n        '''", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "batch_size", "=", "batch_size", "#tf.placeholder_with_default", "\n", "self", ".", "graph", "=", "config", ".", "graph", "\n", "print", "(", "'causal graph size:'", ",", "len", "(", "self", ".", "graph", ")", ")", "\n", "self", ".", "node_names", ",", "self", ".", "parent_names", "=", "zip", "(", "*", "self", ".", "graph", ")", "\n", "self", ".", "node_names", "=", "list", "(", "self", ".", "node_names", ")", "\n", "self", ".", "label_names", "=", "self", ".", "node_names", "\n", "\n", "#set nodeclass attributes", "\n", "if", "debug", ":", "\n", "            ", "print", "(", "'Using '", ",", "self", ".", "config", ".", "cc_n_layers", ",", "'between each causal node'", ")", "\n", "", "CausalNode", ".", "n_layers", "=", "self", ".", "config", ".", "cc_n_layers", "\n", "CausalNode", ".", "n_hidden", "=", "self", ".", "config", ".", "cc_n_hidden", "\n", "CausalNode", ".", "batch_size", "=", "self", ".", "batch_size", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "'causal_controller'", ")", "as", "vs", ":", "\n", "            ", "self", ".", "step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "'step'", ",", "trainable", "=", "False", ")", "\n", "self", ".", "inc_step", "=", "tf", ".", "assign", "(", "self", ".", "step", ",", "self", ".", "step", "+", "1", ")", "\n", "\n", "self", ".", "nodes", "=", "[", "CausalNode", "(", "name", "=", "n", ",", "config", "=", "config", ")", "for", "n", "in", "self", ".", "node_names", "]", "\n", "\n", "for", "node", ",", "rents", "in", "zip", "(", "self", ".", "nodes", ",", "self", ".", "parent_names", ")", ":", "\n", "                ", "node", ".", "parents", "=", "[", "n", "for", "n", "in", "self", ".", "nodes", "if", "n", ".", "name", "in", "rents", "]", "\n", "\n", "##construct graph##", "\n", "#Lazy construction avoids the pain of traversing the causal graph explicitly", "\n", "#python recursion error if the graph is not a DAG", "\n", "", "for", "node", "in", "self", ".", "nodes", ":", "\n", "                ", "node", ".", "setup_tensor", "(", ")", "\n", "\n", "", "self", ".", "labels", "=", "tf", ".", "concat", "(", "self", ".", "list_labels", "(", ")", ",", "-", "1", ")", "\n", "self", ".", "fake_labels", "=", "self", ".", "labels", "\n", "self", ".", "fake_labels_logits", "=", "tf", ".", "concat", "(", "self", ".", "list_label_logits", "(", ")", ",", "-", "1", ")", "\n", "\n", "", "self", ".", "label_dict", "=", "{", "n", ".", "name", ":", "n", ".", "label", "for", "n", "in", "self", ".", "nodes", "}", "\n", "self", ".", "node_dict", "=", "{", "n", ".", "name", ":", "n", "for", "n", "in", "self", ".", "nodes", "}", "\n", "self", ".", "z_dict", "=", "{", "n", ".", "name", ":", "n", ".", "z", "for", "n", "in", "self", ".", "nodes", "}", "\n", "\n", "#enable access directly. Little dangerous", "\n", "#Please don't have any nodes named \"batch_size\" for example", "\n", "self", ".", "__dict__", ".", "update", "(", "self", ".", "node_dict", ")", "\n", "\n", "#dcc variables are not saved, so if you reload in the middle of a", "\n", "#pretrain, that might be a quirk. I don't find it makes much of a", "\n", "#difference though", "\n", "self", ".", "var", "=", "tf", ".", "contrib", ".", "framework", ".", "get_variables", "(", "vs", ")", "\n", "trainable", "=", "tf", ".", "get_collection", "(", "'trainable_variables'", ")", "\n", "self", ".", "train_var", "=", "[", "v", "for", "v", "in", "self", ".", "var", "if", "v", "in", "trainable", "]", "\n", "\n", "#wont save dcc var", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", "=", "self", ".", "var", ")", "\n", "self", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "model_dir", ",", "self", ".", "model_type", ")", "\n", "self", ".", "save_model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "model_dir", ",", "'checkpoints'", ")", "\n", "self", ".", "save_model_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_model_dir", ",", "'CC-Model'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "model_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "model_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_model_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "save_model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.build_pretrain": [[140, 209], ["tensorflow.get_collection", "print", "tensorflow.summary.merge", "print", "tensorflow.group", "tensorflow.group", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "CausalController.CausalController.summary_stats", "CausalController.CausalController.summary_stats", "print", "tensorflow.concat", "CausalController.CausalController.DCC", "CausalController.CausalController.DCC", "models.Grad_Penalty", "tensorflow.reduce_mean", "CausalController.CausalController.dcc_optimizer.minimize", "tensorflow.group", "CausalController.CausalController.summary_stats", "CausalController.CausalController.summary_stats", "len", "node.setup_pretrain", "tensorflow.control_dependencies", "tensorflow.group", "tensorflow.reduce_mean", "optimizer", "optimizer", "tensorflow.control_dependencies", "CausalController.CausalController.c_optimizer.minimize", "tensorflow.name_scope", "CausalController.CausalController.summary_stats", "CausalController.CausalController.summary_stats"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.merge", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.models.Grad_Penalty", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalNode.setup_pretrain", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats"], ["", "", "def", "build_pretrain", "(", "self", ",", "label_loader", ")", ":", "\n", "        ", "'''\n        This is not called if for example using an existing model\n        label_loader is a queue of only labels that moves quickly because no\n        images\n        '''", "\n", "config", "=", "self", ".", "config", "\n", "\n", "#Pretraining setup", "\n", "self", ".", "DCC", "=", "DiscriminatorW", "\n", "\n", "#if self.config.pt_factorized:", "\n", "#self.DCC=FactorizedNetwork(self.graph,self.DCC,self.config)", "\n", "\n", "#reasonable alternative with equal performance", "\n", "if", "self", ".", "config", ".", "pt_factorized", ":", "#Each node owns a dcc", "\n", "            ", "print", "(", "'CC is factorized!'", ")", "\n", "for", "node", "in", "self", ".", "nodes", ":", "\n", "                ", "node", ".", "setup_pretrain", "(", "config", ",", "label_loader", ",", "self", ".", "DCC", ")", "\n", "\n", "", "with", "tf", ".", "control_dependencies", "(", "[", "self", ".", "inc_step", "]", ")", ":", "\n", "                ", "self", ".", "c_optim", "=", "tf", ".", "group", "(", "*", "[", "n", ".", "c_optim", "for", "n", "in", "self", ".", "nodes", "]", ")", "\n", "", "self", ".", "dcc_optim", "=", "tf", ".", "group", "(", "*", "[", "n", ".", "dcc_optim", "for", "n", "in", "self", ".", "nodes", "]", ")", "\n", "self", ".", "train_op", "=", "tf", ".", "group", "(", "self", ".", "c_optim", ",", "self", ".", "dcc_optim", ")", "\n", "\n", "self", ".", "c_loss", "=", "tf", ".", "reduce_sum", "(", "[", "n", ".", "c_loss", "for", "n", "in", "self", ".", "nodes", "]", ")", "\n", "self", ".", "dcc_loss", "=", "tf", ".", "reduce_sum", "(", "[", "n", ".", "dcc_loss", "for", "n", "in", "self", ".", "nodes", "]", ")", "\n", "\n", "self", ".", "summary_stats", "(", "'total_c_loss'", ",", "self", ".", "c_loss", ")", "\n", "self", ".", "summary_stats", "(", "'total_dcc_loss'", ",", "self", ".", "dcc_loss", ")", "\n", "\n", "#default.", "\n", "", "else", ":", "#Not factorized. CC owns dcc", "\n", "            ", "print", "(", "'setting up pretrain:'", ",", "'CausalController'", ")", "\n", "real_inputs", "=", "tf", ".", "concat", "(", "[", "label_loader", "[", "n", "]", "for", "n", "in", "self", ".", "node_names", "]", ",", "axis", "=", "1", ")", "\n", "fake_inputs", "=", "self", ".", "labels", "\n", "n_hidden", "=", "self", ".", "config", ".", "critic_hidden_size", "\n", "real_prob", ",", "self", ".", "dcc_real_logit", ",", "self", ".", "_dcc_var", "=", "self", ".", "DCC", "(", "real_inputs", ",", "self", ".", "batch_size", ",", "n_hidden", ",", "self", ".", "config", ")", "\n", "fake_prob", ",", "self", ".", "dcc_fake_logit", ",", "_", "=", "self", ".", "DCC", "(", "fake_inputs", ",", "self", ".", "batch_size", ",", "n_hidden", ",", "self", ".", "config", ",", "reuse", "=", "True", ")", "\n", "grad_cost", ",", "self", ".", "dcc_slopes", "=", "Grad_Penalty", "(", "real_inputs", ",", "fake_inputs", ",", "self", ".", "DCC", ",", "self", ".", "config", ")", "\n", "\n", "self", ".", "dcc_diff", "=", "self", ".", "dcc_fake_logit", "-", "self", ".", "dcc_real_logit", "\n", "self", ".", "dcc_gan_loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "dcc_diff", ")", "\n", "self", ".", "dcc_grad_loss", "=", "grad_cost", "\n", "self", ".", "dcc_loss", "=", "self", ".", "dcc_gan_loss", "+", "self", ".", "dcc_grad_loss", "#", "\n", "self", ".", "c_loss", "=", "-", "tf", ".", "reduce_mean", "(", "self", ".", "dcc_fake_logit", ")", "#", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "\n", "self", ".", "c_optimizer", ",", "self", ".", "dcc_optimizer", "=", "optimizer", "(", "config", ".", "pt_cc_lr", ")", ",", "optimizer", "(", "config", ".", "pt_dcc_lr", ")", "\n", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "self", ".", "inc_step", "]", ")", ":", "\n", "                ", "self", ".", "c_optim", "=", "self", ".", "c_optimizer", ".", "minimize", "(", "self", ".", "c_loss", ",", "var_list", "=", "self", ".", "train_var", ")", "\n", "", "self", ".", "dcc_optim", "=", "self", ".", "dcc_optimizer", ".", "minimize", "(", "self", ".", "dcc_loss", ",", "var_list", "=", "self", ".", "dcc_var", ")", "\n", "self", ".", "train_op", "=", "tf", ".", "group", "(", "self", ".", "c_optim", ",", "self", ".", "dcc_optim", ")", "\n", "\n", "self", ".", "summary_stats", "(", "'total_c_loss'", ",", "self", ".", "c_loss", ")", "\n", "self", ".", "summary_stats", "(", "'total_dcc_loss'", ",", "self", ".", "dcc_loss", ")", "\n", "\n", "\n", "for", "node", "in", "self", ".", "nodes", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "node", ".", "name", ")", ":", "\n", "#TODO:replace with summary_stats", "\n", "                    ", "self", ".", "summary_stats", "(", "node", ".", "name", "+", "'_fake'", ",", "node", ".", "label", ",", "hist", "=", "True", ")", "\n", "self", ".", "summary_stats", "(", "node", ".", "name", "+", "'_real'", ",", "label_loader", "[", "node", ".", "name", "]", ",", "hist", "=", "True", ")", "\n", "\n", "\n", "", "", "", "self", ".", "summaries", "=", "tf", ".", "get_collection", "(", "self", ".", "summs", "[", "0", "]", ")", "\n", "print", "(", "'causalcontroller has'", ",", "len", "(", "self", ".", "summaries", ")", ",", "'summaries'", ")", "\n", "self", ".", "summary_op", "=", "tf", ".", "summary", ".", "merge", "(", "self", ".", "summaries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.dcc_var": [[211, 220], ["list", "itertools.chain.from_iterable"], "methods", ["None"], ["", "@", "property", "\n", "def", "dcc_var", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "is_pretrain", ":", "\n", "            ", "if", "self", ".", "config", ".", "pt_factorized", ":", "\n", "                ", "return", "list", "(", "chain", ".", "from_iterable", "(", "[", "n", ".", "dcc_var", "for", "n", "in", "self", ".", "nodes", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "_dcc_var", "\n", "", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.critic_update": [[222, 226], ["range", "sess.run"], "methods", ["None"], ["", "", "def", "critic_update", "(", "self", ",", "sess", ")", ":", "\n", "        ", "fetch_dict", "=", "{", "\"critic_op\"", ":", "self", ".", "dcc_optim", "}", "\n", "for", "i", "in", "range", "(", "self", ".", "config", ".", "n_critic", ")", ":", "\n", "            ", "result", "=", "sess", ".", "run", "(", "fetch_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.__len__": [[228, 230], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "node_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.list_placeholders": [[232, 234], ["None"], "methods", ["None"], ["", "def", "list_placeholders", "(", "self", ")", ":", "\n", "        ", "return", "[", "n", ".", "z", "for", "n", "in", "self", ".", "nodes", "]", "\n", "", "def", "list_labels", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.list_labels": [[234, 236], ["None"], "methods", ["None"], ["", "def", "list_labels", "(", "self", ")", ":", "\n", "        ", "return", "[", "n", ".", "label", "for", "n", "in", "self", ".", "nodes", "]", "\n", "", "def", "list_label_logits", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.list_label_logits": [[236, 238], ["None"], "methods", ["None"], ["", "def", "list_label_logits", "(", "self", ")", ":", "\n", "        ", "return", "[", "n", ".", "label_logit", "for", "n", "in", "self", ".", "nodes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.do2feed": [[239, 247], ["do_dict.items"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items"], ["", "def", "do2feed", "(", "self", ",", "do_dict", ")", ":", "\n", "        ", "'''\n        used internally to convert a dictionary to a feed_dict\n        '''", "\n", "feed_dict", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "do_dict", ".", "items", "(", ")", ":", "\n", "            ", "feed_dict", "[", "self", ".", "label_dict", "[", "key", "]", "]", "=", "value", "\n", "", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.sample_label": [[248, 324], ["cond_dict.values", "do_dict.values", "CausalController.CausalController.do2feed", "CausalController.CausalController.update", "print", "print", "sess.run", "numpy.arange", "ArrayDict.ArrayDict.ArrayDict", "numpy.arange", "numpy.ones", "do_dict.items", "sess.run", "utils.did_succeed", "ArrayDict.ArrayDict.ArrayDict.concat", "len", "print", "print", "print", "print", "sess.run.items"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalController.do2feed", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.utils.did_succeed", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items"], ["", "def", "sample_label", "(", "self", ",", "sess", ",", "cond_dict", "=", "None", ",", "do_dict", "=", "None", ",", "N", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "'''\n        This is a method to sample conditional and internventional\n        distributions over labels. This is disconnected from\n        interventions/conditioning that include the image because it is\n        potentially faster. (images are not generated for rejected samples).\n        The intent is to pass these labels to the image generator.\n\n        This is low level. One experiment type(N times) per function call.\n        values of dictionaries should be scalars\n\n        Assumed that label_dict is always the fetch\n\n        may combine conditioning and intervening\n        '''", "\n", "\n", "do_dict", "=", "do_dict", "or", "{", "}", "\n", "cond_dict", "=", "cond_dict", "or", "{", "}", "\n", "fetch_dict", "=", "self", ".", "label_dict", "\n", "\n", "#boolean scalars are all that is allowed", "\n", "for", "v", "in", "cond_dict", ".", "values", "(", ")", ":", "\n", "            ", "assert", "(", "v", "==", "0", "or", "v", "==", "1", ")", "\n", "", "for", "v", "in", "do_dict", ".", "values", "(", ")", ":", "\n", "            ", "assert", "(", "v", "==", "0", "or", "v", "==", "1", ")", "\n", "\n", "", "arr_do_dict", "=", "{", "k", ":", "v", "*", "np", ".", "ones", "(", "[", "N", ",", "1", "]", ")", "for", "k", ",", "v", "in", "do_dict", ".", "items", "(", ")", "}", "\n", "\n", "feed_dict", "=", "self", ".", "do2feed", "(", "arr_do_dict", ")", "#{tensor:array}", "\n", "feed_dict", ".", "update", "(", "{", "self", ".", "batch_size", ":", "N", "}", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'feed_dict'", ",", "feed_dict", ")", "\n", "print", "(", "'fetch_dict'", ",", "fetch_dict", ")", "\n", "\n", "#No conditioning loop needed", "\n", "", "if", "not", "cond_dict", ":", "\n", "            ", "return", "sess", ".", "run", "(", "fetch_dict", ",", "feed_dict", ")", "\n", "\n", "", "else", ":", "#cond_dict not None", "\n", "\n", "            ", "rows", "=", "np", ".", "arange", "(", "N", ")", "#what idx do we need", "\n", "#init", "\n", "max_fail", "=", "4000", "\n", "n_fails", "=", "0", "\n", "outputs", "=", "ArrayDict", "(", ")", "\n", "iter_rows", "=", "np", ".", "arange", "(", "N", ")", "\n", "n_remaining", "=", "N", "\n", "\n", "ii", "=", "0", "\n", "while", "(", "n_remaining", ">", "0", ")", ":", "\n", "                ", "ii", "+=", "1", "\n", "\n", "#Run N samples", "\n", "out", "=", "sess", ".", "run", "(", "fetch_dict", ",", "feed_dict", ")", "\n", "\n", "bool_pass", "=", "did_succeed", "(", "out", ",", "cond_dict", ")", "\n", "pass_idx", "=", "iter_rows", "[", "bool_pass", "]", "\n", "pass_idx", "=", "pass_idx", "[", ":", "n_remaining", "]", "\n", "pass_dict", "=", "{", "k", ":", "v", "[", "pass_idx", "]", "for", "k", ",", "v", "in", "out", ".", "items", "(", ")", "}", "\n", "\n", "outputs", ".", "concat", "(", "pass_dict", ")", "\n", "n_remaining", "=", "N", "-", "len", "(", "outputs", ")", "\n", "\n", "#    :(", "\n", "if", "ii", ">", "max_fail", ":", "\n", "                    ", "print", "(", "'WARNING: for cond_dict:'", ",", "cond_dict", ",", ")", "\n", "print", "(", "'could not condition in '", ",", "max_fail", "*", "N", ",", "'samples'", ")", "\n", "break", "\n", "\n", "", "", "else", ":", "\n", "                ", "if", "verbose", ":", "\n", "                    ", "print", "(", "'for cond_dict:'", ",", "cond_dict", ",", ")", "\n", "print", "(", "'conditioning finished normally with '", ",", "ii", ",", "'tries'", ")", "\n", "\n", "", "", "return", "outputs", ".", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalNode.summary_scalar": [[352, 354], ["tensorflow.summary.scalar"], "methods", ["None"], ["def", "summary_scalar", "(", "self", ",", "name", ",", "ten", ")", ":", "\n", "        ", "tf", ".", "summary", ".", "scalar", "(", "name", ",", "ten", ",", "collections", "=", "self", ".", "summs", ")", "\n", "", "def", "summary_stats", "(", "self", ",", "name", ",", "ten", ",", "hist", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalNode.summary_stats": [[354, 356], ["utils.summary_stats"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats"], ["", "def", "summary_stats", "(", "self", ",", "name", ",", "ten", ",", "hist", "=", "False", ")", ":", "\n", "        ", "summary_stats", "(", "name", ",", "ten", ",", "collections", "=", "self", ".", "summs", ",", "hist", "=", "hist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalNode.__init__": [[357, 369], ["Exception", "tensorflow.variable_scope", "tensorflow.random_uniform", "tensorflow.contrib.framework.get_variables"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "name", ",", "config", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "config", "=", "config", "\n", "\n", "if", "self", ".", "batch_size", "==", "-", "1", ":", "\n", "            ", "raise", "Exception", "(", "'class attribute CausalNode.batch_size must be set'", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "vs", ":", "\n", "#I think config.seed would have to be passed explicitly here", "\n", "            ", "self", ".", "z", "=", "tf", ".", "random_uniform", "(", "(", "self", ".", "batch_size", ",", "self", ".", "n_hidden", ")", ",", "minval", "=", "-", "1.0", ",", "maxval", "=", "1.0", ")", "\n", "self", ".", "init_var", "=", "tf", ".", "contrib", ".", "framework", ".", "get_variables", "(", "vs", ")", "\n", "self", ".", "setup_var", "=", "[", "]", "#empty until setup_tensor runs", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalNode.setup_tensor": [[370, 395], ["tensorflow.variable_scope", "tensorflow.concat", "range", "slim.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.contrib.framework.get_variables", "print", "slim.fully_connected", "print", "str"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat"], ["", "", "def", "setup_tensor", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_label", "is", "not", "None", ":", "#already setup", "\n", "            ", "if", "debug", ":", "\n", "#Notify that already setup (normal behavior)", "\n", "                ", "print", "(", "'self.'", ",", "self", ".", "name", ",", "' has refuted setting up tensor'", ")", "\n", "", "return", "\n", "\n", "", "tf_parents", "=", "[", "self", ".", "z", "]", "+", "[", "node", ".", "label", "for", "node", "in", "self", ".", "parents", "]", "\n", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", "as", "vs", ":", "\n", "            ", "h", "=", "tf", ".", "concat", "(", "tf_parents", ",", "-", "1", ")", "#tensor of parent values", "\n", "for", "l", "in", "range", "(", "self", ".", "n_layers", "-", "1", ")", ":", "\n", "                ", "h", "=", "slim", ".", "fully_connected", "(", "h", ",", "self", ".", "n_hidden", ",", "activation_fn", "=", "lrelu", ",", "scope", "=", "'layer'", "+", "str", "(", "l", ")", ")", "\n", "\n", "", "self", ".", "_label_logit", "=", "slim", ".", "fully_connected", "(", "h", ",", "1", ",", "activation_fn", "=", "None", ",", "scope", "=", "'proj'", ")", "\n", "self", ".", "_label", "=", "tf", ".", "nn", ".", "sigmoid", "(", "self", ".", "_label_logit", ")", "\n", "if", "debug", ":", "\n", "                ", "print", "(", "'self.'", ",", "self", ".", "name", ",", "' has setup _label='", ",", "self", ".", "_label", ")", "\n", "\n", "#There could actually be some (quiet) error here I think if one of the", "\n", "#names in the causal graph is a substring of some other name.", "\n", "#e.g. 'hair' and 'black_hair'", "\n", "#Sorry, not coded to anticipate corner case", "\n", "", "self", ".", "setup_var", "=", "tf", ".", "contrib", ".", "framework", ".", "get_variables", "(", "vs", ")", "\n", "", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalNode.var": [[395, 400], ["len", "print"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "var", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "setup_var", ")", "==", "0", ":", "\n", "            ", "print", "(", "'WARN: node var was accessed before it was constructed'", ")", "\n", "", "return", "self", ".", "init_var", "+", "self", ".", "setup_var", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalNode.train_var": [[400, 404], ["tensorflow.get_collection"], "methods", ["None"], ["", "@", "property", "\n", "def", "train_var", "(", "self", ")", ":", "\n", "        ", "trainable", "=", "tf", ".", "get_collection", "(", "'trainable_variables'", ")", "\n", "return", "[", "v", "for", "v", "in", "self", ".", "var", "if", "v", "in", "trainable", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalNode.label_logit": [[405, 414], ["CausalController.CausalNode.setup_tensor"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalNode.setup_tensor"], ["", "@", "property", "\n", "def", "label_logit", "(", "self", ")", ":", "\n", "#Less stable. Better to access labels", "\n", "#for input to another model", "\n", "        ", "if", "self", ".", "_label_logit", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_label_logit", "\n", "", "else", ":", "\n", "            ", "self", ".", "setup_tensor", "(", ")", "\n", "return", "self", ".", "_label_logit", "\n", "", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalNode.label": [[414, 421], ["CausalController.CausalNode.setup_tensor"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalNode.setup_tensor"], ["", "", "@", "property", "\n", "def", "label", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_label", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_label", "\n", "", "else", ":", "\n", "            ", "self", ".", "setup_tensor", "(", ")", "\n", "return", "self", ".", "_label", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalNode.setup_pretrain": [[423, 473], ["print", "tensorflow.variable_scope", "tensorflow.concat", "tensorflow.concat", "DCC", "DCC", "models.Grad_Penalty", "tensorflow.reduce_mean", "CausalController.CausalNode.summary_scalar", "CausalController.CausalNode.summary_scalar", "CausalController.CausalNode.summary_stats", "CausalController.CausalNode.c_optimizer.minimize", "CausalController.CausalNode.dcc_optimizer.minimize", "CausalController.CausalNode.summary_stats", "CausalController.CausalNode.summary_stats", "CausalController.CausalNode.summary_stats", "CausalController.CausalNode.summary_stats", "tensorflow.reduce_mean", "Exception", "optimizer", "optimizer"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.models.Grad_Penalty", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalNode.summary_scalar", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.CausalController.CausalNode.summary_scalar", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats"], ["", "", "def", "setup_pretrain", "(", "self", ",", "config", ",", "label_loader", ",", "DCC", ")", ":", "\n", "        ", "'''\n        This function is not functional because\n        this only happens if cc_config.pt_factorized=True.\n\n        In this case convergence of each node is treated like its\n        own gan conditioned on the parent nodes labels.\n\n        I couldn't bring myself to delete it, but it's not needed\n        to get good convergence for the models we tested.\n        '''", "\n", "\n", "print", "(", "'setting up pretrain:'", ",", "self", ".", "name", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ",", "reuse", "=", "self", ".", "reuse", ")", "as", "vs", ":", "\n", "            ", "self", ".", "config", "=", "config", "\n", "n_hidden", "=", "self", ".", "config", ".", "critic_hidden_size", "\n", "\n", "parent_names", "=", "[", "p", ".", "name", "for", "p", "in", "self", ".", "parents", "]", "\n", "real_inputs", "=", "tf", ".", "concat", "(", "[", "label_loader", "[", "n", "]", "for", "n", "in", "parent_names", "]", "+", "[", "label_loader", "[", "self", ".", "name", "]", "]", ",", "axis", "=", "1", ")", "\n", "fake_inputs", "=", "tf", ".", "concat", "(", "[", "p", ".", "label", "for", "p", "in", "self", ".", "parents", "]", "+", "[", "self", ".", "label", "]", ",", "axis", "=", "1", ")", "\n", "\n", "real_prob", ",", "self", ".", "dcc_real_logit", ",", "self", ".", "dcc_var", "=", "DCC", "(", "real_inputs", ",", "self", ".", "batch_size", ",", "n_hidden", ",", "self", ".", "config", ")", "\n", "fake_prob", ",", "self", ".", "dcc_fake_logit", ",", "_", "=", "DCC", "(", "fake_inputs", ",", "self", ".", "batch_size", ",", "n_hidden", ",", "self", ".", "config", ",", "reuse", "=", "True", ")", "\n", "\n", "grad_cost", ",", "self", ".", "dcc_slopes", "=", "Grad_Penalty", "(", "real_inputs", ",", "fake_inputs", ",", "DCC", ",", "self", ".", "config", ")", "\n", "\n", "self", ".", "dcc_diff", "=", "self", ".", "dcc_fake_logit", "-", "self", ".", "dcc_real_logit", "\n", "self", ".", "dcc_gan_loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "dcc_diff", ")", "\n", "self", ".", "dcc_grad_loss", "=", "grad_cost", "\n", "self", ".", "dcc_loss", "=", "self", ".", "dcc_gan_loss", "+", "self", ".", "dcc_grad_loss", "#", "\n", "self", ".", "c_loss", "=", "-", "tf", ".", "reduce_mean", "(", "self", ".", "dcc_fake_logit", ")", "#", "\n", "\n", "self", ".", "summary_scalar", "(", "'dcc_gan_loss'", ",", "self", ".", "dcc_gan_loss", ")", "\n", "self", ".", "summary_scalar", "(", "'dcc_grad_loss'", ",", "self", ".", "dcc_grad_loss", ")", "\n", "self", ".", "summary_stats", "(", "'dcc_slopes'", ",", "self", ".", "dcc_slopes", ",", "hist", "=", "True", ")", "\n", "\n", "if", "config", ".", "optimizer", "==", "'adam'", ":", "\n", "                ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"[!] Caution! Optimizer untested {}. Only tested Adam\"", ".", "format", "(", "config", ".", "optimizer", ")", ")", "\n", "", "self", ".", "c_optimizer", ",", "self", ".", "dcc_optimizer", "=", "optimizer", "(", "config", ".", "pt_cc_lr", ")", ",", "optimizer", "(", "config", ".", "pt_dcc_lr", ")", "\n", "\n", "self", ".", "c_optim", "=", "self", ".", "c_optimizer", ".", "minimize", "(", "self", ".", "c_loss", ",", "var_list", "=", "self", ".", "train_var", ")", "\n", "self", ".", "dcc_optim", "=", "self", ".", "dcc_optimizer", ".", "minimize", "(", "self", ".", "dcc_loss", ",", "var_list", "=", "self", ".", "dcc_var", ")", "\n", "\n", "self", ".", "summary_stats", "(", "'c_loss'", ",", "self", ".", "c_loss", ")", "\n", "self", ".", "summary_stats", "(", "'dcc_loss'", ",", "self", ".", "c_loss", ")", "\n", "self", ".", "summary_stats", "(", "'dcc_real_logit'", ",", "self", ".", "dcc_real_logit", ",", "hist", "=", "True", ")", "\n", "self", ".", "summary_stats", "(", "'dcc_fake_logit'", ",", "self", ".", "dcc_fake_logit", ",", "hist", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.utils.summary_stats": [[5, 13], ["tensorflow.reduce_mean", "tensorflow.sqrt", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.reduce_mean", "tensorflow.summary.histogram", "tensorflow.square"], "function", ["None"], ["from", "os", "import", "listdir", "\n", "from", "os", ".", "path", "import", "isfile", ",", "join", "\n", "import", "shutil", "\n", "import", "sys", "\n", "from", "glob", "import", "glob", "\n", "import", "math", "\n", "import", "json", "\n", "import", "logging", "\n", "import", "numpy", "as", "np", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.utils.did_succeed": [[14, 36], ["numpy.logical_and.reduce", "np.logical_and.reduce.flatten", "numpy.squeeze", "numpy.squeeze", "utils.did_succeed.is_win"], "function", ["None"], ["from", "PIL", "import", "Image", "\n", "from", "datetime", "import", "datetime", "\n", "from", "tensorflow", ".", "core", ".", "framework", "import", "summary_pb2", "\n", "\n", "\n", "\n", "def", "make_summary", "(", "name", ",", "val", ")", ":", "\n", "    ", "return", "summary_pb2", ".", "Summary", "(", "value", "=", "[", "summary_pb2", ".", "Summary", ".", "Value", "(", "tag", "=", "name", ",", "simple_value", "=", "val", ")", "]", ")", "\n", "\n", "", "def", "summary_stats", "(", "name", ",", "tensor", ",", "collections", "=", "None", ",", "hist", "=", "False", ")", ":", "\n", "    ", "collections", "=", "collections", "or", "[", "tf", ".", "GraphKeys", ".", "SUMMARIES", "]", "\n", "ave", "=", "tf", ".", "reduce_mean", "(", "tensor", ")", "\n", "std", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "ave", "-", "tensor", ")", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "name", "+", "'_ave'", ",", "ave", ",", "collections", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "name", "+", "'_std'", ",", "std", ",", "collections", ")", "\n", "if", "hist", ":", "\n", "        ", "tf", ".", "summary", ".", "histogram", "(", "name", "+", "'_hist'", ",", "tensor", ",", "collections", ")", "\n", "\n", "\n", "", "", "def", "prepare_dirs_and_logger", "(", "config", ")", ":", "\n", "\n", "    ", "if", "config", ".", "load_path", ":", "\n", "        ", "strip_lp", "=", "config", ".", "load_path", ".", "strip", "(", "'./'", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.lrelu": [[6, 11], ["tensorflow.variable_scope", "tensorflow.abs"], "function", ["None"], ["\n", "def", "sxe", "(", "logits", ",", "labels", ")", ":", "\n", "#use zeros or ones if pass in scalar", "\n", "    ", "if", "not", "isinstance", "(", "labels", ",", "tf", ".", "Tensor", ")", ":", "\n", "        ", "labels", "=", "labels", "*", "tf", ".", "ones_like", "(", "logits", ")", "\n", "", "return", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.GeneratorCNN": [[12, 34], ["tensorflow.contrib.framework.get_variables", "tensorflow.variable_scope", "slim.fully_connected", "models.reshape", "range", "slim.conv2d", "numpy.prod", "slim.conv2d", "slim.conv2d", "models.upscale", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.upscale"], ["logits", "=", "logits", ",", "labels", "=", "labels", ")", "\n", "\n", "#def linear(input_, output_dim, scope=None, stddev=10.):", "\n", "", "def", "linear", "(", "input_", ",", "output_dim", ",", "scope", "=", "None", ",", "stddev", "=", ".7", ")", ":", "\n", "    ", "unif", "=", "tf", ".", "uniform_unit_scaling_initializer", "(", ")", "\n", "norm", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "const", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "'linear'", ")", ":", "\n", "#w = tf.get_variable('w', [input_.get_shape()[1], output_dim], initializer=unif)", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "'w'", ",", "[", "input_", ".", "get_shape", "(", ")", "[", "1", "]", ",", "output_dim", "]", ",", "initializer", "=", "norm", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "[", "output_dim", "]", ",", "initializer", "=", "const", ")", "\n", "return", "tf", ".", "matmul", "(", "input_", ",", "w", ")", "+", "b", "\n", "\n", "\n", "", "", "class", "Arrows", ":", "\n", "    ", "x_dim", "=", "3", "\n", "e_dim", "=", "3", "\n", "bdry_buffer", "=", "0.05", "# output in [bdry_buffer,1-bdry_buffer]", "\n", "def", "__init__", "(", "self", ",", "N", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Arrow'", ")", "as", "scope", ":", "\n", "            ", "self", ".", "N", "=", "tf", ".", "placeholder_with_default", "(", "N", ",", "shape", "=", "[", "]", ")", "\n", "#self.N=tf.constant(N) #how many to sample at a time", "\n", "self", ".", "e1", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "N", ",", "1", "]", ",", "0", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.DiscriminatorCNN": [[35, 78], ["tensorflow.contrib.framework.get_variables", "tensorflow.variable_scope", "tensorflow.variable_scope", "slim.conv2d", "range", "tensorflow.reshape", "slim.fully_connected", "tensorflow.variable_scope", "slim.fully_connected", "models.reshape", "range", "slim.conv2d", "slim.conv2d", "slim.conv2d", "numpy.prod", "slim.conv2d", "slim.conv2d", "slim.conv2d", "numpy.prod", "models.upscale", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.upscale"], ["self", ".", "e2", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "N", ",", "1", "]", ",", "0", ",", "1", ")", "\n", "self", ".", "e3", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "N", ",", "1", "]", ",", "0", ",", "1", ")", "\n", "self", ".", "build", "(", ")", "\n", "#WARN. some of these are not trainable: i.e. poly", "\n", "self", ".", "var", "=", "tf", ".", "contrib", ".", "framework", ".", "get_variables", "(", "scope", ")", "\n", "", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "normalize_output", "(", "self", ",", "X", ")", ":", "\n", "        ", "'''\n        I think that data literally in [0,1] was difficult for sigmoid network.\n        Therefore, I am normalizing it to [bdry_buffer,1-bdry_buffer]\n\n        X: assumed to be in [0,1]\n        '''", "\n", "return", "(", "1.", "-", "2", "*", "self", ".", "bdry_buffer", ")", "*", "X", "+", "self", ".", "bdry_buffer", "\n", "\n", "\n", "\n", "", "", "class", "Generator", ":", "\n", "    ", "x_dim", "=", "3", "\n", "def", "__init__", "(", "self", ",", "N", ",", "hidden_size", "=", "10", ",", "z_dim", "=", "10", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Gen'", ")", "as", "scope", ":", "\n", "            ", "self", ".", "N", "=", "tf", ".", "placeholder_with_default", "(", "N", ",", "shape", "=", "[", "]", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "build", "(", ")", "\n", "self", ".", "tr_var", "=", "tf", ".", "contrib", ".", "framework", ".", "get_variables", "(", "scope", ")", "\n", "self", ".", "step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "'step'", ",", "trainable", "=", "False", ")", "\n", "self", ".", "var", "=", "tf", ".", "contrib", ".", "framework", ".", "get_variables", "(", "scope", ")", "\n", "", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "raise", "Exception", "(", "'must override'", ")", "\n", "", "def", "smallNN", "(", "self", ",", "inputs", ",", "name", "=", "'smallNN'", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "                ", "inputs", "=", "tf", ".", "concat", "(", "inputs", ",", "axis", "=", "1", ")", "\n", "", "h01", "=", "tf", ".", "tanh", "(", "linear", "(", "inputs", ",", "self", ".", "hidden_size", ",", "name", "+", "'l1'", ")", ")", "\n", "h11", "=", "tf", ".", "tanh", "(", "linear", "(", "h01", ",", "self", ".", "hidden_size", ",", "name", "+", "'l21'", ")", ")", "\n", "#h21 = output_nonlinearity(linear(h11, 1, name+'l31'))", "\n", "#h21 = linear(h11, 1, name+'l31')", "\n", "h21", "=", "tf", ".", "sigmoid", "(", "linear", "(", "h11", ",", "1", ",", "name", "+", "'l31'", ")", ")", "\n", "\n", "", "return", "h21", "#rank2", "\n", "#return tf.sigmoid(h21)#rank2", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.Discriminator_labeler": [[80, 106], ["tensorflow.variable_scope", "slim.conv2d", "range", "tensorflow.reshape", "slim.fully_connected", "tensorflow.contrib.framework.get_variables", "slim.conv2d", "slim.conv2d", "slim.conv2d", "numpy.prod", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d"], ["\n", "", "", "randunif", "=", "tf", ".", "random_uniform_initializer", "(", "0", ",", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "def", "poly", "(", "cause", ",", "cause2", "=", "None", ",", "cause3", "=", "None", ",", "name", "=", "'poly1d'", ",", "reuse", "=", "None", ")", ":", "\n", "#assumes input is in [0,1]. Enforces output is in [0,1]", "\n", "#if cause2 is not given, this is a cubic poly is 1 variable", "\n", "\n", "#cause and cause2 should be given as tensors like (N,1)", "\n", "\n", "#Check conditions", "\n", "    ", "if", "isinstance", "(", "cause2", ",", "str", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'cause2 was a string. you probably forgot to include\\\n                         the \"name=\" keyword when specifying only 1 cause'", ")", "\n", "", "if", "isinstance", "(", "cause3", ",", "str", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'cause3 was a string. you probably forgot to include\\\n                         the \"name=\" keyword when specifying only 1 cause'", ")", "\n", "", "if", "not", "len", "(", "cause", ".", "shape", ")", ">=", "2", ":", "\n", "        ", "cshape", "=", "cause", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "raise", "ValueError", "(", "'cause and cause2 must have len(shape)>=2. shape was'", ",", "cshape", ")", "\n", "", "if", "cause2", "is", "not", "None", ":", "\n", "        ", "if", "not", "len", "(", "cause2", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ">=", "2", ":", "\n", "            ", "cshape2", "=", "cause2", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "raise", "ValueError", "(", "'cause and cause2 must have len(shape)>=2. shape was %r'", "%", "(", "cshape2", ")", ")", "\n", "", "", "if", "cause3", "is", "not", "None", ":", "\n", "        ", "if", "not", "len", "(", "cause3", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ">=", "2", ":", "\n", "            ", "cshape3", "=", "cause3", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "raise", "ValueError", "(", "'cause and cause3 must have len(shape)>=2. shape was %r'", "%", "(", "cshape3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.next": [[107, 109], ["[].data.numpy", "loader.next"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.next"], ["#Start", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "if", "cause2", "is", "not", "None", "and", "cause3", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.to_nhwc": [[110, 117], ["models.nchw_to_nhwc"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.nchw_to_nhwc"], ["            ", "inputs", "=", "[", "tf", ".", "ones_like", "(", "cause", ")", ",", "cause", ",", "cause2", ",", "cause3", "]", "\n", "", "if", "cause2", "is", "not", "None", "and", "cause3", "is", "None", ":", "\n", "            ", "inputs", "=", "[", "tf", ".", "ones_like", "(", "cause", ")", ",", "cause", ",", "cause2", "]", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "[", "tf", ".", "ones_like", "(", "cause", ")", ",", "cause", "]", "\n", "", "dim", "=", "len", "(", "inputs", ")", "#2 or 3 or 4", "\n", "\n", "C", "=", "np", ".", "random", ".", "rand", "(", "1", ",", "dim", ",", "dim", ",", "dim", ")", ".", "astype", "(", "np", ".", "float32", ")", "#unif", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.to_nchw_numpy": [[118, 124], ["image.transpose"], "function", ["None"], ["C", "=", "2", "*", "C", "-", "1", "#unif[-1,1]", "\n", "\n", "n", "=", "200", "\n", "N", "=", "n", "**", "(", "dim", "-", "1", ")", "\n", "grids", "=", "np", ".", "mgrid", "[", "[", "slice", "(", "0", ",", "1", ",", "1.", "/", "n", ")", "for", "i", "in", "inputs", "[", "1", ":", "]", "]", "]", "\n", "y", "=", "np", ".", "hstack", "(", "[", "np", ".", "ones", "(", "(", "N", ",", "1", ")", ")", "]", "+", "[", "g", ".", "reshape", "(", "N", ",", "1", ")", "for", "g", "in", "grids", "]", ")", "\n", "y1", "=", "np", ".", "reshape", "(", "y", ",", "[", "N", ",", "-", "1", ",", "1", ",", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.norm_img": [[125, 130], ["models.to_nhwc"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.to_nhwc"], ["y2", "=", "np", ".", "reshape", "(", "y", ",", "[", "N", ",", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "y3", "=", "np", ".", "reshape", "(", "y", ",", "[", "N", ",", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "\n", "test_poly", "=", "np", ".", "sum", "(", "y1", "*", "y2", "*", "y3", "*", "C", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "Cmin", "=", "np", ".", "min", "(", "test_poly", ")", "\n", "Cmax", "=", "np", ".", "max", "(", "test_poly", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.denorm_img": [[131, 133], ["tensorflow.clip_by_value", "models.to_nhwc"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.to_nhwc"], ["#normalize [0,1]->[0,1]", "\n", "C", "[", "0", ",", "0", ",", "0", ",", "0", "]", "-=", "Cmin", "\n", "C", "/=", "(", "Cmax", "-", "Cmin", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.slerp": [[134, 141], ["numpy.arccos", "numpy.sin", "numpy.clip", "numpy.dot", "numpy.sin", "numpy.sin", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["\n", "coeff", "=", "tf", ".", "Variable", "(", "C", ",", "name", "=", "'coef'", ",", "trainable", "=", "False", ")", "\n", "\n", "#M=cause.get_shape.as_list()[0]", "\n", "x", "=", "tf", ".", "concat", "(", "inputs", ",", "axis", "=", "1", ")", "\n", "x1", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "dim", ",", "1", ",", "1", "]", ")", "\n", "x2", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "1", ",", "dim", ",", "1", "]", ")", "\n", "x3", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "1", ",", "1", ",", "dim", "]", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.int_shape": [[142, 145], ["tensor.get_shape().as_list", "tensor.get_shape"], "function", ["None"], ["\n", "poly", "=", "tf", ".", "reduce_sum", "(", "x1", "*", "x2", "*", "x3", "*", "coeff", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "return", "tf", ".", "reshape", "(", "poly", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.get_conv_shape": [[146, 153], ["models.int_shape"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.int_shape"], ["\n", "", "", "class", "CompleteArrows", "(", "Arrows", ")", ":", "# Data generated from the causal graph X1->X2->X3", "\n", "    ", "name", "=", "'complete'", "\n", "def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "X1", "=", "poly", "(", "self", ".", "e1", ",", "name", "=", "'X1'", ")", "\n", "#self.X2=0.5*poly(self.X1,name='X1cX2')+0.5*self.e2", "\n", "#self.X3=0.5*poly(self.X1,self.X2,name='X1X2cX3')+0.5*self.e3", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.nchw_to_nhwc": [[154, 156], ["tensorflow.transpose"], "function", ["None"], ["self", ".", "X2", "=", "poly", "(", "self", ".", "X1", ",", "self", ".", "e2", ",", "name", "=", "'X1cX2'", ")", "\n", "self", ".", "X3", "=", "poly", "(", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "e3", ",", "name", "=", "'X1X2cX3'", ")", "\n", "self", ".", "X", "=", "tf", ".", "concat", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "X3", "]", ",", "axis", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.nhwc_to_nchw": [[157, 159], ["tensorflow.transpose"], "function", ["None"], ["self", ".", "X", "=", "self", ".", "normalize_output", "(", "self", ".", "X", ")", "\n", "#print 'completearrowX.shape:',self.X.get_shape().as_list()", "\n", "", "", "", "class", "CompleteGenerator", "(", "Generator", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape": [[160, 166], ["tensorflow.reshape", "tensorflow.reshape"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape"], ["    ", "name", "=", "'complete'", "\n", "def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "z", "=", "tf", ".", "random_uniform", "(", "(", "self", ".", "N", ",", "self", ".", "x_dim", "*", "self", ".", "z_dim", ")", ",", "0", ",", "1", ",", "name", "=", "'z'", ")", "\n", "z1", ",", "z2", ",", "z3", "=", "tf", ".", "split", "(", "self", ".", "z", ",", "3", ",", "axis", "=", "1", ")", "#3=x_dim", "\n", "self", ".", "X1", "=", "self", ".", "smallNN", "(", "z1", ",", "'X1'", ")", "\n", "self", ".", "X2", "=", "self", ".", "smallNN", "(", "[", "self", ".", "X1", ",", "z2", "]", ",", "'X1cX2'", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.resize_nearest_neighbor": [[167, 175], ["models.nchw_to_nhwc", "tensorflow.image.resize_nearest_neighbor", "models.nhwc_to_nchw", "tensorflow.image.resize_nearest_neighbor"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.nchw_to_nhwc", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.resize_nearest_neighbor", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.nhwc_to_nchw", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.resize_nearest_neighbor"], ["self", ".", "X3", "=", "self", ".", "smallNN", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "z3", "]", ",", "'X1X2cX3'", ")", "\n", "self", ".", "X", "=", "tf", ".", "concat", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "X3", "]", ",", "axis", "=", "1", ")", "\n", "#print 'completegenX.shape:',self.X.get_shape().as_list()", "\n", "\n", "", "", "", "class", "ColliderArrows", "(", "Arrows", ")", ":", "\n", "    ", "name", "=", "'collider'", "\n", "def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "X1", "=", "poly", "(", "self", ".", "e1", ",", "name", "=", "'X1'", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.upscale": [[176, 179], ["models.get_conv_shape", "models.resize_nearest_neighbor"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.get_conv_shape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.resize_nearest_neighbor"], ["self", ".", "X3", "=", "poly", "(", "self", ".", "e3", ",", "name", "=", "'X3'", ")", "\n", "#self.X2=0.5*poly(self.X1,self.X3,name='X1X3cX2')+0.5*self.e2", "\n", "self", ".", "X2", "=", "poly", "(", "self", ".", "X1", ",", "self", ".", "X3", ",", "self", ".", "e2", ",", "name", "=", "'X1X3cX2'", ")", "\n", "self", ".", "X", "=", "tf", ".", "concat", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "X3", "]", ",", "axis", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.average_gradients": [[183, 216], ["zip", "tensorflow.concat", "tensorflow.reduce_mean", "average_grads.append", "tensorflow.expand_dims", "grads.append"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat"], ["def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "z", "=", "tf", ".", "random_uniform", "(", "(", "self", ".", "N", ",", "self", ".", "x_dim", "*", "self", ".", "z_dim", ")", ",", "0", ",", "1", ",", "name", "=", "'z'", ")", "\n", "z1", ",", "z2", ",", "z3", "=", "tf", ".", "split", "(", "self", ".", "z", ",", "3", ",", "axis", "=", "1", ")", "#3=x_dim", "\n", "self", ".", "X1", "=", "self", ".", "smallNN", "(", "z1", ",", "'X1'", ")", "\n", "self", ".", "X3", "=", "self", ".", "smallNN", "(", "z3", ",", "'X3'", ")", "\n", "self", ".", "X2", "=", "self", ".", "smallNN", "(", "[", "self", ".", "X1", ",", "self", ".", "X3", ",", "z2", "]", ",", "'X1X3cX2'", ")", "\n", "self", ".", "X", "=", "tf", ".", "concat", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "X3", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "", "class", "LinearArrows", "(", "Arrows", ")", ":", "\n", "    ", "name", "=", "'linear'", "\n", "def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "X1", "=", "poly", "(", "self", ".", "e1", ",", "name", "=", "'X1'", ")", "\n", "#self.X2=0.5*poly(self.X1,name='X2')+0.5*self.e2", "\n", "#self.X3=0.5*poly(self.X2,name='X3')+0.5*self.e3", "\n", "self", ".", "X2", "=", "poly", "(", "self", ".", "X1", ",", "self", ".", "e2", ",", "name", "=", "'X2'", ")", "\n", "self", ".", "X3", "=", "poly", "(", "self", ".", "X2", ",", "self", ".", "e3", ",", "name", "=", "'X3'", ")", "\n", "self", ".", "X", "=", "tf", ".", "concat", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "X3", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "X", "=", "self", ".", "normalize_output", "(", "self", ".", "X", ")", "\n", "", "", "", "class", "LinearGenerator", "(", "Generator", ")", ":", "\n", "    ", "name", "=", "'linear'", "\n", "def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "z", "=", "tf", ".", "random_uniform", "(", "(", "self", ".", "N", ",", "self", ".", "x_dim", "*", "self", ".", "z_dim", ")", ",", "0", ",", "1", ",", "name", "=", "'z'", ")", "\n", "z1", ",", "z2", ",", "z3", "=", "tf", ".", "split", "(", "self", ".", "z", ",", "3", ",", "axis", "=", "1", ")", "#3=x_dim", "\n", "self", ".", "X1", "=", "self", ".", "smallNN", "(", "z1", ",", "'X1'", ")", "\n", "self", ".", "X2", "=", "self", ".", "smallNN", "(", "[", "self", ".", "X1", ",", "z2", "]", ",", "'X2'", ")", "\n", "self", ".", "X3", "=", "self", ".", "smallNN", "(", "[", "self", ".", "X2", ",", "z3", "]", ",", "'X3'", ")", "\n", "self", ".", "X", "=", "tf", ".", "concat", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "X3", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "", "class", "NetworkArrows", "(", "Arrows", ")", ":", "\n", "    ", "name", "=", "'network'", "\n", "def", "build", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.config.str2bool": [[4, 7], ["v.lower"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "#return (v is True) or (v.lower() in ('true', '1'))", "\n", "    ", "return", "v", "is", "True", "or", "v", ".", "lower", "(", ")", "in", "(", "'true'", ",", "'1'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.config.add_argument_group": [[11, 15], ["parser.add_argument_group", "arg_lists.append"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.config.add_argument_group"], ["def", "add_argument_group", "(", "name", ")", ":", "\n", "    ", "arg", "=", "parser", ".", "add_argument_group", "(", "name", ")", "\n", "arg_lists", ".", "append", "(", "arg", ")", "\n", "return", "arg", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.config.gpu_logic": [[100, 109], ["None"], "function", ["None"], ["misc_arg", ".", "add_argument", "(", "'--log_level'", ",", "type", "=", "str", ",", "default", "=", "'INFO'", ",", "choices", "=", "[", "'INFO'", ",", "'DEBUG'", ",", "'WARN'", "]", ")", "\n", "misc_arg", ".", "add_argument", "(", "'--log_dir'", ",", "type", "=", "str", ",", "default", "=", "'logs'", ",", "help", "=", "'''where to store model and model results. Do not put a leading \"./\" out front'''", ")", "\n", "\n", "#misc_arg.add_argument('--sample_per_image', type=int, default=64,", "\n", "#                      help='# of sample per image during test sample generation')", "\n", "\n", "misc_arg", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "22", ",", "help", "=", "\n", "'''Not working right now: TF seed should be fixed to make sure exogenous noise for each causal node is fixed also'''", ")", "\n", "\n", "#Doesn't do anything atm", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.config.get_config": [[111, 127], ["parser.parse_known_args", "config.gpu_logic", "setattr", "print"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.config.gpu_logic"], ["\n", "\n", "def", "gpu_logic", "(", "config", ")", ":", "\n", "\n", "#consistency between use_gpu and num_gpu", "\n", "    ", "if", "config", ".", "num_gpu", ">", "0", ":", "\n", "        ", "config", ".", "use_gpu", "=", "True", "\n", "", "else", ":", "\n", "        ", "config", ".", "use_gpu", "=", "False", "\n", "#        if config.use_gpu and config.num_gpu==0:", "\n", "#            config.num_gpu=1", "\n", "", "return", "config", "\n", "\n", "\n", "", "def", "get_config", "(", ")", ":", "\n", "    ", "config", ",", "unparsed", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "config", "=", "gpu_logic", "(", "config", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.CausalBEGAN.CausalBEGAN.__init__": [[31, 88], ["tf.Variable", "tf.Variable", "tf.Variable", "tf.assign", "tf.assign", "dict", "tf.get_variable", "tf.get_variable", "tf.get_variable", "optimizer", "optimizer"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "config", ")", ":", "\n", "        ", "'''\n        batch_size: again a tensorflow placeholder\n        config    : see causal_began/config.py\n        '''", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "#a tensor", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "use_gpu", "=", "config", ".", "use_gpu", "\n", "self", ".", "data_format", "=", "self", ".", "config", ".", "data_format", "#NHWC or NCHW", "\n", "self", ".", "TINY", "=", "10", "**", "-", "6", "\n", "\n", "#number of calls to self.g_optim", "\n", "self", ".", "step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "'step'", ",", "trainable", "=", "False", ")", "\n", "\n", "#optimizers", "\n", "self", ".", "g_lr", "=", "tf", ".", "Variable", "(", "config", ".", "g_lr", ",", "name", "=", "'g_lr'", ")", "\n", "self", ".", "d_lr", "=", "tf", ".", "Variable", "(", "config", ".", "d_lr", ",", "name", "=", "'d_lr'", ")", "\n", "\n", "self", ".", "g_lr_update", "=", "tf", ".", "assign", "(", "self", ".", "g_lr", ",", "self", ".", "g_lr", "*", "0.5", ",", "name", "=", "'g_lr_update'", ")", "\n", "self", ".", "d_lr_update", "=", "tf", ".", "assign", "(", "self", ".", "d_lr", ",", "self", ".", "d_lr", "*", "0.5", ",", "name", "=", "'d_lr_update'", ")", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "\n", "self", ".", "g_optimizer", ",", "self", ".", "d_optimizer", "=", "optimizer", "(", "self", ".", "g_lr", ")", ",", "optimizer", "(", "self", ".", "d_lr", ")", "\n", "\n", "self", ".", "lambda_k", "=", "config", ".", "lambda_k", "\n", "self", ".", "lambda_l", "=", "config", ".", "lambda_l", "\n", "self", ".", "lambda_z", "=", "config", ".", "lambda_z", "\n", "self", ".", "gamma", "=", "config", ".", "gamma", "\n", "self", ".", "gamma_label", "=", "config", ".", "gamma_label", "\n", "self", ".", "zeta", "=", "config", ".", "zeta", "\n", "self", ".", "z_dim", "=", "config", ".", "z_dim", "\n", "self", ".", "conv_hidden_num", "=", "config", ".", "conv_hidden_num", "\n", "\n", "self", ".", "model_dir", "=", "config", ".", "model_dir", "\n", "\n", "self", ".", "start_step", "=", "0", "\n", "self", ".", "log_step", "=", "config", ".", "log_step", "\n", "self", ".", "max_step", "=", "config", ".", "max_step", "\n", "self", ".", "lr_update_step", "=", "config", ".", "lr_update_step", "\n", "self", ".", "is_train", "=", "config", ".", "is_train", "\n", "\n", "#Keeps track of params from different devices", "\n", "self", ".", "tower_dict", "=", "dict", "(", "\n", "c_tower_grads", "=", "[", "]", ",", "\n", "dcc_tower_grads", "=", "[", "]", ",", "\n", "g_tower_grads", "=", "[", "]", ",", "\n", "d_tower_grads", "=", "[", "]", ",", "\n", "tower_g_loss_image", "=", "[", "]", ",", "\n", "tower_d_loss_real", "=", "[", "]", ",", "\n", "tower_g_loss_label", "=", "[", "]", ",", "\n", "tower_d_loss_real_label", "=", "[", "]", ",", "\n", "tower_d_loss_fake_label", "=", "[", "]", ",", "\n", ")", "\n", "self", ".", "k_t", "=", "tf", ".", "get_variable", "(", "name", "=", "'k_t'", ",", "initializer", "=", "0.", ",", "trainable", "=", "False", ")", "\n", "self", ".", "l_t", "=", "tf", ".", "get_variable", "(", "name", "=", "'l_t'", ",", "initializer", "=", "0.", ",", "trainable", "=", "False", ")", "\n", "self", ".", "z_t", "=", "tf", ".", "get_variable", "(", "name", "=", "'z_t'", ",", "initializer", "=", "0.", ",", "trainable", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.CausalBEGAN.CausalBEGAN.__call__": [[89, 247], ["len", "CausalBEGAN.CausalBEGAN.real_inputs.pop", "models.get_conv_shape", "models.norm_img", "tf.concat", "tf.concat", "tf.random_uniform", "models.GeneratorCNN", "models.DiscriminatorCNN", "tf.split", "tf.split", "tf.sigmoid", "tf.sigmoid", "tf.split", "tf.split", "CausalBEGAN.CausalBEGAN.__call__.sxe"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.get_conv_shape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.norm_img", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.GeneratorCNN", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.DiscriminatorCNN", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.synthetic.models.sxe"], ["", "def", "__call__", "(", "self", ",", "real_inputs", ",", "fake_inputs", ")", ":", "\n", "        ", "'''\n        in a multi gpu setting, self.__call__ is done once for every device with variables shared so\n        that a copy of the tensorflow variables created in self.__call__ resides on\n        each device. This would be run multiple times in a loop over devices.\n\n        Parameters:\n        fake inputs : a dictionary of labels from cc\n        real_inputs : also a dictionary of labels\n                      with an additional key 'x' for the real image\n        '''", "\n", "config", "=", "self", ".", "config", "\n", "\n", "#The keys are all the labels union 'x'", "\n", "self", ".", "real_inputs", "=", "real_inputs", "\n", "self", ".", "fake_inputs", "=", "fake_inputs", "\n", "n_labels", "=", "len", "(", "fake_inputs", ")", "#number of labels in graph, not dataset", "\n", "\n", "#[0,255] NHWC", "\n", "self", ".", "x", "=", "self", ".", "real_inputs", ".", "pop", "(", "'x'", ")", "\n", "\n", "#used to change dataformat in data queue", "\n", "if", "self", ".", "data_format", "==", "'NCHW'", ":", "\n", "#self.x = tf.transpose(self.x, [2, 0, 1])#3D", "\n", "            ", "self", ".", "x", "=", "tf", ".", "transpose", "(", "self", ".", "x", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "#4D", "\n", "", "elif", "self", ".", "data_format", "==", "'NHWC'", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"[!] Unkown data_format: {}\"", ".", "format", "(", "self", ".", "data_format", ")", ")", "\n", "\n", "", "_", ",", "height", ",", "width", ",", "self", ".", "channel", "=", "get_conv_shape", "(", "self", ".", "x", ",", "self", ".", "data_format", ")", "\n", "self", ".", "config", ".", "repeat_num", "=", "int", "(", "np", ".", "log2", "(", "height", ")", ")", "-", "2", "\n", "self", ".", "config", ".", "channel", "=", "self", ".", "channel", "\n", "\n", "#There are two versions: \"x\" and \"self.x\".", "\n", "#    \"x\" is normalized for computation", "\n", "#    \"self.x\" is unnormalized for saving and summaries", "\n", "#    likewise for \"G\" and \"self.G\"", "\n", "#x in [-1,1]", "\n", "x", "=", "norm_img", "(", "self", ".", "x", ")", "\n", "\n", "self", ".", "real_labels", "=", "tf", ".", "concat", "(", "self", ".", "real_inputs", ".", "values", "(", ")", ",", "-", "1", ")", "\n", "self", ".", "fake_labels", "=", "tf", ".", "concat", "(", "self", ".", "fake_inputs", ".", "values", "(", ")", ",", "-", "1", ")", "\n", "\n", "#noise given to generate image in addition to labels", "\n", "self", ".", "z_gen", "=", "tf", ".", "random_uniform", "(", "\n", "(", "self", ".", "batch_size", ",", "self", ".", "z_dim", ")", ",", "minval", "=", "-", "1.0", ",", "maxval", "=", "1.0", ")", "\n", "\n", "if", "self", ".", "config", ".", "round_fake_labels", ":", "#default", "\n", "            ", "self", ".", "z", "=", "tf", ".", "concat", "(", "[", "tf", ".", "round", "(", "self", ".", "fake_labels", ")", ",", "self", ".", "z_gen", "]", ",", "axis", "=", "-", "1", ",", "name", "=", "'z'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "z", "=", "tf", ".", "concat", "(", "[", "self", ".", "fake_labels", ",", "self", ".", "z_gen", "]", ",", "axis", "=", "-", "1", ",", "name", "=", "'z'", ")", "\n", "\n", "", "G", ",", "self", ".", "G_var", "=", "GeneratorCNN", "(", "self", ".", "z", ",", "config", ")", "\n", "d_out", ",", "self", ".", "D_z", ",", "self", ".", "D_var", "=", "DiscriminatorCNN", "(", "tf", ".", "concat", "(", "[", "G", ",", "x", "]", ",", "0", ")", ",", "config", ")", "\n", "AE_G", ",", "AE_x", "=", "tf", ".", "split", "(", "d_out", ",", "2", ")", "\n", "self", ".", "D_encode_G", ",", "self", ".", "D_encode_x", "=", "tf", ".", "split", "(", "self", ".", "D_z", ",", "2", ")", "#axis=0 by default", "\n", "\n", "if", "not", "self", ".", "config", ".", "separate_labeler", ":", "\n", "            ", "self", ".", "D_fake_labels_logits", "=", "tf", ".", "slice", "(", "self", ".", "D_encode_G", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "n_labels", "]", ")", "\n", "self", ".", "D_real_labels_logits", "=", "tf", ".", "slice", "(", "self", ".", "D_encode_x", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "n_labels", "]", ")", "\n", "", "else", ":", "#default", "\n", "            ", "self", ".", "D_fake_labels_logits", ",", "self", ".", "DL_var", "=", "Discriminator_labeler", "(", "G", ",", "n_labels", ",", "config", ")", "\n", "self", ".", "D_real_labels_logits", ",", "_", "=", "Discriminator_labeler", "(", "x", ",", "n_labels", ",", "config", ",", "reuse", "=", "True", ")", "\n", "self", ".", "D_var", "+=", "self", ".", "DL_var", "\n", "\n", "", "self", ".", "D_real_labels", "=", "tf", ".", "sigmoid", "(", "self", ".", "D_real_labels_logits", ")", "\n", "self", ".", "D_fake_labels", "=", "tf", ".", "sigmoid", "(", "self", ".", "D_fake_labels_logits", ")", "\n", "self", ".", "D_real_labels_list", "=", "tf", ".", "split", "(", "self", ".", "D_real_labels", ",", "n_labels", ",", "axis", "=", "1", ")", "\n", "self", ".", "D_fake_labels_list", "=", "tf", ".", "split", "(", "self", ".", "D_fake_labels", ",", "n_labels", ",", "axis", "=", "1", ")", "\n", "\n", "# sigmoid_cross_entropy_with_logits", "\n", "def", "sxe", "(", "logits", ",", "labels", ")", ":", "\n", "#use zeros or ones if pass in scalar", "\n", "            ", "if", "not", "isinstance", "(", "labels", ",", "tf", ".", "Tensor", ")", ":", "\n", "                ", "labels", "=", "labels", "*", "tf", ".", "ones_like", "(", "logits", ")", "\n", "", "return", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "\n", "\n", "#Round fake labels before calc loss", "\n", "", "if", "self", ".", "config", ".", "round_fake_labels", ":", "#default", "\n", "            ", "fake_labels", "=", "tf", ".", "round", "(", "self", ".", "fake_labels", ")", "\n", "", "else", ":", "\n", "            ", "fake_labels", "=", "self", ".", "fake_labels", "\n", "\n", "#This is here because it's used in cross_entropy calc, but it's not used by default", "\n", "", "self", ".", "fake_labels_logits", "=", "-", "tf", ".", "log", "(", "1", "/", "(", "self", ".", "fake_labels", "+", "self", ".", "TINY", ")", "-", "1", ")", "\n", "\n", "#One of three label losses available", "\n", "# Default is squared loss, \"squarediff\"", "\n", "self", ".", "d_xe_real_label", "=", "sxe", "(", "self", ".", "D_real_labels_logits", ",", "self", ".", "real_labels", ")", "\n", "self", ".", "d_xe_fake_label", "=", "sxe", "(", "self", ".", "D_fake_labels_logits", ",", "fake_labels", ")", "\n", "self", ".", "g_xe_label", "=", "sxe", "(", "self", ".", "fake_labels_logits", ",", "self", ".", "D_fake_labels", ")", "\n", "\n", "self", ".", "d_absdiff_real_label", "=", "tf", ".", "abs", "(", "self", ".", "D_real_labels", "-", "self", ".", "real_labels", ")", "\n", "self", ".", "d_absdiff_fake_label", "=", "tf", ".", "abs", "(", "self", ".", "D_fake_labels", "-", "fake_labels", ")", "\n", "self", ".", "g_absdiff_label", "=", "tf", ".", "abs", "(", "fake_labels", "-", "self", ".", "D_fake_labels", ")", "\n", "\n", "self", ".", "d_squarediff_real_label", "=", "tf", ".", "square", "(", "self", ".", "D_real_labels", "-", "self", ".", "real_labels", ")", "\n", "self", ".", "d_squarediff_fake_label", "=", "tf", ".", "square", "(", "self", ".", "D_fake_labels", "-", "fake_labels", ")", "\n", "self", ".", "g_squarediff_label", "=", "tf", ".", "square", "(", "fake_labels", "-", "self", ".", "D_fake_labels", ")", "\n", "\n", "if", "self", ".", "config", ".", "label_loss", "==", "'xe'", ":", "\n", "            ", "self", ".", "d_loss_real_label", "=", "tf", ".", "reduce_mean", "(", "self", ".", "d_xe_real_label", ")", "\n", "self", ".", "d_loss_fake_label", "=", "tf", ".", "reduce_mean", "(", "self", ".", "d_xe_fake_label", ")", "\n", "self", ".", "g_loss_label", "=", "tf", ".", "reduce_mean", "(", "self", ".", "g_xe_label", ")", "\n", "", "elif", "self", ".", "config", ".", "label_loss", "==", "'absdiff'", ":", "\n", "            ", "self", ".", "d_loss_real_label", "=", "tf", ".", "reduce_mean", "(", "self", ".", "d_absdiff_real_label", ")", "\n", "self", ".", "d_loss_fake_label", "=", "tf", ".", "reduce_mean", "(", "self", ".", "d_absdiff_fake_label", ")", "\n", "self", ".", "g_loss_label", "=", "tf", ".", "reduce_mean", "(", "self", ".", "g_absdiff_label", ")", "\n", "", "elif", "self", ".", "config", ".", "label_loss", "==", "'squarediff'", ":", "\n", "            ", "self", ".", "d_loss_real_label", "=", "tf", ".", "reduce_mean", "(", "self", ".", "d_squarediff_real_label", ")", "\n", "self", ".", "d_loss_fake_label", "=", "tf", ".", "reduce_mean", "(", "self", ".", "d_squarediff_fake_label", ")", "\n", "self", ".", "g_loss_label", "=", "tf", ".", "reduce_mean", "(", "self", ".", "g_squarediff_label", ")", "\n", "\n", "#\"self.G\" is [0,255], \"G\" is [-1,1]", "\n", "", "self", ".", "G", "=", "denorm_img", "(", "G", ",", "self", ".", "data_format", ")", "\n", "self", ".", "AE_G", ",", "self", ".", "AE_x", "=", "denorm_img", "(", "AE_G", ",", "self", ".", "data_format", ")", ",", "denorm_img", "(", "AE_x", ",", "self", ".", "data_format", ")", "\n", "\n", "u1", "=", "tf", ".", "abs", "(", "AE_x", "-", "x", ")", "\n", "u2", "=", "tf", ".", "abs", "(", "AE_G", "-", "G", ")", "\n", "m1", "=", "tf", ".", "reduce_mean", "(", "u1", ")", "\n", "m2", "=", "tf", ".", "reduce_mean", "(", "u2", ")", "\n", "c1", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "u1", "-", "m1", ")", ")", "\n", "c2", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "u2", "-", "m2", ")", ")", "\n", "self", ".", "eqn2", "=", "tf", ".", "square", "(", "m1", "-", "m2", ")", "#from orig began paper", "\n", "self", ".", "eqn1", "=", "(", "c1", "+", "c2", "-", "2", "*", "tf", ".", "sqrt", "(", "c1", "*", "c2", ")", ")", "/", "self", ".", "eqn2", "#from orig began paper", "\n", "\n", "self", ".", "d_loss_real", "=", "tf", ".", "reduce_mean", "(", "u1", ")", "\n", "self", ".", "d_loss_fake", "=", "tf", ".", "reduce_mean", "(", "u2", ")", "\n", "self", ".", "g_loss_image", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "AE_G", "-", "G", ")", ")", "\n", "\n", "self", ".", "d_loss_image", "=", "self", ".", "d_loss_real", "-", "self", ".", "k_t", "*", "self", ".", "d_loss_fake", "\n", "self", ".", "d_loss_label", "=", "self", ".", "d_loss_real_label", "-", "self", ".", "l_t", "*", "self", ".", "d_loss_fake_label", "\n", "self", ".", "d_loss", "=", "self", ".", "d_loss_image", "+", "self", ".", "d_loss_label", "\n", "\n", "if", "not", "self", ".", "config", ".", "no_third_margin", ":", "#normal mode", "\n", "#Careful on z_t sign!#(z_t <==> c_3 from paper)", "\n", "            ", "self", ".", "g_loss", "=", "self", ".", "g_loss_image", "+", "self", ".", "z_t", "*", "self", ".", "g_loss_label", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Warning: not using third margin'", ")", "\n", "self", ".", "g_loss", "=", "self", ".", "g_loss_image", "+", "1.", "*", "self", ".", "g_loss_label", "\n", "\n", "# Calculate the gradients for the batch of data,", "\n", "# on this particular gpu tower.", "\n", "", "g_grad", "=", "self", ".", "g_optimizer", ".", "compute_gradients", "(", "self", ".", "g_loss", ",", "var_list", "=", "self", ".", "G_var", ")", "\n", "d_grad", "=", "self", ".", "d_optimizer", ".", "compute_gradients", "(", "self", ".", "d_loss", ",", "var_list", "=", "self", ".", "D_var", ")", "\n", "\n", "self", ".", "tower_dict", "[", "'g_tower_grads'", "]", ".", "append", "(", "g_grad", ")", "\n", "self", ".", "tower_dict", "[", "'d_tower_grads'", "]", ".", "append", "(", "d_grad", ")", "\n", "self", ".", "tower_dict", "[", "'tower_g_loss_image'", "]", ".", "append", "(", "self", ".", "g_loss_image", ")", "\n", "self", ".", "tower_dict", "[", "'tower_d_loss_real'", "]", ".", "append", "(", "self", ".", "d_loss_real", ")", "\n", "self", ".", "tower_dict", "[", "'tower_g_loss_label'", "]", ".", "append", "(", "self", ".", "g_loss_label", ")", "\n", "self", ".", "tower_dict", "[", "'tower_d_loss_real_label'", "]", ".", "append", "(", "self", ".", "d_loss_real_label", ")", "\n", "self", ".", "tower_dict", "[", "'tower_d_loss_fake_label'", "]", ".", "append", "(", "self", ".", "d_loss_fake_label", ")", "\n", "\n", "self", ".", "var", "=", "self", ".", "G_var", "+", "self", ".", "D_var", "+", "[", "self", ".", "step", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.CausalBEGAN.CausalBEGAN.build_train_op": [[248, 285], ["tf.reduce_mean", "tf.reduce_mean", "tf.reduce_mean", "tf.reduce_mean", "tf.reduce_mean", "tf.assign", "tf.assign", "tf.assign", "models.average_gradients", "models.average_gradients", "CausalBEGAN.CausalBEGAN.g_optimizer.apply_gradients", "CausalBEGAN.CausalBEGAN.d_optimizer.apply_gradients", "tf.nn.relu", "tf.abs", "tf.abs", "tf.clip_by_value", "tf.clip_by_value", "tf.clip_by_value", "tf.control_dependencies", "tf.group", "tf.nn.relu", "tf.abs", "tf.abs"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.average_gradients", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.average_gradients"], ["", "def", "build_train_op", "(", "self", ")", ":", "\n", "#Now outside gpu loop", "\n", "\n", "#attributes starting with ave_ are averaged over devices", "\n", "        ", "self", ".", "ave_d_loss_real", "=", "tf", ".", "reduce_mean", "(", "self", ".", "tower_dict", "[", "'tower_d_loss_real'", "]", ")", "\n", "self", ".", "ave_g_loss_image", "=", "tf", ".", "reduce_mean", "(", "self", ".", "tower_dict", "[", "'tower_g_loss_image'", "]", ")", "\n", "self", ".", "ave_d_loss_real_label", "=", "tf", ".", "reduce_mean", "(", "self", ".", "tower_dict", "[", "'tower_d_loss_real_label'", "]", ")", "\n", "self", ".", "ave_d_loss_fake_label", "=", "tf", ".", "reduce_mean", "(", "self", ".", "tower_dict", "[", "'tower_d_loss_fake_label'", "]", ")", "\n", "self", ".", "ave_g_loss_label", "=", "tf", ".", "reduce_mean", "(", "self", ".", "tower_dict", "[", "'tower_g_loss_label'", "]", ")", "\n", "\n", "#recalculate balance equations (b1,b2,b3 in paper)", "\n", "self", ".", "balance_k", "=", "self", ".", "gamma", "*", "self", ".", "ave_d_loss_real", "-", "self", ".", "ave_g_loss_image", "\n", "self", ".", "balance_l", "=", "self", ".", "gamma_label", "*", "self", ".", "ave_d_loss_real_label", "-", "self", ".", "ave_d_loss_fake_label", "\n", "self", ".", "balance_z", "=", "self", ".", "zeta", "*", "tf", ".", "nn", ".", "relu", "(", "self", ".", "balance_k", ")", "-", "tf", ".", "nn", ".", "relu", "(", "self", ".", "balance_l", ")", "\n", "\n", "self", ".", "measure", "=", "self", ".", "ave_d_loss_real", "+", "tf", ".", "abs", "(", "self", ".", "balance_k", ")", "\n", "self", ".", "measure_complete", "=", "self", ".", "ave_d_loss_real", "+", "self", ".", "ave_d_loss_real_label", "+", "tf", ".", "abs", "(", "self", ".", "balance_k", ")", "+", "tf", ".", "abs", "(", "self", ".", "balance_l", ")", "+", "tf", ".", "abs", "(", "self", ".", "balance_z", ")", "\n", "\n", "#update margins coefficients (c1,c2,c3 in paper)", "\n", "k_update", "=", "tf", ".", "assign", "(", "\n", "self", ".", "k_t", ",", "tf", ".", "clip_by_value", "(", "self", ".", "k_t", "+", "self", ".", "lambda_k", "*", "self", ".", "balance_k", ",", "0", ",", "1", ")", ")", "\n", "l_update", "=", "tf", ".", "assign", "(", "\n", "self", ".", "l_t", ",", "tf", ".", "clip_by_value", "(", "self", ".", "l_t", "+", "self", ".", "lambda_l", "*", "self", ".", "balance_l", ",", "0", ",", "1", ")", ")", "\n", "z_update", "=", "tf", ".", "assign", "(", "\n", "self", ".", "z_t", ",", "tf", ".", "clip_by_value", "(", "self", ".", "z_t", "+", "self", ".", "lambda_z", "*", "self", ".", "balance_z", ",", "0", ",", "1", ")", ")", "\n", "\n", "g_grads", "=", "average_gradients", "(", "self", ".", "tower_dict", "[", "'g_tower_grads'", "]", ")", "\n", "d_grads", "=", "average_gradients", "(", "self", ".", "tower_dict", "[", "'d_tower_grads'", "]", ")", "\n", "\n", "g_optim", "=", "self", ".", "g_optimizer", ".", "apply_gradients", "(", "g_grads", ",", "global_step", "=", "self", ".", "step", ")", "\n", "d_optim", "=", "self", ".", "d_optimizer", ".", "apply_gradients", "(", "d_grads", ")", "\n", "\n", "#every time train_op is run, run k_update, l_update, z_update", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "k_update", ",", "l_update", ",", "z_update", "]", ")", ":", "\n", "#when train_op is run, run [g_optim,d_optim]", "\n", "            ", "self", ".", "train_op", "=", "tf", ".", "group", "(", "g_optim", ",", "d_optim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.CausalBEGAN.CausalBEGAN.train_step": [[286, 291], ["sess.run", "sess.run"], "methods", ["None"], ["", "", "def", "train_step", "(", "self", ",", "sess", ",", "counter", ")", ":", "\n", "        ", "sess", ".", "run", "(", "self", ".", "train_op", ")", "\n", "\n", "if", "counter", "%", "self", ".", "config", ".", "lr_update_step", "==", "self", ".", "lr_update_step", "-", "1", ":", "\n", "            ", "sess", ".", "run", "(", "[", "self", ".", "g_lr_update", ",", "self", ".", "d_lr_update", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.CausalBEGAN.CausalBEGAN.build_summary_op": [[292, 348], ["zip", "zip", "zip", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.merge_all", "tf.reduce_mean", "tf.reduce_mean", "tf.summary.image", "tf.summary.image", "tf.summary.image", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "CausalBEGAN.CausalBEGAN.real_inputs.items", "CausalBEGAN.CausalBEGAN.fake_inputs.items", "tf.name_scope", "tf.cast", "tf.cast", "tf.contrib.metrics.accuracy", "tf.contrib.metrics.accuracy", "utils.summary_stats", "utils.summary_stats", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.summary.scalar", "tf.round", "tf.round", "tf.cast", "tf.cast", "tf.reduce_mean", "tf.reduce_mean", "tf.reduce_mean", "tf.round", "tf.round", "tf.abs", "tf.abs"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats"], ["", "", "def", "build_summary_op", "(", "self", ")", ":", "\n", "        ", "names", ",", "real_labels_list", "=", "zip", "(", "*", "self", ".", "real_inputs", ".", "items", "(", ")", ")", "\n", "_", ",", "fake_labels_list", "=", "zip", "(", "*", "self", ".", "fake_inputs", ".", "items", "(", ")", ")", "\n", "LabelList", "=", "[", "names", ",", "real_labels_list", ",", "fake_labels_list", ",", "\n", "self", ".", "D_fake_labels_list", ",", "self", ".", "D_real_labels_list", "]", "\n", "for", "name", ",", "rlabel", ",", "flabel", ",", "d_fake_label", ",", "d_real_label", "in", "zip", "(", "*", "LabelList", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "\n", "                ", "d_flabel", "=", "tf", ".", "cast", "(", "tf", ".", "round", "(", "d_fake_label", ")", ",", "tf", ".", "int32", ")", "\n", "d_rlabel", "=", "tf", ".", "cast", "(", "tf", ".", "round", "(", "d_real_label", ")", ",", "tf", ".", "int32", ")", "\n", "f_acc", "=", "tf", ".", "contrib", ".", "metrics", ".", "accuracy", "(", "tf", ".", "cast", "(", "tf", ".", "round", "(", "flabel", ")", ",", "tf", ".", "int32", ")", ",", "d_flabel", ")", "\n", "r_acc", "=", "tf", ".", "contrib", ".", "metrics", ".", "accuracy", "(", "tf", ".", "cast", "(", "tf", ".", "round", "(", "rlabel", ")", ",", "tf", ".", "int32", ")", ",", "d_rlabel", ")", "\n", "\n", "summary_stats", "(", "'d_fake_label'", ",", "d_fake_label", ",", "hist", "=", "True", ")", "\n", "summary_stats", "(", "'d_real_label'", ",", "d_real_label", ",", "hist", "=", "True", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'ave_d_fake_abs_diff'", ",", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "flabel", "-", "d_fake_label", ")", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'ave_d_real_abs_diff'", ",", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "rlabel", "-", "d_real_label", ")", ")", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'real_label_ave'", ",", "tf", ".", "reduce_mean", "(", "rlabel", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'real_label_accuracy'", ",", "r_acc", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'fake_label_accuracy'", ",", "f_acc", ")", "\n", "\n", "##Summaries picked from last gpu to run", "\n", "", "", "tf", ".", "summary", ".", "scalar", "(", "'losslabel/d_loss_real_label'", ",", "tf", ".", "reduce_mean", "(", "self", ".", "ave_d_loss_real_label", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'losslabel/d_loss_fake_label'", ",", "tf", ".", "reduce_mean", "(", "self", ".", "ave_d_loss_fake_label", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'losslabel/g_loss_label'", ",", "self", ".", "g_loss_label", ")", "\n", "\n", "tf", ".", "summary", ".", "image", "(", "\"G\"", ",", "self", ".", "G", ")", ",", "\n", "tf", ".", "summary", ".", "image", "(", "\"AE_G\"", ",", "self", ".", "AE_G", ")", ",", "\n", "tf", ".", "summary", ".", "image", "(", "\"AE_x\"", ",", "self", ".", "AE_x", ")", ",", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/d_loss\"", ",", "self", ".", "d_loss", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/d_loss_fake\"", ",", "self", ".", "d_loss_fake", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/g_loss\"", ",", "self", ".", "g_loss", ")", ",", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"misc/d_lr\"", ",", "self", ".", "d_lr", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"misc/g_lr\"", ",", "self", ".", "g_lr", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"misc/eqn1\"", ",", "self", ".", "eqn1", ")", ",", "#From orig BEGAN paper", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"misc/eqn2\"", ",", "self", ".", "eqn2", ")", ",", "#From orig BEGAN paper", "\n", "\n", "#summaries of gpu-averaged values", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/d_loss_real\"", ",", "self", ".", "ave_d_loss_real", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/g_loss_image\"", ",", "self", ".", "ave_g_loss_image", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"balance/l\"", ",", "self", ".", "balance_l", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"balance/k\"", ",", "self", ".", "balance_k", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"balance/z\"", ",", "self", ".", "balance_z", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"misc/measure\"", ",", "self", ".", "measure", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"misc/measure_complete\"", ",", "self", ".", "measure_complete", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"misc/k_t\"", ",", "self", ".", "k_t", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"misc/l_t\"", ",", "self", ".", "l_t", ")", ",", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"misc/z_t\"", ",", "self", ".", "z_t", ")", ",", "\n", "\n", "#doesn't include summaries from causal controller", "\n", "#TODO: rework so only 1 copy of summaries if multiple gpu", "\n", "self", ".", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.make_summary": [[16, 18], ["tensorflow.core.framework.summary_pb2.Summary", "tensorflow.core.framework.summary_pb2.Summary.Value"], "function", ["None"], ["from", "tensorflow", ".", "core", ".", "framework", "import", "summary_pb2", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.summary_stats": [[19, 27], ["tensorflow.reduce_mean", "tensorflow.sqrt", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.reduce_mean", "tensorflow.summary.histogram", "tensorflow.square"], "function", ["None"], ["\n", "def", "make_summary", "(", "name", ",", "val", ")", ":", "\n", "    ", "return", "summary_pb2", ".", "Summary", "(", "value", "=", "[", "summary_pb2", ".", "Summary", ".", "Value", "(", "tag", "=", "name", ",", "simple_value", "=", "val", ")", "]", ")", "\n", "\n", "", "def", "summary_stats", "(", "name", ",", "tensor", ",", "collections", "=", "None", ",", "hist", "=", "False", ")", ":", "\n", "    ", "collections", "=", "collections", "or", "[", "tf", ".", "GraphKeys", ".", "SUMMARIES", "]", "\n", "ave", "=", "tf", ".", "reduce_mean", "(", "tensor", ")", "\n", "std", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "ave", "-", "tensor", ")", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "name", "+", "'_ave'", ",", "ave", ",", "collections", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.prepare_dirs_and_logger": [[29, 69], ["logging.Formatter", "logging.getLogger", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join", "logging.getLogger.removeHandler", "config.load_path.startswith", "hasattr", "os.path.join", "os.path.join", "os.path.dirname", "config.load_path.startswith", "utils.get_time", "os.path.realpath", "f.endswith", "os.path.exists", "os.makedirs", "os.listdir", "os.path.isfile", "shutil.copy2", "os.path.join"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.get_time"], ["if", "hist", ":", "\n", "        ", "tf", ".", "summary", ".", "histogram", "(", "name", "+", "'_hist'", ",", "tensor", ",", "collections", ")", "\n", "\n", "\n", "", "", "def", "prepare_dirs_and_logger", "(", "config", ")", ":", "\n", "\n", "    ", "if", "config", ".", "load_path", ":", "\n", "        ", "strip_lp", "=", "config", ".", "load_path", ".", "strip", "(", "'./'", ")", "\n", "if", "strip_lp", ".", "startswith", "(", "config", ".", "log_dir", ")", ":", "\n", "            ", "config", ".", "model_dir", "=", "config", ".", "load_path", "\n", "", "else", ":", "\n", "            ", "if", "config", ".", "load_path", ".", "startswith", "(", "config", ".", "dataset", ")", ":", "\n", "                ", "config", ".", "model_name", "=", "config", ".", "load_path", "\n", "", "else", ":", "\n", "                ", "config", ".", "model_name", "=", "\"{}_{}\"", ".", "format", "(", "config", ".", "dataset", ",", "config", ".", "load_path", ")", "\n", "", "", "", "else", ":", "#new model", "\n", "        ", "config", ".", "model_name", "=", "\"{}_{}\"", ".", "format", "(", "config", ".", "dataset", ",", "get_time", "(", ")", ")", "\n", "if", "config", ".", "descrip", ":", "\n", "            ", "config", ".", "model_name", "+=", "'_'", "+", "config", ".", "descrip", "\n", "\n", "\n", "", "", "if", "not", "hasattr", "(", "config", ",", "'model_dir'", ")", ":", "\n", "        ", "config", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "log_dir", ",", "config", ".", "model_name", ")", "\n", "", "config", ".", "data_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_dir", ",", "config", ".", "dataset", ")", "\n", "\n", "\n", "if", "not", "config", ".", "load_path", ":", "\n", "        ", "config", ".", "log_code_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "model_dir", ",", "'code'", ")", "\n", "for", "path", "in", "[", "config", ".", "log_dir", ",", "config", ".", "data_dir", ",", "\n", "config", ".", "model_dir", "]", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "#Copy python code in directory into model_dir/code for future reference:", "\n", "#All python files in this directory are copied.", "\n", "", "", "code_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "sys", ".", "argv", "[", "0", "]", ")", ")", "\n", "\n", "##additionally, all python files in these directories are also copied. Also symlinks are copied. The idea is to allow easier model loading in the future", "\n", "allowed_dirs", "=", "[", "'causal_controller'", ",", "'causal_began'", ",", "'causal_dcgan'", ",", "'figure_scripts'", "]", "\n", "\n", "#ignore copy of all non-*.py except for these directories", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.get_time": [[70, 72], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["#If you make another folder you want copied, you have to add it here", "\n", "ignore_these", "=", "partial", "(", "ignore_except", ",", "allowed_dirs", "=", "allowed_dirs", ")", "\n", "shutil", ".", "copytree", "(", "code_dir", ",", "config", ".", "log_code_dir", ",", "symlinks", "=", "True", ",", "ignore", "=", "ignore_these", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.save_config": [[73, 81], ["os.path.join", "print", "print", "open", "json.dump"], "function", ["None"], ["\n", "\n", "#        model_files = [f for f in listdir(code_dir) if isfile(join(code_dir, f))]", "\n", "#        for f in model_files:", "\n", "#            if f.endswith('.py'):", "\n", "#                shutil.copy2(f,config.log_code_dir)", "\n", "\n", "\n", "", "", "def", "ignore_except", "(", "src", ",", "contents", ",", "allowed_dirs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.get_available_gpus": [[82, 86], ["device_lib.list_local_devices"], "function", ["None"], ["    ", "files", "=", "filter", "(", "os", ".", "path", ".", "isfile", ",", "contents", ")", "\n", "dirs", "=", "filter", "(", "os", ".", "path", ".", "isdir", ",", "contents", ")", "\n", "ignored_files", "=", "[", "f", "for", "f", "in", "files", "if", "not", "f", ".", "endswith", "(", "'.py'", ")", "]", "\n", "ignored_dirs", "=", "[", "d", "for", "d", "in", "dirs", "if", "not", "d", "in", "allowed_dirs", "]", "\n", "return", "ignored_files", "+", "ignored_dirs", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.distribute_input_data": [[87, 112], ["utils.get_available_gpus", "data_loader.items", "len", "ValueError", "tensorflow.split", "zip", "len"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.get_available_gpus", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.items"], ["\n", "", "def", "get_time", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m%d_%H%M%S\"", ")", "\n", "\n", "", "def", "save_configs", "(", "config", ",", "cc_config", ",", "dcgan_config", ",", "began_config", ")", ":", "\n", "    ", "model_dir", "=", "config", ".", "model_dir", "\n", "print", "(", "\"[*] MODEL dir: %s\"", "%", "model_dir", ")", "\n", "save_config", "(", "config", ")", "\n", "save_config", "(", "cc_config", ",", "'cc_params.json'", ",", "model_dir", ")", "\n", "save_config", "(", "dcgan_config", ",", "'dcgan_params.json'", ",", "model_dir", ")", "\n", "save_config", "(", "began_config", ",", "'began_params.json'", ",", "model_dir", ")", "\n", "\n", "\n", "", "def", "save_config", "(", "config", ",", "name", "=", "\"params.json\"", ",", "where", "=", "None", ")", ":", "\n", "    ", "where", "=", "where", "or", "config", ".", "model_dir", "\n", "param_path", "=", "os", ".", "path", ".", "join", "(", "where", ",", "name", ")", "\n", "\n", "print", "(", "\"[*] PARAM path: %s\"", "%", "param_path", ")", "\n", "\n", "with", "open", "(", "param_path", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "config", ".", "__dict__", ",", "fp", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n", "", "", "def", "get_available_gpus", "(", ")", ":", "\n", "    ", "from", "tensorflow", ".", "python", ".", "client", "import", "device_lib", "\n", "local_device_protos", "=", "device_lib", ".", "list_local_devices", "(", ")", "\n", "return", "[", "x", ".", "name", "for", "x", "in", "local_device_protos", "if", "x", ".", "device_type", "==", "'GPU'", "]", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.rank": [[114, 116], ["len"], "function", ["None"], ["", "def", "distribute_input_data", "(", "data_loader", ",", "num_gpu", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.make_grid": [[117, 136], ["min", "int", "numpy.zeros", "range", "math.ceil", "int", "int", "range", "float"], "function", ["None"], ["\n", "if", "num_gpu", "==", "0", ":", "\n", "        ", "return", "{", "'/cpu:0'", ":", "data_loader", "}", "\n", "\n", "", "gpus", "=", "get_available_gpus", "(", ")", "\n", "if", "num_gpu", ">", "len", "(", "gpus", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'number of gpus specified={}, more than gpus available={}'", ".", "format", "(", "num_gpu", ",", "len", "(", "gpus", ")", ")", ")", "\n", "\n", "", "gpus", "=", "gpus", "[", ":", "num_gpu", "]", "\n", "\n", "data_by_gpu", "=", "{", "g", ":", "{", "}", "for", "g", "in", "gpus", "}", "\n", "for", "key", ",", "value", "in", "data_loader", ".", "items", "(", ")", ":", "\n", "        ", "spl_vals", "=", "tf", ".", "split", "(", "value", ",", "num_gpu", ")", "\n", "for", "gpu", ",", "val", "in", "zip", "(", "gpus", ",", "spl_vals", ")", ":", "\n", "            ", "data_by_gpu", "[", "gpu", "]", "[", "key", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.save_image": [[137, 143], ["utils.make_grid", "PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.utils.make_grid"], ["", "", "return", "data_by_gpu", "\n", "\n", "\n", "", "def", "rank", "(", "array", ")", ":", "\n", "    ", "return", "len", "(", "array", ".", "shape", ")", "\n", "\n", "", "def", "make_grid", "(", "tensor", ",", "nrow", "=", "8", ",", "padding", "=", "2", ",", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.conv_out_size_same": [[11, 13], ["int", "math.ceil", "float", "float"], "function", ["None"], ["", "return", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "\n", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.GeneratorCNN": [[14, 64], ["tensorflow.contrib.framework.get_variables", "tensorflow.shape", "tensorflow.variable_scope", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.linear", "tensorflow.reshape", "tensorflow.nn.relu", "ops.deconv2d", "tensorflow.nn.relu", "ops.deconv2d", "tensorflow.nn.relu", "ops.deconv2d", "tensorflow.nn.relu", "ops.deconv2d", "tensorflow.nn.tanh", "models.conv_out_size_same", "models.conv_out_size_same", "models.conv_out_size_same", "models.conv_out_size_same", "models.conv_out_size_same", "models.conv_out_size_same", "models.conv_out_size_same", "models.conv_out_size_same", "ops.batch_norm.", "ops.batch_norm.", "ops.batch_norm.", "ops.batch_norm."], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.deconv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.deconv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.deconv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.deconv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.conv_out_size_same", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.conv_out_size_same", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.conv_out_size_same", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.conv_out_size_same", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.conv_out_size_same", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.conv_out_size_same", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.conv_out_size_same", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.conv_out_size_same"], ["#def linear(input_, output_dim, scope=None, stddev=10.):", "\n", "", "def", "linear", "(", "input_", ",", "output_dim", ",", "scope", "=", "None", ",", "stddev", "=", ".7", ")", ":", "\n", "    ", "unif", "=", "tf", ".", "uniform_unit_scaling_initializer", "(", ")", "\n", "norm", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "const", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "'linear'", ")", ":", "\n", "#w = tf.get_variable('w', [input_.get_shape()[1], output_dim], initializer=unif)", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "'w'", ",", "[", "input_", ".", "get_shape", "(", ")", "[", "1", "]", ",", "output_dim", "]", ",", "initializer", "=", "norm", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "'b'", ",", "[", "output_dim", "]", ",", "initializer", "=", "const", ")", "\n", "return", "tf", ".", "matmul", "(", "input_", ",", "w", ")", "+", "b", "\n", "\n", "\n", "", "", "class", "Arrows", ":", "\n", "    ", "x_dim", "=", "3", "\n", "e_dim", "=", "3", "\n", "bdry_buffer", "=", "0.05", "# output in [bdry_buffer,1-bdry_buffer]", "\n", "def", "__init__", "(", "self", ",", "N", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Arrow'", ")", "as", "scope", ":", "\n", "            ", "self", ".", "N", "=", "tf", ".", "placeholder_with_default", "(", "N", ",", "shape", "=", "[", "]", ")", "\n", "#self.N=tf.constant(N) #how many to sample at a time", "\n", "self", ".", "e1", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "N", ",", "1", "]", ",", "0", ",", "1", ")", "\n", "self", ".", "e2", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "N", ",", "1", "]", ",", "0", ",", "1", ")", "\n", "self", ".", "e3", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "N", ",", "1", "]", ",", "0", ",", "1", ")", "\n", "self", ".", "build", "(", ")", "\n", "#WARN. some of these are not trainable: i.e. poly", "\n", "self", ".", "var", "=", "tf", ".", "contrib", ".", "framework", ".", "get_variables", "(", "scope", ")", "\n", "", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "normalize_output", "(", "self", ",", "X", ")", ":", "\n", "        ", "'''\n        I think that data literally in [0,1] was difficult for sigmoid network.\n        Therefore, I am normalizing it to [bdry_buffer,1-bdry_buffer]\n\n        X: assumed to be in [0,1]\n        '''", "\n", "return", "(", "1.", "-", "2", "*", "self", ".", "bdry_buffer", ")", "*", "X", "+", "self", ".", "bdry_buffer", "\n", "\n", "\n", "\n", "", "", "class", "Generator", ":", "\n", "    ", "x_dim", "=", "3", "\n", "def", "__init__", "(", "self", ",", "N", ",", "hidden_size", "=", "10", ",", "z_dim", "=", "10", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Gen'", ")", "as", "scope", ":", "\n", "            ", "self", ".", "N", "=", "tf", ".", "placeholder_with_default", "(", "N", ",", "shape", "=", "[", "]", ")", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "z_dim", "=", "z_dim", "\n", "self", ".", "build", "(", ")", "\n", "self", ".", "tr_var", "=", "tf", ".", "contrib", ".", "framework", ".", "get_variables", "(", "scope", ")", "\n", "self", ".", "step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "'step'", ",", "trainable", "=", "False", ")", "\n", "self", ".", "var", "=", "tf", ".", "contrib", ".", "framework", ".", "get_variables", "(", "scope", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.DiscriminatorCNN": [[65, 123], ["tensorflow.variable_scope", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.lrelu", "ops.add_minibatch_features", "ops.lrelu", "ops.lrelu", "numpy.prod", "tensorflow.reshape", "ops.linear", "tensorflow.nn.sigmoid", "tensorflow.contrib.framework.get_variables", "ops.lrelu", "print", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.get_variable", "tensorflow.nn.bias_add", "ops.batch_norm.", "ops.batch_norm.", "ops.batch_norm.", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.lrelu.get_shape().as_list", "tensorflow.truncated_normal_initializer", "tensorflow.constant_initializer", "image.get_shape", "ops.lrelu.get_shape"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.add_minibatch_features", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d"], ["", "", "def", "build", "(", "self", ")", ":", "\n", "        ", "raise", "Exception", "(", "'must override'", ")", "\n", "", "def", "smallNN", "(", "self", ",", "inputs", ",", "name", "=", "'smallNN'", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "if", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "                ", "inputs", "=", "tf", ".", "concat", "(", "inputs", ",", "axis", "=", "1", ")", "\n", "", "h01", "=", "tf", ".", "tanh", "(", "linear", "(", "inputs", ",", "self", ".", "hidden_size", ",", "name", "+", "'l1'", ")", ")", "\n", "h11", "=", "tf", ".", "tanh", "(", "linear", "(", "h01", ",", "self", ".", "hidden_size", ",", "name", "+", "'l21'", ")", ")", "\n", "#h21 = output_nonlinearity(linear(h11, 1, name+'l31'))", "\n", "#h21 = linear(h11, 1, name+'l31')", "\n", "h21", "=", "tf", ".", "sigmoid", "(", "linear", "(", "h11", ",", "1", ",", "name", "+", "'l31'", ")", ")", "\n", "\n", "", "return", "h21", "#rank2", "\n", "#return tf.sigmoid(h21)#rank2", "\n", "\n", "\n", "", "", "randunif", "=", "tf", ".", "random_uniform_initializer", "(", "0", ",", "1", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "def", "poly", "(", "cause", ",", "cause2", "=", "None", ",", "cause3", "=", "None", ",", "name", "=", "'poly1d'", ",", "reuse", "=", "None", ")", ":", "\n", "#assumes input is in [0,1]. Enforces output is in [0,1]", "\n", "#if cause2 is not given, this is a cubic poly is 1 variable", "\n", "\n", "#cause and cause2 should be given as tensors like (N,1)", "\n", "\n", "#Check conditions", "\n", "    ", "if", "isinstance", "(", "cause2", ",", "str", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'cause2 was a string. you probably forgot to include\\\n                         the \"name=\" keyword when specifying only 1 cause'", ")", "\n", "", "if", "isinstance", "(", "cause3", ",", "str", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'cause3 was a string. you probably forgot to include\\\n                         the \"name=\" keyword when specifying only 1 cause'", ")", "\n", "", "if", "not", "len", "(", "cause", ".", "shape", ")", ">=", "2", ":", "\n", "        ", "cshape", "=", "cause", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "raise", "ValueError", "(", "'cause and cause2 must have len(shape)>=2. shape was'", ",", "cshape", ")", "\n", "", "if", "cause2", "is", "not", "None", ":", "\n", "        ", "if", "not", "len", "(", "cause2", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ">=", "2", ":", "\n", "            ", "cshape2", "=", "cause2", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "raise", "ValueError", "(", "'cause and cause2 must have len(shape)>=2. shape was %r'", "%", "(", "cshape2", ")", ")", "\n", "", "", "if", "cause3", "is", "not", "None", ":", "\n", "        ", "if", "not", "len", "(", "cause3", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", ">=", "2", ":", "\n", "            ", "cshape3", "=", "cause3", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "raise", "ValueError", "(", "'cause and cause3 must have len(shape)>=2. shape was %r'", "%", "(", "cshape3", ")", ")", "\n", "\n", "#Start", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "name", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "if", "cause2", "is", "not", "None", "and", "cause3", "is", "not", "None", ":", "\n", "            ", "inputs", "=", "[", "tf", ".", "ones_like", "(", "cause", ")", ",", "cause", ",", "cause2", ",", "cause3", "]", "\n", "", "if", "cause2", "is", "not", "None", "and", "cause3", "is", "None", ":", "\n", "            ", "inputs", "=", "[", "tf", ".", "ones_like", "(", "cause", ")", ",", "cause", ",", "cause2", "]", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "[", "tf", ".", "ones_like", "(", "cause", ")", ",", "cause", "]", "\n", "", "dim", "=", "len", "(", "inputs", ")", "#2 or 3 or 4", "\n", "\n", "C", "=", "np", ".", "random", ".", "rand", "(", "1", ",", "dim", ",", "dim", ",", "dim", ")", ".", "astype", "(", "np", ".", "float32", ")", "#unif", "\n", "C", "=", "2", "*", "C", "-", "1", "#unif[-1,1]", "\n", "\n", "n", "=", "200", "\n", "N", "=", "n", "**", "(", "dim", "-", "1", ")", "\n", "grids", "=", "np", ".", "mgrid", "[", "[", "slice", "(", "0", ",", "1", ",", "1.", "/", "n", ")", "for", "i", "in", "inputs", "[", "1", ":", "]", "]", "]", "\n", "y", "=", "np", ".", "hstack", "(", "[", "np", ".", "ones", "(", "(", "N", ",", "1", ")", ")", "]", "+", "[", "g", ".", "reshape", "(", "N", ",", "1", ")", "for", "g", "in", "grids", "]", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.discriminator_labeler": [[125, 142], ["tensorflow.shape", "tensorflow.variable_scope", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "numpy.prod", "tensorflow.reshape", "ops.linear", "tensorflow.nn.sigmoid", "tensorflow.contrib.framework.get_variables", "ops.conv2d", "ops.batch_norm.", "ops.batch_norm.", "ops.batch_norm.", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.lrelu.get_shape().as_list", "ops.lrelu.get_shape"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d"], ["y2", "=", "np", ".", "reshape", "(", "y", ",", "[", "N", ",", "1", ",", "-", "1", ",", "1", "]", ")", "\n", "y3", "=", "np", ".", "reshape", "(", "y", ",", "[", "N", ",", "1", ",", "1", ",", "-", "1", "]", ")", "\n", "\n", "test_poly", "=", "np", ".", "sum", "(", "y1", "*", "y2", "*", "y3", "*", "C", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "Cmin", "=", "np", ".", "min", "(", "test_poly", ")", "\n", "Cmax", "=", "np", ".", "max", "(", "test_poly", ")", "\n", "#normalize [0,1]->[0,1]", "\n", "C", "[", "0", ",", "0", ",", "0", ",", "0", "]", "-=", "Cmin", "\n", "C", "/=", "(", "Cmax", "-", "Cmin", ")", "\n", "\n", "coeff", "=", "tf", ".", "Variable", "(", "C", ",", "name", "=", "'coef'", ",", "trainable", "=", "False", ")", "\n", "\n", "#M=cause.get_shape.as_list()[0]", "\n", "x", "=", "tf", ".", "concat", "(", "inputs", ",", "axis", "=", "1", ")", "\n", "x1", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "dim", ",", "1", ",", "1", "]", ")", "\n", "x2", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "1", ",", "dim", ",", "1", "]", ")", "\n", "x3", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "1", ",", "1", ",", "dim", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.discriminator_gen_labeler": [[143, 160], ["tensorflow.shape", "tensorflow.variable_scope", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "numpy.prod", "tensorflow.reshape", "ops.linear", "tensorflow.nn.sigmoid", "tensorflow.contrib.framework.get_variables", "ops.conv2d", "ops.batch_norm.", "ops.batch_norm.", "ops.batch_norm.", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.lrelu.get_shape().as_list", "ops.lrelu.get_shape"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d"], ["poly", "=", "tf", ".", "reduce_sum", "(", "x1", "*", "x2", "*", "x3", "*", "coeff", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "return", "tf", ".", "reshape", "(", "poly", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "\n", "\n", "", "", "class", "CompleteArrows", "(", "Arrows", ")", ":", "# Data generated from the causal graph X1->X2->X3", "\n", "    ", "name", "=", "'complete'", "\n", "def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "X1", "=", "poly", "(", "self", ".", "e1", ",", "name", "=", "'X1'", ")", "\n", "#self.X2=0.5*poly(self.X1,name='X1cX2')+0.5*self.e2", "\n", "#self.X3=0.5*poly(self.X1,self.X2,name='X1X2cX3')+0.5*self.e3", "\n", "self", ".", "X2", "=", "poly", "(", "self", ".", "X1", ",", "self", ".", "e2", ",", "name", "=", "'X1cX2'", ")", "\n", "self", ".", "X3", "=", "poly", "(", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "e3", ",", "name", "=", "'X1X2cX3'", ")", "\n", "self", ".", "X", "=", "tf", ".", "concat", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "X3", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "X", "=", "self", ".", "normalize_output", "(", "self", ".", "X", ")", "\n", "#print 'completearrowX.shape:',self.X.get_shape().as_list()", "\n", "", "", "", "class", "CompleteGenerator", "(", "Generator", ")", ":", "\n", "    ", "name", "=", "'complete'", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.discriminator_on_z": [[161, 178], ["tensorflow.shape", "tensorflow.variable_scope", "ops.batch_norm", "ops.batch_norm", "ops.batch_norm", "ops.lrelu", "ops.lrelu", "ops.lrelu", "ops.lrelu", "numpy.prod", "tensorflow.reshape", "ops.linear", "tensorflow.nn.tanh", "tensorflow.contrib.framework.get_variables", "ops.conv2d", "ops.batch_norm.", "ops.batch_norm.", "ops.batch_norm.", "ops.conv2d", "ops.conv2d", "ops.conv2d", "ops.lrelu.get_shape().as_list", "ops.lrelu.get_shape"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d"], ["def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "z", "=", "tf", ".", "random_uniform", "(", "(", "self", ".", "N", ",", "self", ".", "x_dim", "*", "self", ".", "z_dim", ")", ",", "0", ",", "1", ",", "name", "=", "'z'", ")", "\n", "z1", ",", "z2", ",", "z3", "=", "tf", ".", "split", "(", "self", ".", "z", ",", "3", ",", "axis", "=", "1", ")", "#3=x_dim", "\n", "self", ".", "X1", "=", "self", ".", "smallNN", "(", "z1", ",", "'X1'", ")", "\n", "self", ".", "X2", "=", "self", ".", "smallNN", "(", "[", "self", ".", "X1", ",", "z2", "]", ",", "'X1cX2'", ")", "\n", "self", ".", "X3", "=", "self", ".", "smallNN", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "z3", "]", ",", "'X1X2cX3'", ")", "\n", "self", ".", "X", "=", "tf", ".", "concat", "(", "[", "self", ".", "X1", ",", "self", ".", "X2", ",", "self", ".", "X3", "]", ",", "axis", "=", "1", ")", "\n", "#print 'completegenX.shape:',self.X.get_shape().as_list()", "\n", "\n", "", "", "", "class", "ColliderArrows", "(", "Arrows", ")", ":", "\n", "    ", "name", "=", "'collider'", "\n", "def", "build", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "self", ".", "X1", "=", "poly", "(", "self", ".", "e1", ",", "name", "=", "'X1'", ")", "\n", "self", ".", "X3", "=", "poly", "(", "self", ".", "e3", ",", "name", "=", "'X3'", ")", "\n", "#self.X2=0.5*poly(self.X1,self.X3,name='X1X3cX2')+0.5*self.e2", "\n", "self", ".", "X2", "=", "poly", "(", "self", ".", "X1", ",", "self", ".", "X3", ",", "self", ".", "e2", ",", "name", "=", "'X1X3cX2'", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.config.str2bool": [[4, 6], ["v.lower"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "#return (v is True) or (v.lower() in ('true', '1'))", "\n", "    ", "return", "v", "is", "True", "or", "v", ".", "lower", "(", ")", "in", "(", "'true'", ",", "'1'", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.config.add_argument_group": [[10, 14], ["parser.add_argument_group", "arg_lists.append"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.config.add_argument_group"], ["\n", "def", "add_argument_group", "(", "name", ")", ":", "\n", "    ", "arg", "=", "parser", ".", "add_argument_group", "(", "name", ")", "\n", "arg_lists", ".", "append", "(", "arg", ")", "\n", "return", "arg", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.config.get_config": [[154, 159], ["parser.parse_known_args", "print"], "function", ["None"], []], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.batch_norm.__init__": [[12, 17], ["tensorflow.variable_scope"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", "=", "1e-5", ",", "momentum", "=", "0.9", ",", "name", "=", "\"batch_norm\"", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.batch_norm.__call__": [[18, 26], ["tensorflow.contrib.layers.batch_norm"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "x", ",", "train", "=", "True", ")", ":", "\n", "        ", "return", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "x", ",", "\n", "decay", "=", "self", ".", "momentum", ",", "\n", "updates_collections", "=", "None", ",", "\n", "epsilon", "=", "self", ".", "epsilon", ",", "\n", "scale", "=", "True", ",", "\n", "is_training", "=", "train", ",", "\n", "scope", "=", "self", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv_cond_concat": [[27, 41], ["x.get_shape", "tensorflow.stack", "tensorflow.tile", "tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat"], ["", "", "def", "conv_cond_concat", "(", "x", ",", "y", ")", ":", "\n", "    ", "\"\"\"Concatenate conditioning vector on feature map axis.\"\"\"", "\n", "#print('input x:',x.get_shape().as_list())", "\n", "#print('input y:',y.get_shape().as_list())", "\n", "\n", "xshape", "=", "x", ".", "get_shape", "(", ")", "\n", "#tile by [1,64,64,1]", "\n", "\n", "tile_shape", "=", "tf", ".", "stack", "(", "[", "1", ",", "xshape", "[", "1", "]", ",", "xshape", "[", "2", "]", ",", "1", "]", ")", "\n", "tile_y", "=", "tf", ".", "tile", "(", "y", ",", "tile_shape", ")", "\n", "\n", "#print('tile y:',tile_y.get_shape().as_list())", "\n", "\n", "return", "tf", ".", "concat", "(", "[", "x", ",", "tile_y", "]", ",", "axis", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d": [[49, 62], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.conv2d", "tensorflow.get_variable", "tensorflow.nn.bias_add", "tensorflow.truncated_normal_initializer", "tensorflow.constant_initializer", "input_.get_shape"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d"], ["", "def", "conv2d", "(", "input_", ",", "output_dim", ",", "\n", "k_h", "=", "5", ",", "k_w", "=", "5", ",", "d_h", "=", "2", ",", "d_w", "=", "2", ",", "stddev", "=", "0.02", ",", "\n", "name", "=", "\"conv2d\"", ")", ":", "\n", "  ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "    ", "w", "=", "tf", ".", "get_variable", "(", "'w'", ",", "[", "k_h", ",", "k_w", ",", "input_", ".", "get_shape", "(", ")", "[", "-", "1", "]", ",", "output_dim", "]", ",", "\n", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", ")", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "input_", ",", "w", ",", "strides", "=", "[", "1", ",", "d_h", ",", "d_w", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "[", "output_dim", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "#conv = tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape())", "\n", "conv", "=", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "biases", ")", "\n", "\n", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.deconv2d": [[63, 83], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.stack", "tensorflow.nn.conv2d_transpose", "tensorflow.get_variable", "tensorflow.reshape", "tensorflow.nn.bias_add", "tensorflow.random_normal_initializer", "tensorflow.constant_initializer", "input_.get_shape"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape"], ["", "", "def", "deconv2d", "(", "input_", ",", "output_shape", ",", "\n", "k_h", "=", "5", ",", "k_w", "=", "5", ",", "d_h", "=", "2", ",", "d_w", "=", "2", ",", "stddev", "=", "0.02", ",", "\n", "name", "=", "\"deconv2d\"", ",", "with_w", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "# filter : [height, width, output_channels, in_channels]", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "'w'", ",", "[", "k_h", ",", "k_w", ",", "output_shape", "[", "-", "1", "]", ",", "input_", ".", "get_shape", "(", ")", "[", "-", "1", "]", "]", ",", "\n", "initializer", "=", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "stddev", ")", ")", "\n", "\n", "tf_output_shape", "=", "tf", ".", "stack", "(", "output_shape", ")", "\n", "deconv", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "input_", ",", "w", ",", "output_shape", "=", "tf_output_shape", ",", "\n", "strides", "=", "[", "1", ",", "d_h", ",", "d_w", ",", "1", "]", ")", "\n", "\n", "biases", "=", "tf", ".", "get_variable", "(", "'biases'", ",", "[", "output_shape", "[", "-", "1", "]", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "#deconv = tf.reshape(tf.nn.bias_add(deconv, biases), deconv.get_shape())", "\n", "deconv", "=", "tf", ".", "reshape", "(", "tf", ".", "nn", ".", "bias_add", "(", "deconv", ",", "biases", ")", ",", "tf_output_shape", ")", "\n", "\n", "if", "with_w", ":", "\n", "            ", "return", "deconv", ",", "w", ",", "biases", "\n", "", "else", ":", "\n", "            ", "return", "deconv", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu": [[84, 89], ["tensorflow.variable_scope", "tensorflow.abs"], "function", ["None"], ["", "", "", "def", "lrelu", "(", "x", ",", "leak", "=", "0.2", ",", "name", "=", "'lrelu'", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "        ", "f1", "=", "0.5", "*", "(", "1", "+", "leak", ")", "\n", "f2", "=", "0.5", "*", "(", "1", "-", "leak", ")", "\n", "return", "f1", "*", "x", "+", "f2", "*", "tf", ".", "abs", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear": [[94, 110], ["input_.get_shape().as_list", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "input_.get_shape", "tensorflow.random_normal_initializer", "tensorflow.constant_initializer", "tensorflow.matmul", "tensorflow.matmul"], "function", ["None"], ["", "", "def", "linear", "(", "input_", ",", "output_size", ",", "scope", "=", "None", ",", "stddev", "=", "0.02", ",", "bias_start", "=", "0.0", ",", "with_w", "=", "False", ")", ":", "\n", "    ", "shape", "=", "input_", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "\n", "#mat_shape=tf.stack([tf.shape(input_)[1],output_size])", "\n", "mat_shape", "=", "[", "shape", "[", "1", "]", ",", "output_size", "]", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "scope", "or", "\"Linear\"", ")", ":", "\n", "#matrix = tf.get_variable(\"Matrix\", [shape[1], output_size], tf.float32,", "\n", "        ", "matrix", "=", "tf", ".", "get_variable", "(", "\"Matrix\"", ",", "mat_shape", ",", "tf", ".", "float32", ",", "\n", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "stddev", ")", ")", "\n", "bias", "=", "tf", ".", "get_variable", "(", "\"bias\"", ",", "[", "output_size", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "bias_start", ")", ")", "\n", "if", "with_w", ":", "\n", "            ", "return", "tf", ".", "matmul", "(", "input_", ",", "matrix", ")", "+", "bias", ",", "matrix", ",", "bias", "\n", "", "else", ":", "\n", "            ", "return", "tf", ".", "matmul", "(", "input_", ",", "matrix", ")", "+", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.add_minibatch_features": [[115, 141], ["image.get_shape().as_list", "numpy.prod", "ops.lrelu", "ops.conv2d", "conv2d.get_shape().as_list", "numpy.prod", "tensorflow.reshape", "ops.linear", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.expand_dims", "tensorflow.reduce_mean", "tensorflow.reshape", "ops.conv_cond_concat", "ops.conv2d", "tensorflow.stack", "tensorflow.abs", "tensorflow.eye", "tensorflow.exp", "image.get_shape", "conv2d.get_shape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.lrelu", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.linear", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_began.models.reshape", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv_cond_concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.ops.conv2d"], ["", "", "", "def", "add_minibatch_features", "(", "image", ",", "df_dim", ")", ":", "\n", "    ", "shape", "=", "image", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "dim", "=", "np", ".", "prod", "(", "shape", "[", "1", ":", "]", ")", "# dim = prod(9,2) = 18", "\n", "h_mb0", "=", "lrelu", "(", "conv2d", "(", "image", ",", "df_dim", ",", "name", "=", "'d_mb0_conv'", ")", ")", "\n", "h_mb1", "=", "conv2d", "(", "h_mb0", ",", "df_dim", ",", "name", "=", "'d_mbh1_conv'", ")", "\n", "\n", "dims", "=", "h_mb1", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "conv_dims", "=", "np", ".", "prod", "(", "dims", "[", "1", ":", "]", ")", "\n", "\n", "image_", "=", "tf", ".", "reshape", "(", "h_mb1", ",", "tf", ".", "stack", "(", "[", "-", "1", ",", "conv_dims", "]", ")", ")", "\n", "#image_ = tf.reshape(h_mb1, tf.stack([batch_size, -1]))", "\n", "\n", "n_kernels", "=", "300", "\n", "dim_per_kernel", "=", "50", "\n", "x", "=", "linear", "(", "image_", ",", "n_kernels", "*", "dim_per_kernel", ",", "'d_mbLinear'", ")", "\n", "act", "=", "tf", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", "n_kernels", ",", "dim_per_kernel", ")", ")", "\n", "\n", "act", "=", "tf", ".", "reshape", "(", "x", ",", "(", "-", "1", ",", "n_kernels", ",", "dim_per_kernel", ")", ")", "\n", "act_tp", "=", "tf", ".", "transpose", "(", "act", ",", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "#bs x n_ker x dim_ker x bs -> bs x n_ker x bs :", "\n", "abs_dif", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "tf", ".", "expand_dims", "(", "act", ",", "3", ")", "-", "tf", ".", "expand_dims", "(", "act_tp", ",", "0", ")", ")", ",", "2", ")", "\n", "eye", "=", "tf", ".", "expand_dims", "(", "tf", ".", "eye", "(", "tf", ".", "shape", "(", "abs_dif", ")", "[", "0", "]", ")", ",", "1", ")", "#bs x 1 x bs", "\n", "masked", "=", "tf", ".", "exp", "(", "-", "abs_dif", ")", "-", "eye", "\n", "f1", "=", "tf", ".", "reduce_mean", "(", "masked", ",", "2", ")", "\n", "mb_features", "=", "tf", ".", "reshape", "(", "f1", ",", "[", "-", "1", ",", "1", ",", "1", ",", "n_kernels", "]", ")", "\n", "return", "conv_cond_concat", "(", "image", ",", "mb_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.CausalGAN.__init__": [[67, 100], ["tensorflow.Variable", "tensorflow.assign", "tensorflow.get_variable", "tensorflow.get_variable", "print"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_size", ",", "config", ")", ":", "\n", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "#a tensor", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "model_dir", "=", "config", ".", "model_dir", "\n", "self", ".", "TINY", "=", "10", "**", "-", "6", "\n", "\n", "self", ".", "step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "'step'", ",", "trainable", "=", "False", ")", "\n", "self", ".", "inc_step", "=", "tf", ".", "assign", "(", "self", ".", "step", ",", "self", ".", "step", "+", "1", ")", "\n", "\n", "#########################################", "\n", "##### Following is not used anymore #####", "\n", "#########################################", "\n", "self", ".", "gamma_k", "=", "tf", ".", "get_variable", "(", "name", "=", "'gamma_k'", ",", "initializer", "=", "config", ".", "gamma_k", ",", "trainable", "=", "False", ")", "\n", "self", ".", "lambda_k", "=", "config", ".", "lambda_k", "#0.05", "\n", "self", ".", "gamma_l", "=", "config", ".", "gamma_l", "#self.label_loss_hyperparameter", "\n", "self", ".", "lambda_l", "=", "config", ".", "lambda_l", "#0.005", "\n", "self", ".", "gamma_m", "=", "1.", "/", "(", "self", ".", "gamma_k", "+", "self", ".", "TINY", ")", "#gamma_m#4.0 # allowing gan loss to be 8 times labelerR loss", "\n", "#self.gamma_m=config.gamma_m", "\n", "self", ".", "lambda_m", "=", "config", ".", "lambda_m", "#0.05", "\n", "#########################################", "\n", "\n", "self", ".", "k_t", "=", "tf", ".", "get_variable", "(", "name", "=", "'k_t'", ",", "initializer", "=", "1.", ",", "trainable", "=", "False", ")", "# kt is the closed loop feedback coefficient to balance the loss between LR and LG", "\n", "\n", "self", ".", "rec_loss_coeff", "=", "0.0", "\n", "print", "(", "'WARNING:CausalGAN.rec_loss_coff='", ",", "self", ".", "rec_loss_coeff", ")", "\n", "\n", "self", ".", "hidden_size", "=", "config", ".", "critic_hidden_size", "\n", "\n", "self", ".", "gf_dim", "=", "config", ".", "gf_dim", "\n", "self", ".", "df_dim", "=", "config", ".", "df_dim", "\n", "\n", "self", ".", "loss_function", "=", "config", ".", "loss_function", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.CausalGAN.__call__": [[101, 280], ["len", "CausalGAN.CausalGAN.real_inputs.pop", "CausalGAN.norm_img", "tensorflow.concat", "tensorflow.concat", "tensorflow.random_uniform", "tensorflow.concat", "models.GeneratorCNN", "CausalGAN.denorm_img", "models.DiscriminatorCNN", "models.DiscriminatorCNN", "models.discriminator_labeler", "models.discriminator_labeler", "models.discriminator_gen_labeler", "models.discriminator_on_z", "models.discriminator_on_z", "tensorflow.concat", "models.GeneratorCNN", "tensorflow.summary.histogram", "tensorflow.summary.histogram", "tensorflow.summary.image", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.reduce_mean", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "CausalGAN.CausalGAN.real_inputs.values", "CausalGAN.CausalGAN.fake_inputs.values", "tensorflow.round", "tensorflow.round", "tensorflow.log", "tensorflow.log", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "CausalGAN.CausalGAN.__call__.sigmoid_cross_entropy_with_logits"], "methods", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.norm_img", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.GeneratorCNN", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.denorm_img", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.DiscriminatorCNN", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.DiscriminatorCNN", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.discriminator_labeler", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.discriminator_labeler", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.discriminator_gen_labeler", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.discriminator_on_z", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.discriminator_on_z", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_controller.ArrayDict.ArrayDict.concat", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.models.GeneratorCNN"], ["", "def", "__call__", "(", "self", ",", "real_inputs", ",", "fake_inputs", ")", ":", "\n", "        ", "'''\n        This builds the model on the inputs. Potentially this would be called\n        multiple times in a multi-gpu situation. Put \"setup\" type stuff in\n        __init__ instead.\n\n        This is like self.build_model()\n\n        fake inputs is a dictionary of labels from cc\n        real_inputs is also a dictionary of labels\n            with an additional key 'x' for the real image\n        '''", "\n", "config", "=", "self", ".", "config", "#used many times", "\n", "\n", "#dictionaries", "\n", "self", ".", "real_inputs", "=", "real_inputs", "\n", "self", ".", "fake_inputs", "=", "fake_inputs", "\n", "\n", "n_labels", "=", "len", "(", "fake_inputs", ")", "\n", "self", ".", "x", "=", "self", ".", "real_inputs", ".", "pop", "(", "'x'", ")", "#[0,255]", "\n", "x", "=", "norm_img", "(", "self", ".", "x", ")", "#put in [-1,1]", "\n", "\n", "#These are 0,1 labels. To add noise, add noise from here.", "\n", "self", ".", "real_labels", "=", "tf", ".", "concat", "(", "self", ".", "real_inputs", ".", "values", "(", ")", ",", "-", "1", ")", "\n", "self", ".", "fake_labels", "=", "tf", ".", "concat", "(", "self", ".", "fake_inputs", ".", "values", "(", ")", ",", "-", "1", ")", "\n", "\n", "##BEGIN manipulating labels##", "\n", "\n", "#Fake labels will already be nearly discrete", "\n", "if", "config", ".", "round_fake_labels", ":", "#default", "\n", "            ", "fake_labels", "=", "tf", ".", "round", "(", "self", ".", "fake_labels", ")", "#{0,1}", "\n", "real_labels", "=", "tf", ".", "round", "(", "self", ".", "real_labels", ")", "#should already be rounded", "\n", "", "else", ":", "\n", "            ", "fake_labels", "=", "self", ".", "fake_labels", "#{0,1}", "\n", "real_labels", "=", "self", ".", "real_labels", "\n", "\n", "", "if", "config", ".", "label_type", "==", "'discrete'", ":", "\n", "            ", "fake_labels", "=", "0.3", "+", "fake_labels", "*", "0.4", "#{0.3,0.7}", "\n", "real_labels", "=", "0.3", "+", "real_labels", "*", "0.4", "#{0.3,0.7}", "\n", "\n", "", "elif", "config", ".", "label_type", "==", "'continuous'", ":", "\n", "\n", "#this is so that they can be set to 0 in label_interpolation", "\n", "            ", "self", ".", "noise_variables", "=", "[", "]", "\n", "\n", "if", "config", ".", "label_specific_noise", ":", "\n", "#TODO#uniform see above #REFERENCE", "\n", "                ", "raise", "Exception", "(", "'label_specific_noise=True not yet implemented'", ")", "\n", "", "else", ":", "#default", "\n", "                ", "fake_labels", ",", "nvfake", "=", "add_texp_noise", "(", "self", ".", "batch_size", ",", "fake_labels", ")", "\n", "real_labels", ",", "nvreal", "=", "add_texp_noise", "(", "self", ".", "batch_size", ",", "real_labels", ")", "\n", "self", ".", "noise_variables", ".", "extend", "(", "nvfake", ")", "\n", "self", ".", "noise_variables", ".", "extend", "(", "nvreal", ")", "\n", "\n", "", "tf", ".", "summary", ".", "histogram", "(", "'noisy_fake_labels'", ",", "fake_labels", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "'noisy_real_labels'", ",", "real_labels", ")", "\n", "\n", "", "self", ".", "fake_labels_logits", "=", "-", "tf", ".", "log", "(", "1", "/", "(", "fake_labels", "+", "self", ".", "TINY", ")", "-", "1", ")", "\n", "self", ".", "real_labels_logits", "=", "-", "tf", ".", "log", "(", "1", "/", "(", "real_labels", "+", "self", ".", "TINY", ")", "-", "1", ")", "\n", "\n", "self", ".", "noisy_fake_labels", "=", "fake_labels", "\n", "self", ".", "noisy_real_labels", "=", "real_labels", "\n", "\n", "if", "config", ".", "type_input_to_generator", "==", "'labels'", ":", "\n", "            ", "self", ".", "fake_labels_inputs", "=", "fake_labels", "\n", "self", ".", "real_labels_inputs", "=", "real_labels", "#for reconstruction", "\n", "", "elif", "config", ".", "type_input_to_generator", "==", "'logits'", ":", "#default", "\n", "            ", "self", ".", "fake_labels_inputs", "=", "self", ".", "fake_labels_logits", "\n", "self", ".", "real_labels_inputs", "=", "self", ".", "real_labels_logits", "\n", "\n", "##FINISHED manipulating labels##", "\n", "\n", "", "self", ".", "z_gen", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "batch_size", ",", "config", ".", "z_dim", "]", ",", "minval", "=", "-", "1.0", ",", "maxval", "=", "1.0", ",", "name", "=", "'z_gen'", ")", "\n", "\n", "self", ".", "z", "=", "tf", ".", "concat", "(", "[", "self", ".", "z_gen", ",", "self", ".", "fake_labels_inputs", "]", ",", "axis", "=", "-", "1", ",", "name", "=", "'z'", ")", "\n", "\n", "G", ",", "self", ".", "g_vars", "=", "GeneratorCNN", "(", "self", ".", "z", ",", "config", ")", "#[-1,1]float", "\n", "self", ".", "G", "=", "denorm_img", "(", "G", ")", "#[0,255]", "\n", "\n", "#Discriminator", "\n", "D_on_real", "=", "DiscriminatorCNN", "(", "x", ",", "config", ")", "\n", "D_on_fake", "=", "DiscriminatorCNN", "(", "G", ",", "config", ",", "reuse", "=", "True", ")", "\n", "self", ".", "D", ",", "self", ".", "D_logits", ",", "self", ".", "features_to_estimate_z_on_input", ",", "self", ".", "d_vars", "=", "D_on_real", "\n", "self", ".", "D_", ",", "self", ".", "D_logits_", ",", "self", ".", "features_to_estimate_z_on_generated", ",", "_", "=", "D_on_fake", "\n", "\n", "#Discriminator Labeler", "\n", "self", ".", "D_labels_for_real", ",", "self", ".", "D_labels_for_real_logits", ",", "self", ".", "dl_vars", "=", "discriminator_labeler", "(", "x", ",", "n_labels", ",", "config", ")", "\n", "self", ".", "D_labels_for_fake", ",", "self", ".", "D_labels_for_fake_logits", ",", "_", "=", "discriminator_labeler", "(", "G", ",", "n_labels", ",", "config", ",", "reuse", "=", "True", ")", "\n", "\n", "#Other discriminators", "\n", "self", ".", "D_gen_labels_for_fake", ",", "self", ".", "D_gen_labels_for_fake_logits", ",", "self", ".", "dl_gen_vars", "=", "discriminator_gen_labeler", "(", "G", ",", "n_labels", ",", "config", ")", "\n", "#discriminator_gen_labeler(self.G,n_labels,config)", "\n", "\n", "self", ".", "D_on_z_real", ",", "_", "=", "discriminator_on_z", "(", "self", ".", "features_to_estimate_z_on_input", ",", "config", ")", "\n", "self", ".", "D_on_z", ",", "self", ".", "dz_vars", "=", "discriminator_on_z", "(", "self", ".", "features_to_estimate_z_on_generated", ",", "config", ",", "reuse", "=", "True", ")", "\n", "\n", "#order of concat matters", "\n", "self", ".", "z_for_real", "=", "tf", ".", "concat", "(", "[", "self", ".", "D_on_z_real", ",", "self", ".", "real_labels_inputs", "]", ",", "axis", "=", "1", ",", "name", "=", "'z_real'", ")", "\n", "self", ".", "inputs_reconstructed", ",", "_", "=", "GeneratorCNN", "(", "self", ".", "z_for_real", ",", "self", ".", "config", ",", "reuse", "=", "True", ")", "\n", "# Reconstructability is an idea that we tried. It does not provide big improvements, hence is not used ini the current version.", "\n", "\n", "tf", ".", "summary", ".", "histogram", "(", "'d'", ",", "self", ".", "D", ")", "\n", "tf", ".", "summary", ".", "histogram", "(", "'d_'", ",", "self", ".", "D_", ")", "\n", "tf", ".", "summary", ".", "image", "(", "'G'", ",", "self", ".", "G", ",", "max_outputs", "=", "10", ")", "\n", "\n", "def", "sigmoid_cross_entropy_with_logits", "(", "x", ",", "y", ")", ":", "\n", "            ", "return", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "x", ",", "labels", "=", "y", ")", "\n", "\n", "# We tried different loss functions: 0,1,2 all have the order of terms in the cross entropy loss flipped, whereas 3,4,5 are not (consistent with theory).", "\n", "# Although all works to some extent, we have seen the sharpest images and best image quality with \"loss function 1\".", "\n", "# Difference between 0, 1, 2: This is to see the effect of using different GAN losses, as mentioned in the paper.", "\n", "", "if", "self", ".", "loss_function", "==", "0", ":", "\n", "            ", "self", ".", "g_lossLabels", "=", "tf", ".", "reduce_mean", "(", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "fake_labels_logits", ",", "self", ".", "D_labels_for_fake", ")", ")", "\n", "self", ".", "g_lossGAN", "=", "tf", ".", "reduce_mean", "(", "\n", "-", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "D_logits_", ",", "tf", ".", "zeros_like", "(", "self", ".", "D_", ")", ")", "+", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "D_logits_", ",", "tf", ".", "ones_like", "(", "self", ".", "D_", ")", ")", ")", "\n", "", "elif", "self", ".", "loss_function", "==", "1", ":", "#default", "\n", "            ", "self", ".", "g_lossLabels", "=", "tf", ".", "reduce_mean", "(", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "fake_labels_logits", ",", "self", ".", "D_labels_for_fake", ")", ")", "\n", "self", ".", "g_lossGAN", "=", "tf", ".", "reduce_mean", "(", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "D_logits_", ",", "tf", ".", "ones_like", "(", "self", ".", "D_", ")", ")", ")", "\n", "", "elif", "self", ".", "loss_function", "==", "2", ":", "\n", "            ", "self", ".", "g_lossLabels", "=", "tf", ".", "reduce_mean", "(", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "fake_labels_logits", ",", "self", ".", "D_labels_for_fake", ")", ")", "\n", "self", ".", "g_lossGAN", "=", "tf", ".", "reduce_mean", "(", "-", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "D_logits_", ",", "tf", ".", "zeros_like", "(", "self", ".", "D_", ")", ")", ")", "\n", "", "elif", "self", ".", "loss_function", "==", "3", ":", "\n", "            ", "self", ".", "g_lossLabels", "=", "tf", ".", "reduce_mean", "(", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "D_labels_for_fake_logits", ",", "self", ".", "fake_labels", ")", ")", "\n", "self", ".", "g_lossGAN", "=", "tf", ".", "reduce_mean", "(", "\n", "-", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "D_logits_", ",", "tf", ".", "zeros_like", "(", "self", ".", "D_", ")", ")", "+", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "D_logits_", ",", "tf", ".", "ones_like", "(", "self", ".", "D_", ")", ")", ")", "\n", "", "elif", "self", ".", "loss_function", "==", "4", ":", "\n", "            ", "self", ".", "g_lossLabels", "=", "tf", ".", "reduce_mean", "(", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "D_labels_for_fake_logits", ",", "self", ".", "fake_labels", ")", ")", "\n", "self", ".", "g_lossGAN", "=", "tf", ".", "reduce_mean", "(", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "D_logits_", ",", "tf", ".", "ones_like", "(", "self", ".", "D_", ")", ")", ")", "\n", "", "elif", "self", ".", "loss_function", "==", "5", ":", "\n", "            ", "self", ".", "g_lossLabels", "=", "tf", ".", "reduce_mean", "(", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "D_labels_for_fake_logits", ",", "self", ".", "fake_labels", ")", ")", "\n", "self", ".", "g_lossGAN", "=", "tf", ".", "reduce_mean", "(", "-", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "D_logits_", ",", "tf", ".", "zeros_like", "(", "self", ".", "D_", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Something is wrong with the loss function.\\\n                            self.loss_function='", ",", "self", ".", "loss_function", ")", "\n", "\n", "", "self", ".", "g_lossLabels_GLabeler", "=", "tf", ".", "reduce_mean", "(", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "fake_labels_logits", ",", "self", ".", "D_gen_labels_for_fake", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"g_loss_labelerG\"", ",", "self", ".", "g_lossLabels_GLabeler", ")", "\n", "\n", "self", ".", "g_loss_on_z", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "self", ".", "z_gen", "-", "self", ".", "D_on_z", ")", "**", "2", ")", "\n", "#x is the real input image", "\n", "self", ".", "real_reconstruction_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "x", "-", "self", ".", "inputs_reconstructed", ")", "**", "2", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'real_reconstruction_loss'", ",", "self", ".", "real_reconstruction_loss", ")", "\n", "\n", "self", ".", "d_loss_real", "=", "tf", ".", "reduce_mean", "(", "\n", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "D_logits", ",", "tf", ".", "ones_like", "(", "self", ".", "D", ")", ")", ")", "\n", "self", ".", "d_loss_fake", "=", "tf", ".", "reduce_mean", "(", "\n", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "D_logits_", ",", "tf", ".", "zeros_like", "(", "self", ".", "D_", ")", ")", ")", "\n", "\n", "if", "config", ".", "reconstr_loss", ":", "\n", "            ", "g_loss_on_z", "=", "self", ".", "g_loss_on_z", "\n", "", "else", ":", "\n", "            ", "g_loss_on_z", "=", "0.", "\n", "# Default value for now, since reconstructability is not used in the current version.", "\n", "\n", "", "if", "config", ".", "off_label_losses", ":", "\n", "            ", "self", ".", "g_loss", "=", "self", ".", "g_lossGAN", "\n", "", "else", ":", "#default", "\n", "            ", "self", ".", "g_loss", "=", "self", ".", "g_lossGAN", "-", "1.0", "*", "self", ".", "k_t", "*", "self", ".", "g_lossLabels_GLabeler", "+", "self", ".", "g_lossLabels", "+", "g_loss_on_z", "\n", "\n", "", "tf", ".", "summary", ".", "scalar", "(", "'g_loss_labelerR'", ",", "self", ".", "g_lossLabels", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'g_lossGAN'", ",", "self", ".", "g_lossGAN", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'g_loss_on_z'", ",", "self", ".", "g_loss_on_z", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'coeff_of_negLabelerG_loss_k_t'", ",", "self", ".", "k_t", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'gamma_k_summary'", ",", "self", ".", "gamma_k", ")", "\n", "\n", "self", ".", "d_labelLossReal", "=", "tf", ".", "reduce_mean", "(", "sigmoid_cross_entropy_with_logits", "(", "self", ".", "D_labels_for_real_logits", ",", "self", ".", "real_labels", ")", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"d_loss_real\"", ",", "self", ".", "d_loss_real", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"d_loss_fake\"", ",", "self", ".", "d_loss_fake", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"d_loss_real_label\"", ",", "self", ".", "d_labelLossReal", ")", "\n", "\n", "self", ".", "d_loss", "=", "self", ".", "d_loss_real", "+", "self", ".", "d_loss_fake", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"g_loss\"", ",", "self", ".", "g_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"d_loss\"", ",", "self", ".", "d_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.CausalGAN.build_train_op": [[281, 302], ["tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.assign", "tensorflow.group", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.exp"], "methods", ["None"], ["", "def", "build_train_op", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "config", "\n", "\n", "self", ".", "g_optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "config", ".", "learning_rate", ",", "beta1", "=", "config", ".", "beta1", ")", ".", "minimize", "(", "self", ".", "g_loss", ",", "var_list", "=", "self", ".", "g_vars", ")", "\n", "\n", "self", ".", "d_optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "config", ".", "learning_rate", ",", "beta1", "=", "config", ".", "beta1", ")", ".", "minimize", "(", "self", ".", "d_loss", ",", "var_list", "=", "self", ".", "d_vars", ")", "\n", "\n", "self", ".", "d_label_optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "config", ".", "learning_rate", ",", "beta1", "=", "config", ".", "beta1", ")", ".", "minimize", "(", "self", ".", "d_labelLossReal", ",", "var_list", "=", "self", ".", "dl_vars", ")", "\n", "\n", "self", ".", "d_gen_label_optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "config", ".", "learning_rate", ",", "beta1", "=", "config", ".", "beta1", ")", ".", "minimize", "(", "self", ".", "g_lossLabels_GLabeler", ",", "var_list", "=", "self", ".", "dl_gen_vars", ")", "\n", "\n", "self", ".", "d_on_z_optim", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "config", ".", "learning_rate", ",", "beta1", "=", "config", ".", "beta1", ")", ".", "minimize", "(", "self", ".", "g_loss_on_z", "+", "self", ".", "rec_loss_coeff", "*", "self", ".", "real_reconstruction_loss", ",", "var_list", "=", "self", ".", "dz_vars", ")", "\n", "\n", "self", ".", "k_t_update", "=", "tf", ".", "assign", "(", "self", ".", "k_t", ",", "self", ".", "k_t", "*", "tf", ".", "exp", "(", "-", "1.0", "/", "config", ".", "tau", ")", ")", "\n", "\n", "self", ".", "train_op", "=", "tf", ".", "group", "(", "self", ".", "d_gen_label_optim", ",", "self", ".", "d_label_optim", ",", "self", ".", "d_optim", ",", "self", ".", "g_optim", ",", "self", ".", "d_on_z_optim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.CausalGAN.build_summary_op": [[303, 305], ["tensorflow.summary.merge_all"], "methods", ["None"], ["", "def", "build_summary_op", "(", "self", ")", ":", "\n", "        ", "self", ".", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.CausalGAN.train_step": [[306, 331], ["sess.run", "numpy.mod", "sess.run", "sess.run", "sess.run", "sess.run"], "methods", ["None"], ["", "def", "train_step", "(", "self", ",", "sess", ",", "counter", ")", ":", "\n", "        ", "'''\n        This is a generic function that will be called by the Trainer class\n        once per iteration. The simplest body for this part would be simply\n        \"sess.run(self.train_op)\". But you may have more complications.\n\n        Running self.summary_op is handeled by Trainer.Supervisor and doesn't\n        need to be addressed here\n\n        Only counters, not epochs are explicitly kept track of\n        '''", "\n", "\n", "###You can wait until counter>N to do stuff for example:", "\n", "if", "self", ".", "config", ".", "pretrain_LabelerR", "and", "counter", "<", "self", ".", "config", ".", "pretrain_LabelerR_no_of_iters", ":", "\n", "            ", "sess", ".", "run", "(", "self", ".", "d_label_optim", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "np", ".", "mod", "(", "counter", ",", "3", ")", "==", "0", ":", "\n", "\n", "                ", "sess", ".", "run", "(", "self", ".", "g_optim", ")", "\n", "sess", ".", "run", "(", "[", "self", ".", "train_op", ",", "self", ".", "k_t_update", ",", "self", ".", "inc_step", "]", ")", "#all ops", "\n", "\n", "", "else", ":", "\n", "                ", "sess", ".", "run", "(", "[", "self", ".", "g_optim", ",", "self", ".", "k_t_update", ",", "self", ".", "inc_step", "]", ")", "\n", "sess", ".", "run", "(", "self", ".", "g_optim", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.norm_img": [[25, 28], ["None"], "function", ["None"], ["def", "norm_img", "(", "image", ")", ":", "\n", "    ", "image", "=", "image", "/", "127.5", "-", "1.", "\n", "return", "image", "\n", "", "def", "denorm_img", "(", "norm", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.denorm_img": [[28, 30], ["tensorflow.clip_by_value"], "function", ["None"], ["", "def", "denorm_img", "(", "norm", ")", ":", "\n", "    ", "return", "tf", ".", "clip_by_value", "(", "(", "norm", "+", "1", ")", "*", "127.5", ",", "0", ",", "255", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.tf_truncexpon": [[31, 49], ["tensorflow.exp", "tensorflow.random_uniform", "tensorflow.log"], "function", ["None"], ["", "def", "tf_truncexpon", "(", "batch_size", ",", "rate", ",", "right", ")", ":", "\n", "    ", "'''\n    a tensorflow node that returns a random variable\n    sampled from an Exp(rate) random variable\n    which has been truncated and normalized to [0,right]\n\n    #Leverages that log of uniform is exponential\n\n    batch_size: a tensorflow placeholder to sync batch_size everywhere\n    rate: lambda rate parameter for exponential dist\n    right: float in (0,inf) where to truncate exp distribution\n    '''", "\n", "\n", "uleft", "=", "tf", ".", "exp", "(", "-", "1", "*", "rate", "*", "right", ")", "\n", "U", "=", "tf", ".", "random_uniform", "(", "shape", "=", "(", "batch_size", ",", "1", ")", ",", "minval", "=", "uleft", ",", "maxval", "=", "1", ")", "\n", "tExp", "=", "(", "-", "1", "/", "rate", ")", "*", "tf", ".", "log", "(", "U", ")", "\n", "\n", "return", "tExp", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.add_texp_noise": [[50, 63], ["CausalGAN.tf_truncexpon", "CausalGAN.tf_truncexpon"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.tf_truncexpon", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.CausalGAN.tf_truncexpon"], ["", "def", "add_texp_noise", "(", "batch_size", ",", "labels01", ")", ":", "\n", "    ", "labels", "=", "0.3", "+", "labels01", "*", "0.4", "#{0.3,0.7}", "\n", "lower", ",", "upper", ",", "scale", "=", "0", ",", "0.2", ",", "1", "/", "25.0", "\n", "lower_tail", ",", "upper_tail", ",", "scale_tail", "=", "0", ",", "0.3", ",", "1", "/", "50.0", "\n", "#before #t = stats.truncexpon(b=(upper-lower)/scale, loc=lower, scale=scale)", "\n", "#b*scale was the right-boundary", "\n", "b", "=", "(", "upper", "-", "lower", ")", "/", "scale", "\n", "b_tail", "=", "(", "upper_tail", "-", "lower_tail", ")", "/", "scale_tail", "\n", "\n", "s", "=", "tf_truncexpon", "(", "batch_size", ",", "rate", "=", "b", ",", "right", "=", "upper", ")", "\n", "s_tail", "=", "tf_truncexpon", "(", "batch_size", ",", "rate", "=", "b_tail", ",", "right", "=", "upper_tail", ")", "\n", "labels", "=", "labels", "+", "(", "(", "0.5", "-", "labels", ")", "/", "0.2", ")", "*", "s", "+", "(", "(", "-", "0.5", "+", "labels", ")", "/", "0.2", ")", "*", "s_tail", "\n", "return", "labels", ",", "[", "s", ",", "s_tail", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.get_image": [[20, 26], ["utils.imread", "utils.transform"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.imread", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.transform"], ["def", "make_summary", "(", "name", ",", "val", ")", ":", "\n", "    ", "return", "summary_pb2", ".", "Summary", "(", "value", "=", "[", "summary_pb2", ".", "Summary", ".", "Value", "(", "tag", "=", "name", ",", "simple_value", "=", "val", ")", "]", ")", "\n", "\n", "", "def", "summary_stats", "(", "name", ",", "tensor", ",", "collections", "=", "None", ",", "hist", "=", "False", ")", ":", "\n", "    ", "collections", "=", "collections", "or", "[", "tf", ".", "GraphKeys", ".", "SUMMARIES", "]", "\n", "ave", "=", "tf", ".", "reduce_mean", "(", "tensor", ")", "\n", "std", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "ave", "-", "tensor", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.save_images": [[27, 29], ["utils.imsave", "utils.inverse_transform"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.imsave", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.inverse_transform"], ["tf", ".", "summary", ".", "scalar", "(", "name", "+", "'_ave'", ",", "ave", ",", "collections", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "name", "+", "'_std'", ",", "std", ",", "collections", ")", "\n", "if", "hist", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.imread": [[30, 35], ["scipy.misc.imread().astype", "scipy.misc.imread().astype", "scipy.misc.imread", "scipy.misc.imread"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.imread", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.imread"], ["        ", "tf", ".", "summary", ".", "histogram", "(", "name", "+", "'_hist'", ",", "tensor", ",", "collections", ")", "\n", "\n", "\n", "", "", "def", "prepare_dirs_and_logger", "(", "config", ")", ":", "\n", "\n", "    ", "if", "config", ".", "load_path", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.merge_images": [[36, 38], ["utils.inverse_transform"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.inverse_transform"], ["        ", "strip_lp", "=", "config", ".", "load_path", ".", "strip", "(", "'./'", ")", "\n", "if", "strip_lp", ".", "startswith", "(", "config", ".", "log_dir", ")", ":", "\n", "            ", "config", ".", "model_dir", "=", "config", ".", "load_path", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.merge": [[39, 47], ["numpy.zeros", "enumerate"], "function", ["None"], ["", "else", ":", "\n", "            ", "if", "config", ".", "load_path", ".", "startswith", "(", "config", ".", "dataset", ")", ":", "\n", "                ", "config", ".", "model_name", "=", "config", ".", "load_path", "\n", "", "else", ":", "\n", "                ", "config", ".", "model_name", "=", "\"{}_{}\"", ".", "format", "(", "config", ".", "dataset", ",", "config", ".", "load_path", ")", "\n", "", "", "", "else", ":", "#new model", "\n", "        ", "config", ".", "model_name", "=", "\"{}_{}\"", ".", "format", "(", "config", ".", "dataset", ",", "get_time", "(", ")", ")", "\n", "if", "config", ".", "descrip", ":", "\n", "            ", "config", ".", "model_name", "+=", "'_'", "+", "config", ".", "descrip", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.imsave": [[48, 50], ["scipy.misc.imsave", "utils.merge"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.imsave", "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.merge"], ["\n", "\n", "", "", "if", "not", "hasattr", "(", "config", ",", "'model_dir'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.center_crop": [[51, 60], ["int", "int", "scipy.misc.imresize", "round", "round"], "function", ["None"], ["        ", "config", ".", "model_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "log_dir", ",", "config", ".", "model_name", ")", "\n", "", "config", ".", "data_path", "=", "os", ".", "path", ".", "join", "(", "config", ".", "data_dir", ",", "config", ".", "dataset", ")", "\n", "\n", "\n", "if", "not", "config", ".", "load_path", ":", "\n", "        ", "config", ".", "log_code_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "model_dir", ",", "'code'", ")", "\n", "for", "path", "in", "[", "config", ".", "log_dir", ",", "config", ".", "data_dir", ",", "\n", "config", ".", "model_dir", "]", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path", ")", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.transform": [[61, 70], ["utils.center_crop", "scipy.misc.imresize", "numpy.array"], "function", ["home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.center_crop"], ["\n", "#Copy python code in directory into model_dir/code for future reference:", "\n", "#All python files in this directory are copied.", "\n", "", "", "code_dir", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "sys", ".", "argv", "[", "0", "]", ")", ")", "\n", "\n", "##additionally, all python files in these directories are also copied. Also symlinks are copied. The idea is to allow easier model loading in the future", "\n", "allowed_dirs", "=", "[", "'causal_controller'", ",", "'causal_began'", ",", "'causal_dcgan'", ",", "'figure_scripts'", "]", "\n", "\n", "#ignore copy of all non-*.py except for these directories", "\n", "#If you make another folder you want copied, you have to add it here", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.inverse_transform": [[71, 73], ["None"], "function", ["None"], ["ignore_these", "=", "partial", "(", "ignore_except", ",", "allowed_dirs", "=", "allowed_dirs", ")", "\n", "shutil", ".", "copytree", "(", "code_dir", ",", "config", ".", "log_code_dir", ",", "symlinks", "=", "True", ",", "ignore", "=", "ignore_these", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.to_json": [[74, 136], ["open", "layer_f.write", "b.eval", "[].split", "w.eval", "numpy.rollaxis", "bn.gamma.eval", "bn.beta.eval", "lines.replace().split", "w.eval", "fs.append", "fs.append", "list", "lines.replace", "w.name.split", "list", "list", "layer_idx.split", "int", "int", "list", "list", "w_.flatten"], "function", ["None"], ["\n", "#        model_files = [f for f in listdir(code_dir) if isfile(join(code_dir, f))]", "\n", "#        for f in model_files:", "\n", "#            if f.endswith('.py'):", "\n", "#                shutil.copy2(f,config.log_code_dir)", "\n", "\n", "\n", "", "", "def", "ignore_except", "(", "src", ",", "contents", ",", "allowed_dirs", ")", ":", "\n", "    ", "files", "=", "filter", "(", "os", ".", "path", ".", "isfile", ",", "contents", ")", "\n", "dirs", "=", "filter", "(", "os", ".", "path", ".", "isdir", ",", "contents", ")", "\n", "ignored_files", "=", "[", "f", "for", "f", "in", "files", "if", "not", "f", ".", "endswith", "(", "'.py'", ")", "]", "\n", "ignored_dirs", "=", "[", "d", "for", "d", "in", "dirs", "if", "not", "d", "in", "allowed_dirs", "]", "\n", "return", "ignored_files", "+", "ignored_dirs", "\n", "\n", "", "def", "get_time", "(", ")", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\"%m%d_%H%M%S\"", ")", "\n", "\n", "", "def", "save_configs", "(", "config", ",", "cc_config", ",", "dcgan_config", ",", "began_config", ")", ":", "\n", "    ", "model_dir", "=", "config", ".", "model_dir", "\n", "print", "(", "\"[*] MODEL dir: %s\"", "%", "model_dir", ")", "\n", "save_config", "(", "config", ")", "\n", "save_config", "(", "cc_config", ",", "'cc_params.json'", ",", "model_dir", ")", "\n", "save_config", "(", "dcgan_config", ",", "'dcgan_params.json'", ",", "model_dir", ")", "\n", "save_config", "(", "began_config", ",", "'began_params.json'", ",", "model_dir", ")", "\n", "\n", "\n", "", "def", "save_config", "(", "config", ",", "name", "=", "\"params.json\"", ",", "where", "=", "None", ")", ":", "\n", "    ", "where", "=", "where", "or", "config", ".", "model_dir", "\n", "param_path", "=", "os", ".", "path", ".", "join", "(", "where", ",", "name", ")", "\n", "\n", "print", "(", "\"[*] PARAM path: %s\"", "%", "param_path", ")", "\n", "\n", "with", "open", "(", "param_path", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "config", ".", "__dict__", ",", "fp", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", "\n", "\n", "", "", "def", "get_available_gpus", "(", ")", ":", "\n", "    ", "from", "tensorflow", ".", "python", ".", "client", "import", "device_lib", "\n", "local_device_protos", "=", "device_lib", ".", "list_local_devices", "(", ")", "\n", "return", "[", "x", ".", "name", "for", "x", "in", "local_device_protos", "if", "x", ".", "device_type", "==", "'GPU'", "]", "\n", "\n", "", "def", "distribute_input_data", "(", "data_loader", ",", "num_gpu", ")", ":", "\n", "    ", "'''\n    data_loader is a dictionary of tensors that are fed into our model\n\n    This function takes that dictionary of n*batch_size dimension tensors\n    and breaks it up into n dictionaries with the same key of tensors with\n    dimension batch_size. One is given to each gpu\n    '''", "\n", "if", "num_gpu", "==", "0", ":", "\n", "        ", "return", "{", "'/cpu:0'", ":", "data_loader", "}", "\n", "\n", "", "gpus", "=", "get_available_gpus", "(", ")", "\n", "if", "num_gpu", ">", "len", "(", "gpus", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'number of gpus specified={}, more than gpus available={}'", ".", "format", "(", "num_gpu", ",", "len", "(", "gpus", ")", ")", ")", "\n", "\n", "", "gpus", "=", "gpus", "[", ":", "num_gpu", "]", "\n", "\n", "data_by_gpu", "=", "{", "g", ":", "{", "}", "for", "g", "in", "gpus", "}", "\n", "for", "key", ",", "value", "in", "data_loader", ".", "items", "(", ")", ":", "\n", "        ", "spl_vals", "=", "tf", ".", "split", "(", "value", ",", "num_gpu", ")", "\n", "for", "gpu", ",", "val", "in", "zip", "(", "gpus", ",", "spl_vals", ")", ":", "\n", "            ", "data_by_gpu", "[", "gpu", "]", "[", "key", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.mkocaoglu_CausalGAN.causal_dcgan.utils.make_gif": [[137, 153], ["mpy.VideoClip", "mpy.VideoClip.write_gif", "x.astype", "len", "int", "len"], "function", ["None"], ["", "", "return", "data_by_gpu", "\n", "\n", "\n", "", "def", "rank", "(", "array", ")", ":", "\n", "    ", "return", "len", "(", "array", ".", "shape", ")", "\n", "\n", "", "def", "make_grid", "(", "tensor", ",", "nrow", "=", "8", ",", "padding", "=", "2", ",", "\n", "normalize", "=", "False", ",", "scale_each", "=", "False", ")", ":", "\n", "    ", "\"\"\"Code based on https://github.com/pytorch/vision/blob/master/torchvision/utils.py\n    minor improvement, row/col was reversed\"\"\"", "\n", "nmaps", "=", "tensor", ".", "shape", "[", "0", "]", "\n", "ymaps", "=", "min", "(", "nrow", ",", "nmaps", ")", "\n", "xmaps", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "nmaps", ")", "/", "ymaps", ")", ")", "\n", "height", ",", "width", "=", "int", "(", "tensor", ".", "shape", "[", "1", "]", "+", "padding", ")", ",", "int", "(", "tensor", ".", "shape", "[", "2", "]", "+", "padding", ")", "\n", "grid", "=", "np", ".", "zeros", "(", "[", "height", "*", "ymaps", "+", "1", "+", "padding", "//", "2", ",", "width", "*", "xmaps", "+", "1", "+", "padding", "//", "2", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "k", "=", "0", "\n", "for", "y", "in", "range", "(", "ymaps", ")", ":", "\n"]]}