{"home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.get_edge_array": [[34, 36], ["numpy.array", "networkx.gnp_random_graph().edges", "networkx.gnp_random_graph"], "function", ["None"], ["def", "get_edge_array", "(", "n_count", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "edge", "for", "edge", "in", "nx", ".", "gnp_random_graph", "(", "n_count", ",", "0.1", ")", ".", "edges", "(", ")", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.generate_signal": [[38, 52], ["dataset_test.get_edge_array", "numpy.ones", "numpy.random.uniform", "range", "range", "range", "numpy.random.uniform", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.heterogeneous_test.get_edge_array"], ["", "def", "generate_signal", "(", "snapshot_count", ",", "n_count", ",", "feature_count", ",", "additional_features_keys", "=", "[", "]", ")", ":", "\n", "    ", "edge_indices", "=", "[", "get_edge_array", "(", "n_count", ")", "for", "_", "in", "range", "(", "snapshot_count", ")", "]", "\n", "edge_weights", "=", "[", "np", ".", "ones", "(", "edge_indices", "[", "t", "]", ".", "shape", "[", "1", "]", ")", "for", "t", "in", "range", "(", "snapshot_count", ")", "]", "\n", "features", "=", "[", "\n", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "n_count", ",", "feature_count", ")", ")", "for", "_", "in", "range", "(", "snapshot_count", ")", "\n", "]", "\n", "\n", "if", "additional_features_keys", ":", "\n", "        ", "additional_features", "=", "{", "\n", "key", ":", "[", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "n_count", ",", "feature_count", ")", ")", "for", "_", "in", "range", "(", "snapshot_count", ")", "\n", "]", "for", "key", "in", "additional_features_keys", "}", "\n", "return", "edge_indices", ",", "edge_weights", ",", "features", ",", "additional_features", "\n", "\n", "", "return", "edge_indices", ",", "edge_weights", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.generate_heterogeneous_signal": [[54, 72], ["dataset_test.get_edge_array", "range", "numpy.ones", "range", "numpy.random.uniform", "numpy.random.uniform", "range", "numpy.random.uniform", "numpy.random.uniform", "range", "numpy.random.uniform", "numpy.random.uniform", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.heterogeneous_test.get_edge_array"], ["", "def", "generate_heterogeneous_signal", "(", "snapshot_count", ",", "n_count", ",", "feature_count", ",", "*", "additional_features_keys", ")", ":", "\n", "    ", "edge_index_dicts", "=", "[", "{", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", ":", "get_edge_array", "(", "n_count", ")", "}", "for", "_", "in", "range", "(", "snapshot_count", ")", "]", "\n", "edge_weight_dicts", "=", "[", "{", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", ":", "np", ".", "ones", "(", "edge_index_dicts", "[", "t", "]", "[", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "]", ".", "shape", "[", "1", "]", ")", "}", "\n", "for", "t", "in", "range", "(", "snapshot_count", ")", "]", "\n", "feature_dicts", "=", "[", "{", "'author'", ":", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "n_count", ",", "feature_count", ")", ")", ",", "\n", "'paper'", ":", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "n_count", ",", "feature_count", ")", ")", "}", "for", "_", "in", "range", "(", "snapshot_count", ")", "]", "\n", "\n", "target_dicts", "=", "[", "{", "'author'", ":", "np", ".", "random", ".", "uniform", "(", "0", ",", "10", ",", "(", "n_count", ",", ")", ")", ",", "\n", "'paper'", ":", "np", ".", "random", ".", "uniform", "(", "0", ",", "10", ",", "(", "n_count", ",", ")", ")", "}", "for", "_", "in", "range", "(", "snapshot_count", ")", "]", "\n", "\n", "if", "additional_features_keys", ":", "\n", "        ", "additional_features", "=", "{", "\n", "key", ":", "[", "{", "'author'", ":", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "n_count", ",", "feature_count", ")", ")", ",", "\n", "'paper'", ":", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "n_count", ",", "feature_count", ")", ")", "}", "for", "_", "in", "range", "(", "snapshot_count", ")", "]", "\n", "for", "key", "in", "additional_features_keys", "}", "\n", "return", "edge_index_dicts", ",", "edge_weight_dicts", ",", "feature_dicts", ",", "target_dicts", ",", "additional_features", "\n", "\n", "", "return", "edge_index_dicts", ",", "edge_weight_dicts", ",", "feature_dicts", ",", "target_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_dynamic_graph_temporal_signal_real": [[74, 106], ["dataset_test.generate_signal", "torch_geometric_temporal.signal.DynamicGraphTemporalSignal", "range", "torch_geometric_temporal.signal.DynamicGraphTemporalSignal", "range", "numpy.random.uniform", "numpy.floor().astype", "range", "range", "numpy.floor", "numpy.random.uniform"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_signal"], ["", "def", "test_dynamic_graph_temporal_signal_real", "(", ")", ":", "\n", "\n", "    ", "snapshot_count", "=", "250", "\n", "n_count", "=", "100", "\n", "feature_count", "=", "32", "\n", "\n", "edge_indices", ",", "edge_weights", ",", "features", "=", "generate_signal", "(", "250", ",", "100", ",", "32", ")", "\n", "\n", "targets", "=", "[", "np", ".", "random", ".", "uniform", "(", "0", ",", "10", ",", "(", "n_count", ",", ")", ")", "for", "_", "in", "range", "(", "snapshot_count", ")", "]", "\n", "\n", "dataset", "=", "DynamicGraphTemporalSignal", "(", "edge_indices", ",", "edge_weights", ",", "features", ",", "targets", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "100", ",", ")", "\n", "\n", "", "", "targets", "=", "[", "\n", "np", ".", "floor", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "10", ",", "(", "n_count", ",", ")", ")", ")", ".", "astype", "(", "int", ")", "\n", "for", "_", "in", "range", "(", "snapshot_count", ")", "\n", "]", "\n", "\n", "dataset", "=", "DynamicGraphTemporalSignal", "(", "edge_indices", ",", "edge_weights", ",", "features", ",", "targets", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "100", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_static_graph_temporal_signal": [[108, 115], ["torch_geometric_temporal.signal.StaticGraphTemporalSignal"], "function", ["None"], ["", "", "", "def", "test_static_graph_temporal_signal", "(", ")", ":", "\n", "    ", "dataset", "=", "StaticGraphTemporalSignal", "(", "None", ",", "None", ",", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "edge_index", "is", "None", "\n", "assert", "snapshot", ".", "edge_attr", "is", "None", "\n", "assert", "snapshot", ".", "x", "is", "None", "\n", "assert", "snapshot", ".", "y", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_dynamic_graph_temporal_signal": [[117, 126], ["torch_geometric_temporal.signal.DynamicGraphTemporalSignal"], "function", ["None"], ["", "", "def", "test_dynamic_graph_temporal_signal", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicGraphTemporalSignal", "(", "\n", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", "\n", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "edge_index", "is", "None", "\n", "assert", "snapshot", ".", "edge_attr", "is", "None", "\n", "assert", "snapshot", ".", "x", "is", "None", "\n", "assert", "snapshot", ".", "y", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_static_graph_temporal_signal_typing": [[128, 135], ["torch_geometric_temporal.signal.StaticGraphTemporalSignal", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_static_graph_temporal_signal_typing", "(", ")", ":", "\n", "    ", "dataset", "=", "StaticGraphTemporalSignal", "(", "None", ",", "None", ",", "[", "np", ".", "array", "(", "[", "1", "]", ")", "]", ",", "[", "np", ".", "array", "(", "[", "2", "]", ")", "]", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "edge_index", "is", "None", "\n", "assert", "snapshot", ".", "edge_attr", "is", "None", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_dynamic_graph_static_signal_typing": [[137, 144], ["torch_geometric_temporal.signal.DynamicGraphStaticSignal"], "function", ["None"], ["", "", "def", "test_dynamic_graph_static_signal_typing", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicGraphStaticSignal", "(", "[", "None", "]", ",", "[", "None", "]", ",", "None", ",", "[", "None", "]", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "edge_index", "is", "None", "\n", "assert", "snapshot", ".", "edge_attr", "is", "None", "\n", "assert", "snapshot", ".", "x", "is", "None", "\n", "assert", "snapshot", ".", "y", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_static_graph_temporal_signal_additional_attrs": [[146, 153], ["torch_geometric_temporal.signal.StaticGraphTemporalSignal", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_static_graph_temporal_signal_additional_attrs", "(", ")", ":", "\n", "    ", "dataset", "=", "StaticGraphTemporalSignal", "(", "None", ",", "None", ",", "[", "None", "]", ",", "[", "None", "]", ",", "\n", "optional1", "=", "[", "np", ".", "array", "(", "[", "1", "]", ")", "]", ",", "optional2", "=", "[", "np", ".", "array", "(", "[", "2", "]", ")", "]", ")", "\n", "assert", "dataset", ".", "additional_feature_keys", "==", "[", "\"optional1\"", ",", "\"optional2\"", "]", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "optional1", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "optional2", ".", "shape", "==", "(", "1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_dynamic_graph_static_signal_additional_attrs": [[155, 162], ["torch_geometric_temporal.signal.DynamicGraphStaticSignal", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_dynamic_graph_static_signal_additional_attrs", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicGraphStaticSignal", "(", "[", "None", "]", ",", "[", "None", "]", ",", "None", ",", "[", "None", "]", ",", "\n", "optional1", "=", "[", "np", ".", "array", "(", "[", "1", "]", ")", "]", ",", "optional2", "=", "[", "np", ".", "array", "(", "[", "2", "]", ")", "]", ")", "\n", "assert", "dataset", ".", "additional_feature_keys", "==", "[", "\"optional1\"", ",", "\"optional2\"", "]", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "optional1", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "optional2", ".", "shape", "==", "(", "1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_dynamic_graph_temporal_signal_additional_attrs": [[164, 171], ["torch_geometric_temporal.signal.DynamicGraphTemporalSignal", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_dynamic_graph_temporal_signal_additional_attrs", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicGraphTemporalSignal", "(", "[", "None", "]", ",", "[", "None", "]", ",", "[", "None", "]", ",", "[", "None", "]", ",", "\n", "optional1", "=", "[", "np", ".", "array", "(", "[", "1", "]", ")", "]", ",", "optional2", "=", "[", "np", ".", "array", "(", "[", "2", "]", ")", "]", ")", "\n", "assert", "dataset", ".", "additional_feature_keys", "==", "[", "\"optional1\"", ",", "\"optional2\"", "]", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "optional1", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "optional2", ".", "shape", "==", "(", "1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_static_hetero_graph_temporal_signal": [[173, 180], ["torch_geometric_temporal.signal.StaticHeteroGraphTemporalSignal", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "test_static_hetero_graph_temporal_signal", "(", ")", ":", "\n", "    ", "dataset", "=", "StaticHeteroGraphTemporalSignal", "(", "None", ",", "None", ",", "[", "None", "]", ",", "[", "None", "]", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "node_stores", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "edge_stores", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_static_hetero_graph_temporal_signal_typing": [[182, 189], ["torch_geometric_temporal.signal.StaticHeteroGraphTemporalSignal", "len", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_static_hetero_graph_temporal_signal_typing", "(", ")", ":", "\n", "    ", "dataset", "=", "StaticHeteroGraphTemporalSignal", "(", "None", ",", "None", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "]", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "2", "]", ")", "}", "]", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_static_hetero_graph_temporal_signal_additional_attrs": [[191, 201], ["torch_geometric_temporal.signal.StaticHeteroGraphTemporalSignal", "list", "dict().keys", "numpy.array", "numpy.array", "dict"], "function", ["None"], ["", "", "def", "test_static_hetero_graph_temporal_signal_additional_attrs", "(", ")", ":", "\n", "    ", "dataset", "=", "StaticHeteroGraphTemporalSignal", "(", "None", ",", "None", ",", "[", "None", "]", ",", "[", "None", "]", ",", "\n", "optional1", "=", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "]", ",", "\n", "optional2", "=", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "2", "]", ")", "}", "]", ",", "\n", "optional3", "=", "[", "None", "]", ")", "\n", "assert", "dataset", ".", "additional_feature_keys", "==", "[", "\"optional1\"", ",", "\"optional2\"", ",", "\"optional3\"", "]", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'optional1'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'optional2'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "\"optional3\"", "not", "in", "list", "(", "dict", "(", "snapshot", ".", "node_stores", "[", "0", "]", ")", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_static_hetero_graph_temporal_signal_edges": [[203, 215], ["torch_geometric_temporal.signal.StaticHeteroGraphTemporalSignal", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_static_hetero_graph_temporal_signal_edges", "(", ")", ":", "\n", "    ", "dataset", "=", "StaticHeteroGraphTemporalSignal", "(", "{", "(", "\"author\"", ",", "\"writes\"", ",", "\"paper\"", ")", ":", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ")", "}", ",", "\n", "{", "(", "\"author\"", ",", "\"writes\"", ",", "\"paper\"", ")", ":", "np", ".", "array", "(", "[", "[", "0.1", "]", ",", "[", "0.1", "]", "]", ")", "}", ",", "\n", "[", "{", "\"author\"", ":", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "0", "]", "]", ")", ",", "\n", "\"paper\"", ":", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "0", "]", "]", ")", "}", ",", "\n", "{", "\"author\"", ":", "np", ".", "array", "(", "[", "[", "0.1", "]", ",", "[", "0.1", "]", "]", ")", ",", "\n", "\"paper\"", ":", "np", ".", "array", "(", "[", "[", "0.1", "]", ",", "[", "0.1", "]", ",", "[", "0.1", "]", "]", ")", "}", "]", ",", "\n", "[", "None", ",", "None", "]", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_index'", "]", ".", "shape", "==", "(", "2", ",", "2", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_attr'", "]", ".", "shape", "==", "(", "2", ",", "1", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_index'", "]", ".", "shape", "[", "0", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_attr'", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_dynamic_hetero_graph_static_signal": [[217, 224], ["torch_geometric_temporal.signal.DynamicHeteroGraphStaticSignal", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_static_signal", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphStaticSignal", "(", "[", "None", "]", ",", "[", "None", "]", ",", "None", ",", "[", "None", "]", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "node_stores", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "edge_stores", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_dynamic_hetero_graph_static_signal_typing": [[226, 233], ["torch_geometric_temporal.signal.DynamicHeteroGraphStaticSignal", "numpy.array", "len", "numpy.array"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_static_signal_typing", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphStaticSignal", "(", "[", "None", "]", ",", "[", "None", "]", ",", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "2", "]", ")", "}", "]", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_dynamic_hetero_graph_static_signal_additional_attrs": [[235, 245], ["torch_geometric_temporal.signal.DynamicHeteroGraphStaticSignal", "list", "dict().keys", "numpy.array", "numpy.array", "dict"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_static_signal_additional_attrs", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphStaticSignal", "(", "[", "None", "]", ",", "[", "None", "]", ",", "None", ",", "[", "None", "]", ",", "\n", "optional1", "=", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "]", ",", "\n", "optional2", "=", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "2", "]", ")", "}", "]", ",", "\n", "optional3", "=", "[", "None", "]", ")", "\n", "assert", "dataset", ".", "additional_feature_keys", "==", "[", "\"optional1\"", ",", "\"optional2\"", ",", "\"optional3\"", "]", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'optional1'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'optional2'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "\"optional3\"", "not", "in", "list", "(", "dict", "(", "snapshot", ".", "node_stores", "[", "0", "]", ")", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_dynamic_hetero_graph_static_signal_edges": [[247, 257], ["torch_geometric_temporal.signal.DynamicHeteroGraphStaticSignal", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_static_signal_edges", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphStaticSignal", "(", "[", "{", "(", "\"author\"", ",", "\"writes\"", ",", "\"paper\"", ")", ":", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ")", "}", "]", ",", "\n", "[", "{", "(", "\"author\"", ",", "\"writes\"", ",", "\"paper\"", ")", ":", "np", ".", "array", "(", "[", "[", "0.1", "]", ",", "[", "0.1", "]", "]", ")", "}", "]", ",", "\n", "{", "\"author\"", ":", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "0", "]", "]", ")", ",", "\n", "\"paper\"", ":", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "0", "]", "]", ")", "}", ",", "\n", "[", "None", "]", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_index'", "]", ".", "shape", "==", "(", "2", ",", "2", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_attr'", "]", ".", "shape", "==", "(", "2", ",", "1", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_index'", "]", ".", "shape", "[", "0", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_attr'", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_dynamic_hetero_graph_temporal_signal": [[259, 268], ["torch_geometric_temporal.signal.DynamicHeteroGraphTemporalSignal", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_temporal_signal", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphTemporalSignal", "(", "\n", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", "\n", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "node_stores", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "edge_stores", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_dynamic_hetero_graph_temporal_signal_typing": [[270, 277], ["torch_geometric_temporal.signal.DynamicHeteroGraphTemporalSignal", "len", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_temporal_signal_typing", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphTemporalSignal", "(", "[", "None", "]", ",", "[", "None", "]", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "]", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "2", "]", ")", "}", "]", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_dynamic_hetero_graph_temporal_signal_additional_attrs": [[279, 289], ["torch_geometric_temporal.signal.DynamicHeteroGraphTemporalSignal", "list", "dict().keys", "numpy.array", "numpy.array", "dict"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_temporal_signal_additional_attrs", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphTemporalSignal", "(", "[", "None", "]", ",", "[", "None", "]", ",", "[", "None", "]", ",", "[", "None", "]", ",", "\n", "optional1", "=", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "]", ",", "\n", "optional2", "=", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "2", "]", ")", "}", "]", ",", "\n", "optional3", "=", "[", "None", "]", ")", "\n", "assert", "dataset", ".", "additional_feature_keys", "==", "[", "\"optional1\"", ",", "\"optional2\"", ",", "\"optional3\"", "]", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'optional1'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'optional2'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "\"optional3\"", "not", "in", "list", "(", "dict", "(", "snapshot", ".", "node_stores", "[", "0", "]", ")", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_dynamic_hetero_graph_temporal_signal_edges": [[291, 301], ["torch_geometric_temporal.signal.DynamicHeteroGraphTemporalSignal", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_temporal_signal_edges", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphTemporalSignal", "(", "[", "{", "(", "\"author\"", ",", "\"writes\"", ",", "\"paper\"", ")", ":", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ")", "}", "]", ",", "\n", "[", "{", "(", "\"author\"", ",", "\"writes\"", ",", "\"paper\"", ")", ":", "np", ".", "array", "(", "[", "[", "0.1", "]", ",", "[", "0.1", "]", "]", ")", "}", "]", ",", "\n", "[", "{", "\"author\"", ":", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "0", "]", "]", ")", ",", "\n", "\"paper\"", ":", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "0", "]", "]", ")", "}", "]", ",", "\n", "[", "None", "]", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_index'", "]", ".", "shape", "==", "(", "2", ",", "2", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_attr'", "]", ".", "shape", "==", "(", "2", ",", "1", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_index'", "]", ".", "shape", "[", "0", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_attr'", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_chickenpox": [[304, 313], ["torch_geometric_temporal.dataset.ChickenpoxDatasetLoader", "torch_geometric_temporal.dataset.ChickenpoxDatasetLoader.get_dataset", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset"], ["", "", "def", "test_chickenpox", "(", ")", ":", "\n", "    ", "loader", "=", "ChickenpoxDatasetLoader", "(", ")", "\n", "dataset", "=", "loader", ".", "get_dataset", "(", ")", "\n", "for", "epoch", "in", "range", "(", "3", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "==", "(", "2", ",", "102", ")", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "==", "(", "102", ",", ")", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "20", ",", "4", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "20", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_pedalme": [[315, 324], ["torch_geometric_temporal.dataset.PedalMeDatasetLoader", "torch_geometric_temporal.dataset.PedalMeDatasetLoader.get_dataset", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset"], ["", "", "", "def", "test_pedalme", "(", ")", ":", "\n", "    ", "loader", "=", "PedalMeDatasetLoader", "(", ")", "\n", "dataset", "=", "loader", ".", "get_dataset", "(", ")", "\n", "for", "epoch", "in", "range", "(", "3", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "==", "(", "2", ",", "225", ")", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "==", "(", "225", ",", ")", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "15", ",", "4", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "15", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_wiki": [[326, 335], ["torch_geometric_temporal.dataset.WikiMathsDatasetLoader", "torch_geometric_temporal.dataset.WikiMathsDatasetLoader.get_dataset", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset"], ["", "", "", "def", "test_wiki", "(", ")", ":", "\n", "    ", "loader", "=", "WikiMathsDatasetLoader", "(", ")", "\n", "dataset", "=", "loader", ".", "get_dataset", "(", ")", "\n", "for", "epoch", "in", "range", "(", "1", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "==", "(", "2", ",", "27079", ")", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "==", "(", "27079", ",", ")", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "1068", ",", "8", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "1068", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_windmilllarge": [[337, 346], ["torch_geometric_temporal.dataset.WindmillOutputLargeDatasetLoader", "torch_geometric_temporal.dataset.WindmillOutputLargeDatasetLoader.get_dataset", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset"], ["", "", "", "def", "test_windmilllarge", "(", ")", ":", "\n", "    ", "loader", "=", "WindmillOutputLargeDatasetLoader", "(", ")", "\n", "dataset", "=", "loader", ".", "get_dataset", "(", ")", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "==", "(", "2", ",", "101761", ")", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "==", "(", "101761", ",", ")", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "319", ",", "8", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "319", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_windmillsmall": [[348, 357], ["torch_geometric_temporal.dataset.WindmillOutputSmallDatasetLoader", "torch_geometric_temporal.dataset.WindmillOutputSmallDatasetLoader.get_dataset", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset"], ["", "", "", "def", "test_windmillsmall", "(", ")", ":", "\n", "    ", "loader", "=", "WindmillOutputSmallDatasetLoader", "(", ")", "\n", "dataset", "=", "loader", ".", "get_dataset", "(", ")", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "==", "(", "2", ",", "121", ")", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "==", "(", "121", ",", ")", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "11", ",", "8", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "11", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_windmillmedium": [[359, 368], ["torch_geometric_temporal.dataset.WindmillOutputMediumDatasetLoader", "torch_geometric_temporal.dataset.WindmillOutputMediumDatasetLoader.get_dataset", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset"], ["", "", "", "def", "test_windmillmedium", "(", ")", ":", "\n", "    ", "loader", "=", "WindmillOutputMediumDatasetLoader", "(", ")", "\n", "dataset", "=", "loader", ".", "get_dataset", "(", ")", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "==", "(", "2", ",", "676", ")", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "==", "(", "676", ",", ")", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "26", ",", "8", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "26", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_covid": [[370, 379], ["torch_geometric_temporal.dataset.EnglandCovidDatasetLoader", "torch_geometric_temporal.dataset.EnglandCovidDatasetLoader.get_dataset", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset"], ["", "", "", "def", "test_covid", "(", ")", ":", "\n", "    ", "loader", "=", "EnglandCovidDatasetLoader", "(", ")", "\n", "dataset", "=", "loader", ".", "get_dataset", "(", ")", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "==", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "129", ",", "8", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "129", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_montevideobus": [[381, 390], ["torch_geometric_temporal.dataset.MontevideoBusDatasetLoader", "torch_geometric_temporal.dataset.MontevideoBusDatasetLoader.get_dataset", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset"], ["", "", "", "def", "test_montevideobus", "(", ")", ":", "\n", "    ", "loader", "=", "MontevideoBusDatasetLoader", "(", ")", "\n", "dataset", "=", "loader", ".", "get_dataset", "(", ")", "\n", "for", "epoch", "in", "range", "(", "1", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "==", "(", "2", ",", "690", ")", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "==", "(", "690", ",", ")", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "675", ",", "4", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "675", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_metrla": [[392, 401], ["torch_geometric_temporal.dataset.METRLADatasetLoader", "torch_geometric_temporal.dataset.METRLADatasetLoader.get_dataset", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset"], ["", "", "", "def", "test_metrla", "(", ")", ":", "\n", "    ", "loader", "=", "METRLADatasetLoader", "(", "raw_data_dir", "=", "\"/tmp/\"", ")", "\n", "dataset", "=", "loader", ".", "get_dataset", "(", ")", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "==", "(", "2", ",", "1722", ")", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "==", "(", "1722", ",", ")", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "207", ",", "2", ",", "12", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "207", ",", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_metrla_task_generator": [[403, 412], ["torch_geometric_temporal.dataset.METRLADatasetLoader", "torch_geometric_temporal.dataset.METRLADatasetLoader.get_dataset", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset"], ["", "", "", "def", "test_metrla_task_generator", "(", ")", ":", "\n", "    ", "loader", "=", "METRLADatasetLoader", "(", "raw_data_dir", "=", "\"/tmp/\"", ")", "\n", "dataset", "=", "loader", ".", "get_dataset", "(", "num_timesteps_in", "=", "6", ",", "num_timesteps_out", "=", "5", ")", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "==", "(", "2", ",", "1722", ")", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "==", "(", "1722", ",", ")", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "207", ",", "2", ",", "6", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "207", ",", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_pemsbay": [[414, 423], ["torch_geometric_temporal.dataset.PemsBayDatasetLoader", "torch_geometric_temporal.dataset.PemsBayDatasetLoader.get_dataset", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset"], ["", "", "", "def", "test_pemsbay", "(", ")", ":", "\n", "    ", "loader", "=", "PemsBayDatasetLoader", "(", "raw_data_dir", "=", "\"/tmp/\"", ")", "\n", "dataset", "=", "loader", ".", "get_dataset", "(", ")", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "==", "(", "2", ",", "2694", ")", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "==", "(", "2694", ",", ")", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "325", ",", "2", ",", "12", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "325", ",", "2", ",", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_pemsbay_task_generator": [[425, 434], ["torch_geometric_temporal.dataset.PemsBayDatasetLoader", "torch_geometric_temporal.dataset.PemsBayDatasetLoader.get_dataset", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset"], ["", "", "", "def", "test_pemsbay_task_generator", "(", ")", ":", "\n", "    ", "loader", "=", "PemsBayDatasetLoader", "(", "raw_data_dir", "=", "\"/tmp/\"", ")", "\n", "dataset", "=", "loader", ".", "get_dataset", "(", "num_timesteps_in", "=", "6", ",", "num_timesteps_out", "=", "5", ")", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "==", "(", "2", ",", "2694", ")", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "==", "(", "2694", ",", ")", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "325", ",", "2", ",", "6", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "325", ",", "2", ",", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.check_tennis_data": [[436, 456], ["torch_geometric_temporal.dataset.TwitterTennisDatasetLoader", "torch_geometric_temporal.dataset.TwitterTennisDatasetLoader.get_dataset", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset"], ["", "", "", "def", "check_tennis_data", "(", "event_id", ",", "node_count", ",", "mode", ",", "edge_cnt", ")", ":", "\n", "    ", "loader", "=", "TwitterTennisDatasetLoader", "(", "event_id", ",", "N", "=", "node_count", ",", "feature_mode", "=", "mode", ")", "\n", "dataset", "=", "loader", ".", "get_dataset", "(", ")", "\n", "for", "epoch", "in", "range", "(", "3", ")", ":", "\n", "        ", "i", "=", "0", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "if", "node_count", "==", "1000", ":", "\n", "                ", "assert", "snapshot", ".", "edge_index", ".", "shape", "==", "(", "2", ",", "edge_cnt", "[", "i", "]", ")", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "==", "(", "edge_cnt", "[", "i", "]", ",", ")", "\n", "", "else", ":", "\n", "                ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "<=", "edge_cnt", "[", "i", "]", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "<=", "edge_cnt", "[", "i", "]", "\n", "", "if", "mode", "==", "\"encoded\"", ":", "\n", "                ", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "node_count", ",", "16", ")", "\n", "", "elif", "mode", "==", "\"diagonal\"", ":", "\n", "                ", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "node_count", ",", "node_count", ")", "\n", "", "else", ":", "\n", "                ", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "node_count", ",", "2", ")", "\n", "", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "node_count", ",", ")", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_twitter_tennis_rg17": [[458, 584], ["dataset_test.check_tennis_data", "dataset_test.check_tennis_data"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.check_tennis_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.check_tennis_data"], ["", "", "", "def", "test_twitter_tennis_rg17", "(", ")", ":", "\n", "    ", "edges_in_snapshots", "=", "[", "\n", "89", ",", "\n", "61", ",", "\n", "67", ",", "\n", "283", ",", "\n", "569", ",", "\n", "515", ",", "\n", "527", ",", "\n", "262", ",", "\n", "115", ",", "\n", "85", ",", "\n", "127", ",", "\n", "315", ",", "\n", "639", ",", "\n", "841", ",", "\n", "662", ",", "\n", "341", ",", "\n", "136", ",", "\n", "108", ",", "\n", "127", ",", "\n", "257", ",", "\n", "564", ",", "\n", "664", ",", "\n", "646", ",", "\n", "424", ",", "\n", "179", ",", "\n", "82", ",", "\n", "111", ",", "\n", "250", ",", "\n", "689", ",", "\n", "897", ",", "\n", "597", ",", "\n", "352", ",", "\n", "225", ",", "\n", "109", ",", "\n", "81", ",", "\n", "305", ",", "\n", "483", ",", "\n", "816", ",", "\n", "665", ",", "\n", "310", ",", "\n", "141", ",", "\n", "145", ",", "\n", "86", ",", "\n", "285", ",", "\n", "748", ",", "\n", "703", ",", "\n", "682", ",", "\n", "341", ",", "\n", "199", ",", "\n", "102", ",", "\n", "84", ",", "\n", "327", ",", "\n", "786", ",", "\n", "776", ",", "\n", "419", ",", "\n", "208", ",", "\n", "91", ",", "\n", "78", ",", "\n", "83", ",", "\n", "263", ",", "\n", "670", ",", "\n", "880", ",", "\n", "731", ",", "\n", "361", ",", "\n", "122", ",", "\n", "68", ",", "\n", "101", ",", "\n", "269", ",", "\n", "547", ",", "\n", "673", ",", "\n", "612", ",", "\n", "221", ",", "\n", "156", ",", "\n", "99", ",", "\n", "137", ",", "\n", "262", ",", "\n", "373", ",", "\n", "368", ",", "\n", "648", ",", "\n", "288", ",", "\n", "127", ",", "\n", "62", ",", "\n", "84", ",", "\n", "319", ",", "\n", "936", ",", "\n", "889", ",", "\n", "699", ",", "\n", "291", ",", "\n", "186", ",", "\n", "83", ",", "\n", "99", ",", "\n", "191", ",", "\n", "343", ",", "\n", "502", ",", "\n", "561", ",", "\n", "283", ",", "\n", "96", ",", "\n", "92", ",", "\n", "74", ",", "\n", "178", ",", "\n", "461", ",", "\n", "720", ",", "\n", "712", ",", "\n", "279", ",", "\n", "88", ",", "\n", "41", ",", "\n", "74", ",", "\n", "137", ",", "\n", "266", ",", "\n", "664", ",", "\n", "364", ",", "\n", "167", ",", "\n", "68", ",", "\n", "59", ",", "\n", "48", ",", "\n", "178", ",", "\n", "391", ",", "\n", "815", ",", "\n", "315", ",", "\n", "189", ",", "\n", "]", "\n", "\n", "check_tennis_data", "(", "\"rg17\"", ",", "1000", ",", "None", ",", "edges_in_snapshots", ")", "\n", "check_tennis_data", "(", "\"rg17\"", ",", "50", ",", "\"diagonal\"", ",", "edges_in_snapshots", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_twitter_tennis_uo17": [[586, 704], ["dataset_test.check_tennis_data", "dataset_test.check_tennis_data"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.check_tennis_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.check_tennis_data"], ["", "def", "test_twitter_tennis_uo17", "(", ")", ":", "\n", "    ", "edges_in_snapshots", "=", "[", "\n", "88", ",", "\n", "113", ",", "\n", "273", ",", "\n", "423", ",", "\n", "718", ",", "\n", "625", ",", "\n", "640", ",", "\n", "758", ",", "\n", "434", ",", "\n", "137", ",", "\n", "289", ",", "\n", "450", ",", "\n", "625", ",", "\n", "489", ",", "\n", "336", ",", "\n", "462", ",", "\n", "284", ",", "\n", "130", ",", "\n", "188", ",", "\n", "335", ",", "\n", "523", ",", "\n", "652", ",", "\n", "584", ",", "\n", "619", ",", "\n", "452", ",", "\n", "198", ",", "\n", "206", ",", "\n", "387", ",", "\n", "464", ",", "\n", "698", ",", "\n", "601", ",", "\n", "434", ",", "\n", "279", ",", "\n", "180", ",", "\n", "162", ",", "\n", "350", ",", "\n", "613", ",", "\n", "793", ",", "\n", "474", ",", "\n", "368", ",", "\n", "231", ",", "\n", "195", ",", "\n", "152", ",", "\n", "404", ",", "\n", "591", ",", "\n", "709", ",", "\n", "642", ",", "\n", "476", ",", "\n", "413", ",", "\n", "248", ",", "\n", "160", ",", "\n", "296", ",", "\n", "521", ",", "\n", "727", ",", "\n", "725", ",", "\n", "542", ",", "\n", "200", ",", "\n", "157", ",", "\n", "268", ",", "\n", "382", ",", "\n", "638", ",", "\n", "612", ",", "\n", "640", ",", "\n", "588", ",", "\n", "250", ",", "\n", "142", ",", "\n", "142", ",", "\n", "197", ",", "\n", "341", ",", "\n", "458", ",", "\n", "395", ",", "\n", "535", ",", "\n", "256", ",", "\n", "128", ",", "\n", "180", ",", "\n", "274", ",", "\n", "732", ",", "\n", "610", ",", "\n", "632", ",", "\n", "732", ",", "\n", "481", ",", "\n", "194", ",", "\n", "206", ",", "\n", "241", ",", "\n", "287", ",", "\n", "304", ",", "\n", "376", ",", "\n", "742", ",", "\n", "196", ",", "\n", "172", ",", "\n", "117", ",", "\n", "220", ",", "\n", "311", ",", "\n", "389", ",", "\n", "610", ",", "\n", "596", ",", "\n", "165", ",", "\n", "183", ",", "\n", "183", ",", "\n", "163", ",", "\n", "406", ",", "\n", "738", ",", "\n", "464", ",", "\n", "209", ",", "\n", "103", ",", "\n", "143", ",", "\n", "115", ",", "\n", "227", ",", "\n", "203", ",", "\n", "455", ",", "\n", "638", ",", "\n", "195", ",", "\n", "]", "\n", "\n", "check_tennis_data", "(", "\"uo17\"", ",", "1000", ",", "None", ",", "edges_in_snapshots", ")", "\n", "check_tennis_data", "(", "\"uo17\"", ",", "200", ",", "\"encoded\"", ",", "edges_in_snapshots", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_mtm": [[706, 715], ["torch_geometric_temporal.dataset.MTMDatasetLoader", "torch_geometric_temporal.dataset.MTMDatasetLoader.get_dataset", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset"], ["", "def", "test_mtm", "(", ")", ":", "\n", "    ", "loader", "=", "MTMDatasetLoader", "(", ")", "\n", "dataset", "=", "loader", ".", "get_dataset", "(", ")", "\n", "for", "epoch", "in", "range", "(", "3", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "==", "(", "2", ",", "19", ")", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "==", "(", "19", ",", ")", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "3", ",", "21", ",", "16", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "16", ",", "6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_discrete_train_test_split_static": [[717, 735], ["torch_geometric_temporal.dataset.ChickenpoxDatasetLoader", "torch_geometric_temporal.dataset.ChickenpoxDatasetLoader.get_dataset", "torch_geometric_temporal.signal.temporal_signal_split", "range", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.train_test_split.temporal_signal_split"], ["", "", "", "def", "test_discrete_train_test_split_static", "(", ")", ":", "\n", "    ", "loader", "=", "ChickenpoxDatasetLoader", "(", ")", "\n", "dataset", "=", "loader", ".", "get_dataset", "(", ")", "\n", "train_dataset", ",", "test_dataset", "=", "temporal_signal_split", "(", "dataset", ",", "0.8", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "train_dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "==", "(", "2", ",", "102", ")", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "==", "(", "102", ",", ")", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "20", ",", "4", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "20", ",", ")", "\n", "\n", "", "", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "test_dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "==", "(", "2", ",", "102", ")", "\n", "assert", "snapshot", ".", "edge_attr", ".", "shape", "==", "(", "102", ",", ")", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "20", ",", "4", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "20", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_discrete_train_test_split_dynamic": [[737, 772], ["dataset_test.generate_signal", "torch_geometric_temporal.signal.DynamicGraphTemporalSignal", "torch_geometric_temporal.signal.temporal_signal_split", "range", "range", "numpy.random.uniform", "range", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_signal", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.train_test_split.temporal_signal_split"], ["", "", "", "def", "test_discrete_train_test_split_dynamic", "(", ")", ":", "\n", "\n", "    ", "snapshot_count", "=", "250", "\n", "n_count", "=", "100", "\n", "feature_count", "=", "32", "\n", "\n", "edge_indices", ",", "edge_weights", ",", "features", ",", "additional_features", "=", "generate_signal", "(", "\n", "250", ",", "100", ",", "32", ",", "[", "\"optional1\"", ",", "\"optional2\"", "]", "\n", ")", "\n", "\n", "targets", "=", "[", "np", ".", "random", ".", "uniform", "(", "0", ",", "10", ",", "(", "n_count", ",", ")", ")", "for", "_", "in", "range", "(", "snapshot_count", ")", "]", "\n", "\n", "dataset", "=", "DynamicGraphTemporalSignal", "(", "\n", "edge_indices", ",", "edge_weights", ",", "features", ",", "targets", ",", "**", "additional_features", "\n", ")", "\n", "\n", "train_dataset", ",", "test_dataset", "=", "temporal_signal_split", "(", "dataset", ",", "0.8", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "test_dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "100", ",", ")", "\n", "assert", "getattr", "(", "snapshot", ",", "\"optional1\"", ")", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "assert", "getattr", "(", "snapshot", ",", "\"optional2\"", ")", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "\n", "", "", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "train_dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "100", ",", ")", "\n", "assert", "getattr", "(", "snapshot", ",", "\"optional1\"", ")", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "assert", "getattr", "(", "snapshot", ",", "\"optional2\"", ")", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_train_test_split_dynamic_graph_static_signal": [[774, 808], ["dataset_test.generate_signal", "torch_geometric_temporal.signal.StaticGraphTemporalSignal", "torch_geometric_temporal.signal.temporal_signal_split", "range", "range", "numpy.random.uniform", "range", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_signal", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.train_test_split.temporal_signal_split"], ["", "", "", "def", "test_train_test_split_dynamic_graph_static_signal", "(", ")", ":", "\n", "\n", "    ", "snapshot_count", "=", "250", "\n", "n_count", "=", "100", "\n", "feature_count", "=", "32", "\n", "\n", "edge_indices", ",", "edge_weights", ",", "features", ",", "additional_features", "=", "generate_signal", "(", "\n", "250", ",", "100", ",", "32", ",", "[", "\"optional1\"", ",", "\"optional2\"", "]", "\n", ")", "\n", "\n", "targets", "=", "[", "np", ".", "random", ".", "uniform", "(", "0", ",", "10", ",", "(", "n_count", ",", ")", ")", "for", "_", "in", "range", "(", "snapshot_count", ")", "]", "\n", "dataset", "=", "StaticGraphTemporalSignal", "(", "\n", "edge_indices", "[", "0", "]", ",", "edge_weights", "[", "0", "]", ",", "features", ",", "targets", ",", "**", "additional_features", "\n", ")", "\n", "\n", "train_dataset", ",", "test_dataset", "=", "temporal_signal_split", "(", "dataset", ",", "0.8", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "test_dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "100", ",", ")", "\n", "assert", "getattr", "(", "snapshot", ",", "\"optional1\"", ")", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "assert", "getattr", "(", "snapshot", ",", "\"optional2\"", ")", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "\n", "", "", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "train_dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "100", ",", ")", "\n", "assert", "getattr", "(", "snapshot", ",", "\"optional1\"", ")", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "assert", "getattr", "(", "snapshot", ",", "\"optional2\"", ")", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_discrete_train_test_split_dynamic_graph_static_signal": [[810, 847], ["dataset_test.generate_signal", "torch_geometric_temporal.signal.DynamicGraphStaticSignal", "torch_geometric_temporal.signal.temporal_signal_split", "range", "range", "numpy.random.uniform", "range", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_signal", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.train_test_split.temporal_signal_split"], ["", "", "", "def", "test_discrete_train_test_split_dynamic_graph_static_signal", "(", ")", ":", "\n", "\n", "    ", "snapshot_count", "=", "250", "\n", "n_count", "=", "100", "\n", "feature_count", "=", "32", "\n", "\n", "edge_indices", ",", "edge_weights", ",", "features", ",", "additional_features", "=", "generate_signal", "(", "\n", "250", ",", "100", ",", "32", ",", "[", "\"optional1\"", ",", "\"optional2\"", "]", "\n", ")", "\n", "\n", "feature", "=", "features", "[", "0", "]", "\n", "\n", "targets", "=", "[", "np", ".", "random", ".", "uniform", "(", "0", ",", "10", ",", "(", "n_count", ",", ")", ")", "for", "_", "in", "range", "(", "snapshot_count", ")", "]", "\n", "\n", "dataset", "=", "DynamicGraphStaticSignal", "(", "\n", "edge_indices", ",", "edge_weights", ",", "feature", ",", "targets", ",", "**", "additional_features", "\n", ")", "\n", "\n", "train_dataset", ",", "test_dataset", "=", "temporal_signal_split", "(", "dataset", ",", "0.8", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "test_dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "100", ",", ")", "\n", "assert", "getattr", "(", "snapshot", ",", "\"optional1\"", ")", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "assert", "getattr", "(", "snapshot", ",", "\"optional2\"", ")", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "\n", "", "", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "train_dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "100", ",", ")", "\n", "assert", "getattr", "(", "snapshot", ",", "\"optional1\"", ")", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "assert", "getattr", "(", "snapshot", ",", "\"optional2\"", ")", ".", "shape", "==", "(", "100", ",", "32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_train_test_split_dynamic_hetero_graph_temporal_signal": [[849, 896], ["dataset_test.generate_heterogeneous_signal", "torch_geometric_temporal.signal.DynamicHeteroGraphTemporalSignal", "torch_geometric_temporal.signal.temporal_signal_split", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_heterogeneous_signal", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.train_test_split.temporal_signal_split"], ["", "", "", "def", "test_train_test_split_dynamic_hetero_graph_temporal_signal", "(", ")", ":", "\n", "\n", "    ", "snapshot_count", "=", "250", "\n", "n_count", "=", "100", "\n", "feature_count", "=", "32", "\n", "\n", "edge_index_dicts", ",", "edge_weight_dicts", ",", "feature_dicts", ",", "target_dicts", ",", "additional_feature_dicts", "=", "generate_heterogeneous_signal", "(", "\n", "snapshot_count", ",", "n_count", ",", "feature_count", ",", "\"optional1\"", ",", "\"optional2\"", "\n", ")", "\n", "\n", "dataset", "=", "DynamicHeteroGraphTemporalSignal", "(", "\n", "edge_index_dicts", ",", "edge_weight_dicts", ",", "feature_dicts", ",", "target_dicts", ",", "**", "additional_feature_dicts", "\n", ")", "\n", "\n", "train_dataset", ",", "test_dataset", "=", "temporal_signal_split", "(", "dataset", ",", "0.8", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "test_dataset", ":", "\n", "            ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "2", "\n", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_types", "[", "1", "]", "==", "'paper'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'x'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "n_count", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'y'", "]", ".", "shape", "==", "(", "n_count", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "1", "\n", "assert", "snapshot", ".", "edge_types", "[", "0", "]", "==", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'optional1'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'optional2'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "\n", "", "", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "train_dataset", ":", "\n", "            ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "2", "\n", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_types", "[", "1", "]", "==", "'paper'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'x'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "n_count", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'y'", "]", ".", "shape", "==", "(", "n_count", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "1", "\n", "assert", "snapshot", ".", "edge_types", "[", "0", "]", "==", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'optional1'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'optional2'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_train_test_split_static_hetero_graph_temporal_signal": [[898, 945], ["dataset_test.generate_heterogeneous_signal", "torch_geometric_temporal.signal.StaticHeteroGraphTemporalSignal", "torch_geometric_temporal.signal.temporal_signal_split", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_heterogeneous_signal", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.train_test_split.temporal_signal_split"], ["", "", "", "def", "test_train_test_split_static_hetero_graph_temporal_signal", "(", ")", ":", "\n", "\n", "    ", "snapshot_count", "=", "250", "\n", "n_count", "=", "100", "\n", "feature_count", "=", "32", "\n", "\n", "edge_index_dicts", ",", "edge_weight_dicts", ",", "feature_dicts", ",", "target_dicts", ",", "additional_feature_dicts", "=", "generate_heterogeneous_signal", "(", "\n", "snapshot_count", ",", "n_count", ",", "feature_count", ",", "\"optional1\"", ",", "\"optional2\"", "\n", ")", "\n", "\n", "dataset", "=", "StaticHeteroGraphTemporalSignal", "(", "\n", "edge_index_dicts", "[", "0", "]", ",", "edge_weight_dicts", "[", "0", "]", ",", "feature_dicts", ",", "target_dicts", ",", "**", "additional_feature_dicts", "\n", ")", "\n", "\n", "train_dataset", ",", "test_dataset", "=", "temporal_signal_split", "(", "dataset", ",", "0.8", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "test_dataset", ":", "\n", "            ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "2", "\n", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_types", "[", "1", "]", "==", "'paper'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'x'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "n_count", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'y'", "]", ".", "shape", "==", "(", "n_count", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "1", "\n", "assert", "snapshot", ".", "edge_types", "[", "0", "]", "==", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'optional1'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'optional2'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "\n", "", "", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "train_dataset", ":", "\n", "            ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "2", "\n", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_types", "[", "1", "]", "==", "'paper'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'x'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "n_count", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'y'", "]", ".", "shape", "==", "(", "n_count", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "1", "\n", "assert", "snapshot", ".", "edge_types", "[", "0", "]", "==", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'optional1'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'optional2'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.dataset_test.test_train_test_split_dynamic_hetero_graph_static_signal": [[947, 994], ["dataset_test.generate_heterogeneous_signal", "torch_geometric_temporal.signal.DynamicHeteroGraphStaticSignal", "torch_geometric_temporal.signal.temporal_signal_split", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_heterogeneous_signal", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.train_test_split.temporal_signal_split"], ["", "", "", "def", "test_train_test_split_dynamic_hetero_graph_static_signal", "(", ")", ":", "\n", "\n", "    ", "snapshot_count", "=", "250", "\n", "n_count", "=", "100", "\n", "feature_count", "=", "32", "\n", "\n", "edge_index_dicts", ",", "edge_weight_dicts", ",", "feature_dicts", ",", "target_dicts", ",", "additional_feature_dicts", "=", "generate_heterogeneous_signal", "(", "\n", "snapshot_count", ",", "n_count", ",", "feature_count", ",", "\"optional1\"", ",", "\"optional2\"", "\n", ")", "\n", "\n", "dataset", "=", "DynamicHeteroGraphStaticSignal", "(", "\n", "edge_index_dicts", ",", "edge_weight_dicts", ",", "feature_dicts", "[", "0", "]", ",", "target_dicts", ",", "**", "additional_feature_dicts", "\n", ")", "\n", "\n", "train_dataset", ",", "test_dataset", "=", "temporal_signal_split", "(", "dataset", ",", "0.8", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "test_dataset", ":", "\n", "            ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "2", "\n", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_types", "[", "1", "]", "==", "'paper'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'x'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "n_count", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'y'", "]", ".", "shape", "==", "(", "n_count", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "1", "\n", "assert", "snapshot", ".", "edge_types", "[", "0", "]", "==", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'optional1'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'optional2'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "\n", "", "", "for", "epoch", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "train_dataset", ":", "\n", "            ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "2", "\n", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_types", "[", "1", "]", "==", "'paper'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'x'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "n_count", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'y'", "]", ".", "shape", "==", "(", "n_count", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "1", "\n", "assert", "snapshot", ".", "edge_types", "[", "0", "]", "==", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'optional1'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'optional2'", "]", ".", "shape", "==", "(", "n_count", ",", "feature_count", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.create_mock_data": [[16, 24], ["networkx.watts_strogatz_graph", "torch.LongTensor", "torch.FloatTensor", "numpy.random.uniform", "numpy.array", "nx.watts_strogatz_graph.edges"], "function", ["None"], ["def", "create_mock_data", "(", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ")", ":", "\n", "    ", "\"\"\"\n    Creating a mock feature matrix and edge index.\n    \"\"\"", "\n", "graph", "=", "nx", ".", "watts_strogatz_graph", "(", "number_of_nodes", ",", "edge_per_node", ",", "0.5", ")", "\n", "edge_index", "=", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "[", "edge", "for", "edge", "in", "graph", ".", "edges", "(", ")", "]", ")", ".", "T", ")", "\n", "X", "=", "torch", ".", "FloatTensor", "(", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "(", "number_of_nodes", ",", "in_channels", ")", ")", ")", "\n", "return", "X", ",", "edge_index", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.create_mock_attention_data": [[28, 38], ["networkx.watts_strogatz_graph", "torch.LongTensor", "torch.FloatTensor", "numpy.random.uniform", "numpy.array", "nx.watts_strogatz_graph.edges"], "function", ["None"], ["", "def", "create_mock_attention_data", "(", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ",", "periods", ")", ":", "\n", "    ", "\"\"\"\n    Creating a mock stacked feature matrix and edge index.\n    \"\"\"", "\n", "graph", "=", "nx", ".", "watts_strogatz_graph", "(", "number_of_nodes", ",", "edge_per_node", ",", "0.5", ")", "\n", "edge_index", "=", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "[", "edge", "for", "edge", "in", "graph", ".", "edges", "(", ")", "]", ")", ".", "T", ")", "\n", "X", "=", "torch", ".", "FloatTensor", "(", "\n", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "(", "number_of_nodes", ",", "in_channels", ",", "periods", ")", ")", "\n", ")", "\n", "return", "X", ",", "edge_index", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.create_mock_attention_batch_data": [[41, 51], ["networkx.watts_strogatz_graph", "torch.LongTensor", "torch.FloatTensor", "numpy.random.uniform", "numpy.array", "nx.watts_strogatz_graph.edges"], "function", ["None"], ["", "def", "create_mock_attention_batch_data", "(", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ",", "periods", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\"\n    Creating a mock stacked feature matrix in batches and edge index.\n    \"\"\"", "\n", "graph", "=", "nx", ".", "watts_strogatz_graph", "(", "number_of_nodes", ",", "edge_per_node", ",", "0.5", ")", "\n", "edge_index", "=", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "[", "edge", "for", "edge", "in", "graph", ".", "edges", "(", ")", "]", ")", ".", "T", ")", "\n", "X", "=", "torch", ".", "FloatTensor", "(", "\n", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "(", "batch_size", ",", "number_of_nodes", ",", "in_channels", ",", "periods", ")", ")", "\n", ")", "\n", "return", "X", ",", "edge_index", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.create_mock_states": [[53, 60], ["torch.FloatTensor", "torch.FloatTensor", "numpy.random.uniform", "numpy.random.uniform"], "function", ["None"], ["", "def", "create_mock_states", "(", "number_of_nodes", ",", "out_channels", ")", ":", "\n", "    ", "\"\"\"\n    Creating mock hidden and cell states.\n    \"\"\"", "\n", "H", "=", "torch", ".", "FloatTensor", "(", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "(", "number_of_nodes", ",", "in_channels", ")", ")", ")", "\n", "C", "=", "torch", ".", "FloatTensor", "(", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "(", "number_of_nodes", ",", "in_channels", ")", ")", ")", "\n", "return", "H", ",", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.create_mock_edge_weight": [[62, 67], ["torch.FloatTensor", "numpy.random.uniform"], "function", ["None"], ["", "def", "create_mock_edge_weight", "(", "edge_index", ")", ":", "\n", "    ", "\"\"\"\n    Creating a mock edge weight tensor.\n    \"\"\"", "\n", "return", "torch", ".", "FloatTensor", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "edge_index", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.create_mock_edge_relations": [[69, 75], ["torch.LongTensor", "numpy.random.choice"], "function", ["None"], ["", "def", "create_mock_edge_relations", "(", "edge_index", ",", "num_relations", ")", ":", "\n", "    ", "\"\"\"\n    Creating a mock relation type tensor.\n    \"\"\"", "\n", "return", "torch", ".", "LongTensor", "(", "\n", "np", ".", "random", ".", "choice", "(", "num_relations", ",", "edge_index", ".", "shape", "[", "1", "]", ",", "replace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.test_gconv_lstm_layer": [[78, 112], ["torch.device", "recurrent_test.create_mock_data", "X.to.to", "edge_index.to.to", "create_mock_edge_weight().to", "torch_geometric_temporal.nn.recurrent.GConvLSTM().to", "GConvLSTM().to.", "GConvLSTM().to.", "GConvLSTM().to.", "torch.cuda.is_available", "recurrent_test.create_mock_edge_weight", "torch_geometric_temporal.nn.recurrent.GConvLSTM"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_edge_weight"], ["", "def", "test_gconv_lstm_layer", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing the GConvLSTM Layer.\n    \"\"\"", "\n", "number_of_nodes", "=", "100", "\n", "edge_per_node", "=", "10", "\n", "in_channels", "=", "64", "\n", "out_channels", "=", "16", "\n", "K", "=", "2", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "X", ",", "edge_index", "=", "create_mock_data", "(", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ")", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "edge_index", "=", "edge_index", ".", "to", "(", "device", ")", "\n", "edge_weight", "=", "create_mock_edge_weight", "(", "edge_index", ")", ".", "to", "(", "device", ")", "\n", "\n", "layer", "=", "GConvLSTM", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "K", "=", "K", ")", ".", "to", "(", "\n", "device", "\n", ")", "\n", "\n", "H", ",", "C", "=", "layer", "(", "X", ",", "edge_index", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "assert", "C", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", ",", "C", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "assert", "C", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", ",", "C", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "assert", "C", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.test_gconv_gru_layer": [[114, 143], ["torch.device", "recurrent_test.create_mock_data", "X.to.to", "edge_index.to.to", "create_mock_edge_weight().to", "torch_geometric_temporal.nn.recurrent.GConvGRU().to", "GConvGRU().to.", "GConvGRU().to.", "GConvGRU().to.", "torch.cuda.is_available", "recurrent_test.create_mock_edge_weight", "torch_geometric_temporal.nn.recurrent.GConvGRU"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_edge_weight"], ["", "def", "test_gconv_gru_layer", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing the GConvGRU Layer.\n    \"\"\"", "\n", "number_of_nodes", "=", "100", "\n", "edge_per_node", "=", "10", "\n", "in_channels", "=", "64", "\n", "out_channels", "=", "16", "\n", "K", "=", "2", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "X", ",", "edge_index", "=", "create_mock_data", "(", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ")", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "edge_index", "=", "edge_index", ".", "to", "(", "device", ")", "\n", "edge_weight", "=", "create_mock_edge_weight", "(", "edge_index", ")", ".", "to", "(", "device", ")", "\n", "\n", "layer", "=", "GConvGRU", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "K", "=", "K", ")", ".", "to", "(", "device", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.test_mpnn_lstm_layer": [[145, 172], ["torch.device", "recurrent_test.create_mock_data", "X.to.to", "edge_index.to.to", "create_mock_edge_weight().to", "torch_geometric_temporal.nn.recurrent.MPNNLSTM().to", "MPNNLSTM().to.", "torch.cuda.is_available", "recurrent_test.create_mock_edge_weight", "torch_geometric_temporal.nn.recurrent.MPNNLSTM"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_edge_weight"], ["", "def", "test_mpnn_lstm_layer", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing the MPNN LSTM Layer.\n    \"\"\"", "\n", "number_of_nodes", "=", "100", "\n", "edge_per_node", "=", "10", "\n", "in_channels", "=", "64", "\n", "hidden_size", "=", "32", "\n", "window", "=", "1", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "X", ",", "edge_index", "=", "create_mock_data", "(", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ")", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "edge_index", "=", "edge_index", ".", "to", "(", "device", ")", "\n", "edge_weight", "=", "create_mock_edge_weight", "(", "edge_index", ")", ".", "to", "(", "device", ")", "\n", "\n", "layer", "=", "MPNNLSTM", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "num_nodes", "=", "number_of_nodes", ",", "\n", "window", "=", "window", ",", "\n", "dropout", "=", "0.5", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "2", "*", "hidden_size", "+", "in_channels", "+", "window", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.test_tgcn_layer": [[174, 202], ["torch.device", "recurrent_test.create_mock_data", "X.to.to", "edge_index.to.to", "create_mock_edge_weight().to", "torch_geometric_temporal.nn.recurrent.TGCN().to", "TGCN().to.", "TGCN().to.", "TGCN().to.", "torch.cuda.is_available", "recurrent_test.create_mock_edge_weight", "torch_geometric_temporal.nn.recurrent.TGCN"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_edge_weight"], ["", "def", "test_tgcn_layer", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing the T-GCN Layer.\n    \"\"\"", "\n", "number_of_nodes", "=", "100", "\n", "edge_per_node", "=", "10", "\n", "in_channels", "=", "64", "\n", "out_channels", "=", "16", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "X", ",", "edge_index", "=", "create_mock_data", "(", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ")", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "edge_index", "=", "edge_index", ".", "to", "(", "device", ")", "\n", "edge_weight", "=", "create_mock_edge_weight", "(", "edge_index", ")", ".", "to", "(", "device", ")", "\n", "\n", "layer", "=", "TGCN", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ")", ".", "to", "(", "device", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.test_a3tgcn_layer": [[204, 237], ["torch.device", "recurrent_test.create_mock_attention_data", "X.to.to", "edge_index.to.to", "create_mock_edge_weight().to", "torch_geometric_temporal.nn.recurrent.A3TGCN().to", "A3TGCN().to.", "A3TGCN().to.", "A3TGCN().to.", "torch.cuda.is_available", "recurrent_test.create_mock_edge_weight", "torch_geometric_temporal.nn.recurrent.A3TGCN"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.create_mock_attention_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_edge_weight"], ["", "def", "test_a3tgcn_layer", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing the A3TGCN Layer.\n    \"\"\"", "\n", "number_of_nodes", "=", "100", "\n", "edge_per_node", "=", "10", "\n", "in_channels", "=", "64", "\n", "out_channels", "=", "16", "\n", "periods", "=", "7", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "X", ",", "edge_index", "=", "create_mock_attention_data", "(", "\n", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ",", "periods", "\n", ")", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "edge_index", "=", "edge_index", ".", "to", "(", "device", ")", "\n", "edge_weight", "=", "create_mock_edge_weight", "(", "edge_index", ")", ".", "to", "(", "device", ")", "\n", "\n", "layer", "=", "A3TGCN", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "periods", "=", "periods", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.test_a3tgcn2_layer": [[239, 272], ["torch.device", "recurrent_test.create_mock_attention_batch_data", "X.to.to", "edge_index.to.to", "create_mock_edge_weight().to", "torch_geometric_temporal.nn.recurrent.A3TGCN2().to", "A3TGCN2().to.", "A3TGCN2().to.", "A3TGCN2().to.", "torch.cuda.is_available", "recurrent_test.create_mock_edge_weight", "torch_geometric_temporal.nn.recurrent.A3TGCN2"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.create_mock_attention_batch_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_edge_weight"], ["", "def", "test_a3tgcn2_layer", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing the A3TGCN2 Layer by adding a batch index.\n    \"\"\"", "\n", "number_of_nodes", "=", "100", "\n", "edge_per_node", "=", "10", "\n", "in_channels", "=", "64", "\n", "out_channels", "=", "16", "\n", "periods", "=", "7", "\n", "batch_size", "=", "8", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "X", ",", "edge_index", "=", "create_mock_attention_batch_data", "(", "\n", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ",", "periods", ",", "batch_size", "\n", ")", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "edge_index", "=", "edge_index", ".", "to", "(", "device", ")", "\n", "edge_weight", "=", "create_mock_edge_weight", "(", "edge_index", ")", ".", "to", "(", "device", ")", "\n", "\n", "layer", "=", "A3TGCN2", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "periods", "=", "periods", ",", "batch_size", "=", "batch_size", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "batch_size", ",", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "batch_size", ",", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "batch_size", ",", "number_of_nodes", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.test_dcrnn_layer": [[274, 316], ["torch.device", "recurrent_test.create_mock_data", "X.to.to", "edge_index.to.to", "create_mock_edge_weight().to", "torch_geometric_temporal.nn.recurrent.DCRNN().to", "DCRNN().to.", "DCRNN().to.", "DCRNN().to.", "torch_geometric_temporal.nn.recurrent.DCRNN().to", "DCRNN().to.", "DCRNN().to.", "DCRNN().to.", "torch.cuda.is_available", "recurrent_test.create_mock_edge_weight", "torch_geometric_temporal.nn.recurrent.DCRNN", "torch_geometric_temporal.nn.recurrent.DCRNN"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_edge_weight"], ["", "def", "test_dcrnn_layer", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing the DCRNN Layer.\n    \"\"\"", "\n", "number_of_nodes", "=", "100", "\n", "edge_per_node", "=", "10", "\n", "in_channels", "=", "64", "\n", "out_channels", "=", "16", "\n", "K", "=", "2", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "X", ",", "edge_index", "=", "create_mock_data", "(", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ")", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "edge_index", "=", "edge_index", ".", "to", "(", "device", ")", "\n", "edge_weight", "=", "create_mock_edge_weight", "(", "edge_index", ")", ".", "to", "(", "device", ")", "\n", "\n", "layer", "=", "DCRNN", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "K", "=", "K", ")", ".", "to", "(", "device", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "layer", "=", "DCRNN", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "K", "=", "3", ")", ".", "to", "(", "device", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.test_agcrn_layer": [[318, 367], ["torch.device", "recurrent_test.create_mock_data", "X.to.view", "X.to.to", "torch.nn.Parameter().to", "torch_geometric_temporal.nn.recurrent.AGCRN().to", "AGCRN().to.", "AGCRN().to.", "torch_geometric_temporal.nn.recurrent.AGCRN().to", "AGCRN().to.", "AGCRN().to.", "torch.cuda.is_available", "torch.nn.Parameter", "torch_geometric_temporal.nn.recurrent.AGCRN", "torch_geometric_temporal.nn.recurrent.AGCRN", "torch.randn"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data"], ["", "def", "test_agcrn_layer", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing the AGCRN Layer.\n    \"\"\"", "\n", "number_of_nodes", "=", "100", "\n", "edge_per_node", "=", "10", "\n", "in_channels", "=", "64", "\n", "out_channels", "=", "16", "\n", "embedding_dimensions", "=", "32", "\n", "K", "=", "2", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "X", ",", "edge_index", "=", "create_mock_data", "(", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ")", "\n", "X", "=", "X", ".", "view", "(", "-", "1", ",", "number_of_nodes", ",", "in_channels", ")", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "E", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "number_of_nodes", ",", "embedding_dimensions", ")", ",", "requires_grad", "=", "True", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "layer", "=", "AGCRN", "(", "\n", "number_of_nodes", "=", "number_of_nodes", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "K", "=", "K", ",", "\n", "embedding_dimensions", "=", "embedding_dimensions", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "E", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "1", ",", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "E", ",", "H", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "1", ",", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "layer", "=", "AGCRN", "(", "\n", "number_of_nodes", "=", "number_of_nodes", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "K", "=", "3", ",", "\n", "embedding_dimensions", "=", "embedding_dimensions", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "E", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "1", ",", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", "=", "layer", "(", "X", ",", "E", ",", "H", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "1", ",", "number_of_nodes", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.test_gc_lstm_layer": [[369, 401], ["torch.device", "recurrent_test.create_mock_data", "X.to.to", "edge_index.to.to", "create_mock_edge_weight().to", "torch_geometric_temporal.nn.recurrent.GCLSTM().to", "GCLSTM().to.", "GCLSTM().to.", "GCLSTM().to.", "torch.cuda.is_available", "recurrent_test.create_mock_edge_weight", "torch_geometric_temporal.nn.recurrent.GCLSTM"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_edge_weight"], ["", "def", "test_gc_lstm_layer", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing the GCLSTM Layer.\n    \"\"\"", "\n", "number_of_nodes", "=", "100", "\n", "edge_per_node", "=", "10", "\n", "in_channels", "=", "64", "\n", "out_channels", "=", "16", "\n", "K", "=", "2", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "X", ",", "edge_index", "=", "create_mock_data", "(", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ")", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "edge_index", "=", "edge_index", ".", "to", "(", "device", ")", "\n", "edge_weight", "=", "create_mock_edge_weight", "(", "edge_index", ")", ".", "to", "(", "device", ")", "\n", "\n", "layer", "=", "GCLSTM", "(", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "K", "=", "K", ")", ".", "to", "(", "device", ")", "\n", "\n", "H", ",", "C", "=", "layer", "(", "X", ",", "edge_index", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "assert", "C", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", ",", "C", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "assert", "C", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", ",", "C", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "assert", "C", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.test_lrgcn_layer": [[403, 436], ["torch.device", "recurrent_test.create_mock_data", "X.to.to", "edge_index.to.to", "create_mock_edge_relations().to", "torch_geometric_temporal.nn.recurrent.LRGCN().to", "LRGCN().to.", "LRGCN().to.", "torch.cuda.is_available", "recurrent_test.create_mock_edge_relations", "torch_geometric_temporal.nn.recurrent.LRGCN"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.create_mock_edge_relations"], ["", "def", "test_lrgcn_layer", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing the LRGCN Layer.\n    \"\"\"", "\n", "number_of_nodes", "=", "100", "\n", "edge_per_node", "=", "10", "\n", "in_channels", "=", "64", "\n", "out_channels", "=", "16", "\n", "num_relations", "=", "5", "\n", "num_bases", "=", "3", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "X", ",", "edge_index", "=", "create_mock_data", "(", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ")", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "edge_index", "=", "edge_index", ".", "to", "(", "device", ")", "\n", "edge_relations", "=", "create_mock_edge_relations", "(", "edge_index", ",", "num_relations", ")", ".", "to", "(", "device", ")", "\n", "\n", "layer", "=", "LRGCN", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "num_relations", "=", "num_relations", ",", "\n", "num_bases", "=", "num_bases", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "H", ",", "C", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_relations", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "assert", "C", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "H", ",", "C", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_relations", ",", "H", ",", "C", ")", "\n", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "assert", "C", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.test_dygrencoder_layer": [[438, 483], ["torch.device", "recurrent_test.create_mock_data", "X.to.to", "edge_index.to.to", "create_mock_edge_weight().to", "torch_geometric_temporal.nn.recurrent.DyGrEncoder().to", "DyGrEncoder().to.", "DyGrEncoder().to.", "DyGrEncoder().to.", "torch.cuda.is_available", "recurrent_test.create_mock_edge_weight", "torch_geometric_temporal.nn.recurrent.DyGrEncoder"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_edge_weight"], ["", "def", "test_dygrencoder_layer", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing the DyGrEncoder Layer.\n    \"\"\"", "\n", "number_of_nodes", "=", "100", "\n", "edge_per_node", "=", "10", "\n", "in_channels", "=", "8", "\n", "\n", "conv_out_channels", "=", "16", "\n", "conv_num_layers", "=", "3", "\n", "conv_aggr", "=", "\"add\"", "\n", "lstm_out_channels", "=", "8", "\n", "lstm_num_layers", "=", "1", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "X", ",", "edge_index", "=", "create_mock_data", "(", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ")", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "edge_index", "=", "edge_index", ".", "to", "(", "device", ")", "\n", "edge_weight", "=", "create_mock_edge_weight", "(", "edge_index", ")", ".", "to", "(", "device", ")", "\n", "\n", "layer", "=", "DyGrEncoder", "(", "\n", "conv_out_channels", "=", "conv_out_channels", ",", "\n", "conv_num_layers", "=", "conv_num_layers", ",", "\n", "conv_aggr", "=", "conv_aggr", ",", "\n", "lstm_out_channels", "=", "lstm_out_channels", ",", "\n", "lstm_num_layers", "=", "lstm_num_layers", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "H_tilde", ",", "H", ",", "C", "=", "layer", "(", "X", ",", "edge_index", ")", "\n", "\n", "assert", "H_tilde", ".", "shape", "==", "(", "number_of_nodes", ",", "lstm_out_channels", ")", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "lstm_out_channels", ")", "\n", "assert", "C", ".", "shape", "==", "(", "number_of_nodes", ",", "lstm_out_channels", ")", "\n", "\n", "H_tilde", ",", "H", ",", "C", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "assert", "H_tilde", ".", "shape", "==", "(", "number_of_nodes", ",", "lstm_out_channels", ")", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "lstm_out_channels", ")", "\n", "assert", "C", ".", "shape", "==", "(", "number_of_nodes", ",", "lstm_out_channels", ")", "\n", "\n", "H_tilde", ",", "H", ",", "C", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ")", "\n", "\n", "assert", "H_tilde", ".", "shape", "==", "(", "number_of_nodes", ",", "lstm_out_channels", ")", "\n", "assert", "H", ".", "shape", "==", "(", "number_of_nodes", ",", "lstm_out_channels", ")", "\n", "assert", "C", ".", "shape", "==", "(", "number_of_nodes", ",", "lstm_out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.test_evolve_gcn_h_layer": [[485, 508], ["torch.device", "recurrent_test.create_mock_data", "layer.to", "edge_index.to.to", "create_mock_edge_weight().to", "torch_geometric_temporal.nn.recurrent.EvolveGCNH().to", "EvolveGCNH().to.", "EvolveGCNH().to.", "torch.cuda.is_available", "recurrent_test.create_mock_edge_weight", "torch_geometric_temporal.nn.recurrent.EvolveGCNH"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_edge_weight"], ["", "def", "test_evolve_gcn_h_layer", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing the Evolve GCN-H Layer.\n    \"\"\"", "\n", "number_of_nodes", "=", "100", "\n", "edge_per_node", "=", "10", "\n", "in_channels", "=", "8", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "X", ",", "edge_index", "=", "create_mock_data", "(", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ")", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "edge_index", "=", "edge_index", ".", "to", "(", "device", ")", "\n", "edge_weight", "=", "create_mock_edge_weight", "(", "edge_index", ")", ".", "to", "(", "device", ")", "\n", "\n", "layer", "=", "EvolveGCNH", "(", "in_channels", "=", "in_channels", ",", "num_of_nodes", "=", "number_of_nodes", ")", ".", "to", "(", "device", ")", "\n", "\n", "X", "=", "layer", "(", "X", ",", "edge_index", ")", "\n", "\n", "assert", "X", ".", "shape", "==", "(", "number_of_nodes", ",", "in_channels", ")", "\n", "\n", "X", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "assert", "X", ".", "shape", "==", "(", "number_of_nodes", ",", "in_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.recurrent_test.test_evolve_gcn_o_layer": [[510, 533], ["torch.device", "recurrent_test.create_mock_data", "layer.to", "edge_index.to.to", "create_mock_edge_weight().to", "torch_geometric_temporal.nn.recurrent.EvolveGCNO().to", "EvolveGCNO().to.", "EvolveGCNO().to.", "torch.cuda.is_available", "recurrent_test.create_mock_edge_weight", "torch_geometric_temporal.nn.recurrent.EvolveGCNO"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_edge_weight"], ["", "def", "test_evolve_gcn_o_layer", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing the Evolve GCN-O Layer.\n    \"\"\"", "\n", "number_of_nodes", "=", "100", "\n", "edge_per_node", "=", "10", "\n", "in_channels", "=", "8", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "X", ",", "edge_index", "=", "create_mock_data", "(", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ")", "\n", "X", "=", "X", ".", "to", "(", "device", ")", "\n", "edge_index", "=", "edge_index", ".", "to", "(", "device", ")", "\n", "edge_weight", "=", "create_mock_edge_weight", "(", "edge_index", ")", ".", "to", "(", "device", ")", "\n", "\n", "layer", "=", "EvolveGCNO", "(", "in_channels", "=", "in_channels", ")", ".", "to", "(", "device", ")", "\n", "\n", "X", "=", "layer", "(", "X", ",", "edge_index", ")", "\n", "\n", "assert", "X", ".", "shape", "==", "(", "number_of_nodes", ",", "in_channels", ")", "\n", "\n", "X", "=", "layer", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "assert", "X", ".", "shape", "==", "(", "number_of_nodes", ",", "in_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data": [[26, 34], ["networkx.watts_strogatz_graph", "torch.LongTensor", "torch.FloatTensor", "numpy.random.uniform", "numpy.array", "nx.watts_strogatz_graph.edges"], "function", ["None"], ["def", "create_mock_data", "(", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ")", ":", "\n", "    ", "\"\"\"\n    Creating a mock feature matrix and edge index.\n    \"\"\"", "\n", "graph", "=", "nx", ".", "watts_strogatz_graph", "(", "number_of_nodes", ",", "edge_per_node", ",", "0.5", ")", "\n", "edge_index", "=", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "[", "edge", "for", "edge", "in", "graph", ".", "edges", "(", ")", "]", ")", ".", "T", ")", "\n", "X", "=", "torch", ".", "FloatTensor", "(", "np", ".", "random", ".", "uniform", "(", "-", "1", ",", "1", ",", "(", "number_of_nodes", ",", "in_channels", ")", ")", ")", "\n", "return", "X", ",", "edge_index", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_edge_weight": [[36, 41], ["torch.FloatTensor", "numpy.random.uniform"], "function", ["None"], ["", "def", "create_mock_edge_weight", "(", "edge_index", ")", ":", "\n", "    ", "\"\"\"\n    Creating a mock edge weight tensor.\n    \"\"\"", "\n", "return", "torch", ".", "FloatTensor", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "edge_index", ".", "shape", "[", "1", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_target": [[43, 49], ["torch.LongTensor", "numpy.random.randint", "range"], "function", ["None"], ["", "def", "create_mock_target", "(", "number_of_nodes", ",", "number_of_classes", ")", ":", "\n", "    ", "\"\"\"\n    Creating a mock target vector.\n    \"\"\"", "\n", "return", "torch", ".", "LongTensor", "(", "\n", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "number_of_classes", "-", "1", ")", "for", "node", "in", "range", "(", "number_of_nodes", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_sequence": [[52, 75], ["torch.zeros", "attention_test.create_mock_data", "attention_test.create_mock_edge_weight", "attention_test.create_mock_target", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_edge_weight", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_target"], ["", "def", "create_mock_sequence", "(", "\n", "sequence_length", ",", "number_of_nodes", ",", "edge_per_node", ",", "in_channels", ",", "number_of_classes", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Creating mock sequence data\n\n    Note that this is a static graph discrete signal type sequence\n    The target is the \"next\" item in the sequence\n    \"\"\"", "\n", "input_sequence", "=", "torch", ".", "zeros", "(", "sequence_length", ",", "number_of_nodes", ",", "in_channels", ")", "\n", "\n", "X", ",", "edge_index", "=", "create_mock_data", "(", "\n", "number_of_nodes", "=", "number_of_nodes", ",", "\n", "edge_per_node", "=", "edge_per_node", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", ")", "\n", "edge_weight", "=", "create_mock_edge_weight", "(", "edge_index", ")", "\n", "targets", "=", "create_mock_target", "(", "number_of_nodes", ",", "number_of_classes", ")", "\n", "\n", "for", "t", "in", "range", "(", "sequence_length", ")", ":", "\n", "        ", "input_sequence", "[", "t", "]", "=", "X", "+", "t", "\n", "\n", "", "return", "input_sequence", ",", "targets", ",", "edge_index", ",", "edge_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_batch": [[77, 103], ["torch.zeros", "torch.zeros", "range", "attention_test.create_mock_sequence"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_sequence"], ["", "def", "create_mock_batch", "(", "\n", "batch_size", ",", "\n", "sequence_length", ",", "\n", "number_of_nodes", ",", "\n", "edge_per_node", ",", "\n", "in_channels", ",", "\n", "number_of_classes", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Creating a mock batch of sequences\n    \"\"\"", "\n", "batch", "=", "torch", ".", "zeros", "(", "batch_size", ",", "sequence_length", ",", "number_of_nodes", ",", "in_channels", ")", "\n", "batch_targets", "=", "torch", ".", "zeros", "(", "batch_size", ",", "number_of_nodes", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "input_sequence", ",", "targets", ",", "edge_index", ",", "edge_weight", "=", "create_mock_sequence", "(", "\n", "sequence_length", ",", "\n", "number_of_nodes", ",", "\n", "edge_per_node", ",", "\n", "in_channels", ",", "\n", "number_of_classes", ",", "\n", ")", "\n", "batch", "[", "b", "]", "=", "input_sequence", "\n", "batch_targets", "[", "b", "]", "=", "targets", "\n", "\n", "", "return", "batch", ",", "batch_targets", ",", "edge_index", ",", "edge_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.test_temporalconv": [[105, 137], ["torch.device", "attention_test.create_mock_batch", "torch_geometric_temporal.nn.attention.TemporalConv().to", "TemporalConv().to.", "batch.to", "torch.cuda.is_available", "torch_geometric_temporal.nn.attention.TemporalConv"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_batch"], ["", "def", "test_temporalconv", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing the temporal block in STGCN\n    \"\"\"", "\n", "batch_size", "=", "10", "\n", "sequence_length", "=", "5", "\n", "\n", "number_of_nodes", "=", "300", "\n", "in_channels", "=", "100", "\n", "edge_per_node", "=", "15", "\n", "out_channels", "=", "10", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "batch", ",", "_", ",", "_", ",", "_", "=", "create_mock_batch", "(", "\n", "batch_size", ",", "\n", "sequence_length", ",", "\n", "number_of_nodes", ",", "\n", "edge_per_node", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", ")", "\n", "\n", "kernel_size", "=", "3", "\n", "temporal_conv", "=", "TemporalConv", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "H", "=", "temporal_conv", "(", "batch", ".", "to", "(", "device", ")", ")", "\n", "assert", "H", ".", "shape", "==", "(", "\n", "batch_size", ",", "\n", "sequence_length", "-", "(", "kernel_size", "-", "1", ")", ",", "\n", "number_of_nodes", ",", "\n", "out_channels", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.test_stconv": [[140, 176], ["torch.device", "attention_test.create_mock_batch", "torch_geometric_temporal.nn.attention.STConv().to", "STConv().to.", "batch.to", "edge_index.to", "edge_weight.to", "torch.cuda.is_available", "torch_geometric_temporal.nn.attention.STConv"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_batch"], ["", "def", "test_stconv", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing STConv block in STGCN\n    \"\"\"", "\n", "batch_size", "=", "10", "\n", "sequence_length", "=", "5", "\n", "\n", "number_of_nodes", "=", "300", "\n", "in_channels", "=", "100", "\n", "edge_per_node", "=", "15", "\n", "out_channels", "=", "10", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "batch", ",", "_", ",", "edge_index", ",", "edge_weight", "=", "create_mock_batch", "(", "\n", "batch_size", ",", "\n", "sequence_length", ",", "\n", "number_of_nodes", ",", "\n", "edge_per_node", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", ")", "\n", "\n", "kernel_size", "=", "3", "\n", "stconv", "=", "STConv", "(", "\n", "num_nodes", "=", "number_of_nodes", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", "hidden_channels", "=", "8", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "K", "=", "2", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "H", "=", "stconv", "(", "batch", ".", "to", "(", "device", ")", ",", "edge_index", ".", "to", "(", "device", ")", ",", "edge_weight", ".", "to", "(", "device", ")", ")", "\n", "assert", "H", ".", "shape", "==", "(", "\n", "batch_size", ",", "\n", "sequence_length", "-", "2", "*", "(", "kernel_size", "-", "1", ")", ",", "\n", "number_of_nodes", ",", "\n", "out_channels", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.test_astgcn": [[179, 308], ["torch.device", "torch.tensor().to", "torch.rand().to", "torch.randn().to", "torch.nn.functional.softmax().to", "torch_geometric_temporal.nn.attention.ChebConvAttention().to", "ChebConvAttention().to.", "ChebConvAttention().to.", "ChebConvAttention().to.", "torch.tensor().to", "torch.tensor().to", "torch.rand().to", "torch.randn().to", "torch.tensor().to", "torch.nn.functional.softmax().to", "ChebConvAttention().to.", "ChebConvAttention().to.", "torch_geometric_temporal.nn.attention.ASTGCN().to", "torch_geometric_temporal.nn.attention.ASTGCN().to", "torch_geometric_temporal.nn.attention.ASTGCN().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.tensor().to.max().item", "ChebConvAttention().to.__repr__", "conv.size", "conv.size", "conv.size", "torch.tensor().to.max().item", "conv.size", "conv.size", "range", "ASTGCN().to.", "ASTGCN().to.", "ASTGCN().to.", "ASTGCN().to.", "ASTGCN().to.", "ASTGCN().to.", "torch.cuda.is_available", "torch.tensor", "torch.rand", "torch.randn", "torch.nn.functional.softmax", "torch_geometric_temporal.nn.attention.ChebConvAttention", "torch.tensor", "torch.tensor", "torch.rand", "torch.randn", "torch.tensor", "torch.nn.functional.softmax", "torch_geometric_temporal.nn.attention.ASTGCN", "torch_geometric_temporal.nn.attention.ASTGCN", "torch_geometric_temporal.nn.attention.ASTGCN", "torch.zeros", "torch.zeros", "attention_test.create_mock_data", "torch.randn().to.to", "create_mock_target().to", "torch.tensor().to.max", "torch.tensor().to.size", "torch.rand", "torch.tensor().to.max", "torch.tensor().to.size", "torch.rand", "edge_index_seq.append", "torch.tensor().to.to", "attention_test.create_mock_target"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.ChebConvAttention.__repr__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_target"], ["", "def", "test_astgcn", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing ASTGCN block and its component ChebConvAttention with changing edge index over time or not\n    \"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "in_channels", ",", "out_channels", "=", "(", "16", ",", "32", ")", "\n", "batch_size", "=", "3", "\n", "edge_index", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "0", ",", "0", ",", "1", ",", "2", ",", "3", "]", ",", "[", "1", ",", "2", ",", "3", ",", "0", ",", "0", ",", "0", "]", "]", ")", ".", "to", "(", "device", ")", "\n", "num_nodes", "=", "edge_index", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "\n", "edge_weight", "=", "torch", ".", "rand", "(", "edge_index", ".", "size", "(", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "x", "=", "torch", ".", "randn", "(", "(", "batch_size", ",", "num_nodes", ",", "in_channels", ")", ")", ".", "to", "(", "device", ")", "\n", "attention", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "\n", "torch", ".", "rand", "(", "(", "batch_size", ",", "num_nodes", ",", "num_nodes", ")", ")", ",", "dim", "=", "1", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "conv", "=", "ChebConvAttention", "(", "in_channels", ",", "out_channels", ",", "K", "=", "3", ",", "normalization", "=", "\"sym\"", ")", ".", "to", "(", "\n", "device", "\n", ")", "\n", "assert", "conv", ".", "__repr__", "(", ")", "==", "\"ChebConvAttention(16, 32, K=3, normalization=sym)\"", "\n", "out1", "=", "conv", "(", "x", ",", "edge_index", ",", "attention", ")", "\n", "assert", "out1", ".", "size", "(", ")", "==", "(", "batch_size", ",", "num_nodes", ",", "out_channels", ")", "\n", "out2", "=", "conv", "(", "x", ",", "edge_index", ",", "attention", ",", "edge_weight", ")", "\n", "assert", "out2", ".", "size", "(", ")", "==", "(", "batch_size", ",", "num_nodes", ",", "out_channels", ")", "\n", "out3", "=", "conv", "(", "x", ",", "edge_index", ",", "attention", ",", "edge_weight", ",", "lambda_max", "=", "3.0", ")", "\n", "assert", "out3", ".", "size", "(", ")", "==", "(", "batch_size", ",", "num_nodes", ",", "out_channels", ")", "\n", "\n", "batch", "=", "torch", ".", "tensor", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", ".", "to", "(", "device", ")", "\n", "edge_index", "=", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "[", "1", ",", "0", ",", "3", ",", "2", "]", "]", ")", ".", "to", "(", "device", ")", "\n", "num_nodes", "=", "edge_index", ".", "max", "(", ")", ".", "item", "(", ")", "+", "1", "\n", "edge_weight", "=", "torch", ".", "rand", "(", "edge_index", ".", "size", "(", "1", ")", ")", ".", "to", "(", "device", ")", "\n", "x", "=", "torch", ".", "randn", "(", "(", "batch_size", ",", "num_nodes", ",", "in_channels", ")", ")", ".", "to", "(", "device", ")", "\n", "lambda_max", "=", "torch", ".", "tensor", "(", "[", "2.0", ",", "3.0", "]", ")", ".", "to", "(", "device", ")", "\n", "attention", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "\n", "torch", ".", "rand", "(", "(", "batch_size", ",", "num_nodes", ",", "num_nodes", ")", ")", ",", "dim", "=", "1", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "out4", "=", "conv", "(", "x", ",", "edge_index", ",", "attention", ",", "edge_weight", ",", "batch", ")", "\n", "assert", "out4", ".", "size", "(", ")", "==", "(", "batch_size", ",", "num_nodes", ",", "out_channels", ")", "\n", "out5", "=", "conv", "(", "x", ",", "edge_index", ",", "attention", ",", "edge_weight", ",", "batch", ",", "lambda_max", ")", "\n", "assert", "out5", ".", "size", "(", ")", "==", "(", "batch_size", ",", "num_nodes", ",", "out_channels", ")", "\n", "\n", "node_count", "=", "307", "\n", "num_classes", "=", "10", "\n", "edge_per_node", "=", "15", "\n", "\n", "num_for_predict", "=", "12", "\n", "len_input", "=", "12", "\n", "nb_time_strides", "=", "1", "\n", "\n", "node_features", "=", "2", "\n", "nb_block", "=", "2", "\n", "K", "=", "3", "\n", "nb_chev_filter", "=", "64", "\n", "nb_time_filter", "=", "64", "\n", "batch_size", "=", "32", "\n", "normalization", "=", "None", "\n", "bias", "=", "True", "\n", "\n", "model", "=", "ASTGCN", "(", "\n", "nb_block", ",", "\n", "node_features", ",", "\n", "K", ",", "\n", "nb_chev_filter", ",", "\n", "nb_time_filter", ",", "\n", "nb_time_strides", ",", "\n", "num_for_predict", ",", "\n", "len_input", ",", "\n", "node_count", ",", "\n", "normalization", ",", "\n", "bias", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "model2", "=", "ASTGCN", "(", "\n", "nb_block", ",", "\n", "node_features", ",", "\n", "K", ",", "\n", "nb_chev_filter", ",", "\n", "nb_time_filter", ",", "\n", "nb_time_strides", ",", "\n", "num_for_predict", ",", "\n", "len_input", ",", "\n", "node_count", ",", "\n", "\"sym\"", ",", "\n", "False", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "model3", "=", "ASTGCN", "(", "\n", "nb_block", ",", "\n", "node_features", ",", "\n", "K", ",", "\n", "nb_chev_filter", ",", "\n", "nb_time_filter", ",", "\n", "nb_time_strides", ",", "\n", "num_for_predict", ",", "\n", "len_input", ",", "\n", "node_count", ",", "\n", "\"rw\"", ",", "\n", "bias", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "T", "=", "len_input", "\n", "x_seq", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "node_count", ",", "node_features", ",", "T", "]", ")", ".", "to", "(", "device", ")", "\n", "target_seq", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "node_count", ",", "T", "]", ")", ".", "to", "(", "device", ")", "\n", "edge_index_seq", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "x", ",", "edge_index", "=", "create_mock_data", "(", "node_count", ",", "edge_per_node", ",", "node_features", ")", "\n", "x_seq", "[", "b", ",", ":", ",", ":", ",", "t", "]", "=", "x", ".", "to", "(", "device", ")", "\n", "if", "b", "==", "0", ":", "\n", "                ", "edge_index_seq", ".", "append", "(", "edge_index", ".", "to", "(", "device", ")", ")", "\n", "", "target", "=", "create_mock_target", "(", "node_count", ",", "num_classes", ")", ".", "to", "(", "device", ")", "\n", "target_seq", "[", "b", ",", ":", ",", "t", "]", "=", "target", "\n", "", "", "shuffle", "=", "True", "\n", "train_dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "x_seq", ",", "target_seq", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", "\n", ")", "\n", "for", "batch_data", "in", "train_loader", ":", "\n", "        ", "encoder_inputs", ",", "_", "=", "batch_data", "\n", "outputs0", "=", "model", "(", "encoder_inputs", ",", "edge_index_seq", ")", "\n", "outputs1", "=", "model", "(", "encoder_inputs", ",", "edge_index_seq", "[", "0", "]", ")", "\n", "outputs2", "=", "model2", "(", "encoder_inputs", ",", "edge_index_seq", "[", "0", "]", ")", "\n", "outputs3", "=", "model2", "(", "encoder_inputs", ",", "edge_index_seq", ")", "\n", "outputs4", "=", "model3", "(", "encoder_inputs", ",", "edge_index_seq", "[", "0", "]", ")", "\n", "outputs5", "=", "model3", "(", "encoder_inputs", ",", "edge_index_seq", ")", "\n", "", "assert", "outputs0", ".", "shape", "==", "(", "batch_size", ",", "node_count", ",", "num_for_predict", ")", "\n", "assert", "outputs1", ".", "shape", "==", "(", "batch_size", ",", "node_count", ",", "num_for_predict", ")", "\n", "assert", "outputs2", ".", "shape", "==", "(", "batch_size", ",", "node_count", ",", "num_for_predict", ")", "\n", "assert", "outputs3", ".", "shape", "==", "(", "batch_size", ",", "node_count", ",", "num_for_predict", ")", "\n", "assert", "outputs4", ".", "shape", "==", "(", "batch_size", ",", "node_count", ",", "num_for_predict", ")", "\n", "assert", "outputs5", ".", "shape", "==", "(", "batch_size", ",", "node_count", ",", "num_for_predict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.test_mstgcn": [[310, 367], ["torch.device", "torch_geometric_temporal.nn.attention.MSTGCN().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "range", "MSTGCN().to.", "MSTGCN().to.", "torch.cuda.is_available", "torch_geometric_temporal.nn.attention.MSTGCN", "torch.zeros", "torch.zeros", "attention_test.create_mock_data", "x.to", "create_mock_target().to", "edge_index_seq.append", "edge_index.to", "attention_test.create_mock_target"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_target"], ["", "def", "test_mstgcn", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing MSTGCN block with changing edge index over time.\n    \"\"\"", "\n", "node_count", "=", "307", "\n", "num_classes", "=", "10", "\n", "edge_per_node", "=", "15", "\n", "\n", "num_for_predict", "=", "12", "\n", "len_input", "=", "12", "\n", "nb_time_strides", "=", "1", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "node_features", "=", "2", "\n", "nb_block", "=", "2", "\n", "K", "=", "3", "\n", "nb_chev_filter", "=", "64", "\n", "nb_time_filter", "=", "64", "\n", "batch_size", "=", "32", "\n", "\n", "model", "=", "MSTGCN", "(", "\n", "nb_block", ",", "\n", "node_features", ",", "\n", "K", ",", "\n", "nb_chev_filter", ",", "\n", "nb_time_filter", ",", "\n", "nb_time_strides", ",", "\n", "num_for_predict", ",", "\n", "len_input", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "T", "=", "len_input", "\n", "x_seq", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "node_count", ",", "node_features", ",", "T", "]", ")", ".", "to", "(", "device", ")", "\n", "target_seq", "=", "torch", ".", "zeros", "(", "[", "batch_size", ",", "node_count", ",", "T", "]", ")", ".", "to", "(", "device", ")", "\n", "edge_index_seq", "=", "[", "]", "\n", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "x", ",", "edge_index", "=", "create_mock_data", "(", "node_count", ",", "edge_per_node", ",", "node_features", ")", "\n", "x_seq", "[", "b", ",", ":", ",", ":", ",", "t", "]", "=", "x", ".", "to", "(", "device", ")", "\n", "if", "b", "==", "0", ":", "\n", "                ", "edge_index_seq", ".", "append", "(", "edge_index", ".", "to", "(", "device", ")", ")", "\n", "", "target", "=", "create_mock_target", "(", "node_count", ",", "num_classes", ")", ".", "to", "(", "device", ")", "\n", "target_seq", "[", "b", ",", ":", ",", "t", "]", "=", "target", "\n", "\n", "", "", "shuffle", "=", "True", "\n", "train_dataset", "=", "torch", ".", "utils", ".", "data", ".", "TensorDataset", "(", "x_seq", ",", "target_seq", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", "\n", ")", "\n", "\n", "for", "batch_data", "in", "train_loader", ":", "\n", "        ", "encoder_inputs", ",", "_", "=", "batch_data", "\n", "outputs1", "=", "model", "(", "encoder_inputs", ",", "edge_index_seq", ")", "\n", "outputs2", "=", "model", "(", "encoder_inputs", ",", "edge_index_seq", "[", "0", "]", ")", "\n", "\n", "", "assert", "outputs1", ".", "shape", "==", "(", "batch_size", ",", "node_count", ",", "num_for_predict", ")", "\n", "assert", "outputs2", ".", "shape", "==", "(", "batch_size", ",", "node_count", ",", "num_for_predict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.test_gman": [[369, 418], ["torch.device", "torch.rand().to", "attention_test.create_mock_data", "SE.to.to", "torch_geometric_temporal.nn.attention.GMAN().to", "torch_geometric_temporal.nn.attention.GMAN().to", "GMAN().to.", "GMAN().to.", "torch.cuda.is_available", "torch.rand", "torch_geometric_temporal.nn.attention.GMAN", "torch_geometric_temporal.nn.attention.GMAN", "torch.rand"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_data"], ["", "def", "test_gman", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing GMAN\n    \"\"\"", "\n", "L", "=", "1", "\n", "K", "=", "8", "\n", "d", "=", "8", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "num_his", "=", "12", "\n", "num_pred", "=", "10", "\n", "num_nodes", "=", "50", "\n", "num_sample", "=", "100", "\n", "batch_size", "=", "32", "\n", "bn_decay", "=", "0.1", "\n", "steps_per_day", "=", "288", "\n", "use_bias", "=", "True", "\n", "mask", "=", "False", "\n", "trainX", "=", "torch", ".", "rand", "(", "num_sample", ",", "num_his", ",", "num_nodes", ")", ".", "to", "(", "device", ")", "\n", "SE", ",", "_", "=", "create_mock_data", "(", "number_of_nodes", "=", "num_nodes", ",", "edge_per_node", "=", "8", ",", "in_channels", "=", "64", ")", "\n", "SE", "=", "SE", ".", "to", "(", "device", ")", "\n", "trainTE", "=", "(", "2", "*", "torch", ".", "rand", "(", "(", "num_sample", ",", "num_his", "+", "num_pred", ",", "2", ")", ")", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "model", "=", "GMAN", "(", "\n", "L", ",", "\n", "K", ",", "\n", "d", ",", "\n", "num_his", ",", "\n", "bn_decay", "=", "bn_decay", ",", "\n", "steps_per_day", "=", "steps_per_day", ",", "\n", "use_bias", "=", "use_bias", ",", "\n", "mask", "=", "mask", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "L", "=", "2", "\n", "model2", "=", "GMAN", "(", "\n", "L", ",", "\n", "K", ",", "\n", "d", ",", "\n", "num_his", ",", "\n", "bn_decay", "=", "bn_decay", ",", "\n", "steps_per_day", "=", "steps_per_day", ",", "\n", "use_bias", "=", "False", ",", "\n", "mask", "=", "True", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "X", "=", "trainX", "[", ":", "batch_size", "]", "\n", "TE", "=", "trainTE", "[", ":", "batch_size", "]", "\n", "pred", "=", "model", "(", "X", ",", "SE", ",", "TE", ")", "\n", "assert", "pred", ".", "shape", "==", "(", "batch_size", ",", "num_pred", ",", "num_nodes", ")", "\n", "pred", "=", "model2", "(", "X", ",", "SE", ",", "TE", ")", "\n", "assert", "pred", ".", "shape", "==", "(", "batch_size", ",", "num_pred", ",", "num_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.test_mtgnn": [[420, 668], ["torch.device", "torch_geometric.utils.barabasi_albert_graph().to", "torch.sparse_coo_tensor().to_dense().to", "torch_geometric_temporal.nn.attention.MTGNN().to", "torch.rand().to", "torch_geometric_temporal.nn.attention.MTGNN().to", "torch_geometric_temporal.nn.attention.MTGNN().to", "torch_geometric_temporal.nn.attention.MTGNN().to", "trainx.transpose.transpose", "torch.randperm().to", "int", "range", "torch_geometric_temporal.nn.attention.MTGNN().to", "torch_geometric_temporal.nn.attention.MTGNN().to", "torch_geometric_temporal.nn.attention.MTGNN().to", "trainx.transpose.transpose", "range", "MTGNN().to.", "output.transpose.transpose", "MTGNN().to.", "output2.transpose.transpose", "MTGNN().to.", "output3.transpose.transpose", "MTGNN().to.", "output4.transpose.transpose", "MTGNN().to.", "output.transpose.transpose", "MTGNN().to.", "output2.transpose.transpose", "MTGNN().to.", "output3.transpose.transpose", "torch.cuda.is_available", "torch_geometric.utils.barabasi_albert_graph", "torch.sparse_coo_tensor().to_dense", "torch_geometric_temporal.nn.attention.MTGNN", "torch.rand", "torch_geometric_temporal.nn.attention.MTGNN", "torch_geometric_temporal.nn.attention.MTGNN", "torch_geometric_temporal.nn.attention.MTGNN", "torch.randperm", "torch_geometric_temporal.nn.attention.MTGNN", "torch_geometric_temporal.nn.attention.MTGNN", "torch_geometric_temporal.nn.attention.MTGNN", "torch.sparse_coo_tensor", "torch.rand", "torch.rand", "torch.ones().to", "torch.ones", "barabasi_albert_graph().to.size"], "function", ["None"], ["", "def", "test_mtgnn", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing MTGNN block\n    \"\"\"", "\n", "gcn_true", "=", "True", "\n", "build_adj", "=", "True", "\n", "dropout", "=", "0.3", "\n", "subgraph_size", "=", "20", "\n", "gcn_depth", "=", "2", "\n", "num_nodes", "=", "207", "\n", "node_dim", "=", "40", "\n", "dilation_exponential", "=", "1", "\n", "conv_channels", "=", "32", "\n", "residual_channels", "=", "32", "\n", "skip_channels", "=", "64", "\n", "end_channels", "=", "128", "\n", "in_dim", "=", "2", "\n", "seq_in_len", "=", "12", "\n", "seq_out_len", "=", "10", "\n", "layers", "=", "3", "\n", "batch_size", "=", "16", "\n", "propalpha", "=", "0.05", "\n", "tanhalpha", "=", "3", "\n", "num_split", "=", "1", "\n", "num_edges", "=", "10", "\n", "kernel_size", "=", "7", "\n", "kernel_set", "=", "[", "2", ",", "3", ",", "6", ",", "7", "]", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "edge_index", "=", "barabasi_albert_graph", "(", "num_nodes", ",", "num_edges", ")", ".", "to", "(", "device", ")", "\n", "A_tilde", "=", "(", "\n", "torch", ".", "sparse_coo_tensor", "(", "\n", "edge_index", ",", "\n", "torch", ".", "ones", "(", "edge_index", ".", "size", "(", "1", ")", ")", ".", "to", "(", "device", ")", ",", "\n", "(", "num_nodes", ",", "num_nodes", ")", ",", "\n", ")", ".", "to_dense", "(", ")", "\n", ")", ".", "to", "(", "device", ")", "\n", "model", "=", "MTGNN", "(", "\n", "gcn_true", "=", "gcn_true", ",", "\n", "build_adj", "=", "build_adj", ",", "\n", "gcn_depth", "=", "gcn_depth", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "kernel_set", "=", "kernel_set", ",", "\n", "dropout", "=", "dropout", ",", "\n", "subgraph_size", "=", "subgraph_size", ",", "\n", "node_dim", "=", "node_dim", ",", "\n", "dilation_exponential", "=", "dilation_exponential", ",", "\n", "conv_channels", "=", "conv_channels", ",", "\n", "residual_channels", "=", "residual_channels", ",", "\n", "skip_channels", "=", "skip_channels", ",", "\n", "end_channels", "=", "end_channels", ",", "\n", "seq_length", "=", "seq_in_len", ",", "\n", "in_dim", "=", "in_dim", ",", "\n", "out_dim", "=", "seq_out_len", ",", "\n", "layers", "=", "layers", ",", "\n", "propalpha", "=", "propalpha", ",", "\n", "tanhalpha", "=", "tanhalpha", ",", "\n", "layer_norm_affline", "=", "True", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "xd", "=", "8", "\n", "FE", "=", "torch", ".", "rand", "(", "num_nodes", ",", "xd", ")", ".", "to", "(", "device", ")", "\n", "model2", "=", "MTGNN", "(", "\n", "gcn_true", "=", "gcn_true", ",", "\n", "build_adj", "=", "build_adj", ",", "\n", "gcn_depth", "=", "gcn_depth", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "kernel_set", "=", "kernel_set", ",", "\n", "dropout", "=", "dropout", ",", "\n", "subgraph_size", "=", "subgraph_size", ",", "\n", "node_dim", "=", "node_dim", ",", "\n", "dilation_exponential", "=", "dilation_exponential", ",", "\n", "conv_channels", "=", "conv_channels", ",", "\n", "residual_channels", "=", "residual_channels", ",", "\n", "skip_channels", "=", "skip_channels", ",", "\n", "end_channels", "=", "end_channels", ",", "\n", "seq_length", "=", "seq_in_len", ",", "\n", "in_dim", "=", "in_dim", ",", "\n", "out_dim", "=", "seq_out_len", ",", "\n", "layers", "=", "layers", ",", "\n", "propalpha", "=", "propalpha", ",", "\n", "tanhalpha", "=", "tanhalpha", ",", "\n", "layer_norm_affline", "=", "True", ",", "\n", "xd", "=", "xd", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "\n", "model3", "=", "MTGNN", "(", "\n", "gcn_true", "=", "gcn_true", ",", "\n", "build_adj", "=", "False", ",", "\n", "gcn_depth", "=", "gcn_depth", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "kernel_set", "=", "kernel_set", ",", "\n", "dropout", "=", "dropout", ",", "\n", "subgraph_size", "=", "subgraph_size", ",", "\n", "node_dim", "=", "node_dim", ",", "\n", "dilation_exponential", "=", "dilation_exponential", ",", "\n", "conv_channels", "=", "conv_channels", ",", "\n", "residual_channels", "=", "residual_channels", ",", "\n", "skip_channels", "=", "skip_channels", ",", "\n", "end_channels", "=", "end_channels", ",", "\n", "seq_length", "=", "seq_in_len", ",", "\n", "in_dim", "=", "in_dim", ",", "\n", "out_dim", "=", "seq_out_len", ",", "\n", "layers", "=", "layers", ",", "\n", "propalpha", "=", "propalpha", ",", "\n", "tanhalpha", "=", "tanhalpha", ",", "\n", "layer_norm_affline", "=", "True", ",", "\n", "xd", "=", "xd", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "model4", "=", "MTGNN", "(", "\n", "gcn_true", "=", "False", ",", "\n", "build_adj", "=", "build_adj", ",", "\n", "gcn_depth", "=", "gcn_depth", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "kernel_set", "=", "kernel_set", ",", "\n", "dropout", "=", "dropout", ",", "\n", "subgraph_size", "=", "subgraph_size", ",", "\n", "node_dim", "=", "node_dim", ",", "\n", "dilation_exponential", "=", "2", ",", "\n", "conv_channels", "=", "conv_channels", ",", "\n", "residual_channels", "=", "residual_channels", ",", "\n", "skip_channels", "=", "skip_channels", ",", "\n", "end_channels", "=", "end_channels", ",", "\n", "seq_length", "=", "seq_in_len", ",", "\n", "in_dim", "=", "in_dim", ",", "\n", "out_dim", "=", "seq_out_len", ",", "\n", "layers", "=", "layers", ",", "\n", "propalpha", "=", "propalpha", ",", "\n", "tanhalpha", "=", "tanhalpha", ",", "\n", "layer_norm_affline", "=", "False", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "trainx", "=", "(", "2", "*", "torch", ".", "rand", "(", "batch_size", ",", "seq_in_len", ",", "num_nodes", ",", "in_dim", ")", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "trainx", "=", "trainx", ".", "transpose", "(", "1", ",", "3", ")", "\n", "perm", "=", "torch", ".", "randperm", "(", "num_nodes", ")", ".", "to", "(", "device", ")", "\n", "num_sub", "=", "int", "(", "num_nodes", "/", "num_split", ")", "\n", "for", "j", "in", "range", "(", "num_split", ")", ":", "\n", "        ", "if", "j", "!=", "num_split", "-", "1", ":", "\n", "            ", "id", "=", "perm", "[", "j", "*", "num_sub", ":", "(", "j", "+", "1", ")", "*", "num_sub", "]", "\n", "", "else", ":", "\n", "            ", "id", "=", "perm", "[", "j", "*", "num_sub", ":", "]", "\n", "", "tx", "=", "trainx", "[", ":", ",", ":", ",", "id", ",", ":", "]", "\n", "output", "=", "model", "(", "tx", ",", "A_tilde", ",", "idx", "=", "id", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "3", ")", "\n", "assert", "output", ".", "shape", "==", "(", "batch_size", ",", "1", ",", "num_nodes", ",", "seq_out_len", ")", "\n", "output2", "=", "model2", "(", "tx", ",", "A_tilde", ",", "FE", "=", "FE", ")", "\n", "output2", "=", "output2", ".", "transpose", "(", "1", ",", "3", ")", "\n", "assert", "output2", ".", "shape", "==", "(", "batch_size", ",", "1", ",", "num_nodes", ",", "seq_out_len", ")", "\n", "output3", "=", "model3", "(", "tx", ",", "A_tilde", ",", "FE", "=", "FE", ")", "\n", "output3", "=", "output3", ".", "transpose", "(", "1", ",", "3", ")", "\n", "assert", "output3", ".", "shape", "==", "(", "batch_size", ",", "1", ",", "num_nodes", ",", "seq_out_len", ")", "\n", "output4", "=", "model4", "(", "tx", ",", "A_tilde", ")", "\n", "output4", "=", "output4", ".", "transpose", "(", "1", ",", "3", ")", "\n", "assert", "output4", ".", "shape", "==", "(", "batch_size", ",", "1", ",", "num_nodes", ",", "seq_out_len", ")", "\n", "\n", "", "seq_in_len", "=", "24", "\n", "seq_out_len", "=", "5", "\n", "model", "=", "MTGNN", "(", "\n", "gcn_true", "=", "gcn_true", ",", "\n", "build_adj", "=", "build_adj", ",", "\n", "gcn_depth", "=", "gcn_depth", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "kernel_set", "=", "kernel_set", ",", "\n", "dropout", "=", "dropout", ",", "\n", "subgraph_size", "=", "subgraph_size", ",", "\n", "node_dim", "=", "node_dim", ",", "\n", "dilation_exponential", "=", "dilation_exponential", ",", "\n", "conv_channels", "=", "conv_channels", ",", "\n", "residual_channels", "=", "residual_channels", ",", "\n", "skip_channels", "=", "skip_channels", ",", "\n", "end_channels", "=", "end_channels", ",", "\n", "seq_length", "=", "seq_in_len", ",", "\n", "in_dim", "=", "in_dim", ",", "\n", "out_dim", "=", "seq_out_len", ",", "\n", "layers", "=", "layers", ",", "\n", "propalpha", "=", "propalpha", ",", "\n", "tanhalpha", "=", "tanhalpha", ",", "\n", "layer_norm_affline", "=", "False", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "dilation_exponential", "=", "2", "\n", "build_adj", "=", "False", "\n", "model2", "=", "MTGNN", "(", "\n", "gcn_true", "=", "gcn_true", ",", "\n", "build_adj", "=", "build_adj", ",", "\n", "gcn_depth", "=", "gcn_depth", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "kernel_set", "=", "kernel_set", ",", "\n", "dropout", "=", "dropout", ",", "\n", "subgraph_size", "=", "subgraph_size", ",", "\n", "node_dim", "=", "node_dim", ",", "\n", "dilation_exponential", "=", "dilation_exponential", ",", "\n", "conv_channels", "=", "conv_channels", ",", "\n", "residual_channels", "=", "residual_channels", ",", "\n", "skip_channels", "=", "skip_channels", ",", "\n", "end_channels", "=", "end_channels", ",", "\n", "seq_length", "=", "seq_in_len", ",", "\n", "in_dim", "=", "in_dim", ",", "\n", "out_dim", "=", "seq_out_len", ",", "\n", "layers", "=", "layers", ",", "\n", "propalpha", "=", "propalpha", ",", "\n", "tanhalpha", "=", "tanhalpha", ",", "\n", "layer_norm_affline", "=", "True", ",", "\n", "xd", "=", "xd", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "model3", "=", "MTGNN", "(", "\n", "gcn_true", "=", "False", ",", "\n", "build_adj", "=", "build_adj", ",", "\n", "gcn_depth", "=", "gcn_depth", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "kernel_set", "=", "kernel_set", ",", "\n", "dropout", "=", "dropout", ",", "\n", "subgraph_size", "=", "subgraph_size", ",", "\n", "node_dim", "=", "node_dim", ",", "\n", "dilation_exponential", "=", "dilation_exponential", ",", "\n", "conv_channels", "=", "conv_channels", ",", "\n", "residual_channels", "=", "residual_channels", ",", "\n", "skip_channels", "=", "skip_channels", ",", "\n", "end_channels", "=", "end_channels", ",", "\n", "seq_length", "=", "seq_in_len", ",", "\n", "in_dim", "=", "in_dim", ",", "\n", "out_dim", "=", "seq_out_len", ",", "\n", "layers", "=", "layers", ",", "\n", "propalpha", "=", "propalpha", ",", "\n", "tanhalpha", "=", "tanhalpha", ",", "\n", "layer_norm_affline", "=", "False", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "trainx", "=", "(", "2", "*", "torch", ".", "rand", "(", "batch_size", ",", "seq_in_len", ",", "num_nodes", ",", "in_dim", ")", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "trainx", "=", "trainx", ".", "transpose", "(", "1", ",", "3", ")", "\n", "for", "j", "in", "range", "(", "num_split", ")", ":", "\n", "        ", "if", "j", "!=", "num_split", "-", "1", ":", "\n", "            ", "id", "=", "perm", "[", "j", "*", "num_sub", ":", "(", "j", "+", "1", ")", "*", "num_sub", "]", "\n", "", "else", ":", "\n", "            ", "id", "=", "perm", "[", "j", "*", "num_sub", ":", "]", "\n", "", "tx", "=", "trainx", "[", ":", ",", ":", ",", "id", ",", ":", "]", "\n", "output", "=", "model", "(", "tx", ",", "A_tilde", ",", "idx", "=", "id", ")", "\n", "output", "=", "output", ".", "transpose", "(", "1", ",", "3", ")", "\n", "assert", "output", ".", "shape", "==", "(", "batch_size", ",", "1", ",", "num_nodes", ",", "seq_out_len", ")", "\n", "output2", "=", "model2", "(", "tx", ",", "A_tilde", ",", "idx", "=", "id", ",", "FE", "=", "FE", ")", "\n", "output2", "=", "output2", ".", "transpose", "(", "1", ",", "3", ")", "\n", "assert", "output2", ".", "shape", "==", "(", "batch_size", ",", "1", ",", "num_nodes", ",", "seq_out_len", ")", "\n", "output3", "=", "model3", "(", "tx", ",", "A_tilde", ")", "\n", "output3", "=", "output3", ".", "transpose", "(", "1", ",", "3", ")", "\n", "assert", "output3", ".", "shape", "==", "(", "batch_size", ",", "1", ",", "num_nodes", ",", "seq_out_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.test_tsagcn": [[670, 730], ["torch.device", "attention_test.create_mock_batch", "batch.permute().contiguous.permute().contiguous", "torch_geometric_temporal.nn.attention.AAGCN().to", "torch_geometric_temporal.nn.attention.AAGCN().to", "batch.permute().contiguous.to", "AAGCN().to.", "AAGCN().to.", "torch.cuda.is_available", "batch.permute().contiguous.permute", "torch_geometric_temporal.nn.attention.AAGCN", "torch_geometric_temporal.nn.attention.AAGCN", "math.ceil", "math.ceil"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.create_mock_batch"], ["", "", "def", "test_tsagcn", "(", ")", ":", "\n", "    ", "\"\"\"\n    Testing 2s-AGCN unit\n    \"\"\"", "\n", "batch_size", "=", "10", "\n", "sequence_length", "=", "5", "\n", "\n", "number_of_nodes", "=", "300", "\n", "in_channels", "=", "100", "\n", "edge_per_node", "=", "15", "\n", "out_channels", "=", "10", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "batch", ",", "_", ",", "edge_index", ",", "edge_weight", "=", "create_mock_batch", "(", "\n", "batch_size", ",", "\n", "sequence_length", ",", "\n", "number_of_nodes", ",", "\n", "edge_per_node", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", ")", "\n", "# (bs, seq, nodes, f_in) -> (bs, f_in, seq, nodes)", "\n", "# also be sure to pass in a contiguous tensor (the created in create_mock_batch() is not!)", "\n", "batch", "=", "batch", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "stride", "=", "2", "\n", "aagcn_adaptive", "=", "AAGCN", "(", "\n", "num_nodes", "=", "number_of_nodes", ",", "\n", "edge_index", "=", "edge_index", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "stride", "=", "stride", ",", "\n", "adaptive", "=", "True", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "aagcn_non_adaptive", "=", "AAGCN", "(", "\n", "num_nodes", "=", "number_of_nodes", ",", "\n", "edge_index", "=", "edge_index", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "stride", "=", "stride", ",", "\n", "adaptive", "=", "False", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "A", "=", "aagcn_adaptive", ".", "A", "\n", "\n", "x_mock", "=", "batch", ".", "to", "(", "device", ")", "\n", "H_adaptive", "=", "aagcn_adaptive", "(", "x_mock", ")", "\n", "H_non_adaptive", "=", "aagcn_non_adaptive", "(", "x_mock", ")", "\n", "\n", "assert", "H_adaptive", ".", "shape", "==", "(", "\n", "batch_size", ",", "\n", "out_channels", ",", "\n", "math", ".", "ceil", "(", "sequence_length", "/", "stride", ")", ",", "\n", "number_of_nodes", ",", "\n", ")", "\n", "assert", "H_non_adaptive", ".", "shape", "==", "(", "\n", "batch_size", ",", "\n", "out_channels", ",", "\n", "math", ".", "ceil", "(", "sequence_length", "/", "stride", ")", ",", "\n", "number_of_nodes", ",", "\n", ")", "\n", "assert", "A", ".", "shape", "==", "(", "3", ",", "number_of_nodes", ",", "number_of_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.attention_test.test_dnntsp": [[732, 747], ["torch_geometric_temporal.nn.attention.DNNTSP", "networkx.watts_strogatz_graph", "torch.FloatTensor", "torch.FloatTensor", "torch_geometric_temporal.nn.attention.DNNTSP.", "torch.LongTensor", "numpy.random.uniform", "numpy.random.uniform", "numpy.array", "nx.watts_strogatz_graph.edges"], "function", ["None"], ["", "def", "test_dnntsp", "(", ")", ":", "\n", "\n", "    ", "model", "=", "DNNTSP", "(", "items_total", "=", "100", ",", "item_embedding_dim", "=", "16", ",", "n_heads", "=", "4", ")", "\n", "\n", "g", "=", "nx", ".", "watts_strogatz_graph", "(", "1000", ",", "10", ",", "0.4", ")", "\n", "\n", "edges", "=", "torch", ".", "LongTensor", "(", "np", ".", "array", "(", "[", "[", "edge", "[", "0", "]", ",", "edge", "[", "1", "]", "]", "for", "edge", "in", "g", ".", "edges", "(", ")", "]", ")", ")", ".", "T", "\n", "\n", "edge_weight", "=", "torch", ".", "FloatTensor", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "5000", ",", ")", ")", ")", "\n", "\n", "node_features", "=", "torch", ".", "FloatTensor", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "1000", ",", "16", ")", ")", ")", "\n", "\n", "z", "=", "model", "(", "node_features", ",", "edges", ",", "edge_weight", ")", "\n", "\n", "assert", "z", ".", "shape", "==", "(", "10", ",", "100", ",", "16", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.get_edge_array": [[17, 22], ["networkx.gnp_random_graph().edges", "numpy.array", "edges.append", "networkx.gnp_random_graph"], "function", ["None"], ["def", "get_edge_array", "(", "node_count", ",", "node_start", ")", ":", "\n", "    ", "edges", "=", "[", "]", "\n", "for", "edge", "in", "nx", ".", "gnp_random_graph", "(", "node_count", ",", "0.1", ")", ".", "edges", "(", ")", ":", "\n", "        ", "edges", ".", "append", "(", "[", "edge", "[", "0", "]", "+", "node_start", ",", "edge", "[", "1", "]", "+", "node_start", "]", ")", "\n", "", "return", "np", ".", "array", "(", "edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_signal": [[24, 52], ["range", "range", "edge_indices.append", "edge_weights.append", "features.append", "targets.append", "batches.append", "edge_indices_s.append", "edge_weights_s.append", "features_s.append", "targets_s.append", "batches_s.append", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "batch_test.get_edge_array", "numpy.ones", "numpy.random.uniform", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.random.choice", "range", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.heterogeneous_test.get_edge_array"], ["", "def", "generate_signal", "(", "snapshot_count", ",", "node_count", ",", "feature_count", ",", "graph_count", ")", ":", "\n", "    ", "edge_indices", "=", "[", "]", "\n", "edge_weights", "=", "[", "]", "\n", "features", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "batches", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "snapshot_count", ")", ":", "\n", "        ", "node_start", "=", "0", "\n", "edge_indices_s", "=", "[", "]", "\n", "edge_weights_s", "=", "[", "]", "\n", "features_s", "=", "[", "]", "\n", "targets_s", "=", "[", "]", "\n", "batches_s", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "graph_count", ")", ":", "\n", "            ", "edge_indices_s", ".", "append", "(", "get_edge_array", "(", "node_count", ",", "node_start", ")", ")", "\n", "edge_weights_s", ".", "append", "(", "(", "np", ".", "ones", "(", "edge_indices_s", "[", "-", "1", "]", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "features_s", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "node_count", ",", "feature_count", ")", ")", ")", "\n", "targets_s", ".", "append", "(", "\n", "np", ".", "array", "(", "[", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ")", "for", "_", "in", "range", "(", "node_count", ")", "]", ")", "\n", ")", "\n", "batches_s", ".", "append", "(", "np", ".", "array", "(", "[", "i", "for", "_", "in", "range", "(", "node_count", ")", "]", ")", ")", "\n", "node_start", "=", "node_start", "+", "node_count", "\n", "", "edge_indices", ".", "append", "(", "np", ".", "concatenate", "(", "edge_indices_s", ")", ".", "T", ")", "\n", "edge_weights", ".", "append", "(", "np", ".", "concatenate", "(", "edge_weights_s", ")", ")", "\n", "features", ".", "append", "(", "np", ".", "concatenate", "(", "features_s", ")", ")", "\n", "targets", ".", "append", "(", "np", ".", "concatenate", "(", "targets_s", ")", ")", "\n", "batches", ".", "append", "(", "np", ".", "concatenate", "(", "batches_s", ")", ")", "\n", "", "return", "edge_indices", ",", "edge_weights", ",", "features", ",", "targets", ",", "batches", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_heterogeneous_signal": [[54, 98], ["range", "range", "edge_index_dicts.append", "edge_weight_dicts.append", "feature_dicts.append", "target_dicts.append", "batch_dicts.append", "edge_index_dict_s[].append", "edge_weight_dict_s[].append", "feature_dict_s[].append", "feature_dict_s[].append", "target_dict_s[].append", "target_dict_s[].append", "batch_dict_s[].append", "batch_dict_s[].append", "batch_test.get_edge_array", "numpy.ones", "numpy.random.uniform", "numpy.random.uniform", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "edge_index_dict_s.items", "edge_weight_dict_s.items", "feature_dict_s.items", "target_dict_s.items", "batch_dict_s.items", "numpy.random.choice", "numpy.random.choice", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.heterogeneous_test.get_edge_array"], ["", "def", "generate_heterogeneous_signal", "(", "snapshot_count", ",", "node_count", ",", "feature_count", ",", "graph_count", ")", ":", "\n", "    ", "edge_index_dicts", "=", "[", "]", "\n", "edge_weight_dicts", "=", "[", "]", "\n", "feature_dicts", "=", "[", "]", "\n", "target_dicts", "=", "[", "]", "\n", "batch_dicts", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "snapshot_count", ")", ":", "\n", "        ", "node_start", "=", "0", "\n", "edge_index_dict_s", "=", "{", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", ":", "[", "]", "}", "\n", "edge_weight_dict_s", "=", "{", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", ":", "[", "]", "}", "\n", "feature_dict_s", "=", "{", "'author'", ":", "[", "]", ",", "\n", "'paper'", ":", "[", "]", "}", "\n", "target_dict_s", "=", "{", "'author'", ":", "[", "]", ",", "\n", "'paper'", ":", "[", "]", "}", "\n", "batch_dict_s", "=", "{", "'author'", ":", "[", "]", ",", "\n", "'paper'", ":", "[", "]", "}", "\n", "for", "i", "in", "range", "(", "graph_count", ")", ":", "\n", "            ", "edge_index_dict_s", "[", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "]", ".", "append", "(", "get_edge_array", "(", "node_count", ",", "node_start", ")", ")", "\n", "edge_weight_dict_s", "[", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "]", ".", "append", "(", "\n", "(", "np", ".", "ones", "(", "edge_index_dict_s", "[", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "]", "[", "-", "1", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", ")", "\n", "feature_dict_s", "[", "'paper'", "]", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "node_count", ",", "feature_count", ")", ")", ")", "\n", "feature_dict_s", "[", "'author'", "]", ".", "append", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "node_count", ",", "feature_count", ")", ")", ")", "\n", "target_dict_s", "[", "'paper'", "]", ".", "append", "(", "\n", "np", ".", "array", "(", "[", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ")", "for", "_", "in", "range", "(", "node_count", ")", "]", ")", "\n", ")", "\n", "target_dict_s", "[", "'author'", "]", ".", "append", "(", "\n", "np", ".", "array", "(", "[", "np", ".", "random", ".", "choice", "(", "[", "0", ",", "1", "]", ")", "for", "_", "in", "range", "(", "node_count", ")", "]", ")", "\n", ")", "\n", "batch_dict_s", "[", "'paper'", "]", ".", "append", "(", "np", ".", "array", "(", "[", "i", "for", "_", "in", "range", "(", "node_count", ")", "]", ")", ")", "\n", "batch_dict_s", "[", "'author'", "]", ".", "append", "(", "np", ".", "array", "(", "[", "i", "for", "_", "in", "range", "(", "node_count", ")", "]", ")", ")", "\n", "node_start", "=", "node_start", "+", "node_count", "\n", "", "edge_index_dicts", ".", "append", "(", "\n", "{", "node_type", ":", "np", ".", "concatenate", "(", "edge_indices_s", ")", ".", "T", "for", "node_type", ",", "edge_indices_s", "in", "edge_index_dict_s", ".", "items", "(", ")", "}", "\n", ")", "\n", "edge_weight_dicts", ".", "append", "(", "\n", "{", "node_type", ":", "np", ".", "concatenate", "(", "edge_weights_s", ")", "for", "node_type", ",", "edge_weights_s", "in", "edge_weight_dict_s", ".", "items", "(", ")", "}", "\n", ")", "\n", "feature_dicts", ".", "append", "(", "\n", "{", "node_type", ":", "np", ".", "concatenate", "(", "features_s", ")", "for", "node_type", ",", "features_s", "in", "feature_dict_s", ".", "items", "(", ")", "}", "\n", ")", "\n", "target_dicts", ".", "append", "(", "{", "node_type", ":", "np", ".", "concatenate", "(", "targets_s", ")", "for", "node_type", ",", "targets_s", "in", "target_dict_s", ".", "items", "(", ")", "}", ")", "\n", "batch_dicts", ".", "append", "(", "{", "node_type", ":", "np", ".", "concatenate", "(", "batches_s", ")", "for", "node_type", ",", "batches_s", "in", "batch_dict_s", ".", "items", "(", ")", "}", ")", "\n", "", "return", "edge_index_dicts", ",", "edge_weight_dicts", ",", "feature_dicts", ",", "target_dicts", ",", "batch_dicts", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_dynamic_graph_temporal_signal_real_batch": [[100, 122], ["batch_test.generate_signal", "torch_geometric_temporal.signal.DynamicGraphTemporalSignalBatch", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_signal"], ["", "def", "test_dynamic_graph_temporal_signal_real_batch", "(", ")", ":", "\n", "\n", "    ", "snapshot_count", "=", "250", "\n", "node_count", "=", "100", "\n", "feature_count", "=", "32", "\n", "graph_count", "=", "10", "\n", "\n", "edge_indices", ",", "edge_weights", ",", "features", ",", "targets", ",", "batches", "=", "generate_signal", "(", "\n", "snapshot_count", ",", "node_count", ",", "feature_count", ",", "graph_count", "\n", ")", "\n", "\n", "dataset", "=", "DynamicGraphTemporalSignalBatch", "(", "\n", "edge_indices", ",", "edge_weights", ",", "features", ",", "targets", ",", "batches", "\n", ")", "\n", "\n", "for", "_", "in", "range", "(", "15", ")", ":", "\n", "        ", "for", "snapshot", "in", "dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "graph_count", "*", "node_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "graph_count", "*", "node_count", ",", ")", "\n", "assert", "snapshot", ".", "batch", ".", "shape", "==", "(", "graph_count", "*", "node_count", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_static_graph_temporal_signal_batch": [[124, 134], ["torch_geometric_temporal.signal.StaticGraphTemporalSignalBatch"], "function", ["None"], ["", "", "", "def", "test_static_graph_temporal_signal_batch", "(", ")", ":", "\n", "    ", "dataset", "=", "StaticGraphTemporalSignalBatch", "(", "\n", "None", ",", "None", ",", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", ",", "None", "\n", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "edge_index", "is", "None", "\n", "assert", "snapshot", ".", "edge_attr", "is", "None", "\n", "assert", "snapshot", ".", "x", "is", "None", "\n", "assert", "snapshot", ".", "y", "is", "None", "\n", "assert", "snapshot", ".", "batch", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_static_hetero_graph_temporal_signal_batch": [[136, 145], ["torch_geometric_temporal.signal.StaticHeteroGraphTemporalSignalBatch", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "test_static_hetero_graph_temporal_signal_batch", "(", ")", ":", "\n", "    ", "dataset", "=", "StaticHeteroGraphTemporalSignalBatch", "(", "\n", "None", ",", "None", ",", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", ",", "None", "\n", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "node_stores", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "edge_stores", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_dynamic_hetero_graph_static_signal_batch": [[147, 156], ["torch_geometric_temporal.signal.DynamicHeteroGraphStaticSignalBatch", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_static_signal_batch", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphStaticSignalBatch", "(", "\n", "[", "None", "]", ",", "[", "None", "]", ",", "None", ",", "[", "None", "]", ",", "[", "None", "]", "\n", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "node_stores", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "edge_stores", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_dynamic_hetero_graph_temporal_signal_batch": [[158, 167], ["torch_geometric_temporal.signal.DynamicHeteroGraphTemporalSignalBatch", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_temporal_signal_batch", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphTemporalSignalBatch", "(", "\n", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", "\n", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "node_stores", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "0", "\n", "assert", "len", "(", "snapshot", ".", "edge_stores", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_dynamic_graph_temporal_signal_batch": [[169, 179], ["torch_geometric_temporal.signal.DynamicGraphTemporalSignalBatch"], "function", ["None"], ["", "", "def", "test_dynamic_graph_temporal_signal_batch", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicGraphTemporalSignalBatch", "(", "\n", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", ",", "[", "None", ",", "None", "]", "\n", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "edge_index", "is", "None", "\n", "assert", "snapshot", ".", "edge_attr", "is", "None", "\n", "assert", "snapshot", ".", "x", "is", "None", "\n", "assert", "snapshot", ".", "y", "is", "None", "\n", "assert", "snapshot", ".", "batch", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_static_graph_temporal_signal_typing_batch": [[181, 191], ["torch_geometric_temporal.signal.StaticGraphTemporalSignalBatch", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_static_graph_temporal_signal_typing_batch", "(", ")", ":", "\n", "    ", "dataset", "=", "StaticGraphTemporalSignalBatch", "(", "\n", "None", ",", "None", ",", "[", "np", ".", "array", "(", "[", "1", "]", ")", "]", ",", "[", "np", ".", "array", "(", "[", "2", "]", ")", "]", ",", "None", "\n", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "edge_index", "is", "None", "\n", "assert", "snapshot", ".", "edge_attr", "is", "None", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "batch", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_static_hetero_graph_temporal_signal_typing_batch": [[193, 203], ["torch_geometric_temporal.signal.StaticHeteroGraphTemporalSignalBatch", "list", "len", "numpy.array", "numpy.array", "dict().keys", "dict"], "function", ["None"], ["", "", "def", "test_static_hetero_graph_temporal_signal_typing_batch", "(", ")", ":", "\n", "    ", "dataset", "=", "StaticHeteroGraphTemporalSignalBatch", "(", "\n", "None", ",", "None", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "]", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "2", "]", ")", "}", "]", ",", "None", "\n", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "'batch'", "not", "in", "list", "(", "dict", "(", "snapshot", ".", "node_stores", "[", "0", "]", ")", ".", "keys", "(", ")", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_dynamic_hetero_graph_static_signal_typing_batch": [[205, 215], ["torch_geometric_temporal.signal.DynamicHeteroGraphStaticSignalBatch", "numpy.array", "list", "len", "numpy.array", "dict().keys", "dict"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_static_signal_typing_batch", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphStaticSignalBatch", "(", "\n", "[", "None", "]", ",", "[", "None", "]", ",", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "2", "]", ")", "}", "]", ",", "[", "None", "]", "\n", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "'batch'", "not", "in", "list", "(", "dict", "(", "snapshot", ".", "node_stores", "[", "0", "]", ")", ".", "keys", "(", ")", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_dynamic_hetero_graph_temporal_signal_typing_batch": [[217, 227], ["torch_geometric_temporal.signal.DynamicHeteroGraphTemporalSignalBatch", "list", "len", "numpy.array", "numpy.array", "dict().keys", "dict"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_temporal_signal_typing_batch", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphTemporalSignalBatch", "(", "\n", "[", "None", "]", ",", "[", "None", "]", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "]", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "2", "]", ")", "}", "]", ",", "[", "None", "]", "\n", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "'batch'", "not", "in", "list", "(", "dict", "(", "snapshot", ".", "node_stores", "[", "0", "]", ")", ".", "keys", "(", ")", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_dynamic_graph_static_signal_typing_batch": [[229, 237], ["torch_geometric_temporal.signal.DynamicGraphStaticSignalBatch"], "function", ["None"], ["", "", "def", "test_dynamic_graph_static_signal_typing_batch", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicGraphStaticSignalBatch", "(", "[", "None", "]", ",", "[", "None", "]", ",", "None", ",", "[", "None", "]", ",", "[", "None", "]", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "edge_index", "is", "None", "\n", "assert", "snapshot", ".", "edge_attr", "is", "None", "\n", "assert", "snapshot", ".", "x", "is", "None", "\n", "assert", "snapshot", ".", "y", "is", "None", "\n", "assert", "snapshot", ".", "batch", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_dynamic_graph_temporal_signal_batch_additional_attrs": [[239, 246], ["torch_geometric_temporal.signal.DynamicGraphTemporalSignalBatch", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_dynamic_graph_temporal_signal_batch_additional_attrs", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicGraphTemporalSignalBatch", "(", "[", "None", "]", ",", "[", "None", "]", ",", "[", "None", "]", ",", "[", "None", "]", ",", "[", "None", "]", ",", "\n", "optional1", "=", "[", "np", ".", "array", "(", "[", "1", "]", ")", "]", ",", "optional2", "=", "[", "np", ".", "array", "(", "[", "2", "]", ")", "]", ")", "\n", "assert", "dataset", ".", "additional_feature_keys", "==", "[", "\"optional1\"", ",", "\"optional2\"", "]", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "optional1", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "optional2", ".", "shape", "==", "(", "1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_static_graph_temporal_signal_batch_additional_attrs": [[248, 255], ["torch_geometric_temporal.signal.StaticGraphTemporalSignalBatch", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_static_graph_temporal_signal_batch_additional_attrs", "(", ")", ":", "\n", "    ", "dataset", "=", "StaticGraphTemporalSignalBatch", "(", "None", ",", "None", ",", "[", "None", "]", ",", "[", "None", "]", ",", "None", ",", "\n", "optional1", "=", "[", "np", ".", "array", "(", "[", "1", "]", ")", "]", ",", "optional2", "=", "[", "np", ".", "array", "(", "[", "2", "]", ")", "]", ")", "\n", "assert", "dataset", ".", "additional_feature_keys", "==", "[", "\"optional1\"", ",", "\"optional2\"", "]", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "optional1", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "optional2", ".", "shape", "==", "(", "1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_static_hetero_graph_temporal_signal_batch_additional_attrs": [[257, 267], ["torch_geometric_temporal.signal.StaticHeteroGraphTemporalSignalBatch", "list", "dict().keys", "numpy.array", "numpy.array", "dict"], "function", ["None"], ["", "", "def", "test_static_hetero_graph_temporal_signal_batch_additional_attrs", "(", ")", ":", "\n", "    ", "dataset", "=", "StaticHeteroGraphTemporalSignalBatch", "(", "None", ",", "None", ",", "[", "None", "]", ",", "[", "None", "]", ",", "None", ",", "\n", "optional1", "=", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "]", ",", "\n", "optional2", "=", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "2", "]", ")", "}", "]", ",", "\n", "optional3", "=", "[", "None", "]", ")", "\n", "assert", "dataset", ".", "additional_feature_keys", "==", "[", "\"optional1\"", ",", "\"optional2\"", ",", "\"optional3\"", "]", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'optional1'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'optional2'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "\"optional3\"", "not", "in", "list", "(", "dict", "(", "snapshot", ".", "node_stores", "[", "0", "]", ")", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_dynamic_hetero_graph_static_signal_batch_additional_attrs": [[269, 279], ["torch_geometric_temporal.signal.DynamicHeteroGraphStaticSignalBatch", "list", "dict().keys", "numpy.array", "numpy.array", "dict"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_static_signal_batch_additional_attrs", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphStaticSignalBatch", "(", "[", "None", "]", ",", "[", "None", "]", ",", "None", ",", "[", "None", "]", ",", "[", "None", "]", ",", "\n", "optional1", "=", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "]", ",", "\n", "optional2", "=", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "2", "]", ")", "}", "]", ",", "\n", "optional3", "=", "[", "None", "]", ")", "\n", "assert", "dataset", ".", "additional_feature_keys", "==", "[", "\"optional1\"", ",", "\"optional2\"", ",", "\"optional3\"", "]", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'optional1'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'optional2'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "\"optional3\"", "not", "in", "list", "(", "dict", "(", "snapshot", ".", "node_stores", "[", "0", "]", ")", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_dynamic_hetero_graph_temporal_signal_batch_additional_attrs": [[281, 291], ["torch_geometric_temporal.signal.DynamicHeteroGraphTemporalSignalBatch", "list", "dict().keys", "numpy.array", "numpy.array", "dict"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_temporal_signal_batch_additional_attrs", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphTemporalSignalBatch", "(", "[", "None", "]", ",", "[", "None", "]", ",", "[", "None", "]", ",", "[", "None", "]", ",", "[", "None", "]", ",", "\n", "optional1", "=", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "]", ",", "\n", "optional2", "=", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "2", "]", ")", "}", "]", ",", "\n", "optional3", "=", "[", "None", "]", ")", "\n", "assert", "dataset", ".", "additional_feature_keys", "==", "[", "\"optional1\"", ",", "\"optional2\"", ",", "\"optional3\"", "]", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'optional1'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'optional2'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "\"optional3\"", "not", "in", "list", "(", "dict", "(", "snapshot", ".", "node_stores", "[", "0", "]", ")", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_dynamic_graph_static_signal_batch_additional_attrs": [[293, 300], ["torch_geometric_temporal.signal.DynamicGraphStaticSignalBatch", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_dynamic_graph_static_signal_batch_additional_attrs", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicGraphStaticSignalBatch", "(", "[", "None", "]", ",", "[", "None", "]", ",", "None", ",", "[", "None", "]", ",", "[", "None", "]", ",", "\n", "optional1", "=", "[", "np", ".", "array", "(", "[", "1", "]", ")", "]", ",", "optional2", "=", "[", "np", ".", "array", "(", "[", "2", "]", ")", "]", ")", "\n", "assert", "dataset", ".", "additional_feature_keys", "==", "[", "\"optional1\"", ",", "\"optional2\"", "]", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "optional1", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "optional2", ".", "shape", "==", "(", "1", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_static_hetero_graph_temporal_signal_batch_edges": [[302, 315], ["torch_geometric_temporal.signal.StaticHeteroGraphTemporalSignalBatch", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_static_hetero_graph_temporal_signal_batch_edges", "(", ")", ":", "\n", "    ", "dataset", "=", "StaticHeteroGraphTemporalSignalBatch", "(", "{", "(", "\"author\"", ",", "\"writes\"", ",", "\"paper\"", ")", ":", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ")", "}", ",", "\n", "{", "(", "\"author\"", ",", "\"writes\"", ",", "\"paper\"", ")", ":", "np", ".", "array", "(", "[", "[", "0.1", "]", ",", "[", "0.1", "]", "]", ")", "}", ",", "\n", "[", "{", "\"author\"", ":", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "0", "]", "]", ")", ",", "\n", "\"paper\"", ":", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "0", "]", "]", ")", "}", ",", "\n", "{", "\"author\"", ":", "np", ".", "array", "(", "[", "[", "0.1", "]", ",", "[", "0.1", "]", "]", ")", ",", "\n", "\"paper\"", ":", "np", ".", "array", "(", "[", "[", "0.1", "]", ",", "[", "0.1", "]", ",", "[", "0.1", "]", "]", ")", "}", "]", ",", "\n", "[", "None", ",", "None", "]", ",", "\n", "None", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_index'", "]", ".", "shape", "==", "(", "2", ",", "2", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_attr'", "]", ".", "shape", "==", "(", "2", ",", "1", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_index'", "]", ".", "shape", "[", "0", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_attr'", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_dynamic_hetero_graph_static_signal_batch_edges": [[317, 328], ["torch_geometric_temporal.signal.DynamicHeteroGraphStaticSignalBatch", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_static_signal_batch_edges", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphStaticSignalBatch", "(", "[", "{", "(", "\"author\"", ",", "\"writes\"", ",", "\"paper\"", ")", ":", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ")", "}", "]", ",", "\n", "[", "{", "(", "\"author\"", ",", "\"writes\"", ",", "\"paper\"", ")", ":", "np", ".", "array", "(", "[", "[", "0.1", "]", ",", "[", "0.1", "]", "]", ")", "}", "]", ",", "\n", "{", "\"author\"", ":", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "0", "]", "]", ")", ",", "\n", "\"paper\"", ":", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "0", "]", "]", ")", "}", ",", "\n", "[", "None", "]", ",", "\n", "[", "None", "]", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_index'", "]", ".", "shape", "==", "(", "2", ",", "2", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_attr'", "]", ".", "shape", "==", "(", "2", ",", "1", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_index'", "]", ".", "shape", "[", "0", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_attr'", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_dynamic_hetero_graph_temporal_signal_batch_edges": [[330, 341], ["torch_geometric_temporal.signal.DynamicHeteroGraphTemporalSignalBatch", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_temporal_signal_batch_edges", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphTemporalSignalBatch", "(", "[", "{", "(", "\"author\"", ",", "\"writes\"", ",", "\"paper\"", ")", ":", "np", ".", "array", "(", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "0", "]", "]", ")", "}", "]", ",", "\n", "[", "{", "(", "\"author\"", ",", "\"writes\"", ",", "\"paper\"", ")", ":", "np", ".", "array", "(", "[", "[", "0.1", "]", ",", "[", "0.1", "]", "]", ")", "}", "]", ",", "\n", "[", "{", "\"author\"", ":", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "0", "]", "]", ")", ",", "\n", "\"paper\"", ":", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "0", "]", "]", ")", "}", "]", ",", "\n", "[", "None", "]", ",", "\n", "[", "None", "]", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_index'", "]", ".", "shape", "==", "(", "2", ",", "2", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_attr'", "]", ".", "shape", "==", "(", "2", ",", "1", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_index'", "]", ".", "shape", "[", "0", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", "[", "'edge_attr'", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_static_hetero_graph_temporal_signal_batch_assigned": [[343, 353], ["torch_geometric_temporal.signal.StaticHeteroGraphTemporalSignalBatch", "numpy.array", "len", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_static_hetero_graph_temporal_signal_batch_assigned", "(", ")", ":", "\n", "    ", "dataset", "=", "StaticHeteroGraphTemporalSignalBatch", "(", "\n", "None", ",", "None", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "]", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "2", "]", ")", "}", "]", ",", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "\n", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'batch'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_dynamic_hetero_graph_static_signal_batch_assigned": [[355, 365], ["torch_geometric_temporal.signal.DynamicHeteroGraphStaticSignalBatch", "numpy.array", "len", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_static_signal_batch_assigned", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphStaticSignalBatch", "(", "\n", "[", "None", "]", ",", "[", "None", "]", ",", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "2", "]", ")", "}", "]", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "]", "\n", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'batch'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_dynamic_hetero_graph_temporal_signal_batch_assigned": [[367, 377], ["torch_geometric_temporal.signal.DynamicHeteroGraphTemporalSignalBatch", "len", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "", "def", "test_dynamic_hetero_graph_temporal_signal_batch_assigned", "(", ")", ":", "\n", "    ", "dataset", "=", "DynamicHeteroGraphTemporalSignalBatch", "(", "\n", "[", "None", "]", ",", "[", "None", "]", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "]", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "2", "]", ")", "}", "]", ",", "[", "{", "'author'", ":", "np", ".", "array", "(", "[", "1", "]", ")", "}", "]", "\n", ")", "\n", "for", "snapshot", "in", "dataset", ":", "\n", "        ", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'batch'", "]", ".", "shape", "==", "(", "1", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_discrete_train_test_split_dynamic_batch": [[379, 409], ["batch_test.generate_signal", "torch_geometric_temporal.signal.DynamicGraphTemporalSignalBatch", "torch_geometric_temporal.signal.temporal_signal_split", "range", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_signal", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.train_test_split.temporal_signal_split"], ["", "", "def", "test_discrete_train_test_split_dynamic_batch", "(", ")", ":", "\n", "\n", "    ", "snapshot_count", "=", "250", "\n", "node_count", "=", "100", "\n", "feature_count", "=", "32", "\n", "graph_count", "=", "10", "\n", "\n", "edge_indices", ",", "edge_weights", ",", "features", ",", "targets", ",", "batches", "=", "generate_signal", "(", "\n", "snapshot_count", ",", "node_count", ",", "feature_count", ",", "graph_count", "\n", ")", "\n", "\n", "dataset", "=", "DynamicGraphTemporalSignalBatch", "(", "\n", "edge_indices", ",", "edge_weights", ",", "features", ",", "targets", ",", "batches", "\n", ")", "\n", "\n", "train_dataset", ",", "test_dataset", "=", "temporal_signal_split", "(", "dataset", ",", "0.8", ")", "\n", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "test_dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "\n", "", "", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "train_dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_train_test_split_static_graph_temporal_signal_batch": [[411, 441], ["batch_test.generate_signal", "torch_geometric_temporal.signal.StaticGraphTemporalSignalBatch", "torch_geometric_temporal.signal.temporal_signal_split", "range", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_signal", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.train_test_split.temporal_signal_split"], ["", "", "", "def", "test_train_test_split_static_graph_temporal_signal_batch", "(", ")", ":", "\n", "\n", "    ", "snapshot_count", "=", "250", "\n", "node_count", "=", "100", "\n", "feature_count", "=", "32", "\n", "graph_count", "=", "10", "\n", "\n", "edge_indices", ",", "edge_weights", ",", "features", ",", "targets", ",", "batches", "=", "generate_signal", "(", "\n", "snapshot_count", ",", "node_count", ",", "feature_count", ",", "graph_count", "\n", ")", "\n", "\n", "dataset", "=", "StaticGraphTemporalSignalBatch", "(", "\n", "edge_indices", "[", "0", "]", ",", "edge_weights", "[", "0", "]", ",", "features", ",", "targets", ",", "batches", "[", "0", "]", "\n", ")", "\n", "\n", "train_dataset", ",", "test_dataset", "=", "temporal_signal_split", "(", "dataset", ",", "0.8", ")", "\n", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "test_dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "\n", "", "", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "train_dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_train_test_split_dynamic_graph_static_signal_batch": [[443, 475], ["batch_test.generate_signal", "torch_geometric_temporal.signal.DynamicGraphStaticSignalBatch", "torch_geometric_temporal.signal.temporal_signal_split", "range", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_signal", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.train_test_split.temporal_signal_split"], ["", "", "", "def", "test_train_test_split_dynamic_graph_static_signal_batch", "(", ")", ":", "\n", "\n", "    ", "snapshot_count", "=", "250", "\n", "node_count", "=", "100", "\n", "feature_count", "=", "32", "\n", "graph_count", "=", "10", "\n", "\n", "edge_indices", ",", "edge_weights", ",", "features", ",", "targets", ",", "batches", "=", "generate_signal", "(", "\n", "snapshot_count", ",", "node_count", ",", "feature_count", ",", "graph_count", "\n", ")", "\n", "\n", "feature", "=", "features", "[", "0", "]", "\n", "\n", "dataset", "=", "DynamicGraphStaticSignalBatch", "(", "\n", "edge_indices", ",", "edge_weights", ",", "feature", ",", "targets", ",", "batches", "\n", ")", "\n", "\n", "train_dataset", ",", "test_dataset", "=", "temporal_signal_split", "(", "dataset", ",", "0.8", ")", "\n", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "test_dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "\n", "", "", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "train_dataset", ":", "\n", "            ", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "assert", "snapshot", ".", "x", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "y", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_train_test_split_dynamic_hetero_graph_temporal_signal_batch": [[477, 520], ["batch_test.generate_heterogeneous_signal", "torch_geometric_temporal.signal.DynamicHeteroGraphTemporalSignalBatch", "torch_geometric_temporal.signal.temporal_signal_split", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_heterogeneous_signal", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.train_test_split.temporal_signal_split"], ["", "", "", "def", "test_train_test_split_dynamic_hetero_graph_temporal_signal_batch", "(", ")", ":", "\n", "    ", "snapshot_count", "=", "250", "\n", "node_count", "=", "100", "\n", "feature_count", "=", "32", "\n", "graph_count", "=", "10", "\n", "\n", "edge_index_dicts", ",", "edge_weight_dicts", ",", "feature_dicts", ",", "target_dicts", ",", "batch_dicts", "=", "generate_heterogeneous_signal", "(", "\n", "snapshot_count", ",", "node_count", ",", "feature_count", ",", "graph_count", "\n", ")", "\n", "\n", "dataset", "=", "DynamicHeteroGraphTemporalSignalBatch", "(", "\n", "edge_index_dicts", ",", "edge_weight_dicts", ",", "feature_dicts", ",", "target_dicts", ",", "batch_dicts", "\n", ")", "\n", "\n", "train_dataset", ",", "test_dataset", "=", "temporal_signal_split", "(", "dataset", ",", "0.8", ")", "\n", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "test_dataset", ":", "\n", "            ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "2", "\n", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_types", "[", "1", "]", "==", "'paper'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'x'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'y'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "1", "\n", "assert", "snapshot", ".", "edge_types", "[", "0", "]", "==", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "train_dataset", ":", "\n", "            ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "2", "\n", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_types", "[", "1", "]", "==", "'paper'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'x'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'y'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "1", "\n", "assert", "snapshot", ".", "edge_types", "[", "0", "]", "==", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_train_test_split_static_hetero_graph_temporal_signal_batch": [[522, 566], ["batch_test.generate_heterogeneous_signal", "torch_geometric_temporal.signal.StaticHeteroGraphTemporalSignalBatch", "torch_geometric_temporal.signal.temporal_signal_split", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_heterogeneous_signal", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.train_test_split.temporal_signal_split"], ["", "", "", "def", "test_train_test_split_static_hetero_graph_temporal_signal_batch", "(", ")", ":", "\n", "\n", "    ", "snapshot_count", "=", "250", "\n", "node_count", "=", "100", "\n", "feature_count", "=", "32", "\n", "graph_count", "=", "10", "\n", "\n", "edge_index_dicts", ",", "edge_weight_dicts", ",", "feature_dicts", ",", "target_dicts", ",", "batch_dicts", "=", "generate_heterogeneous_signal", "(", "\n", "snapshot_count", ",", "node_count", ",", "feature_count", ",", "graph_count", "\n", ")", "\n", "\n", "dataset", "=", "StaticHeteroGraphTemporalSignalBatch", "(", "\n", "edge_index_dicts", "[", "0", "]", ",", "edge_weight_dicts", "[", "0", "]", ",", "feature_dicts", ",", "target_dicts", ",", "batch_dicts", "[", "0", "]", "\n", ")", "\n", "\n", "train_dataset", ",", "test_dataset", "=", "temporal_signal_split", "(", "dataset", ",", "0.8", ")", "\n", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "test_dataset", ":", "\n", "            ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "2", "\n", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_types", "[", "1", "]", "==", "'paper'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'x'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'y'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "1", "\n", "assert", "snapshot", ".", "edge_types", "[", "0", "]", "==", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "train_dataset", ":", "\n", "            ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "2", "\n", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_types", "[", "1", "]", "==", "'paper'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'x'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'y'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "1", "\n", "assert", "snapshot", ".", "edge_types", "[", "0", "]", "==", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.test_train_test_split_dynamic_hetero_graph_static_signal_batch": [[568, 612], ["batch_test.generate_heterogeneous_signal", "torch_geometric_temporal.signal.DynamicHeteroGraphStaticSignalBatch", "torch_geometric_temporal.signal.temporal_signal_split", "range", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.batch_test.generate_heterogeneous_signal", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.train_test_split.temporal_signal_split"], ["", "", "", "def", "test_train_test_split_dynamic_hetero_graph_static_signal_batch", "(", ")", ":", "\n", "\n", "    ", "snapshot_count", "=", "250", "\n", "node_count", "=", "100", "\n", "feature_count", "=", "32", "\n", "graph_count", "=", "10", "\n", "\n", "edge_index_dicts", ",", "edge_weight_dicts", ",", "feature_dicts", ",", "target_dicts", ",", "batch_dicts", "=", "generate_heterogeneous_signal", "(", "\n", "snapshot_count", ",", "node_count", ",", "feature_count", ",", "graph_count", "\n", ")", "\n", "\n", "dataset", "=", "DynamicHeteroGraphStaticSignalBatch", "(", "\n", "edge_index_dicts", ",", "edge_weight_dicts", ",", "feature_dicts", "[", "0", "]", ",", "target_dicts", ",", "batch_dicts", "\n", ")", "\n", "\n", "train_dataset", ",", "test_dataset", "=", "temporal_signal_split", "(", "dataset", ",", "0.8", ")", "\n", "\n", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "test_dataset", ":", "\n", "            ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "2", "\n", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_types", "[", "1", "]", "==", "'paper'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'x'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'y'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "1", "\n", "assert", "snapshot", ".", "edge_types", "[", "0", "]", "==", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "\n", "", "", "for", "_", "in", "range", "(", "2", ")", ":", "\n", "        ", "for", "snapshot", "in", "train_dataset", ":", "\n", "            ", "assert", "len", "(", "snapshot", ".", "node_types", ")", "==", "2", "\n", "assert", "snapshot", ".", "node_types", "[", "0", "]", "==", "'author'", "\n", "assert", "snapshot", ".", "node_types", "[", "1", "]", "==", "'paper'", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'x'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'x'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", "feature_count", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "0", "]", "[", "'y'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "assert", "snapshot", ".", "node_stores", "[", "1", "]", "[", "'y'", "]", ".", "shape", "==", "(", "node_count", "*", "graph_count", ",", ")", "\n", "assert", "len", "(", "snapshot", ".", "edge_types", ")", "==", "1", "\n", "assert", "snapshot", ".", "edge_types", "[", "0", "]", "==", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "0", "]", "==", "2", "\n", "assert", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_index", ".", "shape", "[", "1", "]", "==", "snapshot", ".", "edge_stores", "[", "0", "]", ".", "edge_attr", ".", "shape", "[", "0", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.heterogeneous_test.get_edge_array": [[9, 11], ["numpy.array", "networkx.gnp_random_graph().edges", "networkx.gnp_random_graph"], "function", ["None"], ["def", "get_edge_array", "(", "n_count", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "[", "edge", "for", "edge", "in", "nx", ".", "gnp_random_graph", "(", "n_count", ",", "0.1", ")", ".", "edges", "(", ")", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.heterogeneous_test.create_hetero_mock_data": [[13, 25], ["torch_geometric.data.HeteroData", "torch.FloatTensor", "torch.FloatTensor", "torch.LongTensor", "torch_geometric.ToUndirected", "torch_geometric.data.HeteroData.metadata", "numpy.random.uniform", "numpy.random.uniform", "heterogeneous_test.get_edge_array"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.heterogeneous_test.get_edge_array"], ["", "def", "create_hetero_mock_data", "(", "n_count", ",", "feature_dict", ")", ":", "\n", "    ", "_x_dict", "=", "{", "'author'", ":", "torch", ".", "FloatTensor", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "n_count", ",", "feature_dict", "[", "'author'", "]", ")", ")", ")", ",", "\n", "'paper'", ":", "torch", ".", "FloatTensor", "(", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "n_count", ",", "feature_dict", "[", "'paper'", "]", ")", ")", ")", "}", "\n", "_edge_index_dict", "=", "{", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", ":", "torch", ".", "LongTensor", "(", "get_edge_array", "(", "n_count", ")", ")", "}", "\n", "\n", "data", "=", "HeteroData", "(", ")", "\n", "data", "[", "'author'", "]", ".", "x", "=", "_x_dict", "[", "'author'", "]", "\n", "data", "[", "'paper'", "]", ".", "x", "=", "_x_dict", "[", "'paper'", "]", "\n", "data", "[", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "]", ".", "edge_index", "=", "_edge_index_dict", "[", "(", "'author'", ",", "'writes'", ",", "'paper'", ")", "]", "\n", "data", "=", "T", ".", "ToUndirected", "(", ")", "(", "data", ")", "\n", "\n", "return", "data", ".", "x_dict", ",", "data", ".", "edge_index_dict", ",", "data", ".", "metadata", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.heterogeneous_test.test_hetero_gclstm_layer": [[27, 52], ["heterogeneous_test.create_hetero_mock_data", "torch_geometric_temporal.nn.hetero.HeteroGCLSTM", "torch_geometric_temporal.nn.hetero.HeteroGCLSTM.", "torch_geometric_temporal.nn.hetero.HeteroGCLSTM."], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.test.heterogeneous_test.create_hetero_mock_data"], ["", "def", "test_hetero_gclstm_layer", "(", ")", ":", "\n", "    ", "\"\"\"\n        Testing the HeteroGCLSTM Layer.\n    \"\"\"", "\n", "number_of_nodes", "=", "50", "\n", "feature_dict", "=", "{", "'author'", ":", "20", ",", "'paper'", ":", "30", "}", "\n", "out_channels", "=", "32", "\n", "\n", "x_dict", ",", "edge_index_dict", ",", "metadata", "=", "create_hetero_mock_data", "(", "number_of_nodes", ",", "feature_dict", ")", "\n", "\n", "layer", "=", "HeteroGCLSTM", "(", "in_channels_dict", "=", "feature_dict", ",", "out_channels", "=", "out_channels", ",", "metadata", "=", "metadata", ")", "\n", "\n", "h_dict", ",", "c_dict", "=", "layer", "(", "x_dict", ",", "edge_index_dict", ")", "\n", "\n", "assert", "h_dict", "[", "'author'", "]", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "assert", "h_dict", "[", "'paper'", "]", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "assert", "c_dict", "[", "'author'", "]", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "assert", "c_dict", "[", "'paper'", "]", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "\n", "h_dict", ",", "c_dict", "=", "layer", "(", "x_dict", ",", "edge_index_dict", ",", "h_dict", ",", "c_dict", ")", "\n", "\n", "assert", "h_dict", "[", "'author'", "]", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "assert", "h_dict", "[", "'paper'", "]", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "assert", "c_dict", "[", "'author'", "]", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "assert", "c_dict", "[", "'paper'", "]", ".", "shape", "==", "(", "number_of_nodes", ",", "out_channels", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconvgru_example.RecurrentGCN.__init__": [[17, 21], ["super().__init__", "torch_geometric_temporal.nn.recurrent.GConvGRU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_features", ")", ":", "\n", "        ", "super", "(", "RecurrentGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "recurrent", "=", "GConvGRU", "(", "node_features", ",", "32", ",", "1", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconvgru_example.RecurrentGCN.forward": [[22, 27], ["gconvgru_example.RecurrentGCN.recurrent", "torch.relu", "torch.relu", "gconvgru_example.RecurrentGCN.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", ")", ":", "\n", "        ", "h", "=", "self", ".", "recurrent", "(", "x", ",", "edge_index", ",", "edge_weight", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "linear", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gclstm_example.RecurrentGCN.__init__": [[17, 21], ["super().__init__", "torch_geometric_temporal.nn.recurrent.GCLSTM", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_features", ")", ":", "\n", "        ", "super", "(", "RecurrentGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "recurrent", "=", "GCLSTM", "(", "node_features", ",", "32", ",", "1", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gclstm_example.RecurrentGCN.forward": [[22, 27], ["gclstm_example.RecurrentGCN.recurrent", "torch.relu", "torch.relu", "gclstm_example.RecurrentGCN.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", ",", "h", ",", "c", ")", ":", "\n", "        ", "h_0", ",", "c_0", "=", "self", ".", "recurrent", "(", "x", ",", "edge_index", ",", "edge_weight", ",", "h", ",", "c", ")", "\n", "h", "=", "F", ".", "relu", "(", "h_0", ")", "\n", "h", "=", "self", ".", "linear", "(", "h", ")", "\n", "return", "h", ",", "h_0", ",", "c_0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dygrencoder_example.RecurrentGCN.__init__": [[17, 21], ["super().__init__", "torch_geometric_temporal.nn.recurrent.DyGrEncoder", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_features", ")", ":", "\n", "        ", "super", "(", "RecurrentGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "recurrent", "=", "DyGrEncoder", "(", "conv_out_channels", "=", "4", ",", "conv_num_layers", "=", "1", ",", "conv_aggr", "=", "\"mean\"", ",", "lstm_out_channels", "=", "32", ",", "lstm_num_layers", "=", "1", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dygrencoder_example.RecurrentGCN.forward": [[22, 27], ["dygrencoder_example.RecurrentGCN.recurrent", "torch.relu", "torch.relu", "dygrencoder_example.RecurrentGCN.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", ",", "h_0", ",", "c_0", ")", ":", "\n", "        ", "h", ",", "h_0", ",", "c_0", "=", "self", ".", "recurrent", "(", "x", ",", "edge_index", ",", "edge_weight", ",", "h_0", ",", "c_0", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "linear", "(", "h", ")", "\n", "return", "h", ",", "h_0", ",", "c_0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.a3tgcn2_example.TemporalGNN.__init__": [[72, 78], ["super().__init__", "torch_geometric_temporal.nn.recurrent.A3TGCN2", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_features", ",", "periods", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", "TemporalGNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Attention Temporal Graph Convolutional Cell", "\n", "self", ".", "tgnn", "=", "A3TGCN2", "(", "in_channels", "=", "node_features", ",", "out_channels", "=", "32", ",", "periods", "=", "periods", ",", "batch_size", "=", "batch_size", ")", "# node_features=2, periods=12", "\n", "# Equals single-shot prediction", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "periods", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.a3tgcn2_example.TemporalGNN.forward": [[79, 88], ["a3tgcn2_example.TemporalGNN.tgnn", "torch.relu", "torch.relu", "a3tgcn2_example.TemporalGNN.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ")", ":", "\n", "        ", "\"\"\"\n        x = Node features for T time steps\n        edge_index = Graph edge indices\n        \"\"\"", "\n", "h", "=", "self", ".", "tgnn", "(", "x", ",", "edge_index", ")", "# x [b, 207, 2, 12]  returns h [b, 207, 12]", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "linear", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcno_example.RecurrentGCN.__init__": [[17, 21], ["super().__init__", "torch_geometric_temporal.nn.recurrent.EvolveGCNO", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_features", ")", ":", "\n", "        ", "super", "(", "RecurrentGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "recurrent", "=", "EvolveGCNO", "(", "node_features", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "node_features", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcno_example.RecurrentGCN.forward": [[22, 27], ["evolvegcno_example.RecurrentGCN.recurrent", "torch.relu", "torch.relu", "evolvegcno_example.RecurrentGCN.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", ")", ":", "\n", "        ", "h", "=", "self", ".", "recurrent", "(", "x", ",", "edge_index", ",", "edge_weight", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "linear", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.agcrn_example.RecurrentGCN.__init__": [[17, 25], ["super().__init__", "torch_geometric_temporal.nn.recurrent.AGCRN", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_features", ")", ":", "\n", "        ", "super", "(", "RecurrentGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "recurrent", "=", "AGCRN", "(", "number_of_nodes", "=", "20", ",", "\n", "in_channels", "=", "node_features", ",", "\n", "out_channels", "=", "2", ",", "\n", "K", "=", "2", ",", "\n", "embedding_dimensions", "=", "4", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.agcrn_example.RecurrentGCN.forward": [[26, 31], ["agcrn_example.RecurrentGCN.recurrent", "torch.relu", "torch.relu", "agcrn_example.RecurrentGCN.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "e", ",", "h", ")", ":", "\n", "        ", "h_0", "=", "self", ".", "recurrent", "(", "x", ",", "e", ",", "h", ")", "\n", "y", "=", "F", ".", "relu", "(", "h_0", ")", "\n", "y", "=", "self", ".", "linear", "(", "y", ")", "\n", "return", "y", ",", "h_0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lightning_example.LitDiffConvModel.__init__": [[14, 18], ["pytorch_lightning.LightningModule.__init__", "torch_geometric_temporal.nn.recurrent.DCRNN", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_features", ",", "filters", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "recurrent", "=", "DCRNN", "(", "node_features", ",", "filters", ",", "1", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "filters", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lightning_example.LitDiffConvModel.configure_optimizers": [[20, 23], ["torch.optim.Adam", "lightning_example.LitDiffConvModel.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lightning_example.LitDiffConvModel.training_step": [[24, 33], ["train_batch.y.view", "lightning_example.LitDiffConvModel.recurrent", "torch.nn.functional.relu", "lightning_example.LitDiffConvModel.linear", "torch.nn.functional.mse_loss"], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "train_batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", "=", "train_batch", ".", "x", "\n", "y", "=", "train_batch", ".", "y", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "edge_index", "=", "train_batch", ".", "edge_index", "\n", "h", "=", "self", ".", "recurrent", "(", "x", ",", "edge_index", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "linear", "(", "h", ")", "\n", "loss", "=", "F", ".", "mse_loss", "(", "h", ",", "y", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lightning_example.LitDiffConvModel.validation_step": [[34, 45], ["val_batch.y.view", "lightning_example.LitDiffConvModel.recurrent", "torch.nn.functional.relu", "lightning_example.LitDiffConvModel.linear", "torch.nn.functional.mse_loss", "lightning_example.LitDiffConvModel.log_dict"], "methods", ["None"], ["", "def", "validation_step", "(", "self", ",", "val_batch", ",", "batch_idx", ")", ":", "\n", "        ", "x", "=", "val_batch", ".", "x", "\n", "y", "=", "val_batch", ".", "y", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "edge_index", "=", "val_batch", ".", "edge_index", "\n", "h", "=", "self", ".", "recurrent", "(", "x", ",", "edge_index", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "linear", "(", "h", ")", "\n", "loss", "=", "F", ".", "mse_loss", "(", "h", ",", "y", ")", "\n", "metrics", "=", "{", "'val_loss'", ":", "loss", "}", "\n", "self", ".", "log_dict", "(", "metrics", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.a3tgcn_example.RecurrentGCN.__init__": [[17, 21], ["super().__init__", "torch_geometric_temporal.nn.recurrent.A3TGCN", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_features", ",", "periods", ")", ":", "\n", "        ", "super", "(", "RecurrentGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "recurrent", "=", "A3TGCN", "(", "node_features", ",", "32", ",", "periods", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.a3tgcn_example.RecurrentGCN.forward": [[22, 27], ["a3tgcn_example.RecurrentGCN.recurrent", "torch.relu", "torch.relu", "a3tgcn_example.RecurrentGCN.linear", "x.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", ")", ":", "\n", "        ", "h", "=", "self", ".", "recurrent", "(", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "x", ".", "shape", "[", "1", "]", ")", ",", "edge_index", ",", "edge_weight", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "linear", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcnh_example.RecurrentGCN.__init__": [[17, 21], ["super().__init__", "torch_geometric_temporal.nn.recurrent.EvolveGCNH", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_count", ",", "node_features", ")", ":", "\n", "        ", "super", "(", "RecurrentGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "recurrent", "=", "EvolveGCNH", "(", "node_count", ",", "node_features", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "node_features", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcnh_example.RecurrentGCN.forward": [[22, 27], ["evolvegcnh_example.RecurrentGCN.recurrent", "torch.relu", "torch.relu", "evolvegcnh_example.RecurrentGCN.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", ")", ":", "\n", "        ", "h", "=", "self", ".", "recurrent", "(", "x", ",", "edge_index", ",", "edge_weight", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "linear", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconvlstm_example.RecurrentGCN.__init__": [[17, 21], ["super().__init__", "torch_geometric_temporal.nn.recurrent.GConvLSTM", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_features", ")", ":", "\n", "        ", "super", "(", "RecurrentGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "recurrent", "=", "GConvLSTM", "(", "node_features", ",", "32", ",", "1", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconvlstm_example.RecurrentGCN.forward": [[22, 27], ["gconvlstm_example.RecurrentGCN.recurrent", "torch.relu", "torch.relu", "gconvlstm_example.RecurrentGCN.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", ",", "h", ",", "c", ")", ":", "\n", "        ", "h_0", ",", "c_0", "=", "self", ".", "recurrent", "(", "x", ",", "edge_index", ",", "edge_weight", ",", "h", ",", "c", ")", "\n", "h", "=", "F", ".", "relu", "(", "h_0", ")", "\n", "h", "=", "self", ".", "linear", "(", "h", ")", "\n", "return", "h", ",", "h_0", ",", "c_0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.tgcn_example.RecurrentGCN.__init__": [[17, 21], ["super().__init__", "torch_geometric_temporal.nn.recurrent.TGCN", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_features", ")", ":", "\n", "        ", "super", "(", "RecurrentGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "recurrent", "=", "TGCN", "(", "node_features", ",", "32", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.tgcn_example.RecurrentGCN.forward": [[22, 27], ["tgcn_example.RecurrentGCN.recurrent", "torch.relu", "torch.relu", "tgcn_example.RecurrentGCN.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", ")", ":", "\n", "        ", "h", "=", "self", ".", "recurrent", "(", "x", ",", "edge_index", ",", "edge_weight", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "linear", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.mpnnlstm_example.RecurrentGCN.__init__": [[17, 21], ["super().__init__", "torch_geometric_temporal.nn.recurrent.MPNNLSTM", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_features", ")", ":", "\n", "        ", "super", "(", "RecurrentGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "recurrent", "=", "MPNNLSTM", "(", "node_features", ",", "32", ",", "32", ",", "20", ",", "1", ",", "0.5", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "2", "*", "32", "+", "node_features", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.mpnnlstm_example.RecurrentGCN.forward": [[22, 27], ["mpnnlstm_example.RecurrentGCN.recurrent", "torch.relu", "torch.relu", "mpnnlstm_example.RecurrentGCN.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", ")", ":", "\n", "        ", "h", "=", "self", ".", "recurrent", "(", "x", ",", "edge_index", ",", "edge_weight", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "linear", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn_example.RecurrentGCN.__init__": [[17, 21], ["super().__init__", "torch_geometric_temporal.nn.recurrent.DCRNN", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_features", ")", ":", "\n", "        ", "super", "(", "RecurrentGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "recurrent", "=", "DCRNN", "(", "node_features", ",", "32", ",", "1", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn_example.RecurrentGCN.forward": [[22, 27], ["dcrnn_example.RecurrentGCN.recurrent", "torch.relu", "torch.relu", "dcrnn_example.RecurrentGCN.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", ")", ":", "\n", "        ", "h", "=", "self", ".", "recurrent", "(", "x", ",", "edge_index", ",", "edge_weight", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "h", "=", "self", ".", "linear", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn_example.RecurrentGCN.__init__": [[17, 21], ["super().__init__", "torch_geometric_temporal.nn.recurrent.LRGCN", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "node_features", ")", ":", "\n", "        ", "super", "(", "RecurrentGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "recurrent", "=", "LRGCN", "(", "node_features", ",", "32", ",", "1", ",", "1", ")", "\n", "self", ".", "linear", "=", "torch", ".", "nn", ".", "Linear", "(", "32", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn_example.RecurrentGCN.forward": [[22, 27], ["lrgcn_example.RecurrentGCN.recurrent", "torch.relu", "torch.relu", "lrgcn_example.RecurrentGCN.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "edge_index", ",", "edge_weight", ",", "h_0", ",", "c_0", ")", ":", "\n", "        ", "h_0", ",", "c_0", "=", "self", ".", "recurrent", "(", "x", ",", "edge_index", ",", "edge_weight", ",", "h_0", ",", "c_0", ")", "\n", "h", "=", "F", ".", "relu", "(", "h_0", ")", "\n", "h", "=", "self", ".", "linear", "(", "h", ")", "\n", "return", "h", ",", "h_0", ",", "c_0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.attentiontemporalgcn.A3TGCN.__init__": [[21, 39], ["super().__init__", "attentiontemporalgcn.A3TGCN._setup_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.agcrn.AGCRN._setup_layers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "periods", ":", "int", ",", "\n", "improved", ":", "bool", "=", "False", ",", "\n", "cached", ":", "bool", "=", "False", ",", "\n", "add_self_loops", ":", "bool", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "A3TGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "periods", "=", "periods", "\n", "self", ".", "improved", "=", "improved", "\n", "self", ".", "cached", "=", "cached", "\n", "self", ".", "add_self_loops", "=", "add_self_loops", "\n", "self", ".", "_setup_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.attentiontemporalgcn.A3TGCN._setup_layers": [[40, 51], ["temporalgcn.TGCN", "torch.device", "torch.nn.Parameter", "torch.nn.init.uniform_", "torch.empty", "torch.cuda.is_available"], "methods", ["None"], ["", "def", "_setup_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "_base_tgcn", "=", "TGCN", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "improved", "=", "self", ".", "improved", ",", "\n", "cached", "=", "self", ".", "cached", ",", "\n", "add_self_loops", "=", "self", ".", "add_self_loops", ",", "\n", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "self", ".", "_attention", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "self", ".", "periods", ",", "device", "=", "device", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "_attention", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.attentiontemporalgcn.A3TGCN.forward": [[52, 80], ["torch.nn.functional.softmax", "range", "attentiontemporalgcn.A3TGCN._base_tgcn"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "H", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph. If the hidden state matrix is not present\n        when the forward pass is called it is initialized with zeros.\n\n        Arg types:\n            * **X** (PyTorch Float Tensor): Node features for T time periods.\n            * **edge_index** (PyTorch Long Tensor): Graph edge indices.\n            * **edge_weight** (PyTorch Long Tensor, optional)*: Edge weight vector.\n            * **H** (PyTorch Float Tensor, optional): Hidden state matrix for all nodes.\n\n        Return types:\n            * **H** (PyTorch Float Tensor): Hidden state matrix for all nodes.\n        \"\"\"", "\n", "H_accum", "=", "0", "\n", "probs", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "_attention", ",", "dim", "=", "0", ")", "\n", "for", "period", "in", "range", "(", "self", ".", "periods", ")", ":", "\n", "            ", "H_accum", "=", "H_accum", "+", "probs", "[", "period", "]", "*", "self", ".", "_base_tgcn", "(", "\n", "X", "[", ":", ",", ":", ",", "period", "]", ",", "edge_index", ",", "edge_weight", ",", "H", "\n", ")", "\n", "", "return", "H_accum", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.attentiontemporalgcn.A3TGCN2.__init__": [[97, 116], ["super().__init__", "attentiontemporalgcn.A3TGCN2._setup_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.agcrn.AGCRN._setup_layers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "periods", ":", "int", ",", "\n", "batch_size", ":", "int", ",", "\n", "improved", ":", "bool", "=", "False", ",", "\n", "cached", ":", "bool", "=", "False", ",", "\n", "add_self_loops", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", "A3TGCN2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "# 2", "\n", "self", ".", "out_channels", "=", "out_channels", "# 32", "\n", "self", ".", "periods", "=", "periods", "# 12", "\n", "self", ".", "improved", "=", "improved", "\n", "self", ".", "cached", "=", "cached", "\n", "self", ".", "add_self_loops", "=", "add_self_loops", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "_setup_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.attentiontemporalgcn.A3TGCN2._setup_layers": [[117, 129], ["temporalgcn.TGCN2", "torch.device", "torch.nn.Parameter", "torch.nn.init.uniform_", "torch.empty", "torch.cuda.is_available"], "methods", ["None"], ["", "def", "_setup_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "_base_tgcn", "=", "TGCN2", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "improved", "=", "self", ".", "improved", ",", "\n", "cached", "=", "self", ".", "cached", ",", "\n", "add_self_loops", "=", "self", ".", "add_self_loops", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "self", ".", "_attention", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "self", ".", "periods", ",", "device", "=", "device", ")", ")", "\n", "torch", ".", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "_attention", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.attentiontemporalgcn.A3TGCN2.forward": [[130, 158], ["torch.nn.functional.softmax", "range", "attentiontemporalgcn.A3TGCN2._base_tgcn"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "H", ":", "torch", ".", "FloatTensor", "=", "None", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph. If the hidden state matrix is not present\n        when the forward pass is called it is initialized with zeros.\n\n        Arg types:\n            * **X** (PyTorch Float Tensor): Node features for T time periods.\n            * **edge_index** (PyTorch Long Tensor): Graph edge indices.\n            * **edge_weight** (PyTorch Long Tensor, optional)*: Edge weight vector.\n            * **H** (PyTorch Float Tensor, optional): Hidden state matrix for all nodes.\n\n        Return types:\n            * **H** (PyTorch Float Tensor): Hidden state matrix for all nodes.\n        \"\"\"", "\n", "H_accum", "=", "0", "\n", "probs", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "self", ".", "_attention", ",", "dim", "=", "0", ")", "\n", "for", "period", "in", "range", "(", "self", ".", "periods", ")", ":", "\n", "\n", "            ", "H_accum", "=", "H_accum", "+", "probs", "[", "period", "]", "*", "self", ".", "_base_tgcn", "(", "X", "[", ":", ",", ":", ",", ":", ",", "period", "]", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "#([32, 207, 32]", "\n", "\n", "", "return", "H_accum", "", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.agcrn.AVWGCN.__init__": [[18, 31], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["def", "__init__", "(", "\n", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "K", ":", "int", ",", "embedding_dimensions", ":", "int", "\n", ")", ":", "\n", "        ", "super", "(", "AVWGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "weights_pool", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "embedding_dimensions", ",", "K", ",", "in_channels", ",", "out_channels", ")", "\n", ")", "\n", "self", ".", "bias_pool", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "embedding_dimensions", ",", "out_channels", ")", "\n", ")", "\n", "glorot", "(", "self", ".", "weights_pool", ")", "\n", "zeros", "(", "self", ".", "bias_pool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.agcrn.AVWGCN.forward": [[32, 54], ["torch.softmax", "torch.softmax", "torch.softmax", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "X_G.permute.permute.permute", "torch.relu", "torch.relu", "torch.relu", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "support_set.append", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "E.transpose", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "E", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "r\"\"\"Making a forward pass.\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Node features.\n            * **E** (PyTorch Float Tensor) - Node embeddings.\n        Return types:\n            * **X_G** (PyTorch Float Tensor) - Hidden state matrix for all nodes.\n        \"\"\"", "\n", "\n", "number_of_nodes", "=", "E", ".", "shape", "[", "0", "]", "\n", "supports", "=", "F", ".", "softmax", "(", "F", ".", "relu", "(", "torch", ".", "mm", "(", "E", ",", "E", ".", "transpose", "(", "0", ",", "1", ")", ")", ")", ",", "dim", "=", "1", ")", "\n", "support_set", "=", "[", "torch", ".", "eye", "(", "number_of_nodes", ")", ".", "to", "(", "supports", ".", "device", ")", ",", "supports", "]", "\n", "for", "_", "in", "range", "(", "2", ",", "self", ".", "K", ")", ":", "\n", "            ", "support", "=", "torch", ".", "matmul", "(", "2", "*", "supports", ",", "support_set", "[", "-", "1", "]", ")", "-", "support_set", "[", "-", "2", "]", "\n", "support_set", ".", "append", "(", "support", ")", "\n", "", "supports", "=", "torch", ".", "stack", "(", "support_set", ",", "dim", "=", "0", ")", "\n", "W", "=", "torch", ".", "einsum", "(", "\"nd,dkio->nkio\"", ",", "E", ",", "self", ".", "weights_pool", ")", "\n", "bias", "=", "torch", ".", "matmul", "(", "E", ",", "self", ".", "bias_pool", ")", "\n", "X_G", "=", "torch", ".", "einsum", "(", "\"knm,bmc->bknc\"", ",", "supports", ",", "X", ")", "\n", "X_G", "=", "X_G", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "X_G", "=", "torch", ".", "einsum", "(", "\"bnki,nkio->bno\"", ",", "X_G", ",", "W", ")", "+", "bias", "\n", "return", "X_G", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.agcrn.AGCRN.__init__": [[68, 84], ["torch.Module.__init__", "agcrn.AGCRN._setup_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.agcrn.AGCRN._setup_layers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "number_of_nodes", ":", "int", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "K", ":", "int", ",", "\n", "embedding_dimensions", ":", "int", ",", "\n", ")", ":", "\n", "        ", "super", "(", "AGCRN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "number_of_nodes", "=", "number_of_nodes", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "embedding_dimensions", "=", "embedding_dimensions", "\n", "self", ".", "_setup_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.agcrn.AGCRN._setup_layers": [[85, 98], ["agcrn.AVWGCN", "agcrn.AVWGCN"], "methods", ["None"], ["", "def", "_setup_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "_gate", "=", "AVWGCN", "(", "\n", "in_channels", "=", "self", ".", "in_channels", "+", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "2", "*", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "embedding_dimensions", "=", "self", ".", "embedding_dimensions", ",", "\n", ")", "\n", "\n", "self", ".", "_update", "=", "AVWGCN", "(", "\n", "in_channels", "=", "self", ".", "in_channels", "+", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "embedding_dimensions", "=", "self", ".", "embedding_dimensions", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.agcrn.AGCRN._set_hidden_state": [[100, 104], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "_set_hidden_state", "(", "self", ",", "X", ",", "H", ")", ":", "\n", "        ", "if", "H", "is", "None", ":", "\n", "            ", "H", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "out_channels", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.agcrn.AGCRN.forward": [[105, 124], ["agcrn.AGCRN._set_hidden_state", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "agcrn.AGCRN._gate", "agcrn.AGCRN._update"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_hidden_state"], ["", "def", "forward", "(", "\n", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "E", ":", "torch", ".", "FloatTensor", ",", "H", ":", "torch", ".", "FloatTensor", "=", "None", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "r\"\"\"Making a forward pass.\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Node feature matrix.\n            * **E** (PyTorch Float Tensor) - Node embedding matrix.\n            * **H** (PyTorch Float Tensor) - Node hidden state matrix. Default is None.\n        Return types:\n            * **H** (PyTorch Float Tensor) - Hidden state matrix for all nodes.\n        \"\"\"", "\n", "H", "=", "self", ".", "_set_hidden_state", "(", "X", ",", "H", ")", "\n", "X_H", "=", "torch", ".", "cat", "(", "(", "X", ",", "H", ")", ",", "dim", "=", "-", "1", ")", "\n", "Z_R", "=", "torch", ".", "sigmoid", "(", "self", ".", "_gate", "(", "X_H", ",", "E", ")", ")", "\n", "Z", ",", "R", "=", "torch", ".", "split", "(", "Z_R", ",", "self", ".", "out_channels", ",", "dim", "=", "-", "1", ")", "\n", "C", "=", "torch", ".", "cat", "(", "(", "X", ",", "Z", "*", "H", ")", ",", "dim", "=", "-", "1", ")", "\n", "HC", "=", "torch", ".", "tanh", "(", "self", ".", "_update", "(", "C", ",", "E", ")", ")", "\n", "H", "=", "R", "*", "H", "+", "(", "1", "-", "R", ")", "*", "HC", "\n", "return", "H", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcno.GCNConv_Fixed_W.__init__": [[57, 76], ["kwargs.setdefault", "torch_geometric.nn.conv.MessagePassing.__init__", "evolvegcno.GCNConv_Fixed_W.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcnh.EvolveGCNH.reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "\n", "improved", ":", "bool", "=", "False", ",", "cached", ":", "bool", "=", "False", ",", "\n", "add_self_loops", ":", "bool", "=", "True", ",", "normalize", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "        ", "kwargs", ".", "setdefault", "(", "'aggr'", ",", "'add'", ")", "\n", "super", "(", "GCNConv_Fixed_W", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "improved", "=", "improved", "\n", "self", ".", "cached", "=", "cached", "\n", "self", ".", "add_self_loops", "=", "add_self_loops", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n", "self", ".", "_cached_edge_index", "=", "None", "\n", "self", ".", "_cached_adj_t", "=", "None", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcno.GCNConv_Fixed_W.reset_parameters": [[77, 80], ["None"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "_cached_edge_index", "=", "None", "\n", "self", ".", "_cached_adj_t", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcno.GCNConv_Fixed_W.forward": [[81, 99], ["torch.matmul", "evolvegcno.GCNConv_Fixed_W.propagate", "torch_geometric.nn.conv.gcn_conv.gcn_norm", "torch.matmul.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "W", ":", "torch", ".", "FloatTensor", ",", "x", ":", "Tensor", ",", "edge_index", ":", "Adj", ",", "\n", "edge_weight", ":", "OptTensor", "=", "None", ")", "->", "Tensor", ":", "\n", "        ", "\"\"\"\"\"\"", "\n", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "cache", "=", "self", ".", "_cached_edge_index", "\n", "if", "cache", "is", "None", ":", "\n", "                ", "edge_index", ",", "edge_weight", "=", "gcn_norm", "(", "# yapf: disable", "\n", "edge_index", ",", "edge_weight", ",", "x", ".", "size", "(", "self", ".", "node_dim", ")", ",", "\n", "self", ".", "improved", ",", "self", ".", "add_self_loops", ")", "\n", "\n", "", "", "x", "=", "torch", ".", "matmul", "(", "x", ",", "W", ")", "\n", "\n", "# propagate_type: (x: Tensor, edge_weight: OptTensor)", "\n", "out", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "x", ",", "edge_weight", "=", "edge_weight", ",", "\n", "size", "=", "None", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcno.GCNConv_Fixed_W.message": [[100, 102], ["edge_weight.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ":", "Tensor", ",", "edge_weight", ":", "OptTensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "x_j", "if", "edge_weight", "is", "None", "else", "edge_weight", ".", "view", "(", "-", "1", ",", "1", ")", "*", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcno.EvolveGCNO.__init__": [[126, 145], ["super().__init__", "torch.nn.Parameter", "evolvegcno.EvolveGCNO._create_layers", "evolvegcno.EvolveGCNO.reset_parameters", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._create_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcnh.EvolveGCNH.reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "improved", ":", "bool", "=", "False", ",", "\n", "cached", ":", "bool", "=", "False", ",", "\n", "normalize", ":", "bool", "=", "True", ",", "\n", "add_self_loops", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "EvolveGCNO", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "improved", "=", "improved", "\n", "self", ".", "cached", "=", "cached", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "add_self_loops", "=", "add_self_loops", "\n", "self", ".", "weight", "=", "None", "\n", "self", ".", "initial_weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "in_channels", ")", ")", "\n", "self", ".", "_create_layers", "(", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcno.EvolveGCNO.reset_parameters": [[146, 148], ["torch_geometric.nn.inits.glorot"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "glorot", "(", "self", ".", "initial_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcno.EvolveGCNO._create_layers": [[149, 165], ["torch.nn.GRU", "evolvegcno.EvolveGCNO.recurrent_layer.parameters", "evolvegcno.GCNConv_Fixed_W", "param.retain_grad"], "methods", ["None"], ["", "def", "_create_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "recurrent_layer", "=", "GRU", "(", "\n", "input_size", "=", "self", ".", "in_channels", ",", "hidden_size", "=", "self", ".", "in_channels", ",", "num_layers", "=", "1", "\n", ")", "\n", "for", "param", "in", "self", ".", "recurrent_layer", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "True", "\n", "param", ".", "retain_grad", "(", ")", "\n", "\n", "", "self", ".", "conv_layer", "=", "GCNConv_Fixed_W", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "improved", "=", "self", ".", "improved", ",", "\n", "cached", "=", "self", ".", "cached", ",", "\n", "normalize", "=", "self", ".", "normalize", ",", "\n", "add_self_loops", "=", "self", ".", "add_self_loops", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcno.EvolveGCNO.forward": [[167, 190], ["evolvegcno.EvolveGCNO.recurrent_layer", "evolvegcno.EvolveGCNO.conv_layer", "W.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass.\n        Arg types:\n            * **X** *(PyTorch Float Tensor)* - Node embedding.\n            * **edge_index** *(PyTorch Long Tensor)* - Graph edge indices.\n            * **edge_weight** *(PyTorch Float Tensor, optional)* - Edge weight vector.\n        Return types:\n            * **X** *(PyTorch Float Tensor)* - Output matrix for all nodes.\n        \"\"\"", "\n", "\n", "if", "self", ".", "weight", "is", "None", ":", "\n", "            ", "self", ".", "weight", "=", "self", ".", "initial_weight", ".", "data", "\n", "", "W", "=", "self", ".", "weight", "[", "None", ",", ":", ",", ":", "]", "\n", "_", ",", "W", "=", "self", ".", "recurrent_layer", "(", "W", ",", "W", ")", "\n", "X", "=", "self", ".", "conv_layer", "(", "W", ".", "squeeze", "(", "dim", "=", "0", ")", ",", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN.__init__": [[18, 35], ["super().__init__", "temporalgcn.TGCN._create_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_parameters_and_layers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "improved", ":", "bool", "=", "False", ",", "\n", "cached", ":", "bool", "=", "False", ",", "\n", "add_self_loops", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "TGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "improved", "=", "improved", "\n", "self", ".", "cached", "=", "cached", "\n", "self", ".", "add_self_loops", "=", "add_self_loops", "\n", "\n", "self", ".", "_create_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN._create_update_gate_parameters_and_layers": [[36, 47], ["torch_geometric.nn.GCNConv", "torch.nn.Linear"], "methods", ["None"], ["", "def", "_create_update_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_z", "=", "GCNConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "improved", "=", "self", ".", "improved", ",", "\n", "cached", "=", "self", ".", "cached", ",", "\n", "add_self_loops", "=", "self", ".", "add_self_loops", ",", "\n", ")", "\n", "\n", "self", ".", "linear_z", "=", "torch", ".", "nn", ".", "Linear", "(", "2", "*", "self", ".", "out_channels", ",", "self", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN._create_reset_gate_parameters_and_layers": [[48, 59], ["torch_geometric.nn.GCNConv", "torch.nn.Linear"], "methods", ["None"], ["", "def", "_create_reset_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_r", "=", "GCNConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "improved", "=", "self", ".", "improved", ",", "\n", "cached", "=", "self", ".", "cached", ",", "\n", "add_self_loops", "=", "self", ".", "add_self_loops", ",", "\n", ")", "\n", "\n", "self", ".", "linear_r", "=", "torch", ".", "nn", ".", "Linear", "(", "2", "*", "self", ".", "out_channels", ",", "self", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN._create_candidate_state_parameters_and_layers": [[60, 71], ["torch_geometric.nn.GCNConv", "torch.nn.Linear"], "methods", ["None"], ["", "def", "_create_candidate_state_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_h", "=", "GCNConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "improved", "=", "self", ".", "improved", ",", "\n", "cached", "=", "self", ".", "cached", ",", "\n", "add_self_loops", "=", "self", ".", "add_self_loops", ",", "\n", ")", "\n", "\n", "self", ".", "linear_h", "=", "torch", ".", "nn", ".", "Linear", "(", "2", "*", "self", ".", "out_channels", ",", "self", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN._create_parameters_and_layers": [[72, 76], ["temporalgcn.TGCN._create_update_gate_parameters_and_layers", "temporalgcn.TGCN._create_reset_gate_parameters_and_layers", "temporalgcn.TGCN._create_candidate_state_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_update_gate_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_reset_gate_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_candidate_state_parameters_and_layers"], ["", "def", "_create_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "_create_update_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_reset_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_candidate_state_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN._set_hidden_state": [[77, 81], ["torch.zeros().to", "torch.zeros"], "methods", ["None"], ["", "def", "_set_hidden_state", "(", "self", ",", "X", ",", "H", ")", ":", "\n", "        ", "if", "H", "is", "None", ":", "\n", "            ", "H", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "out_channels", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN._calculate_update_gate": [[82, 87], ["torch.cat", "temporalgcn.TGCN.linear_z", "torch.sigmoid", "temporalgcn.TGCN.conv_z"], "methods", ["None"], ["", "def", "_calculate_update_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", ":", "\n", "        ", "Z", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_z", "(", "X", ",", "edge_index", ",", "edge_weight", ")", ",", "H", "]", ",", "axis", "=", "1", ")", "\n", "Z", "=", "self", ".", "linear_z", "(", "Z", ")", "\n", "Z", "=", "torch", ".", "sigmoid", "(", "Z", ")", "\n", "return", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN._calculate_reset_gate": [[88, 93], ["torch.cat", "temporalgcn.TGCN.linear_r", "torch.sigmoid", "temporalgcn.TGCN.conv_r"], "methods", ["None"], ["", "def", "_calculate_reset_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", ":", "\n", "        ", "R", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_r", "(", "X", ",", "edge_index", ",", "edge_weight", ")", ",", "H", "]", ",", "axis", "=", "1", ")", "\n", "R", "=", "self", ".", "linear_r", "(", "R", ")", "\n", "R", "=", "torch", ".", "sigmoid", "(", "R", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN._calculate_candidate_state": [[94, 99], ["torch.cat", "temporalgcn.TGCN.linear_h", "torch.tanh", "temporalgcn.TGCN.conv_h"], "methods", ["None"], ["", "def", "_calculate_candidate_state", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "R", ")", ":", "\n", "        ", "H_tilde", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_h", "(", "X", ",", "edge_index", ",", "edge_weight", ")", ",", "H", "*", "R", "]", ",", "axis", "=", "1", ")", "\n", "H_tilde", "=", "self", ".", "linear_h", "(", "H_tilde", ")", "\n", "H_tilde", "=", "torch", ".", "tanh", "(", "H_tilde", ")", "\n", "return", "H_tilde", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN._calculate_hidden_state": [[100, 103], ["None"], "methods", ["None"], ["", "def", "_calculate_hidden_state", "(", "self", ",", "Z", ",", "H", ",", "H_tilde", ")", ":", "\n", "        ", "H", "=", "Z", "*", "H", "+", "(", "1", "-", "Z", ")", "*", "H_tilde", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN.forward": [[104, 131], ["temporalgcn.TGCN._set_hidden_state", "temporalgcn.TGCN._calculate_update_gate", "temporalgcn.TGCN._calculate_reset_gate", "temporalgcn.TGCN._calculate_candidate_state", "temporalgcn.TGCN._calculate_hidden_state"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_hidden_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_update_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_reset_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_candidate_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_hidden_state"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "H", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph. If the hidden state matrix is not present\n        when the forward pass is called it is initialized with zeros.\n\n        Arg types:\n            * **X** *(PyTorch Float Tensor)* - Node features.\n            * **edge_index** *(PyTorch Long Tensor)* - Graph edge indices.\n            * **edge_weight** *(PyTorch Long Tensor, optional)* - Edge weight vector.\n            * **H** *(PyTorch Float Tensor, optional)* - Hidden state matrix for all nodes.\n\n        Return types:\n            * **H** *(PyTorch Float Tensor)* - Hidden state matrix for all nodes.\n        \"\"\"", "\n", "H", "=", "self", ".", "_set_hidden_state", "(", "X", ",", "H", ")", "\n", "Z", "=", "self", ".", "_calculate_update_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "R", "=", "self", ".", "_calculate_reset_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "H_tilde", "=", "self", ".", "_calculate_candidate_state", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "R", ")", "\n", "H", "=", "self", ".", "_calculate_hidden_state", "(", "Z", ",", "H", ",", "H_tilde", ")", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN2.__init__": [[147, 158], ["super().__init__", "temporalgcn.TGCN2._create_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_parameters_and_layers"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "batch_size", ":", "int", ",", "improved", ":", "bool", "=", "False", ",", "cached", ":", "bool", "=", "False", ",", "\n", "add_self_loops", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", "TGCN2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "improved", "=", "improved", "\n", "self", ".", "cached", "=", "cached", "\n", "self", ".", "add_self_loops", "=", "add_self_loops", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "_create_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN2._create_update_gate_parameters_and_layers": [[159, 163], ["torch_geometric.nn.GCNConv", "torch.nn.Linear"], "methods", ["None"], ["", "def", "_create_update_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_z", "=", "GCNConv", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "out_channels", ",", "improved", "=", "self", ".", "improved", ",", "\n", "cached", "=", "self", ".", "cached", ",", "add_self_loops", "=", "self", ".", "add_self_loops", ")", "\n", "self", ".", "linear_z", "=", "torch", ".", "nn", ".", "Linear", "(", "2", "*", "self", ".", "out_channels", ",", "self", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN2._create_reset_gate_parameters_and_layers": [[164, 168], ["torch_geometric.nn.GCNConv", "torch.nn.Linear"], "methods", ["None"], ["", "def", "_create_reset_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_r", "=", "GCNConv", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "out_channels", ",", "improved", "=", "self", ".", "improved", ",", "\n", "cached", "=", "self", ".", "cached", ",", "add_self_loops", "=", "self", ".", "add_self_loops", ")", "\n", "self", ".", "linear_r", "=", "torch", ".", "nn", ".", "Linear", "(", "2", "*", "self", ".", "out_channels", ",", "self", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN2._create_candidate_state_parameters_and_layers": [[169, 173], ["torch_geometric.nn.GCNConv", "torch.nn.Linear"], "methods", ["None"], ["", "def", "_create_candidate_state_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_h", "=", "GCNConv", "(", "in_channels", "=", "self", ".", "in_channels", ",", "out_channels", "=", "self", ".", "out_channels", ",", "improved", "=", "self", ".", "improved", ",", "\n", "cached", "=", "self", ".", "cached", ",", "add_self_loops", "=", "self", ".", "add_self_loops", ")", "\n", "self", ".", "linear_h", "=", "torch", ".", "nn", ".", "Linear", "(", "2", "*", "self", ".", "out_channels", ",", "self", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN2._create_parameters_and_layers": [[174, 178], ["temporalgcn.TGCN2._create_update_gate_parameters_and_layers", "temporalgcn.TGCN2._create_reset_gate_parameters_and_layers", "temporalgcn.TGCN2._create_candidate_state_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_update_gate_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_reset_gate_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_candidate_state_parameters_and_layers"], ["", "def", "_create_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "_create_update_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_reset_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_candidate_state_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN2._set_hidden_state": [[179, 183], ["torch.zeros().to", "torch.zeros"], "methods", ["None"], ["", "def", "_set_hidden_state", "(", "self", ",", "X", ",", "H", ")", ":", "\n", "        ", "if", "H", "is", "None", ":", "\n", "            ", "H", "=", "torch", ".", "zeros", "(", "self", ".", "batch_size", ",", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "out_channels", ")", ".", "to", "(", "X", ".", "device", ")", "#(b, 207, 32)", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN2._calculate_update_gate": [[184, 190], ["torch.cat", "temporalgcn.TGCN2.linear_z", "torch.sigmoid", "temporalgcn.TGCN2.conv_z"], "methods", ["None"], ["", "def", "_calculate_update_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", ":", "\n", "        ", "Z", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_z", "(", "X", ",", "edge_index", ",", "edge_weight", ")", ",", "H", "]", ",", "axis", "=", "2", ")", "# (b, 207, 64)", "\n", "Z", "=", "self", ".", "linear_z", "(", "Z", ")", "# (b, 207, 32)", "\n", "Z", "=", "torch", ".", "sigmoid", "(", "Z", ")", "\n", "\n", "return", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN2._calculate_reset_gate": [[191, 197], ["torch.cat", "temporalgcn.TGCN2.linear_r", "torch.sigmoid", "temporalgcn.TGCN2.conv_r"], "methods", ["None"], ["", "def", "_calculate_reset_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", ":", "\n", "        ", "R", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_r", "(", "X", ",", "edge_index", ",", "edge_weight", ")", ",", "H", "]", ",", "axis", "=", "2", ")", "# (b, 207, 64)", "\n", "R", "=", "self", ".", "linear_r", "(", "R", ")", "# (b, 207, 32)", "\n", "R", "=", "torch", ".", "sigmoid", "(", "R", ")", "\n", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN2._calculate_candidate_state": [[198, 204], ["torch.cat", "temporalgcn.TGCN2.linear_h", "torch.tanh", "temporalgcn.TGCN2.conv_h"], "methods", ["None"], ["", "def", "_calculate_candidate_state", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "R", ")", ":", "\n", "        ", "H_tilde", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_h", "(", "X", ",", "edge_index", ",", "edge_weight", ")", ",", "H", "*", "R", "]", ",", "axis", "=", "2", ")", "# (b, 207, 64)", "\n", "H_tilde", "=", "self", ".", "linear_h", "(", "H_tilde", ")", "# (b, 207, 32)", "\n", "H_tilde", "=", "torch", ".", "tanh", "(", "H_tilde", ")", "\n", "\n", "return", "H_tilde", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN2._calculate_hidden_state": [[205, 208], ["None"], "methods", ["None"], ["", "def", "_calculate_hidden_state", "(", "self", ",", "Z", ",", "H", ",", "H_tilde", ")", ":", "\n", "        ", "H", "=", "Z", "*", "H", "+", "(", "1", "-", "Z", ")", "*", "H_tilde", "# # (b, 207, 32)", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.temporalgcn.TGCN2.forward": [[209, 231], ["temporalgcn.TGCN2._set_hidden_state", "temporalgcn.TGCN2._calculate_update_gate", "temporalgcn.TGCN2._calculate_reset_gate", "temporalgcn.TGCN2._calculate_candidate_state", "temporalgcn.TGCN2._calculate_hidden_state"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_hidden_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_update_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_reset_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_candidate_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_hidden_state"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "edge_index", ":", "torch", ".", "LongTensor", ",", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "H", ":", "torch", ".", "FloatTensor", "=", "None", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph. If the hidden state matrix is not present\n        when the forward pass is called it is initialized with zeros.\n\n        Arg types:\n            * **X** *(PyTorch Float Tensor)* - Node features.\n            * **edge_index** *(PyTorch Long Tensor)* - Graph edge indices.\n            * **edge_weight** *(PyTorch Long Tensor, optional)* - Edge weight vector.\n            * **H** *(PyTorch Float Tensor, optional)* - Hidden state matrix for all nodes.\n\n        Return types:\n            * **H** *(PyTorch Float Tensor)* - Hidden state matrix for all nodes.\n        \"\"\"", "\n", "H", "=", "self", ".", "_set_hidden_state", "(", "X", ",", "H", ")", "\n", "Z", "=", "self", ".", "_calculate_update_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "R", "=", "self", ".", "_calculate_reset_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "H_tilde", "=", "self", ".", "_calculate_candidate_state", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "R", ")", "\n", "H", "=", "self", ".", "_calculate_hidden_state", "(", "Z", ",", "H", ",", "H_tilde", ")", "# (b, 207, 32)", "\n", "return", "H", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_lstm.GConvLSTM.__init__": [[40, 57], ["super().__init__", "gconv_lstm.GConvLSTM._create_parameters_and_layers", "gconv_lstm.GConvLSTM._set_parameters"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "K", ":", "int", ",", "\n", "normalization", ":", "str", "=", "\"sym\"", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GConvLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "normalization", "=", "normalization", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "_create_parameters_and_layers", "(", ")", "\n", "self", ".", "_set_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_lstm.GConvLSTM._create_input_gate_parameters_and_layers": [[58, 78], ["torch_geometric.nn.ChebConv", "torch_geometric.nn.ChebConv", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "_create_input_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_x_i", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "conv_h_i", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "w_c_i", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", "\n", "self", ".", "b_i", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_lstm.GConvLSTM._create_forget_gate_parameters_and_layers": [[79, 99], ["torch_geometric.nn.ChebConv", "torch_geometric.nn.ChebConv", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "_create_forget_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_x_f", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "conv_h_f", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "w_c_f", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", "\n", "self", ".", "b_f", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_lstm.GConvLSTM._create_cell_state_parameters_and_layers": [[100, 119], ["torch_geometric.nn.ChebConv", "torch_geometric.nn.ChebConv", "torch.nn.Parameter", "torch.Tensor"], "methods", ["None"], ["", "def", "_create_cell_state_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_x_c", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "conv_h_c", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "b_c", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_lstm.GConvLSTM._create_output_gate_parameters_and_layers": [[120, 140], ["torch_geometric.nn.ChebConv", "torch_geometric.nn.ChebConv", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "_create_output_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_x_o", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "conv_h_o", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "w_c_o", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", "\n", "self", ".", "b_o", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_lstm.GConvLSTM._create_parameters_and_layers": [[141, 146], ["gconv_lstm.GConvLSTM._create_input_gate_parameters_and_layers", "gconv_lstm.GConvLSTM._create_forget_gate_parameters_and_layers", "gconv_lstm.GConvLSTM._create_cell_state_parameters_and_layers", "gconv_lstm.GConvLSTM._create_output_gate_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_input_gate_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_forget_gate_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_cell_state_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_output_gate_parameters_and_layers"], ["", "def", "_create_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "_create_input_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_forget_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_cell_state_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_output_gate_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_lstm.GConvLSTM._set_parameters": [[147, 155], ["torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.zeros", "torch_geometric.nn.inits.zeros", "torch_geometric.nn.inits.zeros", "torch_geometric.nn.inits.zeros"], "methods", ["None"], ["", "def", "_set_parameters", "(", "self", ")", ":", "\n", "        ", "glorot", "(", "self", ".", "w_c_i", ")", "\n", "glorot", "(", "self", ".", "w_c_f", ")", "\n", "glorot", "(", "self", ".", "w_c_o", ")", "\n", "zeros", "(", "self", ".", "b_i", ")", "\n", "zeros", "(", "self", ".", "b_f", ")", "\n", "zeros", "(", "self", ".", "b_c", ")", "\n", "zeros", "(", "self", ".", "b_o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_lstm.GConvLSTM._set_hidden_state": [[156, 160], ["torch.zeros().to", "torch.zeros"], "methods", ["None"], ["", "def", "_set_hidden_state", "(", "self", ",", "X", ",", "H", ")", ":", "\n", "        ", "if", "H", "is", "None", ":", "\n", "            ", "H", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "out_channels", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_lstm.GConvLSTM._set_cell_state": [[161, 165], ["torch.zeros().to", "torch.zeros"], "methods", ["None"], ["", "def", "_set_cell_state", "(", "self", ",", "X", ",", "C", ")", ":", "\n", "        ", "if", "C", "is", "None", ":", "\n", "            ", "C", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "out_channels", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_lstm.GConvLSTM._calculate_input_gate": [[166, 173], ["gconv_lstm.GConvLSTM.conv_x_i", "torch.sigmoid", "gconv_lstm.GConvLSTM.conv_h_i"], "methods", ["None"], ["", "def", "_calculate_input_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "lambda_max", ")", ":", "\n", "        ", "I", "=", "self", ".", "conv_x_i", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "I", "=", "I", "+", "self", ".", "conv_h_i", "(", "H", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "I", "=", "I", "+", "(", "self", ".", "w_c_i", "*", "C", ")", "\n", "I", "=", "I", "+", "self", ".", "b_i", "\n", "I", "=", "torch", ".", "sigmoid", "(", "I", ")", "\n", "return", "I", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_lstm.GConvLSTM._calculate_forget_gate": [[174, 181], ["gconv_lstm.GConvLSTM.conv_x_f", "torch.sigmoid", "gconv_lstm.GConvLSTM.conv_h_f"], "methods", ["None"], ["", "def", "_calculate_forget_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "lambda_max", ")", ":", "\n", "        ", "F", "=", "self", ".", "conv_x_f", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "F", "=", "F", "+", "self", ".", "conv_h_f", "(", "H", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "F", "=", "F", "+", "(", "self", ".", "w_c_f", "*", "C", ")", "\n", "F", "=", "F", "+", "self", ".", "b_f", "\n", "F", "=", "torch", ".", "sigmoid", "(", "F", ")", "\n", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_lstm.GConvLSTM._calculate_cell_state": [[182, 189], ["gconv_lstm.GConvLSTM.conv_x_c", "torch.tanh", "gconv_lstm.GConvLSTM.conv_h_c"], "methods", ["None"], ["", "def", "_calculate_cell_state", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "I", ",", "F", ",", "lambda_max", ")", ":", "\n", "        ", "T", "=", "self", ".", "conv_x_c", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "T", "=", "T", "+", "self", ".", "conv_h_c", "(", "H", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "T", "=", "T", "+", "self", ".", "b_c", "\n", "T", "=", "torch", ".", "tanh", "(", "T", ")", "\n", "C", "=", "F", "*", "C", "+", "I", "*", "T", "\n", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_lstm.GConvLSTM._calculate_output_gate": [[190, 197], ["gconv_lstm.GConvLSTM.conv_x_o", "torch.sigmoid", "gconv_lstm.GConvLSTM.conv_h_o"], "methods", ["None"], ["", "def", "_calculate_output_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "lambda_max", ")", ":", "\n", "        ", "O", "=", "self", ".", "conv_x_o", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "O", "=", "O", "+", "self", ".", "conv_h_o", "(", "H", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "O", "=", "O", "+", "(", "self", ".", "w_c_o", "*", "C", ")", "\n", "O", "=", "O", "+", "self", ".", "b_o", "\n", "O", "=", "torch", ".", "sigmoid", "(", "O", ")", "\n", "return", "O", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_lstm.GConvLSTM._calculate_hidden_state": [[198, 201], ["torch.tanh"], "methods", ["None"], ["", "def", "_calculate_hidden_state", "(", "self", ",", "O", ",", "C", ")", ":", "\n", "        ", "H", "=", "O", "*", "torch", ".", "tanh", "(", "C", ")", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_lstm.GConvLSTM.forward": [[202, 237], ["gconv_lstm.GConvLSTM._set_hidden_state", "gconv_lstm.GConvLSTM._set_cell_state", "gconv_lstm.GConvLSTM._calculate_input_gate", "gconv_lstm.GConvLSTM._calculate_forget_gate", "gconv_lstm.GConvLSTM._calculate_cell_state", "gconv_lstm.GConvLSTM._calculate_output_gate", "gconv_lstm.GConvLSTM._calculate_hidden_state"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_hidden_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_cell_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_input_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_forget_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_cell_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_output_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_hidden_state"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "H", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "C", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "lambda_max", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph. If the hidden state and cell state\n        matrices are not present when the forward pass is called these are\n        initialized with zeros.\n\n        Arg types:\n            * **X** *(PyTorch Float Tensor)* - Node features.\n            * **edge_index** *(PyTorch Long Tensor)* - Graph edge indices.\n            * **edge_weight** *(PyTorch Long Tensor, optional)* - Edge weight vector.\n            * **H** *(PyTorch Float Tensor, optional)* - Hidden state matrix for all nodes.\n            * **C** *(PyTorch Float Tensor, optional)* - Cell state matrix for all nodes.\n            * **lambda_max** *(PyTorch Tensor, optional but mandatory if normalization is not sym)* - Largest eigenvalue of Laplacian.\n\n        Return types:\n            * **H** *(PyTorch Float Tensor)* - Hidden state matrix for all nodes.\n            * **C** *(PyTorch Float Tensor)* - Cell state matrix for all nodes.\n        \"\"\"", "\n", "H", "=", "self", ".", "_set_hidden_state", "(", "X", ",", "H", ")", "\n", "C", "=", "self", ".", "_set_cell_state", "(", "X", ",", "C", ")", "\n", "I", "=", "self", ".", "_calculate_input_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "lambda_max", ")", "\n", "F", "=", "self", ".", "_calculate_forget_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "lambda_max", ")", "\n", "C", "=", "self", ".", "_calculate_cell_state", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "I", ",", "F", ",", "lambda_max", ")", "\n", "O", "=", "self", ".", "_calculate_output_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "lambda_max", ")", "\n", "H", "=", "self", ".", "_calculate_hidden_state", "(", "O", ",", "C", ")", "\n", "return", "H", ",", "C", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dygrae.DyGrEncoder.__init__": [[20, 36], ["super().__init__", "dygrae.DyGrEncoder._create_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._create_layers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "conv_out_channels", ":", "int", ",", "\n", "conv_num_layers", ":", "int", ",", "\n", "conv_aggr", ":", "str", ",", "\n", "lstm_out_channels", ":", "int", ",", "\n", "lstm_num_layers", ":", "int", ",", "\n", ")", ":", "\n", "        ", "super", "(", "DyGrEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "conv_aggr", "in", "[", "\"mean\"", ",", "\"add\"", ",", "\"max\"", "]", ",", "\"Wrong aggregator.\"", "\n", "self", ".", "conv_out_channels", "=", "conv_out_channels", "\n", "self", ".", "conv_num_layers", "=", "conv_num_layers", "\n", "self", ".", "conv_aggr", "=", "conv_aggr", "\n", "self", ".", "lstm_out_channels", "=", "lstm_out_channels", "\n", "self", ".", "lstm_num_layers", "=", "lstm_num_layers", "\n", "self", ".", "_create_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dygrae.DyGrEncoder._create_layers": [[37, 49], ["torch_geometric.nn.GatedGraphConv", "torch.nn.LSTM"], "methods", ["None"], ["", "def", "_create_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_layer", "=", "GatedGraphConv", "(", "\n", "out_channels", "=", "self", ".", "conv_out_channels", ",", "\n", "num_layers", "=", "self", ".", "conv_num_layers", ",", "\n", "aggr", "=", "self", ".", "conv_aggr", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "recurrent_layer", "=", "LSTM", "(", "\n", "input_size", "=", "self", ".", "conv_out_channels", ",", "\n", "hidden_size", "=", "self", ".", "lstm_out_channels", ",", "\n", "num_layers", "=", "self", ".", "lstm_num_layers", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dygrae.DyGrEncoder.forward": [[51, 89], ["dygrae.DyGrEncoder.conv_layer", "H_tilde.squeeze.squeeze.squeeze", "H.squeeze.squeeze.squeeze", "C.squeeze.squeeze.squeeze", "dygrae.DyGrEncoder.recurrent_layer", "dygrae.DyGrEncoder.recurrent_layer", "ValueError"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "H", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "C", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass. If the hidden state and cell state matrices are\n        not present when the forward pass is called these are initialized with zeros.\n\n        Arg types:\n            * **X** *(PyTorch Float Tensor)* - Node features.\n            * **edge_index** *(PyTorch Long Tensor)* - Graph edge indices.\n            * **edge_weight** *(PyTorch Float Tensor, optional)* - Edge weight vector.\n            * **H** *(PyTorch Float Tensor, optional)* - Hidden state matrix for all nodes.\n            * **C** *(PyTorch Float Tensor, optional)* - Cell state matrix for all nodes.\n\n        Return types:\n            * **H_tilde** *(PyTorch Float Tensor)* - Output matrix for all nodes.\n            * **H** *(PyTorch Float Tensor)* - Hidden state matrix for all nodes.\n            * **C** *(PyTorch Float Tensor)* - Cell state matrix for all nodes.\n        \"\"\"", "\n", "H_tilde", "=", "self", ".", "conv_layer", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "H_tilde", "=", "H_tilde", "[", "None", ",", ":", ",", ":", "]", "\n", "if", "H", "is", "None", "and", "C", "is", "None", ":", "\n", "            ", "H_tilde", ",", "(", "H", ",", "C", ")", "=", "self", ".", "recurrent_layer", "(", "H_tilde", ")", "\n", "", "elif", "H", "is", "not", "None", "and", "C", "is", "not", "None", ":", "\n", "            ", "H", "=", "H", "[", "None", ",", ":", ",", ":", "]", "\n", "C", "=", "C", "[", "None", ",", ":", ",", ":", "]", "\n", "H_tilde", ",", "(", "H", ",", "C", ")", "=", "self", ".", "recurrent_layer", "(", "H_tilde", ",", "(", "H", ",", "C", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid hidden state and cell matrices.\"", ")", "\n", "", "H_tilde", "=", "H_tilde", ".", "squeeze", "(", ")", "\n", "H", "=", "H", ".", "squeeze", "(", ")", "\n", "C", "=", "C", ".", "squeeze", "(", ")", "\n", "return", "H_tilde", ",", "H", ",", "C", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gc_lstm.GCLSTM.__init__": [[40, 57], ["super().__init__", "gc_lstm.GCLSTM._create_parameters_and_layers", "gc_lstm.GCLSTM._set_parameters"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "K", ":", "int", ",", "\n", "normalization", ":", "str", "=", "\"sym\"", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GCLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "normalization", "=", "normalization", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "_create_parameters_and_layers", "(", ")", "\n", "self", ".", "_set_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gc_lstm.GCLSTM._create_input_gate_parameters_and_layers": [[58, 70], ["torch_geometric.nn.ChebConv", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "_create_input_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_i", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "W_i", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "in_channels", ",", "self", ".", "out_channels", ")", ")", "\n", "self", ".", "b_i", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gc_lstm.GCLSTM._create_forget_gate_parameters_and_layers": [[71, 83], ["torch_geometric.nn.ChebConv", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "_create_forget_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_f", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "W_f", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "in_channels", ",", "self", ".", "out_channels", ")", ")", "\n", "self", ".", "b_f", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gc_lstm.GCLSTM._create_cell_state_parameters_and_layers": [[84, 96], ["torch_geometric.nn.ChebConv", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "_create_cell_state_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_c", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "W_c", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "in_channels", ",", "self", ".", "out_channels", ")", ")", "\n", "self", ".", "b_c", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gc_lstm.GCLSTM._create_output_gate_parameters_and_layers": [[97, 109], ["torch_geometric.nn.ChebConv", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "_create_output_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_o", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "W_o", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "self", ".", "in_channels", ",", "self", ".", "out_channels", ")", ")", "\n", "self", ".", "b_o", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gc_lstm.GCLSTM._create_parameters_and_layers": [[110, 115], ["gc_lstm.GCLSTM._create_input_gate_parameters_and_layers", "gc_lstm.GCLSTM._create_forget_gate_parameters_and_layers", "gc_lstm.GCLSTM._create_cell_state_parameters_and_layers", "gc_lstm.GCLSTM._create_output_gate_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_input_gate_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_forget_gate_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_cell_state_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_output_gate_parameters_and_layers"], ["", "def", "_create_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "_create_input_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_forget_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_cell_state_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_output_gate_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gc_lstm.GCLSTM._set_parameters": [[116, 125], ["torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.zeros", "torch_geometric.nn.inits.zeros", "torch_geometric.nn.inits.zeros", "torch_geometric.nn.inits.zeros"], "methods", ["None"], ["", "def", "_set_parameters", "(", "self", ")", ":", "\n", "        ", "glorot", "(", "self", ".", "W_i", ")", "\n", "glorot", "(", "self", ".", "W_f", ")", "\n", "glorot", "(", "self", ".", "W_c", ")", "\n", "glorot", "(", "self", ".", "W_o", ")", "\n", "zeros", "(", "self", ".", "b_i", ")", "\n", "zeros", "(", "self", ".", "b_f", ")", "\n", "zeros", "(", "self", ".", "b_c", ")", "\n", "zeros", "(", "self", ".", "b_o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gc_lstm.GCLSTM._set_hidden_state": [[126, 130], ["torch.zeros().to", "torch.zeros"], "methods", ["None"], ["", "def", "_set_hidden_state", "(", "self", ",", "X", ",", "H", ")", ":", "\n", "        ", "if", "H", "is", "None", ":", "\n", "            ", "H", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "out_channels", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gc_lstm.GCLSTM._set_cell_state": [[131, 135], ["torch.zeros().to", "torch.zeros"], "methods", ["None"], ["", "def", "_set_cell_state", "(", "self", ",", "X", ",", "C", ")", ":", "\n", "        ", "if", "C", "is", "None", ":", "\n", "            ", "C", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "out_channels", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gc_lstm.GCLSTM._calculate_input_gate": [[136, 142], ["torch.matmul", "torch.sigmoid", "gc_lstm.GCLSTM.conv_i"], "methods", ["None"], ["", "def", "_calculate_input_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "lambda_max", ")", ":", "\n", "        ", "I", "=", "torch", ".", "matmul", "(", "X", ",", "self", ".", "W_i", ")", "\n", "I", "=", "I", "+", "self", ".", "conv_i", "(", "H", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "I", "=", "I", "+", "self", ".", "b_i", "\n", "I", "=", "torch", ".", "sigmoid", "(", "I", ")", "\n", "return", "I", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gc_lstm.GCLSTM._calculate_forget_gate": [[143, 149], ["torch.matmul", "torch.sigmoid", "gc_lstm.GCLSTM.conv_f"], "methods", ["None"], ["", "def", "_calculate_forget_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "lambda_max", ")", ":", "\n", "        ", "F", "=", "torch", ".", "matmul", "(", "X", ",", "self", ".", "W_f", ")", "\n", "F", "=", "F", "+", "self", ".", "conv_f", "(", "H", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "F", "=", "F", "+", "self", ".", "b_f", "\n", "F", "=", "torch", ".", "sigmoid", "(", "F", ")", "\n", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gc_lstm.GCLSTM._calculate_cell_state": [[150, 157], ["torch.matmul", "torch.tanh", "gc_lstm.GCLSTM.conv_c"], "methods", ["None"], ["", "def", "_calculate_cell_state", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "I", ",", "F", ",", "lambda_max", ")", ":", "\n", "        ", "T", "=", "torch", ".", "matmul", "(", "X", ",", "self", ".", "W_c", ")", "\n", "T", "=", "T", "+", "self", ".", "conv_c", "(", "H", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "T", "=", "T", "+", "self", ".", "b_c", "\n", "T", "=", "torch", ".", "tanh", "(", "T", ")", "\n", "C", "=", "F", "*", "C", "+", "I", "*", "T", "\n", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gc_lstm.GCLSTM._calculate_output_gate": [[158, 164], ["torch.matmul", "torch.sigmoid", "gc_lstm.GCLSTM.conv_o"], "methods", ["None"], ["", "def", "_calculate_output_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "lambda_max", ")", ":", "\n", "        ", "O", "=", "torch", ".", "matmul", "(", "X", ",", "self", ".", "W_o", ")", "\n", "O", "=", "O", "+", "self", ".", "conv_o", "(", "H", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "O", "=", "O", "+", "self", ".", "b_o", "\n", "O", "=", "torch", ".", "sigmoid", "(", "O", ")", "\n", "return", "O", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gc_lstm.GCLSTM._calculate_hidden_state": [[165, 168], ["torch.tanh"], "methods", ["None"], ["", "def", "_calculate_hidden_state", "(", "self", ",", "O", ",", "C", ")", ":", "\n", "        ", "H", "=", "O", "*", "torch", ".", "tanh", "(", "C", ")", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gc_lstm.GCLSTM.forward": [[169, 204], ["gc_lstm.GCLSTM._set_hidden_state", "gc_lstm.GCLSTM._set_cell_state", "gc_lstm.GCLSTM._calculate_input_gate", "gc_lstm.GCLSTM._calculate_forget_gate", "gc_lstm.GCLSTM._calculate_cell_state", "gc_lstm.GCLSTM._calculate_output_gate", "gc_lstm.GCLSTM._calculate_hidden_state"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_hidden_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_cell_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_input_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_forget_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_cell_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_output_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_hidden_state"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "H", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "C", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "lambda_max", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph. If the hidden state and cell state\n        matrices are not present when the forward pass is called these are\n        initialized with zeros.\n\n        Arg types:\n            * **X** *(PyTorch Float Tensor)* - Node features.\n            * **edge_index** *(PyTorch Long Tensor)* - Graph edge indices.\n            * **edge_weight** *(PyTorch Long Tensor, optional)* - Edge weight vector.\n            * **H** *(PyTorch Float Tensor, optional)* - Hidden state matrix for all nodes.\n            * **C** *(PyTorch Float Tensor, optional)* - Cell state matrix for all nodes.\n            * **lambda_max** *(PyTorch Tensor, optional but mandatory if normalization is not sym)* - Largest eigenvalue of Laplacian.\n\n        Return types:\n            * **H** *(PyTorch Float Tensor)* - Hidden state matrix for all nodes.\n            * **C** *(PyTorch Float Tensor)* - Cell state matrix for all nodes.\n        \"\"\"", "\n", "H", "=", "self", ".", "_set_hidden_state", "(", "X", ",", "H", ")", "\n", "C", "=", "self", ".", "_set_cell_state", "(", "X", ",", "C", ")", "\n", "I", "=", "self", ".", "_calculate_input_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "lambda_max", ")", "\n", "F", "=", "self", ".", "_calculate_forget_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "lambda_max", ")", "\n", "C", "=", "self", ".", "_calculate_cell_state", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "I", ",", "F", ",", "lambda_max", ")", "\n", "O", "=", "self", ".", "_calculate_output_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "C", ",", "lambda_max", ")", "\n", "H", "=", "self", ".", "_calculate_hidden_state", "(", "O", ",", "C", ")", "\n", "return", "H", ",", "C", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_gru.GConvGRU.__init__": [[38, 54], ["super().__init__", "gconv_gru.GConvGRU._create_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_parameters_and_layers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "K", ":", "int", ",", "\n", "normalization", ":", "str", "=", "\"sym\"", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GConvGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "normalization", "=", "normalization", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "_create_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_gru.GConvGRU._create_update_gate_parameters_and_layers": [[55, 71], ["torch_geometric.nn.ChebConv", "torch_geometric.nn.ChebConv"], "methods", ["None"], ["", "def", "_create_update_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_x_z", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "conv_h_z", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_gru.GConvGRU._create_reset_gate_parameters_and_layers": [[73, 89], ["torch_geometric.nn.ChebConv", "torch_geometric.nn.ChebConv"], "methods", ["None"], ["", "def", "_create_reset_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_x_r", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "conv_h_r", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_gru.GConvGRU._create_candidate_state_parameters_and_layers": [[91, 107], ["torch_geometric.nn.ChebConv", "torch_geometric.nn.ChebConv"], "methods", ["None"], ["", "def", "_create_candidate_state_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_x_h", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "conv_h_h", "=", "ChebConv", "(", "\n", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_gru.GConvGRU._create_parameters_and_layers": [[109, 113], ["gconv_gru.GConvGRU._create_update_gate_parameters_and_layers", "gconv_gru.GConvGRU._create_reset_gate_parameters_and_layers", "gconv_gru.GConvGRU._create_candidate_state_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_update_gate_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_reset_gate_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_candidate_state_parameters_and_layers"], ["", "def", "_create_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "_create_update_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_reset_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_candidate_state_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_gru.GConvGRU._set_hidden_state": [[114, 118], ["torch.zeros().to", "torch.zeros"], "methods", ["None"], ["", "def", "_set_hidden_state", "(", "self", ",", "X", ",", "H", ")", ":", "\n", "        ", "if", "H", "is", "None", ":", "\n", "            ", "H", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "out_channels", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_gru.GConvGRU._calculate_update_gate": [[119, 124], ["gconv_gru.GConvGRU.conv_x_z", "torch.sigmoid", "gconv_gru.GConvGRU.conv_h_z"], "methods", ["None"], ["", "def", "_calculate_update_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "lambda_max", ")", ":", "\n", "        ", "Z", "=", "self", ".", "conv_x_z", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "Z", "=", "Z", "+", "self", ".", "conv_h_z", "(", "H", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "Z", "=", "torch", ".", "sigmoid", "(", "Z", ")", "\n", "return", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_gru.GConvGRU._calculate_reset_gate": [[125, 130], ["gconv_gru.GConvGRU.conv_x_r", "torch.sigmoid", "gconv_gru.GConvGRU.conv_h_r"], "methods", ["None"], ["", "def", "_calculate_reset_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "lambda_max", ")", ":", "\n", "        ", "R", "=", "self", ".", "conv_x_r", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "R", "=", "R", "+", "self", ".", "conv_h_r", "(", "H", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "R", "=", "torch", ".", "sigmoid", "(", "R", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_gru.GConvGRU._calculate_candidate_state": [[131, 136], ["gconv_gru.GConvGRU.conv_x_h", "torch.tanh", "gconv_gru.GConvGRU.conv_h_h"], "methods", ["None"], ["", "def", "_calculate_candidate_state", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "R", ",", "lambda_max", ")", ":", "\n", "        ", "H_tilde", "=", "self", ".", "conv_x_h", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "H_tilde", "=", "H_tilde", "+", "self", ".", "conv_h_h", "(", "H", "*", "R", ",", "edge_index", ",", "edge_weight", ",", "lambda_max", "=", "lambda_max", ")", "\n", "H_tilde", "=", "torch", ".", "tanh", "(", "H_tilde", ")", "\n", "return", "H_tilde", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_gru.GConvGRU._calculate_hidden_state": [[137, 140], ["None"], "methods", ["None"], ["", "def", "_calculate_hidden_state", "(", "self", ",", "Z", ",", "H", ",", "H_tilde", ")", ":", "\n", "        ", "H", "=", "Z", "*", "H", "+", "(", "1", "-", "Z", ")", "*", "H_tilde", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.gconv_gru.GConvGRU.forward": [[141, 171], ["gconv_gru.GConvGRU._set_hidden_state", "gconv_gru.GConvGRU._calculate_update_gate", "gconv_gru.GConvGRU._calculate_reset_gate", "gconv_gru.GConvGRU._calculate_candidate_state", "gconv_gru.GConvGRU._calculate_hidden_state"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_hidden_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_update_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_reset_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_candidate_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_hidden_state"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "H", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "lambda_max", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph. If the hidden state matrix is not present\n        when the forward pass is called it is initialized with zeros.\n\n        Arg types:\n            * **X** *(PyTorch Float Tensor)* - Node features.\n            * **edge_index** *(PyTorch Long Tensor)* - Graph edge indices.\n            * **edge_weight** *(PyTorch Long Tensor, optional)* - Edge weight vector.\n            * **H** *(PyTorch Float Tensor, optional)* - Hidden state matrix for all nodes.\n            * **lambda_max** *(PyTorch Tensor, optional but mandatory if normalization is not sym)* - Largest eigenvalue of Laplacian.\n\n\n        Return types:\n            * **H** *(PyTorch Float Tensor)* - Hidden state matrix for all nodes.\n        \"\"\"", "\n", "H", "=", "self", ".", "_set_hidden_state", "(", "X", ",", "H", ")", "\n", "Z", "=", "self", ".", "_calculate_update_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "lambda_max", ")", "\n", "R", "=", "self", ".", "_calculate_reset_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "lambda_max", ")", "\n", "H_tilde", "=", "self", ".", "_calculate_candidate_state", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "R", ",", "lambda_max", ")", "\n", "H", "=", "self", ".", "_calculate_hidden_state", "(", "Z", ",", "H", ",", "H_tilde", ")", "\n", "return", "H", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.mpnn_lstm.MPNNLSTM.__init__": [[19, 36], ["torch.Module.__init__", "mpnn_lstm.MPNNLSTM._create_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_parameters_and_layers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "hidden_size", ":", "int", ",", "\n", "num_nodes", ":", "int", ",", "\n", "window", ":", "int", ",", "\n", "dropout", ":", "float", ",", "\n", ")", ":", "\n", "        ", "super", "(", "MPNNLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "window", "=", "window", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "\n", "self", ".", "_create_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.mpnn_lstm.MPNNLSTM._create_parameters_and_layers": [[37, 47], ["torch_geometric.nn.GCNConv", "torch_geometric.nn.GCNConv", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["None"], ["", "def", "_create_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "_convolution_1", "=", "GCNConv", "(", "self", ".", "in_channels", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "_convolution_2", "=", "GCNConv", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ")", "\n", "\n", "self", ".", "_batch_norm_1", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "hidden_size", ")", "\n", "self", ".", "_batch_norm_2", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "hidden_size", ")", "\n", "\n", "self", ".", "_recurrent_1", "=", "nn", ".", "LSTM", "(", "2", "*", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ",", "1", ")", "\n", "self", ".", "_recurrent_2", "=", "nn", ".", "LSTM", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.mpnn_lstm.MPNNLSTM._graph_convolution_1": [[48, 53], ["torch.relu", "torch.relu", "torch.relu", "mpnn_lstm.MPNNLSTM._batch_norm_1", "torch.dropout", "torch.dropout", "torch.dropout", "mpnn_lstm.MPNNLSTM._convolution_1"], "methods", ["None"], ["", "def", "_graph_convolution_1", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ")", ":", "\n", "        ", "X", "=", "F", ".", "relu", "(", "self", ".", "_convolution_1", "(", "X", ",", "edge_index", ",", "edge_weight", ")", ")", "\n", "X", "=", "self", ".", "_batch_norm_1", "(", "X", ")", "\n", "X", "=", "F", ".", "dropout", "(", "X", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.mpnn_lstm.MPNNLSTM._graph_convolution_2": [[54, 59], ["torch.relu", "torch.relu", "torch.relu", "mpnn_lstm.MPNNLSTM._batch_norm_2", "torch.dropout", "torch.dropout", "torch.dropout", "mpnn_lstm.MPNNLSTM._convolution_2"], "methods", ["None"], ["", "def", "_graph_convolution_2", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ")", ":", "\n", "        ", "X", "=", "F", ".", "relu", "(", "self", ".", "_convolution_2", "(", "X", ",", "edge_index", ",", "edge_weight", ")", ")", "\n", "X", "=", "self", ".", "_batch_norm_2", "(", "X", ")", "\n", "X", "=", "F", ".", "dropout", "(", "X", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.mpnn_lstm.MPNNLSTM.forward": [[60, 106], ["list", "X.contiguous().view.contiguous().view.view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.reshape", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mpnn_lstm.MPNNLSTM._graph_convolution_1", "list.append", "mpnn_lstm.MPNNLSTM._graph_convolution_2", "list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "X.contiguous().view.contiguous().view.view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "X.contiguous().view.contiguous().view.contiguous().view", "mpnn_lstm.MPNNLSTM._recurrent_1", "mpnn_lstm.MPNNLSTM._recurrent_2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "O.append", "X.contiguous().view.contiguous().view.size", "X.contiguous().view.contiguous().view.size", "S[].unsqueeze", "X.contiguous().view.contiguous().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.mpnn_lstm.MPNNLSTM._graph_convolution_1", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.mpnn_lstm.MPNNLSTM._graph_convolution_2"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass through the whole architecture.\n\n        Arg types:\n            * **X** *(PyTorch FloatTensor)* - Node features.\n            * **edge_index** *(PyTorch LongTensor)* - Graph edge indices.\n            * **edge_weight** *(PyTorch LongTensor, optional)* - Edge weight vector.\n\n        Return types:\n            *  **H** *(PyTorch FloatTensor)* - The hidden representation of size 2*nhid+in_channels+window-1 for each node.\n        \"\"\"", "\n", "R", "=", "list", "(", ")", "\n", "\n", "S", "=", "X", ".", "view", "(", "-", "1", ",", "self", ".", "window", ",", "self", ".", "num_nodes", ",", "self", ".", "in_channels", ")", "\n", "S", "=", "torch", ".", "transpose", "(", "S", ",", "1", ",", "2", ")", "\n", "S", "=", "S", ".", "reshape", "(", "-", "1", ",", "self", ".", "window", ",", "self", ".", "in_channels", ")", "\n", "O", "=", "[", "S", "[", ":", ",", "0", ",", ":", "]", "]", "\n", "\n", "for", "l", "in", "range", "(", "1", ",", "self", ".", "window", ")", ":", "\n", "            ", "O", ".", "append", "(", "S", "[", ":", ",", "l", ",", "self", ".", "in_channels", "-", "1", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "\n", "", "S", "=", "torch", ".", "cat", "(", "O", ",", "dim", "=", "1", ")", "\n", "\n", "X", "=", "self", ".", "_graph_convolution_1", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "R", ".", "append", "(", "X", ")", "\n", "\n", "X", "=", "self", ".", "_graph_convolution_2", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "R", ".", "append", "(", "X", ")", "\n", "\n", "X", "=", "torch", ".", "cat", "(", "R", ",", "dim", "=", "1", ")", "\n", "\n", "X", "=", "X", ".", "view", "(", "-", "1", ",", "self", ".", "window", ",", "self", ".", "num_nodes", ",", "X", ".", "size", "(", "1", ")", ")", "\n", "X", "=", "torch", ".", "transpose", "(", "X", ",", "0", ",", "1", ")", "\n", "X", "=", "X", ".", "contiguous", "(", ")", ".", "view", "(", "self", ".", "window", ",", "-", "1", ",", "X", ".", "size", "(", "3", ")", ")", "\n", "\n", "X", ",", "(", "H_1", ",", "_", ")", "=", "self", ".", "_recurrent_1", "(", "X", ")", "\n", "X", ",", "(", "H_2", ",", "_", ")", "=", "self", ".", "_recurrent_2", "(", "X", ")", "\n", "\n", "H", "=", "torch", ".", "cat", "(", "[", "H_1", "[", "0", ",", ":", ",", ":", "]", ",", "H_2", "[", "0", ",", ":", ",", ":", "]", ",", "S", "]", ",", "dim", "=", "1", ")", "\n", "return", "H", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcnh.EvolveGCNH.__init__": [[31, 52], ["super().__init__", "torch.nn.Parameter", "evolvegcnh.EvolveGCNH._create_layers", "evolvegcnh.EvolveGCNH.reset_parameters", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._create_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcnh.EvolveGCNH.reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_of_nodes", ":", "int", ",", "\n", "in_channels", ":", "int", ",", "\n", "improved", ":", "bool", "=", "False", ",", "\n", "cached", ":", "bool", "=", "False", ",", "\n", "normalize", ":", "bool", "=", "True", ",", "\n", "add_self_loops", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "EvolveGCNH", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_of_nodes", "=", "num_of_nodes", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "improved", "=", "improved", "\n", "self", ".", "cached", "=", "cached", "\n", "self", ".", "normalize", "=", "normalize", "\n", "self", ".", "add_self_loops", "=", "add_self_loops", "\n", "self", ".", "weight", "=", "None", "\n", "self", ".", "initial_weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "in_channels", ")", ")", "\n", "self", ".", "_create_layers", "(", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcnh.EvolveGCNH.reset_parameters": [[53, 55], ["evolvegcno.glorot"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "glorot", "(", "self", ".", "initial_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcnh.EvolveGCNH._create_layers": [[56, 73], ["torch_geometric.nn.TopKPooling", "torch.nn.GRU", "evolvegcno.GCNConv_Fixed_W"], "methods", ["None"], ["", "def", "_create_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "ratio", "=", "self", ".", "in_channels", "/", "self", ".", "num_of_nodes", "\n", "\n", "self", ".", "pooling_layer", "=", "TopKPooling", "(", "self", ".", "in_channels", ",", "self", ".", "ratio", ")", "\n", "\n", "self", ".", "recurrent_layer", "=", "GRU", "(", "\n", "input_size", "=", "self", ".", "in_channels", ",", "hidden_size", "=", "self", ".", "in_channels", ",", "num_layers", "=", "1", "\n", ")", "\n", "\n", "self", ".", "conv_layer", "=", "GCNConv_Fixed_W", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "in_channels", ",", "\n", "improved", "=", "self", ".", "improved", ",", "\n", "cached", "=", "self", ".", "cached", ",", "\n", "normalize", "=", "self", ".", "normalize", ",", "\n", "add_self_loops", "=", "self", ".", "add_self_loops", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.evolvegcnh.EvolveGCNH.forward": [[75, 100], ["evolvegcnh.EvolveGCNH.pooling_layer", "evolvegcnh.EvolveGCNH.recurrent_layer", "evolvegcnh.EvolveGCNH.conv_layer", "W.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass.\n\n        Arg types:\n            * **X** *(PyTorch Float Tensor)* - Node embedding.\n            * **edge_index** *(PyTorch Long Tensor)* - Graph edge indices.\n            * **edge_weight** *(PyTorch Float Tensor, optional)* - Edge weight vector.\n\n        Return types:\n            * **X** *(PyTorch Float Tensor)* - Output matrix for all nodes.\n        \"\"\"", "\n", "X_tilde", "=", "self", ".", "pooling_layer", "(", "X", ",", "edge_index", ")", "\n", "X_tilde", "=", "X_tilde", "[", "0", "]", "[", "None", ",", ":", ",", ":", "]", "\n", "if", "self", ".", "weight", "is", "None", ":", "\n", "            ", "self", ".", "weight", "=", "self", ".", "initial_weight", ".", "data", "\n", "", "W", "=", "self", ".", "weight", "[", "None", ",", ":", ",", ":", "]", "\n", "X_tilde", ",", "W", "=", "self", ".", "recurrent_layer", "(", "X_tilde", ",", "W", ")", "\n", "X", "=", "self", ".", "conv_layer", "(", "W", ".", "squeeze", "(", "dim", "=", "0", ")", ",", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN.__init__": [[19, 29], ["super().__init__", "lrgcn.LRGCN._create_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._create_layers"], ["def", "__init__", "(", "\n", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "num_relations", ":", "int", ",", "num_bases", ":", "int", "\n", ")", ":", "\n", "        ", "super", "(", "LRGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "num_relations", "=", "num_relations", "\n", "self", ".", "num_bases", "=", "num_bases", "\n", "self", ".", "_create_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._create_input_gate_layers": [[30, 44], ["torch_geometric.nn.RGCNConv", "torch_geometric.nn.RGCNConv"], "methods", ["None"], ["", "def", "_create_input_gate_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_x_i", "=", "RGCNConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "num_relations", "=", "self", ".", "num_relations", ",", "\n", "num_bases", "=", "self", ".", "num_bases", ",", "\n", ")", "\n", "\n", "self", ".", "conv_h_i", "=", "RGCNConv", "(", "\n", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "num_relations", "=", "self", ".", "num_relations", ",", "\n", "num_bases", "=", "self", ".", "num_bases", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._create_forget_gate_layers": [[46, 60], ["torch_geometric.nn.RGCNConv", "torch_geometric.nn.RGCNConv"], "methods", ["None"], ["", "def", "_create_forget_gate_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_x_f", "=", "RGCNConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "num_relations", "=", "self", ".", "num_relations", ",", "\n", "num_bases", "=", "self", ".", "num_bases", ",", "\n", ")", "\n", "\n", "self", ".", "conv_h_f", "=", "RGCNConv", "(", "\n", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "num_relations", "=", "self", ".", "num_relations", ",", "\n", "num_bases", "=", "self", ".", "num_bases", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._create_cell_state_layers": [[62, 76], ["torch_geometric.nn.RGCNConv", "torch_geometric.nn.RGCNConv"], "methods", ["None"], ["", "def", "_create_cell_state_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_x_c", "=", "RGCNConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "num_relations", "=", "self", ".", "num_relations", ",", "\n", "num_bases", "=", "self", ".", "num_bases", ",", "\n", ")", "\n", "\n", "self", ".", "conv_h_c", "=", "RGCNConv", "(", "\n", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "num_relations", "=", "self", ".", "num_relations", ",", "\n", "num_bases", "=", "self", ".", "num_bases", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._create_output_gate_layers": [[78, 92], ["torch_geometric.nn.RGCNConv", "torch_geometric.nn.RGCNConv"], "methods", ["None"], ["", "def", "_create_output_gate_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_x_o", "=", "RGCNConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "num_relations", "=", "self", ".", "num_relations", ",", "\n", "num_bases", "=", "self", ".", "num_bases", ",", "\n", ")", "\n", "\n", "self", ".", "conv_h_o", "=", "RGCNConv", "(", "\n", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "num_relations", "=", "self", ".", "num_relations", ",", "\n", "num_bases", "=", "self", ".", "num_bases", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._create_layers": [[94, 99], ["lrgcn.LRGCN._create_input_gate_layers", "lrgcn.LRGCN._create_forget_gate_layers", "lrgcn.LRGCN._create_cell_state_layers", "lrgcn.LRGCN._create_output_gate_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._create_input_gate_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._create_forget_gate_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._create_cell_state_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._create_output_gate_layers"], ["", "def", "_create_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "_create_input_gate_layers", "(", ")", "\n", "self", ".", "_create_forget_gate_layers", "(", ")", "\n", "self", ".", "_create_cell_state_layers", "(", ")", "\n", "self", ".", "_create_output_gate_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._set_hidden_state": [[100, 104], ["torch.zeros().to", "torch.zeros"], "methods", ["None"], ["", "def", "_set_hidden_state", "(", "self", ",", "X", ",", "H", ")", ":", "\n", "        ", "if", "H", "is", "None", ":", "\n", "            ", "H", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "out_channels", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._set_cell_state": [[105, 109], ["torch.zeros().to", "torch.zeros"], "methods", ["None"], ["", "def", "_set_cell_state", "(", "self", ",", "X", ",", "C", ")", ":", "\n", "        ", "if", "C", "is", "None", ":", "\n", "            ", "C", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "out_channels", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._calculate_input_gate": [[110, 115], ["lrgcn.LRGCN.conv_x_i", "torch.sigmoid", "lrgcn.LRGCN.conv_h_i"], "methods", ["None"], ["", "def", "_calculate_input_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_type", ",", "H", ",", "C", ")", ":", "\n", "        ", "I", "=", "self", ".", "conv_x_i", "(", "X", ",", "edge_index", ",", "edge_type", ")", "\n", "I", "=", "I", "+", "self", ".", "conv_h_i", "(", "H", ",", "edge_index", ",", "edge_type", ")", "\n", "I", "=", "torch", ".", "sigmoid", "(", "I", ")", "\n", "return", "I", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._calculate_forget_gate": [[116, 121], ["lrgcn.LRGCN.conv_x_f", "torch.sigmoid", "lrgcn.LRGCN.conv_h_f"], "methods", ["None"], ["", "def", "_calculate_forget_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_type", ",", "H", ",", "C", ")", ":", "\n", "        ", "F", "=", "self", ".", "conv_x_f", "(", "X", ",", "edge_index", ",", "edge_type", ")", "\n", "F", "=", "F", "+", "self", ".", "conv_h_f", "(", "H", ",", "edge_index", ",", "edge_type", ")", "\n", "F", "=", "torch", ".", "sigmoid", "(", "F", ")", "\n", "return", "F", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._calculate_cell_state": [[122, 128], ["lrgcn.LRGCN.conv_x_c", "torch.tanh", "lrgcn.LRGCN.conv_h_c"], "methods", ["None"], ["", "def", "_calculate_cell_state", "(", "self", ",", "X", ",", "edge_index", ",", "edge_type", ",", "H", ",", "C", ",", "I", ",", "F", ")", ":", "\n", "        ", "T", "=", "self", ".", "conv_x_c", "(", "X", ",", "edge_index", ",", "edge_type", ")", "\n", "T", "=", "T", "+", "self", ".", "conv_h_c", "(", "H", ",", "edge_index", ",", "edge_type", ")", "\n", "T", "=", "torch", ".", "tanh", "(", "T", ")", "\n", "C", "=", "F", "*", "C", "+", "I", "*", "T", "\n", "return", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._calculate_output_gate": [[129, 134], ["lrgcn.LRGCN.conv_x_o", "torch.sigmoid", "lrgcn.LRGCN.conv_h_o"], "methods", ["None"], ["", "def", "_calculate_output_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_type", ",", "H", ",", "C", ")", ":", "\n", "        ", "O", "=", "self", ".", "conv_x_o", "(", "X", ",", "edge_index", ",", "edge_type", ")", "\n", "O", "=", "O", "+", "self", ".", "conv_h_o", "(", "H", ",", "edge_index", ",", "edge_type", ")", "\n", "O", "=", "torch", ".", "sigmoid", "(", "O", ")", "\n", "return", "O", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN._calculate_hidden_state": [[135, 138], ["torch.tanh"], "methods", ["None"], ["", "def", "_calculate_hidden_state", "(", "self", ",", "O", ",", "C", ")", ":", "\n", "        ", "H", "=", "O", "*", "torch", ".", "tanh", "(", "C", ")", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.lrgcn.LRGCN.forward": [[139, 170], ["lrgcn.LRGCN._set_hidden_state", "lrgcn.LRGCN._set_cell_state", "lrgcn.LRGCN._calculate_input_gate", "lrgcn.LRGCN._calculate_forget_gate", "lrgcn.LRGCN._calculate_cell_state", "lrgcn.LRGCN._calculate_output_gate", "lrgcn.LRGCN._calculate_hidden_state"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_hidden_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_cell_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_input_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_forget_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_cell_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_output_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_hidden_state"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_type", ":", "torch", ".", "LongTensor", ",", "\n", "H", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "C", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass. If the hidden state and cell state matrices are\n        not present when the forward pass is called these are initialized with zeros.\n\n        Arg types:\n            * **X** *(PyTorch Float Tensor)* - Node features.\n            * **edge_index** *(PyTorch Long Tensor)* - Graph edge indices.\n            * **edge_type** *(PyTorch Long Tensor)* - Edge type vector.\n            * **H** *(PyTorch Float Tensor, optional)* - Hidden state matrix for all nodes.\n            * **C** *(PyTorch Float Tensor, optional)* - Cell state matrix for all nodes.\n\n        Return types:\n            * **H** *(PyTorch Float Tensor)* - Hidden state matrix for all nodes.\n            * **C** *(PyTorch Float Tensor)* - Cell state matrix for all nodes.\n        \"\"\"", "\n", "H", "=", "self", ".", "_set_hidden_state", "(", "X", ",", "H", ")", "\n", "C", "=", "self", ".", "_set_cell_state", "(", "X", ",", "C", ")", "\n", "I", "=", "self", ".", "_calculate_input_gate", "(", "X", ",", "edge_index", ",", "edge_type", ",", "H", ",", "C", ")", "\n", "F", "=", "self", ".", "_calculate_forget_gate", "(", "X", ",", "edge_index", ",", "edge_type", ",", "H", ",", "C", ")", "\n", "C", "=", "self", ".", "_calculate_cell_state", "(", "X", ",", "edge_index", ",", "edge_type", ",", "H", ",", "C", ",", "I", ",", "F", ")", "\n", "O", "=", "self", ".", "_calculate_output_gate", "(", "X", ",", "edge_index", ",", "edge_type", ",", "H", ",", "C", ")", "\n", "H", "=", "self", ".", "_calculate_hidden_state", "(", "O", ",", "C", ")", "\n", "return", "H", ",", "C", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DConv.__init__": [[21, 34], ["torch_geometric.nn.conv.MessagePassing.__init__", "torch.nn.Parameter", "dcrnn.DConv.__reset_parameters", "torch.Tensor", "torch.nn.Parameter", "dcrnn.DConv.register_parameter", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DConv.__reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "K", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "DConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "\"add\"", ",", "flow", "=", "\"source_to_target\"", ")", "\n", "assert", "K", ">", "0", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "2", ",", "K", ",", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "\"bias\"", ",", "None", ")", "\n", "\n", "", "self", ".", "__reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DConv.__reset_parameters": [[35, 38], ["torch.nn.init.xavier_uniform_", "torch.nn.init.zeros_"], "methods", ["None"], ["", "def", "__reset_parameters", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DConv.message": [[39, 41], ["norm.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ",", "norm", ")", ":", "\n", "        ", "return", "norm", ".", "view", "(", "-", "1", ",", "1", ")", "*", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DConv.forward": [[42, 112], ["torch_geometric.utils.to_dense_adj", "adj_mat.reshape.reshape.reshape", "torch.matmul", "deg_out.flatten.flatten.flatten", "torch.matmul", "deg_in.flatten.flatten.flatten", "torch.reciprocal", "torch.reciprocal", "adj_mat.reshape.reshape.transpose", "torch_geometric.utils.dense_to_sparse", "range", "adj_mat.reshape.reshape.size", "adj_mat.reshape.reshape.size", "torch.ones().to", "torch.ones().to", "torch.matmul", "torch.matmul", "dcrnn.DConv.weight.size", "dcrnn.DConv.propagate", "dcrnn.DConv.propagate", "dcrnn.DConv.weight.size", "dcrnn.DConv.propagate", "dcrnn.DConv.propagate", "torch.matmul", "torch.matmul", "torch.ones", "torch.ones", "torch.matmul", "torch.matmul", "adj_mat.reshape.reshape.size", "adj_mat.reshape.reshape.size"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "r\"\"\"Making a forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph.\n\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Node features.\n            * **edge_index** (PyTorch Long Tensor) - Graph edge indices.\n            * **edge_weight** (PyTorch Long Tensor, optional) - Edge weight vector.\n\n        Return types:\n            * **H** (PyTorch Float Tensor) - Hidden state matrix for all nodes.\n        \"\"\"", "\n", "adj_mat", "=", "to_dense_adj", "(", "edge_index", ",", "edge_attr", "=", "edge_weight", ")", "\n", "adj_mat", "=", "adj_mat", ".", "reshape", "(", "adj_mat", ".", "size", "(", "1", ")", ",", "adj_mat", ".", "size", "(", "2", ")", ")", "\n", "deg_out", "=", "torch", ".", "matmul", "(", "\n", "adj_mat", ",", "torch", ".", "ones", "(", "size", "=", "(", "adj_mat", ".", "size", "(", "0", ")", ",", "1", ")", ")", ".", "to", "(", "X", ".", "device", ")", "\n", ")", "\n", "deg_out", "=", "deg_out", ".", "flatten", "(", ")", "\n", "deg_in", "=", "torch", ".", "matmul", "(", "\n", "torch", ".", "ones", "(", "size", "=", "(", "1", ",", "adj_mat", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "X", ".", "device", ")", ",", "adj_mat", "\n", ")", "\n", "deg_in", "=", "deg_in", ".", "flatten", "(", ")", "\n", "\n", "deg_out_inv", "=", "torch", ".", "reciprocal", "(", "deg_out", ")", "\n", "deg_in_inv", "=", "torch", ".", "reciprocal", "(", "deg_in", ")", "\n", "row", ",", "col", "=", "edge_index", "\n", "norm_out", "=", "deg_out_inv", "[", "row", "]", "\n", "norm_in", "=", "deg_in_inv", "[", "row", "]", "\n", "\n", "reverse_edge_index", "=", "adj_mat", ".", "transpose", "(", "0", ",", "1", ")", "\n", "reverse_edge_index", ",", "vv", "=", "dense_to_sparse", "(", "reverse_edge_index", ")", "\n", "\n", "Tx_0", "=", "X", "\n", "Tx_1", "=", "X", "\n", "H", "=", "torch", ".", "matmul", "(", "Tx_0", ",", "(", "self", ".", "weight", "[", "0", "]", ")", "[", "0", "]", ")", "+", "torch", ".", "matmul", "(", "\n", "Tx_0", ",", "(", "self", ".", "weight", "[", "1", "]", ")", "[", "0", "]", "\n", ")", "\n", "\n", "if", "self", ".", "weight", ".", "size", "(", "1", ")", ">", "1", ":", "\n", "            ", "Tx_1_o", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "X", ",", "norm", "=", "norm_out", ",", "size", "=", "None", ")", "\n", "Tx_1_i", "=", "self", ".", "propagate", "(", "reverse_edge_index", ",", "x", "=", "X", ",", "norm", "=", "norm_in", ",", "size", "=", "None", ")", "\n", "H", "=", "(", "\n", "H", "\n", "+", "torch", ".", "matmul", "(", "Tx_1_o", ",", "(", "self", ".", "weight", "[", "0", "]", ")", "[", "1", "]", ")", "\n", "+", "torch", ".", "matmul", "(", "Tx_1_i", ",", "(", "self", ".", "weight", "[", "1", "]", ")", "[", "1", "]", ")", "\n", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "2", ",", "self", ".", "weight", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "Tx_2_o", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "Tx_1_o", ",", "norm", "=", "norm_out", ",", "size", "=", "None", ")", "\n", "Tx_2_o", "=", "2.0", "*", "Tx_2_o", "-", "Tx_0", "\n", "Tx_2_i", "=", "self", ".", "propagate", "(", "\n", "reverse_edge_index", ",", "x", "=", "Tx_1_i", ",", "norm", "=", "norm_in", ",", "size", "=", "None", "\n", ")", "\n", "Tx_2_i", "=", "2.0", "*", "Tx_2_i", "-", "Tx_0", "\n", "H", "=", "(", "\n", "H", "\n", "+", "torch", ".", "matmul", "(", "Tx_2_o", ",", "(", "self", ".", "weight", "[", "0", "]", ")", "[", "k", "]", ")", "\n", "+", "torch", ".", "matmul", "(", "Tx_2_i", ",", "(", "self", ".", "weight", "[", "1", "]", ")", "[", "k", "]", ")", "\n", ")", "\n", "Tx_0", ",", "Tx_1_o", ",", "Tx_1_i", "=", "Tx_1", ",", "Tx_2_o", ",", "Tx_2_i", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "H", "+=", "self", ".", "bias", "\n", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN.__init__": [[128, 137], ["super().__init__", "dcrnn.DCRNN._create_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_parameters_and_layers"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "K", ":", "int", ",", "bias", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", "DCRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "_create_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_update_gate_parameters_and_layers": [[138, 144], ["dcrnn.DConv"], "methods", ["None"], ["", "def", "_create_update_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_x_z", "=", "DConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", "+", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_reset_gate_parameters_and_layers": [[146, 152], ["dcrnn.DConv"], "methods", ["None"], ["", "def", "_create_reset_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_x_r", "=", "DConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", "+", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_candidate_state_parameters_and_layers": [[154, 160], ["dcrnn.DConv"], "methods", ["None"], ["", "def", "_create_candidate_state_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_x_h", "=", "DConv", "(", "\n", "in_channels", "=", "self", ".", "in_channels", "+", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "bias", "=", "self", ".", "bias", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_parameters_and_layers": [[162, 166], ["dcrnn.DCRNN._create_update_gate_parameters_and_layers", "dcrnn.DCRNN._create_reset_gate_parameters_and_layers", "dcrnn.DCRNN._create_candidate_state_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_update_gate_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_reset_gate_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._create_candidate_state_parameters_and_layers"], ["", "def", "_create_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "_create_update_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_reset_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_candidate_state_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._set_hidden_state": [[167, 171], ["torch.zeros().to", "torch.zeros"], "methods", ["None"], ["", "def", "_set_hidden_state", "(", "self", ",", "X", ",", "H", ")", ":", "\n", "        ", "if", "H", "is", "None", ":", "\n", "            ", "H", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "out_channels", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_update_gate": [[172, 177], ["torch.cat", "dcrnn.DCRNN.conv_x_z", "torch.sigmoid"], "methods", ["None"], ["", "def", "_calculate_update_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", ":", "\n", "        ", "Z", "=", "torch", ".", "cat", "(", "[", "X", ",", "H", "]", ",", "dim", "=", "1", ")", "\n", "Z", "=", "self", ".", "conv_x_z", "(", "Z", ",", "edge_index", ",", "edge_weight", ")", "\n", "Z", "=", "torch", ".", "sigmoid", "(", "Z", ")", "\n", "return", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_reset_gate": [[178, 183], ["torch.cat", "dcrnn.DCRNN.conv_x_r", "torch.sigmoid"], "methods", ["None"], ["", "def", "_calculate_reset_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", ":", "\n", "        ", "R", "=", "torch", ".", "cat", "(", "[", "X", ",", "H", "]", ",", "dim", "=", "1", ")", "\n", "R", "=", "self", ".", "conv_x_r", "(", "R", ",", "edge_index", ",", "edge_weight", ")", "\n", "R", "=", "torch", ".", "sigmoid", "(", "R", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_candidate_state": [[184, 189], ["torch.cat", "dcrnn.DCRNN.conv_x_h", "torch.tanh"], "methods", ["None"], ["", "def", "_calculate_candidate_state", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "R", ")", ":", "\n", "        ", "H_tilde", "=", "torch", ".", "cat", "(", "[", "X", ",", "H", "*", "R", "]", ",", "dim", "=", "1", ")", "\n", "H_tilde", "=", "self", ".", "conv_x_h", "(", "H_tilde", ",", "edge_index", ",", "edge_weight", ")", "\n", "H_tilde", "=", "torch", ".", "tanh", "(", "H_tilde", ")", "\n", "return", "H_tilde", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_hidden_state": [[190, 193], ["None"], "methods", ["None"], ["", "def", "_calculate_hidden_state", "(", "self", ",", "Z", ",", "H", ",", "H_tilde", ")", ":", "\n", "        ", "H", "=", "Z", "*", "H", "+", "(", "1", "-", "Z", ")", "*", "H_tilde", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN.forward": [[194, 220], ["dcrnn.DCRNN._set_hidden_state", "dcrnn.DCRNN._calculate_update_gate", "dcrnn.DCRNN._calculate_reset_gate", "dcrnn.DCRNN._calculate_candidate_state", "dcrnn.DCRNN._calculate_hidden_state"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_hidden_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_update_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_reset_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.recurrent.dcrnn.DCRNN._calculate_candidate_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_hidden_state"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", "H", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "r\"\"\"Making a forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph. If the hidden state matrix is not present\n        when the forward pass is called it is initialized with zeros.\n\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Node features.\n            * **edge_index** (PyTorch Long Tensor) - Graph edge indices.\n            * **edge_weight** (PyTorch Long Tensor, optional) - Edge weight vector.\n            * **H** (PyTorch Float Tensor, optional) - Hidden state matrix for all nodes.\n\n        Return types:\n            * **H** (PyTorch Float Tensor) - Hidden state matrix for all nodes.\n        \"\"\"", "\n", "H", "=", "self", ".", "_set_hidden_state", "(", "X", ",", "H", ")", "\n", "Z", "=", "self", ".", "_calculate_update_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "R", "=", "self", ".", "_calculate_reset_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "H_tilde", "=", "self", ".", "_calculate_candidate_state", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "R", ")", "\n", "H", "=", "self", ".", "_calculate_hidden_state", "(", "Z", ",", "H", ",", "H_tilde", ")", "\n", "return", "H", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.source.conf.setup": [[42, 54], ["app.connect"], "function", ["None"], ["def", "setup", "(", "app", ")", ":", "\n", "    ", "def", "skip", "(", "app", ",", "what", ",", "name", ",", "obj", ",", "skip", ",", "options", ")", ":", "\n", "        ", "members", "=", "[", "\n", "'__init__'", ",", "\n", "'__repr__'", ",", "\n", "'__weakref__'", ",", "\n", "'__dict__'", ",", "\n", "'__module__'", ",", "\n", "]", "\n", "return", "True", "if", "name", "in", "members", "else", "skip", "\n", "\n", "", "app", ".", "connect", "(", "'autodoc-skip-member'", ",", "skip", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.dnntsp.MaskedSelfAttention.__init__": [[10, 29], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "ValueError"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "n_heads", ",", "attention_aggregate", "=", "\"mean\"", ")", ":", "\n", "        ", "super", "(", "MaskedSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "attention_aggregate", "=", "attention_aggregate", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "\n", "if", "attention_aggregate", "==", "\"concat\"", ":", "\n", "            ", "self", ".", "per_head_dim", "=", "self", ".", "dq", "=", "self", ".", "dk", "=", "self", ".", "dv", "=", "output_dim", "//", "n_heads", "\n", "", "elif", "attention_aggregate", "==", "\"mean\"", ":", "\n", "            ", "self", ".", "per_head_dim", "=", "self", ".", "dq", "=", "self", ".", "dk", "=", "self", ".", "dv", "=", "output_dim", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"wrong value for aggregate {attention_aggregate}\"", ")", "\n", "\n", "", "self", ".", "Wq", "=", "nn", ".", "Linear", "(", "input_dim", ",", "n_heads", "*", "self", ".", "dq", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wk", "=", "nn", ".", "Linear", "(", "input_dim", ",", "n_heads", "*", "self", ".", "dk", ",", "bias", "=", "False", ")", "\n", "self", ".", "Wv", "=", "nn", ".", "Linear", "(", "input_dim", ",", "n_heads", "*", "self", ".", "dv", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.dnntsp.MaskedSelfAttention.forward": [[30, 71], ["dnntsp.MaskedSelfAttention.Wq", "dnntsp.MaskedSelfAttention.Wk", "dnntsp.MaskedSelfAttention.Wv", "Q.reshape().transpose.reshape().transpose.reshape().transpose", "K.reshape().permute.reshape().permute.reshape().permute", "V.reshape().transpose.reshape().transpose.reshape().transpose", "torch.zeros().masked_fill().to", "torch.zeros().masked_fill().to", "torch.zeros().masked_fill().to", "torch.zeros().masked_fill().to", "torch.zeros().masked_fill().to", "torch.zeros().masked_fill().to", "torch.zeros().masked_fill().to", "torch.zeros().masked_fill().to", "torch.zeros().masked_fill().to", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.matmul", "torch.softmax.matmul", "torch.softmax.matmul", "print", "Q.reshape().transpose.reshape().transpose.matmul", "numpy.sqrt", "torch.softmax.matmul.transpose().reshape", "Q.reshape().transpose.reshape().transpose.reshape", "K.reshape().permute.reshape().permute.reshape", "V.reshape().transpose.reshape().transpose.reshape", "torch.zeros().masked_fill", "torch.zeros().masked_fill", "torch.zeros().masked_fill", "torch.zeros().masked_fill", "torch.zeros().masked_fill", "torch.zeros().masked_fill", "torch.zeros().masked_fill", "torch.zeros().masked_fill", "torch.zeros().masked_fill", "torch.softmax.matmul.transpose().mean", "ValueError", "torch.softmax.matmul.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.softmax.matmul.transpose", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "        ", "seq_length", "=", "input_tensor", ".", "shape", "[", "1", "]", "\n", "\n", "Q", "=", "self", ".", "Wq", "(", "input_tensor", ")", "\n", "K", "=", "self", ".", "Wk", "(", "input_tensor", ")", "\n", "V", "=", "self", ".", "Wv", "(", "input_tensor", ")", "\n", "\n", "Q", "=", "Q", ".", "reshape", "(", "\n", "input_tensor", ".", "shape", "[", "0", "]", ",", "input_tensor", ".", "shape", "[", "1", "]", ",", "self", ".", "n_heads", ",", "self", ".", "dq", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "K", "=", "K", ".", "reshape", "(", "\n", "input_tensor", ".", "shape", "[", "0", "]", ",", "input_tensor", ".", "shape", "[", "1", "]", ",", "self", ".", "n_heads", ",", "self", ".", "dk", "\n", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "V", "=", "V", ".", "reshape", "(", "\n", "input_tensor", ".", "shape", "[", "0", "]", ",", "input_tensor", ".", "shape", "[", "1", "]", ",", "self", ".", "n_heads", ",", "self", ".", "dv", "\n", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "attention_score", "=", "Q", ".", "matmul", "(", "K", ")", "/", "np", ".", "sqrt", "(", "self", ".", "per_head_dim", ")", "\n", "\n", "attention_mask", "=", "(", "\n", "torch", ".", "zeros", "(", "seq_length", ",", "seq_length", ")", "\n", ".", "masked_fill", "(", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "seq_length", ",", "seq_length", ")", ")", "==", "0", ",", "-", "np", ".", "inf", ")", "\n", ".", "to", "(", "input_tensor", ".", "device", ")", "\n", ")", "\n", "\n", "attention_score", "=", "attention_score", "+", "attention_mask", "\n", "\n", "attention_score", "=", "torch", ".", "softmax", "(", "attention_score", ",", "dim", "=", "-", "1", ")", "\n", "\n", "multi_head_result", "=", "attention_score", ".", "matmul", "(", "V", ")", "\n", "\n", "if", "self", ".", "attention_aggregate", "==", "\"concat\"", ":", "\n", "            ", "output", "=", "multi_head_result", ".", "transpose", "(", "1", ",", "2", ")", ".", "reshape", "(", "\n", "input_tensor", ".", "shape", "[", "0", "]", ",", "seq_length", ",", "self", ".", "n_heads", "*", "self", ".", "per_head_dim", "\n", ")", "\n", "", "elif", "self", ".", "attention_aggregate", "==", "\"mean\"", ":", "\n", "            ", "output", "=", "multi_head_result", ".", "transpose", "(", "1", ",", "2", ")", ".", "mean", "(", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"wrong value for aggregate {self.attention_aggregate}\"", ")", "\n", "", "print", "(", "output", ".", "shape", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.dnntsp.GlobalGatedUpdater.__init__": [[74, 79], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "items_total", ",", "item_embedding", ")", ":", "\n", "        ", "super", "(", "GlobalGatedUpdater", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "items_total", "=", "items_total", "\n", "self", ".", "item_embedding", "=", "item_embedding", "\n", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "torch", ".", "rand", "(", "items_total", ",", "1", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.dnntsp.GlobalGatedUpdater.forward": [[80, 98], ["dnntsp.GlobalGatedUpdater.item_embedding", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "nodes_output", ")", ":", "\n", "\n", "        ", "batch_size", "=", "nodes_output", ".", "shape", "[", "0", "]", "//", "self", ".", "items_total", "\n", "id", "=", "0", "\n", "num_nodes", "=", "self", ".", "items_total", "\n", "items_embedding", "=", "self", ".", "item_embedding", "(", "\n", "torch", ".", "tensor", "(", "[", "i", "for", "i", "in", "range", "(", "self", ".", "items_total", ")", "]", ")", ".", "to", "(", "nodes_output", ".", "device", ")", "\n", ")", "\n", "batch_embedding", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "output_node_features", "=", "nodes_output", "[", "id", ":", "id", "+", "num_nodes", ",", ":", "]", "\n", "embed", "=", "(", "1", "-", "self", ".", "alpha", ")", "*", "items_embedding", "\n", "\n", "embed", "=", "embed", "+", "self", ".", "alpha", "*", "output_node_features", "\n", "batch_embedding", ".", "append", "(", "embed", ")", "\n", "id", "+=", "num_nodes", "\n", "", "batch_embedding", "=", "torch", ".", "stack", "(", "batch_embedding", ")", "\n", "return", "batch_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.dnntsp.AggregateTemporalNodeFeatures.__init__": [[101, 106], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "item_embed_dim", ")", ":", "\n", "\n", "        ", "super", "(", "AggregateTemporalNodeFeatures", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "Wq", "=", "nn", ".", "Linear", "(", "item_embed_dim", ",", "item_embed_dim", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.dnntsp.AggregateTemporalNodeFeatures.forward": [[107, 117], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "dnntsp.AggregateTemporalNodeFeatures.Wq", "torch.cat.append", "torch.cat.append", "torch.cat.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "nodes_output", ")", ":", "\n", "\n", "        ", "aggregated_features", "=", "[", "]", "\n", "for", "l", "in", "range", "(", "nodes_output", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "output_node_features", "=", "nodes_output", "[", "l", ",", ":", ",", ":", "]", "\n", "weights", "=", "self", ".", "Wq", "(", "output_node_features", ")", "\n", "aggregated_features", ".", "append", "(", "weights", ")", "\n", "", "aggregated_features", "=", "torch", ".", "cat", "(", "aggregated_features", ",", "dim", "=", "0", ")", "\n", "print", "(", "aggregated_features", ".", "shape", ")", "\n", "return", "aggregated_features", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.dnntsp.WeightedGCNBlock.__init__": [[120, 133], ["torch.Module.__init__", "gcns.append", "relus.append", "bns.append", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "gcns.append", "relus.append", "bns.append", "torch_geometric.nn.GCNConv", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch_geometric.nn.GCNConv", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ":", "int", ",", "hidden_sizes", ":", "List", "[", "int", "]", ",", "out_features", ":", "int", ")", ":", "\n", "        ", "super", "(", "WeightedGCNBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "gcns", ",", "relus", ",", "bns", "=", "nn", ".", "ModuleList", "(", ")", ",", "nn", ".", "ModuleList", "(", ")", ",", "nn", ".", "ModuleList", "(", ")", "\n", "input_size", "=", "in_features", "\n", "for", "hidden_size", "in", "hidden_sizes", ":", "\n", "            ", "gcns", ".", "append", "(", "GCNConv", "(", "input_size", ",", "hidden_size", ")", ")", "\n", "relus", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "bns", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "hidden_size", ")", ")", "\n", "input_size", "=", "hidden_size", "\n", "", "gcns", ".", "append", "(", "GCNConv", "(", "hidden_sizes", "[", "-", "1", "]", ",", "out_features", ")", ")", "\n", "relus", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "bns", ".", "append", "(", "nn", ".", "BatchNorm1d", "(", "out_features", ")", ")", "\n", "self", ".", "gcns", ",", "self", ".", "relus", ",", "self", ".", "bns", "=", "gcns", ",", "relus", ",", "bns", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.dnntsp.WeightedGCNBlock.forward": [[134, 146], ["zip", "gcn", "bn().transpose", "relu", "bn", "relu.transpose"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "node_features", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edges_weight", ":", "torch", ".", "LongTensor", ",", "\n", ")", ":", "\n", "        ", "h", "=", "node_features", "\n", "for", "gcn", ",", "relu", ",", "bn", "in", "zip", "(", "self", ".", "gcns", ",", "self", ".", "relus", ",", "self", ".", "bns", ")", ":", "\n", "            ", "h", "=", "gcn", "(", "h", ",", "edge_index", ",", "edges_weight", ")", "\n", "h", "=", "bn", "(", "h", ".", "transpose", "(", "1", ",", "-", "1", ")", ")", ".", "transpose", "(", "1", ",", "-", "1", ")", "\n", "h", "=", "relu", "(", "h", ")", "\n", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.dnntsp.DNNTSP.__init__": [[158, 179], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "dnntsp.WeightedGCNBlock", "dnntsp.MaskedSelfAttention", "dnntsp.AggregateTemporalNodeFeatures", "dnntsp.GlobalGatedUpdater"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["def", "__init__", "(", "self", ",", "items_total", ":", "int", ",", "item_embedding_dim", ":", "int", ",", "n_heads", ":", "int", ")", ":", "\n", "\n", "        ", "super", "(", "DNNTSP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "item_embedding", "=", "nn", ".", "Embedding", "(", "items_total", ",", "item_embedding_dim", ")", "\n", "self", ".", "item_embedding_dim", "=", "item_embedding_dim", "\n", "self", ".", "items_total", "=", "items_total", "\n", "\n", "self", ".", "stacked_gcn", "=", "WeightedGCNBlock", "(", "\n", "item_embedding_dim", ",", "[", "item_embedding_dim", "]", ",", "item_embedding_dim", "\n", ")", "\n", "\n", "self", ".", "masked_self_attention", "=", "MaskedSelfAttention", "(", "\n", "input_dim", "=", "item_embedding_dim", ",", "output_dim", "=", "item_embedding_dim", ",", "n_heads", "=", "n_heads", "\n", ")", "\n", "\n", "self", ".", "aggregate_nodes_temporal_feature", "=", "AggregateTemporalNodeFeatures", "(", "\n", "item_embed_dim", "=", "item_embedding_dim", "\n", ")", "\n", "\n", "self", ".", "global_gated_updater", "=", "GlobalGatedUpdater", "(", "\n", "items_total", "=", "items_total", ",", "item_embedding", "=", "self", ".", "item_embedding", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.dnntsp.DNNTSP.forward": [[181, 204], ["dnntsp.DNNTSP.stacked_gcn", "dnntsp.DNNTSP.view", "dnntsp.DNNTSP.masked_self_attention", "dnntsp.DNNTSP.aggregate_nodes_temporal_feature", "dnntsp.DNNTSP.global_gated_updater"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", ")", ":", "\n", "        ", "r\"\"\"Making a forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph.\n\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Node features.\n            * **edge_index** (PyTorch Long Tensor) - Graph edge indices.\n            * **edge_weight** (PyTorch Long Tensor, optional) - Edge weight vector.\n\n        Return types:\n            * **H** (PyTorch Float Tensor) - Hidden state matrix for all nodes.\n        \"\"\"", "\n", "H", "=", "self", ".", "stacked_gcn", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "H", "=", "H", ".", "view", "(", "-", "1", ",", "self", ".", "items_total", ",", "self", ".", "item_embedding_dim", ")", "\n", "H", "=", "self", ".", "masked_self_attention", "(", "H", ")", "\n", "H", "=", "self", ".", "aggregate_nodes_temporal_feature", "(", "H", ")", "\n", "H", "=", "self", ".", "global_gated_updater", "(", "H", ")", "\n", "return", "H", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.Conv2D.__init__": [[24, 49], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_dims", ":", "int", ",", "\n", "output_dims", ":", "int", ",", "\n", "kernel_size", ":", "Union", "[", "tuple", ",", "list", "]", ",", "\n", "stride", ":", "Union", "[", "tuple", ",", "list", "]", "=", "(", "1", ",", "1", ")", ",", "\n", "use_bias", ":", "bool", "=", "True", ",", "\n", "activation", ":", "Optional", "[", "Callable", "[", "[", "torch", ".", "FloatTensor", "]", ",", "torch", ".", "FloatTensor", "]", "]", "=", "F", ".", "relu", ",", "\n", "bn_decay", ":", "Optional", "[", "float", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Conv2D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_activation", "=", "activation", "\n", "self", ".", "_conv2d", "=", "nn", ".", "Conv2d", "(", "\n", "input_dims", ",", "\n", "output_dims", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "use_bias", ",", "\n", ")", "\n", "self", ".", "_batch_norm", "=", "nn", ".", "BatchNorm2d", "(", "output_dims", ",", "momentum", "=", "bn_decay", ")", "\n", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "_conv2d", ".", "weight", ")", "\n", "\n", "if", "use_bias", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "_conv2d", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.Conv2D.forward": [[50, 66], ["gman.Conv2D.permute", "gman.Conv2D._conv2d", "gman.Conv2D._batch_norm", "gman.Conv2D.permute", "gman.Conv2D._activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of the 2D-convolution block.\n\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Input tensor, with shape (batch_size, num_his, num_nodes, input_dims).\n\n        Return types:\n            * **X** (PyTorch Float Tensor) - Output tensor, with shape (batch_size, num_his, num_nodes, output_dims).\n        \"\"\"", "\n", "X", "=", "X", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", "X", "=", "self", ".", "_conv2d", "(", "X", ")", "\n", "X", "=", "self", ".", "_batch_norm", "(", "X", ")", "\n", "if", "self", ".", "_activation", "is", "not", "None", ":", "\n", "            ", "X", "=", "self", ".", "_activation", "(", "X", ")", "\n", "", "return", "X", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.FullyConnected.__init__": [[81, 108], ["torch.Module.__init__", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "type", "gman.Conv2D", "zip"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_dims", ":", "Union", "[", "int", ",", "list", "]", ",", "\n", "units", ":", "Union", "[", "int", ",", "list", "]", ",", "\n", "activations", ":", "Union", "[", "Callable", "[", "[", "torch", ".", "FloatTensor", "]", ",", "torch", ".", "FloatTensor", "]", ",", "list", "]", ",", "\n", "bn_decay", ":", "float", ",", "\n", "use_bias", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "FullyConnected", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "units", ",", "int", ")", ":", "\n", "            ", "units", "=", "[", "units", "]", "\n", "input_dims", "=", "[", "input_dims", "]", "\n", "activations", "=", "[", "activations", "]", "\n", "", "assert", "type", "(", "units", ")", "==", "list", "\n", "self", ".", "_conv2ds", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "Conv2D", "(", "\n", "input_dims", "=", "input_dim", ",", "\n", "output_dims", "=", "num_unit", ",", "\n", "kernel_size", "=", "[", "1", ",", "1", "]", ",", "\n", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "use_bias", "=", "use_bias", ",", "\n", "activation", "=", "activation", ",", "\n", "bn_decay", "=", "bn_decay", ",", "\n", ")", "\n", "for", "input_dim", ",", "num_unit", ",", "activation", "in", "zip", "(", "\n", "input_dims", ",", "units", ",", "activations", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.FullyConnected.forward": [[112, 125], ["conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of the fully-connected layer.\n\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Input tensor, with shape (batch_size, num_his, num_nodes, 1).\n\n        Return types:\n            * **X** (PyTorch Float Tensor) - Output tensor, with shape (batch_size, num_his, num_nodes, units[-1]).\n        \"\"\"", "\n", "for", "conv", "in", "self", ".", "_conv2ds", ":", "\n", "            ", "X", "=", "conv", "(", "X", ")", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.SpatioTemporalEmbedding.__init__": [[139, 157], ["torch.Module.__init__", "gman.FullyConnected", "gman.FullyConnected"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["def", "__init__", "(", "\n", "self", ",", "D", ":", "int", ",", "bn_decay", ":", "float", ",", "steps_per_day", ":", "int", ",", "use_bias", ":", "bool", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_fully_connected_se", "=", "FullyConnected", "(", "\n", "input_dims", "=", "[", "D", ",", "D", "]", ",", "\n", "units", "=", "[", "D", ",", "D", "]", ",", "\n", "activations", "=", "[", "F", ".", "relu", ",", "None", "]", ",", "\n", "bn_decay", "=", "bn_decay", ",", "\n", "use_bias", "=", "use_bias", ",", "\n", ")", "\n", "\n", "self", ".", "_fully_connected_te", "=", "FullyConnected", "(", "\n", "input_dims", "=", "[", "steps_per_day", "+", "7", ",", "D", "]", ",", "\n", "units", "=", "[", "D", ",", "D", "]", ",", "\n", "activations", "=", "[", "F", ".", "relu", ",", "None", "]", ",", "\n", "bn_decay", "=", "bn_decay", ",", "\n", "use_bias", "=", "use_bias", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.SpatioTemporalEmbedding.forward": [[159, 186], ["gman.SpatioTemporalEmbedding.unsqueeze().unsqueeze", "gman.SpatioTemporalEmbedding._fully_connected_se", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "torch.empty().to", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gman.SpatioTemporalEmbedding.unsqueeze", "gman.SpatioTemporalEmbedding._fully_connected_te", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.one_hot", "torch.one_hot", "gman.SpatioTemporalEmbedding.unsqueeze", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "[].to", "[].to"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "SE", ":", "torch", ".", "FloatTensor", ",", "TE", ":", "torch", ".", "FloatTensor", ",", "T", ":", "int", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of the spatial-temporal embedding.\n\n        Arg types:\n            * **SE** (PyTorch Float Tensor) - Spatial embedding, with shape (num_nodes, D).\n            * **TE** (Pytorch Float Tensor) - Temporal embedding, with shape (batch_size, num_his + num_pred, 2).(dayofweek, timeofday)\n            * **T** (int) - Number of time steps in one day.\n\n        Return types:\n            * **output** (PyTorch Float Tensor) - Spatial-temporal embedding, with shape (batch_size, num_his + num_pred, num_nodes, D).\n        \"\"\"", "\n", "SE", "=", "SE", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "SE", "=", "self", ".", "_fully_connected_se", "(", "SE", ")", "\n", "dayofweek", "=", "torch", ".", "empty", "(", "TE", ".", "shape", "[", "0", "]", ",", "TE", ".", "shape", "[", "1", "]", ",", "7", ")", ".", "to", "(", "SE", ".", "device", ")", "\n", "timeofday", "=", "torch", ".", "empty", "(", "TE", ".", "shape", "[", "0", "]", ",", "TE", ".", "shape", "[", "1", "]", ",", "T", ")", ".", "to", "(", "SE", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "TE", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "dayofweek", "[", "i", "]", "=", "F", ".", "one_hot", "(", "TE", "[", "...", ",", "0", "]", "[", "i", "]", ".", "to", "(", "torch", ".", "int64", ")", "%", "7", ",", "7", ")", "\n", "", "for", "j", "in", "range", "(", "TE", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "timeofday", "[", "j", "]", "=", "F", ".", "one_hot", "(", "TE", "[", "...", ",", "1", "]", "[", "j", "]", ".", "to", "(", "torch", ".", "int64", ")", "%", "T", ",", "T", ")", "\n", "", "TE", "=", "torch", ".", "cat", "(", "(", "dayofweek", ",", "timeofday", ")", ",", "dim", "=", "-", "1", ")", "\n", "TE", "=", "TE", ".", "unsqueeze", "(", "dim", "=", "2", ")", "\n", "TE", "=", "self", ".", "_fully_connected_te", "(", "TE", ")", "\n", "del", "dayofweek", ",", "timeofday", "\n", "return", "SE", "+", "TE", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.SpatialAttention.__init__": [[199, 215], ["torch.Module.__init__", "gman.FullyConnected", "gman.FullyConnected", "gman.FullyConnected", "gman.FullyConnected"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["def", "__init__", "(", "self", ",", "K", ":", "int", ",", "d", ":", "int", ",", "bn_decay", ":", "float", ")", ":", "\n", "        ", "super", "(", "SpatialAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "D", "=", "K", "*", "d", "\n", "self", ".", "_d", "=", "d", "\n", "self", ".", "_K", "=", "K", "\n", "self", ".", "_fully_connected_q", "=", "FullyConnected", "(", "\n", "input_dims", "=", "2", "*", "D", ",", "units", "=", "D", ",", "activations", "=", "F", ".", "relu", ",", "bn_decay", "=", "bn_decay", "\n", ")", "\n", "self", ".", "_fully_connected_k", "=", "FullyConnected", "(", "\n", "input_dims", "=", "2", "*", "D", ",", "units", "=", "D", ",", "activations", "=", "F", ".", "relu", ",", "bn_decay", "=", "bn_decay", "\n", ")", "\n", "self", ".", "_fully_connected_v", "=", "FullyConnected", "(", "\n", "input_dims", "=", "2", "*", "D", ",", "units", "=", "D", ",", "activations", "=", "F", ".", "relu", ",", "bn_decay", "=", "bn_decay", "\n", ")", "\n", "self", ".", "_fully_connected", "=", "FullyConnected", "(", "\n", "input_dims", "=", "D", ",", "units", "=", "D", ",", "activations", "=", "F", ".", "relu", ",", "bn_decay", "=", "bn_decay", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.SpatialAttention.forward": [[217, 246], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gman.SpatialAttention._fully_connected_q", "gman.SpatialAttention._fully_connected_k", "gman.SpatialAttention._fully_connected_v", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gman.SpatialAttention._fully_connected", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "STE", ":", "torch", ".", "FloatTensor", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of the spatial attention mechanism.\n\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Input sequence, with shape (batch_size, num_step, num_nodes, K*d).\n            * **STE** (Pytorch Float Tensor) - Spatial-temporal embedding, with shape (batch_size, num_step, num_nodes, K*d).\n\n        Return types:\n            * **X** (PyTorch Float Tensor) - Spatial attention scores, with shape (batch_size, num_step, num_nodes, K*d).\n        \"\"\"", "\n", "batch_size", "=", "X", ".", "shape", "[", "0", "]", "\n", "X", "=", "torch", ".", "cat", "(", "(", "X", ",", "STE", ")", ",", "dim", "=", "-", "1", ")", "\n", "query", "=", "self", ".", "_fully_connected_q", "(", "X", ")", "\n", "key", "=", "self", ".", "_fully_connected_k", "(", "X", ")", "\n", "value", "=", "self", ".", "_fully_connected_v", "(", "X", ")", "\n", "query", "=", "torch", ".", "cat", "(", "torch", ".", "split", "(", "query", ",", "self", ".", "_K", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "0", ")", "\n", "key", "=", "torch", ".", "cat", "(", "torch", ".", "split", "(", "key", ",", "self", ".", "_K", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "0", ")", "\n", "value", "=", "torch", ".", "cat", "(", "torch", ".", "split", "(", "value", ",", "self", ".", "_K", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "0", ")", "\n", "attention", "=", "torch", ".", "matmul", "(", "query", ",", "key", ".", "transpose", "(", "2", ",", "3", ")", ")", "\n", "attention", "/=", "self", ".", "_d", "**", "0.5", "\n", "attention", "=", "F", ".", "softmax", "(", "attention", ",", "dim", "=", "-", "1", ")", "\n", "X", "=", "torch", ".", "matmul", "(", "attention", ",", "value", ")", "\n", "X", "=", "torch", ".", "cat", "(", "torch", ".", "split", "(", "X", ",", "batch_size", ",", "dim", "=", "0", ")", ",", "dim", "=", "-", "1", ")", "\n", "X", "=", "self", ".", "_fully_connected", "(", "X", ")", "\n", "del", "query", ",", "key", ",", "value", ",", "attention", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.TemporalAttention.__init__": [[260, 277], ["torch.Module.__init__", "gman.FullyConnected", "gman.FullyConnected", "gman.FullyConnected", "gman.FullyConnected"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["def", "__init__", "(", "self", ",", "K", ":", "int", ",", "d", ":", "int", ",", "bn_decay", ":", "float", ",", "mask", ":", "bool", ")", ":", "\n", "        ", "super", "(", "TemporalAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "D", "=", "K", "*", "d", "\n", "self", ".", "_d", "=", "d", "\n", "self", ".", "_K", "=", "K", "\n", "self", ".", "_mask", "=", "mask", "\n", "self", ".", "_fully_connected_q", "=", "FullyConnected", "(", "\n", "input_dims", "=", "2", "*", "D", ",", "units", "=", "D", ",", "activations", "=", "F", ".", "relu", ",", "bn_decay", "=", "bn_decay", "\n", ")", "\n", "self", ".", "_fully_connected_k", "=", "FullyConnected", "(", "\n", "input_dims", "=", "2", "*", "D", ",", "units", "=", "D", ",", "activations", "=", "F", ".", "relu", ",", "bn_decay", "=", "bn_decay", "\n", ")", "\n", "self", ".", "_fully_connected_v", "=", "FullyConnected", "(", "\n", "input_dims", "=", "2", "*", "D", ",", "units", "=", "D", ",", "activations", "=", "F", ".", "relu", ",", "bn_decay", "=", "bn_decay", "\n", ")", "\n", "self", ".", "_fully_connected", "=", "FullyConnected", "(", "\n", "input_dims", "=", "D", ",", "units", "=", "D", ",", "activations", "=", "F", ".", "relu", ",", "bn_decay", "=", "bn_decay", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.TemporalAttention.forward": [[279, 323], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gman.TemporalAttention._fully_connected_q", "gman.TemporalAttention._fully_connected_k", "gman.TemporalAttention._fully_connected_v", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "query.permute.permute.permute", "key.permute.permute.permute", "value.permute.permute.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "gman.TemporalAttention.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gman.TemporalAttention._fully_connected", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "mask.to.to.repeat", "mask.to.to.to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.FloatTensor().to", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "STE", ":", "torch", ".", "FloatTensor", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of the temporal attention mechanism.\n\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Input sequence, with shape (batch_size, num_step, num_nodes, K*d).\n            * **STE** (Pytorch Float Tensor) - Spatial-temporal embedding, with shape (batch_size, num_step, num_nodes, K*d).\n\n        Return types:\n            * **X** (PyTorch Float Tensor) - Temporal attention scores, with shape (batch_size, num_step, num_nodes, K*d).\n        \"\"\"", "\n", "batch_size", "=", "X", ".", "shape", "[", "0", "]", "\n", "X", "=", "torch", ".", "cat", "(", "(", "X", ",", "STE", ")", ",", "dim", "=", "-", "1", ")", "\n", "query", "=", "self", ".", "_fully_connected_q", "(", "X", ")", "\n", "key", "=", "self", ".", "_fully_connected_k", "(", "X", ")", "\n", "value", "=", "self", ".", "_fully_connected_v", "(", "X", ")", "\n", "query", "=", "torch", ".", "cat", "(", "torch", ".", "split", "(", "query", ",", "self", ".", "_K", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "0", ")", "\n", "key", "=", "torch", ".", "cat", "(", "torch", ".", "split", "(", "key", ",", "self", ".", "_K", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "0", ")", "\n", "value", "=", "torch", ".", "cat", "(", "torch", ".", "split", "(", "value", ",", "self", ".", "_K", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "0", ")", "\n", "query", "=", "query", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "key", "=", "key", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "value", "=", "value", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "attention", "=", "torch", ".", "matmul", "(", "query", ",", "key", ")", "\n", "attention", "/=", "self", ".", "_d", "**", "0.5", "\n", "if", "self", ".", "_mask", ":", "\n", "            ", "batch_size", "=", "X", ".", "shape", "[", "0", "]", "\n", "num_step", "=", "X", ".", "shape", "[", "1", "]", "\n", "num_nodes", "=", "X", ".", "shape", "[", "2", "]", "\n", "mask", "=", "torch", ".", "ones", "(", "num_step", ",", "num_step", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "mask", "=", "torch", ".", "tril", "(", "mask", ")", "\n", "mask", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "mask", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "\n", "mask", "=", "mask", ".", "repeat", "(", "self", ".", "_K", "*", "batch_size", ",", "num_nodes", ",", "1", ",", "1", ")", "\n", "mask", "=", "mask", ".", "to", "(", "torch", ".", "bool", ")", "\n", "condition", "=", "torch", ".", "FloatTensor", "(", "[", "-", "(", "2", "**", "15", ")", "+", "1", "]", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "attention", "=", "torch", ".", "where", "(", "mask", ",", "attention", ",", "condition", ")", "\n", "", "attention", "=", "F", ".", "softmax", "(", "attention", ",", "dim", "=", "-", "1", ")", "\n", "X", "=", "torch", ".", "matmul", "(", "attention", ",", "value", ")", "\n", "X", "=", "X", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "X", "=", "torch", ".", "cat", "(", "torch", ".", "split", "(", "X", ",", "batch_size", ",", "dim", "=", "0", ")", ",", "dim", "=", "-", "1", ")", "\n", "X", "=", "self", ".", "_fully_connected", "(", "X", ")", "\n", "del", "query", ",", "key", ",", "value", ",", "attention", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.GatedFusion.__init__": [[335, 348], ["torch.Module.__init__", "gman.FullyConnected", "gman.FullyConnected", "gman.FullyConnected"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["def", "__init__", "(", "self", ",", "D", ":", "int", ",", "bn_decay", ":", "float", ")", ":", "\n", "        ", "super", "(", "GatedFusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_fully_connected_xs", "=", "FullyConnected", "(", "\n", "input_dims", "=", "D", ",", "units", "=", "D", ",", "activations", "=", "None", ",", "bn_decay", "=", "bn_decay", ",", "use_bias", "=", "False", "\n", ")", "\n", "self", ".", "_fully_connected_xt", "=", "FullyConnected", "(", "\n", "input_dims", "=", "D", ",", "units", "=", "D", ",", "activations", "=", "None", ",", "bn_decay", "=", "bn_decay", ",", "use_bias", "=", "True", "\n", ")", "\n", "self", ".", "_fully_connected_h", "=", "FullyConnected", "(", "\n", "input_dims", "=", "[", "D", ",", "D", "]", ",", "\n", "units", "=", "[", "D", ",", "D", "]", ",", "\n", "activations", "=", "[", "F", ".", "relu", ",", "None", "]", ",", "\n", "bn_decay", "=", "bn_decay", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.GatedFusion.forward": [[350, 370], ["gman.GatedFusion._fully_connected_xs", "gman.GatedFusion._fully_connected_xt", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "gman.GatedFusion._fully_connected_h", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "HS", ":", "torch", ".", "FloatTensor", ",", "HT", ":", "torch", ".", "FloatTensor", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of the gated fusion mechanism.\n\n        Arg types:\n            * **HS** (PyTorch Float Tensor) - Spatial attention scores, with shape (batch_size, num_step, num_nodes, D).\n            * **HT** (Pytorch Float Tensor) - Temporal attention scores, with shape (batch_size, num_step, num_nodes, D).\n\n        Return types:\n            * **H** (PyTorch Float Tensor) - Spatial-temporal attention scores, with shape (batch_size, num_step, num_nodes, D).\n        \"\"\"", "\n", "XS", "=", "self", ".", "_fully_connected_xs", "(", "HS", ")", "\n", "XT", "=", "self", ".", "_fully_connected_xt", "(", "HT", ")", "\n", "z", "=", "torch", ".", "sigmoid", "(", "torch", ".", "add", "(", "XS", ",", "XT", ")", ")", "\n", "H", "=", "torch", ".", "add", "(", "torch", ".", "mul", "(", "z", ",", "HS", ")", ",", "torch", ".", "mul", "(", "1", "-", "z", ",", "HT", ")", ")", "\n", "H", "=", "self", ".", "_fully_connected_h", "(", "H", ")", "\n", "del", "XS", ",", "XT", ",", "z", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.SpatioTemporalAttention.__init__": [[384, 389], ["torch.Module.__init__", "gman.SpatialAttention", "gman.TemporalAttention", "gman.GatedFusion"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["def", "__init__", "(", "self", ",", "K", ":", "int", ",", "d", ":", "int", ",", "bn_decay", ":", "float", ",", "mask", ":", "bool", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_spatial_attention", "=", "SpatialAttention", "(", "K", ",", "d", ",", "bn_decay", ")", "\n", "self", ".", "_temporal_attention", "=", "TemporalAttention", "(", "K", ",", "d", ",", "bn_decay", ",", "mask", "=", "mask", ")", "\n", "self", ".", "_gated_fusion", "=", "GatedFusion", "(", "K", "*", "d", ",", "bn_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.SpatioTemporalAttention.forward": [[390, 409], ["gman.SpatioTemporalAttention._spatial_attention", "gman.SpatioTemporalAttention._temporal_attention", "gman.SpatioTemporalAttention._gated_fusion", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "STE", ":", "torch", ".", "FloatTensor", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of the spatial-temporal attention block.\n\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Input sequence, with shape (batch_size, num_step, num_nodes, K*d).\n            * **STE** (Pytorch Float Tensor) - Spatial-temporal embedding, with shape (batch_size, num_step, num_nodes, K*d).\n\n        Return types:\n            * **X** (PyTorch Float Tensor) - Attention scores, with shape (batch_size, num_step, num_nodes, K*d).\n        \"\"\"", "\n", "HS", "=", "self", ".", "_spatial_attention", "(", "X", ",", "STE", ")", "\n", "HT", "=", "self", ".", "_temporal_attention", "(", "X", ",", "STE", ")", "\n", "H", "=", "self", ".", "_gated_fusion", "(", "HS", ",", "HT", ")", "\n", "del", "HS", ",", "HT", "\n", "X", "=", "torch", ".", "add", "(", "X", ",", "H", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.TransformAttention.__init__": [[422, 438], ["torch.Module.__init__", "gman.FullyConnected", "gman.FullyConnected", "gman.FullyConnected", "gman.FullyConnected"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["def", "__init__", "(", "self", ",", "K", ":", "int", ",", "d", ":", "int", ",", "bn_decay", ":", "float", ")", ":", "\n", "        ", "super", "(", "TransformAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "D", "=", "K", "*", "d", "\n", "self", ".", "_K", "=", "K", "\n", "self", ".", "_d", "=", "d", "\n", "self", ".", "_fully_connected_q", "=", "FullyConnected", "(", "\n", "input_dims", "=", "D", ",", "units", "=", "D", ",", "activations", "=", "F", ".", "relu", ",", "bn_decay", "=", "bn_decay", "\n", ")", "\n", "self", ".", "_fully_connected_k", "=", "FullyConnected", "(", "\n", "input_dims", "=", "D", ",", "units", "=", "D", ",", "activations", "=", "F", ".", "relu", ",", "bn_decay", "=", "bn_decay", "\n", ")", "\n", "self", ".", "_fully_connected_v", "=", "FullyConnected", "(", "\n", "input_dims", "=", "D", ",", "units", "=", "D", ",", "activations", "=", "F", ".", "relu", ",", "bn_decay", "=", "bn_decay", "\n", ")", "\n", "self", ".", "_fully_connected", "=", "FullyConnected", "(", "\n", "input_dims", "=", "D", ",", "units", "=", "D", ",", "activations", "=", "F", ".", "relu", ",", "bn_decay", "=", "bn_decay", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.TransformAttention.forward": [[440, 478], ["gman.TransformAttention._fully_connected_q", "gman.TransformAttention._fully_connected_k", "gman.TransformAttention._fully_connected_v", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "query.permute.permute.permute", "key.permute.permute.permute", "value.permute.permute.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "gman.TransformAttention.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gman.TransformAttention._fully_connected", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "STE_his", ":", "torch", ".", "FloatTensor", ",", "\n", "STE_pred", ":", "torch", ".", "FloatTensor", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of the transform attention layer.\n\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Input sequence, with shape (batch_size, num_his, num_nodes, K*d).\n            * **STE_his** (Pytorch Float Tensor) - Spatial-temporal embedding for history,\n            with shape (batch_size, num_his, num_nodes, K*d).\n            * **STE_pred** (Pytorch Float Tensor) - Spatial-temporal embedding for prediction,\n            with shape (batch_size, num_pred, num_nodes, K*d).\n\n        Return types:\n            * **X** (PyTorch Float Tensor) - Output sequence for prediction, with shape (batch_size, num_pred, num_nodes, K*d).\n        \"\"\"", "\n", "batch_size", "=", "X", ".", "shape", "[", "0", "]", "\n", "query", "=", "self", ".", "_fully_connected_q", "(", "STE_pred", ")", "\n", "key", "=", "self", ".", "_fully_connected_k", "(", "STE_his", ")", "\n", "value", "=", "self", ".", "_fully_connected_v", "(", "X", ")", "\n", "query", "=", "torch", ".", "cat", "(", "torch", ".", "split", "(", "query", ",", "self", ".", "_K", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "0", ")", "\n", "key", "=", "torch", ".", "cat", "(", "torch", ".", "split", "(", "key", ",", "self", ".", "_K", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "0", ")", "\n", "value", "=", "torch", ".", "cat", "(", "torch", ".", "split", "(", "value", ",", "self", ".", "_K", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "0", ")", "\n", "query", "=", "query", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "key", "=", "key", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "value", "=", "value", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "attention", "=", "torch", ".", "matmul", "(", "query", ",", "key", ")", "\n", "attention", "/=", "self", ".", "_d", "**", "0.5", "\n", "attention", "=", "F", ".", "softmax", "(", "attention", ",", "dim", "=", "-", "1", ")", "\n", "X", "=", "torch", ".", "matmul", "(", "attention", ",", "value", ")", "\n", "X", "=", "X", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "X", "=", "torch", ".", "cat", "(", "torch", ".", "split", "(", "X", ",", "batch_size", ",", "dim", "=", "0", ")", ",", "dim", "=", "-", "1", ")", "\n", "X", "=", "self", ".", "_fully_connected", "(", "X", ")", "\n", "del", "query", ",", "key", ",", "value", ",", "attention", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.GMAN.__init__": [[496, 532], ["torch.Module.__init__", "gman.SpatioTemporalEmbedding", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "gman.TransformAttention", "gman.FullyConnected", "gman.FullyConnected", "gman.SpatioTemporalAttention", "gman.SpatioTemporalAttention", "range", "range"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "L", ":", "int", ",", "\n", "K", ":", "int", ",", "\n", "d", ":", "int", ",", "\n", "num_his", ":", "int", ",", "\n", "bn_decay", ":", "float", ",", "\n", "steps_per_day", ":", "int", ",", "\n", "use_bias", ":", "bool", ",", "\n", "mask", ":", "bool", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GMAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "D", "=", "K", "*", "d", "\n", "self", ".", "_num_his", "=", "num_his", "\n", "self", ".", "_steps_per_day", "=", "steps_per_day", "\n", "self", ".", "_st_embedding", "=", "SpatioTemporalEmbedding", "(", "\n", "D", ",", "bn_decay", ",", "steps_per_day", ",", "use_bias", "\n", ")", "\n", "self", ".", "_st_att_block1", "=", "nn", ".", "ModuleList", "(", "\n", "[", "SpatioTemporalAttention", "(", "K", ",", "d", ",", "bn_decay", ",", "mask", ")", "for", "_", "in", "range", "(", "L", ")", "]", "\n", ")", "\n", "self", ".", "_st_att_block2", "=", "nn", ".", "ModuleList", "(", "\n", "[", "SpatioTemporalAttention", "(", "K", ",", "d", ",", "bn_decay", ",", "mask", ")", "for", "_", "in", "range", "(", "L", ")", "]", "\n", ")", "\n", "self", ".", "_transform_attention", "=", "TransformAttention", "(", "K", ",", "d", ",", "bn_decay", ")", "\n", "self", ".", "_fully_connected_1", "=", "FullyConnected", "(", "\n", "input_dims", "=", "[", "1", ",", "D", "]", ",", "\n", "units", "=", "[", "D", ",", "D", "]", ",", "\n", "activations", "=", "[", "F", ".", "relu", ",", "None", "]", ",", "\n", "bn_decay", "=", "bn_decay", ",", "\n", ")", "\n", "self", ".", "_fully_connected_2", "=", "FullyConnected", "(", "\n", "input_dims", "=", "[", "D", ",", "D", "]", ",", "\n", "units", "=", "[", "D", ",", "1", "]", ",", "\n", "activations", "=", "[", "F", ".", "relu", ",", "None", "]", ",", "\n", "bn_decay", "=", "bn_decay", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.gman.GMAN.forward": [[534, 560], ["torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "gman.GMAN._fully_connected_1", "gman.GMAN._st_embedding", "gman.GMAN._transform_attention", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "net", "net", "gman.GMAN._fully_connected_2"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "SE", ":", "torch", ".", "FloatTensor", ",", "TE", ":", "torch", ".", "FloatTensor", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of GMAN.\n\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Input sequence, with shape (batch_size, num_hist, num of nodes).\n            * **SE** (Pytorch Float Tensor) - Spatial embedding, with shape (numbed of nodes, K * d).\n            * **TE** (Pytorch Float Tensor) - Temporal embedding, with shape (batch_size, num_his + num_pred, 2).\n\n        Return types:\n            * **X** (PyTorch Float Tensor) - Output sequence for prediction, with shape (batch_size, num_pred, num of nodes).\n        \"\"\"", "\n", "X", "=", "torch", ".", "unsqueeze", "(", "X", ",", "-", "1", ")", "\n", "X", "=", "self", ".", "_fully_connected_1", "(", "X", ")", "\n", "STE", "=", "self", ".", "_st_embedding", "(", "SE", ",", "TE", ",", "self", ".", "_steps_per_day", ")", "\n", "STE_his", "=", "STE", "[", ":", ",", ":", "self", ".", "_num_his", "]", "\n", "STE_pred", "=", "STE", "[", ":", ",", "self", ".", "_num_his", ":", "]", "\n", "for", "net", "in", "self", ".", "_st_att_block1", ":", "\n", "            ", "X", "=", "net", "(", "X", ",", "STE_his", ")", "\n", "", "X", "=", "self", ".", "_transform_attention", "(", "X", ",", "STE_his", ",", "STE_pred", ")", "\n", "for", "net", "in", "self", ".", "_st_att_block2", ":", "\n", "            ", "X", "=", "net", "(", "X", ",", "STE_pred", ")", "\n", "", "X", "=", "torch", ".", "squeeze", "(", "self", ".", "_fully_connected_2", "(", "X", ")", ",", "3", ")", "\n", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.GraphAAGCN.__init__": [[24, 28], ["tsagcn.GraphAAGCN.get_spatial_graph"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.GraphAAGCN.get_spatial_graph"], ["def", "__init__", "(", "self", ",", "edge_index", ":", "list", ",", "num_nodes", ":", "int", ")", ":", "\n", "        ", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "edge_index", "=", "edge_index", "\n", "self", ".", "A", "=", "self", ".", "get_spatial_graph", "(", "self", ".", "num_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.GraphAAGCN.get_spatial_graph": [[29, 37], ["torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze.transpose", "torch.squeeze.transpose", "torch.squeeze.transpose", "torch.normalize", "torch.normalize", "torch.normalize", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch_geometric.utils.to_dense_adj.to_dense_adj"], "methods", ["None"], ["", "def", "get_spatial_graph", "(", "self", ",", "num_nodes", ")", ":", "\n", "        ", "self_mat", "=", "torch", ".", "eye", "(", "num_nodes", ")", "\n", "inward_mat", "=", "torch", ".", "squeeze", "(", "to_dense_adj", "(", "self", ".", "edge_index", ")", ")", "\n", "inward_mat_norm", "=", "F", ".", "normalize", "(", "inward_mat", ",", "dim", "=", "0", ",", "p", "=", "1", ")", "\n", "outward_mat", "=", "inward_mat", ".", "transpose", "(", "0", ",", "1", ")", "\n", "outward_mat_norm", "=", "F", ".", "normalize", "(", "outward_mat", ",", "dim", "=", "0", ",", "p", "=", "1", ")", "\n", "adj_mat", "=", "torch", ".", "stack", "(", "(", "self_mat", ",", "inward_mat_norm", ",", "outward_mat_norm", ")", ")", "\n", "return", "adj_mat", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitTCN.__init__": [[52, 69], ["torch.Module.__init__", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "tsagcn.UnitTCN._conv_init", "tsagcn.UnitTCN._bn_init"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._conv_init", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._bn_init"], ["def", "__init__", "(", "\n", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "kernel_size", ":", "int", "=", "9", ",", "stride", ":", "int", "=", "1", "\n", ")", ":", "\n", "        ", "super", "(", "UnitTCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pad", "=", "int", "(", "(", "kernel_size", "-", "1", ")", "/", "2", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "(", "kernel_size", ",", "1", ")", ",", "\n", "padding", "=", "(", "pad", ",", "0", ")", ",", "\n", "stride", "=", "(", "stride", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "_conv_init", "(", "self", ".", "conv", ")", "\n", "self", ".", "_bn_init", "(", "self", ".", "bn", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitTCN._bn_init": [[70, 73], ["torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_bn_init", "(", "self", ",", "bn", ",", "scale", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "bn", ".", "weight", ",", "scale", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "bn", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitTCN._conv_init": [[74, 77], ["torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_conv_init", "(", "self", ",", "conv", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "conv", ".", "weight", ",", "mode", "=", "\"fan_out\"", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "conv", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitTCN.forward": [[78, 81], ["tsagcn.UnitTCN.bn", "tsagcn.UnitTCN.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN.__init__": [[101, 148], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.ReLU", "torch.ReLU", "torch.ReLU", "tsagcn.UnitGCN._init_conv_bn", "tsagcn.UnitGCN.conv_d.append", "tsagcn.UnitGCN._init_adaptive_layers", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "tsagcn.UnitGCN._init_attention_layers", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._init_conv_bn", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._init_adaptive_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._init_attention_layers"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "A", ":", "torch", ".", "FloatTensor", ",", "\n", "coff_embedding", ":", "int", "=", "4", ",", "\n", "num_subset", ":", "int", "=", "3", ",", "\n", "adaptive", ":", "bool", "=", "True", ",", "\n", "attention", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "UnitGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inter_c", "=", "out_channels", "//", "coff_embedding", "\n", "self", ".", "out_c", "=", "out_channels", "\n", "self", ".", "in_c", "=", "in_channels", "\n", "self", ".", "num_subset", "=", "num_subset", "\n", "self", ".", "A", "=", "A", "\n", "self", ".", "num_jpts", "=", "A", ".", "shape", "[", "-", "1", "]", "\n", "self", ".", "attention", "=", "attention", "\n", "self", ".", "adaptive", "=", "adaptive", "\n", "\n", "self", ".", "conv_d", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_subset", ")", ":", "\n", "            ", "self", ".", "conv_d", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ")", ")", "\n", "\n", "", "if", "self", ".", "adaptive", ":", "\n", "            ", "self", ".", "_init_adaptive_layers", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "A", "=", "Variable", "(", "self", ".", "A", ",", "requires_grad", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "attention", ":", "\n", "            ", "self", ".", "_init_attention_layers", "(", ")", "\n", "\n", "", "if", "in_channels", "!=", "out_channels", ":", "\n", "            ", "self", ".", "down", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "1", ")", ",", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "down", "=", "lambda", "x", ":", "x", "\n", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "soft", "=", "nn", ".", "Softmax", "(", "-", "2", ")", "\n", "self", ".", "tan", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "_init_conv_bn", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._bn_init": [[149, 152], ["torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_bn_init", "(", "self", ",", "bn", ",", "scale", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "bn", ".", "weight", ",", "scale", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "bn", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._conv_init": [[153, 156], ["torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_conv_init", "(", "self", ",", "conv", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "conv", ".", "weight", ",", "mode", "=", "\"fan_out\"", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "conv", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._conv_branch_init": [[157, 164], ["weight.size", "weight.size", "weight.size", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "math.sqrt"], "methods", ["None"], ["", "def", "_conv_branch_init", "(", "self", ",", "conv", ",", "branches", ")", ":", "\n", "        ", "weight", "=", "conv", ".", "weight", "\n", "n", "=", "weight", ".", "size", "(", "0", ")", "\n", "k1", "=", "weight", ".", "size", "(", "1", ")", "\n", "k2", "=", "weight", ".", "size", "(", "2", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "weight", ",", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "(", "n", "*", "k1", "*", "k2", "*", "branches", ")", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "conv", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._init_conv_bn": [[165, 175], ["tsagcn.UnitGCN.modules", "tsagcn.UnitGCN._bn_init", "range", "isinstance", "tsagcn.UnitGCN._conv_branch_init", "tsagcn.UnitGCN._conv_init", "isinstance", "tsagcn.UnitGCN._bn_init"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._bn_init", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._conv_branch_init", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._conv_init", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._bn_init"], ["", "def", "_init_conv_bn", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "self", ".", "_conv_init", "(", "m", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "self", ".", "_bn_init", "(", "m", ",", "1", ")", "\n", "", "", "self", ".", "_bn_init", "(", "self", ".", "bn", ",", "1e-6", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_subset", ")", ":", "\n", "            ", "self", ".", "_conv_branch_init", "(", "self", ".", "conv_d", "[", "i", "]", ",", "self", ".", "num_subset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._init_attention_layers": [[176, 197], ["torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "_init_attention_layers", "(", "self", ")", ":", "\n", "# temporal attention", "\n", "        ", "self", ".", "conv_ta", "=", "nn", ".", "Conv1d", "(", "self", ".", "out_c", ",", "1", ",", "9", ",", "padding", "=", "4", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv_ta", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv_ta", ".", "bias", ",", "0", ")", "\n", "\n", "# s attention", "\n", "ker_jpt", "=", "self", ".", "num_jpts", "-", "1", "if", "not", "self", ".", "num_jpts", "%", "2", "else", "self", ".", "num_jpts", "\n", "pad", "=", "(", "ker_jpt", "-", "1", ")", "//", "2", "\n", "self", ".", "conv_sa", "=", "nn", ".", "Conv1d", "(", "self", ".", "out_c", ",", "1", ",", "ker_jpt", ",", "padding", "=", "pad", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "conv_sa", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv_sa", ".", "bias", ",", "0", ")", "\n", "\n", "# channel attention", "\n", "rr", "=", "2", "\n", "self", ".", "fc1c", "=", "nn", ".", "Linear", "(", "self", ".", "out_c", ",", "self", ".", "out_c", "//", "rr", ")", "\n", "self", ".", "fc2c", "=", "nn", ".", "Linear", "(", "self", ".", "out_c", "//", "rr", ",", "self", ".", "out_c", ")", "\n", "nn", ".", "init", ".", "kaiming_normal_", "(", "self", ".", "fc1c", ".", "weight", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc1c", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc2c", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "fc2c", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._init_adaptive_layers": [[198, 206], ["torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "tsagcn.UnitGCN.conv_a.append", "tsagcn.UnitGCN.conv_b.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "_init_adaptive_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "PA", "=", "nn", ".", "Parameter", "(", "self", ".", "A", ")", "\n", "self", ".", "alpha", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv_a", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "conv_b", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_subset", ")", ":", "\n", "            ", "self", ".", "conv_a", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "in_c", ",", "self", ".", "inter_c", ",", "1", ")", ")", "\n", "self", ".", "conv_b", ".", "append", "(", "nn", ".", "Conv2d", "(", "self", ".", "in_c", ",", "self", ".", "inter_c", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._attentive_forward": [[207, 225], ["y.mean", "tsagcn.UnitGCN.sigmoid", "y.mean", "tsagcn.UnitGCN.sigmoid", "y.mean().mean", "tsagcn.UnitGCN.relu", "tsagcn.UnitGCN.sigmoid", "tsagcn.UnitGCN.conv_sa", "tsagcn.UnitGCN.conv_ta", "tsagcn.UnitGCN.fc1c", "tsagcn.UnitGCN.fc2c", "tsagcn.UnitGCN.unsqueeze", "tsagcn.UnitGCN.unsqueeze", "y.mean", "tsagcn.UnitGCN.unsqueeze().unsqueeze", "tsagcn.UnitGCN.unsqueeze"], "methods", ["None"], ["", "", "def", "_attentive_forward", "(", "self", ",", "y", ")", ":", "\n", "# spatial attention", "\n", "        ", "se", "=", "y", ".", "mean", "(", "-", "2", ")", "# N C V", "\n", "se1", "=", "self", ".", "sigmoid", "(", "self", ".", "conv_sa", "(", "se", ")", ")", "\n", "y", "=", "y", "*", "se1", ".", "unsqueeze", "(", "-", "2", ")", "+", "y", "\n", "\n", "# temporal attention", "\n", "se", "=", "y", ".", "mean", "(", "-", "1", ")", "\n", "se1", "=", "self", ".", "sigmoid", "(", "self", ".", "conv_ta", "(", "se", ")", ")", "\n", "y", "=", "y", "*", "se1", ".", "unsqueeze", "(", "-", "1", ")", "+", "y", "\n", "\n", "# channel attention", "\n", "se", "=", "y", ".", "mean", "(", "-", "1", ")", ".", "mean", "(", "-", "1", ")", "\n", "se1", "=", "self", ".", "relu", "(", "self", ".", "fc1c", "(", "se", ")", ")", "\n", "se2", "=", "self", ".", "sigmoid", "(", "self", ".", "fc2c", "(", "se1", ")", ")", "\n", "y", "=", "y", "*", "se2", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "+", "y", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._adaptive_forward": [[226, 245], ["x.size", "range", "tsagcn.UnitGCN.tan", "x.view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "tsagcn.UnitGCN.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "_adaptive_forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "N", ",", "C", ",", "T", ",", "V", "=", "x", ".", "size", "(", ")", "\n", "\n", "A", "=", "self", ".", "PA", "\n", "for", "i", "in", "range", "(", "self", ".", "num_subset", ")", ":", "\n", "            ", "A1", "=", "(", "\n", "self", ".", "conv_a", "[", "i", "]", "(", "x", ")", "\n", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "N", ",", "V", ",", "self", ".", "inter_c", "*", "T", ")", "\n", ")", "\n", "A2", "=", "self", ".", "conv_b", "[", "i", "]", "(", "x", ")", ".", "view", "(", "N", ",", "self", ".", "inter_c", "*", "T", ",", "V", ")", "\n", "A1", "=", "self", ".", "tan", "(", "torch", ".", "matmul", "(", "A1", ",", "A2", ")", "/", "A1", ".", "size", "(", "-", "1", ")", ")", "# N V V", "\n", "A1", "=", "A", "[", "i", "]", "+", "A1", "*", "self", ".", "alpha", "\n", "A2", "=", "x", ".", "view", "(", "N", ",", "C", "*", "T", ",", "V", ")", "\n", "z", "=", "self", ".", "conv_d", "[", "i", "]", "(", "torch", ".", "matmul", "(", "A2", ",", "A1", ")", ".", "view", "(", "N", ",", "C", ",", "T", ",", "V", ")", ")", "\n", "y", "=", "z", "+", "y", "if", "y", "is", "not", "None", "else", "z", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._non_adaptive_forward": [[246, 254], ["x.size", "range", "x.view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul().view", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "_non_adaptive_forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "N", ",", "C", ",", "T", ",", "V", "=", "x", ".", "size", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_subset", ")", ":", "\n", "            ", "A1", "=", "self", ".", "A", "[", "i", "]", "\n", "A2", "=", "x", ".", "view", "(", "N", ",", "C", "*", "T", ",", "V", ")", "\n", "z", "=", "self", ".", "conv_d", "[", "i", "]", "(", "torch", ".", "matmul", "(", "A2", ",", "A1", ")", ".", "view", "(", "N", ",", "C", ",", "T", ",", "V", ")", ")", "\n", "y", "=", "z", "+", "y", "if", "y", "is", "not", "None", "else", "z", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN.forward": [[255, 269], ["x.size", "tsagcn.UnitGCN.bn", "tsagcn.UnitGCN.down", "tsagcn.UnitGCN.relu", "tsagcn.UnitGCN._adaptive_forward", "tsagcn.UnitGCN._non_adaptive_forward", "tsagcn.UnitGCN._attentive_forward"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._adaptive_forward", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._non_adaptive_forward", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.UnitGCN._attentive_forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "N", ",", "C", ",", "T", ",", "V", "=", "x", ".", "size", "(", ")", "\n", "\n", "y", "=", "None", "\n", "if", "self", ".", "adaptive", ":", "\n", "            ", "y", "=", "self", ".", "_adaptive_forward", "(", "x", ",", "y", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "self", ".", "_non_adaptive_forward", "(", "x", ",", "y", ")", "\n", "", "y", "=", "self", ".", "bn", "(", "y", ")", "\n", "y", "+=", "self", ".", "down", "(", "x", ")", "\n", "y", "=", "self", ".", "relu", "(", "y", ")", "\n", "if", "self", ".", "attention", ":", "\n", "            ", "y", "=", "self", ".", "_attentive_forward", "(", "y", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.AAGCN.__init__": [[291, 325], ["torch.Module.__init__", "tsagcn.GraphAAGCN", "tsagcn.UnitGCN", "tsagcn.UnitTCN", "torch.ReLU", "torch.ReLU", "torch.ReLU", "tsagcn.UnitTCN"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "num_nodes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "residual", ":", "bool", "=", "True", ",", "\n", "adaptive", ":", "bool", "=", "True", ",", "\n", "attention", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "AAGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "edge_index", "=", "edge_index", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "\n", "self", ".", "graph", "=", "GraphAAGCN", "(", "self", ".", "edge_index", ",", "self", ".", "num_nodes", ")", "\n", "self", ".", "A", "=", "self", ".", "graph", ".", "A", "\n", "\n", "self", ".", "gcn1", "=", "UnitGCN", "(", "\n", "in_channels", ",", "out_channels", ",", "self", ".", "A", ",", "adaptive", "=", "adaptive", ",", "attention", "=", "attention", "\n", ")", "\n", "self", ".", "tcn1", "=", "UnitTCN", "(", "out_channels", ",", "out_channels", ",", "stride", "=", "stride", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "attention", "=", "attention", "\n", "\n", "if", "not", "residual", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "0", "\n", "\n", "", "elif", "(", "in_channels", "==", "out_channels", ")", "and", "(", "stride", "==", "1", ")", ":", "\n", "            ", "self", ".", "residual", "=", "lambda", "x", ":", "x", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "residual", "=", "UnitTCN", "(", "\n", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.tsagcn.AAGCN.forward": [[327, 341], ["tsagcn.AAGCN.relu", "tsagcn.AAGCN.tcn1", "tsagcn.AAGCN.residual", "tsagcn.AAGCN.gcn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Making a forward pass.\n\n        Arg types:\n            * **X** (PyTorch FloatTensor) - Node features for T time periods,\n            with shape (B, F_in, T_in, N_nodes).\n\n        Return types:\n            * **X** (PyTorch FloatTensor)* - Sequence of node features,\n            with shape (B, out_channels, T_in//stride, N_nodes).\n        \"\"\"", "\n", "y", "=", "self", ".", "relu", "(", "self", ".", "tcn1", "(", "self", ".", "gcn1", "(", "x", ")", ")", "+", "self", ".", "residual", "(", "x", ")", ")", "\n", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.Linear.__init__": [[23, 30], ["torch.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "mtgnn.Linear._reset_parameters"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "self", ",", "c_in", ":", "int", ",", "c_out", ":", "int", ",", "bias", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", "Linear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_mlp", "=", "torch", ".", "nn", ".", "Conv2d", "(", "\n", "c_in", ",", "c_out", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ")", ",", "stride", "=", "(", "1", ",", "1", ")", ",", "bias", "=", "bias", "\n", ")", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.Linear._reset_parameters": [[31, 37], ["mtgnn.Linear.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.Linear.forward": [[38, 49], ["mtgnn.Linear._mlp"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of the linear layer.\n\n        Arg types:\n            * **X** (Pytorch Float Tensor) - Input tensor, with shape (batch_size, c_in, num_nodes, seq_len).\n\n        Return types:\n            * **X** (PyTorch Float Tensor) - Output tensor, with shape (batch_size, c_out, num_nodes, seq_len).\n        \"\"\"", "\n", "return", "self", ".", "_mlp", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.MixProp.__init__": [[64, 72], ["torch.Module.__init__", "mtgnn.Linear", "mtgnn.MixProp._reset_parameters"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "self", ",", "c_in", ":", "int", ",", "c_out", ":", "int", ",", "gdep", ":", "int", ",", "dropout", ":", "float", ",", "alpha", ":", "float", ")", ":", "\n", "        ", "super", "(", "MixProp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_mlp", "=", "Linear", "(", "(", "gdep", "+", "1", ")", "*", "c_in", ",", "c_out", ")", "\n", "self", ".", "_gdep", "=", "gdep", "\n", "self", ".", "_dropout", "=", "dropout", "\n", "self", ".", "_alpha", "=", "alpha", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.MixProp._reset_parameters": [[73, 79], ["mtgnn.MixProp.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.MixProp.forward": [[80, 103], ["A.sum", "range", "mtgnn.MixProp._mlp", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "A.sum.view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "A.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "A", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of mix-hop propagation.\n\n        Arg types:\n            * **X** (Pytorch Float Tensor) - Input feature Tensor, with shape (batch_size, c_in, num_nodes, seq_len).\n            * **A** (PyTorch Float Tensor) - Adjacency matrix, with shape (num_nodes, num_nodes).\n\n        Return types:\n            * **H_0** (PyTorch Float Tensor) - Hidden representation for all nodes, with shape (batch_size, c_out, num_nodes, seq_len).\n        \"\"\"", "\n", "A", "=", "A", "+", "torch", ".", "eye", "(", "A", ".", "size", "(", "0", ")", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "d", "=", "A", ".", "sum", "(", "1", ")", "\n", "H", "=", "X", "\n", "H_0", "=", "X", "\n", "A", "=", "A", "/", "d", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "_gdep", ")", ":", "\n", "            ", "H", "=", "self", ".", "_alpha", "*", "X", "+", "(", "1", "-", "self", ".", "_alpha", ")", "*", "torch", ".", "einsum", "(", "\n", "\"ncwl,vw->ncvl\"", ",", "(", "H", ",", "A", ")", "\n", ")", "\n", "H_0", "=", "torch", ".", "cat", "(", "(", "H_0", ",", "H", ")", ",", "dim", "=", "1", ")", "\n", "", "H_0", "=", "self", ".", "_mlp", "(", "H_0", ")", "\n", "return", "H_0", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.DilatedInception.__init__": [[117, 127], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "int", "mtgnn.DilatedInception._reset_parameters", "mtgnn.DilatedInception._time_conv.append", "len", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "self", ",", "c_in", ":", "int", ",", "c_out", ":", "int", ",", "kernel_set", ":", "list", ",", "dilation_factor", ":", "int", ")", ":", "\n", "        ", "super", "(", "DilatedInception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_time_conv", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "_kernel_set", "=", "kernel_set", "\n", "c_out", "=", "int", "(", "c_out", "/", "len", "(", "self", ".", "_kernel_set", ")", ")", "\n", "for", "kern", "in", "self", ".", "_kernel_set", ":", "\n", "            ", "self", ".", "_time_conv", ".", "append", "(", "\n", "nn", ".", "Conv2d", "(", "c_in", ",", "c_out", ",", "(", "1", ",", "kern", ")", ",", "dilation", "=", "(", "1", ",", "dilation_factor", ")", ")", "\n", ")", "\n", "", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.DilatedInception._reset_parameters": [[128, 134], ["mtgnn.DilatedInception.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.DilatedInception.forward": [[135, 153], ["range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.cat.append", "torch.cat.append", "torch.cat.append", "len", "X[].size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X_in", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of dilated inception.\n\n        Arg types:\n            * **X_in** (Pytorch Float Tensor) - Input feature Tensor, with shape (batch_size, c_in, num_nodes, seq_len).\n\n        Return types:\n            * **X** (PyTorch Float Tensor) - Hidden representation for all nodes,\n            with shape (batch_size, c_out, num_nodes, seq_len-6).\n        \"\"\"", "\n", "X", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_kernel_set", ")", ")", ":", "\n", "            ", "X", ".", "append", "(", "self", ".", "_time_conv", "[", "i", "]", "(", "X_in", ")", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "_kernel_set", ")", ")", ":", "\n", "            ", "X", "[", "i", "]", "=", "X", "[", "i", "]", "[", "...", ",", "-", "X", "[", "-", "1", "]", ".", "size", "(", "3", ")", ":", "]", "\n", "", "X", "=", "torch", ".", "cat", "(", "X", ",", "dim", "=", "1", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.GraphConstructor.__init__": [[168, 186], ["torch.Module.__init__", "mtgnn.GraphConstructor._reset_parameters", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "nnodes", ":", "int", ",", "k", ":", "int", ",", "dim", ":", "int", ",", "alpha", ":", "float", ",", "xd", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", ":", "\n", "        ", "super", "(", "GraphConstructor", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "xd", "is", "not", "None", ":", "\n", "            ", "self", ".", "_static_feature_dim", "=", "xd", "\n", "self", ".", "_linear1", "=", "nn", ".", "Linear", "(", "xd", ",", "dim", ")", "\n", "self", ".", "_linear2", "=", "nn", ".", "Linear", "(", "xd", ",", "dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_embedding1", "=", "nn", ".", "Embedding", "(", "nnodes", ",", "dim", ")", "\n", "self", ".", "_embedding2", "=", "nn", ".", "Embedding", "(", "nnodes", ",", "dim", ")", "\n", "self", ".", "_linear1", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "_linear2", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "\n", "", "self", ".", "_k", "=", "k", "\n", "self", ".", "_alpha", "=", "alpha", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.GraphConstructor._reset_parameters": [[187, 193], ["mtgnn.GraphConstructor.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.GraphConstructor.forward": [[194, 228], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.relu", "torch.relu", "torch.relu", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to.fill_", "torch.zeros().to.fill_", "torch.zeros().to.fill_", "torch.relu.topk", "torch.zeros().to.scatter_", "torch.zeros().to.scatter_", "torch.zeros().to.scatter_", "mtgnn.GraphConstructor._embedding1", "mtgnn.GraphConstructor._embedding2", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "float", "s1.fill_", "mtgnn.GraphConstructor._linear1", "mtgnn.GraphConstructor._linear2", "mtgnn.GraphConstructor.transpose", "mtgnn.GraphConstructor.transpose", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "idx.size", "idx.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "\n", "self", ",", "idx", ":", "torch", ".", "LongTensor", ",", "FE", ":", "Optional", "[", "torch", ".", "FloatTensor", "]", "=", "None", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass to construct an adjacency matrix from node embeddings.\n\n        Arg types:\n            * **idx** (Pytorch Long Tensor) - Input indices, a permutation of the number of nodes, default None (no permutation).\n            * **FE** (Pytorch Float Tensor, optional) - Static feature, default None.\n        Return types:\n            * **A** (PyTorch Float Tensor) - Adjacency matrix constructed from node embeddings.\n        \"\"\"", "\n", "\n", "if", "FE", "is", "None", ":", "\n", "            ", "nodevec1", "=", "self", ".", "_embedding1", "(", "idx", ")", "\n", "nodevec2", "=", "self", ".", "_embedding2", "(", "idx", ")", "\n", "", "else", ":", "\n", "            ", "assert", "FE", ".", "shape", "[", "1", "]", "==", "self", ".", "_static_feature_dim", "\n", "nodevec1", "=", "FE", "[", "idx", ",", ":", "]", "\n", "nodevec2", "=", "nodevec1", "\n", "\n", "", "nodevec1", "=", "torch", ".", "tanh", "(", "self", ".", "_alpha", "*", "self", ".", "_linear1", "(", "nodevec1", ")", ")", "\n", "nodevec2", "=", "torch", ".", "tanh", "(", "self", ".", "_alpha", "*", "self", ".", "_linear2", "(", "nodevec2", ")", ")", "\n", "\n", "a", "=", "torch", ".", "mm", "(", "nodevec1", ",", "nodevec2", ".", "transpose", "(", "1", ",", "0", ")", ")", "-", "torch", ".", "mm", "(", "\n", "nodevec2", ",", "nodevec1", ".", "transpose", "(", "1", ",", "0", ")", "\n", ")", "\n", "A", "=", "F", ".", "relu", "(", "torch", ".", "tanh", "(", "self", ".", "_alpha", "*", "a", ")", ")", "\n", "mask", "=", "torch", ".", "zeros", "(", "idx", ".", "size", "(", "0", ")", ",", "idx", ".", "size", "(", "0", ")", ")", ".", "to", "(", "A", ".", "device", ")", "\n", "mask", ".", "fill_", "(", "float", "(", "\"0\"", ")", ")", "\n", "s1", ",", "t1", "=", "A", ".", "topk", "(", "self", ".", "_k", ",", "1", ")", "\n", "mask", ".", "scatter_", "(", "1", ",", "t1", ",", "s1", ".", "fill_", "(", "1", ")", ")", "\n", "A", "=", "A", "*", "mask", "\n", "return", "A", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.LayerNormalization.__init__": [[242, 256], ["torch.Module.__init__", "tuple", "mtgnn.LayerNormalization._reset_parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "mtgnn.LayerNormalization.register_parameter", "mtgnn.LayerNormalization.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "normalized_shape", ":", "int", ",", "eps", ":", "float", "=", "1e-5", ",", "elementwise_affine", ":", "bool", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "LayerNormalization", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_normalized_shape", "=", "tuple", "(", "normalized_shape", ")", "\n", "self", ".", "_eps", "=", "eps", "\n", "self", ".", "_elementwise_affine", "=", "elementwise_affine", "\n", "if", "self", ".", "_elementwise_affine", ":", "\n", "            ", "self", ".", "_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "*", "normalized_shape", ")", ")", "\n", "self", ".", "_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "*", "normalized_shape", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "\"_weight\"", ",", "None", ")", "\n", "self", ".", "register_parameter", "(", "\"_bias\"", ",", "None", ")", "\n", "", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.LayerNormalization._reset_parameters": [[257, 261], ["torch.nn.init.ones_", "torch.nn.init.ones_", "torch.nn.init.ones_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_elementwise_affine", ":", "\n", "            ", "init", ".", "ones_", "(", "self", ".", "_weight", ")", "\n", "init", ".", "zeros_", "(", "self", ".", "_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.LayerNormalization.forward": [[262, 286], ["torch.layer_norm", "torch.layer_norm", "torch.layer_norm", "torch.layer_norm", "torch.layer_norm", "torch.layer_norm", "tuple", "tuple"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "idx", ":", "torch", ".", "LongTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of layer normalization.\n\n        Arg types:\n            * **X** (Pytorch Float Tensor) - Input tensor,\n                with shape (batch_size, feature_dim, num_nodes, seq_len).\n            * **idx** (Pytorch Long Tensor) - Input indices.\n\n        Return types:\n            * **X** (PyTorch Float Tensor) - Output tensor,\n                with shape (batch_size, feature_dim, num_nodes, seq_len).\n        \"\"\"", "\n", "if", "self", ".", "_elementwise_affine", ":", "\n", "            ", "return", "F", ".", "layer_norm", "(", "\n", "X", ",", "\n", "tuple", "(", "X", ".", "shape", "[", "1", ":", "]", ")", ",", "\n", "self", ".", "_weight", "[", ":", ",", "idx", ",", ":", "]", ",", "\n", "self", ".", "_bias", "[", ":", ",", "idx", ",", ":", "]", ",", "\n", "self", ".", "_eps", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "layer_norm", "(", "\n", "X", ",", "tuple", "(", "X", ".", "shape", "[", "1", ":", "]", ")", ",", "self", ".", "_weight", ",", "self", ".", "_bias", ",", "self", ".", "_eps", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.MTGNNLayer.__init__": [[315, 403], ["torch.Module.__init__", "mtgnn.DilatedInception", "mtgnn.DilatedInception", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mtgnn.MTGNNLayer._reset_parameters", "int", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mtgnn.MixProp", "mtgnn.MixProp", "mtgnn.LayerNormalization", "mtgnn.LayerNormalization"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dilation_exponential", ":", "int", ",", "\n", "rf_size_i", ":", "int", ",", "\n", "kernel_size", ":", "int", ",", "\n", "j", ":", "int", ",", "\n", "residual_channels", ":", "int", ",", "\n", "conv_channels", ":", "int", ",", "\n", "skip_channels", ":", "int", ",", "\n", "kernel_set", ":", "list", ",", "\n", "new_dilation", ":", "int", ",", "\n", "layer_norm_affline", ":", "bool", ",", "\n", "gcn_true", ":", "bool", ",", "\n", "seq_length", ":", "int", ",", "\n", "receptive_field", ":", "int", ",", "\n", "dropout", ":", "float", ",", "\n", "gcn_depth", ":", "int", ",", "\n", "num_nodes", ":", "int", ",", "\n", "propalpha", ":", "float", ",", "\n", ")", ":", "\n", "        ", "super", "(", "MTGNNLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_dropout", "=", "dropout", "\n", "self", ".", "_gcn_true", "=", "gcn_true", "\n", "\n", "if", "dilation_exponential", ">", "1", ":", "\n", "            ", "rf_size_j", "=", "int", "(", "\n", "rf_size_i", "\n", "+", "(", "kernel_size", "-", "1", ")", "\n", "*", "(", "dilation_exponential", "**", "j", "-", "1", ")", "\n", "/", "(", "dilation_exponential", "-", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "rf_size_j", "=", "rf_size_i", "+", "j", "*", "(", "kernel_size", "-", "1", ")", "\n", "\n", "", "self", ".", "_filter_conv", "=", "DilatedInception", "(", "\n", "residual_channels", ",", "\n", "conv_channels", ",", "\n", "kernel_set", "=", "kernel_set", ",", "\n", "dilation_factor", "=", "new_dilation", ",", "\n", ")", "\n", "\n", "self", ".", "_gate_conv", "=", "DilatedInception", "(", "\n", "residual_channels", ",", "\n", "conv_channels", ",", "\n", "kernel_set", "=", "kernel_set", ",", "\n", "dilation_factor", "=", "new_dilation", ",", "\n", ")", "\n", "\n", "self", ".", "_residual_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "conv_channels", ",", "\n", "out_channels", "=", "residual_channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", ")", "\n", "\n", "if", "seq_length", ">", "receptive_field", ":", "\n", "            ", "self", ".", "_skip_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "conv_channels", ",", "\n", "out_channels", "=", "skip_channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "seq_length", "-", "rf_size_j", "+", "1", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_skip_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "conv_channels", ",", "\n", "out_channels", "=", "skip_channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "receptive_field", "-", "rf_size_j", "+", "1", ")", ",", "\n", ")", "\n", "\n", "", "if", "gcn_true", ":", "\n", "            ", "self", ".", "_mixprop_conv1", "=", "MixProp", "(", "\n", "conv_channels", ",", "residual_channels", ",", "gcn_depth", ",", "dropout", ",", "propalpha", "\n", ")", "\n", "\n", "self", ".", "_mixprop_conv2", "=", "MixProp", "(", "\n", "conv_channels", ",", "residual_channels", ",", "gcn_depth", ",", "dropout", ",", "propalpha", "\n", ")", "\n", "\n", "", "if", "seq_length", ">", "receptive_field", ":", "\n", "            ", "self", ".", "_normalization", "=", "LayerNormalization", "(", "\n", "(", "residual_channels", ",", "num_nodes", ",", "seq_length", "-", "rf_size_j", "+", "1", ")", ",", "\n", "elementwise_affine", "=", "layer_norm_affline", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "_normalization", "=", "LayerNormalization", "(", "\n", "(", "residual_channels", ",", "num_nodes", ",", "receptive_field", "-", "rf_size_j", "+", "1", ")", ",", "\n", "elementwise_affine", "=", "layer_norm_affline", ",", "\n", ")", "\n", "", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.MTGNNLayer._reset_parameters": [[404, 410], ["mtgnn.MTGNNLayer.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.MTGNNLayer.forward": [[411, 455], ["mtgnn.MTGNNLayer._filter_conv", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "mtgnn.MTGNNLayer._gate_conv", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.dropout", "torch.dropout", "torch.dropout", "mtgnn.MTGNNLayer._normalization", "mtgnn.MTGNNLayer._skip_conv", "mtgnn.MTGNNLayer._residual_conv", "mtgnn.MTGNNLayer._mixprop_conv1", "mtgnn.MTGNNLayer._mixprop_conv2", "A_tilde.transpose", "mtgnn.MTGNNLayer.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "X_skip", ":", "torch", ".", "FloatTensor", ",", "\n", "A_tilde", ":", "Optional", "[", "torch", ".", "FloatTensor", "]", ",", "\n", "idx", ":", "torch", ".", "LongTensor", ",", "\n", "training", ":", "bool", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of MTGNN layer.\n\n        Arg types:\n            * **X** (PyTorch FloatTensor) - Input feature tensor,\n                with shape (batch_size, in_dim, num_nodes, seq_len).\n            * **X_skip** (PyTorch FloatTensor) - Input feature tensor for skip connection,\n                with shape (batch_size, in_dim, num_nodes, seq_len).\n            * **A_tilde** (Pytorch FloatTensor or None) - Predefined adjacency matrix.\n            * **idx** (Pytorch LongTensor) - Input indices.\n            * **training** (bool) - Whether in traning mode.\n\n        Return types:\n            * **X** (PyTorch FloatTensor) - Output sequence tensor,\n                with shape (batch_size, seq_len, num_nodes, seq_len).\n            * **X_skip** (PyTorch FloatTensor) - Output feature tensor for skip connection,\n                with shape (batch_size, in_dim, num_nodes, seq_len).\n        \"\"\"", "\n", "X_residual", "=", "X", "\n", "X_filter", "=", "self", ".", "_filter_conv", "(", "X", ")", "\n", "X_filter", "=", "torch", ".", "tanh", "(", "X_filter", ")", "\n", "X_gate", "=", "self", ".", "_gate_conv", "(", "X", ")", "\n", "X_gate", "=", "torch", ".", "sigmoid", "(", "X_gate", ")", "\n", "X", "=", "X_filter", "*", "X_gate", "\n", "X", "=", "F", ".", "dropout", "(", "X", ",", "self", ".", "_dropout", ",", "training", "=", "training", ")", "\n", "X_skip", "=", "self", ".", "_skip_conv", "(", "X", ")", "+", "X_skip", "\n", "if", "self", ".", "_gcn_true", ":", "\n", "            ", "X", "=", "self", ".", "_mixprop_conv1", "(", "X", ",", "A_tilde", ")", "+", "self", ".", "_mixprop_conv2", "(", "\n", "X", ",", "A_tilde", ".", "transpose", "(", "1", ",", "0", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "X", "=", "self", ".", "_residual_conv", "(", "X", ")", "\n", "\n", "", "X", "=", "X", "+", "X_residual", "[", ":", ",", ":", ",", ":", ",", "-", "X", ".", "size", "(", "3", ")", ":", "]", "\n", "X", "=", "self", ".", "_normalization", "(", "X", ",", "idx", ")", "\n", "return", "X", ",", "X_skip", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.MTGNN.__init__": [[487, 561], ["torch.Module.__init__", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mtgnn.GraphConstructor", "mtgnn.MTGNN._set_receptive_field", "range", "mtgnn.MTGNN._setup_conv", "mtgnn.MTGNN._reset_parameters", "mtgnn.MTGNN._mtgnn_layers.append", "mtgnn.MTGNNLayer"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.MTGNN._set_receptive_field", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.MTGNN._setup_conv", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "gcn_true", ":", "bool", ",", "\n", "build_adj", ":", "bool", ",", "\n", "gcn_depth", ":", "int", ",", "\n", "num_nodes", ":", "int", ",", "\n", "kernel_set", ":", "list", ",", "\n", "kernel_size", ":", "int", ",", "\n", "dropout", ":", "float", ",", "\n", "subgraph_size", ":", "int", ",", "\n", "node_dim", ":", "int", ",", "\n", "dilation_exponential", ":", "int", ",", "\n", "conv_channels", ":", "int", ",", "\n", "residual_channels", ":", "int", ",", "\n", "skip_channels", ":", "int", ",", "\n", "end_channels", ":", "int", ",", "\n", "seq_length", ":", "int", ",", "\n", "in_dim", ":", "int", ",", "\n", "out_dim", ":", "int", ",", "\n", "layers", ":", "int", ",", "\n", "propalpha", ":", "float", ",", "\n", "tanhalpha", ":", "float", ",", "\n", "layer_norm_affline", ":", "bool", ",", "\n", "xd", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "MTGNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_gcn_true", "=", "gcn_true", "\n", "self", ".", "_build_adj_true", "=", "build_adj", "\n", "self", ".", "_num_nodes", "=", "num_nodes", "\n", "self", ".", "_dropout", "=", "dropout", "\n", "self", ".", "_seq_length", "=", "seq_length", "\n", "self", ".", "_layers", "=", "layers", "\n", "self", ".", "_idx", "=", "torch", ".", "arange", "(", "self", ".", "_num_nodes", ")", "\n", "\n", "self", ".", "_mtgnn_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "self", ".", "_graph_constructor", "=", "GraphConstructor", "(", "\n", "num_nodes", ",", "subgraph_size", ",", "node_dim", ",", "alpha", "=", "tanhalpha", ",", "xd", "=", "xd", "\n", ")", "\n", "\n", "self", ".", "_set_receptive_field", "(", "dilation_exponential", ",", "kernel_size", ",", "layers", ")", "\n", "\n", "new_dilation", "=", "1", "\n", "for", "j", "in", "range", "(", "1", ",", "layers", "+", "1", ")", ":", "\n", "            ", "self", ".", "_mtgnn_layers", ".", "append", "(", "\n", "MTGNNLayer", "(", "\n", "dilation_exponential", "=", "dilation_exponential", ",", "\n", "rf_size_i", "=", "1", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "j", "=", "j", ",", "\n", "residual_channels", "=", "residual_channels", ",", "\n", "conv_channels", "=", "conv_channels", ",", "\n", "skip_channels", "=", "skip_channels", ",", "\n", "kernel_set", "=", "kernel_set", ",", "\n", "new_dilation", "=", "new_dilation", ",", "\n", "layer_norm_affline", "=", "layer_norm_affline", ",", "\n", "gcn_true", "=", "gcn_true", ",", "\n", "seq_length", "=", "seq_length", ",", "\n", "receptive_field", "=", "self", ".", "_receptive_field", ",", "\n", "dropout", "=", "dropout", ",", "\n", "gcn_depth", "=", "gcn_depth", ",", "\n", "num_nodes", "=", "num_nodes", ",", "\n", "propalpha", "=", "propalpha", ",", "\n", ")", "\n", ")", "\n", "\n", "new_dilation", "*=", "dilation_exponential", "\n", "\n", "", "self", ".", "_setup_conv", "(", "\n", "in_dim", ",", "skip_channels", ",", "end_channels", ",", "residual_channels", ",", "out_dim", "\n", ")", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.MTGNN._setup_conv": [[562, 613], ["torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["None"], ["", "def", "_setup_conv", "(", "\n", "self", ",", "in_dim", ",", "skip_channels", ",", "end_channels", ",", "residual_channels", ",", "out_dim", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "_start_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_dim", ",", "out_channels", "=", "residual_channels", ",", "kernel_size", "=", "(", "1", ",", "1", ")", "\n", ")", "\n", "\n", "if", "self", ".", "_seq_length", ">", "self", ".", "_receptive_field", ":", "\n", "\n", "            ", "self", ".", "_skip_conv_0", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_dim", ",", "\n", "out_channels", "=", "skip_channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "self", ".", "_seq_length", ")", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "_skip_conv_E", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "residual_channels", ",", "\n", "out_channels", "=", "skip_channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "self", ".", "_seq_length", "-", "self", ".", "_receptive_field", "+", "1", ")", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "self", ".", "_skip_conv_0", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_dim", ",", "\n", "out_channels", "=", "skip_channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "self", ".", "_receptive_field", ")", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "_skip_conv_E", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "residual_channels", ",", "\n", "out_channels", "=", "skip_channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n", "\n", "", "self", ".", "_end_conv_1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "skip_channels", ",", "\n", "out_channels", "=", "end_channels", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "_end_conv_2", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "end_channels", ",", "\n", "out_channels", "=", "out_dim", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.MTGNN._reset_parameters": [[615, 621], ["mtgnn.MTGNN.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.MTGNN._set_receptive_field": [[622, 632], ["int"], "methods", ["None"], ["", "", "", "def", "_set_receptive_field", "(", "self", ",", "dilation_exponential", ",", "kernel_size", ",", "layers", ")", ":", "\n", "        ", "if", "dilation_exponential", ">", "1", ":", "\n", "            ", "self", ".", "_receptive_field", "=", "int", "(", "\n", "1", "\n", "+", "(", "kernel_size", "-", "1", ")", "\n", "*", "(", "dilation_exponential", "**", "layers", "-", "1", ")", "\n", "/", "(", "dilation_exponential", "-", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_receptive_field", "=", "layers", "*", "(", "kernel_size", "-", "1", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mtgnn.MTGNN.forward": [[633, 687], ["torch.functional.pad.size", "mtgnn.MTGNN._start_conv", "mtgnn.MTGNN._skip_conv_0", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "mtgnn.MTGNN._end_conv_2", "torch.functional.pad", "torch.functional.pad", "torch.functional.pad", "torch.dropout", "torch.dropout", "torch.dropout", "mtgnn.MTGNN._skip_conv_E", "mtgnn.MTGNN._end_conv_1", "mtgnn", "mtgnn", "mtgnn.MTGNN._graph_constructor", "mtgnn.MTGNN._graph_constructor", "mtgnn.MTGNN._idx.to", "mtgnn.MTGNN._idx.to"], "methods", ["None"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "X_in", ":", "torch", ".", "FloatTensor", ",", "\n", "A_tilde", ":", "Optional", "[", "torch", ".", "FloatTensor", "]", "=", "None", ",", "\n", "idx", ":", "Optional", "[", "torch", ".", "LongTensor", "]", "=", "None", ",", "\n", "FE", ":", "Optional", "[", "torch", ".", "FloatTensor", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of MTGNN.\n\n        Arg types:\n            * **X_in** (PyTorch FloatTensor) - Input sequence, with shape (batch_size, in_dim, num_nodes, seq_len).\n            * **A_tilde** (Pytorch FloatTensor, optional) - Predefined adjacency matrix, default None.\n            * **idx** (Pytorch LongTensor, optional) - Input indices, a permutation of the num_nodes, default None (no permutation).\n            * **FE** (Pytorch FloatTensor, optional) - Static feature, default None.\n\n        Return types:\n            * **X** (PyTorch FloatTensor) - Output sequence for prediction, with shape (batch_size, seq_len, num_nodes, 1).\n        \"\"\"", "\n", "seq_len", "=", "X_in", ".", "size", "(", "3", ")", "\n", "assert", "(", "\n", "seq_len", "==", "self", ".", "_seq_length", "\n", ")", ",", "\"Input sequence length not equal to preset sequence length.\"", "\n", "\n", "if", "self", ".", "_seq_length", "<", "self", ".", "_receptive_field", ":", "\n", "            ", "X_in", "=", "nn", ".", "functional", ".", "pad", "(", "\n", "X_in", ",", "(", "self", ".", "_receptive_field", "-", "self", ".", "_seq_length", ",", "0", ",", "0", ",", "0", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "_gcn_true", ":", "\n", "            ", "if", "self", ".", "_build_adj_true", ":", "\n", "                ", "if", "idx", "is", "None", ":", "\n", "                    ", "A_tilde", "=", "self", ".", "_graph_constructor", "(", "self", ".", "_idx", ".", "to", "(", "X_in", ".", "device", ")", ",", "FE", "=", "FE", ")", "\n", "", "else", ":", "\n", "                    ", "A_tilde", "=", "self", ".", "_graph_constructor", "(", "idx", ",", "FE", "=", "FE", ")", "\n", "\n", "", "", "", "X", "=", "self", ".", "_start_conv", "(", "X_in", ")", "\n", "X_skip", "=", "self", ".", "_skip_conv_0", "(", "\n", "F", ".", "dropout", "(", "X_in", ",", "self", ".", "_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", ")", "\n", "if", "idx", "is", "None", ":", "\n", "            ", "for", "mtgnn", "in", "self", ".", "_mtgnn_layers", ":", "\n", "                ", "X", ",", "X_skip", "=", "mtgnn", "(", "\n", "X", ",", "X_skip", ",", "A_tilde", ",", "self", ".", "_idx", ".", "to", "(", "X_in", ".", "device", ")", ",", "self", ".", "training", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "mtgnn", "in", "self", ".", "_mtgnn_layers", ":", "\n", "                ", "X", ",", "X_skip", "=", "mtgnn", "(", "X", ",", "X_skip", ",", "A_tilde", ",", "idx", ",", "self", ".", "training", ")", "\n", "\n", "", "", "X_skip", "=", "self", ".", "_skip_conv_E", "(", "X", ")", "+", "X_skip", "\n", "X", "=", "F", ".", "relu", "(", "X_skip", ")", "\n", "X", "=", "F", ".", "relu", "(", "self", ".", "_end_conv_1", "(", "X", ")", ")", "\n", "X", "=", "self", ".", "_end_conv_2", "(", "X", ")", "\n", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.ChebConvAttention.__init__": [[49, 75], ["kwargs.setdefault", "torch_geometric.nn.conv.MessagePassing.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "astgcn.ChebConvAttention._reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "astgcn.ChebConvAttention.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "K", ":", "int", ",", "\n", "normalization", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "\"aggr\"", ",", "\"add\"", ")", "\n", "super", "(", "ChebConvAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "assert", "K", ">", "0", "\n", "assert", "normalization", "in", "[", "None", ",", "\"sym\"", ",", "\"rw\"", "]", ",", "\"Invalid normalization\"", "\n", "\n", "self", ".", "_in_channels", "=", "in_channels", "\n", "self", ".", "_out_channels", "=", "out_channels", "\n", "self", ".", "_normalization", "=", "normalization", "\n", "self", ".", "_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "K", ",", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "\"_bias\"", ",", "None", ")", "\n", "\n", "", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.ChebConvAttention._reset_parameters": [[76, 80], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "_weight", ")", "\n", "if", "self", ".", "_bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.ChebConvAttention.__norm__": [[82, 111], ["astgcn.ChebConvAttention.", "torch_geometric.utils.get_laplacian", "edge_weight.masked_fill_", "astgcn.ChebConvAttention.", "lambda_max.numel", "float"], "methods", ["None"], ["", "", "def", "__norm__", "(", "\n", "self", ",", "\n", "edge_index", ",", "\n", "num_nodes", ":", "Optional", "[", "int", "]", ",", "\n", "edge_weight", ":", "OptTensor", ",", "\n", "normalization", ":", "Optional", "[", "str", "]", ",", "\n", "lambda_max", ",", "\n", "dtype", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "batch", ":", "OptTensor", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "edge_index", ",", "edge_weight", "=", "remove_self_loops", "(", "edge_index", ",", "edge_weight", ")", "\n", "\n", "edge_index", ",", "edge_weight", "=", "get_laplacian", "(", "\n", "edge_index", ",", "edge_weight", ",", "normalization", ",", "dtype", ",", "num_nodes", "\n", ")", "\n", "\n", "if", "batch", "is", "not", "None", "and", "lambda_max", ".", "numel", "(", ")", ">", "1", ":", "\n", "            ", "lambda_max", "=", "lambda_max", "[", "batch", "[", "edge_index", "[", "0", "]", "]", "]", "\n", "\n", "", "edge_weight", "=", "(", "2.0", "*", "edge_weight", ")", "/", "lambda_max", "\n", "edge_weight", ".", "masked_fill_", "(", "edge_weight", "==", "float", "(", "\"inf\"", ")", ",", "0", ")", "\n", "\n", "edge_index", ",", "edge_weight", "=", "add_self_loops", "(", "\n", "edge_index", ",", "edge_weight", ",", "fill_value", "=", "-", "1.0", ",", "num_nodes", "=", "num_nodes", "\n", ")", "\n", "assert", "edge_weight", "is", "not", "None", "\n", "\n", "return", "edge_index", ",", "edge_weight", "#for example 307 nodes as deg, 340 edges , 307 nodes as self connections", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.ChebConvAttention.forward": [[112, 184], ["astgcn.ChebConvAttention.__norm__", "x.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "range", "ValueError", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "x.size", "astgcn.ChebConvAttention._weight.size", "astgcn.ChebConvAttention.propagate", "astgcn.ChebConvAttention._weight.size", "astgcn.ChebConvAttention.propagate", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.ChebConvAttention.__norm__"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "x", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "spatial_attention", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_weight", ":", "OptTensor", "=", "None", ",", "\n", "batch", ":", "OptTensor", "=", "None", ",", "\n", "lambda_max", ":", "OptTensor", "=", "None", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of the ChebConv Attention layer (Chebyshev graph convolution operation).\n\n        Arg types:\n            * x (PyTorch Float Tensor) - Node features for T time periods, with shape (B, N_nodes, F_in).\n            * edge_index (Tensor array) - Edge indices.\n            * spatial_attention (PyTorch Float Tensor) - Spatial attention weights, with shape (B, N_nodes, N_nodes).\n            * edge_weight (PyTorch Float Tensor, optional) - Edge weights corresponding to edge indices.\n            * batch (PyTorch Tensor, optional) - Batch labels for each edge.\n            * lambda_max (optional, but mandatory if normalization is None) - Largest eigenvalue of Laplacian.\n\n        Return types:\n            * out (PyTorch Float Tensor) - Hidden state tensor for all nodes, with shape (B, N_nodes, F_out).\n        \"\"\"", "\n", "if", "self", ".", "_normalization", "!=", "\"sym\"", "and", "lambda_max", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"You need to pass `lambda_max` to `forward() in`\"", "\n", "\"case the normalization is non-symmetric.\"", "\n", ")", "\n", "\n", "", "if", "lambda_max", "is", "None", ":", "\n", "            ", "lambda_max", "=", "torch", ".", "tensor", "(", "2.0", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "", "if", "not", "isinstance", "(", "lambda_max", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "lambda_max", "=", "torch", ".", "tensor", "(", "lambda_max", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "", "assert", "lambda_max", "is", "not", "None", "\n", "\n", "edge_index", ",", "norm", "=", "self", ".", "__norm__", "(", "\n", "edge_index", ",", "\n", "x", ".", "size", "(", "self", ".", "node_dim", ")", ",", "\n", "edge_weight", ",", "\n", "self", ".", "_normalization", ",", "\n", "lambda_max", ",", "\n", "dtype", "=", "x", ".", "dtype", ",", "\n", "batch", "=", "batch", ",", "\n", ")", "\n", "row", ",", "col", "=", "edge_index", "# refer to the index of each note each is a list of nodes not a number # (954, 954)", "\n", "Att_norm", "=", "norm", "*", "spatial_attention", "[", ":", ",", "row", ",", "col", "]", "# spatial_attention for example (32, 307, 307), -> (954) * (32, 954) -> (32, 954)", "\n", "num_nodes", "=", "x", ".", "size", "(", "self", ".", "node_dim", ")", "#for example 307", "\n", "# (307, 307) * (32, 307, 307) -> (32, 307, 307) -permute-> (32, 307,307) * (32, 307, 1) -> (32, 307, 1)", "\n", "TAx_0", "=", "torch", ".", "matmul", "(", "\n", "(", "torch", ".", "eye", "(", "num_nodes", ")", ".", "to", "(", "edge_index", ".", "device", ")", "*", "spatial_attention", ")", ".", "permute", "(", "\n", "0", ",", "2", ",", "1", "\n", ")", ",", "\n", "x", ",", "\n", ")", "#for example (32, 307, 1)", "\n", "out", "=", "torch", ".", "matmul", "(", "TAx_0", ",", "self", ".", "_weight", "[", "0", "]", ")", "#for example (32, 307, 1) * [1, 64] -> (32, 307, 64)", "\n", "edge_index_transpose", "=", "edge_index", "[", "[", "1", ",", "0", "]", "]", "\n", "if", "self", ".", "_weight", ".", "size", "(", "0", ")", ">", "1", ":", "\n", "            ", "TAx_1", "=", "self", ".", "propagate", "(", "\n", "edge_index_transpose", ",", "x", "=", "TAx_0", ",", "norm", "=", "Att_norm", ",", "size", "=", "None", "\n", ")", "\n", "out", "=", "out", "+", "torch", ".", "matmul", "(", "TAx_1", ",", "self", ".", "_weight", "[", "1", "]", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "2", ",", "self", ".", "_weight", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "TAx_2", "=", "self", ".", "propagate", "(", "edge_index_transpose", ",", "x", "=", "TAx_1", ",", "norm", "=", "norm", ",", "size", "=", "None", ")", "\n", "TAx_2", "=", "2.0", "*", "TAx_2", "-", "TAx_0", "\n", "out", "=", "out", "+", "torch", ".", "matmul", "(", "TAx_2", ",", "self", ".", "_weight", "[", "k", "]", ")", "\n", "TAx_0", ",", "TAx_1", "=", "TAx_1", ",", "TAx_2", "\n", "\n", "", "if", "self", ".", "_bias", "is", "not", "None", ":", "\n", "            ", "out", "+=", "self", ".", "_bias", "\n", "\n", "", "return", "out", "#? (b, N, F_out) (32, 307, 64)", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.ChebConvAttention.message": [[185, 191], ["norm.dim", "norm.view", "norm.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ",", "norm", ")", ":", "\n", "        ", "if", "norm", ".", "dim", "(", ")", "==", "1", ":", "# true", "\n", "            ", "return", "norm", ".", "view", "(", "-", "1", ",", "1", ")", "*", "x_j", "# (954, 1) * (32, 954, 1) -> (32, 954, 1)", "\n", "", "else", ":", "\n", "            ", "d1", ",", "d2", "=", "norm", ".", "shape", "\n", "return", "norm", ".", "view", "(", "d1", ",", "d2", ",", "1", ")", "*", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.ChebConvAttention.__repr__": [[192, 199], ["astgcn.ChebConvAttention._weight.size"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({}, {}, K={}, normalization={})\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "\n", "self", ".", "_in_channels", ",", "\n", "self", ".", "_out_channels", ",", "\n", "self", ".", "_weight", ".", "size", "(", "0", ")", ",", "\n", "self", ".", "_normalization", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.SpatialAttention.__init__": [[212, 222], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "astgcn.SpatialAttention._reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "num_of_vertices", ":", "int", ",", "num_of_timesteps", ":", "int", ")", ":", "\n", "        ", "super", "(", "SpatialAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_W1", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_of_timesteps", ")", ")", "#for example (12)", "\n", "self", ".", "_W2", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_channels", ",", "num_of_timesteps", ")", ")", "#for example (1, 12)", "\n", "self", ".", "_W3", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_channels", ")", ")", "#for example (1)", "\n", "self", ".", "_bs", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ",", "num_of_vertices", ",", "num_of_vertices", ")", ")", "#for example (1,307, 307)", "\n", "self", ".", "_Vs", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_of_vertices", ",", "num_of_vertices", ")", ")", "#for example (307, 307)", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.SpatialAttention._reset_parameters": [[223, 229], ["astgcn.SpatialAttention.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.SpatialAttention.forward": [[230, 263], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of the spatial attention layer.\n\n        Arg types:\n            * **X** (PyTorch FloatTensor) - Node features for T time periods, with shape (B, N_nodes, F_in, T_in).\n\n        Return types:\n            * **S** (PyTorch FloatTensor) - Spatial attention score matrices, with shape (B, N_nodes, N_nodes).\n        \"\"\"", "\n", "# lhs = left hand side embedding;", "\n", "# to calculcate it : ", "\n", "# multiply with W1 (B, N, F_in, T)(T) -> (B,N,F_in)", "\n", "# multiply with W2 (B,N,F_in)(F_in,T)->(B,N,T)", "\n", "# for example (32, 307, 1, 12) * (12) -> (32, 307, 1) * (1, 12) -> (32, 307, 12) ", "\n", "LHS", "=", "torch", ".", "matmul", "(", "torch", ".", "matmul", "(", "X", ",", "self", ".", "_W1", ")", ",", "self", ".", "_W2", ")", "\n", "\n", "# rhs = right hand side embedding", "\n", "# to calculcate it : ", "\n", "# mutliple W3 with X (F)(B,N,F,T)->(B, N, T) ", "\n", "# transpose  (B, N, T)  -> (B, T, N)", "\n", "# for example (1)(32, 307, 1, 12) -> (32, 307, 12) -transpose-> (32, 12, 307)", "\n", "RHS", "=", "torch", ".", "matmul", "(", "self", ".", "_W3", ",", "X", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "\n", "# Then, we multiply LHS with RHS : ", "\n", "# (B,N,T)(B,T, N)->(B,N,N)", "\n", "# for example (32, 307, 12) * (32, 12, 307) -> (32, 307, 307) ", "\n", "# Then multiply Vs(N,N) with the output", "\n", "# (N,N)(B, N, N)->(B,N,N) (32, 307, 307)", "\n", "# for example (307, 307) *  (32, 307, 307) ->   (32, 307, 307)", "\n", "S", "=", "torch", ".", "matmul", "(", "self", ".", "_Vs", ",", "torch", ".", "sigmoid", "(", "torch", ".", "matmul", "(", "LHS", ",", "RHS", ")", "+", "self", ".", "_bs", ")", ")", "\n", "S", "=", "F", ".", "softmax", "(", "S", ",", "dim", "=", "1", ")", "\n", "return", "S", "# (B,N,N) for example (32, 307, 307)", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.TemporalAttention.__init__": [[275, 287], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "astgcn.TemporalAttention._reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "num_of_vertices", ":", "int", ",", "num_of_timesteps", ":", "int", ")", ":", "\n", "        ", "super", "(", "TemporalAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_U1", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_of_vertices", ")", ")", "# for example 307", "\n", "self", ".", "_U2", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_channels", ",", "num_of_vertices", ")", ")", "#for example (1, 307)", "\n", "self", ".", "_U3", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_channels", ")", ")", "# for example (1)", "\n", "self", ".", "_be", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "1", ",", "num_of_timesteps", ",", "num_of_timesteps", ")", "\n", ")", "# for example (1,12,12)", "\n", "self", ".", "_Ve", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_of_timesteps", ",", "num_of_timesteps", ")", ")", "#for example (12, 12)", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.TemporalAttention._reset_parameters": [[288, 294], ["astgcn.TemporalAttention.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.TemporalAttention.forward": [[295, 329], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "X.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of the temporal attention layer.\n\n        Arg types:\n            * **X** (PyTorch FloatTensor) - Node features for T time periods, with shape (B, N_nodes, F_in, T_in).\n\n        Return types:\n            * **E** (PyTorch FloatTensor) - Temporal attention score matrices, with shape (B, T_in, T_in).\n        \"\"\"", "\n", "# lhs = left hand side embedding;", "\n", "# to calculcate it : ", "\n", "# permute x:(B, N, F_in, T) -> (B, T, F_in, N)  ", "\n", "# multiply with U1 (B, T, F_in, N)(N) -> (B,T,F_in)", "\n", "# multiply with U2 (B,T,F_in)(F_in,N)->(B,T,N)", "\n", "# for example (32, 307, 1, 12) -premute-> (32, 12, 1, 307) * (307) -> (32, 12, 1) * (1, 307) -> (32, 12, 307) ", "\n", "LHS", "=", "torch", ".", "matmul", "(", "torch", ".", "matmul", "(", "X", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ",", "self", ".", "_U1", ")", ",", "self", ".", "_U2", ")", "# (32, 12, 307) ", "\n", "\n", "\n", "#rhs = right hand side embedding", "\n", "# to calculcate it : ", "\n", "# mutliple U3 with X (F)(B,N,F,T)->(B, N, T)", "\n", "# for example (1)(32, 307, 1, 12) -> (32, 307, 12)", "\n", "RHS", "=", "torch", ".", "matmul", "(", "self", ".", "_U3", ",", "X", ")", "# (32, 307, 12)", "\n", "\n", "# Them we multiply LHS with RHS : ", "\n", "# (B,T,N)(B,N,T)->(B,T,T)", "\n", "# for example (32, 12, 307) * (32, 307, 12) -> (32, 12, 12) ", "\n", "# Then multiply Ve(T,T) with the output", "\n", "# (T,T)(B, T, T)->(B,T,T)", "\n", "# for example (12, 12) *  (32, 12, 12) ->   (32, 12, 12)", "\n", "E", "=", "torch", ".", "matmul", "(", "self", ".", "_Ve", ",", "torch", ".", "sigmoid", "(", "torch", ".", "matmul", "(", "LHS", ",", "RHS", ")", "+", "self", ".", "_be", ")", ")", "\n", "E", "=", "F", ".", "softmax", "(", "E", ",", "dim", "=", "1", ")", "#  (B, T, T)  for example (32, 12, 12)", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.ASTGCNBlock.__init__": [[363, 400], ["torch.Module.__init__", "astgcn.TemporalAttention", "astgcn.SpatialAttention", "astgcn.ChebConvAttention", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "astgcn.ASTGCNBlock._reset_parameters"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "K", ":", "int", ",", "\n", "nb_chev_filter", ":", "int", ",", "\n", "nb_time_filter", ":", "int", ",", "\n", "time_strides", ":", "int", ",", "\n", "num_of_vertices", ":", "int", ",", "\n", "num_of_timesteps", ":", "int", ",", "\n", "normalization", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ASTGCNBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_temporal_attention", "=", "TemporalAttention", "(", "\n", "in_channels", ",", "num_of_vertices", ",", "num_of_timesteps", "\n", ")", "\n", "self", ".", "_spatial_attention", "=", "SpatialAttention", "(", "\n", "in_channels", ",", "num_of_vertices", ",", "num_of_timesteps", "\n", ")", "\n", "self", ".", "_chebconv_attention", "=", "ChebConvAttention", "(", "\n", "in_channels", ",", "nb_chev_filter", ",", "K", ",", "normalization", ",", "bias", "\n", ")", "\n", "self", ".", "_time_convolution", "=", "nn", ".", "Conv2d", "(", "\n", "nb_chev_filter", ",", "\n", "nb_time_filter", ",", "\n", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "time_strides", ")", ",", "\n", "padding", "=", "(", "0", ",", "1", ")", ",", "\n", ")", "\n", "self", ".", "_residual_convolution", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "nb_time_filter", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "time_strides", ")", "\n", ")", "\n", "self", ".", "_layer_norm", "=", "nn", ".", "LayerNorm", "(", "nb_time_filter", ")", "\n", "self", ".", "_normalization", "=", "normalization", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.ASTGCNBlock._reset_parameters": [[401, 407], ["astgcn.ASTGCNBlock.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.ASTGCNBlock.forward": [[408, 482], ["astgcn.ASTGCNBlock._temporal_attention", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "astgcn.ASTGCNBlock.reshape", "astgcn.ASTGCNBlock._spatial_attention", "astgcn.ASTGCNBlock._time_convolution", "astgcn.ASTGCNBlock._residual_convolution", "astgcn.ASTGCNBlock._layer_norm", "X.permute.permute.permute", "X.permute.permute.reshape", "isinstance", "torch_geometric.data.Data", "range", "torch.relu", "torch.relu", "torch.relu", "range", "torch.relu", "torch.relu", "torch.relu", "torch.relu.permute", "X.permute.permute.permute", "torch.relu().permute", "torch.relu().permute", "torch.relu().permute", "torch.relu.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_geometric.data.Data", "torch.relu.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch_geometric.transforms.LaplacianLambdaMax", "astgcn.ASTGCNBlock._chebconv_attention", "astgcn.ASTGCNBlock._chebconv_attention", "torch_geometric.transforms.LaplacianLambdaMax"], "methods", ["None"], ["", "", "", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "Union", "[", "torch", ".", "LongTensor", ",", "List", "[", "torch", ".", "LongTensor", "]", "]", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass with the ASTGCN block.\n\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Node features for T time periods, with shape (B, N_nodes, F_in, T_in).\n            * **edge_index** (LongTensor): Edge indices, can be an array of a list of Tensor arrays, depending on whether edges change over time.\n\n        Return types:\n            * **X** (PyTorch Float Tensor) - Hidden state tensor for all nodes, with shape (B, N_nodes, nb_time_filter, T_out).\n        \"\"\"", "\n", "batch_size", ",", "num_of_vertices", ",", "num_of_features", ",", "num_of_timesteps", "=", "X", ".", "shape", "# (32, 307, 1, 12)", "\n", "\n", "X_tilde", "=", "self", ".", "_temporal_attention", "(", "X", ")", "# (b, T, T)  (32, 12, 12) * reshaped x(32, 307, 12)  -reshape> (32, 307, 1, 12)", "\n", "# xreshaped is e.g. (32, 307, 12) * (32, 12, 12) -then_reshaped> (32, 307, 1, 12)", "\n", "X_tilde", "=", "torch", ".", "matmul", "(", "X", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "num_of_timesteps", ")", ",", "X_tilde", ")", "\n", "X_tilde", "=", "X_tilde", ".", "reshape", "(", "\n", "batch_size", ",", "num_of_vertices", ",", "num_of_features", ",", "num_of_timesteps", "\n", ")", "\n", "X_tilde", "=", "self", ".", "_spatial_attention", "(", "X_tilde", ")", "# (B,N,N) for example (32, 307, 307)", "\n", "\n", "if", "not", "isinstance", "(", "edge_index", ",", "list", ")", ":", "\n", "            ", "data", "=", "Data", "(", "\n", "edge_index", "=", "edge_index", ",", "edge_attr", "=", "None", ",", "num_nodes", "=", "num_of_vertices", "\n", ")", "\n", "if", "self", ".", "_normalization", "!=", "\"sym\"", ":", "\n", "                ", "lambda_max", "=", "LaplacianLambdaMax", "(", ")", "(", "data", ")", ".", "lambda_max", "\n", "", "else", ":", "\n", "                ", "lambda_max", "=", "None", "\n", "", "X_hat", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "num_of_timesteps", ")", ":", "\n", "                ", "X_hat", ".", "append", "(", "\n", "torch", ".", "unsqueeze", "(", "\n", "self", ".", "_chebconv_attention", "(", "\n", "X", "[", ":", ",", ":", ",", ":", ",", "t", "]", ",", "edge_index", ",", "X_tilde", ",", "lambda_max", "=", "lambda_max", "\n", ")", ",", "\n", "-", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "", "X_hat", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "X_hat", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "X_hat", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "num_of_timesteps", ")", ":", "\n", "                ", "data", "=", "Data", "(", "\n", "edge_index", "=", "edge_index", "[", "t", "]", ",", "edge_attr", "=", "None", ",", "num_nodes", "=", "num_of_vertices", "\n", ")", "\n", "if", "self", ".", "_normalization", "!=", "\"sym\"", ":", "\n", "                    ", "lambda_max", "=", "LaplacianLambdaMax", "(", ")", "(", "data", ")", ".", "lambda_max", "\n", "", "else", ":", "\n", "                    ", "lambda_max", "=", "None", "\n", "", "X_hat", ".", "append", "(", "\n", "torch", ".", "unsqueeze", "(", "\n", "self", ".", "_chebconv_attention", "(", "\n", "X", "[", ":", ",", ":", ",", ":", ",", "t", "]", ",", "edge_index", "[", "t", "]", ",", "X_tilde", ",", "lambda_max", "=", "lambda_max", "\n", ")", ",", "\n", "-", "1", ",", "\n", ")", "\n", ")", "\n", "", "X_hat", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "X_hat", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "# (b,N,F,T)->(b,F,N,T) for example (32, 307, 64, 12) -premute->(32, 64, 307,12)", "\n", "# then convolution along the time axis is applied", "\n", "", "X_hat", "=", "self", ".", "_time_convolution", "(", "X_hat", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "# will give (32, 64, 307,12)", "\n", "# (b,N,F,T)-permute>(b,F,N,T) (1,1)->(b,F,N,T)  (32, 64, 307, 12)", "\n", "X", "=", "self", ".", "_residual_convolution", "(", "X", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "# will also give (32, 64, 307,12)", "\n", "#-adding X + X_hat->(32, 64, 307, 12)-premuting-> (32, 12, 307, 64)-layer_normalization_-premuting->(32, 307, 64,12) ", "\n", "X", "=", "self", ".", "_layer_norm", "(", "F", ".", "relu", "(", "X", "+", "X_hat", ")", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "X", "=", "X", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "return", "X", "# (b,N,F,T) for example (32, 307, 64,12) ", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.ASTGCN.__init__": [[519, 576], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "astgcn.ASTGCN._blocklist.extend", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "astgcn.ASTGCN._reset_parameters", "int", "astgcn.ASTGCNBlock", "astgcn.ASTGCNBlock", "range"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "nb_block", ":", "int", ",", "\n", "in_channels", ":", "int", ",", "\n", "K", ":", "int", ",", "\n", "nb_chev_filter", ":", "int", ",", "\n", "nb_time_filter", ":", "int", ",", "\n", "time_strides", ":", "int", ",", "\n", "num_for_predict", ":", "int", ",", "\n", "len_input", ":", "int", ",", "\n", "num_of_vertices", ":", "int", ",", "\n", "normalization", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "ASTGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_blocklist", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "ASTGCNBlock", "(", "\n", "in_channels", ",", "\n", "K", ",", "\n", "nb_chev_filter", ",", "\n", "nb_time_filter", ",", "\n", "time_strides", ",", "\n", "num_of_vertices", ",", "\n", "len_input", ",", "\n", "normalization", ",", "\n", "bias", ",", "\n", ")", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "_blocklist", ".", "extend", "(", "\n", "[", "\n", "ASTGCNBlock", "(", "\n", "nb_time_filter", ",", "\n", "K", ",", "\n", "nb_chev_filter", ",", "\n", "nb_time_filter", ",", "\n", "1", ",", "\n", "num_of_vertices", ",", "\n", "len_input", "//", "time_strides", ",", "\n", "normalization", ",", "\n", "bias", ",", "\n", ")", "\n", "for", "_", "in", "range", "(", "nb_block", "-", "1", ")", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "_final_conv", "=", "nn", ".", "Conv2d", "(", "\n", "int", "(", "len_input", "/", "time_strides", ")", ",", "\n", "num_for_predict", ",", "\n", "kernel_size", "=", "(", "1", ",", "nb_time_filter", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.ASTGCN._reset_parameters": [[577, 586], ["astgcn.ASTGCN.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Resetting the parameters.\n        \"\"\"", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.astgcn.ASTGCN.forward": [[587, 611], ["astgcn.ASTGCN._final_conv", "block.permute", "block", "block.permute"], "methods", ["None"], ["", "", "", "def", "forward", "(", "\n", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "edge_index", ":", "torch", ".", "LongTensor", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass.\n\n        Arg types:\n            * **X** (PyTorch FloatTensor) - Node features for T time periods, with shape (B, N_nodes, F_in, T_in).\n            * **edge_index** (PyTorch LongTensor): Edge indices, can be an array of a list of Tensor arrays, depending on whether edges change over time.\n\n        Return types:\n            * **X** (PyTorch FloatTensor)* - Hidden state tensor for all nodes, with shape (B, N_nodes, T_out).\n        \"\"\"", "\n", "for", "block", "in", "self", ".", "_blocklist", ":", "\n", "# original x is (B,N,F_in,T) will give (B,N,F_out,T) for example (32, 307, 1, 12) -> (32, 307, 64, 12) ", "\n", "            ", "X", "=", "block", "(", "X", ",", "edge_index", ")", "\n", "\n", "# (b,N,F,T)->(b,T,N,F)-conv<1,F>->(b,c_out*T,N,1) ", "\n", "# for example (32, 307, 64, 12) -permute-> (32, 12, 307,64) -final_conv-> (32, 12, 307, 1)", "\n", "", "X", "=", "self", ".", "_final_conv", "(", "X", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "# (b,c_out*T,N)->(b,N,T)", "\n", "X", "=", "X", "[", ":", ",", ":", ",", ":", ",", "-", "1", "]", "# (b,c_out*T,N) for example (32, 12, 307)", "\n", "X", "=", "X", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# (b,T,N)-> (b,N,T)", "\n", "return", "X", "#(b,N,T) for exmaple (32, 307,12)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.stgcn.TemporalConv.__init__": [[21, 26], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "kernel_size", ":", "int", "=", "3", ")", ":", "\n", "        ", "super", "(", "TemporalConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "(", "1", ",", "kernel_size", ")", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "(", "1", ",", "kernel_size", ")", ")", "\n", "self", ".", "conv_3", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "(", "1", ",", "kernel_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.stgcn.TemporalConv.forward": [[27, 45], ["X.permute.permute.permute", "stgcn.TemporalConv.conv_1", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.relu", "torch.relu", "torch.relu", "H.permute.permute.permute", "stgcn.TemporalConv.conv_2", "stgcn.TemporalConv.conv_3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"Forward pass through temporal convolution block.\n\n        Arg types:\n            * **X** (torch.FloatTensor) -  Input data of shape\n                (batch_size, input_time_steps, num_nodes, in_channels).\n\n        Return types:\n            * **H** (torch.FloatTensor) - Output data of shape\n                (batch_size, in_channels, num_nodes, input_time_steps).\n        \"\"\"", "\n", "X", "=", "X", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", "P", "=", "self", ".", "conv_1", "(", "X", ")", "\n", "Q", "=", "torch", ".", "sigmoid", "(", "self", ".", "conv_2", "(", "X", ")", ")", "\n", "PQ", "=", "P", "*", "Q", "\n", "H", "=", "F", ".", "relu", "(", "PQ", "+", "self", ".", "conv_3", "(", "X", ")", ")", "\n", "H", "=", "H", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.stgcn.STConv.__init__": [[88, 130], ["torch.Module.__init__", "stgcn.TemporalConv", "torch_geometric.nn.ChebConv", "stgcn.TemporalConv", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_nodes", ":", "int", ",", "\n", "in_channels", ":", "int", ",", "\n", "hidden_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "\n", "kernel_size", ":", "int", ",", "\n", "K", ":", "int", ",", "\n", "normalization", ":", "str", "=", "\"sym\"", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", "STConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "hidden_channels", "=", "hidden_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "normalization", "=", "normalization", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "_temporal_conv1", "=", "TemporalConv", "(", "\n", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "hidden_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", ")", "\n", "\n", "self", ".", "_graph_conv", "=", "ChebConv", "(", "\n", "in_channels", "=", "hidden_channels", ",", "\n", "out_channels", "=", "hidden_channels", ",", "\n", "K", "=", "K", ",", "\n", "normalization", "=", "normalization", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "\n", "self", ".", "_temporal_conv2", "=", "TemporalConv", "(", "\n", "in_channels", "=", "hidden_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", ")", "\n", "\n", "self", ".", "_batch_norm", "=", "nn", ".", "BatchNorm2d", "(", "num_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.stgcn.STConv.forward": [[131, 161], ["stgcn.STConv._temporal_conv1", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "range", "torch.relu", "torch.relu", "torch.relu", "stgcn.STConv._temporal_conv2", "T.permute.permute.permute", "stgcn.STConv._batch_norm", "T.permute.permute.permute", "stgcn.STConv.size", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "stgcn.STConv.size", "stgcn.STConv._graph_conv"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "X", ":", "torch", ".", "FloatTensor", ",", "\n", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "\n", "        ", "r\"\"\"Forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph.\n\n        Arg types:\n            * **X** (PyTorch FloatTensor) - Sequence of node features of shape (Batch size X Input time steps X Num nodes X In channels).\n            * **edge_index** (PyTorch LongTensor) - Graph edge indices.\n            * **edge_weight** (PyTorch LongTensor, optional)- Edge weight vector.\n\n        Return types:\n            * **T** (PyTorch FloatTensor) - Sequence of node features.\n        \"\"\"", "\n", "T_0", "=", "self", ".", "_temporal_conv1", "(", "X", ")", "\n", "T", "=", "torch", ".", "zeros_like", "(", "T_0", ")", ".", "to", "(", "T_0", ".", "device", ")", "\n", "for", "b", "in", "range", "(", "T_0", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "T_0", ".", "size", "(", "1", ")", ")", ":", "\n", "                ", "T", "[", "b", "]", "[", "t", "]", "=", "self", ".", "_graph_conv", "(", "T_0", "[", "b", "]", "[", "t", "]", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "", "", "T", "=", "F", ".", "relu", "(", "T", ")", "\n", "T", "=", "self", ".", "_temporal_conv2", "(", "T", ")", "\n", "T", "=", "T", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "T", "=", "self", ".", "_batch_norm", "(", "T", ")", "\n", "T", "=", "T", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "return", "T", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCNBlock.__init__": [[24, 52], ["torch.Module.__init__", "torch_geometric.nn.ChebConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "mstgcn.MSTGCNBlock._reset_parameters"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ":", "int", ",", "\n", "K", ":", "int", ",", "\n", "nb_chev_filter", ":", "int", ",", "\n", "nb_time_filter", ":", "int", ",", "\n", "time_strides", ":", "int", ",", "\n", ")", ":", "\n", "        ", "super", "(", "MSTGCNBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_cheb_conv", "=", "ChebConv", "(", "in_channels", ",", "nb_chev_filter", ",", "K", ",", "normalization", "=", "None", ")", "\n", "\n", "self", ".", "_time_conv", "=", "nn", ".", "Conv2d", "(", "\n", "nb_chev_filter", ",", "\n", "nb_time_filter", ",", "\n", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "time_strides", ")", ",", "\n", "padding", "=", "(", "0", ",", "1", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_residual_conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "nb_time_filter", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "time_strides", ")", "\n", ")", "\n", "\n", "self", ".", "_layer_norm", "=", "nn", ".", "LayerNorm", "(", "nb_time_filter", ")", "\n", "self", ".", "nb_time_filter", "=", "nb_time_filter", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCNBlock._reset_parameters": [[53, 59], ["mstgcn.MSTGCNBlock.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCNBlock.forward": [[60, 121], ["mstgcn.MSTGCNBlock._time_conv", "mstgcn.MSTGCNBlock._residual_conv", "mstgcn.MSTGCNBlock._layer_norm", "X.permute.permute.permute", "isinstance", "X.permute.permute.permute", "torch.relu.reshape", "torch.relu.permute", "torch.relu", "torch.relu", "torch.relu", "torch.relu.permute", "torch.relu.reshape", "torch.relu.permute", "range", "torch.relu", "torch.relu", "torch.relu", "torch.relu.permute", "X.permute.permute.permute", "torch.relu().permute", "torch.relu().permute", "torch.relu().permute", "mstgcn.MSTGCNBlock._cheb_conv", "torch.relu.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_geometric.transforms.LaplacianLambdaMax", "torch_geometric.data.Data", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch_geometric.transforms.LaplacianLambdaMax", "torch_geometric.data.Data", "mstgcn.MSTGCNBlock._cheb_conv"], "methods", ["None"], ["", "", "", "def", "forward", "(", "\n", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "edge_index", ":", "torch", ".", "LongTensor", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass with a single MSTGCN block.\n\n        Arg types:\n            * X (PyTorch FloatTensor) - Node features for T time periods, with shape (B, N_nodes, F_in, T_in).\n            * edge_index (PyTorch LongTensor): Edge indices, can be an array of a list of Tensor arrays, depending on whether edges change over time.\n\n        Return types:\n            * X (PyTorch FloatTensor) - Hidden state tensor for all nodes, with shape (B, N_nodes, nb_time_filter, T_out).\n        \"\"\"", "\n", "\n", "batch_size", ",", "num_of_vertices", ",", "in_channels", ",", "num_of_timesteps", "=", "X", ".", "shape", "\n", "\n", "if", "not", "isinstance", "(", "edge_index", ",", "list", ")", ":", "\n", "\n", "            ", "lambda_max", "=", "LaplacianLambdaMax", "(", ")", "(", "\n", "Data", "(", "edge_index", "=", "edge_index", ",", "edge_attr", "=", "None", ",", "num_nodes", "=", "num_of_vertices", ")", "\n", ")", ".", "lambda_max", "\n", "\n", "X_tilde", "=", "X", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", "\n", "X_tilde", "=", "X_tilde", ".", "reshape", "(", "\n", "num_of_vertices", ",", "in_channels", ",", "num_of_timesteps", "*", "batch_size", "\n", ")", "\n", "X_tilde", "=", "X_tilde", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "X_tilde", "=", "F", ".", "relu", "(", "\n", "self", ".", "_cheb_conv", "(", "x", "=", "X_tilde", ",", "edge_index", "=", "edge_index", ",", "lambda_max", "=", "lambda_max", ")", "\n", ")", "\n", "X_tilde", "=", "X_tilde", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "X_tilde", "=", "X_tilde", ".", "reshape", "(", "\n", "num_of_vertices", ",", "self", ".", "nb_time_filter", ",", "batch_size", ",", "num_of_timesteps", "\n", ")", "\n", "X_tilde", "=", "X_tilde", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", "\n", "\n", "", "else", ":", "\n", "            ", "X_tilde", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "num_of_timesteps", ")", ":", "\n", "                ", "lambda_max", "=", "LaplacianLambdaMax", "(", ")", "(", "\n", "Data", "(", "\n", "edge_index", "=", "edge_index", "[", "t", "]", ",", "\n", "edge_attr", "=", "None", ",", "\n", "num_nodes", "=", "num_of_vertices", ",", "\n", ")", "\n", ")", ".", "lambda_max", "\n", "X_tilde", ".", "append", "(", "\n", "torch", ".", "unsqueeze", "(", "\n", "self", ".", "_cheb_conv", "(", "\n", "X", "[", ":", ",", ":", ",", ":", ",", "t", "]", ",", "edge_index", "[", "t", "]", ",", "lambda_max", "=", "lambda_max", "\n", ")", ",", "\n", "-", "1", ",", "\n", ")", "\n", ")", "\n", "", "X_tilde", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "X_tilde", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "", "X_tilde", "=", "self", ".", "_time_conv", "(", "X_tilde", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "X", "=", "self", ".", "_residual_conv", "(", "X", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "X", "=", "self", ".", "_layer_norm", "(", "F", ".", "relu", "(", "X", "+", "X_tilde", ")", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "X", "=", "X", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN.__init__": [[140, 171], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mstgcn.MSTGCN._blocklist.extend", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mstgcn.MSTGCN._reset_parameters", "int", "mstgcn.MSTGCNBlock", "mstgcn.MSTGCNBlock", "range"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "nb_block", ":", "int", ",", "\n", "in_channels", ":", "int", ",", "\n", "K", ":", "int", ",", "\n", "nb_chev_filter", ":", "int", ",", "\n", "nb_time_filter", ":", "int", ",", "\n", "time_strides", ":", "int", ",", "\n", "num_for_predict", ":", "int", ",", "\n", "len_input", ":", "int", ",", "\n", ")", ":", "\n", "        ", "super", "(", "MSTGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_blocklist", "=", "nn", ".", "ModuleList", "(", "\n", "[", "MSTGCNBlock", "(", "in_channels", ",", "K", ",", "nb_chev_filter", ",", "nb_time_filter", ",", "time_strides", ")", "]", "\n", ")", "\n", "\n", "self", ".", "_blocklist", ".", "extend", "(", "\n", "[", "\n", "MSTGCNBlock", "(", "nb_time_filter", ",", "K", ",", "nb_chev_filter", ",", "nb_time_filter", ",", "1", ")", "\n", "for", "_", "in", "range", "(", "nb_block", "-", "1", ")", "\n", "]", "\n", ")", "\n", "\n", "self", ".", "_final_conv", "=", "nn", ".", "Conv2d", "(", "\n", "int", "(", "len_input", "/", "time_strides", ")", ",", "\n", "num_for_predict", ",", "\n", "kernel_size", "=", "(", "1", ",", "nb_time_filter", ")", ",", "\n", ")", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN._reset_parameters": [[172, 181], ["mstgcn.MSTGCN.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Resetting the model parameters.\n        \"\"\"", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.attention.mstgcn.MSTGCN.forward": [[182, 201], ["[].permute", "block", "mstgcn.MSTGCN._final_conv", "block.permute"], "methods", ["None"], ["", "", "", "def", "forward", "(", "\n", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "edge_index", ":", "torch", ".", "LongTensor", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "r\"\"\"Making a forward pass. This module takes a likst of MSTGCN blocks and use a final convolution to serve as a multi-component fusion.\n        B is the batch size. N_nodes is the number of nodes in the graph. F_in is the dimension of input features.\n        T_in is the length of input sequence in time. T_out is the length of output sequence in time.\n\n        Arg types:\n            * X (PyTorch FloatTensor) - Node features for T time periods, with shape (B, N_nodes, F_in, T_in).\n            * edge_index (PyTorch LongTensor): Edge indices, can be an array of a list of Tensor arrays, depending on whether edges change over time.\n\n        Return types:\n            * X (PyTorch FloatTensor) - Hidden state tensor for all nodes, with shape (B, N_nodes, T_out).\n        \"\"\"", "\n", "for", "block", "in", "self", ".", "_blocklist", ":", "\n", "            ", "X", "=", "block", "(", "X", ",", "edge_index", ")", "\n", "\n", "", "X", "=", "self", ".", "_final_conv", "(", "X", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "[", ":", ",", ":", ",", ":", ",", "-", "1", "]", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM.__init__": [[20, 35], ["super().__init__", "heterogclstm.HeteroGCLSTM._create_parameters_and_layers", "heterogclstm.HeteroGCLSTM._set_parameters"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_parameters"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels_dict", ":", "dict", ",", "\n", "out_channels", ":", "int", ",", "\n", "metadata", ":", "tuple", ",", "\n", "bias", ":", "bool", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "HeteroGCLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels_dict", "=", "in_channels_dict", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "metadata", "=", "metadata", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "_create_parameters_and_layers", "(", ")", "\n", "self", ".", "_set_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_input_gate_parameters_and_layers": [[36, 45], ["torch_geometric.nn.HeteroConv", "torch.nn.Parameter", "torch.nn.Parameter", "torch_geometric.nn.SAGEConv", "torch.Tensor", "heterogclstm.HeteroGCLSTM.in_channels_dict.items", "torch.Tensor"], "methods", ["None"], ["", "def", "_create_input_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_i", "=", "HeteroConv", "(", "{", "edge_type", ":", "SAGEConv", "(", "in_channels", "=", "(", "-", "1", ",", "-", "1", ")", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "bias", "=", "self", ".", "bias", ")", "for", "edge_type", "in", "self", ".", "metadata", "[", "1", "]", "}", ")", "\n", "\n", "self", ".", "W_i", "=", "{", "node_type", ":", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "self", ".", "out_channels", ")", ")", "\n", "for", "node_type", ",", "in_channels", "in", "self", ".", "in_channels_dict", ".", "items", "(", ")", "}", "\n", "self", ".", "b_i", "=", "{", "node_type", ":", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", "\n", "for", "node_type", "in", "self", ".", "in_channels_dict", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_forget_gate_parameters_and_layers": [[46, 55], ["torch_geometric.nn.HeteroConv", "torch.nn.Parameter", "torch.nn.Parameter", "torch_geometric.nn.SAGEConv", "torch.Tensor", "heterogclstm.HeteroGCLSTM.in_channels_dict.items", "torch.Tensor"], "methods", ["None"], ["", "def", "_create_forget_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_f", "=", "HeteroConv", "(", "{", "edge_type", ":", "SAGEConv", "(", "in_channels", "=", "(", "-", "1", ",", "-", "1", ")", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "bias", "=", "self", ".", "bias", ")", "for", "edge_type", "in", "self", ".", "metadata", "[", "1", "]", "}", ")", "\n", "\n", "self", ".", "W_f", "=", "{", "node_type", ":", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "self", ".", "out_channels", ")", ")", "\n", "for", "node_type", ",", "in_channels", "in", "self", ".", "in_channels_dict", ".", "items", "(", ")", "}", "\n", "self", ".", "b_f", "=", "{", "node_type", ":", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", "\n", "for", "node_type", "in", "self", ".", "in_channels_dict", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_cell_state_parameters_and_layers": [[56, 65], ["torch_geometric.nn.HeteroConv", "torch.nn.Parameter", "torch.nn.Parameter", "torch_geometric.nn.SAGEConv", "torch.Tensor", "heterogclstm.HeteroGCLSTM.in_channels_dict.items", "torch.Tensor"], "methods", ["None"], ["", "def", "_create_cell_state_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_c", "=", "HeteroConv", "(", "{", "edge_type", ":", "SAGEConv", "(", "in_channels", "=", "(", "-", "1", ",", "-", "1", ")", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "bias", "=", "self", ".", "bias", ")", "for", "edge_type", "in", "self", ".", "metadata", "[", "1", "]", "}", ")", "\n", "\n", "self", ".", "W_c", "=", "{", "node_type", ":", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "self", ".", "out_channels", ")", ")", "\n", "for", "node_type", ",", "in_channels", "in", "self", ".", "in_channels_dict", ".", "items", "(", ")", "}", "\n", "self", ".", "b_c", "=", "{", "node_type", ":", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", "\n", "for", "node_type", "in", "self", ".", "in_channels_dict", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_output_gate_parameters_and_layers": [[66, 75], ["torch_geometric.nn.HeteroConv", "torch.nn.Parameter", "torch.nn.Parameter", "torch_geometric.nn.SAGEConv", "torch.Tensor", "heterogclstm.HeteroGCLSTM.in_channels_dict.items", "torch.Tensor"], "methods", ["None"], ["", "def", "_create_output_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_o", "=", "HeteroConv", "(", "{", "edge_type", ":", "SAGEConv", "(", "in_channels", "=", "(", "-", "1", ",", "-", "1", ")", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "bias", "=", "self", ".", "bias", ")", "for", "edge_type", "in", "self", ".", "metadata", "[", "1", "]", "}", ")", "\n", "\n", "self", ".", "W_o", "=", "{", "node_type", ":", "Parameter", "(", "torch", ".", "Tensor", "(", "in_channels", ",", "self", ".", "out_channels", ")", ")", "\n", "for", "node_type", ",", "in_channels", "in", "self", ".", "in_channels_dict", ".", "items", "(", ")", "}", "\n", "self", ".", "b_o", "=", "{", "node_type", ":", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "self", ".", "out_channels", ")", ")", "\n", "for", "node_type", "in", "self", ".", "in_channels_dict", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_parameters_and_layers": [[76, 81], ["heterogclstm.HeteroGCLSTM._create_input_gate_parameters_and_layers", "heterogclstm.HeteroGCLSTM._create_forget_gate_parameters_and_layers", "heterogclstm.HeteroGCLSTM._create_cell_state_parameters_and_layers", "heterogclstm.HeteroGCLSTM._create_output_gate_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_input_gate_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_forget_gate_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_cell_state_parameters_and_layers", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._create_output_gate_parameters_and_layers"], ["", "def", "_create_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "_create_input_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_forget_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_cell_state_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_output_gate_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_parameters": [[82, 99], ["torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.glorot"], "methods", ["None"], ["", "def", "_set_parameters", "(", "self", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "W_i", ":", "\n", "            ", "glorot", "(", "self", ".", "W_i", "[", "key", "]", ")", "\n", "", "for", "key", "in", "self", ".", "W_f", ":", "\n", "            ", "glorot", "(", "self", ".", "W_f", "[", "key", "]", ")", "\n", "", "for", "key", "in", "self", ".", "W_c", ":", "\n", "            ", "glorot", "(", "self", ".", "W_c", "[", "key", "]", ")", "\n", "", "for", "key", "in", "self", ".", "W_o", ":", "\n", "            ", "glorot", "(", "self", ".", "W_o", "[", "key", "]", ")", "\n", "", "for", "key", "in", "self", ".", "b_i", ":", "\n", "            ", "glorot", "(", "self", ".", "b_i", "[", "key", "]", ")", "\n", "", "for", "key", "in", "self", ".", "b_f", ":", "\n", "            ", "glorot", "(", "self", ".", "b_f", "[", "key", "]", ")", "\n", "", "for", "key", "in", "self", ".", "b_c", ":", "\n", "            ", "glorot", "(", "self", ".", "b_c", "[", "key", "]", ")", "\n", "", "for", "key", "in", "self", ".", "b_o", ":", "\n", "            ", "glorot", "(", "self", ".", "b_o", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_hidden_state": [[100, 104], ["torch.zeros", "x_dict.items"], "methods", ["None"], ["", "", "def", "_set_hidden_state", "(", "self", ",", "x_dict", ",", "h_dict", ")", ":", "\n", "        ", "if", "h_dict", "is", "None", ":", "\n", "            ", "h_dict", "=", "{", "node_type", ":", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "out_channels", ")", "for", "node_type", ",", "X", "in", "x_dict", ".", "items", "(", ")", "}", "\n", "", "return", "h_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_cell_state": [[105, 109], ["torch.zeros", "x_dict.items"], "methods", ["None"], ["", "def", "_set_cell_state", "(", "self", ",", "x_dict", ",", "c_dict", ")", ":", "\n", "        ", "if", "c_dict", "is", "None", ":", "\n", "            ", "c_dict", "=", "{", "node_type", ":", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "out_channels", ")", "for", "node_type", ",", "X", "in", "x_dict", ".", "items", "(", ")", "}", "\n", "", "return", "c_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_input_gate": [[110, 116], ["torch.matmul", "torch.sigmoid", "x_dict.items", "i_dict.items", "i_dict.items", "i_dict.items", "heterogclstm.HeteroGCLSTM.conv_i"], "methods", ["None"], ["", "def", "_calculate_input_gate", "(", "self", ",", "x_dict", ",", "edge_index_dict", ",", "h_dict", ",", "c_dict", ")", ":", "\n", "        ", "i_dict", "=", "{", "node_type", ":", "torch", ".", "matmul", "(", "X", ",", "self", ".", "W_i", "[", "node_type", "]", ")", "for", "node_type", ",", "X", "in", "x_dict", ".", "items", "(", ")", "}", "\n", "i_dict", "=", "{", "node_type", ":", "I", "+", "self", ".", "conv_i", "(", "h_dict", ",", "edge_index_dict", ")", "[", "node_type", "]", "for", "node_type", ",", "I", "in", "i_dict", ".", "items", "(", ")", "}", "\n", "i_dict", "=", "{", "node_type", ":", "I", "+", "self", ".", "b_i", "[", "node_type", "]", "for", "node_type", ",", "I", "in", "i_dict", ".", "items", "(", ")", "}", "\n", "i_dict", "=", "{", "node_type", ":", "torch", ".", "sigmoid", "(", "I", ")", "for", "node_type", ",", "I", "in", "i_dict", ".", "items", "(", ")", "}", "\n", "return", "i_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_forget_gate": [[117, 123], ["torch.matmul", "torch.sigmoid", "x_dict.items", "f_dict.items", "f_dict.items", "f_dict.items", "heterogclstm.HeteroGCLSTM.conv_f"], "methods", ["None"], ["", "def", "_calculate_forget_gate", "(", "self", ",", "x_dict", ",", "edge_index_dict", ",", "h_dict", ",", "c_dict", ")", ":", "\n", "        ", "f_dict", "=", "{", "node_type", ":", "torch", ".", "matmul", "(", "X", ",", "self", ".", "W_f", "[", "node_type", "]", ")", "for", "node_type", ",", "X", "in", "x_dict", ".", "items", "(", ")", "}", "\n", "f_dict", "=", "{", "node_type", ":", "F", "+", "self", ".", "conv_f", "(", "h_dict", ",", "edge_index_dict", ")", "[", "node_type", "]", "for", "node_type", ",", "F", "in", "f_dict", ".", "items", "(", ")", "}", "\n", "f_dict", "=", "{", "node_type", ":", "F", "+", "self", ".", "b_f", "[", "node_type", "]", "for", "node_type", ",", "F", "in", "f_dict", ".", "items", "(", ")", "}", "\n", "f_dict", "=", "{", "node_type", ":", "torch", ".", "sigmoid", "(", "F", ")", "for", "node_type", ",", "F", "in", "f_dict", ".", "items", "(", ")", "}", "\n", "return", "f_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_cell_state": [[124, 131], ["torch.matmul", "torch.tanh", "x_dict.items", "t_dict.items", "t_dict.items", "t_dict.items", "c_dict.items", "heterogclstm.HeteroGCLSTM.conv_c"], "methods", ["None"], ["", "def", "_calculate_cell_state", "(", "self", ",", "x_dict", ",", "edge_index_dict", ",", "h_dict", ",", "c_dict", ",", "i_dict", ",", "f_dict", ")", ":", "\n", "        ", "t_dict", "=", "{", "node_type", ":", "torch", ".", "matmul", "(", "X", ",", "self", ".", "W_c", "[", "node_type", "]", ")", "for", "node_type", ",", "X", "in", "x_dict", ".", "items", "(", ")", "}", "\n", "t_dict", "=", "{", "node_type", ":", "T", "+", "self", ".", "conv_c", "(", "h_dict", ",", "edge_index_dict", ")", "[", "node_type", "]", "for", "node_type", ",", "T", "in", "t_dict", ".", "items", "(", ")", "}", "\n", "t_dict", "=", "{", "node_type", ":", "T", "+", "self", ".", "b_c", "[", "node_type", "]", "for", "node_type", ",", "T", "in", "t_dict", ".", "items", "(", ")", "}", "\n", "t_dict", "=", "{", "node_type", ":", "torch", ".", "tanh", "(", "T", ")", "for", "node_type", ",", "T", "in", "t_dict", ".", "items", "(", ")", "}", "\n", "c_dict", "=", "{", "node_type", ":", "f_dict", "[", "node_type", "]", "*", "C", "+", "i_dict", "[", "node_type", "]", "*", "t_dict", "[", "node_type", "]", "for", "node_type", ",", "C", "in", "c_dict", ".", "items", "(", ")", "}", "\n", "return", "c_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_output_gate": [[132, 138], ["torch.matmul", "torch.sigmoid", "x_dict.items", "o_dict.items", "o_dict.items", "o_dict.items", "heterogclstm.HeteroGCLSTM.conv_o"], "methods", ["None"], ["", "def", "_calculate_output_gate", "(", "self", ",", "x_dict", ",", "edge_index_dict", ",", "h_dict", ",", "c_dict", ")", ":", "\n", "        ", "o_dict", "=", "{", "node_type", ":", "torch", ".", "matmul", "(", "X", ",", "self", ".", "W_o", "[", "node_type", "]", ")", "for", "node_type", ",", "X", "in", "x_dict", ".", "items", "(", ")", "}", "\n", "o_dict", "=", "{", "node_type", ":", "O", "+", "self", ".", "conv_o", "(", "h_dict", ",", "edge_index_dict", ")", "[", "node_type", "]", "for", "node_type", ",", "O", "in", "o_dict", ".", "items", "(", ")", "}", "\n", "o_dict", "=", "{", "node_type", ":", "O", "+", "self", ".", "b_o", "[", "node_type", "]", "for", "node_type", ",", "O", "in", "o_dict", ".", "items", "(", ")", "}", "\n", "o_dict", "=", "{", "node_type", ":", "torch", ".", "sigmoid", "(", "O", ")", "for", "node_type", ",", "O", "in", "o_dict", ".", "items", "(", ")", "}", "\n", "return", "o_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_hidden_state": [[139, 142], ["torch.tanh", "c_dict.items"], "methods", ["None"], ["", "def", "_calculate_hidden_state", "(", "self", ",", "o_dict", ",", "c_dict", ")", ":", "\n", "        ", "h_dict", "=", "{", "node_type", ":", "o_dict", "[", "node_type", "]", "*", "torch", ".", "tanh", "(", "C", ")", "for", "node_type", ",", "C", "in", "c_dict", ".", "items", "(", ")", "}", "\n", "return", "h_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM.forward": [[143, 180], ["heterogclstm.HeteroGCLSTM._set_hidden_state", "heterogclstm.HeteroGCLSTM._set_cell_state", "heterogclstm.HeteroGCLSTM._calculate_input_gate", "heterogclstm.HeteroGCLSTM._calculate_forget_gate", "heterogclstm.HeteroGCLSTM._calculate_cell_state", "heterogclstm.HeteroGCLSTM._calculate_output_gate", "heterogclstm.HeteroGCLSTM._calculate_hidden_state"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_hidden_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._set_cell_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_input_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_forget_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_cell_state", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_output_gate", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.hetero.heterogclstm.HeteroGCLSTM._calculate_hidden_state"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "x_dict", ",", "\n", "edge_index_dict", ",", "\n", "h_dict", "=", "None", ",", "\n", "c_dict", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Making a forward pass. If the hidden state and cell state\n        matrix dicts are not present when the forward pass is called these are\n        initialized with zeros.\n\n        Arg types:\n            * **x_dict** *(Dictionary where keys=Strings and values=PyTorch Float Tensors)* - Node features dicts. Can\n                be obtained via PyG method :obj:`snapshot.x_dict` where snapshot is a single HeteroData object.\n            * **edge_index_dict** *(Dictionary where keys=Tuples and values=PyTorch Long Tensors)* - Graph edge type\n                and index dicts. Can be obtained via PyG method :obj:`snapshot.edge_index_dict`.\n            * **h_dict** *(Dictionary where keys=Strings and values=PyTorch Float Tensor, optional)* - Node type and\n                hidden state matrix dict for all nodes.\n            * **c_dict** *(Dictionary where keys=Strings and values=PyTorch Float Tensor, optional)* - Node type and\n                cell state matrix dict for all nodes.\n\n        Return types:\n            * **h_dict** *(Dictionary where keys=Strings and values=PyTorch Float Tensor)* - Node type and\n                hidden state matrix dict for all nodes.\n            * **c_dict** *(Dictionary where keys=Strings and values=PyTorch Float Tensor)* - Node type and\n                cell state matrix dict for all nodes.\n        \"\"\"", "\n", "\n", "h_dict", "=", "self", ".", "_set_hidden_state", "(", "x_dict", ",", "h_dict", ")", "\n", "c_dict", "=", "self", ".", "_set_cell_state", "(", "x_dict", ",", "c_dict", ")", "\n", "i_dict", "=", "self", ".", "_calculate_input_gate", "(", "x_dict", ",", "edge_index_dict", ",", "h_dict", ",", "c_dict", ")", "\n", "f_dict", "=", "self", ".", "_calculate_forget_gate", "(", "x_dict", ",", "edge_index_dict", ",", "h_dict", ",", "c_dict", ")", "\n", "c_dict", "=", "self", ".", "_calculate_cell_state", "(", "x_dict", ",", "edge_index_dict", ",", "h_dict", ",", "c_dict", ",", "i_dict", ",", "f_dict", ")", "\n", "o_dict", "=", "self", ".", "_calculate_output_gate", "(", "x_dict", ",", "edge_index_dict", ",", "h_dict", ",", "c_dict", ")", "\n", "h_dict", "=", "self", ".", "_calculate_hidden_state", "(", "o_dict", ",", "c_dict", ")", "\n", "return", "h_dict", ",", "c_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.metr_la.METRLADatasetLoader.__init__": [[22, 26], ["os.path.join", "object.__init__", "metr_la.METRLADatasetLoader._read_web_data", "os.getcwd"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._read_web_data"], ["def", "__init__", "(", "self", ",", "raw_data_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"data\"", ")", ")", ":", "\n", "        ", "super", "(", "METRLADatasetLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "raw_data_dir", "=", "raw_data_dir", "\n", "self", ".", "_read_web_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.metr_la.METRLADatasetLoader._download_url": [[27, 31], ["six.moves.urllib.request.urlopen", "open", "out_file.write", "dl_file.read"], "methods", ["None"], ["", "def", "_download_url", "(", "self", ",", "url", ",", "save_path", ")", ":", "# pragma: no cover", "\n", "        ", "with", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", "as", "dl_file", ":", "\n", "            ", "with", "open", "(", "save_path", ",", "\"wb\"", ")", "as", "out_file", ":", "\n", "                ", "out_file", ".", "write", "(", "dl_file", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.metr_la.METRLADatasetLoader._read_web_data": [[32, 67], ["numpy.load", "numpy.load().transpose", "X.astype.astype.astype", "numpy.mean", "numpy.std", "torch.from_numpy", "torch.from_numpy", "os.path.isfile", "metr_la.METRLADatasetLoader._download_url", "os.path.join", "numpy.mean.reshape", "numpy.std.reshape", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "os.path.isfile", "os.path.isfile", "zipfile.ZipFile", "zip_fh.extractall", "numpy.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pems_bay.PemsBayDatasetLoader._download_url"], ["", "", "", "def", "_read_web_data", "(", "self", ")", ":", "\n", "        ", "url", "=", "\"https://graphmining.ai/temporal_datasets/METR-LA.zip\"", "\n", "\n", "# Check if zip file is in data folder from working directory, otherwise download", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "raw_data_dir", ",", "\"METR-LA.zip\"", ")", "\n", ")", ":", "# pragma: no cover", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "raw_data_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "raw_data_dir", ")", "\n", "", "self", ".", "_download_url", "(", "url", ",", "os", ".", "path", ".", "join", "(", "self", ".", "raw_data_dir", ",", "\"METR-LA.zip\"", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "raw_data_dir", ",", "\"adj_mat.npy\"", ")", "\n", ")", "or", "not", "os", ".", "path", ".", "isfile", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "raw_data_dir", ",", "\"node_values.npy\"", ")", "\n", ")", ":", "# pragma: no cover", "\n", "            ", "with", "zipfile", ".", "ZipFile", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "raw_data_dir", ",", "\"METR-LA.zip\"", ")", ",", "\"r\"", "\n", ")", "as", "zip_fh", ":", "\n", "                ", "zip_fh", ".", "extractall", "(", "self", ".", "raw_data_dir", ")", "\n", "\n", "", "", "A", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "raw_data_dir", ",", "\"adj_mat.npy\"", ")", ")", "\n", "X", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "raw_data_dir", ",", "\"node_values.npy\"", ")", ")", ".", "transpose", "(", "\n", "(", "1", ",", "2", ",", "0", ")", "\n", ")", "\n", "X", "=", "X", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Normalise as in DCRNN paper (via Z-Score Method)", "\n", "means", "=", "np", ".", "mean", "(", "X", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "\n", "X", "=", "X", "-", "means", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "stds", "=", "np", ".", "std", "(", "X", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "\n", "X", "=", "X", "/", "stds", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "\n", "self", ".", "A", "=", "torch", ".", "from_numpy", "(", "A", ")", "\n", "self", ".", "X", "=", "torch", ".", "from_numpy", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.metr_la.METRLADatasetLoader._get_edges_and_weights": [[68, 74], ["torch_geometric.utils.dense_to_sparse", "edge_indices.numpy.numpy.numpy", "values.numpy.numpy.numpy"], "methods", ["None"], ["", "def", "_get_edges_and_weights", "(", "self", ")", ":", "\n", "        ", "edge_indices", ",", "values", "=", "dense_to_sparse", "(", "self", ".", "A", ")", "\n", "edge_indices", "=", "edge_indices", ".", "numpy", "(", ")", "\n", "values", "=", "values", ".", "numpy", "(", ")", "\n", "self", ".", "edges", "=", "edge_indices", "\n", "self", ".", "edge_weights", "=", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.metr_la.METRLADatasetLoader._generate_task": [[75, 99], ["features.append", "target.append", "range", "metr_la.METRLADatasetLoader.X[].numpy", "metr_la.METRLADatasetLoader.X[].numpy"], "methods", ["None"], ["", "def", "_generate_task", "(", "self", ",", "num_timesteps_in", ":", "int", "=", "12", ",", "num_timesteps_out", ":", "int", "=", "12", ")", ":", "\n", "        ", "\"\"\"Uses the node features of the graph and generates a feature/target\n        relationship of the shape\n        (num_nodes, num_node_features, num_timesteps_in) -> (num_nodes, num_timesteps_out)\n        predicting the average traffic speed using num_timesteps_in to predict the\n        traffic conditions in the next num_timesteps_out\n\n        Args:\n            num_timesteps_in (int): number of timesteps the sequence model sees\n            num_timesteps_out (int): number of timesteps the sequence model has to predict\n        \"\"\"", "\n", "indices", "=", "[", "\n", "(", "i", ",", "i", "+", "(", "num_timesteps_in", "+", "num_timesteps_out", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "X", ".", "shape", "[", "2", "]", "-", "(", "num_timesteps_in", "+", "num_timesteps_out", ")", "+", "1", ")", "\n", "]", "\n", "\n", "# Generate observations", "\n", "features", ",", "target", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "j", "in", "indices", ":", "\n", "            ", "features", ".", "append", "(", "(", "self", ".", "X", "[", ":", ",", ":", ",", "i", ":", "i", "+", "num_timesteps_in", "]", ")", ".", "numpy", "(", ")", ")", "\n", "target", ".", "append", "(", "(", "self", ".", "X", "[", ":", ",", "0", ",", "i", "+", "num_timesteps_in", ":", "j", "]", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "self", ".", "features", "=", "features", "\n", "self", ".", "targets", "=", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.metr_la.METRLADatasetLoader.get_dataset": [[100, 117], ["metr_la.METRLADatasetLoader._get_edges_and_weights", "metr_la.METRLADatasetLoader._generate_task", "signal.StaticGraphTemporalSignal"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pems_bay.PemsBayDatasetLoader._get_edges_and_weights", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pems_bay.PemsBayDatasetLoader._generate_task"], ["", "def", "get_dataset", "(", "\n", "self", ",", "num_timesteps_in", ":", "int", "=", "12", ",", "num_timesteps_out", ":", "int", "=", "12", "\n", ")", "->", "StaticGraphTemporalSignal", ":", "\n", "        ", "\"\"\"Returns data iterator for METR-LA dataset as an instance of the\n        static graph temporal signal class.\n\n        Return types:\n            * **dataset** *(StaticGraphTemporalSignal)* - The METR-LA traffic\n                forecasting dataset.\n        \"\"\"", "\n", "self", ".", "_get_edges_and_weights", "(", ")", "\n", "self", ".", "_generate_task", "(", "num_timesteps_in", ",", "num_timesteps_out", ")", "\n", "dataset", "=", "StaticGraphTemporalSignal", "(", "\n", "self", ".", "edges", ",", "self", ".", "edge_weights", ",", "self", ".", "features", ",", "self", ".", "targets", "\n", ")", "\n", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmilllarge.WindmillOutputLargeDatasetLoader.__init__": [[15, 17], ["windmilllarge.WindmillOutputLargeDatasetLoader._read_web_data"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._read_web_data"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_read_web_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmilllarge.WindmillOutputLargeDatasetLoader._read_web_data": [[18, 21], ["json.loads", "six.moves.urllib.request.urlopen().read().decode", "six.moves.urllib.request.urlopen().read", "six.moves.urllib.request.urlopen"], "methods", ["None"], ["", "def", "_read_web_data", "(", "self", ")", ":", "\n", "        ", "url", "=", "\"https://graphmining.ai/temporal_datasets/windmill_output.json\"", "\n", "self", ".", "_dataset", "=", "json", ".", "loads", "(", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", ".", "read", "(", ")", ".", "decode", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmilllarge.WindmillOutputLargeDatasetLoader._get_edges": [[22, 24], ["numpy.array"], "methods", ["None"], ["", "def", "_get_edges", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edges", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"edges\"", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmilllarge.WindmillOutputLargeDatasetLoader._get_edge_weights": [[25, 27], ["numpy.array"], "methods", ["None"], ["", "def", "_get_edge_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edge_weights", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"weights\"", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmilllarge.WindmillOutputLargeDatasetLoader._get_targets_and_features": [[28, 40], ["numpy.stack", "numpy.mean", "numpy.std", "range", "range"], "methods", ["None"], ["", "def", "_get_targets_and_features", "(", "self", ")", ":", "\n", "        ", "stacked_target", "=", "np", ".", "stack", "(", "self", ".", "_dataset", "[", "\"block\"", "]", ")", "\n", "standardized_target", "=", "(", "stacked_target", "-", "np", ".", "mean", "(", "stacked_target", ",", "axis", "=", "0", ")", ")", "/", "(", "\n", "np", ".", "std", "(", "stacked_target", ",", "axis", "=", "0", ")", "+", "10", "**", "-", "10", "\n", ")", "\n", "self", ".", "features", "=", "[", "\n", "standardized_target", "[", "i", ":", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "standardized_target", ".", "shape", "[", "0", "]", "-", "self", ".", "lags", ")", "\n", "]", "\n", "self", ".", "targets", "=", "[", "\n", "standardized_target", "[", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "standardized_target", ".", "shape", "[", "0", "]", "-", "self", ".", "lags", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmilllarge.WindmillOutputLargeDatasetLoader.get_dataset": [[42, 58], ["windmilllarge.WindmillOutputLargeDatasetLoader._get_edges", "windmilllarge.WindmillOutputLargeDatasetLoader._get_edge_weights", "windmilllarge.WindmillOutputLargeDatasetLoader._get_targets_and_features", "signal.StaticGraphTemporalSignal"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edges", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edge_weights", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pedalme.PedalMeDatasetLoader._get_targets_and_features"], ["", "def", "get_dataset", "(", "self", ",", "lags", ":", "int", "=", "8", ")", "->", "StaticGraphTemporalSignal", ":", "\n", "        ", "\"\"\"Returning the Windmill Output data iterator.\n\n        Args types:\n            * **lags** *(int)* - The number of time lags.\n        Return types:\n            * **dataset** *(StaticGraphTemporalSignal)* - The Windmill Output dataset.\n        \"\"\"", "\n", "self", ".", "lags", "=", "lags", "\n", "self", ".", "_get_edges", "(", ")", "\n", "self", ".", "_get_edge_weights", "(", ")", "\n", "self", ".", "_get_targets_and_features", "(", ")", "\n", "dataset", "=", "StaticGraphTemporalSignal", "(", "\n", "self", ".", "_edges", ",", "self", ".", "_edge_weights", ",", "self", ".", "features", ",", "self", ".", "targets", "\n", ")", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.encovid.EnglandCovidDatasetLoader.__init__": [[20, 22], ["encovid.EnglandCovidDatasetLoader._read_web_data"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._read_web_data"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_read_web_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.encovid.EnglandCovidDatasetLoader._read_web_data": [[23, 26], ["json.loads", "six.moves.urllib.request.urlopen().read", "six.moves.urllib.request.urlopen"], "methods", ["None"], ["", "def", "_read_web_data", "(", "self", ")", ":", "\n", "        ", "url", "=", "\"https://raw.githubusercontent.com/benedekrozemberczki/pytorch_geometric_temporal/master/dataset/england_covid.json\"", "\n", "self", ".", "_dataset", "=", "json", ".", "loads", "(", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.encovid.EnglandCovidDatasetLoader._get_edges": [[27, 32], ["range", "encovid.EnglandCovidDatasetLoader._edges.append", "numpy.array", "str"], "methods", ["None"], ["", "def", "_get_edges", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edges", "=", "[", "]", "\n", "for", "time", "in", "range", "(", "self", ".", "_dataset", "[", "\"time_periods\"", "]", "-", "self", ".", "lags", ")", ":", "\n", "            ", "self", ".", "_edges", ".", "append", "(", "\n", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"edge_mapping\"", "]", "[", "\"edge_index\"", "]", "[", "str", "(", "time", ")", "]", ")", ".", "T", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.encovid.EnglandCovidDatasetLoader._get_edge_weights": [[34, 39], ["range", "encovid.EnglandCovidDatasetLoader._edge_weights.append", "numpy.array", "str"], "methods", ["None"], ["", "", "def", "_get_edge_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edge_weights", "=", "[", "]", "\n", "for", "time", "in", "range", "(", "self", ".", "_dataset", "[", "\"time_periods\"", "]", "-", "self", ".", "lags", ")", ":", "\n", "            ", "self", ".", "_edge_weights", ".", "append", "(", "\n", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"edge_mapping\"", "]", "[", "\"edge_weight\"", "]", "[", "str", "(", "time", ")", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.encovid.EnglandCovidDatasetLoader._get_targets_and_features": [[41, 54], ["numpy.array", "numpy.mean", "numpy.std", "range", "range"], "methods", ["None"], ["", "", "def", "_get_targets_and_features", "(", "self", ")", ":", "\n", "\n", "        ", "stacked_target", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"y\"", "]", ")", "\n", "standardized_target", "=", "(", "stacked_target", "-", "np", ".", "mean", "(", "stacked_target", ",", "axis", "=", "0", ")", ")", "/", "(", "\n", "np", ".", "std", "(", "stacked_target", ",", "axis", "=", "0", ")", "+", "10", "**", "-", "10", "\n", ")", "\n", "self", ".", "features", "=", "[", "\n", "standardized_target", "[", "i", ":", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "self", ".", "_dataset", "[", "\"time_periods\"", "]", "-", "self", ".", "lags", ")", "\n", "]", "\n", "self", ".", "targets", "=", "[", "\n", "standardized_target", "[", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "self", ".", "_dataset", "[", "\"time_periods\"", "]", "-", "self", ".", "lags", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.encovid.EnglandCovidDatasetLoader.get_dataset": [[56, 72], ["encovid.EnglandCovidDatasetLoader._get_edges", "encovid.EnglandCovidDatasetLoader._get_edge_weights", "encovid.EnglandCovidDatasetLoader._get_targets_and_features", "signal.DynamicGraphTemporalSignal"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edges", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edge_weights", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pedalme.PedalMeDatasetLoader._get_targets_and_features"], ["", "def", "get_dataset", "(", "self", ",", "lags", ":", "int", "=", "8", ")", "->", "DynamicGraphTemporalSignal", ":", "\n", "        ", "\"\"\"Returning the England COVID19 data iterator.\n\n        Args types:\n            * **lags** *(int)* - The number of time lags.\n        Return types:\n            * **dataset** *(StaticGraphTemporalSignal)* - The England Covid dataset.\n        \"\"\"", "\n", "self", ".", "lags", "=", "lags", "\n", "self", ".", "_get_edges", "(", ")", "\n", "self", ".", "_get_edge_weights", "(", ")", "\n", "self", ".", "_get_targets_and_features", "(", ")", "\n", "dataset", "=", "DynamicGraphTemporalSignal", "(", "\n", "self", ".", "_edges", ",", "self", ".", "_edge_weights", ",", "self", ".", "features", ",", "self", ".", "targets", "\n", ")", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmillmedium.WindmillOutputMediumDatasetLoader.__init__": [[15, 17], ["windmillmedium.WindmillOutputMediumDatasetLoader._read_web_data"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._read_web_data"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_read_web_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmillmedium.WindmillOutputMediumDatasetLoader._read_web_data": [[18, 21], ["json.loads", "six.moves.urllib.request.urlopen().read().decode", "six.moves.urllib.request.urlopen().read", "six.moves.urllib.request.urlopen"], "methods", ["None"], ["", "def", "_read_web_data", "(", "self", ")", ":", "\n", "        ", "url", "=", "\"https://graphmining.ai/temporal_datasets/windmill_output_medium.json\"", "\n", "self", ".", "_dataset", "=", "json", ".", "loads", "(", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", ".", "read", "(", ")", ".", "decode", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmillmedium.WindmillOutputMediumDatasetLoader._get_edges": [[22, 24], ["numpy.array"], "methods", ["None"], ["", "def", "_get_edges", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edges", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"edges\"", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmillmedium.WindmillOutputMediumDatasetLoader._get_edge_weights": [[25, 27], ["numpy.array"], "methods", ["None"], ["", "def", "_get_edge_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edge_weights", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"weights\"", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmillmedium.WindmillOutputMediumDatasetLoader._get_targets_and_features": [[28, 40], ["numpy.stack", "numpy.mean", "numpy.std", "range", "range"], "methods", ["None"], ["", "def", "_get_targets_and_features", "(", "self", ")", ":", "\n", "        ", "stacked_target", "=", "np", ".", "stack", "(", "self", ".", "_dataset", "[", "\"block\"", "]", ")", "\n", "standardized_target", "=", "(", "stacked_target", "-", "np", ".", "mean", "(", "stacked_target", ",", "axis", "=", "0", ")", ")", "/", "(", "\n", "np", ".", "std", "(", "stacked_target", ",", "axis", "=", "0", ")", "+", "10", "**", "-", "10", "\n", ")", "\n", "self", ".", "features", "=", "[", "\n", "standardized_target", "[", "i", ":", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "standardized_target", ".", "shape", "[", "0", "]", "-", "self", ".", "lags", ")", "\n", "]", "\n", "self", ".", "targets", "=", "[", "\n", "standardized_target", "[", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "standardized_target", ".", "shape", "[", "0", "]", "-", "self", ".", "lags", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmillmedium.WindmillOutputMediumDatasetLoader.get_dataset": [[42, 58], ["windmillmedium.WindmillOutputMediumDatasetLoader._get_edges", "windmillmedium.WindmillOutputMediumDatasetLoader._get_edge_weights", "windmillmedium.WindmillOutputMediumDatasetLoader._get_targets_and_features", "signal.StaticGraphTemporalSignal"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edges", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edge_weights", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pedalme.PedalMeDatasetLoader._get_targets_and_features"], ["", "def", "get_dataset", "(", "self", ",", "lags", ":", "int", "=", "8", ")", "->", "StaticGraphTemporalSignal", ":", "\n", "        ", "\"\"\"Returning the Windmill Output data iterator.\n\n        Args types:\n            * **lags** *(int)* - The number of time lags.\n        Return types:\n            * **dataset** *(StaticGraphTemporalSignal)* - The Windmill Output dataset.\n        \"\"\"", "\n", "self", ".", "lags", "=", "lags", "\n", "self", ".", "_get_edges", "(", ")", "\n", "self", ".", "_get_edge_weights", "(", ")", "\n", "self", ".", "_get_targets_and_features", "(", ")", "\n", "dataset", "=", "StaticGraphTemporalSignal", "(", "\n", "self", ".", "_edges", ",", "self", ".", "_edge_weights", ",", "self", ".", "features", ",", "self", ".", "targets", "\n", ")", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmillsmall.WindmillOutputSmallDatasetLoader.__init__": [[15, 17], ["windmillsmall.WindmillOutputSmallDatasetLoader._read_web_data"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._read_web_data"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_read_web_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmillsmall.WindmillOutputSmallDatasetLoader._read_web_data": [[18, 21], ["json.loads", "six.moves.urllib.request.urlopen().read().decode", "six.moves.urllib.request.urlopen().read", "six.moves.urllib.request.urlopen"], "methods", ["None"], ["", "def", "_read_web_data", "(", "self", ")", ":", "\n", "        ", "url", "=", "\"https://graphmining.ai/temporal_datasets/windmill_output_small.json\"", "\n", "self", ".", "_dataset", "=", "json", ".", "loads", "(", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", ".", "read", "(", ")", ".", "decode", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmillsmall.WindmillOutputSmallDatasetLoader._get_edges": [[22, 24], ["numpy.array"], "methods", ["None"], ["", "def", "_get_edges", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edges", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"edges\"", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmillsmall.WindmillOutputSmallDatasetLoader._get_edge_weights": [[25, 27], ["numpy.array"], "methods", ["None"], ["", "def", "_get_edge_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edge_weights", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"weights\"", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmillsmall.WindmillOutputSmallDatasetLoader._get_targets_and_features": [[28, 40], ["numpy.stack", "numpy.mean", "numpy.std", "range", "range"], "methods", ["None"], ["", "def", "_get_targets_and_features", "(", "self", ")", ":", "\n", "        ", "stacked_target", "=", "np", ".", "stack", "(", "self", ".", "_dataset", "[", "\"block\"", "]", ")", "\n", "standardized_target", "=", "(", "stacked_target", "-", "np", ".", "mean", "(", "stacked_target", ",", "axis", "=", "0", ")", ")", "/", "(", "\n", "np", ".", "std", "(", "stacked_target", ",", "axis", "=", "0", ")", "+", "10", "**", "-", "10", "\n", ")", "\n", "self", ".", "features", "=", "[", "\n", "standardized_target", "[", "i", ":", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "standardized_target", ".", "shape", "[", "0", "]", "-", "self", ".", "lags", ")", "\n", "]", "\n", "self", ".", "targets", "=", "[", "\n", "standardized_target", "[", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "standardized_target", ".", "shape", "[", "0", "]", "-", "self", ".", "lags", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.windmillsmall.WindmillOutputSmallDatasetLoader.get_dataset": [[42, 58], ["windmillsmall.WindmillOutputSmallDatasetLoader._get_edges", "windmillsmall.WindmillOutputSmallDatasetLoader._get_edge_weights", "windmillsmall.WindmillOutputSmallDatasetLoader._get_targets_and_features", "signal.StaticGraphTemporalSignal"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edges", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edge_weights", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pedalme.PedalMeDatasetLoader._get_targets_and_features"], ["", "def", "get_dataset", "(", "self", ",", "lags", ":", "int", "=", "8", ")", "->", "StaticGraphTemporalSignal", ":", "\n", "        ", "\"\"\"Returning the Windmill Output data iterator.\n\n        Args types:\n            * **lags** *(int)* - The number of time lags.\n        Return types:\n            * **dataset** *(StaticGraphTemporalSignal)* - The Windmill Output dataset.\n        \"\"\"", "\n", "self", ".", "lags", "=", "lags", "\n", "self", ".", "_get_edges", "(", ")", "\n", "self", ".", "_get_edge_weights", "(", ")", "\n", "self", ".", "_get_targets_and_features", "(", ")", "\n", "dataset", "=", "StaticGraphTemporalSignal", "(", "\n", "self", ".", "_edges", ",", "self", ".", "_edge_weights", ",", "self", ".", "features", ",", "self", ".", "targets", "\n", ")", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pems_bay.PemsBayDatasetLoader.__init__": [[22, 26], ["os.path.join", "object.__init__", "pems_bay.PemsBayDatasetLoader._read_web_data", "os.getcwd"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._read_web_data"], ["def", "__init__", "(", "self", ",", "raw_data_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getcwd", "(", ")", ",", "\"data\"", ")", ")", ":", "\n", "        ", "super", "(", "PemsBayDatasetLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "raw_data_dir", "=", "raw_data_dir", "\n", "self", ".", "_read_web_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pems_bay.PemsBayDatasetLoader._download_url": [[27, 31], ["six.moves.urllib.request.urlopen", "open", "out_file.write", "dl_file.read"], "methods", ["None"], ["", "def", "_download_url", "(", "self", ",", "url", ",", "save_path", ")", ":", "# pragma: no cover", "\n", "        ", "with", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", "as", "dl_file", ":", "\n", "            ", "with", "open", "(", "save_path", ",", "\"wb\"", ")", "as", "out_file", ":", "\n", "                ", "out_file", ".", "write", "(", "dl_file", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pems_bay.PemsBayDatasetLoader._read_web_data": [[32, 67], ["numpy.load", "numpy.load().transpose", "X.astype.astype.astype", "numpy.mean", "numpy.std", "torch.from_numpy", "torch.from_numpy", "os.path.isfile", "pems_bay.PemsBayDatasetLoader._download_url", "os.path.join", "numpy.mean.reshape", "numpy.std.reshape", "os.path.join", "os.path.exists", "os.makedirs", "os.path.join", "os.path.isfile", "os.path.isfile", "zipfile.ZipFile", "zip_fh.extractall", "numpy.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pems_bay.PemsBayDatasetLoader._download_url"], ["", "", "", "def", "_read_web_data", "(", "self", ")", ":", "\n", "        ", "url", "=", "\"https://graphmining.ai/temporal_datasets/PEMS-BAY.zip\"", "\n", "\n", "# Check if zip file is in data folder from working directory, otherwise download", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "raw_data_dir", ",", "\"PEMS-BAY.zip\"", ")", "\n", ")", ":", "# pragma: no cover", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "raw_data_dir", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "raw_data_dir", ")", "\n", "", "self", ".", "_download_url", "(", "url", ",", "os", ".", "path", ".", "join", "(", "self", ".", "raw_data_dir", ",", "\"PEMS-BAY.zip\"", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "raw_data_dir", ",", "\"pems_adj_mat.npy\"", ")", "\n", ")", "or", "not", "os", ".", "path", ".", "isfile", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "raw_data_dir", ",", "\"pems_node_values.npy\"", ")", "\n", ")", ":", "# pragma: no cover", "\n", "            ", "with", "zipfile", ".", "ZipFile", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "raw_data_dir", ",", "\"PEMS-BAY.zip\"", ")", ",", "\"r\"", "\n", ")", "as", "zip_fh", ":", "\n", "                ", "zip_fh", ".", "extractall", "(", "self", ".", "raw_data_dir", ")", "\n", "\n", "", "", "A", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "raw_data_dir", ",", "\"pems_adj_mat.npy\"", ")", ")", "\n", "X", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "raw_data_dir", ",", "\"pems_node_values.npy\"", ")", ")", ".", "transpose", "(", "\n", "(", "1", ",", "2", ",", "0", ")", "\n", ")", "\n", "X", "=", "X", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Normalise as in DCRNN paper (via Z-Score Method)", "\n", "means", "=", "np", ".", "mean", "(", "X", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "\n", "X", "=", "X", "-", "means", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "stds", "=", "np", ".", "std", "(", "X", ",", "axis", "=", "(", "0", ",", "2", ")", ")", "\n", "X", "=", "X", "/", "stds", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "\n", "self", ".", "A", "=", "torch", ".", "from_numpy", "(", "A", ")", "\n", "self", ".", "X", "=", "torch", ".", "from_numpy", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pems_bay.PemsBayDatasetLoader._get_edges_and_weights": [[68, 74], ["torch_geometric.utils.dense_to_sparse", "edge_indices.numpy.numpy.numpy", "values.numpy.numpy.numpy"], "methods", ["None"], ["", "def", "_get_edges_and_weights", "(", "self", ")", ":", "\n", "        ", "edge_indices", ",", "values", "=", "dense_to_sparse", "(", "self", ".", "A", ")", "\n", "edge_indices", "=", "edge_indices", ".", "numpy", "(", ")", "\n", "values", "=", "values", ".", "numpy", "(", ")", "\n", "self", ".", "edges", "=", "edge_indices", "\n", "self", ".", "edge_weights", "=", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pems_bay.PemsBayDatasetLoader._generate_task": [[75, 99], ["features.append", "target.append", "range", "pems_bay.PemsBayDatasetLoader.X[].numpy", "pems_bay.PemsBayDatasetLoader.X[].numpy"], "methods", ["None"], ["", "def", "_generate_task", "(", "self", ",", "num_timesteps_in", ":", "int", "=", "12", ",", "num_timesteps_out", ":", "int", "=", "12", ")", ":", "\n", "        ", "\"\"\"Uses the node features of the graph and generates a feature/target\n        relationship of the shape\n        (num_nodes, num_node_features, num_timesteps_in) -> (num_nodes, num_timesteps_out)\n        predicting the average traffic speed using num_timesteps_in to predict the\n        traffic conditions in the next num_timesteps_out\n\n        Args:\n            num_timesteps_in (int): number of timesteps the sequence model sees\n            num_timesteps_out (int): number of timesteps the sequence model has to predict\n        \"\"\"", "\n", "indices", "=", "[", "\n", "(", "i", ",", "i", "+", "(", "num_timesteps_in", "+", "num_timesteps_out", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "X", ".", "shape", "[", "2", "]", "-", "(", "num_timesteps_in", "+", "num_timesteps_out", ")", "+", "1", ")", "\n", "]", "\n", "\n", "# Generate observations", "\n", "features", ",", "target", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "j", "in", "indices", ":", "\n", "            ", "features", ".", "append", "(", "(", "self", ".", "X", "[", ":", ",", ":", ",", "i", ":", "i", "+", "num_timesteps_in", "]", ")", ".", "numpy", "(", ")", ")", "\n", "target", ".", "append", "(", "(", "self", ".", "X", "[", ":", ",", ":", ",", "i", "+", "num_timesteps_in", ":", "j", "]", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "self", ".", "features", "=", "features", "\n", "self", ".", "targets", "=", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pems_bay.PemsBayDatasetLoader.get_dataset": [[100, 116], ["pems_bay.PemsBayDatasetLoader._get_edges_and_weights", "pems_bay.PemsBayDatasetLoader._generate_task", "signal.StaticGraphTemporalSignal"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pems_bay.PemsBayDatasetLoader._get_edges_and_weights", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pems_bay.PemsBayDatasetLoader._generate_task"], ["", "def", "get_dataset", "(", "\n", "self", ",", "num_timesteps_in", ":", "int", "=", "12", ",", "num_timesteps_out", ":", "int", "=", "12", "\n", ")", "->", "StaticGraphTemporalSignal", ":", "\n", "        ", "\"\"\"Returns data iterator for PEMS-BAY dataset as an instance of the\n        static graph temporal signal class.\n\n        Return types:\n            * **dataset** *(StaticGraphTemporalSignal)* - The PEMS-BAY traffic\n                forecasting dataset.\n        \"\"\"", "\n", "self", ".", "_get_edges_and_weights", "(", ")", "\n", "self", ".", "_generate_task", "(", "num_timesteps_in", ",", "num_timesteps_out", ")", "\n", "dataset", "=", "StaticGraphTemporalSignal", "(", "\n", "self", ".", "edges", ",", "self", ".", "edge_weights", ",", "self", ".", "features", ",", "self", ".", "targets", "\n", ")", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.mtm.MTMDatasetLoader.__init__": [[21, 23], ["mtm.MTMDatasetLoader._read_web_data"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._read_web_data"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_read_web_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.mtm.MTMDatasetLoader._read_web_data": [[24, 27], ["json.loads", "six.moves.urllib.request.urlopen().read", "six.moves.urllib.request.urlopen"], "methods", ["None"], ["", "def", "_read_web_data", "(", "self", ")", ":", "\n", "        ", "url", "=", "\"https://raw.githubusercontent.com/benedekrozemberczki/pytorch_geometric_temporal/master/dataset/mtm_1.json\"", "\n", "self", ".", "_dataset", "=", "json", ".", "loads", "(", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.mtm.MTMDatasetLoader._get_edges": [[28, 30], ["numpy.array"], "methods", ["None"], ["", "def", "_get_edges", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edges", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"edges\"", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.mtm.MTMDatasetLoader._get_edge_weights": [[31, 33], ["numpy.array"], "methods", ["None"], ["", "def", "_get_edge_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edge_weights", "=", "np", ".", "array", "(", "[", "1", "for", "d", "in", "self", ".", "_dataset", "[", "\"edges\"", "]", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.mtm.MTMDatasetLoader._get_features": [[34, 48], ["len", "numpy.zeros", "enumerate", "str", "dic[].values", "enumerate", "range", "dic[].values", "list", "range", "map", "xyz.strip().split", "len", "xyz.strip"], "methods", ["None"], ["", "def", "_get_features", "(", "self", ")", ":", "\n", "        ", "dic", "=", "self", ".", "_dataset", "\n", "joints", "=", "[", "str", "(", "n", ")", "for", "n", "in", "range", "(", "21", ")", "]", "\n", "dataset_length", "=", "len", "(", "dic", "[", "\"0\"", "]", ".", "values", "(", ")", ")", "\n", "features", "=", "np", ".", "zeros", "(", "(", "dataset_length", ",", "21", ",", "3", ")", ")", "\n", "\n", "for", "j", ",", "joint", "in", "enumerate", "(", "joints", ")", ":", "\n", "            ", "for", "t", ",", "xyz", "in", "enumerate", "(", "dic", "[", "joint", "]", ".", "values", "(", ")", ")", ":", "\n", "                ", "xyz_tuple", "=", "list", "(", "map", "(", "float", ",", "xyz", ".", "strip", "(", "\"()\"", ")", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "features", "[", "t", ",", "j", ",", ":", "]", "=", "xyz_tuple", "\n", "\n", "", "", "self", ".", "features", "=", "[", "\n", "features", "[", "i", ":", "i", "+", "self", ".", "frames", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "len", "(", "features", ")", "-", "self", ".", "frames", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.mtm.MTMDatasetLoader._get_targets": [[50, 63], ["mtm.MTMDatasetLoader._dataset[].items", "targets.append", "numpy.max", "numpy.eye", "range", "len"], "methods", ["None"], ["", "def", "_get_targets", "(", "self", ")", ":", "\n", "# target eoncoding: {0 : 'Grasp', 1 : 'Move', 2 : 'Negative',", "\n", "#                   3 : 'Position', 4 : 'Reach', 5 : 'Release'}", "\n", "        ", "targets", "=", "[", "]", "\n", "for", "_", ",", "y", "in", "self", ".", "_dataset", "[", "\"LABEL\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "targets", ".", "append", "(", "y", ")", "\n", "\n", "", "n_values", "=", "np", ".", "max", "(", "targets", ")", "+", "1", "\n", "targets_ohe", "=", "np", ".", "eye", "(", "n_values", ")", "[", "targets", "]", "\n", "\n", "self", ".", "targets", "=", "[", "\n", "targets_ohe", "[", "i", ":", "i", "+", "self", ".", "frames", ",", ":", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "targets_ohe", ")", "-", "self", ".", "frames", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.mtm.MTMDatasetLoader.get_dataset": [[65, 83], ["mtm.MTMDatasetLoader._get_edges", "mtm.MTMDatasetLoader._get_edge_weights", "mtm.MTMDatasetLoader._get_features", "mtm.MTMDatasetLoader._get_targets", "torch_geometric_temporal.signal.StaticGraphTemporalSignal"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edges", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edge_weights", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_features", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_targets"], ["", "def", "get_dataset", "(", "self", ",", "frames", ":", "int", "=", "16", ")", "->", "StaticGraphTemporalSignal", ":", "\n", "        ", "\"\"\"Returning the MTM-1 motion data iterator.\n\n        Args types:\n            * **frames** *(int)* - The number of consecutive frames T, default 16.\n        Return types:\n            * **dataset** *(StaticGraphTemporalSignal)* - The MTM-1 dataset.\n        \"\"\"", "\n", "self", ".", "frames", "=", "frames", "\n", "self", ".", "_get_edges", "(", ")", "\n", "self", ".", "_get_edge_weights", "(", ")", "\n", "self", ".", "_get_features", "(", ")", "\n", "self", ".", "_get_targets", "(", ")", "\n", "\n", "dataset", "=", "StaticGraphTemporalSignal", "(", "\n", "self", ".", "_edges", ",", "self", ".", "_edge_weights", ",", "self", ".", "features", ",", "self", ".", "targets", "\n", ")", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.wikimath.WikiMathsDatasetLoader.__init__": [[18, 20], ["wikimath.WikiMathsDatasetLoader._read_web_data"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._read_web_data"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_read_web_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.wikimath.WikiMathsDatasetLoader._read_web_data": [[21, 24], ["json.loads", "six.moves.urllib.request.urlopen().read", "six.moves.urllib.request.urlopen"], "methods", ["None"], ["", "def", "_read_web_data", "(", "self", ")", ":", "\n", "        ", "url", "=", "\"https://raw.githubusercontent.com/benedekrozemberczki/pytorch_geometric_temporal/master/dataset/wikivital_mathematics.json\"", "\n", "self", ".", "_dataset", "=", "json", ".", "loads", "(", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.wikimath.WikiMathsDatasetLoader._get_edges": [[25, 27], ["numpy.array"], "methods", ["None"], ["", "def", "_get_edges", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edges", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"edges\"", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.wikimath.WikiMathsDatasetLoader._get_edge_weights": [[28, 30], ["numpy.array"], "methods", ["None"], ["", "def", "_get_edge_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edge_weights", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"weights\"", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.wikimath.WikiMathsDatasetLoader._get_targets_and_features": [[31, 47], ["range", "numpy.stack", "targets.append", "numpy.std", "numpy.array", "numpy.mean", "range", "range", "len", "len", "str"], "methods", ["None"], ["", "def", "_get_targets_and_features", "(", "self", ")", ":", "\n", "\n", "        ", "targets", "=", "[", "]", "\n", "for", "time", "in", "range", "(", "self", ".", "_dataset", "[", "\"time_periods\"", "]", ")", ":", "\n", "            ", "targets", ".", "append", "(", "np", ".", "array", "(", "self", ".", "_dataset", "[", "str", "(", "time", ")", "]", "[", "\"y\"", "]", ")", ")", "\n", "", "stacked_target", "=", "np", ".", "stack", "(", "targets", ")", "\n", "standardized_target", "=", "(", "\n", "stacked_target", "-", "np", ".", "mean", "(", "stacked_target", ",", "axis", "=", "0", ")", "\n", ")", "/", "np", ".", "std", "(", "stacked_target", ",", "axis", "=", "0", ")", "\n", "self", ".", "features", "=", "[", "\n", "standardized_target", "[", "i", ":", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "len", "(", "targets", ")", "-", "self", ".", "lags", ")", "\n", "]", "\n", "self", ".", "targets", "=", "[", "\n", "standardized_target", "[", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "len", "(", "targets", ")", "-", "self", ".", "lags", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.wikimath.WikiMathsDatasetLoader.get_dataset": [[49, 65], ["wikimath.WikiMathsDatasetLoader._get_edges", "wikimath.WikiMathsDatasetLoader._get_edge_weights", "wikimath.WikiMathsDatasetLoader._get_targets_and_features", "signal.StaticGraphTemporalSignal"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edges", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edge_weights", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pedalme.PedalMeDatasetLoader._get_targets_and_features"], ["", "def", "get_dataset", "(", "self", ",", "lags", ":", "int", "=", "8", ")", "->", "StaticGraphTemporalSignal", ":", "\n", "        ", "\"\"\"Returning the Wikipedia Vital Mathematics data iterator.\n\n        Args types:\n            * **lags** *(int)* - The number of time lags.\n        Return types:\n            * **dataset** *(StaticGraphTemporalSignal)* - The Wiki Maths dataset.\n        \"\"\"", "\n", "self", ".", "lags", "=", "lags", "\n", "self", ".", "_get_edges", "(", ")", "\n", "self", ".", "_get_edge_weights", "(", ")", "\n", "self", ".", "_get_targets_and_features", "(", ")", "\n", "dataset", "=", "StaticGraphTemporalSignal", "(", "\n", "self", ".", "_edges", ",", "self", ".", "_edge_weights", ",", "self", ".", "features", ",", "self", ".", "targets", "\n", ")", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.TwitterTennisDatasetLoader.__init__": [[57, 75], ["twitter_tennis.TwitterTennisDatasetLoader._read_web_data", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._read_web_data"], ["def", "__init__", "(", "\n", "self", ",", "event_id", "=", "\"rg17\"", ",", "N", "=", "None", ",", "feature_mode", "=", "\"encoded\"", ",", "target_offset", "=", "1", "\n", ")", ":", "\n", "        ", "self", ".", "N", "=", "N", "\n", "self", ".", "target_offset", "=", "target_offset", "\n", "if", "event_id", "in", "[", "\"rg17\"", ",", "\"uo17\"", "]", ":", "\n", "            ", "self", ".", "event_id", "=", "event_id", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Invalid 'event_id'! Choose 'rg17' or 'uo17' to load the Roland-Garros 2017 or the USOpen 2017 Twitter tennis dataset respectively.\"", "\n", ")", "\n", "", "if", "feature_mode", "in", "[", "None", ",", "\"diagonal\"", ",", "\"encoded\"", "]", ":", "\n", "            ", "self", ".", "feature_mode", "=", "feature_mode", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Choose feature_mode from values [None, 'diagonal', 'encoded'].\"", "\n", ")", "\n", "", "self", ".", "_read_web_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.TwitterTennisDatasetLoader._read_web_data": [[76, 83], ["json.loads", "six.moves.urllib.request.urlopen().read", "six.moves.urllib.request.urlopen"], "methods", ["None"], ["", "def", "_read_web_data", "(", "self", ")", ":", "\n", "        ", "fname", "=", "\"twitter_tennis_%s.json\"", "%", "self", ".", "event_id", "\n", "url", "=", "(", "\n", "\"https://raw.githubusercontent.com/ferencberes/pytorch_geometric_temporal/developer/dataset/\"", "\n", "+", "fname", "\n", ")", "\n", "self", ".", "_dataset", "=", "json", ".", "loads", "(", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", ".", "read", "(", ")", ")", "\n", "# with open(\"/home/fberes/git/pytorch_geometric_temporal/dataset/\"+fname) as f:", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.TwitterTennisDatasetLoader._get_edges": [[86, 97], ["range", "numpy.array", "twitter_tennis.TwitterTennisDatasetLoader.edges.append", "numpy.where", "edge_indices.append", "str"], "methods", ["None"], ["", "def", "_get_edges", "(", "self", ")", ":", "\n", "        ", "edge_indices", "=", "[", "]", "\n", "self", ".", "edges", "=", "[", "]", "\n", "for", "time", "in", "range", "(", "self", ".", "_dataset", "[", "\"time_periods\"", "]", ")", ":", "\n", "            ", "E", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "str", "(", "time", ")", "]", "[", "\"edges\"", "]", ")", "\n", "if", "self", ".", "N", "!=", "None", ":", "\n", "                ", "selector", "=", "np", ".", "where", "(", "(", "E", "[", ":", ",", "0", "]", "<", "self", ".", "N", ")", "&", "(", "E", "[", ":", ",", "1", "]", "<", "self", ".", "N", ")", ")", "\n", "E", "=", "E", "[", "selector", "]", "\n", "edge_indices", ".", "append", "(", "selector", ")", "\n", "", "self", ".", "edges", ".", "append", "(", "E", ".", "T", ")", "\n", "", "self", ".", "edge_indices", "=", "edge_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.TwitterTennisDatasetLoader._get_edge_weights": [[98, 106], ["enumerate", "range", "numpy.array", "twitter_tennis.TwitterTennisDatasetLoader.edge_weights.append", "str"], "methods", ["None"], ["", "def", "_get_edge_weights", "(", "self", ")", ":", "\n", "        ", "edge_indices", "=", "self", ".", "edge_indices", "\n", "self", ".", "edge_weights", "=", "[", "]", "\n", "for", "i", ",", "time", "in", "enumerate", "(", "range", "(", "self", ".", "_dataset", "[", "\"time_periods\"", "]", ")", ")", ":", "\n", "            ", "W", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "str", "(", "time", ")", "]", "[", "\"weights\"", "]", ")", "\n", "if", "self", ".", "N", "!=", "None", ":", "\n", "                ", "W", "=", "W", "[", "edge_indices", "[", "i", "]", "]", "\n", "", "self", ".", "edge_weights", ".", "append", "(", "W", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.TwitterTennisDatasetLoader._get_features": [[107, 118], ["range", "numpy.array", "twitter_tennis.TwitterTennisDatasetLoader.features.append", "numpy.identity", "twitter_tennis.encode_features", "str"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.encode_features"], ["", "", "def", "_get_features", "(", "self", ")", ":", "\n", "        ", "self", ".", "features", "=", "[", "]", "\n", "for", "time", "in", "range", "(", "self", ".", "_dataset", "[", "\"time_periods\"", "]", ")", ":", "\n", "            ", "X", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "str", "(", "time", ")", "]", "[", "\"X\"", "]", ")", "\n", "if", "self", ".", "N", "!=", "None", ":", "\n", "                ", "X", "=", "X", "[", ":", "self", ".", "N", "]", "\n", "", "if", "self", ".", "feature_mode", "==", "\"diagonal\"", ":", "\n", "                ", "X", "=", "np", ".", "identity", "(", "X", ".", "shape", "[", "0", "]", ")", "\n", "", "elif", "self", ".", "feature_mode", "==", "\"encoded\"", ":", "\n", "                ", "X", "=", "encode_features", "(", "X", ")", "\n", "", "self", ".", "features", ".", "append", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.TwitterTennisDatasetLoader._get_targets": [[119, 131], ["range", "min", "numpy.array", "numpy.log", "twitter_tennis.TwitterTennisDatasetLoader.targets.append", "str"], "methods", ["None"], ["", "", "def", "_get_targets", "(", "self", ")", ":", "\n", "        ", "self", ".", "targets", "=", "[", "]", "\n", "T", "=", "self", ".", "_dataset", "[", "\"time_periods\"", "]", "\n", "for", "time", "in", "range", "(", "T", ")", ":", "\n", "# predict node degrees in advance", "\n", "            ", "snapshot_id", "=", "min", "(", "time", "+", "self", ".", "target_offset", ",", "T", "-", "1", ")", "\n", "y", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "str", "(", "snapshot_id", ")", "]", "[", "\"y\"", "]", ")", "\n", "# logarithmic transformation for node degrees", "\n", "y", "=", "np", ".", "log", "(", "1.0", "+", "y", ")", "\n", "if", "self", ".", "N", "!=", "None", ":", "\n", "                ", "y", "=", "y", "[", ":", "self", ".", "N", "]", "\n", "", "self", ".", "targets", ".", "append", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.TwitterTennisDatasetLoader.get_dataset": [[132, 146], ["twitter_tennis.TwitterTennisDatasetLoader._get_edges", "twitter_tennis.TwitterTennisDatasetLoader._get_edge_weights", "twitter_tennis.TwitterTennisDatasetLoader._get_features", "twitter_tennis.TwitterTennisDatasetLoader._get_targets", "signal.DynamicGraphTemporalSignal"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edges", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edge_weights", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_features", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_targets"], ["", "", "def", "get_dataset", "(", "self", ")", "->", "DynamicGraphTemporalSignal", ":", "\n", "        ", "\"\"\"Returning the TennisDataset data iterator.\n\n        Return types:\n            * **dataset** *(DynamicGraphTemporalSignal)* - Selected Twitter tennis dataset (Roland-Garros 2017 or USOpen 2017).\n        \"\"\"", "\n", "self", ".", "_get_edges", "(", ")", "\n", "self", ".", "_get_edge_weights", "(", ")", "\n", "self", ".", "_get_features", "(", ")", "\n", "self", ".", "_get_targets", "(", ")", "\n", "dataset", "=", "DynamicGraphTemporalSignal", "(", "\n", "self", ".", "edges", ",", "self", ".", "edge_weights", ",", "self", ".", "features", ",", "self", ".", "targets", "\n", ")", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.transform_degree": [[8, 11], ["numpy.ceil", "numpy.minimum", "numpy.log"], "function", ["None"], ["def", "transform_degree", "(", "x", ",", "cutoff", "=", "4", ")", ":", "\n", "    ", "log_deg", "=", "np", ".", "ceil", "(", "np", ".", "log", "(", "x", "+", "1.0", ")", ")", "\n", "return", "np", ".", "minimum", "(", "log_deg", ",", "cutoff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.transform_transitivity": [[13, 16], ["numpy.floor"], "function", ["None"], ["", "def", "transform_transitivity", "(", "x", ")", ":", "\n", "    ", "trans", "=", "x", "*", "10", "\n", "return", "np", ".", "floor", "(", "trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.onehot_encoding": [[18, 23], ["numpy.zeros", "enumerate", "len", "len", "unique_vals.index"], "function", ["None"], ["", "def", "onehot_encoding", "(", "x", ",", "unique_vals", ")", ":", "\n", "    ", "E", "=", "np", ".", "zeros", "(", "(", "len", "(", "x", ")", ",", "len", "(", "unique_vals", ")", ")", ")", "\n", "for", "i", ",", "val", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "E", "[", "i", ",", "unique_vals", ".", "index", "(", "val", ")", "]", "=", "1.0", "\n", "", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.encode_features": [[25, 32], ["numpy.array", "twitter_tennis.transform_degree", "twitter_tennis.transform_transitivity", "twitter_tennis.onehot_encoding", "twitter_tennis.onehot_encoding", "numpy.concatenate", "range", "range"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.transform_degree", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.transform_transitivity", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.onehot_encoding", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.twitter_tennis.onehot_encoding"], ["", "def", "encode_features", "(", "X", ",", "log_degree_cutoff", "=", "4", ")", ":", "\n", "    ", "X_arr", "=", "np", ".", "array", "(", "X", ")", "\n", "a", "=", "transform_degree", "(", "X_arr", "[", ":", ",", "0", "]", ",", "log_degree_cutoff", ")", "\n", "b", "=", "transform_transitivity", "(", "X_arr", "[", ":", ",", "1", "]", ")", "\n", "A", "=", "onehot_encoding", "(", "a", ",", "range", "(", "log_degree_cutoff", "+", "1", ")", ")", "\n", "B", "=", "onehot_encoding", "(", "b", ",", "range", "(", "11", ")", ")", "\n", "return", "np", ".", "concatenate", "(", "(", "A", ",", "B", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.chickenpox.ChickenpoxDatasetLoader.__init__": [[18, 20], ["chickenpox.ChickenpoxDatasetLoader._read_web_data"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._read_web_data"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_read_web_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.chickenpox.ChickenpoxDatasetLoader._read_web_data": [[21, 24], ["json.loads", "six.moves.urllib.request.urlopen().read", "six.moves.urllib.request.urlopen"], "methods", ["None"], ["", "def", "_read_web_data", "(", "self", ")", ":", "\n", "        ", "url", "=", "\"https://raw.githubusercontent.com/benedekrozemberczki/pytorch_geometric_temporal/master/dataset/chickenpox.json\"", "\n", "self", ".", "_dataset", "=", "json", ".", "loads", "(", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.chickenpox.ChickenpoxDatasetLoader._get_edges": [[25, 27], ["numpy.array"], "methods", ["None"], ["", "def", "_get_edges", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edges", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"edges\"", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.chickenpox.ChickenpoxDatasetLoader._get_edge_weights": [[28, 30], ["numpy.ones"], "methods", ["None"], ["", "def", "_get_edge_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edge_weights", "=", "np", ".", "ones", "(", "self", ".", "_edges", ".", "shape", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.chickenpox.ChickenpoxDatasetLoader._get_targets_and_features": [[31, 40], ["numpy.array", "range", "range"], "methods", ["None"], ["", "def", "_get_targets_and_features", "(", "self", ")", ":", "\n", "        ", "stacked_target", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"FX\"", "]", ")", "\n", "self", ".", "features", "=", "[", "\n", "stacked_target", "[", "i", ":", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "stacked_target", ".", "shape", "[", "0", "]", "-", "self", ".", "lags", ")", "\n", "]", "\n", "self", ".", "targets", "=", "[", "\n", "stacked_target", "[", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "stacked_target", ".", "shape", "[", "0", "]", "-", "self", ".", "lags", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.chickenpox.ChickenpoxDatasetLoader.get_dataset": [[42, 58], ["chickenpox.ChickenpoxDatasetLoader._get_edges", "chickenpox.ChickenpoxDatasetLoader._get_edge_weights", "chickenpox.ChickenpoxDatasetLoader._get_targets_and_features", "signal.StaticGraphTemporalSignal"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edges", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edge_weights", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pedalme.PedalMeDatasetLoader._get_targets_and_features"], ["", "def", "get_dataset", "(", "self", ",", "lags", ":", "int", "=", "4", ")", "->", "StaticGraphTemporalSignal", ":", "\n", "        ", "\"\"\"Returning the Chickenpox Hungary data iterator.\n\n        Args types:\n            * **lags** *(int)* - The number of time lags.\n        Return types:\n            * **dataset** *(StaticGraphTemporalSignal)* - The Chickenpox Hungary dataset.\n        \"\"\"", "\n", "self", ".", "lags", "=", "lags", "\n", "self", ".", "_get_edges", "(", ")", "\n", "self", ".", "_get_edge_weights", "(", ")", "\n", "self", ".", "_get_targets_and_features", "(", ")", "\n", "dataset", "=", "StaticGraphTemporalSignal", "(", "\n", "self", ".", "_edges", ",", "self", ".", "_edge_weights", ",", "self", ".", "features", ",", "self", ".", "targets", "\n", ")", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pedalme.PedalMeDatasetLoader.__init__": [[17, 19], ["pedalme.PedalMeDatasetLoader._read_web_data"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._read_web_data"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_read_web_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pedalme.PedalMeDatasetLoader._read_web_data": [[20, 23], ["json.loads", "six.moves.urllib.request.urlopen().read", "six.moves.urllib.request.urlopen"], "methods", ["None"], ["", "def", "_read_web_data", "(", "self", ")", ":", "\n", "        ", "url", "=", "\"https://raw.githubusercontent.com/benedekrozemberczki/pytorch_geometric_temporal/master/dataset/pedalme_london.json\"", "\n", "self", ".", "_dataset", "=", "json", ".", "loads", "(", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pedalme.PedalMeDatasetLoader._get_edges": [[24, 26], ["numpy.array"], "methods", ["None"], ["", "def", "_get_edges", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edges", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"edges\"", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pedalme.PedalMeDatasetLoader._get_edge_weights": [[27, 29], ["numpy.array"], "methods", ["None"], ["", "def", "_get_edge_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edge_weights", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"weights\"", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pedalme.PedalMeDatasetLoader._get_targets_and_features": [[30, 39], ["numpy.array", "range", "range"], "methods", ["None"], ["", "def", "_get_targets_and_features", "(", "self", ")", ":", "\n", "        ", "stacked_target", "=", "np", ".", "array", "(", "self", ".", "_dataset", "[", "\"X\"", "]", ")", "\n", "self", ".", "features", "=", "[", "\n", "stacked_target", "[", "i", ":", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "stacked_target", ".", "shape", "[", "0", "]", "-", "self", ".", "lags", ")", "\n", "]", "\n", "self", ".", "targets", "=", "[", "\n", "stacked_target", "[", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "stacked_target", ".", "shape", "[", "0", "]", "-", "self", ".", "lags", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pedalme.PedalMeDatasetLoader.get_dataset": [[41, 57], ["pedalme.PedalMeDatasetLoader._get_edges", "pedalme.PedalMeDatasetLoader._get_edge_weights", "pedalme.PedalMeDatasetLoader._get_targets_and_features", "signal.StaticGraphTemporalSignal"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edges", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edge_weights", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.pedalme.PedalMeDatasetLoader._get_targets_and_features"], ["", "def", "get_dataset", "(", "self", ",", "lags", ":", "int", "=", "4", ")", "->", "StaticGraphTemporalSignal", ":", "\n", "        ", "\"\"\"Returning the PedalMe London demand data iterator.\n\n        Args types:\n            * **lags** *(int)* - The number of time lags.\n        Return types:\n            * **dataset** *(StaticGraphTemporalSignal)* - The PedalMe dataset.\n        \"\"\"", "\n", "self", ".", "lags", "=", "lags", "\n", "self", ".", "_get_edges", "(", ")", "\n", "self", ".", "_get_edge_weights", "(", ")", "\n", "self", ".", "_get_targets_and_features", "(", ")", "\n", "dataset", "=", "StaticGraphTemporalSignal", "(", "\n", "self", ".", "_edges", ",", "self", ".", "_edge_weights", ",", "self", ".", "features", ",", "self", ".", "targets", "\n", ")", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.__init__": [[20, 22], ["montevideo_bus.MontevideoBusDatasetLoader._read_web_data"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._read_web_data"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_read_web_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._read_web_data": [[23, 26], ["json.loads", "six.moves.urllib.request.urlopen().read", "six.moves.urllib.request.urlopen"], "methods", ["None"], ["", "def", "_read_web_data", "(", "self", ")", ":", "\n", "        ", "url", "=", "\"https://raw.githubusercontent.com/benedekrozemberczki/pytorch_geometric_temporal/master/dataset/montevideo_bus.json\"", "\n", "self", ".", "_dataset", "=", "json", ".", "loads", "(", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", ".", "read", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_node_ids": [[27, 29], ["node.get"], "methods", ["None"], ["", "def", "_get_node_ids", "(", "self", ")", ":", "\n", "        ", "return", "[", "node", ".", "get", "(", "'bus_stop'", ")", "for", "node", "in", "self", ".", "_dataset", "[", "\"nodes\"", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edges": [[30, 35], ["montevideo_bus.MontevideoBusDatasetLoader._get_node_ids", "dict", "zip", "numpy.array", "range", "len"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_node_ids"], ["", "def", "_get_edges", "(", "self", ")", ":", "\n", "        ", "node_ids", "=", "self", ".", "_get_node_ids", "(", ")", "\n", "node_id_map", "=", "dict", "(", "zip", "(", "node_ids", ",", "range", "(", "len", "(", "node_ids", ")", ")", ")", ")", "\n", "self", ".", "_edges", "=", "np", ".", "array", "(", "\n", "[", "(", "node_id_map", "[", "d", "[", "\"source\"", "]", "]", ",", "node_id_map", "[", "d", "[", "\"target\"", "]", "]", ")", "for", "d", "in", "self", ".", "_dataset", "[", "\"links\"", "]", "]", "\n", ")", ".", "T", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edge_weights": [[37, 39], ["numpy.array"], "methods", ["None"], ["", "def", "_get_edge_weights", "(", "self", ")", ":", "\n", "        ", "self", ".", "_edge_weights", "=", "np", ".", "array", "(", "[", "(", "d", "[", "\"weight\"", "]", ")", "for", "d", "in", "self", ".", "_dataset", "[", "\"links\"", "]", "]", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_features": [[40, 53], ["node.get", "numpy.stack", "numpy.std", "features.append", "numpy.mean", "range", "numpy.array", "node.get.get", "len"], "methods", ["None"], ["", "def", "_get_features", "(", "self", ",", "feature_vars", ":", "List", "[", "str", "]", "=", "[", "\"y\"", "]", ")", ":", "\n", "        ", "features", "=", "[", "]", "\n", "for", "node", "in", "self", ".", "_dataset", "[", "\"nodes\"", "]", ":", "\n", "            ", "X", "=", "node", ".", "get", "(", "\"X\"", ")", "\n", "for", "feature_var", "in", "feature_vars", ":", "\n", "                ", "features", ".", "append", "(", "np", ".", "array", "(", "X", ".", "get", "(", "feature_var", ")", ")", ")", "\n", "", "", "stacked_features", "=", "np", ".", "stack", "(", "features", ")", ".", "T", "\n", "standardized_features", "=", "(", "\n", "stacked_features", "-", "np", ".", "mean", "(", "stacked_features", ",", "axis", "=", "0", ")", "\n", ")", "/", "np", ".", "std", "(", "stacked_features", ",", "axis", "=", "0", ")", "\n", "self", ".", "features", "=", "[", "\n", "standardized_features", "[", "i", ":", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "len", "(", "standardized_features", ")", "-", "self", ".", "lags", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_targets": [[55, 67], ["node.get", "targets.append", "numpy.stack", "numpy.std", "numpy.array", "numpy.mean", "range", "len"], "methods", ["None"], ["", "def", "_get_targets", "(", "self", ",", "target_var", ":", "str", "=", "\"y\"", ")", ":", "\n", "        ", "targets", "=", "[", "]", "\n", "for", "node", "in", "self", ".", "_dataset", "[", "\"nodes\"", "]", ":", "\n", "            ", "y", "=", "node", ".", "get", "(", "target_var", ")", "\n", "targets", ".", "append", "(", "np", ".", "array", "(", "y", ")", ")", "\n", "", "stacked_targets", "=", "np", ".", "stack", "(", "targets", ")", ".", "T", "\n", "standardized_targets", "=", "(", "\n", "stacked_targets", "-", "np", ".", "mean", "(", "stacked_targets", ",", "axis", "=", "0", ")", "\n", ")", "/", "np", ".", "std", "(", "stacked_targets", ",", "axis", "=", "0", ")", "\n", "self", ".", "targets", "=", "[", "\n", "standardized_targets", "[", "i", "+", "self", ".", "lags", ",", ":", "]", ".", "T", "\n", "for", "i", "in", "range", "(", "len", "(", "standardized_targets", ")", "-", "self", ".", "lags", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader.get_dataset": [[69, 97], ["montevideo_bus.MontevideoBusDatasetLoader._get_edges", "montevideo_bus.MontevideoBusDatasetLoader._get_edge_weights", "montevideo_bus.MontevideoBusDatasetLoader._get_features", "montevideo_bus.MontevideoBusDatasetLoader._get_targets", "torch_geometric_temporal.signal.StaticGraphTemporalSignal"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edges", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_edge_weights", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_features", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.dataset.montevideo_bus.MontevideoBusDatasetLoader._get_targets"], ["", "def", "get_dataset", "(", "\n", "self", ",", "lags", ":", "int", "=", "4", ",", "target_var", ":", "str", "=", "\"y\"", ",", "feature_vars", ":", "List", "[", "str", "]", "=", "[", "\"y\"", "]", "\n", ")", "->", "StaticGraphTemporalSignal", ":", "\n", "        ", "\"\"\"Returning the MontevideoBus passenger inflow data iterator.\n\n        Parameters\n        ----------\n        lags : int, optional\n            The number of time lags, by default 4.\n        target_var : str, optional\n            Target variable name, by default \"y\".\n        feature_vars : List[str], optional\n            List of feature variables, by default [\"y\"].\n\n        Returns\n        -------\n        StaticGraphTemporalSignal\n            The MontevideoBus dataset.\n        \"\"\"", "\n", "self", ".", "lags", "=", "lags", "\n", "self", ".", "_get_edges", "(", ")", "\n", "self", ".", "_get_edge_weights", "(", ")", "\n", "self", ".", "_get_features", "(", "feature_vars", ")", "\n", "self", ".", "_get_targets", "(", "target_var", ")", "\n", "dataset", "=", "StaticGraphTemporalSignal", "(", "\n", "self", ".", "_edges", ",", "self", ".", "_edge_weights", ",", "self", ".", "features", ",", "self", ".", "targets", "\n", ")", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal.DynamicGraphStaticSignal.__init__": [[30, 48], ["kwargs.items", "dynamic_graph_static_signal.DynamicGraphStaticSignal._check_temporal_consistency", "dynamic_graph_static_signal.DynamicGraphStaticSignal._set_snapshot_count", "setattr", "dynamic_graph_static_signal.DynamicGraphStaticSignal.additional_feature_keys.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._check_temporal_consistency", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._set_snapshot_count"], ["def", "__init__", "(", "\n", "self", ",", "\n", "edge_indices", ":", "Edge_Indices", ",", "\n", "edge_weights", ":", "Edge_Weights", ",", "\n", "feature", ":", "Node_Feature", ",", "\n", "targets", ":", "Targets", ",", "\n", "**", "kwargs", ":", "Additional_Features", "\n", ")", ":", "\n", "        ", "self", ".", "edge_indices", "=", "edge_indices", "\n", "self", ".", "edge_weights", "=", "edge_weights", "\n", "self", ".", "feature", "=", "feature", "\n", "self", ".", "targets", "=", "targets", "\n", "self", ".", "additional_feature_keys", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "self", ".", "additional_feature_keys", ".", "append", "(", "key", ")", "\n", "", "self", ".", "_check_temporal_consistency", "(", ")", "\n", "self", ".", "_set_snapshot_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal.DynamicGraphStaticSignal._check_temporal_consistency": [[49, 60], ["len", "len", "len", "len", "len", "len", "getattr"], "methods", ["None"], ["", "def", "_check_temporal_consistency", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "edge_indices", ")", "==", "len", "(", "\n", "self", ".", "edge_weights", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "targets", ")", "==", "len", "(", "\n", "self", ".", "edge_indices", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", ":", "\n", "            ", "assert", "len", "(", "self", ".", "targets", ")", "==", "len", "(", "\n", "getattr", "(", "self", ",", "key", ")", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal.DynamicGraphStaticSignal._set_snapshot_count": [[61, 63], ["len"], "methods", ["None"], ["", "", "def", "_set_snapshot_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "snapshot_count", "=", "len", "(", "self", ".", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal.DynamicGraphStaticSignal._get_edge_index": [[64, 69], ["torch.LongTensor"], "methods", ["None"], ["", "def", "_get_edge_index", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_indices", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_indices", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "LongTensor", "(", "self", ".", "edge_indices", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal.DynamicGraphStaticSignal._get_edge_weight": [[70, 75], ["torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_edge_weight", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_weights", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_weights", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "edge_weights", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal.DynamicGraphStaticSignal._get_feature": [[76, 81], ["torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_feature", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "feature", "is", "None", ":", "\n", "            ", "return", "self", ".", "feature", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal.DynamicGraphStaticSignal._get_target": [[82, 90], ["torch.LongTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_target", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "targets", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "targets", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "targets", "[", "time_index", "]", ".", "dtype", ".", "kind", "==", "\"i\"", ":", "\n", "                ", "return", "torch", ".", "LongTensor", "(", "self", ".", "targets", "[", "time_index", "]", ")", "\n", "", "elif", "self", ".", "targets", "[", "time_index", "]", ".", "dtype", ".", "kind", "==", "\"f\"", ":", "\n", "                ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "targets", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal.DynamicGraphStaticSignal._get_additional_feature": [[91, 97], ["getattr", "torch.LongTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "", "def", "_get_additional_feature", "(", "self", ",", "time_index", ":", "int", ",", "feature_key", ":", "str", ")", ":", "\n", "        ", "feature", "=", "getattr", "(", "self", ",", "feature_key", ")", "[", "time_index", "]", "\n", "if", "feature", ".", "dtype", ".", "kind", "==", "\"i\"", ":", "\n", "            ", "return", "torch", ".", "LongTensor", "(", "feature", ")", "\n", "", "elif", "feature", ".", "dtype", ".", "kind", "==", "\"f\"", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal.DynamicGraphStaticSignal._get_additional_features": [[98, 104], ["dynamic_graph_static_signal.DynamicGraphStaticSignal._get_additional_feature"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_feature"], ["", "", "def", "_get_additional_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "additional_features", "=", "{", "\n", "key", ":", "self", ".", "_get_additional_feature", "(", "time_index", ",", "key", ")", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", "\n", "}", "\n", "return", "additional_features", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal.DynamicGraphStaticSignal.__len__": [[105, 107], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal.DynamicGraphStaticSignal.__getitem__": [[108, 127], ["isinstance", "dynamic_graph_static_signal.DynamicGraphStaticSignal", "dynamic_graph_static_signal.DynamicGraphStaticSignal._get_feature", "dynamic_graph_static_signal.DynamicGraphStaticSignal._get_edge_index", "dynamic_graph_static_signal.DynamicGraphStaticSignal._get_edge_weight", "dynamic_graph_static_signal.DynamicGraphStaticSignal._get_target", "dynamic_graph_static_signal.DynamicGraphStaticSignal._get_additional_features", "torch_geometric.data.Data", "getattr"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_feature", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_weight", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_target", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_features"], ["", "def", "__getitem__", "(", "self", ",", "time_index", ":", "Union", "[", "int", ",", "slice", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "time_index", ",", "slice", ")", ":", "\n", "            ", "snapshot", "=", "DynamicGraphStaticSignal", "(", "\n", "self", ".", "edge_indices", "[", "time_index", "]", ",", "\n", "self", ".", "edge_weights", "[", "time_index", "]", ",", "\n", "self", ".", "feature", ",", "\n", "self", ".", "targets", "[", "time_index", "]", ",", "\n", "**", "{", "key", ":", "getattr", "(", "self", ",", "key", ")", "[", "time_index", "]", "for", "key", "in", "self", ".", "additional_feature_keys", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "_get_feature", "(", ")", "\n", "edge_index", "=", "self", ".", "_get_edge_index", "(", "time_index", ")", "\n", "edge_weight", "=", "self", ".", "_get_edge_weight", "(", "time_index", ")", "\n", "y", "=", "self", ".", "_get_target", "(", "time_index", ")", "\n", "additional_features", "=", "self", ".", "_get_additional_features", "(", "time_index", ")", "\n", "\n", "snapshot", "=", "Data", "(", "x", "=", "x", ",", "edge_index", "=", "edge_index", ",", "edge_attr", "=", "edge_weight", ",", "\n", "y", "=", "y", ",", "**", "additional_features", ")", "\n", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal.DynamicGraphStaticSignal.__next__": [[128, 136], ["len"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "t", "<", "len", "(", "self", ".", "targets", ")", ":", "\n", "            ", "snapshot", "=", "self", "[", "self", ".", "t", "]", "\n", "self", ".", "t", "=", "self", ".", "t", "+", "1", "\n", "return", "snapshot", "\n", "", "else", ":", "\n", "            ", "self", ".", "t", "=", "0", "\n", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal.DynamicGraphStaticSignal.__iter__": [[137, 140], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "=", "0", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch.__init__": [[33, 53], ["kwargs.items", "dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._check_temporal_consistency", "dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._set_snapshot_count", "setattr", "dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch.additional_feature_keys.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._check_temporal_consistency", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._set_snapshot_count"], ["def", "__init__", "(", "\n", "self", ",", "\n", "edge_indices", ":", "Edge_Indices", ",", "\n", "edge_weights", ":", "Edge_Weights", ",", "\n", "features", ":", "Node_Features", ",", "\n", "targets", ":", "Targets", ",", "\n", "batches", ":", "Batches", ",", "\n", "**", "kwargs", ":", "Additional_Features", "\n", ")", ":", "\n", "        ", "self", ".", "edge_indices", "=", "edge_indices", "\n", "self", ".", "edge_weights", "=", "edge_weights", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "targets", "=", "targets", "\n", "self", ".", "batches", "=", "batches", "\n", "self", ".", "additional_feature_keys", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "self", ".", "additional_feature_keys", ".", "append", "(", "key", ")", "\n", "", "self", ".", "_check_temporal_consistency", "(", ")", "\n", "self", ".", "_set_snapshot_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._check_temporal_consistency": [[54, 71], ["len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "getattr"], "methods", ["None"], ["", "def", "_check_temporal_consistency", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "features", ")", "==", "len", "(", "\n", "self", ".", "targets", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "edge_indices", ")", "==", "len", "(", "\n", "self", ".", "edge_weights", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "features", ")", "==", "len", "(", "\n", "self", ".", "edge_weights", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "features", ")", "==", "len", "(", "\n", "self", ".", "batches", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", ":", "\n", "            ", "assert", "len", "(", "self", ".", "targets", ")", "==", "len", "(", "\n", "getattr", "(", "self", ",", "key", ")", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._set_snapshot_count": [[72, 74], ["len"], "methods", ["None"], ["", "", "def", "_set_snapshot_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "snapshot_count", "=", "len", "(", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._get_edge_index": [[75, 80], ["torch.LongTensor"], "methods", ["None"], ["", "def", "_get_edge_index", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_indices", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_indices", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "LongTensor", "(", "self", ".", "edge_indices", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._get_batch_index": [[81, 86], ["torch.LongTensor"], "methods", ["None"], ["", "", "def", "_get_batch_index", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "batches", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "batches", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "LongTensor", "(", "self", ".", "batches", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._get_edge_weight": [[87, 92], ["torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_edge_weight", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_weights", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_weights", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "edge_weights", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._get_feature": [[93, 98], ["torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_feature", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "features", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "features", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "features", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._get_target": [[99, 107], ["torch.LongTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_target", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "targets", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "targets", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "targets", "[", "time_index", "]", ".", "dtype", ".", "kind", "==", "\"i\"", ":", "\n", "                ", "return", "torch", ".", "LongTensor", "(", "self", ".", "targets", "[", "time_index", "]", ")", "\n", "", "elif", "self", ".", "targets", "[", "time_index", "]", ".", "dtype", ".", "kind", "==", "\"f\"", ":", "\n", "                ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "targets", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._get_additional_feature": [[108, 114], ["getattr", "torch.LongTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "", "def", "_get_additional_feature", "(", "self", ",", "time_index", ":", "int", ",", "feature_key", ":", "str", ")", ":", "\n", "        ", "feature", "=", "getattr", "(", "self", ",", "feature_key", ")", "[", "time_index", "]", "\n", "if", "feature", ".", "dtype", ".", "kind", "==", "\"i\"", ":", "\n", "            ", "return", "torch", ".", "LongTensor", "(", "feature", ")", "\n", "", "elif", "feature", ".", "dtype", ".", "kind", "==", "\"f\"", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._get_additional_features": [[115, 121], ["dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._get_additional_feature"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_feature"], ["", "", "def", "_get_additional_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "additional_features", "=", "{", "\n", "key", ":", "self", ".", "_get_additional_feature", "(", "time_index", ",", "key", ")", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", "\n", "}", "\n", "return", "additional_features", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch.__getitem__": [[122, 143], ["isinstance", "dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch", "dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._get_feature", "dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._get_edge_index", "dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._get_edge_weight", "dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._get_batch_index", "dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._get_target", "dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch._get_additional_features", "torch_geometric.data.Batch", "getattr"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_feature", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_weight", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_batch_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_target", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_features"], ["", "def", "__getitem__", "(", "self", ",", "time_index", ":", "Union", "[", "int", ",", "slice", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "time_index", ",", "slice", ")", ":", "\n", "            ", "snapshot", "=", "DynamicGraphTemporalSignalBatch", "(", "\n", "self", ".", "edge_indices", "[", "time_index", "]", ",", "\n", "self", ".", "edge_weights", "[", "time_index", "]", ",", "\n", "self", ".", "features", "[", "time_index", "]", ",", "\n", "self", ".", "targets", "[", "time_index", "]", ",", "\n", "self", ".", "batches", "[", "time_index", "]", ",", "\n", "**", "{", "key", ":", "getattr", "(", "self", ",", "key", ")", "[", "time_index", "]", "for", "key", "in", "self", ".", "additional_feature_keys", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "_get_feature", "(", "time_index", ")", "\n", "edge_index", "=", "self", ".", "_get_edge_index", "(", "time_index", ")", "\n", "edge_weight", "=", "self", ".", "_get_edge_weight", "(", "time_index", ")", "\n", "batch", "=", "self", ".", "_get_batch_index", "(", "time_index", ")", "\n", "y", "=", "self", ".", "_get_target", "(", "time_index", ")", "\n", "additional_features", "=", "self", ".", "_get_additional_features", "(", "time_index", ")", "\n", "\n", "snapshot", "=", "Batch", "(", "x", "=", "x", ",", "edge_index", "=", "edge_index", ",", "edge_attr", "=", "edge_weight", ",", "\n", "y", "=", "y", ",", "batch", "=", "batch", ",", "**", "additional_features", ")", "\n", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch.__next__": [[144, 152], ["len"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "t", "<", "len", "(", "self", ".", "features", ")", ":", "\n", "            ", "snapshot", "=", "self", "[", "self", ".", "t", "]", "\n", "self", ".", "t", "=", "self", ".", "t", "+", "1", "\n", "return", "snapshot", "\n", "", "else", ":", "\n", "            ", "self", ".", "t", "=", "0", "\n", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal_batch.DynamicGraphTemporalSignalBatch.__iter__": [[153, 156], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "=", "0", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal.__init__": [[35, 53], ["kwargs.items", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._check_temporal_consistency", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._set_snapshot_count", "setattr", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal.additional_feature_keys.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._check_temporal_consistency", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._set_snapshot_count"], ["def", "__init__", "(", "\n", "self", ",", "\n", "edge_index_dicts", ":", "Edge_Indices", ",", "\n", "edge_weight_dicts", ":", "Edge_Weights", ",", "\n", "feature_dict", ":", "Node_Feature", ",", "\n", "target_dicts", ":", "Targets", ",", "\n", "**", "kwargs", ":", "Additional_Features", "\n", ")", ":", "\n", "        ", "self", ".", "edge_index_dicts", "=", "edge_index_dicts", "\n", "self", ".", "edge_weight_dicts", "=", "edge_weight_dicts", "\n", "self", ".", "feature_dict", "=", "feature_dict", "\n", "self", ".", "target_dicts", "=", "target_dicts", "\n", "self", ".", "additional_feature_keys", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "self", ".", "additional_feature_keys", ".", "append", "(", "key", ")", "\n", "", "self", ".", "_check_temporal_consistency", "(", ")", "\n", "self", ".", "_set_snapshot_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._check_temporal_consistency": [[54, 65], ["len", "len", "len", "len", "len", "len", "getattr"], "methods", ["None"], ["", "def", "_check_temporal_consistency", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "edge_index_dicts", ")", "==", "len", "(", "\n", "self", ".", "edge_weight_dicts", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "target_dicts", ")", "==", "len", "(", "\n", "self", ".", "edge_index_dicts", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", ":", "\n", "            ", "assert", "len", "(", "self", ".", "target_dicts", ")", "==", "len", "(", "\n", "getattr", "(", "self", ",", "key", ")", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._set_snapshot_count": [[66, 68], ["len"], "methods", ["None"], ["", "", "def", "_set_snapshot_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "snapshot_count", "=", "len", "(", "self", ".", "target_dicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._get_edge_index": [[69, 75], ["torch.LongTensor", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal.edge_index_dicts[].items"], "methods", ["None"], ["", "def", "_get_edge_index", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_index_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_index_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "LongTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "edge_index_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._get_edge_weight": [[76, 82], ["torch.FloatTensor", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal.edge_weight_dicts[].items"], "methods", ["None"], ["", "", "def", "_get_edge_weight", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_weight_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_weight_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "edge_weight_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._get_feature": [[83, 88], ["torch.FloatTensor", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal.feature_dict.items"], "methods", ["None"], ["", "", "def", "_get_feature", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "feature_dict", "is", "None", ":", "\n", "            ", "return", "self", ".", "feature_dict", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "feature_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._get_target": [[89, 96], ["torch.FloatTensor", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal.target_dicts[].items", "torch.LongTensor"], "methods", ["None"], ["", "", "def", "_get_target", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "target_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "target_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "if", "value", ".", "dtype", ".", "kind", "==", "\"f\"", "else", "torch", ".", "LongTensor", "(", "value", ")", "\n", "if", "value", ".", "dtype", ".", "kind", "==", "\"i\"", "else", "value", "for", "key", ",", "value", "in", "self", ".", "target_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._get_additional_feature": [[97, 105], ["getattr", "torch.FloatTensor", "feature.items", "torch.LongTensor"], "methods", ["None"], ["", "", "def", "_get_additional_feature", "(", "self", ",", "time_index", ":", "int", ",", "feature_key", ":", "str", ")", ":", "\n", "        ", "feature", "=", "getattr", "(", "self", ",", "feature_key", ")", "[", "time_index", "]", "\n", "if", "feature", "is", "None", ":", "\n", "            ", "return", "feature", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "if", "value", ".", "dtype", ".", "kind", "==", "\"f\"", "else", "torch", ".", "LongTensor", "(", "value", ")", "\n", "if", "value", ".", "dtype", ".", "kind", "==", "\"i\"", "else", "value", "for", "key", ",", "value", "in", "feature", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._get_additional_features": [[106, 112], ["dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._get_additional_feature"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_feature"], ["", "", "def", "_get_additional_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "additional_features", "=", "{", "\n", "key", ":", "self", ".", "_get_additional_feature", "(", "time_index", ",", "key", ")", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", "\n", "}", "\n", "return", "additional_features", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal.__len__": [[113, 115], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "target_dicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal.__getitem__": [[116, 151], ["isinstance", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._get_feature", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._get_edge_index", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._get_edge_weight", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._get_target", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal._get_additional_features", "torch_geometric.data.HeteroData", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal.items", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal.items", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal.items", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal.items", "dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal.items", "feature_dict.items", "getattr"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_feature", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_weight", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_target", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_features"], ["", "def", "__getitem__", "(", "self", ",", "time_index", ":", "Union", "[", "int", ",", "slice", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "time_index", ",", "slice", ")", ":", "\n", "            ", "snapshot", "=", "DynamicHeteroGraphStaticSignal", "(", "\n", "self", ".", "edge_index_dicts", "[", "time_index", "]", ",", "\n", "self", ".", "edge_weight_dicts", "[", "time_index", "]", ",", "\n", "self", ".", "feature_dict", ",", "\n", "self", ".", "target_dicts", "[", "time_index", "]", ",", "\n", "**", "{", "key", ":", "getattr", "(", "self", ",", "key", ")", "[", "time_index", "]", "for", "key", "in", "self", ".", "additional_feature_keys", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x_dict", "=", "self", ".", "_get_feature", "(", ")", "\n", "edge_index_dict", "=", "self", ".", "_get_edge_index", "(", "time_index", ")", "\n", "edge_weight_dict", "=", "self", ".", "_get_edge_weight", "(", "time_index", ")", "\n", "y_dict", "=", "self", ".", "_get_target", "(", "time_index", ")", "\n", "additional_features", "=", "self", ".", "_get_additional_features", "(", "time_index", ")", "\n", "\n", "snapshot", "=", "HeteroData", "(", ")", "\n", "if", "x_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "x_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "x", "=", "value", "\n", "", "", "if", "edge_index_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "edge_index_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "edge_index", "=", "value", "\n", "", "", "if", "edge_weight_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "edge_weight_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "edge_attr", "=", "value", "\n", "", "", "if", "y_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "y_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "y", "=", "value", "\n", "", "", "if", "additional_features", ":", "\n", "                ", "for", "feature_name", ",", "feature_dict", "in", "additional_features", ".", "items", "(", ")", ":", "\n", "                    ", "if", "feature_dict", ":", "\n", "                        ", "for", "key", ",", "value", "in", "feature_dict", ".", "items", "(", ")", ":", "\n", "                            ", "snapshot", "[", "key", "]", "[", "feature_name", "]", "=", "value", "\n", "", "", "", "", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal.__next__": [[152, 160], ["len"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "t", "<", "len", "(", "self", ".", "target_dicts", ")", ":", "\n", "            ", "snapshot", "=", "self", "[", "self", ".", "t", "]", "\n", "self", ".", "t", "=", "self", ".", "t", "+", "1", "\n", "return", "snapshot", "\n", "", "else", ":", "\n", "            ", "self", ".", "t", "=", "0", "\n", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal.DynamicHeteroGraphStaticSignal.__iter__": [[161, 164], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "=", "0", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.__init__": [[38, 58], ["kwargs.items", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._check_temporal_consistency", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._set_snapshot_count", "setattr", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.additional_feature_keys.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._check_temporal_consistency", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._set_snapshot_count"], ["def", "__init__", "(", "\n", "self", ",", "\n", "edge_index_dict", ":", "Edge_Index", ",", "\n", "edge_weight_dict", ":", "Edge_Weight", ",", "\n", "feature_dicts", ":", "Node_Features", ",", "\n", "target_dicts", ":", "Targets", ",", "\n", "batch_dict", ":", "Batches", ",", "\n", "**", "kwargs", ":", "Additional_Features", "\n", ")", ":", "\n", "        ", "self", ".", "edge_index_dict", "=", "edge_index_dict", "\n", "self", ".", "edge_weight_dict", "=", "edge_weight_dict", "\n", "self", ".", "feature_dicts", "=", "feature_dicts", "\n", "self", ".", "target_dicts", "=", "target_dicts", "\n", "self", ".", "batch_dict", "=", "batch_dict", "\n", "self", ".", "additional_feature_keys", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "self", ".", "additional_feature_keys", ".", "append", "(", "key", ")", "\n", "", "self", ".", "_check_temporal_consistency", "(", ")", "\n", "self", ".", "_set_snapshot_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._check_temporal_consistency": [[59, 67], ["len", "len", "len", "len", "getattr"], "methods", ["None"], ["", "def", "_check_temporal_consistency", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "feature_dicts", ")", "==", "len", "(", "\n", "self", ".", "target_dicts", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", ":", "\n", "            ", "assert", "len", "(", "self", ".", "target_dicts", ")", "==", "len", "(", "\n", "getattr", "(", "self", ",", "key", ")", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._set_snapshot_count": [[68, 70], ["len"], "methods", ["None"], ["", "", "def", "_set_snapshot_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "snapshot_count", "=", "len", "(", "self", ".", "feature_dicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._get_edge_index": [[71, 76], ["torch.LongTensor", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.edge_index_dict.items"], "methods", ["None"], ["", "def", "_get_edge_index", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "edge_index_dict", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_index_dict", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "LongTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "edge_index_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._get_batch_index": [[77, 82], ["torch.LongTensor", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.batch_dict.items"], "methods", ["None"], ["", "", "def", "_get_batch_index", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "batch_dict", "is", "None", ":", "\n", "            ", "return", "self", ".", "batch_dict", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "LongTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "batch_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._get_edge_weight": [[83, 88], ["torch.FloatTensor", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.edge_weight_dict.items"], "methods", ["None"], ["", "", "def", "_get_edge_weight", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "edge_weight_dict", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_weight_dict", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "edge_weight_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._get_features": [[89, 95], ["torch.FloatTensor", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.feature_dicts[].items"], "methods", ["None"], ["", "", "def", "_get_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "feature_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "feature_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "feature_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._get_target": [[96, 103], ["torch.FloatTensor", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.target_dicts[].items", "torch.LongTensor"], "methods", ["None"], ["", "", "def", "_get_target", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "target_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "target_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "if", "value", ".", "dtype", ".", "kind", "==", "\"f\"", "else", "torch", ".", "LongTensor", "(", "value", ")", "\n", "if", "value", ".", "dtype", ".", "kind", "==", "\"i\"", "else", "value", "for", "key", ",", "value", "in", "self", ".", "target_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._get_additional_feature": [[104, 112], ["getattr", "torch.FloatTensor", "feature.items", "torch.LongTensor"], "methods", ["None"], ["", "", "def", "_get_additional_feature", "(", "self", ",", "time_index", ":", "int", ",", "feature_key", ":", "str", ")", ":", "\n", "        ", "feature", "=", "getattr", "(", "self", ",", "feature_key", ")", "[", "time_index", "]", "\n", "if", "feature", "is", "None", ":", "\n", "            ", "return", "feature", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "if", "value", ".", "dtype", ".", "kind", "==", "\"f\"", "else", "torch", ".", "LongTensor", "(", "value", ")", "\n", "if", "value", ".", "dtype", ".", "kind", "==", "\"i\"", "else", "value", "for", "key", ",", "value", "in", "feature", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._get_additional_features": [[113, 119], ["static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._get_additional_feature"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_feature"], ["", "", "def", "_get_additional_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "additional_features", "=", "{", "\n", "key", ":", "self", ".", "_get_additional_feature", "(", "time_index", ",", "key", ")", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", "\n", "}", "\n", "return", "additional_features", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.__getitem__": [[120, 160], ["isinstance", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._get_features", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._get_edge_index", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._get_edge_weight", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._get_batch_index", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._get_target", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch._get_additional_features", "torch_geometric.data.Batch.from_data_list", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.items", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.items", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.items", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.items", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.items", "static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.items", "torch_geometric.data.HeteroData", "feature_dict.items", "getattr"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_features", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_weight", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_batch_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_target", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_features"], ["", "def", "__getitem__", "(", "self", ",", "time_index", ":", "Union", "[", "int", ",", "slice", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "time_index", ",", "slice", ")", ":", "\n", "            ", "snapshot", "=", "StaticHeteroGraphTemporalSignalBatch", "(", "\n", "self", ".", "edge_index_dict", ",", "\n", "self", ".", "edge_weight_dict", ",", "\n", "self", ".", "feature_dicts", "[", "time_index", "]", ",", "\n", "self", ".", "target_dicts", "[", "time_index", "]", ",", "\n", "self", ".", "batch_dict", ",", "\n", "**", "{", "key", ":", "getattr", "(", "self", ",", "key", ")", "[", "time_index", "]", "for", "key", "in", "self", ".", "additional_feature_keys", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x_dict", "=", "self", ".", "_get_features", "(", "time_index", ")", "\n", "edge_index_dict", "=", "self", ".", "_get_edge_index", "(", ")", "\n", "edge_weight_dict", "=", "self", ".", "_get_edge_weight", "(", ")", "\n", "batch_dict", "=", "self", ".", "_get_batch_index", "(", ")", "\n", "y_dict", "=", "self", ".", "_get_target", "(", "time_index", ")", "\n", "additional_features", "=", "self", ".", "_get_additional_features", "(", "time_index", ")", "\n", "\n", "snapshot", "=", "Batch", ".", "from_data_list", "(", "[", "HeteroData", "(", ")", "]", ")", "\n", "if", "x_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "x_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "x", "=", "value", "\n", "", "", "if", "edge_index_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "edge_index_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "edge_index", "=", "value", "\n", "", "", "if", "edge_weight_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "edge_weight_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "edge_attr", "=", "value", "\n", "", "", "if", "y_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "y_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "y", "=", "value", "\n", "", "", "if", "batch_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "batch_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "batch", "=", "value", "\n", "", "", "if", "additional_features", ":", "\n", "                ", "for", "feature_name", ",", "feature_dict", "in", "additional_features", ".", "items", "(", ")", ":", "\n", "                    ", "if", "feature_dict", ":", "\n", "                        ", "for", "key", ",", "value", "in", "feature_dict", ".", "items", "(", ")", ":", "\n", "                            ", "snapshot", "[", "key", "]", "[", "feature_name", "]", "=", "value", "\n", "", "", "", "", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.__next__": [[161, 169], ["len"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "t", "<", "len", "(", "self", ".", "feature_dicts", ")", ":", "\n", "            ", "snapshot", "=", "self", "[", "self", ".", "t", "]", "\n", "self", ".", "t", "=", "self", ".", "t", "+", "1", "\n", "return", "snapshot", "\n", "", "else", ":", "\n", "            ", "self", ".", "t", "=", "0", "\n", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal_batch.StaticHeteroGraphTemporalSignalBatch.__iter__": [[170, 173], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "=", "0", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal.DynamicGraphTemporalSignal.__init__": [[30, 48], ["kwargs.items", "dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._check_temporal_consistency", "dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._set_snapshot_count", "setattr", "dynamic_graph_temporal_signal.DynamicGraphTemporalSignal.additional_feature_keys.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._check_temporal_consistency", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._set_snapshot_count"], ["def", "__init__", "(", "\n", "self", ",", "\n", "edge_indices", ":", "Edge_Indices", ",", "\n", "edge_weights", ":", "Edge_Weights", ",", "\n", "features", ":", "Node_Features", ",", "\n", "targets", ":", "Targets", ",", "\n", "**", "kwargs", ":", "Additional_Features", "\n", ")", ":", "\n", "        ", "self", ".", "edge_indices", "=", "edge_indices", "\n", "self", ".", "edge_weights", "=", "edge_weights", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "targets", "=", "targets", "\n", "self", ".", "additional_feature_keys", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "self", ".", "additional_feature_keys", ".", "append", "(", "key", ")", "\n", "", "self", ".", "_check_temporal_consistency", "(", ")", "\n", "self", ".", "_set_snapshot_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._check_temporal_consistency": [[49, 63], ["len", "len", "len", "len", "len", "len", "len", "len", "getattr"], "methods", ["None"], ["", "def", "_check_temporal_consistency", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "features", ")", "==", "len", "(", "\n", "self", ".", "targets", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "edge_indices", ")", "==", "len", "(", "\n", "self", ".", "edge_weights", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "features", ")", "==", "len", "(", "\n", "self", ".", "edge_weights", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", ":", "\n", "            ", "assert", "len", "(", "self", ".", "targets", ")", "==", "len", "(", "\n", "getattr", "(", "self", ",", "key", ")", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._set_snapshot_count": [[64, 66], ["len"], "methods", ["None"], ["", "", "def", "_set_snapshot_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "snapshot_count", "=", "len", "(", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._get_edge_index": [[67, 72], ["torch.LongTensor"], "methods", ["None"], ["", "def", "_get_edge_index", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_indices", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_indices", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "LongTensor", "(", "self", ".", "edge_indices", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._get_edge_weight": [[73, 78], ["torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_edge_weight", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_weights", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_weights", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "edge_weights", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._get_features": [[79, 84], ["torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "features", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "features", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "features", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._get_target": [[85, 93], ["torch.LongTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_target", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "targets", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "targets", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "targets", "[", "time_index", "]", ".", "dtype", ".", "kind", "==", "\"i\"", ":", "\n", "                ", "return", "torch", ".", "LongTensor", "(", "self", ".", "targets", "[", "time_index", "]", ")", "\n", "", "elif", "self", ".", "targets", "[", "time_index", "]", ".", "dtype", ".", "kind", "==", "\"f\"", ":", "\n", "                ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "targets", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._get_additional_feature": [[94, 100], ["getattr", "torch.LongTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "", "def", "_get_additional_feature", "(", "self", ",", "time_index", ":", "int", ",", "feature_key", ":", "str", ")", ":", "\n", "        ", "feature", "=", "getattr", "(", "self", ",", "feature_key", ")", "[", "time_index", "]", "\n", "if", "feature", ".", "dtype", ".", "kind", "==", "\"i\"", ":", "\n", "            ", "return", "torch", ".", "LongTensor", "(", "feature", ")", "\n", "", "elif", "feature", ".", "dtype", ".", "kind", "==", "\"f\"", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._get_additional_features": [[101, 107], ["dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._get_additional_feature"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_feature"], ["", "", "def", "_get_additional_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "additional_features", "=", "{", "\n", "key", ":", "self", ".", "_get_additional_feature", "(", "time_index", ",", "key", ")", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", "\n", "}", "\n", "return", "additional_features", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal.DynamicGraphTemporalSignal.__getitem__": [[108, 127], ["isinstance", "dynamic_graph_temporal_signal.DynamicGraphTemporalSignal", "dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._get_features", "dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._get_edge_index", "dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._get_edge_weight", "dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._get_target", "dynamic_graph_temporal_signal.DynamicGraphTemporalSignal._get_additional_features", "torch_geometric.data.Data", "getattr"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_features", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_weight", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_target", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_features"], ["", "def", "__getitem__", "(", "self", ",", "time_index", ":", "Union", "[", "int", ",", "slice", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "time_index", ",", "slice", ")", ":", "\n", "            ", "snapshot", "=", "DynamicGraphTemporalSignal", "(", "\n", "self", ".", "edge_indices", "[", "time_index", "]", ",", "\n", "self", ".", "edge_weights", "[", "time_index", "]", ",", "\n", "self", ".", "features", "[", "time_index", "]", ",", "\n", "self", ".", "targets", "[", "time_index", "]", ",", "\n", "**", "{", "key", ":", "getattr", "(", "self", ",", "key", ")", "[", "time_index", "]", "for", "key", "in", "self", ".", "additional_feature_keys", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "_get_features", "(", "time_index", ")", "\n", "edge_index", "=", "self", ".", "_get_edge_index", "(", "time_index", ")", "\n", "edge_weight", "=", "self", ".", "_get_edge_weight", "(", "time_index", ")", "\n", "y", "=", "self", ".", "_get_target", "(", "time_index", ")", "\n", "additional_features", "=", "self", ".", "_get_additional_features", "(", "time_index", ")", "\n", "\n", "snapshot", "=", "Data", "(", "x", "=", "x", ",", "edge_index", "=", "edge_index", ",", "edge_attr", "=", "edge_weight", ",", "\n", "y", "=", "y", ",", "**", "additional_features", ")", "\n", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal.DynamicGraphTemporalSignal.__next__": [[128, 136], ["len"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "t", "<", "len", "(", "self", ".", "features", ")", ":", "\n", "            ", "snapshot", "=", "self", "[", "self", ".", "t", "]", "\n", "self", ".", "t", "=", "self", ".", "t", "+", "1", "\n", "return", "snapshot", "\n", "", "else", ":", "\n", "            ", "self", ".", "t", "=", "0", "\n", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_temporal_signal.DynamicGraphTemporalSignal.__iter__": [[137, 140], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "=", "0", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.__init__": [[39, 59], ["kwargs.items", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._check_temporal_consistency", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._set_snapshot_count", "setattr", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.additional_feature_keys.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._check_temporal_consistency", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._set_snapshot_count"], ["def", "__init__", "(", "\n", "self", ",", "\n", "edge_index_dicts", ":", "Edge_Indices", ",", "\n", "edge_weight_dicts", ":", "Edge_Weights", ",", "\n", "feature_dict", ":", "Node_Feature", ",", "\n", "target_dicts", ":", "Targets", ",", "\n", "batch_dicts", ":", "Batches", ",", "\n", "**", "kwargs", ":", "Additional_Features", "\n", ")", ":", "\n", "        ", "self", ".", "edge_index_dicts", "=", "edge_index_dicts", "\n", "self", ".", "edge_weight_dicts", "=", "edge_weight_dicts", "\n", "self", ".", "feature_dict", "=", "feature_dict", "\n", "self", ".", "target_dicts", "=", "target_dicts", "\n", "self", ".", "batch_dicts", "=", "batch_dicts", "\n", "self", ".", "additional_feature_keys", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "self", ".", "additional_feature_keys", ".", "append", "(", "key", ")", "\n", "", "self", ".", "_check_temporal_consistency", "(", ")", "\n", "self", ".", "_set_snapshot_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._check_temporal_consistency": [[60, 74], ["len", "len", "len", "len", "len", "len", "len", "len", "getattr"], "methods", ["None"], ["", "def", "_check_temporal_consistency", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "edge_index_dicts", ")", "==", "len", "(", "\n", "self", ".", "edge_weight_dicts", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "target_dicts", ")", "==", "len", "(", "\n", "self", ".", "edge_index_dicts", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "batch_dicts", ")", "==", "len", "(", "\n", "self", ".", "edge_index_dicts", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", ":", "\n", "            ", "assert", "len", "(", "self", ".", "target_dicts", ")", "==", "len", "(", "\n", "getattr", "(", "self", ",", "key", ")", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._set_snapshot_count": [[75, 77], ["len"], "methods", ["None"], ["", "", "def", "_set_snapshot_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "snapshot_count", "=", "len", "(", "self", ".", "target_dicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._get_edge_index": [[78, 84], ["torch.LongTensor", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.edge_index_dicts[].items"], "methods", ["None"], ["", "def", "_get_edge_index", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_index_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_index_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "LongTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "edge_index_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._get_batch_index": [[85, 91], ["torch.LongTensor", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.batch_dicts[].items"], "methods", ["None"], ["", "", "def", "_get_batch_index", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "batch_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "batch_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "LongTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "batch_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._get_edge_weight": [[92, 98], ["torch.FloatTensor", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.edge_weight_dicts[].items"], "methods", ["None"], ["", "", "def", "_get_edge_weight", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_weight_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_weight_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "edge_weight_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._get_feature": [[99, 104], ["torch.FloatTensor", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.feature_dict.items"], "methods", ["None"], ["", "", "def", "_get_feature", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "feature_dict", "is", "None", ":", "\n", "            ", "return", "self", ".", "feature_dict", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "feature_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._get_target": [[105, 112], ["torch.FloatTensor", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.target_dicts[].items", "torch.LongTensor"], "methods", ["None"], ["", "", "def", "_get_target", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "target_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "target_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "if", "value", ".", "dtype", ".", "kind", "==", "\"f\"", "else", "torch", ".", "LongTensor", "(", "value", ")", "\n", "if", "value", ".", "dtype", ".", "kind", "==", "\"i\"", "else", "value", "for", "key", ",", "value", "in", "self", ".", "target_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._get_additional_feature": [[113, 121], ["getattr", "torch.FloatTensor", "feature.items", "torch.LongTensor"], "methods", ["None"], ["", "", "def", "_get_additional_feature", "(", "self", ",", "time_index", ":", "int", ",", "feature_key", ":", "str", ")", ":", "\n", "        ", "feature", "=", "getattr", "(", "self", ",", "feature_key", ")", "[", "time_index", "]", "\n", "if", "feature", "is", "None", ":", "\n", "            ", "return", "feature", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "if", "value", ".", "dtype", ".", "kind", "==", "\"f\"", "else", "torch", ".", "LongTensor", "(", "value", ")", "\n", "if", "value", ".", "dtype", ".", "kind", "==", "\"i\"", "else", "value", "for", "key", ",", "value", "in", "feature", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._get_additional_features": [[122, 128], ["dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._get_additional_feature"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_feature"], ["", "", "def", "_get_additional_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "additional_features", "=", "{", "\n", "key", ":", "self", ".", "_get_additional_feature", "(", "time_index", ",", "key", ")", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", "\n", "}", "\n", "return", "additional_features", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.__getitem__": [[129, 169], ["isinstance", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._get_feature", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._get_edge_index", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._get_edge_weight", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._get_batch_index", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._get_target", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch._get_additional_features", "torch_geometric.data.Batch.from_data_list", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.items", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.items", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.items", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.items", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.items", "dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.items", "torch_geometric.data.HeteroData", "feature_dict.items", "getattr"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_feature", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_weight", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_batch_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_target", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_features"], ["", "def", "__getitem__", "(", "self", ",", "time_index", ":", "Union", "[", "int", ",", "slice", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "time_index", ",", "slice", ")", ":", "\n", "            ", "snapshot", "=", "DynamicHeteroGraphStaticSignalBatch", "(", "\n", "self", ".", "edge_index_dicts", "[", "time_index", "]", ",", "\n", "self", ".", "edge_weight_dicts", "[", "time_index", "]", ",", "\n", "self", ".", "feature_dict", ",", "\n", "self", ".", "target_dicts", "[", "time_index", "]", ",", "\n", "self", ".", "batch_dicts", "[", "time_index", "]", ",", "\n", "**", "{", "key", ":", "getattr", "(", "self", ",", "key", ")", "[", "time_index", "]", "for", "key", "in", "self", ".", "additional_feature_keys", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x_dict", "=", "self", ".", "_get_feature", "(", ")", "\n", "edge_index_dict", "=", "self", ".", "_get_edge_index", "(", "time_index", ")", "\n", "edge_weight_dict", "=", "self", ".", "_get_edge_weight", "(", "time_index", ")", "\n", "batch_dict", "=", "self", ".", "_get_batch_index", "(", "time_index", ")", "\n", "y_dict", "=", "self", ".", "_get_target", "(", "time_index", ")", "\n", "additional_features", "=", "self", ".", "_get_additional_features", "(", "time_index", ")", "\n", "\n", "snapshot", "=", "Batch", ".", "from_data_list", "(", "[", "HeteroData", "(", ")", "]", ")", "\n", "if", "x_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "x_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "x", "=", "value", "\n", "", "", "if", "edge_index_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "edge_index_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "edge_index", "=", "value", "\n", "", "", "if", "edge_weight_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "edge_weight_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "edge_attr", "=", "value", "\n", "", "", "if", "y_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "y_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "y", "=", "value", "\n", "", "", "if", "batch_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "batch_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "batch", "=", "value", "\n", "", "", "if", "additional_features", ":", "\n", "                ", "for", "feature_name", ",", "feature_dict", "in", "additional_features", ".", "items", "(", ")", ":", "\n", "                    ", "if", "feature_dict", ":", "\n", "                        ", "for", "key", ",", "value", "in", "feature_dict", ".", "items", "(", ")", ":", "\n", "                            ", "snapshot", "[", "key", "]", "[", "feature_name", "]", "=", "value", "\n", "", "", "", "", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.__next__": [[170, 178], ["len"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "t", "<", "len", "(", "self", ".", "target_dicts", ")", ":", "\n", "            ", "snapshot", "=", "self", "[", "self", ".", "t", "]", "\n", "self", ".", "t", "=", "self", ".", "t", "+", "1", "\n", "return", "snapshot", "\n", "", "else", ":", "\n", "            ", "self", ".", "t", "=", "0", "\n", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_static_signal_batch.DynamicHeteroGraphStaticSignalBatch.__iter__": [[179, 182], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "=", "0", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal.__init__": [[35, 53], ["kwargs.items", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._check_temporal_consistency", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._set_snapshot_count", "setattr", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal.additional_feature_keys.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._check_temporal_consistency", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._set_snapshot_count"], ["def", "__init__", "(", "\n", "self", ",", "\n", "edge_index_dicts", ":", "Edge_Indices", ",", "\n", "edge_weight_dicts", ":", "Edge_Weights", ",", "\n", "feature_dicts", ":", "Node_Features", ",", "\n", "target_dicts", ":", "Targets", ",", "\n", "**", "kwargs", ":", "Additional_Features", "\n", ")", ":", "\n", "        ", "self", ".", "edge_index_dicts", "=", "edge_index_dicts", "\n", "self", ".", "edge_weight_dicts", "=", "edge_weight_dicts", "\n", "self", ".", "feature_dicts", "=", "feature_dicts", "\n", "self", ".", "target_dicts", "=", "target_dicts", "\n", "self", ".", "additional_feature_keys", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "self", ".", "additional_feature_keys", ".", "append", "(", "key", ")", "\n", "", "self", ".", "_check_temporal_consistency", "(", ")", "\n", "self", ".", "_set_snapshot_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._check_temporal_consistency": [[54, 68], ["len", "len", "len", "len", "len", "len", "len", "len", "getattr"], "methods", ["None"], ["", "def", "_check_temporal_consistency", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "feature_dicts", ")", "==", "len", "(", "\n", "self", ".", "target_dicts", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "edge_index_dicts", ")", "==", "len", "(", "\n", "self", ".", "edge_weight_dicts", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "feature_dicts", ")", "==", "len", "(", "\n", "self", ".", "edge_weight_dicts", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", ":", "\n", "            ", "assert", "len", "(", "self", ".", "target_dicts", ")", "==", "len", "(", "\n", "getattr", "(", "self", ",", "key", ")", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._set_snapshot_count": [[69, 71], ["len"], "methods", ["None"], ["", "", "def", "_set_snapshot_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "snapshot_count", "=", "len", "(", "self", ".", "feature_dicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._get_edge_index": [[72, 78], ["torch.LongTensor", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal.edge_index_dicts[].items"], "methods", ["None"], ["", "def", "_get_edge_index", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_index_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_index_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "LongTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "edge_index_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._get_edge_weight": [[79, 85], ["torch.FloatTensor", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal.edge_weight_dicts[].items"], "methods", ["None"], ["", "", "def", "_get_edge_weight", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_weight_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_weight_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "edge_weight_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._get_features": [[86, 92], ["torch.FloatTensor", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal.feature_dicts[].items"], "methods", ["None"], ["", "", "def", "_get_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "feature_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "feature_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "feature_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._get_target": [[93, 100], ["torch.FloatTensor", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal.target_dicts[].items", "torch.LongTensor"], "methods", ["None"], ["", "", "def", "_get_target", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "target_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "target_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "if", "value", ".", "dtype", ".", "kind", "==", "\"f\"", "else", "torch", ".", "LongTensor", "(", "value", ")", "\n", "if", "value", ".", "dtype", ".", "kind", "==", "\"i\"", "else", "value", "for", "key", ",", "value", "in", "self", ".", "target_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._get_additional_feature": [[101, 109], ["getattr", "torch.FloatTensor", "feature.items", "torch.LongTensor"], "methods", ["None"], ["", "", "def", "_get_additional_feature", "(", "self", ",", "time_index", ":", "int", ",", "feature_key", ":", "str", ")", ":", "\n", "        ", "feature", "=", "getattr", "(", "self", ",", "feature_key", ")", "[", "time_index", "]", "\n", "if", "feature", "is", "None", ":", "\n", "            ", "return", "feature", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "if", "value", ".", "dtype", ".", "kind", "==", "\"f\"", "else", "torch", ".", "LongTensor", "(", "value", ")", "\n", "if", "value", ".", "dtype", ".", "kind", "==", "\"i\"", "else", "value", "for", "key", ",", "value", "in", "feature", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._get_additional_features": [[110, 116], ["dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._get_additional_feature"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_feature"], ["", "", "def", "_get_additional_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "additional_features", "=", "{", "\n", "key", ":", "self", ".", "_get_additional_feature", "(", "time_index", ",", "key", ")", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", "\n", "}", "\n", "return", "additional_features", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal.__getitem__": [[117, 152], ["isinstance", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._get_features", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._get_edge_index", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._get_edge_weight", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._get_target", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal._get_additional_features", "torch_geometric.data.HeteroData", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal.items", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal.items", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal.items", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal.items", "dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal.items", "feature_dict.items", "getattr"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_features", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_weight", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_target", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_features"], ["", "def", "__getitem__", "(", "self", ",", "time_index", ":", "Union", "[", "int", ",", "slice", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "time_index", ",", "slice", ")", ":", "\n", "            ", "snapshot", "=", "DynamicHeteroGraphTemporalSignal", "(", "\n", "self", ".", "edge_index_dicts", "[", "time_index", "]", ",", "\n", "self", ".", "edge_weight_dicts", "[", "time_index", "]", ",", "\n", "self", ".", "feature_dicts", "[", "time_index", "]", ",", "\n", "self", ".", "target_dicts", "[", "time_index", "]", ",", "\n", "**", "{", "key", ":", "getattr", "(", "self", ",", "key", ")", "[", "time_index", "]", "for", "key", "in", "self", ".", "additional_feature_keys", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x_dict", "=", "self", ".", "_get_features", "(", "time_index", ")", "\n", "edge_index_dict", "=", "self", ".", "_get_edge_index", "(", "time_index", ")", "\n", "edge_weight_dict", "=", "self", ".", "_get_edge_weight", "(", "time_index", ")", "\n", "y_dict", "=", "self", ".", "_get_target", "(", "time_index", ")", "\n", "additional_features", "=", "self", ".", "_get_additional_features", "(", "time_index", ")", "\n", "\n", "snapshot", "=", "HeteroData", "(", ")", "\n", "if", "x_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "x_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "x", "=", "value", "\n", "", "", "if", "edge_index_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "edge_index_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "edge_index", "=", "value", "\n", "", "", "if", "edge_weight_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "edge_weight_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "edge_attr", "=", "value", "\n", "", "", "if", "y_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "y_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "y", "=", "value", "\n", "", "", "if", "additional_features", ":", "\n", "                ", "for", "feature_name", ",", "feature_dict", "in", "additional_features", ".", "items", "(", ")", ":", "\n", "                    ", "if", "feature_dict", ":", "\n", "                        ", "for", "key", ",", "value", "in", "feature_dict", ".", "items", "(", ")", ":", "\n", "                            ", "snapshot", "[", "key", "]", "[", "feature_name", "]", "=", "value", "\n", "", "", "", "", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal.__next__": [[153, 161], ["len"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "t", "<", "len", "(", "self", ".", "feature_dicts", ")", ":", "\n", "            ", "snapshot", "=", "self", "[", "self", ".", "t", "]", "\n", "self", ".", "t", "=", "self", ".", "t", "+", "1", "\n", "return", "snapshot", "\n", "", "else", ":", "\n", "            ", "self", ".", "t", "=", "0", "\n", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal.DynamicHeteroGraphTemporalSignal.__iter__": [[162, 165], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "=", "0", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch.__init__": [[33, 53], ["kwargs.items", "static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._check_temporal_consistency", "static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._set_snapshot_count", "setattr", "static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch.additional_feature_keys.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._check_temporal_consistency", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._set_snapshot_count"], ["def", "__init__", "(", "\n", "self", ",", "\n", "edge_index", ":", "Edge_Index", ",", "\n", "edge_weight", ":", "Edge_Weight", ",", "\n", "features", ":", "Node_Features", ",", "\n", "targets", ":", "Targets", ",", "\n", "batches", ":", "Batches", ",", "\n", "**", "kwargs", ":", "Additional_Features", "\n", ")", ":", "\n", "        ", "self", ".", "edge_index", "=", "edge_index", "\n", "self", ".", "edge_weight", "=", "edge_weight", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "targets", "=", "targets", "\n", "self", ".", "batches", "=", "batches", "\n", "self", ".", "additional_feature_keys", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "self", ".", "additional_feature_keys", ".", "append", "(", "key", ")", "\n", "", "self", ".", "_check_temporal_consistency", "(", ")", "\n", "self", ".", "_set_snapshot_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._check_temporal_consistency": [[54, 62], ["len", "len", "len", "len", "getattr"], "methods", ["None"], ["", "def", "_check_temporal_consistency", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "features", ")", "==", "len", "(", "\n", "self", ".", "targets", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", ":", "\n", "            ", "assert", "len", "(", "self", ".", "targets", ")", "==", "len", "(", "\n", "getattr", "(", "self", ",", "key", ")", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._set_snapshot_count": [[63, 65], ["len"], "methods", ["None"], ["", "", "def", "_set_snapshot_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "snapshot_count", "=", "len", "(", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._get_edge_index": [[66, 71], ["torch.LongTensor"], "methods", ["None"], ["", "def", "_get_edge_index", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "edge_index", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_index", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "LongTensor", "(", "self", ".", "edge_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._get_batch_index": [[72, 77], ["torch.LongTensor"], "methods", ["None"], ["", "", "def", "_get_batch_index", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "batches", "is", "None", ":", "\n", "            ", "return", "self", ".", "batches", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "LongTensor", "(", "self", ".", "batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._get_edge_weight": [[78, 83], ["torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_edge_weight", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "edge_weight", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_weight", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "edge_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._get_feature": [[84, 89], ["torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_feature", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "features", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "features", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "features", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._get_target": [[90, 98], ["torch.LongTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_target", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "targets", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "targets", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "targets", "[", "time_index", "]", ".", "dtype", ".", "kind", "==", "\"i\"", ":", "\n", "                ", "return", "torch", ".", "LongTensor", "(", "self", ".", "targets", "[", "time_index", "]", ")", "\n", "", "elif", "self", ".", "targets", "[", "time_index", "]", ".", "dtype", ".", "kind", "==", "\"f\"", ":", "\n", "                ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "targets", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._get_additional_feature": [[99, 105], ["getattr", "torch.LongTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "", "def", "_get_additional_feature", "(", "self", ",", "time_index", ":", "int", ",", "feature_key", ":", "str", ")", ":", "\n", "        ", "feature", "=", "getattr", "(", "self", ",", "feature_key", ")", "[", "time_index", "]", "\n", "if", "feature", ".", "dtype", ".", "kind", "==", "\"i\"", ":", "\n", "            ", "return", "torch", ".", "LongTensor", "(", "feature", ")", "\n", "", "elif", "feature", ".", "dtype", ".", "kind", "==", "\"f\"", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._get_additional_features": [[106, 112], ["static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._get_additional_feature"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_feature"], ["", "", "def", "_get_additional_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "additional_features", "=", "{", "\n", "key", ":", "self", ".", "_get_additional_feature", "(", "time_index", ",", "key", ")", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", "\n", "}", "\n", "return", "additional_features", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch.__getitem__": [[113, 134], ["isinstance", "static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch", "static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._get_feature", "static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._get_edge_index", "static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._get_edge_weight", "static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._get_batch_index", "static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._get_target", "static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch._get_additional_features", "torch_geometric.data.Batch", "getattr"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_feature", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_weight", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_batch_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_target", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_features"], ["", "def", "__getitem__", "(", "self", ",", "time_index", ":", "Union", "[", "int", ",", "slice", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "time_index", ",", "slice", ")", ":", "\n", "            ", "snapshot", "=", "StaticGraphTemporalSignalBatch", "(", "\n", "self", ".", "edge_index", ",", "\n", "self", ".", "edge_weight", ",", "\n", "self", ".", "features", "[", "time_index", "]", ",", "\n", "self", ".", "targets", "[", "time_index", "]", ",", "\n", "self", ".", "batches", ",", "\n", "**", "{", "key", ":", "getattr", "(", "self", ",", "key", ")", "[", "time_index", "]", "for", "key", "in", "self", ".", "additional_feature_keys", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "_get_feature", "(", "time_index", ")", "\n", "edge_index", "=", "self", ".", "_get_edge_index", "(", ")", "\n", "edge_weight", "=", "self", ".", "_get_edge_weight", "(", ")", "\n", "batch", "=", "self", ".", "_get_batch_index", "(", ")", "\n", "y", "=", "self", ".", "_get_target", "(", "time_index", ")", "\n", "additional_features", "=", "self", ".", "_get_additional_features", "(", "time_index", ")", "\n", "\n", "snapshot", "=", "Batch", "(", "x", "=", "x", ",", "edge_index", "=", "edge_index", ",", "edge_attr", "=", "edge_weight", ",", "\n", "y", "=", "y", ",", "batch", "=", "batch", ",", "**", "additional_features", ")", "\n", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch.__next__": [[135, 143], ["len"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "t", "<", "len", "(", "self", ".", "features", ")", ":", "\n", "            ", "snapshot", "=", "self", "[", "self", ".", "t", "]", "\n", "self", ".", "t", "=", "self", ".", "t", "+", "1", "\n", "return", "snapshot", "\n", "", "else", ":", "\n", "            ", "self", ".", "t", "=", "0", "\n", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal_batch.StaticGraphTemporalSignalBatch.__iter__": [[144, 147], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "=", "0", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal.StaticGraphTemporalSignal.__init__": [[31, 49], ["kwargs.items", "static_graph_temporal_signal.StaticGraphTemporalSignal._check_temporal_consistency", "static_graph_temporal_signal.StaticGraphTemporalSignal._set_snapshot_count", "setattr", "static_graph_temporal_signal.StaticGraphTemporalSignal.additional_feature_keys.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._check_temporal_consistency", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._set_snapshot_count"], ["def", "__init__", "(", "\n", "self", ",", "\n", "edge_index", ":", "Edge_Index", ",", "\n", "edge_weight", ":", "Edge_Weight", ",", "\n", "features", ":", "Node_Features", ",", "\n", "targets", ":", "Targets", ",", "\n", "**", "kwargs", ":", "Additional_Features", "\n", ")", ":", "\n", "        ", "self", ".", "edge_index", "=", "edge_index", "\n", "self", ".", "edge_weight", "=", "edge_weight", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "targets", "=", "targets", "\n", "self", ".", "additional_feature_keys", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "self", ".", "additional_feature_keys", ".", "append", "(", "key", ")", "\n", "", "self", ".", "_check_temporal_consistency", "(", ")", "\n", "self", ".", "_set_snapshot_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal.StaticGraphTemporalSignal._check_temporal_consistency": [[50, 58], ["len", "len", "len", "len", "getattr"], "methods", ["None"], ["", "def", "_check_temporal_consistency", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "features", ")", "==", "len", "(", "\n", "self", ".", "targets", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", ":", "\n", "            ", "assert", "len", "(", "self", ".", "targets", ")", "==", "len", "(", "\n", "getattr", "(", "self", ",", "key", ")", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal.StaticGraphTemporalSignal._set_snapshot_count": [[59, 61], ["len"], "methods", ["None"], ["", "", "def", "_set_snapshot_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "snapshot_count", "=", "len", "(", "self", ".", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal.StaticGraphTemporalSignal._get_edge_index": [[62, 67], ["torch.LongTensor"], "methods", ["None"], ["", "def", "_get_edge_index", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "edge_index", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_index", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "LongTensor", "(", "self", ".", "edge_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal.StaticGraphTemporalSignal._get_edge_weight": [[68, 73], ["torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_edge_weight", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "edge_weight", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_weight", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "edge_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal.StaticGraphTemporalSignal._get_features": [[74, 79], ["torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "features", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "features", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "features", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal.StaticGraphTemporalSignal._get_target": [[80, 88], ["torch.LongTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_target", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "targets", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "targets", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "targets", "[", "time_index", "]", ".", "dtype", ".", "kind", "==", "\"i\"", ":", "\n", "                ", "return", "torch", ".", "LongTensor", "(", "self", ".", "targets", "[", "time_index", "]", ")", "\n", "", "elif", "self", ".", "targets", "[", "time_index", "]", ".", "dtype", ".", "kind", "==", "\"f\"", ":", "\n", "                ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "targets", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal.StaticGraphTemporalSignal._get_additional_feature": [[89, 95], ["getattr", "torch.LongTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "", "def", "_get_additional_feature", "(", "self", ",", "time_index", ":", "int", ",", "feature_key", ":", "str", ")", ":", "\n", "        ", "feature", "=", "getattr", "(", "self", ",", "feature_key", ")", "[", "time_index", "]", "\n", "if", "feature", ".", "dtype", ".", "kind", "==", "\"i\"", ":", "\n", "            ", "return", "torch", ".", "LongTensor", "(", "feature", ")", "\n", "", "elif", "feature", ".", "dtype", ".", "kind", "==", "\"f\"", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal.StaticGraphTemporalSignal._get_additional_features": [[96, 102], ["static_graph_temporal_signal.StaticGraphTemporalSignal._get_additional_feature"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_feature"], ["", "", "def", "_get_additional_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "additional_features", "=", "{", "\n", "key", ":", "self", ".", "_get_additional_feature", "(", "time_index", ",", "key", ")", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", "\n", "}", "\n", "return", "additional_features", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal.StaticGraphTemporalSignal.__getitem__": [[103, 122], ["isinstance", "static_graph_temporal_signal.StaticGraphTemporalSignal", "static_graph_temporal_signal.StaticGraphTemporalSignal._get_features", "static_graph_temporal_signal.StaticGraphTemporalSignal._get_edge_index", "static_graph_temporal_signal.StaticGraphTemporalSignal._get_edge_weight", "static_graph_temporal_signal.StaticGraphTemporalSignal._get_target", "static_graph_temporal_signal.StaticGraphTemporalSignal._get_additional_features", "torch_geometric.data.Data", "getattr"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_features", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_weight", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_target", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_features"], ["", "def", "__getitem__", "(", "self", ",", "time_index", ":", "Union", "[", "int", ",", "slice", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "time_index", ",", "slice", ")", ":", "\n", "            ", "snapshot", "=", "StaticGraphTemporalSignal", "(", "\n", "self", ".", "edge_index", ",", "\n", "self", ".", "edge_weight", ",", "\n", "self", ".", "features", "[", "time_index", "]", ",", "\n", "self", ".", "targets", "[", "time_index", "]", ",", "\n", "**", "{", "key", ":", "getattr", "(", "self", ",", "key", ")", "[", "time_index", "]", "for", "key", "in", "self", ".", "additional_feature_keys", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "_get_features", "(", "time_index", ")", "\n", "edge_index", "=", "self", ".", "_get_edge_index", "(", ")", "\n", "edge_weight", "=", "self", ".", "_get_edge_weight", "(", ")", "\n", "y", "=", "self", ".", "_get_target", "(", "time_index", ")", "\n", "additional_features", "=", "self", ".", "_get_additional_features", "(", "time_index", ")", "\n", "\n", "snapshot", "=", "Data", "(", "x", "=", "x", ",", "edge_index", "=", "edge_index", ",", "edge_attr", "=", "edge_weight", ",", "\n", "y", "=", "y", ",", "**", "additional_features", ")", "\n", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal.StaticGraphTemporalSignal.__next__": [[123, 131], ["len"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "t", "<", "len", "(", "self", ".", "features", ")", ":", "\n", "            ", "snapshot", "=", "self", "[", "self", ".", "t", "]", "\n", "self", ".", "t", "=", "self", ".", "t", "+", "1", "\n", "return", "snapshot", "\n", "", "else", ":", "\n", "            ", "self", ".", "t", "=", "0", "\n", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_graph_temporal_signal.StaticGraphTemporalSignal.__iter__": [[132, 135], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "=", "0", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch.__init__": [[33, 53], ["kwargs.items", "dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._check_temporal_consistency", "dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._set_snapshot_count", "setattr", "dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch.additional_feature_keys.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._check_temporal_consistency", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._set_snapshot_count"], ["def", "__init__", "(", "\n", "self", ",", "\n", "edge_indices", ":", "Edge_Indices", ",", "\n", "edge_weights", ":", "Edge_Weights", ",", "\n", "feature", ":", "Node_Feature", ",", "\n", "targets", ":", "Targets", ",", "\n", "batches", ":", "Batches", ",", "\n", "**", "kwargs", ":", "Additional_Features", "\n", ")", ":", "\n", "        ", "self", ".", "edge_indices", "=", "edge_indices", "\n", "self", ".", "edge_weights", "=", "edge_weights", "\n", "self", ".", "feature", "=", "feature", "\n", "self", ".", "targets", "=", "targets", "\n", "self", ".", "batches", "=", "batches", "\n", "self", ".", "additional_feature_keys", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "self", ".", "additional_feature_keys", ".", "append", "(", "key", ")", "\n", "", "self", ".", "_check_temporal_consistency", "(", ")", "\n", "self", ".", "_set_snapshot_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._check_temporal_consistency": [[54, 68], ["len", "len", "len", "len", "len", "len", "len", "len", "getattr"], "methods", ["None"], ["", "def", "_check_temporal_consistency", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "edge_indices", ")", "==", "len", "(", "\n", "self", ".", "edge_weights", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "targets", ")", "==", "len", "(", "\n", "self", ".", "edge_indices", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "batches", ")", "==", "len", "(", "\n", "self", ".", "edge_indices", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", ":", "\n", "            ", "assert", "len", "(", "self", ".", "targets", ")", "==", "len", "(", "\n", "getattr", "(", "self", ",", "key", ")", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._set_snapshot_count": [[69, 71], ["len"], "methods", ["None"], ["", "", "def", "_set_snapshot_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "snapshot_count", "=", "len", "(", "self", ".", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._get_edge_index": [[72, 77], ["torch.LongTensor"], "methods", ["None"], ["", "def", "_get_edge_index", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_indices", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_indices", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "LongTensor", "(", "self", ".", "edge_indices", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._get_batch_index": [[78, 83], ["torch.LongTensor"], "methods", ["None"], ["", "", "def", "_get_batch_index", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "batches", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "batches", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "LongTensor", "(", "self", ".", "batches", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._get_edge_weight": [[84, 89], ["torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_edge_weight", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_weights", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_weights", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "edge_weights", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._get_feature": [[90, 95], ["torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_feature", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "feature", "is", "None", ":", "\n", "            ", "return", "self", ".", "feature", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._get_target": [[96, 104], ["torch.LongTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "def", "_get_target", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "targets", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "targets", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "targets", "[", "time_index", "]", ".", "dtype", ".", "kind", "==", "\"i\"", ":", "\n", "                ", "return", "torch", ".", "LongTensor", "(", "self", ".", "targets", "[", "time_index", "]", ")", "\n", "", "elif", "self", ".", "targets", "[", "time_index", "]", ".", "dtype", ".", "kind", "==", "\"f\"", ":", "\n", "                ", "return", "torch", ".", "FloatTensor", "(", "self", ".", "targets", "[", "time_index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._get_additional_feature": [[105, 111], ["getattr", "torch.LongTensor", "torch.FloatTensor"], "methods", ["None"], ["", "", "", "def", "_get_additional_feature", "(", "self", ",", "time_index", ":", "int", ",", "feature_key", ":", "str", ")", ":", "\n", "        ", "feature", "=", "getattr", "(", "self", ",", "feature_key", ")", "[", "time_index", "]", "\n", "if", "feature", ".", "dtype", ".", "kind", "==", "\"i\"", ":", "\n", "            ", "return", "torch", ".", "LongTensor", "(", "feature", ")", "\n", "", "elif", "feature", ".", "dtype", ".", "kind", "==", "\"f\"", ":", "\n", "            ", "return", "torch", ".", "FloatTensor", "(", "feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._get_additional_features": [[112, 118], ["dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._get_additional_feature"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_feature"], ["", "", "def", "_get_additional_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "additional_features", "=", "{", "\n", "key", ":", "self", ".", "_get_additional_feature", "(", "time_index", ",", "key", ")", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", "\n", "}", "\n", "return", "additional_features", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch.__getitem__": [[119, 140], ["isinstance", "dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch", "dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._get_feature", "dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._get_edge_index", "dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._get_edge_weight", "dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._get_batch_index", "dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._get_target", "dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch._get_additional_features", "torch_geometric.data.Batch", "getattr"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_feature", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_weight", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_batch_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_target", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_features"], ["", "def", "__getitem__", "(", "self", ",", "time_index", ":", "Union", "[", "int", ",", "slice", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "time_index", ",", "slice", ")", ":", "\n", "            ", "snapshot", "=", "DynamicGraphStaticSignalBatch", "(", "\n", "self", ".", "edge_indices", "[", "time_index", "]", ",", "\n", "self", ".", "edge_weights", "[", "time_index", "]", ",", "\n", "self", ".", "feature", ",", "\n", "self", ".", "targets", "[", "time_index", "]", ",", "\n", "self", ".", "batches", "[", "time_index", "]", ",", "\n", "**", "{", "key", ":", "getattr", "(", "self", ",", "key", ")", "[", "time_index", "]", "for", "key", "in", "self", ".", "additional_feature_keys", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "_get_feature", "(", ")", "\n", "edge_index", "=", "self", ".", "_get_edge_index", "(", "time_index", ")", "\n", "edge_weight", "=", "self", ".", "_get_edge_weight", "(", "time_index", ")", "\n", "batch", "=", "self", ".", "_get_batch_index", "(", "time_index", ")", "\n", "y", "=", "self", ".", "_get_target", "(", "time_index", ")", "\n", "additional_features", "=", "self", ".", "_get_additional_features", "(", "time_index", ")", "\n", "\n", "snapshot", "=", "Batch", "(", "x", "=", "x", ",", "edge_index", "=", "edge_index", ",", "edge_attr", "=", "edge_weight", ",", "\n", "y", "=", "y", ",", "batch", "=", "batch", ",", "**", "additional_features", ")", "\n", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch.__next__": [[141, 149], ["len"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "t", "<", "len", "(", "self", ".", "targets", ")", ":", "\n", "            ", "snapshot", "=", "self", "[", "self", ".", "t", "]", "\n", "self", ".", "t", "=", "self", ".", "t", "+", "1", "\n", "return", "snapshot", "\n", "", "else", ":", "\n", "            ", "self", ".", "t", "=", "0", "\n", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_graph_static_signal_batch.DynamicGraphStaticSignalBatch.__iter__": [[150, 153], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "=", "0", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.train_test_split.temporal_signal_split": [[36, 55], ["int"], "function", ["None"], ["def", "temporal_signal_split", "(", "\n", "data_iterator", ",", "train_ratio", ":", "float", "=", "0.8", "\n", ")", "->", "Tuple", "[", "Discrete_Signal", ",", "Discrete_Signal", "]", ":", "\n", "    ", "r\"\"\"Function to split a data iterator according to a fixed ratio.\n\n    Arg types:\n        * **data_iterator** *(Signal Iterator)* - Node features.\n        * **train_ratio** *(float)* - Graph edge indices.\n\n    Return types:\n        * **(train_iterator, test_iterator)** *(tuple of Signal Iterators)* - Train and test data iterators.\n    \"\"\"", "\n", "\n", "train_snapshots", "=", "int", "(", "train_ratio", "*", "data_iterator", ".", "snapshot_count", ")", "\n", "\n", "train_iterator", "=", "data_iterator", "[", "0", ":", "train_snapshots", "]", "\n", "test_iterator", "=", "data_iterator", "[", "train_snapshots", ":", "]", "\n", "\n", "return", "train_iterator", ",", "test_iterator", "\n", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal.__init__": [[91, 109], ["kwargs.items", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._check_temporal_consistency", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._set_snapshot_count", "setattr", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal.additional_feature_keys.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._check_temporal_consistency", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._set_snapshot_count"], ["def", "__init__", "(", "\n", "self", ",", "\n", "edge_index_dict", ":", "Edge_Index", ",", "\n", "edge_weight_dict", ":", "Edge_Weight", ",", "\n", "feature_dicts", ":", "Node_Features", ",", "\n", "target_dicts", ":", "Targets", ",", "\n", "**", "kwargs", ":", "Additional_Features", "\n", ")", ":", "\n", "        ", "self", ".", "edge_index_dict", "=", "edge_index_dict", "\n", "self", ".", "edge_weight_dict", "=", "edge_weight_dict", "\n", "self", ".", "feature_dicts", "=", "feature_dicts", "\n", "self", ".", "target_dicts", "=", "target_dicts", "\n", "self", ".", "additional_feature_keys", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "self", ".", "additional_feature_keys", ".", "append", "(", "key", ")", "\n", "", "self", ".", "_check_temporal_consistency", "(", ")", "\n", "self", ".", "_set_snapshot_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._check_temporal_consistency": [[110, 118], ["len", "len", "len", "len", "getattr"], "methods", ["None"], ["", "def", "_check_temporal_consistency", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "feature_dicts", ")", "==", "len", "(", "\n", "self", ".", "target_dicts", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", ":", "\n", "            ", "assert", "len", "(", "self", ".", "target_dicts", ")", "==", "len", "(", "\n", "getattr", "(", "self", ",", "key", ")", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._set_snapshot_count": [[119, 121], ["len"], "methods", ["None"], ["", "", "def", "_set_snapshot_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "snapshot_count", "=", "len", "(", "self", ".", "feature_dicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_edge_index": [[122, 127], ["torch.LongTensor", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal.edge_index_dict.items"], "methods", ["None"], ["", "def", "_get_edge_index", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "edge_index_dict", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_index_dict", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "LongTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "edge_index_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_edge_weight": [[128, 133], ["torch.FloatTensor", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal.edge_weight_dict.items"], "methods", ["None"], ["", "", "def", "_get_edge_weight", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "edge_weight_dict", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_weight_dict", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "edge_weight_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_features": [[134, 140], ["torch.FloatTensor", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal.feature_dicts[].items"], "methods", ["None"], ["", "", "def", "_get_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "feature_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "feature_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "feature_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_target": [[141, 148], ["torch.FloatTensor", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal.target_dicts[].items", "torch.LongTensor"], "methods", ["None"], ["", "", "def", "_get_target", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "target_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "target_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "if", "value", ".", "dtype", ".", "kind", "==", "\"f\"", "else", "torch", ".", "LongTensor", "(", "value", ")", "\n", "if", "value", ".", "dtype", ".", "kind", "==", "\"i\"", "else", "value", "for", "key", ",", "value", "in", "self", ".", "target_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_additional_feature": [[149, 157], ["getattr", "torch.FloatTensor", "feature.items", "torch.LongTensor"], "methods", ["None"], ["", "", "def", "_get_additional_feature", "(", "self", ",", "time_index", ":", "int", ",", "feature_key", ":", "str", ")", ":", "\n", "        ", "feature", "=", "getattr", "(", "self", ",", "feature_key", ")", "[", "time_index", "]", "\n", "if", "feature", "is", "None", ":", "\n", "            ", "return", "feature", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "if", "value", ".", "dtype", ".", "kind", "==", "\"f\"", "else", "torch", ".", "LongTensor", "(", "value", ")", "\n", "if", "value", ".", "dtype", ".", "kind", "==", "\"i\"", "else", "value", "for", "key", ",", "value", "in", "feature", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_additional_features": [[158, 164], ["static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_additional_feature"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_feature"], ["", "", "def", "_get_additional_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "additional_features", "=", "{", "\n", "key", ":", "self", ".", "_get_additional_feature", "(", "time_index", ",", "key", ")", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", "\n", "}", "\n", "return", "additional_features", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal.__getitem__": [[165, 200], ["isinstance", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_features", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_edge_index", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_edge_weight", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_target", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_additional_features", "torch_geometric.data.HeteroData", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal.items", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal.items", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal.items", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal.items", "static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal.items", "feature_dict.items", "getattr"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal._get_features", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_weight", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_target", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_features"], ["", "def", "__getitem__", "(", "self", ",", "time_index", ":", "Union", "[", "int", ",", "slice", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "time_index", ",", "slice", ")", ":", "\n", "            ", "snapshot", "=", "StaticHeteroGraphTemporalSignal", "(", "\n", "self", ".", "edge_index_dict", ",", "\n", "self", ".", "edge_weight_dict", ",", "\n", "self", ".", "feature_dicts", "[", "time_index", "]", ",", "\n", "self", ".", "target_dicts", "[", "time_index", "]", ",", "\n", "**", "{", "key", ":", "getattr", "(", "self", ",", "key", ")", "[", "time_index", "]", "for", "key", "in", "self", ".", "additional_feature_keys", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x_dict", "=", "self", ".", "_get_features", "(", "time_index", ")", "\n", "edge_index_dict", "=", "self", ".", "_get_edge_index", "(", ")", "\n", "edge_weight_dict", "=", "self", ".", "_get_edge_weight", "(", ")", "\n", "y_dict", "=", "self", ".", "_get_target", "(", "time_index", ")", "\n", "additional_features", "=", "self", ".", "_get_additional_features", "(", "time_index", ")", "\n", "\n", "snapshot", "=", "HeteroData", "(", ")", "\n", "if", "x_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "x_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "x", "=", "value", "\n", "", "", "if", "edge_index_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "edge_index_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "edge_index", "=", "value", "\n", "", "", "if", "edge_weight_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "edge_weight_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "edge_attr", "=", "value", "\n", "", "", "if", "y_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "y_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "y", "=", "value", "\n", "", "", "if", "additional_features", ":", "\n", "                ", "for", "feature_name", ",", "feature_dict", "in", "additional_features", ".", "items", "(", ")", ":", "\n", "                    ", "if", "feature_dict", ":", "\n", "                        ", "for", "key", ",", "value", "in", "feature_dict", ".", "items", "(", ")", ":", "\n", "                            ", "snapshot", "[", "key", "]", "[", "feature_name", "]", "=", "value", "\n", "", "", "", "", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal.__next__": [[201, 209], ["len"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "t", "<", "len", "(", "self", ".", "feature_dicts", ")", ":", "\n", "            ", "snapshot", "=", "self", "[", "self", ".", "t", "]", "\n", "self", ".", "t", "=", "self", ".", "t", "+", "1", "\n", "return", "snapshot", "\n", "", "else", ":", "\n", "            ", "self", ".", "t", "=", "0", "\n", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.static_hetero_graph_temporal_signal.StaticHeteroGraphTemporalSignal.__iter__": [[210, 213], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "=", "0", "\n", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__init__": [[39, 59], ["kwargs.items", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._check_temporal_consistency", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._set_snapshot_count", "setattr", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.additional_feature_keys.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._check_temporal_consistency", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._set_snapshot_count"], ["def", "__init__", "(", "\n", "self", ",", "\n", "edge_index_dicts", ":", "Edge_Indices", ",", "\n", "edge_weight_dicts", ":", "Edge_Weights", ",", "\n", "feature_dicts", ":", "Node_Features", ",", "\n", "target_dicts", ":", "Targets", ",", "\n", "batch_dicts", ":", "Batches", ",", "\n", "**", "kwargs", ":", "Additional_Features", "\n", ")", ":", "\n", "        ", "self", ".", "edge_index_dicts", "=", "edge_index_dicts", "\n", "self", ".", "edge_weight_dicts", "=", "edge_weight_dicts", "\n", "self", ".", "feature_dicts", "=", "feature_dicts", "\n", "self", ".", "target_dicts", "=", "target_dicts", "\n", "self", ".", "batch_dicts", "=", "batch_dicts", "\n", "self", ".", "additional_feature_keys", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "self", ".", "additional_feature_keys", ".", "append", "(", "key", ")", "\n", "", "self", ".", "_check_temporal_consistency", "(", ")", "\n", "self", ".", "_set_snapshot_count", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._check_temporal_consistency": [[60, 77], ["len", "len", "len", "len", "len", "len", "len", "len", "len", "len", "getattr"], "methods", ["None"], ["", "def", "_check_temporal_consistency", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "feature_dicts", ")", "==", "len", "(", "\n", "self", ".", "target_dicts", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "edge_index_dicts", ")", "==", "len", "(", "\n", "self", ".", "edge_weight_dicts", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "feature_dicts", ")", "==", "len", "(", "\n", "self", ".", "edge_weight_dicts", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "assert", "len", "(", "self", ".", "feature_dicts", ")", "==", "len", "(", "\n", "self", ".", "batch_dicts", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", ":", "\n", "            ", "assert", "len", "(", "self", ".", "target_dicts", ")", "==", "len", "(", "\n", "getattr", "(", "self", ",", "key", ")", "\n", ")", ",", "\"Temporal dimension inconsistency.\"", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._set_snapshot_count": [[78, 80], ["len"], "methods", ["None"], ["", "", "def", "_set_snapshot_count", "(", "self", ")", ":", "\n", "        ", "self", ".", "snapshot_count", "=", "len", "(", "self", ".", "feature_dicts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_index": [[81, 87], ["torch.LongTensor", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.edge_index_dicts[].items"], "methods", ["None"], ["", "def", "_get_edge_index", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_index_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_index_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "LongTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "edge_index_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_batch_index": [[88, 94], ["torch.LongTensor", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.batch_dicts[].items"], "methods", ["None"], ["", "", "def", "_get_batch_index", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "batch_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "batch_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "LongTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "batch_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_weight": [[95, 101], ["torch.FloatTensor", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.edge_weight_dicts[].items"], "methods", ["None"], ["", "", "def", "_get_edge_weight", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "edge_weight_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "edge_weight_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "edge_weight_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_feature": [[102, 108], ["torch.FloatTensor", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.feature_dicts[].items"], "methods", ["None"], ["", "", "def", "_get_feature", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "feature_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "feature_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "for", "key", ",", "value", "in", "self", ".", "feature_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_target": [[109, 116], ["torch.FloatTensor", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.target_dicts[].items", "torch.LongTensor"], "methods", ["None"], ["", "", "def", "_get_target", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "if", "self", ".", "target_dicts", "[", "time_index", "]", "is", "None", ":", "\n", "            ", "return", "self", ".", "target_dicts", "[", "time_index", "]", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "if", "value", ".", "dtype", ".", "kind", "==", "\"f\"", "else", "torch", ".", "LongTensor", "(", "value", ")", "\n", "if", "value", ".", "dtype", ".", "kind", "==", "\"i\"", "else", "value", "for", "key", ",", "value", "in", "self", ".", "target_dicts", "[", "time_index", "]", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_feature": [[117, 125], ["getattr", "torch.FloatTensor", "feature.items", "torch.LongTensor"], "methods", ["None"], ["", "", "def", "_get_additional_feature", "(", "self", ",", "time_index", ":", "int", ",", "feature_key", ":", "str", ")", ":", "\n", "        ", "feature", "=", "getattr", "(", "self", ",", "feature_key", ")", "[", "time_index", "]", "\n", "if", "feature", "is", "None", ":", "\n", "            ", "return", "feature", "\n", "", "else", ":", "\n", "            ", "return", "{", "key", ":", "torch", ".", "FloatTensor", "(", "value", ")", "if", "value", ".", "dtype", ".", "kind", "==", "\"f\"", "else", "torch", ".", "LongTensor", "(", "value", ")", "\n", "if", "value", ".", "dtype", ".", "kind", "==", "\"i\"", "else", "value", "for", "key", ",", "value", "in", "feature", ".", "items", "(", ")", "\n", "if", "value", "is", "not", "None", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_features": [[126, 132], ["dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_feature"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_feature"], ["", "", "def", "_get_additional_features", "(", "self", ",", "time_index", ":", "int", ")", ":", "\n", "        ", "additional_features", "=", "{", "\n", "key", ":", "self", ".", "_get_additional_feature", "(", "time_index", ",", "key", ")", "\n", "for", "key", "in", "self", ".", "additional_feature_keys", "\n", "}", "\n", "return", "additional_features", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__getitem__": [[133, 173], ["isinstance", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_feature", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_index", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_weight", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_batch_index", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_target", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_features", "torch_geometric.data.Batch.from_data_list", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.items", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.items", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.items", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.items", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.items", "dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.items", "torch_geometric.data.HeteroData", "feature_dict.items", "getattr"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_feature", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_edge_weight", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_batch_index", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_target", "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch._get_additional_features"], ["", "def", "__getitem__", "(", "self", ",", "time_index", ":", "Union", "[", "int", ",", "slice", "]", ")", ":", "\n", "        ", "if", "isinstance", "(", "time_index", ",", "slice", ")", ":", "\n", "            ", "snapshot", "=", "DynamicHeteroGraphTemporalSignalBatch", "(", "\n", "self", ".", "edge_index_dicts", "[", "time_index", "]", ",", "\n", "self", ".", "edge_weight_dicts", "[", "time_index", "]", ",", "\n", "self", ".", "feature_dicts", "[", "time_index", "]", ",", "\n", "self", ".", "target_dicts", "[", "time_index", "]", ",", "\n", "self", ".", "batch_dicts", "[", "time_index", "]", ",", "\n", "**", "{", "key", ":", "getattr", "(", "self", ",", "key", ")", "[", "time_index", "]", "for", "key", "in", "self", ".", "additional_feature_keys", "}", "\n", ")", "\n", "", "else", ":", "\n", "            ", "x_dict", "=", "self", ".", "_get_feature", "(", "time_index", ")", "\n", "edge_index_dict", "=", "self", ".", "_get_edge_index", "(", "time_index", ")", "\n", "edge_weight_dict", "=", "self", ".", "_get_edge_weight", "(", "time_index", ")", "\n", "batch_dict", "=", "self", ".", "_get_batch_index", "(", "time_index", ")", "\n", "y_dict", "=", "self", ".", "_get_target", "(", "time_index", ")", "\n", "additional_features", "=", "self", ".", "_get_additional_features", "(", "time_index", ")", "\n", "\n", "snapshot", "=", "Batch", ".", "from_data_list", "(", "[", "HeteroData", "(", ")", "]", ")", "\n", "if", "x_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "x_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "x", "=", "value", "\n", "", "", "if", "edge_index_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "edge_index_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "edge_index", "=", "value", "\n", "", "", "if", "edge_weight_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "edge_weight_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "edge_attr", "=", "value", "\n", "", "", "if", "y_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "y_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "y", "=", "value", "\n", "", "", "if", "batch_dict", ":", "\n", "                ", "for", "key", ",", "value", "in", "batch_dict", ".", "items", "(", ")", ":", "\n", "                    ", "snapshot", "[", "key", "]", ".", "batch", "=", "value", "\n", "", "", "if", "additional_features", ":", "\n", "                ", "for", "feature_name", ",", "feature_dict", "in", "additional_features", ".", "items", "(", ")", ":", "\n", "                    ", "if", "feature_dict", ":", "\n", "                        ", "for", "key", ",", "value", "in", "feature_dict", ".", "items", "(", ")", ":", "\n", "                            ", "snapshot", "[", "key", "]", "[", "feature_name", "]", "=", "value", "\n", "", "", "", "", "", "return", "snapshot", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__next__": [[174, 182], ["len"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "t", "<", "len", "(", "self", ".", "feature_dicts", ")", ":", "\n", "            ", "snapshot", "=", "self", "[", "self", ".", "t", "]", "\n", "self", ".", "t", "=", "self", ".", "t", "+", "1", "\n", "return", "snapshot", "\n", "", "else", ":", "\n", "            ", "self", ".", "t", "=", "0", "\n", "raise", "StopIteration", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_pytorch_geometric_temporal.signal.dynamic_hetero_graph_temporal_signal_batch.DynamicHeteroGraphTemporalSignalBatch.__iter__": [[183, 186], ["None"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "t", "=", "0", "\n", "return", "self", "\n", "", "", ""]]}