{"home.repos.pwc.inspect_result.hyliang96_CSGCNN.activmap.activmap.dev_zero_replace": [[110, 114], ["numpy.divide", "numpy.zeros_like"], "function", ["None"], ["def", "dev_zero_replace", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "np", ".", "divide", "(", "a", ",", "b", ",", "\n", "out", "=", "np", ".", "zeros_like", "(", "a", "/", "1.0", ")", ",", "\n", "where", "=", "(", "b", "!=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.activmap.activmap.get_IoU": [[116, 133], ["torch.max", "torch.min", "_UoI.item", "torch.nn.functional.interpolate", "int", "fmap.view().sort", "torch.min.sum", "torch.max.sum", "fmap.view", "torch.numel", "fmap.view"], "function", ["None"], ["", "def", "get_IoU", "(", "fmap", ",", "obj_mask", ",", "_threshold", "=", "None", ",", "top_rate", "=", "None", ")", ":", "\n", "# all torch.tensor(1,128,128)", "\n", "    ", "fmap", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "fmap", ".", "view", "(", "1", ",", "1", ",", "4", ",", "4", ")", ",", "128", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "[", "0", "]", "\n", "fmap", "=", "fmap", "[", "0", "]", "\n", "obj_mask", "=", "obj_mask", "[", "0", "]", "\n", "\n", "if", "top_rate", "!=", "None", "and", "_threshold", "==", "None", ":", "\n", "        ", "top_num", "=", "int", "(", "torch", ".", "numel", "(", "fmap", ")", "*", "top_rate", ")", "\n", "value", ",", "index", "=", "fmap", ".", "view", "(", "[", "-", "1", "]", ")", ".", "sort", "(", ")", "\n", "_threshold", "=", "value", "[", "-", "top_num", "]", "\n", "\n", "", "fmaask", "=", "(", "fmap", ">=", "_threshold", ")", ".", "float", "(", ")", "\n", "union", "=", "torch", ".", "max", "(", "fmaask", ",", "obj_mask", ")", "\n", "intersect", "=", "torch", ".", "min", "(", "fmaask", ",", "obj_mask", ")", "\n", "_UoI", "=", "intersect", ".", "sum", "(", ")", "/", "union", ".", "sum", "(", ")", "\n", "\n", "return", "_UoI", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.activmap.activmap.take": [[213, 216], ["numpy.take", "numpy.ravel_multi_index"], "function", ["home.repos.pwc.inspect_result.hyliang96_CSGCNN.activmap.activmap.take"], ["def", "take", "(", "x", ",", "coords", ")", ":", "\n", "# coords = np.array(each column is a coordinate)", "\n", "    ", "return", "np", ".", "take", "(", "x", ",", "np", ".", "ravel_multi_index", "(", "coords", ",", "x", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.BasicBlock.__init__": [[35, 44], ["torch.Module.__init__", "resnet_std.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_std.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.hyliang96_CSGCNN.gradmap.gradmap.Report.__init__", "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.conv3x3", "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.BasicBlock.forward": [[45, 62], ["resnet_std.BasicBlock.conv1", "resnet_std.BasicBlock.bn1", "resnet_std.BasicBlock.relu", "resnet_std.BasicBlock.conv2", "resnet_std.BasicBlock.bn2", "resnet_std.BasicBlock.relu", "resnet_std.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.Bottleneck.__init__": [[67, 79], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.hyliang96_CSGCNN.gradmap.gradmap.Report.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.Bottleneck.forward": [[80, 101], ["resnet_std.Bottleneck.conv1", "resnet_std.Bottleneck.bn1", "resnet_std.Bottleneck.relu", "resnet_std.Bottleneck.conv2", "resnet_std.Bottleneck.bn2", "resnet_std.Bottleneck.relu", "resnet_std.Bottleneck.conv3", "resnet_std.Bottleneck.bn3", "resnet_std.Bottleneck.relu", "resnet_std.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.LearnableMaskLayer.__init__": [[103, 107], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full", "torch.full"], "methods", ["home.repos.pwc.inspect_result.hyliang96_CSGCNN.gradmap.gradmap.Report.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feature_dim", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", "LearnableMaskLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "avg_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "mask", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "full", "(", "(", "feature_dim", ",", "num_classes", ")", ",", "0.5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.LearnableMaskLayer.get_channel_mask": [[108, 111], ["None"], "methods", ["None"], ["", "def", "get_channel_mask", "(", "self", ")", ":", "\n", "        ", "c_mask", "=", "self", ".", "mask", "\n", "return", "c_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.LearnableMaskLayer.get_density": [[112, 114], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel"], "methods", ["None"], ["", "def", "get_density", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "norm", "(", "self", ".", "mask", ",", "p", "=", "1", ")", "/", "torch", ".", "numel", "(", "self", ".", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.LearnableMaskLayer._icnn_mask": [[115, 123], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "resnet_std.LearnableMaskLayer.mask[].view"], "methods", ["None"], ["", "def", "_icnn_mask", "(", "self", ",", "x", ",", "labels", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "index_mask", "=", "torch", ".", "zeros", "(", "x", ".", "shape", ",", "device", "=", "x", ".", "device", ")", "\n", "for", "idx", ",", "la", "in", "enumerate", "(", "labels", ")", ":", "\n", "                ", "index_mask", "[", "idx", ",", ":", ",", ":", ",", ":", "]", "=", "self", ".", "mask", "[", ":", ",", "la", "]", ".", "view", "(", "-", "1", ",", "self", ".", "mask", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", "\n", "", "return", "index_mask", "*", "x", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.LearnableMaskLayer.loss_function": [[124, 128], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel", "torch.numel"], "methods", ["None"], ["", "", "def", "loss_function", "(", "self", ")", ":", "\n", "        ", "l1_reg", "=", "torch", ".", "norm", "(", "self", ".", "mask", ",", "p", "=", "1", ")", "\n", "l1_reg", "=", "torch", ".", "relu", "(", "l1_reg", "-", "torch", ".", "numel", "(", "self", ".", "mask", ")", "*", "0.2", ")", "\n", "return", "l1_reg", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.LearnableMaskLayer.clip_lmask": [[129, 135], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "[].view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "clip_lmask", "(", "self", ")", ":", "\n", "\n", "        ", "lmask", "=", "self", ".", "mask", "\n", "lmask", "=", "lmask", "/", "torch", ".", "max", "(", "lmask", ",", "dim", "=", "1", ")", "[", "0", "]", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "lmask", "=", "torch", ".", "clamp", "(", "lmask", ",", "min", "=", "0", ",", "max", "=", "1", ")", "\n", "self", ".", "mask", ".", "data", "=", "lmask", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.LearnableMaskLayer.forward": [[136, 143], ["resnet_std.LearnableMaskLayer._icnn_mask", "resnet_std.LearnableMaskLayer.loss_function"], "methods", ["home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.LearnableMaskLayer._icnn_mask", "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.LearnableMaskLayer.loss_function"], ["", "def", "forward", "(", "self", ",", "x", ",", "labels", ",", "last_layer_mask", "=", "None", ")", ":", "\n", "        ", "if", "(", "last_layer_mask", "is", "not", "None", ")", ":", "\n", "            ", "self", ".", "last_layer_mask", "=", "last_layer_mask", "\n", "\n", "", "x", "=", "self", ".", "_icnn_mask", "(", "x", ",", "labels", ")", "\n", "\n", "return", "x", ",", "self", ".", "loss_function", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.ResNet.__init__": [[147, 169], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_std.ResNet._make_layer", "resnet_std.ResNet._make_layer", "resnet_std.ResNet._make_layer", "resnet_std.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet_std.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "math.sqrt", "math.sqrt", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.hyliang96_CSGCNN.gradmap.gradmap.Report.__init__", "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.ResNet._make_layer", "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.ResNet._make_layer", "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.ResNet._make_layer", "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "#  nn.AvgPool2d(32)", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.ResNet._make_layer": [[170, 186], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.ResNet.forward": [[187, 210], ["resnet_std.ResNet.conv1", "resnet_std.ResNet.bn1", "resnet_std.ResNet.relu", "resnet_std.ResNet.maxpool", "resnet_std.ResNet.layer1", "resnet_std.ResNet.layer2", "resnet_std.ResNet.layer3", "resnet_std.ResNet.layer4", "resnet_std.ResNet.avgpool", "resnet_std.ResNet.view", "resnet_std.ResNet.fc", "resnet_std.ResNet.lmask", "resnet_std.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "labels", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "x", ",", "reg", "=", "self", ".", "lmask", "(", "x", ",", "labels", ")", "\n", "\n", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "return", "x", ",", "reg", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.ResNet.get_feature_map": [[211, 223], ["resnet_std.ResNet.conv1", "resnet_std.ResNet.bn1", "resnet_std.ResNet.relu", "resnet_std.ResNet.maxpool", "resnet_std.ResNet.layer1", "resnet_std.ResNet.layer2", "resnet_std.ResNet.layer3", "resnet_std.ResNet.layer4"], "methods", ["None"], ["", "", "def", "get_feature_map", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.conv3x3": [[26, 30], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.resnet18": [[225, 239], ["resnet_std.ResNet", "torch.Linear", "ResNet.load_state_dict", "resnet_std.LearnableMaskLayer", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "ifmask", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "block", "=", "BasicBlock", "\n", "model", "=", "ResNet", "(", "block", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "num_classes", "=", "1000", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "if", "ifmask", ":", "\n", "        ", "model", ".", "lmask", "=", "LearnableMaskLayer", "(", "feature_dim", "=", "512", "*", "block", ".", "expansion", ",", "num_classes", "=", "num_classes", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.resnet34": [[242, 256], ["resnet_std.ResNet", "torch.Linear", "ResNet.load_state_dict", "resnet_std.LearnableMaskLayer", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "ifmask", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "block", "=", "BasicBlock", "\n", "model", "=", "ResNet", "(", "block", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "1000", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "if", "ifmask", ":", "\n", "        ", "model", ".", "lmask", "=", "LearnableMaskLayer", "(", "feature_dim", "=", "512", "*", "block", ".", "expansion", ",", "num_classes", "=", "num_classes", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.resnet50": [[259, 273], ["resnet_std.ResNet", "torch.Linear", "ResNet.load_state_dict", "resnet_std.LearnableMaskLayer", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "ifmask", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "block", "=", "Bottleneck", "\n", "model", "=", "ResNet", "(", "block", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "num_classes", "=", "1000", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "if", "ifmask", ":", "\n", "        ", "model", ".", "lmask", "=", "LearnableMaskLayer", "(", "feature_dim", "=", "512", "*", "block", ".", "expansion", ",", "num_classes", "=", "num_classes", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.resnet101": [[276, 290], ["resnet_std.ResNet", "torch.Linear", "ResNet.load_state_dict", "resnet_std.LearnableMaskLayer", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "ifmask", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "block", "=", "Bottleneck", "\n", "model", "=", "ResNet", "(", "block", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "num_classes", "=", "1000", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "if", "ifmask", ":", "\n", "        ", "model", ".", "lmask", "=", "LearnableMaskLayer", "(", "feature_dim", "=", "512", "*", "block", ".", "expansion", ",", "num_classes", "=", "num_classes", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.resnet152": [[293, 307], ["resnet_std.ResNet", "torch.Linear", "ResNet.load_state_dict", "resnet_std.LearnableMaskLayer", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "num_classes", "=", "1000", ",", "ifmask", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "block", "=", "Bottleneck", "\n", "model", "=", "ResNet", "(", "block", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "num_classes", "=", "1000", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "if", "ifmask", ":", "\n", "        ", "model", ".", "lmask", "=", "LearnableMaskLayer", "(", "feature_dim", "=", "512", "*", "block", ".", "expansion", ",", "num_classes", "=", "num_classes", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.resent": [[308, 321], ["resnet_std.resnet18", "resnet_std.resnet34", "resnet_std.resnet50", "resnet_std.resnet101", "resnet_std.resnet152"], "function", ["home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.resnet18", "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.resnet34", "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.resnet50", "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.resnet101", "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.resnet_std.resnet152"], ["", "def", "resent", "(", "depth", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "depth", "==", "18", ":", "\n", "        ", "return", "resnet18", "(", "**", "kwargs", ")", "\n", "", "elif", "depth", "==", "34", ":", "\n", "        ", "return", "resnet34", "(", "**", "kwargs", ")", "\n", "", "elif", "depth", "==", "50", ":", "\n", "        ", "return", "resnet50", "(", "**", "kwargs", ")", "\n", "", "elif", "depth", "==", "101", ":", "\n", "        ", "return", "resnet101", "(", "**", "kwargs", ")", "\n", "", "elif", "depth", "==", "152", ":", "\n", "        ", "return", "resnet152", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.dataLoader.DataLoader.__init__": [[15, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", ",", "seed", "=", "0", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "seed", "=", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.dataLoader.DataLoader.load_data": [[20, 91], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.CIFAR10", "torchvision.CIFAR10", "torchvision.CIFAR10", "torchvision.CIFAR10", "torchvision.CIFAR100", "torchvision.CIFAR100", "torchvision.CIFAR100", "torchvision.CIFAR100", "torchvision.MNIST", "torchvision.MNIST", "torchvision.MNIST", "torchvision.MNIST", "VOCPart.VOCPart.VOCPart", "VOCPart.VOCPart.VOCPart", "len", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "seed.set_work_init_fn", "seed.set_work_init_fn", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.seed.set_work_init_fn", "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.seed.set_work_init_fn"], ["", "def", "load_data", "(", "self", ",", "img_size", "=", "32", ")", ":", "\n", "        ", "data_dir", "=", "'/home/zengyuyuan/data/CIFAR10'", "\n", "data_transforms", "=", "{", "\n", "'train'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ")", "\n", "]", ")", ",", "\n", "'val'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ")", "\n", "]", ")", "\n", "}", "\n", "if", "self", ".", "dataset", "==", "'cifar-10'", ":", "\n", "            ", "data_train", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "data_dir", ",", "\n", "transform", "=", "data_transforms", "[", "'train'", "]", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ")", "\n", "\n", "data_test", "=", "datasets", ".", "CIFAR10", "(", "root", "=", "data_dir", ",", "\n", "transform", "=", "data_transforms", "[", "'val'", "]", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ")", "\n", "", "if", "self", ".", "dataset", "==", "'cifar-100'", ":", "\n", "            ", "data_train", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "data_dir", ",", "\n", "transform", "=", "data_transforms", "[", "'train'", "]", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ")", "\n", "\n", "data_test", "=", "datasets", ".", "CIFAR100", "(", "root", "=", "data_dir", ",", "\n", "transform", "=", "data_transforms", "[", "'val'", "]", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ")", "\n", "", "if", "self", ".", "dataset", "==", "'mnist'", ":", "\n", "            ", "data_dir", "=", "'/home/zengyuyuan/data/MNIST'", "\n", "mnist_transforms", "=", "{", "\n", "'train'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.1307", ",", "]", ",", "[", "0.3081", "]", ")", "\n", "]", ")", ",", "\n", "'val'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.1307", ",", "]", ",", "[", "0.3081", "]", ")", "\n", "]", ")", "\n", "}", "\n", "data_train", "=", "datasets", ".", "MNIST", "(", "root", "=", "data_dir", ",", "\n", "transform", "=", "mnist_transforms", "[", "'train'", "]", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ")", "\n", "data_test", "=", "datasets", ".", "MNIST", "(", "root", "=", "data_dir", ",", "\n", "transform", "=", "mnist_transforms", "[", "'val'", "]", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ")", "\n", "", "if", "self", ".", "dataset", "==", "'VOCpart'", ":", "\n", "            ", "data_train", "=", "VOCPart", "(", "VOC_path", ",", "train", "=", "True", ",", "requires", "=", "[", "'img'", "]", ",", "size", "=", "img_size", ")", "\n", "data_test", "=", "VOCPart", "(", "VOC_path", ",", "train", "=", "False", ",", "requires", "=", "[", "'img'", "]", ",", "size", "=", "img_size", ")", "\n", "\n", "", "image_datasets", "=", "{", "'train'", ":", "data_train", ",", "'val'", ":", "data_test", "}", "\n", "# change list to Tensor as the input of the models", "\n", "dataloaders", "=", "{", "}", "\n", "dataloaders", "[", "'train'", "]", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "image_datasets", "[", "'train'", "]", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "pin_memory", "=", "True", ",", "\n", "shuffle", "=", "True", ",", "worker_init_fn", "=", "set_work_init_fn", "(", "self", ".", "seed", ")", ",", "num_workers", "=", "16", ")", "\n", "dataloaders", "[", "'val'", "]", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "image_datasets", "[", "'val'", "]", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "pin_memory", "=", "True", ",", "\n", "shuffle", "=", "False", ",", "worker_init_fn", "=", "set_work_init_fn", "(", "self", ".", "seed", ")", ",", "num_workers", "=", "16", ")", "\n", "\n", "dataset_sizes", "=", "{", "x", ":", "len", "(", "image_datasets", "[", "x", "]", ")", "for", "x", "in", "[", "'train'", ",", "'val'", "]", "}", "\n", "\n", "return", "dataloaders", ",", "dataset_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.train.symlink_force": [[84, 93], ["os.symlink", "os.remove", "os.symlink"], "function", ["None"], ["", "def", "symlink_force", "(", "target", ",", "link_name", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "symlink", "(", "target", ",", "link_name", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "==", "errno", ".", "EEXIST", ":", "\n", "            ", "os", ".", "remove", "(", "link_name", ")", "\n", "os", ".", "symlink", "(", "target", ",", "link_name", ")", "\n", "", "else", ":", "\n", "            ", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.train.train_model": [[94, 302], ["time.time", "os.path.exists", "print", "os.path.join", "print", "torch.load", "torch.load", "time.time", "os.path.join", "time.time", "print", "print", "model.load_state_dict", "model.load_state_dict", "print", "print", "enumerate", "print", "print", "os.makedirs", "set", "os.path.join", "torch.save", "torch.save", "train.train_model.update_checkpoint_link"], "function", ["None"], ["", "", "", "def", "train_model", "(", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "num_epochs", "=", "25", ")", ":", "\n", "    ", "since", "=", "time", ".", "time", "(", ")", "\n", "\n", "best_acc", "=", "0.0", "\n", "best_train_acc", "=", "0.0", "\n", "best_epoch", "=", "0", "\n", "# Load unfinished model", "\n", "if", "args", ".", "load_checkpoint", "==", "''", ":", "\n", "        ", "unfinished_model_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_dir", ",", "'checkpoints/last.pt'", ")", "\n", "", "else", ":", "\n", "        ", "unfinished_model_path", "=", "args", ".", "load_checkpoint", "\n", "\n", "", "if", "(", "os", ".", "path", ".", "exists", "(", "unfinished_model_path", ")", ")", ":", "\n", "        ", "if", "args", ".", "train", ":", "\n", "            ", "print", "(", "'Already exist and will continue training'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Testing'", ")", "\n", "", "print", "(", "'loaded '", "+", "unfinished_model_path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "unfinished_model_path", ")", "\n", "\n", "if", "'model_state_dict'", "in", "checkpoint", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "\n", "if", "args", ".", "train", ":", "\n", "                ", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "", "else", ":", "\n", "                ", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "", "loss", "=", "checkpoint", "[", "'loss'", "]", "\n", "best_acc", "=", "checkpoint", "[", "'best_acc'", "]", "if", "'best_acc'", "in", "checkpoint", "else", "0.0", "\n", "best_train_acc", "=", "checkpoint", "[", "'best_train_acc'", "]", "if", "'best_train_acc'", "in", "checkpoint", "else", "0.0", "\n", "best_epoch", "=", "checkpoint", "[", "'best_epoch'", "]", "if", "'best_epoch'", "in", "checkpoint", "else", "0.0", "\n", "", "else", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "checkpoint", ",", "strict", "=", "False", ")", "\n", "epoch", "=", "args", ".", "epoch", "\n", "", "", "else", ":", "\n", "        ", "epoch", "=", "0", "\n", "\n", "", "while", "epoch", "<=", "num_epochs", "or", "not", "args", ".", "train", ":", "\n", "        ", "epoch_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "train", ":", "\n", "            ", "print", "(", "'Epoch %3d/%3d'", "%", "(", "epoch", ",", "num_epochs", ")", ",", "end", "=", "' | '", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Epoch %3d'", "%", "(", "epoch", ")", ",", "end", "=", "' | '", ")", "\n", "#each epoch has a training and validation phase", "\n", "", "for", "phase", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "            ", "if", "phase", "==", "'train'", "and", "args", ".", "train", ":", "\n", "                ", "model", ".", "train", "(", "True", ")", "\n", "", "else", ":", "\n", "                ", "model", ".", "train", "(", "False", ")", "\n", "\n", "", "ifmask", "=", "(", "epoch", "%", "args", ".", "mask_period", ">=", "args", ".", "mask_epoch_min", "and", "epoch", ">=", "args", ".", "warmup_epochs", "and", "args", ".", "ifmask", "and", "phase", "==", "'train'", ")", "\n", "\n", "running_loss", "=", "0.0", "\n", "running_loss_0", "=", "0.0", "\n", "running_corrects", "=", "0.0", "\n", "running_regulization_loss", "=", "0.0", "\n", "\n", "# change tensor to variable(including some gradient info)", "\n", "# use variable.data to get the corresponding tensor", "\n", "for", "iteration", ",", "data", "in", "enumerate", "(", "dataloaders", "[", "phase", "]", ")", ":", "\n", "\n", "                ", "inputs", ",", "labels", "=", "data", "\n", "if", "args", ".", "use_gpu", ":", "\n", "                    ", "inputs", "=", "Variable", "(", "inputs", ".", "cuda", "(", ")", ")", "\n", "labels", "=", "Variable", "(", "labels", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "inputs", ",", "labels", "=", "Variable", "(", "inputs", ")", ",", "Variable", "(", "labels", ")", "\n", "#zero the parameter gradients", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "#forward", "\n", "if", "ifmask", ":", "\n", "                    ", "outputs", ",", "regulization_loss", "=", "model", "(", "inputs", ",", "labels", ")", "\n", "loss_0", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", "=", "loss_0", "+", "regulization_loss", "*", "args", ".", "lambda_reg", "\n", "", "else", ":", "\n", "                    ", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "", "_", ",", "preds", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "\n", "if", "phase", "==", "'train'", "and", "args", ".", "train", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "if", "ifmask", ":", "\n", "                        ", "optimizer_reg", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                        ", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "ifmask", ":", "\n", "                        ", "model", ".", "module", ".", "lmask", ".", "clip_lmask", "(", ")", "\n", "\n", "", "", "y", "=", "labels", ".", "data", "\n", "batch_size", "=", "labels", ".", "data", ".", "shape", "[", "0", "]", "\n", "running_loss", "+=", "loss", ".", "item", "(", ")", "\n", "running_corrects", "+=", "torch", ".", "sum", "(", "preds", "==", "y", ")", "\n", "if", "ifmask", ":", "\n", "                    ", "running_loss_0", "+=", "loss_0", ".", "item", "(", ")", "\n", "running_regulization_loss", "+=", "(", "regulization_loss", "*", "args", ".", "lambda_reg", ")", ".", "item", "(", ")", "\n", "\n", "", "", "if", "phase", "==", "'train'", "and", "args", ".", "train", ":", "\n", "                ", "if", "ifmask", ":", "\n", "                    ", "scheduler_reg", ".", "step", "(", ")", "# (loss)", "\n", "", "else", ":", "\n", "                    ", "scheduler", ".", "step", "(", ")", "# (loss)", "\n", "\n", "", "", "epoch_loss", "=", "running_loss", "/", "dataset_sizes", "[", "phase", "]", "\n", "epoch_acc", "=", "float", "(", "running_corrects", ")", "/", "dataset_sizes", "[", "phase", "]", "\n", "if", "ifmask", ":", "\n", "                ", "epoch_loss_0", "=", "running_loss_0", "/", "dataset_sizes", "[", "phase", "]", "\n", "epoch_regulization_loss", "=", "running_regulization_loss", "/", "dataset_sizes", "[", "phase", "]", "\n", "", "else", ":", "\n", "                ", "epoch_loss_0", "=", "0.0", "\n", "epoch_regulization_loss", "=", "0.0", "\n", "\n", "", "if", "phase", "==", "'train'", ":", "\n", "                ", "if", "args", ".", "train", ":", "\n", "                    ", "tb_writer", ".", "add_scalar", "(", "'train/LossTotal'", ",", "epoch_loss", ",", "epoch", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'train/acc'", ",", "epoch_acc", ",", "epoch", ")", "\n", "", "if", "best_train_acc", "<", "epoch_acc", ":", "\n", "                    ", "best_train_acc", "=", "epoch_acc", "\n", "", "if", "ifmask", ":", "\n", "                    ", "if", "args", ".", "train", ":", "\n", "                        ", "tb_writer", ".", "add_scalar", "(", "'train/LossMain'", ",", "epoch_loss_0", ",", "epoch", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'train/LossReg'", ",", "epoch_regulization_loss", ",", "epoch", ")", "\n", "\n", "", "", "", "if", "phase", "==", "'val'", ":", "\n", "                ", "if", "args", ".", "train", ":", "\n", "                    ", "tb_writer", ".", "add_scalar", "(", "'val/LossTotal'", ",", "epoch_loss", ",", "epoch", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'val/acc'", ",", "epoch_acc", ",", "epoch", ")", "\n", "", "if", "args", ".", "ifmask", ":", "\n", "                    ", "mask_density", "=", "model", ".", "module", ".", "lmask", ".", "get_density", "(", ")", "\n", "if", "args", ".", "train", ":", "\n", "                        ", "tb_writer", ".", "add_scalar", "(", "'val/mask_density'", ",", "mask_density", ",", "epoch", ")", "\n", "\n", "", "", "", "if", "phase", "==", "'val'", "and", "epoch_acc", ">", "best_acc", ":", "\n", "                ", "best_epoch", "=", "epoch", "\n", "best_acc", "=", "epoch_acc", "\n", "best_model", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "", "cost_time", "=", "time", ".", "time", "(", ")", "-", "epoch_time", "\n", "\n", "\n", "print", "(", "'%5s %2dm%2ds Acc:%.4f Loss:%.4f'", "%", "\n", "(", "phase", ",", "cost_time", "//", "60", ",", "cost_time", "%", "60", ",", "epoch_acc", ",", "epoch_loss", ")", ",", "end", "=", "' '", ")", "\n", "\n", "if", "args", ".", "ifmask", ":", "\n", "                ", "if", "phase", "==", "'train'", ":", "\n", "                    ", "print", "(", "'LMain:%.4f LossReg:%.4f'", "%", "\n", "(", "epoch_loss_0", ",", "epoch_regulization_loss", ")", ",", "end", "=", "' '", ")", "\n", "", "if", "phase", "==", "'val'", ":", "\n", "                    ", "print", "(", "'MaskDens:%.4f'", "%", "\n", "(", "mask_density", ")", ",", "end", "=", "' '", ")", "\n", "", "", "print", "(", "'|'", ",", "end", "=", "' '", ")", "\n", "\n", "if", "phase", "==", "'val'", ":", "\n", "                ", "print", "(", "'Best epoch:%-3d train_acc:%.4f val_acc:%.4f '", "%", "(", "best_epoch", ",", "best_train_acc", ",", "best_acc", ")", ",", "end", "=", "' '", ")", "\n", "print", "(", ")", "\n", "\n", "", "", "if", "not", "args", ".", "train", ":", "\n", "            ", "break", "\n", "\n", "\n", "", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "exp_dir", ",", "'checkpoints'", ")", "\n", "if", "args", ".", "train", "or", "args", ".", "load_checkpoint", "==", "''", ":", "\n", "            ", "os", ".", "makedirs", "(", "checkpoint_dir", ",", "exist_ok", "=", "True", ")", "# if no such path exists, iteratively created the dir", "\n", "\n", "\n", "", "def", "update_checkpoint_link", "(", "target_link_list", ")", ":", "\n", "            ", "old_target_list", "=", "[", "]", "\n", "target_list", "=", "[", "]", "\n", "for", "target_name", ",", "link_name", "in", "target_link_list", ":", "\n", "                ", "target_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "target_name", ")", "\n", "link_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "link_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "link_path", ")", ":", "\n", "                    ", "old_target_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "os", ".", "readlink", "(", "link_path", ")", ")", "\n", "old_target_list", ".", "append", "(", "old_target_path", ")", "\n", "", "target_list", ".", "append", "(", "target_path", ")", "\n", "symlink_force", "(", "target_name", ",", "link_path", ")", "\n", "\n", "", "for", "old_target_path", "in", "set", "(", "old_target_list", ")", ":", "\n", "                ", "old_epoch", "=", "int", "(", "re", ".", "findall", "(", "r'\\d+'", ",", "os", ".", "path", ".", "basename", "(", "old_target_path", ")", ")", "[", "0", "]", ")", "\n", "if", "old_target_path", "not", "in", "target_list", "and", "old_epoch", "%", "10", "!=", "0", "and", "old_epoch", "!=", "num_epochs", "-", "1", ":", "\n", "                    ", "os", ".", "remove", "(", "old_target_path", ")", "\n", "\n", "", "", "", "if", "args", ".", "train", ":", "\n", "\n", "            ", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "'epoch_%d.pt'", "%", "epoch", ")", "\n", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'loss'", ":", "loss", ",", "\n", "'best_acc'", ":", "best_acc", ",", "\n", "'best_train_acc'", ":", "best_train_acc", ",", "\n", "'best_epoch'", ":", "best_epoch", "\n", "}", ",", "checkpoint_path", ")", "\n", "\n", "update_checkpoint_link", "(", "[", "\n", "(", "'epoch_%d.pt'", "%", "best_epoch", ",", "'best.pt'", ")", ",", "\n", "(", "'epoch_%d.pt'", "%", "epoch", ",", "'last.pt'", ")", "]", ")", "\n", "\n", "", "epoch", "+=", "1", "\n", "\n", "", "cost_time", "=", "time", ".", "time", "(", ")", "-", "since", "\n", "print", "(", "'Training complete in {:.0f}h{:.0f}m{:.0f}s'", ".", "format", "(", "(", "cost_time", "//", "60", ")", "//", "60", ",", "(", "cost_time", "//", "60", ")", "%", "60", ",", "cost_time", "%", "60", ")", ")", "\n", "\n", "return", "model", ",", "cost_time", ",", "best_acc", ",", "best_train_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.summaries.TensorboardSummary.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "directory", ")", ":", "\n", "        ", "self", ".", "directory", "=", "directory", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.summaries.TensorboardSummary.create_summary": [[10, 13], ["torch.utils.tensorboard.writer.SummaryWriter", "os.path.join"], "methods", ["None"], ["", "def", "create_summary", "(", "self", ")", ":", "\n", "        ", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ")", ")", "\n", "return", "writer", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.seed.set_seed": [[8, 39], ["str", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "type", "range"], "function", ["None"], ["def", "set_seed", "(", "seed", "=", "0", ",", "cudnn", "=", "'normal'", ")", ":", "\n", "    ", "'''\n    [ 'benchmark', 'normal', 'slow', 'none' ] from left to right, cudnn randomness decreases, speed decreases\n    'benchmark': turn on CUDNN_FIND to find the fast operation, when each iteration has the same computing graph (e.g. input size and model architecture), it can speed up a bit\n    'normal': usually used option, accuracy differs from the digit on 0.1%\n    'slow': it slows down computation. More accurate reproducing than 'normal', especially when gpu number keep unchanged, the accuracy is almost the same.\n    'none'\uff1arunning on gpu/cpu yields the same result, but is slow.\n    '''", "\n", "\n", "\n", "assert", "type", "(", "seed", ")", "==", "int", "and", "seed", "in", "range", "(", "0", ",", "4294967296", ")", ",", "\"`seed` must be anint in [0,4294967295]\"", "\n", "assert", "cudnn", "in", "[", "'benchmark'", ",", "'normal'", ",", "'none'", ",", "'slow'", "]", ",", "\"`cudnn` must be in [ 'benchmark', 'normal', 'slow', 'none' ] \"", "\n", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "seed", ")", "# seed for hash() function, affects the iteration order of dicts, sets and other mappings, str(seed) int [0; 4294967295]", "\n", "random", ".", "seed", "(", "seed", ")", "# random and transforms, seed int or float", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "#numpy, seed int", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "# cpu, seed int or float", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "# gpu, seed int or float", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "# multi-gpu, seed int or float", "\n", "\n", "if", "cudnn", "==", "'none'", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "enabled", "=", "False", "# if True, cudnn accelarate, similar result but not exactly same", "\n", "", "elif", "cudnn", "==", "'slow'", ":", "\n", "# when cuDNN is using deterministic mode, computing may be slown (depends on the model)", "\n", "# low affect on reproducing, only changes digits after the decimal point. not recommended to use unless requires exact reproducing\u3002", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "# if True, cudnn has no randomness\uff0ccpu/gpu yield same result, but slow down convolution", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "# if True, turn on CUDNN_FIND to find the fast operation", "\n", "", "elif", "cudnn", "==", "'normal'", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "# if True, turn on CUDNN_FIND to find the fast operation", "\n", "", "elif", "cudnn", "==", "'benchmark'", ":", "\n", "        ", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "# if True, turn on CUDNN_FIND to find the fast operation", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.train.seed.set_work_init_fn": [[41, 45], ["numpy.random.seed"], "function", ["None"], ["", "", "def", "set_work_init_fn", "(", "seed", ")", ":", "\n", "    ", "def", "worker_init_fn", "(", "worker_id", ")", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "seed", "+", "worker_id", ")", "\n", "", "return", "worker_init_fn", "\n", "", ""]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.VOC.VOCPart.VOCPart.__init__": [[13, 75], ["torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.Compose", "torchvision.transforms.transforms.ToTensor", "os.path.join", "os.path.join", "os.path.join", "os.listdir", "print", "print", "print", "set", "set", "open", "list", "file_name.split", "tmp.split", "file_name.replace", "VOCPart.VOCPart.classes.index", "os.path.join", "VOCPart.VOCPart.imgs.append", "VOCPart.VOCPart.labels.append", "os.path.join", "VOCPart.VOCPart.obj_masks.append", "os.path.join", "os.listdir", "VOCPart.VOCPart.part_masks.append", "torchvision.transforms.transforms.RandomCrop", "torchvision.transforms.transforms.RandomHorizontalFlip", "torchvision.transforms.transforms.ToTensor", "torchvision.transforms.transforms.ToTensor", "filter", "os.path.join", "os.path.join", "VOCPart.VOCPart.__len__", "f.read().split", "file.split", "zip", "int", "f.read"], "methods", ["home.repos.pwc.inspect_result.hyliang96_CSGCNN.VOC.VOCPart.VOCPart.__len__"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "requires", "=", "[", "'img'", "]", ",", "size", "=", "64", ")", ":", "\n", "        ", "assert", "size", "in", "[", "32", ",", "64", ",", "128", "]", "\n", "assert", "set", "(", "requires", ")", "<=", "set", "(", "[", "'img'", ",", "'obj_mask'", ",", "'part_mask'", "]", ")", "\n", "\n", "self", ".", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "size", ",", "padding", "=", "int", "(", "size", "/", "8", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "# transforms.Resize((224, 224)),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "self", ".", "val_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "# transforms.Resize((224, 224)),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "self", ".", "_ToTensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "\n", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "transform", "=", "transform", "or", "(", "self", ".", "train_transform", "if", "train", "else", "self", ".", "val_transform", ")", "\n", "self", ".", "requires", "=", "requires", "\n", "self", ".", "classes", "=", "[", "'bird'", ",", "'cat'", ",", "'dog'", ",", "'cow'", ",", "'horse'", ",", "'sheep'", "]", "\n", "\n", "\n", "self", ".", "metadata_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'processed'", ",", "'metadata'", ",", "'train.txt'", "if", "train", "else", "'val.txt'", ")", "\n", "with", "open", "(", "self", ".", "metadata_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "self", ".", "img_name_list", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", "!=", "''", ",", "f", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", ")", ")", "\n", "\n", "", "self", ".", "imgs", ",", "self", ".", "labels", ",", "self", ".", "obj_masks", ",", "self", ".", "part_masks", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "self", ".", "processed_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'processed'", ",", "'%dx%d'", "%", "(", "size", ",", "size", ")", ")", "\n", "self", ".", "obj_img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "processed_dir", ",", "'obj_img'", ")", "\n", "\n", "for", "file_name", "in", "os", ".", "listdir", "(", "self", ".", "obj_img_dir", ")", ":", "\n", "            ", "class_name", ",", "obj_id", ",", "tmp", "=", "file_name", ".", "split", "(", "'-'", ")", "\n", "img_name", ",", "_", "=", "tmp", ".", "split", "(", "'.'", ")", "\n", "if", "img_name", "not", "in", "self", ".", "img_name_list", ":", "\n", "                ", "continue", "\n", "", "file_name_body", "=", "file_name", ".", "replace", "(", "'.jpg'", ",", "''", ")", "\n", "\n", "# if 'img' in self.requires:", "\n", "label", "=", "self", ".", "classes", ".", "index", "(", "class_name", ")", "# id from 0 to 5", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "obj_img_dir", ",", "file_name", ")", "\n", "self", ".", "imgs", ".", "append", "(", "img_path", ")", "\n", "self", ".", "labels", ".", "append", "(", "label", ")", "\n", "# if 'obj_mask' in self.requires:", "\n", "obj_mask_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "processed_dir", ",", "'obj_mask'", ",", "file_name_body", "+", "'.mask.bmp'", ")", "\n", "self", ".", "obj_masks", ".", "append", "(", "obj_mask_path", ")", "\n", "# if 'part_mask' in self.requires:", "\n", "part_mask_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "processed_dir", ",", "'part_mask'", ")", "\n", "part_mask_files", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "part_mask_dir", ",", "file_name_body", ")", ")", "\n", "part_names", "=", "[", "file", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "file", "in", "part_mask_files", "]", "\n", "part_mask_paths", "=", "[", "os", ".", "path", ".", "join", "(", "part_mask_dir", ",", "file_name_body", ",", "part_mask_file", ")", "for", "part_mask_file", "in", "part_mask_files", "]", "\n", "part_mask_dict", "=", "{", "part_name", ":", "part_mask_path", "for", "part_name", ",", "part_mask_path", "in", "zip", "(", "part_names", ",", "part_mask_paths", ")", "}", "\n", "self", ".", "part_masks", ".", "append", "(", "part_mask_dict", ")", "\n", "\n", "", "print", "(", "'\\ntrain set'", "if", "train", "else", "'val set'", ")", "\n", "print", "(", "'    image size %dx%d'", "%", "(", "size", ",", "size", ")", ")", "\n", "print", "(", "'    image num = %d'", "%", "self", ".", "__len__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.VOC.VOCPart.VOCPart.__len__": [[76, 78], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.VOC.VOCPart.VOCPart.img_loader": [[79, 83], ["open", "PIL.Image.open", "img.convert"], "methods", ["None"], ["", "def", "img_loader", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "                ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.VOC.VOCPart.VOCPart.mask_loader": [[84, 88], ["open", "PIL.Image.open", "img.convert"], "methods", ["None"], ["", "", "", "def", "mask_loader", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "                ", "return", "img", ".", "convert", "(", "'L'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.VOC.VOCPart.VOCPart.__getitem__": [[89, 115], ["tuple", "VOCPart.VOCPart.img_loader", "VOCPart.VOCPart.transform", "result.append", "result.append", "VOCPart.VOCPart.mask_loader", "VOCPart.VOCPart._ToTensor", "result.append", "VOCPart.VOCPart.part_masks[].items", "result.append", "int", "VOCPart.VOCPart.mask_loader", "VOCPart.VOCPart._ToTensor"], "methods", ["home.repos.pwc.inspect_result.hyliang96_CSGCNN.VOC.VOCPart.VOCPart.img_loader", "home.repos.pwc.inspect_result.hyliang96_CSGCNN.VOC.VOCPart.VOCPart.mask_loader", "home.repos.pwc.inspect_result.hyliang96_CSGCNN.VOC.VOCPart.VOCPart.mask_loader"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "if", "'img'", "in", "self", ".", "requires", ":", "\n", "            ", "img_path", ",", "label", "=", "self", ".", "imgs", "[", "index", "]", ",", "int", "(", "self", ".", "labels", "[", "index", "]", ")", "\n", "\n", "img", "=", "self", ".", "img_loader", "(", "img_path", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "# torch.Size([3, 128, 128]) torch.float32", "\n", "\n", "result", ".", "append", "(", "img", ")", "\n", "result", ".", "append", "(", "label", ")", "\n", "\n", "", "if", "'obj_mask'", "in", "self", ".", "requires", ":", "\n", "            ", "obj_mask_path", "=", "self", ".", "obj_masks", "[", "index", "]", "\n", "obj_mask", "=", "self", ".", "mask_loader", "(", "obj_mask_path", ")", "\n", "obj_mask", "=", "self", ".", "_ToTensor", "(", "obj_mask", ")", "# (max= tensor(1.), min = tensor(0.), torch.Size([1, 128, 128]), torch.float32)", "\n", "result", ".", "append", "(", "obj_mask", ")", "\n", "\n", "", "if", "'part_mask'", "in", "self", ".", "requires", ":", "\n", "            ", "part_mask_dict", "=", "{", "}", "\n", "for", "part_name", ",", "part_mask_path", "in", "self", ".", "part_masks", "[", "index", "]", ".", "items", "(", ")", ":", "\n", "                ", "part_mask", "=", "self", ".", "mask_loader", "(", "part_mask_path", ")", "\n", "part_mask", "=", "self", ".", "_ToTensor", "(", "part_mask", ")", "# (max= tensor(1.), min=tensor(0.), torch.Size([1, 128, 128]), torch.float32)", "\n", "part_mask_dict", "[", "part_name", "]", "=", "part_mask", "\n", "", "result", ".", "append", "(", "part_mask_dict", ")", "\n", "\n", "", "return", "tuple", "(", "result", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.VOC.preprocess.plot_mask": [[92, 110], ["PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "matplotlib.figure", "plt.figure.canvas.set_window_title", "plt.figure.suptitle", "plt.figure.add_subplot", "matplotlib.axis", "matplotlib.imshow", "plt.figure.add_subplot", "matplotlib.axis", "matplotlib.imshow", "plt.figure.add_subplot", "matplotlib.axis", "matplotlib.imshow", "matplotlib.show"], "function", ["None"], ["", "", "def", "plot_mask", "(", "img", ",", "mask", ",", "bodypart_mask", ",", "windowtitle", ",", "suptitle", ")", ":", "\n", "    ", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "img", ")", "\n", "mask", "=", "PIL", ".", "Image", ".", "fromarray", "(", "mask", "*", "255", ")", "\n", "bodypart_mask", "=", "PIL", ".", "Image", ".", "fromarray", "(", "bodypart_mask", "*", "255", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "fig", ".", "canvas", ".", "set_window_title", "(", "windowtitle", ")", "\n", "fig", ".", "suptitle", "(", "suptitle", ")", "\n", "fig", ".", "add_subplot", "(", "1", ",", "3", ",", "1", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "fig", ".", "add_subplot", "(", "1", ",", "3", ",", "2", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "imshow", "(", "mask", ")", "\n", "fig", ".", "add_subplot", "(", "1", ",", "3", ",", "3", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "imshow", "(", "bodypart_mask", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.VOC.preprocess.crop": [[61, 89], ["obj_mask.sum", "int", "int", "obj_mask.sum", "int", "int", "max", "numpy.pad", "numpy.pad", "numpy.argwhere().max", "numpy.argwhere().min", "numpy.argwhere().max", "numpy.argwhere().min", "preprocess.crop.crop_img"], "function", ["None"], ["", "def", "crop", "(", "img", ",", "obj_mask", ",", "part_mask", "=", "None", ")", ":", "\n", "    ", "y_sum", "=", "(", "obj_mask", ".", "sum", "(", "axis", "=", "1", ")", ">", "0", ")", "\n", "y_max", ",", "y_min", "=", "int", "(", "np", ".", "argwhere", "(", "y_sum", ")", ".", "max", "(", ")", ")", ",", "int", "(", "np", ".", "argwhere", "(", "y_sum", ")", ".", "min", "(", ")", ")", "\n", "y_d", "=", "y_max", "-", "y_min", "\n", "y_0", "=", "(", "y_max", "+", "y_min", ")", "/", "2", "\n", "\n", "x_sum", "=", "(", "obj_mask", ".", "sum", "(", "axis", "=", "0", ")", ">", "0", ")", "\n", "x_max", ",", "x_min", "=", "int", "(", "np", ".", "argwhere", "(", "x_sum", ")", ".", "max", "(", ")", ")", ",", "int", "(", "np", ".", "argwhere", "(", "x_sum", ")", ".", "min", "(", ")", ")", "\n", "x_d", "=", "x_max", "-", "x_min", "\n", "x_0", "=", "(", "x_max", "+", "x_min", ")", "/", "2", "\n", "\n", "wid", "=", "max", "(", "x_d", ",", "y_d", ")", "/", "2", "\n", "Y", ",", "X", ",", "channel", "=", "img", ".", "shape", "\n", "\n", "def", "crop_img", "(", "I", ")", ":", "\n", "        ", "I_pad", "=", "np", ".", "pad", "(", "I", ",", "(", "(", "Y", ",", "Y", ")", ",", "(", "X", ",", "X", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'constant'", ")", "# \"symmetric\" 'constant'", "\n", "I_crop", "=", "I_pad", "[", "round", "(", "Y", "+", "y_0", "-", "wid", ")", ":", "round", "(", "Y", "+", "y_0", "+", "wid", ")", ",", "round", "(", "X", "+", "x_0", "-", "wid", ")", ":", "round", "(", "X", "+", "x_0", "+", "wid", ")", "]", "\n", "return", "I_crop", "\n", "\n", "", "def", "crop_mask", "(", "I", ")", ":", "\n", "        ", "I_pad", "=", "np", ".", "pad", "(", "I", ",", "(", "(", "Y", ",", "Y", ")", ",", "(", "X", ",", "X", ")", ")", ",", "'constant'", ")", "# 'constant' zero_pad", "\n", "I_crop", "=", "I_pad", "[", "round", "(", "Y", "+", "y_0", "-", "wid", ")", ":", "round", "(", "Y", "+", "y_0", "+", "wid", ")", ",", "round", "(", "X", "+", "x_0", "-", "wid", ")", ":", "round", "(", "X", "+", "x_0", "+", "wid", ")", "]", "\n", "return", "I_crop", "\n", "\n", "", "if", "part_mask", "is", "None", ":", "\n", "        ", "return", "crop_img", "(", "img", ")", ",", "crop_mask", "(", "obj_mask", ")", "\n", "", "else", ":", "\n", "        ", "return", "crop_img", "(", "img", ")", ",", "crop_mask", "(", "obj_mask", ")", ",", "crop_mask", "(", "part_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.VOC.preprocess.np_save_resize_img": [[114, 125], ["img.resize.max", "PIL.Image.fromarray().convert", "img.resize.resize", "img.resize.save", "PIL.Image.fromarray", "img.resize.resize", "img.resize.save", "PIL.Image.fromarray"], "function", ["None"], ["def", "np_save_resize_img", "(", "img", ",", "filename", ")", ":", "\n", "# imresize(img, save_size)", "\n", "    ", "if", "img", ".", "max", "(", ")", "==", "1", ":", "\n", "        ", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "img", "*", "255", ")", ".", "convert", "(", "'1'", ")", "\n", "img", "=", "img", ".", "resize", "(", "save_size", ",", "resample", "=", "PIL", ".", "Image", ".", "NEAREST", ")", "\n", "img", ".", "save", "(", "filename", "+", "'.bmp'", ")", "\n", "\n", "", "else", ":", "\n", "        ", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "img", ")", "\n", "img", "=", "img", ".", "resize", "(", "save_size", ",", "resample", "=", "PIL", ".", "Image", ".", "LANCZOS", ")", "\n", "img", ".", "save", "(", "filename", "+", "'.jpg'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.VOC.utils.load_annotations": [[4, 41], ["range", "scipy.io.loadmat", "range", "objects_list.append", "parts_list.append"], "function", ["None"], ["def", "load_annotations", "(", "path", ")", ":", "\n", "\n", "# Get annotations from the file and relative objects:", "\n", "    ", "annotations", "=", "scipy", ".", "io", ".", "loadmat", "(", "path", ")", "[", "\"anno\"", "]", "\n", "\n", "objects", "=", "annotations", "[", "0", ",", "0", "]", "[", "\"objects\"", "]", "\n", "\n", "# List containing information of each object (to add to dictionary):", "\n", "objects_list", "=", "[", "]", "\n", "\n", "# Go through the objects and extract info:", "\n", "for", "obj_idx", "in", "range", "(", "objects", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "obj", "=", "objects", "[", "0", ",", "obj_idx", "]", "\n", "\n", "# Get classname and mask of the current object:", "\n", "classname", "=", "obj", "[", "\"class\"", "]", "[", "0", "]", "\n", "mask", "=", "obj", "[", "\"mask\"", "]", "\n", "\n", "# List containing information of each body part (to add to dictionary):", "\n", "parts_list", "=", "[", "]", "\n", "\n", "parts", "=", "obj", "[", "\"parts\"", "]", "\n", "\n", "# Go through the part of the specific object and extract info:", "\n", "for", "part_idx", "in", "range", "(", "parts", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "part", "=", "parts", "[", "0", ",", "part_idx", "]", "\n", "# Get part name and mask of the current body part:", "\n", "part_name", "=", "part", "[", "\"part_name\"", "]", "[", "0", "]", "\n", "part_mask", "=", "part", "[", "\"mask\"", "]", "\n", "\n", "# Add info to parts_list:", "\n", "parts_list", ".", "append", "(", "{", "\"part_name\"", ":", "part_name", ",", "\"mask\"", ":", "part_mask", "}", ")", "\n", "\n", "# Add info to objects_list:", "\n", "", "objects_list", ".", "append", "(", "{", "\"class\"", ":", "classname", ",", "\"mask\"", ":", "mask", ",", "\"parts\"", ":", "parts_list", "}", ")", "\n", "\n", "", "return", "{", "\"objects\"", ":", "objects_list", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.gradmap.gradmap.Report.__init__": [[139, 142], ["tqdm.tqdm.tqdm", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_pbar", "=", "8", "\n", "self", ".", "pbar", "=", "[", "tqdm", "(", "bar_format", "=", "'{desc}'", ",", "leave", "=", "True", ")", "for", "i", "in", "range", "(", "self", ".", "num_pbar", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.gradmap.gradmap.Report.update": [[143, 182], ["gradmap.Report.pbar[].set_description_str", "gradmap.Report.pbar[].set_description_str", "enumerate", "gradmap.Report.pbar[].set_description_str", "gradmap.Report.pbar[].set_description_str", "enumerate", "range", "len", "zip", "gradmap.Report.pbar[].set_description_str", "gradmap.Report.pbar[].set_description_str", "gradmap.Report.pbar[].update", "[].append", "[].append", "IoU_mean[].append", "ap_mean[].append", "range", "range", "len", "sum", "len", "gradmap.Report.update.mean"], "methods", ["home.repos.pwc.inspect_result.hyliang96_CSGCNN.gradmap.gradmap.Report.update"], ["", "def", "update", "(", "self", ",", "IoU_list", ",", "label_list", ")", ":", "\n", "        ", "setnum", "=", "len", "(", "dataset", ".", "classes", ")", "+", "1", "\n", "\n", "IoU_set", "=", "{", "'CSG'", ":", "[", "[", "]", "for", "i", "in", "range", "(", "setnum", ")", "]", ",", "\n", "'STD'", ":", "[", "[", "]", "for", "i", "in", "range", "(", "setnum", ")", "]", "}", "\n", "\n", "for", "method", "in", "[", "'CSG'", ",", "'STD'", "]", ":", "\n", "            ", "for", "iou", ",", "label", "in", "zip", "(", "IoU_list", "[", "method", "]", ",", "label_list", ")", ":", "\n", "                ", "IoU_set", "[", "method", "]", "[", "label", "]", ".", "append", "(", "iou", ")", "\n", "IoU_set", "[", "method", "]", "[", "-", "1", "]", ".", "append", "(", "iou", ")", "\n", "\n", "\n", "", "", "def", "mean", "(", "l", ")", ":", "\n", "            ", "return", "0", "if", "len", "(", "l", ")", "==", "0", "else", "sum", "(", "l", ")", "/", "len", "(", "l", ")", "\n", "\n", "", "IoU_mean", "=", "{", "'CSG'", ":", "[", "]", ",", "'STD'", ":", "[", "]", "}", "\n", "for", "method", "in", "[", "'CSG'", ",", "'STD'", "]", ":", "\n", "            ", "for", "IoUs", "in", "IoU_set", "[", "method", "]", ":", "\n", "                ", "IoU_mean", "[", "method", "]", ".", "append", "(", "mean", "(", "IoUs", ")", ")", "\n", "\n", "", "", "self", ".", "pbar", "[", "0", "]", ".", "set_description_str", "(", "'IoU'", ")", "\n", "self", ".", "pbar", "[", "1", "]", ".", "set_description_str", "(", "'%-7s'", "*", "(", "1", "+", "setnum", ")", "%", "(", "'model'", ",", "*", "dataset", ".", "classes", ",", "'total'", ")", ")", "\n", "for", "idx", ",", "method", "in", "enumerate", "(", "[", "'CSG'", ",", "'STD'", "]", ")", ":", "\n", "            ", "self", ".", "pbar", "[", "2", "+", "idx", "]", ".", "set_description_str", "(", "'%-7s'", "%", "method", "+", "' '", ".", "join", "(", "[", "'%.4f'", "]", "*", "setnum", ")", "%", "(", "*", "IoU_mean", "[", "method", "]", ",", ")", ")", "\n", "\n", "\n", "", "ap_mean", "=", "{", "'CSG'", ":", "[", "]", ",", "'STD'", ":", "[", "]", "}", "\n", "for", "method", "in", "[", "'CSG'", ",", "'STD'", "]", ":", "\n", "            ", "for", "IoUs", "in", "IoU_set", "[", "method", "]", ":", "\n", "                ", "aps", "=", "[", "1", "if", "iou", ">=", "ap_thread", "else", "0", "for", "iou", "in", "IoUs", "]", "\n", "ap_mean", "[", "method", "]", ".", "append", "(", "mean", "(", "aps", ")", ")", "\n", "\n", "", "", "self", ".", "pbar", "[", "4", "]", ".", "set_description_str", "(", "'AP@%d'", "%", "(", "100", "*", "ap_thread", ")", ")", "\n", "self", ".", "pbar", "[", "5", "]", ".", "set_description_str", "(", "'%-7s'", "*", "(", "1", "+", "setnum", ")", "%", "(", "'model'", ",", "*", "dataset", ".", "classes", ",", "'total'", ")", ")", "\n", "for", "idx", ",", "method", "in", "enumerate", "(", "[", "'CSG'", ",", "'STD'", "]", ")", ":", "\n", "            ", "self", ".", "pbar", "[", "6", "+", "idx", "]", ".", "set_description_str", "(", "'%-7s'", "%", "method", "+", "' '", ".", "join", "(", "[", "'%.4f'", "]", "*", "setnum", ")", "%", "(", "*", "ap_mean", "[", "method", "]", ",", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_pbar", ")", ":", "\n", "            ", "self", ".", "pbar", "[", "i", "]", ".", "update", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.gradmap.gradmap.Report.close": [[183, 186], ["range", "gradmap.Report.pbar[].close"], "methods", ["home.repos.pwc.inspect_result.hyliang96_CSGCNN.gradmap.gradmap.Report.close"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "num_pbar", ")", ":", "\n", "            ", "self", ".", "pbar", "[", "i", "]", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.gradmap.gradmap.proc_gradmap": [[87, 100], ["gauss.norm", "kornia.filters.GaussianBlur2d", "kornia.filters.GaussianBlur2d.", "gauss.norm", "math.sqrt", "x[].numel", "round"], "function", ["None"], ["def", "proc_gradmap", "(", "grad", ")", ":", "\n", "# grad: [bs, C, H, W]", "\n", "    ", "x", "=", "grad", "\n", "x", "=", "x", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# [bs,1, H, W]", "\n", "mean_x2", "=", "x", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "/", "math", ".", "sqrt", "(", "x", "[", "0", "]", ".", "numel", "(", ")", ")", "# [bs,1, H, W]", "\n", "x", "=", "x", "/", "mean_x2", "# [bs,1, H, W]", "\n", "kernel_size", "=", "2", "*", "round", "(", "gauss_radius", ")", "+", "1", "\n", "gauss", "=", "kornia", ".", "filters", ".", "GaussianBlur2d", "(", "\n", "(", "kernel_size", ",", "kernel_size", ")", ",", "\n", "(", "gauss_radius", ",", "gauss_radius", ")", ")", "\n", "x", "=", "gauss", "(", "x", ")", "# [bs,1, H, W]", "\n", "x", "=", "(", "x", ">", "gradmap_threshold", ")", ".", "type", "(", "grad", ".", "dtype", ")", "# [bs,1, H, W]", "\n", "return", "x", "# [bs,1, H, W]", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.gradmap.gradmap.to_image": [[101, 109], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.view().repeat", "torch.tensor.view().repeat", "torch.tensor.view", "torch.tensor.view"], "function", ["None"], ["", "def", "to_image", "(", "imgs", ")", ":", "\n", "    ", "mean", "=", "torch", ".", "tensor", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "# imgs  [bs, C, H, W]", "\n", "shape", "=", "imgs", ".", "shape", "\n", "imgs", "=", "imgs", "*", "std", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ".", "repeat", "(", "shape", "[", "0", "]", ",", "1", ",", "*", "shape", "[", "2", ":", "]", ")", "+", "mean", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ".", "repeat", "(", "shape", "[", "0", "]", ",", "1", ",", "*", "shape", "[", "2", ":", "]", ")", "\n", "return", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.gradmap.gradmap.IoU": [[110, 116], ["torch.min", "torch.min", "torch.max", "torch.max", "torch.min.sum", "torch.max.sum"], "function", ["None"], ["", "def", "IoU", "(", "mask1s", ",", "mask2s", ")", ":", "\n", "# mask1s, mask2s: [bs, 1, H, W]", "\n", "    ", "intersect", "=", "torch", ".", "min", "(", "mask1s", ",", "mask2s", ")", "\n", "union", "=", "torch", ".", "max", "(", "mask1s", ",", "mask2s", ")", "\n", "IoUs", "=", "intersect", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "/", "union", ".", "sum", "(", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "\n", "return", "IoUs", "\n", "\n"]], "home.repos.pwc.inspect_result.hyliang96_CSGCNN.gradmap.gradmap.imgshow": [[118, 135], ["matplotlib.figure", "plt.figure.add_subplot", "img.detach.detach", "img.detach.numpy", "print", "print", "fig.add_subplot.imshow", "matplotlib.show", "numpy.transpose", "np.transpose.max", "np.transpose.min", "matplotlib.colorbar"], "function", ["None"], ["", "def", "imgshow", "(", "img", ",", "colorbar", "=", "True", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "\n", "img", "=", "img", ".", "detach", "(", ")", "\n", "npimg", "=", "img", ".", "numpy", "(", ")", "\n", "if", "npimg", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "npimg", "=", "npimg", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "npimg", "=", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "\n", "", "print", "(", "'range = '", ",", "npimg", ".", "max", "(", ")", ",", "npimg", ".", "min", "(", ")", ")", "\n", "print", "(", "'shape ='", ",", "npimg", ".", "shape", ")", "\n", "im", "=", "ax", ".", "imshow", "(", "npimg", ")", "#  cmap=plt.cm.hot_r", "\n", "if", "colorbar", ":", "\n", "        ", "plt", ".", "colorbar", "(", "im", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]]}