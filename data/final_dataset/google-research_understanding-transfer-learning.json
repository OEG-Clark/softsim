{"home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.imagenet_train.main": [[33, 41], ["libutil.flags.get_argparser", "libutil.flags.get_argparser.parse_args", "configs.Registry.get_config", "libutil.setup.setup", "imagenet_train.run_train"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libutil.flags.get_argparser", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.get_config", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libutil.setup.setup", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.chexpert_train.run_train"], ["def", "main", "(", ")", ":", "\n", "  ", "parser", "=", "libutil", ".", "flags", ".", "get_argparser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "my_cfg", "=", "configs", ".", "Registry", ".", "get_config", "(", "args", ".", "config_key", ")", "\n", "libutil", ".", "setup", ".", "setup", "(", "args", ",", "my_cfg", ")", "\n", "\n", "run_train", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.imagenet_train.get_data": [[43, 46], ["gin.configurable", "libdata.torchvision_get_data"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libdata.torchvision.torchvision_get_data"], ["", "@", "gin", ".", "configurable", "(", "'data'", ")", "\n", "def", "get_data", "(", "name", "=", "gin", ".", "REQUIRED", ",", "configs", "=", "None", ")", ":", "\n", "  ", "return", "libdata", ".", "torchvision_get_data", "(", "name", ",", "configs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.imagenet_train.run_train": [[48, 114], ["gin.configurable", "imagenet_train.get_data", "libmodel.build_model", "torch.CrossEntropyLoss", "libtrain.make_optimizer", "libtrain.make_lr_scheduler", "libtrain.make_weight_regularizers", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "imagenet_train.run_train.eval_and_save_ckpt"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.chexpert_train.get_data", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libmodel.build_model", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.make_optimizer", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.make_lr_scheduler", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.make_weight_regularizers"], ["", "@", "gin", ".", "configurable", "(", "'train'", ",", "blacklist", "=", "[", "'args'", "]", ")", "\n", "def", "run_train", "(", "args", ",", "batch_size", "=", "gin", ".", "REQUIRED", ",", "epochs", "=", "gin", ".", "REQUIRED", ",", "finetune_from", "=", "None", ",", "mixup_alpha", "=", "0.7", ",", "data_workers", "=", "32", ")", ":", "\n", "  ", "loaded_data", ",", "data_meta", "=", "get_data", "(", ")", "\n", "model", "=", "libmodel", ".", "build_model", "(", "num_classes", "=", "data_meta", "[", "'num_classes'", "]", ")", "\n", "\n", "if", "finetune_from", ":", "\n", "    ", "libtrain", ".", "load_finetune_init", "(", "model", ",", "finetune_from", ")", "\n", "", "else", ":", "\n", "    ", "logging", ".", "info", "(", "'No finetune init weights specified.'", ")", "\n", "\n", "", "cel", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "def", "criterion", "(", "pred", ",", "target", ",", "lam", ")", ":", "\n", "    ", "\"\"\"Criterion suitable for mixup training.\"\"\"", "\n", "return", "(", "-", "F", ".", "log_softmax", "(", "pred", ",", "dim", "=", "1", ")", "*", "torch", ".", "zeros", "(", "pred", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "view", "(", "-", "1", ",", "1", ")", ",", "lam", ".", "view", "(", "-", "1", ",", "1", ")", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "", "optimizer", "=", "libtrain", ".", "make_optimizer", "(", "model", ")", "\n", "lr_scheduler", "=", "libtrain", ".", "make_lr_scheduler", "(", "optimizer", ")", "\n", "weight_regularizers", "=", "libtrain", ".", "make_weight_regularizers", "(", "model", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "loaded_data", "[", "'train'", "]", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "data_workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "loaded_data", "[", "'test'", "]", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "data_workers", ",", "pin_memory", "=", "False", ")", "\n", "data_to_eval", "=", "[", "(", "'test'", ",", "val_loader", ")", "]", "\n", "if", "loaded_data", "[", "'eval_mode_train'", "]", "is", "not", "None", ":", "\n", "    ", "eval_mode_train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "loaded_data", "[", "'eval_mode_train'", "]", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "data_workers", ",", "pin_memory", "=", "False", ")", "\n", "data_to_eval", ".", "append", "(", "(", "'train'", ",", "eval_mode_train_loader", ")", ")", "\n", "\n", "", "tb_writer", "=", "torch", ".", "utils", ".", "tensorboard", ".", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "args", ".", "work_dir", ",", "'train_tensorboard'", ")", ")", "\n", "\n", "def", "eval_and_save_ckpt", "(", "epoch", ",", "best_acc1", ")", ":", "\n", "    ", "for", "name", ",", "loader", "in", "data_to_eval", ":", "\n", "      ", "logging", ".", "info", "(", "f'E{epoch:03d} Evaluating {name}...'", ")", "\n", "results", "=", "libtrain", ".", "imagenet_test_epoch", "(", "loader", ",", "model", ",", "cel", ")", "\n", "logging", ".", "info", "(", "f'E{epoch:03d} eval-{name}: Acc@1 {results[\"top1\"]:.3f} Loss {results[\"loss\"]:.4f}'", ")", "\n", "tb_writer", ".", "add_scalar", "(", "f'eval/{name}_acc'", ",", "results", "[", "'top1'", "]", ",", "epoch", ")", "\n", "if", "name", "==", "'test'", ":", "\n", "        ", "is_best", "=", "results", "[", "'top1'", "]", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "results", "[", "'top1'", "]", ",", "best_acc1", ")", "\n", "\n", "", "", "libtrain", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "'best_acc1'", ":", "best_acc1", ",", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "is_best", ",", "ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "work_dir", ",", "'checkpoints'", ")", ")", "\n", "return", "best_acc1", "\n", "\n", "", "best_acc1", "=", "eval_and_save_ckpt", "(", "epoch", "=", "0", ",", "best_acc1", "=", "-", "float", "(", "'inf'", ")", ")", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "    ", "for", "i_grp", ",", "param_group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "      ", "tb_writer", ".", "add_scalar", "(", "f'learning_rate/group{i_grp}'", ",", "param_group", "[", "'lr'", "]", ",", "epoch", "+", "1", ")", "\n", "\n", "# train for one epoch", "\n", "", "train_epoch", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "mixup_alpha", ",", "weight_regularizers", ",", "tb_writer", ")", "\n", "\n", "best_acc1", "=", "eval_and_save_ckpt", "(", "epoch", "=", "epoch", "+", "1", ",", "best_acc1", "=", "best_acc1", ")", "\n", "\n", "if", "lr_scheduler", "is", "not", "None", ":", "\n", "      ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "tb_writer", ".", "flush", "(", ")", "\n", "\n", "", "tb_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.imagenet_train.train_epoch": [[116, 163], ["libtrain.AverageMeter", "libtrain.AverageMeter", "libtrain.AverageMeter", "libtrain.AverageMeter", "model.train", "time.time", "tqdm.tqdm", "enumerate", "logging.info", "libtrain.AverageMeter.update", "inputs.cuda.cuda", "targets.cuda.cuda", "libutil.mixup.mixup_data", "model", "libutil.mixup.mixup_criterion", "libutil.mixup.mixup_criterion.", "libtrain.eval_weight_regularizers", "libtrain.AverageMeter.update", "libtrain.AverageMeter.update", "optimizer.zero_grad", "loss_func.backward", "optimizer.step", "libtrain.AverageMeter.update", "time.time", "tqdm.tqdm.set_description", "tb_writer.add_scalar", "tb_writer.add_scalar", "libtrain.calc_accuracy", "loss_func.item", "inputs.cuda.size", "acc1.item", "inputs.cuda.size", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.update", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libutil.mixup.mixup_data", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libutil.mixup.mixup_criterion", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.eval_weight_regularizers", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.update", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.update", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.update", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.calc_accuracy"], ["", "def", "train_epoch", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "mixup_alpha", ",", "weight_regularizers", ",", "tb_writer", "=", "None", ")", ":", "\n", "  ", "batch_time", "=", "libtrain", ".", "AverageMeter", "(", ")", "\n", "data_time", "=", "libtrain", ".", "AverageMeter", "(", ")", "\n", "losses", "=", "libtrain", ".", "AverageMeter", "(", ")", "\n", "top1", "=", "libtrain", ".", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "the_tqdm", "=", "tqdm", "(", "train_loader", ",", "disable", "=", "None", ",", "desc", "=", "f'Train E{epoch+1:03d}'", ")", "\n", "for", "i", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "the_tqdm", ")", ":", "\n", "# measure data loading time", "\n", "    ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "inputs", "=", "inputs", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "inputs", ",", "targets_a", ",", "targets_b", ",", "lam", "=", "libutil", ".", "mixup", ".", "mixup_data", "(", "inputs", ",", "targets", ",", "mixup_alpha", ",", "use_cuda", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "inputs", ")", "\n", "loss_func", "=", "libutil", ".", "mixup", ".", "mixup_criterion", "(", "targets_a", ",", "targets_b", ",", "lam", ")", "\n", "loss", "=", "loss_func", "(", "criterion", ",", "output", ")", "\n", "\n", "loss", "+=", "libtrain", ".", "eval_weight_regularizers", "(", "weight_regularizers", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", "=", "libtrain", ".", "calc_accuracy", "(", "output", ",", "targets", ",", "topk", "=", "(", "1", ",", ")", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "the_tqdm", ".", "set_description", "(", "f'Train E{epoch+1:03d} Acc={top1.avg:.3f} Loss={losses.avg:.4f}'", ")", "\n", "\n", "", "logging", ".", "info", "(", "f'E{epoch:03d} train: Acc@1 {top1.avg:.3f} Loss {losses.avg:.4f}'", ")", "\n", "if", "tb_writer", "is", "not", "None", ":", "\n", "    ", "tb_writer", ".", "add_scalar", "(", "'train/loss'", ",", "losses", ".", "avg", ",", "epoch", "+", "1", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'train/acc'", ",", "top1", ".", "avg", ",", "epoch", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.ckpt_interpolation.eval_interpolation": [[35, 44], ["numpy.linspace", "range", "model.load_state_dict", "results.append", "ckpt_interpolation.interpolate_state_dicts", "ckpt_interpolation.experiment_for_domain_net.eval_fn"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.ckpt_interpolation.interpolate_state_dicts"], ["def", "eval_interpolation", "(", "model", ",", "state_dict_1", ",", "state_dict_2", ",", "eval_fn", ",", "num", "=", "3", ")", ":", "\n", "  ", "weights", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "num", ")", "\n", "\n", "results", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "    ", "model", ".", "load_state_dict", "(", "\n", "interpolate_state_dicts", "(", "state_dict_1", ",", "state_dict_2", ",", "weights", "[", "i", "]", ")", ")", "\n", "results", ".", "append", "(", "eval_fn", "(", "model", ")", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.ckpt_interpolation.interpolate_state_dicts": [[46, 49], ["state_dict_1.keys"], "function", ["None"], ["", "def", "interpolate_state_dicts", "(", "state_dict_1", ",", "state_dict_2", ",", "weight", ")", ":", "\n", "  ", "return", "{", "key", ":", "(", "1", "-", "weight", ")", "*", "state_dict_1", "[", "key", "]", "+", "weight", "*", "state_dict_2", "[", "key", "]", "\n", "for", "key", "in", "state_dict_1", ".", "keys", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.ckpt_interpolation.load_state_dict_from_gs": [[51, 54], ["libutil.gcloud.download_as_tmp", "torch.load", "torch.load"], "function", ["None"], ["", "def", "load_state_dict_from_gs", "(", "gs_path", ")", ":", "\n", "  ", "local_path", "=", "libutil", ".", "gcloud", ".", "download_as_tmp", "(", "gs_path", ")", "\n", "return", "torch", ".", "load", "(", "local_path", ")", "[", "'state_dict'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.ckpt_interpolation.experiment_for_domain_net": [[56, 100], ["dict", "libdata.torchvision_get_data", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "libmodel.build_model", "list", "range", "libtrain.imagenet_test_epoch", "checkpoint_paths.keys", "len", "range", "dict", "float", "len", "ckpt_interpolation.load_state_dict_from_gs", "ckpt_interpolation.load_state_dict_from_gs", "ckpt_interpolation.eval_interpolation", "print", "print", "print", "torch.CrossEntropyLoss", "libtrain.imagenet_test_epoch.items", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libdata.torchvision.torchvision_get_data", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libmodel.build_model", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.imagenet_test_epoch", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.ckpt_interpolation.load_state_dict_from_gs", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.ckpt_interpolation.load_state_dict_from_gs", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.ckpt_interpolation.eval_interpolation"], ["", "def", "experiment_for_domain_net", "(", "dn_name", ",", "batch_size", "=", "500", ",", "data_workers", "=", "4", ")", ":", "\n", "  ", "data_cfg", "=", "dict", "(", "subsample", "=", "{", "'size'", ":", "50000", ",", "'seed'", ":", "2020", "}", ")", "\n", "loaded_data", ",", "data_meta", "=", "libdata", ".", "torchvision_get_data", "(", "f'DomainNet_{dn_name}'", ",", "data_cfg", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "loaded_data", "[", "'test'", "]", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "data_workers", ",", "pin_memory", "=", "False", ")", "\n", "model", "=", "libmodel", ".", "build_model", "(", "arch", "=", "'fixup_resnet50'", ",", "num_classes", "=", "data_meta", "[", "'num_classes'", "]", ",", "\n", "kwargs", "=", "dict", "(", "zero_fc_init", "=", "False", ")", ")", "\n", "\n", "def", "eval_fn", "(", "the_model", ")", ":", "\n", "    ", "results", "=", "libtrain", ".", "imagenet_test_epoch", "(", "test_loader", ",", "the_model", ",", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ")", "\n", "return", "{", "key", ":", "float", "(", "val", ")", "for", "key", ",", "val", "in", "results", ".", "items", "(", ")", "}", "\n", "\n", "", "ckpt_finetune_fn", "=", "'fixup_resnet50_nzfc/finetune-lr0.02-MstepLR/checkpoints/ckpt-E100.pth.tar'", "\n", "ckpt_randinit_fn", "=", "'fixup_resnet50_nzfc/randinit-lr0.1-MstepLR/checkpoints/ckpt-E100.pth.tar'", "\n", "prefix1", "=", "'experiments/train'", "\n", "prefix2", "=", "'experiments-rep2/train'", "\n", "checkpoint_paths", "=", "{", "\n", "'randinit_1'", ":", "f'{prefix1}/DomainNet_{dn_name}/{ckpt_randinit_fn}'", ",", "\n", "'randinit_2'", ":", "f'{prefix2}/DomainNet_{dn_name}/{ckpt_randinit_fn}'", ",", "\n", "'finetune_1'", ":", "f'{prefix1}/DomainNet_{dn_name}/{ckpt_finetune_fn}'", ",", "\n", "'finetune_2'", ":", "f'{prefix2}/DomainNet_{dn_name}/{ckpt_finetune_fn}'", ",", "\n", "}", "\n", "\n", "all_results", "=", "{", "}", "\n", "num_eval", "=", "50", "\n", "all_keys", "=", "list", "(", "checkpoint_paths", ".", "keys", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "all_keys", ")", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "len", "(", "all_keys", ")", ")", ":", "\n", "      ", "key1", "=", "all_keys", "[", "i", "]", "\n", "key2", "=", "all_keys", "[", "j", "]", "\n", "\n", "state_dict1", "=", "load_state_dict_from_gs", "(", "checkpoint_paths", "[", "key1", "]", ")", "\n", "state_dict2", "=", "load_state_dict_from_gs", "(", "checkpoint_paths", "[", "key2", "]", ")", "\n", "interpolate_results", "=", "eval_interpolation", "(", "\n", "model", ",", "state_dict1", ",", "state_dict2", ",", "eval_fn", ",", "num", "=", "num_eval", ")", "\n", "ret_key", "=", "f'{key1} vs {key2}'", "\n", "all_results", "[", "ret_key", "]", "=", "interpolate_results", "\n", "print", "(", "'#'", "*", "40", ")", "\n", "print", "(", "ret_key", ")", "\n", "print", "(", "interpolate_results", ")", "\n", "\n", "with", "open", "(", "f'experiments/ckpt_interpolation/{dn_name}.p'", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "all_results", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.ckpt_interpolation.experiment_for_chexpert": [[102, 167], ["get_data", "libmodel.build_model", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "ckpt_interpolation.experiment_for_chexpert._do_eval"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.chexpert_train.get_data", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libmodel.build_model"], ["", "", "", "", "def", "experiment_for_chexpert", "(", "batch_size", "=", "256", ",", "data_workers", "=", "8", ")", ":", "\n", "  ", "from", "chexpert_train", "import", "get_data", "\n", "loaded_data", ",", "data_meta", "=", "get_data", "(", "data_config", "=", "{", "'cache_bitmap'", ":", "False", "}", ")", "\n", "model", "=", "libmodel", ".", "build_model", "(", "arch", "=", "'fixup_resnet50'", ",", "num_classes", "=", "data_meta", "[", "'num_diseases'", "]", ",", "\n", "kwargs", "=", "dict", "(", "zero_fc_init", "=", "False", ")", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "loaded_data", "[", "'test'", "]", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "data_workers", ",", "\n", "shuffle", "=", "False", ",", "pin_memory", "=", "False", ")", "\n", "dev_header", "=", "loaded_data", "[", "'dev'", "]", ".", "_label_header", "\n", "\n", "def", "eval_fn", "(", "the_model", ")", ":", "\n", "    ", "results", "=", "libtrain", ".", "chexpert_test_epoch", "(", "0", ",", "the_model", ",", "test_loader", ",", "dev_header", ",", "testset_name", "=", "'test'", ")", "\n", "return", "results", "\n", "\n", "", "prefix", "=", "'experiments/train/chexpert/fixup_resnet50_nzfc'", "\n", "prefix2", "=", "'experiments-rep2/train/chexpert/fixup_resnet50_nzfc'", "\n", "ckpt_fn", "=", "lambda", "epoch", ":", "f'checkpoints/ckpt-E{epoch:03d}.pth.tar'", "\n", "checkpoint_paths", "=", "{", "\n", "'finetune-best'", ":", "[", "f'{prefix}/finetune-lr0.02-bs256/{ckpt_fn(4)}'", ",", "\n", "f'{prefix}-rep1/finetune-lr0.02-bs256/{ckpt_fn(4)}'", "]", ",", "\n", "'finetune-final'", ":", "[", "f'{prefix}/finetune-lr0.02-bs256/{ckpt_fn(200)}'", ",", "\n", "f'{prefix}-rep1/finetune-lr0.02-bs256/{ckpt_fn(200)}'", "]", ",", "\n", "'randinit-lr0.1-best'", ":", "[", "f'{prefix}/randinit-lr0.1-bs256/{ckpt_fn(68)}'", ",", "\n", "f'{prefix}-rep1/randinit-lr0.1-bs256/{ckpt_fn(68)}'", "]", ",", "\n", "'randinit-lr0.1-final'", ":", "[", "f'{prefix}/randinit-lr0.1-bs256/{ckpt_fn(400)}'", ",", "\n", "f'{prefix}-rep1/randinit-lr0.1-bs256/{ckpt_fn(400)}'", "]", ",", "\n", "'randinit-lr0.02-best'", ":", "[", "f'{prefix}/randinit-lr0.02-bs256/{ckpt_fn(173)}'", ",", "\n", "f'{prefix2}/randinit-lr0.02-bs256/{ckpt_fn(176)}'", "]", ",", "\n", "'randinit-lr0.02-final'", ":", "[", "f'{prefix}/randinit-lr0.02-bs256/{ckpt_fn(400)}'", ",", "\n", "f'{prefix2}/randinit-lr0.02-bs256/{ckpt_fn(400)}'", "]", ",", "\n", "}", "\n", "\n", "all_results", "=", "{", "}", "\n", "num_eval", "=", "20", "\n", "def", "_do_eval", "(", "name", ",", "fn1", ",", "fn2", ")", ":", "\n", "    ", "sd1", "=", "load_state_dict_from_gs", "(", "fn1", ")", "\n", "sd2", "=", "load_state_dict_from_gs", "(", "fn2", ")", "\n", "interpolate_results", "=", "eval_interpolation", "(", "model", ",", "sd1", ",", "sd2", ",", "eval_fn", ",", "num", "=", "num_eval", ")", "\n", "all_results", "[", "name", "]", "=", "interpolate_results", "\n", "print", "(", "'#'", "*", "40", ")", "\n", "print", "(", "name", ")", "\n", "print", "(", "interpolate_results", ")", "\n", "\n", "pkl_fn", "=", "f'experiments/ckpt_interpolation/chexpert.p'", "\n", "if", "os", ".", "path", ".", "exists", "(", "pkl_fn", ")", ":", "\n", "      ", "with", "open", "(", "pkl_fn", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "existing_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "existing_results", ".", "update", "(", "all_results", ")", "\n", "all_rsults", "=", "existing_results", "\n", "", "", "with", "open", "(", "pkl_fn", ",", "'wb'", ")", "as", "f", ":", "\n", "      ", "pickle", ".", "dump", "(", "all_results", ",", "f", ")", "\n", "\n", "", "", "cps", "=", "checkpoint_paths", "\n", "_do_eval", "(", "'ft-best vs ft-best'", ",", "cps", "[", "'finetune-best'", "]", "[", "0", "]", ",", "cps", "[", "'finetune-best'", "]", "[", "1", "]", ")", "\n", "_do_eval", "(", "'ft-final vs ft-final'", ",", "cps", "[", "'finetune-final'", "]", "[", "0", "]", ",", "cps", "[", "'finetune-final'", "]", "[", "1", "]", ")", "\n", "_do_eval", "(", "'ft-best vs ft-final'", ",", "cps", "[", "'finetune-best'", "]", "[", "1", "]", ",", "cps", "[", "'finetune-final'", "]", "[", "1", "]", ")", "\n", "_do_eval", "(", "'ri-lr0.1-best vs ri-lr0.1-best'", ",", "cps", "[", "'randinit-lr0.1-best'", "]", "[", "0", "]", ",", "cps", "[", "'randinit-lr0.1-best'", "]", "[", "1", "]", ")", "\n", "_do_eval", "(", "'ri-lr0.1-final vs ri-lr0.1-final'", ",", "cps", "[", "'randinit-lr0.1-final'", "]", "[", "0", "]", ",", "cps", "[", "'randinit-lr0.1-final'", "]", "[", "1", "]", ")", "\n", "_do_eval", "(", "'ri-lr0.1-best vs ri-lr0.1-final'", ",", "cps", "[", "'randinit-lr0.1-best'", "]", "[", "1", "]", ",", "cps", "[", "'randinit-lr0.1-final'", "]", "[", "1", "]", ")", "\n", "_do_eval", "(", "'ft-best vs ri-lr0.1-best'", ",", "cps", "[", "'finetune-best'", "]", "[", "0", "]", ",", "cps", "[", "'randinit-lr0.1-best'", "]", "[", "1", "]", ")", "\n", "\n", "_do_eval", "(", "'ft-best vs ri-lr0.02-best'", ",", "cps", "[", "'finetune-best'", "]", "[", "0", "]", ",", "cps", "[", "'randinit-lr0.02-best'", "]", "[", "1", "]", ")", "\n", "_do_eval", "(", "'ri-lr0.02-best vs ri-lr0.02-best'", ",", "cps", "[", "'randinit-lr0.02-best'", "]", "[", "0", "]", ",", "cps", "[", "'randinit-lr0.02-best'", "]", "[", "1", "]", ")", "\n", "_do_eval", "(", "'ri-lr0.02-final vs ri-lr0.02-final'", ",", "cps", "[", "'randinit-lr0.02-final'", "]", "[", "0", "]", ",", "cps", "[", "'randinit-lr0.02-final'", "]", "[", "1", "]", ")", "\n", "_do_eval", "(", "'ri-lr0.02-best vs ri-lr0.02-final'", ",", "cps", "[", "'randinit-lr0.02-best'", "]", "[", "1", "]", ",", "cps", "[", "'randinit-lr0.02-final'", "]", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.ckpt_interpolation.linear_coeff_xticks": [[168, 182], ["matplotlib.xticks", "numpy.arange", "numpy.array", "matplotlib.xticks", "numpy.linspace().astype", "numpy.linspace", "len", "numpy.linspace", "numpy.linspace", "numpy.linspace", "len", "len"], "function", ["None"], ["", "def", "linear_coeff_xticks", "(", "num", ",", "n_ticks", "=", "None", ")", ":", "\n", "  ", "if", "n_ticks", "is", "None", ":", "\n", "    ", "ticks", "=", "np", ".", "arange", "(", "num", ")", "\n", "tick_labels", "=", "np", ".", "array", "(", "[", "f'{x:.2f}'", "for", "x", "in", "np", ".", "linspace", "(", "0", ",", "1", ",", "len", "(", "ticks", ")", ")", "]", ")", "\n", "orig_ticks", ",", "_", "=", "plt", ".", "xticks", "(", ")", "\n", "n_ticks", "=", "len", "(", "orig_ticks", ")", "-", "1", "\n", "tick_idx", "=", "np", ".", "linspace", "(", "0", ",", "len", "(", "ticks", ")", "-", "1", ",", "n_ticks", ")", ".", "astype", "(", "np", ".", "int64", ")", "\n", "ticks", "=", "ticks", "[", "tick_idx", "]", "\n", "tick_labels", "=", "tick_labels", "[", "tick_idx", "]", "\n", "", "else", ":", "\n", "    ", "ticks", "=", "np", ".", "linspace", "(", "0", ",", "num", "-", "1", ",", "n_ticks", ")", "\n", "tick_labels", "=", "[", "f'{x:.2f}'", "for", "x", "in", "np", ".", "linspace", "(", "0", ",", "1", ",", "n_ticks", ")", "]", "\n", "\n", "", "plt", ".", "xticks", "(", "ticks", ",", "tick_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.ckpt_interpolation.plot_for_domain_net": [[184, 236], ["open", "pickle.load", "numpy.mean", "len", "matplotlib.style.context", "enumerate", "matplotlib.xlabel", "matplotlib.savefig", "np.mean.append", "matplotlib.figure", "ckpt_interpolation.linear_coeff_xticks", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.figure", "matplotlib.bar", "len", "ckpt_interpolation.linear_coeff_xticks", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.plot", "len", "len", "numpy.arange", "numpy.arange", "len", "len"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.ckpt_interpolation.linear_coeff_xticks", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.ckpt_interpolation.linear_coeff_xticks"], ["", "def", "plot_for_domain_net", "(", "dn_name", ",", "criterion", "=", "'top1'", ",", "plot_type", "=", "'bar'", ")", ":", "\n", "  ", "pkl_fn", "=", "f'experiments/ckpt_interpolation/{dn_name}.p'", "\n", "with", "open", "(", "pkl_fn", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "all_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "all_keys", "=", "[", "\n", "(", "'randinitT-randinitT'", ",", "[", "'randinit_1 vs randinit_2'", "]", ")", ",", "\n", "(", "'randinitT-finetuneT'", ",", "[", "'randinit_1 vs finetune_2'", "]", ")", ",", "\n", "(", "'finetuneT-finetuneT'", ",", "[", "'finetune_1 vs finetune_2'", "]", ")", ",", "\n", "]", "\n", "\n", "key_ret_map", "=", "{", "}", "\n", "for", "key", ",", "orig_key_list", "in", "all_keys", ":", "\n", "    ", "results", "=", "[", "]", "\n", "for", "orig_key", "in", "orig_key_list", ":", "\n", "      ", "results", ".", "append", "(", "[", "x", "[", "criterion", "]", "for", "x", "in", "all_results", "[", "orig_key", "]", "]", ")", "\n", "", "results", "=", "np", ".", "mean", "(", "results", ",", "axis", "=", "0", ")", "\n", "key_ret_map", "[", "key", "]", "=", "results", "\n", "\n", "", "bar_gap", "=", "0.1", "\n", "bar_w", "=", "(", "1", "-", "bar_gap", ")", "/", "len", "(", "all_keys", ")", "\n", "bar_offset", "=", "(", "1", "-", "bar_gap", ")", "/", "2", "\n", "\n", "plot_keys", "=", "[", "x", "[", "0", "]", "for", "x", "in", "all_keys", "]", "\n", "with", "plt", ".", "style", ".", "context", "(", "'ggplot'", ")", ":", "\n", "    ", "if", "plot_type", "==", "'bar'", ":", "\n", "      ", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "3.5", ")", ")", "\n", "", "elif", "plot_type", "==", "'plot'", ":", "\n", "      ", "plt", ".", "figure", "(", "figsize", "=", "(", "3.5", ",", "4", ")", ")", "\n", "\n", "", "for", "i", ",", "key", "in", "enumerate", "(", "plot_keys", ")", ":", "\n", "      ", "accs", "=", "key_ret_map", "[", "key", "]", "\n", "if", "plot_type", "==", "'bar'", ":", "\n", "        ", "plt", ".", "bar", "(", "np", ".", "arange", "(", "len", "(", "accs", ")", ")", "-", "bar_offset", "+", "i", "*", "bar_w", ",", "accs", ",", "bar_w", ",", "align", "=", "'edge'", ",", "label", "=", "key", ")", "\n", "", "elif", "plot_type", "==", "'plot'", ":", "\n", "        ", "plt", ".", "plot", "(", "np", ".", "arange", "(", "len", "(", "accs", ")", ")", ",", "accs", ",", "'.-'", ",", "label", "=", "key", ")", "\n", "\n", "", "", "if", "plot_type", "==", "'bar'", ":", "\n", "      ", "linear_coeff_xticks", "(", "len", "(", "key_ret_map", "[", "plot_keys", "[", "0", "]", "]", ")", ")", "\n", "", "elif", "plot_type", "==", "'plot'", ":", "\n", "      ", "linear_coeff_xticks", "(", "len", "(", "key_ret_map", "[", "plot_keys", "[", "0", "]", "]", ")", ",", "n_ticks", "=", "6", ")", "\n", "", "plt", ".", "xlabel", "(", "'linear interpolation coefficient'", ")", "\n", "if", "criterion", "==", "'top1'", ":", "\n", "      ", "plt", ".", "ylabel", "(", "'test accuracy %'", ")", "\n", "", "elif", "criterion", "==", "'loss'", ":", "\n", "      ", "plt", ".", "ylabel", "(", "'test loss'", ")", "\n", "", "if", "plot_type", "==", "'bar'", ":", "\n", "      ", "plt", ".", "legend", "(", "bbox_to_anchor", "=", "(", "0.", ",", "1.02", ",", "1.", ",", ".102", ")", ",", "loc", "=", "'lower left'", ",", "ncol", "=", "len", "(", "plot_keys", ")", ",", "mode", "=", "\"expand\"", ",", "\n", "borderaxespad", "=", "0.", ",", "fontsize", "=", "'x-small'", ")", "\n", "", "elif", "plot_type", "==", "'plot'", ":", "\n", "      ", "plt", ".", "legend", "(", "fontsize", "=", "'x-small'", ")", "\n", "", "plt", ".", "savefig", "(", "f'experiments/ckpt_interpolation/{dn_name}-{criterion}-{plot_type}.pdf'", ",", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.ckpt_interpolation.plot_for_chexpert": [[238, 298], ["open", "pickle.load", "len", "matplotlib.style.context", "enumerate", "matplotlib.xlabel", "matplotlib.savefig", "matplotlib.figure", "label.split", "ckpt_interpolation.plot_for_chexpert.get_bar_data"], "function", ["None"], ["", "", "def", "plot_for_chexpert", "(", "criterion", "=", "'aucs'", ",", "plot_type", "=", "'bar'", ",", "randinit_lr", "=", "0.1", ")", ":", "\n", "  ", "pkl_fn", "=", "f'experiments/ckpt_interpolation/chexpert.p'", "\n", "with", "open", "(", "pkl_fn", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "all_results", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "plot_labels", "=", "[", "\n", "'finetune*-finetune*'", ",", "'finetune*-randinit*'", ",", "'randinit*-randinit*'", ",", "\n", "'finetuneT-finetuneT'", ",", "'finetune*-finetuneT'", ",", "\n", "'randinitT-randinitT'", ",", "'randinit*-randinitT'", ",", "\n", "]", "\n", "key_mapping", "=", "{", "'finetune*'", ":", "'ft-best'", ",", "'finetuneT'", ":", "'ft-final'", ",", "\n", "'randinit*'", ":", "f'ri-lr{randinit_lr}-best'", ",", "'randinitT'", ":", "f'ri-lr{randinit_lr}-final'", "}", "\n", "bar_gap", "=", "0.1", "\n", "bar_w", "=", "(", "1", "-", "bar_gap", ")", "/", "len", "(", "plot_labels", ")", "\n", "bar_offset", "=", "(", "1", "-", "bar_gap", ")", "/", "2", "\n", "\n", "def", "get_bar_data", "(", "data_key", ")", ":", "\n", "    ", "data", "=", "all_results", "[", "data_key", "]", "\n", "if", "criterion", "==", "'aucs'", ":", "\n", "      ", "data", "=", "[", "np", ".", "mean", "(", "x", "[", "'aucs'", "]", ")", "for", "x", "in", "data", "]", "\n", "", "elif", "criterion", "==", "'loss'", ":", "\n", "      ", "data", "=", "[", "x", "[", "'loss'", "]", "for", "x", "in", "data", "]", "\n", "", "return", "data", "\n", "\n", "", "with", "plt", ".", "style", ".", "context", "(", "'ggplot'", ")", ":", "\n", "    ", "if", "plot_type", "==", "'bar'", ":", "\n", "      ", "plt", ".", "figure", "(", "figsize", "=", "(", "6", ",", "3.5", ")", ")", "\n", "", "elif", "plot_type", "==", "'plot'", ":", "\n", "      ", "plt", ".", "figure", "(", "figsize", "=", "(", "3.5", ",", "4", ")", ")", "\n", "\n", "", "for", "i", ",", "label", "in", "enumerate", "(", "plot_labels", ")", ":", "\n", "      ", "key1", ",", "key2", "=", "label", ".", "split", "(", "'-'", ")", "\n", "real_key", "=", "f'{key_mapping[key1]} vs {key_mapping[key2]}'", "\n", "bar_data", "=", "get_bar_data", "(", "real_key", ")", "\n", "if", "plot_type", "==", "'bar'", ":", "\n", "        ", "plt", ".", "bar", "(", "np", ".", "arange", "(", "len", "(", "bar_data", ")", ")", "-", "bar_offset", "+", "i", "*", "bar_w", ",", "bar_data", ",", "\n", "bar_w", ",", "align", "=", "'edge'", ",", "label", "=", "label", ")", "\n", "", "elif", "plot_type", "==", "'plot'", ":", "\n", "        ", "plt", ".", "plot", "(", "np", ".", "arange", "(", "len", "(", "bar_data", ")", ")", ",", "bar_data", ",", "'.-'", ",", "label", "=", "label", ")", "\n", "\n", "", "", "if", "plot_type", "==", "'plot'", ":", "\n", "      ", "linear_coeff_xticks", "(", "len", "(", "bar_data", ")", ",", "n_ticks", "=", "6", ")", "\n", "plt", ".", "legend", "(", "fontsize", "=", "'x-small'", ",", "ncol", "=", "2", ")", "\n", "", "elif", "plot_type", "==", "'bar'", ":", "\n", "      ", "linear_coeff_xticks", "(", "len", "(", "bar_data", ")", ")", "\n", "plt", ".", "legend", "(", "bbox_to_anchor", "=", "(", "0.", ",", "1.02", ",", "1.", ",", ".102", ")", ",", "loc", "=", "'lower left'", ",", "ncol", "=", "3", ",", "mode", "=", "\"expand\"", ",", "\n", "borderaxespad", "=", "0.", ",", "fontsize", "=", "'x-small'", ")", "\n", "", "plt", ".", "xlabel", "(", "'linear interpolation coefficient'", ")", "\n", "if", "criterion", "==", "'aucs'", ":", "\n", "      ", "plt", ".", "ylabel", "(", "'test AUC'", ")", "\n", "#plt.ylim(0.47, 0.8)", "\n", "", "elif", "criterion", "==", "'loss'", ":", "\n", "      ", "plt", ".", "ylabel", "(", "'test loss'", ")", "\n", "#plt.ylim(0.4, 1.3)", "\n", "", "if", "randinit_lr", "==", "0.1", ":", "\n", "      ", "lr_tag", "=", "''", "\n", "", "else", ":", "\n", "      ", "lr_tag", "=", "f'-rilr{randinit_lr}'", "\n", "", "plt", ".", "savefig", "(", "f'experiments/ckpt_interpolation/chexpert-{criterion}-{plot_type}{lr_tag}.pdf'", ",", "\n", "bbox_inches", "=", "'tight'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.__init__": [[256, 258], ["libtrain.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "    ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.reset": [[259, 263], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "val", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.update": [[264, 268], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "    ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.avg": [[269, 272], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "sum", "/", "self", ".", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.load_finetune_init": [[31, 42], ["logging.info", "model.load_state_dict", "torch.load", "torch.load"], "function", ["None"], ["def", "load_finetune_init", "(", "model", ",", "checkpoint_path", ")", ":", "\n", "  ", "logging", ".", "info", "(", "'Loading finetune inits from %s'", ",", "checkpoint_path", ")", "\n", "\n", "state_dict", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "[", "'state_dict'", "]", "\n", "keys_to_exclude", "=", "[", "'module.fc.weight'", ",", "'module.fc.bias'", "]", "\n", "\n", "for", "key", "in", "keys_to_exclude", ":", "\n", "    ", "del", "state_dict", "[", "key", "]", "\n", "", "ret", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "assert", "ret", ".", "missing_keys", "==", "keys_to_exclude", "\n", "assert", "ret", ".", "unexpected_keys", "==", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.make_lr_scheduler": [[44, 53], ["gin.configurable", "getattr", "getattr.", "dict"], "function", ["None"], ["", "@", "gin", ".", "configurable", "(", "'lr_scheduler'", ",", "blacklist", "=", "[", "'optimizer'", "]", ")", "\n", "def", "make_lr_scheduler", "(", "optimizer", ",", "name", "=", "None", ",", "kwargs", "=", "None", ")", ":", "\n", "  ", "if", "name", "is", "None", ":", "\n", "    ", "return", "None", "\n", "\n", "", "if", "kwargs", "is", "None", ":", "\n", "    ", "kwargs", "=", "dict", "(", ")", "\n", "", "ctor", "=", "getattr", "(", "torch", ".", "optim", ".", "lr_scheduler", ",", "name", ")", "\n", "return", "ctor", "(", "optimizer", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.make_optimizer": [[55, 111], ["gin.configurable", "model.named_parameters", "logging.info", "enumerate", "logging.info", "getattr", "getattr.", "enumerate", "logging.info", "logging.info", "model.named_parameters", "model.named_parameters", "model.named_parameters", "range", "re.search", "[].append", "libtrain.make_optimizer.is_tensor_in"], "function", ["None"], ["", "@", "gin", ".", "configurable", "(", "'optimizer'", ",", "blacklist", "=", "[", "'model'", "]", ")", "\n", "def", "make_optimizer", "(", "model", ",", "name", "=", "'SGD'", ",", "weight_decay", "=", "gin", ".", "REQUIRED", ",", "base_lr", "=", "gin", ".", "REQUIRED", ",", "custom_lrs", "=", "None", ",", "kwargs", "=", "None", ")", ":", "\n", "# TODO: this could potentially change batch norm bias learning rate if batch norm is used", "\n", "# we should make this more specific for fixup architectures", "\n", "  ", "parameters_bias", "=", "[", "p", "[", "1", "]", "for", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "'bias'", "in", "p", "[", "0", "]", "]", "\n", "parameters_scale", "=", "[", "p", "[", "1", "]", "for", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "'scale'", "in", "p", "[", "0", "]", "]", "\n", "\n", "# custom_lrs can be specified as", "\n", "# [", "\n", "#   (param_regex, base_lr),", "\n", "#   (param_regex2, base_lr2),", "\n", "# ]", "\n", "if", "custom_lrs", "is", "None", ":", "\n", "    ", "custom_lrs", "=", "[", "]", "\n", "\n", "", "param_groups", "=", "[", "{", "'params'", ":", "[", "]", "}", "for", "_", "in", "range", "(", "len", "(", "custom_lrs", ")", "+", "1", ")", "]", "\n", "for", "p_name", ",", "p_var", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "    ", "if", "'bias'", "in", "p_name", "or", "'scale'", "in", "p_name", ":", "\n", "      ", "continue", "# ignore, fixup related parameters already handled above", "\n", "", "matched", "=", "False", "\n", "for", "i", ",", "(", "regex", ",", "lr", ")", "in", "enumerate", "(", "custom_lrs", ")", ":", "\n", "      ", "if", "re", ".", "search", "(", "regex", ",", "p_name", ")", ":", "\n", "        ", "param_groups", "[", "i", "]", "[", "'params'", "]", ".", "append", "(", "p_var", ")", "\n", "param_groups", "[", "i", "]", "[", "'lr'", "]", "=", "lr", "\n", "matched", "=", "True", "\n", "break", "\n", "", "", "if", "not", "matched", ":", "\n", "# the default group", "\n", "      ", "param_groups", "[", "-", "1", "]", "[", "'params'", "]", ".", "append", "(", "p_var", ")", "\n", "param_groups", "[", "-", "1", "]", "[", "'lr'", "]", "=", "base_lr", "\n", "\n", "", "", "all_param_groups", "=", "[", "\n", "{", "'params'", ":", "parameters_bias", ",", "'lr'", ":", "base_lr", "/", "10.", "}", ",", "\n", "{", "'params'", ":", "parameters_scale", ",", "'lr'", ":", "base_lr", "/", "10.", "}", "\n", "]", "+", "param_groups", "\n", "\n", "def", "is_tensor_in", "(", "tensor", ",", "group", ")", ":", "\n", "    ", "for", "t", "in", "group", ":", "\n", "      ", "if", "t", "is", "tensor", ":", "\n", "        ", "return", "True", "\n", "", "", "return", "False", "\n", "\n", "", "logging", ".", "info", "(", "'#################################### Initialized learning rates'", ")", "\n", "for", "i", ",", "p_group", "in", "enumerate", "(", "all_param_groups", ")", ":", "\n", "    ", "logging", ".", "info", "(", "'  GROUP %d'", ",", "i", ")", "\n", "logging", ".", "info", "(", "'    base_lr = %g'", ",", "p_group", "[", "'lr'", "]", ")", "\n", "for", "p_name", ",", "p_var", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "      ", "if", "is_tensor_in", "(", "p_var", ",", "p_group", "[", "'params'", "]", ")", ":", "\n", "        ", "logging", ".", "info", "(", "'     - %s'", ",", "p_name", ")", "\n", "", "", "", "logging", ".", "info", "(", "'####################################'", ")", "\n", "\n", "ctor", "=", "getattr", "(", "torch", ".", "optim", ",", "name", ")", "\n", "optimizer", "=", "ctor", "(", "\n", "all_param_groups", ",", "lr", "=", "base_lr", ",", "weight_decay", "=", "weight_decay", ",", "**", "(", "kwargs", "or", "dict", "(", ")", ")", ")", "\n", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.make_weight_regularizers": [[113, 143], ["gin.configurable", "logging.info", "logging.info", "val.cpu().detach().clone", "init_model.named_parameters", "init_model.state_dict().items", "logging.info", "re.search", "val.cpu().detach", "logging.info", "KeyError", "regularizers.append", "len", "init_model.state_dict", "torch.sum", "torch.sum", "libtrain.make_weight_regularizers._make_regu"], "function", ["None"], ["", "@", "gin", ".", "configurable", "(", "'weight_regularizers'", ",", "blacklist", "=", "[", "'init_model'", "]", ")", "\n", "def", "make_weight_regularizers", "(", "init_model", ",", "rules", "=", "None", ")", ":", "\n", "  ", "if", "rules", "is", "None", ":", "\n", "    ", "return", "None", "\n", "\n", "# weights at initialization, keep in cpu memory", "\n", "", "init_states", "=", "{", "key", ":", "val", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", "for", "key", ",", "val", "in", "init_model", ".", "state_dict", "(", ")", ".", "items", "(", ")", "}", "\n", "\n", "# we need to define a local function to create", "\n", "# proper closure here, as python for loop rebind", "\n", "# the variable in closure", "\n", "def", "_make_regu", "(", "name", ",", "tensor", ",", "ref_tensor", ",", "regu", ")", ":", "\n", "    ", "if", "regu", "[", "'type'", "]", "==", "'l2_to_0'", ":", "\n", "      ", "logging", ".", "info", "(", "f'  {regu[\"coef\"]}||w||^2 -- {name}'", ")", "\n", "return", "lambda", ":", "regu", "[", "'coef'", "]", "*", "torch", ".", "sum", "(", "tensor", "**", "2", ")", "\n", "", "elif", "regu", "[", "'type'", "]", "==", "'l2_to_w0'", ":", "\n", "      ", "logging", ".", "info", "(", "f'  {regu[\"coef\"]}||w - w0||^2 -- {name}'", ")", "\n", "return", "lambda", ":", "regu", "[", "'coef'", "]", "*", "torch", ".", "sum", "(", "(", "tensor", "-", "ref_tensor", ".", "cuda", "(", ")", ")", "**", "2", ")", "\n", "", "else", ":", "\n", "      ", "raise", "KeyError", "(", "f'Unknown weight regularizer {regu[\"type\"]}'", ")", "\n", "\n", "", "", "regularizers", "=", "[", "]", "\n", "logging", ".", "info", "(", "'### Building weight regularizers...'", ")", "\n", "for", "regex", ",", "regu", "in", "rules", ":", "\n", "    ", "for", "name", ",", "tensor", "in", "init_model", ".", "named_parameters", "(", ")", ":", "\n", "      ", "if", "re", ".", "search", "(", "regex", ",", "name", ")", ":", "\n", "        ", "regularizers", ".", "append", "(", "_make_regu", "(", "name", ",", "tensor", ",", "init_states", "[", "name", "]", ",", "regu", ")", ")", "\n", "\n", "", "", "", "logging", ".", "info", "(", "f'### {len(regularizers)} weight regularizers built.'", ")", "\n", "return", "regularizers", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.eval_weight_regularizers": [[145, 149], ["sum", "torch.tensor", "torch.tensor", "regu"], "function", ["None"], ["", "def", "eval_weight_regularizers", "(", "regularizers", ")", ":", "\n", "  ", "if", "regularizers", "is", "None", ":", "\n", "    ", "return", "torch", ".", "tensor", "(", "0.0", ")", "\n", "", "return", "sum", "(", "[", "regu", "(", ")", "for", "regu", "in", "regularizers", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.save_checkpoint": [[151, 160], ["os.makedirs", "torch.save", "torch.save", "os.path.join", "torch.save", "torch.save", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "ckpt_dir", ")", ":", "\n", "  ", "epoch", "=", "state", "[", "'epoch'", "]", "\n", "fn_ckpt", "=", "f'ckpt-E{epoch:03d}.pth.tar'", "\n", "fn_best", "=", "'ckpt-best.pth.tar'", "\n", "\n", "os", ".", "makedirs", "(", "ckpt_dir", ",", "exist_ok", "=", "True", ")", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "fn_ckpt", ")", ")", "\n", "if", "is_best", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "fn_best", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.imagenet_test_epoch": [[162, 191], ["libtrain.AverageMeter", "libtrain.AverageMeter", "libtrain.AverageMeter", "model.eval", "dict", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "tqdm.tqdm", "input.cuda.cuda", "target.cuda.cuda", "model", "criterion", "libtrain.AverageMeter.update", "libtrain.AverageMeter.update", "libtrain.AverageMeter.update", "time.time", "libtrain.calc_accuracy", "criterion.item", "input.cuda.size", "input.cuda.size", "time.time"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.update", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.update", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.update", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.calc_accuracy"], ["", "", "def", "imagenet_test_epoch", "(", "val_loader", ",", "model", ",", "criterion", ")", ":", "\n", "  ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "tqdm", "(", "val_loader", ",", "disable", "=", "None", ")", ")", ":", "\n", "      ", "input", "=", "input", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", "=", "calc_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "return", "dict", "(", "top1", "=", "top1", ".", "avg", ",", "loss", "=", "losses", ".", "avg", ",", "batch_time", "=", "batch_time", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.chexpert_test_epoch": [[194, 235], ["torch.set_grad_enabled", "torch.set_grad_enabled", "model.eval", "libtrain.AverageMeter", "time.time", "enumerate", "logging.info", "numpy.concatenate", "numpy.concatenate", "numpy.mean", "range", "logging.info", "dict", "tqdm.tqdm", "image.cuda.cuda", "target.cuda.cuda", "model", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "libtrain.AverageMeter.update", "np.concatenate.append", "np.concatenate.append", "numpy.equal", "len", "sklearn.metrics.roc_curve", "sklearn.metrics.auc", "auc_list.append", "logging.info", "tb_writer.add_scalar", "tb_writer.add_scalar", "tb_writer.add_scalar", "torch.nn.functional.binary_cross_entropy_with_logits.item", "image.cuda.size", "torch.sigmoid().cpu().numpy", "torch.sigmoid().cpu().numpy", "target.cuda.cpu().numpy", "numpy.mean", "numpy.mean", "numpy.array", "time.time", "numpy.mean", "numpy.mean", "torch.sigmoid().cpu", "torch.sigmoid().cpu", "target.cuda.cpu", "torch.sigmoid", "torch.sigmoid"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.update"], ["", "def", "chexpert_test_epoch", "(", "epoch", ",", "model", ",", "dataloader", ",", "label_header", ",", "testset_name", "=", "'test'", ",", "tb_writer", "=", "None", ")", ":", "\n", "  ", "torch", ".", "set_grad_enabled", "(", "False", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "sigmoid_all", "=", "[", "]", "\n", "target_all", "=", "[", "]", "\n", "t_start", "=", "time", ".", "time", "(", ")", "\n", "for", "step", ",", "(", "image", ",", "target", ")", "in", "enumerate", "(", "tqdm", "(", "dataloader", ",", "disable", "=", "None", ")", ")", ":", "\n", "    ", "image", "=", "image", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "\n", "output", ",", "target", ",", "reduction", "=", "'mean'", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "\n", "sigmoid_all", ".", "append", "(", "torch", ".", "sigmoid", "(", "output", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "target_all", ".", "append", "(", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "logging", ".", "info", "(", "'E{:03d} Eval-{} Time: {:.3f} secs, Loss : {:06f}'", ".", "format", "(", "\n", "epoch", ",", "testset_name", ",", "time", ".", "time", "(", ")", "-", "t_start", ",", "losses", ".", "avg", ")", ")", "\n", "sigmoid_all", "=", "np", ".", "concatenate", "(", "sigmoid_all", ",", "axis", "=", "0", ")", "\n", "target_all", "=", "np", ".", "concatenate", "(", "target_all", ",", "axis", "=", "0", ")", "\n", "accs", "=", "np", ".", "mean", "(", "np", ".", "equal", "(", "sigmoid_all", ">=", "0.5", ",", "target_all", ")", ",", "axis", "=", "0", ")", "\n", "auc_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "accs", ")", ")", ":", "\n", "    ", "fpr", ",", "tpr", ",", "thresholds", "=", "sklearn", ".", "metrics", ".", "roc_curve", "(", "\n", "target_all", "[", ":", ",", "i", "]", ",", "sigmoid_all", "[", ":", ",", "i", "]", ",", "pos_label", "=", "1", ")", "\n", "auc", "=", "sklearn", ".", "metrics", ".", "auc", "(", "fpr", ",", "tpr", ")", "\n", "auc_list", ".", "append", "(", "auc", ")", "\n", "logging", ".", "info", "(", "f'    [{i:02d}] {label_header[i]:>16s}:: Accuracy: {accs[i]:.4f}, AUC: {auc:.4f}'", ")", "\n", "", "logging", ".", "info", "(", "f'    {testset_name}-Mean Accuracy: {np.mean(accs):.4f}, AUC: {np.mean(auc_list):.4f}'", ")", "\n", "\n", "if", "tb_writer", "is", "not", "None", ":", "\n", "    ", "tb_writer", ".", "add_scalar", "(", "f'eval/{testset_name}_auc'", ",", "np", ".", "mean", "(", "auc_list", ")", ",", "epoch", ")", "\n", "tb_writer", ".", "add_scalar", "(", "f'eval/{testset_name}_loss'", ",", "losses", ".", "avg", ",", "epoch", ")", "\n", "tb_writer", ".", "add_scalar", "(", "f'eval/{testset_name}_acc'", ",", "np", ".", "mean", "(", "accs", ")", ",", "epoch", ")", "\n", "\n", "", "return", "dict", "(", "aucs", "=", "np", ".", "array", "(", "auc_list", ")", ",", "accs", "=", "accs", ",", "loss", "=", "losses", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.calc_accuracy": [[237, 252], ["torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "calc_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "  ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "      ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.chexpert_train.main": [[38, 46], ["libutil.flags.get_argparser", "libutil.flags.get_argparser.parse_args", "configs.Registry.get_config", "libutil.setup.setup", "chexpert_train.run_train"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libutil.flags.get_argparser", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.get_config", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libutil.setup.setup", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.chexpert_train.run_train"], ["def", "main", "(", ")", ":", "\n", "  ", "parser", "=", "libutil", ".", "flags", ".", "get_argparser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "my_cfg", "=", "configs", ".", "Registry", ".", "get_config", "(", "args", ".", "config_key", ")", "\n", "libutil", ".", "setup", ".", "setup", "(", "args", ",", "my_cfg", ")", "\n", "\n", "run_train", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.chexpert_train.get_data": [[48, 78], ["gin.configurable", "easydict.EasyDict", "libdata.chexpert.ImageDataset", "data_config_defaults.update", "libdata.chexpert.ImageDataset", "index_paths.items"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.update"], ["", "@", "gin", ".", "configurable", "(", "'data'", ")", "\n", "def", "get_data", "(", "image_path", "=", "gin", ".", "REQUIRED", ",", "index_paths", "=", "None", ",", "data_config", "=", "None", ")", ":", "\n", "  ", "if", "index_paths", "is", "None", ":", "\n", "    ", "index_paths", "=", "{", "\n", "'train'", ":", "'libdata/chexpert_index/train.0-50k.csv'", ",", "\n", "'dev'", ":", "'libdata/chexpert_index/dev.csv'", ",", "\n", "'test'", ":", "'libdata/chexpert_index/train.50k-100k.csv'", "\n", "}", "\n", "\n", "", "data_config_defaults", "=", "{", "\n", "'width'", ":", "224", ",", "'height'", ":", "224", ",", "'long_side'", ":", "224", ",", "'fix_ratio'", ":", "True", ",", "\n", "'pixel_mean'", ":", "128.0", ",", "'pixel_std'", ":", "64.0", ",", "'use_pixel_std'", ":", "True", ",", "'use_equalizeHist'", ":", "True", ",", "\n", "'use_transforms_type'", ":", "'Aug'", ",", "'gaussian_blur'", ":", "3", ",", "'border_pad'", ":", "'pixel_mean'", ",", "\n", "'batch_weight'", ":", "True", ",", "'enhance_index'", ":", "[", "2", ",", "6", "]", ",", "'enhance_times'", ":", "1", ",", "\n", "'pos_weight'", ":", "[", "1", ",", "1", ",", "1", ",", "1", ",", "1", "]", ",", "'cache_bitmap'", ":", "True", "\n", "}", "\n", "if", "data_config", "is", "not", "None", ":", "\n", "    ", "data_config_defaults", ".", "update", "(", "data_config", ")", "\n", "", "data_config", "=", "easydict", ".", "EasyDict", "(", "data_config_defaults", ")", "\n", "\n", "datasets", "=", "{", "\n", "key", ":", "libdata", ".", "chexpert", ".", "ImageDataset", "(", "image_path", ",", "index_path", ",", "data_config", ",", "\n", "mode", "=", "'train'", "if", "key", "==", "'train'", "else", "'dev'", ")", "\n", "for", "key", ",", "index_path", "in", "index_paths", ".", "items", "(", ")", "\n", "}", "\n", "datasets", "[", "'eval_mode_train'", "]", "=", "libdata", ".", "chexpert", ".", "ImageDataset", "(", "\n", "image_path", ",", "index_paths", "[", "'train'", "]", ",", "data_config", ",", "mode", "=", "'dev'", ")", "\n", "\n", "meta", "=", "{", "'num_diseases'", ":", "5", "}", "\n", "return", "datasets", ",", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.chexpert_train.run_train": [[80, 135], ["gin.configurable", "chexpert_train.get_data", "libmodel.build_model", "libtrain.make_optimizer", "libtrain.make_lr_scheduler", "libtrain.make_weight_regularizers", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "chexpert_train.run_train.eval_and_save_ckpt"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.chexpert_train.get_data", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libmodel.build_model", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.make_optimizer", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.make_lr_scheduler", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.make_weight_regularizers"], ["", "@", "gin", ".", "configurable", "(", "'train'", ",", "blacklist", "=", "[", "'args'", "]", ")", "\n", "def", "run_train", "(", "args", ",", "batch_size", "=", "gin", ".", "REQUIRED", ",", "epochs", "=", "gin", ".", "REQUIRED", ",", "finetune_from", "=", "None", ",", "mixup_alpha", "=", "0.0", ",", "data_workers", "=", "32", ")", ":", "\n", "  ", "loaded_data", ",", "data_meta", "=", "get_data", "(", ")", "\n", "model", "=", "libmodel", ".", "build_model", "(", "num_classes", "=", "data_meta", "[", "'num_diseases'", "]", ")", "\n", "\n", "if", "finetune_from", ":", "\n", "    ", "libtrain", ".", "load_finetune_init", "(", "model", ",", "finetune_from", ")", "\n", "", "else", ":", "\n", "    ", "logging", ".", "info", "(", "'No finetune init weights specified.'", ")", "\n", "\n", "", "optimizer", "=", "libtrain", ".", "make_optimizer", "(", "model", ")", "\n", "lr_scheduler", "=", "libtrain", ".", "make_lr_scheduler", "(", "optimizer", ")", "\n", "\n", "weight_regularizers", "=", "libtrain", ".", "make_weight_regularizers", "(", "model", ")", "\n", "\n", "data_loaders", "=", "{", "\n", "key", ":", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dset", ",", "batch_size", "=", "batch_size", ",", "num_workers", "=", "data_workers", ",", "\n", "shuffle", "=", "(", "key", "==", "'train'", ")", ",", "pin_memory", "=", "(", "key", "==", "'train'", ")", ")", "\n", "for", "key", ",", "dset", "in", "loaded_data", ".", "items", "(", ")", "\n", "}", "\n", "dev_header", "=", "loaded_data", "[", "'dev'", "]", ".", "_label_header", "\n", "data_to_eval", "=", "[", "'dev'", ",", "'test'", ",", "'eval_mode_train'", "]", "\n", "\n", "tb_writer", "=", "torch", ".", "utils", ".", "tensorboard", ".", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "args", ".", "work_dir", ",", "'train_tensorboard'", ")", ")", "\n", "\n", "def", "eval_and_save_ckpt", "(", "epoch", ",", "best_auc", ")", ":", "\n", "    ", "for", "name", "in", "data_to_eval", ":", "\n", "      ", "logging", ".", "info", "(", "f'E{epoch:03d} Evaluating {name}...'", ")", "\n", "results", "=", "libtrain", ".", "chexpert_test_epoch", "(", "epoch", ",", "model", ",", "data_loaders", "[", "name", "]", ",", "dev_header", ",", "\n", "testset_name", "=", "name", ",", "tb_writer", "=", "tb_writer", ")", "\n", "if", "name", "==", "'test'", ":", "\n", "        ", "is_best", "=", "results", "[", "'aucs'", "]", ".", "mean", "(", ")", ">", "best_auc", "\n", "best_auc", "=", "max", "(", "results", "[", "'aucs'", "]", ".", "mean", "(", ")", ",", "best_auc", ")", "\n", "\n", "", "", "libtrain", ".", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "'best_auc'", ":", "best_auc", ",", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "is_best", ",", "ckpt_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "work_dir", ",", "'checkpoints'", ")", ")", "\n", "return", "best_auc", "\n", "\n", "", "best_auc", "=", "eval_and_save_ckpt", "(", "epoch", "=", "0", ",", "best_auc", "=", "-", "float", "(", "'inf'", ")", ")", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "    ", "for", "i_grp", ",", "param_group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "      ", "tb_writer", ".", "add_scalar", "(", "f'learning_rate/group{i_grp}'", ",", "param_group", "[", "'lr'", "]", ",", "epoch", "+", "1", ")", "\n", "\n", "# train for one epoch", "\n", "", "train_epoch", "(", "epoch", ",", "model", ",", "data_loaders", "[", "'train'", "]", ",", "optimizer", ",", "mixup_alpha", ",", "weight_regularizers", ",", "tb_writer", ")", "\n", "\n", "best_auc", "=", "eval_and_save_ckpt", "(", "epoch", "=", "epoch", "+", "1", ",", "best_auc", "=", "best_auc", ")", "\n", "\n", "if", "lr_scheduler", "is", "not", "None", ":", "\n", "      ", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "tb_writer", ".", "flush", "(", ")", "\n", "\n", "", "tb_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.chexpert_train.train_epoch": [[137, 190], ["torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "model.train", "time.time", "libtrain.AverageMeter", "libtrain.AverageMeter", "libtrain.AverageMeter", "tqdm.tqdm", "enumerate", "time.time", "logging.info", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "image.cuda.cuda", "target.cuda.cuda", "libtrain.eval_weight_regularizers", "libtrain.AverageMeter.update", "libtrain.AverageMeter.update", "optimizer.zero_grad", "torch.nn.functional.binary_cross_entropy_with_logits.backward", "optimizer.step", "tqdm.tqdm.set_description", "tb_writer.add_scalar", "tb_writer.add_scalar", "tb_writer.add_scalar", "libutil.mixup.mixup_data", "model", "libutil.mixup.mixup_criterion", "libutil.mixup.mixup_criterion.", "model", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits", "torch.nn.functional.binary_cross_entropy_with_logits.item", "image.cuda.size", "libtrain.eval_weight_regularizers.item", "image.cuda.size", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pred.eq().float", "pred.eq().float.mean", "libtrain.AverageMeter.update", "lam.view", "correct.mean.mean().item", "image.cuda.size", "pred.eq", "correct.mean.mean"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.eval_weight_regularizers", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.update", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.update", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libutil.mixup.mixup_data", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libutil.mixup.mixup_criterion", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libtrain.AverageMeter.update"], ["", "def", "train_epoch", "(", "epoch", ",", "model", ",", "dataloader", ",", "optimizer", ",", "mixup_alpha", ",", "weight_regularizers", ",", "tb_writer", "=", "None", ")", ":", "\n", "  ", "torch", ".", "set_grad_enabled", "(", "True", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "time_now", "=", "time", ".", "time", "(", ")", "\n", "losses", "=", "libtrain", ".", "AverageMeter", "(", ")", "\n", "weight_regu_losses", "=", "libtrain", ".", "AverageMeter", "(", ")", "\n", "accs", "=", "libtrain", ".", "AverageMeter", "(", ")", "\n", "\n", "def", "mixup_bceloss", "(", "pred", ",", "target", ",", "lam", ")", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred", ",", "target", "*", "lam", ".", "view", "(", "(", "-", "1", ",", "1", ")", ")", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "the_tqdm", "=", "tqdm", "(", "dataloader", ",", "disable", "=", "None", ",", "desc", "=", "f'Train E{epoch+1:03d}'", ")", "\n", "for", "step", ",", "(", "image", ",", "target", ")", "in", "enumerate", "(", "the_tqdm", ")", ":", "\n", "    ", "image", "=", "image", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "if", "mixup_alpha", ">", "0.0", ":", "\n", "# using mixup", "\n", "      ", "inputs", ",", "targets_a", ",", "targets_b", ",", "lam", "=", "libutil", ".", "mixup", ".", "mixup_data", "(", "image", ",", "target", ",", "mixup_alpha", ",", "use_cuda", "=", "True", ")", "\n", "output", "=", "model", "(", "inputs", ")", "\n", "loss_func", "=", "libutil", ".", "mixup", ".", "mixup_criterion", "(", "targets_a", ",", "targets_b", ",", "lam", ")", "\n", "loss", "=", "loss_func", "(", "mixup_bceloss", ",", "output", ")", "\n", "", "else", ":", "\n", "      ", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "binary_cross_entropy_with_logits", "(", "\n", "output", ",", "target", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "weight_regu_loss", "=", "libtrain", ".", "eval_weight_regularizers", "(", "weight_regularizers", ")", "\n", "loss", "+=", "weight_regu_loss", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "weight_regu_losses", ".", "update", "(", "weight_regu_loss", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "pred", "=", "output", ">=", "0", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ")", ".", "float", "(", ")", "\n", "\n", "avg_acc", "=", "correct", ".", "mean", "(", "1", ")", "\n", "accs", ".", "update", "(", "avg_acc", ".", "mean", "(", "0", ")", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "the_tqdm", ".", "set_description", "(", "f'Train E{epoch+1:03d} Acc={accs.avg:.3f} Loss={losses.avg:.4f} WReguL={weight_regu_losses.avg:.4f}'", ")", "\n", "\n", "", "time_finish", "=", "time", ".", "time", "(", ")", "\n", "logging", ".", "info", "(", "f'E{epoch+1:03d} Training finished in {time_finish-time_now:.3f} secs, Acc={accs.avg:.3f}, Loss={losses.avg:.4f}'", ")", "\n", "if", "tb_writer", "is", "not", "None", ":", "\n", "    ", "tb_writer", ".", "add_scalar", "(", "'train/loss'", ",", "losses", ".", "avg", ",", "epoch", "+", "1", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'train/weight_regu_loss'", ",", "weight_regu_losses", ".", "avg", ",", "epoch", "+", "1", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'train/acc'", ",", "accs", ".", "avg", ",", "epoch", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.None.libmodel.build_model": [[22, 40], ["gin.configurable", "arch.startswith", "ctor", "torch.nn.DataParallel().cuda", "dict", "arch.split", "torch.nn.DataParallel"], "function", ["None"], ["@", "gin", ".", "configurable", "(", "'model'", ",", "blacklist", "=", "[", "'num_classes'", "]", ")", "\n", "def", "build_model", "(", "arch", "=", "gin", ".", "REQUIRED", ",", "num_classes", "=", "None", ",", "kwargs", "=", "None", ")", ":", "\n", "  ", "assert", "num_classes", "is", "not", "None", "\n", "\n", "# create model", "\n", "if", "arch", ".", "startswith", "(", "'torchvision/'", ")", ":", "\n", "    ", "arch_name", "=", "arch", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "ctor", "=", "tv_models", ".", "__dict__", "[", "arch_name", "]", "\n", "", "else", ":", "\n", "    ", "ctor", "=", "libarch", ".", "__dict__", "[", "arch", "]", "\n", "\n", "", "if", "kwargs", "is", "None", ":", "\n", "    ", "kwargs", "=", "dict", "(", ")", "\n", "", "kwargs", "[", "'num_classes'", "]", "=", "num_classes", "\n", "\n", "model", "=", "ctor", "(", "**", "kwargs", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.ImageDataset.__init__": [[50, 115], ["print", "len", "open", "f.readline().strip().split", "chexpert.ImageDataset._build_bitmap_cache", "line.strip().split", "os.path.join", "enumerate", "list", "chexpert.ImageDataset._image_paths.append", "chexpert.ImageDataset._labels.append", "f.readline().strip", "os.path.expanduser", "map", "range", "line.strip", "list.append", "chexpert.ImageDataset._image_paths.append", "chexpert.ImageDataset._labels.append", "f.readline", "chexpert.ImageDataset.dict[].get", "list.append", "chexpert.ImageDataset.dict[].get", "chexpert.ImageDataset.cfg.enhance_index.count", "chexpert.ImageDataset.dict[].get", "chexpert.ImageDataset.dict[].get", "chexpert.ImageDataset.cfg.enhance_index.count"], "methods", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.ImageDataset._build_bitmap_cache"], ["    ", "def", "__init__", "(", "self", ",", "data_path", ",", "label_path", ",", "cfg", ",", "mode", "=", "'train'", ",", "subsample_size", "=", "-", "1", ",", "subsample_seed", "=", "1234", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "_label_header", "=", "None", "\n", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "_image_paths", "=", "[", "]", "\n", "self", ".", "_labels", "=", "[", "]", "\n", "self", ".", "_mode", "=", "mode", "\n", "\n", "self", ".", "dict", "=", "[", "{", "'1.0'", ":", "'1'", ",", "''", ":", "'0'", ",", "'0.0'", ":", "'0'", ",", "'-1.0'", ":", "'0'", "}", ",", "\n", "{", "'1.0'", ":", "'1'", ",", "''", ":", "'0'", ",", "'0.0'", ":", "'0'", ",", "'-1.0'", ":", "'1'", "}", ",", "]", "\n", "print", "(", "f'ImageDataset constructed with data_path = {self.data_path}'", ")", "\n", "with", "open", "(", "label_path", ")", "as", "f", ":", "\n", "            ", "header", "=", "f", ".", "readline", "(", ")", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "','", ")", "\n", "self", ".", "_label_header", "=", "[", "\n", "header", "[", "7", "]", ",", "\n", "header", "[", "10", "]", ",", "\n", "header", "[", "11", "]", ",", "\n", "header", "[", "13", "]", ",", "\n", "header", "[", "15", "]", "]", "\n", "for", "line", "in", "f", ":", "\n", "                ", "labels", "=", "[", "]", "\n", "fields", "=", "line", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "','", ")", "\n", "image_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "os", ".", "path", ".", "expanduser", "(", "fields", "[", "0", "]", ")", ")", "\n", "flg_enhance", "=", "False", "\n", "for", "index", ",", "value", "in", "enumerate", "(", "fields", "[", "5", ":", "]", ")", ":", "\n", "                    ", "if", "index", "==", "5", "or", "index", "==", "8", ":", "\n", "                        ", "labels", ".", "append", "(", "self", ".", "dict", "[", "1", "]", ".", "get", "(", "value", ")", ")", "\n", "if", "self", ".", "dict", "[", "1", "]", ".", "get", "(", "\n", "value", ")", "==", "'1'", "and", "self", ".", "cfg", ".", "enhance_index", ".", "count", "(", "index", ")", ">", "0", ":", "\n", "                            ", "flg_enhance", "=", "True", "\n", "", "", "elif", "index", "==", "2", "or", "index", "==", "6", "or", "index", "==", "10", ":", "\n", "                        ", "labels", ".", "append", "(", "self", ".", "dict", "[", "0", "]", ".", "get", "(", "value", ")", ")", "\n", "if", "self", ".", "dict", "[", "0", "]", ".", "get", "(", "\n", "value", ")", "==", "'1'", "and", "self", ".", "cfg", ".", "enhance_index", ".", "count", "(", "index", ")", ">", "0", ":", "\n", "                            ", "flg_enhance", "=", "True", "\n", "# labels = ([self.dict.get(n, n) for n in fields[5:]])", "\n", "", "", "", "labels", "=", "list", "(", "map", "(", "int", ",", "labels", ")", ")", "\n", "self", ".", "_image_paths", ".", "append", "(", "image_path", ")", "\n", "self", ".", "_labels", ".", "append", "(", "labels", ")", "\n", "if", "flg_enhance", "and", "self", ".", "_mode", "==", "'train'", ":", "\n", "                    ", "for", "i", "in", "range", "(", "self", ".", "cfg", ".", "enhance_times", ")", ":", "\n", "                        ", "self", ".", "_image_paths", ".", "append", "(", "image_path", ")", "\n", "self", ".", "_labels", ".", "append", "(", "labels", ")", "\n", "", "", "", "", "self", ".", "_num_image", "=", "len", "(", "self", ".", "_image_paths", ")", "\n", "\n", "# NOTE(2020.04.30) we started using explicit config of data index, so disabling this dynamic subsampling", "\n", "# features to avoid confusion.", "\n", "assert", "subsample_size", "==", "-", "1", "\n", "# if subsample_size > 0:", "\n", "#   if subsample_size > self._num_image:", "\n", "#     raise AssertionError(f'subsample_size ({subsample_size}) should be less than {self._num_image}')", "\n", "\n", "#   rng = np.random.RandomState(seed=subsample_seed)", "\n", "#   idx = rng.choice(self._num_image, size=subsample_size, replace=False)", "\n", "\n", "#   self._image_paths = [self._image_paths[i] for i in idx]", "\n", "#   self._labels = [self._labels[i] for i in idx]", "\n", "#   self._num_image = len(self._labels)", "\n", "\n", "if", "cfg", ".", "cache_bitmap", ":", "\n", "            ", "self", ".", "_bitmap_cache", "=", "self", ".", "_build_bitmap_cache", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_bitmap_cache", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.ImageDataset.__len__": [[116, 118], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_image", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.ImageDataset._border_pad": [[119, 145], ["numpy.pad", "numpy.pad", "numpy.pad"], "methods", ["None"], ["", "def", "_border_pad", "(", "self", ",", "image", ")", ":", "\n", "        ", "h", ",", "w", ",", "c", "=", "image", ".", "shape", "\n", "\n", "if", "self", ".", "cfg", ".", "border_pad", "==", "'zero'", ":", "\n", "            ", "image", "=", "np", ".", "pad", "(", "\n", "image", ",", "\n", "(", "(", "0", ",", "self", ".", "cfg", ".", "long_side", "-", "h", ")", ",", "\n", "(", "0", ",", "self", ".", "cfg", ".", "long_side", "-", "w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\n", "mode", "=", "'constant'", ",", "constant_values", "=", "0.0", "\n", ")", "\n", "", "elif", "self", ".", "cfg", ".", "border_pad", "==", "'pixel_mean'", ":", "\n", "            ", "image", "=", "np", ".", "pad", "(", "\n", "image", ",", "\n", "(", "(", "0", ",", "self", ".", "cfg", ".", "long_side", "-", "h", ")", ",", "\n", "(", "0", ",", "self", ".", "cfg", ".", "long_side", "-", "w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\n", "mode", "=", "'constant'", ",", "constant_values", "=", "self", ".", "cfg", ".", "pixel_mean", "\n", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "np", ".", "pad", "(", "\n", "image", ",", "\n", "(", "(", "0", ",", "self", ".", "cfg", ".", "long_side", "-", "h", ")", ",", "\n", "(", "0", ",", "self", ".", "cfg", ".", "long_side", "-", "w", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\n", "mode", "=", "self", ".", "cfg", ".", "border_pad", "\n", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.ImageDataset._fix_ratio": [[146, 164], ["cv2.resize", "chexpert.ImageDataset._border_pad", "round", "round"], "methods", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.ImageDataset._border_pad"], ["", "def", "_fix_ratio", "(", "self", ",", "image", ")", ":", "\n", "        ", "h", ",", "w", ",", "c", "=", "image", ".", "shape", "\n", "\n", "if", "h", ">=", "w", ":", "\n", "            ", "ratio", "=", "h", "*", "1.0", "/", "w", "\n", "h_", "=", "self", ".", "cfg", ".", "long_side", "\n", "w_", "=", "round", "(", "h_", "/", "ratio", ")", "\n", "", "else", ":", "\n", "            ", "ratio", "=", "w", "*", "1.0", "/", "h", "\n", "w_", "=", "self", ".", "cfg", ".", "long_side", "\n", "h_", "=", "round", "(", "w_", "/", "ratio", ")", "\n", "\n", "", "image", "=", "cv2", ".", "resize", "(", "image", ",", "dsize", "=", "(", "w_", ",", "h_", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "\n", "image", "=", "self", ".", "_border_pad", "(", "image", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.ImageDataset._build_bitmap_cache": [[165, 168], ["print", "chexpert.ImageDataset._load_image", "range"], "methods", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.ImageDataset._load_image"], ["", "def", "_build_bitmap_cache", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Pre-loading all images...(might take a while)'", ")", "\n", "return", "[", "self", ".", "_load_image", "(", "idx", ")", "for", "idx", "in", "range", "(", "self", ".", "_num_image", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.ImageDataset._load_image": [[169, 173], ["cv2.imread", "PIL.Image.fromarray"], "methods", ["None"], ["", "def", "_load_image", "(", "self", ",", "idx", ")", ":", "\n", "        ", "image", "=", "cv2", ".", "imread", "(", "self", ".", "_image_paths", "[", "idx", "]", ",", "0", ")", "\n", "image", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.ImageDataset.__getitem__": [[174, 215], ["numpy.array", "cv2.cvtColor().astype", "cv2.GaussianBlur.transpose", "numpy.array().astype", "chexpert.ImageDataset._load_image", "chexpert.GetTransforms", "cv2.equalizeHist", "chexpert.ImageDataset._fix_ratio", "cv2.resize", "cv2.GaussianBlur", "cv2.cvtColor", "numpy.array", "Exception"], "methods", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.ImageDataset._load_image", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.GetTransforms", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.ImageDataset._fix_ratio"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "_bitmap_cache", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "_bitmap_cache", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "image", "=", "self", ".", "_load_image", "(", "idx", ")", "\n", "\n", "", "if", "self", ".", "_mode", "==", "'train'", ":", "\n", "            ", "image", "=", "GetTransforms", "(", "image", ",", "type", "=", "self", ".", "cfg", ".", "use_transforms_type", ")", "\n", "", "image", "=", "np", ".", "array", "(", "image", ")", "\n", "if", "self", ".", "cfg", ".", "use_equalizeHist", ":", "\n", "            ", "image", "=", "cv2", ".", "equalizeHist", "(", "image", ")", "\n", "", "image", "=", "cv2", ".", "cvtColor", "(", "image", ",", "cv2", ".", "COLOR_GRAY2RGB", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "cfg", ".", "fix_ratio", ":", "\n", "            ", "image", "=", "self", ".", "_fix_ratio", "(", "image", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "cv2", ".", "resize", "(", "image", ",", "dsize", "=", "(", "self", ".", "cfg", ".", "width", ",", "self", ".", "cfg", ".", "height", ")", ",", "\n", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "\n", "", "if", "self", ".", "cfg", ".", "gaussian_blur", ">", "0", ":", "\n", "            ", "image", "=", "cv2", ".", "GaussianBlur", "(", "image", ",", "(", "self", ".", "cfg", ".", "gaussian_blur", ",", "\n", "self", ".", "cfg", ".", "gaussian_blur", ")", ",", "0", ")", "\n", "# normalization", "\n", "", "image", "-=", "self", ".", "cfg", ".", "pixel_mean", "\n", "# vgg and resnet do not use pixel_std, densenet and inception use.", "\n", "if", "self", ".", "cfg", ".", "use_pixel_std", ":", "\n", "            ", "image", "/=", "self", ".", "cfg", ".", "pixel_std", "\n", "# normal image tensor :  H x W x C", "\n", "# torch image tensor :   C X H X W", "\n", "", "image", "=", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "labels", "=", "np", ".", "array", "(", "self", ".", "_labels", "[", "idx", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "path", "=", "self", ".", "_image_paths", "[", "idx", "]", "\n", "\n", "if", "self", ".", "_mode", "==", "'train'", "or", "self", ".", "_mode", "==", "'dev'", ":", "\n", "            ", "return", "(", "image", ",", "labels", ")", "\n", "", "elif", "self", ".", "_mode", "==", "'test'", ":", "\n", "            ", "return", "(", "image", ",", "path", ")", "\n", "", "elif", "self", ".", "_mode", "==", "'heatmap'", ":", "\n", "            ", "return", "(", "image", ",", "path", ",", "labels", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'Unknown mode : {}'", ".", "format", "(", "self", ".", "_mode", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.TransCommon": [[15, 19], ["cv2.equalizeHist", "cv2.GaussianBlur"], "function", ["None"], ["def", "TransCommon", "(", "image", ")", ":", "\n", "    ", "image", "=", "cv2", ".", "equalizeHist", "(", "image", ")", "\n", "image", "=", "cv2", ".", "GaussianBlur", "(", "image", ",", "(", "3", ",", "3", ")", ",", "0", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.TransAug": [[21, 28], ["torchvision.Compose", "tfs.Compose.", "torchvision.RandomAffine"], "function", ["None"], ["", "def", "TransAug", "(", "image", ")", ":", "\n", "    ", "img_aug", "=", "tfs", ".", "Compose", "(", "[", "\n", "tfs", ".", "RandomAffine", "(", "degrees", "=", "(", "-", "15", ",", "15", ")", ",", "translate", "=", "(", "0.05", ",", "0.05", ")", ",", "\n", "scale", "=", "(", "0.95", ",", "1.05", ")", ",", "fillcolor", "=", "128", ")", "\n", "]", ")", "\n", "image", "=", "img_aug", "(", "image", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.GetTransforms": [[30, 47], ["Exception", "type.strip", "chexpert.TransCommon", "type.strip", "type.strip", "chexpert.TransAug", "Exception"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.TransCommon", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_data.chexpert.TransAug"], ["", "def", "GetTransforms", "(", "image", ",", "target", "=", "None", ",", "type", "=", "'common'", ")", ":", "\n", "# taget is not support now", "\n", "    ", "if", "target", "is", "not", "None", ":", "\n", "        ", "raise", "Exception", "(", "\n", "'Target is not support now ! '", ")", "\n", "# get type", "\n", "", "if", "type", ".", "strip", "(", ")", "==", "'Common'", ":", "\n", "        ", "image", "=", "TransCommon", "(", "image", ")", "\n", "return", "image", "\n", "", "elif", "type", ".", "strip", "(", ")", "==", "'None'", ":", "\n", "        ", "return", "image", "\n", "", "elif", "type", ".", "strip", "(", ")", "==", "'Aug'", ":", "\n", "        ", "image", "=", "TransAug", "(", "image", ")", "\n", "return", "image", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\n", "'Unknown transforms_type : '", ".", "format", "(", "type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet.__init__": [[29, 62], ["torchvision.datasets.VisionDataset.__init__", "domain_net.DomainNet._find_classes", "targets.astype", "domain_net.DomainNet.download", "domain_net.DomainNet._check_exists", "RuntimeError", "domain_net.DomainNet.read_file", "domain_net.DomainNet.read_file", "logging.info", "len", "numpy.random.RandomState", "numpy.random.RandomState.choice", "len"], "methods", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libdata.utils.RandomBlockShuffle.__init__", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet._find_classes", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet.download", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet._check_exists", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet.read_file", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet.read_file"], ["def", "__init__", "(", "self", ",", "root", ",", "domain", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", ",", "\n", "subsample", "=", "None", ")", ":", "\n", "    ", "self", ".", "_root", "=", "root", "\n", "self", ".", "domain", "=", "domain", "\n", "\n", "if", "download", ":", "\n", "      ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_exists", "(", ")", ":", "\n", "      ", "raise", "RuntimeError", "(", "'Dataset not found.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "\n", "", "super", "(", "DomainNet", ",", "self", ")", ".", "__init__", "(", "root", "=", "self", ".", "DomainNet_folder", "+", "'/'", "+", "self", ".", "domain", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n", "self", ".", "classes", ",", "self", ".", "class_to_idx", ",", "self", ".", "idx_to_class", "=", "self", ".", "_find_classes", "(", "self", ".", "root", ")", "\n", "\n", "if", "train", ":", "\n", "      ", "self", ".", "paths", ",", "targets", "=", "self", ".", "read_file", "(", "self", ".", "train_file_local", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "paths", ",", "targets", "=", "self", ".", "read_file", "(", "self", ".", "test_file_local", ")", "\n", "\n", "", "if", "subsample", "is", "not", "None", ":", "\n", "      ", "logging", ".", "info", "(", "'# Subsampling dataset according to %s...'", ",", "subsample", ")", "\n", "\n", "n_sample", "=", "subsample", "[", "'size'", "]", "\n", "if", "n_sample", "<", "len", "(", "targets", ")", ":", "\n", "        ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "subsample", "[", "'seed'", "]", ")", "\n", "subset_idx", "=", "rng", ".", "choice", "(", "len", "(", "targets", ")", ",", "size", "=", "n_sample", ",", "replace", "=", "False", ")", "\n", "self", ".", "paths", "=", "self", ".", "paths", "[", "subset_idx", "]", "\n", "targets", "=", "targets", "[", "subset_idx", "]", "\n", "\n", "", "", "self", ".", "targets", "=", "targets", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet.read_file": [[63, 73], ["open", "f.readlines", "enumerate", "numpy.array", "numpy.array", "line.strip().split", "paths.append", "targets.append", "int", "line.strip"], "methods", ["None"], ["", "def", "read_file", "(", "self", ",", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ")", "as", "f", ":", "\n", "      ", "doc", "=", "f", ".", "readlines", "(", ")", "\n", "paths", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "doc", ")", ":", "\n", "        ", "path", ",", "target", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "targets", ".", "append", "(", "int", "(", "target", ")", ")", "\n", "", "", "return", "np", ".", "array", "(", "paths", ")", ",", "np", ".", "array", "(", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet.__getitem__": [[75, 99], ["PIL.Image.open", "domain_net.DomainNet.transform", "domain_net.DomainNet.target_transform", "os.path.join", "ValueError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      index (int): Index\n\n    Returns:\n      tuple: (image, target) where target is index of the target class.\n    \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "paths", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "try", ":", "\n", "      ", "img", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "DomainNet_folder", ",", "path", ")", ")", "\n", "", "except", ":", "\n", "      ", "raise", "ValueError", "(", "f'Tried to open image {path}'", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "     ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "     ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet._find_classes": [[100, 115], ["classes.sort", "os.scandir", "d.is_dir", "range", "range", "len", "len"], "methods", ["None"], ["", "def", "_find_classes", "(", "self", ",", "dir", ")", ":", "\n", "    ", "\"\"\"\n    Finds the class folders in a dataset.\n    Args:\n        dir (string): Root directory path.\n    Returns:\n        tuple: (classes, class_to_idx) where classes are relative to (dir), and class_to_idx is a dictionary.\n    Ensures:\n        No class is a subdirectory of another.\n    \"\"\"", "\n", "classes", "=", "[", "d", ".", "name", "for", "d", "in", "os", ".", "scandir", "(", "dir", ")", "if", "d", ".", "is_dir", "(", ")", "]", "\n", "classes", ".", "sort", "(", ")", "\n", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "idx_to_class", "=", "{", "i", ":", "classes", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "return", "classes", ",", "class_to_idx", ",", "idx_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet.__len__": [[116, 118], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "len", "(", "self", ".", "paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet.DomainNet_folder": [[119, 122], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "DomainNet_folder", "(", "self", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "_root", ",", "self", ".", "__class__", ".", "__name__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet.train_file_url": [[123, 126], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "train_file_url", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_file_base_url", "+", "self", ".", "domain", "+", "'_train.txt'", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet.test_file_url": [[127, 130], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "test_file_url", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_file_base_url", "+", "self", ".", "domain", "+", "'_test.txt'", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet.train_file_local": [[131, 134], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "train_file_local", "(", "self", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "DomainNet_folder", ",", "self", ".", "domain", "+", "'_train.txt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet.test_file_local": [[135, 138], ["os.path.join"], "methods", ["None"], ["", "@", "property", "\n", "def", "test_file_local", "(", "self", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "DomainNet_folder", ",", "self", ".", "domain", "+", "'_test.txt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet._check_exists": [[139, 142], ["os.path.exists", "os.path.exists", "os.path.exists", "os.path.join"], "methods", ["None"], ["", "def", "_check_exists", "(", "self", ")", ":", "\n", "    ", "return", "(", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "DomainNet_folder", ",", "self", ".", "domain", ")", ")", "and", "\n", "os", ".", "path", ".", "exists", "(", "self", ".", "train_file_local", ")", "and", "os", ".", "path", ".", "exists", "(", "self", ".", "test_file_local", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet.download": [[143, 167], ["domain_net.DomainNet._check_exists", "os.makedirs", "os.path.exists", "print", "torchvision.datasets.utils.download_and_extract_archive", "print", "os.path.exists", "print", "wget.download", "os.path.exists", "print", "wget.download", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet._check_exists", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet.download", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.domainnet_data.domain_net.DomainNet.download"], ["", "def", "download", "(", "self", ")", ":", "\n", "    ", "\"\"\"Download the tar.gz data file if it doesn't exist. \"\"\"", "\n", "\n", "if", "self", ".", "_check_exists", "(", ")", ":", "\n", "      ", "return", "\n", "\n", "", "os", ".", "makedirs", "(", "self", ".", "DomainNet_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Download and extract zip file", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "DomainNet_folder", ",", "self", ".", "domain", ")", ")", ":", "\n", "      ", "url", "=", "self", ".", "_domain_urls", "[", "self", ".", "domain", "]", "\n", "filename", "=", "self", ".", "domain", "+", "'.zip'", "\n", "print", "(", "f\"Downloading {filename}...\"", ")", "\n", "download_and_extract_archive", "(", "url", ",", "download_root", "=", "self", ".", "DomainNet_folder", ",", "filename", "=", "filename", ")", "\n", "print", "(", "f\"Download of {filename} complete\"", ")", "\n", "\n", "# Download test and train lists", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "train_file_local", ")", ":", "\n", "      ", "print", "(", "f\"Downloading {self.train_file_url}\"", ")", "\n", "wget", ".", "download", "(", "self", ".", "train_file_url", ",", "self", ".", "train_file_local", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "test_file_local", ")", ":", "\n", "      ", "print", "(", "f\"Downloading {self.test_file_url}\"", ")", "\n", "wget", ".", "download", "(", "self", ".", "test_file_url", ",", "self", ".", "test_file_local", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.FixupBasicBlock.__init__": [[23, 36], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "fixup_resnet_imagenet.conv3x3", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.Parameter", "torch.Parameter", "fixup_resnet_imagenet.conv3x3", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libdata.utils.RandomBlockShuffle.__init__", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.conv3x3", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "FixupBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "bias1a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bias1b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "bias2a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ")", "\n", "self", ".", "bias2b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.FixupBasicBlock.forward": [[37, 53], ["fixup_resnet_imagenet.FixupBasicBlock.conv1", "fixup_resnet_imagenet.FixupBasicBlock.relu", "fixup_resnet_imagenet.FixupBasicBlock.conv2", "fixup_resnet_imagenet.FixupBasicBlock.relu", "fixup_resnet_imagenet.FixupBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", "+", "self", ".", "bias1a", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", "+", "self", ".", "bias1b", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", "+", "self", ".", "bias2a", ")", "\n", "out", "=", "out", "*", "self", ".", "scale", "+", "self", ".", "bias2b", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", "+", "self", ".", "bias1a", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.FixupBottleneck.__init__": [[58, 74], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "fixup_resnet_imagenet.conv1x1", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "fixup_resnet_imagenet.conv3x3", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "fixup_resnet_imagenet.conv1x1", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libdata.utils.RandomBlockShuffle.__init__", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.conv1x1", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.conv3x3", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "FixupBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "bias1a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bias1b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "bias2a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bias2b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "bias3a", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", ")", "\n", "self", ".", "bias3b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.FixupBottleneck.forward": [[75, 94], ["fixup_resnet_imagenet.FixupBottleneck.conv1", "fixup_resnet_imagenet.FixupBottleneck.relu", "fixup_resnet_imagenet.FixupBottleneck.conv2", "fixup_resnet_imagenet.FixupBottleneck.relu", "fixup_resnet_imagenet.FixupBottleneck.conv3", "fixup_resnet_imagenet.FixupBottleneck.relu", "fixup_resnet_imagenet.FixupBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", "+", "self", ".", "bias1a", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", "+", "self", ".", "bias1b", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", "+", "self", ".", "bias2a", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", "+", "self", ".", "bias2b", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", "+", "self", ".", "bias3a", ")", "\n", "out", "=", "out", "*", "self", ".", "scale", "+", "self", ".", "bias3b", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", "+", "self", ".", "bias1a", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.FixupResNet.__init__": [[98, 130], ["torch.Module.__init__", "sum", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "fixup_resnet_imagenet.FixupResNet._make_layer", "fixup_resnet_imagenet.FixupResNet._make_layer", "fixup_resnet_imagenet.FixupResNet._make_layer", "fixup_resnet_imagenet.FixupResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "fixup_resnet_imagenet.FixupResNet.modules", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.normal_", "torch.init.normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.prod", "numpy.prod", "numpy.prod", "numpy.prod", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libdata.utils.RandomBlockShuffle.__init__", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.FixupResNet._make_layer", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.FixupResNet._make_layer", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.FixupResNet._make_layer", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.FixupResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_fc_init", "=", "True", ")", ":", "\n", "        ", "super", "(", "FixupResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_layers", "=", "sum", "(", "layers", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bias1", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "bias2", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "FixupBasicBlock", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "conv1", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2", "/", "(", "m", ".", "conv1", ".", "weight", ".", "shape", "[", "0", "]", "*", "np", ".", "prod", "(", "m", ".", "conv1", ".", "weight", ".", "shape", "[", "2", ":", "]", ")", ")", ")", "*", "self", ".", "num_layers", "**", "(", "-", "0.5", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv2", ".", "weight", ",", "0", ")", "\n", "if", "m", ".", "downsample", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "downsample", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2", "/", "(", "m", ".", "downsample", ".", "weight", ".", "shape", "[", "0", "]", "*", "np", ".", "prod", "(", "m", ".", "downsample", ".", "weight", ".", "shape", "[", "2", ":", "]", ")", ")", ")", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "FixupBottleneck", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "conv1", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2", "/", "(", "m", ".", "conv1", ".", "weight", ".", "shape", "[", "0", "]", "*", "np", ".", "prod", "(", "m", ".", "conv1", ".", "weight", ".", "shape", "[", "2", ":", "]", ")", ")", ")", "*", "self", ".", "num_layers", "**", "(", "-", "0.25", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "conv2", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2", "/", "(", "m", ".", "conv2", ".", "weight", ".", "shape", "[", "0", "]", "*", "np", ".", "prod", "(", "m", ".", "conv2", ".", "weight", ".", "shape", "[", "2", ":", "]", ")", ")", ")", "*", "self", ".", "num_layers", "**", "(", "-", "0.25", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "conv3", ".", "weight", ",", "0", ")", "\n", "if", "m", ".", "downsample", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "downsample", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "np", ".", "sqrt", "(", "2", "/", "(", "m", ".", "downsample", ".", "weight", ".", "shape", "[", "0", "]", "*", "np", ".", "prod", "(", "m", ".", "downsample", ".", "weight", ".", "shape", "[", "2", ":", "]", ")", ")", ")", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "zero_fc_init", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.FixupResNet._make_layer": [[131, 143], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "fixup_resnet_imagenet.conv1x1", "block", "layers.append", "block"], "methods", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.FixupResNet.forward": [[144, 159], ["fixup_resnet_imagenet.FixupResNet.conv1", "fixup_resnet_imagenet.FixupResNet.relu", "fixup_resnet_imagenet.FixupResNet.maxpool", "fixup_resnet_imagenet.FixupResNet.layer1", "fixup_resnet_imagenet.FixupResNet.layer2", "fixup_resnet_imagenet.FixupResNet.layer3", "fixup_resnet_imagenet.FixupResNet.layer4", "fixup_resnet_imagenet.FixupResNet.avgpool", "fixup_resnet_imagenet.FixupResNet.view", "fixup_resnet_imagenet.FixupResNet.fc", "fixup_resnet_imagenet.FixupResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", "+", "self", ".", "bias1", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", "+", "self", ".", "bias2", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.conv3x3": [[9, 13], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.conv1x1": [[15, 18], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.fixup_resnet18": [[161, 167], ["fixup_resnet_imagenet.FixupResNet"], "function", ["None"], ["", "", "def", "fixup_resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-18 model.\n\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.fixup_resnet34": [[169, 175], ["fixup_resnet_imagenet.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-34 model.\n\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.fixup_resnet50": [[177, 183], ["fixup_resnet_imagenet.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-50 model.\n\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.fixup_resnet101": [[185, 191], ["fixup_resnet_imagenet.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-101 model.\n\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.fixup_resnet.fixup_resnet_imagenet.fixup_resnet152": [[193, 199], ["fixup_resnet_imagenet.FixupResNet"], "function", ["None"], ["", "def", "fixup_resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a Fixup-ResNet-152 model.\n\n    \"\"\"", "\n", "model", "=", "FixupResNet", "(", "FixupBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libdata.utils.RandomPixelShuffle.__init__": [[21, 27], ["numpy.random.RandomState", "numpy.prod", "torch.from_numpy", "numpy.random.RandomState.permutation"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "image_chw", ",", "seed", ")", ":", "\n", "    ", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "seed", ")", "\n", "total_dim", "=", "np", ".", "prod", "(", "image_chw", ")", "\n", "\n", "self", ".", "image_chw", "=", "image_chw", "\n", "self", ".", "perm", "=", "torch", ".", "from_numpy", "(", "rng", ".", "permutation", "(", "total_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libdata.utils.RandomPixelShuffle.__call__": [[28, 30], ["torch.reshape", "torch.flatten"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "    ", "return", "torch", ".", "reshape", "(", "torch", ".", "flatten", "(", "tensor", ")", "[", "self", ".", "perm", "]", ",", "self", ".", "image_chw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libdata.utils.RandomBlockShuffle.__init__": [[35, 47], ["numpy.random.RandomState", "torch.from_numpy", "torch.nn.Unfold", "torch.nn.Fold", "KeyError", "numpy.random.RandomState.permutation"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "image_size", ",", "block_size", ",", "seed", ")", ":", "\n", "    ", "if", "image_size", "%", "block_size", "!=", "0", ":", "\n", "      ", "raise", "KeyError", "(", "f'RandomBlockShuffle: image size {image_size} cannot be divided by block size {block_size}'", ")", "\n", "\n", "", "self", ".", "image_size", "=", "image_size", "\n", "self", ".", "block_size", "=", "block_size", "\n", "self", ".", "n_blocks", "=", "(", "image_size", "//", "block_size", ")", "**", "2", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "seed", "=", "seed", ")", "\n", "self", ".", "perm", "=", "torch", ".", "from_numpy", "(", "rng", ".", "permutation", "(", "self", ".", "n_blocks", ")", ")", "\n", "\n", "self", ".", "unfold_op", "=", "torch", ".", "nn", ".", "Unfold", "(", "kernel_size", "=", "block_size", ",", "stride", "=", "block_size", ")", "\n", "self", ".", "fold_op", "=", "torch", ".", "nn", ".", "Fold", "(", "output_size", "=", "image_size", ",", "kernel_size", "=", "block_size", ",", "stride", "=", "block_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libdata.utils.RandomBlockShuffle.__call__": [[48, 54], ["utils.RandomBlockShuffle.unfold_op", "utils.RandomBlockShuffle.fold_op", "utils.RandomBlockShuffle.squeeze", "utils.RandomBlockShuffle.unsqueeze", "utils.RandomBlockShuffle.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "    ", "blocks", "=", "self", ".", "unfold_op", "(", "tensor", ".", "unsqueeze", "(", "0", ")", ")", "# (1, block_size, n_blocks)", "\n", "assert", "blocks", ".", "size", "(", "2", ")", "==", "self", ".", "n_blocks", "\n", "blocks", "=", "blocks", "[", "...", ",", "self", ".", "perm", "]", "# shuffle blocks", "\n", "tensor", "=", "self", ".", "fold_op", "(", "blocks", ")", "# (1, C, H, W)", "\n", "return", "tensor", ".", "squeeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libdata.torchvision.torchvision_get_data": [[28, 144], ["dict", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.ImageFolder", "torchvision.ImageFolder", "dict", "torchvision.Compose", "torchvision.Compose", "os.path.join", "torchvision.Normalize", "torchvision.CIFAR10", "torchvision.Compose", "torchvision.CIFAR10", "torchvision.CIFAR10", "name.startswith", "dict.get", "dict.get", "torchvision.Normalize", "dict.get", "dict.get", "print", "dict.get", "dict.get", "torchvision.Compose", "dict.get", "domain_net.DomainNet", "domain_net.DomainNet", "domain_net.DomainNet", "KeyError", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "numpy.array", "numpy.array", "torchvision.Compose", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "name.split", "print", "utils.RandomPixelShuffle", "extra_trans.append", "print", "utils.RandomBlockShuffle", "extra_trans.append", "print", "torchvision.Compose", "len", "dict.get", "dict.get", "dict.get", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor"], "function", ["None"], ["def", "torchvision_get_data", "(", "name", ",", "configs", "=", "None", ")", ":", "\n", "  ", "if", "configs", "is", "None", ":", "\n", "    ", "configs", "=", "dict", "(", ")", "\n", "\n", "", "if", "name", "==", "'imagenet'", ":", "\n", "# we assume imagenet is already available locally somewhere", "\n", "    ", "data_dir", "=", "configs", "[", "'imagenet_path'", "]", "\n", "train_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'train'", ")", "\n", "val_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "train_dir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "val_dataset", "=", "datasets", ".", "ImageFolder", "(", "val_dir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "train_dataset_eval_mode", "=", "None", "\n", "meta", "=", "{", "'num_classes'", ":", "1000", "}", "\n", "", "elif", "name", "==", "'cifar10'", ":", "\n", "    ", "data_dir", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "get", "(", "'data_dir'", ",", "'data'", ")", ",", "'cifar10'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "np", ".", "array", "(", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ")", ",", "\n", "std", "=", "np", ".", "array", "(", "[", "0.2470", ",", "0.2435", ",", "0.2616", "]", ")", ")", "\n", "\n", "# NOTE: we are using ImageNet sizes 224x224, because", "\n", "# we would like to use ImageNet architectures on this dataset", "\n", "train_dataset", "=", "datasets", ".", "CIFAR10", "(", "\n", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "trans_for_eval", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "val_dataset", "=", "datasets", ".", "CIFAR10", "(", "\n", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "\n", "transform", "=", "trans_for_eval", ")", "\n", "train_dataset_eval_mode", "=", "datasets", ".", "CIFAR10", "(", "\n", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "transform", "=", "trans_for_eval", ")", "\n", "meta", "=", "{", "'num_classes'", ":", "10", "}", "\n", "", "elif", "name", ".", "startswith", "(", "'DomainNet_'", ")", ":", "\n", "    ", "real_name", "=", "name", ".", "split", "(", "'_'", ")", "[", "1", "]", "\n", "assert", "real_name", "in", "[", "'clipart'", ",", "'infograph'", ",", "'painting'", ",", "'quickdraw'", ",", "'real'", ",", "'sketch'", "]", "\n", "data_dir", "=", "configs", ".", "get", "(", "'data_dir'", ",", "'data'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "image_size", "=", "configs", ".", "get", "(", "'image_size'", ",", "224", ")", "\n", "pre_crop_size", "=", "configs", ".", "get", "(", "'pre_crop_size'", ",", "256", ")", "\n", "image_chnn", "=", "3", "\n", "print", "(", "f'Loading DomainNet ({real_name}) with image_size={image_size}...'", ")", "\n", "\n", "extra_trans", "=", "[", "]", "\n", "\n", "shuffle_pixel_cfg", "=", "configs", ".", "get", "(", "'shuffle_pixel_config'", ",", "None", ")", "\n", "if", "shuffle_pixel_cfg", "is", "not", "None", ":", "\n", "      ", "print", "(", "'Enabling random pixel shuffling!'", ")", "\n", "pixel_shuffler", "=", "utils", ".", "RandomPixelShuffle", "(", "image_chw", "=", "(", "image_chnn", ",", "image_size", ",", "image_size", ")", ",", "\n", "**", "shuffle_pixel_cfg", ")", "\n", "extra_trans", ".", "append", "(", "pixel_shuffler", ")", "\n", "\n", "", "shuffle_block_cfg", "=", "configs", ".", "get", "(", "'shuffle_block_config'", ",", "None", ")", "\n", "if", "shuffle_block_cfg", "is", "not", "None", ":", "\n", "      ", "assert", "shuffle_pixel_cfg", "is", "None", "\n", "print", "(", "'Enabling random block shuffling!'", ")", "\n", "block_shuffler", "=", "utils", ".", "RandomBlockShuffle", "(", "image_size", "=", "image_size", ",", "\n", "**", "shuffle_block_cfg", ")", "\n", "extra_trans", ".", "append", "(", "block_shuffler", ")", "\n", "", "trans_for_eval", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "pre_crop_size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "image_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "+", "extra_trans", ")", "\n", "if", "configs", ".", "get", "(", "'disable_aug'", ",", "False", ")", ":", "\n", "      ", "print", "(", "'Disabling data augmentation!'", ")", "\n", "trans_for_train", "=", "trans_for_eval", "\n", "", "else", ":", "\n", "      ", "trans_for_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "image_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "+", "extra_trans", ")", "\n", "\n", "", "train_dataset", "=", "domain_net", ".", "DomainNet", "(", "\n", "data_dir", ",", "real_name", ",", "train", "=", "True", ",", "download", "=", "True", ",", "\n", "subsample", "=", "configs", ".", "get", "(", "'subsample'", ",", "None", ")", ",", "\n", "transform", "=", "trans_for_train", ")", "\n", "val_dataset", "=", "domain_net", ".", "DomainNet", "(", "data_dir", ",", "real_name", ",", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "transform", "=", "trans_for_eval", ",", "\n", "subsample", "=", "configs", ".", "get", "(", "'subsample'", ",", "None", ")", ")", "\n", "train_dataset_eval_mode", "=", "domain_net", ".", "DomainNet", "(", "data_dir", ",", "real_name", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "trans_for_eval", ",", "\n", "subsample", "=", "configs", ".", "get", "(", "'subsample'", ",", "None", ")", ")", "\n", "meta", "=", "{", "'num_classes'", ":", "len", "(", "train_dataset", ".", "classes", ")", "}", "\n", "\n", "", "else", ":", "\n", "    ", "raise", "KeyError", "(", "f'Unknown dataset {name}'", ")", "\n", "", "return", "dict", "(", "train", "=", "train_dataset", ",", "test", "=", "val_dataset", ",", "eval_mode_train", "=", "train_dataset_eval_mode", ")", ",", "meta", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.chexpert_index.split_trainset.export": [[27, 32], ["open", "out_f.write", "out_f.write"], "function", ["None"], ["def", "export", "(", "fn", ",", "start_idx", ",", "stop_idx", ")", ":", "\n", "    ", "with", "open", "(", "fn", ",", "'w'", ")", "as", "out_f", ":", "\n", "        ", "out_f", ".", "write", "(", "header", ")", "\n", "for", "line", "in", "lines", "[", "start_idx", ":", "stop_idx", "]", ":", "\n", "            ", "out_f", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libutil.flags.get_argparser": [[17, 24], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_argparser", "(", ")", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-k'", ",", "'--config-key'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "'Config key.'", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--base-dir'", ",", "type", "=", "str", ",", "default", "=", "'experiments'", ",", "help", "=", "'Base work directory.'", ")", "\n", "parser", ".", "add_argument", "(", "'-w'", ",", "'--work-dir'", ",", "default", "=", "None", ",", "\n", "help", "=", "'Work dir, by default decided by base-dir and config-key.'", ")", "\n", "return", "parser", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libutil.setup.setup": [[20, 55], ["os.makedirs", "my_config[].items", "os.path.join", "os.path.join", "logging.Formatter", "logging.basicConfig", "open", "logging.info", "logging.info", "logging.info", "os.path.join", "gin.bind_parameter", "open", "out_f.write", "logging.StreamHandler", "handler.setLevel", "handler.setFormatter", "logging.getLogger().addHandler", "gin.config_str", "gin.config_str", "logging.getLogger"], "function", ["None"], ["def", "setup", "(", "args", ",", "my_config", ")", ":", "\n", "  ", "if", "not", "args", ".", "work_dir", ":", "\n", "    ", "args", ".", "work_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "base_dir", ",", "args", ".", "config_key", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "args", ".", "work_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "key", ",", "val", "in", "my_config", "[", "'gin'", "]", ".", "items", "(", ")", ":", "\n", "    ", "gin", ".", "bind_parameter", "(", "key", ",", "val", ")", "\n", "\n", "", "gin_export_fn", "=", "os", ".", "path", ".", "join", "(", "args", ".", "work_dir", ",", "my_config", "[", "'script'", "]", "+", "'.gin'", ")", "\n", "with", "open", "(", "gin_export_fn", ",", "'w'", ")", "as", "out_f", ":", "\n", "    ", "out_f", ".", "write", "(", "gin", ".", "config_str", "(", ")", ")", "\n", "\n", "", "logfile", "=", "os", ".", "path", ".", "join", "(", "args", ".", "work_dir", ",", "my_config", "[", "'script'", "]", "+", "'.log'", ")", "\n", "\n", "log_format", "=", "'%(asctime)s %(name)-12s %(levelname)-8s %(message)s'", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "log_format", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ",", "datefmt", "=", "'%m-%d %H:%M'", ")", "\n", "file_stream", "=", "open", "(", "logfile", ",", "'w'", ")", "\n", "handlers", "=", "[", "logging", ".", "StreamHandler", "(", "file_stream", ")", "]", "\n", "\n", "# define a Handler which writes INFO messages or higher to the sys.stderr", "\n", "# handlers.append(logging.StreamHandler())", "\n", "\n", "for", "handler", "in", "handlers", ":", "\n", "    ", "handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "# tell the handler to use this format", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "# add the handler to the root logger", "\n", "logging", ".", "getLogger", "(", "''", ")", ".", "addHandler", "(", "handler", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Starting %s...'", ",", "my_config", "[", "'script'", "]", ")", "\n", "logging", ".", "info", "(", "':::::: Commandline args:\\n%s'", ",", "args", ")", "\n", "logging", ".", "info", "(", "':::::: Gin configurations:\\n%s'", ",", "gin", ".", "config_str", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libutil.mixup.mixup_data": [[26, 47], ["x.size", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.zeros().fill_().cuda", "torch.zeros().fill_().cuda", "torch.zeros().fill_().cuda", "torch.zeros().fill_().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "torch.zeros().fill_", "torch.ones().cuda.view", "numpy.random.beta", "torch.ones().cuda.view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.ones().cuda.view", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.random.beta", "torch.ones().cuda.view", "y.size", "y.size", "y.size"], "function", ["None"], ["def", "mixup_data", "(", "x", ",", "y", ",", "alpha", "=", "1.0", ",", "use_cuda", "=", "True", ",", "per_sample", "=", "False", ")", ":", "\n", "\n", "    ", "'''Compute the mixup data. Return mixed inputs, pairs of targets, and lambda'''", "\n", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "if", "use_cuda", ":", "\n", "        ", "index", "=", "torch", ".", "randperm", "(", "batch_size", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "index", "=", "torch", ".", "randperm", "(", "batch_size", ")", "\n", "\n", "", "if", "alpha", ">", "0.", "and", "not", "per_sample", ":", "\n", "        ", "lam", "=", "torch", ".", "zeros", "(", "y", ".", "size", "(", "0", ")", ")", ".", "fill_", "(", "np", ".", "random", ".", "beta", "(", "alpha", ",", "alpha", ")", ")", ".", "cuda", "(", ")", "\n", "mixed_x", "=", "lam", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "*", "x", "+", "(", "1", "-", "lam", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "*", "x", "[", "index", ",", ":", "]", "\n", "", "elif", "alpha", ">", "0.", ":", "\n", "        ", "lam", "=", "torch", ".", "Tensor", "(", "np", ".", "random", ".", "beta", "(", "alpha", ",", "alpha", ",", "size", "=", "y", ".", "size", "(", ")", ")", ")", ".", "cuda", "(", ")", "\n", "mixed_x", "=", "lam", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "*", "x", "+", "(", "1", "-", "lam", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "*", "x", "[", "index", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "lam", "=", "torch", ".", "ones", "(", "y", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "\n", "mixed_x", "=", "x", "\n", "\n", "", "y_a", ",", "y_b", "=", "y", ",", "y", "[", "index", "]", "\n", "return", "mixed_x", ",", "y_a", ",", "y_b", ",", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libutil.mixup.mixup_lam_idx": [[48, 60], ["numpy.random.beta", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "function", ["None"], ["", "def", "mixup_lam_idx", "(", "batch_size", ",", "alpha", ",", "use_cuda", "=", "True", ")", ":", "\n", "    ", "'''Compute the mixup data. Return mixed inputs, pairs of targets, and lambda'''", "\n", "if", "alpha", ">", "0.", ":", "\n", "        ", "lam", "=", "np", ".", "random", ".", "beta", "(", "alpha", ",", "alpha", ")", "\n", "", "else", ":", "\n", "        ", "lam", "=", "1.", "\n", "", "if", "use_cuda", ":", "\n", "        ", "index", "=", "torch", ".", "randperm", "(", "batch_size", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "index", "=", "torch", ".", "randperm", "(", "batch_size", ")", "\n", "\n", "", "return", "lam", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libutil.mixup.mixup_criterion": [[61, 63], ["criterion", "criterion"], "function", ["None"], ["", "def", "mixup_criterion", "(", "y_a", ",", "y_b", ",", "lam", ")", ":", "\n", "    ", "return", "lambda", "criterion", ",", "pred", ":", "criterion", "(", "pred", ",", "y_a", ",", "lam", ")", "+", "criterion", "(", "pred", ",", "y_b", ",", "1", "-", "lam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.libutil.mixup.get_mean_and_std": [[64, 77], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "inputs[].mean", "inputs[].std"], "function", ["None"], ["", "def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "    ", "'''Compute the mean and std value of dataset.'''", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'==> Computing mean and std..'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "dataset", ")", ")", "\n", "return", "mean", ",", "std", "", "", ""]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.p200_pix_shuffle.register_domain_net_shuffle_pixel": [[17, 44], ["registry.get_config", "copy.deepcopy", "registry.register", "spec[].replace", "copy.deepcopy", "registry.register", "spec[].replace"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.get_config", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.register", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.register"], ["def", "register_domain_net_shuffle_pixel", "(", "registry", ")", ":", "\n", "  ", "aug_tag", "=", "'_noaug'", "\n", "data_names", "=", "[", "'DomainNet_clipart'", ",", "'DomainNet_real'", ",", "'DomainNet_quickdraw'", "]", "\n", "base_keys", "=", "[", "f'train/{data_name}/fixup_resnet50_nzfc{aug_tag}/finetune-lr0.02-MstepLR'", "\n", "for", "data_name", "in", "data_names", "]", "\n", "base_keys", "+=", "[", "f'train/{data_name}/fixup_resnet50_nzfc{aug_tag}/finetune-lr0.1-MstepLR'", "\n", "for", "data_name", "in", "data_names", "]", "\n", "base_keys", "+=", "[", "f'train/{data_name}/fixup_resnet50_nzfc{aug_tag}/randinit-lr0.02-MstepLR'", "\n", "for", "data_name", "in", "data_names", "]", "\n", "base_keys", "+=", "[", "f'train/{data_name}/fixup_resnet50_nzfc{aug_tag}/randinit-lr0.1-MstepLR'", "\n", "for", "data_name", "in", "data_names", "]", "\n", "for", "base_key", "in", "base_keys", ":", "\n", "    ", "for", "seed", "in", "[", "0", ",", "1", ",", "2", "]", ":", "\n", "# pixel shuffling", "\n", "      ", "base_spec", "=", "registry", ".", "get_config", "(", "base_key", ")", "\n", "spec", "=", "copy", ".", "deepcopy", "(", "base_spec", ")", "\n", "spec", "[", "'key'", "]", "=", "spec", "[", "'key'", "]", ".", "replace", "(", "'train/'", ",", "'pix_shuffle/'", ")", "+", "f'/seed{seed}'", "\n", "spec", "[", "'gin'", "]", "[", "'data.configs'", "]", "[", "'shuffle_pixel_config'", "]", "=", "{", "'seed'", ":", "seed", "+", "1234", "}", "\n", "registry", ".", "register", "(", "spec", ")", "\n", "\n", "# block shuffling", "\n", "for", "block_size", "in", "[", "1", ",", "2", ",", "4", ",", "7", ",", "8", ",", "14", ",", "16", ",", "28", ",", "32", ",", "56", ",", "112", "]", ":", "\n", "        ", "spec", "=", "copy", ".", "deepcopy", "(", "base_spec", ")", "\n", "spec", "[", "'key'", "]", "=", "spec", "[", "'key'", "]", ".", "replace", "(", "'train/'", ",", "f'blk{block_size}_shuffle/'", ")", "+", "f'/seed{seed}'", "\n", "spec", "[", "'gin'", "]", "[", "'data.configs'", "]", "[", "'shuffle_block_config'", "]", "=", "{", "'seed'", ":", "seed", "+", "1234", ",", "\n", "'block_size'", ":", "block_size", "}", "\n", "registry", ".", "register", "(", "spec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.p200_finetune_ckpt.register_chexpert_finetune_sweeps": [[20, 30], ["registry.get_config", "copy.deepcopy", "registry.register", "spec[].replace"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.get_config", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.register"], ["def", "register_chexpert_finetune_sweeps", "(", "registry", ")", ":", "\n", "  ", "for", "data_name", "in", "[", "'DomainNet_clipart'", ",", "'DomainNet_real'", ",", "'DomainNet_quickdraw'", "]", ":", "\n", "    ", "for", "base_key", "in", "[", "f'train/{data_name}/fixup_resnet50_nzfc/finetune-lr0.02-MstepLR'", ",", "\n", "f'train/{data_name}/fixup_resnet50_nzfc/finetune-lr0.1-MstepLR'", "]", ":", "\n", "      ", "for", "ckpt_idx", "in", "[", "0", ",", "1", ",", "2", ",", "5", ",", "10", ",", "29", ",", "30", ",", "31", ",", "59", ",", "60", ",", "61", ",", "89", ",", "90", "]", ":", "\n", "        ", "base_spec", "=", "registry", ".", "get_config", "(", "base_key", ")", "\n", "spec", "=", "copy", ".", "deepcopy", "(", "base_spec", ")", "\n", "spec", "[", "'key'", "]", "=", "spec", "[", "'key'", "]", ".", "replace", "(", "'train/'", ",", "'finetune_ckpt/'", ")", "+", "f'-ckpt{ckpt_idx:03d}'", "\n", "spec", "[", "'gin'", "]", "[", "'train.finetune_from'", "]", "=", "f'/mnt/data/logs/imagenet-lr01/ckpt-E{ckpt_idx:03d}.pth.tar'", "\n", "registry", ".", "register", "(", "spec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.base.config_tmpl": [[17, 25], ["collections.OrderedDict", "collections.OrderedDict"], "function", ["None"], ["def", "config_tmpl", "(", "key", ",", "script", ")", ":", "\n", "\t", "spec", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "spec", "[", "'key'", "]", "=", "key", "\n", "spec", "[", "'gpu_spec'", "]", "=", "'1xV100'", "\n", "spec", "[", "'machine_type'", "]", "=", "'n1-standard-8'", "\n", "spec", "[", "'script'", "]", "=", "script", "\n", "spec", "[", "'gin'", "]", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "return", "spec", "", "", ""]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.p100_chexpert.register_chexpert_training": [[20, 35], ["p100_chexpert.chexpert_sgd_spec", "spec[].replace", "dict", "registry.register", "p100_chexpert.chexpert_sgd_spec", "spec[].replace", "dict", "registry.register"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.p100_chexpert.chexpert_sgd_spec", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.register", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.p100_chexpert.chexpert_sgd_spec", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.register"], ["def", "register_chexpert_training", "(", "registry", ")", ":", "\n", "# random init", "\n", "  ", "for", "base_lr", "in", "[", "0.1", ",", "0.02", "]", ":", "\n", "    ", "spec", "=", "chexpert_sgd_spec", "(", "base_lr", "=", "base_lr", ",", "epochs", "=", "400", ",", "finetune_from", "=", "None", ")", "\n", "spec", "[", "'key'", "]", "=", "spec", "[", "'key'", "]", ".", "replace", "(", "'/fixup_resnet50/'", ",", "'/fixup_resnet50_nzfc/'", ")", "\n", "spec", "[", "'gin'", "]", "[", "'model.kwargs'", "]", "=", "dict", "(", "zero_fc_init", "=", "False", ")", "\n", "registry", ".", "register", "(", "spec", ")", "\n", "\n", "# finetune", "\n", "", "for", "base_lr", "in", "[", "0.1", ",", "0.02", "]", ":", "\n", "    ", "spec", "=", "chexpert_sgd_spec", "(", "base_lr", "=", "base_lr", ",", "epochs", "=", "200", ",", "\n", "finetune_from", "=", "'/mnt/data/logs/imagenet-lr01/ckpt-E090.pth.tar'", ")", "\n", "spec", "[", "'key'", "]", "=", "spec", "[", "'key'", "]", ".", "replace", "(", "'/fixup_resnet50/'", ",", "'/fixup_resnet50_nzfc/'", ")", "\n", "spec", "[", "'gin'", "]", "[", "'model.kwargs'", "]", "=", "dict", "(", "zero_fc_init", "=", "False", ")", "\n", "registry", ".", "register", "(", "spec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.p100_chexpert.chexpert_sgd_spec": [[37, 60], ["base.config_tmpl", "dict"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.base.config_tmpl"], ["", "", "def", "chexpert_sgd_spec", "(", "base_lr", "=", "0.1", ",", "epochs", "=", "200", ",", "finetune_from", "=", "None", ")", ":", "\n", "  ", "batch_size", "=", "256", "\n", "num_gpu", "=", "2", "\n", "\n", "finetune_tag", "=", "'finetune'", "if", "finetune_from", "is", "not", "None", "else", "'randinit'", "\n", "spec", "=", "base", ".", "config_tmpl", "(", "key", "=", "f'train/chexpert/fixup_resnet50/{finetune_tag}-lr{base_lr}-bs{batch_size}'", ",", "\n", "script", "=", "'chexpert_train.py'", ")", "\n", "\n", "spec", "[", "'gpu_spec'", "]", "=", "f'{num_gpu}xV100'", "\n", "\n", "spec", "[", "'gin'", "]", "[", "'data.image_path'", "]", "=", "'/mnt/data/CheXpert-v1.0-img224'", "\n", "spec", "[", "'gin'", "]", "[", "'data.data_config'", "]", "=", "{", "'cache_bitmap'", ":", "False", "}", "\n", "spec", "[", "'gin'", "]", "[", "'model.arch'", "]", "=", "'fixup_resnet50'", "\n", "spec", "[", "'gin'", "]", "[", "'train.batch_size'", "]", "=", "batch_size", "\n", "spec", "[", "'gin'", "]", "[", "'train.epochs'", "]", "=", "epochs", "\n", "spec", "[", "'gin'", "]", "[", "'train.data_workers'", "]", "=", "8", "\n", "spec", "[", "'gin'", "]", "[", "'train.finetune_from'", "]", "=", "finetune_from", "\n", "spec", "[", "'gin'", "]", "[", "'optimizer.name'", "]", "=", "'SGD'", "\n", "spec", "[", "'gin'", "]", "[", "'optimizer.base_lr'", "]", "=", "base_lr", "*", "batch_size", "/", "256", "\n", "spec", "[", "'gin'", "]", "[", "'optimizer.weight_decay'", "]", "=", "1e-4", "\n", "spec", "[", "'gin'", "]", "[", "'optimizer.kwargs'", "]", "=", "dict", "(", "momentum", "=", "0.9", ")", "\n", "\n", "return", "spec", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.p100_domain_net.register_domain_net_training": [[20, 32], ["p100_domain_net.domainnet_sgd_spec", "dict", "registry.register"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.p100_domain_net.domainnet_sgd_spec", "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.register"], ["def", "register_domain_net_training", "(", "registry", ")", ":", "\n", "  ", "for", "finetune_from", "in", "[", "None", ",", "'/mnt/data/logs/imagenet-lr01/ckpt-E090.pth.tar'", "]", ":", "\n", "    ", "for", "base_lr", "in", "[", "0.02", ",", "0.1", "]", ":", "\n", "      ", "for", "data_name", "in", "[", "'DomainNet_clipart'", ",", "'DomainNet_real'", ",", "'DomainNet_quickdraw'", "]", ":", "\n", "        ", "for", "disable_aug", "in", "[", "True", ",", "False", "]", ":", "\n", "          ", "spec", "=", "domainnet_sgd_spec", "(", "data_name", ",", "base_lr", "=", "base_lr", ",", "finetune_from", "=", "finetune_from", ",", "\n", "disable_aug", "=", "disable_aug", ")", "\n", "spec", "[", "'key'", "]", "+=", "'-MstepLR'", "\n", "spec", "[", "'gin'", "]", "[", "'lr_scheduler.name'", "]", "=", "'MultiStepLR'", "\n", "spec", "[", "'gin'", "]", "[", "'lr_scheduler.kwargs'", "]", "=", "dict", "(", "milestones", "=", "[", "30", ",", "60", ",", "90", "]", ",", "gamma", "=", "0.1", ")", "\n", "\n", "registry", ".", "register", "(", "spec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.p100_domain_net.domainnet_sgd_spec": [[34, 61], ["base.config_tmpl", "dict", "dict", "dict"], "function", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.base.config_tmpl"], ["", "", "", "", "", "def", "domainnet_sgd_spec", "(", "data_name", ",", "base_lr", "=", "0.1", ",", "finetune_from", "=", "None", ",", "disable_aug", "=", "False", ")", ":", "\n", "  ", "num_gpu", "=", "1", "\n", "\n", "finetune_tag", "=", "'finetune'", "if", "finetune_from", "is", "not", "None", "else", "'randinit'", "\n", "no_aug_tag", "=", "'_noaug'", "if", "disable_aug", "else", "''", "\n", "spec", "=", "base", ".", "config_tmpl", "(", "\n", "key", "=", "f'train/{data_name}/fixup_resnet50_nzfc{no_aug_tag}/{finetune_tag}-lr{base_lr}'", ",", "\n", "script", "=", "'imagenet_train.py'", ")", "\n", "\n", "div_factor", "=", "8", "\n", "\n", "spec", "[", "'gpu_spec'", "]", "=", "f'{num_gpu}xV100'", "\n", "spec", "[", "'gin'", "]", "[", "'data.name'", "]", "=", "data_name", "\n", "spec", "[", "'gin'", "]", "[", "'data.configs'", "]", "=", "dict", "(", "subsample", "=", "{", "'size'", ":", "50000", ",", "'seed'", ":", "2020", "}", ",", "\n", "data_dir", "=", "'/mnt/data'", ",", "disable_aug", "=", "disable_aug", ")", "\n", "spec", "[", "'gin'", "]", "[", "'model.arch'", "]", "=", "'fixup_resnet50'", "\n", "spec", "[", "'gin'", "]", "[", "'model.kwargs'", "]", "=", "dict", "(", "zero_fc_init", "=", "False", ")", "\n", "spec", "[", "'gin'", "]", "[", "'train.batch_size'", "]", "=", "256", "//", "div_factor", "\n", "spec", "[", "'gin'", "]", "[", "'train.epochs'", "]", "=", "100", "\n", "spec", "[", "'gin'", "]", "[", "'train.data_workers'", "]", "=", "16", "\n", "spec", "[", "'gin'", "]", "[", "'train.finetune_from'", "]", "=", "finetune_from", "\n", "spec", "[", "'gin'", "]", "[", "'optimizer.name'", "]", "=", "'SGD'", "\n", "spec", "[", "'gin'", "]", "[", "'optimizer.base_lr'", "]", "=", "base_lr", "/", "div_factor", "\n", "spec", "[", "'gin'", "]", "[", "'optimizer.weight_decay'", "]", "=", "1e-4", "\n", "spec", "[", "'gin'", "]", "[", "'optimizer.kwargs'", "]", "=", "dict", "(", "momentum", "=", "0.9", ")", "\n", "\n", "return", "spec", "\n", "", ""]], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.build_registry": [[30, 50], ["collections.OrderedDict", "config_mods.sort", "getattr", "filter", "dir", "re.match", "isinstance", "getattr", "func", "type", "dir", "x.startswith"], "methods", ["None"], []], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.register": [[51, 57], ["KeyError"], "methods", ["None"], []], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.list_configs": [[58, 64], ["cls.build_registry", "cls.registry.keys", "re.search"], "methods", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.build_registry"], []], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.print_configs": [[65, 72], ["cls.list_configs", "print", "enumerate", "print", "len"], "methods", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.list_configs"], []], "home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.get_config": [[73, 77], ["cls.build_registry"], "methods", ["home.repos.pwc.inspect_result.google-research_understanding-transfer-learning.configs.__init__.Registry.build_registry"], []]}