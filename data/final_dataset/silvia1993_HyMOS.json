{"home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.get_world_size": [[7, 13], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.get_rank": [[15, 21], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.is_main_process": [[23, 25], ["dist_utils.get_rank"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.synchronize": [[27, 40], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n       Helper function to synchronize (barrier) among all processes when\n       using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils._encode": [[42, 54], ["pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.ByteTensor().to.numel", "torch.ByteTensor", "torch.ByteTensor"], "function", ["None"], ["", "def", "_encode", "(", "encoded_data", ",", "data", ")", ":", "\n", "# gets a byte representation for the data", "\n", "    ", "encoded_bytes", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "# convert this byte string into a byte tensor", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "encoded_bytes", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "# encoding: first byte is the size and then rest is the data", "\n", "s", "=", "tensor", ".", "numel", "(", ")", "\n", "assert", "s", "<=", "255", ",", "\"Can't encode data greater than 255 bytes\"", "\n", "# put the encoded data in encoded_data", "\n", "encoded_data", "[", "0", "]", "=", "s", "\n", "encoded_data", "[", "1", ":", "(", "s", "+", "1", ")", "]", "=", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.all_gather": [[56, 97], ["dist_utils.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.LongTensor().to", "torch.LongTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.LongTensor", "torch.LongTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.LongTensor", "torch.LongTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.get_world_size", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.all_gather", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.all_gather"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "LongTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.temperature_scaling.ModelWithTemperature.__init__": [[14, 18], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "super", "(", "ModelWithTemperature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "temperature", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "1", ")", "*", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.temperature_scaling.ModelWithTemperature.forward": [[19, 22], ["temperature_scaling.ModelWithTemperature.model", "temperature_scaling.ModelWithTemperature.temperature_scale"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.temperature_scaling.ModelWithTemperature.temperature_scale"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "logits", "=", "self", ".", "model", "(", "input", ")", "\n", "return", "self", ".", "temperature_scale", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.temperature_scaling.ModelWithTemperature.temperature_scale": [[23, 30], ["temperature_scaling.ModelWithTemperature.temperature.unsqueeze().expand", "logits.size", "logits.size", "temperature_scaling.ModelWithTemperature.temperature.unsqueeze"], "methods", ["None"], ["", "def", "temperature_scale", "(", "self", ",", "logits", ")", ":", "\n", "        ", "\"\"\"\n        Perform temperature scaling on logits\n        \"\"\"", "\n", "# Expand temperature to match the size of logits", "\n", "temperature", "=", "self", ".", "temperature", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "logits", ".", "size", "(", "0", ")", ",", "logits", ".", "size", "(", "1", ")", ")", "\n", "return", "logits", "/", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.temperature_scaling.ModelWithTemperature.set_temperature": [[32, 75], ["temperature_scaling.ModelWithTemperature.cuda", "torch.nn.CrossEntropyLoss().cuda", "_ECELoss().cuda", "torch.nn.CrossEntropyLoss().cuda.item", "_ECELoss().cuda.item", "print", "torch.optim.LBFGS", "torch.optim.LBFGS.step", "torch.nn.CrossEntropyLoss().cuda.item", "_ECELoss().cuda.item", "print", "print", "torch.no_grad", "torch.cat().cuda", "torch.cat().cuda", "torch.nn.CrossEntropyLoss().cuda.", "nn.CrossEntropyLoss().cuda.backward", "torch.nn.CrossEntropyLoss", "temperature_scaling._ECELoss", "input.cuda.cuda.cuda", "temperature_scaling.ModelWithTemperature.model", "logits_list.append", "labels_list.append", "torch.nn.CrossEntropyLoss().cuda.", "_ECELoss().cuda.", "temperature_scaling.ModelWithTemperature.temperature_scale", "torch.nn.CrossEntropyLoss().cuda.", "_ECELoss().cuda.", "temperature_scaling.ModelWithTemperature.temperature.item", "torch.cat", "torch.cat", "temperature_scaling.ModelWithTemperature.temperature_scale", "temperature_scaling.ModelWithTemperature.temperature_scale"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.RandomHSVFunction.backward", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.temperature_scaling.ModelWithTemperature.temperature_scale", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.temperature_scaling.ModelWithTemperature.temperature_scale", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.temperature_scaling.ModelWithTemperature.temperature_scale"], ["", "def", "set_temperature", "(", "self", ",", "valid_loader", ")", ":", "\n", "        ", "\"\"\"\n        Tune the tempearature of the model (using the validation set).\n        We're going to set it to optimize NLL.\n        valid_loader (DataLoader): validation set loader\n        \"\"\"", "\n", "self", ".", "cuda", "(", ")", "\n", "nll_criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "ece_criterion", "=", "_ECELoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# First: collect all the logits and labels for the validation set", "\n", "logits_list", "=", "[", "]", "\n", "labels_list", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "input", ",", "label", "in", "valid_loader", ":", "\n", "                ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "logits", "=", "self", ".", "model", "(", "input", ")", "\n", "logits_list", ".", "append", "(", "logits", ")", "\n", "labels_list", ".", "append", "(", "label", ")", "\n", "", "logits", "=", "torch", ".", "cat", "(", "logits_list", ")", ".", "cuda", "(", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels_list", ")", ".", "cuda", "(", ")", "\n", "\n", "# Calculate NLL and ECE before temperature scaling", "\n", "", "before_temperature_nll", "=", "nll_criterion", "(", "logits", ",", "labels", ")", ".", "item", "(", ")", "\n", "before_temperature_ece", "=", "ece_criterion", "(", "logits", ",", "labels", ")", ".", "item", "(", ")", "\n", "print", "(", "'Before temperature - NLL: %.3f, ECE: %.3f'", "%", "(", "before_temperature_nll", ",", "before_temperature_ece", ")", ")", "\n", "\n", "# Next: optimize the temperature w.r.t. NLL", "\n", "optimizer", "=", "optim", ".", "LBFGS", "(", "[", "self", ".", "temperature", "]", ",", "lr", "=", "0.0001", ",", "max_iter", "=", "50000", ")", "\n", "\n", "def", "eval", "(", ")", ":", "\n", "            ", "loss", "=", "nll_criterion", "(", "self", ".", "temperature_scale", "(", "logits", ")", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "return", "loss", "\n", "", "optimizer", ".", "step", "(", "eval", ")", "\n", "\n", "# Calculate NLL and ECE after temperature scaling", "\n", "after_temperature_nll", "=", "nll_criterion", "(", "self", ".", "temperature_scale", "(", "logits", ")", ",", "labels", ")", ".", "item", "(", ")", "\n", "after_temperature_ece", "=", "ece_criterion", "(", "self", ".", "temperature_scale", "(", "logits", ")", ",", "labels", ")", ".", "item", "(", ")", "\n", "print", "(", "'Optimal temperature: %.3f'", "%", "self", ".", "temperature", ".", "item", "(", ")", ")", "\n", "print", "(", "'After temperature - NLL: %.3f, ECE: %.3f'", "%", "(", "after_temperature_nll", ",", "after_temperature_ece", ")", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.temperature_scaling._ECELoss.__init__": [[96, 104], ["torch.nn.Module.__init__", "torch.linspace"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "n_bins", "=", "15", ")", ":", "\n", "        ", "\"\"\"\n        n_bins (int): number of confidence interval bins\n        \"\"\"", "\n", "super", "(", "_ECELoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "bin_boundaries", "=", "torch", ".", "linspace", "(", "0", ",", "1", ",", "n_bins", "+", "1", ")", "\n", "self", ".", "bin_lowers", "=", "bin_boundaries", "[", ":", "-", "1", "]", "\n", "self", ".", "bin_uppers", "=", "bin_boundaries", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.temperature_scaling._ECELoss.forward": [[105, 121], ["torch.nn.functional.softmax", "torch.max", "predictions.eq", "torch.zeros", "zip", "in_bin.float().mean", "confidences.gt", "confidences.le", "in_bin.float().mean.item", "accuracies[].float().mean", "confidences[].mean", "bin_lower.item", "bin_upper.item", "in_bin.float", "torch.abs", "accuracies[].float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "softmaxes", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "confidences", ",", "predictions", "=", "torch", ".", "max", "(", "softmaxes", ",", "1", ")", "\n", "accuracies", "=", "predictions", ".", "eq", "(", "labels", ")", "\n", "\n", "ece", "=", "torch", ".", "zeros", "(", "1", ",", "device", "=", "logits", ".", "device", ")", "\n", "for", "bin_lower", ",", "bin_upper", "in", "zip", "(", "self", ".", "bin_lowers", ",", "self", ".", "bin_uppers", ")", ":", "\n", "# Calculated |confidence - accuracy| in each bin", "\n", "            ", "in_bin", "=", "confidences", ".", "gt", "(", "bin_lower", ".", "item", "(", ")", ")", "*", "confidences", ".", "le", "(", "bin_upper", ".", "item", "(", ")", ")", "\n", "prop_in_bin", "=", "in_bin", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "if", "prop_in_bin", ".", "item", "(", ")", ">", "0", ":", "\n", "                ", "accuracy_in_bin", "=", "accuracies", "[", "in_bin", "]", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "avg_confidence_in_bin", "=", "confidences", "[", "in_bin", "]", ".", "mean", "(", ")", "\n", "ece", "+=", "torch", ".", "abs", "(", "avg_confidence_in_bin", "-", "accuracy_in_bin", ")", "*", "prop_in_bin", "\n", "\n", "", "", "return", "ece", "", "", "", ""]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.__init__": [[18, 37], ["utils.Logger._make_dir", "utils.Logger.set_dir", "os.path.exists", "os.mkdir", "os.path.exists", "os.mkdir", "input", "len", "shutil.rmtree", "exit", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger._make_dir", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.set_dir"], ["def", "__init__", "(", "self", ",", "fn", ",", "ask", "=", "True", ",", "local_rank", "=", "0", ")", ":", "\n", "        ", "self", ".", "local_rank", "=", "local_rank", "\n", "if", "self", ".", "local_rank", "==", "0", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "\"./logs/\"", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "\"./logs/\"", ")", "\n", "\n", "", "logdir", "=", "self", ".", "_make_dir", "(", "fn", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "logdir", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "logdir", ")", "\n", "\n", "", "if", "len", "(", "os", ".", "listdir", "(", "logdir", ")", ")", "!=", "0", "and", "ask", ":", "\n", "                ", "ans", "=", "input", "(", "\"log_dir is not empty. All data inside log_dir will be deleted. \"", "\n", "\"Will you proceed [y/N]? \"", ")", "\n", "if", "ans", "in", "[", "'y'", ",", "'Y'", "]", ":", "\n", "                    ", "shutil", ".", "rmtree", "(", "logdir", ")", "\n", "", "else", ":", "\n", "                    ", "exit", "(", "1", ")", "\n", "\n", "", "", "self", ".", "set_dir", "(", "logdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger._make_dir": [[38, 42], ["datetime.datetime.datetime.today().strftime", "datetime.datetime.datetime.today"], "methods", ["None"], ["", "", "def", "_make_dir", "(", "self", ",", "fn", ")", ":", "\n", "        ", "today", "=", "datetime", ".", "today", "(", ")", ".", "strftime", "(", "\"%y%m%d\"", ")", "\n", "logdir", "=", "'logs/'", "+", "fn", "\n", "return", "logdir", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.set_dir": [[43, 49], ["tensorboardX.SummaryWriter", "open", "os.path.exists", "os.mkdir", "os.path.join"], "methods", ["None"], ["", "def", "set_dir", "(", "self", ",", "logdir", ",", "log_fn", "=", "'log.txt'", ")", ":", "\n", "        ", "self", ".", "logdir", "=", "logdir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "logdir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "logdir", ")", "\n", "", "self", ".", "writer", "=", "SummaryWriter", "(", "logdir", ")", "\n", "self", ".", "log_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "logdir", ",", "log_fn", ")", ",", "'a'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.log": [[50, 57], ["utils.Logger.log_file.write", "utils.Logger.log_file.flush", "print", "sys.stdout.flush", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "string", ")", ":", "\n", "        ", "if", "self", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "log_file", ".", "write", "(", "'[%s] %s'", "%", "(", "datetime", ".", "now", "(", ")", ",", "string", ")", "+", "'\\n'", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "\n", "print", "(", "'[%s] %s'", "%", "(", "datetime", ".", "now", "(", ")", ",", "string", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.log_dirname": [[58, 65], ["utils.Logger.log_file.write", "utils.Logger.log_file.flush", "print", "sys.stdout.flush"], "methods", ["None"], ["", "", "def", "log_dirname", "(", "self", ",", "string", ")", ":", "\n", "        ", "if", "self", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "log_file", ".", "write", "(", "'%s (%s)'", "%", "(", "string", ",", "self", ".", "logdir", ")", "+", "'\\n'", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "\n", "print", "(", "'%s (%s)'", "%", "(", "string", ",", "self", ".", "logdir", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.scalar_summary": [[66, 70], ["utils.Logger.writer.add_scalar"], "methods", ["None"], ["", "", "def", "scalar_summary", "(", "self", ",", "tag", ",", "value", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a scalar variable.\"\"\"", "\n", "if", "self", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "tag", ",", "value", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.images_summary": [[71, 75], ["utils.Logger.writer.add_images"], "methods", ["None"], ["", "", "def", "images_summary", "(", "self", ",", "tag", ",", "images", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a list of images.\"\"\"", "\n", "if", "self", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "writer", ".", "add_images", "(", "tag", ",", "images", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.histo_summary": [[76, 80], ["utils.Logger.writer.add_histogram"], "methods", ["None"], ["", "", "def", "histo_summary", "(", "self", ",", "tag", ",", "values", ",", "step", ")", ":", "\n", "        ", "\"\"\"Log a histogram of the tensor of values.\"\"\"", "\n", "if", "self", ".", "local_rank", "==", "0", ":", "\n", "            ", "self", ".", "writer", ".", "add_histogram", "(", "tag", ",", "values", ",", "step", ",", "bins", "=", "'auto'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.AverageMeter.__init__": [[85, 90], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "value", "=", "0", "\n", "self", ".", "average", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.AverageMeter.reset": [[91, 96], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "value", "=", "0", "\n", "self", ".", "average", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.AverageMeter.update": [[97, 102], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "value", "=", "value", "\n", "self", ".", "sum", "+=", "value", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "average", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.load_checkpoint": [[104, 127], ["print", "os.path.exists", "os.path.join", "os.path.join", "os.path.join", "torch.load", "torch.load", "os.path.join", "os.path.join", "os.path.join", "NotImplementedError", "open", "pickle.load"], "function", ["None"], ["", "", "def", "load_checkpoint", "(", "logdir", ",", "mode", "=", "'last'", ")", ":", "\n", "    ", "if", "mode", "==", "'last'", ":", "\n", "        ", "model_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'last.model'", ")", "\n", "optim_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'last.optim'", ")", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'last.config'", ")", "\n", "", "elif", "mode", "==", "'best'", ":", "\n", "        ", "model_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'best.model'", ")", "\n", "optim_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'best.optim'", ")", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'best.config'", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "print", "(", "\"=> Loading checkpoint from '{}'\"", ".", "format", "(", "logdir", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "        ", "model_state", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "optim_state", "=", "torch", ".", "load", "(", "optim_path", ")", "\n", "with", "open", "(", "config_path", ",", "'rb'", ")", "as", "handle", ":", "\n", "            ", "cfg", "=", "pickle", ".", "load", "(", "handle", ")", "\n", "", "", "else", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", "\n", "\n", "", "return", "model_state", ",", "optim_state", ",", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.save_checkpoint": [[129, 141], ["os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "open", "pickle.dump"], "function", ["None"], ["", "def", "save_checkpoint", "(", "its", ",", "model_state", ",", "optim_state", ",", "logdir", ")", ":", "\n", "    ", "last_model", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'last.model'", ")", "\n", "last_optim", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'last.optim'", ")", "\n", "last_config", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "'last.config'", ")", "\n", "\n", "opt", "=", "{", "\n", "'its'", ":", "its", ",", "\n", "}", "\n", "torch", ".", "save", "(", "model_state", ",", "last_model", ")", "\n", "torch", ".", "save", "(", "optim_state", ",", "last_optim", ")", "\n", "with", "open", "(", "last_config", ",", "'wb'", ")", "as", "handle", ":", "\n", "        ", "pickle", ".", "dump", "(", "opt", ",", "handle", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.save_checkpoint_name": [[142, 145], ["os.path.join", "torch.save"], "function", ["None"], ["", "", "def", "save_checkpoint_name", "(", "model_state", ",", "logdir", ",", "prefix", ")", ":", "\n", "    ", "last_model", "=", "os", ".", "path", ".", "join", "(", "logdir", ",", "f'{prefix}.model'", ")", "\n", "torch", ".", "save", "(", "model_state", ",", "last_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.set_random_seed": [[146, 151], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["", "def", "set_random_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.normalize": [[153, 155], ["x.norm"], "function", ["None"], ["", "def", "normalize", "(", "x", ",", "dim", "=", "1", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "return", "x", "/", "(", "x", ".", "norm", "(", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", "+", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.normalize_images": [[156, 160], ["torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "inputs.permute"], "function", ["None"], ["", "def", "normalize_images", "(", "P", ",", "inputs", ")", ":", "\n", "    ", "mean", "=", "torch", ".", "tensor", "(", "P", ".", "im_mean", ")", ".", "to", "(", "inputs", ".", "device", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "P", ".", "im_std", ")", ".", "to", "(", "inputs", ".", "device", ")", "\n", "return", "(", "(", "inputs", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "-", "mean", ")", "/", "std", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.denormalize_images": [[161, 165], ["torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "inputs.permute"], "function", ["None"], ["", "def", "denormalize_images", "(", "P", ",", "inputs", ")", ":", "\n", "    ", "mean", "=", "torch", ".", "tensor", "(", "P", ".", "im_mean", ")", ".", "to", "(", "inputs", ".", "device", ")", "\n", "std", "=", "torch", ".", "tensor", "(", "P", ".", "im_std", ")", ".", "to", "(", "inputs", ".", "device", ")", "\n", "return", "(", "inputs", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "*", "std", "+", "mean", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.apply_simclr_aug": [[166, 207], ["torch.device", "torch.device", "len", "torch.zeros", "range", "P.adain_model.to", "adain_model.to.to", "len", "len", "len", "utils.normalize_images", "utils.normalize_images", "P.simclr_aug_st", "len", "simclr_aug", "torch.cuda.is_available", "random.random", "normalize_images.append", "normalize_images.append", "cnt_ids.append", "torch.stack().to", "torch.stack().to", "torch.no_grad", "adain_model.to.generate", "utils.denormalize_images", "torch.nn.functional.interpolate", "torch.stack", "torch.stack", "int", "random.random", "len"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.normalize_images", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.normalize_images", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.AdaIN.generate", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.denormalize_images"], ["", "def", "apply_simclr_aug", "(", "P", ",", "simclr_aug", ",", "images", ",", "style_images", ")", ":", "\n", "    ", "cpu_device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "batch_size", "=", "len", "(", "images", ")", "\n", "adain_mask", "=", "torch", ".", "zeros", "(", "(", "len", "(", "images", ")", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "selected_content_images", "=", "[", "]", "\n", "selected_style_images", "=", "[", "]", "\n", "cnt_ids", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "        ", "adain_mask", "[", "i", "]", "=", "random", ".", "random", "(", ")", "<", "P", ".", "adain_probability", "\n", "if", "adain_mask", "[", "i", "]", ":", "\n", "            ", "selected_content_images", ".", "append", "(", "images", "[", "i", "]", ")", "\n", "selected_style_images", ".", "append", "(", "style_images", "[", "int", "(", "random", ".", "random", "(", ")", "*", "len", "(", "style_images", ")", ")", "]", ")", "\n", "cnt_ids", ".", "append", "(", "i", ")", "\n", "\n", "", "", "no_adain_mask", "=", "~", "adain_mask", "\n", "\n", "adain_model", "=", "P", ".", "adain_model", ".", "to", "(", "device", ")", "\n", "\n", "if", "len", "(", "selected_content_images", ")", ">", "0", ":", "\n", "        ", "selected_content_images", "=", "normalize_images", "(", "P", ",", "torch", ".", "stack", "(", "selected_content_images", ")", ".", "to", "(", "device", ")", ")", "\n", "selected_style_images", "=", "normalize_images", "(", "P", ",", "torch", ".", "stack", "(", "selected_style_images", ")", ".", "to", "(", "device", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output_images", "=", "adain_model", ".", "generate", "(", "\n", "selected_content_images", ",", "\n", "selected_style_images", ",", "\n", "P", ".", "adain_alpha", ")", "\n", "\n", "", "images", "[", "adain_mask", "]", "=", "P", ".", "simclr_aug_st", "(", "denormalize_images", "(", "P", ",", "interpolate", "(", "output_images", ",", "images", "[", "0", "]", ".", "shape", "[", "1", ":", "]", "[", ":", ":", "-", "1", "]", ")", ")", ")", "\n", "del", "output_images", "\n", "del", "selected_content_images", "\n", "del", "selected_style_images", "\n", "\n", "", "if", "len", "(", "images", "[", "no_adain_mask", "]", ")", ">", "0", ":", "\n", "        ", "images", "[", "no_adain_mask", "]", "=", "simclr_aug", "(", "images", "[", "no_adain_mask", "]", ")", "\n", "\n", "", "adain_model", "=", "adain_model", ".", "to", "(", "cpu_device", ")", "\n", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.get_features": [[24, 69], ["model.eval", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tqdm.tqdm", "utils.dist_utils.all_gather", "list", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.numpy", "utils.dist_utils.synchronize", "numpy.array", "all_labels.numpy.append", "images.to.to", "feat.to", "torch.cat.append", "predictions.update", "sorted", "torch.cat.append", "torch.tensor.append", "lbl.item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "lbl.item", "predictions.keys", "feat.norm", "img_id.item"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.all_gather", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.synchronize", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.AverageMeter.update"], ["def", "get_features", "(", "P", ",", "model", ",", "test_loaders", ",", "normalize", "=", "True", ",", "layer", "=", "\"penultimate\"", ",", "distributed", "=", "False", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "\n", "# we have to use penultimate layer as some models (like baseline naive) do not have the simclr projection head", "\n", "feats", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "ids", "=", "[", "]", "\n", "out_dict", "=", "{", "}", "\n", "\n", "for", "loader", "in", "test_loaders", ":", "\n", "        ", "for", "batch", "in", "tqdm", "(", "loader", ")", ":", "\n", "            ", "images", ",", "lbl", ",", "img_id", "=", "batch", "\n", "labels", ".", "append", "(", "lbl", ".", "item", "(", ")", ")", "\n", "images", "=", "images", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "_", ",", "output_aux", "=", "model", "(", "images", ",", "penultimate", "=", "True", ",", "simclr", "=", "True", ")", "\n", "", "feat", "=", "output_aux", "[", "layer", "]", "\n", "if", "normalize", ":", "\n", "                ", "feat", "=", "feat", "/", "feat", ".", "norm", "(", ")", "\n", "", "cpu_feat", "=", "feat", ".", "to", "(", "cpu_device", ")", "\n", "feats", ".", "append", "(", "cpu_feat", ")", "\n", "out_dict", "[", "img_id", ".", "item", "(", ")", "]", "=", "{", "'feat'", ":", "cpu_feat", ",", "'label'", ":", "lbl", ".", "item", "(", ")", "}", "\n", "\n", "", "", "feats", "=", "torch", ".", "cat", "(", "feats", ")", "\n", "\n", "if", "distributed", ":", "\n", "        ", "all_dicts", "=", "all_gather", "(", "out_dict", ")", "\n", "predictions", "=", "{", "}", "\n", "for", "dic", "in", "all_dicts", ":", "\n", "            ", "predictions", ".", "update", "(", "dic", ")", "\n", "", "image_ids", "=", "list", "(", "sorted", "(", "predictions", ".", "keys", "(", ")", ")", ")", "\n", "\n", "all_feats", "=", "[", "]", "\n", "all_labels", "=", "[", "]", "\n", "for", "img_id", "in", "image_ids", ":", "\n", "            ", "all_feats", ".", "append", "(", "predictions", "[", "img_id", "]", "[", "'feat'", "]", ")", "\n", "all_labels", ".", "append", "(", "predictions", "[", "img_id", "]", "[", "'label'", "]", ")", "\n", "\n", "", "all_feats", "=", "torch", ".", "cat", "(", "all_feats", ")", "\n", "feats", "=", "all_feats", "\n", "\n", "all_labels", "=", "torch", ".", "tensor", "(", "all_labels", ")", "\n", "labels", "=", "all_labels", ".", "numpy", "(", ")", "\n", "synchronize", "(", ")", "\n", "", "return", "feats", ",", "np", ".", "array", "(", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.rescale_cosine_similarity": [[70, 72], ["None"], "function", ["None"], ["", "def", "rescale_cosine_similarity", "(", "similarities", ")", ":", "\n", "    ", "return", "(", "similarities", "+", "1", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.compute_source_prototypes": [[73, 118], ["evals.get_features", "set", "prototypes.keys", "numpy.stack", "numpy.zeros", "enumerate", "source_gt_labels.tolist", "source_this_label.mean", "cls_prototype.norm", "np.stack.append", "len", "len", "evals.rescale_cosine_similarity", "rescale_cosine_similarity.sort", "np.zeros.mean", "evals.rescale_cosine_similarity", "rescale_cosine_similarity.item", "len"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.get_features", "home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.rescale_cosine_similarity", "home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.rescale_cosine_similarity"], ["", "def", "compute_source_prototypes", "(", "P", ",", "model", ",", "source_loader", ",", "eval_layer", ",", "distributed", "=", "False", ")", ":", "\n", "\n", "# we extract features for all source samples", "\n", "    ", "source_feats", ",", "source_gt_labels", "=", "get_features", "(", "P", ",", "model", ",", "[", "source_loader", "]", ",", "layer", "=", "eval_layer", ",", "normalize", "=", "True", ",", "distributed", "=", "distributed", ")", "\n", "\n", "# we compute prototypes for source classes", "\n", "labels_set", "=", "set", "(", "source_gt_labels", ".", "tolist", "(", ")", ")", "\n", "prototypes", "=", "{", "}", "\n", "for", "label", "in", "labels_set", ":", "\n", "        ", "lbl_mask", "=", "source_gt_labels", "==", "label", "\n", "source_this_label", "=", "source_feats", "[", "lbl_mask", "]", "\n", "prototypes", "[", "label", "]", "=", "source_this_label", ".", "mean", "(", "dim", "=", "0", ")", "\n", "\n", "# let's move prototypes to the hypersphere. We also compute average cluster compactness", "\n", "# we will need a threshold which will be based on this value ", "\n", "", "hyp_prototypes", "=", "[", "]", "\n", "cls_compactness_tot", "=", "0", "\n", "for", "cls", "in", "prototypes", ".", "keys", "(", ")", ":", "\n", "        ", "cls_prototype", "=", "prototypes", "[", "cls", "]", "\n", "norm", "=", "cls_prototype", ".", "norm", "(", ")", "\n", "hyp_prototype", "=", "cls_prototype", "/", "norm", "\n", "hyp_prototypes", ".", "append", "(", "hyp_prototype", ")", "\n", "\n", "source_this_label", "=", "source_feats", "[", "source_gt_labels", "==", "cls", "]", "\n", "tot_similarities", "=", "0", "\n", "for", "src_feat", "in", "source_this_label", ":", "\n", "            ", "similarity", "=", "(", "src_feat", "*", "hyp_prototype", ")", ".", "sum", "(", ")", "\n", "similarity", "=", "rescale_cosine_similarity", "(", "similarity", ")", "\n", "tot_similarities", "+=", "similarity", ".", "item", "(", ")", "\n", "", "avg_cls_similarity", "=", "tot_similarities", "/", "len", "(", "source_this_label", ")", "\n", "cls_compactness_tot", "+=", "avg_cls_similarity", "\n", "", "cls_compactness_avg", "=", "cls_compactness_tot", "/", "len", "(", "labels_set", ")", "\n", "\n", "hyp_prototypes", "=", "np", ".", "stack", "(", "hyp_prototypes", ")", "\n", "\n", "# we also compute average distance between nearest prototypes", "\n", "topk_sims", "=", "np", ".", "zeros", "(", "(", "len", "(", "hyp_prototypes", ")", ")", ")", "\n", "for", "idx", ",", "hyp_prt", "in", "enumerate", "(", "hyp_prototypes", ")", ":", "\n", "        ", "similarities", "=", "(", "hyp_prt", "*", "hyp_prototypes", ")", ".", "sum", "(", "1", ")", "\n", "similarities", "=", "rescale_cosine_similarity", "(", "similarities", ")", "\n", "similarities", ".", "sort", "(", ")", "\n", "topk_val", "=", "similarities", "[", "-", "2", "]", "\n", "topk_sims", "[", "idx", "]", "=", "topk_val", "\n", "\n", "", "return", "source_feats", ",", "hyp_prototypes", ",", "cls_compactness_avg", ",", "topk_sims", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.compute_threshold_multiplier": [[119, 124], ["math.log"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.log"], ["", "def", "compute_threshold_multiplier", "(", "avg_compactness", ",", "avg_cls_dist", ")", ":", "\n", "    ", "y", "=", "(", "1", "-", "avg_cls_dist", ")", "\n", "x", "=", "(", "1", "-", "avg_compactness", ")", "\n", "z", "=", "y", "/", "(", "2", "*", "x", ")", "\n", "return", "math", ".", "log", "(", "z", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.compute_confident_known_mask": [[125, 163], ["isinstance", "model.eval", "evals.compute_source_prototypes", "evals.get_features", "numpy.zeros", "enumerate", "evals.compute_threshold_multiplier", "len", "numpy.ones", "numpy.ones", "zip", "evals.rescale_cosine_similarity", "rescale_cosine_similarity.max", "rescale_cosine_similarity.argmax", "tgt_gt_label.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.compute_source_prototypes", "home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.get_features", "home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.compute_threshold_multiplier", "home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.rescale_cosine_similarity"], ["", "def", "compute_confident_known_mask", "(", "P", ",", "model", ",", "source_loader", ",", "target_loader", ",", "logger", ",", "eval_layer", "=", "\"simclr\"", ")", ":", "\n", "\n", "    ", "distributed", "=", "isinstance", "(", "source_loader", ".", "sampler", ",", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# compute source prototypes and compactness for known classes", "\n", "_", ",", "hyp_prototypes", ",", "cls_compactness_avg", ",", "avg_min_sim", "=", "compute_source_prototypes", "(", "P", ",", "model", ",", "source_loader", ",", "eval_layer", ",", "distributed", "=", "distributed", ")", "\n", "\n", "# now we get features for target samples ", "\n", "target_feats", ",", "target_gt_labels", "=", "get_features", "(", "P", ",", "model", ",", "[", "target_loader", "]", ",", "layer", "=", "eval_layer", ",", "normalize", "=", "True", ",", "distributed", "=", "distributed", ")", "\n", "\n", "# for each target sample we measure distance from nearest prototype. If ditance is lower than a threshold we select ", "\n", "#this sample and the prototype label as pseudo label ", "\n", "\n", "threshold_multiplier", "=", "compute_threshold_multiplier", "(", "cls_compactness_avg", ",", "avg_min_sim", ")", "/", "2", "\n", "known_threshold", "=", "(", "1", "-", "cls_compactness_avg", ")", "*", "threshold_multiplier", "\n", "\n", "known_mask", "=", "np", ".", "zeros", "(", "(", "len", "(", "target_feats", ")", ")", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "known_pseudo_labels", "=", "P", ".", "n_classes", "*", "np", ".", "ones", "(", "(", "len", "(", "target_feats", ")", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "\n", "known_gt_labels", "=", "P", ".", "n_classes", "*", "np", ".", "ones", "(", "(", "len", "(", "target_feats", ")", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "\n", "for", "idx", ",", "(", "tgt_feat", ",", "tgt_gt_label", ")", "in", "enumerate", "(", "zip", "(", "target_feats", ",", "target_gt_labels", ")", ")", ":", "\n", "\n", "        ", "similarities", "=", "(", "tgt_feat", "*", "hyp_prototypes", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "similarities", "=", "rescale_cosine_similarity", "(", "similarities", ")", "\n", "\n", "highest", "=", "similarities", ".", "max", "(", ")", "\n", "cls_id", "=", "similarities", ".", "argmax", "(", ")", "\n", "\n", "# check whether it is near enough to nearest prototype to be considered known", "\n", "if", "highest", ">=", "(", "1", "-", "known_threshold", ")", ":", "\n", "            ", "known_mask", "[", "idx", "]", "=", "True", "\n", "known_pseudo_labels", "[", "idx", "]", "=", "cls_id", "\n", "\n", "", "known_gt_labels", "[", "idx", "]", "=", "tgt_gt_label", ".", "item", "(", ")", "\n", "if", "tgt_gt_label", ">", "P", ".", "n_classes", ":", "# unknown class", "\n", "            ", "known_gt_labels", "[", "idx", "]", "=", "P", ".", "n_classes", "\n", "\n", "", "", "return", "known_mask", ",", "known_pseudo_labels", ",", "known_gt_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.openset_eval": [[164, 227], ["isinstance", "model.eval", "evals.compute_source_prototypes", "print", "evals.get_features", "numpy.zeros", "numpy.zeros", "evals.compute_threshold_multiplier", "zip", "numpy.mean", "numpy.mean", "evals.rescale_cosine_similarity", "rescale_cosine_similarity.max", "rescale_cosine_similarity.argmax", "print", "print", "print", "print", "logger.log", "logger.log", "logger.log", "logger.log", "len", "len"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.compute_source_prototypes", "home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.get_features", "home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.compute_threshold_multiplier", "home.repos.pwc.inspect_result.silvia1993_HyMOS.evals.evals.rescale_cosine_similarity", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.log", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.log", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.log", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.log"], ["", "def", "openset_eval", "(", "P", ",", "model", ",", "source_loader", ",", "target_loader", ",", "logger", ",", "eval_layer", "=", "\"simclr\"", ")", ":", "\n", "\n", "    ", "distributed", "=", "isinstance", "(", "source_loader", ".", "sampler", ",", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "source_feats", ",", "hyp_prototypes", ",", "cls_compactness_avg", ",", "avg_min_sim", "=", "compute_source_prototypes", "(", "P", ",", "model", ",", "source_loader", ",", "eval_layer", ",", "distributed", "=", "distributed", ")", "\n", "print", "(", "f\"Class compactness avg: {cls_compactness_avg}, avg_min_sim: {avg_min_sim}\"", ")", "\n", "\n", "# now we get features for target samples ", "\n", "target_feats", ",", "target_gt_labels", "=", "get_features", "(", "P", ",", "model", ",", "[", "target_loader", "]", ",", "layer", "=", "eval_layer", ",", "normalize", "=", "True", ",", "distributed", "=", "distributed", ")", "\n", "\n", "# define counters we need for openset eval", "\n", "samples_per_class", "=", "np", ".", "zeros", "(", "P", ".", "n_classes", "+", "1", ")", "#46", "\n", "correct_pred_per_class", "=", "np", ".", "zeros", "(", "P", ".", "n_classes", "+", "1", ")", "#46", "\n", "\n", "# for each target sample we have to make a predictions. So we compare it with all the prototypes. ", "\n", "# the sample is associated with the class of the nearest prototype if its similarity with this prototype ", "\n", "# is higher than a certain threshold", "\n", "threshold_multiplier", "=", "compute_threshold_multiplier", "(", "cls_compactness_avg", ",", "avg_min_sim", ")", "\n", "normality_threshold", "=", "(", "1", "-", "cls_compactness_avg", ")", "*", "threshold_multiplier", "\n", "for", "tgt_feat", ",", "tgt_gt_label", "in", "zip", "(", "target_feats", ",", "target_gt_labels", ")", ":", "\n", "\n", "        ", "similarities", "=", "(", "tgt_feat", "*", "hyp_prototypes", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "similarities", "=", "rescale_cosine_similarity", "(", "similarities", ")", "\n", "\n", "highest", "=", "similarities", ".", "max", "(", ")", "\n", "cls_id", "=", "similarities", ".", "argmax", "(", ")", "\n", "\n", "# check whether it is near enough to nearest prototype to be considered known", "\n", "if", "highest", "<", "(", "1", "-", "normality_threshold", ")", ":", "\n", "# this is the unknown cls_id", "\n", "            ", "cls_id", "=", "P", ".", "n_classes", "\n", "\n", "# accumulate prediction", "\n", "", "if", "tgt_gt_label", ">", "P", ".", "n_classes", ":", "\n", "            ", "tgt_gt_label", "=", "P", ".", "n_classes", "\n", "", "samples_per_class", "[", "tgt_gt_label", "]", "+=", "1", "\n", "if", "cls_id", "==", "tgt_gt_label", ":", "\n", "            ", "correct_pred_per_class", "[", "cls_id", "]", "+=", "1", "\n", "\n", "", "", "acc_os_star", "=", "np", ".", "mean", "(", "correct_pred_per_class", "[", "0", ":", "len", "(", "correct_pred_per_class", ")", "-", "1", "]", "/", "samples_per_class", "[", "0", ":", "len", "(", "correct_pred_per_class", ")", "-", "1", "]", ")", "\n", "acc_unknown", "=", "(", "correct_pred_per_class", "[", "-", "1", "]", "/", "samples_per_class", "[", "-", "1", "]", ")", "\n", "acc_hos", "=", "2", "*", "(", "acc_os_star", "*", "acc_unknown", ")", "/", "(", "acc_os_star", "+", "acc_unknown", ")", "\n", "acc_os", "=", "np", ".", "mean", "(", "correct_pred_per_class", "/", "samples_per_class", ")", "\n", "\n", "acc_os", "*=", "100", "\n", "acc_os_star", "*=", "100", "\n", "acc_unknown", "*=", "100", "\n", "acc_hos", "*=", "100", "\n", "\n", "x", "=", "(", "1", "-", "cls_compactness_avg", ")", "\n", "y", "=", "(", "1", "-", "avg_min_sim", ")", "\n", "\n", "if", "logger", "is", "None", ":", "\n", "        ", "print", "(", "'[OS %6f]'", "%", "(", "acc_os", ")", ")", "\n", "print", "(", "'[OS* %6f]'", "%", "(", "acc_os_star", ")", ")", "\n", "print", "(", "'[UNK %6f]'", "%", "(", "acc_unknown", ")", ")", "\n", "print", "(", "'[HOS %6f]'", "%", "(", "acc_hos", ")", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "log", "(", "'[OS %6f]'", "%", "(", "acc_os", ")", ")", "\n", "logger", ".", "log", "(", "'[OS* %6f]'", "%", "(", "acc_os_star", ")", ")", "\n", "logger", ".", "log", "(", "'[UNK %6f]'", "%", "(", "acc_unknown", ")", ")", "\n", "logger", ".", "log", "(", "'[HOS %6f]'", "%", "(", "acc_hos", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.MultiDataTransform.__init__": [[18, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transform", ")", ":", "\n", "        ", "self", ".", "transform1", "=", "transform", "\n", "self", ".", "transform2", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.MultiDataTransform.__call__": [[22, 26], ["torchvision.datasets.MultiDataTransform.transform1", "torchvision.datasets.MultiDataTransform.transform2"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "x1", "=", "self", ".", "transform1", "(", "sample", ")", "\n", "x2", "=", "self", ".", "transform2", "(", "sample", ")", "\n", "return", "x1", ",", "x2", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.FileDataset.__init__": [[74, 83], ["torch.Dataset.__init__", "datasets._dataset_info"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets._dataset_info"], ["    ", "def", "__init__", "(", "self", ",", "benchmark", ",", "data_file", ",", "transform", "=", "None", ",", "add_idx", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "root_dir", "=", "DATA_PATH", "\n", "self", ".", "benchmark", "=", "benchmark", "\n", "self", ".", "data_file", "=", "data_file", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "names", ",", "self", ".", "labels", "=", "_dataset_info", "(", "self", ".", "data_file", ")", "\n", "self", ".", "add_idx", "=", "add_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.FileDataset.__len__": [[84, 86], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.FileDataset.__getitem__": [[87, 102], ["os.path.expanduser", "open", "PIL.Image.open().convert", "torchvision.datasets.FileDataset.transform", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.ColorJitterLayer.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "target", "=", "self", ".", "names", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "\n", "path", "=", "os", ".", "path", ".", "expanduser", "(", "self", ".", "root_dir", "+", "f\"{self.benchmark}/{path}\"", ")", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "img_size", "=", "img", ".", "size", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "add_idx", ":", "\n", "            ", "return", "img", ",", "target", ",", "index", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.ClassDataset.__init__": [[104, 111], ["torch.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "names", ",", "label", ",", "transform", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "names", "=", "names", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.ClassDataset.__len__": [[112, 114], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.ClassDataset.__getitem__": [[115, 128], ["os.path.expanduser", "open", "PIL.Image.open().convert", "torchvision.datasets.ClassDataset.transform", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.ColorJitterLayer.transform"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "target", "=", "self", ".", "names", "[", "index", "]", ",", "self", ".", "label", "\n", "\n", "path", "=", "os", ".", "path", ".", "expanduser", "(", "self", ".", "root", "+", "f\"/{path}\"", ")", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "img", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "img_size", "=", "img", ".", "size", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "target", ",", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.DistributedMultiSourceRandomSampler.__init__": [[258, 281], ["dist.get_world_size", "dist.get_rank", "isinstance", "ValueError", "ValueError", "dist.is_available", "RuntimeError", "dist.is_available", "RuntimeError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.get_world_size", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.get_rank"], ["def", "__init__", "(", "self", ",", "data_source", ",", "num_samples", "=", "None", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "\n", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "_num_samples", "=", "num_samples", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "data_source", ",", "ConcatDataset", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'data_source should be instance of ConcatDataset'", ")", "\n", "\n", "", "self", ".", "cumulative_sizes", "=", "self", ".", "data_source", ".", "cumulative_sizes", "\n", "\n", "if", "not", "isinstance", "(", "self", ".", "num_samples", ",", "int", ")", "or", "self", ".", "num_samples", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"num_samples should be a positive integer \"", "\n", "\"value, but got num_samples={}\"", ".", "format", "(", "self", ".", "num_samples", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.DistributedMultiSourceRandomSampler.num_samples": [[282, 288], ["len"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "num_samples", "(", "self", ")", ":", "\n", "# dataset size might change at runtime", "\n", "        ", "if", "self", ".", "_num_samples", "is", "None", ":", "\n", "            ", "return", "len", "(", "self", ".", "data_source", ")", "\n", "", "return", "self", ".", "_num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.DistributedMultiSourceRandomSampler.__iter__": [[289, 300], ["range", "iter", "len", "torch.randint().tolist", "torch.randint().tolist", "torch.randint().tolist", "torch.randint().tolist", "indexes.append", "zip", "torch.randint", "torch.randint", "torch.randint", "torch.randint"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indexes", "=", "[", "]", "\n", "low", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cumulative_sizes", ")", ")", ":", "\n", "            ", "high", "=", "self", ".", "cumulative_sizes", "[", "i", "]", "\n", "data_idx", "=", "torch", ".", "randint", "(", "low", "=", "low", ",", "high", "=", "high", ",", "size", "=", "(", "self", ".", "num_samples", ",", ")", ",", "dtype", "=", "torch", ".", "int64", ")", ".", "tolist", "(", ")", "\n", "indexes", ".", "append", "(", "data_idx", ")", "\n", "low", "=", "high", "\n", "", "interleave_indexes", "=", "[", "x", "for", "t", "in", "zip", "(", "*", "indexes", ")", "for", "x", "in", "t", "]", "\n", "interleave_indexes", "=", "interleave_indexes", "[", "self", ".", "rank", ":", "self", ".", "cumulative_sizes", "[", "-", "1", "]", ":", "self", ".", "num_replicas", "]", "# distributed", "\n", "return", "iter", "(", "interleave_indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.DistributedMultiSourceRandomSampler.__len__": [[301, 303], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.BalancedMultiSourceRandomSampler.__init__": [[315, 381], ["len", "range", "torchvision.datasets.BalancedMultiSourceRandomSampler.generate_list", "int", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "enumerate", "torch.cat().tolist", "torch.cat().tolist", "torch.cat().tolist", "torch.cat().tolist", "isinstance", "ValueError", "len", "sizes.extend", "range", "print", "range", "int", "isinstance", "ValueError", "random.shuffle", "len", "list_indices.pop", "my_chunks.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "range", "range"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.BalancedMultiSourceRandomSampler.generate_list"], ["def", "__init__", "(", "self", ",", "data_source", ",", "batch_p", ",", "rank", ",", "world_size", ")", ":", "\n", "        ", "self", ".", "rank", "=", "rank", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "batch_p", "=", "batch_p", "\n", "\n", "if", "not", "isinstance", "(", "data_source", ",", "ConcatDataset", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'data_source should be instance of ConcatDataset'", ")", "\n", "\n", "", "for", "el", "in", "data_source", ".", "datasets", ":", "\n", "            ", "if", "not", "isinstance", "(", "el", ",", "ConcatDataset", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"data_source should be a concatdataset of concat datasets\"", ")", "\n", "\n", "", "", "n_classes", "=", "len", "(", "data_source", ".", "datasets", ")", "\n", "sources_per_class", "=", "{", "}", "\n", "lengths_dict", "=", "{", "}", "\n", "ids_dict", "=", "{", "}", "\n", "\n", "low", "=", "0", "\n", "for", "cls_id", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "cls_ds", "=", "data_source", ".", "datasets", "[", "cls_id", "]", "\n", "# number of sources for this class", "\n", "n_sources", "=", "len", "(", "cls_ds", ".", "cumulative_sizes", ")", "\n", "sources_per_class", "[", "cls_id", "]", "=", "n_sources", "\n", "\n", "# size of each source for this class", "\n", "sizes", "=", "[", "cls_ds", ".", "cumulative_sizes", "[", "0", "]", "]", "\n", "sizes", ".", "extend", "(", "[", "(", "cls_ds", ".", "cumulative_sizes", "[", "el", "]", "-", "cls_ds", ".", "cumulative_sizes", "[", "el", "-", "1", "]", ")", "for", "el", "in", "range", "(", "1", ",", "n_sources", ")", "]", ")", "\n", "lengths_dict", "[", "cls_id", "]", "=", "sizes", "\n", "\n", "# elements of each source for this class -> taken in random order!", "\n", "low_this", "=", "0", "\n", "\n", "src_dict", "=", "{", "}", "\n", "for", "src", "in", "range", "(", "n_sources", ")", ":", "\n", "                ", "high", "=", "cls_ds", ".", "cumulative_sizes", "[", "src", "]", "\n", "ids_src", "=", "[", "el", "for", "el", "in", "range", "(", "low", "+", "low_this", ",", "high", "+", "low", ")", "]", "\n", "\n", "# random order", "\n", "random", ".", "shuffle", "(", "ids_src", ")", "\n", "src_dict", "[", "src", "]", "=", "ids_src", "\n", "\n", "low_this", "=", "high", "\n", "", "ids_dict", "[", "cls_id", "]", "=", "src_dict", "\n", "low", "+=", "high", "\n", "\n", "", "list_strs", ",", "list_indices", "=", "BalancedMultiSourceRandomSampler", ".", "generate_list", "(", "n_classes", ",", "sources_per_class", ",", "batch_p", ",", "lengths_dict", ",", "ids_dict", ")", "\n", "\n", "# now we split indices among processes", "\n", "num_chunks", "=", "int", "(", "len", "(", "list_indices", ")", "/", "self", ".", "batch_p", ")", "\n", "\n", "while", "not", "num_chunks", "%", "self", ".", "world_size", "==", "0", ":", "\n", "            ", "print", "(", "\"Removing some data as dataset size is not divisible per number of processes\"", ")", "\n", "for", "_", "in", "range", "(", "batch_p", ")", ":", "\n", "                ", "list_indices", ".", "pop", "(", ")", "\n", "", "num_chunks", "=", "int", "(", "len", "(", "list_indices", ")", "/", "self", ".", "batch_p", ")", "\n", "\n", "", "indices_tensor", "=", "torch", ".", "tensor", "(", "list_indices", ")", "\n", "chunks", "=", "torch", ".", "chunk", "(", "indices_tensor", ",", "num_chunks", ")", "\n", "\n", "starts_from", "=", "self", ".", "rank", "\n", "my_chunks", "=", "[", "]", "\n", "for", "idx", ",", "ch", "in", "enumerate", "(", "chunks", ")", ":", "\n", "            ", "if", "(", "idx", "-", "starts_from", ")", "%", "self", ".", "world_size", "==", "0", ":", "\n", "                ", "my_chunks", ".", "append", "(", "ch", ")", "\n", "", "", "my_indices", "=", "torch", ".", "cat", "(", "my_chunks", ")", ".", "tolist", "(", ")", "\n", "self", ".", "indices", "=", "my_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.BalancedMultiSourceRandomSampler.generate_list": [[382, 502], ["max", "range", "random.shuffle", "iter", "range", "max", "range", "datasets.cycle", "len", "next", "queue_this_class.append", "queue_this_class_ids.append", "range", "len", "range", "out.append", "out_ids.append", "random.randrange", "random.randrange", "q_this_class_ids.pop", "q_this_class.pop"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.cycle"], ["", "@", "staticmethod", "\n", "def", "generate_list", "(", "n_classes", ",", "sources_per_class", ",", "batch_p", ",", "lengths_dict", ",", "ids_dict", ")", ":", "\n", "        ", "\"\"\"\n        n_classes -> total number of classes\n        sources_per_class -> dict with {class_id : number of sources containing this class}\n        batch_p -> number of samples for each class in a block\n        lengths_dict -> number of samples in each class for each source. Ex class 0 has K=sources_per_class[0] sources. lengths[0] = [len_class_0_source_1, ..., len_class_0_source_K] \n        ids_dict -> each sample has a unique identifier. This identifiers are those that should be inserted in the final list. This is a dict that contains for \n        each class and each souce a list of ids\n        Should return a list which can be divided in blocks of size batch_p. Each block contains batch_p \n        elements of the same class. Subsequent blocks refer to different classes. \n        The sampling should always be done with replacement in order to maintain balancing. In particular\n         - if for a certain class one source has less samples than the others those samples should be selected\n         more often in order to rebalance the various sources;\n         - if a certain class has in total a lower number of samples w.r.t. the others it should still appear in the \n         same number of blocks. \n         Therefore the correct approach is:\n          - we compute the number of samples that we need for each class (max of each class number of sources*max_source_length)\n          - for each class we randomly sample from the various sources (in an alternating fashion) until we reach the desired length\n        Example of result with:\n         - n_classes = 6\n         - sources_per_class = {0:5,1:5,2:5,3:5,4:5,5:5} # -> each class has 5 sources\n         - batch_p = 3\n         - lengths_dict = {0:[8,8,8,8,8],1:[8,8,8,8,8],2:[8,8,8,8,8],3:[8,8,8,8,8],4:[8,8,8,8,8],5:[8,8,8,8,8]\n         - ids_dict = {}\n        OUTPUT: [\n        D0C0E0, D1C0E0, D2C0E0,\n        D0C1E0, D1C1E0, D2C1E0,\n        D0C2E0, D1C2E0, D2C2E0,\n        D0C3E0, D1C3E0, D2C3E0,\n        D0C4E0, D1C4E0, D2C4E0,\n        D0C5E0, D1C5E0, D2C5E0,\n        D3C0E0, D4C0E0, D0C0E1,\n        D3C1E0, D4C1E0, D0C1E1,\n        D3C2E0, D4C2E0, D0C2E1,\n        D3C3E0, D4C3E0, D0C3E1,\n        D3C4E0, D4C4E0, D0C4E1,\n        D3C5E0, D4C5E0, D0C5E1,\n        D1C0E1, D2C0E1, D3C0E1,\n        D1C1E1, D2C1E1, D3C1E1,\n        D1C2E1, D2C2E1, D3C2E1,\n        D1C3E1, D2C3E1, D3C3E1,\n        D1C4E1, D2C4E1, D3C4E1,\n        D1C5E1, D2C5E1, D3C5E1,\n        D4C0E1, D0C0E2, D1C0E2,\n        D4C1E1, D0C1E2, D1C1E2,\n        D4C2E1, D0C2E2, D1C2E2,\n        D4C3E1, D0C3E2, D1C3E2,\n        D4C4E1, D0C4E2, D1C4E2,\n        D4C5E1, D0C5E2, D1C5E2,\n        ...\n        ]\n        First of all we compute the desired length for each class queue. \n        So for each class we compute num_sources*len_largest_source and we get the max of those values\n        Then we create a queue for each class with the desired length and alternating samples from the various\n        sources.\n        We first create some intermediate parts that will help in finalizing the last list\n        first for each source for each class we create a queue of elements:\n        queue_C0_D0: [E0,E1,E2,E3,E4,E5,E6,E7]\n        queue_C0_D1: [E0,E1,E2,E3,E4,E5,E6,E7]\n        ...\n        here we should take into account that sources should be balanced and therefore for those sources\n        having a lower number of sample w.r.t. the others we will perform replacement\n        Then for each class we create a queue that contains elements of that class alternating sources\n        queue_C0 = [D0E0, D1E0, D2E0, D3E0, D4E0, D0E1, D1E1, D2E1, D3E1, D4E1, D0E2, D1E2, ...\n        At this point we have a queue for each class. However it is possible that some queues are longer than others.\n        Through resampling we should fix this so that we can keep the balancing between classes. \n        When resampling we should keep the alternating strategy for sources.\n        \"\"\"", "\n", "\n", "# compute desired length ", "\n", "cls_sizes", "=", "[", "max", "(", "lengths_dict", "[", "cls_id", "]", ")", "*", "sources_per_class", "[", "cls_id", "]", "for", "cls_id", "in", "range", "(", "n_classes", ")", "]", "\n", "\n", "max_size", "=", "max", "(", "cls_sizes", ")", "\n", "\n", "desired_class_len", "=", "max_size", "\n", "\n", "# we duplicate each data structure", "\n", "# simply queues contains strings -> each string tell us how an element was chosen", "\n", "# while queues_ids contains the real ids", "\n", "queues", "=", "{", "}", "\n", "queues_ids", "=", "{", "}", "\n", "\n", "for", "cls_id", "in", "range", "(", "n_classes", ")", ":", "\n", "\n", "            ", "n_sources", "=", "sources_per_class", "[", "cls_id", "]", "\n", "ids_this_class", "=", "ids_dict", "[", "cls_id", "]", "\n", "len_sources", "=", "lengths_dict", "[", "cls_id", "]", "\n", "queue_this_class", "=", "[", "]", "\n", "queue_this_class_ids", "=", "[", "]", "\n", "\n", "src_list", "=", "[", "idx", "for", "idx", "in", "range", "(", "n_sources", ")", "]", "\n", "random", ".", "shuffle", "(", "src_list", ")", "\n", "src_iter", "=", "iter", "(", "cycle", "(", "src_list", ")", ")", "\n", "while", "len", "(", "queue_this_class", ")", "<", "desired_class_len", ":", "\n", "                ", "src", "=", "next", "(", "src_iter", ")", "\n", "ids_this_src", "=", "ids_this_class", "[", "src", "]", "\n", "len_this_src", "=", "len_sources", "[", "src", "]", "\n", "queue_this_class", ".", "append", "(", "f\"D{src}E{random.randrange(len_this_src)}\"", ")", "\n", "queue_this_class_ids", ".", "append", "(", "ids_this_src", "[", "random", ".", "randrange", "(", "len_this_src", ")", "]", ")", "\n", "\n", "", "queues", "[", "cls_id", "]", "=", "queue_this_class", "\n", "queues_ids", "[", "cls_id", "]", "=", "queue_this_class_ids", "\n", "\n", "", "out", "=", "[", "]", "\n", "out_ids", "=", "[", "]", "\n", "\n", "while", "True", ":", "\n", "            ", "found", "=", "False", "\n", "for", "cls_id", "in", "range", "(", "n_classes", ")", ":", "\n", "                ", "q_this_class", "=", "queues", "[", "cls_id", "]", "\n", "q_this_class_ids", "=", "queues_ids", "[", "cls_id", "]", "\n", "if", "len", "(", "q_this_class", ")", ">=", "batch_p", ":", "\n", "                    ", "found", "=", "True", "\n", "for", "el", "in", "range", "(", "batch_p", ")", ":", "\n", "                        ", "out", ".", "append", "(", "f'C{cls_id}{q_this_class.pop(0)}'", ")", "\n", "out_ids", ".", "append", "(", "q_this_class_ids", ".", "pop", "(", "0", ")", ")", "\n", "", "", "", "if", "not", "found", ":", "\n", "                ", "break", "\n", "", "", "return", "out", ",", "out_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.BalancedMultiSourceRandomSampler.__iter__": [[503, 505], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.BalancedMultiSourceRandomSampler.__len__": [[506, 508], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.cycle": [[27, 32], ["random.shuffle"], "function", ["None"], ["", "", "def", "cycle", "(", "iterable", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "for", "x", "in", "iterable", ":", "\n", "            ", "yield", "x", "\n", "", "random", ".", "shuffle", "(", "iterable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.get_train_transform": [[33, 43], ["torchvision.transforms.Compose", "datasets.MultiDataTransform", "torchvision.transforms.Resize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "", "def", "get_train_transform", "(", ")", ":", "\n", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "return", "MultiDataTransform", "(", "train_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.get_test_transform_crop": [[44, 52], ["torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "get_test_transform_crop", "(", ")", ":", "\n", "    ", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "return", "test_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.get_test_transform": [[53, 59], ["torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "get_test_transform", "(", ")", ":", "\n", "    ", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "return", "test_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets._dataset_info": [[60, 72], ["open", "f.readlines", "row.split.split", "file_names.append", "labels.append", "int"], "function", ["None"], ["", "def", "_dataset_info", "(", "txt_labels", ")", ":", "\n", "    ", "with", "open", "(", "txt_labels", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "images_list", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "file_names", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "row", "in", "images_list", ":", "\n", "        ", "row", "=", "row", ".", "split", "(", "' '", ")", "\n", "file_names", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "labels", ".", "append", "(", "int", "(", "row", "[", "1", "]", ")", ")", "\n", "\n", "", "return", "file_names", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.get_pseudo_targets": [[129, 139], ["datasets._dataset_info", "numpy.array", "datasets.get_class_datasets", "selected_names.tolist", "selected_labels.tolist"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets._dataset_info", "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.get_class_datasets"], ["", "", "def", "get_pseudo_targets", "(", "P", ",", "known_mask", ",", "known_pseudo_labels", ",", "transform", ",", "n_classes", ")", ":", "\n", "    ", "file_path", "=", "f'data/data_txt/{P.dataset}/{P.test_domain}.txt'", "\n", "\n", "names", ",", "_", "=", "_dataset_info", "(", "file_path", ")", "\n", "np_names", "=", "np", ".", "array", "(", "names", ")", "\n", "\n", "selected_names", "=", "np_names", "[", "known_mask", "]", "\n", "selected_labels", "=", "known_pseudo_labels", "[", "known_mask", "]", "\n", "\n", "return", "get_class_datasets", "(", "P", ".", "dataset", ",", "data_file", "=", "None", ",", "transform", "=", "transform", ",", "names", "=", "selected_names", ".", "tolist", "(", ")", ",", "labels", "=", "selected_labels", ".", "tolist", "(", ")", ",", "n_classes", "=", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.get_class_datasets": [[141, 162], ["os.path.join", "numpy.array", "set", "numpy.array", "numpy.arange", "datasets._dataset_info", "len", "print", "datasets.ClassDataset", "np.array.max"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets._dataset_info"], ["", "def", "get_class_datasets", "(", "benchmark", ",", "data_file", ",", "transform", "=", "None", ",", "names", "=", "None", ",", "labels", "=", "None", ",", "n_classes", "=", "45", ")", ":", "\n", "# from a dataset file it builds a set of datasets, one for each class", "\n", "    ", "if", "names", "is", "None", ":", "\n", "        ", "names", ",", "labels", "=", "_dataset_info", "(", "data_file", ")", "\n", "", "root_dir", "=", "os", ".", "path", ".", "join", "(", "DATA_PATH", ",", "benchmark", ")", "\n", "\n", "names", "=", "np", ".", "array", "(", "names", ")", "\n", "labels_set", "=", "set", "(", "labels", ")", "\n", "labels", "=", "np", ".", "array", "(", "labels", ")", "\n", "all_labels", "=", "np", ".", "arange", "(", "labels", ".", "max", "(", ")", "+", "1", ")", "\n", "\n", "if", "len", "(", "labels_set", ")", "!=", "n_classes", ":", "\n", "        ", "print", "(", "\"One dataset does not contain all the classes!\"", ")", "\n", "\n", "", "datasets", "=", "{", "}", "\n", "for", "lbl", "in", "labels_set", ":", "\n", "        ", "mask", "=", "labels", "==", "lbl", "\n", "class_names", "=", "names", "[", "mask", "]", "\n", "ds", "=", "ClassDataset", "(", "root_dir", ",", "class_names", ",", "lbl", ",", "transform", ")", "\n", "datasets", "[", "lbl", "]", "=", "ds", "\n", "", "return", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.get_datasets_for_test": [[163, 189], ["datasets.get_test_transform", "datasets.FileDataset", "datasets.FileDataset", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.get_test_transform"], ["", "def", "get_datasets_for_test", "(", "P", ")", ":", "\n", "    ", "test_transform", "=", "get_test_transform", "(", ")", "\n", "\n", "# target", "\n", "benchmark", "=", "P", ".", "dataset", "\n", "file_path", "=", "f'data/data_txt/{benchmark}/{P.test_domain}.txt'", "\n", "target_ds", "=", "FileDataset", "(", "benchmark", ",", "file_path", ",", "test_transform", ",", "add_idx", "=", "True", ")", "\n", "\n", "# source", "\n", "if", "benchmark", "==", "\"OfficeHome\"", ":", "\n", "        ", "source_name", "=", "f\"no_{P.test_domain}OpenSet\"", "\n", "n_classes", "=", "45", "\n", "", "elif", "benchmark", "==", "\"Office31\"", ":", "\n", "        ", "source_name", "=", "f\"no_{P.test_domain}OpenSet\"", "\n", "n_classes", "=", "20", "\n", "", "elif", "benchmark", "==", "\"DomainNet\"", ":", "\n", "        ", "source_name", "=", "\"OpenSet_source_train\"", "\n", "n_classes", "=", "100", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f\"Unknown benchmark {benchmark}\"", ")", "\n", "\n", "", "source_file_path", "=", "f'data/data_txt/{benchmark}/{source_name}.txt'", "\n", "\n", "source_ds", "=", "FileDataset", "(", "benchmark", ",", "source_file_path", ",", "test_transform", ",", "add_idx", "=", "True", ")", "\n", "\n", "return", "source_ds", ",", "target_ds", ",", "n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.get_dataset_2": [[190, 239], ["datasets.get_train_transform", "range", "NotImplementedError", "domains.remove", "datasets.get_class_datasets", "datasets.get_pseudo_targets", "sources.append", "class_datasets.append", "torch.utils.data.dataset.ConcatDataset", "domains.remove", "NotImplementedError", "this_class.append"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.get_train_transform", "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.get_class_datasets", "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.get_pseudo_targets"], ["", "def", "get_dataset_2", "(", "P", ",", "train", "=", "True", ",", "target_known_mask", "=", "None", ",", "target_known_pseudo_labels", "=", "None", ")", ":", "\n", "\n", "    ", "if", "train", ":", "\n", "        ", "transform", "=", "get_train_transform", "(", ")", "\n", "\n", "benchmark", "=", "P", ".", "dataset", "\n", "\n", "domain_datasets", "=", "{", "}", "\n", "if", "benchmark", "==", "\"OfficeHome\"", ":", "\n", "            ", "domains", "=", "[", "\"Art\"", ",", "\"Clipart\"", ",", "\"Product\"", ",", "\"RealWorld\"", "]", "\n", "assert", "P", ".", "test_domain", "in", "domains", ",", "f\"{P.test_domain} unknown!\"", "\n", "domains", ".", "remove", "(", "P", ".", "test_domain", ")", "\n", "sources", "=", "domains", "\n", "n_classes", "=", "45", "\n", "\n", "", "elif", "benchmark", "==", "\"DomainNet\"", ":", "\n", "            ", "sources", "=", "[", "\"infograph\"", ",", "\"painting\"", "]", "\n", "n_classes", "=", "100", "\n", "\n", "", "elif", "benchmark", "==", "\"Office31\"", ":", "\n", "            ", "domains", "=", "[", "\"Amazon\"", ",", "\"Dslr\"", ",", "\"Webcam\"", "]", "\n", "assert", "P", ".", "test_domain", "in", "domains", ",", "f\"{P.test_domain} unknown!\"", "\n", "domains", ".", "remove", "(", "P", ".", "test_domain", ")", "\n", "sources", "=", "domains", "\n", "n_classes", "=", "20", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "f\"Unknown benchmark {benchmark}\"", ")", "\n", "", "for", "domain", "in", "sources", ":", "\n", "            ", "file_path", "=", "f'data/data_txt/{benchmark}/{domain}OpenSet_known.txt'", "\n", "datasets", "=", "get_class_datasets", "(", "benchmark", ",", "file_path", ",", "transform", ",", "n_classes", "=", "n_classes", ")", "\n", "domain_datasets", "[", "domain", "]", "=", "datasets", "\n", "\n", "", "if", "target_known_mask", "is", "not", "None", ":", "\n", "            ", "domain_datasets", "[", "\"pseudo_target\"", "]", "=", "get_pseudo_targets", "(", "P", ",", "target_known_mask", ",", "target_known_pseudo_labels", ",", "transform", ",", "n_classes", "=", "n_classes", ")", "\n", "sources", ".", "append", "(", "\"pseudo_target\"", ")", "\n", "\n", "# now for each class we build a ConcatDataset", "\n", "", "class_datasets", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "n_classes", ")", ":", "\n", "            ", "this_class", "=", "[", "]", "\n", "for", "source", "in", "sources", ":", "\n", "                ", "if", "idx", "in", "domain_datasets", "[", "source", "]", ":", "\n", "                    ", "this_class", ".", "append", "(", "domain_datasets", "[", "source", "]", "[", "idx", "]", ")", "\n", "", "", "class_datasets", ".", "append", "(", "this_class", ")", "\n", "\n", "", "class_datasets", "=", "[", "ConcatDataset", "(", "sets", ")", "for", "sets", "in", "class_datasets", "]", "\n", "return", "class_datasets", ",", "n_classes", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.get_style_dataset": [[241, 248], ["datasets.get_test_transform_crop", "datasets.FileDataset"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.datasets.datasets.get_test_transform_crop"], ["", "", "def", "get_style_dataset", "(", "P", ")", ":", "\n", "    ", "transform", "=", "get_test_transform_crop", "(", ")", "\n", "benchmark", "=", "P", ".", "dataset", "\n", "\n", "file_path", "=", "f'data/data_txt/{benchmark}/{P.test_domain}.txt'", "\n", "ds", "=", "FileDataset", "(", "benchmark", ",", "file_path", ",", "transform", ")", "\n", "return", "ds", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.scheduler.GradualWarmupScheduler.__init__": [[16, 24], ["torch.optim.lr_scheduler._LRScheduler.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "multiplier", ",", "total_epoch", ",", "after_scheduler", "=", "None", ")", ":", "\n", "        ", "self", ".", "multiplier", "=", "multiplier", "\n", "if", "self", ".", "multiplier", "<", "1.", ":", "\n", "            ", "raise", "ValueError", "(", "'multiplier should be greater thant or equal to 1.'", ")", "\n", "", "self", ".", "total_epoch", "=", "total_epoch", "\n", "self", ".", "after_scheduler", "=", "after_scheduler", "\n", "self", ".", "finished", "=", "False", "\n", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.scheduler.GradualWarmupScheduler.get_lr": [[25, 38], ["scheduler.GradualWarmupScheduler.after_scheduler.get_last_lr", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "last_epoch", ">", "self", ".", "total_epoch", ":", "\n", "            ", "if", "self", ".", "after_scheduler", ":", "\n", "                ", "if", "not", "self", ".", "finished", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "base_lrs", "=", "[", "base_lr", "*", "self", ".", "multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "self", ".", "finished", "=", "True", "\n", "", "return", "self", ".", "after_scheduler", ".", "get_last_lr", "(", ")", "\n", "", "return", "[", "base_lr", "*", "self", ".", "multiplier", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n", "", "if", "self", ".", "multiplier", "==", "1.0", ":", "\n", "            ", "return", "[", "base_lr", "*", "(", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "total_epoch", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "base_lr", "*", "(", "(", "self", ".", "multiplier", "-", "1.", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "total_epoch", "+", "1.", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.scheduler.GradualWarmupScheduler.step_ReduceLROnPlateau": [[39, 53], ["print", "zip", "scheduler.GradualWarmupScheduler.after_scheduler.step", "scheduler.GradualWarmupScheduler.after_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.scheduler.GradualWarmupScheduler.step"], ["", "", "def", "step_ReduceLROnPlateau", "(", "self", ",", "metrics", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "print", "(", "\"Warning: reduce lr on plateau!\"", ")", "\n", "if", "epoch", "is", "None", ":", "\n", "            ", "epoch", "=", "self", ".", "last_epoch", "+", "1", "\n", "", "self", ".", "last_epoch", "=", "epoch", "if", "epoch", "!=", "0", "else", "1", "# ReduceLROnPlateau is called at the end of epoch, whereas others are called at beginning", "\n", "if", "self", ".", "last_epoch", "<=", "self", ".", "total_epoch", ":", "\n", "            ", "warmup_lr", "=", "[", "base_lr", "*", "(", "(", "self", ".", "multiplier", "-", "1.", ")", "*", "self", ".", "last_epoch", "/", "self", ".", "total_epoch", "+", "1.", ")", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "warmup_lr", ")", ":", "\n", "                ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "", "else", ":", "\n", "            ", "if", "epoch", "is", "None", ":", "\n", "                ", "self", ".", "after_scheduler", ".", "step", "(", "metrics", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "after_scheduler", ".", "step", "(", "metrics", ",", "epoch", "-", "self", ".", "total_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.scheduler.GradualWarmupScheduler.step": [[54, 65], ["type", "scheduler.GradualWarmupScheduler.step_ReduceLROnPlateau", "super().step", "scheduler.GradualWarmupScheduler.after_scheduler.step", "scheduler.GradualWarmupScheduler.after_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.training.scheduler.GradualWarmupScheduler.step_ReduceLROnPlateau", "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.scheduler.GradualWarmupScheduler.step"], ["", "", "", "def", "step", "(", "self", ",", "epoch", "=", "None", ",", "metrics", "=", "None", ")", ":", "\n", "        ", "if", "type", "(", "self", ".", "after_scheduler", ")", "!=", "ReduceLROnPlateau", ":", "\n", "            ", "if", "self", ".", "finished", "and", "self", ".", "after_scheduler", ":", "\n", "                ", "if", "epoch", "is", "None", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "step", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "after_scheduler", ".", "step", "(", "epoch", "-", "self", ".", "total_epoch", ")", "\n", "", "", "else", ":", "\n", "                ", "return", "super", "(", "GradualWarmupScheduler", ",", "self", ")", ".", "step", "(", "epoch", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "step_ReduceLROnPlateau", "(", "metrics", ",", "epoch", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.contrastive_loss.get_similarity_matrix": [[6, 24], ["torch.mm", "torch.mm", "torch.cat.chunk", "torch.cat", "torch.cat", "torch.cat.t", "torch.cat", "torch.cat", "outputs_gathered.append", "torch.empty_like", "torch.empty_like", "diffdist.all_gather", "range", "torch.get_world_size"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.all_gather", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.get_world_size"], ["def", "get_similarity_matrix", "(", "outputs", ",", "chunk", "=", "2", ",", "multi_gpu", "=", "False", ")", ":", "\n", "    ", "'''\n        Compute similarity matrix\n        - outputs: (B', d) tensor for B' = B * chunk\n        - sim_matrix: (B', B') tensor\n    '''", "\n", "\n", "if", "multi_gpu", ":", "\n", "        ", "outputs_gathered", "=", "[", "]", "\n", "for", "out", "in", "outputs", ".", "chunk", "(", "chunk", ")", ":", "\n", "            ", "gather_t", "=", "[", "torch", ".", "empty_like", "(", "out", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "gather_t", "=", "torch", ".", "cat", "(", "distops", ".", "all_gather", "(", "gather_t", ",", "out", ")", ")", "\n", "outputs_gathered", ".", "append", "(", "gather_t", ")", "\n", "", "outputs", "=", "torch", ".", "cat", "(", "outputs_gathered", ")", "\n", "\n", "", "sim_matrix", "=", "torch", ".", "mm", "(", "outputs", ",", "outputs", ".", "t", "(", ")", ")", "# (B', d), (d, B') -> (B', B')", "\n", "\n", "return", "sim_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.contrastive_loss.get_similarity_matrix_padded": [[25, 56], ["sizes.max", "torch.mm", "torch.mm", "torch.cat.chunk", "torch.cat", "torch.cat", "torch.cat.t", "diffdist.all_gather", "zip", "torch.cat", "torch.cat", "outputs_gathered.append", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "gather_t_out.append", "range", "torch.get_world_size"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.all_gather", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.get_world_size"], ["", "def", "get_similarity_matrix_padded", "(", "outputs", ",", "sizes", ",", "chunk", "=", "2", ",", "multi_gpu", "=", "False", ")", ":", "\n", "    ", "'''\n        Compute similarity matrix\n        - outputs: (B', d) tensor for B' = B * chunk\n        - sim_matrix: (B', B') tensor\n        Padded version: not all gpus have the same batch size. We preallocate considering the maximum size and \n        then select using effective sizes. (ref: https://discuss.pytorch.org/t/how-to-concatenate-different-size-tensors-from-distributed-processes/44819/4)\n    '''", "\n", "\n", "feat_size", "=", "outputs", ".", "shape", "[", "1", "]", "\n", "\n", "maxsize", "=", "sizes", ".", "max", "(", ")", "\n", "if", "multi_gpu", ":", "\n", "        ", "outputs_gathered", "=", "[", "]", "\n", "for", "out", "in", "outputs", ".", "chunk", "(", "chunk", ")", ":", "\n", "            ", "if", "out", ".", "shape", "[", "0", "]", "<", "maxsize", ":", "\n", "                ", "empty", "=", "torch", ".", "empty", "(", "(", "maxsize", ",", "feat_size", ")", ",", "dtype", "=", "out", ".", "dtype", ",", "device", "=", "out", ".", "device", ")", "\n", "empty", "[", ":", "out", ".", "shape", "[", "0", "]", "]", "=", "out", "\n", "out", "=", "empty", "\n", "", "gather_t", "=", "[", "torch", ".", "empty", "(", "(", "maxsize", ",", "feat_size", ")", ",", "dtype", "=", "out", ".", "dtype", ",", "layout", "=", "out", ".", "layout", ",", "device", "=", "out", ".", "device", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "gather_t", "=", "distops", ".", "all_gather", "(", "gather_t", ",", "out", ")", "\n", "gather_t_out", "=", "[", "]", "\n", "for", "g", ",", "size", "in", "zip", "(", "gather_t", ",", "sizes", ")", ":", "\n", "                ", "gather_t_out", ".", "append", "(", "g", "[", ":", "size", "]", ")", "\n", "", "gather_t", "=", "torch", ".", "cat", "(", "gather_t_out", ")", "\n", "outputs_gathered", ".", "append", "(", "gather_t", ")", "\n", "", "outputs", "=", "torch", ".", "cat", "(", "outputs_gathered", ")", "\n", "\n", "", "sim_matrix", "=", "torch", ".", "mm", "(", "outputs", ",", "outputs", ".", "t", "(", ")", ")", "# (B', d), (d, B') -> (B', B')", "\n", "\n", "return", "sim_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.contrastive_loss.NT_xent": [[57, 76], ["torch.eye().to", "torch.eye().to", "torch.sum", "torch.sum", "sim_matrix.size", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.eye", "torch.eye", "sim_matrix[].diag", "sim_matrix[].diag"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.log", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.log"], ["", "def", "NT_xent", "(", "sim_matrix", ",", "temperature", "=", "0.5", ",", "chunk", "=", "2", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "'''\n        Compute NT_xent loss\n        - sim_matrix: (B', B') tensor for B' = B * chunk (first 2B are pos samples)\n    '''", "\n", "\n", "device", "=", "sim_matrix", ".", "device", "\n", "\n", "B", "=", "sim_matrix", ".", "size", "(", "0", ")", "//", "chunk", "# B = B' / chunk", "\n", "\n", "eye", "=", "torch", ".", "eye", "(", "B", "*", "chunk", ")", ".", "to", "(", "device", ")", "# (B', B')", "\n", "sim_matrix", "=", "torch", ".", "exp", "(", "sim_matrix", "/", "temperature", ")", "*", "(", "1", "-", "eye", ")", "# remove diagonal", "\n", "\n", "denom", "=", "torch", ".", "sum", "(", "sim_matrix", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "sim_matrix", "=", "-", "torch", ".", "log", "(", "sim_matrix", "/", "(", "denom", "+", "eps", ")", "+", "eps", ")", "# loss matrix", "\n", "\n", "loss", "=", "torch", ".", "sum", "(", "sim_matrix", "[", ":", "B", ",", "B", ":", "]", ".", "diag", "(", ")", "+", "sim_matrix", "[", "B", ":", ",", ":", "B", "]", ".", "diag", "(", ")", ")", "/", "(", "2", "*", "B", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.contrastive_loss.Supervised_NT_xent": [[78, 110], ["torch.cat.repeat", "torch.max", "torch.max", "torch.eye().to", "torch.eye().to", "torch.sum", "torch.sum", "torch.cat.contiguous().view", "torch.eq().float().to", "torch.eq().float().to", "torch.cat", "torch.cat", "logits_max.detach", "sim_matrix.size", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.empty_like", "torch.empty_like", "diffdist.all_gather", "torch.eye", "torch.eye", "torch.cat.contiguous", "torch.eq().float", "torch.eq().float", "torch.eq().float().to.sum", "range", "torch.get_world_size", "torch.eq", "torch.eq", "torch.cat.t"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.log", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.log", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.all_gather", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.get_world_size"], ["", "def", "Supervised_NT_xent", "(", "sim_matrix", ",", "labels", ",", "temperature", "=", "0.5", ",", "chunk", "=", "2", ",", "eps", "=", "1e-8", ",", "multi_gpu", "=", "False", ")", ":", "\n", "    ", "'''\n        Compute NT_xent loss\n        - sim_matrix: (B', B') tensor for B' = B * chunk (first 2B are pos samples)\n    '''", "\n", "\n", "device", "=", "sim_matrix", ".", "device", "\n", "\n", "if", "multi_gpu", ":", "\n", "        ", "gather_t", "=", "[", "torch", ".", "empty_like", "(", "labels", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "labels", "=", "torch", ".", "cat", "(", "distops", ".", "all_gather", "(", "gather_t", ",", "labels", ")", ")", "\n", "", "labels", "=", "labels", ".", "repeat", "(", "2", ")", "\n", "\n", "logits_max", ",", "_", "=", "torch", ".", "max", "(", "sim_matrix", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "sim_matrix", "=", "sim_matrix", "-", "logits_max", ".", "detach", "(", ")", "\n", "\n", "B", "=", "sim_matrix", ".", "size", "(", "0", ")", "//", "chunk", "# B = B' / chunk", "\n", "\n", "eye", "=", "torch", ".", "eye", "(", "B", "*", "chunk", ")", ".", "to", "(", "device", ")", "# (B', B')", "\n", "sim_matrix", "=", "torch", ".", "exp", "(", "sim_matrix", "/", "temperature", ")", "*", "(", "1", "-", "eye", ")", "# remove diagonal", "\n", "\n", "denom", "=", "torch", ".", "sum", "(", "sim_matrix", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "sim_matrix", "=", "-", "torch", ".", "log", "(", "sim_matrix", "/", "(", "denom", "+", "eps", ")", "+", "eps", ")", "# loss matrix", "\n", "\n", "labels", "=", "labels", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "Mask", "=", "torch", ".", "eq", "(", "labels", ",", "labels", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "#Mask = eye * torch.stack([labels == labels[i] for i in range(labels.size(0))]).float().to(device)", "\n", "Mask", "=", "Mask", "/", "(", "Mask", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "eps", ")", "\n", "\n", "loss", "=", "torch", ".", "sum", "(", "Mask", "*", "sim_matrix", ")", "/", "(", "2", "*", "B", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.contrastive_loss.Supervised_NT_xent_padded": [[111, 152], ["sizes.max", "torch.cat.repeat", "torch.max", "torch.max", "torch.eye().to", "torch.eye().to", "torch.sum", "torch.sum", "torch.cat.contiguous().view", "torch.eq().float().to", "torch.eq().float().to", "diffdist.all_gather", "zip", "torch.cat", "torch.cat", "logits_max.detach", "sim_matrix.size", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "gather_t_out.append", "torch.eye", "torch.eye", "torch.cat.contiguous", "torch.eq().float", "torch.eq().float", "torch.eq().float().to.sum", "range", "torch.get_world_size", "torch.eq", "torch.eq", "torch.cat.t"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.all_gather", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.log", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.log", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.dist_utils.get_world_size"], ["", "def", "Supervised_NT_xent_padded", "(", "sim_matrix", ",", "labels", ",", "sizes", ",", "temperature", "=", "0.5", ",", "chunk", "=", "2", ",", "eps", "=", "1e-8", ",", "multi_gpu", "=", "False", ")", ":", "\n", "    ", "'''\n        Compute NT_xent loss\n        - sim_matrix: (B', B') tensor for B' = B * chunk (first 2B are pos samples)\n        Padded version: not all gpus have the same batch size. We preallocate considering the maximum size and \n        then select using effective sizes. (ref: https://discuss.pytorch.org/t/how-to-concatenate-different-size-tensors-from-distributed-processes/44819/4)\n    '''", "\n", "\n", "device", "=", "sim_matrix", ".", "device", "\n", "maxsize", "=", "sizes", ".", "max", "(", ")", "\n", "if", "multi_gpu", ":", "\n", "        ", "if", "labels", ".", "shape", "[", "0", "]", "<", "maxsize", ":", "\n", "            ", "empty", "=", "torch", ".", "empty", "(", "(", "maxsize", ")", ",", "dtype", "=", "labels", ".", "dtype", ",", "device", "=", "labels", ".", "device", ")", "\n", "empty", "[", ":", "labels", ".", "shape", "[", "0", "]", "]", "=", "labels", "\n", "labels", "=", "empty", "\n", "", "gather_t", "=", "[", "torch", ".", "empty", "(", "(", "maxsize", ")", ",", "dtype", "=", "labels", ".", "dtype", ",", "layout", "=", "labels", ".", "layout", ",", "device", "=", "labels", ".", "device", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "gather_t", "=", "distops", ".", "all_gather", "(", "gather_t", ",", "labels", ")", "\n", "gather_t_out", "=", "[", "]", "\n", "for", "g", ",", "size", "in", "zip", "(", "gather_t", ",", "sizes", ")", ":", "\n", "            ", "gather_t_out", ".", "append", "(", "g", "[", ":", "size", "]", ")", "\n", "", "labels", "=", "torch", ".", "cat", "(", "gather_t_out", ")", "\n", "", "labels", "=", "labels", ".", "repeat", "(", "2", ")", "\n", "logits_max", ",", "_", "=", "torch", ".", "max", "(", "sim_matrix", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "sim_matrix", "=", "sim_matrix", "-", "logits_max", ".", "detach", "(", ")", "\n", "\n", "B", "=", "sim_matrix", ".", "size", "(", "0", ")", "//", "chunk", "# B = B' / chunk", "\n", "\n", "eye", "=", "torch", ".", "eye", "(", "B", "*", "chunk", ")", ".", "to", "(", "device", ")", "# (B', B')", "\n", "sim_matrix", "=", "torch", ".", "exp", "(", "sim_matrix", "/", "temperature", ")", "*", "(", "1", "-", "eye", ")", "# remove diagonal", "\n", "\n", "denom", "=", "torch", ".", "sum", "(", "sim_matrix", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "sim_matrix", "=", "-", "torch", ".", "log", "(", "sim_matrix", "/", "(", "denom", "+", "eps", ")", "+", "eps", ")", "# loss matrix", "\n", "\n", "labels", "=", "labels", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "Mask", "=", "torch", ".", "eq", "(", "labels", ",", "labels", ".", "t", "(", ")", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "#Mask = eye * torch.stack([labels == labels[i] for i in range(labels.size(0))]).float().to(device)", "\n", "Mask", "=", "Mask", "/", "(", "Mask", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "eps", ")", "\n", "\n", "loss", "=", "torch", ".", "sum", "(", "Mask", "*", "sim_matrix", ")", "/", "(", "2", "*", "B", ")", "\n", "\n", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.__init__.update_learning_rate": [[6, 30], ["NotImplementedError", "float"], "function", ["None"], []], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.__init__._cross_entropy": [[32, 43], ["torch.softmax", "xent.sum", "xent.mean", "torch.log_softmax", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.__init__._entropy": [[45, 47], ["__init__._cross_entropy"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.training.__init__._cross_entropy"], []], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.__init__.cross_entropy_soft": [[49, 60], ["torch.softmax", "xent.sum", "xent.mean", "torch.log_softmax", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.__init__.kl_div": [[62, 65], ["torch.kl_div", "torch.log_softmax", "torch.softmax"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.training.__init__.kl_div"], []], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.__init__.target_nll_loss": [[67, 81], ["logit_diff.scatter.scatter", "torch.nll_loss", "inputs_t.view", "targets.view", "logit_diff.scatter.max", "diff_max.sum", "diff_max.mean", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.__init__.target_nll_c": [[83, 98], ["torch.softmax", "torch.softmax", "torch.softmax", "conf_diff.scatter.scatter", "torch.nll_loss", "conf_t.view", "targets.view", "conf_diff.scatter.max", "diff_max.sum", "diff_max.mean", "NotImplementedError"], "function", ["None"], []], "home.repos.pwc.inspect_result.silvia1993_HyMOS.sup.__init__.setup": [[1, 17], ["str", "str", "str"], "function", ["None"], [""]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.sup.HyMOS_st.train": [[18, 74], ["images1.to.to", "images2.to.to", "labels.to.to", "torch.cat", "torch.cat", "utils.utils.apply_simclr_aug", "model", "utils.utils.normalize", "training.contrastive_loss.get_similarity_matrix", "training.contrastive_loss.Supervised_NT_xent", "optimizer.zero_grad", "loss.backward", "optimizer.step", "scheduler.step", "outputs_aux[].norm().mean", "next", "next", "datasets.datasets.BalancedMultiSourceRandomSampler", "torch.utils.data.DataLoader", "iter", "next", "iter", "next", "outputs_aux[].norm"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.apply_simclr_aug", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.normalize", "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.contrastive_loss.get_similarity_matrix", "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.contrastive_loss.Supervised_NT_xent", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.RandomHSVFunction.backward", "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.scheduler.GradualWarmupScheduler.step", "home.repos.pwc.inspect_result.silvia1993_HyMOS.training.scheduler.GradualWarmupScheduler.step"], ["def", "train", "(", "P", ",", "its", ",", "model", ",", "criterion", ",", "optimizer", ",", "scheduler", ",", "data_loader", ",", "data_iter", ",", "logger", "=", "None", ",", "simclr_aug", "=", "None", ")", ":", "\n", "\n", "    ", "assert", "simclr_aug", "is", "not", "None", "\n", "\n", "try", ":", "\n", "        ", "ims", ",", "lbls", ",", "path", "=", "next", "(", "data_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "        ", "my_sampler", "=", "BalancedMultiSourceRandomSampler", "(", "data_loader", ".", "dataset", ",", "P", ".", "batch_p", ",", "P", ".", "local_rank", ",", "P", ".", "n_gpus", ")", "\n", "loader_kwargs", "=", "{", "'pin_memory'", ":", "False", ",", "'num_workers'", ":", "1", ",", "'drop_last'", ":", "True", "}", "\n", "data_loader", "=", "DataLoader", "(", "data_loader", ".", "dataset", ",", "sampler", "=", "my_sampler", ",", "batch_size", "=", "data_loader", ".", "batch_size", ",", "**", "loader_kwargs", ")", "\n", "data_iter", "=", "iter", "(", "data_loader", ")", "\n", "ims", ",", "lbls", ",", "path", "=", "next", "(", "data_iter", ")", "\n", "", "images1", "=", "ims", "[", "0", "]", "\n", "images2", "=", "ims", "[", "1", "]", "\n", "labels", "=", "lbls", "\n", "images1", "=", "images1", ".", "to", "(", "device", ")", "\n", "images2", "=", "images2", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "\n", "try", ":", "\n", "        ", "style_images", ",", "_", "=", "next", "(", "P", ".", "style_iter", ")", "\n", "", "except", "StopIteration", ":", "\n", "        ", "P", ".", "style_iter", "=", "iter", "(", "P", ".", "style_loader", ")", "\n", "style_images", ",", "_", "=", "next", "(", "P", ".", "style_iter", ")", "\n", "\n", "", "images_pair", "=", "torch", ".", "cat", "(", "[", "images1", ",", "images2", "]", ",", "dim", "=", "0", ")", "# 2B", "\n", "\n", "images_pair", "=", "apply_simclr_aug", "(", "P", ",", "simclr_aug", ",", "images_pair", ",", "style_images", ")", "# simclr augmentation", "\n", "\n", "# perform forward", "\n", "_", ",", "outputs_aux", "=", "model", "(", "images_pair", ",", "simclr", "=", "True", ",", "penultimate", "=", "True", ")", "\n", "\n", "# normalize output", "\n", "simclr", "=", "normalize", "(", "outputs_aux", "[", "'simclr'", "]", ")", "# normalize", "\n", "# compute similarities", "\n", "\n", "sim_matrix", "=", "get_similarity_matrix", "(", "simclr", ",", "multi_gpu", "=", "P", ".", "multi_gpu", ")", "\n", "\n", "# obtain simclr (supclr) loss", "\n", "temperature", "=", "P", ".", "temperature", "\n", "loss_sim", "=", "Supervised_NT_xent", "(", "sim_matrix", ",", "labels", "=", "labels", ",", "temperature", "=", "temperature", ",", "multi_gpu", "=", "P", ".", "multi_gpu", ")", "\n", "\n", "### total loss ###", "\n", "loss", "=", "loss_sim", "\n", "\n", "# perform backward and step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "### Post-processing stuffs ###", "\n", "simclr_norm", "=", "outputs_aux", "[", "'simclr'", "]", ".", "norm", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "# compute avg norm of output features ", "\n", "\n", "return", "loss_sim", ",", "simclr_norm", ",", "data_loader", ",", "data_iter", "\n", "", ""]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.VGGEncoder.__init__": [[34, 43], ["torch.Module.__init__", "adain.VGGEncoder.parameters", "torchvision.models.vgg19"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "vgg", "=", "vgg19", "(", "pretrained", "=", "True", ")", ".", "features", "\n", "self", ".", "slice1", "=", "vgg", "[", ":", "2", "]", "\n", "self", ".", "slice2", "=", "vgg", "[", "2", ":", "7", "]", "\n", "self", ".", "slice3", "=", "vgg", "[", "7", ":", "12", "]", "\n", "self", ".", "slice4", "=", "vgg", "[", "12", ":", "21", "]", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "p", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.VGGEncoder.forward": [[44, 53], ["adain.VGGEncoder.slice1", "adain.VGGEncoder.slice2", "adain.VGGEncoder.slice3", "adain.VGGEncoder.slice4"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "images", ",", "output_last_feature", "=", "False", ")", ":", "\n", "        ", "h1", "=", "self", ".", "slice1", "(", "images", ")", "\n", "h2", "=", "self", ".", "slice2", "(", "h1", ")", "\n", "h3", "=", "self", ".", "slice3", "(", "h2", ")", "\n", "h4", "=", "self", ".", "slice4", "(", "h3", ")", "\n", "if", "output_last_feature", ":", "\n", "            ", "return", "h4", "\n", "", "else", ":", "\n", "            ", "return", "h1", ",", "h2", ",", "h3", ",", "h4", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.RC.__init__": [[57, 62], ["torch.Module.__init__", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "pad_size", "=", "1", ",", "activated", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pad", "=", "nn", ".", "ReflectionPad2d", "(", "(", "pad_size", ",", "pad_size", ",", "pad_size", ",", "pad_size", ")", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ")", "\n", "self", ".", "activated", "=", "activated", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.RC.forward": [[63, 70], ["adain.RC.pad", "adain.RC.conv", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "pad", "(", "x", ")", "\n", "h", "=", "self", ".", "conv", "(", "h", ")", "\n", "if", "self", ".", "activated", ":", "\n", "            ", "return", "F", ".", "relu", "(", "h", ")", "\n", "", "else", ":", "\n", "            ", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.Decoder.__init__": [[73, 84], ["torch.Module.__init__", "adain.RC", "adain.RC", "adain.RC", "adain.RC", "adain.RC", "adain.RC", "adain.RC", "adain.RC", "adain.RC"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rc1", "=", "RC", "(", "512", ",", "256", ",", "3", ",", "1", ")", "\n", "self", ".", "rc2", "=", "RC", "(", "256", ",", "256", ",", "3", ",", "1", ")", "\n", "self", ".", "rc3", "=", "RC", "(", "256", ",", "256", ",", "3", ",", "1", ")", "\n", "self", ".", "rc4", "=", "RC", "(", "256", ",", "256", ",", "3", ",", "1", ")", "\n", "self", ".", "rc5", "=", "RC", "(", "256", ",", "128", ",", "3", ",", "1", ")", "\n", "self", ".", "rc6", "=", "RC", "(", "128", ",", "128", ",", "3", ",", "1", ")", "\n", "self", ".", "rc7", "=", "RC", "(", "128", ",", "64", ",", "3", ",", "1", ")", "\n", "self", ".", "rc8", "=", "RC", "(", "64", ",", "64", ",", "3", ",", "1", ")", "\n", "self", ".", "rc9", "=", "RC", "(", "64", ",", "3", ",", "3", ",", "1", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.Decoder.forward": [[85, 99], ["adain.Decoder.rc1", "torch.interpolate", "torch.interpolate", "adain.Decoder.rc2", "adain.Decoder.rc3", "adain.Decoder.rc4", "adain.Decoder.rc5", "torch.interpolate", "torch.interpolate", "adain.Decoder.rc6", "adain.Decoder.rc7", "torch.interpolate", "torch.interpolate", "adain.Decoder.rc8", "adain.Decoder.rc9"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "h", "=", "self", ".", "rc1", "(", "features", ")", "\n", "h", "=", "F", ".", "interpolate", "(", "h", ",", "scale_factor", "=", "2", ")", "\n", "h", "=", "self", ".", "rc2", "(", "h", ")", "\n", "h", "=", "self", ".", "rc3", "(", "h", ")", "\n", "h", "=", "self", ".", "rc4", "(", "h", ")", "\n", "h", "=", "self", ".", "rc5", "(", "h", ")", "\n", "h", "=", "F", ".", "interpolate", "(", "h", ",", "scale_factor", "=", "2", ")", "\n", "h", "=", "self", ".", "rc6", "(", "h", ")", "\n", "h", "=", "self", ".", "rc7", "(", "h", ")", "\n", "h", "=", "F", ".", "interpolate", "(", "h", ",", "scale_factor", "=", "2", ")", "\n", "h", "=", "self", ".", "rc8", "(", "h", ")", "\n", "h", "=", "self", ".", "rc9", "(", "h", ")", "\n", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.AdaIN.__init__": [[102, 106], ["torch.Module.__init__", "adain.VGGEncoder", "adain.Decoder"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "vgg_encoder", "=", "VGGEncoder", "(", ")", "\n", "self", ".", "decoder", "=", "Decoder", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.AdaIN.generate": [[107, 115], ["adain.AdaIN.vgg_encoder", "adain.AdaIN.vgg_encoder", "adain.adain", "adain.AdaIN.decoder"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.adain"], ["", "def", "generate", "(", "self", ",", "content_images", ",", "style_images", ",", "alpha", "=", "1.0", ")", ":", "\n", "# data should already have passed ToTensor and Normalize", "\n", "        ", "content_features", "=", "self", ".", "vgg_encoder", "(", "content_images", ",", "output_last_feature", "=", "True", ")", "\n", "style_features", "=", "self", ".", "vgg_encoder", "(", "style_images", ",", "output_last_feature", "=", "True", ")", "\n", "t", "=", "adain", "(", "content_features", ",", "style_features", ")", "\n", "t", "=", "alpha", "*", "t", "+", "(", "1", "-", "alpha", ")", "*", "content_features", "\n", "out", "=", "self", ".", "decoder", "(", "t", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.AdaIN.calc_content_loss": [[116, 119], ["torch.mse_loss", "torch.mse_loss"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "calc_content_loss", "(", "out_features", ",", "t", ")", ":", "\n", "        ", "return", "F", ".", "mse_loss", "(", "out_features", ",", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.AdaIN.calc_style_loss": [[120, 128], ["zip", "adain.calc_mean_std", "adain.calc_mean_std", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss", "torch.mse_loss"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.calc_mean_std", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.calc_mean_std"], ["", "@", "staticmethod", "\n", "def", "calc_style_loss", "(", "content_middle_features", ",", "style_middle_features", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "for", "c", ",", "s", "in", "zip", "(", "content_middle_features", ",", "style_middle_features", ")", ":", "\n", "            ", "c_mean", ",", "c_std", "=", "calc_mean_std", "(", "c", ")", "\n", "s_mean", ",", "s_std", "=", "calc_mean_std", "(", "s", ")", "\n", "loss", "+=", "F", ".", "mse_loss", "(", "c_mean", ",", "s_mean", ")", "+", "F", ".", "mse_loss", "(", "c_std", ",", "s_std", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.AdaIN.forward": [[129, 144], ["adain.AdaIN.vgg_encoder", "adain.AdaIN.vgg_encoder", "adain.adain", "adain.AdaIN.decoder", "adain.AdaIN.vgg_encoder", "adain.AdaIN.vgg_encoder", "adain.AdaIN.vgg_encoder", "adain.AdaIN.calc_content_loss", "adain.AdaIN.calc_style_loss"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.adain", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.AdaIN.calc_content_loss", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.AdaIN.calc_style_loss"], ["", "def", "forward", "(", "self", ",", "content_images", ",", "style_images", ",", "alpha", "=", "1.0", ",", "lam", "=", "10", ")", ":", "\n", "        ", "content_features", "=", "self", ".", "vgg_encoder", "(", "content_images", ",", "output_last_feature", "=", "True", ")", "\n", "style_features", "=", "self", ".", "vgg_encoder", "(", "style_images", ",", "output_last_feature", "=", "True", ")", "\n", "t", "=", "adain", "(", "content_features", ",", "style_features", ")", "\n", "t", "=", "alpha", "*", "t", "+", "(", "1", "-", "alpha", ")", "*", "content_features", "\n", "out", "=", "self", ".", "decoder", "(", "t", ")", "\n", "\n", "output_features", "=", "self", ".", "vgg_encoder", "(", "out", ",", "output_last_feature", "=", "True", ")", "\n", "output_middle_features", "=", "self", ".", "vgg_encoder", "(", "out", ",", "output_last_feature", "=", "False", ")", "\n", "style_middle_features", "=", "self", ".", "vgg_encoder", "(", "style_images", ",", "output_last_feature", "=", "False", ")", "\n", "\n", "loss_c", "=", "self", ".", "calc_content_loss", "(", "output_features", ",", "t", ")", "\n", "loss_s", "=", "self", ".", "calc_style_loss", "(", "output_middle_features", ",", "style_middle_features", ")", "\n", "loss", "=", "loss_c", "+", "lam", "*", "loss_s", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.calc_mean_std": [[6, 17], ["features.reshape().mean().reshape", "features.size", "features.reshape().std().reshape", "features.reshape().mean", "features.reshape().std", "features.reshape", "features.reshape"], "function", ["None"], ["def", "calc_mean_std", "(", "features", ")", ":", "\n", "    ", "\"\"\"\n\n    :param features: shape of features -> [batch_size, c, h, w]\n    :return: features_mean, feature_s: shape of mean/std ->[batch_size, c, 1, 1]\n    \"\"\"", "\n", "\n", "batch_size", ",", "c", "=", "features", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "features_mean", "=", "features", ".", "reshape", "(", "batch_size", ",", "c", ",", "-", "1", ")", ".", "mean", "(", "dim", "=", "2", ")", ".", "reshape", "(", "batch_size", ",", "c", ",", "1", ",", "1", ")", "\n", "features_std", "=", "features", ".", "reshape", "(", "batch_size", ",", "c", ",", "-", "1", ")", ".", "std", "(", "dim", "=", "2", ")", ".", "reshape", "(", "batch_size", ",", "c", ",", "1", ",", "1", ")", "+", "1e-6", "\n", "return", "features_mean", ",", "features_std", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.adain": [[19, 31], ["adain.calc_mean_std", "adain.calc_mean_std"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.calc_mean_std", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.adain.calc_mean_std"], ["", "def", "adain", "(", "content_features", ",", "style_features", ")", ":", "\n", "    ", "\"\"\"\n    Adaptive Instance Normalization\n\n    :param content_features: shape -> [batch_size, c, h, w]\n    :param style_features: shape -> [batch_size, c, h, w]\n    :return: normalized_features shape -> [batch_size, c, h, w]\n    \"\"\"", "\n", "content_mean", ",", "content_std", "=", "calc_mean_std", "(", "content_features", ")", "\n", "style_mean", ",", "style_std", "=", "calc_mean_std", "(", "style_features", ")", "\n", "normalized_features", "=", "style_std", "*", "(", "content_features", "-", "content_mean", ")", "/", "content_std", "+", "style_mean", "\n", "return", "normalized_features", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.BasicBlock.__init__": [[22, 39], ["torch.Module.__init__", "resnet_imagenet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet_imagenet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.conv3x3", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.BasicBlock.forward": [[40, 57], ["resnet_imagenet.BasicBlock.conv1", "resnet_imagenet.BasicBlock.bn1", "resnet_imagenet.BasicBlock.relu", "resnet_imagenet.BasicBlock.conv2", "resnet_imagenet.BasicBlock.bn2", "resnet_imagenet.BasicBlock.relu", "resnet_imagenet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.Bottleneck.__init__": [[68, 84], ["torch.Module.__init__", "resnet_imagenet.conv1x1", "norm_layer", "resnet_imagenet.conv3x3", "norm_layer", "resnet_imagenet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.conv1x1", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.conv3x3", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.Bottleneck.forward": [[85, 106], ["resnet_imagenet.Bottleneck.conv1", "resnet_imagenet.Bottleneck.bn1", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.conv2", "resnet_imagenet.Bottleneck.bn2", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.conv3", "resnet_imagenet.Bottleneck.bn3", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.ResNet.__init__": [[109, 161], ["models.base_model.BaseModel.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "models.transform_layers.NormalizeLayer", "resnet_imagenet.ResNet.modules", "len", "ValueError", "isinstance", "resnet_imagenet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.ResNet._make_layer", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.ResNet._make_layer", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.ResNet._make_layer", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "10", ",", "\n", "zero_init_residual", "=", "False", ",", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "last_dim", "=", "512", "*", "block", ".", "expansion", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", "last_dim", ",", "num_classes", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "normalize", "=", "NormalizeLayer", "(", ")", "\n", "self", ".", "last_dim", "=", "512", "*", "block", ".", "expansion", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.ResNet._make_layer": [[162, 185], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_imagenet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.ResNet.penultimate": [[186, 213], ["resnet_imagenet.ResNet.normalize", "resnet_imagenet.ResNet.conv1", "resnet_imagenet.ResNet.bn1", "resnet_imagenet.ResNet.relu", "resnet_imagenet.ResNet.maxpool", "out_list.append", "resnet_imagenet.ResNet.layer1", "out_list.append", "resnet_imagenet.ResNet.layer2", "out_list.append", "resnet_imagenet.ResNet.layer3", "out_list.append", "resnet_imagenet.ResNet.layer4", "out_list.append", "resnet_imagenet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.normalize"], ["", "def", "penultimate", "(", "self", ",", "x", ",", "all_features", "=", "False", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "out_list", "=", "[", "]", "\n", "\n", "x", "=", "self", ".", "normalize", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "out_list", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "out_list", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "out_list", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "out_list", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "out_list", ".", "append", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "\n", "if", "all_features", ":", "\n", "            ", "return", "x", ",", "out_list", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.conv3x3": [[8, 12], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.conv1x1": [[14, 17], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet._resnet": [[215, 218], ["resnet_imagenet.ResNet"], "function", ["None"], ["", "", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.resnet18": [[220, 225], ["resnet_imagenet._resnet"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet._resnet"], ["", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.resnet50": [[227, 232], ["resnet_imagenet._resnet"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet._resnet"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.RandomResizedCropLayer.__init__": [[70, 84], ["torch.Module.__init__", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "transform_layers.RandomResizedCropLayer.register_buffer"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "None", ",", "scale", "=", "(", "0.08", ",", "1.0", ")", ",", "ratio", "=", "(", "3.", "/", "4.", ",", "4.", "/", "3.", ")", ")", ":", "\n", "        ", "'''\n            Inception Crop\n            size (tuple): size of fowarding image (C, W, H)\n            scale (tuple): range of size of the origin size cropped\n            ratio (tuple): range of aspect ratio of the origin aspect ratio cropped\n        '''", "\n", "super", "(", "RandomResizedCropLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "_eye", "=", "torch", ".", "eye", "(", "2", ",", "3", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "register_buffer", "(", "'_eye'", ",", "_eye", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "ratio", "=", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.RandomResizedCropLayer.forward": [[85, 105], ["inputs.size", "transform_layers.RandomResizedCropLayer._eye.repeat", "torch.affine_grid().to", "torch.affine_grid().to", "torch.affine_grid().to", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "transform_layers.RandomResizedCropLayer._sample_latent", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "inputs.size"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.HorizontalFlipRandomCrop._sample_latent"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "whbias", "=", "None", ")", ":", "\n", "        ", "_device", "=", "inputs", ".", "device", "\n", "N", "=", "inputs", ".", "size", "(", "0", ")", "\n", "_theta", "=", "self", ".", "_eye", ".", "repeat", "(", "N", ",", "1", ",", "1", ")", "\n", "\n", "if", "whbias", "is", "None", ":", "\n", "            ", "whbias", "=", "self", ".", "_sample_latent", "(", "inputs", ")", "\n", "\n", "", "_theta", "[", ":", ",", "0", ",", "0", "]", "=", "whbias", "[", ":", ",", "0", "]", "\n", "_theta", "[", ":", ",", "1", ",", "1", "]", "=", "whbias", "[", ":", ",", "1", "]", "\n", "_theta", "[", ":", ",", "0", ",", "2", "]", "=", "whbias", "[", ":", ",", "2", "]", "\n", "_theta", "[", ":", ",", "1", ",", "2", "]", "=", "whbias", "[", ":", ",", "3", "]", "\n", "\n", "grid", "=", "F", ".", "affine_grid", "(", "_theta", ",", "inputs", ".", "size", "(", ")", ",", "**", "kwargs", ")", ".", "to", "(", "_device", ")", "\n", "output", "=", "F", ".", "grid_sample", "(", "inputs", ",", "grid", ",", "padding_mode", "=", "'reflection'", ",", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "size", "is", "not", "None", ":", "\n", "            ", "output", "=", "F", ".", "adaptive_avg_pool2d", "(", "output", ",", "self", ".", "size", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.RandomResizedCropLayer._clamp": [[106, 131], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.stack().t", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "_clamp", "(", "self", ",", "whbias", ")", ":", "\n", "\n", "        ", "w", "=", "whbias", "[", ":", ",", "0", "]", "\n", "h", "=", "whbias", "[", ":", ",", "1", "]", "\n", "w_bias", "=", "whbias", "[", ":", ",", "2", "]", "\n", "h_bias", "=", "whbias", "[", ":", ",", "3", "]", "\n", "\n", "# Clamp with scale", "\n", "w", "=", "torch", ".", "clamp", "(", "w", ",", "*", "self", ".", "scale", ")", "\n", "h", "=", "torch", ".", "clamp", "(", "h", ",", "*", "self", ".", "scale", ")", "\n", "\n", "# Clamp with ratio", "\n", "w", "=", "self", ".", "ratio", "[", "0", "]", "*", "h", "+", "torch", ".", "relu", "(", "w", "-", "self", ".", "ratio", "[", "0", "]", "*", "h", ")", "\n", "w", "=", "self", ".", "ratio", "[", "1", "]", "*", "h", "-", "torch", ".", "relu", "(", "self", ".", "ratio", "[", "1", "]", "*", "h", "-", "w", ")", "\n", "\n", "# Clamp with bias range: w_bias \\in (w - 1, 1 - w), h_bias \\in (h - 1, 1 - h)", "\n", "w_bias", "=", "w", "-", "1", "+", "torch", ".", "relu", "(", "w_bias", "-", "w", "+", "1", ")", "\n", "w_bias", "=", "1", "-", "w", "-", "torch", ".", "relu", "(", "1", "-", "w", "-", "w_bias", ")", "\n", "\n", "h_bias", "=", "h", "-", "1", "+", "torch", ".", "relu", "(", "h_bias", "-", "h", "+", "1", ")", "\n", "h_bias", "=", "1", "-", "h", "-", "torch", ".", "relu", "(", "1", "-", "h", "-", "h_bias", ")", "\n", "\n", "whbias", "=", "torch", ".", "stack", "(", "[", "w", ",", "h", ",", "w_bias", ",", "h_bias", "]", ",", "dim", "=", "0", ")", ".", "t", "(", ")", "\n", "\n", "return", "whbias", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.RandomResizedCropLayer._sample_latent": [[132, 166], ["numpy.exp", "numpy.round", "numpy.round", "numpy.column_stack", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.random.uniform", "math.log", "math.log", "numpy.random.uniform", "numpy.sqrt", "numpy.sqrt", "numpy.concatenate", "numpy.concatenate", "numpy.random.randint", "numpy.random.randint", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.log", "home.repos.pwc.inspect_result.silvia1993_HyMOS.utils.utils.Logger.log"], ["", "def", "_sample_latent", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "        ", "_device", "=", "inputs", ".", "device", "\n", "N", ",", "_", ",", "width", ",", "height", "=", "inputs", ".", "shape", "\n", "\n", "# N * 10 trial", "\n", "area", "=", "width", "*", "height", "\n", "target_area", "=", "np", ".", "random", ".", "uniform", "(", "*", "self", ".", "scale", ",", "N", "*", "10", ")", "*", "area", "\n", "log_ratio", "=", "(", "math", ".", "log", "(", "self", ".", "ratio", "[", "0", "]", ")", ",", "math", ".", "log", "(", "self", ".", "ratio", "[", "1", "]", ")", ")", "\n", "aspect_ratio", "=", "np", ".", "exp", "(", "np", ".", "random", ".", "uniform", "(", "*", "log_ratio", ",", "N", "*", "10", ")", ")", "\n", "\n", "# If doesn't satisfy ratio condition, then do central crop", "\n", "w", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", "\n", "h", "=", "np", ".", "round", "(", "np", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", "\n", "cond", "=", "(", "0", "<", "w", ")", "*", "(", "w", "<=", "width", ")", "*", "(", "0", "<", "h", ")", "*", "(", "h", "<=", "height", ")", "\n", "w", "=", "w", "[", "cond", "]", "\n", "h", "=", "h", "[", "cond", "]", "\n", "cond_len", "=", "w", ".", "shape", "[", "0", "]", "\n", "if", "cond_len", ">=", "N", ":", "\n", "            ", "w", "=", "w", "[", ":", "N", "]", "\n", "h", "=", "h", "[", ":", "N", "]", "\n", "", "else", ":", "\n", "            ", "w", "=", "np", ".", "concatenate", "(", "[", "w", ",", "np", ".", "ones", "(", "N", "-", "cond_len", ")", "*", "width", "]", ")", "\n", "h", "=", "np", ".", "concatenate", "(", "[", "h", ",", "np", ".", "ones", "(", "N", "-", "cond_len", ")", "*", "height", "]", ")", "\n", "\n", "", "w_bias", "=", "np", ".", "random", ".", "randint", "(", "w", "-", "width", ",", "width", "-", "w", "+", "1", ")", "/", "width", "\n", "h_bias", "=", "np", ".", "random", ".", "randint", "(", "h", "-", "height", ",", "height", "-", "h", "+", "1", ")", "/", "height", "\n", "w", "=", "w", "/", "width", "\n", "h", "=", "h", "/", "height", "\n", "\n", "whbias", "=", "np", ".", "column_stack", "(", "[", "w", ",", "h", ",", "w_bias", ",", "h_bias", "]", ")", "\n", "whbias", "=", "torch", ".", "tensor", "(", "whbias", ",", "device", "=", "_device", ")", "\n", "\n", "return", "whbias", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.HorizontalFlipRandomCrop.__init__": [[169, 174], ["torch.Module.__init__", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "transform_layers.HorizontalFlipRandomCrop.register_buffer"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_range", ")", ":", "\n", "        ", "super", "(", "HorizontalFlipRandomCrop", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_range", "=", "max_range", "\n", "_eye", "=", "torch", ".", "eye", "(", "2", ",", "3", ")", "\n", "self", ".", "register_buffer", "(", "'_eye'", ",", "_eye", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.HorizontalFlipRandomCrop.forward": [[175, 194], ["input.size", "transform_layers.HorizontalFlipRandomCrop._eye.repeat", "torch.affine_grid().to", "torch.affine_grid().to", "torch.affine_grid().to", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "input.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "sign", "=", "None", ",", "bias", "=", "None", ",", "rotation", "=", "None", ")", ":", "\n", "        ", "_device", "=", "input", ".", "device", "\n", "N", "=", "input", ".", "size", "(", "0", ")", "\n", "_theta", "=", "self", ".", "_eye", ".", "repeat", "(", "N", ",", "1", ",", "1", ")", "\n", "\n", "if", "sign", "is", "None", ":", "\n", "            ", "sign", "=", "torch", ".", "bernoulli", "(", "torch", ".", "ones", "(", "N", ",", "device", "=", "_device", ")", "*", "0.5", ")", "*", "2", "-", "1", "\n", "", "if", "bias", "is", "None", ":", "\n", "            ", "bias", "=", "torch", ".", "empty", "(", "(", "N", ",", "2", ")", ",", "device", "=", "_device", ")", ".", "uniform_", "(", "-", "self", ".", "max_range", ",", "self", ".", "max_range", ")", "\n", "", "_theta", "[", ":", ",", "0", ",", "0", "]", "=", "sign", "\n", "_theta", "[", ":", ",", ":", ",", "2", "]", "=", "bias", "\n", "\n", "if", "rotation", "is", "not", "None", ":", "\n", "            ", "_theta", "[", ":", ",", "0", ":", "2", ",", "0", ":", "2", "]", "=", "rotation", "\n", "\n", "", "grid", "=", "F", ".", "affine_grid", "(", "_theta", ",", "input", ".", "size", "(", ")", ",", "**", "kwargs", ")", ".", "to", "(", "_device", ")", "\n", "output", "=", "F", ".", "grid_sample", "(", "input", ",", "grid", ",", "padding_mode", "=", "'reflection'", ",", "**", "kwargs", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.HorizontalFlipRandomCrop._sample_latent": [[195, 199], ["torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.empty().uniform_", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "_sample_latent", "(", "self", ",", "N", ",", "device", "=", "None", ")", ":", "\n", "        ", "sign", "=", "torch", ".", "bernoulli", "(", "torch", ".", "ones", "(", "N", ",", "device", "=", "device", ")", "*", "0.5", ")", "*", "2", "-", "1", "\n", "bias", "=", "torch", ".", "empty", "(", "(", "N", ",", "2", ")", ",", "device", "=", "device", ")", ".", "uniform_", "(", "-", "self", ".", "max_range", ",", "self", ".", "max_range", ")", "\n", "return", "sign", ",", "bias", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.Rotation.__init__": [[202, 206], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_range", "=", "4", ")", ":", "\n", "        ", "super", "(", "Rotation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_range", "=", "max_range", "\n", "self", ".", "prob", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.Rotation.forward": [[207, 226], ["input.size", "numpy.random.randint", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "input.new_full", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "input.size", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "aug_index", "=", "None", ")", ":", "\n", "        ", "_device", "=", "input", ".", "device", "\n", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "input", ".", "size", "(", ")", "\n", "\n", "if", "aug_index", "is", "None", ":", "\n", "            ", "aug_index", "=", "np", ".", "random", ".", "randint", "(", "4", ")", "\n", "\n", "output", "=", "torch", ".", "rot90", "(", "input", ",", "aug_index", ",", "(", "2", ",", "3", ")", ")", "\n", "\n", "_prob", "=", "input", ".", "new_full", "(", "(", "input", ".", "size", "(", "0", ")", ",", ")", ",", "self", ".", "prob", ")", "\n", "_mask", "=", "torch", ".", "bernoulli", "(", "_prob", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "output", "=", "_mask", "*", "input", "+", "(", "1", "-", "_mask", ")", "*", "output", "\n", "\n", "", "else", ":", "\n", "            ", "aug_index", "=", "aug_index", "%", "self", ".", "max_range", "\n", "output", "=", "torch", ".", "rot90", "(", "input", ",", "aug_index", ",", "(", "2", ",", "3", ")", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.CutPerm.__init__": [[229, 233], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "max_range", "=", "4", ")", ":", "\n", "        ", "super", "(", "CutPerm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "max_range", "=", "max_range", "\n", "self", ".", "prob", "=", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.CutPerm.forward": [[234, 253], ["input.size", "numpy.random.randint", "transform_layers.CutPerm._cutperm", "input.new_full", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "transform_layers.CutPerm._cutperm", "input.size", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.CutPerm._cutperm", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.CutPerm._cutperm"], ["", "def", "forward", "(", "self", ",", "input", ",", "aug_index", "=", "None", ")", ":", "\n", "        ", "_device", "=", "input", ".", "device", "\n", "\n", "_", ",", "_", ",", "H", ",", "W", "=", "input", ".", "size", "(", ")", "\n", "\n", "if", "aug_index", "is", "None", ":", "\n", "            ", "aug_index", "=", "np", ".", "random", ".", "randint", "(", "4", ")", "\n", "\n", "output", "=", "self", ".", "_cutperm", "(", "input", ",", "aug_index", ")", "\n", "\n", "_prob", "=", "input", ".", "new_full", "(", "(", "input", ".", "size", "(", "0", ")", ",", ")", ",", "self", ".", "prob", ")", "\n", "_mask", "=", "torch", ".", "bernoulli", "(", "_prob", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "output", "=", "_mask", "*", "input", "+", "(", "1", "-", "_mask", ")", "*", "output", "\n", "\n", "", "else", ":", "\n", "            ", "aug_index", "=", "aug_index", "%", "self", ".", "max_range", "\n", "output", "=", "self", ".", "_cutperm", "(", "input", ",", "aug_index", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.CutPerm._cutperm": [[254, 269], ["torch.cat.size", "torch.cat.size", "torch.cat.size", "int", "int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "_cutperm", "(", "self", ",", "inputs", ",", "aug_index", ")", ":", "\n", "\n", "        ", "_", ",", "_", ",", "H", ",", "W", "=", "inputs", ".", "size", "(", ")", "\n", "h_mid", "=", "int", "(", "H", "/", "2", ")", "\n", "w_mid", "=", "int", "(", "W", "/", "2", ")", "\n", "\n", "jigsaw_h", "=", "aug_index", "//", "2", "\n", "jigsaw_v", "=", "aug_index", "%", "2", "\n", "\n", "if", "jigsaw_h", "==", "1", ":", "\n", "            ", "inputs", "=", "torch", ".", "cat", "(", "(", "inputs", "[", ":", ",", ":", ",", "h_mid", ":", ",", ":", "]", ",", "inputs", "[", ":", ",", ":", ",", "0", ":", "h_mid", ",", ":", "]", ")", ",", "dim", "=", "2", ")", "\n", "", "if", "jigsaw_v", "==", "1", ":", "\n", "            ", "inputs", "=", "torch", ".", "cat", "(", "(", "inputs", "[", ":", ",", ":", ",", ":", ",", "w_mid", ":", "]", ",", "inputs", "[", ":", ",", ":", ",", ":", ",", "0", ":", "w_mid", "]", ")", ",", "dim", "=", "3", ")", "\n", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.HorizontalFlipLayer.__init__": [[272, 283], ["torch.Module.__init__", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "transform_layers.HorizontalFlipLayer.register_buffer"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        img_size : (int, int, int)\n            Height and width must be powers of 2.  E.g. (32, 32, 1) or\n            (64, 128, 3). Last number indicates number of channels, e.g. 1 for\n            grayscale or 3 for RGB\n        \"\"\"", "\n", "super", "(", "HorizontalFlipLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "_eye", "=", "torch", ".", "eye", "(", "2", ",", "3", ")", "\n", "self", ".", "register_buffer", "(", "'_eye'", ",", "_eye", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.HorizontalFlipLayer.forward": [[284, 295], ["torch.grid_sample.size", "transform_layers.HorizontalFlipLayer._eye.repeat", "torch.affine_grid().to", "torch.affine_grid().to", "torch.affine_grid().to", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.affine_grid", "torch.affine_grid", "torch.affine_grid", "torch.grid_sample.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "_device", "=", "inputs", ".", "device", "\n", "\n", "N", "=", "inputs", ".", "size", "(", "0", ")", "\n", "_theta", "=", "self", ".", "_eye", ".", "repeat", "(", "N", ",", "1", ",", "1", ")", "\n", "r_sign", "=", "torch", ".", "bernoulli", "(", "torch", ".", "ones", "(", "N", ",", "device", "=", "_device", ")", "*", "0.5", ")", "*", "2", "-", "1", "\n", "_theta", "[", ":", ",", "0", ",", "0", "]", "=", "r_sign", "\n", "grid", "=", "F", ".", "affine_grid", "(", "_theta", ",", "inputs", ".", "size", "(", ")", ",", "**", "kwargs", ")", ".", "to", "(", "_device", ")", "\n", "inputs", "=", "F", ".", "grid_sample", "(", "inputs", ",", "grid", ",", "padding_mode", "=", "'reflection'", ",", "**", "kwargs", ")", "\n", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.RandomColorGrayLayer.__init__": [[298, 304], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "transform_layers.RandomColorGrayLayer.register_buffer", "torch.tensor.view", "torch.tensor.view", "torch.tensor.view"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", ")", ":", "\n", "        ", "super", "(", "RandomColorGrayLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prob", "=", "p", "\n", "\n", "_weight", "=", "torch", ".", "tensor", "(", "[", "[", "0.299", ",", "0.587", ",", "0.114", "]", "]", ")", "\n", "self", ".", "register_buffer", "(", "'_weight'", ",", "_weight", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.RandomColorGrayLayer.forward": [[305, 320], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inputs.new_full", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "inputs.size", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "aug_index", "=", "None", ")", ":", "\n", "\n", "        ", "if", "aug_index", "==", "0", ":", "\n", "            ", "return", "inputs", "\n", "\n", "", "l", "=", "F", ".", "conv2d", "(", "inputs", ",", "self", ".", "_weight", ")", "\n", "gray", "=", "torch", ".", "cat", "(", "[", "l", ",", "l", ",", "l", "]", ",", "dim", "=", "1", ")", "\n", "\n", "if", "aug_index", "is", "None", ":", "\n", "            ", "_prob", "=", "inputs", ".", "new_full", "(", "(", "inputs", ".", "size", "(", "0", ")", ",", ")", ",", "self", ".", "prob", ")", "\n", "_mask", "=", "torch", ".", "bernoulli", "(", "_prob", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "gray", "=", "inputs", "*", "(", "1", "-", "_mask", ")", "+", "gray", "*", "_mask", "\n", "\n", "", "return", "gray", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.ColorJitterLayer.__init__": [[323, 331], ["torch.Module.__init__", "transform_layers.ColorJitterLayer._check_input", "transform_layers.ColorJitterLayer._check_input", "transform_layers.ColorJitterLayer._check_input", "transform_layers.ColorJitterLayer._check_input"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.ColorJitterLayer._check_input", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.ColorJitterLayer._check_input", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.ColorJitterLayer._check_input", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.ColorJitterLayer._check_input"], ["    ", "def", "__init__", "(", "self", ",", "p", ",", "brightness", ",", "contrast", ",", "saturation", ",", "hue", ")", ":", "\n", "        ", "super", "(", "ColorJitterLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prob", "=", "p", "\n", "self", ".", "brightness", "=", "self", ".", "_check_input", "(", "brightness", ",", "'brightness'", ")", "\n", "self", ".", "contrast", "=", "self", ".", "_check_input", "(", "contrast", ",", "'contrast'", ")", "\n", "self", ".", "saturation", "=", "self", ".", "_check_input", "(", "saturation", ",", "'saturation'", ")", "\n", "self", ".", "hue", "=", "self", ".", "_check_input", "(", "hue", ",", "'hue'", ",", "center", "=", "0", ",", "bound", "=", "(", "-", "0.5", ",", "0.5", ")", ",", "\n", "clip_first_on_zero", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.ColorJitterLayer._check_input": [[332, 350], ["isinstance", "float", "ValueError", "max", "isinstance", "TypeError", "len", "ValueError"], "methods", ["None"], ["", "def", "_check_input", "(", "self", ",", "value", ",", "name", ",", "center", "=", "1", ",", "bound", "=", "(", "0", ",", "float", "(", "'inf'", ")", ")", ",", "clip_first_on_zero", "=", "True", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "if", "value", "<", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"If {} is a single number, it must be non negative.\"", ".", "format", "(", "name", ")", ")", "\n", "", "value", "=", "[", "center", "-", "value", ",", "center", "+", "value", "]", "\n", "if", "clip_first_on_zero", ":", "\n", "                ", "value", "[", "0", "]", "=", "max", "(", "value", "[", "0", "]", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "value", ",", "(", "tuple", ",", "list", ")", ")", "and", "len", "(", "value", ")", "==", "2", ":", "\n", "            ", "if", "not", "bound", "[", "0", "]", "<=", "value", "[", "0", "]", "<=", "value", "[", "1", "]", "<=", "bound", "[", "1", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"{} values should be between {}\"", ".", "format", "(", "name", ",", "bound", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"{} should be a single number or a list/tuple with lenght 2.\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "# if value is 0 or (1., 1.) for brightness/contrast/saturation", "\n", "# or (0., 0.) for hue, do nothing", "\n", "", "if", "value", "[", "0", "]", "==", "value", "[", "1", "]", "==", "center", ":", "\n", "            ", "value", "=", "None", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.ColorJitterLayer.adjust_contrast": [[351, 357], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "x.new_empty().uniform_", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "x.new_empty", "x.size"], "methods", ["None"], ["", "def", "adjust_contrast", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "contrast", ":", "\n", "            ", "factor", "=", "x", ".", "new_empty", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "uniform_", "(", "*", "self", ".", "contrast", ")", "\n", "means", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "means", ")", "*", "factor", "+", "means", "\n", "", "return", "torch", ".", "clamp", "(", "x", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.ColorJitterLayer.adjust_hsv": [[358, 371], ["x.new_zeros", "x.new_ones", "x.new_ones", "RandomHSVFunction.apply", "x.size", "x.size", "x.size", "x.new_zeros.uniform_", "f_s.uniform_.uniform_.uniform_", "f_v.uniform_.uniform_.uniform_"], "methods", ["None"], ["", "def", "adjust_hsv", "(", "self", ",", "x", ")", ":", "\n", "        ", "f_h", "=", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "f_s", "=", "x", ".", "new_ones", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "f_v", "=", "x", ".", "new_ones", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "\n", "if", "self", ".", "hue", ":", "\n", "            ", "f_h", ".", "uniform_", "(", "*", "self", ".", "hue", ")", "\n", "", "if", "self", ".", "saturation", ":", "\n", "            ", "f_s", "=", "f_s", ".", "uniform_", "(", "*", "self", ".", "saturation", ")", "\n", "", "if", "self", ".", "brightness", ":", "\n", "            ", "f_v", "=", "f_v", ".", "uniform_", "(", "*", "self", ".", "brightness", ")", "\n", "\n", "", "return", "RandomHSVFunction", ".", "apply", "(", "x", ",", "f_h", ",", "f_s", ",", "f_v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.ColorJitterLayer.transform": [[372, 383], ["numpy.random.rand", "t"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "inputs", ")", ":", "\n", "# Shuffle transform", "\n", "        ", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "0.5", ":", "\n", "            ", "transforms", "=", "[", "self", ".", "adjust_contrast", ",", "self", ".", "adjust_hsv", "]", "\n", "", "else", ":", "\n", "            ", "transforms", "=", "[", "self", ".", "adjust_hsv", ",", "self", ".", "adjust_contrast", "]", "\n", "\n", "", "for", "t", "in", "transforms", ":", "\n", "            ", "inputs", "=", "t", "(", "inputs", ")", "\n", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.ColorJitterLayer.forward": [[384, 388], ["inputs.new_full", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "torch.bernoulli().view", "inputs.size", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "torch.bernoulli", "transform_layers.ColorJitterLayer.transform"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.ColorJitterLayer.transform"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "_prob", "=", "inputs", ".", "new_full", "(", "(", "inputs", ".", "size", "(", "0", ")", ",", ")", ",", "self", ".", "prob", ")", "\n", "_mask", "=", "torch", ".", "bernoulli", "(", "_prob", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "return", "inputs", "*", "(", "1", "-", "_mask", ")", "+", "self", ".", "transform", "(", "inputs", ")", "*", "_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.RandomHSVFunction.forward": [[391, 405], ["transform_layers.rgb2hsv", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "transform_layers.hsv2rgb"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.rgb2hsv", "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.hsv2rgb"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "f_h", ",", "f_s", ",", "f_v", ")", ":", "\n", "# ctx is a context object that can be used to stash information", "\n", "# for backward computation", "\n", "        ", "x", "=", "rgb2hsv", "(", "x", ")", "\n", "h", "=", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "\n", "h", "+=", "(", "f_h", "*", "255.", "/", "360.", ")", "\n", "h", "=", "(", "h", "%", "1", ")", "\n", "x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "h", "\n", "x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "*", "f_s", "\n", "x", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", "2", ",", ":", ",", ":", "]", "*", "f_v", "\n", "x", "=", "torch", ".", "clamp", "(", "x", ",", "0", ",", "1", ")", "\n", "x", "=", "hsv2rgb", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.RandomHSVFunction.backward": [[406, 414], ["grad_output.clone"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "# We return as many input gradients as there were arguments.", "\n", "# Gradients of non-Tensor arguments to forward must be None.", "\n", "        ", "grad_input", "=", "None", "\n", "if", "ctx", ".", "needs_input_grad", "[", "0", "]", ":", "\n", "            ", "grad_input", "=", "grad_output", ".", "clone", "(", ")", "\n", "", "return", "grad_input", ",", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.NormalizeLayer.__init__": [[423, 427], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["def", "__init__", "(", "self", ",", "mean", "=", "0.5", ",", "std", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "NormalizeLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.NormalizeLayer.forward": [[428, 433], ["isinstance", "inputs.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "mean", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "(", "(", "inputs", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "-", "self", ".", "mean", ")", "/", "self", ".", "std", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "inputs", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.rgb2hsv": [[16, 43], ["torch.atan2", "torch.atan2", "torch.atan2", "torch.stack", "torch.stack", "torch.stack", "rgb.max", "rgb.min", "math.sqrt", "torch.isfinite", "torch.isfinite", "torch.isfinite"], "function", ["None"], ["", "def", "rgb2hsv", "(", "rgb", ")", ":", "\n", "    ", "\"\"\"Convert a 4-d RGB tensor to the HSV counterpart.\n\n    Here, we compute hue using atan2() based on the definition in [1],\n    instead of using the common lookup table approach as in [2, 3].\n    Those values agree when the angle is a multiple of 30\u00b0,\n    otherwise they may differ at most ~1.2\u00b0.\n\n    References\n    [1] https://en.wikipedia.org/wiki/Hue\n    [2] https://www.rapidtables.com/convert/color/rgb-to-hsv.html\n    [3] https://github.com/scikit-image/scikit-image/blob/master/skimage/color/colorconv.py#L212\n    \"\"\"", "\n", "\n", "r", ",", "g", ",", "b", "=", "rgb", "[", ":", ",", "0", ",", ":", ",", ":", "]", ",", "rgb", "[", ":", ",", "1", ",", ":", ",", ":", "]", ",", "rgb", "[", ":", ",", "2", ",", ":", ",", ":", "]", "\n", "\n", "Cmax", "=", "rgb", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "Cmin", "=", "rgb", ".", "min", "(", "1", ")", "[", "0", "]", "\n", "delta", "=", "Cmax", "-", "Cmin", "\n", "\n", "hue", "=", "torch", ".", "atan2", "(", "math", ".", "sqrt", "(", "3", ")", "*", "(", "g", "-", "b", ")", ",", "2", "*", "r", "-", "g", "-", "b", ")", "\n", "hue", "=", "(", "hue", "%", "(", "2", "*", "math", ".", "pi", ")", ")", "/", "(", "2", "*", "math", ".", "pi", ")", "\n", "saturate", "=", "delta", "/", "Cmax", "\n", "value", "=", "Cmax", "\n", "hsv", "=", "torch", ".", "stack", "(", "[", "hue", ",", "saturate", ",", "value", "]", ",", "dim", "=", "1", ")", "\n", "hsv", "[", "~", "torch", ".", "isfinite", "(", "hsv", ")", "]", "=", "0.", "\n", "return", "hsv", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.transform_layers.hsv2rgb": [[45, 67], ["hsv.new_tensor().view", "torch.min", "torch.min", "torch.min", "torch.clamp", "torch.clamp", "torch.clamp", "hsv.new_tensor"], "function", ["None"], ["", "def", "hsv2rgb", "(", "hsv", ")", ":", "\n", "    ", "\"\"\"Convert a 4-d HSV tensor to the RGB counterpart.\n\n    >>> %timeit hsv2rgb(hsv)\n    2.37 ms \u00b1 13.4 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 100 loops each)\n    >>> %timeit rgb2hsv_fast(rgb)\n    298 \u00b5s \u00b1 542 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000 loops each)\n    >>> torch.allclose(hsv2rgb(hsv), hsv2rgb_fast(hsv), atol=1e-6)\n    True\n\n    References\n    [1] https://en.wikipedia.org/wiki/HSL_and_HSV#HSV_to_RGB_alternative\n    \"\"\"", "\n", "h", ",", "s", ",", "v", "=", "hsv", "[", ":", ",", "[", "0", "]", "]", ",", "hsv", "[", ":", ",", "[", "1", "]", "]", ",", "hsv", "[", ":", ",", "[", "2", "]", "]", "\n", "c", "=", "v", "*", "s", "\n", "\n", "n", "=", "hsv", ".", "new_tensor", "(", "[", "5", ",", "3", ",", "1", "]", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "k", "=", "(", "n", "+", "h", "*", "6", ")", "%", "6", "\n", "t", "=", "torch", ".", "min", "(", "k", ",", "4", "-", "k", ")", "\n", "t", "=", "torch", ".", "clamp", "(", "t", ",", "0", ",", "1", ")", "\n", "\n", "return", "v", "-", "c", "*", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__": [[5, 11], ["torch.Module.__init__", "torch.Sequential", "torch.Linear", "torch.ReLU", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.__init__"], ["    ", "def", "__init__", "(", "self", ",", "last_dim", ",", "num_classes", "=", "10", ",", "simclr_dim", "=", "128", ")", ":", "\n", "        ", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "simclr_layer", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "last_dim", ",", "last_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "last_dim", ",", "simclr_dim", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.penultimate": [[13, 16], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "penultimate", "(", "self", ",", "inputs", ",", "all_features", "=", "False", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.forward": [[17, 35], ["base_model.BaseModel.penultimate", "base_model.BaseModel.simclr_layer"], "methods", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.base_model.BaseModel.penultimate"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "penultimate", "=", "False", ",", "simclr", "=", "False", ")", ":", "\n", "        ", "_aux", "=", "{", "}", "\n", "_return_aux", "=", "False", "\n", "\n", "features", "=", "self", ".", "penultimate", "(", "inputs", ")", "\n", "\n", "if", "penultimate", ":", "\n", "            ", "_return_aux", "=", "True", "\n", "_aux", "[", "'penultimate'", "]", "=", "features", "\n", "\n", "", "if", "simclr", ":", "\n", "            ", "_return_aux", "=", "True", "\n", "_aux", "[", "'simclr'", "]", "=", "self", ".", "simclr_layer", "(", "features", ")", "\n", "\n", "", "if", "_return_aux", ":", "\n", "            ", "return", "None", ",", "_aux", "\n", "\n", "", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.classifier.get_simclr_augmentation": [[7, 33], ["models.ColorJitterLayer", "models.RandomColorGrayLayer", "models.RandomResizedCropLayer", "torch.Identity", "torch.Sequential", "torch.Sequential"], "function", ["None"], ["def", "get_simclr_augmentation", "(", "P", ",", "image_size", ")", ":", "\n", "\n", "# parameter for resizecrop", "\n", "    ", "resize_scale", "=", "(", "P", ".", "resize_factor", ",", "1.0", ")", "# resize scaling factor", "\n", "\n", "# Align augmentation", "\n", "color_jitter", "=", "TL", ".", "ColorJitterLayer", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "hue", "=", "0.1", ",", "p", "=", "0.8", ")", "\n", "color_gray", "=", "TL", ".", "RandomColorGrayLayer", "(", "p", "=", "0.2", ")", "\n", "resize_crop", "=", "TL", ".", "RandomResizedCropLayer", "(", "scale", "=", "resize_scale", ",", "size", "=", "image_size", ")", "\n", "\n", "# disable resize_crop", "\n", "resize_crop", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "if", "P", ".", "dataset", "==", "'imagenet'", ":", "# Using RandomResizedCrop at PIL transform", "\n", "        ", "transform", "=", "nn", ".", "Sequential", "(", "\n", "color_jitter", ",", "\n", "color_gray", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "transform", "=", "nn", ".", "Sequential", "(", "\n", "color_jitter", ",", "\n", "color_gray", ",", "\n", "resize_crop", ",", "\n", ")", "\n", "\n", "", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.classifier.get_simclr_augmentation_crop_only": [[34, 46], ["models.RandomResizedCropLayer", "torch.Identity", "torch.Sequential"], "function", ["None"], ["", "def", "get_simclr_augmentation_crop_only", "(", "P", ",", "image_size", ")", ":", "\n", "# parameter for resizecrop", "\n", "    ", "resize_scale", "=", "(", "P", ".", "resize_factor", ",", "1.0", ")", "# resize scaling factor", "\n", "\n", "# Align augmentation", "\n", "resize_crop", "=", "TL", ".", "RandomResizedCropLayer", "(", "scale", "=", "resize_scale", ",", "size", "=", "image_size", ")", "\n", "\n", "# disable resize crop", "\n", "resize_crop", "=", "nn", ".", "Identity", "(", ")", "\n", "# Transform define #", "\n", "transform", "=", "nn", ".", "Sequential", "(", "resize_crop", ")", "\n", "return", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.models.classifier.get_classifier": [[47, 63], ["models.resnet_imagenet.resnet50", "NotImplementedError", "torch.load", "torch.load", "models.resnet_imagenet.resnet50.load_state_dict", "print", "print"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.models.resnet_imagenet.resnet50"], ["", "def", "get_classifier", "(", "mode", ",", "n_classes", "=", "10", ",", "pretrain", "=", "None", ")", ":", "\n", "    ", "if", "mode", "==", "'resnet50_imagenet'", ":", "\n", "        ", "classifier", "=", "resnet50", "(", "num_classes", "=", "n_classes", ")", "\n", "if", "not", "pretrain", "is", "None", ":", "\n", "            ", "ckpt", "=", "torch", ".", "load", "(", "pretrain", ")", "\n", "if", "'state_dict'", "in", "ckpt", ":", "\n", "                ", "state_dict", "=", "ckpt", "[", "'state_dict'", "]", "\n", "", "else", ":", "\n", "                ", "state_dict", "=", "ckpt", "\n", "", "missing", ",", "unexpected", "=", "classifier", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "f\"Loaded model from {pretrain}\"", ")", "\n", "print", "(", "f\"Missing keys: {missing}\\nUnexpected keys: {unexpected}\"", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "return", "classifier", "\n", "\n"]], "home.repos.pwc.inspect_result.silvia1993_HyMOS.common.common.parse_args": [[4, 40], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.silvia1993_HyMOS.common.common.parse_args", "home.repos.pwc.inspect_result.silvia1993_HyMOS.common.common.parse_args"], ["def", "parse_args", "(", "default", "=", "False", ")", ":", "\n", "    ", "\"\"\"Command-line argument parser for training.\"\"\"", "\n", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "'Pytorch implementation of HyMOS'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "help", "=", "'Dataset'", ",", "default", "=", "'OfficeHome'", ",", "\n", "choices", "=", "[", "'OfficeHome'", ",", "'DomainNet'", ",", "'Office31'", "]", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--test_domain'", ",", "help", "=", "\"Domain (or name of file referring to data) for testing\"", ",", "type", "=", "str", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'Local rank for distributed learning'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_path'", ",", "help", "=", "'Path to the loading checkpoint for eval'", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_strict\"", ",", "help", "=", "'Do not strictly load state_dicts'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain'", ",", "help", "=", "\"Path to pretrained network\"", ",", "default", "=", "'pretrained/resnet50_SupCLR.pth'", ")", "\n", "\n", "##### Training Configurations #####", "\n", "parser", ".", "add_argument", "(", "'--lr_init'", ",", "help", "=", "'Initial learning rate'", ",", "default", "=", "0.005", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "help", "=", "'Weight decay'", ",", "default", "=", "1e-6", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "help", "=", "'Batch size for style batches'", ",", "default", "=", "32", ",", "type", "=", "int", ")", "\n", "\n", "##### Objective Configurations #####", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "help", "=", "'Temperature for similarity'", ",", "default", "=", "0.07", ",", "type", "=", "float", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--suffix\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "help", "=", "\"suffix for log dir\"", ")", "\n", "\n", "#### Style transfer options ####", "\n", "parser", ".", "add_argument", "(", "\"--adain_probability\"", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "\"Probability to apply adain to each batch image\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adain_alpha\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "\"Alpha coefficient for adain style transfer\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adain_ckpt\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Path to adain checkpoint\"", ")", "\n", "\n", "if", "default", ":", "\n", "        ", "return", "parser", ".", "parse_args", "(", "''", ")", "# empty string", "\n", "", "else", ":", "\n", "        ", "return", "parser", ".", "parse_args", "(", ")", "\n", "", "", ""]]}