{"home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.interp1d.Interp1d.__call__": [[5, 7], ["interp1d.Interp1d.forward"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet.forward"], ["    ", "def", "__call__", "(", "self", ",", "x", ",", "y", ",", "xnew", ",", "out", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "x", ",", "y", ",", "xnew", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.interp1d.Interp1d.forward": [[8, 148], ["max", "ynew.view.view.long", "torch.searchsorted", "torch.clamp", "ctx.save_for_backward", "torch.finfo", "list", "len", "v[].contiguous().view", "torch.zeros", "v[].to", "v[].expand", "v[].contiguous", "v[].contiguous", "torch.gather", "len", "len", "set", "out.numel", "out.reshape", "torch.enable_grad", "contextlib.suppress", "interp1d.Interp1d.forward.sel"], "methods", ["None"], ["", "def", "forward", "(", "ctx", ",", "x", ",", "y", ",", "xnew", ",", "out", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Linear 1D interpolation on the GPU for Pytorch.\n        This function returns interpolated values of a set of 1-D functions at\n        the desired query points `xnew`.\n        This function is working similarly to Matlab\u2122 or scipy functions with\n        the `linear` interpolation mode on, except that it parallelises over\n        any number of desired interpolation problems.\n        The code will run on GPU if all the tensors provided are on a cuda\n        device.\n        Parameters\n        ----------\n        x : (N, ) or (D, N) Pytorch Tensor\n            A 1-D or 2-D tensor of real values.\n        y : (N,) or (D, N) Pytorch Tensor\n            A 1-D or 2-D tensor of real values. The length of `y` along its\n            last dimension must be the same as that of `x`\n        xnew : (P,) or (D, P) Pytorch Tensor\n            A 1-D or 2-D tensor of real values. `xnew` can only be 1-D if\n            _both_ `x` and `y` are 1-D. Otherwise, its length along the first\n            dimension must be the same as that of whichever `x` and `y` is 2-D.\n        out : Pytorch Tensor, same shape as `xnew`\n            Tensor for the output. If None: allocated automatically.\n        \"\"\"", "\n", "# making the vectors at least 2D", "\n", "is_flat", "=", "{", "}", "\n", "require_grad", "=", "{", "}", "\n", "v", "=", "{", "}", "\n", "device", "=", "[", "]", "\n", "eps", "=", "torch", ".", "finfo", "(", "y", ".", "dtype", ")", ".", "eps", "\n", "for", "name", ",", "vec", "in", "{", "'x'", ":", "x", ",", "'y'", ":", "y", ",", "'xnew'", ":", "xnew", "}", ".", "items", "(", ")", ":", "\n", "            ", "assert", "len", "(", "vec", ".", "shape", ")", "<=", "2", ",", "'interp1d: all inputs must be '", "'at most 2-D.'", "\n", "if", "len", "(", "vec", ".", "shape", ")", "==", "1", ":", "\n", "                ", "v", "[", "name", "]", "=", "vec", "[", "None", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "v", "[", "name", "]", "=", "vec", "\n", "", "is_flat", "[", "name", "]", "=", "v", "[", "name", "]", ".", "shape", "[", "0", "]", "==", "1", "\n", "require_grad", "[", "name", "]", "=", "vec", ".", "requires_grad", "\n", "device", "=", "list", "(", "set", "(", "device", "+", "[", "str", "(", "vec", ".", "device", ")", "]", ")", ")", "\n", "", "assert", "len", "(", "device", ")", "==", "1", ",", "'All parameters must be on the same device.'", "\n", "device", "=", "device", "[", "0", "]", "\n", "\n", "# Checking for the dimensions", "\n", "assert", "(", "v", "[", "'x'", "]", ".", "shape", "[", "1", "]", "==", "v", "[", "'y'", "]", ".", "shape", "[", "1", "]", "\n", "and", "(", "\n", "v", "[", "'x'", "]", ".", "shape", "[", "0", "]", "==", "v", "[", "'y'", "]", ".", "shape", "[", "0", "]", "\n", "or", "v", "[", "'x'", "]", ".", "shape", "[", "0", "]", "==", "1", "\n", "or", "v", "[", "'y'", "]", ".", "shape", "[", "0", "]", "==", "1", "\n", ")", "\n", ")", ",", "(", "\"x and y must have the same number of columns, and either \"", "\n", "\"the same number of row or one of them having only one \"", "\n", "\"row.\"", ")", "\n", "\n", "reshaped_xnew", "=", "False", "\n", "if", "(", "(", "v", "[", "'x'", "]", ".", "shape", "[", "0", "]", "==", "1", ")", "and", "(", "v", "[", "'y'", "]", ".", "shape", "[", "0", "]", "==", "1", ")", "\n", "and", "(", "v", "[", "'xnew'", "]", ".", "shape", "[", "0", "]", ">", "1", ")", ")", ":", "\n", "# if there is only one row for both x and y, there is no need to", "\n", "# loop over the rows of xnew because they will all have to face the", "\n", "# same interpolation problem. We should just stack them together to", "\n", "# call interp1d and put them back in place afterwards.", "\n", "            ", "original_xnew_shape", "=", "v", "[", "'xnew'", "]", ".", "shape", "\n", "v", "[", "'xnew'", "]", "=", "v", "[", "'xnew'", "]", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "reshaped_xnew", "=", "True", "\n", "\n", "# identify the dimensions of output and check if the one provided is ok", "\n", "", "D", "=", "max", "(", "v", "[", "'x'", "]", ".", "shape", "[", "0", "]", ",", "v", "[", "'xnew'", "]", ".", "shape", "[", "0", "]", ")", "\n", "shape_ynew", "=", "(", "D", ",", "v", "[", "'xnew'", "]", ".", "shape", "[", "-", "1", "]", ")", "\n", "if", "out", "is", "not", "None", ":", "\n", "            ", "if", "out", ".", "numel", "(", ")", "!=", "shape_ynew", "[", "0", "]", "*", "shape_ynew", "[", "1", "]", ":", "\n", "# The output provided is of incorrect shape.", "\n", "# Going for a new one", "\n", "                ", "out", "=", "None", "\n", "", "else", ":", "\n", "                ", "ynew", "=", "out", ".", "reshape", "(", "shape_ynew", ")", "\n", "", "", "if", "out", "is", "None", ":", "\n", "            ", "ynew", "=", "torch", ".", "zeros", "(", "*", "shape_ynew", ",", "device", "=", "device", ")", "\n", "\n", "# moving everything to the desired device in case it was not there", "\n", "# already (not handling the case things do not fit entirely, user will", "\n", "# do it if required.)", "\n", "", "for", "name", "in", "v", ":", "\n", "            ", "v", "[", "name", "]", "=", "v", "[", "name", "]", ".", "to", "(", "device", ")", "\n", "\n", "# calling searchsorted on the x values.", "\n", "", "ind", "=", "ynew", ".", "long", "(", ")", "\n", "\n", "# expanding xnew to match the number of rows of x in case only one xnew is", "\n", "# provided", "\n", "if", "v", "[", "'xnew'", "]", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "            ", "v", "[", "'xnew'", "]", "=", "v", "[", "'xnew'", "]", ".", "expand", "(", "v", "[", "'x'", "]", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "", "torch", ".", "searchsorted", "(", "v", "[", "'x'", "]", ".", "contiguous", "(", ")", ",", "\n", "v", "[", "'xnew'", "]", ".", "contiguous", "(", ")", ",", "out", "=", "ind", ")", "\n", "\n", "# the `-1` is because searchsorted looks for the index where the values", "\n", "# must be inserted to preserve order. And we want the index of the", "\n", "# preceeding value.", "\n", "ind", "-=", "1", "\n", "# we clamp the index, because the number of intervals is x.shape-1,", "\n", "# and the left neighbour should hence be at most number of intervals", "\n", "# -1, i.e. number of columns in x -2", "\n", "ind", "=", "torch", ".", "clamp", "(", "ind", ",", "0", ",", "v", "[", "'x'", "]", ".", "shape", "[", "1", "]", "-", "1", "-", "1", ")", "\n", "\n", "# helper function to select stuff according to the found indices.", "\n", "def", "sel", "(", "name", ")", ":", "\n", "            ", "if", "is_flat", "[", "name", "]", ":", "\n", "                ", "return", "v", "[", "name", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "[", "ind", "]", "\n", "", "return", "torch", ".", "gather", "(", "v", "[", "name", "]", ",", "1", ",", "ind", ")", "\n", "\n", "# activating gradient storing for everything now", "\n", "", "enable_grad", "=", "False", "\n", "saved_inputs", "=", "[", "]", "\n", "for", "name", "in", "[", "'x'", ",", "'y'", ",", "'xnew'", "]", ":", "\n", "            ", "if", "require_grad", "[", "name", "]", ":", "\n", "                ", "enable_grad", "=", "True", "\n", "saved_inputs", "+=", "[", "v", "[", "name", "]", "]", "\n", "", "else", ":", "\n", "                ", "saved_inputs", "+=", "[", "None", ",", "]", "\n", "# assuming x are sorted in the dimension 1, computing the slopes for", "\n", "# the segments", "\n", "", "", "is_flat", "[", "'slopes'", "]", "=", "is_flat", "[", "'x'", "]", "\n", "# now we have found the indices of the neighbors, we start building the", "\n", "# output. Hence, we start also activating gradient tracking", "\n", "with", "torch", ".", "enable_grad", "(", ")", "if", "enable_grad", "else", "contextlib", ".", "suppress", "(", ")", ":", "\n", "            ", "v", "[", "'slopes'", "]", "=", "(", "\n", "(", "v", "[", "'y'", "]", "[", ":", ",", "1", ":", "]", "-", "v", "[", "'y'", "]", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "/", "\n", "(", "eps", "+", "(", "v", "[", "'x'", "]", "[", ":", ",", "1", ":", "]", "-", "v", "[", "'x'", "]", "[", ":", ",", ":", "-", "1", "]", ")", ")", "\n", ")", "\n", "\n", "# now build the linear interpolation", "\n", "ynew", "=", "sel", "(", "'y'", ")", "+", "sel", "(", "'slopes'", ")", "*", "(", "\n", "v", "[", "'xnew'", "]", "-", "sel", "(", "'x'", ")", ")", "\n", "\n", "if", "reshaped_xnew", ":", "\n", "                ", "ynew", "=", "ynew", ".", "view", "(", "original_xnew_shape", ")", "\n", "\n", "", "", "ctx", ".", "save_for_backward", "(", "ynew", ",", "*", "saved_inputs", ")", "\n", "return", "ynew", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.interp1d.Interp1d.backward": [[149, 163], ["torch.autograd.grad", "range", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_out", ")", ":", "\n", "        ", "inputs", "=", "ctx", ".", "saved_tensors", "[", "1", ":", "]", "\n", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "ctx", ".", "saved_tensors", "[", "0", "]", ",", "\n", "[", "i", "for", "i", "in", "inputs", "if", "i", "is", "not", "None", "]", ",", "\n", "grad_out", ",", "retain_graph", "=", "True", ")", "\n", "result", "=", "[", "None", ",", "]", "*", "5", "\n", "pos", "=", "0", "\n", "for", "index", "in", "range", "(", "len", "(", "inputs", ")", ")", ":", "\n", "            ", "if", "inputs", "[", "index", "]", "is", "not", "None", ":", "\n", "                ", "result", "[", "index", "]", "=", "gradients", "[", "pos", "]", "\n", "pos", "+=", "1", "\n", "", "", "return", "(", "*", "result", ",", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.train_fine.run": [[56, 257], ["transforms.spatial_transforms.Compose", "transforms.spatial_transforms.Compose", "charades_fine.Charades", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "charades_fine.Charades", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "x3d_fine.generate_model", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel.state_dict", "fine_net.state_dict.update", "nn.DataParallel.load_state_dict", "nn.DataParallel.replace_logits", "nn.DataParallel.cuda", "torch.DataParallel", "print", "print", "torch.SGD", "torch.lr_scheduler.MultiStepLR", "torch.BCELoss", "torch.BCELoss", "apmeter.APMeter", "apmeter.APMeter", "len", "len", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "nn.DataParallel.parameters", "optim.SGD.load_state_dict", "optim.lr_scheduler.MultiStepLR.load_state_dict", "print", "print", "transforms.spatial_transforms.MultiScaleRandomCropMultigrid", "transforms.spatial_transforms.RandomHorizontalFlip", "transforms.spatial_transforms.ToTensor", "transforms.spatial_transforms.Normalize", "transforms.spatial_transforms.CenterCropScaled", "transforms.spatial_transforms.ToTensor", "transforms.spatial_transforms.Normalize", "pkbar.Pbar", "optim.SGD.zero_grad", "print", "enumerate", "nn.DataParallel.train", "torch.autograd.set_grad_enabled", "torch.autograd.set_grad_enabled", "torch.autograd.set_grad_enabled", "torch.autograd.set_grad_enabled", "nn.DataParallel.train", "nn.DataParallel.module.aggregate_sub_bn_stats", "torch.autograd.set_grad_enabled", "torch.autograd.set_grad_enabled", "torch.autograd.set_grad_enabled", "torch.autograd.set_grad_enabled", "pkbar.Pbar.update", "inputs.view.cuda", "labels.cuda.size", "labels.cuda.cuda", "masks.cuda.cuda", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "nn.DataParallel.", "torch.interpolate", "nn.BCELoss.", "criterion_class.item", "loc_loss.item", "loss.item", "apmeter.APMeter.value().mean", "apmeter.APMeter.reset", "print", "optim.lr_scheduler.MultiStepLR.step", "str().zfill", "inputs.view.squeeze", "inputs.view.view", "per_frame_logits.view.view", "torch.sigmoid", "nn.BCELoss.", "range", "range", "loss.backward", "train_fine.lr_warmup", "optim.SGD.step", "optim.SGD.zero_grad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sigmoid", "masks.cuda.unsqueeze", "masks.cuda.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "apmeter.APMeter.add", "apmeter.APMeter.add", "apmeter.APMeter.value().mean", "apmeter.APMeter.reset", "print", "torch.save", "torch.save", "torch.save", "torch.save", "apmeter.APMeter.value", "str", "torch.max", "torch.max", "torch.max", "torch.max", "[].transpose().detach().cpu().numpy", "[].transpose().cpu().numpy", "[].transpose().detach().cpu().numpy", "[].transpose().cpu().numpy", "nn.DataParallel.module.state_dict", "optim.SGD.state_dict", "optim.lr_scheduler.MultiStepLR.state_dict", "apmeter.APMeter.value", "[].transpose().detach().cpu", "[].transpose().cpu", "[].transpose().detach().cpu", "[].transpose().cpu", "str().zfill", "[].transpose().detach", "[].transpose", "[].transpose().detach", "[].transpose", "str", "[].transpose", "[].transpose", "valid_t[].item", "valid_t[].item", "valid_t[].item", "valid_t[].item"], "function", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.generate_model", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.replace_logits", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet.aggregate_sub_bn_stats", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.reset", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.SwishEfficient.backward", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.train_coarse_fineFEAT.lr_warmup", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.add", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.add", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.reset", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.value", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.value"], ["def", "run", "(", "init_lr", "=", "INIT_LR", ",", "warmup_steps", "=", "0", ",", "max_epochs", "=", "200", ",", "mode", "=", "'rgb'", ",", "root", "=", "CHARADES_ROOT", ",", "\n", "train_split", "=", "CHARADES_ANNO", ",", "batch_size", "=", "BS", "*", "BS_UPSCALE", ",", "frames", "=", "80", "*", "4", ")", ":", "\n", "\n", "    ", "crop_size", "=", "{", "'S'", ":", "160", ",", "'M'", ":", "224", ",", "'XL'", ":", "312", "}", "[", "X3D_VERSION", "]", "\n", "resize_size", "=", "{", "'S'", ":", "[", "180.", ",", "225.", "]", ",", "'M'", ":", "[", "256.", ",", "320.", "]", ",", "'XL'", ":", "[", "360.", ",", "450.", "]", "}", "[", "X3D_VERSION", "]", "#[256.,320.]", "\n", "gamma_tau", "=", "{", "'S'", ":", "6", ",", "'M'", ":", "5", "*", "1", ",", "'XL'", ":", "5", "}", "[", "X3D_VERSION", "]", "# 5", "\n", "\n", "load_steps", "=", "st_steps", "=", "steps", "=", "0", "\n", "epochs", "=", "0", "\n", "num_steps_per_update", "=", "1", "#4 * 2 # accum gradient", "\n", "cur_iterations", "=", "steps", "*", "num_steps_per_update", "\n", "iterations_per_epoch", "=", "CHARADES_TR_SIZE", "//", "(", "batch_size", ")", "# *num_steps_per_update", "\n", "val_batch_size", "=", "batch_size", "//", "2", "\n", "val_iterations_per_epoch", "=", "CHARADES_VAL_SIZE", "//", "(", "val_batch_size", ")", "# (batch_size//16) 10 crop", "\n", "max_steps", "=", "iterations_per_epoch", "*", "max_epochs", "\n", "\n", "lr_schedule", "=", "[", "15", ",", "20", ",", "25", "]", "\n", "\n", "train_spatial_transforms", "=", "Compose", "(", "[", "MultiScaleRandomCropMultigrid", "(", "[", "crop_size", "/", "i", "for", "i", "in", "resize_size", "]", ",", "crop_size", ")", ",", "\n", "RandomHorizontalFlip", "(", ")", ",", "\n", "ToTensor", "(", "255", ")", ",", "\n", "Normalize", "(", "CHARADES_MEAN", ",", "CHARADES_STD", ")", "]", ")", "\n", "val_spatial_transforms", "=", "Compose", "(", "[", "CenterCropScaled", "(", "crop_size", ")", ",", "\n", "ToTensor", "(", "255", ")", ",", "\n", "Normalize", "(", "CHARADES_MEAN", ",", "CHARADES_STD", ")", "]", ")", "\n", "\n", "dataset", "=", "Charades", "(", "train_split", ",", "'training'", ",", "root", ",", "train_spatial_transforms", ",", "\n", "task", "=", "'loc'", ",", "frames", "=", "frames", ",", "gamma_tau", "=", "gamma_tau", ",", "crops", "=", "1", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "8", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "val_dataset", "=", "Charades", "(", "train_split", ",", "'testing'", ",", "root", ",", "val_spatial_transforms", ",", "\n", "task", "=", "'loc'", ",", "frames", "=", "frames", ",", "gamma_tau", "=", "gamma_tau", ",", "crops", "=", "1", ")", "\n", "val_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "val_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "8", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "\n", "dataloaders", "=", "{", "'train'", ":", "dataloader", ",", "'val'", ":", "val_dataloader", "}", "\n", "datasets", "=", "{", "'train'", ":", "dataset", ",", "'val'", ":", "val_dataset", "}", "\n", "print", "(", "'train'", ",", "len", "(", "datasets", "[", "'train'", "]", ")", ",", "'val'", ",", "len", "(", "datasets", "[", "'val'", "]", ")", ")", "\n", "print", "(", "'Total iterations:'", ",", "max_steps", ",", "'Total epochs:'", ",", "max_epochs", ")", "\n", "print", "(", "'datasets created'", ")", "\n", "\n", "# setup the model", "\n", "# ON 4 GPUS, 128/4, 32 CLIPS PER GPU, base_bn_splits=4 means BN calculated per 8xlong_cycle_multiplier clips", "\n", "\n", "fine_net", "=", "x3d_fine", ".", "generate_model", "(", "x3d_version", "=", "X3D_VERSION", ",", "n_classes", "=", "400", ",", "n_input_channels", "=", "3", ",", "\n", "task", "=", "'loc'", ",", "dropout", "=", "0.5", ",", "base_bn_splits", "=", "1", ",", "t_downsample", "=", "False", ",", "extract_feat", "=", "False", ")", "\n", "load_ckpt", "=", "torch", ".", "load", "(", "'models/x3d_multigrid_kinetics_fb_pretrained.pt'", ")", "\n", "state", "=", "fine_net", ".", "state_dict", "(", ")", "\n", "state", ".", "update", "(", "load_ckpt", "[", "'model_state_dict'", "]", ")", "\n", "fine_net", ".", "load_state_dict", "(", "state", ")", "\n", "\n", "save_model", "=", "'models/fine_charades_'", "\n", "\n", "fine_net", ".", "replace_logits", "(", "157", ")", "\n", "\n", "'''load_ckpt = torch.load('models/fine_charades_039000_SAVE.pt')\n    state = fine_net.state_dict()\n    state.update(load_ckpt['model_state_dict'])\n    fine_net.load_state_dict(state)'''", "\n", "\n", "if", "steps", ">", "0", ":", "\n", "        ", "load_ckpt", "=", "torch", ".", "load", "(", "'models/fine_charades_'", "+", "str", "(", "load_steps", ")", ".", "zfill", "(", "6", ")", "+", "'.pt'", ")", "\n", "fine_net", ".", "load_state_dict", "(", "load_ckpt", "[", "'model_state_dict'", "]", ")", "\n", "\n", "", "fine_net", ".", "cuda", "(", ")", "\n", "fine_net", "=", "nn", ".", "DataParallel", "(", "fine_net", ")", "\n", "print", "(", "'model loaded'", ")", "\n", "\n", "lr", "=", "init_lr", "\n", "print", "(", "'LR:%f'", "%", "lr", ")", "\n", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "fine_net", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "1e-5", ")", "\n", "lr_sched", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "lr_schedule", ",", "verbose", "=", "True", ")", "\n", "if", "steps", ">", "0", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "load_ckpt", "[", "'optimizer_state_dict'", "]", ")", "\n", "lr_sched", ".", "load_state_dict", "(", "load_ckpt", "[", "'scheduler_state_dict'", "]", ")", "\n", "\n", "", "criterion_class", "=", "nn", ".", "BCELoss", "(", "reduction", "=", "'mean'", ")", "\n", "criterion_loc", "=", "nn", ".", "BCELoss", "(", "reduction", "=", "'sum'", ")", "\n", "\n", "val_apm", "=", "APMeter", "(", ")", "\n", "tr_apm", "=", "APMeter", "(", ")", "\n", "\n", "while", "epochs", "<", "max_epochs", ":", "#for epoch in range(num_epochs):", "\n", "        ", "print", "(", "'Step {} Epoch {}'", ".", "format", "(", "steps", ",", "epochs", ")", ")", "\n", "print", "(", "'-'", "*", "10", ")", "\n", "\n", "# Each epoch has a training and validation phase", "\n", "for", "phase", "in", "4", "*", "[", "'train'", "]", "+", "[", "'val'", "]", ":", "\n", "            ", "bar_st", "=", "iterations_per_epoch", "if", "phase", "==", "'train'", "else", "val_iterations_per_epoch", "\n", "bar", "=", "pkbar", ".", "Pbar", "(", "name", "=", "'update: '", ",", "target", "=", "bar_st", ")", "\n", "if", "phase", "==", "'train'", ":", "\n", "                ", "fine_net", ".", "train", "(", "True", ")", "\n", "epochs", "+=", "1", "\n", "torch", ".", "autograd", ".", "set_grad_enabled", "(", "True", ")", "\n", "", "else", ":", "\n", "                ", "fine_net", ".", "train", "(", "False", ")", "# Set model to evaluate mode", "\n", "# FOR EVAL AGGREGATE BN STATS", "\n", "_", "=", "fine_net", ".", "module", ".", "aggregate_sub_bn_stats", "(", ")", "\n", "torch", ".", "autograd", ".", "set_grad_enabled", "(", "False", ")", "\n", "\n", "", "tot_loss", "=", "0.0", "\n", "tot_loc_loss", "=", "0.0", "\n", "tot_cls_loss", "=", "0.0", "\n", "\n", "tot_acc", "=", "0.0", "\n", "tot_corr", "=", "0.0", "\n", "tot_dat", "=", "0.0", "\n", "num_iter", "=", "0", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Iterate over data.", "\n", "print", "(", "phase", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "dataloaders", "[", "phase", "]", ")", ":", "\n", "#for data in dataloaders[phase]:", "\n", "                ", "num_iter", "+=", "1", "\n", "bar", ".", "update", "(", "i", ")", "\n", "if", "phase", "==", "'train'", ":", "\n", "                    ", "inputs", ",", "labels", ",", "masks", ",", "name", "=", "data", "\n", "inputs", "=", "inputs", ".", "squeeze", "(", "1", ")", "\n", "if", "inputs", ".", "shape", "[", "0", "]", "!=", "batch_size", ":", "\n", "                        ", "continue", "\n", "", "", "else", ":", "\n", "                    ", "inputs", ",", "labels", ",", "masks", ",", "name", "=", "data", "\n", "b", ",", "n", ",", "c", ",", "t", ",", "h", ",", "w", "=", "inputs", ".", "shape", "\n", "if", "inputs", ".", "shape", "[", "0", "]", "!=", "val_batch_size", ":", "\n", "                        ", "continue", "\n", "", "inputs", "=", "inputs", ".", "view", "(", "b", "*", "n", ",", "c", ",", "t", ",", "h", ",", "w", ")", "\n", "\n", "", "inputs", "=", "inputs", ".", "cuda", "(", ")", "# B 3 T W H", "\n", "tl", "=", "labels", ".", "size", "(", "2", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "# B C TL", "\n", "masks", "=", "masks", ".", "cuda", "(", ")", "# B TL", "\n", "valid_t", "=", "torch", ".", "sum", "(", "masks", ",", "dim", "=", "1", ")", ".", "int", "(", ")", "\n", "masks_clip", "=", "masks", "[", ":", ",", ":", ":", "gamma_tau", "*", "2", "]", "\n", "\n", "\n", "per_frame_logits", "=", "fine_net", "(", "[", "inputs", ",", "masks_clip", "]", ")", "# B C T", "\n", "\n", "per_frame_logits", "=", "F", ".", "interpolate", "(", "per_frame_logits", ",", "tl", ",", "mode", "=", "'linear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "if", "phase", "==", "'train'", ":", "\n", "                    ", "probs", "=", "F", ".", "sigmoid", "(", "per_frame_logits", ")", "*", "masks", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "per_frame_logits", "=", "per_frame_logits", ".", "view", "(", "b", ",", "n", ",", "per_frame_logits", ".", "shape", "[", "1", "]", ",", "tl", ")", "\n", "probs", "=", "F", ".", "sigmoid", "(", "per_frame_logits", ")", "#* masks.unsqueeze(1)", "\n", "probs", "=", "torch", ".", "max", "(", "probs", ",", "dim", "=", "1", ")", "[", "0", "]", "*", "masks", ".", "unsqueeze", "(", "1", ")", "\n", "per_frame_logits", "=", "torch", ".", "max", "(", "per_frame_logits", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "", "cls_loss", "=", "criterion_class", "(", "torch", ".", "max", "(", "probs", ",", "dim", "=", "2", ")", "[", "0", "]", ",", "torch", ".", "max", "(", "labels", ",", "dim", "=", "2", ")", "[", "0", "]", ")", "\n", "tot_cls_loss", "+=", "cls_loss", ".", "item", "(", ")", "\n", "\n", "loc_loss", "=", "criterion_loc", "(", "probs", ",", "labels", ")", "/", "(", "torch", ".", "sum", "(", "masks", ")", "*", "labels", ".", "shape", "[", "1", "]", ")", "\n", "tot_loc_loss", "+=", "loc_loss", ".", "item", "(", ")", "\n", "\n", "if", "phase", "==", "'train'", ":", "\n", "                    ", "for", "b", "in", "range", "(", "labels", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "tr_apm", ".", "add", "(", "probs", "[", "b", "]", "[", ":", ",", ":", "valid_t", "[", "b", "]", ".", "item", "(", ")", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "labels", "[", "b", "]", "[", ":", ",", ":", "valid_t", "[", "b", "]", ".", "item", "(", ")", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "for", "b", "in", "range", "(", "labels", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "val_apm", ".", "add", "(", "probs", "[", "b", "]", "[", ":", ",", ":", "valid_t", "[", "b", "]", ".", "item", "(", ")", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "labels", "[", "b", "]", "[", ":", ",", ":", "valid_t", "[", "b", "]", ".", "item", "(", ")", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "\n", "\n", "", "", "loss", "=", "1", "*", "(", "cls_loss", "+", "loc_loss", ")", "/", "(", "2", "*", "num_steps_per_update", ")", "\n", "tot_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "phase", "==", "'train'", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "\n", "", "if", "num_iter", "==", "num_steps_per_update", "and", "phase", "==", "'train'", ":", "\n", "                    ", "lr_warmup", "(", "lr", ",", "steps", "-", "st_steps", ",", "warmup_steps", ",", "optimizer", ")", "# steps init_lr, USE ONLY AT THE START", "\n", "steps", "+=", "1", "\n", "num_iter", "=", "0", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "s_times", "=", "iterations_per_epoch", "//", "2", "\n", "if", "(", "steps", "-", "load_steps", ")", "%", "s_times", "==", "0", ":", "\n", "                        ", "tr_map", "=", "tr_apm", ".", "value", "(", ")", ".", "mean", "(", ")", "\n", "tr_apm", ".", "reset", "(", ")", "\n", "print", "(", "' Epoch:{} {} steps: {} Loc Loss: {:.4f} Cls Loss: {:.4f} Tot Loss: {:.4f} mAP: {:.4f}'", ".", "format", "(", "epochs", ",", "phase", ",", "\n", "steps", ",", "tot_loc_loss", "/", "(", "s_times", "*", "num_steps_per_update", ")", ",", "tot_cls_loss", "/", "(", "s_times", "*", "num_steps_per_update", ")", ",", "tot_loss", "/", "s_times", ",", "tr_map", ")", ")", "\n", "tot_loss", "=", "tot_loc_loss", "=", "tot_cls_loss", "=", "tot_acc", "=", "tot_corr", "=", "tot_dat", "=", "0.", "\n", "", "if", "steps", "%", "(", "1000", ")", "==", "0", ":", "\n", "                        ", "ckpt", "=", "{", "'model_state_dict'", ":", "fine_net", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler_state_dict'", ":", "lr_sched", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "ckpt", ",", "save_model", "+", "str", "(", "steps", ")", ".", "zfill", "(", "6", ")", "+", "'.pt'", ")", "\n", "", "", "", "if", "phase", "==", "'val'", ":", "\n", "                ", "val_map", "=", "val_apm", ".", "value", "(", ")", ".", "mean", "(", ")", "\n", "val_apm", ".", "reset", "(", ")", "\n", "print", "(", "' Epoch:{} {} Loc Loss: {:.4f} Cls Loss: {:.4f} Tot Loss: {:.4f} mAP: {:.4f}'", ".", "format", "(", "epochs", ",", "phase", ",", "\n", "tot_loc_loss", "/", "num_iter", ",", "tot_cls_loss", "/", "num_iter", ",", "(", "tot_loss", "*", "num_steps_per_update", ")", "/", "num_iter", ",", "val_map", ")", ")", "\n", "tot_loss", "=", "tot_loc_loss", "=", "tot_cls_loss", "=", "tot_acc", "=", "tot_corr", "=", "tot_dat", "=", "0.", "\n", "lr_sched", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.train_fine.lr_warmup": [[258, 264], ["min", "float"], "function", ["None"], ["", "", "", "", "def", "lr_warmup", "(", "init_lr", ",", "cur_steps", ",", "warmup_steps", ",", "opt", ")", ":", "\n", "    ", "start_after", "=", "1", "\n", "if", "cur_steps", "<", "warmup_steps", "and", "cur_steps", ">", "start_after", ":", "\n", "        ", "lr_scale", "=", "min", "(", "1.", ",", "float", "(", "cur_steps", "+", "1", ")", "/", "warmup_steps", ")", "\n", "for", "pg", "in", "opt", ".", "param_groups", ":", "\n", "            ", "pg", "[", "'lr'", "]", "=", "lr_scale", "*", "init_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.meter.Meter.reset": [[3, 5], ["None"], "methods", ["None"], ["    ", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.meter.Meter.add": [[6, 8], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.meter.Meter.value": [[9, 11], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.SubBatchNorm3d.__init__": [[15, 30], ["torch.Module.__init__", "args.get", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.Compose.__init__"], ["def", "__init__", "(", "self", ",", "num_splits", ",", "**", "args", ")", ":", "\n", "        ", "super", "(", "SubBatchNorm3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_splits", "=", "num_splits", "\n", "self", ".", "num_features", "=", "args", "[", "\"num_features\"", "]", "\n", "# Keep only one set of weight and bias.", "\n", "if", "args", ".", "get", "(", "\"affine\"", ",", "True", ")", ":", "\n", "            ", "self", ".", "affine", "=", "True", "\n", "args", "[", "\"affine\"", "]", "=", "False", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "affine", "=", "False", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "**", "args", ")", "\n", "args", "[", "\"num_features\"", "]", "=", "self", ".", "num_features", "*", "self", ".", "num_splits", "\n", "self", ".", "split_bn", "=", "nn", ".", "BatchNorm3d", "(", "**", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.SubBatchNorm3d._get_aggregated_mean_std": [[31, 38], ["means.view().sum", "mean.detach", "std.detach", "stds.view().sum", "means.view", "stds.view", "means.view"], "methods", ["None"], ["", "def", "_get_aggregated_mean_std", "(", "self", ",", "means", ",", "stds", ",", "n", ")", ":", "\n", "        ", "mean", "=", "means", ".", "view", "(", "n", ",", "-", "1", ")", ".", "sum", "(", "0", ")", "/", "n", "\n", "std", "=", "(", "\n", "stds", ".", "view", "(", "n", ",", "-", "1", ")", ".", "sum", "(", "0", ")", "/", "n", "\n", "+", "(", "(", "means", ".", "view", "(", "n", ",", "-", "1", ")", "-", "mean", ")", "**", "2", ")", ".", "view", "(", "n", ",", "-", "1", ")", ".", "sum", "(", "0", ")", "/", "n", "\n", ")", "\n", "return", "mean", ".", "detach", "(", ")", ",", "std", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.SubBatchNorm3d.aggregate_stats": [[39, 49], ["x3d_fine.SubBatchNorm3d._get_aggregated_mean_std"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.SubBatchNorm3d._get_aggregated_mean_std"], ["", "def", "aggregate_stats", "(", "self", ")", ":", "\n", "        ", "\"\"\"Synchronize running_mean, and running_var. Call this before eval.\"\"\"", "\n", "if", "self", ".", "split_bn", ".", "track_running_stats", ":", "\n", "            ", "(", "\n", "self", ".", "bn", ".", "running_mean", ".", "data", ",", "\n", "self", ".", "bn", ".", "running_var", ".", "data", ",", "\n", ")", "=", "self", ".", "_get_aggregated_mean_std", "(", "\n", "self", ".", "split_bn", ".", "running_mean", ",", "\n", "self", ".", "split_bn", ".", "running_var", ",", "\n", "self", ".", "num_splits", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.SubBatchNorm3d.forward": [[51, 63], ["x3d_fine.SubBatchNorm3d.view", "x3d_fine.SubBatchNorm3d.split_bn", "x3d_fine.SubBatchNorm3d.view", "x3d_fine.SubBatchNorm3d.bn", "x3d_fine.SubBatchNorm3d.weight.view", "x3d_fine.SubBatchNorm3d.bias.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "n", ",", "c", ",", "t", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "n", "//", "self", ".", "num_splits", ",", "c", "*", "self", ".", "num_splits", ",", "t", ",", "h", ",", "w", ")", "\n", "x", "=", "self", ".", "split_bn", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "n", ",", "c", ",", "t", ",", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "affine", ":", "\n", "            ", "x", "=", "x", "*", "self", ".", "weight", ".", "view", "(", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "bias", ".", "view", "(", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.Swish.__init__": [[67, 69], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.Compose.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Swish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.Swish.forward": [[70, 72], ["SwishEfficient.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "SwishEfficient", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.SwishEfficient.forward": [[76, 81], ["ctx.save_for_backward", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "result", "=", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "ctx", ".", "save_for_backward", "(", "x", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.SwishEfficient.backward": [[82, 87], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "x", "=", "ctx", ".", "saved_variables", "[", "0", "]", "\n", "sigmoid_x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "return", "grad_output", "*", "(", "sigmoid_x", "*", "(", "1", "+", "x", "*", "(", "1", "-", "sigmoid_x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.Bottleneck.__init__": [[110, 131], ["torch.Module.__init__", "x3d_fine.conv1x1x1", "x3d_fine.SubBatchNorm3d", "x3d_fine.conv3x3x3", "x3d_fine.SubBatchNorm3d", "x3d_fine.conv1x1x1", "x3d_fine.SubBatchNorm3d", "x3d_fine.Swish", "torch.ReLU", "torch.ReLU", "torch.ReLU", "x3d_fine.Bottleneck.round_width", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.Compose.__init__", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.conv1x1x1", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.conv3x3x3", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.conv1x1x1", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.Bottleneck.round_width"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "index", "=", "0", ",", "base_bn_splits", "=", "8", ",", "t_downsample", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "index", "=", "index", "\n", "self", ".", "base_bn_splits", "=", "base_bn_splits", "\n", "self", ".", "conv1", "=", "conv1x1x1", "(", "in_planes", ",", "planes", "[", "0", "]", ")", "\n", "self", ".", "bn1", "=", "SubBatchNorm3d", "(", "num_splits", "=", "self", ".", "base_bn_splits", ",", "num_features", "=", "planes", "[", "0", "]", ",", "affine", "=", "True", ")", "#nn.BatchNorm3d(planes[0])", "\n", "self", ".", "conv2", "=", "conv3x3x3", "(", "planes", "[", "0", "]", ",", "planes", "[", "0", "]", ",", "stride", ",", "t_downsample", "=", "t_downsample", ")", "\n", "self", ".", "bn2", "=", "SubBatchNorm3d", "(", "num_splits", "=", "self", ".", "base_bn_splits", ",", "num_features", "=", "planes", "[", "0", "]", ",", "affine", "=", "True", ")", "#nn.BatchNorm3d(planes[0])", "\n", "self", ".", "conv3", "=", "conv1x1x1", "(", "planes", "[", "0", "]", ",", "planes", "[", "1", "]", ",", "t_downsample", "=", "t_downsample", ")", "\n", "self", ".", "bn3", "=", "SubBatchNorm3d", "(", "num_splits", "=", "self", ".", "base_bn_splits", ",", "num_features", "=", "planes", "[", "1", "]", ",", "affine", "=", "True", ")", "#nn.BatchNorm3d(planes[1])", "\n", "self", ".", "swish", "=", "Swish", "(", ")", "#nn.Hardswish()", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "self", ".", "index", "%", "2", "==", "0", ":", "\n", "            ", "width", "=", "self", ".", "round_width", "(", "planes", "[", "0", "]", ")", "\n", "self", ".", "global_pool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv3d", "(", "planes", "[", "0", "]", ",", "width", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv3d", "(", "width", ",", "planes", "[", "0", "]", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.Bottleneck.round_width": [[132, 144], ["max", "int", "int"], "methods", ["None"], ["", "def", "round_width", "(", "self", ",", "width", ",", "multiplier", "=", "0.0625", ",", "min_width", "=", "8", ",", "divisor", "=", "8", ")", ":", "\n", "        ", "if", "not", "multiplier", ":", "\n", "            ", "return", "width", "\n", "\n", "", "width", "*=", "multiplier", "\n", "min_width", "=", "min_width", "or", "divisor", "\n", "width_out", "=", "max", "(", "\n", "min_width", ",", "int", "(", "width", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", "\n", ")", "\n", "if", "width_out", "<", "0.9", "*", "width", ":", "\n", "            ", "width_out", "+=", "divisor", "\n", "", "return", "int", "(", "width_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.Bottleneck.forward": [[146, 176], ["x3d_fine.Bottleneck.conv1", "x3d_fine.Bottleneck.bn1", "x3d_fine.Bottleneck.relu", "x3d_fine.Bottleneck.conv2", "x3d_fine.Bottleneck.bn2", "x3d_fine.Bottleneck.swish", "x3d_fine.Bottleneck.conv3", "x3d_fine.Bottleneck.bn3", "x3d_fine.Bottleneck.relu", "x3d_fine.Bottleneck.global_pool", "x3d_fine.Bottleneck.fc1", "x3d_fine.Bottleneck.relu", "x3d_fine.Bottleneck.fc2", "x3d_fine.Bottleneck.sigmoid", "x3d_fine.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "# Squeeze-and-Excitation", "\n", "if", "self", ".", "index", "%", "2", "==", "0", ":", "\n", "            ", "se_w", "=", "self", ".", "global_pool", "(", "out", ")", "\n", "se_w", "=", "self", ".", "fc1", "(", "se_w", ")", "\n", "se_w", "=", "self", ".", "relu", "(", "se_w", ")", "\n", "se_w", "=", "self", ".", "fc2", "(", "se_w", ")", "\n", "se_w", "=", "self", ".", "sigmoid", "(", "se_w", ")", "\n", "out", "=", "out", "*", "se_w", "\n", "", "out", "=", "self", ".", "swish", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.ResNet.__init__": [[181, 265], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "x3d_fine.SubBatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "x3d_fine.ResNet._make_layer", "x3d_fine.ResNet._make_layer", "x3d_fine.ResNet._make_layer", "x3d_fine.ResNet._make_layer", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "x3d_fine.SubBatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "x3d_fine.ResNet.modules", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "isinstance", "int", "int", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.Compose.__init__", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet._make_layer", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet._make_layer", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet._make_layer", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "block_inplanes", ",", "\n", "n_input_channels", "=", "3", ",", "\n", "conv1_t_size", "=", "7", ",", "\n", "conv1_t_stride", "=", "1", ",", "\n", "shortcut_type", "=", "'B'", ",", "\n", "widen_factor", "=", "1.0", ",", "\n", "dropout", "=", "0.5", ",", "\n", "n_classes", "=", "400", ",", "\n", "base_bn_splits", "=", "8", ",", "\n", "task", "=", "'class'", ",", "\n", "extract_feat", "=", "False", ",", "\n", "global_tower", "=", "False", ",", "\n", "t_downsample", "=", "False", ",", "\n", "aux_losses", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "block_inplanes", "=", "[", "(", "int", "(", "x", "*", "widen_factor", ")", ",", "int", "(", "y", "*", "widen_factor", ")", ")", "for", "x", ",", "y", "in", "block_inplanes", "]", "\n", "self", ".", "index", "=", "0", "\n", "self", ".", "base_bn_splits", "=", "base_bn_splits", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "extract_feat", "=", "extract_feat", "\n", "self", ".", "global_tower", "=", "global_tower", "\n", "self", ".", "t_downsample", "=", "t_downsample", "\n", "\n", "self", ".", "in_planes", "=", "block_inplanes", "[", "0", "]", "[", "1", "]", "\n", "\n", "self", ".", "conv1_s", "=", "nn", ".", "Conv3d", "(", "n_input_channels", ",", "\n", "self", ".", "in_planes", ",", "\n", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv1_t", "=", "nn", ".", "Conv3d", "(", "self", ".", "in_planes", ",", "\n", "self", ".", "in_planes", ",", "\n", "kernel_size", "=", "(", "5", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "2", ",", "0", ",", "0", ")", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "self", ".", "in_planes", ")", "\n", "self", ".", "bn1", "=", "SubBatchNorm3d", "(", "num_splits", "=", "self", ".", "base_bn_splits", ",", "num_features", "=", "self", ".", "in_planes", ",", "affine", "=", "True", ")", "#nn.BatchNorm3d(self.in_planes)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "block_inplanes", "[", "0", "]", ",", "\n", "layers", "[", "0", "]", ",", "\n", "shortcut_type", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "block_inplanes", "[", "1", "]", ",", "\n", "layers", "[", "1", "]", ",", "\n", "shortcut_type", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "block_inplanes", "[", "2", "]", ",", "\n", "layers", "[", "2", "]", ",", "\n", "shortcut_type", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "block_inplanes", "[", "3", "]", ",", "\n", "layers", "[", "3", "]", ",", "\n", "shortcut_type", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv3d", "(", "block_inplanes", "[", "3", "]", "[", "1", "]", ",", "\n", "block_inplanes", "[", "3", "]", "[", "0", "]", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn5", "=", "SubBatchNorm3d", "(", "num_splits", "=", "self", ".", "base_bn_splits", ",", "num_features", "=", "block_inplanes", "[", "3", "]", "[", "0", "]", ",", "affine", "=", "True", ")", "#nn.BatchNorm3d(block_inplanes[3][0])", "\n", "if", "task", "==", "'class'", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "", "elif", "task", "==", "'loc'", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "None", ",", "1", ",", "1", ")", ")", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv3d", "(", "block_inplanes", "[", "3", "]", "[", "0", "]", ",", "2048", ",", "bias", "=", "False", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "2048", ",", "n_classes", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "\n", "mode", "=", "'fan_out'", ",", "\n", "nonlinearity", "=", "'relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.ResNet._downsample_basic_block": [[266, 276], ["torch.avg_pool3d", "torch.avg_pool3d", "torch.avg_pool3d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "zero_pads.cuda.cuda.cuda", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "", "", "def", "_downsample_basic_block", "(", "self", ",", "x", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "zeros", "(", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "\n", "out", ".", "size", "(", "3", ")", ",", "out", ".", "size", "(", "4", ")", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.ResNet._make_layer": [[277, 307], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "x3d_fine.conv1x1x1", "x3d_fine.SubBatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.conv1x1x1"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "shortcut_type", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "in_planes", "!=", "planes", "[", "1", "]", ":", "\n", "            ", "if", "shortcut_type", "==", "'A'", ":", "\n", "                ", "downsample", "=", "partial", "(", "self", ".", "_downsample_basic_block", ",", "\n", "planes", "=", "planes", "[", "1", "]", ",", "\n", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1x1", "(", "self", ".", "in_planes", ",", "planes", "[", "1", "]", ",", "stride", ",", "t_downsample", "=", "self", ".", "t_downsample", ")", ",", "\n", "SubBatchNorm3d", "(", "num_splits", "=", "self", ".", "base_bn_splits", ",", "num_features", "=", "planes", "[", "1", "]", ",", "affine", "=", "True", ")", "#nn.BatchNorm3d(planes[1])", "\n", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "in_planes", "=", "self", ".", "in_planes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "stride", ",", "\n", "downsample", "=", "downsample", ",", "\n", "index", "=", "self", ".", "index", ",", "\n", "base_bn_splits", "=", "self", ".", "base_bn_splits", ",", "\n", "t_downsample", "=", "self", ".", "t_downsample", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "[", "1", "]", "\n", "self", ".", "index", "+=", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "index", "=", "self", ".", "index", ",", "base_bn_splits", "=", "self", ".", "base_bn_splits", ",", "t_downsample", "=", "self", ".", "t_downsample", ")", ")", "\n", "self", ".", "index", "+=", "1", "\n", "\n", "", "self", ".", "index", "=", "0", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.ResNet.replace_logits": [[309, 311], ["torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["None"], ["", "def", "replace_logits", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "2048", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.ResNet.update_bn_splits_long_cycle": [[313, 319], ["x3d_fine.ResNet.modules", "isinstance", "torch.BatchNorm3d().to", "torch.BatchNorm3d().to", "torch.BatchNorm3d().to", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "def", "update_bn_splits_long_cycle", "(", "self", ",", "long_cycle_bn_scale", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "SubBatchNorm3d", ")", ":", "\n", "                ", "m", ".", "num_splits", "=", "self", ".", "base_bn_splits", "*", "long_cycle_bn_scale", "\n", "m", ".", "split_bn", "=", "nn", ".", "BatchNorm3d", "(", "num_features", "=", "m", ".", "num_features", "*", "m", ".", "num_splits", ",", "affine", "=", "False", ")", ".", "to", "(", "m", ".", "weight", ".", "device", ")", "\n", "", "", "return", "self", ".", "base_bn_splits", "*", "long_cycle_bn_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.ResNet.aggregate_sub_bn_stats": [[321, 329], ["x3d_fine.ResNet.modules", "isinstance", "m.aggregate_stats"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.SubBatchNorm3d.aggregate_stats"], ["", "def", "aggregate_sub_bn_stats", "(", "self", ")", ":", "\n", "        ", "\"\"\"find all SubBN modules and aggregate sub-BN stats.\"\"\"", "\n", "count", "=", "0", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "SubBatchNorm3d", ")", ":", "\n", "                ", "m", ".", "aggregate_stats", "(", ")", "\n", "count", "+=", "1", "\n", "", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.ResNet.forward": [[331, 383], ["x3d_fine.ResNet.conv1_s", "x3d_fine.ResNet.conv1_t", "x3d_fine.ResNet.bn1", "x3d_fine.ResNet.relu", "x3d_fine.ResNet.layer1", "x3d_fine.ResNet.layer2", "x3d_fine.ResNet.layer3", "x3d_fine.ResNet.layer4", "x3d_fine.ResNet.conv5", "x3d_fine.ResNet.bn5", "x3d_fine.ResNet.relu", "x3d_fine.ResNet.avgpool", "x3d_fine.ResNet.fc1", "x3d_fine.ResNet.relu", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "x3d_fine.ResNet.squeeze().squeeze().squeeze", "x3d_fine.ResNet.dropout", "x3d_fine.ResNet.fc2().unsqueeze", "x3d_fine.ResNet.squeeze().squeeze().permute", "x3d_fine.ResNet.dropout", "x3d_fine.ResNet.fc2().permute", "x3d_fine.ResNet.squeeze().squeeze", "x3d_fine.ResNet.fc2", "x3d_fine.ResNet.squeeze().squeeze", "x3d_fine.ResNet.fc2", "x3d_fine.ResNet.squeeze", "x3d_fine.ResNet.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", ",", "masks", "=", "inp", "\n", "\n", "x", "=", "self", ".", "conv1_s", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1_t", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "if", "self", ".", "global_tower", ":", "\n", "            ", "feat_g", "=", "{", "}", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "if", "self", ".", "global_tower", ":", "\n", "            ", "feat_g", "[", "'layer1'", "]", "=", "F", ".", "adaptive_avg_pool3d", "(", "x", ",", "(", "None", ",", "7", ",", "7", ")", ")", "\n", "", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "if", "self", ".", "global_tower", ":", "\n", "            ", "feat_g", "[", "'layer2'", "]", "=", "F", ".", "adaptive_avg_pool3d", "(", "x", ",", "(", "None", ",", "7", ",", "7", ")", ")", "\n", "", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "if", "self", ".", "global_tower", ":", "\n", "            ", "feat_g", "[", "'layer3'", "]", "=", "F", ".", "adaptive_avg_pool3d", "(", "x", ",", "(", "None", ",", "7", ",", "7", ")", ")", "\n", "", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "if", "self", ".", "global_tower", ":", "\n", "            ", "feat_g", "[", "'layer4'", "]", "=", "F", ".", "adaptive_avg_pool3d", "(", "x", ",", "(", "None", ",", "7", ",", "7", ")", ")", "\n", "\n", "", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "bn5", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "self", ".", "global_tower", ":", "\n", "            ", "feat_g", "[", "'conv5'", "]", "=", "F", ".", "adaptive_avg_pool3d", "(", "x", ",", "(", "None", ",", "7", ",", "7", ")", ")", "\n", "\n", "", "if", "self", ".", "global_tower", ":", "\n", "            ", "return", "feat_g", ",", "masks", "\n", "\n", "\n", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "if", "self", ".", "extract_feat", ":", "\n", "            ", "return", "x", "\n", "\n", "", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "if", "self", ".", "task", "==", "'class'", ":", "\n", "            ", "x", "=", "x", ".", "squeeze", "(", "4", ")", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "2", ")", "# B C", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", ".", "unsqueeze", "(", "2", ")", "# B C 1", "\n", "", "if", "self", ".", "task", "==", "'loc'", ":", "\n", "            ", "x", "=", "x", ".", "squeeze", "(", "4", ")", ".", "squeeze", "(", "3", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# B T C", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# B C T", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.conv3x3x3": [[89, 97], ["torch.Conv3d"], "function", ["None"], ["", "", "def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "t_downsample", "=", "False", ")", ":", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", "if", "t_downsample", "else", "(", "1", ",", "stride", ",", "stride", ")", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "in_planes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.conv1x1x1": [[100, 106], ["torch.Conv3d"], "function", ["None"], ["", "def", "conv1x1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "t_downsample", "=", "False", ")", ":", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", "if", "t_downsample", "else", "(", "1", ",", "stride", ",", "stride", ")", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.replace_logits": [[385, 387], ["torch.Linear"], "function", ["None"], ["", "", "def", "replace_logits", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "2048", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.get_inplanes": [[388, 394], ["None"], "function", ["None"], ["", "def", "get_inplanes", "(", "version", ")", ":", "\n", "    ", "planes", "=", "{", "'S'", ":", "[", "(", "54", ",", "24", ")", ",", "(", "108", ",", "48", ")", ",", "(", "216", ",", "96", ")", ",", "(", "432", ",", "192", ")", "]", ",", "\n", "'M'", ":", "[", "(", "54", ",", "24", ")", ",", "(", "108", ",", "48", ")", ",", "(", "216", ",", "96", ")", ",", "(", "432", ",", "192", ")", "]", ",", "\n", "'XL'", ":", "[", "(", "72", ",", "32", ")", ",", "(", "162", ",", "72", ")", ",", "(", "306", ",", "136", ")", ",", "(", "630", ",", "280", ")", "]", "}", "\n", "\n", "return", "planes", "[", "version", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.get_blocks": [[395, 401], ["None"], "function", ["None"], ["", "def", "get_blocks", "(", "version", ")", ":", "\n", "    ", "blocks", "=", "{", "'S'", ":", "[", "3", ",", "5", ",", "11", ",", "7", "]", ",", "\n", "'M'", ":", "[", "3", ",", "5", ",", "11", ",", "7", "]", ",", "\n", "'XL'", ":", "[", "5", ",", "10", ",", "25", ",", "15", "]", "}", "\n", "\n", "return", "blocks", "[", "version", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_fine.generate_model": [[402, 406], ["x3d_fine.ResNet", "x3d_fine.get_blocks", "x3d_fine.get_inplanes"], "function", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.get_blocks", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.get_inplanes"], ["", "def", "generate_model", "(", "x3d_version", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "get_blocks", "(", "x3d_version", ")", ",", "get_inplanes", "(", "x3d_version", ")", ",", "**", "kwargs", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_coarse_fineFEAT.Charades.__init__": [[133, 147], ["charades_coarse_fineFEAT.make_dataset", "charades_coarse_fineFEAT.get_default_video_loader"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.make_dataset", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.get_default_video_loader"], ["    ", "def", "__init__", "(", "self", ",", "split_file", ",", "split", ",", "root", ",", "fine_feat", ",", "feature_keys", ",", "spatial_transform", "=", "None", ",", "task", "=", "'class'", ",", "frames", "=", "80", ",", "gamma_tau", "=", "5", ",", "crops", "=", "1", ")", ":", "\n", "\n", "        ", "self", ".", "data", "=", "make_dataset", "(", "split_file", ",", "split", ",", "root", ")", "\n", "self", ".", "split_file", "=", "split_file", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "frames", "=", "frames", "*", "2", "\n", "self", ".", "gamma_tau", "=", "gamma_tau", "*", "2", "#2", "\n", "self", ".", "loader", "=", "get_default_video_loader", "(", ")", "\n", "self", ".", "spatial_transform", "=", "spatial_transform", "\n", "self", ".", "crops", "=", "crops", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "fine_feat", "=", "fine_feat", "\n", "self", ".", "feature_keys", "=", "feature_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_coarse_fineFEAT.Charades.__getitem__": [[148, 203], ["charades_coarse_fineFEAT.load_rgb_frames", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "min", "random.randint", "charades_coarse_fineFEAT.Charades.spatial_transform.randomize_parameters", "torch.stack().permute.unsqueeze", "torch.stack().permute.unsqueeze", "numpy.array", "max", "torch.max", "torch.max", "torch.max", "torch.max", "charades_coarse_fineFEAT.Charades.spatial_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "int", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.load_rgb_frames", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.MultiScaleRandomCropMultigrid.randomize_parameters"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "vid", ",", "label", ",", "dur", ",", "nf", "=", "self", ".", "data", "[", "index", "]", "\n", "\n", "if", "self", ".", "split", "==", "'testing'", ":", "\n", "            ", "frames", "=", "nf", "\n", "start_f", "=", "1", "\n", "", "else", ":", "\n", "            ", "frames", "=", "min", "(", "self", ".", "frames", ",", "nf", ")", "\n", "start_f", "=", "random", ".", "randint", "(", "1", ",", "max", "(", "self", ".", "gamma_tau", ",", "nf", "-", "frames", ")", ")", "\n", "\n", "", "stride_f", "=", "self", ".", "gamma_tau", "\n", "if", "self", ".", "split", "==", "'testing'", "and", "self", ".", "task", "==", "'loc'", ":", "\n", "            ", "stride_f", "=", "stride_f", "//", "self", ".", "crops", "\n", "\n", "", "imgs", ",", "feat", "=", "load_rgb_frames", "(", "self", ".", "root", ",", "self", ".", "fine_feat", ",", "self", ".", "feature_keys", ",", "vid", ",", "start_f", ",", "frames", ",", "stride_f", ",", "self", ".", "loader", ")", "#stride_f", "\n", "\n", "\n", "label", "=", "label", "[", ":", ",", "start_f", "-", "1", ":", "start_f", "-", "1", "+", "frames", ":", "1", "]", "#stride_f", "\n", "label", "=", "torch", ".", "from_numpy", "(", "label", ")", "\n", "if", "self", ".", "task", "==", "'class'", ":", "\n", "            ", "label", "=", "torch", ".", "max", "(", "label", ",", "dim", "=", "1", ")", "[", "0", "]", "# C T --> C", "\n", "\n", "", "if", "self", ".", "spatial_transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "spatial_transform", ".", "randomize_parameters", "(", "224", ")", "\n", "imgs_l", "=", "[", "self", ".", "spatial_transform", "(", "img", ")", "for", "img", "in", "imgs", "]", "\n", "", "imgs_l", "=", "torch", ".", "stack", "(", "imgs_l", ",", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "# T C H W --> C T H W", "\n", "\n", "step", "=", "1", "\n", "if", "self", ".", "split", "==", "'testing'", ":", "#self.crops > 1:", "\n", "            ", "if", "self", ".", "task", "==", "'class'", ":", "\n", "                ", "step", "=", "int", "(", "(", "imgs_l", ".", "shape", "[", "1", "]", "-", "1", "-", "self", ".", "frames", "//", "self", ".", "gamma_tau", ")", "//", "(", "self", ".", "crops", "-", "1", ")", ")", "\n", "if", "step", "==", "0", ":", "\n", "                    ", "clips", "=", "[", "imgs_l", "[", ":", ",", ":", "self", ".", "frames", "//", "self", ".", "gamma_tau", ",", "...", "]", "for", "i", "in", "range", "(", "self", ".", "crops", ")", "]", "\n", "clips", "=", "torch", ".", "stack", "(", "clips", ",", "0", ")", "\n", "", "else", ":", "\n", "                    ", "clips", "=", "[", "imgs_l", "[", ":", ",", "i", ":", "i", "+", "self", ".", "frames", "//", "self", ".", "gamma_tau", ",", "...", "]", "for", "i", "in", "range", "(", "0", ",", "step", "*", "self", ".", "crops", ",", "step", ")", "]", "\n", "clips", "=", "torch", ".", "stack", "(", "clips", ",", "0", ")", "\n", "", "", "if", "self", ".", "task", "==", "'loc'", ":", "#self.crops > 1:", "\n", "                ", "clips", "=", "[", "imgs_l", "[", ":", ",", "i", ":", ":", "self", ".", "crops", ",", "...", "]", "[", ":", ",", ":", "frames", "//", "self", ".", "gamma_tau", ",", "...", "]", "for", "i", "in", "range", "(", "0", ",", "self", ".", "crops", ")", "]", "\n", "clips", "=", "torch", ".", "stack", "(", "clips", ",", "0", ")", "# N C T H W", "\n", "label", "=", "label", "[", ":", ",", ":", "(", "frames", "//", "self", ".", "gamma_tau", ")", "*", "self", ".", "gamma_tau", "]", "\n", "", "", "else", ":", "\n", "            ", "clips", "=", "imgs_l", ".", "unsqueeze", "(", "0", ")", "# 1 C T H W", "\n", "\n", "", "meta", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "start_f", "//", "self", ".", "gamma_tau", ",", "frames", "//", "self", ".", "gamma_tau", ",", "\n", "nf", "//", "self", ".", "gamma_tau", ",", "stride_f", "//", "self", ".", "gamma_tau", "]", ")", ")", "\n", "\n", "return", "clips", ",", "label", ",", "feat", ",", "meta", ",", "vid", ",", "dur", "#feat_conv5", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_coarse_fineFEAT.Charades.__len__": [[204, 206], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_coarse_fineFEAT.pil_loader": [[21, 26], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_coarse_fineFEAT.accimage_loader": [[28, 35], ["accimage.Image", "charades_coarse_fineFEAT.pil_loader"], "function", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "accimage", "\n", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_coarse_fineFEAT.get_default_image_loader": [[37, 44], ["torchvision.set_image_backend", "get_image_backend"], "function", ["None"], ["", "", "def", "get_default_image_loader", "(", ")", ":", "\n", "    ", "torchvision", ".", "set_image_backend", "(", "'accimage'", ")", "\n", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_coarse_fineFEAT.video_loader": [[46, 57], ["os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "video.append", "image_loader", "str().zfill", "str"], "function", ["None"], ["", "", "def", "video_loader", "(", "video_dir_path", ",", "vid", ",", "frame_indices", ",", "image_loader", ")", ":", "\n", "    ", "video", "=", "[", "]", "\n", "for", "i", "in", "frame_indices", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "vid", ",", "vid", "+", "'-'", "+", "str", "(", "i", ")", ".", "zfill", "(", "6", ")", "+", "'.jpg'", ")", "\n", "#image_path = os.path.join(video_dir_path, 'frame_{:05d}.jpg'.format(i))", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "            ", "video", ".", "append", "(", "image_loader", "(", "image_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "video", "\n", "\n", "", "", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_coarse_fineFEAT.get_default_video_loader": [[59, 62], ["charades_coarse_fineFEAT.get_default_image_loader", "functools.partial"], "function", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.get_default_image_loader"], ["", "def", "get_default_video_loader", "(", ")", ":", "\n", "    ", "image_loader", "=", "get_default_image_loader", "(", ")", "\n", "return", "functools", ".", "partial", "(", "video_loader", ",", "image_loader", "=", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_coarse_fineFEAT.video_to_tensor": [[64, 75], ["torch.from_numpy", "torch.from_numpy", "pic.transpose"], "function", ["None"], ["", "def", "video_to_tensor", "(", "pic", ")", ":", "\n", "    ", "\"\"\"Convert a ``numpy.ndarray`` to tensor.\n    Converts a numpy.ndarray (T x H x W x C)\n    to a torch.FloatTensor of shape (C x T x H x W)\n\n    Args:\n         pic (numpy.ndarray): Video to be converted to tensor.\n    Returns:\n         Tensor: Converted video.\n    \"\"\"", "\n", "return", "torch", ".", "from_numpy", "(", "pic", ".", "transpose", "(", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_coarse_fineFEAT.load_rgb_frames": [[77, 90], ["list", "charades_coarse_fineFEAT.video_loader", "range", "torch.load().squeeze", "torch.load().squeeze", "f.view.numpy", "f.view.view", "torch.load", "torch.load", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.video_loader"], ["", "def", "load_rgb_frames", "(", "image_dir", ",", "fine_feat", ",", "feature_keys", ",", "vid", ",", "start", ",", "num", ",", "stride", ",", "video_loader", ")", ":", "\n", "\n", "  ", "frame_indices", "=", "list", "(", "range", "(", "start", ",", "start", "+", "num", ",", "stride", ")", ")", "\n", "frames", "=", "video_loader", "(", "image_dir", ",", "vid", ",", "frame_indices", ")", "\n", "\n", "keys", "=", "feature_keys", "\n", "feat", "=", "{", "}", "\n", "for", "k", "in", "keys", ":", "\n", "      ", "f", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "fine_feat", ",", "k", ",", "vid", ")", ")", ".", "squeeze", "(", "0", ")", "# C T 1 1", "\n", "if", "k", "==", "'gx'", ":", "f", "=", "f", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "# 1 T 1 1", "\n", "feat", "[", "k", "]", "=", "f", ".", "numpy", "(", ")", "\n", "\n", "", "return", "frames", ",", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_coarse_fineFEAT.make_dataset": [[92, 129], ["os.path.exists", "os.path.exists", "print", "open", "json.load", "print", "numpy.load", "print", "json.load.keys", "numpy.save", "len", "numpy.zeros", "np.load.append", "print", "len", "os.path.exists", "os.path.exists", "os.listdir", "os.listdir", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "make_dataset", "(", "split_file", ",", "split", ",", "root", ",", "num_classes", "=", "157", ")", ":", "\n", "    ", "dataset", "=", "[", "]", "\n", "with", "open", "(", "split_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "pre_data_file", "=", "split_file", "[", ":", "-", "5", "]", "+", "'_'", "+", "split", "+", "'labeldata_160.npy'", "#labeldata_160", "\n", "if", "os", ".", "path", ".", "exists", "(", "pre_data_file", ")", ":", "\n", "        ", "print", "(", "'{} exists'", ".", "format", "(", "pre_data_file", ")", ")", "\n", "dataset", "=", "np", ".", "load", "(", "pre_data_file", ",", "allow_pickle", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'{} does not exist'", ".", "format", "(", "pre_data_file", ")", ")", "\n", "i", "=", "0", "\n", "for", "vid", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "if", "data", "[", "vid", "]", "[", "'subset'", "]", "!=", "split", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "root", ",", "vid", ")", ")", ":", "\n", "                ", "continue", "\n", "", "num_frames", "=", "len", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "vid", ")", ")", ")", "\n", "\n", "if", "num_frames", "<", "(", "2", "*", "80", "+", "2", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "label", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_frames", ")", ",", "np", ".", "float32", ")", "\n", "\n", "fps", "=", "num_frames", "/", "data", "[", "vid", "]", "[", "'duration'", "]", "\n", "for", "ann", "in", "data", "[", "vid", "]", "[", "'actions'", "]", ":", "\n", "                ", "for", "fr", "in", "range", "(", "0", ",", "num_frames", ",", "1", ")", ":", "\n", "                    ", "if", "fr", "/", "fps", ">", "ann", "[", "1", "]", "and", "fr", "/", "fps", "<", "ann", "[", "2", "]", ":", "\n", "                        ", "label", "[", "ann", "[", "0", "]", ",", "fr", "]", "=", "1", "# binary classification", "\n", "", "", "", "dataset", ".", "append", "(", "(", "vid", ",", "label", ",", "data", "[", "vid", "]", "[", "'duration'", "]", ",", "num_frames", ")", ")", "\n", "i", "+=", "1", "\n", "print", "(", "i", ",", "vid", ")", "\n", "", "np", ".", "save", "(", "pre_data_file", ",", "dataset", ")", "\n", "\n", "", "print", "(", "'dataset size:%d'", "%", "len", "(", "dataset", ")", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_coarse_fineFEAT.mt_collate_fn": [[208, 253], ["min", "list", "torch.utils.data.dataloader.default_collate", "[].keys", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "new_batch.append", "numpy.zeros", "torch.from_numpy", "torch.from_numpy", "min", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "list", "list", "min", "min", "b[].values", "b[].values", "list", "b[].values"], "function", ["None"], ["", "", "def", "mt_collate_fn", "(", "batch", ")", ":", "\n", "    ", "\"Pads data and puts it into a tensor of same dimensions\"", "\n", "cap", "=", "128", "# NEW LIMIT FOR XYTC MIXING", "\n", "#cap_clip = 512 # for testing", "\n", "#cap_label = cap_clip*10", "\n", "\n", "max_len_clips", "=", "0", "\n", "max_len_labels", "=", "0", "\n", "max_len_feat", "=", "0", "#cap", "\n", "for", "b", "in", "batch", ":", "\n", "        ", "if", "b", "[", "0", "]", ".", "shape", "[", "2", "]", ">", "max_len_clips", ":", "\n", "            ", "max_len_clips", "=", "b", "[", "0", "]", ".", "shape", "[", "2", "]", "\n", "", "if", "b", "[", "1", "]", ".", "shape", "[", "1", "]", ">", "max_len_labels", ":", "\n", "            ", "max_len_labels", "=", "b", "[", "1", "]", ".", "shape", "[", "1", "]", "\n", "", "if", "list", "(", "b", "[", "2", "]", ".", "values", "(", ")", ")", "[", "0", "]", ".", "shape", "[", "1", "]", ">", "max_len_feat", ":", "\n", "            ", "max_len_feat", "=", "list", "(", "b", "[", "2", "]", ".", "values", "(", ")", ")", "[", "0", "]", ".", "shape", "[", "1", "]", "\n", "", "", "max_len_feat", "=", "min", "(", "max_len_feat", ",", "cap", ")", "\n", "#max_len_clips = min(max_len_clips, cap_clip)", "\n", "#max_len_labels = min(max_len_labels, cap_label)", "\n", "\n", "new_batch", "=", "[", "]", "\n", "#c,t,h,w = list(batch[0][2].values())[0].shape", "\n", "keys", "=", "list", "(", "batch", "[", "0", "]", "[", "2", "]", ".", "keys", "(", ")", ")", "\n", "for", "b", "in", "batch", ":", "\n", "        ", "clips", "=", "np", ".", "zeros", "(", "(", "b", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "b", "[", "0", "]", ".", "shape", "[", "1", "]", ",", "max_len_clips", ",", "b", "[", "0", "]", ".", "shape", "[", "3", "]", ",", "b", "[", "0", "]", ".", "shape", "[", "4", "]", ")", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "zeros", "(", "(", "b", "[", "1", "]", ".", "shape", "[", "0", "]", ",", "max_len_labels", ")", ",", "np", ".", "float32", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "max_len_labels", ")", ",", "np", ".", "float32", ")", "\n", "feat_mask", "=", "np", ".", "zeros", "(", "(", "max_len_feat", ")", ",", "np", ".", "float32", ")", "\n", "\n", "clips", "[", ":", ",", ":", ",", ":", "b", "[", "0", "]", ".", "shape", "[", "2", "]", ",", ":", ",", ":", "]", "=", "b", "[", "0", "]", "#[:,:,:min(cap_clip,b[0].shape[2]),:,:]", "\n", "label", "[", ":", ",", ":", "b", "[", "1", "]", ".", "shape", "[", "1", "]", "]", "=", "b", "[", "1", "]", "#[:,:min(cap_label,b[1].shape[1])]", "\n", "mask", "[", ":", "b", "[", "1", "]", ".", "shape", "[", "1", "]", "]", "=", "1", "\n", "\n", "feat_mask", "[", ":", "min", "(", "cap", ",", "list", "(", "b", "[", "2", "]", ".", "values", "(", ")", ")", "[", "0", "]", ".", "shape", "[", "1", "]", ")", "]", "=", "1", "\n", "feat", "=", "{", "}", "\n", "for", "k", "in", "keys", ":", "\n", "            ", "c", ",", "t", ",", "h", ",", "w", "=", "b", "[", "2", "]", "[", "k", "]", ".", "shape", "\n", "f", "=", "np", ".", "zeros", "(", "(", "c", ",", "max_len_feat", ",", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "f", "[", ":", ",", ":", "min", "(", "cap", ",", "b", "[", "2", "]", "[", "k", "]", ".", "shape", "[", "1", "]", ")", ",", ":", ",", ":", "]", "=", "b", "[", "2", "]", "[", "k", "]", "[", ":", ",", ":", "min", "(", "cap", ",", "b", "[", "2", "]", "[", "k", "]", ".", "shape", "[", "1", "]", ")", ",", ":", ",", ":", "]", "\n", "feat", "[", "k", "]", "=", "torch", ".", "from_numpy", "(", "f", ")", "\n", "\n", "", "new_batch", ".", "append", "(", "[", "torch", ".", "from_numpy", "(", "clips", ")", ",", "torch", ".", "from_numpy", "(", "label", ")", ",", "torch", ".", "from_numpy", "(", "mask", ")", ",", "\n", "feat", ",", "torch", ".", "from_numpy", "(", "feat_mask", ")", ",", "b", "[", "3", "]", ",", "b", "[", "4", "]", ",", "b", "[", "5", "]", "]", ")", "\n", "\n", "", "return", "default_collate", "(", "new_batch", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.extract_fineFEAT.run": [[60, 175], ["transforms.spatial_transforms.Compose", "charades_fine.Charades", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "charades_fine.Charades", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "x3d_fine.generate_model", "nn.DataParallel.replace_logits", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel.state_dict", "fine_net.state_dict.update", "nn.DataParallel.load_state_dict", "nn.DataParallel.cuda", "torch.DataParallel", "print", "print", "torch.SGD", "torch.lr_scheduler.ReduceLROnPlateau", "torch.BCEWithLogitsLoss", "apmeter.APMeter", "apmeter.APMeter", "len", "len", "nn.DataParallel.parameters", "optim.SGD.load_state_dict", "optim.lr_scheduler.ReduceLROnPlateau.load_state_dict", "print", "print", "transforms.spatial_transforms.CenterCropScaled", "transforms.spatial_transforms.ToTensor", "transforms.spatial_transforms.Normalize", "pkbar.Pbar", "nn.DataParallel.train", "nn.DataParallel.module.aggregate_sub_bn_stats", "torch.autograd.set_grad_enabled", "torch.autograd.set_grad_enabled", "torch.autograd.set_grad_enabled", "torch.autograd.set_grad_enabled", "optim.SGD.zero_grad", "print", "enumerate", "pkbar.Pbar.update", "inputs.cuda.view", "inputs.cuda.cuda", "labels.cuda.size", "labels.cuda.cuda", "masks.cuda.cuda", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "nn.DataParallel.", "list", "print", "feat.keys", "torch.save", "torch.save", "torch.save", "torch.save", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "feat[].cpu().numpy", "feat[].cpu().numpy", "feat[].cpu().numpy", "feat[].cpu().numpy", "feat[].cpu().numpy", "feat[].data.cpu", "os.path.join", "feat[].cpu", "feat[].cpu", "feat[].cpu", "feat[].cpu", "feat[].cpu"], "function", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.generate_model", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.replace_logits", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet.aggregate_sub_bn_stats"], ["", "", "def", "run", "(", "init_lr", "=", "INIT_LR", ",", "warmup_steps", "=", "0", ",", "max_epochs", "=", "100", ",", "root", "=", "CHARADES_ROOT", ",", "\n", "train_split", "=", "CHARADES_ANNO", ",", "batch_size", "=", "BS", "*", "BS_UPSCALE", ",", "frames", "=", "80", ",", "save_dir", "=", "FINE_SAVE_DIR", ")", ":", "\n", "\n", "    ", "crop_size", "=", "{", "'S'", ":", "160", ",", "'M'", ":", "224", ",", "'XL'", ":", "312", "}", "[", "X3D_VERSION", "]", "\n", "resize_size", "=", "{", "'S'", ":", "[", "180.", ",", "225.", "]", ",", "'M'", ":", "[", "256.", ",", "256.", "]", ",", "'XL'", ":", "[", "360.", ",", "450.", "]", "}", "[", "X3D_VERSION", "]", "#[256.,320.]", "\n", "gamma_tau", "=", "{", "'S'", ":", "6", ",", "'M'", ":", "5", "*", "1", ",", "'XL'", ":", "5", "}", "[", "X3D_VERSION", "]", "# 5", "\n", "\n", "load_steps", "=", "st_steps", "=", "steps", "=", "0", "\n", "epochs", "=", "0", "\n", "num_steps_per_update", "=", "1", "\n", "cur_iterations", "=", "steps", "*", "num_steps_per_update", "\n", "iterations_per_epoch", "=", "CHARADES_TR_SIZE", "//", "(", "batch_size", "*", "1", ")", "\n", "val_iterations_per_epoch", "=", "CHARADES_VAL_SIZE", "//", "(", "batch_size", ")", "\n", "max_steps", "=", "iterations_per_epoch", "*", "max_epochs", "\n", "\n", "\n", "val_spatial_transforms", "=", "Compose", "(", "[", "CenterCropScaled", "(", "crop_size", ")", ",", "\n", "ToTensor", "(", "255", ")", ",", "\n", "Normalize", "(", "CHARADES_MEAN", ",", "CHARADES_STD", ")", "]", ")", "\n", "\n", "# SET 'TESTING' FOR BOTH, TO EXTRACT", "\n", "dataset", "=", "Charades", "(", "train_split", ",", "'testing'", ",", "root", ",", "val_spatial_transforms", ",", "\n", "task", "=", "'loc'", ",", "frames", "=", "frames", ",", "gamma_tau", "=", "gamma_tau", ",", "crops", "=", "1", ",", "extract_feat", "=", "True", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "8", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "val_dataset", "=", "Charades", "(", "train_split", ",", "'testing'", ",", "root", ",", "val_spatial_transforms", ",", "\n", "task", "=", "'loc'", ",", "frames", "=", "frames", ",", "gamma_tau", "=", "gamma_tau", ",", "crops", "=", "1", ",", "extract_feat", "=", "True", ")", "\n", "val_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "8", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "\n", "dataloaders", "=", "{", "'train'", ":", "dataloader", ",", "'val'", ":", "val_dataloader", "}", "\n", "datasets", "=", "{", "'train'", ":", "dataset", ",", "'val'", ":", "val_dataset", "}", "\n", "print", "(", "'train'", ",", "len", "(", "datasets", "[", "'train'", "]", ")", ",", "'val'", ",", "len", "(", "datasets", "[", "'val'", "]", ")", ")", "\n", "print", "(", "'Total iterations:'", ",", "max_steps", ",", "'Total epochs:'", ",", "max_epochs", ")", "\n", "print", "(", "'datasets created'", ")", "\n", "\n", "fine_net", "=", "x3d_fine", ".", "generate_model", "(", "x3d_version", "=", "X3D_VERSION", ",", "n_classes", "=", "400", ",", "n_input_channels", "=", "3", ",", "task", "=", "'loc'", ",", "\n", "dropout", "=", "0.5", ",", "base_bn_splits", "=", "1", ",", "global_tower", "=", "True", ")", "\n", "\n", "fine_net", ".", "replace_logits", "(", "157", ")", "\n", "\n", "load_ckpt", "=", "torch", ".", "load", "(", "'models/fine_charades_039000_SAVE.pt'", ")", "\n", "state", "=", "fine_net", ".", "state_dict", "(", ")", "\n", "state", ".", "update", "(", "load_ckpt", "[", "'model_state_dict'", "]", ")", "\n", "fine_net", ".", "load_state_dict", "(", "state", ")", "\n", "\n", "fine_net", ".", "cuda", "(", ")", "\n", "fine_net", "=", "nn", ".", "DataParallel", "(", "fine_net", ")", "\n", "print", "(", "'model loaded'", ")", "\n", "\n", "lr", "=", "init_lr", "\n", "print", "(", "'LR:%f'", "%", "lr", ")", "\n", "\n", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "fine_net", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "1e-5", ")", "\n", "lr_sched", "=", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "patience", "=", "3", ",", "factor", "=", "0.1", ",", "verbose", "=", "True", ")", "\n", "if", "steps", ">", "0", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "load_ckpt", "[", "'optimizer_state_dict'", "]", ")", "\n", "lr_sched", ".", "load_state_dict", "(", "load_ckpt", "[", "'scheduler_state_dict'", "]", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "\n", "val_apm", "=", "APMeter", "(", ")", "\n", "tr_apm", "=", "APMeter", "(", ")", "\n", "\n", "while", "epochs", "<", "max_epochs", ":", "\n", "        ", "print", "(", "'Step {} Epoch {}'", ".", "format", "(", "steps", ",", "epochs", ")", ")", "\n", "print", "(", "'-'", "*", "10", ")", "\n", "\n", "# Each epoch has a training and validation phase", "\n", "for", "phase", "in", "[", "'train'", "]", "+", "[", "'val'", "]", ":", "\n", "            ", "bar_st", "=", "iterations_per_epoch", "if", "phase", "==", "'train'", "else", "val_iterations_per_epoch", "\n", "bar", "=", "pkbar", ".", "Pbar", "(", "name", "=", "'update: '", ",", "target", "=", "bar_st", ")", "\n", "\n", "fine_net", ".", "train", "(", "False", ")", "# Set model to evaluate mode", "\n", "# FOR EVAL AGGREGATE BN STATS", "\n", "_", "=", "fine_net", ".", "module", ".", "aggregate_sub_bn_stats", "(", ")", "\n", "torch", ".", "autograd", ".", "set_grad_enabled", "(", "False", ")", "\n", "\n", "tot_loss", "=", "0.0", "\n", "tot_loc_loss", "=", "0.0", "\n", "tot_cls_loss", "=", "0.0", "\n", "tot_dis_loss", "=", "0.0", "\n", "tot_acc", "=", "0.0", "\n", "tot_corr", "=", "0.0", "\n", "tot_dat", "=", "0.0", "\n", "num_iter", "=", "0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Iterate over data.", "\n", "print", "(", "phase", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "dataloaders", "[", "phase", "]", ")", ":", "\n", "#for data in dataloaders[phase]:", "\n", "                ", "num_iter", "+=", "1", "\n", "bar", ".", "update", "(", "i", ")", "\n", "\n", "inputs", ",", "labels", ",", "masks", ",", "name", "=", "data", "\n", "b", ",", "n", ",", "c", ",", "t", ",", "h", ",", "w", "=", "inputs", ".", "shape", "\n", "inputs", "=", "inputs", ".", "view", "(", "b", "*", "n", ",", "c", ",", "t", ",", "h", ",", "w", ")", "\n", "\n", "inputs", "=", "inputs", ".", "cuda", "(", ")", "# B 3 T W H", "\n", "tl", "=", "labels", ".", "size", "(", "2", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "# B C TL", "\n", "masks", "=", "masks", ".", "cuda", "(", ")", "# B TL", "\n", "valid_t", "=", "torch", ".", "sum", "(", "masks", ",", "dim", "=", "1", ")", ".", "int", "(", ")", "\n", "\n", "feat", ",", "_", "=", "fine_net", "(", "[", "inputs", ",", "masks", "]", ")", "# N C T 1 1", "\n", "keys", "=", "list", "(", "feat", ".", "keys", "(", ")", ")", "\n", "print", "(", "i", ",", "name", "[", "0", "]", ",", "feat", "[", "keys", "[", "0", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "shape", ",", "feat", "[", "keys", "[", "1", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "shape", ",", "\n", "feat", "[", "keys", "[", "2", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "shape", ",", "feat", "[", "keys", "[", "3", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "shape", ",", "feat", "[", "keys", "[", "4", "]", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "shape", ")", "\n", "for", "k", "in", "feat", ":", "\n", "                    ", "torch", ".", "save", "(", "feat", "[", "k", "]", ".", "data", ".", "cpu", "(", ")", ",", "os", ".", "path", ".", "join", "(", "save_dir", ",", "k", ",", "name", "[", "0", "]", ")", ")", "\n", "", "", "", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.SubBatchNorm3d.__init__": [[13, 28], ["torch.Module.__init__", "args.get", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.Compose.__init__"], ["def", "__init__", "(", "self", ",", "num_splits", ",", "**", "args", ")", ":", "\n", "        ", "super", "(", "SubBatchNorm3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_splits", "=", "num_splits", "\n", "self", ".", "num_features", "=", "args", "[", "\"num_features\"", "]", "\n", "# Keep only one set of weight and bias.", "\n", "if", "args", ".", "get", "(", "\"affine\"", ",", "True", ")", ":", "\n", "            ", "self", ".", "affine", "=", "True", "\n", "args", "[", "\"affine\"", "]", "=", "False", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "self", ".", "num_features", ")", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "num_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "affine", "=", "False", "\n", "", "self", ".", "bn", "=", "nn", ".", "BatchNorm3d", "(", "**", "args", ")", "\n", "args", "[", "\"num_features\"", "]", "=", "self", ".", "num_features", "*", "self", ".", "num_splits", "\n", "self", ".", "split_bn", "=", "nn", ".", "BatchNorm3d", "(", "**", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.SubBatchNorm3d._get_aggregated_mean_std": [[29, 36], ["means.view().sum", "mean.detach", "std.detach", "stds.view().sum", "means.view", "stds.view", "means.view"], "methods", ["None"], ["", "def", "_get_aggregated_mean_std", "(", "self", ",", "means", ",", "stds", ",", "n", ")", ":", "\n", "        ", "mean", "=", "means", ".", "view", "(", "n", ",", "-", "1", ")", ".", "sum", "(", "0", ")", "/", "n", "\n", "std", "=", "(", "\n", "stds", ".", "view", "(", "n", ",", "-", "1", ")", ".", "sum", "(", "0", ")", "/", "n", "\n", "+", "(", "(", "means", ".", "view", "(", "n", ",", "-", "1", ")", "-", "mean", ")", "**", "2", ")", ".", "view", "(", "n", ",", "-", "1", ")", ".", "sum", "(", "0", ")", "/", "n", "\n", ")", "\n", "return", "mean", ".", "detach", "(", ")", ",", "std", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.SubBatchNorm3d.aggregate_stats": [[37, 47], ["x3d_coarse.SubBatchNorm3d._get_aggregated_mean_std"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.SubBatchNorm3d._get_aggregated_mean_std"], ["", "def", "aggregate_stats", "(", "self", ")", ":", "\n", "        ", "\"\"\"Synchronize running_mean, and running_var. Call this before eval.\"\"\"", "\n", "if", "self", ".", "split_bn", ".", "track_running_stats", ":", "\n", "            ", "(", "\n", "self", ".", "bn", ".", "running_mean", ".", "data", ",", "\n", "self", ".", "bn", ".", "running_var", ".", "data", ",", "\n", ")", "=", "self", ".", "_get_aggregated_mean_std", "(", "\n", "self", ".", "split_bn", ".", "running_mean", ",", "\n", "self", ".", "split_bn", ".", "running_var", ",", "\n", "self", ".", "num_splits", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.SubBatchNorm3d.forward": [[49, 61], ["x3d_coarse.SubBatchNorm3d.view", "x3d_coarse.SubBatchNorm3d.split_bn", "x3d_coarse.SubBatchNorm3d.view", "x3d_coarse.SubBatchNorm3d.bn", "x3d_coarse.SubBatchNorm3d.weight.view", "x3d_coarse.SubBatchNorm3d.bias.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "n", ",", "c", ",", "t", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "n", "//", "self", ".", "num_splits", ",", "c", "*", "self", ".", "num_splits", ",", "t", ",", "h", ",", "w", ")", "\n", "x", "=", "self", ".", "split_bn", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "n", ",", "c", ",", "t", ",", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "affine", ":", "\n", "            ", "x", "=", "x", "*", "self", ".", "weight", ".", "view", "(", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "bias", ".", "view", "(", "(", "-", "1", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.Swish.__init__": [[65, 67], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.Compose.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Swish", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.Swish.forward": [[68, 70], ["SwishEfficient.apply"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "SwishEfficient", ".", "apply", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.SwishEfficient.forward": [[74, 79], ["ctx.save_for_backward", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "result", "=", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "ctx", ".", "save_for_backward", "(", "x", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.SwishEfficient.backward": [[80, 85], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "x", "=", "ctx", ".", "saved_variables", "[", "0", "]", "\n", "sigmoid_x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "return", "grad_output", "*", "(", "sigmoid_x", "*", "(", "1", "+", "x", "*", "(", "1", "-", "sigmoid_x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.Bottleneck.__init__": [[107, 128], ["torch.Module.__init__", "x3d_coarse.conv1x1x1", "x3d_coarse.SubBatchNorm3d", "x3d_coarse.conv3x3x3", "x3d_coarse.SubBatchNorm3d", "x3d_coarse.conv1x1x1", "x3d_coarse.SubBatchNorm3d", "x3d_coarse.Swish", "torch.ReLU", "torch.ReLU", "torch.ReLU", "x3d_coarse.Bottleneck.round_width", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.Compose.__init__", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.conv1x1x1", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.conv3x3x3", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.conv1x1x1", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.Bottleneck.round_width"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "index", "=", "0", ",", "base_bn_splits", "=", "8", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "index", "=", "index", "\n", "self", ".", "base_bn_splits", "=", "base_bn_splits", "\n", "self", ".", "conv1", "=", "conv1x1x1", "(", "in_planes", ",", "planes", "[", "0", "]", ")", "\n", "self", ".", "bn1", "=", "SubBatchNorm3d", "(", "num_splits", "=", "self", ".", "base_bn_splits", ",", "num_features", "=", "planes", "[", "0", "]", ",", "affine", "=", "True", ")", "#nn.BatchNorm3d(planes[0])", "\n", "self", ".", "conv2", "=", "conv3x3x3", "(", "planes", "[", "0", "]", ",", "planes", "[", "0", "]", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "SubBatchNorm3d", "(", "num_splits", "=", "self", ".", "base_bn_splits", ",", "num_features", "=", "planes", "[", "0", "]", ",", "affine", "=", "True", ")", "#nn.BatchNorm3d(planes[0])", "\n", "self", ".", "conv3", "=", "conv1x1x1", "(", "planes", "[", "0", "]", ",", "planes", "[", "1", "]", ")", "\n", "self", ".", "bn3", "=", "SubBatchNorm3d", "(", "num_splits", "=", "self", ".", "base_bn_splits", ",", "num_features", "=", "planes", "[", "1", "]", ",", "affine", "=", "True", ")", "#nn.BatchNorm3d(planes[1])", "\n", "self", ".", "swish", "=", "Swish", "(", ")", "#nn.Hardswish()", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "self", ".", "index", "%", "2", "==", "0", ":", "\n", "            ", "width", "=", "self", ".", "round_width", "(", "planes", "[", "0", "]", ")", "\n", "self", ".", "global_pool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv3d", "(", "planes", "[", "0", "]", ",", "width", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv3d", "(", "width", ",", "planes", "[", "0", "]", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.Bottleneck.round_width": [[129, 141], ["max", "int", "int"], "methods", ["None"], ["", "def", "round_width", "(", "self", ",", "width", ",", "multiplier", "=", "0.0625", ",", "min_width", "=", "8", ",", "divisor", "=", "8", ")", ":", "\n", "        ", "if", "not", "multiplier", ":", "\n", "            ", "return", "width", "\n", "\n", "", "width", "*=", "multiplier", "\n", "min_width", "=", "min_width", "or", "divisor", "\n", "width_out", "=", "max", "(", "\n", "min_width", ",", "int", "(", "width", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", "\n", ")", "\n", "if", "width_out", "<", "0.9", "*", "width", ":", "\n", "            ", "width_out", "+=", "divisor", "\n", "", "return", "int", "(", "width_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.Bottleneck.forward": [[143, 173], ["x3d_coarse.Bottleneck.conv1", "x3d_coarse.Bottleneck.bn1", "x3d_coarse.Bottleneck.relu", "x3d_coarse.Bottleneck.conv2", "x3d_coarse.Bottleneck.bn2", "x3d_coarse.Bottleneck.swish", "x3d_coarse.Bottleneck.conv3", "x3d_coarse.Bottleneck.bn3", "x3d_coarse.Bottleneck.relu", "x3d_coarse.Bottleneck.global_pool", "x3d_coarse.Bottleneck.fc1", "x3d_coarse.Bottleneck.relu", "x3d_coarse.Bottleneck.fc2", "x3d_coarse.Bottleneck.sigmoid", "x3d_coarse.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "# Squeeze-and-Excitation", "\n", "if", "self", ".", "index", "%", "2", "==", "0", ":", "\n", "            ", "se_w", "=", "self", ".", "global_pool", "(", "out", ")", "\n", "se_w", "=", "self", ".", "fc1", "(", "se_w", ")", "\n", "se_w", "=", "self", ".", "relu", "(", "se_w", ")", "\n", "se_w", "=", "self", ".", "fc2", "(", "se_w", ")", "\n", "se_w", "=", "self", ".", "sigmoid", "(", "se_w", ")", "\n", "out", "=", "out", "*", "se_w", "\n", "", "out", "=", "self", ".", "swish", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.RewightLayer.__init__": [[176, 197], ["torch.Module.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.Compose.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channels", ",", "g_channels", ",", "depth", ",", "height", ",", "pool", "=", "False", ")", ":", "\n", "        ", "super", "(", "RewightLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "fc_depth", "=", "depth", "\n", "attn_depth", "=", "depth", "#//2", "\n", "\n", "self", ".", "at1", "=", "nn", ".", "Conv1d", "(", "depth", ",", "attn_depth", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "at2", "=", "nn", ".", "Conv1d", "(", "attn_depth", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Conv1d", "(", "depth", ",", "fc_depth", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Conv1d", "(", "fc_depth", ",", "channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "if", "g_channels", "is", "not", "None", ":", "\n", "            ", "self", ".", "fc3", "=", "nn", ".", "Conv1d", "(", "depth", ",", "fc_depth", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Conv1d", "(", "fc_depth", ",", "g_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "g_channels", "=", "g_channels", "\n", "self", ".", "pool", "=", "pool", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.RewightLayer.forward": [[199, 248], ["torch.adaptive_avg_pool3d.view", "torch.relu", "torch.relu", "torch.relu", "x3d_coarse.RewightLayer.at2", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "mask.unsqueeze().repeat().view.unsqueeze().repeat().view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.relu", "torch.relu", "torch.relu", "x3d_coarse.RewightLayer.fc2", "x3d_coarse.RewightLayer.view", "torch.adaptive_max_pool1d().squeeze", "torch.adaptive_max_pool1d().squeeze", "torch.adaptive_max_pool1d().squeeze", "torch.adaptive_avg_pool2d().squeeze", "torch.adaptive_avg_pool2d().squeeze", "torch.adaptive_avg_pool2d().squeeze", "torch.adaptive_avg_pool3d.unsqueeze().repeat().view", "mask.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat().view", "torch.adaptive_max_pool2d().view", "torch.adaptive_max_pool2d().view", "torch.adaptive_max_pool2d().view", "x3d_coarse.RewightLayer.at1", "torch.sigmoid().view.unsqueeze", "torch.adaptive_avg_pool2d().squeeze.view", "torch.adaptive_avg_pool3d.unsqueeze", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "x3d_coarse.RewightLayer.fc1", "x3d_coarse.RewightLayer.dropout", "torch.relu", "torch.relu", "torch.relu", "x3d_coarse.RewightLayer.fc4", "torch.sigmoid.view", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.adaptive_avg_pool3d.view", "x3d_coarse.RewightLayer.fc3", "x3d_coarse.RewightLayer.dropout", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.adaptive_max_pool1d", "torch.adaptive_max_pool1d", "torch.adaptive_max_pool1d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool3d.unsqueeze().repeat", "mask.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze().repeat", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "torch.adaptive_avg_pool3d.view", "mask.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze", "torch.adaptive_avg_pool2d().squeeze.unsqueeze", "torch.adaptive_avg_pool3d.view", "torch.adaptive_avg_pool3d.unsqueeze", "mask.unsqueeze().repeat().view.unsqueeze().repeat().view.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", ",", "lx", ",", "mask", ",", "gx", ",", "i", ",", "GX", ",", "isMixing", "=", "inp", "# x: B C T H W ---- B Tbar", "\n", "b", ",", "c", ",", "t", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "b2", ",", "_", ",", "tl", ",", "_", ",", "_", "=", "lx", ".", "shape", "\n", "hl", ",", "wl", "=", "self", ".", "height", ",", "self", ".", "height", "\n", "\n", "if", "mask", ".", "shape", "[", "1", "]", "!=", "t", ":", "\n", "            ", "mask", "=", "F", ".", "adaptive_max_pool1d", "(", "mask", ".", "unsqueeze", "(", "1", ")", ",", "t", ")", ".", "squeeze", "(", "1", ")", "\n", "GX", "=", "F", ".", "adaptive_avg_pool2d", "(", "GX", ".", "unsqueeze", "(", "1", ")", ",", "(", "t", ",", "None", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "if", "b", "!=", "b2", ":", "# for multi-crop testing", "\n", "            ", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "b2", "//", "b", ",", "1", ",", "1", ",", "1", ",", "1", ")", ".", "view", "(", "b2", ",", "c", ",", "t", ",", "h", ",", "w", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "b2", "//", "b", ",", "1", ")", ".", "view", "(", "b2", ",", "t", ")", "\n", "\n", "", "if", "h", "!=", "hl", ":", "# for 7x7 feat inputs", "\n", "            ", "x", "=", "F", ".", "adaptive_max_pool2d", "(", "x", ".", "view", "(", "b2", ",", "c", "*", "t", ",", "h", ",", "w", ")", ",", "(", "hl", ",", "wl", ")", ")", ".", "view", "(", "b2", ",", "c", ",", "t", ",", "hl", ",", "wl", ")", "\n", "\n", "", "at", "=", "x", ".", "view", "(", "b2", ",", "c", ",", "-", "1", ")", "\n", "at", "=", "F", ".", "relu", "(", "self", ".", "at1", "(", "at", ")", ",", "inplace", "=", "True", ")", "\n", "at", "=", "self", ".", "at2", "(", "at", ")", "# B 1 T H W", "\n", "at", "=", "F", ".", "sigmoid", "(", "at", ")", ".", "view", "(", "b2", ",", "-", "1", ",", "t", ",", "hl", ",", "wl", ")", "\n", "\n", "at", "=", "at", ".", "unsqueeze", "(", "3", ")", "*", "GX", ".", "view", "(", "b2", ",", "1", ",", "t", ",", "tl", ",", "1", ",", "1", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "3", ")", "*", "at", "# B C T  Tl Hl Wl", "\n", "mask", "=", "mask", ".", "view", "(", "b2", ",", "1", ",", "t", ",", "1", ",", "1", ",", "1", ")", "# B 1 T 1 1 1", "\n", "temp_weights", "=", "mask", "/", "(", "torch", ".", "sum", "(", "at", "*", "mask", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "+", "1e-6", ")", "# B 1 T Tl Hl Wl", "\n", "x", "=", "torch", ".", "sum", "(", "x", "*", "temp_weights", ",", "dim", "=", "2", ")", "#.unsqueeze(2) # B C Tl Hl Wl", "\n", "\n", "if", "self", ".", "pool", ":", "# NOT USED", "\n", "            ", "x", "=", "F", ".", "adaptive_avg_pool3d", "(", "x", ",", "(", "None", ",", "1", ",", "1", ")", ")", "\n", "\n", "", "b", ",", "c", ",", "t", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "\n", "x1", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", ")", ",", "inplace", "=", "True", ")", "\n", "if", "self", ".", "pool", ":", "# and not(isMixing): # NOT USED", "\n", "            ", "x1", "=", "self", ".", "dropout", "(", "x1", ")", "\n", "", "x1", "=", "self", ".", "fc2", "(", "x1", ")", "\n", "x1", "=", "x1", ".", "view", "(", "b", ",", "-", "1", ",", "t", ",", "h", ",", "w", ")", "# B D 1 H W", "\n", "\n", "if", "self", ".", "g_channels", "is", "not", "None", ":", "\n", "            ", "x2", "=", "F", ".", "relu", "(", "self", ".", "fc3", "(", "x", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", ")", ",", "inplace", "=", "True", ")", "\n", "if", "self", ".", "pool", ":", "# and not(isMixing): # NOT USED", "\n", "                ", "x2", "=", "self", ".", "dropout", "(", "x2", ")", "\n", "", "x2", "=", "self", ".", "fc4", "(", "x2", ")", "\n", "x2", "=", "x2", ".", "view", "(", "b", ",", "-", "1", ",", "t", ",", "h", ",", "w", ")", "# B D 1 H W", "\n", "if", "not", "(", "isMixing", ")", ":", "\n", "                ", "x2", "=", "F", ".", "sigmoid", "(", "x2", ")", "\n", "", "return", "x1", ",", "x2", "\n", "", "return", "x1", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.Gaussian.__init__": [[252, 255], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.Compose.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ratio", "=", "1", ")", ":", "\n", "        ", "super", "(", "Gaussian", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ratio", "=", "ratio", "#1", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.Gaussian.forward": [[256, 287], ["torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "f.view.view.view", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "step.view", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "torch.arange().to().view().repeat().cuda", "st.view", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "[].view", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "torch.arange().to().view().repeat", "st.view().repeat", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "torch.arange().to().view", "st.view", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "\n", "        ", "meta", ",", "mask", ",", "gx", ",", "tx", "=", "inp", "\n", "st", ",", "fr", ",", "nf", ",", "step", "=", "meta", "[", ":", ",", "0", "]", ",", "meta", "[", ":", ",", "1", "]", ",", "meta", "[", ":", ",", "2", "]", ",", "meta", "[", ":", ",", "3", "]", "\n", "b", "=", "meta", ".", "shape", "[", "0", "]", "\n", "b2", "=", "gx", ".", "shape", "[", "0", "]", "\n", "len_f", "=", "mask", ".", "shape", "[", "1", "]", "\n", "\n", "if", "b2", "!=", "b", ":", "# multi-crop testing", "\n", "            ", "offset", "=", "step", ".", "view", "(", "-", "1", ",", "1", ")", "*", "torch", ".", "arange", "(", "0", ",", "b2", "//", "b", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "b", ",", "1", ")", ".", "cuda", "(", ")", "#0,...,10-1", "\n", "st", "=", "(", "st", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "b2", "//", "b", ")", "+", "offset", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "if", "tx", "is", "not", "None", ":", "\n", "            ", "len_x", "=", "gx", ".", "shape", "[", "1", "]", "\n", "tl", "=", "(", "gx", "*", "tx", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "len_x", "=", "gx", ".", "shape", "[", "2", "]", "\n", "tl", "=", "torch", ".", "arange", "(", "0", ",", "len_x", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "b2", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "\n", "#tl = 4* torch.arange(0,len_x).to(torch.float32).view(1,1,-1).repeat(b2,1,1).cuda() # STRIDING", "\n", "", "mu", "=", "(", "tl", "+", "st", ".", "view", "(", "b2", ",", "1", ",", "1", ")", ")", "/", "self", ".", "ratio", "# B 1 Tl", "\n", "\n", "t", "=", "torch", ".", "arange", "(", "0", ",", "len_f", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ".", "repeat", "(", "b2", ",", "1", ",", "1", ")", ".", "cuda", "(", ")", "# independent var", "\n", "std", "=", "(", "1", "/", "8", "*", "torch", ".", "sum", "(", "mask", ",", "dim", "=", "1", ")", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "b2", "//", "b", ")", ".", "view", "(", "-", "1", ",", "1", ")", "#1/8", "\n", "\n", "t", "=", "t", "-", "mu", "# B T Tl", "\n", "f", "=", "t", "**", "2", "/", "(", "2", "*", "(", "std", "**", "2", ")", ".", "view", "(", "b2", ",", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "len_f", ",", "len_x", ")", "+", "1e-16", ")", "\n", "f", "=", "torch", ".", "exp", "(", "-", "f", ")", "\n", "f", "=", "f", "/", "(", "torch", ".", "max", "(", "f", ",", "dim", "=", "1", ")", "[", "0", "]", ".", "view", "(", "b2", ",", "1", ",", "len_x", ")", "+", "1e-16", ")", "\n", "f", "=", "f", ".", "view", "(", "b2", ",", "len_f", ",", "len_x", ")", "\n", "\n", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.MixingLayer.__init__": [[290, 305], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.Compose.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "learned", "=", "False", ",", "index", "=", "0", ",", "isLogit", "=", "False", ")", ":", "\n", "        ", "super", "(", "MixingLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "learned", "=", "learned", "\n", "self", ".", "index", "=", "index", "\n", "self", ".", "isLogit", "=", "isLogit", "\n", "\n", "self", ".", "in_depth", "=", "432", "if", "isLogit", "else", "(", "24", "+", "48", "+", "96", "+", "192", ")", "\n", "self", ".", "range", "=", "1", "if", "isLogit", "else", "4", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n", "if", "learned", ":", "\n", "            ", "self", ".", "conv_at", "=", "nn", ".", "Conv1d", "(", "self", ".", "in_depth", ",", "depth", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "conv_at2", "=", "nn", ".", "Conv1d", "(", "self", ".", "in_depth", ",", "depth", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.MixingLayer.forward": [[307, 352], ["range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x3d_coarse.MixingLayer.append", "x3d_coarse.MixingLayer.append", "x3d_coarse.MixingLayer.conv_at().view", "torch.sigmoid().view", "torch.sigmoid().view", "torch.sigmoid().view", "at.view().repeat.view().repeat.view().repeat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.adaptive_max_pool2d().view", "torch.adaptive_max_pool2d().view", "torch.adaptive_max_pool2d().view", "torch.adaptive_max_pool2d().view", "torch.adaptive_max_pool2d().view", "torch.adaptive_max_pool2d().view", "x3d_coarse.MixingLayer.dropout", "x3d_coarse.MixingLayer.dropout", "torch.one_hot().cuda", "torch.one_hot().cuda", "torch.one_hot().cuda", "x3d_coarse.MixingLayer.conv_at", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "at.view().repeat.view().repeat.view", "at.view().repeat.view().repeat.unsqueeze().unsqueeze().unsqueeze", "at.view().repeat.view().repeat.unsqueeze().unsqueeze().unsqueeze", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "torch.adaptive_max_pool2d", "x3d_coarse.MixingLayer.view", "x3d_coarse.MixingLayer.conv_at2", "torch.one_hot", "torch.one_hot", "torch.one_hot", "bias[].view", "scale[].view", "x3d_coarse.MixingLayer.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "at.view().repeat.view().repeat.unsqueeze().unsqueeze", "at.view().repeat.view().repeat.unsqueeze().unsqueeze", "at.view().repeat.view().repeat.unsqueeze", "at.view().repeat.view().repeat.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", ",", "bias", ",", "scale", "=", "inp", "\n", "b", ",", "c", ",", "t", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "\n", "cs", "=", "[", "]", ";", "ms", "=", "[", "]", ";", "\n", "for", "i", "in", "range", "(", "self", ".", "range", ")", ":", "# B C1 1 H1 W1", "\n", "            ", "_", ",", "cf", ",", "_", ",", "hf", ",", "wf", "=", "bias", "[", "i", "]", ".", "shape", "\n", "if", "hf", "!=", "h", ":", "\n", "                ", "bias_i", "=", "F", ".", "adaptive_max_pool2d", "(", "bias", "[", "i", "]", ".", "view", "(", "b", ",", "cf", "*", "t", ",", "hf", ",", "wf", ")", ",", "(", "h", ",", "w", ")", ")", ".", "view", "(", "b", ",", "cf", ",", "t", ",", "h", ",", "w", ")", "# B 1 C1 H W", "\n", "", "else", ":", "\n", "                ", "bias_i", "=", "bias", "[", "i", "]", "\n", "", "cs", ".", "append", "(", "bias_i", ")", "\n", "", "for", "j", "in", "range", "(", "self", ".", "range", ")", ":", "\n", "            ", "_", ",", "cf", ",", "_", ",", "hf", ",", "wf", "=", "scale", "[", "j", "]", ".", "shape", "\n", "if", "hf", "!=", "h", ":", "\n", "                ", "scale_j", "=", "F", ".", "adaptive_max_pool2d", "(", "scale", "[", "j", "]", ".", "view", "(", "b", ",", "cf", "*", "t", ",", "hf", ",", "wf", ")", ",", "(", "h", ",", "w", ")", ")", ".", "view", "(", "b", ",", "cf", ",", "t", ",", "h", ",", "w", ")", "\n", "", "else", ":", "\n", "                ", "scale_j", "=", "scale", "[", "j", "]", "\n", "", "ms", ".", "append", "(", "scale_j", ")", "\n", "\n", "", "cs", "=", "torch", ".", "cat", "(", "cs", ",", "dim", "=", "1", ")", "#.detach() # B C+ T H W", "\n", "ms", "=", "torch", ".", "cat", "(", "ms", ",", "dim", "=", "1", ")", "#.detach()", "\n", "\n", "\n", "if", "self", ".", "learned", ":", "\n", "            ", "if", "self", ".", "isLogit", ":", "\n", "                ", "cs", "=", "self", ".", "dropout", "(", "cs", ")", "\n", "ms", "=", "self", ".", "dropout", "(", "ms", ")", "\n", "", "cs", "=", "self", ".", "conv_at", "(", "cs", ".", "view", "(", "b", ",", "-", "1", ",", "t", "*", "h", "*", "w", ")", ")", ".", "view", "(", "b", ",", "c", ",", "t", ",", "h", ",", "w", ")", "\n", "ms", "=", "F", ".", "sigmoid", "(", "self", ".", "conv_at2", "(", "ms", ".", "view", "(", "b", ",", "-", "1", ",", "t", "*", "h", "*", "w", ")", ")", ")", ".", "view", "(", "b", ",", "c", ",", "t", ",", "h", ",", "w", ")", "\n", "\n", "", "else", ":", "\n", "            ", "l", "=", "[", "24", ",", "48", ",", "96", ",", "192", "]", ".", "index", "(", "c", ")", "\n", "at", "=", "F", ".", "one_hot", "(", "torch", ".", "arange", "(", "4", ")", ",", "4", ")", ".", "cuda", "(", ")", "[", "l", "]", "\n", "at", "=", "at", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", ".", "repeat", "(", "b", ",", "c", ",", "1", ")", "# B C 4", "\n", "\n", "cs", "=", "torch", ".", "sum", "(", "cs", "*", "at", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", ".", "unsqueeze", "(", "5", ")", ",", "dim", "=", "2", ")", "# B C 1 H W", "\n", "ms", "=", "torch", ".", "sum", "(", "ms", "*", "at", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", ".", "unsqueeze", "(", "5", ")", ",", "dim", "=", "2", ")", "\n", "\n", "", "'''bf,_,_,_,_ = cs.shape\n        if bf != b: # FOR MULTI-CROP TESTING\n            cs = cs.unsqueeze(1).repeat(1,b//bf,1,1,1,1).view(b,c,1,h,w)\n            ms = ms.unsqueeze(1).repeat(1,b//bf,1,1,1,1).view(b,c,1,h,w)'''", "\n", "\n", "return", "cs", ",", "ms", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.GridPoolLayer.__init__": [[356, 370], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "x3d_coarse.SubBatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "x3d_coarse.SubBatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.Compose.__init__"], ["    ", "def", "__init__", "(", "self", ",", "ratio", ",", "depth", ")", ":", "\n", "        ", "super", "(", "GridPoolLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "ratio", "=", "4", "#4 #ratio", "\n", "self", ".", "depth", "=", "depth", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "depth", ",", "depth", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "self", ".", "ratio", "//", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "1", ")", "# ratio//2", "\n", "self", ".", "bn1", "=", "SubBatchNorm3d", "(", "num_splits", "=", "1", ",", "num_features", "=", "depth", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "depth", ",", "depth", ",", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "self", ".", "ratio", "//", "2", ",", "2", ",", "2", ")", ",", "padding", "=", "1", ")", "# ratio//2", "\n", "self", ".", "bn2", "=", "SubBatchNorm3d", "(", "num_splits", "=", "1", ",", "num_features", "=", "depth", ",", "affine", "=", "True", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "depth", ",", "1", ",", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "#self.conv3 = nn.Conv3d(depth, 1, kernel_size=(3,3,3), stride=(ratio//4,2,2), padding=(1,1,1)) #(1,3,3), (1,2,2)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "#self.pool_optional = nn.AvgPool3d((4, 1, 1), stride=(4, 1, 1))", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.GridPoolLayer.forward": [[373, 417], ["x3d_coarse.GridPoolLayer.relu", "x3d_coarse.GridPoolLayer.relu", "x3d_coarse.GridPoolLayer.conv3", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.adaptive_avg_pool3d", "torch.cumsum.squeeze().squeeze().squeeze", "torch.cumsum.squeeze().squeeze().squeeze", "torch.cumsum.squeeze().squeeze().squeeze", "x3d_coarse.GridPoolLayer.sigmoid", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.zeros().to().cuda", "torch.zeros().to().cuda", "torch.zeros().to().cuda", "torch.zeros().to().cuda", "torch.zeros().to().cuda", "torch.zeros().to().cuda", "torch.zeros().to().cuda", "torch.zeros().to().cuda", "torch.zeros().to().cuda", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.grid_sample", "torch.grid_sample", "torch.grid_sample", "x3d_coarse.GridPoolLayer.bn1", "x3d_coarse.GridPoolLayer.bn2", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "x3d_coarse.GridPoolLayer.conv1", "x3d_coarse.GridPoolLayer.conv2", "torch.cumsum.squeeze().squeeze", "torch.cumsum.squeeze().squeeze", "torch.cumsum.squeeze().squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cumsum.view", "torch.cumsum.view", "torch.cumsum.view", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.cumsum.squeeze", "torch.cumsum.squeeze", "torch.cumsum.squeeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", "=", "inp", "\n", "#x = inp", "\n", "b", ",", "c", ",", "t", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "x", "=", "x", "#.detach()", "\n", "\n", "gx", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "gx", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "gx", ")", ")", ")", "\n", "gx", "=", "self", ".", "conv3", "(", "gx", ")", "# B 1 32 7 7", "\n", "gx", "=", "F", ".", "adaptive_avg_pool3d", "(", "gx", ",", "(", "None", ",", "1", ",", "1", ")", ")", "\n", "gx", "=", "gx", ".", "squeeze", "(", "4", ")", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "1", ")", "# B 32", "\n", "gx", "=", "self", ".", "sigmoid", "(", "gx", "*", "5e-1", ")", "\n", "\n", "gx", "=", "1.", "-", "gx", "\n", "gx", "=", "gx", "/", "(", "torch", ".", "sum", "(", "gx", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "1e-16", ")", "\n", "gx", "=", "torch", ".", "cumsum", "(", "gx", ",", "dim", "=", "1", ")", "\n", "#print(' ',t, gx[0]*t)", "\n", "gx_", "=", "torch", ".", "zeros", "(", "gx", ".", "shape", "[", "0", "]", ",", "gx", ".", "shape", "[", "1", "]", "+", "1", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "gx_", "[", ":", ",", "1", ":", "]", "=", "gx", "\n", "gx_out", "=", "gx_", "\n", "\n", "gx", "=", "(", "gx_", "-", "0.5", ")", "*", "2", "# B 32+1", "\n", "\n", "gh", "=", "torch", ".", "arange", "(", "h", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "/", "(", "h", "-", "1", ")", "\n", "gw", "=", "torch", ".", "arange", "(", "w", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "/", "(", "w", "-", "1", ")", "\n", "gh", "=", "(", "gh", "-", "0.5", ")", "*", "2", "\n", "gw", "=", "(", "gw", "-", "0.5", ")", "*", "2", "\n", "grid", "=", "torch", ".", "meshgrid", "(", "[", "gx", ".", "view", "(", "-", "1", ")", ",", "gh", ",", "gw", "]", ")", "\n", "grid", "=", "torch", ".", "stack", "(", "(", "grid", "[", "2", "]", ",", "grid", "[", "1", "]", ",", "grid", "[", "0", "]", ")", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "b", ",", "gx", ".", "shape", "[", "1", "]", ",", "gh", ".", "shape", "[", "0", "]", ",", "gw", ".", "shape", "[", "0", "]", ",", "3", ")", "# B 32 H W 3", "\n", "\n", "x", "=", "F", ".", "grid_sample", "(", "x", ",", "grid", ",", "align_corners", "=", "True", ")", "# B C 32 H W", "\n", "#x = F.avg_pool3d(x, kernel_size=(4,1,1), stride=(4,1,1)) # B C 32 H W", "\n", "#x = self.pool_optional(x)", "\n", "\n", "'''mh = torch.zeros(1).to(torch.float32).cuda()\n        mw = torch.zeros(1).to(torch.float32).cuda()\n        grid_mask = torch.meshgrid([gx.view(-1), mh, mw])\n        grid_mask = torch.stack((grid_mask[2], grid_mask[1], grid_mask[0]), dim=-1).view(b,gx.shape[1],mh.shape[0],mw.shape[0],3) # B 32+1 H W 3\n        masks = masks.unsqueeze(1).unsqueeze(3).unsqueeze(4) # B 1 128 1 1\n        masks = F.grid_sample(masks, grid_mask, mode='nearest', align_corners=True)\n        #masks = F.max_pool3d(masks, kernel_size=(4,1,1), stride=(4,1,1))\n        masks = masks.squeeze(4).squeeze(3).squeeze(1) # B 32'''", "\n", "\n", "return", "x", ",", "gx_out", "#, masks", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet.__init__": [[457, 562], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "x3d_coarse.SubBatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "x3d_coarse.ResNet._make_layer", "x3d_coarse.ResNet._make_layer", "x3d_coarse.ResNet._make_layer", "x3d_coarse.ResNet._make_layer", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "x3d_coarse.SubBatchNorm3d", "x3d_coarse.RewightLayer", "x3d_coarse.RewightLayer", "x3d_coarse.RewightLayer", "x3d_coarse.RewightLayer", "x3d_coarse.RewightLayer", "x3d_coarse.Gaussian", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "x3d_coarse.ResNet.modules", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "x3d_coarse.MixingLayer", "x3d_coarse.MixingLayer", "x3d_coarse.MixingLayer", "x3d_coarse.MixingLayer", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "isinstance", "int", "int", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.AdaptiveAvgPool3d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "x3d_coarse.GridPoolLayer"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.Compose.__init__", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet._make_layer", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet._make_layer", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet._make_layer", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "block_inplanes", ",", "\n", "n_input_channels", "=", "3", ",", "\n", "feat_depth", "=", "{", "}", ",", "\n", "conv1_t_size", "=", "7", ",", "\n", "conv1_t_stride", "=", "1", ",", "\n", "shortcut_type", "=", "'B'", ",", "\n", "widen_factor", "=", "1.0", ",", "\n", "dropout", "=", "0.5", ",", "\n", "n_classes", "=", "400", ",", "\n", "base_bn_splits", "=", "8", ",", "\n", "task", "=", "'class'", ",", "\n", "extract_feat", "=", "False", ",", "\n", "t_pool", "=", "None", ",", "\n", "learnedMixing", "=", "False", ",", "\n", "isMixing", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "block_inplanes", "=", "[", "(", "int", "(", "x", "*", "widen_factor", ")", ",", "int", "(", "y", "*", "widen_factor", ")", ")", "for", "x", ",", "y", "in", "block_inplanes", "]", "\n", "self", ".", "index", "=", "0", "\n", "self", ".", "base_bn_splits", "=", "base_bn_splits", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "extract_feat", "=", "extract_feat", "\n", "self", ".", "feat_depth", "=", "feat_depth", "\n", "self", ".", "learnedMixing", "=", "learnedMixing", "\n", "self", ".", "isMixing", "=", "isMixing", "\n", "self", ".", "t_pool", "=", "t_pool", "\n", "\n", "self", ".", "in_planes", "=", "block_inplanes", "[", "0", "]", "[", "1", "]", "\n", "\n", "if", "self", ".", "t_pool", "==", "'avg'", ":", "\n", "            ", "self", ".", "pool_1", "=", "nn", ".", "AvgPool3d", "(", "(", "4", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "4", ",", "1", ",", "1", ")", ")", "\n", "", "elif", "self", ".", "t_pool", "==", "'max'", ":", "\n", "            ", "self", ".", "pool_1", "=", "nn", ".", "MaxPool3d", "(", "(", "4", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "4", ",", "1", ",", "1", ")", ")", "\n", "", "elif", "self", ".", "t_pool", "==", "'grid'", ":", "\n", "            ", "self", ".", "pool_1", "=", "GridPoolLayer", "(", "ratio", "=", "4", ",", "depth", "=", "block_inplanes", "[", "0", "]", "[", "1", "]", ")", "\n", "\n", "", "self", ".", "conv1_s", "=", "nn", ".", "Conv3d", "(", "n_input_channels", ",", "\n", "self", ".", "in_planes", ",", "\n", "kernel_size", "=", "(", "1", ",", "3", ",", "3", ")", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "0", ",", "1", ",", "1", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "conv1_t", "=", "nn", ".", "Conv3d", "(", "self", ".", "in_planes", ",", "\n", "self", ".", "in_planes", ",", "\n", "kernel_size", "=", "(", "5", ",", "1", ",", "1", ")", ",", "\n", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "\n", "padding", "=", "(", "2", ",", "0", ",", "0", ")", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "self", ".", "in_planes", ")", "\n", "self", ".", "bn1", "=", "SubBatchNorm3d", "(", "num_splits", "=", "self", ".", "base_bn_splits", ",", "num_features", "=", "self", ".", "in_planes", ",", "affine", "=", "True", ")", "#nn.BatchNorm3d(self.in_planes)", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "block_inplanes", "[", "0", "]", ",", "\n", "layers", "[", "0", "]", ",", "\n", "shortcut_type", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "block_inplanes", "[", "1", "]", ",", "\n", "layers", "[", "1", "]", ",", "\n", "shortcut_type", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "block_inplanes", "[", "2", "]", ",", "\n", "layers", "[", "2", "]", ",", "\n", "shortcut_type", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "\n", "block_inplanes", "[", "3", "]", ",", "\n", "layers", "[", "3", "]", ",", "\n", "shortcut_type", ",", "\n", "stride", "=", "2", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv3d", "(", "block_inplanes", "[", "3", "]", "[", "1", "]", ",", "block_inplanes", "[", "3", "]", "[", "0", "]", ",", "kernel_size", "=", "(", "1", ",", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "1", ",", "1", ")", ",", "padding", "=", "(", "0", ",", "0", ",", "0", ")", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn5", "=", "SubBatchNorm3d", "(", "num_splits", "=", "self", ".", "base_bn_splits", ",", "num_features", "=", "block_inplanes", "[", "3", "]", "[", "0", "]", ",", "affine", "=", "True", ")", "#nn.BatchNorm3d(block_inplanes[3][0])", "\n", "\n", "\n", "self", ".", "rw2", "=", "RewightLayer", "(", "channels", "=", "block_inplanes", "[", "0", "]", "[", "1", "]", ",", "g_channels", "=", "block_inplanes", "[", "0", "]", "[", "1", "]", ",", "depth", "=", "self", ".", "feat_depth", "[", "'layer1'", "]", ",", "height", "=", "56", ")", "\n", "self", ".", "rw3", "=", "RewightLayer", "(", "channels", "=", "block_inplanes", "[", "1", "]", "[", "1", "]", ",", "g_channels", "=", "block_inplanes", "[", "1", "]", "[", "1", "]", ",", "depth", "=", "self", ".", "feat_depth", "[", "'layer2'", "]", ",", "height", "=", "28", ")", "\n", "self", ".", "rw4", "=", "RewightLayer", "(", "channels", "=", "block_inplanes", "[", "2", "]", "[", "1", "]", ",", "g_channels", "=", "block_inplanes", "[", "2", "]", "[", "1", "]", ",", "depth", "=", "self", ".", "feat_depth", "[", "'layer3'", "]", ",", "height", "=", "14", ")", "\n", "self", ".", "rw5", "=", "RewightLayer", "(", "channels", "=", "block_inplanes", "[", "3", "]", "[", "1", "]", ",", "g_channels", "=", "block_inplanes", "[", "3", "]", "[", "1", "]", ",", "depth", "=", "self", ".", "feat_depth", "[", "'layer4'", "]", ",", "height", "=", "7", ")", "\n", "self", ".", "rw6", "=", "RewightLayer", "(", "channels", "=", "157", ",", "g_channels", "=", "157", ",", "depth", "=", "self", ".", "feat_depth", "[", "'conv5'", "]", ",", "height", "=", "7", ",", "pool", "=", "True", ")", "\n", "\n", "if", "self", ".", "isMixing", ":", "\n", "            ", "self", ".", "mix2", "=", "MixingLayer", "(", "depth", "=", "block_inplanes", "[", "0", "]", "[", "1", "]", ",", "learned", "=", "self", ".", "learnedMixing", ",", "index", "=", "0", ")", "\n", "self", ".", "mix3", "=", "MixingLayer", "(", "depth", "=", "block_inplanes", "[", "1", "]", "[", "1", "]", ",", "learned", "=", "self", ".", "learnedMixing", ",", "index", "=", "1", ")", "\n", "self", ".", "mix4", "=", "MixingLayer", "(", "depth", "=", "block_inplanes", "[", "2", "]", "[", "1", "]", ",", "learned", "=", "self", ".", "learnedMixing", ",", "index", "=", "2", ")", "\n", "self", ".", "mix5", "=", "MixingLayer", "(", "depth", "=", "block_inplanes", "[", "3", "]", "[", "1", "]", ",", "learned", "=", "self", ".", "learnedMixing", ",", "index", "=", "3", ")", "\n", "\n", "", "self", ".", "gauss", "=", "Gaussian", "(", "ratio", "=", "1", ")", "####### 4 FOR GRIDPOOL", "\n", "\n", "if", "task", "==", "'class'", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "1", ",", "1", ",", "1", ")", ")", "\n", "", "elif", "task", "==", "'loc'", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool3d", "(", "(", "None", ",", "1", ",", "1", ")", ")", "\n", "", "self", ".", "fc1", "=", "nn", ".", "Conv3d", "(", "block_inplanes", "[", "3", "]", "[", "0", "]", ",", "2048", ",", "bias", "=", "False", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "#nn.Linear(block_inplanes[3][0], 2048, bias=False)", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "2048", ",", "n_classes", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "\n", "mode", "=", "'fan_out'", ",", "\n", "nonlinearity", "=", "'relu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet._downsample_basic_block": [[563, 573], ["torch.avg_pool3d", "torch.avg_pool3d", "torch.avg_pool3d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "isinstance", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "zero_pads.cuda.cuda.cuda", "torch.cat.size", "torch.cat.size", "torch.cat.size"], "methods", ["None"], ["", "", "", "def", "_downsample_basic_block", "(", "self", ",", "x", ",", "planes", ",", "stride", ")", ":", "\n", "        ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "zeros", "(", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "\n", "out", ".", "size", "(", "3", ")", ",", "out", ".", "size", "(", "4", ")", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "            ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet._make_layer": [[574, 603], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "x3d_coarse.conv1x1x1", "x3d_coarse.SubBatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.conv1x1x1"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "shortcut_type", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "in_planes", "!=", "planes", "[", "1", "]", ":", "\n", "            ", "if", "shortcut_type", "==", "'A'", ":", "\n", "                ", "downsample", "=", "partial", "(", "self", ".", "_downsample_basic_block", ",", "\n", "planes", "=", "planes", "[", "1", "]", ",", "\n", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1x1", "(", "self", ".", "in_planes", ",", "planes", "[", "1", "]", ",", "stride", ")", ",", "\n", "SubBatchNorm3d", "(", "num_splits", "=", "self", ".", "base_bn_splits", ",", "num_features", "=", "planes", "[", "1", "]", ",", "affine", "=", "True", ")", "#nn.BatchNorm3d(planes[1])", "\n", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "in_planes", "=", "self", ".", "in_planes", ",", "\n", "planes", "=", "planes", ",", "\n", "stride", "=", "stride", ",", "\n", "downsample", "=", "downsample", ",", "\n", "index", "=", "self", ".", "index", ",", "\n", "base_bn_splits", "=", "self", ".", "base_bn_splits", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "[", "1", "]", "\n", "self", ".", "index", "+=", "1", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "index", "=", "self", ".", "index", ",", "base_bn_splits", "=", "self", ".", "base_bn_splits", ")", ")", "\n", "self", ".", "index", "+=", "1", "\n", "\n", "", "self", ".", "index", "=", "0", "\n", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet.replace_logits": [[605, 608], ["torch.Linear", "torch.Linear", "torch.Linear", "x3d_coarse.RewightLayer"], "methods", ["None"], ["", "def", "replace_logits", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "2048", ",", "n_classes", ")", "\n", "self", ".", "rw6", "=", "RewightLayer", "(", "channels", "=", "n_classes", ",", "g_channels", "=", "n_classes", ",", "depth", "=", "self", ".", "feat_depth", "[", "'conv5'", "]", ",", "height", "=", "7", ",", "pool", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet.update_bn_splits_long_cycle": [[610, 616], ["x3d_coarse.ResNet.modules", "isinstance", "torch.BatchNorm3d().to", "torch.BatchNorm3d().to", "torch.BatchNorm3d().to", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "def", "update_bn_splits_long_cycle", "(", "self", ",", "long_cycle_bn_scale", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "SubBatchNorm3d", ")", ":", "\n", "                ", "m", ".", "num_splits", "=", "self", ".", "base_bn_splits", "*", "long_cycle_bn_scale", "\n", "m", ".", "split_bn", "=", "nn", ".", "BatchNorm3d", "(", "num_features", "=", "m", ".", "num_features", "*", "m", ".", "num_splits", ",", "affine", "=", "False", ")", ".", "to", "(", "m", ".", "weight", ".", "device", ")", "\n", "", "", "return", "self", ".", "base_bn_splits", "*", "long_cycle_bn_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet.aggregate_sub_bn_stats": [[618, 626], ["x3d_coarse.ResNet.modules", "isinstance", "m.aggregate_stats"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.SubBatchNorm3d.aggregate_stats"], ["", "def", "aggregate_sub_bn_stats", "(", "self", ")", ":", "\n", "        ", "\"\"\"find all SubBN modules and aggregate sub-BN stats.\"\"\"", "\n", "count", "=", "0", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "SubBatchNorm3d", ")", ":", "\n", "                ", "m", ".", "aggregate_stats", "(", ")", "\n", "count", "+=", "1", "\n", "", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet.forward": [[628, 728], ["x3d_coarse.ResNet.conv1_s", "x3d_coarse.ResNet.conv1_t", "x3d_coarse.ResNet.bn1", "x3d_coarse.ResNet.relu", "x3d_coarse.ResNet.layer1", "x3d_coarse.ResNet.bn5", "x3d_coarse.ResNet.relu", "x3d_coarse.ResNet.avgpool", "x3d_coarse.ResNet.fc1", "x3d_coarse.ResNet.relu", "x3d_coarse.ResNet.unsqueeze().unsqueeze", "x3d_coarse.ResNet.rw6", "x3d_coarse.ResNet.pool_1", "x3d_coarse.ResNet.gauss", "x3d_coarse.ResNet.rw2", "x3d_coarse.ResNet.rw3", "x3d_coarse.ResNet.rw4", "x3d_coarse.ResNet.rw5", "x3d_coarse.ResNet.mix2", "x3d_coarse.ResNet.layer2", "x3d_coarse.ResNet.mix3", "x3d_coarse.ResNet.layer3", "x3d_coarse.ResNet.mix4", "x3d_coarse.ResNet.layer4", "x3d_coarse.ResNet.mix5", "x3d_coarse.ResNet.rw2", "x3d_coarse.ResNet.layer2", "x3d_coarse.ResNet.rw3", "x3d_coarse.ResNet.layer3", "x3d_coarse.ResNet.rw4", "x3d_coarse.ResNet.layer4", "x3d_coarse.ResNet.rw5", "x3d_coarse.ResNet.conv5", "x3d_coarse.ResNet.squeeze().squeeze().squeeze", "x3d_coarse.ResNet.dropout", "x3d_coarse.ResNet.fc2().unsqueeze", "x3d_coarse.ResNet.squeeze().squeeze().permute", "x3d_coarse.ResNet.dropout", "x3d_coarse.ResNet.fc2().permute", "x3d_coarse.GridUnpool", "torch.interpolate", "torch.interpolate", "torch.interpolate", "x3d_coarse.ResNet.pool_1", "x3d_coarse.ResNet.unsqueeze", "x3d_coarse.ResNet.squeeze().squeeze", "x3d_coarse.ResNet.fc2", "x3d_coarse.ResNet.squeeze().squeeze", "x3d_coarse.ResNet.fc2", "x3d_coarse.ResNet.pool_1", "x3d_coarse.ResNet.gauss", "x3d_coarse.ResNet.squeeze", "x3d_coarse.ResNet.squeeze"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.GridUnpool"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", ",", "feat", ",", "feat_masks", ",", "i", ",", "meta", "=", "inp", "\n", "_", ",", "_", ",", "tl", ",", "_", ",", "_", "=", "x", ".", "shape", "\n", "\n", "\n", "x", "=", "self", ".", "conv1_s", "(", "x", ")", "\n", "x", "=", "self", ".", "conv1_t", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "\n", "if", "self", ".", "t_pool", "==", "'avg'", ":", "\n", "            ", "x", "=", "self", ".", "pool_1", "(", "x", ")", "\n", "", "elif", "self", ".", "t_pool", "==", "'max'", ":", "\n", "            ", "x", "=", "self", ".", "pool_1", "(", "x", ")", "\n", "", "elif", "self", ".", "t_pool", "==", "'stride'", ":", "\n", "            ", "x", "=", "x", "[", ":", ",", ":", ",", ":", ":", "4", ",", ":", ",", ":", "]", "\n", "", "elif", "self", ".", "t_pool", "==", "'grid'", ":", "\n", "            ", "x_up", "=", "x", "\n", "x", ",", "gx", "=", "self", ".", "pool_1", "(", "x", ")", "\n", "x_down", "=", "x", "\n", "GX", "=", "self", ".", "gauss", "(", "[", "meta", ",", "feat_masks", ",", "gx", ",", "tl", "]", ")", "\n", "\n", "", "if", "self", ".", "t_pool", "!=", "'grid'", ":", "\n", "            ", "GX", "=", "self", ".", "gauss", "(", "[", "meta", ",", "feat_masks", ",", "x", ",", "None", "]", ")", "\n", "\n", "", "if", "self", ".", "isMixing", ":", "\n", "            ", "rw2", ",", "rw2_g", "=", "self", ".", "rw2", "(", "[", "feat", "[", "'layer1'", "]", ",", "x", ",", "feat_masks", ",", "None", ",", "i", ",", "GX", ",", "True", "]", ")", "\n", "rw3", ",", "rw3_g", "=", "self", ".", "rw3", "(", "[", "feat", "[", "'layer2'", "]", ",", "x", ",", "feat_masks", ",", "None", ",", "i", ",", "GX", ",", "True", "]", ")", "\n", "rw4", ",", "rw4_g", "=", "self", ".", "rw4", "(", "[", "feat", "[", "'layer3'", "]", ",", "x", ",", "feat_masks", ",", "None", ",", "i", ",", "GX", ",", "True", "]", ")", "\n", "rw5", ",", "rw5_g", "=", "self", ".", "rw5", "(", "[", "feat", "[", "'layer4'", "]", ",", "x", ",", "feat_masks", ",", "None", ",", "i", ",", "GX", ",", "True", "]", ")", "\n", "rw_bias", "=", "[", "rw2", ",", "rw3", ",", "rw4", ",", "rw5", "]", "\n", "rw_scale", "=", "[", "rw2_g", ",", "rw3_g", ",", "rw4_g", ",", "rw5_g", "]", "\n", "\n", "c2", ",", "m2", "=", "self", ".", "mix2", "(", "[", "x", ",", "rw_bias", ",", "rw_scale", "]", ")", "\n", "x", "=", "x", "*", "m2", "+", "c2", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "c3", ",", "m3", "=", "self", ".", "mix3", "(", "[", "x", ",", "rw_bias", ",", "rw_scale", "]", ")", "\n", "x", "=", "x", "*", "m3", "+", "c3", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "c4", ",", "m4", "=", "self", ".", "mix4", "(", "[", "x", ",", "rw_bias", ",", "rw_scale", "]", ")", "\n", "x", "=", "x", "*", "m4", "+", "c4", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "c5", ",", "m5", "=", "self", ".", "mix5", "(", "[", "x", ",", "rw_bias", ",", "rw_scale", "]", ")", "\n", "x", "=", "x", "*", "m5", "+", "c5", "\n", "\n", "", "else", ":", "\n", "            ", "rw2", ",", "rw2_g", "=", "self", ".", "rw2", "(", "[", "feat", "[", "'layer1'", "]", ",", "x", ",", "feat_masks", ",", "None", ",", "i", ",", "GX", ",", "False", "]", ")", "\n", "x", "=", "x", "*", "rw2_g", "+", "rw2", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "rw3", ",", "rw3_g", "=", "self", ".", "rw3", "(", "[", "feat", "[", "'layer2'", "]", ",", "x", ",", "feat_masks", ",", "None", ",", "i", ",", "GX", ",", "False", "]", ")", "\n", "x", "=", "x", "*", "rw3_g", "+", "rw3", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "rw4", ",", "rw4_g", "=", "self", ".", "rw4", "(", "[", "feat", "[", "'layer3'", "]", ",", "x", ",", "feat_masks", ",", "None", ",", "i", ",", "GX", ",", "False", "]", ")", "\n", "x", "=", "x", "*", "rw4_g", "+", "rw4", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "rw5", ",", "rw5_g", "=", "self", ".", "rw5", "(", "[", "feat", "[", "'layer4'", "]", ",", "x", ",", "feat_masks", ",", "None", ",", "i", ",", "GX", ",", "False", "]", ")", "\n", "x", "=", "x", "*", "rw5_g", "+", "rw5", "\n", "\n", "", "x", "=", "self", ".", "bn5", "(", "self", ".", "conv5", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "if", "self", ".", "extract_feat", ":", "\n", "            ", "return", "x", "\n", "\n", "", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "if", "self", ".", "task", "==", "'class'", ":", "\n", "            ", "x", "=", "x", ".", "squeeze", "(", "4", ")", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "2", ")", "# B C", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", ".", "unsqueeze", "(", "2", ")", "# B C 1", "\n", "", "if", "self", ".", "task", "==", "'loc'", ":", "\n", "            ", "x", "=", "x", ".", "squeeze", "(", "4", ")", ".", "squeeze", "(", "3", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# B T C", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# B C T", "\n", "\n", "\n", "", "x", "=", "x", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", "\n", "rw6", ",", "rw6_g", "=", "self", ".", "rw6", "(", "[", "feat", "[", "'conv5'", "]", ",", "x", ",", "feat_masks", ",", "None", ",", "i", ",", "GX", ",", "False", "]", ")", "\n", "x", "=", "(", "x", "*", "rw6_g", "+", "rw6", ")", ".", "squeeze", "(", "4", ")", ".", "squeeze", "(", "3", ")", "\n", "\n", "if", "self", ".", "t_pool", "==", "'grid'", ":", "\n", "            ", "x", "=", "GridUnpool", "(", "[", "x", ",", "gx", ",", "True", "]", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "(", "x", ".", "shape", "[", "2", "]", "-", "1", ")", "*", "4", ",", "mode", "=", "'linear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.conv3x3x3": [[87, 95], ["torch.Conv3d"], "function", ["None"], ["", "", "def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "(", "1", ",", "stride", ",", "stride", ")", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "in_planes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.conv1x1x1": [[98, 104], ["torch.Conv3d"], "function", ["None"], ["", "def", "conv1x1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "(", "1", ",", "stride", ",", "stride", ")", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.GridUnpool": [[419, 452], ["torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "mid.view().repeat.view().repeat", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.stack().view", "torch.stack().view", "torch.stack().view", "torch.grid_sample", "F.interpolate.unsqueeze().unsqueeze", "torch.zeros().to().cuda", "torch.zeros().to().cuda", "torch.zeros().to().cuda", "torch.zeros().to().cuda", "torch.zeros().to().cuda", "torch.zeros().to().cuda", "interp1d.Interp1d", "F.interpolate.squeeze().squeeze", "torch.interpolate", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to().cuda", "torch.arange().to", "torch.arange().to", "torch.arange().to", "mid.view().repeat.view", "gx.view", "torch.stack", "torch.stack", "torch.stack", "F.interpolate.unsqueeze", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "F.interpolate.squeeze", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange().to", "torch.arange", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["None"], ["", "", "def", "GridUnpool", "(", "inp", ")", ":", "\n", "    ", "x", ",", "gx", ",", "is_logit", "=", "inp", "# inverse temporal grid here", "\n", "ratio", "=", "4", "#4", "\n", "\n", "if", "is_logit", ":", "\n", "        ", "b", ",", "c", ",", "t", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "unsqueeze", "(", "3", ")", ".", "unsqueeze", "(", "4", ")", "# B C T 1 1", "\n", "gh", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "gw", "=", "torch", ".", "zeros", "(", "1", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "        ", "b", ",", "c", ",", "t", ",", "h", ",", "w", "=", "x", ".", "shape", "\n", "gh", "=", "torch", ".", "arange", "(", "h", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "/", "(", "h", "-", "1", ")", "\n", "gw", "=", "torch", ".", "arange", "(", "w", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "/", "(", "w", "-", "1", ")", "\n", "gh", "=", "(", "gh", "-", "0.5", ")", "*", "2", "\n", "gw", "=", "(", "gw", "-", "0.5", ")", "*", "2", "\n", "\n", "", "mid", "=", "torch", ".", "arange", "(", "gx", ".", "shape", "[", "1", "]", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "mid", "=", "mid", "/", "(", "mid", ".", "shape", "[", "0", "]", "-", "1.", ")", "\n", "mid", "=", "mid", ".", "view", "(", "1", ",", "-", "1", ")", ".", "repeat", "(", "b", ",", "1", ")", "\n", "gx_", "=", "Interp1d", "(", ")", "(", "gx", ",", "mid", ",", "mid", ",", "None", ")", "\n", "\n", "gx", "=", "(", "gx_", "-", "0.5", ")", "*", "2", "# B 32+1", "\n", "\n", "grid", "=", "torch", ".", "meshgrid", "(", "[", "gx", ".", "view", "(", "-", "1", ")", ",", "gh", ",", "gw", "]", ")", "\n", "grid", "=", "torch", ".", "stack", "(", "(", "grid", "[", "2", "]", ",", "grid", "[", "1", "]", ",", "grid", "[", "0", "]", ")", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "b", ",", "gx", ".", "shape", "[", "1", "]", ",", "gh", ".", "shape", "[", "0", "]", ",", "gw", ".", "shape", "[", "0", "]", ",", "3", ")", "# B 32+1 H W 3", "\n", "\n", "x", "=", "F", ".", "grid_sample", "(", "x", ",", "grid", ",", "align_corners", "=", "True", ")", "# B C 32 1 1", "\n", "if", "is_logit", ":", "\n", "        ", "x", "=", "x", ".", "squeeze", "(", "4", ")", ".", "squeeze", "(", "3", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "(", "t", "*", "ratio", ",", "h", ",", "w", ")", ",", "mode", "=", "'trilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.replace_logits": [[730, 732], ["torch.Linear"], "function", ["None"], ["", "", "def", "replace_logits", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "2048", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.get_inplanes": [[733, 739], ["None"], "function", ["None"], ["", "def", "get_inplanes", "(", "version", ")", ":", "\n", "    ", "planes", "=", "{", "'S'", ":", "[", "(", "54", ",", "24", ")", ",", "(", "108", ",", "48", ")", ",", "(", "216", ",", "96", ")", ",", "(", "432", ",", "192", ")", "]", ",", "\n", "'M'", ":", "[", "(", "54", ",", "24", ")", ",", "(", "108", ",", "48", ")", ",", "(", "216", ",", "96", ")", ",", "(", "432", ",", "192", ")", "]", ",", "\n", "'XL'", ":", "[", "(", "72", ",", "32", ")", ",", "(", "162", ",", "72", ")", ",", "(", "306", ",", "136", ")", ",", "(", "630", ",", "280", ")", "]", "}", "\n", "\n", "return", "planes", "[", "version", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.get_blocks": [[740, 746], ["None"], "function", ["None"], ["", "def", "get_blocks", "(", "version", ")", ":", "\n", "    ", "blocks", "=", "{", "'S'", ":", "[", "3", ",", "5", ",", "11", ",", "7", "]", ",", "\n", "'M'", ":", "[", "3", ",", "5", ",", "11", ",", "7", "]", ",", "\n", "'XL'", ":", "[", "5", ",", "10", ",", "25", ",", "15", "]", "}", "\n", "\n", "return", "blocks", "[", "version", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.generate_model": [[747, 751], ["x3d_coarse.ResNet", "x3d_coarse.get_blocks", "x3d_coarse.get_inplanes"], "function", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.get_blocks", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.get_inplanes"], ["", "def", "generate_model", "(", "x3d_version", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "Bottleneck", ",", "get_blocks", "(", "x3d_version", ")", ",", "get_inplanes", "(", "x3d_version", ")", ",", "**", "kwargs", ")", "\n", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.Charades.__init__": [[128, 140], ["charades_fine.make_dataset", "charades_fine.get_default_video_loader"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.make_dataset", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.get_default_video_loader"], ["    ", "def", "__init__", "(", "self", ",", "split_file", ",", "split", ",", "root", ",", "spatial_transform", "=", "None", ",", "task", "=", "'class'", ",", "frames", "=", "80", ",", "gamma_tau", "=", "5", ",", "crops", "=", "1", ",", "extract_feat", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "data", "=", "make_dataset", "(", "split_file", ",", "split", ",", "root", ")", "\n", "self", ".", "split_file", "=", "split_file", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "frames", "=", "frames", "*", "2", "\n", "self", ".", "gamma_tau", "=", "gamma_tau", "*", "2", "#2", "\n", "self", ".", "loader", "=", "get_default_video_loader", "(", ")", "\n", "self", ".", "spatial_transform", "=", "spatial_transform", "\n", "self", ".", "crops", "=", "crops", "\n", "self", ".", "split", "=", "'testing'", "if", "extract_feat", "else", "split", "\n", "self", ".", "task", "=", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.Charades.__getitem__": [[141, 196], ["charades_fine.load_rgb_frames", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "min", "random.randint", "charades_fine.Charades.spatial_transform.randomize_parameters", "torch.stack().permute.unsqueeze", "torch.stack().permute.unsqueeze", "numpy.array", "max", "torch.max", "torch.max", "torch.max", "torch.max", "charades_fine.Charades.spatial_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "int", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.load_rgb_frames", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.MultiScaleRandomCropMultigrid.randomize_parameters"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "vid", ",", "label", ",", "dur", ",", "nf", "=", "self", ".", "data", "[", "index", "]", "\n", "\n", "if", "self", ".", "split", "==", "'testing'", ":", "\n", "            ", "frames", "=", "nf", "\n", "start_f", "=", "1", "\n", "", "else", ":", "\n", "            ", "frames", "=", "min", "(", "self", ".", "frames", ",", "nf", ")", "\n", "start_f", "=", "random", ".", "randint", "(", "1", ",", "max", "(", "self", ".", "gamma_tau", ",", "nf", "-", "frames", ")", ")", "\n", "\n", "", "stride_f", "=", "self", ".", "gamma_tau", "\n", "if", "self", ".", "split", "==", "'testing'", "and", "self", ".", "task", "==", "'loc'", ":", "\n", "            ", "stride_f", "=", "stride_f", "//", "self", ".", "crops", "\n", "\n", "", "imgs", "=", "load_rgb_frames", "(", "self", ".", "root", ",", "vid", ",", "start_f", ",", "frames", ",", "stride_f", ",", "self", ".", "loader", ")", "#stride_f", "\n", "\n", "\n", "label", "=", "label", "[", ":", ",", "start_f", "-", "1", ":", "start_f", "-", "1", "+", "frames", ":", "1", "]", "#stride_f", "\n", "label", "=", "torch", ".", "from_numpy", "(", "label", ")", "\n", "if", "self", ".", "task", "==", "'class'", ":", "\n", "            ", "label", "=", "torch", ".", "max", "(", "label", ",", "dim", "=", "1", ")", "[", "0", "]", "# C T --> C", "\n", "\n", "", "if", "self", ".", "spatial_transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "spatial_transform", ".", "randomize_parameters", "(", "224", ")", "\n", "imgs_l", "=", "[", "self", ".", "spatial_transform", "(", "img", ")", "for", "img", "in", "imgs", "]", "\n", "", "imgs_l", "=", "torch", ".", "stack", "(", "imgs_l", ",", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "# T C H W --> C T H W", "\n", "\n", "step", "=", "1", "\n", "if", "self", ".", "split", "==", "'testing'", ":", "#self.crops > 1:", "\n", "            ", "if", "self", ".", "task", "==", "'class'", ":", "\n", "                ", "step", "=", "int", "(", "(", "imgs_l", ".", "shape", "[", "1", "]", "-", "1", "-", "self", ".", "frames", "//", "self", ".", "gamma_tau", ")", "//", "(", "self", ".", "crops", "-", "1", ")", ")", "\n", "if", "step", "==", "0", ":", "\n", "                    ", "clips", "=", "[", "imgs_l", "[", ":", ",", ":", "self", ".", "frames", "//", "self", ".", "gamma_tau", ",", "...", "]", "for", "i", "in", "range", "(", "self", ".", "crops", ")", "]", "\n", "clips", "=", "torch", ".", "stack", "(", "clips", ",", "0", ")", "\n", "", "else", ":", "\n", "                    ", "clips", "=", "[", "imgs_l", "[", ":", ",", "i", ":", "i", "+", "self", ".", "frames", "//", "self", ".", "gamma_tau", ",", "...", "]", "for", "i", "in", "range", "(", "0", ",", "step", "*", "self", ".", "crops", ",", "step", ")", "]", "\n", "clips", "=", "torch", ".", "stack", "(", "clips", ",", "0", ")", "\n", "", "", "if", "self", ".", "task", "==", "'loc'", ":", "#self.crops > 1:", "\n", "                ", "clips", "=", "[", "imgs_l", "[", ":", ",", "i", ":", ":", "self", ".", "crops", ",", "...", "]", "[", ":", ",", ":", "frames", "//", "self", ".", "gamma_tau", ",", "...", "]", "for", "i", "in", "range", "(", "0", ",", "self", ".", "crops", ")", "]", "\n", "clips", "=", "torch", ".", "stack", "(", "clips", ",", "0", ")", "# N C T H W", "\n", "label", "=", "label", "[", ":", ",", ":", "(", "frames", "//", "self", ".", "gamma_tau", ")", "*", "self", ".", "gamma_tau", "]", "\n", "", "", "else", ":", "\n", "            ", "clips", "=", "imgs_l", ".", "unsqueeze", "(", "0", ")", "# 1 C T H W", "\n", "\n", "", "meta", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "[", "start_f", "//", "self", ".", "gamma_tau", ",", "frames", "//", "self", ".", "gamma_tau", ",", "\n", "nf", "//", "self", ".", "gamma_tau", ",", "stride_f", "//", "self", ".", "gamma_tau", "]", ")", ")", "\n", "\n", "return", "clips", ",", "label", ",", "vid", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.Charades.__len__": [[197, 199], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.pil_loader": [[22, 27], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.accimage_loader": [[29, 36], ["accimage.Image", "charades_fine.pil_loader"], "function", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "accimage", "\n", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.get_default_image_loader": [[38, 45], ["torchvision.set_image_backend", "get_image_backend"], "function", ["None"], ["", "", "def", "get_default_image_loader", "(", ")", ":", "\n", "    ", "torchvision", ".", "set_image_backend", "(", "'accimage'", ")", "\n", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.video_loader": [[47, 58], ["os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "video.append", "image_loader", "str().zfill", "str"], "function", ["None"], ["", "", "def", "video_loader", "(", "video_dir_path", ",", "vid", ",", "frame_indices", ",", "image_loader", ")", ":", "\n", "    ", "video", "=", "[", "]", "\n", "for", "i", "in", "frame_indices", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "vid", ",", "vid", "+", "'-'", "+", "str", "(", "i", ")", ".", "zfill", "(", "6", ")", "+", "'.jpg'", ")", "\n", "#image_path = os.path.join(video_dir_path, 'frame_{:05d}.jpg'.format(i))", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "            ", "video", ".", "append", "(", "image_loader", "(", "image_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "video", "\n", "\n", "", "", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.get_default_video_loader": [[60, 63], ["charades_fine.get_default_image_loader", "functools.partial"], "function", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.get_default_image_loader"], ["", "def", "get_default_video_loader", "(", ")", ":", "\n", "    ", "image_loader", "=", "get_default_image_loader", "(", ")", "\n", "return", "functools", ".", "partial", "(", "video_loader", ",", "image_loader", "=", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.video_to_tensor": [[65, 76], ["torch.from_numpy", "torch.from_numpy", "pic.transpose"], "function", ["None"], ["", "def", "video_to_tensor", "(", "pic", ")", ":", "\n", "    ", "\"\"\"Convert a ``numpy.ndarray`` to tensor.\n    Converts a numpy.ndarray (T x H x W x C)\n    to a torch.FloatTensor of shape (C x T x H x W)\n\n    Args:\n         pic (numpy.ndarray): Video to be converted to tensor.\n    Returns:\n         Tensor: Converted video.\n    \"\"\"", "\n", "return", "torch", ".", "from_numpy", "(", "pic", ".", "transpose", "(", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.load_rgb_frames": [[78, 85], ["list", "charades_fine.video_loader", "range"], "function", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.video_loader"], ["", "def", "load_rgb_frames", "(", "image_dir", ",", "vid", ",", "start", ",", "num", ",", "stride", ",", "video_loader", ")", ":", "\n", "#frames = []", "\n", "\n", "  ", "frame_indices", "=", "list", "(", "range", "(", "start", ",", "start", "+", "num", ",", "stride", ")", ")", "\n", "frames", "=", "video_loader", "(", "image_dir", ",", "vid", ",", "frame_indices", ")", "\n", "\n", "return", "frames", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.make_dataset": [[87, 124], ["os.path.exists", "os.path.exists", "print", "open", "json.load", "print", "numpy.load", "print", "json.load.keys", "numpy.save", "len", "numpy.zeros", "np.load.append", "print", "len", "os.path.exists", "os.path.exists", "os.listdir", "os.listdir", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "def", "make_dataset", "(", "split_file", ",", "split", ",", "root", ",", "num_classes", "=", "157", ")", ":", "\n", "    ", "dataset", "=", "[", "]", "\n", "with", "open", "(", "split_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "pre_data_file", "=", "split_file", "[", ":", "-", "5", "]", "+", "'_'", "+", "split", "+", "'labeldata_160.npy'", "#labeldata_160", "\n", "if", "os", ".", "path", ".", "exists", "(", "pre_data_file", ")", ":", "\n", "        ", "print", "(", "'{} exists'", ".", "format", "(", "pre_data_file", ")", ")", "\n", "dataset", "=", "np", ".", "load", "(", "pre_data_file", ",", "allow_pickle", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'{} does not exist'", ".", "format", "(", "pre_data_file", ")", ")", "\n", "i", "=", "0", "\n", "for", "vid", "in", "data", ".", "keys", "(", ")", ":", "\n", "            ", "if", "data", "[", "vid", "]", "[", "'subset'", "]", "!=", "split", ":", "\n", "                ", "continue", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "root", ",", "vid", ")", ")", ":", "\n", "                ", "continue", "\n", "", "num_frames", "=", "len", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "vid", ")", ")", ")", "\n", "\n", "if", "num_frames", "<", "(", "2", "*", "80", "+", "2", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "label", "=", "np", ".", "zeros", "(", "(", "num_classes", ",", "num_frames", ")", ",", "np", ".", "float32", ")", "\n", "\n", "fps", "=", "num_frames", "/", "data", "[", "vid", "]", "[", "'duration'", "]", "\n", "for", "ann", "in", "data", "[", "vid", "]", "[", "'actions'", "]", ":", "\n", "                ", "for", "fr", "in", "range", "(", "0", ",", "num_frames", ",", "1", ")", ":", "\n", "                    ", "if", "fr", "/", "fps", ">", "ann", "[", "1", "]", "and", "fr", "/", "fps", "<", "ann", "[", "2", "]", ":", "\n", "                        ", "label", "[", "ann", "[", "0", "]", ",", "fr", "]", "=", "1", "# binary classification", "\n", "", "", "", "dataset", ".", "append", "(", "(", "vid", ",", "label", ",", "data", "[", "vid", "]", "[", "'duration'", "]", ",", "num_frames", ")", ")", "\n", "i", "+=", "1", "\n", "print", "(", "i", ",", "vid", ")", "\n", "", "np", ".", "save", "(", "pre_data_file", ",", "dataset", ")", "\n", "\n", "", "print", "(", "'dataset size:%d'", "%", "len", "(", "dataset", ")", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.charades_fine.mt_collate_fn": [[201, 225], ["torch.utils.data.dataloader.default_collate", "numpy.zeros", "numpy.zeros", "numpy.zeros", "new_batch.append", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "", "def", "mt_collate_fn", "(", "batch", ")", ":", "\n", "    ", "\"Pads data and puts it into a tensor of same dimensions\"", "\n", "\n", "max_len_clips", "=", "0", "\n", "max_len_labels", "=", "0", "\n", "for", "b", "in", "batch", ":", "\n", "        ", "if", "b", "[", "0", "]", ".", "shape", "[", "2", "]", ">", "max_len_clips", ":", "\n", "            ", "max_len_clips", "=", "b", "[", "0", "]", ".", "shape", "[", "2", "]", "\n", "", "if", "b", "[", "1", "]", ".", "shape", "[", "1", "]", ">", "max_len_labels", ":", "\n", "            ", "max_len_labels", "=", "b", "[", "1", "]", ".", "shape", "[", "1", "]", "\n", "\n", "", "", "new_batch", "=", "[", "]", "\n", "for", "b", "in", "batch", ":", "\n", "        ", "clips", "=", "np", ".", "zeros", "(", "(", "b", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "b", "[", "0", "]", ".", "shape", "[", "1", "]", ",", "max_len_clips", ",", "b", "[", "0", "]", ".", "shape", "[", "3", "]", ",", "b", "[", "0", "]", ".", "shape", "[", "4", "]", ")", ",", "np", ".", "float32", ")", "\n", "label", "=", "np", ".", "zeros", "(", "(", "b", "[", "1", "]", ".", "shape", "[", "0", "]", ",", "max_len_labels", ")", ",", "np", ".", "float32", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "max_len_labels", ")", ",", "np", ".", "float32", ")", "\n", "\n", "clips", "[", ":", ",", ":", ",", ":", "b", "[", "0", "]", ".", "shape", "[", "2", "]", ",", ":", ",", ":", "]", "=", "b", "[", "0", "]", "#[:,:,:min(cap_clip,b[0].shape[2]),:,:]", "\n", "label", "[", ":", ",", ":", "b", "[", "1", "]", ".", "shape", "[", "1", "]", "]", "=", "b", "[", "1", "]", "#[:,:min(cap_label,b[1].shape[1])]", "\n", "mask", "[", ":", "b", "[", "1", "]", ".", "shape", "[", "1", "]", "]", "=", "1", "\n", "\n", "new_batch", ".", "append", "(", "[", "torch", ".", "from_numpy", "(", "clips", ")", ",", "torch", ".", "from_numpy", "(", "label", ")", ",", "torch", ".", "from_numpy", "(", "mask", ")", ",", "b", "[", "2", "]", "]", ")", "\n", "\n", "", "return", "default_collate", "(", "new_batch", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.__init__": [[21, 24], ["meter.Meter.__init__", "apmeter.APMeter.reset"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.Compose.__init__", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "APMeter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.reset": [[25, 30], ["torch.FloatTensor", "torch.LongTensor", "torch.FloatTensor", "torch.FloatStorage", "torch.LongStorage", "torch.FloatStorage"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Resets the meter with empty member variables\"\"\"", "\n", "self", ".", "scores", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "FloatStorage", "(", ")", ")", "\n", "self", ".", "targets", "=", "torch", ".", "LongTensor", "(", "torch", ".", "LongStorage", "(", ")", ")", "\n", "self", ".", "weights", "=", "torch", ".", "FloatTensor", "(", "torch", ".", "FloatStorage", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.add": [[31, 97], ["torch.equal", "apmeter.APMeter.scores.resize_", "apmeter.APMeter.targets.resize_", "apmeter.APMeter.scores.narrow().copy_", "apmeter.APMeter.targets.narrow().copy_", "torch.is_tensor", "torch.from_numpy", "torch.is_tensor", "torch.from_numpy", "torch.from_numpy.squeeze", "output.view.view.dim", "output.view.view.view", "target.view.view.dim", "target.view.view.view", "apmeter.APMeter.scores.numel", "apmeter.APMeter.scores.storage().size", "math.ceil", "math.ceil", "apmeter.APMeter.scores.storage().resize_", "apmeter.APMeter.targets.storage().resize_", "apmeter.APMeter.scores.size", "output.view.view.size", "target.view.view.size", "apmeter.APMeter.weights.resize_", "apmeter.APMeter.weights.narrow().copy_", "torch.is_tensor", "torch.from_numpy", "output.view.view.dim", "target.view.view.dim", "torch.from_numpy.dim", "torch.from_numpy.numel", "target.view.view.size", "torch.min", "target.view.view.size", "apmeter.APMeter.targets.size", "apmeter.APMeter.scores.numel", "output.view.view.numel", "int", "int", "apmeter.APMeter.weights.storage().resize_", "apmeter.APMeter.scores.dim", "output.view.view.size", "target.view.view.size", "apmeter.APMeter.scores.narrow", "apmeter.APMeter.targets.narrow", "apmeter.APMeter.scores.storage", "apmeter.APMeter.scores.storage().size", "apmeter.APMeter.weights.storage().size", "apmeter.APMeter.scores.storage", "apmeter.APMeter.targets.storage", "int", "output.view.view.size", "target.view.view.size", "torch.from_numpy.size", "apmeter.APMeter.weights.narrow", "output.view.view.numel", "output.view.view.numel", "apmeter.APMeter.weights.storage", "torch.from_numpy.size", "apmeter.APMeter.scores.storage", "apmeter.APMeter.weights.storage", "output.view.view.size"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "output", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            output (Tensor): NxK tensor that for each of the N examples\n                indicates the probability of the example belonging to each of\n                the K classes, according to the model. The probabilities should\n                sum to one over all classes\n            target (Tensor): binary NxK tensort that encodes which of the K\n                classes are associated with the N-th input\n                    (eg: a row [0, 1, 0, 1] indicates that the example is\n                         associated with classes 2 and 4)\n            weight (optional, Tensor): Nx1 tensor representing the weight for\n                each example (each weight > 0)\n        \"\"\"", "\n", "if", "not", "torch", ".", "is_tensor", "(", "output", ")", ":", "\n", "            ", "output", "=", "torch", ".", "from_numpy", "(", "output", ")", "\n", "", "if", "not", "torch", ".", "is_tensor", "(", "target", ")", ":", "\n", "            ", "target", "=", "torch", ".", "from_numpy", "(", "target", ")", "\n", "\n", "", "if", "weight", "is", "not", "None", ":", "\n", "            ", "if", "not", "torch", ".", "is_tensor", "(", "weight", ")", ":", "\n", "                ", "weight", "=", "torch", ".", "from_numpy", "(", "weight", ")", "\n", "", "weight", "=", "weight", ".", "squeeze", "(", ")", "\n", "", "if", "output", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "output", "=", "output", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "output", ".", "dim", "(", ")", "==", "2", ",", "'wrong output size (should be 1D or 2D with one column \\\n                per class)'", "\n", "", "if", "target", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "assert", "target", ".", "dim", "(", ")", "==", "2", ",", "'wrong target size (should be 1D or 2D with one column \\\n                per class)'", "\n", "", "if", "weight", "is", "not", "None", ":", "\n", "            ", "assert", "weight", ".", "dim", "(", ")", "==", "1", ",", "'Weight dimension should be 1'", "\n", "assert", "weight", ".", "numel", "(", ")", "==", "target", ".", "size", "(", "0", ")", ",", "'Weight dimension 1 should be the same as that of target'", "\n", "assert", "torch", ".", "min", "(", "weight", ")", ">=", "0", ",", "'Weight should be non-negative only'", "\n", "", "assert", "torch", ".", "equal", "(", "target", "**", "2", ",", "target", ")", ",", "'targets should be binary (0 or 1)'", "\n", "if", "self", ".", "scores", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "assert", "target", ".", "size", "(", "1", ")", "==", "self", ".", "targets", ".", "size", "(", "1", ")", ",", "'dimensions for output should match previously added examples.'", "\n", "\n", "# make sure storage is of sufficient size", "\n", "", "if", "self", ".", "scores", ".", "storage", "(", ")", ".", "size", "(", ")", "<", "self", ".", "scores", ".", "numel", "(", ")", "+", "output", ".", "numel", "(", ")", ":", "\n", "            ", "new_size", "=", "math", ".", "ceil", "(", "self", ".", "scores", ".", "storage", "(", ")", ".", "size", "(", ")", "*", "1.5", ")", "\n", "new_weight_size", "=", "math", ".", "ceil", "(", "self", ".", "weights", ".", "storage", "(", ")", ".", "size", "(", ")", "*", "1.5", ")", "\n", "self", ".", "scores", ".", "storage", "(", ")", ".", "resize_", "(", "int", "(", "new_size", "+", "output", ".", "numel", "(", ")", ")", ")", "\n", "self", ".", "targets", ".", "storage", "(", ")", ".", "resize_", "(", "int", "(", "new_size", "+", "output", ".", "numel", "(", ")", ")", ")", "\n", "if", "weight", "is", "not", "None", ":", "\n", "                ", "self", ".", "weights", ".", "storage", "(", ")", ".", "resize_", "(", "int", "(", "new_weight_size", "\n", "+", "output", ".", "size", "(", "0", ")", ")", ")", "\n", "\n", "# store scores and targets", "\n", "", "", "offset", "=", "self", ".", "scores", ".", "size", "(", "0", ")", "if", "self", ".", "scores", ".", "dim", "(", ")", ">", "0", "else", "0", "\n", "self", ".", "scores", ".", "resize_", "(", "offset", "+", "output", ".", "size", "(", "0", ")", ",", "output", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "targets", ".", "resize_", "(", "offset", "+", "target", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "scores", ".", "narrow", "(", "0", ",", "offset", ",", "output", ".", "size", "(", "0", ")", ")", ".", "copy_", "(", "output", ")", "\n", "self", ".", "targets", ".", "narrow", "(", "0", ",", "offset", ",", "target", ".", "size", "(", "0", ")", ")", ".", "copy_", "(", "target", ")", "\n", "\n", "if", "weight", "is", "not", "None", ":", "\n", "            ", "self", ".", "weights", ".", "resize_", "(", "offset", "+", "weight", ".", "size", "(", "0", ")", ")", "\n", "self", ".", "weights", ".", "narrow", "(", "0", ",", "offset", ",", "weight", ".", "size", "(", "0", ")", ")", ".", "copy_", "(", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.value": [[98, 137], ["torch.zeros", "torch.range().float", "range", "apmeter.APMeter.scores.numel", "apmeter.APMeter.scores.size", "apmeter.APMeter.weights.numel", "apmeter.APMeter.weights.new", "apmeter.APMeter.weights.new", "apmeter.APMeter.scores.size", "torch.sort", "truth.float().cumsum.div", "torch.range", "apmeter.APMeter.weights.size", "apmeter.APMeter.weights.size", "apmeter.APMeter.weights.numel", "apmeter.APMeter.cumsum", "apmeter.APMeter.weights.numel", "apmeter.APMeter.cumsum", "truth.float().cumsum", "precision[].sum", "max", "apmeter.APMeter.scores.size", "truth.float", "truth.sum", "truth.float", "truth.byte"], "methods", ["None"], ["", "", "def", "value", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the model's average precision for each class\n\n        Return:\n            ap (FloatTensor): 1xK tensor, with avg precision for each class k\n        \"\"\"", "\n", "\n", "if", "self", ".", "scores", ".", "numel", "(", ")", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "ap", "=", "torch", ".", "zeros", "(", "self", ".", "scores", ".", "size", "(", "1", ")", ")", "\n", "rg", "=", "torch", ".", "range", "(", "1", ",", "self", ".", "scores", ".", "size", "(", "0", ")", ")", ".", "float", "(", ")", "\n", "if", "self", ".", "weights", ".", "numel", "(", ")", ">", "0", ":", "\n", "            ", "weight", "=", "self", ".", "weights", ".", "new", "(", "self", ".", "weights", ".", "size", "(", ")", ")", "\n", "weighted_truth", "=", "self", ".", "weights", ".", "new", "(", "self", ".", "weights", ".", "size", "(", ")", ")", "\n", "\n", "# compute average precision for each class", "\n", "", "for", "k", "in", "range", "(", "self", ".", "scores", ".", "size", "(", "1", ")", ")", ":", "\n", "# sort scores", "\n", "            ", "scores", "=", "self", ".", "scores", "[", ":", ",", "k", "]", "\n", "targets", "=", "self", ".", "targets", "[", ":", ",", "k", "]", "\n", "_", ",", "sortind", "=", "torch", ".", "sort", "(", "scores", ",", "0", ",", "True", ")", "\n", "truth", "=", "targets", "[", "sortind", "]", "\n", "if", "self", ".", "weights", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "weight", "=", "self", ".", "weights", "[", "sortind", "]", "\n", "weighted_truth", "=", "truth", ".", "float", "(", ")", "*", "weight", "\n", "rg", "=", "weight", ".", "cumsum", "(", "0", ")", "\n", "\n", "# compute true positive sums", "\n", "", "if", "self", ".", "weights", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "tp", "=", "weighted_truth", ".", "cumsum", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "tp", "=", "truth", ".", "float", "(", ")", ".", "cumsum", "(", "0", ")", "\n", "\n", "# compute precision curve", "\n", "", "precision", "=", "tp", ".", "div", "(", "rg", ")", "\n", "\n", "# compute average precision", "\n", "ap", "[", "k", "]", "=", "precision", "[", "truth", ".", "byte", "(", ")", "]", ".", "sum", "(", ")", "/", "max", "(", "truth", ".", "sum", "(", ")", ",", "1", ")", "\n", "", "return", "ap", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.train_coarse_fineFEAT.run": [[59, 302], ["transforms.spatial_transforms.Compose", "transforms.spatial_transforms.Compose", "charades_coarse_fineFEAT.Charades", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "charades_coarse_fineFEAT.Charades", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "x3d_coarse.generate_model", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel.state_dict", "coarse_net.state_dict.update", "nn.DataParallel.load_state_dict", "nn.DataParallel.replace_logits", "nn.DataParallel.cuda", "torch.DataParallel", "print", "print", "nn.DataParallel.named_parameters", "torch.SGD", "torch.lr_scheduler.MultiStepLR", "torch.BCELoss", "torch.BCELoss", "apmeter.APMeter", "apmeter.APMeter", "open", "csv.writer", "len", "len", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel.load_state_dict", "optim.SGD.load_state_dict", "optim.lr_scheduler.MultiStepLR.load_state_dict", "print", "print", "transforms.spatial_transforms.MultiScaleRandomCropMultigrid", "transforms.spatial_transforms.RandomHorizontalFlip", "transforms.spatial_transforms.ToTensor", "transforms.spatial_transforms.Normalize", "transforms.spatial_transforms.CenterCropScaled", "transforms.spatial_transforms.ToTensor", "transforms.spatial_transforms.Normalize", "rw_params.append", "base_params.append", "pkbar.Pbar", "optim.SGD.zero_grad", "print", "enumerate", "nn.DataParallel.train", "torch.autograd.set_grad_enabled", "torch.autograd.set_grad_enabled", "torch.autograd.set_grad_enabled", "torch.autograd.set_grad_enabled", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "nn.DataParallel.train", "nn.DataParallel.module.aggregate_sub_bn_stats", "torch.autograd.set_grad_enabled", "torch.autograd.set_grad_enabled", "torch.autograd.set_grad_enabled", "torch.autograd.set_grad_enabled", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "pkbar.Pbar.update", "inputs.view.cuda", "labels.cuda.size", "labels.cuda.cuda", "masks.cuda.cuda", "feat_masks.cuda.cuda", "meta.cuda.cuda", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.sum().int", "torch.interpolate", "nn.BCELoss.", "criterion_class.item", "loc_loss.item", "loss.item", "open.close", "apmeter.APMeter.value().mean", "apmeter.APMeter.reset", "print", "optim.lr_scheduler.MultiStepLR.step", "str().zfill", "inputs.view.squeeze", "inputs.view.view", "feat[].cuda", "nn.DataParallel.", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "per_frame_logits.view.view", "torch.sigmoid", "nn.BCELoss.", "range", "range", "loss.backward", "train_coarse_fineFEAT.lr_warmup", "optim.SGD.step", "optim.SGD.zero_grad", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "temp_logit.append", "torch.sigmoid", "masks.cuda.unsqueeze", "masks.cuda.unsqueeze", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "apmeter.APMeter.add", "p1.transpose().detach().cpu().numpy", "range", "apmeter.APMeter.add", "apmeter.APMeter.value().mean", "apmeter.APMeter.reset", "print", "torch.save", "torch.save", "torch.save", "torch.save", "apmeter.APMeter.value", "str", "nn.DataParallel.", "torch.max", "torch.max", "torch.max", "torch.max", "[].transpose().detach().cpu().numpy", "[].transpose().cpu().numpy", "valid_t[].item", "list", "range", "csv.writer.writerow", "p1.transpose().detach().cpu().numpy", "l1.transpose().cpu().numpy", "nn.DataParallel.module.state_dict", "optim.SGD.state_dict", "optim.lr_scheduler.MultiStepLR.state_dict", "p1.transpose().detach().cpu", "len", "apmeter.APMeter.value", "min", "[].transpose().detach().cpu", "[].transpose().cpu", "valid_t[].item", "valid_t[].item", "str", "p1.transpose().detach().cpu", "l1.transpose().cpu", "str().zfill", "int", "int", "p1.transpose().detach", "[].transpose().detach", "[].transpose", "p1.transpose().detach", "l1.transpose", "str", "p1.transpose", "dur[].item", "[].transpose", "p1.transpose", "valid_t[].item", "valid_t[].item"], "function", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.generate_model", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.replace_logits", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.ResNet.aggregate_sub_bn_stats", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.reset", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.x3d_coarse.SwishEfficient.backward", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.train_coarse_fineFEAT.lr_warmup", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.add", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.add", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.reset", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.value", "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.apmeter.APMeter.value"], ["def", "run", "(", "init_lr", "=", "INIT_LR", ",", "warmup_steps", "=", "0", ",", "max_epochs", "=", "200", ",", "root", "=", "CHARADES_ROOT", ",", "train_split", "=", "CHARADES_ANNO", ",", "\n", "batch_size", "=", "BS", "*", "BS_UPSCALE", ",", "frames", "=", "80", "*", "4", ",", "fine_feat", "=", "FINE_FEAT_DIR", ")", ":", "\n", "\n", "    ", "feat_keys", "=", "[", "'layer1'", ",", "'layer2'", ",", "'layer3'", ",", "'layer4'", ",", "'conv5'", "]", "#, 'gx']", "\n", "feat_depth", "=", "{", "'layer1'", ":", "24", ",", "'layer2'", ":", "48", ",", "'layer3'", ":", "96", ",", "'layer4'", ":", "192", ",", "'conv5'", ":", "432", "}", "\n", "\n", "crop_size", "=", "{", "'S'", ":", "160", ",", "'M'", ":", "224", ",", "'XL'", ":", "312", "}", "[", "X3D_VERSION", "]", "\n", "resize_size", "=", "{", "'S'", ":", "[", "180.", ",", "225.", "]", ",", "'M'", ":", "[", "256.", ",", "320.", "]", ",", "'XL'", ":", "[", "360.", ",", "450.", "]", "}", "[", "X3D_VERSION", "]", "#[256.,320.]", "\n", "gamma_tau", "=", "{", "'S'", ":", "6", ",", "'M'", ":", "5", "*", "1", ",", "'XL'", ":", "5", "}", "[", "X3D_VERSION", "]", "# 5", "\n", "\n", "load_steps", "=", "st_steps", "=", "steps", "=", "0", "\n", "epochs", "=", "0", "\n", "num_steps_per_update", "=", "1", "# accum gradient", "\n", "cur_iterations", "=", "steps", "*", "num_steps_per_update", "\n", "iterations_per_epoch", "=", "CHARADES_TR_SIZE", "//", "batch_size", "\n", "val_batch_size", "=", "1", "#batch_size//4 # //8 for 10 crop with 4 gpus, //2 otherwise", "\n", "val_iterations_per_epoch", "=", "CHARADES_VAL_SIZE", "//", "val_batch_size", "\n", "max_steps", "=", "iterations_per_epoch", "*", "max_epochs", "\n", "\n", "\n", "train_spatial_transforms", "=", "Compose", "(", "[", "MultiScaleRandomCropMultigrid", "(", "[", "crop_size", "/", "i", "for", "i", "in", "resize_size", "]", ",", "crop_size", ")", ",", "\n", "RandomHorizontalFlip", "(", ")", ",", "\n", "ToTensor", "(", "255", ")", ",", "\n", "Normalize", "(", "CHARADES_MEAN", ",", "CHARADES_STD", ")", "]", ")", "\n", "val_spatial_transforms", "=", "Compose", "(", "[", "CenterCropScaled", "(", "crop_size", ")", ",", "\n", "ToTensor", "(", "255", ")", ",", "\n", "Normalize", "(", "CHARADES_MEAN", ",", "CHARADES_STD", ")", "]", ")", "\n", "\n", "dataset", "=", "Charades", "(", "train_split", ",", "'training'", ",", "root", ",", "fine_feat", ",", "feat_keys", ",", "train_spatial_transforms", ",", "\n", "task", "=", "'loc'", ",", "frames", "=", "frames", ",", "gamma_tau", "=", "gamma_tau", ",", "crops", "=", "1", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "8", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "val_dataset", "=", "Charades", "(", "train_split", ",", "'testing'", ",", "root", ",", "fine_feat", ",", "feat_keys", ",", "val_spatial_transforms", ",", "\n", "task", "=", "'loc'", ",", "frames", "=", "frames", ",", "gamma_tau", "=", "gamma_tau", ",", "crops", "=", "1", ")", "\n", "val_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "val_dataset", ",", "batch_size", "=", "val_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "8", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "collate_fn", ")", "\n", "\n", "\n", "dataloaders", "=", "{", "'train'", ":", "dataloader", ",", "'val'", ":", "val_dataloader", "}", "\n", "datasets", "=", "{", "'train'", ":", "dataset", ",", "'val'", ":", "val_dataset", "}", "\n", "print", "(", "'train'", ",", "len", "(", "datasets", "[", "'train'", "]", ")", ",", "'val'", ",", "len", "(", "datasets", "[", "'val'", "]", ")", ")", "\n", "print", "(", "'Total iterations:'", ",", "max_steps", ",", "'Total epochs:'", ",", "max_epochs", ")", "\n", "print", "(", "'datasets created'", ")", "\n", "\n", "# setup the model", "\n", "# ON 4 GPUS, 128/4, 32 CLIPS PER GPU, base_bn_splits=4 means BN calculated per 8xlong_cycle_multiplier clips", "\n", "\n", "coarse_net", "=", "x3d_coarse", ".", "generate_model", "(", "x3d_version", "=", "X3D_VERSION", ",", "n_classes", "=", "400", ",", "n_input_channels", "=", "3", ",", "\n", "feat_depth", "=", "feat_depth", ",", "task", "=", "'loc'", ",", "dropout", "=", "0.5", ",", "base_bn_splits", "=", "1", ",", "\n", "learnedMixing", "=", "True", ",", "isMixing", "=", "True", ",", "t_pool", "=", "'grid'", ")", "\n", "load_ckpt", "=", "torch", ".", "load", "(", "'models/x3d_multigrid_kinetics_fb_pretrained.pt'", ")", "\n", "#x3d.load_state_dict(load_ckpt['model_state_dict'])", "\n", "state", "=", "coarse_net", ".", "state_dict", "(", ")", "\n", "state", ".", "update", "(", "load_ckpt", "[", "'model_state_dict'", "]", ")", "\n", "coarse_net", ".", "load_state_dict", "(", "state", ")", "\n", "\n", "save_model", "=", "'models/coarse_fineFEAT_charades_'", "\n", "\n", "coarse_net", ".", "replace_logits", "(", "157", ")", "\n", "\n", "'''load_ckpt = torch.load('models/coarse_fineFEAT_charades_019000_SAVE.pt')\n    state = coarse_net.state_dict()\n    state.update(load_ckpt['model_state_dict'])\n    coarse_net.load_state_dict(state)'''", "\n", "\n", "if", "steps", ">", "0", ":", "\n", "        ", "load_ckpt", "=", "torch", ".", "load", "(", "'models/coarse_fineFEAT_charades_'", "+", "str", "(", "load_steps", ")", ".", "zfill", "(", "6", ")", "+", "'.pt'", ")", "\n", "coarse_net", ".", "load_state_dict", "(", "load_ckpt", "[", "'model_state_dict'", "]", ")", "\n", "\n", "", "coarse_net", ".", "cuda", "(", ")", "\n", "coarse_net", "=", "nn", ".", "DataParallel", "(", "coarse_net", ")", "\n", "print", "(", "'model loaded'", ")", "\n", "\n", "lr", "=", "init_lr", "\n", "print", "(", "'LR:%f'", "%", "lr", ")", "\n", "\n", "\n", "rw_params", "=", "[", "]", ";", "base_params", "=", "[", "]", ";", "\n", "for", "name", ",", "para", "in", "coarse_net", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "'rw'", "in", "name", "or", "'mix'", "in", "name", ":", "rw_params", ".", "append", "(", "para", ")", "\n", "else", ":", "base_params", ".", "append", "(", "para", ")", "\n", "", "optimizer", "=", "optim", ".", "SGD", "(", "[", "{", "'params'", ":", "base_params", "}", ",", "{", "'params'", ":", "rw_params", ",", "'lr'", ":", "lr", "*", "10", "}", "]", ",", "lr", "=", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "1e-5", ")", "\n", "\n", "lr_schedule", "=", "[", "15", ",", "25", ",", "35", "]", "\n", "lr_sched", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "lr_schedule", ",", "verbose", "=", "True", ")", "\n", "if", "steps", ">", "0", ":", "\n", "        ", "optimizer", ".", "load_state_dict", "(", "load_ckpt", "[", "'optimizer_state_dict'", "]", ")", "\n", "lr_sched", ".", "load_state_dict", "(", "load_ckpt", "[", "'scheduler_state_dict'", "]", ")", "\n", "\n", "", "criterion_class", "=", "nn", ".", "BCELoss", "(", "reduction", "=", "'mean'", ")", "\n", "criterion_loc", "=", "nn", ".", "BCELoss", "(", "reduction", "=", "'sum'", ")", "\n", "\n", "val_apm", "=", "APMeter", "(", ")", "\n", "tr_apm", "=", "APMeter", "(", ")", "\n", "write_file", "=", "open", "(", "'localize_corr_v1.csv'", ",", "'w'", ",", "newline", "=", "'\\n'", ")", "\n", "writer", "=", "csv", ".", "writer", "(", "write_file", ")", "\n", "\n", "while", "epochs", "<", "max_epochs", ":", "\n", "        ", "print", "(", "'Step {} Epoch {}'", ".", "format", "(", "steps", ",", "epochs", ")", ")", "\n", "print", "(", "'-'", "*", "10", ")", "\n", "\n", "# Each epoch has a training and validation phase", "\n", "for", "phase", "in", "2", "*", "[", "'train'", "]", "+", "[", "'val'", "]", ":", "#['val']:# for training --> 2*['train']+['val']:", "\n", "            ", "bar_st", "=", "iterations_per_epoch", "if", "phase", "==", "'train'", "else", "val_iterations_per_epoch", "\n", "bar", "=", "pkbar", ".", "Pbar", "(", "name", "=", "'update: '", ",", "target", "=", "bar_st", ")", "\n", "if", "phase", "==", "'train'", ":", "\n", "                ", "coarse_net", ".", "train", "(", "True", ")", "\n", "epochs", "+=", "1", "\n", "torch", ".", "autograd", ".", "set_grad_enabled", "(", "True", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "else", ":", "\n", "                ", "coarse_net", ".", "train", "(", "False", ")", "# Set model to evaluate mode", "\n", "# FOR EVAL AGGREGATE BN STATS", "\n", "_", "=", "coarse_net", ".", "module", ".", "aggregate_sub_bn_stats", "(", ")", "\n", "torch", ".", "autograd", ".", "set_grad_enabled", "(", "False", ")", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "tot_loss", "=", "0.0", "\n", "tot_loc_loss", "=", "0.0", "\n", "tot_cls_loss", "=", "0.0", "\n", "tot_dis_loss", "=", "0.0", "\n", "tot_acc", "=", "0.0", "\n", "tot_corr", "=", "0.0", "\n", "tot_dat", "=", "0.0", "\n", "num_iter", "=", "0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Iterate over data.", "\n", "print", "(", "phase", ")", "\n", "lines", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "dataloaders", "[", "phase", "]", ")", ":", "\n", "                ", "num_iter", "+=", "1", "\n", "bar", ".", "update", "(", "i", ")", "\n", "if", "phase", "==", "'train'", ":", "\n", "                    ", "inputs", ",", "labels", ",", "masks", ",", "feat", ",", "feat_masks", ",", "meta", ",", "name", ",", "dur", "=", "data", "\n", "inputs", "=", "inputs", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "inputs", ",", "labels", ",", "masks", ",", "feat", ",", "feat_masks", ",", "meta", ",", "name", ",", "dur", "=", "data", "\n", "b", ",", "n", ",", "c", ",", "t", ",", "h", ",", "w", "=", "inputs", ".", "shape", "\n", "inputs", "=", "inputs", ".", "view", "(", "b", "*", "n", ",", "c", ",", "t", ",", "h", ",", "w", ")", "\n", "if", "n", ">", "1", "and", "b", "!=", "val_batch_size", ":", "\n", "                        ", "continue", "\n", "\n", "\n", "", "", "inputs", "=", "inputs", ".", "cuda", "(", ")", "# B 3 T W H", "\n", "tl", "=", "labels", ".", "size", "(", "2", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "# B C TL", "\n", "masks", "=", "masks", ".", "cuda", "(", ")", "# B TL", "\n", "for", "k", "in", "feat_keys", ":", "\n", "                    ", "feat", "[", "k", "]", "=", "feat", "[", "k", "]", ".", "cuda", "(", ")", "\n", "", "feat_masks", "=", "feat_masks", ".", "cuda", "(", ")", "\n", "meta", "=", "meta", ".", "cuda", "(", ")", "\n", "valid_t", "=", "torch", ".", "sum", "(", "masks", ",", "dim", "=", "1", ")", ".", "int", "(", ")", "\n", "\n", "\n", "t_lim_inference", "=", "1000", "# if VAL data too large to fit into memory, split", "\n", "if", "phase", "==", "'train'", "or", "inputs", ".", "shape", "[", "2", "]", "<", "t_lim_inference", "+", "5", ":", "\n", "                    ", "per_frame_logits", "=", "coarse_net", "(", "[", "inputs", ",", "feat", ",", "feat_masks", ",", "i", ",", "meta", "]", ")", "# B C T", "\n", "", "else", ":", "\n", "                    ", "temp_logit", "=", "[", "]", "\n", "for", "t_ind", "in", "range", "(", "0", ",", "inputs", ".", "shape", "[", "2", "]", "//", "t_lim_inference", "+", "1", ")", ":", "\n", "                        ", "input_t_ind", "=", "inputs", "[", ":", ",", ":", ",", "t_ind", "*", "t_lim_inference", ":", "min", "(", "inputs", ".", "shape", "[", "2", "]", ",", "(", "t_ind", "+", "1", ")", "*", "t_lim_inference", ")", ",", ":", ",", ":", "]", "\n", "temp_logit", ".", "append", "(", "coarse_net", "(", "[", "input_t_ind", ",", "feat", ",", "feat_masks", ",", "i", ",", "meta", "]", ")", ")", "# B C T", "\n", "meta", "[", ":", ",", "0", "]", "+=", "t_lim_inference", "\n", "", "per_frame_logits", "=", "torch", ".", "cat", "(", "temp_logit", ",", "dim", "=", "2", ")", "\n", "\n", "", "per_frame_logits", "=", "F", ".", "interpolate", "(", "per_frame_logits", ",", "tl", ",", "mode", "=", "'linear'", ")", "\n", "\n", "if", "phase", "==", "'train'", ":", "\n", "                    ", "probs", "=", "F", ".", "sigmoid", "(", "per_frame_logits", ")", "*", "masks", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                    ", "per_frame_logits", "=", "per_frame_logits", ".", "view", "(", "b", ",", "n", ",", "-", "1", ",", "tl", ")", "\n", "probs", "=", "F", ".", "sigmoid", "(", "per_frame_logits", ")", "#* masks.unsqueeze(1)", "\n", "probs", "=", "torch", ".", "max", "(", "probs", ",", "dim", "=", "1", ")", "[", "0", "]", "*", "masks", ".", "unsqueeze", "(", "1", ")", "\n", "per_frame_logits", "=", "torch", ".", "max", "(", "per_frame_logits", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "", "cls_loss", "=", "criterion_class", "(", "torch", ".", "max", "(", "probs", ",", "dim", "=", "2", ")", "[", "0", "]", ",", "torch", ".", "max", "(", "labels", ",", "dim", "=", "2", ")", "[", "0", "]", ")", "\n", "tot_cls_loss", "+=", "cls_loss", ".", "item", "(", ")", "\n", "\n", "loc_loss", "=", "criterion_loc", "(", "probs", ",", "labels", ")", "/", "(", "torch", ".", "sum", "(", "masks", ")", "*", "labels", ".", "shape", "[", "1", "]", ")", "\n", "tot_loc_loss", "+=", "loc_loss", ".", "item", "(", ")", "#data[0]", "\n", "\n", "if", "phase", "==", "'train'", ":", "\n", "                    ", "for", "b", "in", "range", "(", "labels", ".", "shape", "[", "0", "]", ")", ":", "\n", "                        ", "tr_apm", ".", "add", "(", "probs", "[", "b", "]", "[", ":", ",", ":", "valid_t", "[", "b", "]", ".", "item", "(", ")", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "labels", "[", "b", "]", "[", ":", ",", ":", "valid_t", "[", "b", "]", ".", "item", "(", ")", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "for", "b", "in", "range", "(", "labels", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "                        ", "p1", "=", "probs", "[", "b", "]", "[", ":", ",", ":", "valid_t", "[", "b", "]", ".", "item", "(", ")", "]", "\n", "l1", "=", "labels", "[", "b", "]", "[", ":", ",", ":", "valid_t", "[", "b", "]", ".", "item", "(", ")", "]", "\n", "sc", "=", "valid_t", "[", "b", "]", ".", "item", "(", ")", "/", "25.", "#p1.shape[1]/25.", "\n", "p1", "=", "p1", "[", ":", ",", "1", ":", ":", "int", "(", "sc", ")", "]", "[", ":", ",", ":", "25", "]", "\n", "l1", "=", "l1", "[", ":", ",", "1", ":", ":", "int", "(", "sc", ")", "]", "[", ":", ",", ":", "25", "]", "#", "\n", "\n", "a", "=", "p1", ".", "transpose", "(", "0", ",", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# T C", "\n", "\n", "for", "i", "in", "range", "(", "a", ".", "shape", "[", "0", "]", ")", ":", "\n", "                            ", "st", "=", "''", "\n", "act", "=", "list", "(", "a", "[", "i", "]", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "act", ")", ")", ":", "\n", "                                ", "st", "+=", "str", "(", "act", "[", "j", "]", ")", "+", "' '", "\n", "", "st", "=", "st", "[", ":", "-", "1", "]", "\n", "writer", ".", "writerow", "(", "[", "name", "[", "0", "]", ",", "1", "+", "i", "*", "dur", "[", "b", "]", ".", "item", "(", ")", "/", "25.", ",", "st", "]", ")", "\n", "\n", "", "val_apm", ".", "add", "(", "p1", ".", "transpose", "(", "0", ",", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "l1", ".", "transpose", "(", "0", ",", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "\n", "\n", "", "", "loss", "=", "1", "*", "(", "cls_loss", "+", "loc_loss", ")", "/", "(", "2", "*", "num_steps_per_update", ")", "\n", "tot_loss", "+=", "loss", ".", "item", "(", ")", "#data[0]", "\n", "\n", "if", "phase", "==", "'train'", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "\n", "", "if", "num_iter", "==", "num_steps_per_update", "and", "phase", "==", "'train'", ":", "\n", "                    ", "lr_warmup", "(", "lr", ",", "steps", "-", "st_steps", ",", "warmup_steps", ",", "optimizer", ")", "# steps init_lr, USE ONLY AT THE START", "\n", "steps", "+=", "1", "\n", "num_iter", "=", "0", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "s_times", "=", "iterations_per_epoch", "//", "2", "#100*4", "\n", "if", "steps", "%", "s_times", "==", "0", ":", "\n", "                        ", "tr_map", "=", "tr_apm", ".", "value", "(", ")", ".", "mean", "(", ")", "\n", "tr_apm", ".", "reset", "(", ")", "\n", "print", "(", "' Epoch:{} {} steps: {} Loc Loss: {:.4f} Cls Loss: {:.4f} Tot Loss: {:.4f} mAP: {:.4f}'", ".", "format", "(", "epochs", ",", "phase", ",", "\n", "steps", ",", "tot_loc_loss", "/", "(", "s_times", "*", "num_steps_per_update", ")", ",", "tot_cls_loss", "/", "(", "s_times", "*", "num_steps_per_update", ")", ",", "tot_loss", "/", "s_times", ",", "tr_map", ")", ")", "#, tot_acc/(s_times*num_steps_per_update)))", "\n", "tot_loss", "=", "tot_loc_loss", "=", "tot_cls_loss", "=", "tot_dis_loss", "=", "tot_acc", "=", "tot_corr", "=", "tot_dat", "=", "0.", "\n", "", "if", "steps", "%", "(", "1000", ")", "==", "0", ":", "\n", "                        ", "ckpt", "=", "{", "'model_state_dict'", ":", "coarse_net", ".", "module", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler_state_dict'", ":", "lr_sched", ".", "state_dict", "(", ")", "}", "\n", "torch", ".", "save", "(", "ckpt", ",", "save_model", "+", "str", "(", "steps", ")", ".", "zfill", "(", "6", ")", "+", "'.pt'", ")", "\n", "", "", "", "if", "phase", "==", "'val'", ":", "\n", "                ", "write_file", ".", "close", "(", ")", "\n", "val_map", "=", "val_apm", ".", "value", "(", ")", ".", "mean", "(", ")", "\n", "val_apm", ".", "reset", "(", ")", "\n", "print", "(", "' Epoch:{} {} Loc Loss: {:.4f} Cls Loss: {:.4f} Tot Loss: {:.4f} mAP: {:.4f}'", ".", "format", "(", "epochs", ",", "phase", ",", "\n", "tot_loc_loss", "/", "num_iter", ",", "tot_cls_loss", "/", "num_iter", ",", "(", "tot_loss", "*", "num_steps_per_update", ")", "/", "num_iter", ",", "val_map", ")", ")", "#, tot_acc/num_iter))", "\n", "tot_loss", "=", "tot_loc_loss", "=", "tot_cls_loss", "=", "tot_dis_loss", "=", "tot_acc", "=", "tot_corr", "=", "tot_dat", "=", "0.", "\n", "lr_sched", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.None.train_coarse_fineFEAT.lr_warmup": [[304, 310], ["min", "float"], "function", ["None"], ["", "", "", "", "def", "lr_warmup", "(", "init_lr", ",", "cur_steps", ",", "warmup_steps", ",", "opt", ")", ":", "\n", "    ", "start_after", "=", "1", "\n", "if", "cur_steps", "<", "warmup_steps", "and", "cur_steps", ">", "start_after", ":", "\n", "        ", "lr_scale", "=", "min", "(", "1.", ",", "float", "(", "cur_steps", "+", "1", ")", "/", "warmup_steps", ")", "\n", "for", "pg", "in", "opt", ".", "param_groups", ":", "\n", "            ", "pg", "[", "'lr'", "]", "=", "lr_scale", "*", "init_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.Compose.__init__": [[24, 26], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.Compose.__call__": [[27, 31], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", "=", "t", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.Compose.randomize_parameters": [[32, 35], ["t.randomize_parameters"], "methods", ["home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.MultiScaleRandomCropMultigrid.randomize_parameters"], ["", "def", "randomize_parameters", "(", "self", ",", "c_size", "=", "0", ",", "index", "=", "0", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "t", ".", "randomize_parameters", "(", "c_size", ",", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.ToTensor.__init__": [[43, 45], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "norm_value", "=", "255", ")", ":", "\n", "        ", "self", ".", "norm_value", "=", "norm_value", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.ToTensor.__call__": [[46, 88], ["isinstance", "torch.ByteTensor.view", "torch.ByteTensor.transpose().transpose().contiguous", "isinstance", "torch.from_numpy", "torch.ByteTensor.float().div", "isinstance", "numpy.zeros", "pic.copyto", "torch.from_numpy", "torch.from_numpy", "torch.ByteTensor.float().div", "pic.transpose", "numpy.array", "torch.from_numpy", "torch.ByteTensor", "len", "torch.ByteTensor.transpose().transpose", "torch.ByteTensor.float", "numpy.array", "torch.ByteStorage.from_buffer", "torch.ByteTensor.float", "pic.tobytes", "torch.ByteTensor.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pic", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pic (PIL.Image or numpy.ndarray): Image to be converted to tensor.\n        Returns:\n            Tensor: Converted image.\n        \"\"\"", "\n", "\n", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "# backward compatibility", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "self", ".", "norm_value", ")", "\n", "\n", "", "if", "accimage", "is", "not", "None", "and", "isinstance", "(", "pic", ",", "accimage", ".", "Image", ")", ":", "\n", "            ", "nppic", "=", "np", ".", "zeros", "(", "\n", "[", "pic", ".", "channels", ",", "pic", ".", "height", ",", "pic", ".", "width", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pic", ".", "copyto", "(", "nppic", ")", "\n", "return", "torch", ".", "from_numpy", "(", "nppic", ")", "\n", "\n", "# handle PIL Image", "\n", "", "if", "pic", ".", "mode", "==", "'I'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int16", ",", "copy", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "# PIL image mode: 1, L, P, I, F, RGB, YCbCr, RGBA, CMYK", "\n", "", "if", "pic", ".", "mode", "==", "'YCbCr'", ":", "\n", "            ", "nchannel", "=", "3", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "nchannel", "=", "1", "\n", "", "else", ":", "\n", "            ", "nchannel", "=", "len", "(", "pic", ".", "mode", ")", "\n", "", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "isinstance", "(", "img", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "            ", "return", "img", ".", "float", "(", ")", ".", "div", "(", "self", ".", "norm_value", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.ToTensor.randomize_parameters": [[89, 91], ["None"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ",", "c_size", "=", "0", ",", "index", "=", "0", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.Normalize.__init__": [[104, 107], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.Normalize.__call__": [[108, 119], ["zip", "t.sub_().div_", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "# TODO: make efficient", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.Normalize.randomize_parameters": [[120, 122], ["None"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ",", "c_size", "=", "0", ",", "index", "=", "0", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.Scale.__init__": [[136, 142], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "assert", "isinstance", "(", "size", ",", "\n", "int", ")", "or", "(", "isinstance", "(", "size", ",", "collections", ".", "Iterable", ")", "and", "\n", "len", "(", "size", ")", "==", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.Scale.__call__": [[143, 164], ["isinstance", "img.resize", "int", "img.resize", "int", "img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be scaled.\n        Returns:\n            PIL.Image: Rescaled image.\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "size", ",", "int", ")", ":", "\n", "            ", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", "<=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "                ", "return", "img", "\n", "", "if", "w", "<", "h", ":", "\n", "                ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "else", ":", "\n", "                ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.Scale.randomize_parameters": [[165, 167], ["None"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ",", "c_size", "=", "0", ",", "index", "=", "0", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.CenterCrop.__init__": [[177, 182], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.CenterCrop.__call__": [[183, 195], ["int", "int", "img.crop", "round", "round"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.CenterCrop.randomize_parameters": [[196, 198], ["None"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ",", "c_size", "=", "0", ",", "index", "=", "0", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.CenterCropScaled.__init__": [[209, 215], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.CenterCropScaled.__call__": [[216, 231], ["min", "int", "int", "img.crop.crop.crop", "img.crop.crop.resize", "round", "round"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "crop_size", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "crop_size", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "crop_size", ")", "/", "2.", ")", ")", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "crop_size", ",", "y1", "+", "crop_size", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.CenterCropScaled.randomize_parameters": [[232, 234], ["None"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ",", "c_size", "=", "0", ",", "index", "=", "0", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.CornerCrop.__init__": [[282, 291], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "crop_position", "=", "None", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "if", "crop_position", "is", "None", ":", "\n", "            ", "self", ".", "randomize", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "randomize", "=", "False", "\n", "", "self", ".", "crop_position", "=", "crop_position", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "self", ".", "crop_positions", "=", "[", "'c'", ",", "'tl'", ",", "'tr'", ",", "'bl'", ",", "'br'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.CornerCrop.__call__": [[292, 329], ["min", "img.crop.crop.crop", "img.crop.crop.resize", "int", "int", "round", "round", "int", "int"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "crop_size", "=", "self", ".", "size", "\n", "\n", "crop_size", "=", "min", "(", "img", ".", "size", "[", "0", "]", "-", "28", ",", "img", ".", "size", "[", "1", "]", "-", "28", ")", "\n", "\n", "if", "self", ".", "crop_position", "==", "'c'", ":", "\n", "            ", "th", ",", "tw", "=", "(", "crop_size", ",", "crop_size", ")", "\n", "x1", "=", "int", "(", "round", "(", "(", "image_width", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "image_height", "-", "th", ")", "/", "2.", ")", ")", "\n", "x2", "=", "x1", "+", "tw", "\n", "y2", "=", "y1", "+", "th", "\n", "", "elif", "self", ".", "crop_position", "==", "'tl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "x2", "=", "crop_size", "\n", "y2", "=", "crop_size", "\n", "", "elif", "self", ".", "crop_position", "==", "'tr'", ":", "\n", "            ", "x1", "=", "image_width", "-", "crop_size", "\n", "y1", "=", "0", "\n", "x2", "=", "image_width", "\n", "y2", "=", "crop_size", "\n", "", "elif", "self", ".", "crop_position", "==", "'bl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "image_height", "-", "crop_size", "\n", "x2", "=", "crop_size", "\n", "y2", "=", "image_height", "\n", "", "elif", "self", ".", "crop_position", "==", "'br'", ":", "\n", "            ", "x1", "=", "image_width", "-", "crop_size", "\n", "y1", "=", "image_height", "-", "crop_size", "\n", "x2", "=", "image_width", "\n", "y2", "=", "image_height", "\n", "\n", "", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "int", "(", "self", ".", "size", ")", ",", "int", "(", "self", ".", "size", ")", ")", ",", "self", ".", "interpolation", ")", "\n", "#return img", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.CornerCrop.randomize_parameters": [[331, 337], ["None"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ",", "c_size", "=", "0", ",", "index", "=", "0", ")", ":", "\n", "        ", "self", ".", "crop_position", "=", "self", ".", "crop_positions", "[", "index", "]", "\n", "'''if self.randomize:\n            self.crop_position = self.crop_positions[random.randint(\n                0,\n                len(self.crop_positions) - 1)]'''", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.RandomHorizontalFlip.__call__": [[342, 355], ["isinstance", "numpy.fliplr().copy", "img.transpose", "numpy.fliplr"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be flipped.\n        Returns:\n            PIL.Image: Randomly flipped image.\n        \"\"\"", "\n", "if", "self", ".", "p", "<", "0.5", ":", "\n", "            ", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "return", "np", ".", "fliplr", "(", "img", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.RandomHorizontalFlip.randomize_parameters": [[356, 358], ["random.random"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ",", "c_size", "=", "0", ",", "index", "=", "0", ")", ":", "\n", "        ", "self", ".", "p", "=", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.RandomVerticalFlip.__call__": [[363, 376], ["isinstance", "numpy.flipud().copy", "img.transpose", "numpy.flipud"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be flipped.\n        Returns:\n            PIL.Image: Randomly flipped image.\n        \"\"\"", "\n", "if", "self", ".", "p", "<", "0.5", ":", "\n", "            ", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "return", "np", ".", "flipud", "(", "img", ")", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_TOP_BOTTOM", ")", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.RandomVerticalFlip.randomize_parameters": [[377, 379], ["random.random"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ",", "c_size", "=", "0", ",", "index", "=", "0", ")", ":", "\n", "        ", "self", ".", "p", "=", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.MultiScaleCornerCrop.__init__": [[392, 402], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "scales", ",", "\n", "size", ",", "\n", "interpolation", "=", "Image", ".", "BILINEAR", ",", "\n", "crop_positions", "=", "[", "'c'", ",", "'tl'", ",", "'tr'", ",", "'bl'", ",", "'br'", "]", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n", "self", ".", "crop_positions", "=", "crop_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.MultiScaleCornerCrop.__call__": [[403, 442], ["min", "int", "img.crop.crop.crop", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "min_length", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "crop_size", "=", "int", "(", "min_length", "*", "self", ".", "scale", ")", "\n", "\n", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "if", "self", ".", "crop_position", "==", "'c'", ":", "\n", "            ", "center_x", "=", "image_width", "//", "2", "\n", "center_y", "=", "image_height", "//", "2", "\n", "box_half", "=", "crop_size", "//", "2", "\n", "x1", "=", "center_x", "-", "box_half", "\n", "y1", "=", "center_y", "-", "box_half", "\n", "x2", "=", "center_x", "+", "box_half", "\n", "y2", "=", "center_y", "+", "box_half", "\n", "", "elif", "self", ".", "crop_position", "==", "'tl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "x2", "=", "crop_size", "\n", "y2", "=", "crop_size", "\n", "", "elif", "self", ".", "crop_position", "==", "'tr'", ":", "\n", "            ", "x1", "=", "image_width", "-", "crop_size", "\n", "y1", "=", "0", "\n", "x2", "=", "image_width", "\n", "y2", "=", "crop_size", "\n", "", "elif", "self", ".", "crop_position", "==", "'bl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "image_height", "-", "crop_size", "\n", "x2", "=", "crop_size", "\n", "y2", "=", "image_height", "\n", "", "elif", "self", ".", "crop_position", "==", "'br'", ":", "\n", "            ", "x1", "=", "image_width", "-", "crop_size", "\n", "y1", "=", "image_height", "-", "crop_size", "\n", "x2", "=", "image_width", "\n", "y2", "=", "image_height", "\n", "\n", "", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.MultiScaleCornerCrop.randomize_parameters": [[443, 448], ["random.randint", "random.randint", "len", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ",", "c_size", "=", "0", ",", "index", "=", "0", ")", ":", "\n", "        ", "self", ".", "scale", "=", "self", ".", "scales", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "self", ".", "crop_position", "=", "self", ".", "crop_positions", "[", "random", ".", "randint", "(", "\n", "0", ",", "\n", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.MultiScaleRandomCrop.__init__": [[452, 456], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scales", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.MultiScaleRandomCrop.__call__": [[457, 473], ["min", "int", "img.crop.crop.crop", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "min_length", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "crop_size", "=", "int", "(", "min_length", "*", "self", ".", "scale", ")", "\n", "\n", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "x1", "=", "self", ".", "tl_x", "*", "(", "image_width", "-", "crop_size", ")", "\n", "y1", "=", "self", ".", "tl_y", "*", "(", "image_height", "-", "crop_size", ")", "\n", "x2", "=", "x1", "+", "crop_size", "\n", "y2", "=", "y1", "+", "crop_size", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.MultiScaleRandomCrop.randomize_parameters": [[474, 478], ["random.random", "random.random", "random.randint", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ",", "c_size", "=", "0", ",", "index", "=", "0", ")", ":", "\n", "        ", "self", ".", "scale", "=", "self", ".", "scales", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "self", ".", "tl_x", "=", "random", ".", "random", "(", ")", "\n", "self", ".", "tl_y", "=", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.MultiScaleRandomCropMultigrid.__init__": [[482, 487], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scales", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "self", ".", "init_size", "=", "size", "\n", "self", ".", "size", "=", "self", ".", "init_size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.MultiScaleRandomCropMultigrid.__call__": [[488, 504], ["min", "int", "int", "int", "img.crop.crop.crop", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "min_length", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "crop_size", "=", "int", "(", "min_length", "*", "self", ".", "scale", ")", "\n", "\n", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "x1", "=", "int", "(", "self", ".", "tl_x", "*", "(", "image_width", "-", "crop_size", ")", ")", "\n", "y1", "=", "int", "(", "self", ".", "tl_y", "*", "(", "image_height", "-", "crop_size", ")", ")", "\n", "x2", "=", "x1", "+", "crop_size", "\n", "y2", "=", "y1", "+", "crop_size", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.spatial_transforms.MultiScaleRandomCropMultigrid.randomize_parameters": [[505, 510], ["random.random", "random.random", "random.randint", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ",", "c_size", ",", "index", "=", "0", ")", ":", "\n", "        ", "self", ".", "size", "=", "c_size", "\n", "self", ".", "scale", "=", "self", ".", "scales", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "self", ".", "tl_x", "=", "random", ".", "random", "(", ")", "\n", "self", ".", "tl_y", "=", "random", ".", "random", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.temporal_transforms.LoopPadding.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.temporal_transforms.LoopPadding.__call__": [[11, 20], ["out.append", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "out", "=", "frame_indices", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.temporal_transforms.TemporalBeginCrop.__init__": [[32, 34], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.temporal_transforms.TemporalBeginCrop.__call__": [[35, 44], ["out.append", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "out", "=", "frame_indices", "[", ":", "self", ".", "size", "]", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.temporal_transforms.TemporalCenterCrop.__init__": [[56, 58], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.temporal_transforms.TemporalCenterCrop.__call__": [[59, 79], ["max", "min", "len", "len", "out.append", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_indices (list): frame indices to be cropped.\n        Returns:\n            list: Cropped frame indices.\n        \"\"\"", "\n", "\n", "center_index", "=", "len", "(", "frame_indices", ")", "//", "2", "\n", "begin_index", "=", "max", "(", "0", ",", "center_index", "-", "(", "self", ".", "size", "//", "2", ")", ")", "\n", "end_index", "=", "min", "(", "begin_index", "+", "self", ".", "size", ",", "len", "(", "frame_indices", ")", ")", "\n", "\n", "out", "=", "frame_indices", "[", "begin_index", ":", "end_index", "]", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.temporal_transforms.TemporalRandomCrop.__init__": [[91, 94], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "gamma_tau", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "self", ".", "gamma_tau", "=", "gamma_tau", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.temporal_transforms.TemporalRandomCrop.__call__": [[95, 120], ["max", "random.randint", "min", "len", "out.append", "len", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ",", "t_stride", "=", "1", ",", "size", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_indices (list): frame indices to be cropped.\n        Returns:\n            list: Cropped frame indices.\n        \"\"\"", "\n", "trunc", "=", "size", "if", "size", "is", "not", "None", "else", "self", ".", "size", "# for multigrid", "\n", "\n", "rand_end", "=", "max", "(", "0", ",", "len", "(", "frame_indices", ")", "-", "self", ".", "size", "-", "1", ")", "\n", "begin_index", "=", "random", ".", "randint", "(", "0", ",", "rand_end", ")", "\n", "\n", "end_index", "=", "min", "(", "begin_index", "+", "self", ".", "size", ",", "len", "(", "frame_indices", ")", ")", "\n", "\n", "out", "=", "frame_indices", "[", "begin_index", ":", "end_index", ":", "t_stride", "*", "self", ".", "gamma_tau", "]", "\n", "#print(end_index-begin_index, t_stride, self.gamma_tau, len(out), trunc, trunc//self.gamma_tau)", "\n", "out", "=", "out", "[", ":", "trunc", "//", "self", ".", "gamma_tau", "]", "\n", "#print(self.gamma_tau, len(out))", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "trunc", "//", "self", ".", "gamma_tau", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.Compose.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.Compose.__call__": [[11, 16], ["dst.append", "t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "dst", "=", "[", "]", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "dst", ".", "append", "(", "t", "(", "target", ")", ")", "\n", "", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.ClassLabel.__call__": [[20, 22], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "return", "target", "[", "'label'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kkahatapitiya_Coarse-Fine-Networks.transforms.target_transforms.VideoID.__call__": [[26, 28], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "return", "target", "[", "'video_id'", "]", "\n", "", "", ""]]}