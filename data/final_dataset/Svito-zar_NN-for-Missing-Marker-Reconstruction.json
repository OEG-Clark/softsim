{"home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder.__init__": [[24, 108], ["AE.AutoEncoder.__init__", "sess.graph.as_default", "len", "tensorflow.variable_scope", "range", "tensorflow.placeholder", "FlatAE.FlatAutoEncoder.binary_random_matrix_generator", "utils.data.add_noise", "FlatAE.FlatAutoEncoder.construct_graph", "utils.data.loss_reconstruction", "tensorflow.add_to_collection", "tensorflow.add_n", "FlatAE.FlatAutoEncoder.construct_graph", "utils.data.loss_reconstruction", "FlatAE.FlatAutoEncoder._create_variables", "tensorflow.contrib.rnn.MultiRNNCell", "tensorflow.get_collection", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.contrib.rnn.DropoutWrapper", "FlatAE.FlatAutoEncoder.__init__.lstm_cell"], "methods", ["home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.DataSet.__init__", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder.binary_random_matrix_generator", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.add_noise", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder.construct_graph", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.loss_reconstruction", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder.construct_graph", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.loss_reconstruction", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder._create_variables"], ["def", "__init__", "(", "self", ",", "shape", ",", "sess", ",", "batch_size", ",", "variance_coef", ",", "data_info", ")", ":", "\n", "        ", "\"\"\"Autoencoder initializer\n\n        Args:\n          shape:          list of ints specifying\n                          num input, hidden1 units,...hidden_n units, num outputs\n          sess:           tensorflow session object to use\n          batch_size:     batch size\n          varience_coef:  multiplicative factor for the variance of noise wrt the variance of data\n          data_info:      key information about the dataset\n        \"\"\"", "\n", "\n", "AutoEncoder", ".", "__init__", "(", "self", ",", "len", "(", "shape", ")", "-", "2", ",", "batch_size", ",", "FLAGS", ".", "chunk_length", ",", "sess", ",", "data_info", ")", "\n", "\n", "self", ".", "__shape", "=", "shape", "# [input_dim,hidden1_dim,...,hidden_n_dim,output_dim]", "\n", "\n", "self", ".", "__variables", "=", "{", "}", "\n", "\n", "\n", "with", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"AE_Variables\"", ")", ":", "\n", "\n", "##############        SETUP VARIABLES       #####################################", "\n", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "num_hidden_layers", "+", "1", ")", ":", "# go over all layers", "\n", "\n", "# create variables for matrices and biases for each layer", "\n", "                    ", "self", ".", "_create_variables", "(", "i", ",", "FLAGS", ".", "Weight_decay", ")", "\n", "\n", "", "if", "FLAGS", ".", "reccurent", ":", "\n", "\n", "# Define LSTM cell", "\n", "                    ", "lstm_sizes", "=", "self", ".", "__shape", "[", "1", ":", "]", "\n", "\n", "def", "lstm_cell", "(", "size", ")", ":", "\n", "                        ", "basic_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n", "size", ",", "forget_bias", "=", "1.0", ",", "state_is_tuple", "=", "True", ")", "\n", "# Apply dropout on the hidden layers", "\n", "if", "size", "!=", "self", ".", "__shape", "[", "-", "1", "]", ":", "\n", "                            ", "hidden_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "DropoutWrapper", "(", "cell", "=", "basic_cell", ",", "output_keep_prob", "=", "FLAGS", ".", "dropout", ")", "\n", "return", "hidden_cell", "\n", "", "else", ":", "\n", "                            ", "return", "basic_cell", "\n", "\n", "", "", "self", ".", "_RNN_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "\n", "[", "lstm_cell", "(", "sz", ")", "for", "sz", "in", "lstm_sizes", "]", ",", "state_is_tuple", "=", "True", ")", "\n", "\n", "##############        DEFINE THE NETWORK     ###################################", "\n", "\n", "# Declare a mask for simulating missing_values", "\n", "", "self", ".", "_mask", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "FLAGS", ".", "batch_size", ",", "FLAGS", ".", "chunk_length", ",", "\n", "FLAGS", ".", "frame_size", "*", "\n", "FLAGS", ".", "amount_of_frames_as_input", "]", ",", "\n", "name", "=", "'Mask_of_mis_markers'", ")", "\n", "self", ".", "_mask_generator", "=", "self", ".", "binary_random_matrix_generator", "(", "FLAGS", ".", "missing_rate", ")", "\n", "\n", "# Reminder: we use Denoising AE", "\n", "# (http://www.jmlr.org/papers/volume11/vincent10a/vincent10a.pdf)", "\n", "\n", "''' 1 - Setup network for TRAINing '''", "\n", "# Input noisy data and reconstruct the original one", "\n", "self", ".", "_input_", "=", "add_noise", "(", "self", ".", "_train_batch", ",", "variance_coef", ",", "data_info", ".", "_data_sigma", ")", "\n", "self", ".", "_target_", "=", "self", ".", "_train_batch", "\n", "\n", "# Define output and loss for the training data", "\n", "self", ".", "_output", "=", "self", ".", "construct_graph", "(", "self", ".", "_input_", ",", "FLAGS", ".", "dropout", ")", "\n", "self", ".", "_reconstruction_loss", "=", "loss_reconstruction", "(", "self", ".", "_output", ",", "self", ".", "_target_", ",", "\n", "self", ".", "max_val", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "self", ".", "_reconstruction_loss", ")", "\n", "self", ".", "_loss", "=", "tf", ".", "add_n", "(", "tf", ".", "get_collection", "(", "'losses'", ")", ",", "name", "=", "'total_loss'", ")", "\n", "\n", "''' 2 - Setup network for TESTing '''", "\n", "self", ".", "_valid_input_", "=", "self", ".", "_valid_batch", "\n", "self", ".", "_valid_target_", "=", "self", ".", "_valid_batch", "\n", "\n", "# Define output", "\n", "self", ".", "_valid_output", "=", "self", ".", "construct_graph", "(", "self", ".", "_valid_input_", ",", "1", ")", "\n", "\n", "# Define loss", "\n", "self", ".", "_valid_loss", "=", "loss_reconstruction", "(", "self", ".", "_valid_output", ",", "self", ".", "_valid_target_", ",", "\n", "self", ".", "max_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder.construct_graph": [[109, 151], ["AE.simulate_missing_markets", "range", "tensorflow.reshape", "tensorflow.nn.dynamic_rnn", "tensorflow.get_variable_scope().reuse_variables", "tensorflow.nn.dropout", "FlatAE.FlatAutoEncoder._w", "FlatAE.FlatAutoEncoder._b", "FlatAE.FlatAutoEncoder._activate", "tensorflow.get_variable_scope"], "methods", ["home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.simulate_missing_markets", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder._w", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder._b", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder._activate"], ["", "", "", "def", "construct_graph", "(", "self", ",", "input_seq_pl", ",", "dropout", ")", ":", "\n", "\n", "        ", "\"\"\" Contruct a tensofrlow graph for the network\n\n        Args:\n          input_seq_pl:     tf placeholder for ae input data [batch_size, sequence_length, DoF]\n          dropout:          how much of the input neurons will be activated, value in range [0,1]\n        Returns:\n          Tensor of output\n        \"\"\"", "\n", "\n", "network_input", "=", "simulate_missing_markets", "(", "input_seq_pl", ",", "self", ".", "_mask", ",", "self", ".", "default_value", ")", "\n", "\n", "if", "FLAGS", ".", "reccurent", "is", "False", ":", "\n", "            ", "last_output", "=", "network_input", "[", ":", ",", "0", ",", ":", "]", "\n", "\n", "numb_layers", "=", "self", ".", "num_hidden_layers", "+", "1", "\n", "\n", "# Pass through the network", "\n", "for", "i", "in", "range", "(", "numb_layers", ")", ":", "\n", "# First - Apply Dropout", "\n", "                ", "last_output", "=", "tf", ".", "nn", ".", "dropout", "(", "last_output", ",", "dropout", ")", "\n", "\n", "w", "=", "self", ".", "_w", "(", "i", "+", "1", ")", "\n", "b", "=", "self", ".", "_b", "(", "i", "+", "1", ")", "\n", "\n", "last_output", "=", "self", ".", "_activate", "(", "last_output", ",", "w", ",", "b", ")", "\n", "\n", "", "output", "=", "tf", ".", "reshape", "(", "last_output", ",", "[", "self", ".", "batch_size", ",", "1", ",", "\n", "FLAGS", ".", "frame_size", "*", "FLAGS", ".", "amount_of_frames_as_input", "]", ")", "\n", "\n", "", "else", ":", "\n", "            ", "output", ",", "last_states", "=", "tf", ".", "nn", ".", "dynamic_rnn", "(", "\n", "cell", "=", "self", ".", "_RNN_cell", ",", "\n", "dtype", "=", "tf", ".", "float32", ",", "\n", "inputs", "=", "network_input", ")", "\n", "\n", "# Reuse variables", "\n", "# so that we can use the same LSTM both for training and testing", "\n", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder._w": [[154, 156], ["FlatAE.FlatAutoEncoder._weights_str.format"], "methods", ["None"], ["", "def", "_w", "(", "self", ",", "n", ",", "suffix", "=", "\"\"", ")", ":", "\n", "        ", "return", "self", "[", "self", ".", "_weights_str", ".", "format", "(", "n", ")", "+", "suffix", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder._b": [[157, 159], ["FlatAE.FlatAutoEncoder._biases_str.format"], "methods", ["None"], ["", "def", "_b", "(", "self", ",", "n", ",", "suffix", "=", "\"\"", ")", ":", "\n", "        ", "return", "self", "[", "self", ".", "_biases_str", ".", "format", "(", "n", ")", "+", "suffix", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder.shape": [[160, 163], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__shape", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder._activate": [[164, 168], ["tensorflow.tanh", "tensorflow.nn.bias_add", "tensorflow.matmul"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_activate", "(", "x", ",", "w", ",", "b", ",", "transpose_w", "=", "False", ")", ":", "\n", "        ", "y", "=", "tf", ".", "tanh", "(", "tf", ".", "nn", ".", "bias_add", "(", "tf", ".", "matmul", "(", "x", ",", "w", ",", "transpose_b", "=", "transpose_w", ")", ",", "b", ")", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder.__getitem__": [[169, 182], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"Get autoencoder tf variable\n\n        Returns the specified variable created by this object.\n        Names are weights#, biases#, biases#_out, weights#_fixed,\n        biases#_fixed.\n\n        Args:\n         item: string, variables internal name\n        Returns:\n         Tensorflow variable\n        \"\"\"", "\n", "return", "self", ".", "__variables", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder.__setitem__": [[183, 195], ["None"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "\"\"\"Store a tensorflow variable\n\n        NOTE: Don't call this explicitly. It should\n        be used only internally when setting up\n        variables.\n\n        Args:\n          key: string, name of variable\n          value: tensorflow variable\n        \"\"\"", "\n", "self", ".", "__variables", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder._create_variables": [[196, 251], ["tensorflow.multiply", "FlatAE.FlatAutoEncoder._weights_str.format", "tensorflow.get_variable", "tensorflow.summary.histogram", "FlatAE.FlatAutoEncoder._biases_str.format", "tensorflow.get_variable", "tensorflow.sqrt", "tensorflow.multiply", "tensorflow.add_to_collection", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.zeros", "tensorflow.get_variable", "tensorflow.random_uniform", "print", "tensorflow.nn.l2_loss", "tensorflow.zeros", "FlatAE.FlatAutoEncoder._biases_str.format", "tensorflow.random_uniform", "tensorflow.zeros", "str"], "methods", ["None"], ["", "def", "_create_variables", "(", "self", ",", "i", ",", "wd", ")", ":", "\n", "        ", "\"\"\"Helper to create an initialized Variable with weight decay.\n        Note that the Variable is initialized with a truncated normal distribution.\n        A weight decay is added only if 'wd' is specified.\n        If 'wd' is None, weight decay is not added for this Variable.\n\n        This function was taken from the web\n\n        Args:\n          i: number of hidden layer\n          wd: add L2Loss weight decay multiplied by this float.\n        Returns:\n          Nothing\n        \"\"\"", "\n", "\n", "# Initialize Train weights", "\n", "w_shape", "=", "(", "self", ".", "__shape", "[", "i", "]", ",", "self", ".", "__shape", "[", "i", "+", "1", "]", ")", "\n", "a", "=", "tf", ".", "multiply", "(", "2.0", ",", "tf", ".", "sqrt", "(", "6.0", "/", "(", "w_shape", "[", "0", "]", "+", "w_shape", "[", "1", "]", ")", ")", ")", "\n", "name_w", "=", "self", ".", "_weights_str", ".", "format", "(", "i", "+", "1", ")", "\n", "self", "[", "name_w", "]", "=", "tf", ".", "get_variable", "(", "name_w", ",", "\n", "initializer", "=", "tf", ".", "random_uniform", "(", "w_shape", ",", "-", "1", "*", "a", ",", "a", ")", ")", "\n", "\n", "# Add weight to the loss function for weight decay", "\n", "if", "wd", "is", "not", "None", "and", "FLAGS", ".", "reccurent", "==", "False", ":", "\n", "\n", "            ", "if", "i", "==", "1", ":", "\n", "                ", "print", "(", "'We apply weight decay'", ")", "\n", "\n", "", "weight_decay", "=", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "l2_loss", "(", "self", "[", "name_w", "]", ")", ",", "wd", ",", "name", "=", "'w_'", "+", "str", "(", "i", ")", "+", "'_loss'", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "weight_decay", ")", "\n", "\n", "# Add the histogram summary", "\n", "", "tf", ".", "summary", ".", "histogram", "(", "name_w", ",", "self", "[", "name_w", "]", ")", "\n", "\n", "# Initialize Train biases", "\n", "name_b", "=", "self", ".", "_biases_str", ".", "format", "(", "i", "+", "1", ")", "\n", "b_shape", "=", "(", "self", ".", "__shape", "[", "i", "+", "1", "]", ",", ")", "\n", "self", "[", "name_b", "]", "=", "tf", ".", "get_variable", "(", "name_b", ",", "initializer", "=", "tf", ".", "zeros", "(", "b_shape", ")", ")", "\n", "\n", "if", "i", "<", "self", ".", "num_hidden_layers", ":", "\n", "# Hidden layer fixed weights", "\n", "# which are used after pretraining before fine-tuning", "\n", "            ", "self", "[", "name_w", "+", "\"_fixed\"", "]", "=", "tf", ".", "get_variable", "(", "name", "=", "name_w", "+", "\"_fixed\"", ",", "initializer", "=", "tf", ".", "random_uniform", "(", "w_shape", ",", "-", "1", "*", "a", ",", "a", ")", ",", "\n", "trainable", "=", "False", ")", "\n", "# Hidden layer fixed biases", "\n", "self", "[", "name_b", "+", "\"_fixed\"", "]", "=", "tf", ".", "get_variable", "(", "name_b", "+", "\"_fixed\"", ",", "initializer", "=", "tf", ".", "zeros", "(", "b_shape", ")", ",", "trainable", "=", "False", ")", "\n", "\n", "# Pre-training output training biases", "\n", "name_b_out", "=", "self", ".", "_biases_str", ".", "format", "(", "i", "+", "1", ")", "+", "\"_out\"", "\n", "b_shape", "=", "(", "self", ".", "__shape", "[", "i", "]", ",", ")", "\n", "b_init", "=", "tf", ".", "zeros", "(", "b_shape", ")", "\n", "self", "[", "name_b_out", "]", "=", "tf", ".", "get_variable", "(", "name", "=", "name_b_out", ",", "initializer", "=", "b_init", ",", "\n", "trainable", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder.run_less_layers": [[252, 285], ["range", "FlatAE.FlatAutoEncoder._activate", "FlatAE.FlatAutoEncoder._activate", "FlatAE.FlatAutoEncoder._w", "FlatAE.FlatAutoEncoder._b", "FlatAE.FlatAutoEncoder._activate", "FlatAE.FlatAutoEncoder._w", "FlatAE.FlatAutoEncoder._b", "FlatAE.FlatAutoEncoder._w", "FlatAE.FlatAutoEncoder._b"], "methods", ["home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder._activate", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder._activate", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder._w", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder._b", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder._activate", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder._w", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder._b", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder._w", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder._b"], ["", "", "def", "run_less_layers", "(", "self", ",", "input_pl", ",", "n", ",", "is_target", "=", "False", ")", ":", "\n", "        ", "\"\"\"Return result of a net after n layers or n-1 layer, if is_target is true\n           This function will be used for the layer-wise pretraining of the AE\n\n        Args:\n          input_pl:  tensorflow placeholder of AE inputs\n          n:         int specifying pretrain step\n          is_target: bool specifying if required tensor\n                      should be the target tensor\n                     meaning if we should run n layers or n-1 (if is_target)\n        Returns:\n          Tensor giving pretraining net result or pretraining target\n        \"\"\"", "\n", "assert", "n", ">", "0", "\n", "assert", "n", "<=", "self", ".", "num_hidden_layers", "\n", "\n", "last_output", "=", "input_pl", "[", ":", ",", "0", ",", ":", "]", "# reduce dimensionality", "\n", "\n", "for", "i", "in", "range", "(", "n", "-", "1", ")", ":", "\n", "            ", "w", "=", "self", ".", "_w", "(", "i", "+", "1", ",", "\"_fixed\"", ")", "\n", "b", "=", "self", ".", "_b", "(", "i", "+", "1", ",", "\"_fixed\"", ")", "\n", "\n", "last_output", "=", "self", ".", "_activate", "(", "last_output", ",", "w", ",", "b", ")", "\n", "\n", "", "if", "is_target", ":", "\n", "            ", "return", "last_output", "\n", "\n", "", "last_output", "=", "self", ".", "_activate", "(", "last_output", ",", "self", ".", "_w", "(", "n", ")", ",", "self", ".", "_b", "(", "n", ")", ")", "\n", "\n", "out", "=", "self", ".", "_activate", "(", "last_output", ",", "self", ".", "_w", "(", "n", ")", ",", "self", ".", "_b", "(", "n", ",", "\"_out\"", ")", ",", "\n", "transpose_w", "=", "True", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder.__init__": [[24, 72], ["tensorflow.placeholder", "tensorflow.Variable", "tensorflow.train.slice_input_producer", "tensorflow.train.shuffle_batch", "tensorflow.placeholder", "tensorflow.Variable", "tensorflow.train.slice_input_producer", "tensorflow.train.shuffle_batch"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_hidden_layers", ",", "batch_size", ",", "sequence_length", ",", "sess", ",", "data_info", ")", ":", "\n", "        ", "\"\"\"Autoencoder initializer\n\n        Args:\n          num_hidden_layers:   number of hidden layers\n          batch_size:          batch size\n          sequence_length:     length of the sequence which will be feeded into LSTM as once\n          sess:                tensorflow session object to use\n        \"\"\"", "\n", "\n", "self", ".", "__num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "__batch_size", "=", "batch_size", "\n", "self", ".", "__sequence_length", "=", "sequence_length", "\n", "\n", "self", ".", "__variables", "=", "{", "}", "\n", "self", ".", "__sess", "=", "sess", "\n", "\n", "self", ".", "__scaling_factor", "=", "0.1", "\n", "self", ".", "__default_value", "=", "FLAGS", ".", "defaul_value", "\n", "\n", "self", ".", "__max_val", "=", "data_info", ".", "_max_val", "# maximal value in the dataset", "\n", "\n", "#################### Add the DATASETS to the GRAPH ###############3", "\n", "\n", "#### 1 - TRAIN ###", "\n", "self", ".", "_train_data_initializer", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "\n", "shape", "=", "data_info", ".", "_train_shape", ")", "\n", "self", ".", "_train_data", "=", "tf", ".", "Variable", "(", "self", ".", "_train_data_initializer", ",", "trainable", "=", "False", ",", "\n", "collections", "=", "[", "]", ",", "name", "=", "'Train_data'", ")", "\n", "\n", "train_frames", "=", "tf", ".", "train", ".", "slice_input_producer", "(", "[", "self", ".", "_train_data", "]", ",", "\n", "num_epochs", "=", "FLAGS", ".", "training_epochs", ")", "\n", "\n", "self", ".", "_train_batch", "=", "tf", ".", "train", ".", "shuffle_batch", "(", "train_frames", ",", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "capacity", "=", "5000", ",", "\n", "min_after_dequeue", "=", "1000", ",", "name", "=", "'Train_batch'", ")", "\n", "\n", "#### 2 - VALIDATE, can be used as TEST ###", "\n", "# (When we are optimizing hyper-parameters, this dataset stores as a validation dataset,", "\n", "#  when we are testing the system, this dataset stores a test dataset )", "\n", "self", ".", "_valid_data_initializer", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "data_info", ".", "_eval_shape", ")", "\n", "self", ".", "_valid_data", "=", "tf", ".", "Variable", "(", "self", ".", "_valid_data_initializer", ",", "trainable", "=", "False", ",", "\n", "collections", "=", "[", "]", ",", "name", "=", "'Valid_data'", ")", "\n", "valid_frames", "=", "tf", ".", "train", ".", "slice_input_producer", "(", "[", "self", ".", "_valid_data", "]", ",", "\n", "num_epochs", "=", "FLAGS", ".", "training_epochs", ")", "\n", "self", ".", "_valid_batch", "=", "tf", ".", "train", ".", "shuffle_batch", "(", "valid_frames", ",", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "capacity", "=", "5000", ",", "\n", "min_after_dequeue", "=", "1000", ",", "name", "=", "'Valid_batch'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder.construct_graph": [[73, 86], ["None"], "methods", ["None"], ["", "def", "construct_graph", "(", "self", ",", "input_seq_pl", ",", "dropout", ",", "test", "=", "False", ",", "just_middle", "=", "False", ")", ":", "\n", "\n", "        ", "\"\"\"Get the output of the autoencoder\n\n        This is a dummy function, it has to be defined in each specific class, inheriting class AE\n\n        Args:\n          input_seq_pl:     tf placeholder for ae input data: [batch_size, sequence_length, DoF]\n          dropout:          how much of the input neurons will be activated, value in [0,1]\n          just_middle :     indicate if we want to extract only the middle layer of the network\n        \"\"\"", "\n", "\n", "return", "input_seq_pl", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder.binary_random_matrix_generator": [[87, 117], ["tensorflow.random_uniform", "tensorflow.stack", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.where", "int", "tensorflow.ones", "tensorflow.zeros", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder.shape", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.FlatAE.FlatAutoEncoder.shape"], ["", "def", "binary_random_matrix_generator", "(", "self", ",", "prob_of_missing", ")", ":", "\n", "        ", "\"\"\" Generate a binary matrix with random values: 0s for missign markers and 1s otherwise\n            Each joint is either completely missing or present:\n            all 3 coordinates are either given or not.\n\n          Args:\n            prob_of_missing:  probability to have a missing marker, also called \"missing rate\"\n          Returns:\n            mask : binary matrix to be multiplied on input in order to simulate missing markers\n        \"\"\"", "\n", "\n", "random_size", "=", "[", "FLAGS", ".", "batch_size", ",", "FLAGS", ".", "chunk_length", ",", "\n", "int", "(", "FLAGS", ".", "frame_size", "*", "FLAGS", ".", "amount_of_frames_as_input", "/", "3", ")", "]", "\n", "tensor_size", "=", "[", "FLAGS", ".", "batch_size", ",", "FLAGS", ".", "chunk_length", ",", "FLAGS", ".", "frame_size", "*", "\n", "FLAGS", ".", "amount_of_frames_as_input", "]", "\n", "\n", "# Make sure that all coordinates of each point are either missing or present", "\n", "random_missing_points", "=", "tf", ".", "random_uniform", "(", "random_size", ")", "\n", "stacked_coords", "=", "tf", ".", "stack", "(", "[", "random_missing_points", ",", "random_missing_points", ",", "\n", "random_missing_points", "]", ",", "axis", "=", "3", ")", "\n", "# Make every 3 markers being the same", "\n", "stacked_coords", "=", "tf", ".", "transpose", "(", "stacked_coords", ",", "perm", "=", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", "\n", "\n", "random_missing_coords", "=", "tf", ".", "reshape", "(", "stacked_coords", ",", "[", "tf", ".", "shape", "(", "stacked_coords", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "stacked_coords", ")", "[", "1", "]", ",", "-", "1", "]", ")", "\n", "\n", "mask", "=", "tf", ".", "where", "(", "random_missing_coords", "<", "1", "-", "prob_of_missing", ",", "\n", "tf", ".", "ones", "(", "tensor_size", ")", ",", "tf", ".", "zeros", "(", "tensor_size", ")", ")", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder.num_hidden_layers": [[118, 121], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__num_hidden_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder.batch_size": [[122, 125], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "batch_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder.scaling_factor": [[126, 129], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "scaling_factor", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__scaling_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder.default_value": [[130, 133], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "default_value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__default_value", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder.sequence_length": [[134, 137], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sequence_length", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__sequence_length", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder.session": [[138, 141], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "session", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__sess", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder.max_val": [[142, 145], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "max_val", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__max_val", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.AutoEncoder._activate": [[146, 150], ["tensorflow.tanh", "tensorflow.nn.bias_add", "tensorflow.matmul"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_activate", "(", "x", ",", "w", ",", "b", ",", "transpose_w", "=", "False", ")", ":", "\n", "        ", "y", "=", "tf", ".", "tanh", "(", "tf", ".", "nn", ".", "bias_add", "(", "tf", ".", "matmul", "(", "x", ",", "w", ",", "transpose_b", "=", "transpose_w", ")", ",", "b", ")", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.simulate_missing_markets": [[152, 171], ["tensorflow.multiply", "tensorflow.multiply", "tensorflow.add", "str"], "function", ["None"], ["", "", "def", "simulate_missing_markets", "(", "input_position", ",", "mask", ",", "const", ")", ":", "\n", "    ", "\"\"\" Simulate missing markers, by multiplying input on the binary matrix 'mask'\n\n      Args:\n        input_position: full body position\n        mask:           binary matrix of missing values\n        const:          constant to put in place of missing markers\n      Returns:\n        output :        position, where some markers were replaced by a contrant 'const'\n    \"\"\"", "\n", "\n", "output", "=", "tf", ".", "multiply", "(", "input_position", ",", "mask", ")", "\n", "\n", "if", "const", "==", "0", ":", "\n", "        ", "return", "output", "\n", "", "else", ":", "\n", "        ", "default_values", "=", "tf", ".", "multiply", "(", "1", "-", "mask", ",", "const", ")", "\n", "output", "=", "tf", ".", "add", "(", "output", ",", "default_values", ",", "'Simulate_missing_markers_as_'", "+", "str", "(", "const", ")", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.use_existing_markers": [[173, 198], ["numpy.multiply", "numpy.multiply", "tensorflow.multiply"], "function", ["None"], ["", "", "def", "use_existing_markers", "(", "inputs", ",", "result", ",", "mask", ",", "const", ")", ":", "\n", "    ", "\"\"\" Use the information we know instead of the output of the network for not-missing markers\n\n       Args:\n         inputs:  the data we have\n         result: the output of the network\n         mask:   the binary matrix of missing markers\n       Returns:\n         output : the new body position, which takes the input into account\n     \"\"\"", "\n", "\n", "# Separate the result of the network network", "\n", "\n", "result_without_markers_we_had", "=", "np", ".", "multiply", "(", "result", ",", "1", "-", "mask", ")", "# new info", "\n", "the_marker_we_had", "=", "np", ".", "multiply", "(", "inputs", ",", "mask", ")", "# what we knew before", "\n", "\n", "if", "const", "==", "0", ":", "\n", "        ", "output", "=", "the_marker_we_had", "+", "result_without_markers_we_had", "\n", "", "else", ":", "\n", "# We need first to subtract constant value from the \"input\"", "\n", "        ", "original_input", "=", "inputs", "-", "tf", ".", "multiply", "(", "inputs", ",", "1", "-", "mask", ")", "\n", "# Now we are ready to combine them", "\n", "output", "=", "original_input", "+", "result_without_markers_we_had", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.DataInfo.__init__": [[32, 44], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data_sigma", ",", "train_shape", ",", "eval_shape", ",", "max_val", ")", ":", "\n", "        ", "\"\"\"DataInfo initializer\n\n        Args:\n          data_sigma:   variance in the dataset\n          train_shape:  dimensionality of the train dataset\n          eval_shape:   dimensionality of the evaluation dataset\n        \"\"\"", "\n", "self", ".", "_data_sigma", "=", "data_sigma", "\n", "self", ".", "_train_shape", "=", "train_shape", "\n", "self", ".", "_eval_shape", "=", "eval_shape", "\n", "self", ".", "_max_val", "=", "max_val", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.learning": [[46, 261], ["tf.Graph().as_default", "tf.set_random_seed", "time.time", "train.DataInfo", "tf.ConfigProto", "tf.Session", "FlatAE.FlatAutoEncoder", "print", "tf.Session.run", "print", "open", "open.write", "open.close", "print", "exit", "print", "exit", "tf.local_variables_initializer", "tf.variable_scope", "tf.train.AdamOptimizer", "tf.trainable_variables", "tf.clip_by_global_norm", "tf.train.AdamOptimizer.apply_gradients", "tf.placeholder", "tf.placeholder", "tf.summary.scalar", "tf.summary.merge_all", "tf.summary.scalar", "tf.summary.FileWriter", "int", "tf.Session.run", "tf.Session.run", "tf.train.Coordinator", "tf.train.start_queue_runners", "tf.Session.run", "tf.train.Saver", "int", "tf.train.Coordinator.join", "tf.Graph", "range", "tf.gradients", "zip", "tf.global_variables_initializer", "tf.train.Saver.restore", "print", "print", "print", "print", "print", "print", "tf.train.Coordinator.request_stop", "time.time", "str.format", "tf.contrib.framework.get_or_create_global_step", "tf.get_default_graph", "str", "tf.train.Coordinator.should_stop", "print", "print", "np.sqrt", "tf.Session.run", "tf.Session.run", "tf.Session.run", "print", "tf.train.Saver.save", "str", "train.test", "print", "train.test", "print", "train.test", "print", "tf.summary.FileWriter.add_summary", "range", "tf.Session.run", "tf.summary.FileWriter.add_summary", "str", "tf.Session.run", "tf.train.Saver.save", "print", "print", "train.cont_gap_mask", "FlatAE.FlatAutoEncoder._mask_generator.eval", "np.sqrt", "print", "tf.train.Saver.save", "np.sqrt", "FlatAE.FlatAutoEncoder._mask_generator.eval", "str"], "function", ["home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.test", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.test", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.test", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.cont_gap_mask"], ["", "", "def", "learning", "(", "data", ",", "max_val", ",", "learning_rate", ",", "batch_size", ",", "dropout", ")", ":", "\n", "    ", "\"\"\" Training of the denoising autoencoder\n\n    Returns:\n      Autoencoder trained on a data provided by FLAGS from utils/flags.py\n    \"\"\"", "\n", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "\n", "        ", "tf", ".", "set_random_seed", "(", "FLAGS", ".", "seed", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Read the flags", "\n", "variance", "=", "FLAGS", ".", "variance_of_noise", "\n", "num_hidden", "=", "FLAGS", ".", "num_hidden_layers", "\n", "ae_hidden_shapes", "=", "[", "FLAGS", ".", "network_width", "for", "j", "in", "range", "(", "num_hidden", ")", "]", "\n", "\n", "# Check if recurrency is set in the correct way", "\n", "if", "FLAGS", ".", "reccurent", "==", "False", "and", "FLAGS", ".", "chunk_length", ">", "1", ":", "\n", "            ", "print", "(", "\"ERROR: Without recurrency chunk length should be 1!\"", "\n", "\" Please, change flags accordingly\"", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "# Check if the flags makes sence", "\n", "", "if", "dropout", "<", "0", "or", "variance", "<", "0", ":", "\n", "            ", "print", "(", "'ERROR! Have got negative values in the flags!'", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "# Get the information about the dataset", "\n", "", "data_info", "=", "DataInfo", "(", "data", ".", "train", ".", "sigma", ",", "data", ".", "train", ".", "_sequences", ".", "shape", ",", "\n", "data", ".", "test", ".", "_sequences", ".", "shape", ",", "max_val", ")", "\n", "\n", "# Allow tensorflow to change device allocation when needed", "\n", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", "# log_device_placement=True)", "\n", "# Adjust configuration so that multiple executions are possible", "\n", "config", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "\n", "# Start a session", "\n", "sess", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "\n", "# Create an autoencoder", "\n", "ae_shape", "=", "[", "FLAGS", ".", "frame_size", "*", "FLAGS", ".", "amount_of_frames_as_input", "]", "+", "ae_hidden_shapes", "+", "[", "\n", "FLAGS", ".", "frame_size", "*", "FLAGS", ".", "amount_of_frames_as_input", "]", "\n", "ae", "=", "FlatAutoEncoder", "(", "ae_shape", ",", "sess", ",", "batch_size", ",", "variance", ",", "data_info", ")", "\n", "print", "(", "'\\nFlat AE was created : '", ",", "ae_shape", ")", "\n", "\n", "# Initialize input_producer", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "\"Train\"", ")", ":", "\n", "\n", "##############        DEFINE  Optimizer and training OPERATOR      ############", "\n", "\n", "# Define optimizers", "\n", "            ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learning_rate", ")", "\n", "\n", "# Do gradient clipping", "\n", "tvars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "grads", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "tf", ".", "gradients", "(", "ae", ".", "_loss", ",", "tvars", ")", ",", "1e12", ")", "\n", "train_op", "=", "optimizer", ".", "apply_gradients", "(", "zip", "(", "grads", ",", "tvars", ")", ",", "global_step", "=", "tf", ".", "contrib", ".", "framework", ".", "get_or_create_global_step", "(", ")", ")", "\n", "\n", "# Prepare for making a summary for TensorBoard", "\n", "train_error", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", ")", ",", "name", "=", "'train_error'", ")", "\n", "eval_error", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "(", ")", ",", "name", "=", "'eval_error'", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'Train_error'", ",", "train_error", ")", "\n", "train_summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "eval_summary_op", "=", "tf", ".", "summary", ".", "scalar", "(", "'Validation_error'", ",", "eval_error", ")", "\n", "\n", "summary_dir", "=", "FLAGS", ".", "summary_dir", "\n", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "summary_dir", ",", "graph", "=", "tf", ".", "get_default_graph", "(", ")", ")", "\n", "\n", "num_batches", "=", "int", "(", "data", ".", "train", ".", "_num_sequences", "/", "batch_size", ")", "\n", "\n", "# Initialize the part of the graph with the input data", "\n", "sess", ".", "run", "(", "ae", ".", "_train_data", ".", "initializer", ",", "\n", "feed_dict", "=", "{", "ae", ".", "_train_data_initializer", ":", "data", ".", "train", ".", "_sequences", "}", ")", "\n", "sess", ".", "run", "(", "ae", ".", "_valid_data", ".", "initializer", ",", "\n", "feed_dict", "=", "{", "ae", ".", "_valid_data_initializer", ":", "data", ".", "test", ".", "_sequences", "}", ")", "\n", "\n", "# Start input enqueue threads.", "\n", "coord", "=", "tf", ".", "train", ".", "Coordinator", "(", ")", "\n", "threads", "=", "tf", ".", "train", ".", "start_queue_runners", "(", "sess", "=", "sess", ",", "coord", "=", "coord", ")", "\n", "\n", "# Initialize variables", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "# Create a saver", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "write_version", "=", "saver_pb2", ".", "SaverDef", ".", "V2", ")", "\n", "\n", "# restore model, if needed", "\n", "if", "FLAGS", ".", "restore", ":", "\n", "                ", "chkpt_file", "=", "FLAGS", ".", "chkpt_dir", "+", "'/chkpt-'", "+", "str", "(", "FLAGS", ".", "chkpt_num", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "chkpt_file", ")", "\n", "print", "(", "\"Model restored from the file \"", "+", "str", "(", "chkpt_file", ")", "+", "'.'", ")", "\n", "\n", "# A few initialization for the early stopping", "\n", "", "delta", "=", "FLAGS", ".", "delta_for_early_stopping", "# error tolerance for early stopping", "\n", "best_error", "=", "10000", "\n", "num_valid_batches", "=", "int", "(", "data", ".", "test", ".", "num_sequences", "/", "batch_size", ")", "\n", "\n", "try", ":", "# running enqueue threads.", "\n", "\n", "# Train the whole network jointly", "\n", "                ", "step", "=", "0", "\n", "print", "(", "'\\nWe train on '", ",", "num_batches", ",", "' batches with '", ",", "batch_size", ",", "\n", "' training examples in each for'", ",", "FLAGS", ".", "training_epochs", ",", "' epochs...'", ")", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\" ______________ ______\"", ")", "\n", "print", "(", "\"|     Epoch    | RMSE |\"", ")", "\n", "print", "(", "\"|------------  |------|\"", ")", "\n", "\n", "while", "not", "coord", ".", "should_stop", "(", ")", ":", "\n", "\n", "                    ", "if", "FLAGS", ".", "continuos_gap", ":", "\n", "                        ", "loss_summary", ",", "loss_value", "=", "sess", ".", "run", "(", "[", "train_op", ",", "ae", ".", "_reconstruction_loss", "]", ",", "\n", "feed_dict", "=", "{", "ae", ".", "_mask", ":", "cont_gap_mask", "(", ")", "}", ")", "\n", "", "else", ":", "\n", "                        ", "loss_summary", ",", "loss_value", "=", "sess", ".", "run", "(", "[", "train_op", ",", "ae", ".", "_reconstruction_loss", "]", ",", "\n", "feed_dict", "=", "{", "ae", ".", "_mask", ":", "ae", ".", "_mask_generator", ".", "eval", "(", "session", "=", "ae", ".", "session", ")", "}", ")", "\n", "\n", "", "train_error_", "=", "loss_value", "\n", "\n", "if", "step", "%", "num_batches", "==", "0", ":", "\n", "                        ", "epoch", "=", "step", "*", "1.0", "/", "num_batches", "\n", "\n", "train_summary", "=", "sess", ".", "run", "(", "train_summary_op", ",", "\n", "feed_dict", "=", "{", "train_error", ":", "np", ".", "sqrt", "(", "train_error_", ")", "}", ")", "\n", "\n", "# Print results of screen", "\n", "epoch_str", "=", "\"| {0:3.0f} \"", ".", "format", "(", "epoch", ")", "[", ":", "5", "]", "\n", "percent_str", "=", "\"({0:3.2f}\"", ".", "format", "(", "epoch", "*", "100.0", "/", "FLAGS", ".", "training_epochs", ")", "[", ":", "5", "]", "\n", "error_str", "=", "\"%) |{0:5.2f}\"", ".", "format", "(", "train_error_", ")", "[", ":", "10", "]", "+", "\"|\"", "\n", "print", "(", "epoch_str", ",", "percent_str", ",", "error_str", ")", "\n", "\n", "if", "epoch", "%", "5", "==", "0", ":", "\n", "\n", "                            ", "rmse", "=", "test", "(", "ae", ",", "FLAGS", ".", "data_dir", "+", "'/../test_seq/basketball_2.binary'", ",", "\n", "max_val", ",", "mean_pose", ")", "\n", "\n", "print", "(", "\"\\nOur RMSE for basketball is : \"", ",", "rmse", ")", "\n", "\n", "rmse", "=", "test", "(", "ae", ",", "FLAGS", ".", "data_dir", "+", "'/../test_seq/boxing.binary'", ",", "\n", "max_val", ",", "mean_pose", ")", "\n", "print", "(", "\"\\nOur RMSE for boxing is : \"", ",", "rmse", ")", "\n", "\n", "rmse", "=", "test", "(", "ae", ",", "FLAGS", ".", "data_dir", "+", "'/../test_seq/salto.binary'", ",", "\n", "max_val", ",", "mean_pose", ")", "#, True)", "\n", "print", "(", "\"\\nOur RMSE for the jump turn is : \"", ",", "rmse", ")", "\n", "\n", "", "if", "epoch", ">", "0", ":", "\n", "                            ", "summary_writer", ".", "add_summary", "(", "train_summary", ",", "step", ")", "\n", "\n", "# Evaluate on the validation sequences", "\n", "error_sum", "=", "0", "\n", "for", "valid_batch", "in", "range", "(", "num_valid_batches", ")", ":", "\n", "                                ", "curr_err", "=", "sess", ".", "run", "(", "[", "ae", ".", "_valid_loss", "]", ",", "\n", "feed_dict", "=", "{", "ae", ".", "_mask", ":", "ae", ".", "_mask_generator", ".", "eval", "(", "session", "=", "sess", ")", "}", ")", "\n", "error_sum", "+=", "curr_err", "[", "0", "]", "\n", "", "new_error", "=", "error_sum", "/", "(", "num_valid_batches", ")", "\n", "eval_sum", "=", "sess", ".", "run", "(", "eval_summary_op", ",", "\n", "feed_dict", "=", "{", "eval_error", ":", "np", ".", "sqrt", "(", "new_error", ")", "}", ")", "\n", "summary_writer", ".", "add_summary", "(", "eval_sum", ",", "step", ")", "\n", "\n", "# Early stopping", "\n", "if", "FLAGS", ".", "Early_stopping", "and", "epoch", ">", "20", ":", "\n", "                                ", "if", "(", "new_error", "-", "best_error", ")", "/", "best_error", ">", "delta", ":", "\n", "                                    ", "print", "(", "'After '", "+", "str", "(", "step", ")", "+", "\n", "' steps the training started over-fitting '", ")", "\n", "break", "\n", "", "if", "new_error", "<", "best_error", ":", "\n", "                                    ", "best_error", "=", "new_error", "\n", "\n", "# Saver for the model", "\n", "save_path", "=", "saver", ".", "save", "(", "sess", ",", "FLAGS", ".", "chkpt_dir", "+", "'/chkpt'", ",", "\n", "global_step", "=", "step", ")", "\n", "\n", "", "", "if", "epoch", "%", "5", "==", "0", ":", "\n", "# Save for the model", "\n", "                                ", "save_path", "=", "saver", ".", "save", "(", "sess", ",", "FLAGS", ".", "chkpt_dir", "+", "'/chkpt'", ",", "\n", "global_step", "=", "step", ")", "\n", "print", "(", "'Done training for %d epochs, %d steps.'", "%", "\n", "(", "FLAGS", ".", "training_epochs", ",", "step", ")", ")", "\n", "print", "(", "\"The model was saved in file: %s\"", "%", "save_path", ")", "\n", "\n", "", "", "", "step", "+=", "1", "\n", "\n", "", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "                ", "if", "not", "FLAGS", ".", "Early_stopping", ":", "\n", "# Save the model", "\n", "                    ", "save_path", "=", "saver", ".", "save", "(", "sess", ",", "FLAGS", ".", "chkpt_dir", "+", "'/chkpt'", ",", "\n", "global_step", "=", "step", ")", "\n", "", "print", "(", "'Done training for %d epochs, %d steps.'", "%", "(", "FLAGS", ".", "training_epochs", ",", "step", ")", ")", "\n", "print", "(", "\"The final model was saved in file: %s\"", "%", "save_path", ")", "\n", "", "finally", ":", "\n", "# When done, ask the threads to stop.", "\n", "                ", "coord", ".", "request_stop", "(", ")", "\n", "\n", "# Wait for threads to finish.", "\n", "", "coord", ".", "join", "(", "threads", ")", "\n", "\n", "", "duration", "=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", "# in minutes, instead of seconds", "\n", "\n", "print", "(", "\"The training was running for %.3f  min\"", "%", "(", "duration", ")", ")", "\n", "\n", "# Save the results", "\n", "f", "=", "open", "(", "FLAGS", ".", "results_file", ",", "'a'", ")", "\n", "f", ".", "write", "(", "'\\nFor the data with '", "+", "str", "(", "FLAGS", ".", "duration_of_a_gap", ")", "+", "' gap ! '", "\n", "+", "' the test error is '", "+", "str", ".", "format", "(", "\"{0:.5f}\"", ",", "np", ".", "sqrt", "(", "new_error", ")", ")", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n", "return", "ae", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.test": [[262, 480], ["ae.session.graph.as_default", "utils.data.read_test_seq_from_binary", "train.cont_gap_mask", "np.array", "np.array", "np.divide", "np.array", "np.array", "np.array", "range", "train.reshape_from_batch_to_sequence", "train.convert_back_to_3d_coords", "np.fmin", "np.sqrt", "utils.data.visualize", "print", "exit", "np.tile", "train.save_motion", "np.array", "np.array", "np.array", "range", "train.reshape_from_batch_to_sequence", "reshape_from_batch_to_sequence.reshape", "utils.data.visualize", "train.save_motion", "np.tile", "print", "np.tile", "AE.use_existing_markers", "utils.data.visualize", "train.save_motion", "np.zeros", "range", "int", "np.tile", "print", "np.tile", "np.multiply", "int", "sess.run", "sess.run", "np.append", "np.array", "print", "print", "exit", "int", "open", "file_handler.close", "range", "range", "int", "int", "np.append", "np.array", "range", "range", "error[].reshape", "range", "np.sqrt", "file_handler.write", "range", "range", "np.sqrt", "ae._mask_generator.eval", "len", "len", "len", "len", "len", "len", "int"], "function", ["home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_test_seq_from_binary", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.cont_gap_mask", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.reshape_from_batch_to_sequence", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.convert_back_to_3d_coords", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.visualize", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.save_motion", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.reshape_from_batch_to_sequence", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.visualize", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.save_motion", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.AE.use_existing_markers", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.visualize", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.save_motion"], ["", "", "def", "test", "(", "ae", ",", "input_seq_file_name", ",", "max_val", ",", "mean_pose", ",", "write_skels_to_files", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Test our system on a particular sequence\n\n    Args:\n     ae:                    trained AE\n     input_seq_file_name:   address of the binary file with a test sequence\n     max_val:               max values in the dataset (for the normalization)\n     mean_pose:             mean values in the dataset (for the normalization)\n     write_skels_to_files:  weather we write the sequnces into a file (for further visualization)\n\n    Returns:\n     rmse                 root squared mean error\n    \"\"\"", "\n", "with", "ae", ".", "session", ".", "graph", ".", "as_default", "(", ")", "as", "sess", ":", "\n", "        ", "sess", "=", "ae", ".", "session", "\n", "chunking_stride", "=", "FLAGS", ".", "chunking_stride", "\n", "\n", "\n", "#                    GET THE DATA", "\n", "\n", "# get input sequnce", "\n", "#print('\\nRead a test sequence from the file',input_seq_file_name,'...')", "\n", "original_input", "=", "read_test_seq_from_binary", "(", "input_seq_file_name", ")", "\n", "\n", "visualizing", "=", "False", "\n", "if", "visualizing", ":", "\n", "            ", "visualize", "(", "original_input", ")", "\n", "\n", "", "if", "FLAGS", ".", "plot_error", ":", "\n", "# cut only interesting part of a sequence", "\n", "            ", "original_input", "=", "original_input", "[", "SKIP", ":", "SKIP", "+", "NO_GAP", "+", "FLAGS", ".", "duration_of_a_gap", "+", "NO_GAP", "]", "\n", "\n", "# Get a mask with very long gaps", "\n", "", "long_mask", "=", "cont_gap_mask", "(", "original_input", ".", "shape", "[", "0", "]", ",", "NO_GAP", ",", "test", "=", "True", ")", "\n", "\n", "if", "long_mask", ".", "shape", "[", "1", "]", "<", "ae", ".", "sequence_length", ":", "\n", "            ", "print", "(", "\"ERROR! Your gap is too short for your sequence length\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "mask_chunks", "=", "np", ".", "array", "(", "[", "long_mask", "[", "0", ",", "i", ":", "i", "+", "ae", ".", "sequence_length", ",", ":", "]", "for", "i", "in", "\n", "range", "(", "0", ",", "len", "(", "long_mask", "[", "0", "]", ")", "-", "ae", ".", "sequence_length", "+", "1", ",", "\n", "chunking_stride", ")", "]", ")", "\n", "\n", "# Pad with itself if it is too short", "\n", "if", "mask_chunks", ".", "shape", "[", "0", "]", "<", "ae", ".", "batch_size", ":", "\n", "            ", "mupliplication_factor", "=", "int", "(", "ae", ".", "batch_size", "/", "mask_chunks", ".", "shape", "[", "0", "]", ")", "+", "1", "\n", "mask_chunks", "=", "np", ".", "tile", "(", "mask_chunks", ",", "(", "mupliplication_factor", ",", "1", ",", "1", ")", ")", "\n", "\n", "# Batch those chunks", "\n", "", "mask_batches", "=", "np", ".", "array", "(", "[", "mask_chunks", "[", "i", ":", "i", "+", "ae", ".", "batch_size", ",", ":", "]", "for", "i", "in", "\n", "range", "(", "0", ",", "len", "(", "mask_chunks", ")", "-", "ae", ".", "batch_size", "+", "1", ",", "ae", ".", "batch_size", ")", "]", ")", "\n", "\n", "if", "write_skels_to_files", ":", "\n", "\n", "# No Preprocessing!", "\n", "            ", "coords_normalized", "=", "original_input", "\n", "\n", "save_motion", "(", "original_input", ",", "input_seq_file_name", "+", "'_original.csv'", ")", "\n", "\n", "if", "coords_normalized", ".", "shape", "[", "0", "]", "<", "ae", ".", "sequence_length", ":", "\n", "                ", "mupliplication_factor", "=", "int", "(", "ae", ".", "batch_size", "*", "ae", ".", "sequence_length", "\n", "/", "coords_normalized", ".", "shape", "[", "0", "]", ")", "+", "1", "\n", "# Pad the sequence with itself in order to fill the batch completely", "\n", "coords_normalized", "=", "np", ".", "tile", "(", "coords_normalized", ",", "mupliplication_factor", ")", "\n", "print", "(", "\"Test sequence was way to short!\"", ")", "\n", "\n", "# Split it into chunks", "\n", "", "seq_chunks", "=", "np", ".", "array", "(", "[", "coords_normalized", "[", "i", ":", "i", "+", "ae", ".", "sequence_length", ",", ":", "]", "for", "i", "in", "\n", "range", "(", "0", ",", "len", "(", "original_input", ")", "-", "ae", ".", "sequence_length", "+", "1", ",", "\n", "chunking_stride", ")", "]", ")", "# Split sequence into chunks", "\n", "\n", "original_size", "=", "seq_chunks", ".", "shape", "[", "0", "]", "\n", "\n", "if", "original_size", "<", "ae", ".", "batch_size", ":", "\n", "                ", "mupliplication_factor", "=", "int", "(", "ae", ".", "batch_size", "/", "seq_chunks", ".", "shape", "[", "0", "]", ")", "+", "1", "\n", "\n", "# Pad the sequence with itself in order to fill the batch completely", "\n", "seq_chunks", "=", "np", ".", "tile", "(", "seq_chunks", ",", "(", "mupliplication_factor", ",", "1", ",", "1", ")", ")", "\n", "\n", "# Batch those chunks", "\n", "", "batches", "=", "np", ".", "array", "(", "[", "seq_chunks", "[", "i", ":", "i", "+", "ae", ".", "batch_size", ",", ":", "]", "for", "i", "in", "\n", "range", "(", "0", ",", "len", "(", "seq_chunks", ")", "-", "ae", ".", "batch_size", "+", "1", ",", "ae", ".", "batch_size", ")", "]", ")", "\n", "\n", "numb_of_batches", "=", "batches", ".", "shape", "[", "0", "]", "\n", "\n", "#                    MAKE A SEQUENCE WITH MISSING MARKERS", "\n", "\n", "output_batches", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "# Go over all batches one by one", "\n", "for", "batch_numb", "in", "range", "(", "numb_of_batches", ")", ":", "\n", "\n", "                ", "mask", "=", "mask_batches", "[", "batch_numb", "]", "\n", "\n", "# Simulate missing markers", "\n", "new_result", "=", "np", ".", "multiply", "(", "batches", "[", "batch_numb", "]", ",", "mask", ")", "\n", "\n", "output_batches", "=", "np", ".", "append", "(", "output_batches", ",", "[", "new_result", "]", ",", "axis", "=", "0", ")", "if", "output_batches", ".", "size", "else", "np", ".", "array", "(", "[", "new_result", "]", ")", "\n", "\n", "# No postprocessing", "\n", "", "output_sequence", "=", "reshape_from_batch_to_sequence", "(", "output_batches", ")", "\n", "\n", "noisy", "=", "output_sequence", ".", "reshape", "(", "-", "1", ",", "output_sequence", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "visualize", "(", "noisy", ")", "\n", "\n", "save_motion", "(", "noisy", ",", "input_seq_file_name", "+", "'_noisy.csv'", ")", "\n", "\n", "\n", "#                    MAKE AN OUTPUT SEQUENCE", "\n", "\n", "# Preprocess...", "\n", "", "coords_minus_mean", "=", "original_input", "-", "mean_pose", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "eps", "=", "1e-15", "\n", "coords_normalized", "=", "np", ".", "divide", "(", "coords_minus_mean", ",", "max_val", "[", "np", ".", "newaxis", ",", ":", "]", "+", "eps", ")", "\n", "\n", "if", "coords_normalized", ".", "shape", "[", "0", "]", "<", "ae", ".", "sequence_length", ":", "\n", "            ", "mupliplication_factor", "=", "(", "ae", ".", "batch_size", "*", "ae", ".", "sequence_length", "/", "\n", "coords_normalized", ".", "shape", "[", "0", "]", ")", "+", "1", "\n", "# Pad the sequence with itself in order to fill the batch completely", "\n", "coords_normalized", "=", "np", ".", "tile", "(", "coords_normalized", ",", "mupliplication_factor", ")", "\n", "print", "(", "\"Test sequence was way to short!\"", ")", "\n", "\n", "# Split it into chunks", "\n", "", "seq_chunks", "=", "np", ".", "array", "(", "[", "coords_normalized", "[", "i", ":", "i", "+", "ae", ".", "sequence_length", ",", ":", "]", "for", "i", "in", "\n", "range", "(", "0", ",", "len", "(", "original_input", ")", "-", "ae", ".", "sequence_length", "+", "1", ",", "\n", "chunking_stride", ")", "]", ")", "# Split sequence into chunks", "\n", "\n", "# Pad with itself if it is too short", "\n", "if", "seq_chunks", ".", "shape", "[", "0", "]", "<", "ae", ".", "batch_size", ":", "\n", "            ", "mupliplication_factor", "=", "int", "(", "ae", ".", "batch_size", "/", "seq_chunks", ".", "shape", "[", "0", "]", ")", "+", "1", "\n", "# Pad the sequence with itself in order to fill the batch completely", "\n", "seq_chunks", "=", "np", ".", "tile", "(", "seq_chunks", ",", "(", "mupliplication_factor", ",", "1", ",", "1", ")", ")", "\n", "\n", "# Batch those chunks", "\n", "", "batches", "=", "np", ".", "array", "(", "[", "seq_chunks", "[", "i", ":", "i", "+", "ae", ".", "batch_size", ",", ":", "]", "for", "i", "in", "\n", "range", "(", "0", ",", "len", "(", "seq_chunks", ")", "-", "ae", ".", "batch_size", "+", "1", ",", "ae", ".", "batch_size", ")", "]", ")", "\n", "\n", "numb_of_batches", "=", "batches", ".", "shape", "[", "0", "]", "\n", "\n", "# Create an empty array for an output", "\n", "output_batches", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "# Go over all batches one by one", "\n", "for", "batch_numb", "in", "range", "(", "numb_of_batches", ")", ":", "\n", "            ", "if", "FLAGS", ".", "continuos_gap", ":", "\n", "                ", "output_batch", ",", "mask", "=", "sess", ".", "run", "(", "[", "ae", ".", "_valid_output", ",", "ae", ".", "_mask", "]", ",", "\n", "feed_dict", "=", "{", "ae", ".", "_valid_input_", ":", "batches", "[", "batch_numb", "]", ",", "\n", "ae", ".", "_mask", ":", "mask_batches", "[", "batch_numb", "]", "}", ")", "\n", "", "else", ":", "\n", "                ", "output_batch", ",", "mask", "=", "sess", ".", "run", "(", "[", "ae", ".", "_valid_output", ",", "ae", ".", "_mask", "]", ",", "\n", "feed_dict", "=", "{", "ae", ".", "_valid_input_", ":", "batches", "[", "batch_numb", "]", ",", "\n", "ae", ".", "_mask", ":", "\n", "ae", ".", "_mask_generator", ".", "eval", "(", "session", "=", "sess", ")", "}", ")", "\n", "\n", "# Take known values into account", "\n", "", "new_result", "=", "use_existing_markers", "(", "batches", "[", "batch_numb", "]", ",", "output_batch", ",", "mask", ",", "\n", "FLAGS", ".", "defaul_value", ")", "\n", "\n", "output_batches", "=", "np", ".", "append", "(", "output_batches", ",", "[", "new_result", "]", ",", "axis", "=", "0", ")", "if", "output_batches", ".", "size", "else", "np", ".", "array", "(", "[", "new_result", "]", ")", "\n", "\n", "# Postprocess...", "\n", "", "output_sequence", "=", "reshape_from_batch_to_sequence", "(", "output_batches", ")", "\n", "\n", "reconstructed", "=", "convert_back_to_3d_coords", "(", "output_sequence", ",", "max_val", ",", "mean_pose", ")", "\n", "\n", "if", "write_skels_to_files", ":", "\n", "            ", "visualize", "(", "reconstructed", ",", "original_input", ")", "\n", "save_motion", "(", "reconstructed", ",", "input_seq_file_name", "+", "'_our_result.csv'", ")", "\n", "\n", "#              CALCULATE the error for our network", "\n", "", "new_size", "=", "np", ".", "fmin", "(", "reconstructed", ".", "shape", "[", "0", "]", ",", "original_input", ".", "shape", "[", "0", "]", ")", "\n", "error", "=", "(", "reconstructed", "[", "0", ":", "new_size", "]", "-", "original_input", "[", "0", ":", "new_size", "]", ")", "*", "ae", ".", "scaling_factor", "\n", "# take into account only missing markers", "\n", "total_rmse", "=", "np", ".", "sqrt", "(", "(", "(", "error", "[", "error", ">", "0.000000001", "]", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "\n", "\n", "if", "FLAGS", ".", "plot_error", ":", "\n", "\n", "            ", "if", "not", "FLAGS", ".", "continuos_gap", ":", "\n", "                ", "print", "(", "\"ERROR! If you need to plot an error - you should have a continuosly \"", "\n", "\"missing markers. Change flags.py accordingly\"", ")", "\n", "print", "(", "\"For example: set flag 'continuos_gap' to True\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "assert", "FLAGS", ".", "duration_of_a_gap", "<", "error", ".", "shape", "[", "0", "]", "*", "FLAGS", ".", "amount_of_frames_as_input", "\n", "\n", "\n", "# Calculate error for every frame", "\n", "better_error", "=", "np", ".", "zeros", "(", "[", "FLAGS", ".", "duration_of_a_gap", "+", "NO_GAP", "]", ")", "\n", "for", "i", "in", "range", "(", "int", "(", "FLAGS", ".", "duration_of_a_gap", "/", "FLAGS", ".", "amount_of_frames_as_input", ")", ")", ":", "\n", "\n", "# Convert from many frames at a time - to just one frame at at time", "\n", "                ", "if", "not", "FLAGS", ".", "reccurent", ":", "\n", "                    ", "new_error", "=", "error", "[", "i", "+", "int", "(", "NO_GAP", "/", "FLAGS", ".", "amount_of_frames_as_input", ")", "]", ".", "reshape", "(", "-", "1", ",", "FLAGS", ".", "frame_size", ")", "\n", "\n", "for", "time", "in", "range", "(", "FLAGS", ".", "amount_of_frames_as_input", ")", ":", "\n", "                        ", "this_frame_err", "=", "new_error", "[", "time", "]", "\n", "rmse", "=", "np", ".", "sqrt", "(", "(", "(", "this_frame_err", "[", "this_frame_err", ">", "0.000000001", "]", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "\n", "\n", "if", "rmse", ">", "0", ":", "\n", "                            ", "better_error", "[", "i", "*", "FLAGS", ".", "amount_of_frames_as_input", "+", "time", "+", "NO_GAP", "]", "=", "rmse", "\n", "\n", "", "", "", "else", ":", "\n", "                    ", "this_frame_err", "=", "error", "[", "i", "+", "NO_GAP", "]", "\n", "rmse", "=", "np", ".", "sqrt", "(", "(", "(", "this_frame_err", "[", "this_frame_err", ">", "0.000000001", "]", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "\n", "if", "rmse", ">", "0", ":", "\n", "                        ", "better_error", "[", "i", "+", "NO_GAP", "]", "=", "rmse", "\n", "\n", "", "", "", "with", "open", "(", "FLAGS", ".", "contin_test_file", ",", "'w'", ")", "as", "file_handler", ":", "\n", "                ", "for", "item", "in", "better_error", ":", "\n", "                    ", "file_handler", ".", "write", "(", "\"{}\\n\"", ".", "format", "(", "item", ")", ")", "\n", "", "file_handler", ".", "close", "(", ")", "\n", "\n", "", "", "return", "total_rmse", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.reshape_from_batch_to_sequence": [[481, 524], ["input_batch.reshape", "np.concatenate.reshape", "range", "np.array", "input_batch.reshape.reshape", "np.concatenate"], "function", ["None"], ["", "", "def", "reshape_from_batch_to_sequence", "(", "input_batch", ")", ":", "\n", "    ", "'''\n    Reshape batch of overlapping sequences into 1 sequence\n\n    Args:\n         input_batch: batch of overlapping sequences\n    Return:\n         flat_sequence: one sequence with the same values\n\n    '''", "\n", "\n", "# Get the data from the Flags", "\n", "chunking_stride", "=", "FLAGS", ".", "chunking_stride", "\n", "if", "FLAGS", ".", "reccurent", ":", "\n", "        ", "sequence_length", "=", "FLAGS", ".", "chunk_length", "\n", "", "else", ":", "\n", "        ", "sequence_length", "=", "FLAGS", ".", "amount_of_frames_as_input", "\n", "\n", "# Reshape batches", "\n", "", "input_chunks", "=", "input_batch", ".", "reshape", "(", "-", "1", ",", "input_batch", ".", "shape", "[", "2", "]", ",", "input_batch", ".", "shape", "[", "3", "]", ")", "\n", "numb_of_chunks", "=", "input_chunks", ".", "shape", "[", "0", "]", "\n", "\n", "if", "FLAGS", ".", "reccurent", ":", "\n", "# Map from overlapping windows to non-overlaping", "\n", "# Take first chunk as a whole and the last part of each other chunk", "\n", "\n", "        ", "input_non_overlaping", "=", "input_chunks", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "numb_of_chunks", ",", "1", ")", ":", "\n", "\n", "            ", "input_non_overlaping", "=", "np", ".", "concatenate", "(", "\n", "(", "input_non_overlaping", ",", "\n", "input_chunks", "[", "i", "]", "[", "sequence_length", "-", "chunking_stride", ":", "sequence_length", "]", "[", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "input_non_overlaping", "=", "np", ".", "array", "(", "input_non_overlaping", ")", "\n", "\n", "", "else", ":", "\n", "        ", "input_non_overlaping", "=", "input_chunks", ".", "reshape", "(", "input_chunks", ".", "shape", "[", "0", "]", ",", "1", ",", "\n", "sequence_length", "*", "FLAGS", ".", "frame_size", ")", "\n", "\n", "# Flaten it into a sequence", "\n", "", "flat_sequence", "=", "input_non_overlaping", ".", "reshape", "(", "-", "1", ",", "input_non_overlaping", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "return", "flat_sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.convert_back_to_3d_coords": [[526, 550], ["np.multiply", "reconstructed.reshape.reshape"], "function", ["None"], ["", "def", "convert_back_to_3d_coords", "(", "sequence", ",", "max_val", ",", "mean_pose", ")", ":", "\n", "    ", "'''\n    Convert back from the normalized values between -1 and 1 to original 3d coordinates\n    and unroll them into the sequence\n\n    Args:\n        sequence: sequence of the normalized values\n        max_val: maximal value in the dataset\n        mean_pose: mean value in the dataset\n\n    Return:\n        3d coordinates corresponding to the batch\n    '''", "\n", "\n", "# Convert it back from the [-1,1] to original values", "\n", "reconstructed", "=", "np", ".", "multiply", "(", "sequence", ",", "max_val", "[", "np", ".", "newaxis", ",", ":", "]", "+", "1e-15", ")", "\n", "\n", "# Add the mean pose back", "\n", "reconstructed", "=", "reconstructed", "+", "mean_pose", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "# Unroll batches into the sequence", "\n", "reconstructed", "=", "reconstructed", ".", "reshape", "(", "-", "1", ",", "reconstructed", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n", "return", "reconstructed", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.get_the_data": [[552, 564], ["utils.data.read_datasets_from_binary", "print", "exit", "print", "exit"], "function", ["home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_datasets_from_binary"], ["", "def", "get_the_data", "(", ")", ":", "\n", "    ", "data", ",", "max_val", ",", "mean_pose", "=", "read_datasets_from_binary", "(", ")", "\n", "\n", "# Check, if we have enough data", "\n", "if", "FLAGS", ".", "batch_size", ">", "data", ".", "train", ".", "_num_chunks", ":", "\n", "        ", "print", "(", "'ERROR! Cannot have less train sequences than a batch size!'", ")", "\n", "exit", "(", "1", ")", "\n", "", "if", "FLAGS", ".", "batch_size", ">", "data", ".", "test", ".", "_num_chunks", ":", "\n", "        ", "print", "(", "'ERROR! Cannot have less test sequences than a batch size!'", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "return", "data", ",", "max_val", ",", "mean_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.cont_gap_mask": [[565, 626], ["np.ones", "range", "int", "int", "int", "range", "range", "int", "int", "np.random.choice", "np.random.choice", "range", "np.random.normal", "range"], "function", ["None"], ["", "def", "cont_gap_mask", "(", "length", "=", "0", ",", "gap_begins", "=", "0", ",", "test", "=", "False", ")", ":", "\n", "\n", "    ", "if", "not", "test", ":", "\n", "        ", "mask_size", "=", "[", "FLAGS", ".", "batch_size", ",", "FLAGS", ".", "chunk_length", ",", "\n", "int", "(", "FLAGS", ".", "frame_size", "*", "FLAGS", ".", "amount_of_frames_as_input", ")", "]", "\n", "length", "=", "FLAGS", ".", "chunk_length", "\n", "", "else", ":", "\n", "        ", "mask_size", "=", "[", "1", ",", "length", ",", "int", "(", "FLAGS", ".", "frame_size", "*", "FLAGS", ".", "amount_of_frames_as_input", ")", "]", "\n", "\n", "", "mask", "=", "np", ".", "ones", "(", "mask_size", ")", "\n", "probabilities", "=", "[", "1.0", "/", "(", "41", ")", "for", "marker", "in", "range", "(", "41", ")", "]", "\n", "\n", "for", "batch", "in", "range", "(", "mask_size", "[", "0", "]", ")", ":", "\n", "\n", "        ", "start_fr", "=", "int", "(", "gap_begins", "/", "FLAGS", ".", "amount_of_frames_as_input", ")", "\n", "\n", "if", "test", ":", "\n", "            ", "if", "FLAGS", ".", "duration_of_a_gap", ":", "\n", "                ", "gap_length", "=", "FLAGS", ".", "duration_of_a_gap", "\n", "", "else", ":", "\n", "                ", "gap_length", "=", "int", "(", "length", "/", "FLAGS", ".", "amount_of_frames_as_input", ")", "\n", "", "", "else", ":", "\n", "            ", "gap_length", "=", "length", "\n", "\n", "", "time_fr", "=", "start_fr", "\n", "while", "time_fr", "<", "gap_length", "+", "start_fr", ":", "\n", "\n", "# choose random amount of time frames for a gap", "\n", "            ", "if", "FLAGS", ".", "duration_of_a_gap", ":", "\n", "                ", "gap_duration", "=", "FLAGS", ".", "duration_of_a_gap", "\n", "", "else", ":", "\n", "# between 0.1s and 1s (frame rate 60 fps)", "\n", "                ", "gap_duration", "=", "int", "(", "np", ".", "random", ".", "normal", "(", "120", ",", "20", ")", ")", "\n", "\n", "# choose random markers for the gap", "\n", "", "if", "FLAGS", ".", "amount_of_missing_markers", "<", "21", ":", "\n", "                ", "random_markers", "=", "np", ".", "random", ".", "choice", "(", "41", ",", "FLAGS", ".", "amount_of_missing_markers", ",", "\n", "replace", "=", "False", ",", "p", "=", "probabilities", ")", "\n", "", "else", ":", "\n", "                ", "random_markers", "=", "np", ".", "random", ".", "choice", "(", "41", ",", "FLAGS", ".", "amount_of_missing_markers", ",", "\n", "replace", "=", "False", ")", "\n", "\n", "", "for", "gap_time", "in", "range", "(", "gap_duration", ")", ":", "\n", "\n", "                ", "for", "muptipl_inputs", "in", "range", "(", "FLAGS", ".", "amount_of_frames_as_input", ")", ":", "\n", "\n", "                    ", "for", "marker", "in", "random_markers", ":", "\n", "\n", "                        ", "mask", "[", "batch", "]", "[", "time_fr", "]", "[", "marker", "+", "123", "*", "muptipl_inputs", "]", "=", "0", "\n", "mask", "[", "batch", "]", "[", "time_fr", "]", "[", "marker", "+", "41", "+", "123", "*", "muptipl_inputs", "]", "=", "0", "\n", "mask", "[", "batch", "]", "[", "time_fr", "]", "[", "marker", "+", "82", "+", "123", "*", "muptipl_inputs", "]", "=", "0", "\n", "\n", "", "", "time_fr", "+=", "1", "\n", "if", "time_fr", ">=", "gap_length", "+", "start_fr", ":", "\n", "                    ", "break", "\n", "\n", "# Make sure not to use the same markers twice in a raw", "\n", "", "", "p", "=", "1.0", "/", "(", "41", "-", "FLAGS", ".", "amount_of_missing_markers", ")", "\n", "probabilities", "=", "[", "0", "if", "marker", "in", "random_markers", "else", "p", "for", "marker", "in", "range", "(", "41", ")", "]", "\n", "\n", "", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.ae.train.save_motion": [[628, 646], ["open", "np.savetxt", "print", "motion.reshape"], "function", ["None"], ["", "def", "save_motion", "(", "motion", ",", "file_name", ")", ":", "\n", "    ", "\"\"\"\n    Save the motion into a csv file\n    :param motion:     sequence of the motion 3d coordinates\n    :param file_name:  file to write the motion into\n    :return:           nothing\n    \"\"\"", "\n", "\n", "with", "open", "(", "file_name", ",", "'w'", ")", "as", "fp", ":", "\n", "\n", "        ", "if", "not", "FLAGS", ".", "reccurent", ":", "\n", "# Reshape input - to have just one frame at a time", "\n", "            ", "to_output", "=", "motion", ".", "reshape", "(", "-", "1", ",", "FLAGS", ".", "frame_size", ")", "\n", "", "else", ":", "\n", "            ", "to_output", "=", "motion", "\n", "\n", "", "np", ".", "savetxt", "(", "fp", ",", "to_output", ",", "delimiter", "=", "\",\"", ")", "\n", "print", "(", "\"Motion was written to \"", "+", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.flags.home_out": [[9, 11], ["os.path.join"], "function", ["None"], ["def", "home_out", "(", "path", ")", ":", "\n", "  ", "return", "pjoin", "(", "os", ".", "environ", "[", "'HOME'", "]", ",", "'tmp'", ",", "'MoCap'", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.DataSet.__init__": [[22, 28], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sequences", ",", "batch_size", ")", ":", "\n", "        ", "self", ".", "_batch_size", "=", "batch_size", "\n", "self", ".", "_sequences", "=", "sequences", "# all the sequnces in the dataset", "\n", "self", ".", "_num_sequences", "=", "sequences", ".", "shape", "[", "0", "]", "\n", "self", ".", "_epochs_completed", "=", "0", "\n", "self", ".", "_index_in_epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.DataSet.sequences": [[29, 32], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sequences", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sequences", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.DataSet.num_sequences": [[33, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_sequences", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_sequences", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.DataSet.epochs_completed": [[37, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "epochs_completed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_epochs_completed", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.DataSet.next_batch": [[41, 56], ["numpy.arange", "numpy.random.shuffle"], "methods", ["None"], ["", "def", "next_batch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the next batch of sequences from this data set.\"\"\"", "\n", "batch_numb", "=", "self", ".", "_index_in_epoch", "\n", "self", ".", "_index_in_epoch", "+=", "self", ".", "_batch_size", "\n", "if", "self", ".", "_index_in_epoch", ">", "self", ".", "_num_sequences", ":", "\n", "# Finished epoch", "\n", "            ", "self", ".", "_epochs_completed", "+=", "1", "\n", "# Shuffle the data", "\n", "perm", "=", "np", ".", "arange", "(", "self", ".", "_num_sequences", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "perm", ")", "\n", "self", ".", "_sequences", "=", "self", ".", "_sequences", "[", "perm", "]", "\n", "# Start next epoch", "\n", "batch_numb", "=", "0", "\n", "self", ".", "_index_in_epoch", "=", "self", ".", "_batch_size", "\n", "", "return", "self", ".", "_sequences", "[", "batch_numb", ":", "batch_numb", "+", "self", ".", "_batch_size", ":", "1", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_c3d_file": [[65, 177], ["open", "btk.btkAcquisitionFileReader", "btk.btkAcquisitionFileReader.SetFilename", "btk.btkAcquisitionFileReader.Update", "btk.btkAcquisitionFileReader.GetOutput", "numpy.array", "range", "btk.btkC3DFileIO", "btk.btkC3DFileIO.Read", "list", "print", "numpy.zeros", "range", "reader.GetOutput.GetPointFrameNumber", "np.array.reshape", "numpy.amax", "reader.GetOutput.GetPoints().GetItemNumber", "reader.GetOutput.GetPoint().GetLabel", "len", "print", "print", "numpy.average", "numpy.average", "numpy.average", "range", "numpy.absolute", "print", "acq.GetPoint().GetLabel.split", "print", "reader.GetOutput.GetPointUnit", "reader.GetOutput.GetPoint().GetValues", "print", "print", "range", "numpy.dstack", "numpy.array", "reader.GetOutput.GetPoints", "reader.GetOutput.GetPoint", "acq.GetPoint().GetLabel.split", "print", "print", "acq.GetPoint().GetLabel.split", "acq.GetPoint().GetLabel.split", "open.readline().splitlines", "reader.GetOutput.GetPoint", "reader.GetOutput.GetPointFrameNumber", "list.append", "open.readline"], "function", ["None"], ["", "def", "read_c3d_file", "(", "file_name", ")", ":", "\n", "    ", "\"\"\"\n    Reads a file from CMU MoCap dataset in the c3d format\n\n       Returns:\n            sequence [sequence_length,frame_size] - 3d coords in the hips-centered coordinates\n            hips [frame_size]                     - coordinates of the hips\n    Args:\n        filename - adress of the file with the MoCap data in the c3d format\n    Returns:\n        sequence - array T * ND\n    \"\"\"", "\n", "\n", "# First read a set of marker labels, in order to filter out unnasesery one", "\n", "labels_file", "=", "open", "(", "\"MainLabels.txt\"", ",", "\"r\"", ")", "\n", "\n", "debug", "=", "False", "\n", "\n", "# Read the data", "\n", "reader", "=", "btk", ".", "btkAcquisitionFileReader", "(", ")", "\n", "reader", ".", "SetFilename", "(", "file_name", ")", "# set a filename to the reader", "\n", "reader", ".", "Update", "(", ")", "\n", "acq", "=", "reader", ".", "GetOutput", "(", ")", "# acq is the btk aquisition object", "\n", "\n", "all_3d_coords", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "point_id", "=", "0", "\n", "\n", "# Get subject name", "\n", "name", "=", "''", "\n", "for", "i", "in", "range", "(", "0", ",", "acq", ".", "GetPoints", "(", ")", ".", "GetItemNumber", "(", ")", ")", ":", "\n", "        ", "label_string", "=", "acq", ".", "GetPoint", "(", "i", ")", ".", "GetLabel", "(", ")", "\n", "name_parts", "=", "len", "(", "label_string", ".", "split", "(", "':'", ",", "2", ")", ")", "\n", "if", "debug", ":", "\n", "            ", "print", "(", "label_string", ".", "split", "(", "':'", ",", "2", ")", ")", "\n", "", "if", "(", "name_parts", "==", "2", "and", "label_string", ".", "split", "(", "':'", ",", "2", ")", "[", "1", "]", "==", "\"LSHO\"", ")", ":", "\n", "            ", "name", "=", "label_string", ".", "split", "(", "':'", ",", "2", ")", "[", "0", "]", "+", "':'", "\n", "\n", "", "", "if", "debug", ":", "\n", "        ", "print", "(", "name", ")", "\n", "\n", "# Check scaling factor", "\n", "", "file_instance", "=", "btk", ".", "btkC3DFileIO", "(", ")", "\n", "file_instance", ".", "Read", "(", "file_name", ",", "acq", ")", "\n", "\n", "if", "debug", ":", "\n", "        ", "print", "(", "\"Units:\"", ",", "acq", ".", "GetPointUnit", "(", ")", ")", "\n", "\n", "", "missing_markers", "=", "list", "(", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "# Get the next label", "\n", "            ", "label", "=", "name", "+", "labels_file", ".", "readline", "(", ")", ".", "splitlines", "(", ")", "[", "0", "]", "\n", "if", "debug", "and", "point_id", "<", "7", ":", "\n", "                ", "print", "(", "label", ")", "\n", "", "next_point", "=", "acq", ".", "GetPoint", "(", "label", ")", ".", "GetValues", "(", ")", "\n", "", "except", "IndexError", ":", "\n", "            ", "print", "(", "'Read'", ",", "point_id", ",", "'skeleton markers during'", ",", "acq", ".", "GetPointFrameNumber", "(", ")", ",", "'frames'", ")", "\n", "break", "\n", "\n", "# Check if the data is there", "\n", "", "if", "next_point", "[", "0", "]", "[", "0", "]", "==", "0", "and", "next_point", "[", "0", "]", "[", "1", "]", "==", "0", "and", "next_point", "[", "0", "]", "[", "2", "]", "==", "0", ":", "\n", "            ", "print", "(", "'Problematic label was '", ",", "label", ")", "\n", "print", "(", "'Last: '", ",", "next_point", "[", "-", "1", "]", ")", "\n", "for", "time_step", "in", "range", "(", "next_point", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "next_point", "[", "time_step", "]", "[", "0", "]", "==", "0", ":", "\n", "                    ", "missing_markers", ".", "append", "(", "point_id", ")", "\n", "\n", "# Concatanate curr chunks to all of them", "\n", "", "", "", "all_3d_coords", "=", "np", ".", "dstack", "(", "[", "all_3d_coords", ",", "next_point", "]", ")", "if", "all_3d_coords", ".", "size", "else", "np", ".", "array", "(", "next_point", ")", "\n", "\n", "point_id", "+=", "1", "\n", "\n", "", "print", "(", "missing_markers", ")", "\n", "\n", "# Convert to the hips centered coordinates", "\n", "hips", "=", "np", ".", "zeros", "(", "[", "all_3d_coords", ".", "shape", "[", "0", "]", ",", "3", "]", ")", "# coordinates of the hips at each time-step", "\n", "\n", "for", "time_step", "in", "range", "(", "all_3d_coords", ".", "shape", "[", "0", "]", ")", ":", "\n", "# Obtain hips coords", "\n", "        ", "hips_x", "=", "np", ".", "average", "(", "all_3d_coords", "[", "time_step", "]", "[", "0", "]", "[", "23", ":", "27", "]", ")", "\n", "hips_y", "=", "np", ".", "average", "(", "all_3d_coords", "[", "time_step", "]", "[", "1", "]", "[", "23", ":", "27", "]", ")", "\n", "hips_z", "=", "np", ".", "average", "(", "all_3d_coords", "[", "time_step", "]", "[", "2", "]", "[", "23", ":", "27", "]", ")", "\n", "hips", "[", "time_step", "]", "=", "[", "hips_x", ",", "hips_y", ",", "hips_z", "]", "\n", "\n", "# Subtract hips coors from each joint", "\n", "all_3d_coords", "[", "time_step", "]", "-=", "hips", "[", "time_step", "]", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "amount_of_frames", "=", "acq", ".", "GetPointFrameNumber", "(", ")", "\n", "\n", "# Replace missing markers with the same marker at the end of the sequence", "\n", "for", "marker_id", "in", "missing_markers", ":", "\n", "        ", "for", "coord", "in", "range", "(", "3", ")", ":", "\n", "            ", "if", "marker_id", ">", "22", "and", "marker_id", "<", "27", ":", "# if that are the hips", "\n", "                ", "all_3d_coords", "[", "time_step", "]", "[", "coord", "]", "[", "marker_id", "]", "=", "0", "# center - hips coords", "\n", "", "else", ":", "\n", "                ", "all_3d_coords", "[", "time_step", "]", "[", "coord", "]", "[", "marker_id", "]", "=", "all_3d_coords", "[", "amount_of_frames", "-", "1", "]", "[", "coord", "]", "[", "marker_id", "]", "\n", "\n", "# Make a proper array shape : concatenate all coords into one vector", "\n", "", "", "", "mocap_seq", "=", "all_3d_coords", ".", "reshape", "(", "all_3d_coords", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "# Calculate max_val", "\n", "max", "=", "np", ".", "amax", "(", "np", ".", "absolute", "(", "mocap_seq", ")", ")", "\n", "if", "max", ">", "100000", ":", "\n", "        ", "print", "(", "\"\\nWATCH! The file \"", ",", "file_name", ",", "\" had maximal value \"", ",", "max", ",", "\"\\n\"", ")", "\n", "\n", "# For debug - Visualize the skeleton", "\n", "# visualize(mocap_seq)", "\n", "\n", "", "return", "mocap_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_unlabeled_data": [[179, 261], ["data.DataSets", "print", "data.read_a_folder", "print", "print", "print", "np.divide.mean", "numpy.amax", "numpy.amax", "numpy.maximum", "numpy.divide", "numpy.divide", "read_a_folder.max", "read_a_folder.min", "print", "print", "print", "data.DataSet", "data.DataSet", "numpy.std", "print", "exit", "data.read_a_folder", "data.read_a_folder", "numpy.absolute", "numpy.absolute", "print", "exit", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_a_folder", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_a_folder", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_a_folder"], ["", "def", "read_unlabeled_data", "(", "train_dir", ",", "evaluate", ")", ":", "\n", "    ", "\"\"\"\n      Reads all 3 datasets from CMU MoCap dataset in C3D format\n\n      Args:\n          train_dir - address to the train, dev and eval datasets\n          evaluate - flag : weather we want to evaluate a network or just optimize hyperparameters\n      Returns:\n          datasets - object of class DataSets, containing Train and Eval datasets\n          max_val - maximal value in the raw data ( for post-processing)\n          mean_pose - mean pose in the raw data ( for post-processing)\n    \"\"\"", "\n", "\n", "data_sets", "=", "DataSets", "(", ")", "\n", "\n", "# Get constants from the file", "\n", "data_dir", "=", "FLAGS", ".", "data_dir", "\n", "chunk_length", "=", "FLAGS", ".", "chunk_length", "\n", "stride", "=", "FLAGS", ".", "chunking_stride", "\n", "\n", "if", "stride", ">", "chunk_length", ":", "\n", "        ", "print", "(", "\n", "'ERROR! \\nYou have stride bigger than lentgh of chunks. '", "\n", "'Please, change those values at flags.py, so that you don\\'t ignore the data'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# #########             Get TRAIN data                  ###########", "\n", "", "print", "(", "'\\nReading train data from the following folder ... '", ",", "data_dir", "+", "'/train'", ")", "\n", "\n", "train_data", "=", "read_a_folder", "(", "data_dir", "+", "'/train'", ")", "\n", "\n", "[", "amount_of_train_strings", ",", "seq_length", ",", "dof", "]", "=", "train_data", ".", "shape", "\n", "print", "(", "'\\n'", "+", "str", "(", "amount_of_train_strings", ")", "+", "' sequences with length '", "+", "str", "(", "\n", "seq_length", ")", "+", "' will be used for training'", ")", "\n", "\n", "#         #########             Get TEST data                  ###########", "\n", "\n", "print", "(", "'\\nReading test data from the following folder : '", ",", "data_dir", "+", "'/eval'", ")", "\n", "if", "evaluate", ":", "\n", "        ", "test_data", "=", "read_a_folder", "(", "data_dir", "+", "'/eval'", ")", "\n", "", "else", ":", "\n", "        ", "test_data", "=", "read_a_folder", "(", "data_dir", "+", "'/dev'", ")", "\n", "\n", "", "[", "amount_of_test_strings", ",", "seq_length", ",", "dof", "]", "=", "test_data", ".", "shape", "\n", "print", "(", "'\\n'", "+", "str", "(", "amount_of_test_strings", ")", "+", "' sequences with length '", "+", "\n", "str", "(", "seq_length", ")", "+", "' will be used for testing'", ")", "\n", "\n", "# Do mean normalization : substract mean pose", "\n", "mean_pose", "=", "train_data", ".", "mean", "(", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "train_data", "=", "train_data", "-", "mean_pose", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "test_data", "=", "test_data", "-", "mean_pose", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", "]", "\n", "\n", "# Scales all values in the input_data to be between -1 and 1", "\n", "eps", "=", "1e-8", "\n", "max_train", "=", "np", ".", "amax", "(", "np", ".", "absolute", "(", "train_data", ")", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "max_test", "=", "np", ".", "amax", "(", "np", ".", "absolute", "(", "test_data", ")", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "max_val", "=", "np", ".", "maximum", "(", "max_train", ",", "max_test", ")", "\n", "train_data", "=", "np", ".", "divide", "(", "train_data", ",", "max_val", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", "]", "+", "eps", ")", "\n", "test_data", "=", "np", ".", "divide", "(", "test_data", ",", "max_val", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", "]", "+", "eps", ")", "\n", "\n", "# Check the data range", "\n", "max_", "=", "test_data", ".", "max", "(", ")", "\n", "min_", "=", "test_data", ".", "min", "(", ")", "\n", "\n", "print", "(", "\"MAximum value in the normalized test dataset : \"", "+", "str", "(", "max_", ")", ")", "\n", "print", "(", "\"Minimum value in the normalized test dataset : \"", "+", "str", "(", "min_", ")", ")", "\n", "\n", "print", "(", "'\\nTrain data shape: '", ",", "train_data", ".", "shape", ")", "\n", "\n", "data_sets", ".", "train", "=", "DataSet", "(", "train_data", ",", "FLAGS", ".", "batch_size", ")", "\n", "data_sets", ".", "test", "=", "DataSet", "(", "test_data", ",", "FLAGS", ".", "batch_size", ")", "\n", "\n", "# Assign variance", "\n", "data_sets", ".", "train", ".", "sigma", "=", "np", ".", "std", "(", "train_data", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "\n", "# Check if we have enough data", "\n", "if", "data_sets", ".", "train", ".", "_num_sequences", "<", "data_sets", ".", "train", ".", "_batch_size", ":", "\n", "        ", "print", "(", "'ERROR: We have got not enough data!'", "\n", "' Reduce batch_size or increase amount of subfolder you use.'", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "return", "data_sets", ",", "max_val", ",", "mean_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_a_folder": [[263, 289], ["numpy.array", "os.listdir", "numpy.array", "os.listdir", "print", "data.read_c3d_file", "numpy.array", "numpy.vstack", "numpy.array", "range", "len"], "function", ["home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_c3d_file"], ["", "def", "read_a_folder", "(", "curr_dir", ")", ":", "\n", "    ", "chunk_length", "=", "FLAGS", ".", "chunk_length", "\n", "stride", "=", "FLAGS", ".", "chunking_stride", "\n", "\n", "data", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "for", "sub_dir", "in", "os", ".", "listdir", "(", "curr_dir", ")", ":", "\n", "        ", "for", "filename", "in", "os", ".", "listdir", "(", "curr_dir", "+", "'/'", "+", "sub_dir", ")", ":", "\n", "            ", "curr_sequence", "=", "read_c3d_file", "(", "curr_dir", "+", "'/'", "+", "sub_dir", "+", "'/'", "+", "filename", ")", "\n", "\n", "# Split sequence into chunks", "\n", "curr_chunks", "=", "np", ".", "array", "(", "[", "curr_sequence", "[", "i", ":", "i", "+", "chunk_length", ",", ":", "]", "for", "i", "in", "\n", "range", "(", "0", ",", "len", "(", "curr_sequence", ")", "-", "chunk_length", ",", "stride", ")", "]", ")", "\n", "\n", "if", "curr_chunks", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "# Concatanate curr chunks to all of them", "\n", "                ", "data", "=", "np", ".", "vstack", "(", "[", "data", ",", "curr_chunks", "]", ")", "if", "data", ".", "size", "else", "np", ".", "array", "(", "curr_chunks", ")", "\n", "\n", "", "", "print", "(", "data", ".", "shape", ")", "\n", "\n", "if", "data", ".", "shape", "[", "0", "]", ">", "50000", ":", "\n", "            ", "break", "\n", "\n", "", "", "data", "=", "np", ".", "array", "(", "data", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.add_noise": [[291, 305], ["tf.random_normal", "numpy.multiply"], "function", ["None"], ["", "def", "add_noise", "(", "x", ",", "variance_multiplier", ",", "sigma", ")", ":", "\n", "    ", "\"\"\"\n           Add Gaussian noise to the data\n           Args:\n               x                   - input vector\n               variance_multiplier - coefficient to multiple a variance of the noise on\n               sigma               - variance of the dataset\n           Returns:\n               x - output vector, noisy data\n    \"\"\"", "\n", "eps", "=", "1e-15", "\n", "noise", "=", "tf", ".", "random_normal", "(", "x", ".", "shape", ",", "0.0", ",", "stddev", "=", "np", ".", "multiply", "(", "sigma", ",", "variance_multiplier", ")", "+", "eps", ")", "\n", "x", "=", "x", "+", "noise", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_dataset_and_write_in_binary": [[307, 347], ["data.read_unlabeled_data", "open", "data.train._sequences.tofile", "open.close", "open", "data.test._sequences.tofile", "open.close", "open", "data.train.sigma.tofile", "open.close", "open", "max_val.tofile", "open.close", "open", "mean_pose.tofile", "open.close", "print"], "function", ["home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_unlabeled_data"], ["", "def", "read_dataset_and_write_in_binary", "(", "evaluate", ")", ":", "\n", "    ", "\"\"\"\n              Reads 3 datasets: \"Train\",\"Dev\" and \"Eval\" from the CMU MoCap dataset in bvh format\n              And write them in the binary format.\n              Will get the address of the folder with the data from flags.py\n              Args:\n                  evaluate - flag, weather we evaluate the system or we optimize hyper-parameters\n              Returns:\n                  will write binary files in the same folder as the original data\n    \"\"\"", "\n", "\n", "# Get the data", "\n", "data", ",", "max_val", ",", "mean_pose", "=", "read_unlabeled_data", "(", "FLAGS", ".", "data_dir", ",", "False", ")", "# read_all_the_data()", "\n", "\n", "# Write all important information into binary files", "\n", "\n", "# Datasets themselfs", "\n", "train_file", "=", "open", "(", "FLAGS", ".", "data_dir", "+", "'/train.binary'", ",", "'wb'", ")", "\n", "data", ".", "train", ".", "_sequences", ".", "tofile", "(", "train_file", ")", "\n", "train_file", ".", "close", "(", ")", "\n", "\n", "eval_file", "=", "open", "(", "FLAGS", ".", "data_dir", "+", "'/eval.binary'", ",", "'wb'", ")", "\n", "data", ".", "test", ".", "_sequences", ".", "tofile", "(", "eval_file", ")", "\n", "eval_file", ".", "close", "(", ")", "\n", "\n", "# Dataset properties", "\n", "\n", "sigma_file", "=", "open", "(", "FLAGS", ".", "data_dir", "+", "'/variance.binary'", ",", "'wb'", ")", "\n", "data", ".", "train", ".", "sigma", ".", "tofile", "(", "sigma_file", ")", "\n", "sigma_file", ".", "close", "(", ")", "\n", "\n", "max_val_file", "=", "open", "(", "FLAGS", ".", "data_dir", "+", "'/maximums.binary'", ",", "'wb'", ")", "\n", "max_val", ".", "tofile", "(", "max_val_file", ")", "\n", "max_val_file", ".", "close", "(", ")", "\n", "\n", "mean_file", "=", "open", "(", "FLAGS", ".", "data_dir", "+", "'/mean.binary'", ",", "'wb'", ")", "\n", "mean_pose", ".", "tofile", "(", "mean_file", ")", "\n", "mean_file", ".", "close", "(", ")", "\n", "\n", "print", "(", "'All the binary files for the dataset was saved in the folder '", ",", "FLAGS", ".", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_binary_dataset": [[349, 362], ["numpy.fromfile", "int", "dataset.reshape.reshape"], "function", ["None"], ["", "def", "read_binary_dataset", "(", "dataset_name", ")", ":", "\n", "    ", "filename", "=", "FLAGS", ".", "data_dir", "+", "'/'", "+", "dataset_name", "+", "'.binary'", "\n", "dataset", "=", "np", ".", "fromfile", "(", "filename", ")", "\n", "amount_of_frames", "=", "int", "(", "dataset", ".", "shape", "[", "0", "]", "/", "(", "FLAGS", ".", "chunk_length", "*", "FLAGS", ".", "frame_size", "*", "\n", "FLAGS", ".", "amount_of_frames_as_input", ")", ")", "\n", "\n", "# Clip array so that it divides exactly into the inputs we want", "\n", "dataset", "=", "dataset", "[", "0", ":", "amount_of_frames", "*", "FLAGS", ".", "chunk_length", "*", "FLAGS", ".", "frame_size", "*", "\n", "FLAGS", ".", "amount_of_frames_as_input", "]", "\n", "# Reshape", "\n", "dataset", "=", "dataset", ".", "reshape", "(", "amount_of_frames", ",", "FLAGS", ".", "chunk_length", ",", "FLAGS", ".", "frame_size", "\n", "*", "FLAGS", ".", "amount_of_frames_as_input", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_datasets_from_binary": [[364, 414], ["data.DataSets", "data.read_binary_dataset", "print", "data.read_binary_dataset", "print", "numpy.arange", "numpy.random.shuffle", "data.DataSet", "data.DataSet", "numpy.std", "numpy.fromfile", "numpy.fromfile", "print", "exit", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_binary_dataset", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_binary_dataset"], ["", "def", "read_datasets_from_binary", "(", ")", ":", "\n", "    ", "\"\"\"\n      Reads train and test datasets and their properties from binary file format\n\n      Will take them from the corresponding file in the folder, which is defined by FLAGS.data_dir\n\n      Returns:\n          datasets  - object of class DataSets, containing Train and Eval datasets\n          max_val   - maximal value in the raw data ( for post-processing)\n          mean_pose - mean pose in the raw data ( for post-processing)\n\n    \"\"\"", "\n", "data_sets", "=", "DataSets", "(", ")", "\n", "\n", "#         #########             Get TRAIN data                  ###########", "\n", "\n", "train_data", "=", "read_binary_dataset", "(", "'train'", ")", "\n", "[", "amount_of_train_strings", ",", "seq_length", ",", "DoF", "]", "=", "train_data", ".", "shape", "\n", "print", "(", "'\\n'", "+", "str", "(", "amount_of_train_strings", ")", "+", "' sequences with length '", "+", "str", "(", "seq_length", ")", "+", "' and '", "\n", "+", "str", "(", "FLAGS", ".", "amount_of_frames_as_input", ")", "+", "' frames in each will be used for training'", ")", "\n", "\n", "#         #########             Get TEST data                  ###########", "\n", "\n", "test_data", "=", "read_binary_dataset", "(", "'eval'", ")", "\n", "[", "amount_of_test_strings", ",", "seq_length", ",", "DoF", "]", "=", "test_data", ".", "shape", "\n", "print", "(", "str", "(", "amount_of_test_strings", ")", "+", "' sequences with length '", "+", "str", "(", "seq_length", ")", "+", "\n", "' will be used for testing'", ")", "\n", "\n", "# Shuffle the data", "\n", "perm", "=", "np", ".", "arange", "(", "amount_of_train_strings", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "perm", ")", "\n", "train_data", "=", "train_data", "[", "perm", "]", "\n", "\n", "data_sets", ".", "train", "=", "DataSet", "(", "train_data", ",", "FLAGS", ".", "batch_size", ")", "\n", "data_sets", ".", "test", "=", "DataSet", "(", "test_data", ",", "FLAGS", ".", "batch_size", ")", "\n", "\n", "# Assign variance", "\n", "data_sets", ".", "train", ".", "sigma", "=", "np", ".", "std", "(", "train_data", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "\n", "\n", "# Read maximal value and mean pose before normalizatio", "\n", "max_val", "=", "np", ".", "fromfile", "(", "FLAGS", ".", "data_dir", "+", "'/maximums.binary'", ")", "\n", "mean_pose", "=", "np", ".", "fromfile", "(", "FLAGS", ".", "data_dir", "+", "'/mean.binary'", ")", "\n", "\n", "# Check if we have enough data", "\n", "if", "data_sets", ".", "train", ".", "_num_sequences", "<", "data_sets", ".", "train", ".", "_batch_size", ":", "\n", "        ", "print", "(", "'ERROR: We have got not enough data! '", "\n", "'Reduce batch_size or increase amount of subfolder you use.'", ")", "\n", "exit", "(", "1", ")", "\n", "\n", "", "return", "data_sets", ",", "max_val", ",", "mean_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.write_test_seq_in_binary": [[416, 431], ["open", "data.read_c3d_file", "read_c3d_file.tofile", "open.close", "print"], "function", ["home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_c3d_file"], ["", "def", "write_test_seq_in_binary", "(", "input_file_name", ",", "output_file_name", ")", ":", "\n", "    ", "\"\"\" Read test sequence in c3d format and\n        write it into the binart file\n\n      Args:\n        input_file_name:  the name of the input file\n        output_file_name: the name of the output file\n      Returns:\n        nothing\n    \"\"\"", "\n", "test_file", "=", "open", "(", "output_file_name", ",", "'wb'", ")", "\n", "test_seq", "=", "read_c3d_file", "(", "input_file_name", ")", "\n", "test_seq", ".", "tofile", "(", "test_file", ")", "\n", "test_file", ".", "close", "(", ")", "\n", "print", "(", "\"The test sequence was read from\"", ",", "input_file_name", ",", "\" and written to\"", ",", "output_file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.read_test_seq_from_binary": [[433, 455], ["numpy.fromfile", "read_seq.reshape.reshape", "int", "read_seq.reshape.reshape"], "function", ["None"], ["", "def", "read_test_seq_from_binary", "(", "binary_file_name", ")", ":", "\n", "    ", "\"\"\" Read test sequence from the binart file\n\n          Args:\n            binary_file_name:  the name of the input binary file\n          Returns:\n            read_seq:          test sequence\n    \"\"\"", "\n", "# Read the sequence", "\n", "read_seq", "=", "np", ".", "fromfile", "(", "binary_file_name", ")", "\n", "# Reshape", "\n", "read_seq", "=", "read_seq", ".", "reshape", "(", "-", "1", ",", "FLAGS", ".", "frame_size", ")", "\n", "amount_of_frames", "=", "int", "(", "read_seq", ".", "shape", "[", "0", "]", "/", "(", "FLAGS", ".", "chunk_length", "*", "FLAGS", ".", "amount_of_frames_as_input", ")", ")", "\n", "\n", "if", "amount_of_frames", ">", "0", ":", "\n", "# Clip array so that it divides exactly into the inputs we want", "\n", "        ", "read_seq", "=", "read_seq", "[", "0", ":", "amount_of_frames", "*", "FLAGS", ".", "chunk_length", "*", "FLAGS", ".", "amount_of_frames_as_input", "]", "\n", "\n", "# Reshape", "\n", "", "read_seq", "=", "read_seq", ".", "reshape", "(", "-", "1", ",", "FLAGS", ".", "frame_size", "*", "FLAGS", ".", "amount_of_frames_as_input", ")", "\n", "\n", "return", "read_seq", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.loss_reconstruction": [[457, 477], ["tf.name_scope", "tf.convert_to_tensor", "tf.convert_to_tensor", "tf.subtract", "tf.multiply", "tf.reduce_mean", "tf.cast", "tf.cast", "tf.square"], "function", ["None"], ["", "def", "loss_reconstruction", "(", "output", ",", "target", ",", "max_vals", ")", ":", "\n", "    ", "\"\"\" Reconstruction error\n\n    Args:\n      output:    tensor of net output\n      target:    tensor of net we are trying to reconstruct\n      max_vals:  array of absolute maximal values in the dataset,\n                 is used for scaling an error to the original space\n    Returns:\n      Scalar tensor of mean eucledean distance\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"reconstruction_loss\"", ")", ":", "\n", "        ", "net_output_tf", "=", "tf", ".", "convert_to_tensor", "(", "tf", ".", "cast", "(", "output", ",", "tf", ".", "float32", ")", ",", "name", "=", "'input'", ")", "\n", "target_tf", "=", "tf", ".", "convert_to_tensor", "(", "tf", ".", "cast", "(", "target", ",", "tf", ".", "float32", ")", ",", "name", "=", "'target'", ")", "\n", "# Euclidean distance between net_output_tf,target_tf", "\n", "error", "=", "tf", ".", "subtract", "(", "net_output_tf", ",", "target_tf", ")", "\n", "# Convert it back from the [-1,1] to original values", "\n", "error_scaled", "=", "tf", ".", "multiply", "(", "error", ",", "max_vals", "[", "np", ".", "newaxis", ",", ":", "]", "+", "1e-15", ")", "\n", "squared_error", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "error_scaled", ")", ")", "\n", "return", "squared_error", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.visualize": [[478, 510], ["mocap_seq.reshape", "matplotlib.figure", "plt.figure.add_subplot", "range", "matplotlib.show", "another_seq.reshape", "data.point_cloud", "data.point_cloud"], "function", ["home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.point_cloud", "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.point_cloud"], ["", "", "def", "visualize", "(", "mocap_seq", ",", "another_seq", "=", "None", ")", ":", "\n", "    ", "\"\"\" Make 3d visualization of 3 key frames from the mocap sequence\n\n    Args:\n      mocap_seq:    motion sequence to visualize\n      another_seq:  motion sequence to compare to\n    Returns:\n      nothing\n    \"\"\"", "\n", "\n", "\n", "all_3d_coords", "=", "mocap_seq", ".", "reshape", "(", "-", "1", ",", "3", ",", "41", ")", "# Concatanate all coords into one vector", "\n", "\n", "# For debug - Visualize the skeleton", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "\n", "start_frame", "=", "320", "\n", "\n", "if", "another_seq", "is", "not", "None", ":", "\n", "        ", "another_3d_coords", "=", "another_seq", ".", "reshape", "(", "-", "1", ",", "3", ",", "41", ")", "\n", "\n", "", "for", "step", "in", "range", "(", "start_frame", ",", "start_frame", "+", "15", ",", "5", ")", ":", "\n", "\n", "# Draw one point cloud", "\n", "        ", "point_cloud", "(", "ax", ",", "all_3d_coords", ",", "step", ")", "\n", "\n", "if", "another_seq", "is", "not", "None", ":", "\n", "# Draw another point cloud", "\n", "            ", "point_cloud", "(", "ax", ",", "another_3d_coords", ",", "step", ",", "True", ",", "all_3d_coords", ")", "\n", "\n", "", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.Svito-zar_NN-for-Missing-Marker-Reconstruction.utils.data.point_cloud": [[512, 592], ["ax.scatter3D", "ax.scatter3D", "ax.scatter3D", "ax.scatter3D", "list", "numpy.array", "list", "numpy.array", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "numpy.add", "ax.plot", "numpy.add", "ax.plot", "range", "numpy.add", "ax.plot", "np.array.append", "np.array.append"], "function", ["None"], ["", "def", "point_cloud", "(", "ax", ",", "all_3d_coords", ",", "step", ",", "diff_colors", "=", "False", ",", "other_3d_coords", "=", "None", ")", ":", "\n", "    ", "\"\"\" plot 3d points cloud + links to another cloud, if needed (other_3d_coords is not None)\n\n    Args:\n      ax:               axis to plot at\n      all_3d_coords:    main 3d sequence\n      step:             at which time-step do we want to be\n      diff_colors:      if we want to use different colors\n      other_3d_coords: the second 3d sequence\n    Returns:\n      nothing\n    \"\"\"", "\n", "\n", "start_frame", "=", "320", "\n", "treshhold_0", "=", "14", "\n", "treshhold_1", "=", "20", "\n", "treshhold_2", "=", "27", "\n", "coef", "=", "180", "\n", "\n", "colors", "=", "[", "'#000000'", ",", "'#000000'", ",", "'#bebebe'", ",", "'#bebebe'", "]", "\n", "\n", "if", "diff_colors", ":", "\n", "        ", "colors", "=", "[", "'#228b22'", ",", "'#228b22'", ",", "'#7fffd4'", ",", "'#7fffd4'", "]", "\n", "\n", "# Visualize a 3D point cloud", "\n", "", "ax", ".", "scatter3D", "(", "all_3d_coords", "[", "step", "]", "[", "0", "]", "[", ":", "treshhold_0", "]", ",", "\n", "np", ".", "add", "(", "all_3d_coords", "[", "step", "]", "[", "1", "]", "[", ":", "treshhold_0", "]", ",", "(", "step", "-", "start_frame", ")", "*", "coef", ")", ",", "\n", "all_3d_coords", "[", "step", "]", "[", "2", "]", "[", ":", "treshhold_0", "]", ",", "c", "=", "colors", "[", "0", "]", ",", "marker", "=", "'o'", ")", "\n", "ax", ".", "scatter3D", "(", "all_3d_coords", "[", "step", "]", "[", "0", "]", "[", "treshhold_0", ":", "treshhold_1", "]", ",", "np", ".", "add", "(", "\n", "all_3d_coords", "[", "step", "]", "[", "1", "]", "[", "treshhold_0", ":", "treshhold_1", "]", ",", "(", "step", "-", "start_frame", ")", "*", "coef", ")", ",", "\n", "all_3d_coords", "[", "step", "]", "[", "2", "]", "[", "treshhold_0", ":", "treshhold_1", "]", ",", "c", "=", "colors", "[", "1", "]", ",", "marker", "=", "'o'", ")", "\n", "ax", ".", "scatter3D", "(", "all_3d_coords", "[", "step", "]", "[", "0", "]", "[", "treshhold_1", ":", "treshhold_2", "]", ",", "np", ".", "add", "(", "\n", "all_3d_coords", "[", "step", "]", "[", "1", "]", "[", "treshhold_1", ":", "treshhold_2", "]", ",", "(", "step", "-", "start_frame", ")", "*", "coef", ")", ",", "\n", "all_3d_coords", "[", "step", "]", "[", "2", "]", "[", "treshhold_1", ":", "treshhold_2", "]", ",", "c", "=", "colors", "[", "2", "]", ",", "marker", "=", "'o'", ")", "\n", "ax", ".", "scatter3D", "(", "all_3d_coords", "[", "step", "]", "[", "0", "]", "[", "treshhold_2", ":", "]", ",", "\n", "np", ".", "add", "(", "all_3d_coords", "[", "step", "]", "[", "1", "]", "[", "treshhold_2", ":", "]", ",", "(", "step", "-", "start_frame", ")", "*", "coef", ")", ",", "\n", "all_3d_coords", "[", "step", "]", "[", "2", "]", "[", "treshhold_2", ":", "]", ",", "c", "=", "colors", "[", "3", "]", ",", "marker", "=", "'o'", ")", "\n", "\n", "# Find which points are present", "\n", "\n", "key_point_arm", "=", "[", "]", "\n", "for", "point", "in", "list", "(", "[", "0", ",", "1", ",", "2", ",", "7", ",", "8", ",", "9", "]", ")", ":", "\n", "        ", "if", "all_3d_coords", "[", "step", "]", "[", "0", "]", "[", "point", "]", "!=", "0", "and", "all_3d_coords", "[", "step", "]", "[", "0", "]", "[", "point", "+", "1", "]", "!=", "0", ":", "\n", "            ", "if", "all_3d_coords", "[", "step", "]", "[", "1", "]", "[", "point", "]", "!=", "0", "and", "all_3d_coords", "[", "step", "]", "[", "1", "]", "[", "point", "+", "1", "]", "!=", "0", ":", "\n", "                ", "if", "all_3d_coords", "[", "step", "]", "[", "2", "]", "[", "point", "]", "!=", "0", "and", "all_3d_coords", "[", "step", "]", "[", "2", "]", "[", "point", "+", "1", "]", "!=", "0", ":", "\n", "                    ", "key_point_arm", ".", "append", "(", "point", ")", "\n", "", "", "", "", "key_point_arm", "=", "np", ".", "array", "(", "key_point_arm", ")", "\n", "\n", "key_point_leg", "=", "[", "]", "\n", "for", "point", "in", "list", "(", "[", "27", ",", "34", "]", ")", ":", "\n", "        ", "if", "all_3d_coords", "[", "step", "]", "[", "0", "]", "[", "point", "]", "!=", "0", "and", "all_3d_coords", "[", "step", "]", "[", "0", "]", "[", "point", "+", "1", "]", "!=", "0", ":", "\n", "            ", "if", "all_3d_coords", "[", "step", "]", "[", "1", "]", "[", "point", "]", "!=", "0", "and", "all_3d_coords", "[", "step", "]", "[", "1", "]", "[", "point", "+", "1", "]", "!=", "0", ":", "\n", "                ", "if", "all_3d_coords", "[", "step", "]", "[", "2", "]", "[", "point", "]", "!=", "0", "and", "all_3d_coords", "[", "step", "]", "[", "2", "]", "[", "point", "+", "1", "]", "!=", "0", ":", "\n", "                    ", "key_point_leg", ".", "append", "(", "point", ")", "\n", "", "", "", "", "key_point_leg", "=", "np", ".", "array", "(", "key_point_leg", ")", "\n", "\n", "# Add lines in between", "\n", "\n", "for", "point", "in", "key_point_arm", ":", "\n", "        ", "xline", "=", "all_3d_coords", "[", "step", "]", "[", "0", "]", "[", "point", ":", "point", "+", "2", "]", "\n", "yline", "=", "np", ".", "add", "(", "all_3d_coords", "[", "step", "]", "[", "1", "]", "[", "point", ":", "point", "+", "2", "]", ",", "(", "step", "-", "start_frame", ")", "*", "coef", ")", "\n", "zline", "=", "all_3d_coords", "[", "step", "]", "[", "2", "]", "[", "point", ":", "point", "+", "2", "]", "\n", "ax", ".", "plot", "(", "xline", ",", "yline", ",", "zline", ",", "c", "=", "colors", "[", "0", "]", ")", "\n", "\n", "", "for", "point", "in", "key_point_leg", ":", "\n", "        ", "xline", "=", "all_3d_coords", "[", "step", "]", "[", "0", "]", "[", "point", ":", "point", "+", "3", ":", "2", "]", "\n", "yline", "=", "np", ".", "add", "(", "all_3d_coords", "[", "step", "]", "[", "1", "]", "[", "point", ":", "point", "+", "3", ":", "2", "]", ",", "(", "step", "-", "start_frame", ")", "*", "coef", ")", "\n", "zline", "=", "all_3d_coords", "[", "step", "]", "[", "2", "]", "[", "point", ":", "point", "+", "3", ":", "2", "]", "\n", "ax", ".", "plot", "(", "xline", ",", "yline", ",", "zline", ",", "c", "=", "colors", "[", "3", "]", ")", "\n", "\n", "\n", "# Add lines between our different point clouds", "\n", "\n", "", "if", "other_3d_coords", "is", "not", "None", ":", "\n", "        ", "for", "point", "in", "range", "(", "41", ")", ":", "\n", "            ", "xline", "=", "[", "all_3d_coords", "[", "step", "]", "[", "0", "]", "[", "point", "]", ",", "other_3d_coords", "[", "step", "]", "[", "0", "]", "[", "point", "]", "]", "\n", "yline", "=", "np", ".", "add", "(", "[", "all_3d_coords", "[", "step", "]", "[", "1", "]", "[", "point", "]", ",", "other_3d_coords", "[", "step", "]", "[", "1", "]", "[", "point", "]", "]", ",", "\n", "(", "step", "-", "start_frame", ")", "*", "coef", ")", "\n", "zline", "=", "[", "all_3d_coords", "[", "step", "]", "[", "2", "]", "[", "point", "]", ",", "other_3d_coords", "[", "step", "]", "[", "2", "]", "[", "point", "]", "]", "\n", "ax", ".", "plot", "(", "xline", ",", "yline", ",", "zline", ",", "c", "=", "'r'", ")", "\n", "\n"]]}