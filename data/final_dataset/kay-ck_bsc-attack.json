{"home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_lrcn.pil_to_tensor": [[13, 23], ["spatial_transforms.spatial_Compose", "spatial_transforms.spatial_Compose.", "spatial_transforms.spatial_Compose", "spatial_transforms.spatial_Compose.permute", "spatial_transforms.ToTensor", "spatial_transforms.ToTensor", "spatial_transforms.Normalize", "spatial_transforms.spatial_Compose.", "BSCAttack_lrcn.mask_frame"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.mask_frame"], ["def", "pil_to_tensor", "(", "inputs", ")", ":", "\n", "    ", "mean", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "std", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "if", "inputs", ".", "mode", "==", "'L'", ":", "\n", "        ", "transform", "=", "spatial_Compose", "(", "[", "ToTensor", "(", "255", ")", "]", ")", "\n", "inputs", "=", "transform", "(", "inputs", ")", "\n", "", "else", ":", "\n", "        ", "transform", "=", "spatial_Compose", "(", "[", "ToTensor", "(", "255", ")", ",", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "inputs", "=", "transform", "(", "inputs", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_lrcn.tensor_to_pil": [[25, 31], ["torchvision.transforms.Compose", "transforms.Compose.", "inv_transform.permute", "spatial_transforms.Normalize", "torchvision.transforms.ToPILImage"], "function", ["None"], ["", "def", "tensor_to_pil", "(", "inputs", ")", ":", "\n", "    ", "mean", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "std", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "inv_transform", "=", "transforms", ".", "Compose", "(", "[", "Normalize", "(", "mean", ",", "std", ")", ",", "transforms", ".", "ToPILImage", "(", "'RGB'", ")", "]", ")", "\n", "inputs", "=", "inv_transform", "(", "inputs", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_lrcn.mask_frame": [[33, 43], ["frame.convert", "PIL.Image.new", "PIL.ImageDraw.Draw", "ImageDraw.Draw.rectangle", "PIL.Image.alpha_composite().convert", "PIL.Image.new", "PIL.ImageDraw.Draw", "ImageDraw.Draw.rectangle", "BSCAttack_lrcn.pil_to_tensor", "BSCAttack_lrcn.pil_to_tensor", "PIL.Image.alpha_composite"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.pil_to_tensor", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.pil_to_tensor"], ["", "def", "mask_frame", "(", "frame", ",", "x_pos", ",", "y_pos", ",", "alpha", ",", "t", ",", "H", ",", "W", ",", "patch", ")", ":", "\n", "    ", "rgba_frame", "=", "frame", ".", "convert", "(", "'RGBA'", ")", "\n", "patch_overlay", "=", "Image", ".", "new", "(", "'RGBA'", ",", "rgba_frame", ".", "size", ",", "(", "255", ",", "255", ",", "255", ",", "0", ")", ")", "\n", "patch_draw", "=", "ImageDraw", ".", "Draw", "(", "patch_overlay", ")", "\n", "patch_draw", ".", "rectangle", "(", "(", "x_pos", "-", "t", ",", "y_pos", ",", "x_pos", "-", "t", "+", "patch", ",", "y_pos", "+", "patch", ")", ",", "fill", "=", "(", "255", ",", "255", ",", "255", ",", "alpha", ")", ")", "\n", "mask_frame", "=", "Image", ".", "alpha_composite", "(", "rgba_frame", ",", "patch_overlay", ")", ".", "convert", "(", "'RGB'", ")", "\n", "rec_overlay", "=", "Image", ".", "new", "(", "'L'", ",", "(", "H", ",", "W", ")", ",", "(", "255", ")", ")", "\n", "rec_draw", "=", "ImageDraw", ".", "Draw", "(", "rec_overlay", ")", "\n", "rec_draw", ".", "rectangle", "(", "(", "x_pos", "-", "t", ",", "y_pos", ",", "x_pos", "-", "t", "+", "patch", ",", "y_pos", "+", "patch", ")", ",", "fill", "=", "(", "0", ")", ")", "\n", "return", "pil_to_tensor", "(", "mask_frame", ")", ",", "pil_to_tensor", "(", "rec_overlay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_lrcn.check_overlay": [[45, 54], ["combo.squeeze.squeeze", "font.getsize", "range", "len", "range", "abs", "abs"], "function", ["None"], ["", "def", "check_overlay", "(", "text", ",", "font", ",", "combo", ",", "n_occlu", ")", ":", "\n", "    ", "combo", "=", "combo", ".", "squeeze", "(", "0", ")", "\n", "text_size_x", ",", "text_size_y", "=", "font", ".", "getsize", "(", "text", ")", "\n", "p_l", "=", "len", "(", "combo", ")", "//", "n_occlu", "\n", "for", "i", "in", "range", "(", "n_occlu", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "i", "+", "1", ",", "n_occlu", ")", ":", "\n", "            ", "if", "(", "abs", "(", "combo", "[", "i", "*", "p_l", "+", "0", "]", "-", "combo", "[", "j", "*", "p_l", "+", "0", "]", ")", "<", "text_size_y", ")", "and", "(", "abs", "(", "combo", "[", "i", "*", "p_l", "+", "1", "]", "-", "combo", "[", "j", "*", "p_l", "+", "1", "]", ")", "<", "text_size_x", ")", ":", "\n", "                ", "return", "True", "\n", "", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_lrcn.process": [[56, 97], ["PatchAttack_config.configure_PA", "print", "print", "print", "print", "print", "print", "open", "json.load", "open", "f.readlines", "torch.LongTensor", "torch.nn.functional.softmax().argmax", "print", "len", "os.path.join", "os.path.join", "index.append", "print", "PatchAttack_attackers.MPA", "PA.MPA.attack", "total_list.append", "len", "int", "str", "torch.nn.functional.softmax", "print", "range", "len", "ids.strip", "model", "int", "adv_clip[].size", "BSCAttack_lrcn.tensor_to_pil", "tensor_to_pil.save", "torch.unsqueeze", "str"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_attackers.BSCA.attack", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.tensor_to_pil"], ["", "def", "process", "(", "data_loader", ",", "model", ",", "opt", ",", "class_names", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "result_path", ",", "'ucf101_patch_lrcn.txt'", ")", ",", "'r'", ")", "as", "it", ":", "\n", "        ", "index_patch", "=", "json", ".", "load", "(", "it", ")", "\n", "", "configure_PA", "(", "target", "=", "False", ",", "n_occlu", "=", "1", ",", "rl_batch", "=", "500", ",", "steps", "=", "50", ",", "MPA_color", "=", "False", ")", "\n", "total_list", "=", "[", "]", "\n", "count", "=", "0", "\n", "query_num", "=", "0", "\n", "total_area", "=", "0", "\n", "total_salient", "=", "0", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "opt", ".", "result_path", ",", "'ucf101_196_lrcn.txt'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "content", "=", "f", ".", "readlines", "(", ")", "\n", "index", "=", "[", "]", "\n", "for", "ids", "in", "content", ":", "\n", "            ", "index", ".", "append", "(", "int", "(", "ids", ".", "strip", "(", "'\\n'", ")", ")", ")", "\n", "", "", "for", "i", "in", "index", ":", "\n", "        ", "input_tensor", ",", "labels", "=", "data_loader", "[", "i", "]", "\n", "patch", "=", "index_patch", "[", "str", "(", "i", ")", "]", "\n", "label_tensor", "=", "torch", ".", "LongTensor", "(", "[", "labels", "[", "1", "]", "]", ")", "\n", "predict", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "model", "(", "torch", ".", "unsqueeze", "(", "input_tensor", ",", "dim", "=", "0", ")", ")", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "if", "predict", "==", "label_tensor", ":", "\n", "            ", "print", "(", "'attack'", ")", "\n", "dir_title", "=", "class_names", "[", "int", "(", "label_tensor", ")", "]", "\n", "MPA", "=", "PA", ".", "MPA", "(", "dir_title", ")", "\n", "adv_clip", ",", "rcd", ",", "attack_dir", "=", "MPA", ".", "attack", "(", "patch", ",", "model", "=", "model", ",", "input_tensor", "=", "input_tensor", ",", "label_tensor", "=", "label_tensor", ",", "target", "=", "45", ",", "input_name", "=", "'{}'", ".", "format", "(", "labels", "[", "0", "]", ")", ")", "\n", "if", "rcd", ".", "non_target_success", "[", "0", "]", ":", "\n", "                ", "print", "(", "'success'", ")", "\n", "count", "+=", "1", "\n", "query_num", "+=", "rcd", ".", "queries", "[", "0", "]", "\n", "total_area", "+=", "rcd", ".", "areas", "[", "0", "]", "\n", "total_salient", "+=", "rcd", ".", "salients", "[", "0", "]", "\n", "for", "j", "in", "range", "(", "adv_clip", "[", "0", "]", ".", "size", "(", "0", ")", ")", ":", "\n", "                    ", "frame", "=", "tensor_to_pil", "(", "adv_clip", "[", "0", "]", "[", "j", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "frame", ".", "save", "(", "attack_dir", "+", "'/'", "+", "str", "(", "i", "*", "16", "+", "j", ")", "+", "'.png'", ")", "\n", "", "", "total_list", ".", "append", "(", "labels", "[", "0", "]", ")", "\n", "", "print", "(", "'[{}/{}]\\t'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "data_loader", ")", ")", ")", "\n", "", "print", "(", "'\u653b\u51fb\u4e4b\u540e\uff1a'", ",", "count", ")", "\n", "print", "(", "'\u653b\u51fb\u4e4b\u524d\uff1a'", ",", "len", "(", "total_list", ")", ")", "\n", "print", "(", "'\u653b\u51fb\u6210\u529f\u7387\uff1a'", ",", "count", "/", "len", "(", "total_list", ")", ")", "\n", "print", "(", "'\u5e73\u5747\u67e5\u8be2\u6570'", ",", "query_num", "/", "count", ")", "\n", "print", "(", "'\u6270\u52a8\u50cf\u7d20\u7387\uff1a'", ",", "total_area", "/", "count", ")", "\n", "print", "(", "'\u6270\u52a8\u663e\u8457\u7387\uff1a'", ",", "total_salient", "/", "count", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.spatial_Compose.__init__": [[23, 25], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.spatial_Compose.__call__": [[26, 30], ["t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "img", "=", "t", "(", "img", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.spatial_Compose.randomize_parameters": [[31, 34], ["t.randomize_parameters"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.MultiScaleRandomCrop.randomize_parameters"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "t", ".", "randomize_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.ToTensor.__init__": [[41, 43], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "norm_value", "=", "255", ")", ":", "\n", "        ", "self", ".", "norm_value", "=", "norm_value", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.ToTensor.__call__": [[44, 83], ["isinstance", "torch.ByteTensor.view", "torch.ByteTensor.transpose().transpose().contiguous", "isinstance", "torch.from_numpy", "torch.ByteTensor.float().div", "isinstance", "numpy.zeros", "pic.copyto", "torch.from_numpy", "torch.from_numpy", "torch.ByteTensor.float().div", "pic.transpose", "numpy.array", "torch.from_numpy", "torch.ByteTensor", "len", "torch.ByteTensor.transpose().transpose", "torch.ByteTensor.float", "numpy.array", "torch.ByteStorage.from_buffer", "torch.ByteTensor.float", "pic.tobytes", "torch.ByteTensor.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "pic", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            pic (PIL.Image or numpy.ndarray): Image to be converted to tensor.\n        Returns:\n            Tensor: Converted image.\n        \"\"\"", "\n", "if", "isinstance", "(", "pic", ",", "np", ".", "ndarray", ")", ":", "\n", "# handle numpy array", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "pic", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "# backward compatibility", "\n", "return", "img", ".", "float", "(", ")", ".", "div", "(", "self", ".", "norm_value", ")", "\n", "", "if", "accimage", "is", "not", "None", "and", "isinstance", "(", "pic", ",", "accimage", ".", "Image", ")", ":", "\n", "            ", "nppic", "=", "np", ".", "zeros", "(", "\n", "[", "pic", ".", "channels", ",", "pic", ".", "height", ",", "pic", ".", "width", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "pic", ".", "copyto", "(", "nppic", ")", "\n", "return", "torch", ".", "from_numpy", "(", "nppic", ")", "\n", "# handle PIL Image", "\n", "", "if", "pic", ".", "mode", "==", "'I'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int32", ",", "copy", "=", "False", ")", ")", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "pic", ",", "np", ".", "int16", ",", "copy", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "torch", ".", "ByteTensor", "(", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "pic", ".", "tobytes", "(", ")", ")", ")", "\n", "# PIL image mode: 1, L, P, I, F, RGB, YCbCr, RGBA, CMYK", "\n", "", "if", "pic", ".", "mode", "==", "'YCbCr'", ":", "\n", "            ", "nchannel", "=", "3", "\n", "", "elif", "pic", ".", "mode", "==", "'I;16'", ":", "\n", "            ", "nchannel", "=", "1", "\n", "", "else", ":", "\n", "            ", "nchannel", "=", "len", "(", "pic", ".", "mode", ")", "\n", "", "img", "=", "img", ".", "view", "(", "pic", ".", "size", "[", "1", "]", ",", "pic", ".", "size", "[", "0", "]", ",", "nchannel", ")", "\n", "# put it from HWC to CHW format", "\n", "# yikes, this transpose takes 80% of the loading time/CPU", "\n", "img", "=", "img", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "0", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "if", "isinstance", "(", "img", ",", "torch", ".", "ByteTensor", ")", ":", "\n", "            ", "return", "img", ".", "float", "(", ")", ".", "div", "(", "self", ".", "norm_value", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.ToTensor.randomize_parameters": [[84, 86], ["None"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.Normalize.__init__": [[99, 102], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.Normalize.__call__": [[103, 114], ["zip", "t.sub_().div_", "t.sub_"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            tensor (Tensor): Tensor image of size (C, H, W) to be normalized.\n        Returns:\n            Tensor: Normalized image.\n        \"\"\"", "\n", "# TODO: make efficient", "\n", "for", "t", ",", "m", ",", "s", "in", "zip", "(", "tensor", ",", "self", ".", "mean", ",", "self", ".", "std", ")", ":", "\n", "            ", "t", ".", "sub_", "(", "m", ")", ".", "div_", "(", "s", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.Normalize.randomize_parameters": [[115, 117], ["None"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.Scale.__init__": [[131, 137], ["isinstance", "isinstance", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "assert", "isinstance", "(", "size", ",", "\n", "int", ")", "or", "(", "isinstance", "(", "size", ",", "collections", ".", "Iterable", ")", "and", "\n", "len", "(", "size", ")", "==", "2", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.Scale.__call__": [[138, 159], ["isinstance", "img.resize", "int", "img.resize", "int", "img.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be scaled.\n        Returns:\n            PIL.Image: Rescaled image.\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "size", ",", "int", ")", ":", "\n", "            ", "w", ",", "h", "=", "img", ".", "size", "\n", "if", "(", "w", "<=", "h", "and", "w", "==", "self", ".", "size", ")", "or", "(", "h", "<=", "w", "and", "h", "==", "self", ".", "size", ")", ":", "\n", "                ", "return", "img", "\n", "", "if", "w", "<", "h", ":", "\n", "                ", "ow", "=", "self", ".", "size", "\n", "oh", "=", "int", "(", "self", ".", "size", "*", "h", "/", "w", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "else", ":", "\n", "                ", "oh", "=", "self", ".", "size", "\n", "ow", "=", "int", "(", "self", ".", "size", "*", "w", "/", "h", ")", "\n", "return", "img", ".", "resize", "(", "(", "ow", ",", "oh", ")", ",", "self", ".", "interpolation", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "img", ".", "resize", "(", "self", ".", "size", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.Scale.randomize_parameters": [[160, 162], ["None"], "methods", ["None"], ["", "", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.CenterCrop.__init__": [[172, 177], ["isinstance", "int", "int"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "if", "isinstance", "(", "size", ",", "numbers", ".", "Number", ")", ":", "\n", "            ", "self", ".", "size", "=", "(", "int", "(", "size", ")", ",", "int", "(", "size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.CenterCrop.__call__": [[178, 190], ["int", "int", "img.crop", "round", "round"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be cropped.\n        Returns:\n            PIL.Image: Cropped image.\n        \"\"\"", "\n", "w", ",", "h", "=", "img", ".", "size", "\n", "th", ",", "tw", "=", "self", ".", "size", "\n", "x1", "=", "int", "(", "round", "(", "(", "w", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "h", "-", "th", ")", "/", "2.", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x1", "+", "tw", ",", "y1", "+", "th", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.CenterCrop.randomize_parameters": [[191, 193], ["None"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.CornerCrop.__init__": [[197, 205], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "crop_position", "=", "None", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "if", "crop_position", "is", "None", ":", "\n", "            ", "self", ".", "randomize", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "randomize", "=", "False", "\n", "", "self", ".", "crop_position", "=", "crop_position", "\n", "self", ".", "crop_positions", "=", "[", "'c'", ",", "'tl'", ",", "'tr'", ",", "'bl'", ",", "'br'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.CornerCrop.__call__": [[206, 240], ["img.crop.crop.crop", "int", "int", "round", "round"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "if", "self", ".", "crop_position", "==", "'c'", ":", "\n", "            ", "th", ",", "tw", "=", "(", "self", ".", "size", ",", "self", ".", "size", ")", "\n", "x1", "=", "int", "(", "round", "(", "(", "image_width", "-", "tw", ")", "/", "2.", ")", ")", "\n", "y1", "=", "int", "(", "round", "(", "(", "image_height", "-", "th", ")", "/", "2.", ")", ")", "\n", "x2", "=", "x1", "+", "tw", "\n", "y2", "=", "y1", "+", "th", "\n", "", "elif", "self", ".", "crop_position", "==", "'tl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "x2", "=", "self", ".", "size", "\n", "y2", "=", "self", ".", "size", "\n", "", "elif", "self", ".", "crop_position", "==", "'tr'", ":", "\n", "            ", "x1", "=", "image_width", "-", "self", ".", "size", "\n", "y1", "=", "0", "\n", "x2", "=", "image_width", "\n", "y2", "=", "self", ".", "size", "\n", "", "elif", "self", ".", "crop_position", "==", "'bl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "image_height", "-", "self", ".", "size", "\n", "x2", "=", "self", ".", "size", "\n", "y2", "=", "image_height", "\n", "", "elif", "self", ".", "crop_position", "==", "'br'", ":", "\n", "            ", "x1", "=", "image_width", "-", "self", ".", "size", "\n", "y1", "=", "image_height", "-", "self", ".", "size", "\n", "x2", "=", "image_width", "\n", "y2", "=", "image_height", "\n", "\n", "", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.CornerCrop.randomize_parameters": [[241, 246], ["random.randint", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "randomize", ":", "\n", "            ", "self", ".", "crop_position", "=", "self", ".", "crop_positions", "[", "random", ".", "randint", "(", "\n", "0", ",", "\n", "len", "(", "self", ".", "crop_positions", ")", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.RandomHorizontalFlip.__call__": [[251, 261], ["img.transpose"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL.Image): Image to be flipped.\n        Returns:\n            PIL.Image: Randomly flipped image.\n        \"\"\"", "\n", "if", "self", ".", "p", "<", "0.5", ":", "\n", "            ", "return", "img", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.RandomHorizontalFlip.randomize_parameters": [[262, 264], ["random.random"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "p", "=", "random", ".", "random", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.MultiScaleCornerCrop.__init__": [[277, 287], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "scales", ",", "\n", "size", ",", "\n", "interpolation", "=", "Image", ".", "BILINEAR", ",", "\n", "crop_positions", "=", "[", "'c'", ",", "'tl'", ",", "'tr'", ",", "'bl'", ",", "'br'", "]", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n", "self", ".", "crop_positions", "=", "crop_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.MultiScaleCornerCrop.__call__": [[288, 327], ["min", "int", "img.crop.crop.crop", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "min_length", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "crop_size", "=", "int", "(", "min_length", "*", "self", ".", "scale", ")", "\n", "\n", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "if", "self", ".", "crop_position", "==", "'c'", ":", "\n", "            ", "center_x", "=", "image_width", "//", "2", "\n", "center_y", "=", "image_height", "//", "2", "\n", "box_half", "=", "crop_size", "//", "2", "\n", "x1", "=", "center_x", "-", "box_half", "\n", "y1", "=", "center_y", "-", "box_half", "\n", "x2", "=", "center_x", "+", "box_half", "\n", "y2", "=", "center_y", "+", "box_half", "\n", "", "elif", "self", ".", "crop_position", "==", "'tl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "0", "\n", "x2", "=", "crop_size", "\n", "y2", "=", "crop_size", "\n", "", "elif", "self", ".", "crop_position", "==", "'tr'", ":", "\n", "            ", "x1", "=", "image_width", "-", "crop_size", "\n", "y1", "=", "0", "\n", "x2", "=", "image_width", "\n", "y2", "=", "crop_size", "\n", "", "elif", "self", ".", "crop_position", "==", "'bl'", ":", "\n", "            ", "x1", "=", "0", "\n", "y1", "=", "image_height", "-", "crop_size", "\n", "x2", "=", "crop_size", "\n", "y2", "=", "image_height", "\n", "", "elif", "self", ".", "crop_position", "==", "'br'", ":", "\n", "            ", "x1", "=", "image_width", "-", "crop_size", "\n", "y1", "=", "image_height", "-", "crop_size", "\n", "x2", "=", "image_width", "\n", "y2", "=", "image_height", "\n", "\n", "", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.MultiScaleCornerCrop.randomize_parameters": [[328, 333], ["random.randint", "random.randint", "len", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "scale", "=", "self", ".", "scales", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "self", ".", "crop_position", "=", "self", ".", "crop_positions", "[", "random", ".", "randint", "(", "\n", "0", ",", "\n", "len", "(", "self", ".", "crop_positions", ")", "-", "1", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.MultiScaleRandomCrop.__init__": [[337, 341], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scales", ",", "size", ",", "interpolation", "=", "Image", ".", "BILINEAR", ")", ":", "\n", "        ", "self", ".", "scales", "=", "scales", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "interpolation", "=", "interpolation", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.MultiScaleRandomCrop.__call__": [[342, 357], ["min", "int", "img.crop.crop.crop", "img.crop.crop.resize"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "min_length", "=", "min", "(", "img", ".", "size", "[", "0", "]", ",", "img", ".", "size", "[", "1", "]", ")", "\n", "crop_size", "=", "int", "(", "min_length", "*", "self", ".", "scale", ")", "\n", "\n", "image_width", "=", "img", ".", "size", "[", "0", "]", "\n", "image_height", "=", "img", ".", "size", "[", "1", "]", "\n", "\n", "x1", "=", "self", ".", "tl_x", "*", "(", "image_width", "-", "crop_size", ")", "\n", "y1", "=", "self", ".", "tl_y", "*", "(", "image_height", "-", "crop_size", ")", "\n", "x2", "=", "x1", "+", "crop_size", "\n", "y2", "=", "y1", "+", "crop_size", "\n", "\n", "img", "=", "img", ".", "crop", "(", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ")", "\n", "\n", "return", "img", ".", "resize", "(", "(", "self", ".", "size", ",", "self", ".", "size", ")", ",", "self", ".", "interpolation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.MultiScaleRandomCrop.randomize_parameters": [[358, 362], ["random.random", "random.random", "random.randint", "len"], "methods", ["None"], ["", "def", "randomize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "scale", "=", "self", ".", "scales", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "scales", ")", "-", "1", ")", "]", "\n", "self", ".", "tl_x", "=", "random", ".", "random", "(", ")", "\n", "self", ".", "tl_y", "=", "random", ".", "random", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.robot.__init__": [[61, 71], ["BSCAttack_agents.robot.p_pi", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "len", "BSCAttack_agents.robot.mind.parameters"], "methods", ["None"], ["", "", "def", "__init__", "(", "self", ",", "space", ",", "rl_batch", ",", "gamma", ",", "lr", ",", "stable", "=", "True", ")", ":", "\n", "# policy network", "\n", "        ", "self", ".", "mind", "=", "self", ".", "p_pi", "(", "space", ",", "stable", "=", "stable", ")", "\n", "# reward setting", "\n", "self", ".", "gamma", "=", "gamma", "# back prop rewards", "\n", "# optimizer", "\n", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "mind", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "# useful parameters", "\n", "self", ".", "combo_size", "=", "len", "(", "space", ")", "\n", "self", ".", "rl_batch", "=", "rl_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.robot.select_action": [[72, 88], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.sample", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "torch.distributions.categorical.Categorical.log_prob", "BSCAttack_agents.robot.mind", "torch.distributions.categorical.Categorical.sample.unsqueeze", "torch.distributions.categorical.Categorical.log_prob.unsqueeze"], "methods", ["None"], ["", "def", "select_action", "(", "self", ",", "state", ")", ":", "\n", "        ", "\"\"\"\n        generate one parameter\n        input:\n        state: torch.longtensor with size (bs, 1), the sampled action at the last step\n        return:\n        action: torch.longtensor with size (bs, 1)\n        log_p_action: torch.floattensor with size (bs, 1)\n        value: [optional] torch.floattensor with size (bs, 1)\n        \"\"\"", "\n", "p_a", "=", "F", ".", "softmax", "(", "self", ".", "mind", "(", "state", ")", ",", "dim", "=", "1", ")", "\n", "# select action with prob", "\n", "dist", "=", "Categorical", "(", "probs", "=", "p_a", ")", "\n", "action", "=", "dist", ".", "sample", "(", ")", "\n", "log_p_action", "=", "dist", ".", "log_prob", "(", "action", ")", "\n", "return", "action", ".", "unsqueeze", "(", "-", "1", ")", ",", "log_p_action", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.robot.select_combo": [[89, 110], ["torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "BSCAttack_agents.robot.select_action", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "BSCAttack_agents.robot.mind.module.increment_stage", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.robot.select_action"], ["", "def", "select_combo", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        generate the whole sequence of parameters\n        return:\n        combo: torch.longtensor with size (bs, space.size(0):\n               (PREVIOUS STATEMENT) num_occlu * 4 or 7 if color==True)\n        log_p_combo: torch.floattensor with size (bs, space.size(0))\n        rewards_critic: torch.floatensor with size (bs, space.size(0))\n        \"\"\"", "\n", "state", "=", "torch", ".", "zeros", "(", "(", "self", ".", "rl_batch", ",", "1", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "combo", "=", "[", "]", "\n", "log_p_combo", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "combo_size", ")", ":", "\n", "            ", "action", ",", "log_p_action", "=", "self", ".", "select_action", "(", "state", ")", "\n", "combo", ".", "append", "(", "action", ")", "\n", "log_p_combo", ".", "append", "(", "log_p_action", ")", "\n", "state", "=", "action", "\n", "self", ".", "mind", ".", "module", ".", "increment_stage", "(", ")", "\n", "", "combo", "=", "torch", ".", "cat", "(", "combo", ",", "dim", "=", "1", ")", "\n", "log_p_combo", "=", "torch", ".", "cat", "(", "log_p_combo", ",", "dim", "=", "1", ")", "\n", "return", "combo", ",", "log_p_combo", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.agent.__init__": [[113, 131], ["BSCAttack_agents.agent.create_searching_space", "clip_tensor.size", "clip_tensor.size"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.agent.create_searching_space"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "clip_tensor", ",", "target_tensor", ",", "text", ",", "font", ",", "num_occlu", ",", "color", ",", "sigma", ",", "shrink", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        the __init__ function needs to create action space because this relates with\n        the __init__ of the policy network\n        \"\"\"", "\n", "# build environment", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "clip_tensor", "=", "clip_tensor", "\n", "self", ".", "target_tensor", "=", "target_tensor", "\n", "self", ".", "text", "=", "text", "\n", "self", ".", "font", "=", "font", "\n", "# build action space", "\n", "self", ".", "num_occlu", "=", "num_occlu", "\n", "self", ".", "color", "=", "color", "\n", "self", ".", "space", "=", "self", ".", "create_searching_space", "(", "text", ",", "font", ",", "num_occlu", ",", "color", ",", "H", "=", "clip_tensor", ".", "size", "(", "-", "2", ")", ",", "W", "=", "clip_tensor", ".", "size", "(", "-", "1", ")", ")", "\n", "self", ".", "shrink", "=", "shrink", "\n", "# specific reward param", "\n", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.agent.build_robot": [[132, 134], ["BSCAttack_agents.robot.__init__"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__"], ["", "def", "build_robot", "(", "self", ",", "rl_batch", ",", "gamma", ",", "lr", ",", "stable", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "self", ".", "space", ",", "rl_batch", ",", "gamma", ",", "lr", ",", "stable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.agent.create_searching_space": [[135, 162], ["font.getsize", "range", "range", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_searching_space", "(", "text", ",", "font", ",", "num_occlu", ",", "color", "=", "False", ",", "H", "=", "112", ",", "W", "=", "112", ",", "R", "=", "256", ",", "G", "=", "256", ",", "B", "=", "256", ",", "A", "=", "128", ",", "shrink", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        input:\n        num_occlu: the number of occlusion masks\n        color: wheather to optimize the color, if it is true,\n               7 parameters for each occlusion mask\n        H, W: for futher decrease the color size\n        notice: when parameterizing the mask, height comes first. e.g. c_dim. After consideration,\n                I decide to use two coordinate pairs to parameterize the mask.\n        return: list with size 7*num_occlu if color else 4*num_occlu, each item indicates the option number\n        \"\"\"", "\n", "# limit search space if H!=W which relates to the create_mask function", "\n", "if", "W", ">", "H", ":", "\n", "            ", "W", "=", "W", "//", "shrink", "\n", "", "elif", "H", ">", "W", ":", "\n", "            ", "H", "=", "H", "//", "shrink", "\n", "# create space", "\n", "", "search_space", "=", "[", "]", "\n", "text_size_x", ",", "text_size_y", "=", "font", ".", "getsize", "(", "text", ")", "\n", "if", "color", ":", "\n", "            ", "for", "n", "in", "range", "(", "num_occlu", ")", ":", "\n", "                ", "search_space", "+=", "[", "int", "(", "H", "-", "text_size_y", ")", ",", "int", "(", "W", "+", "text_size_x", ")", ",", "int", "(", "A", ")", ",", "int", "(", "R", ")", ",", "int", "(", "G", ")", ",", "int", "(", "B", ")", "]", "\n", "", "", "else", ":", "\n", "            ", "for", "n", "in", "range", "(", "num_occlu", ")", ":", "\n", "                ", "search_space", "+=", "[", "int", "(", "H", "-", "text_size_y", ")", ",", "int", "(", "W", "+", "text_size_x", ")", ",", "int", "(", "A", ")", "]", "\n", "", "", "return", "search_space", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.agent.create_mask": [[163, 239], ["points.size", "points.size", "font.getsize", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "clip.clone().detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "clip.clone().detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "range", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "range", "range", "mask_clip[].size", "BSCAttack_c3d.tensor_to_pil().save", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "clip.clone", "range", "clip.clone", "range", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "BSCAttack_c3d.tensor_to_pil", "BSCAttack_c3d.mask_RGB_frame", "BSCAttack_c3d.tensor_to_pil", "BSCAttack_c3d.mask_frame", "BSCAttack_c3d.tensor_to_pil", "str", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "dis_mask[].sum", "dis_mask[].sum", "dis_mask[].sum", "dis_mask[].sum", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor().cuda", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.tensor_to_pil", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.mask_RGB_frame", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.tensor_to_pil", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.mask_frame", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.tensor_to_pil"], ["", "@", "staticmethod", "\n", "def", "create_mask", "(", "clip", ",", "threshmap", ",", "points", ",", "text", ",", "font", ",", "distributed_mask", "=", "False", ",", "C", "=", "3", ",", "T", "=", "16", ",", "H", "=", "112", ",", "W", "=", "112", ",", "shrink", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        clip: torch.floattensor with size (bs, 3, 16, 112, 112)\n        points: the pixel coordinates in the image, torch.LongTensor with size (bs, num_occlu * 3 or 6 if color is true)\n                if points.size(-1) is a multiple of 6, then distributed_mask=True\n        distributed_mask: flag, if it is true, calculate the distributed masks\n        return:\n        mask_clip: torch.floattensor with size (bs, 3, 16, 112, 112)\n        area: torch.floattensor with size (bs, 1)\n        iou: torch.floattensor with size (bs, 1)\n        \"\"\"", "\n", "bs", "=", "points", ".", "size", "(", "0", ")", "\n", "total", "=", "points", ".", "size", "(", "-", "1", ")", "\n", "if", "~", "distributed_mask", "and", "total", "%", "3", "==", "0", ":", "\n", "            ", "p_l", "=", "3", "\n", "num_occlu", "=", "total", "//", "3", "\n", "", "elif", "total", "%", "6", "==", "0", ":", "\n", "            ", "p_l", "=", "6", "\n", "num_occlu", "=", "total", "//", "6", "\n", "assert", "distributed_mask", "==", "True", ",", "'accourding to num_occlu, distributed_mask should be true'", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "'occlusion num should be a multiple of 3 or 6'", "\n", "# post process combo", "\n", "", "p_combo", "=", "[", "]", "\n", "a_combo", "=", "[", "]", "\n", "text_size_x", ",", "text_size_y", "=", "font", ".", "getsize", "(", "text", ")", "\n", "if", "~", "distributed_mask", ":", "\n", "            ", "for", "o", "in", "range", "(", "num_occlu", ")", ":", "\n", "                ", "p_combo", ".", "append", "(", "torch", ".", "index_select", "(", "points", ",", "dim", "=", "1", ",", "index", "=", "torch", ".", "LongTensor", "(", "[", "o", "*", "p_l", "+", "1", "]", ")", ".", "cuda", "(", ")", ")", "-", "text_size_x", ")", "\n", "p_combo", ".", "append", "(", "torch", ".", "index_select", "(", "points", ",", "dim", "=", "1", ",", "index", "=", "torch", ".", "LongTensor", "(", "[", "o", "*", "p_l", "+", "0", "]", ")", ".", "cuda", "(", ")", ")", ")", "\n", "a_combo", ".", "append", "(", "torch", ".", "index_select", "(", "points", ",", "dim", "=", "1", ",", "index", "=", "torch", ".", "LongTensor", "(", "[", "o", "*", "p_l", "+", "2", "]", ")", ".", "cuda", "(", ")", ")", "+", "127", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "o", "in", "range", "(", "num_occlu", ")", ":", "\n", "                ", "p_combo", ".", "append", "(", "torch", ".", "index_select", "(", "points", ",", "dim", "=", "1", ",", "index", "=", "torch", ".", "LongTensor", "(", "[", "o", "*", "p_l", "+", "1", "]", ")", ".", "cuda", "(", ")", ")", "-", "text_size_x", ")", "\n", "p_combo", ".", "append", "(", "torch", ".", "index_select", "(", "points", ",", "dim", "=", "1", ",", "index", "=", "torch", ".", "LongTensor", "(", "[", "o", "*", "p_l", "+", "0", "]", ")", ".", "cuda", "(", ")", ")", ")", "\n", "p_combo", ".", "append", "(", "torch", ".", "index_select", "(", "points", ",", "dim", "=", "1", ",", "index", "=", "torch", ".", "LongTensor", "(", "[", "o", "*", "p_l", "+", "3", "]", ")", ".", "cuda", "(", ")", ")", ")", "\n", "p_combo", ".", "append", "(", "torch", ".", "index_select", "(", "points", ",", "dim", "=", "1", ",", "index", "=", "torch", ".", "LongTensor", "(", "[", "o", "*", "p_l", "+", "4", "]", ")", ".", "cuda", "(", ")", ")", ")", "\n", "p_combo", ".", "append", "(", "torch", ".", "index_select", "(", "points", ",", "dim", "=", "1", ",", "index", "=", "torch", ".", "LongTensor", "(", "[", "o", "*", "p_l", "+", "5", "]", ")", ".", "cuda", "(", ")", ")", ")", "\n", "a_combo", ".", "append", "(", "torch", ".", "index_select", "(", "points", ",", "dim", "=", "1", ",", "index", "=", "torch", ".", "LongTensor", "(", "[", "o", "*", "p_l", "+", "2", "]", ")", ".", "cuda", "(", ")", ")", "+", "127", ")", "\n", "", "", "p_combo", "=", "torch", ".", "cat", "(", "p_combo", ",", "dim", "=", "1", ")", "\n", "a_combo", "=", "torch", ".", "cat", "(", "a_combo", ",", "dim", "=", "1", ")", "\n", "if", "distributed_mask", ":", "\n", "            ", "mask_clip", "=", "clip", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "dis_mask", "=", "torch", ".", "ones", "(", "(", "bs", ",", "num_occlu", ",", "T", ",", "H", ",", "W", ")", ")", "\n", "area", "=", "torch", ".", "zeros", "(", "bs", ",", "1", ")", "\n", "iou", "=", "torch", ".", "zeros", "(", "bs", ",", "1", ")", "\n", "# make masks", "\n", "for", "item", "in", "range", "(", "bs", ")", ":", "\n", "                ", "for", "o", "in", "range", "(", "num_occlu", ")", ":", "\n", "                    ", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "                        ", "frame", "=", "BSCAttack_c3d", ".", "tensor_to_pil", "(", "mask_clip", "[", "item", ",", ":", ",", "t", ",", ":", ",", ":", "]", ")", "\n", "mask_clip", "[", "item", ",", ":", ",", "t", ",", ":", ",", ":", "]", ",", "dis_mask", "[", "item", ",", "o", ",", "t", ",", ":", ",", ":", "]", "=", "BSCAttack_c3d", ".", "mask_RGB_frame", "(", "frame", ",", "p_combo", "[", "item", "]", "[", "o", "*", "5", "+", "0", "]", ",", "p_combo", "[", "item", "]", "[", "o", "*", "5", "+", "1", "]", ",", "p_combo", "[", "item", "]", "[", "o", "*", "5", "+", "2", "]", ",", "p_combo", "[", "item", "]", "[", "o", "*", "5", "+", "3", "]", ",", "p_combo", "[", "item", "]", "[", "o", "*", "5", "+", "4", "]", ",", "a_combo", "[", "item", "]", "[", "o", "]", ",", "t", ",", "H", ",", "W", ",", "text", ",", "font", ",", "text_size_x", ",", "text_size_y", ")", "\n", "", "", "area", "[", "item", "]", "=", "(", "(", "(", "mask_clip", "[", "item", "]", "-", "clip", "[", "item", "]", ")", "*", "threshmap", ")", "!=", "0.", ")", ".", "sum", "(", ")", "\n", "inter_area", "=", "(", "dis_mask", "[", "item", "]", ".", "sum", "(", "0", ")", "<", "(", "num_occlu", "-", "1.", ")", ")", ".", "sum", "(", ")", "\n", "union_area", "=", "(", "dis_mask", "[", "item", "]", ".", "sum", "(", "0", ")", "!=", "num_occlu", ")", ".", "sum", "(", ")", "\n", "iou", "[", "item", "]", "=", "inter_area", "/", "union_area", "\n", "", "return", "mask_clip", ",", "area", ",", "iou", "\n", "", "else", ":", "\n", "            ", "mask_clip", "=", "clip", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "dis_mask", "=", "torch", ".", "ones", "(", "(", "bs", ",", "num_occlu", ",", "T", ",", "H", ",", "W", ")", ")", "\n", "area", "=", "torch", ".", "zeros", "(", "bs", ",", "1", ")", "\n", "iou", "=", "torch", ".", "zeros", "(", "bs", ",", "1", ")", "\n", "# make masks", "\n", "for", "item", "in", "range", "(", "bs", ")", ":", "\n", "                ", "for", "o", "in", "range", "(", "num_occlu", ")", ":", "\n", "                    ", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "                        ", "frame", "=", "BSCAttack_c3d", ".", "tensor_to_pil", "(", "mask_clip", "[", "item", ",", ":", ",", "t", ",", ":", ",", ":", "]", ")", "\n", "mask_clip", "[", "item", ",", ":", ",", "t", ",", ":", ",", ":", "]", ",", "dis_mask", "[", "item", ",", "o", ",", "t", ",", ":", ",", ":", "]", "=", "BSCAttack_c3d", ".", "mask_frame", "(", "frame", ",", "p_combo", "[", "item", "]", "[", "o", "*", "2", "+", "0", "]", ",", "p_combo", "[", "item", "]", "[", "o", "*", "2", "+", "1", "]", ",", "a_combo", "[", "item", "]", "[", "o", "]", ",", "t", ",", "H", ",", "W", ",", "text", ",", "font", ",", "text_size_x", ",", "text_size_y", ")", "\n", "", "", "area", "[", "item", "]", "=", "(", "(", "(", "mask_clip", "[", "item", "]", "-", "clip", "[", "item", "]", ")", "*", "threshmap", ")", "!=", "0.", ")", ".", "sum", "(", ")", "\n", "inter_area", "=", "(", "dis_mask", "[", "item", "]", ".", "sum", "(", "0", ")", "<", "(", "num_occlu", "-", "1.", ")", ")", ".", "sum", "(", ")", "\n", "union_area", "=", "(", "dis_mask", "[", "item", "]", ".", "sum", "(", "0", ")", "!=", "num_occlu", ")", ".", "sum", "(", ")", "\n", "iou", "[", "item", "]", "=", "inter_area", "/", "union_area", "\n", "", "for", "t", "in", "range", "(", "mask_clip", "[", "0", "]", ".", "size", "(", "1", ")", ")", ":", "\n", "                ", "BSCAttack_c3d", ".", "tensor_to_pil", "(", "mask_clip", "[", "0", "]", "[", ":", ",", "t", ",", ":", ",", ":", "]", ")", ".", "save", "(", "str", "(", "t", ")", "+", "'.png'", ")", "\n", "", "return", "mask_clip", ",", "area", ",", "iou", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.agent.get_reward": [[240, 277], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "model.argmax", "label_filter.float().mean", "target_tensor.cpu", "type", "model", "target_tensor.cuda", "area.cuda", "iou.cuda", "target_tensor.view", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.utils.data.TensorDataset.__len__", "torch.utils.data.TensorDataset.__len__", "torch.utils.data.TensorDataset.__len__", "torch.utils.data.TensorDataset.__len__", "label_filter.float"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.Kinetics.__len__", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.Kinetics.__len__", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.Kinetics.__len__", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.Kinetics.__len__"], ["", "", "@", "staticmethod", "\n", "def", "get_reward", "(", "model", ",", "mask_input_tensor", ",", "target_tensor", ",", "area", ",", "iou", ",", "sigma", "=", "200", ")", ":", "\n", "        ", "\"\"\"\n        input:\n        model: utils.agent.model\n        mask_input_tensor: torch.floattensor with size (bs, 3, 16, 112, 112)\n        target_tensor: torch.longtensor with size (bs, 1)\n        area: torch.floattensor with size (bs, 1)\n        iou: torch.floattensor with size (bs, 1)\n        sigma: controls penalization for the area, the smaller, the more powerful\n        return:\n        reward: torch.floattensor with size (bs, 1)\n        acc: list of accs, label_acc and target_acc [default None]\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "deal_dataset", "=", "TensorDataset", "(", "mask_input_tensor", ",", "target_tensor", ".", "cpu", "(", ")", ")", "\n", "deal_dataloader", "=", "DataLoader", "(", "deal_dataset", ",", "batch_size", "=", "deal_dataset", ".", "__len__", "(", ")", ",", "shuffle", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "for", "deal_data", "in", "deal_dataloader", ":", "\n", "                ", "masked_input_tensor", ",", "target_tensor", "=", "deal_data", "\n", "", "if", "type", "(", "model", ")", "==", "list", ":", "\n", "                ", "output_tensor", ",", "_", "=", "model", "[", "0", "]", "(", "masked_input_tensor", ",", "bool_magic", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "output_tensor", "=", "model", "(", "masked_input_tensor", ")", "\n", "\n", "", "target_tensor", ",", "area", ",", "inter_area", "=", "target_tensor", ".", "cuda", "(", ")", ",", "area", ".", "cuda", "(", ")", ",", "iou", ".", "cuda", "(", ")", "\n", "output_tensor", "=", "F", ".", "softmax", "(", "output_tensor", ",", "dim", "=", "1", ")", "\n", "pred", "=", "output_tensor", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "label_filter", "=", "pred", "==", "target_tensor", ".", "view", "(", "-", "1", ")", "\n", "target_filter", "=", "None", "\n", "label_acc", "=", "label_filter", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "target_acc", "=", "None", "\n", "p_cl", "=", "1.", "-", "torch", ".", "gather", "(", "input", "=", "output_tensor", ",", "dim", "=", "1", ",", "index", "=", "target_tensor", ")", "\n", "reward", "=", "torch", ".", "log", "(", "p_cl", "+", "eps", ")", "+", "(", "-", "inter_area", "/", "sigma", ")", "\n", "acc", "=", "[", "label_acc", ",", "target_acc", "]", "\n", "filters", "=", "[", "label_filter", ",", "target_filter", "]", "\n", "return", "reward", ",", "acc", ",", "filters", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.agent.reward_backward": [[278, 295], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "rewards.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "rewards.size"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "reward_backward", "(", "rewards", ",", "gamma", ")", ":", "\n", "        ", "\"\"\"\n        input:\n        reward: torch.floattensor with size (bs, something)\n        gamma: discount factor\n\n        return:\n        updated_reward: torch.floattensor with the same size as input\n        \"\"\"", "\n", "gamma", "=", "1", "\n", "R", "=", "0", "\n", "updated_rewards", "=", "torch", ".", "zeros", "(", "rewards", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "\n", "for", "i", "in", "range", "(", "rewards", ".", "size", "(", "-", "1", ")", ")", ":", "\n", "            ", "R", "=", "rewards", "[", ":", ",", "-", "(", "i", "+", "1", ")", "]", "+", "gamma", "*", "R", "\n", "updated_rewards", "[", ":", ",", "-", "(", "i", "+", "1", ")", "]", "=", "R", "\n", "", "return", "updated_rewards", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.agent.reinforcement_learn": [[296, 357], ["BSCAttack_agents.agent.clip_tensor.size", "BSCAttack_agents.agent.clip_tensor.size", "BSCAttack_agents.agent.clip_tensor.size", "BSCAttack_agents.agent.clip_tensor.size", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "range", "BSCAttack_agents.agent.clip_tensor.expand().contiguous", "BSCAttack_agents.agent.target_tensor.expand().contiguous", "BSCAttack_agents.agent.mind.cuda", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "BSCAttack_agents.agent.mind.train", "BSCAttack_agents.agent.optimizer.zero_grad", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "range", "BSCAttack_agents.agent.clip_tensor[].permute().numpy().astype", "cv2.saliency.StaticSaliencyFineGrained_create().computeSaliency", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "BSCAttack_agents.agent.select_combo", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "BSCAttack_agents.agent.create_mask", "BSCAttack_agents.agent.get_reward", "mask_clip_batch.size", "r.squeeze", "BSCAttack_agents.agent.reward_backward", "loss.backward", "BSCAttack_agents.agent.optimizer.step", "BSCAttack_agents.agent.optimizer.zero_grad", "BSCAttack_agents.agent.mind.module.reset", "BSCAttack_agents.agent.clip_tensor.expand", "BSCAttack_agents.agent.target_tensor.expand", "area_candidate.min", "BSCAttack_agents.agent.clip_tensor[].permute().numpy", "cv2.saliency.StaticSaliencyFineGrained_create", "BSCAttack_agents.agent.clip_tensor.size", "BSCAttack_agents.agent.clip_tensor.size", "BSCAttack_agents.agent.clip_tensor.size", "BSCAttack_agents.agent.clip_tensor.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "iou[].min", "iou[].view", "cv2.threshold", "combo.size", "BSCAttack_agents.agent.mean", "BSCAttack_agents.agent.std", "BSCAttack_agents.agent.clip_tensor[].permute"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.robot.select_combo", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.agent.create_mask", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.agent.get_reward", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.agent.reward_backward", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.AverageMeter.reset"], ["", "def", "reinforcement_learn", "(", "self", ",", "steps", "=", "150", ",", "baseline_subtraction", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        input:\n        steps: the steps to interact with the environment for the agent\n        baseline_subtraction: flag to use baseline subtraction technique.\n        return:\n        floating_mask_clip: torch.floattensor with size (3, 16, 112, 112)\n        area: torch.floattensor with size (1)\n        \"\"\"", "\n", "C", "=", "self", ".", "clip_tensor", ".", "size", "(", "-", "4", ")", "\n", "T", "=", "self", ".", "clip_tensor", ".", "size", "(", "-", "3", ")", "\n", "H", "=", "self", ".", "clip_tensor", ".", "size", "(", "-", "2", ")", "\n", "W", "=", "self", ".", "clip_tensor", ".", "size", "(", "-", "1", ")", "\n", "queries", "=", "0", "\n", "threshmap", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ",", "T", ",", "H", ",", "W", ")", ")", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "temp_frame", "=", "self", ".", "clip_tensor", "[", ":", ",", "t", ",", ":", ",", ":", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "numpy", "(", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "(", "success", ",", "saliencymap", ")", "=", "cv2", ".", "saliency", ".", "StaticSaliencyFineGrained_create", "(", ")", ".", "computeSaliency", "(", "temp_frame", ")", "\n", "saliencymap", "=", "(", "saliencymap", "*", "255", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "threshmap", "[", "0", ",", "0", ",", "t", ",", ":", ",", ":", "]", "=", "torch", ".", "from_numpy", "(", "cv2", ".", "threshold", "(", "saliencymap", ",", "0", ",", "255", ",", "cv2", ".", "THRESH_BINARY", "|", "cv2", ".", "THRESH_OTSU", ")", "[", "1", "]", "/", "255", ")", "\n", "", "clip_batch", "=", "self", ".", "clip_tensor", ".", "expand", "(", "self", ".", "rl_batch", ",", "self", ".", "clip_tensor", ".", "size", "(", "-", "4", ")", ",", "self", ".", "clip_tensor", ".", "size", "(", "-", "3", ")", ",", "self", ".", "clip_tensor", ".", "size", "(", "-", "2", ")", ",", "self", ".", "clip_tensor", ".", "size", "(", "-", "1", ")", ")", ".", "contiguous", "(", ")", "\n", "target_batch", "=", "self", ".", "target_tensor", ".", "expand", "(", "self", ".", "rl_batch", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "mind", ".", "cuda", "(", ")", "\n", "self", ".", "mind", "=", "nn", ".", "DataParallel", "(", "self", ".", "mind", ",", "device_ids", "=", "None", ")", "\n", "self", ".", "mind", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "# set up non-target attack records", "\n", "floating_mask_clip", "=", "None", "\n", "floating_area", "=", "torch", ".", "Tensor", "(", "[", "C", "*", "T", "*", "H", "*", "W", "]", ")", "\n", "# start learning, interacting with the environments", "\n", "for", "s", "in", "range", "(", "steps", ")", ":", "\n", "# make combo and get reward", "\n", "            ", "combo", ",", "log_p_combo", "=", "self", ".", "select_combo", "(", ")", "\n", "rewards", "=", "torch", ".", "zeros", "(", "combo", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "\n", "mask_clip_batch", ",", "area", ",", "iou", "=", "self", ".", "create_mask", "(", "clip_batch", ",", "threshmap", ",", "combo", ",", "self", ".", "text", ",", "self", ".", "font", ",", "distributed_mask", "=", "self", ".", "color", ",", "T", "=", "T", ",", "H", "=", "H", ",", "W", "=", "W", ")", "\n", "r", ",", "acc", ",", "filters", "=", "self", ".", "get_reward", "(", "self", ".", "model", ",", "mask_clip_batch", ",", "target_batch", ",", "area", ",", "iou", ",", "sigma", "=", "self", ".", "sigma", ")", "\n", "queries", "+=", "mask_clip_batch", ".", "size", "(", "0", ")", "\n", "rewards", "[", ":", ",", "-", "1", "]", "=", "r", ".", "squeeze", "(", "-", "1", ")", "\n", "rewards", "=", "self", ".", "reward_backward", "(", "rewards", ",", "self", ".", "gamma", ")", "\n", "# update records", "\n", "wrong_filter", "=", "~", "filters", "[", "0", "]", "\n", "if", "acc", "[", "0", "]", "!=", "1", "and", "iou", "[", "wrong_filter", "]", ".", "min", "(", ")", "==", "0.", ":", "\n", "                ", "iou_filter", "=", "iou", "[", "wrong_filter", "]", ".", "view", "(", "-", "1", ")", "==", "0.", "\n", "area_candidate", "=", "area", "[", "wrong_filter", "]", "[", "iou_filter", "]", "\n", "temp_floating_area", ",", "temp", "=", "area_candidate", ".", "min", "(", "dim", "=", "0", ")", "\n", "if", "temp_floating_area", "<", "floating_area", ":", "\n", "                    ", "floating_mask_clip", "=", "mask_clip_batch", "[", "wrong_filter", "]", "[", "iou_filter", "]", "[", "temp", "]", "\n", "floating_area", "=", "temp_floating_area", "\n", "", "break", "\n", "# baseline subtraction", "\n", "", "if", "baseline_subtraction", ":", "\n", "                ", "rewards", "=", "(", "rewards", "-", "rewards", ".", "mean", "(", ")", ")", "/", "(", "rewards", ".", "std", "(", ")", "+", "eps", ")", "\n", "# calculate loss", "\n", "", "loss", "=", "(", "-", "log_p_combo", "*", "rewards", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", "retain_graph", "=", "True", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "# reset mind to continuously interact with the environment", "\n", "self", ".", "mind", ".", "module", ".", "reset", "(", ")", "\n", "", "success", "=", "floating_mask_clip", "!=", "None", "\n", "return", "floating_mask_clip", ",", "floating_area", ",", "success", ",", "queries", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.agent.attack": [[358, 380], ["time.time", "BSCAttack_agents.agent", "BSCAttack_agents.agent.build_robot", "BSCAttack_agents.agent.reinforcement_learn", "time.time"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.agent.build_robot", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_agents.agent.reinforcement_learn"], ["", "@", "staticmethod", "\n", "def", "attack", "(", "model", ",", "input_tensor", ",", "target_tensor", ",", "text", ",", "font", ",", "sigma", ",", "lr", "=", "0.03", ",", "baseline_subtraction", "=", "True", ",", "\n", "color", "=", "False", ",", "num_occlu", "=", "4", ",", "rl_batch", "=", "500", ",", "steps", "=", "50", ")", ":", "\n", "        ", "\"\"\"\n        input:\n        model: pytorch model\n        input_tensor: torch.floattensor with size (3, 16, 112, 112)\n        target_tensor: torch.longtensor\n        sigma: scalar, contrain the area of the occlusion\n        lr: learning rate for p_pi, scalar\n        baseline_subtraction: flag to use reward normalization\n        color: flag to search the RGB channel values\n        return:\n        mask_input_tensor: torch.floattensor with size (3, 16, 112, 112)\n        area: scalar with size (1)\n        \"\"\"", "\n", "# time to start", "\n", "attack_begin", "=", "time", ".", "time", "(", ")", "\n", "actor", "=", "agent", "(", "model", ",", "input_tensor", ",", "target_tensor", ",", "text", ",", "font", ",", "num_occlu", ",", "color", ",", "sigma", ")", "\n", "actor", ".", "build_robot", "(", "rl_batch", "=", "rl_batch", ",", "gamma", "=", "1", ",", "lr", "=", "lr", ",", "stable", "=", "True", ")", "\n", "mask_input_tensor", ",", "area", ",", "success", ",", "queries", "=", "actor", ".", "reinforcement_learn", "(", "steps", "=", "steps", ",", "baseline_subtraction", "=", "baseline_subtraction", ")", "\n", "return", "mask_input_tensor", ",", "area", ",", "success", ",", "queries", ",", "time", ".", "time", "(", ")", "-", "attack_begin", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_attackers.BSCA.__init__": [[8, 11], ["os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dir_title", ")", ":", "\n", "# attack dirs", "\n", "        ", "self", ".", "attack_dir", "=", "os", ".", "path", ".", "join", "(", "BSCA_cfg", ".", "attack_dir", ",", "dir_title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_attackers.BSCA.attack": [[12, 56], ["os.path.join", "easydict.EasyDict", "BSCAttack_agents.agent.attack", "easydict.EasyDict.masks.append", "easydict.EasyDict.salients.append", "easydict.EasyDict.success.append", "easydict.EasyDict.queries.append", "easydict.EasyDict.time_used.append", "print", "os.path.exists", "os.makedirs", "easydict.EasyDict.areas.append", "easydict.EasyDict.areas.append", "easydict.EasyDict.areas[].item", "easydict.EasyDict.salients[].item"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_attackers.BSCA.attack"], ["", "def", "attack", "(", "self", ",", "text", ",", "font", ",", "model", ",", "input_tensor", ",", "label_tensor", ",", "input_name", ")", ":", "\n", "# set up attack-dirs", "\n", "        ", "attack_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "attack_dir", ",", "input_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "attack_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "attack_dir", ")", "\n", "# set records", "\n", "", "rcd", "=", "edict", "(", ")", "\n", "rcd", ".", "masks", "=", "[", "]", "\n", "rcd", ".", "RGB_paintings", "=", "[", "]", "\n", "rcd", ".", "combos", "=", "[", "]", "\n", "rcd", ".", "areas", "=", "[", "]", "\n", "rcd", ".", "salients", "=", "[", "]", "\n", "rcd", ".", "non_target_success", "=", "[", "]", "\n", "rcd", ".", "target_success", "=", "[", "]", "\n", "rcd", ".", "queries", "=", "[", "]", "\n", "rcd", ".", "time_used", "=", "[", "]", "\n", "# attack", "\n", "mask_input_tensor", ",", "area", ",", "success", ",", "queries", ",", "time_used", "=", "agent", ".", "attack", "(", "\n", "model", "=", "model", ",", "\n", "input_tensor", "=", "input_tensor", ",", "\n", "target_tensor", "=", "label_tensor", ",", "\n", "text", "=", "text", ",", "\n", "font", "=", "font", ",", "\n", "sigma", "=", "BSCA_cfg", ".", "sigma", ",", "\n", "lr", "=", "BSCA_cfg", ".", "lr", ",", "\n", "baseline_subtraction", "=", "BSCA_cfg", ".", "baseline_sub", ",", "\n", "color", "=", "BSCA_cfg", ".", "color", ",", "\n", "num_occlu", "=", "BSCA_cfg", ".", "n_occlu", ",", "\n", "rl_batch", "=", "BSCA_cfg", ".", "rl_batch", ",", "\n", "steps", "=", "BSCA_cfg", ".", "steps", "\n", ")", "\n", "# update records", "\n", "rcd", ".", "masks", ".", "append", "(", "mask_input_tensor", ")", "\n", "if", "success", ":", "\n", "            ", "rcd", ".", "areas", ".", "append", "(", "(", "(", "mask_input_tensor", "-", "input_tensor", ")", "!=", "0.", ")", ".", "sum", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "rcd", ".", "areas", ".", "append", "(", "area", ")", "\n", "", "rcd", ".", "salients", ".", "append", "(", "area", ")", "\n", "rcd", ".", "success", ".", "append", "(", "success", ")", "\n", "rcd", ".", "queries", ".", "append", "(", "queries", ")", "\n", "rcd", ".", "time_used", ".", "append", "(", "time_used", ")", "\n", "# print records", "\n", "print", "(", "'success: {} | queries: {:.4f} | occluded area: {:.4f} | occluded salient: {:.4f}'", ".", "format", "(", "rcd", ".", "success", "[", "0", "]", ",", "rcd", ".", "queries", "[", "0", "]", ",", "rcd", ".", "areas", "[", "0", "]", ".", "item", "(", ")", ",", "rcd", ".", "salients", "[", "0", "]", ".", "item", "(", ")", ")", ")", "\n", "return", "mask_input_tensor", ",", "rcd", ",", "attack_dir", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_config.configure_BSCA": [[9, 27], ["os.path.join", "str"], "function", ["None"], ["def", "configure_BSCA", "(", "n_occlu", "=", "4", ",", "rl_batch", "=", "500", ",", "steps", "=", "50", ",", "BSCA_color", "=", "False", ")", ":", "\n", "# Attack's shared params", "\n", "    ", "BSCA_cfg", ".", "n_occlu", "=", "n_occlu", "# num of BSCs can put on (default: 4)", "\n", "BSCA_cfg", ".", "lr", "=", "0.03", "# learning rate for RL agent (default: 0.03)", "\n", "BSCA_cfg", ".", "rl_batch", "=", "rl_batch", "# batch number when optimizing a RL agent (default: 500)", "\n", "BSCA_cfg", ".", "steps", "=", "steps", "# steps to optimize each RL agent (default: 50)", "\n", "BSCA_cfg", ".", "sigma", "=", "1000", "# sigam to control the IoU reward (default: 1000.)", "\n", "BSCA_cfg", ".", "sigma_sched", "=", "[", "]", "# sigma schedule for the multiple occlusions (default: n-occlu * sigma)", "\n", "if", "BSCA_cfg", ".", "sigma_sched", "==", "[", "]", ":", "\n", "        ", "BSCA_cfg", ".", "sigma_sched", "=", "[", "BSCA_cfg", ".", "sigma", "]", "*", "BSCA_cfg", ".", "n_occlu", "\n", "", "BSCA_cfg", ".", "color", "=", "BSCA_color", "# flag to use RGB", "\n", "BSCA_cfg", ".", "baseline_sub", "=", "True", "# use baseline subtraction mode", "\n", "# attack dirs", "\n", "attack_dir", "=", "os", ".", "path", ".", "join", "(", "\n", "'n-occlu_{}_color_{}_lr_{}_rl-batch_{}_steps_{}'", ".", "format", "(", "BSCA_cfg", ".", "n_occlu", ",", "BSCA_cfg", ".", "color", ",", "BSCA_cfg", ".", "lr", ",", "BSCA_cfg", ".", "rl_batch", ",", "BSCA_cfg", ".", "steps", ")", ",", "\n", "'sigma-sched_'", "+", "'-'", ".", "join", "(", "[", "str", "(", "item", ")", "for", "item", "in", "BSCA_cfg", ".", "sigma_sched", "]", ")", "\n", ")", "\n", "BSCA_cfg", ".", "attack_dir", "=", "attack_dir", "\n", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.dataset.get_test_set": [[6, 22], ["datasets.c3d.kinetics.Kinetics", "ActivityNet", "datasets.c3d.ucf101.UCF101", "datasets.c3d.hmdb51.HMDB51"], "function", ["None"], ["def", "get_test_set", "(", "opt", ",", "spatial_transform", ",", "temporal_transform", ",", "target_transform", ")", ":", "\n", "    ", "assert", "opt", ".", "dataset", "in", "[", "'kinetics'", ",", "'activitynet'", ",", "'ucf101'", ",", "'hmdb51'", "]", "\n", "assert", "opt", ".", "test_subset", "in", "[", "'val'", ",", "'test'", "]", "\n", "if", "opt", ".", "test_subset", "==", "'val'", ":", "\n", "        ", "subset", "=", "'validation'", "\n", "", "elif", "opt", ".", "test_subset", "==", "'test'", ":", "\n", "        ", "subset", "=", "'testing'", "\n", "", "if", "opt", ".", "dataset", "==", "'kinetics'", ":", "\n", "        ", "test_data", "=", "Kinetics", "(", "opt", ".", "video_path", ",", "opt", ".", "annotation_path", ",", "subset", ",", "0", ",", "spatial_transform", ",", "temporal_transform", ",", "target_transform", ",", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'activitynet'", ":", "\n", "        ", "test_data", "=", "ActivityNet", "(", "opt", ".", "video_path", ",", "opt", ".", "annotation_path", ",", "subset", ",", "True", ",", "0", ",", "spatial_transform", ",", "temporal_transform", ",", "target_transform", ",", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'ucf101'", ":", "\n", "        ", "test_data", "=", "UCF101", "(", "opt", ".", "video_path", ",", "opt", ".", "annotation_path", ",", "subset", ",", "0", ",", "spatial_transform", ",", "temporal_transform", ",", "target_transform", ",", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "dataset", "==", "'hmdb51'", ":", "\n", "        ", "test_data", "=", "HMDB51", "(", "opt", ".", "video_path", ",", "opt", ".", "annotation_path", ",", "subset", ",", "0", ",", "spatial_transform", ",", "temporal_transform", ",", "target_transform", ",", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "return", "test_data", "\n", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.temporal_transforms.LoopPadding.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.temporal_transforms.LoopPadding.__call__": [[10, 19], ["out.append", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "out", "=", "frame_indices", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.temporal_transforms.TemporalBeginCrop.__init__": [[31, 33], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.temporal_transforms.TemporalBeginCrop.__call__": [[34, 43], ["out.append", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "out", "=", "frame_indices", "[", ":", "self", ".", "size", "]", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.temporal_transforms.TemporalCenterCrop.__init__": [[55, 57], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.temporal_transforms.TemporalCenterCrop.__call__": [[58, 78], ["max", "min", "len", "len", "out.append", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_indices (list): frame indices to be cropped.\n        Returns:\n            list: Cropped frame indices.\n        \"\"\"", "\n", "\n", "center_index", "=", "len", "(", "frame_indices", ")", "//", "2", "\n", "begin_index", "=", "max", "(", "0", ",", "center_index", "-", "(", "self", ".", "size", "//", "2", ")", ")", "\n", "end_index", "=", "min", "(", "begin_index", "+", "self", ".", "size", ",", "len", "(", "frame_indices", ")", ")", "\n", "\n", "out", "=", "frame_indices", "[", "begin_index", ":", "end_index", "]", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.temporal_transforms.TemporalRandomCrop.__init__": [[90, 92], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "size", ")", ":", "\n", "        ", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.temporal_transforms.TemporalRandomCrop.__call__": [[93, 113], ["max", "random.randint", "min", "len", "out.append", "len", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "frame_indices", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            frame_indices (list): frame indices to be cropped.\n        Returns:\n            list: Cropped frame indices.\n        \"\"\"", "\n", "\n", "rand_end", "=", "max", "(", "0", ",", "len", "(", "frame_indices", ")", "-", "self", ".", "size", "-", "1", ")", "\n", "begin_index", "=", "random", ".", "randint", "(", "0", ",", "rand_end", ")", "\n", "end_index", "=", "min", "(", "begin_index", "+", "self", ".", "size", ",", "len", "(", "frame_indices", ")", ")", "\n", "\n", "out", "=", "frame_indices", "[", "begin_index", ":", "end_index", "]", "\n", "\n", "for", "index", "in", "out", ":", "\n", "            ", "if", "len", "(", "out", ")", ">=", "self", ".", "size", ":", "\n", "                ", "break", "\n", "", "out", ".", "append", "(", "index", ")", "\n", "\n", "", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.model.generate_model_c3d": [[6, 161], ["pre_act_resnet.resnet200.cuda", "torch.nn.DataParallel", "models.c3d.resnet.resnet10", "print", "torch.load", "pre_act_resnet.resnet200.load_state_dict", "print", "torch.load", "pre_act_resnet.resnet200.load_state_dict", "models.c3d.resnet.resnet18", "models.c3d.wide_resnet.resnet50", "models.c3d.resnet.resnet34", "models.c3d.resnext.resnet50", "models.c3d.resnet.resnet50", "models.c3d.resnext.resnet101", "models.c3d.pre_act_resnet.resnet18", "models.c3d.resnet.resnet101", "models.c3d.resnext.resnet152", "models.c3d.pre_act_resnet.resnet34", "models.c3d.densenet.densenet121", "models.c3d.resnet.resnet152", "models.c3d.pre_act_resnet.resnet50", "models.c3d.densenet.densenet169", "models.c3d.resnet.resnet200", "models.c3d.pre_act_resnet.resnet101", "models.c3d.densenet.densenet201", "models.c3d.pre_act_resnet.resnet152", "models.c3d.densenet.densenet264", "models.c3d.pre_act_resnet.resnet200"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.resnet10", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.resnet18", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.resnet50", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.resnet34", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.resnet50", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.resnet50", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.resnet101", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.resnet18", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.resnet101", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.resnet152", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.resnet34", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.densenet.densenet121", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.resnet152", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.resnet50", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.densenet.densenet169", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.resnet200", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.resnet101", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.densenet.densenet201", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.resnet152", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.densenet.densenet264", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.resnet200"], ["def", "generate_model_c3d", "(", "opt", ")", ":", "\n", "    ", "assert", "opt", ".", "model_type", "in", "[", "'resnet'", ",", "'preresnet'", ",", "'wideresnet'", ",", "'resnext'", ",", "'densenet'", "]", "\n", "if", "opt", ".", "model_type", "==", "'resnet'", ":", "\n", "        ", "assert", "opt", ".", "model_depth", "in", "[", "10", ",", "18", ",", "34", ",", "50", ",", "101", ",", "152", ",", "200", "]", "\n", "if", "opt", ".", "model_depth", "==", "10", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet10", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "18", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet18", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "34", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet34", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "50", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet50", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "101", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet101", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "152", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet152", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "200", ":", "\n", "            ", "model", "=", "resnet", ".", "resnet200", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "", "elif", "opt", ".", "model_type", "==", "'wideresnet'", ":", "\n", "        ", "assert", "opt", ".", "model_depth", "in", "[", "50", "]", "\n", "if", "opt", ".", "model_depth", "==", "50", ":", "\n", "            ", "model", "=", "wide_resnet", ".", "resnet50", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "k", "=", "opt", ".", "wide_resnet_k", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "", "elif", "opt", ".", "model_type", "==", "'resnext'", ":", "\n", "        ", "assert", "opt", ".", "model_depth", "in", "[", "50", ",", "101", ",", "152", "]", "\n", "if", "opt", ".", "model_depth", "==", "50", ":", "\n", "            ", "model", "=", "resnext", ".", "resnet50", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "cardinality", "=", "opt", ".", "resnext_cardinality", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "101", ":", "\n", "            ", "model", "=", "resnext", ".", "resnet101", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "cardinality", "=", "opt", ".", "resnext_cardinality", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "152", ":", "\n", "            ", "model", "=", "resnext", ".", "resnet152", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "cardinality", "=", "opt", ".", "resnext_cardinality", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "", "elif", "opt", ".", "model_type", "==", "'preresnet'", ":", "\n", "        ", "assert", "opt", ".", "model_depth", "in", "[", "18", ",", "34", ",", "50", ",", "101", ",", "152", ",", "200", "]", "\n", "if", "opt", ".", "model_depth", "==", "18", ":", "\n", "            ", "model", "=", "pre_act_resnet", ".", "resnet18", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "34", ":", "\n", "            ", "model", "=", "pre_act_resnet", ".", "resnet34", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "50", ":", "\n", "            ", "model", "=", "pre_act_resnet", ".", "resnet50", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "101", ":", "\n", "            ", "model", "=", "pre_act_resnet", ".", "resnet101", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "152", ":", "\n", "            ", "model", "=", "pre_act_resnet", ".", "resnet152", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "200", ":", "\n", "            ", "model", "=", "pre_act_resnet", ".", "resnet200", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "shortcut_type", "=", "opt", ".", "resnet_shortcut", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "", "elif", "opt", ".", "model_type", "==", "'densenet'", ":", "\n", "        ", "assert", "opt", ".", "model_depth", "in", "[", "121", ",", "169", ",", "201", ",", "264", "]", "\n", "if", "opt", ".", "model_depth", "==", "121", ":", "\n", "            ", "model", "=", "densenet", ".", "densenet121", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "169", ":", "\n", "            ", "model", "=", "densenet", ".", "densenet169", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "201", ":", "\n", "            ", "model", "=", "densenet", ".", "densenet201", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "elif", "opt", ".", "model_depth", "==", "264", ":", "\n", "            ", "model", "=", "densenet", ".", "densenet264", "(", "\n", "num_classes", "=", "opt", ".", "n_classes", ",", "\n", "sample_size", "=", "opt", ".", "sample_size", ",", "\n", "sample_duration", "=", "opt", ".", "sample_duration", ")", "\n", "", "", "if", "not", "opt", ".", "no_cuda", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "None", ")", "\n", "if", "opt", ".", "pretrain_path", ":", "\n", "            ", "print", "(", "'loading pretrained model {}'", ".", "format", "(", "opt", ".", "pretrain_path", ")", ")", "\n", "pretrain", "=", "torch", ".", "load", "(", "opt", ".", "pretrain_path", ")", "\n", "assert", "opt", ".", "arch", "==", "pretrain", "[", "'arch'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrain", "[", "'state_dict'", "]", ")", "\n", "return", "model", "\n", "", "", "else", ":", "\n", "        ", "if", "opt", ".", "pretrain_path", ":", "\n", "            ", "print", "(", "'loading pretrained model {}'", ".", "format", "(", "opt", ".", "pretrain_path", ")", ")", "\n", "pretrain", "=", "torch", ".", "load", "(", "opt", ".", "pretrain_path", ")", "\n", "assert", "opt", ".", "arch", "==", "pretrain", "[", "'arch'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrain", "[", "'state_dict'", "]", ")", "\n", "return", "model", "\n", "", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.mean.get_mean": [[1, 10], ["None"], "function", ["None"], ["def", "get_mean", "(", "norm_value", "=", "255", ",", "dataset", "=", "'ucf101'", ")", ":", "\n", "    ", "assert", "dataset", "in", "[", "'hmdb51'", ",", "'kinetics'", ",", "'ucf101'", "]", "\n", "if", "dataset", "==", "'hmdb51'", ":", "\n", "        ", "return", "[", "95.4070", "/", "norm_value", ",", "93.4680", "/", "norm_value", ",", "82.1443", "/", "norm_value", "]", "\n", "", "elif", "dataset", "==", "'kinetics'", ":", "\n", "# Kinetics (10 videos for each class)", "\n", "        ", "return", "[", "110.63666788", "/", "norm_value", ",", "103.16065604", "/", "norm_value", ",", "96.29023126", "/", "norm_value", "]", "\n", "", "elif", "dataset", "==", "'ucf101'", ":", "\n", "        ", "return", "[", "101.2198", "/", "norm_value", ",", "97.5751", "/", "norm_value", ",", "89.5303", "/", "norm_value", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.mean.get_std": [[12, 21], ["None"], "function", ["None"], ["", "", "def", "get_std", "(", "norm_value", "=", "255", ",", "dataset", "=", "'ucf101'", ")", ":", "\n", "    ", "assert", "dataset", "in", "[", "'hmdb51'", ",", "'kinetics'", ",", "'ucf101'", "]", "\n", "if", "dataset", "==", "'hmdb51'", ":", "\n", "        ", "return", "[", "51.674248", "/", "norm_value", ",", "50.311924", "/", "norm_value", ",", "49.48427", "/", "norm_value", "]", "\n", "", "elif", "dataset", "==", "'kinetics'", ":", "\n", "# Kinetics (10 videos for each class)", "\n", "        ", "return", "[", "38.7568578", "/", "norm_value", ",", "37.88248729", "/", "norm_value", ",", "40.02898126", "/", "norm_value", "]", "\n", "", "elif", "dataset", "==", "'ucf101'", ":", "\n", "        ", "return", "[", "62.08429", "/", "norm_value", ",", "60.398968", "/", "norm_value", ",", "59.187363", "/", "norm_value", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.target_transforms.target_Compose.__init__": [[2, 4], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.target_transforms.target_Compose.__call__": [[5, 10], ["dst.append", "t"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "dst", "=", "[", "]", "\n", "for", "t", "in", "self", ".", "transforms", ":", "\n", "            ", "dst", ".", "append", "(", "t", "(", "target", ")", ")", "\n", "", "return", "dst", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.target_transforms.ClassLabel.__call__": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "return", "target", "[", "'label'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.target_transforms.VideoID.__call__": [[18, 20], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "target", ")", ":", "\n", "        ", "return", "target", "[", "'video_id'", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.pil_to_tensor": [[11, 20], ["spatial_transforms.spatial_Compose.", "spatial_transforms.spatial_Compose", "spatial_transforms.spatial_Compose", "spatial_transforms.ToTensor", "spatial_transforms.ToTensor", "spatial_transforms.Normalize", "BSCAttack_c3d.mask_frame", "BSCAttack_c3d.mask_frame"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.mask_frame", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.mask_frame"], ["def", "pil_to_tensor", "(", "inputs", ")", ":", "\n", "    ", "mean", "=", "[", "101.2198", ",", "97.5751", ",", "89.5303", "]", "\n", "std", "=", "[", "1", ",", "1", ",", "1", "]", "\n", "if", "inputs", ".", "mode", "==", "'L'", ":", "\n", "        ", "transform", "=", "spatial_Compose", "(", "[", "ToTensor", "(", "255", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "transform", "=", "spatial_Compose", "(", "[", "ToTensor", "(", "1", ")", ",", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "", "inputs", "=", "transform", "(", "inputs", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.tensor_to_pil": [[22, 28], ["torchvision.transforms.Compose", "transforms.Compose.", "spatial_transforms.Normalize", "torchvision.transforms.ToPILImage"], "function", ["None"], ["", "def", "tensor_to_pil", "(", "inputs", ")", ":", "\n", "    ", "mean", "=", "[", "-", "101.2198", ",", "-", "97.5751", ",", "-", "89.5303", "]", "\n", "std", "=", "[", "255", ",", "255", ",", "255", "]", "\n", "inv_transform", "=", "transforms", ".", "Compose", "(", "[", "Normalize", "(", "mean", ",", "std", ")", ",", "transforms", ".", "ToPILImage", "(", "'RGB'", ")", "]", ")", "\n", "inputs", "=", "inv_transform", "(", "inputs", ")", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.mask_frame": [[30, 40], ["frame.convert", "PIL.Image.new", "PIL.ImageDraw.Draw", "ImageDraw.Draw.text", "PIL.Image.alpha_composite().convert", "PIL.Image.new", "PIL.ImageDraw.Draw", "ImageDraw.Draw.rectangle", "BSCAttack_c3d.pil_to_tensor", "BSCAttack_c3d.pil_to_tensor", "PIL.Image.alpha_composite"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.pil_to_tensor", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.pil_to_tensor"], ["", "def", "mask_frame", "(", "frame", ",", "x_pos", ",", "y_pos", ",", "alpha", ",", "t", ",", "H", ",", "W", ",", "text", ",", "font", ",", "text_size_x", ",", "text_size_y", ")", ":", "\n", "    ", "rgba_frame", "=", "frame", ".", "convert", "(", "'RGBA'", ")", "\n", "text_overlay", "=", "Image", ".", "new", "(", "'RGBA'", ",", "rgba_frame", ".", "size", ",", "(", "255", ",", "255", ",", "255", ",", "0", ")", ")", "\n", "text_draw", "=", "ImageDraw", ".", "Draw", "(", "text_overlay", ")", "\n", "text_draw", ".", "text", "(", "(", "x_pos", "-", "t", ",", "y_pos", ")", ",", "text", ",", "font", "=", "font", ",", "fill", "=", "(", "255", ",", "255", ",", "255", ",", "alpha", ")", ")", "\n", "mask_frame", "=", "Image", ".", "alpha_composite", "(", "rgba_frame", ",", "text_overlay", ")", ".", "convert", "(", "'RGB'", ")", "\n", "rec_overlay", "=", "Image", ".", "new", "(", "'L'", ",", "(", "H", ",", "W", ")", ",", "(", "255", ")", ")", "\n", "rec_draw", "=", "ImageDraw", ".", "Draw", "(", "rec_overlay", ")", "\n", "rec_draw", ".", "rectangle", "(", "(", "x_pos", "-", "t", ",", "y_pos", ",", "x_pos", "-", "t", "+", "text_size_x", ",", "y_pos", "+", "text_size_y", ")", ",", "fill", "=", "(", "0", ")", ")", "\n", "return", "pil_to_tensor", "(", "mask_frame", ")", ",", "pil_to_tensor", "(", "rec_overlay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.mask_RGB_frame": [[42, 52], ["frame.convert", "PIL.Image.new", "PIL.ImageDraw.Draw", "ImageDraw.Draw.text", "PIL.Image.alpha_composite().convert", "PIL.Image.new", "PIL.ImageDraw.Draw", "ImageDraw.Draw.rectangle", "BSCAttack_c3d.pil_to_tensor", "BSCAttack_c3d.pil_to_tensor", "PIL.Image.alpha_composite"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.pil_to_tensor", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.pil_to_tensor"], ["", "def", "mask_RGB_frame", "(", "frame", ",", "x_pos", ",", "y_pos", ",", "R", ",", "G", ",", "B", ",", "alpha", ",", "t", ",", "H", ",", "W", ",", "text", ",", "font", ",", "text_size_x", ",", "text_size_y", ")", ":", "\n", "    ", "rgba_frame", "=", "frame", ".", "convert", "(", "'RGBA'", ")", "\n", "text_overlay", "=", "Image", ".", "new", "(", "'RGBA'", ",", "rgba_frame", ".", "size", ",", "(", "255", ",", "255", ",", "255", ",", "0", ")", ")", "\n", "text_draw", "=", "ImageDraw", ".", "Draw", "(", "text_overlay", ")", "\n", "text_draw", ".", "text", "(", "(", "x_pos", "-", "t", ",", "y_pos", ")", ",", "text", ",", "font", "=", "font", ",", "fill", "=", "(", "R", ",", "G", ",", "B", ",", "alpha", ")", ")", "\n", "mask_frame", "=", "Image", ".", "alpha_composite", "(", "rgba_frame", ",", "text_overlay", ")", ".", "convert", "(", "'RGB'", ")", "\n", "rec_overlay", "=", "Image", ".", "new", "(", "'L'", ",", "(", "H", ",", "W", ")", ",", "(", "255", ")", ")", "\n", "rec_draw", "=", "ImageDraw", ".", "Draw", "(", "rec_overlay", ")", "\n", "rec_draw", ".", "rectangle", "(", "(", "x_pos", "-", "t", ",", "y_pos", ",", "x_pos", "-", "t", "+", "text_size_x", ",", "y_pos", "+", "text_size_y", ")", ",", "fill", "=", "(", "0", ")", ")", "\n", "return", "pil_to_tensor", "(", "mask_frame", ")", ",", "pil_to_tensor", "(", "rec_overlay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.process": [[54, 89], ["PIL.ImageFont.truetype", "BSCAttack_config.configure_BSCA", "range", "print", "print", "print", "print", "print", "print", "len", "torch.LongTensor().cuda", "torch.nn.functional.softmax().argmax", "print", "len", "print", "BSCAttack_attackers.BSCA", "BSCAttack_attackers.BSCA.attack", "total_list.append", "len", "torch.LongTensor", "torch.nn.functional.softmax", "print", "range", "len", "model", "int", "adv_clip[].size", "BSCAttack_c3d.tensor_to_pil", "tensor_to_pil.save", "torch.unsqueeze", "str"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_config.configure_BSCA", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_attackers.BSCA.attack", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.BSCAttack_c3d.tensor_to_pil"], ["", "def", "process", "(", "data_loader", ",", "model", ",", "opt", ",", "class_names", ")", ":", "\n", "    ", "font", "=", "ImageFont", ".", "truetype", "(", "'/usr/share/fonts/truetype/dejavu/DejaVuSerif.ttf'", ",", "9", ")", "\n", "configure_BSCA", "(", "n_occlu", "=", "4", ",", "rl_batch", "=", "500", ",", "steps", "=", "50", ",", "BSCA_color", "=", "False", ")", "\n", "total_list", "=", "[", "]", "\n", "count", "=", "0", "\n", "query_num", "=", "0", "\n", "total_area", "=", "0", "\n", "total_salient", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "data_loader", ")", ")", ":", "\n", "        ", "input_tensor", ",", "labels", "=", "data_loader", "[", "i", "]", "\n", "text", "=", "'This is our adversarial BSC attack.'", "\n", "label_tensor", "=", "torch", ".", "LongTensor", "(", "[", "labels", "[", "1", "]", "]", ")", ".", "cuda", "(", ")", "\n", "predict", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "model", "(", "torch", ".", "unsqueeze", "(", "input_tensor", ",", "dim", "=", "0", ")", ")", ")", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "if", "predict", "==", "label_tensor", ":", "\n", "            ", "print", "(", "'attack'", ")", "\n", "dir_title", "=", "class_names", "[", "int", "(", "label_tensor", ")", "]", "\n", "BSCA", "=", "BSCAttack_attackers", ".", "BSCA", "(", "dir_title", ")", "\n", "adv_clip", ",", "rcd", ",", "attack_dir", "=", "BSCA", ".", "attack", "(", "text", ",", "font", ",", "model", "=", "model", ",", "input_tensor", "=", "input_tensor", ",", "label_tensor", "=", "label_tensor", ",", "input_name", "=", "'{}'", ".", "format", "(", "labels", "[", "0", "]", ")", ")", "\n", "if", "rcd", ".", "success", "[", "0", "]", ":", "\n", "                ", "print", "(", "'success'", ")", "\n", "count", "+=", "1", "\n", "query_num", "+=", "rcd", ".", "queries", "[", "0", "]", "\n", "total_area", "+=", "rcd", ".", "areas", "[", "0", "]", "\n", "total_salient", "+=", "rcd", ".", "salients", "[", "0", "]", "\n", "for", "j", "in", "range", "(", "adv_clip", "[", "0", "]", ".", "size", "(", "1", ")", ")", ":", "\n", "                    ", "frame", "=", "tensor_to_pil", "(", "adv_clip", "[", "0", "]", "[", ":", ",", "j", ",", ":", ",", ":", "]", ")", "\n", "frame", ".", "save", "(", "attack_dir", "+", "'/'", "+", "str", "(", "j", ")", "+", "'.png'", ")", "\n", "", "", "total_list", ".", "append", "(", "labels", "[", "0", "]", ")", "\n", "", "print", "(", "'[{}/{}]\\t'", ".", "format", "(", "i", "+", "1", ",", "len", "(", "data_loader", ")", ")", ")", "\n", "", "print", "(", "'\u653b\u51fb\u4e4b\u540e: '", ",", "count", ")", "\n", "print", "(", "'\u653b\u51fb\u4e4b\u524d: '", ",", "len", "(", "total_list", ")", ")", "\n", "print", "(", "'\u653b\u51fb\u6210\u529f\u7387: '", ",", "count", "/", "len", "(", "total_list", ")", ")", "\n", "print", "(", "'\u5e73\u5747\u67e5\u8be2\u6570: '", ",", "query_num", "/", "count", ")", "\n", "print", "(", "'\u6270\u52a8\u50cf\u7d20\u7387: '", ",", "total_area", "/", "count", ")", "\n", "print", "(", "'\u6270\u52a8\u663e\u8457\u7387: '", ",", "total_salient", "/", "count", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.AverageMeter.__init__": [[6, 8], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.AverageMeter.reset": [[9, 14], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.AverageMeter.update": [[15, 20], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.__init__": [[23, 28], ["open", "csv.writer", "utils.Logger.logger.writerow"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "header", ")", ":", "\n", "        ", "self", ".", "log_file", "=", "open", "(", "path", ",", "'w'", ")", "\n", "self", ".", "logger", "=", "csv", ".", "writer", "(", "self", ".", "log_file", ",", "delimiter", "=", "'\\t'", ")", "\n", "self", ".", "logger", ".", "writerow", "(", "header", ")", "\n", "self", ".", "header", "=", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.__del": [[29, 31], ["utils.Logger.log_file.close"], "methods", ["None"], ["", "def", "__del", "(", "self", ")", ":", "\n", "        ", "self", ".", "log_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.Logger.log": [[32, 39], ["utils.Logger.logger.writerow", "utils.Logger.log_file.flush", "write_values.append"], "methods", ["None"], ["", "def", "log", "(", "self", ",", "values", ")", ":", "\n", "        ", "write_values", "=", "[", "]", "\n", "for", "col", "in", "self", ".", "header", ":", "\n", "            ", "assert", "col", "in", "values", "\n", "write_values", ".", "append", "(", "values", "[", "col", "]", ")", "\n", "", "self", ".", "logger", ".", "writerow", "(", "write_values", ")", "\n", "self", ".", "log_file", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.load_value_file": [[41, 45], ["open", "float", "input_file.read().rstrip", "input_file.read"], "function", ["None"], ["", "", "def", "load_value_file", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "input_file", ":", "\n", "        ", "value", "=", "float", "(", "input_file", ".", "read", "(", ")", ".", "rstrip", "(", "'\\n\\r'", ")", ")", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.calculate_accuracy": [[47, 54], ["targets.size", "outputs.topk", "pred.t.t", "pred.t.eq", "targets.view", "pred.eq.float().sum", "pred.eq.float"], "function", ["None"], ["", "def", "calculate_accuracy", "(", "outputs", ",", "targets", ")", ":", "\n", "    ", "batch_size", "=", "targets", ".", "size", "(", "0", ")", "\n", "_", ",", "pred", "=", "outputs", ".", "topk", "(", "1", ",", "1", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "targets", ".", "view", "(", "1", ",", "-", "1", ")", ")", "\n", "n_correct_elems", "=", "correct", ".", "float", "(", ")", ".", "sum", "(", ")", ".", "data", "[", "0", "]", "\n", "return", "n_correct_elems", "/", "batch_size", "\n", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.hmdb51.HMDB51.__init__": [[154, 172], ["hmdb51.make_dataset", "get_loader"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.make_dataset"], ["def", "__init__", "(", "self", ",", "\n", "root_path", ",", "\n", "annotation_path", ",", "\n", "subset", ",", "\n", "n_samples_for_each_video", "=", "1", ",", "\n", "spatial_transform", "=", "None", ",", "\n", "temporal_transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "\n", "sample_duration", "=", "16", ",", "\n", "get_loader", "=", "get_default_video_loader", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "class_names", "=", "make_dataset", "(", "\n", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", "\n", "\n", "self", ".", "spatial_transform", "=", "spatial_transform", "\n", "self", ".", "temporal_transform", "=", "temporal_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "get_loader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.hmdb51.HMDB51.__getitem__": [[173, 196], ["hmdb51.HMDB51.loader", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "hmdb51.HMDB51.temporal_transform", "hmdb51.HMDB51.spatial_transform.randomize_parameters", "hmdb51.HMDB51.target_transform", "hmdb51.HMDB51.spatial_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.MultiScaleRandomCrop.randomize_parameters"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", "=", "self", ".", "data", "[", "index", "]", "[", "'video'", "]", "\n", "\n", "frame_indices", "=", "self", ".", "data", "[", "index", "]", "[", "'frame_indices'", "]", "\n", "if", "self", ".", "temporal_transform", "is", "not", "None", ":", "\n", "            ", "frame_indices", "=", "self", ".", "temporal_transform", "(", "frame_indices", ")", "\n", "", "clip", "=", "self", ".", "loader", "(", "path", ",", "frame_indices", ")", "\n", "if", "self", ".", "spatial_transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "spatial_transform", ".", "randomize_parameters", "(", ")", "\n", "clip", "=", "[", "self", ".", "spatial_transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "", "clip", "=", "torch", ".", "stack", "(", "clip", ",", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n", "target", "=", "self", ".", "data", "[", "index", "]", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "clip", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.hmdb51.HMDB51.__len__": [[197, 199], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.hmdb51.pil_loader": [[13, 18], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.hmdb51.accimage_loader": [[20, 27], ["accimage.Image", "hmdb51.pil_loader"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "accimage", "\n", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.hmdb51.get_default_image_loader": [[29, 35], ["get_image_backend"], "function", ["None"], ["", "", "def", "get_default_image_loader", "(", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.hmdb51.video_loader": [[37, 47], ["os.path.join", "os.path.exists", "video.append", "image_loader"], "function", ["None"], ["", "", "def", "video_loader", "(", "video_dir_path", ",", "frame_indices", ",", "image_loader", ")", ":", "\n", "    ", "video", "=", "[", "]", "\n", "for", "i", "in", "frame_indices", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "'image_{:05d}.jpg'", ".", "format", "(", "i", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "            ", "video", ".", "append", "(", "image_loader", "(", "image_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "video", "\n", "\n", "", "", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.hmdb51.get_default_video_loader": [[49, 52], ["hmdb51.get_default_image_loader", "functools.partial"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.get_default_image_loader"], ["", "def", "get_default_video_loader", "(", ")", ":", "\n", "    ", "image_loader", "=", "get_default_image_loader", "(", ")", "\n", "return", "functools", ".", "partial", "(", "video_loader", ",", "image_loader", "=", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.hmdb51.load_annotation_data": [[54, 57], ["open", "json.load"], "function", ["None"], ["", "def", "load_annotation_data", "(", "data_file_path", ")", ":", "\n", "    ", "with", "open", "(", "data_file_path", ",", "'r'", ")", "as", "data_file", ":", "\n", "        ", "return", "json", ".", "load", "(", "data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.hmdb51.get_class_labels": [[59, 66], ["torch.data"], "function", ["None"], ["", "", "def", "get_class_labels", "(", "data", ")", ":", "\n", "    ", "class_labels_map", "=", "{", "}", "\n", "index", "=", "0", "\n", "for", "class_label", "in", "data", "[", "'labels'", "]", ":", "\n", "        ", "class_labels_map", "[", "class_label", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "return", "class_labels_map", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.hmdb51.get_video_names_and_annotations": [[68, 80], ["data[].items", "video_names.append", "annotations.append", "torch.data"], "function", ["None"], ["", "def", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", ":", "\n", "    ", "video_names", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "\n", "for", "key", ",", "value", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "        ", "this_subset", "=", "value", "[", "'subset'", "]", "\n", "if", "this_subset", "==", "subset", ":", "\n", "            ", "label", "=", "value", "[", "'annotations'", "]", "[", "'label'", "]", "\n", "video_names", ".", "append", "(", "'{}/{}'", ".", "format", "(", "label", ",", "key", ")", ")", "\n", "annotations", ".", "append", "(", "value", "[", "'annotations'", "]", ")", "\n", "\n", "", "", "return", "video_names", ",", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.hmdb51.make_dataset": [[82, 135], ["hmdb51.load_annotation_data", "hmdb51.get_video_names_and_annotations", "hmdb51.get_class_labels", "get_class_labels.items", "range", "len", "os.path.join", "os.path.join", "int", "print", "os.path.exists", "utils.load_value_file", "len", "list", "dataset.append", "range", "video_names[].split", "range", "max", "copy.deepcopy", "list", "dataset.append", "len", "math.ceil", "range", "min"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.load_annotation_data", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.get_video_names_and_annotations", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.get_class_labels", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.load_value_file"], ["", "def", "make_dataset", "(", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", ":", "\n", "    ", "data", "=", "load_annotation_data", "(", "annotation_path", ")", "\n", "video_names", ",", "annotations", "=", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", "\n", "class_to_idx", "=", "get_class_labels", "(", "data", ")", "\n", "idx_to_class", "=", "{", "}", "\n", "for", "name", ",", "label", "in", "class_to_idx", ".", "items", "(", ")", ":", "\n", "        ", "idx_to_class", "[", "label", "]", "=", "name", "\n", "\n", "", "dataset", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "video_names", ")", ")", ":", "\n", "        ", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'dataset loading [{}/{}]'", ".", "format", "(", "i", ",", "len", "(", "video_names", ")", ")", ")", "\n", "\n", "", "video_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "video_names", "[", "i", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "video_path", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "n_frames_file_path", "=", "os", ".", "path", ".", "join", "(", "video_path", ",", "'n_frames'", ")", "\n", "n_frames", "=", "int", "(", "load_value_file", "(", "n_frames_file_path", ")", ")", "\n", "if", "n_frames", "<=", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "begin_t", "=", "1", "\n", "end_t", "=", "n_frames", "\n", "sample", "=", "{", "\n", "'video'", ":", "video_path", ",", "\n", "'segment'", ":", "[", "begin_t", ",", "end_t", "]", ",", "\n", "'n_frames'", ":", "n_frames", ",", "\n", "'video_id'", ":", "video_names", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "}", "\n", "if", "len", "(", "annotations", ")", "!=", "0", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "class_to_idx", "[", "annotations", "[", "i", "]", "[", "'label'", "]", "]", "\n", "", "else", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "-", "1", "\n", "\n", "", "if", "n_samples_for_each_video", "==", "1", ":", "\n", "            ", "sample", "[", "'frame_indices'", "]", "=", "list", "(", "range", "(", "1", ",", "n_frames", "+", "1", ")", ")", "\n", "dataset", ".", "append", "(", "sample", ")", "\n", "", "else", ":", "\n", "            ", "if", "n_samples_for_each_video", ">", "1", ":", "\n", "                ", "step", "=", "max", "(", "1", ",", "\n", "math", ".", "ceil", "(", "(", "n_frames", "-", "1", "-", "sample_duration", ")", "/", "\n", "(", "n_samples_for_each_video", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "step", "=", "sample_duration", "\n", "", "for", "j", "in", "range", "(", "1", ",", "n_frames", ",", "step", ")", ":", "\n", "                ", "sample_j", "=", "copy", ".", "deepcopy", "(", "sample", ")", "\n", "sample_j", "[", "'frame_indices'", "]", "=", "list", "(", "\n", "range", "(", "j", ",", "min", "(", "n_frames", "+", "1", ",", "j", "+", "sample_duration", ")", ")", ")", "\n", "dataset", ".", "append", "(", "sample_j", ")", "\n", "\n", "", "", "", "return", "dataset", ",", "idx_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.ucf101.UCF101.__init__": [[136, 142], ["ucf101.make_dataset", "get_loader"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.make_dataset"], ["def", "__init__", "(", "self", ",", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", "=", "1", ",", "spatial_transform", "=", "None", ",", "temporal_transform", "=", "None", ",", "target_transform", "=", "None", ",", "sample_duration", "=", "16", ",", "get_loader", "=", "get_default_video_loader", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "class_names", "=", "make_dataset", "(", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "sample_duration", ")", "\n", "self", ".", "spatial_transform", "=", "spatial_transform", "\n", "self", ".", "temporal_transform", "=", "temporal_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "get_loader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.ucf101.UCF101.__getitem__": [[143, 164], ["ucf101.UCF101.loader", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "ucf101.UCF101.temporal_transform", "ucf101.UCF101.spatial_transform.randomize_parameters", "ucf101.UCF101.target_transform", "ucf101.UCF101.spatial_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.MultiScaleRandomCrop.randomize_parameters"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", "=", "self", ".", "data", "[", "index", "]", "[", "'video'", "]", "\n", "frame_indices", "=", "self", ".", "data", "[", "index", "]", "[", "'frame_indices'", "]", "\n", "if", "self", ".", "temporal_transform", "is", "not", "None", ":", "\n", "            ", "frame_indices", "=", "self", ".", "temporal_transform", "(", "frame_indices", ")", "\n", "", "clip", "=", "self", ".", "loader", "(", "path", ",", "frame_indices", ")", "\n", "if", "self", ".", "spatial_transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "spatial_transform", ".", "randomize_parameters", "(", ")", "\n", "clip", "=", "[", "self", ".", "spatial_transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "", "clip", "=", "torch", ".", "stack", "(", "clip", ",", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n", "target", "=", "self", ".", "data", "[", "index", "]", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "", "return", "clip", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.ucf101.UCF101.__len__": [[165, 167], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.ucf101.pil_loader": [[12, 17], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.ucf101.accimage_loader": [[19, 26], ["accimage.Image", "ucf101.pil_loader"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "accimage", "\n", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.ucf101.get_default_image_loader": [[28, 34], ["get_image_backend"], "function", ["None"], ["", "", "def", "get_default_image_loader", "(", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.ucf101.video_loader": [[36, 45], ["os.path.join", "os.path.exists", "video.append", "image_loader"], "function", ["None"], ["", "", "def", "video_loader", "(", "video_dir_path", ",", "frame_indices", ",", "image_loader", ")", ":", "\n", "    ", "video", "=", "[", "]", "\n", "for", "i", "in", "frame_indices", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "'image_{:05d}.jpg'", ".", "format", "(", "i", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "            ", "video", ".", "append", "(", "image_loader", "(", "image_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "video", "\n", "", "", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.ucf101.get_default_video_loader": [[47, 50], ["ucf101.get_default_image_loader", "functools.partial"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.get_default_image_loader"], ["", "def", "get_default_video_loader", "(", ")", ":", "\n", "    ", "image_loader", "=", "get_default_image_loader", "(", ")", "\n", "return", "functools", ".", "partial", "(", "video_loader", ",", "image_loader", "=", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.ucf101.load_annotation_data": [[52, 55], ["open", "json.load"], "function", ["None"], ["", "def", "load_annotation_data", "(", "data_file_path", ")", ":", "\n", "    ", "with", "open", "(", "data_file_path", ",", "'r'", ")", "as", "data_file", ":", "\n", "        ", "return", "json", ".", "load", "(", "data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.ucf101.get_class_labels": [[57, 64], ["torch.data"], "function", ["None"], ["", "", "def", "get_class_labels", "(", "data", ")", ":", "\n", "    ", "class_labels_map", "=", "{", "}", "\n", "index", "=", "0", "\n", "for", "class_label", "in", "data", "[", "'labels'", "]", ":", "\n", "        ", "class_labels_map", "[", "class_label", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "return", "class_labels_map", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.ucf101.get_video_names_and_annotations": [[66, 76], ["data[].items", "video_names.append", "annotations.append", "torch.data"], "function", ["None"], ["", "def", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", ":", "\n", "    ", "video_names", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "        ", "this_subset", "=", "value", "[", "'subset'", "]", "\n", "if", "this_subset", "==", "subset", ":", "\n", "            ", "label", "=", "value", "[", "'annotations'", "]", "[", "'label'", "]", "\n", "video_names", ".", "append", "(", "'{}/{}'", ".", "format", "(", "label", ",", "key", ")", ")", "\n", "annotations", ".", "append", "(", "value", "[", "'annotations'", "]", ")", "\n", "", "", "return", "video_names", ",", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.ucf101.make_dataset": [[78, 121], ["ucf101.load_annotation_data", "ucf101.get_video_names_and_annotations", "ucf101.get_class_labels", "get_class_labels.items", "range", "len", "os.path.join", "os.path.join", "int", "print", "os.path.exists", "utils.load_value_file", "len", "list", "dataset.append", "range", "video_names[].split", "range", "max", "copy.deepcopy", "list", "dataset.append", "len", "math.ceil", "range", "min"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.load_annotation_data", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.get_video_names_and_annotations", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.get_class_labels", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.load_value_file"], ["", "def", "make_dataset", "(", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "sample_duration", ")", ":", "\n", "    ", "data", "=", "load_annotation_data", "(", "annotation_path", ")", "\n", "video_names", ",", "annotations", "=", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", "\n", "class_to_idx", "=", "get_class_labels", "(", "data", ")", "\n", "idx_to_class", "=", "{", "}", "\n", "for", "name", ",", "label", "in", "class_to_idx", ".", "items", "(", ")", ":", "\n", "        ", "idx_to_class", "[", "label", "]", "=", "name", "\n", "", "dataset", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "video_names", ")", ")", ":", "\n", "        ", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'dataset loading [{}/{}]'", ".", "format", "(", "i", ",", "len", "(", "video_names", ")", ")", ")", "\n", "", "video_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "video_names", "[", "i", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "video_path", ")", ":", "\n", "            ", "continue", "\n", "", "n_frames_file_path", "=", "os", ".", "path", ".", "join", "(", "video_path", ",", "'n_frames'", ")", "\n", "n_frames", "=", "int", "(", "load_value_file", "(", "n_frames_file_path", ")", ")", "\n", "if", "n_frames", "<=", "0", ":", "\n", "            ", "continue", "\n", "", "begin_t", "=", "1", "\n", "end_t", "=", "n_frames", "\n", "sample", "=", "{", "\n", "'video'", ":", "video_path", ",", "\n", "'segment'", ":", "[", "begin_t", ",", "end_t", "]", ",", "\n", "'n_frames'", ":", "n_frames", ",", "\n", "'video_id'", ":", "video_names", "[", "i", "]", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "}", "\n", "if", "len", "(", "annotations", ")", "!=", "0", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "class_to_idx", "[", "annotations", "[", "i", "]", "[", "'label'", "]", "]", "\n", "", "else", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "-", "1", "\n", "", "if", "n_samples_for_each_video", "==", "1", ":", "\n", "            ", "sample", "[", "'frame_indices'", "]", "=", "list", "(", "range", "(", "1", ",", "n_frames", "+", "1", ")", ")", "\n", "dataset", ".", "append", "(", "sample", ")", "\n", "", "else", ":", "\n", "            ", "if", "n_samples_for_each_video", ">", "1", ":", "\n", "                ", "step", "=", "max", "(", "1", ",", "math", ".", "ceil", "(", "(", "n_frames", "-", "1", "-", "sample_duration", ")", "/", "(", "n_samples_for_each_video", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "step", "=", "sample_duration", "\n", "", "for", "j", "in", "range", "(", "1", ",", "n_frames", ",", "step", ")", ":", "\n", "                ", "sample_j", "=", "copy", ".", "deepcopy", "(", "sample", ")", "\n", "sample_j", "[", "'frame_indices'", "]", "=", "list", "(", "range", "(", "j", ",", "min", "(", "n_frames", "+", "1", ",", "j", "+", "sample_duration", ")", ")", ")", "\n", "dataset", ".", "append", "(", "sample_j", ")", "\n", "", "", "", "return", "dataset", ",", "idx_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.Kinetics.__init__": [[157, 175], ["kinetics.make_dataset", "get_loader"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.make_dataset"], ["def", "__init__", "(", "self", ",", "\n", "root_path", ",", "\n", "annotation_path", ",", "\n", "subset", ",", "\n", "n_samples_for_each_video", "=", "1", ",", "\n", "spatial_transform", "=", "None", ",", "\n", "temporal_transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "\n", "sample_duration", "=", "16", ",", "\n", "get_loader", "=", "get_default_video_loader", ")", ":", "\n", "        ", "self", ".", "data", ",", "self", ".", "class_names", "=", "make_dataset", "(", "\n", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", "\n", "\n", "self", ".", "spatial_transform", "=", "spatial_transform", "\n", "self", ".", "temporal_transform", "=", "temporal_transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "loader", "=", "get_loader", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.Kinetics.__getitem__": [[176, 199], ["kinetics.Kinetics.loader", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "kinetics.Kinetics.temporal_transform", "kinetics.Kinetics.spatial_transform.randomize_parameters", "kinetics.Kinetics.target_transform", "kinetics.Kinetics.spatial_transform", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.spatial_transforms.MultiScaleRandomCrop.randomize_parameters"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", "=", "self", ".", "data", "[", "index", "]", "[", "'video'", "]", "\n", "\n", "frame_indices", "=", "self", ".", "data", "[", "index", "]", "[", "'frame_indices'", "]", "\n", "if", "self", ".", "temporal_transform", "is", "not", "None", ":", "\n", "            ", "frame_indices", "=", "self", ".", "temporal_transform", "(", "frame_indices", ")", "\n", "", "clip", "=", "self", ".", "loader", "(", "path", ",", "frame_indices", ")", "\n", "if", "self", ".", "spatial_transform", "is", "not", "None", ":", "\n", "            ", "self", ".", "spatial_transform", ".", "randomize_parameters", "(", ")", "\n", "clip", "=", "[", "self", ".", "spatial_transform", "(", "img", ")", "for", "img", "in", "clip", "]", "\n", "", "clip", "=", "torch", ".", "stack", "(", "clip", ",", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "\n", "target", "=", "self", ".", "data", "[", "index", "]", "\n", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "clip", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.Kinetics.__len__": [[200, 202], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.pil_loader": [[13, 18], ["open", "PIL.Image.open", "img.convert"], "function", ["None"], ["def", "pil_loader", "(", "path", ")", ":", "\n", "# open path as file to avoid ResourceWarning (https://github.com/python-pillow/Pillow/issues/835)", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "with", "Image", ".", "open", "(", "f", ")", "as", "img", ":", "\n", "            ", "return", "img", ".", "convert", "(", "'RGB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.accimage_loader": [[20, 27], ["accimage.Image", "kinetics.pil_loader"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.pil_loader"], ["", "", "", "def", "accimage_loader", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "accimage", "\n", "return", "accimage", ".", "Image", "(", "path", ")", "\n", "", "except", "IOError", ":", "\n", "# Potentially a decoding problem, fall back to PIL.Image", "\n", "        ", "return", "pil_loader", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.get_default_image_loader": [[29, 35], ["get_image_backend"], "function", ["None"], ["", "", "def", "get_default_image_loader", "(", ")", ":", "\n", "    ", "from", "torchvision", "import", "get_image_backend", "\n", "if", "get_image_backend", "(", ")", "==", "'accimage'", ":", "\n", "        ", "return", "accimage_loader", "\n", "", "else", ":", "\n", "        ", "return", "pil_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.video_loader": [[37, 47], ["os.path.join", "os.path.exists", "video.append", "image_loader"], "function", ["None"], ["", "", "def", "video_loader", "(", "video_dir_path", ",", "frame_indices", ",", "image_loader", ")", ":", "\n", "    ", "video", "=", "[", "]", "\n", "for", "i", "in", "frame_indices", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "video_dir_path", ",", "'image_{:05d}.jpg'", ".", "format", "(", "i", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "image_path", ")", ":", "\n", "            ", "video", ".", "append", "(", "image_loader", "(", "image_path", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "video", "\n", "\n", "", "", "return", "video", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.get_default_video_loader": [[49, 52], ["kinetics.get_default_image_loader", "functools.partial"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.get_default_image_loader"], ["", "def", "get_default_video_loader", "(", ")", ":", "\n", "    ", "image_loader", "=", "get_default_image_loader", "(", ")", "\n", "return", "functools", ".", "partial", "(", "video_loader", ",", "image_loader", "=", "image_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.load_annotation_data": [[54, 57], ["open", "json.load"], "function", ["None"], ["", "def", "load_annotation_data", "(", "data_file_path", ")", ":", "\n", "    ", "with", "open", "(", "data_file_path", ",", "'r'", ")", "as", "data_file", ":", "\n", "        ", "return", "json", ".", "load", "(", "data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.get_class_labels": [[59, 66], ["torch.data"], "function", ["None"], ["", "", "def", "get_class_labels", "(", "data", ")", ":", "\n", "    ", "class_labels_map", "=", "{", "}", "\n", "index", "=", "0", "\n", "for", "class_label", "in", "data", "[", "'labels'", "]", ":", "\n", "        ", "class_labels_map", "[", "class_label", "]", "=", "index", "\n", "index", "+=", "1", "\n", "", "return", "class_labels_map", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.get_video_names_and_annotations": [[68, 83], ["data[].items", "video_names.append", "video_names.append", "annotations.append", "torch.data"], "function", ["None"], ["", "def", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", ":", "\n", "    ", "video_names", "=", "[", "]", "\n", "annotations", "=", "[", "]", "\n", "\n", "for", "key", ",", "value", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "        ", "this_subset", "=", "value", "[", "'subset'", "]", "\n", "if", "this_subset", "==", "subset", ":", "\n", "            ", "if", "subset", "==", "'testing'", ":", "\n", "                ", "video_names", ".", "append", "(", "'test/{}'", ".", "format", "(", "key", ")", ")", "\n", "", "else", ":", "\n", "                ", "label", "=", "value", "[", "'annotations'", "]", "[", "'label'", "]", "\n", "video_names", ".", "append", "(", "'{}/{}'", ".", "format", "(", "label", ",", "key", ")", ")", "\n", "annotations", ".", "append", "(", "value", "[", "'annotations'", "]", ")", "\n", "\n", "", "", "", "return", "video_names", ",", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.make_dataset": [[85, 138], ["kinetics.load_annotation_data", "kinetics.get_video_names_and_annotations", "kinetics.get_class_labels", "get_class_labels.items", "range", "len", "os.path.join", "os.path.join", "int", "print", "os.path.exists", "utils.load_value_file", "len", "list", "dataset.append", "range", "[].split", "range", "max", "copy.deepcopy", "list", "dataset.append", "len", "math.ceil", "range", "min"], "function", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.load_annotation_data", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.get_video_names_and_annotations", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.kinetics.get_class_labels", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.None.utils.load_value_file"], ["", "def", "make_dataset", "(", "root_path", ",", "annotation_path", ",", "subset", ",", "n_samples_for_each_video", ",", "\n", "sample_duration", ")", ":", "\n", "    ", "data", "=", "load_annotation_data", "(", "annotation_path", ")", "\n", "video_names", ",", "annotations", "=", "get_video_names_and_annotations", "(", "data", ",", "subset", ")", "\n", "class_to_idx", "=", "get_class_labels", "(", "data", ")", "\n", "idx_to_class", "=", "{", "}", "\n", "for", "name", ",", "label", "in", "class_to_idx", ".", "items", "(", ")", ":", "\n", "        ", "idx_to_class", "[", "label", "]", "=", "name", "\n", "\n", "", "dataset", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "video_names", ")", ")", ":", "\n", "        ", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "'dataset loading [{}/{}]'", ".", "format", "(", "i", ",", "len", "(", "video_names", ")", ")", ")", "\n", "\n", "", "video_path", "=", "os", ".", "path", ".", "join", "(", "root_path", ",", "video_names", "[", "i", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "video_path", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "n_frames_file_path", "=", "os", ".", "path", ".", "join", "(", "video_path", ",", "'n_frames'", ")", "\n", "n_frames", "=", "int", "(", "load_value_file", "(", "n_frames_file_path", ")", ")", "\n", "if", "n_frames", "<=", "0", ":", "\n", "            ", "continue", "\n", "\n", "", "begin_t", "=", "1", "\n", "end_t", "=", "n_frames", "\n", "sample", "=", "{", "\n", "'video'", ":", "video_path", ",", "\n", "'segment'", ":", "[", "begin_t", ",", "end_t", "]", ",", "\n", "'n_frames'", ":", "n_frames", ",", "\n", "'video_id'", ":", "video_names", "[", "i", "]", "[", ":", "-", "14", "]", ".", "split", "(", "'/'", ")", "[", "1", "]", "\n", "}", "\n", "if", "len", "(", "annotations", ")", "!=", "0", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "class_to_idx", "[", "annotations", "[", "i", "]", "[", "'label'", "]", "]", "\n", "", "else", ":", "\n", "            ", "sample", "[", "'label'", "]", "=", "-", "1", "\n", "\n", "", "if", "n_samples_for_each_video", "==", "1", ":", "\n", "            ", "sample", "[", "'frame_indices'", "]", "=", "list", "(", "range", "(", "1", ",", "n_frames", "+", "1", ")", ")", "\n", "dataset", ".", "append", "(", "sample", ")", "\n", "", "else", ":", "\n", "            ", "if", "n_samples_for_each_video", ">", "1", ":", "\n", "                ", "step", "=", "max", "(", "1", ",", "\n", "math", ".", "ceil", "(", "(", "n_frames", "-", "1", "-", "sample_duration", ")", "/", "\n", "(", "n_samples_for_each_video", "-", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "step", "=", "sample_duration", "\n", "", "for", "j", "in", "range", "(", "1", ",", "n_frames", ",", "step", ")", ":", "\n", "                ", "sample_j", "=", "copy", ".", "deepcopy", "(", "sample", ")", "\n", "sample_j", "[", "'frame_indices'", "]", "=", "list", "(", "\n", "range", "(", "j", ",", "min", "(", "n_frames", "+", "1", ",", "j", "+", "sample_duration", ")", ")", ")", "\n", "dataset", ".", "append", "(", "sample_j", ")", "\n", "\n", "", "", "", "return", "dataset", ",", "idx_to_class", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.PreActivationBasicBlock.__init__": [[41, 50], ["torch.Module.__init__", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "pre_act_resnet.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "pre_act_resnet.conv3x3x3", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.conv3x3x3", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.conv3x3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "PreActivationBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "conv3x3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.PreActivationBasicBlock.forward": [[51, 68], ["pre_act_resnet.PreActivationBasicBlock.bn1", "pre_act_resnet.PreActivationBasicBlock.relu", "pre_act_resnet.PreActivationBasicBlock.conv1", "pre_act_resnet.PreActivationBasicBlock.bn2", "pre_act_resnet.PreActivationBasicBlock.relu", "pre_act_resnet.PreActivationBasicBlock.conv2", "pre_act_resnet.PreActivationBasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.PreActivationBottleneck.__init__": [[73, 85], ["torch.Module.__init__", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "PreActivationBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.PreActivationBottleneck.forward": [[86, 107], ["pre_act_resnet.PreActivationBottleneck.bn1", "pre_act_resnet.PreActivationBottleneck.relu", "pre_act_resnet.PreActivationBottleneck.conv1", "pre_act_resnet.PreActivationBottleneck.bn2", "pre_act_resnet.PreActivationBottleneck.relu", "pre_act_resnet.PreActivationBottleneck.conv2", "pre_act_resnet.PreActivationBottleneck.bn3", "pre_act_resnet.PreActivationBottleneck.relu", "pre_act_resnet.PreActivationBottleneck.conv3", "pre_act_resnet.PreActivationBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.PreActivationResNet.__init__": [[111, 149], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "pre_act_resnet.PreActivationResNet._make_layer", "pre_act_resnet.PreActivationResNet._make_layer", "pre_act_resnet.PreActivationResNet._make_layer", "pre_act_resnet.PreActivationResNet._make_layer", "int", "int", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "pre_act_resnet.PreActivationResNet.modules", "math.ceil", "math.ceil", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "sample_size", ",", "\n", "sample_duration", ",", "\n", "shortcut_type", "=", "'B'", ",", "\n", "num_classes", "=", "400", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "PreActivationResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "shortcut_type", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "last_duration", "=", "int", "(", "math", ".", "ceil", "(", "sample_duration", "/", "16", ")", ")", "\n", "last_size", "=", "int", "(", "math", ".", "ceil", "(", "sample_size", "/", "32", ")", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool3d", "(", "\n", "(", "last_duration", ",", "last_size", ",", "last_size", ")", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.PreActivationResNet._make_layer": [[150, 174], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "shortcut_type", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "shortcut_type", "==", "'A'", ":", "\n", "                ", "downsample", "=", "partial", "(", "\n", "downsample_basic_block", ",", "\n", "planes", "=", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.PreActivationResNet.forward": [[175, 192], ["pre_act_resnet.PreActivationResNet.conv1", "pre_act_resnet.PreActivationResNet.bn1", "pre_act_resnet.PreActivationResNet.relu", "pre_act_resnet.PreActivationResNet.maxpool", "pre_act_resnet.PreActivationResNet.layer1", "pre_act_resnet.PreActivationResNet.layer2", "pre_act_resnet.PreActivationResNet.layer3", "pre_act_resnet.PreActivationResNet.layer4", "pre_act_resnet.PreActivationResNet.avgpool", "pre_act_resnet.PreActivationResNet.view", "pre_act_resnet.PreActivationResNet.fc", "pre_act_resnet.PreActivationResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.conv3x3x3": [[14, 23], ["torch.Conv3d"], "function", ["None"], ["def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "# 3x3x3 convolution with padding", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.downsample_basic_block": [[25, 36], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["", "def", "downsample_basic_block", "(", "x", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "Tensor", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "\n", "out", ".", "size", "(", "4", ")", ")", ".", "zero_", "(", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "Variable", "(", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.get_fine_tuning_parameters": [[194, 213], ["range", "ft_module_names.append", "model.named_parameters", "model.parameters", "ft_module_names.append", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_begin_index", ")", ":", "\n", "    ", "if", "ft_begin_index", "==", "0", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "ft_module_names", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ft_begin_index", ",", "5", ")", ":", "\n", "        ", "ft_module_names", ".", "append", "(", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "", "ft_module_names", ".", "append", "(", "'fc'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "            ", "if", "ft_module", "in", "k", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.resnet18": [[215, 220], ["pre_act_resnet.PreActivationResNet"], "function", ["None"], ["", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "PreActivationResNet", "(", "PreActivationBasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.resnet34": [[222, 227], ["pre_act_resnet.PreActivationResNet"], "function", ["None"], ["", "def", "resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    \"\"\"", "\n", "model", "=", "PreActivationResNet", "(", "PreActivationBasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.resnet50": [[229, 234], ["pre_act_resnet.PreActivationResNet"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "model", "=", "PreActivationResNet", "(", "PreActivationBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.resnet101": [[236, 242], ["pre_act_resnet.PreActivationResNet"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "PreActivationResNet", "(", "PreActivationBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.resnet152": [[244, 250], ["pre_act_resnet.PreActivationResNet"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "PreActivationResNet", "(", "PreActivationBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.pre_act_resnet.resnet200": [[252, 258], ["pre_act_resnet.PreActivationResNet"], "function", ["None"], ["", "def", "resnet200", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "PreActivationResNet", "(", "PreActivationBottleneck", ",", "[", "3", ",", "24", ",", "36", ",", "3", "]", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.wide_resnet.WideBottleneck.__init__": [[38, 51], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "WideBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "\n", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.wide_resnet.WideBottleneck.forward": [[52, 73], ["wide_resnet.WideBottleneck.conv1", "wide_resnet.WideBottleneck.bn1", "wide_resnet.WideBottleneck.relu", "wide_resnet.WideBottleneck.conv2", "wide_resnet.WideBottleneck.bn2", "wide_resnet.WideBottleneck.relu", "wide_resnet.WideBottleneck.conv3", "wide_resnet.WideBottleneck.bn3", "wide_resnet.WideBottleneck.relu", "wide_resnet.WideBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.wide_resnet.WideResNet.__init__": [[77, 116], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "wide_resnet.WideResNet._make_layer", "wide_resnet.WideResNet._make_layer", "wide_resnet.WideResNet._make_layer", "wide_resnet.WideResNet._make_layer", "int", "int", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "wide_resnet.WideResNet.modules", "math.ceil", "math.ceil", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "sample_size", ",", "\n", "sample_duration", ",", "\n", "k", "=", "1", ",", "\n", "shortcut_type", "=", "'B'", ",", "\n", "num_classes", "=", "400", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", "*", "k", ",", "layers", "[", "0", "]", ",", "shortcut_type", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "128", "*", "k", ",", "layers", "[", "1", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", "*", "k", ",", "layers", "[", "2", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", "*", "k", ",", "layers", "[", "3", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "last_duration", "=", "int", "(", "math", ".", "ceil", "(", "sample_duration", "/", "16", ")", ")", "\n", "last_size", "=", "int", "(", "math", ".", "ceil", "(", "sample_size", "/", "32", ")", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool3d", "(", "\n", "(", "last_duration", ",", "last_size", ",", "last_size", ")", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "k", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.wide_resnet.WideResNet._make_layer": [[117, 141], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "shortcut_type", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "shortcut_type", "==", "'A'", ":", "\n", "                ", "downsample", "=", "partial", "(", "\n", "downsample_basic_block", ",", "\n", "planes", "=", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.wide_resnet.WideResNet.forward": [[142, 159], ["wide_resnet.WideResNet.conv1", "wide_resnet.WideResNet.bn1", "wide_resnet.WideResNet.relu", "wide_resnet.WideResNet.maxpool", "wide_resnet.WideResNet.layer1", "wide_resnet.WideResNet.layer2", "wide_resnet.WideResNet.layer3", "wide_resnet.WideResNet.layer4", "wide_resnet.WideResNet.avgpool", "wide_resnet.WideResNet.view", "wide_resnet.WideResNet.fc", "wide_resnet.WideResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.wide_resnet.conv3x3x3": [[11, 20], ["torch.Conv3d"], "function", ["None"], ["def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "# 3x3x3 convolution with padding", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.wide_resnet.downsample_basic_block": [[22, 33], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["", "def", "downsample_basic_block", "(", "x", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "Tensor", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "\n", "out", ".", "size", "(", "4", ")", ")", ".", "zero_", "(", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "Variable", "(", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.wide_resnet.get_fine_tuning_parameters": [[161, 180], ["range", "ft_module_names.append", "model.named_parameters", "model.parameters", "ft_module_names.append", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_begin_index", ")", ":", "\n", "    ", "if", "ft_begin_index", "==", "0", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "ft_module_names", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ft_begin_index", ",", "5", ")", ":", "\n", "        ", "ft_module_names", ".", "append", "(", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "", "ft_module_names", ".", "append", "(", "'fc'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "            ", "if", "ft_module", "in", "k", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.wide_resnet.resnet50": [[182, 187], ["wide_resnet.WideResNet"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "model", "=", "WideResNet", "(", "WideBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.BasicBlock.__init__": [[41, 50], ["torch.Module.__init__", "resnet.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet.conv3x3x3", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.conv3x3x3", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.conv3x3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.BasicBlock.forward": [[51, 68], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.Bottleneck.__init__": [[73, 85], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.Bottleneck.forward": [[86, 107], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.ResNet.__init__": [[111, 149], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "int", "int", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "math.ceil", "math.ceil", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "sample_size", ",", "\n", "sample_duration", ",", "\n", "shortcut_type", "=", "'B'", ",", "\n", "num_classes", "=", "400", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "shortcut_type", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "shortcut_type", ",", "stride", "=", "2", ")", "\n", "last_duration", "=", "int", "(", "math", ".", "ceil", "(", "sample_duration", "/", "16", ")", ")", "\n", "last_size", "=", "int", "(", "math", ".", "ceil", "(", "sample_size", "/", "32", ")", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool3d", "(", "\n", "(", "last_duration", ",", "last_size", ",", "last_size", ")", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.ResNet._make_layer": [[150, 174], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "shortcut_type", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "shortcut_type", "==", "'A'", ":", "\n", "                ", "downsample", "=", "partial", "(", "\n", "downsample_basic_block", ",", "\n", "planes", "=", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.ResNet.forward": [[175, 192], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "resnet.ResNet.view", "resnet.ResNet.fc", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.conv3x3x3": [[14, 23], ["torch.Conv3d"], "function", ["None"], ["def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "# 3x3x3 convolution with padding", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.downsample_basic_block": [[25, 36], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["", "def", "downsample_basic_block", "(", "x", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "Tensor", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "\n", "out", ".", "size", "(", "4", ")", ")", ".", "zero_", "(", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "Variable", "(", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.get_fine_tuning_parameters": [[194, 213], ["range", "ft_module_names.append", "model.named_parameters", "model.parameters", "ft_module_names.append", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_begin_index", ")", ":", "\n", "    ", "if", "ft_begin_index", "==", "0", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "ft_module_names", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ft_begin_index", ",", "5", ")", ":", "\n", "        ", "ft_module_names", ".", "append", "(", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "", "ft_module_names", ".", "append", "(", "'fc'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "            ", "if", "ft_module", "in", "k", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.resnet10": [[215, 220], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet10", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.resnet18": [[222, 227], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.resnet34": [[229, 234], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.resnet50": [[236, 241], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.resnet101": [[243, 248], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.resnet152": [[250, 255], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnet.resnet200": [[257, 262], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet200", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "24", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.densenet._DenseLayer.__init__": [[73, 95], ["torch.Sequential.__init__", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "densenet._DenseLayer.add_module", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm.1'", ",", "nn", ".", "BatchNorm3d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu.1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv.1'", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "num_input_features", ",", "\n", "bn_size", "*", "growth_rate", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "'norm.2'", ",", "nn", ".", "BatchNorm3d", "(", "bn_size", "*", "growth_rate", ")", ")", "\n", "self", ".", "add_module", "(", "'relu.2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv.2'", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "bn_size", "*", "growth_rate", ",", "\n", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.densenet._DenseLayer.forward": [[96, 102], ["super().forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_features", "=", "super", "(", "_DenseLayer", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "\n", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "new_features", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.densenet._DenseBlock.__init__": [[106, 113], ["torch.Sequential.__init__", "range", "densenet._DenseLayer", "densenet._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "\n", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "num_input_features", "+", "i", "*", "growth_rate", ",", "\n", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", "\n", "self", ".", "add_module", "(", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.densenet._Transition.__init__": [[117, 129], ["torch.Sequential.__init__", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "densenet._Transition.add_module", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm'", ",", "nn", ".", "BatchNorm3d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "num_input_features", ",", "\n", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "'pool'", ",", "nn", ".", "AvgPool3d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.densenet.DenseNet.__init__": [[143, 204], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "enumerate", "densenet.DenseNet.features.add_module", "densenet.DenseNet.modules", "torch.Linear", "torch.Linear", "torch.Linear", "collections.OrderedDict", "densenet._DenseBlock", "densenet.DenseNet.features.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "isinstance", "densenet._Transition", "densenet.DenseNet.features.add_module", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "len", "isinstance", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "\n", "sample_size", ",", "\n", "sample_duration", ",", "\n", "growth_rate", "=", "32", ",", "\n", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "num_init_features", "=", "64", ",", "\n", "bn_size", "=", "4", ",", "\n", "drop_rate", "=", "0", ",", "\n", "num_classes", "=", "1000", ")", ":", "\n", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sample_size", "=", "sample_size", "\n", "self", ".", "sample_duration", "=", "sample_duration", "\n", "\n", "# First convolution", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "num_init_features", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", ")", ",", "\n", "(", "'norm0'", ",", "nn", ".", "BatchNorm3d", "(", "num_init_features", ")", ")", ",", "\n", "(", "'relu0'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'pool0'", ",", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "# Each denseblock", "\n", "num_features", "=", "num_init_features", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "block", "=", "_DenseBlock", "(", "\n", "num_layers", "=", "num_layers", ",", "\n", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "\n", "growth_rate", "=", "growth_rate", ",", "\n", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "                ", "trans", "=", "_Transition", "(", "\n", "num_input_features", "=", "num_features", ",", "\n", "num_output_features", "=", "num_features", "//", "2", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "# Final batch norm", "\n", "", "", "self", ".", "features", ".", "add_module", "(", "'norm5'", ",", "nn", ".", "BatchNorm2d", "(", "num_features", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# Linear layer", "\n", "", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.densenet.DenseNet.forward": [[205, 215], ["densenet.DenseNet.features", "torch.relu", "torch.relu", "torch.relu", "int", "int", "torch.avg_pool3d().view", "torch.avg_pool3d().view", "torch.avg_pool3d().view", "densenet.DenseNet.classifier", "math.ceil", "math.floor", "densenet.DenseNet.size", "torch.avg_pool3d", "torch.avg_pool3d", "torch.avg_pool3d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "features", ",", "inplace", "=", "True", ")", "\n", "last_duration", "=", "int", "(", "math", ".", "ceil", "(", "self", ".", "sample_duration", "/", "16", ")", ")", "\n", "last_size", "=", "int", "(", "math", ".", "floor", "(", "self", ".", "sample_size", "/", "32", ")", ")", "\n", "out", "=", "F", ".", "avg_pool3d", "(", "\n", "out", ",", "kernel_size", "=", "(", "last_duration", ",", "last_size", ",", "last_size", ")", ")", ".", "view", "(", "\n", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.densenet.densenet121": [[12, 19], ["densenet.DenseNet"], "function", ["None"], ["def", "densenet121", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "\n", "num_init_features", "=", "64", ",", "\n", "growth_rate", "=", "32", ",", "\n", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.densenet.densenet169": [[21, 28], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet169", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "\n", "num_init_features", "=", "64", ",", "\n", "growth_rate", "=", "32", ",", "\n", "block_config", "=", "(", "6", ",", "12", ",", "32", ",", "32", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.densenet.densenet201": [[30, 37], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet201", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "\n", "num_init_features", "=", "64", ",", "\n", "growth_rate", "=", "32", ",", "\n", "block_config", "=", "(", "6", ",", "12", ",", "48", ",", "32", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.densenet.densenet264": [[39, 46], ["densenet.DenseNet"], "function", ["None"], ["", "def", "densenet264", "(", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "DenseNet", "(", "\n", "num_init_features", "=", "64", ",", "\n", "growth_rate", "=", "32", ",", "\n", "block_config", "=", "(", "6", ",", "12", ",", "64", ",", "48", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.densenet.get_fine_tuning_parameters": [[48, 69], ["range", "ft_module_names.append", "ft_module_names.append", "model.named_parameters", "model.parameters", "ft_module_names.append", "ft_module_names.append", "parameters.append", "parameters.append"], "function", ["None"], ["", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_begin_index", ")", ":", "\n", "    ", "if", "ft_begin_index", "==", "0", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "ft_module_names", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ft_begin_index", ",", "5", ")", ":", "\n", "        ", "ft_module_names", ".", "append", "(", "'denseblock{}'", ".", "format", "(", "i", ")", ")", "\n", "ft_module_names", ".", "append", "(", "'transition{}'", ".", "format", "(", "i", ")", ")", "\n", "", "ft_module_names", ".", "append", "(", "'norm5'", ")", "\n", "ft_module_names", ".", "append", "(", "'classifier'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "            ", "if", "ft_module", "in", "k", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXtBottleneck.__init__": [[38, 59], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "cardinality", ",", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNeXtBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "mid_planes", "=", "cardinality", "*", "int", "(", "planes", "/", "32", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "inplanes", ",", "mid_planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "mid_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv3d", "(", "\n", "mid_planes", ",", "\n", "mid_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "groups", "=", "cardinality", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm3d", "(", "mid_planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv3d", "(", "\n", "mid_planes", ",", "planes", "*", "self", ".", "expansion", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm3d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXtBottleneck.forward": [[60, 81], ["resnext.ResNeXtBottleneck.conv1", "resnext.ResNeXtBottleneck.bn1", "resnext.ResNeXtBottleneck.relu", "resnext.ResNeXtBottleneck.conv2", "resnext.ResNeXtBottleneck.bn2", "resnext.ResNeXtBottleneck.relu", "resnext.ResNeXtBottleneck.conv3", "resnext.ResNeXtBottleneck.bn3", "resnext.ResNeXtBottleneck.relu", "resnext.ResNeXtBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__": [[85, 125], ["torch.Module.__init__", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "resnext.ResNeXt._make_layer", "int", "int", "torch.AvgPool3d", "torch.AvgPool3d", "torch.AvgPool3d", "torch.Linear", "torch.Linear", "torch.Linear", "resnext.ResNeXt.modules", "math.ceil", "math.ceil", "isinstance", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "torch.init.kaiming_normal", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.__init__", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer", "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "sample_size", ",", "\n", "sample_duration", ",", "\n", "shortcut_type", "=", "'B'", ",", "\n", "cardinality", "=", "32", ",", "\n", "num_classes", "=", "400", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv3d", "(", "\n", "3", ",", "\n", "64", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "(", "1", ",", "2", ",", "2", ")", ",", "\n", "padding", "=", "(", "3", ",", "3", ",", "3", ")", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm3d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool3d", "(", "kernel_size", "=", "(", "3", ",", "3", ",", "3", ")", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "0", "]", ",", "shortcut_type", ",", "\n", "cardinality", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", ",", "layers", "[", "1", "]", ",", "shortcut_type", ",", "cardinality", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "2", "]", ",", "shortcut_type", ",", "cardinality", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "1024", ",", "layers", "[", "3", "]", ",", "shortcut_type", ",", "cardinality", ",", "stride", "=", "2", ")", "\n", "last_duration", "=", "int", "(", "math", ".", "ceil", "(", "sample_duration", "/", "16", ")", ")", "\n", "last_size", "=", "int", "(", "math", ".", "ceil", "(", "sample_size", "/", "32", ")", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool3d", "(", "\n", "(", "last_duration", ",", "last_size", ",", "last_size", ")", ",", "stride", "=", "1", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "cardinality", "*", "32", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv3d", ")", ":", "\n", "                ", "m", ".", "weight", "=", "nn", ".", "init", ".", "kaiming_normal", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm3d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt._make_layer": [[126, 157], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "functools.partial", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "\n", "block", ",", "\n", "planes", ",", "\n", "blocks", ",", "\n", "shortcut_type", ",", "\n", "cardinality", ",", "\n", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "if", "shortcut_type", "==", "'A'", ":", "\n", "                ", "downsample", "=", "partial", "(", "\n", "downsample_basic_block", ",", "\n", "planes", "=", "planes", "*", "block", ".", "expansion", ",", "\n", "stride", "=", "stride", ")", "\n", "", "else", ":", "\n", "                ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ")", ",", "nn", ".", "BatchNorm3d", "(", "planes", "*", "block", ".", "expansion", ")", ")", "\n", "\n", "", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cardinality", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "cardinality", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.ResNeXt.forward": [[158, 175], ["resnext.ResNeXt.conv1", "resnext.ResNeXt.bn1", "resnext.ResNeXt.relu", "resnext.ResNeXt.maxpool", "resnext.ResNeXt.layer1", "resnext.ResNeXt.layer2", "resnext.ResNeXt.layer3", "resnext.ResNeXt.layer4", "resnext.ResNeXt.avgpool", "resnext.ResNeXt.view", "resnext.ResNeXt.fc", "resnext.ResNeXt.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.conv3x3x3": [[11, 20], ["torch.Conv3d"], "function", ["None"], ["def", "conv3x3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "# 3x3x3 convolution with padding", "\n", "    ", "return", "nn", ".", "Conv3d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.downsample_basic_block": [[22, 33], ["torch.avg_pool3d", "torch.Tensor().zero_", "torch.Tensor().zero_", "torch.Tensor().zero_", "isinstance", "torch.autograd.Variable", "zero_pads.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size", "torch.autograd.Variable.size"], "function", ["None"], ["", "def", "downsample_basic_block", "(", "x", ",", "planes", ",", "stride", ")", ":", "\n", "    ", "out", "=", "F", ".", "avg_pool3d", "(", "x", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ")", "\n", "zero_pads", "=", "torch", ".", "Tensor", "(", "\n", "out", ".", "size", "(", "0", ")", ",", "planes", "-", "out", ".", "size", "(", "1", ")", ",", "out", ".", "size", "(", "2", ")", ",", "out", ".", "size", "(", "3", ")", ",", "\n", "out", ".", "size", "(", "4", ")", ")", ".", "zero_", "(", ")", "\n", "if", "isinstance", "(", "out", ".", "data", ",", "torch", ".", "cuda", ".", "FloatTensor", ")", ":", "\n", "        ", "zero_pads", "=", "zero_pads", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "Variable", "(", "torch", ".", "cat", "(", "[", "out", ".", "data", ",", "zero_pads", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.get_fine_tuning_parameters": [[177, 196], ["range", "ft_module_names.append", "model.named_parameters", "model.parameters", "ft_module_names.append", "parameters.append", "parameters.append"], "function", ["None"], ["", "", "def", "get_fine_tuning_parameters", "(", "model", ",", "ft_begin_index", ")", ":", "\n", "    ", "if", "ft_begin_index", "==", "0", ":", "\n", "        ", "return", "model", ".", "parameters", "(", ")", "\n", "\n", "", "ft_module_names", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "ft_begin_index", ",", "5", ")", ":", "\n", "        ", "ft_module_names", ".", "append", "(", "'layer{}'", ".", "format", "(", "i", ")", ")", "\n", "", "ft_module_names", ".", "append", "(", "'fc'", ")", "\n", "\n", "parameters", "=", "[", "]", "\n", "for", "k", ",", "v", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "for", "ft_module", "in", "ft_module_names", ":", "\n", "            ", "if", "ft_module", "in", "k", ":", "\n", "                ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", "}", ")", "\n", "break", "\n", "", "", "else", ":", "\n", "            ", "parameters", ".", "append", "(", "{", "'params'", ":", "v", ",", "'lr'", ":", "0.0", "}", ")", "\n", "\n", "", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.resnet50": [[198, 203], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "ResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.resnet101": [[205, 210], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "ResNeXtBottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.c3d.resnext.resnet152": [[212, 217], ["resnext.ResNeXt"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNeXt", "(", "ResNeXtBottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.kay-ck_bsc-attack.opts.c3d_opts.parse_opts": [[4, 41], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parse_opts", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--root_path'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Root directory path of data'", ")", "\n", "parser", ".", "add_argument", "(", "'--video_path'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Directory path of Videos'", ")", "\n", "parser", ".", "add_argument", "(", "'--annotation_path'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Annotation file path'", ")", "\n", "parser", ".", "add_argument", "(", "'--result_path'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Result directory path'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'ucf101'", ",", "type", "=", "str", ",", "help", "=", "'Used dataset (kinetics | ucf101 | hmdb51)'", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'c3d'", ",", "type", "=", "str", ",", "help", "=", "'Used action recognition model (c3d | lrcn | i3d)'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_classes'", ",", "default", "=", "101", ",", "type", "=", "int", ",", "help", "=", "'Number of classes (kinetics: 400, ucf101: 101, hmdb51: 51)'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_size'", ",", "default", "=", "112", ",", "type", "=", "int", ",", "help", "=", "'Height and width of inputs'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_duration'", ",", "default", "=", "16", ",", "type", "=", "int", ",", "help", "=", "'Temporal duration of inputs'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean_dataset'", ",", "default", "=", "'ucf101'", ",", "type", "=", "str", ",", "help", "=", "'dataset for mean values of mean subtraction (kinetics | ucf101 | hmdb51)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_mean_norm'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, inputs are not normalized by mean.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_mean_norm", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--std_norm'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, inputs are normalized by standard deviation.'", ")", "\n", "parser", ".", "set_defaults", "(", "std_norm", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'Batch Size'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain_path'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'Pretrained model (.pth)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, test is performed.'", ")", "\n", "parser", ".", "set_defaults", "(", "test", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--test_subset'", ",", "default", "=", "'val'", ",", "type", "=", "str", ",", "help", "=", "'Used subset in test (val | test)'", ")", "\n", "parser", ".", "add_argument", "(", "'--scale_in_test'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "help", "=", "'Spatial scale in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop_position_in_test'", ",", "default", "=", "'c'", ",", "type", "=", "str", ",", "help", "=", "'Cropping method (c | tl | tr | bl | br) in test'", ")", "\n", "parser", ".", "add_argument", "(", "'--no_softmax_in_test'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, output for each clip is not normalized using softmax.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_softmax_in_test", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--no_cuda'", ",", "action", "=", "'store_true'", ",", "help", "=", "'If true, cuda is not used.'", ")", "\n", "parser", ".", "set_defaults", "(", "no_cuda", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--n_threads'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "help", "=", "'Number of threads for multi-thread loading'", ")", "\n", "parser", ".", "add_argument", "(", "'--norm_value'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'If 1, range of inputs is [0-255]. If 255, range of inputs is [0-1].'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_type'", ",", "default", "=", "'resnext'", ",", "type", "=", "str", ",", "help", "=", "'(resnet | preresnet | wideresnet | resnext | densenet | '", ")", "\n", "parser", ".", "add_argument", "(", "'--model_depth'", ",", "default", "=", "101", ",", "type", "=", "int", ",", "help", "=", "'Depth of resnet (10 | 18 | 34 | 50 | 101)'", ")", "\n", "parser", ".", "add_argument", "(", "'--resnet_shortcut'", ",", "default", "=", "'B'", ",", "type", "=", "str", ",", "help", "=", "'Shortcut type of resnet (A | B)'", ")", "\n", "parser", ".", "add_argument", "(", "'--wide_resnet_k'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "'Wide resnet k'", ")", "\n", "parser", ".", "add_argument", "(", "'--resnext_cardinality'", ",", "default", "=", "32", ",", "type", "=", "int", ",", "help", "=", "'ResNeXt cardinality'", ")", "\n", "parser", ".", "add_argument", "(", "'--manual_seed'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "help", "=", "'Manually set random seed'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "", ""]]}