{"home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.ResidualWrapper.__init__": [[25, 31], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cell", ")", ":", "\n", "    ", "\"\"\"Constructs a `ResidualWrapper` for `cell`.\n    Args:\n      cell: An instance of `RNNCell`.\n    \"\"\"", "\n", "self", ".", "_cell", "=", "cell", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.ResidualWrapper.state_size": [[32, 35], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cell", ".", "state_size", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.ResidualWrapper.output_size": [[36, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "output_size", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_cell", ".", "output_size", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.ResidualWrapper.__call__": [[40, 61], ["discriminator.ResidualWrapper._cell", "tensorflow.python.util.nest.assert_same_structure", "tensorflow.python.util.nest.map_structure", "tensorflow.python.util.nest.map_structure", "inp.get_shape().assert_is_compatible_with", "out.get_shape", "inp.get_shape"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "state", ",", "scope", "=", "None", ")", ":", "\n", "    ", "\"\"\"Run the cell and add its inputs to its outputs.\n    Args:\n      inputs: cell inputs.\n      state: cell state.\n      scope: optional cell scope.\n    Returns:\n      Tuple of cell outputs and new state.\n    Raises:\n      TypeError: If cell inputs and outputs have different structure (type).\n      ValueError: If cell inputs and outputs have different structure (value).\n    \"\"\"", "\n", "outputs", ",", "new_state", "=", "self", ".", "_cell", "(", "inputs", ",", "state", ",", "scope", "=", "scope", ")", "\n", "nest", ".", "assert_same_structure", "(", "inputs", ",", "outputs", ")", "\n", "# Ensure shapes match", "\n", "def", "assert_shape_match", "(", "inp", ",", "out", ")", ":", "\n", "      ", "inp", ".", "get_shape", "(", ")", ".", "assert_is_compatible_with", "(", "out", ".", "get_shape", "(", ")", ")", "\n", "", "nest", ".", "map_structure", "(", "assert_shape_match", ",", "inputs", ",", "outputs", ")", "\n", "res_outputs", "=", "nest", ".", "map_structure", "(", "\n", "lambda", "inp", ",", "out", ":", "inp", "+", "out", ",", "inputs", ",", "outputs", ")", "\n", "return", "(", "res_outputs", ",", "new_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.Discriminator.__init__": [[108, 255], ["config.Config", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.to_float", "tensorflow.layers.dense", "tensorflow.contrib.rnn.MultiRNNCell", "tensorflow.nn.embedding_lookup", "print", "print", "print", "print", "range", "tensorflow.layers.dense", "tensorflow.nn.softmax", "tensorflow.reduce_mean", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.trainable_variables", "tensorflow.clip_by_global_norm", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.apply_gradients", "tensorflow.equal", "tensorflow.get_variable", "tensorflow.get_variable", "Exception", "tensorflow.reshape", "tensorflow.tile", "tensorflow.concat", "tensorflow.nn.dropout", "tensorflow.TensorArray", "tensorflow.contrib.rnn.MultiRNNCell.zero_state", "tensorflow.reshape", "tensorflow.split", "print", "tensorflow.split", "tensorflow.concat", "print", "tensorflow.concat", "tensorflow.layers.dense", "tensorflow.nn.softmax_cross_entropy_with_logits", "tensorflow.argmax", "tensorflow.argmax", "tensorflow.cast", "tensorflow.gradients", "zip", "discriminator.ResidualWrapper", "tensorflow.contrib.rnn.BasicLSTMCell", "tensorflow.contrib.rnn.DropoutWrapper", "discriminator.Discriminator.__init__.attn_cell"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "word_embedding", ",", "word_to_idx", "=", "None", ",", "use_glove", "=", "True", ",", "\n", "is_training", "=", "True", ",", "dim_feat", "=", "2048", ",", "config", "=", "Config", "(", ")", ",", "num_input", "=", "2", ")", ":", "\n", "        ", "self", ".", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "config", ".", "num_steps", "]", ")", "\n", "self", ".", "y_", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "2", "]", ")", "\n", "self", ".", "img_feat", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "dim_feat", "]", ")", "\n", "self", ".", "lr", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "_eos", "=", "word_to_idx", "[", "'<eos>'", "]", "\n", "mask", "=", "tf", ".", "to_float", "(", "tf", ".", "equal", "(", "self", ".", "x", ",", "self", ".", "_eos", ")", ")", "\n", "\n", "num_steps", "=", "config", ".", "num_steps", "\n", "hidden_size", "=", "config", ".", "hidden_size", "\n", "vocab_size", "=", "config", ".", "vocab_size", "\n", "embedding_size", "=", "config", ".", "embedding_size", "\n", "num_input", "=", "config", ".", "num_input", "\n", "use_img_feat", "=", "config", ".", "use_img_feat", "\n", "use_lstm", "=", "config", ".", "use_lstm", "\n", "combine_typ", "=", "config", ".", "combine_typ", "\n", "cls_hidden", "=", "config", ".", "cls_hidden", "\n", "use_residual", "=", "config", ".", "use_residual", "\n", "\n", "img_feat", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "self", ".", "img_feat", ",", "units", "=", "hidden_size", ",", "activation", "=", "None", ")", "\n", "\n", "if", "use_residual", ":", "\n", "            ", "def", "lstm_cell", "(", ")", ":", "\n", "                ", "return", "ResidualWrapper", "(", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n", "hidden_size", ",", "forget_bias", "=", "1.0", ",", "state_is_tuple", "=", "True", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "def", "lstm_cell", "(", ")", ":", "\n", "                ", "return", "tf", ".", "contrib", ".", "rnn", ".", "BasicLSTMCell", "(", "\n", "hidden_size", ",", "forget_bias", "=", "1.0", ",", "state_is_tuple", "=", "True", ")", "\n", "\n", "", "", "attn_cell", "=", "lstm_cell", "\n", "if", "is_training", "and", "config", ".", "dropout_prob", "<", "1", ":", "\n", "            ", "def", "attn_cell", "(", ")", ":", "\n", "                ", "return", "tf", ".", "contrib", ".", "rnn", ".", "DropoutWrapper", "(", "\n", "lstm_cell", "(", ")", ",", "output_keep_prob", "=", "config", ".", "dropout_prob", ")", "\n", "", "", "cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "MultiRNNCell", "(", "\n", "[", "attn_cell", "(", ")", "for", "_", "in", "xrange", "(", "config", ".", "num_layers", ")", "]", ",", "state_is_tuple", "=", "True", ")", "\n", "\n", "if", "use_glove", ":", "\n", "            ", "embedding", "=", "tf", ".", "get_variable", "(", "\n", "\"embedding\"", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "tf", ".", "constant", "(", "word_embedding", ")", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "=", "tf", ".", "get_variable", "(", "\n", "\"embedding\"", ",", "[", "vocab_size", ",", "embedding_size", "]", ",", "\n", "initializer", "=", "tf", ".", "random_uniform_initializer", "(", "minval", "=", "-", "1.0", ",", "maxval", "=", "1.0", ")", ")", "\n", "", "inputs", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "embedding", ",", "self", ".", "x", ")", "\n", "\n", "if", "use_img_feat", "==", "'concat_bf_lstm'", ":", "\n", "            ", "raise", "Exception", "(", "\"use_img_feat=concat_bf_lstm not supported\"", ")", "\n", "img_reshape", "=", "tf", ".", "reshape", "(", "img_feat", ",", "[", "-", "1", ",", "1", ",", "dim_feat", "]", ")", "\n", "img_tiled", "=", "tf", ".", "tile", "(", "img_reshape", ",", "[", "1", ",", "num_steps", ",", "1", "]", ")", "\n", "inputs", "=", "tf", ".", "concat", "(", "[", "inputs", ",", "img_tiled", "]", ",", "2", ")", "\n", "\n", "", "if", "is_training", "and", "config", ".", "dropout_prob", "<", "1", ":", "\n", "            ", "inputs", "=", "tf", ".", "nn", ".", "dropout", "(", "inputs", ",", "config", ".", "dropout_prob", ")", "\n", "\n", "\n", "", "if", "use_lstm", ":", "\n", "            ", "ta_d_outputs", "=", "tf", ".", "TensorArray", "(", "\n", "dtype", "=", "tf", ".", "float32", ",", "size", "=", "num_steps", ",", "\n", "dynamic_size", "=", "False", ",", "infer_shape", "=", "True", ")", "\n", "\n", "state", "=", "cell", ".", "zero_state", "(", "tf", ".", "shape", "(", "inputs", ")", "[", "0", "]", ",", "tf", ".", "float32", ")", "\n", "with", "tf", ".", "variable_scope", "(", "\"RNN\"", ")", ":", "\n", "                ", "for", "time_step", "in", "xrange", "(", "num_steps", ")", ":", "\n", "                    ", "if", "time_step", ">", "0", ":", "\n", "                        ", "tf", ".", "get_variable_scope", "(", ")", ".", "reuse_variables", "(", ")", "\n", "", "(", "output", ",", "state", ")", "=", "cell", "(", "inputs", "[", ":", ",", "time_step", ",", ":", "]", ",", "state", ")", "\n", "ta_d_outputs", "=", "ta_d_outputs", ".", "write", "(", "time_step", ",", "output", ")", "\n", "\n", "# batch_size x seq_length x hidden_size", "\n", "", "ta_d_outputs", "=", "tf", ".", "transpose", "(", "\n", "ta_d_outputs", ".", "stack", "(", ")", ",", "perm", "=", "[", "1", ",", "0", ",", "2", "]", ")", "\n", "\n", "# apply the mask", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "mask", ",", "-", "1", ")", "\n", "mask", "=", "tf", ".", "tile", "(", "mask", ",", "tf", ".", "stack", "(", "[", "1", ",", "1", ",", "hidden_size", "]", ")", ")", "\n", "masked_out", "=", "ta_d_outputs", "*", "mask", "\n", "output", "=", "tf", ".", "reduce_sum", "(", "masked_out", ",", "axis", "=", "1", ")", "\n", "output_context", ",", "output_candidate", "=", "tf", ".", "split", "(", "\n", "output", ",", "num_or_size_splits", "=", "num_input", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "num_steps", "*", "embedding_size", "]", ")", "\n", "output_context", ",", "output_candidate", "=", "tf", ".", "split", "(", "\n", "inputs", ",", "num_or_size_splits", "=", "num_input", ",", "axis", "=", "0", ")", "\n", "\n", "", "print", "(", "\"-\"", "*", "80", ")", "\n", "if", "use_img_feat", "==", "'concat_af_lstm'", ":", "\n", "            ", "print", "(", "\"Image feature concatenate after the contextfeature from LSTM\"", ")", "\n", "imgf_1", ",", "imgf_2", "=", "tf", ".", "split", "(", "img_feat", ",", "num_or_size_splits", "=", "num_input", ",", "axis", "=", "0", ")", "\n", "output_context", "=", "tf", ".", "concat", "(", "[", "imgf_1", ",", "output_context", "]", ",", "axis", "=", "1", ")", "\n", "", "elif", "use_img_feat", "==", "'only_img'", ":", "\n", "            ", "print", "(", "\"Image Feature Replacing the Context Feature from LSTM\"", ")", "\n", "imgf_1", ",", "imgf_2", "=", "tf", ".", "split", "(", "img_feat", ",", "num_or_size_splits", "=", "num_input", ",", "axis", "=", "0", ")", "\n", "output_context", "=", "imgf_1", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Not using image feature\"", ")", "\n", "", "print", "(", "\"-\"", "*", "80", ")", "\n", "\n", "# Combining candidate information with context information", "\n", "print", "(", "\"-\"", "*", "80", ")", "\n", "if", "combine_typ", "==", "'concat'", ":", "\n", "            ", "print", "(", "\"Directly concatenate context and candidate feature.\"", ")", "\n", "output", "=", "tf", ".", "concat", "(", "[", "output_context", ",", "output_candidate", "]", ",", "axis", "=", "1", ")", "\n", "", "elif", "combine_typ", "==", "'bilinpool'", ":", "# compact bilinear", "\n", "            ", "from", "compact_bilinear_pooling", "import", "compact_bilinear_pooling_layer", "as", "compact_bilinear_pooling", "\n", "print", "(", "\"Use compact bilinear pooling between candidate/context features.\"", ")", "\n", "out_dim", "=", "8192", "\n", "output_context", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "output_context", ",", "1", ")", ",", "1", ")", "\n", "output_candidate", "=", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "output_candidate", ",", "1", ")", ",", "1", ")", "\n", "output", "=", "compact_bilinear_pooling", "(", "output_context", ",", "output_candidate", ",", "out_dim", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "out_dim", "]", ")", "# make static time shape", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"Use only the candidate feature.\"", ")", "\n", "output", "=", "output_candidate", "\n", "", "print", "(", "\"-\"", "*", "80", ")", "\n", "\n", "for", "_", "in", "range", "(", "cls_hidden", ")", ":", "\n", "            ", "output", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "output", ",", "units", "=", "512", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "if", "is_training", "and", "config", ".", "dropout_prob", "<", "1", ":", "\n", "                ", "output", "=", "tf", ".", "nn", ".", "dropout", "(", "output", ",", "config", ".", "dropout_prob", ")", "\n", "\n", "", "", "y", "=", "tf", ".", "layers", ".", "dense", "(", "inputs", "=", "output", ",", "units", "=", "2", ",", "activation", "=", "None", ")", "\n", "\n", "score", "=", "tf", ".", "nn", ".", "softmax", "(", "y", ",", "dim", "=", "-", "1", ",", "name", "=", "None", ")", "\n", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits", "(", "labels", "=", "self", ".", "y_", ",", "logits", "=", "y", ")", ")", "\n", "\n", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "argmax", "(", "y", ",", "1", ")", ",", "tf", ".", "argmax", "(", "self", ".", "y_", ",", "1", ")", ")", "\n", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_prediction", ",", "tf", ".", "float32", ")", ")", "\n", "\n", "self", ".", "_logits", "=", "y", "\n", "self", ".", "_score", "=", "score", "\n", "self", ".", "_loss", "=", "loss", "\n", "self", ".", "_accuracy", "=", "accuracy", "\n", "\n", "if", "not", "is_training", ":", "\n", "            ", "return", "\n", "\n", "", "tvars", "=", "tf", ".", "trainable_variables", "(", ")", "\n", "grads", ",", "_", "=", "tf", ".", "clip_by_global_norm", "(", "tf", ".", "gradients", "(", "loss", ",", "tvars", ")", ",", "config", ".", "grad_clip", ")", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "lr", ")", "\n", "self", ".", "_train_op", "=", "optimizer", ".", "apply_gradients", "(", "\n", "zip", "(", "grads", ",", "tvars", ")", ",", "\n", "global_step", "=", "tf", ".", "contrib", ".", "framework", ".", "get_or_create_global_step", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.add_mc_samples": [[62, 67], ["None"], "function", ["None"], ["", "", "def", "add_mc_samples", "(", "data", ",", "mc_samples", ")", ":", "\n", "    ", "file_names", "=", "data", "[", "'file_names'", "]", "\n", "for", "file_name", "in", "file_names", ":", "\n", "        ", "data", "[", "'captions'", "]", "[", "'dis'", "]", "[", "file_name", "]", "[", "'mc_samples'", "]", "=", "mc_samples", "[", "file_name", "]", "[", "'gen'", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.data_loader": [[68, 104], ["numpy.load().item", "numpy.load().item", "numpy.load().item", "numpy.load().item", "numpy.load().item", "numpy.load().item", "numpy.load", "numpy.load().item", "numpy.load().item", "numpy.load().item", "discriminator.add_mc_samples", "discriminator.add_mc_samples", "discriminator.add_mc_samples", "os.path.join", "os.path.join", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.load", "numpy.load", "numpy.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "str", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "config.Config"], "function", ["home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.add_mc_samples", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.add_mc_samples", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.add_mc_samples"], ["", "def", "data_loader", "(", "data_path", "=", "None", ",", "data_type", "=", "'_full'", ",", "use_mc_samples", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Data format (compatible with Show Attend and Tell):\n    the data file is a dict has the following keys:\n    'file_names'\n    'image_idxs'\n    'captions': a dict has keys 'gen' for generator and 'dis' for discriminator\n    'features': a dict has keys 'gen' for generator and 'dis' for discriminator\n                (to be loaded when needed)\n    'word_to_idx': a dict with word to idx mapping\n    \"\"\"", "\n", "data_train", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"data_train_full.npy\"", ")", ")", ".", "item", "(", ")", "\n", "data_val", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"data_val_full.npy\"", ")", ")", ".", "item", "(", ")", "\n", "data_test", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"data_test_full.npy\"", ")", ")", ".", "item", "(", ")", "\n", "if", "use_mc_samples", ":", "\n", "        ", "mc_train", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'dumped_train.npy'", ")", ")", ".", "item", "(", ")", "\n", "mc_val", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'dumped_val.npy'", ")", ")", ".", "item", "(", ")", "\n", "mc_test", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "'dumped_test.npy'", ")", ")", ".", "item", "(", ")", "\n", "data_train", "=", "add_mc_samples", "(", "data_train", ",", "mc_train", ")", "\n", "data_val", "=", "add_mc_samples", "(", "data_val", ",", "mc_val", ")", "\n", "data_test", "=", "add_mc_samples", "(", "data_test", ",", "mc_test", ")", "\n", "\n", "", "data_train", "[", "'features'", "]", "[", "'dis'", "]", "=", "np", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "data_path", ",", "'resnet152/feature_dis_train%s.npy'", "%", "(", "data_type", ")", ")", "\n", ")", ".", "item", "(", ")", "\n", "data_val", "[", "'features'", "]", "[", "'dis'", "]", "=", "np", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "data_path", ",", "'resnet152/feature_dis_val%s.npy'", "%", "(", "data_type", ")", ")", "\n", ")", ".", "item", "(", ")", "\n", "data_test", "[", "'features'", "]", "[", "'dis'", "]", "=", "np", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "data_path", ",", "'resnet152/feature_dis_test%s.npy'", "%", "(", "data_type", ")", ")", "\n", ")", ".", "item", "(", ")", "\n", "\n", "word_embedding", "=", "np", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "data_path", ",", "'word_embedding_%s.npy'", "%", "(", "str", "(", "Config", "(", ")", ".", "embedding_size", ")", ")", ")", "\n", ")", "\n", "return", "[", "data_train", ",", "data_val", ",", "data_test", ",", "word_embedding", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.train": [[257, 420], ["config.Config", "time.time", "int", "random.shuffle", "print", "print", "print", "xrange", "len", "range", "range", "len", "len", "range.extend", "len", "negative_samples_idx.append", "negative_samples_idx.append", "negative_samples_idx.append", "numpy.zeros", "numpy.zeros", "numpy.zeros", "xrange", "sess.run", "len", "pathological_transf_idx.append", "pathological_transf_idx.append", "pathological_transf_idx.append", "int", "len", "copy.deepcopy", "copy.deepcopy", "range", "random.shuffle", "numpy.random.choice", "print", "len", "len", "len", "copy.deepcopy", "len", "len", "type", "range", "random.shuffle", "len", "range", "random.shuffle", "copy.deepcopy", "range", "random.shuffle", "len", "len", "len", "len", "len", "numpy.random.choice", "Exception", "numpy.random.randint", "copy.deepcopy", "range", "random.shuffle", "len", "len", "len", "numpy.random.randint", "len", "copy.deepcopy", "range", "random.shuffle", "numpy.random.randint", "numpy.random.choice", "len", "time.time", "len", "len", "list", "list().index", "min", "numpy.random.randint", "copy.deepcopy", "range", "random.shuffle", "numpy.random.randint", "list", "list", "Exception", "len", "len", "len", "len", "len", "list", "list().index", "min", "numpy.random.choice", "numpy.random.permutation", "list", "list", "len", "numpy.random.permutation", "len", "list", "len", "len"], "function", ["None"], ["", "", "def", "train", "(", "sess", ",", "model", ",", "data", ",", "gen_model", ",", "epoch", ",", "dim_feat", "=", "2048", ",", "config", "=", "Config", "(", ")", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\"Runs the model on the given data.\"\"\"", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# construct two pairs for each image: (real0, real1), (real0, fake)", "\n", "batch_size", "=", "int", "(", "config", ".", "batch_size", "/", "2", ")", "\n", "num_steps", "=", "config", ".", "num_steps", "\n", "num_input", "=", "config", ".", "num_input", "\n", "\n", "filename", "=", "data", "[", "'file_names'", "]", "\n", "\n", "fetches", "=", "{", "\n", "\"loss\"", ":", "model", ".", "_loss", ",", "\n", "\"accuracy\"", ":", "model", ".", "_accuracy", ",", "\n", "\"train_op\"", ":", "model", ".", "_train_op", "\n", "}", "\n", "\n", "if", "len", "(", "gen_model", ")", "==", "0", ":", "\n", "        ", "idx", "=", "range", "(", "len", "(", "filename", ")", ")", "\n", "", "else", ":", "\n", "        ", "idx", "=", "range", "(", "len", "(", "filename", ")", "*", "len", "(", "gen_model", ")", ")", "\n", "", "random", ".", "shuffle", "(", "idx", ")", "\n", "epoch_size", "=", "len", "(", "idx", ")", "//", "batch_size", "\n", "if", "batch_size", "*", "epoch_size", "<", "len", "(", "idx", ")", ":", "\n", "        ", "epoch_size", "+=", "1", "\n", "idx", ".", "extend", "(", "idx", "[", ":", "batch_size", "*", "epoch_size", "-", "len", "(", "idx", ")", "]", ")", "\n", "", "print", "(", "epoch_size", ")", "\n", "\n", "negative_samples_idx", "=", "[", "]", "\n", "pathological_transf_idx", "=", "[", "]", "\n", "\n", "if", "len", "(", "gen_model", ")", ">", "0", ":", "\n", "        ", "negative_samples_idx", ".", "append", "(", "0", ")", "\n", "\n", "", "if", "config", ".", "use_random_human", "or", "config", ".", "use_random_word", "or", "config", ".", "use_word_permutation", ":", "\n", "        ", "negative_samples_idx", ".", "append", "(", "2", ")", "\n", "if", "config", ".", "use_random_human", ":", "\n", "            ", "pathological_transf_idx", ".", "append", "(", "0", ")", "\n", "", "if", "config", ".", "use_random_word", ":", "\n", "            ", "pathological_transf_idx", ".", "append", "(", "1", ")", "\n", "", "if", "config", ".", "use_word_permutation", ":", "\n", "            ", "pathological_transf_idx", ".", "append", "(", "2", ")", "\n", "\n", "", "", "if", "config", ".", "use_mc_samples", ":", "\n", "        ", "negative_samples_idx", ".", "append", "(", "1", ")", "\n", "", "print", "(", "\"Negative Samples    : %s\"", "%", "negative_samples_idx", ")", "\n", "print", "(", "\"Pathlogical Samples : %s\"", "%", "pathological_transf_idx", ")", "\n", "\n", "for", "i", "in", "xrange", "(", "epoch_size", ")", ":", "\n", "        ", "if", "i", "==", "epoch_size", "-", "1", ":", "\n", "            ", "idx_batch", "=", "idx", "[", "batch_size", "*", "i", ":", "]", "\n", "", "else", ":", "\n", "            ", "idx_batch", "=", "idx", "[", "batch_size", "*", "i", ":", "batch_size", "*", "(", "i", "+", "1", ")", "]", "\n", "", "x", "=", "np", ".", "zeros", "(", "(", "len", "(", "idx_batch", ")", "*", "num_input", "*", "2", ",", "num_steps", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "y_", "=", "np", ".", "zeros", "(", "(", "len", "(", "idx_batch", ")", "*", "2", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "img", "=", "np", ".", "zeros", "(", "(", "len", "(", "idx_batch", ")", "*", "num_input", "*", "2", ",", "dim_feat", ")", ")", "\n", "\n", "idx_batch", "=", "[", "int", "(", "tmp_idx_b", "%", "len", "(", "filename", ")", ")", "for", "tmp_idx_b", "in", "idx_batch", "]", "\n", "\n", "for", "j", "in", "xrange", "(", "len", "(", "idx_batch", ")", ")", ":", "\n", "            ", "curr_img", "=", "copy", ".", "deepcopy", "(", "data", "[", "'features'", "]", "[", "'dis'", "]", "[", "filename", "[", "idx_batch", "[", "j", "]", "]", "]", ")", "\n", "real_cap", "=", "copy", ".", "deepcopy", "(", "data", "[", "'captions'", "]", "[", "'dis'", "]", "[", "filename", "[", "idx_batch", "[", "j", "]", "]", "]", "[", "'human'", "]", ")", "\n", "real_idx", "=", "range", "(", "len", "(", "real_cap", ")", ")", "\n", "random", ".", "shuffle", "(", "real_idx", ")", "\n", "# 1st pair: (real0, real1)", "\n", "x", "[", "j", "*", "2", ",", ":", "]", "=", "real_cap", "[", "real_idx", "[", "0", "]", "]", "\n", "img", "[", "j", "*", "2", ",", ":", "]", "=", "curr_img", "\n", "\n", "x", "[", "j", "*", "2", "+", "len", "(", "idx_batch", ")", "*", "num_input", ",", ":", "]", "=", "real_cap", "[", "real_idx", "[", "1", "]", "]", "\n", "img", "[", "j", "*", "2", "+", "len", "(", "idx_batch", ")", "*", "num_input", ",", ":", "]", "=", "curr_img", "\n", "y_", "[", "j", "*", "2", ",", "0", "]", "=", "1.0", "\n", "\n", "# 2nd pair: (real0, fake), fake is sampled from (gen, random_human, random_word)", "\n", "x", "[", "j", "*", "2", "+", "1", ",", ":", "]", "=", "real_cap", "[", "real_idx", "[", "0", "]", "]", "\n", "img", "[", "j", "*", "2", "+", "1", ",", ":", "]", "=", "curr_img", "\n", "y_", "[", "j", "*", "2", "+", "1", ",", "1", "]", "=", "1.0", "\n", "\n", "rand_ind", "=", "np", ".", "random", ".", "choice", "(", "negative_samples_idx", ")", "\n", "if", "rand_ind", "==", "0", ":", "# Use machine generated captions", "\n", "                ", "if", "type", "(", "gen_model", ")", "==", "list", ":", "\n", "                    ", "model_idx", "=", "range", "(", "len", "(", "gen_model", ")", ")", "\n", "random", ".", "shuffle", "(", "model_idx", ")", "\n", "chosen_model", "=", "gen_model", "[", "model_idx", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                    ", "chosen_model", "=", "gen_model", "\n", "", "gen_cap", "=", "copy", ".", "deepcopy", "(", "\n", "data", "[", "'captions'", "]", "[", "'dis'", "]", "[", "filename", "[", "idx_batch", "[", "j", "]", "]", "]", "[", "chosen_model", "]", ")", "\n", "if", "len", "(", "gen_cap", ".", "shape", ")", "==", "2", ":", "\n", "                    ", "gen_idx", "=", "range", "(", "gen_cap", ".", "shape", "[", "0", "]", ")", "\n", "random", ".", "shuffle", "(", "gen_idx", ")", "\n", "x", "[", "j", "*", "2", "+", "1", "+", "len", "(", "idx_batch", ")", "*", "num_input", ",", ":", "]", "=", "gen_cap", "[", "gen_idx", "[", "0", "]", ",", ":", "]", "# gen_idx[0]", "\n", "", "else", ":", "\n", "                    ", "x", "[", "j", "*", "2", "+", "1", "+", "len", "(", "idx_batch", ")", "*", "num_input", ",", ":", "]", "=", "gen_cap", "\n", "", "", "elif", "rand_ind", "==", "1", ":", "# MC samples", "\n", "                ", "mc_cap", "=", "copy", ".", "deepcopy", "(", "\n", "data", "[", "'captions'", "]", "[", "'dis'", "]", "[", "filename", "[", "idx_batch", "[", "j", "]", "]", "]", "[", "'mc_samples'", "]", ")", "\n", "mc_idx", "=", "range", "(", "len", "(", "mc_cap", ")", ")", "\n", "random", ".", "shuffle", "(", "mc_idx", ")", "\n", "mc_cap", "=", "mc_cap", "[", "mc_idx", "[", "0", "]", "]", "\n", "x", "[", "j", "*", "2", "+", "1", "+", "len", "(", "idx_batch", ")", "*", "num_input", ",", ":", "]", "=", "mc_cap", "\n", "", "elif", "rand_ind", "==", "2", ":", "\n", "                ", "rand_ind_2", "=", "np", ".", "random", ".", "choice", "(", "pathological_transf_idx", ")", "\n", "if", "rand_ind_2", "==", "0", ":", "# Random human caption", "\n", "                    ", "rand_j", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "filename", ")", ")", "\n", "while", "rand_j", "==", "idx_batch", "[", "j", "]", ":", "\n", "                        ", "rand_j", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "filename", ")", ")", "\n", "", "fake_cap", "=", "copy", ".", "deepcopy", "(", "data", "[", "'captions'", "]", "[", "'dis'", "]", "[", "filename", "[", "rand_j", "]", "]", "[", "'human'", "]", ")", "\n", "fake_idx", "=", "range", "(", "len", "(", "fake_cap", ")", ")", "\n", "random", ".", "shuffle", "(", "fake_idx", ")", "\n", "x", "[", "j", "*", "2", "+", "1", "+", "len", "(", "idx_batch", ")", "*", "num_input", ",", ":", "]", "=", "fake_cap", "[", "fake_idx", "[", "0", "]", "]", "\n", "", "elif", "rand_ind_2", "==", "1", ":", "# random word replacement of human caption", "\n", "                    ", "human_cap", "=", "copy", ".", "deepcopy", "(", "\n", "data", "[", "'captions'", "]", "[", "'dis'", "]", "[", "filename", "[", "idx_batch", "[", "j", "]", "]", "]", "[", "'human'", "]", ")", "\n", "human_idx", "=", "range", "(", "len", "(", "human_cap", ")", ")", "\n", "random", ".", "shuffle", "(", "human_idx", ")", "\n", "human_cap", "=", "human_cap", "[", "human_idx", "[", "0", "]", "]", "\n", "if", "model", ".", "_eos", "in", "list", "(", "human_cap", ")", ":", "\n", "                        ", "end_position", "=", "list", "(", "human_cap", ")", ".", "index", "(", "model", ".", "_eos", ")", "\n", "", "else", ":", "\n", "                        ", "end_position", "=", "len", "(", "human_cap", ")", "-", "1", "\n", "", "n_position", "=", "np", ".", "random", ".", "randint", "(", "min", "(", "2", ",", "end_position", "-", "1", ")", ",", "end_position", ")", "\n", "rand_position", "=", "np", ".", "random", ".", "choice", "(", "end_position", ",", "size", "=", "(", "n_position", ",", ")", ",", "replace", "=", "False", ")", "\n", "rand_word", "=", "np", ".", "random", ".", "randint", "(", "config", ".", "vocab_size", "-", "4", ",", "size", "=", "(", "n_position", ",", ")", ")", "+", "4", "\n", "human_cap", "[", "rand_position", "]", "=", "rand_word", "\n", "x", "[", "j", "*", "2", "+", "1", "+", "len", "(", "idx_batch", ")", "*", "num_input", ",", ":", "]", "=", "human_cap", "\n", "\n", "", "elif", "rand_ind_2", "==", "2", ":", "# random permutation of human captions", "\n", "                    ", "human_cap", "=", "copy", ".", "deepcopy", "(", "\n", "data", "[", "'captions'", "]", "[", "'dis'", "]", "[", "filename", "[", "idx_batch", "[", "j", "]", "]", "]", "[", "'human'", "]", ")", "\n", "human_idx", "=", "range", "(", "len", "(", "human_cap", ")", ")", "\n", "random", ".", "shuffle", "(", "human_idx", ")", "\n", "human_cap", "=", "human_cap", "[", "human_idx", "[", "0", "]", "]", "\n", "if", "model", ".", "_eos", "in", "list", "(", "human_cap", ")", ":", "\n", "                        ", "end_position", "=", "list", "(", "human_cap", ")", ".", "index", "(", "model", ".", "_eos", ")", "\n", "", "else", ":", "\n", "                        ", "end_position", "=", "len", "(", "human_cap", ")", "-", "1", "\n", "", "n_position", "=", "np", ".", "random", ".", "randint", "(", "min", "(", "2", ",", "end_position", "-", "1", ")", ",", "end_position", ")", "\n", "rand_position", "=", "list", "(", "np", ".", "random", ".", "choice", "(", "end_position", ",", "size", "=", "(", "n_position", ",", ")", ",", "replace", "=", "False", ")", ")", "\n", "rand_position_permutation", "=", "list", "(", "np", ".", "random", ".", "permutation", "(", "rand_position", ")", ")", "\n", "if", "rand_position_permutation", "==", "rand_position", ":", "\n", "                        ", "rand_position_permutation", "=", "list", "(", "np", ".", "random", ".", "permutation", "(", "rand_position", ")", ")", "\n", "", "human_cap", "[", "rand_position", "]", "=", "human_cap", "[", "rand_position_permutation", "]", "\n", "x", "[", "j", "*", "2", "+", "1", "+", "len", "(", "idx_batch", ")", "*", "num_input", ",", ":", "]", "=", "human_cap", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "\"random number out of bound\"", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "\"random number out of bound\"", ")", "\n", "\n", "", "img", "[", "j", "*", "2", "+", "1", "+", "len", "(", "idx_batch", ")", "*", "num_input", ",", ":", "]", "=", "curr_img", "\n", "\n", "# feed_dict = {model.x: x, model.y_: y_, model.img_feat: img, model.lr : epoch_lr}", "\n", "", "effective_lr", "=", "config", ".", "learning_rate", "*", "config", ".", "learning_rate_decay", "**", "epoch", "\n", "feed_dict", "=", "{", "model", ".", "x", ":", "x", ",", "model", ".", "y_", ":", "y_", ",", "model", ".", "img_feat", ":", "img", ",", "model", ".", "lr", ":", "effective_lr", "}", "\n", "\n", "vals", "=", "sess", ".", "run", "(", "fetches", ",", "feed_dict", ")", "\n", "loss", "=", "vals", "[", "\"loss\"", "]", "\n", "accuracy", "=", "vals", "[", "\"accuracy\"", "]", "\n", "\n", "if", "verbose", "and", "(", "i", "%", "(", "epoch_size", "//", "10", ")", "==", "10", "or", "i", "==", "epoch_size", "-", "1", ")", ":", "\n", "            ", "print", "(", "\"%d / %d loss: %.4f accuracy: %.3f speed: %.3f wps\"", "%", "\n", "(", "i", "+", "1", ",", "epoch_size", ",", "loss", ",", "accuracy", ",", "\n", "i", "*", "1.0", "*", "batch_size", "*", "num_steps", "/", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", ")", "\n", "\n", "", "", "return", "loss", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.inference": [[422, 490], ["config.Config", "range", "xrange", "print", "len", "len", "len", "range.extend", "numpy.zeros", "numpy.zeros", "numpy.zeros", "xrange", "sess.run", "acc.append", "logits.append", "scores.append", "numpy.array", "numpy.array", "numpy.array", "len", "copy.deepcopy", "copy.deepcopy", "range", "random.shuffle", "len", "len", "numpy.mean", "numpy.mean", "len", "len", "random.randint", "copy.deepcopy", "range", "random.shuffle", "numpy.array", "len", "random.randint", "len", "copy.deepcopy", "numpy.array", "len", "numpy.random.randint", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "inference", "(", "sess", ",", "model", ",", "data", ",", "gen_model", ",", "dim_feat", "=", "2048", ",", "config", "=", "Config", "(", ")", ")", ":", "\n", "    ", "\"\"\"Runs the model on the given data.\"\"\"", "\n", "num_steps", "=", "config", ".", "num_steps", "\n", "num_input", "=", "config", ".", "num_input", "\n", "batch_size", "=", "config", ".", "batch_size", "\n", "if", "'file_names'", "in", "data", ":", "\n", "        ", "filename", "=", "data", "[", "'file_names'", "]", "\n", "", "else", ":", "\n", "        ", "filename", "=", "data", "[", "'image_ids'", "]", "\n", "", "acc", "=", "[", "]", "\n", "logits", "=", "[", "]", "\n", "scores", "=", "[", "]", "\n", "\n", "idx", "=", "range", "(", "len", "(", "filename", ")", ")", "\n", "epoch_size", "=", "len", "(", "idx", ")", "//", "batch_size", "\n", "if", "batch_size", "*", "epoch_size", "<", "len", "(", "idx", ")", ":", "\n", "        ", "epoch_size", "+=", "1", "\n", "idx", ".", "extend", "(", "idx", "[", ":", "batch_size", "*", "epoch_size", "-", "len", "(", "idx", ")", "]", ")", "\n", "\n", "", "for", "i", "in", "xrange", "(", "epoch_size", ")", ":", "\n", "        ", "if", "i", "==", "epoch_size", "-", "1", ":", "\n", "            ", "idx_batch", "=", "idx", "[", "batch_size", "*", "i", ":", "]", "\n", "", "else", ":", "\n", "            ", "idx_batch", "=", "idx", "[", "batch_size", "*", "i", ":", "batch_size", "*", "(", "i", "+", "1", ")", "]", "\n", "\n", "", "x", "=", "np", ".", "zeros", "(", "(", "len", "(", "idx_batch", ")", "*", "num_input", ",", "num_steps", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "y_", "=", "np", ".", "zeros", "(", "(", "len", "(", "idx_batch", ")", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "y_", "[", ":", ",", "1", "]", "=", "1.0", "\n", "img", "=", "np", ".", "zeros", "(", "(", "len", "(", "idx_batch", ")", "*", "num_input", ",", "dim_feat", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "j", "in", "xrange", "(", "len", "(", "idx_batch", ")", ")", ":", "\n", "            ", "img_feat", "=", "copy", ".", "deepcopy", "(", "data", "[", "'features'", "]", "[", "'dis'", "]", "[", "filename", "[", "idx_batch", "[", "j", "]", "]", "]", ")", "\n", "real_cap", "=", "copy", ".", "deepcopy", "(", "data", "[", "'captions'", "]", "[", "'dis'", "]", "[", "filename", "[", "idx_batch", "[", "j", "]", "]", "]", "[", "'human'", "]", ")", "\n", "real_idx", "=", "range", "(", "len", "(", "real_cap", ")", ")", "\n", "random", ".", "shuffle", "(", "real_idx", ")", "\n", "x", "[", "j", ",", ":", "]", "=", "real_cap", "[", "real_idx", "[", "0", "]", "]", "\n", "img", "[", "j", ",", ":", "]", "=", "img_feat", "\n", "\n", "if", "gen_model", "==", "'human'", ":", "\n", "                ", "x", "[", "j", "+", "len", "(", "idx_batch", ")", ",", ":", "]", "=", "real_cap", "[", "real_idx", "[", "1", "]", "]", "\n", "y_", "[", "j", ",", "0", "]", "=", "1.", "\n", "y_", "[", "j", ",", "1", "]", "=", "0.", "\n", "", "elif", "gen_model", "==", "'random_human'", ":", "\n", "                ", "rand_j", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "filename", ")", "-", "1", ")", "\n", "while", "rand_j", "==", "idx_batch", "[", "j", "]", ":", "\n", "                    ", "rand_j", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "filename", ")", "-", "1", ")", "\n", "", "fake_cap", "=", "copy", ".", "deepcopy", "(", "data", "[", "'captions'", "]", "[", "'dis'", "]", "[", "filename", "[", "rand_j", "]", "]", "[", "'human'", "]", ")", "\n", "fake_idx", "=", "range", "(", "len", "(", "fake_cap", ")", ")", "\n", "random", ".", "shuffle", "(", "fake_idx", ")", "\n", "x", "[", "j", "+", "len", "(", "idx_batch", ")", ",", ":", "]", "=", "fake_cap", "[", "fake_idx", "[", "0", "]", "]", "\n", "", "elif", "gen_model", "==", "'random_word'", ":", "\n", "                ", "x", "[", "j", "+", "len", "(", "idx_batch", ")", ",", ":", "]", "=", "np", ".", "random", ".", "randint", "(", "\n", "config", ".", "vocab_size", "-", "4", ",", "size", "=", "(", "num_steps", ",", ")", ")", "+", "4", "\n", "", "else", ":", "\n", "                ", "x", "[", "j", "+", "len", "(", "idx_batch", ")", ",", ":", "]", "=", "copy", ".", "deepcopy", "(", "\n", "data", "[", "'captions'", "]", "[", "'dis'", "]", "[", "filename", "[", "idx_batch", "[", "j", "]", "]", "]", "[", "gen_model", "]", ")", "\n", "", "img", "[", "j", "+", "len", "(", "idx_batch", ")", ",", ":", "]", "=", "img_feat", "\n", "", "acc_batch", ",", "logits_batch", ",", "scores_batch", "=", "sess", ".", "run", "(", "[", "\n", "model", ".", "_accuracy", ",", "model", ".", "_logits", ",", "model", ".", "_score", "]", ",", "\n", "{", "model", ".", "x", ":", "x", ",", "model", ".", "y_", ":", "y_", ",", "model", ".", "img_feat", ":", "img", "}", ")", "\n", "acc", ".", "append", "(", "acc_batch", ")", "\n", "logits", ".", "append", "(", "logits_batch", ")", "\n", "scores", ".", "append", "(", "scores_batch", ")", "\n", "\n", "", "print", "(", "'%s Average Score: %.3f   Acc: %.3f'", "%", "(", "gen_model", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "scores", ")", "[", ":", ",", ":", ",", "0", "]", ")", ",", "np", ".", "mean", "(", "np", ".", "array", "(", "acc", ")", ")", ")", ")", "\n", "\n", "return", "np", ".", "array", "(", "acc", ")", ",", "np", ".", "array", "(", "logits", ")", ",", "np", ".", "array", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.config.set_no_da": [[43, 50], ["None"], "function", ["None"], ["", "def", "set_no_da", "(", "config", ")", ":", "\n", "# not using data augmentation durng training.", "\n", "    ", "config", ".", "use_random_human", "=", "False", "\n", "config", ".", "use_random_word", "=", "False", "\n", "config", ".", "use_word_permutation", "=", "False", "\n", "config", ".", "use_mc_samples", "=", "False", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.config.config_model_coco": [[51, 122], ["config.set_no_da", "config.set_no_da", "config.set_no_da", "Exception"], "function", ["home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.config.set_no_da", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.config.set_no_da", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.config.set_no_da"], ["", "def", "config_model_coco", "(", "config", ",", "model_architecture", ")", ":", "\n", "    ", "config", ".", "num_layers", "=", "1", "# using 1 LSTM layer", "\n", "# Linear models", "\n", "if", "model_architecture", "==", "'concat_no_img_1_512_0'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "None", "\n", "config", ".", "combine_typ", "=", "'concat'", "\n", "config", ".", "hidden_size", "=", "512", "\n", "config", ".", "cls_hidden", "=", "0", "\n", "", "elif", "model_architecture", "==", "'concat_img_1_512_0'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'concat'", "\n", "config", ".", "hidden_size", "=", "512", "\n", "config", ".", "cls_hidden", "=", "0", "\n", "", "elif", "model_architecture", "==", "'concat_only_img_1_512_0'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'only_img'", "\n", "config", ".", "combine_typ", "=", "'concat'", "\n", "config", ".", "hidden_size", "=", "512", "\n", "config", ".", "cls_hidden", "=", "0", "\n", "", "elif", "model_architecture", "==", "'concat_img_1_512_0_noda'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'concat'", "\n", "config", ".", "hidden_size", "=", "512", "\n", "config", ".", "cls_hidden", "=", "0", "\n", "config", "=", "set_no_da", "(", "config", ")", "\n", "# Non-linear models with Compact Bilinear Pooling", "\n", "", "elif", "model_architecture", "==", "'bilinear_img_1_512_0'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "hidden_size", "=", "512", "\n", "config", ".", "cls_hidden", "=", "0", "\n", "", "elif", "model_architecture", "==", "'bilinear_no_img_1_512_0'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "None", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "hidden_size", "=", "512", "\n", "config", ".", "cls_hidden", "=", "0", "\n", "", "elif", "model_architecture", "==", "'bilinear_only_img_1_512_0'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'only_img'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "hidden_size", "=", "512", "\n", "config", ".", "cls_hidden", "=", "0", "\n", "", "elif", "model_architecture", "==", "'bilinear_img_1_512_0_noda'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "hidden_size", "=", "512", "\n", "config", ".", "cls_hidden", "=", "0", "\n", "config", "=", "set_no_da", "(", "config", ")", "\n", "# Non-linear models with MLP", "\n", "", "elif", "model_architecture", "==", "'mlp_1_img_1_512_0'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'concat'", "\n", "config", ".", "hidden_size", "=", "512", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "", "elif", "model_architecture", "==", "'mlp_1_no_img_1_512_0'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "None", "\n", "config", ".", "combine_typ", "=", "'concat'", "\n", "config", ".", "hidden_size", "=", "512", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "", "elif", "model_architecture", "==", "'mlp_1_only_img_1_512_0'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'only_img'", "\n", "config", ".", "combine_typ", "=", "'concat'", "\n", "config", ".", "hidden_size", "=", "512", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "", "elif", "model_architecture", "==", "'mlp_1_img_1_512_0_noda'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'concat'", "\n", "config", ".", "hidden_size", "=", "512", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "config", "=", "set_no_da", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Invalid architecture name:%s\"", "%", "model_architecture", ")", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.config.config_model_flickr": [[124, 272], ["Exception"], "function", ["None"], ["", "def", "config_model_flickr", "(", "config", ",", "model_architecture", ")", ":", "\n", "    ", "config", ".", "use_random_human", "=", "True", "\n", "config", ".", "use_random_word", "=", "False", "\n", "config", ".", "use_word_permutation", "=", "False", "\n", "config", ".", "use_mc_samples", "=", "False", "\n", "config", ".", "batch_size", "=", "50", "\n", "config", ".", "max_epoch", "=", "100", "\n", "config", ".", "learning_rate_decay", "=", "0.98", "\n", "config", ".", "learning_rate", "=", "0.001", "\n", "\n", "config", ".", "batch_size", "=", "100", "\n", "config", ".", "test_batch_size", "=", "15000", "\n", "config", ".", "vocab_size", "=", "3441", "# Without lemmatization", "\n", "\n", "if", "model_architecture", "==", "'baseline'", ":", "\n", "        ", "return", "config", "\n", "", "if", "model_architecture", "==", "'baseline_mlp'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "None", "\n", "config", ".", "combine_typ", "=", "'concat'", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "return", "config", "\n", "", "if", "model_architecture", "==", "'bilinear'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "1", "\n", "config", ".", "cls_hidden", "=", "0", "\n", "return", "config", "\n", "", "if", "model_architecture", "==", "'bilinear_moreLSTM'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "2", "\n", "config", ".", "cls_hidden", "=", "0", "\n", "return", "config", "\n", "", "if", "model_architecture", "==", "'bilinear_clf_moreLSTM'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "2", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "return", "config", "\n", "", "if", "model_architecture", "==", "'bilinear_sm'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "1", "\n", "config", ".", "cls_hidden", "=", "0", "\n", "config", ".", "hidden_size", "=", "128", "\n", "return", "config", "\n", "", "if", "model_architecture", "==", "'bilinear_moreLSTM_sm'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "2", "\n", "config", ".", "cls_hidden", "=", "0", "\n", "config", ".", "hidden_size", "=", "128", "\n", "return", "config", "\n", "", "if", "model_architecture", "==", "'bilinear_clf_moreLSTM'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "2", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "config", ".", "hidden_size", "=", "128", "\n", "return", "config", "\n", "", "if", "model_architecture", "==", "'bilinear_clf_moreLSTM_sm'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "2", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "config", ".", "hidden_size", "=", "128", "\n", "return", "config", "\n", "", "if", "model_architecture", "==", "'bilinear_bilinear'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'bilinpool'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "1", "\n", "config", ".", "cls_hidden", "=", "0", "\n", "config", ".", "hidden_size", "=", "128", "\n", "return", "config", "\n", "\n", "# Different Dropout", "\n", "", "if", "model_architecture", "==", "'bilinear_clf_moreLSTM_dropout0.3'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "2", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "config", ".", "hidden_size", "=", "128", "\n", "config", ".", "dropout_prob", "=", "0.3", "\n", "return", "config", "\n", "", "if", "model_architecture", "==", "'bilinear_clf_moreLSTM_dropout0.1'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "2", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "config", ".", "hidden_size", "=", "128", "\n", "config", ".", "dropout_prob", "=", "0.3", "\n", "return", "config", "\n", "# Turn the learning rate", "\n", "", "if", "model_architecture", "==", "'bilinear_clf_moreLSTM_lr0.001'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "2", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "config", ".", "hidden_size", "=", "128", "\n", "config", ".", "learning_rate", "=", "0.001", "\n", "return", "config", "\n", "\n", "", "if", "model_architecture", "==", "'bilinear_clf_moreLSTM_lr0.002'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "2", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "config", ".", "hidden_size", "=", "128", "\n", "config", ".", "learning_rate", "=", "0.002", "\n", "return", "config", "\n", "\n", "", "if", "model_architecture", "==", "'bilinear_clf_moreLSTM_lr0.0008'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "2", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "config", ".", "hidden_size", "=", "128", "\n", "config", ".", "learning_rate", "=", "0.0008", "\n", "return", "config", "\n", "\n", "", "if", "model_architecture", "==", "'bilinear_clf_moreLSTM_lr0.0005'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "2", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "config", ".", "hidden_size", "=", "128", "\n", "config", ".", "learning_rate", "=", "0.0005", "\n", "return", "config", "\n", "\n", "", "if", "model_architecture", "==", "'bilinear_clf_moreLSTM_lr0.0002'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "2", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "config", ".", "hidden_size", "=", "128", "\n", "config", ".", "learning_rate", "=", "0.0002", "\n", "return", "config", "\n", "\n", "", "if", "model_architecture", "==", "'bilinear_clf_moreLSTM_lr0.0001'", ":", "\n", "        ", "config", ".", "use_img_feat", "=", "'concat_af_lstm'", "\n", "config", ".", "combine_typ", "=", "'bilinpool'", "\n", "config", ".", "num_layers", "=", "2", "\n", "config", ".", "cls_hidden", "=", "1", "\n", "config", ".", "hidden_size", "=", "128", "\n", "config", ".", "learning_rate", "=", "0.0001", "\n", "return", "config", "\n", "\n", "", "raise", "Exception", "(", "\"%s not found\"", "%", "model_architecture", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.score.data_loader": [[27, 66], ["numpy.load().item", "numpy.load().item", "numpy.load().item", "numpy.load().item", "numpy.load().item", "numpy.load().item", "numpy.load", "numpy.load().item", "numpy.load().item", "numpy.load().item", "discriminator.add_mc_samples", "discriminator.add_mc_samples", "discriminator.add_mc_samples", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "str", "os.path.join", "os.path.join", "os.path.join", "numpy.load", "numpy.load", "numpy.load", "config.Config"], "function", ["home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.add_mc_samples", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.add_mc_samples", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.add_mc_samples"], ["def", "data_loader", "(", "data_path", "=", "None", ",", "data_type", "=", "'_full'", ",", "use_mc_samples", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Data format (compatible with Show Attend and Tell):\n    the data file is a dict has the following keys:\n    'file_names'\n    'image_idxs'\n    'captions': a dict has keys 'gen' for generator and 'dis' for discriminator\n    'features': a dict has keys 'gen' for generator and 'dis' for discriminator\n                (to be loaded when needed)\n    'word_to_idx': a dict with word to idx mapping\n    \"\"\"", "\n", "data_train", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"data_train_full.npy\"", ")", ")", ".", "item", "(", ")", "\n", "data_val", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"data_val_full.npy\"", ")", ")", ".", "item", "(", ")", "\n", "data_test", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"data_test_full.npy\"", ")", ")", ".", "item", "(", ")", "\n", "if", "use_mc_samples", ":", "\n", "# mc_train = np.load(os.path.join(data_path, 'dumped_train.npy')).item()", "\n", "# mc_val = np.load(os.path.join(data_path, 'dumped_val.npy')).item()", "\n", "# mc_test = np.load(os.path.join(data_path, 'dumped_test.npy')).item()", "\n", "        ", "mc_train", "=", "np", ".", "load", "(", "'./data/dumped_train.npy'", ")", ".", "item", "(", ")", "\n", "mc_val", "=", "np", ".", "load", "(", "'./data/dumped_val.npy'", ")", ".", "item", "(", ")", "\n", "mc_test", "=", "np", ".", "load", "(", "'./data/dumped_test.npy'", ")", ".", "item", "(", ")", "\n", "data_train", "=", "add_mc_samples", "(", "data_train", ",", "mc_train", ")", "\n", "data_val", "=", "add_mc_samples", "(", "data_val", ",", "mc_val", ")", "\n", "data_test", "=", "add_mc_samples", "(", "data_test", ",", "mc_test", ")", "\n", "\n", "", "data_train", "[", "'features'", "]", "[", "'dis'", "]", "=", "np", ".", "load", "(", "\n", "'./data/resnet152/feature_dis_train%s.npy'", "%", "(", "data_type", ")", "\n", ")", ".", "item", "(", ")", "\n", "data_val", "[", "'features'", "]", "[", "'dis'", "]", "=", "np", ".", "load", "(", "\n", "'./data/resnet152/feature_dis_val%s.npy'", "%", "(", "data_type", ")", "\n", ")", ".", "item", "(", ")", "\n", "data_test", "[", "'features'", "]", "[", "'dis'", "]", "=", "np", ".", "load", "(", "\n", "'./data/resnet152/feature_dis_test%s.npy'", "%", "(", "data_type", ")", "\n", ")", ".", "item", "(", ")", "\n", "\n", "word_embedding", "=", "np", ".", "load", "(", "\n", "'./data/word_embedding_%s.npy'", "%", "(", "str", "(", "Config", "(", ")", ".", "embedding_size", ")", ")", "\n", ")", "\n", "return", "[", "data_train", ",", "data_val", ",", "data_test", ",", "word_embedding", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.score.main": [[69, 139], ["os.path.join", "discriminator.data_loader", "config.Config", "config.config_model_coco", "print", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "tensorflow.Graph().as_default", "tensorflow.ConfigProto", "tensorflow.name_scope", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.name_scope", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.Session", "tensorflow.global_variables_initializer().run", "tensorflow.summary.FileWriter", "tensorflow.train.Saver", "os.path.join", "open", "xrange", "open.close", "tensorflow.Graph", "tensorflow.variable_scope", "discriminator.Discriminator", "tensorflow.variable_scope", "discriminator.Discriminator", "print", "discriminator.train", "open.write", "os.path.join", "print", "tf.train.Saver.save", "print", "tensorflow.global_variables_initializer", "tensorflow.get_default_graph", "discriminator.inference", "numpy.mean", "open.write", "numpy.mean", "open.write"], "function", ["home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.score.data_loader", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.config.config_model_coco", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.train", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.None.discriminator.inference"], ["", "def", "main", "(", "_", ")", ":", "\n", "    ", "exp_name", "=", "\"%s_scoring\"", "%", "(", "args", ".", "name", ")", "\n", "log_path", "=", "'./log/'", "+", "exp_name", "\n", "save_path", "=", "'./model/'", "+", "exp_name", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "args", ".", "name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "train_models", "=", "[", "args", ".", "name", "]", "\n", "test_models", "=", "[", "args", ".", "name", ",", "'human'", "]", "\n", "\n", "[", "data_train", ",", "data_val", ",", "data_test", ",", "word_embedding", "]", "=", "data_loader", "(", "\n", "data_path", ",", "use_mc_samples", "=", "True", ")", "\n", "word_to_idx", "=", "data_train", "[", "'word_to_idx'", "]", "\n", "\n", "config", "=", "Config", "(", ")", "\n", "config", "=", "config_model_coco", "(", "config", ",", "args", ".", "model_architecture", ")", "\n", "config", ".", "max_epoch", "=", "args", ".", "epochs", "\n", "\n", "print", "(", "\"Model architecture:%s\"", "%", "(", "args", ".", "model_architecture", ")", ")", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"Train\"", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"Discriminator\"", ",", "reuse", "=", "None", ")", ":", "\n", "                ", "mtrain", "=", "Discriminator", "(", "word_embedding", ",", "word_to_idx", ",", "use_glove", "=", "True", ",", "\n", "config", "=", "config", ",", "is_training", "=", "True", ")", "\n", "", "tf", ".", "summary", ".", "scalar", "(", "\"Training Loss\"", ",", "mtrain", ".", "_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"Training Accuracy\"", ",", "mtrain", ".", "_accuracy", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"Val\"", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"Discriminator\"", ",", "reuse", "=", "True", ")", ":", "\n", "                ", "mval", "=", "Discriminator", "(", "word_embedding", ",", "word_to_idx", ",", "use_glove", "=", "True", ",", "\n", "config", "=", "config", ",", "is_training", "=", "False", ")", "\n", "", "tf", ".", "summary", ".", "scalar", "(", "\"Validation Loss\"", ",", "mval", ".", "_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"Validation Accuracy\"", ",", "mval", ".", "_accuracy", ")", "\n", "\n", "", "config_sess", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", "\n", "config_sess", ".", "gpu_options", ".", "allow_growth", "=", "True", "\n", "with", "tf", ".", "Session", "(", "config", "=", "config_sess", ")", "as", "sess", ":", "\n", "            ", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_path", ",", "graph", "=", "tf", ".", "get_default_graph", "(", ")", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n", "output_filename", "=", "'%s.txt'", "%", "(", "args", ".", "model_architecture", ")", "\n", "output_filepath", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "output_filename", ")", "\n", "f", "=", "open", "(", "output_filepath", ",", "'w'", ")", "\n", "\n", "# Training", "\n", "for", "i", "in", "xrange", "(", "config", ".", "max_epoch", ")", ":", "\n", "                ", "print", "(", "\"Epoch: %d\"", "%", "(", "i", "+", "1", ")", ")", "\n", "train_loss", ",", "train_acc", "=", "train", "(", "sess", ",", "mtrain", ",", "data_train", ",", "\n", "gen_model", "=", "train_models", ",", "epoch", "=", "i", ",", "\n", "config", "=", "config", ")", "\n", "\n", "for", "test_model", "in", "test_models", ":", "\n", "                    ", "[", "acc", ",", "logits", ",", "scores", "]", "=", "inference", "(", "\n", "sess", ",", "mval", ",", "data_val", ",", "test_model", ",", "config", "=", "config", ")", "\n", "s", "=", "np", ".", "mean", "(", "scores", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "f", ".", "write", "(", "\"%f\\t\"", "%", "s", ")", "\n", "a", "=", "np", ".", "mean", "(", "acc", ")", "\n", "f", ".", "write", "(", "\"%f\\t\"", "%", "a", ")", "\n", "", "f", ".", "write", "(", "\"\\n\"", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "if", "save_path", ":", "\n", "                ", "model_path", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "args", ".", "model_architecture", ")", "\n", "print", "(", "\"Saving model to %s.\"", "%", "model_path", ")", "\n", "saver", ".", "save", "(", "sess", ",", "model_path", ",", "global_step", "=", "i", "+", "1", ")", "\n", "print", "(", "\"Model saved to %s.\"", "%", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.BasicBlock.__init__": [[33, 42], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.conv3x3", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.BasicBlock.forward": [[43, 58], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.Bottleneck.__init__": [[64, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.ResNet.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.Bottleneck.forward": [[77, 98], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.ResNet.__init__": [[101, 123], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.ResNet.__init__", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "output_size", "=", "14", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.ResNet._make_layer": [[124, 140], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.ResNet.forward": [[141, 160], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "spatialAdaAvgPool().squeeze().permute", "spatialAdaAvgPool().squeeze", "resnet.spatialAdaAvgPool"], "methods", ["home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.spatialAdaAvgPool"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "# x = spatialAdaAvgPool(x,14,14).squeeze().permute(1, 2, 0)", "\n", "x", "=", "spatialAdaAvgPool", "(", "x", ",", "7", ",", "7", ")", ".", "squeeze", "(", ")", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "\n", "# x = self.avgpool(x)", "\n", "# x = x.view(x.size(0), -1)", "\n", "# x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.conv3x3": [[6, 9], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding.\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.start_end": [[12, 14], ["int", "math.ceil", "float"], "function", ["None"], ["", "def", "start_end", "(", "a", ",", "b", ",", "c", ")", ":", "\n", "    ", "return", "a", "*", "c", "//", "b", ",", "int", "(", "math", ".", "ceil", "(", "float", "(", "(", "a", "+", "1", ")", "*", "c", ")", "/", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.spatialAdaAvgPool": [[15, 28], ["x.size", "torch.autograd.Variable", "xrange", "x.data.new", "xrange", "resnet.start_end", "resnet.start_end", "x[].mean().mean", "x[].mean"], "function", ["home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.start_end", "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.start_end"], ["", "def", "spatialAdaAvgPool", "(", "x", ",", "oH", ",", "oW", ")", ":", "\n", "    ", "B", ",", "C", ",", "iH", ",", "iW", "=", "x", ".", "size", "(", ")", "\n", "output", "=", "Variable", "(", "x", ".", "data", ".", "new", "(", "B", ",", "C", ",", "oH", ",", "oW", ")", ")", "\n", "for", "oh", "in", "xrange", "(", "oH", ")", ":", "\n", "        ", "for", "ow", "in", "xrange", "(", "oW", ")", ":", "\n", "            ", "i1", ",", "i2", "=", "start_end", "(", "oh", ",", "oH", ",", "iH", ")", "\n", "\n", "j1", ",", "j2", "=", "start_end", "(", "ow", ",", "oW", ",", "iW", ")", "\n", "\n", "# print x[:,:,i1:i2,j1:j2].mean(3).mean(2).size()", "\n", "# output[:, :, oh, ow] = x[:,:,i1:i2,j1:j2].mean(3).mean(2).squeeze(3).squeeze(2)", "\n", "output", "[", ":", ",", ":", ",", "oh", ",", "ow", "]", "=", "x", "[", ":", ",", ":", ",", "i1", ":", "i2", ",", "j1", ":", "j2", "]", ".", "mean", "(", "3", ")", ".", "mean", "(", "2", ")", "\n", "", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.resnet50": [[162, 168], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load"], "function", ["None"], ["", "", "def", "resnet50", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./checkpoints/imagenet/resnet50.pth'", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.resnet101": [[170, 176], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./checkpoints/imagenet/resnet101.pth'", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.resnet.resnet152": [[178, 184], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load", "torch.load"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'./checkpoints/imagenet/resnet152.pth'", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.features.feature_extraction_coco.feature_extraction": [[41, 72], ["progressbar.ProgressBar", "progressbar.ProgressBar.", "xrange", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "model().data.cpu().numpy().reshape", "numpy.mean", "len", "os.path.join", "transform", "os.path.join", "PIL.Image.open().convert", "model().data.cpu().numpy", "os.path.join", "Exception", "PIL.Image.open", "model().data.cpu", "model"], "function", ["None"], ["def", "feature_extraction", "(", "data", ")", ":", "\n", "    ", "pbar", "=", "progressbar", ".", "ProgressBar", "(", ")", "\n", "file_names", "=", "data", "[", "'file_names'", "]", "\n", "\n", "# feature_gen = np.zeros((len(file_names), 14*14, 2048), dtype=np.float16)", "\n", "# feature_gen = np.zeros((len(file_names), 7*7, 2048), dtype=np.float16)", "\n", "feature_dis", "=", "{", "}", "\n", "\n", "for", "i", "in", "pbar", "(", "xrange", "(", "len", "(", "file_names", ")", ")", ")", ":", "\n", "# print((i, len(file_names)))", "\n", "        ", "file_name", "=", "file_names", "[", "i", "]", "\n", "if", "'_train2014_'", "in", "file_name", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "coco_img_dir", ",", "'train2014'", ",", "file_name", ")", "\n", "", "elif", "'_val2014_'", "in", "file_name", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "coco_img_dir", ",", "'val2014'", ",", "file_name", ")", "\n", "", "elif", "'_test2014_'", "in", "file_name", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "coco_img_dir", ",", "'test2014'", ",", "file_name", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"Invalid filename : %s\"", "%", "file_name", ")", "\n", "\n", "# print(path)", "\n", "", "img", "=", "torch", ".", "unsqueeze", "(", "transform", "(", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", ")", ",", "0", ")", "\n", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "img", ",", "volatile", "=", "True", ")", "\n", "# feature = model(input_var).data.cpu().numpy().reshape([14*14, 2048])", "\n", "feature", "=", "model", "(", "input_var", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "reshape", "(", "[", "7", "*", "7", ",", "2048", "]", ")", "\n", "\n", "# feature_gen[i, :, :] = feature", "\n", "feature_dis", "[", "file_name", "]", "=", "np", ".", "mean", "(", "feature", ",", "axis", "=", "0", ")", "\n", "\n", "# return feature_gen, feature_dis", "\n", "", "return", "feature_dis", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.preparation.prep_vocab.load_glove": [[57, 66], ["open", "l.split", "numpy.array().astype", "numpy.array"], "function", ["None"], ["def", "load_glove", "(", "filename", ")", ":", "\n", "    ", "ret", "=", "{", "}", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "for", "l", "in", "f", ":", "\n", "            ", "lst", "=", "l", ".", "split", "(", ")", "\n", "key", "=", "lst", "[", "0", "]", "\n", "value", "=", "np", ".", "array", "(", "lst", "[", "1", ":", "]", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "ret", "[", "key", "]", "=", "value", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.preparation.prep_vocab.D_to_W": [[73, 82], ["numpy.zeros", "xrange", "len", "len"], "function", ["None"], ["def", "D_to_W", "(", "D", ",", "dim", ")", ":", "\n", "    ", "W", "=", "np", ".", "zeros", "(", "(", "len", "(", "idx_to_word", ")", ",", "dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", "in", "xrange", "(", "len", "(", "idx_to_word", ")", ")", ":", "\n", "        ", "word", "=", "idx_to_word", "[", "i", "]", "\n", "if", "word", "in", "D", ":", "\n", "            ", "W", "[", "i", ",", ":", "]", "=", "D", "[", "word", "]", "\n", "", "else", ":", "\n", "            ", "W", "[", "i", ",", ":", "]", "=", "D", "[", "'unk'", "]", "\n", "", "", "return", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.preparation.prep_submission.prep_caption_feat": [[50, 78], ["progressbar.ProgressBar", "progressbar.ProgressBar.", "range", "numpy.zeros", "numpy.zeros", "range", "range", "len", "len", "range", "min", "len", "min", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["def", "prep_caption_feat", "(", "filenames", ",", "data", ")", ":", "\n", "    ", "feat", "=", "{", "}", "\n", "pbar", "=", "progressbar", ".", "ProgressBar", "(", ")", "\n", "for", "i", "in", "pbar", "(", "range", "(", "len", "(", "filenames", ")", ")", ")", ":", "\n", "        ", "filename", "=", "filenames", "[", "i", "]", "\n", "feat", "[", "filename", "]", "=", "{", "}", "\n", "gt", "=", "data", "[", "filename", "]", "[", "'human'", "]", "\n", "nt", "=", "data", "[", "filename", "]", "[", "args", ".", "name", "]", "\n", "feat", "[", "filename", "]", "[", "'human'", "]", "=", "np", ".", "zeros", "(", "(", "len", "(", "gt", ")", ",", "args", ".", "num_steps", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "feat", "[", "filename", "]", "[", "args", ".", "name", "]", "=", "np", ".", "zeros", "(", "(", "args", ".", "num_steps", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "gt", ")", ")", ":", "\n", "            ", "ann", "=", "gt", "[", "j", "]", "\n", "for", "k", "in", "range", "(", "min", "(", "len", "(", "ann", ")", ",", "args", ".", "num_steps", ")", ")", ":", "\n", "                ", "if", "ann", "[", "k", "]", "in", "word2idx", ":", "\n", "                    ", "feat", "[", "filename", "]", "[", "'human'", "]", "[", "j", ",", "k", "]", "=", "word2idx", "[", "ann", "[", "k", "]", "]", "\n", "", "else", ":", "\n", "                    ", "feat", "[", "filename", "]", "[", "'human'", "]", "[", "j", ",", "k", "]", "=", "word2idx", "[", "'<unk>'", "]", "\n", "", "", "if", "len", "(", "ann", ")", "<", "args", ".", "num_steps", ":", "\n", "                ", "feat", "[", "filename", "]", "[", "'human'", "]", "[", "j", ",", "len", "(", "ann", ")", "]", "=", "word2idx", "[", "'<eos>'", "]", "\n", "\n", "", "", "for", "j", "in", "range", "(", "min", "(", "args", ".", "num_steps", ",", "len", "(", "nt", ")", ")", ")", ":", "\n", "            ", "if", "nt", "[", "j", "]", "in", "word2idx", ":", "\n", "                ", "feat", "[", "filename", "]", "[", "args", ".", "name", "]", "[", "j", "]", "=", "word2idx", "[", "nt", "[", "j", "]", "]", "\n", "", "else", ":", "\n", "                ", "feat", "[", "filename", "]", "[", "args", ".", "name", "]", "[", "j", "]", "=", "word2idx", "[", "'<unk>'", "]", "\n", "", "if", "len", "(", "nt", ")", "<", "args", ".", "num_steps", ":", "\n", "                ", "feat", "[", "filename", "]", "[", "args", ".", "name", "]", "[", "len", "(", "nt", ")", "]", "=", "word2idx", "[", "'<eos>'", "]", "\n", "", "", "", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.preparation.prep_submission.gen_new_data": [[79, 101], ["range", "numpy.zeros", "range", "len", "image_idxs.extend", "len", "range", "len", "len"], "function", ["None"], ["", "def", "gen_new_data", "(", "filename", ",", "data", ")", ":", "\n", "    ", "image_idxs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "filename", ")", ")", ":", "\n", "        ", "image_idxs", ".", "extend", "(", "[", "i", "]", "*", "len", "(", "data", "[", "filename", "[", "i", "]", "]", "[", "'human'", "]", ")", ")", "\n", "", "captions", "=", "np", ".", "zeros", "(", "(", "len", "(", "image_idxs", ")", ",", "args", ".", "num_steps", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "c", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "filename", ")", ")", ":", "\n", "        ", "caps", "=", "data", "[", "filename", "[", "i", "]", "]", "[", "'human'", "]", "\n", "for", "j", "in", "range", "(", "caps", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "captions", "[", "c", ",", ":", "]", "=", "caps", "[", "j", ",", ":", "]", "\n", "c", "+=", "1", "\n", "\n", "", "", "ret", "=", "{", "}", "\n", "ret", "[", "'file_names'", "]", "=", "filename", "\n", "ret", "[", "'image_idxs'", "]", "=", "image_idxs", "\n", "ret", "[", "'word_to_idx'", "]", "=", "word2idx", "\n", "ret", "[", "'captions'", "]", "=", "{", "}", "\n", "ret", "[", "'captions'", "]", "[", "'gen'", "]", "=", "captions", "\n", "ret", "[", "'captions'", "]", "[", "'dis'", "]", "=", "data", "\n", "ret", "[", "'features'", "]", "=", "{", "}", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.richardaecn_cvpr18-caption-eval.preparation.prep_submission.tokenize": [[102, 106], ["nltk.word_tokenize", "sent.lower"], "function", ["None"], ["", "def", "tokenize", "(", "sent", ")", ":", "\n", "    ", "tokens", "=", "nltk", ".", "word_tokenize", "(", "sent", ".", "lower", "(", ")", ")", "\n", "tokens", "=", "[", "w", "for", "w", "in", "tokens", "if", "w", "not", "in", "string", ".", "punctuation", "]", "\n", "return", "tokens", "\n", "\n"]]}