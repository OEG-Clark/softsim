{"home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.None.main.main": [[20, 38], ["print", "Solver", "Solver.train", "Solver", "Solver.test"], "function", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.DeScarGAN.Solver.train", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.Evaluation.Evaluation_Chexpert.Solver.test"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "dataset", "=", "config", ".", "dataset", "\n", "mode", "=", "config", ".", "mode", "\n", "print", "(", "mode", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "\n", "        ", "from", "model", ".", "DeScarGAN", "import", "Solver", "\n", "\n", "solver", "=", "Solver", "(", "config", ".", "dataset_path", ",", "config", ".", "dataset", ")", "\n", "solver", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "        ", "if", "dataset", "==", "'Synthetic'", ":", "\n", "            ", "from", "Evaluation", ".", "Evaluation_Synthetic_Dataset", "import", "Solver", "\n", "", "else", ":", "\n", "            ", "from", "Evaluation", ".", "Evaluation_Chexpert", "import", "Solver", "\n", "\n", "", "solver", "=", "Solver", "(", "config", ".", "dataset_path", ",", "config", ".", "choose_net", ")", "\n", "solver", ".", "test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.TransposeNumpy.__init__": [[98, 100], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transposition", ")", ":", "\n", "        ", "self", ".", "transposition", "=", "transposition", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.TransposeNumpy.__call__": [[102, 105], ["numpyArray.transpose"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "numpyArray", ")", ":", "\n", "        ", "outArray", "=", "numpyArray", ".", "transpose", "(", "self", ".", "transposition", ")", "\n", "return", "outArray", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.TransposeNumpy.__repr__": [[107, 110], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"TransposeNumpy.__repr__() not implemented\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.MapTransformOverNumpyArrayChannels.__init__": [[120, 122], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transform", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.MapTransformOverNumpyArrayChannels.__call__": [[124, 142], ["random.getstate", "numpy.random.get_state", "numpy.empty_like", "enumerate", "random.setstate", "numpy.random.set_state", "numpy.array", "PIL.Image.fromarray", "tools.MapTransformOverNumpyArrayChannels.transform", "numpy.array"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "numpyArray", ")", ":", "\n", "\n", "\n", "        ", "rng_state", "=", "random", ".", "getstate", "(", ")", "#resetting the RNG for each layer", "\n", "np_rng_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "outArray", "=", "np", ".", "empty_like", "(", "numpyArray", ")", "\n", "\n", "for", "k", ",", "channel", "in", "enumerate", "(", "numpyArray", ")", ":", "\n", "\n", "            ", "random", ".", "setstate", "(", "rng_state", ")", "\n", "np", ".", "random", ".", "set_state", "(", "np_rng_state", ")", "\n", "channel", "=", "np", ".", "array", "(", "channel", ")", "\n", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "channel", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "outChannel", "=", "np", ".", "array", "(", "img", ")", "\n", "outArray", "[", "k", ",", ":", ",", ":", "]", "=", "outChannel", "\n", "\n", "", "return", "outArray", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.MapTransformOverNumpyArrayChannels.__repr__": [[144, 147], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"MapTransformOverNumpyArrayChannels.__repr__() not implemented\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.RandomWarpDeformer.__init__": [[151, 163], ["numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "grid", "=", "(", "8", ",", "8", ")", ",", "amount", "=", "0.3", ")", ":", "\n", "        ", "\"\"\"Grid specifies the number of quads thatt are individually transformed\n        in each direction.\n        \"\"\"", "\n", "self", ".", "grid", "=", "grid", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "u", "=", "None", "\n", "self", ".", "v", "=", "None", "\n", "self", ".", "amount", "=", "amount", "\n", "self", ".", "nodex", "=", "np", ".", "array", "(", "[", "[", "1", ",", "1", "]", ",", "[", "2", ",", "2", "]", "]", ")", "/", "3", "\n", "self", ".", "nodey", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", "]", ",", "[", "2", ",", "1", "]", "]", ")", "/", "3", "\n", "self", ".", "p", "=", "lambda", "t", ":", "27.0", "/", "2.0", "*", "t", "*", "(", "t", "-", "2", "/", "3", ")", "*", "(", "t", "-", "1", ")", "#langrange interpolation poly", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.RandomWarpDeformer.getmesh": [[164, 201], ["range", "range", "numpy.random.random", "numpy.random.random", "tools.RandomWarpDeformer.p", "tools.RandomWarpDeformer.p", "tools.RandomWarpDeformer.p", "tools.RandomWarpDeformer.p", "int", "int", "int", "int", "int", "int", "mesh.append", "tools.RandomWarpDeformer.getmesh.deform"], "methods", ["None"], ["", "def", "getmesh", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "(", "w", ",", "h", ")", "=", "img", ".", "size", "\n", "(", "n", ",", "m", ")", "=", "self", ".", "grid", "\n", "step", "=", "(", "w", "/", "n", ",", "h", "/", "m", ")", "\n", "\n", "self", ".", "u", "=", "2", "/", "3", "*", "self", ".", "amount", "*", "(", "np", ".", "random", ".", "random", "(", "(", "2", ",", "2", ")", ")", "-", "0.5", ")", "\n", "self", ".", "v", "=", "2", "/", "3", "*", "self", ".", "amount", "*", "(", "np", ".", "random", ".", "random", "(", "(", "2", ",", "2", ")", ")", "-", "0.5", ")", "\n", "\n", "def", "deform", "(", "x", ",", "y", ")", ":", "\n", "            ", "x", "=", "x", "/", "w", "\n", "y", "=", "y", "/", "h", "\n", "px", "=", "[", "self", ".", "p", "(", "x", ")", ",", "self", ".", "p", "(", "1", "-", "x", ")", "]", "\n", "py", "=", "[", "self", ".", "p", "(", "y", ")", ",", "self", ".", "p", "(", "1", "-", "y", ")", "]", "\n", "\n", "dx", "=", "self", ".", "u", "[", "0", ",", "0", "]", "*", "px", "[", "0", "]", "*", "py", "[", "0", "]", "+", "self", ".", "u", "[", "0", ",", "1", "]", "*", "px", "[", "0", "]", "*", "py", "[", "1", "]", "+", "self", ".", "u", "[", "1", ",", "1", "]", "*", "px", "[", "1", "]", "*", "py", "[", "1", "]", "+", "self", ".", "u", "[", "1", ",", "0", "]", "*", "px", "[", "1", "]", "*", "py", "[", "0", "]", "\n", "dy", "=", "self", ".", "v", "[", "0", ",", "0", "]", "*", "px", "[", "0", "]", "*", "py", "[", "0", "]", "+", "self", ".", "v", "[", "0", ",", "1", "]", "*", "px", "[", "0", "]", "*", "py", "[", "1", "]", "+", "self", ".", "v", "[", "1", ",", "1", "]", "*", "px", "[", "1", "]", "*", "py", "[", "1", "]", "+", "self", ".", "v", "[", "1", ",", "0", "]", "*", "px", "[", "1", "]", "*", "py", "[", "0", "]", "\n", "regularization", "=", "4", "*", "x", "*", "(", "1", "-", "x", ")", "*", "4", "*", "y", "*", "(", "1", "-", "y", ")", "\n", "xreg", "=", "x", "+", "dx", "*", "regularization", "\n", "yreg", "=", "y", "+", "dy", "*", "regularization", "\n", "return", "int", "(", "xreg", "*", "w", ")", ",", "int", "(", "yreg", "*", "h", ")", "\n", "\n", "#generate mesh", "\n", "", "mesh", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "m", ")", ":", "\n", "                ", "x_min", "=", "int", "(", "i", "*", "step", "[", "0", "]", ")", "\n", "x_max", "=", "int", "(", "(", "i", "+", "1", ")", "*", "step", "[", "0", "]", ")", "\n", "y_min", "=", "int", "(", "j", "*", "step", "[", "1", "]", ")", "\n", "y_max", "=", "int", "(", "(", "j", "+", "1", ")", "*", "step", "[", "1", "]", ")", "\n", "target", "=", "(", "x_min", ",", "y_min", ",", "x_max", ",", "y_max", ")", "\n", "source", "=", "(", "*", "deform", "(", "x_min", ",", "y_min", ")", ",", "\n", "*", "deform", "(", "x_min", ",", "y_max", ")", ",", "\n", "*", "deform", "(", "x_max", ",", "y_max", ")", ",", "\n", "*", "deform", "(", "x_max", ",", "y_min", ")", ")", "\n", "mesh", ".", "append", "(", "(", "target", ",", "source", ")", ")", "\n", "", "", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.RandomWarpTransform.__init__": [[215, 217], ["tools.RandomWarpDeformer"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "rwd", "=", "RandomWarpDeformer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.RandomWarpTransform.__call__": [[218, 225], ["numpy.array", "print", "PIL.ImageOps.deform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Takes PIL Image and performs random warp.\n        \"\"\"", "\n", "C", "=", "np", ".", "array", "(", "img", ")", "\n", "print", "(", "'C='", ",", "C", ".", "shape", ")", "\n", "img2", "=", "PIL", ".", "ImageOps", ".", "deform", "(", "img", ",", "self", ".", "rwd", ",", "resample", "=", "PIL", ".", "Image", ".", "BILINEAR", ")", "\n", "return", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.RandomWarpTransform.__repr__": [[226, 228], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"TransposeRandomWarpTransform.__repr__() not implemented\"", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.GaussianSmoothing.__init__": [[254, 294], ["torch.Module.__init__", "isinstance", "isinstance", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "zip", "kernel.repeat.repeat.view", "kernel.repeat.repeat.repeat", "tools.GaussianSmoothing.register_buffer", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "kernel.repeat.repeat.size", "RuntimeError", "math.sqrt", "kernel.repeat.repeat.dim"], "methods", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.Evaluation.Evaluation_Chexpert.Solver.__init__"], ["            ", "def", "__init__", "(", "self", ",", "channels", ",", "kernel_size", ",", "sigma", ",", "dim", "=", "2", ")", ":", "\n", "                ", "super", "(", "GaussianSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "kernel_size", ",", "numbers", ".", "Number", ")", ":", "\n", "                    ", "kernel_size", "=", "[", "kernel_size", "]", "*", "dim", "\n", "", "if", "isinstance", "(", "sigma", ",", "numbers", ".", "Number", ")", ":", "\n", "                    ", "sigma", "=", "[", "sigma", "]", "*", "dim", "\n", "\n", "# The gaussian kernel is the product of the", "\n", "# gaussian function of each dimension.", "\n", "", "kernel", "=", "1", "\n", "meshgrids", "=", "torch", ".", "meshgrid", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "size", "in", "kernel_size", "\n", "]", "\n", ")", "\n", "for", "size", ",", "std", ",", "mgrid", "in", "zip", "(", "kernel_size", ",", "sigma", ",", "meshgrids", ")", ":", "\n", "                    ", "mean", "=", "(", "size", "-", "1", ")", "/", "2", "\n", "kernel", "*=", "1", "/", "(", "std", "*", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", ")", "*", "torch", ".", "exp", "(", "-", "(", "(", "mgrid", "-", "mean", ")", "/", "std", ")", "**", "2", "/", "2", ")", "\n", "\n", "# Make sure sum of values in gaussian kernel equals 1.", "\n", "", "kernel", "=", "kernel", "/", "torch", ".", "sum", "(", "kernel", ")", "\n", "\n", "# Reshape to depthwise convolutional weight", "\n", "kernel", "=", "kernel", ".", "view", "(", "1", ",", "1", ",", "*", "kernel", ".", "size", "(", ")", ")", "\n", "kernel", "=", "kernel", ".", "repeat", "(", "channels", ",", "*", "[", "1", "]", "*", "(", "kernel", ".", "dim", "(", ")", "-", "1", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "kernel", ")", "\n", "self", ".", "groups", "=", "channels", "\n", "\n", "if", "dim", "==", "1", ":", "\n", "                    ", "self", ".", "conv", "=", "F", ".", "conv1d", "\n", "", "elif", "dim", "==", "2", ":", "\n", "                    ", "self", ".", "conv", "=", "F", ".", "conv2d", "\n", "", "elif", "dim", "==", "3", ":", "\n", "                    ", "self", ".", "conv", "=", "F", ".", "conv3d", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'Only 1, 2 and 3 dimensions are supported. Received {}.'", ".", "format", "(", "dim", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.GaussianSmoothing.forward": [[296, 305], ["tools.GaussianSmoothing.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "                ", "\"\"\"\n                Apply gaussian filter to input.\n                Arguments:\n                    input (torch.Tensor): Input to apply gaussian filter on.\n                Returns:\n                    filtered (torch.Tensor): Filtered output.\n                \"\"\"", "\n", "return", "self", ".", "conv", "(", "input", ",", "weight", "=", "self", ".", "weight", ",", "padding", "=", "1", ",", "groups", "=", "self", ".", "groups", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.read_mha_to_numpy": [[34, 39], ["itk.imread", "numpy.copy", "itk.GetArrayViewFromImage"], "function", ["None"], ["def", "read_mha_to_numpy", "(", "file_path", ")", ":", "\n", "    ", "itk_image", "=", "itk", ".", "imread", "(", "file_path", ")", "\n", "image", "=", "np", ".", "copy", "(", "itk", ".", "GetArrayViewFromImage", "(", "itk_image", ")", ")", "\n", "size", "=", "image", ".", "shape", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.npy_loader": [[40, 43], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.load"], "function", ["None"], ["", "def", "npy_loader", "(", "path", ")", ":", "\n", "    ", "sample", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "path", ")", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.standardize": [[45, 50], ["numpy.mean", "numpy.std"], "function", ["None"], ["", "def", "standardize", "(", "img", ")", ":", "\n", "    ", "mean", "=", "np", ".", "mean", "(", "img", ")", "\n", "std", "=", "np", ".", "std", "(", "img", ")", "\n", "img", "=", "(", "img", "-", "mean", ")", "/", "std", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.kappa_score": [[54, 68], ["sklearn.metrics.confusion_matrix", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "kappa_score", "(", "preds1", ",", "preds2", ")", ":", "\n", "    ", "cnf", "=", "confusion_matrix", "(", "preds1", ",", "preds2", ")", "\n", "row_marg", "=", "np", ".", "sum", "(", "cnf", ",", "axis", "=", "1", ")", "\n", "col_marg", "=", "np", ".", "sum", "(", "cnf", ",", "axis", "=", "0", ")", "\n", "marg_mult", "=", "col_marg", "*", "row_marg", "\n", "n", "=", "np", ".", "sum", "(", "row_marg", ")", "\n", "pr_e", "=", "np", ".", "sum", "(", "marg_mult", ")", "/", "n", "/", "n", "\n", "pr_a", "=", "(", "cnf", "[", "0", "]", "[", "0", "]", "+", "cnf", "[", "1", "]", "[", "1", "]", ")", "/", "n", "\n", "kappa", "=", "(", "pr_a", "-", "pr_e", ")", "/", "(", "1", "-", "pr_e", ")", "\n", "\n", "se_k", "=", "(", "pr_a", "*", "(", "1", "-", "pr_a", ")", ")", "/", "(", "n", "*", "(", "1", "-", "pr_e", ")", "**", "2", ")", "\n", "lower", "=", "kappa", "-", "1.96", "*", "se_k", "\n", "upper", "=", "kappa", "+", "1.96", "*", "se_k", "\n", "return", "kappa", ",", "lower", ",", "upper", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize": [[70, 76], ["img.min", "img.max"], "function", ["None"], ["", "def", "normalize", "(", "img", ")", ":", "\n", "\n", "    ", "_min", "=", "img", ".", "min", "(", ")", "\n", "_max", "=", "img", ".", "max", "(", ")", "\n", "normalized_img", "=", "2", "*", "(", "img", "-", "_min", ")", "/", "(", "_max", "-", "_min", ")", "-", "1", "\n", "return", "normalized_img", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.visualize": [[78, 83], ["img.min", "img.max"], "function", ["None"], ["", "def", "visualize", "(", "img", ")", ":", "\n", "    ", "_min", "=", "img", ".", "min", "(", ")", "\n", "_max", "=", "img", ".", "max", "(", ")", "\n", "normalized_img", "=", "(", "img", "-", "_min", ")", "/", "(", "_max", "-", "_min", ")", "\n", "return", "normalized_img", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.imshow": [[86, 91], ["npimg.detach().numpy.detach().numpy", "matplotlib.imshow", "matplotlib.show", "numpy.transpose", "npimg.detach().numpy.detach"], "function", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.imshow"], ["", "def", "imshow", "(", "npimg", ")", ":", "\n", "    ", "npimg", "=", "npimg", "/", "2", "+", "0.5", "# unnormalize", "\n", "npimg", "=", "npimg", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "plt", ".", "imshow", "(", "np", ".", "transpose", "(", "npimg", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.eval_binary_classifier": [[231, 249], ["numpy.logical_and().sum", "numpy.logical_and().sum", "numpy.logical_and().sum", "numpy.logical_and().sum", "dict", "k.mean", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "dict.items"], "function", ["None"], ["", "", "def", "eval_binary_classifier", "(", "ground_truth", ",", "prediction", ")", ":", "\n", "    ", "eps", "=", "1e-10", "\n", "axis", "=", "(", "0", ",", "1", ")", "\n", "gt_mask", "=", "ground_truth", ">", "0", "\n", "pred_mask", "=", "prediction", ">", "0", "\n", "tp", "=", "np", ".", "logical_and", "(", "gt_mask", ",", "pred_mask", ")", ".", "sum", "(", "axis", "=", "axis", ")", "\n", "tn", "=", "np", ".", "logical_and", "(", "~", "gt_mask", ",", "~", "pred_mask", ")", ".", "sum", "(", "axis", "=", "axis", ")", "\n", "fp", "=", "np", ".", "logical_and", "(", "~", "gt_mask", ",", "pred_mask", ")", ".", "sum", "(", "axis", "=", "axis", ")", "\n", "fn", "=", "np", ".", "logical_and", "(", "gt_mask", ",", "~", "pred_mask", ")", ".", "sum", "(", "axis", "=", "axis", ")", "\n", "N", "=", "tp", "+", "tn", "+", "fp", "+", "fn", "\n", "DSC", "=", "2", "*", "tp", "/", "(", "2", "*", "tp", "+", "fp", "+", "fn", "+", "eps", ")", "\n", "JACC", "=", "DSC", "/", "(", "2", "-", "DSC", ")", "\n", "ACC", "=", "(", "tp", "+", "tn", ")", "/", "N", "\n", "TPR", "=", "tp", "/", "(", "tp", "+", "fn", "+", "eps", ")", "# recall", "\n", "PPV", "=", "tp", "/", "(", "tp", "+", "fp", "+", "eps", ")", "# precision", "\n", "output", "=", "dict", "(", "tp", "=", "tp", ",", "tn", "=", "tn", ",", "fp", "=", "fp", ",", "fn", "=", "fn", ",", "DSC", "=", "DSC", ",", "JACC", "=", "JACC", ",", "ACC", "=", "ACC", ",", "TPR", "=", "TPR", ",", "PPV", "=", "PPV", ")", "\n", "output_avg", "=", "{", "v", ":", "k", ".", "mean", "(", ")", "for", "v", ",", "k", "in", "output", ".", "items", "(", ")", "}", "\n", "return", "output", ",", "output_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.GaussianSmoothing.__init__": [[80, 120], ["torch.Module.__init__", "isinstance", "isinstance", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "zip", "kernel.repeat.repeat.view", "kernel.repeat.repeat.repeat", "Functions.GaussianSmoothing.register_buffer", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "kernel.repeat.repeat.size", "RuntimeError", "math.sqrt", "kernel.repeat.repeat.dim"], "methods", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.Evaluation.Evaluation_Chexpert.Solver.__init__"], ["            ", "def", "__init__", "(", "self", ",", "channels", ",", "kernel_size", ",", "sigma", ",", "dim", "=", "2", ")", ":", "\n", "                ", "super", "(", "GaussianSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "kernel_size", ",", "numbers", ".", "Number", ")", ":", "\n", "                    ", "kernel_size", "=", "[", "kernel_size", "]", "*", "dim", "\n", "", "if", "isinstance", "(", "sigma", ",", "numbers", ".", "Number", ")", ":", "\n", "                    ", "sigma", "=", "[", "sigma", "]", "*", "dim", "\n", "\n", "# The gaussian kernel is the product of the", "\n", "# gaussian function of each dimension.", "\n", "", "kernel", "=", "1", "\n", "meshgrids", "=", "torch", ".", "meshgrid", "(", "\n", "[", "\n", "torch", ".", "arange", "(", "size", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "for", "size", "in", "kernel_size", "\n", "]", "\n", ")", "\n", "for", "size", ",", "std", ",", "mgrid", "in", "zip", "(", "kernel_size", ",", "sigma", ",", "meshgrids", ")", ":", "\n", "                    ", "mean", "=", "(", "size", "-", "1", ")", "/", "2", "\n", "kernel", "*=", "1", "/", "(", "std", "*", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", ")", "*", "torch", ".", "exp", "(", "-", "(", "(", "mgrid", "-", "mean", ")", "/", "std", ")", "**", "2", "/", "2", ")", "\n", "\n", "# Make sure sum of values in gaussian kernel equals 1.", "\n", "", "kernel", "=", "kernel", "/", "torch", ".", "sum", "(", "kernel", ")", "\n", "\n", "# Reshape to depthwise convolutional weight", "\n", "kernel", "=", "kernel", ".", "view", "(", "1", ",", "1", ",", "*", "kernel", ".", "size", "(", ")", ")", "\n", "kernel", "=", "kernel", ".", "repeat", "(", "channels", ",", "*", "[", "1", "]", "*", "(", "kernel", ".", "dim", "(", ")", "-", "1", ")", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'weight'", ",", "kernel", ")", "\n", "self", ".", "groups", "=", "channels", "\n", "\n", "if", "dim", "==", "1", ":", "\n", "                    ", "self", ".", "conv", "=", "F", ".", "conv1d", "\n", "", "elif", "dim", "==", "2", ":", "\n", "                    ", "self", ".", "conv", "=", "F", ".", "conv2d", "\n", "", "elif", "dim", "==", "3", ":", "\n", "                    ", "self", ".", "conv", "=", "F", ".", "conv3d", "\n", "", "else", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'Only 1, 2 and 3 dimensions are supported. Received {}.'", ".", "format", "(", "dim", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.GaussianSmoothing.forward": [[122, 125], ["Functions.GaussianSmoothing.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "\n", "                ", "return", "self", ".", "conv", "(", "input", ",", "weight", "=", "self", ".", "weight", ",", "padding", "=", "1", ",", "groups", "=", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.classification_loss": [[27, 30], ["torch.cross_entropy"], "function", ["None"], ["def", "classification_loss", "(", "logit", ",", "target", ")", ":", "\n", "        ", "\"\"\"Compute binary or softmax cross entropy loss.\"\"\"", "\n", "return", "F", ".", "cross_entropy", "(", "logit", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.gradient_penalty": [[33, 48], ["torch.ones().half().to", "torch.ones().half().to", "torch.ones().half().to", "z.view.view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "z.view.size", "torch.sum", "torch.sum", "torch.sum", "torch.ones().half", "torch.ones().half", "torch.ones().half", "torch.ones", "torch.ones", "torch.ones", "y.size"], "function", ["None"], ["", "def", "gradient_penalty", "(", "y", ",", "x", ")", ":", "\n", "    ", "\"\"\"Compute gradient penalty: (L2_norm(dy/dx) - 1)**2.\"\"\"", "\n", "weight", "=", "torch", ".", "ones", "(", "y", ".", "size", "(", ")", ")", ".", "half", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "z", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "y", ",", "\n", "inputs", "=", "x", ",", "\n", "grad_outputs", "=", "weight", ",", "\n", "retain_graph", "=", "True", ",", "\n", "create_graph", "=", "True", ",", "allow_unused", "=", "True", ",", "\n", "only_inputs", "=", "True", ")", "[", "0", "]", "\n", "\n", "z", "=", "z", ".", "view", "(", "z", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "z_l2norm", "=", "torch", ".", "sqrt", "(", "torch", ".", "sum", "(", "z", "**", "2", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "torch", ".", "mean", "(", "(", "z_l2norm", "-", "1", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.label2onehot": [[50, 56], ["labels.size", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.arange", "labels.long"], "function", ["None"], ["", "def", "label2onehot", "(", "labels", ",", "dim", ")", ":", "\n", "        ", "\"\"\"Convert label indices to one-hot vectors.\"\"\"", "\n", "batch_size", "=", "labels", ".", "size", "(", "0", ")", "\n", "out", "=", "torch", ".", "zeros", "(", "batch_size", ",", "dim", ")", "\n", "out", "[", "np", ".", "arange", "(", "batch_size", ")", ",", "labels", ".", "long", "(", ")", "]", "=", "1", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.create_labels": [[58, 67], ["range", "Functions.label2onehot", "c_trg_list.append", "label2onehot.to", "torch.ones", "torch.ones", "torch.ones", "c_org.size"], "function", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.label2onehot"], ["", "def", "create_labels", "(", "c_org", ",", "c_dim", "=", "2", ")", ":", "\n", "    ", "\"\"\"Generate target domain labels for debugging and testing.\"\"\"", "\n", "# Get hair color indices.", "\n", "\n", "c_trg_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "c_dim", ")", ":", "\n", "        ", "c_trg", "=", "label2onehot", "(", "torch", ".", "ones", "(", "c_org", ".", "size", "(", "0", ")", ")", "*", "i", ",", "c_dim", ")", "\n", "c_trg_list", ".", "append", "(", "c_trg", ".", "to", "(", "device", ")", ")", "\n", "", "return", "c_trg_list", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.update_lr": [[69, 75], ["None"], "function", ["None"], ["", "def", "update_lr", "(", "g_lr", ",", "d_lr", ",", "g_optimizer", ",", "d_optimizer", ")", ":", "\n", "        ", "\"\"\"Decay learning rates of the generator and discriminator.\"\"\"", "\n", "for", "param_group", "in", "g_optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "g_lr", "\n", "", "for", "param_group", "in", "d_optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "d_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.scalar_2_vector": [[126, 135], ["mpl.cm.get_cmap", "img_src.thumbnail", "numpy.array", "mpl.cm.get_cmap.", "numpy.uint8", "print", "Image.fromarray", "Image.fromarray.max", "Image.fromarray.min"], "function", ["None"], ["", "", "def", "scalar_2_vector", "(", "img_src", ",", "colormap", ")", ":", "\n", "    ", "cm_hot", "=", "mpl", ".", "cm", ".", "get_cmap", "(", "colormap", ")", "\n", "img_src", ".", "thumbnail", "(", "(", "1024", ",", "1024", ")", ")", "\n", "im", "=", "np", ".", "array", "(", "img_src", ")", "\n", "im", "=", "cm_hot", "(", "im", ")", "\n", "im", "=", "np", ".", "uint8", "(", "im", "*", "255", ")", "\n", "print", "(", "im", ".", "max", "(", ")", ",", "im", ".", "min", "(", ")", ")", "\n", "im", "=", "Image", ".", "fromarray", "(", "im", ")", "\n", "return", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.save_tensor_image_as_png": [[136, 142], ["Image.fromarray", "Functions.scalar_2_vector", "plt.figure", "plt.imshow", "scalar_2_vector.save"], "function", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.scalar_2_vector", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.imshow"], ["", "def", "save_tensor_image_as_png", "(", "image", ",", "filename", ",", "colormap", "=", "'viridis'", ")", ":", "\n", "    ", "im", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "im", "=", "scalar_2_vector", "(", "im", ",", "colormap", ")", "\n", "plt", ".", "figure", "(", "5", ")", "\n", "plt", ".", "imshow", "(", "im", ")", "\n", "im", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.save_tensor_image_as_png_gray": [[143, 149], ["Image.fromarray", "Functions.scalar_2_vector", "plt.figure", "plt.imshow", "scalar_2_vector.save"], "function", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.scalar_2_vector", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.imshow"], ["", "def", "save_tensor_image_as_png_gray", "(", "image", ",", "filename", ",", "colormap", "=", "'gray'", ")", ":", "\n", "        ", "im", "=", "Image", ".", "fromarray", "(", "image", ")", "\n", "im", "=", "scalar_2_vector", "(", "im", ",", "colormap", ")", "\n", "plt", ".", "figure", "(", "5", ")", "\n", "plt", ".", "imshow", "(", "im", ")", "\n", "im", ".", "save", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.Flatten.forward": [[25, 27], ["x.reshape", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "reshape", "(", "x", ".", "size", "(", ")", "[", "0", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.Identity.forward": [[31, 33], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.Generator.__init__": [[93, 150], ["torch.Module.__init__", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.tensor().half().cuda", "torch.tensor().half().cuda", "torch.tensor().half().cuda", "torch.tensor().half().cuda", "torch.tensor().half().cuda", "torch.tensor().half().cuda", "torch.tensor().half().cuda", "torch.tensor().half().cuda", "torch.tensor().half().cuda", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "generator_discrminator.deconv2d_bn_block", "torch.Sequential", "torch.Sequential", "torch.Sequential", "generator_discrminator.deconv2d_bn_block", "torch.Sequential", "torch.Sequential", "torch.Sequential", "generator_discrminator.deconv2d_bn_block", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.Evaluation.Evaluation_Chexpert.Solver.__init__", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.deconv2d_bn_block", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.deconv2d_bn_block", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.deconv2d_bn_block"], ["        ", "def", "__init__", "(", "self", ",", "n_channels", "=", "1", ",", "nf", "=", "64", ",", "batch_norm", "=", "True", ",", "activation", "=", "ACTIVATION", ")", ":", "\n", "            ", "super", "(", "Generator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "act", "=", "activation", "\n", "\n", "conv_block", "=", "conv2d_bn_block", "if", "batch_norm", "else", "conv2d_block", "\n", "\n", "max_pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "act", "=", "activation", "\n", "self", ".", "label_k", "=", "torch", ".", "tensor", "(", "[", "0", ",", "1", "]", ")", ".", "half", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "down0", "=", "nn", ".", "Sequential", "(", "\n", "conv_block", "(", "n_channels", "+", "c_dim", ",", "nf", ",", "activation", "=", "act", ")", ",", "\n", "conv_block", "(", "nf", ",", "nf", ",", "activation", "=", "act", ")", "\n", ")", "\n", "self", ".", "down1", "=", "nn", ".", "Sequential", "(", "\n", "max_pool", ",", "\n", "conv_block", "(", "nf", ",", "2", "*", "nf", ",", "activation", "=", "act", ")", ",", "\n", "conv_block", "(", "2", "*", "nf", ",", "2", "*", "nf", ",", "activation", "=", "act", ")", ",", "\n", ")", "\n", "self", ".", "down2", "=", "nn", ".", "Sequential", "(", "\n", "max_pool", ",", "\n", "conv_block", "(", "2", "*", "nf", ",", "4", "*", "nf", ",", "activation", "=", "act", ")", ",", "\n", "conv_block", "(", "4", "*", "nf", ",", "4", "*", "nf", ",", "activation", "=", "act", ")", ",", "\n", "\n", "\n", ")", "\n", "self", ".", "down3", "=", "nn", ".", "Sequential", "(", "\n", "max_pool", ",", "\n", "conv_block", "(", "4", "*", "nf", ",", "8", "*", "nf", ",", "activation", "=", "act", ")", ",", "\n", "conv_block", "(", "8", "*", "nf", ",", "8", "*", "nf", ",", "activation", "=", "act", ")", ",", "\n", ")", "\n", "\n", "self", ".", "up3", "=", "deconv2d_bn_block", "(", "8", "*", "nf", ",", "4", "*", "nf", ",", "activation", "=", "act", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "conv_block", "(", "8", "*", "nf", ",", "4", "*", "nf", ",", "activation", "=", "act", ")", ",", "# 8", "\n", "conv_block", "(", "4", "*", "nf", ",", "4", "*", "nf", ",", "activation", "=", "act", ")", ",", "\n", ")", "\n", "self", ".", "up2", "=", "deconv2d_bn_block", "(", "4", "*", "nf", ",", "2", "*", "nf", ",", "activation", "=", "act", ")", "\n", "self", ".", "conv6", "=", "nn", ".", "Sequential", "(", "\n", "conv_block", "(", "4", "*", "nf", ",", "2", "*", "nf", ",", "activation", "=", "act", ")", ",", "\n", "conv_block", "(", "2", "*", "nf", ",", "2", "*", "nf", ",", "activation", "=", "act", ")", ",", "\n", ")", "\n", "\n", "\n", "self", ".", "up1", "=", "deconv2d_bn_block", "(", "2", "*", "nf", ",", "nf", ",", "activation", "=", "act", ")", "\n", "\n", "\n", "self", ".", "conv7_k", "=", "nn", ".", "Sequential", "(", "\n", "conv_block", "(", "nf", ",", "nf", ",", "activation", "=", "act", ")", ",", "\n", "conv_block", "(", "nf", ",", "n_channels", ",", "activation", "=", "nn", ".", "Tanh", ")", ",", "\n", ")", "\n", "\n", "self", ".", "conv7_g", "=", "nn", ".", "Sequential", "(", "\n", "conv_block", "(", "nf", ",", "nf", ",", "activation", "=", "act", ")", ",", "\n", "conv_block", "(", "nf", ",", "n_channels", ",", "activation", "=", "nn", ".", "Tanh", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.Generator.forward": [[152, 179], ["c.view", "c1.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "generator_discrminator.Generator.down0", "generator_discrminator.Generator.down1", "generator_discrminator.Generator.down2", "generator_discrminator.Generator.down3", "generator_discrminator.Generator.up3", "generator_discrminator.crop_and_concat", "generator_discrminator.Generator.conv5", "generator_discrminator.Generator.up2", "generator_discrminator.crop_and_concat", "generator_discrminator.Generator.conv6", "generator_discrminator.Generator.up1", "generator_discrminator.crop_and_concat", "c.size", "c.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "generator_discrminator.Generator.conv7_k", "generator_discrminator.Generator.conv7_g"], "methods", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.crop_and_concat", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.crop_and_concat", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.crop_and_concat"], ["", "def", "forward", "(", "self", ",", "x", ",", "c", ")", ":", "\n", "            ", "c1", "=", "c", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "c", ".", "size", "(", "1", ")", ",", "1", ",", "1", ")", "\n", "c1", "=", "c1", ".", "repeat", "(", "1", ",", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "c1", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x0", "=", "self", ".", "down0", "(", "x", ")", "\n", "x1", "=", "self", ".", "down1", "(", "x0", ")", "\n", "x2", "=", "self", ".", "down2", "(", "x1", ")", "\n", "x3", "=", "self", ".", "down3", "(", "x2", ")", "\n", "\n", "\n", "xu3", "=", "self", ".", "up3", "(", "x3", ")", "\n", "cat3", "=", "crop_and_concat", "(", "xu3", ",", "x2", ")", "\n", "x5", "=", "self", ".", "conv5", "(", "cat3", ")", "\n", "xu2", "=", "self", ".", "up2", "(", "x5", ")", "\n", "cat2", "=", "crop_and_concat", "(", "xu2", ",", "x1", ")", "\n", "\n", "x6", "=", "self", ".", "conv6", "(", "cat2", ")", "\n", "xu1", "=", "self", ".", "up1", "(", "x6", ")", "\n", "cat1", "=", "crop_and_concat", "(", "xu1", ",", "x0", ")", "\n", "\n", "if", "self", ".", "label_k", "in", "c", ":", "\n", "                ", "x7", "=", "self", ".", "conv7_k", "(", "xu1", ")", "\n", "", "else", ":", "\n", "                ", "x7", "=", "self", ".", "conv7_g", "(", "xu1", ")", "\n", "\n", "", "return", "x7", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.Discriminator.__init__": [[183, 223], ["torch.Module.__init__", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "conv_block", "max_pool", "conv_block", "max_pool", "conv_block", "conv_block", "max_pool", "conv_block", "conv_block", "max_pool", "conv_block", "conv_block", "max_pool", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "conv_block", "max_pool", "generator_discrminator.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "numpy.power", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.Evaluation.Evaluation_Chexpert.Solver.__init__"], ["            ", "def", "__init__", "(", "self", ",", "n_channels", "=", "1", ",", "init_filters", "=", "32", ",", "batch_norm", "=", "False", ")", ":", "\n", "                ", "super", "(", "Discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nf", "=", "init_filters", "\n", "self", ".", "label_k", "=", "torch", ".", "ones", "(", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "conv_block", "=", "conv2d_bn_block", "if", "batch_norm", "else", "conv2d_block", "\n", "\n", "max_pool", "=", "nn", ".", "MaxPool2d", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "conv_block", "(", "n_channels", ",", "nf", ")", ",", "\n", "max_pool", "(", "2", ")", ",", "\n", "conv_block", "(", "nf", ",", "2", "*", "nf", ")", ",", "\n", "\n", "max_pool", "(", "2", ")", ",", "\n", "conv_block", "(", "2", "*", "nf", ",", "4", "*", "nf", ")", ",", "\n", "conv_block", "(", "4", "*", "nf", ",", "4", "*", "nf", ")", ",", "\n", "max_pool", "(", "2", ")", ",", "\n", "conv_block", "(", "4", "*", "nf", ",", "8", "*", "nf", ")", ",", "\n", "conv_block", "(", "8", "*", "nf", ",", "8", "*", "nf", ")", ",", "\n", "max_pool", "(", "2", ")", ",", "\n", "conv_block", "(", "8", "*", "nf", ",", "8", "*", "nf", ")", ",", "\n", "conv_block", "(", "8", "*", "nf", ",", "8", "*", "nf", ")", ",", "\n", "max_pool", "(", "2", ")", ",", "\n", "conv_block", "(", "8", "*", "nf", ",", "16", "*", "nf", ")", ",", "\n", "\n", "\n", ")", "\n", "kernel_size", "=", "int", "(", "240", "/", "np", ".", "power", "(", "2", ",", "5", ")", ")", "\n", "self", ".", "conv_k", "=", "nn", ".", "Sequential", "(", "conv_block", "(", "16", "*", "nf", ",", "16", "*", "nf", ")", ",", "conv_block", "(", "16", "*", "nf", ",", "16", "*", "nf", ")", ",", "conv_block", "(", "16", "*", "nf", ",", "1", ",", "kernel", "=", "1", ",", "activation", "=", "Identity", ")", ",", ")", "\n", "self", ".", "conv_g", "=", "nn", ".", "Sequential", "(", "conv_block", "(", "16", "*", "nf", ",", "16", "*", "nf", ")", ",", "conv_block", "(", "16", "*", "nf", ",", "16", "*", "nf", ")", ",", "conv_block", "(", "16", "*", "nf", ",", "1", ",", "kernel", "=", "1", ",", "activation", "=", "Identity", ")", ",", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "conv_block", "(", "16", "*", "nf", ",", "16", "*", "nf", ")", ",", "conv_block", "(", "16", "*", "nf", ",", "16", "*", "nf", ")", ",", "max_pool", "(", "2", ")", ",", ")", "\n", "\n", "\n", "self", ".", "linearclass", "=", "nn", ".", "Sequential", "(", "\n", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", "*", "4", "*", "4", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.1", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "2", ")", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.Discriminator.forward": [[226, 238], ["generator_discrminator.Discriminator.encoder", "generator_discrminator.Discriminator.conv2", "generator_discrminator.Discriminator.linearclass", "generator_discrminator.Discriminator.conv_k", "generator_discrminator.Discriminator.conv_g", "generator_discrminator.Discriminator.reshape", "generator_discrminator.Discriminator.size", "generator_discrminator.Discriminator.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", ")", ":", "\n", "                   ", "h", "=", "self", ".", "encoder", "(", "x", ")", "\n", "if", "label", "==", "self", ".", "label_k", ":", "\n", "                     ", "out", "=", "self", ".", "conv_k", "(", "h", ")", "\n", "\n", "", "else", ":", "\n", "                     ", "out", "=", "self", ".", "conv_g", "(", "h", ")", "\n", "", "zwischen", "=", "self", ".", "conv2", "(", "h", ")", "\n", "\n", "klasse", "=", "self", ".", "linearclass", "(", "zwischen", ")", "\n", "\n", "return", "out", ",", "klasse", ".", "reshape", "(", "klasse", ".", "size", "(", "0", ")", ",", "klasse", ".", "size", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.crop_and_concat": [[37, 43], ["torch.cat", "torch.cat", "torch.cat", "torch.pad", "F.pad.size", "upsampled.size"], "function", ["None"], ["def", "crop_and_concat", "(", "upsampled", ",", "bypass", ",", "crop", "=", "False", ")", ":", "\n", "    ", "if", "crop", ":", "\n", "        ", "c", "=", "(", "bypass", ".", "size", "(", ")", "[", "2", "]", "-", "upsampled", ".", "size", "(", ")", "[", "2", "]", ")", "//", "2", "\n", "bypass", "=", "F", ".", "pad", "(", "bypass", ",", "(", "-", "c", ",", "-", "c", ",", "-", "c", ",", "-", "c", ")", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "(", "upsampled", ",", "bypass", ")", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.conv2d_bn_block": [[45, 51], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "activation"], "function", ["None"], ["", "def", "conv2d_bn_block", "(", "in_channels", ",", "out_channels", ",", "kernel", "=", "3", ",", "momentum", "=", "0.01", ",", "activation", "=", "ACTIVATION", ")", ":", "\n", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "momentum", "=", "momentum", ")", ",", "\n", "activation", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.deconv2d_bn_block": [[54, 67], ["torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.BatchNorm2d", "activation", "torch.Upsample", "torch.Conv2d"], "function", ["None"], ["", "def", "deconv2d_bn_block", "(", "in_channels", ",", "out_channels", ",", "use_upsample", "=", "True", ",", "kernel", "=", "4", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "momentum", "=", "0.01", ",", "activation", "=", "ACTIVATION", ")", ":", "\n", "\n", "    ", "if", "use_upsample", ":", "\n", "        ", "up", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "out_channels", ",", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "\n", "up", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ",", "momentum", "=", "momentum", ")", ",", "\n", "activation", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.dense_layer_bn": [[70, 76], ["torch.Sequential", "torch.Linear", "torch.BatchNorm1d", "activation"], "function", ["None"], ["", "def", "dense_layer_bn", "(", "in_dim", ",", "out_dim", ",", "momentum", "=", "0.01", ",", "activation", "=", "ACTIVATION", ")", ":", "\n", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_dim", ",", "momentum", "=", "momentum", ")", ",", "\n", "activation", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.generator_discrminator.conv2d_block": [[80, 85], ["torch.Sequential", "torch.Conv2d", "activation"], "function", ["None"], ["", "def", "conv2d_block", "(", "in_channels", ",", "out_channels", ",", "kernel", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "activation", "=", "ACTIVATION", ")", ":", "\n", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ")", ",", "\n", "activation", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.DeScarGAN.Solver.__init__": [[39, 43], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.Evaluation.Evaluation_Chexpert.Solver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_path", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "Solver", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_path", "=", "dataset_path", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.DeScarGAN.Solver.train": [[44, 474], ["torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "print", "model.generator_discrminator.Generator().to", "model.generator_discrminator.Discriminator().to", "numpy.array().sum", "numpy.array().sum", "print", "numpy.ones", "viz.line", "viz.line", "viz.image", "viz.image", "viz.image", "viz.image", "viz.image", "viz.image", "viz.line", "viz.line", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "os.path.join", "print", "os.path.join", "print", "torchvision.datasets.DatasetFolder", "torchvision.datasets.DatasetFolder", "torchvision.datasets.DatasetFolder", "torchvision.datasets.DatasetFolder", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.DatasetFolder", "torchvision.datasets.DatasetFolder", "torchvision.datasets.DatasetFolder", "torchvision.datasets.DatasetFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "amp.initialize", "amp.initialize", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "netG.train.train.apply", "netD.eval.eval.apply", "range", "len", "netG.train.train.parameters", "netD.eval.eval.parameters", "isinstance", "isinstance", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "netD.eval.eval.train", "netG.train.train.train", "enumerate", "model.generator_discrminator.Generator", "model.generator_discrminator.Discriminator", "numpy.array", "numpy.array", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "dict", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "dict", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "dict", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "torch.zeros().cpu", "dict", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.RandomVerticalFlip", "torchvision.RandomVerticalFlip", "utils.tools.MapTransformOverNumpyArrayChannels", "utils.tools.TransposeNumpy", "torchvision.ToTensor", "torchvision.ToTensor", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "netG.train.train.load_state_dict", "netD.eval.eval.load_state_dict", "print", "print", "round", "print", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.autograd.Variable", "torch.autograd.Variable", "label_org.to.to.to", "torch.eq().nonzero().cuda", "torch.eq().nonzero().cuda", "torch.eq().nonzero().cuda", "torch.eq().nonzero().cuda", "torch.eq().nonzero().cuda", "torch.eq().nonzero().cuda", "torch.eq().nonzero().cuda", "torch.eq().nonzero().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.zeros().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "torch.ones().long().cuda", "utils.Functions.label2onehot().half().to", "utils.Functions.label2onehot().half().to", "netD.eval.eval.", "netG.train.train.", "netG.train.train.", "netD.eval.eval.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "netD.eval.eval.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.rand().half().to", "torch.rand().half().to", "torch.rand().half().to", "torch.rand().half().to", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "netD.eval.eval.", "netD.eval.eval.", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "netD.eval.eval.named_parameters", "sum", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.step", "d_loss_real.item", "d_loss_real.item", "d_loss_fake.item", "d_loss_fake.item", "d_loss_fake.item", "d_loss_cls.item", "d_loss_gp.item", "d_loss_gp.item", "d_loss.item", "viz.line", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.tensor().half().to", "torch.tensor().half().to", "torch.tensor().half().to", "torch.tensor().half().to", "numpy.transpose", "viz.image", "torch.tensor().half().to", "torch.tensor().half().to", "torch.tensor().half().to", "torch.tensor().half().to", "len", "len", "torch.eq().nonzero().cuda.nelement", "torch.eq().nonzero().cuda.nelement", "netD.eval.eval.", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.eq().nonzero().cuda.nelement", "torch.eq().nonzero().cuda.nelement", "netD.eval.eval.", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "netG.train.detach", "netG.train.detach", "utils.Functions.gradient_penalty", "utils.Functions.gradient_penalty", "amp.scale_loss", "scaled_loss_d.backward", "netD.eval.eval.parameters", "viz.line", "viz.line", "viz.line", "viz.line", "viz.line", "viz.line", "torch.max", "torch.max", "torch.max", "torch.max", "torch.MSELoss", "torch.MSELoss", "netD.eval.eval.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "netD.eval.eval.", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "utils.Functions.classification_loss", "utils.Functions.classification_loss", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "netG.train.train.named_parameters", "sum", "print", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.step", "print", "g_loss.item", "g_loss_fake.item", "g_loss_fake.item", "g_loss_rec.item", "g_loss_rec.item", "g_loss_cls.item", "g_loss_cls.item", "g_loss_id.item", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "netD.eval.eval.eval", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "enumerate", "print", "viz.line", "viz.line", "utils.tools.kappa_score", "print", "viz.line", "numpy.array().prod", "numpy.array().prod", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.array", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.eq().nonzero", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "utils.Functions.label2onehot().half", "utils.Functions.label2onehot().half", "utils.Functions.classification_loss", "utils.Functions.classification_loss", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.rand().half", "torch.rand().half", "torch.rand().half", "torch.rand().half", "netG.train.data.half().requires_grad_", "netG.train.data.half().requires_grad_", "torch.mean.half", "torch.mean.half", "torch.mean.half", "torch.mean.half", "ave_grads.append", "netG.train.train.", "netG.train.train.", "torch.eq().nonzero().cuda.nelement", "torch.eq().nonzero().cuda.nelement", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.eq().nonzero().cuda.nelement", "torch.eq().nonzero().cuda.nelement", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "amp.scale_loss", "scaled_loss_g.backward", "netG.train.train.parameters", "viz.line", "viz.line", "viz.line", "viz.line", "viz.line", "viz.line", "viz.image", "viz.image", "viz.image", "viz.heatmap", "netG.train.train.state_dict", "netD.eval.eval.state_dict", "netG.train.train.state_dict", "netD.eval.eval.state_dict", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "utils.Functions.label2onehot().half().to", "netD.eval.eval.", "netD.eval.eval.", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "viz.image", "netG.train.train.parameters", "netD.eval.eval.parameters", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "p.grad.abs().mean", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.MSELoss.", "netG.train.train.", "torch.MSELoss.", "torch.MSELoss.", "netG.train.train.", "torch.MSELoss.", "ave_grads.append", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "utils.tools.visualize", "utils.tools.visualize", "utils.tools.visualize", "torch.eq().nonzero().cuda.nelement", "torch.eq().nonzero().cuda.nelement", "viz.image", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor().half().to", "torch.tensor().half().to", "torch.tensor().half().to", "torch.tensor().half().to", "numpy.transpose", "torch.tensor().half().to", "torch.tensor().half().to", "torch.tensor().half().to", "torch.tensor().half().to", "label_org.to.to.size", "netG.train.train.", "utils.tools.visualize", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "numpy.array", "numpy.array", "len", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "utils.Functions.label2onehot", "utils.Functions.label2onehot", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "netG.train.data.half", "netG.train.data.half", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "p.grad.abs().mean", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "torch.Tensor().unsqueeze().cpu", "dict", "dict", "dict", "utils.tools.visualize", "dict", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "numpy.array", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "utils.Functions.label2onehot().half", "predicted.cpu", "dict", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "len", "torch.tensor().half().to.size", "torch.tensor().half().to.size", "p.grad.abs", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "torch.ones().cpu", "dict", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "len", "len", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "len", "len", "p.grad.abs", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor().unsqueeze", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "utils.Functions.label2onehot", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "predicted.cpu", "predicted2.cpu", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.DeScarGAN.Solver.train", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.DeScarGAN.Solver.train", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.gradient_penalty", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.gradient_penalty", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.classification_loss", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.classification_loss", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.kappa_score", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.classification_loss", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.classification_loss", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.visualize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.visualize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.visualize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.visualize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.label2onehot", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.label2onehot", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.visualize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.label2onehot"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "id", "=", "0", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "id", ")", "\n", "device", "=", "'cuda'", "\n", "print", "(", "\"computations done on \"", ",", "device", ")", "\n", "\n", "\n", "netG", "=", "Generator", "(", ")", ".", "to", "(", "device", ")", "\n", "netD", "=", "Discriminator", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "p1", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "p", ".", "shape", ")", ".", "prod", "(", ")", "for", "p", "in", "netG", ".", "parameters", "(", ")", "]", ")", ".", "sum", "(", ")", "#number of parameters for G", "\n", "p2", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "p", ".", "shape", ")", ".", "prod", "(", ")", "for", "p", "in", "netD", ".", "parameters", "(", ")", "]", ")", ".", "sum", "(", ")", "#number of parameters for D", "\n", "print", "(", "p1", ",", "p2", ",", "p1", "/", "(", "256", "*", "256", ")", ")", "\n", "\n", "\n", "blank", "=", "np", ".", "ones", "(", "(", "256", ",", "256", ")", ")", "\n", "lossd_window", "=", "viz", ".", "line", "(", "Y", "=", "torch", ".", "zeros", "(", "(", "1", ")", ")", ".", "cpu", "(", ")", ",", "X", "=", "torch", ".", "zeros", "(", "(", "1", ")", ")", ".", "cpu", "(", ")", ",", "opts", "=", "dict", "(", "xlabel", "=", "'epoch'", ",", "ylabel", "=", "'Loss'", ",", "title", "=", "'training loss discriminator'", ")", ")", "\n", "lossg_window", "=", "viz", ".", "line", "(", "Y", "=", "torch", ".", "zeros", "(", "(", "1", ")", ")", ".", "cpu", "(", ")", ",", "X", "=", "torch", ".", "zeros", "(", "(", "1", ")", ")", ".", "cpu", "(", ")", ",", "opts", "=", "dict", "(", "xlabel", "=", "'epoch'", ",", "ylabel", "=", "'Loss'", ",", "title", "=", "'training loss generator'", ")", ")", "\n", "image_window", "=", "viz", ".", "image", "(", "blank", ")", "\n", "image_window2", "=", "viz", ".", "image", "(", "blank", ")", "\n", "image_window3", "=", "viz", ".", "image", "(", "blank", ")", "\n", "image_window4", "=", "viz", ".", "image", "(", "blank", ")", "\n", "image_window5", "=", "viz", ".", "image", "(", "blank", ")", "\n", "image_window7", "=", "viz", ".", "image", "(", "blank", ")", "\n", "val_window", "=", "viz", ".", "line", "(", "Y", "=", "torch", ".", "zeros", "(", "(", "1", ")", ")", ".", "cpu", "(", ")", ",", "X", "=", "torch", ".", "zeros", "(", "(", "1", ")", ")", ".", "cpu", "(", ")", ",", "opts", "=", "dict", "(", "xlabel", "=", "'epoch'", ",", "ylabel", "=", "'accuracy'", ",", "title", "=", "'classification accuracy on validation set'", ")", ")", "\n", "grad_window", "=", "viz", ".", "line", "(", "Y", "=", "torch", ".", "zeros", "(", "(", "1", ")", ")", ".", "cpu", "(", ")", ",", "X", "=", "torch", ".", "zeros", "(", "(", "1", ")", ")", ".", "cpu", "(", ")", ",", "opts", "=", "dict", "(", "xlabel", "=", "'epoch'", ",", "ylabel", "=", "'gradient'", ",", "title", "=", "'average gradients'", ")", ")", "\n", "\n", "#--------------------------------------------------------------------------------------------------", "\n", "#CHOOSE HYPERPARAMETERS", "\n", "#------------------------------------------------------------------------------------------", "\n", "batchsize", "=", "10", "\n", "lambda_id", "=", "50", "\n", "lambda_rec", "=", "50", "\n", "lambda_gp", "=", "10", "\n", "lambda_fake", "=", "20", "\n", "lambda_real", "=", "20", "\n", "lambda_fake_g", "=", "1", "\n", "lambda_cls_d", "=", "5", "\n", "lambda_cls_g", "=", "1", "\n", "beta1", "=", "0.5", "\n", "beta2", "=", "0.999", "\n", "n_critic", "=", "5", "\n", "\n", "\n", "augmentation_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomVerticalFlip", "(", "p", "=", "0.5", ")", ",", "\n", "]", ")", "\n", "\n", "transformer", "=", "transforms", ".", "Compose", "(", "[", "\n", "MapTransformOverNumpyArrayChannels", "(", "augmentation_transform", ")", ",", "\n", "TransposeNumpy", "(", "[", "1", ",", "2", ",", "0", "]", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", "\n", "]", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_path", ",", "'train'", ")", "\n", "print", "(", "path", ",", "'PATH'", ")", "\n", "\n", "path_val", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_path", ",", "'validate'", ")", "\n", "print", "(", "path_val", ",", "'PATH_VAL'", ")", "\n", "\n", "Dataset", "=", "torchvision", ".", "datasets", ".", "DatasetFolder", "(", "\n", "root", "=", "path", ",", "\n", "loader", "=", "npy_loader", ",", "\n", "transform", "=", "transformer", ",", "\n", "extensions", "=", "(", "'.npy'", ",", ")", "\n", ")", "\n", "print", "(", "'Dataset'", ",", "len", "(", "Dataset", ")", ")", "\n", "\n", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "Dataset", ",", "\n", "batch_size", "=", "batchsize", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "8", ")", "\n", "val_set", "=", "torchvision", ".", "datasets", ".", "DatasetFolder", "(", "\n", "root", "=", "path_val", ",", "\n", "loader", "=", "npy_loader", ",", "\n", "extensions", "=", "(", "'.npy'", ",", ")", "\n", ")", "\n", "\n", "validate_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "val_set", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "g_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "netG", ".", "parameters", "(", ")", ",", "0.0001", ",", "[", "beta1", ",", "beta2", "]", ")", "\n", "d_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "netD", ".", "parameters", "(", ")", ",", "0.0001", ",", "[", "beta1", ",", "beta2", "]", ")", "\n", "netG", ",", "g_optimizer", "=", "amp", ".", "initialize", "(", "netG", ",", "g_optimizer", ",", "opt_level", "=", "'O1'", ")", "\n", "netD", ",", "d_optimizer", "=", "amp", ".", "initialize", "(", "netD", ",", "d_optimizer", ",", "opt_level", "=", "'O1'", ")", "\n", "g_optimizer", ".", "zero_grad", "(", ")", "\n", "d_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "netG", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netG", ",", "device_ids", "=", "[", "id", "]", ",", "output_device", "=", "id", ")", "\n", "netD", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netD", ",", "device_ids", "=", "[", "id", "]", ",", "output_device", "=", "id", ")", "\n", "\n", "def", "weights_init_k", "(", "m", ")", ":", "\n", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "\n", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n", "", "", "", "def", "weights_init_x", "(", "m", ")", ":", "\n", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "#or isinstance(m, nn.Linear):", "\n", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "m", ".", "bias", ")", "\n", "\n", "\n", "", "", "", "netG", ".", "apply", "(", "weights_init_k", ")", "\n", "netD", ".", "apply", "(", "weights_init_x", ")", "\n", "try_loading_file", "=", "False", "\n", "if", "try_loading_file", ":", "\n", "\n", "            ", "try", ":", "\n", "\n", "                ", "netG", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"./save_nets/netG_synthetic.pt\"", ",", "map_location", "=", "{", "'cuda:0'", ":", "'cpu'", "}", ")", ")", "# does NOT load optimizer state etc.", "\n", "netD", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"./save_nets/netD_synthetic.pt\"", ",", "map_location", "=", "{", "'cuda:0'", ":", "'cpu'", "}", ")", ")", "\n", "\n", "print", "(", "\"loaded model from file\"", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"loading model from file failed; created new model\"", ")", "\n", "\n", "\n", "", "", "c_dim", "=", "2", "\n", "# =================================================================================== #", "\n", "#                             1. Preprocess input data                                #", "\n", "# =================================================================================== #", "\n", "for", "epoch", "in", "range", "(", "500", ")", ":", "\n", "         ", "running_loss", "=", "0", ";", "sum_loss_real", "=", "0", ";", "sum_loss_fake", "=", "0", ";", "sum_loss_cls", "=", "0", ";", "sum_loss_gp", "=", "0", ";", "\n", "sum_g_fake", "=", "0", ";", "sum_g_rec", "=", "0", ";", "running_loss_g", "=", "0", ";", "sum_g_id", "=", "0", ";", "sum_g_cls", "=", "0", "\n", "total", "=", "0", ";", "correct", "=", "0", "\n", "k", "=", "torch", ".", "ones", "(", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "g", "=", "torch", ".", "zeros", "(", "1", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "netD", "=", "netD", ".", "train", "(", ")", ";", "netG", "=", "netG", ".", "train", "(", ")", "\n", "\n", "\n", "for", "i", ",", "(", "X", ",", "label_org", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "print", "(", "label_org", ")", "\n", "num_it", "=", "round", "(", "len", "(", "Dataset", ")", "*", "epoch", "/", "batchsize", "+", "i", ",", "0", ")", "\n", "print", "(", "'epoch'", ",", "epoch", ",", "'iter'", ",", "i", ",", "X", ".", "shape", ")", "\n", "if", "self", ".", "dataset", "==", "'Synthetic'", ":", "\n", "              ", "x_real", "=", "torch", ".", "tensor", "(", "X", "[", ":", ",", ":", "1", ",", ":", ",", ":", "]", ")", ".", "half", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "              ", "x_real", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "X", ")", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "viz", ".", "image", "(", "x_real", "[", "0", ",", "0", ",", "...", "]", ")", "\n", "x_real", "=", "torch", ".", "tensor", "(", "x_real", ")", ".", "half", "(", ")", ".", "to", "(", "device", ")", "\n", "", "noise", "=", "torch", ".", "rand", "(", "x_real", ".", "shape", ")", ".", "to", "(", "device", ")", "\n", "noise2", "=", "noise", "\n", "\n", "x_real", "=", "x_real", "+", "0.05", "*", "noise", "#add Gaussian noise to input", "\n", "\n", "inputs", "=", "Variable", "(", "x_real", ",", "requires_grad", "=", "True", ")", "\n", "label_org", "=", "label_org", ".", "to", "(", "device", ")", "\n", "v_krank", "=", "torch", ".", "eq", "(", "label_org", ",", "k", ")", ".", "nonzero", "(", ")", ".", "cuda", "(", ")", "\n", "v_gesund", "=", "torch", ".", "eq", "(", "label_org", ",", "g", ")", ".", "nonzero", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "label_g", "=", "torch", ".", "zeros", "(", "len", "(", "inputs", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "label_k", "=", "torch", ".", "ones", "(", "len", "(", "inputs", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", "\n", "c_k", "=", "label2onehot", "(", "label_k", ",", "c_dim", ")", ".", "half", "(", ")", ".", "to", "(", "device", ")", "\n", "c_g", "=", "label2onehot", "(", "label_g", ",", "c_dim", ")", ".", "half", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "part_k", "=", "len", "(", "v_krank", ")", "/", "batchsize", "#split the batch into healthy and diseased images", "\n", "part_g", "=", "len", "(", "v_gesund", ")", "/", "batchsize", "\n", "\n", "# =================================================================================== #", "\n", "#                             2. Train the discriminator                              #", "\n", "# =================================================================================== #", "\n", "\n", "# Compute loss with real images.", "\n", "\n", "if", "v_gesund", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "              ", "(", "out_g", ",", "klasse_g", ")", "=", "netD", "(", "inputs", "[", "v_gesund", "]", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", ",", "g", ")", "\n", "d_loss_real_g", "=", "-", "torch", ".", "mean", "(", "out_g", ")", "*", "part_g", "\n", "d_loss_cls_g", "=", "classification_loss", "(", "logit", "=", "klasse_g", ",", "target", "=", "label_g", "[", ":", "len", "(", "v_gesund", ")", "]", ")", "*", "part_g", "\n", "", "else", ":", "\n", "                ", "d_loss_real_g", "=", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "d_loss_cls_g", "=", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "v_krank", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "              ", "(", "out_k", ",", "klasse_k", ")", "=", "netD", "(", "inputs", "[", "v_krank", "]", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", ",", "k", ")", "\n", "d_loss_real_k", "=", "-", "torch", ".", "mean", "(", "out_k", ")", "*", "part_k", "\n", "d_loss_cls_k", "=", "classification_loss", "(", "logit", "=", "klasse_k", ",", "target", "=", "label_k", "[", ":", "len", "(", "v_krank", ")", "]", ")", "*", "part_k", "\n", "", "else", ":", "\n", "              ", "d_loss_real_k", "=", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "d_loss_cls_k", "=", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "", "d_loss_real", "=", "d_loss_real_g", "+", "d_loss_real_k", "\n", "d_loss_cls", "=", "d_loss_cls_g", "+", "d_loss_cls_k", "\n", "(", "_", ",", "klasse", ")", "=", "netD", "(", "inputs", ",", "g", ")", "\n", "\n", "# Compute loss with fake images.", "\n", "\n", "x_fake_g", "=", "netG", "(", "inputs", ",", "c_g", ")", "\n", "x_fake_k", "=", "netG", "(", "inputs", ",", "c_k", ")", "\n", "\n", "x_fake_g", "+=", "0.05", "*", "noise2", "\n", "x_fake_k", "+=", "0.05", "*", "noise2", "\n", "\n", "\n", "(", "out_g", ",", "_", ")", "=", "netD", "(", "x_fake_g", ".", "detach", "(", ")", ",", "g", ")", ";", "out_g", "=", "torch", ".", "mean", "(", "out_g", ",", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "(", "out_k", ",", "_", ")", "=", "netD", "(", "x_fake_k", ".", "detach", "(", ")", ",", "k", ")", ";", "out_k", "=", "torch", ".", "mean", "(", "out_k", ",", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "\n", "d_loss_fake", "=", "(", "torch", ".", "mean", "(", "out_g", ")", "*", "part_g", "+", "torch", ".", "mean", "(", "out_k", ")", "*", "part_k", ")", "\n", "\n", "# Compute loss for gradient penalty.", "\n", "alpha", "=", "torch", ".", "rand", "(", "x_real", ".", "size", "(", "0", ")", ",", "1", ",", "1", ",", "1", ")", ".", "half", "(", ")", ".", "to", "(", "device", ")", "\n", "x_hat_k", "=", "alpha", "*", "x_real", ".", "data", "+", "(", "1", "-", "alpha", ")", "*", "(", "x_fake_k", ".", "data", ".", "half", "(", ")", ".", "requires_grad_", "(", "True", ")", ")", "\n", "x_hat_g", "=", "alpha", "*", "x_real", ".", "data", "+", "(", "1", "-", "alpha", ")", "*", "(", "x_fake_g", ".", "data", ".", "half", "(", ")", ".", "requires_grad_", "(", "True", ")", ")", "\n", "x_hat_k", "=", "Variable", "(", "x_hat_k", ",", "requires_grad", "=", "True", ")", ";", "x_hat_g", "=", "Variable", "(", "x_hat_g", ",", "requires_grad", "=", "True", ")", "\n", "(", "out_k", ",", "_", ")", "=", "netD", "(", "x_hat_k", ",", "k", ")", ";", "(", "out_g", ",", "_", ")", "=", "netD", "(", "x_hat_g", ",", "g", ")", "\n", "\n", "d_loss_gp", "=", "gradient_penalty", "(", "out_k", ".", "half", "(", ")", ",", "x_hat_k", ")", "+", "gradient_penalty", "(", "out_g", ".", "half", "(", ")", ",", "x_hat_g", ")", "\n", "\n", "\n", "# Backward step and optimize.", "\n", "d_loss", "=", "lambda_real", "*", "d_loss_real", "+", "lambda_fake", "*", "d_loss_fake", "+", "lambda_gp", "*", "d_loss_gp", "+", "lambda_cls_d", "*", "d_loss_cls", "\n", "g_optimizer", ".", "zero_grad", "(", ")", "\n", "d_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "\n", "with", "amp", ".", "scale_loss", "(", "d_loss", ",", "d_optimizer", ")", "as", "scaled_loss_d", ":", "\n", "               ", "scaled_loss_d", ".", "backward", "(", ")", "\n", "\n", "", "ave_grads", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "netD", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "(", "p", ".", "requires_grad", ")", "and", "(", "\"bias\"", "not", "in", "n", ")", "and", "p", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "ave_grads", ".", "append", "(", "p", ".", "grad", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", "\n", "", "", "gradd", "=", "sum", "(", "ave_grads", ")", "\n", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "netD", ".", "parameters", "(", ")", ",", "10", ")", "#gradient clipping", "\n", "d_optimizer", ".", "step", "(", ")", "\n", "\n", "# Logging.", "\n", "loss", "=", "{", "}", "\n", "loss", "[", "'D/loss_real'", "]", "=", "d_loss_real", ".", "item", "(", ")", ";", "sum_loss_real", "+=", "d_loss_real", ".", "item", "(", ")", "\n", "loss", "[", "'D/loss_fake'", "]", "=", "d_loss_fake", ".", "item", "(", ")", ";", "sum_loss_fake", "+=", "d_loss_fake", ".", "item", "(", ")", "\n", "loss", "[", "'D/loss_fake'", "]", "=", "d_loss_fake", ".", "item", "(", ")", ";", "\n", "sum_loss_cls", "+=", "d_loss_cls", ".", "item", "(", ")", "\n", "loss", "[", "'D/loss_gp'", "]", "=", "d_loss_gp", ".", "item", "(", ")", ";", "sum_loss_gp", "+=", "d_loss_gp", ".", "item", "(", ")", "\n", "running_loss", "+=", "d_loss", ".", "item", "(", ")", "\n", "\n", "#Plot loss", "\n", "if", "(", "i", "+", "1", ")", "%", "5", "==", "0", ":", "\n", "                ", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "num_it", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "running_loss", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "win", "=", "lossd_window", ",", "name", "=", "'total'", ",", "\n", "update", "=", "'append'", ")", "\n", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "num_it", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "sum_loss_real", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "win", "=", "lossd_window", ",", "name", "=", "'loss_real'", ",", "\n", "update", "=", "'append'", ")", "\n", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "num_it", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "sum_loss_fake", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "win", "=", "lossd_window", ",", "name", "=", "'loss_fake'", ",", "\n", "update", "=", "'append'", ")", "\n", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "num_it", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "sum_loss_cls", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "\n", "win", "=", "lossd_window", ",", "name", "=", "'loss_cls'", ",", "\n", "update", "=", "'append'", ")", "\n", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "num_it", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "sum_loss_gp", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "win", "=", "lossd_window", ",", "name", "=", "'loss_gp'", ",", "\n", "update", "=", "'append'", ")", "\n", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "num_it", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "gradd", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "\n", "win", "=", "grad_window", ",", "name", "=", "'grad_d'", ",", "update", "=", "'append'", ")", "\n", "\n", "running_loss", "=", "0", ";", "sum_loss_real", "=", "0", ";", "sum_loss_fake", "=", "0", ";", "sum_loss_gp", "=", "0", ";", "sum_loss_cls", "=", "0", "\n", "\n", "# =================================================================================== #", "\n", "#                               3. Train the generator                                #", "\n", "# =================================================================================== #", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "%", "n_critic", "==", "0", ":", "\n", "\n", "                ", "_", ",", "predicted", "=", "torch", ".", "max", "(", "klasse", ".", "data", ",", "1", ")", ";", "\n", "total", "+=", "1", "*", "batchsize", "# p+=predicted", "\n", "correct", "+=", "(", "predicted", "==", "label_org", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "accuracy", "=", "100", "*", "correct", "/", "total", ";", "\n", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "# classification loss", "\n", "x_fake_g", "=", "netG", "(", "inputs", ",", "c_g", ")", "+", "0.05", "*", "noise2", "\n", "x_fake_k", "=", "netG", "(", "inputs", ",", "c_k", ")", "+", "0.05", "*", "noise2", "\n", "(", "out_g", ",", "klasse_g", ")", "=", "netD", "(", "x_fake_g", ",", "g", ")", ";", "out_g", "=", "torch", ".", "mean", "(", "out_g", ",", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "(", "out_k", ",", "klasse_k", ")", "=", "netD", "(", "x_fake_k", ",", "k", ")", ";", "out_k", "=", "torch", ".", "mean", "(", "out_k", ",", "dim", "=", "(", "2", ",", "3", ")", ")", "\n", "g_loss_cls_k", "=", "classification_loss", "(", "logit", "=", "klasse_k", ",", "target", "=", "label_k", ")", "\n", "g_loss_cls_g", "=", "classification_loss", "(", "logit", "=", "klasse_g", ",", "target", "=", "label_g", ")", "\n", "g_loss_cls", "=", "g_loss_cls_g", "+", "g_loss_cls_k", "\n", "\n", "#adversarial loss", "\n", "g_loss_fake", "=", "(", "-", "torch", ".", "mean", "(", "out_g", ")", "*", "1", "-", "torch", ".", "mean", "(", "out_k", ")", "*", "1", ")", "\n", "\n", "#identity loss and reconstruction loss", "\n", "if", "v_krank", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "                 ", "t1_k", "=", "(", "inputs", "[", "v_krank", "]", ")", "\n", "t2_k", "=", "(", "x_fake_k", "[", "v_krank", "]", ")", "\n", "loss_id_k", "=", "criterion", "(", "t1_k", ",", "t2_k", ")", "*", "1", "\n", "\n", "x_reconst_k", "=", "netG", "(", "x_fake_g", "[", "v_krank", "]", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", ",", "c_k", "[", ":", "len", "(", "v_krank", ")", "]", ")", "+", "0.05", "*", "noise2", "[", "v_krank", "]", "# diseased- healthy- diseased", "\n", "loss_rec_k", "=", "criterion", "(", "inputs", "[", "v_krank", "]", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", ",", "x_reconst_k", ")", "*", "1", "\n", "\n", "", "else", ":", "\n", "                    ", "loss_id_k", "=", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "loss_rec_k", "=", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "", "if", "v_gesund", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "                    ", "t1_g", "=", "(", "inputs", "[", "v_gesund", "]", ")", "\n", "t2_g", "=", "(", "x_fake_g", "[", "v_gesund", "]", ")", "\n", "loss_id_g", "=", "criterion", "(", "t1_g", ",", "t2_g", ")", "*", "1", "\n", "\n", "x_reconst_g", "=", "netG", "(", "x_fake_k", "[", "v_gesund", "]", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", ",", "c_g", "[", ":", "len", "(", "v_gesund", ")", "]", ")", "+", "0.05", "*", "noise2", "[", "v_gesund", "]", "# healthy - diseased - healthy", "\n", "loss_rec_g", "=", "criterion", "(", "inputs", "[", "v_gesund", "]", "[", ":", ",", "0", ",", ":", ",", ":", ",", ":", "]", ",", "x_reconst_g", ")", "*", "1", "\n", "", "else", ":", "\n", "                    ", "loss_id_g", "=", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "loss_rec_g", "=", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "", "g_loss_id", "=", "loss_id_k", "+", "loss_id_g", "\n", "g_loss_rec", "=", "loss_rec_g", "+", "loss_rec_k", "\n", "\n", "\n", "# Backward and optimize.", "\n", "\n", "g_loss", "=", "lambda_fake_g", "*", "g_loss_fake", "+", "lambda_rec", "*", "g_loss_rec", "+", "lambda_id", "*", "g_loss_id", "+", "lambda_cls_g", "*", "g_loss_cls", "\n", "\n", "g_optimizer", ".", "zero_grad", "(", ")", "\n", "d_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "\n", "with", "amp", ".", "scale_loss", "(", "g_loss", ",", "g_optimizer", ")", "as", "scaled_loss_g", ":", "\n", "                    ", "scaled_loss_g", ".", "backward", "(", ")", "\n", "", "for", "n", ",", "p", "in", "netG", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "(", "p", ".", "requires_grad", ")", "and", "(", "\"bias\"", "not", "in", "n", ")", "and", "p", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "ave_grads", ".", "append", "(", "p", ".", "grad", ".", "abs", "(", ")", ".", "mean", "(", ")", ")", "\n", "", "", "gradg", "=", "sum", "(", "ave_grads", ")", "\n", "print", "(", "'gradd'", ",", "gradd", ",", "'gradg'", ",", "gradg", ")", "\n", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "netG", ".", "parameters", "(", ")", ",", "10", ")", "\n", "g_optimizer", ".", "step", "(", ")", "\n", "print", "(", "'memory in MB'", ",", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "1000000", ")", "\n", "\n", "# Logging.", "\n", "running_loss_g", "+=", "g_loss", ".", "item", "(", ")", "\n", "loss", "[", "'G/loss_fake'", "]", "=", "g_loss_fake", ".", "item", "(", ")", ";", "sum_g_fake", "+=", "g_loss_fake", ".", "item", "(", ")", "\n", "loss", "[", "'G/loss_rec'", "]", "=", "g_loss_rec", ".", "item", "(", ")", ";", "sum_g_rec", "+=", "g_loss_rec", ".", "item", "(", ")", "\n", "loss", "[", "'G/loss_cls'", "]", "=", "g_loss_cls", ".", "item", "(", ")", ";", "\n", "sum_g_cls", "+=", "g_loss_cls", ".", "item", "(", ")", "\n", "\n", "\n", "loss", "[", "'G/loss_id'", "]", "=", "g_loss_id", ";", "sum_g_id", "+=", "g_loss_id", ".", "item", "(", ")", "\n", "\n", "#plot loss curves", "\n", "if", "(", "i", "+", "1", ")", "%", "5", "==", "0", ":", "\n", "                    ", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "num_it", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "running_loss_g", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "\n", "win", "=", "lossg_window", ",", "name", "=", "'total'", ",", "update", "=", "'append'", ")", "\n", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "num_it", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "sum_g_fake", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "\n", "win", "=", "lossg_window", ",", "name", "=", "'loss_fake'", ",", "update", "=", "'append'", ")", "\n", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "num_it", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "sum_g_rec", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "\n", "win", "=", "lossg_window", ",", "name", "=", "'loss_reconstruction'", ",", "update", "=", "'append'", ")", "\n", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "num_it", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "sum_g_id", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "\n", "win", "=", "lossg_window", ",", "name", "=", "'loss_id'", ",", "update", "=", "'append'", ")", "\n", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "num_it", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "sum_g_cls", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "\n", "win", "=", "lossg_window", ",", "name", "=", "'loss_cls'", ",", "update", "=", "'append'", ")", "\n", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "num_it", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "gradg", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "\n", "win", "=", "grad_window", ",", "name", "=", "'grad_g'", ",", "update", "=", "'append'", ")", "\n", "\n", "image_window", "=", "viz", ".", "image", "(", "visualize", "(", "x_fake_k", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ",", "win", "=", "image_window", ",", "opts", "=", "dict", "(", "caption", "=", "'generated_krank'", ")", ")", "\n", "image_window4", "=", "viz", ".", "image", "(", "visualize", "(", "x_fake_g", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ",", "win", "=", "image_window4", ",", "opts", "=", "dict", "(", "caption", "=", "'generated_gesund'", ")", ")", "\n", "image_window2", "=", "viz", ".", "image", "(", "visualize", "(", "x_real", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ",", "win", "=", "image_window2", ",", "opts", "=", "dict", "(", "caption", "=", "\"original\"", ")", ")", "\n", "if", "v_krank", ".", "nelement", "(", ")", "!=", "0", ":", "\n", "                      ", "image_window3", "=", "viz", ".", "image", "(", "visualize", "(", "x_reconst_k", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ",", "win", "=", "image_window3", ",", "opts", "=", "dict", "(", "caption", "=", "\"reconstructed krank\"", ")", ")", "\n", "", "diff", "=", "inputs", "-", "x_fake_g", "\n", "image_window5", "=", "viz", ".", "heatmap", "(", "(", "diff", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ",", "win", "=", "image_window5", ",", "opts", "=", "dict", "(", "caption", "=", "\"difference\"", ")", ")", "\n", "\n", "sum_g_fake", "=", "0", ";", "sum_g_rec", "=", "0", ";", "sum_g_id", "=", "0", ";", "running_loss_g", "=", "0", ";", "sum_g_cls", "=", "0", "\n", "\n", "\n", "#=================================================================================== #", "\n", "#                                 4. Miscellaneous                                    #", "\n", "# =================================================================================== #", "\n", "\n", "", "", "", "if", "(", "epoch", "+", "1", ")", "%", "1", "==", "0", ":", "\n", "             ", "if", "self", ".", "dataset", "==", "'Synthetic'", ":", "\n", "                 ", "torch", ".", "save", "(", "netG", ".", "state_dict", "(", ")", ",", "\"./save_nets/netG_synthetic.pt\"", ")", "\n", "torch", ".", "save", "(", "netD", ".", "state_dict", "(", ")", ",", "\"./save_nets/netD_synthetic.pt\"", ")", "\n", "", "else", ":", "\n", "                 ", "torch", ".", "save", "(", "netG", ".", "state_dict", "(", ")", ",", "\"./save_nets/netG_chexpert.pt\"", ")", "\n", "torch", ".", "save", "(", "netD", ".", "state_dict", "(", ")", ",", "\"./save_nets/netD_chexpert.pt\"", ")", "\n", "\n", "", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "epoch", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "accuracy", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "win", "=", "val_window", ",", "\n", "name", "=", "'accuracy train'", ",", "update", "=", "'append'", ")", "\n", "\n", "correct", "=", "0", ";", "correct2", "=", "0", "\n", "total", "=", "0", ";", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                 ", "netD", "=", "netD", ".", "eval", "(", ")", "\n", "long_pred", "=", "torch", ".", "zeros", "(", "0", ")", ".", "long", "(", ")", "\n", "long_cls", "=", "torch", ".", "zeros", "(", "0", ")", ".", "long", "(", ")", "\n", "for", "i", ",", "(", "X2", ",", "label_org", ")", "in", "enumerate", "(", "validate_loader", ")", ":", "\n", "                     ", "if", "self", ".", "dataset", "==", "'Synthetic'", ":", "\n", "                       ", "x_real", "=", "torch", ".", "tensor", "(", "X2", "[", ":", ",", ":", "1", ",", ":", ",", ":", "]", ")", ".", "half", "(", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "                       ", "x_real", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "X2", ")", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "x_real", "=", "torch", ".", "tensor", "(", "x_real", ")", ".", "half", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "noise", "=", "torch", ".", "rand", "(", "x_real", ".", "shape", ")", ".", "to", "(", "device", ")", "\n", "x_real", "=", "x_real", "+", "0.05", "*", "noise", "\n", "rand_idx", "=", "torch", ".", "randperm", "(", "label_org", ".", "size", "(", "0", ")", ")", "\n", "label_trg", "=", "label_org", "[", "rand_idx", "]", "\n", "c_trg", "=", "label2onehot", "(", "label_trg", ",", "c_dim", ")", ".", "half", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "x_fake", "=", "netG", "(", "x_real", ",", "c_trg", ")", "+", "0.05", "*", "noise", "\n", "(", "_", ",", "out_cls", ")", "=", "netD", "(", "x_real", ",", "g", ")", "\n", "(", "_", ",", "out_cls2", ")", "=", "netD", "(", "x_fake", ",", "g", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "out_cls", ".", "data", ",", "1", ")", ";", "_", ",", "predicted2", "=", "torch", ".", "max", "(", "out_cls2", ".", "data", ",", "1", ")", "\n", "total", "+=", "1", "# p+=predicted", "\n", "correct", "+=", "(", "predicted", ".", "cpu", "(", ")", "==", "label_org", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "correct2", "+=", "(", "predicted2", ".", "cpu", "(", ")", "==", "label_trg", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "accuracy", "=", "100", "*", "correct", "/", "total", ";", "accuracy2", "=", "100", "*", "correct2", "/", "total", "\n", "long_pred", "=", "torch", ".", "cat", "(", "(", "long_pred", ",", "predicted", ".", "cpu", "(", ")", ")", ",", "dim", "=", "0", ")", "\n", "long_cls", "=", "torch", ".", "cat", "(", "(", "long_cls", ",", "label_org", ")", ",", "dim", "=", "0", ")", "\n", "\n", "\n", "image_window7", "=", "viz", ".", "image", "(", "visualize", "(", "x_fake", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ",", "win", "=", "image_window7", ",", "opts", "=", "dict", "(", "caption", "=", "'validate'", ")", ")", "\n", "", "print", "(", "'Accuracy of the network on the test images: %d %%'", "%", "(", "accuracy", ")", ",", "'Accuracy of the network on the fake images: %d %%'", "%", "(", "accuracy2", ")", ")", "\n", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "epoch", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "accuracy", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "win", "=", "val_window", ",", "\n", "name", "=", "'accuracy'", ",", "update", "=", "'append'", ")", "\n", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "epoch", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "accuracy2", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "win", "=", "val_window", ",", "\n", "name", "=", "'accuracy on fake images'", ",", "update", "=", "'append'", ")", "\n", "(", "kappa", ",", "upper", ",", "lower", ")", "=", "kappa_score", "(", "long_pred", ",", "long_cls", ")", "\n", "print", "(", "'kappa'", ",", "kappa", ")", "\n", "viz", ".", "line", "(", "X", "=", "torch", ".", "ones", "(", "(", "1", ",", "1", ")", ")", ".", "cpu", "(", ")", "*", "epoch", ",", "Y", "=", "torch", ".", "Tensor", "(", "[", "kappa", "*", "100", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "cpu", "(", ")", ",", "win", "=", "val_window", ",", "\n", "name", "=", "'kappa score'", ",", "update", "=", "'append'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.Evaluation.Evaluation_Synthetic_Dataset.Solver.__init__": [[44, 48], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.Evaluation.Evaluation_Chexpert.Solver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_path", ",", "choose_net", ")", ":", "\n", "        ", "super", "(", "Solver", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_path", "=", "dataset_path", "\n", "self", ".", "choose_net", "=", "choose_net", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.Evaluation.Evaluation_Synthetic_Dataset.Solver.test": [[50, 231], ["model.generator_discrminator.Generator().to", "model.generator_discrminator.Discriminator().to", "os.path.join", "print", "os.getcwd", "torchvision.datasets.DatasetFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "amp.initialize", "amp.initialize", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.MSELoss", "torch.MSELoss", "print", "open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "netG.train.train.parameters", "netD.eval.eval.parameters", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "netD.eval.eval.eval", "netG.train.train.train", "enumerate", "model.generator_discrminator.Generator", "model.generator_discrminator.Discriminator", "netG.train.train.load_state_dict", "netD.eval.eval.load_state_dict", "print", "skimage.filters.threshold_otsu", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "netD.eval.eval.", "torch.max", "torch.max", "torch.max", "torch.max", "utils.Functions.create_labels", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "numpy.array", "torch.rand().to", "torch.rand().to", "torch.rand().to", "torch.rand().to", "x_fake_list.append", "torch.MSELoss.", "diff.var", "skimage.filters.threshold_otsu", "print", "torch.MSELoss.", "utils.tools.eval_binary_classifier", "pytorch_msssim.ssim", "sklearn.metrics.roc_auc_score", "print", "matplotlib.figure", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.subplot.title.set_text", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.subplot.title.set_text", "matplotlib.subplot.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.subplot.axis", "matplotlib.subplot.title.set_text", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.subplot.title.set_text", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.subplot.title.set_text", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.subplot.title.set_text", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.subplot.title.set_text", "str", "str", "str", "str", "str", "str", "str", "str", "os.path.join", "os.path.join", "abs", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "netG.train.train.", "utils.tools.normalize().cpu", "utils.tools.normalize().cpu", "numpy.double", "numpy.double", "utils.tools.normalize", "utils.tools.normalize", "utils.tools.normalize().cpu", "utils.tools.normalize().cpu", "numpy.array", "numpy.double", "numpy.double", "numpy.array", "utils.tools.visualize", "utils.tools.visualize", "numpy.array", "numpy.array", "utils.tools.normalize().cpu", "utils.tools.normalize().cpu", "utils.tools.normalize().cpu", "matplotlib.suptitle", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "abs", "abs", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "torch.tensor().view", "utils.tools.normalize", "utils.tools.normalize", "abs", "abs", "utils.tools.normalize", "utils.tools.normalize", "abs", "abs", "utils.tools.normalize", "utils.tools.normalize", "utils.tools.normalize", "utils.tools.normalize", "utils.tools.normalize", "predicted.cpu", "numpy.array", "numpy.array", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "utils.tools.visualize", "abs"], "methods", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.model.DeScarGAN.Solver.train", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.create_labels", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.eval_binary_classifier", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.imshow", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.imshow", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.imshow", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.imshow", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.imshow", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.imshow", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.imshow", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.visualize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.visualize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.visualize"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "netG", "=", "Generator", "(", ")", ".", "to", "(", "device", ")", "\n", "netD", "=", "Discriminator", "(", ")", ".", "to", "(", "device", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_path", ",", "'test'", ")", "\n", "print", "(", "path", ",", "'PATH'", ")", "\n", "os", ".", "getcwd", "(", ")", "\n", "\n", "path2", "=", "self", ".", "choose_net", "\n", "\n", "beta1", "=", "0.5", "\n", "beta2", "=", "0.999", "\n", "\n", "Testset", "=", "torchvision", ".", "datasets", ".", "DatasetFolder", "(", "\n", "root", "=", "path", ",", "\n", "loader", "=", "npy_loader", ",", "\n", "extensions", "=", "(", "'.npy'", ",", ")", "\n", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "Testset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "\n", "g", "=", "0", "\n", "\n", "g_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "netG", ".", "parameters", "(", ")", ",", "0.0001", ",", "[", "beta1", ",", "beta2", "]", ")", "\n", "d_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "netD", ".", "parameters", "(", ")", ",", "0.0001", ",", "[", "beta1", ",", "beta2", "]", ")", "\n", "netG", ",", "g_optimizer", "=", "amp", ".", "initialize", "(", "netG", ",", "g_optimizer", ",", "opt_level", "=", "'O1'", ")", "\n", "netD", ",", "d_optimizer", "=", "amp", ".", "initialize", "(", "netD", ",", "d_optimizer", ",", "opt_level", "=", "'O1'", ")", "\n", "g_optimizer", ".", "zero_grad", "(", ")", "\n", "d_optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "netG", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netG", ",", "device_ids", "=", "[", "id", "]", ",", "output_device", "=", "id", ")", "\n", "netD", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netD", ",", "device_ids", "=", "[", "id", "]", ",", "output_device", "=", "id", ")", "\n", "\n", "\n", "try_loading_file", "=", "True", "\n", "if", "try_loading_file", ":", "\n", "\n", "            ", "try", ":", "\n", "\n", "                ", "netG", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path2", ",", "'netG_synthetic.pt'", ")", ",", "map_location", "=", "{", "'cuda:0'", ":", "'cpu'", "}", ")", ")", "# does NOT load optimizer state etc.", "\n", "netD", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path2", ",", "'netD_synthetic.pt'", ")", ",", "map_location", "=", "{", "'cuda:0'", ":", "'cpu'", "}", ")", ")", "\n", "\n", "print", "(", "\"loaded model from file\"", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"loading model from file failed; created new model\"", ")", "\n", "\n", "", "", "c_dim", "=", "2", "\n", "#", "\n", "\n", "\n", "\n", "# =================================================================================== #", "\n", "#                                 5. Testing                                          #", "\n", "# =================================================================================== #", "\n", "\n", "\n", "\"\"\"Translate images using StarGAN trained on a single dataset.\"\"\"", "\n", "\n", "loss_metric", "=", "nn", ".", "MSELoss", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "             ", "sum_dice", "=", "0", ";", "\n", "count", "=", "0", "\n", "correct", "=", "0", "\n", "total", "=", "0", ";", "total_auc", "=", "0", "\n", "netD", "=", "netD", ".", "eval", "(", ")", ";", "netG", "=", "netG", ".", "train", "(", ")", "\n", "total_rec", "=", "0", ";", "total_diff", "=", "0", ";", "total_var", "=", "0", ";", "total_var2", "=", "0", ";", "sum_ssim", "=", "0", ";", "threshtot", "=", "0", "\n", "count_krank", "=", "0", ";", "count_gesund", "=", "0", "\n", "\n", "for", "i", ",", "(", "X3", ",", "c_org", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "\n", "                 ", "GT", "=", "-", "X3", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "thresh", "=", "threshold_otsu", "(", "np", ".", "array", "(", "abs", "(", "GT", "[", "0", ",", ":", ",", ":", "]", ")", ")", ")", "\n", "threshtot", "+=", "thresh", "\n", "x_real", "=", "torch", ".", "tensor", "(", "X3", "[", ":", ",", ":", "1", ",", ":", ",", ":", "]", ")", ".", "to", "(", "device", ")", "\n", "noise", "=", "torch", ".", "rand", "(", "x_real", ".", "shape", ")", ".", "to", "(", "device", ")", "*", "0", "\n", "x_real", "=", "(", "x_real", "+", "0.05", "*", "noise", ")", ".", "half", "(", ")", "\n", "(", "_", ",", "out_cls", ")", "=", "netD", "(", "x_real", ",", "g", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "out_cls", ".", "data", ",", "1", ")", "\n", "correct", "+=", "(", "predicted", ".", "cpu", "(", ")", "==", "c_org", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "total", "+=", "1", "\n", "avg_thresh", "=", "0.44195", "\n", "\n", "c_trg_list", "=", "create_labels", "(", "c_org", ",", "c_dim", ")", "\n", "\n", "#         # Translate images.", "\n", "x_fake_list", "=", "[", "x_real", "]", "\n", "for", "c_trg", "in", "c_trg_list", ":", "\n", "                     ", "x_fake_list", ".", "append", "(", "(", "netG", "(", "x_real", ",", "c_trg", ")", ")", ")", "\n", "#", "\n", "\n", "", "if", "c_org", "==", "0", ":", "\n", "\n", "                     ", "diff", "=", "normalize", "(", "x_fake_list", "[", "0", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ".", "cpu", "(", ")", "-", "normalize", "(", "x_fake_list", "[", "1", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ".", "cpu", "(", ")", "# check whether 2 ist krank (ich glaub schon). Dann nimm immer die Differenz zwischen krank und Original", "\n", "\n", "thresholded_images", "=", "np", ".", "double", "(", "abs", "(", "diff", ")", ">", "avg_thresh", ")", "*", "1", "\n", "GTthresh", "=", "np", ".", "double", "(", "abs", "(", "GT", ")", ">", "avg_thresh", ")", "*", "1", "\n", "reconstruction", "=", "loss_metric", "(", "normalize", "(", "x_fake_list", "[", "1", "]", ")", ",", "normalize", "(", "x_fake_list", "[", "0", "]", ")", ")", "\n", "varianz", "=", "diff", ".", "var", "(", ")", "\n", "total_rec", "+=", "reconstruction", "\n", "total_var", "+=", "varianz", "\n", "count_gesund", "+=", "1", "\n", "\n", "", "else", ":", "\n", "                     ", "diff", "=", "normalize", "(", "x_fake_list", "[", "0", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ".", "cpu", "(", ")", "-", "normalize", "(", "x_fake_list", "[", "1", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ".", "cpu", "(", ")", "# check whether 2 ist krank (ich glaub schon). Dann nimm immer die Differenz zwischen krank und Original", "\n", "\n", "thresh", "=", "threshold_otsu", "(", "np", ".", "array", "(", "abs", "(", "diff", ")", ")", ")", "\n", "print", "(", "i", ",", "thresh", ",", "2", "*", "abs", "(", "thresh", ")", ")", "\n", "thresholded_images", "=", "np", ".", "double", "(", "abs", "(", "diff", ")", ">", "avg_thresh", ")", "*", "1", "#1 * abs(thresh)) * 1", "\n", "GTthresh", "=", "np", ".", "double", "(", "abs", "(", "GT", ")", ">", "avg_thresh", ")", "*", "1", "\n", "region", "=", "loss_metric", "(", "diff", ",", "GT", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "total_diff", "+=", "region", "\n", "varianz2", "=", "(", "normalize", "(", "np", ".", "array", "(", "GT", "[", "0", ",", ":", ",", ":", "]", ")", ")", "-", "normalize", "(", "np", ".", "array", "(", "diff", ")", ")", ")", ".", "var", "(", ")", "\n", "total_var2", "+=", "varianz2", "\n", "\n", "count_krank", "+=", "1", "\n", "(", "output_DSC", ",", "avg", ")", "=", "eval_binary_classifier", "(", "np", ".", "array", "(", "GTthresh", "[", "0", ",", ":", ",", ":", "]", ")", ",", "thresholded_images", ")", "\n", "sum_dice", "+=", "output_DSC", "[", "'DSC'", "]", ";", "\n", "count", "+=", "1", "\n", "\n", "ssim_val", "=", "ssim", "(", "visualize", "(", "diff", "[", "None", ",", "None", ",", "...", "]", ")", ",", "visualize", "(", "GT", "[", "None", ",", "...", "]", ")", ",", "data_range", "=", "1", ",", "size_average", "=", "False", ")", "\n", "sum_ssim", "+=", "ssim_val", "\n", "\n", "\n", "pixel_wise_cls", "=", "np", ".", "array", "(", "torch", ".", "tensor", "(", "visualize", "(", "abs", "(", "diff", ")", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", ")", "[", "0", ",", ":", "]", "\n", "pixel_wise_gt", "=", "np", ".", "array", "(", "torch", ".", "tensor", "(", "GTthresh", ")", ".", "view", "(", "1", ",", "-", "1", ")", ")", "[", "0", ",", ":", "]", "\n", "\n", "auc", "=", "roc_auc_score", "(", "pixel_wise_gt", ",", "pixel_wise_cls", ")", "\n", "print", "(", "'auc'", ",", "i", ",", "auc", ")", "\n", "total_auc", "+=", "auc", "\n", "#", "\n", "", "if", "i", "%", "10", "==", "0", ":", "\n", "\n", "                     ", "plt", ".", "figure", "(", "i", ")", "#plot results", "\n", "ax", "=", "plt", ".", "subplot", "(", "2", ",", "4", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "(", "normalize", "(", "(", "x_fake_list", "[", "0", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ")", ")", ".", "cpu", "(", ")", ")", "\n", "ax", ".", "title", ".", "set_text", "(", "'original'", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "2", ",", "4", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "normalize", "(", "x_fake_list", "[", "1", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ".", "cpu", "(", ")", ")", "\n", "ax", ".", "title", ".", "set_text", "(", "'label 0'", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "2", ",", "4", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "normalize", "(", "x_fake_list", "[", "2", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ".", "cpu", "(", ")", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "ax", ".", "title", ".", "set_text", "(", "'label 1'", ")", "\n", "\n", "ax", "=", "plt", ".", "subplot", "(", "2", ",", "4", ",", "5", ")", "\n", "plt", ".", "imshow", "(", "thresholded_images", ")", "\n", "ax", ".", "title", ".", "set_text", "(", "'differenz thresholded'", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "2", ",", "4", ",", "6", ")", "\n", "plt", ".", "imshow", "(", "GT", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "#", "\n", "ax", ".", "title", ".", "set_text", "(", "'Ground Truth'", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "2", ",", "4", ",", "4", ")", "\n", "plt", ".", "imshow", "(", "diff", ")", "\n", "ax", ".", "title", ".", "set_text", "(", "'difference'", ")", "\n", "if", "c_org", "!=", "0", ":", "\n", "                        ", "plt", ".", "suptitle", "(", "auc", ")", "\n", "", "ax", "=", "plt", ".", "subplot", "(", "2", ",", "4", ",", "8", ")", "\n", "plt", ".", "imshow", "(", "GTthresh", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "ax", ".", "title", ".", "set_text", "(", "'GTthresh'", ")", "\n", "\n", "", "", "", "accuracy", "=", "100", "*", "correct", "/", "total", "\n", "avg_diff", "=", "total_diff", "/", "count_krank", "\n", "avg_auc", "=", "total_auc", "/", "count_krank", "\n", "avg_rec", "=", "total_rec", "/", "count_gesund", "\n", "avg_var", "=", "total_var", "/", "count_gesund", "\n", "avg_var2", "=", "total_var2", "/", "count_krank", "\n", "avg_ssim", "=", "sum_ssim", "/", "count_krank", "\n", "avg_dice", "=", "sum_dice", "/", "count", "\n", "print", "(", "'average mse reconstruction error'", ",", "avg_rec", ",", "'average mse in segmentation'", ",", "avg_diff", ",", "'average Dice'", ",", "avg_dice", ",", "'classification accuracy'", ",", "accuracy", ",", "'AUROC'", ",", "avg_auc", ",", "'SSIM'", ",", "avg_ssim", ",", "'varianz gesund'", ",", "avg_var", ",", "'varianz krak'", ",", "avg_var2", ")", "\n", "f", "=", "open", "(", "'./descargan.txt'", ",", "'w'", ")", "\n", "f", ".", "write", "(", "'auroc '", "+", "str", "(", "auc", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'MSE(a_h, r_h) '", "+", "str", "(", "avg_rec", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'varianz reconstruction '", "+", "str", "(", "avg_var", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'varianz difference '", "+", "str", "(", "avg_var2", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'Dice '", "+", "str", "(", "avg_dice", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'classification accuracy '", "+", "str", "(", "accuracy", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'MSE(gt, d) '", "+", "str", "(", "avg_diff", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'SSIM '", "+", "str", "(", "avg_ssim", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.Evaluation.Evaluation_Chexpert.Solver.__init__": [[43, 47], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.Evaluation.Evaluation_Chexpert.Solver.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_path", ",", "choose_net", ")", ":", "\n", "        ", "super", "(", "Solver", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_path", "=", "dataset_path", "\n", "self", ".", "choose_net", "=", "choose_net", "\n", "\n"]], "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.Evaluation.Evaluation_Chexpert.Solver.test": [[50, 199], ["os.path.join", "print", "model.generator_discrminator.Generator().to", "model.generator_discrminator.Discriminator().to", "numpy.array().sum", "numpy.array().sum", "print", "torchvision.datasets.DatasetFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "amp.initialize", "amp.initialize", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "netD.eval.eval.eval", "torch.MSELoss", "torch.MSELoss", "print", "open", "open.write", "open.write", "open.write", "open.write", "open.write", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "netD.eval.eval.parameters", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "sklearn.metrics.roc_auc_score", "utils.tools.kappa_score", "model.generator_discrminator.Generator", "model.generator_discrminator.Discriminator", "numpy.array", "numpy.array", "torch.nn.DataParallel.load_state_dict", "torch.nn.DataParallel.load_state_dict", "netD.eval.eval.load_state_dict", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.array().astype", "numpy.transpose", "torch.tensor().half().to", "torch.tensor().half().to", "torch.tensor().half().to", "torch.tensor().half().to", "utils.tools.normalize().to", "utils.Functions.create_labels", "print", "netD.eval.eval.", "print", "torch.max", "torch.max", "torch.max", "torch.max", "out_cls[].cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "str", "str", "str", "str", "str", "numpy.array().prod", "numpy.array().prod", "os.path.join", "os.path.join", "numpy.array", "x_fake_list.append", "torch.MSELoss.", "skimage.filters.threshold_otsu", "print", "diff.var", "skimage.filters.threshold_otsu", "numpy.double", "print", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "[].cpu", "[].cpu", "[].cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "matplotlib.figure", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.subplot.axis", "matplotlib.subplot.title.set_text", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.subplot.title.set_text", "matplotlib.subplot.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.subplot.axis", "matplotlib.subplot.title.set_text", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.subplot.title.set_text", "matplotlib.subplot.axis", "torch.nn.DataParallel.parameters", "torch.nn.DataParallel.parameters", "netD.eval.eval.parameters", "numpy.array", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "torch.tensor().half", "utils.tools.normalize", "predicted.cpu", "torch.nn.DataParallel.", "torch.nn.DataParallel.", "utils.tools.normalize().cpu", "utils.tools.normalize().cpu", "numpy.array", "utils.tools.normalize().cpu", "numpy.array", "utils.tools.normalize().cpu", "utils.tools.normalize().cpu", "utils.tools.normalize().cpu", "numpy.array", "numpy.array", "utils.tools.normalize().cpu", "abs", "abs", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "utils.tools.normalize", "utils.tools.normalize", "utils.tools.normalize", "abs", "utils.tools.normalize", "utils.tools.normalize", "utils.tools.normalize", "predicted.cpu", "utils.tools.normalize"], "methods", ["home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.kappa_score", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.Functions.create_labels", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.imshow", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.imshow", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.imshow", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.imshow", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize", "home.repos.pwc.inspect_result.JuliaWolleb_DeScarGAN.utils.tools.normalize"], ["", "def", "test", "(", "self", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataset_path", ",", "'test'", ")", "\n", "print", "(", "path", ",", "'PATH'", ")", "\n", "\n", "path2", "=", "self", ".", "choose_net", "\n", "\n", "netG", "=", "Generator", "(", ")", ".", "to", "(", "device", ")", "\n", "netD", "=", "Discriminator", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "p1", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "p", ".", "shape", ")", ".", "prod", "(", ")", "for", "p", "in", "netG", ".", "parameters", "(", ")", "]", ")", ".", "sum", "(", ")", "\n", "p2", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "p", ".", "shape", ")", ".", "prod", "(", ")", "for", "p", "in", "netD", ".", "parameters", "(", ")", "]", ")", ".", "sum", "(", ")", "\n", "print", "(", "p1", ",", "p2", ",", "p1", "/", "(", "256", "*", "256", ")", ")", "\n", "\n", "beta1", "=", "0.5", "\n", "beta2", "=", "0.999", "\n", "\n", "Testset", "=", "torchvision", ".", "datasets", ".", "DatasetFolder", "(", "\n", "root", "=", "path", ",", "\n", "loader", "=", "npy_loader", ",", "\n", "extensions", "=", "(", "'.npy'", ",", ")", "\n", ")", "\n", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset", "=", "Testset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ")", "\n", "\n", "\n", "\n", "\n", "g_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "netG", ".", "parameters", "(", ")", ",", "0.0001", ",", "[", "beta1", ",", "beta2", "]", ")", "\n", "d_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "netD", ".", "parameters", "(", ")", ",", "0.0001", ",", "[", "beta1", ",", "beta2", "]", ")", "\n", "netG", ",", "g_optimizer", "=", "amp", ".", "initialize", "(", "netG", ",", "g_optimizer", ",", "opt_level", "=", "'O1'", ")", "\n", "netD", ",", "d_optimizer", "=", "amp", ".", "initialize", "(", "netD", ",", "d_optimizer", ",", "opt_level", "=", "'O1'", ")", "\n", "\n", "netG", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netG", ",", "device_ids", "=", "[", "id", "]", ",", "output_device", "=", "id", ")", "\n", "netD", "=", "torch", ".", "nn", ".", "DataParallel", "(", "netD", ",", "device_ids", "=", "[", "id", "]", ",", "output_device", "=", "id", ")", "\n", "\n", "g", "=", "0", "\n", "\n", "try_loading_file", "=", "True", "\n", "if", "try_loading_file", ":", "\n", "            ", "try", ":", "\n", "                ", "netG", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path2", ",", "'netG_chexpert.pt'", ")", ",", "map_location", "=", "{", "'cuda:0'", ":", "'cpu'", "}", ")", ")", "#does NOT load optimizer state etc.", "\n", "netD", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "path2", ",", "'netD_chexpert.pt'", ")", ",", "map_location", "=", "{", "'cuda:0'", ":", "'cpu'", "}", ")", ")", "#does NOT load optimizer state etc.", "\n", "\n", "print", "(", "\"loaded model from file\"", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"loading model from file failed; created new model\"", ")", "\n", "\n", "", "", "c_dim", "=", "2", "\n", "# =================================================================================== #", "\n", "#                                 5. Testing                                          #", "\n", "# =================================================================================== #", "\n", "\n", "\n", "\n", "\"\"\"Translate images using StarGAN trained on a single dataset.\"\"\"", "\n", "netD", "=", "netD", ".", "eval", "(", ")", "\n", "total", "=", "0", ";", "correct", "=", "0", ";", "count_gesund", "=", "0", ";", "total_rec", "=", "0", ";", "total_var", "=", "0", ";", "\n", "loss_metric", "=", "nn", ".", "MSELoss", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "long_pred", "=", "torch", ".", "zeros", "(", "0", ")", ".", "long", "(", ")", "\n", "long_cls", "=", "torch", ".", "zeros", "(", "0", ")", ".", "long", "(", ")", "\n", "long_score", "=", "torch", ".", "zeros", "(", "0", ")", "\n", "for", "i", ",", "(", "X", ",", "label_org", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "              ", "if", "i", "<", "500", ":", "\n", "\n", "# Prepare input images and target domain labels.", "\n", "                ", "x_real", "=", "np", ".", "array", "(", "X", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "x_real", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "x_real", ")", ",", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "x_real", "=", "torch", ".", "tensor", "(", "x_real", ")", ".", "half", "(", ")", ".", "to", "(", "device", ")", "\n", "x_real", "=", "normalize", "(", "x_real", ")", ".", "to", "(", "device", ")", "\n", "\n", "c_trg_list", "=", "create_labels", "(", "label_org", ",", "c_dim", ")", "\n", "print", "(", "'xreal'", ",", "x_real", ".", "shape", ")", "\n", "(", "_", ",", "out_cls", ")", "=", "netD", "(", "x_real", ",", "0", ")", "\n", "print", "(", "'out_cls'", ",", "out_cls", ")", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "out_cls", ".", "data", ",", "1", ")", "\n", "y_score", "=", "out_cls", "[", ":", ",", "1", "]", ".", "cpu", "(", ")", "\n", "total", "+=", "1", "\n", "correct", "+=", "(", "predicted", ".", "cpu", "(", ")", "==", "label_org", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "long_pred", "=", "torch", ".", "cat", "(", "(", "long_pred", ",", "predicted", ".", "cpu", "(", ")", ")", ",", "dim", "=", "0", ")", "\n", "long_cls", "=", "torch", ".", "cat", "(", "(", "long_cls", ",", "label_org", ")", ",", "dim", "=", "0", ")", "\n", "long_score", "=", "torch", ".", "cat", "(", "(", "long_score", ",", "y_score", ")", ",", "dim", "=", "0", ")", "\n", "\n", "# Translate images.", "\n", "x_fake_list", "=", "[", "x_real", "]", "\n", "for", "c_trg", "in", "c_trg_list", ":", "\n", "                    ", "x_fake_list", ".", "append", "(", "(", "netG", "(", "x_real", ",", "c_trg", ")", ")", ")", "\n", "\n", "\n", "", "if", "label_org", "==", "0", ":", "\n", "                    ", "text", "=", "'original healthy'", "\n", "reconstruction", "=", "loss_metric", "(", "x_fake_list", "[", "1", "]", ",", "x_fake_list", "[", "0", "]", ")", "\n", "total_rec", "+=", "reconstruction", "\n", "count_gesund", "+=", "1", "\n", "diff", "=", "normalize", "(", "x_fake_list", "[", "1", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ".", "cpu", "(", ")", "-", "normalize", "(", "x_fake_list", "[", "0", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ".", "cpu", "(", ")", "\n", "thresh", "=", "threshold_otsu", "(", "np", ".", "array", "(", "diff", ")", ")", "\n", "print", "(", "i", ",", "thresh", ")", "\n", "varianz", "=", "diff", ".", "var", "(", ")", "\n", "total_var", "+=", "varianz", "\n", "", "else", ":", "\n", "                    ", "text", "=", "'original diseased'", "\n", "diff", "=", "-", "normalize", "(", "x_fake_list", "[", "1", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ".", "cpu", "(", ")", "+", "normalize", "(", "x_fake_list", "[", "0", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ".", "cpu", "(", ")", "\n", "thresh", "=", "threshold_otsu", "(", "np", ".", "array", "(", "abs", "(", "diff", ")", ")", ")", "\n", "thresholded_images", "=", "np", ".", "double", "(", "abs", "(", "diff", ")", ">", "1", "*", "abs", "(", "thresh", ")", ")", "\n", "print", "(", "i", ",", "thresh", ")", "\n", "\n", "\n", "", "if", "i", "%", "2", "==", "0", "and", "label_org", "==", "1", ":", "#plot output images", "\n", "                    ", "img", "=", "torch", ".", "zeros", "(", "7", ",", "256", ",", "256", ")", "\n", "img", "[", "0", ",", ":", ",", ":", "]", "=", "x_fake_list", "[", "0", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", "\n", "img", "[", "1", ",", ":", ",", ":", "]", "=", "x_fake_list", "[", "1", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", "\n", "img", "[", "2", ",", ":", ",", ":", "]", "=", "x_fake_list", "[", "2", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", "\n", "img", "[", "3", ",", ":", ",", ":", "]", "=", "diff", "\n", "img", "[", "4", ",", ":", ",", ":", "]", "=", "torch", ".", "tensor", "(", "thresholded_images", ")", "\n", "\n", "plt", ".", "figure", "(", "i", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "2", ",", "3", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "(", "normalize", "(", "(", "x_fake_list", "[", "0", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ")", ")", ".", "cpu", "(", ")", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "ax", ".", "title", ".", "set_text", "(", "text", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "2", ",", "3", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "normalize", "(", "x_fake_list", "[", "1", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ".", "cpu", "(", ")", ")", "\n", "ax", ".", "title", ".", "set_text", "(", "'generated healthy'", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "2", ",", "3", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "normalize", "(", "x_fake_list", "[", "2", "]", "[", "0", ",", "0", ",", ":", ",", ":", "]", ")", ".", "cpu", "(", ")", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "ax", ".", "title", ".", "set_text", "(", "'generated diseased'", ")", "\n", "\n", "ax", "=", "plt", ".", "subplot", "(", "2", ",", "3", ",", "4", ")", "\n", "plt", ".", "imshow", "(", "diff", ")", "\n", "ax", ".", "title", ".", "set_text", "(", "'difference'", ")", "\n", "ax", ".", "axis", "(", "'off'", ")", "\n", "\n", "", "", "", "accuracy", "=", "100", "*", "correct", "/", "total", "\n", "auc", "=", "roc_auc_score", "(", "long_cls", ",", "long_score", ")", "\n", "(", "kappa", ",", "upper", ",", "lower", ")", "=", "kappa_score", "(", "long_pred", ",", "long_cls", ")", "\n", "avg_rec", "=", "total_rec", "/", "count_gesund", "\n", "avg_var", "=", "total_var", "/", "count_gesund", "\n", "\n", "", "print", "(", "'AUROC'", ",", "auc", ",", "'accuracy'", ",", "accuracy", ",", "'kappa'", ",", "kappa", ",", "'mse reconstruction error'", ",", "avg_rec", ",", "'varianz gesund'", ",", "avg_var", ")", "\n", "f", "=", "open", "(", "'.descargan.txt'", ",", "'w'", ")", "\n", "f", ".", "write", "(", "'auroc '", "+", "str", "(", "auc", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'accuracy '", "+", "str", "(", "accuracy", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'MSE(a_h, r_h) '", "+", "str", "(", "avg_rec", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'kappa '", "+", "str", "(", "kappa", ")", "+", "'\\n'", ")", "\n", "f", ".", "write", "(", "'varianz reconstruction '", "+", "str", "(", "avg_var", ")", "+", "'\\n'", ")", "\n", "\n"]]}