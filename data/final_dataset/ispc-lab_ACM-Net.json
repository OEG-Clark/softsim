{"home.repos.pwc.inspect_result.ispc-lab_ACM-Net.None.main_thu.train": [[26, 102], ["model.train", "print", "tqdm.tqdm", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "print", "print", "print", "print", "print", "print", "vid_label_t.to.to", "input_feature.to.to", "model", "criterion", "optimizer.zero_grad", "torch.isnan", "loss.backward", "optimizer.step", "torch.no_grad", "vid_label_t.to.cpu().numpy", "fg_score.cpu().numpy", "numpy.zeros_like", "numpy.sum", "numpy.sum", "loss_stack.append", "act_inst_loss_stack.append", "act_cont_loss_stack.append", "act_back_loss_stack.append", "guide_loss_stack.append", "feat_loss_stack.append", "att_loss_stack.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "loss.cpu().item", "vid_label_t.to.cpu", "fg_score.cpu", "loss.cpu"], "function", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.None.main_act.train"], ["def", "train", "(", "args", ",", "model", ",", "dataloader", ",", "criterion", ",", "optimizer", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "print", "(", "\"-------------------------------------------------------------------------------\"", ")", "\n", "device", "=", "args", ".", "device", "\n", "\n", "# train_process", "\n", "train_num_correct", "=", "0", "\n", "train_num_total", "=", "0", "\n", "\n", "loss_stack", "=", "[", "]", "\n", "act_inst_loss_stack", "=", "[", "]", "\n", "act_cont_loss_stack", "=", "[", "]", "\n", "act_back_loss_stack", "=", "[", "]", "\n", "guide_loss_stack", "=", "[", "]", "\n", "att_loss_stack", "=", "[", "]", "\n", "feat_loss_stack", "=", "[", "]", "\n", "\n", "for", "input_feature", ",", "vid_label_t", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "\n", "        ", "vid_label_t", "=", "vid_label_t", ".", "to", "(", "device", ")", "\n", "input_feature", "=", "input_feature", ".", "to", "(", "device", ")", "\n", "\n", "act_inst_cls", ",", "act_cont_cls", ",", "act_back_cls", ",", "act_inst_feat", ",", "act_cont_feat", ",", "act_back_feat", ",", "temp_att", ",", "act_inst_cas", ",", "_", ",", "_", ",", "_", "=", "model", "(", "input_feature", ")", "\n", "\n", "loss", ",", "loss_dict", "=", "criterion", "(", "act_inst_cls", ",", "act_cont_cls", ",", "act_back_cls", ",", "vid_label_t", ",", "temp_att", ",", "act_inst_feat", ",", "act_cont_feat", ",", "act_back_feat", ",", "act_inst_cas", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "not", "torch", ".", "isnan", "(", "loss", ")", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fg_score", "=", "act_inst_cls", "[", ":", ",", ":", "args", ".", "action_cls_num", "]", "\n", "label_np", "=", "vid_label_t", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "score_np", "=", "fg_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred_np", "=", "np", ".", "zeros_like", "(", "score_np", ")", "\n", "pred_np", "[", "score_np", ">=", "args", ".", "cls_threshold", "]", "=", "1", "\n", "pred_np", "[", "score_np", "<", "args", ".", "cls_threshold", "]", "=", "0", "\n", "correct_pred", "=", "np", ".", "sum", "(", "label_np", "==", "pred_np", ",", "axis", "=", "1", ")", "\n", "\n", "train_num_correct", "+=", "np", ".", "sum", "(", "(", "correct_pred", "==", "args", ".", "action_cls_num", ")", ")", "\n", "train_num_total", "+=", "correct_pred", ".", "shape", "[", "0", "]", "\n", "\n", "loss_stack", ".", "append", "(", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "act_inst_loss_stack", ".", "append", "(", "loss_dict", "[", "\"act_inst_loss\"", "]", ")", "\n", "act_cont_loss_stack", ".", "append", "(", "loss_dict", "[", "\"act_cont_loss\"", "]", ")", "\n", "act_back_loss_stack", ".", "append", "(", "loss_dict", "[", "\"act_back_loss\"", "]", ")", "\n", "\n", "guide_loss_stack", ".", "append", "(", "loss_dict", "[", "\"guide_loss\"", "]", ")", "\n", "feat_loss_stack", ".", "append", "(", "loss_dict", "[", "\"feat_loss\"", "]", ")", "\n", "att_loss_stack", ".", "append", "(", "loss_dict", "[", "\"sparse_loss\"", "]", ")", "\n", "\n", "", "", "train_acc", "=", "train_num_correct", "/", "train_num_total", "\n", "\n", "train_log_dict", "=", "{", "}", "\n", "train_log_dict", "[", "\"train_act_inst_cls_loss\"", "]", "=", "np", ".", "mean", "(", "act_inst_loss_stack", ")", "\n", "train_log_dict", "[", "\"train_act_cont_cls_loss\"", "]", "=", "np", ".", "mean", "(", "act_cont_loss_stack", ")", "\n", "train_log_dict", "[", "\"train_act_back_cls_loss\"", "]", "=", "np", ".", "mean", "(", "act_back_loss_stack", ")", "\n", "train_log_dict", "[", "\"train_guide_loss\"", "]", "=", "np", ".", "mean", "(", "guide_loss_stack", ")", "\n", "train_log_dict", "[", "\"train_feat_loss\"", "]", "=", "np", ".", "mean", "(", "feat_loss_stack", ")", "\n", "train_log_dict", "[", "\"train_att_loss\"", "]", "=", "np", ".", "mean", "(", "att_loss_stack", ")", "\n", "train_log_dict", "[", "\"train_loss\"", "]", "=", "np", ".", "mean", "(", "loss_stack", ")", "\n", "train_log_dict", "[", "\"train_acc\"", "]", "=", "train_acc", "\n", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"train_act_inst_cls_loss:{:.3f}  train_act_cont_cls_loss:{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "act_inst_loss_stack", ")", ",", "np", ".", "mean", "(", "act_cont_loss_stack", ")", ")", ")", "\n", "print", "(", "\"train_act_back_cls_loss:{:.3f}  train_att_loss:{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "act_back_loss_stack", ")", ",", "np", ".", "mean", "(", "att_loss_stack", ")", ")", ")", "\n", "print", "(", "\"train_feat_loss:        {:.3f}  train_loss:{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "feat_loss_stack", ")", ",", "np", ".", "mean", "(", "loss_stack", ")", ")", ")", "\n", "print", "(", "\"train acc:{:.3f}\"", ".", "format", "(", "train_acc", ")", ")", "\n", "print", "(", "\"-------------------------------------------------------------------------------\"", ")", "\n", "\n", "return", "train_log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.None.main_thu.test": [[111, 317], ["model.eval", "print", "dict", "tqdm.tqdm", "numpy.savetxt", "numpy.savetxt", "utils.net_evaluation.ANETDetection", "utils.net_evaluation.ANETDetection.evaluate", "print", "print", "print", "print", "print", "print", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "input_feature.to.to", "vid_label_t.to.to", "vid_len[].cpu().numpy", "model", "criterion", "loss_stack.append", "act_inst_loss_stack.append", "act_cont_loss_stack.append", "act_back_loss_stack.append", "guide_loss_stack.append", "att_loss_stack.append", "feat_loss_stack.append", "temp_att.cpu().numpy", "act_cas.cpu().numpy", "act_inst_cas.cpu().numpy", "act_cont_cas.cpu().numpy", "act_back_cas.cpu().numpy", "vid_label_t.to.cpu().numpy", "fg_score.cpu().numpy", "numpy.zeros_like", "numpy.sum", "numpy.sum", "temp_cas[].cpu().numpy", "numpy.reshape", "temp_att[].unsqueeze().expand().cpu().numpy", "temp_att[].unsqueeze().expand().cpu().numpy", "numpy.reshape", "numpy.reshape", "numpy.reshape", "utils.net_evaluation.upgrade_resolution", "utils.net_evaluation.upgrade_resolution", "utils.net_evaluation.upgrade_resolution", "numpy.arange", "numpy.arange", "proposal_dict.keys", "utils.net_evaluation.result2json", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.array", "numpy.array", "open", "json.dump", "loss.cpu().item", "np.reshape.max", "numpy.array", "numpy.array", "utils.net_evaluation.upgrade_resolution.copy", "numpy.where", "range", "utils.net_evaluation.get_proposal_oic", "range", "utils.net_evaluation.upgrade_resolution.copy", "numpy.where", "range", "utils.net_evaluation.get_proposal_oic", "range", "final_proposals.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "vid_len[].cpu", "temp_att.cpu", "act_cas.cpu", "act_inst_cas.cpu", "act_cont_cas.cpu", "act_back_cas.cpu", "vid_label_t.to.cpu", "fg_score.cpu", "temp_cas[].cpu", "temp_att[].unsqueeze().expand().cpu", "temp_att[].unsqueeze().expand().cpu", "len", "numpy.where", "tmp_seg_list.append", "len", "len", "numpy.where", "tmp_seg_list.append", "len", "utils.net_evaluation.nms", "loss.cpu", "numpy.where", "numpy.argmax", "len", "proposal_dict.keys", "len", "proposal_dict.keys", "temp_att[].unsqueeze().expand", "temp_att[].unsqueeze().expand", "temp_att[].unsqueeze", "temp_att[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.ANETDetection.evaluate", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.upgrade_resolution", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.upgrade_resolution", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.upgrade_resolution", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.result2json", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.get_proposal_oic", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.get_proposal_oic", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.nms"], ["def", "test", "(", "args", ",", "model", ",", "dataloader", ",", "criterion", ",", "phase", "=", "\"test\"", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "print", "(", "\"-------------------------------------------------------------------------------\"", ")", "\n", "device", "=", "args", ".", "device", "\n", "save_dir", "=", "args", ".", "save_dir", "\n", "\n", "test_num_correct", "=", "0", "\n", "test_num_total", "=", "0", "\n", "\n", "loss_stack", "=", "[", "]", "\n", "act_inst_loss_stack", "=", "[", "]", "\n", "act_cont_loss_stack", "=", "[", "]", "\n", "act_back_loss_stack", "=", "[", "]", "\n", "guide_loss_stack", "=", "[", "]", "\n", "att_loss_stack", "=", "[", "]", "\n", "feat_loss_stack", "=", "[", "]", "\n", "\n", "test_final_result", "=", "dict", "(", ")", "\n", "test_final_result", "[", "'version'", "]", "=", "'VERSION 1.3'", "\n", "test_final_result", "[", "'results'", "]", "=", "{", "}", "\n", "test_final_result", "[", "'external_data'", "]", "=", "{", "'used'", ":", "True", ",", "'details'", ":", "'Features from I3D Net'", "}", "\n", "\n", "test_pred_score_stack", "=", "[", "]", "\n", "test_vid_label_stack", "=", "[", "]", "\n", "test_tmp_data_log_dict", "=", "{", "}", "\n", "\n", "for", "vid_name", ",", "input_feature", ",", "vid_label_t", ",", "vid_len", ",", "vid_duration", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "\n", "        ", "input_feature", "=", "input_feature", ".", "to", "(", "device", ")", "\n", "vid_label_t", "=", "vid_label_t", ".", "to", "(", "device", ")", "\n", "vid_len", "=", "vid_len", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "t_factor", "=", "(", "args", ".", "segment_frames_num", "*", "vid_len", ")", "/", "(", "args", ".", "frames_per_sec", "*", "args", ".", "test_upgrade_scale", "*", "input_feature", ".", "shape", "[", "1", "]", ")", "\n", "#--------------------------------------------------------------------------#", "\n", "#--------------------------------------------------------------------------#", "\n", "act_inst_cls", ",", "act_cont_cls", ",", "act_back_cls", ",", "act_inst_feat", ",", "act_cont_feat", ",", "act_back_feat", ",", "temp_att", ",", "act_inst_cas", ",", "act_cas", ",", "act_cont_cas", ",", "act_back_cas", "=", "model", "(", "input_feature", ")", "\n", "#--------------------------------------------------------------------------#", "\n", "#--------------------------------------------------------------------------#", "\n", "loss", ",", "loss_dict", "=", "criterion", "(", "act_inst_cls", ",", "act_cont_cls", ",", "act_back_cls", ",", "vid_label_t", ",", "temp_att", ",", "act_inst_feat", ",", "act_cont_feat", ",", "act_back_feat", ",", "act_inst_cas", ")", "\n", "\n", "loss_stack", ".", "append", "(", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "act_inst_loss_stack", ".", "append", "(", "loss_dict", "[", "\"act_inst_loss\"", "]", ")", "\n", "act_cont_loss_stack", ".", "append", "(", "loss_dict", "[", "\"act_cont_loss\"", "]", ")", "\n", "act_back_loss_stack", ".", "append", "(", "loss_dict", "[", "\"act_back_loss\"", "]", ")", "\n", "guide_loss_stack", ".", "append", "(", "loss_dict", "[", "\"guide_loss\"", "]", ")", "\n", "att_loss_stack", ".", "append", "(", "loss_dict", "[", "\"sparse_loss\"", "]", ")", "\n", "feat_loss_stack", ".", "append", "(", "loss_dict", "[", "\"feat_loss\"", "]", ")", "\n", "\n", "#--------------------------------------------------------------------------#", "\n", "#--------------------------------------------------------------------------#", "\n", "temp_cas", "=", "act_inst_cas", "\n", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "=", "{", "}", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "[", "\"vid_len\"", "]", "=", "vid_len", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "[", "\"temp_att_score_np\"", "]", "=", "temp_att", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "[", "\"temp_org_cls_score_np\"", "]", "=", "act_cas", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "[", "\"temp_ins_cls_score_np\"", "]", "=", "act_inst_cas", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "[", "\"temp_con_cls_score_np\"", "]", "=", "act_cont_cas", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "[", "\"temp_bak_cls_score_np\"", "]", "=", "act_back_cas", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "#--------------------------------------------------------------------------#", "\n", "#--------------------------------------------------------------------------#", "\n", "fg_score", "=", "act_inst_cls", "[", ":", ",", ":", "args", ".", "action_cls_num", "]", "\n", "label_np", "=", "vid_label_t", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "score_np", "=", "fg_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_np", "=", "np", ".", "zeros_like", "(", "score_np", ")", "\n", "pred_np", "[", "score_np", ">=", "args", ".", "cls_threshold", "]", "=", "1", "\n", "pred_np", "[", "score_np", "<", "args", ".", "cls_threshold", "]", "=", "0", "\n", "correct_pred", "=", "np", ".", "sum", "(", "label_np", "==", "pred_np", ",", "axis", "=", "1", ")", "\n", "test_num_correct", "+=", "np", ".", "sum", "(", "(", "correct_pred", "==", "args", ".", "action_cls_num", ")", ")", "\n", "test_num_total", "+=", "correct_pred", ".", "shape", "[", "0", "]", "\n", "#--------------------------------------------------------------------------#", "\n", "#--------------------------------------------------------------------------#", "\n", "# GENERATE PROPORALS.", "\n", "temp_cls_score_np", "=", "temp_cas", "[", ":", ",", ":", ",", ":", "args", ".", "action_cls_num", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "temp_cls_score_np", "=", "np", ".", "reshape", "(", "temp_cls_score_np", ",", "(", "temp_cas", ".", "shape", "[", "1", "]", ",", "args", ".", "action_cls_num", ",", "1", ")", ")", "\n", "temp_att_ins_score_np", "=", "temp_att", "[", ":", ",", ":", ",", "0", "]", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "[", "-", "1", ",", "-", "1", ",", "args", ".", "action_cls_num", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "temp_att_con_score_np", "=", "temp_att", "[", ":", ",", ":", ",", "1", "]", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "[", "-", "1", ",", "-", "1", ",", "args", ".", "action_cls_num", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "temp_att_ins_score_np", "=", "np", ".", "reshape", "(", "temp_att_ins_score_np", ",", "(", "temp_cas", ".", "shape", "[", "1", "]", ",", "args", ".", "action_cls_num", ",", "1", ")", ")", "\n", "temp_att_con_score_np", "=", "np", ".", "reshape", "(", "temp_att_con_score_np", ",", "(", "temp_cas", ".", "shape", "[", "1", "]", ",", "args", ".", "action_cls_num", ",", "1", ")", ")", "\n", "\n", "score_np", "=", "np", ".", "reshape", "(", "score_np", ",", "(", "-", "1", ")", ")", "\n", "if", "score_np", ".", "max", "(", ")", ">", "args", ".", "cls_threshold", ":", "\n", "            ", "cls_prediction", "=", "np", ".", "array", "(", "np", ".", "where", "(", "score_np", ">", "args", ".", "cls_threshold", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "cls_prediction", "=", "np", ".", "array", "(", "[", "np", ".", "argmax", "(", "score_np", ")", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "", "temp_cls_score_np", "=", "temp_cls_score_np", "[", ":", ",", "cls_prediction", "]", "\n", "temp_att_ins_score_np", "=", "temp_att_ins_score_np", "[", ":", ",", "cls_prediction", "]", "\n", "temp_att_con_score_np", "=", "temp_att_con_score_np", "[", ":", ",", "cls_prediction", "]", "\n", "\n", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "[", "\"temp_cls_score_np\"", "]", "=", "temp_cls_score_np", "\n", "\n", "int_temp_cls_scores", "=", "upgrade_resolution", "(", "temp_cls_score_np", ",", "args", ".", "test_upgrade_scale", ")", "\n", "int_temp_att_ins_score_np", "=", "upgrade_resolution", "(", "temp_att_ins_score_np", ",", "args", ".", "test_upgrade_scale", ")", "\n", "int_temp_att_con_score_np", "=", "upgrade_resolution", "(", "temp_att_con_score_np", ",", "args", ".", "test_upgrade_scale", ")", "\n", "\n", "\n", "cas_act_thresh", "=", "np", ".", "arange", "(", "0.15", ",", "0.25", ",", "0.05", ")", "\n", "att_act_thresh", "=", "np", ".", "arange", "(", "0.15", ",", "1.00", ",", "0.05", ")", "\n", "\n", "proposal_dict", "=", "{", "}", "\n", "# CAS based proposal generation", "\n", "# cas_act_thresh = []", "\n", "for", "act_thresh", "in", "cas_act_thresh", ":", "\n", "\n", "            ", "tmp_int_cas", "=", "int_temp_cls_scores", ".", "copy", "(", ")", "\n", "zero_location", "=", "np", ".", "where", "(", "tmp_int_cas", "<", "act_thresh", ")", "\n", "tmp_int_cas", "[", "zero_location", "]", "=", "0", "\n", "\n", "tmp_seg_list", "=", "[", "]", "\n", "for", "c_idx", "in", "range", "(", "len", "(", "cls_prediction", ")", ")", ":", "\n", "                ", "pos", "=", "np", ".", "where", "(", "tmp_int_cas", "[", ":", ",", "c_idx", "]", ">=", "act_thresh", ")", "\n", "tmp_seg_list", ".", "append", "(", "pos", ")", "\n", "\n", "", "props_list", "=", "get_proposal_oic", "(", "tmp_seg_list", ",", "(", "1.0", "*", "tmp_int_cas", "+", "0.0", "*", "int_temp_att_ins_score_np", ")", ",", "cls_prediction", ",", "score_np", ",", "t_factor", ",", "lamb", "=", "0.2", ",", "gamma", "=", "0.0", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "props_list", ")", ")", ":", "\n", "                ", "if", "len", "(", "props_list", "[", "i", "]", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "class_id", "=", "props_list", "[", "i", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "if", "class_id", "not", "in", "proposal_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "proposal_dict", "[", "class_id", "]", "=", "[", "]", "\n", "\n", "", "proposal_dict", "[", "class_id", "]", "+=", "props_list", "[", "i", "]", "\n", "\n", "# att_act_thresh = []", "\n", "", "", "for", "att_thresh", "in", "att_act_thresh", ":", "\n", "\n", "            ", "tmp_int_att", "=", "int_temp_att_ins_score_np", ".", "copy", "(", ")", "\n", "zero_location", "=", "np", ".", "where", "(", "tmp_int_att", "<", "att_thresh", ")", "\n", "tmp_int_att", "[", "zero_location", "]", "=", "0", "\n", "\n", "tmp_seg_list", "=", "[", "]", "\n", "for", "c_idx", "in", "range", "(", "len", "(", "cls_prediction", ")", ")", ":", "\n", "                ", "pos", "=", "np", ".", "where", "(", "tmp_int_att", "[", ":", ",", "c_idx", "]", ">=", "att_thresh", ")", "\n", "tmp_seg_list", ".", "append", "(", "pos", ")", "\n", "\n", "", "props_list", "=", "get_proposal_oic", "(", "tmp_seg_list", ",", "(", "1.0", "*", "int_temp_cls_scores", "+", "0.0", "*", "tmp_int_att", ")", ",", "cls_prediction", ",", "score_np", ",", "t_factor", ",", "lamb", "=", "0.2", ",", "gamma", "=", "0.0", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "props_list", ")", ")", ":", "\n", "                ", "if", "len", "(", "props_list", "[", "i", "]", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "class_id", "=", "props_list", "[", "i", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "if", "class_id", "not", "in", "proposal_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "proposal_dict", "[", "class_id", "]", "=", "[", "]", "\n", "\n", "", "proposal_dict", "[", "class_id", "]", "+=", "props_list", "[", "i", "]", "\n", "\n", "# NMS ", "\n", "", "", "final_proposals", "=", "[", "]", "\n", "\n", "for", "class_id", "in", "proposal_dict", ".", "keys", "(", ")", ":", "\n", "            ", "final_proposals", ".", "append", "(", "nms", "(", "proposal_dict", "[", "class_id", "]", ",", "args", ".", "nms_thresh", ")", ")", "\n", "\n", "", "test_final_result", "[", "'results'", "]", "[", "vid_name", "[", "0", "]", "]", "=", "result2json", "(", "final_proposals", ",", "args", ".", "class_name_lst", ")", "\n", "\n", "", "test_acc", "=", "test_num_correct", "/", "test_num_total", "\n", "\n", "if", "args", ".", "test", ":", "\n", "# Final Test", "\n", "        ", "test_pred_txt_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"final_test_pred.txt\"", ")", "\n", "test_label_txt_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"final_test_label.txt\"", ")", "\n", "test_final_json_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"final_test_{}_result.json\"", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "", "else", ":", "\n", "# Train Evalutaion", "\n", "        ", "test_pred_txt_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"test_pred.txt\"", ")", "\n", "test_label_txt_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"test_label.txt\"", ")", "\n", "test_final_json_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"{}_lateset_result.json\"", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "\n", "", "np", ".", "savetxt", "(", "test_pred_txt_f", ",", "np", ".", "array", "(", "test_pred_score_stack", ")", ",", "fmt", "=", "\"%.3f\"", ")", "\n", "np", ".", "savetxt", "(", "test_label_txt_f", ",", "np", ".", "array", "(", "test_vid_label_stack", ")", ",", "fmt", "=", "\"%.3f\"", ")", "\n", "\n", "with", "open", "(", "test_final_json_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "test_final_result", ",", "f", ")", "\n", "\n", "", "anet_detection", "=", "ANETDetection", "(", "ground_truth_file", "=", "args", ".", "test_gt_file_path", ",", "\n", "prediction_file", "=", "test_final_json_path", ",", "\n", "tiou_thresholds", "=", "args", ".", "tiou_thresholds", ",", "\n", "subset", "=", "\"test\"", ")", "\n", "\n", "test_mAP", "=", "anet_detection", ".", "evaluate", "(", ")", "\n", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"test_act_inst_cls_loss:{:.3f}  test_act_cont_cls_loss:{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "act_inst_loss_stack", ")", ",", "np", ".", "mean", "(", "act_cont_loss_stack", ")", ")", ")", "\n", "print", "(", "\"test_act_back_cls_loss:{:.3f}  test_att_loss:{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "act_back_loss_stack", ")", ",", "np", ".", "mean", "(", "att_loss_stack", ")", ")", ")", "\n", "print", "(", "\"test_feat_norm_loss:   {:.3f}  test_loss:{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "feat_loss_stack", ")", ",", "np", ".", "mean", "(", "loss_stack", ")", ")", ")", "\n", "print", "(", "\"test acc:{:.3f}\"", ".", "format", "(", "test_acc", ")", ")", "\n", "print", "(", "\"-------------------------------------------------------------------------------\"", ")", "\n", "\n", "test_log_dict", "=", "{", "}", "\n", "test_log_dict", "[", "\"test_act_inst_cls_loss\"", "]", "=", "np", ".", "mean", "(", "act_inst_loss_stack", ")", "\n", "test_log_dict", "[", "\"test_act_cont_cls_loss\"", "]", "=", "np", ".", "mean", "(", "act_cont_loss_stack", ")", "\n", "test_log_dict", "[", "\"test_act_back_cls_loss\"", "]", "=", "np", ".", "mean", "(", "act_back_loss_stack", ")", "\n", "test_log_dict", "[", "\"test_feat_loss\"", "]", "=", "np", ".", "mean", "(", "feat_loss_stack", ")", "\n", "test_log_dict", "[", "\"test_att_loss\"", "]", "=", "np", ".", "mean", "(", "att_loss_stack", ")", "\n", "test_log_dict", "[", "\"test_loss\"", "]", "=", "np", ".", "mean", "(", "loss_stack", ")", "\n", "test_log_dict", "[", "\"test_acc\"", "]", "=", "test_acc", "\n", "test_log_dict", "[", "\"test_mAP\"", "]", "=", "test_mAP", "\n", "\n", "return", "test_log_dict", ",", "test_tmp_data_log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.None.main_thu.main": [[325, 422], ["torch.device", "os.path.join", "model.ACMNet.ACMNet", "model.to.to", "time.localtime", "os.path.dirname", "os.path.join", "os.path.dirname", "os.path.isdir", "os.makedirs", "os.path.isfile", "torch.load", "model.to.load_state_dict", "torch.optim.Adam", "dataset.dataset_class.build_dataset", "dataset.dataset_class.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.net_utils.ACMLoss", "tqdm.tqdm", "dataset.dataset_class.build_dataset", "torch.utils.data.DataLoader", "utils.net_utils.ACMLoss", "torch.cuda.is_available", "wandb.init", "model.to.parameters", "range", "main_thu.train", "torch.save", "print", "print", "torch.no_grad", "main_thu.test", "torch.device", "torch.no_grad", "main_thu.test", "torch.save", "os.path.join", "wandb.log", "wandb.log", "open", "pickle.dump", "os.path.join", "open", "pickle.dump", "model.to.state_dict", "os.path.join", "model.to.state_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.build_dataset", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.build_dataset", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.build_dataset", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.None.main_act.train", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.None.main_act.test", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.None.main_act.test"], ["def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VIVIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "args", ".", "gpu", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "local_time", "=", "time", ".", "localtime", "(", ")", "[", "0", ":", "5", "]", "\n", "this_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\".\"", ")", "\n", "if", "not", "args", ".", "test", ":", "\n", "        ", "save_dir", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"checkpoints_acmnet\"", ",", "\"checkpoints_acmnet_{:02d}_{:02d}_{:02d}_{:02d}_{:02d}\"", ".", "format", "(", "local_time", "[", "0", "]", ",", "local_time", "[", "1", "]", ",", "local_time", "[", "2", "]", ",", "local_time", "[", "3", "]", ",", "local_time", "[", "4", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "save_dir", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "checkpoint", ")", "\n", "\n", "", "args", ".", "save_dir", "=", "save_dir", "\n", "args", ".", "device", "=", "device", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "model", "=", "ACMNet", "(", "args", ")", "\n", "\n", "if", "args", ".", "checkpoint", "is", "not", "None", "and", "os", ".", "path", ".", "isfile", "(", "args", ".", "checkpoint", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model_state_dict\"", "]", ")", "\n", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "if", "not", "args", ".", "test", ":", "\n", "        ", "if", "not", "args", ".", "without_wandb", ":", "\n", "            ", "wandb", ".", "init", "(", "name", "=", "'traing_log_{:02d}_{:02d}_{:02d}_{:02d}_{:02d}'", ".", "format", "(", "local_time", "[", "0", "]", ",", "local_time", "[", "1", "]", ",", "local_time", "[", "2", "]", ",", "\n", "local_time", "[", "3", "]", ",", "local_time", "[", "4", "]", ")", ",", "\n", "config", "=", "args", ",", "\n", "project", "=", "\"ACMNet_{}\"", ".", "format", "(", "args", ".", "dataset", ")", ",", "\n", "sync_tensorboard", "=", "True", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "train_dataset", "=", "build_dataset", "(", "args", ",", "phase", "=", "\"train\"", ",", "sample", "=", "\"random\"", ")", "\n", "test_dataset", "=", "build_dataset", "(", "args", ",", "phase", "=", "\"test\"", ",", "sample", "=", "\"uniform\"", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "test_dataloader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "criterion", "=", "ACMLoss", "(", "lamb1", "=", "args", ".", "loss_lamb_1", ",", "lamb2", "=", "args", ".", "loss_lamb_2", ",", "lamb3", "=", "args", ".", "loss_lamb_3", ")", "\n", "\n", "best_test_mAP", "=", "0", "\n", "\n", "for", "epoch_idx", "in", "tqdm", "(", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ")", ":", "\n", "\n", "            ", "train_log_dict", "=", "train", "(", "args", ",", "model", ",", "train_dataloader", ",", "criterion", ",", "optimizer", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "test_log_dict", ",", "test_tmp_data_log_dict", "=", "test", "(", "args", ",", "model", ",", "test_dataloader", ",", "criterion", ")", "\n", "test_mAP", "=", "test_log_dict", "[", "\"test_mAP\"", "]", "\n", "\n", "", "if", "test_mAP", ">", "best_test_mAP", ":", "\n", "                ", "best_test_mAP", "=", "test_mAP", "\n", "checkpoint_file", "=", "\"{}_best_checkpoint.pth\"", ".", "format", "(", "args", ".", "dataset", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch_idx", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "save_dir", ",", "checkpoint_file", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"test_tmp_data_log_dict.pickle\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "test_tmp_data_log_dict", ",", "f", ")", "\n", "\n", "", "", "checkpoint_file", "=", "\"{}_latest_checkpoint.pth\"", ".", "format", "(", "args", ".", "dataset", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch_idx", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "save_dir", ",", "checkpoint_file", ")", ")", "\n", "\n", "print", "(", "\"Current test_mAP:{:.4f}, Current Best test_mAP:{:.4f} Current Epoch:{}/{}\"", ".", "format", "(", "test_mAP", ",", "best_test_mAP", ",", "epoch_idx", ",", "args", ".", "epochs", ")", ")", "\n", "print", "(", "\"-------------------------------------------------------------------------------\"", ")", "\n", "\n", "if", "not", "args", ".", "without_wandb", ":", "\n", "                ", "wandb", ".", "log", "(", "train_log_dict", ")", "\n", "wandb", ".", "log", "(", "test_log_dict", ")", "\n", "\n", "# optimizer_scheduler.step()", "\n", "", "", "", "else", ":", "\n", "        ", "test_dataset", "=", "build_dataset", "(", "args", ",", "phase", "=", "\"test\"", ",", "sample", "=", "\"uniform\"", ")", "\n", "test_dataloader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "criterion", "=", "ACMLoss", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "test_log_dict", ",", "test_tmp_data_log_dict", "=", "test", "(", "args", ",", "model", ",", "test_dataloader", ",", "criterion", ")", "\n", "test_mAP", "=", "test_log_dict", "[", "\"test_mAP\"", "]", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"test_tmp_data_log_dict.pickle\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "test_tmp_data_log_dict", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.None.main_act.train": [[26, 102], ["model.train", "print", "tqdm.tqdm", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "print", "print", "print", "print", "print", "print", "vid_label_t.to.to", "input_feature.to.to", "model", "criterion", "optimizer.zero_grad", "torch.isnan", "loss.backward", "optimizer.step", "torch.no_grad", "vid_label_t.to.cpu().numpy", "fg_score.cpu().numpy", "numpy.zeros_like", "numpy.sum", "numpy.sum", "loss_stack.append", "act_inst_loss_stack.append", "act_cont_loss_stack.append", "act_back_loss_stack.append", "guide_loss_stack.append", "feat_loss_stack.append", "att_loss_stack.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "loss.cpu().item", "vid_label_t.to.cpu", "fg_score.cpu", "loss.cpu"], "function", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.None.main_act.train"], ["def", "train", "(", "args", ",", "model", ",", "dataloader", ",", "criterion", ",", "optimizer", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "print", "(", "\"-------------------------------------------------------------------------------\"", ")", "\n", "device", "=", "args", ".", "device", "\n", "\n", "# train_process", "\n", "train_num_correct", "=", "0", "\n", "train_num_total", "=", "0", "\n", "\n", "loss_stack", "=", "[", "]", "\n", "act_inst_loss_stack", "=", "[", "]", "\n", "act_cont_loss_stack", "=", "[", "]", "\n", "act_back_loss_stack", "=", "[", "]", "\n", "guide_loss_stack", "=", "[", "]", "\n", "att_loss_stack", "=", "[", "]", "\n", "feat_loss_stack", "=", "[", "]", "\n", "\n", "for", "input_feature", ",", "vid_label_t", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "\n", "        ", "vid_label_t", "=", "vid_label_t", ".", "to", "(", "device", ")", "\n", "input_feature", "=", "input_feature", ".", "to", "(", "device", ")", "\n", "\n", "act_inst_cls", ",", "act_cont_cls", ",", "act_back_cls", ",", "act_inst_feat", ",", "act_cont_feat", ",", "act_back_feat", ",", "temp_att", ",", "act_inst_cas", ",", "_", ",", "_", ",", "_", "=", "model", "(", "input_feature", ")", "\n", "\n", "loss", ",", "loss_dict", "=", "criterion", "(", "act_inst_cls", ",", "act_cont_cls", ",", "act_back_cls", ",", "vid_label_t", ",", "temp_att", ",", "act_inst_feat", ",", "act_cont_feat", ",", "act_back_feat", ",", "act_inst_cas", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "not", "torch", ".", "isnan", "(", "loss", ")", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fg_score", "=", "act_inst_cls", "[", ":", ",", ":", "args", ".", "action_cls_num", "]", "\n", "label_np", "=", "vid_label_t", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "score_np", "=", "fg_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred_np", "=", "np", ".", "zeros_like", "(", "score_np", ")", "\n", "pred_np", "[", "score_np", ">=", "args", ".", "cls_threshold", "]", "=", "1", "\n", "pred_np", "[", "score_np", "<", "args", ".", "cls_threshold", "]", "=", "0", "\n", "correct_pred", "=", "np", ".", "sum", "(", "label_np", "==", "pred_np", ",", "axis", "=", "1", ")", "\n", "\n", "train_num_correct", "+=", "np", ".", "sum", "(", "(", "correct_pred", "==", "args", ".", "action_cls_num", ")", ")", "\n", "train_num_total", "+=", "correct_pred", ".", "shape", "[", "0", "]", "\n", "\n", "loss_stack", ".", "append", "(", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "act_inst_loss_stack", ".", "append", "(", "loss_dict", "[", "\"act_inst_loss\"", "]", ")", "\n", "act_cont_loss_stack", ".", "append", "(", "loss_dict", "[", "\"act_cont_loss\"", "]", ")", "\n", "act_back_loss_stack", ".", "append", "(", "loss_dict", "[", "\"act_back_loss\"", "]", ")", "\n", "\n", "guide_loss_stack", ".", "append", "(", "loss_dict", "[", "\"guide_loss\"", "]", ")", "\n", "feat_loss_stack", ".", "append", "(", "loss_dict", "[", "\"feat_loss\"", "]", ")", "\n", "att_loss_stack", ".", "append", "(", "loss_dict", "[", "\"sparse_loss\"", "]", ")", "\n", "\n", "", "", "train_acc", "=", "train_num_correct", "/", "train_num_total", "\n", "\n", "train_log_dict", "=", "{", "}", "\n", "train_log_dict", "[", "\"train_act_inst_cls_loss\"", "]", "=", "np", ".", "mean", "(", "act_inst_loss_stack", ")", "\n", "train_log_dict", "[", "\"train_act_cont_cls_loss\"", "]", "=", "np", ".", "mean", "(", "act_cont_loss_stack", ")", "\n", "train_log_dict", "[", "\"train_act_back_cls_loss\"", "]", "=", "np", ".", "mean", "(", "act_back_loss_stack", ")", "\n", "train_log_dict", "[", "\"train_guide_loss\"", "]", "=", "np", ".", "mean", "(", "guide_loss_stack", ")", "\n", "train_log_dict", "[", "\"train_feat_loss\"", "]", "=", "np", ".", "mean", "(", "feat_loss_stack", ")", "\n", "train_log_dict", "[", "\"train_att_loss\"", "]", "=", "np", ".", "mean", "(", "att_loss_stack", ")", "\n", "train_log_dict", "[", "\"train_loss\"", "]", "=", "np", ".", "mean", "(", "loss_stack", ")", "\n", "train_log_dict", "[", "\"train_acc\"", "]", "=", "train_acc", "\n", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"train_act_inst_cls_loss:{:.3f}  train_act_cont_cls_loss:{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "act_inst_loss_stack", ")", ",", "np", ".", "mean", "(", "act_cont_loss_stack", ")", ")", ")", "\n", "print", "(", "\"train_act_back_cls_loss:{:.3f}  train_att_loss:{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "act_back_loss_stack", ")", ",", "np", ".", "mean", "(", "att_loss_stack", ")", ")", ")", "\n", "print", "(", "\"train_feat_loss:        {:.3f}  train_loss:{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "feat_loss_stack", ")", ",", "np", ".", "mean", "(", "loss_stack", ")", ")", ")", "\n", "print", "(", "\"train acc:{:.3f}\"", ".", "format", "(", "train_acc", ")", ")", "\n", "print", "(", "\"-------------------------------------------------------------------------------\"", ")", "\n", "\n", "return", "train_log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.None.main_act.test": [[111, 317], ["model.eval", "print", "dict", "tqdm.tqdm", "numpy.savetxt", "numpy.savetxt", "utils.net_evaluation.ANETDetection", "utils.net_evaluation.ANETDetection.evaluate", "print", "print", "print", "print", "print", "print", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "input_feature.to.to", "vid_label_t.to.to", "vid_len[].cpu().numpy", "model", "criterion", "loss_stack.append", "act_inst_loss_stack.append", "act_cont_loss_stack.append", "act_back_loss_stack.append", "guide_loss_stack.append", "att_loss_stack.append", "feat_loss_stack.append", "temp_att.cpu().numpy", "act_cas.cpu().numpy", "act_inst_cas.cpu().numpy", "act_cont_cas.cpu().numpy", "act_back_cas.cpu().numpy", "vid_label_t.to.cpu().numpy", "fg_score.cpu().numpy", "numpy.zeros_like", "numpy.sum", "numpy.sum", "temp_cas[].cpu().numpy", "numpy.reshape", "temp_att[].unsqueeze().expand().cpu().numpy", "temp_att[].unsqueeze().expand().cpu().numpy", "numpy.reshape", "numpy.reshape", "numpy.reshape", "utils.net_evaluation.upgrade_resolution", "utils.net_evaluation.upgrade_resolution", "utils.net_evaluation.upgrade_resolution", "proposal_dict.keys", "utils.net_evaluation.result2json", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "numpy.array", "numpy.array", "open", "json.dump", "loss.cpu().item", "np.reshape.max", "numpy.array", "numpy.array", "utils.net_evaluation.upgrade_resolution.copy", "numpy.where", "range", "utils.net_evaluation.get_proposal_oic", "range", "utils.net_evaluation.upgrade_resolution.copy", "numpy.where", "range", "utils.net_evaluation.get_proposal_oic", "range", "final_proposals.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "vid_len[].cpu", "temp_att.cpu", "act_cas.cpu", "act_inst_cas.cpu", "act_cont_cas.cpu", "act_back_cas.cpu", "vid_label_t.to.cpu", "fg_score.cpu", "temp_cas[].cpu", "temp_att[].unsqueeze().expand().cpu", "temp_att[].unsqueeze().expand().cpu", "len", "numpy.where", "tmp_seg_list.append", "len", "len", "numpy.where", "tmp_seg_list.append", "len", "utils.net_evaluation.nms", "loss.cpu", "numpy.where", "numpy.argmax", "len", "proposal_dict.keys", "len", "proposal_dict.keys", "temp_att[].unsqueeze().expand", "temp_att[].unsqueeze().expand", "temp_att[].unsqueeze", "temp_att[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.ANETDetection.evaluate", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.upgrade_resolution", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.upgrade_resolution", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.upgrade_resolution", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.result2json", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.get_proposal_oic", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.get_proposal_oic", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.nms"], ["def", "test", "(", "args", ",", "model", ",", "dataloader", ",", "criterion", ",", "phase", "=", "\"test\"", ")", ":", "\n", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "print", "(", "\"-------------------------------------------------------------------------------\"", ")", "\n", "device", "=", "args", ".", "device", "\n", "save_dir", "=", "args", ".", "save_dir", "\n", "\n", "test_num_correct", "=", "0", "\n", "test_num_total", "=", "0", "\n", "\n", "loss_stack", "=", "[", "]", "\n", "act_inst_loss_stack", "=", "[", "]", "\n", "act_cont_loss_stack", "=", "[", "]", "\n", "act_back_loss_stack", "=", "[", "]", "\n", "guide_loss_stack", "=", "[", "]", "\n", "att_loss_stack", "=", "[", "]", "\n", "feat_loss_stack", "=", "[", "]", "\n", "\n", "test_final_result", "=", "dict", "(", ")", "\n", "test_final_result", "[", "'version'", "]", "=", "'VERSION 1.3'", "\n", "test_final_result", "[", "'results'", "]", "=", "{", "}", "\n", "test_final_result", "[", "'external_data'", "]", "=", "{", "'used'", ":", "True", ",", "'details'", ":", "'Features from I3D Net'", "}", "\n", "\n", "test_pred_score_stack", "=", "[", "]", "\n", "test_vid_label_stack", "=", "[", "]", "\n", "test_tmp_data_log_dict", "=", "{", "}", "\n", "\n", "for", "vid_name", ",", "input_feature", ",", "vid_label_t", ",", "vid_len", ",", "vid_duration", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "\n", "        ", "input_feature", "=", "input_feature", ".", "to", "(", "device", ")", "\n", "vid_label_t", "=", "vid_label_t", ".", "to", "(", "device", ")", "\n", "vid_len", "=", "vid_len", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "t_factor", "=", "(", "args", ".", "segment_frames_num", "*", "vid_len", ")", "/", "(", "args", ".", "frames_per_sec", "*", "args", ".", "test_upgrade_scale", "*", "input_feature", ".", "shape", "[", "1", "]", ")", "\n", "#--------------------------------------------------------------------------#", "\n", "#--------------------------------------------------------------------------#", "\n", "act_inst_cls", ",", "act_cont_cls", ",", "act_back_cls", ",", "act_inst_feat", ",", "act_cont_feat", ",", "act_back_feat", ",", "temp_att", ",", "act_inst_cas", ",", "act_cas", ",", "act_cont_cas", ",", "act_back_cas", "=", "model", "(", "input_feature", ")", "\n", "#--------------------------------------------------------------------------#", "\n", "#--------------------------------------------------------------------------#", "\n", "loss", ",", "loss_dict", "=", "criterion", "(", "act_inst_cls", ",", "act_cont_cls", ",", "act_back_cls", ",", "vid_label_t", ",", "temp_att", ",", "act_inst_feat", ",", "act_cont_feat", ",", "act_back_feat", ",", "act_inst_cas", ")", "\n", "\n", "loss_stack", ".", "append", "(", "loss", ".", "cpu", "(", ")", ".", "item", "(", ")", ")", "\n", "act_inst_loss_stack", ".", "append", "(", "loss_dict", "[", "\"act_inst_loss\"", "]", ")", "\n", "act_cont_loss_stack", ".", "append", "(", "loss_dict", "[", "\"act_cont_loss\"", "]", ")", "\n", "act_back_loss_stack", ".", "append", "(", "loss_dict", "[", "\"act_back_loss\"", "]", ")", "\n", "guide_loss_stack", ".", "append", "(", "loss_dict", "[", "\"guide_loss\"", "]", ")", "\n", "att_loss_stack", ".", "append", "(", "loss_dict", "[", "\"sparse_loss\"", "]", ")", "\n", "feat_loss_stack", ".", "append", "(", "loss_dict", "[", "\"feat_loss\"", "]", ")", "\n", "\n", "#--------------------------------------------------------------------------#", "\n", "#--------------------------------------------------------------------------#", "\n", "temp_cas", "=", "act_inst_cas", "\n", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "=", "{", "}", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "[", "\"vid_len\"", "]", "=", "vid_len", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "[", "\"temp_att_score_np\"", "]", "=", "temp_att", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "[", "\"temp_org_cls_score_np\"", "]", "=", "act_cas", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "[", "\"temp_ins_cls_score_np\"", "]", "=", "act_inst_cas", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "[", "\"temp_con_cls_score_np\"", "]", "=", "act_cont_cas", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "[", "\"temp_bak_cls_score_np\"", "]", "=", "act_back_cas", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "#--------------------------------------------------------------------------#", "\n", "#--------------------------------------------------------------------------#", "\n", "fg_score", "=", "act_inst_cls", "[", ":", ",", ":", "args", ".", "action_cls_num", "]", "\n", "label_np", "=", "vid_label_t", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "score_np", "=", "fg_score", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_np", "=", "np", ".", "zeros_like", "(", "score_np", ")", "\n", "pred_np", "[", "score_np", ">=", "args", ".", "cls_threshold", "]", "=", "1", "\n", "pred_np", "[", "score_np", "<", "args", ".", "cls_threshold", "]", "=", "0", "\n", "correct_pred", "=", "np", ".", "sum", "(", "label_np", "==", "pred_np", ",", "axis", "=", "1", ")", "\n", "test_num_correct", "+=", "np", ".", "sum", "(", "(", "correct_pred", "==", "args", ".", "action_cls_num", ")", ")", "\n", "test_num_total", "+=", "correct_pred", ".", "shape", "[", "0", "]", "\n", "#--------------------------------------------------------------------------#", "\n", "#--------------------------------------------------------------------------#", "\n", "# GENERATE PROPORALS.", "\n", "temp_cls_score_np", "=", "temp_cas", "[", ":", ",", ":", ",", ":", "args", ".", "action_cls_num", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "temp_cls_score_np", "=", "np", ".", "reshape", "(", "temp_cls_score_np", ",", "(", "temp_cas", ".", "shape", "[", "1", "]", ",", "args", ".", "action_cls_num", ",", "1", ")", ")", "\n", "temp_att_ins_score_np", "=", "temp_att", "[", ":", ",", ":", ",", "0", "]", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "[", "-", "1", ",", "-", "1", ",", "args", ".", "action_cls_num", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "temp_att_con_score_np", "=", "temp_att", "[", ":", ",", ":", ",", "1", "]", ".", "unsqueeze", "(", "2", ")", ".", "expand", "(", "[", "-", "1", ",", "-", "1", ",", "args", ".", "action_cls_num", "]", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "temp_att_ins_score_np", "=", "np", ".", "reshape", "(", "temp_att_ins_score_np", ",", "(", "temp_cas", ".", "shape", "[", "1", "]", ",", "args", ".", "action_cls_num", ",", "1", ")", ")", "\n", "temp_att_con_score_np", "=", "np", ".", "reshape", "(", "temp_att_con_score_np", ",", "(", "temp_cas", ".", "shape", "[", "1", "]", ",", "args", ".", "action_cls_num", ",", "1", ")", ")", "\n", "\n", "score_np", "=", "np", ".", "reshape", "(", "score_np", ",", "(", "-", "1", ")", ")", "\n", "if", "score_np", ".", "max", "(", ")", ">", "args", ".", "cls_threshold", ":", "\n", "            ", "cls_prediction", "=", "np", ".", "array", "(", "np", ".", "where", "(", "score_np", ">", "args", ".", "cls_threshold", ")", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "cls_prediction", "=", "np", ".", "array", "(", "[", "np", ".", "argmax", "(", "score_np", ")", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "", "temp_cls_score_np", "=", "temp_cls_score_np", "[", ":", ",", "cls_prediction", "]", "\n", "temp_att_ins_score_np", "=", "temp_att_ins_score_np", "[", ":", ",", "cls_prediction", "]", "\n", "temp_att_con_score_np", "=", "temp_att_con_score_np", "[", ":", ",", "cls_prediction", "]", "\n", "\n", "\n", "test_tmp_data_log_dict", "[", "vid_name", "[", "0", "]", "]", "[", "\"temp_cls_score_np\"", "]", "=", "temp_cls_score_np", "\n", "\n", "int_temp_cls_scores", "=", "upgrade_resolution", "(", "temp_cls_score_np", ",", "args", ".", "test_upgrade_scale", ")", "\n", "int_temp_att_ins_score_np", "=", "upgrade_resolution", "(", "temp_att_ins_score_np", ",", "args", ".", "test_upgrade_scale", ")", "\n", "int_temp_att_con_score_np", "=", "upgrade_resolution", "(", "temp_att_con_score_np", ",", "args", ".", "test_upgrade_scale", ")", "\n", "\n", "\n", "cas_act_thresh", "=", "[", "0.005", ",", "0.01", ",", "0.015", ",", "0.02", "]", "\n", "att_act_thresh", "=", "[", "0.005", ",", "0.01", ",", "0.015", ",", "0.02", "]", "\n", "\n", "proposal_dict", "=", "{", "}", "\n", "# CAS based proposal generation", "\n", "# cas_act_thresh = []", "\n", "for", "act_thresh", "in", "cas_act_thresh", ":", "\n", "\n", "            ", "tmp_int_cas", "=", "int_temp_cls_scores", ".", "copy", "(", ")", "\n", "zero_location", "=", "np", ".", "where", "(", "tmp_int_cas", "<", "act_thresh", ")", "\n", "tmp_int_cas", "[", "zero_location", "]", "=", "0", "\n", "\n", "tmp_seg_list", "=", "[", "]", "\n", "for", "c_idx", "in", "range", "(", "len", "(", "cls_prediction", ")", ")", ":", "\n", "                ", "pos", "=", "np", ".", "where", "(", "tmp_int_cas", "[", ":", ",", "c_idx", "]", ">=", "act_thresh", ")", "\n", "tmp_seg_list", ".", "append", "(", "pos", ")", "\n", "\n", "", "props_list", "=", "get_proposal_oic", "(", "tmp_seg_list", ",", "(", "0.70", "*", "tmp_int_cas", "+", "0.30", "*", "int_temp_att_ins_score_np", ")", ",", "cls_prediction", ",", "score_np", ",", "t_factor", ",", "lamb", "=", "0.150", ",", "gamma", "=", "0.0", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "props_list", ")", ")", ":", "\n", "                ", "if", "len", "(", "props_list", "[", "i", "]", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "class_id", "=", "props_list", "[", "i", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "if", "class_id", "not", "in", "proposal_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "proposal_dict", "[", "class_id", "]", "=", "[", "]", "\n", "\n", "", "proposal_dict", "[", "class_id", "]", "+=", "props_list", "[", "i", "]", "\n", "\n", "# att_act_thresh = []", "\n", "", "", "for", "att_thresh", "in", "att_act_thresh", ":", "\n", "\n", "            ", "tmp_int_att", "=", "int_temp_att_ins_score_np", ".", "copy", "(", ")", "\n", "zero_location", "=", "np", ".", "where", "(", "tmp_int_att", "<", "att_thresh", ")", "\n", "tmp_int_att", "[", "zero_location", "]", "=", "0", "\n", "\n", "tmp_seg_list", "=", "[", "]", "\n", "for", "c_idx", "in", "range", "(", "len", "(", "cls_prediction", ")", ")", ":", "\n", "                ", "pos", "=", "np", ".", "where", "(", "tmp_int_att", "[", ":", ",", "c_idx", "]", ">=", "att_thresh", ")", "\n", "tmp_seg_list", ".", "append", "(", "pos", ")", "\n", "\n", "", "props_list", "=", "get_proposal_oic", "(", "tmp_seg_list", ",", "(", "0.70", "*", "int_temp_cls_scores", "+", "0.30", "*", "tmp_int_att", ")", ",", "cls_prediction", ",", "score_np", ",", "t_factor", ",", "lamb", "=", "0.150", ",", "gamma", "=", "0.250", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "props_list", ")", ")", ":", "\n", "                ", "if", "len", "(", "props_list", "[", "i", "]", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "class_id", "=", "props_list", "[", "i", "]", "[", "0", "]", "[", "0", "]", "\n", "\n", "if", "class_id", "not", "in", "proposal_dict", ".", "keys", "(", ")", ":", "\n", "                    ", "proposal_dict", "[", "class_id", "]", "=", "[", "]", "\n", "\n", "", "proposal_dict", "[", "class_id", "]", "+=", "props_list", "[", "i", "]", "\n", "\n", "# NMS ", "\n", "", "", "final_proposals", "=", "[", "]", "\n", "\n", "for", "class_id", "in", "proposal_dict", ".", "keys", "(", ")", ":", "\n", "            ", "final_proposals", ".", "append", "(", "nms", "(", "proposal_dict", "[", "class_id", "]", ",", "args", ".", "nms_thresh", ")", ")", "\n", "\n", "", "test_final_result", "[", "'results'", "]", "[", "vid_name", "[", "0", "]", "]", "=", "result2json", "(", "final_proposals", ",", "args", ".", "class_name_lst", ")", "\n", "\n", "", "test_acc", "=", "test_num_correct", "/", "test_num_total", "\n", "\n", "if", "args", ".", "test", ":", "\n", "# Final Test", "\n", "        ", "test_pred_txt_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"final_test_pred.txt\"", ")", "\n", "test_label_txt_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"final_test_label.txt\"", ")", "\n", "test_final_json_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"final_test_{}_result.json\"", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "", "else", ":", "\n", "# Train Evalutaion", "\n", "        ", "test_pred_txt_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"test_pred.txt\"", ")", "\n", "test_label_txt_f", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"test_label.txt\"", ")", "\n", "test_final_json_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"{}_lateset_result.json\"", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "\n", "", "np", ".", "savetxt", "(", "test_pred_txt_f", ",", "np", ".", "array", "(", "test_pred_score_stack", ")", ",", "fmt", "=", "\"%.3f\"", ")", "\n", "np", ".", "savetxt", "(", "test_label_txt_f", ",", "np", ".", "array", "(", "test_vid_label_stack", ")", ",", "fmt", "=", "\"%.3f\"", ")", "\n", "\n", "with", "open", "(", "test_final_json_path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "test_final_result", ",", "f", ")", "\n", "\n", "", "anet_detection", "=", "ANETDetection", "(", "ground_truth_file", "=", "args", ".", "test_gt_file_path", ",", "\n", "prediction_file", "=", "test_final_json_path", ",", "\n", "tiou_thresholds", "=", "args", ".", "tiou_thresholds", ",", "\n", "subset", "=", "\"val\"", ")", "\n", "\n", "test_mAP", "=", "anet_detection", ".", "evaluate", "(", ")", "\n", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"test_act_inst_cls_loss:{:.3f}  test_act_cont_cls_loss:{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "act_inst_loss_stack", ")", ",", "np", ".", "mean", "(", "act_cont_loss_stack", ")", ")", ")", "\n", "print", "(", "\"test_act_back_cls_loss:{:.3f}  test_att_loss:{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "act_back_loss_stack", ")", ",", "np", ".", "mean", "(", "att_loss_stack", ")", ")", ")", "\n", "print", "(", "\"test_feat_norm_loss:   {:.3f}  test_loss:{:.3f}\"", ".", "format", "(", "np", ".", "mean", "(", "feat_loss_stack", ")", ",", "np", ".", "mean", "(", "loss_stack", ")", ")", ")", "\n", "print", "(", "\"test acc:{:.3f}\"", ".", "format", "(", "test_acc", ")", ")", "\n", "print", "(", "\"-------------------------------------------------------------------------------\"", ")", "\n", "\n", "test_log_dict", "=", "{", "}", "\n", "test_log_dict", "[", "\"test_act_inst_cls_loss\"", "]", "=", "np", ".", "mean", "(", "act_inst_loss_stack", ")", "\n", "test_log_dict", "[", "\"test_act_cont_cls_loss\"", "]", "=", "np", ".", "mean", "(", "act_cont_loss_stack", ")", "\n", "test_log_dict", "[", "\"test_act_back_cls_loss\"", "]", "=", "np", ".", "mean", "(", "act_back_loss_stack", ")", "\n", "test_log_dict", "[", "\"test_feat_loss\"", "]", "=", "np", ".", "mean", "(", "feat_loss_stack", ")", "\n", "test_log_dict", "[", "\"test_att_loss\"", "]", "=", "np", ".", "mean", "(", "att_loss_stack", ")", "\n", "test_log_dict", "[", "\"test_loss\"", "]", "=", "np", ".", "mean", "(", "loss_stack", ")", "\n", "test_log_dict", "[", "\"test_acc\"", "]", "=", "test_acc", "\n", "test_log_dict", "[", "\"test_mAP\"", "]", "=", "test_mAP", "\n", "\n", "return", "test_log_dict", ",", "test_tmp_data_log_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.None.main_act.main": [[325, 423], ["torch.multiprocessing.set_sharing_strategy", "torch.device", "os.path.join", "model.ACMNet.ACMNet", "model.to.to", "time.localtime", "os.path.dirname", "os.path.join", "os.path.dirname", "os.path.isdir", "os.makedirs", "os.path.isfile", "torch.load", "model.to.load_state_dict", "torch.optim.Adam", "dataset.dataset_class.build_dataset", "dataset.dataset_class.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "utils.net_utils.ACMLoss", "tqdm.tqdm", "dataset.dataset_class.build_dataset", "torch.utils.data.DataLoader", "utils.net_utils.ACMLoss", "torch.cuda.is_available", "wandb.init", "model.to.parameters", "range", "main_act.train", "torch.no_grad", "main_act.test", "torch.device", "torch.save", "print", "print", "wandb.log", "wandb.log", "open", "pickle.dump", "torch.no_grad", "main_act.test", "torch.save", "os.path.join", "os.path.join", "os.path.join", "open", "pickle.dump", "model.to.state_dict", "model.to.state_dict", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.build_dataset", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.build_dataset", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.build_dataset", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.None.main_act.train", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.None.main_act.test", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.None.main_act.test"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "torch", ".", "multiprocessing", ".", "set_sharing_strategy", "(", "'file_system'", ")", "\n", "\n", "os", ".", "environ", "[", "'CUDA_VIVIBLE_DEVICES'", "]", "=", "args", ".", "gpu", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "args", ".", "gpu", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "local_time", "=", "time", ".", "localtime", "(", ")", "[", "0", ":", "5", "]", "\n", "this_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\".\"", ")", "\n", "if", "not", "args", ".", "test", ":", "\n", "        ", "save_dir", "=", "os", ".", "path", ".", "join", "(", "this_dir", ",", "\"checkpoints_acmnet\"", ",", "\"checkpoints_acmnet_{:02d}_{:02d}_{:02d}_{:02d}_{:02d}\"", ".", "format", "(", "local_time", "[", "0", "]", ",", "local_time", "[", "1", "]", ",", "local_time", "[", "2", "]", ",", "local_time", "[", "3", "]", ",", "local_time", "[", "4", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "save_dir", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "checkpoint", ")", "\n", "\n", "", "args", ".", "save_dir", "=", "save_dir", "\n", "args", ".", "device", "=", "device", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "model", "=", "ACMNet", "(", "args", ")", "\n", "\n", "if", "args", ".", "checkpoint", "is", "not", "None", "and", "os", ".", "path", ".", "isfile", "(", "args", ".", "checkpoint", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "checkpoint", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model_state_dict\"", "]", ")", "\n", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "if", "not", "args", ".", "test", ":", "\n", "        ", "if", "not", "args", ".", "without_wandb", ":", "\n", "            ", "wandb", ".", "init", "(", "name", "=", "'traing_log_{:02d}_{:02d}_{:02d}_{:02d}_{:02d}'", ".", "format", "(", "local_time", "[", "0", "]", ",", "local_time", "[", "1", "]", ",", "local_time", "[", "2", "]", ",", "\n", "local_time", "[", "3", "]", ",", "local_time", "[", "4", "]", ")", ",", "\n", "config", "=", "args", ",", "\n", "project", "=", "\"ACMNet_{}\"", ".", "format", "(", "args", ".", "dataset", ")", ",", "\n", "sync_tensorboard", "=", "True", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "# optimizer = torch.optim.Adam(model.parameters(), lr=0.0001, betas=(0.9, 0.999), weight_decay=0.0005)", "\n", "\n", "train_dataset", "=", "build_dataset", "(", "args", ",", "phase", "=", "\"train\"", ",", "sample", "=", "\"random\"", ")", "\n", "test_dataset", "=", "build_dataset", "(", "args", ",", "phase", "=", "\"test\"", ",", "sample", "=", "\"uniform\"", ")", "\n", "\n", "train_dataloader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "test_dataloader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "criterion", "=", "ACMLoss", "(", "lamb1", "=", "args", ".", "loss_lamb_1", ",", "lamb2", "=", "args", ".", "loss_lamb_2", ",", "lamb3", "=", "args", ".", "loss_lamb_3", ",", "dataset", "=", "\"ActivityNet\"", ")", "\n", "\n", "best_test_mAP", "=", "0", "\n", "\n", "for", "epoch_idx", "in", "tqdm", "(", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ")", ":", "\n", "\n", "            ", "train_log_dict", "=", "train", "(", "args", ",", "model", ",", "train_dataloader", ",", "criterion", ",", "optimizer", ")", "\n", "if", "epoch_idx", "%", "2", "==", "0", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "test_log_dict", ",", "test_tmp_data_log_dict", "=", "test", "(", "args", ",", "model", ",", "test_dataloader", ",", "criterion", ")", "\n", "test_mAP", "=", "test_log_dict", "[", "\"test_mAP\"", "]", "\n", "\n", "", "if", "test_mAP", ">", "best_test_mAP", ":", "\n", "                    ", "best_test_mAP", "=", "test_mAP", "\n", "checkpoint_file", "=", "\"{}_best_checkpoint.pth\"", ".", "format", "(", "args", ".", "dataset", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch_idx", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "save_dir", ",", "checkpoint_file", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"test_tmp_data_log_dict.pickle\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                        ", "pickle", ".", "dump", "(", "test_tmp_data_log_dict", ",", "f", ")", "\n", "\n", "", "", "checkpoint_file", "=", "\"{}_latest_checkpoint.pth\"", ".", "format", "(", "args", ".", "dataset", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch_idx", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", "\n", "}", ",", "os", ".", "path", ".", "join", "(", "save_dir", ",", "checkpoint_file", ")", ")", "\n", "\n", "print", "(", "\"Current test_mAP:{:.4f}, Current Best test_mAP:{:.4f} Current Epoch:{}/{}\"", ".", "format", "(", "test_mAP", ",", "best_test_mAP", ",", "epoch_idx", ",", "args", ".", "epochs", ")", ")", "\n", "print", "(", "\"-------------------------------------------------------------------------------\"", ")", "\n", "\n", "", "if", "not", "args", ".", "without_wandb", ":", "\n", "                ", "wandb", ".", "log", "(", "train_log_dict", ")", "\n", "wandb", ".", "log", "(", "test_log_dict", ")", "\n", "\n", "", "", "", "else", ":", "\n", "        ", "test_dataset", "=", "build_dataset", "(", "args", ",", "phase", "=", "\"test\"", ",", "sample", "=", "\"uniform\"", ")", "\n", "test_dataloader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "criterion", "=", "ACMLoss", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "test_log_dict", ",", "test_tmp_data_log_dict", "=", "test", "(", "args", ",", "model", ",", "test_dataloader", ",", "criterion", ")", "\n", "test_mAP", "=", "test_log_dict", "[", "\"test_mAP\"", "]", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"test_tmp_data_log_dict.pickle\"", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "test_tmp_data_log_dict", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.ANETDetection.__init__": [[323, 352], ["numpy.linspace", "net_evaluation.ANETDetection._import_ground_truth", "net_evaluation.ANETDetection._import_prediction", "IOError", "IOError", "print", "print", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.ANETDetection._import_ground_truth", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.ANETDetection._import_prediction"], ["def", "__init__", "(", "self", ",", "ground_truth_file", "=", "None", ",", "prediction_file", "=", "None", ",", "ground_truth_fields", "=", "GROUND_TRUTH_FIELDS", ",", "prediction_fields", "=", "PREDICTION_FIELDS", ",", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.1", ",", "0.9", ",", "9", ")", ",", "subset", "=", "\"validation\"", ",", "verbose", "=", "True", ",", "check_status", "=", "True", ")", ":", "\n", "\n", "        ", "if", "not", "ground_truth_file", ":", "\n", "            ", "raise", "IOError", "(", "\"No specified ground_truth file.\"", ")", "\n", "", "if", "not", "prediction_file", ":", "\n", "            ", "raise", "IOError", "(", "\"No specified prediction file.\"", ")", "\n", "\n", "", "self", ".", "subset", "=", "subset", "\n", "self", ".", "tiou_thresholds", "=", "tiou_thresholds", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "gt_fields", "=", "ground_truth_fields", "\n", "self", ".", "pred_fields", "=", "prediction_fields", "\n", "self", ".", "ap", "=", "None", "\n", "self", ".", "check_status", "=", "check_status", "\n", "\n", "self", ".", "blocked_videos", "=", "[", "]", "\n", "\n", "self", ".", "ground_truth", ",", "self", ".", "activity_index", "=", "self", ".", "_import_ground_truth", "(", "ground_truth_file", ")", "\n", "self", ".", "prediction", "=", "self", ".", "_import_prediction", "(", "prediction_file", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "# print(\"[INIT] Loaded annotations from {} subset.\".format(subset))", "\n", "            ", "print", "(", "\"\\n\\t Number of ground truth instances: {}\"", ".", "format", "(", "len", "(", "self", ".", "ground_truth", ")", ")", ")", "\n", "print", "(", "\"\\t Number of predictions: {}\"", ".", "format", "(", "len", "(", "self", ".", "prediction", ")", ")", ")", "\n", "# print(\"\\t Specified Temporal IOU:{}\".format(self.tiou_thresholds))", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.ANETDetection._import_ground_truth": [[355, 402], ["data[].items", "pandas.DataFrame", "print", "open", "json.load", "all", "IOError", "len", "video_lst.append", "t_start_lst.append", "t_end_lst.append", "label_lst.append", "float", "float", "json.load.keys"], "methods", ["None"], ["", "", "def", "_import_ground_truth", "(", "self", ",", "ground_truth_file_name", ")", ":", "\n", "        ", "\"\"\"Reads ground truth file, checks if it is well formatted, and returns\n           the ground truth instances and the activity classes.\n\n        Parameters\n        ----------\n        ground_truth_file_name : str\n            Full path to the ground truth json file.\n\n        Outputs\n        -------\n        ground_truth : df\n            Data frame containing the ground truth instances.\n        activity_index : dict\n            Dictionary containing class index.\n        \"\"\"", "\n", "with", "open", "(", "ground_truth_file_name", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "if", "not", "all", "(", "[", "field", "in", "data", ".", "keys", "(", ")", "for", "field", "in", "self", ".", "gt_fields", "]", ")", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid ground_truth file.'", ")", "\n", "\n", "# Load Ground Truth data.", "\n", "", "activity_index", ",", "cidx", "=", "{", "}", ",", "0", "\n", "video_lst", ",", "t_start_lst", ",", "t_end_lst", ",", "label_lst", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "video_id", ",", "v", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "subset", "!=", "v", "[", "'subset'", "]", ":", "\n", "                ", "continue", "\n", "", "if", "video_id", "in", "self", ".", "blocked_videos", ":", "\n", "                ", "continue", "\n", "", "for", "ann", "in", "v", "[", "'annotations'", "]", ":", "\n", "                ", "if", "ann", "[", "'label'", "]", "not", "in", "activity_index", ":", "\n", "                    ", "activity_index", "[", "ann", "[", "'label'", "]", "]", "=", "cidx", "\n", "cidx", "+=", "1", "\n", "", "video_lst", ".", "append", "(", "video_id", ")", "\n", "t_start_lst", ".", "append", "(", "float", "(", "ann", "[", "'segment'", "]", "[", "0", "]", ")", ")", "\n", "t_end_lst", ".", "append", "(", "float", "(", "ann", "[", "'segment'", "]", "[", "1", "]", ")", ")", "\n", "label_lst", ".", "append", "(", "activity_index", "[", "ann", "[", "'label'", "]", "]", ")", "\n", "\n", "", "", "ground_truth", "=", "pd", ".", "DataFrame", "(", "{", "'video-id'", ":", "video_lst", ",", "\n", "'t-start'", ":", "t_start_lst", ",", "\n", "'t-end'", ":", "t_end_lst", ",", "\n", "'label'", ":", "label_lst", "}", ")", "\n", "\n", "print", "(", "len", "(", "activity_index", ")", ")", "\n", "\n", "return", "ground_truth", ",", "activity_index", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.ANETDetection._import_prediction": [[404, 443], ["predict_data[].items", "pandas.DataFrame", "open", "json.load", "all", "IOError", "video_lst.append", "t_start_lst.append", "t_end_lst.append", "label_lst.append", "score_lst.append", "float", "float", "float", "json.load.keys"], "methods", ["None"], ["", "def", "_import_prediction", "(", "self", ",", "prediction_file_name", ")", ":", "\n", "        ", "\"\"\"Reads prediction file, checks if it is well formatted, and returns\n           the prediction instances.\n\n        Parameters\n        ----------\n        prediction_filename : str\n            Full path to the prediction json file.\n\n        Outputs\n        -------\n        prediction : df\n            Data frame containing the prediction instances.\n        \"\"\"", "\n", "with", "open", "(", "prediction_file_name", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "predict_data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "if", "not", "all", "(", "[", "field", "in", "predict_data", ".", "keys", "(", ")", "for", "field", "in", "self", ".", "pred_fields", "]", ")", ":", "\n", "            ", "raise", "IOError", "(", "\"Pelase input a valid prediction file\"", ")", "\n", "\n", "", "video_lst", ",", "t_start_lst", ",", "t_end_lst", ",", "label_lst", ",", "score_lst", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "video_id", ",", "v", "in", "predict_data", "[", "'results'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "video_id", "in", "self", ".", "blocked_videos", ":", "\n", "                ", "continue", "\n", "", "for", "pred", "in", "v", ":", "\n", "                ", "label", "=", "self", ".", "activity_index", "[", "pred", "[", "'label'", "]", "]", "\n", "video_lst", ".", "append", "(", "video_id", ")", "\n", "t_start_lst", ".", "append", "(", "float", "(", "pred", "[", "'segment'", "]", "[", "0", "]", ")", ")", "\n", "t_end_lst", ".", "append", "(", "float", "(", "pred", "[", "'segment'", "]", "[", "1", "]", ")", ")", "\n", "label_lst", ".", "append", "(", "label", ")", "\n", "score_lst", ".", "append", "(", "float", "(", "pred", "[", "'score'", "]", ")", ")", "\n", "\n", "", "", "prediction", "=", "pd", ".", "DataFrame", "(", "{", "'video-id'", ":", "video_lst", ",", "\n", "'t-start'", ":", "t_start_lst", ",", "\n", "'t-end'", ":", "t_end_lst", ",", "\n", "'label'", ":", "label_lst", ",", "\n", "'score'", ":", "score_lst", "}", ")", "\n", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.ANETDetection._get_predictions_with_label": [[445, 454], ["prediction_by_label.get_group().reset_index", "prediction_by_label.get_group"], "methods", ["None"], ["", "def", "_get_predictions_with_label", "(", "self", ",", "prediction_by_label", ",", "label_name", ",", "cidx", ")", ":", "\n", "        ", "\"\"\"Get all predicitons of the given label. Return empty DataFrame if there\n        is no predcitions with the given label.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "return", "prediction_by_label", ".", "get_group", "(", "cidx", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "", "except", ":", "\n", "# print(\"Warning: No predictions of label {} were provided\".format(label_name))", "\n", "            ", "return", "pd", ".", "DataFrame", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.ANETDetection.wrapper_compute_average_precision": [[455, 473], ["numpy.zeros", "net_evaluation.ANETDetection.ground_truth.groupby", "net_evaluation.ANETDetection.prediction.groupby", "enumerate", "joblib.Parallel", "net_evaluation.ANETDetection.activity_index.values", "len", "len", "joblib.delayed", "net_evaluation.ANETDetection.activity_index.items", "net_evaluation.ANETDetection.get_group().reset_index", "net_evaluation.ANETDetection._get_predictions_with_label", "net_evaluation.ANETDetection.get_group"], "methods", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.ANETDetection._get_predictions_with_label"], ["", "", "def", "wrapper_compute_average_precision", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes average precision for each class in the subset.\n        \"\"\"", "\n", "ap", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "tiou_thresholds", ")", ",", "len", "(", "self", ".", "activity_index", ")", ")", ")", "\n", "\n", "ground_truth_by_label", "=", "self", ".", "ground_truth", ".", "groupby", "(", "'label'", ")", "\n", "prediction_by_label", "=", "self", ".", "prediction", ".", "groupby", "(", "'label'", ")", "\n", "\n", "results", "=", "Parallel", "(", "n_jobs", "=", "10", ")", "(", "delayed", "(", "compute_average_precision_detection", ")", "(", "\n", "ground_truth", "=", "ground_truth_by_label", ".", "get_group", "(", "cidx", ")", ".", "reset_index", "(", "drop", "=", "True", ")", ",", "\n", "prediction", "=", "self", ".", "_get_predictions_with_label", "(", "prediction_by_label", ",", "label_name", ",", "cidx", ")", ",", "\n", "tiou_thresholds", "=", "self", ".", "tiou_thresholds", ",", "\n", ")", "for", "label_name", ",", "cidx", "in", "self", ".", "activity_index", ".", "items", "(", ")", ")", "\n", "\n", "for", "i", ",", "cidx", "in", "enumerate", "(", "self", ".", "activity_index", ".", "values", "(", ")", ")", ":", "\n", "            ", "ap", "[", ":", ",", "cidx", "]", "=", "results", "[", "i", "]", "\n", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.ANETDetection.evaluate": [[474, 493], ["net_evaluation.ANETDetection.wrapper_compute_average_precision", "net_evaluation.ANETDetection.ap.mean", "net_evaluation.ANETDetection.mAP.reshape", "net_evaluation.ANETDetection.mAP.mean", "print", "print", "print", "print", "print", "print", "print", "len"], "methods", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.ANETDetection.wrapper_compute_average_precision"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Evaluates a prediction file. For the detection task we measure the\n        interpolated mean average precision to measure the performance of a\n        method.\n        \"\"\"", "\n", "self", ".", "ap", "=", "self", ".", "wrapper_compute_average_precision", "(", ")", "\n", "self", ".", "mAP", "=", "self", ".", "ap", ".", "mean", "(", "axis", "=", "1", ")", "\n", "self", ".", "mAP", "=", "self", ".", "mAP", ".", "reshape", "(", "len", "(", "self", ".", "mAP", ")", ")", "\n", "self", ".", "average_mAP", "=", "self", ".", "mAP", ".", "mean", "(", ")", "\n", "\n", "print", "(", "\"-------------------------------------------------------------------------------\"", ")", "\n", "print", "(", "'|t-IoU |{}|'", ".", "format", "(", "\"||\"", ".", "join", "(", "[", "\"{:.3f}\"", ".", "format", "(", "item", ")", "for", "item", "in", "self", ".", "tiou_thresholds", "]", ")", ")", ")", "\n", "print", "(", "\"-------------------------------------------------------------------------------\"", ")", "\n", "print", "(", "'|mAP   |{}|'", ".", "format", "(", "\"||\"", ".", "join", "(", "[", "\"{:.3f}\"", ".", "format", "(", "item", ")", "for", "item", "in", "self", ".", "mAP", "]", ")", ")", ")", "\n", "print", "(", "\"-------------------------------------------------------------------------------\"", ")", "\n", "print", "(", "'|Average-mAP: {:.4f}'", ".", "format", "(", "self", ".", "average_mAP", ")", ")", "\n", "print", "(", "\"-------------------------------------------------------------------------------\"", ")", "\n", "\n", "return", "self", ".", "average_mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.get_wtCAM": [[15, 30], ["None"], "function", ["None"], ["def", "get_wtCAM", "(", "temp_cls_scores", ",", "temp_attention", ",", "pred_cls", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the temporal weighted classification scores for the pred_cls\n\n    Args:\n        tCAM ([T x Cls_Dim]): \n        temporal_attention ([T x 1]): \n        pred_cls ([Cls_Dim]): specify which class we interested, could be multi-hot predicted cls vector\n    \"\"\"", "\n", "# temp_att_cls_scores = temp_cls_scores * temp_attention", "\n", "# temp_att_cls_scores = (temp_cls_scores + temp_attention) / 2.0", "\n", "temp_att_cls_scores", "=", "temp_cls_scores", "\n", "temp_att_cls_scores", "=", "temp_att_cls_scores", "[", ":", ",", "pred_cls", "]", "\n", "\n", "return", "temp_att_cls_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.upgrade_resolution": [[31, 37], ["numpy.arange", "scipy.interpolate.interp1d", "numpy.arange", "interpolate.interp1d."], "function", ["None"], ["", "def", "upgrade_resolution", "(", "arr", ",", "scale", ")", ":", "\n", "    ", "x", "=", "np", ".", "arange", "(", "0", ",", "arr", ".", "shape", "[", "0", "]", ")", "\n", "f", "=", "interpolate", ".", "interp1d", "(", "x", ",", "arr", ",", "kind", "=", "'linear'", ",", "axis", "=", "0", ",", "fill_value", "=", "'extrapolate'", ")", "\n", "scale_x", "=", "np", ".", "arange", "(", "0", ",", "arr", ".", "shape", "[", "0", "]", ",", "1", "/", "scale", ")", "\n", "up_scale", "=", "f", "(", "scale_x", ")", "\n", "return", "up_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.temporal_interpolation": [[39, 57], ["numpy.arange", "scipy.interpolate.interp1d", "numpy.arange", "interpolate.interp1d."], "function", ["None"], ["", "def", "temporal_interpolation", "(", "temp_data", ",", "scale", ")", ":", "\n", "    ", "\"\"\"\n    Temporal Linear Interpolation Func.\n    Args:\n        temp_data ([T, dim]): the target array needed to be interpolated.\n        scale ([int / float]): temporal interpoalted coefficient.\n\n    Returns:\n        np.array [T x scale, dim]: temporal intepolated arrays\n    \"\"\"", "\n", "\n", "temp_len", "=", "temp_data", ".", "shape", "[", "0", "]", "\n", "temp_x", "=", "np", ".", "arange", "(", "temp_len", ")", "\n", "f", "=", "interpolate", ".", "interp1d", "(", "temp_x", ",", "temp_data", ",", "axis", "=", "0", ",", "kind", "=", "\"linear\"", ",", "fill_value", "=", "\"extrapolate\"", ")", "\n", "int_temp_x", "=", "np", ".", "arange", "(", "0", ",", "temp_len", ",", "step", "=", "1", "/", "scale", ")", "\n", "temp_data", "=", "f", "(", "int_temp_x", ")", "\n", "\n", "return", "temp_data", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.get_tempseg_list": [[58, 83], ["range", "temp.append", "numpy.where", "numpy.where", "ValueError"], "function", ["None"], ["", "def", "get_tempseg_list", "(", "temp_att_cls_scores", ",", "temp_attention", ",", "thr", "=", "0.1", ",", "dataset", "=", "\"THUMOS\"", ")", ":", "\n", "    ", "\"\"\"\n    Return the index where the temp_att_cls_scores are greater than the threshold\n    Args:\n        temp_att_cls_scores ([temp_len x c_len]): [temp_attention_weighted action class classification scores]\n        temp_attention ([temp_len x 1]): [temp_attention]\n        thr (float, optional): [threshod]. Defaults to 0.05.\n    \"\"\"", "\n", "temp", "=", "[", "]", "\n", "c_len", "=", "temp_att_cls_scores", ".", "shape", "[", "1", "]", "\n", "for", "c_idx", "in", "range", "(", "c_len", ")", ":", "\n", "        ", "if", "dataset", "==", "\"THUMOS\"", ":", "\n", "# the return of np.where is a tuple. such as (array([], dtype=int64), )", "\n", "# pos = np.where((0.8 * temp_att_cls_scores[:, c_idx] + 0.2 * temp_attention[:, 0] * temp_attention[:, 0]) > thr)", "\n", "            ", "pos", "=", "np", ".", "where", "(", "temp_att_cls_scores", "[", ":", ",", "c_idx", "]", ">", "thr", ")", "\n", "", "elif", "dataset", "==", "\"ActivityNet\"", ":", "\n", "# The previous work apply a gaussian_filter for the ActivityNet temp_attention_cls_map", "\n", "\n", "            ", "pos", "=", "np", ".", "where", "(", "temp_att_cls_scores", "[", ":", ",", "c_idx", "]", ">", "thr", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"WRONG DATASET when obtaining the tempseg_list\"", ")", "\n", "\n", "", "temp", ".", "append", "(", "pos", ")", "\n", "\n", "", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.grouping": [[84, 89], ["numpy.split", "numpy.where", "numpy.diff"], "function", ["None"], ["", "def", "grouping", "(", "arr", ")", ":", "\n", "    ", "\"\"\"\n    Group the connected results\n    \"\"\"", "\n", "return", "np", ".", "split", "(", "arr", ",", "np", ".", "where", "(", "np", ".", "diff", "(", "arr", ")", "!=", "1", ")", "[", "0", "]", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.get_temp_proposal": [[90, 142], ["int_temp_scores.reshape.reshape", "range", "numpy.array", "np.array.any", "temp_proposal.append", "net_evaluation.grouping", "range", "len", "c_temp_proposal.append", "max", "numpy.arange", "numpy.mean", "min", "numpy.arange", "numpy.mean", "numpy.mean", "len", "len"], "function", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.grouping"], ["", "def", "get_temp_proposal", "(", "tempseg_list", ",", "int_temp_scores", ",", "c_pred", ",", "c_pred_scores", ",", "t_factor", ")", ":", "\n", "    ", "\"\"\"\n    Obtaining the action instance porposals.\n    \n    Args:\n        tempseg_list ([type]): [description]\n        int_temp_scores ([type]): [description]\n        c_pred ([type]): [description]\n        t_factor ([type]): [description]\n\n    Returns:\n        [type]: [description]\n    \"\"\"", "\n", "\n", "temp_proposal", "=", "[", "]", "\n", "temp_len", "=", "int_temp_scores", ".", "shape", "[", "0", "]", "\n", "int_temp_scores", "=", "int_temp_scores", ".", "reshape", "(", "temp_len", ",", "-", "1", ")", "\n", "c_len", "=", "int_temp_scores", ".", "shape", "[", "1", "]", "\n", "\n", "for", "c_idx", "in", "range", "(", "c_len", ")", ":", "\n", "        ", "c_temp_proposal", "=", "[", "]", "\n", "c_temp_seg_list", "=", "np", ".", "array", "(", "tempseg_list", "[", "c_idx", "]", "[", "0", "]", ")", "\n", "if", "c_temp_seg_list", ".", "any", "(", ")", ":", "\n", "            ", "grouped_c_temp_list", "=", "grouping", "(", "c_temp_seg_list", ")", "\n", "# Apply the Outer-Inner-Contrasive func as score function", "\n", "for", "j", "in", "range", "(", "len", "(", "grouped_c_temp_list", ")", ")", ":", "\n", "\n", "                ", "if", "grouped_c_temp_list", "[", "j", "]", "[", "0", "]", ">", "0", ":", "\n", "                    ", "left_bound", "=", "max", "(", "0", ",", "grouped_c_temp_list", "[", "j", "]", "[", "0", "]", "-", "len", "(", "grouped_c_temp_list", "[", "j", "]", ")", "//", "4", "-", "1", ")", "\n", "left_outer_idxs", "=", "np", ".", "arange", "(", "left_bound", ",", "grouped_c_temp_list", "[", "j", "]", "[", "0", "]", ")", "\n", "c_left_outer", "=", "np", ".", "mean", "(", "int_temp_scores", "[", "left_outer_idxs", ",", "c_idx", "]", ")", "\n", "", "else", ":", "\n", "                    ", "c_left_outer", "=", "0", "\n", "\n", "", "if", "grouped_c_temp_list", "[", "j", "]", "[", "-", "1", "]", "<", "temp_len", "-", "1", ":", "\n", "                    ", "right_bound", "=", "min", "(", "temp_len", ",", "grouped_c_temp_list", "[", "j", "]", "[", "-", "1", "]", "+", "len", "(", "grouped_c_temp_list", "[", "j", "]", ")", "//", "4", "+", "1", ")", "\n", "right_outer_idxs", "=", "np", ".", "arange", "(", "grouped_c_temp_list", "[", "j", "]", "[", "-", "1", "]", ",", "right_bound", ")", "\n", "c_right_outer", "=", "np", ".", "mean", "(", "int_temp_scores", "[", "right_outer_idxs", ",", "c_idx", "]", ")", "\n", "", "else", ":", "\n", "                    ", "c_right_outer", "=", "0", "\n", "\n", "", "c_scores", "=", "np", ".", "mean", "(", "int_temp_scores", "[", "grouped_c_temp_list", "[", "j", "]", ",", "c_idx", "]", ")", "-", "(", "c_left_outer", "+", "c_right_outer", ")", "/", "2", "+", "0.3", "*", "c_pred_scores", "[", "c_idx", "]", "\n", "\n", "t_start", "=", "grouped_c_temp_list", "[", "j", "]", "[", "0", "]", "*", "t_factor", "\n", "t_end", "=", "grouped_c_temp_list", "[", "j", "]", "[", "-", "1", "]", "*", "t_factor", "\n", "# if t_end - t_start < 0.1:", "\n", "#     continue", "\n", "c_temp_proposal", ".", "append", "(", "[", "c_pred", "[", "c_idx", "]", ",", "c_scores", ",", "t_start", ",", "t_end", "]", ")", "\n", "\n", "", "", "temp_proposal", ".", "append", "(", "c_temp_proposal", ")", "\n", "\n", "", "return", "temp_proposal", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.get_proposal_oic": [[143, 174], ["range", "len", "temp_list.any", "numpy.array", "net_evaluation.grouping", "range", "temp.append", "len", "numpy.mean", "len", "max", "min", "c_temp.append", "len", "int", "int", "int", "list", "list", "len", "numpy.mean", "range", "range", "int", "int"], "function", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.grouping"], ["", "def", "get_proposal_oic", "(", "tempseg_list", ",", "int_temp_scores", ",", "c_pred", ",", "c_pred_scores", ",", "t_factor", ",", "lamb", "=", "0.25", ",", "gamma", "=", "0.20", ")", ":", "# [0.25, 0.20]", "\n", "    ", "temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "tempseg_list", ")", ")", ":", "\n", "        ", "c_temp", "=", "[", "]", "\n", "temp_list", "=", "np", ".", "array", "(", "tempseg_list", "[", "i", "]", ")", "[", "0", "]", "\n", "if", "temp_list", ".", "any", "(", ")", ":", "\n", "            ", "grouped_temp_list", "=", "grouping", "(", "temp_list", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "grouped_temp_list", ")", ")", ":", "\n", "                ", "if", "len", "(", "grouped_temp_list", "[", "j", "]", ")", "<", "2", ":", "\n", "                    ", "continue", "\n", "\n", "", "inner_score", "=", "np", ".", "mean", "(", "int_temp_scores", "[", "grouped_temp_list", "[", "j", "]", ",", "i", "]", ")", "\n", "\n", "len_proposal", "=", "len", "(", "grouped_temp_list", "[", "j", "]", ")", "\n", "outer_s", "=", "max", "(", "0", ",", "int", "(", "grouped_temp_list", "[", "j", "]", "[", "0", "]", "-", "lamb", "*", "len_proposal", ")", ")", "\n", "outer_e", "=", "min", "(", "int", "(", "int_temp_scores", ".", "shape", "[", "0", "]", "-", "1", ")", ",", "int", "(", "grouped_temp_list", "[", "j", "]", "[", "-", "1", "]", "+", "lamb", "*", "len_proposal", ")", ")", "\n", "\n", "outer_temp_list", "=", "list", "(", "range", "(", "outer_s", ",", "int", "(", "grouped_temp_list", "[", "j", "]", "[", "0", "]", ")", ")", ")", "+", "list", "(", "range", "(", "int", "(", "grouped_temp_list", "[", "j", "]", "[", "-", "1", "]", "+", "1", ")", ",", "outer_e", "+", "1", ")", ")", "\n", "\n", "if", "len", "(", "outer_temp_list", ")", "==", "0", ":", "\n", "                    ", "outer_score", "=", "0", "\n", "", "else", ":", "\n", "                    ", "outer_score", "=", "np", ".", "mean", "(", "int_temp_scores", "[", "outer_temp_list", ",", "i", "]", ")", "\n", "\n", "", "c_score", "=", "inner_score", "-", "outer_score", "+", "gamma", "*", "c_pred_scores", "[", "c_pred", "[", "i", "]", "]", "\n", "t_start", "=", "(", "grouped_temp_list", "[", "j", "]", "[", "0", "]", "+", "0", ")", "*", "t_factor", "\n", "t_end", "=", "(", "grouped_temp_list", "[", "j", "]", "[", "-", "1", "]", "+", "1", ")", "*", "t_factor", "\n", "c_temp", ".", "append", "(", "[", "c_pred", "[", "i", "]", ",", "c_score", ",", "t_start", ",", "t_end", "]", ")", "\n", "\n", "", "temp", ".", "append", "(", "c_temp", ")", "\n", "", "", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.result2json": [[177, 187], ["range", "len", "range", "len", "result.append", "int"], "function", ["None"], ["", "def", "result2json", "(", "temp_prop_lst", ",", "class_name_lst", ")", ":", "\n", "    ", "result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "temp_prop_lst", ")", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "temp_prop_lst", "[", "i", "]", ")", ")", ":", "\n", "            ", "line", "=", "{", "'label'", ":", "class_name_lst", "[", "int", "(", "temp_prop_lst", "[", "i", "]", "[", "j", "]", "[", "0", "]", ")", "]", ",", "\n", "'score'", ":", "temp_prop_lst", "[", "i", "]", "[", "j", "]", "[", "1", "]", ",", "\n", "'segment'", ":", "[", "temp_prop_lst", "[", "i", "]", "[", "j", "]", "[", "2", "]", ",", "temp_prop_lst", "[", "i", "]", "[", "j", "]", "[", "3", "]", "]", "}", "\n", "result", ".", "append", "(", "line", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.get_cls_ap": [[189, 218], ["numpy.array", "numpy.array", "range", "sklearn.metrics.average_precision_score", "result_ap_lst.append", "sum", "len", "ground_truth[].astype"], "function", ["None"], ["", "def", "get_cls_ap", "(", "prediction_scores", ",", "gt_labels", ",", "dataset", "=", "'THUMOS'", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the video-level classification results for weakly-supervised temporal action detection task.\n\n    Args:\n        prediction_scores ([N x cls_num]): [video level classification scores]\n        gt_labels ([N x cls_num]): [video level ground truth labels] (could be multiple hot.)\n    \"\"\"", "\n", "result_ap_lst", "=", "[", "]", "\n", "# pre_scores = prediction_scores.detach().cpu().numpy()", "\n", "# ground_truth = gt_labels.detach().cpu().numpy()", "\n", "pre_scores", "=", "np", ".", "array", "(", "prediction_scores", ")", "\n", "ground_truth", "=", "np", ".", "array", "(", "gt_labels", ")", "\n", "\n", "# -------------------------------------------------------# ", "\n", "# Since the CliffDiving is actually a subset of Diving. Follow CDC (CVPR 2017)", "\n", "# We resign the classification scores of Diving when CliffDiving scores is higher than Diving", "\n", "if", "dataset", "==", "\"THUMOS\"", ":", "\n", "        ", "switch_idx", "=", "pre_scores", "[", ":", ",", "4", "]", ">", "pre_scores", "[", ":", ",", "7", "]", "\n", "pre_scores", "[", "switch_idx", ",", "7", "]", "=", "pre_scores", "[", "switch_idx", ",", "4", "]", "\n", "\n", "", "cls_num", "=", "pre_scores", ".", "shape", "[", "1", "]", "-", "1", "# ignore the background", "\n", "for", "cls_idx", "in", "range", "(", "cls_num", ")", ":", "\n", "        ", "ap", "=", "average_precision_score", "(", "ground_truth", "[", ":", ",", "cls_idx", "]", ".", "astype", "(", "np", ".", "int64", ")", ",", "pre_scores", "[", ":", ",", "cls_idx", "]", ")", "\n", "result_ap_lst", ".", "append", "(", "ap", ")", "\n", "\n", "", "cls_mAP", "=", "sum", "(", "result_ap_lst", ")", "/", "len", "(", "result_ap_lst", ")", "\n", "\n", "return", "cls_mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.get_segment_iou": [[220, 238], ["numpy.maximum", "numpy.minimum", "segment_intersection.astype"], "function", ["None"], ["", "def", "get_segment_iou", "(", "target_segment", ",", "candidate_segment", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the t-IOU between target_segments and the candidate_segments.\n    \n    Args:\n        target_segment (1d array): [t_start, t_end]\n        candidate_segment (2d array): N X [t_start, t_end]\n    Return:\n        tIOU\n    \"\"\"", "\n", "tt1", "=", "np", ".", "maximum", "(", "target_segment", "[", "0", "]", ",", "candidate_segment", "[", ":", ",", "0", "]", ")", "\n", "tt2", "=", "np", ".", "minimum", "(", "target_segment", "[", "1", "]", ",", "candidate_segment", "[", ":", ",", "1", "]", ")", "\n", "segment_intersection", "=", "(", "tt2", "-", "tt1", ")", ".", "clip", "(", "0", ")", "\n", "segment_union", "=", "(", "candidate_segment", "[", ":", ",", "1", "]", "-", "candidate_segment", "[", ":", ",", "0", "]", ")", "+", "(", "target_segment", "[", "1", "]", "-", "target_segment", "[", "0", "]", ")", "-", "segment_intersection", "\n", "tIOU", "=", "segment_intersection", ".", "astype", "(", "np", ".", "float", ")", "/", "segment_union", "\n", "\n", "return", "tIOU", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.wrapper_get_segment_iou": [[239, 258], ["numpy.empty", "range", "ValueError", "net_evaluation.get_segment_iou"], "function", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.get_segment_iou"], ["", "def", "wrapper_get_segment_iou", "(", "target_segments", ",", "candidate_segments", ")", ":", "\n", "    ", "\"\"\"Compute temporal iou btw segments\n\n    Args:\n        target_segments (2d array): m x [t_start, t_end]\n        candidate_segments (2d array): n x [t_start, t_end]\n    \n    Return:\n        tIOU (2d array) [n x m] with iou ratios\n    \"\"\"", "\n", "if", "candidate_segments", ".", "ndim", "!=", "2", "or", "target_segments", ".", "ndim", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Dimension of candidate_segemnts is incorrect!!!\"", ")", "\n", "\n", "", "n", ",", "m", "=", "candidate_segments", ".", "shape", "[", "0", "]", ",", "target_segments", ".", "shape", "[", "0", "]", "\n", "tiou", "=", "np", ".", "empty", "(", "(", "n", ",", "m", ")", ")", "\n", "for", "idx", "in", "range", "(", "m", ")", ":", "\n", "        ", "tiou", "[", ":", ",", "idx", "]", "=", "get_segment_iou", "(", "target_segments", "[", "idx", ",", ":", "]", ",", "candidate_segments", ")", "\n", "\n", "", "return", "tiou", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.get_AP": [[259, 278], ["numpy.hstack", "numpy.hstack", "numpy.sum", "range", "max", "numpy.where", "len"], "function", ["None"], ["", "def", "get_AP", "(", "prec", ",", "rec", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the interpolated AP -- VOCdevkit from VOC 2011\n    \n    Args:\n        prec ([type]): [description]\n        rec ([type]): [description]\n\n    Returns:\n        AP [float]:\n    \"\"\"", "\n", "mprec", "=", "np", ".", "hstack", "(", "[", "[", "0", "]", ",", "prec", ",", "[", "0", "]", "]", ")", "\n", "mrec", "=", "np", ".", "hstack", "(", "[", "[", "0", "]", ",", "rec", ",", "[", "1", "]", "]", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "mprec", ")", "-", "1", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "mprec", "[", "idx", "]", "=", "max", "(", "mprec", "[", "idx", "]", ",", "mprec", "[", "idx", "+", "1", "]", ")", "\n", "", "idx", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", ":", "]", "!=", "mrec", "[", "0", ":", "-", "1", "]", ")", "[", "0", "]", "+", "1", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "idx", "]", "-", "mrec", "[", "idx", "-", "1", "]", ")", "*", "mprec", "[", "idx", "]", ")", "\n", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.minmax_data_norm": [[279, 290], ["numpy.max", "numpy.min", "numpy.clip"], "function", ["None"], ["", "def", "minmax_data_norm", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        data ([N, Cls]):\n    \"\"\"", "\n", "max_data", "=", "np", ".", "max", "(", "data", ",", "axis", "=", "0", ")", "\n", "min_data", "=", "np", ".", "min", "(", "data", ",", "axis", "=", "0", ")", "\n", "delta", "=", "max_data", "-", "min_data", "\n", "data", "=", "(", "max_data", "-", "data", ")", "/", "(", "max_data", "-", "min_data", "+", "1e-4", ")", "\n", "data", "=", "np", ".", "clip", "(", "data", ",", "a_min", "=", "0.0", ",", "a_max", "=", "1.0", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.nms": [[292, 317], ["numpy.array", "scores.argsort", "keep.append", "numpy.maximum", "numpy.minimum", "numpy.maximum", "proposals[].tolist", "numpy.where"], "function", ["None"], ["", "def", "nms", "(", "proposals", ",", "thresh", ")", ":", "\n", "\n", "    ", "proposals", "=", "np", ".", "array", "(", "proposals", ")", "\n", "x1", "=", "proposals", "[", ":", ",", "2", "]", "\n", "x2", "=", "proposals", "[", ":", ",", "3", "]", "\n", "scores", "=", "proposals", "[", ":", ",", "1", "]", "\n", "\n", "areas", "=", "x2", "-", "x1", "+", "1", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "\n", "keep", "=", "[", "]", "\n", "while", "order", ".", "size", ">", "0", ":", "\n", "        ", "i", "=", "order", "[", "0", "]", "\n", "keep", ".", "append", "(", "proposals", "[", "i", "]", ".", "tolist", "(", ")", ")", "\n", "xx1", "=", "np", ".", "maximum", "(", "x1", "[", "i", "]", ",", "x1", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "xx2", "=", "np", ".", "minimum", "(", "x2", "[", "i", "]", ",", "x2", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "\n", "inter", "=", "np", ".", "maximum", "(", "0.0", ",", "xx2", "-", "xx1", "+", "1", ")", "\n", "\n", "iou", "=", "inter", "/", "(", "areas", "[", "i", "]", "+", "areas", "[", "order", "[", "1", ":", "]", "]", "-", "inter", ")", "\n", "\n", "inds", "=", "np", ".", "where", "(", "iou", "<", "thresh", ")", "[", "0", "]", "\n", "order", "=", "order", "[", "inds", "+", "1", "]", "\n", "\n", "", "return", "keep", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.compute_average_precision_detection": [[495, 575], ["numpy.linspace", "numpy.zeros", "float", "prediction.loc[].reset_index.loc[].reset_index", "numpy.zeros", "numpy.zeros", "ground_truth.groupby", "prediction.loc[].reset_index.iterrows", "numpy.cumsum().astype", "numpy.cumsum().astype", "range", "len", "len", "numpy.ones", "prediction[].values.argsort", "ground_truth_gbvn.get_group.reset_index", "net_evaluation.get_segment_iou", "enumerate", "len", "net_evaluation.get_AP", "len", "len", "len", "len", "ground_truth.groupby.get_group", "get_segment_iou.argsort", "numpy.cumsum", "numpy.cumsum", "len", "len"], "function", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.get_segment_iou", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_evaluation.get_AP"], ["", "", "def", "compute_average_precision_detection", "(", "ground_truth", ",", "prediction", ",", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.1", ",", "0.9", ",", "9", ")", ")", ":", "\n", "    ", "\"\"\"Compute average precision (detection task) between ground truth and predictions data frames.\n    If multiple predictions occurs for the same predicted segment, only the one with highest score is\n    mathced as positive. This code is greatly inspired by Pascal VOC devkit.\n\n    Args:\n        ground_truth (df): \n            Data frame containing the ground truth instances.\n            Required fields: ['video_id', 't-start', 't-end']\n            \n        prediction (df): \n            Data frame containing the prediction instances.\n            Required fields: ['video-id', 't-start', 't-end', 'score']\n        \n        tiou_thresholds (1darray, optional):\n            Temporal intersection over union threshold.\n            Defaults to np.linspace(0.1, 0.9, 9).\n            \n    Outpus:\n    ap: float\n        average precision scores.\n    \"\"\"", "\n", "ap", "=", "np", ".", "zeros", "(", "len", "(", "tiou_thresholds", ")", ")", "\n", "if", "prediction", ".", "empty", ":", "\n", "        ", "return", "ap", "\n", "\n", "", "npos", "=", "float", "(", "len", "(", "ground_truth", ")", ")", "\n", "lock_gt", "=", "np", ".", "ones", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "ground_truth", ")", ")", ")", "*", "-", "1", "\n", "# sort predictions by decreasing score order", "\n", "sort_idx", "=", "prediction", "[", "'score'", "]", ".", "values", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "prediction", "=", "prediction", ".", "loc", "[", "sort_idx", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "# Initializa true positive and false positive vectors", "\n", "tp", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "prediction", ")", ")", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "prediction", ")", ")", ")", "\n", "\n", "ground_truth_gbvn", "=", "ground_truth", ".", "groupby", "(", "'video-id'", ")", "\n", "\n", "for", "idx", ",", "this_pred", "in", "prediction", ".", "iterrows", "(", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "            ", "ground_truth_videoid", "=", "ground_truth_gbvn", ".", "get_group", "(", "this_pred", "[", "'video-id'", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "# wrong predicted association cls label.", "\n", "            ", "fp", "[", ":", ",", "idx", "]", "=", "1", "\n", "continue", "\n", "\n", "", "this_gt", "=", "ground_truth_videoid", ".", "reset_index", "(", ")", "\n", "\n", "tiou_arr", "=", "get_segment_iou", "(", "this_pred", "[", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", ",", "\n", "this_gt", "[", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", ")", "\n", "\n", "tiou_sorted_idx", "=", "tiou_arr", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "for", "tidx", ",", "tiou_thr", "in", "enumerate", "(", "tiou_thresholds", ")", ":", "\n", "            ", "for", "jdx", "in", "tiou_sorted_idx", ":", "\n", "                ", "if", "tiou_arr", "[", "jdx", "]", "<", "tiou_thr", ":", "\n", "                    ", "fp", "[", "tidx", ",", "idx", "]", "=", "1", "\n", "break", "\n", "", "if", "lock_gt", "[", "tidx", ",", "this_gt", ".", "loc", "[", "jdx", "]", "[", "'index'", "]", "]", ">=", "0", ":", "\n", "                    ", "continue", "\n", "# Assign as true positive after filters above", "\n", "", "tp", "[", "tidx", ",", "idx", "]", "=", "1", "\n", "# for each gt, we only assign the highest iou detection instance.", "\n", "lock_gt", "[", "tidx", ",", "this_gt", ".", "loc", "[", "jdx", "]", "[", "'index'", "]", "]", "=", "idx", "\n", "\n", "break", "\n", "\n", "", "if", "fp", "[", "tidx", ",", "idx", "]", "==", "0", "and", "tp", "[", "tidx", ",", "idx", "]", "==", "0", ":", "\n", "                ", "fp", "[", "tidx", ",", "idx", "]", "=", "1", "\n", "\n", "", "", "", "tp_cumsum", "=", "np", ".", "cumsum", "(", "tp", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "fp_cumsum", "=", "np", ".", "cumsum", "(", "fp", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "\n", "recall_cumsum", "=", "tp_cumsum", "/", "npos", "\n", "precision_cumsum", "=", "tp_cumsum", "/", "(", "tp_cumsum", "+", "fp_cumsum", ")", "\n", "\n", "for", "tidx", "in", "range", "(", "len", "(", "tiou_thresholds", ")", ")", ":", "\n", "        ", "ap", "[", "tidx", "]", "=", "get_AP", "(", "precision_cumsum", "[", "tidx", ",", ":", "]", ",", "recall_cumsum", "[", "tidx", ",", ":", "]", ")", "\n", "\n", "", "return", "ap", "", "", ""]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_utils.ACMLoss.__init__": [[26, 34], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.model.ACMNet.ACMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lamb1", "=", "2e-3", ",", "lamb2", "=", "5e-5", ",", "lamb3", "=", "2e-4", ",", "dataset", "=", "\"THUMOS14\"", ")", ":", "\n", "        ", "super", "(", "ACMLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "lamb1", "=", "lamb1", "# att_norm_loss param ", "\n", "self", ".", "lamb2", "=", "lamb2", "\n", "self", ".", "lamb3", "=", "lamb3", "\n", "self", ".", "feat_margin", "=", "50", "#50", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_utils.ACMLoss.cls_criterion": [[35, 37], ["torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "cls_criterion", "(", "self", ",", "inputs", ",", "label", ")", ":", "\n", "        ", "return", "-", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "torch", ".", "log", "(", "inputs", ")", "*", "label", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_utils.ACMLoss.forward": [[38, 94], ["torch.hstack", "torch.hstack", "torch.hstack", "torch.hstack", "torch.hstack", "torch.hstack", "torch.hstack", "torch.hstack", "torch.hstack", "torch.hstack", "torch.hstack", "torch.hstack", "net_utils.ACMLoss.cls_criterion", "net_utils.ACMLoss.cls_criterion", "net_utils.ACMLoss.cls_criterion", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "torch.sum().mean", "net_utils.ACMLoss.cpu().item", "net_utils.ACMLoss.cpu().item", "net_utils.ACMLoss.cpu().item", "torch.sum().mean.cpu().item", "torch.sum().mean.cpu().item", "torch.mean.cpu().item", "torch.mean.cpu().item", "torch.sum().mean.cpu().item", "torch.sum().mean.cpu().item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "net_utils.ACMLoss.cpu", "net_utils.ACMLoss.cpu", "net_utils.ACMLoss.cpu", "torch.sum().mean.cpu", "torch.sum().mean.cpu", "torch.mean.cpu", "torch.mean.cpu", "torch.sum().mean.cpu", "torch.sum().mean.cpu", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "temp_att[].detach"], "methods", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_utils.ACMLoss.cls_criterion", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_utils.ACMLoss.cls_criterion", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_utils.ACMLoss.cls_criterion"], ["", "def", "forward", "(", "self", ",", "act_inst_cls", ",", "act_cont_cls", ",", "act_back_cls", ",", "vid_label", ",", "temp_att", "=", "None", ",", "act_inst_feat", "=", "None", ",", "act_cont_feat", "=", "None", ",", "act_back_feat", "=", "None", ",", "temp_cas", "=", "None", ")", ":", "\n", "\n", "        ", "device", "=", "act_inst_cls", ".", "device", "\n", "batch_size", "=", "act_inst_cls", ".", "shape", "[", "0", "]", "\n", "\n", "act_inst_label", "=", "torch", ".", "hstack", "(", "(", "vid_label", ",", "torch", ".", "zeros", "(", "(", "batch_size", ",", "1", ")", ",", "device", "=", "device", ")", ")", ")", "\n", "act_cont_label", "=", "torch", ".", "hstack", "(", "(", "vid_label", ",", "torch", ".", "ones", "(", "(", "batch_size", ",", "1", ")", ",", "device", "=", "device", ")", ")", ")", "\n", "act_back_label", "=", "torch", ".", "hstack", "(", "(", "torch", ".", "zeros_like", "(", "vid_label", ")", ",", "torch", ".", "ones", "(", "(", "batch_size", ",", "1", ")", ",", "device", "=", "device", ")", ")", ")", "\n", "\n", "act_inst_label", "=", "act_inst_label", "/", "torch", ".", "sum", "(", "act_inst_label", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "act_cont_label", "=", "act_cont_label", "/", "torch", ".", "sum", "(", "act_cont_label", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "act_back_label", "=", "act_back_label", "/", "torch", ".", "sum", "(", "act_back_label", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "act_inst_loss", "=", "self", ".", "cls_criterion", "(", "act_inst_cls", ",", "act_inst_label", ")", "\n", "act_cont_loss", "=", "self", ".", "cls_criterion", "(", "act_cont_cls", ",", "act_cont_label", ")", "\n", "act_back_loss", "=", "self", ".", "cls_criterion", "(", "act_back_cls", ",", "act_back_label", ")", "\n", "\n", "# Guide Loss", "\n", "guide_loss", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "1", "-", "temp_cas", "[", ":", ",", ":", ",", "-", "1", "]", "-", "temp_att", "[", ":", ",", ":", ",", "0", "]", ".", "detach", "(", ")", ")", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "# Feat Loss", "\n", "act_inst_feat_norm", "=", "torch", ".", "norm", "(", "act_inst_feat", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "act_cont_feat_norm", "=", "torch", ".", "norm", "(", "act_cont_feat", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "act_back_feat_norm", "=", "torch", ".", "norm", "(", "act_back_feat", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "feat_loss_1", "=", "self", ".", "feat_margin", "-", "act_inst_feat_norm", "+", "act_cont_feat_norm", "\n", "feat_loss_1", "[", "feat_loss_1", "<", "0", "]", "=", "0", "\n", "feat_loss_2", "=", "self", ".", "feat_margin", "-", "act_cont_feat_norm", "+", "act_back_feat_norm", "\n", "feat_loss_2", "[", "feat_loss_2", "<", "0", "]", "=", "0", "\n", "feat_loss_3", "=", "act_back_feat_norm", "\n", "feat_loss", "=", "torch", ".", "mean", "(", "(", "feat_loss_1", "+", "feat_loss_2", "+", "feat_loss_3", ")", "**", "2", ")", "\n", "\n", "# Sparse Att Loss", "\n", "# att_loss = torch.sum(temp_att[:, :, 0], dim=1).mean() + torch.sum(temp_att[:, :, 1], dim=1).mean() ", "\n", "sparse_loss", "=", "torch", ".", "sum", "(", "temp_att", "[", ":", ",", ":", ",", ":", "2", "]", ",", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "\n", "if", "self", ".", "dataset", "==", "\"THUMOS14\"", ":", "\n", "            ", "cls_loss", "=", "1.0", "*", "act_inst_loss", "+", "1.0", "*", "act_cont_loss", "+", "1.0", "*", "act_back_loss", "\n", "", "else", ":", "\n", "# We add more strong regularization operation to the ActivityNet dataset since this dataset contains much more diverse videos.", "\n", "            ", "cls_loss", "=", "5.0", "*", "act_inst_loss", "+", "1.0", "*", "act_cont_loss", "+", "1.0", "*", "act_back_loss", "\n", "\n", "", "add_loss", "=", "self", ".", "lamb1", "*", "guide_loss", "+", "self", ".", "lamb2", "*", "feat_loss", "+", "self", ".", "lamb3", "*", "sparse_loss", "\n", "\n", "loss", "=", "cls_loss", "+", "add_loss", "\n", "\n", "loss_dict", "=", "{", "}", "\n", "loss_dict", "[", "\"act_inst_loss\"", "]", "=", "act_inst_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "loss_dict", "[", "\"act_cont_loss\"", "]", "=", "act_cont_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "loss_dict", "[", "\"act_back_loss\"", "]", "=", "act_back_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "loss_dict", "[", "\"guide_loss\"", "]", "=", "guide_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "loss_dict", "[", "\"feat_loss\"", "]", "=", "feat_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "loss_dict", "[", "\"sparse_loss\"", "]", "=", "sparse_loss", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "return", "loss", ",", "loss_dict", "", "", "", ""]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_utils.set_random_seed": [[6, 16], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["def", "set_random_seed", "(", "seed", "=", "0", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n", "", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.utils.net_utils.weights_init": [[17, 22], ["isinstance", "model.weights.data.normal_", "isinstance", "model.weights.data.normal_"], "function", ["None"], ["", "def", "weights_init", "(", "model", ")", ":", "\n", "    ", "if", "isinstance", "(", "model", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "model", ".", "weights", ".", "data", ".", "normal_", "(", "0.0", ",", "0.001", ")", "\n", "", "elif", "isinstance", "(", "model", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "model", ".", "weights", ".", "data", ".", "normal_", "(", "0.0", ",", "0.001", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.ACMDataset.__init__": [[57, 82], ["dataset_class.ACMDataset.get_label", "open", "os.path.join", "list", "os.path.join", "list", "os.path.join", "json.load", "open", "item.strip", "open", "item.strip", "enumerate", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.ACMDataset.get_label"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "phase", "=", "\"train\"", ",", "sample", "=", "\"random\"", ")", ":", "\n", "\n", "        ", "self", ".", "phase", "=", "phase", "\n", "self", ".", "sample", "=", "sample", "\n", "self", ".", "data_dir", "=", "args", ".", "data_dir", "\n", "self", ".", "sample_segments_num", "=", "args", ".", "sample_segments_num", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"gt.json\"", ")", ")", "as", "gt_f", ":", "\n", "            ", "self", ".", "gt_dict", "=", "json", ".", "load", "(", "gt_f", ")", "[", "\"database\"", "]", "\n", "\n", "", "if", "self", ".", "phase", "==", "\"train\"", ":", "\n", "            ", "self", ".", "feature_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"train\"", ")", "\n", "self", ".", "data_list", "=", "list", "(", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"split_train.txt\"", ")", ")", ")", "\n", "self", ".", "data_list", "=", "[", "item", ".", "strip", "(", ")", "for", "item", "in", "self", ".", "data_list", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "feature_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"test\"", ")", "\n", "self", ".", "data_list", "=", "list", "(", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "\"split_test.txt\"", ")", ")", ")", "\n", "self", ".", "data_list", "=", "[", "item", ".", "strip", "(", ")", "for", "item", "in", "self", ".", "data_list", "]", "\n", "\n", "", "self", ".", "class_name_lst", "=", "args", ".", "class_name_lst", "\n", "self", ".", "action_class_idx_dict", "=", "{", "action_cls", ":", "idx", "for", "idx", ",", "action_cls", "in", "enumerate", "(", "self", ".", "class_name_lst", ")", "}", "\n", "\n", "self", ".", "action_class_num", "=", "args", ".", "action_cls_num", "\n", "\n", "self", ".", "get_label", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.ACMDataset.get_label": [[83, 95], ["numpy.zeros"], "methods", ["None"], ["", "def", "get_label", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "label_dict", "=", "{", "}", "\n", "for", "item_name", "in", "self", ".", "data_list", ":", "\n", "\n", "            ", "item_anns_list", "=", "self", ".", "gt_dict", "[", "item_name", "]", "[", "\"annotations\"", "]", "\n", "item_label", "=", "np", ".", "zeros", "(", "self", ".", "action_class_num", ")", "\n", "for", "ann", "in", "item_anns_list", ":", "\n", "                ", "ann_label", "=", "ann", "[", "\"label\"", "]", "\n", "item_label", "[", "self", ".", "action_class_idx_dict", "[", "ann_label", "]", "]", "=", "1.0", "\n", "\n", "", "self", ".", "label_dict", "[", "item_name", "]", "=", "item_label", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.ACMDataset.__len__": [[96, 98], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.ACMDataset.__getitem__": [[99, 121], ["numpy.load", "torch.as_tensor", "torch.as_tensor", "os.path.join", "dataset_class.random_sample", "dataset_class.uniform_sample", "uniform_sample.astype", "vid_label.astype"], "methods", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.random_sample", "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.uniform_sample"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "\n", "        ", "vid_name", "=", "self", ".", "data_list", "[", "idx", "]", "\n", "vid_label", "=", "self", ".", "label_dict", "[", "vid_name", "]", "\n", "vid_duration", "=", "self", ".", "gt_dict", "[", "vid_name", "]", "[", "\"duration\"", "]", "\n", "con_vid_feature", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "feature_dir", ",", "vid_name", "+", "\".npy\"", ")", ")", "\n", "\n", "vid_len", "=", "con_vid_feature", ".", "shape", "[", "0", "]", "\n", "\n", "if", "self", ".", "sample", "==", "\"random\"", ":", "\n", "            ", "con_vid_spd_feature", "=", "random_sample", "(", "con_vid_feature", ",", "self", ".", "sample_segments_num", ")", "\n", "", "else", ":", "\n", "            ", "con_vid_spd_feature", "=", "uniform_sample", "(", "con_vid_feature", ",", "self", ".", "sample_segments_num", ")", "\n", "\n", "", "con_vid_spd_feature", "=", "torch", ".", "as_tensor", "(", "con_vid_spd_feature", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "vid_label_t", "=", "torch", ".", "as_tensor", "(", "vid_label", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "if", "self", ".", "phase", "==", "\"train\"", ":", "\n", "            ", "return", "con_vid_spd_feature", ",", "vid_label_t", "\n", "", "else", ":", "\n", "            ", "return", "vid_name", ",", "con_vid_spd_feature", ",", "vid_label_t", ",", "vid_len", ",", "vid_duration", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.uniform_sample": [[8, 23], ["numpy.arange", "numpy.floor", "numpy.arange", "np.floor.astype"], "function", ["None"], ["def", "uniform_sample", "(", "input_feature", ",", "sample_len", ")", ":", "\n", "\n", "    ", "input_len", "=", "input_feature", ".", "shape", "[", "0", "]", "\n", "assert", "sample_len", ">", "0", ",", "\"WRONG SAMPLE_LEN {}, THIS PARAM MUST BE GREATER THAN 0.\"", ".", "format", "(", "sample_len", ")", "\n", "\n", "if", "input_len", "<=", "sample_len", "and", "input_len", ">", "1", ":", "\n", "        ", "sample_idxs", "=", "np", ".", "arange", "(", "input_len", ")", "\n", "", "else", ":", "\n", "        ", "if", "input_len", "==", "1", ":", "\n", "            ", "sample_len", "=", "2", "\n", "", "sample_scale", "=", "input_len", "/", "sample_len", "\n", "sample_idxs", "=", "np", ".", "arange", "(", "sample_len", ")", "*", "sample_scale", "\n", "sample_idxs", "=", "np", ".", "floor", "(", "sample_idxs", ")", "\n", "\n", "", "return", "input_feature", "[", "sample_idxs", ".", "astype", "(", "np", ".", "int", ")", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.random_sample": [[24, 41], ["numpy.random.choice", "numpy.sort", "range", "numpy.random.choice", "numpy.arange", "numpy.random.choice", "numpy.arange", "np.arange.astype", "numpy.arange", "range", "numpy.int", "numpy.int"], "function", ["None"], ["", "def", "random_sample", "(", "input_feature", ",", "sample_len", ")", ":", "\n", "\n", "    ", "input_len", "=", "input_feature", ".", "shape", "[", "0", "]", "\n", "assert", "sample_len", ">", "0", ",", "\"WRONG SAMPLE_LEN {}, THIS PARAM MUST BE GREATER THAN 0.\"", ".", "format", "(", "sample_len", ")", "\n", "\n", "if", "input_len", "<", "sample_len", ":", "\n", "        ", "sample_idxs", "=", "np", ".", "random", ".", "choice", "(", "input_len", ",", "sample_len", ",", "replace", "=", "True", ")", "\n", "sample_idxs", "=", "np", ".", "sort", "(", "sample_idxs", ")", "\n", "", "elif", "input_len", ">", "sample_len", ":", "\n", "        ", "sample_idxs", "=", "np", ".", "arange", "(", "sample_len", ")", "*", "input_len", "/", "sample_len", "\n", "for", "i", "in", "range", "(", "sample_len", "-", "1", ")", ":", "\n", "            ", "sample_idxs", "[", "i", "]", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "np", ".", "int", "(", "sample_idxs", "[", "i", "]", ")", ",", "np", ".", "int", "(", "sample_idxs", "[", "i", "+", "1", "]", "+", "1", ")", ")", ")", "\n", "", "sample_idxs", "[", "-", "1", "]", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "sample_idxs", "[", "-", "2", "]", ",", "input_len", ")", ")", "\n", "", "else", ":", "\n", "        ", "sample_idxs", "=", "np", ".", "arange", "(", "input_len", ")", "\n", "\n", "", "return", "input_feature", "[", "sample_idxs", ".", "astype", "(", "np", ".", "int", ")", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.consecutive_sample": [[42, 54], ["numpy.random.choice", "numpy.zeros", "numpy.concatenate"], "function", ["None"], ["", "def", "consecutive_sample", "(", "input_feature", ",", "sample_len", ")", ":", "\n", "\n", "    ", "input_len", "=", "input_feature", ".", "shape", "[", "0", "]", "\n", "assert", "sample_len", ">", "0", ",", "\"WRONG SAMPLE_LEN {}, THIS PARAM MUST BE GREATER THAN 0.\"", ".", "format", "(", "sample_len", ")", "\n", "\n", "if", "input_len", ">=", "sample_len", ":", "\n", "        ", "sample_idx", "=", "np", ".", "random", ".", "choice", "(", "(", "input_len", "-", "sample_len", ")", ")", "\n", "return", "input_feature", "[", "sample_idx", ":", "(", "sample_idx", "+", "sample_len", ")", ",", ":", "]", "\n", "\n", "", "elif", "input_len", "<", "sample_len", ":", "\n", "        ", "empty_features", "=", "np", ".", "zeros", "(", "(", "sample_len", "-", "input_len", ",", "input_feature", ".", "shape", "[", "1", "]", ")", ")", "\n", "return", "np", ".", "concatenate", "(", "(", "input_feature", ",", "empty_features", ")", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.dataset.dataset_class.build_dataset": [[123, 126], ["dataset_class.ACMDataset"], "function", ["None"], ["", "", "", "def", "build_dataset", "(", "args", ",", "phase", "=", "\"train\"", ",", "sample", "=", "\"random\"", ")", ":", "\n", "\n", "    ", "return", "ACMDataset", "(", "args", ",", "phase", ",", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.model.ACMNet.ACMNet.__init__": [[6, 34], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.ispc-lab_ACM-Net.model.ACMNet.ACMNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "ACMNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "args", ".", "dataset", "\n", "self", ".", "feature_dim", "=", "args", ".", "feature_dim", "\n", "self", ".", "action_cls_num", "=", "args", ".", "action_cls_num", "# Only the action categories number.", "\n", "self", ".", "drop_thresh", "=", "args", ".", "dropout", "\n", "self", ".", "ins_topk_seg", "=", "args", ".", "ins_topk_seg", "\n", "self", ".", "con_topk_seg", "=", "args", ".", "con_topk_seg", "\n", "self", ".", "bak_topk_seg", "=", "args", ".", "bak_topk_seg", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", "\n", "if", "self", ".", "dataset", "==", "\"THUMOS\"", ":", "\n", "            ", "self", ".", "feature_embedding", "=", "nn", ".", "Sequential", "(", "\n", "# nn.Dropout(args.dropout),", "\n", "nn", ".", "Conv1d", "(", "in_channels", "=", "self", ".", "feature_dim", ",", "out_channels", "=", "self", ".", "feature_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "# We add more strong regularization operation to the ActivityNet dataset since this dataset contains much more diverse videos.", "\n", "            ", "self", ".", "feature_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Dropout", "(", "args", ".", "dropout", ")", ",", "\n", "nn", ".", "Conv1d", "(", "in_channels", "=", "self", ".", "feature_dim", ",", "out_channels", "=", "self", ".", "feature_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "# We introduce three-branch attention, action instance, action context and the irrelevant backgrounds.", "\n", "", "self", ".", "att_branch", "=", "nn", ".", "Conv1d", "(", "in_channels", "=", "self", ".", "feature_dim", ",", "out_channels", "=", "3", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "self", ".", "snippet_cls", "=", "nn", ".", "Linear", "(", "in_features", "=", "self", ".", "feature_dim", ",", "out_features", "=", "(", "self", ".", "action_cls_num", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.model.ACMNet.ACMNet.forward": [[35, 102], ["max", "max", "max", "input_features.permute.permute.permute", "ACMNet.ACMNet.feature_embedding", "ACMNet.ACMNet.permute", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "temp_att[].unsqueeze", "temp_att[].unsqueeze", "temp_att[].unsqueeze", "embeded_feature.permute.permute.permute", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "ACMNet.ACMNet.dropout", "ACMNet.ACMNet.snippet_cls", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "sorted_act_inst_att_idx[].expand", "sorted_act_cont_att_idx[].expand", "sorted_act_back_att_idx[].expand", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "ACMNet.ACMNet.att_branch", "ACMNet.ACMNet.att_branch", "ACMNet.ACMNet.dropout", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "ACMNet.ACMNet.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_features", ")", ":", "\n", "\n", "        ", "device", "=", "input_features", ".", "device", "\n", "batch_size", ",", "temp_len", "=", "input_features", ".", "shape", "[", "0", "]", ",", "input_features", ".", "shape", "[", "1", "]", "\n", "\n", "inst_topk_num", "=", "max", "(", "temp_len", "//", "self", ".", "ins_topk_seg", ",", "1", ")", "\n", "cont_topk_num", "=", "max", "(", "temp_len", "//", "self", ".", "con_topk_seg", ",", "1", ")", "\n", "back_topk_num", "=", "max", "(", "temp_len", "//", "self", ".", "bak_topk_seg", ",", "1", ")", "\n", "\n", "input_features", "=", "input_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "embeded_feature", "=", "self", ".", "feature_embedding", "(", "input_features", ")", "\n", "\n", "if", "self", ".", "dataset", "==", "\"THUMOS\"", ":", "\n", "            ", "temp_att", "=", "self", ".", "att_branch", "(", "(", "embeded_feature", ")", ")", "\n", "", "else", ":", "\n", "# We add more strong regularization operation to the ActivityNet dataset since this dataset contains much more diverse videos.", "\n", "            ", "temp_att", "=", "self", ".", "att_branch", "(", "self", ".", "dropout", "(", "embeded_feature", ")", ")", "\n", "\n", "", "temp_att", "=", "temp_att", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "temp_att", "=", "torch", ".", "softmax", "(", "temp_att", ",", "dim", "=", "2", ")", "\n", "\n", "act_inst_att", "=", "temp_att", "[", ":", ",", ":", ",", "0", "]", ".", "unsqueeze", "(", "2", ")", "\n", "act_cont_att", "=", "temp_att", "[", ":", ",", ":", ",", "1", "]", ".", "unsqueeze", "(", "2", ")", "\n", "act_back_att", "=", "temp_att", "[", ":", ",", ":", ",", "2", "]", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "embeded_feature", "=", "embeded_feature", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "embeded_feature_rev", "=", "embeded_feature", "\n", "\n", "select_idx", "=", "torch", ".", "ones", "(", "(", "batch_size", ",", "temp_len", ",", "1", ")", ",", "device", "=", "device", ")", "\n", "select_idx", "=", "self", ".", "dropout", "(", "select_idx", ")", "\n", "embeded_feature", "=", "embeded_feature", "*", "select_idx", "\n", "\n", "act_cas", "=", "self", ".", "snippet_cls", "(", "self", ".", "dropout", "(", "embeded_feature", ")", ")", "\n", "act_inst_cas", "=", "act_cas", "*", "act_inst_att", "\n", "act_cont_cas", "=", "act_cas", "*", "act_cont_att", "\n", "act_back_cas", "=", "act_cas", "*", "act_back_att", "\n", "\n", "sorted_inst_cas", ",", "_", "=", "torch", ".", "sort", "(", "act_inst_cas", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "sorted_cont_cas", ",", "_", "=", "torch", ".", "sort", "(", "act_cont_cas", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "sorted_back_cas", ",", "_", "=", "torch", ".", "sort", "(", "act_back_cas", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "\n", "act_inst_cls", "=", "torch", ".", "mean", "(", "sorted_inst_cas", "[", ":", ",", ":", "inst_topk_num", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "act_cont_cls", "=", "torch", ".", "mean", "(", "sorted_cont_cas", "[", ":", ",", ":", "cont_topk_num", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "act_back_cls", "=", "torch", ".", "mean", "(", "sorted_back_cas", "[", ":", ",", ":", "back_topk_num", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "act_inst_cls", "=", "torch", ".", "softmax", "(", "act_inst_cls", ",", "dim", "=", "1", ")", "\n", "act_cont_cls", "=", "torch", ".", "softmax", "(", "act_cont_cls", ",", "dim", "=", "1", ")", "\n", "act_back_cls", "=", "torch", ".", "softmax", "(", "act_back_cls", ",", "dim", "=", "1", ")", "\n", "\n", "act_inst_cas", "=", "torch", ".", "softmax", "(", "act_inst_cas", ",", "dim", "=", "2", ")", "\n", "act_cont_cas", "=", "torch", ".", "softmax", "(", "act_cont_cas", ",", "dim", "=", "2", ")", "\n", "act_back_cas", "=", "torch", ".", "softmax", "(", "act_back_cas", ",", "dim", "=", "2", ")", "\n", "\n", "act_cas", "=", "torch", ".", "softmax", "(", "act_cas", ",", "dim", "=", "2", ")", "\n", "\n", "_", ",", "sorted_act_inst_att_idx", "=", "torch", ".", "sort", "(", "act_inst_att", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "_", ",", "sorted_act_cont_att_idx", "=", "torch", ".", "sort", "(", "act_cont_att", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "_", ",", "sorted_act_back_att_idx", "=", "torch", ".", "sort", "(", "act_back_att", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "act_inst_feat_idx", "=", "sorted_act_inst_att_idx", "[", ":", ",", ":", "inst_topk_num", ",", ":", "]", ".", "expand", "(", "[", "-", "1", ",", "-", "1", ",", "self", ".", "feature_dim", "]", ")", "\n", "act_cont_feat_idx", "=", "sorted_act_cont_att_idx", "[", ":", ",", ":", "cont_topk_num", ",", ":", "]", ".", "expand", "(", "[", "-", "1", ",", "-", "1", ",", "self", ".", "feature_dim", "]", ")", "\n", "act_back_feat_idx", "=", "sorted_act_back_att_idx", "[", ":", ",", ":", "back_topk_num", ",", ":", "]", ".", "expand", "(", "[", "-", "1", ",", "-", "1", ",", "self", ".", "feature_dim", "]", ")", "\n", "act_inst_feat", "=", "torch", ".", "mean", "(", "torch", ".", "gather", "(", "embeded_feature_rev", ",", "1", ",", "act_inst_feat_idx", ")", ",", "dim", "=", "1", ")", "\n", "act_cont_feat", "=", "torch", ".", "mean", "(", "torch", ".", "gather", "(", "embeded_feature_rev", ",", "1", ",", "act_cont_feat_idx", ")", ",", "dim", "=", "1", ")", "\n", "act_back_feat", "=", "torch", ".", "mean", "(", "torch", ".", "gather", "(", "embeded_feature_rev", ",", "1", ",", "act_back_feat_idx", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "act_inst_cls", ",", "act_cont_cls", ",", "act_back_cls", ",", "act_inst_feat", ",", "act_cont_feat", ",", "act_back_feat", ",", "temp_att", ",", "act_inst_cas", ",", "act_cas", ",", "act_cont_cas", ",", "act_back_cas", "\n", "\n"]], "home.repos.pwc.inspect_result.ispc-lab_ACM-Net.config.model_config.build_args": [[109, 157], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "build_args", "(", "dataset", "=", "None", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"This script is used for the weakly-supervised temporal aciton localization task.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint\"", ",", "default", "=", "None", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--start_epoch\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "default", "=", "'0'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_workers\"", ",", "default", "=", "6", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "default", "=", "\"THUMOS\"", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "default", "=", "16", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "default", "=", "1000", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--without_wandb\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test\"", ",", "action", "=", "\"store_true\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "dataset", "is", "not", "None", ":", "\n", "        ", "args", ".", "dataset", "=", "dataset", "\n", "# Based on the selected dataset, we set dataset specific hyper-params. ", "\n", "", "args", ".", "class_name_lst", "=", "_CLASS_NAME", "[", "args", ".", "dataset", "]", "\n", "args", ".", "action_cls_num", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"action_cls_num\"", "]", "\n", "\n", "args", ".", "dropout", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"dropout\"", "]", "\n", "args", ".", "lr", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"lr\"", "]", "\n", "args", ".", "weight_decay", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"weight_decay\"", "]", "\n", "\n", "args", ".", "frames_per_sec", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"frames_per_sec\"", "]", "\n", "args", ".", "segment_frames_num", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"segment_frames_num\"", "]", "\n", "args", ".", "sample_segments_num", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"sample_segments_num\"", "]", "\n", "args", ".", "feature_dim", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"feature_dim\"", "]", "\n", "\n", "args", ".", "cls_threshold", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"cls_threshold\"", "]", "\n", "args", ".", "tiou_thresholds", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"tiou_thresholds\"", "]", "\n", "args", ".", "test_gt_file_path", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"test_gt_file\"", "]", "\n", "args", ".", "data_dir", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"data_dir\"", "]", "\n", "\n", "args", ".", "test_upgrade_scale", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"test_upgrade_scale\"", "]", "\n", "args", ".", "nms_thresh", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"nms_thresh\"", "]", "\n", "\n", "args", ".", "ins_topk_seg", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"ins_topk_seg\"", "]", "\n", "args", ".", "con_topk_seg", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"con_topk_seg\"", "]", "\n", "args", ".", "bak_topk_seg", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"bak_topk_seg\"", "]", "\n", "\n", "args", ".", "loss_lamb_1", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"loss_lamb_1\"", "]", "\n", "args", ".", "loss_lamb_2", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"loss_lamb_2\"", "]", "\n", "args", ".", "loss_lamb_3", "=", "_DATASET_HYPER_PARAMS", "[", "args", ".", "dataset", "]", "[", "\"loss_lamb_3\"", "]", "\n", "\n", "return", "args", "", "", ""]]}