{"home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.probe_inductive_bias.probe": [[13, 103], ["model_type.startswith", "torch.from_numpy().permute", "print", "load_blender.load_blender_data", "print", "print", "print", "torch.from_numpy().permute.min", "torch.from_numpy().permute.max", "torch.no_grad", "tqdm.trange", "torch.cat", "print", "print", "torch.save", "clip_utils.load_rn", "crw_utils.load_rn18", "model_type.startswith", "torch.from_numpy", "len", "images[].float().to", "torch.nn.functional.interpolate", "torchvision.transforms.Normalize.", "print", "embed", "torch.cat.append", "len", "clip_utils.clip_model_rn", "clip_utils.load_vit", "crw_utils.embed_image", "torchvision.transforms.Normalize", "torch.cat.cpu().numpy", "torchvision.models.resnext50_32x4d", "torchvision.models.resnext50_32x4d.eval", "torchvision.models.resnext50_32x4d.to", "torch.nn.Identity", "images[].float", "clip_utils.clip_model_vit", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_blender.load_blender_data", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.load_rn", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.Embedder.embed", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.load_vit", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.embed_image"], ["def", "probe", "(", "\n", "dataset_type", ",", "\n", "datadir", ",", "\n", "half_res", ",", "\n", "output_path", ",", "\n", "testskip", "=", "8", ",", "\n", "device", "=", "'cuda'", ",", "\n", "batch_size", "=", "16", ",", "\n", "model_type", "=", "'clip_rn50'", ",", "\n", ")", ":", "\n", "    ", "if", "dataset_type", "==", "'blender'", ":", "\n", "        ", "images", ",", "poses", ",", "render_poses", ",", "hwf", ",", "i_split", "=", "load_blender_data", "(", "datadir", ",", "half_res", ",", "testskip", ")", "\n", "print", "(", "'Loaded blender'", ",", "images", ".", "shape", ",", "poses", ".", "shape", ",", "render_poses", ".", "shape", ",", "hwf", ",", "datadir", ")", "\n", "print", "(", "'poses[0]'", ",", "poses", "[", "0", "]", ")", "\n", "print", "(", "'render_poses[0]'", ",", "render_poses", "[", "0", "]", ")", "\n", "i_train", ",", "i_val", ",", "i_test", "=", "i_split", "\n", "\n", "near", "=", "2.", "\n", "far", "=", "6.", "\n", "\n", "images", "=", "images", "[", "...", ",", ":", "3", "]", "*", "images", "[", "...", ",", "-", "1", ":", "]", "+", "(", "1.", "-", "images", "[", "...", ",", "-", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "# Load embedding model", "\n", "", "if", "model_type", ".", "startswith", "(", "'clip_'", ")", ":", "\n", "        ", "import", "clip_utils", "\n", "\n", "normalize", "=", "clip_utils", ".", "CLIP_NORMALIZE", "\n", "if", "model_type", "==", "'clip_rn50'", ":", "\n", "            ", "clip_utils", ".", "load_rn", "(", ")", "\n", "embed", "=", "lambda", "ims", ":", "clip_utils", ".", "clip_model_rn", "(", "images_or_text", "=", "ims", ")", "\n", "assert", "not", "clip_utils", ".", "clip_model_rn", ".", "training", "\n", "", "elif", "model_type", "==", "'clip_vit'", ":", "\n", "            ", "clip_utils", ".", "load_vit", "(", ")", "\n", "embed", "=", "lambda", "ims", ":", "clip_utils", ".", "clip_model_vit", "(", "images_or_text", "=", "ims", ")", "[", ":", ",", "0", "]", "# select CLS token embedding, [N, D]", "\n", "assert", "not", "clip_utils", ".", "clip_model_vit", ".", "training", "\n", "", "", "elif", "model_type", "==", "'crw_rn18'", ":", "\n", "        ", "import", "crw_utils", "\n", "\n", "normalize", "=", "lambda", "ims", ":", "ims", "# crw_utils.embed_image handles normalization", "\n", "crw_utils", ".", "load_rn18", "(", ")", "\n", "embed", "=", "lambda", "ims", ":", "crw_utils", ".", "embed_image", "(", "ims", ",", "spatial_reduction", "=", "'flatten'", ")", "\n", "assert", "not", "crw_utils", ".", "crw_rn18_model", ".", "training", "\n", "", "elif", "model_type", ".", "startswith", "(", "'imagenet_'", ")", ":", "\n", "# Pretrained models in torchvision trained with ImageNet supervision", "\n", "        ", "normalize", "=", "torchvision", ".", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "model_type", "==", "'imagenet_resnext50_32x4d'", ":", "\n", "            ", "model", "=", "torchvision", ".", "models", ".", "resnext50_32x4d", "(", "pretrained", "=", "True", ")", "\n", "model", ".", "eval", "(", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "# TODO: possibly set model.layer4 to identity to extract layer3 features?", "\n", "model", ".", "fc", "=", "torch", ".", "nn", ".", "Identity", "(", ")", "# don't project from features to classes", "\n", "embed", "=", "model", "\n", "assert", "not", "model", ".", "training", "\n", "# elif model_type == 'imagenet_wide_resnet50_2':", "\n", "#     pass", "\n", "\n", "# Prepare images", "\n", "", "", "images", "=", "torch", ".", "from_numpy", "(", "images", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "print", "(", "'Loaded images:'", ",", "images", ".", "shape", ",", "images", ".", "min", "(", ")", ",", "images", ".", "max", "(", ")", ")", "\n", "\n", "# Embed images", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# DEBUG: set some images to junk", "\n", "# images[-10:].uniform_()", "\n", "\n", "        ", "embedding", "=", "[", "]", "\n", "for", "i", "in", "tqdm", ".", "trange", "(", "0", ",", "len", "(", "images", ")", ",", "batch_size", ",", "desc", "=", "'Embedding images'", ")", ":", "\n", "            ", "images_batch", "=", "images", "[", "i", ":", "i", "+", "batch_size", "]", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "images_batch", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "images_batch", ",", "size", "=", "(", "224", ",", "224", ")", ",", "mode", "=", "'bicubic'", ")", "\n", "images_batch", "=", "normalize", "(", "images_batch", ")", "\n", "print", "(", "'images_batch'", ",", "images_batch", ".", "shape", ")", "\n", "embedding_batch", "=", "embed", "(", "images_batch", ")", "\n", "embedding", ".", "append", "(", "embedding_batch", ")", "\n", "", "embedding", "=", "torch", ".", "cat", "(", "embedding", ",", "dim", "=", "0", ")", "\n", "print", "(", "'Embedding:'", ",", "embedding", ".", "shape", ")", "\n", "assert", "embedding", ".", "shape", "[", "0", "]", "==", "len", "(", "images", ")", "\n", "\n", "# Write results", "\n", "print", "(", "'Saving embeddings to'", ",", "output_path", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'images'", ":", "images", ",", "\n", "'poses'", ":", "poses", ",", "\n", "'render_poses'", ":", "render_poses", ",", "\n", "'hwf'", ":", "hwf", ",", "\n", "'i_split'", ":", "i_split", ",", "\n", "'embedding'", ":", "embedding", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "}", ",", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_deepvoxels.load_dv_data": [[6, 109], ["load_deepvoxels.load_dv_data.parse_intrinsics"], "function", ["None"], ["def", "load_dv_data", "(", "scene", "=", "'cube'", ",", "basedir", "=", "'/data/deepvoxels'", ",", "testskip", "=", "8", ")", ":", "\n", "\n", "\n", "    ", "def", "parse_intrinsics", "(", "filepath", ",", "trgt_sidelength", ",", "invert_y", "=", "False", ")", ":", "\n", "# Get camera intrinsics", "\n", "        ", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "file", ":", "\n", "            ", "f", ",", "cx", ",", "cy", "=", "list", "(", "map", "(", "float", ",", "file", ".", "readline", "(", ")", ".", "split", "(", ")", ")", ")", "[", ":", "3", "]", "\n", "grid_barycenter", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "file", ".", "readline", "(", ")", ".", "split", "(", ")", ")", ")", ")", "\n", "near_plane", "=", "float", "(", "file", ".", "readline", "(", ")", ")", "\n", "scale", "=", "float", "(", "file", ".", "readline", "(", ")", ")", "\n", "height", ",", "width", "=", "map", "(", "float", ",", "file", ".", "readline", "(", ")", ".", "split", "(", ")", ")", "\n", "\n", "try", ":", "\n", "                ", "world2cam_poses", "=", "int", "(", "file", ".", "readline", "(", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "world2cam_poses", "=", "None", "\n", "\n", "", "", "if", "world2cam_poses", "is", "None", ":", "\n", "            ", "world2cam_poses", "=", "False", "\n", "\n", "", "world2cam_poses", "=", "bool", "(", "world2cam_poses", ")", "\n", "\n", "print", "(", "cx", ",", "cy", ",", "f", ",", "height", ",", "width", ")", "\n", "\n", "cx", "=", "cx", "/", "width", "*", "trgt_sidelength", "\n", "cy", "=", "cy", "/", "height", "*", "trgt_sidelength", "\n", "f", "=", "trgt_sidelength", "/", "height", "*", "f", "\n", "\n", "fx", "=", "f", "\n", "if", "invert_y", ":", "\n", "            ", "fy", "=", "-", "f", "\n", "", "else", ":", "\n", "            ", "fy", "=", "f", "\n", "\n", "# Build the intrinsic matrices", "\n", "", "full_intrinsic", "=", "np", ".", "array", "(", "[", "[", "fx", ",", "0.", ",", "cx", ",", "0.", "]", ",", "\n", "[", "0.", ",", "fy", ",", "cy", ",", "0", "]", ",", "\n", "[", "0.", ",", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "\n", "return", "full_intrinsic", ",", "grid_barycenter", ",", "scale", ",", "near_plane", ",", "world2cam_poses", "\n", "\n", "\n", "", "def", "load_pose", "(", "filename", ")", ":", "\n", "        ", "assert", "os", ".", "path", ".", "isfile", "(", "filename", ")", "\n", "nums", "=", "open", "(", "filename", ")", ".", "read", "(", ")", ".", "split", "(", ")", "\n", "return", "np", ".", "array", "(", "[", "float", "(", "x", ")", "for", "x", "in", "nums", "]", ")", ".", "reshape", "(", "[", "4", ",", "4", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "\n", "", "H", "=", "512", "\n", "W", "=", "512", "\n", "deepvoxels_base", "=", "'{}/train/{}/'", ".", "format", "(", "basedir", ",", "scene", ")", "\n", "\n", "full_intrinsic", ",", "grid_barycenter", ",", "scale", ",", "near_plane", ",", "world2cam_poses", "=", "parse_intrinsics", "(", "os", ".", "path", ".", "join", "(", "deepvoxels_base", ",", "'intrinsics.txt'", ")", ",", "H", ")", "\n", "print", "(", "full_intrinsic", ",", "grid_barycenter", ",", "scale", ",", "near_plane", ",", "world2cam_poses", ")", "\n", "focal", "=", "full_intrinsic", "[", "0", ",", "0", "]", "\n", "print", "(", "H", ",", "W", ",", "focal", ")", "\n", "\n", "\n", "def", "dir2poses", "(", "posedir", ")", ":", "\n", "        ", "poses", "=", "np", ".", "stack", "(", "[", "load_pose", "(", "os", ".", "path", ".", "join", "(", "posedir", ",", "f", ")", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "posedir", ")", ")", "if", "f", ".", "endswith", "(", "'txt'", ")", "]", ",", "0", ")", "\n", "transf", "=", "np", ".", "array", "(", "[", "\n", "[", "1", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "-", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1.", "]", ",", "\n", "]", ")", "\n", "poses", "=", "poses", "@", "transf", "\n", "poses", "=", "poses", "[", ":", ",", ":", "3", ",", ":", "4", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "poses", "\n", "\n", "", "posedir", "=", "os", ".", "path", ".", "join", "(", "deepvoxels_base", ",", "'pose'", ")", "\n", "poses", "=", "dir2poses", "(", "posedir", ")", "\n", "testposes", "=", "dir2poses", "(", "'{}/test/{}/pose'", ".", "format", "(", "basedir", ",", "scene", ")", ")", "\n", "testposes", "=", "testposes", "[", ":", ":", "testskip", "]", "\n", "valposes", "=", "dir2poses", "(", "'{}/validation/{}/pose'", ".", "format", "(", "basedir", ",", "scene", ")", ")", "\n", "valposes", "=", "valposes", "[", ":", ":", "testskip", "]", "\n", "\n", "imgfiles", "=", "[", "f", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "deepvoxels_base", ",", "'rgb'", ")", ")", ")", "if", "f", ".", "endswith", "(", "'png'", ")", "]", "\n", "imgs", "=", "np", ".", "stack", "(", "[", "imageio", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "deepvoxels_base", ",", "'rgb'", ",", "f", ")", ")", "/", "255.", "for", "f", "in", "imgfiles", "]", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "\n", "testimgd", "=", "'{}/test/{}/rgb'", ".", "format", "(", "basedir", ",", "scene", ")", "\n", "imgfiles", "=", "[", "f", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "testimgd", ")", ")", "if", "f", ".", "endswith", "(", "'png'", ")", "]", "\n", "testimgs", "=", "np", ".", "stack", "(", "[", "imageio", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "testimgd", ",", "f", ")", ")", "/", "255.", "for", "f", "in", "imgfiles", "[", ":", ":", "testskip", "]", "]", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "valimgd", "=", "'{}/validation/{}/rgb'", ".", "format", "(", "basedir", ",", "scene", ")", "\n", "imgfiles", "=", "[", "f", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "valimgd", ")", ")", "if", "f", ".", "endswith", "(", "'png'", ")", "]", "\n", "valimgs", "=", "np", ".", "stack", "(", "[", "imageio", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "valimgd", ",", "f", ")", ")", "/", "255.", "for", "f", "in", "imgfiles", "[", ":", ":", "testskip", "]", "]", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "all_imgs", "=", "[", "imgs", ",", "valimgs", ",", "testimgs", "]", "\n", "counts", "=", "[", "0", "]", "+", "[", "x", ".", "shape", "[", "0", "]", "for", "x", "in", "all_imgs", "]", "\n", "counts", "=", "np", ".", "cumsum", "(", "counts", ")", "\n", "i_split", "=", "[", "np", ".", "arange", "(", "counts", "[", "i", "]", ",", "counts", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "\n", "imgs", "=", "np", ".", "concatenate", "(", "all_imgs", ",", "0", ")", "\n", "poses", "=", "np", ".", "concatenate", "(", "[", "poses", ",", "valposes", ",", "testposes", "]", ",", "0", ")", "\n", "\n", "render_poses", "=", "testposes", "\n", "\n", "print", "(", "poses", ".", "shape", ",", "imgs", ".", "shape", ")", "\n", "\n", "return", "imgs", ",", "poses", ",", "render_poses", ",", "[", "H", ",", "W", ",", "focal", "]", ",", "i_split", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff._minify": [[8, 58], ["os.path.join", "os.getcwd", "os.path.join", "os.path.join", "os.path.join", "isinstance", "os.path.join", "os.path.exists", "print", "os.makedirs", "check_output", "print", "os.chdir", "check_output", "os.chdir", "print", "os.path.exists", "os.path.exists", "sorted", "any", "imgs[].split", "check_output", "print", "os.listdir", "f.endswith"], "function", ["None"], ["def", "_minify", "(", "basedir", ",", "factors", "=", "[", "]", ",", "resolutions", "=", "[", "]", ")", ":", "\n", "    ", "needtoload", "=", "False", "\n", "for", "r", "in", "factors", ":", "\n", "        ", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images_{}'", ".", "format", "(", "r", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "imgdir", ")", ":", "\n", "            ", "needtoload", "=", "True", "\n", "", "", "for", "r", "in", "resolutions", ":", "\n", "        ", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images_{}x{}'", ".", "format", "(", "r", "[", "1", "]", ",", "r", "[", "0", "]", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "imgdir", ")", ":", "\n", "            ", "needtoload", "=", "True", "\n", "", "", "if", "not", "needtoload", ":", "\n", "        ", "return", "\n", "\n", "", "from", "shutil", "import", "copy", "\n", "from", "subprocess", "import", "check_output", "\n", "\n", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images'", ")", "\n", "imgs", "=", "[", "os", ".", "path", ".", "join", "(", "imgdir", ",", "f", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "imgdir", ")", ")", "]", "\n", "imgs", "=", "[", "f", "for", "f", "in", "imgs", "if", "any", "(", "[", "f", ".", "endswith", "(", "ex", ")", "for", "ex", "in", "[", "'JPG'", ",", "'jpg'", ",", "'png'", ",", "'jpeg'", ",", "'PNG'", "]", "]", ")", "]", "\n", "imgdir_orig", "=", "imgdir", "\n", "\n", "wd", "=", "os", ".", "getcwd", "(", ")", "\n", "\n", "for", "r", "in", "factors", "+", "resolutions", ":", "\n", "        ", "if", "isinstance", "(", "r", ",", "int", ")", ":", "\n", "            ", "name", "=", "'images_{}'", ".", "format", "(", "r", ")", "\n", "resizearg", "=", "'{}%'", ".", "format", "(", "100.", "/", "r", ")", "\n", "", "else", ":", "\n", "            ", "name", "=", "'images_{}x{}'", ".", "format", "(", "r", "[", "1", "]", ",", "r", "[", "0", "]", ")", "\n", "resizearg", "=", "'{}x{}'", ".", "format", "(", "r", "[", "1", "]", ",", "r", "[", "0", "]", ")", "\n", "", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "imgdir", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "print", "(", "'Minifying'", ",", "r", ",", "basedir", ")", "\n", "\n", "os", ".", "makedirs", "(", "imgdir", ")", "\n", "check_output", "(", "'cp {}/* {}'", ".", "format", "(", "imgdir_orig", ",", "imgdir", ")", ",", "shell", "=", "True", ")", "\n", "\n", "ext", "=", "imgs", "[", "0", "]", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "\n", "args", "=", "' '", ".", "join", "(", "[", "'mogrify'", ",", "'-resize'", ",", "resizearg", ",", "'-format'", ",", "'png'", ",", "'*.{}'", ".", "format", "(", "ext", ")", "]", ")", "\n", "print", "(", "args", ")", "\n", "os", ".", "chdir", "(", "imgdir", ")", "\n", "check_output", "(", "args", ",", "shell", "=", "True", ")", "\n", "os", ".", "chdir", "(", "wd", ")", "\n", "\n", "if", "ext", "!=", "'png'", ":", "\n", "            ", "check_output", "(", "'rm {}/*.{}'", ".", "format", "(", "imgdir", ",", "ext", ")", ",", "shell", "=", "True", ")", "\n", "print", "(", "'Removed duplicates'", ")", "\n", "", "print", "(", "'Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff._load_data": [[62, 119], ["numpy.load", "poses_arr[].reshape().transpose", "poses_arr[].transpose", "os.path.join", "numpy.array().reshape", "numpy.stack", "print", "os.path.join", "imageio.imread", "load_llff._minify", "os.path.exists", "print", "os.path.join", "len", "print", "imageio.imread", "f.endswith", "poses_arr[].reshape", "os.path.join", "int", "load_llff._minify", "sorted", "numpy.array", "imageio.imread", "imageio.imread", "sorted", "float", "int", "load_llff._minify", "os.listdir", "f.endswith", "f.endswith", "f.endswith", "len", "load_llff._load_data.imread"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.load", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff._minify", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff._minify", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff._minify"], ["", "", "def", "_load_data", "(", "basedir", ",", "factor", "=", "None", ",", "width", "=", "None", ",", "height", "=", "None", ",", "load_imgs", "=", "True", ")", ":", "\n", "\n", "    ", "poses_arr", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'poses_bounds.npy'", ")", ")", "\n", "poses", "=", "poses_arr", "[", ":", ",", ":", "-", "2", "]", ".", "reshape", "(", "[", "-", "1", ",", "3", ",", "5", "]", ")", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "bds", "=", "poses_arr", "[", ":", ",", "-", "2", ":", "]", ".", "transpose", "(", "[", "1", ",", "0", "]", ")", "\n", "\n", "img0", "=", "[", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images'", ",", "f", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images'", ")", ")", ")", "if", "f", ".", "endswith", "(", "'JPG'", ")", "or", "f", ".", "endswith", "(", "'jpg'", ")", "or", "f", ".", "endswith", "(", "'png'", ")", "]", "[", "0", "]", "\n", "sh", "=", "imageio", ".", "imread", "(", "img0", ")", ".", "shape", "\n", "\n", "sfx", "=", "''", "\n", "\n", "if", "factor", "is", "not", "None", ":", "\n", "        ", "sfx", "=", "'_{}'", ".", "format", "(", "factor", ")", "\n", "_minify", "(", "basedir", ",", "factors", "=", "[", "factor", "]", ")", "\n", "factor", "=", "factor", "\n", "", "elif", "height", "is", "not", "None", ":", "\n", "        ", "factor", "=", "sh", "[", "0", "]", "/", "float", "(", "height", ")", "\n", "width", "=", "int", "(", "sh", "[", "1", "]", "/", "factor", ")", "\n", "_minify", "(", "basedir", ",", "resolutions", "=", "[", "[", "height", ",", "width", "]", "]", ")", "\n", "sfx", "=", "'_{}x{}'", ".", "format", "(", "width", ",", "height", ")", "\n", "", "elif", "width", "is", "not", "None", ":", "\n", "        ", "factor", "=", "sh", "[", "1", "]", "/", "float", "(", "width", ")", "\n", "height", "=", "int", "(", "sh", "[", "0", "]", "/", "factor", ")", "\n", "_minify", "(", "basedir", ",", "resolutions", "=", "[", "[", "height", ",", "width", "]", "]", ")", "\n", "sfx", "=", "'_{}x{}'", ".", "format", "(", "width", ",", "height", ")", "\n", "", "else", ":", "\n", "        ", "factor", "=", "1", "\n", "\n", "", "imgdir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "'images'", "+", "sfx", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "imgdir", ")", ":", "\n", "        ", "print", "(", "imgdir", ",", "'does not exist, returning'", ")", "\n", "return", "\n", "\n", "", "imgfiles", "=", "[", "os", ".", "path", ".", "join", "(", "imgdir", ",", "f", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "imgdir", ")", ")", "if", "f", ".", "endswith", "(", "'JPG'", ")", "or", "f", ".", "endswith", "(", "'jpg'", ")", "or", "f", ".", "endswith", "(", "'png'", ")", "]", "\n", "if", "poses", ".", "shape", "[", "-", "1", "]", "!=", "len", "(", "imgfiles", ")", ":", "\n", "        ", "print", "(", "'Mismatch between imgs {} and poses {} !!!!'", ".", "format", "(", "len", "(", "imgfiles", ")", ",", "poses", ".", "shape", "[", "-", "1", "]", ")", ")", "\n", "return", "\n", "\n", "", "sh", "=", "imageio", ".", "imread", "(", "imgfiles", "[", "0", "]", ")", ".", "shape", "\n", "poses", "[", ":", "2", ",", "4", ",", ":", "]", "=", "np", ".", "array", "(", "sh", "[", ":", "2", "]", ")", ".", "reshape", "(", "[", "2", ",", "1", "]", ")", "\n", "poses", "[", "2", ",", "4", ",", ":", "]", "=", "poses", "[", "2", ",", "4", ",", ":", "]", "*", "1.", "/", "factor", "\n", "\n", "if", "not", "load_imgs", ":", "\n", "        ", "return", "poses", ",", "bds", "\n", "\n", "", "def", "imread", "(", "f", ")", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "'png'", ")", ":", "\n", "            ", "return", "imageio", ".", "imread", "(", "f", ",", "ignoregamma", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "imageio", ".", "imread", "(", "f", ")", "\n", "\n", "", "", "imgs", "=", "imgs", "=", "[", "imread", "(", "f", ")", "[", "...", ",", ":", "3", "]", "/", "255.", "for", "f", "in", "imgfiles", "]", "\n", "imgs", "=", "np", ".", "stack", "(", "imgs", ",", "-", "1", ")", "\n", "\n", "print", "(", "'Loaded image data'", ",", "imgs", ".", "shape", ",", "poses", "[", ":", ",", "-", "1", ",", "0", "]", ")", "\n", "return", "poses", ",", "bds", ",", "imgs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.normalize": [[125, 127], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "normalize", "(", "x", ")", ":", "\n", "    ", "return", "x", "/", "np", ".", "linalg", ".", "norm", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.viewmatrix": [[128, 135], ["load_llff.normalize", "load_llff.normalize", "load_llff.normalize", "numpy.stack", "numpy.cross", "numpy.cross"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.normalize", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.normalize", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.normalize"], ["", "def", "viewmatrix", "(", "z", ",", "up", ",", "pos", ")", ":", "\n", "    ", "vec2", "=", "normalize", "(", "z", ")", "\n", "vec1_avg", "=", "up", "\n", "vec0", "=", "normalize", "(", "np", ".", "cross", "(", "vec1_avg", ",", "vec2", ")", ")", "\n", "vec1", "=", "normalize", "(", "np", ".", "cross", "(", "vec2", ",", "vec0", ")", ")", "\n", "m", "=", "np", ".", "stack", "(", "[", "vec0", ",", "vec1", ",", "vec2", ",", "pos", "]", ",", "1", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.ptstocam": [[136, 139], ["numpy.matmul"], "function", ["None"], ["", "def", "ptstocam", "(", "pts", ",", "c2w", ")", ":", "\n", "    ", "tt", "=", "np", ".", "matmul", "(", "c2w", "[", ":", "3", ",", ":", "3", "]", ".", "T", ",", "(", "pts", "-", "c2w", "[", ":", "3", ",", "3", "]", ")", "[", "...", ",", "np", ".", "newaxis", "]", ")", "[", "...", ",", "0", "]", "\n", "return", "tt", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.poses_avg": [[140, 150], ["poses[].mean", "load_llff.normalize", "poses[].sum", "numpy.concatenate", "poses[].sum", "load_llff.viewmatrix"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.normalize", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.viewmatrix"], ["", "def", "poses_avg", "(", "poses", ")", ":", "\n", "\n", "    ", "hwf", "=", "poses", "[", "0", ",", ":", "3", ",", "-", "1", ":", "]", "\n", "\n", "center", "=", "poses", "[", ":", ",", ":", "3", ",", "3", "]", ".", "mean", "(", "0", ")", "\n", "vec2", "=", "normalize", "(", "poses", "[", ":", ",", ":", "3", ",", "2", "]", ".", "sum", "(", "0", ")", ")", "\n", "up", "=", "poses", "[", ":", ",", ":", "3", ",", "1", "]", ".", "sum", "(", "0", ")", "\n", "c2w", "=", "np", ".", "concatenate", "(", "[", "viewmatrix", "(", "vec2", ",", "up", ",", "center", ")", ",", "hwf", "]", ",", "1", ")", "\n", "\n", "return", "c2w", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.render_path_spiral": [[153, 163], ["numpy.array", "numpy.linspace", "numpy.dot", "load_llff.normalize", "render_poses.append", "list", "numpy.concatenate", "numpy.array", "numpy.dot", "numpy.array", "load_llff.viewmatrix", "numpy.cos", "numpy.sin", "numpy.sin"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.normalize", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.viewmatrix"], ["", "def", "render_path_spiral", "(", "c2w", ",", "up", ",", "rads", ",", "focal", ",", "zdelta", ",", "zrate", ",", "rots", ",", "N", ")", ":", "\n", "    ", "render_poses", "=", "[", "]", "\n", "rads", "=", "np", ".", "array", "(", "list", "(", "rads", ")", "+", "[", "1.", "]", ")", "\n", "hwf", "=", "c2w", "[", ":", ",", "4", ":", "5", "]", "\n", "\n", "for", "theta", "in", "np", ".", "linspace", "(", "0.", ",", "2.", "*", "np", ".", "pi", "*", "rots", ",", "N", "+", "1", ")", "[", ":", "-", "1", "]", ":", "\n", "        ", "c", "=", "np", ".", "dot", "(", "c2w", "[", ":", "3", ",", ":", "4", "]", ",", "np", ".", "array", "(", "[", "np", ".", "cos", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", ")", ",", "-", "np", ".", "sin", "(", "theta", "*", "zrate", ")", ",", "1.", "]", ")", "*", "rads", ")", "\n", "z", "=", "normalize", "(", "c", "-", "np", ".", "dot", "(", "c2w", "[", ":", "3", ",", ":", "4", "]", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "focal", ",", "1.", "]", ")", ")", ")", "\n", "render_poses", ".", "append", "(", "np", ".", "concatenate", "(", "[", "viewmatrix", "(", "z", ",", "up", ",", "c", ")", ",", "hwf", "]", ",", "1", ")", ")", "\n", "", "return", "render_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.recenter_poses": [[166, 179], ["numpy.reshape", "load_llff.poses_avg", "numpy.concatenate", "numpy.tile", "numpy.concatenate", "numpy.reshape", "numpy.linalg.inv", "numpy.np.float32"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.poses_avg"], ["", "def", "recenter_poses", "(", "poses", ")", ":", "\n", "\n", "    ", "poses_", "=", "poses", "+", "0", "\n", "bottom", "=", "np", ".", "reshape", "(", "[", "0", ",", "0", ",", "0", ",", "1.", "]", ",", "[", "1", ",", "4", "]", ")", "\n", "c2w", "=", "poses_avg", "(", "poses", ")", "\n", "c2w", "=", "np", ".", "concatenate", "(", "[", "c2w", "[", ":", "3", ",", ":", "4", "]", ",", "bottom", "]", ",", "-", "2", ")", "\n", "bottom", "=", "np", ".", "tile", "(", "np", ".", "reshape", "(", "bottom", ",", "[", "1", ",", "1", ",", "4", "]", ")", ",", "[", "poses", ".", "shape", "[", "0", "]", ",", "1", ",", "1", "]", ")", "\n", "poses", "=", "np", ".", "concatenate", "(", "[", "poses", "[", ":", ",", ":", "3", ",", ":", "4", "]", ",", "bottom", "]", ",", "-", "2", ")", "\n", "\n", "poses", "=", "np", ".", "linalg", ".", "inv", "(", "c2w", ")", "@", "poses", "\n", "poses_", "[", ":", ",", ":", "3", ",", ":", "4", "]", "=", "poses", "[", ":", ",", ":", "3", ",", ":", "4", "]", "\n", "poses", "=", "poses_", "\n", "return", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.spherify_poses": [[184, 241], ["load_llff.spherify_poses.min_line_dist"], "function", ["None"], ["", "def", "spherify_poses", "(", "poses", ",", "bds", ")", ":", "\n", "\n", "    ", "p34_to_44", "=", "lambda", "p", ":", "np", ".", "concatenate", "(", "[", "p", ",", "np", ".", "tile", "(", "np", ".", "reshape", "(", "np", ".", "eye", "(", "4", ")", "[", "-", "1", ",", ":", "]", ",", "[", "1", ",", "1", ",", "4", "]", ")", ",", "[", "p", ".", "shape", "[", "0", "]", ",", "1", ",", "1", "]", ")", "]", ",", "1", ")", "\n", "\n", "rays_d", "=", "poses", "[", ":", ",", ":", "3", ",", "2", ":", "3", "]", "\n", "rays_o", "=", "poses", "[", ":", ",", ":", "3", ",", "3", ":", "4", "]", "\n", "\n", "def", "min_line_dist", "(", "rays_o", ",", "rays_d", ")", ":", "\n", "        ", "A_i", "=", "np", ".", "eye", "(", "3", ")", "-", "rays_d", "*", "np", ".", "transpose", "(", "rays_d", ",", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "b_i", "=", "-", "A_i", "@", "rays_o", "\n", "pt_mindist", "=", "np", ".", "squeeze", "(", "-", "np", ".", "linalg", ".", "inv", "(", "(", "np", ".", "transpose", "(", "A_i", ",", "[", "0", ",", "2", ",", "1", "]", ")", "@", "A_i", ")", ".", "mean", "(", "0", ")", ")", "@", "(", "b_i", ")", ".", "mean", "(", "0", ")", ")", "\n", "return", "pt_mindist", "\n", "\n", "", "pt_mindist", "=", "min_line_dist", "(", "rays_o", ",", "rays_d", ")", "\n", "\n", "center", "=", "pt_mindist", "\n", "up", "=", "(", "poses", "[", ":", ",", ":", "3", ",", "3", "]", "-", "center", ")", ".", "mean", "(", "0", ")", "\n", "\n", "vec0", "=", "normalize", "(", "up", ")", "\n", "vec1", "=", "normalize", "(", "np", ".", "cross", "(", "[", ".1", ",", ".2", ",", ".3", "]", ",", "vec0", ")", ")", "\n", "vec2", "=", "normalize", "(", "np", ".", "cross", "(", "vec0", ",", "vec1", ")", ")", "\n", "pos", "=", "center", "\n", "c2w", "=", "np", ".", "stack", "(", "[", "vec1", ",", "vec2", ",", "vec0", ",", "pos", "]", ",", "1", ")", "\n", "\n", "poses_reset", "=", "np", ".", "linalg", ".", "inv", "(", "p34_to_44", "(", "c2w", "[", "None", "]", ")", ")", "@", "p34_to_44", "(", "poses", "[", ":", ",", ":", "3", ",", ":", "4", "]", ")", "\n", "\n", "rad", "=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "poses_reset", "[", ":", ",", ":", "3", ",", "3", "]", ")", ",", "-", "1", ")", ")", ")", "\n", "\n", "sc", "=", "1.", "/", "rad", "\n", "poses_reset", "[", ":", ",", ":", "3", ",", "3", "]", "*=", "sc", "\n", "bds", "*=", "sc", "\n", "rad", "*=", "sc", "\n", "\n", "centroid", "=", "np", ".", "mean", "(", "poses_reset", "[", ":", ",", ":", "3", ",", "3", "]", ",", "0", ")", "\n", "zh", "=", "centroid", "[", "2", "]", "\n", "radcircle", "=", "np", ".", "sqrt", "(", "rad", "**", "2", "-", "zh", "**", "2", ")", "\n", "new_poses", "=", "[", "]", "\n", "\n", "for", "th", "in", "np", ".", "linspace", "(", "0.", ",", "2.", "*", "np", ".", "pi", ",", "120", ")", ":", "\n", "\n", "        ", "camorigin", "=", "np", ".", "array", "(", "[", "radcircle", "*", "np", ".", "cos", "(", "th", ")", ",", "radcircle", "*", "np", ".", "sin", "(", "th", ")", ",", "zh", "]", ")", "\n", "up", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "-", "1.", "]", ")", "\n", "\n", "vec2", "=", "normalize", "(", "camorigin", ")", "\n", "vec0", "=", "normalize", "(", "np", ".", "cross", "(", "vec2", ",", "up", ")", ")", "\n", "vec1", "=", "normalize", "(", "np", ".", "cross", "(", "vec2", ",", "vec0", ")", ")", "\n", "pos", "=", "camorigin", "\n", "p", "=", "np", ".", "stack", "(", "[", "vec0", ",", "vec1", ",", "vec2", ",", "pos", "]", ",", "1", ")", "\n", "\n", "new_poses", ".", "append", "(", "p", ")", "\n", "\n", "", "new_poses", "=", "np", ".", "stack", "(", "new_poses", ",", "0", ")", "\n", "\n", "new_poses", "=", "np", ".", "concatenate", "(", "[", "new_poses", ",", "np", ".", "broadcast_to", "(", "poses", "[", "0", ",", ":", "3", ",", "-", "1", ":", "]", ",", "new_poses", "[", ":", ",", ":", "3", ",", "-", "1", ":", "]", ".", "shape", ")", "]", ",", "-", "1", ")", "\n", "poses_reset", "=", "np", ".", "concatenate", "(", "[", "poses_reset", "[", ":", ",", ":", "3", ",", ":", "4", "]", ",", "np", ".", "broadcast_to", "(", "poses", "[", "0", ",", ":", "3", ",", "-", "1", ":", "]", ",", "poses_reset", "[", ":", ",", ":", "3", ",", "-", "1", ":", "]", ".", "shape", ")", "]", ",", "-", "1", ")", "\n", "\n", "return", "poses_reset", ",", "new_poses", ",", "bds", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.load_llff_data": [[243, 317], ["load_llff._load_data", "print", "numpy.concatenate", "numpy.moveaxis().astype", "numpy.moveaxis().astype", "numpy.moveaxis().astype", "numpy.array().astype", "load_llff.poses_avg", "print", "print", "numpy.sum", "numpy.argmin", "print", "images.astype.astype", "recenter_poses.astype", "np.moveaxis().astype.min", "np.moveaxis().astype.max", "load_llff.recenter_poses", "load_llff.spherify_poses", "load_llff.poses_avg", "print", "print", "load_llff.normalize", "numpy.percentile", "load_llff.render_path_spiral", "numpy.square", "numpy.moveaxis", "numpy.moveaxis", "numpy.moveaxis", "poses[].sum", "numpy.abs", "numpy.array", "np.moveaxis().astype.min", "np.moveaxis().astype.min", "np.moveaxis().astype.max"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff._load_data", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.poses_avg", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.recenter_poses", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.spherify_poses", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.poses_avg", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.normalize", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.render_path_spiral"], ["", "def", "load_llff_data", "(", "basedir", ",", "factor", "=", "8", ",", "recenter", "=", "True", ",", "bd_factor", "=", ".75", ",", "spherify", "=", "False", ",", "path_zflat", "=", "False", ")", ":", "\n", "\n", "\n", "    ", "poses", ",", "bds", ",", "imgs", "=", "_load_data", "(", "basedir", ",", "factor", "=", "factor", ")", "# factor=8 downsamples original imgs by 8x", "\n", "print", "(", "'Loaded'", ",", "basedir", ",", "bds", ".", "min", "(", ")", ",", "bds", ".", "max", "(", ")", ")", "\n", "\n", "# Correct rotation matrix ordering and move variable dim to axis 0", "\n", "poses", "=", "np", ".", "concatenate", "(", "[", "poses", "[", ":", ",", "1", ":", "2", ",", ":", "]", ",", "-", "poses", "[", ":", ",", "0", ":", "1", ",", ":", "]", ",", "poses", "[", ":", ",", "2", ":", ",", ":", "]", "]", ",", "1", ")", "\n", "poses", "=", "np", ".", "moveaxis", "(", "poses", ",", "-", "1", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "imgs", "=", "np", ".", "moveaxis", "(", "imgs", ",", "-", "1", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "images", "=", "imgs", "\n", "bds", "=", "np", ".", "moveaxis", "(", "bds", ",", "-", "1", ",", "0", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Rescale if bd_factor is provided", "\n", "sc", "=", "1.", "if", "bd_factor", "is", "None", "else", "1.", "/", "(", "bds", ".", "min", "(", ")", "*", "bd_factor", ")", "\n", "poses", "[", ":", ",", ":", "3", ",", "3", "]", "*=", "sc", "\n", "bds", "*=", "sc", "\n", "\n", "if", "recenter", ":", "\n", "        ", "poses", "=", "recenter_poses", "(", "poses", ")", "\n", "\n", "", "if", "spherify", ":", "\n", "        ", "poses", ",", "render_poses", ",", "bds", "=", "spherify_poses", "(", "poses", ",", "bds", ")", "\n", "\n", "", "else", ":", "\n", "\n", "        ", "c2w", "=", "poses_avg", "(", "poses", ")", "\n", "print", "(", "'recentered'", ",", "c2w", ".", "shape", ")", "\n", "print", "(", "c2w", "[", ":", "3", ",", ":", "4", "]", ")", "\n", "\n", "## Get spiral", "\n", "# Get average pose", "\n", "up", "=", "normalize", "(", "poses", "[", ":", ",", ":", "3", ",", "1", "]", ".", "sum", "(", "0", ")", ")", "\n", "\n", "# Find a reasonable \"focus depth\" for this dataset", "\n", "close_depth", ",", "inf_depth", "=", "bds", ".", "min", "(", ")", "*", ".9", ",", "bds", ".", "max", "(", ")", "*", "5.", "\n", "dt", "=", ".75", "\n", "mean_dz", "=", "1.", "/", "(", "(", "(", "1.", "-", "dt", ")", "/", "close_depth", "+", "dt", "/", "inf_depth", ")", ")", "\n", "focal", "=", "mean_dz", "\n", "\n", "# Get radii for spiral path", "\n", "shrink_factor", "=", ".8", "\n", "zdelta", "=", "close_depth", "*", ".2", "\n", "tt", "=", "poses", "[", ":", ",", ":", "3", ",", "3", "]", "# ptstocam(poses[:3,3,:].T, c2w).T", "\n", "rads", "=", "np", ".", "percentile", "(", "np", ".", "abs", "(", "tt", ")", ",", "90", ",", "0", ")", "\n", "c2w_path", "=", "c2w", "\n", "N_views", "=", "120", "\n", "N_rots", "=", "2", "\n", "if", "path_zflat", ":", "\n", "#             zloc = np.percentile(tt, 10, 0)[2]", "\n", "            ", "zloc", "=", "-", "close_depth", "*", ".1", "\n", "c2w_path", "[", ":", "3", ",", "3", "]", "=", "c2w_path", "[", ":", "3", ",", "3", "]", "+", "zloc", "*", "c2w_path", "[", ":", "3", ",", "2", "]", "\n", "rads", "[", "2", "]", "=", "0.", "\n", "N_rots", "=", "1", "\n", "N_views", "/=", "2", "\n", "\n", "# Generate poses for spiral path", "\n", "", "render_poses", "=", "render_path_spiral", "(", "c2w_path", ",", "up", ",", "rads", ",", "focal", ",", "zdelta", ",", "zrate", "=", ".5", ",", "rots", "=", "N_rots", ",", "N", "=", "N_views", ")", "\n", "\n", "\n", "", "render_poses", "=", "np", ".", "array", "(", "render_poses", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "c2w", "=", "poses_avg", "(", "poses", ")", "\n", "print", "(", "'Data:'", ")", "\n", "print", "(", "poses", ".", "shape", ",", "images", ".", "shape", ",", "bds", ".", "shape", ")", "\n", "\n", "dists", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "c2w", "[", ":", "3", ",", "3", "]", "-", "poses", "[", ":", ",", ":", "3", ",", "3", "]", ")", ",", "-", "1", ")", "\n", "i_test", "=", "np", ".", "argmin", "(", "dists", ")", "\n", "print", "(", "'HOLDOUT view is'", ",", "i_test", ")", "\n", "\n", "images", "=", "images", ".", "astype", "(", "np", ".", "float32", ")", "\n", "poses", "=", "poses", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "return", "images", ",", "poses", ",", "bds", ",", "render_poses", ",", "i_test", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_blender.pose_spherical": [[29, 35], ["trans_t", "rot_phi", "rot_theta", "torch.Tensor", "torch.Tensor", "numpy.array"], "function", ["None"], ["def", "pose_spherical", "(", "theta", ",", "phi", ",", "radius", ")", ":", "\n", "    ", "c2w", "=", "trans_t", "(", "radius", ")", "\n", "c2w", "=", "rot_phi", "(", "phi", "/", "180.", "*", "np", ".", "pi", ")", "@", "c2w", "\n", "c2w", "=", "rot_theta", "(", "theta", "/", "180.", "*", "np", ".", "pi", ")", "@", "c2w", "\n", "c2w", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "[", "[", "-", "1", ",", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "1", ",", "0", "]", ",", "[", "0", ",", "1", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", ")", "@", "c2w", "\n", "return", "c2w", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_blender.pose_spherical_uniform": [[37, 43], ["numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "load_blender.pose_spherical"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_blender.pose_spherical"], ["", "def", "pose_spherical_uniform", "(", "theta_range", ",", "phi_range", ",", "radius_range", ")", ":", "\n", "    ", "theta", "=", "np", ".", "random", ".", "uniform", "(", "*", "theta_range", ")", "\n", "phi", "=", "np", ".", "random", ".", "uniform", "(", "*", "phi_range", ")", "\n", "radius", "=", "np", ".", "random", ".", "uniform", "(", "*", "radius_range", ")", "\n", "pose", "=", "pose_spherical", "(", "theta", ",", "phi", ",", "radius", ")", "\n", "return", "pose", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_blender.load_blender_data": [[45, 102], ["numpy.concatenate", "numpy.concatenate", "float", "torch.stack", "torch.stack", "numpy.array().astype", "counts.append", "all_imgs.append", "all_poses.append", "numpy.arange", "numpy.tan", "numpy.zeros", "enumerate", "open", "json.load", "os.path.join", "np.concatenate.append", "np.array().astype.append", "range", "load_blender.pose_spherical", "cv2.resize", "os.path.join", "imageio.imread", "numpy.array", "numpy.array", "numpy.array", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.load", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_blender.pose_spherical"], ["", "def", "load_blender_data", "(", "basedir", ",", "half_res", "=", "False", ",", "testskip", "=", "1", ",", "num_render_poses", "=", "40", ")", ":", "\n", "    ", "splits", "=", "[", "'train'", ",", "'val'", ",", "'test'", "]", "\n", "metas", "=", "{", "}", "\n", "for", "s", "in", "splits", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "'transforms_{}.json'", ".", "format", "(", "s", ")", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "metas", "[", "s", "]", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "", "all_imgs", "=", "[", "]", "\n", "all_poses", "=", "[", "]", "\n", "counts", "=", "[", "0", "]", "\n", "for", "s", "in", "splits", ":", "\n", "        ", "meta", "=", "metas", "[", "s", "]", "\n", "imgs", "=", "[", "]", "\n", "poses", "=", "[", "]", "\n", "if", "s", "==", "'train'", "or", "testskip", "==", "0", ":", "\n", "            ", "skip", "=", "1", "\n", "", "else", ":", "\n", "            ", "skip", "=", "testskip", "\n", "\n", "", "for", "frame", "in", "meta", "[", "'frames'", "]", "[", ":", ":", "skip", "]", ":", "\n", "            ", "fname", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "frame", "[", "'file_path'", "]", "+", "'.png'", ")", "\n", "imgs", ".", "append", "(", "imageio", ".", "imread", "(", "fname", ")", ")", "\n", "poses", ".", "append", "(", "np", ".", "array", "(", "frame", "[", "'transform_matrix'", "]", ")", ")", "\n", "", "imgs", "=", "(", "np", ".", "array", "(", "imgs", ")", "/", "255.", ")", ".", "astype", "(", "np", ".", "float32", ")", "# keep all 4 channels (RGBA)", "\n", "poses", "=", "np", ".", "array", "(", "poses", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "counts", ".", "append", "(", "counts", "[", "-", "1", "]", "+", "imgs", ".", "shape", "[", "0", "]", ")", "\n", "all_imgs", ".", "append", "(", "imgs", ")", "\n", "all_poses", ".", "append", "(", "poses", ")", "\n", "\n", "", "i_split", "=", "[", "np", ".", "arange", "(", "counts", "[", "i", "]", ",", "counts", "[", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "\n", "imgs", "=", "np", ".", "concatenate", "(", "all_imgs", ",", "0", ")", "\n", "poses", "=", "np", ".", "concatenate", "(", "all_poses", ",", "0", ")", "\n", "\n", "H", ",", "W", "=", "imgs", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "camera_angle_x", "=", "float", "(", "meta", "[", "'camera_angle_x'", "]", ")", "\n", "focal", "=", ".5", "*", "W", "/", "np", ".", "tan", "(", ".5", "*", "camera_angle_x", ")", "\n", "\n", "render_poses", "=", "torch", ".", "stack", "(", "[", "pose_spherical", "(", "angle", ",", "-", "30.0", ",", "4.0", ")", "for", "angle", "in", "np", ".", "linspace", "(", "-", "180", ",", "180", ",", "num_render_poses", "+", "1", ")", "[", ":", "-", "1", "]", "]", ",", "0", ")", "\n", "\n", "if", "half_res", ":", "\n", "        ", "H", "=", "H", "//", "2", "\n", "W", "=", "W", "//", "2", "\n", "focal", "=", "focal", "/", "2.", "\n", "\n", "imgs_half_res", "=", "np", ".", "zeros", "(", "(", "imgs", ".", "shape", "[", "0", "]", ",", "H", ",", "W", ",", "4", ")", ")", "\n", "for", "i", ",", "img", "in", "enumerate", "(", "imgs", ")", ":", "\n", "# According to the api defined in the link below, the dimension ", "\n", "# should be represented as (W, H).", "\n", "# https://www.tutorialkart.com/opencv/python/opencv-python-resize-image/", "\n", "            ", "imgs_half_res", "[", "i", "]", "=", "cv2", ".", "resize", "(", "img", ",", "(", "W", ",", "H", ")", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ")", "\n", "# imgs_half_res[i] = cv2.resize(img, (H, W), interpolation=cv2.INTER_AREA)", "\n", "", "imgs", "=", "imgs_half_res", "\n", "# imgs = tf.image.resize_area(imgs, [400, 400]).numpy()", "\n", "\n", "\n", "", "return", "imgs", ",", "poses", ",", "render_poses", ",", "[", "H", ",", "W", ",", "focal", "]", ",", "i_split", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.geometry.slerp": [[6, 11], ["numpy.arccos", "numpy.sin", "numpy.dot", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.sin", "numpy.sin"], "function", ["None"], ["def", "slerp", "(", "p0", ",", "p1", ",", "t", ")", ":", "\n", "# https://stackoverflow.com/questions/2879441/how-to-interpolate-rotations", "\n", "    ", "omega", "=", "np", ".", "arccos", "(", "np", ".", "dot", "(", "p0", "/", "np", ".", "linalg", ".", "norm", "(", "p0", ")", ",", "p1", "/", "np", ".", "linalg", ".", "norm", "(", "p1", ")", ")", ")", "\n", "so", "=", "np", ".", "sin", "(", "omega", ")", "\n", "return", "np", ".", "sin", "(", "(", "1.0", "-", "t", ")", "*", "omega", ")", "/", "so", "*", "p0", "+", "np", ".", "sin", "(", "t", "*", "omega", ")", "/", "so", "*", "p1", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.geometry.interp": [[13, 31], ["scipy.spatial.transform.Rotation.from_matrix", "scipy.spatial.transform.Rotation.from_matrix", "geometry.slerp", "scipy.spatial.transform.Rotation.from_quat", "R.as_matrix.as_matrix", "numpy.concatenate", "torch.tensor", "Rotation.from_matrix.as_quat", "Rotation.from_matrix.as_quat"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.geometry.slerp"], ["", "def", "interp", "(", "pose1", ",", "pose2", ",", "s", ")", ":", "\n", "    ", "\"\"\"Interpolate between poses as camera-to-world transformation matrices\"\"\"", "\n", "assert", "pose1", ".", "shape", "==", "(", "3", ",", "4", ")", "\n", "assert", "pose2", ".", "shape", "==", "(", "3", ",", "4", ")", "\n", "\n", "# Camera translation ", "\n", "C", "=", "(", "1", "-", "s", ")", "*", "pose1", "[", ":", ",", "-", "1", "]", "+", "s", "*", "pose2", "[", ":", ",", "-", "1", "]", "\n", "assert", "C", ".", "shape", "==", "(", "3", ",", ")", "\n", "\n", "# Rotation from camera frame to world frame", "\n", "R1", "=", "Rotation", ".", "from_matrix", "(", "pose1", "[", ":", ",", ":", "3", "]", ")", "\n", "R2", "=", "Rotation", ".", "from_matrix", "(", "pose2", "[", ":", ",", ":", "3", "]", ")", "\n", "R", "=", "slerp", "(", "R1", ".", "as_quat", "(", ")", ",", "R2", ".", "as_quat", "(", ")", ",", "s", ")", "\n", "R", "=", "Rotation", ".", "from_quat", "(", "R", ")", "\n", "R", "=", "R", ".", "as_matrix", "(", ")", "\n", "assert", "R", ".", "shape", "==", "(", "3", ",", "3", ")", "\n", "transform", "=", "np", ".", "concatenate", "(", "[", "R", ",", "C", "[", ":", ",", "None", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "return", "torch", ".", "tensor", "(", "transform", ",", "dtype", "=", "pose1", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.geometry.interp3": [[33, 35], ["geometry.interp", "interp().cpu", "geometry.interp"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.geometry.interp", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.geometry.interp"], ["", "def", "interp3", "(", "pose1", ",", "pose2", ",", "pose3", ",", "s12", ",", "s3", ")", ":", "\n", "    ", "return", "interp", "(", "interp", "(", "pose1", ",", "pose2", ",", "s12", ")", ".", "cpu", "(", ")", ",", "pose3", ",", "s3", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.DenseLayer.__init__": [[44, 47], ["torch.Linear.__init__"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ":", "int", ",", "out_dim", ":", "int", ",", "activation", ":", "str", "=", "\"relu\"", ",", "*", "args", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "self", ".", "activation", "=", "activation", "\n", "super", "(", ")", ".", "__init__", "(", "in_dim", ",", "out_dim", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.DenseLayer.reset_parameters": [[48, 52], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.zeros_", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", "->", "None", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ",", "gain", "=", "torch", ".", "nn", ".", "init", ".", "calculate_gain", "(", "self", ".", "activation", ")", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.Embedder.__init__": [[56, 59], ["run_nerf_helpers.Embedder.create_embedding_fn"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.Embedder.create_embedding_fn"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "create_embedding_fn", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.Embedder.create_embedding_fn": [[60, 83], ["embed_fns.append", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "embed_fns.append", "p_fn"], "methods", ["None"], ["", "def", "create_embedding_fn", "(", "self", ")", ":", "\n", "        ", "embed_fns", "=", "[", "]", "\n", "d", "=", "self", ".", "kwargs", "[", "'input_dims'", "]", "\n", "out_dim", "=", "0", "\n", "if", "self", ".", "kwargs", "[", "'include_input'", "]", ":", "\n", "            ", "embed_fns", ".", "append", "(", "lambda", "x", ":", "x", ")", "\n", "out_dim", "+=", "d", "\n", "\n", "", "max_freq", "=", "self", ".", "kwargs", "[", "'max_freq_log2'", "]", "\n", "N_freqs", "=", "self", ".", "kwargs", "[", "'num_freqs'", "]", "\n", "\n", "if", "self", ".", "kwargs", "[", "'log_sampling'", "]", ":", "\n", "            ", "freq_bands", "=", "2.", "**", "torch", ".", "linspace", "(", "0.", ",", "max_freq", ",", "steps", "=", "N_freqs", ")", "\n", "", "else", ":", "\n", "            ", "freq_bands", "=", "torch", ".", "linspace", "(", "2.", "**", "0.", ",", "2.", "**", "max_freq", ",", "steps", "=", "N_freqs", ")", "\n", "\n", "", "for", "freq", "in", "freq_bands", ":", "\n", "            ", "for", "p_fn", "in", "self", ".", "kwargs", "[", "'periodic_fns'", "]", ":", "\n", "                ", "embed_fns", ".", "append", "(", "lambda", "x", ",", "p_fn", "=", "p_fn", ",", "freq", "=", "freq", ":", "p_fn", "(", "x", "*", "freq", ")", ")", "\n", "out_dim", "+=", "d", "\n", "\n", "", "", "self", ".", "embed_fns", "=", "embed_fns", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.Embedder.embed": [[84, 86], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fn"], "methods", ["None"], ["", "def", "embed", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "fn", "(", "inputs", ")", "for", "fn", "in", "self", ".", "embed_fns", "]", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.NeRF.__init__": [[108, 132], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "run_nerf_helpers.DenseLayer", "run_nerf_helpers.DenseLayer", "run_nerf_helpers.DenseLayer", "run_nerf_helpers.DenseLayer", "run_nerf_helpers.DenseLayer", "run_nerf_helpers.DenseLayer", "run_nerf_helpers.DenseLayer", "run_nerf_helpers.DenseLayer", "range"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "D", "=", "8", ",", "W", "=", "256", ",", "input_ch", "=", "3", ",", "input_ch_views", "=", "3", ",", "output_ch", "=", "4", ",", "skips", "=", "[", "4", "]", ",", "use_viewdirs", "=", "False", ")", ":", "\n", "        ", "\"\"\" \n        \"\"\"", "\n", "super", "(", "NeRF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "D", "=", "D", "\n", "self", ".", "W", "=", "W", "\n", "self", ".", "input_ch", "=", "input_ch", "\n", "self", ".", "input_ch_views", "=", "input_ch_views", "\n", "self", ".", "skips", "=", "skips", "\n", "self", ".", "use_viewdirs", "=", "use_viewdirs", "\n", "\n", "self", ".", "pts_linears", "=", "nn", ".", "ModuleList", "(", "\n", "[", "DenseLayer", "(", "input_ch", ",", "W", ",", "activation", "=", "\"relu\"", ")", "]", "+", "[", "DenseLayer", "(", "W", ",", "W", ",", "activation", "=", "\"relu\"", ")", "if", "i", "not", "in", "self", ".", "skips", "else", "DenseLayer", "(", "W", "+", "input_ch", ",", "W", ",", "activation", "=", "\"relu\"", ")", "for", "i", "in", "range", "(", "D", "-", "1", ")", "]", ")", "\n", "\n", "### Implementation according to the official code release (https://github.com/bmild/nerf/blob/master/run_nerf_helpers.py#L104-L105)", "\n", "self", ".", "views_linears", "=", "nn", ".", "ModuleList", "(", "[", "DenseLayer", "(", "input_ch_views", "+", "W", ",", "W", "//", "2", ",", "activation", "=", "\"relu\"", ")", "]", ")", "\n", "\n", "if", "use_viewdirs", ":", "\n", "            ", "self", ".", "feature_linear", "=", "DenseLayer", "(", "W", ",", "W", ",", "activation", "=", "\"linear\"", ")", "\n", "# TODO: use a softplus activation", "\n", "self", ".", "alpha_linear", "=", "DenseLayer", "(", "W", ",", "1", ",", "activation", "=", "\"linear\"", ")", "\n", "self", ".", "rgb_linear", "=", "DenseLayer", "(", "W", "//", "2", ",", "3", ",", "activation", "=", "\"linear\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "output_linear", "=", "DenseLayer", "(", "W", ",", "output_ch", ",", "activation", "=", "\"linear\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.NeRF.trunk_pts": [[133, 141], ["enumerate", "layer", "torch.relu", "torch.relu", "torch.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "trunk_pts", "(", "self", ",", "input_pts", ")", ":", "\n", "        ", "h", "=", "input_pts", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "pts_linears", ")", ":", "\n", "            ", "h", "=", "layer", "(", "h", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "if", "i", "in", "self", ".", "skips", ":", "\n", "                ", "h", "=", "torch", ".", "cat", "(", "[", "input_pts", ",", "h", "]", ",", "-", "1", ")", "\n", "", "", "return", "h", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.NeRF.trunk_viewdirs": [[142, 149], ["run_nerf_helpers.NeRF.rgb_linear", "layer", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "trunk_viewdirs", "(", "self", ",", "h", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "views_linears", ":", "\n", "            ", "h", "=", "layer", "(", "h", ")", "\n", "h", "=", "F", ".", "relu", "(", "h", ")", "\n", "\n", "", "rgb", "=", "self", ".", "rgb_linear", "(", "h", ")", "\n", "return", "rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.NeRF.forward": [[150, 164], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "run_nerf_helpers.NeRF.trunk_pts", "run_nerf_helpers.NeRF.alpha_linear", "run_nerf_helpers.NeRF.feature_linear", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "run_nerf_helpers.NeRF.trunk_viewdirs", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "run_nerf_helpers.NeRF.output_linear"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.NeRF.trunk_pts", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.NeRF.trunk_viewdirs"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input_pts", ",", "input_views", "=", "torch", ".", "split", "(", "x", ",", "[", "self", ".", "input_ch", ",", "self", ".", "input_ch_views", "]", ",", "dim", "=", "-", "1", ")", "\n", "h", "=", "self", ".", "trunk_pts", "(", "input_pts", ")", "\n", "\n", "if", "self", ".", "use_viewdirs", ":", "\n", "            ", "alpha", "=", "self", ".", "alpha_linear", "(", "h", ")", "\n", "feature", "=", "self", ".", "feature_linear", "(", "h", ")", "\n", "h", "=", "torch", ".", "cat", "(", "[", "feature", ",", "input_views", "]", ",", "-", "1", ")", "\n", "rgb", "=", "self", ".", "trunk_viewdirs", "(", "h", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "[", "rgb", ",", "alpha", "]", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "self", ".", "output_linear", "(", "h", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.NeRF.load_weights_from_keras": [[165, 193], ["range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.transpose"], "methods", ["None"], ["", "def", "load_weights_from_keras", "(", "self", ",", "weights", ")", ":", "\n", "        ", "assert", "self", ".", "use_viewdirs", ",", "\"Not implemented if use_viewdirs=False\"", "\n", "\n", "# Load pts_linears", "\n", "for", "i", "in", "range", "(", "self", ".", "D", ")", ":", "\n", "            ", "idx_pts_linears", "=", "2", "*", "i", "\n", "self", ".", "pts_linears", "[", "i", "]", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_pts_linears", "]", ")", ")", "\n", "self", ".", "pts_linears", "[", "i", "]", ".", "bias", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_pts_linears", "+", "1", "]", ")", ")", "\n", "\n", "# Load feature_linear", "\n", "", "idx_feature_linear", "=", "2", "*", "self", ".", "D", "\n", "self", ".", "feature_linear", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_feature_linear", "]", ")", ")", "\n", "self", ".", "feature_linear", ".", "bias", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_feature_linear", "+", "1", "]", ")", ")", "\n", "\n", "# Load views_linears", "\n", "idx_views_linears", "=", "2", "*", "self", ".", "D", "+", "2", "\n", "self", ".", "views_linears", "[", "0", "]", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_views_linears", "]", ")", ")", "\n", "self", ".", "views_linears", "[", "0", "]", ".", "bias", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_views_linears", "+", "1", "]", ")", ")", "\n", "\n", "# Load rgb_linear", "\n", "idx_rbg_linear", "=", "2", "*", "self", ".", "D", "+", "4", "\n", "self", ".", "rgb_linear", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_rbg_linear", "]", ")", ")", "\n", "self", ".", "rgb_linear", ".", "bias", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_rbg_linear", "+", "1", "]", ")", ")", "\n", "\n", "# Load alpha_linear", "\n", "idx_alpha_linear", "=", "2", "*", "self", ".", "D", "+", "6", "\n", "self", ".", "alpha_linear", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_alpha_linear", "]", ")", ")", "\n", "self", ".", "alpha_linear", ".", "bias", ".", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "transpose", "(", "weights", "[", "idx_alpha_linear", "+", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.get_perceptual_metrics": [[16, 41], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "img2mse().item", "numpy.mean", "numpy.mean", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "zip", "torch.cat", "torch.cat", "torch.cat", "lpips.mean().item.mean().item", "skimage.measure.compare_ssim", "skimage.measure.compare_psnr", "lpips.LPIPS().to", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "torch.from_numpy().permute().float", "LPIPS().to.", "lpips_all.append", "img2mse", "zip", "zip", "predi.to", "gti.to", "lpips.mean().item.mean", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "lpips.LPIPS", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy().permute", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_perceptual_metrics", "(", "rgbs", ",", "gts", ",", "lpips_batch_size", "=", "8", ",", "device", "=", "'cuda'", ")", ":", "\n", "# rgbs and gts should be numpy arrays of the same shape", "\n", "    ", "mse", "=", "img2mse", "(", "torch", ".", "from_numpy", "(", "rgbs", ")", ",", "torch", ".", "from_numpy", "(", "gts", ")", ")", ".", "item", "(", ")", "\n", "\n", "# From pixelNeRF https://github.com/sxyu/pixel-nerf/blob/2929708e90b246dbd0329ce2a128ef381bd8c25d/eval/calc_metrics.py#L188", "\n", "global", "lpips_vgg", "\n", "ssim", "=", "[", "compare_ssim", "(", "rgb", ",", "gt", ",", "multichannel", "=", "True", ",", "data_range", "=", "1", ")", "for", "rgb", ",", "gt", "in", "zip", "(", "rgbs", ",", "gts", ")", "]", "\n", "ssim", "=", "np", ".", "mean", "(", "ssim", ")", "\n", "psnr", "=", "[", "compare_psnr", "(", "rgb", ",", "gt", ",", "data_range", "=", "1", ")", "for", "rgb", ",", "gt", "in", "zip", "(", "rgbs", ",", "gts", ")", "]", "\n", "psnr", "=", "np", ".", "mean", "(", "psnr", ")", "\n", "\n", "# From pixelNeRF https://github.com/sxyu/pixel-nerf/blob/2929708e90b246dbd0329ce2a128ef381bd8c25d/eval/calc_metrics.py#L238", "\n", "if", "lpips_vgg", "is", "None", ":", "\n", "        ", "lpips_vgg", "=", "LPIPS", "(", "net", "=", "\"vgg\"", ")", ".", "to", "(", "device", "=", "device", ")", "\n", "", "lpips_all", "=", "[", "]", "\n", "preds_spl", "=", "torch", ".", "split", "(", "torch", ".", "from_numpy", "(", "rgbs", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", ",", "lpips_batch_size", ",", "dim", "=", "0", ")", "\n", "gts_spl", "=", "torch", ".", "split", "(", "torch", ".", "from_numpy", "(", "gts", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "float", "(", ")", ",", "lpips_batch_size", ",", "dim", "=", "0", ")", "\n", "for", "predi", ",", "gti", "in", "zip", "(", "preds_spl", ",", "gts_spl", ")", ":", "\n", "        ", "lpips_i", "=", "lpips_vgg", "(", "predi", ".", "to", "(", "device", "=", "device", ")", ",", "gti", ".", "to", "(", "device", "=", "device", ")", ")", "\n", "lpips_all", ".", "append", "(", "lpips_i", ")", "\n", "", "lpips", "=", "torch", ".", "cat", "(", "lpips_all", ")", "\n", "lpips", "=", "lpips", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n", "return", "mse", ",", "psnr", ",", "ssim", ",", "lpips", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.get_embedder": [[88, 104], ["run_nerf_helpers.Embedder", "eo.embed", "torch.Identity"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.Embedder.embed"], ["", "", "def", "get_embedder", "(", "multires", ",", "i", "=", "0", ")", ":", "\n", "    ", "if", "i", "==", "-", "1", ":", "\n", "        ", "return", "nn", ".", "Identity", "(", ")", ",", "3", "\n", "\n", "", "embed_kwargs", "=", "{", "\n", "'include_input'", ":", "True", ",", "\n", "'input_dims'", ":", "3", ",", "\n", "'max_freq_log2'", ":", "multires", "-", "1", ",", "\n", "'num_freqs'", ":", "multires", ",", "\n", "'log_sampling'", ":", "True", ",", "\n", "'periodic_fns'", ":", "[", "torch", ".", "sin", ",", "torch", ".", "cos", "]", ",", "\n", "}", "\n", "\n", "embedder_obj", "=", "Embedder", "(", "**", "embed_kwargs", ")", "\n", "embed", "=", "lambda", "x", ",", "eo", "=", "embedder_obj", ":", "eo", ".", "embed", "(", "x", ")", "\n", "return", "embed", ",", "embedder_obj", ".", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.get_rays": [[198, 241], ["torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "i.t.t", "j.t.t", "torch.stack", "torch.stack", "torch.stack", "torch.sum", "torch.sum", "torch.sum", "c2w[].expand", "numpy.random.uniform", "torch.arange", "torch.arange", "torch.arange", "numpy.random.uniform", "torch.arange", "torch.arange", "torch.arange", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "print", "print", "print", "print", "print", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["def", "get_rays", "(", "H", ",", "W", ",", "focal", ",", "c2w", ",", "nH", "=", "None", ",", "nW", "=", "None", ",", "jitter", "=", "False", ")", ":", "\n", "# nH and nW specify the number of rays for rows and columns of the rendered image, respectively", "\n", "# By setting nH < H or nW < W, we can render a smaller image that stretches the full", "\n", "# content extent of the scene", "\n", "    ", "if", "nH", "is", "None", ":", "\n", "        ", "nH", "=", "H", "\n", "", "if", "nW", "is", "None", ":", "\n", "        ", "nW", "=", "W", "\n", "\n", "", "if", "jitter", ":", "\n", "# Perturb query points", "\n", "        ", "dW", "=", "W", "//", "nW", "\n", "# start_W = np.random.randint(low=0, high=W % nW + 1)", "\n", "start_W", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "0", ",", "high", "=", "W", "%", "nW", ")", "\n", "end_W", "=", "start_W", "+", "(", "nW", "-", "1", ")", "*", "dW", "\n", "pts_W", "=", "torch", ".", "arange", "(", "start", "=", "start_W", ",", "end", "=", "end_W", "+", "1", ",", "step", "=", "dW", ")", "\n", "\n", "dH", "=", "H", "//", "nH", "\n", "# start_H = np.random.randint(low=0, high=H % nH + 1)", "\n", "start_H", "=", "np", ".", "random", ".", "uniform", "(", "low", "=", "0", ",", "high", "=", "H", "%", "nH", ")", "\n", "end_H", "=", "start_H", "+", "(", "nH", "-", "1", ")", "*", "dH", "\n", "pts_H", "=", "torch", ".", "arange", "(", "start", "=", "start_H", ",", "end", "=", "end_H", "+", "1", ",", "step", "=", "dH", ")", "\n", "\n", "global", "_printed_get_rays", "\n", "if", "not", "_printed_get_rays", ":", "\n", "            ", "print", "(", "'get_rays H'", ",", "H", ")", "\n", "print", "(", "'get_rays W'", ",", "W", ")", "\n", "print", "(", "'get_rays nH nW'", ",", "nH", ",", "nW", ")", "\n", "print", "(", "'get_rays pts_W'", ",", "pts_W", ")", "\n", "print", "(", "'get_rays pts_H'", ",", "pts_H", ")", "\n", "_printed_get_rays", "=", "True", "\n", "", "", "else", ":", "\n", "        ", "pts_W", "=", "torch", ".", "linspace", "(", "0", ",", "W", "-", "1", ",", "nW", ")", "\n", "pts_H", "=", "torch", ".", "linspace", "(", "0", ",", "H", "-", "1", ",", "nH", ")", "\n", "", "i", ",", "j", "=", "torch", ".", "meshgrid", "(", "pts_W", ",", "pts_H", ")", "# pytorch's meshgrid has indexing='ij'", "\n", "i", "=", "i", ".", "t", "(", ")", "\n", "j", "=", "j", ".", "t", "(", ")", "\n", "dirs", "=", "torch", ".", "stack", "(", "[", "(", "i", "-", "W", "*", ".5", ")", "/", "focal", ",", "-", "(", "j", "-", "H", "*", ".5", ")", "/", "focal", ",", "-", "torch", ".", "ones_like", "(", "i", ")", "]", ",", "-", "1", ")", "\n", "# Rotate ray directions from camera frame to the world frame", "\n", "rays_d", "=", "torch", ".", "sum", "(", "dirs", "[", "...", ",", "np", ".", "newaxis", ",", ":", "]", "*", "c2w", "[", ":", "3", ",", ":", "3", "]", ",", "-", "1", ")", "# dot product, equals to: [c2w.dot(dir) for dir in dirs]", "\n", "# Translate camera frame's origin to the world frame. It is the origin of all rays.", "\n", "rays_o", "=", "c2w", "[", ":", "3", ",", "-", "1", "]", ".", "expand", "(", "rays_d", ".", "shape", ")", "\n", "return", "rays_o", ",", "rays_d", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.get_rays_np": [[243, 251], ["numpy.meshgrid", "numpy.stack", "numpy.sum", "numpy.broadcast_to", "numpy.arange", "numpy.arange", "numpy.shape", "numpy.ones_like"], "function", ["None"], ["", "def", "get_rays_np", "(", "H", ",", "W", ",", "focal", ",", "c2w", ")", ":", "\n", "    ", "i", ",", "j", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "W", ",", "dtype", "=", "np", ".", "float32", ")", ",", "np", ".", "arange", "(", "H", ",", "dtype", "=", "np", ".", "float32", ")", ",", "indexing", "=", "'xy'", ")", "\n", "dirs", "=", "np", ".", "stack", "(", "[", "(", "i", "-", "W", "*", ".5", ")", "/", "focal", ",", "-", "(", "j", "-", "H", "*", ".5", ")", "/", "focal", ",", "-", "np", ".", "ones_like", "(", "i", ")", "]", ",", "-", "1", ")", "\n", "# Rotate ray directions from camera frame to the world frame", "\n", "rays_d", "=", "np", ".", "sum", "(", "dirs", "[", "...", ",", "np", ".", "newaxis", ",", ":", "]", "*", "c2w", "[", ":", "3", ",", ":", "3", "]", ",", "-", "1", ")", "# dot product, equals to: [c2w.dot(dir) for dir in dirs]", "\n", "# Translate camera frame's origin to the world frame. It is the origin of all rays.", "\n", "rays_o", "=", "np", ".", "broadcast_to", "(", "c2w", "[", ":", "3", ",", "-", "1", "]", ",", "np", ".", "shape", "(", "rays_d", ")", ")", "\n", "return", "rays_o", ",", "rays_d", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.ndc_rays": [[253, 271], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "function", ["None"], ["", "def", "ndc_rays", "(", "H", ",", "W", ",", "focal", ",", "near", ",", "rays_o", ",", "rays_d", ")", ":", "\n", "# Shift ray origins to near plane", "\n", "    ", "t", "=", "-", "(", "near", "+", "rays_o", "[", "...", ",", "2", "]", ")", "/", "rays_d", "[", "...", ",", "2", "]", "\n", "rays_o", "=", "rays_o", "+", "t", "[", "...", ",", "None", "]", "*", "rays_d", "\n", "\n", "# Projection", "\n", "o0", "=", "-", "1.", "/", "(", "W", "/", "(", "2.", "*", "focal", ")", ")", "*", "rays_o", "[", "...", ",", "0", "]", "/", "rays_o", "[", "...", ",", "2", "]", "\n", "o1", "=", "-", "1.", "/", "(", "H", "/", "(", "2.", "*", "focal", ")", ")", "*", "rays_o", "[", "...", ",", "1", "]", "/", "rays_o", "[", "...", ",", "2", "]", "\n", "o2", "=", "1.", "+", "2.", "*", "near", "/", "rays_o", "[", "...", ",", "2", "]", "\n", "\n", "d0", "=", "-", "1.", "/", "(", "W", "/", "(", "2.", "*", "focal", ")", ")", "*", "(", "rays_d", "[", "...", ",", "0", "]", "/", "rays_d", "[", "...", ",", "2", "]", "-", "rays_o", "[", "...", ",", "0", "]", "/", "rays_o", "[", "...", ",", "2", "]", ")", "\n", "d1", "=", "-", "1.", "/", "(", "H", "/", "(", "2.", "*", "focal", ")", ")", "*", "(", "rays_d", "[", "...", ",", "1", "]", "/", "rays_d", "[", "...", ",", "2", "]", "-", "rays_o", "[", "...", ",", "1", "]", "/", "rays_o", "[", "...", ",", "2", "]", ")", "\n", "d2", "=", "-", "2.", "*", "near", "/", "rays_o", "[", "...", ",", "2", "]", "\n", "\n", "rays_o", "=", "torch", ".", "stack", "(", "[", "o0", ",", "o1", ",", "o2", "]", ",", "-", "1", ")", "\n", "rays_d", "=", "torch", ".", "stack", "(", "[", "d0", ",", "d1", ",", "d2", "]", ",", "-", "1", ")", "\n", "\n", "return", "rays_o", ",", "rays_d", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.sample_pdf": [[274, 318], ["torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cat", "torch.cat", "torch.cat", "np.random.rand.contiguous", "torch.searchsorted", "torch.searchsorted", "torch.searchsorted", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.stack", "torch.stack", "torch.stack", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "torch.where", "torch.where", "torch.where", "torch.sum", "torch.sum", "torch.sum", "torch.linspace", "torch.linspace", "torch.linspace", "np.random.rand.expand", "torch.rand", "torch.rand", "torch.rand", "numpy.random.seed", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat.unsqueeze().expand", "bins.unsqueeze().expand", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "list", "numpy.linspace", "numpy.broadcast_to", "numpy.random.rand", "torch.ones_like", "torch.ones_like", "torch.ones_like", "list", "list", "torch.cat.unsqueeze", "bins.unsqueeze"], "function", ["None"], ["", "def", "sample_pdf", "(", "bins", ",", "weights", ",", "N_samples", ",", "det", "=", "False", ",", "pytest", "=", "False", ")", ":", "\n", "# Get pdf", "\n", "    ", "weights", "=", "weights", "+", "1e-5", "# prevent nans", "\n", "pdf", "=", "weights", "/", "torch", ".", "sum", "(", "weights", ",", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "cdf", "=", "torch", ".", "cumsum", "(", "pdf", ",", "-", "1", ")", "\n", "cdf", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros_like", "(", "cdf", "[", "...", ",", ":", "1", "]", ")", ",", "cdf", "]", ",", "-", "1", ")", "# (batch, len(bins))", "\n", "\n", "# Take uniform samples", "\n", "if", "det", ":", "\n", "        ", "u", "=", "torch", ".", "linspace", "(", "0.", ",", "1.", ",", "steps", "=", "N_samples", ")", "\n", "u", "=", "u", ".", "expand", "(", "list", "(", "cdf", ".", "shape", "[", ":", "-", "1", "]", ")", "+", "[", "N_samples", "]", ")", "\n", "", "else", ":", "\n", "        ", "u", "=", "torch", ".", "rand", "(", "list", "(", "cdf", ".", "shape", "[", ":", "-", "1", "]", ")", "+", "[", "N_samples", "]", ")", "\n", "\n", "# Pytest, overwrite u with numpy's fixed random numbers", "\n", "", "if", "pytest", ":", "\n", "        ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "new_shape", "=", "list", "(", "cdf", ".", "shape", "[", ":", "-", "1", "]", ")", "+", "[", "N_samples", "]", "\n", "if", "det", ":", "\n", "            ", "u", "=", "np", ".", "linspace", "(", "0.", ",", "1.", ",", "N_samples", ")", "\n", "u", "=", "np", ".", "broadcast_to", "(", "u", ",", "new_shape", ")", "\n", "", "else", ":", "\n", "            ", "u", "=", "np", ".", "random", ".", "rand", "(", "*", "new_shape", ")", "\n", "", "u", "=", "torch", ".", "Tensor", "(", "u", ")", "\n", "\n", "# Invert CDF", "\n", "", "u", "=", "u", ".", "contiguous", "(", ")", "\n", "inds", "=", "torch", ".", "searchsorted", "(", "cdf", ",", "u", ",", "right", "=", "True", ")", "\n", "below", "=", "torch", ".", "max", "(", "torch", ".", "zeros_like", "(", "inds", "-", "1", ")", ",", "inds", "-", "1", ")", "\n", "above", "=", "torch", ".", "min", "(", "(", "cdf", ".", "shape", "[", "-", "1", "]", "-", "1", ")", "*", "torch", ".", "ones_like", "(", "inds", ")", ",", "inds", ")", "\n", "inds_g", "=", "torch", ".", "stack", "(", "[", "below", ",", "above", "]", ",", "-", "1", ")", "# (batch, N_samples, 2)", "\n", "\n", "# cdf_g = tf.gather(cdf, inds_g, axis=-1, batch_dims=len(inds_g.shape)-2)", "\n", "# bins_g = tf.gather(bins, inds_g, axis=-1, batch_dims=len(inds_g.shape)-2)", "\n", "matched_shape", "=", "[", "inds_g", ".", "shape", "[", "0", "]", ",", "inds_g", ".", "shape", "[", "1", "]", ",", "cdf", ".", "shape", "[", "-", "1", "]", "]", "\n", "cdf_g", "=", "torch", ".", "gather", "(", "cdf", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "matched_shape", ")", ",", "2", ",", "inds_g", ")", "\n", "bins_g", "=", "torch", ".", "gather", "(", "bins", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "matched_shape", ")", ",", "2", ",", "inds_g", ")", "\n", "\n", "denom", "=", "(", "cdf_g", "[", "...", ",", "1", "]", "-", "cdf_g", "[", "...", ",", "0", "]", ")", "\n", "denom", "=", "torch", ".", "where", "(", "denom", "<", "1e-5", ",", "torch", ".", "ones_like", "(", "denom", ")", ",", "denom", ")", "\n", "t", "=", "(", "u", "-", "cdf_g", "[", "...", ",", "0", "]", ")", "/", "denom", "\n", "samples", "=", "bins_g", "[", "...", ",", "0", "]", "+", "t", "*", "(", "bins_g", "[", "...", ",", "1", "]", "-", "bins_g", "[", "...", ",", "0", "]", ")", "\n", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.gradient_norm": [[320, 329], ["p.grad.data.norm", "p.grad.data.norm.item"], "function", ["None"], ["", "def", "gradient_norm", "(", "parameters", ")", ":", "\n", "# https://discuss.pytorch.org/t/check-the-norm-of-gradients/27961", "\n", "    ", "total_norm", "=", "0.", "\n", "for", "p", "in", "parameters", ":", "\n", "        ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "            ", "param_norm", "=", "p", ".", "grad", ".", "data", ".", "norm", "(", "2", ")", "\n", "total_norm", "+=", "param_norm", ".", "item", "(", ")", "**", "2", "\n", "", "", "total_norm", "=", "total_norm", "**", "(", "1.", "/", "2", ")", "\n", "return", "total_norm", "\n", "", ""]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.batchify": [[32, 40], ["torch.cat", "torch.cat", "torch.cat", "fn", "range"], "function", ["None"], ["def", "batchify", "(", "fn", ",", "chunk", ")", ":", "\n", "    ", "\"\"\"Constructs a version of 'fn' that applies to smaller batches.\n    \"\"\"", "\n", "if", "chunk", "is", "None", ":", "\n", "        ", "return", "fn", "\n", "", "def", "ret", "(", "inputs", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "fn", "(", "inputs", "[", "i", ":", "i", "+", "chunk", "]", ")", "for", "i", "in", "range", "(", "0", ",", "inputs", ".", "shape", "[", "0", "]", ",", "chunk", ")", "]", ",", "0", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.run_network": [[42, 57], ["torch.reshape", "torch.reshape", "torch.reshape", "embed_fn", "torch.reshape", "torch.reshape", "torch.reshape", "viewdirs[].expand", "torch.reshape", "torch.reshape", "torch.reshape", "embeddirs_fn", "torch.cat", "torch.cat", "torch.cat", "run_nerf.batchify", "list"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.batchify"], ["", "def", "run_network", "(", "inputs", ",", "viewdirs", ",", "fn", ",", "embed_fn", ",", "embeddirs_fn", ",", "netchunk", "=", "1024", "*", "64", ")", ":", "\n", "    ", "\"\"\"Prepares inputs and applies network 'fn'.\n    \"\"\"", "\n", "inputs_flat", "=", "torch", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "inputs", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "embedded", "=", "embed_fn", "(", "inputs_flat", ")", "\n", "\n", "if", "viewdirs", "is", "not", "None", ":", "\n", "        ", "input_dirs", "=", "viewdirs", "[", ":", ",", "None", "]", ".", "expand", "(", "inputs", ".", "shape", ")", "\n", "input_dirs_flat", "=", "torch", ".", "reshape", "(", "input_dirs", ",", "[", "-", "1", ",", "input_dirs", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "embedded_dirs", "=", "embeddirs_fn", "(", "input_dirs_flat", ")", "\n", "embedded", "=", "torch", ".", "cat", "(", "[", "embedded", ",", "embedded_dirs", "]", ",", "-", "1", ")", "\n", "\n", "", "outputs_flat", "=", "batchify", "(", "fn", ",", "netchunk", ")", "(", "embedded", ")", "\n", "outputs", "=", "torch", ".", "reshape", "(", "outputs_flat", ",", "list", "(", "inputs", ".", "shape", "[", ":", "-", "1", "]", ")", "+", "[", "outputs_flat", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.batchify_rays": [[59, 76], ["range", "run_nerf.render_rays", "torch.cat", "torch.cat", "torch.cat", "all_ret[].append"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.render_rays"], ["", "def", "batchify_rays", "(", "rays_flat", ",", "chunk", "=", "1024", "*", "32", ",", "keep_keys", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Render rays in smaller minibatches to avoid OOM.\n    \"\"\"", "\n", "# ret_rgb_only = keep_keys and len(keep_keys) == 1 and keep_keys[0] == 'rgb_map'", "\n", "all_ret", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "0", ",", "rays_flat", ".", "shape", "[", "0", "]", ",", "chunk", ")", ":", "\n", "        ", "ret", "=", "render_rays", "(", "rays_flat", "[", "i", ":", "i", "+", "chunk", "]", ",", "**", "kwargs", ")", "\n", "for", "k", "in", "ret", ":", "\n", "            ", "if", "keep_keys", "and", "k", "not", "in", "keep_keys", ":", "\n", "# Don't save this returned value to save memory", "\n", "                ", "continue", "\n", "", "if", "k", "not", "in", "all_ret", ":", "\n", "                ", "all_ret", "[", "k", "]", "=", "[", "]", "\n", "", "all_ret", "[", "k", "]", ".", "append", "(", "ret", "[", "k", "]", ")", "\n", "\n", "", "", "all_ret", "=", "{", "k", ":", "torch", ".", "cat", "(", "all_ret", "[", "k", "]", ",", "0", ")", "for", "k", "in", "all_ret", "}", "\n", "return", "all_ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.render": [[78, 147], ["torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "torch.cat", "torch.cat", "torch.cat", "run_nerf.batchify_rays", "run_nerf_helpers.get_rays", "torch.reshape().float", "torch.reshape().float", "torch.reshape().float", "run_nerf_helpers.ndc_rays", "torch.cat", "torch.cat", "torch.cat", "torch.reshape", "torch.reshape", "torch.reshape", "run_nerf_helpers.get_rays", "torch.norm", "torch.norm", "torch.norm", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "list", "list", "torch.reshape", "torch.reshape", "torch.reshape"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.batchify_rays", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.get_rays", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.ndc_rays", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.get_rays"], ["", "def", "render", "(", "H", ",", "W", ",", "focal", ",", "chunk", "=", "1024", "*", "32", ",", "rays", "=", "None", ",", "c2w", "=", "None", ",", "ndc", "=", "True", ",", "\n", "near", "=", "0.", ",", "far", "=", "1.", ",", "\n", "use_viewdirs", "=", "False", ",", "c2w_staticcam", "=", "None", ",", "\n", "keep_keys", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Render rays\n    Args:\n      H: int. Height of image in pixels.\n      W: int. Width of image in pixels.\n      focal: float. Focal length of pinhole camera.\n      chunk: int. Maximum number of rays to process simultaneously. Used to\n        control maximum memory usage. Does not affect final results.\n      rays: array of shape [2, batch_size, 3]. Ray origin and direction for\n        each example in batch.\n      c2w: array of shape [3, 4]. Camera-to-world transformation matrix.\n      ndc: bool. If True, represent ray origin, direction in NDC coordinates.\n      near: float or array of shape [batch_size]. Nearest distance for a ray.\n      far: float or array of shape [batch_size]. Farthest distance for a ray.\n      use_viewdirs: bool. If True, use viewing direction of a point in space in model.\n      c2w_staticcam: array of shape [3, 4]. If not None, use this transformation matrix for \n       camera while using other c2w argument for viewing directions.\n    Returns:\n      rgb_map: [batch_size, 3]. Predicted RGB values for rays.\n      disp_map: [batch_size]. Disparity map. Inverse of depth.\n      acc_map: [batch_size]. Accumulated opacity (alpha) along a ray.\n      extras: dict with everything returned by render_rays().\n    \"\"\"", "\n", "if", "c2w", "is", "not", "None", ":", "\n", "# special case to render full image", "\n", "        ", "rays_o", ",", "rays_d", "=", "get_rays", "(", "H", ",", "W", ",", "focal", ",", "c2w", ")", "\n", "", "else", ":", "\n", "# use provided ray batch", "\n", "        ", "rays_o", ",", "rays_d", "=", "rays", "\n", "\n", "", "if", "use_viewdirs", ":", "\n", "# provide ray directions as input", "\n", "        ", "viewdirs", "=", "rays_d", "\n", "if", "c2w_staticcam", "is", "not", "None", ":", "\n", "# special case to visualize effect of viewdirs", "\n", "            ", "rays_o", ",", "rays_d", "=", "get_rays", "(", "H", ",", "W", ",", "focal", ",", "c2w_staticcam", ")", "\n", "", "viewdirs", "=", "viewdirs", "/", "torch", ".", "norm", "(", "viewdirs", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "viewdirs", "=", "torch", ".", "reshape", "(", "viewdirs", ",", "[", "-", "1", ",", "3", "]", ")", ".", "float", "(", ")", "\n", "\n", "", "sh", "=", "rays_d", ".", "shape", "# [..., 3]", "\n", "if", "ndc", ":", "\n", "# for forward facing scenes", "\n", "        ", "rays_o", ",", "rays_d", "=", "ndc_rays", "(", "H", ",", "W", ",", "focal", ",", "1.", ",", "rays_o", ",", "rays_d", ")", "\n", "\n", "# Create ray batch", "\n", "", "rays_o", "=", "torch", ".", "reshape", "(", "rays_o", ",", "[", "-", "1", ",", "3", "]", ")", ".", "float", "(", ")", "\n", "rays_d", "=", "torch", ".", "reshape", "(", "rays_d", ",", "[", "-", "1", ",", "3", "]", ")", ".", "float", "(", ")", "\n", "\n", "near", ",", "far", "=", "near", "*", "torch", ".", "ones_like", "(", "rays_d", "[", "...", ",", ":", "1", "]", ")", ",", "far", "*", "torch", ".", "ones_like", "(", "rays_d", "[", "...", ",", ":", "1", "]", ")", "\n", "rays", "=", "torch", ".", "cat", "(", "[", "rays_o", ",", "rays_d", ",", "near", ",", "far", "]", ",", "-", "1", ")", "\n", "if", "use_viewdirs", ":", "\n", "        ", "rays", "=", "torch", ".", "cat", "(", "[", "rays", ",", "viewdirs", "]", ",", "-", "1", ")", "\n", "\n", "# Render and reshape", "\n", "", "all_ret", "=", "batchify_rays", "(", "rays", ",", "chunk", ",", "keep_keys", "=", "keep_keys", ",", "**", "kwargs", ")", "\n", "for", "k", "in", "all_ret", ":", "\n", "        ", "k_sh", "=", "list", "(", "sh", "[", ":", "-", "1", "]", ")", "+", "list", "(", "all_ret", "[", "k", "]", ".", "shape", "[", "1", ":", "]", ")", "\n", "all_ret", "[", "k", "]", "=", "torch", ".", "reshape", "(", "all_ret", "[", "k", "]", ",", "k_sh", ")", "\n", "\n", "", "k_extract", "=", "[", "'rgb_map'", ",", "'disp_map'", ",", "'acc_map'", "]", "\n", "if", "keep_keys", ":", "\n", "        ", "k_extract", "=", "[", "k", "for", "k", "in", "k_extract", "if", "k", "in", "keep_keys", "]", "\n", "", "ret_list", "=", "[", "all_ret", "[", "k", "]", "for", "k", "in", "k_extract", "]", "\n", "ret_dict", "=", "{", "k", ":", "all_ret", "[", "k", "]", "for", "k", "in", "all_ret", "}", "\n", "return", "ret_list", "+", "[", "ret_dict", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.render_path": [[149, 182], ["time.time", "enumerate", "numpy.stack", "numpy.stack", "tqdm.tqdm", "print", "time.time", "run_nerf.render", "np.stack.append", "np.stack.append", "rgb.cpu().numpy", "disp.cpu().numpy", "print", "to8b", "os.path.join", "imageio.imwrite", "time.time", "rgb.cpu", "disp.cpu"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.render"], ["", "def", "render_path", "(", "render_poses", ",", "hwf", ",", "chunk", ",", "render_kwargs", ",", "gt_imgs", "=", "None", ",", "savedir", "=", "None", ",", "render_factor", "=", "0", ")", ":", "\n", "\n", "    ", "H", ",", "W", ",", "focal", "=", "hwf", "\n", "\n", "if", "render_factor", "!=", "0", ":", "\n", "# Render downsampled for speed", "\n", "        ", "H", "=", "H", "//", "render_factor", "\n", "W", "=", "W", "//", "render_factor", "\n", "focal", "=", "focal", "/", "render_factor", "\n", "\n", "", "rgbs", "=", "[", "]", "\n", "disps", "=", "[", "]", "\n", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "c2w", "in", "enumerate", "(", "tqdm", "(", "render_poses", ")", ")", ":", "\n", "        ", "print", "(", "i", ",", "time", ".", "time", "(", ")", "-", "t", ")", "\n", "t", "=", "time", ".", "time", "(", ")", "\n", "rgb", ",", "disp", ",", "acc", ",", "_", "=", "render", "(", "H", ",", "W", ",", "focal", ",", "chunk", "=", "chunk", ",", "c2w", "=", "c2w", "[", ":", "3", ",", ":", "4", "]", ",", "**", "render_kwargs", ")", "\n", "rgbs", ".", "append", "(", "rgb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "disps", ".", "append", "(", "disp", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "print", "(", "rgb", ".", "shape", ",", "disp", ".", "shape", ")", "\n", "\n", "", "if", "savedir", "is", "not", "None", ":", "\n", "            ", "rgb8", "=", "to8b", "(", "rgbs", "[", "-", "1", "]", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'{:03d}.png'", ".", "format", "(", "i", ")", ")", "\n", "imageio", ".", "imwrite", "(", "filename", ",", "rgb8", ")", "\n", "\n", "\n", "", "", "rgbs", "=", "np", ".", "stack", "(", "rgbs", ",", "0", ")", "\n", "disps", "=", "np", ".", "stack", "(", "disps", ",", "0", ")", "\n", "\n", "return", "rgbs", ",", "disps", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.create_nerf": [[184, 274], ["run_nerf_helpers.get_embedder", "run_nerf_helpers.NeRF", "torch.DataParallel().to", "wandb.watch", "list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "print", "run_nerf_helpers.get_embedder", "nn.DataParallel().to.parameters", "run_nerf_helpers.NeRF", "torch.DataParallel().to", "list", "run_nerf.run_network", "print", "torch.load", "torch.load", "torch.load", "torch.optim.Adam.load_state_dict", "nn.DataParallel().to.load_state_dict", "print", "torch.DataParallel", "nn.DataParallel().to.parameters", "os.path.join", "len", "print", "list", "nn.DataParallel().to.load_state_dict", "torch.DataParallel", "sorted", "filter", "os.listdir", "os.path.join", "torch.load.endswith"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.get_embedder", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.get_embedder", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.run_network", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.load", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.load", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.load"], ["", "def", "create_nerf", "(", "args", ")", ":", "\n", "    ", "\"\"\"Instantiate NeRF's MLP model.\"\"\"", "\n", "embed_fn", ",", "input_ch", "=", "get_embedder", "(", "args", ".", "multires", ",", "args", ".", "i_embed", ")", "\n", "\n", "input_ch_views", "=", "0", "\n", "embeddirs_fn", "=", "None", "\n", "if", "args", ".", "use_viewdirs", ":", "\n", "        ", "embeddirs_fn", ",", "input_ch_views", "=", "get_embedder", "(", "args", ".", "multires_views", ",", "args", ".", "i_embed", ")", "\n", "", "output_ch", "=", "5", "if", "args", ".", "N_importance", ">", "0", "else", "4", "\n", "skips", "=", "[", "4", "]", "\n", "model", "=", "NeRF", "(", "D", "=", "args", ".", "netdepth", ",", "W", "=", "args", ".", "netwidth", ",", "\n", "input_ch", "=", "input_ch", ",", "output_ch", "=", "output_ch", ",", "skips", "=", "skips", ",", "\n", "input_ch_views", "=", "input_ch_views", ",", "use_viewdirs", "=", "args", ".", "use_viewdirs", ")", "\n", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "to", "(", "device", ")", "\n", "wandb", ".", "watch", "(", "model", ")", "\n", "grad_vars", "=", "list", "(", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "model_fine", "=", "None", "\n", "if", "args", ".", "N_importance", ">", "0", ":", "\n", "        ", "model_fine", "=", "NeRF", "(", "D", "=", "args", ".", "netdepth_fine", ",", "W", "=", "args", ".", "netwidth_fine", ",", "\n", "input_ch", "=", "input_ch", ",", "output_ch", "=", "output_ch", ",", "skips", "=", "skips", ",", "\n", "input_ch_views", "=", "input_ch_views", ",", "use_viewdirs", "=", "args", ".", "use_viewdirs", ")", "\n", "model_fine", "=", "nn", ".", "DataParallel", "(", "model_fine", ")", ".", "to", "(", "device", ")", "\n", "grad_vars", "+=", "list", "(", "model_fine", ".", "parameters", "(", ")", ")", "\n", "\n", "", "network_query_fn", "=", "lambda", "inputs", ",", "viewdirs", ",", "network_fn", ":", "run_network", "(", "inputs", ",", "viewdirs", ",", "network_fn", ",", "\n", "embed_fn", "=", "embed_fn", ",", "\n", "embeddirs_fn", "=", "embeddirs_fn", ",", "\n", "netchunk", "=", "args", ".", "netchunk_per_gpu", "*", "args", ".", "n_gpus", ")", "\n", "\n", "# Create optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", "=", "grad_vars", ",", "lr", "=", "args", ".", "lrate", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ")", "\n", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", "enabled", "=", "args", ".", "render_autocast", ")", "\n", "\n", "start", "=", "0", "\n", "basedir", "=", "args", ".", "basedir", "\n", "expname", "=", "args", ".", "expname", "\n", "\n", "##########################", "\n", "\n", "# Load checkpoints", "\n", "if", "args", ".", "ft_path", "is", "not", "None", "and", "args", ".", "ft_path", "!=", "'None'", "and", "not", "args", ".", "render_only", ":", "\n", "        ", "ckpts", "=", "[", "args", ".", "ft_path", "]", "\n", "", "else", ":", "\n", "        ", "ckpts", "=", "[", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "f", ")", "for", "f", "in", "sorted", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ")", ")", ")", "if", "'tar'", "in", "f", "]", "\n", "\n", "", "print", "(", "'Found ckpts'", ",", "ckpts", ")", "\n", "if", "len", "(", "ckpts", ")", ">", "0", "and", "not", "args", ".", "no_reload", ":", "\n", "        ", "if", "args", ".", "reload_iter", ":", "\n", "            ", "print", "(", "'Trying to reload a specific iteration:'", ",", "args", ".", "reload_iter", ")", "\n", "ckpts", "=", "list", "(", "filter", "(", "lambda", "ckpt", ":", "ckpt", ".", "endswith", "(", "f'/{args.reload_iter}.tar'", ")", ",", "ckpts", ")", ")", "\n", "", "ckpt_path", "=", "ckpts", "[", "-", "1", "]", "\n", "print", "(", "'Reloading from'", ",", "ckpt_path", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "ckpt_path", ")", "\n", "\n", "start", "=", "ckpt", "[", "'global_step'", "]", "\n", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "'optimizer_state_dict'", "]", ")", "\n", "\n", "# Load model", "\n", "model", ".", "load_state_dict", "(", "ckpt", "[", "'network_fn_state_dict'", "]", ")", "\n", "if", "model_fine", "is", "not", "None", ":", "\n", "            ", "model_fine", ".", "load_state_dict", "(", "ckpt", "[", "'network_fine_state_dict'", "]", ")", "\n", "\n", "##########################", "\n", "\n", "\n", "", "", "render_kwargs_train", "=", "{", "\n", "'network_query_fn'", ":", "network_query_fn", ",", "\n", "'perturb'", ":", "args", ".", "perturb", ",", "\n", "'N_importance'", ":", "args", ".", "N_importance", ",", "\n", "'network_fine'", ":", "model_fine", ",", "\n", "'N_samples'", ":", "args", ".", "N_samples", ",", "\n", "'network_fn'", ":", "model", ",", "\n", "'use_viewdirs'", ":", "args", ".", "use_viewdirs", ",", "\n", "'white_bkgd'", ":", "args", ".", "white_bkgd", ",", "\n", "'raw_noise_std'", ":", "args", ".", "raw_noise_std", ",", "\n", "'alpha_act_fn'", ":", "F", ".", "softplus", "if", "args", ".", "use_softplus_alpha", "else", "F", ".", "relu", "\n", "}", "\n", "\n", "# NDC only good for LLFF-style forward facing data", "\n", "if", "args", ".", "dataset_type", "!=", "'llff'", "or", "args", ".", "no_ndc", ":", "\n", "        ", "print", "(", "'Not ndc!'", ")", "\n", "render_kwargs_train", "[", "'ndc'", "]", "=", "False", "\n", "render_kwargs_train", "[", "'lindisp'", "]", "=", "args", ".", "lindisp", "\n", "\n", "", "render_kwargs_test", "=", "{", "k", ":", "render_kwargs_train", "[", "k", "]", "for", "k", "in", "render_kwargs_train", "}", "\n", "render_kwargs_test", "[", "'perturb'", "]", "=", "False", "\n", "render_kwargs_test", "[", "'raw_noise_std'", "]", "=", "0.", "\n", "\n", "return", "render_kwargs_train", ",", "render_kwargs_test", ",", "start", ",", "grad_vars", ",", "optimizer", ",", "scaler", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.raw2outputs": [[276, 319], ["torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "raw2alpha", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.norm", "torch.norm", "torch.norm", "torch.max", "torch.max", "torch.max", "torch.exp", "torch.exp", "torch.exp", "torch.Tensor().expand", "torch.Tensor().expand", "torch.Tensor().expand", "torch.randn", "torch.randn", "torch.randn", "numpy.random.seed", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cumprod", "torch.cumprod", "torch.cumprod", "numpy.random.rand", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.sum", "torch.sum", "torch.sum", "torch.Tensor", "torch.Tensor", "torch.Tensor", "alpha_act_fn", "list", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "raw2outputs", "(", "raw", ",", "z_vals", ",", "rays_d", ",", "raw_noise_std", "=", "0", ",", "white_bkgd", "=", "False", ",", "pytest", "=", "False", ",", "alpha_act_fn", "=", "F", ".", "relu", ")", ":", "\n", "    ", "\"\"\"Transforms model's predictions to semantically meaningful values.\n    Args:\n        raw: [num_rays, num_samples along ray, 4]. Prediction from model.\n        z_vals: [num_rays, num_samples along ray]. Integration time.\n        rays_d: [num_rays, 3]. Direction of each ray.\n    Returns:\n        rgb_map: [num_rays, 3]. Estimated RGB color of a ray.\n        disp_map: [num_rays]. Disparity map. Inverse of depth map.\n        acc_map: [num_rays]. Sum of weights along each ray.\n        weights: [num_rays, num_samples]. Weights assigned to each sampled color.\n        depth_map: [num_rays]. Estimated distance to object.\n    \"\"\"", "\n", "raw2alpha", "=", "lambda", "raw", ",", "dists", ":", "1.", "-", "torch", ".", "exp", "(", "-", "alpha_act_fn", "(", "raw", ")", "*", "dists", ")", "\n", "\n", "dists", "=", "z_vals", "[", "...", ",", "1", ":", "]", "-", "z_vals", "[", "...", ",", ":", "-", "1", "]", "\n", "dists", "=", "torch", ".", "cat", "(", "[", "dists", ",", "torch", ".", "Tensor", "(", "[", "1e10", "]", ")", ".", "expand", "(", "dists", "[", "...", ",", ":", "1", "]", ".", "shape", ")", "]", ",", "-", "1", ")", "# [N_rays, N_samples]", "\n", "\n", "dists", "=", "dists", "*", "torch", ".", "norm", "(", "rays_d", "[", "...", ",", "None", ",", ":", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "rgb", "=", "torch", ".", "sigmoid", "(", "raw", "[", "...", ",", ":", "3", "]", ")", "# [N_rays, N_samples, 3]", "\n", "noise", "=", "0.", "\n", "if", "raw_noise_std", ">", "0.", ":", "\n", "        ", "noise", "=", "torch", ".", "randn", "(", "raw", "[", "...", ",", "3", "]", ".", "shape", ")", "*", "raw_noise_std", "\n", "\n", "# Overwrite randomly sampled data if pytest", "\n", "if", "pytest", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "noise", "=", "np", ".", "random", ".", "rand", "(", "*", "list", "(", "raw", "[", "...", ",", "3", "]", ".", "shape", ")", ")", "*", "raw_noise_std", "\n", "noise", "=", "torch", ".", "Tensor", "(", "noise", ")", "\n", "\n", "", "", "alpha", "=", "raw2alpha", "(", "raw", "[", "...", ",", "3", "]", "+", "noise", ",", "dists", ")", "# [N_rays, N_samples]", "\n", "weights", "=", "alpha", "*", "torch", ".", "cumprod", "(", "torch", ".", "cat", "(", "[", "torch", ".", "ones", "(", "(", "alpha", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ",", "1.", "-", "alpha", "+", "1e-10", "]", ",", "-", "1", ")", ",", "-", "1", ")", "[", ":", ",", ":", "-", "1", "]", "\n", "rgb_map", "=", "torch", ".", "sum", "(", "weights", "[", "...", ",", "None", "]", "*", "rgb", ",", "-", "2", ")", "# [N_rays, 3]", "\n", "\n", "depth_map", "=", "torch", ".", "sum", "(", "weights", "*", "z_vals", ",", "-", "1", ")", "\n", "disp_map", "=", "1.", "/", "torch", ".", "max", "(", "1e-10", "*", "torch", ".", "ones_like", "(", "depth_map", ")", ",", "depth_map", "/", "torch", ".", "sum", "(", "weights", ",", "-", "1", ")", ")", "\n", "acc_map", "=", "torch", ".", "sum", "(", "weights", ",", "-", "1", ")", "\n", "\n", "if", "white_bkgd", ":", "\n", "        ", "rgb_map", "=", "rgb_map", "+", "(", "1.", "-", "acc_map", "[", "...", ",", "None", "]", ")", "\n", "\n", "", "return", "rgb_map", ",", "disp_map", ",", "acc_map", ",", "weights", ",", "depth_map", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.render_rays": [[321, 437], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.linspace", "torch.linspace", "torch.linspace", "z_vals.expand.expand", "network_query_fn", "run_nerf.raw2outputs", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.rand", "torch.rand", "torch.rand", "run_nerf_helpers.sample_pdf", "z_samples.detach.detach", "torch.sort", "torch.sort", "torch.sort", "network_query_fn", "run_nerf.raw2outputs", "torch.std", "torch.std", "torch.std", "numpy.random.seed", "numpy.random.rand", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.cat", "torch.cat", "torch.cat", "print", "torch.isnan().any", "torch.isnan().any", "torch.isnan().any", "torch.isinf().any", "torch.isinf().any", "torch.isinf().any", "list", "torch.isnan", "torch.isnan", "torch.isnan", "torch.isinf", "torch.isinf", "torch.isinf"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.raw2outputs", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.sample_pdf", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.raw2outputs"], ["", "def", "render_rays", "(", "ray_batch", ",", "\n", "network_fn", ",", "\n", "network_query_fn", ",", "\n", "N_samples", ",", "\n", "retraw", "=", "False", ",", "\n", "lindisp", "=", "False", ",", "\n", "verbose", "=", "False", ",", "\n", "perturb", "=", "0.", ",", "\n", "N_importance", "=", "0", ",", "\n", "network_fine", "=", "None", ",", "\n", "white_bkgd", "=", "False", ",", "\n", "raw_noise_std", "=", "0.", ",", "\n", "pytest", "=", "False", ",", "\n", "alpha_act_fn", "=", "F", ".", "relu", ")", ":", "\n", "    ", "\"\"\"Volumetric rendering.\n    Args:\n      ray_batch: array of shape [batch_size, ...]. All information necessary\n        for sampling along a ray, including: ray origin, ray direction, min\n        dist, max dist, and unit-magnitude viewing direction.\n      network_fn: function. Model for predicting RGB and density at each point\n        in space.\n      network_query_fn: function used for passing queries to network_fn.\n      N_samples: int. Number of different times to sample along each ray.\n      retraw: bool. If True, include model's raw, unprocessed predictions.\n      lindisp: bool. If True, sample linearly in inverse depth rather than in depth.\n      perturb: float, 0 or 1. If non-zero, each ray is sampled at stratified\n        random points in time.\n      N_importance: int. Number of additional times to sample along each ray.\n        These samples are only passed to network_fine.\n      network_fine: \"fine\" network with same spec as network_fn.\n      white_bkgd: bool. If True, assume a white background.\n      raw_noise_std: ...\n      verbose: bool. If True, print more debugging info.\n    Returns:\n      rgb_map: [num_rays, 3]. Estimated RGB color of a ray. Comes from fine model.\n      disp_map: [num_rays]. Disparity map. 1 / depth.\n      acc_map: [num_rays]. Accumulated opacity along each ray. Comes from fine model.\n      raw: [num_rays, num_samples, 4]. Raw predictions from model.\n      rgb0: See rgb_map. Output for coarse model.\n      disp0: See disp_map. Output for coarse model.\n      acc0: See acc_map. Output for coarse model.\n      z_std: [num_rays]. Standard deviation of distances along ray for each\n        sample.\n    \"\"\"", "\n", "N_rays", "=", "ray_batch", ".", "shape", "[", "0", "]", "\n", "rays_o", ",", "rays_d", "=", "ray_batch", "[", ":", ",", "0", ":", "3", "]", ",", "ray_batch", "[", ":", ",", "3", ":", "6", "]", "# [N_rays, 3] each", "\n", "viewdirs", "=", "ray_batch", "[", ":", ",", "-", "3", ":", "]", "if", "ray_batch", ".", "shape", "[", "-", "1", "]", ">", "8", "else", "None", "\n", "bounds", "=", "torch", ".", "reshape", "(", "ray_batch", "[", "...", ",", "6", ":", "8", "]", ",", "[", "-", "1", ",", "1", ",", "2", "]", ")", "\n", "near", ",", "far", "=", "bounds", "[", "...", ",", "0", "]", ",", "bounds", "[", "...", ",", "1", "]", "# [-1,1]", "\n", "\n", "t_vals", "=", "torch", ".", "linspace", "(", "0.", ",", "1.", ",", "steps", "=", "N_samples", ")", "\n", "if", "not", "lindisp", ":", "\n", "        ", "z_vals", "=", "near", "*", "(", "1.", "-", "t_vals", ")", "+", "far", "*", "(", "t_vals", ")", "\n", "", "else", ":", "\n", "        ", "z_vals", "=", "1.", "/", "(", "1.", "/", "near", "*", "(", "1.", "-", "t_vals", ")", "+", "1.", "/", "far", "*", "(", "t_vals", ")", ")", "\n", "\n", "", "z_vals", "=", "z_vals", ".", "expand", "(", "[", "N_rays", ",", "N_samples", "]", ")", "\n", "\n", "if", "perturb", ">", "0.", ":", "\n", "# get intervals between samples", "\n", "        ", "mids", "=", ".5", "*", "(", "z_vals", "[", "...", ",", "1", ":", "]", "+", "z_vals", "[", "...", ",", ":", "-", "1", "]", ")", "\n", "upper", "=", "torch", ".", "cat", "(", "[", "mids", ",", "z_vals", "[", "...", ",", "-", "1", ":", "]", "]", ",", "-", "1", ")", "\n", "lower", "=", "torch", ".", "cat", "(", "[", "z_vals", "[", "...", ",", ":", "1", "]", ",", "mids", "]", ",", "-", "1", ")", "\n", "# stratified samples in those intervals", "\n", "t_rand", "=", "torch", ".", "rand", "(", "z_vals", ".", "shape", ")", "\n", "\n", "# Pytest, overwrite u with numpy's fixed random numbers", "\n", "if", "pytest", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "t_rand", "=", "np", ".", "random", ".", "rand", "(", "*", "list", "(", "z_vals", ".", "shape", ")", ")", "\n", "t_rand", "=", "torch", ".", "Tensor", "(", "t_rand", ")", "\n", "\n", "", "z_vals", "=", "lower", "+", "(", "upper", "-", "lower", ")", "*", "t_rand", "\n", "\n", "", "pts", "=", "rays_o", "[", "...", ",", "None", ",", ":", "]", "+", "rays_d", "[", "...", ",", "None", ",", ":", "]", "*", "z_vals", "[", "...", ",", ":", ",", "None", "]", "# [N_rays, N_samples, 3]", "\n", "\n", "\n", "raw", "=", "network_query_fn", "(", "pts", ",", "viewdirs", ",", "network_fn", ")", "\n", "rgb_map", ",", "disp_map", ",", "acc_map", ",", "weights", ",", "depth_map", "=", "raw2outputs", "(", "raw", ",", "z_vals", ",", "rays_d", ",", "raw_noise_std", ",", "white_bkgd", ",", "pytest", "=", "pytest", ",", "alpha_act_fn", "=", "alpha_act_fn", ")", "\n", "\n", "if", "N_importance", ">", "0", ":", "\n", "        ", "pts0", ",", "raw0", ",", "rgb_map_0", ",", "disp_map_0", ",", "acc_map_0", ",", "weights0", "=", "pts", ",", "raw", ",", "rgb_map", ",", "disp_map", ",", "acc_map", ",", "weights", "\n", "\n", "z_vals_mid", "=", ".5", "*", "(", "z_vals", "[", "...", ",", "1", ":", "]", "+", "z_vals", "[", "...", ",", ":", "-", "1", "]", ")", "\n", "z_samples", "=", "sample_pdf", "(", "z_vals_mid", ",", "weights", "[", "...", ",", "1", ":", "-", "1", "]", ",", "N_importance", ",", "det", "=", "(", "perturb", "==", "0.", ")", ",", "pytest", "=", "pytest", ")", "\n", "z_samples", "=", "z_samples", ".", "detach", "(", ")", "\n", "\n", "z_vals", ",", "_", "=", "torch", ".", "sort", "(", "torch", ".", "cat", "(", "[", "z_vals", ",", "z_samples", "]", ",", "-", "1", ")", ",", "-", "1", ")", "\n", "pts", "=", "rays_o", "[", "...", ",", "None", ",", ":", "]", "+", "rays_d", "[", "...", ",", "None", ",", ":", "]", "*", "z_vals", "[", "...", ",", ":", ",", "None", "]", "# [N_rays, N_samples + N_importance, 3]", "\n", "\n", "run_fn", "=", "network_fn", "if", "network_fine", "is", "None", "else", "network_fine", "\n", "raw", "=", "network_query_fn", "(", "pts", ",", "viewdirs", ",", "run_fn", ")", "\n", "\n", "rgb_map", ",", "disp_map", ",", "acc_map", ",", "weights", ",", "depth_map", "=", "raw2outputs", "(", "raw", ",", "z_vals", ",", "rays_d", ",", "raw_noise_std", ",", "white_bkgd", ",", "pytest", "=", "pytest", ",", "alpha_act_fn", "=", "alpha_act_fn", ")", "\n", "\n", "", "ret", "=", "{", "'rgb_map'", ":", "rgb_map", "}", "\n", "ret", "[", "'disp_map'", "]", "=", "disp_map", "\n", "ret", "[", "'acc_map'", "]", "=", "acc_map", "\n", "ret", "[", "'weights'", "]", "=", "weights", "\n", "ret", "[", "'pts'", "]", "=", "pts", "\n", "if", "retraw", ":", "\n", "        ", "ret", "[", "'raw'", "]", "=", "raw", "\n", "", "if", "N_importance", ">", "0", ":", "\n", "        ", "ret", "[", "'raw0'", "]", "=", "raw0", "\n", "ret", "[", "'rgb0'", "]", "=", "rgb_map_0", "\n", "ret", "[", "'disp0'", "]", "=", "disp_map_0", "\n", "ret", "[", "'acc0'", "]", "=", "acc_map_0", "\n", "ret", "[", "'z_std'", "]", "=", "torch", ".", "std", "(", "z_samples", ",", "dim", "=", "-", "1", ",", "unbiased", "=", "False", ")", "# [N_rays]", "\n", "ret", "[", "'pts0'", "]", "=", "pts0", "\n", "ret", "[", "'weights0'", "]", "=", "weights0", "\n", "\n", "", "for", "k", "in", "ret", ":", "\n", "        ", "if", "(", "torch", ".", "isnan", "(", "ret", "[", "k", "]", ")", ".", "any", "(", ")", "or", "torch", ".", "isinf", "(", "ret", "[", "k", "]", ")", ".", "any", "(", ")", ")", "and", "DEBUG", ":", "\n", "            ", "print", "(", "f\"! [Numerical Error] {k} contains nan or inf.\"", ")", "\n", "\n", "", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.sample_rays": [[439, 460], ["torch.reshape", "torch.reshape", "torch.reshape", "numpy.random.choice", "coords[].long", "torch.stack", "torch.stack", "torch.stack", "int", "int", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "print", "torch.meshgrid", "torch.meshgrid", "torch.meshgrid", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace"], "function", ["None"], ["", "def", "sample_rays", "(", "H", ",", "W", ",", "rays_o", ",", "rays_d", ",", "N_rand", ",", "i", ",", "start", ",", "precrop_iters", ",", "precrop_frac", ")", ":", "\n", "    ", "if", "i", "<", "precrop_iters", ":", "\n", "        ", "dH", "=", "int", "(", "H", "//", "2", "*", "precrop_frac", ")", "\n", "dW", "=", "int", "(", "W", "//", "2", "*", "precrop_frac", ")", "\n", "coords", "=", "torch", ".", "stack", "(", "\n", "torch", ".", "meshgrid", "(", "\n", "torch", ".", "linspace", "(", "H", "//", "2", "-", "dH", ",", "H", "//", "2", "+", "dH", "-", "1", ",", "2", "*", "dH", ")", ",", "\n", "torch", ".", "linspace", "(", "W", "//", "2", "-", "dW", ",", "W", "//", "2", "+", "dW", "-", "1", ",", "2", "*", "dW", ")", "\n", ")", ",", "-", "1", ")", "\n", "if", "i", "==", "start", ":", "\n", "            ", "print", "(", "f\"[Config] Center cropping of size {2*dH} x {2*dW} is enabled until iter {precrop_iters}\"", ")", "\n", "", "", "else", ":", "\n", "        ", "coords", "=", "torch", ".", "stack", "(", "torch", ".", "meshgrid", "(", "torch", ".", "linspace", "(", "0", ",", "H", "-", "1", ",", "H", ")", ",", "torch", ".", "linspace", "(", "0", ",", "W", "-", "1", ",", "W", ")", ")", ",", "-", "1", ")", "# (H, W, 2)", "\n", "\n", "", "coords", "=", "torch", ".", "reshape", "(", "coords", ",", "[", "-", "1", ",", "2", "]", ")", "# (H * W, 2)", "\n", "select_inds", "=", "np", ".", "random", ".", "choice", "(", "coords", ".", "shape", "[", "0", "]", ",", "size", "=", "[", "N_rand", "]", ",", "replace", "=", "False", ")", "# (N_rand,)", "\n", "select_coords", "=", "coords", "[", "select_inds", "]", ".", "long", "(", ")", "# (N_rand, 2)", "\n", "rays_o", "=", "rays_o", "[", "select_coords", "[", ":", ",", "0", "]", ",", "select_coords", "[", ":", ",", "1", "]", "]", "# (N_rand, 3)", "\n", "rays_d", "=", "rays_d", "[", "select_coords", "[", ":", ",", "0", "]", ",", "select_coords", "[", ":", ",", "1", "]", "]", "# (N_rand, 3)", "\n", "batch_rays", "=", "torch", ".", "stack", "(", "[", "rays_o", ",", "rays_d", "]", ",", "0", ")", "# (2, N_rand, 3)", "\n", "return", "batch_rays", ",", "select_coords", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.get_embed_fn": [[462, 523], ["model_type.startswith", "model_type.startswith", "clip_utils.load_rn", "model_type.startswith", "timm.create_model", "nn.DataParallel().to.eval", "torchvision.transforms.Normalize", "torch.DataParallel().to", "model_type.startswith", "torch.utils.checkpoint.checkpoint", "nn.DataParallel().to.unsqueeze", "torch.hub.load", "torch.hub.load", "torch.hub.load", "nn.DataParallel().to.eval", "torch.DataParallel().to", "torchvision.transforms.Normalize", "clip_utils.CLIP_NORMALIZE().type", "clip_utils.clip_model_rn.clip_model.visual.featurize", "clip_utils.clip_model_rn().unsqueeze", "clip_utils.load_vit", "clip_utils.load_rn", "len", "torch.DataParallel", "nn.DataParallel().to.unsqueeze", "clip_utils.load_vit", "clip_utils.clip_model_vit", "emb[].view().permute", "clip_utils.clip_model_vit", "clip_utils.clip_model_rn", "nn.DataParallel().to.", "len", "torch.DataParallel", "clip_utils.CLIP_NORMALIZE", "clip_utils.clip_model_rn", "torchvision.transforms.Normalize.", "nn.DataParallel().to.", "clip_utils.CLIP_NORMALIZE", "emb[].view", "clip_utils.CLIP_NORMALIZE", "clip_utils.CLIP_NORMALIZE", "torchvision.transforms.Normalize.", "clip_utils.CLIP_NORMALIZE"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.load_rn", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.load", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.load", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.load", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.VisualTransformer.featurize", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.load_vit", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.load_rn", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.load_vit"], ["", "def", "get_embed_fn", "(", "model_type", ",", "num_layers", "=", "-", "1", ",", "spatial", "=", "False", ",", "checkpoint", "=", "False", ",", "clip_cache_root", "=", "None", ")", ":", "\n", "    ", "if", "model_type", ".", "startswith", "(", "'clip_'", ")", ":", "\n", "        ", "if", "model_type", "==", "'clip_rn50'", ":", "\n", "            ", "assert", "clip_cache_root", "\n", "clip_utils", ".", "load_rn", "(", "jit", "=", "False", ",", "root", "=", "clip_cache_root", ")", "\n", "if", "spatial", ":", "\n", "                ", "_clip_dtype", "=", "clip_utils", ".", "clip_model_rn", ".", "clip_model", ".", "dtype", "\n", "assert", "num_layers", "==", "-", "1", "\n", "def", "embed", "(", "ims", ")", ":", "\n", "                    ", "ims", "=", "clip_utils", ".", "CLIP_NORMALIZE", "(", "ims", ")", ".", "type", "(", "_clip_dtype", ")", "\n", "return", "clip_utils", ".", "clip_model_rn", ".", "clip_model", ".", "visual", ".", "featurize", "(", "ims", ")", "# [N,C,56,56]", "\n", "", "", "else", ":", "\n", "                ", "embed", "=", "lambda", "ims", ":", "clip_utils", ".", "clip_model_rn", "(", "images_or_text", "=", "clip_utils", ".", "CLIP_NORMALIZE", "(", "ims", ")", ",", "num_layers", "=", "num_layers", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "assert", "not", "clip_utils", ".", "clip_model_rn", ".", "training", "\n", "", "elif", "model_type", ".", "startswith", "(", "'clip_vit'", ")", ":", "\n", "            ", "assert", "clip_cache_root", "\n", "if", "model_type", "==", "'clip_vit'", ":", "\n", "                ", "clip_utils", ".", "load_vit", "(", "root", "=", "clip_cache_root", ")", "\n", "", "elif", "model_type", "==", "'clip_vit_b16'", ":", "\n", "                ", "clip_utils", ".", "load_vit", "(", "'ViT-B/16'", ",", "root", "=", "clip_cache_root", ")", "\n", "", "if", "spatial", ":", "\n", "                ", "def", "embed", "(", "ims", ")", ":", "\n", "                    ", "emb", "=", "clip_utils", ".", "clip_model_vit", "(", "images_or_text", "=", "clip_utils", ".", "CLIP_NORMALIZE", "(", "ims", ")", ",", "num_layers", "=", "num_layers", ")", "# [N,L=50,D]", "\n", "return", "emb", "[", ":", ",", "1", ":", "]", ".", "view", "(", "emb", ".", "shape", "[", "0", "]", ",", "7", ",", "7", ",", "emb", ".", "shape", "[", "2", "]", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# [N,D,7,7]", "\n", "", "", "else", ":", "\n", "                ", "embed", "=", "lambda", "ims", ":", "clip_utils", ".", "clip_model_vit", "(", "images_or_text", "=", "clip_utils", ".", "CLIP_NORMALIZE", "(", "ims", ")", ",", "num_layers", "=", "num_layers", ")", "# [N,L=50,D]", "\n", "", "assert", "not", "clip_utils", ".", "clip_model_vit", ".", "training", "\n", "", "elif", "model_type", "==", "'clip_rn50x4'", ":", "\n", "            ", "assert", "not", "spatial", "\n", "clip_utils", ".", "load_rn", "(", "name", "=", "'RN50x4'", ",", "jit", "=", "False", ")", "\n", "assert", "not", "clip_utils", ".", "clip_model_rn", ".", "training", "\n", "embed", "=", "lambda", "ims", ":", "clip_utils", ".", "clip_model_rn", "(", "images_or_text", "=", "clip_utils", ".", "CLIP_NORMALIZE", "(", "ims", ")", ",", "featurize", "=", "False", ")", "\n", "", "", "elif", "model_type", ".", "startswith", "(", "'timm_'", ")", ":", "\n", "        ", "assert", "num_layers", "==", "-", "1", "\n", "assert", "not", "spatial", "\n", "\n", "model_type", "=", "model_type", "[", "len", "(", "'timm_'", ")", ":", "]", "\n", "encoder", "=", "timm", ".", "create_model", "(", "model_type", ",", "pretrained", "=", "True", ",", "num_classes", "=", "0", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "normalize", "=", "torchvision", ".", "transforms", ".", "Normalize", "(", "\n", "encoder", ".", "default_cfg", "[", "'mean'", "]", ",", "encoder", ".", "default_cfg", "[", "'std'", "]", ")", "# normalize an image that is already scaled to [0, 1]", "\n", "encoder", "=", "nn", ".", "DataParallel", "(", "encoder", ")", ".", "to", "(", "device", ")", "\n", "embed", "=", "lambda", "ims", ":", "encoder", "(", "normalize", "(", "ims", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "elif", "model_type", ".", "startswith", "(", "'torch_'", ")", ":", "\n", "        ", "assert", "num_layers", "==", "-", "1", "\n", "assert", "not", "spatial", "\n", "\n", "model_type", "=", "model_type", "[", "len", "(", "'torch_'", ")", ":", "]", "\n", "encoder", "=", "torch", ".", "hub", ".", "load", "(", "'pytorch/vision:v0.6.0'", ",", "model_type", ",", "pretrained", "=", "True", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "encoder", "=", "nn", ".", "DataParallel", "(", "encoder", ")", ".", "to", "(", "device", ")", "\n", "normalize", "=", "torchvision", ".", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "# normalize an image that is already scaled to [0, 1]", "\n", "embed", "=", "lambda", "ims", ":", "encoder", "(", "normalize", "(", "ims", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "\n", "", "if", "checkpoint", ":", "\n", "        ", "return", "lambda", "x", ":", "run_checkpoint", "(", "embed", ",", "x", ")", "\n", "\n", "", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.make_wandb_image": [[525, 535], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "tensor.clip.detach", "tensor.clip.float", "wandb.Image", "tensor.clip.min", "tensor.clip.cpu().numpy", "tensor.clip.clip", "tensor.clip.max", "tensor.clip.cpu"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "make_wandb_image", "(", "tensor", ",", "preprocess", "=", "'scale'", ")", ":", "\n", "    ", "tensor", "=", "tensor", ".", "detach", "(", ")", "\n", "tensor", "=", "tensor", ".", "float", "(", ")", "\n", "if", "preprocess", "==", "'scale'", ":", "\n", "        ", "mi", "=", "tensor", ".", "min", "(", ")", "\n", "tensor", "=", "(", "(", "tensor", "-", "mi", ")", "/", "(", "tensor", ".", "max", "(", ")", "-", "mi", ")", ")", "\n", "", "elif", "preprocess", "==", "'clip'", ":", "\n", "        ", "tensor", "=", "tensor", ".", "clip", "(", "0", ",", "1", ")", "\n", "", "return", "wandb", ".", "Image", "(", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.make_wandb_histogram": [[537, 540], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "wandb.Histogram", "tensor.detach().flatten().cpu().numpy", "tensor.detach().flatten().cpu", "tensor.detach().flatten", "tensor.detach"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "make_wandb_histogram", "(", "tensor", ")", ":", "\n", "    ", "return", "wandb", ".", "Histogram", "(", "tensor", ".", "detach", "(", ")", ".", "flatten", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.config_parser": [[542, 710], ["configargparse.ArgumentParser", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "configargparse.ArgumentParser.add_argument", "os.path.expanduser"], "function", ["None"], ["", "def", "config_parser", "(", ")", ":", "\n", "    ", "parser", "=", "configargparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "is_config_file", "=", "True", ",", "\n", "help", "=", "'config file path'", ")", "\n", "parser", ".", "add_argument", "(", "\"--expname\"", ",", "type", "=", "str", ",", "\n", "help", "=", "'experiment name'", ")", "\n", "parser", ".", "add_argument", "(", "\"--basedir\"", ",", "type", "=", "str", ",", "default", "=", "'./logs/'", ",", "\n", "help", "=", "'where to store ckpts and logs'", ")", "\n", "parser", ".", "add_argument", "(", "\"--datadir\"", ",", "type", "=", "str", ",", "default", "=", "'./data/llff/fern'", ",", "\n", "help", "=", "'input data directory'", ")", "\n", "\n", "# training options", "\n", "parser", ".", "add_argument", "(", "\"--netdepth\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'layers in network'", ")", "\n", "parser", ".", "add_argument", "(", "\"--netwidth\"", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "'channels per layer'", ")", "\n", "parser", ".", "add_argument", "(", "\"--netdepth_fine\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'layers in fine network'", ")", "\n", "parser", ".", "add_argument", "(", "\"--netwidth_fine\"", ",", "type", "=", "int", ",", "default", "=", "256", ",", "\n", "help", "=", "'channels per layer in fine network'", ")", "\n", "parser", ".", "add_argument", "(", "\"--N_rand\"", ",", "type", "=", "int", ",", "default", "=", "32", "*", "32", "*", "4", ",", "\n", "help", "=", "'batch size (number of random rays per gradient step)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--lrate\"", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "\n", "help", "=", "'learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "\"--lrate_decay\"", ",", "type", "=", "int", ",", "default", "=", "250", ",", "\n", "help", "=", "'exponential learning rate decay (in 1000 steps)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--chunk\"", ",", "type", "=", "int", ",", "default", "=", "1024", "*", "32", ",", "\n", "help", "=", "'number of rays processed in parallel, decrease if running out of memory'", ")", "\n", "parser", ".", "add_argument", "(", "\"--netchunk_per_gpu\"", ",", "type", "=", "int", ",", "default", "=", "1024", "*", "64", "*", "4", ",", "\n", "help", "=", "'number of pts sent through network in parallel, decrease if running out of memory'", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_batching\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'only take random rays from 1 image at a time'", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_reload\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do not reload weights from saved ckpt'", ")", "\n", "parser", ".", "add_argument", "(", "\"--ft_path\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'specific weights npy file to reload for coarse network'", ")", "\n", "parser", ".", "add_argument", "(", "\"--reload_iter\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'load a specific iteration rather than the latest. will load expdir/<reload_iter>.tar'", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_softplus_alpha\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use a softplus activation on predicted alphas rather than relu'", ")", "\n", "\n", "# rendering options", "\n", "parser", ".", "add_argument", "(", "\"--N_samples\"", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'number of coarse samples per ray'", ")", "\n", "parser", ".", "add_argument", "(", "\"--N_importance\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'number of additional fine samples per ray'", ")", "\n", "parser", ".", "add_argument", "(", "\"--perturb\"", ",", "type", "=", "float", ",", "default", "=", "1.", ",", "\n", "help", "=", "'set to 0. for no jitter, 1. for jitter'", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_viewdirs\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use full 5D input instead of 3D'", ")", "\n", "parser", ".", "add_argument", "(", "\"--i_embed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'set 0 for default positional encoding, -1 for none'", ")", "\n", "parser", ".", "add_argument", "(", "\"--multires\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'log2 of max freq for positional encoding (3D location)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--multires_views\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'log2 of max freq for positional encoding (2D direction)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--raw_noise_std\"", ",", "type", "=", "float", ",", "default", "=", "0.", ",", "\n", "help", "=", "'std dev of noise added to regularize sigma_a output, 1e0 recommended'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--render_only\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do not optimize, reload weights and render out render_poses path'", ")", "\n", "parser", ".", "add_argument", "(", "\"--render_test\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'render the test set instead of render_poses path'", ")", "\n", "parser", ".", "add_argument", "(", "\"--render_factor\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'downsampling factor to speed up rendering, set 4 or 8 for fast preview'", ")", "\n", "\n", "# training options", "\n", "parser", ".", "add_argument", "(", "\"--precrop_iters\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'number of steps to train on central crops'", ")", "\n", "parser", ".", "add_argument", "(", "\"--precrop_frac\"", ",", "type", "=", "float", ",", "\n", "default", "=", ".5", ",", "help", "=", "'fraction of img taken for central crops'", ")", "\n", "parser", ".", "add_argument", "(", "\"--N_iters\"", ",", "type", "=", "int", ",", "default", "=", "200000", ")", "\n", "\n", "# dataset options", "\n", "parser", ".", "add_argument", "(", "\"--dataset_type\"", ",", "type", "=", "str", ",", "default", "=", "'llff'", ",", "\n", "help", "=", "'options: llff / blender / deepvoxels'", ")", "\n", "parser", ".", "add_argument", "(", "\"--testskip\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'will load 1/N images from test/val sets, useful for large datasets like deepvoxels'", ")", "\n", "\n", "## deepvoxels flags", "\n", "parser", ".", "add_argument", "(", "\"--shape\"", ",", "type", "=", "str", ",", "default", "=", "'greek'", ",", "\n", "help", "=", "'options : armchair / cube / greek / vase'", ")", "\n", "\n", "## blender flags", "\n", "parser", ".", "add_argument", "(", "\"--white_bkgd\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'set to render synthetic data on a white bkgd (always use for dvoxels)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--half_res\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'load blender synthetic data at 400x400 instead of 800x800'", ")", "\n", "parser", ".", "add_argument", "(", "\"--full_res\"", ",", "action", "=", "'store_false'", ",", "dest", "=", "'half_res'", ",", "\n", "help", "=", "'load blender synthetic data at 800x800'", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_render_poses\"", ",", "type", "=", "int", ",", "default", "=", "40", ")", "\n", "\n", "## llff flags", "\n", "parser", ".", "add_argument", "(", "\"--factor\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'downsample factor for LLFF images'", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_ndc\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do not use normalized device coordinates (set for non-forward facing scenes)'", ")", "\n", "parser", ".", "add_argument", "(", "\"--lindisp\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'sampling linearly in disparity rather than depth'", ")", "\n", "parser", ".", "add_argument", "(", "\"--spherify\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'set for spherical 360 scenes'", ")", "\n", "parser", ".", "add_argument", "(", "\"--llffhold\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "\n", "help", "=", "'will take every 1/N images as LLFF test set, paper uses 8'", ")", "\n", "\n", "# logging/saving options", "\n", "parser", ".", "add_argument", "(", "\"--wandb_entity\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--wandb_project\"", ",", "type", "=", "str", ",", "default", "=", "'dietnerf'", ")", "\n", "parser", ".", "add_argument", "(", "\"--i_log\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'frequency of metric logging'", ")", "\n", "parser", ".", "add_argument", "(", "\"--i_log_raw_hist\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'frequency of logging histogram of raw network outputs'", ")", "\n", "parser", ".", "add_argument", "(", "\"--i_print\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'frequency of console printout'", ")", "\n", "parser", ".", "add_argument", "(", "\"--i_img\"", ",", "type", "=", "int", ",", "default", "=", "500", ",", "\n", "help", "=", "'frequency of tensorboard image logging'", ")", "\n", "parser", ".", "add_argument", "(", "\"--i_weights\"", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "\n", "help", "=", "'frequency of weight ckpt saving'", ")", "\n", "parser", ".", "add_argument", "(", "\"--i_testset\"", ",", "type", "=", "int", ",", "default", "=", "50000", ",", "\n", "help", "=", "'frequency of testset saving'", ")", "\n", "parser", ".", "add_argument", "(", "\"--i_video\"", ",", "type", "=", "int", ",", "default", "=", "50000", ",", "\n", "help", "=", "'frequency of render_poses video saving'", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_splits\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "'save ground truth images and poses in each split'", ")", "\n", "\n", "### options for learning with few views", "\n", "parser", ".", "add_argument", "(", "\"--max_train_views\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'limit number of training views for the mse loss'", ")", "\n", "parser", ".", "add_argument", "(", "\"--hardcode_train_views\"", ",", "type", "=", "int", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "]", ")", "\n", "# Options for rendering shared between different losses", "\n", "parser", ".", "add_argument", "(", "\"--render_loss_interval\"", ",", "\"--consistency_loss_interval\"", ",", "\n", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--render_autocast\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--render_poses\"", ",", "\"--consistency_poses\"", ",", "\n", "type", "=", "str", ",", "choices", "=", "[", "'loaded'", ",", "'interpolate_train_all'", ",", "'uniform'", "]", ",", "default", "=", "'loaded'", ")", "\n", "parser", ".", "add_argument", "(", "\"--render_poses_translation_jitter_sigma\"", ",", "\"--consistency_poses_translation_jitter_sigma\"", ",", "\n", "type", "=", "float", ",", "default", "=", "0.", ")", "\n", "parser", ".", "add_argument", "(", "\"--render_poses_interpolate_range\"", ",", "\"--consistency_poses_interpolate_range\"", ",", "\n", "type", "=", "float", ",", "nargs", "=", "2", ",", "default", "=", "[", "0.", ",", "1.", "]", ")", "\n", "# Options for --render_poses=uniform", "\n", "parser", ".", "add_argument", "(", "\"--render_theta_range\"", ",", "\"--consistency_theta_range\"", ",", "type", "=", "float", ",", "nargs", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "\"--render_phi_range\"", ",", "\"--consistency_phi_range\"", ",", "type", "=", "float", ",", "nargs", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "\"--render_radius_range\"", ",", "\"--consistency_radius_range\"", ",", "type", "=", "float", ",", "nargs", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "\"--render_nH\"", ",", "\"--consistency_nH\"", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'number of rows to render for consistency loss. smaller values use less memory'", ")", "\n", "parser", ".", "add_argument", "(", "\"--render_nW\"", ",", "\"--consistency_nW\"", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'number of columns to render for consistency loss'", ")", "\n", "parser", ".", "add_argument", "(", "\"--render_jitter_rays\"", ",", "\"--consistency_jitter_rays\"", ",", "action", "=", "'store_true'", ")", "\n", "\n", "# Computational options for rendering losses", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint_rendering\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--checkpoint_embedding\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_mse\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--pixel_interp_mode\"", ",", "type", "=", "str", ",", "default", "=", "'bicubic'", ")", "\n", "parser", ".", "add_argument", "(", "\"--feature_interp_mode\"", ",", "type", "=", "str", ",", "default", "=", "'bilinear'", ")", "\n", "# Semantic consistency loss", "\n", "parser", ".", "add_argument", "(", "\"--consistency_loss\"", ",", "type", "=", "str", ",", "default", "=", "'none'", ",", "choices", "=", "[", "'none'", ",", "'consistent_with_target_rep'", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--consistency_loss_lam\"", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "\n", "help", "=", "\"weight for the fine network's semantic consistency loss\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--consistency_loss_lam0\"", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "\n", "help", "=", "\"weight for the coarse network's semantic consistency loss\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--consistency_size\"", ",", "type", "=", "int", ",", "default", "=", "224", ")", "\n", "# Consistency model arguments", "\n", "parser", ".", "add_argument", "(", "\"--consistency_model_type\"", ",", "type", "=", "str", ",", "default", "=", "'clip_vit'", ")", "# choices=['clip_vit', 'clip_vit_b16', 'clip_rn50']", "\n", "parser", ".", "add_argument", "(", "\"--consistency_model_num_layers\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--clip_cache_root\"", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/.cache/clip\"", ")", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.train": [[712, 1187], ["run_nerf.config_parser", "config_parser.parse_args", "wandb.init", "wandb.run.save", "wandb.config.update", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "print", "print", "len", "print", "os.makedirs", "os.path.join", "run_nerf.create_nerf", "render_kwargs_train.update", "render_kwargs_test.update", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "print", "print", "print", "print", "parser.parse_args.consistency_loss.startswith", "tqdm.trange", "load_llff.load_llff_data", "print", "numpy.array", "print", "print", "print", "numpy.array", "print", "print", "run_nerf.get_embed_fn", "int", "int", "numpy.array", "os.path.join", "open", "sorted", "os.path.join", "torch.ones", "torch.ones", "torch.ones", "print", "print", "optimizer.zero_grad", "scaler.scale().backward", "scaler.step", "scaler.update", "isinstance", "print", "load_blender.load_blender_data", "print", "print", "numpy.random.choice", "print", "vars", "getattr", "file.write", "open", "file.write", "network_fn", "network_fine", "torch.utils.checkpoint.checkpoint", "torch.utils.checkpoint.checkpoint", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "os.path.join", "os.makedirs", "print", "run_nerf.render_path", "print", "imageio.mimwrite", "os.path.join", "os.makedirs", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "print", "run_nerf_helpers.get_rays", "rays_rgb_o.append", "rays_rgb_d.append", "len", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "images[].permute().to", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.interpolate", "get_embed_fn.", "zip", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "numpy.random.choice", "run_nerf_helpers.get_rays", "run_nerf.sample_rays", "batch_rays.to.to", "target_s.to.to", "run_nerf.make_wandb_image", "torch.interpolate", "get_embed_fn.", "parser.parse_args.consistency_model_type.startswith", "numpy.random.randint", "run_nerf.render", "img2mse", "mse2psnr", "os.path.join", "torch.save", "torch.save", "torch.save", "print", "wandb.save", "print", "os.path.join", "os.makedirs", "print", "print", "tqdm.tqdm.write", "metrics.update", "run_nerf_helpers.gradient_norm", "wandb.Histogram", "wandb.log", "numpy.arange", "numpy.ndarray.min", "numpy.ndarray.max", "load_deepvoxels.load_dv_data", "print", "numpy.mean", "print", "open().read", "os.path.join", "to8b", "run_nerf_helpers.get_perceptual_metrics", "os.path.join", "os.path.join", "os.path.join", "to8b", "os.path.join", "imageio.imwrite", "torch.Tensor", "torch.Tensor", "torch.Tensor", "run_nerf.sample_rays", "batch_rays.to.append", "target_s.to.append", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "run_nerf_helpers.get_rays", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "torch.cuda.amp.autocast", "extras[].unsqueeze.permute().clamp", "print", "run_nerf.make_wandb_image", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "img2mse", "mse2psnr", "scaler.scale", "torch.no_grad", "torch.no_grad", "torch.no_grad", "run_nerf.render_path", "print", "os.path.join", "imageio.mimwrite", "imageio.mimwrite", "wandb.Video", "wandb.Video", "torch.no_grad", "torch.no_grad", "torch.no_grad", "run_nerf.render_path", "network_fn.parameters", "run_nerf_helpers.gradient_norm", "mse2psnr.item", "img2mse.item", "consistency_loss.item", "trans.detach().cpu().numpy", "torch.no_grad", "torch.no_grad", "torch.no_grad", "poses[].to", "run_nerf.render", "mse2psnr", "numpy.arange", "numpy.linalg.norm", "open", "print", "vars", "json.dump", "wandb.save", "images[].permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.random.choice", "scipy.spatial.transform.Rotation.from_matrix().as_rotvec", "run_nerf.render", "torch.stack", "torch.stack", "torch.stack", "extras[].unsqueeze", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "print", "network_fn.state_dict", "optimizer.state_dict", "to8b", "to8b", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "loss.item", "mse2psnr.item", "img2mse.item", "network_fine.parameters", "consistency_loss0.item", "img2mse", "wandb.Image", "wandb.Image", "run_nerf.make_wandb_image", "wandb.Image", "run_nerf.make_wandb_image", "mse2psnr.item", "wandb.Image", "wandb.Image", "wandb.Image", "wandb.Image", "int", "open", "numpy.random.choice", "poses[].cpu", "numpy.random.uniform", "geometry.interp3", "extras[].unsqueeze.permute", "network_fine.state_dict", "loss.item", "mse2psnr.item", "trans.detach().cpu", "len", "load_blender.pose_spherical_uniform", "scipy.spatial.transform.Rotation.from_matrix", "torch.randn", "torch.randn", "torch.randn", "numpy.max", "torch.Tensor", "torch.Tensor", "torch.Tensor", "to8b", "disp.cpu().numpy", "acc.cpu().numpy", "target.cpu().numpy", "to8b", "extras[].cpu().numpy", "extras[].cpu().numpy", "pose[].cpu", "rays[].to", "rays[].to", "trans.detach", "rgb.cpu().numpy", "extras[].cpu().numpy", "disp.cpu", "acc.cpu", "target.cpu", "extras[].cpu", "extras[].cpu", "rgb.cpu", "extras[].cpu"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.config_parser", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.create_nerf", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_llff.load_llff_data", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.get_embed_fn", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_blender.load_blender_data", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.render_path", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.get_rays", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.get_rays", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.sample_rays", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.make_wandb_image", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.render", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.gradient_norm", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_deepvoxels.load_dv_data", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.get_perceptual_metrics", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.sample_rays", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.get_rays", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.make_wandb_image", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.render_path", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.render_path", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf_helpers.gradient_norm", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.render", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.render", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.make_wandb_image", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.run_nerf.make_wandb_image", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.geometry.interp3", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.load_blender.pose_spherical_uniform"], ["", "def", "train", "(", ")", ":", "\n", "    ", "parser", "=", "config_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "wandb", ".", "init", "(", "project", "=", "args", ".", "wandb_project", ",", "entity", "=", "args", ".", "wandb_entity", ")", "\n", "wandb", ".", "run", ".", "name", "=", "args", ".", "expname", "\n", "wandb", ".", "run", ".", "save", "(", ")", "\n", "wandb", ".", "config", ".", "update", "(", "args", ")", "\n", "\n", "# Re-seed", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "# Multi-GPU", "\n", "args", ".", "n_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "print", "(", "f\"Using {args.n_gpus} GPU(s).\"", ")", "\n", "\n", "# Load data", "\n", "print", "(", "'dataset_type:'", ",", "args", ".", "dataset_type", ")", "\n", "if", "args", ".", "dataset_type", "==", "'llff'", ":", "\n", "        ", "images", ",", "poses", ",", "bds", ",", "render_poses", ",", "i_test", "=", "load_llff_data", "(", "args", ".", "datadir", ",", "args", ".", "factor", ",", "\n", "recenter", "=", "True", ",", "bd_factor", "=", ".75", ",", "\n", "spherify", "=", "args", ".", "spherify", ")", "\n", "hwf", "=", "poses", "[", "0", ",", ":", "3", ",", "-", "1", "]", "\n", "poses", "=", "poses", "[", ":", ",", ":", "3", ",", ":", "4", "]", "\n", "print", "(", "'Loaded llff'", ",", "images", ".", "shape", ",", "render_poses", ".", "shape", ",", "hwf", ",", "args", ".", "datadir", ")", "\n", "if", "not", "isinstance", "(", "i_test", ",", "list", ")", ":", "\n", "            ", "i_test", "=", "[", "i_test", "]", "\n", "\n", "", "if", "args", ".", "llffhold", ">", "0", ":", "\n", "            ", "print", "(", "'Auto LLFF holdout,'", ",", "args", ".", "llffhold", ")", "\n", "i_test", "=", "np", ".", "arange", "(", "images", ".", "shape", "[", "0", "]", ")", "[", ":", ":", "args", ".", "llffhold", "]", "\n", "\n", "", "i_val", "=", "i_test", "\n", "i_train", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "np", ".", "arange", "(", "int", "(", "images", ".", "shape", "[", "0", "]", ")", ")", "if", "\n", "(", "i", "not", "in", "i_test", "and", "i", "not", "in", "i_val", ")", "]", ")", "\n", "\n", "print", "(", "'DEFINING BOUNDS'", ")", "\n", "if", "args", ".", "no_ndc", ":", "\n", "            ", "near", "=", "np", ".", "ndarray", ".", "min", "(", "bds", ")", "*", ".9", "\n", "far", "=", "np", ".", "ndarray", ".", "max", "(", "bds", ")", "*", "1.", "\n", "\n", "", "else", ":", "\n", "            ", "near", "=", "0.", "\n", "far", "=", "1.", "\n", "", "print", "(", "'NEAR FAR'", ",", "near", ",", "far", ")", "\n", "\n", "", "elif", "args", ".", "dataset_type", "==", "'blender'", ":", "\n", "        ", "images", ",", "poses", ",", "render_poses", ",", "hwf", ",", "i_split", "=", "load_blender_data", "(", "args", ".", "datadir", ",", "args", ".", "half_res", ",", "args", ".", "testskip", ",", "num_render_poses", "=", "args", ".", "num_render_poses", ")", "\n", "print", "(", "'Loaded blender'", ",", "images", ".", "shape", ",", "render_poses", ".", "shape", ",", "hwf", ",", "args", ".", "datadir", ")", "\n", "i_train", ",", "i_val", ",", "i_test", "=", "i_split", "\n", "\n", "near", "=", "2.", "\n", "far", "=", "6.", "\n", "\n", "if", "args", ".", "white_bkgd", ":", "\n", "            ", "images", "=", "images", "[", "...", ",", ":", "3", "]", "*", "images", "[", "...", ",", "-", "1", ":", "]", "+", "(", "1.", "-", "images", "[", "...", ",", "-", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "images", "=", "images", "[", "...", ",", ":", "3", "]", "\n", "\n", "", "", "elif", "args", ".", "dataset_type", "==", "'deepvoxels'", ":", "\n", "\n", "        ", "images", ",", "poses", ",", "render_poses", ",", "hwf", ",", "i_split", "=", "load_dv_data", "(", "scene", "=", "args", ".", "shape", ",", "\n", "basedir", "=", "args", ".", "datadir", ",", "\n", "testskip", "=", "args", ".", "testskip", ")", "\n", "\n", "print", "(", "'Loaded deepvoxels'", ",", "images", ".", "shape", ",", "render_poses", ".", "shape", ",", "hwf", ",", "args", ".", "datadir", ")", "\n", "i_train", ",", "i_val", ",", "i_test", "=", "i_split", "\n", "\n", "hemi_R", "=", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "poses", "[", ":", ",", ":", "3", ",", "-", "1", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "near", "=", "hemi_R", "-", "1.", "\n", "far", "=", "hemi_R", "+", "1.", "\n", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Unknown dataset type'", ",", "args", ".", "dataset_type", ",", "'exiting'", ")", "\n", "return", "\n", "\n", "# Subsample training indices to simulate having fewer training views", "\n", "", "i_train_poses", "=", "i_train", "# Use all training poses for auxiliary representation consistency loss.", "\n", "# TODO: Could also use any continuous set of poses including the", "\n", "# val and test poses, since we don't use the images for aux loss.", "\n", "if", "len", "(", "args", ".", "hardcode_train_views", ")", ":", "\n", "        ", "print", "(", "'Original training views:'", ",", "i_train", ")", "\n", "i_train", "=", "np", ".", "array", "(", "args", ".", "hardcode_train_views", ")", "\n", "print", "(", "'Hardcoded train views:'", ",", "i_train", ")", "\n", "", "elif", "args", ".", "max_train_views", ">", "0", ":", "\n", "        ", "print", "(", "'Original training views:'", ",", "i_train", ")", "\n", "i_train", "=", "np", ".", "random", ".", "choice", "(", "i_train", ",", "size", "=", "args", ".", "max_train_views", ",", "replace", "=", "False", ")", "\n", "print", "(", "'Subsampled train views:'", ",", "i_train", ")", "\n", "\n", "# Load embedding network for rendering losses", "\n", "", "if", "args", ".", "consistency_loss", "!=", "'none'", ":", "\n", "        ", "print", "(", "f'Using auxilliary consistency loss [{args.consistency_loss}], fine weight [{args.consistency_loss_lam}], coarse weight [{args.consistency_loss_lam0}]'", ")", "\n", "embed", "=", "get_embed_fn", "(", "args", ".", "consistency_model_type", ",", "args", ".", "consistency_model_num_layers", ",", "checkpoint", "=", "args", ".", "checkpoint_embedding", ",", "clip_cache_root", "=", "args", ".", "clip_cache_root", ")", "\n", "\n", "# Cast intrinsics to right types", "\n", "", "H", ",", "W", ",", "focal", "=", "hwf", "\n", "print", "(", "'hwf'", ",", "hwf", ")", "\n", "H", ",", "W", "=", "int", "(", "H", ")", ",", "int", "(", "W", ")", "\n", "hwf", "=", "[", "H", ",", "W", ",", "focal", "]", "\n", "\n", "if", "args", ".", "render_test", ":", "\n", "        ", "render_poses", "=", "np", ".", "array", "(", "poses", "[", "i_test", "]", ")", "\n", "\n", "# Create log dir and copy the config file", "\n", "", "basedir", "=", "args", ".", "basedir", "\n", "expname", "=", "args", ".", "expname", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ")", ",", "exist_ok", "=", "True", ")", "\n", "f", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'args.txt'", ")", "\n", "with", "open", "(", "f", ",", "'w'", ")", "as", "file", ":", "\n", "        ", "for", "arg", "in", "sorted", "(", "vars", "(", "args", ")", ")", ":", "\n", "            ", "attr", "=", "getattr", "(", "args", ",", "arg", ")", "\n", "file", ".", "write", "(", "'{} = {}\\n'", ".", "format", "(", "arg", ",", "attr", ")", ")", "\n", "", "", "if", "args", ".", "config", "is", "not", "None", ":", "\n", "        ", "f", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'config.txt'", ")", "\n", "with", "open", "(", "f", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "file", ".", "write", "(", "open", "(", "args", ".", "config", ",", "'r'", ")", ".", "read", "(", ")", ")", "\n", "\n", "# Create nerf model", "\n", "", "", "render_kwargs_train", ",", "render_kwargs_test", ",", "start", ",", "grad_vars", ",", "optimizer", ",", "scaler", "=", "create_nerf", "(", "args", ")", "\n", "global_step", "=", "start", "\n", "network_fn", "=", "render_kwargs_train", "[", "'network_fn'", "]", "\n", "network_fine", "=", "render_kwargs_train", "[", "'network_fine'", "]", "\n", "if", "args", ".", "checkpoint_rendering", ":", "\n", "# Pass a dummy input tensor that requires grad so checkpointing does something", "\n", "# https://discuss.pytorch.org/t/checkpoint-with-no-grad-requiring-inputs-problem/19117/10", "\n", "        ", "dummy", "=", "torch", ".", "ones", "(", "1", ",", "dtype", "=", "torch", ".", "float32", ",", "requires_grad", "=", "True", ",", "device", "=", "device", ")", "\n", "network_fn_wrapper", "=", "lambda", "x", ",", "y", ":", "network_fn", "(", "x", ")", "\n", "network_fine_wrapper", "=", "lambda", "x", ",", "y", ":", "network_fine", "(", "x", ")", "\n", "render_kwargs_train", "[", "'network_fn'", "]", "=", "lambda", "x", ":", "run_checkpoint", "(", "network_fn_wrapper", ",", "x", ",", "dummy", ")", "\n", "render_kwargs_train", "[", "'network_fine'", "]", "=", "lambda", "x", ":", "run_checkpoint", "(", "network_fine_wrapper", ",", "x", ",", "dummy", ")", "\n", "\n", "\n", "", "bds_dict", "=", "{", "\n", "'near'", ":", "near", ",", "\n", "'far'", ":", "far", ",", "\n", "}", "\n", "render_kwargs_train", ".", "update", "(", "bds_dict", ")", "\n", "render_kwargs_test", ".", "update", "(", "bds_dict", ")", "\n", "\n", "# Move testing data to GPU", "\n", "render_poses", "=", "torch", ".", "Tensor", "(", "render_poses", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Short circuit if only rendering out from trained model", "\n", "if", "args", ".", "render_only", ":", "\n", "        ", "print", "(", "'RENDER ONLY'", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "args", ".", "render_test", ":", "\n", "# render_test switches to test poses", "\n", "                ", "images", "=", "images", "[", "i_test", "]", "\n", "", "else", ":", "\n", "# Default is smoother render_poses path", "\n", "                ", "images", "=", "None", "\n", "\n", "", "testsavedir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'renderonly_{}_{:06d}'", ".", "format", "(", "'test'", "if", "args", ".", "render_test", "else", "'path'", ",", "start", ")", ")", "\n", "os", ".", "makedirs", "(", "testsavedir", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "'test poses shape'", ",", "render_poses", ".", "shape", ")", "\n", "\n", "rgbs", ",", "_", "=", "render_path", "(", "render_poses", ",", "hwf", ",", "args", ".", "chunk", ",", "render_kwargs_test", ",", "gt_imgs", "=", "images", ",", "savedir", "=", "testsavedir", ",", "render_factor", "=", "args", ".", "render_factor", ")", "\n", "print", "(", "'Done rendering'", ",", "testsavedir", ")", "\n", "imageio", ".", "mimwrite", "(", "os", ".", "path", ".", "join", "(", "testsavedir", ",", "'video.mp4'", ")", ",", "to8b", "(", "rgbs", ")", ",", "fps", "=", "30", ",", "quality", "=", "8", ")", "\n", "\n", "if", "args", ".", "render_test", ":", "\n", "# Compute metrics", "\n", "                ", "mse", ",", "psnr", ",", "ssim", ",", "lpips", "=", "get_perceptual_metrics", "(", "rgbs", ",", "images", ",", "device", "=", "device", ")", "\n", "\n", "metricspath", "=", "os", ".", "path", ".", "join", "(", "testsavedir", ",", "'test_metrics.json'", ")", "\n", "with", "open", "(", "metricspath", ",", "'w'", ")", "as", "test_metrics_f", ":", "\n", "                    ", "test_metrics", "=", "{", "\n", "'mse'", ":", "mse", ",", "\n", "'psnr'", ":", "psnr", ",", "\n", "'ssim'", ":", "ssim", ",", "\n", "'lpips'", ":", "lpips", ",", "\n", "}", "\n", "print", "(", "args", ".", "expname", ",", "f'test metrics ({metricspath}):'", ",", "test_metrics", ")", "\n", "test_metrics", "[", "'args'", "]", "=", "vars", "(", "args", ")", "\n", "json", ".", "dump", "(", "test_metrics", ",", "test_metrics_f", ")", "\n", "wandb", ".", "save", "(", "metricspath", ")", "\n", "\n", "", "", "return", "\n", "\n", "# Save ground truth splits for visualization", "\n", "", "", "if", "args", ".", "save_splits", ":", "\n", "        ", "for", "idx", ",", "name", "in", "[", "(", "i_train", ",", "'train'", ")", ",", "(", "i_val", ",", "'val'", ")", ",", "(", "i_test", ",", "'test'", ")", "]", ":", "\n", "            ", "savedir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'{}set'", ".", "format", "(", "name", ")", ")", "\n", "os", ".", "makedirs", "(", "savedir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "torch", ".", "save", "(", "poses", "[", "idx", "]", ",", "os", ".", "path", ".", "join", "(", "savedir", ",", "'poses.pth'", ")", ")", "\n", "torch", ".", "save", "(", "idx", ",", "os", ".", "path", ".", "join", "(", "savedir", ",", "'indices.pth'", ")", ")", "\n", "for", "i", "in", "idx", ":", "\n", "                ", "rgb8", "=", "to8b", "(", "images", "[", "i", "]", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "savedir", ",", "'{:03d}.png'", ".", "format", "(", "i", ")", ")", "\n", "imageio", ".", "imwrite", "(", "filename", ",", "rgb8", ")", "\n", "\n", "", "print", "(", "name", ",", "'poses shape'", ",", "poses", "[", "idx", "]", ".", "shape", ",", "'images shape'", ",", "images", "[", "idx", "]", ".", "shape", ")", "\n", "print", "(", "f'Saved ground truth {name} set'", ")", "\n", "\n", "# Prepare raybatch tensor if batching random rays", "\n", "", "", "N_rand", "=", "args", ".", "N_rand", "\n", "use_batching", "=", "not", "args", ".", "no_batching", "\n", "if", "use_batching", ":", "\n", "        ", "assert", "not", "args", ".", "render_jitter_rays", "\n", "print", "(", "'get rays'", ")", "\n", "\n", "# For random ray batching, equal number of rays per pose", "\n", "rays_rgb_o", "=", "[", "]", "\n", "rays_rgb_d", "=", "[", "]", "\n", "for", "p", "in", "poses", "[", "i_train", ",", ":", "3", ",", ":", "4", "]", ":", "\n", "            ", "rays_o", ",", "rays_d", "=", "get_rays", "(", "H", ",", "W", ",", "focal", ",", "torch", ".", "Tensor", "(", "p", ")", ")", "# (H, W, 3), (H, W, 3)", "\n", "rays_rgb_o", ".", "append", "(", "rays_o", ")", "\n", "rays_rgb_d", ".", "append", "(", "rays_d", ")", "\n", "", "N_rand_per_view", "=", "N_rand", "//", "len", "(", "i_train", ")", "\n", "\n", "# Move training data to GPU", "\n", "", "images", "=", "torch", ".", "Tensor", "(", "images", ")", ".", "to", "(", "device", ")", "\n", "poses", "=", "torch", ".", "Tensor", "(", "poses", ")", ".", "to", "(", "device", ")", "\n", "\n", "N_iters", "=", "args", ".", "N_iters", "+", "1", "\n", "print", "(", "'Begin'", ")", "\n", "print", "(", "'TRAIN views are'", ",", "i_train", ")", "\n", "print", "(", "'TEST views are'", ",", "i_test", ")", "\n", "print", "(", "'VAL views are'", ",", "i_val", ")", "\n", "\n", "calc_ctr_loss", "=", "args", ".", "consistency_loss", ".", "startswith", "(", "'consistent_with_target_rep'", ")", "\n", "any_rendered_loss", "=", "calc_ctr_loss", "\n", "if", "any_rendered_loss", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "targets", "=", "images", "[", "i_train", "]", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Embed training images for consistency loss", "\n", "", "", "if", "calc_ctr_loss", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "targets_resize_model", "=", "F", ".", "interpolate", "(", "targets", ",", "(", "args", ".", "consistency_size", ",", "args", ".", "consistency_size", ")", ",", "mode", "=", "args", ".", "pixel_interp_mode", ")", "\n", "target_embeddings", "=", "embed", "(", "targets_resize_model", ")", "# [N,L,D]", "\n", "\n", "# Embed training images for aligned consistency loss", "\n", "", "", "consistency_keep_keys", "=", "[", "'rgb_map'", ",", "'rgb0'", "]", "\n", "\n", "start", "=", "start", "+", "1", "\n", "for", "i", "in", "trange", "(", "start", ",", "N_iters", ")", ":", "\n", "        ", "metrics", "=", "{", "}", "\n", "\n", "# Sample random ray batch", "\n", "if", "use_batching", ":", "\n", "# Select the same number of rays for each view", "\n", "            ", "batch_rays", ",", "target_s", "=", "[", "]", ",", "[", "]", "\n", "for", "target", ",", "rays_o", ",", "rays_d", "in", "zip", "(", "images", "[", "i_train", "]", ",", "rays_rgb_o", ",", "rays_rgb_d", ")", ":", "\n", "                ", "rays_pose", ",", "select_coords", "=", "sample_rays", "(", "H", ",", "W", ",", "rays_o", ",", "rays_d", ",", "N_rand", "=", "N_rand_per_view", ",", "\n", "i", "=", "i", ",", "start", "=", "start", ",", "precrop_iters", "=", "args", ".", "precrop_iters", ",", "precrop_frac", "=", "args", ".", "precrop_frac", ")", "\n", "batch_rays", ".", "append", "(", "rays_pose", ")", "\n", "target_s_pose", "=", "target", "[", "select_coords", "[", ":", ",", "0", "]", ",", "select_coords", "[", ":", ",", "1", "]", "]", "# (N_rand, 3)", "\n", "target_s", ".", "append", "(", "target_s_pose", ")", "\n", "", "batch_rays", "=", "torch", ".", "cat", "(", "batch_rays", ",", "dim", "=", "1", ")", ".", "to", "(", "device", ")", "# (2, N_rand, 3)", "\n", "target_s", "=", "torch", ".", "cat", "(", "target_s", ",", "dim", "=", "0", ")", ".", "to", "(", "device", ")", "# (N_rand, 3)", "\n", "", "else", ":", "\n", "            ", "assert", "N_rand", "is", "not", "None", "\n", "\n", "# Random rays from one image", "\n", "img_i", "=", "np", ".", "random", ".", "choice", "(", "i_train", ")", "\n", "target", "=", "images", "[", "img_i", "]", "\n", "pose", "=", "poses", "[", "img_i", ",", ":", "3", ",", ":", "4", "]", "\n", "\n", "rays_o", ",", "rays_d", "=", "get_rays", "(", "H", ",", "W", ",", "focal", ",", "torch", ".", "Tensor", "(", "pose", ")", ")", "# (H, W, 3), (H, W, 3)", "\n", "batch_rays", ",", "select_coords", "=", "sample_rays", "(", "H", ",", "W", ",", "rays_o", ",", "rays_d", ",", "N_rand", "=", "N_rand", ",", "\n", "i", "=", "i", ",", "start", "=", "start", ",", "precrop_iters", "=", "args", ".", "precrop_iters", ",", "precrop_frac", "=", "args", ".", "precrop_frac", ")", "\n", "batch_rays", "=", "batch_rays", ".", "to", "(", "device", ")", "\n", "target_s", "=", "target", "[", "select_coords", "[", ":", ",", "0", "]", ",", "select_coords", "[", ":", ",", "1", "]", "]", "# (N_rand, 3)", "\n", "target_s", "=", "target_s", ".", "to", "(", "device", ")", "\n", "\n", "# Representational consistency loss with rendered image", "\n", "", "render_loss_iter", "=", "i", "%", "args", ".", "render_loss_interval", "==", "0", "\n", "\n", "if", "any_rendered_loss", "and", "render_loss_iter", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Render from a random viewpoint", "\n", "                ", "if", "args", ".", "render_poses", "==", "'loaded'", ":", "\n", "                    ", "poses_i", "=", "np", ".", "random", ".", "choice", "(", "i_train_poses", ")", "\n", "pose", "=", "poses", "[", "poses_i", ",", ":", "3", ",", ":", "4", "]", "\n", "", "elif", "args", ".", "render_poses", "==", "'interpolate_train_all'", ":", "\n", "                    ", "assert", "len", "(", "i_train_poses", ")", ">=", "3", "\n", "poses_i", "=", "np", ".", "random", ".", "choice", "(", "i_train_poses", ",", "size", "=", "3", ",", "replace", "=", "False", ")", "\n", "pose1", ",", "pose2", ",", "pose3", "=", "poses", "[", "poses_i", ",", ":", "3", ",", ":", "4", "]", ".", "cpu", "(", ")", "\n", "s12", ",", "s3", "=", "np", ".", "random", ".", "uniform", "(", "*", "args", ".", "render_poses_interpolate_range", ",", "size", "=", "2", ")", "\n", "pose", "=", "geometry", ".", "interp3", "(", "pose1", ",", "pose2", ",", "pose3", ",", "s12", ",", "s3", ")", "\n", "", "elif", "args", ".", "render_poses", "==", "'uniform'", ":", "\n", "                    ", "assert", "args", ".", "dataset_type", "==", "'blender'", "\n", "pose", "=", "pose_spherical_uniform", "(", "args", ".", "render_theta_range", ",", "args", ".", "render_phi_range", ",", "args", ".", "render_radius_range", ")", "\n", "pose", "=", "pose", "[", ":", "3", ",", ":", "4", "]", "\n", "\n", "", "print", "(", "'Sampled pose:'", ",", "Rotation", ".", "from_matrix", "(", "pose", "[", ":", ",", ":", "3", "]", ".", "cpu", "(", ")", ")", ".", "as_rotvec", "(", ")", ",", "'origin:'", ",", "pose", "[", ":", ",", "3", "]", ")", "\n", "\n", "if", "args", ".", "render_poses_translation_jitter_sigma", ">", "0", ":", "\n", "                    ", "pose", "[", ":", ",", "-", "1", "]", "=", "pose", "[", ":", ",", "-", "1", "]", "+", "torch", ".", "randn", "(", "3", ",", "device", "=", "pose", ".", "device", ")", "*", "args", ".", "render_poses_translation_jitter_sigma", "\n", "\n", "# TODO: something strange with pts_W in get_rays when 224 nH", "\n", "", "rays", "=", "get_rays", "(", "H", ",", "W", ",", "focal", ",", "c2w", "=", "pose", ",", "nH", "=", "args", ".", "render_nH", ",", "nW", "=", "args", ".", "render_nW", ",", "\n", "jitter", "=", "args", ".", "render_jitter_rays", ")", "\n", "\n", "", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "args", ".", "render_autocast", ")", ":", "\n", "                ", "extras", "=", "render", "(", "H", ",", "W", ",", "focal", ",", "chunk", "=", "args", ".", "chunk", ",", "\n", "rays", "=", "(", "rays", "[", "0", "]", ".", "to", "(", "device", ")", ",", "rays", "[", "1", "]", ".", "to", "(", "device", ")", ")", ",", "\n", "keep_keys", "=", "consistency_keep_keys", ",", "\n", "**", "render_kwargs_train", ")", "[", "-", "1", "]", "\n", "# rgb0 is the rendering from the coarse network, while rgb_map uses the fine network", "\n", "if", "args", ".", "N_importance", ">", "0", ":", "\n", "                    ", "rgbs", "=", "torch", ".", "stack", "(", "[", "extras", "[", "'rgb_map'", "]", ",", "extras", "[", "'rgb0'", "]", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "rgbs", "=", "extras", "[", "'rgb_map'", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "rgbs", "=", "rgbs", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ".", "clamp", "(", "0", ",", "1", ")", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                ", "print", "(", "'rendering losses rendered rgb image shape:'", ",", "rgbs", ".", "shape", ")", "\n", "\n", "# Log rendered images", "\n", "", "metrics", "[", "'train_ctr/rgb'", "]", "=", "make_wandb_image", "(", "extras", "[", "'rgb_map'", "]", ",", "'clip'", ")", "\n", "if", "args", ".", "N_importance", ">", "0", ":", "\n", "                ", "metrics", "[", "'train_ctr/rgb0'", "]", "=", "make_wandb_image", "(", "extras", "[", "'rgb0'", "]", ",", "'clip'", ")", "\n", "\n", "#####  Core optimization loop  #####", "\n", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "0", "\n", "\n", "if", "calc_ctr_loss", "and", "render_loss_iter", ":", "\n", "            ", "assert", "args", ".", "consistency_loss", "==", "'consistent_with_target_rep'", "\n", "\n", "# Resize and embed rendered images", "\n", "rgbs_resize_c", "=", "F", ".", "interpolate", "(", "rgbs", ",", "size", "=", "(", "args", ".", "consistency_size", ",", "args", ".", "consistency_size", ")", ",", "mode", "=", "args", ".", "pixel_interp_mode", ")", "\n", "rendered_embeddings", "=", "embed", "(", "rgbs_resize_c", ")", "\n", "rendered_embedding", "=", "rendered_embeddings", "[", "0", "]", "\n", "if", "args", ".", "N_importance", ">", "0", ":", "\n", "                ", "rendered_embedding0", "=", "rendered_embeddings", "[", "1", "]", "# for coarse net", "\n", "\n", "# Randomly sample a target", "\n", "", "if", "args", ".", "consistency_model_type", ".", "startswith", "(", "'clip_vit'", ")", ":", "\n", "# Modified CLIP ViT to return sequence features. Extract the [CLS] token features", "\n", "                ", "assert", "rendered_embedding", ".", "ndim", "==", "2", "# [L,D]", "\n", "assert", "target_embeddings", ".", "ndim", "==", "3", "# [N,L,D]", "\n", "rendered_emb", "=", "rendered_embedding", "[", "0", "]", "\n", "if", "args", ".", "N_importance", ">", "0", ":", "\n", "                    ", "rendered_emb0", "=", "rendered_embedding0", "[", "0", "]", "\n", "", "target_emb", "=", "target_embeddings", "[", ":", ",", "0", "]", "\n", "", "else", ":", "\n", "                ", "assert", "rendered_embedding", ".", "ndim", "==", "1", "# [D]", "\n", "assert", "target_embeddings", ".", "ndim", "==", "2", "# [N,D]", "\n", "rendered_emb", ",", "target_emb", "=", "rendered_embedding", ",", "target_embeddings", "\n", "if", "args", ".", "N_importance", ">", "0", ":", "\n", "                    ", "rendered_emb0", "=", "rendered_embedding0", "\n", "\n", "# Sample a single random target for consistency loss", "\n", "", "", "target_i", "=", "np", ".", "random", ".", "randint", "(", "target_emb", ".", "shape", "[", "0", "]", ")", "\n", "target_emb", "=", "target_emb", "[", "target_i", "]", "\n", "consistency_loss", "=", "-", "torch", ".", "cosine_similarity", "(", "target_emb", ",", "rendered_emb", ",", "dim", "=", "-", "1", ")", "\n", "if", "args", ".", "N_importance", ">", "0", ":", "\n", "                ", "consistency_loss0", "=", "-", "torch", ".", "cosine_similarity", "(", "target_emb", ",", "rendered_emb0", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "loss", "=", "loss", "+", "consistency_loss", "*", "args", ".", "consistency_loss_lam", "\n", "if", "args", ".", "N_importance", ">", "0", ":", "\n", "                ", "loss", "=", "loss", "+", "consistency_loss0", "*", "args", ".", "consistency_loss_lam0", "\n", "\n", "", "", "if", "not", "args", ".", "no_mse", ":", "\n", "# Standard NeRF MSE loss with subsampled rays", "\n", "            ", "rgb", ",", "disp", ",", "acc", ",", "extras", "=", "render", "(", "H", ",", "W", ",", "focal", ",", "chunk", "=", "args", ".", "chunk", ",", "rays", "=", "batch_rays", ",", "\n", "verbose", "=", "i", "<", "10", ",", "retraw", "=", "True", ",", "\n", "**", "render_kwargs_train", ")", "\n", "img_loss", "=", "img2mse", "(", "rgb", ",", "target_s", ")", "\n", "trans", "=", "extras", "[", "'raw'", "]", "[", "...", ",", "-", "1", "]", "\n", "loss", "=", "loss", "+", "img_loss", "\n", "psnr", "=", "mse2psnr", "(", "img_loss", ")", "\n", "\n", "if", "'rgb0'", "in", "extras", ":", "\n", "                ", "if", "i", "==", "start", ":", "\n", "                    ", "print", "(", "'Using auxilliary rgb0 mse loss'", ")", "\n", "", "img_loss0", "=", "img2mse", "(", "extras", "[", "'rgb0'", "]", ",", "target_s", ")", "\n", "loss", "=", "loss", "+", "img_loss0", "\n", "psnr0", "=", "mse2psnr", "(", "img_loss0", ")", "\n", "\n", "", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "\n", "# # NOTE: IMPORTANT!", "\n", "###   update learning rate   ###", "\n", "decay_rate", "=", "0.1", "\n", "decay_steps", "=", "args", ".", "lrate_decay", "*", "1000", "\n", "new_lrate", "=", "args", ".", "lrate", "*", "(", "decay_rate", "**", "(", "global_step", "/", "decay_steps", ")", ")", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "new_lrate", "\n", "#####           end            #####", "\n", "\n", "# Rest is logging", "\n", "", "if", "i", "%", "args", ".", "i_weights", "==", "0", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'{:06d}.tar'", ".", "format", "(", "i", ")", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'global_step'", ":", "global_step", ",", "\n", "'network_fn_state_dict'", ":", "network_fn", ".", "state_dict", "(", ")", ",", "\n", "'network_fine_state_dict'", ":", "network_fine", ".", "state_dict", "(", ")", "if", "network_fine", "is", "not", "None", "else", "None", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "path", ")", "\n", "print", "(", "'Saved checkpoints at'", ",", "path", ")", "\n", "wandb", ".", "save", "(", "path", ")", "\n", "print", "(", "'Uploading checkpoints at'", ",", "path", ")", "\n", "\n", "", "if", "i", "%", "args", ".", "i_video", "==", "0", "and", "i", ">", "0", ":", "\n", "# Turn on testing mode", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "rgbs", ",", "disps", "=", "render_path", "(", "render_poses", ",", "hwf", ",", "args", ".", "chunk", ",", "render_kwargs_test", ")", "\n", "print", "(", "'Done, saving'", ",", "rgbs", ".", "shape", ",", "disps", ".", "shape", ")", "\n", "moviebase", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'{}_spiral_{:06d}_'", ".", "format", "(", "expname", ",", "i", ")", ")", "\n", "imageio", ".", "mimwrite", "(", "moviebase", "+", "'rgb.mp4'", ",", "to8b", "(", "rgbs", ")", ",", "fps", "=", "30", ",", "quality", "=", "8", ")", "\n", "imageio", ".", "mimwrite", "(", "moviebase", "+", "'disp.mp4'", ",", "to8b", "(", "disps", "/", "np", ".", "max", "(", "disps", ")", ")", ",", "fps", "=", "30", ",", "quality", "=", "8", ")", "\n", "metrics", "[", "\"render_path/rgb_video\"", "]", "=", "wandb", ".", "Video", "(", "moviebase", "+", "'rgb.mp4'", ")", "\n", "metrics", "[", "\"render_path/disp_video\"", "]", "=", "wandb", ".", "Video", "(", "moviebase", "+", "'disp.mp4'", ")", "\n", "\n", "", "", "if", "i", "%", "args", ".", "i_testset", "==", "0", "and", "i", ">", "0", ":", "\n", "            ", "testsavedir", "=", "os", ".", "path", ".", "join", "(", "basedir", ",", "expname", ",", "'testset_{:06d}'", ".", "format", "(", "i", ")", ")", "\n", "os", ".", "makedirs", "(", "testsavedir", ",", "exist_ok", "=", "True", ")", "\n", "print", "(", "'test poses shape'", ",", "poses", "[", "i_test", "]", ".", "shape", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "render_path", "(", "torch", ".", "Tensor", "(", "poses", "[", "i_test", "]", ")", ".", "to", "(", "device", ")", ",", "hwf", ",", "args", ".", "chunk", ",", "render_kwargs_test", ",", "gt_imgs", "=", "images", "[", "i_test", "]", ",", "savedir", "=", "testsavedir", ")", "\n", "", "print", "(", "'Saved test set'", ")", "\n", "\n", "", "if", "i", "%", "args", ".", "i_print", "==", "0", ":", "\n", "            ", "tqdm", ".", "write", "(", "f\"[TRAIN] Iter: {i} Loss: {loss.item()}  PSNR: {psnr.item()}\"", ")", "\n", "\n", "# Log scalars, images and histograms to wandb", "\n", "", "if", "i", "%", "args", ".", "i_log", "==", "0", ":", "\n", "            ", "metrics", ".", "update", "(", "{", "\n", "\"train/loss\"", ":", "loss", ".", "item", "(", ")", ",", "\n", "\"train/psnr\"", ":", "psnr", ".", "item", "(", ")", ",", "\n", "\"train/mse\"", ":", "img_loss", ".", "item", "(", ")", ",", "\n", "\"train/lrate\"", ":", "new_lrate", ",", "\n", "}", ")", "\n", "metrics", "[", "\"gradients/norm_coarse\"", "]", "=", "gradient_norm", "(", "network_fn", ".", "parameters", "(", ")", ")", "\n", "if", "args", ".", "N_importance", ">", "0", ":", "\n", "                ", "metrics", "[", "\"gradients/norm_fine\"", "]", "=", "gradient_norm", "(", "network_fine", ".", "parameters", "(", ")", ")", "\n", "metrics", "[", "\"train/psnr0\"", "]", "=", "psnr0", ".", "item", "(", ")", "\n", "metrics", "[", "\"train/mse0\"", "]", "=", "img_loss0", ".", "item", "(", ")", "\n", "", "if", "render_loss_iter", "and", "calc_ctr_loss", ":", "\n", "                ", "metrics", "[", "\"train_ctr/consistency_loss\"", "]", "=", "consistency_loss", ".", "item", "(", ")", "\n", "if", "args", ".", "N_importance", ">", "0", ":", "\n", "                    ", "metrics", "[", "\"train_ctr/consistency_loss0\"", "]", "=", "consistency_loss0", ".", "item", "(", ")", "\n", "\n", "", "", "", "if", "i", "%", "args", ".", "i_log_raw_hist", "==", "0", ":", "\n", "            ", "metrics", "[", "\"train/tran\"", "]", "=", "wandb", ".", "Histogram", "(", "trans", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "if", "i", "%", "args", ".", "i_img", "==", "0", ":", "\n", "# Log a rendered validation view to Tensorboard", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "img_i", "=", "i_val", "[", "0", "]", "\n", "target", "=", "images", "[", "img_i", "]", "\n", "pose", "=", "poses", "[", "img_i", ",", ":", "3", ",", ":", "4", "]", ".", "to", "(", "device", ")", "\n", "rgb", ",", "disp", ",", "acc", ",", "extras", "=", "render", "(", "H", ",", "W", ",", "focal", ",", "chunk", "=", "args", ".", "chunk", ",", "c2w", "=", "pose", ",", "\n", "**", "render_kwargs_test", ")", "\n", "\n", "psnr", "=", "mse2psnr", "(", "img2mse", "(", "rgb", ",", "target", ")", ")", "\n", "\n", "metrics", "=", "{", "\n", "'val/rgb'", ":", "wandb", ".", "Image", "(", "to8b", "(", "rgb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "[", "np", ".", "newaxis", "]", ")", ",", "\n", "'val/disp'", ":", "wandb", ".", "Image", "(", "disp", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "np", ".", "newaxis", ",", "...", ",", "np", ".", "newaxis", "]", ")", ",", "\n", "'val/disp_scaled'", ":", "make_wandb_image", "(", "disp", "[", "np", ".", "newaxis", ",", "...", ",", "np", ".", "newaxis", "]", ")", ",", "\n", "'val/acc'", ":", "wandb", ".", "Image", "(", "acc", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "np", ".", "newaxis", ",", "...", ",", "np", ".", "newaxis", "]", ")", ",", "\n", "'val/acc_scaled'", ":", "make_wandb_image", "(", "acc", "[", "np", ".", "newaxis", ",", "...", ",", "np", ".", "newaxis", "]", ")", ",", "\n", "'val/psnr_holdout'", ":", "psnr", ".", "item", "(", ")", ",", "\n", "'val/rgb_holdout'", ":", "wandb", ".", "Image", "(", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "np", ".", "newaxis", "]", ")", "\n", "}", "\n", "if", "args", ".", "N_importance", ">", "0", ":", "\n", "                    ", "metrics", "[", "'rgb0'", "]", "=", "wandb", ".", "Image", "(", "to8b", "(", "extras", "[", "'rgb0'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "[", "np", ".", "newaxis", "]", ")", "\n", "metrics", "[", "'disp0'", "]", "=", "wandb", ".", "Image", "(", "extras", "[", "'disp0'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "np", ".", "newaxis", ",", "...", ",", "np", ".", "newaxis", "]", ")", "\n", "metrics", "[", "'z_std'", "]", "=", "wandb", ".", "Image", "(", "extras", "[", "'z_std'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "[", "np", ".", "newaxis", ",", "...", ",", "np", ".", "newaxis", "]", ")", "\n", "\n", "", "", "", "if", "metrics", ":", "\n", "            ", "wandb", ".", "log", "(", "metrics", ",", "step", "=", "i", ")", "\n", "\n", "", "global_step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.dietnerf.config_generator.make_synthetic_scenes": [[31, 89], ["enumerate", "print", "print", "print", "print", "print", "commands.append", "open", "f.write"], "function", ["None"], ["def", "make_synthetic_scenes", "(", "start_id", ",", "max_train_views", "=", "-", "1", ",", "consistency_loss", "=", "False", ")", ":", "\n", "    ", "commands", "=", "[", "]", "\n", "for", "i", ",", "scene", "in", "enumerate", "(", "SYNTHETIC_SCENES", ")", ":", "\n", "        ", "expname", "=", "f\"{start_id + i}_blender_{scene.name}_{max_train_views}views\"", "\n", "if", "consistency_loss", ":", "\n", "            ", "expname", "+=", "\"_ctr\"", "\n", "\n", "", "config", "=", "f\"\"\"expname = {expname}\ndatadir = {scene.datadir}\n{base_synthetic_config}\n## Additional arguments\nmax_train_views = {max_train_views}\ni_log_raw_hist = 50\ni_video = 6250\nsave_splits = True\ncheckpoint_rendering = True\"\"\"", "\n", "\n", "if", "consistency_loss", ":", "\n", "            ", "config", "=", "f\"\"\"{config}\n## Computational options relevant for rendering\npixel_interp_mode = bilinear\nfeature_interp_mode = bilinear\ncheckpoint_rendering = True\ni_log_ctr_img = 10\n\n## Shared rendering loss options\nrender_loss_interval = 10\nrender_nH = 168\nrender_nW = 168\nrender_jitter_rays = True\nrender_poses = uniform\nrender_theta_range = [-180, 180]\nrender_phi_range = [-90, 0]\nrender_radius_range = [3.5, 4.5]\n\n## Consistency loss options\nconsistency_loss = consistent_with_target_rep\nconsistency_loss_lam = 0.1\nconsistency_loss_lam0 = 0.1\nconsistency_model_type = clip_vit\nconsistency_size = 224\nconsistency_loss_comparison = cosine_sim\"\"\"", "\n", "\n", "", "out_path", "=", "f'configs/{expname}.txt'", "\n", "print", "(", "\"==== WRITING TO\"", ",", "out_path", ")", "\n", "print", "(", "config", ")", "\n", "with", "open", "(", "out_path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "config", ")", "\n", "", "print", "(", "\"=============================\"", ")", "\n", "\n", "command", "=", "f\"CUDA_VISIBLE_DEVICES={i} python run_nerf.py --config {out_path} &\"", "\n", "commands", ".", "append", "(", "command", ")", "\n", "\n", "", "print", "(", "\"=========== COMMANDS\"", ")", "\n", "commands", "=", "'#!/bin/bash\\n'", "+", "'\\n'", ".", "join", "(", "commands", ")", "\n", "print", "(", "commands", ")", "\n", "# with open(f'scripts/{start_id}_run_synthetic_{max_train_views}views.sh')", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.scripts.bulk_shrink_images.alpha_composite": [[10, 37], ["numpy.asarray", "numpy.asarray", "numpy.empty", "numpy.seterr", "numpy.seterr", "numpy.clip", "Image.fromarray.astype", "PIL.Image.fromarray"], "function", ["None"], ["def", "alpha_composite", "(", "front", ",", "back", ")", ":", "\n", "    ", "\"\"\"Alpha composite two RGBA images.\n\n    Source: http://stackoverflow.com/a/9166671/284318\n\n    Keyword Arguments:\n    front -- PIL RGBA Image object\n    back -- PIL RGBA Image object\n\n    \"\"\"", "\n", "front", "=", "np", ".", "asarray", "(", "front", ")", "\n", "back", "=", "np", ".", "asarray", "(", "back", ")", "\n", "result", "=", "np", ".", "empty", "(", "front", ".", "shape", ",", "dtype", "=", "'float'", ")", "\n", "alpha", "=", "np", ".", "index_exp", "[", ":", ",", ":", ",", "3", ":", "]", "\n", "rgb", "=", "np", ".", "index_exp", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "falpha", "=", "front", "[", "alpha", "]", "/", "255.0", "\n", "balpha", "=", "back", "[", "alpha", "]", "/", "255.0", "\n", "result", "[", "alpha", "]", "=", "falpha", "+", "balpha", "*", "(", "1", "-", "falpha", ")", "\n", "old_setting", "=", "np", ".", "seterr", "(", "invalid", "=", "'ignore'", ")", "\n", "result", "[", "rgb", "]", "=", "(", "front", "[", "rgb", "]", "*", "falpha", "+", "back", "[", "rgb", "]", "*", "balpha", "*", "(", "1", "-", "falpha", ")", ")", "/", "result", "[", "alpha", "]", "\n", "np", ".", "seterr", "(", "**", "old_setting", ")", "\n", "result", "[", "alpha", "]", "*=", "255", "\n", "np", ".", "clip", "(", "result", ",", "0", ",", "255", ")", "\n", "# astype('uint8') maps np.nan and np.inf to 0", "\n", "result", "=", "result", ".", "astype", "(", "'uint8'", ")", "\n", "result", "=", "Image", ".", "fromarray", "(", "result", ",", "'RGBA'", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.scripts.bulk_shrink_images.alpha_composite_with_color": [[38, 49], ["PIL.Image.new", "bulk_shrink_images.alpha_composite", "numpy.np.uint8"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.scripts.bulk_shrink_images.alpha_composite"], ["", "def", "alpha_composite_with_color", "(", "image", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", ":", "\n", "    ", "\"\"\"Alpha composite an RGBA image with a single color image of the\n    specified color and the same size as the original image.\n\n    Keyword Arguments:\n    image -- PIL RGBA Image object\n    color -- Tuple r, g, b (default 255, 255, 255)\n\n    \"\"\"", "\n", "back", "=", "Image", ".", "new", "(", "'RGBA'", ",", "size", "=", "image", ".", "size", ",", "color", "=", "color", "+", "(", "255", ",", ")", ")", "\n", "return", "alpha_composite", "(", "image", ",", "back", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.scripts.bulk_shrink_images.shrink": [[50, 60], ["numpy.asarray().astype", "alpha_composite_with_color.astype", "PIL.Image.fromarray", "len", "bulk_shrink_images.alpha_composite_with_color", "numpy.asarray", "alpha_composite_with_color.getbands"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.scripts.bulk_shrink_images.alpha_composite_with_color"], ["", "def", "shrink", "(", "test_img", ")", ":", "\n", "    ", "test_img", "=", "np", ".", "asarray", "(", "test_img", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "# print(test_img.dtype, test_img.min(), test_img.max())", "\n", "test_img", "=", "(", "test_img", "[", ":", ":", "2", ",", ":", ":", "2", ",", ":", "]", "+", "test_img", "[", "1", ":", ":", "2", ",", ":", ":", "2", ",", ":", "]", "+", "test_img", "[", "1", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "+", "test_img", "[", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", ")", "/", "4", "\n", "# print(test_img.dtype, test_img.min(), test_img.max())", "\n", "test_img", "=", "test_img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "test_img", "=", "Image", ".", "fromarray", "(", "test_img", ")", "\n", "if", "len", "(", "test_img", ".", "getbands", "(", ")", ")", "!=", "3", ":", "\n", "        ", "test_img", "=", "alpha_composite_with_color", "(", "test_img", ")", "\n", "", "return", "test_img", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.scripts.bulk_shrink_images.do_resize": [[61, 85], ["os.makedirs", "ray.init", "glob.glob", "tqdm.tqdm", "ray.get", "os.path.exists", "print", "sys.exit", "path.replace", "os.path.join", "PIL.Image.open", "bulk_shrink_images.shrink", "shrink.save", "_resize.remote", "futures.append"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.scripts.bulk_shrink_images.shrink"], ["", "def", "do_resize", "(", "input_glob_pattern", ",", "output_directory", ",", "overwrite", "=", "False", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "output_directory", ")", "and", "not", "overwrite", ":", "\n", "        ", "print", "(", "\"Output directory\"", ",", "output_directory", ",", "\"already exists. Exiting.\"", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "output_directory", ",", "exist_ok", "=", "overwrite", ")", "\n", "\n", "ray", ".", "init", "(", "num_cpus", "=", "16", ")", "\n", "\n", "@", "ray", ".", "remote", "\n", "def", "_resize", "(", "path", ")", ":", "\n", "        ", "out_path", "=", "path", ".", "replace", "(", "\"/\"", ",", "\"-\"", ")", "\n", "out_path", "=", "os", ".", "path", ".", "join", "(", "output_directory", ",", "out_path", ")", "\n", "img", "=", "Image", ".", "open", "(", "path", ")", "\n", "img_small", "=", "shrink", "(", "img", ")", "\n", "img_small", ".", "save", "(", "out_path", ")", "\n", "\n", "", "input_paths", "=", "glob", ".", "glob", "(", "input_glob_pattern", ")", "\n", "futures", "=", "[", "]", "\n", "for", "path", "in", "tqdm", ".", "tqdm", "(", "input_paths", ")", ":", "\n", "        ", "if", "\"normal\"", "not", "in", "path", "and", "\"depth\"", "not", "in", "path", ":", "\n", "            ", "f", "=", "_resize", ".", "remote", "(", "path", ")", "\n", "futures", ".", "append", "(", "f", ")", "\n", "", "", "ray", ".", "get", "(", "futures", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.CLIPEncoder.__init__": [[23, 26], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "clip_model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "clip_model", "=", "clip_model", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.CLIPEncoder.forward": [[27, 37], ["clip_utils.CLIPEncoder.clip_model.encode_text", "clip_utils.CLIPEncoder.clip_model.visual", "images_or_text.type.type.type", "clip_utils.CLIPEncoder.clip_model.visual.featurize"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.encode_text", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.VisualTransformer.featurize"], ["", "def", "forward", "(", "self", ",", "images_or_text", ",", "encode_image", "=", "True", ",", "num_layers", "=", "-", "1", ",", "featurize", "=", "True", ")", ":", "\n", "        ", "if", "encode_image", ":", "\n", "            ", "if", "featurize", ":", "\n", "                ", "images_or_text", "=", "images_or_text", ".", "type", "(", "self", ".", "clip_model", ".", "dtype", ")", "\n", "return", "self", ".", "clip_model", ".", "visual", ".", "featurize", "(", "images_or_text", ",", "num_layers", "=", "num_layers", ")", "\n", "\n", "", "assert", "num_layers", "==", "-", "1", "\n", "return", "self", ".", "clip_model", ".", "visual", "(", "images_or_text", ")", "\n", "\n", "", "return", "self", ".", "clip_model", ".", "encode_text", "(", "images_or_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.load_vit": [[39, 48], ["os.path.expanduser", "clip.load", "torch.nn.DataParallel.eval", "torch.nn.DataParallel", "torch.nn.DataParallel.eval", "clip_utils.CLIPEncoder"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.load"], ["", "", "def", "load_vit", "(", "name", "=", "\"ViT-B/32\"", ",", "jit", "=", "False", ",", "device", "=", "DEVICE", ",", "root", ":", "str", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/.cache/clip\"", ")", ")", ":", "\n", "    ", "global", "clip_model_vit", ",", "preprocess_vit", "\n", "if", "clip_model_vit", "is", "None", ":", "\n", "        ", "clip_model_vit", ",", "preprocess_vit", "=", "clip", ".", "load", "(", "name", ",", "device", "=", "device", ",", "jit", "=", "jit", ",", "root", "=", "root", ")", "# jit=True doesn't seem to work with autodiff", "\n", "clip_model_vit", ".", "eval", "(", ")", "\n", "clip_model_vit", "=", "torch", ".", "nn", ".", "DataParallel", "(", "CLIPEncoder", "(", "clip_model_vit", ")", ")", "\n", "# clip_model_vit = CLIPEncoder(clip_model_vit)", "\n", "clip_model_vit", ".", "eval", "(", ")", "\n", "", "return", "clip_model_vit", ",", "preprocess_vit", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.load_rn": [[50, 59], ["os.path.expanduser", "clip.load", "torch.nn.DataParallel.eval", "torch.nn.DataParallel", "torch.nn.DataParallel.eval", "clip_utils.CLIPEncoder"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.load"], ["", "def", "load_rn", "(", "name", "=", "'RN50'", ",", "jit", "=", "False", ",", "device", "=", "DEVICE", ",", "root", ":", "str", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/.cache/clip\"", ")", ")", ":", "\n", "    ", "global", "clip_model_rn", ",", "preprocess_rn", "\n", "if", "clip_model_rn", "is", "None", ":", "\n", "        ", "clip_model_rn", ",", "preprocess_rn", "=", "clip", ".", "load", "(", "name", ",", "device", "=", "device", ",", "jit", "=", "jit", ",", "root", "=", "root", ")", "\n", "clip_model_rn", ".", "eval", "(", ")", "\n", "clip_model_rn", "=", "torch", ".", "nn", ".", "DataParallel", "(", "CLIPEncoder", "(", "clip_model_rn", ")", ")", "\n", "# clip_model_rn = CLIPEncoder(clip_model_rn)", "\n", "clip_model_rn", ".", "eval", "(", ")", "\n", "", "return", "clip_model_rn", ",", "preprocess_rn", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.embed_text": [[61, 69], ["torch.no_grad", "isinstance", "clip.tokenize().to", "clip_model_vit", "clip_model_rn", "torch.cat", "clip.tokenize"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.tokenize"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "embed_text", "(", "text", ":", "str", ")", ":", "\n", "# Embed text", "\n", "    ", "assert", "isinstance", "(", "text", ",", "str", ")", "\n", "text", "=", "clip", ".", "tokenize", "(", "text", ")", ".", "to", "(", "DEVICE", ")", "\n", "text_features_vit", "=", "clip_model_vit", "(", "text", ",", "encode_image", "=", "False", ")", "# [1, 512]", "\n", "text_features_rn", "=", "clip_model_rn", "(", "text", ",", "encode_image", "=", "False", ")", "# [1, 512]", "\n", "return", "torch", ".", "cat", "(", "[", "text_features_vit", ",", "text_features_rn", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.rgba_to_rgb": [[71, 74], ["torch.ones"], "function", ["None"], ["", "def", "rgba_to_rgb", "(", "rgba_image", ")", ":", "\n", "# TODO: Try just taking the first 3 channels", "\n", "    ", "return", "rgba_image", "[", ":", ",", ":", ",", "3", ":", "4", "]", "*", "rgba_image", "[", ":", ",", ":", ",", ":", "3", "]", "+", "torch", ".", "ones", "(", "rgba_image", ".", "shape", "[", "0", "]", ",", "rgba_image", ".", "shape", "[", "1", "]", ",", "3", ",", "device", "=", "DEVICE", ")", "*", "(", "1", "-", "rgba_image", "[", ":", ",", ":", ",", "3", ":", "4", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.embed_image": [[83, 97], ["clip_utils.rgba_to_rgb", "CLIP_NORMALIZE.permute().unsqueeze", "CLIP_NORMALIZE", "torch.cat", "CLIP_NORMALIZE.to", "features.append", "features.append", "CLIP_NORMALIZE.permute", "clip_model_vit", "clip_model_rn"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.rgba_to_rgb"], ["", "def", "embed_image", "(", "image", ")", ":", "\n", "# Convert and normalize image", "\n", "    ", "image", "=", "rgba_to_rgb", "(", "image", ")", "\n", "assert", "image", ".", "shape", "[", "0", "]", "==", "224", "and", "image", ".", "shape", "[", "1", "]", "==", "224", "\n", "image", "=", "image", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "# [224, 224, 3] to [1, 3, 224, 224]", "\n", "image", "=", "CLIP_NORMALIZE", "(", "image", ".", "to", "(", "DEVICE", ")", ")", "\n", "\n", "# Embed", "\n", "features", "=", "[", "]", "\n", "if", "clip_model_vit", "is", "not", "None", ":", "\n", "        ", "features", ".", "append", "(", "clip_model_vit", "(", "image", ")", ")", "# [1, 512]", "\n", "", "if", "clip_model_rn", "is", "not", "None", ":", "\n", "        ", "features", ".", "append", "(", "clip_model_rn", "(", "image", ")", ")", "# [1, 512]", "\n", "", "return", "torch", ".", "cat", "(", "features", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.CLIP.clip_utils.plot_losses": [[99, 106], ["matplotlib.figure", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "matplotlib.savefig", "os.path.join", "os.path.join", "numpy.array"], "function", ["None"], ["", "def", "plot_losses", "(", "losses", ",", "dir", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "-", "np", ".", "array", "(", "losses", ")", ")", "\n", "plt", ".", "xlabel", "(", "'Iteration'", ")", "\n", "plt", ".", "ylabel", "(", "'Cosine similarity'", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'cosine_sim.pdf'", ")", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'cosine_sim.png'", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.SimpleTokenizer.__init__": [[63, 79], ["simple_tokenizer.default_bpe", "simple_tokenizer.bytes_to_unicode", "gzip.open().read().decode().split", "list", "list.extend", "dict", "dict", "regex.compile", "tuple", "bytes_to_unicode().values", "list.append", "zip", "zip", "simple_tokenizer.SimpleTokenizer.byte_encoder.items", "gzip.open().read().decode", "merge.split", "range", "simple_tokenizer.SimpleTokenizer.encoder.items", "range", "simple_tokenizer.bytes_to_unicode", "len", "len", "gzip.open().read", "gzip.open"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.default_bpe", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.bytes_to_unicode", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.SimpleTokenizer.decode", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.bytes_to_unicode"], ["    ", "def", "__init__", "(", "self", ",", "bpe_path", ":", "str", "=", "default_bpe", "(", ")", ")", ":", "\n", "        ", "self", ".", "byte_encoder", "=", "bytes_to_unicode", "(", ")", "\n", "self", ".", "byte_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "byte_encoder", ".", "items", "(", ")", "}", "\n", "merges", "=", "gzip", ".", "open", "(", "bpe_path", ")", ".", "read", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", ".", "split", "(", "'\\n'", ")", "\n", "merges", "=", "merges", "[", "1", ":", "49152", "-", "256", "-", "2", "+", "1", "]", "\n", "merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", ")", "for", "merge", "in", "merges", "]", "\n", "vocab", "=", "list", "(", "bytes_to_unicode", "(", ")", ".", "values", "(", ")", ")", "\n", "vocab", "=", "vocab", "+", "[", "v", "+", "'</w>'", "for", "v", "in", "vocab", "]", "\n", "for", "merge", "in", "merges", ":", "\n", "            ", "vocab", ".", "append", "(", "''", ".", "join", "(", "merge", ")", ")", "\n", "", "vocab", ".", "extend", "(", "[", "'<|startoftext|>'", ",", "'<|endoftext|>'", "]", ")", "\n", "self", ".", "encoder", "=", "dict", "(", "zip", "(", "vocab", ",", "range", "(", "len", "(", "vocab", ")", ")", ")", ")", "\n", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "merges", ",", "range", "(", "len", "(", "merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "'<|startoftext|>'", ":", "'<|startoftext|>'", ",", "'<|endoftext|>'", ":", "'<|endoftext|>'", "}", "\n", "self", ".", "pat", "=", "re", ".", "compile", "(", "r\"\"\"<\\|startoftext\\|>|<\\|endoftext\\|>|'s|'t|'re|'ve|'m|'ll|'d|[\\p{L}]+|[\\p{N}]|[^\\s\\p{L}\\p{N}]+\"\"\"", ",", "re", ".", "IGNORECASE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.SimpleTokenizer.bpe": [[80, 120], ["simple_tokenizer.get_pairs", "tuple", "min", "tuple", "len", "len", "simple_tokenizer.get_pairs", "word.index", "tuple.extend", "tuple.append", "tuple.append", "simple_tokenizer.SimpleTokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.get_pairs", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.get_pairs"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "word", "=", "tuple", "(", "token", "[", ":", "-", "1", "]", ")", "+", "(", "token", "[", "-", "1", "]", "+", "'</w>'", ",", ")", "\n", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "+", "'</w>'", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.SimpleTokenizer.encode": [[121, 128], ["whitespace_clean().lower", "regex.findall", "bpe_tokens.extend", "simple_tokenizer.whitespace_clean", "simple_tokenizer.basic_clean", "token.encode", "simple_tokenizer.SimpleTokenizer.bpe().split", "simple_tokenizer.SimpleTokenizer.bpe"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.whitespace_clean", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.basic_clean", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.SimpleTokenizer.encode", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.SimpleTokenizer.bpe"], ["", "def", "encode", "(", "self", ",", "text", ")", ":", "\n", "        ", "bpe_tokens", "=", "[", "]", "\n", "text", "=", "whitespace_clean", "(", "basic_clean", "(", "text", ")", ")", ".", "lower", "(", ")", "\n", "for", "token", "in", "re", ".", "findall", "(", "self", ".", "pat", ",", "text", ")", ":", "\n", "            ", "token", "=", "''", ".", "join", "(", "self", ".", "byte_encoder", "[", "b", "]", "for", "b", "in", "token", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "bpe_tokens", ".", "extend", "(", "self", ".", "encoder", "[", "bpe_token", "]", "for", "bpe_token", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "return", "bpe_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.SimpleTokenizer.decode": [[129, 133], ["bytearray().decode().replace", "bytearray().decode", "bytearray"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.SimpleTokenizer.decode"], ["", "def", "decode", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "text", "=", "''", ".", "join", "(", "[", "self", ".", "decoder", "[", "token", "]", "for", "token", "in", "tokens", "]", ")", "\n", "text", "=", "bytearray", "(", "[", "self", ".", "byte_decoder", "[", "c", "]", "for", "c", "in", "text", "]", ")", ".", "decode", "(", "'utf-8'", ",", "errors", "=", "\"replace\"", ")", ".", "replace", "(", "'</w>'", ",", "' '", ")", "\n", "return", "text", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.default_bpe": [[10, 13], ["functools.lru_cache", "os.path.join", "os.path.dirname", "os.path.abspath"], "function", ["None"], ["@", "lru_cache", "(", ")", "\n", "def", "default_bpe", "(", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "\"bpe_simple_vocab_16e6.txt.gz\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.bytes_to_unicode": [[15, 36], ["functools.lru_cache", "range", "dict", "list", "chr", "zip", "list", "list", "range", "bs.append", "cs.append", "range", "range", "ord", "ord", "ord", "ord", "ord", "ord"], "function", ["None"], ["", "@", "lru_cache", "(", ")", "\n", "def", "bytes_to_unicode", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns list of utf-8 byte and a corresponding list of unicode strings.\n    The reversible bpe codes work on unicode strings.\n    This means you need a large # of unicode characters in your vocab if you want to avoid UNKs.\n    When you're at something like a 10B token dataset you end up needing around 5K for decent coverage.\n    This is a signficant percentage of your normal, say, 32K bpe vocab.\n    To avoid that, we want lookup tables between utf-8 bytes and unicode strings.\n    And avoids mapping to whitespace/control characters the bpe code barfs on.\n    \"\"\"", "\n", "bs", "=", "list", "(", "range", "(", "ord", "(", "\"!\"", ")", ",", "ord", "(", "\"~\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00a1\"", ")", ",", "ord", "(", "\"\u00ac\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00ae\"", ")", ",", "ord", "(", "\"\u00ff\"", ")", "+", "1", ")", ")", "\n", "cs", "=", "bs", "[", ":", "]", "\n", "n", "=", "0", "\n", "for", "b", "in", "range", "(", "2", "**", "8", ")", ":", "\n", "        ", "if", "b", "not", "in", "bs", ":", "\n", "            ", "bs", ".", "append", "(", "b", ")", "\n", "cs", ".", "append", "(", "2", "**", "8", "+", "n", ")", "\n", "n", "+=", "1", "\n", "", "", "cs", "=", "[", "chr", "(", "n", ")", "for", "n", "in", "cs", "]", "\n", "return", "dict", "(", "zip", "(", "bs", ",", "cs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.get_pairs": [[38, 48], ["set", "set.add"], "function", ["None"], ["", "def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"Return set of symbol pairs in a word.\n    Word is represented as tuple of symbols (symbols being variable-length strings).\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.basic_clean": [[50, 54], ["ftfy.fix_text", "html.unescape", "html.unescape.strip", "html.unescape"], "function", ["None"], ["", "def", "basic_clean", "(", "text", ")", ":", "\n", "    ", "text", "=", "ftfy", ".", "fix_text", "(", "text", ")", "\n", "text", "=", "html", ".", "unescape", "(", "html", ".", "unescape", "(", "text", ")", ")", "\n", "return", "text", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.whitespace_clean": [[56, 60], ["regex.sub", "text.strip.strip"], "function", ["None"], ["", "def", "whitespace_clean", "(", "text", ")", ":", "\n", "    ", "text", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "text", ")", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip._download": [[28, 58], ["os.makedirs", "os.path.basename", "os.path.join", "os.path.isfile", "url.split", "os.path.exists", "RuntimeError", "urllib.request.urlopen", "open", "hashlib.sha256().hexdigest", "RuntimeError", "os.path.isfile", "hashlib.sha256().hexdigest", "warnings.warn", "tqdm.tqdm", "source.read", "output.write", "loop.update", "hashlib.sha256", "hashlib.sha256", "int", "len", "open().read", "open().read", "source.info().get", "open", "open", "source.info"], "function", ["None"], ["def", "_download", "(", "url", ":", "str", ",", "root", ":", "str", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "root", ",", "exist_ok", "=", "True", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "url", ")", "\n", "\n", "expected_sha256", "=", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "download_target", "=", "os", ".", "path", ".", "join", "(", "root", ",", "filename", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "download_target", ")", "and", "not", "os", ".", "path", ".", "isfile", "(", "download_target", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"{download_target} exists and is not a regular file\"", ")", "\n", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "download_target", ")", ":", "\n", "        ", "if", "hashlib", ".", "sha256", "(", "open", "(", "download_target", ",", "\"rb\"", ")", ".", "read", "(", ")", ")", ".", "hexdigest", "(", ")", "==", "expected_sha256", ":", "\n", "            ", "return", "download_target", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "f\"{download_target} exists, but the SHA256 checksum does not match; re-downloading the file\"", ")", "\n", "\n", "", "", "with", "urllib", ".", "request", ".", "urlopen", "(", "url", ")", "as", "source", ",", "open", "(", "download_target", ",", "\"wb\"", ")", "as", "output", ":", "\n", "        ", "with", "tqdm", "(", "total", "=", "int", "(", "source", ".", "info", "(", ")", ".", "get", "(", "\"Content-Length\"", ")", ")", ",", "ncols", "=", "80", ",", "unit", "=", "'iB'", ",", "unit_scale", "=", "True", ")", "as", "loop", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "buffer", "=", "source", ".", "read", "(", "8192", ")", "\n", "if", "not", "buffer", ":", "\n", "                    ", "break", "\n", "\n", "", "output", ".", "write", "(", "buffer", ")", "\n", "loop", ".", "update", "(", "len", "(", "buffer", ")", ")", "\n", "\n", "", "", "", "if", "hashlib", ".", "sha256", "(", "open", "(", "download_target", ",", "\"rb\"", ")", ".", "read", "(", ")", ")", ".", "hexdigest", "(", ")", "!=", "expected_sha256", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"Model has been downloaded but the SHA256 checksum does not not match\"", ")", "\n", "\n", "", "return", "download_target", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip._transform": [[60, 67], ["torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "image.convert"], "function", ["None"], ["", "def", "_transform", "(", "n_px", ")", ":", "\n", "    ", "return", "Compose", "(", "[", "\n", "Resize", "(", "n_px", ",", "interpolation", "=", "Image", ".", "BICUBIC", ")", ",", "\n", "CenterCrop", "(", "n_px", ")", ",", "\n", "lambda", "image", ":", "image", ".", "convert", "(", "\"RGB\"", ")", ",", "\n", "ToTensor", "(", ")", ",", "\n", "Normalize", "(", "(", "0.48145466", ",", "0.4578275", ",", "0.40821073", ")", ",", "(", "0.26862954", ",", "0.26130258", ",", "0.27577711", ")", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.available_models": [[70, 73], ["list", "_MODELS.keys"], "function", ["None"], ["", "def", "available_models", "(", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"Returns the names of available CLIP models\"\"\"", "\n", "return", "list", "(", "_MODELS", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.load": [[75, 165], ["os.path.expanduser", "torch.jit.trace", "build_model().to.apply", "clip.load.patch_device"], "function", ["None"], ["", "def", "load", "(", "name", ":", "str", ",", "device", ":", "Union", "[", "str", ",", "torch", ".", "device", "]", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ",", "jit", "=", "True", ",", "\n", "root", ":", "str", "=", "os", ".", "path", ".", "expanduser", "(", "\"~/.cache/clip\"", ")", ")", ":", "\n", "    ", "\"\"\"Load a CLIP model\n\n    Parameters\n    ----------\n    name : str\n        A model name listed by `clip.available_models()`, or the path to a model checkpoint containing the state_dict\n\n    device : Union[str, torch.device]\n        The device to put the loaded model\n\n    jit : bool\n        Whether to load the optimized JIT model (default) or more hackable non-JIT model.\n\n    Returns\n    -------\n    model : torch.nn.Module\n        The CLIP model\n\n    preprocess : Callable[[PIL.Image], torch.Tensor]\n        A torchvision transform that converts a PIL image into a tensor that the returned model can take as its input\n    \"\"\"", "\n", "if", "name", "in", "_MODELS", ":", "\n", "        ", "model_path", "=", "_download", "(", "_MODELS", "[", "name", "]", ",", "root", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "name", ")", ":", "\n", "        ", "model_path", "=", "name", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "f\"Model {name} not found; available models = {available_models()}\"", ")", "\n", "\n", "", "try", ":", "\n", "# loading JIT archive", "\n", "        ", "model", "=", "torch", ".", "jit", ".", "load", "(", "model_path", ",", "map_location", "=", "device", "if", "jit", "else", "\"cpu\"", ")", ".", "eval", "(", ")", "\n", "state_dict", "=", "None", "\n", "", "except", "RuntimeError", ":", "\n", "# loading saved state dict", "\n", "        ", "if", "jit", ":", "\n", "            ", "warnings", ".", "warn", "(", "f\"File {model_path} is not a JIT archive. Loading as a state dict instead\"", ")", "\n", "jit", "=", "False", "\n", "", "state_dict", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "", "if", "not", "jit", ":", "\n", "        ", "model", "=", "build_model", "(", "state_dict", "or", "model", ".", "state_dict", "(", ")", ")", ".", "to", "(", "device", ")", "\n", "if", "str", "(", "device", ")", "==", "\"cpu\"", ":", "\n", "            ", "model", ".", "float", "(", ")", "\n", "", "return", "model", ",", "_transform", "(", "model", ".", "visual", ".", "input_resolution", ")", "\n", "\n", "# patch the device names", "\n", "", "device_holder", "=", "torch", ".", "jit", ".", "trace", "(", "lambda", ":", "torch", ".", "ones", "(", "[", "]", ")", ".", "to", "(", "torch", ".", "device", "(", "device", ")", ")", ",", "example_inputs", "=", "[", "]", ")", "\n", "device_node", "=", "[", "n", "for", "n", "in", "device_holder", ".", "graph", ".", "findAllNodes", "(", "\"prim::Constant\"", ")", "if", "\"Device\"", "in", "repr", "(", "n", ")", "]", "[", "-", "1", "]", "\n", "\n", "def", "patch_device", "(", "module", ")", ":", "\n", "        ", "graphs", "=", "[", "module", ".", "graph", "]", "if", "hasattr", "(", "module", ",", "\"graph\"", ")", "else", "[", "]", "\n", "if", "hasattr", "(", "module", ",", "\"forward1\"", ")", ":", "\n", "            ", "graphs", ".", "append", "(", "module", ".", "forward1", ".", "graph", ")", "\n", "\n", "", "for", "graph", "in", "graphs", ":", "\n", "            ", "for", "node", "in", "graph", ".", "findAllNodes", "(", "\"prim::Constant\"", ")", ":", "\n", "                ", "if", "\"value\"", "in", "node", ".", "attributeNames", "(", ")", "and", "str", "(", "node", "[", "\"value\"", "]", ")", ".", "startswith", "(", "\"cuda\"", ")", ":", "\n", "                    ", "node", ".", "copyAttributes", "(", "device_node", ")", "\n", "\n", "", "", "", "", "model", ".", "apply", "(", "patch_device", ")", "\n", "patch_device", "(", "model", ".", "encode_image", ")", "\n", "patch_device", "(", "model", ".", "encode_text", ")", "\n", "\n", "# patch dtype to float32 on CPU", "\n", "if", "str", "(", "device", ")", "==", "\"cpu\"", ":", "\n", "        ", "float_holder", "=", "torch", ".", "jit", ".", "trace", "(", "lambda", ":", "torch", ".", "ones", "(", "[", "]", ")", ".", "float", "(", ")", ",", "example_inputs", "=", "[", "]", ")", "\n", "float_input", "=", "list", "(", "float_holder", ".", "graph", ".", "findNode", "(", "\"aten::to\"", ")", ".", "inputs", "(", ")", ")", "[", "1", "]", "\n", "float_node", "=", "float_input", ".", "node", "(", ")", "\n", "\n", "def", "patch_float", "(", "module", ")", ":", "\n", "            ", "graphs", "=", "[", "module", ".", "graph", "]", "if", "hasattr", "(", "module", ",", "\"graph\"", ")", "else", "[", "]", "\n", "if", "hasattr", "(", "module", ",", "\"forward1\"", ")", ":", "\n", "                ", "graphs", ".", "append", "(", "module", ".", "forward1", ".", "graph", ")", "\n", "\n", "", "for", "graph", "in", "graphs", ":", "\n", "                ", "for", "node", "in", "graph", ".", "findAllNodes", "(", "\"aten::to\"", ")", ":", "\n", "                    ", "inputs", "=", "list", "(", "node", ".", "inputs", "(", ")", ")", "\n", "for", "i", "in", "[", "1", ",", "2", "]", ":", "# dtype can be the second or third argument to aten::to()", "\n", "                        ", "if", "inputs", "[", "i", "]", ".", "node", "(", ")", "[", "\"value\"", "]", "==", "5", ":", "\n", "                            ", "inputs", "[", "i", "]", ".", "node", "(", ")", ".", "copyAttributes", "(", "float_node", ")", "\n", "\n", "", "", "", "", "", "model", ".", "apply", "(", "patch_float", ")", "\n", "patch_float", "(", "model", ".", "encode_image", ")", "\n", "patch_float", "(", "model", ".", "encode_text", ")", "\n", "\n", "model", ".", "float", "(", ")", "\n", "\n", "", "return", "model", ",", "_transform", "(", "model", ".", "input_resolution", ".", "item", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.tokenize": [[167, 197], ["isinstance", "torch.zeros", "enumerate", "len", "torch.tensor", "len", "RuntimeError", "_tokenizer.encode", "len"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.simple_tokenizer.SimpleTokenizer.encode"], ["", "def", "tokenize", "(", "texts", ":", "Union", "[", "str", ",", "List", "[", "str", "]", "]", ",", "context_length", ":", "int", "=", "77", ")", "->", "torch", ".", "LongTensor", ":", "\n", "    ", "\"\"\"\n    Returns the tokenized representation of given input string(s)\n\n    Parameters\n    ----------\n    texts : Union[str, List[str]]\n        An input string or a list of input strings to tokenize\n\n    context_length : int\n        The context length to use; all CLIP models use 77 as the context length\n\n    Returns\n    -------\n    A two-dimensional tensor containing the resulting tokens, shape = [number of input strings, context_length]\n    \"\"\"", "\n", "if", "isinstance", "(", "texts", ",", "str", ")", ":", "\n", "        ", "texts", "=", "[", "texts", "]", "\n", "\n", "", "sot_token", "=", "_tokenizer", ".", "encoder", "[", "\"<|startoftext|>\"", "]", "\n", "eot_token", "=", "_tokenizer", ".", "encoder", "[", "\"<|endoftext|>\"", "]", "\n", "all_tokens", "=", "[", "[", "sot_token", "]", "+", "_tokenizer", ".", "encode", "(", "text", ")", "+", "[", "eot_token", "]", "for", "text", "in", "texts", "]", "\n", "result", "=", "torch", ".", "zeros", "(", "len", "(", "all_tokens", ")", ",", "context_length", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "for", "i", ",", "tokens", "in", "enumerate", "(", "all_tokens", ")", ":", "\n", "        ", "if", "len", "(", "tokens", ")", ">", "context_length", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"Input {texts[i]} is too long for context length {context_length}\"", ")", "\n", "", "result", "[", "i", ",", ":", "len", "(", "tokens", ")", "]", "=", "torch", ".", "tensor", "(", "tokens", ")", "\n", "\n", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.Bottleneck.__init__": [[12, 37], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Identity", "torch.nn.Identity", "torch.nn.Sequential", "torch.nn.Sequential", "collections.OrderedDict", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# all conv layers have stride 1. an avgpool is performed after the second convolution when stride > 1", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "stride", ")", "if", "stride", ">", "1", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "None", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "if", "stride", ">", "1", "or", "inplanes", "!=", "planes", "*", "Bottleneck", ".", "expansion", ":", "\n", "# downsampling layer is prepended with an avgpool, and the subsequent convolution has stride 1", "\n", "            ", "self", ".", "downsample", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"-1\"", ",", "nn", ".", "AvgPool2d", "(", "stride", ")", ")", ",", "\n", "(", "\"0\"", ",", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", "*", "self", ".", "expansion", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "(", "\"1\"", ",", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", ")", "\n", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.Bottleneck.forward": [[39, 53], ["model.Bottleneck.relu", "model.Bottleneck.relu", "model.Bottleneck.avgpool", "model.Bottleneck.bn3", "model.Bottleneck.relu", "model.Bottleneck.bn1", "model.Bottleneck.bn2", "model.Bottleneck.conv3", "model.Bottleneck.downsample", "model.Bottleneck.conv1", "model.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.AttentionPool2d.__init__": [[56, 64], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "spacial_dim", ":", "int", ",", "embed_dim", ":", "int", ",", "num_heads", ":", "int", ",", "output_dim", ":", "int", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "spacial_dim", "**", "2", "+", "1", ",", "embed_dim", ")", "/", "embed_dim", "**", "0.5", ")", "\n", "self", ".", "k_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "q_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "v_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "c_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "output_dim", "or", "embed_dim", ")", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.AttentionPool2d.forward": [[65, 90], ["torch.cat.reshape().permute", "torch.cat.reshape().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.multi_head_attention_forward", "torch.multi_head_attention_forward", "model.AttentionPool2d.positional_embedding[].to", "torch.cat.reshape", "torch.cat.reshape", "torch.cat.mean", "torch.cat.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", "*", "x", ".", "shape", "[", "3", "]", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "# NCHW -> (HW)NC", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ".", "mean", "(", "dim", "=", "0", ",", "keepdim", "=", "True", ")", ",", "x", "]", ",", "dim", "=", "0", ")", "# (HW+1)NC", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", "[", ":", ",", "None", ",", ":", "]", ".", "to", "(", "x", ".", "dtype", ")", "# (HW+1)NC", "\n", "x", ",", "_", "=", "F", ".", "multi_head_attention_forward", "(", "\n", "query", "=", "x", ",", "key", "=", "x", ",", "value", "=", "x", ",", "\n", "embed_dim_to_check", "=", "x", ".", "shape", "[", "-", "1", "]", ",", "\n", "num_heads", "=", "self", ".", "num_heads", ",", "\n", "q_proj_weight", "=", "self", ".", "q_proj", ".", "weight", ",", "\n", "k_proj_weight", "=", "self", ".", "k_proj", ".", "weight", ",", "\n", "v_proj_weight", "=", "self", ".", "v_proj", ".", "weight", ",", "\n", "in_proj_weight", "=", "None", ",", "\n", "in_proj_bias", "=", "torch", ".", "cat", "(", "[", "self", ".", "q_proj", ".", "bias", ",", "self", ".", "k_proj", ".", "bias", ",", "self", ".", "v_proj", ".", "bias", "]", ")", ",", "\n", "bias_k", "=", "None", ",", "\n", "bias_v", "=", "None", ",", "\n", "add_zero_attn", "=", "False", ",", "\n", "dropout_p", "=", "0", ",", "\n", "out_proj_weight", "=", "self", ".", "c_proj", ".", "weight", ",", "\n", "out_proj_bias", "=", "self", ".", "c_proj", ".", "bias", ",", "\n", "use_separate_proj_weight", "=", "True", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", "need_weights", "=", "False", "\n", ")", "\n", "\n", "return", "x", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.ModifiedResNet.__init__": [[100, 124], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.BatchNorm2d", "torch.nn.AvgPool2d", "torch.nn.AvgPool2d", "torch.nn.ReLU", "torch.nn.ReLU", "model.ModifiedResNet._make_layer", "model.ModifiedResNet._make_layer", "model.ModifiedResNet._make_layer", "model.ModifiedResNet._make_layer", "model.AttentionPool2d"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.__init__", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.ModifiedResNet._make_layer", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.ModifiedResNet._make_layer"], ["def", "__init__", "(", "self", ",", "layers", ",", "output_dim", ",", "heads", ",", "input_resolution", "=", "224", ",", "width", "=", "64", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "\n", "# the 3-layer stem", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "width", "//", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "width", "//", "2", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "width", "//", "2", ",", "width", "//", "2", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "width", "//", "2", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", "//", "2", ",", "width", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "2", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "# residual layers", "\n", "self", ".", "_inplanes", "=", "width", "# this is a *mutable* variable used during construction", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "width", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "width", "*", "2", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "width", "*", "4", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "width", "*", "8", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "embed_dim", "=", "width", "*", "32", "# the ResNet feature dimension", "\n", "self", ".", "attnpool", "=", "AttentionPool2d", "(", "input_resolution", "//", "32", ",", "embed_dim", ",", "heads", ",", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.ModifiedResNet._make_layer": [[125, 133], ["range", "torch.nn.Sequential", "torch.nn.Sequential", "model.Bottleneck", "layers.append", "model.Bottleneck"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layers", "=", "[", "Bottleneck", "(", "self", ".", "_inplanes", ",", "planes", ",", "stride", ")", "]", "\n", "\n", "self", ".", "_inplanes", "=", "planes", "*", "Bottleneck", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "Bottleneck", "(", "self", ".", "_inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.ModifiedResNet.featurize": [[134, 147], ["model.ModifiedResNet.type", "model.ModifiedResNet.featurize.stem"], "methods", ["None"], ["", "def", "featurize", "(", "self", ",", "x", ",", "num_layers", ":", "int", "=", "-", "1", ")", ":", "\n", "        ", "assert", "num_layers", "==", "-", "1", "\n", "\n", "def", "stem", "(", "x", ")", ":", "\n", "            ", "for", "conv", ",", "bn", "in", "[", "(", "self", ".", "conv1", ",", "self", ".", "bn1", ")", ",", "(", "self", ".", "conv2", ",", "self", ".", "bn2", ")", ",", "(", "self", ".", "conv3", ",", "self", ".", "bn3", ")", "]", ":", "\n", "                ", "x", "=", "self", ".", "relu", "(", "bn", "(", "conv", "(", "x", ")", ")", ")", "\n", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "return", "x", "\n", "\n", "", "x", "=", "x", ".", "type", "(", "self", ".", "conv1", ".", "weight", ".", "dtype", ")", "\n", "x", "=", "stem", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.ModifiedResNet.forward": [[148, 157], ["model.ModifiedResNet.featurize", "model.ModifiedResNet.layer2", "model.ModifiedResNet.layer3", "model.ModifiedResNet.layer4", "model.ModifiedResNet.attnpool"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.VisualTransformer.featurize"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "featurize", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "attnpool", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.LayerNorm.forward": [[162, 166], ["super().forward", "super().forward.type", "x.type"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.forward"], ["def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "orig_type", "=", "x", ".", "dtype", "\n", "ret", "=", "super", "(", ")", ".", "forward", "(", "x", ".", "type", "(", "torch", ".", "float32", ")", ")", "\n", "return", "ret", ".", "type", "(", "orig_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.QuickGELU.forward": [[169, 171], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "x", "*", "torch", ".", "sigmoid", "(", "1.702", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.ResidualAttentionBlock.__init__": [[174, 186], ["torch.nn.Module.__init__", "torch.nn.MultiheadAttention", "torch.nn.MultiheadAttention", "model.LayerNorm", "torch.nn.Sequential", "torch.nn.Sequential", "model.LayerNorm", "collections.OrderedDict", "torch.nn.Linear", "torch.nn.Linear", "model.QuickGELU", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ":", "int", ",", "n_head", ":", "int", ",", "attn_mask", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "attn", "=", "nn", ".", "MultiheadAttention", "(", "d_model", ",", "n_head", ")", "\n", "self", ".", "ln_1", "=", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "\"c_fc\"", ",", "nn", ".", "Linear", "(", "d_model", ",", "d_model", "*", "4", ")", ")", ",", "\n", "(", "\"gelu\"", ",", "QuickGELU", "(", ")", ")", ",", "\n", "(", "\"c_proj\"", ",", "nn", ".", "Linear", "(", "d_model", "*", "4", ",", "d_model", ")", ")", "\n", "]", ")", ")", "\n", "self", ".", "ln_2", "=", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "attn_mask", "=", "attn_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.ResidualAttentionBlock.attention": [[187, 190], ["model.ResidualAttentionBlock.attn_mask.to", "model.ResidualAttentionBlock.attn"], "methods", ["None"], ["", "def", "attention", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "self", ".", "attn_mask", "=", "self", ".", "attn_mask", ".", "to", "(", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "if", "self", ".", "attn_mask", "is", "not", "None", "else", "None", "\n", "return", "self", ".", "attn", "(", "x", ",", "x", ",", "x", ",", "need_weights", "=", "False", ",", "attn_mask", "=", "self", ".", "attn_mask", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.ResidualAttentionBlock.forward": [[191, 195], ["model.ResidualAttentionBlock.attention", "model.ResidualAttentionBlock.mlp", "model.ResidualAttentionBlock.ln_1", "model.ResidualAttentionBlock.ln_2"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.ResidualAttentionBlock.attention"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "x", "=", "x", "+", "self", ".", "attention", "(", "self", ".", "ln_1", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "self", ".", "mlp", "(", "self", ".", "ln_2", "(", "x", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.Transformer.__init__": [[198, 203], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "model.ResidualAttentionBlock", "range"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "width", ":", "int", ",", "layers", ":", "int", ",", "heads", ":", "int", ",", "attn_mask", ":", "torch", ".", "Tensor", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "resblocks", "=", "nn", ".", "Sequential", "(", "*", "[", "ResidualAttentionBlock", "(", "width", ",", "heads", ",", "attn_mask", ")", "for", "_", "in", "range", "(", "layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.Transformer.forward": [[204, 206], ["model.Transformer.resblocks"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "self", ".", "resblocks", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.Transformer.forward_prefix": [[207, 212], ["range"], "methods", ["None"], ["", "def", "forward_prefix", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "num_layers", ":", "int", ")", ":", "\n", "        ", "assert", "num_layers", "<=", "self", ".", "layers", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "x", "=", "self", ".", "resblocks", "[", "i", "]", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.VisualTransformer.__init__": [[215, 230], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "model.LayerNorm", "model.Transformer", "model.LayerNorm", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_resolution", ":", "int", ",", "patch_size", ":", "int", ",", "width", ":", "int", ",", "layers", ":", "int", ",", "heads", ":", "int", ",", "output_dim", ":", "int", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_resolution", "=", "input_resolution", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "3", ",", "out_channels", "=", "width", ",", "kernel_size", "=", "patch_size", ",", "stride", "=", "patch_size", ",", "bias", "=", "False", ")", "\n", "\n", "scale", "=", "width", "**", "-", "0.5", "\n", "self", ".", "class_embedding", "=", "nn", ".", "Parameter", "(", "scale", "*", "torch", ".", "randn", "(", "width", ")", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "scale", "*", "torch", ".", "randn", "(", "(", "input_resolution", "//", "patch_size", ")", "**", "2", "+", "1", ",", "width", ")", ")", "\n", "self", ".", "ln_pre", "=", "LayerNorm", "(", "width", ")", "\n", "\n", "self", ".", "transformer", "=", "Transformer", "(", "width", ",", "layers", ",", "heads", ")", "\n", "\n", "self", ".", "ln_post", "=", "LayerNorm", "(", "width", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Parameter", "(", "scale", "*", "torch", ".", "randn", "(", "width", ",", "output_dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.VisualTransformer.featurize": [[231, 252], ["model.VisualTransformer.conv1", "model.VisualTransformer.reshape", "model.VisualTransformer.permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.VisualTransformer.ln_pre", "model.VisualTransformer.permute", "model.VisualTransformer.permute", "model.VisualTransformer.positional_embedding.to", "model.VisualTransformer.transformer", "model.VisualTransformer.transformer.forward_prefix", "model.VisualTransformer.class_embedding.to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.Transformer.forward_prefix"], ["", "def", "featurize", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "num_layers", ":", "int", "=", "-", "1", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "# shape = [*, width, grid, grid]", "\n", "x", "=", "x", ".", "reshape", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "# shape = [*, width, grid ** 2]", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# shape = [*, grid ** 2, width]", "\n", "x", "=", "torch", ".", "cat", "(", "[", "self", ".", "class_embedding", ".", "to", "(", "x", ".", "dtype", ")", "+", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "x", ".", "shape", "[", "-", "1", "]", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", ",", "x", "]", ",", "dim", "=", "1", ")", "# shape = [*, grid ** 2 + 1, width]", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", ".", "to", "(", "x", ".", "dtype", ")", "\n", "x", "=", "self", ".", "ln_pre", "(", "x", ")", "\n", "\n", "if", "num_layers", "==", "0", ":", "\n", "            ", "return", "x", "\n", "\n", "", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# NLD -> LND", "\n", "if", "num_layers", "<", "0", ":", "\n", "# Run all layers", "\n", "            ", "x", "=", "self", ".", "transformer", "(", "x", ")", "\n", "", "else", ":", "\n", "# Run a subset of the transformer layers", "\n", "            ", "x", "=", "self", ".", "transformer", ".", "forward_prefix", "(", "x", ",", "num_layers", ")", "\n", "", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# LND -> NLD", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.VisualTransformer.forward": [[253, 261], ["model.VisualTransformer.featurize", "model.VisualTransformer.ln_post"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.VisualTransformer.featurize"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "x", "=", "self", ".", "featurize", "(", "x", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "x", "=", "self", ".", "ln_post", "(", "x", ")", "\n", "\n", "if", "self", ".", "proj", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "@", "self", ".", "proj", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.__init__": [[264, 318], ["torch.nn.Module.__init__", "isinstance", "model.Transformer", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Parameter", "torch.nn.Parameter", "model.LayerNorm", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "model.CLIP.initialize_parameters", "model.ModifiedResNet", "model.VisualTransformer", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "model.CLIP.build_attention_mask"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.__init__", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.initialize_parameters", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.build_attention_mask"], ["    ", "def", "__init__", "(", "self", ",", "\n", "embed_dim", ":", "int", ",", "\n", "# vision", "\n", "image_resolution", ":", "int", ",", "\n", "vision_layers", ":", "Union", "[", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", ",", "int", "]", ",", "\n", "vision_width", ":", "int", ",", "\n", "vision_patch_size", ":", "int", ",", "\n", "# text", "\n", "context_length", ":", "int", ",", "\n", "vocab_size", ":", "int", ",", "\n", "transformer_width", ":", "int", ",", "\n", "transformer_heads", ":", "int", ",", "\n", "transformer_layers", ":", "int", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "context_length", "=", "context_length", "\n", "\n", "if", "isinstance", "(", "vision_layers", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "vision_heads", "=", "vision_width", "*", "32", "//", "64", "\n", "self", ".", "visual", "=", "ModifiedResNet", "(", "\n", "layers", "=", "vision_layers", ",", "\n", "output_dim", "=", "embed_dim", ",", "\n", "heads", "=", "vision_heads", ",", "\n", "input_resolution", "=", "image_resolution", ",", "\n", "width", "=", "vision_width", "\n", ")", "\n", "", "else", ":", "\n", "            ", "vision_heads", "=", "vision_width", "//", "64", "\n", "self", ".", "visual", "=", "VisualTransformer", "(", "\n", "input_resolution", "=", "image_resolution", ",", "\n", "patch_size", "=", "vision_patch_size", ",", "\n", "width", "=", "vision_width", ",", "\n", "layers", "=", "vision_layers", ",", "\n", "heads", "=", "vision_heads", ",", "\n", "output_dim", "=", "embed_dim", "\n", ")", "\n", "\n", "", "self", ".", "transformer", "=", "Transformer", "(", "\n", "width", "=", "transformer_width", ",", "\n", "layers", "=", "transformer_layers", ",", "\n", "heads", "=", "transformer_heads", ",", "\n", "attn_mask", "=", "self", ".", "build_attention_mask", "(", ")", "\n", ")", "\n", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "token_embedding", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "transformer_width", ")", "\n", "self", ".", "positional_embedding", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "self", ".", "context_length", ",", "transformer_width", ")", ")", "\n", "self", ".", "ln_final", "=", "LayerNorm", "(", "transformer_width", ")", "\n", "\n", "self", ".", "text_projection", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "transformer_width", ",", "embed_dim", ")", ")", "\n", "self", ".", "logit_scale", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "[", "]", ")", ")", "\n", "\n", "self", ".", "initialize_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.initialize_parameters": [[319, 347], ["torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "isinstance", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "torch.nn.init.normal_", "resnet_block.named_parameters", "name.endswith", "torch.nn.init.zeros_", "torch.nn.init.zeros_"], "methods", ["None"], ["", "def", "initialize_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "token_embedding", ".", "weight", ",", "std", "=", "0.02", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "positional_embedding", ",", "std", "=", "0.01", ")", "\n", "\n", "if", "isinstance", "(", "self", ".", "visual", ",", "ModifiedResNet", ")", ":", "\n", "            ", "if", "self", ".", "visual", ".", "attnpool", "is", "not", "None", ":", "\n", "                ", "std", "=", "self", ".", "visual", ".", "attnpool", ".", "c_proj", ".", "in_features", "**", "-", "0.5", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "q_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "k_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "v_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "visual", ".", "attnpool", ".", "c_proj", ".", "weight", ",", "std", "=", "std", ")", "\n", "\n", "", "for", "resnet_block", "in", "[", "self", ".", "visual", ".", "layer1", ",", "self", ".", "visual", ".", "layer2", ",", "self", ".", "visual", ".", "layer3", ",", "self", ".", "visual", ".", "layer4", "]", ":", "\n", "                ", "for", "name", ",", "param", "in", "resnet_block", ".", "named_parameters", "(", ")", ":", "\n", "                    ", "if", "name", ".", "endswith", "(", "\"bn3.weight\"", ")", ":", "\n", "                        ", "nn", ".", "init", ".", "zeros_", "(", "param", ")", "\n", "\n", "", "", "", "", "proj_std", "=", "(", "self", ".", "transformer", ".", "width", "**", "-", "0.5", ")", "*", "(", "(", "2", "*", "self", ".", "transformer", ".", "layers", ")", "**", "-", "0.5", ")", "\n", "attn_std", "=", "self", ".", "transformer", ".", "width", "**", "-", "0.5", "\n", "fc_std", "=", "(", "2", "*", "self", ".", "transformer", ".", "width", ")", "**", "-", "0.5", "\n", "for", "block", "in", "self", ".", "transformer", ".", "resblocks", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "block", ".", "attn", ".", "in_proj_weight", ",", "std", "=", "attn_std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "block", ".", "attn", ".", "out_proj", ".", "weight", ",", "std", "=", "proj_std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "block", ".", "mlp", ".", "c_fc", ".", "weight", ",", "std", "=", "fc_std", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "block", ".", "mlp", ".", "c_proj", ".", "weight", ",", "std", "=", "proj_std", ")", "\n", "\n", "", "if", "self", ".", "text_projection", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "self", ".", "text_projection", ",", "std", "=", "self", ".", "transformer", ".", "width", "**", "-", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.build_attention_mask": [[348, 355], ["torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty.fill_", "torch.empty.fill_", "torch.empty.triu_", "torch.empty.triu_", "float"], "methods", ["None"], ["", "", "def", "build_attention_mask", "(", "self", ")", ":", "\n", "# lazily create causal attention mask, with full attention between the vision tokens", "\n", "# pytorch uses additive attention mask; fill with -inf", "\n", "        ", "mask", "=", "torch", ".", "empty", "(", "self", ".", "context_length", ",", "self", ".", "context_length", ")", "\n", "mask", ".", "fill_", "(", "float", "(", "\"-inf\"", ")", ")", "\n", "mask", ".", "triu_", "(", "1", ")", "# zero out the lower diagonal", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.dtype": [[356, 359], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "visual", ".", "conv1", ".", "weight", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.encode_image": [[360, 362], ["model.CLIP.visual", "image.type"], "methods", ["None"], ["", "def", "encode_image", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "self", ".", "visual", "(", "image", ".", "type", "(", "self", ".", "dtype", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.encode_text": [[363, 377], ["model.CLIP.token_embedding().type", "model.CLIP.permute", "model.CLIP.transformer", "model.CLIP.permute", "model.CLIP.ln_final().type", "model.CLIP.positional_embedding.type", "model.CLIP.token_embedding", "model.CLIP.ln_final", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "text.argmax"], "methods", ["None"], ["", "def", "encode_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "x", "=", "self", ".", "token_embedding", "(", "text", ")", ".", "type", "(", "self", ".", "dtype", ")", "# [batch_size, n_ctx, d_model]", "\n", "\n", "x", "=", "x", "+", "self", ".", "positional_embedding", ".", "type", "(", "self", ".", "dtype", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# NLD -> LND", "\n", "x", "=", "self", ".", "transformer", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# LND -> NLD", "\n", "x", "=", "self", ".", "ln_final", "(", "x", ")", ".", "type", "(", "self", ".", "dtype", ")", "\n", "\n", "# x.shape = [batch_size, n_ctx, transformer.width]", "\n", "# take features from the eot embedding (eot_token is the highest number in each sequence)", "\n", "x", "=", "x", "[", "torch", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", ",", "text", ".", "argmax", "(", "dim", "=", "-", "1", ")", "]", "@", "self", ".", "text_projection", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.forward": [[378, 393], ["model.CLIP.encode_image", "model.CLIP.encode_text", "model.CLIP.logit_scale.exp", "model.CLIP.norm", "model.CLIP.norm", "model.CLIP.t", "model.CLIP.t"], "methods", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.encode_image", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.CLIP.encode_text"], ["", "def", "forward", "(", "self", ",", "image", ",", "text", ")", ":", "\n", "        ", "image_features", "=", "self", ".", "encode_image", "(", "image", ")", "\n", "text_features", "=", "self", ".", "encode_text", "(", "text", ")", "\n", "\n", "# normalized features", "\n", "image_features", "=", "image_features", "/", "image_features", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "text_features", "=", "text_features", "/", "text_features", ".", "norm", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# cosine similarity as logits", "\n", "logit_scale", "=", "self", ".", "logit_scale", ".", "exp", "(", ")", "\n", "logits_per_image", "=", "logit_scale", "*", "image_features", "@", "text_features", ".", "t", "(", ")", "\n", "logits_per_text", "=", "logit_scale", "*", "text_features", "@", "image_features", ".", "t", "(", ")", "\n", "\n", "# shape = [global_batch_size, global_batch_size]", "\n", "return", "logits_per_image", ",", "logits_per_text", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.convert_weights": [[395, 417], ["model.apply", "isinstance", "isinstance", "l.weight.data.half", "hasattr", "l.bias.data.half", "getattr", "getattr", "getattr.data.half", "getattr.data.half"], "function", ["None"], ["", "", "def", "convert_weights", "(", "model", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Convert applicable model parameters to fp16\"\"\"", "\n", "\n", "def", "_convert_weights_to_fp16", "(", "l", ")", ":", "\n", "        ", "if", "isinstance", "(", "l", ",", "(", "nn", ".", "Conv1d", ",", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "            ", "l", ".", "weight", ".", "data", "=", "l", ".", "weight", ".", "data", ".", "half", "(", ")", "\n", "if", "l", ".", "bias", "is", "not", "None", ":", "\n", "                ", "l", ".", "bias", ".", "data", "=", "l", ".", "bias", ".", "data", ".", "half", "(", ")", "\n", "\n", "", "", "if", "isinstance", "(", "l", ",", "nn", ".", "MultiheadAttention", ")", ":", "\n", "            ", "for", "attr", "in", "[", "*", "[", "f\"{s}_proj_weight\"", "for", "s", "in", "[", "\"in\"", ",", "\"q\"", ",", "\"k\"", ",", "\"v\"", "]", "]", ",", "\"in_proj_bias\"", ",", "\"bias_k\"", ",", "\"bias_v\"", "]", ":", "\n", "                ", "tensor", "=", "getattr", "(", "l", ",", "attr", ")", "\n", "if", "tensor", "is", "not", "None", ":", "\n", "                    ", "tensor", ".", "data", "=", "tensor", ".", "data", ".", "half", "(", ")", "\n", "\n", "", "", "", "for", "name", "in", "[", "\"text_projection\"", ",", "\"proj\"", "]", ":", "\n", "            ", "if", "hasattr", "(", "l", ",", "name", ")", ":", "\n", "                ", "attr", "=", "getattr", "(", "l", ",", "name", ")", "\n", "if", "attr", "is", "not", "None", ":", "\n", "                    ", "attr", ".", "data", "=", "attr", ".", "data", ".", "half", "(", ")", "\n", "\n", "", "", "", "", "model", ".", "apply", "(", "_convert_weights_to_fp16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.build_model": [[419, 458], ["print", "len", "model.CLIP", "model.convert_weights", "CLIP.load_state_dict", "CLIP.eval", "len", "round", "tuple", "round", "set", "len", "set", "state_dict.keys", "k.split", "k.startswith", "k.startswith", "k.endswith", "k.split", "k.startswith"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.model.convert_weights"], ["", "def", "build_model", "(", "state_dict", ":", "dict", ")", ":", "\n", "    ", "vit", "=", "\"visual.proj\"", "in", "state_dict", "\n", "\n", "if", "vit", ":", "\n", "        ", "vision_width", "=", "state_dict", "[", "\"visual.conv1.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "vision_layers", "=", "len", "(", "[", "k", "for", "k", "in", "state_dict", ".", "keys", "(", ")", "if", "k", ".", "startswith", "(", "\"visual.\"", ")", "and", "k", ".", "endswith", "(", "\".attn.in_proj_weight\"", ")", "]", ")", "\n", "vision_patch_size", "=", "state_dict", "[", "\"visual.conv1.weight\"", "]", ".", "shape", "[", "-", "1", "]", "\n", "grid_size", "=", "round", "(", "(", "state_dict", "[", "\"visual.positional_embedding\"", "]", ".", "shape", "[", "0", "]", "-", "1", ")", "**", "0.5", ")", "\n", "image_resolution", "=", "vision_patch_size", "*", "grid_size", "\n", "", "else", ":", "\n", "        ", "counts", ":", "list", "=", "[", "len", "(", "set", "(", "k", ".", "split", "(", "\".\"", ")", "[", "2", "]", "for", "k", "in", "state_dict", "if", "k", ".", "startswith", "(", "f\"visual.layer{b}\"", ")", ")", ")", "for", "b", "in", "[", "1", ",", "2", ",", "3", ",", "4", "]", "]", "\n", "vision_layers", "=", "tuple", "(", "counts", ")", "\n", "vision_width", "=", "state_dict", "[", "\"visual.layer1.0.conv1.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "output_width", "=", "round", "(", "(", "state_dict", "[", "\"visual.attnpool.positional_embedding\"", "]", ".", "shape", "[", "0", "]", "-", "1", ")", "**", "0.5", ")", "\n", "vision_patch_size", "=", "None", "\n", "assert", "output_width", "**", "2", "+", "1", "==", "state_dict", "[", "\"visual.attnpool.positional_embedding\"", "]", ".", "shape", "[", "0", "]", "\n", "image_resolution", "=", "output_width", "*", "32", "\n", "", "print", "(", "'number of CLIP vision layers'", ",", "vision_layers", ")", "\n", "\n", "embed_dim", "=", "state_dict", "[", "\"text_projection\"", "]", ".", "shape", "[", "1", "]", "\n", "context_length", "=", "state_dict", "[", "\"positional_embedding\"", "]", ".", "shape", "[", "0", "]", "\n", "vocab_size", "=", "state_dict", "[", "\"token_embedding.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "transformer_width", "=", "state_dict", "[", "\"ln_final.weight\"", "]", ".", "shape", "[", "0", "]", "\n", "transformer_heads", "=", "transformer_width", "//", "64", "\n", "transformer_layers", "=", "len", "(", "set", "(", "k", ".", "split", "(", "\".\"", ")", "[", "2", "]", "for", "k", "in", "state_dict", "if", "k", ".", "startswith", "(", "f\"transformer.resblocks\"", ")", ")", ")", "\n", "\n", "model", "=", "CLIP", "(", "\n", "embed_dim", ",", "\n", "image_resolution", ",", "vision_layers", ",", "vision_width", ",", "vision_patch_size", ",", "\n", "context_length", ",", "vocab_size", ",", "transformer_width", ",", "transformer_heads", ",", "transformer_layers", "\n", ")", "\n", "\n", "for", "key", "in", "[", "\"input_resolution\"", ",", "\"context_length\"", ",", "\"vocab_size\"", "]", ":", "\n", "        ", "if", "key", "in", "state_dict", ":", "\n", "            ", "del", "state_dict", "[", "key", "]", "\n", "\n", "", "", "convert_weights", "(", "model", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "return", "model", ".", "eval", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ajayjain_DietNeRF.tests.test_consistency.test_consistency": [[9, 26], ["pytest.mark.parametrize", "clip.load", "clip.load", "transform().unsqueeze().to", "clip.tokenize().to", "numpy.allclose", "clip.available_models", "torch.no_grad", "jit_model", "logits_per_image.softmax().cpu().numpy", "py_model", "logits_per_image.softmax().cpu().numpy", "transform().unsqueeze", "clip.tokenize", "logits_per_image.softmax().cpu", "logits_per_image.softmax().cpu", "transform", "PIL.Image.open", "logits_per_image.softmax", "logits_per_image.softmax"], "function", ["home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.load", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.load", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.available_models", "home.repos.pwc.inspect_result.ajayjain_DietNeRF.clip.clip.tokenize"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "'model_name'", ",", "clip", ".", "available_models", "(", ")", ")", "\n", "def", "test_consistency", "(", "model_name", ")", ":", "\n", "    ", "device", "=", "\"cpu\"", "\n", "jit_model", ",", "transform", "=", "clip", ".", "load", "(", "model_name", ",", "device", "=", "device", ")", "\n", "py_model", ",", "_", "=", "clip", ".", "load", "(", "model_name", ",", "device", "=", "device", ",", "jit", "=", "False", ")", "\n", "\n", "image", "=", "transform", "(", "Image", ".", "open", "(", "\"CLIP.png\"", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "text", "=", "clip", ".", "tokenize", "(", "[", "\"a diagram\"", ",", "\"a dog\"", ",", "\"a cat\"", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "logits_per_image", ",", "_", "=", "jit_model", "(", "image", ",", "text", ")", "\n", "jit_probs", "=", "logits_per_image", ".", "softmax", "(", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "logits_per_image", ",", "_", "=", "py_model", "(", "image", ",", "text", ")", "\n", "py_probs", "=", "logits_per_image", ".", "softmax", "(", "dim", "=", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "assert", "np", ".", "allclose", "(", "jit_probs", ",", "py_probs", ",", "atol", "=", "0.01", ",", "rtol", "=", "0.1", ")", "\n", "", ""]]}