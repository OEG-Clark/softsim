{"home.repos.pwc.inspect_result.toshas_tbasis.src.train_semseg.semseg_compute_confusion": [[25, 44], ["torch.bincount", "torch.bincount", "torch.bincount.view().long", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "y_hat_lbl.squeeze.squeeze", "y.squeeze.squeeze", "x.long", "torch.bincount.numel", "y_hat_lbl.squeeze.dim", "y.squeeze.dim", "torch.bincount.view"], "function", ["None"], ["def", "semseg_compute_confusion", "(", "y_hat_lbl", ",", "y", ",", "C", ",", "semseg_ignore_class", ")", ":", "\n", "    ", "assert", "torch", ".", "is_tensor", "(", "y_hat_lbl", ")", "and", "torch", ".", "is_tensor", "(", "y", ")", ",", "'Inputs must be torch tensors'", "\n", "assert", "y", ".", "device", "==", "y_hat_lbl", ".", "device", ",", "'Input tensors have different device placement'", "\n", "\n", "if", "y_hat_lbl", ".", "dim", "(", ")", "==", "4", "and", "y_hat_lbl", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "        ", "y_hat_lbl", "=", "y_hat_lbl", ".", "squeeze", "(", "1", ")", "\n", "", "if", "y", ".", "dim", "(", ")", "==", "4", "and", "y", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "        ", "y", "=", "y", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "mask", "=", "y", "!=", "semseg_ignore_class", "\n", "y_hat_lbl", "=", "y_hat_lbl", "[", "mask", "]", "\n", "y", "=", "y", "[", "mask", "]", "\n", "\n", "# hack for bincounting 2 arrays together", "\n", "x", "=", "y_hat_lbl", "+", "C", "*", "y", "\n", "bincount_2d", "=", "torch", ".", "bincount", "(", "x", ".", "long", "(", ")", ",", "minlength", "=", "C", "**", "2", ")", "\n", "assert", "bincount_2d", ".", "numel", "(", ")", "==", "C", "**", "2", ",", "'Internal error'", "\n", "conf", "=", "bincount_2d", ".", "view", "(", "(", "C", ",", "C", ")", ")", ".", "long", "(", ")", "\n", "return", "conf", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.src.train_semseg.semseg_accum_confusion_to_iou": [[46, 52], ["confusion_accum.double", "confusion_accum.double.diag", "iou_per_class.mean", "confusion_accum.double.sum", "confusion_accum.double.sum"], "function", ["None"], ["", "def", "semseg_accum_confusion_to_iou", "(", "confusion_accum", ")", ":", "\n", "    ", "conf", "=", "confusion_accum", ".", "double", "(", ")", "\n", "diag", "=", "conf", ".", "diag", "(", ")", "\n", "iou_per_class", "=", "diag", "/", "(", "conf", ".", "sum", "(", "dim", "=", "1", ")", "+", "conf", ".", "sum", "(", "dim", "=", "0", ")", "-", "diag", ")", ".", "clamp", "(", "min", "=", "1e-12", ")", "\n", "iou_mean", "=", "iou_per_class", ".", "mean", "(", ")", "\n", "return", "iou_mean", ",", "iou_per_class", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.src.train_semseg.visualize": [[54, 68], ["y_hat.argmax", "visualization_plan.append", "visualization_plan.append", "visualization_plan.append", "src.datasets.visualizations.compose", "tb.add_image"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.compose"], ["", "def", "visualize", "(", "tb", ",", "y_hat", ",", "rgb", ",", "rgb_tags", ",", "batch", ",", "dataset_train", ",", "cfg", ",", "step", ",", "tag", ")", ":", "\n", "    ", "y_hat_lbl", "=", "y_hat", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "visualization_plan", "=", "[", "]", "\n", "visualization_plan", ".", "append", "(", "(", "MOD_RGB", ",", "rgb", ",", "rgb_tags", ")", ")", "\n", "visualization_plan", ".", "append", "(", "(", "MOD_SS_DENSE", ",", "y_hat_lbl", ",", "'Prediction'", ")", ")", "\n", "visualization_plan", ".", "append", "(", "(", "MOD_SS_DENSE", ",", "batch", "[", "MOD_SS_DENSE", "]", ",", "'Ground truth'", ")", ")", "\n", "vis", "=", "compose", "(", "\n", "visualization_plan", ",", "cfg", ",", "\n", "rgb_mean", "=", "dataset_train", ".", "rgb_mean", ",", "\n", "rgb_stddev", "=", "dataset_train", ".", "rgb_stddev", ",", "\n", "semseg_color_map", "=", "dataset_train", ".", "semseg_class_colors", ",", "\n", "semseg_ignore_class", "=", "dataset_train", ".", "ignore_label", ",", "\n", ")", "\n", "tb", ".", "add_image", "(", "tag", ",", "vis", ",", "global_step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.src.train_semseg.main": [[70, 411], ["cfg.__dict__.get", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "src.utils.helpers.verify_experiment_integrity", "src.utils.resolvers.resolve_semseg_dataset", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "src.utils.resolvers.resolve_semseg_model", "src.datasets.transforms.get_transforms", "src.datasets.transforms.get_transforms", "dataset_train.set_transforms", "dataset_valid.set_transforms", "src.utils.helpers.PersistentRandomSampler", "src.utils.helpers.net_extract_modules_order", "print", "wandb.util.generate_id", "os.path.isfile", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "wandb.init", "wandb.tensorboard.patch", "time.monotonic", "iter", "print", "os.environ.get", "src.utils.tensorized_basis_modules_tr.TBasisWeightsFactory", "src.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy", "src.utils.tensorized_basis_modules_tr.TBasis", "src.utils.module_surgery.net_prepare_training", "print", "print", "tbasis.cuda.", "src.utils.helpers.silent_torch_jit_trace_module", "print", "model.cuda.cuda", "optimizers.append", "src.utils.resolvers.PolyWarmupLR", "torch.load", "torch.load", "model.cuda.load_state_dict", "enumerate", "src.utils.helpers.PersistentRandomSampler.load_state_dict", "src.utils.helpers.PersistentRandomSampler.fast_forward_to", "print", "print", "src.utils.helpers.SilentSummaryWriter", "torch.randn", "torch.randn", "torch.load", "torch.load", "torch.load.pop", "tbasis.cuda.load_state_dict", "src.utils.helpers.pretty_dict", "tbasis.cuda.cuda", "weights_factory.cuda.cuda", "tbasis.cuda.forward", "src.utils.helpers.silent_torch_jit_trace_module.forward", "src.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.set_tbasis_tensors", "src.utils.resolvers.resolve_optimizer", "model.cuda.parameters", "tbasis.cuda.load_state_dict", "weights_factory.cuda.load_state_dict", "zip", "o.load_state_dict", "l.load_state_dict", "print", "exit", "src.utils.helpers.tb_add_scalars", "next", "batch[].cuda", "batch[].cuda", "model.cuda.train", "train_semseg.main.forward_weights_factory"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.get", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.verify_experiment_integrity", "home.repos.pwc.inspect_result.toshas_tbasis.utils.resolvers.resolve_semseg_dataset", "home.repos.pwc.inspect_result.toshas_tbasis.utils.resolvers.resolve_semseg_model", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms.get_transforms", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms.get_transforms", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.set_transforms", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.set_transforms", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.net_extract_modules_order", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.get", "home.repos.pwc.inspect_result.toshas_tbasis.utils.module_surgery.net_prepare_training", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.silent_torch_jit_trace_module", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.fast_forward_to", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.pretty_dict", "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.forward", "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.forward", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.set_tbasis_tensors", "home.repos.pwc.inspect_result.toshas_tbasis.utils.resolvers.resolve_optimizer", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.tb_add_scalars"], ["", "def", "main", "(", "cfg", ")", ":", "\n", "    ", "assert", "cfg", ".", "experiment", "==", "'semseg'", "\n", "\n", "seed", "=", "cfg", ".", "__dict__", ".", "get", "(", "'random_seed'", ",", "2020", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "log_dir", "=", "cfg", ".", "log_dir", "\n", "tb_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'tb'", ")", "\n", "checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'checkpoints'", ")", "\n", "os", ".", "makedirs", "(", "tb_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "wandb_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "checkpoints_dir", ",", "exist_ok", "=", "True", ")", "\n", "checkpoint_path_latest", "=", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'checkpoint_latest.pth'", ")", "\n", "checkpoint_path_best", "=", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'checkpoint_best.pth'", ")", "\n", "is_cuda", "=", "os", ".", "environ", ".", "get", "(", "'CUDA_VISIBLE_DEVICES'", ",", "None", ")", "is", "not", "None", "\n", "\n", "# check the experiment is not resumed with different code and or settings", "\n", "verify_experiment_integrity", "(", "cfg", ")", "\n", "\n", "dataset_train", ",", "dataset_valid", "=", "resolve_semseg_dataset", "(", "cfg", ")", "\n", "\n", "semseg_ignore_class", "=", "dataset_train", ".", "ignore_label", "\n", "semseg_class_names", "=", "dataset_train", ".", "semseg_class_names", "\n", "semseg_num_classes", "=", "dataset_train", ".", "num_classes", "\n", "loss_fn", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "semseg_ignore_class", ")", "\n", "\n", "model", "=", "resolve_semseg_model", "(", "cfg", ",", "semseg_num_classes", ")", "\n", "\n", "transforms_train", "=", "get_transforms", "(", "\n", "semseg_ignore_class", "=", "semseg_ignore_class", ",", "\n", "geom_scale_min", "=", "cfg", ".", "aug_geom_scale_min", ",", "\n", "geom_scale_max", "=", "cfg", ".", "aug_geom_scale_max", ",", "\n", "geom_tilt_max_deg", "=", "cfg", ".", "aug_geom_tilt_max_deg", ",", "\n", "geom_wiggle_max_ratio", "=", "cfg", ".", "aug_geom_wiggle_max_ratio", ",", "\n", "geom_reflect", "=", "cfg", ".", "aug_geom_reflect", ",", "\n", "crop_random", "=", "cfg", ".", "aug_input_crop_size", ",", "\n", "rgb_zero_mean_status", "=", "True", ",", "\n", "rgb_mean", "=", "dataset_train", ".", "rgb_mean", ",", "\n", "rgb_stddev", "=", "dataset_train", ".", "rgb_stddev", ",", "\n", ")", "\n", "\n", "transforms_valid", "=", "get_transforms", "(", "\n", "semseg_ignore_class", "=", "semseg_ignore_class", ",", "\n", "crop_for_passable", "=", "model", ".", "bottleneck_stride", "if", "not", "cfg", ".", "aug_geom_validation_center_crop_sts", "else", "0", ",", "\n", "crop_center", "=", "cfg", ".", "aug_geom_validation_center_crop_size", "if", "cfg", ".", "aug_geom_validation_center_crop_sts", "else", "0", ",", "\n", "rgb_zero_mean_status", "=", "True", ",", "\n", "rgb_mean", "=", "dataset_train", ".", "rgb_mean", ",", "\n", "rgb_stddev", "=", "dataset_train", ".", "rgb_stddev", ",", "\n", ")", "\n", "\n", "dataset_train", ".", "set_transforms", "(", "transforms_train", ")", "\n", "dataset_valid", ".", "set_transforms", "(", "transforms_valid", ")", "\n", "\n", "persistent_random_sampler", "=", "PersistentRandomSampler", "(", "\n", "dataset_train", ",", "\n", "cfg", ".", "num_training_steps", "*", "cfg", ".", "batch_size", "\n", ")", "\n", "\n", "classes_interest", "=", "(", "torch", ".", "nn", ".", "Conv2d", ",", "torch", ".", "nn", ".", "Linear", ")", "\n", "modules_order", "=", "net_extract_modules_order", "(", "model", ",", "(", "torch", ".", "randn", "(", "2", ",", "3", ",", "256", ",", "256", ")", ",", ")", ",", "classes_interest", ")", "\n", "print", "(", "'Modules order:'", "+", "'\\n    '", ".", "join", "(", "[", "''", "]", "+", "modules_order", ")", ")", "\n", "\n", "weights_factory", ",", "weights_factory_proxy", ",", "weights_factory_jit", ",", "tbasis", ",", "compression_stats", "=", "(", "None", ",", ")", "*", "5", "\n", "if", "cfg", ".", "compressed", ":", "\n", "        ", "weights_factory", "=", "TBasisWeightsFactory", "(", "\n", "cfg", ".", "basis_size", ",", "\n", "cfg", ".", "basis_rank", ",", "\n", "cfg", ".", "rank_adaptation", ",", "\n", "forward_batch_size", "=", "1", ",", "\n", ")", "\n", "weights_factory_proxy", "=", "TBasisWeightsFactoryProxy", "(", "weights_factory", ")", "\n", "tbasis", "=", "TBasis", "(", "\n", "cfg", ".", "basis_size", ",", "cfg", ".", "basis_rank", ",", "cfg", ".", "basis_mode", ",", "cfg", ".", "basis_trainable_sts", ",", "cfg", ".", "basis_init_seed", ",", "\n", ")", "\n", "if", "cfg", ".", "basis_pretrained_path", "is", "not", "None", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "root_models", ",", "cfg", ".", "basis_pretrained_path", ")", ")", "\n", "state_dict", ".", "pop", "(", "'last_basis'", ",", "None", ")", "\n", "tbasis", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "compression_stats", "=", "net_prepare_training", "(", "model", ",", "tbasis", ",", "weights_factory_proxy", ",", "cfg", ")", "\n", "print", "(", "'Compression: '", ",", "pretty_dict", "(", "compression_stats", ")", ")", "\n", "print", "(", "'JIT weights_factory...'", ")", "\n", "basis", "=", "tbasis", "(", ")", "\n", "weights_factory_jit", "=", "silent_torch_jit_trace_module", "(", "weights_factory", ",", "{", "'forward'", ":", "(", "basis", ",", ")", "}", ")", "\n", "del", "tbasis", ".", "last_basis", "\n", "print", "(", "'JIT weights_factory done.'", ")", "\n", "\n", "", "if", "is_cuda", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "if", "cfg", ".", "compressed", ":", "\n", "            ", "tbasis", "=", "tbasis", ".", "cuda", "(", ")", "\n", "weights_factory", "=", "weights_factory", ".", "cuda", "(", ")", "\n", "\n", "", "", "def", "forward_weights_factory", "(", ")", ":", "\n", "        ", "if", "cfg", ".", "compressed", ":", "\n", "            ", "basis", "=", "tbasis", ".", "forward", "(", ")", "\n", "weights", "=", "weights_factory_jit", ".", "forward", "(", "basis", ")", "\n", "weights_factory_proxy", ".", "set_tbasis_tensors", "(", "weights", ")", "\n", "return", "weights", "\n", "", "return", "None", "\n", "\n", "", "optimizers", "=", "[", "\n", "resolve_optimizer", "(", "cfg", ".", "optimizer_model_name", ")", "(", "\n", "model", ".", "parameters", "(", ")", ",", "**", "cfg", ".", "optimizer_model_kwargs", "\n", ")", "\n", "]", "\n", "if", "cfg", ".", "compressed", ":", "\n", "        ", "optimizers", ".", "append", "(", "resolve_optimizer", "(", "cfg", ".", "optimizer_basis_name", ")", "(", "\n", "list", "(", "tbasis", ".", "parameters", "(", ")", ")", "+", "list", "(", "weights_factory", ".", "parameters", "(", ")", ")", ",", "\n", "**", "cfg", ".", "optimizer_basis_kwargs", "\n", ")", ")", "\n", "", "lr_schedulers", "=", "[", "\n", "PolyWarmupLR", "(", "\n", "opt", ",", "\n", "power", "=", "cfg", ".", "lr_scheduler_power", ",", "\n", "num_steps", "=", "cfg", ".", "num_training_steps", ",", "\n", "num_warmup_steps", "=", "cfg", ".", "lr_warmup_steps", "if", "cfg", ".", "lr_warmup_sts", "else", "0", ",", "\n", ")", "for", "opt", "in", "optimizers", "\n", "]", "\n", "\n", "step_loaded", "=", "0", "\n", "metric_best", "=", "0", "\n", "wandb_id", "=", "wandb", ".", "util", ".", "generate_id", "(", ")", "\n", "\n", "# load persistent state", "\n", "if", "os", ".", "path", ".", "isfile", "(", "checkpoint_path_latest", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "checkpoint_path_latest", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", "[", "'model'", "]", ")", "\n", "if", "cfg", ".", "compressed", ":", "\n", "            ", "tbasis", ".", "load_state_dict", "(", "state_dict", "[", "'tbasis'", "]", ")", "\n", "weights_factory", ".", "load_state_dict", "(", "state_dict", "[", "'weights_factory'", "]", ")", "\n", "", "for", "i", ",", "(", "o", ",", "l", ")", "in", "enumerate", "(", "zip", "(", "optimizers", ",", "lr_schedulers", ")", ")", ":", "\n", "            ", "o", ".", "load_state_dict", "(", "state_dict", "[", "f'optimizer_{i}'", "]", ")", "\n", "l", ".", "load_state_dict", "(", "state_dict", "[", "f'lr_scheduler_{i}'", "]", ")", "\n", "", "persistent_random_sampler", ".", "load_state_dict", "(", "state_dict", "[", "'persistent_random_sampler'", "]", ")", "\n", "step_loaded", "=", "state_dict", "[", "'step'", "]", "\n", "metric_best", "=", "state_dict", "[", "'metric_best'", "]", "\n", "persistent_random_sampler", ".", "fast_forward_to", "(", "step_loaded", "*", "cfg", ".", "batch_size", ")", "\n", "wandb_id", "=", "state_dict", "[", "'wandb_id'", "]", "\n", "if", "step_loaded", "==", "cfg", ".", "num_training_steps", ":", "\n", "            ", "print", "(", "'Experiment was finished earlier; exiting'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# start dataloader workers", "\n", "", "", "dataloader_train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "workers", ",", "\n", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "True", ",", "\n", "sampler", "=", "persistent_random_sampler", ",", "\n", ")", "\n", "dataloader_valid", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_valid", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size_validation", ",", "\n", "num_workers", "=", "cfg", ".", "workers_validation", ",", "\n", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "wandb", ".", "init", "(", "\n", "project", "=", "cfg", ".", "wandb_project", ",", "\n", "resume", "=", "True", ",", "\n", "name", "=", "cfg", ".", "experiment_name", ",", "\n", "id", "=", "wandb_id", ",", "\n", "config", "=", "cfg", ".", "__dict__", ",", "\n", "dir", "=", "cfg", ".", "wandb_dir", ",", "\n", "save_code", "=", "False", ",", "\n", ")", "\n", "wandb", ".", "tensorboard", ".", "patch", "(", "\n", "save", "=", "False", ",", "# copies tb files into cloud and allows to run tensorboard in the cloud", "\n", "tensorboardX", "=", "False", ",", "\n", "pytorch", "=", "True", ",", "\n", ")", "\n", "\n", "# training loop preamble", "\n", "if", "step_loaded", "==", "0", ":", "\n", "        ", "print", "(", "'Started training'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'Resumed training from step {step_loaded}'", ")", "\n", "", "time_start_sec", "=", "time", ".", "monotonic", "(", ")", "\n", "iter_train", "=", "iter", "(", "dataloader_train", ")", "\n", "\n", "# training loop", "\n", "with", "SilentSummaryWriter", "(", "tb_dir", ")", "as", "tb", ":", "\n", "        ", "if", "cfg", ".", "compressed", ":", "\n", "            ", "tb_add_scalars", "(", "tb", ",", "'compression'", ",", "compression_stats", ")", "\n", "\n", "", "step", "=", "step_loaded", "\n", "while", "True", ":", "\n", "            ", "step", "+=", "1", "\n", "\n", "batch", "=", "next", "(", "iter_train", ")", "\n", "images", "=", "batch", "[", "MOD_RGB", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "batch", "[", "MOD_SS_DENSE", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "if", "cfg", ".", "compressed", ":", "\n", "                ", "weights_factory", ".", "train", "(", ")", "\n", "tbasis", ".", "train", "(", ")", "\n", "\n", "", "weights", "=", "forward_weights_factory", "(", ")", "\n", "output", "=", "model", "(", "images", ")", "[", "'y_hat_high'", "]", "\n", "loss_ce", "=", "loss_fn", "(", "output", ",", "target", ".", "squeeze", "(", "1", ")", ")", "\n", "if", "(", "loss_ce", "!=", "loss_ce", ")", ".", "int", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ">", "0", ":", "\n", "                ", "raise", "ValueError", "(", "'Witnessed NaN loss - check LR and or gradients'", ")", "\n", "", "loss", "=", "loss_ce", "\n", "\n", "loss_reg", "=", "0.0", "\n", "if", "cfg", ".", "compressed", "and", "cfg", ".", "decompressed_L2_regularizer_coef", ">", "0", ":", "\n", "                ", "num_el", "=", "sum", "(", "[", "a", ".", "numel", "(", ")", "for", "a", "in", "weights", "]", ")", "\n", "loss_reg", "=", "sum", "(", "[", "(", "a", "**", "2", ")", ".", "sum", "(", ")", "/", "num_el", "for", "a", "in", "weights", "]", ")", "\n", "loss", "=", "loss", "+", "cfg", ".", "decompressed_L2_regularizer_coef", "*", "loss_reg", "\n", "\n", "", "[", "o", ".", "zero_grad", "(", ")", "for", "o", "in", "optimizers", "]", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "simplefilter", "(", "'ignore'", ",", "UserWarning", ")", "\n", "[", "l", ".", "step", "(", ")", "for", "l", "in", "lr_schedulers", "]", "\n", "", "loss", ".", "backward", "(", ")", "\n", "[", "o", ".", "step", "(", ")", "for", "o", "in", "optimizers", "]", "\n", "\n", "if", "step", "%", "cfg", ".", "num_log_loss_steps", "==", "0", ":", "\n", "                ", "if", "cfg", ".", "compressed", ":", "\n", "                    ", "tb_add_scalars", "(", "tb", ",", "'batch'", ",", "{", "\n", "'loss'", ":", "loss", ",", "\n", "'loss_ce'", ":", "loss_ce", ",", "\n", "'loss_reg'", ":", "loss_reg", ",", "\n", "}", ",", "global_step", "=", "step", ")", "\n", "", "else", ":", "\n", "                    ", "tb", ".", "add_scalar", "(", "'batch/loss'", ",", "loss", ",", "global_step", "=", "step", ")", "\n", "", "tb_add_scalars", "(", "tb", ",", "'progress'", ",", "{", "\n", "'lr'", ":", "lr_schedulers", "[", "0", "]", ".", "get_last_lr", "(", ")", "[", "0", "]", ",", "\n", "'pct_done'", ":", "100", "*", "step", "/", "cfg", ".", "num_training_steps", ",", "\n", "'eta_hrs'", ":", "(", "time", ".", "monotonic", "(", ")", "-", "time_start_sec", ")", "*", "(", "cfg", ".", "num_training_steps", "-", "step", ")", "/", "\n", "(", "(", "step", "-", "step_loaded", ")", "*", "3600", ")", "\n", "}", ",", "global_step", "=", "step", ")", "\n", "\n", "", "if", "step", "%", "cfg", ".", "num_validation_steps", "==", "0", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "rgb_tags", "=", "[", "f'{dataset_train.index2name(id.item())}'", "for", "id", "in", "batch", "[", "MOD_ID", "]", "]", "\n", "visualize", "(", "tb", ",", "output", ",", "images", ",", "rgb_tags", ",", "batch", ",", "dataset_train", ",", "cfg", ",", "step", ",", "'batch'", ")", "\n", "for", "ds", ",", "ids", ",", "prefix", "in", "(", "\n", "(", "dataset_train", ",", "cfg", ".", "observe_train_ids", ",", "'train'", ")", ",", "\n", "(", "dataset_valid", ",", "cfg", ".", "observe_valid_ids", ",", "'valid'", ")", ",", "\n", ")", ":", "\n", "                        ", "list_samples", "=", "[", "]", "\n", "for", "i", "in", "ids", ":", "\n", "                            ", "if", "type", "(", "i", ")", "is", "str", ":", "\n", "                                ", "i", "=", "ds", ".", "name2index", "(", "i", ")", "\n", "", "list_samples", ".", "append", "(", "ds", ".", "get", "(", "i", ",", "override_transforms", "=", "transforms_valid", ")", ")", "\n", "", "list_prefix", "=", "(", "f'{prefix}/'", ",", ")", "*", "len", "(", "ids", ")", "\n", "batch", "=", "default_collate", "(", "list_samples", ")", "\n", "images", "=", "batch", "[", "MOD_RGB", "]", "\n", "output", "=", "model", "(", "images", ".", "cuda", "(", ")", ")", "[", "'y_hat_high'", "]", ".", "cpu", "(", ")", "\n", "rgb_tags", "=", "[", "f'{prefix}{ds.index2name(id.item())}'", "for", "prefix", ",", "id", "in", "zip", "(", "list_prefix", ",", "batch", "[", "MOD_ID", "]", ")", "]", "\n", "visualize", "(", "tb", ",", "output", ",", "images", ",", "rgb_tags", ",", "batch", ",", "dataset_train", ",", "cfg", ",", "step", ",", "'fixed'", ")", "\n", "\n", "", "if", "cfg", ".", "compressed", ":", "\n", "                        ", "for", "k", ",", "v", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "                            ", "if", "'running_var'", "in", "k", ":", "\n", "                                ", "tb", ".", "add_histogram", "(", "f'stats_bn/{k}'", ",", "v", ",", "global_step", "=", "step", ",", "bins", "=", "64", ")", "\n", "", "", "tb", ".", "add_histogram", "(", "f'stats_factory/basis_values'", ",", "tbasis", ".", "last_basis", ",", "global_step", "=", "step", ",", "bins", "=", "64", ")", "\n", "tb", ".", "add_histogram", "(", "f'stats_factory/coef_values'", ",", "weights_factory", ".", "weights", ",", "global_step", "=", "step", ",", "bins", "=", "64", ")", "\n", "tb", ".", "add_scalar", "(", "'stats_factory/basis_std'", ",", "tbasis", ".", "last_basis", ".", "std", "(", ")", ".", "item", "(", ")", ",", "global_step", "=", "step", ")", "\n", "tb", ".", "add_scalar", "(", "'stats_factory/coef_std'", ",", "weights_factory", ".", "weights", ".", "std", "(", ")", ".", "item", "(", ")", ",", "global_step", "=", "step", ")", "\n", "szzip_without_basis", "=", "get_zipped_size", "(", "{", "\n", "'n'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'c'", ":", "weights_factory", ".", "state_dict", "(", ")", ",", "\n", "}", ")", "\n", "szzip_with_basis", "=", "get_zipped_size", "(", "{", "\n", "'n'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'c'", ":", "weights_factory", ".", "state_dict", "(", ")", ",", "\n", "'b'", ":", "tbasis", ".", "state_dict", "(", ")", ",", "\n", "}", ")", "\n", "tb_add_scalars", "(", "tb", ",", "'compression'", ",", "{", "\n", "'size_zip_without_basis'", ":", "szzip_without_basis", ",", "\n", "'size_zip_with_basis'", ":", "szzip_with_basis", ",", "\n", "}", ",", "global_step", "=", "step", ")", "\n", "", "else", ":", "\n", "                        ", "szzip_original_total", "=", "get_zipped_size", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "tb", ".", "add_scalar", "(", "'compression/szzip_original_total'", ",", "szzip_original_total", ",", "global_step", "=", "step", ")", "\n", "\n", "", "confusion", "=", "None", "\n", "for", "batch", "in", "dataloader_valid", ":", "\n", "                        ", "images", "=", "batch", "[", "MOD_RGB", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "batch", "[", "MOD_SS_DENSE", "]", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "output", "=", "model", "(", "images", ")", "[", "'y_hat_high'", "]", "\n", "output", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "conf", "=", "semseg_compute_confusion", "(", "output", ",", "target", ",", "semseg_num_classes", ",", "semseg_ignore_class", ")", "\n", "confusion", "=", "conf", "if", "confusion", "is", "None", "else", "confusion", "+", "conf", "\n", "", "iou_mean", ",", "iou_per_class", "=", "semseg_accum_confusion_to_iou", "(", "confusion", ")", "\n", "metrics", "=", "{", "semseg_class_names", "[", "i", "]", ":", "iou", "for", "i", ",", "iou", "in", "enumerate", "(", "iou_per_class", ")", "}", "\n", "\n", "", "metric_new_best", "=", "max", "(", "iou_mean", ",", "metric_best", ")", "\n", "tb", ".", "add_scalar", "(", "'metrics/iou_mean'", ",", "iou_mean", ",", "global_step", "=", "step", ")", "\n", "tb_add_scalars", "(", "tb", ",", "'metrics'", ",", "metrics", ",", "global_step", "=", "step", ")", "\n", "tb", ".", "add_scalar", "(", "'metrics_best/iou_mean'", ",", "metric_new_best", ",", "global_step", "=", "step", ")", "\n", "\n", "have_new_best", "=", "metric_best", "!=", "metric_new_best", "\n", "if", "have_new_best", ":", "\n", "                    ", "print", "(", "f'Step {step}: iou_mean improved from {metric_best} to {metric_new_best}'", ")", "\n", "metric_best", "=", "metric_new_best", "\n", "", "else", ":", "\n", "                    ", "print", "(", "f'Step {step}: iou_mean did not improve'", ")", "\n", "\n", "# prepare checkpoint", "\n", "", "state_dict", "=", "{", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'persistent_random_sampler'", ":", "persistent_random_sampler", ".", "state_dict", "(", ")", ",", "\n", "'step'", ":", "step", ",", "\n", "'metric_best'", ":", "metric_best", ",", "\n", "'wandb_id'", ":", "wandb_id", ",", "\n", "}", "\n", "for", "i", ",", "(", "o", ",", "l", ")", "in", "enumerate", "(", "zip", "(", "optimizers", ",", "lr_schedulers", ")", ")", ":", "\n", "                    ", "state_dict", ".", "update", "(", "{", "\n", "f'optimizer_{i}'", ":", "o", ".", "state_dict", "(", ")", ",", "\n", "f'lr_scheduler_{i}'", ":", "l", ".", "state_dict", "(", ")", ",", "\n", "}", ")", "\n", "", "if", "cfg", ".", "compressed", ":", "\n", "                    ", "state_dict", "[", "'tbasis'", "]", "=", "tbasis", ".", "state_dict", "(", ")", "\n", "state_dict", "[", "'weights_factory'", "]", "=", "weights_factory", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "checkpoint_path_latest", "+", "'.tmp'", ")", "\n", "\n", "# handle best model artifacts", "\n", "if", "have_new_best", ":", "\n", "# copy current checkpoint to best model checkpoint", "\n", "                    ", "shutil", ".", "copy", "(", "checkpoint_path_latest", "+", "'.tmp'", ",", "checkpoint_path_best", "+", "'.tmp'", ")", "\n", "# commit best artifacts", "\n", "os", ".", "rename", "(", "checkpoint_path_best", "+", "'.tmp'", ",", "checkpoint_path_best", ")", "\n", "\n", "# commit checkpoint", "\n", "", "os", ".", "rename", "(", "checkpoint_path_latest", "+", "'.tmp'", ",", "checkpoint_path_latest", ")", "\n", "\n", "", "if", "step", "==", "cfg", ".", "num_training_steps", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "print", "(", "f'Step {step}: finished training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.src.train_imgcls.main": [[23, 313], ["cfg.__dict__.get", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "os.path.join", "os.path.join", "os.makedirs", "os.makedirs", "os.makedirs", "os.path.join", "os.path.join", "src.utils.helpers.verify_experiment_integrity", "src.utils.resolvers.resolve_imgcls_dataset", "src.utils.helpers.PersistentRandomSampler", "src.utils.helpers.net_extract_modules_order", "print", "wandb.util.generate_id", "os.path.isfile", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "wandb.init", "wandb.tensorboard.patch", "time.monotonic", "iter", "print", "os.environ.get", "len", "src.utils.resolvers.resolve_imgcls_model", "src.utils.tensorized_basis_modules_tr.TBasisWeightsFactory", "src.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy", "src.utils.tensorized_basis_modules_tr.TBasis", "src.utils.module_surgery.net_prepare_training", "print", "print", "tbasis.cuda.", "src.utils.helpers.silent_torch_jit_trace_module", "print", "model.cuda.cuda", "optimizers.append", "src.utils.resolvers.MultiStepWarmupLR", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "enumerate", "src.utils.helpers.PersistentRandomSampler.load_state_dict", "src.utils.helpers.PersistentRandomSampler.fast_forward_to", "print", "print", "src.utils.helpers.SilentSummaryWriter", "torch.randn", "torch.randn", "torch.randn", "torch.load", "torch.load", "torch.load", "torch.load.pop", "tbasis.cuda.load_state_dict", "src.utils.helpers.pretty_dict", "tbasis.cuda.cuda", "weights_factory.cuda.cuda", "tbasis.cuda.forward", "src.utils.helpers.silent_torch_jit_trace_module.forward", "src.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.set_tbasis_tensors", "src.utils.resolvers.resolve_optimizer", "model.cuda.parameters", "tbasis.cuda.load_state_dict", "weights_factory.cuda.load_state_dict", "zip", "o.load_state_dict", "l.load_state_dict", "print", "exit", "src.utils.helpers.tb_add_scalars", "next", "images.cuda.cuda", "target.cuda.cuda", "model.cuda.train", "train_imgcls.main.forward_weights_factory"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.get", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.verify_experiment_integrity", "home.repos.pwc.inspect_result.toshas_tbasis.utils.resolvers.resolve_imgcls_dataset", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.net_extract_modules_order", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.get", "home.repos.pwc.inspect_result.toshas_tbasis.utils.resolvers.resolve_imgcls_model", "home.repos.pwc.inspect_result.toshas_tbasis.utils.module_surgery.net_prepare_training", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.silent_torch_jit_trace_module", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.fast_forward_to", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.pretty_dict", "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.forward", "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.forward", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.set_tbasis_tensors", "home.repos.pwc.inspect_result.toshas_tbasis.utils.resolvers.resolve_optimizer", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.load_state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.tb_add_scalars"], ["def", "main", "(", "cfg", ")", ":", "\n", "    ", "assert", "cfg", ".", "experiment", "==", "'imgcls'", "\n", "\n", "seed", "=", "cfg", ".", "__dict__", ".", "get", "(", "'random_seed'", ",", "2020", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n", "log_dir", "=", "cfg", ".", "log_dir", "\n", "tb_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'tb'", ")", "\n", "checkpoints_dir", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'checkpoints'", ")", "\n", "os", ".", "makedirs", "(", "tb_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "cfg", ".", "wandb_dir", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "checkpoints_dir", ",", "exist_ok", "=", "True", ")", "\n", "checkpoint_path_latest", "=", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'checkpoint_latest.pth'", ")", "\n", "checkpoint_path_best", "=", "os", ".", "path", ".", "join", "(", "checkpoints_dir", ",", "'checkpoint_best.pth'", ")", "\n", "is_cuda", "=", "os", ".", "environ", ".", "get", "(", "'CUDA_VISIBLE_DEVICES'", ",", "None", ")", "is", "not", "None", "\n", "\n", "# check the experiment is not resumed with different code and or settings", "\n", "verify_experiment_integrity", "(", "cfg", ")", "\n", "\n", "dataset_train", ",", "dataset_valid", ",", "_", "=", "resolve_imgcls_dataset", "(", "cfg", ")", "\n", "\n", "num_steps_in_epoch", "=", "len", "(", "dataset_train", ")", "//", "cfg", ".", "batch_size", "\n", "num_training_steps", "=", "cfg", ".", "num_epochs_train_total", "*", "num_steps_in_epoch", "\n", "\n", "persistent_random_sampler", "=", "PersistentRandomSampler", "(", "\n", "dataset_train", ",", "\n", "num_training_steps", "*", "cfg", ".", "batch_size", "\n", ")", "\n", "\n", "model", "=", "resolve_imgcls_model", "(", "cfg", ".", "model_name", ")", "(", "cfg", ")", "\n", "\n", "classes_interest", "=", "(", "torch", ".", "nn", ".", "Conv2d", ",", "torch", ".", "nn", ".", "Linear", ")", "\n", "modules_order", "=", "net_extract_modules_order", "(", "model", ",", "(", "torch", ".", "randn", "(", "2", ",", "3", ",", "256", ",", "256", ")", ",", ")", ",", "classes_interest", ")", "\n", "print", "(", "'Modules order:'", "+", "'\\n    '", ".", "join", "(", "[", "''", "]", "+", "modules_order", ")", ")", "\n", "\n", "weights_factory", ",", "weights_factory_proxy", ",", "weights_factory_jit", ",", "tbasis", ",", "compression_stats", "=", "(", "None", ",", ")", "*", "5", "\n", "if", "cfg", ".", "compressed", ":", "\n", "        ", "weights_factory", "=", "TBasisWeightsFactory", "(", "\n", "cfg", ".", "basis_size", ",", "\n", "cfg", ".", "basis_rank", ",", "\n", "cfg", ".", "rank_adaptation", ",", "\n", ")", "\n", "weights_factory_proxy", "=", "TBasisWeightsFactoryProxy", "(", "weights_factory", ")", "\n", "tbasis", "=", "TBasis", "(", "\n", "cfg", ".", "basis_size", ",", "cfg", ".", "basis_rank", ",", "cfg", ".", "basis_mode", ",", "cfg", ".", "basis_trainable_sts", ",", "cfg", ".", "basis_init_seed", ",", "\n", ")", "\n", "if", "cfg", ".", "basis_pretrained_path", "is", "not", "None", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "cfg", ".", "root_models", ",", "cfg", ".", "basis_pretrained_path", ")", ")", "\n", "state_dict", ".", "pop", "(", "'last_basis'", ",", "None", ")", "\n", "tbasis", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "compression_stats", "=", "net_prepare_training", "(", "model", ",", "tbasis", ",", "weights_factory_proxy", ",", "cfg", ")", "\n", "print", "(", "'Compression: '", ",", "pretty_dict", "(", "compression_stats", ")", ")", "\n", "print", "(", "'JIT weights_factory...'", ")", "\n", "basis", "=", "tbasis", "(", ")", "\n", "weights_factory_jit", "=", "silent_torch_jit_trace_module", "(", "weights_factory", ",", "{", "'forward'", ":", "(", "basis", ",", ")", "}", ")", "\n", "del", "tbasis", ".", "last_basis", "\n", "print", "(", "'JIT weights_factory done.'", ")", "\n", "\n", "", "if", "is_cuda", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "if", "cfg", ".", "compressed", ":", "\n", "            ", "tbasis", "=", "tbasis", ".", "cuda", "(", ")", "\n", "weights_factory", "=", "weights_factory", ".", "cuda", "(", ")", "\n", "\n", "", "", "def", "forward_weights_factory", "(", ")", ":", "\n", "        ", "if", "cfg", ".", "compressed", ":", "\n", "            ", "basis", "=", "tbasis", ".", "forward", "(", ")", "\n", "weights", "=", "weights_factory_jit", ".", "forward", "(", "basis", ")", "\n", "weights_factory_proxy", ".", "set_tbasis_tensors", "(", "weights", ")", "\n", "return", "weights", "\n", "", "return", "None", "\n", "\n", "", "optimizers", "=", "[", "\n", "resolve_optimizer", "(", "cfg", ".", "optimizer_model_name", ")", "(", "\n", "model", ".", "parameters", "(", ")", ",", "**", "cfg", ".", "optimizer_model_kwargs", "\n", ")", "\n", "]", "\n", "if", "cfg", ".", "compressed", ":", "\n", "        ", "optimizers", ".", "append", "(", "resolve_optimizer", "(", "cfg", ".", "optimizer_basis_name", ")", "(", "\n", "list", "(", "tbasis", ".", "parameters", "(", ")", ")", "+", "list", "(", "weights_factory", ".", "parameters", "(", ")", ")", ",", "\n", "**", "cfg", ".", "optimizer_basis_kwargs", "\n", ")", ")", "\n", "", "lr_schedulers", "=", "[", "\n", "MultiStepWarmupLR", "(", "\n", "opt", ",", "\n", "milestones", "=", "list", "(", "int", "(", "s", "*", "num_training_steps", ")", "for", "s", "in", "cfg", ".", "lr_scheduler_milestones", ")", ",", "\n", "gamma", "=", "cfg", ".", "lr_scheduler_gamma", ",", "\n", "num_warmup_steps", "=", "cfg", ".", "lr_warmup_steps", "if", "cfg", ".", "lr_warmup_sts", "else", "0", ",", "\n", ")", "for", "opt", "in", "optimizers", "\n", "]", "\n", "\n", "step_loaded", "=", "0", "\n", "metric_best", "=", "0", "\n", "wandb_id", "=", "wandb", ".", "util", ".", "generate_id", "(", ")", "\n", "\n", "# load persistent state", "\n", "if", "os", ".", "path", ".", "isfile", "(", "checkpoint_path_latest", ")", ":", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "checkpoint_path_latest", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", "[", "'model'", "]", ")", "\n", "if", "cfg", ".", "compressed", ":", "\n", "            ", "tbasis", ".", "load_state_dict", "(", "state_dict", "[", "'tbasis'", "]", ")", "\n", "weights_factory", ".", "load_state_dict", "(", "state_dict", "[", "'weights_factory'", "]", ")", "\n", "", "for", "i", ",", "(", "o", ",", "l", ")", "in", "enumerate", "(", "zip", "(", "optimizers", ",", "lr_schedulers", ")", ")", ":", "\n", "            ", "o", ".", "load_state_dict", "(", "state_dict", "[", "f'optimizer_{i}'", "]", ")", "\n", "l", ".", "load_state_dict", "(", "state_dict", "[", "f'lr_scheduler_{i}'", "]", ")", "\n", "", "persistent_random_sampler", ".", "load_state_dict", "(", "state_dict", "[", "'persistent_random_sampler'", "]", ")", "\n", "step_loaded", "=", "state_dict", "[", "'step'", "]", "\n", "metric_best", "=", "state_dict", "[", "'metric_best'", "]", "\n", "persistent_random_sampler", ".", "fast_forward_to", "(", "step_loaded", "*", "cfg", ".", "batch_size", ")", "\n", "wandb_id", "=", "state_dict", "[", "'wandb_id'", "]", "\n", "if", "step_loaded", "==", "num_training_steps", ":", "\n", "            ", "print", "(", "'Experiment was finished earlier; exiting'", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# start dataloader workers", "\n", "", "", "dataloader_train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "workers", ",", "\n", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "True", ",", "\n", "sampler", "=", "persistent_random_sampler", ",", "\n", ")", "\n", "dataloader_valid", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_valid", ",", "\n", "batch_size", "=", "cfg", ".", "batch_size_validation", ",", "\n", "num_workers", "=", "cfg", ".", "workers_validation", ",", "\n", "pin_memory", "=", "False", ",", "\n", "drop_last", "=", "False", ",", "\n", ")", "\n", "\n", "wandb", ".", "init", "(", "\n", "project", "=", "cfg", ".", "wandb_project", ",", "\n", "resume", "=", "True", ",", "\n", "name", "=", "cfg", ".", "experiment_name", ",", "\n", "id", "=", "wandb_id", ",", "\n", "config", "=", "cfg", ".", "__dict__", ",", "\n", "dir", "=", "cfg", ".", "wandb_dir", ",", "\n", "save_code", "=", "False", ",", "\n", ")", "\n", "wandb", ".", "tensorboard", ".", "patch", "(", "\n", "save", "=", "False", ",", "# copies tb files into cloud and allows to run tensorboard in the cloud", "\n", "tensorboardX", "=", "False", ",", "\n", "pytorch", "=", "True", ",", "\n", ")", "\n", "\n", "# training loop preamble", "\n", "if", "step_loaded", "==", "0", ":", "\n", "        ", "print", "(", "'Started training'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "f'Resumed training from step {step_loaded}'", ")", "\n", "", "time_start_sec", "=", "time", ".", "monotonic", "(", ")", "\n", "iter_train", "=", "iter", "(", "dataloader_train", ")", "\n", "\n", "# training loop", "\n", "with", "SilentSummaryWriter", "(", "tb_dir", ")", "as", "tb", ":", "\n", "        ", "if", "cfg", ".", "compressed", ":", "\n", "            ", "tb_add_scalars", "(", "tb", ",", "'compression'", ",", "compression_stats", ")", "\n", "\n", "", "step", "=", "step_loaded", "\n", "while", "True", ":", "\n", "            ", "step", "+=", "1", "\n", "\n", "images", ",", "target", "=", "next", "(", "iter_train", ")", "\n", "images", "=", "images", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "if", "cfg", ".", "compressed", ":", "\n", "                ", "weights_factory", ".", "train", "(", ")", "\n", "tbasis", ".", "train", "(", ")", "\n", "\n", "", "weights", "=", "forward_weights_factory", "(", ")", "\n", "output", "=", "model", "(", "images", ")", "\n", "loss_ce", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "if", "(", "loss_ce", "!=", "loss_ce", ")", ".", "int", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ">", "0", ":", "\n", "                ", "raise", "ValueError", "(", "'Witnessed NaN loss - check LR and or gradients'", ")", "\n", "", "loss", "=", "loss_ce", "\n", "\n", "loss_reg", "=", "0.0", "\n", "if", "cfg", ".", "compressed", "and", "cfg", ".", "decompressed_L2_regularizer_coef", ">", "0", ":", "\n", "                ", "num_el", "=", "sum", "(", "[", "a", ".", "numel", "(", ")", "for", "a", "in", "weights", "]", ")", "\n", "loss_reg", "=", "sum", "(", "[", "(", "a", "**", "2", ")", ".", "sum", "(", ")", "/", "num_el", "for", "a", "in", "weights", "]", ")", "\n", "loss", "=", "loss", "+", "cfg", ".", "decompressed_L2_regularizer_coef", "*", "loss_reg", "\n", "\n", "", "[", "o", ".", "zero_grad", "(", ")", "for", "o", "in", "optimizers", "]", "\n", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "                ", "warnings", ".", "simplefilter", "(", "'ignore'", ",", "UserWarning", ")", "\n", "[", "l", ".", "step", "(", ")", "for", "l", "in", "lr_schedulers", "]", "\n", "", "loss", ".", "backward", "(", ")", "\n", "[", "o", ".", "step", "(", ")", "for", "o", "in", "optimizers", "]", "\n", "\n", "if", "step", "%", "cfg", ".", "num_log_loss_steps", "==", "0", ":", "\n", "                ", "if", "cfg", ".", "compressed", ":", "\n", "                    ", "tb_add_scalars", "(", "tb", ",", "'batch'", ",", "{", "\n", "'loss'", ":", "loss", ",", "\n", "'loss_ce'", ":", "loss_ce", ",", "\n", "'loss_reg'", ":", "loss_reg", ",", "\n", "}", ",", "global_step", "=", "step", ")", "\n", "", "else", ":", "\n", "                    ", "tb", ".", "add_scalar", "(", "'batch/loss'", ",", "loss", ",", "global_step", "=", "step", ")", "\n", "", "tb_add_scalars", "(", "tb", ",", "'progress'", ",", "{", "\n", "'lr'", ":", "lr_schedulers", "[", "0", "]", ".", "get_last_lr", "(", ")", "[", "0", "]", ",", "\n", "'pct_done'", ":", "100", "*", "step", "/", "num_training_steps", ",", "\n", "'eta_hrs'", ":", "(", "time", ".", "monotonic", "(", ")", "-", "time_start_sec", ")", "*", "(", "num_training_steps", "-", "step", ")", "/", "\n", "(", "(", "step", "-", "step_loaded", ")", "*", "3600", ")", "\n", "}", ",", "global_step", "=", "step", ")", "\n", "\n", "", "if", "step", "%", "num_steps_in_epoch", "==", "0", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "\n", "if", "cfg", ".", "compressed", ":", "\n", "                    ", "for", "k", ",", "v", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "                        ", "if", "'running_var'", "in", "k", ":", "\n", "                            ", "tb", ".", "add_histogram", "(", "f'stats_bn/{k}'", ",", "v", ",", "global_step", "=", "step", ",", "bins", "=", "64", ")", "\n", "", "", "tb", ".", "add_histogram", "(", "f'stats_factory/basis_values'", ",", "tbasis", ".", "last_basis", ",", "global_step", "=", "step", ",", "bins", "=", "64", ")", "\n", "tb", ".", "add_histogram", "(", "f'stats_factory/coef_values'", ",", "weights_factory", ".", "weights", ",", "global_step", "=", "step", ",", "bins", "=", "64", ")", "\n", "tb", ".", "add_scalar", "(", "'stats_factory/basis_std'", ",", "tbasis", ".", "last_basis", ".", "std", "(", ")", ".", "item", "(", ")", ",", "global_step", "=", "step", ")", "\n", "tb", ".", "add_scalar", "(", "'stats_factory/coef_std'", ",", "weights_factory", ".", "weights", ".", "std", "(", ")", ".", "item", "(", ")", ",", "global_step", "=", "step", ")", "\n", "szzip_without_basis", "=", "get_zipped_size", "(", "{", "\n", "'n'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'c'", ":", "weights_factory", ".", "state_dict", "(", ")", ",", "\n", "}", ")", "\n", "szzip_with_basis", "=", "get_zipped_size", "(", "{", "\n", "'n'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'c'", ":", "weights_factory", ".", "state_dict", "(", ")", ",", "\n", "'b'", ":", "tbasis", ".", "state_dict", "(", ")", ",", "\n", "}", ")", "\n", "tb_add_scalars", "(", "tb", ",", "'compression'", ",", "{", "\n", "'size_zip_without_basis'", ":", "szzip_without_basis", ",", "\n", "'size_zip_with_basis'", ":", "szzip_with_basis", ",", "\n", "}", ",", "global_step", "=", "step", ")", "\n", "", "else", ":", "\n", "                    ", "szzip_original_total", "=", "get_zipped_size", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "tb", ".", "add_scalar", "(", "'compression/szzip_original_total'", ",", "szzip_original_total", ",", "global_step", "=", "step", ")", "\n", "\n", "", "top1acc", "=", "0", "\n", "for", "batch", "in", "dataloader_valid", ":", "\n", "                    ", "images", ",", "target", "=", "batch", "\n", "images", ",", "target", "=", "images", ".", "cuda", "(", "non_blocking", "=", "True", ")", ",", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "output", "=", "model", "(", "images", ")", "\n", "acc1", ",", "=", "classification_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", "\n", "top1acc", "+=", "acc1", "\n", "", "top1acc", "=", "100.", "*", "top1acc", ".", "item", "(", ")", "/", "len", "(", "dataset_valid", ")", "\n", "metric_new_best", "=", "max", "(", "top1acc", ",", "metric_best", ")", "\n", "tb", ".", "add_scalar", "(", "'metrics/top1acc'", ",", "top1acc", ",", "global_step", "=", "step", ")", "\n", "tb", ".", "add_scalar", "(", "'metrics_best/top1acc'", ",", "metric_new_best", ",", "global_step", "=", "step", ")", "\n", "\n", "have_new_best", "=", "metric_best", "!=", "metric_new_best", "\n", "if", "have_new_best", ":", "\n", "                    ", "print", "(", "f'Step {step}: top1acc improved from {metric_best} to {metric_new_best}'", ")", "\n", "metric_best", "=", "metric_new_best", "\n", "", "else", ":", "\n", "                    ", "print", "(", "f'Step {step}: top1acc did not improve'", ")", "\n", "\n", "# prepare checkpoint", "\n", "", "state_dict", "=", "{", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'persistent_random_sampler'", ":", "persistent_random_sampler", ".", "state_dict", "(", ")", ",", "\n", "'step'", ":", "step", ",", "\n", "'metric_best'", ":", "metric_best", ",", "\n", "'wandb_id'", ":", "wandb_id", ",", "\n", "}", "\n", "for", "i", ",", "(", "o", ",", "l", ")", "in", "enumerate", "(", "zip", "(", "optimizers", ",", "lr_schedulers", ")", ")", ":", "\n", "                    ", "state_dict", ".", "update", "(", "{", "\n", "f'optimizer_{i}'", ":", "o", ".", "state_dict", "(", ")", ",", "\n", "f'lr_scheduler_{i}'", ":", "l", ".", "state_dict", "(", ")", ",", "\n", "}", ")", "\n", "", "if", "cfg", ".", "compressed", ":", "\n", "                    ", "state_dict", "[", "'tbasis'", "]", "=", "tbasis", ".", "state_dict", "(", ")", "\n", "state_dict", "[", "'weights_factory'", "]", "=", "weights_factory", ".", "state_dict", "(", ")", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "checkpoint_path_latest", "+", "'.tmp'", ")", "\n", "\n", "# handle best model artifacts", "\n", "if", "have_new_best", ":", "\n", "# copy current checkpoint to best model checkpoint", "\n", "                    ", "shutil", ".", "copy", "(", "checkpoint_path_latest", "+", "'.tmp'", ",", "checkpoint_path_best", "+", "'.tmp'", ")", "\n", "# commit best artifacts", "\n", "os", ".", "rename", "(", "checkpoint_path_best", "+", "'.tmp'", ",", "checkpoint_path_best", ")", "\n", "\n", "# commit checkpoint", "\n", "", "os", ".", "rename", "(", "checkpoint_path_latest", "+", "'.tmp'", ",", "checkpoint_path_latest", ")", "\n", "\n", "", "if", "step", "==", "num_training_steps", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "print", "(", "f'Step {step}: finished training'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.dict_deep_update": [[11, 25], ["patch.keys", "isinstance", "config.dict_deep_update", "isinstance", "dict", "overwrite_warns.append", "str", "str"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.config.dict_deep_update"], ["def", "dict_deep_update", "(", "what", ",", "patch", ",", "prefix", "=", "None", ",", "overwrite_warns", "=", "None", ")", ":", "\n", "    ", "for", "k", "in", "patch", ".", "keys", "(", ")", ":", "\n", "        ", "new_prefix", "=", "k", "if", "prefix", "is", "None", "else", "prefix", "+", "'/'", "+", "k", "\n", "if", "isinstance", "(", "patch", "[", "k", "]", ",", "dict", ")", ":", "\n", "            ", "if", "k", "in", "what", ":", "\n", "                ", "assert", "isinstance", "(", "what", "[", "k", "]", ",", "dict", ")", "\n", "", "else", ":", "\n", "                ", "what", "[", "k", "]", "=", "dict", "(", ")", "\n", "", "dict_deep_update", "(", "what", "[", "k", "]", ",", "patch", "[", "k", "]", ",", "prefix", "=", "new_prefix", ",", "overwrite_warns", "=", "overwrite_warns", ")", "\n", "", "else", ":", "\n", "            ", "if", "k", "in", "what", "and", "overwrite_warns", "is", "not", "None", ":", "\n", "                ", "overwrite_warns", ".", "append", "(", "'Overwriting key \\'{}\\': old \\'{}\\' new \\'{}\\''", "\n", ".", "format", "(", "new_prefix", ",", "str", "(", "what", "[", "k", "]", ")", ",", "str", "(", "patch", "[", "k", "]", ")", ")", ")", "\n", "", "what", "[", "k", "]", "=", "patch", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.dict_deep_get": [[27, 48], ["enumerate", "type", "key_path.split", "type", "len", "dict_type"], "function", ["None"], ["", "", "", "def", "dict_deep_get", "(", "d", ",", "key_path", ",", "split_ch", "=", "'/'", ",", "default", "=", "None", ",", "create_if_missing", "=", "False", ",", "dict_type", "=", "dict", ")", ":", "\n", "    ", "if", "type", "(", "key_path", ")", "is", "str", ":", "\n", "        ", "parts", "=", "key_path", ".", "split", "(", "split_ch", ")", "\n", "", "elif", "type", "(", "key_path", ")", "is", "list", ":", "\n", "        ", "parts", "=", "key_path", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "for", "i", ",", "part", "in", "enumerate", "(", "parts", ")", ":", "\n", "        ", "is_last", "=", "(", "i", "==", "len", "(", "parts", ")", "-", "1", ")", "\n", "if", "part", "in", "d", ":", "\n", "            ", "d", "=", "d", "[", "part", "]", "\n", "", "else", ":", "\n", "            ", "if", "create_if_missing", ":", "\n", "                ", "if", "is_last", ":", "\n", "                    ", "d", "[", "part", "]", "=", "default", "\n", "", "else", ":", "\n", "                    ", "d", "[", "part", "]", "=", "dict_type", "(", ")", "\n", "", "d", "=", "d", "[", "part", "]", "\n", "", "else", ":", "\n", "                ", "return", "default", "\n", "", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.dict_deep_put": [[50, 65], ["enumerate", "type", "key_path.split", "type", "len", "dict_type"], "function", ["None"], ["", "def", "dict_deep_put", "(", "d", ",", "key_path", ",", "val", ",", "split_ch", "=", "'/'", ",", "dict_type", "=", "dict", ")", ":", "\n", "    ", "if", "type", "(", "key_path", ")", "is", "str", ":", "\n", "        ", "parts", "=", "key_path", ".", "split", "(", "split_ch", ")", "\n", "", "elif", "type", "(", "key_path", ")", "is", "list", ":", "\n", "        ", "parts", "=", "key_path", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "for", "i", ",", "part", "in", "enumerate", "(", "parts", ")", ":", "\n", "        ", "is_last", "=", "(", "i", "==", "len", "(", "parts", ")", "-", "1", ")", "\n", "if", "is_last", ":", "\n", "            ", "d", "[", "part", "]", "=", "val", "\n", "", "else", ":", "\n", "            ", "if", "part", "not", "in", "d", ":", "\n", "                ", "d", "[", "part", "]", "=", "dict_type", "(", ")", "\n", "", "d", "=", "d", "[", "part", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.expandpath": [[67, 69], ["os.path.abspath", "os.path.expandvars", "os.path.expanduser"], "function", ["None"], ["", "", "", "def", "expandpath", "(", "path", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expandvars", "(", "os", ".", "path", ".", "expanduser", "(", "path", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.parse_config_and_args": [[71, 171], ["dict", "loader.add_implicit_resolver", "os.path.basename", "print", "exit", "re.compile", "list", "convert_to_namespace.get", "config.convert_to_namespace", "arg.count", "arg.count", "arg.find", "argv.append", "argv.append", "argv.append", "config.expandpath", "config.dict_deep_update", "ast.literal_eval", "convert_to_namespace.keys", "config.expandpath", "convert_to_namespace.keys", "config.expandpath", "len", "len", "os.path.isfile", "os.path.join", "os.path.isfile", "os.path.splitext", "open", "fp.read().replace", "yaml.safe_load", "type", "type", "config.dict_deep_get", "config.dict_deep_update", "os.path.join", "os.path.join", "os.path.dirname", "os.path.basename", "config.dict_deep_put", "config.dict_deep_put", "config.dict_deep_put", "config.dict_deep_put", "fp.read", "dict", "last_key.count", "last_key.count", "last_key.count", "last_key.count"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.get", "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.convert_to_namespace", "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.expandpath", "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.dict_deep_update", "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.expandpath", "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.expandpath", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.dict_deep_get", "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.dict_deep_update", "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.dict_deep_put", "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.dict_deep_put", "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.dict_deep_put", "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.dict_deep_put"], ["", "def", "parse_config_and_args", "(", "as_namespace", "=", "False", ")", ":", "\n", "    ", "if", "'--help'", "in", "sys", ".", "argv", "or", "'-h'", "in", "sys", ".", "argv", ":", "\n", "        ", "app", "=", "os", ".", "path", ".", "basename", "(", "sys", ".", "argv", "[", "0", "]", ")", "\n", "print", "(", "\n", "f'{app} --cfg <path.yml> [--cfg <path.yml>] [--node-path-key <value>] [--node-path <dict>]\\n'", "+", "\n", "'Multiple configs and command line keys act as deep tree patches.\\n'", "+", "\n", "'Warnings will be issued only for keys overriden by subsequent config files or CLI.\\n'", "+", "\n", "'Lists are treated immutably, subsequent definition overrides entire list.\\n'", "+", "\n", "'If runtime complains about missing attribute in config, just specify using the most convenient way.\\n'", "+", "\n", "'Examples: \\n'", "+", "\n", "'  train.py --cfg ~/semseg.yml\\n'", "+", "\n", "'  train.py --cfg ~/env_dgx.yml --cfg ~/semseg.yml\\n'", "+", "\n", "'  train.py --cfg ~/semseg.yml --optimizer_kwargs-momentum 0.9\\n'", "+", "\n", "'  train.py --cfg ~/semseg.yml --optimizer_kwargs \\'{\"momentum\":0.9,\"dampening\":0.1}\\'\\n'", "\n", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "cfg", "=", "dict", "(", ")", "\n", "\n", "# fix yaml scientific notation loader", "\n", "loader", "=", "yaml", ".", "SafeLoader", "\n", "loader", ".", "add_implicit_resolver", "(", "\n", "u'tag:yaml.org,2002:float'", ",", "\n", "re", ".", "compile", "(", "u'''^(?:\n         [-+]?(?:[0-9][0-9_]*)\\\\.[0-9_]*(?:[eE][-+]?[0-9]+)?\n        |[-+]?(?:[0-9][0-9_]*)(?:[eE][-+]?[0-9]+)\n        |\\\\.[0-9_]+(?:[eE][-+][0-9]+)?\n        |[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\\\.[0-9_]*\n        |[-+]?\\\\.(?:inf|Inf|INF)\n        |\\\\.(?:nan|NaN|NAN))$'''", ",", "re", ".", "X", ")", ",", "\n", "list", "(", "u'-+0123456789.'", ")", ")", "\n", "\n", "argv", "=", "[", "]", "\n", "for", "arg", "in", "sys", ".", "argv", "[", "1", ":", "]", ":", "\n", "        ", "assert", "arg", ".", "count", "(", "'='", ")", "in", "(", "0", ",", "1", ")", "\n", "if", "arg", ".", "count", "(", "'='", ")", "==", "1", ":", "\n", "            ", "pos_eq", "=", "arg", ".", "find", "(", "'='", ")", "\n", "arg", ",", "val", "=", "arg", "[", ":", "pos_eq", "]", ",", "arg", "[", "pos_eq", "+", "1", ":", "]", "\n", "assert", "len", "(", "val", ")", ">", "0", "\n", "argv", ".", "append", "(", "arg", ")", "\n", "argv", ".", "append", "(", "val", ")", "\n", "", "else", ":", "\n", "            ", "argv", ".", "append", "(", "arg", ")", "\n", "\n", "", "", "cfg_warnings", "=", "[", "]", "\n", "last_key", "=", "None", "\n", "for", "arg", "in", "argv", ":", "\n", "        ", "if", "len", "(", "arg", ")", ">=", "2", "and", "arg", "[", "0", ":", "2", "]", "==", "'--'", ":", "\n", "            ", "assert", "last_key", "is", "None", ",", "'Key --{} must have a value'", ".", "format", "(", "last_key", ")", "\n", "last_key", "=", "arg", "[", "2", ":", "]", "\n", "continue", "\n", "", "assert", "last_key", "is", "not", "None", ",", "'{} is ambiguous, must begin with \\'--\\' if key, key missing if value'", "\n", "val_str", "=", "arg", "\n", "if", "last_key", "in", "[", "'config'", ",", "'cfg'", "]", ":", "\n", "            ", "cfg_path", "=", "expandpath", "(", "val_str", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "cfg_path", ")", ":", "\n", "                ", "cfg_path_proposal", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "sys", ".", "argv", "[", "0", "]", ")", ",", "cfg_path", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "cfg_path_proposal", ")", ":", "\n", "                    ", "cfg_path", "=", "cfg_path_proposal", "\n", "", "else", ":", "\n", "                    ", "assert", "False", ",", "'Config file not found in \\'{}\\''", ".", "format", "(", "val_str", ")", "\n", "", "", "cfg_filenamebase", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "cfg_path", ")", ")", "[", "0", "]", "\n", "with", "open", "(", "cfg_path", ")", "as", "fp", ":", "\n", "                ", "data", "=", "fp", ".", "read", "(", ")", ".", "replace", "(", "'__FILENAMEBASE__'", ",", "cfg_filenamebase", ")", "\n", "cfg_patch", "=", "yaml", ".", "safe_load", "(", "data", ")", "\n", "", "assert", "type", "(", "cfg_patch", ")", "is", "dict", ",", "'Config file \\'{}\\' must be a YAML dict'", "\n", "dict_deep_update", "(", "cfg", ",", "cfg_patch", ",", "overwrite_warns", "=", "cfg_warnings", ")", "\n", "last_key", "=", "None", "\n", "continue", "\n", "", "try", ":", "\n", "            ", "val_ast", "=", "ast", ".", "literal_eval", "(", "val_str", ")", "\n", "if", "type", "(", "val_ast", ")", "is", "dict", ":", "\n", "                ", "cfg_node", "=", "dict_deep_get", "(", "cfg", ",", "last_key", ",", "default", "=", "dict", "(", ")", ",", "create_if_missing", "=", "True", ")", "\n", "dict_deep_update", "(", "cfg_node", ",", "val_ast", ")", "\n", "", "elif", "last_key", ".", "count", "(", "'.'", ")", ">", "0", "and", "last_key", ".", "count", "(", "'-'", ")", "==", "0", ":", "\n", "                ", "dict_deep_put", "(", "cfg", ",", "last_key", ",", "val_ast", ",", "split_ch", "=", "'.'", ")", "\n", "", "else", ":", "\n", "                ", "dict_deep_put", "(", "cfg", ",", "last_key", ",", "val_ast", ",", "split_ch", "=", "'-'", ")", "\n", "", "", "except", "(", "SyntaxError", ",", "ValueError", ")", ":", "\n", "            ", "if", "last_key", ".", "count", "(", "'.'", ")", ">", "0", "and", "last_key", ".", "count", "(", "'-'", ")", "==", "0", ":", "\n", "                ", "dict_deep_put", "(", "cfg", ",", "last_key", ",", "val_str", ",", "split_ch", "=", "'.'", ")", "\n", "", "else", ":", "\n", "                ", "dict_deep_put", "(", "cfg", ",", "last_key", ",", "val_str", ",", "split_ch", "=", "'-'", ")", "\n", "", "", "last_key", "=", "None", "\n", "\n", "", "if", "cfg", ".", "get", "(", "\"assert_env_set\"", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "for", "e", "in", "cfg", "[", "\"assert_env_set\"", "]", ":", "\n", "            ", "assert", "e", "in", "os", ".", "environ", ",", "'Environment variable \"{}\" not set'", ".", "format", "(", "e", ")", "\n", "\n", "", "", "if", "'log_dir'", "in", "cfg", ":", "\n", "        ", "if", "'root_wandb'", "in", "cfg", ".", "keys", "(", ")", ":", "\n", "            ", "cfg", "[", "'wandb_dir'", "]", "=", "expandpath", "(", "os", ".", "path", ".", "join", "(", "cfg", "[", "'root_wandb'", "]", ",", "cfg", "[", "'log_dir'", "]", ")", ")", "\n", "", "if", "'root_logs'", "in", "cfg", ".", "keys", "(", ")", ":", "\n", "            ", "cfg", "[", "'log_dir'", "]", "=", "expandpath", "(", "os", ".", "path", ".", "join", "(", "cfg", "[", "'root_logs'", "]", ",", "cfg", "[", "'log_dir'", "]", ")", ")", "\n", "\n", "# convert dict to a one-tier namespace", "\n", "", "", "if", "as_namespace", ":", "\n", "        ", "cfg", "=", "convert_to_namespace", "(", "cfg", ")", "\n", "\n", "", "return", "cfg", ",", "cfg_warnings", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.convert_to_namespace": [[173, 181], ["GlobalConfig", "cfg.items", "setattr"], "function", ["None"], ["", "def", "convert_to_namespace", "(", "cfg", ")", ":", "\n", "    ", "class", "GlobalConfig", "(", "argparse", ".", "Namespace", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "namespace", "=", "GlobalConfig", "(", ")", "\n", "for", "k", ",", "v", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "setattr", "(", "namespace", ",", "k", ",", "v", ")", "\n", "", "return", "namespace", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.config.format_dict": [[183, 185], ["json.dumps"], "function", ["None"], ["", "def", "format_dict", "(", "d", ")", ":", "\n", "    ", "return", "json", ".", "dumps", "(", "d", ",", "indent", "=", "4", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_two": [[8, 18], ["el1.reshape.reshape", "el2.reshape.reshape", "el1.reshape.mm", "el1.mm.reshape"], "function", ["None"], ["def", "contract_two", "(", "el1", ",", "el2", ")", ":", "\n", "# type: (Tensor, Tensor) -> Tensor", "\n", "    ", "el1_shape", ",", "el1_rank", "=", "el1", ".", "shape", "[", ":", "-", "1", "]", ",", "el1", ".", "shape", "[", "-", "1", "]", "\n", "el2_rank", ",", "el2_shape", "=", "el2", ".", "shape", "[", "0", "]", ",", "el2", ".", "shape", "[", "1", ":", "]", "\n", "assert", "el1_rank", "==", "el2_rank", "\n", "el1", "=", "el1", ".", "reshape", "(", "-", "1", ",", "el1_rank", ")", "\n", "el2", "=", "el2", ".", "reshape", "(", "el2_rank", ",", "-", "1", ")", "\n", "el12", "=", "el1", ".", "mm", "(", "el2", ")", "\n", "out", "=", "el12", ".", "reshape", "(", "el1_shape", "+", "el2_shape", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_two_batch": [[20, 30], ["el1.reshape.reshape", "el2.reshape.reshape", "el1.reshape.bmm", "el1.bmm.reshape", "list", "list"], "function", ["None"], ["", "def", "contract_two_batch", "(", "el1", ",", "el2", ")", ":", "\n", "# type: (Tensor, Tensor) -> Tensor", "\n", "    ", "el1_batch", ",", "el1_shape", ",", "el1_rank", "=", "el1", ".", "shape", "[", "0", "]", ",", "el1", ".", "shape", "[", "1", ":", "-", "1", "]", ",", "el1", ".", "shape", "[", "-", "1", "]", "\n", "el2_batch", ",", "el2_rank", ",", "el2_shape", "=", "el2", ".", "shape", "[", "0", "]", ",", "el2", ".", "shape", "[", "1", "]", ",", "el2", ".", "shape", "[", "2", ":", "]", "\n", "assert", "el1_batch", "==", "el2_batch", "and", "el1_rank", "==", "el2_rank", "# produces TracerWarning -- safe to ignore", "\n", "el1", "=", "el1", ".", "reshape", "(", "el1_batch", ",", "-", "1", ",", "el1_rank", ")", "\n", "el2", "=", "el2", ".", "reshape", "(", "el2_batch", ",", "el2_rank", ",", "-", "1", ")", "\n", "el12", "=", "el1", ".", "bmm", "(", "el2", ")", "\n", "out", "=", "el12", ".", "reshape", "(", "[", "el1_batch", "]", "+", "list", "(", "el1_shape", ")", "+", "list", "(", "el2_shape", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_trace_outter": [[32, 40], ["torch.einsum", "t.squeeze().squeeze", "t.squeeze"], "function", ["None"], ["", "def", "contract_trace_outter", "(", "t", ")", ":", "\n", "# type: (Tensor) -> Tensor", "\n", "    ", "assert", "t", ".", "shape", "[", "0", "]", "==", "t", ".", "shape", "[", "-", "1", "]", "\n", "if", "t", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "        ", "out", "=", "torch", ".", "einsum", "(", "'i...i->...'", ",", "t", ")", "# TR", "\n", "", "else", ":", "\n", "        ", "out", "=", "t", ".", "squeeze", "(", "0", ")", ".", "squeeze", "(", "-", "1", ")", "# TT", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_trace_outter_batch": [[42, 50], ["torch.einsum", "t.squeeze().squeeze", "t.squeeze"], "function", ["None"], ["", "def", "contract_trace_outter_batch", "(", "t", ")", ":", "\n", "# type: (Tensor) -> Tensor", "\n", "    ", "assert", "t", ".", "shape", "[", "1", "]", "==", "t", ".", "shape", "[", "-", "1", "]", "\n", "if", "t", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "        ", "out", "=", "torch", ".", "einsum", "(", "'bi...i->b...'", ",", "t", ")", "# TR", "\n", "", "else", ":", "\n", "        ", "out", "=", "t", ".", "squeeze", "(", "1", ")", ".", "squeeze", "(", "-", "1", ")", "# TT", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_trace_last_two": [[52, 68], ["t.squeeze().squeeze", "torch.einsum", "torch.eye().view", "t.squeeze", "torch.tensor", "t.reshape().index_select().sum", "torch.eye", "range", "t.reshape().index_select", "t.dim", "t.dim", "t.dim", "t.reshape", "list"], "function", ["None"], ["", "def", "contract_trace_last_two", "(", "t", ",", "method", "=", "'index_select'", ")", ":", "\n", "# type: (Tensor) -> Tensor", "\n", "    ", "assert", "t", ".", "shape", "[", "-", "1", "]", "==", "t", ".", "shape", "[", "-", "2", "]", "\n", "if", "t", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "return", "t", ".", "squeeze", "(", "-", "1", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "method", "==", "'einsum'", ":", "\n", "        ", "out", "=", "torch", ".", "einsum", "(", "'...ii->...'", ",", "t", ")", "\n", "", "elif", "method", "==", "'muleye'", ":", "\n", "        ", "eye", "=", "torch", ".", "eye", "(", "t", ".", "shape", "[", "-", "1", "]", ",", "device", "=", "t", ".", "device", ")", ".", "view", "(", "[", "1", "]", "*", "(", "t", ".", "dim", "(", ")", "-", "2", ")", "+", "[", "t", ".", "shape", "[", "-", "1", "]", ",", "t", ".", "shape", "[", "-", "1", "]", "]", ")", "\n", "out", "=", "(", "t", "*", "eye", ")", ".", "sum", "(", "dim", "=", "[", "t", ".", "dim", "(", ")", "-", "1", ",", "t", ".", "dim", "(", ")", "-", "2", "]", ")", "\n", "", "elif", "method", "==", "'index_select'", ":", "\n", "        ", "ind", "=", "torch", ".", "tensor", "(", "range", "(", "0", ",", "t", ".", "shape", "[", "-", "1", "]", "**", "2", ",", "t", ".", "shape", "[", "-", "1", "]", "+", "1", ")", ",", "device", "=", "t", ".", "device", ")", "\n", "out", "=", "t", ".", "reshape", "(", "list", "(", "t", ".", "shape", "[", ":", "-", "2", "]", ")", "+", "[", "t", ".", "shape", "[", "-", "1", "]", "**", "2", "]", ")", ".", "index_select", "(", "dim", "=", "-", "1", ",", "index", "=", "ind", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.split_list_cores_equally": [[70, 92], ["range", "torch.tensor().prod().item", "list", "list", "len", "abs", "abs", "min", "itertools.accumulate", "reversed", "torch.tensor().prod", "list", "itertools.accumulate", "torch.tensor", "reversed"], "function", ["None"], ["", "def", "split_list_cores_equally", "(", "list_cores", ")", ":", "\n", "    ", "sz", "=", "[", "torch", ".", "tensor", "(", "a", ".", "shape", ")", ".", "prod", "(", ")", ".", "item", "(", ")", "for", "a", "in", "list_cores", "]", "# produces TracerWarning -- safe to ignore", "\n", "left_cum_sz", "=", "[", "0", "]", "+", "list", "(", "accumulate", "(", "sz", ")", ")", "\n", "right_cum_sz", "=", "list", "(", "reversed", "(", "list", "(", "accumulate", "(", "reversed", "(", "sz", ")", ")", ")", ")", ")", "+", "[", "0", "]", "\n", "min_join_dist", ",", "min_join_pos", ",", "min_join_left", "=", "None", ",", "None", ",", "None", "\n", "for", "pos", "in", "range", "(", "0", ",", "len", "(", "list_cores", ")", ",", "2", ")", ":", "\n", "        ", "sz_left", "=", "left_cum_sz", "[", "pos", "]", "\n", "sz_pos", "=", "sz", "[", "pos", "]", "\n", "sz_right", "=", "right_cum_sz", "[", "pos", "+", "1", "]", "\n", "#assert sz_left + sz_pos + sz_right == sum(sz)", "\n", "dist_join_left", "=", "abs", "(", "sz_left", "+", "sz_pos", "-", "sz_right", ")", "\n", "dist_join_right", "=", "abs", "(", "sz_right", "+", "sz_pos", "-", "sz_left", ")", "\n", "dist_join", "=", "min", "(", "dist_join_left", ",", "dist_join_right", ")", "\n", "if", "min_join_dist", "is", "None", "or", "min_join_dist", ">", "dist_join", ":", "\n", "            ", "min_join_dist", "=", "dist_join", "\n", "min_join_pos", "=", "pos", "\n", "min_join_left", "=", "dist_join_left", "<", "dist_join_right", "\n", "", "", "id_split_left_inclusive", "=", "min_join_pos", "if", "min_join_left", "else", "min_join_pos", "-", "1", "\n", "#assert id_split_left_inclusive in range(len(list_cores))", "\n", "list_left", "=", "list_cores", "[", ":", "id_split_left_inclusive", "+", "1", "]", "\n", "list_right", "=", "list_cores", "[", "id_split_left_inclusive", "+", "1", ":", "]", "\n", "return", "list_left", ",", "list_right", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_two_ring": [[97, 104], ["torch.einsum", "el1.dim", "el1.dim", "el2.dim", "el1.dim"], "function", ["None"], ["def", "contract_two_ring", "(", "el1", ",", "el2", ")", ":", "\n", "    ", "assert", "el1", ".", "shape", "[", "0", "]", "==", "el2", ".", "shape", "[", "-", "1", "]", "and", "el1", ".", "shape", "[", "-", "1", "]", "==", "el2", ".", "shape", "[", "0", "]", "\n", "dims_inner_L", "=", "ABC", "[", "2", ":", "2", "+", "(", "el1", ".", "dim", "(", ")", "-", "2", ")", "]", "\n", "dims_inner_R", "=", "ABC", "[", "2", "+", "(", "el1", ".", "dim", "(", ")", "-", "2", ")", ":", "2", "+", "(", "el1", ".", "dim", "(", ")", "-", "2", ")", "+", "(", "el2", ".", "dim", "(", ")", "-", "2", ")", "]", "\n", "einsum_prog", "=", "'a'", "+", "dims_inner_L", "+", "'b,b'", "+", "dims_inner_R", "+", "'a->'", "+", "dims_inner_L", "+", "dims_inner_R", "\n", "out", "=", "torch", ".", "einsum", "(", "einsum_prog", ",", "el1", ",", "el2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_two_ring_batch": [[106, 113], ["torch.einsum", "el1.dim", "el1.dim", "el2.dim", "el1.dim"], "function", ["None"], ["", "def", "contract_two_ring_batch", "(", "el1", ",", "el2", ")", ":", "\n", "    ", "assert", "el1", ".", "shape", "[", "0", "]", "==", "el2", ".", "shape", "[", "0", "]", "and", "el1", ".", "shape", "[", "1", "]", "==", "el2", ".", "shape", "[", "-", "1", "]", "and", "el1", ".", "shape", "[", "-", "1", "]", "==", "el2", ".", "shape", "[", "1", "]", "# produces TracerWarning -- safe to ignore", "\n", "dims_inner_L", "=", "ABC", "[", "3", ":", "3", "+", "(", "el1", ".", "dim", "(", ")", "-", "3", ")", "]", "\n", "dims_inner_R", "=", "ABC", "[", "3", "+", "(", "el1", ".", "dim", "(", ")", "-", "3", ")", ":", "3", "+", "(", "el1", ".", "dim", "(", ")", "-", "3", ")", "+", "(", "el2", ".", "dim", "(", ")", "-", "3", ")", "]", "\n", "einsum_prog", "=", "'ba'", "+", "dims_inner_L", "+", "'c,bc'", "+", "dims_inner_R", "+", "'a->b'", "+", "dims_inner_L", "+", "dims_inner_R", "\n", "out", "=", "torch", ".", "einsum", "(", "einsum_prog", ",", "el1", ",", "el2", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep": [[115, 125], ["len", "list_cores.pop", "list_cores.pop", "out.append", "len", "list_cores.pop", "out.append", "tensor_contraction.contract_two"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_two"], ["", "def", "contract_sequence_hierarchical_one_sweep", "(", "list_cores", ")", ":", "\n", "    ", "out", "=", "[", "]", "\n", "while", "len", "(", "list_cores", ")", ">=", "2", ":", "\n", "        ", "el1", "=", "list_cores", ".", "pop", "(", "0", ")", "\n", "el2", "=", "list_cores", ".", "pop", "(", "0", ")", "\n", "out", ".", "append", "(", "contract_two", "(", "el1", ",", "el2", ")", ")", "\n", "", "if", "len", "(", "list_cores", ")", ">", "0", ":", "\n", "        ", "el", "=", "list_cores", ".", "pop", "(", "0", ")", "\n", "out", ".", "append", "(", "el", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep_v2": [[127, 146], ["len", "len", "tensor_contraction.contract_two_ring", "tensor_contraction.contract_sequence_hierarchical_one_sweep", "tensor_contraction.split_list_cores_equally", "tensor_contraction.contract_sequence_hierarchical_one_sweep", "len", "tensor_contraction.contract_sequence_hierarchical_one_sweep", "tensor_contraction.contract_sequence_hierarchical_one_sweep", "len", "len"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_two_ring", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.split_list_cores_equally", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep"], ["", "def", "contract_sequence_hierarchical_one_sweep_v2", "(", "list_cores", ")", ":", "\n", "    ", "\"\"\"\n    Contracts pairs and tries to get equally-sized pair in the penultimate step, in order to apply efficient merge+trace\n    \"\"\"", "\n", "if", "len", "(", "list_cores", ")", "<", "2", ":", "\n", "        ", "raise", "ValueError", "\n", "", "elif", "len", "(", "list_cores", ")", "==", "2", ":", "\n", "        ", "out", "=", "contract_two_ring", "(", "*", "list_cores", ")", "\n", "", "elif", "len", "(", "list_cores", ")", "%", "2", "==", "0", ":", "\n", "        ", "out", "=", "contract_sequence_hierarchical_one_sweep", "(", "list_cores", ")", "\n", "", "else", ":", "\n", "        ", "list_left", ",", "list_right", "=", "split_list_cores_equally", "(", "list_cores", ")", "\n", "out", "=", "contract_sequence_hierarchical_one_sweep", "(", "list_left", ")", "\n", "if", "len", "(", "list_right", ")", "%", "2", "==", "1", "and", "len", "(", "list_right", ")", ">", "1", ":", "\n", "            ", "out", "+=", "[", "list_right", "[", "0", "]", "]", "\n", "out", "+=", "contract_sequence_hierarchical_one_sweep", "(", "list_right", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "contract_sequence_hierarchical_one_sweep", "(", "list_right", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep_batch": [[148, 158], ["len", "list_cores.pop", "list_cores.pop", "out.append", "len", "list_cores.pop", "out.append", "tensor_contraction.contract_two_batch"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_two_batch"], ["", "def", "contract_sequence_hierarchical_one_sweep_batch", "(", "list_cores", ")", ":", "\n", "    ", "out", "=", "[", "]", "\n", "while", "len", "(", "list_cores", ")", ">=", "2", ":", "\n", "        ", "el1", "=", "list_cores", ".", "pop", "(", "0", ")", "\n", "el2", "=", "list_cores", ".", "pop", "(", "0", ")", "\n", "out", ".", "append", "(", "contract_two_batch", "(", "el1", ",", "el2", ")", ")", "\n", "", "if", "len", "(", "list_cores", ")", ">", "0", ":", "\n", "        ", "el", "=", "list_cores", ".", "pop", "(", "0", ")", "\n", "out", ".", "append", "(", "el", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep_batch_v2": [[160, 176], ["len", "len", "tensor_contraction.contract_two_ring_batch", "tensor_contraction.contract_sequence_hierarchical_one_sweep_batch", "tensor_contraction.split_list_cores_equally", "tensor_contraction.contract_sequence_hierarchical_one_sweep_batch", "len", "tensor_contraction.contract_sequence_hierarchical_one_sweep_batch", "tensor_contraction.contract_sequence_hierarchical_one_sweep_batch", "len", "len"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_two_ring_batch", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep_batch", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.split_list_cores_equally", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep_batch", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep_batch", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep_batch"], ["", "def", "contract_sequence_hierarchical_one_sweep_batch_v2", "(", "list_cores", ")", ":", "\n", "    ", "if", "len", "(", "list_cores", ")", "<", "2", ":", "\n", "        ", "raise", "ValueError", "\n", "", "elif", "len", "(", "list_cores", ")", "==", "2", ":", "\n", "        ", "out", "=", "contract_two_ring_batch", "(", "*", "list_cores", ")", "\n", "", "elif", "len", "(", "list_cores", ")", "%", "2", "==", "0", ":", "\n", "        ", "out", "=", "contract_sequence_hierarchical_one_sweep_batch", "(", "list_cores", ")", "\n", "", "else", ":", "\n", "        ", "list_left", ",", "list_right", "=", "split_list_cores_equally", "(", "list_cores", ")", "\n", "out", "=", "contract_sequence_hierarchical_one_sweep_batch", "(", "list_left", ")", "\n", "if", "len", "(", "list_right", ")", "%", "2", "==", "1", "and", "len", "(", "list_right", ")", ">", "1", ":", "\n", "            ", "out", "+=", "[", "list_right", "[", "0", "]", "]", "\n", "out", "+=", "contract_sequence_hierarchical_one_sweep_batch", "(", "list_right", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "out", "+=", "contract_sequence_hierarchical_one_sweep_batch", "(", "list_right", ")", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical": [[178, 185], ["list", "tensor_contraction.contract_sequence_hierarchical_one_sweep", "len"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep"], ["", "def", "contract_sequence_hierarchical", "(", "*", "list_cores", ")", ":", "\n", "    ", "list_cores", "=", "list", "(", "list_cores", ")", "\n", "while", "True", ":", "\n", "        ", "list_cores", "=", "contract_sequence_hierarchical_one_sweep", "(", "list_cores", ")", "\n", "if", "len", "(", "list_cores", ")", "==", "1", ":", "\n", "            ", "break", "\n", "", "", "return", "list_cores", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_batch": [[187, 194], ["list", "tensor_contraction.contract_sequence_hierarchical_one_sweep_batch", "len"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep_batch"], ["", "def", "contract_sequence_hierarchical_batch", "(", "*", "list_cores", ")", ":", "\n", "    ", "list_cores", "=", "list", "(", "list_cores", ")", "\n", "while", "True", ":", "\n", "        ", "list_cores", "=", "contract_sequence_hierarchical_one_sweep_batch", "(", "list_cores", ")", "\n", "if", "len", "(", "list_cores", ")", "==", "1", ":", "\n", "            ", "break", "\n", "", "", "return", "list_cores", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_composition_hierarchical": [[196, 200], ["tensor_contraction.contract_sequence_hierarchical", "tensor_contraction.contract_trace_outter"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_trace_outter"], ["", "def", "contract_composition_hierarchical", "(", "*", "list_cores", ")", ":", "\n", "    ", "out", "=", "contract_sequence_hierarchical", "(", "*", "list_cores", ")", "\n", "out", "=", "contract_trace_outter", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_composition_hierarchical_batch": [[202, 206], ["tensor_contraction.contract_sequence_hierarchical_batch", "tensor_contraction.contract_trace_outter_batch"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_batch", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_trace_outter_batch"], ["", "def", "contract_composition_hierarchical_batch", "(", "*", "list_cores", ")", ":", "\n", "    ", "out", "=", "contract_sequence_hierarchical_batch", "(", "*", "list_cores", ")", "\n", "out", "=", "contract_trace_outter_batch", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_composition_hierarchical_batch_v2": [[208, 215], ["list", "tensor_contraction.contract_sequence_hierarchical_one_sweep_batch_v2", "type"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep_batch_v2"], ["", "def", "contract_composition_hierarchical_batch_v2", "(", "*", "list_cores", ")", ":", "\n", "    ", "list_cores", "=", "list", "(", "list_cores", ")", "\n", "while", "True", ":", "\n", "        ", "list_cores", "=", "contract_sequence_hierarchical_one_sweep_batch_v2", "(", "list_cores", ")", "\n", "if", "type", "(", "list_cores", ")", "is", "not", "list", ":", "\n", "            ", "break", "\n", "", "", "return", "list_cores", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_composition_sequential": [[217, 224], ["list", "tensor_contraction.contract_trace_outter", "tensor_contraction.contract_two"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_trace_outter", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_two"], ["", "def", "contract_composition_sequential", "(", "*", "list_cores", ")", ":", "\n", "    ", "list_cores", "=", "list", "(", "list_cores", ")", "\n", "out", "=", "list_cores", "[", "0", "]", "\n", "for", "core", "in", "list_cores", "[", "1", ":", "]", ":", "\n", "        ", "out", "=", "contract_two", "(", "out", ",", "core", ")", "\n", "", "out", "=", "contract_trace_outter", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.compute_contraction_fn": [[226, 259], ["all", "range", "opt_einsum.contract_expression", "opt_einsum.parser.get_symbol", "len", "tensor_contraction.compute_contraction_fn.next"], "function", ["None"], ["", "def", "compute_contraction_fn", "(", "core_shapes", ")", ":", "\n", "    ", "assert", "all", "(", "[", "len", "(", "shape", ")", "==", "3", "for", "shape", "in", "core_shapes", "]", ")", "# produces TracerWarning -- safe to ignore", "\n", "next_sym", "=", "0", "\n", "def", "next", "(", ")", ":", "\n", "        ", "nonlocal", "next_sym", "\n", "s", "=", "get_symbol", "(", "next_sym", ")", "\n", "next_sym", "+=", "1", "\n", "return", "s", "\n", "", "equation_left", "=", "\"\"", "\n", "equation_right", "=", "\"\"", "\n", "letter_core0_rank_left", "=", "None", "\n", "letter_core_last_rank_right", "=", "None", "\n", "for", "i", "in", "range", "(", "len", "(", "core_shapes", ")", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "letter_rank_left", "=", "next", "(", ")", "\n", "letter_core0_rank_left", "=", "letter_rank_left", "\n", "", "else", ":", "\n", "            ", "letter_rank_left", "=", "letter_core_last_rank_right", "\n", "", "letter_mode", "=", "next", "(", ")", "\n", "if", "i", "==", "len", "(", "core_shapes", ")", "-", "1", ":", "\n", "            ", "letter_rank_right", "=", "letter_core0_rank_left", "\n", "", "else", ":", "\n", "            ", "letter_rank_right", "=", "next", "(", ")", "\n", "letter_core_last_rank_right", "=", "letter_rank_right", "\n", "", "if", "i", ">", "0", ":", "\n", "            ", "equation_left", "+=", "','", "\n", "", "equation_left", "+=", "letter_rank_left", "\n", "equation_left", "+=", "letter_mode", "\n", "equation_left", "+=", "letter_rank_right", "\n", "equation_right", "+=", "letter_mode", "\n", "", "equation", "=", "equation_left", "+", "'->'", "+", "equation_right", "\n", "contraction_fn", "=", "opt_einsum", ".", "contract_expression", "(", "equation", ",", "*", "core_shapes", ",", "optimize", "=", "'dp'", ")", "\n", "return", "contraction_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.resolve_contraction_fn": [[261, 270], ["tensor_contraction.compute_contraction_fn", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.compute_contraction_fn"], ["", "def", "resolve_contraction_fn", "(", "method", ",", "core_shapes", ")", ":", "\n", "    ", "if", "method", "==", "'opt_einsum'", ":", "\n", "        ", "return", "compute_contraction_fn", "(", "core_shapes", ")", "\n", "", "elif", "method", "==", "'hierarchical'", ":", "\n", "        ", "return", "contract_composition_hierarchical", "\n", "", "elif", "method", "==", "'sequential'", ":", "\n", "        ", "return", "contract_composition_sequential", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'Unknown tensor contraction method {method}'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.module_surgery.net_prepare_training": [[7, 107], ["src.utils.helpers.get_statedict_num_params", "src.utils.helpers.deep_transform", "basis_tensors_proxy.instantiate_parameters", "basis_module.num_parameters", "src.utils.helpers.get_statedict_num_params", "src.utils.helpers.get_statedict_num_params", "src.utils.helpers.get_statedict_num_params", "src.utils.helpers.get_module_num_params", "src.utils.helpers.get_module_num_params", "isinstance", "replacement_cls", "torch.tensor().prod().item", "replacement_cls.num_parameters", "net.state_dict", "basis_tensors_proxy.tbasis_weights_factory.state_dict", "basis_module.state_dict", "net.state_dict", "abs", "abs", "abs", "abs", "abs", "mark_module_unprocessed"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.get_statedict_num_params", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.deep_transform", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.instantiate_parameters", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLayerBase.num_parameters", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.get_statedict_num_params", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.get_statedict_num_params", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.get_statedict_num_params", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.get_module_num_params", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.get_module_num_params", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLayerBase.num_parameters", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasis.state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasis.state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasis.state_dict", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasis.state_dict"], ["def", "net_prepare_training", "(", "net", ",", "basis_module", ",", "basis_tensors_proxy", ",", "cfg", ",", "net_prefix", "=", "None", ")", ":", "\n", "\n", "    ", "def", "cb_compress", "(", "module", ",", "prefix", ",", "opaque", ")", ":", "\n", "        ", "sz_module_total", "=", "get_module_num_params", "(", "module", ",", "recurse", "=", "False", ",", "include_buffers", "=", "True", ")", "\n", "sz_module_param", "=", "get_module_num_params", "(", "module", ",", "recurse", "=", "False", ",", "include_buffers", "=", "False", ")", "\n", "opaque", "[", "'size_original_total'", "]", "+=", "sz_module_total", "\n", "opaque", "[", "'size_original_param'", "]", "+=", "sz_module_param", "\n", "\n", "def", "mark_module_unprocessed", "(", ")", ":", "\n", "            ", "opaque", "[", "'size_incompressible_total'", "]", "+=", "sz_module_total", "\n", "opaque", "[", "'size_incompressible_param'", "]", "+=", "sz_module_param", "\n", "\n", "", "if", "prefix", "in", "cfg", ".", "module_names_ignored", ":", "\n", "            ", "mark_module_unprocessed", "(", ")", "\n", "return", "module", "\n", "\n", "", "if", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvNd", ")", ":", "\n", "            ", "replacement_cls", "=", "TBasisConvNd", "\n", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "Linear", ")", ":", "\n", "            ", "replacement_cls", "=", "TBasisLinear", "\n", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "batchnorm", ".", "_BatchNorm", ")", ":", "\n", "            ", "opaque", "[", "'size_incompressible_total'", "]", "+=", "get_module_num_params", "(", "module", ",", "recurse", "=", "True", ",", "include_buffers", "=", "True", ")", "\n", "opaque", "[", "'size_incompressible_param'", "]", "+=", "get_module_num_params", "(", "module", ",", "recurse", "=", "True", ",", "include_buffers", "=", "False", ")", "\n", "return", "module", "\n", "", "else", ":", "\n", "            ", "mark_module_unprocessed", "(", ")", "\n", "return", "module", "\n", "\n", "", "replacement_module", "=", "replacement_cls", "(", "\n", "module", ",", "\n", "basis_module", ",", "\n", "basis_tensors_proxy", ",", "\n", "contraction_method", "=", "cfg", ".", "contraction_method", ",", "\n", "rank_adaptation", "=", "cfg", ".", "rank_adaptation", ",", "\n", "permute_and_group_factors", "=", "cfg", ".", "permute_and_group_factors", ",", "\n", "verbose", "=", "True", ",", "\n", "name", "=", "prefix", ",", "\n", ")", "\n", "\n", "sz_weight_unparam", "=", "torch", ".", "tensor", "(", "module", ".", "weight", ".", "shape", ")", ".", "prod", "(", ")", ".", "item", "(", ")", "\n", "sz_weight_param", "=", "replacement_module", ".", "num_parameters", "(", ")", "\n", "sz_bias", "=", "module", ".", "bias", ".", "numel", "(", ")", "if", "module", ".", "bias", "is", "not", "None", "else", "0", "\n", "\n", "if", "sz_weight_param", ">", "sz_weight_unparam", ":", "\n", "            ", "print", "(", "f'Module {prefix} original size is smaller than compressed: {sz_weight_unparam} < {sz_weight_param}'", ")", "\n", "\n", "", "opaque", "[", "'size_incompressible_total'", "]", "+=", "sz_bias", "\n", "opaque", "[", "'size_incompressible_param'", "]", "+=", "sz_bias", "\n", "opaque", "[", "'size_compressible_unparameterized'", "]", "+=", "sz_weight_unparam", "\n", "opaque", "[", "'size_compressible_parameterized'", "]", "+=", "sz_weight_param", "\n", "\n", "return", "replacement_module", "\n", "\n", "", "out", "=", "{", "\n", "'size_original_total'", ":", "0", ",", "\n", "'size_original_param'", ":", "0", ",", "\n", "'size_incompressible_total'", ":", "0", ",", "\n", "'size_incompressible_param'", ":", "0", ",", "\n", "'size_compressible_unparameterized'", ":", "0", ",", "\n", "'size_compressible_parameterized'", ":", "0", ",", "\n", "}", "\n", "\n", "szcheck_original_total", "=", "get_statedict_num_params", "(", "net", ".", "state_dict", "(", ")", ")", "\n", "\n", "deep_transform", "(", "net", ",", "cb_compress", ",", "prefix", "=", "net_prefix", ",", "opaque", "=", "out", ")", "\n", "basis_tensors_proxy", ".", "instantiate_parameters", "(", ")", "\n", "\n", "sz_basis", "=", "basis_module", ".", "num_parameters", "(", ")", "\n", "sz_coef", "=", "get_statedict_num_params", "(", "basis_tensors_proxy", ".", "tbasis_weights_factory", ".", "state_dict", "(", ")", ")", "\n", "\n", "out", "[", "'size_basis'", "]", "=", "sz_basis", "\n", "out", "[", "'size_coef'", "]", "=", "sz_coef", "\n", "\n", "out", "[", "'compression_compressible'", "]", "=", "100", "*", "out", "[", "'size_compressible_parameterized'", "]", "/", "out", "[", "'size_compressible_unparameterized'", "]", "\n", "out", "[", "'compression_limit_total'", "]", "=", "100", "*", "out", "[", "'size_incompressible_total'", "]", "/", "out", "[", "'size_original_total'", "]", "\n", "out", "[", "'compression_limit_param'", "]", "=", "100", "*", "out", "[", "'size_incompressible_param'", "]", "/", "out", "[", "'size_original_param'", "]", "\n", "out", "[", "'compression_net_total_without_basis'", "]", "=", "100", "*", "(", "out", "[", "'size_compressible_parameterized'", "]", "+", "out", "[", "'size_incompressible_total'", "]", ")", "/", "out", "[", "'size_original_total'", "]", "\n", "out", "[", "'compression_net_total_with_basis'", "]", "=", "out", "[", "'compression_net_total_without_basis'", "]", "+", "100", "*", "sz_basis", "/", "out", "[", "'size_original_total'", "]", "\n", "out", "[", "'compression_net_param_without_basis'", "]", "=", "100", "*", "(", "out", "[", "'size_compressible_parameterized'", "]", "+", "out", "[", "'size_incompressible_param'", "]", ")", "/", "out", "[", "'size_original_param'", "]", "\n", "out", "[", "'compression_net_param_with_basis'", "]", "=", "out", "[", "'compression_net_param_without_basis'", "]", "+", "100", "*", "sz_basis", "/", "out", "[", "'size_original_param'", "]", "\n", "\n", "szcheck_basis", "=", "get_statedict_num_params", "(", "basis_module", ".", "state_dict", "(", ")", ")", "\n", "szcheck_incompressible_total", "=", "get_statedict_num_params", "(", "net", ".", "state_dict", "(", ")", ")", "\n", "compressioncheck_net_total_with_basis", "=", "100", "*", "(", "sz_basis", "+", "sz_coef", "+", "szcheck_incompressible_total", ")", "/", "szcheck_original_total", "\n", "compressioncheck_net_total_without_basis", "=", "100", "*", "(", "sz_coef", "+", "szcheck_incompressible_total", ")", "/", "szcheck_original_total", "\n", "\n", "assert", "abs", "(", "out", "[", "'compression_net_total_with_basis'", "]", "-", "compressioncheck_net_total_with_basis", ")", "<", "0.001", "\n", "assert", "abs", "(", "out", "[", "'compression_net_total_without_basis'", "]", "-", "compressioncheck_net_total_without_basis", ")", "<", "0.001", "\n", "assert", "abs", "(", "out", "[", "'size_incompressible_total'", "]", "-", "szcheck_incompressible_total", ")", "<", "0.001", "\n", "assert", "abs", "(", "sz_basis", "-", "szcheck_basis", ")", "<", "0.001", "\n", "assert", "abs", "(", "out", "[", "'size_original_total'", "]", "-", "szcheck_original_total", ")", "<", "0.001", "\n", "\n", "return", "out", "\n", "", ""]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.prime_factors": [[8, 17], ["range", "factors.append", "int", "factors.append", "numpy.sqrt"], "function", ["None"], ["def", "prime_factors", "(", "num", ")", ":", "\n", "    ", "factors", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "2", ",", "int", "(", "np", ".", "sqrt", "(", "num", ")", ")", "+", "1", ")", ":", "\n", "        ", "while", "num", "%", "i", "==", "0", ":", "\n", "            ", "factors", ".", "append", "(", "i", ")", "\n", "num", "//=", "i", "\n", "", "", "if", "num", ">", "1", ":", "\n", "        ", "factors", ".", "append", "(", "num", ")", "\n", "", "return", "factors", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.explode_qtt_shape": [[19, 24], ["tuple", "tensor_shape_tools.prime_factors", "int"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.prime_factors"], ["", "def", "explode_qtt_shape", "(", "shape", ",", "is_batched", ")", ":", "\n", "    ", "shape_qtt", "=", "[", "shape", "[", "0", "]", "]", "if", "is_batched", "else", "[", "]", "\n", "for", "mode", "in", "shape", "[", "(", "1", "if", "is_batched", "else", "0", ")", ":", "]", ":", "\n", "        ", "shape_qtt", "+=", "prime_factors", "(", "int", "(", "mode", ")", ")", "\n", "", "return", "tuple", "(", "shape_qtt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.compute_z_order": [[26, 87], ["len", "max", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "factors_dst_id.reshape().tolist", "factors_dst.reshape.tolist", "factors_reverse_id.T.reshape().tolist.T.reshape().tolist", "tensor_shape_tools.prime_factors", "len", "list", "torch.tensor.append", "factors_dst.reshape.prod", "factors_dst.reshape.reshape", "len", "range", "factors_dst_id.reshape", "factors_dst.reshape.reshape().tolist", "factors_reverse_id.T.reshape().tolist.T.reshape", "factors_dst.reshape.reshape", "torch.ones_like", "torch.ones_like"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.prime_factors"], ["", "def", "compute_z_order", "(", "shape_src", ",", "group_tuples", "=", "True", ",", "pad_groups_at_high_scales", "=", "True", ")", ":", "\n", "    ", "num_dims_src", "=", "len", "(", "shape_src", ")", "\n", "\n", "factors_src", "=", "[", "prime_factors", "(", "dim", ")", "for", "dim", "in", "shape_src", "]", "\n", "num_groups", "=", "max", "(", "[", "len", "(", "f", ")", "for", "f", "in", "factors_src", "]", ")", "\n", "\n", "shape_factors_src", "=", "[", "]", "\n", "factors_src_id", "=", "[", "]", "\n", "\n", "cur_id", "=", "0", "\n", "for", "i", "in", "range", "(", "num_dims_src", ")", ":", "\n", "        ", "f_len", "=", "len", "(", "factors_src", "[", "i", "]", ")", "\n", "shape_factors_src", "+=", "factors_src", "[", "i", "]", "\n", "\n", "cur_factors_src_id", "=", "list", "(", "range", "(", "cur_id", ",", "cur_id", "+", "f_len", ")", ")", "\n", "cur_id", "+=", "f_len", "\n", "\n", "# pad factors_src with dummy dimensions", "\n", "if", "f_len", "<", "num_groups", ":", "\n", "            ", "dummy_count", "=", "(", "num_groups", "-", "f_len", ")", "\n", "if", "pad_groups_at_high_scales", ":", "\n", "                ", "factors_src", "[", "i", "]", "=", "[", "1", "]", "*", "dummy_count", "+", "factors_src", "[", "i", "]", "\n", "cur_factors_src_id", "=", "[", "-", "1", "]", "*", "dummy_count", "+", "cur_factors_src_id", "\n", "", "else", ":", "\n", "                ", "factors_src", "[", "i", "]", "+=", "[", "1", "]", "*", "dummy_count", "\n", "cur_factors_src_id", "+=", "[", "-", "1", "]", "*", "dummy_count", "\n", "\n", "", "", "factors_src_id", ".", "append", "(", "cur_factors_src_id", ")", "\n", "\n", "", "factors_src", "=", "torch", ".", "tensor", "(", "factors_src", ")", "\n", "factors_src_id", "=", "torch", ".", "tensor", "(", "factors_src_id", ")", "\n", "\n", "factors_dst", "=", "factors_src", ".", "T", "\n", "factors_dst_with_unary_modes", "=", "factors_dst", "\n", "factors_dst_id", "=", "factors_src_id", ".", "T", "\n", "\n", "permute_factors_src_to_dst", "=", "factors_dst_id", ".", "reshape", "(", "-", "1", ",", ")", ".", "tolist", "(", ")", "\n", "permute_factors_src_to_dst", "=", "[", "a", "for", "a", "in", "permute_factors_src_to_dst", "if", "a", ">=", "0", "]", "\n", "\n", "shape_factors_dst", "=", "[", "a", "for", "a", "in", "factors_dst", ".", "reshape", "(", "-", "1", ",", ")", ".", "tolist", "(", ")", "if", "a", ">", "1", "]", "\n", "if", "group_tuples", ":", "\n", "        ", "factors_dst", "=", "factors_dst", ".", "prod", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "factors_dst", "=", "factors_dst", ".", "reshape", "(", "-", "1", ")", "\n", "factors_dst", "=", "factors_dst", "[", "factors_dst", ">", "1", "]", "\n", "", "shape_dst", "=", "factors_dst", ".", "tolist", "(", ")", "\n", "factors_reverse_id", "=", "(", "torch", ".", "ones_like", "(", "factors_dst_id", ")", "*", "(", "factors_dst_id", ">=", "0", ")", ".", "int", "(", ")", ")", ".", "reshape", "(", "-", "1", ",", ")", ".", "cumsum", "(", "\n", "dim", "=", "0", ")", ".", "view", "(", "factors_dst_id", ".", "shape", ")", "\n", "factors_reverse_id", "-=", "1", "\n", "factors_reverse_id", "[", "factors_dst_id", "<", "0", "]", "=", "-", "1", "\n", "factors_reverse_id", "=", "factors_reverse_id", ".", "T", ".", "reshape", "(", "-", "1", ",", ")", ".", "tolist", "(", ")", "\n", "permute_factors_dst_to_src", "=", "[", "a", "for", "a", "in", "factors_reverse_id", "if", "a", ">=", "0", "]", "\n", "\n", "return", "{", "\n", "'shape_src'", ":", "shape_src", ",", "\n", "'shape_factors_src'", ":", "shape_factors_src", ",", "\n", "'permute_factors_src_to_dst'", ":", "permute_factors_src_to_dst", ",", "\n", "'permute_factors_dst_to_src'", ":", "permute_factors_dst_to_src", ",", "\n", "'shape_factors_dst'", ":", "shape_factors_dst", ",", "\n", "'shape_dst'", ":", "shape_dst", ",", "\n", "'factors_dst_with_unary_modes'", ":", "factors_dst_with_unary_modes", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.explode_spatial_dimensions_to_qtt_z_order": [[90, 117], ["torch.is_tensor", "torch.is_tensor", "list", "list", "tensor_shape_tools.compute_z_order", "len", "list", "data.reshape.view", "data.reshape.permute", "data.reshape.reshape", "data.reshape.dim", "range", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.compute_z_order"], ["", "def", "explode_spatial_dimensions_to_qtt_z_order", "(", "data", ",", "num_spatial_dims", ")", ":", "\n", "    ", "\"\"\"\n    Performs dimensions factorization and Z-ordering\n    Spatial dimensions are expected last\n    \"\"\"", "\n", "assert", "num_spatial_dims", ">", "1", ",", "'Z-order should be used with 2- and more-D data'", "\n", "assert", "torch", ".", "is_tensor", "(", "data", ")", "\n", "assert", "data", ".", "dim", "(", ")", ">=", "num_spatial_dims", "\n", "\n", "shape_non_spatial", "=", "list", "(", "data", ".", "shape", "[", ":", "-", "num_spatial_dims", "]", ")", "\n", "shape_spatial_src", "=", "list", "(", "data", ".", "shape", "[", "-", "num_spatial_dims", ":", "]", ")", "\n", "\n", "shape_plan", "=", "compute_z_order", "(", "shape_spatial_src", ")", "\n", "\n", "shape_factors_src", "=", "shape_non_spatial", "+", "shape_plan", "[", "'shape_factors_src'", "]", "\n", "shape_dst", "=", "shape_non_spatial", "+", "shape_plan", "[", "'shape_dst'", "]", "\n", "\n", "num_non_spatial", "=", "len", "(", "shape_non_spatial", ")", "\n", "ids_non_spatial", "=", "list", "(", "range", "(", "num_non_spatial", ")", ")", "\n", "permute_factors_src_to_dst", "=", "ids_non_spatial", "+", "(", "torch", ".", "tensor", "(", "shape_plan", "[", "'permute_factors_src_to_dst'", "]", ")", "+", "num_non_spatial", ")", ".", "tolist", "(", ")", "\n", "\n", "data", "=", "data", ".", "view", "(", "shape_factors_src", ")", "\n", "data", "=", "data", ".", "permute", "(", "permute_factors_src_to_dst", ")", "\n", "data", "=", "data", ".", "reshape", "(", "shape_dst", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.assemble_spatial_dimensions_from_qtt_z_order": [[119, 144], ["torch.is_tensor", "torch.is_tensor", "list", "tensor_shape_tools.compute_z_order", "len", "list", "data.reshape.view", "data.reshape.permute", "data.reshape.reshape", "data.reshape.numel", "torch.tensor().prod", "torch.tensor().prod", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.compute_z_order"], ["", "def", "assemble_spatial_dimensions_from_qtt_z_order", "(", "data", ",", "num_spatial_dims", ",", "data_original_shape", ")", ":", "\n", "    ", "\"\"\"\n    Performs inverse dimensions factorization and Z-ordering\n    Spatial dimensions are expected last\n    \"\"\"", "\n", "assert", "num_spatial_dims", ">", "1", ",", "'Z-order should be used with 2- and more-D data'", "\n", "assert", "torch", ".", "is_tensor", "(", "data", ")", "\n", "assert", "data", ".", "numel", "(", ")", "==", "torch", ".", "tensor", "(", "data_original_shape", ")", ".", "prod", "(", ")", "\n", "\n", "shape_non_spatial", "=", "list", "(", "data_original_shape", "[", ":", "-", "num_spatial_dims", "]", ")", "\n", "\n", "shape_plan", "=", "compute_z_order", "(", "data_original_shape", "[", "-", "num_spatial_dims", ":", "]", ")", "\n", "\n", "shape_factors_dst", "=", "shape_non_spatial", "+", "shape_plan", "[", "'shape_factors_dst'", "]", "\n", "\n", "num_non_spatial", "=", "len", "(", "shape_non_spatial", ")", "\n", "ids_non_spatial", "=", "list", "(", "range", "(", "num_non_spatial", ")", ")", "\n", "permute_factors_dst_to_src", "=", "ids_non_spatial", "+", "(", "torch", ".", "tensor", "(", "shape_plan", "[", "'permute_factors_dst_to_src'", "]", ")", "+", "num_non_spatial", ")", ".", "tolist", "(", ")", "\n", "\n", "data", "=", "data", ".", "view", "(", "shape_factors_dst", ")", "\n", "data", "=", "data", ".", "permute", "(", "permute_factors_dst_to_src", ")", "\n", "data", "=", "data", ".", "reshape", "(", "data_original_shape", ")", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.compute_pad_to_powers_plan": [[146, 156], ["zip", "int", "int", "math.ceil", "math.ceil", "math.log2", "math.log", "math.log"], "function", ["None"], ["", "def", "compute_pad_to_powers_plan", "(", "x_shape", ",", "base", "=", "2", ")", ":", "\n", "    ", "if", "base", "==", "2", ":", "\n", "        ", "x_shape_padded", "=", "[", "2", "**", "int", "(", "math", ".", "ceil", "(", "math", ".", "log2", "(", "m", ")", ")", ")", "for", "m", "in", "x_shape", "]", "\n", "", "else", ":", "\n", "        ", "x_shape_padded", "=", "[", "base", "**", "int", "(", "math", ".", "ceil", "(", "math", ".", "log", "(", "m", ")", "/", "math", ".", "log", "(", "base", ")", ")", ")", "for", "m", "in", "x_shape", "]", "\n", "", "paddings", "=", "[", "mp", "-", "m", "for", "mp", ",", "m", "in", "zip", "(", "x_shape_padded", ",", "x_shape", ")", "]", "\n", "return", "{", "\n", "'shape_src'", ":", "x_shape", ",", "\n", "'paddings'", ":", "paddings", ",", "\n", "'shape_dst'", ":", "x_shape_padded", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.pad_fwd_plan": [[159, 172], ["range", "list", "x.reshape.dim", "x.reshape.permute", "x.reshape.reshape", "torch.pad", "x.reshape.reshape", "range", "x.reshape.dim"], "function", ["None"], ["", "def", "pad_fwd_plan", "(", "x", ",", "plan", ")", ":", "\n", "# TODO: Improve when F.pad accepts dim argument", "\n", "    ", "permute_roll", "=", "list", "(", "range", "(", "1", ",", "x", ".", "dim", "(", ")", ")", ")", "+", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "x", ".", "dim", "(", ")", ")", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "permute_roll", ")", "\n", "m", ",", "p", "=", "x", ".", "shape", "[", "-", "1", "]", ",", "plan", "[", "'paddings'", "]", "[", "i", "]", "\n", "if", "p", "==", "0", ":", "\n", "            ", "continue", "\n", "", "shape_invariant", "=", "x", ".", "shape", "[", ":", "-", "1", "]", "\n", "x", "=", "x", ".", "reshape", "(", "-", "1", ",", "1", ",", "m", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "[", "0", ",", "p", "]", ",", "'replicate'", ")", "\n", "x", "=", "x", ".", "reshape", "(", "*", "shape_invariant", ",", "m", "+", "p", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.tensor_truncate_shape": [[174, 177], ["slice"], "function", ["None"], ["", "def", "tensor_truncate_shape", "(", "x", ",", "shape", ")", ":", "\n", "    ", "slices", "=", "[", "slice", "(", "a", ")", "for", "a", "in", "shape", "]", "\n", "return", "x", "[", "slices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.pad_inv_plan": [[179, 181], ["tensor_shape_tools.tensor_truncate_shape"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.tensor_truncate_shape"], ["", "def", "pad_inv_plan", "(", "x", ",", "plan", ")", ":", "\n", "    ", "return", "tensor_truncate_shape", "(", "x", ",", "plan", "[", "'shape_src'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.compute_conv_weight_reshape_to_qtt_plan": [[183, 198], ["tensor_shape_tools.compute_z_order", "len", "len", "tensor_shape_tools.compute_z_order", "tensor_shape_tools.combine_z_order_plans"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.compute_z_order", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.compute_z_order", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.combine_z_order_plans"], ["", "def", "compute_conv_weight_reshape_to_qtt_plan", "(", "x_shape", ",", "group_tuples", ",", "squash_filters", ")", ":", "\n", "    ", "\"\"\"\n    :param x_shape: conv weight tensor of shape [ out_channels, in_channels // groups, *kernel_size ]\n    :param group_tuples: merge neighbor factors in the input-output channels factors permutation\n    :param squash_filters: merge spatial kernel dimensions\n    :return: transformation plan\n    \"\"\"", "\n", "assert", "len", "(", "x_shape", ")", ">=", "2", "\n", "plan_channels", "=", "compute_z_order", "(", "x_shape", "[", "0", ":", "2", "]", ",", "group_tuples", "=", "group_tuples", ")", "\n", "if", "len", "(", "x_shape", "[", "2", ":", "]", ")", ">", "0", ":", "\n", "        ", "plan_spatial", "=", "compute_z_order", "(", "x_shape", "[", "2", ":", "]", ",", "group_tuples", "=", "squash_filters", ")", "\n", "plan", "=", "combine_z_order_plans", "(", "[", "plan_channels", ",", "plan_spatial", "]", ")", "\n", "", "else", ":", "\n", "        ", "plan", "=", "plan_channels", "\n", "", "return", "plan", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.combine_z_order_plans": [[200, 211], ["plans[].copy", "len"], "function", ["None"], ["", "def", "combine_z_order_plans", "(", "plans", ")", ":", "\n", "    ", "out", "=", "plans", "[", "0", "]", ".", "copy", "(", ")", "\n", "for", "plan", "in", "plans", "[", "1", ":", "]", ":", "\n", "        ", "offset", "=", "len", "(", "out", "[", "'permute_factors_src_to_dst'", "]", ")", "\n", "out", "[", "'shape_src'", "]", "+=", "plan", "[", "'shape_src'", "]", "\n", "out", "[", "'shape_factors_src'", "]", "+=", "plan", "[", "'shape_factors_src'", "]", "\n", "out", "[", "'permute_factors_src_to_dst'", "]", "+=", "[", "a", "+", "offset", "for", "a", "in", "plan", "[", "'permute_factors_src_to_dst'", "]", "]", "\n", "out", "[", "'permute_factors_dst_to_src'", "]", "+=", "[", "a", "+", "offset", "for", "a", "in", "plan", "[", "'permute_factors_dst_to_src'", "]", "]", "\n", "out", "[", "'shape_factors_dst'", "]", "+=", "plan", "[", "'shape_factors_dst'", "]", "\n", "out", "[", "'shape_dst'", "]", "+=", "plan", "[", "'shape_dst'", "]", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.reshape_fwd_plan": [[213, 218], ["x.reshape.view", "x.reshape.permute", "x.reshape.reshape"], "function", ["None"], ["", "def", "reshape_fwd_plan", "(", "x", ",", "plan", ")", ":", "\n", "    ", "x", "=", "x", ".", "view", "(", "plan", "[", "'shape_factors_src'", "]", ")", "\n", "x", "=", "x", ".", "permute", "(", "plan", "[", "'permute_factors_src_to_dst'", "]", ")", "\n", "x", "=", "x", ".", "reshape", "(", "plan", "[", "'shape_dst'", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.reshape_inv_plan": [[220, 225], ["x.reshape.view", "x.reshape.permute", "x.reshape.reshape"], "function", ["None"], ["", "def", "reshape_inv_plan", "(", "x", ",", "plan", ")", ":", "\n", "    ", "x", "=", "x", ".", "view", "(", "plan", "[", "'shape_factors_dst'", "]", ")", "\n", "x", "=", "x", ".", "permute", "(", "plan", "[", "'permute_factors_dst_to_src'", "]", ")", "\n", "x", "=", "x", ".", "reshape", "(", "plan", "[", "'shape_src'", "]", ")", "\n", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.__init__": [[193, 205], ["numpy.random.RandomState", "len", "numpy.random.RandomState.permutation().tolist", "numpy.random.RandomState.permutation", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "num_samples_train_total", ",", "rng_seed", "=", "2020", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_samples_train_total", "=", "num_samples_train_total", "\n", "self", ".", "next_sample_id", "=", "0", "\n", "self", ".", "sample_ids", "=", "[", "]", "\n", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "rng_seed", ")", "\n", "\n", "while", "len", "(", "self", ".", "sample_ids", ")", "<", "num_samples_train_total", ":", "\n", "            ", "self", ".", "sample_ids", "+=", "rng", ".", "permutation", "(", "len", "(", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "", "self", ".", "sample_ids", "=", "self", ".", "sample_ids", "[", ":", "num_samples_train_total", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.__iter__": [[206, 208], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "sample_ids", "[", "self", ".", "next_sample_id", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.__len__": [[209, 211], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples_train_total", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.state_dict": [[212, 215], ["helpers.PersistentRandomSampler.__dict__.items"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "# not saving next_sample_id because sampler is used in look-ahead fashion by DataLoader", "\n", "        ", "return", "{", "key", ":", "value", "for", "key", ",", "value", "in", "self", ".", "__dict__", ".", "items", "(", ")", "if", "key", "!=", "'dataset'", "and", "key", "!=", "'next_sample_id'", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.load_state_dict": [[216, 218], ["helpers.PersistentRandomSampler.__dict__.update"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.PersistentRandomSampler.fast_forward_to": [[219, 221], ["None"], "methods", ["None"], ["", "def", "fast_forward_to", "(", "self", ",", "sample_id", ")", ":", "\n", "        ", "self", ".", "next_sample_id", "=", "sample_id", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.SilentSummaryWriter.__init__": [[358, 361], ["helpers.stderr_redirected", "torch.utils.tensorboard.SummaryWriter.__init__"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.stderr_redirected", "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "stderr_redirected", "(", ")", ":", "\n", "            ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.deep_transform": [[21, 28], ["list", "issubclass", "model.named_children", "setattr", "helpers.deep_transform", "type", "callback"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.deep_transform"], ["def", "deep_transform", "(", "model", ",", "callback", ",", "prefix", "=", "None", ",", "opaque", "=", "None", ")", ":", "\n", "    ", "if", "not", "issubclass", "(", "type", "(", "model", ")", ",", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "return", "\n", "", "for", "k", ",", "v", "in", "list", "(", "model", ".", "named_children", "(", ")", ")", ":", "\n", "        ", "full_prefix", "=", "k", "if", "prefix", "is", "None", "else", "prefix", "+", "'.'", "+", "k", "\n", "setattr", "(", "model", ",", "k", ",", "callback", "(", "v", ",", "full_prefix", ",", "opaque", ")", ")", "\n", "deep_transform", "(", "v", ",", "callback", ",", "full_prefix", ",", "opaque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.is_item_ignored": [[30, 36], ["n.endswith"], "function", ["None"], ["", "", "def", "is_item_ignored", "(", "n", ",", "m", ")", ":", "\n", "    ", "if", "n", ".", "endswith", "(", "'num_batches_tracked'", ")", ":", "\n", "# Useless BatchNorm stats", "\n", "        ", "assert", "m", ".", "dtype", "==", "torch", ".", "int64", "\n", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.get_module_num_params": [[38, 52], ["module.named_parameters", "torch.tensor().prod().item", "module.named_buffers", "helpers.is_item_ignored", "torch.tensor().prod().item", "helpers.get_statedict_num_params", "torch.tensor().prod", "module.state_dict", "torch.tensor().prod", "torch.tensor", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.is_item_ignored", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.get_statedict_num_params", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasis.state_dict"], ["", "def", "get_module_num_params", "(", "module", ",", "recurse", ",", "include_buffers", "=", "True", ")", ":", "\n", "    ", "out", "=", "0", "\n", "for", "n", ",", "m", "in", "module", ".", "named_parameters", "(", "recurse", "=", "recurse", ")", ":", "\n", "        ", "assert", "m", ".", "dtype", "==", "torch", ".", "float32", "\n", "out", "+=", "torch", ".", "tensor", "(", "m", ".", "shape", ")", ".", "prod", "(", ")", ".", "item", "(", ")", "\n", "", "if", "include_buffers", ":", "\n", "        ", "for", "n", ",", "m", "in", "module", ".", "named_buffers", "(", "recurse", "=", "recurse", ")", ":", "\n", "            ", "if", "is_item_ignored", "(", "n", ",", "m", ")", ":", "\n", "                ", "continue", "\n", "", "out", "+=", "torch", ".", "tensor", "(", "m", ".", "shape", ")", ".", "prod", "(", ")", ".", "item", "(", ")", "\n", "", "if", "recurse", ":", "\n", "            ", "out_sanity", "=", "get_statedict_num_params", "(", "module", ".", "state_dict", "(", ")", ")", "\n", "assert", "out", "==", "out_sanity", ",", "f'Mismatch in the number of parameters and buffers: {out} vs {out_sanity}'", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.get_statedict_num_params": [[54, 59], ["all", "sum", "all", "type", "sd.items", "torch.tensor().prod().item", "torch.is_tensor", "helpers.is_item_ignored", "sd.values", "sd.values", "sd.values", "torch.tensor().prod", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.is_item_ignored"], ["", "def", "get_statedict_num_params", "(", "sd", ")", ":", "\n", "    ", "assert", "type", "(", "sd", ")", "is", "OrderedDict", "and", "all", "(", "torch", ".", "is_tensor", "(", "v", ")", "for", "v", "in", "sd", ".", "values", "(", ")", ")", "\n", "sd", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "sd", ".", "items", "(", ")", "if", "not", "is_item_ignored", "(", "k", ",", "v", ")", "}", "\n", "assert", "all", "(", "v", ".", "dtype", "==", "torch", ".", "float32", "for", "v", "in", "sd", ".", "values", "(", ")", ")", "\n", "return", "sum", "(", "[", "torch", ".", "tensor", "(", "m", ".", "shape", ")", ".", "prod", "(", ")", ".", "item", "(", ")", "for", "m", "in", "sd", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers._get_zipped_size": [[61, 72], ["tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile", "torch.save", "os.path.getsize", "zipfile.ZipFile", "zip.write"], "function", ["None"], ["", "def", "_get_zipped_size", "(", "sd", ",", "use_best", "=", "True", ")", ":", "\n", "    ", "if", "use_best", ":", "\n", "        ", "kwargs", "=", "{", "'compression'", ":", "zipfile", ".", "ZIP_LZMA", "}", "\n", "", "else", ":", "\n", "        ", "kwargs", "=", "{", "'compression'", ":", "zipfile", ".", "ZIP_DEFLATED", ",", "'compresslevel'", ":", "9", "}", "\n", "", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "f0_", ",", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "f1_", ":", "\n", "        ", "f0", ",", "f1", "=", "f0_", ".", "name", ",", "f1_", ".", "name", "\n", "torch", ".", "save", "(", "sd", ",", "f0", ",", "_use_new_zipfile_serialization", "=", "False", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "f1", ",", "'w'", ",", "**", "kwargs", ")", "as", "zip", ":", "\n", "            ", "zip", ".", "write", "(", "f0", ",", "'_'", ")", "\n", "", "return", "os", ".", "path", ".", "getsize", "(", "f1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.get_zipped_size": [[74, 78], ["helpers._get_zipped_size", "helpers._get_zipped_size"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers._get_zipped_size", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers._get_zipped_size"], ["", "", "def", "get_zipped_size", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "size", "=", "_get_zipped_size", "(", "*", "args", ",", "**", "kwargs", ")", "-", "_get_zipped_size", "(", "{", "}", ")", "\n", "assert", "size", ">=", "0", "\n", "return", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.colorize": [[80, 89], ["matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "torch.tensor().float", "matplotlib.cm.get_cmap.", "x.permute.dim", "x.permute.permute", "torch.tensor", "x.permute.dim", "x.permute.permute"], "function", ["None"], ["", "def", "colorize", "(", "x", ",", "cmap", "=", "'jet'", ")", ":", "\n", "    ", "cm", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "cmap", "if", "cmap", "is", "not", "None", "else", "'gray'", ")", "\n", "x", "=", "cm", "(", "x", ",", "bytes", "=", "False", ")", "[", "...", ",", "0", ":", "3", "]", "\n", "x", "=", "torch", ".", "tensor", "(", "x", ")", ".", "float", "(", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "", "elif", "x", ".", "dim", "(", ")", "==", "4", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.pretty_dict": [[91, 93], ["json.dumps"], "function", ["None"], ["", "def", "pretty_dict", "(", "d", ")", ":", "\n", "    ", "return", "json", ".", "dumps", "(", "d", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.dict_deep_get": [[95, 116], ["enumerate", "type", "key_path.split", "type", "len", "dict_type"], "function", ["None"], ["", "def", "dict_deep_get", "(", "d", ",", "key_path", ",", "split_ch", "=", "'/'", ",", "default", "=", "None", ",", "create_if_missing", "=", "False", ",", "dict_type", "=", "dict", ")", ":", "\n", "    ", "if", "type", "(", "key_path", ")", "is", "str", ":", "\n", "        ", "parts", "=", "key_path", ".", "split", "(", "split_ch", ")", "\n", "", "elif", "type", "(", "key_path", ")", "is", "list", ":", "\n", "        ", "parts", "=", "key_path", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "for", "i", ",", "part", "in", "enumerate", "(", "parts", ")", ":", "\n", "        ", "is_last", "=", "(", "i", "==", "len", "(", "parts", ")", "-", "1", ")", "\n", "if", "part", "in", "d", ":", "\n", "            ", "d", "=", "d", "[", "part", "]", "\n", "", "else", ":", "\n", "            ", "if", "create_if_missing", ":", "\n", "                ", "if", "is_last", ":", "\n", "                    ", "d", "[", "part", "]", "=", "default", "\n", "", "else", ":", "\n", "                    ", "d", "[", "part", "]", "=", "dict_type", "(", ")", "\n", "", "d", "=", "d", "[", "part", "]", "\n", "", "else", ":", "\n", "                ", "return", "default", "\n", "", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.dict_flatten": [[118, 129], ["d.items", "isinstance", "out.update", "helpers.dict_flatten", "isinstance", "isinstance", "out.update", "helpers.dict_flatten", "enumerate"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.dict_flatten", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.dict_flatten"], ["", "def", "dict_flatten", "(", "d", ",", "prefix", "=", "''", ",", "join_char", "=", "'/'", ")", ":", "\n", "    ", "out", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "cur_k", "=", "k", "if", "prefix", "==", "''", "else", "prefix", "+", "join_char", "+", "k", "\n", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "out", ".", "update", "(", "dict_flatten", "(", "v", ",", "cur_k", ",", "join_char", ")", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "list", ")", "or", "isinstance", "(", "v", ",", "tuple", ")", ":", "\n", "            ", "out", ".", "update", "(", "dict_flatten", "(", "{", "f'{i}'", ":", "a", "for", "i", ",", "a", "in", "enumerate", "(", "v", ")", "}", ",", "cur_k", ",", "join_char", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "[", "cur_k", "]", "=", "v", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.module_deep_get": [[131, 143], ["enumerate", "type", "key_path.split", "getattr", "type"], "function", ["None"], ["", "def", "module_deep_get", "(", "d", ",", "key_path", ",", "split_ch", "=", "'.'", ")", ":", "\n", "    ", "if", "type", "(", "key_path", ")", "is", "str", ":", "\n", "        ", "parts", "=", "key_path", ".", "split", "(", "split_ch", ")", "\n", "", "elif", "type", "(", "key_path", ")", "is", "list", ":", "\n", "        ", "parts", "=", "key_path", "\n", "", "else", ":", "\n", "        ", "assert", "False", "\n", "", "for", "i", ",", "part", "in", "enumerate", "(", "parts", ")", ":", "\n", "        ", "d", "=", "getattr", "(", "d", ",", "part", ")", "\n", "if", "d", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.torch_save_atomic": [[145, 149], ["torch.save", "os.rename"], "function", ["None"], ["", "def", "torch_save_atomic", "(", "what", ",", "path", ")", ":", "\n", "    ", "path_tmp", "=", "path", "+", "'.tmp'", "\n", "torch", ".", "save", "(", "what", ",", "path_tmp", ")", "\n", "os", ".", "rename", "(", "path_tmp", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.get_model_size_bytes": [[151, 160], ["tempfile.NamedTemporaryFile", "torch.save", "os.path.getsize", "model.state_dict", "tempfile.NamedTemporaryFile.close"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasis.state_dict"], ["", "def", "get_model_size_bytes", "(", "model", ")", ":", "\n", "    ", "f", "=", "None", "\n", "try", ":", "\n", "        ", "f", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "f", ")", "\n", "return", "os", ".", "path", ".", "getsize", "(", "f", ".", "name", ")", "\n", "", "finally", ":", "\n", "        ", "if", "f", "is", "not", "None", ":", "\n", "            ", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.net_extract_modules_order": [[162, 190], ["helpers.deep_transform", "out_module_order.append", "torch.no_grad", "net", "hook.remove", "any", "type", "opaque[].append", "type", "ignored_prefixes.append", "module.register_forward_hook", "prefix.startswith", "functools.partial"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.deep_transform"], ["", "", "", "def", "net_extract_modules_order", "(", "net", ",", "dummy_input", ",", "classes_interest", ",", "net_prefix", "=", "None", ",", "classes_ignored", "=", "None", ")", ":", "\n", "    ", "ignored_prefixes", "=", "[", "]", "\n", "\n", "def", "cb_hook", "(", "prefix", ",", "out_module_order", ",", "module", ",", "input", ",", "output", ")", ":", "\n", "        ", "out_module_order", ".", "append", "(", "prefix", ")", "\n", "\n", "", "def", "cb_embed_tracing_hook", "(", "module", ",", "prefix", ",", "opaque", ")", ":", "\n", "        ", "if", "classes_ignored", "is", "not", "None", ":", "\n", "            ", "if", "type", "(", "module", ")", "in", "classes_ignored", ":", "\n", "                ", "ignored_prefixes", ".", "append", "(", "prefix", ")", "\n", "return", "module", "\n", "", "if", "any", "(", "prefix", ".", "startswith", "(", "bp", ")", "for", "bp", "in", "ignored_prefixes", ")", ":", "\n", "                ", "return", "module", "\n", "", "", "if", "type", "(", "module", ")", "in", "classes_interest", ":", "\n", "            ", "opaque", "[", "'hooks'", "]", ".", "append", "(", "module", ".", "register_forward_hook", "(", "partial", "(", "cb_hook", ",", "prefix", ",", "opaque", "[", "'module_order'", "]", ")", ")", ")", "\n", "", "return", "module", "\n", "\n", "", "out", "=", "{", "'hooks'", ":", "[", "]", ",", "'module_order'", ":", "[", "]", "}", "\n", "\n", "deep_transform", "(", "net", ",", "cb_embed_tracing_hook", ",", "prefix", "=", "net_prefix", ",", "opaque", "=", "out", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "net", "(", "*", "dummy_input", ")", "\n", "\n", "", "for", "hook", "in", "out", "[", "'hooks'", "]", ":", "\n", "        ", "hook", ".", "remove", "(", ")", "\n", "\n", "", "return", "out", "[", "'module_order'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.add_filetree_to_zip": [[223, 239], ["os.path.abspath", "os.path.basename", "os.path.dirname", "zip.write", "os.walk", "filter_dirname", "zip.write", "zip.write", "os.path.basename", "filter_filename", "os.path.join", "os.path.relpath", "os.path.join", "os.path.relpath"], "function", ["None"], ["", "", "def", "add_filetree_to_zip", "(", "zip", ",", "dir_src", ",", "filter_filename", "=", "None", ",", "filter_dirname", "=", "None", ")", ":", "\n", "    ", "dir_src", "=", "os", ".", "path", ".", "abspath", "(", "dir_src", ")", "\n", "dir_src_name", "=", "os", ".", "path", ".", "basename", "(", "dir_src", ")", "\n", "dir_src_parent_dir", "=", "os", ".", "path", ".", "dirname", "(", "dir_src", ")", "\n", "zip", ".", "write", "(", "dir_src", ",", "arcname", "=", "dir_src_name", ")", "\n", "for", "cur_dir", ",", "_", ",", "cur_filenames", "in", "os", ".", "walk", "(", "dir_src", ")", ":", "\n", "        ", "if", "filter_dirname", "is", "not", "None", "and", "filter_dirname", "(", "os", ".", "path", ".", "basename", "(", "cur_dir", ")", ")", ":", "\n", "            ", "continue", "\n", "", "if", "cur_dir", "!=", "dir_src", ":", "\n", "            ", "zip", ".", "write", "(", "cur_dir", ",", "arcname", "=", "os", ".", "path", ".", "relpath", "(", "cur_dir", ",", "dir_src_parent_dir", ")", ")", "\n", "", "for", "filename", "in", "cur_filenames", ":", "\n", "            ", "if", "filter_filename", "is", "not", "None", "and", "filter_filename", "(", "filename", ")", ":", "\n", "                ", "continue", "\n", "", "zip", ".", "write", "(", "\n", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "filename", ")", ",", "\n", "arcname", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "relpath", "(", "cur_dir", ",", "dir_src_parent_dir", ")", ",", "filename", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.pack_source_and_configuration": [[242, 255], ["os.path.abspath", "copy.deepcopy", "json.dumps", "zipfile.ZipFile", "helpers.add_filetree_to_zip", "zip.writestr", "f.endswith"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.add_filetree_to_zip"], ["", "", "", "def", "pack_source_and_configuration", "(", "cfg", ",", "dir_src", ",", "path_zip", ")", ":", "\n", "    ", "dir_src", "=", "os", ".", "path", ".", "abspath", "(", "dir_src", ")", "\n", "cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "__dict__", ")", "\n", "del", "cfg", "[", "'log_dir'", "]", "\n", "cfg_str", "=", "json", ".", "dumps", "(", "cfg", ",", "indent", "=", "4", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "path_zip", ",", "'w'", ",", "compression", "=", "zipfile", ".", "ZIP_DEFLATED", ")", "as", "zip", ":", "\n", "        ", "add_filetree_to_zip", "(", "\n", "zip", ",", "\n", "dir_src", ",", "\n", "filter_filename", "=", "lambda", "f", ":", "not", "f", ".", "endswith", "(", "'.py'", ")", ",", "\n", "filter_dirname", "=", "lambda", "d", ":", "d", "in", "(", "'__pycache__'", ",", ")", ",", "\n", ")", "\n", "zip", ".", "writestr", "(", "'cfg.txt'", ",", "cfg_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.pack_directory": [[257, 261], ["os.path.abspath", "zipfile.ZipFile", "helpers.add_filetree_to_zip"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.add_filetree_to_zip"], ["", "", "def", "pack_directory", "(", "path_dir", ",", "path_zip", ",", "filter_filename", ")", ":", "\n", "    ", "path_dir", "=", "os", ".", "path", ".", "abspath", "(", "path_dir", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "path_zip", ",", "'w'", ",", "compression", "=", "zipfile", ".", "ZIP_DEFLATED", ")", "as", "zip", ":", "\n", "        ", "add_filetree_to_zip", "(", "zip", ",", "path_dir", ",", "filter_filename", "=", "filter_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.diff_source_dir_and_zip": [[263, 293], ["os.path.abspath", "zipfile.ZipFile", "zip.namelist", "copy.deepcopy", "json.dumps().split", "zip.read().decode().split", "list", "zip.getinfo", "zip.getinfo.is_dir", "os.path.join", "zip.read().decode().split", "list", "difflib.unified_diff", "len", "Exception", "os.path.dirname", "os.path.isfile", "FileNotFoundError", "open", "f.read().split", "difflib.unified_diff", "len", "Exception", "json.dumps", "zip.read().decode", "zip.read().decode", "f.read", "zip.read", "zip.read"], "function", ["None"], ["", "", "def", "diff_source_dir_and_zip", "(", "cfg", ",", "dir_src", ",", "path_zip", ")", ":", "\n", "    ", "dir_src", "=", "os", ".", "path", ".", "abspath", "(", "dir_src", ")", "\n", "with", "zipfile", ".", "ZipFile", "(", "path_zip", ")", "as", "zip", ":", "\n", "        ", "for", "file", "in", "zip", ".", "namelist", "(", ")", ":", "\n", "            ", "if", "file", "==", "'cfg.txt'", ":", "\n", "                ", "continue", "\n", "", "file_info", "=", "zip", ".", "getinfo", "(", "file", ")", "\n", "if", "file_info", ".", "is_dir", "(", ")", ":", "\n", "                ", "continue", "\n", "", "path_src", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "dir_src", ")", ",", "file", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path_src", ")", ":", "\n", "                ", "raise", "FileNotFoundError", "(", "path_src", ")", "\n", "", "with", "open", "(", "path_src", ")", "as", "f", ":", "\n", "                ", "lines_src", "=", "f", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "", "lines_zip", "=", "zip", ".", "read", "(", "file", ")", ".", "decode", "(", "'utf-8'", ")", ".", "split", "(", "'\\n'", ")", "\n", "lines_diff", "=", "list", "(", "difflib", ".", "unified_diff", "(", "lines_zip", ",", "lines_src", ")", ")", "\n", "if", "len", "(", "lines_diff", ")", ">", "0", ":", "\n", "                ", "raise", "Exception", "(", "\n", "f'Source ({file}) changed - will not resume. Diff:\\n'", "+", "\n", "f'\\n'", ".", "join", "(", "lines_diff", ")", "\n", ")", "\n", "", "", "cfg", "=", "copy", ".", "deepcopy", "(", "cfg", ".", "__dict__", ")", "\n", "del", "cfg", "[", "'log_dir'", "]", "\n", "cfg_str", "=", "json", ".", "dumps", "(", "cfg", ",", "indent", "=", "4", ")", ".", "split", "(", "'\\n'", ")", "\n", "cfg_zip", "=", "zip", ".", "read", "(", "'cfg.txt'", ")", ".", "decode", "(", "'utf-8'", ")", ".", "split", "(", "'\\n'", ")", "\n", "cfg_diff", "=", "list", "(", "difflib", ".", "unified_diff", "(", "cfg_zip", ",", "cfg_str", ")", ")", "\n", "if", "len", "(", "cfg_diff", ")", ">", "0", ":", "\n", "            ", "raise", "Exception", "(", "\n", "f'Configuration changed - will not resume. Diff:\\n'", "+", "\n", "f'\\n'", ".", "join", "(", "cfg_diff", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.verify_experiment_integrity": [[296, 305], ["os.path.abspath", "os.path.join", "os.path.join", "os.path.isdir", "os.makedirs", "os.path.isfile", "helpers.pack_source_and_configuration", "helpers.diff_source_dir_and_zip", "os.path.dirname", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.pack_source_and_configuration", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.diff_source_dir_and_zip"], ["", "", "", "def", "verify_experiment_integrity", "(", "cfg", ")", ":", "\n", "    ", "dir_src", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", ",", "'../..'", ")", ")", "\n", "path_zip", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "log_dir", ",", "'source.zip'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "cfg", ".", "log_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cfg", ".", "log_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isfile", "(", "path_zip", ")", ":", "\n", "        ", "pack_source_and_configuration", "(", "cfg", ",", "dir_src", ",", "path_zip", ")", "\n", "", "else", ":", "\n", "        ", "diff_source_dir_and_zip", "(", "cfg", ",", "dir_src", ",", "path_zip", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.get_best_imgcls_metrics": [[307, 315], ["current.items", "out.get"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.get"], ["", "", "def", "get_best_imgcls_metrics", "(", "current", ",", "last", "=", "None", ")", ":", "\n", "    ", "if", "last", "is", "None", ":", "\n", "        ", "return", "current", "\n", "", "out", "=", "last", "\n", "for", "k", ",", "v_cur", "in", "current", ".", "items", "(", ")", ":", "\n", "        ", "if", "v_cur", ">", "out", ".", "get", "(", "k", ",", "0", ")", ":", "\n", "            ", "out", "[", "k", "]", "=", "v_cur", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.tb_add_scalars": [[317, 325], ["tag_scalar_dict.items", "isinstance", "helpers.tb_add_scalars", "tb.add_scalar"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.tb_add_scalars"], ["", "def", "tb_add_scalars", "(", "tb", ",", "main_tag", ",", "tag_scalar_dict", ",", "global_step", "=", "None", ")", ":", "\n", "# unlike SummaryWriter.add_scalars, this function does not create a separate FileWriter per each dict entry", "\n", "    ", "for", "k", ",", "v", "in", "tag_scalar_dict", ".", "items", "(", ")", ":", "\n", "        ", "tag", "=", "main_tag", "+", "'/'", "+", "k", "\n", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "tb_add_scalars", "(", "tb", ",", "tag", ",", "v", ",", "global_step", "=", "global_step", ")", "\n", "", "else", ":", "\n", "            ", "tb", ".", "add_scalar", "(", "tag", ",", "v", ",", "global_step", "=", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.fileno": [[327, 332], ["getattr", "isinstance", "ValueError"], "function", ["None"], ["", "", "", "def", "fileno", "(", "file_or_fd", ")", ":", "\n", "    ", "fd", "=", "getattr", "(", "file_or_fd", ",", "'fileno'", ",", "lambda", ":", "file_or_fd", ")", "(", ")", "\n", "if", "not", "isinstance", "(", "fd", ",", "int", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Expected a file (`.fileno()`) or a file descriptor\"", ")", "\n", "", "return", "fd", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.stderr_redirected": [[334, 355], ["helpers.fileno", "os.fdopen", "stderr.flush", "os.dup", "os.dup2", "stderr.flush", "os.dup2", "helpers.fileno", "copied.fileno", "open", "os.dup2", "to_file.fileno"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.fileno", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.fileno", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.fileno", "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.fileno"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "stderr_redirected", "(", "to", "=", "os", ".", "devnull", ",", "stderr", "=", "None", ")", ":", "\n", "# https://stackoverflow.com/a/22434262/411907", "\n", "    ", "if", "stderr", "is", "None", ":", "\n", "       ", "stderr", "=", "sys", ".", "stderr", "\n", "\n", "", "stderr_fd", "=", "fileno", "(", "stderr", ")", "\n", "# copy stderr_fd before it is overwritten; `copied` is inheritable on Windows when duplicating a standard stream", "\n", "with", "os", ".", "fdopen", "(", "os", ".", "dup", "(", "stderr_fd", ")", ",", "'wb'", ")", "as", "copied", ":", "\n", "        ", "stderr", ".", "flush", "(", ")", "# flush library buffers that dup2 knows nothing about", "\n", "try", ":", "\n", "            ", "os", ".", "dup2", "(", "fileno", "(", "to", ")", ",", "stderr_fd", ")", "# $ exec >&to", "\n", "", "except", "ValueError", ":", "# filename", "\n", "            ", "with", "open", "(", "to", ",", "'wb'", ")", "as", "to_file", ":", "\n", "                ", "os", ".", "dup2", "(", "to_file", ".", "fileno", "(", ")", ",", "stderr_fd", ")", "# $ exec > to", "\n", "", "", "try", ":", "\n", "            ", "yield", "stderr", "# allow code to be run with the redirected stdout", "\n", "", "finally", ":", "\n", "# restore stderr to its previous value; dup2 makes stderr_fd inheritable unconditionally", "\n", "            ", "stderr", ".", "flush", "(", ")", "\n", "os", ".", "dup2", "(", "copied", ".", "fileno", "(", ")", ",", "stderr_fd", ")", "# $ exec >&copied", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.silent_torch_jit_trace_module": [[363, 375], ["warnings.catch_warnings", "torch.jit.trace_module", "issubclass", "print", "open", "fp.readlines"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print"], ["", "", "", "def", "silent_torch_jit_trace_module", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", "record", "=", "True", ")", "as", "ws", ":", "\n", "        ", "out", "=", "torch", ".", "jit", ".", "trace_module", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "w", "in", "ws", ":", "\n", "            ", "if", "issubclass", "(", "w", ".", "category", ",", "torch", ".", "jit", ".", "TracerWarning", ")", ":", "\n", "                ", "with", "open", "(", "w", ".", "filename", ")", "as", "fp", ":", "\n", "                    ", "lines", "=", "fp", ".", "readlines", "(", ")", "\n", "", "line", "=", "lines", "[", "w", ".", "lineno", "-", "1", "]", "\n", "if", "'# produces TracerWarning -- safe to ignore'", "in", "line", ":", "\n", "                    ", "continue", "\n", "", "", "print", "(", "w", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.is_conv_transposed": [[377, 384], ["isinstance", "packaging.version.parse", "packaging.version.parse", "isinstance", "isinstance"], "function", ["None"], ["", "", "def", "is_conv_transposed", "(", "conv", ")", ":", "\n", "    ", "assert", "isinstance", "(", "conv", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvNd", ")", "\n", "if", "packaging", ".", "version", ".", "parse", "(", "torch", ".", "__version__", ")", "<", "packaging", ".", "version", ".", "parse", "(", "'1.5.0'", ")", ":", "\n", "        ", "out", "=", "isinstance", "(", "conv", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvTransposeMixin", ")", "\n", "", "else", ":", "\n", "        ", "out", "=", "isinstance", "(", "conv", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvTransposeNd", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.helpers.classification_accuracy": [[386, 397], ["max", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().int().sum", "res.append", "output.dim", "target.dim", "target.view", "correct[].reshape().int", "correct[].reshape"], "function", ["None"], ["", "def", "classification_accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "assert", "output", ".", "dim", "(", ")", "==", "2", "and", "target", ".", "dim", "(", ")", "==", "1", "and", "output", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "int", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ")", "\n", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.resolvers.MultiStepWarmupLR.__init__": [[30, 35], ["collections.Counter", "torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "milestones", ",", "gamma", "=", "0.1", ",", "num_warmup_steps", "=", "0", ",", "last_epoch", "=", "-", "1", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "milestones", "=", "Counter", "(", "milestones", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "num_warmup_steps", "=", "num_warmup_steps", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ",", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.resolvers.MultiStepWarmupLR.get_lr": [[36, 41], ["max", "list", "min", "sorted", "resolvers.MultiStepWarmupLR.milestones.elements", "bisect.bisect_right"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "dampen", "=", "max", "(", "0.0", ",", "min", "(", "1.0", ",", "self", ".", "last_epoch", "/", "self", ".", "num_warmup_steps", ")", ")", "\n", "milestones", "=", "list", "(", "sorted", "(", "self", ".", "milestones", ".", "elements", "(", ")", ")", ")", "\n", "return", "[", "dampen", "*", "base_lr", "*", "self", ".", "gamma", "**", "bisect_right", "(", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.resolvers.PolyWarmupLR.__init__": [[44, 49], ["torch.optim.lr_scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "power", ",", "num_steps", ",", "num_warmup_steps", "=", "0", ",", "last_epoch", "=", "-", "1", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "self", ".", "power", "=", "power", "\n", "self", ".", "num_steps", "=", "num_steps", "\n", "self", ".", "num_warmup_steps", "=", "num_warmup_steps", "\n", "super", "(", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ",", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.resolvers.PolyWarmupLR.get_lr": [[50, 54], ["max", "min", "min"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "dampen", "=", "max", "(", "0.0", ",", "min", "(", "1.0", ",", "self", ".", "last_epoch", "/", "self", ".", "num_warmup_steps", ")", ")", "\n", "return", "[", "base_lr", "*", "dampen", "*", "(", "1.0", "-", "min", "(", "self", ".", "last_epoch", ",", "self", ".", "num_steps", "-", "1", ")", "/", "self", ".", "num_steps", ")", "**", "self", ".", "power", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.resolvers.resolve_imgcls_model": [[15, 20], ["None"], "function", ["None"], ["def", "resolve_imgcls_model", "(", "name", ")", ":", "\n", "    ", "return", "{", "\n", "'resnet_cifar10'", ":", "ModelNetResnetCifar10", ",", "\n", "'lenet5'", ":", "ModelNetLenet5", ",", "\n", "}", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.resolvers.resolve_optimizer": [[22, 27], ["None"], "function", ["None"], ["", "def", "resolve_optimizer", "(", "name", ")", ":", "\n", "    ", "return", "{", "\n", "'sgd'", ":", "SGD", ",", "\n", "'adam'", ":", "Adam", ",", "\n", "}", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.resolvers.resolve_imgcls_dataset": [[56, 116], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "NotImplementedError", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "dataset_class", "dataset_class", "NotImplementedError", "torchvision.transforms.Pad", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "", "def", "resolve_imgcls_dataset", "(", "cfg", ")", ":", "\n", "    ", "if", "cfg", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "dataset_train", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "\n", "cfg", ".", "root_datasets", "[", "cfg", ".", "dataset", "]", ",", "train", "=", "True", ",", "download", "=", "cfg", ".", "dataset_download", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "(", "0.5", ",", ")", ",", "(", "1.0", ",", ")", ")", "\n", "]", ")", "\n", ")", "\n", "dataset_valid", "=", "torchvision", ".", "datasets", ".", "MNIST", "(", "\n", "cfg", ".", "root_datasets", "[", "cfg", ".", "dataset", "]", ",", "train", "=", "False", ",", "download", "=", "cfg", ".", "dataset_download", ",", "\n", "transform", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "[", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "(", "0.5", ",", ")", ",", "(", "1.0", ",", ")", ")", "\n", "]", ")", "\n", ")", "\n", "return", "dataset_train", ",", "dataset_valid", ",", "10", "\n", "", "transform_train", ",", "transform_valid", "=", "[", "]", ",", "[", "]", "\n", "if", "cfg", ".", "dataset", "in", "(", "'cifar10'", ",", "'cifar100'", ")", ":", "\n", "        ", "mean", "=", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", "\n", "std", "=", "(", "0.2470", ",", "0.2435", ",", "0.2616", ")", "\n", "num_classes", "=", "{", "\n", "'cifar10'", ":", "10", ",", "\n", "'cifar100'", ":", "100", ",", "\n", "}", "[", "cfg", ".", "dataset", "]", "\n", "transform_train", "+=", "[", "\n", "torchvision", ".", "transforms", ".", "Pad", "(", "4", ")", ",", "\n", "torchvision", ".", "transforms", ".", "RandomResizedCrop", "(", "32", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'Dataset {cfg.dataset} functionality not implemented'", ")", "\n", "\n", "", "transform_train", "+=", "[", "\n", "torchvision", ".", "transforms", ".", "RandomHorizontalFlip", "(", ")", "\n", "]", "\n", "transform_epilogue", "=", "[", "\n", "torchvision", ".", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "torchvision", ".", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ",", "\n", "]", "\n", "transform_train", "+=", "transform_epilogue", "\n", "transform_valid", "+=", "transform_epilogue", "\n", "\n", "transform_train", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "transform_train", ")", "\n", "transform_valid", "=", "torchvision", ".", "transforms", ".", "Compose", "(", "transform_valid", ")", "\n", "\n", "if", "cfg", ".", "dataset", "in", "(", "'cifar10'", ",", "'cifar100'", ")", ":", "\n", "        ", "dataset_class", "=", "{", "\n", "'cifar10'", ":", "torchvision", ".", "datasets", ".", "CIFAR10", ",", "\n", "'cifar100'", ":", "torchvision", ".", "datasets", ".", "CIFAR100", ",", "\n", "}", "[", "cfg", ".", "dataset", "]", "\n", "dataset_train", "=", "dataset_class", "(", "\n", "cfg", ".", "root_datasets", "[", "cfg", ".", "dataset", "]", ",", "train", "=", "True", ",", "transform", "=", "transform_train", ",", "download", "=", "cfg", ".", "dataset_download", "\n", ")", "\n", "dataset_valid", "=", "dataset_class", "(", "\n", "cfg", ".", "root_datasets", "[", "cfg", ".", "dataset", "]", ",", "train", "=", "False", ",", "transform", "=", "transform_valid", ",", "download", "=", "cfg", ".", "dataset_download", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'Dataset {cfg.dataset} functionality not implemented'", ")", "\n", "\n", "", "return", "dataset_train", ",", "dataset_valid", ",", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.resolvers.resolve_semseg_dataset": [[118, 125], ["src.datasets.voc_sbd.DatasetVocSbd", "src.datasets.voc_sbd.DatasetVocSbd", "NotImplementedError"], "function", ["None"], ["", "def", "resolve_semseg_dataset", "(", "cfg", ")", ":", "\n", "    ", "if", "cfg", ".", "dataset", "==", "'voc_sbd'", ":", "\n", "        ", "dataset_train", "=", "DatasetVocSbd", "(", "cfg", ".", "root_datasets", "[", "'voc_sbd'", "]", ",", "SPLIT_TRAIN", ",", "cfg", ".", "dataset_download", ")", "\n", "dataset_valid", "=", "DatasetVocSbd", "(", "cfg", ".", "root_datasets", "[", "'voc_sbd'", "]", ",", "SPLIT_VALID", ",", "cfg", ".", "dataset_download", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'Dataset {cfg.dataset} functionality not implemented'", ")", "\n", "", "return", "dataset_train", ",", "dataset_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.resolvers.resolve_semseg_model": [[127, 132], ["src.models.model_net_deeplabv3p.ModelNetDeepLabV3Plus", "NotImplementedError"], "function", ["None"], ["", "def", "resolve_semseg_model", "(", "cfg", ",", "num_classes", ")", ":", "\n", "    ", "if", "cfg", ".", "model_name", "==", "'deeplabv3p'", ":", "\n", "        ", "return", "ModelNetDeepLabV3Plus", "(", "cfg", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'Dataset {cfg.dataset} functionality not implemented'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasis.__init__": [[15, 32], ["super().__init__", "numpy.random.RandomState", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.randn().clamp", "torch.randn().clamp", "torch.randn().clamp", "torch.randn().clamp", "math.sqrt", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "tensorized_basis_modules_tr.TBasis.register_buffer", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "rank", ",", "mode", ",", "is_trainable", ",", "init_seed", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "is_trainable", "=", "is_trainable", "\n", "self", ".", "num_param", "=", "0", "\n", "self", ".", "rng", "=", "np", ".", "random", "if", "init_seed", "is", "None", "else", "np", ".", "random", ".", "RandomState", "(", "init_seed", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "init", "=", "torch", ".", "randn", "(", "(", "self", ".", "size", ",", "self", ".", "rank", ",", "self", ".", "mode", ",", "self", ".", "rank", ")", ")", ".", "clamp", "(", "-", "3", ",", "3", ")", "\n", "init", "/=", "math", ".", "sqrt", "(", "size", "*", "rank", ")", "\n", "", "if", "is_trainable", ":", "\n", "            ", "self", ".", "basis", "=", "torch", ".", "nn", ".", "Parameter", "(", "init", ")", "\n", "self", ".", "num_param", "=", "self", ".", "size", "*", "self", ".", "rank", "*", "self", ".", "mode", "*", "self", ".", "rank", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_buffer", "(", "'basis'", ",", "init", ")", "\n", "", "self", ".", "last_basis", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasis.forward": [[33, 36], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "self", ".", "last_basis", "=", "self", ".", "basis", "\n", "return", "self", ".", "last_basis", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasis.num_parameters": [[37, 39], ["None"], "methods", ["None"], ["", "def", "num_parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_param", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasis.extra_repr": [[40, 42], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f'[{self.size} x {self.rank} x {self.mode} x {self.rank}] '", "f'{\"trainable\" if self.is_trainable else \"fixed\"}'", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasis.state_dict": [[44, 48], ["super().state_dict", "super().state_dict.pop"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasis.state_dict"], ["", "def", "state_dict", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "sd", "=", "super", "(", ")", ".", "state_dict", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "sd", ".", "pop", "(", "'last_basis'", ",", "None", ")", "\n", "return", "sd", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule.__init__": [[51, 61], ["super().__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "tensorized_basis_modules_tr.RankAdaptationModule.initialize_identity", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule.initialize_identity"], ["    ", "def", "__init__", "(", "self", ",", "num_modes", ",", "rank", ",", "activation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "num_modes", ">", "0", "\n", "assert", "activation", "in", "(", "'linear'", ",", "'exp'", ")", "\n", "self", ".", "num_modes", "=", "num_modes", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "rank_adapters", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_modes", ",", "rank", ")", ")", "\n", "self", ".", "_num_parameters", "=", "num_modes", "*", "rank", "\n", "self", ".", "initialize_identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule.forward": [[62, 64], ["tensorized_basis_modules_tr.RankAdaptationModule._act_fwd"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule._act_fwd"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_act_fwd", "(", "self", ".", "rank_adapters", ",", "self", ".", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule._act_fwd": [[65, 71], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_act_fwd", "(", "x", ",", "activation", ")", ":", "\n", "        ", "return", "{", "\n", "'linear'", ":", "lambda", "a", ":", "a", ",", "\n", "'exp'", ":", "torch", ".", "exp", ",", "\n", "}", "[", "activation", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule._act_inv": [[72, 78], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_act_inv", "(", "x", ",", "activation", ")", ":", "\n", "        ", "return", "{", "\n", "'linear'", ":", "lambda", "a", ":", "a", ",", "\n", "'exp'", ":", "torch", ".", "log", ",", "\n", "}", "[", "activation", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule.initialize_const": [[79, 84], ["torch.full", "torch.full", "torch.full", "torch.full", "tensorized_basis_modules_tr.RankAdaptationModule._act_inv", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tensorized_basis_modules_tr.RankAdaptationModule.rank_adapters.copy_"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule._act_inv"], ["", "def", "initialize_const", "(", "self", ",", "c", ")", ":", "\n", "        ", "init", "=", "torch", ".", "full", "(", "(", "self", ".", "num_modes", ",", "self", ".", "rank", ")", ",", "fill_value", "=", "c", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "init", "=", "self", ".", "_act_inv", "(", "init", ",", "self", ".", "activation", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "rank_adapters", ".", "copy_", "(", "init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule.initialize_identity": [[85, 87], ["tensorized_basis_modules_tr.RankAdaptationModule.initialize_const"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule.initialize_const"], ["", "", "def", "initialize_identity", "(", "self", ")", ":", "\n", "        ", "self", ".", "initialize_const", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule.num_parameters": [[88, 90], ["None"], "methods", ["None"], ["", "def", "num_parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_num_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule.extra_repr": [[91, 93], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f'[{self.rank} x {self.num_modes}] activation={self.activation}'", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactory.__init__": [[96, 123], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "basis_size", ",", "\n", "basis_rank", ",", "\n", "rank_adaptation", ",", "\n", "forward_batch_size", "=", "0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Parameterization of all neural network weights through T-Basis of a certain configuration\n        :param basis_size: number of basis cores\n        :param basis_rank: rank of basis cores\n        :param rank_adaptation: whether to perform rank adaptation (adds extra learned parameters)\n        :param forward_batch_size: whether to perform batching of cores during full tensors assembly. 0 = max possible\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "basis_size", "=", "basis_size", "\n", "self", ".", "basis_rank", "=", "basis_rank", "\n", "self", ".", "rank_adaptation", "=", "rank_adaptation", "\n", "self", ".", "forward_batch_size", "=", "forward_batch_size", "\n", "self", ".", "num_modes_total", "=", "0", "\n", "self", ".", "list_names", "=", "[", "]", "\n", "self", ".", "list_modes_offset", "=", "[", "]", "\n", "self", ".", "list_modes_count", "=", "[", "]", "\n", "self", ".", "list_init_scaling_factors", "=", "[", "]", "\n", "self", ".", "weights", "=", "None", "# will be torch.nn.Parameter of size [ num_modes_total x basis_size ]", "\n", "self", ".", "rank_adapters", "=", "None", "# will be torch.nn.Parameter of size [ num_modes_total x basis_rank ]", "\n", "self", ".", "plan_batching", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactory.add_tensor": [[124, 130], ["tensorized_basis_modules_tr.TBasisWeightsFactory.list_names.append", "tensorized_basis_modules_tr.TBasisWeightsFactory.list_modes_offset.append", "tensorized_basis_modules_tr.TBasisWeightsFactory.list_modes_count.append", "tensorized_basis_modules_tr.TBasisWeightsFactory.list_init_scaling_factors.append"], "methods", ["None"], ["", "def", "add_tensor", "(", "self", ",", "name", ",", "num_modes", ",", "init_scaling_factor", ")", ":", "\n", "        ", "self", ".", "list_names", ".", "append", "(", "name", ")", "\n", "self", ".", "list_modes_offset", ".", "append", "(", "self", ".", "num_modes_total", ")", "\n", "self", ".", "list_modes_count", ".", "append", "(", "num_modes", ")", "\n", "self", ".", "list_init_scaling_factors", ".", "append", "(", "init_scaling_factor", ")", "\n", "self", ".", "num_modes_total", "+=", "num_modes", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactory.instantiate_parameters": [[131, 152], ["zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "numpy.random.RandomState", "torch.cat.append", "torch.cat.append", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "tensorized_basis_modules_tr.RankAdaptationModule._act_inv", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "hash", "torch.from_numpy().float().clamp", "torch.from_numpy().float().clamp", "torch.from_numpy().float().clamp", "torch.from_numpy().float().clamp", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.RandomState.randn"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule._act_inv"], ["", "def", "instantiate_parameters", "(", "self", ",", "plan_batching", "=", "None", ")", ":", "\n", "        ", "assert", "self", ".", "num_modes_total", ">", "0", "\n", "self", ".", "plan_batching", "=", "plan_batching", "\n", "\n", "weights", "=", "[", "]", "\n", "for", "name", ",", "modes_count", ",", "init_scaling_factor", "in", "zip", "(", "self", ".", "list_names", ",", "self", ".", "list_modes_count", ",", "self", ".", "list_init_scaling_factors", ")", ":", "\n", "            ", "rng_seed", "=", "hash", "(", "name", ")", "%", "(", "2", "**", "32", ")", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "rng_seed", ")", "\n", "w", "=", "torch", ".", "from_numpy", "(", "rng", ".", "randn", "(", "modes_count", ",", "self", ".", "basis_size", ")", ")", ".", "float", "(", ")", ".", "clamp", "(", "-", "3", ",", "3", ")", "*", "init_scaling_factor", "\n", "weights", ".", "append", "(", "w", ")", "\n", "", "weights", "=", "torch", ".", "cat", "(", "weights", ",", "dim", "=", "0", ")", "\n", "\n", "if", "self", ".", "plan_batching", "is", "not", "None", "and", "(", "self", ".", "forward_batch_size", "==", "0", "or", "self", ".", "forward_batch_size", ">", "1", ")", ":", "\n", "            ", "weights", "=", "weights", "[", "plan_batching", "[", "'map_core_ids_flat_to_grouped_by_batch'", "]", ",", ":", "]", "\n", "\n", "", "self", ".", "weights", "=", "torch", ".", "nn", ".", "Parameter", "(", "weights", ")", "\n", "if", "self", ".", "rank_adaptation", "is", "not", "None", ":", "\n", "            ", "rankadapt", "=", "torch", ".", "ones", "(", "(", "self", ".", "num_modes_total", ",", "self", ".", "basis_rank", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "rankadapt", "=", "RankAdaptationModule", ".", "_act_inv", "(", "rankadapt", ",", "self", ".", "rank_adaptation", ")", "\n", "self", ".", "rank_adapters", "=", "torch", ".", "nn", ".", "Parameter", "(", "rankadapt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactory.forward": [[153, 219], ["len", "tbasis.view.view.view", "tensorized_basis_modules_tr.TBasisWeightsFactory.weights.mm().view", "zip", "tuple", "tensorized_basis_modules_tr.RankAdaptationModule._act_fwd", "iter", "tuple", "range", "tensorized_basis_modules_tr.TBasisWeightsFactory.weights.mm", "tensorized_basis_modules_tr.RankAdaptationModule._act_fwd", "core.squeeze", "range", "batched_cores.append", "range", "src.utils.tensor_contraction.contract_composition_hierarchical_batch_v2", "tuple.extend", "tensorized_basis_modules_tr.TBasisWeightsFactory.chunk", "next", "enumerate", "src.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep_v2", "batched_core.dim", "src.utils.tensor_contraction.contract_composition_hierarchical_batch_v2", "tuple.extend", "src.utils.tensor_contraction.contract_composition_hierarchical_batch_v2.dim", "t.squeeze", "range", "range", "type", "type", "src.utils.tensor_contraction.contract_composition_hierarchical_batch_v2.dim", "t.squeeze", "src.utils.tensor_contraction.contract_composition_hierarchical_batch_v2.chunk", "len", "src.utils.tensor_contraction.contract_composition_hierarchical_batch_v2.chunk"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule._act_fwd", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule._act_fwd", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_composition_hierarchical_batch_v2", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_sequence_hierarchical_one_sweep_v2", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.contract_composition_hierarchical_batch_v2"], ["", "", "def", "forward", "(", "self", ",", "tbasis", ")", ":", "\n", "# weights : D x B", "\n", "# tbasis   : B x R x M x R", "\n", "        ", "ntensors", "=", "len", "(", "self", ".", "list_names", ")", "\n", "core_shape", "=", "tbasis", ".", "shape", "[", "1", ":", "]", "\n", "tbasis", "=", "tbasis", ".", "view", "(", "self", ".", "basis_size", ",", "-", "1", ")", "\n", "cores", "=", "self", ".", "weights", ".", "mm", "(", "tbasis", ")", ".", "view", "(", "self", ".", "num_modes_total", ",", "*", "core_shape", ")", "# D x R x M x R", "\n", "if", "self", ".", "rank_adaptation", "is", "not", "None", ":", "\n", "            ", "rank_adapters", "=", "RankAdaptationModule", ".", "_act_fwd", "(", "self", ".", "rank_adapters", ",", "self", ".", "rank_adaptation", ")", "\n", "cores", "=", "cores", "*", "rank_adapters", ".", "view", "(", "self", ".", "num_modes_total", ",", "self", ".", "basis_rank", ",", "1", ",", "1", ")", "# D x R x 1 x 1", "\n", "# D x R x M x R", "\n", "\n", "", "if", "self", ".", "forward_batch_size", "==", "1", ":", "\n", "            ", "cores", "=", "[", "core", ".", "squeeze", "(", "0", ")", "for", "core", "in", "cores", ".", "chunk", "(", "self", ".", "num_modes_total", ",", "dim", "=", "0", ")", "]", "\n", "it_cores", "=", "iter", "(", "cores", ")", "\n", "cores", "=", "[", "[", "next", "(", "it_cores", ")", "for", "_", "in", "range", "(", "size", ")", "]", "for", "i", ",", "size", "in", "enumerate", "(", "self", ".", "list_modes_count", ")", "]", "\n", "\n", "", "if", "self", ".", "forward_batch_size", "==", "1", ":", "\n", "# This special case saves memory on unnecessary order permutations", "\n", "            ", "num_decompressed", "=", "0", "\n", "while", "True", ":", "\n", "                ", "if", "num_decompressed", "==", "ntensors", ":", "\n", "                    ", "break", "\n", "", "for", "i", "in", "range", "(", "ntensors", ")", ":", "\n", "                    ", "if", "type", "(", "cores", "[", "i", "]", ")", "is", "not", "list", ":", "\n", "                        ", "continue", "\n", "", "cores", "[", "i", "]", "=", "contract_sequence_hierarchical_one_sweep_v2", "(", "cores", "[", "i", "]", ")", "\n", "if", "type", "(", "cores", "[", "i", "]", ")", "is", "not", "list", ":", "\n", "                        ", "num_decompressed", "+=", "1", "\n", "", "", "", "return", "tuple", "(", "cores", ")", "\n", "\n", "# case of self.forward_batch_size == 0 (max possible batching) or >1", "\n", "", "list_tensors", "=", "[", "]", "\n", "last_core_id", "=", "0", "\n", "for", "tensor_modes", ",", "tensor_modes_counts", "in", "zip", "(", "self", ".", "plan_batching", "[", "'unique_tensor_modes'", "]", ",", "self", ".", "plan_batching", "[", "'unique_tensor_modes_counts'", "]", ")", ":", "\n", "            ", "batched_cores", "=", "[", "]", "\n", "for", "mode_id", "in", "range", "(", "tensor_modes", ")", ":", "\n", "                ", "batched_core", "=", "cores", "[", "last_core_id", ":", "last_core_id", "+", "tensor_modes_counts", ",", ":", ",", ":", ",", ":", "]", "\n", "assert", "batched_core", ".", "dim", "(", ")", "==", "4", "\n", "batched_cores", ".", "append", "(", "batched_core", ")", "\n", "last_core_id", "+=", "tensor_modes_counts", "\n", "\n", "", "if", "self", ".", "forward_batch_size", ">", "1", ":", "\n", "                ", "minibatch_offset", "=", "0", "\n", "for", "i", "in", "range", "(", "(", "tensor_modes_counts", "+", "self", ".", "forward_batch_size", "-", "1", ")", "//", "self", ".", "forward_batch_size", ")", ":", "\n", "                    ", "minibatched_cores", "=", "[", "\n", "a", "[", "minibatch_offset", ":", "minibatch_offset", "+", "self", ".", "forward_batch_size", "]", "for", "a", "in", "batched_cores", "\n", "]", "\n", "minibatch_tensors", "=", "contract_composition_hierarchical_batch_v2", "(", "*", "minibatched_cores", ")", "\n", "assert", "minibatch_tensors", ".", "dim", "(", ")", "==", "tensor_modes", "+", "1", "\n", "minibatch_tensors", "=", "[", "\n", "t", ".", "squeeze", "(", "0", ")", "for", "t", "in", "minibatch_tensors", ".", "chunk", "(", "minibatch_tensors", ".", "shape", "[", "0", "]", ",", "dim", "=", "0", ")", "\n", "]", "\n", "list_tensors", ".", "extend", "(", "minibatch_tensors", ")", "\n", "minibatch_offset", "+=", "self", ".", "forward_batch_size", "\n", "", "", "else", ":", "\n", "                ", "tensors", "=", "contract_composition_hierarchical_batch_v2", "(", "*", "batched_cores", ")", "\n", "assert", "tensors", ".", "dim", "(", ")", "==", "tensor_modes", "+", "1", "\n", "tensors", "=", "[", "t", ".", "squeeze", "(", "0", ")", "for", "t", "in", "tensors", ".", "chunk", "(", "tensors", ".", "shape", "[", "0", "]", ",", "dim", "=", "0", ")", "]", "\n", "list_tensors", ".", "extend", "(", "tensors", ")", "\n", "\n", "", "", "list_tensors", "=", "tuple", "(", "\n", "list_tensors", "[", "self", ".", "plan_batching", "[", "'map_tensors_batched_to_original'", "]", "[", "a", "]", "]", "for", "a", "in", "range", "(", "len", "(", "self", ".", "list_names", ")", ")", "\n", ")", "\n", "return", "list_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactory.create_batching_plan": [[220, 263], ["sum", "list", "numpy.unique", "iter", "list", "range", "list", "list", "numpy.argsort", "range", "numpy.argsort", "len", "numpy.arange", "numpy.arange.reshape().T.reshape", "map_core_ids_grouped_by_batch_to_size.extend", "numpy.argsort", "numpy.argsort", "list", "next", "list", "numpy.argsort", "range", "numpy.arange.reshape"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "create_batching_plan", "(", "list_tensor_modes", ")", ":", "\n", "# list_tensor_modes: [ 3, 4, 4, 4, 3, 2 ]", "\n", "        ", "num_modes_total", "=", "sum", "(", "list_tensor_modes", ")", "\n", "list_tensor_modes_argsorted", "=", "list", "(", "np", ".", "argsort", "(", "list_tensor_modes", ")", ")", "\n", "# [ 5, 0, 4, 1, 2, 3 ]", "\n", "unique_tensor_modes", ",", "unique_tensor_modes_counts", "=", "np", ".", "unique", "(", "list_tensor_modes", ",", "return_counts", "=", "True", ")", "\n", "# unique_tensor_modes:        [ 2, 3, 4 ]", "\n", "# unique_tensor_modes_counts: [ 1, 2, 3 ]", "\n", "iter_ids", "=", "iter", "(", "range", "(", "num_modes_total", ")", ")", "\n", "core_ids", "=", "[", "[", "next", "(", "iter_ids", ")", "for", "_", "in", "range", "(", "num_modes", ")", "]", "for", "num_modes", "in", "list_tensor_modes", "]", "\n", "# [ [0,1,2], [3,4,5,6], [7,8,9,10], [11,12,13,14], [15,16,17], [18,19] ]", "\n", "core_ids_sorted_by_group_size", "=", "[", "core_ids", "[", "i", "]", "for", "i", "in", "list_tensor_modes_argsorted", "]", "\n", "# [ [18,19], [0,1,2], [15,16,17], [3,4,5,6], [7,8,9,10], [11,12,13,14] ]", "\n", "map_core_ids_flat_to_grouped_by_size", "=", "[", "b", "for", "a", "in", "core_ids_sorted_by_group_size", "for", "b", "in", "a", "]", "\n", "# [ 18, 19, 0, 1, 2, 15, 16, 17, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ]", "\n", "map_core_ids_grouped_by_size_to_flat", "=", "list", "(", "np", ".", "argsort", "(", "map_core_ids_flat_to_grouped_by_size", ")", ")", "\n", "# [ 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 5, 6, 7, 0, 1 ]", "\n", "map_core_ids_grouped_by_batch_to_size", "=", "[", "]", "\n", "last_core_id", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "unique_tensor_modes", ")", ")", ":", "\n", "            ", "num_modes_in_group", "=", "unique_tensor_modes_counts", "[", "i", "]", "*", "unique_tensor_modes", "[", "i", "]", "\n", "grouped_by_size_core_ids", "=", "np", ".", "arange", "(", "last_core_id", ",", "last_core_id", "+", "num_modes_in_group", ")", "\n", "last_core_id", "+=", "num_modes_in_group", "\n", "grouped_by_batch_core_ids", "=", "grouped_by_size_core_ids", ".", "reshape", "(", "\n", "unique_tensor_modes", "[", "i", "]", ",", "unique_tensor_modes_counts", "[", "i", "]", "\n", ")", ".", "T", ".", "reshape", "(", "-", "1", ")", "\n", "map_core_ids_grouped_by_batch_to_size", ".", "extend", "(", "list", "(", "grouped_by_batch_core_ids", ")", ")", "\n", "# [0, 1, 2, 4, 6, 3, 5, 7, 8, 11, 14, 17, 9, 12, 15, 18, 10, 13, 16, 19]", "\n", "", "map_core_ids_grouped_by_size_to_batch", "=", "list", "(", "np", ".", "argsort", "(", "map_core_ids_grouped_by_batch_to_size", ")", ")", "\n", "# [0, 1, 2, 5, 3, 6, 4, 7, 8, 12, 16, 9, 13, 17, 10, 14, 18, 11, 15, 19]", "\n", "map_core_ids_flat_to_grouped_by_batch", "=", "[", "\n", "map_core_ids_flat_to_grouped_by_size", "[", "a", "]", "for", "a", "in", "map_core_ids_grouped_by_size_to_batch", "\n", "]", "\n", "# [ 18, 19, 0, 15, 1, 16, 2, 17, 3, 7, 11, 4, 8, 12, 5, 9, 13, 6, 10, 14 ]", "\n", "map_core_ids_grouped_by_batch_to_flat", "=", "list", "(", "np", ".", "argsort", "(", "map_core_ids_flat_to_grouped_by_batch", ")", ")", "\n", "# [ 2, 4, 6, 8, 11, 14, 17, 9, 12, 15, 18, 10, 13, 16, 19, 3, 5, 7, 0, 1 ]", "\n", "return", "{", "\n", "'unique_tensor_modes'", ":", "unique_tensor_modes", ",", "\n", "'unique_tensor_modes_counts'", ":", "unique_tensor_modes_counts", ",", "\n", "'map_tensors_batched_to_original'", ":", "list", "(", "np", ".", "argsort", "(", "list_tensor_modes_argsorted", ")", ")", ",", "\n", "'map_core_ids_flat_to_grouped_by_batch'", ":", "map_core_ids_flat_to_grouped_by_batch", ",", "\n", "'map_core_ids_grouped_by_batch_to_flat'", ":", "map_core_ids_grouped_by_batch_to_flat", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactory._get_tbasis_parameter_flat_order": [[265, 272], ["zip", "list_param.append"], "methods", ["None"], ["", "def", "_get_tbasis_parameter_flat_order", "(", "self", ",", "param", ")", ":", "\n", "        ", "if", "self", ".", "plan_batching", "is", "not", "None", "and", "(", "self", ".", "forward_batch_size", "==", "0", "or", "self", ".", "forward_batch_size", ">", "1", ")", ":", "\n", "            ", "param", "=", "param", "[", "self", ".", "plan_batching", "[", "'map_core_ids_grouped_by_batch_to_flat'", "]", ",", ":", "]", "\n", "", "list_param", "=", "[", "]", "\n", "for", "offset", ",", "count", "in", "zip", "(", "self", ".", "list_modes_offset", ",", "self", ".", "list_modes_count", ")", ":", "\n", "            ", "list_param", ".", "append", "(", "param", "[", "offset", ":", "offset", "+", "count", ",", ":", "]", ")", "\n", "", "return", "list_param", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactory.get_tbasis_weights": [[273, 275], ["dict", "zip", "tensorized_basis_modules_tr.TBasisWeightsFactory._get_tbasis_parameter_flat_order"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactory._get_tbasis_parameter_flat_order"], ["", "def", "get_tbasis_weights", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "zip", "(", "self", ".", "list_names", ",", "self", ".", "_get_tbasis_parameter_flat_order", "(", "self", ".", "weights", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactory.get_tbasis_rank_adapters": [[276, 281], ["tensorized_basis_modules_tr.RankAdaptationModule._act_fwd", "dict", "zip", "tensorized_basis_modules_tr.TBasisWeightsFactory._get_tbasis_parameter_flat_order"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.RankAdaptationModule._act_fwd", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactory._get_tbasis_parameter_flat_order"], ["", "def", "get_tbasis_rank_adapters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "rank_adaptation", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "rank_adapters", "=", "RankAdaptationModule", ".", "_act_fwd", "(", "self", ".", "rank_adapters", ",", "self", ".", "rank_adaptation", ")", "\n", "return", "dict", "(", "zip", "(", "self", ".", "list_names", ",", "self", ".", "_get_tbasis_parameter_flat_order", "(", "rank_adapters", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.__init__": [[289, 296], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tbasis_weights_factory", ")", ":", "\n", "        ", "self", ".", "tbasis_weights_factory", "=", "tbasis_weights_factory", "\n", "self", ".", "list_names", "=", "[", "]", "\n", "self", ".", "map_name_to_id", "=", "{", "}", "\n", "self", ".", "plan_batching", "=", "None", "\n", "self", ".", "last_tensors", "=", "None", "\n", "self", ".", "list_modes_count", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.add_tensor": [[297, 303], ["len", "tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.list_names.append", "tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.list_modes_count.append", "tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.tbasis_weights_factory.add_tensor"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.add_tensor"], ["", "def", "add_tensor", "(", "self", ",", "name", ",", "num_modes", ",", "init_scaling_factor", ")", ":", "\n", "        ", "assert", "name", "not", "in", "self", ".", "map_name_to_id", "\n", "self", ".", "map_name_to_id", "[", "name", "]", "=", "len", "(", "self", ".", "list_names", ")", "\n", "self", ".", "list_names", ".", "append", "(", "name", ")", "\n", "self", ".", "list_modes_count", ".", "append", "(", "num_modes", ")", "\n", "self", ".", "tbasis_weights_factory", ".", "add_tensor", "(", "name", ",", "num_modes", ",", "init_scaling_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.instantiate_parameters": [[304, 307], ["tensorized_basis_modules_tr.TBasisWeightsFactory.create_batching_plan", "tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.tbasis_weights_factory.instantiate_parameters"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactory.create_batching_plan", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.instantiate_parameters"], ["", "def", "instantiate_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "plan_batching", "=", "TBasisWeightsFactory", ".", "create_batching_plan", "(", "self", ".", "list_modes_count", ")", "\n", "self", ".", "tbasis_weights_factory", ".", "instantiate_parameters", "(", "self", ".", "plan_batching", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.set_tbasis_tensors": [[308, 310], ["None"], "methods", ["None"], ["", "def", "set_tbasis_tensors", "(", "self", ",", "tensors", ")", ":", "\n", "        ", "self", ".", "last_tensors", "=", "tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.get_tensor_by_name": [[311, 313], ["None"], "methods", ["None"], ["", "def", "get_tensor_by_name", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "last_tensors", "[", "self", ".", "map_name_to_id", "[", "name", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.get_tbasis_weights": [[314, 316], ["tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.tbasis_weights_factory.get_tbasis_weights"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.get_tbasis_weights"], ["", "def", "get_tbasis_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tbasis_weights_factory", ".", "get_tbasis_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.get_tbasis_rank_adapters": [[317, 319], ["tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.tbasis_weights_factory.get_tbasis_rank_adapters"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.get_tbasis_rank_adapters"], ["", "def", "get_tbasis_rank_adapters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tbasis_weights_factory", ".", "get_tbasis_rank_adapters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLayerBase.__init__": [[322, 382], ["super().__init__", "tensorized_basis_modules_tr.TBasisLayerBase.init_checks", "src.utils.tensor_shape_tools.compute_pad_to_powers_plan", "src.utils.tensor_shape_tools.compute_z_order", "len", "all", "numpy.random.RandomState", "torch.from_numpy().float().clamp", "torch.from_numpy().float().clamp", "torch.from_numpy().float().clamp", "torch.from_numpy().float().clamp", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "src.utils.tensor_contraction.resolve_contraction_fn", "tensorized_basis_modules_tr.TBasisLayerBase.initialize", "int", "len", "len", "src.utils.tensor_shape_tools.compute_z_order", "src.utils.tensor_shape_tools.combine_z_order_plans", "hash", "tensorized_basis_modules_tr.RankAdaptationModule", "tensorized_basis_modules_tr.TBasisLayerBase.rank_adapters.num_parameters", "tensorized_basis_modules_tr.TBasisLayerBase.register_parameter", "math.sqrt", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.random.RandomState.randn"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLinear.init_checks", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.compute_pad_to_powers_plan", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.compute_z_order", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_contraction.resolve_contraction_fn", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLayerBase.initialize", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.compute_z_order", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.combine_z_order_plans", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLayerBase.num_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "module", ",", "\n", "basis_module", ",", "\n", "basis_tensors_proxy", ",", "\n", "contraction_method", ",", "\n", "rank_adaptation", "=", "None", ",", "\n", "permute_and_group_factors", "=", "True", ",", "\n", "use_external_parameterization", "=", "True", ",", "\n", "sanity_check_once", "=", "False", ",", "\n", "verbose", "=", "False", ",", "\n", "name", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "basis_module", "=", "[", "basis_module", "]", "# list prevents multiple occurrences in torch.nn.Module.parameters()", "\n", "self", ".", "basis_tensors_proxy", "=", "basis_tensors_proxy", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "num_basis", "=", "basis_module", ".", "size", "\n", "self", ".", "rank", "=", "basis_module", ".", "rank", "\n", "self", ".", "mode", "=", "basis_module", ".", "mode", "\n", "self", ".", "rank_adaptation", "=", "rank_adaptation", "\n", "self", ".", "permute_and_group_factors", "=", "permute_and_group_factors", "\n", "self", ".", "use_external_parameterization", "=", "use_external_parameterization", "\n", "self", ".", "sanity_check_once", "=", "sanity_check_once", "\n", "self", ".", "init_checks", "(", "module", ")", "\n", "self", ".", "mode_base", "=", "int", "(", "math", ".", "sqrt", "(", "self", ".", "mode", ")", ")", "if", "permute_and_group_factors", "else", "self", ".", "mode", "\n", "self", ".", "plan_pad", "=", "compute_pad_to_powers_plan", "(", "module", ".", "weight", ".", "shape", ",", "self", ".", "mode_base", ")", "\n", "weight_shape_padded", "=", "self", ".", "plan_pad", "[", "'shape_dst'", "]", "\n", "weight_is_linear", "=", "len", "(", "module", ".", "weight", ".", "shape", ")", "==", "2", "\n", "assert", "len", "(", "weight_shape_padded", ")", ">=", "2", "\n", "self", ".", "plan_shape_channels", "=", "compute_z_order", "(", "\n", "weight_shape_padded", "[", "0", ":", "2", "]", ",", "group_tuples", "=", "self", ".", "permute_and_group_factors", "\n", ")", "\n", "if", "weight_is_linear", ":", "\n", "            ", "self", ".", "plan_shape", "=", "self", ".", "plan_shape_channels", "\n", "", "else", ":", "\n", "            ", "self", ".", "plan_shape_spatial", "=", "compute_z_order", "(", "\n", "weight_shape_padded", "[", "2", ":", "]", ",", "group_tuples", "=", "self", ".", "permute_and_group_factors", "\n", ")", "\n", "self", ".", "plan_shape", "=", "combine_z_order_plans", "(", "[", "self", ".", "plan_shape_channels", ",", "self", ".", "plan_shape_spatial", "]", ")", "\n", "", "self", ".", "num_modes", "=", "len", "(", "self", ".", "plan_shape", "[", "'shape_dst'", "]", ")", "\n", "assert", "all", "(", "a", "in", "(", "self", ".", "mode", ",", "self", ".", "mode_base", ")", "for", "a", "in", "self", ".", "plan_shape", "[", "'shape_dst'", "]", ")", "\n", "# rng seeding is here to synchronize weights used here and in TBasisTensors with respect to the scaler", "\n", "rng_seed", "=", "hash", "(", "name", ")", "%", "(", "2", "**", "32", ")", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "rng_seed", ")", "\n", "basis_weights", "=", "torch", ".", "from_numpy", "(", "rng", ".", "randn", "(", "self", ".", "num_modes", ",", "self", ".", "num_basis", ")", ")", ".", "float", "(", ")", ".", "clamp", "(", "-", "3", ",", "3", ")", "\n", "self", ".", "basis_weights", "=", "torch", ".", "nn", ".", "Parameter", "(", "basis_weights", ")", "\n", "self", ".", "num_param", "=", "self", ".", "num_modes", "*", "self", ".", "num_basis", "\n", "if", "rank_adaptation", "is", "not", "None", ":", "\n", "            ", "self", ".", "rank_adapters", "=", "RankAdaptationModule", "(", "self", ".", "num_modes", ",", "self", ".", "rank", ",", "rank_adaptation", ")", "\n", "self", ".", "num_param", "+=", "self", ".", "rank_adapters", ".", "num_parameters", "(", ")", "\n", "", "self", ".", "contraction_fn", "=", "resolve_contraction_fn", "(", "\n", "contraction_method", ",", "\n", "[", "(", "self", ".", "rank", ",", "self", ".", "mode", ",", "self", ".", "rank", ")", "for", "_", "in", "range", "(", "self", ".", "num_modes", ")", "]", "\n", ")", "\n", "if", "module", ".", "bias", "is", "None", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "module", ".", "bias", "\n", "", "self", ".", "initialize", "(", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLayerBase.initialize": [[383, 412], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.nn.init._calculate_correct_fan", "torch.nn.init._calculate_correct_fan", "torch.nn.init.calculate_gain", "torch.nn.init.calculate_gain", "tensorized_basis_modules_tr.TBasisLayerBase.basis_module[].forward", "tensorized_basis_modules_tr.TBasisLayerBase.decompress_full().std().item", "tensorized_basis_modules_tr.TBasisLayerBase.decompress_full().std().item", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "math.sqrt", "print", "tensorized_basis_modules_tr.TBasisLayerBase.basis_tensors_proxy.add_tensor", "tensorized_basis_modules_tr.TBasisLayerBase.decompress_full().std", "tensorized_basis_modules_tr.TBasisLayerBase.decompress_full().std", "tensorized_basis_modules_tr.TBasisLayerBase.decompress_full", "tensorized_basis_modules_tr.TBasisLayerBase.decompress_full"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.forward", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.add_tensor", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLayerBase.decompress_full", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLayerBase.decompress_full"], ["", "def", "initialize", "(", "self", ",", "fan_mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ",", "nonlinearity_negative_slope", "=", "0", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "fan", "=", "_calculate_correct_fan", "(", "torch", ".", "empty", "(", "*", "self", ".", "plan_pad", "[", "'shape_src'", "]", ")", ",", "fan_mode", ")", "\n", "gain", "=", "calculate_gain", "(", "nonlinearity", ",", "nonlinearity_negative_slope", ")", "\n", "std_target", "=", "gain", "/", "math", ".", "sqrt", "(", "fan", ")", "\n", "_", "=", "self", ".", "basis_module", "[", "0", "]", ".", "forward", "(", ")", "# update basis_module.last_basis", "\n", "std_decompressed_before_correction", "=", "self", ".", "decompress_full", "(", "\n", "override_use_external_parameterization", "=", "False", "\n", ")", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "std_correction", "=", "std_target", "/", "std_decompressed_before_correction", "\n", "core_scaler", "=", "std_correction", "**", "(", "1", "/", "self", ".", "num_modes", ")", "\n", "self", ".", "basis_weights", "*=", "core_scaler", "\n", "std_decompressed_after_correction", "=", "self", ".", "decompress_full", "(", "\n", "override_use_external_parameterization", "=", "False", "\n", ")", ".", "std", "(", ")", ".", "item", "(", ")", "\n", "if", "verbose", ":", "\n", "                ", "msg", "=", "f'Init {self.layer_type_name if self.name is None else self.name:64} '", "f'std_before_corr={std_decompressed_before_correction:6.4f} '", "f'scaler={core_scaler:6.4f} '", "f'std_after_corr={std_decompressed_after_correction:6.4f} '", "f'std_target={std_target:6.4f} '", "\n", "print", "(", "msg", ")", "\n", "", "if", "self", ".", "use_external_parameterization", ":", "\n", "                ", "self", ".", "basis_tensors_proxy", ".", "add_tensor", "(", "self", ".", "name", ",", "self", ".", "num_modes", ",", "core_scaler", ")", "\n", "if", "not", "self", ".", "sanity_check_once", ":", "\n", "                    ", "del", "self", ".", "basis_weights", "\n", "if", "self", ".", "rank_adaptation", "is", "not", "None", ":", "\n", "                        ", "del", "self", ".", "rank_adapters", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLayerBase.decompress_cores": [[413, 424], ["basis.view.view.view", "basis_weights.mm().view", "basis_weights.mm().view.chunk", "core.squeeze", "basis_weights.mm", "tensorized_basis_modules_tr.TBasisLayerBase.rank_adapters().view", "tensorized_basis_modules_tr.TBasisLayerBase.rank_adapters"], "methods", ["None"], ["", "", "", "", "", "def", "decompress_cores", "(", "self", ")", ":", "\n", "        ", "basis_weights", "=", "self", ".", "basis_weights", "# D x B", "\n", "basis", "=", "self", ".", "basis_module", "[", "0", "]", ".", "last_basis", "# B x R x M x R", "\n", "core_shape", "=", "basis", ".", "shape", "[", "1", ":", "]", "\n", "basis", "=", "basis", ".", "view", "(", "self", ".", "num_basis", ",", "-", "1", ")", "\n", "cores", "=", "basis_weights", ".", "mm", "(", "basis", ")", ".", "view", "(", "self", ".", "num_modes", ",", "*", "core_shape", ")", "# D x R x M x R", "\n", "if", "self", ".", "rank_adaptation", "is", "not", "None", ":", "\n", "            ", "cores", "=", "cores", "*", "self", ".", "rank_adapters", "(", ")", ".", "view", "(", "self", ".", "num_modes", ",", "self", ".", "rank", ",", "1", ",", "1", ")", "\n", "", "list_cores", "=", "cores", ".", "chunk", "(", "self", ".", "num_modes", ",", "dim", "=", "0", ")", "\n", "list_cores", "=", "[", "core", ".", "squeeze", "(", "0", ")", "for", "core", "in", "list_cores", "]", "\n", "return", "list_cores", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLayerBase.decompress_full": [[425, 444], ["src.utils.tensor_shape_tools.reshape_inv_plan", "src.utils.tensor_shape_tools.pad_inv_plan", "tensorized_basis_modules_tr.TBasisLayerBase.basis_tensors_proxy.get_tensor_by_name", "tensorized_basis_modules_tr.TBasisLayerBase.decompress_cores", "tensorized_basis_modules_tr.TBasisLayerBase.contraction_fn", "src.utils.tensor_shape_tools.tensor_truncate_shape", "tensorized_basis_modules_tr.TBasisLayerBase.decompress_cores", "tensorized_basis_modules_tr.TBasisLayerBase.contraction_fn", "Exception"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.reshape_inv_plan", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.pad_inv_plan", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisWeightsFactoryProxy.get_tensor_by_name", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLayerBase.decompress_cores", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensor_shape_tools.tensor_truncate_shape", "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLayerBase.decompress_cores"], ["", "def", "decompress_full", "(", "self", ",", "override_use_external_parameterization", "=", "None", ")", ":", "\n", "        ", "use_external_parameterization", "=", "self", ".", "use_external_parameterization", "\n", "if", "override_use_external_parameterization", "is", "not", "None", ":", "\n", "            ", "use_external_parameterization", "=", "override_use_external_parameterization", "\n", "", "if", "use_external_parameterization", ":", "\n", "            ", "weight", "=", "self", ".", "basis_tensors_proxy", ".", "get_tensor_by_name", "(", "self", ".", "name", ")", "\n", "if", "self", ".", "sanity_check_once", ":", "\n", "                ", "list_cores", "=", "self", ".", "decompress_cores", "(", ")", "\n", "weight_old", "=", "self", ".", "contraction_fn", "(", "*", "list_cores", ")", "\n", "residual", "=", "(", "weight_old", "-", "weight", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "raise", "Exception", "(", "f'Max abs diff between external and internal parameterizations: {residual}'", ")", "\n", "", "", "else", ":", "\n", "            ", "list_cores", "=", "self", ".", "decompress_cores", "(", ")", "\n", "weight", "=", "self", ".", "contraction_fn", "(", "*", "list_cores", ")", "\n", "", "if", "self", ".", "permute_and_group_factors", ":", "\n", "            ", "weight", "=", "tensor_truncate_shape", "(", "weight", ",", "self", ".", "plan_shape", "[", "'shape_dst'", "]", ")", "\n", "", "weight", "=", "reshape_inv_plan", "(", "weight", ",", "self", ".", "plan_shape", ")", "\n", "weight", "=", "pad_inv_plan", "(", "weight", ",", "self", ".", "plan_pad", ")", "\n", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLayerBase.num_parameters": [[445, 447], ["None"], "methods", ["None"], ["", "def", "num_parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_param", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisConvNd.__init__": [[462, 479], ["tensorized_basis_modules_tr.TBasisLayerBase.__init__", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.tensor().prod().item", "torch.nn.Unfold", "torch.nn.Unfold", "torch.nn.Unfold", "torch.nn.Unfold", "type", "type", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor().prod", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["def", "__init__", "(", "self", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "layer_type_name", "=", "self", ".", "map_type_to_name", "[", "type", "(", "module", ")", "]", "\n", "super", "(", ")", ".", "__init__", "(", "module", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "conv_fn", "=", "self", ".", "map_type_to_F", "[", "type", "(", "module", ")", "]", "\n", "self", ".", "in_channels", "=", "module", ".", "in_channels", "\n", "self", ".", "out_channels", "=", "module", ".", "out_channels", "\n", "self", ".", "kernel_size", "=", "module", ".", "kernel_size", "\n", "self", ".", "kernel_numel", "=", "torch", ".", "tensor", "(", "self", ".", "kernel_size", ")", ".", "prod", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "stride", "=", "module", ".", "stride", "\n", "self", ".", "padding", "=", "module", ".", "padding", "\n", "self", ".", "dilation", "=", "module", ".", "dilation", "\n", "self", ".", "groups", "=", "module", ".", "groups", "\n", "self", ".", "input_unfolder", "=", "torch", ".", "nn", ".", "Unfold", "(", "\n", "module", ".", "kernel_size", ",", "\n", "dilation", "=", "module", ".", "dilation", ",", "\n", "padding", "=", "module", ".", "padding", ",", "\n", "stride", "=", "module", ".", "stride", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisConvNd.init_checks": [[481, 485], ["isinstance", "isinstance"], "methods", ["None"], ["", "def", "init_checks", "(", "self", ",", "module", ")", ":", "\n", "        ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvNd", ")", "\n", "assert", "not", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "conv", ".", "_ConvTransposeMixin", ")", ",", "'Not implemented'", "\n", "assert", "module", ".", "padding_mode", "!=", "'circular'", ",", "'Not implemented'", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisConvNd.forward": [[486, 492], ["tensorized_basis_modules_tr.TBasisConvNd.decompress_full", "tensorized_basis_modules_tr.TBasisConvNd.conv_fn"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLayerBase.decompress_full"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "\"\"\"\n        Decompress TR-weight into a regular weight and apply torch convolution.\n        \"\"\"", "\n", "weight", "=", "self", ".", "decompress_full", "(", ")", "\n", "return", "self", ".", "conv_fn", "(", "input", ",", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisConvNd.extra_repr": [[493, 495], ["str"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f'[{\" x \".join([str(a) for a in self.plan_pad[\"shape_src\"]])}] stride={self.stride} '", "f'padding={self.padding} dilation={self.dilation} groups={self.groups} has_bias={self.bias is not None}'", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLinear.__init__": [[499, 502], ["tensorized_basis_modules_tr.TBasisLayerBase.__init__"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "layer_type_name", "=", "'Linear'", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLinear.init_checks": [[503, 505], ["isinstance"], "methods", ["None"], ["", "def", "init_checks", "(", "self", ",", "module", ")", ":", "\n", "        ", "assert", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "modules", ".", "Linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLinear.forward": [[506, 509], ["tensorized_basis_modules_tr.TBasisLinear.decompress_full", "torch.linear", "torch.linear"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLayerBase.decompress_full"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "weight", "=", "self", ".", "decompress_full", "(", ")", "\n", "return", "F", ".", "linear", "(", "input", ",", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.utils.tensorized_basis_modules_tr.TBasisLinear.extra_repr": [[510, 512], ["str"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f'[{\" x \".join([str(a) for a in self.plan_pad[\"shape_src\"]])}] has_bias={self.bias is not None}'", "\n", "", "", ""]], "home.repos.pwc.inspect_result.toshas_tbasis.plots.cifar10_resnet32_top1.hex_to_rgb": [[157, 162], ["hex_color.lstrip.lstrip", "len", "int", "int", "int"], "function", ["None"], ["def", "hex_to_rgb", "(", "hex_color", ":", "str", ")", "->", "tuple", ":", "\n", "    ", "hex_color", "=", "hex_color", ".", "lstrip", "(", "\"#\"", ")", "\n", "if", "len", "(", "hex_color", ")", "==", "3", ":", "\n", "        ", "hex_color", "=", "hex_color", "*", "2", "\n", "", "return", "int", "(", "hex_color", "[", "0", ":", "2", "]", ",", "16", ")", ",", "int", "(", "hex_color", "[", "2", ":", "4", "]", ",", "16", ")", ",", "int", "(", "hex_color", "[", "4", ":", "6", "]", ",", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.plots.cifar10_resnet32_top1.plot_table": [[164, 229], ["plotly.Figure", "dict_data.items", "go.Figure.update_layout", "go.Figure.update_xaxes", "go.Figure.update_yaxes", "go.Figure.write_image", "copy.deepcopy", "copy.deepcopy.pop", "copy.deepcopy.pop", "go.Figure.add_trace", "go.Figure.update_layout", "len", "len", "plotly.Scatter", "kwargs.pop", "dict", "dict", "go.Figure.add_trace", "go.Figure.add_trace", "plotly.Scatter", "plotly.Scatter", "kwargs.pop", "plotly.layout.Annotation", "zip", "zip", "cifar10_resnet32_top1.hex_to_rgb"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.plots.cifar10_resnet32_top1.hex_to_rgb"], ["", "def", "plot_table", "(", "dict_data", ",", "title", ",", "fname", ",", "xaxis_title", ",", "yaxis_title", ",", "baseline_ann", "=", "None", ",", "baseline_x", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "fig", "=", "go", ".", "Figure", "(", ")", "\n", "\n", "for", "name", ",", "data", "in", "dict_data", ".", "items", "(", ")", ":", "\n", "        ", "v", "=", "deepcopy", "(", "data", ")", "\n", "v", "[", "'name'", "]", "=", "name", "\n", "v", "[", "'x'", "]", "=", "[", "a", "[", "0", "]", "for", "a", "in", "v", "[", "'data'", "]", "]", "\n", "v", "[", "'y'", "]", "=", "[", "a", "[", "1", "]", "for", "a", "in", "v", "[", "'data'", "]", "]", "\n", "if", "len", "(", "v", "[", "'data'", "]", "[", "0", "]", ")", ">=", "3", ":", "\n", "            ", "v", "[", "'text'", "]", "=", "[", "a", "[", "2", "]", "for", "a", "in", "v", "[", "'data'", "]", "]", "\n", "", "if", "len", "(", "v", "[", "'data'", "]", "[", "0", "]", ")", ">=", "4", ":", "\n", "            ", "for", "i", "in", "(", "3", ",", "2", ",", "1", ")", ":", "\n", "                ", "fig", ".", "add_trace", "(", "go", ".", "Scatter", "(", "\n", "x", "=", "v", "[", "'x'", "]", ",", "y", "=", "[", "y", "+", "i", "*", "s", "[", "3", "]", "for", "y", ",", "s", "in", "zip", "(", "v", "[", "'y'", "]", ",", "v", "[", "'data'", "]", ")", "]", ",", "fill", "=", "None", ",", "mode", "=", "'lines'", ",", "\n", "line", "=", "{", "'width'", ":", "0", "}", ",", "showlegend", "=", "False", ",", "\n", ")", ")", "\n", "fig", ".", "add_trace", "(", "go", ".", "Scatter", "(", "\n", "x", "=", "v", "[", "'x'", "]", ",", "y", "=", "[", "y", "-", "i", "*", "s", "[", "3", "]", "for", "y", ",", "s", "in", "zip", "(", "v", "[", "'y'", "]", ",", "v", "[", "'data'", "]", ")", "]", ",", "fill", "=", "'tonexty'", ",", "mode", "=", "'lines'", ",", "\n", "line", "=", "{", "'width'", ":", "0", "}", ",", "showlegend", "=", "False", ",", "fillcolor", "=", "f\"rgba{(*hex_to_rgb(v['line']['color']), 0.3)}\"", "\n", ")", ")", "\n", "", "", "v", ".", "pop", "(", "'data'", ")", "\n", "v", ".", "pop", "(", "'baseline'", ",", "None", ")", "\n", "fig", ".", "add_trace", "(", "go", ".", "Scatter", "(", "**", "v", ")", ")", "\n", "\n", "", "fig", ".", "update_layout", "(", "\n", "title", "=", "title", ",", "\n", "title_x", "=", "0.5", ",", "\n", "xaxis_title", "=", "xaxis_title", ",", "\n", "yaxis_title", "=", "yaxis_title", ",", "\n", "plot_bgcolor", "=", "'#FFFFFF'", ",", "\n", "xaxis_type", "=", "kwargs", ".", "pop", "(", "'xaxis_type'", ",", "'log'", ")", ",", "\n", "colorway", "=", "px", ".", "colors", ".", "qualitative", ".", "Dark24", ",", "\n", "showlegend", "=", "True", ",", "\n", "legend", "=", "dict", "(", "\n", "orientation", "=", "'v'", ",", "x", "=", "0.98", ",", "y", "=", "0.01", ",", "xanchor", "=", "'right'", ",", "yanchor", "=", "'bottom'", ",", "\n", "bgcolor", "=", "None", ",", "bordercolor", "=", "\"Black\"", ",", "borderwidth", "=", "3", ",", "traceorder", "=", "'reversed'", ",", "\n", "font", "=", "kwargs", ".", "pop", "(", "'legend_font_dict'", ",", "None", ")", "\n", ")", ",", "\n", "width", "=", "1024", ",", "\n", "height", "=", "650", ",", "\n", "font", "=", "dict", "(", "\n", "size", "=", "24", ",", "\n", "color", "=", "\"#7f7f7f\"", "\n", ")", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "if", "baseline_ann", "is", "not", "None", ":", "\n", "        ", "fig", ".", "update_layout", "(", "annotations", "=", "[", "\n", "go", ".", "layout", ".", "Annotation", "(", "\n", "x", "=", "baseline_x", ",", "\n", "y", "=", "0", ",", "\n", "xref", "=", "\"x\"", ",", "\n", "yref", "=", "\"y\"", ",", "\n", "xanchor", "=", "'left'", ",", "\n", "yanchor", "=", "'bottom'", ",", "\n", "text", "=", "baseline_ann", ",", "\n", "showarrow", "=", "False", ",", "\n", ")", "\n", "]", ")", "\n", "\n", "", "fig", ".", "update_xaxes", "(", "showline", "=", "True", ",", "gridwidth", "=", "3", ",", "gridcolor", "=", "'#F0F0F0'", ",", "linecolor", "=", "\"black\"", ",", "linewidth", "=", "3", ")", "\n", "fig", ".", "update_yaxes", "(", "showline", "=", "True", ",", "gridwidth", "=", "3", ",", "gridcolor", "=", "'#F0F0F0'", ",", "linecolor", "=", "\"black\"", ",", "linewidth", "=", "3", ")", "\n", "\n", "fig", ".", "write_image", "(", "fname", ")", "\n", "# fig.show()", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.plots.cifar10_resnet32_top1.process_resnet32_cifar10_top1": [[232, 376], ["pandas.read_csv", "pd.read_csv.iterrows", "exps.items", "copy.deepcopy", "cifar10_resnet32_top1.plot_table", "float", "float", "float", "min", "numpy.array", "np.array.mean", "np.array.std", "exp_data.pop", "int", "int", "exps.get", "[].append", "dict", "float"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.plots.cifar10_resnet32_top1.plot_table", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.get"], ["", "def", "process_resnet32_cifar10_top1", "(", "flavor", ")", ":", "\n", "    ", "assert", "flavor", "in", "(", "'net_total'", ",", "'net_param'", ")", "\n", "\n", "df", "=", "pd", ".", "read_csv", "(", "'cifar10_resnet32_top1_wandb.csv'", ")", "\n", "exps", "=", "{", "}", "\n", "compression_limit_total", "=", "None", "\n", "min_perf", "=", "np", ".", "inf", "\n", "\n", "for", "idx", ",", "row", "in", "df", ".", "iterrows", "(", ")", ":", "\n", "        ", "top1", "=", "float", "(", "row", "[", "'metrics_best/top1acc'", "]", ")", "\n", "cmp_with_b", "=", "float", "(", "row", "[", "f'compression/compression_{flavor}_with_basis'", "]", ")", "\n", "cmp_wo_b", "=", "float", "(", "row", "[", "f'compression/compression_{flavor}_without_basis'", "]", ")", "\n", "min_perf", "=", "min", "(", "min_perf", ",", "top1", ")", "\n", "is_baseline", "=", "'baseline'", "in", "row", ".", "Name", "\n", "if", "is_baseline", ":", "\n", "            ", "exp_name", "=", "'baseline'", "\n", "", "else", ":", "\n", "            ", "if", "compression_limit_total", "is", "None", ":", "\n", "                ", "compression_limit_total", "=", "float", "(", "row", "[", "'compression/compression_limit_total'", "]", ")", "\n", "", "b", "=", "int", "(", "row", "[", "'basis_size'", "]", ")", "\n", "r", "=", "int", "(", "row", "[", "'basis_rank'", "]", ")", "\n", "exp_name", "=", "f'B{b} R{r}'", "\n", "", "if", "exps", ".", "get", "(", "exp_name", ")", "is", "None", ":", "\n", "            ", "exps", "[", "exp_name", "]", "=", "{", "\n", "'top1'", ":", "[", "top1", "]", ",", "\n", "'cmp_with_b'", ":", "cmp_with_b", ",", "\n", "'cmp_wo_b'", ":", "cmp_wo_b", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "if", "not", "is_baseline", ":", "\n", "                ", "assert", "exps", "[", "exp_name", "]", "[", "'cmp_with_b'", "]", "==", "cmp_with_b", ",", "f\"{row.Name}: {exps[exp_name]['cmp_with_b']} == {cmp_with_b}\"", "\n", "assert", "exps", "[", "exp_name", "]", "[", "'cmp_wo_b'", "]", "==", "cmp_wo_b", ",", "f\"{row.Name}: {exps[exp_name]['cmp_wo_b']} == {cmp_wo_b}\"", "\n", "", "exps", "[", "exp_name", "]", "[", "'top1'", "]", ".", "append", "(", "top1", ")", "\n", "\n", "", "", "for", "exp_name", ",", "exp_data", "in", "exps", ".", "items", "(", ")", ":", "\n", "        ", "top1s", "=", "np", ".", "array", "(", "exp_data", "[", "'top1'", "]", ")", "\n", "exp_data", "[", "'top1_mean'", "]", "=", "top1s", ".", "mean", "(", ")", "\n", "exp_data", "[", "'top1_std'", "]", "=", "top1s", ".", "std", "(", ")", "\n", "exp_data", ".", "pop", "(", "'top1'", ")", "\n", "\n", "", "pt_order", "=", "[", "\n", "'B2 R2'", ",", "\n", "'B4 R2'", ",", "\n", "'B2 R4'", ",", "\n", "'B4 R4'", ",", "\n", "'B8 R4'", ",", "\n", "'B4 R8'", ",", "\n", "'B8 R8'", ",", "\n", "'B16 R8'", ",", "\n", "'B8 R16'", ",", "\n", "'B16 R16'", ",", "\n", "'B32 R16'", ",", "\n", "'B16 R32'", ",", "\n", "'B32 R32'", ",", "\n", "]", "\n", "\n", "plots", "=", "copy", ".", "deepcopy", "(", "resnet32_cifar10_data", ")", "\n", "\n", "plots", "[", "'T-Basis (with basis)'", "]", "=", "{", "\n", "'data'", ":", "[", "\n", "(", "exps", "[", "tag", "]", "[", "'cmp_with_b'", "]", ",", "exps", "[", "tag", "]", "[", "'top1_mean'", "]", ",", "tag", ",", "exps", "[", "tag", "]", "[", "'top1_std'", "]", ")", "\n", "for", "tag", "in", "pt_order", "\n", "]", ",", "\n", "'mode'", ":", "'lines+markers+text'", ",", "\n", "'marker'", ":", "{", "\n", "'size'", ":", "12", ",", "\n", "'color'", ":", "PALETTE", "[", "6", "]", "\n", "}", ",", "\n", "'textposition'", ":", "'bottom right'", ",", "\n", "'textfont'", ":", "{", "'size'", ":", "14", "}", ",", "\n", "'line'", ":", "{", "\n", "'color'", ":", "PALETTE", "[", "6", "]", ",", "\n", "'dash'", ":", "None", ",", "\n", "'width'", ":", "4", "\n", "}", "\n", "}", "\n", "\n", "plots", "[", "'T-Basis (without basis)'", "]", "=", "{", "\n", "'data'", ":", "[", "\n", "(", "exps", "[", "tag", "]", "[", "'cmp_wo_b'", "]", ",", "exps", "[", "tag", "]", "[", "'top1_mean'", "]", ",", "tag", ")", "\n", "for", "tag", "in", "pt_order", "\n", "]", ",", "\n", "'mode'", ":", "'lines+markers+text'", ",", "\n", "'marker'", ":", "{", "\n", "'size'", ":", "12", ",", "\n", "'color'", ":", "PALETTE", "[", "7", "]", "\n", "}", ",", "\n", "'textposition'", ":", "'top left'", ",", "\n", "'textfont'", ":", "{", "'size'", ":", "14", "}", ",", "\n", "'line'", ":", "{", "\n", "'color'", ":", "PALETTE", "[", "7", "]", ",", "\n", "'dash'", ":", "None", ",", "\n", "'width'", ":", "4", "\n", "}", "\n", "}", "\n", "\n", "plots", "[", "'Baseline'", "]", "=", "{", "\n", "'data'", ":", "[", "\n", "(", "0", ",", "exps", "[", "'baseline'", "]", "[", "'top1_mean'", "]", ")", ",", "\n", "(", "100", ",", "exps", "[", "'baseline'", "]", "[", "'top1_mean'", "]", ")", ",", "\n", "]", ",", "\n", "'mode'", ":", "'lines'", ",", "\n", "'marker'", ":", "{", "\n", "'color'", ":", "'black'", "\n", "}", ",", "\n", "'line'", ":", "{", "\n", "'color'", ":", "'black'", ",", "\n", "'dash'", ":", "'dash'", ",", "\n", "'width'", ":", "3", "\n", "}", "\n", "}", "\n", "\n", "if", "flavor", "==", "'net_total'", ":", "\n", "        ", "plots", "[", "'Compression Limit'", "]", "=", "{", "\n", "'data'", ":", "[", "\n", "(", "compression_limit_total", ",", "min_perf", ")", ",", "\n", "(", "compression_limit_total", ",", "exps", "[", "'baseline'", "]", "[", "'top1_mean'", "]", ")", ",", "\n", "]", ",", "\n", "'mode'", ":", "'lines'", ",", "\n", "'marker'", ":", "{", "\n", "'color'", ":", "'black'", "\n", "}", ",", "\n", "'line'", ":", "{", "\n", "'color'", ":", "'black'", ",", "\n", "'dash'", ":", "'dot'", ",", "\n", "'width'", ":", "3", "\n", "}", "\n", "}", "\n", "\n", "", "title_suffix", "=", "{", "\n", "'net_total'", ":", "'(parameters and buffers)'", ",", "\n", "'net_param'", ":", "'(parameters only)'", ",", "\n", "}", "[", "flavor", "]", "\n", "\n", "plot_table", "(", "\n", "plots", ",", "\n", "title", "=", "f'ResNet32-CIFAR10-Top1 {title_suffix}'", ",", "\n", "fname", "=", "f'resnet32_cifar10_top1_{flavor}.pdf'", ",", "\n", "xaxis_title", "=", "'Compression %'", ",", "\n", "yaxis_title", "=", "'Accuracy %'", ",", "\n", "baseline_ann", "=", "None", ",", "\n", "legend_font_dict", "=", "dict", "(", "size", "=", "22", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms.Identity.__call__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms.AssertModalitiesEqualDimensionsPIL.__call__": [[17, 29], ["sample.items", "isinstance"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "mod_ref", ",", "dims", "=", "None", ",", "None", "\n", "for", "modality", ",", "img", "in", "sample", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "img", ",", "Image", ".", "Image", ")", ":", "\n", "                ", "continue", "\n", "", "if", "dims", "is", "None", ":", "\n", "                ", "mod_ref", ",", "dims", "=", "modality", ",", "img", ".", "size", "\n", "", "else", ":", "\n", "                ", "assert", "img", ".", "size", "==", "dims", ",", "f'Size of {modality} is {img.size} does not match size of {mod_ref} which is {dims}'", "\n", "", "", "sample", "[", "META_DIMS", "]", "=", "dims", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms.CropForPassableSidesPIL.__init__": [[32, 34], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "multiple", ")", ":", "\n", "        ", "self", ".", "multiple", "=", "multiple", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms.CropForPassableSidesPIL.__call__": [[35, 48], ["sample.keys", "isinstance", "data.crop.crop.crop"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "assert", "META_DIMS", "in", "sample", ",", "'AssertModalitiesEqualDimensionsPIL is required'", "\n", "width", ",", "height", "=", "sample", "[", "META_DIMS", "]", "\n", "width_new", "=", "self", ".", "multiple", "*", "(", "width", "//", "self", ".", "multiple", ")", "\n", "height_new", "=", "self", ".", "multiple", "*", "(", "height", "//", "self", ".", "multiple", ")", "\n", "assert", "width_new", ">", "0", "and", "height_new", ">", "0", ",", "'Bad input dimensions'", "\n", "for", "modality", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "data", "=", "sample", "[", "modality", "]", "\n", "if", "isinstance", "(", "data", ",", "Image", ".", "Image", ")", ":", "\n", "                ", "data", "=", "data", ".", "crop", "(", "(", "0", ",", "0", ",", "width_new", ",", "height_new", ")", ")", "\n", "sample", "[", "modality", "]", "=", "data", "\n", "", "", "sample", "[", "META_DIMS", "]", "=", "width_new", ",", "height_new", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms._RandomScaledTiltedWarpedPIL.__init__": [[51, 65], ["isinstance", "isinstance", "isinstance", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "dst_size", ",", "random_scale_min", ",", "random_scale_max", ",", "\n", "random_tilt_max_deg", ",", "random_wiggle_max_ratio", ",", "random_reflect", ",", "\n", "semseg_ignore_class", ",", "center_offset_instead_of_random", "\n", ")", ":", "\n", "        ", "assert", "isinstance", "(", "dst_size", ",", "int", ")", "or", "isinstance", "(", "dst_size", ",", "tuple", ")", ",", "f'Invalid type of dst_size {type(dst_size)}'", "\n", "self", ".", "dst_size", "=", "dst_size", "if", "isinstance", "(", "dst_size", ",", "tuple", ")", "else", "(", "dst_size", ",", "dst_size", ")", "\n", "self", ".", "random_scale_min", "=", "random_scale_min", "\n", "self", ".", "random_scale_max", "=", "random_scale_max", "\n", "self", ".", "random_tilt_max_deg", "=", "random_tilt_max_deg", "\n", "self", ".", "random_wiggle_max_ratio", "=", "random_wiggle_max_ratio", "\n", "self", ".", "random_reflect", "=", "random_reflect", "\n", "self", ".", "semseg_ignore_class", "=", "semseg_ignore_class", "\n", "self", ".", "center_offset_instead_of_random", "=", "center_offset_instead_of_random", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms._RandomScaledTiltedWarpedPIL.__call__": [[66, 110], ["transforms._RandomScaledTiltedWarpedPIL._generate_corners", "transforms._RandomScaledTiltedWarpedPIL._perspective_transform_from_corners", "sample.items", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.random.random", "list", "reversed", "isinstance", "data.transform.transform.transform", "type"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms._RandomScaledTiltedWarpedPIL._generate_corners", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms._RandomScaledTiltedWarpedPIL._perspective_transform_from_corners"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "assert", "MOD_RGB", "in", "sample", ",", "f'{__class__} needs to know canvas size'", "\n", "src_size", "=", "sample", "[", "MOD_RGB", "]", ".", "size", "\n", "dst_corners", "=", "[", "\n", "np", ".", "array", "(", "[", "0", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "array", "(", "[", "0", ",", "self", ".", "dst_size", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "array", "(", "[", "self", ".", "dst_size", "[", "0", "]", ",", "self", ".", "dst_size", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "array", "(", "[", "self", ".", "dst_size", "[", "0", "]", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "]", "\n", "if", "self", ".", "random_reflect", ":", "\n", "            ", "do_reflect", "=", "np", ".", "random", ".", "random", "(", ")", "<", "0.5", "\n", "if", "do_reflect", ":", "\n", "                ", "dst_corners", "=", "list", "(", "reversed", "(", "dst_corners", ")", ")", "\n", "", "", "src_corners", ",", "src_scale", "=", "_RandomScaledTiltedWarpedPIL", ".", "_generate_corners", "(", "\n", "src_size", ",", "self", ".", "dst_size", ",", "self", ".", "random_scale_min", ",", "self", ".", "random_scale_max", ",", "\n", "self", ".", "random_tilt_max_deg", ",", "self", ".", "random_wiggle_max_ratio", ",", "\n", "self", ".", "center_offset_instead_of_random", ",", "\n", ")", "\n", "warp_coef_inv", "=", "_RandomScaledTiltedWarpedPIL", ".", "_perspective_transform_from_corners", "(", "dst_corners", ",", "src_corners", ")", "\n", "\n", "for", "modality", ",", "data", "in", "sample", ".", "items", "(", ")", ":", "\n", "            ", "if", "modality", "not", "in", "MODE_INTERP", ":", "\n", "                ", "continue", "\n", "", "interp", "=", "MODE_INTERP", "[", "modality", "]", "\n", "if", "interp", "is", "None", ":", "\n", "                ", "continue", "\n", "", "elif", "interp", "in", "(", "'nearest'", ",", "'bilinear'", ")", ":", "\n", "                ", "assert", "isinstance", "(", "data", ",", "Image", ".", "Image", ")", ",", "f'Input must be PIL.Image, found {type(data)}'", "\n", "interp_pil", "=", "{", "\n", "'nearest'", ":", "Image", ".", "NEAREST", ",", "\n", "'bilinear'", ":", "Image", ".", "BILINEAR", ",", "\n", "}", "[", "interp", "]", "\n", "fill_color", "=", "{", "\n", "MOD_RGB", ":", "None", ",", "\n", "MOD_SS_DENSE", ":", "self", ".", "semseg_ignore_class", ",", "\n", "}", "[", "modality", "]", "\n", "data", "=", "data", ".", "transform", "(", "\n", "self", ".", "dst_size", ",", "Image", ".", "PERSPECTIVE", ",", "warp_coef_inv", ",", "interp_pil", ",", "fillcolor", "=", "fill_color", "\n", ")", "\n", "", "sample", "[", "modality", "]", "=", "data", "\n", "\n", "", "sample", "[", "META_DIMS", "]", "=", "self", ".", "dst_size", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms._RandomScaledTiltedWarpedPIL._perspective_transform_from_corners": [[114, 124], ["zip", "numpy.matrix", "numpy.array().reshape", "numpy.dot", "numpy.array().reshape", "matrix.append", "matrix.append", "numpy.array", "numpy.linalg.inv", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_perspective_transform_from_corners", "(", "corners_src", ",", "corners_dst", ")", ":", "\n", "        ", "matrix", "=", "[", "]", "\n", "for", "p_src", ",", "p_dst", "in", "zip", "(", "corners_src", ",", "corners_dst", ")", ":", "\n", "            ", "matrix", ".", "append", "(", "[", "p_src", "[", "0", "]", ",", "p_src", "[", "1", "]", ",", "1", ",", "0", ",", "0", ",", "0", ",", "-", "p_dst", "[", "0", "]", "*", "p_src", "[", "0", "]", ",", "-", "p_dst", "[", "0", "]", "*", "p_src", "[", "1", "]", "]", ")", "\n", "matrix", ".", "append", "(", "[", "0", ",", "0", ",", "0", ",", "p_src", "[", "0", "]", ",", "p_src", "[", "1", "]", ",", "1", ",", "-", "p_dst", "[", "1", "]", "*", "p_src", "[", "0", "]", ",", "-", "p_dst", "[", "1", "]", "*", "p_src", "[", "1", "]", "]", ")", "\n", "", "A", "=", "np", ".", "matrix", "(", "matrix", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "B", "=", "np", ".", "array", "(", "corners_dst", ")", ".", "reshape", "(", "8", ")", "\n", "res", "=", "np", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "A", ".", "T", "*", "A", ")", "*", "A", ".", "T", ",", "B", ")", "\n", "return", "np", ".", "array", "(", "res", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms._RandomScaledTiltedWarpedPIL._dst_corners_bounding_box": [[125, 135], ["min", "max", "min", "max"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_dst_corners_bounding_box", "(", "corners", ")", ":", "\n", "        ", "x_min", ",", "x_max", "=", "corners", "[", "0", "]", "[", "0", "]", ",", "corners", "[", "0", "]", "[", "0", "]", "\n", "y_min", ",", "y_max", "=", "corners", "[", "0", "]", "[", "1", "]", ",", "corners", "[", "0", "]", "[", "1", "]", "\n", "for", "corner", "in", "corners", "[", "1", ":", "]", ":", "\n", "            ", "x_min", "=", "min", "(", "x_min", ",", "corner", "[", "0", "]", ")", "\n", "x_max", "=", "max", "(", "x_max", ",", "corner", "[", "0", "]", ")", "\n", "y_min", "=", "min", "(", "y_min", ",", "corner", "[", "1", "]", ")", "\n", "y_max", "=", "max", "(", "y_max", ",", "corner", "[", "1", "]", ")", "\n", "", "return", "x_min", ",", "x_max", ",", "y_min", ",", "y_max", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms._RandomScaledTiltedWarpedPIL._transform_scale_rotate_wiggle": [[136, 163], ["numpy.random.uniform", "numpy.deg2rad", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.random.uniform", "numpy.array", "numpy.matmul", "min", "range", "zip", "numpy.random.uniform", "numpy.random.uniform", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_transform_scale_rotate_wiggle", "(", "dst_size", ",", "scale_min", ",", "scale_max", ",", "angle_max_deg", ",", "wiggle_max_ratio", ")", ":", "\n", "        ", "corners", "=", "[", "\n", "np", ".", "array", "(", "[", "-", "dst_size", "[", "0", "]", "/", "2", ",", "-", "dst_size", "[", "1", "]", "/", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "array", "(", "[", "-", "dst_size", "[", "0", "]", "/", "2", ",", "dst_size", "[", "1", "]", "/", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "array", "(", "[", "dst_size", "[", "0", "]", "/", "2", ",", "dst_size", "[", "1", "]", "/", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "np", ".", "array", "(", "[", "dst_size", "[", "0", "]", "/", "2", ",", "-", "dst_size", "[", "1", "]", "/", "2", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "]", "\n", "\n", "max_wiggle_pix", "=", "wiggle_max_ratio", "*", "min", "(", "dst_size", "[", "0", "]", ",", "dst_size", "[", "1", "]", ")", "/", "2", "\n", "scale", "=", "np", ".", "random", ".", "uniform", "(", "scale_min", ",", "scale_max", ")", "\n", "angle_deg", "=", "np", ".", "random", ".", "uniform", "(", "-", "angle_max_deg", ",", "angle_max_deg", ")", "if", "0", "<", "angle_max_deg", "<=", "45", "else", "0", "\n", "wiggle_factor", "=", "[", "\n", "np", ".", "array", "(", "[", "\n", "np", ".", "random", ".", "uniform", "(", "-", "max_wiggle_pix", ",", "max_wiggle_pix", ")", ",", "\n", "np", ".", "random", ".", "uniform", "(", "-", "max_wiggle_pix", ",", "max_wiggle_pix", ")", "\n", "]", ",", "dtype", "=", "np", ".", "float32", ")", "for", "_", "in", "range", "(", "4", ")", "\n", "]", "\n", "\n", "angle_rad", "=", "np", ".", "deg2rad", "(", "angle_deg", ")", "\n", "matrix_rot", "=", "np", ".", "array", "(", "[", "\n", "[", "np", ".", "cos", "(", "angle_rad", ")", ",", "np", ".", "sin", "(", "-", "angle_rad", ")", "]", ",", "\n", "[", "np", ".", "sin", "(", "angle_rad", ")", ",", "np", ".", "cos", "(", "angle_rad", ")", "]", "\n", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "corners", "=", "[", "np", ".", "matmul", "(", "matrix_rot", ",", "scale", "*", "(", "c", "+", "w", ")", ")", "for", "c", ",", "w", "in", "zip", "(", "corners", ",", "wiggle_factor", ")", "]", "\n", "return", "corners", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms._RandomScaledTiltedWarpedPIL._generate_corners": [[164, 196], ["transforms._RandomScaledTiltedWarpedPIL._transform_scale_rotate_wiggle", "transforms._RandomScaledTiltedWarpedPIL._dst_corners_bounding_box", "numpy.random.uniform", "numpy.random.uniform", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms._RandomScaledTiltedWarpedPIL._transform_scale_rotate_wiggle", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms._RandomScaledTiltedWarpedPIL._dst_corners_bounding_box"], ["", "@", "staticmethod", "\n", "def", "_generate_corners", "(", "\n", "src_size", ",", "dst_size", ",", "random_scale_min", "=", "1.0", ",", "random_scale_max", "=", "2.0", ",", "\n", "random_tilt_max_deg", "=", "0.0", ",", "random_wiggle_max_ratio", "=", "0.0", ",", "center_offset_instead_of_random", "=", "False", "\n", ")", ":", "\n", "        ", "assert", "random_scale_min", ">", "0", ",", "'random_scale_min must be positive'", "\n", "assert", "random_scale_max", ">=", "random_scale_min", ",", "'random_scale_max > random_scale_min'", "\n", "assert", "random_tilt_max_deg", ">=", "0", ",", "'tilt must be non negative'", "\n", "assert", "0", "<=", "random_wiggle_max_ratio", "<", "0.5", ",", "'random_wiggle_max_ratio must be [0, 1/2]'", "\n", "\n", "corners", ",", "scale", "=", "_RandomScaledTiltedWarpedPIL", ".", "_transform_scale_rotate_wiggle", "(", "\n", "dst_size", ",", "random_scale_min", ",", "random_scale_max", ",", "random_tilt_max_deg", ",", "random_wiggle_max_ratio", "\n", ")", "\n", "x_min", ",", "x_max", ",", "y_min", ",", "y_max", "=", "_RandomScaledTiltedWarpedPIL", ".", "_dst_corners_bounding_box", "(", "corners", ")", "\n", "\n", "range_x_min", "=", "-", "x_min", "\n", "range_x_max", "=", "src_size", "[", "0", "]", "-", "x_max", "\n", "range_y_min", "=", "-", "y_min", "\n", "range_y_max", "=", "src_size", "[", "1", "]", "-", "y_max", "\n", "\n", "if", "center_offset_instead_of_random", "or", "range_x_max", "<=", "range_x_min", ":", "\n", "            ", "offs_x", "=", "(", "range_x_min", "+", "range_x_max", ")", "*", "0.5", "\n", "", "else", ":", "\n", "            ", "offs_x", "=", "np", ".", "random", ".", "uniform", "(", "range_x_min", ",", "range_x_max", ")", "\n", "\n", "", "if", "center_offset_instead_of_random", "or", "range_y_max", "<=", "range_y_min", ":", "\n", "            ", "offs_y", "=", "(", "range_y_min", "+", "range_y_max", ")", "*", "0.5", "\n", "", "else", ":", "\n", "            ", "offs_y", "=", "np", ".", "random", ".", "uniform", "(", "range_y_min", ",", "range_y_max", ")", "\n", "\n", "", "corners", "=", "[", "c", "+", "np", ".", "array", "(", "[", "offs_x", ",", "offs_y", "]", ",", "dtype", "=", "np", ".", "float32", ")", "for", "c", "in", "corners", "]", "\n", "return", "corners", ",", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms.RandomScaledTiltedWarpedCropPIL.__init__": [[199, 207], ["transforms._RandomScaledTiltedWarpedPIL.__init__"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "dst_size", ",", "random_scale_min", ",", "random_scale_max", ",", "random_tilt_max_deg", ",", "random_wiggle_max_ratio", ",", "\n", "random_reflect", ",", "semseg_ignore_class", "\n", ")", ":", "\n", "        ", "super", "(", "RandomScaledTiltedWarpedCropPIL", ",", "self", ")", ".", "__init__", "(", "\n", "dst_size", ",", "random_scale_min", ",", "random_scale_max", ",", "random_tilt_max_deg", ",", "\n", "random_wiggle_max_ratio", ",", "random_reflect", ",", "semseg_ignore_class", ",", "\n", "center_offset_instead_of_random", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms.CropCenterPIL.__init__": [[211, 221], ["transforms._RandomScaledTiltedWarpedPIL.__init__"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dst_size", ",", "semseg_ignore_class", ")", ":", "\n", "        ", "super", "(", "CropCenterPIL", ",", "self", ")", ".", "__init__", "(", "\n", "dst_size", ",", "\n", "random_scale_min", "=", "1.0", ",", "\n", "random_scale_max", "=", "1.0", ",", "\n", "random_tilt_max_deg", "=", "0.0", ",", "\n", "random_wiggle_max_ratio", "=", "0.0", ",", "\n", "random_reflect", "=", "False", ",", "\n", "semseg_ignore_class", "=", "semseg_ignore_class", ",", "\n", "center_offset_instead_of_random", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms.ConvertToTensor.__call__": [[225, 242], ["sample.keys", "torch.tensor", "torch.from_numpy().float().permute", "torch.from_numpy().long().unsqueeze", "torch.from_numpy().float", "torch.from_numpy().long", "print", "torch.from_numpy", "numpy.array", "torch.from_numpy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "for", "modality", "in", "sample", ".", "keys", "(", ")", ":", "\n", "            ", "data", "=", "sample", "[", "modality", "]", "\n", "if", "modality", "==", "MOD_ID", ":", "\n", "                ", "data", "=", "torch", ".", "tensor", "(", "data", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "elif", "modality", "==", "MOD_RGB", ":", "\n", "                ", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "data", ")", ")", ".", "float", "(", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "", "elif", "modality", "==", "MOD_SS_DENSE", ":", "\n", "                ", "data", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "data", ")", ")", ".", "long", "(", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "elif", "modality", "==", "MOD_DEPTH", ":", "\n", "                ", "pass", "# torch.Tensor beginning from Dataset", "\n", "", "elif", "modality", "==", "META_DIMS", ":", "\n", "                ", "pass", "# handled in CleanUp", "\n", "", "else", ":", "\n", "                ", "print", "(", "f'Unaccounted data, collate WILL complain: {modality} {data}'", ")", "\n", "", "sample", "[", "modality", "]", "=", "data", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms.ZeroMeanUnitVarianceRgbTensor.__init__": [[245, 248], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "stddev", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "stddev", "=", "stddev", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms.ZeroMeanUnitVarianceRgbTensor.__call__": [[249, 257], ["torch.is_tensor", "torch.tensor().view", "torch.tensor().view", "type", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "MOD_RGB", "not", "in", "sample", ":", "\n", "            ", "return", "sample", "\n", "", "assert", "torch", ".", "is_tensor", "(", "sample", "[", "MOD_RGB", "]", ")", ",", "f'Invalid RGB modality type {type(sample[MOD_RGB])}'", "\n", "mean", "=", "torch", ".", "tensor", "(", "self", ".", "mean", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "stddev", "=", "torch", ".", "tensor", "(", "self", ".", "stddev", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "sample", "[", "MOD_RGB", "]", "=", "(", "sample", "[", "MOD_RGB", "]", "-", "mean", ")", "/", "stddev", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms.ZeroMeanUnitVarianceDepthTensor.__init__": [[260, 263], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mean", ",", "stddev", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "stddev", "=", "stddev", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms.ZeroMeanUnitVarianceDepthTensor.__call__": [[264, 271], ["type"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "MOD_DEPTH", "not", "in", "sample", ":", "\n", "            ", "return", "sample", "\n", "", "m", "=", "sample", "[", "MOD_DEPTH", "]", "\n", "assert", "type", "(", "m", ")", "is", "dict", "and", "'type'", "in", "m", "and", "'yx'", "in", "m", "and", "'val'", "in", "m", ",", "f'Invalid DEPTH: {m}'", "\n", "sample", "[", "MOD_DEPTH", "]", "[", "'val'", "]", "=", "(", "sample", "[", "MOD_DEPTH", "]", "[", "'val'", "]", "-", "self", ".", "mean", ")", "/", "self", ".", "stddev", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms.CleanUp.__call__": [[274, 277], ["None"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "del", "sample", "[", "META_DIMS", "]", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.transforms.get_transforms": [[279, 316], ["torchvision.transforms.Compose", "transforms.AssertModalitiesEqualDimensionsPIL", "transforms.ConvertToTensor", "transforms.CleanUp", "transforms.CropForPassableSidesPIL", "transforms.Identity", "transforms.RandomScaledTiltedWarpedCropPIL", "transforms.Identity", "transforms.CropCenterPIL", "transforms.Identity", "transforms.ZeroMeanUnitVarianceRgbTensor", "transforms.Identity", "transforms.ZeroMeanUnitVarianceDepthTensor", "transforms.Identity"], "function", ["None"], ["", "", "def", "get_transforms", "(", "\n", "semseg_ignore_class", "=", "None", ",", "\n", "geom_scale_min", "=", "0.5", ",", "\n", "geom_scale_max", "=", "2.0", ",", "\n", "geom_tilt_max_deg", "=", "0", ",", "\n", "geom_wiggle_max_ratio", "=", "0", ",", "\n", "geom_reflect", "=", "True", ",", "\n", "crop_for_passable", "=", "0", ",", "\n", "crop_random", "=", "0", ",", "\n", "crop_center", "=", "0", ",", "\n", "rgb_zero_mean_status", "=", "False", ",", "\n", "rgb_mean", "=", "None", ",", "\n", "rgb_stddev", "=", "None", ",", "\n", "depth_zero_mean_status", "=", "False", ",", "\n", "depth_mean", "=", "None", ",", "\n", "depth_stddev", "=", "None", ",", "\n", ")", ":", "\n", "    ", "return", "Compose", "(", "[", "\n", "AssertModalitiesEqualDimensionsPIL", "(", ")", ",", "\n", "CropForPassableSidesPIL", "(", "crop_for_passable", ")", "if", "crop_for_passable", ">", "0", "else", "Identity", "(", ")", ",", "\n", "RandomScaledTiltedWarpedCropPIL", "(", "\n", "crop_random", ",", "\n", "random_scale_min", "=", "geom_scale_min", ",", "\n", "random_scale_max", "=", "geom_scale_max", ",", "\n", "random_tilt_max_deg", "=", "geom_tilt_max_deg", ",", "\n", "random_wiggle_max_ratio", "=", "geom_wiggle_max_ratio", ",", "\n", "random_reflect", "=", "geom_reflect", ",", "\n", "semseg_ignore_class", "=", "semseg_ignore_class", ",", "\n", ")", "if", "crop_random", ">", "0", "else", "Identity", "(", ")", ",", "\n", "CropCenterPIL", "(", "\n", "crop_center", ",", "\n", "semseg_ignore_class", "=", "semseg_ignore_class", ",", "\n", ")", "if", "crop_center", ">", "0", "else", "Identity", "(", ")", ",", "\n", "ConvertToTensor", "(", ")", ",", "\n", "ZeroMeanUnitVarianceRgbTensor", "(", "rgb_mean", ",", "rgb_stddev", ")", "if", "rgb_zero_mean_status", "else", "Identity", "(", ")", ",", "\n", "ZeroMeanUnitVarianceDepthTensor", "(", "depth_mean", ",", "depth_stddev", ")", "if", "depth_zero_mean_status", "else", "Identity", "(", ")", ",", "\n", "CleanUp", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.__init__": [[29, 67], ["os.path.join", "os.path.join", "torchvision.datasets.VOCSegmentation", "list", "torchvision.datasets.VOCSegmentation", "torchvision.datasets.SBDataset", "torchvision.datasets.SBDataset", "voc_sbd.DatasetVocSbd.name_to_ds_id.update", "voc_sbd.DatasetVocSbd.name_to_ds_id.update", "sorted", "voc_sbd.DatasetVocSbd._sample_name", "voc_sbd.DatasetVocSbd._sample_name", "voc_sbd.DatasetVocSbd.name_to_ds_id.pop", "voc_sbd.DatasetVocSbd._sample_name", "voc_sbd.DatasetVocSbd.name_to_ds_id.keys", "enumerate", "voc_sbd.DatasetVocSbd.sample_id_to_name.items", "enumerate", "voc_sbd.DatasetVocSbd._sample_name", "voc_sbd.DatasetVocSbd._sample_name", "enumerate", "sorted", "enumerate", "enumerate", "voc_sbd.DatasetVocSbd.name_to_ds_id.keys", "os.path.isdir", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd._sample_name", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd._sample_name", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd._sample_name", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd._sample_name", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd._sample_name"], ["def", "__init__", "(", "self", ",", "dataset_root", ",", "split", ",", "download", "=", "True", ")", ":", "\n", "        ", "assert", "split", "in", "(", "SPLIT_TRAIN", ",", "SPLIT_VALID", ")", ",", "f'Invalid split {split}'", "\n", "\n", "root_voc", "=", "os", ".", "path", ".", "join", "(", "dataset_root", ",", "'VOC'", ")", "\n", "root_sbd", "=", "os", ".", "path", ".", "join", "(", "dataset_root", ",", "'SBD'", ")", "\n", "\n", "self", ".", "ds_voc_valid", "=", "VOCSegmentation", "(", "root_voc", ",", "image_set", "=", "SPLIT_VALID", ",", "download", "=", "download", ")", "\n", "\n", "if", "split", "==", "SPLIT_TRAIN", ":", "\n", "            ", "self", ".", "ds_voc_train", "=", "VOCSegmentation", "(", "root_voc", ",", "image_set", "=", "SPLIT_TRAIN", ",", "download", "=", "False", ")", "\n", "self", ".", "ds_sbd_train", "=", "SBDataset", "(", "\n", "root_sbd", ",", "\n", "image_set", "=", "SPLIT_TRAIN", ",", "\n", "download", "=", "download", "and", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "root_sbd", ",", "'img'", ")", ")", "\n", ")", "\n", "self", ".", "ds_sbd_valid", "=", "SBDataset", "(", "root_sbd", ",", "image_set", "=", "SPLIT_VALID", ",", "download", "=", "False", ")", "\n", "\n", "self", ".", "name_to_ds_id", "=", "{", "\n", "self", ".", "_sample_name", "(", "path", ")", ":", "(", "self", ".", "ds_sbd_train", ",", "i", ")", "for", "i", ",", "path", "in", "enumerate", "(", "self", ".", "ds_sbd_train", ".", "images", ")", "\n", "}", "\n", "self", ".", "name_to_ds_id", ".", "update", "(", "{", "\n", "self", ".", "_sample_name", "(", "path", ")", ":", "(", "self", ".", "ds_sbd_valid", ",", "i", ")", "for", "i", ",", "path", "in", "enumerate", "(", "self", ".", "ds_sbd_valid", ".", "images", ")", "\n", "}", ")", "\n", "self", ".", "name_to_ds_id", ".", "update", "(", "{", "\n", "self", ".", "_sample_name", "(", "path", ")", ":", "(", "self", ".", "ds_voc_train", ",", "i", ")", "for", "i", ",", "path", "in", "enumerate", "(", "self", ".", "ds_voc_train", ".", "images", ")", "\n", "}", ")", "\n", "for", "path", "in", "self", ".", "ds_voc_valid", ".", "images", ":", "\n", "                ", "name", "=", "self", ".", "_sample_name", "(", "path", ")", "\n", "self", ".", "name_to_ds_id", ".", "pop", "(", "name", ",", "None", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "name_to_ds_id", "=", "{", "\n", "self", ".", "_sample_name", "(", "path", ")", ":", "(", "self", ".", "ds_voc_valid", ",", "i", ")", "for", "i", ",", "path", "in", "enumerate", "(", "self", ".", "ds_voc_valid", ".", "images", ")", "\n", "}", "\n", "\n", "", "self", ".", "sample_names", "=", "list", "(", "sorted", "(", "self", ".", "name_to_ds_id", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "sample_id_to_name", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "enumerate", "(", "sorted", "(", "self", ".", "name_to_ds_id", ".", "keys", "(", ")", ")", ")", "}", "\n", "self", ".", "sample_name_to_id", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "sample_id_to_name", ".", "items", "(", ")", "}", "\n", "self", ".", "transforms", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.set_transforms": [[68, 70], ["None"], "methods", ["None"], ["", "def", "set_transforms", "(", "self", ",", "transforms", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.get": [[71, 98], ["voc_sbd.DatasetVocSbd._sample_name", "PIL.Image.open().convert", "ss_dense_path.endswith", "ds._get_segmentation_target", "PIL.Image.open", "override_transforms", "voc_sbd.DatasetVocSbd.name_from_index", "PIL.Image.open", "voc_sbd.DatasetVocSbd.transforms"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd._sample_name", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.name_from_index"], ["", "def", "get", "(", "self", ",", "index", ",", "override_transforms", "=", "None", ")", ":", "\n", "        ", "ds", ",", "idx", "=", "self", ".", "name_to_ds_id", "[", "self", ".", "name_from_index", "(", "index", ")", "]", "\n", "\n", "path_rgb", "=", "ds", ".", "images", "[", "idx", "]", "\n", "name", "=", "self", ".", "_sample_name", "(", "path_rgb", ")", "\n", "\n", "rgb", "=", "Image", ".", "open", "(", "path_rgb", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "ss_dense_path", "=", "ds", ".", "masks", "[", "idx", "]", "\n", "if", "ss_dense_path", ".", "endswith", "(", "'mat'", ")", ":", "\n", "            ", "ss_dense", "=", "ds", ".", "_get_segmentation_target", "(", "ss_dense_path", ")", "\n", "", "else", ":", "\n", "            ", "ss_dense", "=", "Image", ".", "open", "(", "ss_dense_path", ")", "\n", "", "assert", "ss_dense", ".", "size", "==", "rgb", ".", "size", ",", "f'RGB and SEMSEG shapes do not match in sample {name}'", "\n", "\n", "out", "=", "{", "\n", "MOD_ID", ":", "index", ",", "\n", "MOD_RGB", ":", "rgb", ",", "\n", "MOD_SS_DENSE", ":", "ss_dense", ",", "\n", "}", "\n", "\n", "if", "override_transforms", "is", "not", "None", ":", "\n", "            ", "out", "=", "override_transforms", "(", "out", ")", "\n", "", "elif", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "out", "=", "self", ".", "transforms", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.name_from_index": [[99, 101], ["None"], "methods", ["None"], ["", "def", "name_from_index", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "sample_names", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.__getitem__": [[102, 104], ["voc_sbd.DatasetVocSbd.get"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.get"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "get", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.__len__": [[105, 107], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sample_names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd._sample_name": [[108, 111], ["[].split", "path.split"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_sample_name", "(", "path", ")", ":", "\n", "        ", "return", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.index2name": [[112, 114], ["None"], "methods", ["None"], ["", "def", "index2name", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "sample_id_to_name", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.name2index": [[115, 117], ["None"], "methods", ["None"], ["", "def", "name2index", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "sample_name_to_id", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.num_classes": [[118, 121], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "21", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.ignore_label": [[122, 125], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ignore_label", "(", "self", ")", ":", "\n", "        ", "return", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.rgb_mean": [[126, 129], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rgb_mean", "(", "self", ")", ":", "\n", "        ", "return", "[", "255", "*", "0.485", ",", "255", "*", "0.456", ",", "255", "*", "0.406", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.rgb_stddev": [[130, 133], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "rgb_stddev", "(", "self", ")", ":", "\n", "        ", "return", "[", "255", "*", "0.229", ",", "255", "*", "0.224", ",", "255", "*", "0.225", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.semseg_class_colors": [[134, 158], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "semseg_class_colors", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "0", ",", "0", ",", "0", ")", ",", "# 'background'", "\n", "(", "128", ",", "0", ",", "0", ")", ",", "# 'plane'", "\n", "(", "0", ",", "128", ",", "0", ")", ",", "# 'bike'", "\n", "(", "128", ",", "128", ",", "0", ")", ",", "# 'bird'", "\n", "(", "0", ",", "0", ",", "128", ")", ",", "# 'boat'", "\n", "(", "128", ",", "0", ",", "128", ")", ",", "# 'bottle'", "\n", "(", "0", ",", "128", ",", "128", ")", ",", "# 'bus'", "\n", "(", "128", ",", "128", ",", "128", ")", ",", "# 'car'", "\n", "(", "64", ",", "0", ",", "0", ")", ",", "# 'cat'", "\n", "(", "192", ",", "0", ",", "0", ")", ",", "# 'chair'", "\n", "(", "64", ",", "128", ",", "0", ")", ",", "# 'cow'", "\n", "(", "192", ",", "128", ",", "0", ")", ",", "# 'table'", "\n", "(", "64", ",", "0", ",", "128", ")", ",", "# 'dog'", "\n", "(", "192", ",", "0", ",", "128", ")", ",", "# 'horse'", "\n", "(", "64", ",", "128", ",", "128", ")", ",", "# 'motorbike'", "\n", "(", "192", ",", "128", ",", "128", ")", ",", "# 'person'", "\n", "(", "0", ",", "64", ",", "0", ")", ",", "# 'plant'", "\n", "(", "128", ",", "64", ",", "0", ")", ",", "# 'sheep'", "\n", "(", "0", ",", "192", ",", "0", ")", ",", "# 'sofa'", "\n", "(", "128", ",", "192", ",", "0", ")", ",", "# 'train'", "\n", "(", "0", ",", "64", ",", "128", ")", ",", "# 'monitor'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.semseg_class_names": [[160, 184], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "semseg_class_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "'background'", ",", "\n", "'plane'", ",", "\n", "'bike'", ",", "\n", "'bird'", ",", "\n", "'boat'", ",", "\n", "'bottle'", ",", "\n", "'bus'", ",", "\n", "'car'", ",", "\n", "'cat'", ",", "\n", "'chair'", ",", "\n", "'cow'", ",", "\n", "'table'", ",", "\n", "'dog'", ",", "\n", "'horse'", ",", "\n", "'motorbike'", ",", "\n", "'person'", ",", "\n", "'plant'", ",", "\n", "'sheep'", ",", "\n", "'sofa'", ",", "\n", "'train'", ",", "\n", "'monitor'", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.__init__": [[14, 18], ["matplotlib.font_manager.findfont", "matplotlib.font_manager.findfont", "PIL.ImageFont.truetype", "matplotlib.font_manager.FontProperties", "matplotlib.font_manager.FontProperties"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", "=", "60", ")", ":", "\n", "        ", "font_path", "=", "findfont", "(", "FontProperties", "(", "family", "=", "'monospace'", ")", ")", "\n", "self", ".", "font", "=", "ImageFont", ".", "truetype", "(", "font_path", ",", "size", "=", "size", ",", "index", "=", "0", ")", "\n", "self", ".", "size", "=", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print_gray": [[19, 28], ["PIL.Image.fromarray", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw.text", "numpy.array", "len", "PIL.ImageDraw.Draw.text"], "methods", ["None"], ["", "def", "print_gray", "(", "self", ",", "img_np_f", ",", "text", ",", "offs_xy", ",", "white", "=", "1.0", ")", ":", "\n", "        ", "assert", "len", "(", "img_np_f", ".", "shape", ")", "==", "2", ",", "\"Image must be single channel\"", "\n", "img_pil", "=", "Image", ".", "fromarray", "(", "img_np_f", ",", "mode", "=", "'F'", ")", "\n", "ctx", "=", "ImageDraw", ".", "Draw", "(", "img_pil", ")", "\n", "step", "=", "self", ".", "size", "//", "15", "\n", "for", "dx", ",", "dy", "in", "(", "(", "-", "1", ",", "-", "1", ")", ",", "(", "-", "1", ",", "0", ")", ",", "(", "-", "1", ",", "1", ")", ",", "(", "0", ",", "-", "1", ")", ",", "(", "0", ",", "1", ")", ",", "(", "1", ",", "-", "1", ")", ",", "(", "1", ",", "0", ")", ",", "(", "1", ",", "1", ")", ")", ":", "\n", "            ", "ctx", ".", "text", "(", "(", "offs_xy", "[", "0", "]", "+", "step", "*", "dx", ",", "offs_xy", "[", "1", "]", "+", "step", "*", "dy", ")", ",", "text", ",", "font", "=", "self", ".", "font", ",", "fill", "=", "0.0", ")", "\n", "", "ctx", ".", "text", "(", "offs_xy", ",", "text", ",", "font", "=", "self", ".", "font", ",", "fill", "=", "white", ")", "\n", "return", "np", ".", "array", "(", "img_pil", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print": [[29, 36], ["len", "range", "visualizations.ImageTextRenderer.print_gray", "visualizations.ImageTextRenderer.print_gray"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print_gray", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print_gray"], ["", "def", "print", "(", "self", ",", "img_np_f", ",", "text", ",", "offs_xy", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "len", "(", "img_np_f", ".", "shape", ")", "==", "3", ":", "\n", "            ", "for", "ch", "in", "range", "(", "3", ")", ":", "\n", "                ", "img_np_f", "[", "ch", "]", "=", "self", ".", "print_gray", "(", "img_np_f", "[", "ch", "]", ",", "text", ",", "offs_xy", ",", "**", "kwargs", ")", "\n", "", "", "else", ":", "\n", "            ", "img_np_f", "=", "self", ".", "print_gray", "(", "img_np_f", ",", "text", ",", "offs_xy", ",", "**", "kwargs", ")", "\n", "", "return", "img_np_f", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.get_text_renderer": [[41, 45], ["visualizations.ImageTextRenderer"], "function", ["None"], ["def", "get_text_renderer", "(", "size", ")", ":", "\n", "    ", "if", "size", "not", "in", "_text_renderers", ":", "\n", "        ", "_text_renderers", "[", "size", "]", "=", "ImageTextRenderer", "(", "size", ")", "\n", "", "return", "_text_renderers", "[", "size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.img_print": [[47, 52], ["visualizations.get_text_renderer", "get_text_renderer.print"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.get_text_renderer", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.ImageTextRenderer.print"], ["", "def", "img_print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "size", "=", "kwargs", "[", "'size'", "]", "\n", "del", "kwargs", "[", "'size'", "]", "\n", "renderer", "=", "get_text_renderer", "(", "size", ")", "\n", "return", "renderer", ".", "print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.tensor_print": [[54, 72], ["img.cpu().detach.cpu().detach", "range", "isinstance", "min", "kwargs.keys", "min", "visualizations.img_print", "torch.from_numpy", "torch.from_numpy", "len", "img.cpu().detach.dim", "img.cpu().detach.cpu", "len", "img[].numpy", "caption.strip", "isinstance"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.img_print"], ["", "def", "tensor_print", "(", "img", ",", "caption", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "isinstance", "(", "caption", ",", "str", ")", "and", "len", "(", "caption", ".", "strip", "(", ")", ")", "==", "0", ":", "\n", "        ", "return", "img", "\n", "", "assert", "img", ".", "dim", "(", ")", "==", "4", "and", "img", ".", "shape", "[", "1", "]", "in", "(", "1", ",", "3", ")", ",", "'Expecting 4D tensor with RGB or grayscale'", "\n", "offset", "=", "min", "(", "img", ".", "shape", "[", "2", "]", ",", "img", ".", "shape", "[", "3", "]", ")", "//", "100", "\n", "img", "=", "img", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "offset", "=", "(", "offset", ",", "offset", ")", "\n", "if", "'offsetx'", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "        ", "offset", "=", "(", "kwargs", "[", "'offsetx'", "]", ",", "kwargs", "[", "'offsety'", "]", ")", "\n", "del", "kwargs", "[", "'offsetx'", "]", ",", "kwargs", "[", "'offsety'", "]", "\n", "", "size", "=", "min", "(", "img", ".", "shape", "[", "2", "]", ",", "img", ".", "shape", "[", "3", "]", ")", "//", "15", "\n", "for", "i", "in", "range", "(", "img", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "tag", "=", "(", "caption", "if", "isinstance", "(", "caption", ",", "str", ")", "else", "caption", "[", "i", "]", ")", ".", "strip", "(", ")", "\n", "if", "len", "(", "tag", ")", "==", "0", ":", "\n", "            ", "continue", "\n", "", "img_np", "=", "img_print", "(", "img", "[", "i", "]", ".", "numpy", "(", ")", ",", "tag", ",", "offset", ",", "size", "=", "size", ",", "**", "kwargs", ")", "\n", "img", "[", "i", "]", "=", "torch", ".", "from_numpy", "(", "img_np", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.prepare_rgb": [[74, 79], ["img.float().cpu().detach.float().cpu().detach", "torch.clamp", "torch.clamp", "torch.tensor().float().view", "torch.tensor().float().view", "torch.tensor().float().view", "torch.tensor().float().view", "img.float().cpu().detach.dim", "img.float().cpu().detach.float().cpu", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "img.float().cpu().detach.float", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "prepare_rgb", "(", "img", ",", "rgb_mean", ",", "rgb_stddev", ")", ":", "\n", "    ", "assert", "img", ".", "dim", "(", ")", "==", "4", "and", "img", ".", "shape", "[", "1", "]", "==", "3", ",", "'Expecting 4D tensor with RGB'", "\n", "img", "=", "img", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "img_mean", ",", "img_stddev", "=", "torch", ".", "tensor", "(", "rgb_mean", ")", ".", "float", "(", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", ",", "torch", ".", "tensor", "(", "rgb_stddev", ")", ".", "float", "(", ")", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "return", "torch", ".", "clamp", "(", "(", "img", "*", "img_stddev", "+", "img_mean", ")", "/", "255", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.superimpose_rgb": [[81, 85], ["visualizations.rgb2gray"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.rgb2gray"], ["", "def", "superimpose_rgb", "(", "img", ",", "rgb", ",", "opacity", "=", "0.5", ")", ":", "\n", "    ", "gray", "=", "rgb2gray", "(", "rgb", ")", "\n", "img", "=", "(", "1", "-", "opacity", ")", "*", "gray", "+", "opacity", "*", "img", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.rgb2gray": [[87, 89], ["rgb[].unsqueeze().repeat", "rgb[].unsqueeze"], "function", ["None"], ["", "def", "rgb2gray", "(", "rgb", ")", ":", "\n", "    ", "return", "rgb", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "# RGB -> GGG", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.create_checkerboard": [[91, 102], ["max", "torch.full", "torch.full", "checkerboard[].repeat.float().view", "torch.interpolate", "checkerboard[].repeat", "min", "checkerboard[].repeat.float"], "function", ["None"], ["", "def", "create_checkerboard", "(", "N", ",", "C", ",", "H", ",", "W", ")", ":", "\n", "    ", "cell_sz", "=", "max", "(", "min", "(", "H", ",", "W", ")", "//", "32", ",", "1", ")", "\n", "mH", "=", "(", "H", "+", "cell_sz", "-", "1", ")", "//", "cell_sz", "\n", "mW", "=", "(", "W", "+", "cell_sz", "-", "1", ")", "//", "cell_sz", "\n", "checkerboard", "=", "torch", ".", "full", "(", "(", "mH", ",", "mW", ")", ",", "0.25", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "checkerboard", "[", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "=", "0.75", "\n", "checkerboard", "[", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", "=", "0.75", "\n", "checkerboard", "=", "checkerboard", ".", "float", "(", ")", ".", "view", "(", "1", ",", "1", ",", "mH", ",", "mW", ")", "\n", "checkerboard", "=", "F", ".", "interpolate", "(", "checkerboard", ",", "scale_factor", "=", "cell_sz", ",", "mode", "=", "'nearest'", ")", "\n", "checkerboard", "=", "checkerboard", "[", ":", ",", ":", ",", ":", "H", ",", ":", "W", "]", ".", "repeat", "(", "N", ",", "C", ",", "1", ",", "1", ")", "\n", "return", "checkerboard", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.prepare_semseg": [[104, 127], ["torch.tensor", "torch.tensor", "img.permute.cpu().detach().squeeze().clone", "torch.unique", "torch.unique", "all", "img.permute.permute", "torch.max", "torch.max", "mask_ignore.unsqueeze().repeat.unsqueeze().repeat", "img.permute.dim", "torch.tensor.dim", "img.permute.cpu().detach().squeeze", "visualizations.create_checkerboard", "mask_ignore.unsqueeze().repeat.unsqueeze", "visualizations.rgb2gray", "img.permute.cpu().detach", "len", "img.permute.cpu"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.create_checkerboard", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.rgb2gray"], ["", "def", "prepare_semseg", "(", "img", ",", "semseg_color_map", ",", "semseg_ignore_class", ",", "rgb", "=", "None", ")", ":", "\n", "    ", "assert", "img", ".", "dim", "(", ")", "==", "4", "and", "img", ".", "shape", "[", "1", "]", "==", "1", "and", "img", ".", "dtype", "in", "(", "torch", ".", "int", ",", "torch", ".", "long", ")", ",", "f'Expecting 4D tensor with semseg classes, got {img.shape}'", "\n", "colors", "=", "torch", ".", "tensor", "(", "semseg_color_map", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "assert", "colors", ".", "dim", "(", ")", "==", "2", "and", "colors", ".", "shape", "[", "1", "]", "==", "3", "\n", "if", "torch", ".", "max", "(", "colors", ")", ">", "128", ":", "\n", "        ", "colors", "/=", "255", "\n", "", "img", "=", "img", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "squeeze", "(", "1", ")", ".", "clone", "(", ")", "# N x H x W", "\n", "N", ",", "H", ",", "W", "=", "img", ".", "shape", "\n", "img_color_ids", "=", "torch", ".", "unique", "(", "img", ")", "\n", "assert", "all", "(", "c_id", "==", "semseg_ignore_class", "or", "0", "<=", "c_id", "<", "len", "(", "semseg_color_map", ")", "for", "c_id", "in", "img_color_ids", ")", "\n", "checkerboard", ",", "mask_ignore", "=", "None", ",", "None", "\n", "if", "semseg_ignore_class", "in", "img_color_ids", ":", "\n", "        ", "if", "rgb", "is", "None", ":", "\n", "            ", "checkerboard", "=", "create_checkerboard", "(", "N", ",", "3", ",", "H", ",", "W", ")", "\n", "", "mask_ignore", "=", "img", "==", "semseg_ignore_class", "\n", "img", "[", "mask_ignore", "]", "=", "0", "\n", "", "img", "=", "colors", "[", "img", "]", "# N x H x W x 3", "\n", "img", "=", "img", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "if", "semseg_ignore_class", "in", "img_color_ids", ":", "\n", "        ", "mask_ignore", "=", "mask_ignore", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "img", "[", "mask_ignore", "]", "=", "(", "checkerboard", "if", "rgb", "is", "None", "else", "rgb2gray", "(", "rgb", "*", "0.5", ")", ")", "[", "mask_ignore", "]", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.prepare_mask": [[129, 134], ["mask.float().cpu().detach.float().cpu().detach", "torch.cat", "torch.cat", "mask.float().cpu().detach.dim", "mask.float().cpu().detach.float().cpu", "mask.float().cpu().detach.float"], "function", ["None"], ["", "def", "prepare_mask", "(", "mask", ")", ":", "\n", "    ", "assert", "mask", ".", "dim", "(", ")", "==", "4", "and", "mask", ".", "shape", "[", "1", "]", "==", "1", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "mask", ",", "mask", ",", "mask", ")", ",", "dim", "=", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.prepare_depth": [[136, 152], ["torch.squeeze().float().cpu().detach().clone", "torch.squeeze().float().cpu().detach().clone", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "numpy.rollaxis", "torch.tensor().float", "torch.tensor().float", "torch.unsqueeze", "torch.unsqueeze", "torch.cat", "torch.cat", "torch.max().item", "torch.max().item", "matplotlib.cm.get_cmap.", "torch.squeeze().float().cpu().detach().clone.dim", "torch.squeeze().float().cpu().detach", "torch.squeeze().float().cpu().detach", "torch.tensor", "torch.tensor", "torch.max", "torch.max", "torch.squeeze().float().cpu", "torch.squeeze().float().cpu", "torch.squeeze().float", "torch.squeeze().float", "torch.squeeze", "torch.squeeze"], "function", ["None"], ["", "def", "prepare_depth", "(", "img", ",", "maxval", "=", "None", ")", ":", "\n", "    ", "assert", "img", ".", "dim", "(", ")", "==", "4", "and", "img", ".", "shape", "[", "1", "]", "==", "1", "\n", "img", "=", "torch", ".", "squeeze", "(", "img", ",", "dim", "=", "1", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "clone", "(", ")", "\n", "mask_img_invalid", "=", "img", "!=", "img", "\n", "img", "[", "mask_img_invalid", "]", "=", "0", "\n", "cm", "=", "matplotlib", ".", "cm", ".", "get_cmap", "(", "'plasma_r'", ")", "\n", "if", "maxval", "is", "None", ":", "\n", "        ", "maxval", "=", "torch", ".", "max", "(", "img", ")", ".", "item", "(", ")", "\n", "", "img_01", "=", "img", "/", "maxval", "\n", "img_colored_np", "=", "cm", "(", "img_01", ",", "bytes", "=", "False", ")", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", "\n", "img_colored_np", "=", "np", ".", "rollaxis", "(", "img_colored_np", ",", "3", ",", "1", ")", "\n", "img_colored", "=", "torch", ".", "tensor", "(", "img_colored_np", ")", ".", "float", "(", ")", "\n", "mask_img_invalid", "=", "torch", ".", "unsqueeze", "(", "mask_img_invalid", ",", "dim", "=", "1", ")", "\n", "mask_img_invalid", "=", "torch", ".", "cat", "(", "(", "mask_img_invalid", ",", "mask_img_invalid", ",", "mask_img_invalid", ")", ",", "dim", "=", "1", ")", "\n", "img_colored", "[", "mask_img_invalid", "]", "=", "0", "\n", "return", "img_colored", ",", "maxval", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.save_indexed_segmap": [[154, 169], ["torch.is_tensor", "torch.is_tensor", "img.cpu().detach().byte().numpy.squeeze", "img.cpu().detach().byte().numpy.cpu().detach().byte().numpy", "PIL.Image.fromarray", "enumerate", "Image.fromarray.putpalette", "Image.fromarray.save", "range", "range", "img.cpu().detach().byte().numpy.dim", "img.cpu().detach().byte().numpy.cpu().detach().byte", "range", "img.cpu().detach().byte().numpy.cpu().detach", "img.cpu().detach().byte().numpy.cpu"], "function", ["None"], ["", "def", "save_indexed_segmap", "(", "filepath", ",", "img", ",", "semseg_color_map", ",", "semseg_ignore_class", "=", "None", ",", "semseg_ignore_color", "=", "(", "0", ",", "0", ",", "0", ")", ")", ":", "\n", "    ", "assert", "torch", ".", "is_tensor", "(", "img", ")", "\n", "img", "=", "img", ".", "squeeze", "(", ")", "\n", "assert", "img", ".", "dim", "(", ")", "==", "2", "and", "img", ".", "dtype", "in", "(", "torch", ".", "int", ",", "torch", ".", "long", ")", ",", "'Expecting 2D tensor with semseg classes'", "\n", "img", "=", "img", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "byte", "(", ")", ".", "numpy", "(", ")", "\n", "img_pil", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "'P'", ")", "\n", "palette", "=", "[", "0", "for", "_", "in", "range", "(", "256", "*", "3", ")", "]", "\n", "for", "i", ",", "rgb", "in", "enumerate", "(", "semseg_color_map", ")", ":", "\n", "        ", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "            ", "palette", "[", "3", "*", "i", "+", "c", "]", "=", "rgb", "[", "c", "]", "\n", "", "", "if", "semseg_ignore_class", "is", "not", "None", ":", "\n", "        ", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "            ", "palette", "[", "3", "*", "semseg_ignore_class", "+", "c", "]", "=", "semseg_ignore_color", "[", "c", "]", "\n", "", "", "img_pil", ".", "putpalette", "(", "palette", ")", "\n", "img_pil", ".", "save", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.compose": [[171, 196], ["enumerate", "torch.cat", "torch.cat", "torchvision.utils.make_grid", "visualizations.prepare_rgb", "torchvision.utils.make_grid.append", "min", "visualizations.tensor_print", "torchvision.utils.make_grid.append", "prepare_rgb.clone", "visualizations.tensor_print", "visualizations.prepare_depth", "torchvision.utils.make_grid.append", "visualizations.prepare_semseg", "visualizations.tensor_print", "type", "str", "caption.tolist"], "function", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.prepare_rgb", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.tensor_print", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.tensor_print", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.prepare_depth", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.prepare_semseg", "home.repos.pwc.inspect_result.toshas_tbasis.datasets.visualizations.tensor_print"], ["", "def", "compose", "(", "list_triples", ",", "cfg", ",", "rgb_mean", "=", "None", ",", "rgb_stddev", "=", "None", ",", "semseg_color_map", "=", "None", ",", "semseg_ignore_class", "=", "None", ")", ":", "\n", "    ", "if", "cfg", ".", "visualize_num_samples_in_batch", "is", "not", "None", ":", "\n", "        ", "list_triples", "=", "[", "(", "m", ",", "img", "[", ":", "cfg", ".", "visualize_num_samples_in_batch", "]", ",", "c", ")", "for", "(", "m", ",", "img", ",", "c", ")", "in", "list_triples", "]", "\n", "", "N", ",", "H", ",", "W", ",", "rgb", "=", "None", ",", "None", ",", "None", ",", "None", "\n", "for", "(", "modality", ",", "img", ",", "caption", ")", "in", "list_triples", ":", "\n", "        ", "if", "modality", "==", "MOD_RGB", ":", "\n", "            ", "N", ",", "_", ",", "H", ",", "W", "=", "img", ".", "shape", "\n", "rgb", "=", "prepare_rgb", "(", "img", ",", "rgb_mean", ",", "rgb_stddev", ")", "\n", "break", "\n", "", "", "vis", "=", "[", "]", "\n", "depth_maxval", "=", "None", "\n", "for", "i", ",", "(", "modality", ",", "img", ",", "caption", ")", "in", "enumerate", "(", "list_triples", ")", ":", "\n", "        ", "if", "modality", "==", "MOD_RGB", ":", "\n", "            ", "vis", ".", "append", "(", "tensor_print", "(", "\n", "rgb", ".", "clone", "(", ")", ",", "caption", "if", "type", "(", "caption", ")", "is", "list", "else", "[", "str", "(", "idx", ")", "for", "idx", "in", "caption", ".", "tolist", "(", ")", "]", ")", "\n", ")", "\n", "", "elif", "modality", "==", "MOD_SS_DENSE", ":", "\n", "            ", "vis", ".", "append", "(", "tensor_print", "(", "prepare_semseg", "(", "img", ",", "semseg_color_map", ",", "semseg_ignore_class", ")", ",", "caption", ")", ")", "\n", "", "elif", "modality", "==", "MOD_DEPTH", ":", "\n", "            ", "img_vis", ",", "depth_maxval", "=", "prepare_depth", "(", "img", ",", "depth_maxval", ")", "\n", "vis", ".", "append", "(", "tensor_print", "(", "img_vis", ",", "caption", ")", ")", "\n", "", "", "vis", "=", "torch", ".", "cat", "(", "vis", ",", "dim", "=", "2", ")", "\n", "# N x 3 x H * N_MODS x W", "\n", "vis", "=", "make_grid", "(", "vis", ",", "nrow", "=", "min", "(", "N", ",", "cfg", ".", "tensorboard_img_grid_width", ")", ")", "\n", "return", "vis", "\n", "", ""]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_lenet5.ModelNetLenet5.__init__": [[9, 30], ["super().__init__", "torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.modules.flatten.Flatten", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "cfg", ".", "dataset", "==", "'mnist'", "\n", "self", ".", "model", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "# 1x28x28", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "1", ",", "out_channels", "=", "20", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ",", "bias", "=", "True", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "# 20x28x28", "\n", "torch", ".", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", ",", "\n", "# 20x14x14", "\n", "torch", ".", "nn", ".", "Conv2d", "(", "in_channels", "=", "20", ",", "out_channels", "=", "50", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "# 50x10x10", "\n", "torch", ".", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", ",", "\n", "# 50x5x5", "\n", "Flatten", "(", ")", ",", "\n", "# 1250", "\n", "torch", ".", "nn", ".", "Linear", "(", "50", "*", "5", "*", "5", ",", "320", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "# 320", "\n", "torch", ".", "nn", ".", "Linear", "(", "320", ",", "10", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_lenet5.ModelNetLenet5.forward": [[32, 35], ["model_net_lenet5.ModelNetLenet5.model", "input.dim"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "assert", "input", ".", "dim", "(", ")", "==", "4", "and", "input", ".", "shape", "[", "1", ":", "]", "==", "(", "1", ",", "28", ",", "28", ")", "\n", "return", "self", ".", "model", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.BasicBlockWithDilation.__init__": [[18, 32], ["torch.Module.__init__", "torchvision.conv3x3", "torchvision.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torchvision.conv3x3", "torchvision.conv3x3", "norm_layer", "ValueError"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlockWithDilation", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "self", ".", "conv1", "=", "resnet", ".", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", "=", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "resnet", ".", "conv3x3", "(", "planes", ",", "planes", ",", "dilation", "=", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.BasicBlockWithDilation.forward": [[33, 45], ["model_net_deeplabv3p.BasicBlockWithDilation.conv1", "model_net_deeplabv3p.BasicBlockWithDilation.bn1", "model_net_deeplabv3p.BasicBlockWithDilation.relu", "model_net_deeplabv3p.BasicBlockWithDilation.conv2", "model_net_deeplabv3p.BasicBlockWithDilation.bn2", "model_net_deeplabv3p.BasicBlockWithDilation.relu", "model_net_deeplabv3p.BasicBlockWithDilation.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.ASPPpart_1.__init__": [[54, 57], ["torch.Sequential.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.ASPPpart_2.__init__": [[61, 65], ["torch.Sequential.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.ASPPpart.__init__": [[69, 74], ["torch.Sequential.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "stride", ",", "padding", ",", "dilation", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.ASPP.__init__": [[78, 96], ["torch.Module.__init__", "model_net_deeplabv3p.ASPPpart", "model_net_deeplabv3p.ASPPpart", "model_net_deeplabv3p.ASPPpart", "model_net_deeplabv3p.ASPPpart", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model_net_deeplabv3p.ASPPpart_1", "model_net_deeplabv3p.ASPPpart_2", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "model_net_deeplabv3p.ASPPpart", "len", "len"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "output_stride", "=", "16", ",", "rates", "=", "(", "6", ",", "12", ",", "18", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "output_stride", "in", "(", "8", ",", "16", ")", ",", "'Invalid output stride'", "\n", "if", "output_stride", "==", "8", ":", "\n", "            ", "rates", "=", "(", "2", "*", "a", "for", "a", "in", "rates", ")", "\n", "", "self", ".", "conv0", "=", "ASPPpart", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ")", "\n", "self", ".", "conv1", "=", "ASPPpart", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "rates", "[", "0", "]", ",", "dilation", "=", "rates", "[", "0", "]", ")", "\n", "self", ".", "conv2", "=", "ASPPpart", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "rates", "[", "1", "]", ",", "dilation", "=", "rates", "[", "1", "]", ")", "\n", "self", ".", "conv3", "=", "ASPPpart", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "rates", "[", "2", "]", ",", "dilation", "=", "rates", "[", "2", "]", ")", "\n", "self", ".", "pool", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "ASPPpart", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ")", "\n", ")", "\n", "self", ".", "conv_out_1", "=", "ASPPpart_1", "(", "\n", "out_channels", "*", "(", "len", "(", "rates", ")", "+", "2", ")", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", "\n", ")", "\n", "self", ".", "conv_out_2", "=", "ASPPpart_2", "(", "\n", "out_channels", "*", "(", "len", "(", "rates", ")", "+", "2", ")", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.ASPP.forward": [[98, 110], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_net_deeplabv3p.ASPP.conv_out_1", "model_net_deeplabv3p.ASPP.conv_out_2", "model_net_deeplabv3p.ASPP.conv0", "model_net_deeplabv3p.ASPP.conv1", "model_net_deeplabv3p.ASPP.conv2", "model_net_deeplabv3p.ASPP.conv3", "torch.interpolate", "torch.interpolate", "torch.interpolate", "model_net_deeplabv3p.ASPP.pool"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "(", "\n", "self", ".", "conv0", "(", "x", ")", ",", "\n", "self", ".", "conv1", "(", "x", ")", ",", "\n", "self", ".", "conv2", "(", "x", ")", ",", "\n", "self", ".", "conv3", "(", "x", ")", ",", "\n", "F", ".", "interpolate", "(", "self", ".", "pool", "(", "x", ")", ",", "x", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", ")", "\n", "out", "=", "torch", ".", "cat", "(", "out", ",", "dim", "=", "1", ")", "\n", "out_1", "=", "self", ".", "conv_out_1", "(", "out", ")", "\n", "out_2", "=", "self", ".", "conv_out_2", "(", "out_1", ")", "\n", "return", "out_1", ",", "out_2", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.Encoder.__init__": [[113, 119], ["torch.Module.__init__", "model_net_deeplabv3p.Encoder._create"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__", "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.Encoder._create"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "**", "encoder_kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "encoder", "=", "self", ".", "_create", "(", "name", ",", "**", "encoder_kwargs", ")", "\n", "del", "encoder", ".", "avgpool", "\n", "del", "encoder", ".", "fc", "\n", "self", ".", "encoder", "=", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.Encoder._create": [[120, 143], ["encoder_kwargs.get", "_basic_block_layers.keys", "getattr", "getattr.", "encoder_kwargs.pop", "encoder_kwargs.pop", "torchvision._resnet", "torchvision._resnet", "len"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.datasets.voc_sbd.DatasetVocSbd.get"], ["", "def", "_create", "(", "self", ",", "name", ",", "**", "encoder_kwargs", ")", ":", "\n", "        ", "if", "name", "not", "in", "_basic_block_layers", ".", "keys", "(", ")", ":", "\n", "            ", "fn_name", "=", "getattr", "(", "resnet", ",", "name", ")", "\n", "model", "=", "fn_name", "(", "**", "encoder_kwargs", ")", "\n", "", "else", ":", "\n", "# special case due to prohibited dilation in the original BasicBlock", "\n", "            ", "pretrained", "=", "encoder_kwargs", ".", "pop", "(", "'pretrained'", ",", "False", ")", "\n", "progress", "=", "encoder_kwargs", ".", "pop", "(", "'progress'", ",", "True", ")", "\n", "model", "=", "resnet", ".", "_resnet", "(", "\n", "name", ",", "BasicBlockWithDilation", ",", "_basic_block_layers", "[", "name", "]", ",", "pretrained", ",", "progress", ",", "**", "encoder_kwargs", "\n", ")", "\n", "", "replace_stride_with_dilation", "=", "encoder_kwargs", ".", "get", "(", "'replace_stride_with_dilation'", ",", "(", "False", ",", "False", ",", "False", ")", ")", "\n", "assert", "len", "(", "replace_stride_with_dilation", ")", "==", "3", "\n", "if", "replace_stride_with_dilation", "[", "0", "]", ":", "\n", "            ", "model", ".", "layer2", "[", "0", "]", ".", "conv2", ".", "padding", "=", "(", "2", ",", "2", ")", "\n", "model", ".", "layer2", "[", "0", "]", ".", "conv2", ".", "dilation", "=", "(", "2", ",", "2", ")", "\n", "", "if", "replace_stride_with_dilation", "[", "1", "]", ":", "\n", "            ", "model", ".", "layer3", "[", "0", "]", ".", "conv2", ".", "padding", "=", "(", "2", ",", "2", ")", "\n", "model", ".", "layer3", "[", "0", "]", ".", "conv2", ".", "dilation", "=", "(", "2", ",", "2", ")", "\n", "", "if", "replace_stride_with_dilation", "[", "2", "]", ":", "\n", "            ", "model", ".", "layer4", "[", "0", "]", ".", "conv2", ".", "padding", "=", "(", "2", ",", "2", ")", "\n", "model", ".", "layer4", "[", "0", "]", ".", "conv2", ".", "dilation", "=", "(", "2", ",", "2", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.Encoder.forward": [[144, 167], ["collections.OrderedDict", "model_net_deeplabv3p.Encoder.encoder.conv1", "model_net_deeplabv3p.Encoder.encoder.bn1", "model_net_deeplabv3p.Encoder.encoder.relu", "model_net_deeplabv3p.Encoder.encoder.maxpool", "model_net_deeplabv3p.Encoder.encoder.layer1", "model_net_deeplabv3p.Encoder.encoder.layer2", "model_net_deeplabv3p.Encoder.encoder.layer3", "model_net_deeplabv3p.Encoder.encoder.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "OrderedDict", "(", ")", "\n", "features", "[", "'in'", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "encoder", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "encoder", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "encoder", ".", "relu", "(", "x", ")", "\n", "features", "[", "'enc_preamble'", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "encoder", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "encoder", ".", "layer1", "(", "x", ")", "\n", "features", "[", "'enc_l1'", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "encoder", ".", "layer2", "(", "x", ")", "\n", "features", "[", "'enc_l2'", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "encoder", ".", "layer3", "(", "x", ")", "\n", "features", "[", "'enc_l3'", "]", "=", "x", "\n", "\n", "x", "=", "self", ".", "encoder", ".", "layer4", "(", "x", ")", "\n", "features", "[", "'enc_l4'", "]", "=", "x", "\n", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.DecoderDeeplabV3p.__init__": [[170, 187], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "bottleneck_ch", ",", "skip_4x_ch", ")", ":", "\n", "        ", "super", "(", "DecoderDeeplabV3p", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "reduce_skip_4x", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "skip_4x_ch", ",", "48", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "48", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "\n", "self", ".", "last_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "bottleneck_ch", "+", "48", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.DecoderDeeplabV3p.forward": [[189, 198], ["model_net_deeplabv3p.DecoderDeeplabV3p.reduce_skip_4x", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model_net_deeplabv3p.DecoderDeeplabV3p.last_conv", "torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "reduced_skip_4x", "=", "self", ".", "reduce_skip_4x", "(", "features", "[", "'enc_l1'", "]", ")", "\n", "aspp_4x", "=", "F", ".", "interpolate", "(", "features", "[", "'aspp'", "]", ",", "size", "=", "reduced_skip_4x", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "x_low", "=", "torch", ".", "cat", "(", "(", "aspp_4x", ",", "reduced_skip_4x", ")", ",", "dim", "=", "1", ")", "\n", "y_hat_low", "=", "self", ".", "last_conv", "(", "x_low", ")", "\n", "y_hat_high", "=", "F", ".", "interpolate", "(", "y_hat_low", ",", "size", "=", "features", "[", "'in'", "]", ".", "shape", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "False", ")", "\n", "features", "[", "'y_hat_low'", "]", "=", "y_hat_low", "\n", "features", "[", "'y_hat_high'", "]", "=", "y_hat_high", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.ModelNetDeepLabV3Plus.__init__": [[201, 220], ["super().__init__", "model_net_deeplabv3p.Encoder", "model_net_deeplabv3p.ASPP", "model_net_deeplabv3p.DecoderDeeplabV3p"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "c_out", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "stride", "=", "16", "\n", "dilation", "=", "(", "False", ",", "False", ",", "True", ")", "\n", "\n", "self", ".", "encoder", "=", "Encoder", "(", "\n", "cfg", ".", "model_encoder_name", ",", "\n", "pretrained", "=", "cfg", ".", "model_encoder_pretrained", ",", "\n", "zero_init_residual", "=", "True", ",", "\n", "replace_stride_with_dilation", "=", "dilation", ",", "\n", ")", "\n", "\n", "is_basic_block", "=", "cfg", ".", "model_encoder_name", "in", "_basic_block_layers", "\n", "model_encoder_features_out", "=", "512", "if", "is_basic_block", "else", "2048", "\n", "model_encoder_features_4x", "=", "64", "if", "is_basic_block", "else", "256", "\n", "\n", "self", ".", "aspp", "=", "ASPP", "(", "model_encoder_features_out", ",", "256", ",", "output_stride", "=", "self", ".", "stride", ")", "\n", "self", ".", "decoder", "=", "DecoderDeeplabV3p", "(", "c_out", ",", "256", ",", "model_encoder_features_4x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.ModelNetDeepLabV3Plus.forward": [[221, 229], ["model_net_deeplabv3p.ModelNetDeepLabV3Plus.encoder", "model_net_deeplabv3p.ModelNetDeepLabV3Plus.aspp", "model_net_deeplabv3p.ModelNetDeepLabV3Plus.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "encoder", "(", "x", ")", "\n", "low_features", "=", "features", "[", "'enc_l4'", "]", "\n", "low_features_1", ",", "low_features_2", "=", "self", ".", "aspp", "(", "low_features", ")", "\n", "features", "[", "'aspp_pre'", "]", "=", "low_features_1", "\n", "features", "[", "'aspp'", "]", "=", "low_features_2", "\n", "features", "=", "self", ".", "decoder", "(", "features", ")", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_deeplabv3p.ModelNetDeepLabV3Plus.bottleneck_stride": [[230, 233], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "bottleneck_stride", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stride", "\n", "", "", ""]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.LambdaLayer.__init__": [[18, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.LambdaLayer.forward": [[22, 24], ["model_net_resnet_cifar10.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.BasicBlock.__init__": [[29, 46], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "model_net_resnet_cifar10.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "'A'", ":", "\n", "                ", "self", ".", "shortcut", "=", "LambdaLayer", "(", "\n", "lambda", "x", ":", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\"constant\"", ",", "0", ")", "\n", ")", "\n", "", "elif", "option", "==", "'B'", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.BasicBlock.forward": [[48, 54], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "model_net_resnet_cifar10.BasicBlock.bn2", "model_net_resnet_cifar10.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "model_net_resnet_cifar10.BasicBlock.bn1", "model_net_resnet_cifar10.BasicBlock.conv2", "model_net_resnet_cifar10.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ResNet.__init__": [[57, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "model_net_resnet_cifar10.ResNet._make_layer", "model_net_resnet_cifar10.ResNet._make_layer", "model_net_resnet_cifar10.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model_net_resnet_cifar10.ResNet.apply"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__", "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ResNet._make_layer", "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ResNet._make_layer", "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "64", ",", "num_classes", ")", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ResNet._make_layer": [[68, 75], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ResNet.forward": [[76, 85], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "model_net_resnet_cifar10.ResNet.layer1", "model_net_resnet_cifar10.ResNet.layer2", "model_net_resnet_cifar10.ResNet.layer3", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "model_net_resnet_cifar10.ResNet.view", "model_net_resnet_cifar10.ResNet.linear", "model_net_resnet_cifar10.ResNet.bn1", "model_net_resnet_cifar10.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "(", "1", ",", "1", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__": [[112, 118], ["super().__init__", "fn", "globals"], "methods", ["home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "cfg", ".", "dataset", "==", "'cifar10'", "\n", "model_name", "=", "cfg", ".", "model_name_specific", "\n", "fn", "=", "globals", "(", ")", "[", "model_name", "]", "\n", "self", ".", "model", "=", "fn", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.ModelNetResnetCifar10.forward": [[119, 121], ["model_net_resnet_cifar10.ModelNetResnetCifar10.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10._weights_init": [[12, 15], ["isinstance", "isinstance", "torch.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.resnet20": [[87, 89], ["model_net_resnet_cifar10.ResNet"], "function", ["None"], ["", "", "def", "resnet20", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.resnet32": [[91, 93], ["model_net_resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "resnet32", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.resnet44": [[95, 97], ["model_net_resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "resnet44", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.resnet56": [[99, 101], ["model_net_resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "resnet56", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.resnet110": [[103, 105], ["model_net_resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "resnet110", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.toshas_tbasis.models.model_net_resnet_cifar10.resnet1202": [[107, 109], ["model_net_resnet_cifar10.ResNet"], "function", ["None"], ["", "def", "resnet1202", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "200", ",", "200", ",", "200", "]", ")", "\n", "\n"]]}