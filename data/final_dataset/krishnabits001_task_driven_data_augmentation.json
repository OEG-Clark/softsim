{"home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.dataloaders.dataloaderObj.__init__": [[13, 20], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "#print('dataloaders init')", "\n", "        ", "self", ".", "data_path_tr", "=", "cfg", ".", "data_path_tr", "\n", "self", ".", "data_path_tr_cropped", "=", "cfg", ".", "data_path_tr_cropped", "\n", "self", ".", "target_resolution", "=", "cfg", ".", "target_resolution", "\n", "self", ".", "size", "=", "cfg", ".", "size", "\n", "self", ".", "num_classes", "=", "cfg", ".", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.dataloaders.dataloaderObj.normalize_minmax_data": [[21, 37], ["numpy.percentile", "numpy.percentile", "numpy.zeros"], "methods", ["None"], ["", "def", "normalize_minmax_data", "(", "self", ",", "image_data", ")", ":", "\n", "        ", "\"\"\"\n        # 3D MRI scan is normalized to range between 0 and 1 using min-max normalization.\n        Here, the minimum and maximum values are used as 2nd and 98th percentiles respectively from the 3D MRI scan.\n        We expect the outliers to be away from the range of [0,1].\n        input params :\n            image_data : 3D MRI scan to be normalized using min-max normalization\n        returns:\n            final_image_data : Normalized 3D MRI scan obtained via min-max normalization.\n        \"\"\"", "\n", "min_val_2p", "=", "np", ".", "percentile", "(", "image_data", ",", "2", ")", "\n", "max_val_98p", "=", "np", ".", "percentile", "(", "image_data", ",", "98", ")", "\n", "final_image_data", "=", "np", ".", "zeros", "(", "(", "image_data", ".", "shape", "[", "0", "]", ",", "image_data", ".", "shape", "[", "1", "]", ",", "image_data", ".", "shape", "[", "2", "]", ")", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "# min-max norm on total 3D volume", "\n", "final_image_data", "=", "(", "image_data", "-", "min_val_2p", ")", "/", "(", "max_val_98p", "-", "min_val_2p", ")", "\n", "return", "final_image_data", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.dataloaders.dataloaderObj.load_acdc_imgs": [[39, 80], ["nibabel.load", "nibabel.load.get_data", "dataloaders.dataloaderObj.normalize_minmax_data", "nibabel.load", "nibabel.load.get_data", "os.walk", "fileList.sort", "str", "str", "filename.lower", "systole_lstfiles.append", "os.path.join", "filename.lower", "systole_lstfiles.append", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.dataloaders.dataloaderObj.normalize_minmax_data"], ["", "def", "load_acdc_imgs", "(", "self", ",", "study_id_list", ",", "ret_affine", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        #Load ACDC data image and its label with pixel dimensions\n        input params :\n            study_id_list: id no of the image to be loaded\n            ret_affine: variable to enable returning of affine transformation matrix of the loaded image\n        returns :\n            image_data_test_sys : normalized 3D image\n            label_data_test_sys : 3D label mask of the image\n            pixel_size : pixel dimensions of the loaded image\n            affine_tst : affine transformation matrix of the loaded image\n        \"\"\"", "\n", "\n", "for", "study_id", "in", "study_id_list", ":", "\n", "            ", "path_files", "=", "str", "(", "self", ".", "data_path_tr", ")", "+", "str", "(", "study_id", ")", "+", "'/'", "\n", "systole_lstfiles", "=", "[", "]", "# create an empty list", "\n", "for", "dirName", ",", "subdirList", ",", "fileList", "in", "os", ".", "walk", "(", "path_files", ")", ":", "\n", "                    ", "fileList", ".", "sort", "(", ")", "\n", "for", "filename", "in", "fileList", ":", "\n", "                        ", "if", "\"_frame01\"", "in", "filename", ".", "lower", "(", ")", ":", "\n", "                            ", "systole_lstfiles", ".", "append", "(", "os", ".", "path", ".", "join", "(", "dirName", ",", "filename", ")", ")", "\n", "", "elif", "\"_frame04\"", "in", "filename", ".", "lower", "(", ")", ":", "\n", "                            ", "systole_lstfiles", ".", "append", "(", "os", ".", "path", ".", "join", "(", "dirName", ",", "filename", ")", ")", "\n", "\n", "# Load the 3D image", "\n", "", "", "", "", "image_data_test_load", "=", "nib", ".", "load", "(", "systole_lstfiles", "[", "0", "]", ")", "\n", "image_data_test_sys", "=", "image_data_test_load", ".", "get_data", "(", ")", "\n", "pixel_size", "=", "image_data_test_load", ".", "header", "[", "'pixdim'", "]", "[", "1", ":", "4", "]", "\n", "affine_tst", "=", "image_data_test_load", ".", "affine", "\n", "\n", "# Normalize input data", "\n", "image_data_test_sys", "=", "self", ".", "normalize_minmax_data", "(", "image_data_test_sys", ")", "\n", "\n", "# Load the segmentation mask", "\n", "label_data_test_load", "=", "nib", ".", "load", "(", "systole_lstfiles", "[", "1", "]", ")", "\n", "label_data_test_sys", "=", "label_data_test_load", ".", "get_data", "(", ")", "\n", "\n", "if", "(", "ret_affine", "==", "0", ")", ":", "\n", "            ", "return", "image_data_test_sys", ",", "label_data_test_sys", ",", "pixel_size", "\n", "", "else", ":", "\n", "            ", "return", "image_data_test_sys", ",", "label_data_test_sys", ",", "pixel_size", ",", "affine_tst", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.dataloaders.dataloaderObj.crop_or_pad_slice_to_size_1hot": [[82, 113], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "", "def", "crop_or_pad_slice_to_size_1hot", "(", "self", ",", "img_slice", ",", "nx", ",", "ny", ")", ":", "\n", "\n", "        ", "\"\"\"\n        To crop the input 2D slice for the given dimensions in 1-hot encoding format)\n        input params :\n            image_slice : 2D slice to be cropped (in 1-hot encoding format)\n            nx : dimension in x\n            ny : dimension in y\n        returns:\n            slice_cropped : cropped 2D slice\n        \"\"\"", "\n", "slice_cropped", "=", "np", ".", "zeros", "(", "(", "nx", ",", "ny", ",", "self", ".", "num_classes", ")", ")", "\n", "x", ",", "y", ",", "_", "=", "img_slice", ".", "shape", "\n", "\n", "x_s", "=", "(", "x", "-", "nx", ")", "//", "2", "\n", "y_s", "=", "(", "y", "-", "ny", ")", "//", "2", "\n", "x_c", "=", "(", "nx", "-", "x", ")", "//", "2", "\n", "y_c", "=", "(", "ny", "-", "y", ")", "//", "2", "\n", "\n", "if", "x", ">", "nx", "and", "y", ">", "ny", ":", "\n", "            ", "slice_cropped", "=", "img_slice", "[", "x_s", ":", "x_s", "+", "nx", ",", "y_s", ":", "y_s", "+", "ny", "]", "\n", "", "else", ":", "\n", "            ", "slice_cropped", "=", "np", ".", "zeros", "(", "(", "nx", ",", "ny", ",", "self", ".", "num_classes", ")", ")", "\n", "if", "x", "<=", "nx", "and", "y", ">", "ny", ":", "\n", "                ", "slice_cropped", "[", "x_c", ":", "x_c", "+", "x", ",", ":", "]", "=", "img_slice", "[", ":", ",", "y_s", ":", "y_s", "+", "ny", "]", "\n", "", "elif", "x", ">", "nx", "and", "y", "<=", "ny", ":", "\n", "                ", "slice_cropped", "[", ":", ",", "y_c", ":", "y_c", "+", "y", "]", "=", "img_slice", "[", "x_s", ":", "x_s", "+", "nx", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "slice_cropped", "[", "x_c", ":", "x_c", "+", "x", ",", "y_c", ":", "y_c", "+", "y", "]", "=", "img_slice", "[", ":", ",", ":", "]", "\n", "\n", "", "", "return", "slice_cropped", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.dataloaders.dataloaderObj.crop_or_pad_slice_to_size": [[114, 144], ["numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "def", "crop_or_pad_slice_to_size", "(", "self", ",", "img_slice", ",", "nx", ",", "ny", ")", ":", "\n", "        ", "\"\"\"\n        To crop the input 2D slice for the given dimensions\n        input params :\n            image_slice : 2D slice to be cropped\n            nx : dimension in x\n            ny : dimension in y\n        returns:\n            slice_cropped : cropped 2D slice\n        \"\"\"", "\n", "slice_cropped", "=", "np", ".", "zeros", "(", "(", "nx", ",", "ny", ")", ")", "\n", "x", ",", "y", "=", "img_slice", ".", "shape", "\n", "\n", "x_s", "=", "(", "x", "-", "nx", ")", "//", "2", "\n", "y_s", "=", "(", "y", "-", "ny", ")", "//", "2", "\n", "x_c", "=", "(", "nx", "-", "x", ")", "//", "2", "\n", "y_c", "=", "(", "ny", "-", "y", ")", "//", "2", "\n", "\n", "if", "x", ">", "nx", "and", "y", ">", "ny", ":", "\n", "            ", "slice_cropped", "=", "img_slice", "[", "x_s", ":", "x_s", "+", "nx", ",", "y_s", ":", "y_s", "+", "ny", "]", "\n", "", "else", ":", "\n", "            ", "slice_cropped", "=", "np", ".", "zeros", "(", "(", "nx", ",", "ny", ")", ")", "\n", "if", "x", "<=", "nx", "and", "y", ">", "ny", ":", "\n", "                ", "slice_cropped", "[", "x_c", ":", "x_c", "+", "x", ",", ":", "]", "=", "img_slice", "[", ":", ",", "y_s", ":", "y_s", "+", "ny", "]", "\n", "", "elif", "x", ">", "nx", "and", "y", "<=", "ny", ":", "\n", "                ", "slice_cropped", "[", ":", ",", "y_c", ":", "y_c", "+", "y", "]", "=", "img_slice", "[", "x_s", ":", "x_s", "+", "nx", ",", ":", "]", "\n", "", "else", ":", "\n", "                ", "slice_cropped", "[", "x_c", ":", "x_c", "+", "x", ",", "y_c", ":", "y_c", "+", "y", "]", "=", "img_slice", "[", ":", ",", ":", "]", "\n", "\n", "", "", "return", "slice_cropped", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.dataloaders.dataloaderObj.preprocess_data": [[145, 197], ["range", "numpy.squeeze", "skimage.transform.rescale", "dataloaders.dataloaderObj.crop_or_pad_slice_to_size", "numpy.squeeze", "skimage.transform.rescale", "dataloaders.dataloaderObj.crop_or_pad_slice_to_size", "numpy.reshape", "numpy.reshape", "numpy.concatenate", "numpy.reshape", "numpy.reshape", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.dataloaders.dataloaderObj.crop_or_pad_slice_to_size", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.dataloaders.dataloaderObj.crop_or_pad_slice_to_size"], ["", "def", "preprocess_data", "(", "self", ",", "img", ",", "mask", ",", "pixel_size", ",", "label_present", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        To preprocess the input 3D volume into given target resolution and crop them into dimensions specified in the init_acdc.py file\n        input params :\n            img : input 3D image volume to be processed\n            mask : corresponding 3D segmentation mask to be processed\n            pixel_size : the native pixel size of the input image\n            label_present : to indicate if the image has labels provided or not (used for unlabeled images)\n        returns:\n            cropped_img : processed and cropped 3D image\n            cropped_mask : processed and cropped 3D segmentation mask\n        \"\"\"", "\n", "nx", ",", "ny", "=", "self", ".", "size", "\n", "\n", "#scale vector to rescale to the target resolution", "\n", "scale_vector", "=", "[", "pixel_size", "[", "0", "]", "/", "self", ".", "target_resolution", "[", "0", "]", ",", "pixel_size", "[", "1", "]", "/", "self", ".", "target_resolution", "[", "1", "]", "]", "\n", "\n", "for", "slice_no", "in", "range", "(", "img", ".", "shape", "[", "2", "]", ")", ":", "\n", "\n", "            ", "slice_img", "=", "np", ".", "squeeze", "(", "img", "[", ":", ",", ":", ",", "slice_no", "]", ")", "\n", "slice_rescaled", "=", "transform", ".", "rescale", "(", "slice_img", ",", "\n", "scale_vector", ",", "\n", "order", "=", "1", ",", "\n", "preserve_range", "=", "True", ",", "\n", "mode", "=", "'constant'", ")", "\n", "if", "(", "label_present", "==", "1", ")", ":", "\n", "                ", "slice_mask", "=", "np", ".", "squeeze", "(", "mask", "[", ":", ",", ":", ",", "slice_no", "]", ")", "\n", "mask_rescaled", "=", "transform", ".", "rescale", "(", "slice_mask", ",", "\n", "scale_vector", ",", "\n", "order", "=", "0", ",", "\n", "preserve_range", "=", "True", ",", "\n", "mode", "=", "'constant'", ")", "\n", "\n", "", "slice_cropped", "=", "self", ".", "crop_or_pad_slice_to_size", "(", "slice_rescaled", ",", "nx", ",", "ny", ")", "\n", "if", "(", "label_present", "==", "1", ")", ":", "\n", "                ", "mask_cropped", "=", "self", ".", "crop_or_pad_slice_to_size", "(", "mask_rescaled", ",", "nx", ",", "ny", ")", "\n", "\n", "", "if", "(", "slice_no", "==", "0", ")", ":", "\n", "                ", "cropped_img", "=", "np", ".", "reshape", "(", "slice_cropped", ",", "(", "nx", ",", "ny", ",", "1", ")", ")", "\n", "if", "(", "label_present", "==", "1", ")", ":", "\n", "                    ", "cropped_mask", "=", "np", ".", "reshape", "(", "mask_cropped", ",", "(", "nx", ",", "ny", ",", "1", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "slice_cropped_tmp", "=", "np", ".", "reshape", "(", "slice_cropped", ",", "(", "nx", ",", "ny", ",", "1", ")", ")", "\n", "cropped_img", "=", "np", ".", "concatenate", "(", "(", "cropped_img", ",", "slice_cropped_tmp", ")", ",", "axis", "=", "2", ")", "\n", "if", "(", "label_present", "==", "1", ")", ":", "\n", "                     ", "mask_cropped_tmp", "=", "np", ".", "reshape", "(", "mask_cropped", ",", "(", "nx", ",", "ny", ",", "1", ")", ")", "\n", "cropped_mask", "=", "np", ".", "concatenate", "(", "(", "cropped_mask", ",", "mask_cropped_tmp", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "", "if", "(", "label_present", "==", "1", ")", ":", "\n", "            ", "return", "cropped_img", ",", "cropped_mask", "\n", "", "else", ":", "\n", "            ", "return", "cropped_img", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.dataloaders.dataloaderObj.load_acdc_cropped_img_labels": [[198, 231], ["numpy.load", "numpy.load", "numpy.concatenate", "str", "str", "numpy.concatenate", "str", "str"], "methods", ["None"], ["", "", "def", "load_acdc_cropped_img_labels", "(", "self", ",", "train_ids_list", ",", "label_present", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        # Load the already created and stored a-priori acdc data and its labels that are preprocessed and cropped to given dimensions\n        input params :\n            train_ids_list : patient ids of the image and label pairs to be loaded\n            label_present : to indicate if the image has labels provided or not (used for unlabeled images)\n        returns:\n            img_cat : stack of 3D images of all the patient id nos.\n            mask_cat : corresponding stack of 3D segmentation masks of all the patient id nos.\n        \"\"\"", "\n", "\n", "count", "=", "0", "\n", "for", "study_id", "in", "train_ids_list", ":", "\n", "#print(\"study_id\",study_id)", "\n", "            ", "img_fname", "=", "str", "(", "self", ".", "data_path_tr_cropped", ")", "+", "str", "(", "study_id", ")", "+", "'/img_cropped.npy'", "\n", "img_tmp", "=", "np", ".", "load", "(", "img_fname", ")", "\n", "if", "(", "label_present", "==", "1", ")", ":", "\n", "                ", "mask_fname", "=", "str", "(", "self", ".", "data_path_tr_cropped", ")", "+", "str", "(", "study_id", ")", "+", "'/mask_cropped.npy'", "\n", "mask_tmp", "=", "np", ".", "load", "(", "mask_fname", ")", "\n", "\n", "", "if", "(", "count", "==", "0", ")", ":", "\n", "                ", "img_cat", "=", "img_tmp", "\n", "if", "(", "label_present", "==", "1", ")", ":", "\n", "                    ", "mask_cat", "=", "mask_tmp", "\n", "", "count", "=", "1", "\n", "", "else", ":", "\n", "                ", "img_cat", "=", "np", ".", "concatenate", "(", "(", "img_cat", ",", "img_tmp", ")", ",", "axis", "=", "2", ")", "\n", "if", "(", "label_present", "==", "1", ")", ":", "\n", "                    ", "mask_cat", "=", "np", ".", "concatenate", "(", "(", "mask_cat", ",", "mask_tmp", ")", ",", "axis", "=", "2", ")", "\n", "", "", "", "if", "(", "label_present", "==", "1", ")", ":", "\n", "            ", "return", "img_cat", ",", "mask_cat", "\n", "", "else", ":", "\n", "            ", "return", "img_cat", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.models.modelObj.__init__": [[14, 21], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "img_size_x", "=", "cfg", ".", "img_size_x", "\n", "self", ".", "img_size_y", "=", "cfg", ".", "img_size_y", "\n", "self", ".", "num_classes", "=", "cfg", ".", "num_classes", "\n", "self", ".", "interp_val", "=", "cfg", ".", "interp_val", "\n", "self", ".", "img_size_flat", "=", "cfg", ".", "img_size_flat", "\n", "self", ".", "batch_size", "=", "cfg", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.models.modelObj.deform_net": [[22, 33], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.one_hot", "tensorflow.contrib.image.dense_image_warp", "tensorflow.contrib.image.dense_image_warp"], "methods", ["None"], ["", "def", "deform_net", "(", "self", ")", ":", "\n", "# placeholders for the network", "\n", "        ", "x_tmp", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", ",", "1", "]", ",", "name", "=", "'x_tmp'", ")", "\n", "v_tmp", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", ",", "2", "]", ",", "name", "=", "'v_tmp'", ")", "\n", "y_tmp", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", "]", ",", "name", "=", "'y_tmp'", ")", "\n", "\n", "y_tmp_1hot", "=", "tf", ".", "one_hot", "(", "y_tmp", ",", "depth", "=", "self", ".", "num_classes", ")", "\n", "w_tmp", "=", "tf", ".", "contrib", ".", "image", ".", "dense_image_warp", "(", "image", "=", "x_tmp", ",", "flow", "=", "v_tmp", ",", "name", "=", "'dense_image_warp_tmp'", ")", "\n", "w_tmp_1hot", "=", "tf", ".", "contrib", ".", "image", ".", "dense_image_warp", "(", "image", "=", "y_tmp_1hot", ",", "flow", "=", "v_tmp", ",", "name", "=", "'dense_image_warp_tmp_1hot'", ")", "\n", "\n", "return", "{", "'x_tmp'", ":", "x_tmp", ",", "'flow_v'", ":", "v_tmp", ",", "'deform_x'", ":", "w_tmp", ",", "'y_tmp'", ":", "y_tmp", ",", "'y_tmp_1hot'", ":", "y_tmp_1hot", ",", "'deform_y_1hot'", ":", "w_tmp_1hot", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.models.modelObj.contrast_net": [[34, 46], ["tensorflow.placeholder", "tensorflow.image.random_contrast", "tensorflow.image.random_brightness", "numpy.arange", "numpy.arange", "tensorflow.concat", "int", "int", "int", "tensorflow.gather", "tensorflow.gather"], "methods", ["None"], ["", "def", "contrast_net", "(", "self", ")", ":", "\n", "# placeholders for the network", "\n", "        ", "x_tmp", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", ",", "1", "]", ",", "name", "=", "'x_tmp'", ")", "\n", "\n", "rd_cont", "=", "tf", ".", "image", ".", "random_contrast", "(", "x_tmp", ",", "lower", "=", "0.8", ",", "upper", "=", "1.2", ",", "seed", "=", "1", ")", "\n", "rd_brit", "=", "tf", ".", "image", ".", "random_brightness", "(", "x_tmp", ",", "max_delta", "=", "0.1", ",", "seed", "=", "1", ")", "\n", "c_ind", "=", "np", ".", "arange", "(", "0", ",", "int", "(", "self", ".", "batch_size", "/", "2", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "b_ind", "=", "np", ".", "arange", "(", "int", "(", "self", ".", "batch_size", "/", "2", ")", ",", "int", "(", "self", ".", "batch_size", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "rd_fin", "=", "tf", ".", "concat", "(", "(", "tf", ".", "gather", "(", "rd_cont", ",", "c_ind", ")", ",", "tf", ".", "gather", "(", "rd_brit", ",", "b_ind", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "return", "{", "'x_tmp'", ":", "x_tmp", ",", "'rd_fin'", ":", "rd_fin", ",", "'rd_cont'", ":", "rd_cont", ",", "'rd_brit'", ":", "rd_brit", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.models.modelObj.unet": [[48, 201], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "layers.conv2d_layer", "layers.conv2d_layer", "layers.max_pool_layer2d", "layers.conv2d_layer", "layers.conv2d_layer", "layers.max_pool_layer2d", "layers.conv2d_layer", "layers.conv2d_layer", "layers.max_pool_layer2d", "layers.conv2d_layer", "layers.conv2d_layer", "layers.max_pool_layer2d", "layers.conv2d_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "tensorflow.concat", "layers.conv2d_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "tensorflow.concat", "layers.conv2d_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "tensorflow.concat", "layers.conv2d_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "tensorflow.concat", "layers.conv2d_layer", "layers.conv2d_layer", "layers.conv2d_layer", "layers.conv2d_layer", "layers.conv2d_layer", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.trainable_variables", "tensorflow.get_collection", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.constant", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.one_hot", "loss.dice_loss_without_backgrnd", "loss.pixel_wise_cross_entropy_loss_weighted", "tensorflow.control_dependencies", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.reduce_mean", "tensorflow.constant", "seg_net_vars.append", "tensorflow.constant", "seg_net_vars.append", "tensorflow.train.AdamOptimizer", "seg_net_vars.append"], "methods", ["home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.max_pool_layer2d", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.max_pool_layer2d", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.max_pool_layer2d", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.max_pool_layer2d", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.losses.lossObj.dice_loss_without_backgrnd", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.losses.lossObj.pixel_wise_cross_entropy_loss_weighted"], ["", "def", "unet", "(", "self", ",", "learn_rate_seg", "=", "0.001", ",", "fs_de", "=", "2", ",", "dsc_loss", "=", "1", ",", "en_1hot", "=", "0", ")", ":", "\n", "\n", "        ", "no_filters", "=", "[", "1", ",", "16", ",", "32", ",", "64", ",", "128", ",", "256", "]", "\n", "#default U-Net filters", "\n", "#no_filters = [1, 64, 128, 256, 512, 1024]", "\n", "\n", "if", "(", "self", ".", "num_classes", "==", "2", ")", ":", "\n", "            ", "class_weights", "=", "tf", ".", "constant", "(", "[", "[", "0.05", ",", "0.95", "]", "]", ",", "name", "=", "'class_weights'", ")", "\n", "", "elif", "(", "self", ".", "num_classes", "==", "3", ")", ":", "\n", "            ", "class_weights", "=", "tf", ".", "constant", "(", "[", "[", "0.05", ",", "0.5", ",", "0.45", "]", "]", ",", "name", "=", "'class_weights'", ")", "\n", "", "elif", "(", "self", ".", "num_classes", "==", "4", ")", ":", "\n", "            ", "class_weights", "=", "tf", ".", "constant", "(", "[", "[", "0.1", ",", "0.3", ",", "0.3", ",", "0.3", "]", "]", ",", "name", "=", "'class_weights'", ")", "\n", "\n", "", "num_channels", "=", "no_filters", "[", "0", "]", "\n", "# placeholders for the network", "\n", "# Inputs", "\n", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", ",", "num_channels", "]", ",", "name", "=", "'x'", ")", "\n", "if", "(", "en_1hot", "==", "1", ")", ":", "\n", "            ", "y_l", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", ",", "self", ".", "num_classes", "]", ",", "name", "=", "'y_l'", ")", "\n", "", "else", ":", "\n", "            ", "y_l", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", "]", ",", "name", "=", "'y_l'", ")", "\n", "", "select_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "name", "=", "'select_mask'", ")", "\n", "train_phase", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "name", "=", "'train_phase'", ")", "\n", "\n", "if", "(", "en_1hot", "==", "0", ")", ":", "\n", "            ", "y_l_onehot", "=", "tf", ".", "one_hot", "(", "y_l", ",", "depth", "=", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "y_l_onehot", "=", "y_l", "\n", "\n", "############################################", "\n", "#U-Net like Network", "\n", "############################################", "\n", "#Encoder - Downsampling Path", "\n", "############################################", "\n", "# 2x 3x3 conv and 1 maxpool", "\n", "# Level 1", "\n", "", "enc_c1_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "x", ",", "name", "=", "'enc_c1_a'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c1_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c1_a", ",", "name", "=", "'enc_c1_b'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c1_pool", "=", "layers", ".", "max_pool_layer2d", "(", "enc_c1_b", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ",", "name", "=", "'enc_c1_pool'", ")", "\n", "\n", "# Level 2", "\n", "enc_c2_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c1_pool", ",", "name", "=", "'enc_c2_a'", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c2_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c2_a", ",", "name", "=", "'enc_c2_b'", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c2_pool", "=", "layers", ".", "max_pool_layer2d", "(", "enc_c2_b", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ",", "name", "=", "'enc_c2_pool'", ")", "\n", "\n", "# Level 3", "\n", "enc_c3_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c2_pool", ",", "name", "=", "'enc_c3_a'", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c3_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c3_a", ",", "name", "=", "'enc_c3_b'", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c3_pool", "=", "layers", ".", "max_pool_layer2d", "(", "enc_c3_b", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ",", "name", "=", "'enc_c3_pool'", ")", "\n", "\n", "# Level 4", "\n", "enc_c4_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c3_pool", ",", "name", "=", "'enc_c4_a'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c4_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c4_a", ",", "name", "=", "'enc_c4_b'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c4_pool", "=", "layers", ".", "max_pool_layer2d", "(", "enc_c4_b", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ",", "name", "=", "'enc_c4_pool'", ")", "\n", "\n", "# Level 5 - 2x Conv", "\n", "enc_c5_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c4_pool", ",", "name", "=", "'enc_c5_a'", ",", "num_filters", "=", "no_filters", "[", "5", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c5_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c5_a", ",", "name", "=", "'enc_c5_b'", ",", "num_filters", "=", "no_filters", "[", "5", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "########################", "\n", "# Decoder - Upsampling Path", "\n", "########################", "\n", "#Upsample + 2x2 conv to half the no. of feature channels + SKIP connection (concate the conv. layers)", "\n", "# Level 5 - 1 upsampling layer + 1 conv op. + skip connection + 2x conv op.", "\n", "scale_val", "=", "2", "\n", "dec_up5", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "enc_c5_b", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "dec_dc5", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_up5", ",", "name", "=", "'dec_dc5'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_cat_c5", "=", "tf", ".", "concat", "(", "(", "dec_dc5", ",", "enc_c4_b", ")", ",", "axis", "=", "3", ",", "name", "=", "'dec_cat_c5'", ")", "\n", "dec_c4_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_cat_c5", ",", "name", "=", "'dec_c4_a'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_c4_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_c4_a", ",", "name", "=", "'dec_c4_b'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Level 4", "\n", "dec_up4", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "dec_c4_b", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "dec_dc4", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_up4", ",", "name", "=", "'dec_dc4'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_cat_c4", "=", "tf", ".", "concat", "(", "(", "dec_dc4", ",", "enc_c3_b", ")", ",", "axis", "=", "3", ",", "name", "=", "'dec_cat_c4'", ")", "\n", "dec_c3_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_cat_c4", ",", "name", "=", "'dec_c3_a'", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_c3_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_c3_a", ",", "name", "=", "'dec_c3_b'", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Level 3", "\n", "dec_up3", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "dec_c3_b", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "dec_dc3", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_up3", ",", "name", "=", "'dec_dc3'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_cat_c3", "=", "tf", ".", "concat", "(", "(", "dec_dc3", ",", "enc_c2_b", ")", ",", "axis", "=", "3", ",", "name", "=", "'dec_cat_c3'", ")", "\n", "dec_c2_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_cat_c3", ",", "name", "=", "'dec_c2_a'", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_c2_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_c2_a", ",", "name", "=", "'dec_c2_b'", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Level 2", "\n", "dec_up2", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "dec_c2_b", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "dec_dc2", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_up2", ",", "name", "=", "'dec_dc2'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_cat_c2", "=", "tf", ".", "concat", "(", "(", "dec_dc2", ",", "enc_c1_b", ")", ",", "axis", "=", "3", ",", "name", "=", "'dec_cat_c2'", ")", "\n", "dec_c1_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_cat_c2", ",", "name", "=", "'dec_c1_a'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Level 1", "\n", "seg_c1_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_c1_a", ",", "name", "=", "'seg_c1_a'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "seg_c1_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "seg_c1_a", ",", "name", "=", "'seg_c1_b'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "seg_c1_c", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "seg_c1_b", ",", "name", "=", "'seg_c1_c'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "#Final output layer - Logits before softmax", "\n", "seg_fin_layer", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "seg_c1_c", ",", "name", "=", "'seg_fin_layer'", ",", "num_filters", "=", "self", ".", "num_classes", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "False", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Predict Class", "\n", "y_pred", "=", "tf", ".", "nn", ".", "softmax", "(", "seg_fin_layer", ")", "\n", "y_pred_cls", "=", "tf", ".", "argmax", "(", "y_pred", ",", "axis", "=", "3", ")", "\n", "\n", "########################", "\n", "# Simple Cross Entropy (CE) between predicted labels and true labels", "\n", "if", "(", "dsc_loss", "==", "1", ")", ":", "\n", "# For dice score loss function", "\n", "#without background", "\n", "            ", "seg_cost", "=", "loss", ".", "dice_loss_without_backgrnd", "(", "logits", "=", "seg_fin_layer", ",", "labels", "=", "y_l_onehot", ")", "\n", "#with background", "\n", "#seg_cost = dice_loss_with_backgrnd(logits=seg_fin_layer, labels=y_l_onehot)", "\n", "", "else", ":", "\n", "# For Weighted Cross Entropy loss function with background", "\n", "            ", "seg_cost", "=", "loss", ".", "pixel_wise_cross_entropy_loss_weighted", "(", "logits", "=", "seg_fin_layer", ",", "labels", "=", "y_l_onehot", ",", "class_weights", "=", "class_weights", ")", "\n", "\n", "# var list of u-net (segmentation net)", "\n", "", "seg_net_vars", "=", "[", "]", "\n", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "            ", "var_name", "=", "v", ".", "name", "\n", "if", "'enc_'", "in", "var_name", ":", "seg_net_vars", ".", "append", "(", "v", ")", "\n", "elif", "'dec_'", "in", "var_name", ":", "seg_net_vars", ".", "append", "(", "v", ")", "\n", "elif", "'seg_'", "in", "var_name", ":", "seg_net_vars", ".", "append", "(", "v", ")", "\n", "\n", "", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "            ", "cost_seg", "=", "tf", ".", "reduce_mean", "(", "seg_cost", ")", "\n", "optimizer_unet_seg", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learn_rate_seg", ")", ".", "minimize", "(", "cost_seg", ",", "var_list", "=", "seg_net_vars", ")", "\n", "\n", "", "seg_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'seg_cost'", ",", "tf", ".", "reduce_mean", "(", "seg_cost", ")", ")", "\n", "# Merge all the summaries and write them out to /tmp/mnist_logs (by default)", "\n", "train_summary", "=", "tf", ".", "summary", ".", "merge", "(", "[", "seg_summary", "]", ")", "\n", "# For dice score summary", "\n", "rv_dice", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'rv_dice'", ")", "\n", "rv_dice_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'rv_val_dice'", ",", "rv_dice", ")", "\n", "myo_dice", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'myo_dice'", ")", "\n", "myo_dice_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'myo_val_dice'", ",", "myo_dice", ")", "\n", "lv_dice", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'lv_dice'", ")", "\n", "lv_dice_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'lv_val_dice'", ",", "lv_dice", ")", "\n", "\n", "mean_dice", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'mean_dice'", ")", "\n", "mean_dice_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'mean_val_dice'", ",", "mean_dice", ")", "\n", "\n", "val_dsc_summary", "=", "tf", ".", "summary", ".", "merge", "(", "[", "mean_dice_summary", ",", "rv_dice_summary", ",", "myo_dice_summary", ",", "lv_dice_summary", "]", ")", "\n", "\n", "val_totalc", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'val_totalc'", ")", "\n", "val_totalc_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "'val_totalc_'", ",", "val_totalc", ")", "\n", "val_summary", "=", "tf", ".", "summary", ".", "merge", "(", "[", "val_totalc_sum", "]", ")", "\n", "\n", "return", "{", "'x'", ":", "x", ",", "'y_l'", ":", "y_l", ",", "'train_phase'", ":", "train_phase", ",", "'select_mask'", ":", "select_mask", ",", "'seg_cost'", ":", "cost_seg", ",", "'y_pred'", ":", "y_pred", ",", "'y_pred_cls'", ":", "y_pred_cls", ",", "'optimizer_unet_seg'", ":", "optimizer_unet_seg", ",", "'train_summary'", ":", "train_summary", ",", "'seg_fin_layer'", ":", "seg_fin_layer", ",", "'rv_dice'", ":", "rv_dice", ",", "'myo_dice'", ":", "myo_dice", ",", "'lv_dice'", ":", "lv_dice", ",", "'mean_dice'", ":", "mean_dice", ",", "'val_dsc_summary'", ":", "val_dsc_summary", ",", "'val_totalc'", ":", "val_totalc", ",", "'val_summary'", ":", "val_summary", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.models.modelObj.discriminator_loss": [[202, 258], ["loss_func.__contains__", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "print", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "print", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "print", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "print", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.ones_like", "tensorflow.zeros_like"], "methods", ["None"], ["", "def", "discriminator_loss", "(", "self", ",", "Ra", ",", "loss_func", ",", "real", ",", "fake", ")", ":", "\n", "        ", "real_loss", "=", "0", "\n", "fake_loss", "=", "0", "\n", "\n", "if", "Ra", "and", "loss_func", ".", "__contains__", "(", "'wgan'", ")", ":", "\n", "#print(\"No exist [Ra + WGAN], so use the {} loss function\".format(loss_func))", "\n", "            ", "Ra", "=", "False", "\n", "\n", "", "if", "Ra", ":", "\n", "            ", "real_logit", "=", "(", "real", "-", "tf", ".", "reduce_mean", "(", "fake", ")", ")", "\n", "fake_logit", "=", "(", "fake", "-", "tf", ".", "reduce_mean", "(", "real", ")", ")", "\n", "\n", "if", "loss_func", "==", "'lsgan'", ":", "\n", "                ", "real_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "real_logit", "-", "1.0", ")", ")", "\n", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "fake_logit", "+", "1.0", ")", ")", "\n", "\n", "", "if", "loss_func", "==", "'gan'", "or", "loss_func", "==", "'gan-gp'", "or", "loss_func", "==", "'dragan'", ":", "\n", "                ", "print", "(", "'D ra_en sigmoid loss'", ")", "\n", "real_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "ones_like", "(", "real", ")", ",", "logits", "=", "real_logit", ")", ")", "\n", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "zeros_like", "(", "fake", ")", ",", "logits", "=", "fake_logit", ")", ")", "\n", "\n", "", "if", "loss_func", "==", "'ngan'", ":", "\n", "                ", "print", "(", "'D ra_en softmax loss'", ")", "\n", "real_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "tf", ".", "ones_like", "(", "real", ")", ",", "logits", "=", "real_logit", ")", ")", "\n", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "tf", ".", "zeros_like", "(", "fake", ")", ",", "logits", "=", "fake_logit", ")", ")", "\n", "\n", "", "if", "loss_func", "==", "'hinge'", ":", "\n", "                ", "real_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "relu", "(", "1.0", "-", "real_logit", ")", ")", "\n", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "relu", "(", "1.0", "+", "fake_logit", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "loss_func", "==", "'wgan-gp'", "or", "loss_func", "==", "'wgan-lp'", ":", "\n", "                ", "real_loss", "=", "-", "tf", ".", "reduce_mean", "(", "real", ")", "\n", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "fake", ")", "\n", "\n", "", "if", "loss_func", "==", "'lsgan'", ":", "\n", "                ", "real_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "real", "-", "1.0", ")", ")", "\n", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "fake", ")", ")", "\n", "\n", "", "if", "loss_func", "==", "'gan'", "or", "loss_func", "==", "'gan-gp'", "or", "loss_func", "==", "'dragan'", ":", "\n", "                ", "print", "(", "'D ra_off sigmoid loss'", ")", "\n", "real_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "ones_like", "(", "real", ")", ",", "logits", "=", "real", ")", ")", "\n", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "zeros_like", "(", "fake", ")", ",", "logits", "=", "fake", ")", ")", "\n", "\n", "", "if", "loss_func", "==", "'ngan'", ":", "\n", "                ", "print", "(", "'D ra_off softmax loss'", ")", "\n", "real_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "tf", ".", "ones_like", "(", "real", ")", ",", "logits", "=", "real", ")", ")", "\n", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "tf", ".", "zeros_like", "(", "fake", ")", ",", "logits", "=", "fake", ")", ")", "\n", "\n", "", "if", "loss_func", "==", "'hinge'", ":", "\n", "                ", "real_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "relu", "(", "1.0", "-", "real", ")", ")", "\n", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "relu", "(", "1.0", "+", "fake", ")", ")", "\n", "\n", "", "", "loss", "=", "real_loss", "+", "fake_loss", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.models.modelObj.generator_loss": [[259, 310], ["loss_func.__contains__", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "print", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "print", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "print", "tensorflow.reduce_mean", "print", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.square", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.reduce_mean", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.ones_like", "tensorflow.zeros_like", "tensorflow.ones_like", "tensorflow.ones_like"], "methods", ["None"], ["", "def", "generator_loss", "(", "self", ",", "Ra", ",", "loss_func", ",", "real", ",", "fake", ")", ":", "\n", "        ", "fake_loss", "=", "0", "\n", "real_loss", "=", "0", "\n", "\n", "if", "Ra", "and", "loss_func", ".", "__contains__", "(", "'wgan'", ")", ":", "\n", "#print(\"No exist [Ra + WGAN], so use the {} loss function\".format(loss_func))", "\n", "            ", "Ra", "=", "False", "\n", "\n", "", "if", "Ra", ":", "\n", "            ", "fake_logit", "=", "(", "fake", "-", "tf", ".", "reduce_mean", "(", "real", ")", ")", "\n", "real_logit", "=", "(", "real", "-", "tf", ".", "reduce_mean", "(", "fake", ")", ")", "\n", "\n", "if", "loss_func", "==", "'lsgan'", ":", "\n", "                ", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "fake_logit", "-", "1.0", ")", ")", "\n", "real_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "real_logit", "+", "1.0", ")", ")", "\n", "\n", "", "if", "loss_func", "==", "'gan'", "or", "loss_func", "==", "'gan-gp'", "or", "loss_func", "==", "'dragan'", ":", "\n", "                ", "print", "(", "'G ra_en sigmoid loss'", ")", "\n", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "ones_like", "(", "fake", ")", ",", "logits", "=", "fake_logit", ")", ")", "\n", "real_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "zeros_like", "(", "real", ")", ",", "logits", "=", "real_logit", ")", ")", "\n", "\n", "", "if", "loss_func", "==", "'ngan'", ":", "\n", "                ", "print", "(", "'G ra_en softmax loss'", ")", "\n", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "tf", ".", "ones_like", "(", "fake", ")", ",", "logits", "=", "fake_logit", ")", ")", "\n", "real_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "tf", ".", "zeros_like", "(", "real", ")", ",", "logits", "=", "real_logit", ")", ")", "\n", "\n", "", "if", "loss_func", "==", "'hinge'", ":", "\n", "                ", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "relu", "(", "1.0", "-", "fake_logit", ")", ")", "\n", "real_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "relu", "(", "1.0", "+", "real_logit", ")", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "if", "loss_func", "==", "'wgan-gp'", "or", "loss_func", "==", "'wgan-lp'", ":", "\n", "                ", "fake_loss", "=", "-", "tf", ".", "reduce_mean", "(", "fake", ")", "\n", "\n", "", "if", "loss_func", "==", "'lsgan'", ":", "\n", "                ", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "fake", "-", "1.0", ")", ")", "\n", "\n", "", "if", "loss_func", "==", "'gan'", "or", "loss_func", "==", "'gan-gp'", "or", "loss_func", "==", "'dragan'", ":", "\n", "                ", "print", "(", "'G ra_off sigmoid loss'", ")", "\n", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "labels", "=", "tf", ".", "ones_like", "(", "fake", ")", ",", "logits", "=", "fake", ")", ")", "\n", "\n", "", "if", "loss_func", "==", "'ngan'", ":", "\n", "                ", "print", "(", "'G ra_off softmax loss'", ")", "\n", "fake_loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "labels", "=", "tf", ".", "ones_like", "(", "fake", ")", ",", "logits", "=", "fake", ")", ")", "\n", "\n", "", "if", "loss_func", "==", "'hinge'", ":", "\n", "                ", "fake_loss", "=", "-", "tf", ".", "reduce_mean", "(", "fake", ")", "\n", "\n", "", "", "loss", "=", "fake_loss", "+", "real_loss", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.models.modelObj.spatial_generator_cgan_unet": [[311, 625], ["tensorflow.truncated_normal_initializer", "int", "int", "int", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.relu", "tensorflow.reshape", "layers.upsample_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "layers.conv2d_layer", "layers.conv2d_layer", "tensorflow.concat", "layers.conv2d_layer", "layers.conv2d_layer", "layers.conv2d_layer", "tensorflow.contrib.image.dense_image_warp", "tensorflow.concat", "tensorflow.cond", "layers.conv2d_layer", "tensorflow.nn.leaky_relu", "layers.conv2d_layer", "tensorflow.nn.leaky_relu", "layers.conv2d_layer", "tensorflow.nn.leaky_relu", "layers.conv2d_layer", "tensorflow.nn.leaky_relu", "layers.conv2d_layer", "tensorflow.nn.leaky_relu", "tensorflow.contrib.layers.flatten", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "numpy.arange", "tensorflow.gather", "numpy.arange", "tensorflow.gather", "models.modelObj.discriminator_loss", "models.modelObj.generator_loss", "tensorflow.trainable_variables", "layers.conv2d_layer", "layers.conv2d_layer", "layers.max_pool_layer2d", "layers.conv2d_layer", "layers.conv2d_layer", "layers.max_pool_layer2d", "layers.conv2d_layer", "layers.conv2d_layer", "layers.max_pool_layer2d", "layers.conv2d_layer", "layers.conv2d_layer", "layers.max_pool_layer2d", "layers.conv2d_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "tensorflow.concat", "layers.conv2d_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "tensorflow.concat", "layers.conv2d_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "tensorflow.concat", "layers.conv2d_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "tensorflow.concat", "layers.conv2d_layer", "layers.conv2d_layer", "layers.conv2d_layer", "layers.conv2d_layer", "layers.conv2d_layer", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.trainable_variables", "tensorflow.get_collection", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.constant", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.one_hot", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "loss.dice_loss_without_backgrnd", "loss.pixel_wise_cross_entropy_loss_weighted", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "disc_net_vars.append", "seg_net_vars.append", "tensorflow.abs", "tensorflow.constant", "disc_net_vars.append", "seg_net_vars.append", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.layers.flatten", "gen_net_vars.append", "seg_net_vars.append", "tensorflow.abs", "gen_net_vars.append", "tensorflow.layers.flatten"], "methods", ["home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.models.modelObj.discriminator_loss", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.models.modelObj.generator_loss", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.max_pool_layer2d", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.max_pool_layer2d", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.max_pool_layer2d", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.max_pool_layer2d", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.losses.lossObj.dice_loss_without_backgrnd", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.losses.lossObj.pixel_wise_cross_entropy_loss_weighted"], ["", "def", "spatial_generator_cgan_unet", "(", "self", ",", "learn_rate_gen", "=", "0.0001", ",", "learn_rate_disc", "=", "0.0001", ",", "z_lat_dim", "=", "100", ",", "lat_dim", "=", "128", ",", "beta1_val", "=", "0.9", ",", "gan_type", "=", "'gan'", ",", "ra_en", "=", "True", ",", "learn_rate_seg", "=", "0.001", ",", "dsc_loss", "=", "1", ",", "en_1hot", "=", "0", ",", "lamda_dsc", "=", "1", ",", "lamda_adv", "=", "1", ",", "lamda_l1_g", "=", "1", ")", ":", "\n", "\n", "\n", "        ", "no_filters", "=", "[", "1", ",", "16", ",", "32", ",", "64", ",", "128", ",", "256", "]", "\n", "\n", "if", "(", "self", ".", "num_classes", "==", "2", ")", ":", "\n", "            ", "class_weights", "=", "tf", ".", "constant", "(", "[", "[", "0.05", ",", "0.95", "]", "]", ",", "name", "=", "'class_weights'", ")", "\n", "", "elif", "(", "self", ".", "num_classes", "==", "3", ")", ":", "\n", "            ", "class_weights", "=", "tf", ".", "constant", "(", "[", "[", "0.05", ",", "0.5", ",", "0.45", "]", "]", ",", "name", "=", "'class_weights'", ")", "\n", "", "elif", "(", "self", ".", "num_classes", "==", "4", ")", ":", "\n", "            ", "class_weights", "=", "tf", ".", "constant", "(", "[", "[", "0.1", ",", "0.3", ",", "0.3", ",", "0.3", "]", "]", ",", "name", "=", "'class_weights'", ")", "\n", "\n", "", "std_init", "=", "0.01", "\n", "SEED", "=", "1", "\n", "acti", "=", "'xavier'", "\n", "intl", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "std_init", ",", "seed", "=", "SEED", ")", "\n", "\n", "hid_dim", "=", "int", "(", "self", ".", "img_size_x", "*", "self", ".", "img_size_y", "*", "no_filters", "[", "4", "]", "/", "(", "32", "*", "32", ")", ")", "\n", "latent_dim", "=", "lat_dim", "\n", "\n", "z_hid_dim", "=", "int", "(", "self", ".", "img_size_x", "*", "self", ".", "img_size_y", "*", "no_filters", "[", "4", "]", "/", "(", "32", "*", "32", ")", ")", "\n", "dim_x", "=", "int", "(", "self", ".", "img_size_x", "/", "32", ")", "\n", "\n", "#Generator - FCN variables", "\n", "gen_c1_weights", "=", "tf", ".", "get_variable", "(", "name", "=", "\"gen_c1_weights\"", ",", "shape", "=", "[", "z_lat_dim", ",", "z_hid_dim", "]", ",", "initializer", "=", "intl", ")", "\n", "gen_c1_biases", "=", "tf", ".", "get_variable", "(", "name", "=", "\"gen_c1_biases\"", ",", "shape", "=", "[", "z_hid_dim", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "value", "=", "0", ")", ")", "\n", "\n", "#Discriminator - FCN variables", "\n", "fcn_c1_weights", "=", "tf", ".", "get_variable", "(", "name", "=", "\"fcn_c1_weights\"", ",", "shape", "=", "[", "hid_dim", ",", "latent_dim", "]", ",", "initializer", "=", "intl", ")", "\n", "fcn_c1_biases", "=", "tf", ".", "get_variable", "(", "name", "=", "\"fcn_c1_biases\"", ",", "shape", "=", "[", "latent_dim", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "value", "=", "0", ")", ")", "\n", "fcn_c2_weights", "=", "tf", ".", "get_variable", "(", "name", "=", "\"fcn_c2_weights\"", ",", "shape", "=", "[", "latent_dim", ",", "latent_dim", "]", ",", "initializer", "=", "intl", ")", "\n", "fcn_c2_biases", "=", "tf", ".", "get_variable", "(", "name", "=", "\"fcn_c2_biases\"", ",", "shape", "=", "[", "latent_dim", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "value", "=", "0", ")", ")", "\n", "fcn_c3_weights", "=", "tf", ".", "get_variable", "(", "name", "=", "\"fcn_c3_weights\"", ",", "shape", "=", "[", "latent_dim", ",", "1", "]", ",", "initializer", "=", "intl", ")", "\n", "fcn_c3_biases", "=", "tf", ".", "get_variable", "(", "name", "=", "\"fcn_c3_biases\"", ",", "shape", "=", "[", "1", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "value", "=", "0", ")", ")", "\n", "\n", "\n", "num_channels", "=", "no_filters", "[", "0", "]", "\n", "# Placeholders", "\n", "# input to the network", "\n", "z", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "z_lat_dim", "]", ",", "name", "=", "'z'", ")", "\n", "x_l", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", ",", "num_channels", "]", ",", "name", "=", "'x_l'", ")", "\n", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", ",", "num_channels", "]", ",", "name", "=", "'x'", ")", "\n", "x_unl", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", ",", "num_channels", "]", ",", "name", "=", "'x_unl'", ")", "\n", "if", "(", "en_1hot", "==", "1", ")", ":", "\n", "            ", "y_l", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", ",", "self", ".", "num_classes", "]", ",", "name", "=", "'y_l'", ")", "\n", "", "else", ":", "\n", "            ", "y_l", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", "]", ",", "name", "=", "'y_l'", ")", "\n", "", "select_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "name", "=", "'select_mask'", ")", "\n", "train_phase", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "name", "=", "'train_phase'", ")", "\n", "if", "(", "en_1hot", "==", "0", ")", ":", "\n", "            ", "y_l_onehot", "=", "tf", ".", "one_hot", "(", "y_l", ",", "depth", "=", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "y_l_onehot", "=", "y_l", "\n", "\n", "############################################", "\n", "## Generator Network", "\n", "############################################", "\n", "# Dense layer + Reshape reshape to down sampled image dimensions", "\n", "", "gen_fcn_c1", "=", "tf", ".", "matmul", "(", "z", ",", "gen_c1_weights", ")", "+", "gen_c1_biases", "\n", "gen_fcn_relu_c1", "=", "tf", ".", "nn", ".", "relu", "(", "gen_fcn_c1", ")", "\n", "gen_fcn_reshaped", "=", "tf", ".", "reshape", "(", "gen_fcn_relu_c1", ",", "[", "-", "1", ",", "dim_x", ",", "dim_x", ",", "no_filters", "[", "4", "]", "]", ")", "\n", "\n", "# Level 5 - Upsampling layer + Conv. layer", "\n", "fs_de", "=", "2", "\n", "scale_val", "=", "2", "\n", "gen_up5", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "gen_fcn_reshaped", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "gen_c5", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "gen_up5", ",", "name", "=", "'gen_c5'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Level 4", "\n", "gen_up4", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "gen_c5", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "gen_c4", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "gen_up4", ",", "name", "=", "'gen_c4'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Level 3", "\n", "gen_up3", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "gen_c4", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "gen_c3", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "gen_up3", ",", "name", "=", "'gen_c3'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Level 2", "\n", "gen_up2", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "gen_c3", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "gen_c2", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "gen_up2", ",", "name", "=", "'gen_c2'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Level 1", "\n", "gen_up1", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "gen_c2", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "gen_c1", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "gen_up1", ",", "name", "=", "'gen_c1'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "False", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Conv. ops on input image", "\n", "conv_1a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "x_l", ",", "name", "=", "'conv_1a'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "conv_1b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "conv_1a", ",", "name", "=", "'conv_1b'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Concatenate features obtained by conv. ops on image and on 'z'", "\n", "gen_cat", "=", "tf", ".", "concat", "(", "(", "gen_c1", ",", "conv_1b", ")", ",", "axis", "=", "3", ")", "\n", "\n", "# More Conv. ops on concatenated feature maps", "\n", "conv_1c", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "gen_cat", ",", "name", "=", "'conv_1c'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "conv_1d", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "conv_1c", ",", "name", "=", "'conv_1d'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "conv_1e", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "conv_1d", ",", "name", "=", "'conv_1e'", ",", "num_filters", "=", "2", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "False", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "flow_vec", "=", "conv_1e", "\n", "\n", "# apply flow vector on the input image to get non-affine transformed image", "\n", "y_trans", "=", "tf", ".", "contrib", ".", "image", ".", "dense_image_warp", "(", "image", "=", "x_l", ",", "flow", "=", "flow_vec", ",", "name", "=", "'dense_image_warp'", ")", "\n", "\n", "\n", "############################################", "\n", "## Discriminator Network", "\n", "############################################", "\n", "\n", "cat_disc_c1", "=", "tf", ".", "concat", "(", "(", "y_trans", ",", "x_unl", ")", ",", "axis", "=", "0", ",", "name", "=", "'cat_disc_c1'", ")", "\n", "\n", "# Choose between concate or true+gen images or gen images", "\n", "cat_disc_c1", "=", "tf", ".", "cond", "(", "select_mask", ",", "lambda", ":", "cat_disc_c1", ",", "lambda", ":", "y_trans", ")", "\n", "\n", "# DISC Net Architecutre", "\n", "disc_c1", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "cat_disc_c1", ",", "name", "=", "'disc_c1'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "disc_c1", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "disc_c1", ",", "alpha", "=", "0.2", ")", "\n", "\n", "disc_c2", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "disc_c1", ",", "name", "=", "'disc_c2'", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "disc_c2", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "disc_c2", ",", "alpha", "=", "0.2", ")", "\n", "\n", "disc_c3", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "disc_c2", ",", "name", "=", "'disc_c3'", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "disc_c3", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "disc_c3", ",", "alpha", "=", "0.2", ")", "\n", "\n", "disc_c4", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "disc_c3", ",", "name", "=", "'disc_c4'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "disc_c4", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "disc_c4", ",", "alpha", "=", "0.2", ")", "\n", "\n", "disc_c5", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "disc_c4", ",", "name", "=", "'disc_c5'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "disc_c5_pool", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "disc_c5", ",", "alpha", "=", "0.2", ")", "\n", "\n", "# Flat conv for FCN", "\n", "flat_conv", "=", "tf", ".", "contrib", ".", "layers", ".", "flatten", "(", "disc_c5_pool", ")", "\n", "\n", "# FCN + Relu - x2", "\n", "z_fcn_c1", "=", "tf", ".", "matmul", "(", "flat_conv", ",", "fcn_c1_weights", ")", "+", "fcn_c1_biases", "\n", "z_fcn_relu_c1", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "z_fcn_c1", ")", "\n", "\n", "z_fcn_c2", "=", "tf", ".", "matmul", "(", "z_fcn_relu_c1", ",", "fcn_c2_weights", ")", "+", "fcn_c2_biases", "\n", "z_fcn_relu_c2", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "z_fcn_c2", ")", "\n", "\n", "# 1 fully connected layer to determine input images into real / fake categories", "\n", "z_class", "=", "tf", ".", "matmul", "(", "z_fcn_relu_c2", ",", "fcn_c3_weights", ")", "+", "fcn_c3_biases", "\n", "\n", "z_pred", "=", "z_class", "\n", "z_pred_cls", "=", "z_pred", "\n", "\n", "fake_indices", "=", "np", ".", "arange", "(", "0", ",", "self", ".", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "fake", "=", "tf", ".", "gather", "(", "z_class", ",", "fake_indices", ")", "\n", "real_indices", "=", "np", ".", "arange", "(", "self", ".", "batch_size", ",", "2", "*", "self", ".", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "real", "=", "tf", ".", "gather", "(", "z_class", ",", "real_indices", ")", "\n", "\n", "# Discriminator loss", "\n", "z_cost", "=", "self", ".", "discriminator_loss", "(", "Ra", "=", "ra_en", ",", "loss_func", "=", "gan_type", ",", "real", "=", "real", ",", "fake", "=", "fake", ")", "\n", "# Generator loss", "\n", "g_cost", "=", "self", ".", "generator_loss", "(", "Ra", "=", "ra_en", ",", "loss_func", "=", "gan_type", ",", "real", "=", "real", ",", "fake", "=", "fake", ")", "\n", "\n", "# divide the var list into Generator Network and Discriminator Net", "\n", "gen_net_vars", "=", "[", "]", "\n", "disc_net_vars", "=", "[", "]", "\n", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "            ", "var_name", "=", "v", ".", "name", "\n", "if", "'disc_'", "in", "var_name", ":", "disc_net_vars", ".", "append", "(", "v", ")", "\n", "elif", "'fcn_'", "in", "var_name", ":", "disc_net_vars", ".", "append", "(", "v", ")", "\n", "elif", "'gen_'", "in", "var_name", ":", "gen_net_vars", ".", "append", "(", "v", ")", "\n", "elif", "'conv_'", "in", "var_name", ":", "gen_net_vars", ".", "append", "(", "v", ")", "\n", "\n", "\n", "############################################", "\n", "#U-Net Network", "\n", "############################################", "\n", "# Encoder - Downsampling Path", "\n", "############################################", "\n", "# 2x 3x3 conv and 1 maxpool", "\n", "# Level 1", "\n", "", "enc_c1_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "x", ",", "name", "=", "'enc_c1_a'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c1_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c1_a", ",", "name", "=", "'enc_c1_b'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c1_pool", "=", "layers", ".", "max_pool_layer2d", "(", "enc_c1_b", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ",", "name", "=", "'enc_c1_pool'", ")", "\n", "\n", "# Level 2", "\n", "enc_c2_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c1_pool", ",", "name", "=", "'enc_c2_a'", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c2_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c2_a", ",", "name", "=", "'enc_c2_b'", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c2_pool", "=", "layers", ".", "max_pool_layer2d", "(", "enc_c2_b", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ",", "name", "=", "'enc_c2_pool'", ")", "\n", "\n", "# Level 3", "\n", "enc_c3_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c2_pool", ",", "name", "=", "'enc_c3_a'", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c3_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c3_a", ",", "name", "=", "'enc_c3_b'", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c3_pool", "=", "layers", ".", "max_pool_layer2d", "(", "enc_c3_b", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ",", "name", "=", "'enc_c3_pool'", ")", "\n", "\n", "# Level 4", "\n", "enc_c4_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c3_pool", ",", "name", "=", "'enc_c4_a'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c4_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c4_a", ",", "name", "=", "'enc_c4_b'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c4_pool", "=", "layers", ".", "max_pool_layer2d", "(", "enc_c4_b", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ",", "name", "=", "'enc_c4_pool'", ")", "\n", "\n", "# Level 5 - 2x Conv", "\n", "enc_c5_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c4_pool", ",", "name", "=", "'enc_c5_a'", ",", "num_filters", "=", "no_filters", "[", "5", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c5_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c5_a", ",", "name", "=", "'enc_c5_b'", ",", "num_filters", "=", "no_filters", "[", "5", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "########################", "\n", "# Decoder - Upsampling Path", "\n", "########################", "\n", "# Upsample + 2x2 conv to half the no. of feature channels + SKIP connection (concate the conv. layers)", "\n", "# Level 5 - 1 upsampling layer + 1 conv op. + skip connection + 2x conv op.", "\n", "scale_val", "=", "2", "\n", "dec_up5", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "enc_c5_b", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "dec_dc5", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_up5", ",", "name", "=", "'dec_dc5'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_cat_c5", "=", "tf", ".", "concat", "(", "(", "dec_dc5", ",", "enc_c4_b", ")", ",", "axis", "=", "3", ",", "name", "=", "'dec_cat_c5'", ")", "\n", "\n", "#Level 4", "\n", "dec_c4_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_cat_c5", ",", "name", "=", "'dec_c4_a'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_c4_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_c4_a", ",", "name", "=", "'dec_c4_b'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_up4", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "dec_c4_b", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "dec_dc4", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_up4", ",", "name", "=", "'dec_dc4'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_cat_c4", "=", "tf", ".", "concat", "(", "(", "dec_dc4", ",", "enc_c3_b", ")", ",", "axis", "=", "3", ",", "name", "=", "'dec_cat_c4'", ")", "\n", "\n", "#Level 3", "\n", "dec_c3_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_cat_c4", ",", "name", "=", "'dec_c3_a'", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_c3_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_c3_a", ",", "name", "=", "'dec_c3_b'", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_up3", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "dec_c3_b", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "dec_dc3", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_up3", ",", "name", "=", "'dec_dc3'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_cat_c3", "=", "tf", ".", "concat", "(", "(", "dec_dc3", ",", "enc_c2_b", ")", ",", "axis", "=", "3", ",", "name", "=", "'dec_cat_c3'", ")", "\n", "\n", "#Level 2", "\n", "dec_c2_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_cat_c3", ",", "name", "=", "'dec_c2_a'", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_c2_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_c2_a", ",", "name", "=", "'dec_c2_b'", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_up2", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "dec_c2_b", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "dec_dc2", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_up2", ",", "name", "=", "'dec_dc2'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_cat_c2", "=", "tf", ".", "concat", "(", "(", "dec_dc2", ",", "enc_c1_b", ")", ",", "axis", "=", "3", ",", "name", "=", "'dec_cat_c2'", ")", "\n", "\n", "# Level 1 - multiple conv ops.", "\n", "dec_c1_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_cat_c2", ",", "name", "=", "'dec_c1_a'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "seg_c1_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_c1_a", ",", "name", "=", "'seg_c1_a'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "seg_c1_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "seg_c1_a", ",", "name", "=", "'seg_c1_b'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "seg_c1_c", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "seg_c1_b", ",", "name", "=", "'seg_c1_c'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Final output layer - Logits before softmax", "\n", "seg_fin_layer", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "seg_c1_c", ",", "name", "=", "'seg_fin_layer'", ",", "num_filters", "=", "self", ".", "num_classes", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "False", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Predict Class", "\n", "y_pred", "=", "tf", ".", "nn", ".", "softmax", "(", "seg_fin_layer", ")", "\n", "y_pred_cls", "=", "tf", ".", "argmax", "(", "y_pred", ",", "axis", "=", "3", ")", "\n", "\n", "########################", "\n", "# Simple Cross Entropy (CE) between predicted labels and true labels - for only labelled data", "\n", "if", "(", "dsc_loss", "==", "1", ")", ":", "\n", "# For dice score loss function", "\n", "#without background", "\n", "            ", "seg_cost", "=", "loss", ".", "dice_loss_without_backgrnd", "(", "logits", "=", "seg_fin_layer", ",", "labels", "=", "y_l_onehot", ")", "\n", "seg_cost_wgtce", "=", "seg_cost", "\n", "#with background", "\n", "#seg_cost = dice_loss_with_backgrnd(logits=seg_fin_layer, labels=y_l_onehot)", "\n", "", "else", ":", "\n", "# For Weighted CE loss function", "\n", "            ", "seg_cost", "=", "loss", ".", "pixel_wise_cross_entropy_loss_weighted", "(", "logits", "=", "seg_fin_layer", ",", "labels", "=", "y_l_onehot", ",", "class_weights", "=", "class_weights", ")", "\n", "seg_cost_wgtce", "=", "seg_cost", "\n", "\n", "# get the var list for Segmentation Network", "\n", "", "seg_net_vars", "=", "[", "]", "\n", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "            ", "var_name", "=", "v", ".", "name", "\n", "if", "'enc_'", "in", "var_name", ":", "seg_net_vars", ".", "append", "(", "v", ")", "\n", "elif", "'dec_'", "in", "var_name", ":", "seg_net_vars", ".", "append", "(", "v", ")", "\n", "elif", "'seg_'", "in", "var_name", ":", "seg_net_vars", ".", "append", "(", "v", ")", "\n", "\n", "\n", "", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "\n", "            ", "cost_a1", "=", "-", "lamda_l1_g", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "tf", ".", "layers", ".", "flatten", "(", "flow_vec", ")", ")", ")", "+", "lamda_adv", "*", "tf", ".", "reduce_mean", "(", "g_cost", ")", "\n", "cost_a1_seg", "=", "cost_a1", "+", "lamda_dsc", "*", "tf", ".", "reduce_mean", "(", "seg_cost_wgtce", ")", "\n", "\n", "optimizer_l2_gen_seg", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learn_rate_gen", ",", "beta1", "=", "beta1_val", ")", ".", "minimize", "(", "cost_a1_seg", ",", "var_list", "=", "gen_net_vars", ")", "\n", "optimizer_l2_gen", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learn_rate_gen", ",", "beta1", "=", "beta1_val", ")", ".", "minimize", "(", "cost_a1", ",", "var_list", "=", "gen_net_vars", ")", "\n", "optimizer_l2_both_gen_unet", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learn_rate_gen", ",", "beta1", "=", "beta1_val", ")", ".", "minimize", "(", "cost_a1_seg", ",", "var_list", "=", "gen_net_vars", "+", "seg_net_vars", ")", "\n", "\n", "cost_a2", "=", "tf", ".", "reduce_mean", "(", "z_cost", ")", "\n", "optimizer_disc", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learn_rate_disc", ",", "beta1", "=", "beta1_val", ")", ".", "minimize", "(", "cost_a2", ",", "var_list", "=", "disc_net_vars", ")", "\n", "\n", "cost_a1_seg_loss", "=", "tf", ".", "reduce_mean", "(", "seg_cost", ")", "\n", "optimizer_unet_seg", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learn_rate_seg", ")", ".", "minimize", "(", "cost_a1_seg_loss", ",", "var_list", "=", "seg_net_vars", ")", "\n", "\n", "\n", "", "z_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'z_cost'", ",", "tf", ".", "reduce_mean", "(", "z_cost", ")", ")", "\n", "g_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'g_cost'", ",", "tf", ".", "reduce_mean", "(", "g_cost", ")", ")", "\n", "g_a1_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'g_cost_a1'", ",", "tf", ".", "reduce_mean", "(", "cost_a1", ")", ")", "\n", "g_a1_seg_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'g_cost_a1_seg'", ",", "tf", ".", "reduce_mean", "(", "cost_a1_seg", ")", ")", "\n", "flow_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'flow_vec_mean'", ",", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "tf", ".", "layers", ".", "flatten", "(", "flow_vec", ")", ")", ")", ")", "\n", "seg_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'seg_cost'", ",", "tf", ".", "reduce_mean", "(", "seg_cost", ")", ")", "\n", "\n", "train_summary", "=", "tf", ".", "summary", ".", "merge", "(", "[", "z_summary", ",", "g_summary", ",", "flow_summary", ",", "g_a1_summary", ",", "g_a1_seg_summary", "]", ")", "\n", "\n", "# For dice score summary", "\n", "rv_dice", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'rv_dice'", ")", "\n", "rv_dice_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'rv_val_dice'", ",", "rv_dice", ")", "\n", "myo_dice", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'myo_dice'", ")", "\n", "myo_dice_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'myo_val_dice'", ",", "myo_dice", ")", "\n", "lv_dice", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'lv_dice'", ")", "\n", "lv_dice_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'lv_val_dice'", ",", "lv_dice", ")", "\n", "\n", "mean_dice", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'mean_dice'", ")", "\n", "mean_dice_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'mean_val_dice'", ",", "mean_dice", ")", "\n", "\n", "val_dsc_summary", "=", "tf", ".", "summary", ".", "merge", "(", "[", "mean_dice_summary", ",", "rv_dice_summary", ",", "myo_dice_summary", ",", "lv_dice_summary", "]", ")", "\n", "\n", "val_totalc", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'val_totalc'", ")", "\n", "val_totalc_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "'val_totalc_'", ",", "val_totalc", ")", "\n", "val_summary", "=", "tf", ".", "summary", ".", "merge", "(", "[", "val_totalc_sum", "]", ")", "\n", "\n", "return", "{", "'x'", ":", "x", ",", "'z'", ":", "z", ",", "'y_l'", ":", "y_l", ",", "'train_phase'", ":", "train_phase", ",", "'seg_cost'", ":", "seg_cost", ",", "'x_l'", ":", "x_l", ",", "'x_unl'", ":", "x_unl", ",", "'select_mask'", ":", "select_mask", ",", "'z_cost'", ":", "cost_a2", ",", "'g_cost'", ":", "cost_a1", ",", "'g_net_cost'", ":", "cost_a1_seg", ",", "'y_pred'", ":", "y_pred", ",", "'y_pred_cls'", ":", "y_pred_cls", ",", "'train_summary'", ":", "train_summary", ",", "'y_trans'", ":", "y_trans", ",", "'z_class'", ":", "z_class", ",", "'z_pred'", ":", "z_pred", ",", "'z_pred_cls'", ":", "z_pred_cls", ",", "'optimizer_disc'", ":", "optimizer_disc", ",", "'optimizer_l2_gen'", ":", "optimizer_l2_gen", ",", "'optimizer_unet_seg'", ":", "optimizer_unet_seg", ",", "'optimizer_l2_gen_seg'", ":", "optimizer_l2_gen_seg", ",", "'seg_summary'", ":", "seg_summary", ",", "'optimizer_l2_both_gen_unet'", ":", "optimizer_l2_both_gen_unet", ",", "'flow_vec'", ":", "flow_vec", ",", "'rv_dice'", ":", "rv_dice", ",", "'myo_dice'", ":", "myo_dice", ",", "'lv_dice'", ":", "lv_dice", ",", "'mean_dice'", ":", "mean_dice", ",", "'val_dsc_summary'", ":", "val_dsc_summary", ",", "'val_totalc'", ":", "val_totalc", ",", "'val_summary'", ":", "val_summary", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.models.modelObj.intensity_transform_cgan_unet": [[627, 942], ["tensorflow.truncated_normal_initializer", "int", "int", "int", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.nn.relu", "tensorflow.reshape", "layers.upsample_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "layers.conv2d_layer", "layers.conv2d_layer", "tensorflow.concat", "layers.conv2d_layer", "layers.conv2d_layer", "layers.conv2d_layer", "tensorflow.nn.tanh", "tensorflow.add", "tensorflow.concat", "tensorflow.cond", "layers.conv2d_layer", "tensorflow.nn.leaky_relu", "layers.conv2d_layer", "tensorflow.nn.leaky_relu", "layers.conv2d_layer", "tensorflow.nn.leaky_relu", "layers.conv2d_layer", "tensorflow.nn.leaky_relu", "layers.conv2d_layer", "tensorflow.nn.leaky_relu", "tensorflow.contrib.layers.flatten", "tensorflow.nn.leaky_relu", "tensorflow.nn.leaky_relu", "numpy.arange", "tensorflow.gather", "numpy.arange", "tensorflow.gather", "models.modelObj.discriminator_loss", "models.modelObj.generator_loss", "tensorflow.trainable_variables", "layers.conv2d_layer", "layers.conv2d_layer", "layers.max_pool_layer2d", "layers.conv2d_layer", "layers.conv2d_layer", "layers.max_pool_layer2d", "layers.conv2d_layer", "layers.conv2d_layer", "layers.max_pool_layer2d", "layers.conv2d_layer", "layers.conv2d_layer", "layers.max_pool_layer2d", "layers.conv2d_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "tensorflow.concat", "layers.conv2d_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "tensorflow.concat", "layers.conv2d_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "tensorflow.concat", "layers.conv2d_layer", "layers.conv2d_layer", "layers.upsample_layer", "layers.conv2d_layer", "tensorflow.concat", "layers.conv2d_layer", "layers.conv2d_layer", "layers.conv2d_layer", "layers.conv2d_layer", "layers.conv2d_layer", "tensorflow.nn.softmax", "tensorflow.argmax", "tensorflow.trainable_variables", "tensorflow.get_collection", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.placeholder", "tensorflow.summary.scalar", "tensorflow.summary.merge", "tensorflow.constant", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.one_hot", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "loss.dice_loss_without_backgrnd", "loss.pixel_wise_cross_entropy_loss_weighted", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "disc_net_vars.append", "seg_net_vars.append", "tensorflow.abs", "tensorflow.constant", "disc_net_vars.append", "seg_net_vars.append", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.layers.flatten", "gen_net_vars.append", "seg_net_vars.append", "tensorflow.abs", "gen_net_vars.append", "gen_net_vars.append"], "methods", ["home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.models.modelObj.discriminator_loss", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.models.modelObj.generator_loss", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.max_pool_layer2d", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.max_pool_layer2d", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.max_pool_layer2d", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.max_pool_layer2d", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.losses.lossObj.dice_loss_without_backgrnd", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.losses.lossObj.pixel_wise_cross_entropy_loss_weighted"], ["", "def", "intensity_transform_cgan_unet", "(", "self", ",", "learn_rate_gen", "=", "0.0001", ",", "learn_rate_disc", "=", "0.0001", ",", "z_lat_dim", "=", "100", ",", "lat_dim", "=", "128", ",", "beta1_val", "=", "0.9", ",", "gan_type", "=", "'gan'", ",", "ra_en", "=", "True", ",", "learn_rate_seg", "=", "0.001", ",", "dsc_loss", "=", "1", ",", "en_1hot", "=", "0", ",", "lamda_dsc", "=", "1", ",", "lamda_adv", "=", "1", ",", "lamda_l1_i", "=", "0.001", ")", ":", "\n", "\n", "        ", "no_filters", "=", "[", "1", ",", "16", ",", "32", ",", "64", ",", "128", ",", "256", "]", "\n", "\n", "if", "(", "self", ".", "num_classes", "==", "2", ")", ":", "\n", "            ", "class_weights", "=", "tf", ".", "constant", "(", "[", "[", "0.05", ",", "0.95", "]", "]", ",", "name", "=", "'class_weights'", ")", "\n", "", "elif", "(", "self", ".", "num_classes", "==", "3", ")", ":", "\n", "            ", "class_weights", "=", "tf", ".", "constant", "(", "[", "[", "0.05", ",", "0.5", ",", "0.45", "]", "]", ",", "name", "=", "'class_weights'", ")", "\n", "", "elif", "(", "self", ".", "num_classes", "==", "4", ")", ":", "\n", "            ", "class_weights", "=", "tf", ".", "constant", "(", "[", "[", "0.1", ",", "0.3", ",", "0.3", ",", "0.3", "]", "]", ",", "name", "=", "'class_weights'", ")", "\n", "\n", "", "std_init", "=", "0.01", "\n", "SEED", "=", "1", "\n", "acti", "=", "'xavier'", "\n", "intl", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "std_init", ",", "seed", "=", "SEED", ")", "\n", "\n", "hid_dim", "=", "int", "(", "self", ".", "img_size_x", "*", "self", ".", "img_size_y", "*", "no_filters", "[", "4", "]", "/", "(", "32", "*", "32", ")", ")", "\n", "latent_dim", "=", "lat_dim", "# 128 #or 512 / 128", "\n", "\n", "z_hid_dim", "=", "int", "(", "self", ".", "img_size_x", "*", "self", ".", "img_size_y", "*", "no_filters", "[", "4", "]", "/", "(", "32", "*", "32", ")", ")", "\n", "dim_x", "=", "int", "(", "self", ".", "img_size_x", "/", "32", ")", "\n", "\n", "# Generator - FCN variables", "\n", "gen_c1_weights", "=", "tf", ".", "get_variable", "(", "name", "=", "\"gen_c1_weights\"", ",", "shape", "=", "[", "z_lat_dim", ",", "z_hid_dim", "]", ",", "initializer", "=", "intl", ")", "\n", "gen_c1_biases", "=", "tf", ".", "get_variable", "(", "name", "=", "\"gen_c1_biases\"", ",", "shape", "=", "[", "z_hid_dim", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "value", "=", "0", ")", ")", "\n", "\n", "# Discriminator - FCN variables", "\n", "fcn_c1_weights", "=", "tf", ".", "get_variable", "(", "name", "=", "\"fcn_c1_weights\"", ",", "shape", "=", "[", "hid_dim", ",", "latent_dim", "]", ",", "initializer", "=", "intl", ")", "\n", "fcn_c1_biases", "=", "tf", ".", "get_variable", "(", "name", "=", "\"fcn_c1_biases\"", ",", "shape", "=", "[", "latent_dim", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "value", "=", "0", ")", ")", "\n", "fcn_c2_weights", "=", "tf", ".", "get_variable", "(", "name", "=", "\"fcn_c2_weights\"", ",", "shape", "=", "[", "latent_dim", ",", "latent_dim", "]", ",", "initializer", "=", "intl", ")", "\n", "fcn_c2_biases", "=", "tf", ".", "get_variable", "(", "name", "=", "\"fcn_c2_biases\"", ",", "shape", "=", "[", "latent_dim", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "value", "=", "0", ")", ")", "\n", "fcn_c3_weights", "=", "tf", ".", "get_variable", "(", "name", "=", "\"fcn_c3_weights\"", ",", "shape", "=", "[", "latent_dim", ",", "1", "]", ",", "initializer", "=", "intl", ")", "\n", "fcn_c3_biases", "=", "tf", ".", "get_variable", "(", "name", "=", "\"fcn_c3_biases\"", ",", "shape", "=", "[", "1", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "value", "=", "0", ")", ")", "\n", "\n", "num_channels", "=", "no_filters", "[", "0", "]", "\n", "# Placeholders", "\n", "# input to the network", "\n", "z", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "self", ".", "batch_size", ",", "z_lat_dim", "]", ",", "name", "=", "'z'", ")", "\n", "x", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", ",", "num_channels", "]", ",", "name", "=", "'x'", ")", "\n", "x_unl", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", ",", "num_channels", "]", ",", "name", "=", "'x_unl'", ")", "\n", "if", "(", "en_1hot", "==", "1", ")", ":", "\n", "            ", "y_l", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", ",", "self", ".", "num_classes", "]", ",", "name", "=", "'y_l'", ")", "\n", "", "else", ":", "\n", "            ", "y_l", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", "]", ",", "name", "=", "'y_l'", ")", "\n", "", "select_mask", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "name", "=", "'select_mask'", ")", "\n", "train_phase", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "name", "=", "'train_phase'", ")", "\n", "if", "(", "en_1hot", "==", "0", ")", ":", "\n", "            ", "y_l_onehot", "=", "tf", ".", "one_hot", "(", "y_l", ",", "depth", "=", "self", ".", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "y_l_onehot", "=", "y_l", "\n", "\n", "############################################", "\n", "# Generator Network", "\n", "############################################", "\n", "# Dense layer + Reshape to down sampled image dimensions", "\n", "", "gen_fcn_c1", "=", "tf", ".", "matmul", "(", "z", ",", "gen_c1_weights", ")", "+", "gen_c1_biases", "\n", "gen_fcn_relu_c1", "=", "tf", ".", "nn", ".", "relu", "(", "gen_fcn_c1", ")", "\n", "gen_fcn_reshaped", "=", "tf", ".", "reshape", "(", "gen_fcn_relu_c1", ",", "[", "-", "1", ",", "dim_x", ",", "dim_x", ",", "no_filters", "[", "4", "]", "]", ")", "\n", "\n", "# Level 5 - Upsample + Conv. op", "\n", "fs_de", "=", "2", "\n", "scale_val", "=", "2", "\n", "gen_up5", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "gen_fcn_reshaped", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "gen_c5", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "gen_up5", ",", "name", "=", "'gen_c5'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Level 4", "\n", "gen_up4", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "gen_c5", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "gen_c4", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "gen_up4", ",", "name", "=", "'gen_c4'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Level 3", "\n", "gen_up3", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "gen_c4", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "gen_c3", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "gen_up3", ",", "name", "=", "'gen_c3'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Level 2", "\n", "gen_up2", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "gen_c3", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "gen_c2", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "gen_up2", ",", "name", "=", "'gen_c2'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Level 1", "\n", "gen_up1", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "gen_c2", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "gen_c1", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "gen_up1", ",", "name", "=", "'gen_c1'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "False", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "\n", "# Conv. ops on input image", "\n", "conv_1a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "x", ",", "name", "=", "'conv_1a'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "conv_1b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "conv_1a", ",", "name", "=", "'conv_1b'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Concatenate features obtained by conv. ops on image and on 'z'", "\n", "gen_cat", "=", "tf", ".", "concat", "(", "(", "gen_c1", ",", "conv_1b", ")", ",", "axis", "=", "3", ")", "\n", "\n", "# More Conv. ops on concatenated feature maps", "\n", "conv_1c", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "gen_cat", ",", "name", "=", "'conv_1c'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "conv_1d", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "conv_1c", ",", "name", "=", "'conv_1d'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "#conv_1e = layers.conv2d_layer(ip_layer=conv_1d,name='conv_1e',num_filters=2, use_relu=False, use_batch_norm=False, training_phase=train_phase)", "\n", "\n", "# intensity maps to add to transformed image", "\n", "int_c1", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "conv_1d", ",", "name", "=", "'int_c1'", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "num_filters", "=", "1", ",", "use_bias", "=", "False", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "False", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# tanh activation function to restrict the values of delta I (additive transform)", "\n", "int_c1", "=", "tf", ".", "nn", ".", "tanh", "(", "int_c1", ")", "\n", "\n", "# add intensity transform (int_c1) to the input image to yield intensity transformed image", "\n", "y_int", "=", "tf", ".", "add", "(", "x", ",", "int_c1", ")", "\n", "\n", "############################################", "\n", "#Discriminator Network", "\n", "############################################", "\n", "\n", "cat_disc_c1", "=", "tf", ".", "concat", "(", "(", "y_int", ",", "x_unl", ")", ",", "axis", "=", "0", ",", "name", "=", "'cat_disc_c1'", ")", "\n", "# Choose between concate or true+gen images or gen images", "\n", "cat_disc_c1", "=", "tf", ".", "cond", "(", "select_mask", ",", "lambda", ":", "cat_disc_c1", ",", "lambda", ":", "y_int", ")", "\n", "\n", "# DISC Net Architecutre", "\n", "disc_c1", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "cat_disc_c1", ",", "name", "=", "'disc_c1'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "disc_c1", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "disc_c1", ",", "alpha", "=", "0.2", ")", "\n", "\n", "disc_c2", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "disc_c1", ",", "name", "=", "'disc_c2'", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "disc_c2", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "disc_c2", ",", "alpha", "=", "0.2", ")", "\n", "\n", "disc_c3", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "disc_c2", ",", "name", "=", "'disc_c3'", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "disc_c3", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "disc_c3", ",", "alpha", "=", "0.2", ")", "\n", "\n", "disc_c4", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "disc_c3", ",", "name", "=", "'disc_c4'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "disc_c4", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "disc_c4", ",", "alpha", "=", "0.2", ")", "\n", "\n", "disc_c5", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "disc_c4", ",", "name", "=", "'disc_c5'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "kernel_size", "=", "(", "5", ",", "5", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "disc_c5_pool", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "disc_c5", ",", "alpha", "=", "0.2", ")", "\n", "\n", "# Flat conv for FCN", "\n", "flat_conv", "=", "tf", ".", "contrib", ".", "layers", ".", "flatten", "(", "disc_c5_pool", ")", "\n", "\n", "# FCN + Relu - x2", "\n", "z_fcn_c1", "=", "tf", ".", "matmul", "(", "flat_conv", ",", "fcn_c1_weights", ")", "+", "fcn_c1_biases", "\n", "z_fcn_relu_c1", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "z_fcn_c1", ")", "\n", "\n", "z_fcn_c2", "=", "tf", ".", "matmul", "(", "z_fcn_relu_c1", ",", "fcn_c2_weights", ")", "+", "fcn_c2_biases", "\n", "z_fcn_relu_c2", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "z_fcn_c2", ")", "\n", "\n", "# 1 fully connected layer to determine input images into real / fake categories", "\n", "z_class", "=", "tf", ".", "matmul", "(", "z_fcn_relu_c2", ",", "fcn_c3_weights", ")", "+", "fcn_c3_biases", "\n", "\n", "z_pred", "=", "z_class", "\n", "z_pred_cls", "=", "z_pred", "\n", "\n", "fake_indices", "=", "np", ".", "arange", "(", "0", ",", "self", ".", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "fake", "=", "tf", ".", "gather", "(", "z_class", ",", "fake_indices", ")", "\n", "real_indices", "=", "np", ".", "arange", "(", "self", ".", "batch_size", ",", "2", "*", "self", ".", "batch_size", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "real", "=", "tf", ".", "gather", "(", "z_class", ",", "real_indices", ")", "\n", "\n", "# Discriminator loss", "\n", "z_cost", "=", "self", ".", "discriminator_loss", "(", "Ra", "=", "ra_en", ",", "loss_func", "=", "gan_type", ",", "real", "=", "real", ",", "fake", "=", "fake", ")", "\n", "# Generator loss", "\n", "g_cost", "=", "self", ".", "generator_loss", "(", "Ra", "=", "ra_en", ",", "loss_func", "=", "gan_type", ",", "real", "=", "real", ",", "fake", "=", "fake", ")", "\n", "\n", "# divide the var list into Generator Network and Discriminator Net", "\n", "gen_net_vars", "=", "[", "]", "\n", "disc_net_vars", "=", "[", "]", "\n", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "            ", "var_name", "=", "v", ".", "name", "\n", "if", "'disc_'", "in", "var_name", ":", "disc_net_vars", ".", "append", "(", "v", ")", "\n", "elif", "'fcn_'", "in", "var_name", ":", "disc_net_vars", ".", "append", "(", "v", ")", "\n", "elif", "'gen_'", "in", "var_name", ":", "gen_net_vars", ".", "append", "(", "v", ")", "\n", "elif", "'conv_'", "in", "var_name", ":", "gen_net_vars", ".", "append", "(", "v", ")", "\n", "elif", "(", "'int_'", "in", "var_name", ")", ":", "gen_net_vars", ".", "append", "(", "v", ")", "\n", "\n", "############################################", "\n", "# U-Net Network", "\n", "############################################", "\n", "# Encoder - Downsampling Path", "\n", "############################################", "\n", "# 2x 3x3 conv and 1 maxpool", "\n", "# Level 1", "\n", "", "enc_c1_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "x", ",", "name", "=", "'enc_c1_a'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c1_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c1_a", ",", "name", "=", "'enc_c1_b'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c1_pool", "=", "layers", ".", "max_pool_layer2d", "(", "enc_c1_b", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ",", "name", "=", "'enc_c1_pool'", ")", "\n", "\n", "# Level 2", "\n", "enc_c2_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c1_pool", ",", "name", "=", "'enc_c2_a'", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c2_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c2_a", ",", "name", "=", "'enc_c2_b'", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c2_pool", "=", "layers", ".", "max_pool_layer2d", "(", "enc_c2_b", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ",", "name", "=", "'enc_c2_pool'", ")", "\n", "\n", "# Level 3", "\n", "enc_c3_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c2_pool", ",", "name", "=", "'enc_c3_a'", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c3_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c3_a", ",", "name", "=", "'enc_c3_b'", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c3_pool", "=", "layers", ".", "max_pool_layer2d", "(", "enc_c3_b", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ",", "name", "=", "'enc_c3_pool'", ")", "\n", "\n", "# Level 4", "\n", "enc_c4_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c3_pool", ",", "name", "=", "'enc_c4_a'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c4_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c4_a", ",", "name", "=", "'enc_c4_b'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c4_pool", "=", "layers", ".", "max_pool_layer2d", "(", "enc_c4_b", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ",", "name", "=", "'enc_c4_pool'", ")", "\n", "\n", "# Level 5 - 2x Conv", "\n", "enc_c5_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c4_pool", ",", "name", "=", "'enc_c5_a'", ",", "num_filters", "=", "no_filters", "[", "5", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "enc_c5_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "enc_c5_a", ",", "name", "=", "'enc_c5_b'", ",", "num_filters", "=", "no_filters", "[", "5", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "########################", "\n", "# Decoder - Upsampling Path", "\n", "########################", "\n", "# Upsample + 2x2 conv to half the no. of feature channels + SKIP connection (concate the conv. layers)", "\n", "# Level 5 - 1 upsampling layer + 1 conv op. + skip connection + 2x conv op.", "\n", "scale_val", "=", "2", "\n", "dec_up5", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "enc_c5_b", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "dec_dc5", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_up5", ",", "name", "=", "'dec_dc5'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_cat_c5", "=", "tf", ".", "concat", "(", "(", "dec_dc5", ",", "enc_c4_b", ")", ",", "axis", "=", "3", ",", "name", "=", "'dec_cat_c5'", ")", "\n", "\n", "# Level 4", "\n", "dec_c4_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_cat_c5", ",", "name", "=", "'dec_c4_a'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_c4_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_c4_a", ",", "name", "=", "'dec_c4_b'", ",", "num_filters", "=", "no_filters", "[", "4", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_up4", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "dec_c4_b", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "dec_dc4", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_up4", ",", "name", "=", "'dec_dc4'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_cat_c4", "=", "tf", ".", "concat", "(", "(", "dec_dc4", ",", "enc_c3_b", ")", ",", "axis", "=", "3", ",", "name", "=", "'dec_cat_c4'", ")", "\n", "\n", "# Level 3 -", "\n", "dec_c3_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_cat_c4", ",", "name", "=", "'dec_c3_a'", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_c3_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_c3_a", ",", "name", "=", "'dec_c3_b'", ",", "num_filters", "=", "no_filters", "[", "3", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_up3", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "dec_c3_b", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "dec_dc3", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_up3", ",", "name", "=", "'dec_dc3'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_cat_c3", "=", "tf", ".", "concat", "(", "(", "dec_dc3", ",", "enc_c2_b", ")", ",", "axis", "=", "3", ",", "name", "=", "'dec_cat_c3'", ")", "\n", "\n", "# Level 2 -", "\n", "dec_c2_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_cat_c3", ",", "name", "=", "'dec_c2_a'", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_c2_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_c2_a", ",", "name", "=", "'dec_c2_b'", ",", "num_filters", "=", "no_filters", "[", "2", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_up2", "=", "layers", ".", "upsample_layer", "(", "ip_layer", "=", "dec_c2_b", ",", "method", "=", "self", ".", "interp_val", ",", "scale_factor", "=", "scale_val", ")", "\n", "dec_dc2", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_up2", ",", "name", "=", "'dec_dc2'", ",", "kernel_size", "=", "(", "fs_de", ",", "fs_de", ")", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "dec_cat_c2", "=", "tf", ".", "concat", "(", "(", "dec_dc2", ",", "enc_c1_b", ")", ",", "axis", "=", "3", ",", "name", "=", "'dec_cat_c2'", ")", "\n", "\n", "# Level 1 - multiple conv ops.", "\n", "dec_c1_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_cat_c2", ",", "name", "=", "'dec_c1_a'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "seg_c1_a", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "dec_c1_a", ",", "name", "=", "'seg_c1_a'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "seg_c1_b", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "seg_c1_a", ",", "name", "=", "'seg_c1_b'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "seg_c1_c", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "seg_c1_b", ",", "name", "=", "'seg_c1_c'", ",", "num_filters", "=", "no_filters", "[", "1", "]", ",", "use_relu", "=", "True", ",", "use_batch_norm", "=", "True", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Final output layer - Logits before softmax", "\n", "seg_fin_layer", "=", "layers", ".", "conv2d_layer", "(", "ip_layer", "=", "seg_c1_c", ",", "name", "=", "'seg_fin_layer'", ",", "num_filters", "=", "self", ".", "num_classes", ",", "use_relu", "=", "False", ",", "use_batch_norm", "=", "False", ",", "training_phase", "=", "train_phase", ")", "\n", "\n", "# Predict Class", "\n", "y_pred", "=", "tf", ".", "nn", ".", "softmax", "(", "seg_fin_layer", ")", "\n", "y_pred_cls", "=", "tf", ".", "argmax", "(", "y_pred", ",", "axis", "=", "3", ")", "\n", "\n", "########################", "\n", "# Simple Cross Entropy (CE) between predicted labels and true labels - for only labelled data", "\n", "if", "(", "dsc_loss", "==", "1", ")", ":", "\n", "# For dice score loss function", "\n", "#without background", "\n", "            ", "seg_cost", "=", "loss", ".", "dice_loss_without_backgrnd", "(", "logits", "=", "seg_fin_layer", ",", "labels", "=", "y_l_onehot", ")", "\n", "seg_cost_wgtce", "=", "seg_cost", "\n", "#with background", "\n", "#seg_cost = dice_loss_with_backgrnd(logits=seg_fin_layer, labels=y_l_onehot)", "\n", "", "else", ":", "\n", "# For Weighted CE loss function", "\n", "            ", "seg_cost", "=", "loss", ".", "pixel_wise_cross_entropy_loss_weighted", "(", "logits", "=", "seg_fin_layer", ",", "labels", "=", "y_l_onehot", ",", "class_weights", "=", "class_weights", ")", "\n", "seg_cost_wgtce", "=", "seg_cost", "\n", "\n", "# get the var list for Segmentation Network", "\n", "", "seg_net_vars", "=", "[", "]", "\n", "for", "v", "in", "tf", ".", "trainable_variables", "(", ")", ":", "\n", "            ", "var_name", "=", "v", ".", "name", "\n", "if", "'enc_'", "in", "var_name", ":", "seg_net_vars", ".", "append", "(", "v", ")", "\n", "elif", "'dec_'", "in", "var_name", ":", "seg_net_vars", ".", "append", "(", "v", ")", "\n", "elif", "'seg_'", "in", "var_name", ":", "seg_net_vars", ".", "append", "(", "v", ")", "\n", "\n", "\n", "", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "            ", "cost_a1", "=", "-", "lamda_l1_i", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "int_c1", ")", ")", "+", "lamda_adv", "*", "tf", ".", "reduce_mean", "(", "g_cost", ")", "\n", "cost_a1_seg", "=", "cost_a1", "+", "lamda_dsc", "*", "tf", ".", "reduce_mean", "(", "seg_cost_wgtce", ")", "\n", "\n", "optimizer_l2_gen", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learn_rate_gen", ",", "beta1", "=", "beta1_val", ")", ".", "minimize", "(", "cost_a1", ",", "var_list", "=", "gen_net_vars", ")", "\n", "optimizer_l2_gen_seg", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learn_rate_gen", ",", "beta1", "=", "beta1_val", ")", ".", "minimize", "(", "cost_a1_seg", ",", "var_list", "=", "gen_net_vars", ")", "\n", "optimizer_l2_both_gen_unet", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learn_rate_gen", ",", "beta1", "=", "beta1_val", ")", ".", "minimize", "(", "cost_a1_seg", ",", "var_list", "=", "gen_net_vars", "+", "seg_net_vars", ")", "\n", "\n", "cost_a2", "=", "tf", ".", "reduce_mean", "(", "z_cost", ")", "\n", "optimizer_disc", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learn_rate_disc", ",", "beta1", "=", "beta1_val", ")", ".", "minimize", "(", "cost_a2", ",", "var_list", "=", "disc_net_vars", ")", "\n", "\n", "cost_a1_seg_loss", "=", "tf", ".", "reduce_mean", "(", "seg_cost", ")", "\n", "optimizer_unet_seg", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learn_rate_seg", ")", ".", "minimize", "(", "cost_a1_seg_loss", ",", "var_list", "=", "seg_net_vars", ")", "\n", "\n", "\n", "", "z_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'z_cost'", ",", "tf", ".", "reduce_mean", "(", "z_cost", ")", ")", "\n", "g_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'g_cost'", ",", "tf", ".", "reduce_mean", "(", "g_cost", ")", ")", "\n", "g_a1_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'g_cost_a1'", ",", "tf", ".", "reduce_mean", "(", "cost_a1", ")", ")", "\n", "g_a1_seg_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'g_cost_a1_seg'", ",", "tf", ".", "reduce_mean", "(", "cost_a1_seg", ")", ")", "\n", "int_c1_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'int_c1'", ",", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "tf", ".", "layers", ".", "flatten", "(", "int_c1", ")", ")", ")", ")", "\n", "seg_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'seg_cost'", ",", "tf", ".", "reduce_mean", "(", "seg_cost", ")", ")", "\n", "\n", "#train_summary = tf.summary.merge([z_summary,g_summary,flow_summary])", "\n", "train_summary", "=", "tf", ".", "summary", ".", "merge", "(", "[", "z_summary", ",", "g_summary", ",", "int_c1_summary", ",", "g_a1_summary", ",", "g_a1_seg_summary", "]", ")", "\n", "\n", "# For dice score summary", "\n", "rv_dice", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'rv_dice'", ")", "\n", "rv_dice_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'rv_val_dice'", ",", "rv_dice", ")", "\n", "myo_dice", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'myo_dice'", ")", "\n", "myo_dice_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'myo_val_dice'", ",", "myo_dice", ")", "\n", "lv_dice", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'lv_dice'", ")", "\n", "lv_dice_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'lv_val_dice'", ",", "lv_dice", ")", "\n", "\n", "mean_dice", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'mean_dice'", ")", "\n", "mean_dice_summary", "=", "tf", ".", "summary", ".", "scalar", "(", "'mean_val_dice'", ",", "mean_dice", ")", "\n", "\n", "val_dsc_summary", "=", "tf", ".", "summary", ".", "merge", "(", "[", "mean_dice_summary", ",", "rv_dice_summary", ",", "myo_dice_summary", ",", "lv_dice_summary", "]", ")", "\n", "val_totalc", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "]", ",", "name", "=", "'val_totalc'", ")", "\n", "val_totalc_sum", "=", "tf", ".", "summary", ".", "scalar", "(", "'val_totalc_'", ",", "val_totalc", ")", "\n", "val_summary", "=", "tf", ".", "summary", ".", "merge", "(", "[", "val_totalc_sum", "]", ")", "\n", "\n", "\n", "return", "{", "'x'", ":", "x", ",", "'z'", ":", "z", ",", "'y_l'", ":", "y_l", ",", "'train_phase'", ":", "train_phase", ",", "'seg_cost'", ":", "seg_cost", ",", "'x_unl'", ":", "x_unl", ",", "'select_mask'", ":", "select_mask", ",", "'z_cost'", ":", "cost_a2", ",", "'g_cost'", ":", "cost_a1", ",", "'g_net_cost'", ":", "cost_a1_seg", ",", "'y_pred'", ":", "y_pred", ",", "'y_pred_cls'", ":", "y_pred_cls", ",", "'train_summary'", ":", "train_summary", ",", "'z_class'", ":", "z_class", ",", "'z_pred'", ":", "z_pred", ",", "'z_pred_cls'", ":", "z_pred_cls", ",", "'optimizer_disc'", ":", "optimizer_disc", ",", "'optimizer_l2_gen'", ":", "optimizer_l2_gen", ",", "'optimizer_unet_seg'", ":", "optimizer_unet_seg", ",", "'optimizer_l2_gen_seg'", ":", "optimizer_l2_gen_seg", ",", "'seg_summary'", ":", "seg_summary", ",", "'optimizer_l2_both_gen_unet'", ":", "optimizer_l2_both_gen_unet", ",", "'int_c1'", ":", "int_c1", ",", "'y_int'", ":", "y_int", ",", "'rv_dice'", ":", "rv_dice", ",", "'myo_dice'", ":", "myo_dice", ",", "'lv_dice'", ":", "lv_dice", ",", "'mean_dice'", ":", "mean_dice", ",", "'val_dsc_summary'", ":", "val_dsc_summary", ",", "'val_totalc'", ":", "val_totalc", ",", "'val_summary'", ":", "val_summary", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.__init__": [[9, 11], ["print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "print", "(", "'layers init'", ")", "\n", "#self.batch_size=20", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.conv2d_layer": [[14, 72], ["ip_layer.get_shape().as_list", "tensorflow.variable_scope", "layers_bn.layersObj.get_weight_variable", "str", "layers_bn.layersObj.get_bias_variable", "tensorflow.nn.atrous_conv2d", "tensorflow.nn.bias_add", "layers_bn.layersObj.batch_norm_layer", "tensorflow.nn.relu", "ip_layer.get_shape", "tensorflow.nn.conv2d", "tensorflow.nn.conv2d"], "methods", ["home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.get_weight_variable", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.get_bias_variable", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.batch_norm_layer"], ["", "def", "conv2d_layer", "(", "self", ",", "ip_layer", ",", "# The previous/input layer.", "\n", "name", ",", "# Name of the conv layer", "\n", "bias_init", "=", "0", ",", "# Constant bias value for initialization", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "# Width and height of each filter.", "\n", "strides", "=", "(", "1", ",", "1", ")", ",", "# stride value of the filter", "\n", "num_filters", "=", "32", ",", "# Number of output filters.", "\n", "padding", "=", "'SAME'", ",", "# Padding - SAME for zero padding - i/p and o/p of conv. have same dimensions", "\n", "use_bias", "=", "True", ",", "#to use bias or not", "\n", "use_relu", "=", "True", ",", "# Use relu as activation function", "\n", "use_batch_norm", "=", "False", ",", "# use batch norm on layer before passing to activation function", "\n", "use_conv_stride", "=", "False", ",", "# Use 2x2 max-pooling - obtained by convolution with stride 2.", "\n", "training_phase", "=", "True", ",", "# Training Phase", "\n", "scope_name", "=", "None", ",", "# scope name for batch norm", "\n", "acti_type", "=", "'xavier'", ",", "# weight and bias variable initializer type", "\n", "dilated_conv", "=", "False", ",", "# dilated convolution enbale/disable", "\n", "dilation_factor", "=", "1", ")", ":", "# dilation factor", "\n", "        ", "'''\n        Standard 2D convolutional layer\n        '''", "\n", "# Num. channels in prev. layer.", "\n", "prev_layer_no_filters", "=", "ip_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "\n", "weight_shape", "=", "[", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ",", "prev_layer_no_filters", ",", "num_filters", "]", "\n", "bias_shape", "=", "[", "num_filters", "]", "\n", "\n", "strides_augm", "=", "[", "1", ",", "strides", "[", "0", "]", ",", "strides", "[", "1", "]", ",", "1", "]", "\n", "\n", "if", "(", "scope_name", "==", "None", ")", ":", "\n", "            ", "scope_name", "=", "str", "(", "name", ")", "+", "'_bn'", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "\n", "            ", "weights", "=", "self", ".", "get_weight_variable", "(", "weight_shape", ",", "name", "=", "'W'", ",", "acti_type", "=", "acti_type", ")", "\n", "if", "(", "use_bias", "==", "True", ")", ":", "\n", "                ", "biases", "=", "self", ".", "get_bias_variable", "(", "bias_shape", ",", "name", "=", "'b'", ",", "init_bias_val", "=", "bias_init", ")", "\n", "\n", "", "if", "(", "dilated_conv", "==", "True", ")", ":", "\n", "                ", "op_layer", "=", "tf", ".", "nn", ".", "atrous_conv2d", "(", "ip_layer", ",", "filters", "=", "weights", ",", "rate", "=", "dilation_factor", ",", "padding", "=", "padding", ",", "name", "=", "name", ")", "\n", "", "else", ":", "\n", "                ", "if", "(", "use_conv_stride", "==", "False", ")", ":", "\n", "                    ", "op_layer", "=", "tf", ".", "nn", ".", "conv2d", "(", "ip_layer", ",", "filter", "=", "weights", ",", "strides", "=", "strides_augm", ",", "padding", "=", "padding", ")", "\n", "", "else", ":", "\n", "                    ", "op_layer", "=", "tf", ".", "nn", ".", "conv2d", "(", "input", "=", "ip_layer", ",", "filter", "=", "weights", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "padding", ")", "\n", "\n", "#Add bias", "\n", "", "", "if", "(", "use_bias", "==", "True", ")", ":", "\n", "                ", "op_layer", "=", "tf", ".", "nn", ".", "bias_add", "(", "op_layer", ",", "biases", ")", "\n", "\n", "", "if", "(", "use_batch_norm", "==", "True", ")", ":", "\n", "                ", "op_layer", "=", "self", ".", "batch_norm_layer", "(", "ip_layer", "=", "op_layer", ",", "name", "=", "scope_name", ",", "training", "=", "training_phase", ")", "\n", "", "if", "(", "use_relu", "==", "True", ")", ":", "\n", "                ", "op_layer", "=", "tf", ".", "nn", ".", "relu", "(", "op_layer", ")", "\n", "\n", "# Add Tensorboard summaries", "\n", "#_add_summaries(op_layer, weights, biases)", "\n", "\n", "#return op_layer,weights,biases", "\n", "", "", "return", "op_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.deconv2d_layer": [[73, 137], ["ip_layer.get_shape().as_list", "tensorflow.shape", "tensorflow.stack", "tensorflow.variable_scope", "layers_bn.layersObj.get_weight_variable", "tensorflow.nn.conv2d_transpose", "str", "layers_bn.layersObj.get_bias_variable", "tensorflow.nn.bias_add", "layers_bn.layersObj.batch_norm_layer", "tensorflow.nn.relu", "ip_layer.get_shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.get_weight_variable", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.get_bias_variable", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.batch_norm_layer"], ["", "def", "deconv2d_layer", "(", "self", ",", "ip_layer", ",", "# The previous layer.", "\n", "name", ",", "# Name of the conv layer", "\n", "bias_init", "=", "0", ",", "# Constant bias value for initialization", "\n", "kernel_size", "=", "(", "3", ",", "3", ")", ",", "# Width and height of each filter.", "\n", "strides", "=", "(", "2", ",", "2", ")", ",", "# stride value of the filter", "\n", "num_filters", "=", "32", ",", "# Number of filters.", "\n", "padding", "=", "'SAME'", ",", "# Padding - SAME for zero padding - i/p and o/p of conv. have same dimensions", "\n", "output_shape", "=", "None", ",", "# output shape of deconv. layer", "\n", "use_bias", "=", "True", ",", "# to use bias or not", "\n", "use_relu", "=", "True", ",", "# Use relu as activation function", "\n", "use_batch_norm", "=", "False", ",", "# use batch norm on layer before passing to activation function", "\n", "training_phase", "=", "True", ",", "# Training Phase", "\n", "scope_name", "=", "None", ",", "#scope name for batch norm", "\n", "acti_type", "=", "'xavier'", ",", "dim_list", "=", "None", ")", ":", "#scope name for batch norm", "\n", "\n", "        ", "'''\n        Standard 2D transpose (also known as deconvolution) layer. Default behaviour upsamples the input by a factor of 2.\n        '''", "\n", "# Shape of prev. layer (aka. input layer)", "\n", "if", "(", "dim_list", "==", "None", ")", ":", "\n", "            ", "prev_layer_shape", "=", "ip_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "", "else", ":", "\n", "            ", "prev_layer_shape", "=", "dim_list", "\n", "", "batch_size_val", "=", "tf", ".", "shape", "(", "ip_layer", ")", "[", "0", "]", "\n", "\n", "if", "output_shape", "is", "None", ":", "\n", "            ", "output_shape", "=", "tf", ".", "stack", "(", "[", "tf", ".", "shape", "(", "ip_layer", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "ip_layer", ")", "[", "1", "]", "*", "strides", "[", "0", "]", ",", "tf", ".", "shape", "(", "ip_layer", ")", "[", "2", "]", "*", "strides", "[", "1", "]", ",", "num_filters", "]", ")", "\n", "\n", "# Num. channels in prev. layer.", "\n", "", "prev_layer_no_filters", "=", "prev_layer_shape", "[", "3", "]", "\n", "\n", "weight_shape", "=", "[", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ",", "num_filters", ",", "prev_layer_no_filters", "]", "\n", "bias_shape", "=", "[", "num_filters", "]", "\n", "strides_augm", "=", "[", "1", ",", "strides", "[", "0", "]", ",", "strides", "[", "1", "]", ",", "1", "]", "\n", "\n", "if", "(", "scope_name", "==", "None", ")", ":", "\n", "            ", "scope_name", "=", "str", "(", "name", ")", "+", "'_bn'", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "\n", "            ", "weights", "=", "self", ".", "get_weight_variable", "(", "weight_shape", ",", "name", "=", "'W'", ",", "acti_type", "=", "acti_type", ")", "\n", "if", "(", "use_bias", "==", "True", ")", ":", "\n", "                ", "biases", "=", "self", ".", "get_bias_variable", "(", "bias_shape", ",", "name", "=", "'b'", ",", "init_bias_val", "=", "bias_init", ")", "\n", "\n", "", "op_layer", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "ip_layer", ",", "\n", "filter", "=", "weights", ",", "\n", "output_shape", "=", "output_shape", ",", "\n", "strides", "=", "strides_augm", ",", "\n", "padding", "=", "padding", ")", "\n", "\n", "#Add bias", "\n", "if", "(", "use_bias", "==", "True", ")", ":", "\n", "                ", "op_layer", "=", "tf", ".", "nn", ".", "bias_add", "(", "op_layer", ",", "biases", ")", "\n", "\n", "", "if", "(", "use_batch_norm", "==", "True", ")", ":", "\n", "                ", "op_layer", "=", "self", ".", "batch_norm_layer", "(", "ip_layer", "=", "op_layer", ",", "name", "=", "scope_name", ",", "training", "=", "training_phase", ")", "\n", "", "if", "(", "use_relu", "==", "True", ")", ":", "\n", "                ", "op_layer", "=", "tf", ".", "nn", ".", "relu", "(", "op_layer", ")", "\n", "\n", "# Add Tensorboard summaries", "\n", "#_add_summaries(op_layer, weights, biases)", "\n", "\n", "#return op_layer,weights,biases", "\n", "", "", "return", "op_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.lrelu": [[138, 141], ["tensorflow.maximum"], "methods", ["None"], ["", "def", "lrelu", "(", "self", ",", "x", ",", "leak", "=", "0.2", ",", "name", "=", "'lrelu'", ")", ":", "\n", "# Leaky Relu layer", "\n", "        ", "return", "tf", ".", "maximum", "(", "x", ",", "leak", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.upsample_layer": [[142, 164], ["int", "int", "tensorflow.image.resize_images", "round", "round", "ip_layer.get_shape().as_list", "ip_layer.get_shape().as_list", "ip_layer.get_shape", "ip_layer.get_shape"], "methods", ["None"], ["", "def", "upsample_layer", "(", "self", ",", "ip_layer", ",", "method", "=", "0", ",", "scale_factor", "=", "2", ",", "dim_list", "=", "None", ")", ":", "\n", "        ", "'''\n        2D upsampling layer with default image scale factor of 2.\n        ip_layer : input feature map layer\n        method = 0 --> Bilinear Interpolation\n                 1 --> Nearest Neighbour\n                 2 --> Bicubic Interpolation\n        scale_factor : factor by which we want to upsample current resolution\n        '''", "\n", "if", "(", "dim_list", "!=", "None", ")", ":", "\n", "            ", "prev_height", "=", "dim_list", "[", "1", "]", "\n", "prev_width", "=", "dim_list", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "prev_height", "=", "ip_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "\n", "prev_width", "=", "ip_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "\n", "\n", "", "new_height", "=", "int", "(", "round", "(", "prev_height", "*", "scale_factor", ")", ")", "\n", "new_width", "=", "int", "(", "round", "(", "prev_width", "*", "scale_factor", ")", ")", "\n", "\n", "op", "=", "tf", ".", "image", ".", "resize_images", "(", "images", "=", "ip_layer", ",", "size", "=", "[", "new_height", ",", "new_width", "]", ",", "method", "=", "method", ")", "\n", "\n", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.max_pool_layer2d": [[165, 176], ["tensorflow.nn.max_pool"], "methods", ["None"], ["", "def", "max_pool_layer2d", "(", "self", ",", "ip_layer", ",", "kernel_size", "=", "(", "2", ",", "2", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "\"SAME\"", ",", "name", "=", "None", ")", ":", "\n", "        ", "'''\n        2D max pooling layer with standard 2x2 pooling with stride 2 as default\n        '''", "\n", "\n", "kernel_size_aug", "=", "[", "1", ",", "kernel_size", "[", "0", "]", ",", "kernel_size", "[", "1", "]", ",", "1", "]", "\n", "strides_aug", "=", "[", "1", ",", "strides", "[", "0", "]", ",", "strides", "[", "1", "]", ",", "1", "]", "\n", "\n", "op", "=", "tf", ".", "nn", ".", "max_pool", "(", "ip_layer", ",", "ksize", "=", "kernel_size_aug", ",", "strides", "=", "strides_aug", ",", "padding", "=", "padding", ",", "name", "=", "name", ")", "\n", "\n", "return", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.batch_norm_layer": [[177, 226], ["tensorflow.variable_scope", "len", "tensorflow.constant", "tensorflow.constant", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.moments", "tensorflow.train.ExponentialMovingAverage", "tensorflow.cond", "tensorflow.nn.batch_normalization", "ip_layer.get_shape().as_list", "ip_layer.get_shape().as_list", "tensorflow.train.ExponentialMovingAverage.apply", "tensorflow.control_dependencies", "ip_layer.get_shape", "ip_layer.get_shape", "ValueError", "tensorflow.identity", "tensorflow.identity", "tensorflow.train.ExponentialMovingAverage.average", "tensorflow.train.ExponentialMovingAverage.average"], "methods", ["None"], ["", "def", "batch_norm_layer", "(", "self", ",", "ip_layer", ",", "name", ",", "training", ",", "moving_average_decay", "=", "0.99", ",", "epsilon", "=", "1e-3", ")", ":", "\n", "        ", "'''\n        Batch normalisation layer (Adapted from https://github.com/tensorflow/tensorflow/issues/1122)\n        input params:\n            ip_layer: Input layer (should be before activation)\n            name:     A name for the computational graph\n            training: A tf.bool specifying if the layer is executed at training or testing time\n        returns:\n            normalized: Batch normalised activation\n        '''", "\n", "\n", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "\n", "            ", "n_out", "=", "ip_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "-", "1", "]", "\n", "tensor_dim", "=", "len", "(", "ip_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "\n", "if", "tensor_dim", "==", "2", ":", "\n", "# must be a dense layer", "\n", "                ", "moments_over_axes", "=", "[", "0", "]", "\n", "", "elif", "tensor_dim", "==", "4", ":", "\n", "# must be a 2D conv layer", "\n", "                ", "moments_over_axes", "=", "[", "0", ",", "1", ",", "2", "]", "\n", "", "elif", "tensor_dim", "==", "5", ":", "\n", "# must be a 3D conv layer", "\n", "                ", "moments_over_axes", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", "\n", "", "else", ":", "\n", "# is not likely to be something reasonable", "\n", "                ", "raise", "ValueError", "(", "'Tensor dim %d is not supported by this batch_norm layer'", "%", "tensor_dim", ")", "\n", "\n", "", "init_beta", "=", "tf", ".", "constant", "(", "0.0", ",", "shape", "=", "[", "n_out", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "init_gamma", "=", "tf", ".", "constant", "(", "1.0", ",", "shape", "=", "[", "n_out", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "beta", "=", "tf", ".", "get_variable", "(", "name", "=", "'beta'", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "init_beta", ",", "regularizer", "=", "None", ",", "\n", "trainable", "=", "True", ")", "\n", "gamma", "=", "tf", ".", "get_variable", "(", "name", "=", "'gamma'", ",", "dtype", "=", "tf", ".", "float32", ",", "initializer", "=", "init_gamma", ",", "regularizer", "=", "None", ",", "\n", "trainable", "=", "True", ")", "\n", "\n", "batch_mean", ",", "batch_var", "=", "tf", ".", "nn", ".", "moments", "(", "ip_layer", ",", "moments_over_axes", ",", "name", "=", "'moments'", ")", "\n", "ema", "=", "tf", ".", "train", ".", "ExponentialMovingAverage", "(", "decay", "=", "moving_average_decay", ")", "\n", "\n", "def", "mean_var_with_update", "(", ")", ":", "\n", "                ", "ema_apply_op", "=", "ema", ".", "apply", "(", "[", "batch_mean", ",", "batch_var", "]", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "ema_apply_op", "]", ")", ":", "\n", "                    ", "return", "tf", ".", "identity", "(", "batch_mean", ")", ",", "tf", ".", "identity", "(", "batch_var", ")", "\n", "\n", "", "", "mean", ",", "var", "=", "tf", ".", "cond", "(", "training", ",", "mean_var_with_update", ",", "\n", "lambda", ":", "(", "ema", ".", "average", "(", "batch_mean", ")", ",", "ema", ".", "average", "(", "batch_var", ")", ")", ")", "\n", "normalised", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "ip_layer", ",", "mean", ",", "var", ",", "beta", ",", "gamma", ",", "epsilon", ")", "\n", "\n", "", "return", "normalised", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.get_weight_variable": [[230, 245], ["tensorflow.Variable", "math.sqrt", "tensorflow.random_normal"], "methods", ["None"], ["", "def", "get_weight_variable", "(", "self", ",", "shape", ",", "name", "=", "None", ",", "acti_type", "=", "'xavier'", ",", "fs", "=", "3", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the weights/convolutional kernels based on Xavier's method. Dimensions of filters are determined as per the input shape. Xavier's method initializes values of filters randomly around zero with the standard deviation computed as per Xavier's method.\n        Args:\n            shape : provides the shape of convolutional filter.\n                    shape[0], shape[1] denotes the dimensions (height and width) of filters.\n                    shape[2] denotes the depth of each filter. This also denotes the depth of each feature.\n                    shape[3] denotes the number of filters which will determine the number of features that have to be computed.\n        Returns:\n            Weights/convolutional filters initialized as per Xavier's method. The dimensions of the filters are set as per input shape variable.\n        \"\"\"", "\n", "nInputUnits", "=", "shape", "[", "0", "]", "*", "shape", "[", "1", "]", "*", "shape", "[", "2", "]", "\n", "stddev_val", "=", "1.", "/", "math", ".", "sqrt", "(", "nInputUnits", "/", "2", ")", "\n", "#http://cs231n.github.io/neural-networks-2/#init", "\n", "return", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "shape", ",", "stddev", "=", "stddev_val", ",", "seed", "=", "1", ")", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.layers_bn.layersObj.get_bias_variable": [[246, 256], ["tensorflow.Variable", "tensorflow.zeros"], "methods", ["None"], ["", "def", "get_bias_variable", "(", "self", ",", "shape", ",", "name", "=", "None", ",", "init_bias_val", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the biases as per input bias_val. The initial value is equal to zero + bias_val. No of such bias values required are determined by the number of filters which is input as length variable.\n        Args:\n            shape : provides us the number of filters.\n            init_bias_val : provides the base bias_val to initialize all bias values with.\n        Returns:\n            biases initilialized as per the bias_val.\n        \"\"\"", "\n", "return", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "shape", "=", "shape", ")", "+", "init_bias_val", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.__init__": [[17, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "dt", ")", ":", "\n", "#print('f1 utils init')", "\n", "        ", "self", ".", "img_size_x", "=", "cfg", ".", "img_size_x", "\n", "self", ".", "img_size_y", "=", "cfg", ".", "img_size_y", "\n", "self", ".", "batch_size", "=", "cfg", ".", "batch_size", "\n", "self", ".", "num_classes", "=", "cfg", ".", "num_classes", "\n", "self", ".", "num_channels", "=", "cfg", ".", "num_channels", "\n", "self", ".", "interp_val", "=", "cfg", ".", "interp_val", "\n", "self", ".", "target_resolution", "=", "cfg", ".", "target_resolution", "\n", "self", ".", "data_path_tr", "=", "cfg", ".", "data_path_tr", "\n", "self", ".", "dt", "=", "dt", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.surfd": [[29, 65], ["numpy.atleast_1d", "numpy.atleast_1d", "scipy.ndimage.morphology.generate_binary_structure", "scipy.ndimage.morphology.binary_erosion", "y.astype.astype.astype", "numpy.atleast_1d.astype", "scipy.ndimage.morphology.binary_erosion", "y.astype.astype.astype", "numpy.atleast_1d.astype", "S.astype.astype.astype", "Sprime.astype.astype.astype", "scipy.ndimage.morphology.distance_transform_edt", "scipy.ndimage.morphology.distance_transform_edt", "numpy.concatenate", "input1.astype", "input2.astype", "numpy.ravel", "numpy.ravel"], "methods", ["None"], ["", "def", "surfd", "(", "self", ",", "input1", ",", "input2", ",", "sampling", "=", "1", ",", "connectivity", "=", "1", ")", ":", "\n", "        ", "'''\n        function to compute the surface distance\n        input params:\n            input1: predicted segmentation mask\n            input2: ground truth mask\n            sampling: default value\n            connectivity: default value\n        returns:\n            sds : surface distance\n        '''", "\n", "input_1", "=", "np", ".", "atleast_1d", "(", "input1", ".", "astype", "(", "np", ".", "bool", ")", ")", "\n", "input_2", "=", "np", ".", "atleast_1d", "(", "input2", ".", "astype", "(", "np", ".", "bool", ")", ")", "\n", "conn", "=", "morphology", ".", "generate_binary_structure", "(", "input_1", ".", "ndim", ",", "connectivity", ")", "\n", "\n", "#binary erosion on input1", "\n", "y", "=", "morphology", ".", "binary_erosion", "(", "input_1", ",", "conn", ")", "\n", "y", "=", "y", ".", "astype", "(", "np", ".", "float32", ")", "\n", "x", "=", "input_1", ".", "astype", "(", "np", ".", "float32", ")", "\n", "S", "=", "x", "-", "y", "\n", "\n", "#binary erosion on input2", "\n", "y", "=", "morphology", ".", "binary_erosion", "(", "input_2", ",", "conn", ")", "\n", "y", "=", "y", ".", "astype", "(", "np", ".", "float32", ")", "\n", "x", "=", "input_2", ".", "astype", "(", "np", ".", "float32", ")", "\n", "Sprime", "=", "x", "-", "y", "\n", "\n", "S", "=", "S", ".", "astype", "(", "np", ".", "bool", ")", "\n", "Sprime", "=", "Sprime", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n", "dta", "=", "morphology", ".", "distance_transform_edt", "(", "~", "S", ",", "sampling", ")", "\n", "dtb", "=", "morphology", ".", "distance_transform_edt", "(", "~", "Sprime", ",", "sampling", ")", "\n", "\n", "sds", "=", "np", ".", "concatenate", "(", "[", "np", ".", "ravel", "(", "dta", "[", "Sprime", "!=", "0", "]", ")", ",", "np", ".", "ravel", "(", "dtb", "[", "S", "!=", "0", "]", ")", "]", ")", "\n", "\n", "return", "sds", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.calc_pred_sf_mask": [[66, 91], ["range", "numpy.reshape", "sess.run", "numpy.reshape", "numpy.reshape", "numpy.concatenate"], "methods", ["None"], ["", "def", "calc_pred_sf_mask", "(", "self", ",", "sess", ",", "ae", ",", "labeled_data_imgs", ",", "axis_no", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n        To compute the predicted segmentation for an input stack of 2D slices\n        input params:\n            sess: current session\n            ae: graph name\n            labeled_data_imgs: input 3D volume\n            axis_no:\n        returns:\n            mergedlist_y_pred: predicted segmentation masks of all 2D slices\n        \"\"\"", "\n", "total_slices", "=", "labeled_data_imgs", ".", "shape", "[", "axis_no", "]", "\n", "for", "slice_no", "in", "range", "(", "total_slices", ")", ":", "\n", "            ", "img_test_slice", "=", "np", ".", "reshape", "(", "labeled_data_imgs", "[", ":", ",", ":", ",", "slice_no", "]", ",", "(", "1", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", ",", "1", ")", ")", "\n", "\n", "seg_pred", "=", "sess", ".", "run", "(", "ae", "[", "'y_pred'", "]", ",", "feed_dict", "=", "{", "ae", "[", "'x'", "]", ":", "img_test_slice", ",", "ae", "[", "'train_phase'", "]", ":", "False", "}", ")", "\n", "\n", "# Merging predicted labels of slices(2D) of test image into one volume(3D) of predicted labels", "\n", "if", "(", "slice_no", "==", "0", ")", ":", "\n", "                ", "mergedlist_y_pred", "=", "np", ".", "reshape", "(", "seg_pred", ",", "(", "1", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", ",", "self", ".", "num_classes", ")", ")", "\n", "", "else", ":", "\n", "                ", "seg_pred_final", "=", "np", ".", "reshape", "(", "seg_pred", ",", "(", "1", ",", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", ",", "self", ".", "num_classes", ")", ")", "\n", "mergedlist_y_pred", "=", "np", ".", "concatenate", "(", "(", "mergedlist_y_pred", ",", "seg_pred_final", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "return", "mergedlist_y_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.calc_pred_sf_mask_full": [[92, 106], ["sess.run"], "methods", ["None"], ["", "def", "calc_pred_sf_mask_full", "(", "self", ",", "sess", ",", "ae", ",", "labeled_data_imgs", ")", ":", "\n", "        ", "'''\n        To compute the predicted segmentation for an input 3D volume\n        input params:\n            sess: current session\n            ae: graph name\n            labeled_data_imgs: input 3D volume\n        returns:\n            seg_pred: predicted segmentation mask of 3D volume\n        '''", "\n", "test_data", "=", "labeled_data_imgs", "\n", "seg_pred", "=", "sess", ".", "run", "(", "ae", "[", "'y_pred'", "]", ",", "feed_dict", "=", "{", "ae", "[", "'x'", "]", ":", "test_data", ",", "ae", "[", "'train_phase'", "]", ":", "False", "}", ")", "\n", "\n", "return", "seg_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.reshape_img_and_f1_score": [[107, 164], ["skimage.transform.rescale", "numpy.zeros", "range", "f1_utils.f1_utilsObj.calc_f1_score", "numpy.zeros", "skimage.transform.resize", "numpy.uint16", "numpy.argmax"], "methods", ["home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.calc_f1_score"], ["", "def", "reshape_img_and_f1_score", "(", "self", ",", "predicted_img_arr", ",", "gt_mask", ",", "pixel_size", ")", ":", "\n", "        ", "'''\n        To reshape image into the target resolution and then compute the f1 score w.r.t ground truth mask\n        input params:\n            predicted_img_arr: predicted segmentation mask that is computed over the re-sampled and cropped input image\n            gt_mask: ground truth mask in native image resolution\n            pixel_size: native image resolution\n        returns:\n            predictions_mask: predictions mask in native resolution (re-sampled and cropped/zeros append as per size requirements)\n            f1_val: f1 score over predicted segmentation masks vs ground truth\n        '''", "\n", "nx", ",", "ny", "=", "self", ".", "img_size_x", ",", "self", ".", "img_size_y", "\n", "\n", "scale_vector", "=", "(", "pixel_size", "[", "0", "]", "/", "self", ".", "target_resolution", "[", "0", "]", ",", "pixel_size", "[", "1", "]", "/", "self", ".", "target_resolution", "[", "1", "]", ")", "\n", "mask_rescaled", "=", "transform", ".", "rescale", "(", "gt_mask", "[", ":", ",", ":", ",", "0", "]", ",", "scale_vector", ",", "order", "=", "0", ",", "preserve_range", "=", "True", ",", "mode", "=", "'constant'", ")", "\n", "x", ",", "y", "=", "mask_rescaled", ".", "shape", "[", "0", "]", ",", "mask_rescaled", ".", "shape", "[", "1", "]", "\n", "\n", "x_s", "=", "(", "x", "-", "nx", ")", "//", "2", "\n", "y_s", "=", "(", "y", "-", "ny", ")", "//", "2", "\n", "x_c", "=", "(", "nx", "-", "x", ")", "//", "2", "\n", "y_c", "=", "(", "ny", "-", "y", ")", "//", "2", "\n", "\n", "total_slices", "=", "predicted_img_arr", ".", "shape", "[", "0", "]", "\n", "predictions_mask", "=", "np", ".", "zeros", "(", "(", "gt_mask", ".", "shape", "[", "0", "]", ",", "gt_mask", ".", "shape", "[", "1", "]", ",", "total_slices", ")", ")", "\n", "for", "slice_no", "in", "range", "(", "total_slices", ")", ":", "\n", "# ASSEMBLE BACK THE SLICES", "\n", "            ", "slice_predictions", "=", "np", ".", "zeros", "(", "(", "x", ",", "y", ",", "self", ".", "num_classes", ")", ")", "\n", "predicted_img", "=", "predicted_img_arr", "[", "slice_no", ",", ":", ",", ":", ",", ":", "]", "\n", "# insert cropped region into original image again", "\n", "if", "x", ">", "nx", "and", "y", ">", "ny", ":", "\n", "                ", "slice_predictions", "[", "x_s", ":", "x_s", "+", "nx", ",", "y_s", ":", "y_s", "+", "ny", ",", ":", "]", "=", "predicted_img", "\n", "", "else", ":", "\n", "                ", "if", "x", "<=", "nx", "and", "y", ">", "ny", ":", "\n", "                    ", "slice_predictions", "[", ":", ",", "y_s", ":", "y_s", "+", "ny", ",", ":", "]", "=", "predicted_img", "[", "x_c", ":", "x_c", "+", "x", ",", ":", ",", ":", "]", "\n", "", "elif", "x", ">", "nx", "and", "y", "<=", "ny", ":", "\n", "                    ", "slice_predictions", "[", "x_s", ":", "x_s", "+", "nx", ",", ":", ",", ":", "]", "=", "predicted_img", "[", ":", ",", "y_c", ":", "y_c", "+", "y", ",", ":", "]", "\n", "", "else", ":", "\n", "                    ", "slice_predictions", "[", ":", ",", ":", ",", ":", "]", "=", "predicted_img", "[", "x_c", ":", "x_c", "+", "x", ",", "y_c", ":", "y_c", "+", "y", ",", ":", "]", "\n", "\n", "# RESCALING ON THE LOGITS", "\n", "", "", "prediction", "=", "transform", ".", "resize", "(", "slice_predictions", ",", "\n", "(", "gt_mask", ".", "shape", "[", "0", "]", ",", "gt_mask", ".", "shape", "[", "1", "]", ",", "self", ".", "num_classes", ")", ",", "\n", "order", "=", "1", ",", "\n", "preserve_range", "=", "True", ",", "\n", "mode", "=", "'constant'", ")", "\n", "#print(\"b\",prediction.shape)", "\n", "prediction", "=", "np", ".", "uint16", "(", "np", ".", "argmax", "(", "prediction", ",", "axis", "=", "-", "1", ")", ")", "\n", "\n", "predictions_mask", "[", ":", ",", ":", ",", "slice_no", "]", "=", "prediction", "\n", "\n", "#Calculate F1 score", "\n", "#y_pred= predictions_mask.flatten()", "\n", "#y_true= gt_mask.flatten()", "\n", "#f1_val= f1_score(y_true, y_pred, average=None)", "\n", "", "f1_val", "=", "self", ".", "calc_f1_score", "(", "predictions_mask", ",", "gt_mask", ")", "\n", "\n", "return", "predictions_mask", ",", "f1_val", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.calc_f1_score": [[165, 180], ["predictions_mask.flatten", "gt_mask.flatten", "sklearn.metrics.f1_score"], "methods", ["None"], ["", "def", "calc_f1_score", "(", "self", ",", "predictions_mask", ",", "gt_mask", ")", ":", "\n", "        ", "'''\n        to compute f1/dice score\n        input params:\n            predictions_arr: predicted segmentation mask\n            mask: ground truth mask\n        returns:\n            f1_val: f1/dice score\n        '''", "\n", "y_pred", "=", "predictions_mask", ".", "flatten", "(", ")", "\n", "y_true", "=", "gt_mask", ".", "flatten", "(", ")", "\n", "\n", "f1_val", "=", "f1_score", "(", "y_true", ",", "y_pred", ",", "average", "=", "None", ")", "\n", "\n", "return", "f1_val", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.pred_segs_acdc_test_subjs": [[182, 310], ["range", "numpy.savetxt", "numpy.savetxt", "orig_img_dt", "f1_utils.f1_utilsObj.dt.preprocess_data", "pathlib.Path().mkdir", "f1_utils.f1_utilsObj.calc_pred_sf_mask", "f1_utils.f1_utilsObj.reshape_img_and_f1_score", "numpy.savetxt", "f1_utils.f1_utilsObj.plot_predicted_seg_ss", "nibabel.Nifti1Image", "nibabel.save", "numpy.reshape", "val_list.append", "val_list.append", "val_list_mean.append", "numpy.savetxt", "range", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "re_pred_mask_sys.astype", "range", "numpy.savetxt", "numpy.savetxt", "numpy.reshape", "numpy.reshape", "numpy.concatenate", "round", "round", "round", "str", "str", "val_list.append", "val_list.append", "val_list_mean.append", "numpy.savetxt", "hd_val_list.append", "hd_val_list.append", "hd_val_list_mean.append", "numpy.savetxt", "str", "pathlib.Path", "str", "str", "f1_utils.f1_utilsObj.surfd", "f1_utils.f1_utilsObj.mean", "f1_utils.f1_utilsObj.max", "assd_list.append", "hd_list.append", "numpy.asarray", "numpy.asarray", "numpy.concatenate", "numpy.concatenate", "numpy.median", "numpy.std", "numpy.mean", "str", "round", "round", "round", "round", "round", "round", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "numpy.median", "numpy.std", "numpy.mean", "str", "numpy.median", "numpy.std", "numpy.mean", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.dataloaders.dataloaderObj.preprocess_data", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.calc_pred_sf_mask", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.reshape_img_and_f1_score", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.plot_predicted_seg_ss", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.surfd"], ["", "def", "pred_segs_acdc_test_subjs", "(", "self", ",", "sess", ",", "ae", ",", "save_dir", ",", "orig_img_dt", ",", "test_list", ",", "struct_name", ",", "print_assd_hd_scores", "=", "0", ")", ":", "\n", "        ", "'''\n        To estimate the segmentation masks of test images and compute their f1 score and plot the predicted segmentations.\n        input params:\n            sess: current session\n            ae: current model graph\n            save_dir: save directory for the inference of test images\n            orig_img_dt: dataloader of acdc data\n            test_list: list of patient test ids\n            struct_name: list of structures to segment. Here its Right ventricle (RV), myocardium (MYO), left ventricle (LV) in the heart MRI.\n        returns:\n            None\n        '''", "\n", "count", "=", "0", "\n", "# Load each test image", "\n", "for", "test_id", "in", "test_list", ":", "\n", "            ", "test_id_l", "=", "[", "test_id", "]", "\n", "\n", "#load image,label pairs and process it to chosen resolution and dimensions", "\n", "img_sys", ",", "label_sys", ",", "pixel_size", ",", "affine_tst", "=", "orig_img_dt", "(", "test_id_l", ",", "ret_affine", "=", "1", ")", "\n", "cropped_img_sys", ",", "cropped_mask_sys", "=", "self", ".", "dt", ".", "preprocess_data", "(", "img_sys", ",", "label_sys", ",", "pixel_size", ")", "\n", "\n", "# Make directory for the test image with id number", "\n", "seg_model_dir", "=", "str", "(", "save_dir", ")", "+", "'pred_segs/'", "+", "str", "(", "test_id", ")", "+", "'/'", "\n", "pathlib", ".", "Path", "(", "seg_model_dir", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# Calc dice score and predicted segmentation & store in a txt file", "\n", "pred_sf_mask", "=", "self", ".", "calc_pred_sf_mask", "(", "sess", ",", "ae", ",", "cropped_img_sys", ",", "axis_no", "=", "2", ")", "\n", "re_pred_mask_sys", ",", "f1_val", "=", "self", ".", "reshape_img_and_f1_score", "(", "pred_sf_mask", ",", "label_sys", ",", "pixel_size", ")", "\n", "#print(\"mean f1_val\", f1_val)", "\n", "savefile_name", "=", "str", "(", "seg_model_dir", ")", "+", "'mean_f1_dice_coeff_test_id_'", "+", "str", "(", "test_id", ")", "+", "'.txt'", "\n", "np", ".", "savetxt", "(", "savefile_name", ",", "f1_val", ",", "fmt", "=", "'%s'", ")", "\n", "\n", "# Save the segmentation in nrrd files & plot some sample images", "\n", "self", ".", "plot_predicted_seg_ss", "(", "img_sys", ",", "label_sys", ",", "re_pred_mask_sys", ",", "seg_model_dir", ",", "test_id", ")", "\n", "\n", "#save the nifti segmentation file", "\n", "array_img", "=", "nib", ".", "Nifti1Image", "(", "re_pred_mask_sys", ".", "astype", "(", "np", ".", "int16", ")", ",", "affine_tst", ")", "\n", "pred_filename", "=", "str", "(", "seg_model_dir", ")", "+", "'pred_seg_id_'", "+", "str", "(", "test_id", ")", "+", "'.nii.gz'", "\n", "nib", ".", "save", "(", "array_img", ",", "pred_filename", ")", "\n", "\n", "dsc_tmp", "=", "np", ".", "reshape", "(", "f1_val", "[", "1", ":", "self", ".", "num_classes", "]", ",", "(", "1", ",", "self", ".", "num_classes", "-", "1", ")", ")", "\n", "\n", "if", "(", "print_assd_hd_scores", "==", "1", ")", ":", "\n", "                ", "assd_list", "=", "[", "]", "\n", "hd_list", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "1", ",", "self", ".", "num_classes", ")", ":", "\n", "                    ", "surface_distance", "=", "self", ".", "surfd", "(", "(", "re_pred_mask_sys", "==", "index", ")", ",", "(", "label_sys", "==", "index", ")", ")", "\n", "msd", "=", "surface_distance", ".", "mean", "(", ")", "\n", "hd", "=", "surface_distance", ".", "max", "(", ")", "\n", "assd_list", ".", "append", "(", "msd", ")", "\n", "hd_list", ".", "append", "(", "hd", ")", "\n", "", "filename_msd", "=", "str", "(", "seg_model_dir", ")", "+", "'assd_test_id_'", "+", "str", "(", "test_id", ")", "+", "'.txt'", "\n", "filename_hd", "=", "str", "(", "seg_model_dir", ")", "+", "'hd_test_id_'", "+", "str", "(", "test_id", ")", "+", "'.txt'", "\n", "np", ".", "savetxt", "(", "filename_msd", ",", "assd_list", ",", "fmt", "=", "'%s'", ")", "\n", "np", ".", "savetxt", "(", "filename_hd", ",", "hd_list", ",", "fmt", "=", "'%s'", ")", "\n", "\n", "assd_tmp", "=", "np", ".", "reshape", "(", "np", ".", "asarray", "(", "assd_list", ")", ",", "(", "1", ",", "self", ".", "num_classes", "-", "1", ")", ")", "\n", "hd_tmp", "=", "np", ".", "reshape", "(", "np", ".", "asarray", "(", "hd_list", ")", ",", "(", "1", ",", "self", ".", "num_classes", "-", "1", ")", ")", "\n", "\n", "", "if", "(", "count", "==", "0", ")", ":", "\n", "                ", "dsc_all", "=", "dsc_tmp", "\n", "if", "(", "print_assd_hd_scores", "==", "1", ")", ":", "\n", "                    ", "assd_all", "=", "assd_tmp", "\n", "hd_all", "=", "hd_tmp", "\n", "", "count", "=", "1", "\n", "", "else", ":", "\n", "                ", "dsc_all", "=", "np", ".", "concatenate", "(", "(", "dsc_all", ",", "dsc_tmp", ")", ")", "\n", "if", "(", "print_assd_hd_scores", "==", "1", ")", ":", "\n", "                    ", "assd_all", "=", "np", ".", "concatenate", "(", "(", "assd_all", ",", "assd_tmp", ")", ")", "\n", "hd_all", "=", "np", ".", "concatenate", "(", "(", "hd_all", ",", "hd_tmp", ")", ")", "\n", "\n", "#for DSC", "\n", "", "", "", "val_list", "=", "[", "]", "\n", "val_list_mean", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_classes", "-", "1", ")", ":", "\n", "            ", "dsc", "=", "dsc_all", "[", ":", ",", "i", "]", "\n", "#DSC", "\n", "#val_list.append(round(np.mean(dsc), 3))", "\n", "val_list", ".", "append", "(", "round", "(", "np", ".", "median", "(", "dsc", ")", ",", "3", ")", ")", "\n", "val_list", ".", "append", "(", "round", "(", "np", ".", "std", "(", "dsc", ")", ",", "3", ")", ")", "\n", "val_list_mean", ".", "append", "(", "round", "(", "np", ".", "mean", "(", "dsc", ")", ",", "3", ")", ")", "\n", "filename_save", "=", "str", "(", "save_dir", ")", "+", "'pred_segs/'", "+", "str", "(", "struct_name", "[", "i", "]", ")", "+", "'_20subjs_dsc.txt'", "\n", "np", ".", "savetxt", "(", "filename_save", ",", "dsc", ",", "fmt", "=", "'%s'", ")", "\n", "", "filename_save", "=", "str", "(", "save_dir", ")", "+", "'pred_segs/'", "+", "'median_std_dsc.txt'", "\n", "np", ".", "savetxt", "(", "filename_save", ",", "val_list", ",", "fmt", "=", "'%s'", ")", "\n", "filename_save", "=", "str", "(", "save_dir", ")", "+", "'pred_segs/'", "+", "'mean_dsc.txt'", "\n", "np", ".", "savetxt", "(", "filename_save", ",", "val_list_mean", ",", "fmt", "=", "'%s'", ")", "\n", "#filename_save=str(save_dir)+'pred_segs/'+'net_dsc_mean.txt'", "\n", "#net_mean_dsc=[]", "\n", "#net_mean_dsc.append(round(np.mean(val_list_mean),3))", "\n", "#np.savetxt(filename_save,net_mean_dsc,fmt='%s')", "\n", "\n", "if", "(", "print_assd_hd_scores", "==", "1", ")", ":", "\n", "#for ASSD", "\n", "            ", "val_list", "=", "[", "]", "\n", "val_list_mean", "=", "[", "]", "\n", "#for HD", "\n", "hd_val_list", "=", "[", "]", "\n", "hd_val_list_mean", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_classes", "-", "1", ")", ":", "\n", "                ", "assd", "=", "assd_all", "[", ":", ",", "i", "]", "\n", "hd", "=", "hd_all", "[", ":", ",", "i", "]", "\n", "#ASSD", "\n", "#val_list.append(round(np.mean(assd), 3))", "\n", "val_list", ".", "append", "(", "round", "(", "np", ".", "median", "(", "assd", ")", ",", "3", ")", ")", "\n", "val_list", ".", "append", "(", "round", "(", "np", ".", "std", "(", "assd", ")", ",", "3", ")", ")", "\n", "val_list_mean", ".", "append", "(", "round", "(", "np", ".", "mean", "(", "assd", ")", ",", "3", ")", ")", "\n", "filename_save", "=", "str", "(", "save_dir", ")", "+", "'pred_segs/'", "+", "str", "(", "struct_name", "[", "i", "]", ")", "+", "'_20subjs_assd.txt'", "\n", "np", ".", "savetxt", "(", "filename_save", ",", "assd", ",", "fmt", "=", "'%s'", ")", "\n", "#HD", "\n", "#hd_val_list.append(round(np.mean(hd), 3))", "\n", "hd_val_list", ".", "append", "(", "round", "(", "np", ".", "median", "(", "hd", ")", ",", "3", ")", ")", "\n", "hd_val_list", ".", "append", "(", "round", "(", "np", ".", "std", "(", "hd", ")", ",", "3", ")", ")", "\n", "hd_val_list_mean", ".", "append", "(", "round", "(", "np", ".", "mean", "(", "hd", ")", ",", "3", ")", ")", "\n", "filename_save", "=", "str", "(", "save_dir", ")", "+", "'pred_segs/'", "+", "str", "(", "struct_name", "[", "i", "]", ")", "+", "'_20subjs_hd.txt'", "\n", "np", ".", "savetxt", "(", "filename_save", ",", "hd", ",", "fmt", "=", "'%s'", ")", "\n", "\n", "", "filename_save", "=", "str", "(", "save_dir", ")", "+", "'pred_segs/'", "+", "'median_std_assd.txt'", "\n", "np", ".", "savetxt", "(", "filename_save", ",", "val_list", ",", "fmt", "=", "'%s'", ")", "\n", "filename_save", "=", "str", "(", "save_dir", ")", "+", "'pred_segs/'", "+", "'assd_mean.txt'", "\n", "np", ".", "savetxt", "(", "filename_save", ",", "val_list_mean", ",", "fmt", "=", "'%s'", ")", "\n", "\n", "filename_save", "=", "str", "(", "save_dir", ")", "+", "'pred_segs/'", "+", "'median_std_hd.txt'", "\n", "np", ".", "savetxt", "(", "filename_save", ",", "hd_val_list", ",", "fmt", "=", "'%s'", ")", "\n", "filename_save", "=", "str", "(", "save_dir", ")", "+", "'pred_segs/'", "+", "'hd_mean.txt'", "\n", "np", ".", "savetxt", "(", "filename_save", ",", "hd_val_list_mean", ",", "fmt", "=", "'%s'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.plot_predicted_seg_ss": [[311, 342], ["matplotlib.subplots", "matplotlib.subplots", "fig.suptitle", "range", "fig.savefig", "matplotlib.close", "matplotlib.close", "[].imshow", "[].imshow", "[].imshow", "[].axis", "[].axis", "[].axis", "[].set_title", "[].set_title", "[].set_title", "numpy.squeeze", "str", "str"], "methods", ["None"], ["", "", "def", "plot_predicted_seg_ss", "(", "self", ",", "test_data_img", ",", "test_data_labels", ",", "predicted_labels", ",", "save_dir", ",", "test_id", ")", ":", "\n", "        ", "'''\n        To plot the original image, ground truth mask and predicted mask\n        input params:\n            test_data_img: test image to be plotted\n            test_data_labels: test image GT mask to be plotted\n            predicted_labels: predicted mask of the test image\n            save_dir: directory where to save the plot\n            test_id: patient id number of the dataset\n        returns:\n            None\n        '''", "\n", "n_examples", "=", "3", "\n", "fig", ",", "axs", "=", "plt", ".", "subplots", "(", "3", ",", "n_examples", ",", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "fig", ".", "suptitle", "(", "'Predicted Seg'", ",", "fontsize", "=", "10", ")", "\n", "for", "example_i", "in", "range", "(", "n_examples", ")", ":", "\n", "            ", "if", "(", "example_i", "==", "0", ")", ":", "\n", "                ", "axs", "[", "0", "]", "[", "0", "]", ".", "set_title", "(", "'test image'", ")", "\n", "axs", "[", "1", "]", "[", "0", "]", ".", "set_title", "(", "'ground truth mask'", ")", "\n", "axs", "[", "2", "]", "[", "0", "]", ".", "set_title", "(", "'predicted mask'", ")", "\n", "\n", "", "axs", "[", "0", "]", "[", "example_i", "]", ".", "imshow", "(", "test_data_img", "[", ":", ",", ":", ",", "example_i", "*", "2", "]", ",", "cmap", "=", "'gray'", ")", "\n", "axs", "[", "1", "]", "[", "example_i", "]", ".", "imshow", "(", "test_data_labels", "[", ":", ",", ":", ",", "example_i", "*", "2", "]", ")", "\n", "axs", "[", "2", "]", "[", "example_i", "]", ".", "imshow", "(", "np", ".", "squeeze", "(", "predicted_labels", "[", ":", ",", ":", ",", "example_i", "*", "2", "]", ")", ")", "\n", "axs", "[", "0", "]", "[", "example_i", "]", ".", "axis", "(", "'off'", ")", "\n", "axs", "[", "1", "]", "[", "example_i", "]", ".", "axis", "(", "'off'", ")", "\n", "axs", "[", "2", "]", "[", "example_i", "]", ".", "axis", "(", "'off'", ")", "\n", "\n", "", "savefile_name", "=", "str", "(", "save_dir", ")", "+", "'tst'", "+", "str", "(", "test_id", ")", "+", "'_predicted_segmentation_masks.png'", "\n", "fig", ".", "savefig", "(", "savefile_name", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.plot_deformed_imgs": [[343, 397], ["pathlib.Path().mkdir", "numpy.meshgrid", "matplotlib.figure", "matplotlib.figure", "matplotlib.suptitle", "matplotlib.suptitle", "range", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "str", "str", "numpy.arange", "numpy.arange", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.quiver", "matplotlib.quiver", "matplotlib.axis", "matplotlib.axis", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.axis", "matplotlib.axis", "pathlib.Path", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.title", "matplotlib.title", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.axis", "matplotlib.axis", "matplotlib.title", "matplotlib.title", "matplotlib.title", "matplotlib.title", "str", "str"], "methods", ["None"], ["", "def", "plot_deformed_imgs", "(", "self", ",", "ld_img_batch", ",", "y_geo_deformed", ",", "flow_vec", ",", "save_dir", ",", "index", ")", ":", "\n", "        ", "'''\n        To plot the different deformation fields generated from different z's sampled.\n        These deformation fields are applied on a single image to illustrate different augmented images that can be generated from a single image.\n        input params:\n            ld_img_batch: input labeled image\n            y_geo_deformed: deformed images (non-affine spatial transformation applied)\n            flow_vec: deformation fields\n        returns:\n            None\n        '''", "\n", "save_dir_tmp", "=", "str", "(", "save_dir", ")", "+", "'/plots/'", "\n", "pathlib", ".", "Path", "(", "save_dir_tmp", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "savefile_name_tmp", "=", "str", "(", "save_dir_tmp", ")", "+", "'deformed_imgs_for_different_z_sampled_for_'", "\n", "max_val", "=", "5", "\n", "step_update", "=", "1", "\n", "\n", "#def for quiver plot", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "0", ",", "self", ".", "img_size_x", ",", "1", ")", ",", "np", ".", "arange", "(", "0", ",", "self", ".", "img_size_y", ",", "1", ")", ")", "\n", "#every 10th arrow to plot", "\n", "t", "=", "10", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "18", ",", "6", ")", ")", "\n", "plt", ".", "suptitle", "(", "'orig vs deformed imgs'", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "max_val", ",", "step_update", ")", ":", "\n", "            ", "train_slice", "=", "np", ".", "squeeze", "(", "ld_img_batch", "[", "i", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "y_deformed_slice", "=", "np", ".", "squeeze", "(", "y_geo_deformed", "[", "i", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "v_x", "=", "np", ".", "squeeze", "(", "flow_vec", "[", "i", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "v_y", "=", "np", ".", "squeeze", "(", "flow_vec", "[", "i", ",", ":", ",", ":", ",", "1", "]", ")", "\n", "\n", "if", "(", "i", "==", "0", ")", ":", "\n", "                ", "plt", ".", "subplot", "(", "2", ",", "max_val", "+", "1", ",", "1", ")", "\n", "plt", ".", "title", "(", "'orig img'", ")", "\n", "plt", ".", "imshow", "(", "train_slice", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "", "plt", ".", "subplot", "(", "2", ",", "max_val", "+", "1", ",", "i", "+", "2", ")", "\n", "if", "(", "i", "==", "0", ")", ":", "\n", "                ", "plt", ".", "title", "(", "'deformation field over imgs -->'", ")", "\n", "", "plt", ".", "imshow", "(", "train_slice", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "quiver", "(", "X", "[", ":", ":", "t", ",", ":", ":", "t", "]", ",", "Y", "[", ":", ":", "t", ",", ":", ":", "t", "]", ",", "v_x", "[", ":", ":", "t", ",", ":", ":", "t", "]", ",", "v_y", "[", ":", ":", "t", ",", ":", ":", "t", "]", ",", "pivot", "=", "'mid'", ",", "units", "=", "'inches'", ",", "color", "=", "'yellow'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "plt", ".", "subplot", "(", "2", ",", "max_val", "+", "1", ",", "max_val", "+", "1", "+", "i", "+", "2", ")", "\n", "if", "(", "i", "==", "0", ")", ":", "\n", "                ", "plt", ".", "title", "(", "'deformed imgs -->'", ")", "\n", "", "plt", ".", "imshow", "(", "y_deformed_slice", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "", "savefile_name", "=", "str", "(", "savefile_name_tmp", ")", "+", "'i_'", "+", "str", "(", "index", ")", "+", "'.png'", "\n", "plt", ".", "savefig", "(", "savefile_name", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.plot_intensity_transformed_imgs": [[398, 445], ["pathlib.Path().mkdir", "matplotlib.figure", "matplotlib.figure", "matplotlib.suptitle", "matplotlib.suptitle", "range", "matplotlib.savefig", "matplotlib.savefig", "matplotlib.close", "matplotlib.close", "str", "str", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.axis", "matplotlib.axis", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.axis", "matplotlib.axis", "pathlib.Path", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.title", "matplotlib.title", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.axis", "matplotlib.axis", "matplotlib.title", "matplotlib.title", "matplotlib.title", "matplotlib.title", "str", "str"], "methods", ["None"], ["", "def", "plot_intensity_transformed_imgs", "(", "self", ",", "ld_img_batch", ",", "y_int_deformed", ",", "int_vec", ",", "save_dir", ",", "index", ")", ":", "\n", "        ", "'''\n        To plot the different intensity fields generated from different z's sampled.\n        These intensity fields are applied on a single image to illustrate different augmented images that can be generated from a single image.\n        input params:\n            ld_img_batch: input labeled image\n            y_int_deformed: intensity transformed images\n            int_vec: intensity fields\n        returns:\n            None\n        '''", "\n", "save_dir_tmp", "=", "str", "(", "save_dir", ")", "+", "'/plots/'", "\n", "pathlib", ".", "Path", "(", "save_dir_tmp", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "savefile_name_tmp", "=", "str", "(", "save_dir_tmp", ")", "+", "'intensity_transformed_imgs_for_different_z_sampled_for_'", "\n", "max_val", "=", "5", "\n", "step_update", "=", "1", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "18", ",", "6", ")", ")", "\n", "plt", ".", "suptitle", "(", "'orig vs intensity transformed imgs'", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "max_val", ",", "step_update", ")", ":", "\n", "            ", "train_slice", "=", "np", ".", "squeeze", "(", "ld_img_batch", "[", "i", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "y_deformed_slice", "=", "np", ".", "squeeze", "(", "y_int_deformed", "[", "i", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "int_slice", "=", "np", ".", "squeeze", "(", "int_vec", "[", "i", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "\n", "if", "(", "i", "==", "0", ")", ":", "\n", "                ", "plt", ".", "subplot", "(", "2", ",", "max_val", "+", "1", ",", "1", ")", "\n", "plt", ".", "title", "(", "'orig img'", ")", "\n", "plt", ".", "imshow", "(", "train_slice", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "", "plt", ".", "subplot", "(", "2", ",", "max_val", "+", "1", ",", "i", "+", "2", ")", "\n", "if", "(", "i", "==", "0", ")", ":", "\n", "                ", "plt", ".", "title", "(", "'intensity fields -->'", ")", "\n", "", "plt", ".", "imshow", "(", "int_slice", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "plt", ".", "subplot", "(", "2", ",", "max_val", "+", "1", ",", "max_val", "+", "1", "+", "i", "+", "2", ")", "\n", "if", "(", "i", "==", "0", ")", ":", "\n", "                ", "plt", ".", "title", "(", "'intensity transformed imgs -->'", ")", "\n", "", "plt", ".", "imshow", "(", "y_deformed_slice", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "", "savefile_name", "=", "str", "(", "savefile_name_tmp", ")", "+", "'i_'", "+", "str", "(", "index", ")", "+", "'.png'", "\n", "plt", ".", "savefig", "(", "savefile_name", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.write_gif_func": [[446, 465], ["numpy.squeeze", "numpy.transpose", "numpy.reshape", "numpy.transpose", "numpy.expand_dims", "numpy.tile", "array2gif.write_gif", "numpy.reshape.reshape", "str"], "methods", ["None"], ["", "def", "write_gif_func", "(", "self", ",", "ip_img", ",", "imsize", ",", "save_dir", ",", "index", "=", "0", ")", ":", "\n", "        ", "'''\n        To save a gif of the input stack of 2D slices\n        input params:\n            ip_img: input stack of 2D slices\n            imsize: image dimensions\n            save_dir:directory to save the gif\n        returns:\n            None\n        '''", "\n", "y", "=", "np", ".", "squeeze", "(", "ip_img", ")", "\n", "y_t", "=", "np", ".", "transpose", "(", "y", ")", "\n", "recons_ims", "=", "np", ".", "reshape", "(", "y_t", ",", "(", "self", ".", "img_size_x", "*", "self", ".", "img_size_y", ",", "self", ".", "batch_size", ")", ")", "\n", "\n", "dataset", "=", "np", ".", "transpose", "(", "recons_ims", ".", "reshape", "(", "1", ",", "imsize", "[", "0", "]", ",", "imsize", "[", "1", "]", ",", "recons_ims", ".", "shape", "[", "1", "]", ")", ",", "[", "3", ",", "0", ",", "1", ",", "2", "]", ")", "\n", "np", ".", "expand_dims", "(", "dataset", ",", "axis", "=", "1", ")", "\n", "dataset", "=", "np", ".", "tile", "(", "dataset", ",", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "\n", "imname", "=", "save_dir", "+", "'plots/test_slice_index_'", "+", "str", "(", "index", ")", "+", "'.gif'", "\n", "write_gif", "(", "(", "dataset", "*", "256", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "imname", ",", "fps", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.utils.augmentation_function": [[11, 118], ["range", "numpy.asarray", "AssertionError", "numpy.squeeze", "numpy.random.randint", "new_images.append", "numpy.asarray", "len", "numpy.squeeze", "numpy.max", "numpy.random.uniform", "scipy.ndimage.interpolation.rotate", "round", "skimage.transform.rescale", "dt.crop_or_pad_slice_to_size", "numpy.random.randint", "scipy.ndimage.interpolation.rotate", "new_labels.append", "len", "random.uniform", "numpy.fliplr", "numpy.random.randint", "scipy.ndimage.interpolation.rotate", "scipy.ndimage.interpolation.rotate", "skimage.transform.rescale", "dt.crop_or_pad_slice_to_size_1hot", "skimage.transform.rescale", "dt.crop_or_pad_slice_to_size", "numpy.fliplr", "scipy.ndimage.interpolation.rotate", "scipy.ndimage.interpolation.rotate"], "function", ["home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.dataloaders.dataloaderObj.crop_or_pad_slice_to_size", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.dataloaders.dataloaderObj.crop_or_pad_slice_to_size_1hot", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.dataloaders.dataloaderObj.crop_or_pad_slice_to_size"], ["def", "augmentation_function", "(", "ip_list", ",", "dt", ",", "labels_present", "=", "1", ",", "en_1hot", "=", "0", ")", ":", "\n", "    ", "'''\n    To generate affine augmented image,label pairs.\n\n    ip params:\n        ip_list: list of 2D slices of images and its labels if labels are present\n        dt: dataloader object\n        labels_present: to indicate if labels are present or not\n        en_1hot: to indicate labels are used in 1-hot encoding format\n    returns:\n        sampled_image_batch : augmented images generated\n        sampled_label_batch : corresponding augmented labels\n    '''", "\n", "\n", "if", "(", "len", "(", "ip_list", ")", "==", "2", "and", "labels_present", "==", "1", ")", ":", "\n", "        ", "images", "=", "ip_list", "[", "0", "]", "\n", "labels", "=", "ip_list", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "images", "=", "ip_list", "[", "0", "]", "\n", "\n", "", "if", "images", ".", "ndim", ">", "4", ":", "\n", "        ", "raise", "AssertionError", "(", "'Augmentation will only work with 2D images'", ")", "\n", "\n", "", "new_images", "=", "[", "]", "\n", "new_labels", "=", "[", "]", "\n", "num_images", "=", "images", ".", "shape", "[", "0", "]", "\n", "\n", "for", "index", "in", "range", "(", "num_images", ")", ":", "\n", "\n", "        ", "img", "=", "np", ".", "squeeze", "(", "images", "[", "index", ",", "...", "]", ")", "\n", "if", "(", "labels_present", "==", "1", ")", ":", "\n", "            ", "lbl", "=", "np", ".", "squeeze", "(", "labels", "[", "index", ",", "...", "]", ")", "\n", "\n", "", "do_rotations", ",", "do_scaleaug", ",", "do_fliplr", ",", "do_simple_rot", "=", "0", ",", "0", ",", "0", ",", "0", "\n", "#option 5 is to not perform any augmentation i.e, use the original image", "\n", "aug_select", "=", "np", ".", "random", ".", "randint", "(", "5", ")", "\n", "\n", "if", "(", "np", ".", "max", "(", "img", ")", ">", "0.001", ")", ":", "\n", "            ", "if", "(", "aug_select", "==", "0", ")", ":", "\n", "                ", "do_rotations", "=", "1", "\n", "", "elif", "(", "aug_select", "==", "1", ")", ":", "\n", "                ", "do_scaleaug", "=", "1", "\n", "", "elif", "(", "aug_select", "==", "2", ")", ":", "\n", "                ", "do_fliplr", "=", "1", "\n", "", "elif", "(", "aug_select", "==", "3", ")", ":", "\n", "                ", "do_simple_rot", "=", "1", "\n", "\n", "# ROTATE between angle -15 to 15", "\n", "", "", "if", "do_rotations", ":", "\n", "            ", "angles", "=", "[", "-", "15", ",", "15", "]", "\n", "random_angle", "=", "np", ".", "random", ".", "uniform", "(", "angles", "[", "0", "]", ",", "angles", "[", "1", "]", ")", "\n", "img", "=", "scipy", ".", "ndimage", ".", "interpolation", ".", "rotate", "(", "img", ",", "reshape", "=", "False", ",", "angle", "=", "random_angle", ",", "axes", "=", "(", "1", ",", "0", ")", ",", "order", "=", "1", ")", "\n", "if", "(", "labels_present", "==", "1", ")", ":", "\n", "                ", "if", "(", "en_1hot", "==", "1", ")", ":", "\n", "                    ", "lbl", "=", "scipy", ".", "ndimage", ".", "interpolation", ".", "rotate", "(", "lbl", ",", "reshape", "=", "False", ",", "angle", "=", "random_angle", ",", "axes", "=", "(", "1", ",", "0", ")", ",", "order", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "lbl", "=", "scipy", ".", "ndimage", ".", "interpolation", ".", "rotate", "(", "lbl", ",", "reshape", "=", "False", ",", "angle", "=", "random_angle", ",", "axes", "=", "(", "1", ",", "0", ")", ",", "order", "=", "0", ")", "\n", "\n", "# RANDOM SCALE", "\n", "", "", "", "if", "do_scaleaug", ":", "\n", "            ", "n_x", ",", "n_y", "=", "img", ".", "shape", "\n", "#scale factor between 0.9 and 1.1", "\n", "scale_fact_min", "=", "0.9", "\n", "scale_fact_max", "=", "1.1", "\n", "scale_val", "=", "round", "(", "random", ".", "uniform", "(", "scale_fact_min", ",", "scale_fact_max", ")", ",", "2", ")", "\n", "slice_rescaled", "=", "transform", ".", "rescale", "(", "img", ",", "scale_val", ",", "order", "=", "1", ",", "preserve_range", "=", "True", ",", "mode", "=", "'constant'", ")", "\n", "img", "=", "dt", ".", "crop_or_pad_slice_to_size", "(", "slice_rescaled", ",", "n_x", ",", "n_y", ")", "\n", "if", "(", "labels_present", "==", "1", ")", ":", "\n", "                ", "if", "(", "en_1hot", "==", "1", ")", ":", "\n", "                    ", "slice_rescaled", "=", "transform", ".", "rescale", "(", "lbl", ",", "scale_val", ",", "order", "=", "1", ",", "preserve_range", "=", "True", ",", "mode", "=", "'constant'", ")", "\n", "lbl", "=", "dt", ".", "crop_or_pad_slice_to_size_1hot", "(", "slice_rescaled", ",", "n_x", ",", "n_y", ")", "\n", "", "else", ":", "\n", "                    ", "slice_rescaled", "=", "transform", ".", "rescale", "(", "lbl", ",", "scale_val", ",", "order", "=", "0", ",", "preserve_range", "=", "True", ",", "mode", "=", "'constant'", ")", "\n", "lbl", "=", "dt", ".", "crop_or_pad_slice_to_size", "(", "slice_rescaled", ",", "n_x", ",", "n_y", ")", "\n", "\n", "# RANDOM FLIP", "\n", "", "", "", "if", "do_fliplr", ":", "\n", "            ", "coin_flip", "=", "np", ".", "random", ".", "randint", "(", "2", ")", "\n", "if", "coin_flip", "==", "0", ":", "\n", "                ", "img", "=", "np", ".", "fliplr", "(", "img", ")", "\n", "if", "(", "labels_present", "==", "1", ")", ":", "\n", "                    ", "lbl", "=", "np", ".", "fliplr", "(", "lbl", ")", "\n", "\n", "# Simple rotations at angles of 45 degrees", "\n", "", "", "", "if", "do_simple_rot", ":", "\n", "            ", "fixed_angle", "=", "45", "\n", "random_angle", "=", "np", ".", "random", ".", "randint", "(", "8", ")", "*", "fixed_angle", "\n", "\n", "img", "=", "scipy", ".", "ndimage", ".", "interpolation", ".", "rotate", "(", "img", ",", "reshape", "=", "False", ",", "angle", "=", "random_angle", ",", "axes", "=", "(", "1", ",", "0", ")", ",", "order", "=", "1", ")", "\n", "if", "(", "labels_present", "==", "1", ")", ":", "\n", "                ", "if", "(", "en_1hot", "==", "1", ")", ":", "\n", "                    ", "lbl", "=", "scipy", ".", "ndimage", ".", "interpolation", ".", "rotate", "(", "lbl", ",", "reshape", "=", "False", ",", "angle", "=", "random_angle", ",", "axes", "=", "(", "1", ",", "0", ")", ",", "order", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "lbl", "=", "scipy", ".", "ndimage", ".", "interpolation", ".", "rotate", "(", "lbl", ",", "reshape", "=", "False", ",", "angle", "=", "random_angle", ",", "axes", "=", "(", "1", ",", "0", ")", ",", "order", "=", "0", ")", "\n", "\n", "", "", "", "new_images", ".", "append", "(", "img", "[", "...", ",", "np", ".", "newaxis", "]", ")", "\n", "if", "(", "labels_present", "==", "1", ")", ":", "\n", "            ", "new_labels", ".", "append", "(", "lbl", "[", "...", "]", ")", "\n", "\n", "", "", "sampled_image_batch", "=", "np", ".", "asarray", "(", "new_images", ")", "\n", "if", "(", "labels_present", "==", "1", ")", ":", "\n", "        ", "sampled_label_batch", "=", "np", ".", "asarray", "(", "new_labels", ")", "\n", "\n", "", "if", "(", "len", "(", "ip_list", ")", "==", "2", "and", "labels_present", "==", "1", ")", ":", "\n", "        ", "return", "sampled_image_batch", ",", "sampled_label_batch", "\n", "", "else", ":", "\n", "        ", "return", "sampled_image_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.utils.calc_deform": [[119, 149], ["numpy.zeros", "range", "numpy.random.normal", "numpy.reshape", "skimage.transform.resize", "numpy.random.normal", "numpy.reshape", "skimage.transform.resize"], "function", ["None"], ["", "", "def", "calc_deform", "(", "cfg", ",", "mu", "=", "0", ",", "sigma", "=", "10", ",", "order", "=", "3", ")", ":", "\n", "    ", "'''\n    To generate a batch of smooth deformation fields for the specified mean and standard deviation value.\n\n    input params:\n        cfg: experiment config parameter (contains image dimensions, batch_size, etc)\n        mu: mean value for the normal distribution\n        sigma: standard deviation value for the normal distribution\n        order: order of interpolation; 3 = bicubic interpolation\n    returns:\n        flow_vec: batch of deformation fields generated\n    '''", "\n", "\n", "flow_vec", "=", "np", ".", "zeros", "(", "(", "cfg", ".", "batch_size", ",", "cfg", ".", "img_size_x", ",", "cfg", ".", "img_size_y", ",", "2", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "cfg", ".", "batch_size", ")", ":", "\n", "#mu, sigma = 0, 10 # mean and standard deviation", "\n", "        ", "dx", "=", "np", ".", "random", ".", "normal", "(", "mu", ",", "sigma", ",", "9", ")", "\n", "dx_mat", "=", "np", ".", "reshape", "(", "dx", ",", "(", "3", ",", "3", ")", ")", "\n", "dx_img", "=", "transform", ".", "resize", "(", "dx_mat", ",", "output_shape", "=", "(", "cfg", ".", "img_size_x", ",", "cfg", ".", "img_size_y", ")", ",", "order", "=", "order", ",", "mode", "=", "'reflect'", ")", "\n", "\n", "dy", "=", "np", ".", "random", ".", "normal", "(", "mu", ",", "sigma", ",", "9", ")", "\n", "dy_mat", "=", "np", ".", "reshape", "(", "dy", ",", "(", "3", ",", "3", ")", ")", "\n", "dy_img", "=", "transform", ".", "resize", "(", "dy_mat", ",", "output_shape", "=", "(", "cfg", ".", "img_size_x", ",", "cfg", ".", "img_size_y", ")", ",", "order", "=", "order", ",", "mode", "=", "'reflect'", ")", "\n", "\n", "\n", "flow_vec", "[", "i", ",", ":", ",", ":", ",", "0", "]", "=", "dx_img", "\n", "flow_vec", "[", "i", ",", ":", ",", ":", ",", "1", "]", "=", "dy_img", "\n", "\n", "", "return", "flow_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.utils.shuffle_minibatch": [[150, 210], ["numpy.arange", "numpy.random.choice", "len", "len", "numpy.reshape", "numpy.concatenate", "len", "numpy.reshape", "numpy.reshape", "numpy.reshape", "numpy.concatenate", "numpy.reshape", "numpy.reshape"], "function", ["None"], ["", "def", "shuffle_minibatch", "(", "ip_list", ",", "batch_size", "=", "20", ",", "num_channels", "=", "1", ",", "labels_present", "=", "1", ",", "axis", "=", "2", ")", ":", "\n", "    ", "'''\n    To sample a minibatch images of batch_size from all the available 3D volume of images.\n\n    input params:\n        ip_list: list of 2D slices of images and its labels if labels are present\n        batch_size: number of 2D slices to consider for the training\n        labels_present: to indicate labels are used in 1-hot encoding format\n        num_channels : no of channels of the input image\n        axis : the axis along which we want to sample the minibatch -> axis vals : 0 - for sagittal, 1 - for coronal, 2 - for axial\n    returns:\n        image_data_train_batch: concatenated 2D slices randomly chosen from the total input data\n        label_data_train_batch: concatenated 2D slices of labels with indices corresponding to the input data selected.\n    '''", "\n", "\n", "if", "(", "len", "(", "ip_list", ")", "==", "2", "and", "labels_present", "==", "1", ")", ":", "\n", "        ", "image_data_train", "=", "ip_list", "[", "0", "]", "\n", "label_data_train", "=", "ip_list", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "image_data_train", "=", "ip_list", "[", "0", "]", "\n", "\n", "", "img_size_x", "=", "image_data_train", ".", "shape", "[", "0", "]", "\n", "img_size_y", "=", "image_data_train", ".", "shape", "[", "1", "]", "\n", "img_size_z", "=", "image_data_train", ".", "shape", "[", "2", "]", "\n", "\n", "len_of_train_data", "=", "np", ".", "arange", "(", "image_data_train", ".", "shape", "[", "axis", "]", ")", "\n", "\n", "randomize", "=", "np", ".", "random", ".", "choice", "(", "len_of_train_data", ",", "size", "=", "len", "(", "len_of_train_data", ")", ",", "replace", "=", "True", ")", "\n", "\n", "count", "=", "0", "\n", "for", "index_no", "in", "randomize", ":", "\n", "        ", "if", "(", "axis", "==", "2", ")", ":", "\n", "            ", "img_train_tmp", "=", "np", ".", "reshape", "(", "image_data_train", "[", ":", ",", ":", ",", "index_no", "]", ",", "(", "1", ",", "img_size_x", ",", "img_size_y", ",", "num_channels", ")", ")", "\n", "if", "(", "labels_present", "==", "1", ")", ":", "\n", "                ", "label_train_tmp", "=", "np", ".", "reshape", "(", "label_data_train", "[", ":", ",", ":", ",", "index_no", "]", ",", "(", "1", ",", "img_size_x", ",", "img_size_y", ")", ")", "\n", "", "", "elif", "(", "axis", "==", "1", ")", ":", "\n", "            ", "img_train_tmp", "=", "np", ".", "reshape", "(", "image_data_train", "[", ":", ",", "index_no", ",", ":", ",", "]", ",", "(", "1", ",", "img_size_x", ",", "img_size_z", ",", "num_channels", ")", ")", "\n", "if", "(", "labels_present", "==", "1", ")", ":", "\n", "                ", "label_train_tmp", "=", "np", ".", "reshape", "(", "label_data_train", "[", ":", ",", "index_no", ",", ":", "]", ",", "(", "1", ",", "img_size_x", ",", "img_size_z", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "img_train_tmp", "=", "np", ".", "reshape", "(", "image_data_train", "[", "index_no", ",", ":", ",", ":", "]", ",", "(", "1", ",", "img_size_y", ",", "img_size_z", ",", "num_channels", ")", ")", "\n", "if", "(", "labels_present", "==", "1", ")", ":", "\n", "                ", "label_train_tmp", "=", "np", ".", "reshape", "(", "label_data_train", "[", "index_no", ",", ":", ",", ":", "]", ",", "(", "1", ",", "img_size_y", ",", "img_size_z", ")", ")", "\n", "\n", "", "", "if", "(", "count", "==", "0", ")", ":", "\n", "            ", "image_data_train_batch", "=", "img_train_tmp", "\n", "if", "(", "labels_present", "==", "1", ")", ":", "\n", "                ", "label_data_train_batch", "=", "label_train_tmp", "\n", "", "", "else", ":", "\n", "            ", "image_data_train_batch", "=", "np", ".", "concatenate", "(", "(", "image_data_train_batch", ",", "img_train_tmp", ")", ",", "axis", "=", "0", ")", "\n", "if", "(", "labels_present", "==", "1", ")", ":", "\n", "                ", "label_data_train_batch", "=", "np", ".", "concatenate", "(", "(", "label_data_train_batch", ",", "label_train_tmp", ")", ",", "axis", "=", "0", ")", "\n", "", "", "count", "=", "count", "+", "1", "\n", "if", "(", "count", "==", "batch_size", ")", ":", "\n", "            ", "break", "\n", "\n", "", "", "if", "(", "len", "(", "ip_list", ")", "==", "2", "and", "labels_present", "==", "1", ")", ":", "\n", "        ", "return", "image_data_train_batch", ",", "label_data_train_batch", "\n", "", "else", ":", "\n", "        ", "return", "image_data_train_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.utils.change_axis_img": [[211, 255], ["range", "numpy.reshape", "len", "numpy.reshape", "numpy.concatenate", "len", "numpy.concatenate"], "function", ["None"], ["", "", "def", "change_axis_img", "(", "ip_list", ",", "labels_present", "=", "1", ",", "def_axis_no", "=", "2", ",", "cat_axis", "=", "0", ")", ":", "\n", "    ", "'''\n    To swap the axes of 3D volumes as per the network input\n    input params:\n        ip_list: list of 2D slices of images and its labels if labels are present\n        labels_present: to indicate labels are used in 1-hot encoding format\n        def_axis_no: axis which needs to be swapped (default axial direction here)\n        cat_axis: axis along which the images need to concatenated\n    returns:\n        mergedlist_img: swapped axes 3D volumes\n        mergedlist_labels: corresponding swapped 3D volumes\n    '''", "\n", "# Swap axes of 3D volume according to the input of the network", "\n", "if", "(", "len", "(", "ip_list", ")", "==", "2", "and", "labels_present", "==", "1", ")", ":", "\n", "        ", "labeled_data_imgs", "=", "ip_list", "[", "0", "]", "\n", "labeled_data_labels", "=", "ip_list", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "labeled_data_imgs", "=", "ip_list", "[", "0", "]", "\n", "\n", "#can also define in an init file - base values", "\n", "", "img_size_x", "=", "labeled_data_imgs", ".", "shape", "[", "0", "]", "\n", "img_size_y", "=", "labeled_data_imgs", ".", "shape", "[", "1", "]", "\n", "\n", "total_slices", "=", "labeled_data_imgs", ".", "shape", "[", "def_axis_no", "]", "\n", "for", "slice_no", "in", "range", "(", "total_slices", ")", ":", "\n", "\n", "        ", "img_test_slice", "=", "np", ".", "reshape", "(", "labeled_data_imgs", "[", ":", ",", ":", ",", "slice_no", "]", ",", "(", "1", ",", "img_size_x", ",", "img_size_y", ",", "1", ")", ")", "\n", "if", "(", "labels_present", "==", "1", ")", ":", "\n", "            ", "label_test_slice", "=", "np", ".", "reshape", "(", "labeled_data_labels", "[", ":", ",", ":", ",", "slice_no", "]", ",", "(", "1", ",", "img_size_x", ",", "img_size_y", ")", ")", "\n", "\n", "", "if", "(", "slice_no", "==", "0", ")", ":", "\n", "            ", "mergedlist_img", "=", "img_test_slice", "\n", "if", "(", "labels_present", "==", "1", ")", ":", "\n", "                ", "mergedlist_labels", "=", "label_test_slice", "\n", "\n", "", "", "else", ":", "\n", "            ", "mergedlist_img", "=", "np", ".", "concatenate", "(", "(", "mergedlist_img", ",", "img_test_slice", ")", ",", "axis", "=", "cat_axis", ")", "\n", "if", "(", "labels_present", "==", "1", ")", ":", "\n", "                ", "mergedlist_labels", "=", "np", ".", "concatenate", "(", "(", "mergedlist_labels", ",", "label_test_slice", ")", ",", "axis", "=", "cat_axis", ")", "\n", "\n", "", "", "", "if", "(", "len", "(", "ip_list", ")", "==", "2", "and", "labels_present", "==", "1", ")", ":", "\n", "        ", "return", "mergedlist_img", ",", "mergedlist_labels", "\n", "", "else", ":", "\n", "        ", "return", "mergedlist_img", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.utils.load_val_imgs": [[256, 288], ["orig_img_dt", "dt.preprocess_data", "utils.change_axis_img", "val_label_orig.append", "val_img_list.append", "val_label_list.append", "pixel_val_list.append"], "function", ["home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.dataloaders.dataloaderObj.preprocess_data", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.utils.change_axis_img"], ["", "", "def", "load_val_imgs", "(", "val_list", ",", "dt", ",", "orig_img_dt", ")", ":", "\n", "    ", "'''\n    To load validation acdc images and labels,pixel resolution\n    input params:\n        val_list: list of validation patient ids of acdc data\n        dt: dataloader object\n        orig_img_dt: dataloader for the image\n    returns:\n        val_label_orig: returns list of labels without any preprocessing applied\n        val_img_re: returns list of images post preprocess steps done\n        val_label_re: returns list of labels post preprocess steps done\n        pixel_val_list: returns list of pixel resolution values of original images\n    '''", "\n", "val_label_orig", "=", "[", "]", "\n", "val_img_list", "=", "[", "]", "\n", "val_label_list", "=", "[", "]", "\n", "pixel_val_list", "=", "[", "]", "\n", "\n", "for", "val_id", "in", "val_list", ":", "\n", "        ", "val_id_list", "=", "[", "val_id", "]", "\n", "val_img", ",", "val_label", ",", "pixel_size_val", "=", "orig_img_dt", "(", "val_id_list", ")", "\n", "val_cropped_img", ",", "val_cropped_mask", "=", "dt", ".", "preprocess_data", "(", "val_img", ",", "val_label", ",", "pixel_size_val", ")", "\n", "\n", "#change axis for quicker computation of dice score", "\n", "val_img_re", ",", "val_labels_re", "=", "change_axis_img", "(", "[", "val_cropped_img", ",", "val_cropped_mask", "]", ")", "\n", "\n", "val_label_orig", ".", "append", "(", "val_label", ")", "\n", "val_img_list", ".", "append", "(", "val_img_re", ")", "\n", "val_label_list", ".", "append", "(", "val_labels_re", ")", "\n", "pixel_val_list", ".", "append", "(", "pixel_size_val", ")", "\n", "\n", "", "return", "val_label_orig", ",", "val_img_list", ",", "val_label_list", ",", "pixel_val_list", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.utils.get_max_chkpt_file": [[289, 312], ["os.walk", "re.sub", "fileList.sort", "re.findall", "filename.lower", "int", "int", "os.path.join"], "function", ["None"], ["", "def", "get_max_chkpt_file", "(", "model_path", ",", "min_ep", "=", "10", ")", ":", "\n", "    ", "'''\n    To return the checkpoint file that yielded the best dsc value on val images\n    input params:\n        model_path: directory of the run where the checkpoint files are stored\n        min_ep: variable to ensure that the model selected has higher epoch no. than this no. (here its 10).\n    returns:\n        fin_chkpt_max: checkpoint file with best dsc value\n    '''", "\n", "for", "dirName", ",", "subdirList", ",", "fileList", "in", "os", ".", "walk", "(", "model_path", ")", ":", "\n", "        ", "fileList", ".", "sort", "(", ")", "\n", "for", "filename", "in", "fileList", ":", "\n", "            ", "if", "\"meta\"", "in", "filename", ".", "lower", "(", ")", "and", "'best_model'", "in", "filename", ":", "\n", "                ", "numbers", "=", "re", ".", "findall", "(", "'\\d+'", ",", "filename", ")", "\n", "if", "\"_v2\"", "in", "filename", ":", "\n", "                    ", "tmp_ep_no", "=", "int", "(", "numbers", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "tmp_ep_no", "=", "int", "(", "numbers", "[", "0", "]", ")", "\n", "", "if", "(", "tmp_ep_no", ">", "min_ep", ")", ":", "\n", "                    ", "chkpt_max", "=", "os", ".", "path", ".", "join", "(", "dirName", ",", "filename", ")", "\n", "min_ep", "=", "tmp_ep_no", "\n", "", "", "", "", "fin_chkpt_max", "=", "re", ".", "sub", "(", "'\\.meta$'", ",", "''", ",", "chkpt_max", ")", "\n", "return", "fin_chkpt_max", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.utils.isNotEmpty": [[313, 315], ["bool", "s.strip"], "function", ["None"], ["", "def", "isNotEmpty", "(", "s", ")", ":", "\n", "    ", "return", "bool", "(", "s", "and", "s", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.utils.mixup_data_gen": [[316, 340], ["numpy.zeros_like", "numpy.zeros_like", "range", "numpy.random.beta", "numpy.random.choice", "numpy.random.choice"], "function", ["None"], ["", "def", "mixup_data_gen", "(", "x_train", ",", "y_train", ",", "alpha", "=", "0.1", ")", ":", "\n", "    ", "'''\n    # Generator for mixup data - to linearly combine 2 random image,label pairs from the batch of image,label pairs\n    input params:\n        x_train: batch of input images\n        y_train: batch of input labels\n        alpha: alpha value of\n    returns:\n        x_out: linearly combined resultant image\n        y_out: linearly combined resultant label\n    '''", "\n", "len_x_train", "=", "x_train", ".", "shape", "[", "0", "]", "\n", "x_out", "=", "np", ".", "zeros_like", "(", "x_train", ")", "\n", "y_out", "=", "np", ".", "zeros_like", "(", "y_train", ")", "\n", "\n", "for", "i", "in", "range", "(", "len_x_train", ")", ":", "\n", "        ", "lam", "=", "np", ".", "random", ".", "beta", "(", "alpha", ",", "alpha", ")", "\n", "rand_idx1", "=", "np", ".", "random", ".", "choice", "(", "len_x_train", ")", "\n", "rand_idx2", "=", "np", ".", "random", ".", "choice", "(", "len_x_train", ")", "\n", "\n", "x_out", "[", "i", "]", "=", "lam", "*", "x_train", "[", "rand_idx1", "]", "+", "(", "1", "-", "lam", ")", "*", "x_train", "[", "rand_idx2", "]", "\n", "y_out", "[", "i", "]", "=", "lam", "*", "y_train", "[", "rand_idx1", "]", "+", "(", "1", "-", "lam", ")", "*", "y_train", "[", "rand_idx2", "]", "\n", "\n", "", "return", "x_out", ",", "y_out", "\n", "", ""]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.losses.lossObj.__init__": [[8, 10], ["print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "print", "(", "'loss init'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.losses.lossObj.dice_loss_with_backgrnd": [[11, 37], ["tensorflow.name_scope", "tensorflow.nn.softmax", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "dice_loss_with_backgrnd", "(", "self", ",", "logits", ",", "labels", ",", "epsilon", "=", "1e-10", ")", ":", "\n", "        ", "'''\n        Calculate a dice loss defined as `1-foreround_dice`. Default mode assumes that the 0 label\n         denotes background and the remaining labels are foreground.\n        input params:\n            logits: Network output before softmax\n            labels: ground truth label masks\n            epsilon: A small constant to avoid division by 0\n        returns:\n            loss: Dice loss with background\n        '''", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'dice_loss'", ")", ":", "\n", "\n", "            ", "prediction", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "\n", "intersection", "=", "tf", ".", "multiply", "(", "prediction", ",", "labels", ")", "\n", "intersec_per_img_per_lab", "=", "tf", ".", "reduce_sum", "(", "intersection", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "\n", "l", "=", "tf", ".", "reduce_sum", "(", "prediction", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "r", "=", "tf", ".", "reduce_sum", "(", "labels", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "\n", "dices_per_subj", "=", "2", "*", "intersec_per_img_per_lab", "/", "(", "l", "+", "r", "+", "epsilon", ")", "\n", "\n", "loss", "=", "1", "-", "tf", ".", "reduce_mean", "(", "dices_per_subj", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.losses.lossObj.dice_loss_without_backgrnd": [[38, 66], ["tensorflow.name_scope", "tensorflow.nn.softmax", "tensorflow.multiply", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.slice"], "methods", ["None"], ["", "def", "dice_loss_without_backgrnd", "(", "self", ",", "logits", ",", "labels", ",", "epsilon", "=", "1e-10", ",", "from_label", "=", "1", ",", "to_label", "=", "-", "1", ")", ":", "\n", "        ", "'''\n        Calculate a dice loss defined as `1-foreround_dice`. Default mode assumes that the 0 label\n         denotes background and the remaining labels are foreground.\n        input params:\n            logits: Network output before softmax\n            labels: ground truth label masks\n            epsilon: A small constant to avoid division by 0\n            from_label: First label to evaluate\n            to_label: Last label to evaluate\n        returns:\n            loss: Dice loss without background\n        '''", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'dice_loss'", ")", ":", "\n", "\n", "            ", "prediction", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "\n", "intersection", "=", "tf", ".", "multiply", "(", "prediction", ",", "labels", ")", "\n", "intersec_per_img_per_lab", "=", "tf", ".", "reduce_sum", "(", "intersection", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "\n", "l", "=", "tf", ".", "reduce_sum", "(", "prediction", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "r", "=", "tf", ".", "reduce_sum", "(", "labels", ",", "axis", "=", "[", "1", ",", "2", "]", ")", "\n", "\n", "dices_per_subj", "=", "2", "*", "intersec_per_img_per_lab", "/", "(", "l", "+", "r", "+", "epsilon", ")", "\n", "\n", "loss", "=", "1", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "slice", "(", "dices_per_subj", ",", "(", "0", ",", "from_label", ")", ",", "(", "-", "1", ",", "to_label", ")", ")", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.losses.lossObj.pixel_wise_cross_entropy_loss": [[67, 74], ["tensorflow.reduce_mean", "tensorflow.nn.softmax_cross_entropy_with_logits_v2"], "methods", ["None"], ["", "def", "pixel_wise_cross_entropy_loss", "(", "self", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "'''\n        Simple wrapper for the normal tensorflow cross entropy loss\n        '''", "\n", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.losses.lossObj.pixel_wise_cross_entropy_loss_weighted": [[75, 98], ["tensorflow.reduce_sum", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "pixel_wise_cross_entropy_loss_weighted", "(", "self", ",", "logits", ",", "labels", ",", "class_weights", ")", ":", "\n", "        ", "'''\n        Weighted cross entropy loss, with a weight per class\n        input params:\n            logits: Network output before softmax\n            labels: Ground truth masks\n            class_weights: A list of the weights for each class\n        returns:\n            loss:  weighted cross entropy loss\n        '''", "\n", "\n", "# deduce weights for batch samples based on their true label", "\n", "weights", "=", "tf", ".", "reduce_sum", "(", "class_weights", "*", "labels", ",", "axis", "=", "3", ")", "\n", "\n", "# For weighted error", "\n", "# compute your (unweighted) softmax cross entropy loss", "\n", "unweighted_losses", "=", "tf", ".", "nn", ".", "softmax_cross_entropy_with_logits_v2", "(", "logits", "=", "logits", ",", "labels", "=", "labels", ")", "\n", "# apply the weights, relying on broadcasting of the multiplication", "\n", "weighted_losses", "=", "unweighted_losses", "*", "weights", "\n", "# reduce the result to get your final loss", "\n", "loss", "=", "tf", ".", "reduce_mean", "(", "weighted_losses", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.train_model.tr_intensity_cgan_and_unet.get_samples": [[156, 167], ["numpy.random.normal().astype", "shuffle_minibatch", "shuffle_minibatch", "numpy.random.normal", "int", "int"], "function", ["home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.utils.shuffle_minibatch", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.utils.shuffle_minibatch"], ["def", "get_samples", "(", "labeled_imgs", ",", "unlabeled_imgs", ")", ":", "\n", "# sample z vectors from Gaussian Distribution", "\n", "    ", "z_samples", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.0", ",", "scale", "=", "1.0", ",", "size", "=", "(", "cfg", ".", "batch_size", ",", "parse_config", ".", "z_lat_dim", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "#sample Unlabeled data shuffled batch", "\n", "unld_img_batch", "=", "shuffle_minibatch", "(", "[", "unlabeled_imgs", "]", ",", "batch_size", "=", "int", "(", "cfg", ".", "batch_size", ")", ",", "num_channels", "=", "cfg", ".", "num_channels", ",", "labels_present", "=", "0", ",", "axis", "=", "2", ")", "\n", "\n", "#sample Labelled data shuffled batch", "\n", "ld_img_batch", "=", "shuffle_minibatch", "(", "[", "labeled_imgs", "]", ",", "batch_size", "=", "int", "(", "cfg", ".", "batch_size", ")", ",", "num_channels", "=", "cfg", ".", "num_channels", ",", "labels_present", "=", "0", ",", "axis", "=", "2", ")", "\n", "\n", "return", "z_samples", ",", "ld_img_batch", ",", "unld_img_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.train_model.tr_intensity_cgan_and_unet.plt_func": [[168, 179], ["numpy.zeros_like", "range", "sess.run", "f1_util.plot_intensity_transformed_imgs"], "function", ["home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.plot_intensity_transformed_imgs"], ["", "def", "plt_func", "(", "sess", ",", "ae", ",", "save_dir", ",", "z_samples", ",", "ld_img_batch", ",", "unld_img_batch", ",", "index", "=", "0", ")", ":", "\n", "# plot intensity transformed images for an fixed input image and different sampled z values", "\n", "    ", "ld_img_tmp", "=", "np", ".", "zeros_like", "(", "ld_img_batch", ")", "\n", "# select one 2D image from the batch and apply different z's sampled over this selected image", "\n", "for", "i", "in", "range", "(", "0", ",", "20", ")", ":", "\n", "        ", "ld_img_tmp", "[", "i", ",", ":", ",", ":", ",", "0", "]", "=", "ld_img_batch", "[", "index", ",", ":", ",", ":", ",", "0", "]", "\n", "\n", "", "int_vec", ",", "y_int_deformed", ",", "z_cost", "=", "sess", ".", "run", "(", "[", "ae", "[", "'int_c1'", "]", ",", "ae", "[", "'y_int'", "]", ",", "ae", "[", "'z_cost'", "]", "]", ",", "feed_dict", "=", "{", "ae", "[", "'x'", "]", ":", "ld_img_tmp", ",", "ae", "[", "'z'", "]", ":", "z_samples", ",", "ae", "[", "'x_unl'", "]", ":", "unld_img_batch", ",", "ae", "[", "'select_mask'", "]", ":", "True", ",", "ae", "[", "'train_phase'", "]", ":", "False", "}", ")", "\n", "\n", "f1_util", ".", "plot_intensity_transformed_imgs", "(", "ld_img_tmp", ",", "y_int_deformed", ",", "int_vec", ",", "save_dir", ",", "index", "=", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.train_model.tr_deformation_cgan_and_unet.get_samples": [[156, 167], ["numpy.random.normal().astype", "shuffle_minibatch", "shuffle_minibatch", "numpy.random.normal", "int", "int"], "function", ["home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.utils.shuffle_minibatch", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.utils.shuffle_minibatch"], ["def", "get_samples", "(", "labeled_imgs", ",", "unlabeled_imgs", ")", ":", "\n", "# sample z vectors from Gaussian Distribution", "\n", "    ", "z_samples", "=", "np", ".", "random", ".", "normal", "(", "loc", "=", "0.0", ",", "scale", "=", "1.0", ",", "size", "=", "(", "cfg", ".", "batch_size", ",", "parse_config", ".", "z_lat_dim", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# sample Unlabeled data shuffled batch", "\n", "unld_img_batch", "=", "shuffle_minibatch", "(", "[", "unlabeled_imgs", "]", ",", "batch_size", "=", "int", "(", "cfg", ".", "batch_size", ")", ",", "num_channels", "=", "cfg", ".", "num_channels", ",", "labels_present", "=", "0", ",", "axis", "=", "2", ")", "\n", "\n", "# sample Labelled data shuffled batch", "\n", "ld_img_batch", "=", "shuffle_minibatch", "(", "[", "labeled_imgs", "]", ",", "batch_size", "=", "int", "(", "cfg", ".", "batch_size", ")", ",", "num_channels", "=", "cfg", ".", "num_channels", ",", "labels_present", "=", "0", ",", "axis", "=", "2", ")", "\n", "\n", "return", "z_samples", ",", "ld_img_batch", ",", "unld_img_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.train_model.tr_deformation_cgan_and_unet.plt_func": [[168, 182], ["numpy.zeros_like", "range", "sess.run", "f1_util.plot_deformed_imgs", "f1_util.write_gif_func"], "function", ["home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.plot_deformed_imgs", "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.None.f1_utils.f1_utilsObj.write_gif_func"], ["", "def", "plt_func", "(", "sess", ",", "ae", ",", "save_dir", ",", "z_samples", ",", "ld_img_batch", ",", "unld_img_batch", ",", "index", "=", "0", ")", ":", "\n", "# plot deformed images for an fixed input image and different per-pixel flow vectors generated from sampled z values", "\n", "    ", "ld_img_tmp", "=", "np", ".", "zeros_like", "(", "ld_img_batch", ")", "\n", "# select one 2D image from the batch and apply different z's sampled over this selected image", "\n", "for", "i", "in", "range", "(", "0", ",", "20", ")", ":", "\n", "        ", "ld_img_tmp", "[", "i", ",", ":", ",", ":", ",", "0", "]", "=", "ld_img_batch", "[", "index", ",", ":", ",", ":", ",", "0", "]", "\n", "\n", "", "flow_vec", ",", "y_geo_deformed", ",", "z_cost", "=", "sess", ".", "run", "(", "[", "ae", "[", "'flow_vec'", "]", ",", "ae", "[", "'y_trans'", "]", ",", "ae", "[", "'z_cost'", "]", "]", ",", "feed_dict", "=", "{", "ae", "[", "'x_l'", "]", ":", "ld_img_tmp", ",", "ae", "[", "'z'", "]", ":", "z_samples", ",", "ae", "[", "'x_unl'", "]", ":", "unld_img_batch", ",", "ae", "[", "'select_mask'", "]", ":", "True", ",", "ae", "[", "'train_phase'", "]", ":", "False", "}", ")", "\n", "\n", "f1_util", ".", "plot_deformed_imgs", "(", "ld_img_tmp", ",", "y_geo_deformed", ",", "flow_vec", ",", "save_dir", ",", "index", "=", "index", ")", "\n", "\n", "# Plot gif of all the deformed images generated for the fixed input image", "\n", "f1_util", ".", "write_gif_func", "(", "ip_img", "=", "y_geo_deformed", ",", "imsize", "=", "(", "cfg", ".", "img_size_x", ",", "cfg", ".", "img_size_y", ")", ",", "save_dir", "=", "save_dir", ",", "index", "=", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.experiment_init.data_cfg_acdc.train_data": [[3, 45], ["print", "sys.exit"], "function", ["None"], ["def", "train_data", "(", "no_of_tr_imgs", ",", "comb_of_tr_imgs", ")", ":", "\n", "#print('train data')", "\n", "    ", "if", "(", "no_of_tr_imgs", "==", "'tr5'", "and", "comb_of_tr_imgs", "==", "'c1'", ")", ":", "\n", "        ", "labeled_id_list", "=", "[", "\"002\"", ",", "\"022\"", ",", "\"042\"", ",", "\"062\"", ",", "\"095\"", "]", "\n", "", "elif", "(", "no_of_tr_imgs", "==", "'tr5'", "and", "comb_of_tr_imgs", "==", "'c2'", ")", ":", "\n", "        ", "labeled_id_list", "=", "[", "\"003\"", ",", "\"023\"", ",", "\"043\"", ",", "\"063\"", ",", "\"083\"", "]", "\n", "", "elif", "(", "no_of_tr_imgs", "==", "'tr15'", "and", "comb_of_tr_imgs", "==", "'c1'", ")", ":", "\n", "        ", "labeled_id_list", "=", "[", "\"001\"", ",", "\"002\"", ",", "\"003\"", ",", "\"021\"", ",", "\"022\"", ",", "\"023\"", ",", "\"041\"", ",", "\"042\"", ",", "\"043\"", ",", "\"061\"", ",", "\"062\"", ",", "\"063\"", ",", "\"081\"", ",", "\"082\"", ",", "\"083\"", "]", "\n", "", "elif", "(", "no_of_tr_imgs", "==", "'tr15'", "and", "comb_of_tr_imgs", "==", "'c2'", ")", ":", "\n", "        ", "labeled_id_list", "=", "[", "\"005\"", ",", "\"006\"", ",", "\"013\"", ",", "\"025\"", ",", "\"026\"", ",", "\"033\"", ",", "\"045\"", ",", "\"046\"", ",", "\"053\"", ",", "\"065\"", ",", "\"066\"", ",", "\"073\"", ",", "\"085\"", ",", "\"086\"", ",", "\"093\"", "]", "\n", "", "elif", "(", "no_of_tr_imgs", "==", "'tr3'", "and", "comb_of_tr_imgs", "==", "'c1'", ")", ":", "\n", "        ", "labeled_id_list", "=", "[", "\"002\"", ",", "\"022\"", ",", "\"042\"", "]", "\n", "", "elif", "(", "no_of_tr_imgs", "==", "'tr3'", "and", "comb_of_tr_imgs", "==", "'c2'", ")", ":", "\n", "        ", "labeled_id_list", "=", "[", "\"042\"", ",", "\"062\"", ",", "\"082\"", "]", "\n", "", "elif", "(", "no_of_tr_imgs", "==", "'tr3'", "and", "comb_of_tr_imgs", "==", "'c3'", ")", ":", "\n", "        ", "labeled_id_list", "=", "[", "\"022\"", ",", "\"042\"", ",", "\"082\"", "]", "\n", "", "elif", "(", "no_of_tr_imgs", "==", "'tr3'", "and", "comb_of_tr_imgs", "==", "'c4'", ")", ":", "\n", "        ", "labeled_id_list", "=", "[", "\"002\"", ",", "\"042\"", ",", "\"082\"", "]", "\n", "", "elif", "(", "no_of_tr_imgs", "==", "'tr3'", "and", "comb_of_tr_imgs", "==", "'c5'", ")", ":", "\n", "        ", "labeled_id_list", "=", "[", "\"002\"", ",", "\"042\"", ",", "\"095\"", "]", "\n", "", "elif", "(", "no_of_tr_imgs", "==", "'tr1'", "and", "comb_of_tr_imgs", "==", "'c1'", ")", ":", "\n", "        ", "labeled_id_list", "=", "[", "\"002\"", "]", "\n", "", "elif", "(", "no_of_tr_imgs", "==", "'tr1'", "and", "comb_of_tr_imgs", "==", "'c2'", ")", ":", "\n", "        ", "labeled_id_list", "=", "[", "\"042\"", "]", "\n", "", "elif", "(", "no_of_tr_imgs", "==", "'tr1'", "and", "comb_of_tr_imgs", "==", "'c3'", ")", ":", "\n", "        ", "labeled_id_list", "=", "[", "\"022\"", "]", "\n", "", "elif", "(", "no_of_tr_imgs", "==", "'tr1'", "and", "comb_of_tr_imgs", "==", "'c4'", ")", ":", "\n", "        ", "labeled_id_list", "=", "[", "\"062\"", "]", "\n", "", "elif", "(", "no_of_tr_imgs", "==", "'tr1'", "and", "comb_of_tr_imgs", "==", "'c5'", ")", ":", "\n", "        ", "labeled_id_list", "=", "[", "\"095\"", "]", "\n", "", "elif", "(", "no_of_tr_imgs", "==", "'tr40'", "and", "comb_of_tr_imgs", "==", "'c1'", ")", ":", "\n", "        ", "labeled_id_list", "=", "[", "\"001\"", ",", "\"002\"", ",", "\"003\"", ",", "\"004\"", ",", "\"005\"", ",", "\"006\"", ",", "\"012\"", ",", "\"013\"", ",", "\"021\"", ",", "\"022\"", ",", "\"023\"", ",", "\"024\"", ",", "\"025\"", ",", "\"026\"", ",", "\"032\"", ",", "\"033\"", ",", "\"041\"", ",", "\"042\"", ",", "\"043\"", ",", "\"044\"", ",", "\"045\"", ",", "\"046\"", ",", "\"052\"", ",", "\"053\"", ",", "\"061\"", ",", "\"062\"", ",", "\"063\"", ",", "\"064\"", ",", "\"065\"", ",", "\"066\"", ",", "\"072\"", ",", "\"073\"", ",", "\"081\"", ",", "\"082\"", ",", "\"083\"", ",", "\"084\"", ",", "\"085\"", ",", "\"086\"", ",", "\"092\"", ",", "\"093\"", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Error! Select valid combination of training images'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "return", "labeled_id_list", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.experiment_init.data_cfg_acdc.val_data": [[46, 50], ["None"], "function", ["None"], ["", "def", "val_data", "(", ")", ":", "\n", "#print('valilation data')", "\n", "    ", "val_list", "=", "[", "\"011\"", ",", "\"071\"", "]", "\n", "return", "val_list", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.experiment_init.data_cfg_acdc.unlabeled_data": [[51, 59], ["None"], "function", ["None"], ["", "def", "unlabeled_data", "(", ")", ":", "\n", "#print('unlabeled data')", "\n", "    ", "unlabeled_list", "=", "[", "\"016\"", ",", "\"017\"", ",", "\"018\"", ",", "\"019\"", ",", "\"020\"", ",", "\"036\"", ",", "\"037\"", ",", "\"038\"", ",", "\"039\"", ",", "\"040\"", ",", "\"056\"", ",", "\"057\"", ",", "\"058\"", ",", "\"059\"", ",", "\"060\"", ",", "\"076\"", ",", "\"077\"", ",", "\"078\"", ",", "\"079\"", ",", "\"080\"", ",", "\"096\"", ",", "\"097\"", ",", "\"098\"", ",", "\"099\"", ",", "\"100\"", "]", "\n", "return", "unlabeled_list", "\n", "\n"]], "home.repos.pwc.inspect_result.krishnabits001_task_driven_data_augmentation.experiment_init.data_cfg_acdc.test_data": [[60, 68], ["None"], "function", ["None"], ["", "def", "test_data", "(", ")", ":", "\n", "#print('test data')", "\n", "    ", "test_list", "=", "[", "\"007\"", ",", "\"008\"", ",", "\"009\"", ",", "\"010\"", ",", "\"027\"", ",", "\"028\"", ",", "\"029\"", ",", "\"030\"", ",", "\"047\"", ",", "\"048\"", ",", "\"049\"", ",", "\"050\"", ",", "\"067\"", ",", "\"068\"", ",", "\"069\"", ",", "\"070\"", ",", "\"087\"", ",", "\"088\"", ",", "\"089\"", ",", "\"090\"", "]", "\n", "return", "test_list", "\n", "", ""]]}