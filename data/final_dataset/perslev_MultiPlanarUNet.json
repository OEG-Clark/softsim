{"home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.__init__": [[25, 37], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "scaler", ",", "*", "args", ",", "ignore_less_eq", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# Store scaler class and passed parameters", "\n", "        ", "self", ".", "scaler_class", "=", "scaler", "\n", "self", ".", "scaler_args", "=", "args", "\n", "self", ".", "scaler_kwargs", "=", "kwargs", "\n", "self", ".", "ignore_less_eq", "=", "ignore_less_eq", "\n", "\n", "# Store list of initialized scalers fit to each channel", "\n", "self", ".", "scalers", "=", "[", "]", "\n", "\n", "# Store number of channels", "\n", "self", ".", "n_channels", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.__str__": [[38, 42], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"MultiChannelScaler(scaler_class='{}', ignore_less_eq={})\"", ".", "format", "(", "\n", "self", ".", "scaler_class", ".", "__name__", ",", "\n", "self", ".", "ignore_less_eq", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.__repr__": [[44, 46], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.fit": [[47, 74], ["range", "ValueError", "scaling.MultiChannelScaler.scaler_class", "scaling.MultiChannelScaler.fit", "scalers.append", "isinstance", "ValueError", "xs.reshape", "len", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.trainer.Trainer.fit"], ["", "def", "fit", "(", "self", ",", "X", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "X", ".", "ndim", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid shape for X (%s)\"", "%", "X", ".", "shape", ")", "\n", "\n", "# Set number of channels", "\n", "", "self", ".", "n_channels", "=", "X", ".", "shape", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "ignore_less_eq", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "self", ".", "ignore_less_eq", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "                ", "self", ".", "ignore_less_eq", "=", "[", "self", ".", "ignore_less_eq", "]", "*", "self", ".", "n_channels", "\n", "", "if", "not", "len", "(", "self", ".", "ignore_less_eq", ")", "==", "self", ".", "n_channels", ":", "\n", "                ", "raise", "ValueError", "(", "\"'ignore_less_eq' should be a list of length \"", "\n", "\"'n_channels'. Got {} for n_channels={}\"", ".", "format", "(", "\n", "self", ".", "ignore_less_eq", ",", "self", ".", "n_channels", "\n", ")", ")", "\n", "\n", "", "", "scalers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_channels", ")", ":", "\n", "            ", "sc", "=", "self", ".", "scaler_class", "(", "*", "self", ".", "scaler_args", ",", "**", "self", ".", "scaler_kwargs", ")", "\n", "xs", "=", "X", "[", "...", ",", "i", "]", "\n", "if", "self", ".", "ignore_less_eq", "is", "not", "None", ":", "\n", "                ", "xs", "=", "xs", "[", "np", ".", "where", "(", "xs", ">", "self", ".", "ignore_less_eq", "[", "i", "]", ")", "]", "\n", "", "sc", ".", "fit", "(", "xs", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "scalers", ".", "append", "(", "sc", ")", "\n", "\n", "", "self", ".", "scalers", "=", "scalers", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.transform": [[75, 89], ["numpy.empty_like", "range", "ValueError", "scl.transform", "scl.transform.reshape", "X[].reshape"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.transform"], ["", "def", "transform", "(", "self", ",", "X", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "X", ".", "shape", "[", "-", "1", "]", "!=", "self", ".", "n_channels", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid input of dimension %i, expected \"", "\n", "\"last axis with %i channels\"", "%", "(", "X", ".", "ndim", ",", "\n", "self", ".", "n_channels", ")", ")", "\n", "\n", "# Prepare volume like X to store results", "\n", "", "transformed", "=", "np", ".", "empty_like", "(", "X", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_channels", ")", ":", "\n", "            ", "scl", "=", "self", ".", "scalers", "[", "i", "]", "\n", "s", "=", "scl", ".", "transform", "(", "X", "[", "...", ",", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "transformed", "[", "...", ",", "i", "]", "=", "s", ".", "reshape", "(", "X", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "\n", "", "return", "transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.fit_transform": [[90, 93], ["scaling.MultiChannelScaler.fit", "scaling.MultiChannelScaler.transform"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.trainer.Trainer.fit", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.transform"], ["", "def", "fit_transform", "(", "self", ",", "X", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "fit", "(", "X", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "self", ".", "transform", "(", "X", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.assert_scaler": [[5, 7], ["None"], "function", ["None"], ["def", "assert_scaler", "(", "scaler", ")", ":", "\n", "    ", "return", "scaler", "in", "preprocessing", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.get_scaler": [[9, 14], ["scaling.MultiChannelScaler"], "function", ["None"], ["", "def", "get_scaler", "(", "scaler", ",", "*", "args", ",", "ignore_less_eq", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "scaler", "=", "preprocessing", ".", "__dict__", "[", "scaler", "]", "\n", "return", "MultiChannelScaler", "(", "scaler", "=", "scaler", ",", "\n", "ignore_less_eq", "=", "ignore_less_eq", ",", "\n", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.apply_scaling": [[16, 22], ["scaling.get_scaler", "get_scaler.fit_transform"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.get_scaler", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.fit_transform"], ["", "def", "apply_scaling", "(", "X", ",", "scaler", ",", "ignore_less_eq", "=", "None", ")", ":", "\n", "# Get scaler", "\n", "    ", "multi_scaler", "=", "get_scaler", "(", "scaler", ",", "ignore_less_eq", "=", "ignore_less_eq", ")", "\n", "\n", "# Fit and apply transformation", "\n", "return", "multi_scaler", ".", "fit_transform", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.data_preparation_funcs._base_loader_func": [[23, 114], ["logger", "mpunet.image.ImagePairLoader", "mpunet.image.ImagePairLoader", "mpunet.image.auditor.Auditor", "mpunet.image.auditor.Auditor.fill", "hparams.get", "hparams[].get", "get_data_queues", "mpunet.logging.ScreenLogger", "logger", "logger", "dataset.set_scaler_and_bg_values", "logger.warn", "hparams[].get", "hparams.get_from_anywhere", "logger", "mpunet.image.ImagePairLoader.add_images", "hparams.get_from_anywhere", "hparams.get_from_anywhere", "mpunet.image.ImagePairLoader"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.fill", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.utils.get_data_queues", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.set_scaler_and_bg_values", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_from_anywhere", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.add_images", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_from_anywhere", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_from_anywhere"], ["def", "_base_loader_func", "(", "hparams", ",", "just_one", ",", "no_val", ",", "logger", ",", "mtype", ")", ":", "\n", "    ", "\"\"\"\n    Base loader function used for all models. This function performs a series\n    of actions:\n\n    1) Loads train, val and test data according to hparams\n    2) Performs a hparam audit on the training + validation images\n    3) If any audited parameters were not manually specified, updates the\n       hparams dict with the audited values and updates the YAML file on disk\n    4) If just_one, discards all but the first training and validation images\n    5) Initializes a ImageQueue object on the training and validation data\n       if needed.\n\n    Args:\n        hparams:   A mpunet.train.YAMLHParams object\n        just_one:  A bool specifying whether to keep only the first train and\n                   validation samples (for quick testing purposes)\n        no_val:    A bool specifying whether to omit validation data entirely\n                   Note: This setting applies even if validation data is\n                   specified in the YAMLHparams object\n        logger:    A mpunet.logger object\n        mtype:     A string identifier for the dimensionality of the model,\n                   currently either '2d', '3d'\n                   (upper/lower ignored)\n\n    Returns:\n        train_data: An ImagePairLoader object storing the training images\n        val_data:   An ImagePairLoader object storing the validation images, or\n                    an 'empty' ImagePairLoader storing no images if no_val=True\n        logger:     The passed logger object or a ScreenLogger object\n        auditor:    An auditor object storing statistics on the training data\n    \"\"\"", "\n", "\n", "# Get basic ScreenLogger if no logger is passed", "\n", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "logger", "(", "\"Looking for images...\"", ")", "\n", "\n", "# Get data loaders", "\n", "train_data", "=", "ImagePairLoader", "(", "logger", "=", "logger", ",", "**", "hparams", "[", "\"train_data\"", "]", ")", "\n", "val_data", "=", "ImagePairLoader", "(", "logger", "=", "logger", ",", "**", "hparams", "[", "\"val_data\"", "]", ")", "\n", "\n", "# Audit", "\n", "lab_paths", "=", "train_data", ".", "label_paths", "+", "val_data", ".", "label_paths", "\n", "auditor", "=", "Auditor", "(", "train_data", ".", "image_paths", "+", "val_data", ".", "image_paths", ",", "\n", "nii_lab_paths", "=", "lab_paths", ",", "logger", "=", "logger", ",", "\n", "dim_3d", "=", "hparams", ".", "get_from_anywhere", "(", "\"dim\"", ")", "or", "64", ",", "\n", "hparams", "=", "hparams", ")", "\n", "\n", "# Fill hparams with audited values, if not specified manually", "\n", "auditor", ".", "fill", "(", "hparams", ",", "mtype", ")", "\n", "\n", "# Add augmented data?", "\n", "if", "hparams", ".", "get", "(", "\"aug_data\"", ")", ":", "\n", "        ", "aug_data", "=", "hparams", "[", "\"aug_data\"", "]", "\n", "if", "\"include\"", "not", "in", "aug_data", ":", "\n", "            ", "logger", ".", "warn", "(", "\"Found 'aug_data' group, but the group does not \"", "\n", "\"contain the key 'include', which is required in \"", "\n", "\"version 2.0 and above. OBS: Not including aug data!\"", ")", "\n", "", "elif", "aug_data", "[", "\"include\"", "]", ":", "\n", "            ", "logger", "(", "\"\\n[*] Adding augmented data with weight \"", ",", "aug_data", "[", "\"sample_weight\"", "]", ")", "\n", "train_data", ".", "add_images", "(", "ImagePairLoader", "(", "logger", "=", "logger", ",", "**", "aug_data", ")", ")", "\n", "\n", "", "", "if", "just_one", ":", "\n", "# For testing purposes, run only on one train and one val image?", "\n", "        ", "logger", "(", "\"[**NOTTICE**] Only running on first train & val samples.\"", ")", "\n", "train_data", ".", "images", "=", "[", "train_data", ".", "images", "[", "0", "]", "]", "\n", "val_data", ".", "images", "=", "[", "val_data", ".", "images", "[", "0", "]", "]", "\n", "", "if", "no_val", ":", "\n", "# Run without performing validation (even if specified in param file)", "\n", "        ", "val_data", ".", "images", "=", "[", "]", "\n", "\n", "# Set per-image properties", "\n", "", "for", "dataset", "in", "(", "train_data", ",", "val_data", ")", ":", "\n", "        ", "logger", "(", "\"Preparing dataset {}\"", ".", "format", "(", "dataset", ")", ")", "\n", "dataset", ".", "set_scaler_and_bg_values", "(", "bg_value", "=", "hparams", ".", "get_from_anywhere", "(", "'bg_value'", ")", ",", "\n", "scaler", "=", "hparams", ".", "get_from_anywhere", "(", "'scaler'", ")", ",", "\n", "compute_now", "=", "False", ")", "\n", "\n", "", "from", "mpunet", ".", "image", ".", "queue", ".", "utils", "import", "get_data_queues", "\n", "max_loaded", "=", "hparams", "[", "'fit'", "]", ".", "get", "(", "'max_loaded'", ")", "\n", "train_queue", ",", "val_queue", "=", "get_data_queues", "(", "\n", "train_dataset", "=", "train_data", ",", "\n", "val_dataset", "=", "val_data", ",", "\n", "train_queue_type", "=", "'limitation'", "if", "max_loaded", "else", "\"eager\"", ",", "\n", "val_queue_type", "=", "'eager'", ",", "\n", "max_loaded", "=", "max_loaded", ",", "\n", "num_access_before_reload", "=", "hparams", "[", "'fit'", "]", ".", "get", "(", "'num_access'", ")", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "\n", "return", "train_queue", ",", "val_queue", ",", "logger", ",", "auditor", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.data_preparation_funcs.load_or_create_views": [[116, 155], ["isinstance", "logger", "numpy.savez", "plot_views", "os.path.join", "sample_random_views_with_angle_restriction", "isinstance", "os.path.join", "os.path.join", "numpy.load", "ValueError", "hparams[].get", "logger", "add_noise_to_views"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.plot_views", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.sample_random_views_with_angle_restriction", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.add_noise_to_views"], ["", "def", "load_or_create_views", "(", "hparams", ",", "continue_training", ",", "logger", ",", "base_path", ",", "auditor", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n\n    Args:\n\n    \"\"\"", "\n", "views", "=", "hparams", "[", "\"fit\"", "]", "[", "\"views\"", "]", "\n", "if", "not", "continue_training", ":", "\n", "        ", "if", "isinstance", "(", "views", ",", "int", ")", ":", "\n", "            ", "from", "mpunet", ".", "interpolation", ".", "sample_grid", "import", "sample_random_views_with_angle_restriction", "\n", "views", "=", "sample_random_views_with_angle_restriction", "(", "views", ",", "60", ",", "\n", "auditor", "=", "auditor", ",", "\n", "logger", "=", "logger", ")", "\n", "hparams", "[", "\"fit\"", "]", "[", "\"views\"", "]", "=", "views", "\n", "", "elif", "isinstance", "(", "views", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "not", "hparams", "[", "\"fit\"", "]", "[", "\"intrp_style\"", "]", "==", "\"iso_live\"", ":", "\n", "                ", "logger", "(", "\"[Note] Pre-adding noise to views (SD: %s)\"", "%", "\n", "hparams", "[", "\"fit\"", "]", "[", "\"noise_sd\"", "]", ")", "\n", "# Apply noise to views", "\n", "from", "mpunet", ".", "utils", "import", "add_noise_to_views", "\n", "hparams", "[", "\"fit\"", "]", "[", "\"views\"", "]", "=", "add_noise_to_views", "(", "hparams", "[", "\"fit\"", "]", "[", "\"views\"", "]", ",", "\n", "hparams", "[", "\"fit\"", "]", "[", "\"noise_sd\"", "]", ")", "\n", "hparams", "[", "\"fit\"", "]", "[", "\"noise_sd\"", "]", "=", "False", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid 'views' input '%s'. Must be list or \"", "\n", "\"single integer\"", "%", "views", ")", "\n", "", "logger", "(", "\"View SD:     %s\"", "%", "hparams", "[", "\"fit\"", "]", ".", "get", "(", "\"noise_sd\"", ")", ")", "\n", "\n", "# Save views", "\n", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"views\"", ")", ",", "hparams", "[", "\"fit\"", "]", "[", "\"views\"", "]", ")", "\n", "\n", "# Plot views", "\n", "from", "mpunet", ".", "utils", ".", "plotting", "import", "plot_views", "\n", "plot_views", "(", "views", ",", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"views.png\"", ")", ")", "\n", "", "else", ":", "\n", "# Fetch views from last session", "\n", "        ", "view_path", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "\"views.npz\"", ")", "\n", "hparams", "[", "\"fit\"", "]", "[", "\"views\"", "]", "=", "np", ".", "load", "(", "view_path", ")", "[", "\"arr_0\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.data_preparation_funcs.get_sequencers": [[157, 181], ["logger", "sequencers.append", "sequencers.append", "mpunet.sequences.utils.get_sequence"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.utils.get_sequence"], ["", "", "def", "get_sequencers", "(", "train_queue", ",", "val_queue", ",", "logger", ",", "hparams", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n\n    Args:\n\n    \"\"\"", "\n", "# Get Sequence generators", "\n", "logger", "(", "\"Preparing sequence objects...\"", ")", "\n", "sequencers", "=", "[", "]", "\n", "for", "queue", ",", "is_val", "in", "(", "(", "train_queue", ",", "False", ")", ",", "(", "val_queue", ",", "True", ")", ")", ":", "\n", "        ", "if", "not", "queue", ":", "\n", "            ", "sequencers", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "            ", "sequencers", ".", "append", "(", "get_sequence", "(", "\n", "data_queue", "=", "queue", ",", "\n", "is_validation", "=", "is_val", ",", "\n", "logger", "=", "logger", ",", "\n", "dim", "=", "hparams", "[", "\"build\"", "]", "[", "\"dim\"", "]", ",", "\n", "n_classes", "=", "hparams", "[", "\"build\"", "]", "[", "\"n_classes\"", "]", ",", "\n", "**", "hparams", "[", "\"fit\"", "]", "\n", ")", ")", "\n", "", "", "train", ",", "val", "=", "sequencers", "\n", "return", "train", ",", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.data_preparation_funcs.prepare_for_multi_view_unet": [[183, 212], ["data_preparation_funcs._base_loader_func", "data_preparation_funcs.load_or_create_views", "logger", "logger", "data_preparation_funcs.get_sequencers", "len", "str"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.data_preparation_funcs._base_loader_func", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.data_preparation_funcs.load_or_create_views", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.data_preparation_funcs.get_sequencers"], ["", "def", "prepare_for_multi_view_unet", "(", "hparams", ",", "just_one", "=", "False", ",", "no_val", "=", "False", ",", "\n", "continue_training", "=", "False", ",", "logger", "=", "None", ",", "\n", "base_path", "=", "'./'", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n\n    Args:\n\n    \"\"\"", "\n", "# Load the data", "\n", "train_queue", ",", "val_queue", ",", "logger", ",", "auditor", "=", "_base_loader_func", "(", "hparams", ",", "just_one", ",", "\n", "no_val", ",", "logger", ",", "\"2d\"", ")", "\n", "\n", "# Load or create a set of views (determined by 'continue_training')", "\n", "# This function will add the views to hparams[\"fit\"][\"views\"] and", "\n", "# store the views on disk at base_path/views.npz.", "\n", "load_or_create_views", "(", "hparams", "=", "hparams", ",", "\n", "continue_training", "=", "continue_training", ",", "\n", "logger", "=", "logger", ",", "\n", "base_path", "=", "base_path", ",", "\n", "auditor", "=", "auditor", ")", "\n", "\n", "# Print views in use", "\n", "logger", "(", "\"Views:       N=%i\"", "%", "len", "(", "hparams", "[", "\"fit\"", "]", "[", "\"views\"", "]", ")", ")", "\n", "logger", "(", "\"             %s\"", "%", "(", "(", "\" \"", "*", "13", ")", ".", "join", "(", "[", "str", "(", "v", ")", "+", "\"\\n\"", "for", "v", "in", "hparams", "[", "\"fit\"", "]", "[", "\"views\"", "]", "]", ")", ")", ")", "\n", "\n", "# Get Sequence generators", "\n", "train", ",", "val", "=", "get_sequencers", "(", "train_queue", ",", "val_queue", ",", "logger", ",", "hparams", ")", "\n", "return", "train", ",", "val", ",", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.data_preparation_funcs.prepare_for_3d_unet": [[214, 227], ["data_preparation_funcs._base_loader_func", "data_preparation_funcs.get_sequencers"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.data_preparation_funcs._base_loader_func", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.data_preparation_funcs.get_sequencers"], ["", "def", "prepare_for_3d_unet", "(", "hparams", ",", "just_one", "=", "False", ",", "no_val", "=", "False", ",", "logger", "=", "None", ",", "\n", "continue_training", "=", "None", ",", "base_path", "=", "\"./\"", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n\n    Args:\n\n    \"\"\"", "\n", "# Load the data", "\n", "train_queue", ",", "val_queue", ",", "logger", ",", "auditor", "=", "_base_loader_func", "(", "hparams", ",", "just_one", ",", "\n", "no_val", ",", "logger", ",", "\"3d\"", ")", "\n", "train", ",", "val", "=", "get_sequencers", "(", "train_queue", ",", "val_queue", ",", "logger", ",", "hparams", ")", "\n", "return", "train", ",", "val", ",", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.data_preparation_funcs.prepare_for_multi_task_2d": [[229, 306], ["NotImplementedError", "zip", "data_preparation_funcs.load_or_create_views", "MultiTaskSequence", "MultiTaskSequence", "YAMLHParams", "data_preparation_funcs._base_loader_func", "tasks.append", "tuple", "logger", "dict", "dict.update", "task[].get_sequencer", "task[].get_sequencer", "train_seqs.append", "val_seqs.append", "hparams[].values"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.data_preparation_funcs.load_or_create_views", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.data_preparation_funcs._base_loader_func"], ["", "def", "prepare_for_multi_task_2d", "(", "hparams", ",", "just_one", "=", "False", ",", "no_val", "=", "False", ",", "logger", "=", "None", ",", "\n", "continue_training", "=", "None", ",", "base_path", "=", "\"./\"", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n\n    Args:\n\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "'Multi task training is not yet implemented for mpunet>=0.2.6. '", "\n", "'Please raise an issue on GitHUb.'", "\n", ")", "\n", "from", "mpunet", ".", "hyperparameters", "import", "YAMLHParams", "\n", "# Get image loaders for all tasks", "\n", "tasks", "=", "[", "]", "\n", "for", "name", ",", "task_hparam_file", "in", "zip", "(", "*", "hparams", "[", "\"tasks\"", "]", ".", "values", "(", ")", ")", ":", "\n", "        ", "task_hparams", "=", "YAMLHParams", "(", "task_hparam_file", ")", "\n", "type_", "=", "'multi_task_2d'", "\n", "train_data", ",", "val_data", ",", "logger", ",", "auditor", "=", "_base_loader_func", "(", "task_hparams", ",", "\n", "just_one", ",", "\n", "no_val", ",", "\n", "logger", ",", "\n", "mtype", "=", "type_", ")", "\n", "\n", "task", "=", "{", "\n", "\"name\"", ":", "name", ",", "\n", "\"hparams\"", ":", "task_hparams", ",", "\n", "\"train\"", ":", "train_data", ",", "\n", "\"val\"", ":", "val_data", "\n", "}", "\n", "tasks", ".", "append", "(", "task", ")", "\n", "\n", "# Set various build hparams", "\n", "", "fetch", "=", "(", "\"n_classes\"", ",", "\"dim\"", ",", "\"n_channels\"", ",", "\n", "\"out_activation\"", ",", "\"biased_output_layer\"", ")", "\n", "field", "=", "\"task_specifics\"", "\n", "for", "f", "in", "fetch", ":", "\n", "        ", "hparams", "[", "\"build\"", "]", "[", "f", "]", "=", "tuple", "(", "[", "t", "[", "\"hparams\"", "]", "[", "field", "]", "[", "f", "]", "for", "t", "in", "tasks", "]", ")", "\n", "\n", "# Add task names to build dir", "\n", "", "hparams", "[", "\"build\"", "]", "[", "\"task_names\"", "]", "=", "hparams", "[", "\"tasks\"", "]", "[", "\"task_names\"", "]", "\n", "\n", "# Load or create a set of views (determined by 'continue_training')", "\n", "# This function will add the views to hparams[\"fit\"][\"views\"] and", "\n", "# store the views on disk at base_path/views.npz.", "\n", "load_or_create_views", "(", "hparams", "=", "hparams", ",", "\n", "continue_training", "=", "continue_training", ",", "\n", "logger", "=", "logger", ",", "\n", "base_path", "=", "base_path", ",", "\n", "auditor", "=", "None", ")", "\n", "\n", "# Get per-task sequences", "\n", "train_seqs", "=", "[", "]", "\n", "val_seqs", "=", "[", "]", "\n", "for", "task", "in", "tasks", ":", "\n", "        ", "logger", "(", "\"Fetching sequences for task %s\"", "%", "task", "[", "\"name\"", "]", ")", "\n", "\n", "# Create hparams dict that combines the common hparams and", "\n", "# task-specific hparams", "\n", "task_hparams", "=", "dict", "(", "hparams", "[", "\"fit\"", "]", ")", "\n", "task_hparams", ".", "update", "(", "task", "[", "\"hparams\"", "]", "[", "\"task_specifics\"", "]", ")", "\n", "\n", "# Get sequences for training and validation", "\n", "train", "=", "task", "[", "\"train\"", "]", ".", "get_sequencer", "(", "is_validation", "=", "False", ",", "**", "task_hparams", ")", "\n", "val", "=", "task", "[", "\"val\"", "]", ".", "get_sequencer", "(", "is_validation", "=", "True", ",", "**", "task_hparams", ")", "\n", "\n", "# Add to lists", "\n", "train_seqs", ".", "append", "(", "train", ")", "\n", "val_seqs", ".", "append", "(", "val", ")", "\n", "\n", "# Create the training and validation sequences", "\n", "# These will produce batches shared across the N tasks", "\n", "", "from", "mpunet", ".", "sequences", "import", "MultiTaskSequence", "\n", "train", "=", "MultiTaskSequence", "(", "train_seqs", ",", "hparams", "[", "\"build\"", "]", "[", "\"task_names\"", "]", ")", "\n", "val", "=", "MultiTaskSequence", "(", "val_seqs", ",", "hparams", "[", "\"build\"", "]", "[", "\"task_names\"", "]", ")", "\n", "\n", "return", "train", ",", "val", ",", "hparams", "\n", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.__init__.get_preprocessing_func": [[5, 22], ["ValueError", "PREPARATION_FUNCS.keys"], "function", ["None"], []], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.input_prep.one_hot_encode_y": [[4, 14], ["numpy.asarray", "input_prep.reshape_add_axis", "to_categorical().astype", "y.reshape.reshape", "len", "to_categorical"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.input_prep.reshape_add_axis"], ["def", "one_hot_encode_y", "(", "y", ",", "n_classes", "=", "135", ")", ":", "\n", "    ", "y", "=", "np", ".", "asarray", "(", "y", ")", "\n", "if", "n_classes", "==", "1", ":", "\n", "        ", "return", "reshape_add_axis", "(", "y", ",", "len", "(", "y", ".", "shape", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "from", "keras", ".", "utils", "import", "to_categorical", "\n", "shape", "=", "y", ".", "shape", "\n", "y", "=", "to_categorical", "(", "y", ",", "num_classes", "=", "n_classes", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "y", "=", "y", ".", "reshape", "(", "shape", "+", "(", "n_classes", ",", ")", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.input_prep.reshape_add_axis": [[16, 24], ["numpy.asarray", "X.reshape.reshape", "len", "X.reshape.reshape"], "function", ["None"], ["", "def", "reshape_add_axis", "(", "X", ",", "im_dims", "=", "2", ",", "n_channels", "=", "1", ")", ":", "\n", "    ", "X", "=", "np", ".", "asarray", "(", "X", ")", "\n", "if", "X", ".", "shape", "[", "-", "1", "]", "!=", "n_channels", ":", "\n", "# Reshape", "\n", "        ", "X", "=", "X", ".", "reshape", "(", "X", ".", "shape", "+", "(", "n_channels", ",", ")", ")", "\n", "", "if", "len", "(", "X", ".", "shape", ")", "==", "im_dims", "+", "1", ":", "\n", "        ", "X", "=", "X", ".", "reshape", "(", "(", "1", ",", ")", "+", "X", ".", "shape", ")", "\n", "", "return", "X", "\n", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.save_images": [[10, 60], ["logger", "enumerate", "mpunet.logging.ScreenLogger", "os.path.exists", "os.mkdir", "zip", "enumerate", "len", "len", "enumerate", "zip", "yy.reshape.reshape", "matplotlib.figure", "plt.figure.add_subplot", "plt.figure.add_subplot", "plotting.imshow_with_label_overlay", "fig.add_subplot.hist", "fig.add_subplot.set_title", "matplotlib.close", "xx.flatten", "numpy.testing.suppress_warnings", "sup.filter", "plt.figure.savefig", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.imshow_with_label_overlay"], ["def", "save_images", "(", "train", ",", "val", ",", "out_dir", ",", "logger", ")", ":", "\n", "    ", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "# Write a few images to disk", "\n", "im_path", "=", "out_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "im_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "im_path", ")", "\n", "\n", "# Sample two batches of training and (if passed) validation data", "\n", "", "training", "=", "[", "train", "[", "0", "]", ",", "train", "[", "1", "]", "]", "\n", "if", "val", "is", "not", "None", "and", "len", "(", "val", ")", "!=", "0", ":", "\n", "        ", "validation", "=", "[", "val", "[", "0", "]", ",", "val", "[", "1", "]", "]", "\n", "val_bs", "=", "val", ".", "batch_size", "\n", "", "else", ":", "\n", "        ", "validation", "=", "[", "None", "]", "*", "len", "(", "training", ")", "\n", "val_bs", "=", "0", "\n", "\n", "", "logger", "(", "\"Saving %i sample images in '<project_dir>/images' folder\"", "\n", "%", "(", "(", "train", ".", "batch_size", "+", "val_bs", ")", "*", "2", ")", ")", "\n", "for", "rr", ",", "(", "train_batch", ",", "val_batch", ")", "in", "enumerate", "(", "zip", "(", "training", ",", "validation", ")", ")", ":", "\n", "        ", "for", "k", ",", "temp", "in", "enumerate", "(", "(", "train_batch", ",", "val_batch", ")", ")", ":", "\n", "            ", "if", "temp", "is", "None", ":", "\n", "# No validation data", "\n", "                ", "continue", "\n", "", "X", ",", "Y", ",", "W", "=", "temp", "\n", "for", "i", ",", "(", "xx", ",", "yy", ",", "ww", ")", "in", "enumerate", "(", "zip", "(", "X", ",", "Y", ",", "W", ")", ")", ":", "\n", "                ", "yy", "=", "yy", ".", "reshape", "(", "xx", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "yy", ".", "shape", "[", "-", "1", "]", ",", ")", ")", "\n", "\n", "# Make figure", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "4", ")", ")", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "121", ")", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "122", ")", "\n", "\n", "# Plot image and overlayed labels", "\n", "chnl", ",", "view", ",", "_", "=", "imshow_with_label_overlay", "(", "ax1", ",", "xx", ",", "yy", ")", "\n", "\n", "# Plot histogram", "\n", "ax2", ".", "hist", "(", "xx", ".", "flatten", "(", ")", ",", "bins", "=", "200", ")", "\n", "\n", "# Set labels", "\n", "ax1", ".", "set_title", "(", "\"Channel %i - Axis %i - \"", "\n", "\"Weight %.3f\"", "%", "(", "chnl", ",", "view", ",", "ww", ")", ",", "size", "=", "18", ")", "\n", "\n", "# Get path", "\n", "out_path", "=", "im_path", "+", "\"/%s%i.png\"", "%", "(", "\"train\"", "if", "k", "==", "0", "else", "\n", "\"val\"", ",", "len", "(", "X", ")", "*", "rr", "+", "i", ")", "\n", "\n", "with", "np", ".", "testing", ".", "suppress_warnings", "(", ")", "as", "sup", ":", "\n", "                    ", "sup", ".", "filter", "(", "UserWarning", ")", "\n", "fig", ".", "savefig", "(", "out_path", ")", "\n", "", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.imshow": [[62, 110], ["numpy.moveaxis", "ax.imshow", "numpy.array", "numpy.all", "numpy.random.randint", "numpy.argmin", "numpy.random.randint", "numpy.random.randint", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.imshow"], ["", "", "", "", "def", "imshow", "(", "ax", ",", "image", ",", "channel", "=", "None", ",", "axis", "=", "None", ",", "slice", "=", "None", ",", "cmap", "=", "\"gray\"", ")", ":", "\n", "    ", "\"\"\"\n    Imshow an image of dim 2 or dim 3\n\n    Args:\n        ax:\n        image:\n        channel:\n        axis:\n        slice:\n        cmap:\n\n    Returns:\n\n    \"\"\"", "\n", "# Get channel to plot", "\n", "if", "channel", "is", "None", ":", "\n", "        ", "channel", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "image", ".", "shape", "[", "-", "1", "]", ",", "1", ")", "[", "0", "]", "\n", "\n", "# Get image channel", "\n", "", "image", "=", "image", "[", "...", ",", "channel", "]", "\n", "img_dims", "=", "image", ".", "ndim", "\n", "\n", "if", "img_dims", "==", "3", "and", "axis", "is", "None", ":", "\n", "        ", "shape", "=", "np", ".", "array", "(", "image", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "if", "np", ".", "all", "(", "shape", "==", "shape", "[", "0", "]", ")", ":", "\n", "            ", "axis", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "shape", ".", "ndim", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "axis", "=", "np", ".", "argmin", "(", "shape", ")", "\n", "", "", "elif", "axis", "is", "None", ":", "\n", "        ", "axis", "=", "0", "\n", "\n", "# Move the chosen axis forward", "\n", "", "image", "=", "np", ".", "moveaxis", "(", "image", ",", "axis", ",", "0", ")", "\n", "\n", "if", "img_dims", "==", "3", ":", "\n", "        ", "if", "slice", "is", "None", ":", "\n", "# Get a random slice around the middle of the axis", "\n", "            ", "slice", "=", "np", ".", "random", ".", "randint", "(", "0", "+", "(", "len", "(", "image", ")", "//", "3", ")", ",", "\n", "len", "(", "image", ")", "-", "(", "len", "(", "image", ")", "//", "3", ")", ",", "1", ")", "[", "0", "]", "\n", "", "im_slice", "=", "image", "[", "slice", "]", "\n", "", "else", ":", "\n", "        ", "im_slice", "=", "image", "\n", "\n", "# Imshow", "\n", "", "ax", ".", "imshow", "(", "im_slice", ",", "cmap", "=", "cmap", ")", "\n", "\n", "return", "channel", ",", "axis", ",", "slice", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.imshow_with_label_overlay": [[112, 155], ["plotting.imshow", "pred_to_class", "numpy.moveaxis", "numpy.ma.masked_where", "ax.imshow"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.imshow", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.pred_to_class", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.imshow"], ["", "def", "imshow_with_label_overlay", "(", "ax", ",", "image", ",", "label", ",", "channel", "=", "None", ",", "axis", "=", "None", ",", "\n", "slice", "=", "None", ",", "im_cmap", "=", "\"gray\"", ",", "lab_cmap", "=", "None", ",", "\n", "lab_alpha", "=", "0.7", ")", ":", "\n", "    ", "\"\"\"\n    Imshow an image of dim 2 or dim 3 with labels overlayed on a single ax\n\n    Args:\n        ax:\n        image:\n        label:\n        channel:\n        axis:\n        im_cmap:\n        lab_cmap:\n        lab_alpha:\n\n    Returns:\n\n    \"\"\"", "\n", "from", "mpunet", ".", "utils", "import", "pred_to_class", "\n", "\n", "# Plot the image", "\n", "channel", ",", "axis", ",", "slice", "=", "imshow", "(", "ax", ",", "image", ",", "channel", ",", "axis", ",", "slice", ",", "im_cmap", ")", "\n", "\n", "# Get int labels if needed, otherwise returns identity", "\n", "img_dims", "=", "image", ".", "ndim", "-", "1", "\n", "label", "=", "pred_to_class", "(", "label", ",", "img_dims", "=", "img_dims", ",", "has_batch_dim", "=", "False", ")", "\n", "\n", "# Move the chosen axis forward", "\n", "label", "=", "np", ".", "moveaxis", "(", "label", ",", "axis", ",", "0", ")", "\n", "\n", "if", "img_dims", "==", "3", ":", "\n", "        ", "lab_slice", "=", "label", "[", "slice", "]", "\n", "", "else", ":", "\n", "        ", "lab_slice", "=", "label", "\n", "\n", "# Overlay masked label image", "\n", "", "masked_lab", "=", "np", ".", "ma", ".", "masked_where", "(", "lab_slice", "==", "0", ",", "lab_slice", ")", "\n", "\n", "# Imshow labels", "\n", "ax", ".", "imshow", "(", "masked_lab", ",", "alpha", "=", "lab_alpha", ",", "cmap", "=", "lab_cmap", ")", "\n", "\n", "return", "channel", ",", "axis", ",", "slice", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.plot_all_training_curves": [[157, 182], ["mpunet.logging.ScreenLogger", "glob", "OSError", "os.path.split", "plotting.plot_training_curves", "len", "os.path.join", "RuntimeError", "logger.warn", "os.path.splitext", "os.path.split", "os.path.split"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.plot_training_curves", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn"], ["", "def", "plot_all_training_curves", "(", "glob_path", ",", "out_path", ",", "raise_error", "=", "False", ",", "\n", "logger", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "try", ":", "\n", "        ", "from", "glob", "import", "glob", "\n", "paths", "=", "glob", "(", "glob_path", ")", "\n", "if", "not", "paths", ":", "\n", "            ", "raise", "OSError", "(", "\"File pattern {} gave none or too many matches \"", "\"({})\"", ".", "format", "(", "glob_path", ",", "paths", ")", ")", "\n", "", "out_folder", "=", "os", ".", "path", ".", "split", "(", "out_path", ")", "[", "0", "]", "\n", "for", "p", "in", "paths", ":", "\n", "            ", "if", "len", "(", "paths", ")", ">", "1", ":", "\n", "# Set unique names", "\n", "                ", "uniq", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "split", "(", "p", ")", "[", "-", "1", "]", ")", "[", "0", "]", "\n", "f_name", "=", "uniq", "+", "\"_\"", "+", "os", ".", "path", ".", "split", "(", "out_path", ")", "[", "-", "1", "]", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "out_folder", ",", "f_name", ")", "\n", "", "else", ":", "\n", "                ", "save_path", "=", "out_path", "\n", "", "plot_training_curves", "(", "p", ",", "save_path", ",", "**", "kwargs", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "s", "=", "\"Could not plot training curves. ({})\"", ".", "format", "(", "e", ")", "\n", "if", "raise_error", ":", "\n", "            ", "raise", "RuntimeError", "(", "s", ")", "from", "e", "\n", "", "else", ":", "\n", "            ", "logger", ".", "warn", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.plot_training_curves": [[184, 258], ["pandas.read_csv", "matplotlib.figure", "plt.figure.add_subplot", "pd.read_csv.get", "fig.add_subplot.plot", "fig.add_subplot.legend", "ax2.legend.get_frame().set_linewidth", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_title", "plt.figure.add_subplot", "re.compile", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_title", "pd.read_csv.get", "plt.figure.tight_layout", "plt.figure.savefig", "matplotlib.close", "numpy.log10", "fig.add_subplot.plot", "fig.add_subplot.legend", "ax2.legend.get_frame().set_linewidth", "pd.read_csv.get", "plt.figure.add_subplot", "fig.add_subplot.step", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_title", "numpy.log10", "ax2.legend.get_frame", "any", "re.match", "fig.add_subplot.plot", "int", "ax2.legend.get_frame", "numpy.ceil"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["", "", "", "def", "plot_training_curves", "(", "csv_path", ",", "save_path", ",", "logy", "=", "False", ",", "\n", "exclude", "=", "(", "\"learning_rate\"", ",", "\"epoch\"", ",", "\"loss\"", ",", "\n", "\"epoch_minutes\"", ",", "\"train_hours\"", ",", "\n", "'memory_usage_gib'", ")", ",", "\n", "include_regex", "=", "None", ")", ":", "\n", "# Read CSV file", "\n", "    ", "df", "=", "pd", ".", "read_csv", "(", "csv_path", ")", "\n", "\n", "# Prepare plot", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "311", ")", "\n", "\n", "# Get epoch, training and validation loss vectors", "\n", "epochs", "=", "df", "[", "\"epoch\"", "]", "+", "1", "\n", "train_loss", "=", "df", "[", "\"loss\"", "]", "\n", "val_loss", "=", "df", ".", "get", "(", "\"val_loss\"", ")", "\n", "\n", "if", "logy", ":", "\n", "        ", "train_loss", "=", "np", ".", "log10", "(", "train_loss", ")", "\n", "if", "val_loss", "is", "not", "None", ":", "\n", "            ", "val_loss", "=", "np", ".", "log10", "(", "val_loss", ")", "\n", "\n", "# Plot", "\n", "", "", "ax1", ".", "plot", "(", "epochs", ",", "train_loss", ",", "lw", "=", "3", ",", "color", "=", "\"darkblue\"", ",", "label", "=", "\"Training loss\"", ")", "\n", "if", "val_loss", "is", "not", "None", ":", "\n", "        ", "ax1", ".", "plot", "(", "epochs", ",", "val_loss", ",", "lw", "=", "3", ",", "color", "=", "\"darkred\"", ",", "label", "=", "\"Validation loss\"", ")", "\n", "\n", "# Add legend, labels and title", "\n", "", "leg", "=", "ax1", ".", "legend", "(", "loc", "=", "0", ")", "\n", "leg", ".", "get_frame", "(", ")", ".", "set_linewidth", "(", "0", ")", "\n", "ax1", ".", "set_xlabel", "(", "\"Epoch\"", ",", "size", "=", "16", ")", "\n", "ax1", ".", "set_ylabel", "(", "\"Loss\"", "if", "not", "logy", "else", "\"$\\log_{10}$(Loss)\"", ",", "size", "=", "16", ")", "\n", "ax1", ".", "set_title", "(", "\"Training %sloss\"", "%", "(", "\"and validation \"", "if", "val_loss", "is", "not", "None", "else", "\"\"", ")", ",", "size", "=", "20", ")", "\n", "\n", "# Make second plot", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "312", ")", "\n", "\n", "# Get all other columns, optionally only if matching 'include_regex'", "\n", "import", "re", "\n", "include_regex", "=", "re", ".", "compile", "(", "include_regex", "or", "\".*\"", ")", "\n", "\n", "plotted", "=", "0", "\n", "for", "col", "in", "df", ".", "columns", ":", "\n", "        ", "if", "any", "(", "[", "s", "in", "col", "for", "s", "in", "exclude", "[", "1", ":", "]", "]", ")", "or", "col", "==", "\"lr\"", ":", "\n", "            ", "continue", "\n", "", "elif", "not", "re", ".", "match", "(", "include_regex", ",", "col", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "plotted", "+=", "1", "\n", "ax2", ".", "plot", "(", "epochs", ",", "df", "[", "col", "]", ",", "label", "=", "col", ",", "lw", "=", "2", ")", "\n", "\n", "# Add legend, labels and title", "\n", "", "", "if", "plotted", "<=", "8", ":", "\n", "# Otherwise it takes up all the space", "\n", "        ", "leg", "=", "ax2", ".", "legend", "(", "loc", "=", "0", ",", "ncol", "=", "int", "(", "np", ".", "ceil", "(", "plotted", "/", "5", ")", ")", ")", "\n", "leg", ".", "get_frame", "(", ")", ".", "set_linewidth", "(", "0", ")", "\n", "", "ax2", ".", "set_xlabel", "(", "\"Epoch\"", ",", "size", "=", "16", ")", "\n", "ax2", ".", "set_ylabel", "(", "\"Metric\"", ",", "size", "=", "16", ")", "\n", "ax2", ".", "set_title", "(", "\"Training and validation metrics\"", ",", "size", "=", "20", ")", "\n", "\n", "# Plot learning rate", "\n", "lr", "=", "df", ".", "get", "(", "\"lr\"", ")", "\n", "if", "lr", "is", "None", ":", "\n", "        ", "lr", "=", "df", ".", "get", "(", "\"learning_rate\"", ")", "\n", "", "if", "lr", "is", "not", "None", ":", "\n", "        ", "ax3", "=", "fig", ".", "add_subplot", "(", "313", ")", "\n", "ax3", ".", "step", "(", "epochs", ",", "lr", ")", "\n", "ax3", ".", "set_xlabel", "(", "\"Epoch\"", ",", "size", "=", "16", ")", "\n", "ax3", ".", "set_ylabel", "(", "\"Learning Rate\"", ",", "size", "=", "16", ")", "\n", "ax3", ".", "set_title", "(", "\"Learning Rate\"", ",", "size", "=", "20", ")", "\n", "\n", "", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "save_path", ")", "\n", "plt", ".", "close", "(", "fig", ".", "number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.plot_views": [[260, 304], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_zlim", "numpy.linspace", "numpy.linspace", "numpy.outer", "numpy.outer", "numpy.outer", "numpy.zeros_like", "fig.add_subplot.plot_surface", "fig.add_subplot.plot_surface", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.view_init", "fig.add_subplot.grid", "fig.add_subplot.axis", "plt.figure.savefig", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.ones", "numpy.cos", "numpy.random.rand", "fig.add_subplot.scatter", "fig.add_subplot.scatter", "fig.add_subplot.plot", "fig.add_subplot.plot", "numpy.size"], "function", ["None"], ["", "def", "plot_views", "(", "views", ",", "out_path", ")", ":", "\n", "    ", "from", "mpl_toolkits", ".", "mplot3d", "import", "Axes3D", "\n", "\n", "# Create figure, 3D", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "\"3d\"", ")", "\n", "\n", "# Set axes", "\n", "ax", ".", "set_xlim", "(", "-", "0.6", ",", "0.6", ")", "\n", "ax", ".", "set_ylim", "(", "-", "0.6", ",", "0.6", ")", "\n", "ax", ".", "set_zlim", "(", "-", "0.6", ",", "0.6", ")", "\n", "\n", "# Plot unit sphere", "\n", "u", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "100", ")", "\n", "v", "=", "np", ".", "linspace", "(", "0", ",", "np", ".", "pi", ",", "100", ")", "\n", "\n", "x", "=", "np", ".", "outer", "(", "np", ".", "cos", "(", "u", ")", ",", "np", ".", "sin", "(", "v", ")", ")", "\n", "y", "=", "np", ".", "outer", "(", "np", ".", "sin", "(", "u", ")", ",", "np", ".", "sin", "(", "v", ")", ")", "\n", "z", "=", "np", ".", "outer", "(", "np", ".", "ones", "(", "np", ".", "size", "(", "u", ")", ")", ",", "np", ".", "cos", "(", "v", ")", ")", "\n", "z_f", "=", "np", ".", "zeros_like", "(", "y", ")", "\n", "\n", "ax", ".", "plot_surface", "(", "x", ",", "y", ",", "z", ",", "alpha", "=", "0.1", ",", "color", "=", "\"darkgray\"", ")", "\n", "ax", ".", "plot_surface", "(", "x", ",", "y", ",", "z_f", ",", "alpha", "=", "0.1", ",", "color", "=", "\"black\"", ")", "\n", "\n", "# Plot basis axes", "\n", "ax", ".", "plot", "(", "[", "-", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "color", "=", "\"blue\"", ",", "linewidth", "=", "0.7", ")", "\n", "ax", ".", "plot", "(", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", ",", "color", "=", "\"red\"", ",", "linewidth", "=", "0.7", ")", "\n", "ax", ".", "plot", "(", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "-", "1", ",", "1", "]", ",", "color", "=", "\"green\"", ",", "linewidth", "=", "0.7", ")", "\n", "\n", "# Plot views", "\n", "for", "v", "in", "views", ":", "\n", "        ", "c", "=", "np", ".", "random", ".", "rand", "(", "3", ",", ")", "\n", "ax", ".", "scatter", "(", "*", "v", ",", "s", "=", "50", ",", "color", "=", "c", ")", "\n", "ax", ".", "scatter", "(", "*", "v", ",", "s", "=", "50", ",", "color", "=", "c", ")", "\n", "ax", ".", "plot", "(", "[", "0", ",", "v", "[", "0", "]", "]", ",", "[", "0", ",", "v", "[", "1", "]", "]", ",", "[", "0", ",", "v", "[", "2", "]", "]", ",", "color", "=", "c", ",", "linewidth", "=", "2", ")", "\n", "\n", "# Plot dashed line to XY plane", "\n", "ax", ".", "plot", "(", "[", "v", "[", "0", "]", ",", "v", "[", "0", "]", "]", ",", "[", "v", "[", "1", "]", ",", "v", "[", "1", "]", "]", ",", "[", "0", ",", "v", "[", "2", "]", "]", ",", "color", "=", "\"gray\"", ",", "\n", "linewidth", "=", "1", ",", "linestyle", "=", "\"--\"", ")", "\n", "\n", "", "ax", ".", "view_init", "(", "30", ",", "-", "45", ")", "\n", "ax", ".", "grid", "(", "False", ")", "\n", "ax", ".", "axis", "(", "\"off\"", ")", "\n", "fig", ".", "savefig", "(", "out_path", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.decorators.accepts": [[5, 32], ["inspect.signature", "functools.wraps", "len", "len", "enumerate", "function", "zip", "isinstance", "isinstance", "ValueError", "isinstance", "type"], "function", ["None"], ["def", "accepts", "(", "*", "types", ")", ":", "\n", "    ", "def", "decorator", "(", "function", ")", ":", "\n", "        ", "_types", "=", "types", "\n", "f_sig", "=", "signature", "(", "function", ")", "\n", "if", "\"self\"", "in", "f_sig", ".", "parameters", ":", "\n", "            ", "_types", "=", "(", "object", ",", ")", "+", "_types", "\n", "", "assert", "len", "(", "_types", ")", "==", "len", "(", "f_sig", ".", "parameters", ")", "\n", "\n", "@", "wraps", "(", "function", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "for", "i", ",", "(", "o", ",", "t", ")", "in", "enumerate", "(", "zip", "(", "args", ",", "_types", ")", ")", ":", "\n", "                ", "valid", "=", "False", "\n", "if", "isinstance", "(", "t", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "                    ", "for", "tt", "in", "t", ":", "\n", "                        ", "if", "isinstance", "(", "o", ",", "tt", ")", ":", "\n", "                            ", "valid", "=", "True", "\n", "", "", "", "else", ":", "\n", "                    ", "if", "isinstance", "(", "o", ",", "t", ")", ":", "\n", "                        ", "valid", "=", "True", "\n", "", "", "if", "not", "valid", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Invalid input passed to '%s'. \"", "\n", "\"Expected type(s) %s (got %s)\"", "%", "(", "function", ".", "__name__", ",", "\n", "t", ",", "\n", "type", "(", "o", ")", ".", "__name__", ")", ")", "\n", "", "", "return", "function", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapper", "\n", "", "return", "decorator", "\n", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.system.GPUMonitor.__init__": [[10, 23], ["mpunet.logging.ScreenLogger", "multiprocessing.Event", "multiprocessing.Event", "multiprocessing.Event", "multiprocessing.Queue", "multiprocessing.Process.__init__", "system.GPUMonitor.start"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.start"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "=", "ScreenLogger", "(", ")", "\n", "\n", "# Prepare signal", "\n", "self", ".", "stop_signal", "=", "Event", "(", ")", "\n", "self", ".", "run_signal", "=", "Event", "(", ")", "\n", "self", ".", "set_signal", "=", "Event", "(", ")", "\n", "\n", "# Stores list of available GPUs", "\n", "self", ".", "_free_GPUs", "=", "Queue", "(", ")", "\n", "\n", "super", "(", "GPUMonitor", ",", "self", ")", ".", "__init__", "(", "target", "=", "self", ".", "_monitor", ")", "\n", "self", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.system.GPUMonitor.stop": [[24, 26], ["system.GPUMonitor.stop_signal.set"], "methods", ["None"], ["", "def", "stop", "(", "self", ")", ":", "\n", "        ", "self", ".", "stop_signal", ".", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.system.GPUMonitor._monitor": [[27, 52], ["system.GPUMonitor.stop_signal.is_set", "system.GPUMonitor.run_signal.is_set", "system.GPUMonitor._free_GPUs.empty", "mpunet.utils.utils.get_free_gpus", "system.GPUMonitor._free_GPUs.put", "system.GPUMonitor.set_signal.set", "system.GPUMonitor.run_signal.clear", "time.sleep", "system.GPUMonitor.set_signal.clear", "len", "system.GPUMonitor._free_GPUs.put"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_free_gpus"], ["", "def", "_monitor", "(", "self", ")", ":", "\n", "        ", "while", "not", "self", ".", "stop_signal", ".", "is_set", "(", ")", ":", "\n", "            ", "if", "self", ".", "run_signal", ".", "is_set", "(", ")", ":", "\n", "# Empty queue, just in case...?", "\n", "                ", "self", ".", "_free_GPUs", ".", "empty", "(", ")", "\n", "\n", "# Get free GPUs", "\n", "free", "=", "get_free_gpus", "(", ")", "\n", "\n", "# Add number of elements that will be put in the queue as first", "\n", "# element to be read from main process", "\n", "self", ".", "_free_GPUs", ".", "put", "(", "len", "(", "free", ")", ")", "\n", "\n", "# Add available GPUs to queue", "\n", "for", "g", "in", "free", ":", "\n", "                    ", "self", ".", "_free_GPUs", ".", "put", "(", "g", ")", "\n", "\n", "# Set the signal that main process can start reading queue", "\n", "", "self", ".", "set_signal", ".", "set", "(", ")", "\n", "\n", "# Stop run signal for this process", "\n", "self", ".", "run_signal", ".", "clear", "(", ")", "\n", "", "else", ":", "\n", "                ", "time", ".", "sleep", "(", "0.5", ")", "\n", "self", ".", "set_signal", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.system.GPUMonitor.free_GPUs": [[53, 63], ["system.GPUMonitor.run_signal.set", "range", "system.GPUMonitor.set_signal.is_set", "time.sleep", "system.GPUMonitor._free_GPUs.get", "free.append", "system.GPUMonitor._free_GPUs.get"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["", "", "", "@", "property", "\n", "def", "free_GPUs", "(", "self", ")", ":", "\n", "        ", "self", ".", "run_signal", ".", "set", "(", ")", "\n", "while", "not", "self", ".", "set_signal", ".", "is_set", "(", ")", ":", "\n", "            ", "time", ".", "sleep", "(", "0.2", ")", "\n", "\n", "", "free", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "_free_GPUs", ".", "get", "(", ")", ")", ":", "\n", "            ", "free", ".", "append", "(", "self", ".", "_free_GPUs", ".", "get", "(", ")", ")", "\n", "", "return", "free", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.system.GPUMonitor.get_free_GPUs": [[64, 66], ["mpunet.utils.utils._get_free_gpu"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils._get_free_gpu"], ["", "def", "get_free_GPUs", "(", "self", ",", "N", ")", ":", "\n", "        ", "return", "_get_free_gpu", "(", "self", ".", "free_GPUs", ",", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.system.GPUMonitor.await_and_set_free_GPU": [[67, 85], ["system.GPUMonitor.logger", "system.GPUMonitor.logger", "system.GPUMonitor.stop", "system.GPUMonitor.get_free_GPUs", "system.GPUMonitor.logger", "system.GPUMonitor.logger", "time.sleep"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.stop", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.system.GPUMonitor.get_free_GPUs"], ["", "def", "await_and_set_free_GPU", "(", "self", ",", "N", "=", "0", ",", "sleep_seconds", "=", "60", ",", "stop_after", "=", "False", ")", ":", "\n", "        ", "cuda_visible_dev", "=", "\"\"", "\n", "if", "N", "!=", "0", ":", "\n", "            ", "self", ".", "logger", "(", "\"Waiting for free GPU.\"", ")", "\n", "found_gpu", "=", "False", "\n", "while", "not", "found_gpu", ":", "\n", "                ", "cuda_visible_dev", "=", "self", ".", "get_free_GPUs", "(", "N", "=", "N", ")", "\n", "if", "cuda_visible_dev", ":", "\n", "                    ", "self", ".", "logger", "(", "\"Found free GPU: %s\"", "%", "cuda_visible_dev", ")", "\n", "found_gpu", "=", "True", "\n", "", "else", ":", "\n", "                    ", "self", ".", "logger", "(", "\"No available GPUs... Sleeping %i seconds.\"", "%", "sleep_seconds", ")", "\n", "time", ".", "sleep", "(", "sleep_seconds", ")", "\n", "", "", "", "else", ":", "\n", "            ", "self", ".", "logger", "(", "\"Using CPU based computations only!\"", ")", "\n", "", "self", ".", "set_GPUs", "=", "cuda_visible_dev", "\n", "if", "stop_after", ":", "\n", "            ", "self", ".", "stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.system.GPUMonitor.num_currently_visible": [[86, 89], ["len", "system.GPUMonitor.set_GPUs.strip().split", "system.GPUMonitor.set_GPUs.strip"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "num_currently_visible", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "set_GPUs", ".", "strip", "(", ")", ".", "split", "(", "\",\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.system.GPUMonitor.set_GPUs": [[97, 100], ["mpunet.utils.utils.set_gpu"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.set_gpu"], ["", "", "@", "set_GPUs", ".", "setter", "\n", "def", "set_GPUs", "(", "self", ",", "GPUs", ")", ":", "\n", "        ", "set_gpu", "(", "GPUs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.system.GPUMonitor.set_and_stop": [[101, 104], ["system.GPUMonitor.stop"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.stop"], ["", "def", "set_and_stop", "(", "self", ",", "GPUs", ")", ":", "\n", "        ", "self", ".", "set_GPUs", "=", "GPUs", "\n", "self", ".", "stop", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.conv_arithmetics.expand_to_dim": [[4, 15], ["isinstance", "expanded.append", "isinstance", "list", "len", "numpy.array"], "function", ["None"], ["def", "expand_to_dim", "(", "values", ",", "dim", ")", ":", "\n", "    ", "expanded", "=", "[", "]", "\n", "for", "v", "in", "values", ":", "\n", "        ", "if", "not", "isinstance", "(", "v", ",", "(", "tuple", ",", "list", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "            ", "v", "=", "[", "v", "]", "\n", "", "if", "isinstance", "(", "v", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "v", "=", "list", "(", "v", ")", "\n", "", "if", "len", "(", "v", ")", "!=", "dim", ":", "\n", "            ", "v", "*=", "dim", "\n", "", "expanded", ".", "append", "(", "np", ".", "array", "(", "v", ")", ")", "\n", "", "return", "expanded", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.conv_arithmetics.output_features": [[17, 26], ["print", "conv_arithmetics.expand_to_dim", "numpy.floor().astype", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.conv_arithmetics.expand_to_dim"], ["", "def", "output_features", "(", "in_filter_size", ",", "padding", ",", "kernel_size", ",", "stride", "=", "1", ",", "dim", "=", "2", ")", ":", "\n", "    ", "print", "(", "\"\"", ")", "\n", "in_filter_size", ",", "padding", ",", "kernel_size", ",", "stride", "=", "expand_to_dim", "(", "[", "in_filter_size", ",", "\n", "padding", ",", "\n", "kernel_size", ",", "\n", "stride", "]", ",", "\n", "dim", "=", "dim", ")", "\n", "\n", "return", "np", ".", "floor", "(", "(", "in_filter_size", "+", "(", "2", "*", "padding", ")", "-", "kernel_size", ")", "/", "stride", ")", ".", "astype", "(", "np", ".", "int", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.conv_arithmetics.output_feature_distance": [[28, 32], ["conv_arithmetics.expand_to_dim"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.conv_arithmetics.expand_to_dim"], ["", "def", "output_feature_distance", "(", "input_feature_distance", ",", "stride", ",", "dim", "=", "2", ")", ":", "\n", "    ", "input_feature_distance", ",", "stride", "=", "expand_to_dim", "(", "[", "input_feature_distance", ",", "\n", "stride", "]", ",", "dim", "=", "dim", ")", "\n", "return", "input_feature_distance", "*", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.conv_arithmetics.output_receptive_field": [[34, 42], ["conv_arithmetics.expand_to_dim"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.conv_arithmetics.expand_to_dim"], ["", "def", "output_receptive_field", "(", "input_receptive_field", ",", "kernel_size", ",", "\n", "input_feature_distacne", ",", "dim", "=", "2", ")", ":", "\n", "    ", "input_receptive_field", ",", "kernel_size", ",", "input_feature_distacne", "=", "expand_to_dim", "(", "[", "input_receptive_field", ",", "\n", "kernel_size", ",", "\n", "input_feature_distacne", "]", ",", "\n", "dim", "=", "dim", ")", "\n", "return", "input_receptive_field", "+", "(", "kernel_size", "-", "1", ")", "*", "input_feature_distacne", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.conv_arithmetics.output_first_feature_center": [[44, 55], ["conv_arithmetics.expand_to_dim"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.conv_arithmetics.expand_to_dim"], ["", "def", "output_first_feature_center", "(", "input_first_feature_center", ",", "kernel_size", ",", "\n", "padding", ",", "input_feature_distance", ",", "dim", "=", "2", ")", ":", "\n", "    ", "input_first_feature_center", ",", "kernel_size", ",", "padding", ",", "input_feature_distance", "=", "expand_to_dim", "(", "[", "input_first_feature_center", ",", "\n", "kernel_size", ",", "padding", ",", "\n", "input_feature_distance", "]", ",", "\n", "dim", "=", "dim", ")", "\n", "\n", "return", "input_first_feature_center", "+", "(", "(", "kernel_size", "-", "1", ")", "/", "2", "-", "padding", ")", "*", "input_feature_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.conv_arithmetics.compute_receptive_fields": [[57, 116], ["len", "enumerate", "input_.input.get_shape().as_list", "numpy.array", "hasattr", "numpy.where", "numpy.array", "conv_arithmetics.output_feature_distance", "conv_arithmetics.output_receptive_field", "values.append", "numpy.array().astype", "numpy.array", "print", "print", "print", "print", "input_.input.get_shape", "numpy.ones", "layer.output.get_shape().as_list", "numpy.array", "dilation[].argmax", "tuple", "layer.output.get_shape", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.conv_arithmetics.output_feature_distance", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.conv_arithmetics.output_receptive_field"], ["", "def", "compute_receptive_fields", "(", "layers", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "input_", "=", "layers", "[", "0", "]", "\n", "layers", "=", "layers", "[", "1", ":", "]", "\n", "size", "=", "input_", ".", "input", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "-", "1", "]", "\n", "dim", "=", "len", "(", "size", ")", "\n", "\n", "# Set first layer parameters", "\n", "receptive_field", "=", "1", "\n", "jump", "=", "1", "\n", "\n", "# Loop over all layers", "\n", "values", "=", "[", "]", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "layers", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "kernel_size", "=", "layer", ".", "kernel_size", "\n", "", "except", "AttributeError", "as", "e", ":", "\n", "            ", "try", ":", "\n", "# Pooling layer?", "\n", "                ", "kernel_size", "=", "layer", ".", "pool_size", "\n", "", "except", "AttributeError", ":", "\n", "# Batch norm, flatten etc.", "\n", "                ", "continue", "\n", "", "", "kernel_size", "=", "np", ".", "array", "(", "kernel_size", ")", "\n", "\n", "# Get potential dilation rates", "\n", "try", ":", "\n", "            ", "dilation", "=", "np", ".", "array", "(", "layer", ".", "dilation_rate", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "dilation", "=", "np", ".", "ones", "(", "shape", "=", "[", "dim", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "", "if", "hasattr", "(", "layer", ",", "\"dilations\"", ")", ":", "\n", "            ", "assert", "(", "dilation", "==", "1", ")", ".", "all", "(", ")", "\n", "dilation", "=", "np", ".", "array", "(", "layer", ".", "dilations", ")", "\n", "dilation", "=", "dilation", "[", "dilation", "[", ":", ",", "0", "]", ".", "argmax", "(", ")", "]", "\n", "\n", "# Get strides", "\n", "", "stride", "=", "layer", ".", "strides", "\n", "\n", "# Get kernel size taking into account dilation rate", "\n", "ks", "=", "kernel_size", "*", "dilation", "\n", "m", "=", "np", ".", "where", "(", "dilation", ">", "1", ")", "\n", "ks", "[", "m", "]", "-=", "(", "dilation", "[", "m", "]", "-", "1", ")", "\n", "\n", "size", "=", "np", ".", "array", "(", "layer", ".", "output", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "-", "1", "]", ")", "\n", "jump", "=", "output_feature_distance", "(", "jump", ",", "stride", ",", "dim", ")", "\n", "receptive_field", "=", "output_receptive_field", "(", "receptive_field", ",", "ks", ",", "jump", ",", "dim", ")", "\n", "\n", "# Add to list", "\n", "values", ".", "append", "(", "(", "size", ",", "jump", ",", "receptive_field", ")", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "s", "=", "\"\\nLayer %i %s(kernel_size=%s, stride=%s, dilation=%s)\"", "%", "(", "i", "+", "1", ",", "layer", ".", "__class__", ".", "__name__", ",", "kernel_size", ",", "\n", "stride", ",", "tuple", "(", "dilation", ")", ")", "\n", "print", "(", "s", "+", "\"\\n\"", "+", "\"-\"", "*", "(", "len", "(", "s", ")", "-", "1", ")", ")", "\n", "print", "(", "\"Num feature:\"", ".", "ljust", "(", "25", ")", ",", "size", ")", "\n", "print", "(", "\"Feature distance:\"", ".", "ljust", "(", "25", ")", ",", "jump", ")", "\n", "print", "(", "\"Receptive field:\"", ".", "ljust", "(", "25", ")", ",", "receptive_field", ")", "\n", "\n", "", "", "return", "values", "\n", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.DummyContext.__enter__": [[306, 307], ["None"], "methods", ["None"], ["    ", "def", "__enter__", "(", "self", ")", ":", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.DummyContext.__exit__": [[308, 309], ["None"], "methods", ["None"], ["def", "__exit__", "(", "*", "x", ")", ":", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils._get_system_wide_set_gpus": [[8, 13], ["os.environ.get", "allowed_gpus.replace().split.replace().split", "allowed_gpus.replace().split.replace"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["def", "_get_system_wide_set_gpus", "(", ")", ":", "\n", "    ", "allowed_gpus", "=", "os", ".", "environ", ".", "get", "(", "\"CUDA_VISIBLE_DEVICES\"", ")", "\n", "if", "allowed_gpus", ":", "\n", "        ", "allowed_gpus", "=", "allowed_gpus", ".", "replace", "(", "\" \"", ",", "\"\"", ")", ".", "split", "(", "\",\"", ")", "\n", "", "return", "allowed_gpus", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_free_gpus": [[15, 45], ["utils._get_system_wide_set_gpus", "print", "check_output", "numpy.array", "check_output", "re.findall", "list", "list", "re.findall", "len", "len", "map", "FileNotFoundError", "int"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils._get_system_wide_set_gpus"], ["", "def", "get_free_gpus", "(", "max_allowed_mem_usage", "=", "400", ")", ":", "\n", "# Check if allowed GPUs are set in CUDA_VIS_DEV.", "\n", "    ", "allowed_gpus", "=", "_get_system_wide_set_gpus", "(", ")", "\n", "if", "allowed_gpus", ":", "\n", "        ", "print", "(", "\"[OBS] Considering only system-wise allowed GPUs: {} (set in\"", "\n", "\" CUDA_VISIBLE_DEVICES env variable).\"", ".", "format", "(", "allowed_gpus", ")", ")", "\n", "return", "allowed_gpus", "\n", "# Else, check GPUs on the system and assume all non-used (mem. use less", "\n", "# than max_allowed_mem_usage) is fair game.", "\n", "", "from", "subprocess", "import", "check_output", "\n", "try", ":", "\n", "# Get list of GPUs", "\n", "        ", "gpu_list", "=", "check_output", "(", "[", "\"nvidia-smi\"", ",", "\"-L\"", "]", ",", "universal_newlines", "=", "True", ")", "\n", "gpu_ids", "=", "np", ".", "array", "(", "re", ".", "findall", "(", "r\"GPU[ ]+(\\d+)\"", ",", "gpu_list", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "# Query memory usage stats from nvidia-smi", "\n", "output", "=", "check_output", "(", "[", "\"nvidia-smi\"", ",", "\"-q\"", ",", "\"-d\"", ",", "\"MEMORY\"", "]", ",", "\n", "universal_newlines", "=", "True", ")", "\n", "\n", "# Fetch the memory usage of each GPU", "\n", "mem_usage", "=", "re", ".", "findall", "(", "r\"FB Memory Usage.*?Used[ ]+:[ ]+(\\d+)\"", ",", "\n", "output", ",", "flags", "=", "re", ".", "DOTALL", ")", "\n", "assert", "len", "(", "gpu_ids", ")", "==", "len", "(", "mem_usage", ")", "\n", "\n", "# Return all GPU ids for which the memory usage is exactly 0", "\n", "free", "=", "list", "(", "map", "(", "lambda", "x", ":", "int", "(", "x", ")", "<=", "max_allowed_mem_usage", ",", "mem_usage", ")", ")", "\n", "return", "list", "(", "gpu_ids", "[", "free", "]", ")", "\n", "", "except", "FileNotFoundError", "as", "e", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\"[ERROR] nvidia-smi is not installed. \"", "\n", "\"Consider setting the --num_GPUs=0 flag.\"", ")", "from", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils._get_free_gpu": [[47, 53], ["map", "OSError"], "function", ["None"], ["", "", "def", "_get_free_gpu", "(", "free_GPUs", ",", "N", "=", "1", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "free_gpu", "=", "\",\"", ".", "join", "(", "map", "(", "str", ",", "free_GPUs", "[", "0", ":", "N", "]", ")", ")", "\n", "", "except", "IndexError", "as", "e", ":", "\n", "        ", "raise", "OSError", "(", "\"No GPU available.\"", ")", "from", "e", "\n", "", "return", "free_gpu", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_free_gpu": [[55, 58], ["utils.get_free_gpus", "utils._get_free_gpu"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_free_gpus", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils._get_free_gpu"], ["", "def", "get_free_gpu", "(", "N", "=", "1", ")", ":", "\n", "    ", "free", "=", "get_free_gpus", "(", ")", "\n", "return", "_get_free_gpu", "(", "free", ",", "N", "=", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.await_and_set_free_gpu": [[60, 76], ["utils.set_gpu", "logger", "utils.get_free_gpu", "logger", "logger", "sleep"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.set_gpu", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_free_gpu"], ["", "def", "await_and_set_free_gpu", "(", "N", "=", "1", ",", "sleep_seconds", "=", "60", ",", "logger", "=", "None", ")", ":", "\n", "    ", "gpu", "=", "\"\"", "\n", "if", "N", "!=", "0", ":", "\n", "        ", "from", "time", "import", "sleep", "\n", "logger", "=", "logger", "or", "print", "\n", "logger", "(", "\"Waiting for free GPU.\"", ")", "\n", "found_gpu", "=", "False", "\n", "while", "not", "found_gpu", ":", "\n", "            ", "gpu", "=", "get_free_gpu", "(", "N", "=", "N", ")", "\n", "if", "gpu", ":", "\n", "                ", "logger", "(", "\"Found free GPU: %s\"", "%", "gpu", ")", "\n", "found_gpu", "=", "True", "\n", "", "else", ":", "\n", "                ", "logger", "(", "\"No available GPUs... Sleeping %i seconds.\"", "%", "sleep_seconds", ")", "\n", "sleep", "(", "sleep_seconds", ")", "\n", "", "", "", "set_gpu", "(", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.set_gpu": [[78, 80], ["str"], "function", ["None"], ["", "def", "set_gpu", "(", "gpu", ")", ":", "\n", "    ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.add_noise_to_views": [[82, 86], ["numpy.array", "numpy.random.normal"], "function", ["None"], ["", "def", "add_noise_to_views", "(", "views", ",", "sd", ")", ":", "\n", "# Add Gaussian noise to views specified in parameter file", "\n", "    ", "return", "[", "np", ".", "array", "(", "v", ",", "dtype", "=", "np", ".", "float32", ")", "+", "np", ".", "random", ".", "normal", "(", "scale", "=", "sd", ",", "size", "=", "3", ")", "\n", "for", "v", "in", "views", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_best_model": [[88, 111], ["os.path.abspath", "len", "OSError", "glob.glob", "os.path.join", "os.path.exists", "OSError", "os.listdir", "os.path.join", "os.path.abspath", "scores.append", "float", "select_func", "re.findall", "numpy.array"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "def", "get_best_model", "(", "model_dir", ")", ":", "\n", "    ", "if", "len", "(", "os", ".", "listdir", "(", "model_dir", ")", ")", "==", "0", ":", "\n", "        ", "raise", "OSError", "(", "\"Model dir {} is empty.\"", ".", "format", "(", "model_dir", ")", ")", "\n", "# look for models, order: val_dice, val_loss, dice, loss, model_weights", "\n", "", "patterns", "=", "[", "\n", "(", "\"@epoch*val_dice*\"", ",", "np", ".", "argmax", ")", ",", "\n", "(", "\"@epoch*val_loss*\"", ",", "np", ".", "argmin", ")", ",", "\n", "(", "\"@epoch*dice*\"", ",", "np", ".", "argmax", ")", ",", "\n", "(", "\"@epoch*loss*\"", ",", "np", ".", "argmin", ")", "\n", "]", "\n", "for", "pattern", ",", "select_func", "in", "patterns", ":", "\n", "        ", "models", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "pattern", ")", ")", "\n", "if", "models", ":", "\n", "            ", "scores", "=", "[", "]", "\n", "for", "m", "in", "models", ":", "\n", "                ", "scores", ".", "append", "(", "float", "(", "re", ".", "findall", "(", "r\"(\\d+[.]\\d+)\"", ",", "m", ")", "[", "0", "]", ")", ")", "\n", "", "return", "os", ".", "path", ".", "abspath", "(", "models", "[", "select_func", "(", "np", ".", "array", "(", "scores", ")", ")", "]", ")", "\n", "", "", "m", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"model_weights.h5\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "m", ")", ":", "\n", "        ", "raise", "OSError", "(", "\"Did not find any model files matching the patterns {} \"", "\n", "\"and did not find a model_weights.h5 file.\"", "\n", "\"\"", ".", "format", "(", "patterns", ")", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_last_model": [[113, 131], ["glob.glob", "os.path.join", "epochs.append", "numpy.argmax", "os.path.join", "os.path.exists", "int", "os.path.abspath", "int", "re.findall", "int"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "def", "get_last_model", "(", "model_dir", ")", ":", "\n", "    ", "models", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"@epoch*\"", ")", ")", "\n", "epochs", "=", "[", "]", "\n", "for", "m", "in", "models", ":", "\n", "        ", "epochs", ".", "append", "(", "int", "(", "re", ".", "findall", "(", "r\"@epoch_(\\d+)_\"", ",", "m", ")", "[", "0", "]", ")", ")", "\n", "", "if", "epochs", ":", "\n", "        ", "last", "=", "np", ".", "argmax", "(", "epochs", ")", "\n", "return", "os", ".", "path", ".", "abspath", "(", "models", "[", "last", "]", ")", ",", "int", "(", "epochs", "[", "int", "(", "last", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "generic_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"model_weights.h5\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "generic_path", ")", ":", "\n", "# Return epoch 0 as we dont know where else to start", "\n", "# This may be changed elsewhere in the code based on the", "\n", "# training data CSV file", "\n", "            ", "return", "generic_path", ",", "0", "\n", "", "else", ":", "\n", "# Start from scratch, or handle as see fit at call point", "\n", "            ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_lr_at_epoch": [[133, 148], ["os.path.join", "pd.read_csv", "os.path.exists", "print", "float", "int"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "", "", "def", "get_lr_at_epoch", "(", "epoch", ",", "log_dir", ")", ":", "\n", "    ", "log_path", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"training.csv\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_path", ")", ":", "\n", "        ", "print", "(", "\"No training.csv file found at %s. Continuing with default \"", "\n", "\"learning rate found in parameter file.\"", "%", "log_dir", ")", "\n", "return", "None", ",", "None", "\n", "", "import", "pandas", "as", "pd", "\n", "df", "=", "pd", ".", "read_csv", "(", "log_path", ")", "\n", "possible_names", "=", "(", "\"lr\"", ",", "\"LR\"", ",", "\"learning_rate\"", ",", "\"LearningRate\"", ")", "\n", "try", ":", "\n", "        ", "in_df", "=", "[", "l", "in", "df", ".", "columns", "for", "l", "in", "possible_names", "]", ".", "index", "(", "True", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "return", "None", ",", "None", "\n", "", "col_name", "=", "possible_names", "[", "in_df", "]", "\n", "return", "float", "(", "df", "[", "col_name", "]", "[", "int", "(", "epoch", ")", "]", ")", ",", "col_name", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.clear_csv_after_epoch": [[150, 168], ["os.path.exists", "pd.read_csv", "open", "out_f.write", "os.remove", "pd.read_csv.to_csv", "numpy.flatnonzero"], "function", ["None"], ["", "def", "clear_csv_after_epoch", "(", "epoch", ",", "csv_file", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "csv_file", ")", ":", "\n", "        ", "import", "pandas", "as", "pd", "\n", "try", ":", "\n", "            ", "df", "=", "pd", ".", "read_csv", "(", "csv_file", ")", "\n", "", "except", "pd", ".", "errors", ".", "EmptyDataError", ":", "\n", "# Remove the file", "\n", "            ", "os", ".", "remove", "(", "csv_file", ")", "\n", "return", "\n", "# Remove any trailing runs and remove after 'epoch'", "\n", "", "try", ":", "\n", "            ", "df", "=", "df", "[", "np", ".", "flatnonzero", "(", "df", "[", "\"epoch\"", "]", "==", "0", ")", "[", "-", "1", "]", ":", "]", "\n", "", "except", "IndexError", ":", "\n", "            ", "pass", "\n", "", "df", "=", "df", "[", ":", "epoch", "+", "1", "]", "\n", "# Save again", "\n", "with", "open", "(", "csv_file", ",", "\"w\"", ")", "as", "out_f", ":", "\n", "            ", "out_f", ".", "write", "(", "df", ".", "to_csv", "(", "index", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_last_epoch": [[170, 177], ["os.path.exists", "pd.read_csv", "int", "df[].to_numpy"], "function", ["None"], ["", "", "", "def", "get_last_epoch", "(", "csv_file", ")", ":", "\n", "    ", "epoch", "=", "0", "\n", "if", "os", ".", "path", ".", "exists", "(", "csv_file", ")", ":", "\n", "        ", "import", "pandas", "as", "pd", "\n", "df", "=", "pd", ".", "read_csv", "(", "csv_file", ")", "\n", "epoch", "=", "int", "(", "df", "[", "\"epoch\"", "]", ".", "to_numpy", "(", ")", "[", "-", "1", "]", ")", "\n", "", "return", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.set_bias_weights_on_all_outputs": [[179, 203], ["hasattr", "zip", "NotImplementedError", "utils.set_bias_weights", "hasattr", "hparams.get"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.set_bias_weights", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["", "def", "set_bias_weights_on_all_outputs", "(", "model", ",", "data_queue", ",", "hparams", ",", "logger", ")", ":", "\n", "# This will bias the softmax output layer to output class confidences", "\n", "# equal to the class frequency", "\n", "    ", "if", "hasattr", "(", "model", ",", "\"out_layers\"", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Multi task models not yet supported in \"", "\n", "\"mpunet >= 0.2.6\"", ")", "\n", "# Multiple output layers, set bias for each", "\n", "layers", "=", "model", ".", "out_layers", "\n", "loaders", "=", "[", "t", ".", "image_pair_loader", "for", "t", "in", "data_queue", "]", "\n", "", "else", ":", "\n", "        ", "layers", "=", "[", "None", "]", "\n", "for", "layer", "in", "model", ".", "layers", "[", ":", ":", "-", "1", "]", ":", "\n", "# Start from last layer and go up until one that has an activation", "\n", "# funtion is met (note: this skips layers like Reshape, Cropping", "\n", "# etc.)", "\n", "            ", "if", "hasattr", "(", "layer", ",", "'activation'", ")", ":", "\n", "                ", "layers", "=", "[", "layer", "]", "\n", "break", "\n", "", "", "data_queues", "=", "[", "data_queue", "]", "\n", "", "for", "layer", ",", "data_queue", "in", "zip", "(", "layers", ",", "data_queues", ")", ":", "\n", "        ", "set_bias_weights", "(", "layer", "=", "layer", ",", "\n", "data_queue", "=", "data_queue", ",", "\n", "class_counts", "=", "hparams", ".", "get", "(", "\"class_counts\"", ")", ",", "\n", "logger", "=", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.set_bias_weights": [[205, 243], ["layer.get_weights", "numpy.asarray", "numpy.log", "numpy.linalg.norm", "np.log.reshape", "layer.set_weights", "logger", "ValueError", "ScreenLogger", "len", "ValueError", "numpy.zeros", "hasattr", "logger", "range", "len", "numpy.sum", "numpy.sum", "data_queue.get_random_image", "numpy.bincount", "numpy.exp", "image.labels.ravel"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_random_image"], ["", "", "def", "set_bias_weights", "(", "layer", ",", "data_queue", ",", "class_counts", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "    ", "if", "layer", ".", "activation", ".", "__name__", "!=", "\"softmax\"", ":", "\n", "        ", "raise", "ValueError", "(", "\"Setting output layer bias currently only supported \"", "\n", "\"with softmax activation functions. Output layer has \"", "\n", "\"'%s'\"", "%", "layer", ".", "activation", ".", "__name__", ")", "\n", "", "from", "mpunet", ".", "logging", ".", "default_logger", "import", "ScreenLogger", "\n", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "# Get original and set new weights", "\n", "weights", "=", "layer", ".", "get_weights", "(", ")", "\n", "if", "len", "(", "weights", ")", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"Output layer does not have bias weights.\"", ")", "\n", "", "bias_shape", "=", "weights", "[", "-", "1", "]", ".", "shape", "\n", "n_classes", "=", "weights", "[", "-", "1", "]", ".", "size", "\n", "\n", "# Estimate counts if not specified", "\n", "if", "class_counts", "is", "None", ":", "\n", "        ", "class_counts", "=", "np", ".", "zeros", "(", "shape", "=", "[", "n_classes", "]", ",", "dtype", "=", "np", ".", "int", ")", "\n", "if", "hasattr", "(", "data_queue", ",", "'max_loaded'", ")", ":", "\n", "# Limitation queue, count once for each image currently in queue", "\n", "            ", "n_images", "=", "data_queue", ".", "max_loaded", "\n", "", "else", ":", "\n", "            ", "n_images", "=", "len", "(", "data_queue", ".", "dataset", ")", "\n", "", "logger", "(", "\"OBS: Estimating class counts from {} images\"", ".", "format", "(", "n_images", ")", ")", "\n", "for", "_", "in", "range", "(", "n_images", ")", ":", "\n", "            ", "with", "data_queue", ".", "get_random_image", "(", ")", "as", "image", ":", "\n", "                ", "class_counts", "+=", "np", ".", "bincount", "(", "image", ".", "labels", ".", "ravel", "(", ")", ",", "\n", "minlength", "=", "n_classes", ")", "\n", "\n", "# Compute frequencies", "\n", "", "", "", "freq", "=", "np", ".", "asarray", "(", "class_counts", "/", "np", ".", "sum", "(", "class_counts", ")", ")", "\n", "\n", "# Compute bias weights", "\n", "bias", "=", "np", ".", "log", "(", "freq", "*", "np", ".", "sum", "(", "np", ".", "exp", "(", "freq", ")", ")", ")", "\n", "bias", "/=", "np", ".", "linalg", ".", "norm", "(", "bias", ")", "\n", "weights", "[", "-", "1", "]", "=", "bias", ".", "reshape", "(", "bias_shape", ")", "\n", "\n", "layer", ".", "set_weights", "(", "weights", ")", "\n", "logger", "(", "\"Setting bias weights on output layer to:\\n%s\"", "%", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_confidence_dict": [[245, 255], ["numpy.column_stack", "str", "numpy.sum().reshape", "enumerate", "numpy.load", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load"], ["", "def", "get_confidence_dict", "(", "path", ",", "views", ")", ":", "\n", "# Calculate linearly distributed per class weights between the models", "\n", "    ", "conf_paths", "=", "[", "path", "+", "\"/validation_confidence_%s.npz\"", "%", "v", "for", "v", "in", "views", "]", "\n", "confs", "=", "np", ".", "column_stack", "(", "[", "np", ".", "load", "(", "x", ")", "[", "\"arr_0\"", "]", "for", "x", "in", "conf_paths", "]", ")", "\n", "confs", "=", "(", "confs", "/", "np", ".", "sum", "(", "confs", ",", "axis", "=", "1", ")", ".", "reshape", "(", "(", "confs", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ".", "T", "\n", "\n", "# Add each confidence array to a dictionary under key <view>", "\n", "confs", "=", "{", "str", "(", "v", ")", ":", "confs", "[", "i", "]", "for", "i", ",", "v", "in", "enumerate", "(", "views", ")", "}", "\n", "\n", "return", "confs", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.random_split": [[257, 267], ["int", "numpy.random.choice", "numpy.arange", "numpy.delete", "numpy.delete"], "function", ["None"], ["", "def", "random_split", "(", "X", ",", "y", ",", "fraction", ")", ":", "\n", "# Take random split of validation data", "\n", "    ", "n_val", "=", "int", "(", "X", ".", "shape", "[", "0", "]", "*", "fraction", ")", "\n", "val_ind", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "X", ".", "shape", "[", "0", "]", ")", ",", "size", "=", "n_val", ")", "\n", "X_val", ",", "y_val", "=", "X", "[", "val_ind", "]", ",", "y", "[", "val_ind", "]", "\n", "\n", "# Get inverse for training set", "\n", "X", ",", "y", "=", "np", ".", "delete", "(", "X", ",", "val_ind", ",", "axis", "=", "0", ")", ",", "np", ".", "delete", "(", "y", ",", "val_ind", ",", "axis", "=", "0", ")", "\n", "\n", "return", "X", ",", "y", ",", "X_val", ",", "y_val", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders": [[269, 287], ["isinstance", "list", "make_func", "os.path.exists", "utils.create_folders.safe_make"], "function", ["None"], ["", "def", "create_folders", "(", "folders", ",", "create_deep", "=", "False", ")", ":", "\n", "    ", "def", "safe_make", "(", "path", ",", "make_func", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "make_func", "(", "path", ")", "\n", "", "except", "FileExistsError", ":", "\n", "# If running many jobs in parallel this may occur", "\n", "            ", "pass", "\n", "", "", "make_func", "=", "os", ".", "mkdir", "if", "not", "create_deep", "else", "os", ".", "makedirs", "\n", "if", "isinstance", "(", "folders", ",", "str", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "folders", ")", ":", "\n", "            ", "safe_make", "(", "folders", ",", "make_func", ")", "\n", "", "", "else", ":", "\n", "        ", "folders", "=", "list", "(", "folders", ")", "\n", "for", "f", "in", "folders", ":", "\n", "            ", "if", "f", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "f", ")", ":", "\n", "                ", "safe_make", "(", "f", ",", "make_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.print_options_context": [[289, 297], ["numpy.get_printoptions", "numpy.set_printoptions", "numpy.set_printoptions"], "function", ["None"], ["", "", "", "", "@", "contextlib", ".", "contextmanager", "\n", "def", "print_options_context", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "original", "=", "np", ".", "get_printoptions", "(", ")", "\n", "np", ".", "set_printoptions", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "finally", ":", "\n", "        ", "np", ".", "set_printoptions", "(", "**", "original", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.arr_to_fixed_precision_string": [[299, 303], ["map", "f"], "function", ["None"], ["", "", "def", "arr_to_fixed_precision_string", "(", "arr", ",", "precision", ")", ":", "\n", "    ", "f", "=", "np", ".", "format_float_positional", "\n", "s", "=", "map", "(", "lambda", "x", ":", "f", "(", "x", ",", "precision", ",", "pad_right", "=", "precision", ")", ",", "arr", ")", "\n", "return", "\"[{}]\"", ".", "format", "(", "\" \"", ".", "join", "(", "s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.pred_to_class": [[311, 329], ["len", "int", "numpy.issubdtype", "numpy.issubdtype", "tensor.argmax().astype", "numpy.squeeze", "tensor.argmax"], "function", ["None"], ["", "def", "pred_to_class", "(", "tensor", ",", "img_dims", "=", "3", ",", "threshold", "=", "0.5", ",", "has_batch_dim", "=", "False", ")", ":", "\n", "    ", "tensor_dim", "=", "img_dims", "+", "int", "(", "has_batch_dim", ")", "\n", "dims", "=", "len", "(", "tensor", ".", "shape", ")", "\n", "if", "dims", "==", "tensor_dim", ":", "\n", "# Check if already integer targets", "\n", "        ", "if", "np", ".", "issubdtype", "(", "tensor", ".", "dtype", ",", "np", ".", "integer", ")", ":", "\n", "            ", "return", "tensor", "\n", "", "else", ":", "\n", "            ", "return", "tensor", ">=", "threshold", "\n", "", "", "elif", "tensor", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "if", "np", ".", "issubdtype", "(", "tensor", ".", "dtype", ",", "np", ".", "integer", ")", ":", "\n", "# Squeeze last axis", "\n", "            ", "return", "np", ".", "squeeze", "(", "tensor", ")", "\n", "", "else", ":", "\n", "            ", "return", "tensor", ">=", "threshold", "\n", "", "", "else", ":", "\n", "# Convert predicted probabilities to predicted class", "\n", "        ", "return", "tensor", ".", "argmax", "(", "-", "1", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.highlighted": [[331, 335], ["len", "max", "len", "string.split"], "function", ["None"], ["", "", "def", "highlighted", "(", "string", ")", ":", "\n", "    ", "length", "=", "len", "(", "string", ")", "if", "\"\\n\"", "not", "in", "string", "else", "max", "(", "[", "len", "(", "s", ")", "for", "s", "in", "string", ".", "split", "(", "\"\\n\"", ")", "]", ")", "\n", "border", "=", "\"-\"", "*", "length", "\n", "return", "\"%s\\n%s\\n%s\"", "%", "(", "border", ",", "string", ",", "border", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.await_PIDs": [[337, 343], ["isinstance", "PIDs.split", "utils.wait_for", "utils.wait_for", "int"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.wait_for", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.wait_for"], ["", "def", "await_PIDs", "(", "PIDs", ",", "check_every", "=", "120", ")", ":", "\n", "    ", "if", "isinstance", "(", "PIDs", ",", "str", ")", ":", "\n", "        ", "for", "pid", "in", "PIDs", ".", "split", "(", "\",\"", ")", ":", "\n", "            ", "wait_for", "(", "int", "(", "pid", ")", ",", "check_every", "=", "check_every", ")", "\n", "", "", "else", ":", "\n", "        ", "wait_for", "(", "PIDs", ",", "check_every", "=", "check_every", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.wait_for": [[345, 359], ["utils._wait_for", "isinstance", "int", "ValueError"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils._wait_for"], ["", "", "def", "wait_for", "(", "PID", ",", "check_every", "=", "120", ")", ":", "\n", "    ", "\"\"\"\n    Check for a running process with PID 'PID' and only return when the process\n    is no longer running. Checks the process list every 'check_every' seconds.\n    \"\"\"", "\n", "if", "not", "PID", ":", "\n", "        ", "return", "\n", "", "if", "not", "isinstance", "(", "PID", ",", "int", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "PID", "=", "int", "(", "PID", ")", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "            ", "raise", "ValueError", "(", "\"Cannot wait for PID '%s', must be an integer\"", "\n", "%", "PID", ")", "from", "e", "\n", "", "", "_wait_for", "(", "PID", ",", "check_every", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils._wait_for": [[361, 378], ["print", "subprocess.Popen", "subprocess.Popen.wait", "bool", "subprocess.check_output", "print", "time.sleep"], "function", ["None"], ["", "def", "_wait_for", "(", "PID", ",", "check_every", "=", "120", ")", ":", "\n", "    ", "still_running", "=", "True", "\n", "import", "subprocess", "\n", "import", "time", "\n", "print", "(", "\"\\n[*] Waiting for process PID=%i to terminate...\"", "%", "PID", ")", "\n", "while", "still_running", ":", "\n", "        ", "ps", "=", "subprocess", ".", "Popen", "(", "(", "'ps'", ",", "'-p'", ",", "\"%i\"", "%", "PID", ")", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", "\n", "try", ":", "\n", "            ", "output", "=", "subprocess", ".", "check_output", "(", "(", "'grep'", ",", "'%i'", "%", "PID", ")", ",", "stdin", "=", "ps", ".", "stdout", ")", "\n", "", "except", "subprocess", ".", "CalledProcessError", ":", "\n", "            ", "output", "=", "False", "\n", "", "ps", ".", "wait", "(", ")", "\n", "\n", "still_running", "=", "bool", "(", "output", ")", "\n", "if", "still_running", ":", "\n", "            ", "print", "(", "\"Process %i still running... (sleeping %i seconds)\"", "%", "(", "PID", ",", "check_every", ")", ")", "\n", "time", ".", "sleep", "(", "check_every", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.check_kwargs": [[380, 386], ["RuntimeError"], "function", ["None"], ["", "", "", "def", "check_kwargs", "(", "kwargs", ",", "allowed", ",", "func", "=", "None", ")", ":", "\n", "    ", "s", "=", "(", "\"Function '{}': \"", ".", "format", "(", "func", ".", "__name__", ")", ")", "if", "func", "is", "not", "None", "else", "\"\"", "\n", "for", "param", "in", "kwargs", ":", "\n", "        ", "if", "param", "not", "in", "allowed", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"{}Unexpected parameter '{}' passed.\"", ".", "\n", "format", "(", "s", ",", "param", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.ensure_list_or_tuple": [[388, 390], ["isinstance"], "function", ["None"], ["", "", "", "def", "ensure_list_or_tuple", "(", "obj", ")", ":", "\n", "    ", "return", "[", "obj", "]", "if", "not", "isinstance", "(", "obj", ",", "(", "list", ",", "tuple", ")", ")", "else", "obj", "\n", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.predict_single": [[10, 79], ["[].lower", "ImagePairLoader", "ImagePairLoader.add_image", "ImagePairLoader.set_scaler_and_bg_values", "mpunet.sequences.utils.get_sequence", "mpunet.sequences.utils.get_sequence", "fuse_and_predict.pred_3D_iso", "bool", "hparams.get_from_anywhere", "hparams.get_from_anywhere", "mpunet.sequences.utils.get_sequence.image_pair_queue.get_image_by_id", "mpunet.interpolation.sample_grid.get_voxel_grid_real_space", "numpy.empty", "print", "enumerate", "print", "mpunet.sequences.utils.get_sequence.get_view_from", "fuse_and_predict.predict_volume", "fuse_and_predict.map_real_space_pred", "numpy.load", "len", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.add_image", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.set_scaler_and_bg_values", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.utils.get_sequence", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.utils.get_sequence", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.pred_3D_iso", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_from_anywhere", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_from_anywhere", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_image_by_id", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_voxel_grid_real_space", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.get_view_from", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.predict_volume", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.map_real_space_pred", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load"], ["def", "predict_single", "(", "image", ",", "model", ",", "hparams", ",", "verbose", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    A generic prediction function that sets up a ImagePairLoader object for the\n    given image, prepares the image and predicts.\n\n    Note that this function should only be used for convinience in scripts that\n    work on single images at a time anyway, as batch-preparing the entire\n    ImagePairLoader object prior to prediction is faster.\n\n    NOTE: Only works with iso_live intrp modes at this time\n    \"\"\"", "\n", "mode", "=", "hparams", "[", "\"fit\"", "]", "[", "\"intrp_style\"", "]", ".", "lower", "(", ")", "\n", "assert", "mode", "in", "(", "\"iso_live\"", ",", "\"iso_live_3d\"", ")", "\n", "\n", "# Create a ImagePairLoader with only the given file", "\n", "from", "mpunet", ".", "image", "import", "ImagePairLoader", "\n", "image_pair_loader", "=", "ImagePairLoader", "(", "predict_mode", "=", "True", ",", "\n", "initialize_empty", "=", "True", ",", "\n", "no_log", "=", "bool", "(", "verbose", ")", ")", "\n", "image_pair_loader", ".", "add_image", "(", "image", ")", "\n", "\n", "# Set scaler and bg values", "\n", "image_pair_loader", ".", "set_scaler_and_bg_values", "(", "\n", "bg_value", "=", "hparams", ".", "get_from_anywhere", "(", "'bg_value'", ")", ",", "\n", "scaler", "=", "hparams", ".", "get_from_anywhere", "(", "'scaler'", ")", ",", "\n", "compute_now", "=", "False", "\n", ")", "\n", "\n", "if", "mode", "==", "\"iso_live\"", ":", "\n", "# Init LazyQueue and get its sequencer", "\n", "        ", "seq", "=", "get_sequence", "(", "data_queue", "=", "image_pair_loader", ",", "\n", "views", "=", "np", ".", "load", "(", "hparams", ".", "project_path", "+", "\"/views.npz\"", ")", "[", "\"arr_0\"", "]", ",", "\n", "is_validation", "=", "True", ",", "\n", "**", "hparams", "[", "\"fit\"", "]", ",", "**", "hparams", "[", "\"build\"", "]", ")", "\n", "\n", "with", "seq", ".", "image_pair_queue", ".", "get_image_by_id", "(", "image", ".", "identifier", ")", "as", "image", ":", "\n", "# Get voxel grid in real space", "\n", "            ", "voxel_grid_real_space", "=", "get_voxel_grid_real_space", "(", "image", ")", "\n", "\n", "# Prepare tensor to store combined prediction", "\n", "d", "=", "image", ".", "image", ".", "shape", "\n", "predicted", "=", "np", ".", "empty", "(", "shape", "=", "(", "len", "(", "seq", ".", "views", ")", ",", "d", "[", "0", "]", ",", "d", "[", "1", "]", ",", "d", "[", "2", "]", ",", "seq", ".", "n_classes", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "print", "(", "\"Predicting on brain hyper-volume of shape:\"", ",", "predicted", ".", "shape", ")", "\n", "\n", "for", "n_view", ",", "v", "in", "enumerate", "(", "seq", ".", "views", ")", ":", "\n", "                ", "print", "(", "\"\\nView %i/%i: %s\"", "%", "(", "n_view", "+", "1", ",", "len", "(", "seq", ".", "views", ")", ",", "v", ")", ")", "\n", "# Sample the volume along the view", "\n", "X", ",", "y", ",", "grid", ",", "inv_basis", "=", "seq", ".", "get_view_from", "(", "image", ",", "v", ",", "\n", "n_planes", "=", "\"same+20\"", ")", "\n", "\n", "# Predict on volume using model", "\n", "pred", "=", "predict_volume", "(", "model", ",", "X", ",", "axis", "=", "2", ")", "\n", "\n", "# Map the real space coordiante predictions to nearest", "\n", "# real space coordinates defined on voxel grid", "\n", "predicted", "[", "n_view", "]", "=", "map_real_space_pred", "(", "pred", ",", "grid", ",", "inv_basis", ",", "\n", "voxel_grid_real_space", ",", "\n", "method", "=", "\"nearest\"", ")", "\n", "", "", "", "else", ":", "\n", "# Init LazyQueue and get its sequencer", "\n", "        ", "seq", "=", "get_sequence", "(", "data_queue", "=", "image_pair_loader", ",", "\n", "is_validation", "=", "True", ",", "\n", "**", "hparams", "[", "\"fit\"", "]", ",", "**", "hparams", "[", "\"build\"", "]", ")", "\n", "predicted", "=", "pred_3D_iso", "(", "model", "=", "model", ",", "sequence", "=", "seq", ",", "\n", "image", "=", "image", ",", "extra_boxes", "=", "\"3x\"", ",", "\n", "min_coverage", "=", "None", ")", "\n", "\n", "", "return", "predicted", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.predict_volume": [[81, 90], ["print", "numpy.moveaxis", "model.predict", "numpy.moveaxis"], "function", ["None"], ["", "def", "predict_volume", "(", "model", ",", "X", ",", "batch_size", "=", "8", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "print", "(", "\"Predicting...\"", ")", "\n", "# Move axis to front", "\n", "X", "=", "np", ".", "moveaxis", "(", "X", ",", "source", "=", "axis", ",", "destination", "=", "0", ")", "\n", "pred", "=", "model", ".", "predict", "(", "X", ",", "batch_size", "=", "batch_size", ",", "verbose", "=", "1", ")", "\n", "return", "np", ".", "moveaxis", "(", "pred", ",", "source", "=", "0", ",", "destination", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.map_real_space_pred": [[92, 138], ["print", "numpy.zeros", "mpunet.interpolation.regular_grid_interpolator.RegularGridInterpolator", "mpunet.interpolation.linalg.points_to_mgrid", "numpy.empty", "ThreadPoolExecutor", "numpy.arange", "ThreadPoolExecutor.map", "print", "ThreadPoolExecutor.shutdown", "inv_basis.dot", "print", "mpunet.interpolation.regular_grid_interpolator.RegularGridInterpolator.", "mpunet.interpolation.linalg.mgrid_to_points"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.points_to_mgrid", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.mgrid_to_points"], ["", "def", "map_real_space_pred", "(", "pred", ",", "grid", ",", "inv_basis", ",", "voxel_grid_real_space", ",", "method", "=", "\"nearest\"", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "print", "(", "\"Mapping to real coordinate space...\"", ")", "\n", "\n", "# Prepare fill value vector, we set this to 1.0 background", "\n", "fill", "=", "np", ".", "zeros", "(", "shape", "=", "pred", ".", "shape", "[", "-", "1", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "fill", "[", "0", "]", "=", "1.0", "\n", "\n", "# Initialize interpolator object", "\n", "intrp", "=", "RegularGridInterpolator", "(", "grid", ",", "pred", ",", "fill_value", "=", "fill", ",", "\n", "bounds_error", "=", "False", ",", "method", "=", "method", ")", "\n", "\n", "points", "=", "inv_basis", ".", "dot", "(", "mgrid_to_points", "(", "voxel_grid_real_space", ")", ".", "T", ")", ".", "T", "\n", "transformed_grid", "=", "points_to_mgrid", "(", "points", ",", "voxel_grid_real_space", "[", "0", "]", ".", "shape", ")", "\n", "\n", "# Prepare mapped pred volume", "\n", "mapped", "=", "np", ".", "empty", "(", "transformed_grid", "[", "0", "]", ".", "shape", "+", "(", "pred", ".", "shape", "[", "-", "1", "]", ",", ")", ",", "\n", "dtype", "=", "pred", ".", "dtype", ")", "\n", "\n", "# Prepare interpolation function", "\n", "def", "_do", "(", "xs", ",", "ys", ",", "zs", ",", "index", ")", ":", "\n", "        ", "return", "intrp", "(", "(", "xs", ",", "ys", ",", "zs", ")", ")", ",", "index", "\n", "\n", "# Prepare thread pool of 10 workers", "\n", "", "from", "concurrent", ".", "futures", "import", "ThreadPoolExecutor", "\n", "pool", "=", "ThreadPoolExecutor", "(", "max_workers", "=", "7", ")", "\n", "\n", "# Perform interpolation async.", "\n", "inds", "=", "np", ".", "arange", "(", "transformed_grid", ".", "shape", "[", "1", "]", ")", "\n", "result", "=", "pool", ".", "map", "(", "_do", ",", "transformed_grid", "[", "0", "]", ",", "transformed_grid", "[", "1", "]", ",", "\n", "transformed_grid", "[", "2", "]", ",", "inds", ")", "\n", "\n", "i", "=", "1", "\n", "for", "map", ",", "ind", "in", "result", ":", "\n", "# Print status", "\n", "        ", "print", "(", "\"  %i/%i\"", "%", "(", "i", ",", "inds", "[", "-", "1", "]", "+", "1", ")", ",", "end", "=", "\"\\r\"", ",", "flush", "=", "True", ")", "\n", "i", "+=", "1", "\n", "\n", "# Map the interpolation results into the volume", "\n", "mapped", "[", "ind", "]", "=", "map", "\n", "\n", "", "print", "(", "\"\"", ")", "\n", "pool", ".", "shutdown", "(", ")", "\n", "return", "mapped", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.predict_3D_patches_binary": [[140, 168], ["numpy.zeros", "patches.get_patches_from", "print", "numpy.sum", "print", "model.predict_on_batch().numpy().squeeze", "model.predict_on_batch().numpy", "model.predict_on_batch", "mpunet.preprocessing.reshape_add_axis"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.get_patches_from", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.input_prep.reshape_add_axis"], ["", "def", "predict_3D_patches_binary", "(", "model", ",", "patches", ",", "image_id", ",", "N_extra", "=", "0", ",", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "# Get box dim and image dim", "\n", "d", "=", "patches", ".", "dim", "\n", "i1", ",", "i2", ",", "i3", "=", "patches", ".", "im_dim", "\n", "\n", "# Prepare reconstruction volume. Predictions will be summed in this volume.", "\n", "recon", "=", "np", ".", "zeros", "(", "shape", "=", "(", "i1", ",", "i2", ",", "i3", ",", "2", ")", ",", "dtype", "=", "np", ".", "uint32", ")", "\n", "\n", "# Predict on base patches + N extra randomly", "\n", "# sampled patches from the volume", "\n", "for", "patch", ",", "(", "i", ",", "k", ",", "v", ")", ",", "status", "in", "patches", ".", "get_patches_from", "(", "image_id", ",", "N_extra", ")", ":", "\n", "# Log the status of the generator", "\n", "        ", "print", "(", "status", ",", "end", "=", "\"\\r\"", ",", "flush", "=", "True", ")", "\n", "\n", "# Predict on patch", "\n", "pred", "=", "model", ".", "predict_on_batch", "(", "reshape_add_axis", "(", "patch", ",", "im_dims", "=", "3", ")", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "mask", "=", "pred", ">", "0.5", "\n", "\n", "# Add prediction to reconstructed volume", "\n", "recon", "[", "i", ":", "i", "+", "d", ",", "k", ":", "k", "+", "d", ",", "v", ":", "v", "+", "d", ",", "0", "]", "+=", "~", "mask", "\n", "recon", "[", "i", ":", "i", "+", "d", ",", "k", ":", "k", "+", "d", ",", "v", ":", "v", "+", "d", ",", "1", "]", "+=", "mask", "\n", "", "print", "(", "\"\"", ")", "\n", "\n", "total", "=", "np", ".", "sum", "(", "recon", ",", "axis", "=", "-", "1", ")", "\n", "return", "(", "recon", "[", "...", ",", "1", "]", ">", "(", "0.20", "*", "total", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.predict_3D_patches": [[170, 198], ["numpy.zeros", "patches.get_patches_from", "print", "numpy.sum", "print", "model.predict_on_batch().numpy", "model.predict_on_batch().numpy.squeeze", "model.predict_on_batch", "mpunet.preprocessing.reshape_add_axis"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.get_patches_from", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.input_prep.reshape_add_axis"], ["", "def", "predict_3D_patches", "(", "model", ",", "patches", ",", "image", ",", "N_extra", "=", "0", ",", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "# Get box dim and image dim", "\n", "d", "=", "patches", ".", "dim", "\n", "i1", ",", "i2", ",", "i3", "=", "image", ".", "shape", "[", ":", "3", "]", "\n", "\n", "# Prepare reconstruction volume. Predictions will be summed in this volume.", "\n", "recon", "=", "np", ".", "zeros", "(", "shape", "=", "(", "i1", ",", "i2", ",", "i3", ",", "model", ".", "n_classes", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Predict on base patches + N extra randomly", "\n", "# sampled patches from the volume", "\n", "for", "patch", ",", "(", "i", ",", "k", ",", "v", ")", ",", "status", "in", "patches", ".", "get_patches_from", "(", "image", ",", "N_extra", ")", ":", "\n", "# Log the status of the generator", "\n", "        ", "print", "(", "status", ",", "end", "=", "\"\\r\"", ",", "flush", "=", "True", ")", "\n", "\n", "# Predict on patch", "\n", "pred", "=", "model", ".", "predict_on_batch", "(", "reshape_add_axis", "(", "patch", ",", "im_dims", "=", "3", ")", ")", ".", "numpy", "(", ")", "\n", "\n", "# Add prediction to reconstructed volume", "\n", "recon", "[", "i", ":", "i", "+", "d", ",", "k", ":", "k", "+", "d", ",", "v", ":", "v", "+", "d", "]", "+=", "pred", ".", "squeeze", "(", ")", "\n", "", "print", "(", "\"\"", ")", "\n", "\n", "# Normalize", "\n", "recon", "/=", "np", ".", "sum", "(", "recon", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "return", "recon", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.pred_3D_iso": [[200, 294], ["mpunet.interpolation.sample_grid.get_voxel_grid", "mpunet.interpolation.sample_grid.get_voxel_axes_real_space", "list", "enumerate", "mpunet.interpolation.linalg.mgrid_to_points().reshape().astype", "mpunet.interpolation.regular_grid_interpolator.RegularGridInterpolator", "numpy.zeros", "sequence.get_base_patches_from", "print", "tuple", "tuple", "numpy.sign", "zip", "tuple", "[].numpy", "image.interpolator.apply_rotation", "mpunet.interpolation.regular_grid_interpolator.RegularGridInterpolator.reshape", "numpy.logical_not", "print", "numpy.diagonal", "numpy.flip", "numpy.flip", "mpunet.interpolation.linalg.mgrid_to_points().reshape", "next", "isinstance", "numpy.all", "[].numpy.reshape", "numpy.logical_not", "int", "sequence.get_N_random_patches_from", "next", "mpunet.interpolation.regular_grid_interpolator.RegularGridInterpolator.", "numpy.isnan", "tuple", "numpy.all", "numpy.sum", "numpy.prod", "mpunet.interpolation.linalg.mgrid_to_points", "model.predict_on_batch", "tuple", "vox_inds[].astype", "numpy.isclose", "float", "numpy.expand_dims", "int.split"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_voxel_grid", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_voxel_axes_real_space", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.get_base_patches_from", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.apply_rotation", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.get_N_random_patches_from", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.mgrid_to_points"], ["", "def", "pred_3D_iso", "(", "model", ",", "sequence", ",", "image", ",", "extra_boxes", ",", "min_coverage", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "total_extra_boxes", "=", "extra_boxes", "\n", "\n", "# Get reference to the image", "\n", "n_classes", "=", "sequence", ".", "n_classes", "\n", "pred_shape", "=", "tuple", "(", "image", ".", "shape", "[", ":", "3", "]", ")", "+", "(", "n_classes", ",", ")", "\n", "vox_shape", "=", "tuple", "(", "image", ".", "shape", "[", ":", "3", "]", ")", "+", "(", "3", ",", ")", "\n", "\n", "# Prepare interpolator object", "\n", "vox_grid", "=", "get_voxel_grid", "(", "image", ",", "as_points", "=", "False", ")", "\n", "\n", "# Get voxel regular grid centered in real space", "\n", "g_all", ",", "basis", ",", "_", "=", "get_voxel_axes_real_space", "(", "image", ".", "image", ",", "image", ".", "affine", ",", "\n", "return_basis", "=", "True", ")", "\n", "g_all", "=", "list", "(", "g_all", ")", "\n", "\n", "# Flip axes? Must be strictly increasing", "\n", "flip", "=", "np", ".", "sign", "(", "np", ".", "diagonal", "(", "basis", ")", ")", "==", "-", "1", "\n", "for", "i", ",", "(", "g", ",", "f", ")", "in", "enumerate", "(", "zip", "(", "g_all", ",", "flip", ")", ")", ":", "\n", "        ", "if", "f", ":", "\n", "            ", "g_all", "[", "i", "]", "=", "np", ".", "flip", "(", "g", ",", "0", ")", "\n", "vox_grid", "=", "np", ".", "flip", "(", "vox_grid", ",", "i", "+", "1", ")", "\n", "", "", "vox_points", "=", "mgrid_to_points", "(", "vox_grid", ")", ".", "reshape", "(", "vox_shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "# Setup interpolator - takes a point in the scanner space and returns", "\n", "# the nearest voxel coordinate", "\n", "intrp", "=", "RegularGridInterpolator", "(", "tuple", "(", "g_all", ")", ",", "vox_points", ",", "\n", "method", "=", "\"nearest\"", ",", "bounds_error", "=", "False", ",", "\n", "fill_value", "=", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Prepare prediction volume", "\n", "pred_vol", "=", "np", ".", "zeros", "(", "shape", "=", "pred_shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "# Predict on base patches first", "\n", "base_patches", "=", "sequence", ".", "get_base_patches_from", "(", "image", ",", "return_y", "=", "False", ")", "\n", "\n", "# Sample boxes and predict --> sum into pred_vol", "\n", "is_covered", ",", "base_reached", ",", "extra_reached", ",", "N_base", ",", "N_extra", "=", "not", "min_coverage", ",", "False", ",", "False", ",", "0", ",", "0", "\n", "\n", "while", "not", "is_covered", "or", "not", "base_reached", "or", "not", "extra_reached", ":", "\n", "        ", "try", ":", "\n", "            ", "im", ",", "rgrid", ",", "_", ",", "_", ",", "total_base", "=", "next", "(", "base_patches", ")", "\n", "N_base", "+=", "1", "\n", "\n", "if", "isinstance", "(", "total_extra_boxes", ",", "str", ")", ":", "\n", "# Number specified in string format '2x', '2.5x' etc. as a", "\n", "# multiplier of number of base patches", "\n", "                ", "total_extra_boxes", "=", "int", "(", "float", "(", "total_extra_boxes", ".", "split", "(", "\"x\"", ")", "[", "0", "]", ")", "*", "total_base", ")", "\n", "\n", "", "", "except", "StopIteration", ":", "\n", "            ", "p", "=", "sequence", ".", "get_N_random_patches_from", "(", "image", ",", "1", ",", "return_y", "=", "False", ")", "\n", "im", ",", "rgrid", ",", "_", ",", "_", "=", "next", "(", "p", ")", "\n", "N_extra", "+=", "1", "\n", "\n", "# Predict on the box", "\n", "", "pred", "=", "model", ".", "predict_on_batch", "(", "np", ".", "expand_dims", "(", "im", ",", "0", ")", ")", "[", "0", "]", ".", "numpy", "(", ")", "\n", "\n", "# Apply rotation if needed", "\n", "rgrid", "=", "image", ".", "interpolator", ".", "apply_rotation", "(", "rgrid", ")", "\n", "\n", "# Interpolate to nearest vox grid positions", "\n", "vox_inds", "=", "intrp", "(", "tuple", "(", "rgrid", ")", ")", ".", "reshape", "(", "-", "1", ",", "3", ")", "\n", "\n", "# Flatten and mask results", "\n", "mask", "=", "np", ".", "logical_not", "(", "np", ".", "all", "(", "np", ".", "isnan", "(", "vox_inds", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "vox_inds", "=", "[", "i", "for", "i", "in", "vox_inds", "[", "mask", "]", ".", "astype", "(", "np", ".", "int", ")", ".", "T", "]", "\n", "\n", "# Add to volume", "\n", "pred_vol", "[", "tuple", "(", "vox_inds", ")", "]", "+=", "pred", ".", "reshape", "(", "-", "1", ",", "n_classes", ")", "[", "mask", "]", "\n", "\n", "# Check coverage fraction", "\n", "if", "min_coverage", ":", "\n", "            ", "covered", "=", "np", ".", "logical_not", "(", "np", ".", "all", "(", "np", ".", "isclose", "(", "pred_vol", ",", "0", ")", ",", "axis", "=", "-", "1", ")", ")", "\n", "coverage", "=", "np", ".", "sum", "(", "covered", ")", "/", "np", ".", "prod", "(", "pred_vol", ".", "shape", "[", ":", "3", "]", ")", "\n", "cov_string", "=", "\"%.3f/%.3f\"", "%", "coverage", ",", "min_coverage", "\n", "is_covered", "=", "coverage", ">=", "min_coverage", "\n", "", "else", ":", "\n", "            ", "cov_string", "=", "\"[Not calculated]\"", "\n", "\n", "", "print", "(", "\"   N base patches: %i/%i --- N extra patches %i/%i --- \"", "\n", "\"Coverage: %s\"", "%", "(", "\n", "N_base", ",", "total_base", ",", "N_extra", ",", "total_extra_boxes", ",", "cov_string", ")", ",", "\n", "end", "=", "\"\\r\"", ",", "flush", "=", "True", ")", "\n", "\n", "# Check convergence", "\n", "base_reached", "=", "N_base", ">=", "total_base", "\n", "extra_reached", "=", "N_extra", ">=", "total_extra_boxes", "\n", "", "print", "(", "\"\"", ")", "\n", "\n", "# Return prediction volume - OBS not normalized", "\n", "return", "pred_vol", "\n", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fusion_training.stack_collections": [[7, 38], ["sum", "numpy.empty", "numpy.empty", "len", "range", "print", "print", "points_collection.pop", "targets_collection.pop", "len", "len", "len", "len", "len"], "function", ["None"], ["def", "stack_collections", "(", "points_collection", ",", "targets_collection", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        points_collection:\n        targets_collection:\n\n    Returns:\n\n    \"\"\"", "\n", "if", "len", "(", "points_collection", ")", "==", "1", "and", "len", "(", "targets_collection", ")", "==", "1", ":", "\n", "        ", "return", "points_collection", "[", "0", "]", ",", "targets_collection", "[", "0", "]", "\n", "", "n_points", "=", "sum", "(", "[", "x", ".", "shape", "[", "0", "]", "for", "x", "in", "points_collection", "]", ")", "\n", "n_views", ",", "n_classes", "=", "points_collection", "[", "0", "]", ".", "shape", "[", "1", ":", "]", "\n", "\n", "X", "=", "np", ".", "empty", "(", "shape", "=", "(", "n_points", ",", "n_views", ",", "n_classes", ")", ",", "\n", "dtype", "=", "points_collection", "[", "0", "]", ".", "dtype", ")", "\n", "y", "=", "np", ".", "empty", "(", "shape", "=", "(", "n_points", ",", "1", ")", ",", "\n", "dtype", "=", "targets_collection", "[", "0", "]", ".", "dtype", ")", "\n", "\n", "c", "=", "0", "\n", "len_collection", "=", "len", "(", "points_collection", ")", "\n", "for", "i", "in", "range", "(", "len_collection", ")", ":", "\n", "        ", "print", "(", "\"  %i/%i\"", "%", "(", "i", "+", "1", ",", "len_collection", ")", ",", "\n", "end", "=", "\"\\r\"", ",", "flush", "=", "True", ")", "\n", "Xs", "=", "points_collection", ".", "pop", "(", ")", "\n", "X", "[", "c", ":", "c", "+", "len", "(", "Xs", ")", "]", "=", "Xs", "\n", "y", "[", "c", ":", "c", "+", "len", "(", "Xs", ")", "]", "=", "targets_collection", ".", "pop", "(", ")", "\n", "c", "+=", "len", "(", "Xs", ")", "\n", "", "print", "(", "\"\"", ")", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fusion_training.predict_and_map": [[40, 90], ["seq.get_view_from", "predict_volume", "mpunet.utils.fusion.map_real_space_pred", "get_voxel_grid_real_space", "print", "print", "print", "print", "mpunet.evaluate.dice_all", "mpunet.evaluate.dice_all", "numpy.random.rand", "predict_volume.argmax", "mpunet.utils.fusion.map_real_space_pred.argmax().reshape", "mpunet.utils.fusion.map_real_space_pred.argmax"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.get_view_from", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.predict_volume", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.map_real_space_pred", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_voxel_grid_real_space", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.metrics.dice_all", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.metrics.dice_all"], ["", "def", "predict_and_map", "(", "model", ",", "seq", ",", "image", ",", "view", ",", "batch_size", "=", "None", ",", "\n", "voxel_grid_real_space", "=", "None", ",", "targets", "=", "None", ",", "eval_prob", "=", "1.0", ",", "\n", "n_planes", "=", "'same+20'", ")", ":", "\n", "    ", "\"\"\"\n\n\n    Args:\n        model:\n        seq:\n        image:\n        view:\n        batch_size:\n        voxel_grid_real_space:\n        targets:\n        n_planes:\n\n    Returns:\n\n    \"\"\"", "\n", "\n", "# Sample planes from the image at grid_real_space grid", "\n", "# in real space (scanner RAS) coordinates.", "\n", "X", ",", "y", ",", "grid", ",", "inv_basis", "=", "seq", ".", "get_view_from", "(", "image", ",", "view", ",", "n_planes", "=", "n_planes", ")", "\n", "\n", "# Predict on volume using model", "\n", "bs", "=", "seq", ".", "batch_size", "if", "batch_size", "is", "None", "else", "batch_size", "\n", "from", "mpunet", ".", "utils", ".", "fusion", "import", "predict_volume", "\n", "pred", "=", "predict_volume", "(", "model", ",", "X", ",", "axis", "=", "2", ",", "batch_size", "=", "bs", ")", "\n", "\n", "# Map the real space coordiante predictions to nearest", "\n", "# real space coordinates defined on voxel grid", "\n", "if", "voxel_grid_real_space", "is", "None", ":", "\n", "        ", "from", "mpunet", ".", "interpolation", ".", "sample_grid", "import", "get_voxel_grid_real_space", "\n", "voxel_grid_real_space", "=", "get_voxel_grid_real_space", "(", "image", ")", "\n", "\n", "# Map the predicted volume to real space", "\n", "", "mapped", "=", "map_real_space_pred", "(", "pred", ",", "grid", ",", "inv_basis", ",", "voxel_grid_real_space", ")", "\n", "\n", "# Print dice scores", "\n", "if", "targets", "is", "not", "None", "and", "np", ".", "random", ".", "rand", "(", "1", ")", "[", "0", "]", "<=", "eval_prob", ":", "\n", "        ", "print", "(", "\"Computing evaluations...\"", ")", "\n", "print", "(", "\"View dice scores:   \"", ",", "dice_all", "(", "y", ",", "pred", ".", "argmax", "(", "-", "1", ")", ",", "\n", "ignore_zero", "=", "False", ")", ")", "\n", "print", "(", "\"Mapped dice scores: \"", ",", "dice_all", "(", "targets", ",", "\n", "mapped", ".", "argmax", "(", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "\n", "ignore_zero", "=", "False", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"-- Skipping evaluation\"", ")", "\n", "\n", "", "return", "mapped", "\n", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.filters.filter_activity._get_figure": [[14, 27], ["matplotlib.subplots", "fig.subplots_adjust", "isinstance", "isinstance", "isinstance", "ax.set_aspect", "ax.axis"], "function", ["None"], ["def", "_get_figure", "(", "figsize", ",", "rows", "=", "1", ",", "cols", "=", "1", ")", ":", "\n", "    ", "figsize", "=", "(", "figsize", ",", "figsize", ")", "if", "isinstance", "(", "figsize", ",", "int", ")", "else", "figsize", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "rows", ",", "cols", ",", "figsize", "=", "figsize", ")", "\n", "fig", ".", "subplots_adjust", "(", "hspace", "=", "0.005", ",", "wspace", "=", "0.005", ")", "\n", "if", "not", "isinstance", "(", "axes", ",", "(", "list", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "axes", "=", "[", "axes", "]", "\n", "", "if", "not", "isinstance", "(", "axes", "[", "0", "]", ",", "(", "list", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "        ", "axes", "=", "[", "axes", "]", "\n", "", "for", "row", "in", "axes", ":", "\n", "        ", "for", "ax", "in", "row", ":", "\n", "            ", "ax", ".", "set_aspect", "(", "\"equal\"", ",", "adjustable", "=", "\"box\"", ")", "\n", "ax", ".", "axis", "(", "\"off\"", ")", "\n", "", "", "return", "fig", ",", "axes", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.filters.filter_activity.display_filter": [[29, 38], ["filter_activity._get_figure", "ax[].imshow", "fig.tight_layout", "fig.savefig", "matplotlib.close", "os.path.exists", "OSError"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.filters.filter_activity._get_figure", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.imshow"], ["", "def", "display_filter", "(", "filter", ",", "out_path", "=", "None", ",", "dpi", "=", "200", ",", "figsize", "=", "6", ",", "overwrite", "=", "False", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "_get_figure", "(", "figsize", ")", "\n", "ax", "[", "0", "]", ".", "imshow", "(", "filter", "[", "0", ",", ":", ",", ":", ",", "0", "]", ",", "cmap", "=", "\"gray\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "out_path", "=", "out_path", "or", "\"filter.png\"", "\n", "if", "not", "overwrite", "and", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "        ", "raise", "OSError", "(", "\"Out path {} already exists.\"", ".", "format", "(", "out_path", ")", ")", "\n", "", "fig", ".", "savefig", "(", "out_path", ",", "dpi", "=", "dpi", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.filters.filter_activity.display_filter_grid": [[40, 73], ["numpy.array", "filter_activity._get_figure", "enumerate", "fig.savefig", "matplotlib.close", "numpy.expand_dims", "zip", "enumerate", "os.path.exists", "OSError", "numpy.asarray", "numpy.min", "numpy.max", "zip", "ax.imshow", "ax.annotate", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.filters.filter_activity._get_figure", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.imshow"], ["", "def", "display_filter_grid", "(", "filters", ",", "out_path", "=", "None", ",", "dpi", "=", "300", ",", "fig_width", "=", "8", ",", "\n", "overwrite", "=", "False", ",", "layer_names", "=", "None", ")", ":", "\n", "    ", "filters", "=", "np", ".", "array", "(", "filters", ")", "\n", "if", "filters", ".", "ndim", "==", "3", ":", "\n", "        ", "filters", "=", "np", ".", "expand_dims", "(", "filters", ",", "0", ")", "\n", "\n", "# Compute figure height and get figure with subplots", "\n", "", "rows", ",", "cols", "=", "filters", ".", "shape", "[", "0", ":", "2", "]", "\n", "ax_size", "=", "fig_width", "/", "cols", "\n", "fig_height", "=", "ax_size", "*", "rows", "\n", "fig", ",", "axes", "=", "_get_figure", "(", "(", "fig_width", ",", "fig_height", ")", ",", "rows", "=", "rows", ",", "cols", "=", "cols", ")", "\n", "\n", "# Plot the filters", "\n", "for", "layer_ind", ",", "(", "row", ",", "row_filters", ")", "in", "enumerate", "(", "zip", "(", "np", ".", "asarray", "(", "axes", ")", ",", "\n", "filters", ")", ")", ":", "\n", "        ", "vmin", ",", "vmax", "=", "np", ".", "min", "(", "row_filters", ")", ",", "np", ".", "max", "(", "row_filters", ")", "\n", "for", "i", ",", "(", "ax", ",", "filter", ")", "in", "enumerate", "(", "zip", "(", "row", ",", "row_filters", ")", ")", ":", "\n", "            ", "ax", ".", "imshow", "(", "filter", ",", "cmap", "=", "\"gray\"", ",", "vmin", "=", "vmin", ",", "vmax", "=", "vmax", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "name", "=", "layer_names", "[", "layer_ind", "]", "if", "layer_names", "else", "layer_ind", "\n", "if", "len", "(", "name", ")", ">", "10", ":", "\n", "                    ", "name", "=", "name", "[", ":", "10", "]", "+", "\"\\n\"", "+", "name", "[", "10", ":", "]", "\n", "", "ax", ".", "annotate", "(", "s", "=", "\"{}\"", ".", "format", "(", "name", ")", ",", "\n", "xy", "=", "(", "-", "0.2", ",", "0.5", ")", ",", "\n", "xycoords", "=", "ax", ".", "transAxes", ",", "\n", "ha", "=", "\"center\"", ",", "va", "=", "\"center\"", ",", "\n", "rotation", "=", "90", ",", "size", "=", "ax_size", "*", "7", ")", "\n", "# Save image", "\n", "", "", "", "out_path", "=", "out_path", "or", "\"filters.png\"", "\n", "if", "not", "overwrite", "and", "os", ".", "path", ".", "exists", "(", "out_path", ")", ":", "\n", "        ", "raise", "OSError", "(", "\"Out path {} already exists.\"", ".", "format", "(", "out_path", ")", ")", "\n", "", "fig", ".", "savefig", "(", "out_path", ",", "dpi", "=", "dpi", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.filters.filter_activity.deprocess_image": [[75, 97], ["x.transpose.mean", "numpy.clip", "numpy.clip().astype", "x.transpose.std", "tensorflow._api.v1.keras.backend.epsilon", "tensorflow._api.v1.keras.backend.image_data_format", "x.transpose.transpose", "numpy.clip"], "function", ["None"], ["", "def", "deprocess_image", "(", "x", ")", ":", "\n", "    ", "\"\"\"utility function to convert a float array into a valid uint8 image.\n    # Arguments\n        x: A numpy-array representing the generated image.\n    # Returns\n        A processed numpy-array, which could be used in e.g. imshow.\n    \"\"\"", "\n", "# normalize tensor: center on 0., ensure std is 0.25", "\n", "x", "-=", "x", ".", "mean", "(", ")", "\n", "x", "/=", "(", "x", ".", "std", "(", ")", "+", "K", ".", "epsilon", "(", ")", ")", "\n", "x", "*=", "0.25", "\n", "\n", "# clip to [0, 1]", "\n", "x", "+=", "0.5", "\n", "x", "=", "np", ".", "clip", "(", "x", ",", "0", ",", "1", ")", "\n", "\n", "# convert to RGB array", "\n", "x", "*=", "255", "\n", "if", "K", ".", "image_data_format", "(", ")", "==", "'channels_first'", ":", "\n", "        ", "x", "=", "x", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "x", "=", "np", ".", "clip", "(", "x", ",", "0", ",", "255", ")", ".", "astype", "(", "'uint8'", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.filters.filter_activity.process_image": [[99, 112], ["tensorflow._api.v1.keras.backend.image_data_format", "x.transpose.transpose", "former.mean", "former.std"], "function", ["None"], ["", "def", "process_image", "(", "x", ",", "former", ")", ":", "\n", "    ", "\"\"\"utility function to convert a valid uint8 image back into a float array.\n       Reverses `deprocess_image`.\n    # Arguments\n        x: A numpy-array, which could be used in e.g. imshow.\n        former: The former numpy-array.\n                Need to determine the former mean and variance.\n    # Returns\n        A processed numpy-array representing the generated image.\n    \"\"\"", "\n", "if", "K", ".", "image_data_format", "(", ")", "==", "'channels_first'", ":", "\n", "        ", "x", "=", "x", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "\n", "", "return", "(", "x", "/", "255", "-", "0.5", ")", "*", "4", "*", "former", ".", "std", "(", ")", "+", "former", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.filters.filter_activity._run_optim": [[114, 127], ["range", "print", "iterate", "tensorflow._api.v1.keras.backend.epsilon"], "function", ["None"], ["", "def", "_run_optim", "(", "img", ",", "iterate", ",", "dim", ",", "step", ",", "steps", ")", ":", "\n", "    ", "loss_value", "=", "0.0", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "        ", "s", "=", "\"[*] Size {} - Step {}/{} - \"", "\"loss {:.3f}\"", ".", "format", "(", "dim", ",", "i", "+", "1", ",", "steps", ",", "loss_value", ")", "\n", "print", "(", "s", ",", "end", "=", "\"\\r\"", ",", "flush", "=", "True", ")", "\n", "\n", "loss_value", ",", "grads_value", "=", "iterate", "(", "[", "img", "]", ")", "\n", "img", "+=", "grads_value", "*", "step", "\n", "if", "loss_value", "<=", "K", ".", "epsilon", "(", ")", ":", "\n", "# some filters get stuck to 0, we can skip them", "\n", "            ", "break", "\n", "", "", "return", "img", ",", "loss_value", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.filters.filter_activity.visualize_filter": [[129, 180], ["tensorflow._api.v1.keras.backend.mean", "tensorflow._api.v1.keras.backend.function", "tuple", "reversed", "filter_activity._run_optim", "print", "isinstance", "ValueError", "tensorflow._api.v1.keras.backend.abs", "tensorflow._api.v1.keras.backend.gradients", "tensorflow._api.v1.keras.backend.sqrt", "numpy.random.randn", "range", "filter_activity._run_optim", "tuple", "filter_activity.deprocess_image", "numpy.stack", "PIL.Image.fromarray", "numpy.array", "np.array.squeeze", "tensorflow._api.v1.keras.backend.mean", "int", "numpy.array", "type", "tensorflow._api.v1.keras.backend.square", "int", "pil_image.fromarray.resize", "filter_activity.process_image", "pil_image.fromarray.squeeze"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.filters.filter_activity._run_optim", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.filters.filter_activity._run_optim", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.filters.filter_activity.deprocess_image", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.filters.filter_activity.process_image"], ["", "def", "visualize_filter", "(", "model", ",", "\n", "layer_ind", ",", "\n", "filter_index", ",", "\n", "steps", "=", "20", ",", "\n", "lr", "=", "1.0", ",", "\n", "upscaling_steps", "=", "9", ",", "\n", "upscaling_factor", "=", "1.2", ",", "\n", "output_dim", "=", "(", "384", ",", "384", ")", ")", ":", "\n", "\n", "# Build loss function for the specified filter of the specified layer", "\n", "    ", "layer", "=", "model", ".", "layers", "[", "layer_ind", "]", "\n", "if", "not", "isinstance", "(", "layer", ",", "tf", ".", "keras", ".", "layers", ".", "Conv2D", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Currently supports only Conv2D layers, \"", "\n", "\"got {}\"", ".", "format", "(", "type", "(", "layer", ")", ")", ")", "\n", "", "loss", "=", "K", ".", "mean", "(", "K", ".", "abs", "(", "layer", ".", "output", "[", "...", ",", "filter_index", "]", ")", ")", "\n", "input_image", "=", "model", ".", "inputs", "[", "0", "]", "\n", "grads", "=", "K", ".", "gradients", "(", "loss", ",", "input_image", ")", "[", "0", "]", "\n", "\n", "# normalization trick: we normalize the gradient", "\n", "grads", "/=", "(", "K", ".", "sqrt", "(", "K", ".", "mean", "(", "K", ".", "square", "(", "grads", ")", ")", ")", "+", "1e-5", ")", "\n", "\n", "# this function returns the loss and grads given the input picture", "\n", "iterate_func", "=", "K", ".", "function", "(", "[", "input_image", "]", ",", "[", "loss", ",", "grads", "]", ")", "\n", "\n", "intermediate_dim", "=", "tuple", "(", "\n", "int", "(", "x", "/", "(", "upscaling_factor", "**", "upscaling_steps", ")", ")", "for", "x", "in", "output_dim", "\n", ")", "\n", "img", "=", "np", ".", "random", ".", "randn", "(", "1", ",", "intermediate_dim", "[", "0", "]", ",", "intermediate_dim", "[", "1", "]", ",", "1", ")", "*", "0.1", "\n", "\n", "for", "up", "in", "reversed", "(", "range", "(", "upscaling_steps", ")", ")", ":", "\n", "# we run gradient ascent for e.g. 20 steps", "\n", "        ", "img", ",", "loss_value", "=", "_run_optim", "(", "img", ",", "iterate_func", ",", "intermediate_dim", ",", "\n", "lr", ",", "steps", ")", "\n", "\n", "# Calculate up-scaled dimensions", "\n", "intermediate_dim", "=", "tuple", "(", "\n", "int", "(", "x", "/", "(", "upscaling_factor", "**", "up", ")", ")", "for", "x", "in", "output_dim", "\n", ")", "\n", "# Upscale", "\n", "temp_img", "=", "deprocess_image", "(", "img", "[", "0", "]", ")", "\n", "temp_img", "=", "np", ".", "stack", "(", "(", "temp_img", ".", "squeeze", "(", ")", ",", ")", "*", "3", ",", "axis", "=", "-", "1", ")", "\n", "temp_img", "=", "pil_image", ".", "fromarray", "(", "temp_img", ")", "\n", "temp_img", "=", "np", ".", "array", "(", "temp_img", ".", "resize", "(", "intermediate_dim", ",", "\n", "pil_image", ".", "BICUBIC", ")", ")", "[", "...", ",", "0", ":", "1", "]", "\n", "img", "=", "np", ".", "array", "(", "[", "process_image", "(", "temp_img", ",", "img", "[", "0", "]", ")", "]", ")", "\n", "\n", "# Run one final time on full-size image", "\n", "", "img", ",", "loss_value", "=", "_run_optim", "(", "img", ",", "iterate_func", ",", "intermediate_dim", ",", "\n", "lr", ",", "steps", ")", "\n", "print", "(", "\"\"", ")", "\n", "return", "img", ".", "squeeze", "(", ")", ",", "loss_value", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.simple_sequences.RandomDataFeeder.__init__": [[6, 12], ["base_sequence.BaseSequence.__init__", "numpy.arange", "len"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["    ", "def", "__init__", "(", "self", ",", "X", ",", "y", ",", "batch_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "X", "=", "X", "\n", "self", ".", "y", "=", "y", "\n", "self", ".", "bs", "=", "batch_size", "\n", "self", ".", "inds", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "X", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.simple_sequences.RandomDataFeeder.__len__": [[13, 16], ["len", "int", "numpy.ceil"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "n_samples", "=", "len", "(", "self", ".", "X", ")", "\n", "return", "int", "(", "np", ".", "ceil", "(", "n_samples", "/", "self", ".", "bs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.simple_sequences.RandomDataFeeder.__getitem__": [[17, 20], ["numpy.random.choice"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "inds", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "inds", ",", "size", "=", "self", ".", "bs", ",", "replace", "=", "False", ")", "\n", "return", "self", ".", "X", "[", "inds", "]", ",", "self", ".", "y", "[", "inds", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.__init__": [[7, 16], ["mpunet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.__init__", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.log"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log"], ["    ", "def", "__init__", "(", "self", ",", "image_pair_queue", ",", "views", ",", "no_log", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "image_pair_queue", ",", "**", "kwargs", ")", "\n", "self", ".", "views", "=", "views", "\n", "self", ".", "batch_shape", "=", "(", "self", ".", "batch_size", ",", "self", ".", "sample_dim", ",", "self", ".", "sample_dim", ",", "\n", "self", ".", "n_classes", ")", "\n", "\n", "if", "not", "no_log", ":", "\n", "            ", "self", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.log": [[17, 28], ["isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.logger", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.logger", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.logger", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.logger", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.logger", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.logger", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.logger", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.logger", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.logger"], "methods", ["None"], ["", "", "def", "log", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "(", "\"\\nIs validation:               %s\"", "%", "self", ".", "is_validation", ")", "\n", "self", ".", "logger", "(", "\"Using real space span:       %s\"", "%", "self", ".", "real_space_span", ")", "\n", "self", ".", "logger", "(", "\"Using sample dim:            %s\"", "%", "self", ".", "sample_dim", ")", "\n", "self", ".", "logger", "(", "\"Using real space sample res: %s\"", "%", "(", "self", ".", "real_space_span", "/", "\n", "self", ".", "sample_dim", ")", ")", "\n", "self", ".", "logger", "(", "\"N fg slices:                 %s\"", "%", "self", ".", "n_fg_slices", ")", "\n", "self", ".", "logger", "(", "\"Batch size:                  %s\"", "%", "self", ".", "batch_size", ")", "\n", "self", ".", "logger", "(", "\"Force all FG:                %s\"", "%", "self", ".", "force_all_fg", ")", "\n", "self", ".", "logger", "(", "\"Noise SD:                    %s\"", "%", "self", ".", "noise_sd", ")", "\n", "self", ".", "logger", "(", "\"Augmenters:                  %s\"", "%", "self", ".", "list_of_augmenters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.get_view_from": [[29, 102], ["numpy.linspace", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.logger", "numpy.empty", "ThreadPoolExecutor", "numpy.arange", "ThreadPoolExecutor.map", "print", "mpunet.interpolation.sample_grid.get_bounding_sphere_real_radius", "int", "numpy.empty", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.sample_at", "print", "isinstance", "int", "len", "int.split"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_bounding_sphere_real_radius", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.sample_at"], ["", "def", "get_view_from", "(", "self", ",", "image", ",", "view", ",", "n_planes", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n\n        :param image:\n        :param view:\n        :param n_planes:\n        :return:\n        \"\"\"", "\n", "# Prepare sample plane arguments", "\n", "kwargs", "=", "{", "\n", "\"norm_vector\"", ":", "view", ",", "\n", "\"sample_dim\"", ":", "self", ".", "sample_dim", ",", "\n", "\"real_space_span\"", ":", "self", ".", "real_space_span", ",", "\n", "\"noise_sd\"", ":", "0.", ",", "\n", "\"test_mode\"", ":", "True", "\n", "}", "\n", "\n", "sample_res", "=", "self", ".", "real_space_span", "/", "(", "self", ".", "sample_dim", "-", "1", ")", "\n", "if", "n_planes", "==", "\"by_radius\"", ":", "\n", "# Get sample sphere radius", "\n", "            ", "bounds", "=", "get_bounding_sphere_real_radius", "(", "image", ")", "\n", "n_planes", "=", "int", "(", "2", "*", "bounds", "/", "sample_res", ")", "\n", "", "else", ":", "\n", "            ", "extra", "=", "0", "\n", "if", "n_planes", "==", "\"same\"", ":", "\n", "                ", "n_planes", "=", "self", ".", "sample_dim", "\n", "", "elif", "isinstance", "(", "n_planes", ",", "str", ")", "and", "n_planes", "[", ":", "5", "]", "==", "\"same+\"", ":", "\n", "                ", "extra", "=", "int", "(", "n_planes", ".", "split", "(", "\"+\"", ")", "[", "-", "1", "]", ")", "\n", "n_planes", "=", "self", ".", "sample_dim", "+", "extra", "\n", "", "bounds", "=", "(", "self", ".", "real_space_span", "+", "(", "extra", "*", "sample_res", ")", ")", "/", "2", "\n", "\n", "# Define offsets", "\n", "", "offsets", "=", "np", ".", "linspace", "(", "-", "bounds", ",", "bounds", ",", "n_planes", ")", "\n", "self", ".", "logger", "(", "\"Sampling %i planes from \"", "\n", "\"offset %.3f to %.3f...\"", "%", "(", "n_planes", ",", "offsets", "[", "0", "]", ",", "\n", "offsets", "[", "-", "1", "]", ")", ")", "\n", "\n", "# Prepare results arrays", "\n", "shape", "=", "(", "self", ".", "sample_dim", ",", "self", ".", "sample_dim", ",", "n_planes", ")", "\n", "Xs", "=", "np", ".", "empty", "(", "shape", "+", "(", "image", ".", "n_channels", ",", ")", ",", "dtype", "=", "image", ".", "image", ".", "dtype", ")", "\n", "if", "not", "image", ".", "predict_mode", ":", "\n", "            ", "ys", "=", "np", ".", "empty", "(", "shape", ",", "dtype", "=", "image", ".", "labels", ".", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "ys", "=", "None", "\n", "\n", "# Prepare thread pool", "\n", "", "from", "concurrent", ".", "futures", "import", "ThreadPoolExecutor", "\n", "pool", "=", "ThreadPoolExecutor", "(", "max_workers", "=", "7", ")", "\n", "\n", "def", "_do", "(", "offset", ",", "ind", ")", ":", "\n", "            ", "im", ",", "lab", ",", "real_axis", ",", "inv_basis", "=", "self", ".", "sample_at", "(", "offset", ",", "\n", "image", ".", "interpolator", ",", "\n", "image", ".", "scaler", ",", "\n", "kwargs", ")", "\n", "return", "im", ",", "lab", ",", "real_axis", ",", "inv_basis", ",", "ind", "\n", "\n", "# Perform interpolation", "\n", "", "inds", "=", "np", ".", "arange", "(", "offsets", ".", "shape", "[", "0", "]", ")", "\n", "result", "=", "pool", ".", "map", "(", "_do", ",", "offsets", ",", "inds", ")", "\n", "\n", "i", "=", "1", "\n", "for", "im", ",", "lab", ",", "real_axis", ",", "inv_basis", ",", "ind", "in", "result", ":", "\n", "            ", "print", "(", "\"   %i/%i\"", "%", "(", "i", ",", "len", "(", "offsets", "+", "1", ")", ")", ",", "end", "=", "\"\\r\"", ",", "flush", "=", "True", ")", "\n", "i", "+=", "1", "\n", "\n", "# Add planes to volumes", "\n", "Xs", "[", "...", ",", "ind", ",", ":", "]", "=", "im", "\n", "if", "not", "image", ".", "predict_mode", ":", "\n", "                ", "ys", "[", "...", ",", "ind", "]", "=", "lab", "\n", "\n", "", "", "print", "(", "''", ")", "\n", "return", "Xs", ",", "ys", ",", "(", "real_axis", ",", "real_axis", ",", "offsets", ")", ",", "inv_basis", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.sample_at": [[103, 118], ["mpunet.interpolation.sample_grid.sample_plane_at", "interpolator", "scaler.transform"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.sample_plane_at", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.interpolator", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.transform"], ["", "def", "sample_at", "(", "self", ",", "offset", ",", "interpolator", ",", "scaler", ",", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n        \"\"\"", "\n", "# Get plane mgrid", "\n", "grid", ",", "real_axis", ",", "inv_basis", "=", "sample_plane_at", "(", "offset_from_center", "=", "offset", ",", "\n", "**", "kwargs", ")", "\n", "\n", "# Interpolate at grid points", "\n", "im", ",", "lab", "=", "interpolator", "(", "grid", ")", "\n", "\n", "# Normalize", "\n", "im", "=", "scaler", ".", "transform", "(", "im", ")", "\n", "\n", "return", "im", ",", "lab", ",", "real_axis", ",", "inv_basis", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D._get_valid_slice_from": [[119, 162], ["mpunet.interpolation.sample_grid.sample_plane_at", "image.interpolator.intrp_labels", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.validate_lab", "numpy.random.uniform", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.validate_lab_vec", "image.interpolator.intrp_image", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.is_valid_im", "numpy.random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.sample_plane_at", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.intrp_labels", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.validate_lab", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.validate_lab_vec", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.intrp_image", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.is_valid_im"], ["", "def", "_get_valid_slice_from", "(", "self", ",", "image", ",", "max_tries", ",", "has_fg_vec", ",", "has_fg_count", ",", "cur_bs", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n        \"\"\"", "\n", "tries", "=", "0", "\n", "while", "tries", "<", "max_tries", ":", "\n", "# Sample a batch from the image", "\n", "            ", "tries", "+=", "1", "\n", "\n", "# Randomly sample a slice from a random image and random view", "\n", "view", "=", "self", ".", "views", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "views", ")", ",", "1", ")", "[", "0", "]", "]", "\n", "\n", "# Get sample sphere radius", "\n", "sphere_r_real", "=", "self", ".", "real_space_span", "//", "2", "\n", "\n", "# Sample a position on the axis", "\n", "rd", "=", "np", ".", "random", ".", "uniform", "(", "-", "sphere_r_real", ",", "sphere_r_real", ",", "1", ")", "[", "0", "]", "\n", "\n", "# Get grid and interpolate", "\n", "mgrid", "=", "sample_plane_at", "(", "view", ",", "\n", "sample_dim", "=", "self", ".", "sample_dim", ",", "\n", "real_space_span", "=", "self", ".", "real_space_span", ",", "\n", "offset_from_center", "=", "rd", ",", "\n", "noise_sd", "=", "self", ".", "noise_sd", ",", "\n", "test_mode", "=", "False", ")", "\n", "\n", "# Get interpolated labels", "\n", "lab", "=", "image", ".", "interpolator", ".", "intrp_labels", "(", "mgrid", ")", "\n", "\n", "if", "self", ".", "force_all_fg", "and", "tries", "<", "max_tries", ":", "\n", "                ", "valid", ",", "has_fg_vec", "=", "self", ".", "validate_lab_vec", "(", "lab", ",", "has_fg_vec", ",", "cur_bs", ")", "\n", "if", "not", "valid", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "valid_lab", ",", "fg_change", "=", "self", ".", "validate_lab", "(", "lab", ",", "has_fg_count", ",", "cur_bs", ")", "\n", "if", "valid_lab", "or", "tries", "==", "max_tries", ":", "\n", "# Get interpolated image", "\n", "                ", "im", "=", "image", ".", "interpolator", ".", "intrp_image", "(", "mgrid", ")", "\n", "im_bg_val", "=", "image", ".", "interpolator", ".", "bg_value", "\n", "if", "tries", "==", "max_tries", "or", "self", ".", "is_valid_im", "(", "im", ",", "im_bg_val", ")", ":", "\n", "# Accept slice + update foreground counter", "\n", "                    ", "has_fg_count", "+=", "fg_change", "\n", "return", "im", ",", "lab", ",", "has_fg_count", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.__getitem__": [[163, 217], ["isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.seed", "numpy.zeros_like", "range", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.scale", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.augment", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.prepare_batches", "len", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.image_pair_queue.get_random_image", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D._get_valid_slice_from", "scalers.append", "bg_values.append", "isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.append", "batch_y.append", "batch_w.append", "len"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.base_sequence.BaseSequence.seed", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.scale", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.augment", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.prepare_batches", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_random_image", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D._get_valid_slice_from"], ["", "", "", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n        \"\"\"", "\n", "# If multiprocessing, set unique seed for this particular process", "\n", "self", ".", "seed", "(", ")", "\n", "\n", "# Store how many slices has fg so far", "\n", "has_fg_count", "=", "0", "\n", "has_fg_vec", "=", "np", ".", "zeros_like", "(", "self", ".", "fg_classes", ")", "\n", "\n", "# Interpolate on a random index for each sample image to generate batch", "\n", "batch_x", ",", "batch_y", ",", "batch_w", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "# Maximum number of sampling trails", "\n", "max_tries", "=", "10", "\n", "\n", "scalers", "=", "[", "]", "\n", "bg_values", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "with", "self", ".", "image_pair_queue", ".", "get_random_image", "(", ")", "as", "image", ":", "\n", "                ", "im", ",", "lab", ",", "has_fg_count", "=", "self", ".", "_get_valid_slice_from", "(", "\n", "image", "=", "image", ",", "\n", "max_tries", "=", "max_tries", ",", "\n", "has_fg_vec", "=", "has_fg_vec", ",", "\n", "has_fg_count", "=", "has_fg_count", ",", "\n", "cur_bs", "=", "len", "(", "batch_y", ")", "\n", ")", "\n", "\n", "# Save scaler to normalize image later (after potential aug)", "\n", "scalers", ".", "append", "(", "image", ".", "scaler", ")", "\n", "\n", "# Save bg value if needed in potential augmenters", "\n", "bg_values", ".", "append", "(", "image", ".", "interpolator", ".", "bg_value", ")", "\n", "\n", "# Add to batches", "\n", "batch_x", ".", "append", "(", "im", ")", "\n", "batch_y", ".", "append", "(", "lab", ")", "\n", "batch_w", ".", "append", "(", "image", ".", "sample_weight", ")", "\n", "\n", "# Normalize images", "\n", "", "", "batch_x", "=", "self", ".", "scale", "(", "batch_x", ",", "scalers", ")", "\n", "\n", "# Apply augmentation if specified", "\n", "batch_x", ",", "batch_y", ",", "batch_w", "=", "self", ".", "augment", "(", "batch_x", ",", "batch_y", ",", "\n", "batch_w", ",", "bg_values", ")", "\n", "\n", "# Reshape, one-hot encode etc.", "\n", "batch_x", ",", "batch_y", ",", "batch_w", "=", "self", ".", "prepare_batches", "(", "batch_x", ",", "\n", "batch_y", ",", "\n", "batch_w", ")", "\n", "\n", "assert", "len", "(", "batch_x", ")", "==", "self", ".", "batch_size", "\n", "return", "batch_x", ",", "batch_y", ",", "batch_w", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.__init__": [[8, 17], ["mpunet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.__init__", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.log"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log"], ["    ", "def", "__init__", "(", "self", ",", "image_pair_queue", ",", "real_box_dim", ",", "no_log", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "image_pair_queue", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "real_box_dim", "=", "real_box_dim", "\n", "self", ".", "batch_shape", "=", "(", "self", ".", "batch_size", ",", "self", ".", "sample_dim", ",", "self", ".", "sample_dim", ",", "\n", "self", ".", "sample_dim", ",", "self", ".", "n_classes", ")", "\n", "\n", "if", "not", "no_log", ":", "\n", "            ", "self", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.log": [[18, 26], ["isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.logger", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.logger", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.logger", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.logger", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.logger", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.logger"], "methods", ["None"], ["", "", "def", "log", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "(", "\"Using sample dim:            %s\"", "%", "self", ".", "sample_dim", ")", "\n", "self", ".", "logger", "(", "\"Using box real dim:          %s\"", "%", "self", ".", "real_box_dim", ")", "\n", "self", ".", "logger", "(", "\"Using real space sample res: %s\"", "%", "(", "self", ".", "real_box_dim", "/", "\n", "self", ".", "sample_dim", ")", ")", "\n", "self", ".", "logger", "(", "\"N fg slices:                 %s\"", "%", "self", ".", "n_fg_slices", ")", "\n", "self", ".", "logger", "(", "\"Batch size:                  %s\"", "%", "self", ".", "batch_size", ")", "\n", "self", ".", "logger", "(", "\"Force all FG:                %s\"", "%", "self", ".", "force_all_fg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D._intrp_and_norm": [[27, 40], ["image.interpolator.intrp_image", "image.scaler.transform", "image.interpolator.intrp_labels"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.intrp_image", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.transform", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.intrp_labels"], ["", "@", "staticmethod", "\n", "def", "_intrp_and_norm", "(", "image", ",", "grid", ",", "intrp_lab", ")", ":", "\n", "# Interpolate", "\n", "        ", "im", "=", "image", ".", "interpolator", ".", "intrp_image", "(", "grid", ")", "\n", "\n", "# Normalize", "\n", "im", "=", "image", ".", "scaler", ".", "transform", "(", "im", ")", "\n", "\n", "lab", "=", "None", "\n", "if", "intrp_lab", ":", "\n", "            ", "lab", "=", "image", ".", "interpolator", ".", "intrp_labels", "(", "grid", ")", "\n", "\n", "", "return", "im", ",", "lab", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.get_base_patches_from": [[41, 66], ["numpy.asarray", "mpunet.interpolation.linalg.mgrid_to_points", "numpy.ceil().astype", "numpy.meshgrid", "mpunet.interpolation.sample_grid.sample_box_at", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D._intrp_and_norm", "max", "range", "numpy.linspace", "range", "numpy.ceil", "tuple", "len", "len"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.mgrid_to_points", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.sample_box_at", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D._intrp_and_norm"], ["", "def", "get_base_patches_from", "(", "self", ",", "image", ",", "return_y", "=", "False", ")", ":", "\n", "        ", "real_dims", "=", "image", ".", "real_shape", "\n", "\n", "# Calculate positions", "\n", "sample_space", "=", "np", ".", "asarray", "(", "[", "max", "(", "i", ",", "self", ".", "real_box_dim", ")", "for", "i", "in", "real_dims", "]", ")", "\n", "d", "=", "(", "sample_space", "-", "self", ".", "real_box_dim", ")", "\n", "min_cov", "=", "[", "np", ".", "ceil", "(", "sample_space", "[", "i", "]", "/", "self", ".", "real_box_dim", ")", ".", "astype", "(", "np", ".", "int", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "ds", "=", "[", "np", ".", "linspace", "(", "0", ",", "d", "[", "i", "]", ",", "min_cov", "[", "i", "]", ")", "-", "sample_space", "[", "i", "]", "/", "2", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "\n", "# Get placement coordinate points", "\n", "placements", "=", "mgrid_to_points", "(", "np", ".", "meshgrid", "(", "*", "tuple", "(", "ds", ")", ")", ")", "\n", "\n", "for", "p", "in", "placements", ":", "\n", "            ", "grid", ",", "axes", ",", "inv_mat", "=", "sample_box_at", "(", "real_placement", "=", "p", ",", "\n", "sample_dim", "=", "self", ".", "sample_dim", ",", "\n", "real_box_dim", "=", "self", ".", "real_box_dim", ",", "\n", "noise_sd", "=", "0.0", ",", "\n", "test_mode", "=", "True", ")", "\n", "\n", "im", ",", "lab", "=", "self", ".", "_intrp_and_norm", "(", "image", ",", "grid", ",", "return_y", ")", "\n", "\n", "if", "return_y", ":", "\n", "                ", "yield", "im", ",", "lab", ",", "grid", ",", "axes", ",", "inv_mat", ",", "len", "(", "placements", ")", "\n", "", "else", ":", "\n", "                ", "yield", "im", ",", "grid", ",", "axes", ",", "inv_mat", ",", "len", "(", "placements", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.get_N_random_patches_from": [[67, 86], ["range", "mpunet.interpolation.sample_grid.sample_box", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D._intrp_and_norm"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.sample_box", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D._intrp_and_norm"], ["", "", "", "def", "get_N_random_patches_from", "(", "self", ",", "image", ",", "N", ",", "return_y", "=", "False", ")", ":", "\n", "        ", "if", "N", ">", "0", ":", "\n", "# Sample N patches from X", "\n", "            ", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "# Get grid and interpolate", "\n", "                ", "grid", ",", "axes", ",", "inv_mat", "=", "sample_box", "(", "sample_dim", "=", "self", ".", "sample_dim", ",", "\n", "real_box_dim", "=", "self", ".", "real_box_dim", ",", "\n", "real_dims", "=", "image", ".", "real_shape", ",", "\n", "noise_sd", "=", "self", ".", "noise_sd", ",", "\n", "test_mode", "=", "True", ")", "\n", "\n", "im", ",", "lab", "=", "self", ".", "_intrp_and_norm", "(", "image", ",", "grid", ",", "return_y", ")", "\n", "\n", "if", "return_y", ":", "\n", "                    ", "yield", "im", ",", "lab", ",", "grid", ",", "axes", ",", "inv_mat", "\n", "", "else", ":", "\n", "                    ", "yield", "im", ",", "grid", ",", "axes", ",", "inv_mat", "\n", "", "", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D._get_valid_box_from": [[87, 119], ["mpunet.interpolation.sample_grid.sample_box", "image.interpolator.intrp_labels", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.validate_lab", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.validate_lab_vec", "image.interpolator.intrp_image", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.is_valid_im"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.sample_box", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.intrp_labels", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.validate_lab", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.validate_lab_vec", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.intrp_image", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.is_valid_im"], ["", "", "def", "_get_valid_box_from", "(", "self", ",", "image", ",", "max_tries", ",", "has_fg_vec", ",", "has_fg_count", ",", "cur_bs", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n        \"\"\"", "\n", "tries", "=", "0", "\n", "while", "tries", "<", "max_tries", ":", "\n", "# Sample a batch from the image", "\n", "            ", "tries", "+=", "1", "\n", "\n", "# Get grid and interpolate", "\n", "mgrid", "=", "sample_box", "(", "sample_dim", "=", "self", ".", "sample_dim", ",", "\n", "real_box_dim", "=", "self", ".", "real_box_dim", ",", "\n", "real_dims", "=", "image", ".", "real_shape", ",", "\n", "noise_sd", "=", "self", ".", "noise_sd", ")", "\n", "\n", "# Get interpolated labels", "\n", "lab", "=", "image", ".", "interpolator", ".", "intrp_labels", "(", "mgrid", ")", "\n", "valid_lab", ",", "fg_change", "=", "self", ".", "validate_lab", "(", "lab", ",", "has_fg_count", ",", "cur_bs", ")", "\n", "\n", "if", "self", ".", "force_all_fg", "and", "tries", "<", "max_tries", ":", "\n", "                ", "valid", ",", "has_fg_vec", "=", "self", ".", "validate_lab_vec", "(", "lab", ",", "has_fg_vec", ",", "cur_bs", ")", "\n", "if", "not", "valid", ":", "\n", "                    ", "continue", "\n", "\n", "", "", "if", "valid_lab", "or", "tries", "==", "max_tries", ":", "\n", "# Get interpolated image", "\n", "                ", "im", "=", "image", ".", "interpolator", ".", "intrp_image", "(", "mgrid", ")", "\n", "im_bg_val", "=", "image", ".", "interpolator", ".", "bg_value", "\n", "if", "tries", "==", "max_tries", "or", "self", ".", "is_valid_im", "(", "im", ",", "im_bg_val", ")", ":", "\n", "# Accept box, update foreground counter", "\n", "                    ", "has_fg_vec", "+=", "fg_change", "\n", "return", "im", ",", "lab", ",", "has_fg_count", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.__getitem__": [[120, 174], ["isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.seed", "numpy.zeros_like", "range", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.scale", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.augment", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.prepare_batches", "len", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.image_pair_queue.get_random_image", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D._get_valid_box_from", "scalers.append", "bg_values.append", "isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D.append", "batch_y.append", "batch_w.append", "len"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.base_sequence.BaseSequence.seed", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.scale", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.augment", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.prepare_batches", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_random_image", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_3d.IsotrophicLiveViewSequence3D._get_valid_box_from"], ["", "", "", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Used by keras.fit_generator to fetch mini-batches during training\n        \"\"\"", "\n", "# If multiprocessing, set unique seed for this particular process", "\n", "self", ".", "seed", "(", ")", "\n", "\n", "# Store how many slices has fg so far", "\n", "has_fg_count", "=", "0", "\n", "has_fg_vec", "=", "np", ".", "zeros_like", "(", "self", ".", "fg_classes", ")", "\n", "\n", "# Interpolate on a random index for each sample image to generate batch", "\n", "batch_x", ",", "batch_y", ",", "batch_w", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "# Get a random image", "\n", "max_tries", "=", "self", ".", "batch_size", "*", "10", "\n", "\n", "scalers", "=", "[", "]", "\n", "bg_values", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "batch_size", ")", ":", "\n", "            ", "with", "self", ".", "image_pair_queue", ".", "get_random_image", "(", ")", "as", "image", ":", "\n", "                ", "im", ",", "lab", ",", "has_fg_count", "=", "self", ".", "_get_valid_box_from", "(", "\n", "image", "=", "image", ",", "\n", "max_tries", "=", "max_tries", ",", "\n", "has_fg_vec", "=", "has_fg_vec", ",", "\n", "has_fg_count", "=", "has_fg_count", ",", "\n", "cur_bs", "=", "len", "(", "batch_y", ")", "\n", ")", "\n", "\n", "# Save scaler to normalize image later (after potential aug)", "\n", "scalers", ".", "append", "(", "image", ".", "scaler", ")", "\n", "\n", "# Save bg value if needed in potential augmenters", "\n", "bg_values", ".", "append", "(", "image", ".", "interpolator", ".", "bg_value", ")", "\n", "\n", "# Add to batches", "\n", "batch_x", ".", "append", "(", "im", ")", "\n", "batch_y", ".", "append", "(", "lab", ")", "\n", "batch_w", ".", "append", "(", "image", ".", "sample_weight", ")", "\n", "\n", "# Normalize images", "\n", "", "", "batch_x", "=", "self", ".", "scale", "(", "batch_x", ",", "scalers", ")", "\n", "\n", "# Apply augmentation if specified", "\n", "batch_x", ",", "batch_y", ",", "batch_w", "=", "self", ".", "augment", "(", "batch_x", ",", "batch_y", ",", "\n", "batch_w", ",", "bg_values", ")", "\n", "\n", "# Reshape, one-hot encode etc.", "\n", "batch_x", ",", "batch_y", ",", "batch_w", "=", "self", ".", "prepare_batches", "(", "batch_x", ",", "\n", "batch_y", ",", "\n", "batch_w", ")", "\n", "\n", "assert", "len", "(", "batch_x", ")", "==", "self", ".", "batch_size", "\n", "return", "batch_x", ",", "batch_y", ",", "batch_w", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.base_sequence.BaseSequence.__init__": [[8, 14], ["tensorflow.keras.utils.Sequence.__init__"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# A dictionary mapping process names to whether the process has been", "\n", "# seeded", "\n", "self", ".", "is_seeded", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.base_sequence.BaseSequence.seed": [[15, 25], ["multiprocessing.current_process", "numpy.random.seed"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.base_sequence.BaseSequence.seed"], ["", "def", "seed", "(", "self", ")", ":", "\n", "# If multiprocessing the processes will inherit the RNG state of the", "\n", "# main process - here we reseed each process once so that the batches", "\n", "# are randomly generated across processes", "\n", "        ", "pname", "=", "current_process", "(", ")", ".", "name", "\n", "if", "pname", "not", "in", "self", ".", "is_seeded", "or", "not", "self", ".", "is_seeded", "[", "pname", "]", ":", "\n", "# Re-seed this process", "\n", "# If threading this will just re-seed MainProcess", "\n", "            ", "np", ".", "random", ".", "seed", "(", ")", "\n", "self", ".", "is_seeded", "[", "pname", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.base_sequence.BaseSequence.__len__": [[26, 29], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.base_sequence.BaseSequence.__getitem__": [[30, 33], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.base_sequence.BaseSequence.__call__": [[34, 43], ["base_sequence.BaseSequence.__call__.tensor_iter"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "import", "tensorflow", "as", "tf", "\n", "def", "tensor_iter", "(", ")", ":", "\n", "            ", "\"\"\" Iterates the dataset, converting numpy arrays to tensors \"\"\"", "\n", "for", "x", ",", "y", ",", "w", "in", "self", ":", "\n", "                ", "yield", "(", "tf", ".", "convert_to_tensor", "(", "x", ")", ",", "\n", "tf", ".", "convert_to_tensor", "(", "y", ")", ",", "\n", "tf", ".", "convert_to_tensor", "(", "w", ")", ")", "\n", "", "", "return", "tensor_iter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.base_sequence.BaseSequence.__iter__": [[44, 47], ["range", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "self", "[", "i", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.__init__": [[7, 48], ["mpunet.sequences.BaseSequence.__init__", "numpy.arange", "mpunet.logging.ScreenLogger", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_pair_queue", ",", "dim", ",", "batch_size", ",", "n_classes", ",", "\n", "real_space_span", "=", "None", ",", "noise_sd", "=", "0.", ",", "force_all_fg", "=", "\"auto\"", ",", "\n", "fg_batch_fraction", "=", "0.50", ",", "label_crop", "=", "None", ",", "logger", "=", "None", ",", "\n", "is_validation", "=", "False", ",", "list_of_augmenters", "=", "None", ",", "flatten_y", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Validation or training batch generator?", "\n", "self", ".", "is_validation", "=", "is_validation", "\n", "\n", "# Set logger or default print", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "\n", "# Set views and attributes for plane sample generation", "\n", "self", ".", "sample_dim", "=", "dim", "\n", "self", ".", "real_space_span", "=", "real_space_span", "\n", "self", ".", "noise_sd", "=", "noise_sd", "if", "not", "self", ".", "is_validation", "else", "0.", "\n", "\n", "# Set data", "\n", "self", ".", "image_pair_queue", "=", "image_pair_queue", "\n", "\n", "# Augmenter, applied to batch at creation time", "\n", "# Do not augment validation data", "\n", "self", ".", "list_of_augmenters", "=", "list_of_augmenters", "if", "not", "self", ".", "is_validation", "else", "None", "\n", "\n", "# Batch creation options", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "flatten_y", "=", "flatten_y", "\n", "\n", "# Minimum fraction of slices in each batch with FG", "\n", "self", ".", "force_all_fg_switch", "=", "force_all_fg", "\n", "self", ".", "fg_batch_fraction", "=", "fg_batch_fraction", "\n", "\n", "# Foreground label settings", "\n", "self", ".", "fg_classes", "=", "np", ".", "arange", "(", "1", ",", "self", ".", "n_classes", ")", "\n", "if", "self", ".", "fg_classes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "self", ".", "fg_classes", "=", "[", "1", "]", "\n", "\n", "# Set potential label label_crop", "\n", "", "self", ".", "label_crop", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "if", "label_crop", "is", "None", "else", "label_crop", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.__len__": [[49, 52], ["int"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Undefined, return some high number - a number is need in keras \"\"\"", "\n", "return", "int", "(", "10", "**", "12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.__getitem__": [[53, 55], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.n_samples": [[56, 59], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_samples", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.batch_size": [[64, 69], ["ValueError"], "methods", ["None"], ["", "@", "batch_size", ".", "setter", "\n", "def", "batch_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "value", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid batch size of %i\"", "%", "value", ")", "\n", "", "self", ".", "_batch_size", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.n_fg_slices": [[70, 73], ["int", "numpy.ceil"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_fg_slices", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "np", ".", "ceil", "(", "self", ".", "batch_size", "*", "self", ".", "fg_batch_fraction", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.force_all_fg": [[74, 86], ["isinstance", "isotrophic_live_view_sequence.IsotrophicLiveViewSequence.force_all_fg_switch.lower", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "force_all_fg", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "force_all_fg_switch", ",", "str", ")", "and", "self", ".", "force_all_fg_switch", ".", "lower", "(", ")", "==", "\"auto\"", ":", "\n", "# If the batch size number is bigger than the total number of", "\n", "# FG classes, we force the batch to contain at least 1 voxel of", "\n", "# each class in one of the slices. If the total number of classes", "\n", "# exceeds the batch size, it may not be possible to have all", "\n", "# classes simultaneously. Can be overwritten with False/True.", "\n", "            ", "return", "self", ".", "batch_size", ">", "len", "(", "self", ".", "fg_classes", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "force_all_fg_switch", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence._crop_labels": [[87, 90], ["None"], "methods", ["None"], ["", "", "def", "_crop_labels", "(", "self", ",", "batch_y", ")", ":", "\n", "        ", "return", "batch_y", "[", ":", ",", "self", ".", "label_crop", "[", "0", ",", "0", "]", ":", "-", "self", ".", "label_crop", "[", "0", ",", "1", "]", ",", "\n", ":", "self", ".", "label_crop", "[", "1", ",", "0", "]", ":", "-", "self", ".", "label_crop", "[", "1", ",", "1", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.is_valid_im": [[91, 97], ["enumerate", "any", "valid.append", "numpy.any", "numpy.isclose"], "methods", ["None"], ["", "def", "is_valid_im", "(", "self", ",", "im", ",", "bg_value", ")", ":", "\n", "# Image slice should not be out of bounds (complete background)", "\n", "        ", "valid", "=", "[", "]", "\n", "for", "i", ",", "chn_bg_val", "in", "enumerate", "(", "bg_value", ")", ":", "\n", "            ", "valid", ".", "append", "(", "np", ".", "any", "(", "~", "np", ".", "isclose", "(", "im", "[", "...", ",", "i", "]", ",", "chn_bg_val", ")", ")", ")", "\n", "", "return", "any", "(", "valid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.validate_lab_vec": [[98, 110], ["numpy.all", "numpy.isin", "numpy.sum"], "methods", ["None"], ["", "def", "validate_lab_vec", "(", "self", ",", "lab", ",", "has_fg", ",", "cur_batch_size", ")", ":", "\n", "        ", "new_mask", "=", "has_fg", "+", "np", ".", "isin", "(", "self", ".", "fg_classes", ",", "lab", ")", "\n", "if", "np", ".", "all", "(", "new_mask", ")", ":", "\n", "            ", "return", "True", ",", "new_mask", "\n", "", "elif", "np", ".", "sum", "(", "new_mask", "==", "0", ")", "<", "(", "self", ".", "batch_size", "-", "cur_batch_size", ")", ":", "\n", "# No FG, but there are still enough random slices left to fill the", "\n", "# minimum requirement", "\n", "            ", "return", "True", ",", "new_mask", "\n", "", "else", ":", "\n", "# No FG, but there is not enough random slices left to fill the", "\n", "# minimum requirement. Discard the slice and sample again.", "\n", "            ", "return", "False", ",", "has_fg", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.validate_lab": [[111, 129], ["numpy.any", "numpy.isin", "print", "print", "print", "numpy.unique"], "methods", ["None"], ["", "", "def", "validate_lab", "(", "self", ",", "lab", ",", "has_fg", ",", "cur_batch_size", ",", "debug", "=", "False", ")", ":", "\n", "        ", "valid", "=", "np", ".", "any", "(", "np", ".", "isin", "(", "self", ".", "fg_classes", ",", "lab", ")", ")", "\n", "\n", "if", "debug", ":", "\n", "            ", "print", "(", "valid", ",", "self", ".", "fg_classes", ")", "\n", "print", "(", "np", ".", "unique", "(", "lab", ",", "return_counts", "=", "True", ")", ")", "\n", "print", "(", "self", ".", "batch_size", ",", "cur_batch_size", ",", "self", ".", "n_fg_slices", ",", "has_fg", ")", "\n", "\n", "", "if", "valid", ":", "\n", "            ", "return", "True", ",", "1", "\n", "", "elif", "(", "self", ".", "n_fg_slices", "-", "has_fg", ")", "<", "(", "self", ".", "batch_size", "-", "cur_batch_size", ")", ":", "\n", "# No FG, but there are still enough random slices left to fill the", "\n", "# minimum requirement", "\n", "            ", "return", "True", ",", "0", "\n", "", "else", ":", "\n", "# No FG, but there is not enough random slices left to fill the", "\n", "# minimum requirement. Discard the slice and sample again.", "\n", "            ", "return", "False", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.augment": [[130, 140], ["aug"], "methods", ["None"], ["", "", "def", "augment", "(", "self", ",", "batch_x", ",", "batch_y", ",", "batch_w", ",", "bg_values", ")", ":", "\n", "# Apply further augmentation?", "\n", "        ", "if", "self", ".", "list_of_augmenters", ":", "\n", "            ", "for", "aug", "in", "self", ".", "list_of_augmenters", ":", "\n", "                ", "batch_x", ",", "batch_y", ",", "batch_w", "=", "aug", "(", "batch_x", "=", "batch_x", ",", "\n", "batch_y", "=", "batch_y", ",", "\n", "batch_w", "=", "batch_w", ",", "\n", "bg_values", "=", "bg_values", ")", "\n", "\n", "", "", "return", "batch_x", ",", "batch_y", ",", "batch_w", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.scale": [[141, 143], ["scaler.transform", "zip"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.transform"], ["", "def", "scale", "(", "self", ",", "batch_x", ",", "scalers", ")", ":", "\n", "        ", "return", "[", "scaler", ".", "transform", "(", "im", ")", "for", "im", ",", "scaler", "in", "zip", "(", "batch_x", ",", "scalers", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence.prepare_batches": [[144, 163], ["numpy.asarray", "numpy.asarray", "numpy.asarray", "isotrophic_live_view_sequence.IsotrophicLiveViewSequence.label_crop.sum", "isotrophic_live_view_sequence.IsotrophicLiveViewSequence._crop_labels", "numpy.asarray().reshape.reshape", "numpy.asarray().reshape", "len", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence.IsotrophicLiveViewSequence._crop_labels"], ["", "def", "prepare_batches", "(", "self", ",", "batch_x", ",", "batch_y", ",", "batch_w", ")", ":", "\n", "# Crop labels if necessary", "\n", "        ", "if", "self", ".", "label_crop", ".", "sum", "(", ")", "!=", "0", ":", "\n", "            ", "batch_y", "=", "self", ".", "_crop_labels", "(", "batch_y", ")", "\n", "\n", "# Reshape X and y", "\n", "", "batch_x", "=", "np", ".", "asarray", "(", "batch_x", ")", "\n", "batch_y", "=", "np", ".", "asarray", "(", "batch_y", ")", "\n", "batch_w", "=", "np", ".", "asarray", "(", "batch_w", ")", "\n", "\n", "if", "self", ".", "flatten_y", ":", "\n", "# Flatten labels in spatial dimensions; needed for sample weighting", "\n", "# to work correctly in newer versions of TF.", "\n", "# Note: model output must be flattened likewise!", "\n", "            ", "batch_y", "=", "batch_y", ".", "reshape", "(", "(", "len", "(", "batch_y", ")", ",", "-", "1", ",", "1", ")", ")", "\n", "", "elif", "batch_y", ".", "shape", "[", "-", "1", "]", "!=", "1", ":", "\n", "            ", "batch_y", "=", "np", ".", "asarray", "(", "batch_y", ")", ".", "reshape", "(", "batch_y", ".", "shape", "+", "(", "1", ",", ")", ")", "\n", "\n", "", "return", "batch_x", ",", "batch_y", ",", "batch_w", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.__init__": [[31, 60], ["mpunet.sequences.BaseSequence.__init__", "numpy.arange", "mpunet.logging.ScreenLogger", "patch_sequence_3d.PatchSequence3D.log"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log"], ["    ", "def", "__init__", "(", "self", ",", "image_pair_loader", ",", "dim", ",", "n_classes", ",", "batch_size", ",", "is_validation", "=", "False", ",", "\n", "label_crop", "=", "None", ",", "fg_batch_fraction", "=", "0.33", ",", "logger", "=", "None", ",", "bg_val", "=", "0.", ",", "\n", "no_log", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Set logger or default print", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "self", ".", "image_pair_loader", "=", "image_pair_loader", "\n", "\n", "# Box dimension and image dim", "\n", "self", ".", "dim", "=", "dim", "\n", "\n", "# Various attributes", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "label_crop", "=", "label_crop", "\n", "self", ".", "is_validation", "=", "is_validation", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "bg_value", "=", "bg_val", "\n", "\n", "# How many foreground slices should be in each batch?", "\n", "self", ".", "fg_batch_fraction", "=", "fg_batch_fraction", "\n", "\n", "# Foreground label settings", "\n", "self", ".", "fg_classes", "=", "np", ".", "arange", "(", "1", ",", "self", ".", "n_classes", ")", "\n", "if", "self", ".", "fg_classes", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "self", ".", "fg_classes", "=", "1", "\n", "\n", "", "if", "not", "is_validation", "and", "not", "no_log", ":", "\n", "            ", "self", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.__len__": [[61, 63], ["int", "numpy.ceil"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "int", "(", "np", ".", "ceil", "(", "self", ".", "n_samples", "/", "self", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.n_samples": [[64, 69], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_samples", "(", "self", ")", ":", "\n", "# In order to not load all the images, we manually specify the epoch", "\n", "# length in trainer.py", "\n", "        ", "return", "np", ".", "inf", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.batch_size": [[74, 79], ["ValueError"], "methods", ["None"], ["", "@", "batch_size", ".", "setter", "\n", "def", "batch_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "value", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid batch size of %i\"", "%", "value", ")", "\n", "", "self", ".", "_batch_size", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.n_fg_slices": [[80, 86], ["int", "numpy.ceil"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_fg_slices", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_validation", ":", "\n", "            ", "return", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "return", "int", "(", "np", ".", "ceil", "(", "self", ".", "batch_size", "*", "self", ".", "fg_batch_fraction", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.get_N_random_patches_from": [[87, 97], ["range", "patch_sequence_3d.PatchSequence3D.get_random_box_coords", "image.scaler.transform"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.get_random_box_coords", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.transform"], ["", "", "def", "get_N_random_patches_from", "(", "self", ",", "image", ",", "N", ")", ":", "\n", "        ", "if", "N", ">", "0", ":", "\n", "# Sample N patches from X", "\n", "            ", "X", "=", "image", ".", "image", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "                ", "xc", ",", "yc", ",", "zc", "=", "self", ".", "get_random_box_coords", "(", "X", ")", "\n", "patch", "=", "X", "[", "xc", ":", "xc", "+", "self", ".", "dim", ",", "yc", ":", "yc", "+", "self", ".", "dim", ",", "zc", ":", "zc", "+", "self", ".", "dim", "]", "\n", "yield", "image", ".", "scaler", ".", "transform", "(", "patch", ")", ",", "(", "xc", ",", "yc", ",", "zc", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.get_base_patches": [[98, 114], ["numpy.asarray", "mpunet.interpolation.linalg.mgrid_to_points", "numpy.ceil().astype", "numpy.linspace", "numpy.meshgrid", "max", "range", "range", "numpy.ceil", "tuple", "image.scaler.transform"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.mgrid_to_points", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.transform"], ["", "", "def", "get_base_patches", "(", "self", ",", "image", ")", ":", "\n", "        ", "X", "=", "image", ".", "image", "\n", "\n", "# Calculate positions", "\n", "sample_space", "=", "np", ".", "asarray", "(", "[", "max", "(", "i", ",", "self", ".", "dim", ")", "for", "i", "in", "image", ".", "shape", "[", ":", "3", "]", "]", ")", "\n", "d", "=", "(", "sample_space", "-", "self", ".", "dim", ")", "\n", "min_cov", "=", "[", "np", ".", "ceil", "(", "sample_space", "[", "i", "]", "/", "self", ".", "dim", ")", ".", "astype", "(", "np", ".", "int", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "ds", "=", "[", "np", ".", "linspace", "(", "0", ",", "d", "[", "i", "]", ",", "min_cov", "[", "i", "]", ",", "dtype", "=", "np", ".", "int", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "\n", "# Get placement coordinate points", "\n", "placements", "=", "mgrid_to_points", "(", "np", ".", "meshgrid", "(", "*", "tuple", "(", "ds", ")", ")", ")", "\n", "\n", "for", "p", "in", "placements", ":", "\n", "            ", "yield", "image", ".", "scaler", ".", "transform", "(", "X", "[", "p", "[", "0", "]", ":", "p", "[", "0", "]", "+", "self", ".", "dim", ",", "\n", "p", "[", "1", "]", ":", "p", "[", "1", "]", "+", "self", ".", "dim", ",", "\n", "p", "[", "2", "]", ":", "p", "[", "2", "]", "+", "self", ".", "dim", "]", ")", ",", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.get_patches_from": [[115, 121], ["enumerate", "print", "enumerate", "patch_sequence_3d.PatchSequence3D.get_base_patches", "patch_sequence_3d.PatchSequence3D.get_N_random_patches_from"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.sliding_patch_sequence_3d.SlidingPatchSequence3D.get_base_patches", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.get_N_random_patches_from"], ["", "", "def", "get_patches_from", "(", "self", ",", "image", ",", "n_extra", "=", "0", ")", ":", "\n", "        ", "for", "num", ",", "(", "p", ",", "coords", ")", "in", "enumerate", "(", "self", ".", "get_base_patches", "(", "image", ")", ")", ":", "\n", "            ", "yield", "p", ",", "coords", ",", "\"   Predicting on base patches (%i)\"", "%", "(", "num", "+", "1", ")", "\n", "", "print", "(", "\"\"", ")", "\n", "for", "num", ",", "(", "p", ",", "coords", ")", "in", "enumerate", "(", "self", ".", "get_N_random_patches_from", "(", "image", ",", "n_extra", ")", ")", ":", "\n", "            ", "yield", "p", ",", "coords", ",", "\"   Predicting on extra patches (%i)\"", "%", "(", "num", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.validate_lab": [[122, 134], ["numpy.any", "numpy.isin"], "methods", ["None"], ["", "", "def", "validate_lab", "(", "self", ",", "lab", ",", "has_fg", ",", "cur_batch_size", ")", ":", "\n", "        ", "valid", "=", "np", ".", "any", "(", "np", ".", "isin", "(", "self", ".", "fg_classes", ",", "lab", ")", ")", "\n", "if", "valid", ":", "\n", "            ", "return", "valid", ",", "has_fg", "+", "1", "\n", "", "elif", "(", "self", ".", "n_fg_slices", "-", "has_fg", ")", "<", "(", "self", ".", "batch_size", "-", "cur_batch_size", ")", ":", "\n", "# No FG, but there are still enough random slices left to fill the", "\n", "# minimum requirement", "\n", "            ", "return", "True", ",", "has_fg", "\n", "", "else", ":", "\n", "# No FG, but there is not enough random slices left to fill the", "\n", "# minimum requirement. Discard the slice and sample again.", "\n", "            ", "return", "False", ",", "has_fg", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.get_random_box_coords": [[135, 139], ["numpy.round", "max", "numpy.random.rand"], "methods", ["None"], ["", "", "def", "get_random_box_coords", "(", "self", ",", "im", ")", ":", "\n", "        ", "dim", "=", "[", "max", "(", "0", ",", "s", "-", "self", ".", "dim", ")", "for", "s", "in", "im", ".", "shape", "[", ":", "3", "]", "]", "\n", "cords", "=", "np", ".", "round", "(", "(", "dim", "*", "np", ".", "random", ".", "rand", "(", "3", ")", ")", ".", "astype", "(", "np", ".", "uint16", ")", ")", "\n", "return", "cords", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.get_box_coords": [[140, 145], ["patch_sequence_3d.PatchSequence3D.get_random_box_coords"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.get_random_box_coords"], ["", "def", "get_box_coords", "(", "self", ",", "im", ")", ":", "\n", "        ", "\"\"\"\n        Overwritten in SlidingPatchSequence3D to provide deterministic sampling\n        \"\"\"", "\n", "return", "self", ".", "get_random_box_coords", "(", "im", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.__getitem__": [[146, 192], ["patch_sequence_3d.PatchSequence3D.seed", "numpy.asarray", "numpy.asarray", "batch_y.reshape.reshape.reshape", "patch_sequence_3d.PatchSequence3D.image_pair_loader.get_random", "numpy.asarray", "len", "patch_sequence_3d.PatchSequence3D.get_box_coords", "patch_sequence_3d.center_expand", "patch_sequence_3d.center_expand", "patch_sequence_3d.PatchSequence3D.validate_lab", "len", "image.scaler.transform", "numpy.asarray.append", "batch_y.reshape.reshape.append", "batch_w.append"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.base_sequence.BaseSequence.seed", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_random", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.sliding_patch_sequence_3d.SlidingPatchSequence3D.get_box_coords", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.center_expand", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.center_expand", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.validate_lab", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.transform"], ["", "def", "__getitem__", "(", "self", ",", "idx", ",", "image_id", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Used by keras.fit_generator to fetch mini-batches during training\n        \"\"\"", "\n", "# If multiprocessing, set unique seed for this particular process", "\n", "self", ".", "seed", "(", ")", "\n", "\n", "# Store how many slices has fg so far", "\n", "has_fg", "=", "0", "\n", "\n", "# Interpolate on a random index for each sample image to generate batch", "\n", "batch_x", ",", "batch_y", ",", "batch_w", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "with", "self", ".", "image_pair_loader", ".", "get_random", "(", ")", "as", "image", ":", "\n", "            ", "while", "len", "(", "batch_x", ")", "<", "self", ".", "batch_size", ":", "\n", "\n", "# Fetch image, labels and weights", "\n", "                ", "X", ",", "y", ",", "w", "=", "image", ".", "image", ",", "image", ".", "labels", ",", "image", ".", "sample_weight", "\n", "\n", "# Sample a random box in the volume", "\n", "xc", ",", "yc", ",", "zc", "=", "self", ".", "get_box_coords", "(", "X", ")", "\n", "\n", "# Slice volume", "\n", "im", "=", "X", "[", "xc", ":", "xc", "+", "self", ".", "dim", ",", "yc", ":", "yc", "+", "self", ".", "dim", ",", "zc", ":", "zc", "+", "self", ".", "dim", "]", "\n", "lab", "=", "y", "[", "xc", ":", "xc", "+", "self", ".", "dim", ",", "yc", ":", "yc", "+", "self", ".", "dim", ",", "zc", ":", "zc", "+", "self", ".", "dim", "]", "\n", "\n", "# Make sure the box is of sufficient size", "\n", "im", "=", "center_expand", "(", "im", ",", "self", ".", "dim", ",", "self", ".", "bg_value", ",", "random", "=", "True", ")", "\n", "lab", "=", "center_expand", "(", "lab", ",", "self", ".", "dim", ",", "self", ".", "bg_value", ",", "random", "=", "True", ")", "\n", "\n", "# Validate label volume", "\n", "valid", ",", "has_fg", "=", "self", ".", "validate_lab", "(", "lab", ",", "has_fg", ",", "len", "(", "batch_y", ")", ")", "\n", "if", "valid", ":", "\n", "# Normalize image", "\n", "                    ", "im", "=", "image", ".", "scaler", ".", "transform", "(", "im", ")", "\n", "\n", "batch_x", ".", "append", "(", "im", ")", "\n", "batch_y", ".", "append", "(", "lab", ")", "\n", "batch_w", ".", "append", "(", "w", ")", "\n", "\n", "# Reshape X (and one-hot encode y)", "\n", "", "", "", "batch_x", "=", "np", ".", "asarray", "(", "batch_x", ")", "\n", "batch_y", "=", "np", ".", "asarray", "(", "batch_y", ")", "\n", "batch_y", "=", "batch_y", ".", "reshape", "(", "batch_y", ".", "shape", "+", "(", "1", ",", ")", ")", "\n", "\n", "return", "batch_x", ",", "batch_y", ",", "np", ".", "asarray", "(", "batch_w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.PatchSequence3D.log": [[193, 198], ["patch_sequence_3d.PatchSequence3D.logger", "patch_sequence_3d.PatchSequence3D.logger", "patch_sequence_3d.PatchSequence3D.logger", "patch_sequence_3d.PatchSequence3D.logger"], "methods", ["None"], ["", "def", "log", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "(", "\"Sequence Generator: %s\"", "%", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "logger", "(", "\"Box dimensions:     %s\"", "%", "self", ".", "dim", ")", "\n", "self", ".", "logger", "(", "\"Batch size:         %s\"", "%", "self", ".", "batch_size", ")", "\n", "self", ".", "logger", "(", "\"N fg slices/batch:  %s\"", "%", "self", ".", "n_fg_slices", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.patch_sequence_3d.center_expand": [[7, 28], ["np.empty.fill", "numpy.empty", "numpy.empty", "numpy.asarray", "numpy.any", "numpy.random.randint", "max"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.fill"], ["def", "center_expand", "(", "im", ",", "target_dim", ",", "bg_value", ",", "random", "=", "True", ")", ":", "\n", "    ", "if", "im", ".", "ndim", "==", "4", ":", "\n", "        ", "cim", "=", "np", ".", "empty", "(", "shape", "=", "(", "target_dim", ",", "target_dim", ",", "target_dim", ",", "im", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "dtype", "=", "im", ".", "dtype", ")", "\n", "", "else", ":", "\n", "        ", "cim", "=", "np", ".", "empty", "(", "shape", "=", "(", "target_dim", ",", "target_dim", ",", "target_dim", ")", ",", "\n", "dtype", "=", "im", ".", "dtype", ")", "\n", "", "cim", ".", "fill", "(", "bg_value", ")", "\n", "\n", "# Calculate size difference and starting positions in new volume", "\n", "diff", "=", "np", ".", "asarray", "(", "cim", ".", "shape", "[", ":", "3", "]", ")", "-", "im", ".", "shape", "[", ":", "3", "]", "\n", "if", "random", "and", "np", ".", "any", "(", "diff", ")", ":", "\n", "        ", "start", "=", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "max", "(", "d", ",", "1", ")", ",", "1", ")", "[", "0", "]", "for", "d", "in", "diff", "]", "\n", "", "else", ":", "\n", "        ", "start", "=", "diff", "//", "2", "\n", "\n", "", "cim", "[", "start", "[", "0", "]", ":", "start", "[", "0", "]", "+", "im", ".", "shape", "[", "0", "]", ",", "\n", "start", "[", "1", "]", ":", "start", "[", "1", "]", "+", "im", ".", "shape", "[", "1", "]", ",", "\n", "start", "[", "2", "]", ":", "start", "[", "2", "]", "+", "im", ".", "shape", "[", "2", "]", "]", "=", "im", "\n", "\n", "return", "cim", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.sliding_patch_sequence_3d.SlidingPatchSequence3D.__init__": [[16, 30], ["PatchSequence3D.__init__", "sliding_patch_sequence_3d.standardize_strides", "sliding_patch_sequence_3d.SlidingPatchSequence3D.get_patch_corners().astype", "numpy.arange", "sliding_patch_sequence_3d.SlidingPatchSequence3D.log", "sliding_patch_sequence_3d.SlidingPatchSequence3D.get_patch_corners"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.sliding_patch_sequence_3d.standardize_strides", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.sliding_patch_sequence_3d.SlidingPatchSequence3D.get_patch_corners"], ["    ", "def", "__init__", "(", "self", ",", "strides", ",", "no_log", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        strides: tuple (s1, s2, s3) of strides or integer s --> (s, s, s)\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "no_log", "=", "True", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# Stride attribute gives the number pixel distance between", "\n", "# patch samples in 3 dimensions", "\n", "self", ".", "strides", "=", "standardize_strides", "(", "strides", ")", "\n", "self", ".", "corners", "=", "self", ".", "get_patch_corners", "(", ")", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "self", ".", "ind", "=", "np", ".", "arange", "(", "self", ".", "corners", ".", "shape", "[", "0", "]", ")", "\n", "\n", "if", "not", "self", ".", "is_validation", "and", "not", "no_log", ":", "\n", "            ", "self", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.sliding_patch_sequence_3d.SlidingPatchSequence3D.n_samples": [[31, 34], ["len"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "n_samples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "corners", ".", "shape", "[", "0", "]", "*", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.sliding_patch_sequence_3d.SlidingPatchSequence3D.get_patch_corners": [[35, 41], ["numpy.linspace().astype", "numpy.linspace().astype", "numpy.linspace().astype", "mpunet.interpolation.linalg.mgrid_to_points", "numpy.meshgrid", "numpy.linspace", "numpy.linspace", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.mgrid_to_points"], ["", "def", "get_patch_corners", "(", "self", ")", ":", "\n", "        ", "xc", "=", "np", ".", "linspace", "(", "0", ",", "self", ".", "dim_r", "[", "0", "]", ",", "self", ".", "strides", "[", "0", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "yc", "=", "np", ".", "linspace", "(", "0", ",", "self", ".", "dim_r", "[", "1", "]", ",", "self", ".", "strides", "[", "1", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "zc", "=", "np", ".", "linspace", "(", "0", ",", "self", ".", "dim_r", "[", "2", "]", ",", "self", ".", "strides", "[", "2", "]", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n", "return", "mgrid_to_points", "(", "np", ".", "meshgrid", "(", "xc", ",", "yc", ",", "zc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.sliding_patch_sequence_3d.SlidingPatchSequence3D.get_box_coords": [[42, 44], ["numpy.random.choice"], "methods", ["None"], ["", "def", "get_box_coords", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "corners", "[", "np", ".", "random", ".", "choice", "(", "self", ".", "ind", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.sliding_patch_sequence_3d.SlidingPatchSequence3D.get_base_patches": [[45, 51], ["None"], "methods", ["None"], ["", "def", "get_base_patches", "(", "self", ",", "image_id", ")", ":", "\n", "# Get sliding windows for X", "\n", "        ", "X", "=", "self", ".", "data", "[", "image_id", "]", "[", "0", "]", "\n", "for", "xc", ",", "yc", ",", "zc", "in", "self", ".", "corners", ":", "\n", "            ", "patch", "=", "X", "[", "xc", ":", "xc", "+", "self", ".", "dim", ",", "yc", ":", "yc", "+", "self", ".", "dim", ",", "zc", ":", "zc", "+", "self", ".", "dim", "]", "\n", "yield", "patch", ",", "(", "xc", ",", "yc", ",", "zc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.sliding_patch_sequence_3d.SlidingPatchSequence3D.log": [[52, 61], ["sliding_patch_sequence_3d.SlidingPatchSequence3D.logger", "sliding_patch_sequence_3d.SlidingPatchSequence3D.logger", "sliding_patch_sequence_3d.SlidingPatchSequence3D.logger", "sliding_patch_sequence_3d.SlidingPatchSequence3D.logger", "sliding_patch_sequence_3d.SlidingPatchSequence3D.logger", "sliding_patch_sequence_3d.SlidingPatchSequence3D.logger", "sliding_patch_sequence_3d.SlidingPatchSequence3D.logger", "sliding_patch_sequence_3d.SlidingPatchSequence3D.logger", "list"], "methods", ["None"], ["", "", "def", "log", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "(", "\"Sequence Generator: %s\"", "%", "self", ".", "__class__", ".", "__name__", ")", "\n", "self", ".", "logger", "(", "\"Box dimensions:     %s\"", "%", "self", ".", "dim", ")", "\n", "self", ".", "logger", "(", "\"Image dimensions:   %s\"", "%", "self", ".", "im_dim", ")", "\n", "self", ".", "logger", "(", "\"Sample space dim:   %s\"", "%", "self", ".", "dim_r", ")", "\n", "self", ".", "logger", "(", "\"Strides:            %s\"", "%", "list", "(", "self", ".", "strides", ")", ")", "\n", "self", ".", "logger", "(", "\"N boxes:            %s\"", "%", "self", ".", "corners", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "logger", "(", "\"Batch size:         %s\"", "%", "self", ".", "batch_size", ")", "\n", "self", ".", "logger", "(", "\"N fg slices/batch:  %s\"", "%", "self", ".", "n_fg_slices", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.sliding_patch_sequence_3d.standardize_strides": [[6, 13], ["isinstance", "tuple", "isinstance", "int"], "function", ["None"], ["def", "standardize_strides", "(", "strides", ")", ":", "\n", "    ", "if", "isinstance", "(", "strides", ",", "list", ")", ":", "\n", "        ", "return", "tuple", "(", "strides", ")", "\n", "", "elif", "isinstance", "(", "strides", ",", "tuple", ")", ":", "\n", "        ", "return", "strides", "\n", "", "else", ":", "\n", "        ", "return", "3", "*", "(", "int", "(", "strides", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.multi_task_sequence.MultiTaskSequence.__init__": [[12, 21], ["tensorflow.keras.utils.Sequence.__init__", "multi_task_sequence.MultiTaskSequence.log", "mpunet.logging.ScreenLogger"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log"], ["def", "__init__", "(", "self", ",", "sequencers", ",", "task_names", ",", "logger", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "self", ".", "task_names", "=", "task_names", "\n", "self", ".", "sequencers", "=", "sequencers", "\n", "self", ".", "log", "(", ")", "\n", "\n", "# Redirect setattrs to the sub-sequences", "\n", "self", ".", "redirect", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.multi_task_sequence.MultiTaskSequence.log": [[22, 26], ["multi_task_sequence.MultiTaskSequence.logger", "multi_task_sequence.MultiTaskSequence.logger", "len"], "methods", ["None"], ["", "def", "log", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "(", "\"--- MultiTaskSequence sequencer --- \"", ",", "\n", "print_calling_method", "=", "True", ")", "\n", "self", ".", "logger", "(", "\"N tasks:  %i\"", "%", "len", "(", "self", ".", "sequencers", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.multi_task_sequence.MultiTaskSequence.__iter__": [[27, 30], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "s", "in", "self", ".", "sequencers", ":", "\n", "            ", "yield", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.multi_task_sequence.MultiTaskSequence.n_samples": [[31, 34], ["sum"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "n_samples", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "[", "s", ".", "n_samples", "for", "s", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.multi_task_sequence.MultiTaskSequence.__getattr__": [[35, 38], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "# Fetch item from all sub-sequences", "\n", "        ", "return", "[", "getattr", "(", "s", ",", "item", ")", "for", "s", "in", "self", ".", "sequencers", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.multi_task_sequence.MultiTaskSequence.__setattr__": [[39, 48], ["multi_task_sequence.MultiTaskSequence.__dict__.get", "setattr"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["", "def", "__setattr__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "__dict__", ".", "get", "(", "\"redirect\"", ",", "False", ")", ":", "\n", "# Fetch item from all sub-sequences", "\n", "            ", "for", "s", "in", "self", ":", "\n", "# Set on all sub-sequences", "\n", "                ", "setattr", "(", "s", ",", "key", ",", "value", ")", "\n", "", "", "else", ":", "\n", "# Set on self", "\n", "            ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.multi_task_sequence.MultiTaskSequence.__len__": [[49, 56], ["sum", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Number of batch in the Sequence.\n\n        Returns:\n            The number of batches in the Sequence.\n        \"\"\"", "\n", "return", "sum", "(", "[", "len", "(", "seq", ")", "for", "seq", "in", "self", ".", "sequencers", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.multi_task_sequence.MultiTaskSequence.__getitem__": [[57, 66], ["batches_x.append", "batches_y.append", "batches_w.append"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "batches_x", ",", "batches_y", ",", "batches_w", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "seq", "in", "self", ".", "sequencers", ":", "\n", "            ", "x", ",", "y", ",", "w", "=", "seq", "[", "0", "]", "\n", "batches_x", ".", "append", "(", "x", ")", "\n", "batches_y", ".", "append", "(", "y", ")", "\n", "batches_w", ".", "append", "(", "w", ")", "\n", "\n", "", "return", "batches_x", ",", "batches_y", ",", "batches_w", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.utils.get_sequence": [[5, 80], ["mpunet.logging.default_logger.ScreenLogger", "isinstance", "mpunet.image.queue.LazyQueue", "seq_kwargs[].lower", "IsotrophicLiveViewSequence2D", "logger", "seq_kwargs[].lower", "IsotrophicLiveViewSequence3D", "aug_list.append", "logger", "seq_kwargs[].lower", "PatchSequence3D", "seq_kwargs[].lower", "SlidingPatchSequence3D", "ValueError"], "function", ["None"], ["import", "contextlib", "\n", "\n", "\n", "def", "_get_system_wide_set_gpus", "(", ")", ":", "\n", "    ", "allowed_gpus", "=", "os", ".", "environ", ".", "get", "(", "\"CUDA_VISIBLE_DEVICES\"", ")", "\n", "if", "allowed_gpus", ":", "\n", "        ", "allowed_gpus", "=", "allowed_gpus", ".", "replace", "(", "\" \"", ",", "\"\"", ")", ".", "split", "(", "\",\"", ")", "\n", "", "return", "allowed_gpus", "\n", "\n", "\n", "", "def", "get_free_gpus", "(", "max_allowed_mem_usage", "=", "400", ")", ":", "\n", "# Check if allowed GPUs are set in CUDA_VIS_DEV.", "\n", "    ", "allowed_gpus", "=", "_get_system_wide_set_gpus", "(", ")", "\n", "if", "allowed_gpus", ":", "\n", "        ", "print", "(", "\"[OBS] Considering only system-wise allowed GPUs: {} (set in\"", "\n", "\" CUDA_VISIBLE_DEVICES env variable).\"", ".", "format", "(", "allowed_gpus", ")", ")", "\n", "return", "allowed_gpus", "\n", "# Else, check GPUs on the system and assume all non-used (mem. use less", "\n", "# than max_allowed_mem_usage) is fair game.", "\n", "", "from", "subprocess", "import", "check_output", "\n", "try", ":", "\n", "# Get list of GPUs", "\n", "        ", "gpu_list", "=", "check_output", "(", "[", "\"nvidia-smi\"", ",", "\"-L\"", "]", ",", "universal_newlines", "=", "True", ")", "\n", "gpu_ids", "=", "np", ".", "array", "(", "re", ".", "findall", "(", "r\"GPU[ ]+(\\d+)\"", ",", "gpu_list", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "# Query memory usage stats from nvidia-smi", "\n", "output", "=", "check_output", "(", "[", "\"nvidia-smi\"", ",", "\"-q\"", ",", "\"-d\"", ",", "\"MEMORY\"", "]", ",", "\n", "universal_newlines", "=", "True", ")", "\n", "\n", "# Fetch the memory usage of each GPU", "\n", "mem_usage", "=", "re", ".", "findall", "(", "r\"FB Memory Usage.*?Used[ ]+:[ ]+(\\d+)\"", ",", "\n", "output", ",", "flags", "=", "re", ".", "DOTALL", ")", "\n", "assert", "len", "(", "gpu_ids", ")", "==", "len", "(", "mem_usage", ")", "\n", "\n", "# Return all GPU ids for which the memory usage is exactly 0", "\n", "free", "=", "list", "(", "map", "(", "lambda", "x", ":", "int", "(", "x", ")", "<=", "max_allowed_mem_usage", ",", "mem_usage", ")", ")", "\n", "return", "list", "(", "gpu_ids", "[", "free", "]", ")", "\n", "", "except", "FileNotFoundError", "as", "e", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\"[ERROR] nvidia-smi is not installed. \"", "\n", "\"Consider setting the --num_GPUs=0 flag.\"", ")", "from", "e", "\n", "\n", "\n", "", "", "def", "_get_free_gpu", "(", "free_GPUs", ",", "N", "=", "1", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "free_gpu", "=", "\",\"", ".", "join", "(", "map", "(", "str", ",", "free_GPUs", "[", "0", ":", "N", "]", ")", ")", "\n", "", "except", "IndexError", "as", "e", ":", "\n", "        ", "raise", "OSError", "(", "\"No GPU available.\"", ")", "from", "e", "\n", "", "return", "free_gpu", "\n", "\n", "\n", "", "def", "get_free_gpu", "(", "N", "=", "1", ")", ":", "\n", "    ", "free", "=", "get_free_gpus", "(", ")", "\n", "return", "_get_free_gpu", "(", "free", ",", "N", "=", "N", ")", "\n", "\n", "\n", "", "def", "await_and_set_free_gpu", "(", "N", "=", "1", ",", "sleep_seconds", "=", "60", ",", "logger", "=", "None", ")", ":", "\n", "    ", "gpu", "=", "\"\"", "\n", "if", "N", "!=", "0", ":", "\n", "        ", "from", "time", "import", "sleep", "\n", "logger", "=", "logger", "or", "print", "\n", "logger", "(", "\"Waiting for free GPU.\"", ")", "\n", "found_gpu", "=", "False", "\n", "while", "not", "found_gpu", ":", "\n", "            ", "gpu", "=", "get_free_gpu", "(", "N", "=", "N", ")", "\n", "if", "gpu", ":", "\n", "                ", "logger", "(", "\"Found free GPU: %s\"", "%", "gpu", ")", "\n", "found_gpu", "=", "True", "\n", "", "else", ":", "\n", "                ", "logger", "(", "\"No available GPUs... Sleeping %i seconds.\"", "%", "sleep_seconds", ")", "\n", "sleep", "(", "sleep_seconds", ")", "\n", "", "", "", "set_gpu", "(", "gpu", ")", "\n", "\n", "\n", "", "def", "set_gpu", "(", "gpu", ")", ":", "\n", "    ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_split.get_parser": [[10, 49], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Prepare a data folder for a\"", "\n", "\"CV experiment setup.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"Path to data directory\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--CV\"", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "\"Number of splits (default=5)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--out_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"views\"", ",", "\n", "help", "=", "\"Directory to store CV subfolders \"", "\n", "\"(default=views\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--im_sub_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"images\"", ",", "\n", "help", "=", "\"Subfolder under 'data_dir' in which image are \"", "\n", "\"stored (default=images)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lab_sub_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"labels\"", ",", "\n", "help", "=", "\"Subfolder under 'data_dir' in which labels are \"", "\n", "\"stored (default=labels)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--copy\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Copy files to CV-subfolders instead of \"", "\n", "\"symlinking (not recommended)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--file_list\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Create text files with paths pointing to the \"", "\n", "\"images at the image and labels subdirs under \"", "\n", "\"each split instead of symlink/copying. This is\"", "\n", "\" usefull on systems were symlink is not \"", "\n", "\"supported, but the dataset size is too large to\"", "\n", "\" store in copies. NOTE: Only one of --copy and \"", "\n", "\"--file_list flags must be set.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--file_regex\"", ",", "type", "=", "str", ",", "default", "=", "\"*.nii*\"", ",", "\n", "help", "=", "\"Regex used to select files from the image \"", "\n", "\"and labels subdirs. (default='*.nii*')\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--validation_fraction\"", ",", "type", "=", "float", ",", "default", "=", "0.20", ",", "\n", "help", "=", "\"Fraction of OVERALL data size used for \"", "\n", "\"validation in each split. In a 5-CV setting with \"", "\n", "\"N=100 and val_frac=0.20, each split will have \"", "\n", "\"N_train=60, N_val=20 and N_test=20 images\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--test_fraction\"", ",", "type", "=", "float", ",", "default", "=", "0.20", ",", "\n", "help", "=", "\"Fraction of data size used for test if CV=1.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--common_prefix_length\"", ",", "type", "=", "int", ",", "required", "=", "False", ",", "default", "=", "0", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_split.assert_dir_structure": [[51, 57], ["os.path.exists", "OSError", "os.path.exists", "OSError"], "function", ["None"], ["", "def", "assert_dir_structure", "(", "data_dir", ",", "im_dir", ",", "lab_dir", ",", "out_dir", ")", ":", "\n", "    ", "for", "_dir", "in", "(", "data_dir", ",", "im_dir", ",", "lab_dir", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "_dir", ")", ":", "\n", "            ", "raise", "OSError", "(", "\"Invalid data directory '%s'. Does not exist.\"", "%", "data_dir", ")", "\n", "", "", "if", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "raise", "OSError", "(", "\"Output directory at '%s' already exists.\"", "%", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_split.create_view_folders": [[59, 69], ["os.path.exists", "print", "os.makedirs", "range", "os.path.join", "print", "os.mkdir"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "", "def", "create_view_folders", "(", "out_dir", ",", "n_splits", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "print", "(", "\"Creating directory at %s\"", "%", "out_dir", ")", "\n", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "\n", "", "if", "n_splits", ">", "1", ":", "\n", "        ", "for", "i", "in", "range", "(", "n_splits", ")", ":", "\n", "            ", "split_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"split_%i\"", "%", "i", ")", "\n", "print", "(", "\"Creating directory at %s\"", "%", "split_dir", ")", "\n", "os", ".", "mkdir", "(", "split_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_split.pair_by_names": [[71, 81], ["defaultdict", "enumerate", "defaultdict.values", "inds[].append", "tuple", "os.path.split", "numpy.array"], "function", ["None"], ["", "", "", "def", "pair_by_names", "(", "images", ",", "common_prefix_length", ")", ":", "\n", "    ", "if", "common_prefix_length", "==", "0", ":", "\n", "        ", "return", "images", "\n", "", "from", "collections", "import", "defaultdict", "\n", "names", "=", "[", "os", ".", "path", ".", "split", "(", "i", ")", "[", "-", "1", "]", "[", ":", "common_prefix_length", "]", "for", "i", "in", "images", "]", "\n", "inds", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "names", ")", ":", "\n", "        ", "inds", "[", "item", "]", ".", "append", "(", "i", ")", "\n", "", "pairs", "=", "inds", ".", "values", "(", ")", "\n", "return", "[", "tuple", "(", "np", ".", "array", "(", "images", ")", "[", "i", "]", ")", "for", "i", "in", "pairs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_split.add_images": [[83, 108], ["isinstance", "im.replace", "os.path.relpath", "os.path.relpath", "link_func", "link_func", "os.path.split", "os.path.exists", "OSError"], "function", ["None"], ["", "def", "add_images", "(", "images", ",", "im_folder_path", ",", "label_folder_path", ",", "im_dir", ",", "lab_dir", ",", "\n", "link_func", "=", "os", ".", "symlink", ")", ":", "\n", "    ", "for", "image", "in", "images", ":", "\n", "        ", "if", "not", "isinstance", "(", "image", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "            ", "image", "=", "(", "image", ",", ")", "\n", "", "for", "im", "in", "image", ":", "\n", "# Get file name", "\n", "            ", "file_name", "=", "os", ".", "path", ".", "split", "(", "im", ")", "[", "-", "1", "]", "\n", "\n", "# Get label path (OBS: filenames must match!)", "\n", "lab", "=", "im", ".", "replace", "(", "im_dir", ",", "lab_dir", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "lab", ")", ":", "\n", "                ", "raise", "OSError", "(", "\"No label file found at '%s'. OBS: image and \"", "\n", "\"label files must have exactly the same name. \"", "\n", "\"Images should be located at '%s' and labels at\"", "\n", "\" '%s'\"", "%", "(", "lab", ",", "im_folder_path", ",", "label_folder_path", ")", ")", "\n", "\n", "# Get relative paths", "\n", "", "rel_image", "=", "os", ".", "path", ".", "relpath", "(", "im", ",", "im_folder_path", ")", "\n", "rel_label", "=", "os", ".", "path", ".", "relpath", "(", "lab", ",", "label_folder_path", ")", "\n", "\n", "# Symlink or copy", "\n", "link_func", "(", "rel_image", ",", "im_folder_path", "+", "\"/%s\"", "%", "file_name", ")", "\n", "link_func", "(", "rel_label", ",", "label_folder_path", "+", "\"/%s\"", "%", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_split._add_to_file_list_fallback": [[110, 134], ["os.chdir", "os.path.abspath", "os.path.join", "os.path.split", "open", "out_f.write"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "", "", "def", "_add_to_file_list_fallback", "(", "rel_image_path", ",", "image_path", ",", "\n", "fname", "=", "\"LIST_OF_FILES.txt\"", ")", ":", "\n", "\n", "    ", "\"\"\"\n    On some system synlinks are not supported, if --files_list flag is set,\n    uses this function to add each absolute file path to a list at the final\n    subfolder that is supposed to store images and label links or actual files\n\n    At run-time, these files must be loaded by reading in the path from these\n    files instead.\n    \"\"\"", "\n", "# Get folder where list of files should be stored", "\n", "folder", "=", "os", ".", "path", ".", "split", "(", "image_path", ")", "[", "0", "]", "\n", "\n", "# Get absolute path to image", "\n", "# We change dir to get the correct abs path from the relative", "\n", "os", ".", "chdir", "(", "folder", ")", "\n", "abs_file_path", "=", "os", ".", "path", ".", "abspath", "(", "rel_image_path", ")", "\n", "\n", "# Get path to the list of files", "\n", "list_file_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "fname", ")", "\n", "\n", "with", "open", "(", "list_file_path", ",", "\"a\"", ")", "as", "out_f", ":", "\n", "        ", "out_f", ".", "write", "(", "abs_file_path", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_split.entry_func": [[136, 259], ["vars", "os.path.abspath", "int", "os.path.join", "os.path.join", "cv_split.assert_dir_structure", "cv_split.create_view_folders", "glob.glob", "cv_split.pair_by_names", "print", "print", "len", "int", "print", "print", "print", "print", "random.shuffle", "numpy.array_split", "enumerate", "get_parser().parse_args", "os.path.join", "os.path.join", "ValueError", "ValueError", "os.path.join", "int", "numpy.ceil", "ValueError", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "mpunet.utils.create_folders", "cv_split.add_images", "random.shuffle", "cv_split.add_images", "len", "numpy.ceil", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "cv_split.add_images", "cv_split.get_parser", "enumerate"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_split.assert_dir_structure", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_split.create_view_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_split.pair_by_names", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.add_images", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.add_images", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.add_images", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.run_tests.get_parser"], ["", "", "def", "entry_func", "(", "args", "=", "None", ")", ":", "\n", "\n", "# Get parser", "\n", "    ", "parser", "=", "vars", "(", "get_parser", "(", ")", ".", "parse_args", "(", "args", ")", ")", "\n", "\n", "# Get arguments", "\n", "data_dir", "=", "os", ".", "path", ".", "abspath", "(", "parser", "[", "\"data_dir\"", "]", ")", "\n", "n_splits", "=", "int", "(", "parser", "[", "\"CV\"", "]", ")", "\n", "if", "n_splits", ">", "1", ":", "\n", "        ", "out_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "parser", "[", "\"out_dir\"", "]", ",", "\"%i_CV\"", "%", "n_splits", ")", "\n", "", "else", ":", "\n", "        ", "out_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "parser", "[", "\"out_dir\"", "]", ",", "\"fixed_split\"", ")", "\n", "", "im_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "parser", "[", "\"im_sub_dir\"", "]", ")", "\n", "lab_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "parser", "[", "\"lab_sub_dir\"", "]", ")", "\n", "\n", "copy", "=", "parser", "[", "\"copy\"", "]", "\n", "file_list", "=", "parser", "[", "\"file_list\"", "]", "\n", "regex", "=", "parser", "[", "\"file_regex\"", "]", "\n", "val_frac", "=", "parser", "[", "\"validation_fraction\"", "]", "\n", "test_frac", "=", "parser", "[", "\"test_fraction\"", "]", "\n", "common_prefix_length", "=", "parser", "[", "\"common_prefix_length\"", "]", "\n", "\n", "if", "n_splits", "==", "1", "and", "not", "test_frac", ":", "\n", "        ", "raise", "ValueError", "(", "\"Must specify --test_fraction with --CV=1.\"", ")", "\n", "", "if", "copy", "and", "file_list", ":", "\n", "        ", "raise", "ValueError", "(", "\"Only one of --copy and --file_list \"", "\n", "\"flags must be set.\"", ")", "\n", "\n", "# Assert suitable folders", "\n", "", "assert_dir_structure", "(", "data_dir", ",", "im_dir", ",", "lab_dir", ",", "out_dir", ")", "\n", "\n", "# Create sub-folders", "\n", "create_view_folders", "(", "out_dir", ",", "n_splits", ")", "\n", "\n", "# Get images and pair by subject identifier if common_prefix_length > 0", "\n", "images", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "im_dir", ",", "regex", ")", ")", "\n", "images", "=", "pair_by_names", "(", "images", ",", "common_prefix_length", ")", "\n", "print", "(", "\"-----\"", ")", "\n", "print", "(", "\"Found {} images\"", ".", "format", "(", "len", "(", "images", ")", ")", ")", "\n", "\n", "# Get validation size", "\n", "N_total", "=", "len", "(", "images", ")", "\n", "if", "n_splits", ">", "1", ":", "\n", "        ", "N_test", "=", "N_total", "//", "n_splits", "\n", "", "else", ":", "\n", "        ", "N_test", "=", "int", "(", "np", ".", "ceil", "(", "N_total", "*", "test_frac", ")", ")", "\n", "", "N_val", "=", "int", "(", "np", ".", "ceil", "(", "N_total", "*", "val_frac", ")", ")", "\n", "if", "N_val", "+", "N_test", ">=", "N_total", ":", "\n", "        ", "raise", "ValueError", "(", "\"Too large validation_fraction - \"", "\n", "\"No training samples left!\"", ")", "\n", "", "N_train", "=", "N_total", "-", "N_test", "-", "N_val", "\n", "print", "(", "\"Total images:\"", ".", "ljust", "(", "40", ")", ",", "N_total", ")", "\n", "print", "(", "\"Train images pr. split:\"", ".", "ljust", "(", "40", ")", ",", "N_train", ")", "\n", "print", "(", "\"Validation images pr. split:\"", ".", "ljust", "(", "40", ")", ",", "N_val", ")", "\n", "print", "(", "\"Test images pr. split:\"", ".", "ljust", "(", "40", ")", ",", "N_test", ")", "\n", "\n", "# Shuffle and split the images into CV parts", "\n", "random", ".", "shuffle", "(", "images", ")", "\n", "splits", "=", "np", ".", "array_split", "(", "images", ",", "n_splits", ")", "\n", "\n", "# Symlink / copy files", "\n", "for", "i", ",", "split", "in", "enumerate", "(", "splits", ")", ":", "\n", "        ", "print", "(", "\"  Split %i/%i\"", "%", "(", "i", "+", "1", ",", "n_splits", ")", ",", "end", "=", "\"\\r\"", ",", "flush", "=", "True", ")", "\n", "\n", "# Set root path to split folder", "\n", "if", "n_splits", ">", "1", ":", "\n", "            ", "split_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"split_%i\"", "%", "i", ")", "\n", "", "else", ":", "\n", "            ", "split_path", "=", "out_dir", "\n", "# Here we kind of hacky force the following code to work with CV=1", "\n", "# Define a test set and overwrite the current split (which stores", "\n", "# add the data, as splits was never split with n_splits=1", "\n", "split", "=", "splits", "[", "0", "]", "[", ":", "N_test", "]", "\n", "\n", "# Overwrite the splits variable to a length 2 array with the", "\n", "# remaining data which will be used as val+train. The loop still", "\n", "# refers to the old split and thus will only execute once", "\n", "splits", "=", "[", "split", ",", "splits", "[", "0", "]", "[", "N_test", ":", "]", "]", "\n", "\n", "# Define train, val and test sub-dirs", "\n", "", "train_path", "=", "os", ".", "path", ".", "join", "(", "split_path", ",", "\"train\"", ")", "\n", "train_im_path", "=", "os", ".", "path", ".", "join", "(", "train_path", ",", "parser", "[", "\"im_sub_dir\"", "]", ")", "\n", "train_label_path", "=", "os", ".", "path", ".", "join", "(", "train_path", ",", "parser", "[", "\"lab_sub_dir\"", "]", ")", "\n", "if", "N_val", ":", "\n", "            ", "val_path", "=", "os", ".", "path", ".", "join", "(", "split_path", ",", "\"val\"", ")", "\n", "val_im_path", "=", "os", ".", "path", ".", "join", "(", "val_path", ",", "parser", "[", "\"im_sub_dir\"", "]", ")", "\n", "val_label_path", "=", "os", ".", "path", ".", "join", "(", "val_path", ",", "parser", "[", "\"lab_sub_dir\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "val_path", ",", "val_im_path", ",", "val_label_path", "=", "(", "None", ",", ")", "*", "3", "\n", "", "test_path", "=", "os", ".", "path", ".", "join", "(", "split_path", ",", "\"test\"", ")", "\n", "test_im_path", "=", "os", ".", "path", ".", "join", "(", "test_path", ",", "parser", "[", "\"im_sub_dir\"", "]", ")", "\n", "test_label_path", "=", "os", ".", "path", ".", "join", "(", "test_path", ",", "parser", "[", "\"lab_sub_dir\"", "]", ")", "\n", "\n", "# Create folders if not existing", "\n", "create_folders", "(", "[", "train_path", ",", "val_path", ",", "train_im_path", ",", "train_label_path", ",", "\n", "val_im_path", ",", "val_label_path", ",", "test_path", ",", "test_im_path", ",", "\n", "test_label_path", "]", ")", "\n", "\n", "# Copy or symlink?", "\n", "if", "copy", ":", "\n", "            ", "from", "shutil", "import", "copyfile", "\n", "move_func", "=", "copyfile", "\n", "", "elif", "file_list", ":", "\n", "            ", "move_func", "=", "_add_to_file_list_fallback", "\n", "", "else", ":", "\n", "            ", "move_func", "=", "os", ".", "symlink", "\n", "\n", "# Add test data to test folder", "\n", "", "add_images", "(", "split", ",", "test_im_path", ",", "test_label_path", ",", "im_dir", ",", "lab_dir", ",", "move_func", ")", "\n", "\n", "# Join remaining splits into train+val", "\n", "remaining", "=", "[", "x", "for", "ind", ",", "x", "in", "enumerate", "(", "splits", ")", "if", "ind", "!=", "i", "]", "\n", "remaining", "=", "[", "item", "for", "sublist", "in", "remaining", "for", "item", "in", "sublist", "]", "\n", "\n", "# Extract validation data from the remaining", "\n", "random", ".", "shuffle", "(", "remaining", ")", "\n", "validation", "=", "remaining", "[", ":", "N_val", "]", "\n", "training", "=", "remaining", "[", "N_val", ":", "]", "\n", "\n", "# Add", "\n", "if", "validation", ":", "\n", "            ", "add_images", "(", "validation", ",", "val_im_path", ",", "val_label_path", ",", "im_dir", ",", "lab_dir", ",", "move_func", ")", "\n", "", "add_images", "(", "training", ",", "train_im_path", ",", "train_label_path", ",", "im_dir", ",", "lab_dir", ",", "move_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.mp.get_parser": [[13, 43], ["pkgutil.iter_modules", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "len", "os.path.split", "isinstance", "choices.append", "os.path.abspath"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "from", "mpunet", "import", "bin", ",", "__version__", "\n", "import", "pkgutil", "\n", "mods", "=", "pkgutil", ".", "iter_modules", "(", "bin", ".", "__path__", ")", "\n", "\n", "ids", "=", "\"Multi-Planar UNet ({})\"", ".", "format", "(", "__version__", ")", "\n", "sep", "=", "\"-\"", "*", "len", "(", "ids", ")", "\n", "usage", "=", "(", "\"mp [script] [script args...]\\n\\n\"", "\n", "\"%s\\n%s\\n\"", "\n", "\"Available scripts:\\n\"", ")", "%", "(", "ids", ",", "sep", ")", "\n", "\n", "choices", "=", "[", "]", "\n", "file_name", "=", "os", ".", "path", ".", "split", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "[", "-", "1", "]", "\n", "for", "m", "in", "mods", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "tuple", ")", ":", "\n", "            ", "name", ",", "ispkg", "=", "m", "[", "1", "]", ",", "m", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "name", ",", "ispkg", "=", "m", ".", "name", ",", "m", ".", "ispkg", "\n", "", "if", "name", "==", "file_name", "[", ":", "-", "3", "]", "or", "ispkg", ":", "\n", "            ", "continue", "\n", "", "usage", "+=", "\"- \"", "+", "name", "+", "\"\\n\"", "\n", "choices", ".", "append", "(", "name", ")", "\n", "\n", "# Top level parser", "\n", "", "parser", "=", "argparse", ".", "ArgumentParser", "(", "usage", "=", "usage", ")", "\n", "parser", ".", "add_argument", "(", "\"script\"", ",", "help", "=", "\"Name of the mp script to run.\"", ",", "\n", "choices", "=", "choices", ")", "\n", "parser", ".", "add_argument", "(", "\"args\"", ",", "help", "=", "\"Arguments passed to script\"", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.mp.entry_func": [[45, 56], ["get_parser().parse_args", "importlib.import_module", "importlib.import_module.entry_func", "mp.get_parser"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.run_tests.entry_func", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.run_tests.get_parser"], ["", "def", "entry_func", "(", "args", "=", "None", ")", ":", "\n", "# Get the script to execute, parse only first input", "\n", "    ", "parsed", "=", "get_parser", "(", ")", ".", "parse_args", "(", "args", ")", "\n", "script", "=", "parsed", ".", "script", "\n", "\n", "# Import the script", "\n", "import", "importlib", "\n", "mod", "=", "importlib", ".", "import_module", "(", "\"mpunet.bin.\"", "+", "script", ")", "\n", "\n", "# Call entry function with remaining arguments", "\n", "mod", ".", "entry_func", "(", "parsed", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.trim_channels.get_argparser": [[6, 17], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_argparser", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'Replace .nii(.gz) files matching a '", "\n", "'GLOB regex in-place to keep only 1 '", "\n", "'out of multiple channels'", ")", "\n", "parser", ".", "add_argument", "(", "\"-d\"", ",", "type", "=", "str", ",", "default", "=", "\"./\"", ",", "\n", "help", "=", "'root dir'", ")", "\n", "parser", ".", "add_argument", "(", "\"-e\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"GLOB regex matching files\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-c\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Keep only this channel\"", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.trim_channels.entry_func": [[19, 45], ["vars", "os.path.abspath", "os.path.join", "glob.glob", "get_argparser().parse_args", "print", "input", "print", "print", "input.lower", "trim_channels.get_argparser", "len", "nib.load", "[].astype", "nib.save", "nib.Nifti1Image", "nib.load.get_data"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train_fusion.get_argparser", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load"], ["", "def", "entry_func", "(", "args", "=", "None", ")", ":", "\n", "    ", "args", "=", "vars", "(", "get_argparser", "(", ")", ".", "parse_args", "(", "args", ")", ")", "\n", "base_path", "=", "os", ".", "path", ".", "abspath", "(", "args", "[", "\"d\"", "]", ")", "\n", "match", "=", "os", ".", "path", ".", "join", "(", "base_path", ",", "args", "[", "\"e\"", "]", ")", "\n", "c", "=", "args", "[", "\"c\"", "]", "\n", "\n", "files", "=", "glob", "(", "match", ",", "recursive", "=", "True", ")", "\n", "\n", "if", "files", ":", "\n", "        ", "print", "(", "\"Matching %i files:\"", "%", "len", "(", "files", ")", ")", "\n", "for", "f", "in", "files", ":", "\n", "            ", "print", "(", "f", ")", "\n", "\n", "", "answer", "=", "input", "(", "\"\\n[OBS] Replace IN-PLACE with files \"", "\n", "\"containing only channel %i? (y/N) \"", "%", "c", ")", "\n", "\n", "if", "answer", ".", "lower", "(", ")", "in", "(", "\"y\"", ",", "\"yes\"", ")", ":", "\n", "            ", "import", "nibabel", "as", "nib", "\n", "import", "numpy", "as", "np", "\n", "\n", "for", "f", "in", "files", ":", "\n", "                ", "im", "=", "nib", ".", "load", "(", "f", ")", "\n", "new_im", "=", "im", ".", "get_data", "(", ")", "[", "...", ",", "c", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "nib", ".", "save", "(", "nib", ".", "Nifti1Image", "(", "new_im", ",", "affine", "=", "im", ".", "affine", ")", ",", "f", ")", "\n", "", "", "", "else", ":", "\n", "        ", "print", "(", "\"No matches to GLOB: '%s'\"", "%", "match", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.summary.get_argparser": [[13, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_argparser", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'Fit a mpunet model defined in a project folder. '", "\n", "'Invoke \"init_project\" to start a new project.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--root_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"./\"", ",", "\n", "help", "=", "'Starting point from which csv '", "\n", "'folders will be searched for.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--pred_subdir\"", ",", "type", "=", "str", ",", "default", "=", "\"predictions\"", ",", "\n", "help", "=", "\"Subdirectory storing the 'csv' subfolder.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--round\"", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.summary.print_mj_or_detailed": [[25, 48], ["df.get", "numpy.nanmean", "numpy.nanstd", "numpy.nanmin", "numpy.nanmax", "numpy.sum", "print", "print", "print", "print", "df.drop", "numpy.arange", "pandas.DataFrame", "numpy.round", "numpy.isnan", "numpy.nanmean().round", "numpy.nanstd().round", "zip", "numpy.nanmean", "numpy.nanstd"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["", "def", "print_mj_or_detailed", "(", "df", ",", "round_", ")", ":", "\n", "    ", "classes", "=", "df", ".", "get", "(", "\"class\"", ")", "\n", "if", "classes", "is", "not", "None", ":", "\n", "        ", "ddf", "=", "df", ".", "drop", "(", "[", "\"class\"", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "classes", "=", "np", ".", "arange", "(", "1", ",", "df", ".", "shape", "[", "0", "]", "+", "1", ")", "\n", "ddf", "=", "df", "\n", "", "means", "=", "np", ".", "nanmean", "(", "ddf", ".", "values", ",", "axis", "=", "1", ")", "\n", "stds", "=", "np", ".", "nanstd", "(", "ddf", ".", "values", ",", "axis", "=", "1", ")", "\n", "mins", "=", "np", ".", "nanmin", "(", "ddf", ".", "values", ",", "axis", "=", "1", ")", "\n", "maxs", "=", "np", ".", "nanmax", "(", "ddf", ".", "values", ",", "axis", "=", "1", ")", "\n", "N", "=", "np", ".", "sum", "(", "~", "np", ".", "isnan", "(", "ddf", ".", "values", ")", ",", "axis", "=", "1", ")", "\n", "\n", "print", "(", "\"\\nPer class:\\n--------------------------------\"", ")", "\n", "print_df", "=", "pd", ".", "DataFrame", "(", "\n", "{", "c", ":", "[", "m", ",", "std", ",", "min", ",", "max", ",", "n", "]", "for", "c", ",", "m", ",", "std", ",", "min", ",", "max", ",", "n", "in", "zip", "(", "classes", ",", "means", ",", "stds", ",", "mins", ",", "maxs", ",", "N", ")", "}", ")", ".", "T", "\n", "print_df", ".", "columns", "=", "[", "\"Mean dice by class\"", ",", "\"+/- STD\"", ",", "\"min\"", ",", "\"max\"", ",", "\"N\"", "]", "\n", "\n", "print", "(", "np", ".", "round", "(", "print_df", ",", "round_", ")", ")", "\n", "print", "(", "\"\\nOverall mean: %s +- %s\"", "%", "(", "\n", "np", ".", "nanmean", "(", "ddf", ".", "values", ")", ".", "round", "(", "round_", ")", ",", "\n", "np", ".", "nanstd", "(", "ddf", ".", "values", ")", ".", "round", "(", "round_", ")", ")", ")", "\n", "print", "(", "\"--------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.summary.print_res": [[50, 64], ["print", "max", "print", "numpy.nanmean().round", "print", "df.drop.drop", "len", "numpy.nanmean"], "function", ["None"], ["", "def", "print_res", "(", "df", ",", "round_", ")", ":", "\n", "    ", "to_drop", "=", "(", "\"Unnamed: 0\"", ",", "\"identifier\"", ",", "\"MJ\"", ")", "\n", "for", "d", "in", "to_drop", ":", "\n", "        ", "try", ":", "\n", "            ", "df", "=", "df", ".", "drop", "(", "[", "d", "]", ",", "axis", "=", "1", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "pass", "\n", "", "", "print", "(", "\"\\nBy views:\\n--------------------------------\"", ")", "\n", "\n", "longest", "=", "max", "(", "[", "len", "(", "v", ")", "for", "v", "in", "df", "]", ")", "\n", "for", "v", "in", "df", ":", "\n", "        ", "mean", "=", "np", ".", "nanmean", "(", "df", "[", "v", "]", ")", ".", "round", "(", "round_", ")", "\n", "print", "(", "(", "\"%s\"", "%", "v", ")", ".", "ljust", "(", "longest", "+", "7", ")", "+", "\"%s\"", "%", "mean", ")", "\n", "", "print", "(", "\"--------------------------------\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.summary.print_results": [[66, 78], ["print", "summary.print_mj_or_detailed", "summary.print_res", "ValueError"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.summary.print_mj_or_detailed", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.summary.print_res"], ["", "def", "print_results", "(", "results", ",", "folder", ",", "round_", ")", ":", "\n", "    ", "print", "(", "\"\\n[***] SUMMARY REPORT FOR FOLDER [***]\\n%s\\n\"", "%", "folder", ")", "\n", "\n", "for", "file_", "in", "results", ":", "\n", "        ", "df", "=", "results", "[", "file_", "]", "\n", "\n", "if", "file_", "in", "(", "\"MJ.csv\"", ",", "\"detailed.csv\"", ")", ":", "\n", "            ", "print_mj_or_detailed", "(", "df", ",", "round_", ")", "\n", "", "elif", "file_", "==", "\"results.csv\"", ":", "\n", "            ", "print_res", "(", "df", ",", "round_", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown file type '%s'\"", "%", "file_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.summary.parse_folder": [[80, 90], ["os.listdir", "pandas.read_csv", "os.path.join"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "", "", "def", "parse_folder", "(", "folder", ",", "look_for", "=", "(", "\"MJ\"", ",", "\"results\"", ",", "\"detailed\"", ")", ")", ":", "\n", "    ", "import", "pandas", "as", "pd", "\n", "dfs", "=", "{", "}", "\n", "files", "=", "os", ".", "listdir", "(", "folder", ")", "\n", "for", "tag", "in", "look_for", ":", "\n", "        ", "for", "f", "in", "files", ":", "\n", "            ", "if", "tag", "in", "f", ":", "\n", "                ", "dfs", "[", "f", "]", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "f", ")", ")", "\n", "\n", "", "", "", "return", "dfs", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.summary.pool_results": [[92, 112], ["pooled.get", "pandas.merge", "pandas.concat", "ValueError"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["", "def", "pool_results", "(", "results", ")", ":", "\n", "    ", "import", "pandas", "as", "pd", "\n", "pooled", "=", "{", "}", "\n", "for", "folder", "in", "results", ":", "\n", "        ", "for", "file_", "in", "results", "[", "folder", "]", ":", "\n", "            ", "df", "=", "results", "[", "folder", "]", "[", "file_", "]", "\n", "if", "pooled", ".", "get", "(", "file_", ")", "is", "not", "None", ":", "\n", "                ", "if", "file_", "in", "(", "\"MJ.csv\"", ",", "\"detailed.csv\"", ")", ":", "\n", "                    ", "pooled", "[", "file_", "]", "=", "pd", ".", "merge", "(", "pooled", "[", "file_", "]", ",", "df", ",", "\n", "left_index", "=", "True", ",", "\n", "right_index", "=", "True", ")", "\n", "", "elif", "file_", "==", "\"results.csv\"", ":", "\n", "                    ", "pooled", "[", "file_", "]", "=", "pd", ".", "concat", "(", "[", "pooled", "[", "file_", "]", ",", "df", "]", ",", "\n", "axis", "=", "0", ",", "\n", "sort", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Unknown file type '%s'\"", "%", "file_", ")", "\n", "", "", "else", ":", "\n", "                ", "pooled", "[", "file_", "]", "=", "df", "\n", "", "", "", "return", "pooled", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.summary.parse_results": [[114, 125], ["summary.pool_results", "summary.print_results", "summary.parse_folder", "len", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.summary.pool_results", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.summary.print_results", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.summary.parse_folder"], ["", "def", "parse_results", "(", "csv_folders", ",", "round_", "=", "3", ")", ":", "\n", "    ", "results", "=", "{", "}", "\n", "for", "folder", "in", "csv_folders", ":", "\n", "        ", "results", "[", "folder", "]", "=", "parse_folder", "(", "folder", ")", "\n", "", "results", "=", "pool_results", "(", "results", ")", "\n", "if", "len", "(", "csv_folders", ")", ">", "1", ":", "\n", "        ", "folder", "=", "\"Pool of %i folders\"", "%", "len", "(", "csv_folders", ")", "\n", "", "else", ":", "\n", "        ", "folder", "=", "csv_folders", "[", "0", "]", "\n", "\n", "", "print_results", "(", "results", ",", "folder", ",", "round_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.summary.entry_func": [[127, 152], ["vars", "os.path.abspath", "glob.glob", "get_argparser().parse_args", "glob.glob", "print", "sys.exit", "print", "glob.glob.sort", "input", "glob.glob", "print", "input.lower", "summary.parse_results", "summary.get_argparser", "len", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.summary.parse_results", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train_fusion.get_argparser"], ["", "def", "entry_func", "(", "args", "=", "None", ")", ":", "\n", "\n", "    ", "args", "=", "vars", "(", "get_argparser", "(", ")", ".", "parse_args", "(", "args", ")", ")", "\n", "dir_", "=", "os", ".", "path", ".", "abspath", "(", "args", "[", "\"root_dir\"", "]", ")", "\n", "p_dir", "=", "args", "[", "\"pred_subdir\"", "]", "\n", "round_", "=", "args", "[", "\"round\"", "]", "\n", "\n", "# Get folder/folders - 3 levels possible", "\n", "csv_folders", "=", "glob", "(", "\"%s/csv\"", "%", "dir_", ")", "\n", "if", "not", "csv_folders", ":", "\n", "        ", "csv_folders", "=", "glob", "(", "\"%s/%s/csv/\"", "%", "(", "dir_", ",", "p_dir", ")", ")", "\n", "if", "not", "csv_folders", ":", "\n", "            ", "csv_folders", "=", "glob", "(", "dir_", "+", "\"/**/%s/csv/\"", "%", "p_dir", ")", "\n", "", "", "if", "not", "csv_folders", ":", "\n", "        ", "print", "(", "\"Could not locate result csv files.\"", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Found %i 'csv' folders under prediction \"", "\n", "\"dirs '%s':\"", "%", "(", "len", "(", "csv_folders", ")", ",", "p_dir", ")", ")", "\n", "csv_folders", ".", "sort", "(", ")", "\n", "for", "d", "in", "csv_folders", ":", "\n", "            ", "print", "(", "\"-- \"", "+", "os", ".", "path", ".", "abspath", "(", "d", ")", ")", "\n", "", "in_", "=", "input", "(", "\"\\nCorrect? (Y/n) \"", ")", "\n", "if", "in_", ".", "lower", "(", ")", "not", "in", "(", "\"n\"", ",", "\"no\"", ")", ":", "\n", "            ", "parse_results", "(", "csv_folders", ",", "round_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment.get_parser": [[11, 59], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Prepare a data folder for a\"", "\n", "\"CV experiment setup.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--CV_dir\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Directory storing split subfolders as output by\"", "\n", "\" cv_split.py\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--out_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"./splits\"", ",", "\n", "help", "=", "\"Folder in which experiments will be run and \"", "\n", "\"results stored.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_GPUs\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of GPUs to use per process. This also \"", "\n", "\"defines the number of parallel jobs to run.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--force_GPU\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "\n", "help", "=", "\"A list of one or more GPU IDs \"", "\n", "\"(comma separated) from which GPU resources \"", "\n", "\"will supplied to each split, independent of\"", "\n", "\" the current memory usage of the GPUs.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--ignore_GPU\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "\n", "help", "=", "\"A list of one or more GPU IDs \"", "\n", "\"(comma separated) that will not be considered.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_jobs\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"OBS: Only in effect when --num_GPUs=0. Sets\"", "\n", "\" the number of jobs to run in parallel when no\"", "\n", "\" GPUs are attached to each job.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--run_on_split\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Only run a specific split\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--script_prototype\"", ",", "type", "=", "str", ",", "default", "=", "\"./script\"", ",", "\n", "help", "=", "\"Path to text file listing commands and \"", "\n", "\"arguments to execute under each sub-exp folder.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--hparams_prototype\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"./train_hparams.yaml\"", ",", "\n", "help", "=", "\"Prototype hyperparameter yaml file from which\"", "\n", "\" sub-CV files will be made.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_hparams\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Do not move a hyperparameter yaml file into \"", "\n", "\"each split dir (one must be already there).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--start_from\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"Start from CV split<start_from>. Default 0.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--wait_for\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "\n", "help", "=", "\"Waiting for PID to terminate before starting \"", "\n", "\"training process.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--monitor_GPUs_every\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"If specified, start a background process which\"", "\n", "\" monitors every 'monitor_GPUs_every' seconds \"", "\n", "\"whether new GPUs have become available than may\"", "\n", "\" be included in the CV experiment GPU resource \"", "\n", "\"pool.\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment.get_CV_folders": [[61, 64], ["int", "os.path.join", "sorted", "x.split", "os.listdir"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "def", "get_CV_folders", "(", "dir", ")", ":", "\n", "    ", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "\n", "return", "[", "os", ".", "path", ".", "join", "(", "dir", ",", "p", ")", "for", "p", "in", "sorted", "(", "os", ".", "listdir", "(", "dir", ")", ",", "key", "=", "key", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment._get_GPU_sets": [[66, 70], ["list", "map", "range", "len"], "function", ["None"], ["", "def", "_get_GPU_sets", "(", "free_gpus", ",", "num_GPUs", ")", ":", "\n", "    ", "free_gpus", "=", "list", "(", "map", "(", "str", ",", "free_gpus", ")", ")", "\n", "return", "[", "\",\"", ".", "join", "(", "free_gpus", "[", "x", ":", "x", "+", "num_GPUs", "]", ")", "for", "x", "in", "range", "(", "0", ",", "len", "(", "free_gpus", ")", ",", "\n", "num_GPUs", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment.get_free_GPU_sets": [[72, 90], ["GPUMonitor", "cv_experiment._gpu_string_to_list", "sorted", "GPUMonitor.stop", "list", "len", "filter", "cv_experiment._get_GPU_sets", "ValueError", "int"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment._gpu_string_to_list", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.stop", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment._get_GPU_sets"], ["", "def", "get_free_GPU_sets", "(", "num_GPUs", ",", "ignore_gpus", "=", "None", ")", ":", "\n", "    ", "from", "mpunet", ".", "utils", ".", "system", "import", "GPUMonitor", "\n", "mon", "=", "GPUMonitor", "(", ")", "\n", "ignore_gpus", "=", "_gpu_string_to_list", "(", "ignore_gpus", "or", "\"\"", ",", "as_int", "=", "True", ")", "\n", "free_gpus", "=", "sorted", "(", "mon", ".", "free_GPUs", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ")", ")", "\n", "mon", ".", "stop", "(", ")", "\n", "free_gpus", "=", "list", "(", "filter", "(", "lambda", "gpu", ":", "gpu", "not", "in", "ignore_gpus", ",", "free_gpus", ")", ")", "\n", "total_GPUs", "=", "len", "(", "free_gpus", ")", "\n", "\n", "if", "total_GPUs", "%", "num_GPUs", "or", "not", "free_gpus", ":", "\n", "        ", "if", "total_GPUs", "<", "num_GPUs", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid number of GPUs per process '%i' for total \"", "\n", "\"GPU count of '%i' - must be evenly divisible.\"", "%", "\n", "(", "num_GPUs", ",", "total_GPUs", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "        ", "return", "_get_GPU_sets", "(", "free_gpus", ",", "num_GPUs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment.monitor_GPUs": [[92, 114], ["stop_event.is_set", "sublist.split", "cv_experiment.get_free_GPU_sets", "time.sleep", "any", "gpu_queue.put", "gpu_set.split", "gpu_set.split"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment.get_free_GPU_sets"], ["", "", "def", "monitor_GPUs", "(", "every", ",", "gpu_queue", ",", "num_GPUs", ",", "ignore_GPU", ",", "current_pool", ",", "stop_event", ")", ":", "\n", "    ", "import", "time", "\n", "# Make flat version of the list of gpu sets", "\n", "current_pool", "=", "[", "gpu", "for", "sublist", "in", "current_pool", "for", "gpu", "in", "sublist", ".", "split", "(", "\",\"", ")", "]", "\n", "while", "not", "stop_event", ".", "is_set", "(", ")", ":", "\n", "# Get available GPU sets. Will raise ValueError if no full set is", "\n", "# available", "\n", "        ", "try", ":", "\n", "            ", "gpu_sets", "=", "get_free_GPU_sets", "(", "num_GPUs", ",", "ignore_GPU", ")", "\n", "for", "gpu_set", "in", "gpu_sets", ":", "\n", "                ", "if", "any", "(", "[", "g", "in", "current_pool", "for", "g", "in", "gpu_set", ".", "split", "(", "\",\"", ")", "]", ")", ":", "\n", "# If one or more GPUs are already in use - this may happen", "\n", "# initially as preprocessing occurs in a process before GPU", "\n", "# memory has been allocated - ignore the set", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "gpu_queue", ".", "put", "(", "gpu_set", ")", "\n", "current_pool", "+=", "gpu_set", ".", "split", "(", "\",\"", ")", "\n", "", "", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n", "", "finally", ":", "\n", "            ", "time", ".", "sleep", "(", "every", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment.parse_script": [[116, 131], ["open", "line.strip.strip", "list", "commands.append", "line.strip.split", "filter", "list.append", "line.strip.split", "x.lower"], "function", ["None"], ["", "", "", "def", "parse_script", "(", "script", ",", "GPUs", ")", ":", "\n", "    ", "commands", "=", "[", "]", "\n", "with", "open", "(", "script", ")", "as", "in_file", ":", "\n", "        ", "for", "line", "in", "in_file", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", "\" \\n\"", ")", "\n", "if", "not", "line", "or", "line", "[", "0", "]", "==", "\"#\"", ":", "\n", "                ", "continue", "\n", "# Split out in-line comments", "\n", "", "line", "=", "line", ".", "split", "(", "\"#\"", ")", "[", "0", "]", "\n", "# Get all arguments, remove if concerning GPU (controlled here)", "\n", "cmd", "=", "list", "(", "filter", "(", "lambda", "x", ":", "\"gpu\"", "not", "in", "x", ".", "lower", "(", ")", ",", "line", ".", "split", "(", ")", ")", ")", "\n", "if", "\"python\"", "in", "line", "or", "line", "[", ":", "2", "]", "==", "\"mp\"", "or", "line", "[", ":", "2", "]", "==", "\"ds\"", ":", "\n", "                ", "cmd", ".", "append", "(", "\"--force_GPU=%s\"", "%", "GPUs", ")", "\n", "", "commands", ".", "append", "(", "cmd", ")", "\n", "", "", "return", "commands", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment.run_sub_experiment": [[133, 191], ["os.path.join", "os.path.join", "mpunet.utils.create_folders", "cv_experiment.parse_script", "os.chdir", "lock.acquire", "logger", "logger", "logger", "logger", "logger", "enumerate", "logger", "lock.release", "GPU_queue.put", "os.path.split", "mpunet.bin.init_project.copy_yaml_and_set_data_dirs", "logger", "lock.acquire", "logger", "lock.release", "subprocess.Popen", "subprocess.Popen.communicate", "lock.acquire", "lock.release", "len", "logger", "logger", "logger", "len", "err.decode"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment.parse_script", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.init_project.copy_yaml_and_set_data_dirs"], ["", "def", "run_sub_experiment", "(", "split_dir", ",", "out_dir", ",", "script", ",", "hparams", ",", "no_hparams", ",", "\n", "GPUs", ",", "GPU_queue", ",", "lock", ",", "logger", ")", ":", "\n", "\n", "# Create sub-directory", "\n", "    ", "split", "=", "os", ".", "path", ".", "split", "(", "split_dir", ")", "[", "-", "1", "]", "\n", "out_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "split", ")", "\n", "out_hparams", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"train_hparams.yaml\"", ")", "\n", "create_folders", "(", "out_dir", ")", "\n", "\n", "# Get list of commands", "\n", "commands", "=", "parse_script", "(", "script", ",", "GPUs", ")", "\n", "\n", "# Move hparams and script files into folder", "\n", "if", "not", "no_hparams", ":", "\n", "        ", "copy_yaml_and_set_data_dirs", "(", "in_path", "=", "hparams", ",", "\n", "out_path", "=", "out_hparams", ",", "\n", "data_dir", "=", "split_dir", ")", "\n", "\n", "# Change directory and file permissions", "\n", "", "os", ".", "chdir", "(", "out_dir", ")", "\n", "\n", "# Log", "\n", "lock", ".", "acquire", "(", ")", "\n", "s", "=", "\"[*] Running experiment: %s\"", "%", "split", "\n", "logger", "(", "\"\\n%s\\n%s\"", "%", "(", "\"-\"", "*", "len", "(", "s", ")", ",", "s", ")", ")", "\n", "logger", "(", "\"Data dir:\"", ",", "split_dir", ")", "\n", "logger", "(", "\"Out dir:\"", ",", "out_dir", ")", "\n", "logger", "(", "\"Using GPUs:\"", ",", "GPUs", ")", "\n", "logger", "(", "\"\\nRunning commands:\"", ")", "\n", "for", "i", ",", "command", "in", "enumerate", "(", "commands", ")", ":", "\n", "        ", "logger", "(", "\" %i) %s\"", "%", "(", "i", "+", "1", ",", "\" \"", ".", "join", "(", "command", ")", ")", ")", "\n", "", "logger", "(", "\"-\"", "*", "len", "(", "s", ")", ")", "\n", "lock", ".", "release", "(", ")", "\n", "\n", "# Run the commands", "\n", "run_next_command", "=", "True", "\n", "for", "command", "in", "commands", ":", "\n", "        ", "if", "not", "run_next_command", ":", "\n", "            ", "break", "\n", "", "lock", ".", "acquire", "(", ")", "\n", "logger", "(", "\"[%s - STARTING] %s\"", "%", "(", "split", ",", "\" \"", ".", "join", "(", "command", ")", ")", ")", "\n", "lock", ".", "release", "(", ")", "\n", "p", "=", "subprocess", ".", "Popen", "(", "command", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "\n", "stderr", "=", "subprocess", ".", "PIPE", ")", "\n", "_", ",", "err", "=", "p", ".", "communicate", "(", ")", "\n", "rc", "=", "p", ".", "returncode", "\n", "lock", ".", "acquire", "(", ")", "\n", "if", "rc", "!=", "0", ":", "\n", "            ", "logger", "(", "\"[%s - ERROR - Exit code %i] %s\"", "%", "(", "split", ",", "rc", ",", "\" \"", ".", "join", "(", "command", ")", ")", ")", "\n", "logger", "(", "\"\\n----- START error message -----\\n%s\\n\"", "\n", "\"----- END error message -----\\n\"", "%", "err", ".", "decode", "(", "\"utf-8\"", ")", ")", "\n", "run_next_command", "=", "False", "\n", "", "else", ":", "\n", "            ", "logger", "(", "\"[%s - FINISHED] %s\"", "%", "(", "split", ",", "\" \"", ".", "join", "(", "command", ")", ")", ")", "\n", "", "lock", ".", "release", "(", ")", "\n", "\n", "# Add the GPUs back into the queue", "\n", "", "GPU_queue", ".", "put", "(", "GPUs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment._assert_run_split": [[193, 202], ["ValueError", "ValueError", "ValueError"], "function", ["None"], ["", "def", "_assert_run_split", "(", "start_from", ",", "monitor_GPUs_every", ",", "num_jobs", ")", ":", "\n", "    ", "if", "start_from", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Should specify either --run_on_split <split> or \"", "\n", "\"--start_from <split>, got both.\"", ")", "\n", "", "if", "monitor_GPUs_every", "is", "not", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"--monitor_GPUs_every is not a valid argument\"", "\n", "\" to use with --run_on_split.\"", ")", "\n", "", "if", "num_jobs", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"--num_jobs is not a valid argument to use with\"", "\n", "\" --run_on_split.\"", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment._assert_force_and_ignore_gpus": [[205, 213], ["cv_experiment._gpu_string_to_list", "cv_experiment._gpu_string_to_list", "set", "set", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment._gpu_string_to_list", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment._gpu_string_to_list"], ["", "", "def", "_assert_force_and_ignore_gpus", "(", "force_gpu", ",", "ignore_gpu", ")", ":", "\n", "    ", "force_gpu", "=", "_gpu_string_to_list", "(", "force_gpu", ")", "\n", "ignore_gpu", "=", "_gpu_string_to_list", "(", "ignore_gpu", ")", "\n", "overlap", "=", "set", "(", "force_gpu", ")", "&", "set", "(", "ignore_gpu", ")", "\n", "if", "overlap", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Cannot both force and ignore GPU(s) {}. \"", "\n", "\"Got forced GPUs {} and ignored GPUs {}\"", ".", "format", "(", "\n", "overlap", ",", "force_gpu", ",", "ignore_gpu", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment._gpu_string_to_list": [[216, 221], ["list", "filter", "list", "gpu_list.replace().split", "map", "gpu_list.replace"], "function", ["None"], ["", "", "def", "_gpu_string_to_list", "(", "gpu_list", ",", "as_int", "=", "False", ")", ":", "\n", "    ", "str_gpus", "=", "list", "(", "filter", "(", "None", ",", "gpu_list", ".", "replace", "(", "\" \"", ",", "\"\"", ")", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "if", "as_int", ":", "\n", "        ", "return", "list", "(", "map", "(", "int", ",", "str_gpus", ")", ")", "\n", "", "return", "str_gpus", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment.entry_func": [[223, 325], ["vars", "os.path.abspath", "os.path.abspath", "mpunet.utils.create_folders", "cv_experiment._assert_force_and_ignore_gpus", "os.path.abspath", "os.path.abspath", "cv_experiment.get_CV_folders", "mpunet.logging.Logger", "multiprocessing.Lock", "multiprocessing.Queue", "get_parser().parse_args", "cv_experiment._assert_run_split", "await_PIDs", "set_gpu", "multiprocessing.Queue.put", "mpunet.logging.Logger.", "multiprocessing.Event", "multiprocessing.Process", "multiprocessing.Process.start", "procs.append", "multiprocessing.Event.set", "multiprocessing.Process.join", "ValueError", "cv_experiment.get_free_GPU_sets", "ValueError", "multiprocessing.Queue.get", "multiprocessing.Process", "multiprocessing.Process.start", "procs.append", "cv_experiment.get_parser", "len", "len", "multiprocessing.Process.terminate", "multiprocessing.Process.is_alive", "multiprocessing.Process.join", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment._assert_force_and_ignore_gpus", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment.get_CV_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment._assert_run_split", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.await_PIDs", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.set_gpu", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.start", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.cv_experiment.get_free_GPU_sets", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.start", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.run_tests.get_parser", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "def", "entry_func", "(", "args", "=", "None", ")", ":", "\n", "# Get parser", "\n", "    ", "parser", "=", "vars", "(", "get_parser", "(", ")", ".", "parse_args", "(", "args", ")", ")", "\n", "\n", "# Get parser arguments", "\n", "cv_dir", "=", "os", ".", "path", ".", "abspath", "(", "parser", "[", "\"CV_dir\"", "]", ")", "\n", "out_dir", "=", "os", ".", "path", ".", "abspath", "(", "parser", "[", "\"out_dir\"", "]", ")", "\n", "create_folders", "(", "out_dir", ")", "\n", "await_PID", "=", "parser", "[", "\"wait_for\"", "]", "\n", "run_split", "=", "parser", "[", "\"run_on_split\"", "]", "\n", "start_from", "=", "parser", "[", "\"start_from\"", "]", "or", "0", "\n", "num_jobs", "=", "parser", "[", "\"num_jobs\"", "]", "or", "1", "\n", "\n", "# GPU settings", "\n", "num_GPUs", "=", "parser", "[", "\"num_GPUs\"", "]", "\n", "force_GPU", "=", "parser", "[", "\"force_GPU\"", "]", "\n", "ignore_GPU", "=", "parser", "[", "\"ignore_GPU\"", "]", "\n", "monitor_GPUs_every", "=", "parser", "[", "\"monitor_GPUs_every\"", "]", "\n", "\n", "# User input assertions", "\n", "_assert_force_and_ignore_gpus", "(", "force_GPU", ",", "ignore_GPU", ")", "\n", "if", "run_split", ":", "\n", "        ", "_assert_run_split", "(", "start_from", ",", "monitor_GPUs_every", ",", "num_jobs", ")", "\n", "\n", "# Wait for PID?", "\n", "", "if", "await_PID", ":", "\n", "        ", "from", "mpunet", ".", "utils", "import", "await_PIDs", "\n", "await_PIDs", "(", "await_PID", ")", "\n", "\n", "# Get file paths", "\n", "", "script", "=", "os", ".", "path", ".", "abspath", "(", "parser", "[", "\"script_prototype\"", "]", ")", "\n", "hparams", "=", "os", ".", "path", ".", "abspath", "(", "parser", "[", "\"hparams_prototype\"", "]", ")", "\n", "no_hparams", "=", "parser", "[", "\"no_hparams\"", "]", "\n", "\n", "# Get list of folders of CV data to run on", "\n", "cv_folders", "=", "get_CV_folders", "(", "cv_dir", ")", "\n", "if", "run_split", "is", "not", "None", ":", "\n", "        ", "if", "run_split", "<", "0", "or", "run_split", ">=", "len", "(", "cv_folders", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"--run_on_split should be in range [0-{}], \"", "\n", "\"got {}\"", ".", "format", "(", "\n", "len", "(", "cv_folders", ")", "-", "1", ",", "run_split", "\n", ")", ")", "\n", "", "cv_folders", "=", "[", "cv_folders", "[", "run_split", "]", "]", "\n", "log_appendix", "=", "\"_split{}\"", ".", "format", "(", "run_split", ")", "\n", "", "else", ":", "\n", "        ", "log_appendix", "=", "\"\"", "\n", "\n", "# Get a logger object", "\n", "", "logger", "=", "Logger", "(", "base_path", "=", "\"./\"", ",", "active_file", "=", "\"output\"", "+", "log_appendix", ",", "\n", "print_calling_method", "=", "False", ",", "overwrite_existing", "=", "True", ")", "\n", "\n", "if", "force_GPU", ":", "\n", "# Only these GPUs fill be chosen from", "\n", "        ", "from", "mpunet", ".", "utils", "import", "set_gpu", "\n", "set_gpu", "(", "force_GPU", ")", "\n", "", "if", "num_GPUs", ":", "\n", "# Get GPU sets (up to the number of splits)", "\n", "        ", "gpu_sets", "=", "get_free_GPU_sets", "(", "num_GPUs", ",", "ignore_GPU", ")", "[", ":", "len", "(", "cv_folders", ")", "]", "\n", "", "elif", "not", "num_jobs", "or", "num_jobs", "<", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Should specify a number of jobs to run in parallel \"", "\n", "\"with the --num_jobs flag when using 0 GPUs pr. \"", "\n", "\"process (--num_GPUs=0 was set).\"", ")", "\n", "", "else", ":", "\n", "        ", "gpu_sets", "=", "[", "\"''\"", "]", "*", "parser", "[", "\"num_jobs\"", "]", "\n", "\n", "# Get process pool, lock and GPU queue objects", "\n", "", "lock", "=", "Lock", "(", ")", "\n", "gpu_queue", "=", "Queue", "(", ")", "\n", "for", "gpu", "in", "gpu_sets", ":", "\n", "        ", "gpu_queue", ".", "put", "(", "gpu", ")", "\n", "\n", "", "procs", "=", "[", "]", "\n", "if", "monitor_GPUs_every", "is", "not", "None", "and", "monitor_GPUs_every", ":", "\n", "        ", "logger", "(", "\"\\nOBS: Monitoring GPU pool every %i seconds\\n\"", "%", "monitor_GPUs_every", ")", "\n", "# Start a process monitoring new GPU availability over time", "\n", "stop_event", "=", "Event", "(", ")", "\n", "t", "=", "Process", "(", "target", "=", "monitor_GPUs", ",", "args", "=", "(", "monitor_GPUs_every", ",", "gpu_queue", ",", "\n", "num_GPUs", ",", "ignore_GPU", ",", "\n", "gpu_sets", ",", "stop_event", ")", ")", "\n", "t", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "t", ")", "\n", "", "else", ":", "\n", "        ", "stop_event", "=", "None", "\n", "", "try", ":", "\n", "        ", "for", "cv_folder", "in", "cv_folders", "[", "start_from", ":", "]", ":", "\n", "            ", "gpus", "=", "gpu_queue", ".", "get", "(", ")", "\n", "t", "=", "Process", "(", "target", "=", "run_sub_experiment", ",", "\n", "args", "=", "(", "cv_folder", ",", "out_dir", ",", "script", ",", "hparams", ",", "\n", "no_hparams", ",", "gpus", ",", "gpu_queue", ",", "\n", "lock", ",", "logger", ")", ")", "\n", "t", ".", "start", "(", ")", "\n", "procs", ".", "append", "(", "t", ")", "\n", "for", "t", "in", "procs", ":", "\n", "                ", "if", "not", "t", ".", "is_alive", "(", ")", ":", "\n", "                    ", "t", ".", "join", "(", ")", "\n", "", "", "", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "for", "t", "in", "procs", ":", "\n", "            ", "t", ".", "terminate", "(", ")", "\n", "", "", "if", "stop_event", "is", "not", "None", ":", "\n", "        ", "stop_event", ".", "set", "(", ")", "\n", "", "for", "t", "in", "procs", ":", "\n", "        ", "t", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.get_argparser": [[19, 63], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_argparser", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'Predict using a mpunet model.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--project_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"./\"", ",", "\n", "help", "=", "'Path to mpunet project folder'", ")", "\n", "parser", ".", "add_argument", "(", "\"-f\"", ",", "help", "=", "\"Predict on a single file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-l\"", ",", "help", "=", "\"Optional single label file to use with -f\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "type", "=", "str", ",", "default", "=", "\"test\"", ",", "\n", "help", "=", "\"Which dataset of those stored in the hparams \"", "\n", "\"file the evaluation should be performed on. \"", "\n", "\"Has no effect if a single file is specified \"", "\n", "\"with -f.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--out_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"predictions\"", ",", "\n", "help", "=", "\"Output folder to store results\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_GPUs\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of GPUs to use for this job\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sum_fusion\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Fuse the mutliple segmentation volumes into one\"", "\n", "\" by summing over the probability axis instead \"", "\n", "\"of applying a learned fusion model.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--overwrite\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Overwrite previous results at the output folder'", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_eval\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Perform no evaluation of the prediction performance. \"", "\n", "\"No label files loaded when this flag applies.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_prob\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "\"Perform evaluation on only a fraction of the\"", "\n", "\" computed views (to speed up run-time). OBS: \"", "\n", "\"always performs evaluation on the combined \"", "\n", "\"predictions.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--force_GPU\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_input_files\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Save in addition to the predicted volume the \"", "\n", "\"input image and label files to the output dir)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_argmax\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Do not argmax prediction volume prior to save.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--on_val\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Evaluate on the validation set instead of test\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--wait_for\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "\n", "help", "=", "\"Waiting for PID to terminate before starting \"", "\n", "\"training process.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--continue\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Continue from a previsous, non-finished \"", "\n", "\"prediction session at 'out_dir'.\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.validate_folders": [[65, 88], ["os.path.join", "os.path.exists", "print", "exit", "os.path.exists", "os.mkdir", "os.path.exists", "print", "exit"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "def", "validate_folders", "(", "base_dir", ",", "out_dir", ",", "overwrite", ",", "_continue", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "# Check base (model) dir contains required files", "\n", "must_exist", "=", "(", "\"train_hparams.yaml\"", ",", "\"views.npz\"", ",", "\n", "\"model\"", ")", "\n", "for", "p", "in", "must_exist", ":", "\n", "        ", "p", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "p", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ":", "\n", "            ", "from", "sys", "import", "exit", "\n", "print", "(", "\"[*] Invalid mpunet project folder: '%s'\"", "\n", "\"\\n    Needed file/folder '%s' not found.\"", "%", "(", "base_dir", ",", "p", ")", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# Check if output folder already exists", "\n", "", "", "if", "not", "(", "overwrite", "or", "_continue", ")", "and", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "from", "sys", "import", "exit", "\n", "print", "(", "\"[*] Output directory already exists at: '%s'\"", "\n", "\"\\n  Use --overwrite to overwrite or --continue to continue\"", "%", "out_dir", ")", "\n", "exit", "(", "0", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.save_nii_files": [[90, 118], ["mpunet.utils.utils.create_folders", "zip", "nib.Nifti1Image.get_data", "os.path.abspath", "os.path.join", "nibabel.Nifti1Image", "nibabel.save"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "", "def", "save_nii_files", "(", "merged", ",", "image_pair", ",", "nii_res_dir", ",", "save_input_files", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "# Extract data if nii files", "\n", "try", ":", "\n", "        ", "merged", "=", "merged", ".", "get_data", "(", ")", "\n", "", "except", "AttributeError", ":", "\n", "        ", "merged", "=", "nib", ".", "Nifti1Image", "(", "merged", ",", "affine", "=", "image_pair", ".", "affine", ")", "\n", "", "volumes", "=", "[", "merged", ",", "image_pair", ".", "image_obj", ",", "image_pair", ".", "labels_obj", "]", "\n", "labels", "=", "[", "\"%s_PRED.nii.gz\"", "%", "image_pair", ".", "identifier", ",", "\n", "\"%s_IMAGE.nii.gz\"", "%", "image_pair", ".", "identifier", ",", "\n", "\"%s_LABELS.nii.gz\"", "%", "image_pair", ".", "identifier", "]", "\n", "if", "not", "save_input_files", ":", "\n", "        ", "volumes", "=", "volumes", "[", ":", "1", "]", "\n", "labels", "=", "labels", "[", ":", "1", "]", "\n", "p", "=", "os", ".", "path", ".", "abspath", "(", "nii_res_dir", ")", "# Save file directly in nii_res_dir", "\n", "", "else", ":", "\n", "# Create sub-folder under nii_res_dir", "\n", "        ", "p", "=", "os", ".", "path", ".", "join", "(", "nii_res_dir", ",", "image_pair", ".", "identifier", ")", "\n", "", "create_folders", "(", "p", ")", "\n", "\n", "for", "nii", ",", "fname", "in", "zip", "(", "volumes", ",", "labels", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "nib", ".", "save", "(", "nii", ",", "\"%s/%s\"", "%", "(", "p", ",", "fname", ")", ")", "\n", "", "except", "AttributeError", ":", "\n", "# No labels file?", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.remove_already_predicted": [[120, 130], ["os.path.join", "print", "i.replace().split", "filter", "all_images.items", "os.listdir", "i.replace"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "", "", "def", "remove_already_predicted", "(", "all_images", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "nii_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"nii_files\"", ")", "\n", "already_pred", "=", "[", "i", ".", "replace", "(", "\"_PRED\"", ",", "\"\"", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "for", "i", "in", "filter", "(", "None", ",", "os", ".", "listdir", "(", "nii_dir", ")", ")", "]", "\n", "print", "(", "\"[OBS] Not predicting on images: {} \"", "\n", "\"(--continue mode)\"", ".", "format", "(", "already_pred", ")", ")", "\n", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "all_images", ".", "items", "(", ")", "if", "k", "not", "in", "already_pred", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.load_hparams": [[132, 138], ["YAMLHParams", "os.path.join"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "def", "load_hparams", "(", "base_dir", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "from", "mpunet", ".", "hyperparameters", "import", "YAMLHParams", "\n", "return", "YAMLHParams", "(", "os", ".", "path", ".", "join", "(", "base_dir", ",", "\"train_hparams.yaml\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.set_test_set": [[140, 145], ["dataset.strip"], "function", ["None"], ["", "def", "set_test_set", "(", "hparams", ",", "dataset", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "hparams", "[", "'test_dataset'", "]", "=", "hparams", "[", "dataset", ".", "strip", "(", "\"_dataset\"", ")", "+", "\"_dataset\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.set_gpu_vis": [[147, 162], ["await_and_set_free_gpu", "set_gpu", "len", "force_gpu.split"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.await_and_set_free_gpu", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.set_gpu"], ["", "def", "set_gpu_vis", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "force_gpu", "=", "args", ".", "force_GPU", "\n", "if", "not", "force_gpu", ":", "\n", "# Wait for free GPU", "\n", "        ", "from", "mpunet", ".", "utils", "import", "await_and_set_free_gpu", "\n", "await_and_set_free_gpu", "(", "N", "=", "args", ".", "num_GPUs", ",", "sleep_seconds", "=", "120", ")", "\n", "num_GPUs", "=", "args", ".", "num_GPUs", "\n", "", "else", ":", "\n", "        ", "from", "mpunet", ".", "utils", "import", "set_gpu", "\n", "set_gpu", "(", "force_gpu", ")", "\n", "num_GPUs", "=", "len", "(", "force_gpu", ".", "split", "(", "\",\"", ")", ")", "\n", "", "return", "num_GPUs", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.get_image_pair_loader": [[164, 187], ["ImagePairLoader", "ImagePairLoader", "ImagePairLoader.add_image", "vars", "predict.remove_already_predicted", "args.dataset.replace", "bool", "ImagePair"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.add_image", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.remove_already_predicted"], ["", "def", "get_image_pair_loader", "(", "args", ",", "hparams", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "from", "mpunet", ".", "image", "import", "ImagePairLoader", ",", "ImagePair", "\n", "if", "not", "args", ".", "f", ":", "\n", "# No single file was specified with -f flag, load the desired dataset", "\n", "        ", "dataset", "=", "args", ".", "dataset", ".", "replace", "(", "\"_data\"", ",", "\"\"", ")", "+", "\"_data\"", "\n", "image_pair_loader", "=", "ImagePairLoader", "(", "predict_mode", "=", "args", ".", "no_eval", ",", "\n", "**", "hparams", "[", "dataset", "]", ")", "\n", "", "else", ":", "\n", "        ", "predict_mode", "=", "not", "bool", "(", "args", ".", "l", ")", "\n", "image_pair_loader", "=", "ImagePairLoader", "(", "predict_mode", "=", "predict_mode", ",", "\n", "initialize_empty", "=", "True", ")", "\n", "image_pair_loader", ".", "add_image", "(", "ImagePair", "(", "args", ".", "f", ",", "args", ".", "l", ")", ")", "\n", "\n", "# Put image pairs into a dict and remove from image_pair_loader to gain", "\n", "# more control with garbage collection", "\n", "", "image_pair_dict", "=", "{", "image", ".", "identifier", ":", "image", "for", "image", "in", "image_pair_loader", ".", "images", "}", "\n", "if", "vars", "(", "args", ")", "[", "\"continue\"", "]", ":", "\n", "# Remove images that were already predicted", "\n", "        ", "image_pair_dict", "=", "remove_already_predicted", "(", "image_pair_dict", ",", "out_dir", ")", "\n", "", "return", "image_pair_loader", ",", "image_pair_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.get_results_dicts": [[189, 203], ["mpunet.logging.log_results.save_all", "os.path.join", "load_result_dicts", "init_result_dicts"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.save_all", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.load_result_dicts", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.init_result_dicts"], ["", "def", "get_results_dicts", "(", "out_dir", ",", "views", ",", "image_pairs_dict", ",", "n_classes", ",", "_continue", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "from", "mpunet", ".", "logging", "import", "init_result_dicts", ",", "save_all", ",", "load_result_dicts", "\n", "if", "_continue", ":", "\n", "        ", "csv_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"csv\"", ")", "\n", "results", ",", "detailed_res", "=", "load_result_dicts", "(", "csv_dir", "=", "csv_dir", ",", "views", "=", "views", ")", "\n", "", "else", ":", "\n", "# Prepare dictionary to store results in pd df", "\n", "        ", "results", ",", "detailed_res", "=", "init_result_dicts", "(", "views", ",", "image_pairs_dict", ",", "n_classes", ")", "\n", "# Save to check correct format", "\n", "", "save_all", "(", "results", ",", "detailed_res", ",", "out_dir", ")", "\n", "return", "results", ",", "detailed_res", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.get_model": [[205, 218], ["mpunet.utils.utils.get_best_model", "print", "os.path.splitext", "tf.distribute.MirroredStrategy().scope", "init_model", "init_model.load_weights", "os.path.split", "tf.distribute.MirroredStrategy"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_best_model", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.model_init.init_model"], ["", "def", "get_model", "(", "project_dir", ",", "build_hparams", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "from", "mpunet", ".", "models", ".", "model_init", "import", "init_model", "\n", "model_path", "=", "get_best_model", "(", "project_dir", "+", "\"/model\"", ")", "\n", "weights_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "split", "(", "model_path", ")", "[", "1", "]", ")", "[", "0", "]", "\n", "print", "(", "\"\\n[*] Loading model weights:\\n\"", ",", "model_path", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "with", "tf", ".", "distribute", ".", "MirroredStrategy", "(", ")", ".", "scope", "(", ")", ":", "\n", "        ", "model", "=", "init_model", "(", "build_hparams", ")", "\n", "model", ".", "load_weights", "(", "model_path", ",", "by_name", "=", "True", ")", "\n", "", "return", "model", ",", "weights_name", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.get_fusion_model": [[220, 234], ["FusionModel", "print", "FusionModel.load_weights", "print", "tuple", "FusionModel.layers[].get_weights"], "function", ["None"], ["", "def", "get_fusion_model", "(", "n_views", ",", "n_classes", ",", "project_dir", ",", "weights_name", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "from", "mpunet", ".", "models", "import", "FusionModel", "\n", "fm", "=", "FusionModel", "(", "n_inputs", "=", "n_views", ",", "n_classes", "=", "n_classes", ")", "\n", "# Load fusion weights", "\n", "weights", "=", "project_dir", "+", "\"/model/fusion_weights/%s_fusion_\"", "\"weights.h5\"", "%", "weights_name", "\n", "print", "(", "\"\\n[*] Loading fusion model weights:\\n\"", ",", "weights", ")", "\n", "fm", ".", "load_weights", "(", "weights", ")", "\n", "print", "(", "\"\\nLoaded weights:\\n\\n%s\\n%s\\n---\"", "%", "tuple", "(", "\n", "fm", ".", "layers", "[", "-", "1", "]", ".", "get_weights", "(", ")", ")", ")", "\n", "return", "fm", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.evaluate": [[236, 246], ["mpunet.utils.utils.pred_to_class", "mpunet.evaluate.metrics.dice_all"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.pred_to_class", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.metrics.dice_all"], ["", "def", "evaluate", "(", "pred", ",", "true", ",", "n_classes", ",", "ignore_zero", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "pred", "=", "pred_to_class", "(", "pred", ",", "img_dims", "=", "3", ",", "has_batch_dim", "=", "False", ")", "\n", "return", "dice_all", "(", "y_true", "=", "true", ",", "\n", "y_pred", "=", "pred", ",", "\n", "ignore_zero", "=", "ignore_zero", ",", "\n", "n_classes", "=", "n_classes", ",", "\n", "skip_if_no_y", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict._per_view_evaluation": [[248, 274], ["predict.evaluate", "predict.evaluate", "[].mean", "print", "print", "print", "mpunet.logging.log_results.save_all", "numpy.random.rand", "print", "len", "str", "str", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.evaluate", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.evaluate", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.save_all"], ["", "def", "_per_view_evaluation", "(", "image_id", ",", "pred", ",", "true", ",", "mapped_pred", ",", "mapped_true", ",", "view", ",", "\n", "n_classes", ",", "results", ",", "per_view_results", ",", "out_dir", ",", "args", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "args", ".", "eval_prob", ":", "\n", "        ", "print", "(", "\"Skipping evaluation for view %s... \"", "\n", "\"(eval_prob=%.3f)\"", "%", "(", "view", ",", "args", ".", "eval_prob", ")", ")", "\n", "return", "\n", "\n", "# Evaluate the raw view performance", "\n", "", "view_dices", "=", "evaluate", "(", "pred", ",", "true", ",", "n_classes", ")", "\n", "mapped_dices", "=", "evaluate", "(", "mapped_pred", ",", "mapped_true", ",", "n_classes", ")", "\n", "mean_dice", "=", "mapped_dices", "[", "~", "np", ".", "isnan", "(", "mapped_dices", ")", "]", "[", "1", ":", "]", ".", "mean", "(", ")", "\n", "\n", "# Print dice scores", "\n", "print", "(", "\"View dice scores:   \"", ",", "view_dices", ")", "\n", "print", "(", "\"Mapped dice scores: \"", ",", "mapped_dices", ")", "\n", "print", "(", "\"Mean dice (n=%i): \"", "%", "(", "len", "(", "mapped_dices", ")", "-", "1", ")", ",", "mean_dice", ")", "\n", "\n", "# Add to results", "\n", "results", ".", "loc", "[", "image_id", ",", "str", "(", "view", ")", "]", "=", "mean_dice", "\n", "per_view_results", "[", "str", "(", "view", ")", "]", "[", "image_id", "]", "=", "mapped_dices", "[", "1", ":", "]", "\n", "\n", "# Overwrite with so-far results", "\n", "save_all", "(", "results", ",", "per_view_results", ",", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict._merged_eval": [[276, 292], ["predict.evaluate", "dices[].mean", "print", "print", "mpunet.logging.log_results.save_all", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.evaluate", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.save_all"], ["", "def", "_merged_eval", "(", "image_id", ",", "pred", ",", "true", ",", "n_classes", ",", "results", ",", "\n", "per_view_results", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "# Calculate combined prediction dice", "\n", "dices", "=", "evaluate", "(", "pred", ",", "true", ",", "n_classes", ",", "ignore_zero", "=", "True", ")", "\n", "mean_dice", "=", "dices", "[", "~", "np", ".", "isnan", "(", "dices", ")", "]", ".", "mean", "(", ")", "\n", "per_view_results", "[", "\"MJ\"", "]", "[", "image_id", "]", "=", "dices", "\n", "\n", "print", "(", "\"Combined dices: \"", ",", "dices", ")", "\n", "print", "(", "\"Combined mean dice: \"", ",", "mean_dice", ")", "\n", "results", ".", "loc", "[", "image_id", ",", "\"MJ\"", "]", "=", "mean_dice", "\n", "\n", "# Overwrite with so-far results", "\n", "save_all", "(", "results", ",", "per_view_results", ",", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict._multi_view_predict_on": [[294, 347], ["get_voxel_grid_real_space", "numpy.empty", "print", "enumerate", "print", "seq.get_view_from", "predict_volume", "map_real_space_pred", "predict._per_view_evaluation", "len", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_voxel_grid_real_space", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.isotrophic_live_view_sequence_2d.IsotrophicLiveViewSequence2D.get_view_from", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.predict_volume", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.map_real_space_pred", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict._per_view_evaluation"], ["", "def", "_multi_view_predict_on", "(", "image_pair", ",", "seq", ",", "model", ",", "views", ",", "results", ",", "\n", "per_view_results", ",", "out_dir", ",", "args", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "from", "mpunet", ".", "utils", ".", "fusion", "import", "predict_volume", ",", "map_real_space_pred", "\n", "from", "mpunet", ".", "interpolation", ".", "sample_grid", "import", "get_voxel_grid_real_space", "\n", "\n", "# Get voxel grid in real space", "\n", "voxel_grid_real_space", "=", "get_voxel_grid_real_space", "(", "image_pair", ")", "\n", "\n", "# Prepare tensor to store combined prediction", "\n", "d", "=", "image_pair", ".", "image", ".", "shape", "[", ":", "-", "1", "]", "\n", "combined", "=", "np", ".", "empty", "(", "\n", "shape", "=", "(", "len", "(", "views", ")", ",", "d", "[", "0", "]", ",", "d", "[", "1", "]", ",", "d", "[", "2", "]", ",", "seq", ".", "n_classes", ")", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "print", "(", "\"Predicting on brain hyper-volume of shape:\"", ",", "combined", ".", "shape", ")", "\n", "\n", "# Predict for each view", "\n", "for", "n_view", ",", "view", "in", "enumerate", "(", "views", ")", ":", "\n", "        ", "print", "(", "\"\\n[*] (%i/%i) View: %s\"", "%", "(", "n_view", "+", "1", ",", "len", "(", "views", ")", ",", "view", ")", ")", "\n", "# for each view, predict on all voxels and map the predictions", "\n", "# back into the original coordinate system", "\n", "\n", "# Sample planes from the image at grid_real_space grid", "\n", "# in real space (scanner RAS) coordinates.", "\n", "X", ",", "y", ",", "grid", ",", "inv_basis", "=", "seq", ".", "get_view_from", "(", "image_pair", ",", "view", ",", "\n", "n_planes", "=", "\"same+20\"", ")", "\n", "\n", "# Predict on volume using model", "\n", "pred", "=", "predict_volume", "(", "model", ",", "X", ",", "axis", "=", "2", ",", "batch_size", "=", "seq", ".", "batch_size", ")", "\n", "\n", "# Map the real space coordiante predictions to nearest", "\n", "# real space coordinates defined on voxel grid", "\n", "mapped_pred", "=", "map_real_space_pred", "(", "pred", ",", "grid", ",", "inv_basis", ",", "\n", "voxel_grid_real_space", ",", "\n", "method", "=", "\"nearest\"", ")", "\n", "combined", "[", "n_view", "]", "=", "mapped_pred", "\n", "\n", "if", "not", "args", ".", "no_eval", ":", "\n", "            ", "_per_view_evaluation", "(", "image_id", "=", "image_pair", ".", "identifier", ",", "\n", "pred", "=", "pred", ",", "\n", "true", "=", "y", ",", "\n", "mapped_pred", "=", "mapped_pred", ",", "\n", "mapped_true", "=", "image_pair", ".", "labels", ",", "\n", "view", "=", "view", ",", "\n", "n_classes", "=", "seq", ".", "n_classes", ",", "\n", "results", "=", "results", ",", "\n", "per_view_results", "=", "per_view_results", ",", "\n", "out_dir", "=", "out_dir", ",", "\n", "args", "=", "args", ")", "\n", "", "", "return", "combined", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.merge_multi_view_preds": [[349, 367], ["mpunet.utils.utils.pred_to_class().astype", "print", "numpy.moveaxis", "multi_view_preds.reshape.reshape", "fm.predict", "np.sum.reshape", "print", "numpy.sum", "mpunet.utils.utils.pred_to_class", "np.sum.squeeze"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.pred_to_class"], ["", "def", "merge_multi_view_preds", "(", "multi_view_preds", ",", "fusion_model", ",", "args", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "fm", "=", "fusion_model", "\n", "if", "not", "args", ".", "sum_fusion", ":", "\n", "# Combine predictions across views using Fusion model", "\n", "        ", "print", "(", "\"\\nFusing views (fusion model)...\"", ")", "\n", "d", "=", "multi_view_preds", ".", "shape", "\n", "multi_view_preds", "=", "np", ".", "moveaxis", "(", "multi_view_preds", ",", "0", ",", "-", "2", ")", "\n", "multi_view_preds", "=", "multi_view_preds", ".", "reshape", "(", "(", "-", "1", ",", "fm", ".", "n_inputs", ",", "fm", ".", "n_classes", ")", ")", "\n", "merged", "=", "fm", ".", "predict", "(", "multi_view_preds", ",", "batch_size", "=", "10", "**", "4", ",", "verbose", "=", "1", ")", "\n", "merged", "=", "merged", ".", "reshape", "(", "(", "d", "[", "1", "]", ",", "d", "[", "2", "]", ",", "d", "[", "3", "]", ",", "fm", ".", "n_classes", ")", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"\\nFusion views (sum)...\"", ")", "\n", "merged", "=", "np", ".", "sum", "(", "multi_view_preds", ",", "axis", "=", "0", ")", "\n", "", "merged_map", "=", "pred_to_class", "(", "merged", ".", "squeeze", "(", ")", ",", "img_dims", "=", "3", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "merged", ",", "merged_map", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.run_predictions_and_eval": [[369, 427], ["image_pair_loader.set_scaler_and_bg_values", "get_sequence", "sorted", "len", "enumerate", "print", "hparams.get_from_anywhere", "hparams.get_from_anywhere", "get_sequence.image_pair_queue.get_image_by_id", "predict._multi_view_predict_on", "predict.merge_multi_view_preds", "print", "predict.save_nii_files", "predict._merged_eval"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.set_scaler_and_bg_values", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.utils.get_sequence", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_from_anywhere", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_from_anywhere", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_image_by_id", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict._multi_view_predict_on", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.merge_multi_view_preds", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.save_nii_files", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict._merged_eval"], ["", "def", "run_predictions_and_eval", "(", "image_pair_loader", ",", "image_pair_dict", ",", "model", ",", "\n", "fusion_model", ",", "views", ",", "hparams", ",", "args", ",", "results", ",", "\n", "per_view_results", ",", "out_dir", ",", "nii_res_dir", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "# Set scaler and bg values", "\n", "image_pair_loader", ".", "set_scaler_and_bg_values", "(", "\n", "bg_value", "=", "hparams", ".", "get_from_anywhere", "(", "'bg_value'", ")", ",", "\n", "scaler", "=", "hparams", ".", "get_from_anywhere", "(", "'scaler'", ")", ",", "\n", "compute_now", "=", "False", "\n", ")", "\n", "\n", "# Init LazyQueue and get its sequencer", "\n", "from", "mpunet", ".", "sequences", ".", "utils", "import", "get_sequence", "\n", "seq", "=", "get_sequence", "(", "data_queue", "=", "image_pair_loader", ",", "\n", "is_validation", "=", "True", ",", "\n", "views", "=", "views", ",", "\n", "**", "hparams", "[", "\"fit\"", "]", ",", "**", "hparams", "[", "\"build\"", "]", ")", "\n", "\n", "image_ids", "=", "sorted", "(", "image_pair_dict", ")", "\n", "n_images", "=", "len", "(", "image_ids", ")", "\n", "for", "n_image", ",", "image_id", "in", "enumerate", "(", "image_ids", ")", ":", "\n", "        ", "print", "(", "\"\\n[*] (%i/%s) Running on: %s\"", "%", "(", "n_image", "+", "1", ",", "n_images", ",", "image_id", ")", ")", "\n", "\n", "with", "seq", ".", "image_pair_queue", ".", "get_image_by_id", "(", "image_id", ")", "as", "image_pair", ":", "\n", "# Get prediction through all views", "\n", "            ", "multi_view_preds", "=", "_multi_view_predict_on", "(", "\n", "image_pair", "=", "image_pair", ",", "\n", "seq", "=", "seq", ",", "\n", "model", "=", "model", ",", "\n", "views", "=", "views", ",", "\n", "results", "=", "results", ",", "\n", "per_view_results", "=", "per_view_results", ",", "\n", "out_dir", "=", "out_dir", ",", "\n", "args", "=", "args", "\n", ")", "\n", "\n", "# Merge the multi view predictions into a final segmentation", "\n", "merged", ",", "merged_map", "=", "merge_multi_view_preds", "(", "multi_view_preds", ",", "\n", "fusion_model", ",", "args", ")", "\n", "if", "not", "args", ".", "no_eval", ":", "\n", "                ", "_merged_eval", "(", "\n", "image_id", "=", "image_id", ",", "\n", "pred", "=", "merged_map", ",", "\n", "true", "=", "image_pair", ".", "labels", ",", "\n", "n_classes", "=", "hparams", "[", "\"build\"", "]", "[", "\"n_classes\"", "]", ",", "\n", "results", "=", "results", ",", "\n", "per_view_results", "=", "per_view_results", ",", "\n", "out_dir", "=", "out_dir", "\n", ")", "\n", "\n", "# Save combined prediction volume as .nii file", "\n", "", "print", "(", "\"Saving .nii files...\"", ")", "\n", "save_nii_files", "(", "merged", "=", "merged_map", "if", "not", "args", ".", "no_argmax", "else", "merged", ",", "\n", "image_pair", "=", "image_pair", ",", "\n", "nii_res_dir", "=", "nii_res_dir", ",", "\n", "save_input_files", "=", "args", ".", "save_input_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.assert_args": [[429, 431], ["None"], "function", ["None"], ["", "", "", "def", "assert_args", "(", "args", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.entry_func": [[433, 500], ["get_argparser().parse_args", "predict.assert_args", "os.path.abspath", "os.path.abspath", "predict.validate_folders", "os.path.join", "mpunet.utils.utils.create_folders", "predict.load_hparams", "predict.get_image_pair_loader", "predict.set_gpu_vis", "predict.get_model", "predict.run_predictions_and_eval", "mpunet.utils.utils.await_PIDs", "numpy.load", "predict.get_results_dicts", "predict.get_fusion_model", "mpunet.logging.log_results.save_all", "predict.get_argparser", "vars", "vars", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.assert_args", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict_3D.validate_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.load_hparams", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.get_image_pair_loader", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.set_gpu_vis", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.get_model", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.run_predictions_and_eval", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.await_PIDs", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.get_results_dicts", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.get_fusion_model", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.save_all", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train_fusion.get_argparser"], ["", "def", "entry_func", "(", "args", "=", "None", ")", ":", "\n", "# Get command line arguments", "\n", "    ", "args", "=", "get_argparser", "(", ")", ".", "parse_args", "(", "args", ")", "\n", "assert_args", "(", "args", ")", "\n", "\n", "# Get most important paths", "\n", "project_dir", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "project_dir", ")", "\n", "out_dir", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "out_dir", ")", "\n", "\n", "# Check if valid dir structures", "\n", "validate_folders", "(", "project_dir", ",", "out_dir", ",", "\n", "overwrite", "=", "args", ".", "overwrite", ",", "\n", "_continue", "=", "vars", "(", "args", ")", "[", "\"continue\"", "]", ")", "\n", "nii_res_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"nii_files\"", ")", "\n", "create_folders", "(", "nii_res_dir", ",", "create_deep", "=", "True", ")", "\n", "\n", "# Get settings from YAML file", "\n", "hparams", "=", "load_hparams", "(", "project_dir", ")", "\n", "\n", "# Get dataset", "\n", "image_pair_loader", ",", "image_pair_dict", "=", "get_image_pair_loader", "(", "args", ",", "hparams", ",", "\n", "out_dir", ")", "\n", "\n", "# Wait for PID to terminate before continuing, if specified", "\n", "if", "args", ".", "wait_for", ":", "\n", "        ", "await_PIDs", "(", "args", ".", "wait_for", ",", "check_every", "=", "120", ")", "\n", "\n", "# Set GPU device", "\n", "", "set_gpu_vis", "(", "args", ")", "\n", "\n", "# Get views", "\n", "views", "=", "np", ".", "load", "(", "\"%s/views.npz\"", "%", "project_dir", ")", "[", "\"arr_0\"", "]", "\n", "del", "hparams", "[", "'fit'", "]", "[", "'views'", "]", "\n", "\n", "# Prepare result dicts", "\n", "results", ",", "per_view_results", "=", "None", ",", "None", "\n", "if", "not", "args", ".", "no_eval", ":", "\n", "        ", "results", ",", "per_view_results", "=", "get_results_dicts", "(", "out_dir", ",", "views", ",", "\n", "image_pair_dict", ",", "\n", "hparams", "[", "\"build\"", "]", "[", "\"n_classes\"", "]", ",", "\n", "vars", "(", "args", ")", "[", "\"continue\"", "]", ")", "\n", "\n", "# Get model and load weights, assign to one or more GPUs", "\n", "", "model", ",", "weights_name", "=", "get_model", "(", "project_dir", ",", "hparams", "[", "'build'", "]", ")", "\n", "fusion_model", "=", "None", "\n", "if", "not", "args", ".", "sum_fusion", ":", "\n", "        ", "fusion_model", "=", "get_fusion_model", "(", "n_views", "=", "len", "(", "views", ")", ",", "\n", "n_classes", "=", "hparams", "[", "\"build\"", "]", "[", "\"n_classes\"", "]", ",", "\n", "project_dir", "=", "project_dir", ",", "\n", "weights_name", "=", "weights_name", ")", "\n", "\n", "", "run_predictions_and_eval", "(", "\n", "image_pair_loader", "=", "image_pair_loader", ",", "\n", "image_pair_dict", "=", "image_pair_dict", ",", "\n", "model", "=", "model", ",", "\n", "fusion_model", "=", "fusion_model", ",", "\n", "views", "=", "views", ",", "\n", "hparams", "=", "hparams", ",", "\n", "args", "=", "args", ",", "\n", "results", "=", "results", ",", "\n", "per_view_results", "=", "per_view_results", ",", "\n", "out_dir", "=", "out_dir", ",", "\n", "nii_res_dir", "=", "nii_res_dir", "\n", ")", "\n", "if", "not", "args", ".", "no_eval", ":", "\n", "# Write final results", "\n", "        ", "save_all", "(", "results", ",", "per_view_results", ",", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict_3D.get_argparser": [[12, 40], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_argparser", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'Predict using a mpunet model.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--project_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"./\"", ",", "\n", "help", "=", "'Path to mpunet project folder'", ")", "\n", "parser", ".", "add_argument", "(", "\"-f\"", ",", "help", "=", "\"Predict on a single file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"-l\"", ",", "help", "=", "\"Optional single label file to use with -f\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Directory storing data. \"", "\n", "\"Must contain sub-folder 'images'\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--out_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"predictions\"", ",", "\n", "help", "=", "\"Output folder to store results\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_GPUs\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of GPUs to use for this job\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--overwrite\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Overwrite previous results at the output folder'", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_eval\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Perform no evaluation of the prediction performance. \"", "\n", "\"No label files loaded when this flag applies.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--strides\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Predict on strided overlapping boxes \"", "\n", "\"instead of only non-overlapping.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--extra\"", ",", "default", "=", "\"2x\"", ",", "\n", "help", "=", "\"Sample N extra patches to perform majority voting\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--force_GPU\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--save_only_pred\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Save only the predicted volume as .nii files (\"", "\n", "\"do not save image and labels)\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict_3D.validate_folders": [[42, 62], ["os.path.join", "os.path.exists", "print", "exit", "os.path.exists", "os.mkdir", "os.path.exists", "print", "exit"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "def", "validate_folders", "(", "base_dir", ",", "data_dir", ",", "out_dir", ",", "overwrite", ")", ":", "\n", "\n", "# Check base (model) dir contains required files", "\n", "    ", "must_exist", "=", "(", "\"train_hparams.yaml\"", ",", "\"model\"", ")", "\n", "for", "p", "in", "must_exist", ":", "\n", "        ", "p", "=", "os", ".", "path", ".", "join", "(", "base_dir", ",", "p", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ":", "\n", "            ", "from", "sys", "import", "exit", "\n", "print", "(", "\"[*] Invalid mpunet project folder: '%s'\"", "\n", "\"\\n    Needed file/folder '%s' not found.\"", "%", "(", "base_dir", ",", "p", ")", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# Check if output folder already exists", "\n", "", "", "if", "not", "overwrite", "and", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "from", "sys", "import", "exit", "\n", "print", "(", "\"[*] Output directory already exists at: '%s'\"", "\n", "\"\\n  Use --overwrite to overwrite\"", "%", "out_dir", ")", "\n", "exit", "(", "0", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict_3D.entry_func": [[64, 220], ["vars", "os.path.abspath", "YAMLHParams", "os.path.abspath", "predict_3D.validate_folders", "ImagePairLoader.set_scaler_and_bg_values", "get_sequence", "model_initializer", "get_best_model", "model_initializer.load_weights", "os.path.join", "create_folders", "sorted", "enumerate", "get_argparser().parse_args", "int", "os.path.join", "await_and_set_free_gpu", "set_gpu", "ImagePairLoader", "ImagePairLoader", "ImagePairLoader.add_image", "init_result_dict_3D", "save_all_3D", "print", "save_all_3D", "os.path.abspath", "bool", "ImagePair", "YAMLHParams.get_from_anywhere", "YAMLHParams.get_from_anywhere", "get_sequence.image_pair_queue.get_image_by_id", "predict_3D.get_argparser", "mode.lower", "pred_3D_iso", "print", "pred_to_class", "dice_all", "dices[].mean", "print", "print", "save_all_3D", "save_nii_files", "predict_3D_patches", "predict_3D_patches_binary", "len", "np.isnan"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict_3D.validate_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.set_scaler_and_bg_values", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.utils.get_sequence", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.model_init.model_initializer", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_best_model", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.await_and_set_free_gpu", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.set_gpu", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.add_image", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.init_result_dict_3D", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.save_all_3D", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.save_all_3D", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_from_anywhere", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_from_anywhere", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_image_by_id", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train_fusion.get_argparser", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.pred_3D_iso", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.pred_to_class", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.metrics.dice_all", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.save_all_3D", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.predict.save_nii_files", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.predict_3D_patches", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fuse_and_predict.predict_3D_patches_binary"], ["", "", "def", "entry_func", "(", "args", "=", "None", ")", ":", "\n", "\n", "# Get command line arguments", "\n", "    ", "args", "=", "vars", "(", "get_argparser", "(", ")", ".", "parse_args", "(", "args", ")", ")", "\n", "base_dir", "=", "os", ".", "path", ".", "abspath", "(", "args", "[", "\"project_dir\"", "]", ")", "\n", "_file", "=", "args", "[", "\"f\"", "]", "\n", "label", "=", "args", "[", "\"l\"", "]", "\n", "N_extra", "=", "args", "[", "\"extra\"", "]", "\n", "try", ":", "\n", "        ", "N_extra", "=", "int", "(", "N_extra", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "pass", "\n", "\n", "# Get settings from YAML file", "\n", "", "from", "mpunet", ".", "hyperparameters", "import", "YAMLHParams", "\n", "hparams", "=", "YAMLHParams", "(", "os", ".", "path", ".", "join", "(", "base_dir", ",", "\"train_hparams.yaml\"", ")", ")", "\n", "\n", "# Set strides", "\n", "hparams", "[", "\"fit\"", "]", "[", "\"strides\"", "]", "=", "args", "[", "\"strides\"", "]", "\n", "\n", "if", "not", "_file", ":", "\n", "        ", "try", ":", "\n", "# Data specified from command line?", "\n", "            ", "data_dir", "=", "os", ".", "path", ".", "abspath", "(", "args", "[", "\"data_dir\"", "]", ")", "\n", "\n", "# Set with default sub dirs", "\n", "hparams", "[", "\"test_data\"", "]", "=", "{", "\"base_dir\"", ":", "\n", "data_dir", ",", "\"img_subdir\"", ":", "\"images\"", ",", "\n", "\"label_subdir\"", ":", "\"labels\"", "}", "\n", "", "except", "(", "AttributeError", ",", "TypeError", ")", ":", "\n", "            ", "data_dir", "=", "hparams", "[", "\"test_data\"", "]", "[", "\"base_dir\"", "]", "\n", "", "", "else", ":", "\n", "        ", "data_dir", "=", "False", "\n", "", "out_dir", "=", "os", ".", "path", ".", "abspath", "(", "args", "[", "\"out_dir\"", "]", ")", "\n", "overwrite", "=", "args", "[", "\"overwrite\"", "]", "\n", "predict_mode", "=", "args", "[", "\"no_eval\"", "]", "\n", "save_only_pred", "=", "args", "[", "\"save_only_pred\"", "]", "\n", "\n", "# Check if valid dir structures", "\n", "validate_folders", "(", "base_dir", ",", "data_dir", ",", "out_dir", ",", "overwrite", ")", "\n", "\n", "# Import all needed modules (folder is valid at this point)", "\n", "import", "numpy", "as", "np", "\n", "from", "mpunet", ".", "image", "import", "ImagePairLoader", ",", "ImagePair", "\n", "from", "mpunet", ".", "utils", "import", "get_best_model", ",", "create_folders", ",", "pred_to_class", ",", "await_and_set_free_gpu", ",", "set_gpu", "\n", "from", "mpunet", ".", "utils", ".", "fusion", "import", "predict_3D_patches", ",", "predict_3D_patches_binary", ",", "pred_3D_iso", "\n", "from", "mpunet", ".", "logging", "import", "init_result_dict_3D", ",", "save_all_3D", "\n", "from", "mpunet", ".", "evaluate", "import", "dice_all", "\n", "from", "mpunet", ".", "bin", ".", "predict", "import", "save_nii_files", "\n", "\n", "# Fetch GPU(s)", "\n", "num_GPUs", "=", "args", "[", "\"num_GPUs\"", "]", "\n", "force_gpu", "=", "args", "[", "\"force_GPU\"", "]", "\n", "# Wait for free GPU", "\n", "if", "force_gpu", "==", "-", "1", ":", "\n", "        ", "await_and_set_free_gpu", "(", "N", "=", "num_GPUs", ",", "sleep_seconds", "=", "240", ")", "\n", "", "else", ":", "\n", "        ", "set_gpu", "(", "force_gpu", ")", "\n", "\n", "# Read settings from the project hyperparameter file", "\n", "", "dim", "=", "hparams", "[", "\"build\"", "]", "[", "\"dim\"", "]", "\n", "n_classes", "=", "hparams", "[", "\"build\"", "]", "[", "\"n_classes\"", "]", "\n", "mode", "=", "hparams", "[", "\"fit\"", "]", "[", "\"intrp_style\"", "]", "\n", "\n", "# Set ImagePairLoader object", "\n", "if", "not", "_file", ":", "\n", "        ", "image_pair_loader", "=", "ImagePairLoader", "(", "predict_mode", "=", "predict_mode", ",", "**", "hparams", "[", "\"test_data\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "predict_mode", "=", "not", "bool", "(", "label", ")", "\n", "image_pair_loader", "=", "ImagePairLoader", "(", "predict_mode", "=", "predict_mode", ",", "\n", "initialize_empty", "=", "True", ")", "\n", "image_pair_loader", ".", "add_image", "(", "ImagePair", "(", "_file", ",", "label", ")", ")", "\n", "", "all_images", "=", "{", "image", ".", "identifier", ":", "image", "for", "image", "in", "image_pair_loader", ".", "images", "}", "\n", "\n", "# Set scaler and bg values", "\n", "image_pair_loader", ".", "set_scaler_and_bg_values", "(", "\n", "bg_value", "=", "hparams", ".", "get_from_anywhere", "(", "'bg_value'", ")", ",", "\n", "scaler", "=", "hparams", ".", "get_from_anywhere", "(", "'scaler'", ")", ",", "\n", "compute_now", "=", "False", "\n", ")", "\n", "\n", "# Init LazyQueue and get its sequencer", "\n", "from", "mpunet", ".", "sequences", ".", "utils", "import", "get_sequence", "\n", "seq", "=", "get_sequence", "(", "data_queue", "=", "image_pair_loader", ",", "\n", "is_validation", "=", "True", ",", "\n", "**", "hparams", "[", "\"fit\"", "]", ",", "**", "hparams", "[", "\"build\"", "]", ")", "\n", "\n", "\"\"\" Define UNet model \"\"\"", "\n", "from", "mpunet", ".", "models", "import", "model_initializer", "\n", "hparams", "[", "\"build\"", "]", "[", "\"batch_size\"", "]", "=", "1", "\n", "unet", "=", "model_initializer", "(", "hparams", ",", "False", ",", "base_dir", ")", "\n", "model_path", "=", "get_best_model", "(", "base_dir", "+", "\"/model\"", ")", "\n", "unet", ".", "load_weights", "(", "model_path", ")", "\n", "\n", "# Evaluate?", "\n", "if", "not", "predict_mode", ":", "\n", "# Prepare dictionary to store results in pd df", "\n", "        ", "results", ",", "detailed_res", "=", "init_result_dict_3D", "(", "all_images", ",", "n_classes", ")", "\n", "\n", "# Save to check correct format", "\n", "save_all_3D", "(", "results", ",", "detailed_res", ",", "out_dir", ")", "\n", "\n", "# Define result paths", "\n", "", "nii_res_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"nii_files\"", ")", "\n", "create_folders", "(", "nii_res_dir", ")", "\n", "\n", "image_ids", "=", "sorted", "(", "all_images", ")", "\n", "for", "n_image", ",", "image_id", "in", "enumerate", "(", "image_ids", ")", ":", "\n", "        ", "print", "(", "\"\\n[*] Running on: %s\"", "%", "image_id", ")", "\n", "\n", "with", "seq", ".", "image_pair_queue", ".", "get_image_by_id", "(", "image_id", ")", "as", "image_pair", ":", "\n", "            ", "if", "mode", ".", "lower", "(", ")", "==", "\"iso_live_3d\"", ":", "\n", "                ", "pred", "=", "pred_3D_iso", "(", "model", "=", "unet", ",", "\n", "sequence", "=", "seq", ",", "\n", "image", "=", "image_pair", ",", "\n", "extra_boxes", "=", "N_extra", ",", "\n", "min_coverage", "=", "None", ")", "\n", "", "else", ":", "\n", "# Predict on volume using model", "\n", "                ", "if", "n_classes", ">", "1", ":", "\n", "                    ", "pred", "=", "predict_3D_patches", "(", "model", "=", "unet", ",", "\n", "patches", "=", "seq", ",", "\n", "image", "=", "image_pair", ",", "\n", "N_extra", "=", "N_extra", ")", "\n", "", "else", ":", "\n", "                    ", "pred", "=", "predict_3D_patches_binary", "(", "model", "=", "unet", ",", "\n", "patches", "=", "seq", ",", "\n", "image_id", "=", "image_id", ",", "\n", "N_extra", "=", "N_extra", ")", "\n", "\n", "", "", "if", "not", "predict_mode", ":", "\n", "# Get patches for the current image", "\n", "                ", "y", "=", "image_pair", ".", "labels", "\n", "\n", "# Calculate dice score", "\n", "print", "(", "\"Mean dice: \"", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "p", "=", "pred_to_class", "(", "pred", ",", "img_dims", "=", "3", ",", "has_batch_dim", "=", "False", ")", "\n", "dices", "=", "dice_all", "(", "y", ",", "p", ",", "n_classes", "=", "n_classes", ",", "ignore_zero", "=", "True", ")", "\n", "mean_dice", "=", "dices", "[", "~", "np", ".", "isnan", "(", "dices", ")", "]", ".", "mean", "(", ")", "\n", "print", "(", "\"Dices: \"", ",", "dices", ")", "\n", "print", "(", "\"%s (n=%i)\"", "%", "(", "mean_dice", ",", "len", "(", "dices", ")", ")", ")", "\n", "\n", "# Add to results", "\n", "results", "[", "image_id", "]", "=", "[", "mean_dice", "]", "\n", "detailed_res", "[", "image_id", "]", "=", "dices", "\n", "\n", "# Overwrite with so-far results", "\n", "save_all_3D", "(", "results", ",", "detailed_res", ",", "out_dir", ")", "\n", "\n", "# Save results", "\n", "save_nii_files", "(", "p", ",", "image_pair", ",", "nii_res_dir", ",", "save_only_pred", ")", "\n", "\n", "", "", "", "if", "not", "predict_mode", ":", "\n", "# Write final results", "\n", "        ", "save_all_3D", "(", "results", ",", "detailed_res", ",", "out_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.get_argparser": [[18, 74], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_argparser", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'Fit a mpunet model defined '", "\n", "'in a project folder. '", "\n", "'Invoke \"init_project\" to start a '", "\n", "'new project.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--project_dir\"", ",", "type", "=", "str", ",", "default", "=", "'./'", ",", "\n", "help", "=", "\"Path to a mpunet project directory. \"", "\n", "\"Defaults to the current directory.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_GPUs\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of GPUs to use for this job (default=1)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--force_GPU\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "\n", "help", "=", "\"Manually set the CUDA_VISIBLE_DEVICES env \"", "\n", "\"variable to this value \"", "\n", "\"(force a specific set of GPUs to be used)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--continue_training\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Continue the last training session\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--overwrite\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Overwrite previous training session at the '", "\n", "'project path'", ")", "\n", "parser", ".", "add_argument", "(", "\"--just_one\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"For testing purposes, run only on the first \"", "\n", "\"training and validation samples.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_val\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Do not perform validation (must be set if no \"", "\n", "\"validation set exists)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_images\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Do not save sample images during training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--debug\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Set tfbg CLI wrapper on the session object\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--wait_for\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "\n", "help", "=", "\"Wait for PID to terminate before starting the \"", "\n", "\"training process.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_images_per_epoch\"", ",", "type", "=", "int", ",", "default", "=", "2500", ",", "\n", "help", "=", "\"Number of training images to sample in each \"", "\n", "\"epoch\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--val_images_per_epoch\"", ",", "type", "=", "int", ",", "default", "=", "3500", ",", "\n", "help", "=", "\"Number of training images to sample in each \"", "\n", "\"epoch\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_loaded_images\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Set a maximum number of (training) images to \"", "\n", "\"keep loaded in memory at a given time. Images \"", "\n", "\"will be cycled every '--num_access slices.'. \"", "\n", "\"Default=None (all loaded).\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Overwrite the number of epochs as specified in \"", "\n", "\"the hyperparameters file\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_access\"", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "\"Only effective with --max_loaded_images set. \"", "\n", "\"Sets the number of times an images stored in \"", "\n", "\"memory may be accessed (e.g. for sampling an \"", "\n", "\"image slice) before it is replaced by another \"", "\n", "\"image. Higher values makes the data loader \"", "\n", "\"less likely to block. Lower values ensures that \"", "\n", "\"images are sampled across all images of the \"", "\n", "\"dataset. Default=50.\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.validate_project_dir": [[76, 85], ["RuntimeError", "os.path.exists", "os.path.exists", "os.path.join"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "def", "validate_project_dir", "(", "project_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "project_dir", ")", "or", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "project_dir", ",", "\"train_hparams.yaml\"", ")", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"The script was launched from directory:\\n'%s'\"", "\n", "\"\\n... but this is not a valid project folder.\\n\\n\"", "\n", "\"* Make sure to launch the script from within a \"", "\n", "\"MultiPlanarNet project directory\\n\"", "\n", "\"* Make sure that the directory contains a \"", "\n", "\"'train_hparams.yaml' file.\"", "%", "project_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.validate_args": [[87, 108], ["ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "function", ["None"], ["", "", "def", "validate_args", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Checks that the passed commandline arguments are valid\n\n    Args:\n        args: argparse arguments\n    \"\"\"", "\n", "if", "args", ".", "continue_training", "and", "args", ".", "overwrite", ":", "\n", "        ", "raise", "ValueError", "(", "\"Cannot both continue training and overwrite the \"", "\n", "\"previous training session. Remove the --overwrite \"", "\n", "\"flag if trying to continue a previous training \"", "\n", "\"session.\"", ")", "\n", "", "if", "args", ".", "train_images_per_epoch", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"train_images_per_epoch must be a positive integer\"", ")", "\n", "", "if", "args", ".", "val_images_per_epoch", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"val_images_per_epoch must be a positive integer. \"", "\n", "\"Use --no_val instead.\"", ")", "\n", "", "if", "args", ".", "force_GPU", "and", "args", ".", "num_GPUs", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"Should not specify both --force_GPU and --num_GPUs\"", ")", "\n", "", "if", "args", ".", "num_GPUs", "<", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"num_GPUs must be a positive integer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.validate_hparams": [[110, 135], ["hparams[].get", "ValueError", "ValueError", "bool", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["", "", "def", "validate_hparams", "(", "hparams", ")", ":", "\n", "    ", "\"\"\"\n    Limited number of checks performed on the validity of the hyperparameters.\n    The file is generally considered to follow the semantics of the\n    mpunet.bin.defaults hyperparameter files.\n\n    Args:\n        hparams: A YAMLHParams object\n    \"\"\"", "\n", "# Tests for valid hparams", "\n", "if", "hparams", "[", "\"fit\"", "]", ".", "get", "(", "\"class_weights\"", ")", "and", "hparams", "[", "\"fit\"", "]", "[", "\"loss\"", "]", "not", "in", "(", "\"SparseFocalLoss\"", ",", ")", ":", "\n", "# Only currently supported losses", "\n", "        ", "raise", "ValueError", "(", "\"Invalid loss function '{}' used with the \"", "\n", "\"'class_weights' \"", "\n", "\"parameter\"", ".", "format", "(", "hparams", "[", "\"fit\"", "]", "[", "\"loss\"", "]", ")", ")", "\n", "", "if", "hparams", "[", "\"fit\"", "]", "[", "\"loss\"", "]", "==", "\"WeightedCrossEntropyWithLogits\"", ":", "\n", "        ", "if", "not", "bool", "(", "hparams", "[", "\"fit\"", "]", "[", "\"class_weights\"", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Must specify 'class_weights' argument with loss\"", "\n", "\"'WeightedCrossEntropyWithLogits'.\"", ")", "\n", "", "if", "not", "hparams", "[", "\"build\"", "]", "[", "\"out_activation\"", "]", "==", "\"linear\"", ":", "\n", "            ", "raise", "ValueError", "(", "\"Must use out_activation: linear parameter with \"", "\n", "\"loss 'WeightedCrossEntropyWithLogits'\"", ")", "\n", "", "", "if", "not", "hparams", "[", "\"train_data\"", "]", "[", "\"base_dir\"", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"No training data folder specified in parameter file.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.remove_previous_session": [[137, 157], ["filter", "os.path.join", "os.path.isdir", "shutil.rmtree", "os.remove"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "", "def", "remove_previous_session", "(", "project_folder", ")", ":", "\n", "    ", "\"\"\"\n    Deletes various mpunet project folders and files from\n    [project_folder].\n\n    Args:\n        project_folder: A path to a mpunet project folder\n    \"\"\"", "\n", "import", "shutil", "\n", "# Remove old files and directories of logs, images etc if existing", "\n", "paths", "=", "[", "os", ".", "path", ".", "join", "(", "project_folder", ",", "p", ")", "for", "p", "in", "(", "\"images\"", ",", "\n", "\"logs\"", ",", "\n", "\"tensorboard\"", ",", "\n", "\"views.npz\"", ",", "\n", "\"views.png\"", ")", "]", "\n", "for", "p", "in", "filter", "(", "os", ".", "path", ".", "exists", ",", "paths", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "p", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "p", ")", "\n", "", "else", ":", "\n", "            ", "os", ".", "remove", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.get_logger": [[159, 183], ["Logger", "RuntimeError"], "function", ["None"], ["", "", "", "def", "get_logger", "(", "project_dir", ",", "overwrite_existing", ")", ":", "\n", "    ", "\"\"\"\n    Initialises and returns a Logger object for a given project directory.\n    If a logfile already exists at the specified location, it will be\n    overwritten if continue_training == True, otherwise raises RuntimeError\n\n    Args:\n        project_dir: Path to a mpunet project folder\n        overwrite_existing: Whether to overwrite existing logfile in project_dir\n\n    Returns:\n        A mpunet Logger object initialized in project_dir\n    \"\"\"", "\n", "# Define Logger object", "\n", "from", "mpunet", ".", "logging", "import", "Logger", "\n", "try", ":", "\n", "        ", "logger", "=", "Logger", "(", "base_path", "=", "project_dir", ",", "\n", "print_to_screen", "=", "True", ",", "\n", "overwrite_existing", "=", "overwrite_existing", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"[*] A training session at '%s' already exists.\"", "\n", "\"\\n    Use the --overwrite flag to \"", "\n", "\"overwrite.\"", "%", "project_dir", ")", "from", "e", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.get_gpu_monitor": [[185, 202], ["GPUMonitor"], "function", ["None"], ["", "def", "get_gpu_monitor", "(", "num_GPUs", ",", "logger", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        num_GPUs: Number of GPUs to train on\n        logger: A mpunet logger object that will be passed to\n                the GPUMonitor\n\n    Returns:\n        If num_GPUs >= 0, returns a GPUMonitor object, otherwise returns None\n    \"\"\"", "\n", "if", "num_GPUs", ">=", "0", ":", "\n", "# Initialize GPUMonitor in separate fork now before memory builds up", "\n", "        ", "from", "mpunet", ".", "utils", ".", "system", "import", "GPUMonitor", "\n", "gpu_mon", "=", "GPUMonitor", "(", ")", "\n", "", "else", ":", "\n", "        ", "gpu_mon", "=", "None", "\n", "", "return", "gpu_mon", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.set_gpu": [[204, 229], ["gpu_mon.stop", "gpu_mon.await_and_set_free_GPU", "len", "args.force_GPU.split"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.stop", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.system.GPUMonitor.await_and_set_free_GPU"], ["", "def", "set_gpu", "(", "gpu_mon", ",", "args", ")", ":", "\n", "    ", "\"\"\"\n    Sets the GPU visibility based on the passed arguments. Takes an already\n    initialized GPUMonitor object. Sets GPUs according to args.force_GPU, if\n    specified, otherwise sets first args.num_GPUs free GPUs on the system.\n\n    Stops the GPUMonitor process once GPUs have been set\n    If gpu_mon is None, this function does nothing\n\n    Args:\n        gpu_mon: An initialized GPUMonitor object or None\n        args: argparse arguments\n\n    Returns: The number of GPUs that was actually set (different from\n    args.num_GPUs if args.force_GPU is set to more than 1 GPU)\n    \"\"\"", "\n", "num_GPUs", "=", "args", ".", "num_GPUs", "\n", "if", "gpu_mon", "is", "not", "None", ":", "\n", "        ", "if", "not", "args", ".", "force_GPU", ":", "\n", "            ", "gpu_mon", ".", "await_and_set_free_GPU", "(", "N", "=", "num_GPUs", ",", "sleep_seconds", "=", "120", ")", "\n", "", "else", ":", "\n", "            ", "gpu_mon", ".", "set_GPUs", "=", "args", ".", "force_GPU", "\n", "num_GPUs", "=", "len", "(", "args", ".", "force_GPU", ".", "split", "(", "\",\"", ")", ")", "\n", "", "gpu_mon", ".", "stop", "(", ")", "\n", "", "return", "num_GPUs", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.get_data_sequences": [[231, 262], ["get_preprocessing_func", "get_preprocessing_func.", "hparams[].get"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.__init__.get_preprocessing_func", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["", "def", "get_data_sequences", "(", "project_dir", ",", "hparams", ",", "logger", ",", "args", ")", ":", "\n", "    ", "\"\"\"\n    Loads training and validation data as specified in the hyperparameter file.\n    Returns a batch sequencer object for each dataset, not the  ImagePairLoader\n    dataset itself. The preprocessing function may make changes to the hparams\n    dictionary.\n\n    Args:\n        project_dir: A path to a mpunet project\n        hparams: A YAMLHParams object\n        logger: A mpunet logging object\n        args: argparse arguments\n\n    Returns:\n        train: A batch sequencer object for the training data\n        val: A batch sequencer object for the validation data,\n             or None if --no_val was specified\n        hparams: The YAMLHParams object\n    \"\"\"", "\n", "from", "mpunet", ".", "preprocessing", "import", "get_preprocessing_func", "\n", "func", "=", "get_preprocessing_func", "(", "hparams", "[", "\"build\"", "]", ".", "get", "(", "\"model_class_name\"", ")", ")", "\n", "hparams", "[", "'fit'", "]", "[", "'flatten_y'", "]", "=", "True", "\n", "hparams", "[", "'fit'", "]", "[", "'max_loaded'", "]", "=", "args", ".", "max_loaded_images", "\n", "hparams", "[", "'fit'", "]", "[", "'num_access'", "]", "=", "args", ".", "num_access", "\n", "train", ",", "val", ",", "hparams", "=", "func", "(", "hparams", "=", "hparams", ",", "\n", "logger", "=", "logger", ",", "\n", "just_one", "=", "args", ".", "just_one", ",", "\n", "no_val", "=", "args", ".", "no_val", ",", "\n", "continue_training", "=", "args", ".", "continue_training", ",", "\n", "base_path", "=", "project_dir", ")", "\n", "return", "train", ",", "val", ",", "hparams", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.get_model": [[264, 301], ["model_initializer", "hparams[].get", "set_bias_weights_on_all_outputs"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.model_init.model_initializer", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.set_bias_weights_on_all_outputs"], ["", "def", "get_model", "(", "project_dir", ",", "train_seq", ",", "hparams", ",", "logger", ",", "args", ")", ":", "\n", "    ", "\"\"\"\n    Initializes a tf.keras Model from mpunet.models as specified in\n    hparams['build']. If args.continue_training, the best previous model stored\n    in [project_dir]/models will be loaded.\n\n    If hparams[\"build\"][\"biased_output_layer\"] is True, sets the bias weights\n    on the final conv. layer so that a zero-input gives an output of class\n    probabilities equal to the class frequencies of the training set.\n\n    Args:\n        project_dir: A path to a mpunet project folder\n        train_seq: A mpunet.sequences object for the training data\n        hparams: A mpunet YAMLHParams object\n        logger: A mpunet logging object\n        args: argparse arguments\n\n    Returns:\n        model: The model to fit\n        org_model: The original, non-GPU-distributed model\n                   (Same as model if num_GPUs==1)\n    \"\"\"", "\n", "from", "mpunet", ".", "models", "import", "model_initializer", "\n", "# Build new model (or continue training an existing one)", "\n", "hparams", "[", "\"build\"", "]", "[", "'flatten_output'", "]", "=", "True", "\n", "model", "=", "model_initializer", "(", "hparams", "=", "hparams", ",", "\n", "continue_training", "=", "args", ".", "continue_training", ",", "\n", "project_dir", "=", "project_dir", ",", "\n", "logger", "=", "logger", ")", "\n", "# Initialize weights in final layer?", "\n", "if", "not", "args", ".", "continue_training", "and", "hparams", "[", "\"build\"", "]", ".", "get", "(", "\"biased_output_layer\"", ")", ":", "\n", "        ", "from", "mpunet", ".", "utils", ".", "utils", "import", "set_bias_weights_on_all_outputs", "\n", "set_bias_weights_on_all_outputs", "(", "model", ",", "\n", "train_seq", ".", "image_pair_queue", ",", "\n", "hparams", ",", "\n", "logger", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.save_final_weights": [[303, 318], ["model.save_weights", "os.path.exists", "os.mkdir", "logger"], "function", ["None"], ["", "def", "save_final_weights", "(", "model", ",", "project_dir", ",", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Saves the weights of 'model' to [project_dir]/model/model_weights.h5\n\n    Args:\n        model: A tf.keras Model object\n        project_dir: A path to a mpunet project\n        logger: mpunet logging object, or None\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"%s/model\"", "%", "project_dir", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "\"%s/model\"", "%", "project_dir", ")", "\n", "", "model_path", "=", "\"%s/model/model_weights.h5\"", "%", "project_dir", "\n", "if", "logger", ":", "\n", "        ", "logger", "(", "\"Saving current model to: %s\"", "%", "model_path", ")", "\n", "", "model", ".", "save_weights", "(", "model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.run": [[320, 377], ["YAMLHParams", "train.validate_hparams", "train.get_data_sequences", "train.set_gpu", "await_PIDs", "tf.distribute.MirroredStrategy().scope", "train.get_model", "Trainer", "Trainer.compile_model", "K.set_session", "Trainer.fit", "train.save_final_weights", "tfdbg.LocalCLIDebugWrapperSession", "gpu_mon.stop", "tf.distribute.MirroredStrategy", "hparams[].get", "K.get_session"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.validate_hparams", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.get_data_sequences", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.set_gpu", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.await_PIDs", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.get_model", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.trainer.Trainer.compile_model", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.trainer.Trainer.fit", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.save_final_weights", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.stop", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["", "def", "run", "(", "project_dir", ",", "gpu_mon", ",", "logger", ",", "args", ")", ":", "\n", "    ", "\"\"\"\n    Runs training of a model in a mpunet project directory.\n\n    Args:\n        project_dir: A path to a mpunet project\n        gpu_mon: An initialized GPUMonitor object\n        logger: A mpunet logging object\n        args: argparse arguments\n    \"\"\"", "\n", "# Read in hyperparameters from YAML file", "\n", "from", "mpunet", ".", "hyperparameters", "import", "YAMLHParams", "\n", "hparams", "=", "YAMLHParams", "(", "project_dir", "+", "\"/train_hparams.yaml\"", ",", "logger", "=", "logger", ")", "\n", "validate_hparams", "(", "hparams", ")", "\n", "\n", "# Wait for PID to terminate before continuing?", "\n", "if", "args", ".", "wait_for", ":", "\n", "        ", "from", "mpunet", ".", "utils", "import", "await_PIDs", "\n", "await_PIDs", "(", "args", ".", "wait_for", ")", "\n", "\n", "# Prepare sequence generators and potential model specific hparam changes", "\n", "", "train", ",", "val", ",", "hparams", "=", "get_data_sequences", "(", "project_dir", "=", "project_dir", ",", "\n", "hparams", "=", "hparams", ",", "\n", "logger", "=", "logger", ",", "\n", "args", "=", "args", ")", "\n", "\n", "# Set GPU visibility and create model with MirroredStrategy", "\n", "set_gpu", "(", "gpu_mon", ",", "args", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "with", "tf", ".", "distribute", ".", "MirroredStrategy", "(", ")", ".", "scope", "(", ")", ":", "\n", "        ", "model", "=", "get_model", "(", "project_dir", "=", "project_dir", ",", "train_seq", "=", "train", ",", "\n", "hparams", "=", "hparams", ",", "logger", "=", "logger", ",", "args", "=", "args", ")", "\n", "\n", "# Get trainer and compile model", "\n", "from", "mpunet", ".", "train", "import", "Trainer", "\n", "trainer", "=", "Trainer", "(", "model", ",", "logger", "=", "logger", ")", "\n", "trainer", ".", "compile_model", "(", "n_classes", "=", "hparams", "[", "\"build\"", "]", ".", "get", "(", "\"n_classes\"", ")", ",", "\n", "reduction", "=", "tf", ".", "keras", ".", "losses", ".", "Reduction", ".", "NONE", ",", "\n", "**", "hparams", "[", "\"fit\"", "]", ")", "\n", "\n", "# Debug mode?", "\n", "", "if", "args", ".", "debug", ":", "\n", "        ", "from", "tensorflow", ".", "python", "import", "debug", "as", "tfdbg", "\n", "from", "tensorflow", ".", "keras", "import", "backend", "as", "K", "\n", "K", ".", "set_session", "(", "tfdbg", ".", "LocalCLIDebugWrapperSession", "(", "K", ".", "get_session", "(", ")", ")", ")", "\n", "\n", "# Fit the model", "\n", "", "hparams", "[", "\"fit\"", "]", "[", "\"n_epochs\"", "]", "=", "args", ".", "epochs", "or", "hparams", "[", "\"fit\"", "]", "[", "\"n_epochs\"", "]", "\n", "try", ":", "\n", "        ", "_", "=", "trainer", ".", "fit", "(", "train", "=", "train", ",", "val", "=", "val", ",", "\n", "train_im_per_epoch", "=", "args", ".", "train_images_per_epoch", ",", "\n", "val_im_per_epoch", "=", "args", ".", "val_images_per_epoch", ",", "\n", "hparams", "=", "hparams", ",", "no_im", "=", "args", ".", "no_images", ",", "**", "hparams", "[", "\"fit\"", "]", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "gpu_mon", ".", "stop", "(", ")", "\n", "", "finally", ":", "\n", "        ", "save_final_weights", "(", "model", ",", "project_dir", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.entry_func": [[379, 417], ["get_argparser().parse_args", "train.validate_args", "os.path.abspath", "train.validate_project_dir", "os.chdir", "train.get_logger", "get_logger.", "train.get_gpu_monitor", "train.remove_previous_session", "train.run", "train.get_argparser", "get_gpu_monitor.stop"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.validate_args", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.validate_project_dir", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.get_logger", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.get_gpu_monitor", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.remove_previous_session", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.run", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train_fusion.get_argparser", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.stop"], ["", "", "def", "entry_func", "(", "args", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Function called from mp to init training\n    1) Parses command-line arguments\n    2) Validation command-line arguments\n    3) Checks and potentially deletes a preious version of the project folder\n    4) Initializes a logger and a GPUMonitor object\n    5) Calls run() to start training\n\n    Args:\n        args: None or arguments passed from mp\n    \"\"\"", "\n", "# Get and check args", "\n", "args", "=", "get_argparser", "(", ")", ".", "parse_args", "(", "args", ")", "\n", "validate_args", "(", "args", ")", "\n", "\n", "# Check for project dir", "\n", "project_dir", "=", "os", ".", "path", ".", "abspath", "(", "args", ".", "project_dir", ")", "\n", "validate_project_dir", "(", "project_dir", ")", "\n", "os", ".", "chdir", "(", "project_dir", ")", "\n", "\n", "# Get project folder and remove previous session if --overwrite", "\n", "if", "args", ".", "overwrite", ":", "\n", "        ", "remove_previous_session", "(", "project_dir", ")", "\n", "\n", "# Get logger object. Overwrites previous logfile if args.continue_training", "\n", "", "logger", "=", "get_logger", "(", "project_dir", ",", "args", ".", "continue_training", ")", "\n", "logger", "(", "\"Fitting model in path:\\n%s\"", "%", "project_dir", ")", "\n", "\n", "# Start GPU monitor process, if num_GPUs > 0", "\n", "gpu_mon", "=", "get_gpu_monitor", "(", "args", ".", "num_GPUs", ",", "logger", ")", "\n", "\n", "try", ":", "\n", "        ", "run", "(", "project_dir", "=", "project_dir", ",", "gpu_mon", "=", "gpu_mon", ",", "logger", "=", "logger", ",", "args", "=", "args", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "if", "gpu_mon", "is", "not", "None", ":", "\n", "            ", "gpu_mon", ".", "stop", "(", ")", "\n", "", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data.get_argparser": [[10, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_argparser", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'Create a toy dataset - Useful '", "\n", "'for testing purposes'", ")", "\n", "parser", ".", "add_argument", "(", "\"--out_dir\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Path to a dir in which the toy data will be \"", "\n", "\"stored. Must be a non-existing or empty dir.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--N\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "required", "=", "False", ",", "\n", "help", "=", "'The number of train, val and test images to '", "\n", "'create.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--image_size\"", ",", "type", "=", "int", ",", "default", "=", "128", ",", "\n", "help", "=", "\"Voxel size of image.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--N_train\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "required", "=", "False", ",", "\n", "help", "=", "'The number of train images to create. '", "\n", "'Overrides the --N flag.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--N_val\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "required", "=", "False", ",", "\n", "help", "=", "'The number of val images to create. '", "\n", "'Overrides the --N flag.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--N_test\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "required", "=", "False", ",", "\n", "help", "=", "'The number of test images to create. '", "\n", "'Overrides the --N flag.'", ")", "\n", "parser", ".", "add_argument", "(", "\"--image_subdir\"", ",", "type", "=", "str", ",", "default", "=", "\"images\"", ",", "\n", "help", "=", "\"Optional name of subdir to store image files\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--label_subdir\"", ",", "type", "=", "str", ",", "default", "=", "\"labels\"", ",", "\n", "help", "=", "\"Optional name of subdir to store label files\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"Use a specific seed for random number \"", "\n", "\"generation. Useful for debugging purposes.\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data._elastic_deform": [[40, 48], ["scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand"], "function", ["None"], ["", "def", "_elastic_deform", "(", "xx", ",", "yy", ",", "zz", ",", "sigma", ",", "alpha", ")", ":", "\n", "    ", "dx", "=", "gaussian_filter", "(", "(", "np", ".", "random", ".", "rand", "(", "*", "xx", ".", "shape", ")", "*", "2", "-", "1", ")", ",", "sigma", ",", "\n", "mode", "=", "\"constant\"", ",", "cval", "=", "0.", ")", "*", "alpha", "\n", "dy", "=", "gaussian_filter", "(", "(", "np", ".", "random", ".", "rand", "(", "*", "yy", ".", "shape", ")", "*", "2", "-", "1", ")", ",", "sigma", ",", "\n", "mode", "=", "\"constant\"", ",", "cval", "=", "0.", ")", "*", "alpha", "\n", "dz", "=", "gaussian_filter", "(", "(", "np", ".", "random", ".", "rand", "(", "*", "zz", ".", "shape", ")", "*", "2", "-", "1", ")", ",", "sigma", ",", "\n", "mode", "=", "\"constant\"", ",", "cval", "=", "0.", ")", "*", "alpha", "\n", "return", "xx", "+", "dx", ",", "yy", "+", "dy", ",", "zz", "+", "dz", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data._get_center": [[50, 55], ["center.astype", "numpy.random.rand"], "function", ["None"], ["", "def", "_get_center", "(", "img_size", ")", ":", "\n", "    ", "min_", ",", "max_", "=", "img_size", "*", "0.05", ",", "img_size", "*", "0.95", "\n", "range_", "=", "max_", "-", "min_", "\n", "center", "=", "np", ".", "random", ".", "rand", "(", "3", ")", "*", "range_", "-", "min_", "\n", "return", "center", ".", "astype", "(", "np", ".", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data.create_toy_image": [[57, 138], ["numpy.zeros", "toy_data._elastic_deform", "np.zeros.min", "toy_data._get_center", "im[].min", "toy_data._get_center", "im[].min", "toy_data._get_center", "numpy.logical_or", "numpy.random.poisson", "im[].min", "np.zeros.min", "np.zeros.max", "numpy.power", "np.zeros.max", "numpy.power", "numpy.sin", "numpy.power", "numpy.power", "numpy.power", "numpy.iinfo", "np.zeros.astype", "numpy.sin", "numpy.power", "numpy.sin", "numpy.power", "numpy.sin", "numpy.sin", "im[].max", "numpy.abs", "numpy.power", "numpy.power", "im[].max", "numpy.power", "numpy.power", "numpy.power", "numpy.power", "im[].max", "numpy.random.poisson", "numpy.random.randn", "numpy.cos", "numpy.random.rand", "numpy.power", "numpy.power", "numpy.random.rand", "numpy.abs", "numpy.abs", "numpy.random.rand", "numpy.random.rand", "numpy.sqrt", "numpy.sqrt", "numpy.random.rand", "numpy.random.rand", "numpy.power", "numpy.power", "numpy.power", "numpy.power", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data._elastic_deform", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data._get_center", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data._get_center", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data._get_center"], ["", "def", "create_toy_image", "(", "img_size", ")", ":", "\n", "# Create empty image", "\n", "    ", "im", "=", "np", ".", "zeros", "(", "shape", "=", "[", "img_size", "]", "*", "3", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "\n", "# Create grid", "\n", "xx", ",", "yy", ",", "zz", "=", "np", ".", "mgrid", "[", ":", "img_size", ",", ":", "img_size", ",", ":", "img_size", "]", "\n", "xx_d", ",", "yy_d", ",", "zz_d", "=", "_elastic_deform", "(", "xx", ",", "yy", ",", "zz", ",", "\n", "sigma", "=", "img_size", "/", "6", ",", "\n", "alpha", "=", "img_size", "*", "60", ")", "\n", "\n", "# Add background", "\n", "im", "+=", "np", ".", "sin", "(", "0.05", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "xx", "/", "img_size", ")", "+", "np", ".", "power", "(", "np", ".", "cos", "(", "0.05", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "yy", "/", "img_size", ")", ",", "0.5", ")", "+", "np", ".", "power", "(", "np", ".", "sin", "(", "0.05", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "zz", "/", "img_size", ")", ",", "2", ")", "\n", "\n", "# Scale 0-0.75", "\n", "im", "-=", "im", ".", "min", "(", ")", "\n", "im", "/=", "im", ".", "max", "(", ")", "*", "(", "1", "/", "0.75", ")", "\n", "\n", "# Add sphere", "\n", "radius", "=", "img_size", "/", "8", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "img_size", "/", "2", "\n", "center", "=", "_get_center", "(", "img_size", ")", "\n", "sphere_mask", "=", "np", ".", "power", "(", "xx_d", "-", "center", "[", "0", "]", ",", "2", ")", "+", "np", ".", "power", "(", "yy_d", "-", "center", "[", "1", "]", ",", "2", ")", "+", "np", ".", "power", "(", "zz_d", "-", "center", "[", "2", "]", ",", "2", ")", "<=", "np", ".", "power", "(", "radius", ",", "2", ")", "\n", "sphere_vals", "=", "np", ".", "sin", "(", "(", "xx", "[", "sphere_mask", "]", "-", "center", "[", "0", "]", ")", "/", "img_size", ")", "+", "np", ".", "sin", "(", "(", "yy", "[", "sphere_mask", "]", "-", "center", "[", "1", "]", ")", "/", "img_size", "*", "5", ")", "+", "np", ".", "sin", "(", "(", "zz", "[", "sphere_mask", "]", "-", "center", "[", "2", "]", ")", "/", "img_size", "*", "10", ")", "\n", "\n", "# Add and scale 0.2-1.0", "\n", "im", "[", "sphere_mask", "]", "+=", "sphere_vals", "\n", "im", "[", "sphere_mask", "]", "-=", "im", "[", "sphere_mask", "]", ".", "min", "(", ")", "\n", "im", "[", "sphere_mask", "]", "/=", "im", "[", "sphere_mask", "]", ".", "max", "(", ")", "*", "1", "/", "0.8", "\n", "im", "[", "sphere_mask", "]", "+=", "0.2", "\n", "\n", "# Add elastic square", "\n", "size", "=", "img_size", "/", "4", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "img_size", "/", "2", "\n", "center", "=", "_get_center", "(", "img_size", ")", "\n", "square_mask", "=", "(", "np", ".", "abs", "(", "xx_d", "-", "center", "[", "0", "]", ")", "<", "size", "/", "2", ")", "&", "(", "np", ".", "abs", "(", "yy_d", "-", "center", "[", "1", "]", ")", "<", "size", "/", "2", ")", "&", "(", "np", ".", "abs", "(", "zz_d", "-", "center", "[", "2", "]", ")", "<", "size", "/", "2", ")", "\n", "square_vals", "=", "np", ".", "power", "(", "xx", "[", "square_mask", "]", "-", "center", "[", "0", "]", ",", "2", ")", "+", "np", ".", "power", "(", "yy", "[", "square_mask", "]", "-", "center", "[", "1", "]", ",", "2", ")", "+", "np", ".", "power", "(", "zz", "[", "square_mask", "]", "-", "center", "[", "2", "]", ",", "2", ")", "\n", "\n", "# Add and scale 0.2-1.0", "\n", "im", "[", "square_mask", "]", "+=", "square_vals", "\n", "im", "[", "square_mask", "]", "+=", "square_vals", "\n", "im", "[", "square_mask", "]", "-=", "im", "[", "square_mask", "]", ".", "min", "(", ")", "\n", "im", "[", "square_mask", "]", "/=", "im", "[", "square_mask", "]", ".", "max", "(", ")", "*", "1", "/", "0.8", "\n", "im", "[", "square_mask", "]", "+=", "0.2", "\n", "\n", "# Add torus", "\n", "center_radius", "=", "img_size", "/", "16", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "img_size", "/", "6", "\n", "tube_radius", "=", "img_size", "/", "32", "+", "np", ".", "random", ".", "rand", "(", ")", "*", "img_size", "/", "12", "\n", "center", "=", "_get_center", "(", "img_size", ")", "\n", "torus_mask_1", "=", "np", ".", "power", "(", "center_radius", "-", "np", ".", "sqrt", "(", "np", ".", "power", "(", "xx_d", "-", "center", "[", "0", "]", ",", "2", ")", "+", "\n", "np", ".", "power", "(", "yy_d", "-", "center", "[", "1", "]", ",", "2", ")", ")", ",", "2", ")", "+", "np", ".", "power", "(", "zz_d", "-", "center", "[", "2", "]", ",", "2", ")", "<=", "np", ".", "power", "(", "tube_radius", ",", "2", ")", "\n", "torus_mask_2", "=", "np", ".", "power", "(", "center_radius", "-", "np", ".", "sqrt", "(", "np", ".", "power", "(", "zz_d", "-", "center", "[", "2", "]", ",", "2", ")", "+", "\n", "np", ".", "power", "(", "yy_d", "-", "center", "[", "1", "]", ",", "2", ")", ")", ",", "2", ")", "+", "np", ".", "power", "(", "xx_d", "-", "center", "[", "0", "]", ",", "2", ")", "<=", "np", ".", "power", "(", "tube_radius", ",", "2", ")", "\n", "torus_mask", "=", "np", ".", "logical_or", "(", "torus_mask_1", ",", "torus_mask_2", ")", "\n", "torus_vals", "=", "np", ".", "random", ".", "poisson", "(", "im", "[", "torus_mask", "]", ")", "\n", "\n", "# Add and scale 0.2-1.0", "\n", "im", "[", "torus_mask", "]", "+=", "torus_vals", "\n", "im", "[", "torus_mask", "]", "-=", "im", "[", "torus_mask", "]", ".", "min", "(", ")", "\n", "im", "[", "torus_mask", "]", "/=", "im", "[", "torus_mask", "]", ".", "max", "(", ")", "*", "1", "/", "0.8", "\n", "im", "[", "torus_mask", "]", "+=", "0.2", "\n", "\n", "# Add noise to image", "\n", "im", "+=", "np", ".", "random", ".", "poisson", "(", "lam", "=", "10", ",", "size", "=", "im", ".", "shape", ")", "*", "np", ".", "random", ".", "randn", "(", "*", "im", ".", "shape", ")", "*", "0.0005", "\n", "\n", "# Scale overall image to [0, ..., 1]", "\n", "im", "-=", "im", ".", "min", "(", ")", "\n", "im", "/=", "im", ".", "max", "(", ")", "\n", "\n", "# Scale to 16 bit int", "\n", "im", "*=", "np", ".", "iinfo", "(", "np", ".", "uint16", ")", ".", "max", "\n", "return", "im", ".", "astype", "(", "np", ".", "uint16", ")", ",", "sphere_mask", ",", "square_mask", ",", "torus_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data.create_toy_labels": [[140, 146], ["numpy.zeros", "enumerate", "len", "numpy.iinfo"], "function", ["None"], ["", "def", "create_toy_labels", "(", "*", "masks", ")", ":", "\n", "    ", "assert", "len", "(", "masks", ")", "<", "np", ".", "iinfo", "(", "np", ".", "uint8", ")", ".", "max", "\n", "labels", "=", "np", ".", "zeros", "(", "shape", "=", "masks", "[", "0", "]", ".", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "for", "i", ",", "mask", "in", "enumerate", "(", "masks", ")", ":", "\n", "        ", "labels", "[", "mask", "]", "=", "i", "+", "1", "\n", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data.create_toy_data_point": [[148, 152], ["toy_data.create_toy_image", "toy_data.create_toy_labels"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data.create_toy_image", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data.create_toy_labels"], ["", "def", "create_toy_data_point", "(", "img_size", ")", ":", "\n", "    ", "im", ",", "m1", ",", "m2", ",", "m3", "=", "create_toy_image", "(", "img_size", ")", "\n", "lab", "=", "create_toy_labels", "(", "m1", ",", "m2", ",", "m3", ")", "\n", "return", "im", ",", "lab", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data.create_toy_dataset": [[154, 169], ["os.path.join", "os.path.join", "mpunet.utils.utils.create_folders", "range", "print", "os.path.join", "os.path.join", "toy_data.create_toy_data_point", "numpy.eye", "nibabel.save", "nibabel.save", "nibabel.Nifti1Image", "nibabel.Nifti1Image"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data.create_toy_data_point"], ["", "def", "create_toy_dataset", "(", "N", ",", "image_size", ",", "out_dir", ",", "image_subdir", ",", "label_subdir", ")", ":", "\n", "    ", "image_out_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "image_subdir", ")", "\n", "label_out_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "label_subdir", ")", "\n", "create_folders", "(", "[", "out_dir", ",", "image_out_dir", ",", "label_out_dir", "]", ")", "\n", "\n", "for", "img_id", "in", "range", "(", "N", ")", ":", "\n", "        ", "print", "(", "\"--\"", ",", "img_id", ")", "\n", "file_name", "=", "\"toy_data_{}.nii.gz\"", ".", "format", "(", "img_id", ")", "\n", "im_path", "=", "os", ".", "path", ".", "join", "(", "image_out_dir", ",", "file_name", ")", "\n", "lab_path", "=", "os", ".", "path", ".", "join", "(", "label_out_dir", ",", "file_name", ")", "\n", "image", ",", "label", "=", "create_toy_data_point", "(", "image_size", ")", "\n", "\n", "affine", "=", "np", ".", "eye", "(", "4", ")", "\n", "nib", ".", "save", "(", "nib", ".", "Nifti1Image", "(", "image", ",", "affine", "=", "affine", ")", ",", "im_path", ")", "\n", "nib", ".", "save", "(", "nib", ".", "Nifti1Image", "(", "label", ",", "affine", "=", "affine", ")", ",", "lab_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data.entry_func": [[171, 199], ["get_argparser().parse_args", "os.path.abspath", "mpunet.utils.utils.create_folders", "numpy.random.seed", "zip", "os.path.abspath", "os.path.exists", "os.listdir", "print", "exit", "toy_data.get_argparser", "print", "toy_data.create_toy_dataset", "os.path.join"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.base_sequence.BaseSequence.seed", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train_fusion.get_argparser", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.toy_data.create_toy_dataset", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "", "def", "entry_func", "(", "args", "=", "None", ")", ":", "\n", "\n", "    ", "args", "=", "get_argparser", "(", ")", ".", "parse_args", "(", "args", ")", "\n", "out_dir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "abspath", "(", "args", ".", "out_dir", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "out_dir", ")", "and", "os", ".", "listdir", "(", "out_dir", ")", ":", "\n", "        ", "from", "sys", "import", "exit", "\n", "print", "(", "\"Path '{}' already exists and is not empty!\"", ".", "format", "(", "args", ".", "out_dir", ")", ")", "\n", "exit", "(", "1", ")", "\n", "", "create_folders", "(", "[", "out_dir", "]", ",", "create_deep", "=", "False", ")", "\n", "\n", "n_train", ",", "n_val", ",", "n_test", "=", "[", "args", ".", "N", "]", "*", "3", "\n", "n_train", "=", "args", ".", "N_train", "or", "n_train", "\n", "n_val", "=", "args", ".", "N_val", "or", "n_val", "\n", "n_test", "=", "args", ".", "N_test", "or", "n_test", "\n", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "for", "dataset", ",", "N", "in", "zip", "(", "[", "\"train\"", ",", "\"val\"", ",", "\"test\"", "]", ",", "[", "n_train", ",", "n_val", ",", "n_test", "]", ")", ":", "\n", "        ", "if", "not", "N", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"[*] Creating dataset '{}' of {} samples\"", ".", "format", "(", "\n", "dataset", ",", "N", "\n", ")", ")", "\n", "create_toy_dataset", "(", "N", "=", "N", ",", "\n", "image_size", "=", "args", ".", "image_size", ",", "\n", "out_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "dataset", ")", ",", "\n", "image_subdir", "=", "args", ".", "image_subdir", ",", "\n", "label_subdir", "=", "args", ".", "label_subdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.init_project.copy_yaml_and_set_data_dirs": [[5, 23], ["YAMLHParams", "YAMLHParams.save_current", "YAMLHParams.get", "YAMLHParams.get", "hparams[].get", "YAMLHParams.set_value", "print"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.save_current", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.set_value"], ["def", "copy_yaml_and_set_data_dirs", "(", "in_path", ",", "out_path", ",", "data_dir", ")", ":", "\n", "    ", "from", "mpunet", ".", "hyperparameters", "import", "YAMLHParams", "\n", "hparams", "=", "YAMLHParams", "(", "in_path", ",", "no_log", "=", "True", ",", "no_version_control", "=", "True", ")", "\n", "dir_name", "=", "\"base_dir\"", "if", "\"base_dir\"", "in", "hparams", "[", "\"train_data\"", "]", "else", "\"data_dir\"", "\n", "\n", "# Set values in parameter file and save to new location", "\n", "data_ids", "=", "(", "\"train\"", ",", "\"val\"", ",", "\"test\"", ")", "+", "(", "(", "\"aug\"", ",", ")", "\n", "if", "hparams", ".", "get", "(", "\"aug_data\"", ")", "\n", "else", "(", ")", ")", "\n", "for", "dataset", "in", "data_ids", ":", "\n", "        ", "path", "=", "(", "data_dir", "+", "\"/{}\"", ".", "format", "(", "dataset", ")", ")", "if", "data_dir", "else", "\"Null\"", "\n", "dataset", "=", "dataset", "+", "\"_data\"", "\n", "if", "not", "hparams", ".", "get", "(", "dataset", ")", "or", "not", "hparams", "[", "dataset", "]", ".", "get", "(", "\"base_dir\"", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "hparams", ".", "set_value", "(", "dataset", ",", "dir_name", ",", "path", ",", "True", ",", "True", ")", "\n", "", "except", "AttributeError", ":", "\n", "                ", "print", "(", "\"[!] Subdir {} does not exist.\"", ".", "format", "(", "dataset", ")", ")", "\n", "", "", "", "hparams", ".", "save_current", "(", "out_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.init_project.get_parser": [[25, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser._action_groups.pop", "argparse.ArgumentParser.add_argument_group", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "os.listdir", "os.path.abspath", "os.path.split"], "function", ["None"], ["", "def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'Create a new project folder'", ")", "\n", "\n", "# Define groups", "\n", "parser", ".", "_action_groups", ".", "pop", "(", ")", "\n", "required", "=", "parser", ".", "add_argument_group", "(", "'required named arguments'", ")", "\n", "optional", "=", "parser", ".", "add_argument_group", "(", "'optional named arguments'", ")", "\n", "\n", "models", "=", "[", "m", "for", "m", "in", "os", ".", "listdir", "(", "os", ".", "path", ".", "split", "(", "__file__", ")", "[", "0", "]", "+", "\"/defaults\"", ")", "\n", "if", "m", "!=", "\"__init__.py\"", "]", "\n", "required", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "\n", "help", "=", "'the name of the project folder'", ")", "\n", "optional", ".", "add_argument", "(", "'--root'", ",", "type", "=", "str", ",", "default", "=", "os", ".", "path", ".", "abspath", "(", "\"./\"", ")", ",", "\n", "help", "=", "'a path to the root folder in '", "\n", "'which the project will be initialized'", ")", "\n", "optional", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "\"MultiPlanar\"", ",", "\n", "help", "=", "\"Specify a model type parameter file \"", "\n", "\"({}), default=\"", "\n", "\"'MultiPlanar'\"", ".", "format", "(", "\", \"", ".", "join", "(", "models", ")", ")", ")", "\n", "optional", ".", "add_argument", "(", "\"--data_dir\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"Root data folder for the project\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.init_project.entry_func": [[49, 87], ["init_project.get_parser", "vars", "os.path.abspath", "glob", "os.path.exists", "OSError", "get_parser.parse_args", "os.path.abspath", "os.path.exists", "OSError", "os.path.exists", "os.path.join", "init_project.copy_yaml_and_set_data_dirs", "os.path.split", "input", "os.makedirs", "os.path.abspath", "input.lower", "OSError", "os.path.join", "os.path.split"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.run_tests.get_parser", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.init_project.copy_yaml_and_set_data_dirs", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "def", "entry_func", "(", "args", "=", "None", ")", ":", "\n", "\n", "    ", "default_folder", "=", "os", ".", "path", ".", "split", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "[", "0", "]", "+", "\"/defaults\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "default_folder", ")", ":", "\n", "        ", "raise", "OSError", "(", "\"Default path not found at %s\"", "%", "default_folder", ")", "\n", "\n", "# Parse arguments", "\n", "", "parser", "=", "get_parser", "(", ")", "\n", "args", "=", "vars", "(", "parser", ".", "parse_args", "(", "args", ")", ")", "\n", "path", "=", "os", ".", "path", ".", "abspath", "(", "args", "[", "\"root\"", "]", ")", "\n", "name", "=", "args", "[", "\"name\"", "]", "\n", "preset", "=", "args", "[", "\"model\"", "]", "\n", "data_dir", "=", "args", "[", "\"data_dir\"", "]", "\n", "if", "data_dir", ":", "\n", "        ", "data_dir", "=", "os", ".", "path", ".", "abspath", "(", "data_dir", ")", "\n", "\n", "# Validate project path and create folder", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "raise", "OSError", "(", "\"root path '%s' does not exist.\"", "%", "args", "[", "\"root\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "folder_path", "=", "\"%s/%s\"", "%", "(", "path", ",", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "            ", "response", "=", "input", "(", "\"Folder at '%s' already exists. Overwrite? \"", "\n", "\"Only parameter files and code will be replaced. (y/n) \"", "%", "folder_path", ")", "\n", "if", "response", ".", "lower", "(", ")", "==", "\"n\"", ":", "\n", "                ", "raise", "OSError", "(", "\"Folder at '%s' already exists\"", "%", "folder_path", ")", "\n", "", "", "else", ":", "\n", "            ", "os", ".", "makedirs", "(", "\"%s/%s\"", "%", "(", "path", ",", "name", ")", ")", "\n", "\n", "# Get yaml path", "\n", "", "", "from", "glob", "import", "glob", "\n", "yaml_paths", "=", "glob", "(", "os", ".", "path", ".", "join", "(", "default_folder", ",", "preset", ",", "\"*.yaml\"", ")", ")", "\n", "\n", "# Write file", "\n", "for", "p", "in", "yaml_paths", ":", "\n", "        ", "copy_yaml_and_set_data_dirs", "(", "in_path", "=", "p", ",", "\n", "out_path", "=", "os", ".", "path", ".", "join", "(", "folder_path", ",", "os", ".", "path", ".", "split", "(", "p", ")", "[", "-", "1", "]", ")", ",", "\n", "data_dir", "=", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train_fusion.get_argparser": [[45, 80], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_argparser", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'Fit a fusion model for a '", "\n", "'mpunet project'", ")", "\n", "parser", ".", "add_argument", "(", "\"--project_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"./\"", ",", "\n", "help", "=", "'path to mpunet project folder'", ")", "\n", "parser", ".", "add_argument", "(", "\"--overwrite\"", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'overwrite previous fusion weights'", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_GPUs\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Number of GPUs to assign to this job'", ")", "\n", "parser", ".", "add_argument", "(", "\"--images_per_round\"", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "\"Number of images to train on in each sub-round.\"", "\n", "\" Larger numbers should be preferred but \"", "\n", "\"requires potentially large amounts of memory.\"", "\n", "\" Defaults to 5.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "2", "**", "17", ",", "\n", "help", "=", "\"Sets the batch size used in the fusion model \"", "\n", "\"training process. Lowering this number may \"", "\n", "\"resolve GPU memory issues. Defaults to 2**17.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "type", "=", "int", ",", "default", "=", "30", ",", "\n", "help", "=", "\"Number of epochs to train on each subset of \"", "\n", "\"images (default=30)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--early_stopping\"", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "\"Number of non-improving epochs before premature \"", "\n", "\"training round termination is invoked. \"", "\n", "\"(default=3)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--continue_training\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--force_GPU\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_prob\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "\"Perform evaluation on only a fraction of the\"", "\n", "\" computed views (to speed up run-time)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--wait_for\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "\n", "help", "=", "\"Waiting for PID to terminate before starting \"", "\n", "\"training process.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dice_weight\"", ",", "type", "=", "str", ",", "default", "=", "\"uniform\"", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train_fusion.log": [[82, 91], ["logger", "logger", "logger", "logger", "logger", "logger", "logger", "logger", "hparams[].get", "hparams[].get", "hparams[].get", "hparams[].get", "hparams[].get"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["", "def", "log", "(", "logger", ",", "hparams", ",", "views", ",", "weights", ",", "fusion_weights", ")", ":", "\n", "    ", "logger", "(", "\"N classes:       %s\"", "%", "hparams", "[", "\"build\"", "]", ".", "get", "(", "\"n_classes\"", ")", ")", "\n", "logger", "(", "\"Scaler:          %s\"", "%", "hparams", "[", "\"fit\"", "]", ".", "get", "(", "\"scaler\"", ")", ")", "\n", "logger", "(", "\"Crop:            %s\"", "%", "hparams", "[", "\"fit\"", "]", ".", "get", "(", "\"crop_to\"", ")", ")", "\n", "logger", "(", "\"Downsample:      %s\"", "%", "hparams", "[", "\"fit\"", "]", ".", "get", "(", "\"downsample_to\"", ")", ")", "\n", "logger", "(", "\"CF factor:       %s\"", "%", "hparams", "[", "\"build\"", "]", ".", "get", "(", "\"complexity_factor\"", ")", ")", "\n", "logger", "(", "\"Views:           %s\"", "%", "views", ")", "\n", "logger", "(", "\"Weights:         %s\"", "%", "weights", ")", "\n", "logger", "(", "\"Fusion weights:  %s\"", "%", "fusion_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train_fusion.contains_all_images": [[93, 99], ["all"], "function", ["None"], ["", "def", "contains_all_images", "(", "sets", ",", "images", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "l", "=", "[", "i", "for", "s", "in", "sets", "for", "i", "in", "s", "]", "\n", "return", "all", "(", "[", "m", "in", "l", "for", "m", "in", "images", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train_fusion.make_sets": [[101, 109], ["range", "sets.append", "set", "numpy.random.choice"], "function", ["None"], ["", "def", "make_sets", "(", "images", ",", "sub_size", ",", "N", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "sets", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "sets", ".", "append", "(", "set", "(", "np", ".", "random", ".", "choice", "(", "images", ",", "sub_size", ",", "replace", "=", "False", ")", ")", ")", "\n", "", "return", "sets", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train_fusion._run_fusion_training": [[111, 217], ["enumerate", "logger", "mpunet.image.ImagePairLoader", "mpunet.image.ImagePairLoader.set_scaler_and_bg_values", "get_sequence", "len", "enumerate", "logger", "mpunet.utils.fusion.stack_collections", "print", "sklearn.utils.shuffle", "print", "int", "mpunet.callbacks.ValDiceScores", "tensorflow.keras.callbacks.EarlyStopping", "cbs.append", "fusion_model.save_weights", "len", "mpunet.image.ImagePairLoader.add_images", "list", "logger", "logger", "print", "tensorflow.keras.callbacks.CSVLogger", "mpunet.callbacks.PrintLayerWeights", "fusion_model.fit", "len", "mpunet.utils.highlighted", "mpunet.image.ImagePairLoader", "hparams.get_from_anywhere", "hparams.get_from_anywhere", "image_set_dict.keys", "mpunet.utils.highlighted", "get_sequence.image_pair_queue.get_image_by_id", "mpunet.interpolation.sample_grid.get_voxel_grid_real_space", "image.labels.reshape", "numpy.empty", "np.empty.fill", "enumerate", "points_collection.append", "targets_collection.append", "print", "mpunet.utils.fusion.predict_and_map().reshape", "len", "len", "mpunet.utils.fusion.predict_and_map"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.set_scaler_and_bg_values", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.sequences.utils.get_sequence", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fusion_training.stack_collections", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.add_images", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.trainer.Trainer.fit", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.highlighted", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_from_anywhere", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_from_anywhere", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.highlighted", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_image_by_id", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_voxel_grid_real_space", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.fill", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.fusion.fusion_training.predict_and_map"], ["", "def", "_run_fusion_training", "(", "sets", ",", "logger", ",", "hparams", ",", "min_val_images", ",", "is_validation", ",", "\n", "views", ",", "n_classes", ",", "unet", ",", "fusion_model", ",", "early_stopping", ",", "\n", "fm_batch_size", ",", "epochs", ",", "eval_prob", ",", "fusion_weights_path", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n    \"\"\"", "\n", "\n", "for", "_round", ",", "_set", "in", "enumerate", "(", "sets", ")", ":", "\n", "        ", "s", "=", "\"Set %i/%i:\\n%s\"", "%", "(", "_round", "+", "1", ",", "len", "(", "sets", ")", ",", "_set", ")", "\n", "logger", "(", "\"\\n%s\"", "%", "highlighted", "(", "s", ")", ")", "\n", "\n", "# Reload data", "\n", "images", "=", "ImagePairLoader", "(", "**", "hparams", "[", "\"val_data\"", "]", ")", "\n", "if", "len", "(", "images", ")", "<", "min_val_images", ":", "\n", "            ", "images", ".", "add_images", "(", "ImagePairLoader", "(", "**", "hparams", "[", "\"train_data\"", "]", ")", ")", "\n", "\n", "# Get list of ImagePair objects to run on", "\n", "", "image_set_dict", "=", "{", "m", ".", "identifier", ":", "m", "for", "m", "in", "images", "if", "m", ".", "identifier", "in", "_set", "}", "\n", "\n", "# Set scaler and bg values", "\n", "images", ".", "set_scaler_and_bg_values", "(", "\n", "bg_value", "=", "hparams", ".", "get_from_anywhere", "(", "'bg_value'", ")", ",", "\n", "scaler", "=", "hparams", ".", "get_from_anywhere", "(", "'scaler'", ")", ",", "\n", "compute_now", "=", "False", "\n", ")", "\n", "\n", "# Init LazyQueue and get its sequencer", "\n", "from", "mpunet", ".", "sequences", ".", "utils", "import", "get_sequence", "\n", "seq", "=", "get_sequence", "(", "data_queue", "=", "images", ",", "\n", "is_validation", "=", "True", ",", "\n", "views", "=", "views", ",", "\n", "**", "hparams", "[", "\"fit\"", "]", ",", "**", "hparams", "[", "\"build\"", "]", ")", "\n", "\n", "# Fetch points from the set images", "\n", "points_collection", "=", "[", "]", "\n", "targets_collection", "=", "[", "]", "\n", "N_im", "=", "len", "(", "image_set_dict", ")", "\n", "for", "num_im", ",", "image_id", "in", "enumerate", "(", "list", "(", "image_set_dict", ".", "keys", "(", ")", ")", ")", ":", "\n", "            ", "logger", "(", "\"\"", ")", "\n", "logger", "(", "\n", "highlighted", "(", "\"(%i/%i) Running on %s (%s)\"", "%", "(", "num_im", "+", "1", ",", "N_im", ",", "\n", "image_id", ",", "\"val\"", "if", "\n", "is_validation", "[", "\n", "image_id", "]", "else", "\"train\"", ")", ")", ")", "\n", "\n", "with", "seq", ".", "image_pair_queue", ".", "get_image_by_id", "(", "image_id", ")", "as", "image", ":", "\n", "# Get voxel grid in real space", "\n", "                ", "voxel_grid_real_space", "=", "get_voxel_grid_real_space", "(", "image", ")", "\n", "\n", "# Get array to store predictions across all views", "\n", "targets", "=", "image", ".", "labels", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "points", "=", "np", ".", "empty", "(", "shape", "=", "(", "len", "(", "targets", ")", ",", "len", "(", "views", ")", ",", "n_classes", ")", ",", "\n", "dtype", "=", "np", ".", "float32", ")", "\n", "points", ".", "fill", "(", "np", ".", "nan", ")", "\n", "\n", "# Predict on all views", "\n", "for", "k", ",", "v", "in", "enumerate", "(", "views", ")", ":", "\n", "                    ", "print", "(", "\"\\n%s\"", "%", "\"View: %s\"", "%", "v", ")", "\n", "points", "[", ":", ",", "k", ",", ":", "]", "=", "predict_and_map", "(", "model", "=", "unet", ",", "\n", "seq", "=", "seq", ",", "\n", "image", "=", "image", ",", "\n", "view", "=", "v", ",", "\n", "voxel_grid_real_space", "=", "voxel_grid_real_space", ",", "\n", "n_planes", "=", "'same+20'", ",", "\n", "targets", "=", "targets", ",", "\n", "eval_prob", "=", "eval_prob", ")", ".", "reshape", "(", "-", "1", ",", "n_classes", ")", "\n", "\n", "# add to collections", "\n", "", "points_collection", ".", "append", "(", "points", ")", "\n", "targets_collection", ".", "append", "(", "targets", ")", "\n", "", "print", "(", "image", ".", "is_loaded", ")", "\n", "\n", "# Stack points into one matrix", "\n", "", "logger", "(", "\"Stacking points...\"", ")", "\n", "X", ",", "y", "=", "stack_collections", "(", "points_collection", ",", "targets_collection", ")", "\n", "\n", "# Shuffle train", "\n", "print", "(", "\"Shuffling points...\"", ")", "\n", "X", ",", "y", "=", "shuffle", "(", "X", ",", "y", ")", "\n", "\n", "print", "(", "\"Getting validation set...\"", ")", "\n", "val_ind", "=", "int", "(", "0.20", "*", "X", ".", "shape", "[", "0", "]", ")", "\n", "X_val", ",", "y_val", "=", "X", "[", ":", "val_ind", "]", ",", "y", "[", ":", "val_ind", "]", "\n", "X", ",", "y", "=", "X", "[", "val_ind", ":", "]", ",", "y", "[", "val_ind", ":", "]", "\n", "\n", "# Prepare dice score callback for validation data", "\n", "val_cb", "=", "ValDiceScores", "(", "(", "X_val", ",", "y_val", ")", ",", "n_classes", ",", "50000", ",", "logger", ")", "\n", "\n", "# Callbacks", "\n", "cbs", "=", "[", "val_cb", ",", "\n", "CSVLogger", "(", "filename", "=", "\"logs/fusion_training.csv\"", ",", "\n", "separator", "=", "\",\"", ",", "append", "=", "True", ")", ",", "\n", "PrintLayerWeights", "(", "fusion_model", ".", "layers", "[", "-", "1", "]", ",", "every", "=", "1", ",", "\n", "first", "=", "1000", ",", "per_epoch", "=", "True", ",", "logger", "=", "logger", ")", "]", "\n", "\n", "es", "=", "EarlyStopping", "(", "monitor", "=", "'val_dice'", ",", "min_delta", "=", "0.0", ",", "\n", "patience", "=", "early_stopping", ",", "verbose", "=", "1", ",", "mode", "=", "'max'", ")", "\n", "cbs", ".", "append", "(", "es", ")", "\n", "\n", "# Start training", "\n", "try", ":", "\n", "            ", "fusion_model", ".", "fit", "(", "X", ",", "y", ",", "batch_size", "=", "fm_batch_size", ",", "\n", "epochs", "=", "epochs", ",", "callbacks", "=", "cbs", ",", "verbose", "=", "1", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "            ", "pass", "\n", "", "fusion_model", ".", "save_weights", "(", "fusion_weights_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train_fusion.entry_func": [[219, 363], ["vars", "os.path.abspath", "print", "mpunet.logging.Logger", "mpunet.hyperparameters.YAMLHParams", "mpunet.utils.get_best_model", "mpunet.utils.create_folders", "train_fusion.log", "mpunet.image.ImagePairLoader", "random.shuffle", "train_fusion.contains_all_images", "mpunet.models.FusionModel", "mpunet.logging.Logger.", "mpunet.models.FusionModel.compile", "mpunet.models.FusionModel._log", "get_argparser().parse_args", "await_PIDs", "mpunet.utils.await_and_set_free_gpu", "mpunet.utils.set_gpu", "os.path.join", "numpy.load", "os.path.splitext", "os.path.exists", "print", "exit", "len", "mpunet.logging.Logger.", "mpunet.image.ImagePairLoader", "numpy.random.choice", "mpunet.image.ImagePairLoader.add_images", "int", "len", "list", "set", "mpunet.models.FusionModel.load_weights", "print", "tf.distribute.MirroredStrategy().scope", "mpunet.models.model_init.init_model", "print", "mpunet.models.model_init.init_model.load_weights", "train_fusion._run_fusion_training", "mpunet.models.FusionModel.save_weights", "os.path.split", "len", "numpy.arange", "image_IDs.append", "numpy.random.choice", "numpy.array_split", "len", "tensorflow.keras.optimizers.Adam", "os.path.exists", "os.mkdir", "train_fusion.get_argparser", "os.path.split", "len", "numpy.ceil", "tf.distribute.MirroredStrategy", "len", "len", "os.path.split", "os.path.split", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_best_model", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train_fusion.contains_all_images", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader._log", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.await_PIDs", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.await_and_set_free_gpu", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.set_gpu", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.add_images", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.model_init.init_model", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train_fusion._run_fusion_training", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train_fusion.get_argparser"], ["", "", "def", "entry_func", "(", "args", "=", "None", ")", ":", "\n", "\n", "# Project base path", "\n", "    ", "args", "=", "vars", "(", "get_argparser", "(", ")", ".", "parse_args", "(", "args", ")", ")", "\n", "basedir", "=", "os", ".", "path", ".", "abspath", "(", "args", "[", "\"project_dir\"", "]", ")", "\n", "overwrite", "=", "args", "[", "\"overwrite\"", "]", "\n", "continue_training", "=", "args", "[", "\"continue_training\"", "]", "\n", "eval_prob", "=", "args", "[", "\"eval_prob\"", "]", "\n", "await_PID", "=", "args", "[", "\"wait_for\"", "]", "\n", "dice_weight", "=", "args", "[", "\"dice_weight\"", "]", "\n", "print", "(", "\"Fitting fusion model for project-folder: %s\"", "%", "basedir", ")", "\n", "\n", "# Minimum images in validation set before also using training images", "\n", "min_val_images", "=", "15", "\n", "\n", "# Fusion model training params", "\n", "epochs", "=", "args", "[", "'epochs'", "]", "\n", "fm_batch_size", "=", "args", "[", "\"batch_size\"", "]", "\n", "\n", "# Early stopping params", "\n", "early_stopping", "=", "args", "[", "\"early_stopping\"", "]", "\n", "\n", "# Wait for PID?", "\n", "if", "await_PID", ":", "\n", "        ", "from", "mpunet", ".", "utils", "import", "await_PIDs", "\n", "await_PIDs", "(", "await_PID", ")", "\n", "\n", "# Fetch GPU(s)", "\n", "", "num_GPUs", "=", "args", "[", "\"num_GPUs\"", "]", "\n", "force_gpu", "=", "args", "[", "\"force_GPU\"", "]", "\n", "# Wait for free GPU", "\n", "if", "not", "force_gpu", ":", "\n", "        ", "await_and_set_free_gpu", "(", "N", "=", "num_GPUs", ",", "sleep_seconds", "=", "120", ")", "\n", "", "else", ":", "\n", "        ", "set_gpu", "(", "force_gpu", ")", "\n", "\n", "# Get logger", "\n", "", "logger", "=", "Logger", "(", "base_path", "=", "basedir", ",", "active_file", "=", "\"train_fusion\"", ",", "\n", "overwrite_existing", "=", "overwrite", ")", "\n", "\n", "# Get YAML hyperparameters", "\n", "hparams", "=", "YAMLHParams", "(", "os", ".", "path", ".", "join", "(", "basedir", ",", "\"train_hparams.yaml\"", ")", ")", "\n", "\n", "# Get some key settings", "\n", "n_classes", "=", "hparams", "[", "\"build\"", "]", "[", "\"n_classes\"", "]", "\n", "\n", "if", "hparams", "[", "\"build\"", "]", "[", "\"out_activation\"", "]", "==", "\"linear\"", ":", "\n", "# Trained with logit targets?", "\n", "        ", "hparams", "[", "\"build\"", "]", "[", "\"out_activation\"", "]", "=", "\"softmax\"", "if", "n_classes", ">", "1", "else", "\"sigmoid\"", "\n", "\n", "# Get views", "\n", "", "views", "=", "np", ".", "load", "(", "\"%s/views.npz\"", "%", "basedir", ")", "[", "\"arr_0\"", "]", "\n", "del", "hparams", "[", "\"fit\"", "]", "[", "\"views\"", "]", "\n", "\n", "# Get weights and set fusion (output) path", "\n", "weights", "=", "get_best_model", "(", "\"%s/model\"", "%", "basedir", ")", "\n", "weights_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "split", "(", "weights", ")", "[", "-", "1", "]", ")", "[", "0", "]", "\n", "fusion_weights", "=", "\"%s/model/fusion_weights/\"", "\"%s_fusion_weights.h5\"", "%", "(", "basedir", ",", "weights_name", ")", "\n", "create_folders", "(", "os", ".", "path", ".", "split", "(", "fusion_weights", ")", "[", "0", "]", ")", "\n", "\n", "# Log a few things", "\n", "log", "(", "logger", ",", "hparams", ",", "views", ",", "weights", ",", "fusion_weights", ")", "\n", "\n", "# Check if exists already...", "\n", "if", "not", "overwrite", "and", "os", ".", "path", ".", "exists", "(", "fusion_weights", ")", ":", "\n", "        ", "from", "sys", "import", "exit", "\n", "print", "(", "\"\\n[*] A fusion weights file already exists at '%s'.\"", "\n", "\"\\n    Use the --overwrite flag to overwrite.\"", "%", "fusion_weights", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "# Load validation data", "\n", "", "images", "=", "ImagePairLoader", "(", "**", "hparams", "[", "\"val_data\"", "]", ",", "logger", "=", "logger", ")", "\n", "is_validation", "=", "{", "m", ".", "identifier", ":", "True", "for", "m", "in", "images", "}", "\n", "\n", "# Define random sets of images to train on simul. (cant be all due", "\n", "# to memory constraints)", "\n", "image_IDs", "=", "[", "m", ".", "identifier", "for", "m", "in", "images", "]", "\n", "\n", "if", "len", "(", "images", ")", "<", "min_val_images", ":", "\n", "# Pick N random training images", "\n", "        ", "diff", "=", "min_val_images", "-", "len", "(", "images", ")", "\n", "logger", "(", "\"Adding %i training images to set\"", "%", "diff", ")", "\n", "\n", "# Load the training data and pick diff images", "\n", "train", "=", "ImagePairLoader", "(", "**", "hparams", "[", "\"train_data\"", "]", ",", "logger", "=", "logger", ")", "\n", "indx", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "len", "(", "train", ")", ")", ",", "diff", ",", "replace", "=", "diff", ">", "len", "(", "train", ")", ")", "\n", "\n", "# Add the images to the image set set", "\n", "train_add", "=", "[", "train", "[", "i", "]", "for", "i", "in", "indx", "]", "\n", "for", "m", "in", "train_add", ":", "\n", "            ", "is_validation", "[", "m", ".", "identifier", "]", "=", "False", "\n", "image_IDs", ".", "append", "(", "m", ".", "identifier", ")", "\n", "", "images", ".", "add_images", "(", "train_add", ")", "\n", "\n", "# Append to length % sub_size == 0", "\n", "", "sub_size", "=", "args", "[", "\"images_per_round\"", "]", "\n", "rest", "=", "int", "(", "sub_size", "*", "np", ".", "ceil", "(", "len", "(", "image_IDs", ")", "/", "sub_size", ")", ")", "-", "len", "(", "image_IDs", ")", "\n", "if", "rest", ":", "\n", "        ", "image_IDs", "+=", "list", "(", "np", ".", "random", ".", "choice", "(", "image_IDs", ",", "rest", ",", "replace", "=", "False", ")", ")", "\n", "\n", "# Shuffle and split", "\n", "", "random", ".", "shuffle", "(", "image_IDs", ")", "\n", "sets", "=", "[", "set", "(", "s", ")", "for", "s", "in", "np", ".", "array_split", "(", "image_IDs", ",", "len", "(", "image_IDs", ")", "/", "sub_size", ")", "]", "\n", "assert", "(", "contains_all_images", "(", "sets", ",", "image_IDs", ")", ")", "\n", "\n", "# Define fusion model (named 'org' to store reference to orgiginal model if", "\n", "# multi gpu model is created below)", "\n", "fusion_model", "=", "FusionModel", "(", "n_inputs", "=", "len", "(", "views", ")", ",", "n_classes", "=", "n_classes", ",", "\n", "weight", "=", "dice_weight", ",", "\n", "logger", "=", "logger", ",", "verbose", "=", "False", ")", "\n", "\n", "if", "continue_training", ":", "\n", "        ", "fusion_model", ".", "load_weights", "(", "fusion_weights", ")", "\n", "print", "(", "\"\\n[OBS] CONTINUED TRAINING FROM:\\n\"", ",", "fusion_weights", ")", "\n", "\n", "", "import", "tensorflow", "as", "tf", "\n", "with", "tf", ".", "distribute", ".", "MirroredStrategy", "(", ")", ".", "scope", "(", ")", ":", "\n", "# Define model", "\n", "        ", "unet", "=", "init_model", "(", "hparams", "[", "\"build\"", "]", ",", "logger", ")", "\n", "print", "(", "\"\\n[*] Loading weights: %s\\n\"", "%", "weights", ")", "\n", "unet", ".", "load_weights", "(", "weights", ",", "by_name", "=", "True", ")", "\n", "\n", "# Compile the model", "\n", "", "logger", "(", "\"Compiling...\"", ")", "\n", "metrics", "=", "[", "\"sparse_categorical_accuracy\"", ",", "sparse_fg_precision", ",", "sparse_fg_recall", "]", "\n", "fusion_model", ".", "compile", "(", "optimizer", "=", "Adam", "(", "lr", "=", "1e-3", ")", ",", "\n", "loss", "=", "fusion_model", ".", "loss", ",", "\n", "metrics", "=", "metrics", ")", "\n", "fusion_model", ".", "_log", "(", ")", "\n", "\n", "try", ":", "\n", "        ", "_run_fusion_training", "(", "sets", ",", "logger", ",", "hparams", ",", "min_val_images", ",", "\n", "is_validation", ",", "views", ",", "n_classes", ",", "unet", ",", "\n", "fusion_model", ",", "early_stopping", ",", "fm_batch_size", ",", "\n", "epochs", ",", "eval_prob", ",", "fusion_weights", ")", "\n", "", "except", "KeyboardInterrupt", ":", "\n", "        ", "pass", "\n", "", "finally", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "split", "(", "fusion_weights", ")", "[", "0", "]", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "os", ".", "path", ".", "split", "(", "fusion_weights", ")", "[", "0", "]", ")", "\n", "# Save fusion model weights", "\n", "# OBS: Must be original model if multi-gpu is performed!", "\n", "", "fusion_model", ".", "save_weights", "(", "fusion_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.branch.get_parser": [[11, 28], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "os.path.abspath"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", "description", "=", "'Branch a trained multi-task model '", "\n", "'into separate models for each task.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--project_folder\"", ",", "type", "=", "str", ",", "\n", "default", "=", "os", ".", "path", ".", "abspath", "(", "\"./\"", ")", ",", "\n", "help", "=", "\"The project folder (defaults to current dir)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--copy_weights\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Copy the weights file instead of sym-linking.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weights_file\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "\n", "help", "=", "\"(Optional) Path to the weights file. Will be\"", "\n", "\" inferred automatically if not specified.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--out_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"branches\"", ",", "\n", "help", "=", "\"Sub-folder to store the branched projects (\"", "\n", "\"defaults to 'branches')\"", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.branch.branch": [[30, 82], ["mpunet.utils.create_folders", "shared_hparams.set_value", "shared_hparams.delete_group", "mapping.items", "shared_hparams.save_current", "os.path.join", "mpunet.utils.create_folders", "os.path.join", "func", "os.path.exists", "soruce.split", "task_hparams.get_group", "shared_hparams.add_group", "os.path.join", "os.path.split", "print", "print", "func", "isinstance", "target.split", "shared_hparams.set_value", "os.path.join"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.set_value", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.delete_group", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.save_current", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_group", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.add_group", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.set_value", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "def", "branch", "(", "task_name", ",", "out_dir", ",", "task_hparams", ",", "task_hparams_file", ",", "\n", "shared_hparams", ",", "weights", ",", "copy_weights", ",", "views_file", ")", ":", "\n", "    ", "create_folders", "(", "out_dir", ")", "\n", "\n", "# Set the task fields to only the current task under 'build'", "\n", "shared_hparams", ".", "set_value", "(", "\"build\"", ",", "\"task_names\"", ",", "\n", "value", "=", "'[\"%s\"]'", "%", "task_name", ",", "overwrite", "=", "True", ")", "\n", "shared_hparams", ".", "delete_group", "(", "\"tasks\"", ")", "# No longer necessary", "\n", "\n", "# Create a map defining where each task specific parameter should go", "\n", "mapping", "=", "{", "\n", "\"task_specifics/n_classes\"", ":", "\"build/n_classes\"", ",", "\n", "\"task_specifics/n_channels\"", ":", "\"build/n_channels\"", ",", "\n", "\"task_specifics/dim\"", ":", "[", "\"build/dim\"", ",", "\"fit/dim\"", "]", ",", "\n", "\"task_specifics/out_activation\"", ":", "\"build/out_activation\"", ",", "\n", "\"task_specifics/real_space_span\"", ":", "\"fit/real_space_span\"", "\n", "}", "\n", "\n", "for", "soruce", ",", "targets", "in", "mapping", ".", "items", "(", ")", ":", "\n", "        ", "in_key1", ",", "in_key2", "=", "soruce", ".", "split", "(", "\"/\"", ")", "\n", "value", "=", "task_hparams", "[", "in_key1", "]", "[", "in_key2", "]", "\n", "\n", "# Set the value at all targets", "\n", "targets", "=", "[", "targets", "]", "if", "isinstance", "(", "targets", ",", "str", ")", "else", "targets", "\n", "for", "target", "in", "targets", ":", "\n", "            ", "out_key1", ",", "out_key2", "=", "target", ".", "split", "(", "\"/\"", ")", "\n", "shared_hparams", ".", "set_value", "(", "out_key1", ",", "out_key2", ",", "value", ",", "overwrite", "=", "True", ")", "\n", "\n", "# Add all data folders", "\n", "", "", "data_folders", "=", "(", "\"train_data\"", ",", "\"val_data\"", ",", "\"test_data\"", ",", "\"aug_data\"", ")", "\n", "for", "df", "in", "data_folders", ":", "\n", "        ", "yaml", "=", "task_hparams", ".", "get_group", "(", "df", ")", "\n", "shared_hparams", ".", "add_group", "(", "yaml_string", "=", "yaml", ")", "\n", "\n", "# Save the updates parameters to a new location", "\n", "", "shared_hparams", ".", "save_current", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"train_hparams.yaml\"", ")", ")", "\n", "\n", "# Add weights to folder", "\n", "weights_folder", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"model\"", ")", "\n", "create_folders", "(", "weights_folder", ")", "\n", "out_weights_name", "=", "os", ".", "path", ".", "split", "(", "weights", ")", "[", "1", "]", "\n", "out_weights_path", "=", "os", ".", "path", ".", "join", "(", "weights_folder", ",", "out_weights_name", ")", "\n", "func", "=", "copy", "if", "copy_weights", "else", "os", ".", "symlink", "\n", "if", "copy_weights", ":", "\n", "        ", "print", "(", "\"Copying weights...\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Symlinking weights...\"", ")", "\n", "", "func", "(", "weights", ",", "out_weights_path", ")", "\n", "\n", "# Add views (check for existence for future compatibility with 3D models)", "\n", "if", "os", ".", "path", ".", "exists", "(", "views_file", ")", ":", "\n", "        ", "func", "(", "views_file", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"views.npz\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.branch.entry_func": [[84, 118], ["branch.get_parser", "vars", "os.path.abspath", "os.path.abspath", "os.path.join", "mpunet.train.YAMLHParams", "mpunet.train.YAMLHParams.get", "mpunet.utils.create_folders", "zip", "get_parser.parse_args", "print", "sys.exit", "print", "mpunet.train.YAMLHParams", "mpunet.train.YAMLHParams", "branch.branch", "mpunet.utils.get_best_model", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.run_tests.get_parser", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.branch", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_best_model", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "", "def", "entry_func", "(", "args", "=", "None", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", ")", "\n", "args", "=", "vars", "(", "parser", ".", "parse_args", "(", "args", ")", ")", "\n", "\n", "# Get arguments", "\n", "project_folder", "=", "os", ".", "path", ".", "abspath", "(", "args", "[", "\"project_folder\"", "]", ")", "\n", "copy_weights", "=", "args", "[", "\"copy_weights\"", "]", "\n", "weights", "=", "os", ".", "path", ".", "abspath", "(", "args", "[", "\"weights_file\"", "]", "or", "\n", "get_best_model", "(", "project_folder", "+", "\"/model\"", ")", ")", "\n", "out_dir", "=", "os", ".", "path", ".", "join", "(", "project_folder", ",", "args", "[", "\"out_dir\"", "]", ")", "\n", "\n", "# Get main hyperparamter file and check if correct modelt ype", "\n", "hparams", "=", "YAMLHParams", "(", "project_folder", "+", "\"/train_hparams.yaml\"", ",", "no_log", "=", "True", ")", "\n", "tasks", "=", "hparams", ".", "get", "(", "\"tasks\"", ",", "False", ")", "\n", "if", "not", "tasks", ":", "\n", "        ", "print", "(", "\"[ERROR] Project must be of type 'MultiTask'.\"", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "# Branch out each sub-task", "\n", "", "create_folders", "(", "out_dir", ")", "\n", "for", "name", ",", "hparams_file", "in", "zip", "(", "tasks", "[", "\"task_names\"", "]", ",", "tasks", "[", "\"hparam_files\"", "]", ")", ":", "\n", "        ", "print", "(", "\"\\n[*] Branching task %s\"", "%", "name", ")", "\n", "# Reload the hparams in each iteration as we overwrite fields each time", "\n", "hparams", "=", "YAMLHParams", "(", "project_folder", "+", "\"/train_hparams.yaml\"", ",", "no_log", "=", "False", ")", "\n", "# Get task specific parameters", "\n", "task_hparams", "=", "YAMLHParams", "(", "project_folder", "+", "\"/%s\"", "%", "hparams_file", ")", "\n", "branch", "(", "task_name", "=", "name", ",", "\n", "out_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "name", ")", ",", "\n", "task_hparams", "=", "task_hparams", ",", "\n", "task_hparams_file", "=", "hparams_file", ",", "\n", "shared_hparams", "=", "hparams", ",", "\n", "weights", "=", "weights", ",", "\n", "copy_weights", "=", "copy_weights", ",", "\n", "views_file", "=", "os", ".", "path", ".", "join", "(", "project_folder", ",", "\"views.npz\"", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.run_tests.get_parser": [[5, 13], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "mpunet.tests.get_test_packages"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.tests.__init__.get_test_packages"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Run all or a set of tests.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tests\"", ",", "type", "=", "str", ",", "default", "=", "\"all\"", ",", "\n", "help", "=", "\"Select a package of tests to run. \"", "\n", "\"Must be one of: (all, {}). \"", "\n", "\"Defaults to \"", "\n", "\"all.\"", ".", "format", "(", "\", \"", ".", "join", "(", "get_test_packages", "(", ")", ")", ")", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.run_tests.entry_func": [[15, 26], ["get_parser().parse_args", "get_parser().parse_args.tests.lower", "run_tests", "run_tests.get_parser", "print", "str"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.tests.test_all.run_tests", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.run_tests.get_parser"], ["", "def", "entry_func", "(", "args", "=", "None", ")", ":", "\n", "\n", "# Get parser", "\n", "    ", "parser", "=", "get_parser", "(", ")", ".", "parse_args", "(", "args", ")", "\n", "tests_to_run", "=", "parser", ".", "tests", ".", "lower", "(", ")", "\n", "\n", "from", "mpunet", ".", "tests", "import", "run_tests", "\n", "try", ":", "\n", "        ", "run_tests", "(", "tests_to_run", ")", "\n", "", "except", "ValueError", "as", "e", ":", "\n", "        ", "print", "(", "str", "(", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.__init__": [[7, 14], ["pkgutil.get_loader", "ScreenLogger", "os.path.split", "os.path.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "logger", "=", "None", ",", "package", "=", "'mpunet'", ")", ":", "\n", "        ", "from", "mpunet", ".", "logging", ".", "default_logger", "import", "ScreenLogger", "\n", "self", ".", "package_name", "=", "package", "\n", "self", ".", "package_loader", "=", "pkgutil", ".", "get_loader", "(", "package", ")", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "self", ".", "git_path", "=", "os", ".", "path", ".", "split", "(", "os", ".", "path", ".", "split", "(", "self", ".", "package_loader", ".", "path", ")", "[", "0", "]", ")", "[", "0", "]", "\n", "self", ".", "_mem_path", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.log_version": [[15, 21], ["logger"], "methods", ["None"], ["", "def", "log_version", "(", "self", ",", "logger", "=", "None", ")", ":", "\n", "        ", "logger", "=", "logger", "or", "self", ".", "logger", "\n", "logger", "(", "\"{} version: {} ({}, {})\"", ".", "format", "(", "self", ".", "package_name", ",", "\n", "self", ".", "version", ",", "\n", "self", ".", "branch", ",", "\n", "self", ".", "current_commit", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.__enter__": [[22, 25], ["os.getcwd", "os.chdir"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_mem_path", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "self", ".", "git_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.__exit__": [[26, 29], ["os.chdir"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_val", ",", "exc_tb", ")", ":", "\n", "        ", "os", ".", "chdir", "(", "self", ".", "_mem_path", ")", "\n", "self", ".", "_mem_path", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.check_git": [[30, 33], ["bool", "os.path.exists", "version_controller.VersionController.git_query"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.git_query"], ["", "def", "check_git", "(", "self", ")", ":", "\n", "        ", "return", "bool", "(", "self", ".", "git_query", "(", "\"git status\"", ")", ")", "and", "os", ".", "path", ".", "exists", "(", "self", ".", "git_path", "+", "\"/.git\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.git_query": [[34, 47], ["out.decode().strip.decode().strip.decode().strip", "subprocess.Popen", "subprocess.Popen.communicate", "string.split", "out.decode().strip.decode().strip.decode"], "methods", ["None"], ["", "def", "git_query", "(", "self", ",", "string", ")", ":", "\n", "        ", "with", "self", ":", "\n", "            ", "try", ":", "\n", "                ", "p", "=", "subprocess", ".", "Popen", "(", "string", ".", "split", "(", ")", ",", "\n", "stdout", "=", "subprocess", ".", "PIPE", ",", "\n", "stderr", "=", "subprocess", ".", "PIPE", ")", "\n", "out", ",", "err", "=", "p", ".", "communicate", "(", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "                ", "return", "None", "\n", "", "if", "not", "out", ":", "\n", "                ", "return", "None", "\n", "", "out", "=", "out", ".", "decode", "(", "\"utf-8\"", ")", ".", "strip", "(", "\" \\n\"", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.remote_url": [[48, 51], ["version_controller.VersionController.git_query"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.git_query"], ["", "@", "property", "\n", "def", "remote_url", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "git_query", "(", "\"git config --get remote.origin.url\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.version": [[52, 56], ["version_controller.VersionController.package_loader.load_module"], "methods", ["None"], ["", "@", "property", "\n", "def", "version", "(", "self", ")", ":", "\n", "        ", "module", "=", "self", ".", "package_loader", ".", "load_module", "(", ")", "\n", "return", "module", ".", "__version__", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.current_commit": [[57, 60], ["version_controller.VersionController.git_query"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.git_query"], ["", "@", "property", "\n", "def", "current_commit", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "git_query", "(", "\"git rev-parse --short HEAD\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.latest_commit_in_branch": [[61, 71], ["version_controller.VersionController.git_query", "OSError"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.git_query"], ["", "@", "property", "\n", "def", "latest_commit_in_branch", "(", "self", ",", "branch", "=", "None", ")", ":", "\n", "        ", "branch", "=", "branch", "or", "self", ".", "branch", "\n", "url", "=", "self", ".", "remote_url", "\n", "commit", "=", "self", ".", "git_query", "(", "\"git ls-remote {} refs/heads/{}\"", ".", "format", "(", "\n", "url", ",", "branch", "\n", ")", ")", "\n", "if", "commit", "is", "None", ":", "\n", "            ", "raise", "OSError", "(", "\"Could not determine latest commit, did not find git.\"", ")", "\n", "", "return", "commit", "[", ":", "7", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.branch": [[72, 75], ["version_controller.VersionController.git_query"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.git_query"], ["", "@", "property", "\n", "def", "branch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "git_query", "(", "\"git symbolic-ref --short HEAD\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.set_commit": [[76, 78], ["version_controller.VersionController.git_query", "str"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.git_query"], ["", "def", "set_commit", "(", "self", ",", "commit_id", ")", ":", "\n", "        ", "self", ".", "git_query", "(", "\"git reset --hard {}\"", ".", "format", "(", "str", "(", "commit_id", ")", "[", ":", "7", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.set_branch": [[79, 81], ["version_controller.VersionController.git_query"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.git_query"], ["", "def", "set_branch", "(", "self", ",", "branch", ")", ":", "\n", "        ", "self", ".", "git_query", "(", "\"git checkout {}\"", ".", "format", "(", "branch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.set_version": [[82, 86], ["str().lower().strip", "version_controller.VersionController.set_branch", "version_controller.VersionController.set_commit", "str().lower", "str"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.set_branch", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.set_commit"], ["", "def", "set_version", "(", "self", ",", "version", ")", ":", "\n", "        ", "version", "=", "str", "(", "version", ")", ".", "lower", "(", ")", ".", "strip", "(", "\" v\"", ")", "\n", "self", ".", "set_branch", "(", "\"v{}\"", ".", "format", "(", "version", ")", ")", "\n", "self", ".", "set_commit", "(", "self", ".", "latest_commit_in_branch", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.augmentation.elastic_deformation.elastic_transform_2d": [[6, 70], ["range", "numpy.empty", "enumerate", "numpy.expand_dims", "isinstance", "numpy.arange", "numpy.arange", "im_intrps.append", "scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter", "numpy.reshape", "numpy.reshape", "intrp().reshape", "mpunet.interpolation.RegularGridInterpolator", "mpunet.interpolation.RegularGridInterpolator.reshape().astype", "mpunet.interpolation.RegularGridInterpolator", "intrp", "mpunet.interpolation.RegularGridInterpolator.reshape", "numpy.random.rand", "numpy.random.rand", "mpunet.interpolation.RegularGridInterpolator."], "function", ["None"], ["def", "elastic_transform_2d", "(", "image", ",", "labels", ",", "alpha", ",", "sigma", ",", "bg_val", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"\n    Elastic deformation of images as described in [Simard2003]_.\n    [Simard2003] Simard, Steinkraus and Platt, \"Best Practices for\n    Convolutional Neural Networks applied to Visual Document Analysis\", in\n    Proc. of the International Conference on Document Analysis and\n    Recognition, 2003.\n\n    Modified from:\n    https://gist.github.com/chsasank/4d8f68caf01f041a6453e67fb30f8f5a\n\n    Modified to take 3 and 4 dimensional inputs\n    Deforms both the image and corresponding label file\n    image tri-linear interpolated\n    Label volumes nearest neighbour interpolated\n    \"\"\"", "\n", "if", "image", ".", "ndim", "==", "2", ":", "\n", "        ", "image", "=", "np", ".", "expand_dims", "(", "image", ",", "axis", "=", "-", "1", ")", "\n", "", "shape", "=", "image", ".", "shape", "[", ":", "2", "]", "\n", "channels", "=", "image", ".", "shape", "[", "-", "1", "]", "\n", "dtype", "=", "image", ".", "dtype", "\n", "bg_val", "=", "bg_val", "if", "isinstance", "(", "bg_val", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", "else", "[", "bg_val", "]", "*", "channels", "\n", "\n", "# Define coordinate system", "\n", "coords", "=", "np", ".", "arange", "(", "shape", "[", "0", "]", ")", ",", "np", ".", "arange", "(", "shape", "[", "1", "]", ")", "\n", "\n", "# Initialize interpolators", "\n", "im_intrps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "channels", ")", ":", "\n", "        ", "im_intrps", ".", "append", "(", "RegularGridInterpolator", "(", "coords", ",", "image", "[", "...", ",", "i", "]", ",", "\n", "method", "=", "\"linear\"", ",", "\n", "bounds_error", "=", "False", ",", "\n", "fill_value", "=", "bg_val", "[", "i", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n", "# Get random elastic deformations", "\n", "", "dx", "=", "gaussian_filter", "(", "(", "np", ".", "random", ".", "rand", "(", "*", "shape", ")", "*", "2", "-", "1", ")", ",", "sigma", ",", "\n", "mode", "=", "\"constant\"", ",", "cval", "=", "0.", ")", "*", "alpha", "\n", "dy", "=", "gaussian_filter", "(", "(", "np", ".", "random", ".", "rand", "(", "*", "shape", ")", "*", "2", "-", "1", ")", ",", "sigma", ",", "\n", "mode", "=", "\"constant\"", ",", "cval", "=", "0.", ")", "*", "alpha", "\n", "\n", "# Define sample points", "\n", "x", ",", "y", "=", "np", ".", "mgrid", "[", "0", ":", "shape", "[", "0", "]", ",", "0", ":", "shape", "[", "1", "]", "]", "\n", "indices", "=", "np", ".", "reshape", "(", "x", "+", "dx", ",", "(", "-", "1", ",", "1", ")", ")", ",", "np", ".", "reshape", "(", "y", "+", "dy", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "# Interpolate all image channels", "\n", "image", "=", "np", ".", "empty", "(", "shape", "=", "image", ".", "shape", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", ",", "intrp", "in", "enumerate", "(", "im_intrps", ")", ":", "\n", "        ", "image", "[", "...", ",", "i", "]", "=", "intrp", "(", "indices", ")", ".", "reshape", "(", "shape", ")", "\n", "\n", "# Interpolate labels", "\n", "", "if", "labels", "is", "not", "None", ":", "\n", "        ", "lab_intrp", "=", "RegularGridInterpolator", "(", "coords", ",", "labels", ",", "\n", "method", "=", "\"nearest\"", ",", "\n", "bounds_error", "=", "False", ",", "\n", "fill_value", "=", "0", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "labels", "=", "lab_intrp", "(", "indices", ")", ".", "reshape", "(", "shape", ")", ".", "astype", "(", "labels", ".", "dtype", ")", "\n", "\n", "# Interpolate and return in image shape", "\n", "", "return", "image", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.augmentation.elastic_deformation.elastic_transform_3d": [[72, 139], ["range", "numpy.empty", "enumerate", "numpy.expand_dims", "isinstance", "numpy.arange", "numpy.arange", "numpy.arange", "im_intrps.append", "scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter", "numpy.reshape", "numpy.reshape", "numpy.reshape", "intrp().reshape", "mpunet.interpolation.RegularGridInterpolator", "mpunet.interpolation.RegularGridInterpolator.reshape().astype", "mpunet.interpolation.RegularGridInterpolator", "intrp", "mpunet.interpolation.RegularGridInterpolator.reshape", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "mpunet.interpolation.RegularGridInterpolator."], "function", ["None"], ["", "def", "elastic_transform_3d", "(", "image", ",", "labels", ",", "alpha", ",", "sigma", ",", "bg_val", "=", "0.0", ")", ":", "\n", "    ", "\"\"\"\n    Elastic deformation of images as described in [Simard2003]_.\n    [Simard2003] Simard, Steinkraus and Platt, \"Best Practices for\n    Convolutional Neural Networks applied to Visual Document Analysis\", in\n    Proc. of the International Conference on Document Analysis and\n    Recognition, 2003.\n\n    Modified from:\n    https://gist.github.com/chsasank/4d8f68caf01f041a6453e67fb30f8f5a\n\n    Modified to take 3 and 4 dimensional inputs\n    Deforms both the image and corresponding label file\n    image tri-linear interpolated\n    Label volumes nearest neighbour interpolated\n    \"\"\"", "\n", "if", "image", ".", "ndim", "==", "3", ":", "\n", "        ", "image", "=", "np", ".", "expand_dims", "(", "image", ",", "axis", "=", "-", "1", ")", "\n", "", "shape", "=", "image", ".", "shape", "[", ":", "3", "]", "\n", "channels", "=", "image", ".", "shape", "[", "-", "1", "]", "\n", "dtype", "=", "image", ".", "dtype", "\n", "bg_val", "=", "bg_val", "if", "isinstance", "(", "bg_val", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", "else", "[", "bg_val", "]", "*", "channels", "\n", "\n", "# Define coordinate system", "\n", "coords", "=", "np", ".", "arange", "(", "shape", "[", "0", "]", ")", ",", "np", ".", "arange", "(", "shape", "[", "1", "]", ")", ",", "np", ".", "arange", "(", "shape", "[", "2", "]", ")", "\n", "\n", "# Initialize interpolators", "\n", "im_intrps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "channels", ")", ":", "\n", "        ", "im_intrps", ".", "append", "(", "RegularGridInterpolator", "(", "coords", ",", "image", "[", "...", ",", "i", "]", ",", "\n", "method", "=", "\"linear\"", ",", "\n", "bounds_error", "=", "False", ",", "\n", "fill_value", "=", "bg_val", "[", "i", "]", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n", "# Get random elastic deformations", "\n", "", "dx", "=", "gaussian_filter", "(", "(", "np", ".", "random", ".", "rand", "(", "*", "shape", ")", "*", "2", "-", "1", ")", ",", "sigma", ",", "\n", "mode", "=", "\"constant\"", ",", "cval", "=", "0.", ")", "*", "alpha", "\n", "dy", "=", "gaussian_filter", "(", "(", "np", ".", "random", ".", "rand", "(", "*", "shape", ")", "*", "2", "-", "1", ")", ",", "sigma", ",", "\n", "mode", "=", "\"constant\"", ",", "cval", "=", "0.", ")", "*", "alpha", "\n", "dz", "=", "gaussian_filter", "(", "(", "np", ".", "random", ".", "rand", "(", "*", "shape", ")", "*", "2", "-", "1", ")", ",", "sigma", ",", "\n", "mode", "=", "\"constant\"", ",", "cval", "=", "0.", ")", "*", "alpha", "\n", "\n", "# Define sample points", "\n", "x", ",", "y", ",", "z", "=", "np", ".", "mgrid", "[", "0", ":", "shape", "[", "0", "]", ",", "0", ":", "shape", "[", "1", "]", ",", "0", ":", "shape", "[", "2", "]", "]", "\n", "indices", "=", "np", ".", "reshape", "(", "x", "+", "dx", ",", "(", "-", "1", ",", "1", ")", ")", ",", "np", ".", "reshape", "(", "y", "+", "dy", ",", "(", "-", "1", ",", "1", ")", ")", ",", "np", ".", "reshape", "(", "z", "+", "dz", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "\n", "# Interpolate all image channels", "\n", "image", "=", "np", ".", "empty", "(", "shape", "=", "image", ".", "shape", ",", "dtype", "=", "dtype", ")", "\n", "for", "i", ",", "intrp", "in", "enumerate", "(", "im_intrps", ")", ":", "\n", "        ", "image", "[", "...", ",", "i", "]", "=", "intrp", "(", "indices", ")", ".", "reshape", "(", "shape", ")", "\n", "\n", "# Interpolate labels", "\n", "", "if", "labels", "is", "not", "None", ":", "\n", "        ", "lab_intrp", "=", "RegularGridInterpolator", "(", "coords", ",", "labels", ",", "\n", "method", "=", "\"nearest\"", ",", "\n", "bounds_error", "=", "False", ",", "\n", "fill_value", "=", "0", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "\n", "labels", "=", "lab_intrp", "(", "indices", ")", ".", "reshape", "(", "shape", ")", ".", "astype", "(", "labels", ".", "dtype", ")", "\n", "\n", "# Interpolate and return in image shape", "\n", "", "return", "image", ",", "labels", "\n", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.augmentation.augmenters.Augmenter.__call__": [[9, 11], ["None"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "batch_x", ",", "batch_y", ",", "bg_values", ",", "batch_w", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.augmentation.augmenters.Elastic.__init__": [[19, 63], ["object.__init__", "isinstance", "isinstance", "ValueError", "len", "ValueError", "ValueError", "len", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ",", "alpha", ",", "sigma", ",", "apply_prob", ",", "\n", "transformer_func", ",", "aug_weight", "=", "0.33", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            alpha: A number of tuple/list of two numbers specifying a range\n                   of alpha values to sample from in each augmentation call\n                   The alpha value determines the strength of the deformation\n            sigma: A number of tuple/list of two numbers specifying a range\n                   of sigma values to sample from in each augmentation call\n                   The sigma value determines the smoothness of the deformation\n            apply_prob: Apply the transformation only with some probability\n                        Otherwise, return the image untransformed\n            transformer_func: The deformation function, either Elastic2D or\n                              Elastic3D\n            aug_weight: If a list of weights of len(batch_x) elements is passed\n                        the aug_weight will replace the passed weight at index\n                        i if image i in batch_x is transformed.\n                        This allows for assigning a different weight to images\n                        that were augmented versus real images.\n        \"\"\"", "\n", "# Initialize base", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "isinstance", "(", "alpha", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "len", "(", "alpha", ")", "!=", "2", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid list of alphas specified '%s'. \"", "\n", "\"Should be 2 numbers.\"", "%", "alpha", ")", "\n", "", "if", "alpha", "[", "1", "]", "<=", "alpha", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"alpha upper is smaller than sigma lower (%s)\"", "%", "alpha", ")", "\n", "", "", "if", "isinstance", "(", "sigma", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "len", "(", "sigma", ")", "!=", "2", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid list of sigmas specified '%s'. \"", "\n", "\"Should be 2 numbers.\"", "%", "sigma", ")", "\n", "", "if", "sigma", "[", "1", "]", "<=", "sigma", "[", "0", "]", ":", "\n", "                ", "raise", "ValueError", "(", "\"Sigma upper is smaller than sigma lower (%s)\"", "%", "sigma", ")", "\n", "", "", "if", "apply_prob", ">", "1", "or", "apply_prob", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Apply probability is invalid with value %3.f\"", "%", "apply_prob", ")", "\n", "\n", "", "self", ".", "_alpha", "=", "alpha", "\n", "self", ".", "_sigma", "=", "sigma", "\n", "self", ".", "apply_prob", "=", "apply_prob", "\n", "self", ".", "trans_func", "=", "transformer_func", "\n", "self", ".", "weight", "=", "aug_weight", "\n", "self", ".", "__name__", "=", "\"Elastic\"", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.augmentation.augmenters.Elastic.alpha": [[64, 74], ["isinstance", "numpy.random.uniform"], "methods", ["None"], ["", "@", "property", "\n", "def", "alpha", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a randomly sampled alpha value in the range [alpha[0], alpha[1]]\n        or return the integer/float alpha if alpha is not a list\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "_alpha", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "self", ".", "_alpha", "[", "0", "]", ",", "self", ".", "_alpha", "[", "1", "]", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.augmentation.augmenters.Elastic.sigma": [[75, 85], ["isinstance", "numpy.random.uniform"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "sigma", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a randomly sampled sigma value in the range [sigma[0], sigma[1]]\n        or return the integer/float sigma if sigma is not a list\n        \"\"\"", "\n", "if", "isinstance", "(", "self", ".", "_sigma", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "self", ".", "_sigma", "[", "0", "]", ",", "self", ".", "_sigma", "[", "1", "]", ",", "1", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.augmentation.augmenters.Elastic.__call__": [[86, 109], ["enumerate", "numpy.random.rand", "zip", "augmented_x.append", "augmented_y.append", "len", "augmenters.Elastic.trans_func"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "batch_x", ",", "batch_y", ",", "bg_values", ",", "batch_w", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Deform all images in a batch of images (using linear intrp) and\n        corresponding labels (using nearest intrp)\n        \"\"\"", "\n", "# Only augment some of the images (determined by apply_prob)", "\n", "augment_mask", "=", "np", ".", "random", ".", "rand", "(", "len", "(", "batch_x", ")", ")", "<=", "self", ".", "apply_prob", "\n", "\n", "augmented_x", ",", "augmented_y", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "(", "augment", ",", "x", ",", "y", ",", "bg_vals", ")", "in", "enumerate", "(", "zip", "(", "augment_mask", ",", "\n", "batch_x", ",", "batch_y", ",", "\n", "bg_values", ")", ")", ":", "\n", "            ", "if", "augment", ":", "\n", "                ", "x", ",", "y", "=", "self", ".", "trans_func", "(", "x", ",", "y", ",", "self", ".", "alpha", ",", "self", ".", "sigma", ",", "bg_vals", ")", "\n", "if", "batch_w", "is", "not", "None", ":", "\n", "                    ", "batch_w", "[", "i", "]", "=", "self", ".", "weight", "\n", "", "", "augmented_x", ".", "append", "(", "x", ")", "\n", "augmented_y", ".", "append", "(", "y", ")", "\n", "\n", "", "if", "batch_w", "is", "not", "None", ":", "\n", "            ", "return", "augmented_x", ",", "augmented_y", ",", "batch_w", "\n", "", "else", ":", "\n", "            ", "return", "augmented_x", ",", "augmented_y", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.augmentation.augmenters.Elastic.__str__": [[110, 113], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"%s(alpha=%s, sigma=%s, apply_prob=%.3f)\"", "%", "(", "\n", "self", ".", "__name__", ",", "self", ".", "_alpha", ",", "self", ".", "_sigma", ",", "self", ".", "apply_prob", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.augmentation.augmenters.Elastic.__repr__": [[115, 117], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.augmentation.augmenters.Elastic2D.__init__": [[125, 132], ["augmenters.Elastic.__init__"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ",", "alpha", ",", "sigma", ",", "apply_prob", ")", ":", "\n", "        ", "\"\"\"\n        See docstring of Elastic (base class)\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "alpha", ",", "sigma", ",", "apply_prob", ",", "\n", "transformer_func", "=", "elastic_transform_2d", ")", "\n", "self", ".", "__name__", "=", "\"Elastic2D\"", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.augmentation.augmenters.Elastic3D.__init__": [[140, 147], ["augmenters.Elastic.__init__"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ",", "alpha", ",", "sigma", ",", "apply_prob", ")", ":", "\n", "        ", "\"\"\"\n        See docstring of Elastic (base class)\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "alpha", ",", "sigma", ",", "apply_prob", ",", "\n", "transformer_func", "=", "elastic_transform_3d", ")", "\n", "self", ".", "__name__", "=", "\"Elastic3D\"", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.augmentation.augmenters.Elastic3D.__str__": [[148, 151], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Elastic3D(alpha=%s, sigma=%s, apply_prob=%.3f)\"", "%", "(", "\n", "self", ".", "_alpha", ",", "self", ".", "_sigma", ",", "self", ".", "apply_prob", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.init_result_dict_3D": [[9, 19], ["range", "detailed_results.update", "range"], "function", ["None"], ["def", "init_result_dict_3D", "(", "all_images", ",", "n_classes", ")", ":", "\n", "    ", "if", "n_classes", "==", "1", ":", "\n", "        ", "n_classes", "=", "2", "\n", "\n", "# Prepare dictionary of per class results", "\n", "", "detailed_results", "=", "{", "\"class\"", ":", "range", "(", "1", ",", "n_classes", ")", "}", "\n", "for", "image_id", "in", "all_images", ":", "\n", "        ", "detailed_results", ".", "update", "(", "{", "image_id", ":", "[", "np", ".", "nan", "for", "_", "in", "range", "(", "1", ",", "n_classes", ")", "]", "}", ")", "\n", "\n", "", "return", "{", "image_id", ":", "[", "np", ".", "nan", "]", "for", "image_id", "in", "all_images", "}", ",", "detailed_results", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.save_all_3D": [[21, 33], ["os.path.join", "os.path.join", "mpunet.utils.create_folders", "log_results.results_to_txt", "log_results.results_to_csv", "log_results.results_to_txt", "log_results.results_to_csv"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.results_to_txt", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.results_to_csv", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.results_to_txt", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.results_to_csv"], ["", "def", "save_all_3D", "(", "results", ",", "detailed_res", ",", "out_dir", ")", ":", "\n", "    ", "txt_res_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"txt\"", ")", "\n", "csv_res_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"csv\"", ")", "\n", "\n", "# Create folders", "\n", "create_folders", "(", "[", "txt_res_dir", ",", "csv_res_dir", "]", ")", "\n", "\n", "# Save main text/csv results files", "\n", "results_to_txt", "(", "results", ",", "txt_res_dir", ",", "transpose", "=", "True", ")", "\n", "results_to_csv", "(", "results", ",", "csv_res_dir", ",", "transpose", "=", "True", ")", "\n", "results_to_txt", "(", "detailed_res", ",", "txt_res_dir", ",", "fname", "=", "\"detailed\"", ")", "\n", "results_to_csv", "(", "detailed_res", ",", "csv_res_dir", ",", "fname", "=", "\"detailed\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.init_result_dicts": [[35, 55], ["results.set_index.update", "results.set_index.update", "pandas.DataFrame", "results.set_index.set_index", "range", "inner.update", "list", "str", "pandas.DataFrame", "df.set_index", "str", "copy.deepcopy", "pc_results.items", "sorted", "range"], "function", ["None"], ["", "def", "init_result_dicts", "(", "views", ",", "all_images", ",", "n_classes", ")", ":", "\n", "    ", "if", "n_classes", "==", "1", ":", "\n", "        ", "n_classes", "=", "2", "\n", "\n", "", "results", "=", "{", "\"identifier\"", ":", "[", "image_id", "for", "image_id", "in", "sorted", "(", "all_images", ")", "]", "}", "\n", "results", ".", "update", "(", "{", "str", "(", "v", ")", ":", "[", "np", ".", "nan", "for", "_", "in", "all_images", "]", "for", "v", "in", "views", "}", ")", "\n", "results", ".", "update", "(", "{", "\"MJ\"", ":", "[", "np", ".", "nan", "for", "_", "in", "all_images", "]", "}", ")", "\n", "results", "=", "pd", ".", "DataFrame", "(", "results", ")", "\n", "results", "=", "results", ".", "set_index", "(", "\"identifier\"", ")", "\n", "\n", "# Prepare dictionary of per class results", "\n", "inner", "=", "{", "\"class\"", ":", "range", "(", "1", ",", "n_classes", ")", "}", "\n", "for", "image_id", "in", "all_images", ":", "\n", "        ", "inner", ".", "update", "(", "{", "image_id", ":", "[", "np", ".", "nan", "for", "_", "in", "range", "(", "1", ",", "n_classes", ")", "]", "}", ")", "\n", "", "views", "=", "list", "(", "views", ")", "+", "[", "\"MJ\"", "]", "\n", "pc_results", "=", "{", "str", "(", "v", ")", ":", "pd", ".", "DataFrame", "(", "copy", ".", "deepcopy", "(", "inner", ")", ")", "for", "v", "in", "views", "}", "\n", "pc_results", "=", "{", "key", ":", "df", ".", "set_index", "(", "\"class\"", ")", "for", "key", ",", "df", "in", "pc_results", ".", "items", "(", ")", "}", "\n", "# pc_results.update({\"MJ\": pd.DataFrame(copy.deepcopy(inner))})", "\n", "\n", "return", "results", ",", "pc_results", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.load_result_dicts": [[57, 88], ["re.compile", "os.path.abspath", "pandas.read_csv", "numpy.array", "numpy.all", "pandas.read_csv", "os.path.splitext", "re.findall", "len", "len", "len", "glob", "log_results.load_result_dicts.match_view_and_file"], "function", ["None"], ["", "def", "load_result_dicts", "(", "csv_dir", ",", "views", ")", ":", "\n", "    ", "from", "glob", "import", "glob", "\n", "import", "re", "\n", "regex", "=", "re", ".", "compile", "(", "r\"[-]?\\d{1}[.]\\d+\"", ")", "\n", "\n", "def", "match_view_and_file", "(", "view", ",", "path", ")", ":", "\n", "        ", "fname", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "split", "(", "path", ")", "[", "-", "1", "]", ")", "[", "0", "]", "\n", "path_view_components", "=", "np", ".", "array", "(", "re", ".", "findall", "(", "regex", ",", "fname", ")", ",", "np", ".", "float", ")", "\n", "if", "len", "(", "path_view_components", ")", "==", "0", ":", "\n", "# MJ.csv or results.csv", "\n", "            ", "return", "False", "\n", "", "assert", "len", "(", "path_view_components", ")", "==", "3", "\n", "assert", "len", "(", "view", ")", "==", "3", "\n", "return", "np", ".", "all", "(", "path_view_components", ".", "round", "(", "4", ")", "==", "view", ".", "round", "(", "4", ")", ")", "\n", "\n", "", "csv_dir", "=", "os", ".", "path", ".", "abspath", "(", "csv_dir", ")", "\n", "pc_results", "=", "{", "\"MJ\"", ":", "pd", ".", "read_csv", "(", "csv_dir", "+", "\"/MJ.csv\"", ",", "index_col", "=", "0", ")", "}", "\n", "results", "=", "pd", ".", "read_csv", "(", "csv_dir", "+", "\"/results.csv\"", ",", "index_col", "=", "0", ")", "\n", "\n", "paths", "=", "[", "p", "for", "p", "in", "glob", "(", "csv_dir", "+", "\"/*csv\"", ")", "]", "\n", "for", "v", "in", "views", ":", "\n", "        ", "found_match", "=", "False", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "if", "match_view_and_file", "(", "v", ",", "path", ")", ":", "\n", "                ", "pc_results", "[", "str", "(", "v", ")", "]", "=", "pd", ".", "read_csv", "(", "path", ",", "index_col", "=", "0", ")", "\n", "found_match", "=", "True", "\n", "", "", "if", "not", "found_match", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Could not infer relationship between view {} and view \"", "\n", "\"csv files\"", ")", "\n", "", "", "return", "results", ",", "pc_results", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.to_df": [[90, 99], ["pandas.DataFrame", "df.transpose.set_index", "df.transpose.transpose"], "function", ["None"], ["", "def", "to_df", "(", "results", ",", "transpose", "=", "False", ")", ":", "\n", "    ", "df", "=", "pd", ".", "DataFrame", "(", "results", ")", "\n", "try", ":", "\n", "        ", "df", "=", "df", ".", "set_index", "(", "\"class\"", ")", "\n", "", "except", "KeyError", ":", "\n", "        ", "pass", "\n", "", "if", "transpose", ":", "\n", "        ", "df", "=", "df", ".", "transpose", "(", ")", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.results_to_csv": [[101, 109], ["log_results.to_df", "open", "out_file.write", "os.path.join", "to_df.to_csv"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.to_df", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "def", "results_to_csv", "(", "results", ",", "res_path", ",", "fname", "=", "None", ",", "transpose", "=", "False", ")", ":", "\n", "    ", "if", "fname", "is", "None", ":", "\n", "        ", "fname", "=", "\"results\"", "\n", "\n", "# Save results", "\n", "", "df", "=", "to_df", "(", "results", ",", "transpose", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "res_path", ",", "\"%s.csv\"", "%", "fname", ")", ",", "\"w\"", ")", "as", "out_file", ":", "\n", "        ", "out_file", ".", "write", "(", "df", ".", "to_csv", "(", "index", "=", "True", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.results_to_txt": [[111, 119], ["log_results.to_df", "open", "out_file.write", "os.path.join", "to_df.to_string"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.to_df", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "", "def", "results_to_txt", "(", "results", ",", "res_path", ",", "fname", "=", "None", ",", "transpose", "=", "False", ")", ":", "\n", "    ", "if", "fname", "is", "None", ":", "\n", "        ", "fname", "=", "\"results\"", "\n", "\n", "# Save results", "\n", "", "df", "=", "to_df", "(", "results", ",", "transpose", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "res_path", ",", "\"%s.txt\"", "%", "fname", ")", ",", "\"w\"", ")", "as", "out_file", ":", "\n", "        ", "out_file", ".", "write", "(", "df", ".", "to_string", "(", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.save_all": [[121, 140], ["os.path.join", "os.path.join", "mpunet.utils.create_folders", "log_results.results_to_txt", "log_results.results_to_csv", "str().replace().strip().replace().replace", "log_results.results_to_txt", "log_results.results_to_csv", "str().replace().strip().replace", "str().replace().strip", "str().replace", "str"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.results_to_txt", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.results_to_csv", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.results_to_txt", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.log_results.results_to_csv"], ["", "", "def", "save_all", "(", "results", ",", "pc_results", ",", "out_dir", ")", ":", "\n", "\n", "# Get output paths", "\n", "    ", "txt_res_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"txt\"", ")", "\n", "csv_res_dir", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"csv\"", ")", "\n", "\n", "# Create folders", "\n", "create_folders", "(", "[", "txt_res_dir", ",", "csv_res_dir", "]", ")", "\n", "\n", "# Save main text/csv results files", "\n", "results_to_txt", "(", "results", ",", "txt_res_dir", ")", "\n", "results_to_csv", "(", "results", ",", "csv_res_dir", ")", "\n", "\n", "# Write detailed results", "\n", "for", "view", "in", "pc_results", ":", "\n", "        ", "r", "=", "pc_results", "[", "view", "]", "\n", "view_str", "=", "str", "(", "view", ")", ".", "replace", "(", "\"[\"", ",", "\"\"", ")", ".", "strip", "(", ")", ".", "replace", "(", "\"]\"", ",", "\"\"", ")", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "results_to_txt", "(", "r", ",", "txt_res_dir", ",", "fname", "=", "view_str", ")", "\n", "results_to_csv", "(", "r", ",", "csv_res_dir", ",", "fname", "=", "view_str", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.default_logger.ScreenLogger.__init__": [[9, 11], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "print_to_screen", "=", "True", ")", ":", "\n", "        ", "self", ".", "print_to_screen", "=", "print_to_screen", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.default_logger.ScreenLogger.__call__": [[12, 20], ["print"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "\n", "*", "args", ",", "\n", "print_to_screen", "=", "None", ",", "\n", "print_calling_method", "=", "None", ",", "\n", "no_print", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "print_to_screen", "and", "not", "no_print", ":", "\n", "            ", "print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.default_logger.ScreenLogger.warn": [[21, 23], ["default_logger.ScreenLogger.__call__"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.regular_grid_interpolator.RegularGridInterpolator.__call__"], ["", "", "def", "warn", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__call__", "(", "\"[WARNING]\"", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.default_logger.ScreenLogger.__enter__": [[24, 26], ["None"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.default_logger.ScreenLogger.__exit__": [[27, 29], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.__init__": [[10, 46], ["os.path.abspath", "mpunet.utils.create_folders", "threading.Lock", "os.path.join", "ValueError", "str"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.create_folders", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["    ", "def", "__init__", "(", "self", ",", "base_path", ",", "print_to_screen", "=", "True", ",", "active_file", "=", "\"log.txt\"", ",", "\n", "overwrite_existing", "=", "False", ",", "append_existing", "=", "False", ",", "\n", "print_calling_method", "=", "True", ",", "no_sub_folder", "=", "False", ",", "\n", "log_prefix", "=", "\"\"", ",", "warnings_file", "=", "\"warnings\"", ")", ":", "\n", "        ", "self", ".", "base_path", "=", "os", ".", "path", ".", "abspath", "(", "base_path", ")", "\n", "if", "not", "no_sub_folder", ":", "\n", "            ", "self", ".", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_path", ",", "\"logs\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "path", "=", "self", ".", "base_path", "\n", "", "create_folders", "(", "[", "self", ".", "path", "]", ")", "\n", "if", "overwrite_existing", "and", "append_existing", ":", "\n", "            ", "raise", "ValueError", "(", "\"Cannot set both 'overwrite_existing' and \"", "\n", "\"'append_existing' to True.\"", ")", "\n", "", "self", ".", "overwrite_existing", "=", "overwrite_existing", "\n", "self", ".", "append_existing", "=", "append_existing", "\n", "self", ".", "_enabled", "=", "True", "\n", "\n", "# Get built in print function", "\n", "# (if overwritten globally, Logger still maintains a reference to the", "\n", "# true print function)", "\n", "self", ".", "print_f", "=", "__builtins__", "[", "\"print\"", "]", "\n", "\n", "# Print options", "\n", "self", ".", "separator", "=", "\"-\"", "*", "80", "\n", "self", ".", "print_to_screen", "=", "print_to_screen", "\n", "self", ".", "print_calling_method", "=", "print_calling_method", "\n", "\n", "# Set paths to log files", "\n", "self", ".", "log_files", "=", "{", "}", "\n", "self", ".", "currently_logging", "=", "{", "}", "\n", "self", ".", "prefix", "=", "\"\"", "if", "log_prefix", "is", "None", "else", "str", "(", "log_prefix", ")", "\n", "self", ".", "active_log_file", "=", "active_file", "\n", "self", ".", "warnings_file", "=", "warnings_file", "\n", "\n", "# For using the logger from multiple threads", "\n", "self", ".", "lock", "=", "Lock", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.__repr__": [[47, 49], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"<mpunet.logging.Logger object>\"", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.__str__": [[50, 55], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Logger(base_path=%s, print_to_screen=%s, \"", "\"overwrite_existing=%s, append_existing=%s)\"", "%", "(", "self", ".", "base_path", ",", "self", ".", "print_to_screen", ",", "\n", "self", ".", "overwrite_existing", ",", "self", ".", "append_existing", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.new_log_file": [[56, 74], ["os.path.join", "os.path.exists", "logger.Logger._add_to_log", "os.remove", "OSError"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger._add_to_log"], ["", "def", "new_log_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "path", ",", "filename", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "            ", "if", "self", ".", "overwrite_existing", ":", "\n", "                ", "os", ".", "remove", "(", "file_path", ")", "\n", "", "elif", "not", "self", ".", "append_existing", ":", "\n", "                ", "raise", "OSError", "(", "\"Logging path: %s already exists. \"", "\n", "\"Initialize Logger with overwrite_existing=True \"", "\n", "\"or append_existing=True to overwrite or continue\"", "\n", "\" writing to the existing file.\"", "%", "file_path", ")", "\n", "\n", "", "", "self", ".", "log_files", "[", "filename", "]", "=", "file_path", "\n", "self", ".", "currently_logging", "[", "filename", "]", "=", "None", "\n", "\n", "# Add reference to model folder in log", "\n", "ref", "=", "\"Log for model in: %s\"", "%", "self", ".", "base_path", "\n", "self", ".", "_add_to_log", "(", "ref", ",", "no_print", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.enabled": [[79, 82], ["bool"], "methods", ["None"], ["", "@", "enabled", ".", "setter", "\n", "def", "enabled", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_enabled", "=", "bool", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.disabled_in_context": [[83, 88], ["None"], "methods", ["None"], ["", "@", "contextmanager", "\n", "def", "disabled_in_context", "(", "self", ")", ":", "\n", "        ", "self", ".", "enabled", "=", "False", "\n", "yield", "self", "\n", "self", ".", "enabled", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.print_to_screen": [[93, 97], ["mpunet.utils.decorators.accepts"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.decorators.accepts"], ["", "@", "print_to_screen", ".", "setter", "\n", "@", "accepts", "(", "bool", ")", "\n", "def", "print_to_screen", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_print_to_screen", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.print_calling_method": [[102, 106], ["mpunet.utils.decorators.accepts"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.decorators.accepts"], ["", "@", "print_calling_method", ".", "setter", "\n", "@", "accepts", "(", "bool", ")", "\n", "def", "print_calling_method", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_print_calling_method", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.log": [[107, 111], ["open", "log_f.read"], "methods", ["None"], ["", "@", "property", "\n", "def", "log", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "log_files", "[", "self", ".", "active_log_file", "]", ",", "\"r\"", ")", "as", "log_f", ":", "\n", "            ", "return", "log_f", ".", "read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.active_log_file": [[116, 127], ["mpunet.utils.decorators.accepts", "os.path.splitext", "file_name.replace.replace.replace", "logger.Logger.new_log_file", "logger.Logger.prefix.rstrip"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.decorators.accepts", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.new_log_file"], ["", "@", "active_log_file", ".", "setter", "\n", "@", "accepts", "(", "str", ")", "\n", "def", "active_log_file", "(", "self", ",", "file_name", ")", ":", "\n", "        ", "if", "self", ".", "prefix", ":", "\n", "            ", "file_name", "=", "file_name", ".", "replace", "(", "self", ".", "prefix", "+", "\"_\"", ",", "\"\"", ")", "\n", "file_name", "=", "self", ".", "prefix", ".", "rstrip", "(", "\"_\"", ")", "+", "\"_\"", "+", "file_name", "\n", "", "file_name", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "file_name", ")", "\n", "file_name", "=", "\"%s%s\"", "%", "(", "file_name", ",", "ext", "or", "\".txt\"", ")", "\n", "self", ".", "_active_log_file", "=", "file_name", "\n", "if", "file_name", "not", "in", "self", ".", "log_files", ":", "\n", "            ", "self", ".", "new_log_file", "(", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger._add_to_log": [[128, 134], ["logger.Logger.print_f", "open", "logger.Logger.print_f"], "methods", ["None"], ["", "", "def", "_add_to_log", "(", "self", ",", "*", "args", ",", "no_print", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "print_to_screen", "and", "not", "no_print", ":", "\n", "            ", "self", ".", "print_f", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "with", "open", "(", "self", ".", "log_files", "[", "self", ".", "active_log_file", "]", ",", "\"a\"", ")", "as", "log_file", ":", "\n", "            ", "self", ".", "print_f", "(", "*", "args", ",", "file", "=", "log_file", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger._log": [[135, 146], ["logger.Logger._add_to_log", "logger.Logger._add_to_log"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger._add_to_log", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger._add_to_log"], ["", "", "def", "_log", "(", "self", ",", "caller", ",", "print_calling_owerwrite", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "caller", "!=", "self", ".", "currently_logging", "[", "self", ".", "active_log_file", "]", ":", "\n", "            ", "self", ".", "currently_logging", "[", "self", ".", "active_log_file", "]", "=", "caller", "\n", "if", "print_calling_owerwrite", "is", "not", "None", ":", "\n", "                ", "print_calling", "=", "print_calling_owerwrite", "\n", "", "else", ":", "\n", "                ", "print_calling", "=", "self", ".", "print_calling_method", "\n", "", "if", "print_calling", ":", "\n", "                ", "self", ".", "_add_to_log", "(", "\"%s\\n>>> Logged by: %s\"", "%", "(", "self", ".", "separator", ",", "\n", "self", ".", "currently_logging", "[", "self", ".", "active_log_file", "]", ")", ")", "\n", "", "", "self", ".", "_add_to_log", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.__call__": [[147, 160], ["logger.Logger._log", "inspect.stack", "caller[].rpartition"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader._log"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "\n", "print_calling_method", "=", "None", ",", "\n", "out_file", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "enabled", ":", "\n", "            ", "return", "None", "\n", "", "with", "self", ".", "lock", ":", "\n", "            ", "cur_file", "=", "self", ".", "active_log_file", "\n", "self", ".", "active_log_file", "=", "out_file", "or", "cur_file", "\n", "caller", "=", "inspect", ".", "stack", "(", ")", "[", "1", "]", "\n", "caller", "=", "\"'%s' in '%s'\"", "%", "(", "caller", "[", "3", "]", ",", "caller", "[", "1", "]", ".", "rpartition", "(", "\"/\"", ")", "[", "2", "]", ")", "\n", "self", ".", "_log", "(", "caller", ",", "print_calling_method", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "active_log_file", "=", "cur_file", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn": [[161, 166], ["logger.Logger.__call__"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.regular_grid_interpolator.RegularGridInterpolator.__call__"], ["", "", "def", "warn", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__call__", "(", "\"[WARNING]\"", ",", "*", "args", ",", "\n", "print_calling_method", "=", "False", ",", "\n", "out_file", "=", "self", ".", "warnings_file", ",", "\n", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.metrics.dice": [[13, 24], ["numpy.array().flatten().astype", "numpy.array().flatten().astype", "numpy.array().flatten", "numpy.array().flatten", "np.array().flatten().astype.sum", "numpy.logical_and().sum", "np.array().flatten().astype.sum", "numpy.array", "numpy.array", "numpy.logical_and"], "function", ["None"], ["def", "dice", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the Soerensen dice coefficient between two binary sets\n    \"\"\"", "\n", "# Flatten and bool the ground truth and predicted labels", "\n", "s1", "=", "np", ".", "array", "(", "y_true", ")", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "s2", "=", "np", ".", "array", "(", "y_pred", ")", ".", "flatten", "(", ")", ".", "astype", "(", "np", ".", "bool", ")", "\n", "\n", "# Calculate dice", "\n", "return", "(", "smooth", "+", "2", "*", "np", ".", "logical_and", "(", "s1", ",", "s2", ")", ".", "sum", "(", ")", ")", "/", "(", "smooth", "+", "s1", ".", "sum", "(", ")", "+", "s2", ".", "sum", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.metrics.dice_all": [[26, 53], ["numpy.empty", "np.empty.fill", "enumerate", "numpy.unique", "numpy.arange", "max", "numpy.any", "numpy.any", "metrics.dice", "numpy.where", "numpy.any"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.fill", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.metrics.dice"], ["", "def", "dice_all", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ",", "n_classes", "=", "None", ",", "ignore_zero", "=", "True", ",", "\n", "skip_if_no_y", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Calculates the Soerensen dice coefficients for all unique classes\n    \"\"\"", "\n", "# Get array of unique classes in true label array", "\n", "if", "n_classes", "is", "None", ":", "\n", "        ", "classes", "=", "np", ".", "unique", "(", "y_true", ")", "\n", "", "else", ":", "\n", "        ", "classes", "=", "np", ".", "arange", "(", "max", "(", "2", ",", "n_classes", ")", ")", "\n", "# Ignore background class?", "\n", "", "if", "ignore_zero", ":", "\n", "        ", "classes", "=", "classes", "[", "np", ".", "where", "(", "classes", "!=", "0", ")", "]", "\n", "\n", "# Calculate dice for all targets", "\n", "", "dice_coeffs", "=", "np", ".", "empty", "(", "shape", "=", "classes", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "dice_coeffs", ".", "fill", "(", "np", ".", "nan", ")", "\n", "for", "idx", ",", "_class", "in", "enumerate", "(", "classes", ")", ":", "\n", "        ", "s1", "=", "y_true", "==", "_class", "\n", "if", "skip_if_no_y", "and", "not", "np", ".", "any", "(", "s1", ")", ":", "\n", "            ", "continue", "\n", "", "s2", "=", "y_pred", "==", "_class", "\n", "\n", "if", "np", ".", "any", "(", "s1", ")", "or", "np", ".", "any", "(", "s2", ")", ":", "\n", "            ", "d", "=", "dice", "(", "s1", ",", "s2", ",", "smooth", "=", "smooth", ")", "\n", "dice_coeffs", "[", "idx", "]", "=", "d", "\n", "", "", "return", "dice_coeffs", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.metrics.class_wise_kappa": [[55, 75], ["numpy.empty", "np.empty.fill", "enumerate", "numpy.unique", "numpy.arange", "max", "numpy.any", "numpy.any", "cohen_kappa_score", "numpy.where"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.fill"], ["", "def", "class_wise_kappa", "(", "true", ",", "pred", ",", "n_classes", "=", "None", ",", "ignore_zero", "=", "True", ")", ":", "\n", "    ", "from", "sklearn", ".", "metrics", "import", "cohen_kappa_score", "\n", "if", "n_classes", "is", "None", ":", "\n", "        ", "classes", "=", "np", ".", "unique", "(", "true", ")", "\n", "", "else", ":", "\n", "        ", "classes", "=", "np", ".", "arange", "(", "max", "(", "2", ",", "n_classes", ")", ")", "\n", "# Ignore background class?", "\n", "", "if", "ignore_zero", ":", "\n", "        ", "classes", "=", "classes", "[", "np", ".", "where", "(", "classes", "!=", "0", ")", "]", "\n", "\n", "# Calculate kappa for all targets", "\n", "", "kappa_scores", "=", "np", ".", "empty", "(", "shape", "=", "classes", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "kappa_scores", ".", "fill", "(", "np", ".", "nan", ")", "\n", "for", "idx", ",", "_class", "in", "enumerate", "(", "classes", ")", ":", "\n", "        ", "s1", "=", "true", "==", "_class", "\n", "s2", "=", "pred", "==", "_class", "\n", "\n", "if", "np", ".", "any", "(", "s1", ")", "or", "np", ".", "any", "(", "s2", ")", ":", "\n", "            ", "kappa_scores", "[", "idx", "]", "=", "cohen_kappa_score", "(", "s1", ",", "s2", ")", "\n", "", "", "return", "kappa_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.metrics.one_class_dice": [[77, 82], ["tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "function", ["None"], ["", "def", "one_class_dice", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1.0", ")", ":", "\n", "# Predict", "\n", "    ", "y_pred", "=", "tf", ".", "cast", "(", "y_pred", ">", "0.5", ",", "tf", ".", "float32", ")", "\n", "\n", "return", "(", "smooth", "+", "2.0", "*", "tf", ".", "reduce_sum", "(", "y_true", "*", "y_pred", ")", ")", "/", "(", "smooth", "+", "tf", ".", "reduce_sum", "(", "y_true", ")", "+", "tf", ".", "reduce_sum", "(", "y_pred", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.metrics.sparse_fg_recall": [[84, 95], ["tensorflow.cast", "tensorflow.cast", "tensorflow.not_equal", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.reduce_mean", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "tensorflow.argmax", "tensorflow.equal"], "function", ["None"], ["", "def", "sparse_fg_recall", "(", "y_true", ",", "y_pred", ",", "bg_class", "=", "0", ")", ":", "\n", "# Get MAP estimates", "\n", "    ", "y_true", "=", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "y_true", ",", "[", "-", "1", "]", ")", ",", "tf", ".", "int32", ")", "\n", "y_pred", "=", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "tf", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", ",", "[", "-", "1", "]", ")", ",", "tf", ".", "int32", ")", "\n", "\n", "# Remove background", "\n", "mask", "=", "tf", ".", "not_equal", "(", "y_true", ",", "bg_class", ")", "\n", "y_true", "=", "tf", ".", "boolean_mask", "(", "y_true", ",", "mask", ")", "\n", "y_pred", "=", "tf", ".", "boolean_mask", "(", "y_pred", ",", "mask", ")", "\n", "\n", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "y_true", ",", "y_pred", ")", ",", "tf", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.metrics.sparse_mean_fg_f1": [[97, 116], ["tensorflow.argmax", "tensorflow.confusion_matrix", "tensorflow.diag_part", "tensorflow.diag_part", "tensorflow.reduce_mean", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "function", ["None"], ["", "def", "sparse_mean_fg_f1", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "y_pred", "=", "tf", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Get confusion matrix", "\n", "cm", "=", "tf", ".", "confusion_matrix", "(", "tf", ".", "reshape", "(", "y_true", ",", "[", "-", "1", "]", ")", ",", "\n", "tf", ".", "reshape", "(", "y_pred", ",", "[", "-", "1", "]", ")", ")", "\n", "\n", "# Get precisions", "\n", "TP", "=", "tf", ".", "diag_part", "(", "cm", ")", "\n", "precisions", "=", "TP", "/", "tf", ".", "reduce_sum", "(", "cm", ",", "axis", "=", "0", ")", "\n", "\n", "# Get recalls", "\n", "TP", "=", "tf", ".", "diag_part", "(", "cm", ")", "\n", "recalls", "=", "TP", "/", "tf", ".", "reduce_sum", "(", "cm", ",", "axis", "=", "1", ")", "\n", "\n", "# Get F1s", "\n", "f1s", "=", "(", "2", "*", "precisions", "*", "recalls", ")", "/", "(", "precisions", "+", "recalls", ")", "\n", "\n", "return", "tf", ".", "reduce_mean", "(", "f1s", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.metrics.sparse_mean_fg_precision": [[118, 130], ["tensorflow.argmax", "tensorflow.confusion_matrix", "tensorflow.diag_part", "tensorflow.reduce_mean", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum"], "function", ["None"], ["", "def", "sparse_mean_fg_precision", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "y_pred", "=", "tf", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Get confusion matrix", "\n", "cm", "=", "tf", ".", "confusion_matrix", "(", "tf", ".", "reshape", "(", "y_true", ",", "[", "-", "1", "]", ")", ",", "\n", "tf", ".", "reshape", "(", "y_pred", ",", "[", "-", "1", "]", ")", ")", "\n", "\n", "# Get precisions", "\n", "TP", "=", "tf", ".", "diag_part", "(", "cm", ")", "\n", "precisions", "=", "TP", "/", "tf", ".", "reduce_sum", "(", "cm", ",", "axis", "=", "0", ")", "\n", "\n", "return", "tf", ".", "reduce_mean", "(", "precisions", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.metrics.sparse_mean_fg_recall": [[132, 144], ["tensorflow.argmax", "tensorflow.confusion_matrix", "tensorflow.diag_part", "tensorflow.reduce_mean", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum"], "function", ["None"], ["", "def", "sparse_mean_fg_recall", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "y_pred", "=", "tf", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# Get confusion matrix", "\n", "cm", "=", "tf", ".", "confusion_matrix", "(", "tf", ".", "reshape", "(", "y_true", ",", "[", "-", "1", "]", ")", ",", "\n", "tf", ".", "reshape", "(", "y_pred", ",", "[", "-", "1", "]", ")", ")", "\n", "\n", "# Get precisions", "\n", "TP", "=", "tf", ".", "diag_part", "(", "cm", ")", "\n", "recalls", "=", "TP", "/", "tf", ".", "reduce_sum", "(", "cm", ",", "axis", "=", "1", ")", "\n", "\n", "return", "tf", ".", "reduce_mean", "(", "recalls", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.metrics.sparse_fg_precision": [[146, 157], ["tensorflow.cast", "tensorflow.cast", "tensorflow.not_equal", "tensorflow.boolean_mask", "tensorflow.boolean_mask", "tensorflow.reduce_mean", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "tensorflow.argmax", "tensorflow.equal"], "function", ["None"], ["", "def", "sparse_fg_precision", "(", "y_true", ",", "y_pred", ",", "bg_class", "=", "0", ")", ":", "\n", "# Get MAP estimates", "\n", "    ", "y_true", "=", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "y_true", ",", "[", "-", "1", "]", ")", ",", "tf", ".", "int32", ")", "\n", "y_pred", "=", "tf", ".", "cast", "(", "tf", ".", "reshape", "(", "tf", ".", "argmax", "(", "y_pred", ",", "axis", "=", "-", "1", ")", ",", "[", "-", "1", "]", ")", ",", "tf", ".", "int32", ")", "\n", "\n", "# Remove background", "\n", "mask", "=", "tf", ".", "not_equal", "(", "y_pred", ",", "bg_class", ")", "\n", "y_true", "=", "tf", ".", "boolean_mask", "(", "y_true", ",", "mask", ")", "\n", "y_pred", "=", "tf", ".", "boolean_mask", "(", "y_pred", ",", "mask", ")", "\n", "\n", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "tf", ".", "equal", "(", "y_true", ",", "y_pred", ")", ",", "tf", ".", "float32", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions.SparseJaccardDistanceLoss.__init__": [[67, 77], ["tensorflow.python.keras.losses.LossFunctionWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ",", "\n", "reduction", ",", "\n", "smooth", "=", "1", ",", "\n", "name", "=", "'sparse_jaccard_distance_loss'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SparseJaccardDistanceLoss", ",", "self", ")", ".", "__init__", "(", "\n", "sparse_jaccard_distance_loss", ",", "\n", "name", "=", "name", ",", "\n", "reduction", "=", "reduction", ",", "\n", "smooth", "=", "smooth", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions.SparseDiceLoss.__init__": [[102, 112], ["tensorflow.python.keras.losses.LossFunctionWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ",", "\n", "reduction", ",", "\n", "smooth", "=", "1", ",", "\n", "name", "=", "'sparse_dice_loss'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "SparseDiceLoss", ",", "self", ")", ".", "__init__", "(", "\n", "sparse_dice_loss", ",", "\n", "name", "=", "name", ",", "\n", "reduction", "=", "reduction", ",", "\n", "smooth", "=", "smooth", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions.SparseExponentialLogarithmicLoss.__init__": [[152, 163], ["tensorflow.python.keras.losses.LossFunctionWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ",", "reduction", ",", "gamma_dice", "=", "0.3", ",", "gamma_cross", "=", "0.3", ",", "\n", "weight_dice", "=", "1", ",", "weight_cross", "=", "1", ",", "\n", "name", "=", "\"sparse_exponential_logarithmic_loss\"", ")", ":", "\n", "        ", "super", "(", "SparseExponentialLogarithmicLoss", ",", "self", ")", ".", "__init__", "(", "\n", "sparse_exponential_logarithmic_loss", ",", "\n", "name", "=", "name", ",", "\n", "reduction", "=", "reduction", ",", "\n", "gamma_dice", "=", "gamma_dice", ",", "\n", "gamma_cross", "=", "gamma_cross", ",", "\n", "weight_dice", "=", "weight_dice", ",", "\n", "weight_cross", "=", "weight_cross", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions.SparseFocalLoss.__init__": [[196, 204], ["tensorflow.python.keras.losses.LossFunctionWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ",", "reduction", ",", "gamma", "=", "2", ",", "\n", "class_weights", "=", "None", ",", "name", "=", "\"sparse_focal_loss\"", ")", ":", "\n", "        ", "super", "(", "SparseFocalLoss", ",", "self", ")", ".", "__init__", "(", "\n", "sparse_focal_loss", ",", "\n", "name", "=", "name", ",", "\n", "reduction", "=", "reduction", ",", "\n", "gamma", "=", "gamma", ",", "\n", "class_weights", "=", "class_weights", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions.SparseGeneralizedDiceLoss.__init__": [[259, 266], ["tensorflow.python.keras.losses.LossFunctionWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ",", "reduction", ",", "type_weight", "=", "\"Square\"", ",", "\n", "name", "=", "'sparse_generalized_dice_loss'", ")", ":", "\n", "        ", "super", "(", "SparseGeneralizedDiceLoss", ",", "self", ")", ".", "__init__", "(", "\n", "sparse_generalized_dice_loss", ",", "\n", "name", "=", "name", ",", "\n", "reduction", "=", "reduction", ",", "\n", "type_weight", "=", "type_weight", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions._to_tensor": [[5, 21], ["tensorflow.convert_to_tensor", "tensorflow.cast"], "function", ["None"], ["def", "_to_tensor", "(", "x", ",", "dtype", ")", ":", "\n", "    ", "\"\"\"Convert the input `x` to a tensor of type `dtype`.\n\n    OBS: Code implemented by Tensorflow\n\n    # Arguments\n        x: An object to be converted (numpy array, list, tensors).\n        dtype: The destination type.\n\n    # Returns\n        A tensor.\n    \"\"\"", "\n", "x", "=", "tf", ".", "convert_to_tensor", "(", "x", ")", "\n", "if", "x", ".", "dtype", "!=", "dtype", ":", "\n", "        ", "x", "=", "tf", ".", "cast", "(", "x", ",", "dtype", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions._get_shapes_and_one_hot": [[23, 31], ["y_pred.get_shape", "tensorflow.cond", "tensorflow.reshape", "tensorflow.one_hot", "tensorflow.equal", "tensorflow.cast", "tensorflow.shape", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.shape", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.shape"], ["", "def", "_get_shapes_and_one_hot", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "shape", "=", "y_pred", ".", "get_shape", "(", ")", "\n", "n_classes", "=", "shape", "[", "-", "1", "]", "\n", "# Squeeze dim -1 if it is == 1, otherwise leave it", "\n", "dims", "=", "tf", ".", "cond", "(", "tf", ".", "equal", "(", "y_true", ".", "shape", "[", "-", "1", "]", "or", "-", "1", ",", "1", ")", ",", "lambda", ":", "tf", ".", "shape", "(", "y_true", ")", "[", ":", "-", "1", "]", ",", "lambda", ":", "tf", ".", "shape", "(", "y_true", ")", ")", "\n", "y_true", "=", "tf", ".", "reshape", "(", "y_true", ",", "dims", ")", "\n", "y_true", "=", "tf", ".", "one_hot", "(", "tf", ".", "cast", "(", "y_true", ",", "tf", ".", "uint8", ")", ",", "depth", "=", "n_classes", ")", "\n", "return", "y_true", ",", "shape", ",", "n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions.sparse_jaccard_distance_loss": [[33, 63], ["loss_functions._get_shapes_and_one_hot", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "range", "tensorflow.reduce_mean", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions._get_shapes_and_one_hot"], ["", "def", "sparse_jaccard_distance_loss", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Jaccard = (|X & Y|)/ (|X|+ |Y| - |X & Y|)\n            = sum(|A*B|)/(sum(|A|)+sum(|B|)-sum(|A*B|))\n\n    The jaccard distance loss is usefull for unbalanced datasets. This has been\n    shifted so it converges on 0 and is smoothed to avoid exploding or disapearing\n    gradient.\n\n    Approximates the class-wise jaccard distance computed per-batch element\n    across spatial image dimensions. Returns the 1 - mean(per_class_distance)\n    for each batch element.\n\n    :param y_true:\n    :param y_pred:\n    :param smooth:\n    :return:\n\n    Ref: https://en.wikipedia.org/wiki/Jaccard_index\n\n    @url: https://gist.github.com/wassname/f1452b748efcbeb4cb9b1d059dce6f96\n    @author: wassname\n    \"\"\"", "\n", "y_true", ",", "shape", ",", "n_classes", "=", "_get_shapes_and_one_hot", "(", "y_true", ",", "y_pred", ")", "\n", "reduction_dims", "=", "range", "(", "len", "(", "shape", ")", ")", "[", "1", ":", "-", "1", "]", "\n", "\n", "intersection", "=", "tf", ".", "reduce_sum", "(", "y_true", "*", "y_pred", ",", "axis", "=", "reduction_dims", ")", "\n", "sum_", "=", "tf", ".", "reduce_sum", "(", "y_true", "+", "y_pred", ",", "axis", "=", "reduction_dims", ")", "\n", "jac", "=", "(", "intersection", "+", "smooth", ")", "/", "(", "sum_", "-", "intersection", "+", "smooth", ")", "\n", "return", "1.0", "-", "tf", ".", "reduce_mean", "(", "jac", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions.sparse_dice_loss": [[80, 98], ["loss_functions._get_shapes_and_one_hot", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "range", "tensorflow.reduce_mean", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions._get_shapes_and_one_hot"], ["", "", "def", "sparse_dice_loss", "(", "y_true", ",", "y_pred", ",", "smooth", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n    Approximates the class-wise dice coefficient computed per-batch element\n    across spatial image dimensions. Returns the 1 - mean(per_class_dice) for\n    each batch element.\n\n    :param y_true:\n    :param y_pred:\n    :param smooth:\n    :return:\n    \"\"\"", "\n", "y_true", ",", "shape", ",", "n_classes", "=", "_get_shapes_and_one_hot", "(", "y_true", ",", "y_pred", ")", "\n", "reduction_dims", "=", "range", "(", "len", "(", "shape", ")", ")", "[", "1", ":", "-", "1", "]", "\n", "\n", "intersection", "=", "tf", ".", "reduce_sum", "(", "y_true", "*", "y_pred", ",", "axis", "=", "reduction_dims", ")", "\n", "union", "=", "tf", ".", "reduce_sum", "(", "y_true", "+", "y_pred", ",", "axis", "=", "reduction_dims", ")", "\n", "dice", "=", "(", "2", "*", "intersection", "+", "smooth", ")", "/", "(", "union", "+", "smooth", ")", "\n", "return", "1.0", "-", "tf", ".", "reduce_mean", "(", "dice", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions.sparse_exponential_logarithmic_loss": [[115, 146], ["loss_functions._get_shapes_and_one_hot", "loss_functions._to_tensor", "tensorflow.clip_by_value", "tensorflow.math.pow", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "range", "tensorflow.reduce_sum", "tensorflow.math.pow", "len", "tensorflow.reduce_sum", "tensorflow.math.log", "tensorflow.math.log"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions._get_shapes_and_one_hot", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions._to_tensor", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log"], ["", "", "def", "sparse_exponential_logarithmic_loss", "(", "y_true", ",", "y_pred", ",", "gamma_dice", ",", "\n", "gamma_cross", ",", "weight_dice", ",", "\n", "weight_cross", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n\n    :param y_true:\n    :param y_pred:\n    :param smooth:\n    :return:\n    \"\"\"", "\n", "y_true", ",", "shape", ",", "n_classes", "=", "_get_shapes_and_one_hot", "(", "y_true", ",", "y_pred", ")", "\n", "reduction_dims", "=", "range", "(", "len", "(", "shape", ")", ")", "[", "1", ":", "-", "1", "]", "\n", "\n", "# Clip for numerical stability", "\n", "_epsilon", "=", "_to_tensor", "(", "10e-8", ",", "y_pred", ".", "dtype", ".", "base_dtype", ")", "\n", "y_pred", "=", "tf", ".", "clip_by_value", "(", "y_pred", ",", "_epsilon", ",", "1.", "-", "_epsilon", ")", "\n", "\n", "# Compute exp log dice", "\n", "intersect", "=", "2", "*", "tf", ".", "reduce_sum", "(", "y_true", "*", "y_pred", ",", "axis", "=", "reduction_dims", ")", "+", "1", "\n", "union", "=", "tf", ".", "reduce_sum", "(", "y_true", "+", "y_pred", ",", "axis", "=", "reduction_dims", ")", "+", "1", "\n", "exp_log_dice", "=", "tf", ".", "math", ".", "pow", "(", "-", "tf", ".", "math", ".", "log", "(", "intersect", "/", "union", ")", ",", "gamma_dice", ")", "\n", "mean_exp_log_dice", "=", "tf", ".", "reduce_mean", "(", "exp_log_dice", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "# Compute exp cross entropy", "\n", "entropy", "=", "tf", ".", "reduce_sum", "(", "y_true", "*", "-", "tf", ".", "math", ".", "log", "(", "y_pred", ")", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "exp_entropy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "math", ".", "pow", "(", "entropy", ",", "gamma_cross", ")", ",", "axis", "=", "reduction_dims", ")", "\n", "\n", "# Compute output", "\n", "res", "=", "weight_dice", "*", "mean_exp_log_dice", "+", "weight_cross", "*", "exp_entropy", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions.sparse_focal_loss": [[166, 190], ["loss_functions._get_shapes_and_one_hot", "loss_functions._to_tensor", "tensorflow.clip_by_value", "tensorflow.math.log", "tensorflow.math.pow", "tensorflow.reduce_mean", "range", "tensorflow.reduce_sum", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions._get_shapes_and_one_hot", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions._to_tensor", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log"], ["", "", "def", "sparse_focal_loss", "(", "y_true", ",", "y_pred", ",", "gamma", ",", "class_weights", ")", ":", "\n", "    ", "\"\"\"\n    TODO\n\n    :param y_true:\n    :param y_pred:\n    :param smooth:\n    :return:\n    \"\"\"", "\n", "y_true", ",", "shape", ",", "n_classes", "=", "_get_shapes_and_one_hot", "(", "y_true", ",", "y_pred", ")", "\n", "reduction_dims", "=", "range", "(", "len", "(", "shape", ")", ")", "[", "1", ":", "-", "1", "]", "\n", "\n", "# Clip for numerical stability", "\n", "_epsilon", "=", "_to_tensor", "(", "10e-8", ",", "y_pred", ".", "dtype", ".", "base_dtype", ")", "\n", "y_pred", "=", "tf", ".", "clip_by_value", "(", "y_pred", ",", "_epsilon", ",", "1.", "-", "_epsilon", ")", "\n", "\n", "if", "class_weights", "is", "None", ":", "\n", "        ", "class_weights", "=", "[", "1", "]", "*", "n_classes", "\n", "\n", "# Compute the focal loss", "\n", "", "entropy", "=", "tf", ".", "math", ".", "log", "(", "y_pred", ")", "\n", "modulator", "=", "tf", ".", "math", ".", "pow", "(", "(", "1", "-", "y_pred", ")", ",", "gamma", ")", "\n", "loss", "=", "-", "tf", ".", "reduce_sum", "(", "class_weights", "*", "y_true", "*", "modulator", "*", "entropy", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "loss", ",", "axis", "=", "reduction_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions.sparse_generalized_dice_loss": [[207, 247], ["loss_functions._get_shapes_and_one_hot", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.where", "tensorflow.where", "range", "type_weight.lower", "tensorflow.math.reciprocal", "tensorflow.math.is_inf", "tensorflow.zeros_like", "tensorflow.math.is_inf", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.reduce_mean", "len", "tensorflow.math.square", "type_weight.lower", "tensorflow.math.reciprocal", "tensorflow.ones_like", "tensorflow.reduce_max", "type_weight.lower", "tensorflow.ones_like", "ValueError"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.loss_functions._get_shapes_and_one_hot"], ["", "", "def", "sparse_generalized_dice_loss", "(", "y_true", ",", "y_pred", ",", "type_weight", ")", ":", "\n", "    ", "\"\"\"\n    Function to calculate the Generalised Dice Loss defined in\n        Sudre, C. et. al. (2017) Generalised Dice overlap as a deep learning\n        loss function for highly unbalanced segmentations. DLMIA 2017\n    \"\"\"", "\n", "y_true", ",", "shape", ",", "n_classes", "=", "_get_shapes_and_one_hot", "(", "y_true", ",", "y_pred", ")", "\n", "reduction_dims", "=", "range", "(", "len", "(", "shape", ")", ")", "[", "1", ":", "-", "1", "]", "\n", "\n", "ref_vol", "=", "tf", ".", "reduce_sum", "(", "y_true", ",", "axis", "=", "reduction_dims", ")", "\n", "intersect", "=", "tf", ".", "reduce_sum", "(", "y_true", "*", "y_pred", ",", "axis", "=", "reduction_dims", ")", "\n", "seg_vol", "=", "tf", ".", "reduce_sum", "(", "y_pred", ",", "axis", "=", "reduction_dims", ")", "\n", "\n", "if", "type_weight", ".", "lower", "(", ")", "==", "'square'", ":", "\n", "        ", "weights", "=", "tf", ".", "math", ".", "reciprocal", "(", "tf", ".", "math", ".", "square", "(", "ref_vol", ")", ")", "\n", "", "elif", "type_weight", ".", "lower", "(", ")", "==", "'simple'", ":", "\n", "        ", "weights", "=", "tf", ".", "math", ".", "reciprocal", "(", "ref_vol", ")", "\n", "", "elif", "type_weight", ".", "lower", "(", ")", "==", "'uniform'", ":", "\n", "        ", "weights", "=", "tf", ".", "ones_like", "(", "ref_vol", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"The variable type_weight \\\"{}\\\"\"", "\n", "\"is not defined.\"", ".", "format", "(", "type_weight", ")", ")", "\n", "\n", "# Make array of new weight in which infinite values are replaced by", "\n", "# ones.", "\n", "", "new_weights", "=", "tf", ".", "where", "(", "tf", ".", "math", ".", "is_inf", "(", "weights", ")", ",", "\n", "tf", ".", "zeros_like", "(", "weights", ")", ",", "\n", "weights", ")", "\n", "\n", "# Set final weights as either original weights or highest observed", "\n", "# non-infinite weight", "\n", "weights", "=", "tf", ".", "where", "(", "tf", ".", "math", ".", "is_inf", "(", "weights", ")", ",", "tf", ".", "ones_like", "(", "weights", ")", "*", "\n", "tf", ".", "reduce_max", "(", "new_weights", ")", ",", "weights", ")", "\n", "\n", "# calculate generalized dice score", "\n", "eps", "=", "1e-6", "\n", "numerator", "=", "2", "*", "tf", ".", "multiply", "(", "weights", ",", "intersect", ")", "\n", "denom", "=", "tf", ".", "multiply", "(", "weights", ",", "seg_vol", "+", "ref_vol", ")", "+", "eps", "\n", "generalised_dice_score", "=", "numerator", "/", "denom", "\n", "return", "1", "-", "tf", ".", "reduce_mean", "(", "generalised_dice_score", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.funcs.init_callback_objects": [[5, 54], ["enumerate", "cb_objs.append", "logger", "isinstance", "callback.get", "callback.get", "callbacks.DelayedCallback.", "logger", "callbacks.DelayedCallback", "getattr", "getattr", "ValueError"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["def", "init_callback_objects", "(", "callbacks", ",", "logger", ")", ":", "\n", "    ", "\"\"\"\n    Initialize a list of tf.keras/custom callback descriptors.\n\n    Args:\n        callbacks: List of callback descriptions. Each list entry should be\n                   either a dictionary of the format\n                   {\"class_name\": <name_of_CB_class>,\n                   \"kwargs\": {<dict_with_kwargs>}}\n                   ... or an already initialized callback object\n                   (which will be skipped).\n        logger:    A mpunet logger object logging to screen and/or file\n\n    Returns:\n        A list of initialized callbacks\n    \"\"\"", "\n", "from", "mpunet", "import", "callbacks", "as", "tcb", "\n", "\n", "cb_objs", "=", "[", "]", "\n", "cb_dict", "=", "{", "}", "\n", "for", "i", ",", "callback", "in", "enumerate", "(", "callbacks", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "callback", ",", "dict", ")", ":", "\n", "# CB already initialized", "\n", "            ", "cb", "=", "callback", "\n", "kwargs", "=", "{", "\"params\"", ":", "\"?\"", "}", "\n", "cls_name", "=", "callback", ".", "__class__", ".", "__name__", "\n", "start_from", "=", "0", "\n", "", "else", ":", "\n", "            ", "kwargs", "=", "callback", "[", "\"kwargs\"", "]", "\n", "cls_name", "=", "callback", "[", "\"class_name\"", "]", "\n", "start_from", "=", "callback", ".", "get", "(", "\"start_from\"", ")", "\n", "if", "callback", ".", "get", "(", "\"pass_logger\"", ")", ":", "\n", "                ", "kwargs", "[", "\"logger\"", "]", "=", "logger", "\n", "", "try", ":", "\n", "                ", "cb", "=", "getattr", "(", "tfcb", ",", "cls_name", ",", "None", ")", "or", "getattr", "(", "tcb", ",", "cls_name", ")", "\n", "", "except", "AttributeError", "as", "e", ":", "\n", "                ", "raise", "ValueError", "(", "\"No callback named %s\"", "%", "cls_name", ")", "from", "e", "\n", "", "cb", "=", "cb", "(", "**", "kwargs", ")", "\n", "", "if", "start_from", ":", "\n", "            ", "logger", "(", "\"OBS: '%s' activates at epoch %i\"", "%", "(", "cls_name", ",", "start_from", ")", ")", "\n", "cb", "=", "DelayedCallback", "(", "callback", "=", "cb", ",", "\n", "start_from", "=", "start_from", ",", "\n", "logger", "=", "logger", ")", "\n", "", "cb_objs", ".", "append", "(", "cb", ")", "\n", "cb_dict", "[", "cls_name", "]", "=", "cb", "\n", "logger", "(", "\"[%i] Using callback: %s(%s)\"", "%", "(", "i", "+", "1", ",", "cb", ".", "__class__", ".", "__name__", ",", "\n", "\", \"", ".", "join", "(", "[", "\"%s=%s\"", "%", "(", "a", ",", "kwargs", "[", "a", "]", ")", "for", "a", "in", "kwargs", "]", ")", ")", ")", "\n", "\n", "", "return", "cb_objs", ",", "cb_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.funcs.remove_validation_callbacks": [[56, 78], ["enumerate", "callback[].values", "any", "val_dependent_params.append", "tensorflow.keras.callbacks.pop", "logger", "str().lower", "str"], "function", ["None"], ["", "def", "remove_validation_callbacks", "(", "callbacks", ",", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Removes all callbacks that rely on validation data\n\n    Takes a list of uninitialized callbacks data, enumerates them and removes\n    each entry if one or more of its parameters in 'kwargs' mentions 'val'.\n\n    Args:\n        callbacks: A list of dictionaries, each representing a callback\n\n    Returns:\n        None, operates in-place\n    \"\"\"", "\n", "for", "i", ",", "callback", "in", "enumerate", "(", "callbacks", ")", ":", "\n", "        ", "val_dependent_params", "=", "[", "]", "\n", "for", "param", "in", "callback", "[", "\"kwargs\"", "]", ".", "values", "(", ")", ":", "\n", "            ", "val_dependent_params", ".", "append", "(", "\"val\"", "in", "str", "(", "param", ")", ".", "lower", "(", ")", ")", "\n", "", "if", "any", "(", "val_dependent_params", ")", ":", "\n", "            ", "if", "logger", ":", "\n", "                ", "logger", "(", "\"Removing callback with parameters: {} \"", "\n", "\"(needs validation data)\"", ".", "format", "(", "callback", ")", ")", "\n", "", "callbacks", ".", "pop", "(", "i", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.mcp_clean.ModelCheckPointClean.__init__": [[13, 17], ["tensorflow.keras.callbacks.ModelCheckpoint.__init__"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ",", "org_model", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "ModelCheckpoint", ".", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "org_model", "=", "org_model", "\n", "self", ".", "last_file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.mcp_clean.ModelCheckPointClean.__model": [[18, 24], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "__model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "org_model", ":", "\n", "            ", "return", "self", ".", "org_model", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.mcp_clean.ModelCheckPointClean.on_epoch_end": [[25, 71], ["print", "mcp_clean.ModelCheckPointClean.filepath.format", "os.path.split", "os.path.exists", "os.mkdir", "logs.get", "os.path.abspath", "warnings.warn", "mcp_clean.ModelCheckPointClean.monitor_op", "print", "mcp_clean.ModelCheckPointClean.__model.save_weights", "mcp_clean.ModelCheckPointClean.__model.save", "print", "os.remove", "mcp_clean.ModelCheckPointClean.__model.save_weights", "mcp_clean.ModelCheckPointClean.__model.save", "print"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn"], ["", "", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "print", "(", ")", "\n", "logs", "=", "logs", "or", "{", "}", "\n", "self", ".", "epochs_since_last_save", "+=", "1", "\n", "if", "self", ".", "epochs_since_last_save", ">=", "self", ".", "period", ":", "\n", "            ", "self", ".", "epochs_since_last_save", "=", "0", "\n", "filepath", "=", "self", ".", "filepath", ".", "format", "(", "epoch", "=", "epoch", ",", "**", "logs", ")", "\n", "\n", "# Make root folder if not existing", "\n", "folder", "=", "os", ".", "path", ".", "split", "(", "os", ".", "path", ".", "abspath", "(", "filepath", ")", ")", "[", "0", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "folder", ")", "\n", "\n", "", "if", "self", ".", "save_best_only", ":", "\n", "                ", "current", "=", "logs", ".", "get", "(", "self", ".", "monitor", ")", "\n", "if", "current", "is", "None", ":", "\n", "                    ", "warnings", ".", "warn", "(", "'Can save best model only with %s available, '", "\n", "'skipping.'", "%", "(", "self", ".", "monitor", ")", ",", "RuntimeWarning", ")", "\n", "", "else", ":", "\n", "                    ", "if", "self", ".", "monitor_op", "(", "current", ",", "self", ".", "best", ")", ":", "\n", "                        ", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                            ", "print", "(", "'Epoch %05d: %s improved from %0.5f to %0.5f,'", "\n", "' saving model to %s'", "\n", "%", "(", "epoch", ",", "self", ".", "monitor", ",", "self", ".", "best", ",", "\n", "current", ",", "filepath", ")", ")", "\n", "", "self", ".", "best", "=", "current", "\n", "if", "self", ".", "last_file", ":", "\n", "# Make sure we remove the file even with changing", "\n", "# filename over fitting", "\n", "                            ", "os", ".", "remove", "(", "self", ".", "last_file", ")", "\n", "", "self", ".", "last_file", "=", "filepath", "\n", "if", "self", ".", "save_weights_only", ":", "\n", "                            ", "self", ".", "__model", ".", "save_weights", "(", "filepath", ",", "overwrite", "=", "True", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "__model", ".", "save", "(", "filepath", ",", "overwrite", "=", "True", ")", "\n", "", "", "else", ":", "\n", "                        ", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                            ", "print", "(", "'Epoch %05d: %s did not improve'", "%", "\n", "(", "epoch", ",", "self", ".", "monitor", ")", ")", "\n", "", "", "", "", "else", ":", "\n", "                ", "if", "self", ".", "verbose", ">", "0", ":", "\n", "                    ", "print", "(", "'Epoch %05d: saving model to %s'", "%", "(", "epoch", ",", "filepath", ")", ")", "\n", "", "if", "self", ".", "save_weights_only", ":", "\n", "                    ", "self", ".", "__model", ".", "save_weights", "(", "filepath", ",", "overwrite", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "__model", ".", "save", "(", "filepath", ",", "overwrite", "=", "True", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.DividerLine.__init__": [[19, 27], ["tensorflow.keras.callbacks.Callback.__init__", "mpunet.logging.ScreenLogger"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            logger: An instance of a MultiPlanar Logger that prints to screen\n                    and/or file\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.DividerLine.on_epoch_end": [[28, 30], ["callbacks.DividerLine.logger"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "logger", "(", "\"-\"", "*", "45", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.LearningCurve.__init__": [[42, 60], ["tensorflow.keras.callbacks.Callback.__init__", "os.path.abspath", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.abspath", "mpunet.logging.ScreenLogger"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["def", "__init__", "(", "self", ",", "log_dir", "=", "\"logs\"", ",", "out_dir", "=", "\"logs\"", ",", "fname", "=", "\"curve.png\"", ",", "\n", "csv_regex", "=", "\"*training.csv\"", ",", "logger", "=", "None", ",", "**", "plot_kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            log_dir: Relative path from the\n            out_dir:\n            fname:\n            csv_regex:\n            logger:\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "out_dir", "=", "os", ".", "path", ".", "abspath", "(", "out_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "out_dir", ")", "\n", "", "self", ".", "csv_regex", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "log_dir", ")", ",", "csv_regex", ")", "\n", "self", ".", "save_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "fname", ")", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "self", ".", "plot_kwargs", "=", "plot_kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.LearningCurve.on_epoch_end": [[61, 68], ["mpunet.utils.plotting.plot_all_training_curves"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.plot_all_training_curves"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n", "        ", "plot_all_training_curves", "(", "self", ".", "csv_regex", ",", "\n", "self", ".", "save_path", ",", "\n", "logy", "=", "True", ",", "\n", "raise_error", "=", "False", ",", "\n", "logger", "=", "self", ".", "logger", ",", "\n", "**", "self", ".", "plot_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.MemoryConsumption.__init__": [[71, 75], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_gib", "=", "None", ",", "round_", "=", "2", ",", "logger", "=", "None", ")", ":", "\n", "        ", "self", ".", "max_gib", "=", "max_gib", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "round_", "=", "round_", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.MemoryConsumption.on_epoch_end": [[76, 86], ["psutil.Process", "round", "os.getpid", "psutil.Process.memory_info", "callbacks.MemoryConsumption.warn"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n", "        ", "process", "=", "psutil", ".", "Process", "(", "os", ".", "getpid", "(", ")", ")", "\n", "mem_bytes", "=", "process", ".", "memory_info", "(", ")", ".", "rss", "\n", "mem_gib", "=", "round", "(", "mem_bytes", "/", "(", "1024", "**", "3", ")", ",", "self", ".", "round_", ")", "\n", "logs", "[", "'memory_usage_gib'", "]", "=", "mem_gib", "\n", "if", "self", ".", "max_gib", "and", "mem_gib", ">=", "self", ".", "max_gib", ":", "\n", "            ", "self", ".", "warn", "(", "\"Stopping training from callback 'MemoryConsumption'! \"", "\n", "\"Total memory consumption of {} GiB exceeds limitation\"", "\n", "\" (self.max_gib = {}) \"", ".", "format", "(", "mem_gib", ",", "self", ".", "max_gib", ")", ")", "\n", "self", ".", "model", ".", "stop_training", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.DelayedCallback.__init__": [[93, 105], ["mpunet.logging.ScreenLogger"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "callback", ",", "start_from", "=", "0", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            callback:   A tf.keras callback\n            start_from: Delay the activity of 'callback' until this epoch\n                        'start_from'\n            logger:     An instance of a MultiPlanar Logger that prints to screen\n                        and/or file\n        \"\"\"", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "self", ".", "callback", "=", "callback", "\n", "self", ".", "start_from", "=", "start_from", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.DelayedCallback.__getattr__": [[106, 108], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "callback", ",", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.DelayedCallback.on_epoch_end": [[109, 116], ["callbacks.DelayedCallback.callback.on_epoch_end", "callbacks.DelayedCallback.logger"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.validation.ValDiceScores.on_epoch_end"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "epoch", ">=", "self", ".", "start_from", "-", "1", ":", "\n", "            ", "self", ".", "callback", ".", "on_epoch_end", "(", "epoch", ",", "logs", "=", "logs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "logger", "(", "\"[%s] Not active at epoch %i - will be at %i\"", "%", "\n", "(", "self", ".", "callback", ".", "__class__", ".", "__name__", ",", "\n", "epoch", "+", "1", ",", "self", ".", "start_from", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.TrainTimer.__init__": [[124, 133], ["tensorflow.keras.callbacks.Callback.__init__", "bool", "mpunet.logging.ScreenLogger", "int"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ",", "logger", "=", "None", ",", "max_minutes", "=", "None", ",", "verbose", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "self", ".", "max_minutes", "=", "int", "(", "max_minutes", ")", "if", "max_minutes", "else", "None", "\n", "self", ".", "verbose", "=", "bool", "(", "verbose", ")", "\n", "\n", "# Timing attributes", "\n", "self", ".", "train_begin_time", "=", "None", "\n", "self", ".", "prev_epoch_time", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.TrainTimer.on_train_begin": [[134, 136], ["datetime.datetime.datetime.now"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "train_begin_time", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.TrainTimer.on_epoch_begin": [[137, 139], ["datetime.datetime.datetime.now"], "methods", ["None"], ["", "def", "on_epoch_begin", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "prev_epoch_time", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.TrainTimer.on_epoch_end": [[140, 164], ["datetime.datetime.datetime.now", "round", "round", "callbacks.TrainTimer.logger", "callbacks.TrainTimer.logger", "train_time.total_seconds", "epoch_time.total_seconds"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "# Compute epoch execution time", "\n", "        ", "end_time", "=", "datetime", ".", "now", "(", ")", "\n", "epoch_time", "=", "end_time", "-", "self", ".", "prev_epoch_time", "\n", "train_time", "=", "end_time", "-", "self", ".", "train_begin_time", "\n", "\n", "# Update attributes", "\n", "self", ".", "prev_epoch_time", "=", "end_time", "\n", "\n", "# Add to logs", "\n", "train_hours", "=", "round", "(", "train_time", ".", "total_seconds", "(", ")", "/", "3600", ",", "4", ")", "\n", "epoch_minutes", "=", "round", "(", "epoch_time", ".", "total_seconds", "(", ")", "/", "60", ",", "4", ")", "\n", "logs", "[", "\"epoch_minutes\"", "]", "=", "epoch_minutes", "\n", "logs", "[", "\"train_hours\"", "]", "=", "train_hours", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "self", ".", "logger", "(", "\"[TrainTimer] Epoch time: %.2f minutes \"", "\n", "\"- Total train time: %.2f hours\"", "\n", "%", "(", "epoch_minutes", ",", "train_hours", ")", ")", "\n", "", "if", "self", ".", "max_minutes", "and", "train_hours", "*", "60", ">", "self", ".", "max_minutes", ":", "\n", "            ", "self", ".", "logger", "(", "\"Stopping training. Training ran for {} minutes, \"", "\n", "\"max_minutes of {} was specified on the TrainTimer \"", "\n", "\"callback.\"", ".", "format", "(", "train_hours", "*", "60", ",", "self", ".", "max_minutes", ")", ")", "\n", "self", ".", "model", ".", "stop_training", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.FGBatchBalancer.__init__": [[173, 187], ["tensorflow.keras.callbacks.Callback.__init__", "mpunet.logging.ScreenLogger"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ",", "train_data", ",", "val_data", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            train_data: A mpunet.sequence object representing the\n                        training data\n            val_data:   A mpunet.sequence object representing the\n                        validation data\n            logger:     An instance of a MultiPlanar Logger that prints to screen\n                        and/or file\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data", "=", "(", "(", "\"train\"", ",", "train_data", ")", ",", "(", "\"val\"", ",", "val_data", ")", ")", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "self", ".", "active", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.FGBatchBalancer.on_epoch_end": [[188, 210], ["logs.get", "callbacks.FGBatchBalancer.logger", "max", "callbacks.FGBatchBalancer.logger"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "not", "self", ".", "active", ":", "\n", "            ", "return", "None", "\n", "\n", "", "recall", "=", "logs", ".", "get", "(", "\"val_recall\"", ")", "\n", "if", "recall", "is", "None", ":", "\n", "            ", "self", ".", "logger", "(", "\"[FGBatchBalancer] No val_recall in logs. \"", "\n", "\"Disabling callback. \"", "\n", "\"Did you put this callback before the validation \"", "\n", "\"callback?\"", ")", "\n", "self", ".", "active", "=", "False", "\n", "", "else", ":", "\n", "# Always at least 1 image slice", "\n", "            ", "fraction", "=", "max", "(", "0.01", ",", "1", "-", "recall", ")", "\n", "for", "name", ",", "data", "in", "self", ".", "data", ":", "\n", "                ", "if", "data", "is", "not", "None", ":", "\n", "                    ", "data", ".", "fg_batch_fraction", "=", "fraction", "\n", "self", ".", "logger", "(", "\"[FGBatchBalancer] Setting FG fraction for %s \"", "\n", "\"to: %.4f - Now %s/%s\"", "%", "(", "name", ",", "\n", "fraction", ",", "\n", "data", ".", "n_fg_slices", ",", "\n", "data", ".", "batch_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.MeanReduceLogArrays.__init__": [[217, 219], ["tensorflow.keras.callbacks.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.MeanReduceLogArrays.on_epoch_end": [[220, 224], ["logs.items", "isinstance", "numpy.mean"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "logs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "value", ",", "(", "np", ".", "ndarray", ",", "list", ")", ")", ":", "\n", "                ", "logs", "[", "key", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.PrintLayerWeights.__init__": [[230, 256], ["tensorflow.keras.callbacks.Callback.__init__", "isinstance", "callbacks.PrintLayerWeights.log", "mpunet.logging.ScreenLogger"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log"], ["def", "__init__", "(", "self", ",", "layer", ",", "every", "=", "10", ",", "first", "=", "10", ",", "per_epoch", "=", "False", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            layer:      A tf.keras layer\n            every:      Print the weights every 'every' batch or epoch if\n                        per_epoch=True\n            first:      Print the first 'first' elements of each weight matrix\n            per_epoch:  Print after 'every' epoch instead of batch\n            logger:     An instance of a MultiPlanar Logger that prints to screen\n                        and/or file\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "isinstance", "(", "layer", ",", "int", ")", ":", "\n", "            ", "self", ".", "layer", "=", "self", ".", "model", ".", "layers", "[", "layer", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer", "=", "layer", "\n", "", "self", ".", "first", "=", "first", "\n", "self", ".", "every", "=", "every", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "\n", "self", ".", "per_epoch", "=", "per_epoch", "\n", "if", "per_epoch", ":", "\n", "# Apply on every epoch instead of per batches", "\n", "            ", "self", ".", "on_epoch_begin", "=", "self", ".", "on_batch_begin", "\n", "self", ".", "on_batch_begin", "=", "lambda", "*", "args", ",", "**", "kwargs", ":", "None", "\n", "", "self", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.PrintLayerWeights.log": [[257, 263], ["callbacks.PrintLayerWeights.logger", "callbacks.PrintLayerWeights.logger", "callbacks.PrintLayerWeights.logger", "callbacks.PrintLayerWeights.logger", "callbacks.PrintLayerWeights.logger"], "methods", ["None"], ["", "def", "log", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "(", "\"PrintLayerWeights Callback\"", ")", "\n", "self", ".", "logger", "(", "\"Layer:      \"", ",", "self", ".", "layer", ")", "\n", "self", ".", "logger", "(", "\"Every:      \"", ",", "self", ".", "every", ")", "\n", "self", ".", "logger", "(", "\"First:      \"", ",", "self", ".", "first", ")", "\n", "self", ".", "logger", "(", "\"Per epoch:  \"", ",", "self", ".", "per_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.PrintLayerWeights.on_batch_begin": [[264, 274], ["callbacks.PrintLayerWeights.layer.get_weights", "callbacks.PrintLayerWeights.logger", "callbacks.PrintLayerWeights.logger", "callbacks.PrintLayerWeights.logger", "weights[].ravel", "weights[].ravel"], "methods", ["None"], ["", "def", "on_batch_begin", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "batch", "%", "self", ".", "every", ":", "\n", "            ", "return", "\n", "", "weights", "=", "self", ".", "layer", ".", "get_weights", "(", ")", "\n", "self", ".", "logger", "(", "\"Weights for layer '%s'\"", "%", "self", ".", "layer", ")", "\n", "self", ".", "logger", "(", "\"Weights:\\n%s\"", "%", "weights", "[", "0", "]", ".", "ravel", "(", ")", "[", ":", "self", ".", "first", "]", ")", "\n", "try", ":", "\n", "            ", "self", ".", "logger", "(", "\"Baises:\\n%s\"", "%", "weights", "[", "1", "]", ".", "ravel", "(", ")", "[", ":", "self", ".", "first", "]", ")", "\n", "", "except", "IndexError", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.SaveOutputAs2DImage.__init__": [[280, 303], ["tensorflow.keras.callbacks.Callback.__init__", "callbacks.SaveOutputAs2DImage.log", "mpunet.logging.ScreenLogger", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log"], ["def", "__init__", "(", "self", ",", "layer", ",", "sequence", ",", "model", ",", "out_dir", ",", "every", "=", "10", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            layer:    A tf.keras layer\n            sequence: A MultiPlanar.sequence object from which batches are\n                      sampled and pushed through the graph to output of layer\n            model:    A tf.keras model object\n            out_dir:  Path to directory (existing or non-existing) in which\n                      images will be stored\n            every:    Perform this operation every 'every' batches\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "every", "=", "every", "\n", "self", ".", "seq", "=", "sequence", "\n", "self", ".", "layer", "=", "layer", "\n", "self", ".", "epoch", "=", "None", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "\n", "self", ".", "out_dir", "=", "out_dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "out_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "out_dir", ")", "\n", "", "self", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.SaveOutputAs2DImage.log": [[304, 308], ["callbacks.SaveOutputAs2DImage.logger", "callbacks.SaveOutputAs2DImage.logger", "callbacks.SaveOutputAs2DImage.logger"], "methods", ["None"], ["", "def", "log", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "(", "\"Save Output as 2D Image Callback\"", ")", "\n", "self", ".", "logger", "(", "\"Layer:      \"", ",", "self", ".", "layer", ")", "\n", "self", ".", "logger", "(", "\"Every:      \"", ",", "self", ".", "every", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.SaveOutputAs2DImage.on_epoch_begin": [[309, 311], ["None"], "methods", ["None"], ["", "def", "on_epoch_begin", "(", "self", ",", "epoch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.SaveOutputAs2DImage.on_batch_end": [[312, 343], ["callbacks.SaveOutputAs2DImage.model.predict_on_batch", "tensorflow.keras.backend.get_session", "isinstance", "enumerate", "tensorflow.keras.backend.get_session.run", "zip", "matplotlib.figure", "matplotlib.figure", "matplotlib.figure.add_subplot", "matplotlib.figure.add_subplot", "mpunet.utils.plotting.imshow", "mpunet.utils.plotting.imshow", "plt.figure.add_subplot.set_title", "plt.figure.add_subplot.set_title", "matplotlib.figure.tight_layout", "matplotlib.figure.savefig", "matplotlib.close", "matplotlib.close", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.run", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.imshow", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.imshow", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "def", "on_batch_end", "(", "self", ",", "batch", ",", "logs", "=", "None", ")", ":", "\n", "        ", "if", "batch", "%", "self", ".", "every", ":", "\n", "            ", "return", "\n", "\n", "# Get output of layer", "\n", "", "self", ".", "model", ".", "predict_on_batch", "(", ")", "\n", "sess", "=", "tf", ".", "keras", ".", "backend", ".", "get_session", "(", ")", "\n", "X", ",", "_", ",", "_", "=", "self", ".", "seq", "[", "0", "]", "\n", "outs", "=", "sess", ".", "run", "(", "[", "self", ".", "layer", ".", "output", "]", ",", "feed_dict", "=", "{", "self", ".", "model", ".", "input", ":", "X", "}", ")", "[", "0", "]", "\n", "if", "isinstance", "(", "outs", ",", "list", ")", ":", "\n", "            ", "outs", "=", "outs", "[", "0", "]", "\n", "\n", "", "for", "i", ",", "(", "model_in", ",", "layer_out", ")", "in", "enumerate", "(", "zip", "(", "X", ",", "outs", ")", ")", ":", "\n", "            ", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "6", ")", ")", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "121", ")", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "122", ")", "\n", "\n", "# Plot model input and layer outputs on each ax", "\n", "chl1", ",", "axis", ",", "slice", "=", "imshow", "(", "ax1", ",", "model_in", ")", "\n", "chl2", ",", "_", ",", "_", "=", "imshow", "(", "ax2", ",", "layer_out", ",", "axis", "=", "axis", ",", "slice", "=", "slice", ")", "\n", "\n", "# Set labels and save figure", "\n", "ax1", ".", "set_title", "(", "\"Model input - Channel %i - Axis %i - Slice %i\"", "\n", "%", "(", "chl1", ",", "axis", ",", "slice", ")", ",", "size", "=", "22", ")", "\n", "ax2", ".", "set_title", "(", "\"Layer output - Channel %i - Axis %i - Slice %i\"", "\n", "%", "(", "chl2", ",", "axis", ",", "slice", ")", ",", "size", "=", "22", ")", "\n", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "self", ".", "out_dir", ",", "\"epoch_%i_batch_%i_im_%i\"", "%", "\n", "(", "self", ".", "epoch", ",", "batch", ",", "i", ")", ")", ")", "\n", "plt", ".", "close", "(", "fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.SavePredictionImages.__init__": [[353, 371], ["tensorflow.keras.callbacks.Callback.__init__", "os.path.abspath", "os.path.join", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["def", "__init__", "(", "self", ",", "train_data", ",", "val_data", ",", "outdir", "=", "'images'", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            train_data: A mpunet.sequence object from which training\n                        data can be sampled via the __getitem__ method.\n            val_data:   A mpunet.sequence object from which validation\n                        data can be sampled via the __getitem__ method.\n            outdir:     Path to directory (existing or non-existing) in which\n                        images will be stored.\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "train_data", "=", "train_data", "\n", "self", ".", "val_data", "=", "val_data", "\n", "self", ".", "save_path", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"pred_images_at_epoch\"", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.SavePredictionImages.pred_and_save": [[372, 416], ["callbacks.SavePredictionImages.model.predict", "os.path.join", "enumerate", "os.path.exists", "os.mkdir", "zip", "matplotlib.subplots", "matplotlib.subplots", "lab.reshape.reshape.reshape", "p.reshape.reshape.reshape", "mpunet.utils.plotting.imshow_with_label_overlay", "mpunet.utils.plotting.imshow_with_label_overlay", "numpy.moveaxis", "ax1.imshow", "ax1.set_title", "ax2.set_title", "ax3.set_title", "fig.tight_layout", "matplotlib.close", "matplotlib.close", "numpy.random.randint", "numpy.testing.suppress_warnings", "sup.filter", "fig.savefig", "len", "os.path.join", "str"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.imshow_with_label_overlay", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.imshow_with_label_overlay", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.imshow", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "", "def", "pred_and_save", "(", "self", ",", "data", ",", "subdir", ")", ":", "\n", "# Get a random batch", "\n", "        ", "X", ",", "y", ",", "_", "=", "data", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "data", ")", ",", "dtype", "=", "np", ".", "int64", ")", "]", "\n", "\n", "# Predict on the batch", "\n", "pred", "=", "self", ".", "model", ".", "predict", "(", "X", ")", "\n", "\n", "subdir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_path", ",", "subdir", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "subdir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "subdir", ")", "\n", "\n", "# Plot each sample in the batch", "\n", "", "for", "i", ",", "(", "im", ",", "lab", ",", "p", ")", "in", "enumerate", "(", "zip", "(", "X", ",", "y", ",", "pred", ")", ")", ":", "\n", "            ", "fig", ",", "(", "ax1", ",", "ax2", ",", "ax3", ")", "=", "plt", ".", "subplots", "(", "ncols", "=", "3", ",", "figsize", "=", "(", "12", ",", "6", ")", ")", "\n", "lab", "=", "lab", ".", "reshape", "(", "im", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "lab", ".", "shape", "[", "-", "1", "]", ",", ")", ")", "\n", "p", "=", "p", ".", "reshape", "(", "im", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "p", ".", "shape", "[", "-", "1", "]", ",", ")", ")", "\n", "# Imshow ground truth on ax2", "\n", "# This function will determine which channel, axis and slice to", "\n", "# show and return so that we can use them for the other 2 axes", "\n", "chnl", ",", "axis", ",", "slice", "=", "imshow_with_label_overlay", "(", "ax2", ",", "im", ",", "lab", ",", "lab_alpha", "=", "1.0", ")", "\n", "\n", "# Imshow pred on ax3", "\n", "imshow_with_label_overlay", "(", "ax3", ",", "im", ",", "p", ",", "lab_alpha", "=", "1.0", ",", "\n", "channel", "=", "chnl", ",", "axis", "=", "axis", ",", "slice", "=", "slice", ")", "\n", "\n", "# Imshow raw image on ax1", "\n", "# Chose the same slice, channel and axis as above", "\n", "im", "=", "im", "[", "...", ",", "chnl", "]", "\n", "im", "=", "np", ".", "moveaxis", "(", "im", ",", "axis", ",", "0", ")", "\n", "if", "slice", "is", "not", "None", ":", "\n", "# Only for 3D imges", "\n", "                ", "im", "=", "im", "[", "slice", "]", "\n", "", "ax1", ".", "imshow", "(", "im", ",", "cmap", "=", "\"gray\"", ")", "\n", "\n", "# Set labels", "\n", "ax1", ".", "set_title", "(", "\"Image\"", ",", "size", "=", "18", ")", "\n", "ax2", ".", "set_title", "(", "\"True labels\"", ",", "size", "=", "18", ")", "\n", "ax3", ".", "set_title", "(", "\"Prediction\"", ",", "size", "=", "18", ")", "\n", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "with", "np", ".", "testing", ".", "suppress_warnings", "(", ")", "as", "sup", ":", "\n", "                ", "sup", ".", "filter", "(", "UserWarning", ")", "\n", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "subdir", ",", "str", "(", "i", ")", "+", "\".png\"", ")", ")", "\n", "", "plt", ".", "close", "(", "fig", ".", "number", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.SavePredictionImages.on_epoch_end": [[417, 421], ["callbacks.SavePredictionImages.pred_and_save", "callbacks.SavePredictionImages.pred_and_save"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.SavePredictionImages.pred_and_save", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.callbacks.SavePredictionImages.pred_and_save"], ["", "", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "pred_and_save", "(", "self", ".", "train_data", ",", "\"train_%s\"", "%", "epoch", ")", "\n", "if", "self", ".", "val_data", "is", "not", "None", ":", "\n", "            ", "self", ".", "pred_and_save", "(", "self", ".", "val_data", ",", "\"val_%s\"", "%", "epoch", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.validation.Validation.__init__": [[29, 58], ["tensorflow.keras.callbacks.Callback.__init__", "isinstance", "mpunet.logging.ScreenLogger"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ",", "val_sequence", ",", "steps", ",", "logger", "=", "None", ",", "verbose", "=", "True", ",", "\n", "ignore_class_zero", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            val_sequence: A mpunet.sequence object from which validation\n                          batches can be sampled via its __getitem__ method.\n            steps:        Numer of batches to sample from val_sequences in each\n                          validation epoch\n            logger:       An instance of a MultiPlanar Logger that prints to screen\n                          and/or file\n            verbose:      Print progress to screen - OBS does not use Logger\n            ignore_class_zero: TODO\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "self", ".", "data", "=", "val_sequence", "\n", "self", ".", "steps", "=", "steps", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "ignore_bg", "=", "ignore_class_zero", "\n", "self", ".", "print_round", "=", "3", "\n", "self", ".", "log_round", "=", "4", "\n", "self", ".", "_supports_tf_logs", "=", "True", "# ensures correct logs passed from tf.keras", "\n", "\n", "self", ".", "n_classes", "=", "self", ".", "data", ".", "n_classes", "\n", "if", "isinstance", "(", "self", ".", "n_classes", ",", "int", ")", ":", "\n", "            ", "self", ".", "task_names", "=", "[", "\"\"", "]", "\n", "self", ".", "n_classes", "=", "[", "self", ".", "n_classes", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "task_names", "=", "self", ".", "data", ".", "task_names", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.validation.Validation._compute_dice": [[59, 90], ["numpy.zeros", "numpy.zeros_like", "numpy.zeros_like"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "_compute_dice", "(", "tp", ",", "rel", ",", "sel", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n\n        :param tp:\n        :param rel:\n        :param sel:\n        :return:\n        \"\"\"", "\n", "# Get data masks (to avoid div. by zero warnings)", "\n", "# We set precision, recall, dice to 0 in for those particular cls.", "\n", "sel_mask", "=", "sel", ">", "0", "\n", "rel_mask", "=", "rel", ">", "0", "\n", "\n", "# prepare arrays", "\n", "precisions", "=", "np", ".", "zeros", "(", "shape", "=", "tp", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "recalls", "=", "np", ".", "zeros_like", "(", "precisions", ")", "\n", "dices", "=", "np", ".", "zeros_like", "(", "precisions", ")", "\n", "\n", "# Compute precisions, recalls", "\n", "precisions", "[", "sel_mask", "]", "=", "tp", "[", "sel_mask", "]", "/", "sel", "[", "sel_mask", "]", "\n", "recalls", "[", "rel_mask", "]", "=", "tp", "[", "rel_mask", "]", "/", "rel", "[", "rel_mask", "]", "\n", "\n", "# Compute dice", "\n", "intrs", "=", "(", "2", "*", "precisions", "*", "recalls", ")", "\n", "union", "=", "(", "precisions", "+", "recalls", ")", "\n", "dice_mask", "=", "union", ">", "0", "\n", "dices", "[", "dice_mask", "]", "=", "intrs", "[", "dice_mask", "]", "/", "union", "[", "dice_mask", "]", "\n", "\n", "return", "precisions", ",", "recalls", ",", "dices", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.validation.Validation._count_cm_elements_from_queue": [[91, 140], ["range", "queue.get", "zip", "queue.task_done", "p.numpy.numpy.argmax().ravel", "y.ravel.ravel.ravel", "numpy.bincount", "numpy.bincount", "lock.acquire", "tps.astype", "numpy.bincount.astype", "numpy.bincount.astype", "lock.release", "isinstance", "p.numpy.numpy.numpy", "numpy.bincount", "p.numpy.numpy.argmax", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["", "@", "staticmethod", "\n", "def", "_count_cm_elements_from_queue", "(", "queue", ",", "\n", "steps", ",", "\n", "TPs", ",", "\n", "relevant", ",", "\n", "selected", ",", "\n", "task_names", ",", "\n", "n_classes_list", ",", "\n", "lock", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n\n        :param queue:\n        :param steps:\n        :param TPs:\n        :param relevant:\n        :param selected:\n        :param task_names:\n        :param n_classes_list:\n        :param lock:\n        :return:\n        \"\"\"", "\n", "for", "_", "in", "range", "(", "steps", ")", ":", "\n", "# Get prediction and true labels from prediction queue", "\n", "            ", "pred", ",", "true", "=", "queue", ".", "get", "(", "block", "=", "True", ")", "\n", "for", "p", ",", "y", ",", "task_name", ",", "n_classes", "in", "zip", "(", "pred", ",", "true", ",", "task_names", ",", "\n", "n_classes_list", ")", ":", "\n", "# Argmax and CM elements", "\n", "                ", "if", "not", "isinstance", "(", "p", ",", "np", ".", "ndarray", ")", ":", "\n", "                    ", "p", "=", "p", ".", "numpy", "(", ")", "\n", "", "p", "=", "p", ".", "argmax", "(", "-", "1", ")", ".", "ravel", "(", ")", "\n", "y", "=", "y", ".", "ravel", "(", ")", "\n", "\n", "# Compute relevant CM elements", "\n", "# We select the number following the largest class integer", "\n", "# when y != pred, then bincount and remove the added dummy", "\n", "# class", "\n", "tps", "=", "np", ".", "bincount", "(", "np", ".", "where", "(", "y", "==", "p", ",", "y", ",", "n_classes", ")", ",", "\n", "minlength", "=", "n_classes", "+", "1", ")", "[", ":", "-", "1", "]", "\n", "rel", "=", "np", ".", "bincount", "(", "y", ",", "minlength", "=", "n_classes", ")", "\n", "sel", "=", "np", ".", "bincount", "(", "p", ",", "minlength", "=", "n_classes", ")", "\n", "\n", "# Update counts on shared lists", "\n", "lock", ".", "acquire", "(", ")", "\n", "TPs", "[", "task_name", "]", "+=", "tps", ".", "astype", "(", "np", ".", "uint64", ")", "\n", "relevant", "[", "task_name", "]", "+=", "rel", ".", "astype", "(", "np", ".", "uint64", ")", "\n", "selected", "[", "task_name", "]", "+=", "sel", ".", "astype", "(", "np", ".", "uint64", ")", "\n", "lock", ".", "release", "(", ")", "\n", "", "queue", ".", "task_done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.validation.Validation.evalaute": [[141, 231], ["hasattr", "validation.Validation.model.reset_metrics", "zip", "Queue", "Thread", "Thread.start", "concurrent.futures.ThreadPoolExecutor", "concurrent.futures.ThreadPoolExecutor.map", "validation.Validation.logger", "enumerate", "concurrent.futures.ThreadPoolExecutor.shutdown", "validation.Validation.model.reset_metrics", "validation.Validation.logger", "print", "Thread.join", "Queue.join", "len", "len", "numpy.zeros", "numpy.zeros", "numpy.zeros", "collections.defaultdict", "numpy.arange", "mpunet.utils.ensure_list_or_tuple", "mpunet.utils.ensure_list_or_tuple", "validation.Validation.model.predict_on_batch", "mpunet.utils.ensure_list_or_tuple", "Queue.put", "zip", "validation.Validation._compute_dice", "print", "zip", "numpy.mean", "threading.Lock", "tensorflow.reduce_mean", "[].append", "metric", "tensorflow.reduce_mean.numpy"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.start", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.ensure_list_or_tuple", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.ensure_list_or_tuple", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.ensure_list_or_tuple", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.validation.Validation._compute_dice"], ["", "", "def", "evalaute", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n\n        :return:\n        \"\"\"", "\n", "# Get tensors to run and their names", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "\"loss_functions\"", ")", ":", "\n", "            ", "metrics", "=", "self", ".", "model", ".", "loss_functions", "+", "self", ".", "model", ".", "metrics", "\n", "", "else", ":", "\n", "            ", "metrics", "=", "self", ".", "model", ".", "metrics", "\n", "", "metrics_names", "=", "self", ".", "model", ".", "metrics_names", "\n", "self", ".", "model", ".", "reset_metrics", "(", ")", "\n", "assert", "len", "(", "metrics_names", ")", "==", "len", "(", "metrics", ")", "\n", "\n", "# Prepare dictionaries for storing pr. task metric results", "\n", "TPs", ",", "relevant", ",", "selected", ",", "batch_wise_metrics", "=", "{", "}", ",", "{", "}", ",", "{", "}", ",", "{", "}", "\n", "for", "task_name", ",", "n_classes", "in", "zip", "(", "self", ".", "task_names", ",", "self", ".", "n_classes", ")", ":", "\n", "            ", "TPs", "[", "task_name", "]", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_classes", ",", ")", ",", "dtype", "=", "np", ".", "uint64", ")", "\n", "relevant", "[", "task_name", "]", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_classes", ",", ")", ",", "dtype", "=", "np", ".", "uint64", ")", "\n", "selected", "[", "task_name", "]", "=", "np", ".", "zeros", "(", "shape", "=", "(", "n_classes", ",", ")", ",", "dtype", "=", "np", ".", "uint64", ")", "\n", "batch_wise_metrics", "[", "task_name", "]", "=", "defaultdict", "(", "list", ")", "\n", "\n", "# Prepare queue and thread for computing counts", "\n", "", "from", "queue", "import", "Queue", "\n", "from", "threading", "import", "Thread", "\n", "count_queue", "=", "Queue", "(", "maxsize", "=", "self", ".", "steps", ")", "\n", "count_thread", "=", "Thread", "(", "target", "=", "self", ".", "_count_cm_elements_from_queue", ",", "\n", "daemon", "=", "True", ",", "\n", "args", "=", "[", "count_queue", ",", "self", ".", "steps", ",", "TPs", ",", "relevant", ",", "\n", "selected", ",", "self", ".", "task_names", ",", "self", ".", "n_classes", ",", "\n", "Lock", "(", ")", "]", ")", "\n", "count_thread", ".", "start", "(", ")", "\n", "\n", "# Fetch validation batches from the generator(s)", "\n", "pool", "=", "ThreadPoolExecutor", "(", "max_workers", "=", "3", ")", "\n", "batches", "=", "pool", ".", "map", "(", "self", ".", "data", ".", "__getitem__", ",", "np", ".", "arange", "(", "self", ".", "steps", ")", ")", "\n", "\n", "# Predict on all", "\n", "self", ".", "logger", "(", "\"\"", ")", "\n", "for", "i", ",", "(", "X", ",", "y", ",", "_", ")", "in", "enumerate", "(", "batches", ")", ":", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "print", "(", "\"   Validation: %i/%i\"", "%", "(", "i", "+", "1", ",", "self", ".", "steps", ")", ",", "\n", "end", "=", "\"\\r\"", ",", "flush", "=", "True", ")", "\n", "", "X", "=", "ensure_list_or_tuple", "(", "X", ")", "\n", "y", "=", "ensure_list_or_tuple", "(", "y", ")", "\n", "\n", "# Predict and put values in the queue for counting", "\n", "pred", "=", "self", ".", "model", ".", "predict_on_batch", "(", "X", ")", "\n", "pred", "=", "ensure_list_or_tuple", "(", "pred", ")", "\n", "count_queue", ".", "put", "(", "[", "pred", ",", "y", "]", ")", "\n", "\n", "for", "p_task", ",", "y_task", ",", "task", "in", "zip", "(", "pred", ",", "y", ",", "self", ".", "task_names", ")", ":", "\n", "# Run all metrics", "\n", "                ", "for", "metric", ",", "name", "in", "zip", "(", "metrics", ",", "metrics_names", ")", ":", "\n", "                    ", "m", "=", "tf", ".", "reduce_mean", "(", "metric", "(", "y_task", ",", "p_task", ")", ")", "\n", "batch_wise_metrics", "[", "task", "]", "[", "name", "]", ".", "append", "(", "m", ".", "numpy", "(", ")", ")", "\n", "", "", "", "pool", ".", "shutdown", "(", "wait", "=", "True", ")", "\n", "\n", "# Compute the mean over batch-wise metrics", "\n", "mean_batch_wise_metrics", "=", "{", "}", "\n", "for", "task", "in", "self", ".", "task_names", ":", "\n", "            ", "mean_batch_wise_metrics", "[", "task", "]", "=", "{", "}", "\n", "for", "metric", "in", "metrics_names", ":", "\n", "                ", "ms", "=", "batch_wise_metrics", "[", "task", "]", "[", "metric", "]", "\n", "mean_batch_wise_metrics", "[", "task", "]", "[", "metric", "]", "=", "np", ".", "mean", "(", "ms", ")", "\n", "", "", "self", ".", "model", ".", "reset_metrics", "(", ")", "\n", "self", ".", "logger", "(", "\"\"", ")", "\n", "\n", "# Terminate count thread", "\n", "print", "(", "\"Waiting for counting queue to terminate...\\n\"", ")", "\n", "count_thread", ".", "join", "(", ")", "\n", "count_queue", ".", "join", "(", ")", "\n", "\n", "# Compute per-class metrics (dice+precision+recall)", "\n", "class_wise_metrics", "=", "{", "}", "\n", "for", "task", "in", "self", ".", "task_names", ":", "\n", "            ", "precisions", ",", "recalls", ",", "dices", "=", "self", ".", "_compute_dice", "(", "tp", "=", "TPs", "[", "task", "]", ",", "\n", "sel", "=", "relevant", "[", "task", "]", ",", "\n", "rel", "=", "selected", "[", "task", "]", ")", "\n", "if", "self", ".", "ignore_bg", ":", "\n", "                ", "precisions", "[", "0", "]", "=", "np", ".", "nan", "\n", "recalls", "[", "0", "]", "=", "np", ".", "nan", "\n", "dices", "[", "0", "]", "=", "np", ".", "nan", "\n", "", "class_wise_metrics", "[", "task", "]", "=", "{", "\n", "\"dice\"", ":", "dices", ",", "\n", "\"recall\"", ":", "recalls", ",", "\n", "\"precision\"", ":", "precisions", "\n", "}", "\n", "", "return", "class_wise_metrics", ",", "mean_batch_wise_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.validation.Validation._print_val_results": [[232, 266], ["pandas.DataFrame", "batch_wise_metrics.items", "class_wise_metrics.items", "validation.Validation.logger", "pandas.DataFrame.round().T.to_string", "validation.Validation.logger", "list", "list", "mpunet.utils.highlighted", "batch_wise_metrics.keys", "class_wise_metrics.keys", "list", "pd.DataFrame.round().T.to_string.replace", "numpy.nanmean", "pandas.DataFrame.round", "len"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.highlighted"], ["", "def", "_print_val_results", "(", "self", ",", "\n", "class_wise_metrics", ",", "\n", "batch_wise_metrics", ",", "\n", "epoch", ",", "\n", "task_name", ",", "\n", "classes", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n\n        :param class_wise_metrics:\n        :param batch_wise_metrics:\n        :param epoch:\n        :param task_name:\n        :param classes:\n        :return:\n        \"\"\"", "\n", "# We add them to a pd dataframe just for the pretty print output", "\n", "index", "=", "[", "\"mean\"", "]", "+", "[", "\"cls %i\"", "%", "i", "for", "i", "in", "classes", "]", "\n", "columns", "=", "list", "(", "batch_wise_metrics", ".", "keys", "(", ")", ")", "+", "list", "(", "class_wise_metrics", ".", "keys", "(", ")", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "data", "=", "{", "c", ":", "[", "np", ".", "nan", "]", "*", "len", "(", "index", ")", "for", "c", "in", "columns", "}", ",", "\n", "index", "=", "index", ")", "\n", "\n", "# Fill the df with metrics", "\n", "for", "m_name", ",", "value", "in", "batch_wise_metrics", ".", "items", "(", ")", ":", "\n", "            ", "df", ".", "loc", "[", "'mean'", ",", "m_name", "]", "=", "value", "\n", "", "for", "m_name", ",", "values", "in", "class_wise_metrics", ".", "items", "(", ")", ":", "\n", "            ", "values", "=", "[", "np", ".", "nanmean", "(", "values", ")", "]", "+", "list", "(", "values", ")", "\n", "df", ".", "loc", "[", ":", ",", "m_name", "]", "=", "values", "\n", "\n", "# Print the df to screen", "\n", "", "s", "=", "\"Validation Results for epoch %i\"", "%", "epoch", "\n", "self", ".", "logger", "(", "highlighted", "(", "(", "(", "\"[%s]\"", "%", "task_name", ")", "if", "task_name", "else", "\"\"", ")", "+", "s", ")", ")", "\n", "print_string", "=", "df", ".", "round", "(", "self", ".", "print_round", ")", ".", "T", ".", "to_string", "(", ")", "\n", "self", ".", "logger", "(", "print_string", ".", "replace", "(", "\"NaN\"", ",", "\"  -\"", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.validation.Validation.on_epoch_end": [[267, 306], ["validation.Validation.evalaute", "zip", "numpy.arange", "mean_batch_wise_metrics[].items", "class_wise_metrics[].items", "len", "tuple", "validation.Validation.logger", "value.round", "numpy.nanmean", "validation.Validation._print_val_results", "validation.Validation.logger", "numpy.mean", "numpy.mean.round", "pandas.DataFrame", "validation.Validation.logger", "len", "mpunet.utils.highlighted", "list", "pandas.DataFrame.round", "f.split"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.validation.Validation.evalaute", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.validation.Validation._print_val_results", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.highlighted"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n", "# Predict and get CM", "\n", "        ", "class_wise_metrics", ",", "mean_batch_wise_metrics", "=", "self", ".", "evalaute", "(", ")", "\n", "for", "n_classes", ",", "name", "in", "zip", "(", "self", ".", "n_classes", ",", "self", ".", "task_names", ")", ":", "\n", "            ", "classes", "=", "np", ".", "arange", "(", "n_classes", ")", "\n", "n", "=", "(", "name", "+", "\"_\"", ")", "if", "len", "(", "self", ".", "task_names", ")", ">", "1", "else", "\"\"", "\n", "\n", "# Add batch-wise metrics to log", "\n", "for", "m_name", ",", "value", "in", "mean_batch_wise_metrics", "[", "name", "]", ".", "items", "(", ")", ":", "\n", "                ", "logs", "[", "f\"{n}val_{m_name}\"", "]", "=", "value", ".", "round", "(", "self", ".", "log_round", ")", "\n", "# Add mean of class-wise metrics to log", "\n", "", "for", "m_name", ",", "values", "in", "class_wise_metrics", "[", "name", "]", ".", "items", "(", ")", ":", "\n", "                ", "logs", "[", "f\"{n}val_{m_name}\"", "]", "=", "np", ".", "nanmean", "(", "values", ")", "\n", "\n", "", "if", "self", ".", "verbose", ":", "\n", "                ", "self", ".", "_print_val_results", "(", "class_wise_metrics", "=", "class_wise_metrics", "[", "name", "]", ",", "\n", "batch_wise_metrics", "=", "mean_batch_wise_metrics", "[", "name", "]", ",", "\n", "epoch", "=", "epoch", ",", "\n", "task_name", "=", "name", ",", "\n", "classes", "=", "classes", ")", "\n", "\n", "", "", "if", "len", "(", "self", ".", "task_names", ")", ">", "1", ":", "\n", "# Print cross-dataset mean values", "\n", "            ", "if", "self", ".", "verbose", ":", "\n", "                ", "self", ".", "logger", "(", "highlighted", "(", "f\"[ALL DATASETS] Means Across Classes\"", "\n", "f\" for Epoch {epoch}\"", ")", ")", "\n", "", "fetch", "=", "(", "\"val_dice\"", ",", "\"val_precision\"", ",", "\"val_recall\"", ")", "\n", "m_fetch", "=", "tuple", "(", "[", "\"val_\"", "+", "s", "for", "s", "in", "self", ".", "model", ".", "metrics_names", "]", ")", "\n", "to_print", "=", "{", "}", "\n", "for", "f", "in", "fetch", "+", "m_fetch", ":", "\n", "                ", "scores", "=", "[", "logs", "[", "\"%s_%s\"", "%", "(", "name", ",", "f", ")", "]", "for", "name", "in", "self", ".", "task_names", "]", "\n", "res", "=", "np", ".", "mean", "(", "scores", ")", "\n", "logs", "[", "f", "]", "=", "res", ".", "round", "(", "self", ".", "log_round", ")", "# Add to log file", "\n", "to_print", "[", "f", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", "]", "=", "list", "(", "scores", ")", "+", "[", "res", "]", "\n", "", "if", "self", ".", "verbose", ":", "\n", "                ", "df", "=", "pd", ".", "DataFrame", "(", "to_print", ")", "\n", "df", ".", "index", "=", "self", ".", "task_names", "+", "[", "\"mean\"", "]", "\n", "self", ".", "logger", "(", "df", ".", "round", "(", "self", ".", "print_round", ")", ")", "\n", "", "self", ".", "logger", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.validation.ValDiceScores.__init__": [[317, 335], ["tensorflow.keras.callbacks.Callback.__init__", "mpunet.logging.ScreenLogger"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ",", "validation_data", ",", "n_classes", ",", "batch_size", "=", "8", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            validation_data: A tuple (X, y) of two ndarrays of validation data\n                             and corresponding labels.\n                             Any shape accepted by the model.\n                             Labels must be integer targets (not one-hot)\n            n_classes:       Number of classes, including background\n            batch_size:      Batch size used for prediction\n            logger:          An instance of a MultiPlanar Logger that prints to screen\n                             and/or file\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "self", ".", "X_val", ",", "self", ".", "y_val", "=", "validation_data", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "scores", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.validation.ValDiceScores.eval": [[336, 343], ["validation.ValDiceScores.model.predict", "mpunet.evaluate.metrics.dice_all", "validation.ValDiceScores.argmax"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.evaluate.metrics.dice_all"], ["", "def", "eval", "(", "self", ")", ":", "\n", "        ", "pred", "=", "self", ".", "model", ".", "predict", "(", "self", ".", "X_val", ",", "self", ".", "batch_size", ",", "verbose", "=", "1", ")", "\n", "dices", "=", "dice_all", "(", "self", ".", "y_val", ",", "\n", "pred", ".", "argmax", "(", "-", "1", ")", ",", "\n", "n_classes", "=", "self", ".", "n_classes", ",", "\n", "ignore_zero", "=", "True", ")", "\n", "return", "dices", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.validation.ValDiceScores.on_epoch_end": [[344, 355], ["validation.ValDiceScores.eval", "validation.ValDiceScores.mean", "validation.ValDiceScores.logger", "validation.ValDiceScores.scores.append", "mpunet.utils.highlighted"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.validation.ValDiceScores.eval", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.highlighted"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n", "        ", "scores", "=", "self", ".", "eval", "(", ")", "\n", "mean_dice", "=", "scores", ".", "mean", "(", ")", "\n", "s", "=", "\"Mean dice for epoch %d: %.4f\\nPr. class: %s\"", "%", "(", "epoch", ",", "\n", "mean_dice", ",", "\n", "scores", ")", "\n", "self", ".", "logger", "(", "highlighted", "(", "s", ")", ")", "\n", "self", ".", "scores", ".", "append", "(", "mean_dice", ")", "\n", "\n", "# Add to log", "\n", "logs", "[", "\"val_dice\"", "]", "=", "mean_dice", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.fusion_model.FusionLayer.__init__": [[15, 20], ["tensorflow.keras.layers.Layer.__init__", "mpunet.logging.ScreenLogger"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["    ", "def", "__init__", "(", "self", ",", "logger", "=", "None", ",", "activation_func", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "self", ".", "W", ",", "self", ".", "b", "=", "None", ",", "None", "\n", "self", ".", "activation", "=", "activation_func", "or", "tf", ".", "nn", ".", "softmax", "\n", "super", "(", "FusionLayer", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.fusion_model.FusionLayer.build": [[21, 37], ["fusion_model.FusionLayer.add_weight", "fusion_model.FusionLayer.add_weight", "super().build", "tensorflow.keras.initializers.constant", "tensorflow.keras.initializers.constant"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.fusion_model.FusionLayer.build"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "\n", "        ", "self", ".", "W", "=", "self", ".", "add_weight", "(", "name", "=", "'W'", ",", "\n", "shape", "=", "(", "input_shape", "[", "1", "]", ",", "input_shape", "[", "2", "]", ")", ",", "\n", "initializer", "=", "constant", "(", "1.0", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "regularizer", "=", "reg", ")", "\n", "self", ".", "b", "=", "self", ".", "add_weight", "(", "name", "=", "\"b\"", ",", "\n", "shape", "=", "(", "1", ",", "input_shape", "[", "2", "]", ")", ",", "\n", "initializer", "=", "constant", "(", "0.0", ")", ",", "\n", "trainable", "=", "True", ",", "\n", "regularizer", "=", "reg", ")", "\n", "\n", "# Build the layer from the base class", "\n", "# This also sets self.built = True", "\n", "super", "(", "FusionLayer", ",", "self", ")", ".", "build", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.fusion_model.FusionLayer.call": [[38, 40], ["fusion_model.FusionLayer.activation", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "call", "(", "self", ",", "x", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "activation", "(", "tf", ".", "reduce_sum", "(", "self", ".", "W", "*", "x", ",", "axis", "=", "1", ")", "+", "self", ".", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.fusion_model.FusionLayer.compute_output_shape": [[41, 43], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "None", ",", "input_shape", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.fusion_model.FusionModel.__init__": [[46, 63], ["mpunet.evaluate.loss_functions.SparseGeneralizedDiceLoss", "tensorflow.keras.models.Model.__init__", "mpunet.logging.ScreenLogger", "fusion_model.FusionModel._log", "fusion_model.FusionModel.init_model"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader._log", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.model_init.init_model"], ["    ", "def", "__init__", "(", "self", ",", "n_inputs", ",", "n_classes", ",", "weight", "=", "\"Simple\"", ",", "logger", "=", "None", ",", "\n", "verbose", "=", "True", ")", ":", "\n", "        ", "self", ".", "n_inputs", "=", "n_inputs", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "\n", "# Set Logger object", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "\n", "# Set loss", "\n", "self", ".", "loss", "=", "SparseGeneralizedDiceLoss", "(", "tf", ".", "keras", ".", "losses", ".", "Reduction", ".", "SUM_OVER_BATCH_SIZE", ",", "\n", "type_weight", "=", "weight", ")", "\n", "\n", "# Init model", "\n", "super", "(", ")", ".", "__init__", "(", "*", "self", ".", "init_model", "(", "n_inputs", ",", "n_classes", ")", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "self", ".", "_log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.fusion_model.FusionModel.init_model": [[64, 69], ["tensorflow.keras.layers.Input", "fusion_model.FusionLayer"], "methods", ["None"], ["", "", "def", "init_model", "(", "self", ",", "n_inputs", ",", "n_classes", ")", ":", "\n", "        ", "inputs", "=", "Input", "(", "shape", "=", "(", "n_inputs", ",", "n_classes", ")", ")", "\n", "fusion", "=", "FusionLayer", "(", "activation_func", "=", "tf", ".", "nn", ".", "softmax", ")", "(", "inputs", ")", "\n", "\n", "return", "[", "inputs", "]", ",", "[", "fusion", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.fusion_model.FusionModel._log": [[70, 76], ["fusion_model.FusionModel.logger", "fusion_model.FusionModel.logger", "fusion_model.FusionModel.logger", "fusion_model.FusionModel.logger", "fusion_model.FusionModel.logger", "fusion_model.FusionModel.count_params"], "methods", ["None"], ["", "def", "_log", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "(", "\"Optimizer:  %s\"", "%", "self", ".", "optimizer", ")", "\n", "self", ".", "logger", "(", "\"Loss:       %s\"", "%", "self", ".", "loss", ")", "\n", "self", ".", "logger", "(", "\"Input:      %s\"", "%", "self", ".", "input", ")", "\n", "self", ".", "logger", "(", "\"Output:     %s\"", "%", "self", ".", "output", ")", "\n", "self", ".", "logger", "(", "\"N weights:  %s\"", "%", "self", ".", "count_params", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.fusion_model.reg": [[9, 12], ["tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.square", "tensorflow.size"], "function", ["None"], ["def", "reg", "(", "W", ")", ":", "\n", "    ", "r", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "W", ")", ")", "/", "tf", ".", "cast", "(", "tf", ".", "size", "(", "W", ")", ",", "tf", ".", "float32", ")", "\n", "return", "1e-6", "*", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet.UNet.__init__": [[26, 113], ["tensorflow.keras.models.Model.__init__", "numpy.sqrt", "numpy.array", "tensorflow.keras.models.Model.__init__", "names.index", "unet.UNet.log", "ValueError", "mpunet.logging.ScreenLogger", "unet.UNet.init_model", "mpunet.utils.conv_arithmetics.compute_receptive_fields"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.model_init.init_model", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.conv_arithmetics.compute_receptive_fields"], ["def", "__init__", "(", "self", ",", "\n", "n_classes", ",", "\n", "img_rows", "=", "None", ",", "\n", "img_cols", "=", "None", ",", "\n", "dim", "=", "None", ",", "\n", "n_channels", "=", "1", ",", "\n", "depth", "=", "4", ",", "\n", "out_activation", "=", "\"softmax\"", ",", "\n", "activation", "=", "\"relu\"", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "complexity_factor", "=", "1", ",", "\n", "flatten_output", "=", "False", ",", "\n", "l2_reg", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        n_classes (int):\n            The number of classes to model, gives the number of filters in the\n            final 1x1 conv layer.\n        img_rows, img_cols (int, int):\n            Image dimensions. Note that depending on image dims cropping may\n            be necessary. To avoid this, use image dimensions DxD for which\n            D * (1/2)^n is an integer, where n is the number of (2x2)\n            max-pooling layers; in this implementation 4.\n            For n=4, D \\in {..., 192, 208, 224, 240, 256, ...} etc.\n        dim (int):\n            img_rows and img_cols will both be set to 'dim'\n        n_channels (int):\n            Number of channels in the input image.\n        depth (int):\n            Number of conv blocks in encoding layer (number of 2x2 max pools)\n            Note: each block doubles the filter count while halving the spatial\n            dimensions of the features.\n        out_activation (string):\n            Activation function of output 1x1 conv layer. Usually one of\n            'softmax', 'sigmoid' or 'linear'.\n        activation (string):\n            Activation function for convolution layers\n        kernel_size (int):\n            Kernel size for convolution layers\n        padding (string):\n            Padding type ('same' or 'valid')\n        complexity_factor (int/float):\n            Use int(N * sqrt(complexity_factor)) number of filters in each\n            2D convolution layer instead of default N.\n        flatten_output (bool):\n            Flatten the output to array of shape [batch_size, -1, n_classes]\n        l2_reg (float in [0, 1])\n            L2 regularization on Conv2D weights\n        logger (mpunet.logging.Logger | ScreenLogger):\n            MutliViewUNet.Logger object, logging to files or screen.\n        \"\"\"", "\n", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "(", "(", "img_rows", "and", "img_cols", ")", "or", "dim", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Must specify either img_rows and img_col or dim\"", ")", "\n", "", "if", "dim", ":", "\n", "            ", "img_rows", ",", "img_cols", "=", "dim", ",", "dim", "\n", "\n", "# Set logger or standard print wrapper", "\n", "", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "\n", "# Set various attributes", "\n", "self", ".", "img_shape", "=", "(", "img_rows", ",", "img_cols", ",", "n_channels", ")", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "cf", "=", "np", ".", "sqrt", "(", "complexity_factor", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "out_activation", "=", "out_activation", "\n", "self", ".", "l2_reg", "=", "l2_reg", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "flatten_output", "=", "flatten_output", "\n", "\n", "# Shows the number of pixels cropped of the input image to the output", "\n", "self", ".", "label_crop", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "# Build model and init base keras Model class", "\n", "super", "(", ")", ".", "__init__", "(", "*", "self", ".", "init_model", "(", ")", ")", "\n", "\n", "# Compute receptive field", "\n", "names", "=", "[", "x", ".", "__class__", ".", "__name__", "for", "x", "in", "self", ".", "layers", "]", "\n", "index", "=", "names", ".", "index", "(", "\"UpSampling2D\"", ")", "\n", "self", ".", "receptive_field", "=", "compute_receptive_fields", "(", "self", ".", "layers", "[", ":", "index", "]", ")", "[", "-", "1", "]", "[", "-", "1", "]", "\n", "\n", "# Log the model definition", "\n", "self", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet.UNet._create_encoder": [[114, 135], ["range", "residual_connections.append", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.MaxPooling2D", "int", "int"], "methods", ["None"], ["", "def", "_create_encoder", "(", "self", ",", "in_", ",", "init_filters", ",", "kernel_reg", "=", "None", ",", "\n", "name", "=", "\"encoder\"", ")", ":", "\n", "        ", "filters", "=", "init_filters", "\n", "residual_connections", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "            ", "l_name", "=", "name", "+", "\"_L%i\"", "%", "i", "\n", "conv", "=", "Conv2D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "self", ".", "kernel_size", ",", "\n", "activation", "=", "self", ".", "activation", ",", "padding", "=", "self", ".", "padding", ",", "\n", "kernel_regularizer", "=", "kernel_reg", ",", "\n", "name", "=", "l_name", "+", "\"_conv1\"", ")", "(", "in_", ")", "\n", "conv", "=", "Conv2D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "self", ".", "kernel_size", ",", "\n", "activation", "=", "self", ".", "activation", ",", "padding", "=", "self", ".", "padding", ",", "\n", "kernel_regularizer", "=", "kernel_reg", ",", "\n", "name", "=", "l_name", "+", "\"_conv2\"", ")", "(", "conv", ")", "\n", "bn", "=", "BatchNormalization", "(", "name", "=", "l_name", "+", "\"_BN\"", ")", "(", "conv", ")", "\n", "in_", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "l_name", "+", "\"_pool\"", ")", "(", "bn", ")", "\n", "\n", "# Update filter count and add bn layer to list for residual conn.", "\n", "filters", "*=", "2", "\n", "residual_connections", ".", "append", "(", "bn", ")", "\n", "", "return", "in_", ",", "residual_connections", ",", "filters", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet.UNet._create_bottom": [[136, 147], ["tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "int", "int"], "methods", ["None"], ["", "def", "_create_bottom", "(", "self", ",", "in_", ",", "filters", ",", "kernel_reg", "=", "None", ",", "name", "=", "\"bottom\"", ")", ":", "\n", "        ", "conv", "=", "Conv2D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "self", ".", "kernel_size", ",", "\n", "activation", "=", "self", ".", "activation", ",", "padding", "=", "self", ".", "padding", ",", "\n", "kernel_regularizer", "=", "kernel_reg", ",", "\n", "name", "=", "name", "+", "\"_conv1\"", ")", "(", "in_", ")", "\n", "conv", "=", "Conv2D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "self", ".", "kernel_size", ",", "\n", "activation", "=", "self", ".", "activation", ",", "padding", "=", "self", ".", "padding", ",", "\n", "kernel_regularizer", "=", "kernel_reg", ",", "\n", "name", "=", "name", "+", "\"_conv2\"", ")", "(", "conv", ")", "\n", "bn", "=", "BatchNormalization", "(", "name", "=", "name", "+", "\"_BN\"", ")", "(", "conv", ")", "\n", "return", "bn", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet.UNet._create_upsample": [[148, 181], ["range", "unet.UNet.crop_nodes_to_match", "tensorflow.keras.layers.UpSampling2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet3D.UNet3D.crop_nodes_to_match"], ["", "def", "_create_upsample", "(", "self", ",", "in_", ",", "res_conns", ",", "filters", ",", "kernel_reg", "=", "None", ",", "\n", "name", "=", "\"upsample\"", ")", ":", "\n", "        ", "residual_connections", "=", "res_conns", "[", ":", ":", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "            ", "l_name", "=", "name", "+", "\"_L%i\"", "%", "i", "\n", "# Reduce filter count", "\n", "filters", "/=", "2", "\n", "\n", "# Up-sampling block", "\n", "# Note: 2x2 filters used for backward comp, but you probably", "\n", "# want to use 3x3 here instead.", "\n", "up", "=", "UpSampling2D", "(", "size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "l_name", "+", "\"_up\"", ")", "(", "in_", ")", "\n", "conv", "=", "Conv2D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "2", ",", "\n", "activation", "=", "self", ".", "activation", ",", "\n", "padding", "=", "self", ".", "padding", ",", "kernel_regularizer", "=", "kernel_reg", ",", "\n", "name", "=", "l_name", "+", "\"_conv1\"", ")", "(", "up", ")", "\n", "bn", "=", "BatchNormalization", "(", "name", "=", "l_name", "+", "\"_BN1\"", ")", "(", "conv", ")", "\n", "\n", "# Crop and concatenate", "\n", "cropped_res", "=", "self", ".", "crop_nodes_to_match", "(", "residual_connections", "[", "i", "]", ",", "bn", ")", "\n", "merge", "=", "Concatenate", "(", "axis", "=", "-", "1", ",", "\n", "name", "=", "l_name", "+", "\"_concat\"", ")", "(", "[", "cropped_res", ",", "bn", "]", ")", "\n", "\n", "conv", "=", "Conv2D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "self", ".", "kernel_size", ",", "\n", "activation", "=", "self", ".", "activation", ",", "padding", "=", "self", ".", "padding", ",", "\n", "kernel_regularizer", "=", "kernel_reg", ",", "\n", "name", "=", "l_name", "+", "\"_conv2\"", ")", "(", "merge", ")", "\n", "conv", "=", "Conv2D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "self", ".", "kernel_size", ",", "\n", "activation", "=", "self", ".", "activation", ",", "padding", "=", "self", ".", "padding", ",", "\n", "kernel_regularizer", "=", "kernel_reg", ",", "\n", "name", "=", "l_name", "+", "\"_conv3\"", ")", "(", "conv", ")", "\n", "in_", "=", "BatchNormalization", "(", "name", "=", "l_name", "+", "\"_BN2\"", ")", "(", "conv", ")", "\n", "", "return", "in_", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet.UNet.init_model": [[182, 217], ["tensorflow.keras.layers.Input", "unet.UNet._create_encoder", "unet.UNet._create_bottom", "unet.UNet._create_upsample", "tensorflow.keras.regularizers.l2", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Reshape"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet.UNet._create_encoder", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet.UNet._create_bottom", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet.UNet._create_upsample"], ["", "def", "init_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Build the UNet model with the specified input image shape.\n        \"\"\"", "\n", "inputs", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ")", "\n", "\n", "# Apply regularization if not None or 0", "\n", "kr", "=", "regularizers", ".", "l2", "(", "self", ".", "l2_reg", ")", "if", "self", ".", "l2_reg", "else", "None", "\n", "\n", "\"\"\"\n        Encoding path\n        \"\"\"", "\n", "in_", ",", "residual_cons", ",", "filters", "=", "self", ".", "_create_encoder", "(", "in_", "=", "inputs", ",", "\n", "init_filters", "=", "64", ",", "\n", "kernel_reg", "=", "kr", ")", "\n", "\n", "\"\"\"\n        Bottom (no max-pool)\n        \"\"\"", "\n", "bn", "=", "self", ".", "_create_bottom", "(", "in_", ",", "filters", ",", "kr", ")", "\n", "\n", "\"\"\"\n        Up-sampling\n        \"\"\"", "\n", "bn", "=", "self", ".", "_create_upsample", "(", "bn", ",", "residual_cons", ",", "filters", ",", "kr", ")", "\n", "\n", "\"\"\"\n        Output modeling layer\n        \"\"\"", "\n", "out", "=", "Conv2D", "(", "self", ".", "n_classes", ",", "1", ",", "activation", "=", "self", ".", "out_activation", ")", "(", "bn", ")", "\n", "if", "self", ".", "flatten_output", ":", "\n", "            ", "out", "=", "Reshape", "(", "[", "self", ".", "img_shape", "[", "0", "]", "*", "self", ".", "img_shape", "[", "1", "]", ",", "\n", "self", ".", "n_classes", "]", ",", "name", "=", "'flatten_output'", ")", "(", "out", ")", "\n", "\n", "", "return", "[", "inputs", "]", ",", "[", "out", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet.UNet.crop_nodes_to_match": [[218, 235], ["numpy.any", "numpy.array", "numpy.array", "node1.get_shape().as_list", "node2.get_shape().as_list", "numpy.array", "tensorflow.keras.layers.Cropping2D", "node1.get_shape", "node2.get_shape"], "methods", ["None"], ["", "def", "crop_nodes_to_match", "(", "self", ",", "node1", ",", "node2", ")", ":", "\n", "        ", "\"\"\"\n        If necessary, applies Cropping2D layer to node1 to match shape of node2\n        \"\"\"", "\n", "s1", "=", "np", ".", "array", "(", "node1", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "[", "1", ":", "-", "1", "]", "\n", "s2", "=", "np", ".", "array", "(", "node2", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "[", "1", ":", "-", "1", "]", "\n", "\n", "if", "np", ".", "any", "(", "s1", "!=", "s2", ")", ":", "\n", "            ", "c", "=", "(", "s1", "-", "s2", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "cr", "=", "np", ".", "array", "(", "[", "c", "//", "2", ",", "c", "//", "2", "]", ")", ".", "T", "\n", "cr", "[", ":", ",", "1", "]", "+=", "c", "%", "2", "\n", "cropped_node1", "=", "Cropping2D", "(", "cr", ")", "(", "node1", ")", "\n", "self", ".", "label_crop", "+=", "cr", "\n", "", "else", ":", "\n", "            ", "cropped_node1", "=", "node1", "\n", "\n", "", "return", "cropped_node1", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet.UNet.log": [[236, 252], ["unet.UNet.logger", "unet.UNet.logger", "unet.UNet.logger", "unet.UNet.logger", "unet.UNet.logger", "unet.UNet.logger", "unet.UNet.logger", "unet.UNet.logger", "unet.UNet.logger", "unet.UNet.logger", "unet.UNet.logger", "unet.UNet.logger", "unet.UNet.logger", "unet.UNet.logger", "unet.UNet.logger", "unet.UNet.count_params", "numpy.sum"], "methods", ["None"], ["", "def", "log", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "(", "\"UNet Model Summary\\n------------------\"", ")", "\n", "self", ".", "logger", "(", "\"Image rows:        %i\"", "%", "self", ".", "img_shape", "[", "0", "]", ")", "\n", "self", ".", "logger", "(", "\"Image cols:        %i\"", "%", "self", ".", "img_shape", "[", "1", "]", ")", "\n", "self", ".", "logger", "(", "\"Image channels:    %i\"", "%", "self", ".", "img_shape", "[", "2", "]", ")", "\n", "self", ".", "logger", "(", "\"N classes:         %i\"", "%", "self", ".", "n_classes", ")", "\n", "self", ".", "logger", "(", "\"CF factor:         %.3f\"", "%", "self", ".", "cf", "**", "2", ")", "\n", "self", ".", "logger", "(", "\"Depth:             %i\"", "%", "self", ".", "depth", ")", "\n", "self", ".", "logger", "(", "\"l2 reg:            %s\"", "%", "self", ".", "l2_reg", ")", "\n", "self", ".", "logger", "(", "\"Padding:           %s\"", "%", "self", ".", "padding", ")", "\n", "self", ".", "logger", "(", "\"Conv activation:   %s\"", "%", "self", ".", "activation", ")", "\n", "self", ".", "logger", "(", "\"Out activation:    %s\"", "%", "self", ".", "out_activation", ")", "\n", "self", ".", "logger", "(", "\"Receptive field:   %s\"", "%", "self", ".", "receptive_field", ")", "\n", "self", ".", "logger", "(", "\"N params:          %i\"", "%", "self", ".", "count_params", "(", ")", ")", "\n", "self", ".", "logger", "(", "\"Output:            %s\"", "%", "self", ".", "output", ")", "\n", "self", ".", "logger", "(", "\"Crop:              %s\"", "%", "(", "self", ".", "label_crop", "if", "np", ".", "sum", "(", "self", ".", "label_crop", ")", "!=", "0", "else", "\"None\"", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.multitask_unet2d.MultiTaskUNet2D.__init__": [[21, 40], ["len", "tuple", "multitask_unet2d.check_all_same_length", "mpunet.models.UNet.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.multitask_unet2d.check_all_same_length", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_names", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "task_names", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"'task_names' must be a list or tuple object.\"", ")", "\n", "", "self", ".", "n_tasks", "=", "len", "(", "task_names", ")", "\n", "self", ".", "task_IDs", "=", "tuple", "(", "task_names", ")", "\n", "self", ".", "_n_classes", "=", "None", "\n", "\n", "# Check that each task received the right number of parameters", "\n", "check", "=", "(", "\"n_classes\"", ",", "\"dim\"", ",", "\"out_activation\"", ",", "\"n_channels\"", ")", "\n", "check_all_same_length", "(", "check", ",", "kwargs", ",", "target_length", "=", "self", ".", "n_tasks", ")", "\n", "\n", "# Store encoder layers for shared use", "\n", "self", ".", "encoder_layers", "=", "None", "\n", "self", ".", "out_layers", "=", "None", "\n", "\n", "# Init base UNet class", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.multitask_unet2d.MultiTaskUNet2D._init_encoder": [[41, 69], ["range", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.MaxPooling2D", "multitask_unet2d.MultiTaskUNet2D.encoder_layers.update", "int", "int"], "methods", ["None"], ["", "def", "_init_encoder", "(", "self", ",", "init_filters", ",", "kernel_reg", "=", "None", ",", "name", "=", "\"encoder\"", ")", ":", "\n", "        ", "self", ".", "encoder_layers", "=", "{", "}", "\n", "filters", "=", "init_filters", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "            ", "l_name", "=", "name", "+", "\"_L%s\"", "%", "i", "\n", "conv1", "=", "Conv2D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "self", ".", "kernel_size", ",", "\n", "activation", "=", "self", ".", "activation", ",", "padding", "=", "self", ".", "padding", ",", "\n", "kernel_regularizer", "=", "kernel_reg", ",", "\n", "name", "=", "l_name", "+", "\"_conv1\"", ")", "\n", "conv2", "=", "Conv2D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "self", ".", "kernel_size", ",", "\n", "activation", "=", "self", ".", "activation", ",", "padding", "=", "self", ".", "padding", ",", "\n", "kernel_regularizer", "=", "kernel_reg", ",", "\n", "name", "=", "l_name", "+", "\"_conv2\"", ")", "\n", "bn", "=", "BatchNormalization", "(", "name", "=", "l_name", "+", "\"_BN\"", ")", "\n", "max_pool", "=", "MaxPooling2D", "(", "pool_size", "=", "(", "2", ",", "2", ")", ",", "name", "=", "l_name", "+", "\"_pool\"", ")", "\n", "\n", "# Add to dict for potential reuse", "\n", "layers", "=", "{", "\n", "\"layer%s/conv1\"", "%", "i", ":", "conv1", ",", "\n", "\"layer%s/conv2\"", "%", "i", ":", "conv2", ",", "\n", "\"layer%s/batch_norm\"", "%", "i", ":", "bn", ",", "\n", "\"layer%s/max_pool\"", "%", "i", ":", "max_pool", "\n", "}", "\n", "self", ".", "encoder_layers", ".", "update", "(", "layers", ")", "\n", "\n", "# Update filter count and add bn layer to list for residual conn.", "\n", "filters", "*=", "2", "\n", "", "return", "filters", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.multitask_unet2d.MultiTaskUNet2D._apply_encoder": [[70, 81], ["range", "residual_connections.append"], "methods", ["None"], ["", "def", "_apply_encoder", "(", "self", ",", "task_input", ")", ":", "\n", "        ", "residual_connections", "=", "[", "]", "\n", "in_", "=", "task_input", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "            ", "conv1", "=", "self", ".", "encoder_layers", "[", "\"layer%s/conv1\"", "%", "i", "]", "(", "in_", ")", "\n", "conv2", "=", "self", ".", "encoder_layers", "[", "\"layer%s/conv2\"", "%", "i", "]", "(", "conv1", ")", "\n", "bn", "=", "self", ".", "encoder_layers", "[", "\"layer%s/batch_norm\"", "%", "i", "]", "(", "conv2", ")", "\n", "in_", "=", "self", ".", "encoder_layers", "[", "\"layer%s/max_pool\"", "%", "i", "]", "(", "bn", ")", "\n", "residual_connections", ".", "append", "(", "bn", ")", "\n", "\n", "", "return", "in_", ",", "residual_connections", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.multitask_unet2d.MultiTaskUNet2D.init_model": [[82, 130], ["tuple", "multitask_unet2d.MultiTaskUNet2D._init_encoder", "zip", "tuple", "tensorflow.keras.layers.Input", "tensorflow.keras.regularizers.l2", "zip", "tensorflow.name_scope", "zip", "tensorflow.name_scope", "multitask_unet2d.MultiTaskUNet2D._apply_encoder", "tensorflow.name_scope", "multitask_unet2d.MultiTaskUNet2D._create_bottom", "tensorflow.name_scope", "multitask_unet2d.MultiTaskUNet2D._create_upsample", "tensorflow.name_scope", "tensorflow.keras.layers.Conv2D", "tensorflow.keras.layers.Conv2D.", "out_layers.append", "outputs.append"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.multitask_unet2d.MultiTaskUNet2D._init_encoder", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.multitask_unet2d.MultiTaskUNet2D._apply_encoder", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet.UNet._create_bottom", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet.UNet._create_upsample"], ["", "def", "init_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Build the UNet model with the specified input image shape.\n        \"\"\"", "\n", "self", ".", "img_shape", "=", "tuple", "(", "[", "t", "for", "t", "in", "zip", "(", "*", "self", ".", "img_shape", ")", "]", ")", "\n", "inputs", "=", "[", "Input", "(", "shape", "=", "s", ",", "\n", "name", "=", "\"Input_%s\"", "%", "t", ")", "for", "s", ",", "t", "in", "zip", "(", "self", ".", "img_shape", ",", "\n", "self", ".", "task_IDs", ")", "]", "\n", "\n", "# Apply regularization if not None or 0", "\n", "kr", "=", "regularizers", ".", "l2", "(", "self", ".", "l2_reg", ")", "if", "self", ".", "l2_reg", "else", "None", "\n", "\n", "\"\"\"\n        Encoding path\n        \"\"\"", "\n", "# Init the encoder layers", "\n", "filters", "=", "self", ".", "_init_encoder", "(", "init_filters", "=", "64", ",", "kernel_reg", "=", "kr", ")", "\n", "\n", "out_layers", "=", "[", "]", "\n", "outputs", "=", "[", "]", "\n", "zipped", "=", "zip", "(", "self", ".", "task_IDs", ",", "inputs", ",", "self", ".", "n_classes", ",", "self", ".", "out_activation", ")", "\n", "for", "task", ",", "in_", ",", "n_classes", ",", "activation", "in", "zipped", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "\"Task_%s\"", "%", "task", ")", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "\"encoder\"", ")", ":", "\n", "# Apply the encoder to all inputs", "\n", "                    ", "in_", ",", "res", "=", "self", ".", "_apply_encoder", "(", "in_", ")", "\n", "\n", "# Bottom (no max-pool)", "\n", "", "with", "tf", ".", "name_scope", "(", "\"bottom\"", ")", ":", "\n", "                    ", "bn", "=", "self", ".", "_create_bottom", "(", "in_", ",", "filters", ",", "kr", ",", "name", "=", "task", ")", "\n", "\n", "# Up-sampling", "\n", "", "with", "tf", ".", "name_scope", "(", "\"decoder\"", ")", ":", "\n", "                    ", "bn", "=", "self", ".", "_create_upsample", "(", "bn", ",", "res", ",", "filters", ",", "kr", ",", "name", "=", "task", ")", "\n", "\n", "", "\"\"\"\n                Output modeling layer\n                \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"classifier\"", ")", ":", "\n", "                    ", "out_layer", "=", "Conv2D", "(", "n_classes", ",", "1", ",", "\n", "activation", "=", "activation", ",", "\n", "name", "=", "\"%s\"", "%", "task", ")", "\n", "out", "=", "out_layer", "(", "bn", ")", "\n", "out_layers", ".", "append", "(", "out_layer", ")", "\n", "outputs", ".", "append", "(", "out", ")", "\n", "\n", "", "", "", "self", ".", "out_layers", "=", "tuple", "(", "out_layers", ")", "\n", "return", "inputs", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.multitask_unet2d.MultiTaskUNet2D.log": [[131, 154], ["multitask_unet2d.MultiTaskUNet2D.logger", "multitask_unet2d.MultiTaskUNet2D.logger", "multitask_unet2d.MultiTaskUNet2D.logger", "multitask_unet2d.MultiTaskUNet2D.logger", "multitask_unet2d.MultiTaskUNet2D.logger", "multitask_unet2d.MultiTaskUNet2D.logger", "multitask_unet2d.MultiTaskUNet2D.logger", "multitask_unet2d.MultiTaskUNet2D.logger", "multitask_unet2d.MultiTaskUNet2D.logger", "multitask_unet2d.MultiTaskUNet2D.logger", "multitask_unet2d.MultiTaskUNet2D.logger", "enumerate", "zip", "multitask_unet2d.MultiTaskUNet2D.logger", "multitask_unet2d.MultiTaskUNet2D.logger", "multitask_unet2d.MultiTaskUNet2D.logger", "list", "list", "multitask_unet2d.MultiTaskUNet2D.count_params"], "methods", ["None"], ["", "def", "log", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "(", "\"Multi-Task UNet Model Summary\\n\"", "\n", "\"-----------------------------\"", ")", "\n", "self", ".", "logger", "(", "\"N classes:         %s\"", "%", "list", "(", "self", ".", "n_classes", ")", ")", "\n", "self", ".", "logger", "(", "\"CF factor:         %.3f\"", "%", "self", ".", "cf", "**", "2", ")", "\n", "self", ".", "logger", "(", "\"Depth:             %i\"", "%", "self", ".", "depth", ")", "\n", "self", ".", "logger", "(", "\"l2 reg:            %s\"", "%", "self", ".", "l2_reg", ")", "\n", "self", ".", "logger", "(", "\"Padding:           %s\"", "%", "self", ".", "padding", ")", "\n", "self", ".", "logger", "(", "\"Conv activation:   %s\"", "%", "self", ".", "activation", ")", "\n", "self", ".", "logger", "(", "\"Out activation:    %s\"", "%", "list", "(", "self", ".", "out_activation", ")", ")", "\n", "self", ".", "logger", "(", "\"Receptive field:   %s\"", "%", "self", ".", "receptive_field", ")", "\n", "self", ".", "logger", "(", "\"N params:          %i\"", "%", "self", ".", "count_params", "(", ")", ")", "\n", "self", ".", "logger", "(", "\"N tasks:           %i\"", "%", "self", ".", "n_tasks", ")", "\n", "if", "self", ".", "n_tasks", ">", "1", ":", "\n", "            ", "inputs", "=", "self", ".", "input", "\n", "outputs", "=", "self", ".", "output", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "[", "self", ".", "input", "]", "\n", "outputs", "=", "[", "self", ".", "output", "]", "\n", "", "for", "i", ",", "(", "id_", ",", "in_", ",", "out", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "task_IDs", ",", "inputs", ",", "outputs", ")", ")", ":", "\n", "            ", "self", ".", "logger", "(", "\"\\n--- Task %s ---\"", "%", "id_", ")", "\n", "self", ".", "logger", "(", "\"In shape:  %s\"", "%", "in_", ".", "shape", ")", "\n", "self", ".", "logger", "(", "\"Out shape: %s\\n\"", "%", "out", ".", "shape", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.multitask_unet2d.check_all_same_length": [[9, 18], ["isinstance", "len", "ValueError"], "function", ["None"], ["def", "check_all_same_length", "(", "attributes", ",", "kwargs", ",", "target_length", ")", ":", "\n", "    ", "for", "attr", "in", "attributes", ":", "\n", "        ", "v", "=", "kwargs", "[", "attr", "]", "\n", "if", "not", "isinstance", "(", "v", ",", "(", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "v", "=", "[", "v", "]", "\n", "kwargs", "[", "attr", "]", "=", "v", "\n", "", "if", "len", "(", "v", ")", "!=", "target_length", ":", "\n", "            ", "raise", "ValueError", "(", "\"Must pass a '%s' of length %i (one for \"", "\n", "\"each task) - got %s\"", "%", "(", "attr", ",", "target_length", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet3D.UNet3D.__init__": [[26, 101], ["numpy.sqrt", "numpy.array", "tensorflow.keras.models.Model.__init__", "names.index", "unet3D.UNet3D.log", "mpunet.logging.ScreenLogger", "unet3D.UNet3D.init_model", "mpunet.utils.conv_arithmetics.compute_receptive_fields"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.model_init.init_model", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.conv_arithmetics.compute_receptive_fields"], ["def", "__init__", "(", "self", ",", "\n", "n_classes", ",", "\n", "dim", "=", "None", ",", "\n", "n_channels", "=", "1", ",", "\n", "depth", "=", "3", ",", "\n", "out_activation", "=", "\"softmax\"", ",", "\n", "activation", "=", "\"relu\"", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "\"same\"", ",", "\n", "complexity_factor", "=", "1", ",", "\n", "flatten_output", "=", "False", ",", "\n", "l2_reg", "=", "None", ",", "\n", "logger", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        n_classes (int):\n            The number of classes to model, gives the number of filters in the\n            final 1x1 conv layer.\n        dim (int):\n            Box dimensionality (on all three axes)\n            Note that depending on image dims cropping may\n            be necessary. To avoid this, use image dimensions DxDxD for which\n            D * (1/2)^n is an integer, where n is the number of (2x2)\n            max-pooling layers; in this implementation 4.\n            For n=4, D \\in {..., 192, 208, 224, 240, 256, ...} etc.\n        n_channels (int):\n            Number of channels in the input image.\n        depth (int):\n            Number of conv blocks in encoding layer (number of 2x2x2 max pools)\n            Note: each block doubles the filter count while halving the spatial\n            dimensions of the features.\n        out_activation (string):\n            Activation function of output 1x1x1 conv layer. Usually one of\n            'softmax', 'sigmoid' or 'linear'.\n        activation (string):\n            Activation function for convolution layers\n        kernel_size (int):\n            Kernel size for convolution layers\n        padding (string):\n            Padding type ('same' or 'valid')\n        complexity_factor (int/float):\n            Use int(N * sqrt(complexity_factor)) number of filters in each\n            3D convolution layer instead of default N.\n        l2_reg (float in [0, 1])\n            L2 regularization on Conv3D weights\n        logger (mpunet.logging.Logger | ScreenLogger):\n            MutliViewUNet.Logger object, logging to files or screen.\n        \"\"\"", "\n", "# Set logger or standard print wrapper", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "\n", "# Set various attributes", "\n", "self", ".", "img_shape", "=", "(", "dim", ",", "dim", ",", "dim", ",", "n_channels", ")", "\n", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "cf", "=", "np", ".", "sqrt", "(", "complexity_factor", ")", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "out_activation", "=", "out_activation", "\n", "self", ".", "l2_reg", "=", "l2_reg", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "depth", "=", "depth", "\n", "self", ".", "flatten_output", "=", "flatten_output", "\n", "\n", "# Shows the number of pixels cropped of the input image to the output", "\n", "self", ".", "label_crop", "=", "np", ".", "array", "(", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "\n", "# Build model and init base keras Model class", "\n", "super", "(", ")", ".", "__init__", "(", "*", "self", ".", "init_model", "(", ")", ")", "\n", "\n", "# Compute receptive field", "\n", "names", "=", "[", "x", ".", "__class__", ".", "__name__", "for", "x", "in", "self", ".", "layers", "]", "\n", "index", "=", "names", ".", "index", "(", "\"UpSampling3D\"", ")", "\n", "self", ".", "receptive_field", "=", "compute_receptive_fields", "(", "self", ".", "layers", "[", ":", "index", "]", ")", "[", "-", "1", "]", "[", "-", "1", "]", "\n", "\n", "# Log the model definition", "\n", "self", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet3D.UNet3D.init_model": [[102, 179], ["tensorflow.keras.layers.Input", "range", "range", "tensorflow.keras.regularizers.l2", "residual_connections.append", "tensorflow.keras.layers.Conv3D", "tensorflow.keras.layers.Conv3D", "tensorflow.keras.layers.BatchNormalization", "unet3D.UNet3D.crop_nodes_to_match", "tensorflow.keras.layers.Conv3D", "tensorflow.keras.layers.Conv3D", "tensorflow.keras.layers.Conv3D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.MaxPooling3D", "int", "int", "tensorflow.keras.layers.UpSampling3D", "tensorflow.keras.layers.Conv3D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Concatenate", "tensorflow.keras.layers.Conv3D", "tensorflow.keras.layers.Conv3D", "tensorflow.keras.layers.BatchNormalization", "tensorflow.keras.layers.Reshape", "int", "int", "int", "int", "int", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet3D.UNet3D.crop_nodes_to_match"], ["", "def", "init_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Build the UNet model with the specified input image shape.\n        \"\"\"", "\n", "inputs", "=", "Input", "(", "shape", "=", "self", ".", "img_shape", ")", "\n", "\n", "# Apply regularization if not None or 0", "\n", "kr", "=", "regularizers", ".", "l2", "(", "self", ".", "l2_reg", ")", "if", "self", ".", "l2_reg", "else", "None", "\n", "\n", "\"\"\"\n        Encoding path\n        \"\"\"", "\n", "filters", "=", "64", "\n", "in_", "=", "inputs", "\n", "residual_connections", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "            ", "conv", "=", "Conv3D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "self", ".", "kernel_size", ",", "\n", "activation", "=", "self", ".", "activation", ",", "padding", "=", "self", ".", "padding", ",", "\n", "kernel_regularizer", "=", "kr", ")", "(", "in_", ")", "\n", "conv", "=", "Conv3D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "self", ".", "kernel_size", ",", "\n", "activation", "=", "self", ".", "activation", ",", "padding", "=", "self", ".", "padding", ",", "\n", "kernel_regularizer", "=", "kr", ")", "(", "conv", ")", "\n", "bn", "=", "BatchNormalization", "(", ")", "(", "conv", ")", "\n", "in_", "=", "MaxPooling3D", "(", "pool_size", "=", "(", "2", ",", "2", ",", "2", ")", ")", "(", "bn", ")", "\n", "\n", "# Update filter count and add bn layer to list for residual conn.", "\n", "filters", "*=", "2", "\n", "residual_connections", ".", "append", "(", "bn", ")", "\n", "\n", "", "\"\"\"\n        Bottom (no max-pool)\n        \"\"\"", "\n", "conv", "=", "Conv3D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "self", ".", "kernel_size", ",", "\n", "activation", "=", "self", ".", "activation", ",", "padding", "=", "self", ".", "padding", ",", "\n", "kernel_regularizer", "=", "kr", ")", "(", "in_", ")", "\n", "conv", "=", "Conv3D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "self", ".", "kernel_size", ",", "\n", "activation", "=", "self", ".", "activation", ",", "padding", "=", "self", ".", "padding", ",", "\n", "kernel_regularizer", "=", "kr", ")", "(", "conv", ")", "\n", "bn", "=", "BatchNormalization", "(", ")", "(", "conv", ")", "\n", "\n", "\"\"\"\n        Up-sampling\n        \"\"\"", "\n", "residual_connections", "=", "residual_connections", "[", ":", ":", "-", "1", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "depth", ")", ":", "\n", "# Reduce filter count", "\n", "            ", "filters", "/=", "2", "\n", "\n", "# Up-sampling block", "\n", "# Note: 2x2 filters used for backward comp, but you probably", "\n", "# want to use 3x3 here instead.", "\n", "up", "=", "UpSampling3D", "(", "size", "=", "(", "2", ",", "2", ",", "2", ")", ")", "(", "bn", ")", "\n", "conv", "=", "Conv3D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "2", ",", "activation", "=", "self", ".", "activation", ",", "\n", "padding", "=", "self", ".", "padding", ",", "kernel_regularizer", "=", "kr", ")", "(", "up", ")", "\n", "bn", "=", "BatchNormalization", "(", ")", "(", "conv", ")", "\n", "\n", "# Crop and concatenate", "\n", "cropped_res", "=", "self", ".", "crop_nodes_to_match", "(", "residual_connections", "[", "i", "]", ",", "bn", ")", "\n", "merge", "=", "Concatenate", "(", "axis", "=", "-", "1", ")", "(", "[", "cropped_res", ",", "bn", "]", ")", "\n", "\n", "conv", "=", "Conv3D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "self", ".", "kernel_size", ",", "\n", "activation", "=", "self", ".", "activation", ",", "padding", "=", "self", ".", "padding", ",", "\n", "kernel_regularizer", "=", "kr", ")", "(", "merge", ")", "\n", "conv", "=", "Conv3D", "(", "int", "(", "filters", "*", "self", ".", "cf", ")", ",", "self", ".", "kernel_size", ",", "\n", "activation", "=", "self", ".", "activation", ",", "padding", "=", "self", ".", "padding", ",", "\n", "kernel_regularizer", "=", "kr", ")", "(", "conv", ")", "\n", "bn", "=", "BatchNormalization", "(", ")", "(", "conv", ")", "\n", "\n", "", "\"\"\"\n        Output modeling layer\n        \"\"\"", "\n", "out", "=", "Conv3D", "(", "self", ".", "n_classes", ",", "1", ",", "activation", "=", "self", ".", "out_activation", ")", "(", "bn", ")", "\n", "if", "self", ".", "flatten_output", ":", "\n", "            ", "out", "=", "Reshape", "(", "[", "np", ".", "prod", "(", "self", ".", "img_shape", "[", ":", "3", "]", ")", ",", "\n", "self", ".", "n_classes", "]", ",", "name", "=", "'flatten_output'", ")", "(", "out", ")", "\n", "\n", "", "return", "[", "inputs", "]", ",", "[", "out", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet3D.UNet3D.crop_nodes_to_match": [[180, 197], ["numpy.any", "numpy.array", "numpy.array", "node1.get_shape().as_list", "node2.get_shape().as_list", "numpy.array", "tensorflow.keras.layers.Cropping3D", "node1.get_shape", "node2.get_shape"], "methods", ["None"], ["", "def", "crop_nodes_to_match", "(", "self", ",", "node1", ",", "node2", ")", ":", "\n", "        ", "\"\"\"\n        If necessary, applies Cropping3D layer to node1 to match shape of node2\n        \"\"\"", "\n", "s1", "=", "np", ".", "array", "(", "node1", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "[", "1", ":", "-", "1", "]", "\n", "s2", "=", "np", ".", "array", "(", "node2", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "[", "1", ":", "-", "1", "]", "\n", "\n", "if", "np", ".", "any", "(", "s1", "!=", "s2", ")", ":", "\n", "            ", "c", "=", "(", "s1", "-", "s2", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "cr", "=", "np", ".", "array", "(", "[", "c", "//", "2", ",", "c", "//", "2", "]", ")", ".", "T", "\n", "cr", "[", ":", ",", "1", "]", "+=", "c", "%", "2", "\n", "cropped_node1", "=", "Cropping3D", "(", "cr", ")", "(", "node1", ")", "\n", "self", ".", "label_crop", "+=", "cr", "\n", "", "else", ":", "\n", "            ", "cropped_node1", "=", "node1", "\n", "\n", "", "return", "cropped_node1", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.unet3D.UNet3D.log": [[198, 213], ["unet3D.UNet3D.logger", "unet3D.UNet3D.logger", "unet3D.UNet3D.logger", "unet3D.UNet3D.logger", "unet3D.UNet3D.logger", "unet3D.UNet3D.logger", "unet3D.UNet3D.logger", "unet3D.UNet3D.logger", "unet3D.UNet3D.logger", "unet3D.UNet3D.logger", "unet3D.UNet3D.logger", "unet3D.UNet3D.logger", "unet3D.UNet3D.logger", "unet3D.UNet3D.logger", "tuple", "unet3D.UNet3D.count_params", "numpy.sum"], "methods", ["None"], ["", "def", "log", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "(", "\"UNet3D Model Summary\\n--------------------\"", ")", "\n", "self", ".", "logger", "(", "\"Image dims:        (%i, %i, %i)\"", "%", "tuple", "(", "self", ".", "img_shape", "[", ":", "-", "1", "]", ")", ")", "\n", "self", ".", "logger", "(", "\"Image channels:    %i\"", "%", "self", ".", "img_shape", "[", "-", "1", "]", ")", "\n", "self", ".", "logger", "(", "\"N classes:         %i\"", "%", "self", ".", "n_classes", ")", "\n", "self", ".", "logger", "(", "\"CF factor:         %.3f\"", "%", "self", ".", "cf", "**", "2", ")", "\n", "self", ".", "logger", "(", "\"Depth:             %i\"", "%", "self", ".", "depth", ")", "\n", "self", ".", "logger", "(", "\"l2 reg:            %s\"", "%", "self", ".", "l2_reg", ")", "\n", "self", ".", "logger", "(", "\"Padding:           %s\"", "%", "self", ".", "padding", ")", "\n", "self", ".", "logger", "(", "\"Conv activation:   %s\"", "%", "self", ".", "activation", ")", "\n", "self", ".", "logger", "(", "\"Out activation:    %s\"", "%", "self", ".", "out_activation", ")", "\n", "self", ".", "logger", "(", "\"Receptive field:   %s\"", "%", "self", ".", "receptive_field", ")", "\n", "self", ".", "logger", "(", "\"N params:          %i\"", "%", "self", ".", "count_params", "(", ")", ")", "\n", "self", ".", "logger", "(", "\"Output:            %s\"", "%", "self", ".", "output", ")", "\n", "self", ".", "logger", "(", "\"Crop:              %s\"", "%", "(", "self", ".", "label_crop", "if", "np", ".", "sum", "(", "self", ".", "label_crop", ")", "!=", "0", "else", "\"None\"", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.model_init.init_model": [[5, 14], ["logger", "mpunet.logging.ScreenLogger"], "function", ["None"], ["def", "init_model", "(", "build_hparams", ",", "logger", "=", "None", ")", ":", "\n", "    ", "from", "mpunet", "import", "models", "\n", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "\n", "# Build new model of the specified type", "\n", "cls_name", "=", "build_hparams", "[", "\"model_class_name\"", "]", "\n", "logger", "(", "\"Creating new model of type '%s'\"", "%", "cls_name", ")", "\n", "\n", "return", "models", ".", "__dict__", "[", "cls_name", "]", "(", "logger", "=", "logger", ",", "**", "build_hparams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.model_init.model_initializer": [[16, 60], ["model_init.init_model", "mpunet.logging.ScreenLogger", "get_last_model", "os.path.join", "get_lr_at_epoch", "logger", "ValueError", "os.path.join", "init_model.load_weights", "get_last_epoch", "clear_csv_after_epoch", "os.path.join", "init_model.load_weights", "logger", "os.path.split"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.models.model_init.init_model", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_last_model", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_lr_at_epoch", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.get_last_epoch", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.clear_csv_after_epoch", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "def", "model_initializer", "(", "hparams", ",", "continue_training", ",", "project_dir", ",", "\n", "initialize_from", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "    ", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "\n", "# Init model", "\n", "model", "=", "init_model", "(", "hparams", "[", "\"build\"", "]", ",", "logger", ")", "\n", "\n", "if", "continue_training", ":", "\n", "        ", "if", "initialize_from", ":", "\n", "            ", "raise", "ValueError", "(", "\"Failed to initialize model with both \"", "\n", "\"continue_training and initialize_from set.\"", ")", "\n", "", "from", "mpunet", ".", "utils", "import", "get_last_model", ",", "get_lr_at_epoch", ",", "clear_csv_after_epoch", ",", "get_last_epoch", "\n", "model_path", ",", "epoch", "=", "get_last_model", "(", "os", ".", "path", ".", "join", "(", "project_dir", ",", "\"model\"", ")", ")", "\n", "if", "model_path", ":", "\n", "            ", "model", ".", "load_weights", "(", "model_path", ",", "by_name", "=", "True", ")", "\n", "model_name", "=", "os", ".", "path", ".", "split", "(", "model_path", ")", "[", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "model_name", "=", "\"<No model found>\"", "\n", "", "csv_path", "=", "os", ".", "path", ".", "join", "(", "project_dir", ",", "\"logs\"", ",", "\"training.csv\"", ")", "\n", "if", "epoch", "==", "0", ":", "\n", "            ", "epoch", "=", "get_last_epoch", "(", "csv_path", ")", "\n", "", "else", ":", "\n", "            ", "if", "epoch", "is", "None", ":", "\n", "                ", "epoch", "=", "0", "\n", "", "clear_csv_after_epoch", "(", "epoch", ",", "csv_path", ")", "\n", "", "hparams", "[", "\"fit\"", "]", "[", "\"init_epoch\"", "]", "=", "epoch", "+", "1", "\n", "\n", "# Get the LR at the continued epoch", "\n", "lr", ",", "name", "=", "get_lr_at_epoch", "(", "epoch", ",", "os", ".", "path", ".", "join", "(", "project_dir", ",", "\"logs\"", ")", ")", "\n", "if", "lr", ":", "\n", "            ", "hparams", "[", "\"fit\"", "]", "[", "\"optimizer_kwargs\"", "]", "[", "name", "]", "=", "lr", "\n", "\n", "", "logger", "(", "\"[NOTICE] Training continues from:\\n\"", "\n", "\"Model: %s\\n\"", "\n", "\"Epoch: %i\\n\"", "\n", "\"LR:    %s\"", "%", "(", "model_name", ",", "epoch", ",", "lr", ")", ")", "\n", "", "else", ":", "\n", "        ", "hparams", "[", "\"fit\"", "]", "[", "\"init_epoch\"", "]", "=", "0", "\n", "if", "initialize_from", ":", "\n", "            ", "model", ".", "load_weights", "(", "initialize_from", ",", "by_name", "=", "True", ")", "\n", "logger", "(", "\"[NOTICE] Initializing parameters from:\\n\"", "\n", "\"{}\"", ".", "format", "(", "initialize_from", ")", ")", "\n", "", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.__init__": [[61, 94], ["dict.__init__", "os.path.abspath", "YAML().load.YAMLHParams.update", "hparams._check_deprecated_params", "mpunet.logging.ScreenLogger", "os.path.split", "os.path.exists", "OSError", "ruamel.yaml.YAML().load", "YAML().load.YAMLHParams.logger", "hparams._check_version", "open", "yaml_file.read", "kwargs.get", "hparams._set_version", "ruamel.yaml.YAML"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams._check_deprecated_params", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams._check_version", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams._set_version"], ["    ", "def", "__init__", "(", "self", ",", "yaml_path", ",", "logger", "=", "None", ",", "no_log", "=", "False", ",", "\n", "no_version_control", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "dict", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "\n", "# Set logger or default print", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "\n", "# Set YAML path", "\n", "self", ".", "yaml_path", "=", "os", ".", "path", ".", "abspath", "(", "yaml_path", ")", "\n", "self", ".", "string_rep", "=", "\"\"", "\n", "self", ".", "project_path", "=", "os", ".", "path", ".", "split", "(", "self", ".", "yaml_path", ")", "[", "0", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "yaml_path", ")", ":", "\n", "            ", "raise", "OSError", "(", "\"YAML path '%s' does not exist\"", "%", "self", ".", "yaml_path", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "self", ".", "yaml_path", ",", "\"r\"", ")", "as", "yaml_file", ":", "\n", "                ", "self", ".", "string_rep", "=", "yaml_file", ".", "read", "(", ")", "\n", "", "hparams", "=", "YAML", "(", "typ", "=", "\"safe\"", ")", ".", "load", "(", "self", ".", "string_rep", ")", "\n", "\n", "# Set dict elements", "\n", "", "self", ".", "update", "(", "{", "k", ":", "hparams", "[", "k", "]", "for", "k", "in", "hparams", "if", "k", "[", ":", "4", "]", "!=", "\"__CB\"", "}", ")", "\n", "\n", "# Log basic information here...", "\n", "self", ".", "no_log", "=", "no_log", "\n", "if", "not", "self", ".", "no_log", ":", "\n", "            ", "self", ".", "logger", "(", "\"YAML path:    %s\"", "%", "self", ".", "yaml_path", ")", "\n", "\n", "# Version controlling", "\n", "", "_check_deprecated_params", "(", "self", ",", "self", ".", "logger", ")", "\n", "if", "not", "no_version_control", ":", "\n", "            ", "package", "=", "kwargs", ".", "get", "(", "'package'", ")", "or", "\"mpunet\"", "\n", "has_git", "=", "_check_version", "(", "self", ",", "self", ".", "logger", ",", "package", ")", "\n", "if", "has_git", ":", "\n", "                ", "_set_version", "(", "self", ",", "self", ".", "logger", "if", "not", "no_log", "else", "None", ",", "package", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.groups": [[95, 105], ["re.compile", "re.finditer", "groups.append", "iter.start", "groups.append"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.start"], ["", "", "", "@", "property", "\n", "def", "groups", "(", "self", ")", ":", "\n", "        ", "groups_re", "=", "re", ".", "compile", "(", "r\"\\n^(?![ \\n])(.*?:.*?\\n)\"", ",", "re", ".", "MULTILINE", ")", "\n", "start", ",", "groups", "=", "0", ",", "[", "]", "\n", "for", "iter", "in", "re", ".", "finditer", "(", "groups_re", ",", "self", ".", "string_rep", ")", ":", "\n", "            ", "end", "=", "iter", ".", "start", "(", "0", ")", "\n", "groups", ".", "append", "(", "self", ".", "string_rep", "[", "start", ":", "end", "]", ")", "\n", "start", "=", "end", "\n", "", "groups", ".", "append", "(", "self", ".", "string_rep", "[", "start", ":", "]", ")", "\n", "return", "groups", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_group": [[106, 109], ["g.lstrip().lstrip", "g.lstrip", "g.split"], "methods", ["None"], ["", "def", "get_group", "(", "self", ",", "group_name", ")", ":", "\n", "        ", "groups", "=", "[", "g", ".", "lstrip", "(", "\"\\n\"", ")", ".", "lstrip", "(", "\" \"", ")", "for", "g", "in", "self", ".", "groups", "]", "\n", "return", "groups", "[", "[", "g", ".", "split", "(", "\":\"", ")", "[", "0", "]", "for", "g", "in", "groups", "]", ".", "index", "(", "group_name", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.add_group": [[110, 118], ["yaml_string.lstrip().lstrip().split", "ruamel.yaml.YAML().load", "yaml_string.lstrip", "yaml_string.lstrip().lstrip", "ruamel.yaml.YAML", "yaml_string.lstrip"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load"], ["", "def", "add_group", "(", "self", ",", "yaml_string", ")", ":", "\n", "        ", "group_name", "=", "yaml_string", ".", "lstrip", "(", "\" \"", ")", ".", "lstrip", "(", "\"\\n\"", ")", ".", "split", "(", "\":\"", ")", "[", "0", "]", "\n", "\n", "# Set dict version in memory", "\n", "self", "[", "group_name", "]", "=", "YAML", "(", ")", ".", "load", "(", "yaml_string", ")", "[", "group_name", "]", "\n", "\n", "# Add pure yaml string to string representation", "\n", "self", ".", "string_rep", "+=", "(", "\"\\n\"", "+", "yaml_string", ".", "lstrip", "(", "\" \\n\"", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.delete_group": [[119, 122], ["hparams.YAMLHParams.string_rep.replace", "hparams.YAMLHParams.get_group"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_group"], ["", "def", "delete_group", "(", "self", ",", "group_name", ")", ":", "\n", "        ", "self", ".", "string_rep", "=", "self", ".", "string_rep", ".", "replace", "(", "self", ".", "get_group", "(", "group_name", ")", ",", "\"\"", ")", "\n", "del", "self", "[", "group_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_from_anywhere": [[123, 140], ["len", "hparams.YAMLHParams.logger", "found.append", "len"], "methods", ["None"], ["", "def", "get_from_anywhere", "(", "self", ",", "key", ",", "default", "=", "None", ")", ":", "\n", "        ", "found", "=", "[", "]", "\n", "for", "group_str", "in", "self", ":", "\n", "            ", "group", "=", "self", "[", "group_str", "]", "\n", "try", ":", "\n", "                ", "f", "=", "key", "in", "group", "\n", "", "except", "TypeError", ":", "\n", "                ", "f", "=", "False", "\n", "", "if", "f", ":", "\n", "                ", "found", ".", "append", "(", "(", "group", ",", "group", "[", "key", "]", ")", ")", "\n", "", "", "if", "len", "(", "found", ")", ">", "1", ":", "\n", "            ", "self", ".", "logger", "(", "\"[ERROR] Found key '%s' in multiple groups (%s)\"", "%", "\n", "(", "key", ",", "[", "g", "[", "0", "]", "for", "g", "in", "found", "]", ")", ")", "\n", "", "elif", "len", "(", "found", ")", "==", "0", ":", "\n", "            ", "return", "default", "\n", "", "else", ":", "\n", "            ", "return", "found", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.log": [[141, 144], ["hparams.YAMLHParams.logger"], "methods", ["None"], ["", "", "def", "log", "(", "self", ")", ":", "\n", "        ", "for", "item", "in", "self", ":", "\n", "            ", "self", ".", "logger", "(", "\"%s\\t\\t%s\"", "%", "(", "item", ",", "self", "[", "item", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams._update_string_line_by_name": [[145, 160], ["group.split", "enumerate", "hparams.YAMLHParams.string_rep.replace", "hparams.YAMLHParams.get_group", "line.lstrip().startswith", "AttributeError", "line.lstrip", "line.split"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_group"], ["", "", "def", "_update_string_line_by_name", "(", "self", ",", "name", ",", "new_value", ",", "subdir", "=", "None", ")", ":", "\n", "        ", "group", "=", "self", ".", "string_rep", "if", "not", "subdir", "else", "self", ".", "get_group", "(", "subdir", ")", "\n", "lines", "=", "group", ".", "split", "(", "\"\\n\"", ")", "\n", "found", "=", "False", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "found", ":", "\n", "                ", "break", "\n", "", "if", "line", ".", "lstrip", "(", ")", ".", "startswith", "(", "name", ")", ":", "\n", "                ", "new_line", "=", "line", ".", "split", "(", "\":\"", ")", "[", "0", "]", "+", "\": {}\"", ".", "format", "(", "new_value", ")", "\n", "lines", "[", "i", "]", "=", "new_line", "\n", "found", "=", "True", "\n", "", "", "if", "not", "found", ":", "\n", "            ", "raise", "AttributeError", "(", "\"No field has the name '{}'\"", ".", "format", "(", "name", ")", ")", "\n", "", "new_group", "=", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "self", ".", "string_rep", "=", "self", ".", "string_rep", ".", "replace", "(", "group", ",", "new_group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams._set_value_no_subdir": [[161, 180], ["hparams.YAMLHParams.get", "hparams.YAMLHParams._update_string_line_by_name", "AttributeError", "hparams.YAMLHParams.string_rep.rstrip"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams._update_string_line_by_name"], ["", "def", "_set_value_no_subdir", "(", "self", ",", "name", ",", "value", ",", "str_value", ",", "overwrite", ",", "\n", "add_if_missing", ")", ":", "\n", "        ", "cur_value", "=", "self", ".", "get", "(", "name", ",", "None", ")", "\n", "if", "name", "in", "self", ":", "\n", "            ", "if", "cur_value", "is", "not", "None", "and", "not", "overwrite", ":", "\n", "                ", "return", "\"Item of name '{}' already set with value '{}'.\"", "\" Skipping. (overwrite=False)\"", ".", "format", "(", "name", ",", "value", ")", "\n", "# Update string representation", "\n", "", "self", ".", "_update_string_line_by_name", "(", "name", ",", "str_value", ")", "\n", "", "elif", "not", "add_if_missing", ":", "\n", "            ", "raise", "AttributeError", "(", "\"Entry with name '{}' does not exist and \"", "\n", "\"add_if_missing was set to False.\"", "\n", "\"\"", ".", "format", "(", "name", ")", ")", "\n", "", "else", ":", "\n", "# Add to end of string representation", "\n", "            ", "self", ".", "string_rep", "=", "self", ".", "string_rep", ".", "rstrip", "(", "\"\\n\"", ")", "+", "\"\\n\\n{}: {}\\n\"", ".", "format", "(", "name", ",", "str_value", ")", "\n", "# Set the value in memory", "\n", "", "self", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams._set_value_in_existing_dir": [[181, 203], ["hparams.YAMLHParams.get", "hparams.YAMLHParams._update_string_line_by_name", "AttributeError", "hparams.YAMLHParams.get_group().rstrip", "hparams.YAMLHParams.string_rep.replace", "hparams.YAMLHParams.get_group"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams._update_string_line_by_name", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_group"], ["", "def", "_set_value_in_existing_dir", "(", "self", ",", "subdir", ",", "name", ",", "value", ",", "str_value", ",", "\n", "overwrite", ",", "add_if_missing", ")", ":", "\n", "        ", "cur_value", "=", "self", "[", "subdir", "]", ".", "get", "(", "name", ",", "None", ")", "\n", "if", "name", "in", "self", "[", "subdir", "]", ":", "\n", "            ", "if", "cur_value", "is", "not", "None", "and", "not", "overwrite", ":", "\n", "                ", "return", "\"Entry of name '{}' already set in subdir '{}' \"", "\"with value '{}'. Skipping \"", "\"(overwrite=False).\"", ".", "format", "(", "name", ",", "subdir", ",", "value", ")", "\n", "# Update string representation of new value", "\n", "", "self", ".", "_update_string_line_by_name", "(", "name", ",", "str_value", ",", "subdir", "=", "subdir", ")", "\n", "", "elif", "not", "add_if_missing", ":", "\n", "            ", "raise", "AttributeError", "(", "\"Entry with name '{}' does not exist under \"", "\n", "\"subdir '{}' and add_if_missing was set to \"", "\n", "\"False.\"", ".", "format", "(", "name", ",", "subdir", ")", ")", "\n", "", "else", ":", "\n", "# Add the line to the group", "\n", "            ", "group", "=", "self", ".", "get_group", "(", "subdir", ")", ".", "rstrip", "(", "\" \\n\"", ")", "\n", "entry", "=", "\"  {}: {}\"", ".", "format", "(", "name", ",", "str_value", ")", "\n", "new_group", "=", "\"{}\\n{}\"", ".", "format", "(", "group", ",", "entry", ")", "\n", "self", ".", "string_rep", "=", "self", ".", "string_rep", ".", "replace", "(", "group", ",", "new_group", ")", "\n", "# Update value in memory", "\n", "", "self", "[", "subdir", "]", "[", "name", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams._set_value_in_subdir": [[204, 218], ["hparams.YAMLHParams._set_value_in_existing_dir", "AttributeError", "hparams.YAMLHParams.add_group"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams._set_value_in_existing_dir", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.add_group"], ["", "def", "_set_value_in_subdir", "(", "self", ",", "subdir", ",", "name", ",", "value", ",", "str_value", ",", "overwrite", ",", "\n", "add_if_missing", ")", ":", "\n", "        ", "if", "subdir", "not", "in", "self", ":", "\n", "            ", "if", "not", "add_if_missing", ":", "\n", "                ", "raise", "AttributeError", "(", "\"Subdir '{}' does not \"", "\n", "\"exist.\"", ".", "format", "(", "subdir", ")", ")", "\n", "", "else", ":", "\n", "                ", "new_group", "=", "\"{}:\\n  {}: {}\"", ".", "format", "(", "subdir", ",", "name", ",", "str_value", ")", "\n", "self", ".", "add_group", "(", "new_group", ")", "\n", "return", "\"Subdir '{}' does not exist, creating it now... \"", "\"(add_if_missing=True)\"", ".", "format", "(", "subdir", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "self", ".", "_set_value_in_existing_dir", "(", "\n", "subdir", ",", "name", ",", "value", ",", "str_value", ",", "overwrite", ",", "add_if_missing", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.set_value": [[220, 241], ["isinstance", "hparams.YAMLHParams.logger", "numpy.array2string", "str", "hparams.YAMLHParams._set_value_no_subdir", "hparams.YAMLHParams._set_value_in_subdir", "type"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams._set_value_no_subdir", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams._set_value_in_subdir"], ["", "", "def", "set_value", "(", "self", ",", "subdir", ",", "name", ",", "value", ",", "overwrite", "=", "False", ",", "add_if_missing", "=", "True", ")", ":", "\n", "# Get propper str rep of value", "\n", "        ", "if", "isinstance", "(", "value", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "str_value", "=", "np", ".", "array2string", "(", "value", ",", "separator", "=", "\", \"", ")", "\n", "", "else", ":", "\n", "            ", "str_value", "=", "str", "(", "value", ")", "\n", "\n", "", "if", "subdir", "is", "None", ":", "\n", "            ", "status", "=", "self", ".", "_set_value_no_subdir", "(", "name", ",", "value", ",", "str_value", ",", "\n", "overwrite", "=", "overwrite", ",", "\n", "add_if_missing", "=", "add_if_missing", ")", "\n", "", "else", ":", "\n", "            ", "status", "=", "self", ".", "_set_value_in_subdir", "(", "subdir", ",", "name", ",", "value", ",", "str_value", ",", "\n", "overwrite", "=", "overwrite", ",", "\n", "add_if_missing", "=", "add_if_missing", ")", "\n", "\n", "# Log what was actually done", "\n", "", "status", "=", "status", "or", "\"Setting value '{}' (type {}) in subdir '{}' \"", "\"with name '{}'\"", ".", "format", "(", "str_value", ",", "type", "(", "value", ")", ",", "\n", "subdir", ",", "name", ")", "\n", "self", ".", "logger", "(", "status", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.save_current": [[242, 249], ["os.path.abspath", "hparams.YAMLHParams.logger", "open", "out_f.write"], "methods", ["None"], ["", "def", "save_current", "(", "self", ",", "out_path", "=", "None", ")", ":", "\n", "# Write to file", "\n", "        ", "out_path", "=", "os", ".", "path", ".", "abspath", "(", "out_path", "or", "self", ".", "yaml_path", ")", "\n", "if", "not", "self", ".", "no_log", ":", "\n", "            ", "self", ".", "logger", "(", "\"Saving current YAML configuration to file:\\n\"", ",", "out_path", ")", "\n", "", "with", "open", "(", "out_path", ",", "\"w\"", ")", "as", "out_f", ":", "\n", "            ", "out_f", ".", "write", "(", "self", ".", "string_rep", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams._check_deprecated_params": [[8, 12], ["hparams.get", "hparams[].get", "warn_sparse_param"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.errors.deprecated_warnings.warn_sparse_param"], ["def", "_check_deprecated_params", "(", "hparams", ",", "logger", ")", ":", "\n", "    ", "if", "hparams", ".", "get", "(", "'fit'", ")", "and", "hparams", "[", "\"fit\"", "]", ".", "get", "(", "\"sparse\"", ")", ":", "\n", "        ", "from", "mpunet", ".", "errors", ".", "deprecated_warnings", "import", "warn_sparse_param", "\n", "warn_sparse_param", "(", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams._check_version": [[14, 46], ["VersionController", "VersionController.check_git", "logger.warn", "logger.warn", "RuntimeWarning", "isinstance", "logger.warn", "RuntimeWarning"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.check_git", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn"], ["", "", "def", "_check_version", "(", "hparams", ",", "logger", ",", "package", "=", "\"mpunet\"", ")", ":", "\n", "    ", "from", "mpunet", ".", "bin", ".", "version", "import", "VersionController", "\n", "vc", "=", "VersionController", "(", "package", "=", "package", ")", "\n", "if", "not", "vc", ".", "check_git", "(", ")", ":", "\n", "        ", "logger", ".", "warn", "(", "\"Path {} does not contain a Git repository, or Git is not\"", "\n", "\" installed on this system.\\n-- The software verison match \"", "\n", "\"could not be varified against the hyperparameter file.\\n\"", "\n", "\"-- Software version will not be added to the \"", "\n", "\"hyperparameter file.\"", ".", "format", "(", "vc", ".", "git_path", ")", ")", "\n", "return", "False", "\n", "", "if", "\"__VERSION__\"", "not", "in", "hparams", ":", "\n", "        ", "e", "=", "\"Could not infer the software version used to produce the \"", "\"hyperparameter file of this project. Using a later \"", "\"version of the {} software on this project \"", "\"may produce unexpected results. If you wish to continue \"", "\"using this software version on this project dir, \"", "\"manually add the following line to the hyperparameter file:\"", "\" \\n\\n__VERSION__: {}\\n\"", ".", "format", "(", "package", ",", "vc", ".", "version", ")", "\n", "logger", ".", "warn", "(", "e", ")", "\n", "raise", "RuntimeWarning", "(", "e", ")", "\n", "", "hp_version", "=", "hparams", "[", "\"__VERSION__\"", "]", "\n", "if", "isinstance", "(", "hp_version", ",", "str", ")", "and", "vc", ".", "version", "!=", "hp_version", ":", "\n", "        ", "e", "=", "\"Parameter file indicates that this project was created \"", "\"under {} version {}, but the current \"", "\"version is {}. If you wish to continue \"", "\"using this software version on this project dir, \"", "\"manually add the following line to the hyperparameter \"", "\"file:\\n\\n__VERSION__: {}\\n\"", ".", "format", "(", "package", ",", "hp_version", ",", "\n", "vc", ".", "version", ",", "vc", ".", "version", ")", "\n", "logger", ".", "warn", "(", "e", ")", "\n", "raise", "RuntimeWarning", "(", "e", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams._set_version": [[48, 58], ["VersionController", "hparams.set_value", "hparams.set_value", "hparams.set_value", "hparams.save_current", "VersionController.log_version"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.set_value", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.set_value", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.set_value", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.save_current", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.version.version_controller.VersionController.log_version"], ["", "def", "_set_version", "(", "hparams", ",", "logger", "=", "None", ",", "package", "=", "\"mpunet\"", ")", ":", "\n", "    ", "from", "mpunet", ".", "bin", ".", "version", "import", "VersionController", "\n", "vc", "=", "VersionController", "(", "package", "=", "package", ")", "\n", "if", "logger", ":", "\n", "        ", "vc", ".", "log_version", "(", "logger", ")", "\n", "", "v", ",", "b", ",", "c", "=", "vc", ".", "version", ",", "vc", ".", "branch", ",", "vc", ".", "current_commit", "\n", "hparams", ".", "set_value", "(", "None", ",", "\"__VERSION__\"", ",", "v", ",", "overwrite", "=", "True", ")", "\n", "hparams", ".", "set_value", "(", "None", ",", "\"__BRANCH__\"", ",", "b", ",", "overwrite", "=", "True", ")", "\n", "hparams", ".", "set_value", "(", "None", ",", "\"__COMMIT__\"", ",", "c", ",", "overwrite", "=", "True", ")", "\n", "hparams", ".", "save_current", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.trainer.Trainer.__init__": [[32, 50], ["mpunet.logging.ScreenLogger"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Init. simply accepts a model and stores it.\n        Optionally, an 'org_model' (original model) may be passed and stored\n        as well. This is for training multi-GPU models prepared by the\n        tf.keras.utils.multi_gpu_model utility, which returns a new, split\n        model for training (passed as 'model' parameter here). For properly\n        saving the model parameter, however, it is recommended to use the\n        original, non-split model (here passed as 'org_model').\n\n        Args:\n            model:      (tf.keras Model) Initialized model to train\n            org_model:  (tf.keras Model) Optional single-GPU version for the\n                                         passed 'model' parameter.\n            logger:     (Logger)         Optional Logger instance\n        \"\"\"", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "logger", "=", "logger", "if", "logger", "is", "not", "None", "else", "ScreenLogger", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.trainer.Trainer.compile_model": [[51, 102], ["mpunet.utils.ensure_list_or_tuple", "mpunet.utils.ensure_list_or_tuple", "mpunet.train.utils.init_optimizer", "mpunet.train.utils.init_losses", "enumerate", "mpunet.train.utils.init_metrics", "trainer.Trainer.model.compile", "trainer.Trainer.logger", "trainer.Trainer.logger", "trainer.Trainer.logger", "mpunet.train.utils.ensure_sparse", "loss", "TypeError"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.ensure_list_or_tuple", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.ensure_list_or_tuple", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.utils.init_optimizer", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.utils.init_losses", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.utils.init_metrics", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.utils.ensure_sparse"], ["", "def", "compile_model", "(", "self", ",", "optimizer", ",", "loss", ",", "metrics", ",", "reduction", ",", "\n", "check_sparse", "=", "False", ",", "optimizer_kwargs", "=", "{", "}", ",", "loss_kwargs", "=", "{", "}", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Compile the stored tf.keras Model instance stored in self.model\n        Sets the loss function, optimizer and metrics\n\n        Args:\n            optimizer:        (string) The name of a tf.keras.optimizers Optimizer\n            optimizer_kwargs: (dict)   Key-word arguments passed to the Optimizer\n            loss:             (string) The name of a tf.keras.losses or\n                                       MultiPlanarUnet loss function\n            metrics:          (list)   List of tf.keras.metrics or\n                                       mpunet metrics.\n            reduction:        TODO\n            check_sparse:     TODO\n            **kwargs:         (dict)   Key-word arguments passed to losses\n                                       and/or metrics that accept such.\n        \"\"\"", "\n", "# Make sure sparse metrics and loss are specified as sparse", "\n", "metrics", "=", "ensure_list_or_tuple", "(", "metrics", ")", "\n", "losses", "=", "ensure_list_or_tuple", "(", "loss", ")", "\n", "if", "check_sparse", ":", "\n", "            ", "ensure_sparse", "(", "metrics", "+", "losses", ")", "\n", "\n", "# Initialize optimizer, loss(es) and metric(s) from tf.keras or", "\n", "# mpunet", "\n", "", "optimizer", "=", "init_optimizer", "(", "optimizer", ",", "self", ".", "logger", ",", "**", "optimizer_kwargs", ")", "\n", "losses", "=", "init_losses", "(", "losses", ",", "self", ".", "logger", ",", "**", "kwargs", ")", "\n", "for", "i", ",", "loss", "in", "enumerate", "(", "losses", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "losses", "[", "i", "]", "=", "loss", "(", "reduction", "=", "reduction", ",", "**", "loss_kwargs", ")", "\n", "", "except", "(", "ValueError", ",", "TypeError", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\"All loss functions must currently be \"", "\n", "\"callable and accept the 'reduction' \"", "\n", "\"parameter specifying a \"", "\n", "\"tf.keras.losses.Reduction type. If you \"", "\n", "\"specified a keras loss function such as \"", "\n", "\"'sparse_categorical_crossentropy', change \"", "\n", "\"this to its corresponding loss class \"", "\n", "\"'SparseCategoricalCrossentropy'. If \"", "\n", "\"you implemented a custom loss function, \"", "\n", "\"please raise an issue on GitHub.\"", ")", "\n", "", "", "metrics", "=", "init_metrics", "(", "metrics", ",", "self", ".", "logger", ",", "**", "kwargs", ")", "\n", "\n", "# Compile the model", "\n", "self", ".", "model", ".", "compile", "(", "optimizer", "=", "optimizer", ",", "loss", "=", "losses", ",", "metrics", "=", "metrics", ")", "\n", "self", ".", "logger", "(", "\"Optimizer:   %s\"", "%", "optimizer", ")", "\n", "self", ".", "logger", "(", "\"Loss funcs:  %s\"", "%", "losses", ")", "\n", "self", ".", "logger", "(", "\"Metrics:     %s\"", "%", "init_metrics", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.trainer.Trainer.fit": [[103, 176], ["hasattr", "trainer.Trainer.logger", "trainer.Trainer.logger", "trainer.Trainer.logger", "os.path.join", "save_images", "type", "trainer.Trainer._fit", "train.image_pair_loader.queue.stop", "val.image_pair_loader.queue.stop", "trainer.Trainer.logger", "trainer.Trainer.logger", "trainer.Trainer.logger"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.plotting.save_images", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.trainer.Trainer._fit", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.stop", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.stop"], ["", "def", "fit", "(", "self", ",", "train", ",", "val", ",", "batch_size", ",", "no_im", "=", "False", ",", "**", "fit_kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Fit the stored tf.keras Model (self.model) on a set of data.\n\n        The 'fit' method is a wrapper around the hidden '_fit' method. It\n        handles KeyboardInterrupts (--> stopping training prematurely), TF\n        GPU memory errors (--> batch_size is reduced by 2 and training\n        restarted), and other exceptions (--> error logged and training\n        terminated).\n\n        Please refer to the self._fit method for 'fit_kwargs' argument details.\n\n        Args:\n            train:      TODO\n            val:        TODO\n            batch_size: (int)  The initial batch size to run training with\n            no_im:      TODO\n            fit_kwargs: (dict) Keyword arguments passed to self._fit\n        \"\"\"", "\n", "# Crop labels?", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "\"label_crop\"", ")", ":", "\n", "            ", "train", ".", "label_crop", "=", "self", ".", "model", ".", "label_crop", "\n", "if", "val", "is", "not", "None", ":", "\n", "                ", "val", ".", "label_crop", "=", "self", ".", "model", ".", "label_crop", "\n", "", "", "if", "type", "(", "train", ")", ".", "__name__", "==", "\"MultiTaskSequence\"", ":", "\n", "            ", "self", ".", "logger", "(", "\"-- Skipping saving images (not yet implemented for\"", "\n", "\" MultiTaskSequences).\"", ")", "\n", "no_im", "=", "True", "\n", "# Save a few images to disk for inspection", "\n", "", "if", "no_im", ":", "\n", "            ", "self", ".", "logger", "(", "\"No images saved (--no_images flag is set)\"", ")", "\n", "", "else", ":", "\n", "            ", "from", "mpunet", ".", "utils", ".", "plotting", "import", "save_images", "\n", "im_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "logger", ".", "base_path", ",", "\"images\"", ")", "\n", "save_images", "(", "train", ",", "val", ",", "im_path", ",", "self", ".", "logger", ")", "\n", "\n", "# Start fitting", "\n", "", "fitting", "=", "True", "\n", "while", "fitting", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "_fit", "(", "train", "=", "train", ",", "\n", "val", "=", "val", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "no_im", "=", "no_im", ",", "\n", "**", "fit_kwargs", ")", "\n", "fitting", "=", "False", "\n", "", "except", "(", "ResourceExhaustedError", ",", "InternalError", ")", ":", "\n", "# Reduce batch size", "\n", "                ", "batch_size", "-=", "2", "\n", "self", ".", "logger", "(", "\"\\n\\n[MEMORY ERROR] Reducing batch size \"", "\n", "\"by 2 (now %i)\"", "%", "batch_size", ")", "\n", "if", "batch_size", "<", "1", ":", "\n", "                    ", "self", ".", "logger", "(", "\"[ERROR] Batch size negative or zero!\"", ")", "\n", "fitting", "=", "False", "\n", "", "", "except", "KeyboardInterrupt", ":", "\n", "                ", "fitting", "=", "False", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "self", ".", "logger", "(", "e", ")", "\n", "raise", "e", "\n", "\n", "", "", "try", ":", "\n", "            ", "if", "train", ".", "image_pair_loader", ".", "queue", ":", "\n", "                ", "train", ".", "image_pair_loader", ".", "queue", ".", "stop", "(", ")", "\n", "", "if", "val", ".", "image_pair_loader", ".", "queue", ":", "\n", "                ", "val", ".", "image_pair_loader", ".", "queue", ".", "stop", "(", ")", "\n", "", "", "except", "AttributeError", ":", "\n", "# Multi-tasking, train.image_pair_loader will be a list", "\n", "# TODO: Make all sequences store a reference to the queue", "\n", "            ", "pass", "\n", "\n", "", "self", ".", "logger", "(", "\"Training stopped.\"", ")", "\n", "self", ".", "logger", ".", "print_calling_method", "=", "True", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.trainer.Trainer._fit": [[177, 257], ["trainer.get_steps", "trainer.Trainer.logger", "hasattr", "callbacks.insert", "callbacks.append", "callbacks.append", "mpunet.callbacks.init_callback_objects", "cb_dict.get", "list", "tensorflow.data.Dataset.from_generator", "trainer.Trainer.model.fit", "mpunet.callbacks.remove_validation_callbacks", "trainer.get_steps", "trainer.Trainer.logger", "mpunet.callbacks.Validation", "callbacks.append", "callbacks.append", "mpunet.callbacks.MeanReduceLogArrays", "mpunet.callbacks.LearningCurve", "mpunet.callbacks.DividerLine", "zip", "mpunet.callbacks.FGBatchBalancer", "mpunet.callbacks.SavePredictionImages", "len", "map", "len"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.trainer.get_steps", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.funcs.init_callback_objects", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.trainer.Trainer.fit", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.callbacks.funcs.remove_validation_callbacks", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.trainer.get_steps"], ["", "def", "_fit", "(", "self", ",", "\n", "train", ",", "\n", "val", ",", "\n", "batch_size", ",", "\n", "n_epochs", ",", "\n", "callbacks", ",", "\n", "train_im_per_epoch", ",", "\n", "val_im_per_epoch", ",", "\n", "val_ignore_class_zero", "=", "True", ",", "\n", "no_im", "=", "False", ",", "\n", "verbose", "=", "1", ",", "\n", "init_epoch", "=", "0", ",", "\n", "use_multiprocessing", "=", "False", ",", "\n", "**", "unused", ")", ":", "\n", "        ", "train", ".", "batch_size", "=", "batch_size", "\n", "\n", "# Get number of steps per train epoch", "\n", "train_steps", "=", "get_steps", "(", "train", ",", "train_im_per_epoch", ")", "\n", "self", ".", "logger", "(", "\"Using %i steps per train epoch (total batches=%i)\"", "%", "\n", "(", "train_steps", ",", "len", "(", "train", ")", ")", ")", "\n", "\n", "if", "val", "is", "None", ":", "\n", "# No validation to be performed, remove callbacks that might need", "\n", "# validation data to function properly", "\n", "            ", "remove_validation_callbacks", "(", "callbacks", ",", "self", ".", "logger", ")", "\n", "", "else", ":", "\n", "            ", "val", ".", "batch_size", "=", "batch_size", "\n", "val_steps", "=", "get_steps", "(", "val", ",", "val_im_per_epoch", ")", "\n", "self", ".", "logger", "(", "\"Using %i steps per val epoch (total batches=%i)\"", "%", "\n", "(", "val_steps", ",", "len", "(", "val", ")", ")", ")", "\n", "# Add validation callback", "\n", "# Important: Should be first in callbacks list as other CBs may", "\n", "# depend on the validation metrics/loss", "\n", "validation", "=", "Validation", "(", "val", ",", "\n", "steps", "=", "val_steps", ",", "\n", "ignore_class_zero", "=", "val_ignore_class_zero", ",", "\n", "logger", "=", "self", ".", "logger", ",", "\n", "verbose", "=", "verbose", ")", "\n", "callbacks", "=", "[", "validation", "]", "+", "callbacks", "\n", "\n", "# Add various callbacks for plotting learning curves etc.", "\n", "# Get FGBatchBalancer callbacks, etc.", "\n", "", "if", "hasattr", "(", "train", ",", "\"n_fg_slices\"", ")", ":", "\n", "            ", "callbacks", ".", "append", "(", "FGBatchBalancer", "(", "train", ",", "logger", "=", "self", ".", "logger", ")", ")", "\n", "", "if", "not", "no_im", ":", "\n", "# Add save images cb", "\n", "            ", "callbacks", ".", "append", "(", "SavePredictionImages", "(", "train", ",", "val", ")", ")", "\n", "", "callbacks", ".", "insert", "(", "1", ",", "MeanReduceLogArrays", "(", ")", ")", "\n", "# callbacks.insert(1, MemoryConsumption(logger=self.logger))", "\n", "callbacks", ".", "append", "(", "LearningCurve", "(", "logger", "=", "self", ".", "logger", ")", ")", "\n", "callbacks", ".", "append", "(", "DividerLine", "(", "self", ".", "logger", ")", ")", "\n", "\n", "# Get initialized callback objects", "\n", "callbacks", ",", "cb_dict", "=", "init_callback_objects", "(", "callbacks", ",", "self", ".", "logger", ")", "\n", "\n", "# If ModelCheckPointClean is used, set the original model to store", "\n", "# the correct weights when using multi-GPU models", "\n", "cb", "=", "cb_dict", ".", "get", "(", "\"ModelCheckPointClean\"", ")", "\n", "if", "cb", ":", "\n", "            ", "cb", ".", "org_model", "=", "self", ".", "model", "# TEMP TODO", "\n", "\n", "# Init TF dataset with DATA autosharding", "\n", "", "dtypes", ",", "shapes", "=", "list", "(", "zip", "(", "*", "map", "(", "lambda", "x", ":", "(", "x", ".", "dtype", ",", "x", ".", "shape", ")", ",", "train", "[", "0", "]", ")", ")", ")", "\n", "train", "=", "tf", ".", "data", ".", "Dataset", ".", "from_generator", "(", "train", ",", "dtypes", ",", "shapes", ")", "\n", "\n", "# Fit the model", "\n", "# is_queued = bool(train.image_pair_loader.queue)", "\n", "self", ".", "logger", ".", "active_log_file", "=", "\"training\"", "\n", "self", ".", "logger", ".", "print_calling_method", "=", "False", "\n", "self", ".", "model", ".", "fit", "(", "\n", "train", ",", "\n", "steps_per_epoch", "=", "train_steps", ",", "\n", "epochs", "=", "n_epochs", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "initial_epoch", "=", "init_epoch", ",", "\n", "use_multiprocessing", "=", "use_multiprocessing", ",", "\n", "workers", "=", "5", ",", "\n", "max_queue_size", "=", "5", ",", "\n", "shuffle", "=", "False", ",", "# Determined by the chosen Sequence class", "\n", "verbose", "=", "verbose", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.trainer.get_steps": [[19, 26], ["int", "len", "numpy.ceil"], "function", ["None"], ["def", "get_steps", "(", "sequence", ",", "im_per_epoch", "=", "None", ")", ":", "\n", "    ", "\"\"\" Returns the number of gradient steps to take in an epoch \"\"\"", "\n", "if", "im_per_epoch", ":", "\n", "        ", "steps", "=", "int", "(", "np", ".", "ceil", "(", "im_per_epoch", "/", "sequence", ".", "batch_size", ")", ")", "\n", "", "else", ":", "\n", "        ", "steps", "=", "len", "(", "sequence", ")", "\n", "", "return", "steps", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.utils.ensure_sparse": [[18, 27], ["enumerate"], "function", ["None"], ["if", "allowed_gpus", ":", "\n", "        ", "print", "(", "\"[OBS] Considering only system-wise allowed GPUs: {} (set in\"", "\n", "\" CUDA_VISIBLE_DEVICES env variable).\"", ".", "format", "(", "allowed_gpus", ")", ")", "\n", "return", "allowed_gpus", "\n", "# Else, check GPUs on the system and assume all non-used (mem. use less", "\n", "# than max_allowed_mem_usage) is fair game.", "\n", "", "from", "subprocess", "import", "check_output", "\n", "try", ":", "\n", "# Get list of GPUs", "\n", "        ", "gpu_list", "=", "check_output", "(", "[", "\"nvidia-smi\"", ",", "\"-L\"", "]", ",", "universal_newlines", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.utils._init": [[29, 61], ["mpunet.utils.ensure_list_or_tuple", "mpunet.utils.ensure_list_or_tuple", "list", "filter", "initialized.append", "initialized.append", "getattr", "getattr", "tensorflow.keras.losses", "mpunet.evaluate.loss_functions", "mpunet.evaluate.metrics", "tensorflow.keras.metrics", "mpunet.evaluate.metrics"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.ensure_list_or_tuple", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.ensure_list_or_tuple"], ["\n", "# Query memory usage stats from nvidia-smi", "\n", "output", "=", "check_output", "(", "[", "\"nvidia-smi\"", ",", "\"-q\"", ",", "\"-d\"", ",", "\"MEMORY\"", "]", ",", "\n", "universal_newlines", "=", "True", ")", "\n", "\n", "# Fetch the memory usage of each GPU", "\n", "mem_usage", "=", "re", ".", "findall", "(", "r\"FB Memory Usage.*?Used[ ]+:[ ]+(\\d+)\"", ",", "\n", "output", ",", "flags", "=", "re", ".", "DOTALL", ")", "\n", "assert", "len", "(", "gpu_ids", ")", "==", "len", "(", "mem_usage", ")", "\n", "\n", "# Return all GPU ids for which the memory usage is exactly 0", "\n", "free", "=", "list", "(", "map", "(", "lambda", "x", ":", "int", "(", "x", ")", "<=", "max_allowed_mem_usage", ",", "mem_usage", ")", ")", "\n", "return", "list", "(", "gpu_ids", "[", "free", "]", ")", "\n", "", "except", "FileNotFoundError", "as", "e", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\"[ERROR] nvidia-smi is not installed. \"", "\n", "\"Consider setting the --num_GPUs=0 flag.\"", ")", "from", "e", "\n", "\n", "\n", "", "", "def", "_get_free_gpu", "(", "free_GPUs", ",", "N", "=", "1", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "free_gpu", "=", "\",\"", ".", "join", "(", "map", "(", "str", ",", "free_GPUs", "[", "0", ":", "N", "]", ")", ")", "\n", "", "except", "IndexError", "as", "e", ":", "\n", "        ", "raise", "OSError", "(", "\"No GPU available.\"", ")", "from", "e", "\n", "", "return", "free_gpu", "\n", "\n", "\n", "", "def", "get_free_gpu", "(", "N", "=", "1", ")", ":", "\n", "    ", "free", "=", "get_free_gpus", "(", ")", "\n", "return", "_get_free_gpu", "(", "free", ",", "N", "=", "N", ")", "\n", "\n", "\n", "", "def", "await_and_set_free_gpu", "(", "N", "=", "1", ",", "sleep_seconds", "=", "60", ",", "logger", "=", "None", ")", ":", "\n", "    ", "gpu", "=", "\"\"", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.utils.init_losses": [[63, 87], ["utils._init"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.utils._init"], ["        ", "from", "time", "import", "sleep", "\n", "logger", "=", "logger", "or", "print", "\n", "logger", "(", "\"Waiting for free GPU.\"", ")", "\n", "found_gpu", "=", "False", "\n", "while", "not", "found_gpu", ":", "\n", "            ", "gpu", "=", "get_free_gpu", "(", "N", "=", "N", ")", "\n", "if", "gpu", ":", "\n", "                ", "logger", "(", "\"Found free GPU: %s\"", "%", "gpu", ")", "\n", "found_gpu", "=", "True", "\n", "", "else", ":", "\n", "                ", "logger", "(", "\"No available GPUs... Sleeping %i seconds.\"", "%", "sleep_seconds", ")", "\n", "sleep", "(", "sleep_seconds", ")", "\n", "", "", "", "set_gpu", "(", "gpu", ")", "\n", "\n", "\n", "", "def", "set_gpu", "(", "gpu", ")", ":", "\n", "    ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "gpu", ")", "\n", "\n", "\n", "", "def", "add_noise_to_views", "(", "views", ",", "sd", ")", ":", "\n", "# Add Gaussian noise to views specified in parameter file", "\n", "    ", "return", "[", "np", ".", "array", "(", "v", ",", "dtype", "=", "np", ".", "float32", ")", "+", "np", ".", "random", ".", "normal", "(", "scale", "=", "sd", ",", "size", "=", "3", ")", "\n", "for", "v", "in", "views", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.utils.init_metrics": [[90, 97], ["utils._init"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.utils._init"], ["        ", "raise", "OSError", "(", "\"Model dir {} is empty.\"", ".", "format", "(", "model_dir", ")", ")", "\n", "# look for models, order: val_dice, val_loss, dice, loss, model_weights", "\n", "", "patterns", "=", "[", "\n", "(", "\"@epoch*val_dice*\"", ",", "np", ".", "argmax", ")", ",", "\n", "(", "\"@epoch*val_loss*\"", ",", "np", ".", "argmin", ")", ",", "\n", "(", "\"@epoch*dice*\"", ",", "np", ".", "argmax", ")", ",", "\n", "(", "\"@epoch*loss*\"", ",", "np", ".", "argmin", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.utils.init_optimizer": [[100, 112], ["optimizer", "utils._init"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.utils._init"], ["if", "models", ":", "\n", "            ", "scores", "=", "[", "]", "\n", "for", "m", "in", "models", ":", "\n", "                ", "scores", ".", "append", "(", "float", "(", "re", ".", "findall", "(", "r\"(\\d+[.]\\d+)\"", ",", "m", ")", "[", "0", "]", ")", ")", "\n", "", "return", "os", ".", "path", ".", "abspath", "(", "models", "[", "select_func", "(", "np", ".", "array", "(", "scores", ")", ")", "]", ")", "\n", "", "", "m", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"model_weights.h5\"", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "m", ")", ":", "\n", "        ", "raise", "OSError", "(", "\"Did not find any model files matching the patterns {} \"", "\n", "\"and did not find a model_weights.h5 file.\"", "\n", "\"\"", ".", "format", "(", "patterns", ")", ")", "\n", "", "return", "m", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.utils.init_activation": [[114, 126], ["utils._init"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.utils._init"], ["    ", "models", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"@epoch*\"", ")", ")", "\n", "epochs", "=", "[", "]", "\n", "for", "m", "in", "models", ":", "\n", "        ", "epochs", ".", "append", "(", "int", "(", "re", ".", "findall", "(", "r\"@epoch_(\\d+)_\"", ",", "m", ")", "[", "0", "]", ")", ")", "\n", "", "if", "epochs", ":", "\n", "        ", "last", "=", "np", ".", "argmax", "(", "epochs", ")", "\n", "return", "os", ".", "path", ".", "abspath", "(", "models", "[", "last", "]", ")", ",", "int", "(", "epochs", "[", "int", "(", "last", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "generic_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"model_weights.h5\"", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "generic_path", ")", ":", "\n", "# Return epoch 0 as we dont know where else to start", "\n", "# This may be changed elsewhere in the code based on the", "\n", "# training data CSV file", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.tests.test_all.get_test_suite": [[8, 13], ["unittest.TestSuite", "unittest.TestSuite.addTests", "loader.loadTestsFromTestCase"], "function", ["None"], ["def", "get_test_suite", "(", "test_class", ")", ":", "\n", "    ", "suite", "=", "unittest", ".", "TestSuite", "(", ")", "\n", "loader", "=", "unittest", ".", "defaultTestLoader", "\n", "suite", ".", "addTests", "(", "loader", ".", "loadTestsFromTestCase", "(", "test_class", ")", ")", "\n", "return", "suite", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.tests.test_all._mod_name_to_cls_name": [[15, 21], ["map", "modname.split", "x.capitalize"], "function", ["None"], ["", "def", "_mod_name_to_cls_name", "(", "modname", ")", ":", "\n", "    ", "\"\"\"\n    Converts the name of a module (such as test_image_pair) to the test suite\n    class name (such as TestImagePair)\n    \"\"\"", "\n", "return", "\"\"", ".", "join", "(", "map", "(", "lambda", "x", ":", "x", ".", "capitalize", "(", ")", ",", "modname", ".", "split", "(", "\"_\"", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.tests.test_all._run": [[23, 45], ["unittest.TextTestRunner", "importlib.import_module", "pkgutil.iter_modules", "print", "print", "unittest.TextTestRunner.run", "print", "importlib.import_module", "test_all._mod_name_to_cls_name", "unittest.TestSuite", "test_all.get_test_suite", "suites.append", "len", "getattr", "print", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.bin.train.run", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.tests.test_all._mod_name_to_cls_name", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.tests.test_all.get_test_suite"], ["", "def", "_run", "(", "test_pkg_name", ")", ":", "\n", "    ", "runner", "=", "unittest", ".", "TextTestRunner", "(", ")", "\n", "test_mod", "=", "importlib", ".", "import_module", "(", "\"{}.{}\"", ".", "format", "(", "_TESTS_PKG", ",", "\n", "test_pkg_name", ")", ")", "\n", "mods", "=", "pkgutil", ".", "iter_modules", "(", "test_mod", ".", "__path__", ")", "\n", "s", "=", "\"[*] Running tests in package '{}' [*]\"", ".", "format", "(", "test_pkg_name", ")", "\n", "print", "(", "\"\\n\"", "+", "\"-\"", "*", "len", "(", "s", ")", "+", "\"\\n\"", "+", "s", "+", "\"\\n\"", "+", "\"-\"", "*", "len", "(", "s", ")", ")", "\n", "suites", "=", "[", "]", "\n", "for", "m", "in", "mods", ":", "\n", "        ", "print", "(", "\"Adding test module '{}'\"", ".", "format", "(", "m", ".", "name", ")", ")", "\n", "mod", "=", "importlib", ".", "import_module", "(", "\"{}.{}.{}\"", ".", "format", "(", "_TESTS_PKG", ",", "\n", "test_pkg_name", ",", "m", ".", "name", ")", ")", "\n", "cls_name", "=", "_mod_name_to_cls_name", "(", "m", ".", "name", ")", "\n", "try", ":", "\n", "            ", "suite", "=", "get_test_suite", "(", "getattr", "(", "mod", ",", "cls_name", ")", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "print", "(", "\"-- Skipping (found no valid test \"", "\n", "\"suite with name '{}')\"", ".", "format", "(", "cls_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "suites", ".", "append", "(", "suite", ")", "\n", "", "", "print", "(", "\"\\nRunning...\"", ")", "\n", "runner", ".", "run", "(", "unittest", ".", "TestSuite", "(", "suites", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.tests.test_all.run_tests": [[47, 59], ["tests_to_run.lower.lower", "get_test_packages", "ValueError", "test_all._run"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.tests.__init__.get_test_packages", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.tests.test_all._run"], ["", "def", "run_tests", "(", "tests_to_run", ")", ":", "\n", "    ", "tests_to_run", "=", "tests_to_run", ".", "lower", "(", ")", "\n", "from", "mpunet", ".", "tests", "import", "get_test_packages", "\n", "test_pkgs", "=", "get_test_packages", "(", ")", "\n", "if", "tests_to_run", "!=", "\"all\"", "and", "tests_to_run", "not", "in", "test_pkgs", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unknown set of tests '{}'. Must be 'all' or one \"", "\n", "\"of {}.\"", ".", "format", "(", "tests_to_run", ",", "test_pkgs", ")", ")", "\n", "", "to_run", "=", "test_pkgs", "if", "tests_to_run", "==", "\"all\"", "else", "[", "tests_to_run", "]", "\n", "\n", "for", "test_pkg", "in", "to_run", ":", "\n", "# Run each package of tests", "\n", "        ", "_run", "(", "test_pkg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.tests.test_all.run_all_tests": [[61, 63], ["test_all.run_tests"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.tests.test_all.run_tests"], ["", "", "def", "run_all_tests", "(", ")", ":", "\n", "    ", "run_tests", "(", "\"all\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.tests.__init__.get_test_packages": [[4, 8], ["list", "filter", "pkgutil.iter_modules"], "function", ["None"], []], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.integration.test_image_pair_with_valid_image.TestImagePairWithValidImage.setUpClass": [[16, 24], ["os.path.exists", "nib.Nifti1Image", "nib.save", "OSError"], "methods", ["None"], ["@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "\"\"\" Save a temperature, valid image (nii.gz) file to disk \"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "cls", ".", "image_path", ")", ":", "\n", "            ", "raise", "OSError", "(", "\"Out path {} already exists\"", ".", "format", "(", "cls", ".", "image_path", ")", ")", "\n", "", "import", "nibabel", "as", "nib", "\n", "nii", "=", "nib", ".", "Nifti1Image", "(", "cls", ".", "data", ",", "affine", "=", "cls", ".", "affine", ")", "\n", "nib", ".", "save", "(", "nii", ",", "cls", ".", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.integration.test_image_pair_with_valid_image.TestImagePairWithValidImage.tearDownClass": [[25, 30], ["os.path.exists", "os.remove"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "tearDownClass", "(", "cls", ")", ":", "\n", "        ", "\"\"\" Remove the temporary nii.gz file \"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "cls", ".", "image_path", ")", ":", "\n", "            ", "os", ".", "remove", "(", "cls", ".", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.integration.test_image_pair_with_valid_image.TestImagePairWithValidImage.setUp": [[31, 35], ["ImagePair"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "\"\"\" Load an ImagePair object from the .nii.gz file stored on disk \"\"\"", "\n", "from", "mpunet", ".", "image", ".", "image_pair", "import", "ImagePair", "\n", "self", ".", "im", "=", "ImagePair", "(", "img_path", "=", "self", ".", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.integration.test_image_pair_with_valid_image.TestImagePairWithValidImage.test_stored_image_matches_disk_image": [[36, 57], ["test_image_pair_with_valid_image.TestImagePairWithValidImage.assertTrue", "test_image_pair_with_valid_image.TestImagePairWithValidImage.assertListEqual", "test_image_pair_with_valid_image.TestImagePairWithValidImage.assertTrue", "test_image_pair_with_valid_image.TestImagePairWithValidImage.assertTrue", "test_image_pair_with_valid_image.TestImagePairWithValidImage.assertTrue", "list", "list", "numpy.isclose().all", "numpy.isclose().all", "numpy.dtype", "numpy.isclose", "numpy.isclose"], "methods", ["None"], ["", "def", "test_stored_image_matches_disk_image", "(", "self", ")", ":", "\n", "        ", "\"\"\" Tests if the stored image matches the Nifti image saved to disk \"\"\"", "\n", "\n", "# Assert some fields are as expected", "\n", "self", ".", "assertTrue", "(", "self", ".", "im", ".", "predict_mode", ",", "\n", "msg", "=", "\"ImagePair initialized with only an image should \"", "\n", "\"have attribute predict_mode=True.\"", ")", "\n", "self", ".", "assertListEqual", "(", "list", "(", "self", ".", "im", ".", "shape", ")", ",", "list", "(", "self", ".", "data", ".", "shape", ")", ",", "\n", "msg", "=", "\"The dimensionality of the loaded image \"", "\n", "\"object does not match the expected \"", "\n", "\"(got {}, expected {})\"", ".", "format", "(", "\n", "self", ".", "im", ".", "image", ".", "shape", ",", "self", ".", "data", ".", "shape", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "isclose", "(", "self", ".", "im", ".", "image", ",", "self", ".", "data", ")", ".", "all", "(", ")", ",", "\n", "msg", "=", "\"The data of the loaded image is not (nearly) \"", "\n", "\"identical to the data that was saved to disk.\"", ")", "\n", "self", ".", "assertTrue", "(", "self", ".", "im", ".", "image", ".", "dtype", "==", "np", ".", "dtype", "(", "\"float32\"", ")", ",", "\n", "msg", "=", "\"The stored image has dtype {}, but ImagePair \"", "\n", "\"should always store float32 \"", "\n", "\"images\"", ".", "format", "(", "self", ".", "im", ".", "image", ".", "dtype", ")", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "isclose", "(", "self", ".", "im", ".", "affine", ",", "self", ".", "affine", ")", ".", "all", "(", ")", ",", "\n", "msg", "=", "\"The stored affine matrix is not (nearly) \"", "\n", "\"identical to the one saved to disk.\"", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.integration.test_image_pair_with_valid_image.TestImagePairWithValidImage.test_error_raising": [[59, 85], ["test_image_pair_with_valid_image.TestImagePairWithValidImage.assertRaises", "test_image_pair_with_valid_image.TestImagePairWithValidImage.assertRaises", "test_image_pair_with_valid_image.TestImagePairWithValidImage.assertRaises", "test_image_pair_with_valid_image.TestImagePairWithValidImage.assertRaises"], "methods", ["None"], ["", "def", "test_error_raising", "(", "self", ")", ":", "\n", "        ", "\"\"\" Asserts that proper errors are raised with illegal usage \"\"\"", "\n", "\n", "# Check errors are raised with illegal actions", "\n", "from", "mpunet", ".", "errors", ".", "image_errors", "import", "(", "NoLabelFileError", ",", "\n", "ReadOnlyAttributeError", ")", "\n", "with", "self", ".", "assertRaises", "(", "NoLabelFileError", ",", "\n", "msg", "=", "\"Referencing the labels attribute of an \"", "\n", "\"ImagePair that has no labels should raise \"", "\n", "\"a {}\"", ".", "format", "(", "NoLabelFileError", ".", "__name__", ")", ")", ":", "\n", "            ", "_", "=", "self", ".", "im", ".", "labels", "\n", "", "with", "self", ".", "assertRaises", "(", "ReadOnlyAttributeError", ",", "\n", "msg", "=", "\"Trying to set the 'image' attribute on an \"", "\n", "\"ImagePair object should raise a \"", "\n", "\"{}\"", ".", "format", "(", "ReadOnlyAttributeError", ".", "__name__", ")", ")", ":", "\n", "            ", "self", ".", "im", ".", "image", "=", "[", "1", ",", "2", ",", "3", "]", "\n", "", "with", "self", ".", "assertRaises", "(", "ReadOnlyAttributeError", ",", "\n", "msg", "=", "\"Trying to set the 'labels' attribute on an\"", "\n", "\" ImagePair object should raise a \"", "\n", "\"{}\"", ".", "format", "(", "ReadOnlyAttributeError", ".", "__name__", ")", ")", ":", "\n", "            ", "self", ".", "im", ".", "labels", "=", "[", "1", ",", "2", ",", "3", "]", "\n", "", "with", "self", ".", "assertRaises", "(", "ReadOnlyAttributeError", ",", "\n", "msg", "=", "\"Trying to set the 'affine' attribute on an\"", "\n", "\" ImagePair object should raise a \"", "\n", "\"{}\"", ".", "format", "(", "ReadOnlyAttributeError", ".", "__name__", ")", ")", ":", "\n", "            ", "self", ".", "im", ".", "affine", "=", "[", "1", ",", "2", ",", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.integration.test_image_pair_with_valid_image.TestImagePairWithValidImage.test_shape_values": [[86, 109], ["test_image_pair_with_valid_image.TestImagePairWithValidImage.assertListEqual", "numpy.array", "numpy.array", "test_image_pair_with_valid_image.TestImagePairWithValidImage.assertTrue", "numpy.array", "numpy.array", "test_image_pair_with_valid_image.TestImagePairWithValidImage.assertTrue", "list", "numpy.isclose().all", "numpy.isclose().all", "numpy.isclose", "numpy.isclose"], "methods", ["None"], ["", "", "def", "test_shape_values", "(", "self", ")", ":", "\n", "        ", "\"\"\" Tests that the ImagePair stores correct image coordinates \"\"\"", "\n", "\n", "# Check voxel coordinates center", "\n", "self", ".", "assertListEqual", "(", "list", "(", "self", ".", "im", ".", "center", ")", ",", "[", "5.5", ",", "6.5", ",", "7.5", "]", ",", "\n", "msg", "=", "\"Error in calculation of image voxel center \"", "\n", "\"(zero-indexed) coordinates\"", ")", "\n", "\n", "# Check scanner space center", "\n", "expected", "=", "np", ".", "array", "(", "[", "5.5", ",", "3.25", ",", "0.75", "]", ")", "\n", "got", "=", "np", ".", "array", "(", "self", ".", "im", ".", "real_center", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "isclose", "(", "got", ",", "expected", ")", ".", "all", "(", ")", ",", "\n", "msg", "=", "\"Error in calculation of image scanner \"", "\n", "\"space center coordinates. Expected \"", "\n", "\"{}, got {}\"", ".", "format", "(", "expected", ",", "got", ")", ")", "\n", "\n", "# Check real shape", "\n", "expected", "=", "np", ".", "array", "(", "[", "12", ",", "7", ",", "1.6", "]", ")", "\n", "got", "=", "np", ".", "array", "(", "self", ".", "im", ".", "real_shape", ")", "\n", "self", ".", "assertTrue", "(", "np", ".", "isclose", "(", "got", ",", "expected", ")", ".", "all", "(", ")", ",", "\n", "msg", "=", "\"Error in calculation of image real shape \"", "\n", "\"(mm in scanner space). Expected {}, \"", "\n", "\"got {}\"", ".", "format", "(", "expected", ",", "got", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.installation.test_imports.TestImports.test_modules_exist": [[11, 20], ["test_imports.TestImports.assertIsNot", "pkgutil.find_loader"], "methods", ["None"], ["def", "test_modules_exist", "(", "self", ")", ":", "\n", "        ", "\"\"\" Check if needed modules exist (are visible to Python) \"\"\"", "\n", "for", "mod", "in", "self", ".", "needed_mods", ":", "\n", "            ", "self", ".", "assertIsNot", "(", "pkgutil", ".", "find_loader", "(", "mod", ")", ",", "None", ",", "\n", "msg", "=", "\"Could not find loader for needed package \"", "\n", "\"'{}' - This could indicate that the package \"", "\n", "\"is not installed or is not visible to the \"", "\n", "\"current Python interpreter \"", "\n", "\"session.\"", ".", "format", "(", "mod", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.installation.test_setup.TestSetup.test_mp_on_path": [[8, 13], ["shutil.which", "test_setup.TestSetup.assertIsNot", "test_setup.TestSetup.assertTrue", "os.path.exists"], "methods", ["None"], ["    ", "def", "test_mp_on_path", "(", "self", ")", ":", "\n", "        ", "\"\"\" Tests if the mp script is reachable by command 'mp' \"\"\"", "\n", "path", "=", "shutil", ".", "which", "(", "\"mp\"", ")", "\n", "self", ".", "assertIsNot", "(", "path", ",", "None", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.system.test_system.TestSystem.test_enough_memory": [[10, 23], ["psutil.virtual_memory", "test_system.TestSystem.assertGreaterEqual"], "methods", ["None"], ["def", "test_enough_memory", "(", "self", ")", ":", "\n", "        ", "\"\"\" Tests if the system has the recommended amount of memory. \"\"\"", "\n", "import", "psutil", "\n", "mem", "=", "psutil", ".", "virtual_memory", "(", ")", "\n", "mem_total_gib", "=", "mem", ".", "total", "*", "(", "2", "**", "-", "30", ")", "\n", "self", ".", "assertGreaterEqual", "(", "mem_total_gib", ",", "self", ".", "minimum_mem_gib", ",", "\n", "msg", "=", "\"The total available memory of this system\"", "\n", "\" is {} GiB. For most practical \"", "\n", "\"application more than {} GiB will be \"", "\n", "\"needed to run mpunet optimally. \"", "\n", "\"For testing purposes, you may disregard \"", "\n", "\"this error.\"", ".", "format", "(", "mem_total_gib", ",", "\n", "self", ".", "minimum_mem_gib", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.system.test_system.TestSystem.test_enough_cpu_cores": [[24, 35], ["psutil.cpu_count", "test_system.TestSystem.assertGreaterEqual"], "methods", ["None"], ["", "def", "test_enough_cpu_cores", "(", "self", ")", ":", "\n", "        ", "\"\"\" Tests if the system has the recommended number of CPU cores. \"\"\"", "\n", "import", "psutil", "\n", "cpus", "=", "psutil", ".", "cpu_count", "(", "logical", "=", "True", ")", "\n", "self", ".", "assertGreaterEqual", "(", "cpus", ",", "self", ".", "minimum_cpu_cores", ",", "\n", "msg", "=", "\"The number of logical CPU cores of this \"", "\n", "\"system is {}. We recommend at least {} \"", "\n", "\"for mpunet to run optimally. \"", "\n", "\"For testing purposes, you may disregard \"", "\n", "\"this error.\"", ".", "format", "(", "cpus", ",", "\n", "self", ".", "minimum_cpu_cores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.system.test_system.TestSystem.test_nvidia_smi_available": [[36, 45], ["shutil.which", "test_system.TestSystem.assertIsNot", "test_system.TestSystem.assertTrue", "os.path.exists"], "methods", ["None"], ["", "def", "test_nvidia_smi_available", "(", "self", ")", ":", "\n", "        ", "\"\"\" Tests if the nvidia-smi is available \"\"\"", "\n", "msg", "=", "\"nvidia-smi does not seem to be available - \"", "\"this could indicate that the nvidia drivers are not installed.\"", "\n", "import", "shutil", "\n", "import", "os", "\n", "path", "=", "shutil", ".", "which", "(", "\"nvidia-smi\"", ")", "\n", "self", ".", "assertIsNot", "(", "path", ",", "None", ",", "msg", ")", "\n", "self", ".", "assertTrue", "(", "os", ".", "path", ".", "exists", "(", "path", ")", ",", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.system.test_system.TestSystem.test_gpu_count": [[46, 66], ["len", "test_system.TestSystem.assertGreaterEqual", "list", "check_output().split", "FileNotFoundError", "filter", "check_output"], "methods", ["None"], ["", "def", "test_gpu_count", "(", "self", ")", ":", "\n", "        ", "\"\"\" Tests if the system has at least 1 nvidia GPU \"\"\"", "\n", "from", "subprocess", "import", "check_output", "\n", "try", ":", "\n", "            ", "gpu_list", "=", "check_output", "(", "\"nvidia-smi \"", "\n", "\"--query-gpu=gpu_name \"", "\n", "\"--format=csv\"", ".", "split", "(", "\" \"", ")", ",", "\n", "universal_newlines", "=", "True", ")", ".", "split", "(", "\"\\n\"", ")", "[", "1", ":", "]", "\n", "", "except", "FileNotFoundError", "as", "e", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\"nvidia-smi does not seem to be \"", "\n", "\"installed - this could indicate missing \"", "\n", "\"GPU drivers.\"", ")", "from", "e", "\n", "", "n_gpus", "=", "len", "(", "list", "(", "filter", "(", "None", ",", "gpu_list", ")", ")", ")", "\n", "self", ".", "assertGreaterEqual", "(", "n_gpus", ",", "self", ".", "minimum_gpus", ",", "\n", "msg", "=", "\"The number of GPUs on this \"", "\n", "\"system is {}. We recommend at least {} \"", "\n", "\"for mpunet to run optimally. \"", "\n", "\"For testing purposes, you may disregard \"", "\n", "\"this error.\"", ".", "format", "(", "n_gpus", ",", "\n", "self", ".", "minimum_gpus", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.default_tables.DefaultTablesTable.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "table_name", "=", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.default_tables.DefaultTablesTable.get_create_query": [[10, 12], ["None"], "methods", ["None"], ["", "def", "get_create_query", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "f\"CREATE TABLE {self.table_name} (id INTEGER PRIMARY KEY,\"", "f\"table_name VARCHAR(255),kwargs BLOB);\"", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.default_tables.DefaultTablesTable.get_insert_query": [[14, 17], ["pickle.dumps", "sqlite3.Binary"], "methods", ["None"], ["", "def", "get_insert_query", "(", "self", ",", "table_name", ",", "**", "kwargs", ")", ":", "\n", "        ", "bdata", "=", "pickle", ".", "dumps", "(", "kwargs", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "return", "f\"INSERT INTO {self.table_name} (table_name,kwargs) VALUES \"", "f\"({table_name}, {sqlite3.Binary(bdata)});\"", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.default_tables.ResultsByView.__init__": [[21, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_classes", ")", ":", "\n", "        ", "self", ".", "n_classes", "=", "n_classes", "\n", "self", ".", "table_name", "=", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.default_tables.ResultsByView.get_create_query": [[25, 32], ["range"], "methods", ["None"], ["", "def", "get_create_query", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "query", "=", "f\"CREATE TABLE {self.table_name} (id INTEGER PRIMARY KEY,\"", "f\"image_id VARCHAR(255) NOT NULL,mean_dice FLOAT(5),\"", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_classes", ")", ":", "\n", "            ", "query", "+=", "f\"class_{i}_dice FLOAT(5),\"", "\n", "", "return", "query", "[", ":", "-", "1", "]", "+", "\");\"", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.default_tables.ResultsByView.get_insert_query": [[33, 42], ["range", "range"], "methods", ["None"], ["", "def", "get_insert_query", "(", "self", ",", "image_id", ",", "mean_dice", ",", "per_class_dices", ")", ":", "\n", "        ", "query", "=", "f\"INSERT INTO {self.table_name} (image_id,mean_dice,\"", "\n", "for", "i", "in", "range", "(", "self", ".", "n_classes", ")", ":", "\n", "            ", "query", "+=", "f\"class_{i}_dice,\"", "\n", "", "query", "=", "query", "[", ":", "-", "1", "]", "\n", "query", "+=", "f\") VALUES ('{image_id}',{mean_dice},\"", "\n", "for", "i", "in", "range", "(", "self", ".", "n_classes", ")", ":", "\n", "            ", "query", "+=", "f\"{per_class_dices[i]},\"", "\n", "", "return", "query", "[", ":", "-", "1", "]", "+", "\");\"", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.__init__": [[11, 24], ["db_conn.DBConnection.create_default_table"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.create_default_table"], ["    ", "def", "__init__", "(", "self", ",", "db_file_path", ")", ":", "\n", "        ", "self", ".", "db_file_path", "=", "db_file_path", "\n", "self", ".", "_connection", "=", "None", "\n", "self", ".", "_cursor", "=", "None", "\n", "self", ".", "_connected", "=", "False", "\n", "\n", "# Boolean, return results from query directly", "\n", "self", ".", "_echo", "=", "True", "\n", "self", ".", "_auto_commit", "=", "True", "\n", "\n", "# Dict pointing to default table objects", "\n", "self", ".", "default_tables", "=", "{", "}", "\n", "self", ".", "create_default_table", "(", "\"DefaultTablesTable\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.__repr__": [[25, 32], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Developer string representation\n\n        :return: str\n        \"\"\"", "\n", "return", "\"DBConnection(%s)\"", "%", "self", ".", "db_file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.__str__": [[33, 44], ["len"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Client string representation\n\n        :return: str\n        \"\"\"", "\n", "s", "=", "\"Database connection\\n\"", "\n", "s", "+=", "\"-\"", "*", "len", "(", "s", ")", "+", "\"\\n\"", "\n", "s", "+=", "\"DB:     %s\\n\"", "%", "self", ".", "db_file_path", "+", "\"Status: %s\"", "%", "(", "\"Connected\"", "if", "self", ".", "connected", "else", "\"Closed\"", ")", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.__call__": [[45, 59], ["db_conn.DBConnection.query", "db_conn.DBConnection.query"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.query", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.query"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Delegates to self.query\n\n        :param args: any arguments\n        :param kwargs: any keyword arguments\n        :return: return value of query method\n        \"\"\"", "\n", "if", "not", "self", ".", "connected", ":", "\n", "            ", "with", "self", "as", "conn", ":", "\n", "                ", "response", "=", "self", ".", "query", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "else", ":", "\n", "            ", "response", "=", "self", ".", "query", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "response", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.echo": [[69, 80], ["isinstance", "ValueError"], "methods", ["None"], ["", "@", "echo", ".", "setter", "\n", "def", "echo", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"\n        Echo result set from query property setter\n\n        :param value: boolean\n        :return: None\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "value", ",", "bool", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Echo must be True or False\"", ")", "\n", "", "self", ".", "_echo", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.auto_commit": [[90, 101], ["isinstance", "ValueError"], "methods", ["None"], ["", "@", "auto_commit", ".", "setter", "\n", "def", "auto_commit", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"\n        Automatically commit all actions\n\n        :param value: boolean\n        :return: None\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "value", ",", "bool", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Auto commit must be True or False\"", ")", "\n", "", "self", ".", "_auto_commit", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.query": [[102, 137], ["q_string.upper().split", "UserWarning", "db_conn.DBConnection.connection.cursor", "db_conn.DBConnection.cursor.execute", "q_string.upper", "sqlite3.Error", "db_conn.DBConnection.connection.commit", "sqlite3.Error", "numpy.array", "db_conn.DBConnection.cursor.fetchall", "db_conn.DBConnection.cursor.fetchall"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.cursor"], ["", "def", "query", "(", "self", ",", "q_string", ",", "echo", "=", "None", ",", "to_numpy", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Executes a SQL query string against the database.\n        Echoes the result back if echo=True or self.echo=True.\n\n        :param q_string: SQL query string\n        :param echo: echo back result, overwrites self.echo\n        :return: SQL result set or Cursor object\n        \"\"\"", "\n", "words", "=", "q_string", ".", "upper", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "if", "\"DROP\"", "in", "words", ":", "\n", "            ", "raise", "UserWarning", "(", "\"DROP queries should be performed manually.\"", ")", "\n", "\n", "# Define cursor object", "\n", "", "try", ":", "\n", "            ", "self", ".", "cursor", "=", "self", ".", "connection", ".", "cursor", "(", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "raise", "Error", "(", "\"Connection to DB has not been established.\"", ")", "\n", "\n", "# Execute query", "\n", "", "try", ":", "\n", "            ", "self", ".", "cursor", ".", "execute", "(", "q_string", ")", "\n", "if", "self", ".", "auto_commit", ":", "\n", "                ", "self", ".", "connection", ".", "commit", "(", ")", "\n", "", "", "except", "Error", "as", "e", ":", "\n", "            ", "err_str", "=", "'Error in query:\\n\"\"\"\\n%s\\n\"\"\"'", "%", "q_string", "\n", "raise", "Error", "(", "err_str", ")", "from", "e", "\n", "\n", "# Fetch or return cursor", "\n", "", "echo", "=", "self", ".", "echo", "if", "echo", "is", "None", "else", "echo", "\n", "if", "echo", "and", "\"SELECT\"", "in", "words", ":", "\n", "            ", "if", "to_numpy", ":", "\n", "                ", "return", "np", ".", "array", "(", "self", ".", "cursor", ".", "fetchall", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "cursor", ".", "fetchall", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.connected": [[138, 146], ["None"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "connected", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Property getter for connection status (True/False)\n\n        :return: boolean\n        \"\"\"", "\n", "return", "self", ".", "_connected", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.connection": [[147, 155], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "connection", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Getter property for SQLite connection object\n\n        :return: sqlite3.Connection or None\n        \"\"\"", "\n", "return", "self", ".", "_connection", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.cursor": [[165, 176], ["isinstance", "ValueError"], "methods", ["None"], ["", "@", "cursor", ".", "setter", "\n", "def", "cursor", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"\n        Property setter for DB Cursor object\n\n        :param value: sqlite.Cursor object\n        :return: None\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "value", ",", "sqlite3", ".", "Cursor", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"cursor must be a sqlite3 Cursor object.\"", ")", "\n", "", "self", ".", "_cursor", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.tables": [[177, 188], ["db.query"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.query"], ["", "@", "property", "\n", "def", "tables", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return the names of all tables in the DB\n\n        :return: list of strings of table names\n        \"\"\"", "\n", "with", "self", "as", "db", ":", "\n", "            ", "names", "=", "db", ".", "query", "(", "\"SELECT name FROM sqlite_master WHERE type='table';\"", ",", "\n", "echo", "=", "True", ")", "\n", "", "return", "[", "n", "[", "0", "]", "for", "n", "in", "names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.print_table_info": [[189, 210], ["[].replace", "[].strip().split", "print", "ValueError", "c.split", "print", "[].strip", "name.ljust", "db_conn.DBConnection.", "[].replace.split"], "methods", ["None"], ["", "def", "print_table_info", "(", "self", ",", "table_name", ")", ":", "\n", "        ", "\"\"\"\n        Return a list of column names for the table\n\n        :param table_name: str, name of the table to fetch info on\n        :return: list\n        \"\"\"", "\n", "if", "table_name", "not", "in", "self", ".", "tables", ":", "\n", "            ", "raise", "ValueError", "(", "\"No table '%s' in the DB.\"", "%", "table_name", ")", "\n", "\n", "", "tab_info", "=", "self", "(", "\"SELECT sql FROM sqlite_master \"", "\n", "\"WHERE tbl_name = '%s' \"", "\n", "\"AND type = 'table'\"", "%", "table_name", ",", "\n", "echo", "=", "True", ",", "to_numpy", "=", "False", ")", "[", "0", "]", "[", "0", "]", ".", "replace", "(", "\"\\n\"", ",", "\"\"", ")", "\n", "\n", "# Parse the info slightly", "\n", "columns", "=", "tab_info", ".", "split", "(", "f\"{table_name}\"", ")", "[", "-", "1", "]", ".", "strip", "(", "\" (\"", ")", ".", "split", "(", "\",\"", ")", "\n", "print", "(", "f\"Table name: {table_name}\"", ")", "\n", "for", "c", "in", "columns", ":", "\n", "            ", "name", ",", "type_", "=", "c", ".", "split", "(", "\" \"", ",", "1", ")", "\n", "print", "(", "name", ".", "ljust", "(", "25", ")", ",", "type_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.create_default_table": [[211, 231], ["db_conn.DBConnection.insert_into_default", "db_conn.DBConnection.", "print", "table.get_create_query"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.insert_into_default", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.default_tables.ResultsByView.get_create_query"], ["", "", "def", "create_default_table", "(", "self", ",", "default_table_name", ",", "**", "kwargs", ")", ":", "\n", "# Create table object", "\n", "        ", "table", "=", "default_tables", ".", "__dict__", "[", "default_table_name", "]", "(", "**", "kwargs", ")", "\n", "\n", "if", "default_table_name", "in", "self", ".", "tables", ":", "\n", "            ", "if", "default_table_name", "in", "self", ".", "default_tables", ":", "\n", "                ", "print", "(", "\"[OBS] Default table '%s' already exists\"", "%", "default_table_name", ")", "\n", "return", "\n", "", "", "else", ":", "\n", "            ", "self", "(", "table", ".", "get_create_query", "(", "**", "kwargs", ")", ")", "\n", "\n", "# Insert into dictionary", "\n", "", "self", ".", "default_tables", "[", "default_table_name", "]", "=", "table", "\n", "\n", "# For persistence, insert the table information into the", "\n", "# DefaultTablesTable from which the table object can be recreated at", "\n", "# a later time", "\n", "self", ".", "insert_into_default", "(", "\"DefaultTablesTable\"", ",", "\n", "table_name", "=", "default_table_name", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.insert_into_default": [[232, 240], ["db_conn.DBConnection.", "table.get_insert_query"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.default_tables.ResultsByView.get_insert_query"], ["", "def", "insert_into_default", "(", "self", ",", "default_table_name", ",", "**", "kwargs", ")", ":", "\n", "# Get table and insert", "\n", "        ", "try", ":", "\n", "            ", "table", "=", "self", ".", "default_tables", "[", "default_table_name", "]", "\n", "", "except", "KeyError", ":", "\n", "# Recreate the table object", "\n", "            ", "table", "=", "None", "\n", "", "self", "(", "table", ".", "get_insert_query", "(", "**", "kwargs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.connect": [[241, 257], ["sqlite3.connect", "db_conn.DBConnection.query", "sqlite3.Error"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.connect", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.query"], ["", "def", "connect", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Attempts to connect to the SQLite database\n\n        :return: None\n        \"\"\"", "\n", "try", ":", "\n", "            ", "self", ".", "_connection", "=", "sqlite3", ".", "connect", "(", "self", ".", "db_file_path", ")", "\n", "self", ".", "_connected", "=", "True", "\n", "\n", "# Enable foreign key support", "\n", "self", ".", "query", "(", "\"PRAGMA foreign_keys = ON;\"", ")", "\n", "\n", "", "except", "Error", "as", "e", ":", "\n", "            ", "raise", "Error", "(", "\"Could not connect to: %s\"", "%", "self", ".", "db_file_path", ")", "from", "e", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.disconnect": [[258, 266], ["db_conn.DBConnection.connection.close"], "methods", ["None"], ["", "def", "disconnect", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Disconnects from the SQLite database\n\n        :return: None\n        \"\"\"", "\n", "self", ".", "connection", ".", "close", "(", ")", "\n", "self", ".", "_connected", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.__enter__": [[267, 275], ["db_conn.DBConnection.connect"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.connect"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        On enter method for context manager usage. Establishes connection.\n\n        :return: Connected DBConnection object\n        \"\"\"", "\n", "self", ".", "connect", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.__exit__": [[276, 288], ["db_conn.DBConnection.disconnect"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.database.db_conn.DBConnection.disconnect"], ["", "def", "__exit__", "(", "self", ",", "exception_type", ",", "exception_value", ",", "traceback", ")", ":", "\n", "        ", "\"\"\"\n        On leave method for context manager usage. Disconnects the connection.\n        Arguments are passed by Python automatically if an exception is raised\n        within the context management block.\n\n        :param exception_type: type of exception raised within context.\n        :param exception_value: exception value from raised exception\n        :param traceback: traceback of raised exception\n        :return: None\n        \"\"\"", "\n", "self", ".", "disconnect", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.mgrid_to_points": [[5, 15], ["numpy.empty", "range", "len", "mgrid[].ravel", "numpy.prod", "len"], "function", ["None"], ["def", "mgrid_to_points", "(", "mgrid", ")", ":", "\n", "    ", "\"\"\"\n    Takes a NxD1xD2xD3 meshgrid or tuple(meshgrid) and outputs a D1*D2*D3xN\n    matrix of coordinate points\n    \"\"\"", "\n", "points", "=", "np", ".", "empty", "(", "shape", "=", "(", "np", ".", "prod", "(", "mgrid", "[", "0", "]", ".", "shape", ")", ",", "len", "(", "mgrid", ")", ")", ",", "\n", "dtype", "=", "mgrid", "[", "0", "]", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mgrid", ")", ")", ":", "\n", "        ", "points", "[", ":", ",", "i", "]", "=", "mgrid", "[", "i", "]", ".", "ravel", "(", ")", "\n", "", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.points_to_mgrid": [[17, 25], ["numpy.empty", "range", "points[].reshape", "tuple"], "function", ["None"], ["", "def", "points_to_mgrid", "(", "points", ",", "grid_shape", ")", ":", "\n", "\n", "    ", "mgrid", "=", "np", ".", "empty", "(", "shape", "=", "(", "(", "points", ".", "shape", "[", "1", "]", ",", ")", "+", "tuple", "(", "grid_shape", ")", ")", ",", "\n", "dtype", "=", "points", ".", "dtype", ")", "\n", "for", "i", "in", "range", "(", "points", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "mgrid", "[", "i", "]", "=", "points", "[", ":", ",", "i", "]", ".", "reshape", "(", "grid_shape", ")", "\n", "\n", "", "return", "mgrid", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.get_angle": [[27, 31], ["numpy.rad2deg", "numpy.norm", "numpy.norm", "numpy.arccos", "numpy.clip", "numpy.dot"], "function", ["None"], ["", "def", "get_angle", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "v1_u", "=", "v1", "/", "npl", ".", "norm", "(", "v1", ")", "\n", "v2_u", "=", "v2", "/", "npl", ".", "norm", "(", "v2", ")", "\n", "return", "np", ".", "rad2deg", "(", "np", ".", "arccos", "(", "np", ".", "clip", "(", "np", ".", "dot", "(", "v1_u", ",", "v2_u", ")", ",", "-", "1.0", ",", "1.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.get_rotation_matrix": [[33, 52], ["numpy.asarray().ravel", "numpy.cos", "numpy.array", "numpy.deg2rad", "numpy.linalg.norm", "numpy.sin", "numpy.asarray"], "function", ["None"], ["", "def", "get_rotation_matrix", "(", "axis", ",", "angle_deg", "=", "None", ",", "angle_rad", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Modified from:\n    https://stackoverflow.com/questions/6802577/python-rotation-of-3d-vector\n\n    Return the rotation matrix associated with counterclockwise rotation about\n    the given axis by theta degrees.\n    \"\"\"", "\n", "theta", "=", "angle_rad", "or", "np", ".", "deg2rad", "(", "angle_deg", ")", "\n", "axis", "=", "np", ".", "asarray", "(", "axis", ")", ".", "ravel", "(", ")", "\n", "axis", "=", "axis", "/", "np", ".", "linalg", ".", "norm", "(", "axis", ")", "\n", "a", "=", "np", ".", "cos", "(", "theta", "/", "2.0", ")", "\n", "b", ",", "c", ",", "d", "=", "-", "axis", "*", "np", ".", "sin", "(", "theta", "/", "2.0", ")", "\n", "aa", ",", "bb", ",", "cc", ",", "dd", "=", "a", "*", "a", ",", "b", "*", "b", ",", "c", "*", "c", ",", "d", "*", "d", "\n", "bc", ",", "ad", ",", "ac", ",", "ab", ",", "bd", ",", "cd", "=", "b", "*", "c", ",", "a", "*", "d", ",", "a", "*", "c", ",", "a", "*", "b", ",", "b", "*", "d", ",", "c", "*", "d", "\n", "\n", "return", "np", ".", "array", "(", "[", "[", "aa", "+", "bb", "-", "cc", "-", "dd", ",", "2", "*", "(", "bc", "+", "ad", ")", ",", "2", "*", "(", "bd", "-", "ac", ")", "]", ",", "\n", "[", "2", "*", "(", "bc", "-", "ad", ")", ",", "aa", "+", "cc", "-", "bb", "-", "dd", ",", "2", "*", "(", "cd", "+", "ab", ")", "]", ",", "\n", "[", "2", "*", "(", "bd", "+", "ac", ")", ",", "2", "*", "(", "cd", "-", "ab", ")", ",", "aa", "+", "dd", "-", "bb", "-", "cc", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg._rotate_grid": [[54, 67], ["linalg.mgrid_to_points", "numpy.mean().reshape", "numpy.dot().T.astype", "numpy.mean", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.mgrid_to_points"], ["", "def", "_rotate_grid", "(", "grid", ",", "rot_mat", ")", ":", "\n", "    ", "\"\"\"\n    Rotates a grid around its center by 'angle_deg' degrees counter clockwise\n    around the vector 'axis'.\n    \"\"\"", "\n", "points", "=", "mgrid_to_points", "(", "grid", ")", "\n", "\n", "# Center, rotate and bring back the grid", "\n", "center", "=", "np", ".", "mean", "(", "points", ",", "axis", "=", "0", ")", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "c_points", "=", "points", "-", "center", "\n", "rotated", "=", "np", ".", "dot", "(", "rot_mat", ",", "c_points", ".", "T", ")", ".", "T", ".", "astype", "(", "np", ".", "float32", ")", "+", "center", "\n", "\n", "return", "rotated", "\n", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_pix_dim": [[9, 11], ["None"], "function", ["None"], ["def", "get_pix_dim", "(", "nii_image", ")", ":", "\n", "    ", "return", "nii_image", ".", "header", "[", "\"pixdim\"", "]", "[", "1", ":", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_real_image_size": [[13, 17], ["sample_grid.get_pix_dim", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_pix_dim"], ["", "def", "get_real_image_size", "(", "nii_image", ")", ":", "\n", "    ", "pix_dims", "=", "get_pix_dim", "(", "nii_image", ")", "\n", "shape", "=", "np", ".", "asarray", "(", "nii_image", ".", "shape", ")", "[", ":", "3", "]", "\n", "return", "shape", "*", "pix_dims", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_maximum_real_dim": [[19, 21], ["numpy.max", "sample_grid.get_real_image_size"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_real_image_size"], ["", "def", "get_maximum_real_dim", "(", "nii_image", ")", ":", "\n", "    ", "return", "np", ".", "max", "(", "get_real_image_size", "(", "nii_image", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_bounding_sphere_radius": [[23, 25], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "get_bounding_sphere_radius", "(", "nii_image", ")", ":", "\n", "    ", "return", "np", ".", "linalg", ".", "norm", "(", "nii_image", ".", "center", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_bounding_sphere_real_radius": [[27, 30], ["sample_grid.get_real_image_size", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_real_image_size"], ["", "def", "get_bounding_sphere_real_radius", "(", "nii_image", ")", ":", "\n", "    ", "real_dim", "=", "get_real_image_size", "(", "nii_image", ")", "\n", "return", "np", ".", "linalg", ".", "norm", "(", "real_dim", "/", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_maximum_real_dim_in_folder": [[32, 43], ["os.listdir", "numpy.max", "nibabel.load", "sizes.append", "os.path.join", "sample_grid.get_maximum_real_dim", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_maximum_real_dim"], ["", "def", "get_maximum_real_dim_in_folder", "(", "folder", ")", ":", "\n", "    ", "import", "os", "\n", "sizes", "=", "[", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "folder", ")", ":", "\n", "        ", "if", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "-", "1", "]", "not", "in", "(", "\".nii\"", ",", "\".gz\"", ")", ":", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "f", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f", ")", "\n", "", "im", "=", "nib", ".", "load", "(", "f", ")", "\n", "sizes", ".", "append", "(", "get_maximum_real_dim", "(", "im", ")", ")", "\n", "", "return", "np", ".", "max", "(", "sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_voxel_grid": [[45, 55], ["mpunet.interpolation.linalg.mgrid_to_points"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.mgrid_to_points"], ["", "def", "get_voxel_grid", "(", "images", ",", "as_points", "=", "False", ")", ":", "\n", "    ", "shape", "=", "images", ".", "shape", "[", ":", "3", "]", "\n", "grid", "=", "np", ".", "mgrid", "[", "0", ":", "shape", "[", "0", "]", ":", "1", ",", "\n", "0", ":", "shape", "[", "1", "]", ":", "1", ",", "\n", "0", ":", "shape", "[", "2", "]", ":", "1", "]", "\n", "\n", "if", "as_points", ":", "\n", "        ", "return", "mgrid_to_points", "(", "grid", ")", "\n", "", "else", ":", "\n", "        ", "return", "grid", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_angle": [[57, 61], ["numpy.rad2deg", "numpy.norm", "numpy.norm", "numpy.arccos", "numpy.clip", "numpy.dot"], "function", ["None"], ["", "", "def", "get_angle", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "v1_u", "=", "v1", "/", "npl", ".", "norm", "(", "v1", ")", "\n", "v2_u", "=", "v2", "/", "npl", ".", "norm", "(", "v2", ")", "\n", "return", "np", ".", "rad2deg", "(", "np", ".", "arccos", "(", "np", ".", "clip", "(", "np", ".", "dot", "(", "v1_u", ",", "v2_u", ")", ",", "-", "1.0", ",", "1.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_voxel_axes_real_space": [[63, 91], ["sample_grid.get_voxel_axes", "numpy.linalg.norm", "numpy.diag", "numpy.any", "np.diag.dot", "numpy.isclose", "numpy.linalg.inv"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_voxel_axes"], ["", "def", "get_voxel_axes_real_space", "(", "image", ",", "affine", ",", "return_basis", "=", "False", ")", ":", "\n", "    ", "g_xx", ",", "g_yy", ",", "g_zz", "=", "get_voxel_axes", "(", "image", ")", "\n", "\n", "# Extract orthonormal basis matrix", "\n", "assert", "affine", ".", "shape", "==", "(", "4", ",", "4", ")", "\n", "basis", "=", "affine", "[", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "\n", "# Make sure basis is aligned with regular grid", "\n", "# Otherwise, rotate the grid and store transformation for later use", "\n", "pixdims", "=", "np", ".", "linalg", ".", "norm", "(", "basis", ",", "axis", "=", "0", ")", "\n", "transform", "=", "np", ".", "diag", "(", "pixdims", ")", "\n", "# sign = np.sign([np.dot(transform[:, i], basis[:, i]) for i in range(3)])", "\n", "# transform = np.diag(sign).dot(transform)", "\n", "\n", "if", "np", ".", "any", "(", "~", "np", ".", "isclose", "(", "transform", ",", "basis", ")", ")", ":", "\n", "        ", "rot_mat", "=", "transform", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "basis", ")", ")", "\n", "", "else", ":", "\n", "        ", "rot_mat", "=", "None", "\n", "\n", "# Get grid in real space", "\n", "", "g_xx", "=", "g_xx", "*", "transform", "[", "0", ",", "0", "]", "\n", "g_yy", "=", "g_yy", "*", "transform", "[", "1", ",", "1", "]", "\n", "g_zz", "=", "g_zz", "*", "transform", "[", "2", ",", "2", "]", "\n", "\n", "if", "return_basis", ":", "\n", "        ", "return", "(", "g_xx", ",", "g_yy", ",", "g_zz", ")", ",", "transform", ",", "rot_mat", "\n", "", "else", ":", "\n", "        ", "return", "g_xx", ",", "g_yy", ",", "g_zz", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_voxel_axes": [[93, 99], ["numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "", "def", "get_voxel_axes", "(", "image", ")", ":", "\n", "    ", "x", ",", "y", ",", "z", ",", "_", "=", "image", ".", "shape", "\n", "g_xx", "=", "np", ".", "arange", "(", "x", ",", "dtype", "=", "np", ".", "float32", ")", "-", "(", "x", "-", "1", ")", "/", "2", "\n", "g_yy", "=", "np", ".", "arange", "(", "y", ",", "dtype", "=", "np", ".", "float32", ")", "-", "(", "y", "-", "1", ")", "/", "2", "\n", "g_zz", "=", "np", ".", "arange", "(", "z", ",", "dtype", "=", "np", ".", "float32", ")", "-", "(", "z", "-", "1", ")", "/", "2", "\n", "return", "g_xx", ",", "g_yy", ",", "g_zz", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_voxel_grid_real_space": [[101, 131], ["mpunet.interpolation.linalg.points_to_mgrid", "vox_to_real_affine.dot", "numpy.mean", "numpy.column_stack", "mpunet.interpolation.linalg.mgrid_to_points", "numpy.ones", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.points_to_mgrid", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.mgrid_to_points"], ["", "def", "get_voxel_grid_real_space", "(", "images", ",", "append_ones", "=", "False", ")", ":", "\n", "# Get shape excluding channels", "\n", "    ", "shape", "=", "images", ".", "shape", "[", ":", "-", "1", "]", "\n", "\n", "# Get affine transforming voxel positions to real space positions", "\n", "vox_to_real_affine", "=", "images", ".", "affine", "[", ":", "-", "1", ",", ":", "-", "1", "]", "\n", "\n", "# Transform axes from voxel space to real space", "\n", "grid_vox_space", "=", "np", ".", "mgrid", "[", "0", ":", "shape", "[", "0", "]", ":", "1", ",", "\n", "0", ":", "shape", "[", "1", "]", ":", "1", ",", "\n", "0", ":", "shape", "[", "2", "]", ":", "1", "]", "\n", "\n", "# Move grid to real space", "\n", "grid_points_real_space", "=", "vox_to_real_affine", ".", "dot", "(", "\n", "mgrid_to_points", "(", "grid_vox_space", ")", ".", "T", ")", ".", "T", "\n", "\n", "# Center", "\n", "centered_grid_points_real_space", "=", "grid_points_real_space", "-", "np", ".", "mean", "(", "grid_points_real_space", ",", "axis", "=", "0", ")", "\n", "\n", "# Append column of ones?", "\n", "if", "append_ones", ":", "\n", "        ", "centered_grid_points_real_space", "=", "np", ".", "column_stack", "(", "\n", "(", "grid_points_real_space", ",", "\n", "np", ".", "ones", "(", "len", "(", "grid_points_real_space", ")", ")", ")", ")", "\n", "\n", "# Return real space grid as mgrid", "\n", "", "points", "=", "points_to_mgrid", "(", "centered_grid_points_real_space", ",", "shape", ")", "\n", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_random_views": [[133, 148], ["norm", "numpy.linalg.norm", "numpy.abs", "numpy.linalg.norm"], "function", ["None"], ["", "def", "get_random_views", "(", "N", ",", "dim", "=", "3", ",", "norm", "=", "np", ".", "random", ".", "normal", ",", "pos_z", "=", "True", ",", "weights", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    http://en.wikipedia.org/wiki/N-sphere#Generating_random_points\n    \"\"\"", "\n", "normal_deviates", "=", "norm", "(", "size", "=", "(", "N", ",", "dim", ")", ")", "\n", "radius", "=", "np", ".", "linalg", ".", "norm", "(", "normal_deviates", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "views", "=", "normal_deviates", "/", "radius", "\n", "if", "pos_z", ":", "\n", "        ", "views", "[", ":", ",", "-", "1", "]", "=", "np", ".", "abs", "(", "views", "[", ":", ",", "-", "1", "]", ")", "\n", "\n", "", "if", "weights", "is", "not", "None", ":", "\n", "        ", "v_weghted", "=", "views", "*", "weights", "\n", "views", "=", "v_weghted", "/", "np", ".", "linalg", ".", "norm", "(", "v_weghted", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "\n", "", "return", "views", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.sample_random_views_with_angle_restriction": [[150, 174], ["logger", "ScreenLogger", "numpy.median", "logger", "sample_grid.get_random_views", "numpy.all", "sample_grid.get_angle", "combinations", "numpy.asarray"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_random_views", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_angle"], ["", "def", "sample_random_views_with_angle_restriction", "(", "views", ",", "min_angle_deg", ",", "\n", "auditor", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "    ", "from", "itertools", "import", "combinations", "\n", "from", "mpunet", ".", "logging", "import", "ScreenLogger", "\n", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "logger", "(", "\"Generating %i random views...\"", "%", "views", ")", "\n", "\n", "# Weight by median sample resolution along each axis", "\n", "if", "auditor", "is", "not", "None", ":", "\n", "        ", "res", "=", "np", ".", "median", "(", "auditor", ".", "info", "[", "\"pixdims\"", "]", ",", "axis", "=", "0", ")", "\n", "logger", "(", "\"[OBS] Weighting random views by median res: %s\"", "%", "res", ")", "\n", "", "else", ":", "\n", "        ", "res", "=", "None", "\n", "\n", "", "N", "=", "views", "\n", "found", "=", "False", "\n", "tries", "=", "0", "\n", "while", "not", "found", ":", "\n", "        ", "tries", "+=", "1", "\n", "views", "=", "get_random_views", "(", "N", ",", "dim", "=", "3", ",", "pos_z", "=", "True", ",", "weights", "=", "res", ")", "\n", "angles", "=", "[", "get_angle", "(", "v1", ",", "v2", ")", "for", "v1", ",", "v2", "in", "combinations", "(", "views", ",", "2", ")", "]", "\n", "found", "=", "np", ".", "all", "(", "np", ".", "asarray", "(", "angles", ")", ">", "min_angle_deg", ")", "\n", "min_angle_deg", "-=", "1", "\n", "", "return", "views", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.sample_plane": [[176, 190], ["sample_grid.sample_plane_at", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.sample_plane_at"], ["", "def", "sample_plane", "(", "norm_vector", ",", "sample_dim", ",", "real_space_span", ",", "\n", "real_space_sample_sphere_radius", ",", "noise_sd", "=", "0.", ",", "\n", "return_real_space_grid", "=", "False", ")", ":", "\n", "# Sample a random displacement", "\n", "# Get random displacement within sample sphere", "\n", "    ", "rd", "=", "np", ".", "random", ".", "randint", "(", "-", "real_space_sample_sphere_radius", ",", "\n", "real_space_sample_sphere_radius", ",", "1", ")", "[", "0", "]", "\n", "\n", "return", "sample_plane_at", "(", "norm_vector", "=", "norm_vector", ",", "\n", "sample_dim", "=", "sample_dim", ",", "\n", "real_space_span", "=", "real_space_span", ",", "\n", "offset_from_center", "=", "rd", ",", "\n", "noise_sd", "=", "noise_sd", ",", "\n", "test_mode", "=", "return_real_space_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.sample_plane_at": [[192, 245], ["numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.all", "numpy.all", "numpy.column_stack", "numpy.linspace", "complex", "mpunet.interpolation.linalg.mgrid_to_points", "mpunet.interpolation.linalg.points_to_mgrid", "type", "numpy.random.normal", "numpy.abs", "numpy.isclose", "numpy.array", "numpy.array", "np.array.copy", "numpy.linalg.norm", "mpunet.interpolation.linalg.get_rotation_matrix().dot", "numpy.cross", "np.column_stack.dot", "numpy.linalg.inv", "mpunet.interpolation.linalg.get_rotation_matrix", "numpy.cross"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.mgrid_to_points", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.points_to_mgrid", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.get_rotation_matrix"], ["", "def", "sample_plane_at", "(", "norm_vector", ",", "sample_dim", ",", "real_space_span", ",", "\n", "offset_from_center", ",", "noise_sd", ",", "test_mode", "=", "False", ")", ":", "\n", "# Prepare normal vector to the plane", "\n", "    ", "n_hat", "=", "np", ".", "array", "(", "norm_vector", ",", "np", ".", "float32", ")", "\n", "n_hat", "/=", "np", ".", "linalg", ".", "norm", "(", "n_hat", ")", "\n", "\n", "# Add noise?", "\n", "if", "type", "(", "noise_sd", ")", "is", "not", "np", ".", "ndarray", ":", "\n", "        ", "noise_sd", "=", "np", ".", "random", ".", "normal", "(", "scale", "=", "noise_sd", ",", "size", "=", "3", ")", "\n", "\n", "", "n_hat", "+=", "noise_sd", "\n", "n_hat", "/=", "np", ".", "linalg", ".", "norm", "(", "n_hat", ")", "\n", "\n", "if", "np", ".", "all", "(", "n_hat", "[", ":", "-", "1", "]", "<", "0.2", ")", ":", "\n", "# Vector pointing primarily up, noise will have large effect on image", "\n", "# orientation. We force the first two components to go into the", "\n", "# positive direction to control variability of sampling", "\n", "        ", "n_hat", "[", ":", "-", "1", "]", "=", "np", ".", "abs", "(", "n_hat", "[", ":", "-", "1", "]", ")", "\n", "", "if", "np", ".", "all", "(", "np", ".", "isclose", "(", "n_hat", "[", ":", "-", "1", "]", ",", "0", ")", ")", ":", "\n", "        ", "u", "=", "np", ".", "array", "(", "[", "1", ",", "0", ",", "0", "]", ")", "\n", "v", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "# Find vector in same vertical plane as nhat", "\n", "        ", "nhat_vs", "=", "n_hat", ".", "copy", "(", ")", "\n", "nhat_vs", "[", "-", "1", "]", "=", "nhat_vs", "[", "-", "1", "]", "+", "1", "\n", "nhat_vs", "/=", "np", ".", "linalg", ".", "norm", "(", "nhat_vs", ")", "\n", "\n", "# Get two orthogonal vectors in plane, u pointing down in z-direction", "\n", "u", "=", "get_rotation_matrix", "(", "np", ".", "cross", "(", "n_hat", ",", "nhat_vs", ")", ",", "-", "90", ")", ".", "dot", "(", "n_hat", ")", "\n", "v", "=", "np", ".", "cross", "(", "n_hat", ",", "u", ")", "\n", "\n", "# Define basis matrix + displacement to center (affine transformation)", "\n", "", "basis", "=", "np", ".", "column_stack", "(", "(", "u", ",", "v", ",", "n_hat", ")", ")", "\n", "\n", "# Define regular grid (centered at origin)", "\n", "hd", "=", "real_space_span", "//", "2", "\n", "g", "=", "np", ".", "linspace", "(", "-", "hd", ",", "hd", ",", "sample_dim", ")", "\n", "\n", "j", "=", "complex", "(", "sample_dim", ")", "\n", "grid", "=", "np", ".", "mgrid", "[", "-", "hd", ":", "hd", ":", "j", ",", "\n", "-", "hd", ":", "hd", ":", "j", ",", "\n", "offset_from_center", ":", "offset_from_center", ":", "1j", "]", "\n", "\n", "# Calculate voxel coordinates on the real space grid", "\n", "points", "=", "mgrid_to_points", "(", "grid", ")", "\n", "\n", "real_points", "=", "basis", ".", "dot", "(", "points", ".", "T", ")", ".", "T", "\n", "real_grid", "=", "points_to_mgrid", "(", "real_points", ",", "grid", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n", "if", "test_mode", ":", "\n", "        ", "return", "real_grid", ",", "g", ",", "np", ".", "linalg", ".", "inv", "(", "basis", ")", "\n", "", "else", ":", "\n", "        ", "return", "real_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.sample_box": [[247, 263], ["numpy.asarray", "sample_grid.sample_box_at", "numpy.array", "max", "random.uniform", "range"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.sample_box_at"], ["", "", "def", "sample_box", "(", "sample_dim", ",", "real_box_dim", ",", "real_dims", ",", "noise_sd", "=", "0.", ",", "test_mode", "=", "False", ")", ":", "\n", "\n", "# Set sample space equal to real_dims or expanded to 1.1x sample box dim", "\n", "# 1.1x to give a little room around the image for sampling", "\n", "    ", "sample_space", "=", "np", ".", "asarray", "(", "[", "max", "(", "i", ",", "real_box_dim", "*", "1.1", ")", "for", "i", "in", "real_dims", "]", ")", "\n", "\n", "# Sample a random displacement", "\n", "# Get random displacement within sample space, center on origin", "\n", "d", "=", "(", "sample_space", "-", "real_box_dim", ")", "\n", "placement", "=", "np", ".", "array", "(", "[", "random", ".", "uniform", "(", "0", ",", "d", "[", "i", "]", ")", "for", "i", "in", "range", "(", "3", ")", "]", ")", "-", "sample_space", "/", "2", "\n", "\n", "return", "sample_box_at", "(", "real_placement", "=", "placement", ",", "\n", "sample_dim", "=", "sample_dim", ",", "\n", "real_box_dim", "=", "real_box_dim", ",", "\n", "noise_sd", "=", "noise_sd", ",", "\n", "test_mode", "=", "test_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.sample_box_at": [[265, 302], ["complex", "numpy.eye", "sample_grid.get_random_views", "mpunet.interpolation.linalg.get_rotation_matrix", "mpunet.interpolation.linalg.mgrid_to_points", "numpy.mean", "mpunet.interpolation.linalg.points_to_mgrid", "numpy.abs", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linalg.inv", "mpunet.interpolation.linalg.get_rotation_matrix.dot", "numpy.random.normal"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_random_views", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.get_rotation_matrix", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.mgrid_to_points", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.points_to_mgrid"], ["", "def", "sample_box_at", "(", "real_placement", ",", "sample_dim", ",", "real_box_dim", ",", "\n", "noise_sd", ",", "test_mode", ")", ":", "\n", "\n", "    ", "j", "=", "complex", "(", "sample_dim", ")", "\n", "a", ",", "b", ",", "c", "=", "real_placement", "\n", "grid", "=", "np", ".", "mgrid", "[", "a", ":", "a", "+", "real_box_dim", ":", "j", ",", "\n", "b", ":", "b", "+", "real_box_dim", ":", "j", ",", "\n", "c", ":", "c", "+", "real_box_dim", ":", "j", "]", "\n", "\n", "rot_mat", "=", "np", ".", "eye", "(", "3", ")", "\n", "rot_grid", "=", "grid", "\n", "if", "noise_sd", ":", "\n", "# Get random rotation vector", "\n", "        ", "rot_axis", "=", "get_random_views", "(", "N", "=", "1", ",", "dim", "=", "3", ",", "pos_z", "=", "True", ")", "\n", "\n", "rot_angle", "=", "False", "\n", "while", "not", "rot_angle", ":", "\n", "            ", "angle", "=", "np", ".", "abs", "(", "np", ".", "random", ".", "normal", "(", "scale", "=", "noise_sd", ",", "size", "=", "1", ")", "[", "0", "]", ")", "\n", "if", "angle", "<", "2", "*", "np", ".", "pi", ":", "\n", "                ", "rot_angle", "=", "angle", "\n", "\n", "", "", "rot_mat", "=", "get_rotation_matrix", "(", "rot_axis", ",", "angle_rad", "=", "rot_angle", ")", "\n", "\n", "# Center --> apply rotation --> revert centering --> mgrid", "\n", "points", "=", "mgrid_to_points", "(", "grid", ")", "\n", "center", "=", "np", ".", "mean", "(", "points", ",", "axis", "=", "0", ")", "\n", "points", "-=", "center", "\n", "points", "=", "rot_mat", ".", "dot", "(", "points", ".", "T", ")", ".", "T", "+", "center", "\n", "rot_grid", "=", "points_to_mgrid", "(", "points", ",", "grid", ".", "shape", "[", "1", ":", "]", ")", "\n", "\n", "", "if", "test_mode", ":", "\n", "        ", "axes", "=", "(", "np", ".", "linspace", "(", "a", ",", "a", "+", "real_box_dim", ",", "sample_dim", ")", ",", "\n", "np", ".", "linspace", "(", "b", ",", "b", "+", "real_box_dim", ",", "sample_dim", ")", ",", "\n", "np", ".", "linspace", "(", "c", ",", "c", "+", "real_box_dim", ",", "sample_dim", ")", ")", "\n", "return", "rot_grid", ",", "axes", ",", "np", ".", "linalg", ".", "inv", "(", "rot_mat", ")", "\n", "", "else", ":", "\n", "        ", "return", "rot_grid", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.__init__": [[18, 53], ["view_interpolator.ViewInterpolator._init_interpolators", "ValueError", "mpunet.logging.ScreenLogger", "isinstance", "ValueError", "len"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator._init_interpolators"], ["    ", "def", "__init__", "(", "self", ",", "image", ",", "labels", ",", "affine", ",", "\n", "bg_value", "=", "0.0", ",", "bg_class", "=", "0", ",", "logger", "=", "None", ")", ":", "\n", "\n", "# Ensure 4D", "\n", "        ", "if", "not", "image", ".", "ndim", "==", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\"Input img of dim %i must be dim 4.\"", "\n", "\"If image has only 1 channel, use \"", "\n", "\"np.expand_dims(img, -1).\"", "%", "image", ".", "ndim", ")", "\n", "\n", "# Set logger", "\n", "", "self", ".", "logger", "=", "logger", "if", "logger", "is", "not", "None", "else", "ScreenLogger", "(", ")", "\n", "\n", "# Number of channels in the input image", "\n", "self", ".", "im_shape", "=", "image", ".", "shape", "\n", "self", ".", "n_channels", "=", "self", ".", "im_shape", "[", "-", "1", "]", "\n", "self", ".", "im_dtype", "=", "image", ".", "dtype", "\n", "\n", "# Cast bg-value to list of length n_channels", "\n", "if", "not", "isinstance", "(", "bg_value", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "            ", "bg_value", "=", "[", "bg_value", "]", "*", "self", ".", "n_channels", "\n", "", "if", "not", "len", "(", "bg_value", ")", "==", "self", ".", "n_channels", ":", "\n", "            ", "raise", "ValueError", "(", "\"'bg_value' should be a list of length \"", "\n", "\"'n_channels'. Got {} for n_channels={}\"", ".", "format", "(", "\n", "bg_value", ",", "self", ".", "n_channels", ")", ")", "\n", "", "self", ".", "bg_value", "=", "bg_value", "\n", "\n", "# Store potential transformation to regular grid", "\n", "self", ".", "rot_mat", "=", "None", "\n", "\n", "# Define interpolators", "\n", "self", ".", "im_intrps", ",", "self", ".", "lab_intrp", "=", "self", ".", "_init_interpolators", "(", "image", ",", "\n", "labels", ",", "\n", "bg_value", ",", "\n", "bg_class", ",", "\n", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.apply_rotation": [[54, 61], ["mpunet.interpolation.linalg.points_to_mgrid", "view_interpolator.ViewInterpolator.rot_mat.dot", "mpunet.interpolation.linalg.mgrid_to_points"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.points_to_mgrid", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.linalg.mgrid_to_points"], ["", "def", "apply_rotation", "(", "self", ",", "mgrid", ")", ":", "\n", "        ", "if", "self", ".", "rot_mat", "is", "not", "None", ":", "\n", "            ", "shape", "=", "mgrid", "[", "0", "]", ".", "shape", "\n", "rotated", "=", "self", ".", "rot_mat", ".", "dot", "(", "mgrid_to_points", "(", "mgrid", ")", ".", "T", ")", ".", "T", "\n", "return", "points_to_mgrid", "(", "rotated", ",", "shape", ")", "\n", "", "else", ":", "\n", "            ", "return", "mgrid", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.__call__": [[62, 71], ["view_interpolator.ViewInterpolator.apply_rotation", "view_interpolator.ViewInterpolator.intrp_image", "view_interpolator.ViewInterpolator.intrp_labels"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.apply_rotation", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.intrp_image", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.intrp_labels"], ["", "", "def", "__call__", "(", "self", ",", "rgrid_mgrid", ")", ":", "\n", "# Align grid if necessary", "\n", "        ", "rgrid_mgrid", "=", "self", ".", "apply_rotation", "(", "rgrid_mgrid", ")", "\n", "\n", "# Interpolate image and labels", "\n", "image", "=", "self", ".", "intrp_image", "(", "rgrid_mgrid", ",", "apply_rot", "=", "False", ")", "\n", "labels", "=", "self", ".", "intrp_labels", "(", "rgrid_mgrid", ",", "apply_rot", "=", "False", ")", "\n", "\n", "return", "image", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.intrp_image": [[72, 88], ["numpy.zeros", "range", "view_interpolator.ViewInterpolator.apply_rotation", "isinstance", "tuple", "mgrid[].squeeze"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.apply_rotation"], ["", "def", "intrp_image", "(", "self", ",", "mgrid", ",", "apply_rot", "=", "True", ")", ":", "\n", "        ", "if", "apply_rot", ":", "\n", "            ", "mgrid", "=", "self", ".", "apply_rotation", "(", "mgrid", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "mgrid", ",", "tuple", ")", ":", "\n", "# RegularGridInterpolator expects this tuple(xx, yy, zz) format", "\n", "            ", "mgrid", "=", "tuple", "(", "mgrid", ")", "\n", "\n", "# Interpolate image along all channels", "\n", "", "image", "=", "np", ".", "zeros", "(", "shape", "=", "mgrid", "[", "0", "]", ".", "squeeze", "(", ")", ".", "shape", "+", "(", "self", ".", "n_channels", ",", ")", ",", "\n", "dtype", "=", "self", ".", "im_dtype", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "n_channels", ")", ":", "\n", "            ", "image", "[", "...", ",", "i", "]", "=", "self", ".", "im_intrps", "[", "i", "]", "(", "mgrid", ")", ".", "squeeze", "(", ")", "\n", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.intrp_labels": [[89, 102], ["view_interpolator.ViewInterpolator.apply_rotation", "view_interpolator.ViewInterpolator._cast_labels", "isinstance", "tuple", "view_interpolator.ViewInterpolator.lab_intrp().squeeze", "view_interpolator.ViewInterpolator.lab_intrp"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator.apply_rotation", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator._cast_labels"], ["", "def", "intrp_labels", "(", "self", ",", "mgrid", ",", "apply_rot", "=", "True", ")", ":", "\n", "        ", "if", "apply_rot", ":", "\n", "            ", "mgrid", "=", "self", ".", "apply_rotation", "(", "mgrid", ")", "\n", "\n", "# Interpolate labels", "\n", "", "if", "self", ".", "lab_intrp", ":", "\n", "            ", "if", "not", "isinstance", "(", "mgrid", ",", "tuple", ")", ":", "\n", "# RegularGridInterpolator expects tuple(xx, yy, zz) format", "\n", "                ", "mgrid", "=", "tuple", "(", "mgrid", ")", "\n", "\n", "", "return", "self", ".", "_cast_labels", "(", "self", ".", "lab_intrp", "(", "mgrid", ")", ".", "squeeze", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator._init_interpolators": [[103, 138], ["mpunet.interpolation.sample_grid.get_voxel_axes_real_space", "range", "numpy.sign", "numpy.any", "im_intrps.append", "mpunet.interpolation.regular_grid_interpolator.RegularGridInterpolator", "numpy.diagonal", "mpunet.interpolation.regular_grid_interpolator.RegularGridInterpolator", "image[].squeeze"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_voxel_axes_real_space"], ["", "", "def", "_init_interpolators", "(", "self", ",", "image", ",", "labels", ",", "bg_value", ",", "bg_class", ",", "affine", ")", ":", "\n", "\n", "# Get voxel regular grid centered in real space", "\n", "        ", "g_all", ",", "basis", ",", "rot_mat", "=", "get_voxel_axes_real_space", "(", "image", ",", "affine", ",", "\n", "return_basis", "=", "True", ")", "\n", "\n", "# Set rotation matrix", "\n", "self", ".", "rot_mat", "=", "rot_mat", "\n", "\n", "# Flip axes? Must be strictly increasing", "\n", "flip", "=", "np", ".", "sign", "(", "np", ".", "diagonal", "(", "basis", ")", ")", "==", "-", "1", "\n", "assert", "not", "np", ".", "any", "(", "flip", ")", "\n", "g_xx", ",", "g_yy", ",", "g_zz", "=", "g_all", "\n", "\n", "# Set interpolator for image, one for each channel", "\n", "im_intrps", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_channels", ")", ":", "\n", "            ", "im_intrps", ".", "append", "(", "RegularGridInterpolator", "(", "(", "g_xx", ",", "g_yy", ",", "g_zz", ")", ",", "\n", "image", "[", "...", ",", "i", "]", ".", "squeeze", "(", ")", ",", "\n", "bounds_error", "=", "False", ",", "\n", "fill_value", "=", "bg_value", "[", "i", "]", ",", "\n", "method", "=", "\"linear\"", ",", "\n", "dtype", "=", "np", ".", "float32", ")", ")", "\n", "\n", "", "try", ":", "\n", "# Set interpolator for labels", "\n", "            ", "lab_intrp", "=", "RegularGridInterpolator", "(", "(", "g_xx", ",", "g_yy", ",", "g_zz", ")", ",", "labels", ",", "\n", "bounds_error", "=", "False", ",", "\n", "fill_value", "=", "bg_class", ",", "\n", "method", "=", "\"nearest\"", ",", "\n", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "except", "(", "AttributeError", ",", "TypeError", ",", "ValueError", ")", ":", "\n", "            ", "lab_intrp", "=", "None", "\n", "\n", "", "return", "im_intrps", ",", "lab_intrp", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.ViewInterpolator._cast_labels": [[139, 148], ["numpy.iinfo", "numpy.all", "labels.astype", "labels.astype"], "methods", ["None"], ["", "def", "_cast_labels", "(", "self", ",", "labels", ")", ":", "\n", "# Cast labels float64 -> uint8/16", "\n", "        ", "type_info", "=", "np", ".", "iinfo", "(", "np", ".", "uint8", ")", "\n", "l", "=", "type_info", ".", "min", "\n", "u", "=", "type_info", ".", "max", "\n", "if", "np", ".", "all", "(", "(", "labels", ">=", "l", ")", "&", "(", "labels", "<=", "u", ")", ")", ":", "\n", "            ", "return", "labels", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "", "else", ":", "\n", "            ", "return", "labels", ".", "astype", "(", "np", ".", "uint16", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.view_interpolator.is_rot_mat": [[8, 15], ["numpy.all", "numpy.isclose", "numpy.isclose", "numpy.linalg.det", "mat.dot", "mat.T.dot"], "function", ["None"], ["def", "is_rot_mat", "(", "mat", ")", ":", "\n", "    ", "\"\"\"\n    Validate that a square matrix is a rotation matrix\n    \"\"\"", "\n", "is_ortho", "=", "np", ".", "all", "(", "np", ".", "isclose", "(", "mat", ".", "dot", "(", "mat", ".", "T", ")", ",", "mat", ".", "T", ".", "dot", "(", "mat", ")", ")", ")", "\n", "is_unimodular", "=", "np", ".", "isclose", "(", "np", ".", "linalg", ".", "det", "(", "mat", ")", ",", "1", ")", "\n", "return", "is_ortho", "and", "is_unimodular", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.regular_grid_interpolator.RegularGridInterpolator.__init__": [[111, 151], ["numpy.array().astype", "enumerate", "tuple", "ValueError", "hasattr", "numpy.asarray", "len", "ValueError", "numpy.array", "hasattr", "ValueError", "numpy.all", "ValueError", "ValueError", "ValueError", "numpy.asarray", "numpy.can_cast", "len", "len", "numpy.diff", "numpy.asarray", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "points", ",", "values", ",", "method", "=", "\"linear\"", ",", "bounds_error", "=", "True", ",", "\n", "fill_value", "=", "np", ".", "nan", ",", "dtype", "=", "np", ".", "float32", ")", ":", "\n", "        ", "if", "method", "not", "in", "[", "\"linear\"", ",", "\"nearest\"", ",", "\"kNN\"", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"Method '%s' is not defined\"", "%", "method", ")", "\n", "", "self", ".", "method", "=", "method", "\n", "self", ".", "bounds_error", "=", "bounds_error", "\n", "\n", "if", "not", "hasattr", "(", "values", ",", "'ndim'", ")", ":", "\n", "# allow reasonable duck-typed values", "\n", "            ", "values", "=", "np", ".", "asarray", "(", "values", ")", "\n", "\n", "", "if", "len", "(", "points", ")", ">", "values", ".", "ndim", ":", "\n", "            ", "raise", "ValueError", "(", "\"There are %d point arrays, but values has %d \"", "\n", "\"dimensions\"", "%", "(", "len", "(", "points", ")", ",", "values", ".", "ndim", ")", ")", "\n", "\n", "# if hasattr(values, 'dtype') and hasattr(values, 'astype'):", "\n", "#     if not np.issubdtype(values.dtype, np.inexact):", "\n", "#         values = values.astype(float)", "\n", "\n", "", "self", ".", "fill_value", "=", "np", ".", "array", "(", "fill_value", ")", ".", "astype", "(", "dtype", ")", "\n", "if", "self", ".", "fill_value", "is", "not", "None", ":", "\n", "            ", "fill_value_dtype", "=", "self", ".", "fill_value", ".", "dtype", "\n", "if", "(", "hasattr", "(", "values", ",", "'dtype'", ")", "and", "not", "\n", "np", ".", "can_cast", "(", "fill_value_dtype", ",", "values", ".", "dtype", ",", "\n", "casting", "=", "'same_kind'", ")", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"fill_value must be either 'None' or \"", "\n", "\"of a type compatible with values\"", ")", "\n", "\n", "", "", "for", "i", ",", "p", "in", "enumerate", "(", "points", ")", ":", "\n", "            ", "if", "not", "np", ".", "all", "(", "np", ".", "diff", "(", "p", ")", ">", "0.", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"The points in dimension %d must be strictly \"", "\n", "\"ascending\"", "%", "i", ")", "\n", "", "if", "not", "np", ".", "asarray", "(", "p", ")", ".", "ndim", "==", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\"The points in dimension %d must be \"", "\n", "\"1-dimensional\"", "%", "i", ")", "\n", "", "if", "not", "values", ".", "shape", "[", "i", "]", "==", "len", "(", "p", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"There are %d points and %d values in \"", "\n", "\"dimension %d\"", "%", "(", "len", "(", "p", ")", ",", "values", ".", "shape", "[", "i", "]", ",", "i", ")", ")", "\n", "", "", "self", ".", "grid", "=", "tuple", "(", "[", "np", ".", "asarray", "(", "p", ")", "for", "p", "in", "points", "]", ")", "\n", "self", ".", "values", "=", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.regular_grid_interpolator.RegularGridInterpolator.__call__": [[152, 203], ["len", "scipy.interpolate.interpnd._ndim_coords_from_arrays", "xi.reshape.reshape.reshape", "regular_grid_interpolator.RegularGridInterpolator._find_indices", "regular_grid_interpolator.RegularGridInterpolator.reshape", "ValueError", "len", "ValueError", "enumerate", "regular_grid_interpolator.RegularGridInterpolator._evaluate_linear", "regular_grid_interpolator.RegularGridInterpolator._evaluate_nearest", "numpy.logical_and", "ValueError", "regular_grid_interpolator.RegularGridInterpolator._evaluate_NN", "numpy.all", "numpy.all"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.regular_grid_interpolator.RegularGridInterpolator._find_indices", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.regular_grid_interpolator.RegularGridInterpolator._evaluate_linear", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.regular_grid_interpolator.RegularGridInterpolator._evaluate_nearest", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.regular_grid_interpolator.RegularGridInterpolator._evaluate_NN"], ["", "def", "__call__", "(", "self", ",", "xi", ",", "method", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Interpolation at coordinates\n\n        Parameters\n        ----------\n        xi : ndarray of shape (..., ndim)\n            The coordinates to sample the gridded data at\n\n        method : str\n            The method of interpolation to perform. Supported are \"linear\" and\n            \"nearest\".\n\n        \"\"\"", "\n", "method", "=", "self", ".", "method", "if", "method", "is", "None", "else", "method", "\n", "if", "method", "not", "in", "[", "\"linear\"", ",", "\"nearest\"", ",", "\"kNN\"", "]", ":", "\n", "            ", "raise", "ValueError", "(", "\"Method '%s' is not defined\"", "%", "method", ")", "\n", "\n", "", "ndim", "=", "len", "(", "self", ".", "grid", ")", "\n", "xi", "=", "_ndim_coords_from_arrays", "(", "xi", ",", "ndim", "=", "ndim", ")", "\n", "if", "xi", ".", "shape", "[", "-", "1", "]", "!=", "len", "(", "self", ".", "grid", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"The requested sample points xi have dimension \"", "\n", "\"%d, but this RegularGridInterpolator has \"", "\n", "\"dimension %d\"", "%", "(", "xi", ".", "shape", "[", "1", "]", ",", "ndim", ")", ")", "\n", "\n", "", "xi_shape", "=", "xi", ".", "shape", "\n", "xi", "=", "xi", ".", "reshape", "(", "-", "1", ",", "xi_shape", "[", "-", "1", "]", ")", "\n", "\n", "if", "self", ".", "bounds_error", ":", "\n", "            ", "for", "i", ",", "p", "in", "enumerate", "(", "xi", ".", "T", ")", ":", "\n", "                ", "if", "not", "np", ".", "logical_and", "(", "np", ".", "all", "(", "self", ".", "grid", "[", "i", "]", "[", "0", "]", "<=", "p", ")", ",", "\n", "np", ".", "all", "(", "p", "<=", "self", ".", "grid", "[", "i", "]", "[", "-", "1", "]", ")", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\"One of the requested xi is out of bounds \"", "\n", "\"in dimension %d\"", "%", "i", ")", "\n", "\n", "", "", "", "indices", ",", "norm_distances", ",", "out_of_bounds", "=", "self", ".", "_find_indices", "(", "xi", ".", "T", ")", "\n", "if", "method", "==", "\"linear\"", ":", "\n", "            ", "result", "=", "self", ".", "_evaluate_linear", "(", "indices", ",", "\n", "norm_distances", ",", "\n", "out_of_bounds", ")", "\n", "", "elif", "method", "==", "\"nearest\"", ":", "\n", "            ", "result", "=", "self", ".", "_evaluate_nearest", "(", "indices", ",", "\n", "norm_distances", ",", "\n", "out_of_bounds", ")", "\n", "", "elif", "method", "==", "\"kNN\"", ":", "\n", "            ", "result", "=", "self", ".", "_evaluate_NN", "(", "indices", ",", "norm_distances", ")", "\n", "\n", "", "if", "not", "self", ".", "bounds_error", "and", "self", ".", "fill_value", "is", "not", "None", ":", "\n", "            ", "result", "[", "out_of_bounds", "]", "=", "self", ".", "fill_value", "\n", "\n", "", "return", "result", ".", "reshape", "(", "xi_shape", "[", ":", "-", "1", "]", "+", "self", ".", "values", ".", "shape", "[", "ndim", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.regular_grid_interpolator.RegularGridInterpolator._evaluate_linear": [[204, 218], ["itertools.product", "zip", "slice", "numpy.where", "numpy.asarray", "len"], "methods", ["None"], ["", "def", "_evaluate_linear", "(", "self", ",", "indices", ",", "norm_distances", ",", "out_of_bounds", ")", ":", "\n", "# slice for broadcasting over trailing dimensions in self.values", "\n", "        ", "vslice", "=", "(", "slice", "(", "None", ")", ",", ")", "+", "(", "None", ",", ")", "*", "(", "self", ".", "values", ".", "ndim", "-", "len", "(", "indices", ")", ")", "\n", "\n", "# find relevant values", "\n", "# each i and i+1 represents a edge", "\n", "edges", "=", "itertools", ".", "product", "(", "*", "[", "[", "i", ",", "i", "+", "1", "]", "for", "i", "in", "indices", "]", ")", "\n", "values", "=", "0.", "\n", "for", "edge_indices", "in", "edges", ":", "\n", "            ", "weight", "=", "1.", "\n", "for", "ei", ",", "i", ",", "yi", "in", "zip", "(", "edge_indices", ",", "indices", ",", "norm_distances", ")", ":", "\n", "                ", "weight", "*=", "np", ".", "where", "(", "ei", "==", "i", ",", "1", "-", "yi", ",", "yi", ")", "\n", "", "values", "+=", "np", ".", "asarray", "(", "self", ".", "values", "[", "edge_indices", "]", ")", "*", "weight", "[", "vslice", "]", "\n", "", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.regular_grid_interpolator.RegularGridInterpolator._evaluate_nearest": [[219, 224], ["zip", "idx_res.append", "numpy.where", "tuple"], "methods", ["None"], ["", "def", "_evaluate_nearest", "(", "self", ",", "indices", ",", "norm_distances", ",", "out_of_bounds", ")", ":", "\n", "        ", "idx_res", "=", "[", "]", "\n", "for", "i", ",", "yi", "in", "zip", "(", "indices", ",", "norm_distances", ")", ":", "\n", "            ", "idx_res", ".", "append", "(", "np", ".", "where", "(", "yi", "<=", ".5", ",", "i", ",", "i", "+", "1", ")", ")", "\n", "", "return", "self", ".", "values", "[", "tuple", "(", "idx_res", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.regular_grid_interpolator.RegularGridInterpolator._evaluate_NN": [[225, 251], ["zip", "numpy.zeros", "numpy.array", "range", "numpy.sum", "numpy.array.append", "numpy.sum", "numpy.where", "len", "list", "len"], "methods", ["None"], ["", "def", "_evaluate_NN", "(", "self", ",", "indices", ",", "norm_distances", ")", ":", "\n", "        ", "idx_res", "=", "[", "]", "\n", "for", "i", ",", "yi", "in", "zip", "(", "indices", ",", "norm_distances", ")", ":", "\n", "            ", "idx_res", ".", "append", "(", "np", ".", "where", "(", "yi", "<=", ".5", ",", "i", ",", "i", "+", "1", ")", ")", "\n", "\n", "# Prepare array to store votes", "\n", "", "votes", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "idx_res", ")", "*", "2", "+", "1", ",", "len", "(", "idx_res", "[", "0", "]", ")", ",", "\n", "self", ".", "values", ".", "shape", "[", "-", "1", "]", ")", ",", "\n", "dtype", "=", "self", ".", "values", ".", "dtype", ")", "\n", "\n", "vc", "=", "0", "\n", "votes", "[", "vc", "]", "=", "self", ".", "values", "[", "idx_res", "]", "\n", "idx_res", "=", "np", ".", "array", "(", "idx_res", ")", "\n", "for", "i", "in", "range", "(", "idx_res", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "k", "in", "(", "-", "1", ",", "1", ")", ":", "\n", "                ", "vc", "+=", "1", "\n", "idx_res", "[", "i", "]", "+=", "k", "\n", "idx_res", "[", "idx_res", "<", "0", "]", "=", "0", "\n", "idx_res", "[", "idx_res", ">", "self", ".", "grid", "[", "i", "]", ".", "size", "-", "1", "]", "=", "self", ".", "grid", "[", "i", "]", ".", "size", "-", "1", "\n", "votes", "[", "vc", "]", "=", "self", ".", "values", "[", "list", "(", "idx_res", ")", "]", "\n", "idx_res", "[", "i", "]", "-=", "k", "\n", "\n", "# Sum together and normalize", "\n", "", "", "votes", "=", "np", ".", "sum", "(", "votes", ",", "axis", "=", "0", ")", "\n", "votes", "/=", "np", ".", "sum", "(", "votes", ",", "axis", "=", "-", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "return", "votes", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.regular_grid_interpolator.RegularGridInterpolator._find_indices": [[252, 271], ["numpy.zeros", "zip", "indices.append", "norm_distances.append", "numpy.searchsorted"], "methods", ["None"], ["", "def", "_find_indices", "(", "self", ",", "xi", ")", ":", "\n", "# find relevant edges between which xi are situated", "\n", "        ", "indices", "=", "[", "]", "\n", "# compute distance to lower edge in unity units", "\n", "norm_distances", "=", "[", "]", "\n", "# check for out of bounds xi", "\n", "out_of_bounds", "=", "np", ".", "zeros", "(", "(", "xi", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "bool", ")", "\n", "# iterate through dimensions", "\n", "for", "x", ",", "grid", "in", "zip", "(", "xi", ",", "self", ".", "grid", ")", ":", "\n", "            ", "i", "=", "np", ".", "searchsorted", "(", "grid", ",", "x", ")", "-", "1", "\n", "i", "[", "i", "<", "0", "]", "=", "0", "\n", "i", "[", "i", ">", "grid", ".", "size", "-", "2", "]", "=", "grid", ".", "size", "-", "2", "\n", "indices", ".", "append", "(", "i", ")", "\n", "norm_distances", ".", "append", "(", "(", "x", "-", "grid", "[", "i", "]", ")", "/", "\n", "(", "grid", "[", "i", "+", "1", "]", "-", "grid", "[", "i", "]", ")", ")", "\n", "if", "not", "self", ".", "bounds_error", ":", "\n", "                ", "out_of_bounds", "+=", "x", "<", "grid", "[", "0", "]", "\n", "out_of_bounds", "+=", "x", ">", "grid", "[", "-", "1", "]", "\n", "", "", "return", "indices", ",", "norm_distances", ",", "out_of_bounds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.__init__": [[65, 103], ["queue.Queue"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_queue_size", ",", "image_pair_loader", ",", "entry_func", "=", "None", ",", "\n", "entry_func_kw", "=", "None", ",", "exit_func", "=", "None", ",", "exit_func_kw", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            max_queue_size:    Int, the maximum number of ImagePair objects\n                               to store in the queue at a given time\n            image_pair_loader: The ImagePairLoader object from which images are\n                               fetched.\n            entry_func:        String giving name of method to call on the\n                               ImagePair object at queue entry time.\n            entry_func_kw:     Dict, keyword arguments to supply to entry_func\n            exit_func:         String giving name of method to call on the\n                               ImagePair object at queue exit time.\n            exit_func_kw:      Dict, keyword arguments to supply to exit_func\n        \"\"\"", "\n", "# Reference Queue and ImagePairLoader objects", "\n", "self", ".", "queue", "=", "Queue", "(", "maxsize", "=", "max_queue_size", ")", "\n", "self", ".", "image_pair_loader", "=", "image_pair_loader", "\n", "\n", "# Initialize probability of loading a new (not currently in queue)", "\n", "# image to 1.0 (queue is empty at first anyway)", "\n", "self", ".", "load_new_prob", "=", "1.0", "\n", "\n", "# Call the entry func when an image is added to the queue and the exit", "\n", "# func when the image leaves the queue", "\n", "self", ".", "entry_func", "=", "(", "entry_func", ",", "entry_func_kw", "or", "{", "}", ")", "\n", "self", ".", "exit_func", "=", "(", "exit_func", ",", "exit_func_kw", "or", "{", "}", ")", "\n", "\n", "# Store reference to all running threads", "\n", "self", ".", "threads", "=", "[", "]", "\n", "\n", "# Store the number of times each image identifier is currently in the queue", "\n", "self", ".", "items_in_queue", "=", "0", "\n", "self", ".", "_last", "=", "0", "\n", "self", ".", "no_new_counter", "=", "0", "\n", "\n", "# Reference to images not in queue and IDs in queue", "\n", "self", ".", "num_times_in_queue", "=", "{", "image", ":", "0", "for", "image", "in", "self", ".", "image_pair_loader", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.load_new_prob": [[108, 111], ["numpy.clip"], "methods", ["None"], ["", "@", "load_new_prob", ".", "setter", "\n", "def", "load_new_prob", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_load_new_prob", "=", "np", ".", "clip", "(", "value", ",", "0.05", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.set_entry_func": [[112, 114], ["None"], "methods", ["None"], ["", "def", "set_entry_func", "(", "self", ",", "func_str", ",", "func_kw", "=", "None", ")", ":", "\n", "        ", "self", ".", "entry_func", "=", "(", "func_str", ",", "func_kw", "or", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.set_exit_func": [[115, 117], ["None"], "methods", ["None"], ["", "def", "set_exit_func", "(", "self", ",", "func_str", ",", "func_kw", "=", "None", ")", ":", "\n", "        ", "self", ".", "exit_func", "=", "(", "func_str", ",", "func_kw", "or", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.wait_N": [[118, 128], ["time.sleep"], "methods", ["None"], ["", "def", "wait_N", "(", "self", ",", "N", ")", ":", "\n", "        ", "\"\"\"\n        Sleep until N images has been added to the queue\n\n        Args:\n            N: Int, number of images to wait for\n        \"\"\"", "\n", "cur", "=", "self", ".", "items_in_queue", "\n", "while", "self", ".", "items_in_queue", "<", "cur", "+", "N", "-", "1", ":", "\n", "            ", "time", ".", "sleep", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get": [[129, 170], ["image_queue.ImageQueue.queue.get", "image_queue.ImageQueue.wait_N", "getattr"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.wait_N"], ["", "", "@", "contextmanager", "\n", "def", "get", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Context manager method pulling an image from the queue and yielding it\n        At yield return time the exit_func is called upon the image unless it\n        has another reference later in the queue\n\n        yields:\n            an ImagePair from the queue\n        \"\"\"", "\n", "if", "self", ".", "items_in_queue", "<", "0.1", "*", "self", ".", "queue", ".", "maxsize", ":", "\n", "# If queue is almost empty, halt the main thread a bit", "\n", "            ", "self", ".", "wait_N", "(", "N", "=", "3", ")", "\n", "\n", "# Get the image from the queue", "\n", "", "image", "=", "self", ".", "queue", ".", "get", "(", ")", "\n", "\n", "# Check if too high new_prob", "\n", "if", "self", ".", "_last", ":", "\n", "            ", "diff", "=", "self", ".", "items_in_queue", "-", "self", ".", "_last", "\n", "if", "diff", ">", "0", "or", "self", ".", "items_in_queue", ">=", "self", ".", "queue", ".", "maxsize", "-", "1", ":", "\n", "# If queue is increasing in size, increase load new prob", "\n", "                ", "self", ".", "load_new_prob", "*=", "1.05", "\n", "", "elif", "diff", "<", "0", ":", "\n", "# If queue is decreasing in size, decrease load new prob", "\n", "                ", "self", ".", "load_new_prob", "*=", "0.95", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "_last", "=", "self", ".", "items_in_queue", "\n", "\n", "# Yield back", "\n", "", "yield", "image", "\n", "\n", "# Update reference attributes", "\n", "self", ".", "items_in_queue", "-=", "1", "\n", "self", ".", "num_times_in_queue", "[", "image", "]", "-=", "1", "\n", "\n", "# Call exit function on the object", "\n", "if", "self", ".", "num_times_in_queue", "[", "image", "]", "==", "0", ":", "\n", "# Unload if last in the queue", "\n", "            ", "getattr", "(", "image", ",", "self", ".", "exit_func", "[", "0", "]", ")", "(", "**", "self", ".", "exit_func", "[", "1", "]", ")", "\n", "image", ".", "load_state", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.start": [[171, 183], ["range", "threading.Event", "threading.Thread", "threading.Thread.start", "image_queue.ImageQueue.threads.append"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.start"], ["", "", "def", "start", "(", "self", ",", "n_threads", "=", "3", ")", ":", "\n", "        ", "\"\"\"\n        Start populating the queue in n_threads\n\n        Args:\n            n_threads: Number of threads to spin up\n        \"\"\"", "\n", "for", "_", "in", "range", "(", "n_threads", ")", ":", "\n", "            ", "stop_event", "=", "Event", "(", ")", "\n", "thread", "=", "Thread", "(", "target", "=", "_start", ",", "args", "=", "(", "self", ",", "stop_event", ")", ")", "\n", "thread", ".", "start", "(", ")", "\n", "self", ".", "threads", ".", "append", "(", "(", "thread", ",", "stop_event", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.stop": [[184, 198], ["print", "enumerate", "print", "event.set", "print", "t.join", "len", "len"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "", "def", "stop", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Stop populating the queue by invoking the stop event on all threads and\n        wait for them to terminate.\n        \"\"\"", "\n", "print", "(", "\"Stopping %i threads\"", "%", "len", "(", "self", ".", "threads", ")", ")", "\n", "for", "_", ",", "event", "in", "self", ".", "threads", ":", "\n", "# Make sure no threads keep working after next addition to the Q", "\n", "            ", "event", ".", "set", "(", ")", "\n", "", "for", "i", ",", "(", "t", ",", "_", ")", "in", "enumerate", "(", "self", ".", "threads", ")", ":", "\n", "# Wait for the threads to stop", "\n", "            ", "print", "(", "\"   %i/%i\"", "%", "(", "i", "+", "1", ",", "len", "(", "self", ".", "threads", ")", ")", ",", "end", "=", "\"\\r\"", ",", "flush", "=", "True", ")", "\n", "t", ".", "join", "(", ")", "\n", "", "print", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.unique_in_queue": [[199, 206], ["sum", "bool", "image_queue.ImageQueue.num_times_in_queue.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "unique_in_queue", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            Int, the current number of unique images in the queue\n        \"\"\"", "\n", "return", "sum", "(", "[", "bool", "(", "m", ")", "for", "m", "in", "self", ".", "num_times_in_queue", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.await_full": [[207, 216], ["print", "time.sleep"], "methods", ["None"], ["", "def", "await_full", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Halt main thread until queue object is populated to its max capacity\n        \"\"\"", "\n", "while", "self", ".", "items_in_queue", "<", "self", ".", "queue", ".", "maxsize", ":", "\n", "            ", "print", "(", "\"   Data queue being populated %i/%i\"", "%", "(", "self", ".", "items_in_queue", ",", "\n", "self", ".", "queue", ".", "maxsize", ")", ",", "\n", "end", "=", "'\\r'", ",", "flush", "=", "True", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue._populate": [[217, 254], ["image_queue.ImageQueue.queue.put", "bool", "getattr", "numpy.random.rand", "getattr", "numpy.random.randint", "len"], "methods", ["None"], ["", "", "def", "_populate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Puts a random image into the queue. The ImagePair is either taken from\n        the ImagePairLoader in an un-loaded state or from the already loaded,\n        processed images stored in the current queue.\n\n        This method should be continuously invoked from one of more threads\n        to maintain a populated queue.\n        \"\"\"", "\n", "# With load_new_prob probability we chose not to reload a new image", "\n", "load_new", "=", "np", ".", "random", ".", "rand", "(", ")", "<", "self", ".", "load_new_prob", "or", "(", "self", ".", "unique_in_queue", "<", "0.2", "*", "self", ".", "queue", ".", "maxsize", ")", "\n", "\n", "# Pick random image", "\n", "found", "=", "False", "\n", "while", "not", "found", ":", "\n", "            ", "image", "=", "self", ".", "image_pair_loader", ".", "images", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ".", "image_pair_loader", ")", ")", "]", "\n", "already_loaded", "=", "bool", "(", "self", ".", "num_times_in_queue", "[", "image", "]", ")", "\n", "found", "=", "load_new", "!=", "already_loaded", "\n", "\n", "# Increment the image counter", "\n", "", "self", ".", "num_times_in_queue", "[", "image", "]", "+=", "1", "\n", "\n", "# If the image is not currently loaded, invoke the entry function", "\n", "if", "getattr", "(", "image", ",", "\"load_state\"", ",", "None", ")", "!=", "self", ".", "entry_func", "[", "0", "]", ":", "\n", "# Set load_state so that future calls dont try to load and", "\n", "# preprocess again", "\n", "            ", "image", ".", "load_state", "=", "self", ".", "entry_func", "[", "0", "]", "\n", "\n", "# Call entry function", "\n", "getattr", "(", "image", ",", "self", ".", "entry_func", "[", "0", "]", ")", "(", "**", "self", ".", "entry_func", "[", "1", "]", ")", "\n", "\n", "# Add it to the queue, block indefinitely until spot is free", "\n", "", "self", ".", "queue", ".", "put", "(", "image", ",", "block", "=", "True", ",", "timeout", "=", "None", ")", "\n", "\n", "# Increment in-queue counter", "\n", "self", ".", "items_in_queue", "+=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue._start": [[8, 21], ["stop_event.is_set", "queue._populate"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue._populate"], ["def", "_start", "(", "queue", ",", "stop_event", ")", ":", "\n", "    ", "\"\"\"\n    Thread target function. Starts the ImageQueue._populate function which runs\n    indefinitely until stop_event is set.\n\n    Args:\n        queue:      A reference to the ImageQueue object onto which the threads\n                    apply.\n        stop_event: An even that can be set in the main thread to stop\n                    population of the ImageQueue\n    \"\"\"", "\n", "while", "not", "stop_event", ".", "is_set", "(", ")", ":", "\n", "        ", "queue", ".", "_populate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.__init__": [[23, 111], ["pathlib.Path().absolute", "image_pair_loader.ImagePairLoader.get_id_to_images_dict", "mpunet.logging.ScreenLogger", "image_pair_loader.ImagePairLoader.get_image_paths", "image_pair_loader.ImagePairLoader.get_image_objects", "OSError", "OSError", "image_pair_loader.ImagePairLoader._log", "pathlib.Path", "image_pair_loader.ImagePairLoader.get_label_paths"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_id_to_images_dict", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_image_paths", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_image_objects", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader._log", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_label_paths"], ["def", "__init__", "(", "self", ",", "\n", "base_dir", "=", "\"./\"", ",", "\n", "img_subdir", "=", "\"images\"", ",", "\n", "label_subdir", "=", "\"labels\"", ",", "\n", "logger", "=", "None", ",", "\n", "sample_weight", "=", "1.0", ",", "\n", "bg_class", "=", "0", ",", "\n", "predict_mode", "=", "False", ",", "\n", "initialize_empty", "=", "False", ",", "\n", "no_log", "=", "False", ",", "\n", "identifier", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the ImagePairLoader object from all .nii files in a folder\n        or pair of folders if labels are also specified.\n\n        If initialize_empty=False, the following actions are taken immediately\n        on initialization:\n            - All .nii/.nii.gz image files are found in base_dir/img_subdir\n            - Unless predict_mode=True, finds all .nii/.nii.gz label files in\n              base_dir/label_subdir\n            - ImagePair objects are established for all images/image-label\n              pairs. Not that since ImagePairs do not eagerly load data,\n              the ImagePairLoader also does not immediately load data into mem\n\n        If initialize_empty=True, the class is initialized but no images are\n        loaded. Images can be manually added through the add_image and\n        add_files methods.\n\n        Args:\n            base_dir:           A path to a directory storing the 'img_subdir'\n                                and 'label_subdir' sub-folders\n            img_subdir:         Name of sub-folder storing .nii images files\n            label_subdir:       Name of sub-folder storing .nii labels files\n            logger:             mpunet logger object\n            sample_weight:      A float giving a global sample weight assigned\n                                to all images loaded by the ImagePairLoader\n            bg_class            Background class integer to pass to all\n                                ImagePair objects. Usually int(0).\n            predict_mode:       Boolean whether labels exist for the images.\n                                If True, the labels are assumed stored in the\n                                label_subdir with names identical to the images\n            initialize_empty:   Boolean, if True do not load any images at init\n                                This may be useful for manually assigning\n                                individual image files to the object.\n            no_log:             Boolean, whether to not log to screen/file\n            identifier:         Optional name for the dataset\n            **kwargs:           Other keywords arguments\n        \"\"\"", "\n", "self", ".", "logger", "=", "logger", "if", "logger", "is", "not", "None", "else", "ScreenLogger", "(", ")", "\n", "\n", "# Set absolute paths to main folder, image folder and label folder", "\n", "self", ".", "data_dir", "=", "Path", "(", "base_dir", ")", ".", "absolute", "(", ")", "\n", "self", ".", "images_path", "=", "self", ".", "data_dir", "/", "img_subdir", "\n", "self", ".", "identifier", "=", "self", ".", "data_dir", ".", "name", "\n", "\n", "# Labels included?", "\n", "self", ".", "predict_mode", "=", "predict_mode", "or", "not", "label_subdir", "\n", "if", "not", "predict_mode", ":", "\n", "            ", "self", ".", "labels_path", "=", "self", ".", "data_dir", "/", "label_subdir", "\n", "", "else", ":", "\n", "            ", "self", ".", "labels_path", "=", "None", "\n", "\n", "# Load images unless initialize_empty is specified", "\n", "", "if", "not", "initialize_empty", ":", "\n", "# Get paths to all images", "\n", "            ", "self", ".", "image_paths", "=", "self", ".", "get_image_paths", "(", ")", "\n", "\n", "if", "not", "predict_mode", ":", "\n", "# Get paths to labels if included", "\n", "                ", "self", ".", "label_paths", "=", "self", ".", "get_label_paths", "(", "img_subdir", ",", "\n", "label_subdir", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "label_paths", "=", "None", "\n", "\n", "# Load all nii objects", "\n", "", "self", ".", "images", "=", "self", ".", "get_image_objects", "(", "sample_weight", ",", "bg_class", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "images", "=", "[", "]", "\n", "\n", "", "if", "not", "initialize_empty", "and", "not", "self", ".", "image_paths", ":", "\n", "            ", "raise", "OSError", "(", "\"No image files found at %s.\"", "%", "self", ".", "images_path", ")", "\n", "", "if", "not", "initialize_empty", "and", "not", "predict_mode", "and", "not", "self", ".", "label_paths", ":", "\n", "            ", "raise", "OSError", "(", "\"No label files found at %s.\"", "%", "self", ".", "labels_path", ")", "\n", "\n", "", "self", ".", "_id_to_image", "=", "self", ".", "get_id_to_images_dict", "(", ")", "\n", "if", "not", "no_log", ":", "\n", "            ", "self", ".", "_log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.__str__": [[112, 115], ["len"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"ImagePairLoader(id={}, images={}, data_dir={})\"", ".", "format", "(", "\n", "self", ".", "identifier", ",", "len", "(", "self", ")", ",", "self", ".", "data_dir", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.__repr__": [[117, 119], ["image_pair_loader.ImagePairLoader.__str__"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.__getitem__": [[120, 122], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "images", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.__iter__": [[123, 126], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "im", "in", "self", ".", "images", ":", "\n", "            ", "yield", "im", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.__len__": [[127, 129], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader._log": [[130, 134], ["image_pair_loader.ImagePairLoader.logger", "image_pair_loader.ImagePairLoader.logger", "str"], "methods", ["None"], ["", "def", "_log", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "(", "str", "(", "self", ")", ")", "\n", "self", ".", "logger", "(", "\"--- Image subdir: %s\\n--- Label subdir: %s\"", "%", "(", "self", ".", "images_path", ",", "\n", "self", ".", "labels_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.load": [[135, 139], ["image.load"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "\"\"\" Invokes the 'load' method on all ImagePairs \"\"\"", "\n", "for", "image", "in", "self", ":", "\n", "            ", "image", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.unload": [[140, 144], ["image.unload"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.unload"], ["", "", "def", "unload", "(", "self", ")", ":", "\n", "        ", "\"\"\" Invokes the 'unload' method on all ImagePairs \"\"\"", "\n", "for", "image", "in", "self", ":", "\n", "            ", "image", ".", "unload", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.id_to_image": [[145, 152], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "id_to_image", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            A dictionary of image IDs pointing to image objects\n        \"\"\"", "\n", "return", "self", ".", "_id_to_image", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_id_to_images_dict": [[153, 155], ["None"], "methods", ["None"], ["", "def", "get_id_to_images_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "image", ".", "identifier", ":", "image", "for", "image", "in", "self", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.n_loaded": [[156, 159], ["sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_loaded", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "[", "image", ".", "is_loaded", "for", "image", "in", "self", ".", "images", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_by_id": [[160, 171], ["None"], "methods", ["None"], ["", "def", "get_by_id", "(", "self", ",", "image_id", ")", ":", "\n", "        ", "\"\"\"\n        Get a specific ImagePair by its string identifier\n\n        Args:\n            image_id: String identifier of an ImagePair\n\n        Returns:\n            An ImagePair\n        \"\"\"", "\n", "return", "self", ".", "id_to_image", "[", "image_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_random": [[172, 199], ["len", "image_pair_loader.ImagePairLoader.queue.get", "returned.append", "returned.append", "numpy.random.randint", "len"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["", "def", "get_random", "(", "self", ",", "N", "=", "1", ",", "unique", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Return N random images, with or without re-sampling\n\n        Args:\n            N:      Int, number of randomly sampled images to return\n            unique: Bool, whether the sampled images should be all unique\n\n        Returns:\n            A list of ImagePair objects\n        \"\"\"", "\n", "returned", "=", "[", "]", "\n", "while", "len", "(", "returned", ")", "<", "N", ":", "\n", "            ", "if", "self", ".", "queue", ":", "\n", "                ", "with", "self", ".", "queue", ".", "get", "(", ")", "as", "image", ":", "\n", "                    ", "if", "unique", "and", "image", "in", "returned", ":", "\n", "                        ", "continue", "\n", "", "else", ":", "\n", "                        ", "returned", ".", "append", "(", "image", ")", "\n", "yield", "image", "\n", "", "", "", "else", ":", "\n", "                ", "image", "=", "self", ".", "images", "[", "np", ".", "random", ".", "randint", "(", "len", "(", "self", ")", ")", "]", "\n", "if", "unique", "and", "image", "in", "returned", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "returned", ".", "append", "(", "image", ")", "\n", "yield", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader._get_paths_from_list_file": [[200, 231], ["os.path.exists", "OSError", "open", "path.strip.strip.strip", "images.append"], "methods", ["None"], ["", "", "", "", "def", "_get_paths_from_list_file", "(", "self", ",", "base_path", ",", "fname", "=", "\"LIST_OF_FILES.txt\"", ")", ":", "\n", "        ", "\"\"\"\n        Loads a set of paths pointing to .nii files in 'base_path'.\n        This method is used in the rare cases that images are not directly\n        stored in self.images_path or self.labels_path but those paths stores\n        a file named 'fname' storing 1 absolute path per line pointing to the\n        images to load.\n\n        Args:\n            base_path: A path to a folder\n            fname:     The filename of the file at 'base_path' that stores the\n                       paths to return\n\n        Returns:\n            A list of path strings\n        \"\"\"", "\n", "# Check if a file listing paths exists instead of actual files at the", "\n", "# image sub folder path", "\n", "list_file_path", "=", "base_path", "/", "fname", "\n", "images", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "exists", "(", "list_file_path", ")", ":", "\n", "            ", "with", "open", "(", "list_file_path", ",", "\"r\"", ")", "as", "in_f", ":", "\n", "                ", "for", "path", "in", "in_f", ":", "\n", "                    ", "path", "=", "path", ".", "strip", "(", ")", "\n", "if", "not", "path", ":", "\n", "                        ", "continue", "\n", "", "images", ".", "append", "(", "path", ")", "\n", "", "", "", "else", ":", "\n", "            ", "raise", "OSError", "(", "\"File '%s' does not exist. Did you specify \"", "\n", "\"the correct img_subdir?\"", "%", "list_file_path", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_image_paths": [[232, 245], ["sorted", "glob.glob", "image_pair_loader.ImagePairLoader._get_paths_from_list_file", "pathlib.Path", "str"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader._get_paths_from_list_file"], ["", "def", "get_image_paths", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a list of paths to all image files in the self.images_path folder\n\n        Returns:\n            A list of pathlib.Path\n        \"\"\"", "\n", "images", "=", "sorted", "(", "glob", ".", "glob", "(", "str", "(", "self", ".", "images_path", "/", "\"*.nii*\"", ")", ")", ")", "\n", "if", "not", "images", ":", "\n", "# Try to load from a file listing paths at the location", "\n", "# This is sometimes a format created by the cv_split.py script", "\n", "            ", "images", "=", "self", ".", "_get_paths_from_list_file", "(", "self", ".", "images_path", ")", "\n", "", "return", "[", "Path", "(", "p", ")", "for", "p", "in", "images", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_label_paths": [[246, 266], ["any", "ValueError", "str"], "methods", ["None"], ["", "def", "get_label_paths", "(", "self", ",", "img_subdir", ",", "label_subdir", ")", ":", "\n", "        ", "\"\"\"\n        Return a list of paths to all label files in the self.labels_path folder\n        The label paths are assumed to be identical to the image paths with the\n        image subdir name replaced by the label subdir name.\n\n        Args:\n            img_subdir:   String, name of the image sub-folder\n            label_subdir: String, name of the label sub-folder\n\n        Returns:\n            A list of pathlib.Path\n        \"\"\"", "\n", "if", "any", "(", "[", "img_subdir", "not", "in", "str", "(", "p", ")", "for", "p", "in", "self", ".", "image_paths", "]", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Mismatch between image paths and specified \"", "\n", "\"img_subdir. The subdir was not found in one or\"", "\n", "\" more image paths - Do the paths in \"", "\n", "\"LIST_OF_FILES.txt point to a subdir of name \"", "\n", "\"'%s'?\"", "%", "img_subdir", ")", "\n", "", "return", "[", "p", ".", "parent", ".", "parent", "/", "label_subdir", "/", "p", ".", "name", "for", "p", "in", "self", ".", "image_paths", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_image_objects": [[267, 297], ["zip", "image_pair.ImagePair", "image_objects.append", "image_pair.ImagePair", "image_objects.append"], "methods", ["None"], ["", "def", "get_image_objects", "(", "self", ",", "sample_weight", ",", "bg_class", ")", ":", "\n", "        ", "\"\"\"\n        Initialize all ImagePair objects from paths at self.image_paths and\n        self.label_paths (if labels exist). Note that data is not loaded\n        eagerly.\n\n        Args:\n            sample_weight: A float giving the weight to assign to the ImagePair\n            bg_class:      Background (integer) class\n\n        Returns:\n            A list of initialized ImagePairs\n        \"\"\"", "\n", "image_objects", "=", "[", "]", "\n", "if", "self", ".", "predict_mode", ":", "\n", "            ", "for", "img_path", "in", "self", ".", "image_paths", ":", "\n", "                ", "image", "=", "ImagePair", "(", "img_path", ",", "\n", "sample_weight", "=", "sample_weight", ",", "\n", "bg_class", "=", "bg_class", ",", "\n", "logger", "=", "self", ".", "logger", ")", "\n", "image_objects", ".", "append", "(", "image", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "img_path", ",", "label_path", "in", "zip", "(", "self", ".", "image_paths", ",", "self", ".", "label_paths", ")", ":", "\n", "                ", "image", "=", "ImagePair", "(", "img_path", ",", "label_path", ",", "\n", "sample_weight", "=", "sample_weight", ",", "\n", "bg_class", "=", "bg_class", ",", "\n", "logger", "=", "self", ".", "logger", ")", "\n", "image_objects", ".", "append", "(", "image", ")", "\n", "\n", "", "", "return", "image_objects", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.add_image": [[298, 308], ["image_pair_loader.ImagePairLoader.images.append", "image_pair_loader.ImagePairLoader.get_id_to_images_dict"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_id_to_images_dict"], ["", "def", "add_image", "(", "self", ",", "image_pair", ")", ":", "\n", "        ", "\"\"\"\n        Add a single ImagePair object to the ImagePairLoader\n\n        Args:\n            image_pair: An ImagePair\n        \"\"\"", "\n", "self", ".", "images", ".", "append", "(", "image_pair", ")", "\n", "# Update ID dict", "\n", "self", ".", "_id_to_image", "=", "self", ".", "get_id_to_images_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.add_images": [[309, 328], ["image_pair_loader.ImagePairLoader.get_id_to_images_dict", "list"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_id_to_images_dict"], ["", "def", "add_images", "(", "self", ",", "image_pair_loader", ")", ":", "\n", "        ", "\"\"\"\n        Add a set of ImagePair objects to the ImagePairLoader. Input can be\n        either a different ImagePairLoader object or a list of ImagePairs.\n\n        Args:\n            image_pair_loader: ImagePairLoader or list of ImagePairs\n\n        Returns:\n            self\n        \"\"\"", "\n", "try", ":", "\n", "            ", "self", ".", "images", "+=", "image_pair_loader", ".", "images", "\n", "", "except", "AttributeError", ":", "\n", "# Passed as list?", "\n", "            ", "self", ".", "images", "+=", "list", "(", "image_pair_loader", ")", "\n", "# Update ID dict", "\n", "", "self", ".", "_id_to_image", "=", "self", ".", "get_id_to_images_dict", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_maximum_real_dim": [[329, 339], ["numpy.max", "image_pair_loader.ImagePairLoader.get_maximum_real_dim"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.get_maximum_real_dim"], ["", "def", "get_maximum_real_dim", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the longest distance in mm covered by any axis across images\n        of this ImagePairLoader.\n\n        Returns:\n            A float\n        \"\"\"", "\n", "from", "mpunet", ".", "interpolation", ".", "sample_grid", "import", "get_maximum_real_dim", "\n", "return", "np", ".", "max", "(", "[", "get_maximum_real_dim", "(", "f", ".", "image_obj", ")", "for", "f", "in", "self", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair_loader.ImagePairLoader.set_scaler_and_bg_values": [[340, 359], ["image_pair_loader.ImagePairLoader.id_to_image.values", "image.set_bg_value", "image.set_scaler", "image.log_image"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.set_bg_value", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.set_scaler", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.log_image"], ["", "def", "set_scaler_and_bg_values", "(", "self", ",", "bg_value", ",", "scaler", ",", "compute_now", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Loads all images and prepares them for iso-live view interpolation\n        training by performing the following operations on each:\n            1) Loads the image and labels if not already loaded (transparent)\n            2) Define proper background value\n            3) Setting multi-channel scaler\n            4) Setting interpolator object\n\n        Args:\n            bg_value:     See ImagePair.set_bg_value\n            scaler:       See ImagePair.set_scaler\n            compute_now:  TODO\n        \"\"\"", "\n", "# Run over volumes: scale, set interpolator, check for affine", "\n", "for", "image", "in", "self", ".", "id_to_image", ".", "values", "(", ")", ":", "\n", "            ", "image", ".", "set_bg_value", "(", "bg_value", ",", "compute_now", "=", "compute_now", ")", "\n", "image", ".", "set_scaler", "(", "scaler", ",", "compute_now", "=", "compute_now", ")", "\n", "image", ".", "log_image", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.__init__": [[33, 99], ["image_pair.ImagePair._validate_path", "image_pair.ImagePair._get_and_validate_id", "nibabel.load", "int", "mpunet.logging.ScreenLogger", "image_pair.ImagePair._validate_path", "nibabel.load"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair._validate_path", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair._get_and_validate_id", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair._validate_path", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load"], ["def", "__init__", "(", "self", ",", "img_path", ",", "labels_path", "=", "None", ",", "sample_weight", "=", "1.0", ",", "\n", "bg_class", "=", "0", ",", "logger", "=", "None", ",", "im_dtype", "=", "np", ".", "float32", ",", "\n", "lab_dtype", "=", "np", ".", "uint8", ")", ":", "\n", "        ", "\"\"\"\n        Initializes the ImagePair object from two paths to .nii file images\n\n        The following actions are taken immediately on initialization:\n            - Image and label Nibabel objects are created and metadata is\n              loaded, but image data is not yet loaded into memory\n              Loading of data happens automatically at the first reference to\n              the image or label attributes\n            - In identifier name is established (filename minus extension)\n            - Placeholder attributes are created that may be used in methods\n\n        Args:\n            img_path:      Path to a Nifti image file (.nii, .nii.gz)\n            labels_path:   Path to a Nifti image file (.nii, .nii.gz)\n                           Filename must be identical to the img_path filename!\n                           Note: A labels_path can be omitted if no ground\n                           truth label map exists\n            sample_weight: A float value assigning an overall weight to the\n                           image/label pair - used by some optimization schemas\n            bg_class:       The background class integer value, usually 0\n            logger:        A mpunet logger object writing to screen and\n                           /or a logfile on disk\n            im_dtype:      A numpy data type that the image will be cast to\n            lab_dtype:     A numpy data type that the labels will be cast to\n        \"\"\"", "\n", "# Labels included?", "\n", "self", ".", "predict_mode", "=", "not", "labels_path", "\n", "\n", "# Set a weight for all slices fetches from this image", "\n", "# We set value trough property setter to validate input", "\n", "self", ".", "_sample_weight", "=", "None", "\n", "self", ".", "sample_weight", "=", "sample_weight", "\n", "\n", "# Set logger or default print", "\n", "self", ".", "logger", "=", "logger", "if", "logger", "is", "not", "None", "else", "ScreenLogger", "(", ")", "\n", "\n", "# Set image and label paths (absolute)", "\n", "self", ".", "image_path", "=", "self", ".", "_validate_path", "(", "img_path", ")", "\n", "if", "not", "self", ".", "predict_mode", ":", "\n", "            ", "self", ".", "labels_path", "=", "self", ".", "_validate_path", "(", "labels_path", ")", "\n", "\n", "# Validate that the image and label data match and get image identifier", "\n", "", "self", ".", "identifier", "=", "self", ".", "_get_and_validate_id", "(", ")", "\n", "\n", "# Set variables to store loaded image and label information", "\n", "self", ".", "image_obj", "=", "nib", ".", "load", "(", "self", ".", "image_path", ")", "\n", "self", ".", "labels_obj", "=", "None", "\n", "if", "not", "self", ".", "predict_mode", ":", "\n", "            ", "self", ".", "labels_obj", "=", "nib", ".", "load", "(", "self", ".", "labels_path", ")", "\n", "\n", "# Stores the data of the image and labels objects", "\n", "", "self", ".", "_image", "=", "None", "\n", "self", ".", "_labels", "=", "None", "\n", "self", ".", "_scaler", "=", "None", "\n", "self", ".", "_bg_value", "=", "None", "\n", "self", ".", "_bg_class", "=", "int", "(", "bg_class", ")", "\n", "\n", "# ViewInterpolator object initialized with set_interpolator_object", "\n", "self", ".", "_interpolator", "=", "None", "\n", "\n", "# Data types", "\n", "self", ".", "im_dtype", "=", "im_dtype", "\n", "self", ".", "lab_dtype", "=", "lab_dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.__str__": [[100, 103], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"ImagePair(id={}, shape={}, real_shape={}, loaded={})\"", ".", "format", "(", "\n", "self", ".", "identifier", ",", "self", ".", "shape", ",", "self", ".", "real_center", ",", "self", ".", "is_loaded", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.__repr__": [[105, 107], ["image_pair.ImagePair.__str__"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.log_image": [[108, 129], ["image_pair.ImagePair.logger", "numpy.round", "numpy.round", "mpunet.utils.ensure_list_or_tuple", "mpunet.interpolation.sample_grid.get_real_image_size", "mpunet.interpolation.sample_grid.get_pix_dim"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.ensure_list_or_tuple", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_real_image_size", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_pix_dim"], ["", "def", "log_image", "(", "self", ",", "print_calling_method", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Log basic stats for this ImagePair.\n        \"\"\"", "\n", "self", ".", "logger", "(", "\"%s\\n\"", "\n", "\"--- loaded:     %s\\n\"", "\n", "\"--- shape:      %s\\n\"", "\n", "\"--- bg class    %i\\n\"", "\n", "\"--- bg value    %s\\n\"", "\n", "'--- scaler      %s\\n'", "\n", "\"--- real shape: %s\\n\"", "\n", "\"--- pixdim:     %s\"", "%", "(", "\n", "self", ".", "identifier", ",", "\n", "self", ".", "is_loaded", ",", "\n", "self", ".", "shape", ",", "\n", "self", ".", "_bg_class", ",", "\n", "self", ".", "_bg_value", ",", "\n", "ensure_list_or_tuple", "(", "self", ".", "_scaler", ")", "[", "0", "]", ",", "\n", "np", ".", "round", "(", "get_real_image_size", "(", "self", ")", ",", "3", ")", ",", "\n", "np", ".", "round", "(", "get_pix_dim", "(", "self", ")", ",", "3", ")", "\n", ")", ",", "print_calling_method", "=", "print_calling_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair._get_and_validate_id": [[130, 142], ["image_pair.ImagePair.image_path.stem.split", "image_pair.ImagePair.labels_path.stem.split", "ValueError"], "methods", ["None"], ["", "def", "_get_and_validate_id", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Validates if the image identifier and label identifier match.\n        Returns the image identifier.\n        \"\"\"", "\n", "img_id", "=", "self", ".", "image_path", ".", "stem", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "not", "self", ".", "predict_mode", ":", "\n", "            ", "labels_id", "=", "self", ".", "labels_path", ".", "stem", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "img_id", "!=", "labels_id", ":", "\n", "                ", "raise", "ValueError", "(", "\"Image identifier '%s' does not match labels identifier '%s'\"", "\n", "%", "(", "img_id", ",", "labels_id", ")", ")", "\n", "", "", "return", "img_id", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.affine": [[147, 150], ["mpunet.errors.image_errors.ReadOnlyAttributeError"], "methods", ["None"], ["", "@", "affine", ".", "setter", "\n", "def", "affine", "(", "self", ",", "_", ")", ":", "\n", "        ", "raise", "ReadOnlyAttributeError", "(", "\"Manually setting the affine attribute \"", "\n", "\"is not allowed. Initialize a new \"", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.header": [[157, 160], ["mpunet.errors.image_errors.ReadOnlyAttributeError"], "methods", ["None"], ["", "@", "header", ".", "setter", "\n", "def", "header", "(", "self", ",", "_", ")", ":", "\n", "        ", "raise", "ReadOnlyAttributeError", "(", "\"Manually setting the header attribute \"", "\n", "\"is not allowed. Initialize a new \"", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.image": [[178, 181], ["mpunet.errors.image_errors.ReadOnlyAttributeError"], "methods", ["None"], ["", "@", "image", ".", "setter", "\n", "def", "image", "(", "self", ",", "_", ")", ":", "\n", "        ", "raise", "ReadOnlyAttributeError", "(", "\"Manually setting the image attribute \"", "\n", "\"is not allowed. Initialize a new \"", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.labels": [[194, 197], ["mpunet.errors.image_errors.ReadOnlyAttributeError"], "methods", ["None"], ["", "@", "labels", ".", "setter", "\n", "def", "labels", "(", "self", ",", "_", ")", ":", "\n", "        ", "raise", "ReadOnlyAttributeError", "(", "\"Manually setting the labels \"", "\n", "\"attribute is not allowed. \"", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair._validate_path": [[200, 208], ["pathlib.Path", "pathlib.Path.exists", "FileNotFoundError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_validate_path", "(", "path", ")", ":", "\n", "        ", "path", "=", "Path", "(", "path", ")", "\n", "if", "path", ".", "exists", "(", ")", "and", "path", ".", "suffix", "in", "(", "\".nii\"", ",", "\".mat\"", ",", "\".gz\"", ")", ":", "\n", "            ", "return", "path", "\n", "", "else", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\"File '%s' not found or not a \"", "\n", "\".nii or .mat file.\"", "%", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.estimated_memory": [[209, 217], ["len", "pickle.dumps"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "estimated_memory", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Note this will overestimate the memory footprint, actual memory usage\n        will never be above this estimation.\n        \"\"\"", "\n", "import", "pickle", "\n", "return", "len", "(", "pickle", ".", "dumps", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.sample_weight": [[222, 233], ["float", "ValueError", "ValueError", "type"], "methods", ["None"], ["", "@", "sample_weight", ".", "setter", "\n", "def", "sample_weight", "(", "self", ",", "weight", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "weight", "=", "float", "(", "weight", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "ValueError", "(", "\"Sample weight must be a numeric type (got '%s')\"", "\n", "%", "type", "(", "weight", ")", ")", "\n", "", "if", "weight", "<=", "0", "or", "weight", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"Sample weight must be greater than \"", "\n", "\"0 and less than or equal to 1\"", ")", "\n", "", "self", ".", "_sample_weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.center": [[234, 241], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "center", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            The voxel-space center of the image\n        \"\"\"", "\n", "return", "(", "self", ".", "shape", "[", ":", "-", "1", "]", "-", "1", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.real_center": [[242, 249], ["image_pair.ImagePair.affine[].dot"], "methods", ["None"], ["", "@", "property", "\n", "def", "real_center", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            The scanner-space center of the image\n        \"\"\"", "\n", "return", "self", ".", "affine", "[", ":", "3", ",", ":", "3", "]", ".", "dot", "(", "self", ".", "center", ")", "+", "self", ".", "affine", "[", ":", "3", ",", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.shape": [[250, 260], ["numpy.asarray", "len", "numpy.append"], "methods", ["None"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            The voxel shape of the image (always rank 4 with channels axis)\n        \"\"\"", "\n", "s", "=", "np", ".", "asarray", "(", "self", ".", "image_obj", ".", "shape", ")", "\n", "if", "len", "(", "s", ")", "==", "3", ":", "\n", "            ", "s", "=", "np", ".", "append", "(", "s", ",", "1", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.real_shape": [[261, 268], ["mpunet.interpolation.sample_grid.get_real_image_size"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_real_image_size"], ["", "@", "property", "\n", "def", "real_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            The real (physical, scanner-space span) shape of the image\n        \"\"\"", "\n", "return", "get_real_image_size", "(", "self", ".", "image_obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.n_channels": [[269, 272], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "n_channels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "shape", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.bg_class": [[277, 280], ["mpunet.errors.image_errors.ReadOnlyAttributeError"], "methods", ["None"], ["", "@", "bg_class", ".", "setter", "\n", "def", "bg_class", "(", "self", ",", "_", ")", ":", "\n", "        ", "raise", "ReadOnlyAttributeError", "(", "\"Cannot set a new background class. \"", "\n", "\"Initialize a new ImagePair object.\"", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.bg_value": [[288, 291], ["mpunet.errors.image_errors.ReadOnlyAttributeError"], "methods", ["None"], ["", "@", "bg_value", ".", "setter", "\n", "def", "bg_value", "(", "self", ",", "_", ")", ":", "\n", "        ", "raise", "ReadOnlyAttributeError", "(", "\"New background values must be set in the\"", "\n", "\" self.set_bg_value method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.set_bg_value": [[293, 310], ["image_pair.ImagePair.standardize_bg_val", "isinstance", "image_pair.ImagePair._bg_pct_string_to_value"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.standardize_bg_val", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair._bg_pct_string_to_value"], ["", "def", "set_bg_value", "(", "self", ",", "bg_value", ",", "compute_now", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Set a new background value for this ImagePair.\n\n        Args:\n            bg_value:    A value defining the space outside of the image region\n                         bg_value may be a number of string of the format\n                         '[0-100]'pct specifying a percentile value to compute\n                         across the image and use for bg_value.\n            compute_now: If a percentile string was passed, compute the\n                         percentile now (True) or lazily when accessed via\n                         self.bg_value at a later time (False).\n        \"\"\"", "\n", "bg_value", "=", "self", ".", "standardize_bg_val", "(", "bg_value", ")", "\n", "if", "compute_now", "and", "isinstance", "(", "bg_value", "[", "0", "]", ",", "str", ")", ":", "\n", "            ", "bg_value", "=", "self", ".", "_bg_pct_string_to_value", "(", "bg_value", ")", "\n", "", "self", ".", "_bg_value", "=", "bg_value", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.scaler": [[318, 321], ["mpunet.errors.image_errors.ReadOnlyAttributeError"], "methods", ["None"], ["", "@", "scaler", ".", "setter", "\n", "def", "scaler", "(", "self", ",", "_", ")", ":", "\n", "        ", "raise", "ReadOnlyAttributeError", "(", "\"New scalers must be set with the \"", "\n", "\"self.set_scaler method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.set_scaler": [[323, 342], ["mpunet.preprocessing.get_scaler().fit", "mpunet.preprocessing.get_scaler"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.train.trainer.Trainer.fit", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.get_scaler"], ["", "def", "set_scaler", "(", "self", ",", "scaler", ",", "ignore_less_eq", "=", "None", ",", "compute_now", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Sets a scaler on the ImagePair fit to the stored image\n        See mpunet.preprocessing.scaling\n\n        Args:\n            scaler:         A string naming a sklearn scaler type\n            ignore_less_eq: A float or list of floats. Only consider values\n                            above 'ignore_less_eq' in a channel when scaling.\n            compute_now:    Initialize (and load data if not already) the\n                            scaler now. Otherwise, the scaler will be\n                            initialized at access time.\n        \"\"\"", "\n", "if", "compute_now", ":", "\n", "            ", "scaler", "=", "get_scaler", "(", "scaler", "=", "scaler", ",", "\n", "ignore_less_eq", "=", "ignore_less_eq", ")", ".", "fit", "(", "self", ".", "image", ")", "\n", "self", ".", "_scaler", "=", "scaler", "\n", "", "else", ":", "\n", "            ", "self", ".", "_scaler", "=", "(", "scaler", ",", "ignore_less_eq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.apply_scaler": [[343, 349], ["image_pair.ImagePair.scaler.transform"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.preprocessing.scaling.MultiChannelScaler.transform"], ["", "", "def", "apply_scaler", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Apply the stored scaler (channel-wise) to the stored image\n        Note: in-place opperation\n        \"\"\"", "\n", "self", ".", "_image", "=", "self", ".", "scaler", ".", "transform", "(", "self", ".", "image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.interpolator": [[360, 363], ["mpunet.errors.image_errors.ReadOnlyAttributeError"], "methods", ["None"], ["", "@", "interpolator", ".", "setter", "\n", "def", "interpolator", "(", "self", ",", "_", ")", ":", "\n", "        ", "raise", "ReadOnlyAttributeError", "(", "\"Cannot set the interpolator property. \"", "\n", "\"Call self.set_interpolator_with_current\"", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.is_loaded": [[366, 369], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_loaded", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_image", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load": [[370, 380], ["None"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Forces a load on any set attributes in\n            (self.image, self.labels,\n            self.interpolator, self.bg_value, self.scaler)\n        \"\"\"", "\n", "# OBS: Invoking the getter method on these properties invokes a load", "\n", "# No need to store the results!", "\n", "_", "=", "[", "_", "for", "_", "in", "(", "self", ".", "image", ",", "self", ".", "labels", ",", "self", ".", "bg_value", ",", "\n", "self", ".", "scaler", ",", "self", ".", "interpolator", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.loaded_in_context": [[381, 391], ["image_pair.ImagePair.unload", "image_pair.ImagePair.load"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.unload", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load"], ["", "@", "contextmanager", "\n", "def", "loaded_in_context", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Context manager which keeps this ImagePair loaded in the context\n        and unloads it at exit.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "yield", "self", ".", "load", "(", ")", "\n", "", "finally", ":", "\n", "            ", "self", ".", "unload", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.unload": [[392, 412], ["None"], "methods", ["None"], ["", "", "def", "unload", "(", "self", ",", "unload_scaler", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Unloads the ImagePair by un-assigning the image and labels attributes\n        Also clears the currently set interpolator object, as this references\n        the image and label arrays and thus prevents GC.\n\n        Args:\n            unload_scaler: boolean indicating whether or not to also clear the\n                           currently set scaler object. Not clearing this may\n                           be useful if the ImagePair is loaded/unloaded often\n                           (in a data queue for instance), as the scaler\n                           parameters may take time to estimate, but will be\n                           the same across data loads/un-loads of the same\n                           image.\n        \"\"\"", "\n", "self", ".", "_image", "=", "None", "\n", "self", ".", "_labels", "=", "None", "\n", "self", ".", "_interpolator", "=", "None", "\n", "if", "unload_scaler", ":", "\n", "            ", "self", ".", "_scaler", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.get_interpolator_with_current": [[413, 439], ["mpunet.interpolation.view_interpolator.ViewInterpolator", "RuntimeError"], "methods", ["None"], ["", "", "def", "get_interpolator_with_current", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Initialize and return a ViewInterpolator object with references to this\n        ImagePair's image and labels arrays. The interpolator performs linear\n        and nearest interpolation of the two respectively on an arbitrary grid\n        of positions in the real-scanner space (defined by the image affine).\n\n        OBS: Does not perform interpolation in voxel space\n\n        Returns:\n            A ViewInterpolator object for the ImagePair image and labels arrays\n        \"\"\"", "\n", "if", "not", "self", ".", "bg_value", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Cannot get interpolator without a set \"", "\n", "\"background value. Call self.set_bg_value \"", "\n", "\"first.\"", ")", "\n", "# Standardize the bg_value, handles None and False differently from 0", "\n", "# or 0.0 - for None and False the 1st percentile of self.image is used", "\n", "", "if", "not", "self", ".", "predict_mode", ":", "\n", "            ", "labels", "=", "self", ".", "labels", "\n", "", "else", ":", "\n", "            ", "labels", "=", "None", "\n", "", "return", "ViewInterpolator", "(", "self", ".", "image", ",", "labels", ",", "\n", "bg_value", "=", "self", ".", "bg_value", ",", "\n", "bg_class", "=", "self", ".", "bg_class", ",", "\n", "affine", "=", "self", ".", "affine", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.set_interpolator_with_current": [[440, 446], ["image_pair.ImagePair.get_interpolator_with_current"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.get_interpolator_with_current"], ["", "def", "set_interpolator_with_current", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Set an interpolator object in the ImagePair\n        See get_interpolator_with_current\n        \"\"\"", "\n", "self", ".", "_interpolator", "=", "self", ".", "get_interpolator_with_current", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.standardize_bg_val": [[447, 468], ["isinstance", "standardized_bg_values.append", "len"], "methods", ["None"], ["", "def", "standardize_bg_val", "(", "self", ",", "bg_value", ")", ":", "\n", "        ", "\"\"\"\n        Standardize the bg_value, handles None and False differently from 0\n        or 0.0 - for None and False the 1st percentile of self.image is used\n\n        Args:\n            bg_value: The non-standardized background value. Should be an int,\n                      float, None or False\n\n        Returns:\n            A list of float(s)/int(s) image background value pr. channel\n        \"\"\"", "\n", "if", "not", "isinstance", "(", "bg_value", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "            ", "bg_value", "=", "[", "bg_value", "]", "\n", "", "standardized_bg_values", "=", "[", "]", "\n", "for", "value", "in", "bg_value", ":", "\n", "            ", "value", "=", "value", "if", "(", "bg_value", "is", "not", "None", "and", "bg_value", "is", "not", "False", ")", "else", "\"1pct\"", "\n", "standardized_bg_values", ".", "append", "(", "value", ")", "\n", "", "if", "len", "(", "standardized_bg_values", ")", "==", "1", "and", "self", ".", "n_channels", "!=", "1", ":", "\n", "            ", "standardized_bg_values", "*=", "self", ".", "n_channels", "\n", "", "return", "standardized_bg_values", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair._bg_pct_string_to_value": [[469, 485], ["enumerate", "image_pair.ImagePair.logger.warn", "int", "bg_value.append", "numpy.percentile", "bg_str.lower().replace().split", "bg_str.lower().replace", "bg_str.lower"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn"], ["", "def", "_bg_pct_string_to_value", "(", "self", ",", "bg_pct_str", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n\n        Args:\n            bg_pct_str: TODO\n        \"\"\"", "\n", "bg_value", "=", "[", "]", "\n", "for", "i", ",", "bg_str", "in", "enumerate", "(", "bg_pct_str", ")", ":", "\n", "# assuming '<number>pct' format", "\n", "            ", "bg_pct", "=", "int", "(", "bg_str", ".", "lower", "(", ")", ".", "replace", "(", "\" \"", ",", "\"\"", ")", ".", "split", "(", "\"pct\"", ")", "[", "0", "]", ")", "\n", "bg_value", ".", "append", "(", "np", ".", "percentile", "(", "self", ".", "image", "[", "...", ",", "i", "]", ",", "bg_pct", ")", ")", "\n", "", "self", ".", "logger", ".", "warn", "(", "\"Image %s: Using %s percentile BG value of %s\"", "%", "(", "\n", "self", ".", "identifier", ",", "bg_pct_str", ",", "bg_value", "\n", ")", ",", "no_print", "=", "True", ")", "\n", "return", "bg_value", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.__init__": [[72, 155], ["auditor.Auditor.audit", "numpy.all", "int", "numpy.percentile", "numpy.percentile", "auditor.Auditor.heurestic_sample_dim", "sum", "auditor.Auditor.log", "mpunet.logging.ScreenLogger", "numpy.power", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.audit", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.heurestic_sample_dim", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log"], ["def", "__init__", "(", "self", ",", "nii_paths", ",", "nii_lab_paths", "=", "None", ",", "logger", "=", "None", ",", "\n", "min_dim_2d", "=", "128", ",", "max_dim_2d", "=", "512", ",", "dim_3d", "=", "64", ",", "span_percentile", "=", "75", ",", "\n", "res_percentile", "=", "25", ",", "hparams", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            nii_paths: A list of paths pointing to typically training and val\n                       .nii/.nii.gz images to audit\n            nii_lab_paths: Optional paths pointing to .nii/.nii.gz label images\n                           from which target class number is inferred\n            logger: A mpunet logger object\n            min_dim_2d: Minimum pixel dimension to use\n            max_dim_2d: Maximum pixel dimension to use (usually GPU limited)\n            dim_3d: Pixel dimensionality of the 3D model\n            span_percentile: The real space span param will be set close to the\n                             'span_percentile' percentile computed across all\n                             spans recorded across images and axes.\n            res_percentile: The sampled resolution will be set close to the\n                            'span_percentile' percentile computed across all\n                            voxel resolutions recorded across images and axes.\n        \"\"\"", "\n", "self", ".", "nii_paths", "=", "nii_paths", "\n", "self", ".", "nii_lab_paths", "=", "nii_lab_paths", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "\n", "# Fetch basic information on the images", "\n", "self", ".", "hparms", "=", "hparams", "\n", "self", ".", "info", "=", "self", ".", "audit", "(", ")", "\n", "\n", "\"\"\" Set some attributes used for image sampling \"\"\"", "\n", "assert", "np", ".", "all", "(", "np", ".", "array", "(", "self", ".", "info", "[", "\"n_channels\"", "]", ")", "==", "self", ".", "info", "[", "\"n_channels\"", "]", "[", "0", "]", ")", "\n", "self", ".", "n_channels", "=", "int", "(", "self", ".", "info", "[", "\"n_channels\"", "]", "[", "0", "]", ")", "\n", "\n", "# Number of classes", "\n", "self", ".", "n_classes", "=", "self", ".", "info", "[", "\"n_classes\"", "]", "\n", "\n", "# 2D", "\n", "real_space_span", "=", "np", ".", "percentile", "(", "self", ".", "info", "[", "\"real_sizes\"", "]", ",", "span_percentile", ")", "\n", "sample_res", "=", "np", ".", "percentile", "(", "self", ".", "info", "[", "\"pixdims\"", "]", ",", "res_percentile", ")", "\n", "self", ".", "sample_dim_2D", ",", "self", ".", "real_space_span_2D", "=", "self", ".", "heurestic_sample_dim", "(", "real_space_span", ",", "\n", "sample_res", ",", "\n", "min_dim_2d", ",", "max_dim_2d", ")", "\n", "\n", "# 3D", "\n", "self", ".", "sample_dim_3D", "=", "dim_3d", "\n", "self", ".", "real_space_span_3D", "=", "real_space_span", "\n", "self", ".", "real_box_span", "=", "dim_3d", "*", "sample_res", "\n", "\n", "# Total memory (including channels)", "\n", "self", ".", "total_memory_bytes", "=", "sum", "(", "self", ".", "info", "[", "\"memory_bytes\"", "]", ")", "\n", "self", ".", "total_memory_gib", "=", "self", ".", "total_memory_bytes", "/", "np", ".", "power", "(", "1024", ",", "3", ")", "\n", "\n", "# Set hparams pattern", "\n", "# These patterns map a Auditor attribute to the sub-field and name", "\n", "# under this field in which the value should be stored in the", "\n", "# train_hparams.yaml file", "\n", "# Currently, these are specified broadly for 2D and 3D models", "\n", "# TODO: Integrate this with the logic of the mpunet.models", "\n", "# TODO: __init__.py file that already sets preprep functions for each", "\n", "# TODO: model type.", "\n", "self", ".", "patterns", "=", "{", "\n", "\"2d\"", ":", "{", "\n", "\"real_space_span_2D\"", ":", "(", "[", "\"fit\"", "]", ",", "[", "\"real_space_span\"", "]", ")", ",", "\n", "\"sample_dim_2D\"", ":", "(", "[", "\"build\"", "]", ",", "[", "\"dim\"", "]", ")", ",", "\n", "\"n_channels\"", ":", "(", "[", "\"build\"", "]", ",", "[", "\"n_channels\"", "]", ")", ",", "\n", "\"n_classes\"", ":", "(", "[", "\"build\"", "]", ",", "[", "\"n_classes\"", "]", ")", "\n", "}", ",", "\n", "\"3d\"", ":", "{", "\n", "\"real_space_span_3D\"", ":", "(", "[", "\"fit\"", "]", ",", "[", "\"real_space_span\"", "]", ")", ",", "\n", "\"sample_dim_3D\"", ":", "(", "[", "\"build\"", "]", ",", "[", "\"dim\"", "]", ")", ",", "\n", "\"real_box_span\"", ":", "(", "[", "\"fit\"", "]", ",", "[", "\"real_box_dim\"", "]", ")", ",", "\n", "\"n_channels\"", ":", "(", "[", "\"build\"", "]", ",", "[", "\"n_channels\"", "]", ")", ",", "\n", "\"n_classes\"", ":", "(", "[", "\"build\"", "]", ",", "[", "\"n_classes\"", "]", ")", "\n", "}", ",", "\n", "\"multi_task_2d\"", ":", "{", "\n", "\"real_space_span_2D\"", ":", "(", "[", "\"task_specifics\"", "]", ",", "[", "\"real_space_span\"", "]", ")", ",", "\n", "\"sample_dim_2D\"", ":", "(", "[", "\"task_specifics\"", "]", ",", "[", "\"dim\"", "]", ")", ",", "\n", "\"n_channels\"", ":", "(", "[", "\"task_specifics\"", "]", ",", "[", "\"n_channels\"", "]", ")", ",", "\n", "\"n_classes\"", ":", "(", "[", "\"task_specifics\"", "]", ",", "[", "\"n_classes\"", "]", ")", "\n", "}", "\n", "}", "\n", "\n", "# Write to log", "\n", "self", ".", "log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.log": [[156, 171], ["auditor.Auditor.logger", "auditor.Auditor.logger", "auditor.Auditor.logger", "auditor.Auditor.logger", "mpunet.utils.highlighted", "auditor.Auditor.logger", "len"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.utils.utils.highlighted"], ["", "def", "log", "(", "self", ")", ":", "\n", "        ", "self", ".", "logger", "(", "highlighted", "(", "\"\\nAudit for %i images\"", "%", "len", "(", "self", ".", "nii_paths", ")", ")", ")", "\n", "self", ".", "logger", "(", "\"Total memory GiB:  %.3f\"", "%", "self", ".", "total_memory_gib", ")", "\n", "if", "self", ".", "n_classes", "is", "not", "None", ":", "\n", "            ", "self", ".", "logger", "(", "\"Number of classes: %i\"", "%", "self", ".", "n_classes", ")", "\n", "", "self", ".", "logger", "(", "\"\\n2D:\\n\"", "\n", "\"Real space span:   %.3f\\n\"", "\n", "\"Sample dim:        %.3f\"", "%", "(", "self", ".", "real_space_span_2D", ",", "\n", "self", ".", "sample_dim_2D", ")", ")", "\n", "self", ".", "logger", "(", "\"\\n3D:\\n\"", "\n", "\"Sample dim:        %i\\n\"", "\n", "\"Real space span:   %.3f\\n\"", "\n", "\"Box span:          %.3f\"", "%", "(", "self", ".", "sample_dim_3D", ",", "\n", "self", ".", "real_space_span_3D", ",", "\n", "self", ".", "real_box_span", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.fill": [[172, 198], ["model_type.lower.lower.lower", "auditor.Auditor.patterns.get", "hparams.save_current", "ValueError", "getattr", "zip", "hparams.set_value"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.save_current", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.set_value"], ["", "def", "fill", "(", "self", ",", "hparams", ",", "model_type", ")", ":", "\n", "        ", "\"\"\"\n        Add and write attributes stored in this Auditor object to the\n        YAMLHParams object and train_hparams.yaml file according to the\n        patterns self.pattern_2d and self.pattern_3d (see init)\n\n        Only attributes not already manually specified by the user will be\n        changed. See YAMLHParams.set_value().\n\n        Args:\n            hparams:     mpunet YAMLHParams object\n            model_type:  A string representing the model type and thus which\n                         pattern to apply. Must be either \"2d\", \"3d\" (upper case tolerated)\n        \"\"\"", "\n", "model_type", "=", "model_type", ".", "lower", "(", ")", "\n", "pattern", "=", "self", ".", "patterns", ".", "get", "(", "model_type", ")", "\n", "if", "pattern", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown model type: '%s'\"", "%", "model_type", ")", "\n", "\n", "", "for", "attr", "in", "pattern", ":", "\n", "            ", "subdirs", ",", "names", "=", "pattern", "[", "attr", "]", "\n", "value", "=", "getattr", "(", "self", ",", "attr", ")", "\n", "\n", "for", "s", ",", "n", "in", "zip", "(", "subdirs", ",", "names", ")", ":", "\n", "                ", "hparams", ".", "set_value", "(", "subdir", "=", "s", ",", "name", "=", "n", ",", "value", "=", "value", ")", "\n", "", "", "hparams", ".", "save_current", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.heurestic_sample_dim": [[199, 210], ["numpy.array", "max", "numpy.abs().argmin", "int", "range", "numpy.abs"], "methods", ["None"], ["", "def", "heurestic_sample_dim", "(", "self", ",", "real_space_span", ",", "res", ",", "_min", ",", "_max", ")", ":", "\n", "        ", "valid", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "_min", ",", "_max", "+", "1", ")", "if", "(", "i", "*", "0.5", "**", "4", ")", ".", "is_integer", "(", ")", "]", ")", "\n", "sample_dim", "=", "real_space_span", "/", "res", "\n", "nearest_valid", "=", "valid", "[", "np", ".", "abs", "(", "valid", "-", "sample_dim", ")", ".", "argmin", "(", ")", "]", "\n", "\n", "if", "nearest_valid", "<", "(", "sample_dim", "*", "0.90", ")", ":", "\n", "# Reduce real space span a bit to increase resolution", "\n", "            ", "pref", "=", "nearest_valid", "*", "res", "\n", "real_space_span", "=", "max", "(", "int", "(", "real_space_span", "*", "0.70", ")", ",", "pref", ")", "\n", "\n", "", "return", "nearest_valid", ",", "real_space_span", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor.Auditor.audit": [[211, 261], ["nibabel.load", "shapes.append", "channels.append", "real_sizes.append", "pixdims.append", "memory.append", "mpunet.interpolation.sample_grid.get_real_image_size", "mpunet.interpolation.sample_grid.get_pix_dim", "auditor.Auditor.hparms.get_from_anywhere", "auditor._audit_classes", "numpy.prod", "nibabel.load.get_data_dtype"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_real_image_size", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.interpolation.sample_grid.get_pix_dim", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.hyperparameters.hparams.YAMLHParams.get_from_anywhere", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor._audit_classes"], ["", "def", "audit", "(", "self", ")", ":", "\n", "        ", "shapes", "=", "[", "]", "\n", "channels", "=", "[", "]", "\n", "real_sizes", "=", "[", "]", "\n", "pixdims", "=", "[", "]", "\n", "memory", "=", "[", "]", "\n", "\n", "for", "im_path", "in", "self", ".", "nii_paths", ":", "\n", "# Load the nii file without loading image data", "\n", "            ", "im", "=", "nib", ".", "load", "(", "im_path", ")", "\n", "\n", "# Get image voxel shape", "\n", "shape", "=", "im", ".", "shape", "\n", "shapes", ".", "append", "(", "shape", "[", ":", "3", "]", ")", "\n", "\n", "try", ":", "\n", "                ", "c", "=", "shape", "[", "3", "]", "\n", "", "except", "IndexError", ":", "\n", "                ", "c", "=", "1", "\n", "", "channels", ".", "append", "(", "c", ")", "\n", "\n", "# Get image real shape", "\n", "real_sizes", ".", "append", "(", "get_real_image_size", "(", "im", ")", ")", "\n", "\n", "# Get pixel dims", "\n", "pixdims", ".", "append", "(", "get_pix_dim", "(", "im", ")", ")", "\n", "\n", "# Calculate memory in bytes to store image", "\n", "memory", ".", "append", "(", "im", ".", "get_data_dtype", "(", ")", ".", "itemsize", "*", "np", ".", "prod", "(", "shape", ")", ")", "\n", "\n", "", "n_classes", "=", "None", "\n", "if", "self", ".", "nii_lab_paths", "is", "not", "None", ":", "\n", "# Labels exists, thus we need the n_classes attribute", "\n", "            ", "if", "self", ".", "hparms", "is", "not", "None", ":", "\n", "# Attempt to get it from a potentially specified hparams obj", "\n", "                ", "n_classes", "=", "self", ".", "hparms", ".", "get_from_anywhere", "(", "\"n_classes\"", ")", "\n", "", "if", "n_classes", "is", "None", ":", "\n", "# If still none, infer it", "\n", "                ", "n_classes", "=", "_audit_classes", "(", "self", ".", "nii_lab_paths", ",", "\n", "self", ".", "logger", ")", "\n", "\n", "", "", "info", "=", "{", "\n", "\"shapes\"", ":", "shapes", ",", "\n", "\"real_sizes\"", ":", "real_sizes", ",", "\n", "\"pixdims\"", ":", "pixdims", ",", "\n", "\"memory_bytes\"", ":", "memory", ",", "\n", "\"n_channels\"", ":", "channels", ",", "\n", "\"n_classes\"", ":", "n_classes", ",", "\n", "}", "\n", "return", "info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.auditor._audit_classes": [[8, 35], ["logger", "numpy.random.choice", "numpy.unique", "min", "np.unique.extend", "numpy.min", "numpy.max", "ValueError", "ValueError", "len", "numpy.unique", "max", "nibabel.load().get_data", "nibabel.load"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load"], ["def", "_audit_classes", "(", "nii_lab_paths", ",", "logger", ")", ":", "\n", "    ", "logger", "(", "\"Auditing number of target classes. This may take \"", "\n", "\"a while as data must be read from disk.\"", "\n", "\"\\n-- Note: avoid this by manually setting the \"", "\n", "\"n_classes attribute in train_hparams.yaml.\"", ")", "\n", "# Select up to 50 random images and find the unique classes", "\n", "lab_paths", "=", "np", ".", "random", ".", "choice", "(", "nii_lab_paths", ",", "\n", "min", "(", "50", ",", "len", "(", "nii_lab_paths", ")", ")", ",", "\n", "replace", "=", "False", ")", "\n", "classes", "=", "[", "]", "\n", "for", "l", "in", "lab_paths", ":", "\n", "        ", "classes", ".", "extend", "(", "np", ".", "unique", "(", "nib", ".", "load", "(", "l", ")", ".", "get_data", "(", ")", ")", ")", "\n", "", "classes", "=", "np", ".", "unique", "(", "classes", ")", "\n", "n_classes", "=", "classes", ".", "shape", "[", "0", "]", "\n", "\n", "# Make sure the classes start from 0 and step continuously by 1", "\n", "c_min", ",", "c_max", "=", "np", ".", "min", "(", "classes", ")", ",", "np", ".", "max", "(", "classes", ")", "\n", "if", "c_min", "!=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid class audit - Class integers should\"", "\n", "\" start from 0, found %i (classes found: %s)\"", "\n", "%", "(", "c_min", ",", "classes", ")", ")", "\n", "", "if", "n_classes", "!=", "max", "(", "classes", ")", "+", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid class audit - Found %i classes, but\"", "\n", "\" expected %i, as the largest class value\"", "\n", "\" found was %i. Classes found: %s\"", "\n", "%", "(", "n_classes", ",", "c_max", "+", "1", ",", "c_max", ",", "classes", ")", ")", "\n", "", "return", "n_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.lazy_queue.LazyQueue.__init__": [[13, 28], ["mpunet.image.queue.base_queue.BaseQueue.__init__", "lazy_queue.LazyQueue.logger", "lazy_queue.LazyQueue.logger", "len"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "logger", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n        Args:\n            dataset:\n            logger:\n        \"\"\"", "\n", "super", "(", "LazyQueue", ",", "self", ")", ".", "__init__", "(", "\n", "dataset", "=", "dataset", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "self", ".", "logger", "(", "\"'Lazy' queue created:\\n\"", "\n", "\"  Dataset:      {}\"", ".", "format", "(", "self", ".", "dataset", ")", ")", "\n", "self", ".", "logger", "(", "\"Images will be loaded just-in-time and unloaded when \"", "\n", "\"not in use.\"", ".", "format", "(", "len", "(", "dataset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.lazy_queue.LazyQueue.get_random_image": [[29, 34], ["super().get_random_image", "super().get_random_image.loaded_in_context"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_random_image", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.loaded_in_context"], ["", "@", "contextmanager", "\n", "def", "get_random_image", "(", "self", ")", ":", "\n", "        ", "image", "=", "super", "(", ")", ".", "get_random_image", "(", ")", "\n", "with", "image", ".", "loaded_in_context", "(", ")", ":", "\n", "            ", "yield", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.lazy_queue.LazyQueue.get_image_by_idx": [[35, 40], ["super().get_image_by_idx", "super().get_image_by_idx.loaded_in_context"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_image_by_idx", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.loaded_in_context"], ["", "", "@", "contextmanager", "\n", "def", "get_image_by_idx", "(", "self", ",", "image_idx", ")", ":", "\n", "        ", "image", "=", "super", "(", ")", ".", "get_image_by_idx", "(", "image_idx", ")", "\n", "with", "image", ".", "loaded_in_context", "(", ")", ":", "\n", "            ", "yield", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.lazy_queue.LazyQueue.get_image_by_id": [[41, 46], ["super().get_image_by_id", "super().get_image_by_id.loaded_in_context"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_image_by_id", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.loaded_in_context"], ["", "", "@", "contextmanager", "\n", "def", "get_image_by_id", "(", "self", ",", "image_id", ")", ":", "\n", "        ", "image", "=", "super", "(", ")", ".", "get_image_by_id", "(", "image_id", ")", "\n", "with", "image", ".", "loaded_in_context", "(", ")", ":", "\n", "            ", "yield", "image", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.eager_queue.EagerQueue.__init__": [[13, 28], ["mpunet.image.queue.base_queue.BaseQueue.__init__", "eager_queue.EagerQueue.logger", "eager_queue.EagerQueue.logger", "eager_queue.EagerQueue.dataset.load", "len"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load"], ["def", "__init__", "(", "self", ",", "dataset", ",", "logger", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n        Args:\n            dataset:\n            logger:\n        \"\"\"", "\n", "super", "(", "EagerQueue", ",", "self", ")", ".", "__init__", "(", "\n", "dataset", "=", "dataset", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "self", ".", "logger", "(", "\"'Eager' queue created:\\n\"", "\n", "\"  Dataset:      {}\"", ".", "format", "(", "self", ".", "dataset", ")", ")", "\n", "self", ".", "logger", "(", "\"Preloading all {} images now... (eager)\"", ".", "format", "(", "len", "(", "dataset", ")", ")", ")", "\n", "self", ".", "dataset", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.eager_queue.EagerQueue.check_loaded": [[29, 37], ["RuntimeError"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "check_loaded", "(", "image", ")", ":", "\n", "        ", "if", "not", "image", ".", "is_loaded", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Some process unloaded image '{}'; this \"", "\n", "\"is unexpected behaviour when using the \"", "\n", "\"EagerQueue object, which expects all data to \"", "\n", "\"be loaded at all times\"", ")", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.eager_queue.EagerQueue.__iter__": [[38, 42], ["range", "len", "eager_queue.EagerQueue.get_image_by_idx"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_image_by_idx"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dataset", ".", "images", ")", ")", ":", "\n", "            ", "with", "self", ".", "get_image_by_idx", "(", "i", ")", "as", "ss", ":", "\n", "                ", "yield", "ss", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.eager_queue.EagerQueue.get_random_image": [[43, 46], ["eager_queue.EagerQueue.check_loaded", "super().get_random_image"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.eager_queue.EagerQueue.check_loaded", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_random_image"], ["", "", "", "@", "contextmanager", "\n", "def", "get_random_image", "(", "self", ")", ":", "\n", "        ", "yield", "self", ".", "check_loaded", "(", "super", "(", ")", ".", "get_random_image", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.eager_queue.EagerQueue.get_image_by_idx": [[47, 50], ["eager_queue.EagerQueue.check_loaded", "super().get_image_by_idx"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.eager_queue.EagerQueue.check_loaded", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_image_by_idx"], ["", "@", "contextmanager", "\n", "def", "get_image_by_idx", "(", "self", ",", "image_idx", ")", ":", "\n", "        ", "yield", "self", ".", "check_loaded", "(", "super", "(", ")", ".", "get_image_by_idx", "(", "image_idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.eager_queue.EagerQueue.get_image_by_id": [[51, 54], ["eager_queue.EagerQueue.check_loaded", "super().get_image_by_id"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.eager_queue.EagerQueue.check_loaded", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_image_by_id"], ["", "@", "contextmanager", "\n", "def", "get_image_by_id", "(", "self", ",", "image_id", ")", ":", "\n", "        ", "yield", "self", ".", "check_loaded", "(", "super", "(", ")", ".", "get_image_by_id", "(", "image_id", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.__init__": [[52, 91], ["queue.Queue", "queue.Queue", "queue.Queue", "threading.Lock", "range", "threading.Thread", "threading.Thread", "loading_pool.LoadingPool.gather_loaded_thread.start", "loading_pool.LoadingPool.gather_errors_thread.start", "mpunet.logging.default_logger.ScreenLogger", "threading.Thread", "threading.Thread.start", "loading_pool.LoadingPool.pool.append"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.start", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.start", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.start"], ["def", "__init__", "(", "self", ",", "\n", "n_threads", "=", "5", ",", "\n", "max_queue_size", "=", "50", ",", "\n", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Initialize a StudyLoader object from a list of SleepStudyDataset objects\n\n        Args:\n            TODO\n        \"\"\"", "\n", "# Setup load thread pool", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "self", ".", "_load_queue", "=", "Queue", "(", "maxsize", "=", "max_queue_size", ")", "\n", "self", ".", "_output_queue", "=", "Queue", "(", "maxsize", "=", "max_queue_size", ")", "\n", "self", ".", "_load_errors_queue", "=", "Queue", "(", "maxsize", "=", "3", ")", "# We probably want to raise", "\n", "# an error if this queue", "\n", "# gets to more than ~3!", "\n", "self", ".", "thread_lock", "=", "Lock", "(", ")", "\n", "\n", "args", "=", "(", "self", ".", "_load_queue", ",", "self", ".", "_output_queue", ",", "self", ".", "_load_errors_queue", ",", "\n", "self", ".", "thread_lock", ",", "self", ".", "logger", ")", "\n", "self", ".", "pool", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_threads", ")", ":", "\n", "            ", "p", "=", "Thread", "(", "target", "=", "_load_func", ",", "args", "=", "args", ",", "daemon", "=", "True", ")", "\n", "p", ".", "start", "(", ")", "\n", "self", ".", "pool", ".", "append", "(", "p", ")", "\n", "\n", "# Prepare gathering thread", "\n", "", "self", ".", "_registered_datasets", "=", "{", "}", "\n", "self", ".", "gather_loaded_thread", "=", "Thread", "(", "target", "=", "_gather_loaded", ",", "\n", "args", "=", "(", "self", ".", "_output_queue", ",", "\n", "self", ".", "_registered_datasets", ")", ",", "\n", "daemon", "=", "True", ")", "\n", "self", ".", "gather_errors_thread", "=", "Thread", "(", "target", "=", "_gather_errors", ",", "\n", "args", "=", "(", "self", ".", "_load_errors_queue", ",", "\n", "self", ".", "_registered_datasets", ")", ",", "\n", "daemon", "=", "True", ")", "\n", "self", ".", "gather_loaded_thread", ".", "start", "(", ")", "\n", "self", ".", "gather_errors_thread", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.qsize": [[92, 96], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "qsize", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns the qsize of the load queue \"\"\"", "\n", "return", "self", ".", "_load_queue", ".", "qsize", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.maxsize": [[97, 101], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "maxsize", "(", "self", ")", ":", "\n", "        ", "\"\"\" Returns the maxsize of the load queue \"\"\"", "\n", "return", "self", ".", "_load_queue", ".", "maxsize", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join": [[102, 107], ["loading_pool.LoadingPool._load_queue.join", "loading_pool.LoadingPool._output_queue.join", "loading_pool.LoadingPool._load_errors_queue.join"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join"], ["", "def", "join", "(", "self", ")", ":", "\n", "        ", "\"\"\" Join on all queues \"\"\"", "\n", "self", ".", "_load_queue", ".", "join", "(", ")", "\n", "self", ".", "_output_queue", ".", "join", "(", ")", "\n", "self", ".", "_load_errors_queue", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.add_image_to_load_queue": [[108, 123], ["loading_pool.LoadingPool._load_queue.put", "RuntimeError", "loading_pool.LoadingPool.qsize", "loading_pool.LoadingPool.logger.warn", "loading_pool.LoadingPool.qsize", "time.sleep", "loading_pool.LoadingPool.qsize"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.qsize", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.qsize", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.qsize"], ["", "def", "add_image_to_load_queue", "(", "self", ",", "image_pair", ",", "dataset_id", ")", ":", "\n", "        ", "if", "dataset_id", "not", "in", "self", ".", "_registered_datasets", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Dataset {} is not registered. \"", "\n", "\"Call StudyLoader.register_dataset before adding\"", "\n", "\" items from that dataset to the loading \"", "\n", "\"queue\"", ".", "format", "(", "dataset_id", ")", ")", "\n", "", "if", "self", ".", "qsize", "(", ")", "==", "self", ".", "maxsize", ":", "\n", "            ", "self", ".", "logger", ".", "warn", "(", "\"Loading queue seems about to block! \"", "\n", "\"(max_size={}, current={}). \"", "\n", "\"Sleeping until loading queue is empty \"", "\n", "\"again.\"", ".", "format", "(", "self", ".", "maxsize", ",", "\n", "self", ".", "qsize", "(", ")", ")", ")", "\n", "while", "self", ".", "qsize", "(", ")", ">", "1", ":", "\n", "                ", "sleep", "(", "1", ")", "\n", "", "", "self", ".", "_load_queue", ".", "put", "(", "(", "image_pair", ",", "dataset_id", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.register_dataset": [[124, 131], ["RuntimeWarning"], "methods", ["None"], ["", "def", "register_dataset", "(", "self", ",", "dataset_id", ",", "load_put_function", ",", "error_put_function", ")", ":", "\n", "        ", "with", "self", ".", "thread_lock", ":", "\n", "            ", "if", "dataset_id", "in", "self", ".", "_registered_datasets", ":", "\n", "                ", "raise", "RuntimeWarning", "(", "\"A dataset of ID {} has already been \"", "\n", "\"registered.\"", ".", "format", "(", "dataset_id", ")", ")", "\n", "", "self", ".", "_registered_datasets", "[", "dataset_id", "]", "=", "(", "\n", "load_put_function", ",", "error_put_function", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.de_register_dataset": [[133, 136], ["None"], "methods", ["None"], ["", "", "def", "de_register_dataset", "(", "self", ",", "dataset_id", ")", ":", "\n", "        ", "with", "self", ".", "thread_lock", ":", "\n", "            ", "del", "self", ".", "_registered_datasets", "[", "dataset_id", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool._load_func": [[7, 28], ["load_queue.get", "to_load.load", "results_queue.put", "load_queue.task_done", "load_errors_queue.put", "logger.warn"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.load", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn"], ["def", "_load_func", "(", "load_queue", ",", "results_queue", ",", "load_errors_queue", ",", "lock", ",", "logger", ")", ":", "\n", "    ", "\"\"\"\n\n    Args:\n        load_queue:\n\n    Returns:\n\n    \"\"\"", "\n", "while", "True", ":", "\n", "        ", "to_load", ",", "dataset_id", "=", "load_queue", ".", "get", "(", ")", "\n", "try", ":", "\n", "            ", "to_load", ".", "load", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "with", "lock", ":", "\n", "                ", "logger", ".", "warn", "(", "\"[ERROR in LoadingPool] \"", "\n", "\"Could not load image '{}': {}\"", ".", "format", "(", "to_load", ",", "e", ")", ")", "\n", "", "load_errors_queue", ".", "put", "(", "(", "to_load", ",", "dataset_id", ")", ")", "\n", "", "finally", ":", "\n", "            ", "results_queue", ".", "put", "(", "(", "to_load", ",", "dataset_id", ")", ")", "\n", "load_queue", ".", "task_done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool._gather_loaded": [[30, 37], ["output_queue.get", "load_put_function", "output_queue.task_done"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["", "", "", "def", "_gather_loaded", "(", "output_queue", ",", "registered_datasets", ")", ":", "\n", "    ", "while", "True", ":", "\n", "# Wait for studies in the output queue", "\n", "        ", "image_pair", ",", "dataset_id", "=", "output_queue", ".", "get", "(", "block", "=", "True", ")", "\n", "load_put_function", "=", "registered_datasets", "[", "dataset_id", "]", "[", "0", "]", "\n", "load_put_function", "(", "image_pair", ")", "\n", "output_queue", ".", "task_done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool._gather_errors": [[39, 46], ["load_errors_queue.get", "error_put_function", "load_errors_queue.task_done"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get"], ["", "", "def", "_gather_errors", "(", "load_errors_queue", ",", "registered_datasets", ")", ":", "\n", "    ", "while", "True", ":", "\n", "# Wait for studies in the output queue", "\n", "        ", "image_pair", ",", "dataset_id", "=", "load_errors_queue", ".", "get", "(", "block", "=", "True", ")", "\n", "error_put_function", "=", "registered_datasets", "[", "dataset_id", "]", "[", "1", "]", "\n", "error_put_function", "(", "image_pair", ")", "\n", "load_errors_queue", ".", "task_done", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.base_queue.BaseQueue.__init__": [[11, 20], ["mpunet.logging.default_logger.ScreenLogger"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n        Args:\n            datasets:\n            logger:\n        \"\"\"", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "logger", "=", "logger", "or", "ScreenLogger", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.base_queue.BaseQueue.all_loaded": [[21, 24], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "all_loaded", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.base_queue.BaseQueue.__len__": [[25, 27], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.base_queue.BaseQueue.__iter__": [[28, 31], ["range", "len", "base_queue.BaseQueue.get_image_by_idx"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_image_by_idx"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dataset", ".", "images", ")", ")", ":", "\n", "            ", "yield", "self", ".", "get_image_by_idx", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.base_queue.BaseQueue.__getitem__": [[32, 34], ["base_queue.BaseQueue.get_image_by_idx"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_image_by_idx"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "get_image_by_idx", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.base_queue.BaseQueue.get_image_iterator": [[35, 41], ["numpy.arange", "len", "numpy.random.choice", "len", "base_queue.BaseQueue.get_image_by_idx"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_image_by_idx"], ["", "def", "get_image_iterator", "(", "self", ",", "max_load", "=", "None", ")", ":", "\n", "        ", "load_inds", "=", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "\n", "if", "max_load", "and", "max_load", "<", "len", "(", "self", ")", ":", "\n", "            ", "load_inds", "=", "np", ".", "random", ".", "choice", "(", "load_inds", ",", "max_load", ",", "False", ")", "\n", "", "for", "idx", "in", "load_inds", ":", "\n", "            ", "yield", "self", ".", "get_image_by_idx", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.base_queue.BaseQueue.get_random_image": [[42, 44], ["numpy.random.choice"], "methods", ["None"], ["", "", "def", "get_random_image", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "random", ".", "choice", "(", "self", ".", "dataset", ".", "images", ",", "1", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.base_queue.BaseQueue.get_image_by_idx": [[45, 47], ["None"], "methods", ["None"], ["", "def", "get_image_by_idx", "(", "self", ",", "image_idx", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "images", "[", "image_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.base_queue.BaseQueue.get_image_by_id": [[48, 50], ["None"], "methods", ["None"], ["", "def", "get_image_by_id", "(", "self", ",", "image_id", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "id_to_image", "[", "image_id", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.utils.validate_queue_type": [[5, 14], ["logger.warn", "len", "len"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn"], ["import", "contextlib", "\n", "\n", "\n", "def", "_get_system_wide_set_gpus", "(", ")", ":", "\n", "    ", "allowed_gpus", "=", "os", ".", "environ", ".", "get", "(", "\"CUDA_VISIBLE_DEVICES\"", ")", "\n", "if", "allowed_gpus", ":", "\n", "        ", "allowed_gpus", "=", "allowed_gpus", ".", "replace", "(", "\" \"", ",", "\"\"", ")", ".", "split", "(", "\",\"", ")", "\n", "", "return", "allowed_gpus", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.utils.get_data_queues": [[16, 70], ["utils.validate_queue_type", "train_queue.", "utils.validate_queue_type", "mpunet.image.queue.LoadingPool", "val_queue.", "train_queue_type.lower", "val_queue_type.lower"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.utils.validate_queue_type", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.utils.validate_queue_type"], ["# Check if allowed GPUs are set in CUDA_VIS_DEV.", "\n", "    ", "allowed_gpus", "=", "_get_system_wide_set_gpus", "(", ")", "\n", "if", "allowed_gpus", ":", "\n", "        ", "print", "(", "\"[OBS] Considering only system-wise allowed GPUs: {} (set in\"", "\n", "\" CUDA_VISIBLE_DEVICES env variable).\"", ".", "format", "(", "allowed_gpus", ")", ")", "\n", "return", "allowed_gpus", "\n", "# Else, check GPUs on the system and assume all non-used (mem. use less", "\n", "# than max_allowed_mem_usage) is fair game.", "\n", "", "from", "subprocess", "import", "check_output", "\n", "try", ":", "\n", "# Get list of GPUs", "\n", "        ", "gpu_list", "=", "check_output", "(", "[", "\"nvidia-smi\"", ",", "\"-L\"", "]", ",", "universal_newlines", "=", "True", ")", "\n", "gpu_ids", "=", "np", ".", "array", "(", "re", ".", "findall", "(", "r\"GPU[ ]+(\\d+)\"", ",", "gpu_list", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "# Query memory usage stats from nvidia-smi", "\n", "output", "=", "check_output", "(", "[", "\"nvidia-smi\"", ",", "\"-q\"", ",", "\"-d\"", ",", "\"MEMORY\"", "]", ",", "\n", "universal_newlines", "=", "True", ")", "\n", "\n", "# Fetch the memory usage of each GPU", "\n", "mem_usage", "=", "re", ".", "findall", "(", "r\"FB Memory Usage.*?Used[ ]+:[ ]+(\\d+)\"", ",", "\n", "output", ",", "flags", "=", "re", ".", "DOTALL", ")", "\n", "assert", "len", "(", "gpu_ids", ")", "==", "len", "(", "mem_usage", ")", "\n", "\n", "# Return all GPU ids for which the memory usage is exactly 0", "\n", "free", "=", "list", "(", "map", "(", "lambda", "x", ":", "int", "(", "x", ")", "<=", "max_allowed_mem_usage", ",", "mem_usage", ")", ")", "\n", "return", "list", "(", "gpu_ids", "[", "free", "]", ")", "\n", "", "except", "FileNotFoundError", "as", "e", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\"[ERROR] nvidia-smi is not installed. \"", "\n", "\"Consider setting the --num_GPUs=0 flag.\"", ")", "from", "e", "\n", "\n", "\n", "", "", "def", "_get_free_gpu", "(", "free_GPUs", ",", "N", "=", "1", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "free_gpu", "=", "\",\"", ".", "join", "(", "map", "(", "str", ",", "free_GPUs", "[", "0", ":", "N", "]", ")", ")", "\n", "", "except", "IndexError", "as", "e", ":", "\n", "        ", "raise", "OSError", "(", "\"No GPU available.\"", ")", "from", "e", "\n", "", "return", "free_gpu", "\n", "\n", "\n", "", "def", "get_free_gpu", "(", "N", "=", "1", ")", ":", "\n", "    ", "free", "=", "get_free_gpus", "(", ")", "\n", "return", "_get_free_gpu", "(", "free", ",", "N", "=", "N", ")", "\n", "\n", "\n", "", "def", "await_and_set_free_gpu", "(", "N", "=", "1", ",", "sleep_seconds", "=", "60", ",", "logger", "=", "None", ")", ":", "\n", "    ", "gpu", "=", "\"\"", "\n", "if", "N", "!=", "0", ":", "\n", "        ", "from", "time", "import", "sleep", "\n", "logger", "=", "logger", "or", "print", "\n", "logger", "(", "\"Waiting for free GPU.\"", ")", "\n", "found_gpu", "=", "False", "\n", "while", "not", "found_gpu", ":", "\n", "            ", "gpu", "=", "get_free_gpu", "(", "N", "=", "N", ")", "\n", "if", "gpu", ":", "\n", "                ", "logger", "(", "\"Found free GPU: %s\"", "%", "gpu", ")", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__": [[16, 86], ["mpunet.image.queue.BaseQueue.__init__", "min", "queue.Queue", "queue.Queue", "numpy.arange", "numpy.random.shuffle", "limitation_queue.LimitationQueue.loading_pool.register_dataset", "int", "limitation_queue.LimitationQueue.logger", "len", "len", "limitation_queue.LimitationQueue.non_loaded_queue.put", "mpunet.image.queue.LoadingPool", "limitation_queue.LimitationQueue.preload", "len", "len"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.__init__", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.register_dataset", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.preload"], ["def", "__init__", "(", "self", ",", "\n", "dataset", ",", "\n", "max_loaded", "=", "25", ",", "\n", "num_access_before_reload", "=", "50", ",", "\n", "preload_now", "=", "True", ",", "\n", "await_preload", "=", "True", ",", "\n", "loading_pool", "=", "None", ",", "\n", "n_load_jobs", "=", "5", ",", "\n", "logger", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Initialize a LoadQueue object from a ImagePairLoader object\n\n        Args:\n            dataset:                    (list) A ImagePairLoader object\n            max_loaded:                 (int)  Number of ImagePair objects in\n                                               a dataset that will be loaded\n                                               at a given time.\n            num_access_before_reload:   (int)  Number of times a ImagePair obj\n                                               can be accessed be\n                                               get_random_image or\n                                               a unload is invoked and a new\n                                               data point is loaded.\n            preload_now:   TODO\n            image_loader:  TODO\n            n_load_jobs:   TODO\n            logger:        TODO\n        \"\"\"", "\n", "super", "(", "LimitationQueue", ",", "self", ")", ".", "__init__", "(", "\n", "dataset", "=", "dataset", ",", "\n", "logger", "=", "logger", "\n", ")", "\n", "self", ".", "max_loaded", "=", "min", "(", "max_loaded", "or", "len", "(", "dataset", ")", ",", "len", "(", "dataset", ")", ")", "\n", "self", ".", "num_access_before_reload", "=", "num_access_before_reload", "or", "50", "\n", "\n", "# Queues of loaded and non-loaded objects", "\n", "self", ".", "loaded_queue", "=", "Queue", "(", "maxsize", "=", "self", ".", "max_loaded", ")", "\n", "self", ".", "non_loaded_queue", "=", "Queue", "(", "maxsize", "=", "len", "(", "dataset", ")", ")", "\n", "\n", "# Fill non-loaded queue in random order", "\n", "inds", "=", "np", ".", "arange", "(", "len", "(", "dataset", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "inds", ")", "\n", "for", "i", "in", "inds", ":", "\n", "            ", "self", ".", "non_loaded_queue", ".", "put", "(", "self", ".", "dataset", ".", "images", "[", "i", "]", ")", "\n", "\n", "# Setup load thread pool", "\n", "", "self", ".", "loading_pool", "=", "loading_pool", "or", "LoadingPool", "(", "\n", "n_threads", "=", "n_load_jobs", "\n", ")", "\n", "# Register this dataset to become updated with new loaded images", "\n", "# from the StudyLoader thread.", "\n", "self", ".", "loading_pool", ".", "register_dataset", "(", "\n", "dataset_id", "=", "self", ".", "dataset", ".", "identifier", ",", "\n", "load_put_function", "=", "self", ".", "_add_loaded_to_queue", ",", "\n", "error_put_function", "=", "self", ".", "_load_error_callback", ",", "\n", ")", "\n", "\n", "# Increment counters to random off-set points for the first images", "\n", "self", ".", "max_offset", "=", "int", "(", "self", ".", "num_access_before_reload", "*", "0.75", ")", "\n", "self", ".", "n_offset", "=", "self", ".", "max_loaded", "\n", "\n", "self", ".", "logger", "(", "\"'Limitation' queue created:\\n\"", "\n", "\"  Dataset:      {}\\n\"", "\n", "\"  Max loaded:   {}\\n\"", "\n", "\"  Reload limit: {}\"", ".", "format", "(", "\n", "self", ".", "dataset", ",", "self", ".", "max_loaded", ",", "self", ".", "num_access_before_reload", "\n", ")", ")", "\n", "if", "preload_now", ":", "\n", "# Load specified number of obj and populate access count dict", "\n", "            ", "self", ".", "preload", "(", "await_preload", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.preload": [[87, 110], ["limitation_queue.LimitationQueue.logger", "limitation_queue.LimitationQueue._add_images_to_load_queue", "RuntimeError", "limitation_queue.LimitationQueue.logger", "limitation_queue.LimitationQueue.loading_pool.join", "limitation_queue.LimitationQueue.logger", "limitation_queue.LimitationQueue.loaded_queue.qsize"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue._add_images_to_load_queue", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.join", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.qsize"], ["", "", "def", "preload", "(", "self", ",", "await_preload", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n\n        Returns:\n\n        \"\"\"", "\n", "# Set the number of loaded objects to 'max_loaded_per_dataset'", "\n", "self", ".", "logger", "(", "\"Adding {} ImagePair objects from \"", "\n", "\"{} to load queue\"", ".", "format", "(", "self", ".", "max_loaded", ",", "\n", "self", ".", "dataset", ".", "identifier", ")", ")", "\n", "if", "self", ".", "dataset", ".", "n_loaded", "!=", "0", "or", "self", ".", "loaded_queue", ".", "qsize", "(", ")", "!=", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Dataset {} seems to have already been \"", "\n", "\"loaded. Do not load any data before \"", "\n", "\"passing the ImagePairLoader object \"", "\n", "\"to the queue class. Only call \"", "\n", "\"LoadQueue.preload once.\"", "\n", "\"\"", ".", "format", "(", "self", ".", "dataset", ".", "identifier", ")", ")", "\n", "", "self", ".", "_add_images_to_load_queue", "(", "num", "=", "self", ".", "max_loaded", ")", "\n", "if", "await_preload", ":", "\n", "            ", "self", ".", "logger", "(", "\"... awaiting preload\"", ")", "\n", "self", ".", "loading_pool", ".", "join", "(", ")", "\n", "self", ".", "logger", "(", "\"Preload complete.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.load_queue_too_full": [[111, 114], ["limitation_queue.LimitationQueue.loading_pool.qsize"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.qsize"], ["", "", "def", "load_queue_too_full", "(", "self", ",", "max_fraction", "=", "0.33", ")", ":", "\n", "        ", "return", "self", ".", "loading_pool", ".", "qsize", "(", ")", ">", "self", ".", "loading_pool", ".", "maxsize", "*", "max_fraction", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue._warn_access_limit": [[115, 126], ["limitation_queue.LimitationQueue.loaded_queue.qsize", "limitation_queue.LimitationQueue.logger.warn", "limitation_queue.LimitationQueue.logger.warn"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.qsize", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn"], ["", "def", "_warn_access_limit", "(", "self", ",", "min_fraction", "=", "0.10", ")", ":", "\n", "        ", "qsize", "=", "self", ".", "loaded_queue", ".", "qsize", "(", ")", "\n", "if", "qsize", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "warn", "(", "\"Study ID queue for dataset {} seems to\"", "\n", "\" block. This might indicate a data loading \"", "\n", "\"bottleneck.\"", ".", "format", "(", "self", ".", "dataset", ".", "identifier", ")", ")", "\n", "", "elif", "qsize", "<=", "self", ".", "max_loaded", "*", "min_fraction", ":", "\n", "            ", "self", ".", "logger", ".", "warn", "(", "\"Dataset {}: Loaded queue in too empty \"", "\n", "\"(qsize={}, maxsize={})\"", "\n", ".", "format", "(", "self", ".", "dataset", ".", "identifier", ",", "qsize", ",", "\n", "self", ".", "max_loaded", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_image_by_id": [[127, 130], ["None"], "methods", ["None"], ["", "", "@", "contextmanager", "\n", "def", "get_image_by_id", "(", "self", ",", "image_id", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_image_by_idx": [[131, 134], ["None"], "methods", ["None"], ["", "@", "contextmanager", "\n", "def", "get_image_by_idx", "(", "self", ",", "image_idx", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue.get_random_image": [[135, 158], ["limitation_queue.LimitationQueue._warn_access_limit", "limitation_queue.LimitationQueue.loaded_queue.get", "limitation_queue.LimitationQueue._release_image", "queue.Empty"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue._warn_access_limit", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_queue.ImageQueue.get", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue._release_image"], ["", "@", "contextmanager", "\n", "def", "get_random_image", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n\n        Returns:\n\n        \"\"\"", "\n", "with", "self", ".", "loading_pool", ".", "thread_lock", ":", "\n", "            ", "self", ".", "_warn_access_limit", "(", ")", "\n", "", "timeout_s", "=", "5", "\n", "try", ":", "\n", "            ", "image_pair", ",", "n_accesses", "=", "self", ".", "loaded_queue", ".", "get", "(", "timeout", "=", "timeout_s", ")", "\n", "", "except", "Empty", "as", "e", ":", "\n", "            ", "raise", "Empty", "(", "\"Could not get ImagePair from dataset {} with \"", "\n", "\"timeout of {} seconds. Consider increasing the \"", "\n", "\"number of load threads / max loaded per dataset /\"", "\n", "\" access threshold\"", ".", "format", "(", "self", ".", "dataset", ".", "identifier", ",", "\n", "timeout_s", ")", ")", "from", "e", "\n", "", "try", ":", "\n", "            ", "yield", "image_pair", "\n", "", "finally", ":", "\n", "            ", "self", ".", "_release_image", "(", "image_pair", ",", "n_accesses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue._add_images_to_load_queue": [[159, 179], ["range", "limitation_queue.LimitationQueue.non_loaded_queue.get_nowait", "limitation_queue.LimitationQueue.loading_pool.add_image_to_load_queue", "RuntimeWarning"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.loading_pool.LoadingPool.add_image_to_load_queue"], ["", "", "def", "_add_images_to_load_queue", "(", "self", ",", "num", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n\n        Args:\n            num:\n\n        Returns:\n\n        \"\"\"", "\n", "for", "_", "in", "range", "(", "num", ")", ":", "\n", "            ", "image", "=", "self", ".", "non_loaded_queue", ".", "get_nowait", "(", ")", "# Should never block!", "\n", "if", "image", ".", "is_loaded", ":", "\n", "                ", "raise", "RuntimeWarning", "(", "\"Image {} in dataset {} seems to be \"", "\n", "\"already loaded, but it was fetched from \"", "\n", "\"the self.non_loaded_queue queue. This \"", "\n", "\"could be an implementation error!\"", "\n", "\"\"", ".", "format", "(", "image", ".", "identifier", ",", "\n", "self", ".", "dataset", ".", "identifier", ")", ")", "\n", "", "self", ".", "loading_pool", ".", "add_image_to_load_queue", "(", "image", ",", "self", ".", "dataset", ".", "identifier", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue._add_loaded_to_queue": [[180, 195], ["limitation_queue.LimitationQueue.loaded_queue.put", "numpy.random.randint"], "methods", ["None"], ["", "", "def", "_add_loaded_to_queue", "(", "self", ",", "image_pair", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            image_id:\n\n        Returns:\n\n        \"\"\"", "\n", "if", "self", ".", "n_offset", ">=", "0", ":", "\n", "            ", "offset", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "max_offset", ")", "\n", "self", ".", "n_offset", "-=", "1", "\n", "", "else", ":", "\n", "            ", "offset", "=", "0", "\n", "", "self", ".", "loaded_queue", ".", "put", "(", "(", "image_pair", ",", "offset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue._load_error_callback": [[196, 199], ["limitation_queue.LimitationQueue.logger.warn", "limitation_queue.LimitationQueue._add_images_to_load_queue"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue._add_images_to_load_queue"], ["", "def", "_load_error_callback", "(", "self", ",", "image_pair", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "logger", ".", "warn", "(", "\"Load error on image {}\"", ".", "format", "(", "image_pair", ")", ")", "\n", "self", ".", "_add_images_to_load_queue", "(", "num", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue._release_image": [[200, 218], ["image_pair.unload", "limitation_queue.LimitationQueue.non_loaded_queue.put", "limitation_queue.LimitationQueue._add_images_to_load_queue", "limitation_queue.LimitationQueue.loaded_queue.put"], "methods", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.image.image_pair.ImagePair.unload", "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.queue.limitation_queue.LimitationQueue._add_images_to_load_queue"], ["", "def", "_release_image", "(", "self", ",", "image_pair", ",", "n_accesses", ")", ":", "\n", "        ", "\"\"\"\n        TODO\n\n        Args:\n            image_pair:\n            n_accesses:\n\n        Returns:\n\n        \"\"\"", "\n", "if", "n_accesses", ">=", "self", ".", "num_access_before_reload", ":", "\n", "# Unload, add to unloaded queue, start loading new image", "\n", "            ", "image_pair", ".", "unload", "(", ")", "\n", "self", ".", "non_loaded_queue", ".", "put", "(", "image_pair", ")", "\n", "self", ".", "_add_images_to_load_queue", "(", "num", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "loaded_queue", ".", "put", "(", "(", "image_pair", ",", "n_accesses", "+", "1", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.errors.deprecated_warnings.warn_sparse_param": [[4, 11], ["logger.warn"], "function", ["home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.logging.logger.Logger.warn"], ["def", "warn_sparse_param", "(", "logger", ")", ":", "\n", "    ", "logger", "=", "logger", "or", "ScreenLogger", "\n", "sparse_err", "=", "\"mpunet 0.1.3 or higher requires integer targets\"", "\" as opposed to one-hot encoded targets. Setting the 'sparse'\"", "\" parameter no longer has any effect and may not be allowed\"", "\" in future versions.\"", "\n", "logger", ".", "warn", "(", "sparse_err", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.perslev_MultiPlanarUNet.errors.implementation_change_errors.raise_non_sparse_metric_or_loss_error": [[5, 12], ["implementation_change_errors.NotSparseError"], "function", ["None"], ["def", "raise_non_sparse_metric_or_loss_error", "(", ")", ":", "\n", "    ", "sparse_err", "=", "\"mpunet 0.1.3 or higher requires integer targets\"", "\" as opposed to one-hot encoded targets. All metrics and \"", "\"loss functions should be named 'sparse_[org_name]' to \"", "\"reflect this change in accordance with the naming convention\"", "\" of TensorFlow.keras.\"", "\n", "raise", "NotSparseError", "(", "sparse_err", ")", "\n", "", ""]]}