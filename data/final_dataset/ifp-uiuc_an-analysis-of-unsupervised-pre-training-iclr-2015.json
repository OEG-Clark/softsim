{"home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.unsupervised_layer3.train.orthogonalize": [[14, 27], ["numpy.min", "numpy.linalg.svd", "numpy.zeros", "numpy.diag", "numpy.dot", "numpy.float32", "numpy.dot"], "function", ["None"], ["def", "orthogonalize", "(", "w", ")", ":", "\n", "# Orthogonalize square matrices.", "\n", "# Or left orthogonalize overcomplete matrices.", "\n", "# Simply gets an SVD decomposition, and sets the singular values to ones.", "\n", "    ", "dim2", ",", "dim1", "=", "w", ".", "shape", "\n", "dim", "=", "numpy", ".", "min", "(", "(", "dim1", ",", "dim2", ")", ")", "\n", "u", ",", "s", ",", "v", "=", "numpy", ".", "linalg", ".", "svd", "(", "w", ")", "\n", "S", "=", "numpy", ".", "zeros", "(", "(", "dim2", ",", "dim1", ")", ")", "\n", "s", "=", "s", "/", "s", "\n", "S", "[", ":", "dim", ",", ":", "dim", "]", "=", "numpy", ".", "diag", "(", "s", ")", "\n", "w", "=", "numpy", ".", "dot", "(", "u", ",", "numpy", ".", "dot", "(", "S", ",", "v", ")", ")", "\n", "w", "=", "numpy", ".", "float32", "(", "w", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.unsupervised_layer3.train.conv_orthogonalize": [[29, 53], ["numpy.float32.reshape().transpose", "train.orthogonalize", "numpy.hamming", "numpy.hamming", "numpy.outer", "numpy.tile", "numpy.diag", "numpy.dot", "numpy.float32.transpose", "numpy.float32.reshape", "numpy.float32", "numpy.tile.reshape", "numpy.float32.reshape"], "function", ["home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.layer1.train.orthogonalize"], ["", "def", "conv_orthogonalize", "(", "w", ",", "k", "=", "1.0", ")", ":", "\n", "# Reshape filters into a matrix", "\n", "    ", "channels", ",", "width", ",", "height", ",", "filters", "=", "w", ".", "shape", "\n", "w", "=", "w", ".", "reshape", "(", "channels", "*", "width", "*", "height", ",", "filters", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "# Orthogonalize the matrix", "\n", "w", "=", "orthogonalize", "(", "w", ")", "\n", "\n", "# Contruct 2D hamming window", "\n", "hamming1", "=", "numpy", ".", "hamming", "(", "width", ")", "\n", "hamming2", "=", "numpy", ".", "hamming", "(", "height", ")", "\n", "hamming", "=", "numpy", ".", "outer", "(", "hamming1", ",", "hamming2", ")", "\n", "\n", "# Use it to mask the input to w", "\n", "mask", "=", "numpy", ".", "tile", "(", "hamming", "[", "None", ",", ":", ",", ":", "]", ",", "(", "channels", ",", "1", ",", "1", ")", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "channels", "*", "width", "*", "height", ")", "*", "k", "\n", "m", "=", "numpy", ".", "diag", "(", "mask", ")", "\n", "w", "=", "numpy", ".", "dot", "(", "w", ",", "m", ")", "\n", "\n", "# Reshape the matrix into filters", "\n", "w", "=", "w", ".", "transpose", "(", "1", ",", "0", ")", "\n", "w", "=", "w", ".", "reshape", "(", "channels", ",", "width", ",", "height", ",", "filters", ")", "\n", "w", "=", "numpy", ".", "float32", "(", "w", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.unsupervised_layer1.train.orthogonalize": [[14, 27], ["numpy.min", "numpy.linalg.svd", "numpy.zeros", "numpy.diag", "numpy.dot", "numpy.float32", "numpy.dot"], "function", ["None"], ["def", "orthogonalize", "(", "w", ")", ":", "\n", "# Orthogonalize square matrices.", "\n", "# Or left orthogonalize overcomplete matrices.", "\n", "# Simply gets an SVD decomposition, and sets the singular values to ones.", "\n", "    ", "dim2", ",", "dim1", "=", "w", ".", "shape", "\n", "dim", "=", "numpy", ".", "min", "(", "(", "dim1", ",", "dim2", ")", ")", "\n", "u", ",", "s", ",", "v", "=", "numpy", ".", "linalg", ".", "svd", "(", "w", ")", "\n", "S", "=", "numpy", ".", "zeros", "(", "(", "dim2", ",", "dim1", ")", ")", "\n", "s", "=", "s", "/", "s", "\n", "S", "[", ":", "dim", ",", ":", "dim", "]", "=", "numpy", ".", "diag", "(", "s", ")", "\n", "w", "=", "numpy", ".", "dot", "(", "u", ",", "numpy", ".", "dot", "(", "S", ",", "v", ")", ")", "\n", "w", "=", "numpy", ".", "float32", "(", "w", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.unsupervised_layer1.train.conv_orthogonalize": [[29, 53], ["numpy.float32.reshape().transpose", "train.orthogonalize", "numpy.hamming", "numpy.hamming", "numpy.outer", "numpy.tile", "numpy.diag", "numpy.dot", "numpy.float32.transpose", "numpy.float32.reshape", "numpy.float32", "numpy.tile.reshape", "numpy.float32.reshape"], "function", ["home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.layer1.train.orthogonalize"], ["", "def", "conv_orthogonalize", "(", "w", ",", "k", "=", "1.0", ")", ":", "\n", "# Reshape filters into a matrix", "\n", "    ", "channels", ",", "width", ",", "height", ",", "filters", "=", "w", ".", "shape", "\n", "w", "=", "w", ".", "reshape", "(", "channels", "*", "width", "*", "height", ",", "filters", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "# Orthogonalize the matrix", "\n", "w", "=", "orthogonalize", "(", "w", ")", "\n", "\n", "# Contruct 2D hamming window", "\n", "hamming1", "=", "numpy", ".", "hamming", "(", "width", ")", "\n", "hamming2", "=", "numpy", ".", "hamming", "(", "height", ")", "\n", "hamming", "=", "numpy", ".", "outer", "(", "hamming1", ",", "hamming2", ")", "\n", "\n", "# Use it to mask the input to w", "\n", "mask", "=", "numpy", ".", "tile", "(", "hamming", "[", "None", ",", ":", ",", ":", "]", ",", "(", "channels", ",", "1", ",", "1", ")", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "channels", "*", "width", "*", "height", ")", "*", "k", "\n", "m", "=", "numpy", ".", "diag", "(", "mask", ")", "\n", "w", "=", "numpy", ".", "dot", "(", "w", ",", "m", ")", "\n", "\n", "# Reshape the matrix into filters", "\n", "w", "=", "w", ".", "transpose", "(", "1", ",", "0", ")", "\n", "w", "=", "w", ".", "reshape", "(", "channels", ",", "width", ",", "height", ",", "filters", ")", "\n", "w", "=", "numpy", ".", "float32", "(", "w", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.unsupervised_layer2.train.orthogonalize": [[14, 27], ["numpy.min", "numpy.linalg.svd", "numpy.zeros", "numpy.diag", "numpy.dot", "numpy.float32", "numpy.dot"], "function", ["None"], ["def", "orthogonalize", "(", "w", ")", ":", "\n", "# Orthogonalize square matrices.", "\n", "# Or left orthogonalize overcomplete matrices.", "\n", "# Simply gets an SVD decomposition, and sets the singular values to ones.", "\n", "    ", "dim2", ",", "dim1", "=", "w", ".", "shape", "\n", "dim", "=", "numpy", ".", "min", "(", "(", "dim1", ",", "dim2", ")", ")", "\n", "u", ",", "s", ",", "v", "=", "numpy", ".", "linalg", ".", "svd", "(", "w", ")", "\n", "S", "=", "numpy", ".", "zeros", "(", "(", "dim2", ",", "dim1", ")", ")", "\n", "s", "=", "s", "/", "s", "\n", "S", "[", ":", "dim", ",", ":", "dim", "]", "=", "numpy", ".", "diag", "(", "s", ")", "\n", "w", "=", "numpy", ".", "dot", "(", "u", ",", "numpy", ".", "dot", "(", "S", ",", "v", ")", ")", "\n", "w", "=", "numpy", ".", "float32", "(", "w", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.unsupervised_layer2.train.conv_orthogonalize": [[29, 53], ["numpy.float32.reshape().transpose", "train.orthogonalize", "numpy.hamming", "numpy.hamming", "numpy.outer", "numpy.tile", "numpy.diag", "numpy.dot", "numpy.float32.transpose", "numpy.float32.reshape", "numpy.float32", "numpy.tile.reshape", "numpy.float32.reshape"], "function", ["home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.layer1.train.orthogonalize"], ["", "def", "conv_orthogonalize", "(", "w", ",", "k", "=", "1.0", ")", ":", "\n", "# Reshape filters into a matrix", "\n", "    ", "channels", ",", "width", ",", "height", ",", "filters", "=", "w", ".", "shape", "\n", "w", "=", "w", ".", "reshape", "(", "channels", "*", "width", "*", "height", ",", "filters", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "# Orthogonalize the matrix", "\n", "w", "=", "orthogonalize", "(", "w", ")", "\n", "\n", "# Contruct 2D hamming window", "\n", "hamming1", "=", "numpy", ".", "hamming", "(", "width", ")", "\n", "hamming2", "=", "numpy", ".", "hamming", "(", "height", ")", "\n", "hamming", "=", "numpy", ".", "outer", "(", "hamming1", ",", "hamming2", ")", "\n", "\n", "# Use it to mask the input to w", "\n", "mask", "=", "numpy", ".", "tile", "(", "hamming", "[", "None", ",", ":", ",", ":", "]", ",", "(", "channels", ",", "1", ",", "1", ")", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "channels", "*", "width", "*", "height", ")", "*", "k", "\n", "m", "=", "numpy", ".", "diag", "(", "mask", ")", "\n", "w", "=", "numpy", ".", "dot", "(", "w", ",", "m", ")", "\n", "\n", "# Reshape the matrix into filters", "\n", "w", "=", "w", ".", "transpose", "(", "1", ",", "0", ")", "\n", "w", "=", "w", ".", "reshape", "(", "channels", ",", "width", ",", "height", ",", "filters", ")", "\n", "w", "=", "numpy", ".", "float32", "(", "w", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.layer3.train.orthogonalize": [[14, 27], ["numpy.min", "numpy.linalg.svd", "numpy.zeros", "numpy.diag", "numpy.dot", "numpy.float32", "numpy.dot"], "function", ["None"], ["def", "orthogonalize", "(", "w", ")", ":", "\n", "# Orthogonalize square matrices.", "\n", "# Or left orthogonalize overcomplete matrices.", "\n", "# Simply gets an SVD decomposition, and sets the singular values to ones.", "\n", "    ", "dim2", ",", "dim1", "=", "w", ".", "shape", "\n", "dim", "=", "numpy", ".", "min", "(", "(", "dim1", ",", "dim2", ")", ")", "\n", "u", ",", "s", ",", "v", "=", "numpy", ".", "linalg", ".", "svd", "(", "w", ")", "\n", "S", "=", "numpy", ".", "zeros", "(", "(", "dim2", ",", "dim1", ")", ")", "\n", "s", "=", "s", "/", "s", "\n", "S", "[", ":", "dim", ",", ":", "dim", "]", "=", "numpy", ".", "diag", "(", "s", ")", "\n", "w", "=", "numpy", ".", "dot", "(", "u", ",", "numpy", ".", "dot", "(", "S", ",", "v", ")", ")", "\n", "w", "=", "numpy", ".", "float32", "(", "w", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.layer3.train.conv_orthogonalize": [[29, 53], ["numpy.float32.reshape().transpose", "train.orthogonalize", "numpy.hamming", "numpy.hamming", "numpy.outer", "numpy.tile", "numpy.diag", "numpy.dot", "numpy.float32.transpose", "numpy.float32.reshape", "numpy.float32", "numpy.tile.reshape", "numpy.float32.reshape"], "function", ["home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.layer1.train.orthogonalize"], ["", "def", "conv_orthogonalize", "(", "w", ",", "k", "=", "1.0", ")", ":", "\n", "# Reshape filters into a matrix", "\n", "    ", "channels", ",", "width", ",", "height", ",", "filters", "=", "w", ".", "shape", "\n", "w", "=", "w", ".", "reshape", "(", "channels", "*", "width", "*", "height", ",", "filters", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "# Orthogonalize the matrix", "\n", "w", "=", "orthogonalize", "(", "w", ")", "\n", "\n", "# Contruct 2D hamming window", "\n", "hamming1", "=", "numpy", ".", "hamming", "(", "width", ")", "\n", "hamming2", "=", "numpy", ".", "hamming", "(", "height", ")", "\n", "hamming", "=", "numpy", ".", "outer", "(", "hamming1", ",", "hamming2", ")", "\n", "\n", "# Use it to mask the input to w", "\n", "mask", "=", "numpy", ".", "tile", "(", "hamming", "[", "None", ",", ":", ",", ":", "]", ",", "(", "channels", ",", "1", ",", "1", ")", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "channels", "*", "width", "*", "height", ")", "*", "k", "\n", "m", "=", "numpy", ".", "diag", "(", "mask", ")", "\n", "w", "=", "numpy", ".", "dot", "(", "w", ",", "m", ")", "\n", "\n", "# Reshape the matrix into filters", "\n", "w", "=", "w", ".", "transpose", "(", "1", ",", "0", ")", "\n", "w", "=", "w", ".", "reshape", "(", "channels", ",", "width", ",", "height", ",", "filters", ")", "\n", "w", "=", "numpy", ".", "float32", "(", "w", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.layer2.train.orthogonalize": [[14, 27], ["numpy.min", "numpy.linalg.svd", "numpy.zeros", "numpy.diag", "numpy.dot", "numpy.float32", "numpy.dot"], "function", ["None"], ["def", "orthogonalize", "(", "w", ")", ":", "\n", "# Orthogonalize square matrices.", "\n", "# Or left orthogonalize overcomplete matrices.", "\n", "# Simply gets an SVD decomposition, and sets the singular values to ones.", "\n", "    ", "dim2", ",", "dim1", "=", "w", ".", "shape", "\n", "dim", "=", "numpy", ".", "min", "(", "(", "dim1", ",", "dim2", ")", ")", "\n", "u", ",", "s", ",", "v", "=", "numpy", ".", "linalg", ".", "svd", "(", "w", ")", "\n", "S", "=", "numpy", ".", "zeros", "(", "(", "dim2", ",", "dim1", ")", ")", "\n", "s", "=", "s", "/", "s", "\n", "S", "[", ":", "dim", ",", ":", "dim", "]", "=", "numpy", ".", "diag", "(", "s", ")", "\n", "w", "=", "numpy", ".", "dot", "(", "u", ",", "numpy", ".", "dot", "(", "S", ",", "v", ")", ")", "\n", "w", "=", "numpy", ".", "float32", "(", "w", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.layer2.train.conv_orthogonalize": [[29, 53], ["numpy.float32.reshape().transpose", "train.orthogonalize", "numpy.hamming", "numpy.hamming", "numpy.outer", "numpy.tile", "numpy.diag", "numpy.dot", "numpy.float32.transpose", "numpy.float32.reshape", "numpy.float32", "numpy.tile.reshape", "numpy.float32.reshape"], "function", ["home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.layer1.train.orthogonalize"], ["", "def", "conv_orthogonalize", "(", "w", ",", "k", "=", "1.0", ")", ":", "\n", "# Reshape filters into a matrix", "\n", "    ", "channels", ",", "width", ",", "height", ",", "filters", "=", "w", ".", "shape", "\n", "w", "=", "w", ".", "reshape", "(", "channels", "*", "width", "*", "height", ",", "filters", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "# Orthogonalize the matrix", "\n", "w", "=", "orthogonalize", "(", "w", ")", "\n", "\n", "# Contruct 2D hamming window", "\n", "hamming1", "=", "numpy", ".", "hamming", "(", "width", ")", "\n", "hamming2", "=", "numpy", ".", "hamming", "(", "height", ")", "\n", "hamming", "=", "numpy", ".", "outer", "(", "hamming1", ",", "hamming2", ")", "\n", "\n", "# Use it to mask the input to w", "\n", "mask", "=", "numpy", ".", "tile", "(", "hamming", "[", "None", ",", ":", ",", ":", "]", ",", "(", "channels", ",", "1", ",", "1", ")", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "channels", "*", "width", "*", "height", ")", "*", "k", "\n", "m", "=", "numpy", ".", "diag", "(", "mask", ")", "\n", "w", "=", "numpy", ".", "dot", "(", "w", ",", "m", ")", "\n", "\n", "# Reshape the matrix into filters", "\n", "w", "=", "w", ".", "transpose", "(", "1", ",", "0", ")", "\n", "w", "=", "w", ".", "reshape", "(", "channels", ",", "width", ",", "height", ",", "filters", ")", "\n", "w", "=", "numpy", ".", "float32", "(", "w", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.layer1.train.orthogonalize": [[14, 27], ["numpy.min", "numpy.linalg.svd", "numpy.zeros", "numpy.diag", "numpy.dot", "numpy.float32", "numpy.dot"], "function", ["None"], ["def", "orthogonalize", "(", "w", ")", ":", "\n", "# Orthogonalize square matrices.", "\n", "# Or left orthogonalize overcomplete matrices.", "\n", "# Simply gets an SVD decomposition, and sets the singular values to ones.", "\n", "    ", "dim2", ",", "dim1", "=", "w", ".", "shape", "\n", "dim", "=", "numpy", ".", "min", "(", "(", "dim1", ",", "dim2", ")", ")", "\n", "u", ",", "s", ",", "v", "=", "numpy", ".", "linalg", ".", "svd", "(", "w", ")", "\n", "S", "=", "numpy", ".", "zeros", "(", "(", "dim2", ",", "dim1", ")", ")", "\n", "s", "=", "s", "/", "s", "\n", "S", "[", ":", "dim", ",", ":", "dim", "]", "=", "numpy", ".", "diag", "(", "s", ")", "\n", "w", "=", "numpy", ".", "dot", "(", "u", ",", "numpy", ".", "dot", "(", "S", ",", "v", ")", ")", "\n", "w", "=", "numpy", ".", "float32", "(", "w", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.layer1.train.conv_orthogonalize": [[29, 53], ["numpy.float32.reshape().transpose", "train.orthogonalize", "numpy.hamming", "numpy.hamming", "numpy.outer", "numpy.tile", "numpy.diag", "numpy.dot", "numpy.float32.transpose", "numpy.float32.reshape", "numpy.float32", "numpy.tile.reshape", "numpy.float32.reshape"], "function", ["home.repos.pwc.inspect_result.ifp-uiuc_an-analysis-of-unsupervised-pre-training-iclr-2015.layer1.train.orthogonalize"], ["", "def", "conv_orthogonalize", "(", "w", ",", "k", "=", "1.0", ")", ":", "\n", "# Reshape filters into a matrix", "\n", "    ", "channels", ",", "width", ",", "height", ",", "filters", "=", "w", ".", "shape", "\n", "w", "=", "w", ".", "reshape", "(", "channels", "*", "width", "*", "height", ",", "filters", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "# Orthogonalize the matrix", "\n", "w", "=", "orthogonalize", "(", "w", ")", "\n", "\n", "# Contruct 2D hamming window", "\n", "hamming1", "=", "numpy", ".", "hamming", "(", "width", ")", "\n", "hamming2", "=", "numpy", ".", "hamming", "(", "height", ")", "\n", "hamming", "=", "numpy", ".", "outer", "(", "hamming1", ",", "hamming2", ")", "\n", "\n", "# Use it to mask the input to w", "\n", "mask", "=", "numpy", ".", "tile", "(", "hamming", "[", "None", ",", ":", ",", ":", "]", ",", "(", "channels", ",", "1", ",", "1", ")", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "channels", "*", "width", "*", "height", ")", "*", "k", "\n", "m", "=", "numpy", ".", "diag", "(", "mask", ")", "\n", "w", "=", "numpy", ".", "dot", "(", "w", ",", "m", ")", "\n", "\n", "# Reshape the matrix into filters", "\n", "w", "=", "w", ".", "transpose", "(", "1", ",", "0", ")", "\n", "w", "=", "w", ".", "reshape", "(", "channels", ",", "width", ",", "height", ",", "filters", ")", "\n", "w", "=", "numpy", ".", "float32", "(", "w", ")", "\n", "return", "w", "\n", "\n"]]}