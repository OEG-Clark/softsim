{"home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data.__init__": [[65, 75], ["gap_data.Data._read_graph", "gap_data.Data._train_test_split", "gap_data.Data._build_neighborhood", "gap_data.Data._negative_sample", "gap_data.Data._build_train_dev_batches"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._read_graph", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._train_test_split", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._build_neighborhood", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._negative_sample", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._build_train_dev_batches"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "_args", "=", "args", "\n", "self", ".", "_hold_out", "=", "args", ".", "tr_rate", "<", "1.", "\n", "self", ".", "_use_dev", "=", "args", ".", "dev_rate", ">", "0", "\n", "self", ".", "_batch_size", "=", "64", "\n", "self", ".", "_read_graph", "(", ")", "\n", "self", ".", "_train_test_split", "(", ")", "\n", "self", ".", "_build_neighborhood", "(", ")", "\n", "self", ".", "_negative_sample", "(", ")", "\n", "self", ".", "_build_train_dev_batches", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._read_graph": [[76, 86], ["gap_helper.log", "gap_data.Data._reader", "gap_data.relable_nodes", "gap_data.Data.graph.number_of_nodes", "gap_helper.log", "gap_helper.log", "gap_data.Data.graph.number_of_edges"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.relable_nodes", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log"], ["", "def", "_read_graph", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "_args", "\n", "self", ".", "_reader", "=", "nx", ".", "read_adjlist", "if", "args", ".", "fmt", "==", "'adjlist'", "else", "nx", ".", "read_edgelist", "\n", "self", ".", "_creator", "=", "nx", ".", "DiGraph", "if", "args", ".", "directed", "else", "nx", ".", "Graph", "\n", "gap_helper", ".", "log", "(", "f'Reading graph from {args.input}'", ")", "\n", "self", ".", "graph", "=", "self", ".", "_reader", "(", "path", "=", "args", ".", "input", ",", "create_using", "=", "self", ".", "_creator", ",", "nodetype", "=", "int", ")", "\n", "self", ".", "graph", ",", "self", ".", "id_to_node", "=", "relable_nodes", "(", "self", ".", "graph", ")", "\n", "self", ".", "num_nodes", "=", "self", ".", "graph", ".", "number_of_nodes", "(", ")", "\n", "gap_helper", ".", "log", "(", "f'Number of nodes {self.num_nodes}'", ")", "\n", "gap_helper", ".", "log", "(", "f'Number of edges {self.graph.number_of_edges()}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._train_test_split": [[87, 112], ["list", "int", "random.shuffle", "gap_data.Data._train_test_split.split"], "methods", ["None"], ["", "def", "_train_test_split", "(", "self", ")", ":", "\n", "        ", "def", "split", "(", "train_rate", ")", ":", "\n", "            ", "edges", "=", "list", "(", "self", ".", "graph", ".", "edges", "(", ")", ")", "\n", "train_size", "=", "int", "(", "len", "(", "edges", ")", "*", "train_rate", ")", "\n", "random", ".", "shuffle", "(", "edges", ")", "\n", "train_edges", "=", "edges", "[", ":", "train_size", "]", "\n", "test_edges", "=", "edges", "[", "train_size", ":", "]", "\n", "return", "source_targets", "(", "train_edges", ")", ",", "source_targets", "(", "test_edges", ")", "\n", "\n", "", "args", "=", "self", ".", "_args", "\n", "self", ".", "_test_nodes", "=", "[", "]", "\n", "if", "self", ".", "_hold_out", ":", "\n", "            ", "splits", "=", "split", "(", "args", ".", "tr_rate", ")", "\n", "self", ".", "_train_sources", ",", "self", ".", "_train_targets", "=", "splits", "[", "0", "]", "\n", "if", "args", ".", "output_dir", "!=", "''", ":", "\n", "                ", "test_sources", ",", "test_targets", "=", "splits", "[", "1", "]", "\n", "self", ".", "_test_nodes", "=", "set", "(", "test_sources", ")", "|", "set", "(", "test_targets", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f'test_graph_{int(args.tr_rate * 100)}.txt'", ")", "\n", "gap_helper", ".", "log", "(", "f\"Persisting test data to {path} and the number of test points is  {len(test_sources)}\"", ")", "\n", "nx", ".", "write_edgelist", "(", "self", ".", "_creator", "(", "list", "(", "zip", "(", "test_sources", ",", "test_targets", ")", ")", ")", ",", "path", "=", "path", ",", "data", "=", "False", ")", "\n", "", "", "else", ":", "\n", "            ", "gap_helper", ".", "log", "(", "'No test data is persisted'", ")", "\n", "self", ".", "_train_sources", ",", "self", ".", "_train_targets", "=", "source_targets", "(", "self", ".", "graph", ".", "edges", "(", ")", ")", "\n", "\n", "", "self", ".", "_train_nodes", "=", "set", "(", "self", ".", "_train_sources", ")", "|", "set", "(", "self", ".", "_train_targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._build_neighborhood": [[113, 132], ["gap_data._sample_neighborhood", "torch.FloatTensor", "torch.LongTensor", "numpy.in1d", "gap_data._get_mask", "numpy.in1d.reshape"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data._sample_neighborhood", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data._get_mask"], ["", "def", "_build_neighborhood", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "_args", "\n", "self", ".", "_neighborhood_matrix", "=", "_sample_neighborhood", "(", "nbr_size", "=", "args", ".", "nbr_size", ",", "g", "=", "self", ".", "graph", ")", "\n", "\n", "\"\"\"\n        Maskings\n            Masking 1. The first masking ensures that no node from the test set is sampled in the neighbhorhood of any node.\n            Masking 2. The second one is used for zero-padding, used during the softmax computation\n        \"\"\"", "\n", "\n", "# Masking 1", "\n", "self", ".", "mask_nodes", "=", "self", ".", "_test_nodes", "if", "self", ".", "_hold_out", "else", "None", "\n", "if", "self", ".", "mask_nodes", "is", "not", "None", ":", "\n", "            ", "msk", "=", "np", ".", "in1d", "(", "self", ".", "_neighborhood_matrix", ",", "self", ".", "mask_nodes", ")", "\n", "self", ".", "_neighborhood_matrix", "[", "msk", ".", "reshape", "(", "self", ".", "_neighborhood_matrix", ".", "shape", ")", "]", "=", "0", "\n", "\n", "# Masking 2", "\n", "", "self", ".", "_mask_matrix", "=", "torch", ".", "FloatTensor", "(", "_get_mask", "(", "self", ".", "_neighborhood_matrix", ")", ")", "\n", "self", ".", "_neighborhood_matrix", "=", "torch", ".", "LongTensor", "(", "self", ".", "_neighborhood_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._negative_sample": [[133, 155], ["gap_helper.log", "range", "int", "len", "gap_data.Data._negative_sample.get_negative_node_to"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log"], ["", "def", "_negative_sample", "(", "self", ")", ":", "\n", "        ", "def", "get_negative_node_to", "(", "u", ",", "v", ")", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "node", "=", "self", ".", "node_dist_table", "[", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "node_dist_table", ")", "-", "1", ")", "]", "\n", "if", "node", "!=", "u", "and", "node", "!=", "v", ":", "\n", "                    ", "return", "node", "\n", "\n", "", "", "", "gap_helper", ".", "log", "(", "'Sampling negative nodes'", ")", "\n", "degree", "=", "{", "node", ":", "int", "(", "1", "+", "self", ".", "graph", ".", "degree", "(", "node", ")", "**", "0.75", ")", "for", "node", "in", "self", ".", "graph", ".", "nodes", "(", ")", "}", "\n", "# node_dist_table is equivalent of the uni-gram distribution table in the word2vec implementation", "\n", "self", ".", "node_dist_table", "=", "[", "node", "for", "node", ",", "new_degree", "in", "degree", ".", "items", "(", ")", "for", "_", "in", "range", "(", "new_degree", ")", "]", "\n", "\n", "sources", ",", "targets", "=", "self", ".", "_train_sources", ",", "self", ".", "_train_targets", "\n", "src", ",", "trg", ",", "neg", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "sources", ")", ")", ":", "\n", "            ", "neg_node", "=", "get_negative_node_to", "(", "sources", "[", "i", "]", ",", "targets", "[", "i", "]", ")", "\n", "src", ".", "append", "(", "sources", "[", "i", "]", ")", "\n", "trg", ".", "append", "(", "targets", "[", "i", "]", ")", "\n", "neg", ".", "append", "(", "neg_node", ")", "\n", "\n", "", "self", ".", "_train_sources", ",", "self", ".", "_train_targets", ",", "self", ".", "_train_negatives", "=", "np", ".", "array", "(", "src", ")", ",", "np", ".", "array", "(", "trg", ")", ",", "np", ".", "array", "(", "neg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data.batch_iterator": [[156, 160], ["range", "build_batch", "batches.append", "collections.namedtuple", "build_batch.keys", "build_batch.values"], "methods", ["None"], ["", "def", "batch_iterator", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "size", ",", "batch_size", ")", ":", "\n", "            ", "btc", "=", "build_batch", "(", "start", "=", "i", ")", "\n", "batches", ".", "append", "(", "namedtuple", "(", "'Batch'", ",", "btc", ".", "keys", "(", ")", ")", "(", "*", "btc", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._create_train_dev_indices": [[161, 170], ["numpy.arange", "int", "gap_helper.log", "numpy.arange", "numpy.arange", "len"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log"], ["", "", "def", "_create_train_dev_indices", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "_args", "\n", "self", ".", "_dev_indices", "=", "[", "]", "\n", "self", ".", "_train_indices", "=", "np", ".", "arange", "(", "self", ".", "_train_sources", ".", "shape", "[", "0", "]", ")", "\n", "if", "self", ".", "_use_dev", ":", "\n", "            ", "dev_size", "=", "int", "(", "len", "(", "self", ".", "_train_sources", ")", "*", "args", ".", "dev_rate", ")", "\n", "gap_helper", ".", "log", "(", "f'Number of dev points: {dev_size}'", ")", "\n", "self", ".", "_dev_indices", "=", "np", ".", "arange", "(", "dev_size", ")", "\n", "self", ".", "_train_indices", "=", "np", ".", "arange", "(", "dev_size", ",", "self", ".", "_train_sources", ".", "shape", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._fetch_current_batch": [[171, 191], ["torch.LongTensor", "torch.LongTensor", "collections.namedtuple", "batch.keys", "batch.values"], "methods", ["None"], ["", "", "def", "_fetch_current_batch", "(", "self", ",", "start", ",", "size", ",", "sources", ",", "targets", ",", "negatives", ")", ":", "\n", "        ", "\"\"\"\n        Prepares model inputs using specified indices and organizes them into a batch\n\n        :param start: Starting index \n        :param size: The number of edges\n        :param sources: Source nodes \n        :param targets: Target nodes\n        :param negatives: Negative nodes\n        :param batch_size: Batch size\n        :return: A Batch input\n        \"\"\"", "\n", "end", "=", "start", "+", "self", ".", "_batch_size", "if", "size", "-", "start", ">", "self", ".", "_batch_size", "else", "size", "\n", "src", ",", "trg", ",", "neg", "=", "sources", "[", "start", ":", "end", "]", ",", "targets", "[", "start", ":", "end", "]", ",", "negatives", "[", "start", ":", "end", "]", "\n", "batch", "=", "{", "'source'", ":", "torch", ".", "LongTensor", "(", "src", ")", ",", "'target'", ":", "torch", ".", "LongTensor", "(", "trg", ")", ",", "'negative'", ":", "neg", ",", "\n", "'source_neighborhood'", ":", "self", ".", "_neighborhood_matrix", "[", "src", "]", ",", "'target_neighborhood'", ":", "self", ".", "_neighborhood_matrix", "[", "trg", "]", ",", "\n", "'negative_neighborhood'", ":", "self", ".", "_neighborhood_matrix", "[", "neg", "]", ",", "'source_mask'", ":", "self", ".", "_mask_matrix", "[", "src", "]", ",", "\n", "'target_mask'", ":", "self", ".", "_mask_matrix", "[", "trg", "]", ",", "\n", "'negative_mask'", ":", "self", ".", "_mask_matrix", "[", "neg", "]", "}", "\n", "return", "namedtuple", "(", "'Batch'", ",", "batch", ".", "keys", "(", ")", ")", "(", "*", "batch", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._build_batch_iterator": [[192, 198], ["gap_helper.log", "range", "gap_data.Data._fetch_current_batch"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._fetch_current_batch"], ["", "def", "_build_batch_iterator", "(", "self", ",", "idx", ")", ":", "\n", "        ", "gap_helper", ".", "log", "(", "'Building batch iterator'", ")", "\n", "sources", ",", "targets", ",", "negatives", "=", "self", ".", "_train_sources", "[", "idx", "]", ",", "self", ".", "_train_targets", "[", "idx", "]", ",", "self", ".", "_train_negatives", "[", "idx", "]", "\n", "size", "=", "idx", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "size", ",", "self", ".", "_batch_size", ")", ":", "\n", "            ", "yield", "self", ".", "_fetch_current_batch", "(", "start", "=", "i", ",", "size", "=", "size", ",", "sources", "=", "sources", ",", "targets", "=", "targets", ",", "negatives", "=", "negatives", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._build_batches": [[199, 208], ["gap_helper.log", "range", "gap_data.Data._fetch_current_batch", "batches.append"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._fetch_current_batch"], ["", "", "def", "_build_batches", "(", "self", ",", "idx", ")", ":", "\n", "        ", "gap_helper", ".", "log", "(", "'Building in memory batches'", ")", "\n", "batches", "=", "[", "]", "\n", "sources", ",", "targets", ",", "negatives", "=", "self", ".", "_train_sources", "[", "idx", "]", ",", "self", ".", "_train_targets", "[", "idx", "]", ",", "self", ".", "_train_negatives", "[", "idx", "]", "\n", "size", "=", "idx", ".", "shape", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "size", ",", "self", ".", "_batch_size", ")", ":", "\n", "            ", "batch", "=", "self", ".", "_fetch_current_batch", "(", "start", "=", "i", ",", "size", "=", "size", ",", "sources", "=", "sources", ",", "targets", "=", "targets", ",", "negatives", "=", "negatives", ")", "\n", "batches", ".", "append", "(", "batch", ")", "\n", "", "return", "batches", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._build_train_dev_batches": [[209, 216], ["gap_data.Data._create_train_dev_indices", "builder", "builder", "gap_data.Data.graph.number_of_edges"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.Data._create_train_dev_indices"], ["", "def", "_build_train_dev_batches", "(", "self", ")", ":", "\n", "        ", "self", ".", "dev_inputs", "=", "[", "]", "\n", "self", ".", "_create_train_dev_indices", "(", ")", "\n", "builder", "=", "self", ".", "_build_batches", "if", "self", ".", "graph", ".", "number_of_edges", "(", ")", "<", "100000", "else", "self", ".", "_build_batch_iterator", "\n", "if", "self", ".", "_use_dev", ":", "\n", "            ", "self", ".", "dev_inputs", "=", "builder", "(", "idx", "=", "self", ".", "_dev_indices", ")", "\n", "", "self", ".", "train_inputs", "=", "builder", "(", "idx", "=", "self", ".", "_train_indices", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.source_targets": [[15, 16], ["list", "zip"], "function", ["None"], ["def", "source_targets", "(", "edges", ")", ":", "return", "[", "list", "(", "lor_edges", ")", "for", "lor_edges", "in", "zip", "(", "*", "edges", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data._get_mask": [[18, 31], ["mask.astype.astype"], "function", ["None"], ["def", "_get_mask", "(", "arr", ")", ":", "\n", "    ", "\"\"\"\n    Creates a mask for the input array. It will be used to mask the effect of zero-padding in the softmax\n    computation of the attention weights.\n    :param arr: The zero padded neighborhood array\n    :return: A mask array\n    \"\"\"", "\n", "neg_inf", "=", "-", "99999999.", "\n", "mask", "=", "(", "arr", "!=", "0", ")", "\n", "mask", "=", "mask", ".", "astype", "(", "'float'", ")", "\n", "mask", "[", "mask", "==", "0", "]", "=", "neg_inf", "\n", "mask", "[", "mask", "!=", "neg_inf", "]", "=", "0", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data._sample_neighborhood": [[33, 52], ["list", "numpy.zeros", "g.nodes", "list", "numpy.array", "numpy.random.choice", "len", "set", "networkx.all_neighbors"], "function", ["None"], ["", "def", "_sample_neighborhood", "(", "nbr_size", ",", "g", ")", ":", "\n", "    ", "\"\"\"\n    Samples a fixed number of (nbr_size) neighbors for every node in the graph.\n    For nodes with smaller number of neighbors, the neighborhood will be padded with zero\n\n    :param nbr_size: The neighborhood size\n    :param g: The input graph\n    :return: An n x nbr_size neighborhood matrix\n    \"\"\"", "\n", "\n", "nodes", "=", "list", "(", "g", ".", "nodes", "(", ")", ")", "\n", "neighborhood_matrix", "=", "np", ".", "zeros", "(", "shape", "=", "(", "len", "(", "nodes", ")", ",", "nbr_size", ")", ")", "\n", "for", "n", "in", "nodes", ":", "\n", "        ", "nbrs", "=", "list", "(", "set", "(", "nx", ".", "all_neighbors", "(", "g", ",", "n", ")", ")", "|", "{", "n", "}", ")", "\n", "arr", "=", "np", ".", "array", "(", "nbrs", ")", "+", "1", "\n", "if", "arr", ".", "shape", "[", "0", "]", ">", "nbr_size", ":", "\n", "            ", "arr", "=", "np", ".", "random", ".", "choice", "(", "arr", ",", "size", "=", "nbr_size", ",", "replace", "=", "False", ")", "\n", "", "neighborhood_matrix", "[", "n", ",", ":", "arr", ".", "shape", "[", "0", "]", "]", "=", "arr", "\n", "", "return", "neighborhood_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_data.relable_nodes": [[54, 61], ["gap_helper.log", "sorted", "range", "dict", "dict", "graph.nodes", "len", "zip", "zip", "networkx.relabel_nodes"], "function", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log"], ["", "def", "relable_nodes", "(", "graph", ")", ":", "\n", "    ", "gap_helper", ".", "log", "(", "'Node relabeling ...'", ")", "\n", "nodes", "=", "sorted", "(", "graph", ".", "nodes", "(", ")", ")", "\n", "node_ids", "=", "range", "(", "len", "(", "nodes", ")", ")", "\n", "node_id_map", "=", "dict", "(", "zip", "(", "nodes", ",", "node_ids", ")", ")", "\n", "id_node_map", "=", "dict", "(", "zip", "(", "node_ids", ",", "nodes", ")", ")", "\n", "return", "nx", ".", "relabel_nodes", "(", "graph", ",", "node_id_map", ")", ",", "id_node_map", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_evaluate.nmi_ami": [[11, 30], ["gap_helper.log", "pandas.read_csv", "gap_helper.log", "pandas.read_csv", "gap_helper.log", "pd.read_csv.merge", "len", "gap_helper.log", "sklearn.cluster.SpectralClustering", "sklearn.metrics.normalized_mutual_info_score", "sklearn.metrics.adjusted_mutual_info_score", "set", "cluster.SpectralClustering.fit"], "function", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log"], ["def", "nmi_ami", "(", "com_path", ",", "emb_path", ",", "seed", "=", "0", ")", ":", "\n", "    ", "gap_helper", ".", "log", "(", "f'Reading ground truth communities from {com_path}'", ")", "\n", "com_df", "=", "pd", ".", "read_csv", "(", "com_path", ",", "header", "=", "None", ",", "sep", "=", "r'\\s+'", ",", "names", "=", "[", "'node'", ",", "'com'", "]", ",", "index_col", "=", "0", ")", "\n", "gap_helper", ".", "log", "(", "f'Reading embeddings from {emb_path}'", ")", "\n", "emb_df", "=", "pd", ".", "read_csv", "(", "emb_path", ",", "header", "=", "None", ",", "sep", "=", "r'\\s+'", ",", "index_col", "=", "0", ")", "\n", "\n", "gap_helper", ".", "log", "(", "'Building features'", ")", "\n", "labeled_features", "=", "com_df", ".", "merge", "(", "emb_df", ",", "left_index", "=", "True", ",", "right_index", "=", "True", ")", "\n", "ground_truth", "=", "labeled_features", ".", "com", ".", "values", "\n", "features", "=", "labeled_features", ".", "values", "[", ":", ",", "1", ":", "]", "\n", "num_com", "=", "len", "(", "set", "(", "ground_truth", ")", ")", "\n", "\n", "gap_helper", ".", "log", "(", "f'Learning to identify {num_com} clusters using spectral clustering'", ")", "\n", "clustering", "=", "cluster", ".", "SpectralClustering", "(", "\n", "n_clusters", "=", "num_com", ",", "assign_labels", "=", "\"discretize\"", ",", "random_state", "=", "seed", ")", "\n", "predictions", "=", "clustering", ".", "fit", "(", "features", ")", ".", "labels_", "\n", "nmi", "=", "metrics", ".", "normalized_mutual_info_score", "(", "ground_truth", ",", "predictions", ",", "average_method", "=", "'arithmetic'", ")", "\n", "ami", "=", "metrics", ".", "adjusted_mutual_info_score", "(", "ground_truth", ",", "predictions", ",", "average_method", "=", "'arithmetic'", ")", "\n", "return", "nmi", ",", "ami", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_evaluate.auc_score": [[32, 76], ["range", "list", "list", "list", "len", "numpy.dot", "numpy.dot", "range", "zip", "numpy.random.choice", "gap_evaluate.auc_score.get_random_index"], "function", ["None"], ["", "def", "auc_score", "(", "is_dev", "=", "True", ",", "u_embed", "=", "None", ",", "v_embed", "=", "None", ",", "test_edges", "=", "None", ")", ":", "\n", "# Adopted from CANE: https://github.com/thunlp/CANE/blob/master/code/auc.py", "\n", "    ", "if", "is_dev", ":", "\n", "        ", "nodes", "=", "list", "(", "range", "(", "u_embed", ".", "shape", "[", "0", "]", ")", ")", "\n", "test_edges", "=", "list", "(", "zip", "(", "range", "(", "u_embed", ".", "shape", "[", "0", "]", ")", ",", "range", "(", "v_embed", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "nodes", "=", "list", "(", "{", "n", "for", "edge", "in", "test_edges", "for", "n", "in", "edge", "}", ")", "\n", "\n", "", "def", "get_random_index", "(", "u", ",", "v", ",", "lookup", "=", "None", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "node", "=", "np", ".", "random", ".", "choice", "(", "nodes", ")", "\n", "if", "node", "!=", "u", "and", "node", "!=", "v", ":", "\n", "                ", "if", "lookup", "is", "None", ":", "\n", "                    ", "return", "node", "\n", "", "elif", "node", "in", "lookup", ":", "\n", "                    ", "return", "node", "\n", "\n", "", "", "", "", "hit", "=", "0.", "\n", "counter", "=", "0.", "\n", "for", "i", "in", "range", "(", "len", "(", "test_edges", ")", ")", ":", "\n", "        ", "if", "is_dev", ":", "\n", "            ", "u", "=", "v", "=", "i", "\n", "j", "=", "get_random_index", "(", "u", "=", "i", ",", "v", "=", "i", ")", "\n", "", "else", ":", "\n", "            ", "u", "=", "test_edges", "[", "i", "]", "[", "0", "]", "\n", "v", "=", "test_edges", "[", "i", "]", "[", "1", "]", "\n", "if", "u", "not", "in", "u_embed", "or", "v", "not", "in", "u_embed", ":", "\n", "                ", "continue", "\n", "", "j", "=", "get_random_index", "(", "u", "=", "u", ",", "v", "=", "v", ",", "lookup", "=", "v_embed", ")", "\n", "\n", "", "u_emb", "=", "u_embed", "[", "u", "]", "\n", "v_emb", "=", "v_embed", "[", "v", "]", "\n", "j_emb", "=", "v_embed", "[", "j", "]", "\n", "\n", "pos_score", "=", "np", ".", "dot", "(", "u_emb", ",", "v_emb", ")", "\n", "neg_score", "=", "np", ".", "dot", "(", "u_emb", ",", "j_emb", ")", "\n", "\n", "if", "pos_score", ">", "neg_score", ":", "\n", "            ", "hit", "+=", "1.", "\n", "", "elif", "pos_score", "==", "neg_score", ":", "\n", "            ", "hit", "+=", "0.5", "\n", "", "counter", "+=", "1.", "\n", "\n", "", "return", "hit", "/", "counter", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_evaluate.parse": [[78, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.parse_args"], ["", "def", "parse", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--emb-path'", ",", "required", "=", "True", ",", "type", "=", "str", ",", "help", "=", "'Path to the embedding file'", ")", "\n", "parser", ".", "add_argument", "(", "'--te-path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Path to the test edges file'", ")", "\n", "parser", ".", "add_argument", "(", "'--com-path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "help", "=", "'Path to the ground truth community file'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_evaluate.main": [[87, 117], ["gap_helper.log", "gap_helper.log", "gap_helper.read_embedding", "networkx.read_edgelist", "gap_helper.log", "range", "numpy.mean", "numpy.std", "gap_helper.log", "gap_helper.log", "gap_helper.log", "gap_evaluate.nmi_ami", "gap_helper.log", "gap_helper.log", "gap_evaluate.auc_score", "scores.append", "list", "nx.read_edgelist.edges"], "function", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.read_embedding", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_evaluate.nmi_ami", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_evaluate.auc_score"], ["", "def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "gap_helper", ".", "VERBOSE", "=", "args", ".", "verbose", "\n", "if", "args", ".", "te_path", "==", "''", "and", "args", ".", "com_path", "==", "''", ":", "\n", "        ", "gap_helper", ".", "log", "(", "'Atleast a path to test edges file or ground truth community file should be specified'", ",", "\n", "level", "=", "gap_helper", ".", "ERROR", ")", "\n", "", "else", ":", "\n", "        ", "results", "=", "{", "}", "\n", "if", "args", ".", "te_path", "!=", "''", ":", "\n", "            ", "gap_helper", ".", "log", "(", "'Running link prediction'", ",", "level", "=", "gap_helper", ".", "INFO", ")", "\n", "embeddings", "=", "gap_helper", ".", "read_embedding", "(", "args", ".", "emb_path", ")", "\n", "test_graph", "=", "nx", ".", "read_edgelist", "(", "args", ".", "te_path", ",", "nodetype", "=", "int", ")", "\n", "scores", "=", "[", "]", "\n", "gap_helper", ".", "log", "(", "'Computing AUC'", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "                ", "score", "=", "auc_score", "(", "is_dev", "=", "False", ",", "u_embed", "=", "embeddings", ",", "v_embed", "=", "embeddings", ",", "\n", "test_edges", "=", "list", "(", "test_graph", ".", "edges", "(", ")", ")", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "", "avg", "=", "np", ".", "mean", "(", "scores", ")", "\n", "std", "=", "np", ".", "std", "(", "scores", ")", "\n", "gap_helper", ".", "log", "(", "f\"Average auc score = {avg}\"", ")", "\n", "gap_helper", ".", "log", "(", "f\"Standard deviation = {std}\"", ")", "\n", "results", "[", "'link_prediction'", "]", "=", "avg", ",", "std", "\n", "", "if", "args", ".", "com_path", "!=", "''", ":", "\n", "            ", "gap_helper", ".", "log", "(", "'Running node clustering'", ")", "\n", "nmi", ",", "ami", "=", "nmi_ami", "(", "com_path", "=", "args", ".", "com_path", ",", "emb_path", "=", "args", ".", "emb_path", ")", "\n", "gap_helper", ".", "log", "(", "f'NMI: {nmi}'", ")", "\n", "gap_helper", ".", "log", "(", "f'AMI: {ami}'", ")", "\n", "results", "[", "'node_clustering'", "]", "=", "nmi", ",", "ami", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.read_embedding": [[12, 21], ["gap_helper.log", "open", "line.strip().split", "int", "list", "map", "line.strip"], "function", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log"], ["def", "read_embedding", "(", "path", ")", ":", "\n", "    ", "log", "(", "'Reading embedding from {}'", ".", "format", "(", "path", ")", ")", "\n", "embeddings", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "ln", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "node", "=", "int", "(", "ln", "[", "0", "]", ")", "\n", "embeddings", "[", "node", "]", "=", "list", "(", "map", "(", "float", ",", "ln", "[", "1", ":", "]", ")", ")", "\n", "", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log": [[23, 37], ["sys.stdout.flush", "print", "sys.stdout.write", "sys.stdout.write", "numpy.searchsorted", "numpy.searchsorted", "range", "range"], "function", ["None"], ["", "def", "log", "(", "msg", ",", "ret", "=", "False", ",", "progress", "=", "None", ",", "intervals", "=", "None", ",", "level", "=", "INFO", ")", ":", "\n", "    ", "global", "VERBOSE", "\n", "if", "VERBOSE", ":", "\n", "        ", "if", "ret", "or", "progress", "is", "not", "None", ":", "\n", "            ", "if", "progress", "is", "None", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "f'\\r{level}: {msg}'", ")", "\n", "", "else", ":", "\n", "#sys.stdout.write(f'\\rPROG: Batch {progress}/{len(intervals)}')", "\n", "                ", "p", "=", "f\"{PROG}: {msg} [\"", "+", "''", ".", "join", "(", "'='", "for", "_", "in", "range", "(", "progress", ")", ")", "\n", "space", "=", "' '", ".", "join", "(", "''", "for", "_", "in", "range", "(", "100", "-", "progress", ")", ")", "+", "f'{np.searchsorted(intervals, progress)}%]'", "\n", "sys", ".", "stdout", ".", "write", "(", "f'\\r{np.searchsorted(intervals, progress)}%'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"INFO: {msg}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.scale_min_max": [[39, 44], ["old_values.min", "old_values.max"], "function", ["None"], ["", "", "", "def", "scale_min_max", "(", "old_values", ",", "new_max", ",", "new_min", ")", ":", "\n", "    ", "old_min", "=", "old_values", ".", "min", "(", ")", "\n", "old_max", "=", "old_values", ".", "max", "(", ")", "\n", "val_std", "=", "(", "old_values", "-", "old_min", ")", "/", "(", "old_max", "-", "old_min", ")", "\n", "return", "val_std", "*", "(", "new_max", "-", "new_min", ")", "+", "new_min", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.visualize_attention": [[46, 53], ["gap_helper.scale_min_max", "weights[].data.numpy", "open", "f.write", "range", "int", "len"], "function", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.scale_min_max"], ["", "def", "visualize_attention", "(", "nodes", ",", "weights", ")", ":", "\n", "    ", "weights_", "=", "scale_min_max", "(", "weights", "[", "weights", "!=", "0", "]", ".", "data", ".", "numpy", "(", ")", ",", "new_max", "=", "1", ",", "new_min", "=", "0", ")", "\n", "nodes_", "=", "nodes", "[", "nodes", "!=", "0", "]", "\n", "with", "open", "(", "'attention_vis.html'", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "output", "=", "' '", ".", "join", "(", "f\"<span style='background-color: rgba(255, 0, 0, {weights_[i]})'>{int(nodes_[i])}</span>\"", "\n", "for", "i", "in", "range", "(", "len", "(", "nodes_", ")", ")", "if", "nodes_", "[", "i", "]", "!=", "0", ")", "\n", "f", ".", "write", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.parse_args": [[55, 83], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--input'", ",", "default", "=", "'../data/cora/graph.txt'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Path to the graph file'", ")", "\n", "parser", ".", "add_argument", "(", "'--fmt'", ",", "type", "=", "str", ",", "default", "=", "'edgelist'", ",", "\n", "help", "=", "\"Format ('edgelist-Default', 'adjlist') of the input graph file. \"", ")", "\n", "parser", ".", "add_argument", "(", "'--output-dir'", ",", "type", "=", "str", ",", "default", "=", "\"../data/cora/outputs/\"", ",", "\n", "help", "=", "'Path to save outputs, mainly the embedding file.'", ")", "\n", "parser", ".", "add_argument", "(", "'--dim'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "\n", "help", "=", "'Embedding dimension. Default is 200'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'The number of training epochs. Default is 100'", ")", "\n", "parser", ".", "add_argument", "(", "'--tr-rate'", ",", "type", "=", "float", ",", "default", "=", ".15", ",", "\n", "help", "=", "'Use only tr-rate fraction of the edges for train-set, a value in (0, 1]. Default is 0.15'", ")", "\n", "parser", ".", "add_argument", "(", "'--dev-rate'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "\n", "help", "=", "'Use dev-rate fraction of the training set for dev-set, a value in [0, 1). Default is 0.2'", ")", "\n", "parser", ".", "add_argument", "(", "'--learning-rate'", ",", "type", "=", "float", ",", "default", "=", ".0001", ",", "\n", "help", "=", "'The learning rate. Default is 0.0001'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout-rate'", ",", "type", "=", "float", ",", "default", "=", ".5", ",", "\n", "help", "=", "'The dropout rate. Default is 0.5'", ")", "\n", "parser", ".", "add_argument", "(", "'--nbr-size'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'The maximum neighborhood size. Default is 100'", ")", "\n", "parser", ".", "add_argument", "(", "'--directed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Whether the graph is directed. 0 - undirected, 1- directed. Default is 1'", ")", "\n", "parser", ".", "add_argument", "(", "'--verbose'", ",", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "help", "=", "\"Turn logging on or off - (0 - off, Any value - on). Default is 1\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_model.RankingLoss.__init__": [[7, 12], ["model.source_rep.mul().sum", "model.source_rep.mul().sum", "torch.relu", "torch.relu", "torch.mean", "torch.mean", "model.source_rep.mul", "model.source_rep.mul"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "margin", "=", "0.5", ")", ":", "\n", "        ", "model_score", "=", "model", ".", "source_rep", ".", "mul", "(", "model", ".", "target_rep", ")", ".", "sum", "(", "1", ")", "\n", "noise_score", "=", "model", ".", "source_rep", ".", "mul", "(", "model", ".", "negative_rep", ")", ".", "sum", "(", "1", ")", "\n", "score", "=", "t", ".", "relu", "(", "margin", "-", "model_score", "+", "noise_score", ")", "\n", "self", ".", "loss", "=", "t", ".", "mean", "(", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_model.Encoder.__init__": [[20, 26], ["torch.Module.__init__", "gap_model.Encoder._init"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.GapWrapper.__init__", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_model.GAP._init"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "rate", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "self", ".", "rate", "=", "rate", "\n", "self", ".", "_init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_model.Encoder._init": [[27, 31], ["torch.Embedding", "torch.Embedding", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.Dropout", "torch.Dropout"], "methods", ["None"], ["", "def", "_init", "(", "self", ")", ":", "\n", "        ", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "self", ".", "in_dim", ",", "self", ".", "out_dim", ",", "padding_idx", "=", "0", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "embedding", ".", "weight", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "self", ".", "rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_model.Encoder.forward": [[32, 34], ["gap_model.Encoder.dropout", "gap_model.Encoder.embedding().transpose", "gap_model.Encoder.embedding"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "dropout", "(", "self", ".", "embedding", "(", "x", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_model.GAP.__init__": [[42, 48], ["torch.Module.__init__", "gap_model.GAP._init"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.GapWrapper.__init__", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_model.GAP._init"], ["def", "__init__", "(", "self", ",", "num_nodes", ",", "emb_dim", ",", "rate", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "GAP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "rate", "=", "rate", "\n", "self", ".", "_init", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_model.GAP._init": [[49, 53], ["gap_model.Encoder", "torch.Parameter", "torch.Parameter", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "_init", "(", "self", ")", ":", "\n", "        ", "self", ".", "encoder", "=", "Encoder", "(", "in_dim", "=", "self", ".", "num_nodes", "+", "1", ",", "out_dim", "=", "self", ".", "emb_dim", ",", "rate", "=", "self", ".", "rate", ")", "\n", "self", ".", "attention_parameter", "=", "nn", ".", "Parameter", "(", "t", ".", "FloatTensor", "(", "self", ".", "emb_dim", ",", "self", ".", "emb_dim", ")", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "attention_parameter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_model.GAP._model_forward": [[54, 73], ["gap_model.GAP.encoder", "gap_model.GAP.encoder", "gap_model.GAP.source_emb.transpose().matmul().matmul", "torch.tanh", "torch.tanh", "torch.mean", "torch.mean", "torch.softmax", "torch.softmax", "torch.mean().transpose", "torch.mean().transpose", "torch.softmax", "torch.softmax", "gap_model.GAP.source_emb.matmul().squeeze", "gap_model.GAP.target_emb.matmul().squeeze", "source_mask.unsqueeze", "target_mask.unsqueeze", "gap_model.GAP.source_emb.transpose().matmul", "torch.mean", "torch.mean", "gap_model.GAP.source_emb.matmul", "gap_model.GAP.target_emb.matmul", "gap_model.GAP.attention_parameter.unsqueeze", "gap_model.GAP.source_emb.transpose"], "methods", ["None"], ["", "def", "_model_forward", "(", "self", ",", "source_nh", ",", "target_nh", ",", "source_mask", ",", "target_mask", ")", ":", "\n", "# self.source_emb.shape = self.target_emb.shape = [batch_size, emb_dim, neighborhood_size]", "\n", "        ", "self", ".", "source_emb", "=", "self", ".", "encoder", "(", "source_nh", ")", "\n", "self", ".", "target_emb", "=", "self", ".", "encoder", "(", "target_nh", ")", "\n", "\n", "self", ".", "source_target_sim", "=", "self", ".", "source_emb", ".", "transpose", "(", "1", ",", "2", ")", ".", "matmul", "(", "\n", "self", ".", "attention_parameter", ".", "unsqueeze", "(", "0", ")", ")", ".", "matmul", "(", "self", ".", "target_emb", ")", "\n", "self", ".", "source_target_sim", "=", "t", ".", "tanh", "(", "self", ".", "source_target_sim", ")", "\n", "\n", "source_attention_vec", "=", "t", ".", "mean", "(", "self", ".", "source_target_sim", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "source_attention_vec", "=", "source_attention_vec", "+", "source_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "self", ".", "source_attention_vec", "=", "t", ".", "softmax", "(", "source_attention_vec", ",", "dim", "=", "1", ")", "\n", "\n", "target_attention_vec", "=", "t", ".", "mean", "(", "self", ".", "source_target_sim", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "target_attention_vec", "=", "target_attention_vec", "+", "target_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "self", ".", "target_attention_vec", "=", "t", ".", "softmax", "(", "target_attention_vec", ",", "dim", "=", "1", ")", "\n", "\n", "self", ".", "source_rep", "=", "self", ".", "source_emb", ".", "matmul", "(", "self", ".", "source_attention_vec", ")", ".", "squeeze", "(", ")", "\n", "self", ".", "target_rep", "=", "self", ".", "target_emb", ".", "matmul", "(", "self", ".", "target_attention_vec", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_model.GAP._noise_forward": [[74, 86], ["gap_model.GAP.encoder", "gap_model.GAP.source_emb.transpose().matmul().matmul", "torch.tanh", "torch.tanh", "torch.mean().transpose", "torch.mean().transpose", "torch.softmax", "torch.softmax", "gap_model.GAP.neg_emb.matmul().squeeze", "negative_mask.unsqueeze", "gap_model.GAP.source_emb.transpose().matmul", "torch.mean", "torch.mean", "gap_model.GAP.neg_emb.matmul", "gap_model.GAP.attention_parameter.unsqueeze", "gap_model.GAP.source_emb.transpose"], "methods", ["None"], ["", "def", "_noise_forward", "(", "self", ",", "negative_nh", ",", "negative_mask", ")", ":", "\n", "        ", "self", ".", "neg_emb", "=", "self", ".", "encoder", "(", "negative_nh", ")", "\n", "\n", "self", ".", "source_neg_sim", "=", "self", ".", "source_emb", ".", "transpose", "(", "1", ",", "2", ")", ".", "matmul", "(", "\n", "self", ".", "attention_parameter", ".", "unsqueeze", "(", "0", ")", ")", ".", "matmul", "(", "self", ".", "neg_emb", ")", "\n", "self", ".", "source_neg_sim", "=", "t", ".", "tanh", "(", "self", ".", "source_neg_sim", ")", "\n", "\n", "neg_attention_vec", "=", "t", ".", "mean", "(", "self", ".", "source_neg_sim", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "neg_attention_vec", "=", "neg_attention_vec", "+", "negative_mask", ".", "unsqueeze", "(", "-", "1", ")", "\n", "self", ".", "neg_attention_vec", "=", "t", ".", "softmax", "(", "neg_attention_vec", ",", "dim", "=", "1", ")", "\n", "\n", "self", ".", "negative_rep", "=", "self", ".", "neg_emb", ".", "matmul", "(", "self", ".", "neg_attention_vec", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_model.GAP.forward": [[87, 93], ["gap_model.GAP._model_forward", "gap_model.GAP._noise_forward"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_model.GAP._model_forward", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_model.GAP._noise_forward"], ["", "def", "forward", "(", "self", ",", "source_neighborhood", "=", "None", ",", "target_neighborhood", "=", "None", ",", "negative_neighborhood", "=", "None", ",", "\n", "source_mask", "=", "None", ",", "target_mask", "=", "None", ",", "negative_mask", "=", "None", ")", ":", "\n", "        ", "self", ".", "_model_forward", "(", "source_nh", "=", "source_neighborhood", ",", "target_nh", "=", "target_neighborhood", ",", "\n", "source_mask", "=", "source_mask", ",", "target_mask", "=", "target_mask", ")", "\n", "if", "negative_neighborhood", "is", "not", "None", ":", "\n", "            ", "self", ".", "_noise_forward", "(", "negative_nh", "=", "negative_neighborhood", ",", "negative_mask", "=", "negative_mask", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.GapWrapper.__init__": [[22, 31], ["gap_data.Data", "torch.device", "gap_helper.log", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "_args", "=", "args", "\n", "self", ".", "data", "=", "Data", "(", "args", ")", "\n", "self", ".", "loss_fun", "=", "gap_model", ".", "RankingLoss", "\n", "self", ".", "model", "=", "None", "\n", "self", ".", "context_embedding", "=", "{", "}", "\n", "self", ".", "global_embedding", "=", "{", "}", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "gap_helper", ".", "log", "(", "f'Running GAP on a {self.device} machine'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.GapWrapper._validate": [[32, 43], ["gap.GapWrapper._infer", "gap.GapWrapper.loss_fun", "gap_evaluate.auc_score", "losses.append", "aucs.append", "numpy.mean", "numpy.mean", "gap.to_cpu_tensor"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.GapWrapper._infer", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_evaluate.auc_score", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.to_cpu_tensor"], ["", "def", "_validate", "(", "self", ",", "dev_batches", ")", ":", "\n", "        ", "args", "=", "self", ".", "_args", "\n", "losses", "=", "[", "]", "\n", "aucs", "=", "[", "]", "\n", "for", "batch", "in", "dev_batches", ":", "\n", "            ", "source_embed", ",", "target_embed", "=", "self", ".", "_infer", "(", "batch", "=", "batch", ")", "\n", "val_crt", "=", "self", ".", "loss_fun", "(", "self", ".", "model", ")", "\n", "val_auc", "=", "gap_evaluate", ".", "auc_score", "(", "u_embed", "=", "source_embed", ",", "v_embed", "=", "target_embed", ")", "\n", "losses", ".", "append", "(", "to_cpu_tensor", "(", "val_crt", ".", "loss", ",", "self", ".", "device", ")", ")", "\n", "aucs", ".", "append", "(", "val_auc", ")", "\n", "", "return", "np", ".", "mean", "(", "losses", ")", ",", "np", ".", "mean", "(", "aucs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.GapWrapper.train": [[44, 78], ["gap_model.GAP", "gap.GapWrapper.model.to", "torch.optim.Adam", "isinstance", "range", "gap.GapWrapper.model.parameters", "itertools.tee", "itertools.tee", "isinstance", "gap.GapWrapper._infer", "gap.GapWrapper.loss_fun", "torch.optim.Adam.zero_grad", "gap.GapWrapper.loss.backward", "torch.optim.Adam.step", "gap.GapWrapper._validate", "gap_helper.log", "gap_helper.log", "isinstance"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.GapWrapper._infer", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.GapWrapper._validate", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "_args", "\n", "self", ".", "model", "=", "gap_model", ".", "GAP", "(", "num_nodes", "=", "self", ".", "data", ".", "num_nodes", ",", "emb_dim", "=", "args", ".", "dim", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "learning_rate", ")", "\n", "if", "isinstance", "(", "self", ".", "data", ".", "train_inputs", ",", "list", ")", ":", "\n", "            ", "\"\"\"\n            In Memory batches\n            \"\"\"", "\n", "train_inputs", "=", "self", ".", "data", ".", "train_inputs", "\n", "dev_inputs", "=", "self", ".", "data", ".", "dev_inputs", "\n", "", "else", ":", "\n", "            ", "\"\"\"\n            We create multiple copies of the training and dev batch iterators.\n            Useful when the training input is large, > 100000 edges\n            \"\"\"", "\n", "train_inputs", "=", "tee", "(", "self", ".", "data", ".", "train_inputs", ",", "args", ".", "epochs", ")", "\n", "dev_inputs", "=", "tee", "(", "self", ".", "data", ".", "dev_inputs", ",", "args", ".", "epochs", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "args", ".", "epochs", ")", ":", "\n", "            ", "train_batches", "=", "train_inputs", "if", "isinstance", "(", "train_inputs", ",", "list", ")", "else", "train_inputs", "[", "epoch", "]", "\n", "for", "batch", "in", "train_batches", ":", "\n", "                ", "self", ".", "_infer", "(", "batch", ")", "\n", "criterion", "=", "self", ".", "loss_fun", "(", "self", ".", "model", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "criterion", ".", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "args", ".", "dev_rate", ">", "0", ":", "\n", "                ", "val_loss", ",", "val_auc", "=", "self", ".", "_validate", "(", "dev_inputs", "if", "isinstance", "(", "dev_inputs", ",", "list", ")", "else", "dev_inputs", "[", "epoch", "]", ")", "\n", "gap_helper", ".", "log", "(", "'Epoch: {}/{} training loss: {:.5f} validation loss: {:.5f} validation AUC: {:.5f}'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "criterion", ".", "loss", ".", "data", ",", "val_loss", ",", "val_auc", ")", ")", "\n", "", "else", ":", "\n", "                ", "gap_helper", ".", "log", "(", "\"Epoch {}/{} training loss = {:.5f}\"", ".", "format", "(", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "criterion", ".", "loss", ".", "data", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.GapWrapper._infer": [[79, 93], ["gap.GapWrapper.model", "gap.to_cpu_tensor", "gap.to_cpu_tensor", "batch.negative_neighborhood.to", "batch.negative_mask.to", "batch.source_neighborhood.to", "batch.target_neighborhood.to", "batch.source_mask.to", "batch.target_mask.to"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.to_cpu_tensor", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.to_cpu_tensor"], ["", "", "", "def", "_infer", "(", "self", ",", "batch", ",", "use_negative", "=", "True", ")", ":", "\n", "        ", "args", "=", "self", ".", "_args", "\n", "device", "=", "self", ".", "device", "\n", "if", "use_negative", ":", "\n", "            ", "neg_nh", ",", "neg_msk", "=", "batch", ".", "negative_neighborhood", ".", "to", "(", "device", ")", ",", "batch", ".", "negative_mask", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "neg_nh", ",", "neg_msk", "=", "None", ",", "None", "\n", "\n", "", "self", ".", "model", "(", "source_neighborhood", "=", "batch", ".", "source_neighborhood", ".", "to", "(", "device", ")", ",", "\n", "target_neighborhood", "=", "batch", ".", "target_neighborhood", ".", "to", "(", "device", ")", ",", "\n", "negative_neighborhood", "=", "neg_nh", ",", "source_mask", "=", "batch", ".", "source_mask", ".", "to", "(", "device", ")", ",", "\n", "target_mask", "=", "batch", ".", "target_mask", ".", "to", "(", "device", ")", ",", "\n", "negative_mask", "=", "neg_msk", ")", "\n", "return", "to_cpu_tensor", "(", "self", ".", "model", ".", "source_rep", ",", "device", ")", ",", "to_cpu_tensor", "(", "self", ".", "model", ".", "target_rep", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.GapWrapper.infer_embeddings": [[94, 113], ["numpy.mean", "range", "gap.GapWrapper._infer", "gap.GapWrapper.infer_embeddings.populate_context_embedding"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.GapWrapper._infer"], ["", "def", "infer_embeddings", "(", "self", ",", "agg", "=", "lambda", "l", ":", "np", ".", "mean", "(", "l", ",", "axis", "=", "0", ")", ")", ":", "\n", "        ", "def", "populate_context_embedding", "(", "source_nodes", ",", "target_nodes", ",", "source_emb", ",", "target_emb", ")", ":", "\n", "            ", "def", "apply", "(", "u_emb", ",", "u", ")", ":", "\n", "                ", "u_name", "=", "self", ".", "data", ".", "id_to_node", "[", "u", "]", "\n", "if", "u", "in", "self", ".", "context_embedding", ":", "\n", "                    ", "self", ".", "context_embedding", "[", "u_name", "]", ".", "append", "(", "u_emb", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "context_embedding", "[", "u_name", "]", "=", "[", "u_emb", "]", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "source_nodes", ")", ")", ":", "\n", "                ", "apply", "(", "source_emb", "[", "i", "]", ",", "int", "(", "to_cpu_tensor", "(", "source_nodes", "[", "i", "]", ",", "self", ".", "device", ")", ")", ")", "\n", "apply", "(", "target_emb", "[", "i", "]", ",", "int", "(", "to_cpu_tensor", "(", "target_nodes", "[", "i", "]", ",", "self", ".", "device", ")", ")", ")", "\n", "\n", "", "", "for", "batch", "in", "self", ".", "data", ".", "train_inputs", "+", "self", ".", "data", ".", "dev_inputs", ":", "\n", "            ", "src_rep", ",", "trg_rep", "=", "self", ".", "_infer", "(", "batch", "=", "batch", ",", "use_negative", "=", "False", ")", "\n", "populate_context_embedding", "(", "batch", ".", "source", ",", "batch", ".", "target", ",", "src_rep", ",", "trg_rep", ")", "\n", "\n", "", "for", "node", "in", "self", ".", "context_embedding", ":", "\n", "            ", "emb", "=", "np", ".", "array", "(", "self", ".", "context_embedding", "[", "node", "]", ")", "\n", "self", ".", "global_embedding", "[", "node", "]", "=", "emb", "if", "len", "(", "emb", ".", "shape", ")", "==", "1", "else", "agg", "(", "emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.GapWrapper.save_embeddings": [[114, 132], ["os.path.join", "gap_helper.log", "os.path.join", "gap_helper.log", "open", "open", "f.write", "str", "f.write", "int", "str", "str"], "methods", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap_helper.log"], ["", "", "def", "save_embeddings", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "_args", "\n", "if", "args", ".", "output_dir", "!=", "''", ":", "\n", "            ", "suffix", "=", "''", "if", "args", ".", "tr_rate", "==", "1", "else", "f'_{str(int(args.tr_rate * 100))}'", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f'gap_context{suffix}.emb'", ")", "\n", "gap_helper", ".", "log", "(", "f'Saving context embedding to {path}'", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "for", "node", "in", "self", ".", "context_embedding", ":", "\n", "                    ", "for", "emb", "in", "self", ".", "context_embedding", "[", "node", "]", ":", "\n", "                        ", "output", "=", "'{} {}\\n'", ".", "format", "(", "node", ",", "' '", ".", "join", "(", "str", "(", "val", ")", "for", "val", "in", "emb", ")", ")", "\n", "f", ".", "write", "(", "output", ")", "\n", "\n", "", "", "", "path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "f'gap_global{suffix}.emb'", ")", "\n", "gap_helper", ".", "log", "(", "f'Saving aggregated global embedding to {path}'", ")", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "for", "node", "in", "self", ".", "global_embedding", ":", "\n", "                    ", "output", "=", "'{} {}\\n'", ".", "format", "(", "node", ",", "' '", ".", "join", "(", "str", "(", "val", ")", "for", "val", "in", "self", ".", "global_embedding", "[", "node", "]", ")", ")", "\n", "f", ".", "write", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.to_cpu_tensor": [[134, 138], ["tensor.cpu().data.numpy", "tensor.data.numpy", "tensor.cpu"], "function", ["None"], ["", "", "", "", "", "def", "to_cpu_tensor", "(", "tensor", ",", "device", ")", ":", "\n", "    ", "if", "device", "==", "'cpu'", ":", "\n", "        ", "return", "tensor", ".", "data", ".", "numpy", "(", ")", "\n", "", "return", "tensor", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.main": [[140, 147], ["gap.GapWrapper", "gap.GapWrapper.train", "gap.GapWrapper.infer_embeddings", "gap.GapWrapper.save_embeddings"], "function", ["home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.GapWrapper.train", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.GapWrapper.infer_embeddings", "home.repos.pwc.inspect_result.zekarias-tilahun_GAP.src.gap.GapWrapper.save_embeddings"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "gap_helper", ".", "VERBOSE", "=", "False", "if", "args", ".", "verbose", "==", "0", "else", "True", "\n", "wrapper", "=", "GapWrapper", "(", "args", ")", "\n", "wrapper", ".", "train", "(", ")", "\n", "if", "args", ".", "output_dir", "!=", "''", ":", "\n", "        ", "wrapper", ".", "infer_embeddings", "(", ")", "\n", "wrapper", ".", "save_embeddings", "(", ")", "\n", "\n"]]}