{"home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.config.Config.__init__": [[10, 18], ["configparser.ConfigParser.__init__", "config.Config.read", "argparse.Namespace", "config.Config.update", "dict", "ast.literal_eval", "config.Config.sections", "config.Config.items"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__", "home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.config.Config.update"], ["    ", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "super", "(", "Config", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "read", "(", "path", ")", "\n", "self", ".", "namespace", "=", "Namespace", "(", ")", "\n", "self", ".", "update", "(", "dict", "(", "(", "name", ",", "literal_eval", "(", "value", ")", ")", "\n", "for", "section", "in", "self", ".", "sections", "(", ")", "\n", "for", "name", ",", "value", "in", "self", ".", "items", "(", "section", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.config.Config.__repr__": [[19, 27], ["vars().items", "vars", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "line", "=", "\"-\"", "*", "15", "+", "\"-+-\"", "+", "\"-\"", "*", "25", "+", "\"\\n\"", "\n", "s", "+=", "f\"{'Param':15} | {'Value':^25}\\n\"", "+", "line", "\n", "for", "name", ",", "value", "in", "vars", "(", "self", ".", "namespace", ")", ".", "items", "(", ")", ":", "\n", "            ", "s", "+=", "f\"{name:15} | {str(value):^25}\\n\"", "\n", "", "s", "+=", "line", "\n", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.config.Config.__getattr__": [[28, 30], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "namespace", ",", "attr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.config.Config.__getstate__": [[31, 33], ["vars"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "vars", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.config.Config.__setstate__": [[34, 36], ["config.Config.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.config.Config.update"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.config.Config.update": [[37, 42], ["kwargs.items", "setattr"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "kwargs", ")", ":", "\n", "        ", "for", "name", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "self", ".", "namespace", ",", "name", ",", "value", ")", "\n", "\n", "", "return", "self", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.model.Model.__init__": [[14, 65], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "parser.modules.dropout.IndependentDropout", "parser.modules.BiLSTM", "parser.modules.dropout.SharedDropout", "parser.modules.MLP", "parser.modules.MLP", "parser.modules.MLP", "parser.modules.MLP", "parser.modules.Biaffine", "parser.modules.Biaffine", "parser.modules.CHAR_LSTM", "parser.modules.BertEmbedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "args", "=", "args", "\n", "# the embedding layer", "\n", "self", ".", "word_embed", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "args", ".", "n_words", ",", "\n", "embedding_dim", "=", "args", ".", "n_embed", ")", "\n", "if", "args", ".", "feat", "==", "'char'", ":", "\n", "            ", "self", ".", "feat_embed", "=", "CHAR_LSTM", "(", "n_chars", "=", "args", ".", "n_feats", ",", "\n", "n_embed", "=", "args", ".", "n_char_embed", ",", "\n", "n_out", "=", "args", ".", "n_feat_embed", ")", "\n", "", "elif", "args", ".", "feat", "==", "'bert'", ":", "\n", "            ", "self", ".", "feat_embed", "=", "BertEmbedding", "(", "model", "=", "args", ".", "bert_model", ",", "\n", "n_layers", "=", "args", ".", "n_bert_layers", ",", "\n", "n_out", "=", "args", ".", "n_feat_embed", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "feat_embed", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "args", ".", "n_feats", ",", "\n", "embedding_dim", "=", "args", ".", "n_feat_embed", ")", "\n", "", "self", ".", "embed_dropout", "=", "IndependentDropout", "(", "p", "=", "args", ".", "embed_dropout", ")", "\n", "\n", "# the word-lstm layer", "\n", "self", ".", "lstm", "=", "BiLSTM", "(", "input_size", "=", "args", ".", "n_embed", "+", "args", ".", "n_feat_embed", ",", "\n", "hidden_size", "=", "args", ".", "n_lstm_hidden", ",", "\n", "num_layers", "=", "args", ".", "n_lstm_layers", ",", "\n", "dropout", "=", "args", ".", "lstm_dropout", ")", "\n", "self", ".", "lstm_dropout", "=", "SharedDropout", "(", "p", "=", "args", ".", "lstm_dropout", ")", "\n", "\n", "# the MLP layers", "\n", "self", ".", "mlp_arc_d", "=", "MLP", "(", "n_in", "=", "args", ".", "n_lstm_hidden", "*", "2", ",", "\n", "n_out", "=", "args", ".", "n_mlp_arc", ",", "\n", "dropout", "=", "args", ".", "mlp_dropout", ")", "\n", "self", ".", "mlp_arc_h", "=", "MLP", "(", "n_in", "=", "args", ".", "n_lstm_hidden", "*", "2", ",", "\n", "n_out", "=", "args", ".", "n_mlp_arc", ",", "\n", "dropout", "=", "args", ".", "mlp_dropout", ")", "\n", "self", ".", "mlp_rel_d", "=", "MLP", "(", "n_in", "=", "args", ".", "n_lstm_hidden", "*", "2", ",", "\n", "n_out", "=", "args", ".", "n_mlp_rel", ",", "\n", "dropout", "=", "args", ".", "mlp_dropout", ")", "\n", "self", ".", "mlp_rel_h", "=", "MLP", "(", "n_in", "=", "args", ".", "n_lstm_hidden", "*", "2", ",", "\n", "n_out", "=", "args", ".", "n_mlp_rel", ",", "\n", "dropout", "=", "args", ".", "mlp_dropout", ")", "\n", "\n", "# the Biaffine layers", "\n", "self", ".", "arc_attn", "=", "Biaffine", "(", "n_in", "=", "args", ".", "n_mlp_arc", ",", "\n", "bias_x", "=", "True", ",", "\n", "bias_y", "=", "False", ")", "\n", "self", ".", "rel_attn", "=", "Biaffine", "(", "n_in", "=", "args", ".", "n_mlp_rel", ",", "\n", "n_out", "=", "args", ".", "n_rels", ",", "\n", "bias_x", "=", "True", ",", "\n", "bias_y", "=", "True", ")", "\n", "self", ".", "pad_index", "=", "args", ".", "pad_index", "\n", "self", ".", "unk_index", "=", "args", ".", "unk_index", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.model.Model.load_pretrained": [[66, 72], ["torch.Embedding.from_pretrained", "torch.Embedding.from_pretrained", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "load_pretrained", "(", "self", ",", "embed", "=", "None", ")", ":", "\n", "        ", "if", "embed", "is", "not", "None", ":", "\n", "            ", "self", ".", "pretrained", "=", "nn", ".", "Embedding", ".", "from_pretrained", "(", "embed", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "word_embed", ".", "weight", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.model.Model.forward": [[73, 116], ["words.ne", "words.ne.sum", "words.ge", "words.masked_fill", "model.Model.word_embed", "hasattr", "model.Model.embed_dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "model.Model.lstm", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "model.Model.lstm_dropout", "model.Model.mlp_arc_d", "model.Model.mlp_arc_h", "model.Model.mlp_rel_d", "model.Model.mlp_rel_h", "model.Model.arc_attn", "model.Model.rel_attn().permute", "model.Model.masked_fill_", "model.Model.pretrained", "model.Model.feat_embed", "parser.utils.fn.pad", "float", "model.Model.split", "model.Model.feat_embed", "model.Model.feat_embed", "model.Model.rel_attn", "words.ne.unsqueeze", "words.ne.sum.tolist"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.pad"], ["", "def", "forward", "(", "self", ",", "words", ",", "feats", ")", ":", "\n", "        ", "batch_size", ",", "seq_len", "=", "words", ".", "shape", "\n", "# get the mask and lengths of given batch", "\n", "mask", "=", "words", ".", "ne", "(", "self", ".", "pad_index", ")", "\n", "lens", "=", "mask", ".", "sum", "(", "dim", "=", "1", ")", "\n", "# set the indices larger than num_embeddings to unk_index", "\n", "ext_mask", "=", "words", ".", "ge", "(", "self", ".", "word_embed", ".", "num_embeddings", ")", "\n", "ext_words", "=", "words", ".", "masked_fill", "(", "ext_mask", ",", "self", ".", "unk_index", ")", "\n", "\n", "# get outputs from embedding layers", "\n", "word_embed", "=", "self", ".", "word_embed", "(", "ext_words", ")", "\n", "if", "hasattr", "(", "self", ",", "'pretrained'", ")", ":", "\n", "            ", "word_embed", "+=", "self", ".", "pretrained", "(", "words", ")", "\n", "", "if", "self", ".", "args", ".", "feat", "==", "'char'", ":", "\n", "            ", "feat_embed", "=", "self", ".", "feat_embed", "(", "feats", "[", "mask", "]", ")", "\n", "feat_embed", "=", "pad", "(", "feat_embed", ".", "split", "(", "lens", ".", "tolist", "(", ")", ")", ",", "total_length", "=", "seq_len", ")", "\n", "", "elif", "self", ".", "args", ".", "feat", "==", "'bert'", ":", "\n", "            ", "feat_embed", "=", "self", ".", "feat_embed", "(", "*", "feats", ")", "\n", "", "else", ":", "\n", "            ", "feat_embed", "=", "self", ".", "feat_embed", "(", "feats", ")", "\n", "", "word_embed", ",", "feat_embed", "=", "self", ".", "embed_dropout", "(", "word_embed", ",", "feat_embed", ")", "\n", "# concatenate the word and feat representations", "\n", "embed", "=", "torch", ".", "cat", "(", "(", "word_embed", ",", "feat_embed", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "x", "=", "pack_padded_sequence", "(", "embed", ",", "lens", ",", "True", ",", "False", ")", "\n", "x", ",", "_", "=", "self", ".", "lstm", "(", "x", ")", "\n", "x", ",", "_", "=", "pad_packed_sequence", "(", "x", ",", "True", ",", "total_length", "=", "seq_len", ")", "\n", "x", "=", "self", ".", "lstm_dropout", "(", "x", ")", "\n", "\n", "# apply MLPs to the BiLSTM output states", "\n", "arc_d", "=", "self", ".", "mlp_arc_d", "(", "x", ")", "\n", "arc_h", "=", "self", ".", "mlp_arc_h", "(", "x", ")", "\n", "rel_d", "=", "self", ".", "mlp_rel_d", "(", "x", ")", "\n", "rel_h", "=", "self", ".", "mlp_rel_h", "(", "x", ")", "\n", "\n", "# [batch_size, seq_len, seq_len]", "\n", "s_arc", "=", "self", ".", "arc_attn", "(", "arc_d", ",", "arc_h", ")", "\n", "# [batch_size, seq_len, seq_len, n_rels]", "\n", "s_rel", "=", "self", ".", "rel_attn", "(", "rel_d", ",", "rel_h", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "# set the scores that exceed the length of each sentence to -inf", "\n", "s_arc", ".", "masked_fill_", "(", "~", "mask", ".", "unsqueeze", "(", "1", ")", ",", "float", "(", "'-inf'", ")", ")", "\n", "\n", "return", "s_arc", ",", "s_rel", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.model.Model.load": [[117, 127], ["torch.load", "torch.load", "torch.load", "torch.load", "cls", "cls.load_pretrained", "cls.load_state_dict", "cls.to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.model.Model.load_pretrained"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "path", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "state", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "device", ")", "\n", "model", "=", "cls", "(", "state", "[", "'args'", "]", ")", "\n", "model", ".", "load_pretrained", "(", "state", "[", "'pretrained'", "]", ")", "\n", "model", ".", "load_state_dict", "(", "state", "[", "'state_dict'", "]", ",", "False", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.model.Model.save": [[128, 138], ["hasattr", "torch.save", "torch.save", "torch.save", "torch.save", "model.Model.state_dict", "state_dict.pop"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.save", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.save", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.save", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.save"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "state_dict", ",", "pretrained", "=", "self", ".", "state_dict", "(", ")", ",", "None", "\n", "if", "hasattr", "(", "self", ",", "'pretrained'", ")", ":", "\n", "            ", "pretrained", "=", "state_dict", ".", "pop", "(", "'pretrained.weight'", ")", "\n", "", "state", "=", "{", "\n", "'args'", ":", "self", ".", "args", ",", "\n", "'state_dict'", ":", "state_dict", ",", "\n", "'pretrained'", ":", "pretrained", "\n", "}", "\n", "torch", ".", "save", "(", "state", ",", "path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.__init__": [[11, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "pad", "=", "None", ",", "unk", "=", "None", ",", "bos", "=", "None", ",", "eos", "=", "None", ",", "\n", "lower", "=", "False", ",", "use_vocab", "=", "True", ",", "tokenize", "=", "None", ",", "fn", "=", "None", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "unk", "=", "unk", "\n", "self", ".", "bos", "=", "bos", "\n", "self", ".", "eos", "=", "eos", "\n", "self", ".", "lower", "=", "lower", "\n", "self", ".", "use_vocab", "=", "use_vocab", "\n", "self", ".", "tokenize", "=", "tokenize", "\n", "self", ".", "fn", "=", "fn", "\n", "\n", "self", ".", "specials", "=", "[", "token", "for", "token", "in", "[", "pad", ",", "unk", ",", "bos", ",", "eos", "]", "\n", "if", "token", "is", "not", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.__repr__": [[26, 41], ["params.append", "params.append", "params.append", "params.append", "params.append", "params.append"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "params", "=", "[", "]", "\n", "if", "self", ".", "pad", "is", "not", "None", ":", "\n", "            ", "params", ".", "append", "(", "f\"pad={self.pad}\"", ")", "\n", "", "if", "self", ".", "unk", "is", "not", "None", ":", "\n", "            ", "params", ".", "append", "(", "f\"unk={self.unk}\"", ")", "\n", "", "if", "self", ".", "bos", "is", "not", "None", ":", "\n", "            ", "params", ".", "append", "(", "f\"bos={self.bos}\"", ")", "\n", "", "if", "self", ".", "eos", "is", "not", "None", ":", "\n", "            ", "params", ".", "append", "(", "f\"eos={self.eos}\"", ")", "\n", "", "if", "self", ".", "lower", ":", "\n", "            ", "params", ".", "append", "(", "f\"lower={self.lower}\"", ")", "\n", "", "if", "not", "self", ".", "use_vocab", ":", "\n", "            ", "params", ".", "append", "(", "f\"use_vocab={self.use_vocab}\"", ")", "\n", "", "return", "f\"({self.name}): {self.__class__.__name__}({', '.join(params)})\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.pad_index": [[42, 45], ["field.Field.specials.index"], "methods", ["None"], ["", "@", "property", "\n", "def", "pad_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "specials", ".", "index", "(", "self", ".", "pad", ")", "if", "self", ".", "pad", "is", "not", "None", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.unk_index": [[46, 49], ["field.Field.specials.index"], "methods", ["None"], ["", "@", "property", "\n", "def", "unk_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "specials", ".", "index", "(", "self", ".", "unk", ")", "if", "self", ".", "unk", "is", "not", "None", "else", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.bos_index": [[50, 53], ["field.Field.specials.index"], "methods", ["None"], ["", "@", "property", "\n", "def", "bos_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "specials", ".", "index", "(", "self", ".", "bos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.eos_index": [[54, 57], ["field.Field.specials.index"], "methods", ["None"], ["", "@", "property", "\n", "def", "eos_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "specials", ".", "index", "(", "self", ".", "eos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.transform": [[58, 67], ["field.Field.tokenize", "field.Field.fn", "str.lower"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "sequence", ")", ":", "\n", "        ", "if", "self", ".", "tokenize", "is", "not", "None", ":", "\n", "            ", "sequence", "=", "self", ".", "tokenize", "(", "sequence", ")", "\n", "", "if", "self", ".", "lower", ":", "\n", "            ", "sequence", "=", "[", "str", ".", "lower", "(", "token", ")", "for", "token", "in", "sequence", "]", "\n", "", "if", "self", ".", "fn", "is", "not", "None", ":", "\n", "            ", "sequence", "=", "self", ".", "fn", "(", "sequence", ")", "\n", "\n", "", "return", "sequence", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.build": [[68, 87], ["getattr", "collections.Counter", "parser.utils.vocab.Vocab", "field.Field.transform", "field.Field.vocab.extend", "torch.zeros", "torch.std", "len", "field.Field.transform", "field.Field.vocab.token2id"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.transform", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.extend", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.transform", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.token2id"], ["", "def", "build", "(", "self", ",", "corpus", ",", "min_freq", "=", "1", ",", "embed", "=", "None", ")", ":", "\n", "        ", "sequences", "=", "getattr", "(", "corpus", ",", "self", ".", "name", ")", "\n", "counter", "=", "Counter", "(", "token", "for", "sequence", "in", "sequences", "\n", "for", "token", "in", "self", ".", "transform", "(", "sequence", ")", ")", "\n", "self", ".", "vocab", "=", "Vocab", "(", "counter", ",", "min_freq", ",", "self", ".", "specials", ")", "\n", "\n", "if", "not", "embed", ":", "\n", "            ", "self", ".", "embed", "=", "None", "\n", "", "else", ":", "\n", "            ", "tokens", "=", "self", ".", "transform", "(", "embed", ".", "tokens", ")", "\n", "# if the `unk` token has existed in the pretrained,", "\n", "# then replace it with a self-defined one", "\n", "if", "embed", ".", "unk", ":", "\n", "                ", "tokens", "[", "embed", ".", "unk_index", "]", "=", "self", ".", "unk", "\n", "\n", "", "self", ".", "vocab", ".", "extend", "(", "tokens", ")", "\n", "self", ".", "embed", "=", "torch", ".", "zeros", "(", "len", "(", "self", ".", "vocab", ")", ",", "embed", ".", "dim", ")", "\n", "self", ".", "embed", "[", "self", ".", "vocab", ".", "token2id", "(", "tokens", ")", "]", "=", "embed", ".", "vectors", "\n", "self", ".", "embed", "/=", "torch", ".", "std", "(", "self", ".", "embed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.numericalize": [[88, 100], ["field.Field.transform", "torch.tensor", "field.Field.vocab.token2id"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.transform", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.token2id"], ["", "", "def", "numericalize", "(", "self", ",", "sequences", ")", ":", "\n", "        ", "sequences", "=", "[", "self", ".", "transform", "(", "sequence", ")", "for", "sequence", "in", "sequences", "]", "\n", "if", "self", ".", "use_vocab", ":", "\n", "            ", "sequences", "=", "[", "self", ".", "vocab", ".", "token2id", "(", "sequence", ")", "\n", "for", "sequence", "in", "sequences", "]", "\n", "", "if", "self", ".", "bos", ":", "\n", "            ", "sequences", "=", "[", "[", "self", ".", "bos_index", "]", "+", "sequence", "for", "sequence", "in", "sequences", "]", "\n", "", "if", "self", ".", "eos", ":", "\n", "            ", "sequences", "=", "[", "sequence", "+", "[", "self", ".", "eos_index", "]", "for", "sequence", "in", "sequences", "]", "\n", "", "sequences", "=", "[", "torch", ".", "tensor", "(", "sequence", ")", "for", "sequence", "in", "sequences", "]", "\n", "\n", "return", "sequences", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.CharField.__init__": [[104, 107], ["field.Field.__init__", "kwargs.pop"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "fix_len", "=", "kwargs", ".", "pop", "(", "'fix_len'", ")", "if", "'fix_len'", "in", "kwargs", "else", "-", "1", "\n", "super", "(", "CharField", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.CharField.build": [[108, 126], ["getattr", "collections.Counter", "parser.utils.vocab.Vocab", "field.CharField.transform", "field.CharField.vocab.extend", "torch.zeros", "len", "field.CharField.transform", "field.CharField.vocab.token2id"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.transform", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.extend", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.transform", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.token2id"], ["", "def", "build", "(", "self", ",", "corpus", ",", "min_freq", "=", "1", ",", "embed", "=", "None", ")", ":", "\n", "        ", "sequences", "=", "getattr", "(", "corpus", ",", "self", ".", "name", ")", "\n", "counter", "=", "Counter", "(", "char", "for", "sequence", "in", "sequences", "for", "token", "in", "sequence", "\n", "for", "char", "in", "self", ".", "transform", "(", "token", ")", ")", "\n", "self", ".", "vocab", "=", "Vocab", "(", "counter", ",", "min_freq", ",", "self", ".", "specials", ")", "\n", "\n", "if", "not", "embed", ":", "\n", "            ", "self", ".", "embed", "=", "None", "\n", "", "else", ":", "\n", "            ", "tokens", "=", "self", ".", "transform", "(", "embed", ".", "tokens", ")", "\n", "# if the `unk` token has existed in the pretrained,", "\n", "# then replace it with a self-defined one", "\n", "if", "embed", ".", "unk", ":", "\n", "                ", "tokens", "[", "embed", ".", "unk_index", "]", "=", "self", ".", "unk", "\n", "\n", "", "self", ".", "vocab", ".", "extend", "(", "tokens", ")", "\n", "self", ".", "embed", "=", "torch", ".", "zeros", "(", "len", "(", "self", ".", "vocab", ")", ",", "embed", ".", "dim", ")", "\n", "self", ".", "embed", "[", "self", ".", "vocab", ".", "token2id", "(", "tokens", ")", "]", "=", "embed", ".", "vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.CharField.numericalize": [[127, 149], ["max", "torch.tensor", "field.CharField.transform", "len", "field.CharField.vocab.token2id", "field.CharField.vocab.token2id", "field.CharField.vocab.token2id", "len"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.transform", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.token2id", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.token2id", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.token2id"], ["", "", "def", "numericalize", "(", "self", ",", "sequences", ")", ":", "\n", "        ", "sequences", "=", "[", "[", "self", ".", "transform", "(", "token", ")", "for", "token", "in", "sequence", "]", "\n", "for", "sequence", "in", "sequences", "]", "\n", "if", "self", ".", "fix_len", "<=", "0", ":", "\n", "            ", "self", ".", "fix_len", "=", "max", "(", "len", "(", "token", ")", "for", "sequence", "in", "sequences", "\n", "for", "token", "in", "sequence", ")", "\n", "", "if", "self", ".", "use_vocab", ":", "\n", "            ", "sequences", "=", "[", "[", "self", ".", "vocab", ".", "token2id", "(", "token", ")", "for", "token", "in", "sequence", "]", "\n", "for", "sequence", "in", "sequences", "]", "\n", "", "if", "self", ".", "bos", ":", "\n", "            ", "sequences", "=", "[", "[", "self", ".", "vocab", ".", "token2id", "(", "self", ".", "bos", ")", "]", "+", "sequence", "\n", "for", "sequence", "in", "sequences", "]", "\n", "", "if", "self", ".", "eos", ":", "\n", "            ", "sequences", "=", "[", "sequence", "+", "[", "self", ".", "vocab", ".", "token2id", "(", "self", ".", "eos", ")", "]", "\n", "for", "sequence", "in", "sequences", "]", "\n", "", "sequences", "=", "[", "\n", "torch", ".", "tensor", "(", "[", "ids", "[", ":", "self", ".", "fix_len", "]", "+", "[", "0", "]", "*", "(", "self", ".", "fix_len", "-", "len", "(", "ids", ")", ")", "\n", "for", "ids", "in", "sequence", "]", ")", "\n", "for", "sequence", "in", "sequences", "\n", "]", "\n", "\n", "return", "sequences", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.BertField.numericalize": [[153, 169], ["list", "subwords.append", "lens.append", "torch.tensor", "torch.ones().gt", "zip", "field.BertField.transform", "sum", "torch.tensor", "list", "field.BertField.transform", "torch.ones", "len", "len"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.transform", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.Field.transform"], ["    ", "def", "numericalize", "(", "self", ",", "sequences", ")", ":", "\n", "        ", "subwords", ",", "lens", "=", "[", "]", ",", "[", "]", "\n", "sequences", "=", "[", "(", "[", "self", ".", "bos", "]", "if", "self", ".", "bos", "else", "[", "]", ")", "+", "list", "(", "sequence", ")", "+", "\n", "(", "[", "self", ".", "eos", "]", "if", "self", ".", "eos", "else", "[", "]", ")", "\n", "for", "sequence", "in", "sequences", "]", "\n", "\n", "for", "sequence", "in", "sequences", ":", "\n", "            ", "sequence", "=", "[", "self", ".", "transform", "(", "token", ")", "for", "token", "in", "sequence", "]", "\n", "sequence", "=", "[", "piece", "if", "piece", "else", "self", ".", "transform", "(", "self", ".", "pad", ")", "\n", "for", "piece", "in", "sequence", "]", "\n", "subwords", ".", "append", "(", "sum", "(", "sequence", ",", "[", "]", ")", ")", "\n", "lens", ".", "append", "(", "torch", ".", "tensor", "(", "[", "len", "(", "piece", ")", "for", "piece", "in", "sequence", "]", ")", ")", "\n", "", "subwords", "=", "[", "torch", ".", "tensor", "(", "pieces", ")", "for", "pieces", "in", "subwords", "]", "\n", "mask", "=", "[", "torch", ".", "ones", "(", "len", "(", "pieces", ")", ")", ".", "gt", "(", "0", ")", "for", "pieces", "in", "subwords", "]", "\n", "\n", "return", "list", "(", "zip", "(", "subwords", ",", "lens", ",", "mask", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.TextDataLoader.__init__": [[14, 18], ["torch.utils.data.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TextDataLoader", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "fields", "=", "self", ".", "dataset", ".", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.TextDataLoader.__iter__": [[19, 30], ["torch.utils.data.DataLoader.__iter__", "zip", "isinstance", "batch.append", "torch.cuda.is_available", "torch.nn.utils.rnn.pad_sequence().to", "isinstance", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence().to", "zip", "torch.nn.utils.rnn.pad_sequence"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.TextSampler.__iter__"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "raw_batch", "in", "super", "(", "TextDataLoader", ",", "self", ")", ".", "__iter__", "(", ")", ":", "\n", "            ", "batch", ",", "device", "=", "[", "]", ",", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "for", "data", ",", "field", "in", "zip", "(", "raw_batch", ",", "self", ".", "fields", ")", ":", "\n", "                ", "if", "isinstance", "(", "data", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "data", "=", "pad_sequence", "(", "data", ",", "True", ",", "field", ".", "pad_index", ")", ".", "to", "(", "device", ")", "\n", "", "elif", "isinstance", "(", "data", "[", "0", "]", ",", "Iterable", ")", ":", "\n", "                    ", "data", "=", "[", "pad_sequence", "(", "f", ",", "True", ",", "field", ".", "pad_index", ")", ".", "to", "(", "device", ")", "\n", "for", "f", "in", "zip", "(", "*", "data", ")", "]", "\n", "", "batch", ".", "append", "(", "data", ")", "\n", "", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.TextDataset.__init__": [[34, 49], ["torch.utils.data.Dataset.__init__", "list", "dict", "itertools.chain", "field.numericalize", "setattr", "zip", "getattr", "len", "sum", "parser.utils.alg.kmeans", "bool", "bool", "isinstance"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.BertField.numericalize", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.alg.kmeans"], ["    ", "def", "__init__", "(", "self", ",", "corpus", ",", "fields", ",", "n_buckets", "=", "1", ")", ":", "\n", "        ", "super", "(", "TextDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "corpus", "=", "corpus", "\n", "self", ".", "fields", "=", "list", "(", "chain", "(", "*", "[", "\n", "field", "if", "isinstance", "(", "field", ",", "Iterable", ")", "else", "[", "field", "]", "\n", "for", "field", "in", "fields", "if", "field", "is", "not", "None", "\n", "]", ")", ")", "\n", "for", "field", "in", "self", ".", "fields", ":", "\n", "            ", "value", "=", "field", ".", "numericalize", "(", "getattr", "(", "corpus", ",", "field", ".", "name", ")", ")", "\n", "setattr", "(", "self", ",", "field", ".", "name", ",", "value", ")", "\n", "# NOTE: the final bucket count is roughly equal to n_buckets", "\n", "", "self", ".", "lengths", "=", "[", "len", "(", "i", ")", "+", "sum", "(", "[", "bool", "(", "field", ".", "bos", ")", ",", "bool", "(", "field", ".", "bos", ")", "]", ")", "\n", "for", "i", "in", "corpus", "]", "\n", "self", ".", "buckets", "=", "dict", "(", "zip", "(", "*", "kmeans", "(", "self", ".", "lengths", ",", "n_buckets", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.TextDataset.__getitem__": [[50, 53], ["getattr"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "for", "field", "in", "self", ".", "fields", ":", "\n", "            ", "yield", "getattr", "(", "self", ",", "field", ".", "name", ")", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.TextDataset.__len__": [[54, 56], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "corpus", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.TextDataset.loader": [[64, 67], ["None"], "methods", ["None"], ["", "", "@", "loader", ".", "setter", "\n", "def", "loader", "(", "self", ",", "data_loader", ")", ":", "\n", "        ", "self", ".", "data_loader", "=", "data_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.TextDataset.collate_fn": [[68, 71], ["zip"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "collate_fn", "(", "cls", ",", "batch", ")", ":", "\n", "        ", "return", "(", "field", "for", "field", "in", "zip", "(", "*", "batch", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.TextSampler.__init__": [[75, 86], ["zip", "min", "len", "max", "zip", "round", "buckets.items", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "buckets", ",", "batch_size", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "sizes", ",", "self", ".", "buckets", "=", "zip", "(", "*", "[", "\n", "(", "size", ",", "bucket", ")", "for", "size", ",", "bucket", "in", "buckets", ".", "items", "(", ")", "\n", "]", ")", "\n", "# the number of chunks in each bucket, which is clipped by", "\n", "# range [1, len(bucket)]", "\n", "self", ".", "chunks", "=", "[", "\n", "min", "(", "len", "(", "bucket", ")", ",", "max", "(", "round", "(", "size", "*", "len", "(", "bucket", ")", "/", "batch_size", ")", ",", "1", ")", ")", "\n", "for", "size", ",", "bucket", "in", "zip", "(", "self", ".", "sizes", ",", "self", ".", "buckets", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.TextSampler.__iter__": [[88, 97], ["range_fn().tolist", "range_fn().split", "range_fn", "len", "range", "range_fn", "len", "batch.tolist", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# if shuffle, shuffle both the buckets and samples in each bucket", "\n", "        ", "range_fn", "=", "torch", ".", "randperm", "if", "self", ".", "shuffle", "else", "torch", ".", "arange", "\n", "for", "i", "in", "range_fn", "(", "len", "(", "self", ".", "buckets", ")", ")", ".", "tolist", "(", ")", ":", "\n", "            ", "split_sizes", "=", "[", "(", "len", "(", "self", ".", "buckets", "[", "i", "]", ")", "-", "j", "-", "1", ")", "//", "self", ".", "chunks", "[", "i", "]", "+", "1", "\n", "for", "j", "in", "range", "(", "self", ".", "chunks", "[", "i", "]", ")", "]", "\n", "# DON'T use `torch.chunk` which may return wrong number of chunks", "\n", "for", "batch", "in", "range_fn", "(", "len", "(", "self", ".", "buckets", "[", "i", "]", ")", ")", ".", "split", "(", "split_sizes", ")", ":", "\n", "                ", "yield", "[", "self", ".", "buckets", "[", "i", "]", "[", "j", "]", "for", "j", "in", "batch", ".", "tolist", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.TextSampler.__len__": [[98, 100], ["sum"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "self", ".", "chunks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.batchify": [[102, 111], ["data.TextSampler", "data.TextDataLoader"], "function", ["None"], ["", "", "def", "batchify", "(", "dataset", ",", "batch_size", ",", "shuffle", "=", "False", ")", ":", "\n", "    ", "batch_sampler", "=", "TextSampler", "(", "buckets", "=", "dataset", ".", "buckets", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ")", "\n", "loader", "=", "TextDataLoader", "(", "dataset", "=", "dataset", ",", "\n", "batch_sampler", "=", "batch_sampler", ",", "\n", "collate_fn", "=", "dataset", ".", "collate_fn", ")", "\n", "\n", "return", "loader", "\n", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.embedding.Embedding.__init__": [[8, 15], ["object.__init__", "torch.tensor", "zip"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "tokens", ",", "vectors", ",", "unk", "=", "None", ")", ":", "\n", "        ", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tokens", "=", "tokens", "\n", "self", ".", "vectors", "=", "torch", ".", "tensor", "(", "vectors", ")", "\n", "self", ".", "pretrained", "=", "{", "w", ":", "v", "for", "w", ",", "v", "in", "zip", "(", "tokens", ",", "vectors", ")", "}", "\n", "self", ".", "unk", "=", "unk", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.embedding.Embedding.__len__": [[16, 18], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.embedding.Embedding.__contains__": [[19, 21], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "token", ")", ":", "\n", "        ", "return", "token", "in", "self", ".", "pretrained", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.embedding.Embedding.dim": [[22, 25], ["embedding.Embedding.vectors.size"], "methods", ["None"], ["", "@", "property", "\n", "def", "dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vectors", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.embedding.Embedding.unk_index": [[26, 32], ["embedding.Embedding.tokens.index"], "methods", ["None"], ["", "@", "property", "\n", "def", "unk_index", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "unk", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "tokens", ".", "index", "(", "self", ".", "unk", ")", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.embedding.Embedding.load": [[33, 42], ["zip", "cls", "open", "line.split", "list", "map"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "path", ",", "unk", "=", "None", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "[", "line", "for", "line", "in", "f", "]", "\n", "", "splits", "=", "[", "line", ".", "split", "(", ")", "for", "line", "in", "lines", "]", "\n", "tokens", ",", "vectors", "=", "zip", "(", "*", "[", "(", "s", "[", "0", "]", ",", "list", "(", "map", "(", "float", ",", "s", "[", "1", ":", "]", ")", ")", ")", "\n", "for", "s", "in", "splits", "]", ")", "\n", "\n", "return", "cls", "(", "tokens", ",", "vectors", ",", "unk", "=", "unk", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.alg.kmeans": [[9, 47], ["torch.tensor", "torch.tensor", "torch.tensor.unique", "torch.abs_().min", "torch.abs_().min", "c[].tolist", "len", "range", "y.eq", "torch.abs_().min", "torch.abs_().min", "y.unique().tolist", "[].tolist", "torch.abs_", "torch.abs_", "len", "c.equal", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "y.eq().any", "y.eq", "y.eq.sum", "mask[].nonzero().view", "dists[].argmax", "torch.abs_", "torch.abs_", "y.unique", "torch.randperm", "torch.randperm", "d.unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.where", "torch.where", "len", "y.eq", "mask[].nonzero", "d.unsqueeze", "y.eq", "torch.arange", "torch.arange", "mask.sum.argmax"], "function", ["None"], ["def", "kmeans", "(", "x", ",", "k", ")", ":", "\n", "    ", "x", "=", "torch", ".", "tensor", "(", "x", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "# count the frequency of each datapoint", "\n", "d", ",", "indices", ",", "f", "=", "x", ".", "unique", "(", "return_inverse", "=", "True", ",", "return_counts", "=", "True", ")", "\n", "# calculate the sum of the values of the same datapoints", "\n", "total", "=", "d", "*", "f", "\n", "# initialize k centroids randomly", "\n", "c", ",", "old", "=", "d", "[", "torch", ".", "randperm", "(", "len", "(", "d", ")", ")", "[", ":", "k", "]", "]", ",", "None", "\n", "# assign labels to each datapoint based on centroids", "\n", "dists", ",", "y", "=", "torch", ".", "abs_", "(", "d", ".", "unsqueeze", "(", "-", "1", ")", "-", "c", ")", ".", "min", "(", "dim", "=", "-", "1", ")", "\n", "# make sure number of datapoints is greater than that of clusters", "\n", "assert", "len", "(", "d", ")", ">=", "k", ",", "f\"unable to assign {len(d)} datapoints to {k} clusters\"", "\n", "\n", "while", "old", "is", "None", "or", "not", "c", ".", "equal", "(", "old", ")", ":", "\n", "# if an empty cluster is encountered,", "\n", "# choose the farthest datapoint from the biggest cluster", "\n", "# and move that the empty one", "\n", "        ", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "if", "not", "y", ".", "eq", "(", "i", ")", ".", "any", "(", ")", ":", "\n", "                ", "mask", "=", "y", ".", "eq", "(", "torch", ".", "arange", "(", "k", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "lens", "=", "mask", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "biggest", "=", "mask", "[", "lens", ".", "argmax", "(", ")", "]", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "farthest", "=", "dists", "[", "biggest", "]", ".", "argmax", "(", ")", "\n", "y", "[", "biggest", "[", "farthest", "]", "]", "=", "i", "\n", "", "", "mask", "=", "y", ".", "eq", "(", "torch", ".", "arange", "(", "k", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "# update the centroids", "\n", "c", ",", "old", "=", "(", "total", "*", "mask", ")", ".", "sum", "(", "-", "1", ")", "/", "(", "f", "*", "mask", ")", ".", "sum", "(", "-", "1", ")", ",", "c", "\n", "# re-assign all datapoints to clusters", "\n", "dists", ",", "y", "=", "torch", ".", "abs_", "(", "d", ".", "unsqueeze", "(", "-", "1", ")", "-", "c", ")", ".", "min", "(", "dim", "=", "-", "1", ")", "\n", "# assign all datapoints to the new-generated clusters", "\n", "# without considering the empty ones", "\n", "", "y", ",", "assigned", "=", "y", "[", "indices", "]", ",", "y", ".", "unique", "(", ")", ".", "tolist", "(", ")", "\n", "# get the centroids of the assigned clusters", "\n", "centroids", "=", "c", "[", "assigned", "]", ".", "tolist", "(", ")", "\n", "# map all values of datapoints to buckets", "\n", "clusters", "=", "[", "torch", ".", "where", "(", "y", ".", "eq", "(", "i", ")", ")", "[", "0", "]", ".", "tolist", "(", ")", "for", "i", "in", "assigned", "]", "\n", "\n", "return", "centroids", ",", "clusters", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.alg.tarjan": [[49, 88], ["range", "len", "len", "stack.append", "enumerate", "len", "len", "min", "stack.pop", "cycle.append", "len", "alg.tarjan.connect"], "function", ["None"], ["", "def", "tarjan", "(", "sequence", ")", ":", "\n", "    ", "sequence", "[", "0", "]", "=", "-", "1", "\n", "# record the search order, i.e., the timestep", "\n", "dfn", "=", "[", "-", "1", "]", "*", "len", "(", "sequence", ")", "\n", "# record the the smallest timestep in a SCC", "\n", "low", "=", "[", "-", "1", "]", "*", "len", "(", "sequence", ")", "\n", "# push the visited into the stack", "\n", "stack", ",", "onstack", "=", "[", "]", ",", "[", "False", "]", "*", "len", "(", "sequence", ")", "\n", "\n", "def", "connect", "(", "i", ",", "timestep", ")", ":", "\n", "        ", "dfn", "[", "i", "]", "=", "low", "[", "i", "]", "=", "timestep", "[", "0", "]", "\n", "timestep", "[", "0", "]", "+=", "1", "\n", "stack", ".", "append", "(", "i", ")", "\n", "onstack", "[", "i", "]", "=", "True", "\n", "\n", "for", "j", ",", "head", "in", "enumerate", "(", "sequence", ")", ":", "\n", "            ", "if", "head", "!=", "i", ":", "\n", "                ", "continue", "\n", "", "if", "dfn", "[", "j", "]", "==", "-", "1", ":", "\n", "                ", "yield", "from", "connect", "(", "j", ",", "timestep", ")", "\n", "low", "[", "i", "]", "=", "min", "(", "low", "[", "i", "]", ",", "low", "[", "j", "]", ")", "\n", "", "elif", "onstack", "[", "j", "]", ":", "\n", "                ", "low", "[", "i", "]", "=", "min", "(", "low", "[", "i", "]", ",", "dfn", "[", "j", "]", ")", "\n", "\n", "# a SCC is completed", "\n", "", "", "if", "low", "[", "i", "]", "==", "dfn", "[", "i", "]", ":", "\n", "            ", "cycle", "=", "[", "stack", ".", "pop", "(", ")", "]", "\n", "while", "cycle", "[", "-", "1", "]", "!=", "i", ":", "\n", "                ", "onstack", "[", "cycle", "[", "-", "1", "]", "]", "=", "False", "\n", "cycle", ".", "append", "(", "stack", ".", "pop", "(", ")", ")", "\n", "", "onstack", "[", "i", "]", "=", "False", "\n", "# ignore the self-loop", "\n", "if", "len", "(", "cycle", ")", ">", "1", ":", "\n", "                ", "yield", "cycle", "\n", "\n", "", "", "", "timestep", "=", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "        ", "if", "dfn", "[", "i", "]", "==", "-", "1", ":", "\n", "            ", "yield", "from", "connect", "(", "i", ",", "timestep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.alg.crf": [[90, 115], ["torch.enable_grad", "torch.enable_grad", "mask.sum", "alg.inside", "s_c[].gather().sum", "torch.grad", "scores.requires_grad_", "alg.inside", "s_c[].gather().sum", "[].sum", "s_c[].gather", "mask.sum.unsqueeze", "s_c[].gather", "mask.sum.unsqueeze", "scores.gather().squeeze", "scores.gather", "target.unsqueeze"], "function", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.alg.inside", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.alg.inside"], ["", "", "", "@", "torch", ".", "enable_grad", "(", ")", "\n", "def", "crf", "(", "scores", ",", "mask", ",", "target", "=", "None", ",", "partial", "=", "False", ")", ":", "\n", "    ", "lens", "=", "mask", ".", "sum", "(", "1", ")", "\n", "batch_size", ",", "seq_len", ",", "_", "=", "scores", ".", "shape", "\n", "training", "=", "scores", ".", "requires_grad", "\n", "# always enable the gradient computation of scores", "\n", "# in order for the computation of marginal probs", "\n", "s_i", ",", "s_c", "=", "inside", "(", "scores", ".", "requires_grad_", "(", ")", ",", "mask", ")", "\n", "logZ", "=", "s_c", "[", "0", "]", ".", "gather", "(", "0", ",", "lens", ".", "unsqueeze", "(", "0", ")", ")", ".", "sum", "(", ")", "\n", "# marginal probs are used for decoding, and can be computed by", "\n", "# combining the inside algorithm and autograd mechanism", "\n", "# instead of the entire inside-outside process", "\n", "probs", ",", "=", "autograd", ".", "grad", "(", "logZ", ",", "scores", ",", "retain_graph", "=", "training", ")", "\n", "\n", "if", "target", "is", "None", ":", "\n", "        ", "return", "probs", "\n", "# the second inside process is needed if use partial annotation", "\n", "", "if", "partial", ":", "\n", "        ", "s_i", ",", "s_c", "=", "inside", "(", "scores", ",", "mask", ",", "target", ")", "\n", "score", "=", "s_c", "[", "0", "]", ".", "gather", "(", "0", ",", "lens", ".", "unsqueeze", "(", "0", ")", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "score", "=", "scores", ".", "gather", "(", "-", "1", ",", "target", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "[", "mask", "]", ".", "sum", "(", ")", "\n", "", "loss", "=", "logZ", "-", "score", "\n", "\n", "return", "loss", ",", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.alg.inside": [[117, 168], ["mask.index_fill.sum", "scores.masked_fill.permute", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like.diagonal().fill_", "range", "float", "float", "mask.index_fill.index_fill", "cands.unsqueeze().index_fill.unsqueeze().index_fill", "scores.masked_fill.masked_fill", "ilr.permute().logsumexp", "torch.full_like.diagonal().copy_", "torch.full_like.diagonal().copy_", "cl.register_hook", "torch.full_like.diagonal().copy_", "cr.register_hook", "torch.full_like.diagonal().copy_", "float", "torch.full_like.diagonal", "mask.sum.new_tensor", "mask.sum.new_tensor", "cands.unsqueeze().index_fill.eq", "cands.unsqueeze().index_fill.lt", "cands.unsqueeze().index_fill.permute", "float", "parser.utils.fn.stripe", "parser.utils.fn.stripe", "ilr.register_hook", "parser.utils.fn.stripe", "parser.utils.fn.stripe", "cl.permute().logsumexp", "parser.utils.fn.stripe", "parser.utils.fn.stripe", "cr.permute().logsumexp", "cands.unsqueeze().index_fill.unsqueeze", "mask.sum.new_tensor", "ilr.permute", "torch.full_like.diagonal", "scores.masked_fill.diagonal", "torch.full_like.diagonal", "scores.masked_fill.diagonal", "x.masked_fill_", "torch.full_like.diagonal", "x.masked_fill_", "torch.full_like.diagonal", "mask.sum.ne", "mask.index_fill.unsqueeze", "mask.index_fill.unsqueeze", "range", "x.masked_fill_", "torch.isnan", "torch.isnan", "cl.permute", "torch.isnan", "torch.isnan", "cr.permute", "torch.isnan", "torch.isnan"], "function", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.stripe", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.stripe", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.stripe", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.stripe", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.stripe", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.stripe"], ["", "def", "inside", "(", "scores", ",", "mask", ",", "cands", "=", "None", ")", ":", "\n", "# the end position of each sentence in a batch", "\n", "    ", "lens", "=", "mask", ".", "sum", "(", "1", ")", "\n", "batch_size", ",", "seq_len", ",", "_", "=", "scores", ".", "shape", "\n", "# [seq_len, seq_len, batch_size]", "\n", "scores", "=", "scores", ".", "permute", "(", "2", ",", "1", ",", "0", ")", "\n", "s_i", "=", "torch", ".", "full_like", "(", "scores", ",", "float", "(", "'-inf'", ")", ")", "\n", "s_c", "=", "torch", ".", "full_like", "(", "scores", ",", "float", "(", "'-inf'", ")", ")", "\n", "s_c", ".", "diagonal", "(", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "# set the scores of arcs excluded by cands to -inf", "\n", "if", "cands", "is", "not", "None", ":", "\n", "        ", "mask", "=", "mask", ".", "index_fill", "(", "1", ",", "lens", ".", "new_tensor", "(", "0", ")", ",", "1", ")", "\n", "mask", "=", "(", "mask", ".", "unsqueeze", "(", "1", ")", "&", "mask", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "permute", "(", "2", ",", "1", ",", "0", ")", "\n", "cands", "=", "cands", ".", "unsqueeze", "(", "-", "1", ")", ".", "index_fill", "(", "1", ",", "lens", ".", "new_tensor", "(", "0", ")", ",", "-", "1", ")", "\n", "cands", "=", "cands", ".", "eq", "(", "lens", ".", "new_tensor", "(", "range", "(", "seq_len", ")", ")", ")", "|", "cands", ".", "lt", "(", "0", ")", "\n", "cands", "=", "cands", ".", "permute", "(", "2", ",", "1", ",", "0", ")", "&", "mask", "\n", "scores", "=", "scores", ".", "masked_fill", "(", "~", "cands", ",", "float", "(", "'-inf'", ")", ")", "\n", "\n", "", "for", "w", "in", "range", "(", "1", ",", "seq_len", ")", ":", "\n", "# n denotes the number of spans to iterate,", "\n", "# from span (0, w) to span (n, n+w) given width w", "\n", "        ", "n", "=", "seq_len", "-", "w", "\n", "\n", "# ilr = C(i->r) + C(j->r+1)", "\n", "# [n, w, batch_size]", "\n", "ilr", "=", "stripe", "(", "s_c", ",", "n", ",", "w", ")", "+", "stripe", "(", "s_c", ",", "n", ",", "w", ",", "(", "w", ",", "1", ")", ")", "\n", "if", "ilr", ".", "requires_grad", ":", "\n", "            ", "ilr", ".", "register_hook", "(", "lambda", "x", ":", "x", ".", "masked_fill_", "(", "torch", ".", "isnan", "(", "x", ")", ",", "0", ")", ")", "\n", "", "il", "=", "ir", "=", "ilr", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "logsumexp", "(", "-", "1", ")", "\n", "# I(j->i) = logsumexp(C(i->r) + C(j->r+1)) + s(j->i), i <= r < j", "\n", "# fill the w-th diagonal of the lower triangular part of s_i", "\n", "# with I(j->i) of n spans", "\n", "s_i", ".", "diagonal", "(", "-", "w", ")", ".", "copy_", "(", "il", "+", "scores", ".", "diagonal", "(", "-", "w", ")", ")", "\n", "# I(i->j) = logsumexp(C(i->r) + C(j->r+1)) + s(i->j), i <= r < j", "\n", "# fill the w-th diagonal of the upper triangular part of s_i", "\n", "# with I(i->j) of n spans", "\n", "s_i", ".", "diagonal", "(", "w", ")", ".", "copy_", "(", "ir", "+", "scores", ".", "diagonal", "(", "w", ")", ")", "\n", "\n", "# C(j->i) = logsumexp(C(r->i) + I(j->r)), i <= r < j", "\n", "cl", "=", "stripe", "(", "s_c", ",", "n", ",", "w", ",", "(", "0", ",", "0", ")", ",", "0", ")", "+", "stripe", "(", "s_i", ",", "n", ",", "w", ",", "(", "w", ",", "0", ")", ")", "\n", "cl", ".", "register_hook", "(", "lambda", "x", ":", "x", ".", "masked_fill_", "(", "torch", ".", "isnan", "(", "x", ")", ",", "0", ")", ")", "\n", "s_c", ".", "diagonal", "(", "-", "w", ")", ".", "copy_", "(", "cl", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "logsumexp", "(", "-", "1", ")", ")", "\n", "# C(i->j) = logsumexp(I(i->r) + C(r->j)), i < r <= j", "\n", "cr", "=", "stripe", "(", "s_i", ",", "n", ",", "w", ",", "(", "0", ",", "1", ")", ")", "+", "stripe", "(", "s_c", ",", "n", ",", "w", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "cr", ".", "register_hook", "(", "lambda", "x", ":", "x", ".", "masked_fill_", "(", "torch", ".", "isnan", "(", "x", ")", ",", "0", ")", ")", "\n", "s_c", ".", "diagonal", "(", "w", ")", ".", "copy_", "(", "cr", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "logsumexp", "(", "-", "1", ")", ")", "\n", "# disable multi words to modify the root", "\n", "s_c", "[", "0", ",", "w", "]", "[", "lens", ".", "ne", "(", "w", ")", "]", "=", "float", "(", "'-inf'", ")", "\n", "\n", "", "return", "s_i", ",", "s_c", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.alg.eisner": [[170, 230], ["mask.sum", "scores.permute.permute", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "scores.permute.new_zeros().long", "scores.permute.new_zeros().long", "torch.full_like.diagonal().fill_", "range", "p_c.permute().cpu.permute().cpu", "p_i.permute().cpu.permute().cpu", "enumerate", "parser.utils.fn.pad().to", "float", "float", "p_i.permute().cpu.new_tensor().unsqueeze", "ilr.permute", "ilr.permute.max", "torch.full_like.diagonal().copy_", "p_i.permute().cpu.diagonal().copy_", "ilr.permute.max", "torch.full_like.diagonal().copy_", "p_i.permute().cpu.diagonal().copy_", "cl.permute().max", "torch.full_like.diagonal().copy_", "p_c.permute().cpu.diagonal().copy_", "cr.permute().max", "torch.full_like.diagonal().copy_", "float", "p_c.permute().cpu.diagonal().copy_", "mask.sum.tolist", "p_c.permute().cpu.new_zeros", "alg.eisner.backtrack"], "function", ["None"], ["", "def", "eisner", "(", "scores", ",", "mask", ")", ":", "\n", "    ", "lens", "=", "mask", ".", "sum", "(", "1", ")", "\n", "batch_size", ",", "seq_len", ",", "_", "=", "scores", ".", "shape", "\n", "scores", "=", "scores", ".", "permute", "(", "2", ",", "1", ",", "0", ")", "\n", "s_i", "=", "torch", ".", "full_like", "(", "scores", ",", "float", "(", "'-inf'", ")", ")", "\n", "s_c", "=", "torch", ".", "full_like", "(", "scores", ",", "float", "(", "'-inf'", ")", ")", "\n", "p_i", "=", "scores", ".", "new_zeros", "(", "seq_len", ",", "seq_len", ",", "batch_size", ")", ".", "long", "(", ")", "\n", "p_c", "=", "scores", ".", "new_zeros", "(", "seq_len", ",", "seq_len", ",", "batch_size", ")", ".", "long", "(", ")", "\n", "s_c", ".", "diagonal", "(", ")", ".", "fill_", "(", "0", ")", "\n", "\n", "for", "w", "in", "range", "(", "1", ",", "seq_len", ")", ":", "\n", "        ", "n", "=", "seq_len", "-", "w", "\n", "starts", "=", "p_i", ".", "new_tensor", "(", "range", "(", "n", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "# ilr = C(i->r) + C(j->r+1)", "\n", "ilr", "=", "stripe", "(", "s_c", ",", "n", ",", "w", ")", "+", "stripe", "(", "s_c", ",", "n", ",", "w", ",", "(", "w", ",", "1", ")", ")", "\n", "# [batch_size, n, w]", "\n", "il", "=", "ir", "=", "ilr", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "# I(j->i) = max(C(i->r) + C(j->r+1) + s(j->i)), i <= r < j", "\n", "il_span", ",", "il_path", "=", "il", ".", "max", "(", "-", "1", ")", "\n", "s_i", ".", "diagonal", "(", "-", "w", ")", ".", "copy_", "(", "il_span", "+", "scores", ".", "diagonal", "(", "-", "w", ")", ")", "\n", "p_i", ".", "diagonal", "(", "-", "w", ")", ".", "copy_", "(", "il_path", "+", "starts", ")", "\n", "# I(i->j) = max(C(i->r) + C(j->r+1) + s(i->j)), i <= r < j", "\n", "ir_span", ",", "ir_path", "=", "ir", ".", "max", "(", "-", "1", ")", "\n", "s_i", ".", "diagonal", "(", "w", ")", ".", "copy_", "(", "ir_span", "+", "scores", ".", "diagonal", "(", "w", ")", ")", "\n", "p_i", ".", "diagonal", "(", "w", ")", ".", "copy_", "(", "ir_path", "+", "starts", ")", "\n", "\n", "# C(j->i) = max(C(r->i) + I(j->r)), i <= r < j", "\n", "cl", "=", "stripe", "(", "s_c", ",", "n", ",", "w", ",", "(", "0", ",", "0", ")", ",", "0", ")", "+", "stripe", "(", "s_i", ",", "n", ",", "w", ",", "(", "w", ",", "0", ")", ")", "\n", "cl_span", ",", "cl_path", "=", "cl", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "max", "(", "-", "1", ")", "\n", "s_c", ".", "diagonal", "(", "-", "w", ")", ".", "copy_", "(", "cl_span", ")", "\n", "p_c", ".", "diagonal", "(", "-", "w", ")", ".", "copy_", "(", "cl_path", "+", "starts", ")", "\n", "# C(i->j) = max(I(i->r) + C(r->j)), i < r <= j", "\n", "cr", "=", "stripe", "(", "s_i", ",", "n", ",", "w", ",", "(", "0", ",", "1", ")", ")", "+", "stripe", "(", "s_c", ",", "n", ",", "w", ",", "(", "1", ",", "w", ")", ",", "0", ")", "\n", "cr_span", ",", "cr_path", "=", "cr", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "max", "(", "-", "1", ")", "\n", "s_c", ".", "diagonal", "(", "w", ")", ".", "copy_", "(", "cr_span", ")", "\n", "s_c", "[", "0", ",", "w", "]", "[", "lens", ".", "ne", "(", "w", ")", "]", "=", "float", "(", "'-inf'", ")", "\n", "p_c", ".", "diagonal", "(", "w", ")", ".", "copy_", "(", "cr_path", "+", "starts", "+", "1", ")", "\n", "\n", "", "def", "backtrack", "(", "p_i", ",", "p_c", ",", "heads", ",", "i", ",", "j", ",", "complete", ")", ":", "\n", "        ", "if", "i", "==", "j", ":", "\n", "            ", "return", "\n", "", "if", "complete", ":", "\n", "            ", "r", "=", "p_c", "[", "i", ",", "j", "]", "\n", "backtrack", "(", "p_i", ",", "p_c", ",", "heads", ",", "i", ",", "r", ",", "False", ")", "\n", "backtrack", "(", "p_i", ",", "p_c", ",", "heads", ",", "r", ",", "j", ",", "True", ")", "\n", "", "else", ":", "\n", "            ", "r", ",", "heads", "[", "j", "]", "=", "p_i", "[", "i", ",", "j", "]", ",", "i", "\n", "i", ",", "j", "=", "sorted", "(", "(", "i", ",", "j", ")", ")", "\n", "backtrack", "(", "p_i", ",", "p_c", ",", "heads", ",", "i", ",", "r", ",", "True", ")", "\n", "backtrack", "(", "p_i", ",", "p_c", ",", "heads", ",", "j", ",", "r", "+", "1", ",", "True", ")", "\n", "\n", "", "", "preds", "=", "[", "]", "\n", "p_c", "=", "p_c", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "cpu", "(", ")", "\n", "p_i", "=", "p_i", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "cpu", "(", ")", "\n", "for", "i", ",", "length", "in", "enumerate", "(", "lens", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "heads", "=", "p_c", ".", "new_zeros", "(", "length", "+", "1", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "backtrack", "(", "p_i", "[", "i", "]", ",", "p_c", "[", "i", "]", ",", "heads", ",", "0", ",", "length", ",", "True", ")", "\n", "preds", ".", "append", "(", "heads", ".", "to", "(", "mask", ".", "device", ")", ")", "\n", "\n", "", "return", "pad", "(", "preds", ",", "total_length", "=", "seq_len", ")", ".", "to", "(", "mask", ".", "device", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Sentence.__init__": [[16, 24], ["zip", "isinstance", "range", "setattr", "len", "setattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fields", ",", "values", ")", ":", "\n", "        ", "for", "field", ",", "value", "in", "zip", "(", "fields", ",", "values", ")", ":", "\n", "            ", "if", "isinstance", "(", "field", ",", "Iterable", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "field", ")", ")", ":", "\n", "                    ", "setattr", "(", "self", ",", "field", "[", "j", "]", ".", "name", ",", "value", ")", "\n", "", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "field", ".", "name", ",", "value", ")", "\n", "", "", "self", ".", "fields", "=", "fields", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Sentence.values": [[25, 32], ["isinstance", "getattr", "getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "values", "(", "self", ")", ":", "\n", "        ", "for", "field", "in", "self", ".", "fields", ":", "\n", "            ", "if", "isinstance", "(", "field", ",", "Iterable", ")", ":", "\n", "                ", "yield", "getattr", "(", "self", ",", "field", "[", "0", "]", ".", "name", ")", "\n", "", "else", ":", "\n", "                ", "yield", "getattr", "(", "self", ",", "field", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Sentence.__len__": [[33, 35], ["len", "next", "iter"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "next", "(", "iter", "(", "self", ".", "values", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Sentence.__repr__": [[36, 39], ["map", "zip"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'\\n'", ".", "join", "(", "'\\t'", ".", "join", "(", "map", "(", "str", ",", "line", ")", ")", "\n", "for", "line", "in", "zip", "(", "*", "self", ".", "values", ")", ")", "+", "'\\n'", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.__init__": [[43, 48], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "fields", ",", "sentences", ")", ":", "\n", "        ", "super", "(", "Corpus", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fields", "=", "fields", "\n", "self", ".", "sentences", "=", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.__len__": [[49, 51], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sentences", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.__repr__": [[52, 54], ["str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'\\n'", ".", "join", "(", "str", "(", "sentence", ")", "for", "sentence", "in", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.__getitem__": [[55, 57], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "sentences", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.__getattr__": [[58, 63], ["hasattr", "getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ".", "sentences", "[", "0", "]", ",", "name", ")", ":", "\n", "            ", "raise", "AttributeError", "\n", "", "for", "sentence", "in", "self", ".", "sentences", ":", "\n", "            ", "yield", "getattr", "(", "sentence", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.__setattr__": [[64, 70], ["enumerate", "setattr"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "name", "in", "[", "'fields'", ",", "'sentences'", "]", ":", "\n", "            ", "self", ".", "__dict__", "[", "name", "]", "=", "value", "\n", "", "else", ":", "\n", "            ", "for", "i", ",", "sentence", "in", "enumerate", "(", "self", ".", "sentences", ")", ":", "\n", "                ", "setattr", "(", "sentence", ",", "name", ",", "value", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load": [[71, 93], ["enumerate", "cls", "open", "parser.utils.field.Field", "enumerate", "line.strip", "list", "sentences.append", "str", "zip", "corpus.Sentence", "parser.utils.fn.isprojective", "len", "list", "line.split", "map"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.isprojective"], ["", "", "", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "path", ",", "fields", ",", "max_len", "=", "None", ",", "proj", "=", "False", ",", "parts", "=", "None", ")", ":", "\n", "        ", "start", ",", "sentences", "=", "0", ",", "[", "]", "\n", "fields", "=", "[", "field", "if", "field", "is", "not", "None", "else", "Field", "(", "str", "(", "i", ")", ")", "\n", "for", "i", ",", "field", "in", "enumerate", "(", "fields", ")", "]", "\n", "with", "open", "(", "path", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "f", "]", "\n", "", "for", "i", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "            ", "if", "not", "line", ":", "\n", "                ", "values", "=", "list", "(", "zip", "(", "*", "[", "line", ".", "split", "(", ")", "for", "line", "in", "lines", "[", "start", ":", "i", "]", "]", ")", ")", "\n", "sentences", ".", "append", "(", "Sentence", "(", "fields", ",", "values", ")", ")", "\n", "start", "=", "i", "+", "1", "\n", "", "", "if", "parts", "is", "not", "None", ":", "\n", "            ", "sentences", "=", "sentences", "[", ":", ":", "parts", "]", "\n", "", "if", "proj", ":", "\n", "            ", "sentences", "=", "[", "sentence", "for", "sentence", "in", "sentences", "\n", "if", "isprojective", "(", "[", "0", "]", "+", "list", "(", "map", "(", "int", ",", "sentence", ".", "arcs", ")", ")", ")", "]", "\n", "", "if", "max_len", "is", "not", "None", ":", "\n", "            ", "sentences", "=", "[", "sentence", "for", "sentence", "in", "sentences", "\n", "if", "len", "(", "sentence", ".", "arcs", ")", "<", "max_len", "]", "\n", "\n", "", "return", "cls", "(", "fields", ",", "sentences", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.save": [[94, 97], ["open", "f.write"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "f\"{self}\\n\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.ispunct": [[6, 9], ["all", "unicodedata.category().startswith", "unicodedata.category"], "function", ["None"], ["def", "ispunct", "(", "token", ")", ":", "\n", "    ", "return", "all", "(", "unicodedata", ".", "category", "(", "char", ")", ".", "startswith", "(", "'P'", ")", "\n", "for", "char", "in", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.isfullwidth": [[11, 14], ["all", "unicodedata.east_asian_width"], "function", ["None"], ["", "def", "isfullwidth", "(", "token", ")", ":", "\n", "    ", "return", "all", "(", "unicodedata", ".", "east_asian_width", "(", "char", ")", "in", "[", "'W'", ",", "'F'", ",", "'A'", "]", "\n", "for", "char", "in", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.islatin": [[16, 19], ["all", "unicodedata.name"], "function", ["None"], ["", "def", "islatin", "(", "token", ")", ":", "\n", "    ", "return", "all", "(", "'LATIN'", "in", "unicodedata", ".", "name", "(", "char", ")", "\n", "for", "char", "in", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.isdigit": [[21, 24], ["all", "unicodedata.name"], "function", ["None"], ["", "def", "isdigit", "(", "token", ")", ":", "\n", "    ", "return", "all", "(", "'DIGIT'", "in", "unicodedata", ".", "name", "(", "char", ")", "\n", "for", "char", "in", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.tohalfwidth": [[26, 28], ["unicodedata.normalize"], "function", ["None"], ["", "def", "tohalfwidth", "(", "token", ")", ":", "\n", "    ", "return", "unicodedata", ".", "normalize", "(", "'NFKC'", ",", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.isprojective": [[30, 40], ["enumerate", "enumerate", "sorted", "sorted"], "function", ["None"], ["", "def", "isprojective", "(", "sequence", ")", ":", "\n", "    ", "arcs", "=", "[", "(", "h", ",", "d", ")", "for", "d", ",", "h", "in", "enumerate", "(", "sequence", "[", "1", ":", "]", ",", "1", ")", "if", "h", ">=", "0", "]", "\n", "for", "i", ",", "(", "hi", ",", "di", ")", "in", "enumerate", "(", "arcs", ")", ":", "\n", "        ", "for", "hj", ",", "dj", "in", "arcs", "[", "i", "+", "1", ":", "]", ":", "\n", "            ", "(", "li", ",", "ri", ")", ",", "(", "lj", ",", "rj", ")", "=", "sorted", "(", "[", "hi", ",", "di", "]", ")", ",", "sorted", "(", "[", "hj", ",", "dj", "]", ")", "\n", "if", "(", "li", "<=", "hj", "<=", "ri", "and", "hi", "==", "dj", ")", "or", "(", "lj", "<=", "hi", "<=", "rj", "and", "hj", "==", "di", ")", ":", "\n", "                ", "return", "False", "\n", "", "if", "(", "li", "<", "lj", "<", "ri", "or", "li", "<", "rj", "<", "ri", ")", "and", "(", "li", "-", "lj", ")", "*", "(", "ri", "-", "rj", ")", ">", "0", ":", "\n", "                ", "return", "False", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.istree": [[42, 52], ["sum", "next", "fn.isprojective", "tarjan"], "function", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.isprojective", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.alg.tarjan"], ["", "def", "istree", "(", "sequence", ",", "proj", "=", "False", ",", "multiroot", "=", "False", ")", ":", "\n", "    ", "from", "parser", ".", "utils", ".", "alg", "import", "tarjan", "\n", "if", "proj", "and", "not", "isprojective", "(", "sequence", ")", ":", "\n", "        ", "return", "False", "\n", "", "n_roots", "=", "sum", "(", "head", "==", "0", "for", "head", "in", "sequence", "[", "1", ":", "]", ")", "\n", "if", "n_roots", "==", "0", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "multiroot", "and", "n_roots", ">", "1", ":", "\n", "        ", "return", "False", "\n", "", "return", "next", "(", "tarjan", "(", "sequence", ")", ",", "None", ")", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.stripe": [[54, 84], ["x.as_strided", "x.contiguous", "x.size", "list", "x[].numel", "x.stride"], "function", ["None"], ["", "def", "stripe", "(", "x", ",", "n", ",", "w", ",", "offset", "=", "(", "0", ",", "0", ")", ",", "dim", "=", "1", ")", ":", "\n", "    ", "r'''Returns a diagonal stripe of the tensor.\n    Parameters:\n        x (Tensor): the input tensor with 2 or more dims.\n        n (int): the length of the stripe.\n        w (int): the width of the stripe.\n        offset (tuple): the offset of the first two dims.\n        dim (int): 0 if returns a horizontal stripe; 1 else.\n    Example::\n    >>> x = torch.arange(25).view(5, 5)\n    >>> x\n    tensor([[ 0,  1,  2,  3,  4],\n            [ 5,  6,  7,  8,  9],\n            [10, 11, 12, 13, 14],\n            [15, 16, 17, 18, 19],\n            [20, 21, 22, 23, 24]])\n    >>> stripe(x, 2, 3, (1, 1))\n    tensor([[ 6,  7,  8],\n            [12, 13, 14]])\n    >>> stripe(x, 2, 3, dim=0)\n    tensor([[ 0,  5, 10],\n            [ 6, 11, 16]])\n    '''", "\n", "x", ",", "seq_len", "=", "x", ".", "contiguous", "(", ")", ",", "x", ".", "size", "(", "1", ")", "\n", "stride", ",", "numel", "=", "list", "(", "x", ".", "stride", "(", ")", ")", ",", "x", "[", "0", ",", "0", "]", ".", "numel", "(", ")", "\n", "stride", "[", "0", "]", "=", "(", "seq_len", "+", "1", ")", "*", "numel", "\n", "stride", "[", "1", "]", "=", "(", "1", "if", "dim", "==", "1", "else", "seq_len", ")", "*", "numel", "\n", "return", "x", ".", "as_strided", "(", "size", "=", "(", "n", ",", "w", ",", "*", "x", ".", "shape", "[", "2", ":", "]", ")", ",", "\n", "stride", "=", "stride", ",", "\n", "storage_offset", "=", "(", "offset", "[", "0", "]", "*", "seq_len", "+", "offset", "[", "1", "]", ")", "*", "numel", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.pad": [[86, 96], ["tensors[].data.new().fill_", "enumerate", "len", "max", "tensors[].data.new", "range", "tensor.size", "len", "slice", "tensors[].size", "tensor.size"], "function", ["None"], ["", "def", "pad", "(", "tensors", ",", "padding_value", "=", "0", ",", "total_length", "=", "None", ")", ":", "\n", "    ", "size", "=", "[", "len", "(", "tensors", ")", "]", "+", "[", "max", "(", "tensor", ".", "size", "(", "i", ")", "for", "tensor", "in", "tensors", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "tensors", "[", "0", "]", ".", "size", "(", ")", ")", ")", "]", "\n", "if", "total_length", "is", "not", "None", ":", "\n", "        ", "assert", "total_length", ">=", "size", "[", "1", "]", "\n", "size", "[", "1", "]", "=", "total_length", "\n", "", "out_tensor", "=", "tensors", "[", "0", "]", ".", "data", ".", "new", "(", "*", "size", ")", ".", "fill_", "(", "padding_value", ")", "\n", "for", "i", ",", "tensor", "in", "enumerate", "(", "tensors", ")", ":", "\n", "        ", "out_tensor", "[", "i", "]", "[", "[", "slice", "(", "0", ",", "i", ")", "for", "i", "in", "tensor", ".", "size", "(", ")", "]", "]", "=", "tensor", "\n", "", "return", "out_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.numericalize_arcs": [[98, 100], ["int"], "function", ["None"], ["", "def", "numericalize_arcs", "(", "sequence", ")", ":", "\n", "    ", "return", "[", "int", "(", "i", ")", "for", "i", "in", "sequence", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.metric.Metric.__init__": [[6, 17], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "super", "(", "Metric", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "self", ".", "n", "=", "0.0", "\n", "self", ".", "n_ucm", "=", "0.0", "\n", "self", ".", "n_lcm", "=", "0.0", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "correct_arcs", "=", "0.0", "\n", "self", ".", "correct_rels", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.metric.Metric.__repr__": [[18, 22], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "f\"UCM: {self.ucm:6.2%} LCM: {self.lcm:6.2%} \"", "\n", "s", "+=", "f\"UAS: {self.uas:6.2%} LAS: {self.las:6.2%}\"", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.metric.Metric.__call__": [[23, 36], ["mask.sum", "len", "arc_mask.sum().eq().sum().item", "rel_mask.sum().eq().sum().item", "len", "arc_mask_seq.sum().item", "rel_mask_seq.sum().item", "arc_preds.eq", "rel_preds.eq", "arc_mask.sum().eq().sum", "rel_mask.sum().eq().sum", "arc_mask_seq.sum", "rel_mask_seq.sum", "arc_mask.sum().eq", "rel_mask.sum().eq", "arc_mask.sum", "rel_mask.sum"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "arc_preds", ",", "rel_preds", ",", "arc_golds", ",", "rel_golds", ",", "mask", ")", ":", "\n", "        ", "lens", "=", "mask", ".", "sum", "(", "1", ")", "\n", "arc_mask", "=", "arc_preds", ".", "eq", "(", "arc_golds", ")", "&", "mask", "\n", "rel_mask", "=", "rel_preds", ".", "eq", "(", "rel_golds", ")", "&", "arc_mask", "\n", "arc_mask_seq", ",", "rel_mask_seq", "=", "arc_mask", "[", "mask", "]", ",", "rel_mask", "[", "mask", "]", "\n", "\n", "self", ".", "n", "+=", "len", "(", "mask", ")", "\n", "self", ".", "n_ucm", "+=", "arc_mask", ".", "sum", "(", "1", ")", ".", "eq", "(", "lens", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "n_lcm", "+=", "rel_mask", ".", "sum", "(", "1", ")", ".", "eq", "(", "lens", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "self", ".", "total", "+=", "len", "(", "arc_mask_seq", ")", "\n", "self", ".", "correct_arcs", "+=", "arc_mask_seq", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "correct_rels", "+=", "rel_mask_seq", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.metric.Metric.__lt__": [[37, 39], ["None"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "score", "<", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.metric.Metric.__le__": [[40, 42], ["None"], "methods", ["None"], ["", "def", "__le__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "score", "<=", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.metric.Metric.__ge__": [[43, 45], ["None"], "methods", ["None"], ["", "def", "__ge__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "score", ">=", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.metric.Metric.__gt__": [[46, 48], ["None"], "methods", ["None"], ["", "def", "__gt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "score", ">", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.metric.Metric.score": [[49, 52], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "score", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "las", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.metric.Metric.ucm": [[53, 56], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "ucm", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_ucm", "/", "(", "self", ".", "n", "+", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.metric.Metric.lcm": [[57, 60], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "lcm", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_lcm", "/", "(", "self", ".", "n", "+", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.metric.Metric.uas": [[61, 64], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "uas", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "correct_arcs", "/", "(", "self", ".", "total", "+", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.metric.Metric.las": [[65, 68], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "las", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "correct_rels", "/", "(", "self", ".", "total", "+", "self", ".", "eps", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.__init__": [[9, 17], ["vocab.Vocab.extend", "vocab.Vocab.stoi.get", "len", "enumerate", "counter.items"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.extend"], ["    ", "def", "__init__", "(", "self", ",", "counter", ",", "min_freq", "=", "1", ",", "specials", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "itos", "=", "specials", "\n", "self", ".", "stoi", "=", "{", "token", ":", "i", "for", "i", ",", "token", "in", "enumerate", "(", "self", ".", "itos", ")", "}", "\n", "\n", "self", ".", "extend", "(", "[", "token", "for", "token", ",", "freq", "in", "counter", ".", "items", "(", ")", "\n", "if", "freq", ">=", "min_freq", "]", ")", "\n", "self", ".", "unk_index", "=", "self", ".", "stoi", ".", "get", "(", "unk", ",", "0", ")", "\n", "self", ".", "n_init", "=", "len", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.__len__": [[18, 20], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "itos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.__getitem__": [[21, 23], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "stoi", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.__contains__": [[24, 26], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "token", ")", ":", "\n", "        ", "return", "token", "in", "self", ".", "stoi", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.token2id": [[27, 29], ["vocab.Vocab.stoi.get"], "methods", ["None"], ["", "def", "token2id", "(", "self", ",", "sequence", ")", ":", "\n", "        ", "return", "[", "self", ".", "stoi", ".", "get", "(", "token", ",", "self", ".", "unk_index", ")", "for", "token", "in", "sequence", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.id2token": [[30, 35], ["isinstance"], "methods", ["None"], ["", "def", "id2token", "(", "self", ",", "ids", ")", ":", "\n", "        ", "if", "isinstance", "(", "ids", ",", "Iterable", ")", ":", "\n", "            ", "return", "[", "self", ".", "itos", "[", "i", "]", "for", "i", "in", "ids", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "itos", "[", "ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.extend": [[36, 39], ["vocab.Vocab.itos.extend", "sorted", "set().difference", "enumerate", "set"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.extend"], ["", "", "def", "extend", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "self", ".", "itos", ".", "extend", "(", "sorted", "(", "set", "(", "tokens", ")", ".", "difference", "(", "self", ".", "stoi", ")", ")", ")", "\n", "self", ".", "stoi", "=", "{", "token", ":", "i", "for", "i", ",", "token", "in", "enumerate", "(", "self", ".", "itos", ")", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bert.BertEmbedding.__init__": [[12, 24], ["torch.Module.__init__", "transformers.BertModel.from_pretrained", "bert.BertEmbedding.bert.requires_grad_", "scalar_mix.ScalarMix", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "n_layers", ",", "n_out", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "super", "(", "BertEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", ".", "from_pretrained", "(", "model", ",", "output_hidden_states", "=", "True", ")", "\n", "self", ".", "bert", "=", "self", ".", "bert", ".", "requires_grad_", "(", "requires_grad", ")", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "n_out", "=", "n_out", "\n", "self", ".", "requires_grad", "=", "requires_grad", "\n", "self", ".", "hidden_size", "=", "self", ".", "bert", ".", "config", ".", "hidden_size", "\n", "\n", "self", ".", "scalar_mix", "=", "ScalarMix", "(", "n_layers", ")", "\n", "self", ".", "projection", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "n_out", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bert.BertEmbedding.__repr__": [[25, 33], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "s", "+=", "f\"n_layers={self.n_layers}, n_out={self.n_out}\"", "\n", "if", "self", ".", "requires_grad", ":", "\n", "            ", "s", "+=", "f\", requires_grad={self.requires_grad}\"", "\n", "", "s", "+=", "')'", "\n", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bert.BertEmbedding.forward": [[34, 50], ["bert_lens.gt", "torch.stack.BertEmbedding.bert", "torch.stack.BertEmbedding.scalar_mix", "bert[].split", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.new_zeros", "torch.stack.new_zeros", "torch.stack.BertEmbedding.masked_scatter_", "torch.stack.BertEmbedding.projection", "torch.stack.BertEmbedding.bert.eval", "bert_lens[].tolist", "bert_lens.gt.unsqueeze", "i.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "subwords", ",", "bert_lens", ",", "bert_mask", ")", ":", "\n", "        ", "batch_size", ",", "seq_len", "=", "bert_lens", ".", "shape", "\n", "mask", "=", "bert_lens", ".", "gt", "(", "0", ")", "\n", "\n", "if", "not", "self", ".", "requires_grad", ":", "\n", "            ", "self", ".", "bert", ".", "eval", "(", ")", "\n", "", "_", ",", "_", ",", "bert", "=", "self", ".", "bert", "(", "subwords", ",", "attention_mask", "=", "bert_mask", ")", "\n", "bert", "=", "bert", "[", "-", "self", ".", "n_layers", ":", "]", "\n", "bert", "=", "self", ".", "scalar_mix", "(", "bert", ")", "\n", "bert", "=", "bert", "[", "bert_mask", "]", ".", "split", "(", "bert_lens", "[", "mask", "]", ".", "tolist", "(", ")", ")", "\n", "bert", "=", "torch", ".", "stack", "(", "[", "i", ".", "mean", "(", "0", ")", "for", "i", "in", "bert", "]", ")", "\n", "bert_embed", "=", "bert", ".", "new_zeros", "(", "batch_size", ",", "seq_len", ",", "self", ".", "hidden_size", ")", "\n", "bert_embed", "=", "bert_embed", ".", "masked_scatter_", "(", "mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "bert", ")", "\n", "bert_embed", "=", "self", ".", "projection", "(", "bert_embed", ")", "\n", "\n", "return", "bert_embed", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.biaffine.Biaffine.__init__": [[9, 20], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "biaffine.Biaffine.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__", "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bilstm.BiLSTM.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "n_out", "=", "1", ",", "bias_x", "=", "True", ",", "bias_y", "=", "True", ")", ":", "\n", "        ", "super", "(", "Biaffine", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_in", "=", "n_in", "\n", "self", ".", "n_out", "=", "n_out", "\n", "self", ".", "bias_x", "=", "bias_x", "\n", "self", ".", "bias_y", "=", "bias_y", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "n_out", ",", "\n", "n_in", "+", "bias_x", ",", "\n", "n_in", "+", "bias_y", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.biaffine.Biaffine.extra_repr": [[21, 29], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "f\"n_in={self.n_in}, n_out={self.n_out}\"", "\n", "if", "self", ".", "bias_x", ":", "\n", "            ", "s", "+=", "f\", bias_x={self.bias_x}\"", "\n", "", "if", "self", ".", "bias_y", ":", "\n", "            ", "s", "+=", "f\", bias_y={self.bias_y}\"", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.biaffine.Biaffine.reset_parameters": [[30, 32], ["torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.biaffine.Biaffine.forward": [[33, 44], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "s.squeeze.squeeze.squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "if", "self", ".", "bias_x", ":", "\n", "            ", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "torch", ".", "ones_like", "(", "x", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "", "if", "self", ".", "bias_y", ":", "\n", "            ", "y", "=", "torch", ".", "cat", "(", "(", "y", ",", "torch", ".", "ones_like", "(", "y", "[", "...", ",", ":", "1", "]", ")", ")", ",", "-", "1", ")", "\n", "# [batch_size, n_out, seq_len, seq_len]", "\n", "", "s", "=", "torch", ".", "einsum", "(", "'bxi,oij,byj->boxy'", ",", "x", ",", "self", ".", "weight", ",", "y", ")", "\n", "# remove dim 1 if n_out == 1", "\n", "s", "=", "s", ".", "squeeze", "(", "1", ")", "\n", "\n", "return", "s", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.mlp.MLP.__init__": [[10, 20], ["torch.Module.__init__", "torch.Linear", "torch.LeakyReLU", "parser.modules.dropout.SharedDropout", "mlp.MLP.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__", "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bilstm.BiLSTM.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "n_in", ",", "n_out", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_in", "=", "n_in", "\n", "self", ".", "n_out", "=", "n_out", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "n_in", ",", "n_out", ")", "\n", "self", ".", "activation", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.1", ")", "\n", "self", ".", "dropout", "=", "SharedDropout", "(", "p", "=", "dropout", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.mlp.MLP.__repr__": [[21, 29], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "s", "+=", "f\"n_in={self.n_in}, n_out={self.n_out}\"", "\n", "if", "self", ".", "dropout", ".", "p", ">", "0", ":", "\n", "            ", "s", "+=", "f\", dropout={self.dropout.p}\"", "\n", "", "s", "+=", "')'", "\n", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.mlp.MLP.reset_parameters": [[30, 33], ["torch.init.orthogonal_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "orthogonal_", "(", "self", ".", "linear", ".", "weight", ")", "\n", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "linear", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.mlp.MLP.forward": [[34, 40], ["mlp.MLP.linear", "mlp.MLP.activation", "mlp.MLP.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.dropout.SharedDropout.__init__": [[9, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ",", "batch_first", "=", "True", ")", ":", "\n", "        ", "super", "(", "SharedDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "p", "=", "p", "\n", "self", ".", "batch_first", "=", "batch_first", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.dropout.SharedDropout.extra_repr": [[15, 21], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "f\"p={self.p}\"", "\n", "if", "self", ".", "batch_first", ":", "\n", "            ", "s", "+=", "f\", batch_first={self.batch_first}\"", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.dropout.SharedDropout.forward": [[22, 31], ["dropout.SharedDropout.get_mask", "dropout.SharedDropout.get_mask", "dropout.SharedDropout.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.dropout.SharedDropout.get_mask", "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.dropout.SharedDropout.get_mask"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "if", "self", ".", "batch_first", ":", "\n", "                ", "mask", "=", "self", ".", "get_mask", "(", "x", "[", ":", ",", "0", "]", ",", "self", ".", "p", ")", "\n", "", "else", ":", "\n", "                ", "mask", "=", "self", ".", "get_mask", "(", "x", "[", "0", "]", ",", "self", ".", "p", ")", "\n", "", "x", "*=", "mask", ".", "unsqueeze", "(", "1", ")", "if", "self", ".", "batch_first", "else", "mask", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.dropout.SharedDropout.get_mask": [[32, 38], ["x.new_empty().bernoulli_", "x.new_empty"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_mask", "(", "x", ",", "p", ")", ":", "\n", "        ", "mask", "=", "x", ".", "new_empty", "(", "x", ".", "shape", ")", ".", "bernoulli_", "(", "1", "-", "p", ")", "\n", "mask", "=", "mask", "/", "(", "1", "-", "p", ")", "\n", "\n", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.dropout.IndependentDropout.__init__": [[42, 46], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "IndependentDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "p", "=", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.dropout.IndependentDropout.extra_repr": [[47, 49], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "f\"p={self.p}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.dropout.IndependentDropout.forward": [[50, 61], ["sum", "x.new_empty().bernoulli_", "len", "sum.max", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "mask.unsqueeze", "zip", "x.new_empty"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "items", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "masks", "=", "[", "x", ".", "new_empty", "(", "x", ".", "shape", "[", ":", "2", "]", ")", ".", "bernoulli_", "(", "1", "-", "self", ".", "p", ")", "\n", "for", "x", "in", "items", "]", "\n", "total", "=", "sum", "(", "masks", ")", "\n", "scale", "=", "len", "(", "items", ")", "/", "total", ".", "max", "(", "torch", ".", "ones_like", "(", "total", ")", ")", "\n", "masks", "=", "[", "mask", "*", "scale", "for", "mask", "in", "masks", "]", "\n", "items", "=", "[", "item", "*", "mask", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "for", "item", ",", "mask", "in", "zip", "(", "items", ",", "masks", ")", "]", "\n", "\n", "", "return", "items", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bilstm.BiLSTM.__init__": [[13, 31], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "bilstm.BiLSTM.reset_parameters", "bilstm.BiLSTM.f_cells.append", "bilstm.BiLSTM.b_cells.append", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell", "torch.LSTMCell"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__", "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bilstm.BiLSTM.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "num_layers", "=", "1", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "BiLSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "f_cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "b_cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "self", ".", "f_cells", ".", "append", "(", "nn", ".", "LSTMCell", "(", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "hidden_size", ")", ")", "\n", "self", ".", "b_cells", ".", "append", "(", "nn", ".", "LSTMCell", "(", "input_size", "=", "input_size", ",", "\n", "hidden_size", "=", "hidden_size", ")", ")", "\n", "input_size", "=", "hidden_size", "*", "2", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bilstm.BiLSTM.__repr__": [[32, 42], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "s", "+=", "f\"{self.input_size}, {self.hidden_size}\"", "\n", "if", "self", ".", "num_layers", ">", "1", ":", "\n", "            ", "s", "+=", "f\", num_layers={self.num_layers}\"", "\n", "", "if", "self", ".", "dropout", ">", "0", ":", "\n", "            ", "s", "+=", "f\", dropout={self.dropout}\"", "\n", "", "s", "+=", "')'", "\n", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bilstm.BiLSTM.reset_parameters": [[43, 51], ["bilstm.BiLSTM.parameters", "len", "torch.init.orthogonal_", "torch.init.orthogonal_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "# apply orthogonal_ to weight", "\n", "            ", "if", "len", "(", "param", ".", "shape", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "orthogonal_", "(", "param", ")", "\n", "# apply zeros_ to bias", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "zeros_", "(", "param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bilstm.BiLSTM.permute_hidden": [[52, 59], ["torch.nn.modules.rnn.apply_permutation", "torch.nn.modules.rnn.apply_permutation", "torch.nn.modules.rnn.apply_permutation", "torch.nn.modules.rnn.apply_permutation"], "methods", ["None"], ["", "", "", "def", "permute_hidden", "(", "self", ",", "hx", ",", "permutation", ")", ":", "\n", "        ", "if", "permutation", "is", "None", ":", "\n", "            ", "return", "hx", "\n", "", "h", "=", "apply_permutation", "(", "hx", "[", "0", "]", ",", "permutation", ")", "\n", "c", "=", "apply_permutation", "(", "hx", "[", "1", "]", ",", "permutation", ")", "\n", "\n", "return", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bilstm.BiLSTM.layer_forward": [[60, 88], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "reversed", "range", "parser.modules.dropout.SharedDropout.get_mask", "torch.cat.append", "torch.cat.append", "torch.cat.reverse", "torch.cat.reverse", "hx_n.append", "range", "len", "len", "hx_n.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "cell", "zip", "zip", "reversed"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.dropout.SharedDropout.get_mask"], ["", "def", "layer_forward", "(", "self", ",", "x", ",", "hx", ",", "cell", ",", "batch_sizes", ",", "reverse", "=", "False", ")", ":", "\n", "        ", "hx_0", "=", "hx_i", "=", "hx", "\n", "hx_n", ",", "output", "=", "[", "]", ",", "[", "]", "\n", "steps", "=", "reversed", "(", "range", "(", "len", "(", "x", ")", ")", ")", "if", "reverse", "else", "range", "(", "len", "(", "x", ")", ")", "\n", "if", "self", ".", "training", ":", "\n", "            ", "hid_mask", "=", "SharedDropout", ".", "get_mask", "(", "hx_0", "[", "0", "]", ",", "self", ".", "dropout", ")", "\n", "\n", "", "for", "t", "in", "steps", ":", "\n", "            ", "last_batch_size", ",", "batch_size", "=", "len", "(", "hx_i", "[", "0", "]", ")", ",", "batch_sizes", "[", "t", "]", "\n", "if", "last_batch_size", "<", "batch_size", ":", "\n", "                ", "hx_i", "=", "[", "torch", ".", "cat", "(", "(", "h", ",", "ih", "[", "last_batch_size", ":", "batch_size", "]", ")", ")", "\n", "for", "h", ",", "ih", "in", "zip", "(", "hx_i", ",", "hx_0", ")", "]", "\n", "", "else", ":", "\n", "                ", "hx_n", ".", "append", "(", "[", "h", "[", "batch_size", ":", "]", "for", "h", "in", "hx_i", "]", ")", "\n", "hx_i", "=", "[", "h", "[", ":", "batch_size", "]", "for", "h", "in", "hx_i", "]", "\n", "", "hx_i", "=", "[", "h", "for", "h", "in", "cell", "(", "x", "[", "t", "]", ",", "hx_i", ")", "]", "\n", "output", ".", "append", "(", "hx_i", "[", "0", "]", ")", "\n", "if", "self", ".", "training", ":", "\n", "                ", "hx_i", "[", "0", "]", "=", "hx_i", "[", "0", "]", "*", "hid_mask", "[", ":", "batch_size", "]", "\n", "", "", "if", "reverse", ":", "\n", "            ", "hx_n", "=", "hx_i", "\n", "output", ".", "reverse", "(", ")", "\n", "", "else", ":", "\n", "            ", "hx_n", ".", "append", "(", "hx_i", ")", "\n", "hx_n", "=", "[", "torch", ".", "cat", "(", "h", ")", "for", "h", "in", "zip", "(", "*", "reversed", "(", "hx_n", ")", ")", "]", "\n", "", "output", "=", "torch", ".", "cat", "(", "output", ")", "\n", "\n", "return", "output", ",", "hx_n", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bilstm.BiLSTM.forward": [[89, 127], ["h.view.view.view", "c.view.view.view", "range", "torch.nn.utils.rnn.PackedSequence", "torch.nn.utils.rnn.PackedSequence", "bilstm.BiLSTM.permute_hidden", "sequence.batch_sizes.tolist", "torch.cat.new_zeros", "torch.cat.new_zeros", "bilstm.BiLSTM.permute_hidden", "torch.split", "torch.split", "torch.split", "torch.split", "bilstm.BiLSTM.layer_forward", "bilstm.BiLSTM.layer_forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "h_n.append", "c_n.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "parser.modules.dropout.SharedDropout.get_mask", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bilstm.BiLSTM.permute_hidden", "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bilstm.BiLSTM.permute_hidden", "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bilstm.BiLSTM.layer_forward", "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.bilstm.BiLSTM.layer_forward", "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.dropout.SharedDropout.get_mask"], ["", "def", "forward", "(", "self", ",", "sequence", ",", "hx", "=", "None", ")", ":", "\n", "        ", "x", ",", "batch_sizes", "=", "sequence", ".", "data", ",", "sequence", ".", "batch_sizes", ".", "tolist", "(", ")", "\n", "batch_size", "=", "batch_sizes", "[", "0", "]", "\n", "h_n", ",", "c_n", "=", "[", "]", ",", "[", "]", "\n", "\n", "if", "hx", "is", "None", ":", "\n", "            ", "ih", "=", "x", ".", "new_zeros", "(", "self", ".", "num_layers", "*", "2", ",", "batch_size", ",", "self", ".", "hidden_size", ")", "\n", "h", ",", "c", "=", "ih", ",", "ih", "\n", "", "else", ":", "\n", "            ", "h", ",", "c", "=", "self", ".", "permute_hidden", "(", "hx", ",", "sequence", ".", "sorted_indices", ")", "\n", "", "h", "=", "h", ".", "view", "(", "self", ".", "num_layers", ",", "2", ",", "batch_size", ",", "self", ".", "hidden_size", ")", "\n", "c", "=", "c", ".", "view", "(", "self", ".", "num_layers", ",", "2", ",", "batch_size", ",", "self", ".", "hidden_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "x", "=", "torch", ".", "split", "(", "x", ",", "batch_sizes", ")", "\n", "if", "self", ".", "training", ":", "\n", "                ", "mask", "=", "SharedDropout", ".", "get_mask", "(", "x", "[", "0", "]", ",", "self", ".", "dropout", ")", "\n", "x", "=", "[", "i", "*", "mask", "[", ":", "len", "(", "i", ")", "]", "for", "i", "in", "x", "]", "\n", "", "x_f", ",", "(", "h_f", ",", "c_f", ")", "=", "self", ".", "layer_forward", "(", "x", "=", "x", ",", "\n", "hx", "=", "(", "h", "[", "i", ",", "0", "]", ",", "c", "[", "i", ",", "0", "]", ")", ",", "\n", "cell", "=", "self", ".", "f_cells", "[", "i", "]", ",", "\n", "batch_sizes", "=", "batch_sizes", ")", "\n", "x_b", ",", "(", "h_b", ",", "c_b", ")", "=", "self", ".", "layer_forward", "(", "x", "=", "x", ",", "\n", "hx", "=", "(", "h", "[", "i", ",", "1", "]", ",", "c", "[", "i", ",", "1", "]", ")", ",", "\n", "cell", "=", "self", ".", "b_cells", "[", "i", "]", ",", "\n", "batch_sizes", "=", "batch_sizes", ",", "\n", "reverse", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x_f", ",", "x_b", ")", ",", "-", "1", ")", "\n", "h_n", ".", "append", "(", "torch", ".", "stack", "(", "(", "h_f", ",", "h_b", ")", ")", ")", "\n", "c_n", ".", "append", "(", "torch", ".", "stack", "(", "(", "c_f", ",", "c_b", ")", ")", ")", "\n", "", "x", "=", "PackedSequence", "(", "x", ",", "\n", "sequence", ".", "batch_sizes", ",", "\n", "sequence", ".", "sorted_indices", ",", "\n", "sequence", ".", "unsorted_indices", ")", "\n", "hx", "=", "torch", ".", "cat", "(", "h_n", ",", "0", ")", ",", "torch", ".", "cat", "(", "c_n", ",", "0", ")", "\n", "hx", "=", "self", ".", "permute_hidden", "(", "hx", ",", "sequence", ".", "unsorted_indices", ")", "\n", "\n", "return", "x", ",", "hx", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.scalar_mix.ScalarMix.__init__": [[9, 18], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Dropout", "torch.Dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_layers", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "ScalarMix", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "weights", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "n_layers", ")", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.scalar_mix.ScalarMix.extra_repr": [[19, 25], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "f\"n_layers={self.n_layers}\"", "\n", "if", "self", ".", "dropout", ".", "p", ">", "0", ":", "\n", "            ", "s", "+=", "f\", dropout={self.dropout.p}\"", "\n", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.scalar_mix.ScalarMix.forward": [[26, 31], ["scalar_mix.ScalarMix.dropout", "sum", "scalar_mix.ScalarMix.weights.softmax", "zip"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tensors", ")", ":", "\n", "        ", "normed_weights", "=", "self", ".", "dropout", "(", "self", ".", "weights", ".", "softmax", "(", "-", "1", ")", ")", "\n", "weighted_sum", "=", "sum", "(", "w", "*", "h", "for", "w", ",", "h", "in", "zip", "(", "normed_weights", ",", "tensors", ")", ")", "\n", "\n", "return", "self", ".", "gamma", "*", "weighted_sum", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__": [[10, 26], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_chars", ",", "n_embed", ",", "n_out", ",", "pad_index", "=", "0", ")", ":", "\n", "        ", "super", "(", "CHAR_LSTM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_chars", "=", "n_chars", "\n", "self", ".", "n_embed", "=", "n_embed", "\n", "self", ".", "n_out", "=", "n_out", "\n", "self", ".", "pad_index", "=", "pad_index", "\n", "\n", "# the embedding layer", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "num_embeddings", "=", "n_chars", ",", "\n", "embedding_dim", "=", "n_embed", ")", "\n", "# the lstm layer", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "n_embed", ",", "\n", "hidden_size", "=", "n_out", "//", "2", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.__repr__": [[27, 35], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "self", ".", "__class__", ".", "__name__", "+", "'('", "\n", "s", "+=", "f\"{self.n_chars}, {self.n_embed}, \"", "\n", "s", "+=", "f\"n_out={self.n_out}, \"", "\n", "s", "+=", "f\"pad_index={self.pad_index}\"", "\n", "s", "+=", "')'", "\n", "\n", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.modules.char_lstm.CHAR_LSTM.forward": [[36, 45], ["torch.nn.utils.rnn.pack_padded_sequence.ne", "torch.nn.utils.rnn.pack_padded_sequence.ne", "torch.nn.utils.rnn.pack_padded_sequence.ne.sum", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "char_lstm.CHAR_LSTM.lstm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "char_lstm.CHAR_LSTM.embed", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "mask", "=", "x", ".", "ne", "(", "self", ".", "pad_index", ")", "\n", "lens", "=", "mask", ".", "sum", "(", "dim", "=", "1", ")", "\n", "\n", "x", "=", "pack_padded_sequence", "(", "self", ".", "embed", "(", "x", ")", ",", "lens", ",", "True", ",", "False", ")", "\n", "x", ",", "(", "hidden", ",", "_", ")", "=", "self", ".", "lstm", "(", "x", ")", "\n", "hidden", "=", "torch", ".", "cat", "(", "torch", ".", "unbind", "(", "hidden", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "hidden", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.__call__": [[19, 74], ["torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "print", "args.update", "os.path.exists", "os.mkdir", "print", "parser.utils.field.Field", "parser.utils.field.Field", "parser.utils.field.Field", "parser.utils.corpus.Corpus.load", "cmd.CMD.WORD.build", "cmd.CMD.FEAT.build", "cmd.CMD.REL.build", "torch.save", "torch.save", "torch.save", "torch.save", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.exists", "parser.utils.field.CharField", "parser.utils.corpus.CoNLL", "parser.utils.corpus.CoNLL", "parser.utils.Embedding.load", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "len", "transformers.BertTokenizer.from_pretrained", "parser.utils.field.BertField", "parser.utils.field.Field", "cmd.CMD.WORD.vocab.stoi.items", "parser.utils.fn.ispunct"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.config.Config.update", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.CharField.build", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.CharField.build", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.field.CharField.build", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.save", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.save", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.save", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.save", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.ispunct"], ["    ", "def", "__call__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "file", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "args", ".", "file", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "fields", ")", "or", "args", ".", "preprocess", ":", "\n", "            ", "print", "(", "\"Preprocess the data\"", ")", "\n", "self", ".", "WORD", "=", "Field", "(", "'words'", ",", "pad", "=", "pad", ",", "unk", "=", "unk", ",", "bos", "=", "bos", ",", "lower", "=", "True", ")", "\n", "if", "args", ".", "feat", "==", "'char'", ":", "\n", "                ", "self", ".", "FEAT", "=", "CharField", "(", "'chars'", ",", "pad", "=", "pad", ",", "unk", "=", "unk", ",", "bos", "=", "bos", ",", "\n", "fix_len", "=", "args", ".", "fix_len", ",", "tokenize", "=", "list", ")", "\n", "", "elif", "args", ".", "feat", "==", "'bert'", ":", "\n", "                ", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "args", ".", "bert_model", ")", "\n", "self", ".", "FEAT", "=", "BertField", "(", "'bert'", ",", "pad", "=", "'[PAD]'", ",", "bos", "=", "'[CLS]'", ",", "\n", "tokenize", "=", "tokenizer", ".", "encode", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "FEAT", "=", "Field", "(", "'tags'", ",", "bos", "=", "bos", ")", "\n", "", "self", ".", "ARC", "=", "Field", "(", "'arcs'", ",", "bos", "=", "bos", ",", "use_vocab", "=", "False", ",", "\n", "fn", "=", "numericalize_arcs", ")", "\n", "self", ".", "REL", "=", "Field", "(", "'rels'", ",", "bos", "=", "bos", ")", "\n", "if", "args", ".", "feat", "in", "(", "'char'", ",", "'bert'", ")", ":", "\n", "                ", "self", ".", "fields", "=", "CoNLL", "(", "FORM", "=", "(", "self", ".", "WORD", ",", "self", ".", "FEAT", ")", ",", "\n", "HEAD", "=", "self", ".", "ARC", ",", "DEPREL", "=", "self", ".", "REL", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "fields", "=", "CoNLL", "(", "FORM", "=", "self", ".", "WORD", ",", "CPOS", "=", "self", ".", "FEAT", ",", "\n", "HEAD", "=", "self", ".", "ARC", ",", "DEPREL", "=", "self", ".", "REL", ")", "\n", "\n", "", "train", "=", "Corpus", ".", "load", "(", "args", ".", "ftrain", ",", "self", ".", "fields", ",", "\n", "args", ".", "max_len", ",", "args", ".", "proj", ",", "args", ".", "parts", ")", "\n", "if", "args", ".", "fembed", ":", "\n", "                ", "embed", "=", "Embedding", ".", "load", "(", "args", ".", "fembed", ",", "args", ".", "unk", ")", "\n", "", "else", ":", "\n", "                ", "embed", "=", "None", "\n", "", "self", ".", "WORD", ".", "build", "(", "train", ",", "args", ".", "min_freq", ",", "embed", ")", "\n", "self", ".", "FEAT", ".", "build", "(", "train", ")", "\n", "self", ".", "REL", ".", "build", "(", "train", ")", "\n", "torch", ".", "save", "(", "self", ".", "fields", ",", "args", ".", "fields", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fields", "=", "torch", ".", "load", "(", "args", ".", "fields", ")", "\n", "if", "args", ".", "feat", "in", "(", "'char'", ",", "'bert'", ")", ":", "\n", "                ", "self", ".", "WORD", ",", "self", ".", "FEAT", "=", "self", ".", "fields", ".", "FORM", "\n", "", "else", ":", "\n", "                ", "self", ".", "WORD", ",", "self", ".", "FEAT", "=", "self", ".", "fields", ".", "FORM", ",", "self", ".", "fields", ".", "CPOS", "\n", "", "self", ".", "ARC", ",", "self", ".", "REL", "=", "self", ".", "fields", ".", "HEAD", ",", "self", ".", "fields", ".", "DEPREL", "\n", "", "self", ".", "puncts", "=", "torch", ".", "tensor", "(", "[", "i", "for", "s", ",", "i", "in", "self", ".", "WORD", ".", "vocab", ".", "stoi", ".", "items", "(", ")", "\n", "if", "ispunct", "(", "s", ")", "]", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'sum'", ")", "\n", "\n", "print", "(", "f\"{self.WORD}\\n{self.FEAT}\\n{self.ARC}\\n{self.REL}\"", ")", "\n", "args", ".", "update", "(", "{", "\n", "'n_words'", ":", "self", ".", "WORD", ".", "vocab", ".", "n_init", ",", "\n", "'n_feats'", ":", "len", "(", "self", ".", "FEAT", ".", "vocab", ")", ",", "\n", "'n_rels'", ":", "len", "(", "self", ".", "REL", ".", "vocab", ")", ",", "\n", "'pad_index'", ":", "self", ".", "WORD", ".", "pad_index", ",", "\n", "'unk_index'", ":", "self", ".", "WORD", ".", "unk_index", ",", "\n", "'bos_index'", ":", "self", ".", "WORD", ".", "bos_index", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.train": [[76, 107], ["cmd.CMD.model.train", "len", "parser.utils.metric.Metric", "cmd.CMD.optimizer.zero_grad", "words.ne", "cmd.CMD.model", "cmd.CMD.get_loss", "loss.backward", "torch.utils.clip_grad_norm_", "torch.utils.clip_grad_norm_", "cmd.CMD.optimizer.step", "cmd.CMD.scheduler.step", "cmd.CMD.decode", "loss.item", "metric", "cmd.CMD.model.parameters", "arcs.ge", "words.unsqueeze().ne().all", "words.unsqueeze().ne", "words.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.train", "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.get_loss", "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.decode"], ["", "def", "train", "(", "self", ",", "loader", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "total_loss", ",", "metric", "=", "0", ",", "Metric", "(", ")", "\n", "\n", "for", "words", ",", "feats", ",", "arcs", ",", "rels", "in", "loader", ":", "\n", "            ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "mask", "=", "words", ".", "ne", "(", "self", ".", "args", ".", "pad_index", ")", "\n", "# ignore the first token of each sentence", "\n", "mask", "[", ":", ",", "0", "]", "=", "0", "\n", "arc_scores", ",", "rel_scores", "=", "self", ".", "model", "(", "words", ",", "feats", ")", "\n", "loss", ",", "arc_scores", "=", "self", ".", "get_loss", "(", "arc_scores", ",", "rel_scores", ",", "\n", "arcs", ",", "rels", ",", "mask", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "self", ".", "args", ".", "clip", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "\n", "arc_preds", ",", "rel_preds", "=", "self", ".", "decode", "(", "arc_scores", ",", "rel_scores", ",", "mask", ")", "\n", "if", "self", ".", "args", ".", "partial", ":", "\n", "                ", "mask", "&=", "arcs", ".", "ge", "(", "0", ")", "\n", "# ignore all punctuation if not specified", "\n", "", "if", "not", "self", ".", "args", ".", "punct", ":", "\n", "                ", "mask", "&=", "words", ".", "unsqueeze", "(", "-", "1", ")", ".", "ne", "(", "self", ".", "puncts", ")", ".", "all", "(", "-", "1", ")", "\n", "", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "metric", "(", "arc_preds", ",", "rel_preds", ",", "arcs", ",", "rels", ",", "mask", ")", "\n", "", "total_loss", "/=", "len", "(", "loader", ")", "\n", "\n", "return", "total_loss", ",", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.evaluate": [[108, 132], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cmd.CMD.model.eval", "len", "parser.utils.metric.Metric", "words.ne", "cmd.CMD.model", "cmd.CMD.get_loss", "cmd.CMD.decode", "loss.item", "metric", "arcs.ge", "words.unsqueeze().ne().all", "words.unsqueeze().ne", "words.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.get_loss", "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.decode"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ",", "loader", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "total_loss", ",", "metric", "=", "0", ",", "Metric", "(", ")", "\n", "\n", "for", "words", ",", "feats", ",", "arcs", ",", "rels", "in", "loader", ":", "\n", "            ", "mask", "=", "words", ".", "ne", "(", "self", ".", "args", ".", "pad_index", ")", "\n", "# ignore the first token of each sentence", "\n", "mask", "[", ":", ",", "0", "]", "=", "0", "\n", "arc_scores", ",", "rel_scores", "=", "self", ".", "model", "(", "words", ",", "feats", ")", "\n", "loss", ",", "arc_scores", "=", "self", ".", "get_loss", "(", "arc_scores", ",", "rel_scores", ",", "\n", "arcs", ",", "rels", ",", "mask", ")", "\n", "arc_preds", ",", "rel_preds", "=", "self", ".", "decode", "(", "arc_scores", ",", "rel_scores", ",", "mask", ")", "\n", "if", "self", ".", "args", ".", "partial", ":", "\n", "                ", "mask", "&=", "arcs", ".", "ge", "(", "0", ")", "\n", "# ignore all punctuation if not specified", "\n", "", "if", "not", "self", ".", "args", ".", "punct", ":", "\n", "                ", "mask", "&=", "words", ".", "unsqueeze", "(", "-", "1", ")", ".", "ne", "(", "self", ".", "puncts", ")", ".", "all", "(", "-", "1", ")", "\n", "", "total_loss", "+=", "loss", ".", "item", "(", ")", "\n", "metric", "(", "arc_preds", ",", "rel_preds", ",", "arcs", ",", "rels", ",", "mask", ")", "\n", "", "total_loss", "/=", "len", "(", "loader", ")", "\n", "\n", "return", "total_loss", ",", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.predict": [[133, 157], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cmd.CMD.model.eval", "words.ne", "words.ne.sum().tolist", "cmd.CMD.model", "cmd.CMD.decode", "all_arcs.extend", "all_rels.extend", "seq.tolist", "cmd.CMD.REL.vocab.id2token", "parser.utils.alg.crf", "arc_preds[].split", "rel_preds[].split", "parser.utils.alg.crf.gather", "all_probs.extend", "seq.tolist", "round", "words.ne.sum", "arc_preds.unsqueeze", "[].split", "seq.tolist", "parser.utils.alg.crf.gather.squeeze"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.decode", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.extend", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.extend", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.id2token", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.alg.crf", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.vocab.Vocab.extend"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "predict", "(", "self", ",", "loader", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "all_arcs", ",", "all_rels", ",", "all_probs", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "words", ",", "feats", "in", "loader", ":", "\n", "            ", "mask", "=", "words", ".", "ne", "(", "self", ".", "args", ".", "pad_index", ")", "\n", "# ignore the first token of each sentence", "\n", "mask", "[", ":", ",", "0", "]", "=", "0", "\n", "lens", "=", "mask", ".", "sum", "(", "1", ")", ".", "tolist", "(", ")", "\n", "arc_scores", ",", "rel_scores", "=", "self", ".", "model", "(", "words", ",", "feats", ")", "\n", "if", "self", ".", "args", ".", "marg", ":", "\n", "                ", "arc_scores", "=", "crf", "(", "arc_scores", ",", "mask", ")", "\n", "", "arc_preds", ",", "rel_preds", "=", "self", ".", "decode", "(", "arc_scores", ",", "rel_scores", ",", "mask", ")", "\n", "all_arcs", ".", "extend", "(", "arc_preds", "[", "mask", "]", ".", "split", "(", "lens", ")", ")", "\n", "all_rels", ".", "extend", "(", "rel_preds", "[", "mask", "]", ".", "split", "(", "lens", ")", ")", "\n", "if", "self", ".", "args", ".", "prob", ":", "\n", "                ", "arc_probs", "=", "arc_scores", ".", "gather", "(", "-", "1", ",", "arc_preds", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "all_probs", ".", "extend", "(", "arc_probs", ".", "squeeze", "(", "-", "1", ")", "[", "mask", "]", ".", "split", "(", "lens", ")", ")", "\n", "", "", "all_arcs", "=", "[", "seq", ".", "tolist", "(", ")", "for", "seq", "in", "all_arcs", "]", "\n", "all_rels", "=", "[", "self", ".", "REL", ".", "vocab", ".", "id2token", "(", "seq", ".", "tolist", "(", ")", ")", "for", "seq", "in", "all_rels", "]", "\n", "all_probs", "=", "[", "[", "round", "(", "p", ",", "4", ")", "for", "p", "in", "seq", ".", "tolist", "(", ")", "]", "for", "seq", "in", "all_probs", "]", "\n", "\n", "return", "all_arcs", ",", "all_rels", ",", "all_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.get_loss": [[158, 170], ["mask.sum", "parser.utils.alg.crf", "cmd.CMD.criterion", "arcs.ge", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.alg.crf"], ["", "def", "get_loss", "(", "self", ",", "arc_scores", ",", "rel_scores", ",", "arcs", ",", "rels", ",", "mask", ")", ":", "\n", "        ", "total", "=", "mask", ".", "sum", "(", ")", "\n", "batch_size", ",", "seq_len", "=", "mask", ".", "shape", "\n", "arc_loss", ",", "arc_probs", "=", "crf", "(", "arc_scores", ",", "mask", ",", "arcs", ",", "\n", "self", ".", "args", ".", "partial", ")", "\n", "if", "self", ".", "args", ".", "partial", ":", "\n", "            ", "mask", "=", "mask", "&", "arcs", ".", "ge", "(", "0", ")", "\n", "", "rel_scores", ",", "rels", "=", "rel_scores", "[", "mask", "]", ",", "rels", "[", "mask", "]", "\n", "rel_scores", "=", "rel_scores", "[", "torch", ".", "arange", "(", "len", "(", "rels", ")", ")", ",", "arcs", "[", "mask", "]", "]", "\n", "rel_loss", "=", "self", ".", "criterion", "(", "rel_scores", ",", "rels", ")", "\n", "loss", "=", "(", "arc_loss", "+", "rel_loss", ")", "/", "total", "\n", "return", "loss", ",", "arc_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.decode": [[171, 184], ["mask.sum", "arc_scores.diagonal().fill_", "arc_scores.argmax", "rel_scores.argmax", "rel_preds.gather().squeeze.gather().squeeze.gather().squeeze", "float", "any", "parser.utils.alg.eisner", "arc_scores.diagonal", "parser.utils.fn.istree", "zip", "rel_preds.gather().squeeze.gather().squeeze.gather", "mask.sum.tolist", "arc_scores.argmax.tolist", "arc_scores.argmax.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.alg.eisner", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.fn.istree"], ["", "def", "decode", "(", "self", ",", "arc_scores", ",", "rel_scores", ",", "mask", ")", ":", "\n", "        ", "lens", "=", "mask", ".", "sum", "(", "1", ")", "\n", "# prevent self-loops", "\n", "arc_scores", ".", "diagonal", "(", "0", ",", "1", ",", "2", ")", ".", "fill_", "(", "float", "(", "'-inf'", ")", ")", "\n", "arc_preds", "=", "arc_scores", ".", "argmax", "(", "-", "1", ")", "\n", "bad", "=", "[", "not", "istree", "(", "sequence", "[", ":", "i", "+", "1", "]", ",", "self", ".", "args", ".", "proj", ")", "\n", "for", "i", ",", "sequence", "in", "zip", "(", "lens", ".", "tolist", "(", ")", ",", "arc_preds", ".", "tolist", "(", ")", ")", "]", "\n", "if", "self", ".", "args", ".", "tree", "and", "any", "(", "bad", ")", ":", "\n", "            ", "arc_preds", "[", "bad", "]", "=", "eisner", "(", "arc_scores", "[", "bad", "]", ",", "mask", "[", "bad", "]", ")", "\n", "", "rel_preds", "=", "rel_scores", ".", "argmax", "(", "-", "1", ")", "\n", "rel_preds", "=", "rel_preds", ".", "gather", "(", "-", "1", ",", "arc_preds", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "return", "arc_preds", ",", "rel_preds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.predict.Predict.add_subparser": [[15, 31], ["parser.add_parser", "parser.add_parser.add_argument", "parser.add_parser.add_argument", "parser.add_parser.add_argument", "parser.add_parser.add_argument", "parser.add_parser.add_argument"], "methods", ["None"], ["    ", "def", "add_subparser", "(", "self", ",", "name", ",", "parser", ")", ":", "\n", "        ", "subparser", "=", "parser", ".", "add_parser", "(", "\n", "name", ",", "help", "=", "'Use a trained model to make predictions.'", "\n", ")", "\n", "subparser", ".", "add_argument", "(", "'--prob'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to output probs'", ")", "\n", "subparser", ".", "add_argument", "(", "'--marg'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to use marginal probs'", ")", "\n", "subparser", ".", "add_argument", "(", "'--proj'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to projectivise the outputs'", ")", "\n", "subparser", ".", "add_argument", "(", "'--fdata'", ",", "default", "=", "'data/ptb/test.conllx'", ",", "\n", "help", "=", "'path to dataset'", ")", "\n", "subparser", ".", "add_argument", "(", "'--fpred'", ",", "default", "=", "'pred.conllx'", ",", "\n", "help", "=", "'path to predicted result'", ")", "\n", "\n", "return", "subparser", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.predict.Predict.__call__": [[32, 63], ["super().__call__", "print", "parser.utils.corpus.Corpus.load", "parser.utils.data.TextDataset", "parser.utils.data.batchify", "print", "print", "parser.Model.load", "print", "print", "datetime.datetime.datetime.now", "predict.Predict.predict", "torch.tensor().argsort", "print", "parser.utils.corpus.Corpus.load.save", "print", "predict.Predict.fields._replace", "datetime.datetime.datetime.now", "torch.tensor", "parser.utils.field.Field", "len", "len", "len", "total_time.total_seconds", "parser.utils.data.TextDataset.buckets.values"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.train.Train.__call__", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.batchify", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.predict", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.save", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Sentence.values"], ["", "def", "__call__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Predict", ",", "self", ")", ".", "__call__", "(", "args", ")", "\n", "\n", "print", "(", "\"Load the dataset\"", ")", "\n", "if", "args", ".", "prob", ":", "\n", "            ", "self", ".", "fields", "=", "self", ".", "fields", ".", "_replace", "(", "PHEAD", "=", "Field", "(", "'probs'", ")", ")", "\n", "", "corpus", "=", "Corpus", ".", "load", "(", "args", ".", "fdata", ",", "self", ".", "fields", ")", "\n", "dataset", "=", "TextDataset", "(", "corpus", ",", "[", "self", ".", "WORD", ",", "self", ".", "FEAT", "]", ",", "args", ".", "buckets", ")", "\n", "# set the data loader", "\n", "dataset", ".", "loader", "=", "batchify", "(", "dataset", ",", "args", ".", "batch_size", ")", "\n", "print", "(", "f\"{len(dataset)} sentences, \"", "\n", "f\"{len(dataset.loader)} batches\"", ")", "\n", "\n", "print", "(", "\"Load the model\"", ")", "\n", "self", ".", "model", "=", "Model", ".", "load", "(", "args", ".", "model", ")", "\n", "print", "(", "f\"{self.model}\\n\"", ")", "\n", "\n", "print", "(", "\"Make predictions on the dataset\"", ")", "\n", "start", "=", "datetime", ".", "now", "(", ")", "\n", "pred_arcs", ",", "pred_rels", ",", "pred_probs", "=", "self", ".", "predict", "(", "dataset", ".", "loader", ")", "\n", "total_time", "=", "datetime", ".", "now", "(", ")", "-", "start", "\n", "# restore the order of sentences in the buckets", "\n", "indices", "=", "torch", ".", "tensor", "(", "[", "i", "for", "bucket", "in", "dataset", ".", "buckets", ".", "values", "(", ")", "\n", "for", "i", "in", "bucket", "]", ")", ".", "argsort", "(", ")", "\n", "corpus", ".", "arcs", "=", "[", "pred_arcs", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "corpus", ".", "rels", "=", "[", "pred_rels", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "if", "args", ".", "prob", ":", "\n", "            ", "corpus", ".", "probs", "=", "[", "pred_probs", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "", "print", "(", "f\"Save the predicted result to {args.fpred}\"", ")", "\n", "corpus", ".", "save", "(", "args", ".", "fpred", ")", "\n", "print", "(", "f\"{total_time}s elapsed, \"", "\n", "f\"{len(dataset) / total_time.total_seconds():.2f} Sents/s\"", ")", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.evaluate.Evaluate.add_subparser": [[12, 24], ["parser.add_parser", "parser.add_parser.add_argument", "parser.add_parser.add_argument", "parser.add_parser.add_argument"], "methods", ["None"], ["    ", "def", "add_subparser", "(", "self", ",", "name", ",", "parser", ")", ":", "\n", "        ", "subparser", "=", "parser", ".", "add_parser", "(", "\n", "name", ",", "help", "=", "'Evaluate the specified model and dataset.'", "\n", ")", "\n", "subparser", ".", "add_argument", "(", "'--punct'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to include punctuation'", ")", "\n", "subparser", ".", "add_argument", "(", "'--proj'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to projectivise the outputs'", ")", "\n", "subparser", ".", "add_argument", "(", "'--fdata'", ",", "default", "=", "'data/ptb/test.conllx'", ",", "\n", "help", "=", "'path to dataset'", ")", "\n", "\n", "return", "subparser", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.evaluate.Evaluate.__call__": [[25, 47], ["super().__call__", "print", "parser.utils.corpus.Corpus.load", "parser.utils.data.TextDataset", "parser.utils.data.batchify", "print", "print", "parser.Model.load", "print", "print", "datetime.datetime.datetime.now", "evaluate.Evaluate.evaluate", "print", "print", "datetime.datetime.datetime.now", "len", "len", "len", "len", "total_time.total_seconds"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.train.Train.__call__", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.batchify", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.evaluate"], ["", "def", "__call__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Evaluate", ",", "self", ")", ".", "__call__", "(", "args", ")", "\n", "\n", "print", "(", "\"Load the dataset\"", ")", "\n", "corpus", "=", "Corpus", ".", "load", "(", "args", ".", "fdata", ",", "self", ".", "fields", ")", "\n", "dataset", "=", "TextDataset", "(", "corpus", ",", "self", ".", "fields", ",", "args", ".", "buckets", ")", "\n", "# set the data loader", "\n", "dataset", ".", "loader", "=", "batchify", "(", "dataset", ",", "args", ".", "batch_size", ")", "\n", "print", "(", "f\"{len(dataset)} sentences, \"", "\n", "f\"{len(dataset.loader)} batches, \"", "\n", "f\"{len(dataset.buckets)} buckets\"", ")", "\n", "\n", "print", "(", "\"Load the model\"", ")", "\n", "self", ".", "model", "=", "Model", ".", "load", "(", "args", ".", "model", ")", "\n", "print", "(", "f\"{self.model}\\n\"", ")", "\n", "\n", "print", "(", "\"Evaluate the dataset\"", ")", "\n", "start", "=", "datetime", ".", "now", "(", ")", "\n", "loss", ",", "metric", "=", "self", ".", "evaluate", "(", "dataset", ".", "loader", ")", "\n", "total_time", "=", "datetime", ".", "now", "(", ")", "-", "start", "\n", "print", "(", "f\"Loss: {loss:.4f} {metric}\"", ")", "\n", "print", "(", "f\"{total_time}s elapsed, \"", "\n", "f\"{len(dataset) / total_time.total_seconds():.2f} Sents/s\"", ")", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.train.Train.add_subparser": [[18, 42], ["parser.add_parser", "parser.add_parser.add_argument", "parser.add_parser.add_argument", "parser.add_parser.add_argument", "parser.add_parser.add_argument", "parser.add_parser.add_argument", "parser.add_parser.add_argument", "parser.add_parser.add_argument", "parser.add_parser.add_argument", "parser.add_parser.add_argument"], "methods", ["None"], ["    ", "def", "add_subparser", "(", "self", ",", "name", ",", "parser", ")", ":", "\n", "        ", "subparser", "=", "parser", ".", "add_parser", "(", "\n", "name", ",", "help", "=", "'Train a model.'", "\n", ")", "\n", "subparser", ".", "add_argument", "(", "'--parts'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'num of the parts split the data into'", ")", "\n", "subparser", ".", "add_argument", "(", "'--max-len'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'max length of the sentences'", ")", "\n", "subparser", ".", "add_argument", "(", "'--proj'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to projectivise the data'", ")", "\n", "subparser", ".", "add_argument", "(", "'--punct'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to include punctuation'", ")", "\n", "subparser", ".", "add_argument", "(", "'--ftrain'", ",", "default", "=", "'data/ptb/train.conllx'", ",", "\n", "help", "=", "'path to train file'", ")", "\n", "subparser", ".", "add_argument", "(", "'--fdev'", ",", "default", "=", "'data/ptb/dev.conllx'", ",", "\n", "help", "=", "'path to dev file'", ")", "\n", "subparser", ".", "add_argument", "(", "'--ftest'", ",", "default", "=", "'data/ptb/test.conllx'", ",", "\n", "help", "=", "'path to test file'", ")", "\n", "subparser", ".", "add_argument", "(", "'--fembed'", ",", "default", "=", "'data/glove.6B.100d.txt'", ",", "\n", "help", "=", "'path to pretrained embeddings'", ")", "\n", "subparser", ".", "add_argument", "(", "'--unk'", ",", "default", "=", "'unk'", ",", "\n", "help", "=", "'unk token in pretrained embeddings'", ")", "\n", "\n", "return", "subparser", "\n", "\n"]], "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.train.Train.__call__": [[43, 116], ["super().__call__", "parser.utils.corpus.Corpus.load", "parser.utils.corpus.Corpus.load", "parser.utils.corpus.Corpus.load", "parser.utils.data.TextDataset", "parser.utils.data.TextDataset", "parser.utils.data.TextDataset", "parser.utils.data.batchify", "parser.utils.data.batchify", "parser.utils.data.batchify", "print", "print", "print", "print", "parser.Model().load_pretrained", "print", "parser.utils.data.TextDataset.Train.model.to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.ExponentialLR", "datetime.datetime.timedelta", "range", "parser.Model.load", "parser.utils.data.TextDataset.Train.evaluate", "print", "print", "print", "print", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "torch.DataParallel", "parser.utils.data.TextDataset.Train.model.parameters", "parser.utils.metric.Metric", "datetime.datetime.datetime.now", "print", "parser.utils.data.TextDataset.Train.train", "print", "parser.utils.data.TextDataset.Train.evaluate", "print", "parser.utils.data.TextDataset.Train.evaluate", "print", "parser.Model", "datetime.datetime.datetime.now", "hasattr", "print", "print", "len", "len", "len", "len", "len", "len", "len", "len", "len", "parser.utils.data.TextDataset.Train.model.module.save", "parser.utils.data.TextDataset.Train.model.save"], "methods", ["home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.train.Train.__call__", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.batchify", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.batchify", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.data.batchify", "home.repos.pwc.inspect_result.yzhangcs_crfpar.parser.model.Model.load_pretrained", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.load", "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.evaluate", "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.train", "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.evaluate", "home.repos.pwc.inspect_result.yzhangcs_crfpar.cmds.cmd.CMD.evaluate", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.save", "home.repos.pwc.inspect_result.yzhangcs_crfpar.utils.corpus.Corpus.save"], ["", "def", "__call__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Train", ",", "self", ")", ".", "__call__", "(", "args", ")", "\n", "\n", "train", "=", "Corpus", ".", "load", "(", "args", ".", "ftrain", ",", "self", ".", "fields", ",", "\n", "args", ".", "max_len", ",", "args", ".", "proj", ",", "args", ".", "parts", ")", "\n", "dev", "=", "Corpus", ".", "load", "(", "args", ".", "fdev", ",", "self", ".", "fields", ")", "\n", "test", "=", "Corpus", ".", "load", "(", "args", ".", "ftest", ",", "self", ".", "fields", ")", "\n", "\n", "train", "=", "TextDataset", "(", "train", ",", "self", ".", "fields", ",", "args", ".", "buckets", ")", "\n", "dev", "=", "TextDataset", "(", "dev", ",", "self", ".", "fields", ",", "args", ".", "buckets", ")", "\n", "test", "=", "TextDataset", "(", "test", ",", "self", ".", "fields", ",", "args", ".", "buckets", ")", "\n", "# set the data loaders", "\n", "train", ".", "loader", "=", "batchify", "(", "train", ",", "args", ".", "batch_size", ",", "True", ")", "\n", "dev", ".", "loader", "=", "batchify", "(", "dev", ",", "args", ".", "batch_size", ")", "\n", "test", ".", "loader", "=", "batchify", "(", "test", ",", "args", ".", "batch_size", ")", "\n", "print", "(", "f\"{'train:':6} {len(train):5} sentences, \"", "\n", "f\"{len(train.loader):3} batches, \"", "\n", "f\"{len(train.buckets)} buckets\"", ")", "\n", "print", "(", "f\"{'dev:':6} {len(dev):5} sentences, \"", "\n", "f\"{len(dev.loader):3} batches, \"", "\n", "f\"{len(train.buckets)} buckets\"", ")", "\n", "print", "(", "f\"{'test:':6} {len(test):5} sentences, \"", "\n", "f\"{len(test.loader):3} batches, \"", "\n", "f\"{len(train.buckets)} buckets\"", ")", "\n", "\n", "print", "(", "\"Create the model\"", ")", "\n", "self", ".", "model", "=", "Model", "(", "args", ")", ".", "load_pretrained", "(", "self", ".", "WORD", ".", "embed", ")", "\n", "print", "(", "f\"{self.model}\\n\"", ")", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "DataParallel", "(", "self", ".", "model", ")", "\n", "", "self", ".", "optimizer", "=", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "lr", ",", "\n", "(", "args", ".", "mu", ",", "args", ".", "nu", ")", ",", "\n", "args", ".", "epsilon", ")", "\n", "self", ".", "scheduler", "=", "ExponentialLR", "(", "self", ".", "optimizer", ",", "\n", "args", ".", "decay", "**", "(", "1", "/", "args", ".", "decay_steps", ")", ")", "\n", "\n", "total_time", "=", "timedelta", "(", ")", "\n", "best_e", ",", "best_metric", "=", "1", ",", "Metric", "(", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "1", ",", "args", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "start", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "print", "(", "f\"Epoch {epoch} / {args.epochs}:\"", ")", "\n", "loss", ",", "train_metric", "=", "self", ".", "train", "(", "train", ".", "loader", ")", "\n", "print", "(", "f\"{'train:':6} Loss: {loss:.4f} {train_metric}\"", ")", "\n", "loss", ",", "dev_metric", "=", "self", ".", "evaluate", "(", "dev", ".", "loader", ")", "\n", "print", "(", "f\"{'dev:':6} Loss: {loss:.4f} {dev_metric}\"", ")", "\n", "loss", ",", "test_metric", "=", "self", ".", "evaluate", "(", "test", ".", "loader", ")", "\n", "print", "(", "f\"{'test:':6} Loss: {loss:.4f} {test_metric}\"", ")", "\n", "\n", "t", "=", "datetime", ".", "now", "(", ")", "-", "start", "\n", "# save the model if it is the best so far", "\n", "if", "dev_metric", ">", "best_metric", "and", "epoch", ">", "args", ".", "patience", "//", "10", ":", "\n", "                ", "best_e", ",", "best_metric", "=", "epoch", ",", "dev_metric", "\n", "if", "hasattr", "(", "self", ".", "model", ",", "'module'", ")", ":", "\n", "                    ", "self", ".", "model", ".", "module", ".", "save", "(", "args", ".", "model", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "model", ".", "save", "(", "args", ".", "model", ")", "\n", "", "print", "(", "f\"{t}s elapsed (saved)\\n\"", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "f\"{t}s elapsed\\n\"", ")", "\n", "", "total_time", "+=", "t", "\n", "if", "epoch", "-", "best_e", ">=", "args", ".", "patience", ":", "\n", "                ", "break", "\n", "", "", "self", ".", "model", "=", "Model", ".", "load", "(", "args", ".", "model", ")", "\n", "loss", ",", "metric", "=", "self", ".", "evaluate", "(", "test", ".", "loader", ")", "\n", "\n", "print", "(", "f\"max score of dev is {best_metric.score:.2%} at epoch {best_e}\"", ")", "\n", "print", "(", "f\"the score of test at epoch {best_e} is {metric.score:.2%}\"", ")", "\n", "print", "(", "f\"average time of each epoch is {total_time / epoch}s\"", ")", "\n", "print", "(", "f\"{total_time}s elapsed\"", ")", "\n", "", "", ""]]}