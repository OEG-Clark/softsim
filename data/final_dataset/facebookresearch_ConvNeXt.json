{"home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.engine.train_one_epoch": [[17, 136], ["model.train", "utils.MetricLogger", "utils.MetricLogger.add_meter", "utils.MetricLogger.add_meter", "optimizer.zero_grad", "enumerate", "utils.MetricLogger.synchronize_between_processes", "print", "utils.SmoothedValue", "utils.SmoothedValue", "utils.MetricLogger.log_every", "samples.to.to", "targets.to.to", "criterion.item", "torch.cuda.synchronize", "utils.MetricLogger.update", "utils.MetricLogger.update", "utils.MetricLogger.update", "utils.MetricLogger.update", "utils.MetricLogger.update", "enumerate", "mixup_fn", "model", "criterion", "math.isfinite", "print", "math.isfinite", "loss_scaler", "criterion.backward", "min", "max", "utils.MetricLogger.update", "log_writer.update", "log_writer.update", "log_writer.update", "log_writer.update", "log_writer.update", "log_writer.set_step", "wandb_logger._wandb.log", "wandb_logger._wandb.log", "utils.MetricLogger.meters.items", "torch.cuda.amp.autocast", "model", "criterion", "hasattr", "optimizer.zero_grad", "optimizer.step", "optimizer.zero_grad", "log_writer.update", "wandb_logger._wandb.log", "wandb_logger._wandb.log", "model.parameters", "model_ema.update", "model_ema.update", "model.max"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.MetricLogger.add_meter", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.set_step", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.customized_text.CustomizedTextLoggerHook.log", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.customized_text.CustomizedTextLoggerHook.log", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.customized_text.CustomizedTextLoggerHook.log", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.customized_text.CustomizedTextLoggerHook.log", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.max"], ["def", "train_one_epoch", "(", "model", ":", "torch", ".", "nn", ".", "Module", ",", "criterion", ":", "torch", ".", "nn", ".", "Module", ",", "\n", "data_loader", ":", "Iterable", ",", "optimizer", ":", "torch", ".", "optim", ".", "Optimizer", ",", "\n", "device", ":", "torch", ".", "device", ",", "epoch", ":", "int", ",", "loss_scaler", ",", "max_norm", ":", "float", "=", "0", ",", "\n", "model_ema", ":", "Optional", "[", "ModelEma", "]", "=", "None", ",", "mixup_fn", ":", "Optional", "[", "Mixup", "]", "=", "None", ",", "log_writer", "=", "None", ",", "\n", "wandb_logger", "=", "None", ",", "start_steps", "=", "None", ",", "lr_schedule_values", "=", "None", ",", "wd_schedule_values", "=", "None", ",", "\n", "num_training_steps_per_epoch", "=", "None", ",", "update_freq", "=", "None", ",", "use_amp", "=", "False", ")", ":", "\n", "    ", "model", ".", "train", "(", "True", ")", "\n", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "metric_logger", ".", "add_meter", "(", "'lr'", ",", "utils", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.6f}'", ")", ")", "\n", "metric_logger", ".", "add_meter", "(", "'min_lr'", ",", "utils", ".", "SmoothedValue", "(", "window_size", "=", "1", ",", "fmt", "=", "'{value:.6f}'", ")", ")", "\n", "header", "=", "'Epoch: [{}]'", ".", "format", "(", "epoch", ")", "\n", "print_freq", "=", "10", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "for", "data_iter_step", ",", "(", "samples", ",", "targets", ")", "in", "enumerate", "(", "metric_logger", ".", "log_every", "(", "data_loader", ",", "print_freq", ",", "header", ")", ")", ":", "\n", "        ", "step", "=", "data_iter_step", "//", "update_freq", "\n", "if", "step", ">=", "num_training_steps_per_epoch", ":", "\n", "            ", "continue", "\n", "", "it", "=", "start_steps", "+", "step", "# global training iteration", "\n", "# Update LR & WD for the first acc", "\n", "if", "lr_schedule_values", "is", "not", "None", "or", "wd_schedule_values", "is", "not", "None", "and", "data_iter_step", "%", "update_freq", "==", "0", ":", "\n", "            ", "for", "i", ",", "param_group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "lr_schedule_values", "is", "not", "None", ":", "\n", "                    ", "param_group", "[", "\"lr\"", "]", "=", "lr_schedule_values", "[", "it", "]", "*", "param_group", "[", "\"lr_scale\"", "]", "\n", "", "if", "wd_schedule_values", "is", "not", "None", "and", "param_group", "[", "\"weight_decay\"", "]", ">", "0", ":", "\n", "                    ", "param_group", "[", "\"weight_decay\"", "]", "=", "wd_schedule_values", "[", "it", "]", "\n", "\n", "", "", "", "samples", "=", "samples", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "targets", "=", "targets", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "if", "mixup_fn", "is", "not", "None", ":", "\n", "            ", "samples", ",", "targets", "=", "mixup_fn", "(", "samples", ",", "targets", ")", "\n", "\n", "", "if", "use_amp", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                ", "output", "=", "model", "(", "samples", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "targets", ")", "\n", "", "", "else", ":", "# full precision", "\n", "            ", "output", "=", "model", "(", "samples", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "targets", ")", "\n", "\n", "", "loss_value", "=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "not", "math", ".", "isfinite", "(", "loss_value", ")", ":", "# this could trigger if using AMP", "\n", "            ", "print", "(", "\"Loss is {}, stopping training\"", ".", "format", "(", "loss_value", ")", ")", "\n", "assert", "math", ".", "isfinite", "(", "loss_value", ")", "\n", "\n", "", "if", "use_amp", ":", "\n", "# this attribute is added by timm on one optimizer (adahessian)", "\n", "            ", "is_second_order", "=", "hasattr", "(", "optimizer", ",", "'is_second_order'", ")", "and", "optimizer", ".", "is_second_order", "\n", "loss", "/=", "update_freq", "\n", "grad_norm", "=", "loss_scaler", "(", "loss", ",", "optimizer", ",", "clip_grad", "=", "max_norm", ",", "\n", "parameters", "=", "model", ".", "parameters", "(", ")", ",", "create_graph", "=", "is_second_order", ",", "\n", "update_grad", "=", "(", "data_iter_step", "+", "1", ")", "%", "update_freq", "==", "0", ")", "\n", "if", "(", "data_iter_step", "+", "1", ")", "%", "update_freq", "==", "0", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "model_ema", "is", "not", "None", ":", "\n", "                    ", "model_ema", ".", "update", "(", "model", ")", "\n", "", "", "", "else", ":", "# full precision", "\n", "            ", "loss", "/=", "update_freq", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "(", "data_iter_step", "+", "1", ")", "%", "update_freq", "==", "0", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "model_ema", "is", "not", "None", ":", "\n", "                    ", "model_ema", ".", "update", "(", "model", ")", "\n", "\n", "", "", "", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "if", "mixup_fn", "is", "None", ":", "\n", "            ", "class_acc", "=", "(", "output", ".", "max", "(", "-", "1", ")", "[", "-", "1", "]", "==", "targets", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "            ", "class_acc", "=", "None", "\n", "", "metric_logger", ".", "update", "(", "loss", "=", "loss_value", ")", "\n", "metric_logger", ".", "update", "(", "class_acc", "=", "class_acc", ")", "\n", "min_lr", "=", "10.", "\n", "max_lr", "=", "0.", "\n", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "min_lr", "=", "min", "(", "min_lr", ",", "group", "[", "\"lr\"", "]", ")", "\n", "max_lr", "=", "max", "(", "max_lr", ",", "group", "[", "\"lr\"", "]", ")", "\n", "\n", "", "metric_logger", ".", "update", "(", "lr", "=", "max_lr", ")", "\n", "metric_logger", ".", "update", "(", "min_lr", "=", "min_lr", ")", "\n", "weight_decay_value", "=", "None", "\n", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "if", "group", "[", "\"weight_decay\"", "]", ">", "0", ":", "\n", "                ", "weight_decay_value", "=", "group", "[", "\"weight_decay\"", "]", "\n", "", "", "metric_logger", ".", "update", "(", "weight_decay", "=", "weight_decay_value", ")", "\n", "if", "use_amp", ":", "\n", "            ", "metric_logger", ".", "update", "(", "grad_norm", "=", "grad_norm", ")", "\n", "\n", "", "if", "log_writer", "is", "not", "None", ":", "\n", "            ", "log_writer", ".", "update", "(", "loss", "=", "loss_value", ",", "head", "=", "\"loss\"", ")", "\n", "log_writer", ".", "update", "(", "class_acc", "=", "class_acc", ",", "head", "=", "\"loss\"", ")", "\n", "log_writer", ".", "update", "(", "lr", "=", "max_lr", ",", "head", "=", "\"opt\"", ")", "\n", "log_writer", ".", "update", "(", "min_lr", "=", "min_lr", ",", "head", "=", "\"opt\"", ")", "\n", "log_writer", ".", "update", "(", "weight_decay", "=", "weight_decay_value", ",", "head", "=", "\"opt\"", ")", "\n", "if", "use_amp", ":", "\n", "                ", "log_writer", ".", "update", "(", "grad_norm", "=", "grad_norm", ",", "head", "=", "\"opt\"", ")", "\n", "", "log_writer", ".", "set_step", "(", ")", "\n", "\n", "", "if", "wandb_logger", ":", "\n", "            ", "wandb_logger", ".", "_wandb", ".", "log", "(", "{", "\n", "'Rank-0 Batch Wise/train_loss'", ":", "loss_value", ",", "\n", "'Rank-0 Batch Wise/train_max_lr'", ":", "max_lr", ",", "\n", "'Rank-0 Batch Wise/train_min_lr'", ":", "min_lr", "\n", "}", ",", "commit", "=", "False", ")", "\n", "if", "class_acc", ":", "\n", "                ", "wandb_logger", ".", "_wandb", ".", "log", "(", "{", "'Rank-0 Batch Wise/train_class_acc'", ":", "class_acc", "}", ",", "commit", "=", "False", ")", "\n", "", "if", "use_amp", ":", "\n", "                ", "wandb_logger", ".", "_wandb", ".", "log", "(", "{", "'Rank-0 Batch Wise/train_grad_norm'", ":", "grad_norm", "}", ",", "commit", "=", "False", ")", "\n", "", "wandb_logger", ".", "_wandb", ".", "log", "(", "{", "'Rank-0 Batch Wise/global_train_step'", ":", "it", "}", ")", "\n", "\n", "\n", "# gather the stats from all processes", "\n", "", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "\"Averaged stats:\"", ",", "metric_logger", ")", "\n", "return", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.engine.evaluate": [[137, 174], ["torch.no_grad", "torch.nn.CrossEntropyLoss", "utils.MetricLogger", "model.eval", "utils.MetricLogger.log_every", "utils.MetricLogger.synchronize_between_processes", "print", "images.to.to", "target.to.to", "timm.utils.accuracy", "utils.MetricLogger.update", "utils.MetricLogger.meters[].update", "utils.MetricLogger.meters[].update", "model", "torch.nn.CrossEntropyLoss.", "acc1.item", "acc5.item", "utils.MetricLogger.meters.items", "torch.cuda.amp.autocast", "model", "torch.nn.CrossEntropyLoss.", "criterion.item"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.MetricLogger.log_every", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.MetricLogger.synchronize_between_processes", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "data_loader", ",", "model", ",", "device", ",", "use_amp", "=", "False", ")", ":", "\n", "    ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "metric_logger", "=", "utils", ".", "MetricLogger", "(", "delimiter", "=", "\"  \"", ")", "\n", "header", "=", "'Test:'", "\n", "\n", "# switch to evaluation mode", "\n", "model", ".", "eval", "(", ")", "\n", "for", "batch", "in", "metric_logger", ".", "log_every", "(", "data_loader", ",", "10", ",", "header", ")", ":", "\n", "        ", "images", "=", "batch", "[", "0", "]", "\n", "target", "=", "batch", "[", "-", "1", "]", "\n", "\n", "images", "=", "images", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "target", "=", "target", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "if", "use_amp", ":", "\n", "            ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "                ", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "", "", "else", ":", "\n", "            ", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "\n", "batch_size", "=", "images", ".", "shape", "[", "0", "]", "\n", "metric_logger", ".", "update", "(", "loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "metric_logger", ".", "meters", "[", "'acc1'", "]", ".", "update", "(", "acc1", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "metric_logger", ".", "meters", "[", "'acc5'", "]", ".", "update", "(", "acc5", ".", "item", "(", ")", ",", "n", "=", "batch_size", ")", "\n", "# gather the stats from all processes", "\n", "", "metric_logger", ".", "synchronize_between_processes", "(", ")", "\n", "print", "(", "'* Acc@1 {top1.global_avg:.3f} Acc@5 {top5.global_avg:.3f} loss {losses.global_avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "metric_logger", ".", "acc1", ",", "top5", "=", "metric_logger", ".", "acc5", ",", "losses", "=", "metric_logger", ".", "loss", ")", ")", "\n", "\n", "return", "{", "k", ":", "meter", ".", "global_avg", "for", "k", ",", "meter", "in", "metric_logger", ".", "meters", ".", "items", "(", ")", "}", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.main.str2bool": [[35, 48], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "\"\"\"\n    Converts string to bool type; enables command line \n    arguments in the format of '--arg1 true --arg2 false'\n    \"\"\"", "\n", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.main.get_args_parser": [[49, 203], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["", "", "def", "get_args_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "'ConvNeXt training and evaluation script for image classification'", ",", "add_help", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "64", ",", "type", "=", "int", ",", "\n", "help", "=", "'Per GPU batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "300", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--update_freq'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'gradient accumulation steps'", ")", "\n", "\n", "# Model parameters", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "default", "=", "'convnext_tiny'", ",", "type", "=", "str", ",", "metavar", "=", "'MODEL'", ",", "\n", "help", "=", "'Name of model to train'", ")", "\n", "parser", ".", "add_argument", "(", "'--drop_path'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "metavar", "=", "'PCT'", ",", "\n", "help", "=", "'Drop path rate (default: 0.0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--input_size'", ",", "default", "=", "224", ",", "type", "=", "int", ",", "\n", "help", "=", "'image input size'", ")", "\n", "parser", ".", "add_argument", "(", "'--layer_scale_init_value'", ",", "default", "=", "1e-6", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Layer scale initial values\"", ")", "\n", "\n", "# EMA related parameters", "\n", "parser", ".", "add_argument", "(", "'--model_ema'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--model_ema_decay'", ",", "type", "=", "float", ",", "default", "=", "0.9999", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--model_ema_force_cpu'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--model_ema_eval'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "'Using ema to eval during training.'", ")", "\n", "\n", "# Optimization parameters", "\n", "parser", ".", "add_argument", "(", "'--opt'", ",", "default", "=", "'adamw'", ",", "type", "=", "str", ",", "metavar", "=", "'OPTIMIZER'", ",", "\n", "help", "=", "'Optimizer (default: \"adamw\"'", ")", "\n", "parser", ".", "add_argument", "(", "'--opt_eps'", ",", "default", "=", "1e-8", ",", "type", "=", "float", ",", "metavar", "=", "'EPSILON'", ",", "\n", "help", "=", "'Optimizer Epsilon (default: 1e-8)'", ")", "\n", "parser", ".", "add_argument", "(", "'--opt_betas'", ",", "default", "=", "None", ",", "type", "=", "float", ",", "nargs", "=", "'+'", ",", "metavar", "=", "'BETA'", ",", "\n", "help", "=", "'Optimizer Betas (default: None, use opt default)'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_grad'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "metavar", "=", "'NORM'", ",", "\n", "help", "=", "'Clip gradient norm (default: None, no clipping)'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'SGD momentum (default: 0.9)'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "type", "=", "float", ",", "default", "=", "0.05", ",", "\n", "help", "=", "'weight decay (default: 0.05)'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay_end'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "help", "=", "\"\"\"Final value of the\n        weight decay. We use a cosine schedule for WD and using a larger decay by\n        the end of training improves performance for ViTs.\"\"\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "4e-3", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: 4e-3), with total batch size 4096'", ")", "\n", "parser", ".", "add_argument", "(", "'--layer_decay'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--min_lr'", ",", "type", "=", "float", ",", "default", "=", "1e-6", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'lower lr bound for cyclic schedulers that hit 0 (1e-6)'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_epochs'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'epochs to warmup LR, if scheduler supports'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup_steps'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num of steps to warmup LR, will overload warmup_epochs if set > 0'", ")", "\n", "\n", "# Augmentation parameters", "\n", "parser", ".", "add_argument", "(", "'--color_jitter'", ",", "type", "=", "float", ",", "default", "=", "0.4", ",", "metavar", "=", "'PCT'", ",", "\n", "help", "=", "'Color jitter factor (default: 0.4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--aa'", ",", "type", "=", "str", ",", "default", "=", "'rand-m9-mstd0.5-inc1'", ",", "metavar", "=", "'NAME'", ",", "\n", "help", "=", "'Use AutoAugment policy. \"v0\" or \"original\". \" + \"(default: rand-m9-mstd0.5-inc1)'", ")", ",", "\n", "parser", ".", "add_argument", "(", "'--smoothing'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'Label smoothing (default: 0.1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--train_interpolation'", ",", "type", "=", "str", ",", "default", "=", "'bicubic'", ",", "\n", "help", "=", "'Training interpolation (random, bilinear, bicubic default: \"bicubic\")'", ")", "\n", "\n", "# Evaluation parameters", "\n", "parser", ".", "add_argument", "(", "'--crop_pct'", ",", "type", "=", "float", ",", "default", "=", "None", ")", "\n", "\n", "# * Random Erase params", "\n", "parser", ".", "add_argument", "(", "'--reprob'", ",", "type", "=", "float", ",", "default", "=", "0.25", ",", "metavar", "=", "'PCT'", ",", "\n", "help", "=", "'Random erase prob (default: 0.25)'", ")", "\n", "parser", ".", "add_argument", "(", "'--remode'", ",", "type", "=", "str", ",", "default", "=", "'pixel'", ",", "\n", "help", "=", "'Random erase mode (default: \"pixel\")'", ")", "\n", "parser", ".", "add_argument", "(", "'--recount'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'Random erase count (default: 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--resplit'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'Do not random erase first (clean) augmentation split'", ")", "\n", "\n", "# * Mixup params", "\n", "parser", ".", "add_argument", "(", "'--mixup'", ",", "type", "=", "float", ",", "default", "=", "0.8", ",", "\n", "help", "=", "'mixup alpha, mixup enabled if > 0.'", ")", "\n", "parser", ".", "add_argument", "(", "'--cutmix'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'cutmix alpha, cutmix enabled if > 0.'", ")", "\n", "parser", ".", "add_argument", "(", "'--cutmix_minmax'", ",", "type", "=", "float", ",", "nargs", "=", "'+'", ",", "default", "=", "None", ",", "\n", "help", "=", "'cutmix min/max ratio, overrides alpha and enables cutmix if set (default: None)'", ")", "\n", "parser", ".", "add_argument", "(", "'--mixup_prob'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'Probability of performing mixup or cutmix when either/both is enabled'", ")", "\n", "parser", ".", "add_argument", "(", "'--mixup_switch_prob'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'Probability of switching to cutmix when both mixup and cutmix enabled'", ")", "\n", "parser", ".", "add_argument", "(", "'--mixup_mode'", ",", "type", "=", "str", ",", "default", "=", "'batch'", ",", "\n", "help", "=", "'How to apply mixup/cutmix params. Per \"batch\", \"pair\", or \"elem\"'", ")", "\n", "\n", "# * Finetuning params", "\n", "parser", ".", "add_argument", "(", "'--finetune'", ",", "default", "=", "''", ",", "\n", "help", "=", "'finetune from checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--head_init_scale'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'classifier head initial scale, typically adjusted in fine-tuning'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_key'", ",", "default", "=", "'model|module'", ",", "type", "=", "str", ",", "\n", "help", "=", "'which key to load from saved state dict, usually model or model_ema'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_prefix'", ",", "default", "=", "''", ",", "type", "=", "str", ")", "\n", "\n", "# Dataset parameters", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "default", "=", "'/datasets01/imagenet_full_size/061417/'", ",", "type", "=", "str", ",", "\n", "help", "=", "'dataset path'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_data_path'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "'dataset path for evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'--nb_classes'", ",", "default", "=", "1000", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of the classification types'", ")", "\n", "parser", ".", "add_argument", "(", "'--imagenet_default_mean_and_std'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--data_set'", ",", "default", "=", "'IMNET'", ",", "choices", "=", "[", "'CIFAR'", ",", "'IMNET'", ",", "'image_folder'", "]", ",", "\n", "type", "=", "str", ",", "help", "=", "'ImageNet dataset path'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "default", "=", "''", ",", "\n", "help", "=", "'path where to save, empty for no saving'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "default", "=", "None", ",", "\n", "help", "=", "'path where to tensorboard log'", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "'cuda'", ",", "\n", "help", "=", "'device to use for training / testing'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "\n", "help", "=", "'resume from checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--auto_resume'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--save_ckpt'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--save_ckpt_freq'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--save_ckpt_num'", ",", "default", "=", "3", ",", "type", "=", "int", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'start epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'Perform evaluation only'", ")", "\n", "parser", ".", "add_argument", "(", "'--dist_eval'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'Enabling distributed evaluation'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable_eval'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'Disabling evaluation during training'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--pin_mem'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "\n", "help", "=", "'Pin CPU memory in DataLoader for more efficient (sometimes) transfer to GPU.'", ")", "\n", "\n", "# distributed training parameters", "\n", "parser", ".", "add_argument", "(", "'--world_size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of distributed processes'", ")", "\n", "parser", ".", "add_argument", "(", "'--local_rank'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--dist_on_itp'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--dist_url'", ",", "default", "=", "'env://'", ",", "\n", "help", "=", "'url used to set up distributed training'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--use_amp'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "\n", "help", "=", "\"Use PyTorch's AMP (Automatic Mixed Precision) or not\"", ")", "\n", "\n", "# Weights and Biases arguments", "\n", "parser", ".", "add_argument", "(", "'--enable_wandb'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "\n", "help", "=", "\"enable logging to Weights and Biases\"", ")", "\n", "parser", ".", "add_argument", "(", "'--project'", ",", "default", "=", "'convnext'", ",", "type", "=", "str", ",", "\n", "help", "=", "\"The name of the W&B project where you're sending the new run.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--wandb_ckpt'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "\n", "help", "=", "\"Save model checkpoints as W&B Artifacts.\"", ")", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.main.main": [[204, 471], ["utils.init_distributed_mode", "print", "torch.device", "torch.device", "torch.device", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "datasets.build_dataset", "utils.get_world_size", "utils.get_rank", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "timm.models.create_model", "torch.nn.parallel.DistributedDataParallel.to", "sum", "print", "print", "print", "print", "print", "print", "print", "optim_factory.create_optimizer", "utils.NativeScalerWithGradNormCount", "print", "utils.cosine_scheduler", "utils.cosine_scheduler", "print", "print", "utils.auto_load_model", "print", "time.time", "range", "str", "print", "utils.get_rank", "datasets.build_dataset", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.SequentialSampler", "os.makedirs", "utils.TensorboardLogger", "utils.WandbLogger", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "timm.data.mixup.Mixup", "args.finetune.startswith", "print", "args.model_key.split", "torch.nn.parallel.DistributedDataParallel.state_dict", "utils.load_state_dict", "timm.utils.ModelEma", "print", "utils.get_world_size", "len", "optim_factory.LayerDecayValueAssigner", "print", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "timm.loss.SoftTargetCrossEntropy", "print", "engine.evaluate", "print", "engine.train_one_epoch", "utils.WandbLogger.log_checkpoints", "time.time", "datetime.timedelta", "str", "print", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.load", "torch.load", "torch.load", "p.numel", "str", "len", "list", "timm.loss.LabelSmoothingCrossEntropy", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "str", "torch.utils.data.DataLoader.sampler.set_epoch", "utils.TensorboardLogger.set_step", "utils.WandbLogger.set_steps", "engine.evaluate", "print", "print", "utils.is_main_process", "utils.WandbLogger.log_epoch_metrics", "len", "int", "print", "print", "torch.nn.parallel.DistributedDataParallel.parameters", "str", "max", "min", "utils.save_model", "utils.TensorboardLogger.update", "utils.TensorboardLogger.update", "utils.TensorboardLogger.update", "engine.evaluate", "print", "log_stats.update", "utils.TensorboardLogger.flush", "open", "f.write", "int", "len", "utils.save_model", "print", "utils.TensorboardLogger.update", "os.path.join", "range", "len", "engine.train_one_epoch.items", "engine.evaluate.items", "utils.save_model", "engine.train_one_epoch.items", "json.dumps", "len", "engine.evaluate.items"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.init_distributed_mode", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.datasets.build_dataset", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.get_world_size", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.get_rank", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.optim_factory.create_optimizer", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.cosine_scheduler", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.cosine_scheduler", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.auto_load_model", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.get_rank", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.datasets.build_dataset", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.NativeScalerWithGradNormCount.state_dict", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.get_world_size", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.engine.evaluate", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.engine.train_one_epoch", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.WandbLogger.log_checkpoints", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.set_step", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.WandbLogger.set_steps", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.engine.evaluate", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.is_main_process", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.WandbLogger.log_epoch_metrics", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.save_model", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.engine.evaluate", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.flush", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.save_model", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.save_model"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "utils", ".", "init_distributed_mode", "(", "args", ")", "\n", "print", "(", "args", ")", "\n", "device", "=", "torch", ".", "device", "(", "args", ".", "device", ")", "\n", "\n", "# fix the seed for reproducibility", "\n", "seed", "=", "args", ".", "seed", "+", "utils", ".", "get_rank", "(", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "dataset_train", ",", "args", ".", "nb_classes", "=", "build_dataset", "(", "is_train", "=", "True", ",", "args", "=", "args", ")", "\n", "if", "args", ".", "disable_eval", ":", "\n", "        ", "args", ".", "dist_eval", "=", "False", "\n", "dataset_val", "=", "None", "\n", "", "else", ":", "\n", "        ", "dataset_val", ",", "_", "=", "build_dataset", "(", "is_train", "=", "False", ",", "args", "=", "args", ")", "\n", "\n", "", "num_tasks", "=", "utils", ".", "get_world_size", "(", ")", "\n", "global_rank", "=", "utils", ".", "get_rank", "(", ")", "\n", "\n", "sampler_train", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "\n", "dataset_train", ",", "num_replicas", "=", "num_tasks", ",", "rank", "=", "global_rank", ",", "shuffle", "=", "True", ",", "seed", "=", "args", ".", "seed", ",", "\n", ")", "\n", "print", "(", "\"Sampler_train = %s\"", "%", "str", "(", "sampler_train", ")", ")", "\n", "if", "args", ".", "dist_eval", ":", "\n", "        ", "if", "len", "(", "dataset_val", ")", "%", "num_tasks", "!=", "0", ":", "\n", "            ", "print", "(", "'Warning: Enabling distributed evaluation with an eval dataset not divisible by process number. '", "\n", "'This will slightly alter validation results as extra duplicate entries are added to achieve '", "\n", "'equal num of samples per-process.'", ")", "\n", "", "sampler_val", "=", "torch", ".", "utils", ".", "data", ".", "DistributedSampler", "(", "\n", "dataset_val", ",", "num_replicas", "=", "num_tasks", ",", "rank", "=", "global_rank", ",", "shuffle", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "sampler_val", "=", "torch", ".", "utils", ".", "data", ".", "SequentialSampler", "(", "dataset_val", ")", "\n", "\n", "", "if", "global_rank", "==", "0", "and", "args", ".", "log_dir", "is", "not", "None", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "log_dir", ",", "exist_ok", "=", "True", ")", "\n", "log_writer", "=", "utils", ".", "TensorboardLogger", "(", "log_dir", "=", "args", ".", "log_dir", ")", "\n", "", "else", ":", "\n", "        ", "log_writer", "=", "None", "\n", "\n", "", "if", "global_rank", "==", "0", "and", "args", ".", "enable_wandb", ":", "\n", "        ", "wandb_logger", "=", "utils", ".", "WandbLogger", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "wandb_logger", "=", "None", "\n", "\n", "", "data_loader_train", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_train", ",", "sampler", "=", "sampler_train", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "args", ".", "pin_mem", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "if", "dataset_val", "is", "not", "None", ":", "\n", "        ", "data_loader_val", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset_val", ",", "sampler", "=", "sampler_val", ",", "\n", "batch_size", "=", "int", "(", "1.5", "*", "args", ".", "batch_size", ")", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "pin_memory", "=", "args", ".", "pin_mem", ",", "\n", "drop_last", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "        ", "data_loader_val", "=", "None", "\n", "\n", "", "mixup_fn", "=", "None", "\n", "mixup_active", "=", "args", ".", "mixup", ">", "0", "or", "args", ".", "cutmix", ">", "0.", "or", "args", ".", "cutmix_minmax", "is", "not", "None", "\n", "if", "mixup_active", ":", "\n", "        ", "print", "(", "\"Mixup is activated!\"", ")", "\n", "mixup_fn", "=", "Mixup", "(", "\n", "mixup_alpha", "=", "args", ".", "mixup", ",", "cutmix_alpha", "=", "args", ".", "cutmix", ",", "cutmix_minmax", "=", "args", ".", "cutmix_minmax", ",", "\n", "prob", "=", "args", ".", "mixup_prob", ",", "switch_prob", "=", "args", ".", "mixup_switch_prob", ",", "mode", "=", "args", ".", "mixup_mode", ",", "\n", "label_smoothing", "=", "args", ".", "smoothing", ",", "num_classes", "=", "args", ".", "nb_classes", ")", "\n", "\n", "", "model", "=", "create_model", "(", "\n", "args", ".", "model", ",", "\n", "pretrained", "=", "False", ",", "\n", "num_classes", "=", "args", ".", "nb_classes", ",", "\n", "drop_path_rate", "=", "args", ".", "drop_path", ",", "\n", "layer_scale_init_value", "=", "args", ".", "layer_scale_init_value", ",", "\n", "head_init_scale", "=", "args", ".", "head_init_scale", ",", "\n", ")", "\n", "\n", "if", "args", ".", "finetune", ":", "\n", "        ", "if", "args", ".", "finetune", ".", "startswith", "(", "'https'", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "args", ".", "finetune", ",", "map_location", "=", "'cpu'", ",", "check_hash", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "finetune", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "", "print", "(", "\"Load ckpt from %s\"", "%", "args", ".", "finetune", ")", "\n", "checkpoint_model", "=", "None", "\n", "for", "model_key", "in", "args", ".", "model_key", ".", "split", "(", "'|'", ")", ":", "\n", "            ", "if", "model_key", "in", "checkpoint", ":", "\n", "                ", "checkpoint_model", "=", "checkpoint", "[", "model_key", "]", "\n", "print", "(", "\"Load state_dict by model_key = %s\"", "%", "model_key", ")", "\n", "break", "\n", "", "", "if", "checkpoint_model", "is", "None", ":", "\n", "            ", "checkpoint_model", "=", "checkpoint", "\n", "", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "for", "k", "in", "[", "'head.weight'", ",", "'head.bias'", "]", ":", "\n", "            ", "if", "k", "in", "checkpoint_model", "and", "checkpoint_model", "[", "k", "]", ".", "shape", "!=", "state_dict", "[", "k", "]", ".", "shape", ":", "\n", "                ", "print", "(", "f\"Removing key {k} from pretrained checkpoint\"", ")", "\n", "del", "checkpoint_model", "[", "k", "]", "\n", "", "", "utils", ".", "load_state_dict", "(", "model", ",", "checkpoint_model", ",", "prefix", "=", "args", ".", "model_prefix", ")", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "\n", "model_ema", "=", "None", "\n", "if", "args", ".", "model_ema", ":", "\n", "# Important to create EMA model after cuda(), DP wrapper, and AMP but before SyncBN and DDP wrapper", "\n", "        ", "model_ema", "=", "ModelEma", "(", "\n", "model", ",", "\n", "decay", "=", "args", ".", "model_ema_decay", ",", "\n", "device", "=", "'cpu'", "if", "args", ".", "model_ema_force_cpu", "else", "''", ",", "\n", "resume", "=", "''", ")", "\n", "print", "(", "\"Using EMA with decay = %.8f\"", "%", "args", ".", "model_ema_decay", ")", "\n", "\n", "", "model_without_ddp", "=", "model", "\n", "n_parameters", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n", "print", "(", "\"Model = %s\"", "%", "str", "(", "model_without_ddp", ")", ")", "\n", "print", "(", "'number of params:'", ",", "n_parameters", ")", "\n", "\n", "total_batch_size", "=", "args", ".", "batch_size", "*", "args", ".", "update_freq", "*", "utils", ".", "get_world_size", "(", ")", "\n", "num_training_steps_per_epoch", "=", "len", "(", "dataset_train", ")", "//", "total_batch_size", "\n", "print", "(", "\"LR = %.8f\"", "%", "args", ".", "lr", ")", "\n", "print", "(", "\"Batch size = %d\"", "%", "total_batch_size", ")", "\n", "print", "(", "\"Update frequent = %d\"", "%", "args", ".", "update_freq", ")", "\n", "print", "(", "\"Number of training examples = %d\"", "%", "len", "(", "dataset_train", ")", ")", "\n", "print", "(", "\"Number of training training per epoch = %d\"", "%", "num_training_steps_per_epoch", ")", "\n", "\n", "if", "args", ".", "layer_decay", "<", "1.0", "or", "args", ".", "layer_decay", ">", "1.0", ":", "\n", "        ", "num_layers", "=", "12", "# convnext layers divided into 12 parts, each with a different decayed lr value.", "\n", "assert", "args", ".", "model", "in", "[", "'convnext_small'", ",", "'convnext_base'", ",", "'convnext_large'", ",", "'convnext_xlarge'", "]", ",", "\"Layer Decay impl only supports convnext_small/base/large/xlarge\"", "\n", "assigner", "=", "LayerDecayValueAssigner", "(", "list", "(", "args", ".", "layer_decay", "**", "(", "num_layers", "+", "1", "-", "i", ")", "for", "i", "in", "range", "(", "num_layers", "+", "2", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "assigner", "=", "None", "\n", "\n", "", "if", "assigner", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Assigned values = %s\"", "%", "str", "(", "assigner", ".", "values", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ",", "find_unused_parameters", "=", "False", ")", "\n", "model_without_ddp", "=", "model", ".", "module", "\n", "\n", "", "optimizer", "=", "create_optimizer", "(", "\n", "args", ",", "model_without_ddp", ",", "skip_list", "=", "None", ",", "\n", "get_num_layer", "=", "assigner", ".", "get_layer_id", "if", "assigner", "is", "not", "None", "else", "None", ",", "\n", "get_layer_scale", "=", "assigner", ".", "get_scale", "if", "assigner", "is", "not", "None", "else", "None", ")", "\n", "\n", "loss_scaler", "=", "NativeScaler", "(", ")", "# if args.use_amp is False, this won't be used", "\n", "\n", "print", "(", "\"Use Cosine LR scheduler\"", ")", "\n", "lr_schedule_values", "=", "utils", ".", "cosine_scheduler", "(", "\n", "args", ".", "lr", ",", "args", ".", "min_lr", ",", "args", ".", "epochs", ",", "num_training_steps_per_epoch", ",", "\n", "warmup_epochs", "=", "args", ".", "warmup_epochs", ",", "warmup_steps", "=", "args", ".", "warmup_steps", ",", "\n", ")", "\n", "\n", "if", "args", ".", "weight_decay_end", "is", "None", ":", "\n", "        ", "args", ".", "weight_decay_end", "=", "args", ".", "weight_decay", "\n", "", "wd_schedule_values", "=", "utils", ".", "cosine_scheduler", "(", "\n", "args", ".", "weight_decay", ",", "args", ".", "weight_decay_end", ",", "args", ".", "epochs", ",", "num_training_steps_per_epoch", ")", "\n", "print", "(", "\"Max WD = %.7f, Min WD = %.7f\"", "%", "(", "max", "(", "wd_schedule_values", ")", ",", "min", "(", "wd_schedule_values", ")", ")", ")", "\n", "\n", "if", "mixup_fn", "is", "not", "None", ":", "\n", "# smoothing is handled with mixup label transform", "\n", "        ", "criterion", "=", "SoftTargetCrossEntropy", "(", ")", "\n", "", "elif", "args", ".", "smoothing", ">", "0.", ":", "\n", "        ", "criterion", "=", "LabelSmoothingCrossEntropy", "(", "smoothing", "=", "args", ".", "smoothing", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "print", "(", "\"criterion = %s\"", "%", "str", "(", "criterion", ")", ")", "\n", "\n", "utils", ".", "auto_load_model", "(", "\n", "args", "=", "args", ",", "model", "=", "model", ",", "model_without_ddp", "=", "model_without_ddp", ",", "\n", "optimizer", "=", "optimizer", ",", "loss_scaler", "=", "loss_scaler", ",", "model_ema", "=", "model_ema", ")", "\n", "\n", "if", "args", ".", "eval", ":", "\n", "        ", "print", "(", "f\"Eval only mode\"", ")", "\n", "test_stats", "=", "evaluate", "(", "data_loader_val", ",", "model", ",", "device", ",", "use_amp", "=", "args", ".", "use_amp", ")", "\n", "print", "(", "f\"Accuracy of the network on {len(dataset_val)} test images: {test_stats['acc1']:.5f}%\"", ")", "\n", "return", "\n", "\n", "", "max_accuracy", "=", "0.0", "\n", "if", "args", ".", "model_ema", "and", "args", ".", "model_ema_eval", ":", "\n", "        ", "max_accuracy_ema", "=", "0.0", "\n", "\n", "", "print", "(", "\"Start training for %d epochs\"", "%", "args", ".", "epochs", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "data_loader_train", ".", "sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "if", "log_writer", "is", "not", "None", ":", "\n", "            ", "log_writer", ".", "set_step", "(", "epoch", "*", "num_training_steps_per_epoch", "*", "args", ".", "update_freq", ")", "\n", "", "if", "wandb_logger", ":", "\n", "            ", "wandb_logger", ".", "set_steps", "(", ")", "\n", "", "train_stats", "=", "train_one_epoch", "(", "\n", "model", ",", "criterion", ",", "data_loader_train", ",", "optimizer", ",", "\n", "device", ",", "epoch", ",", "loss_scaler", ",", "args", ".", "clip_grad", ",", "model_ema", ",", "mixup_fn", ",", "\n", "log_writer", "=", "log_writer", ",", "wandb_logger", "=", "wandb_logger", ",", "start_steps", "=", "epoch", "*", "num_training_steps_per_epoch", ",", "\n", "lr_schedule_values", "=", "lr_schedule_values", ",", "wd_schedule_values", "=", "wd_schedule_values", ",", "\n", "num_training_steps_per_epoch", "=", "num_training_steps_per_epoch", ",", "update_freq", "=", "args", ".", "update_freq", ",", "\n", "use_amp", "=", "args", ".", "use_amp", "\n", ")", "\n", "if", "args", ".", "output_dir", "and", "args", ".", "save_ckpt", ":", "\n", "            ", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "save_ckpt_freq", "==", "0", "or", "epoch", "+", "1", "==", "args", ".", "epochs", ":", "\n", "                ", "utils", ".", "save_model", "(", "\n", "args", "=", "args", ",", "model", "=", "model", ",", "model_without_ddp", "=", "model_without_ddp", ",", "optimizer", "=", "optimizer", ",", "\n", "loss_scaler", "=", "loss_scaler", ",", "epoch", "=", "epoch", ",", "model_ema", "=", "model_ema", ")", "\n", "", "", "if", "data_loader_val", "is", "not", "None", ":", "\n", "            ", "test_stats", "=", "evaluate", "(", "data_loader_val", ",", "model", ",", "device", ",", "use_amp", "=", "args", ".", "use_amp", ")", "\n", "print", "(", "f\"Accuracy of the model on the {len(dataset_val)} test images: {test_stats['acc1']:.1f}%\"", ")", "\n", "if", "max_accuracy", "<", "test_stats", "[", "\"acc1\"", "]", ":", "\n", "                ", "max_accuracy", "=", "test_stats", "[", "\"acc1\"", "]", "\n", "if", "args", ".", "output_dir", "and", "args", ".", "save_ckpt", ":", "\n", "                    ", "utils", ".", "save_model", "(", "\n", "args", "=", "args", ",", "model", "=", "model", ",", "model_without_ddp", "=", "model_without_ddp", ",", "optimizer", "=", "optimizer", ",", "\n", "loss_scaler", "=", "loss_scaler", ",", "epoch", "=", "\"best\"", ",", "model_ema", "=", "model_ema", ")", "\n", "", "", "print", "(", "f'Max accuracy: {max_accuracy:.2f}%'", ")", "\n", "\n", "if", "log_writer", "is", "not", "None", ":", "\n", "                ", "log_writer", ".", "update", "(", "test_acc1", "=", "test_stats", "[", "'acc1'", "]", ",", "head", "=", "\"perf\"", ",", "step", "=", "epoch", ")", "\n", "log_writer", ".", "update", "(", "test_acc5", "=", "test_stats", "[", "'acc5'", "]", ",", "head", "=", "\"perf\"", ",", "step", "=", "epoch", ")", "\n", "log_writer", ".", "update", "(", "test_loss", "=", "test_stats", "[", "'loss'", "]", ",", "head", "=", "\"perf\"", ",", "step", "=", "epoch", ")", "\n", "\n", "", "log_stats", "=", "{", "**", "{", "f'train_{k}'", ":", "v", "for", "k", ",", "v", "in", "train_stats", ".", "items", "(", ")", "}", ",", "\n", "**", "{", "f'test_{k}'", ":", "v", "for", "k", ",", "v", "in", "test_stats", ".", "items", "(", ")", "}", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'n_parameters'", ":", "n_parameters", "}", "\n", "\n", "# repeat testing routines for EMA, if ema eval is turned on", "\n", "if", "args", ".", "model_ema", "and", "args", ".", "model_ema_eval", ":", "\n", "                ", "test_stats_ema", "=", "evaluate", "(", "data_loader_val", ",", "model_ema", ".", "ema", ",", "device", ",", "use_amp", "=", "args", ".", "use_amp", ")", "\n", "print", "(", "f\"Accuracy of the model EMA on {len(dataset_val)} test images: {test_stats_ema['acc1']:.1f}%\"", ")", "\n", "if", "max_accuracy_ema", "<", "test_stats_ema", "[", "\"acc1\"", "]", ":", "\n", "                    ", "max_accuracy_ema", "=", "test_stats_ema", "[", "\"acc1\"", "]", "\n", "if", "args", ".", "output_dir", "and", "args", ".", "save_ckpt", ":", "\n", "                        ", "utils", ".", "save_model", "(", "\n", "args", "=", "args", ",", "model", "=", "model", ",", "model_without_ddp", "=", "model_without_ddp", ",", "optimizer", "=", "optimizer", ",", "\n", "loss_scaler", "=", "loss_scaler", ",", "epoch", "=", "\"best-ema\"", ",", "model_ema", "=", "model_ema", ")", "\n", "", "print", "(", "f'Max EMA accuracy: {max_accuracy_ema:.2f}%'", ")", "\n", "", "if", "log_writer", "is", "not", "None", ":", "\n", "                    ", "log_writer", ".", "update", "(", "test_acc1_ema", "=", "test_stats_ema", "[", "'acc1'", "]", ",", "head", "=", "\"perf\"", ",", "step", "=", "epoch", ")", "\n", "", "log_stats", ".", "update", "(", "{", "**", "{", "f'test_{k}_ema'", ":", "v", "for", "k", ",", "v", "in", "test_stats_ema", ".", "items", "(", ")", "}", "}", ")", "\n", "", "", "else", ":", "\n", "            ", "log_stats", "=", "{", "**", "{", "f'train_{k}'", ":", "v", "for", "k", ",", "v", "in", "train_stats", ".", "items", "(", ")", "}", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'n_parameters'", ":", "n_parameters", "}", "\n", "\n", "", "if", "args", ".", "output_dir", "and", "utils", ".", "is_main_process", "(", ")", ":", "\n", "            ", "if", "log_writer", "is", "not", "None", ":", "\n", "                ", "log_writer", ".", "flush", "(", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"log.txt\"", ")", ",", "mode", "=", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "json", ".", "dumps", "(", "log_stats", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "", "if", "wandb_logger", ":", "\n", "            ", "wandb_logger", ".", "log_epoch_metrics", "(", "log_stats", ")", "\n", "\n", "", "", "if", "wandb_logger", "and", "args", ".", "wandb_ckpt", "and", "args", ".", "save_ckpt", "and", "args", ".", "output_dir", ":", "\n", "        ", "wandb_logger", ".", "log_checkpoints", "(", ")", "\n", "\n", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'Training time {}'", ".", "format", "(", "total_time_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.optim_factory.LayerDecayValueAssigner.__init__": [[63, 65], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "values", ")", ":", "\n", "        ", "self", ".", "values", "=", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.optim_factory.LayerDecayValueAssigner.get_scale": [[66, 68], ["None"], "methods", ["None"], ["", "def", "get_scale", "(", "self", ",", "layer_id", ")", ":", "\n", "        ", "return", "self", ".", "values", "[", "layer_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.optim_factory.LayerDecayValueAssigner.get_layer_id": [[69, 71], ["optim_factory.get_num_layer_for_convnext"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.optim_factory.get_num_layer_for_convnext"], ["", "def", "get_layer_id", "(", "self", ",", "var_name", ")", ":", "\n", "        ", "return", "get_num_layer_for_convnext", "(", "var_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.optim_factory.get_num_layer_for_convnext": [[32, 61], ["var_name.startswith", "int", "var_name.startswith", "int", "int", "var_name.split", "var_name.split", "var_name.split"], "function", ["None"], ["", "def", "get_num_layer_for_convnext", "(", "var_name", ")", ":", "\n", "    ", "\"\"\"\n    Divide [3, 3, 27, 3] layers into 12 groups; each group is three \n    consecutive blocks, including possible neighboring downsample layers;\n    adapted from https://github.com/microsoft/unilm/blob/master/beit/optim_factory.py\n    \"\"\"", "\n", "num_max_layer", "=", "12", "\n", "if", "var_name", ".", "startswith", "(", "\"downsample_layers\"", ")", ":", "\n", "        ", "stage_id", "=", "int", "(", "var_name", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "\n", "if", "stage_id", "==", "0", ":", "\n", "            ", "layer_id", "=", "0", "\n", "", "elif", "stage_id", "==", "1", "or", "stage_id", "==", "2", ":", "\n", "            ", "layer_id", "=", "stage_id", "+", "1", "\n", "", "elif", "stage_id", "==", "3", ":", "\n", "            ", "layer_id", "=", "12", "\n", "", "return", "layer_id", "\n", "\n", "", "elif", "var_name", ".", "startswith", "(", "\"stages\"", ")", ":", "\n", "        ", "stage_id", "=", "int", "(", "var_name", ".", "split", "(", "'.'", ")", "[", "1", "]", ")", "\n", "block_id", "=", "int", "(", "var_name", ".", "split", "(", "'.'", ")", "[", "2", "]", ")", "\n", "if", "stage_id", "==", "0", "or", "stage_id", "==", "1", ":", "\n", "            ", "layer_id", "=", "stage_id", "+", "1", "\n", "", "elif", "stage_id", "==", "2", ":", "\n", "            ", "layer_id", "=", "3", "+", "block_id", "//", "3", "\n", "", "elif", "stage_id", "==", "3", ":", "\n", "            ", "layer_id", "=", "12", "\n", "", "return", "layer_id", "\n", "", "else", ":", "\n", "        ", "return", "num_max_layer", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.optim_factory.get_parameter_groups": [[73, 113], ["model.named_parameters", "print", "list", "[].append", "[].append", "parameter_group_vars.values", "name.endswith", "get_num_layer", "json.dumps", "len", "get_layer_scale"], "function", ["None"], ["", "", "def", "get_parameter_groups", "(", "model", ",", "weight_decay", "=", "1e-5", ",", "skip_list", "=", "(", ")", ",", "get_num_layer", "=", "None", ",", "get_layer_scale", "=", "None", ")", ":", "\n", "    ", "parameter_group_names", "=", "{", "}", "\n", "parameter_group_vars", "=", "{", "}", "\n", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "param", ".", "requires_grad", ":", "\n", "            ", "continue", "# frozen weights", "\n", "", "if", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", ".", "endswith", "(", "\".bias\"", ")", "or", "name", "in", "skip_list", ":", "\n", "            ", "group_name", "=", "\"no_decay\"", "\n", "this_weight_decay", "=", "0.", "\n", "", "else", ":", "\n", "            ", "group_name", "=", "\"decay\"", "\n", "this_weight_decay", "=", "weight_decay", "\n", "", "if", "get_num_layer", "is", "not", "None", ":", "\n", "            ", "layer_id", "=", "get_num_layer", "(", "name", ")", "\n", "group_name", "=", "\"layer_%d_%s\"", "%", "(", "layer_id", ",", "group_name", ")", "\n", "", "else", ":", "\n", "            ", "layer_id", "=", "None", "\n", "\n", "", "if", "group_name", "not", "in", "parameter_group_names", ":", "\n", "            ", "if", "get_layer_scale", "is", "not", "None", ":", "\n", "                ", "scale", "=", "get_layer_scale", "(", "layer_id", ")", "\n", "", "else", ":", "\n", "                ", "scale", "=", "1.", "\n", "\n", "", "parameter_group_names", "[", "group_name", "]", "=", "{", "\n", "\"weight_decay\"", ":", "this_weight_decay", ",", "\n", "\"params\"", ":", "[", "]", ",", "\n", "\"lr_scale\"", ":", "scale", "\n", "}", "\n", "parameter_group_vars", "[", "group_name", "]", "=", "{", "\n", "\"weight_decay\"", ":", "this_weight_decay", ",", "\n", "\"params\"", ":", "[", "]", ",", "\n", "\"lr_scale\"", ":", "scale", "\n", "}", "\n", "\n", "", "parameter_group_vars", "[", "group_name", "]", "[", "\"params\"", "]", ".", "append", "(", "param", ")", "\n", "parameter_group_names", "[", "group_name", "]", "[", "\"params\"", "]", ".", "append", "(", "name", ")", "\n", "", "print", "(", "\"Param groups = %s\"", "%", "json", ".", "dumps", "(", "parameter_group_names", ",", "indent", "=", "2", ")", ")", "\n", "return", "list", "(", "parameter_group_vars", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.optim_factory.create_optimizer": [[115, 198], ["args.opt.lower", "dict", "args.opt.lower.split", "optim_factory.get_parameter_groups", "model.parameters", "hasattr", "hasattr", "dict.pop", "torch.optim.SGD", "len", "hasattr", "torch.cuda.is_available", "dict.pop", "torch.optim.SGD", "timm.optim.lookahead.Lookahead", "model.no_weight_decay", "torch.optim.Adam", "torch.optim.AdamW", "timm.optim.nadam.Nadam", "timm.optim.radam.RAdam", "timm.optim.adamp.AdamP", "timm.optim.sgdp.SGDP", "torch.optim.Adadelta", "timm.optim.adafactor.Adafactor", "timm.optim.adahessian.Adahessian", "torch.optim.RMSprop", "timm.optim.rmsprop_tf.RMSpropTF", "timm.optim.novograd.NovoGrad", "timm.optim.nvnovograd.NvNovoGrad", "dict.pop", "FusedSGD", "dict.pop", "FusedSGD", "FusedAdam", "FusedAdam", "FusedLAMB", "dict.setdefault", "FusedNovoGrad"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.optim_factory.get_parameter_groups"], ["", "def", "create_optimizer", "(", "args", ",", "model", ",", "get_num_layer", "=", "None", ",", "get_layer_scale", "=", "None", ",", "filter_bias_and_bn", "=", "True", ",", "skip_list", "=", "None", ")", ":", "\n", "    ", "opt_lower", "=", "args", ".", "opt", ".", "lower", "(", ")", "\n", "weight_decay", "=", "args", ".", "weight_decay", "\n", "# if weight_decay and filter_bias_and_bn:", "\n", "if", "filter_bias_and_bn", ":", "\n", "        ", "skip", "=", "{", "}", "\n", "if", "skip_list", "is", "not", "None", ":", "\n", "            ", "skip", "=", "skip_list", "\n", "", "elif", "hasattr", "(", "model", ",", "'no_weight_decay'", ")", ":", "\n", "            ", "skip", "=", "model", ".", "no_weight_decay", "(", ")", "\n", "", "parameters", "=", "get_parameter_groups", "(", "model", ",", "weight_decay", ",", "skip", ",", "get_num_layer", ",", "get_layer_scale", ")", "\n", "weight_decay", "=", "0.", "\n", "", "else", ":", "\n", "        ", "parameters", "=", "model", ".", "parameters", "(", ")", "\n", "\n", "", "if", "'fused'", "in", "opt_lower", ":", "\n", "        ", "assert", "has_apex", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "'APEX and CUDA required for fused optimizers'", "\n", "\n", "", "opt_args", "=", "dict", "(", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "weight_decay", ")", "\n", "if", "hasattr", "(", "args", ",", "'opt_eps'", ")", "and", "args", ".", "opt_eps", "is", "not", "None", ":", "\n", "        ", "opt_args", "[", "'eps'", "]", "=", "args", ".", "opt_eps", "\n", "", "if", "hasattr", "(", "args", ",", "'opt_betas'", ")", "and", "args", ".", "opt_betas", "is", "not", "None", ":", "\n", "        ", "opt_args", "[", "'betas'", "]", "=", "args", ".", "opt_betas", "\n", "\n", "", "opt_split", "=", "opt_lower", ".", "split", "(", "'_'", ")", "\n", "opt_lower", "=", "opt_split", "[", "-", "1", "]", "\n", "if", "opt_lower", "==", "'sgd'", "or", "opt_lower", "==", "'nesterov'", ":", "\n", "        ", "opt_args", ".", "pop", "(", "'eps'", ",", "None", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "parameters", ",", "momentum", "=", "args", ".", "momentum", ",", "nesterov", "=", "True", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'momentum'", ":", "\n", "        ", "opt_args", ".", "pop", "(", "'eps'", ",", "None", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "parameters", ",", "momentum", "=", "args", ".", "momentum", ",", "nesterov", "=", "False", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'adam'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'adamw'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "AdamW", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'nadam'", ":", "\n", "        ", "optimizer", "=", "Nadam", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'radam'", ":", "\n", "        ", "optimizer", "=", "RAdam", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'adamp'", ":", "\n", "        ", "optimizer", "=", "AdamP", "(", "parameters", ",", "wd_ratio", "=", "0.01", ",", "nesterov", "=", "True", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'sgdp'", ":", "\n", "        ", "optimizer", "=", "SGDP", "(", "parameters", ",", "momentum", "=", "args", ".", "momentum", ",", "nesterov", "=", "True", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'adadelta'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adadelta", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'adafactor'", ":", "\n", "        ", "if", "not", "args", ".", "lr", ":", "\n", "            ", "opt_args", "[", "'lr'", "]", "=", "None", "\n", "", "optimizer", "=", "Adafactor", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'adahessian'", ":", "\n", "        ", "optimizer", "=", "Adahessian", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'rmsprop'", ":", "\n", "        ", "optimizer", "=", "optim", ".", "RMSprop", "(", "parameters", ",", "alpha", "=", "0.9", ",", "momentum", "=", "args", ".", "momentum", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'rmsproptf'", ":", "\n", "        ", "optimizer", "=", "RMSpropTF", "(", "parameters", ",", "alpha", "=", "0.9", ",", "momentum", "=", "args", ".", "momentum", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'novograd'", ":", "\n", "        ", "optimizer", "=", "NovoGrad", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'nvnovograd'", ":", "\n", "        ", "optimizer", "=", "NvNovoGrad", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'fusedsgd'", ":", "\n", "        ", "opt_args", ".", "pop", "(", "'eps'", ",", "None", ")", "\n", "optimizer", "=", "FusedSGD", "(", "parameters", ",", "momentum", "=", "args", ".", "momentum", ",", "nesterov", "=", "True", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'fusedmomentum'", ":", "\n", "        ", "opt_args", ".", "pop", "(", "'eps'", ",", "None", ")", "\n", "optimizer", "=", "FusedSGD", "(", "parameters", ",", "momentum", "=", "args", ".", "momentum", ",", "nesterov", "=", "False", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'fusedadam'", ":", "\n", "        ", "optimizer", "=", "FusedAdam", "(", "parameters", ",", "adam_w_mode", "=", "False", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'fusedadamw'", ":", "\n", "        ", "optimizer", "=", "FusedAdam", "(", "parameters", ",", "adam_w_mode", "=", "True", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'fusedlamb'", ":", "\n", "        ", "optimizer", "=", "FusedLAMB", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "elif", "opt_lower", "==", "'fusednovograd'", ":", "\n", "        ", "opt_args", ".", "setdefault", "(", "'betas'", ",", "(", "0.95", ",", "0.98", ")", ")", "\n", "optimizer", "=", "FusedNovoGrad", "(", "parameters", ",", "**", "opt_args", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", "and", "\"Invalid optimizer\"", "\n", "\n", "", "if", "len", "(", "opt_split", ")", ">", "1", ":", "\n", "        ", "if", "opt_split", "[", "0", "]", "==", "'lookahead'", ":", "\n", "            ", "optimizer", "=", "Lookahead", "(", "optimizer", ")", "\n", "\n", "", "", "return", "optimizer", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.__init__": [[30, 37], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ",", "fmt", "=", "None", ")", ":", "\n", "        ", "if", "fmt", "is", "None", ":", "\n", "            ", "fmt", "=", "\"{median:.4f} ({global_avg:.4f})\"", "\n", "", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "fmt", "=", "fmt", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.update": [[38, 42], ["utils.SmoothedValue.deque.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "total", "+=", "value", "*", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.synchronize_between_processes": [[43, 55], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.barrier", "torch.barrier", "torch.all_reduce", "torch.all_reduce", "t.tolist.tolist.tolist", "int", "utils.is_dist_avail_and_initialized"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.is_dist_avail_and_initialized"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Warning: does not synchronize the deque!\n        \"\"\"", "\n", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "            ", "return", "\n", "", "t", "=", "torch", ".", "tensor", "(", "[", "self", ".", "count", ",", "self", ".", "total", "]", ",", "dtype", "=", "torch", ".", "float64", ",", "device", "=", "'cuda'", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "dist", ".", "all_reduce", "(", "t", ")", "\n", "t", "=", "t", ".", "tolist", "(", ")", "\n", "self", ".", "count", "=", "int", "(", "t", "[", "0", "]", ")", "\n", "self", ".", "total", "=", "t", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.median": [[56, 60], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.median().item", "torch.tensor.median().item", "list", "torch.tensor.median", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.median", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.avg": [[61, 65], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.mean().item", "torch.tensor.mean().item", "list", "torch.tensor.mean", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.global_avg": [[66, 69], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.max": [[70, 73], ["utils.SmoothedValue.max"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "max", "(", "self", ".", "deque", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.value": [[74, 77], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.__str__": [[78, 85], ["utils.SmoothedValue.fmt.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fmt", ".", "format", "(", "\n", "median", "=", "self", ".", "median", ",", "\n", "avg", "=", "self", ".", "avg", ",", "\n", "global_avg", "=", "self", ".", "global_avg", ",", "\n", "max", "=", "self", ".", "max", ",", "\n", "value", "=", "self", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.MetricLogger.__init__": [[88, 91], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.MetricLogger.update": [[92, 100], ["kwargs.items", "isinstance", "isinstance", "utils.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.MetricLogger.__getattr__": [[101, 108], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.MetricLogger.__str__": [[109, 116], ["utils.MetricLogger.meters.items", "utils.MetricLogger.delimiter.join", "loss_str.append", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {}\"", ".", "format", "(", "name", ",", "str", "(", "meter", ")", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.MetricLogger.synchronize_between_processes": [[117, 120], ["utils.MetricLogger.meters.values", "meter.synchronize_between_processes"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.MetricLogger.synchronize_between_processes"], ["", "def", "synchronize_between_processes", "(", "self", ")", ":", "\n", "        ", "for", "meter", "in", "self", ".", "meters", ".", "values", "(", ")", ":", "\n", "            ", "meter", ".", "synchronize_between_processes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.MetricLogger.add_meter": [[121, 123], ["None"], "methods", ["None"], ["", "", "def", "add_meter", "(", "self", ",", "name", ",", "meter", ")", ":", "\n", "        ", "self", ".", "meters", "[", "name", "]", "=", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.MetricLogger.log_every": [[124, 169], ["time.time", "time.time", "utils.SmoothedValue", "utils.SmoothedValue", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "utils.MetricLogger.delimiter.join", "str", "print", "utils.MetricLogger.append", "utils.SmoothedValue.update", "utils.SmoothedValue.update", "time.time", "time.time", "datetime.timedelta", "str", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "len", "time.time", "time.time", "datetime.timedelta", "print", "print", "int", "len", "str", "len", "len", "utils.MetricLogger.format", "utils.MetricLogger.format", "len", "int", "len", "len", "str", "str", "str", "str", "str", "str", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.max_memory_allocated"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update"], ["", "def", "log_every", "(", "self", ",", "iterable", ",", "print_freq", ",", "header", "=", "None", ")", ":", "\n", "        ", "i", "=", "0", "\n", "if", "not", "header", ":", "\n", "            ", "header", "=", "''", "\n", "", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "iter_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "data_time", "=", "SmoothedValue", "(", "fmt", "=", "'{avg:.4f}'", ")", "\n", "space_fmt", "=", "':'", "+", "str", "(", "len", "(", "str", "(", "len", "(", "iterable", ")", ")", ")", ")", "+", "'d'", "\n", "log_msg", "=", "[", "\n", "header", ",", "\n", "'[{0'", "+", "space_fmt", "+", "'}/{1}]'", ",", "\n", "'eta: {eta}'", ",", "\n", "'{meters}'", ",", "\n", "'time: {time}'", ",", "\n", "'data: {data}'", "\n", "]", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "log_msg", ".", "append", "(", "'max mem: {memory:.0f}'", ")", "\n", "", "log_msg", "=", "self", ".", "delimiter", ".", "join", "(", "log_msg", ")", "\n", "MB", "=", "1024.0", "*", "1024.0", "\n", "for", "obj", "in", "iterable", ":", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "yield", "obj", "\n", "iter_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "if", "i", "%", "print_freq", "==", "0", "or", "i", "==", "len", "(", "iterable", ")", "-", "1", ":", "\n", "                ", "eta_seconds", "=", "iter_time", ".", "global_avg", "*", "(", "len", "(", "iterable", ")", "-", "i", ")", "\n", "eta_string", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_seconds", ")", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ",", "\n", "memory", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "MB", ")", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "log_msg", ".", "format", "(", "\n", "i", ",", "len", "(", "iterable", ")", ",", "eta", "=", "eta_string", ",", "\n", "meters", "=", "str", "(", "self", ")", ",", "\n", "time", "=", "str", "(", "iter_time", ")", ",", "data", "=", "str", "(", "data_time", ")", ")", ")", "\n", "", "", "i", "+=", "1", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "total_time_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "total_time", ")", ")", ")", "\n", "print", "(", "'{} Total time: {} ({:.4f} s / it)'", ".", "format", "(", "\n", "header", ",", "total_time_str", ",", "total_time", "/", "len", "(", "iterable", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.__init__": [[172, 175], ["tensorboardX.SummaryWriter"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "self", ".", "writer", "=", "SummaryWriter", "(", "logdir", "=", "log_dir", ")", "\n", "self", ".", "step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.set_step": [[176, 181], ["None"], "methods", ["None"], ["", "def", "set_step", "(", "self", ",", "step", "=", "None", ")", ":", "\n", "        ", "if", "step", "is", "not", "None", ":", "\n", "            ", "self", ".", "step", "=", "step", "\n", "", "else", ":", "\n", "            ", "self", ".", "step", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update": [[182, 190], ["kwargs.items", "isinstance", "isinstance", "utils.TensorboardLogger.writer.add_scalar", "v.item.item.item"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "head", "=", "'scalar'", ",", "step", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "is", "None", ":", "\n", "                ", "continue", "\n", "", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "head", "+", "\"/\"", "+", "k", ",", "v", ",", "self", ".", "step", "if", "step", "is", "None", "else", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.flush": [[191, 193], ["utils.TensorboardLogger.writer.flush"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.flush"], ["", "", "def", "flush", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.WandbLogger.__init__": [[196, 213], ["utils.WandbLogger._wandb.init", "ImportError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "try", ":", "\n", "            ", "import", "wandb", "\n", "self", ".", "_wandb", "=", "wandb", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\n", "\"To use the Weights and Biases Logger please install wandb.\"", "\n", "\"Run `pip install wandb` to install it.\"", "\n", ")", "\n", "\n", "# Initialize a W&B run ", "\n", "", "if", "self", ".", "_wandb", ".", "run", "is", "None", ":", "\n", "            ", "self", ".", "_wandb", ".", "init", "(", "\n", "project", "=", "args", ".", "project", ",", "\n", "config", "=", "args", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.WandbLogger.log_epoch_metrics": [[215, 234], ["metrics.get", "metrics.pop", "utils.WandbLogger._wandb.log", "metrics.pop", "metrics.items", "utils.WandbLogger._wandb.log", "metrics.get", "utils.WandbLogger._wandb.log", "utils.WandbLogger._wandb.log"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.customized_text.CustomizedTextLoggerHook.log", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.customized_text.CustomizedTextLoggerHook.log", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.customized_text.CustomizedTextLoggerHook.log", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.customized_text.CustomizedTextLoggerHook.log"], ["", "", "def", "log_epoch_metrics", "(", "self", ",", "metrics", ",", "commit", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Log train/test metrics onto W&B.\n        \"\"\"", "\n", "# Log number of model parameters as W&B summary", "\n", "self", ".", "_wandb", ".", "summary", "[", "'n_parameters'", "]", "=", "metrics", ".", "get", "(", "'n_parameters'", ",", "None", ")", "\n", "metrics", ".", "pop", "(", "'n_parameters'", ",", "None", ")", "\n", "\n", "# Log current epoch", "\n", "self", ".", "_wandb", ".", "log", "(", "{", "'epoch'", ":", "metrics", ".", "get", "(", "'epoch'", ")", "}", ",", "commit", "=", "False", ")", "\n", "metrics", ".", "pop", "(", "'epoch'", ")", "\n", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "if", "'train'", "in", "k", ":", "\n", "                ", "self", ".", "_wandb", ".", "log", "(", "{", "f'Global Train/{k}'", ":", "v", "}", ",", "commit", "=", "False", ")", "\n", "", "elif", "'test'", "in", "k", ":", "\n", "                ", "self", ".", "_wandb", ".", "log", "(", "{", "f'Global Test/{k}'", ":", "v", "}", ",", "commit", "=", "False", ")", "\n", "\n", "", "", "self", ".", "_wandb", ".", "log", "(", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.WandbLogger.log_checkpoints": [[235, 243], ["utils.WandbLogger._wandb.Artifact", "utils.WandbLogger.add_dir", "utils.WandbLogger._wandb.log_artifact"], "methods", ["None"], ["", "def", "log_checkpoints", "(", "self", ")", ":", "\n", "        ", "output_dir", "=", "self", ".", "args", ".", "output_dir", "\n", "model_artifact", "=", "self", ".", "_wandb", ".", "Artifact", "(", "\n", "self", ".", "_wandb", ".", "run", ".", "id", "+", "\"_model\"", ",", "type", "=", "\"model\"", "\n", ")", "\n", "\n", "model_artifact", ".", "add_dir", "(", "output_dir", ")", "\n", "self", ".", "_wandb", ".", "log_artifact", "(", "model_artifact", ",", "aliases", "=", "[", "\"latest\"", ",", "\"best\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.WandbLogger.set_steps": [[244, 250], ["utils.WandbLogger._wandb.define_metric", "utils.WandbLogger._wandb.define_metric", "utils.WandbLogger._wandb.define_metric"], "methods", ["None"], ["", "def", "set_steps", "(", "self", ")", ":", "\n", "# Set global training step", "\n", "        ", "self", ".", "_wandb", ".", "define_metric", "(", "'Rank-0 Batch Wise/*'", ",", "step_metric", "=", "'Rank-0 Batch Wise/global_train_step'", ")", "\n", "# Set epoch-wise step", "\n", "self", ".", "_wandb", ".", "define_metric", "(", "'Global Train/*'", ",", "step_metric", "=", "'epoch'", ")", "\n", "self", ".", "_wandb", ".", "define_metric", "(", "'Global Test/*'", ",", "step_metric", "=", "'epoch'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.NativeScalerWithGradNormCount.__init__": [[387, 389], ["torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.NativeScalerWithGradNormCount.__call__": [[390, 405], ["utils.NativeScalerWithGradNormCount._scaler.scale().backward", "utils.NativeScalerWithGradNormCount._scaler.step", "utils.NativeScalerWithGradNormCount._scaler.update", "utils.NativeScalerWithGradNormCount._scaler.scale", "utils.NativeScalerWithGradNormCount._scaler.unscale_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "utils.NativeScalerWithGradNormCount._scaler.unscale_", "utils.get_grad_norm_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.get_grad_norm_"], ["", "def", "__call__", "(", "self", ",", "loss", ",", "optimizer", ",", "clip_grad", "=", "None", ",", "parameters", "=", "None", ",", "create_graph", "=", "False", ",", "update_grad", "=", "True", ")", ":", "\n", "        ", "self", ".", "_scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", "create_graph", "=", "create_graph", ")", "\n", "if", "update_grad", ":", "\n", "            ", "if", "clip_grad", "is", "not", "None", ":", "\n", "                ", "assert", "parameters", "is", "not", "None", "\n", "self", ".", "_scaler", ".", "unscale_", "(", "optimizer", ")", "# unscale the gradients of optimizer's assigned params in-place", "\n", "norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "parameters", ",", "clip_grad", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_scaler", ".", "unscale_", "(", "optimizer", ")", "\n", "norm", "=", "get_grad_norm_", "(", "parameters", ")", "\n", "", "self", ".", "_scaler", ".", "step", "(", "optimizer", ")", "\n", "self", ".", "_scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "            ", "norm", "=", "None", "\n", "", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.NativeScalerWithGradNormCount.state_dict": [[406, 408], ["utils.NativeScalerWithGradNormCount._scaler.state_dict"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.NativeScalerWithGradNormCount.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_scaler", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.NativeScalerWithGradNormCount.load_state_dict": [[409, 411], ["utils.NativeScalerWithGradNormCount._scaler.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "_scaler", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.setup_for_distributed": [[252, 265], ["kwargs.pop", "builtin_print"], "function", ["None"], ["", "", "def", "setup_for_distributed", "(", "is_master", ")", ":", "\n", "    ", "\"\"\"\n    This function disables printing when not in master process\n    \"\"\"", "\n", "import", "builtins", "as", "__builtin__", "\n", "builtin_print", "=", "__builtin__", ".", "print", "\n", "\n", "def", "print", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "force", "=", "kwargs", ".", "pop", "(", "'force'", ",", "False", ")", "\n", "if", "is_master", "or", "force", ":", "\n", "            ", "builtin_print", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "__builtin__", ".", "print", "=", "print", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.is_dist_avail_and_initialized": [[267, 273], ["torch.is_available", "torch.is_initialized"], "function", ["None"], ["", "def", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.get_world_size": [[275, 279], ["torch.get_world_size", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.get_world_size", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.is_dist_avail_and_initialized"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.get_rank": [[281, 285], ["torch.get_rank", "utils.is_dist_avail_and_initialized"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.get_rank", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.is_dist_avail_and_initialized"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "is_dist_avail_and_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.is_main_process": [[287, 289], ["utils.get_rank"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.save_on_master": [[291, 294], ["utils.is_main_process", "torch.save", "torch.save"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.is_main_process"], ["", "def", "save_on_master", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.init_distributed_mode": [[296, 333], ["torch.cuda.set_device", "torch.cuda.set_device", "utils.setup_for_distributed.print", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.distributed.barrier", "torch.distributed.barrier", "utils.setup_for_distributed", "int", "int", "int", "str", "str", "str", "int", "int", "int", "int", "str", "str", "str", "utils.setup_for_distributed.print", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.setup_for_distributed"], ["", "", "def", "init_distributed_mode", "(", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "dist_on_itp", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "'OMPI_COMM_WORLD_RANK'", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'OMPI_COMM_WORLD_SIZE'", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "'OMPI_COMM_WORLD_LOCAL_RANK'", "]", ")", "\n", "args", ".", "dist_url", "=", "\"tcp://%s:%s\"", "%", "(", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", ",", "os", ".", "environ", "[", "'MASTER_PORT'", "]", ")", "\n", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "gpu", ")", "\n", "os", ".", "environ", "[", "'RANK'", "]", "=", "str", "(", "args", ".", "rank", ")", "\n", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", "=", "str", "(", "args", ".", "world_size", ")", "\n", "# [\"RANK\", \"WORLD_SIZE\", \"MASTER_ADDR\", \"MASTER_PORT\", \"LOCAL_RANK\"]", "\n", "", "elif", "'RANK'", "in", "os", ".", "environ", "and", "'WORLD_SIZE'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "args", ".", "gpu", "=", "int", "(", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", ")", "\n", "", "elif", "'SLURM_PROCID'", "in", "os", ".", "environ", ":", "\n", "        ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "args", ".", "gpu", "=", "args", ".", "rank", "%", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "os", ".", "environ", "[", "'RANK'", "]", "=", "str", "(", "args", ".", "rank", ")", "\n", "os", ".", "environ", "[", "'LOCAL_RANK'", "]", "=", "str", "(", "args", ".", "gpu", ")", "\n", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", "=", "str", "(", "args", ".", "world_size", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Not using distributed mode'", ")", "\n", "args", ".", "distributed", "=", "False", "\n", "return", "\n", "\n", "", "args", ".", "distributed", "=", "True", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "args", ".", "dist_backend", "=", "'nccl'", "\n", "print", "(", "'| distributed init (rank {}): {}, gpu {}'", ".", "format", "(", "\n", "args", ".", "rank", ",", "args", ".", "dist_url", ",", "args", ".", "gpu", ")", ",", "flush", "=", "True", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "setup_for_distributed", "(", "args", ".", "rank", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict": [[335, 382], ["getattr", "state_dict.copy.copy", "utils.load_state_dict.load"], "function", ["None"], ["", "def", "load_state_dict", "(", "model", ",", "state_dict", ",", "prefix", "=", "''", ",", "ignore_missing", "=", "\"relative_position_index\"", ")", ":", "\n", "    ", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "        ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "        ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "\n", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "            ", "if", "child", "is", "not", "None", ":", "\n", "                ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "\n", "", "", "", "load", "(", "model", ",", "prefix", "=", "prefix", ")", "\n", "\n", "warn_missing_keys", "=", "[", "]", "\n", "ignore_missing_keys", "=", "[", "]", "\n", "for", "key", "in", "missing_keys", ":", "\n", "        ", "keep_flag", "=", "True", "\n", "for", "ignore_key", "in", "ignore_missing", ".", "split", "(", "'|'", ")", ":", "\n", "            ", "if", "ignore_key", "in", "key", ":", "\n", "                ", "keep_flag", "=", "False", "\n", "break", "\n", "", "", "if", "keep_flag", ":", "\n", "            ", "warn_missing_keys", ".", "append", "(", "key", ")", "\n", "", "else", ":", "\n", "            ", "ignore_missing_keys", ".", "append", "(", "key", ")", "\n", "\n", "", "", "missing_keys", "=", "warn_missing_keys", "\n", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "        ", "print", "(", "\"Weights of {} not initialized from pretrained model: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "missing_keys", ")", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "        ", "print", "(", "\"Weights from pretrained model not used in {}: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "unexpected_keys", ")", ")", "\n", "", "if", "len", "(", "ignore_missing_keys", ")", ">", "0", ":", "\n", "        ", "print", "(", "\"Ignored weights of {} not initialized from pretrained model: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "ignore_missing_keys", ")", ")", "\n", "", "if", "len", "(", "error_msgs", ")", ">", "0", ":", "\n", "        ", "print", "(", "'\\n'", ".", "join", "(", "error_msgs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.get_grad_norm_": [[413, 426], ["isinstance", "float", "len", "torch.tensor", "torch.tensor", "max", "torch.norm", "torch.norm", "torch.stack", "torch.stack", "p.grad.detach().abs().max().to", "torch.norm().to", "torch.norm().to", "p.grad.detach().abs().max", "torch.norm", "torch.norm", "p.grad.detach().abs", "p.grad.detach", "p.grad.detach"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.max"], ["", "", "def", "get_grad_norm_", "(", "parameters", ",", "norm_type", ":", "float", "=", "2.0", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "if", "isinstance", "(", "parameters", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "parameters", "=", "[", "parameters", "]", "\n", "", "parameters", "=", "[", "p", "for", "p", "in", "parameters", "if", "p", ".", "grad", "is", "not", "None", "]", "\n", "norm_type", "=", "float", "(", "norm_type", ")", "\n", "if", "len", "(", "parameters", ")", "==", "0", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "0.", ")", "\n", "", "device", "=", "parameters", "[", "0", "]", ".", "grad", ".", "device", "\n", "if", "norm_type", "==", "inf", ":", "\n", "        ", "total_norm", "=", "max", "(", "p", ".", "grad", ".", "detach", "(", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ".", "to", "(", "device", ")", "for", "p", "in", "parameters", ")", "\n", "", "else", ":", "\n", "        ", "total_norm", "=", "torch", ".", "norm", "(", "torch", ".", "stack", "(", "[", "torch", ".", "norm", "(", "p", ".", "grad", ".", "detach", "(", ")", ",", "norm_type", ")", ".", "to", "(", "device", ")", "for", "p", "in", "parameters", "]", ")", ",", "norm_type", ")", "\n", "", "return", "total_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.cosine_scheduler": [[428, 446], ["numpy.array", "utils.setup_for_distributed.print", "numpy.arange", "numpy.array", "numpy.concatenate", "numpy.linspace", "len", "math.cos", "len"], "function", ["None"], ["", "def", "cosine_scheduler", "(", "base_value", ",", "final_value", ",", "epochs", ",", "niter_per_ep", ",", "warmup_epochs", "=", "0", ",", "\n", "start_warmup_value", "=", "0", ",", "warmup_steps", "=", "-", "1", ")", ":", "\n", "    ", "warmup_schedule", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "warmup_iters", "=", "warmup_epochs", "*", "niter_per_ep", "\n", "if", "warmup_steps", ">", "0", ":", "\n", "        ", "warmup_iters", "=", "warmup_steps", "\n", "", "print", "(", "\"Set warmup steps = %d\"", "%", "warmup_iters", ")", "\n", "if", "warmup_epochs", ">", "0", ":", "\n", "        ", "warmup_schedule", "=", "np", ".", "linspace", "(", "start_warmup_value", ",", "base_value", ",", "warmup_iters", ")", "\n", "\n", "", "iters", "=", "np", ".", "arange", "(", "epochs", "*", "niter_per_ep", "-", "warmup_iters", ")", "\n", "schedule", "=", "np", ".", "array", "(", "\n", "[", "final_value", "+", "0.5", "*", "(", "base_value", "-", "final_value", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "i", "/", "(", "len", "(", "iters", ")", ")", ")", ")", "for", "i", "in", "iters", "]", ")", "\n", "\n", "schedule", "=", "np", ".", "concatenate", "(", "(", "warmup_schedule", ",", "schedule", ")", ")", "\n", "\n", "assert", "len", "(", "schedule", ")", "==", "epochs", "*", "niter_per_ep", "\n", "return", "schedule", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.save_model": [[447, 470], ["pathlib.Path", "str", "utils.save_on_master", "utils.is_main_process", "isinstance", "os.path.exists", "model_without_ddp.state_dict", "optimizer.state_dict", "loss_scaler.state_dict", "timm.utils.get_state_dict", "os.remove"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.save_on_master", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.is_main_process", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.NativeScalerWithGradNormCount.state_dict", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.NativeScalerWithGradNormCount.state_dict", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.NativeScalerWithGradNormCount.state_dict"], ["", "def", "save_model", "(", "args", ",", "epoch", ",", "model", ",", "model_without_ddp", ",", "optimizer", ",", "loss_scaler", ",", "model_ema", "=", "None", ")", ":", "\n", "    ", "output_dir", "=", "Path", "(", "args", ".", "output_dir", ")", "\n", "epoch_name", "=", "str", "(", "epoch", ")", "\n", "checkpoint_paths", "=", "[", "output_dir", "/", "(", "'checkpoint-%s.pth'", "%", "epoch_name", ")", "]", "\n", "for", "checkpoint_path", "in", "checkpoint_paths", ":", "\n", "        ", "to_save", "=", "{", "\n", "'model'", ":", "model_without_ddp", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'scaler'", ":", "loss_scaler", ".", "state_dict", "(", ")", ",", "\n", "'args'", ":", "args", ",", "\n", "}", "\n", "\n", "if", "model_ema", "is", "not", "None", ":", "\n", "            ", "to_save", "[", "'model_ema'", "]", "=", "get_state_dict", "(", "model_ema", ")", "\n", "\n", "", "save_on_master", "(", "to_save", ",", "checkpoint_path", ")", "\n", "\n", "", "if", "is_main_process", "(", ")", "and", "isinstance", "(", "epoch", ",", "int", ")", ":", "\n", "        ", "to_del", "=", "epoch", "-", "args", ".", "save_ckpt_num", "*", "args", ".", "save_ckpt_freq", "\n", "old_ckpt", "=", "output_dir", "/", "(", "'checkpoint-%s.pth'", "%", "to_del", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "old_ckpt", ")", ":", "\n", "            ", "os", ".", "remove", "(", "old_ckpt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.auto_load_model": [[472, 508], ["pathlib.Path", "glob.glob", "utils.setup_for_distributed.print", "args.resume.startswith", "model_without_ddp.load_state_dict", "utils.setup_for_distributed.print", "len", "os.path.join", "t.isdigit", "os.path.join", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.load", "torch.load", "optimizer.load_state_dict", "utils.setup_for_distributed.print", "[].split", "max", "isinstance", "hasattr", "loss_scaler.load_state_dict", "int", "torch.load.keys", "model_ema.ema.load_state_dict", "model_ema.ema.load_state_dict", "ckpt.split"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict"], ["", "", "", "def", "auto_load_model", "(", "args", ",", "model", ",", "model_without_ddp", ",", "optimizer", ",", "loss_scaler", ",", "model_ema", "=", "None", ")", ":", "\n", "    ", "output_dir", "=", "Path", "(", "args", ".", "output_dir", ")", "\n", "if", "args", ".", "auto_resume", "and", "len", "(", "args", ".", "resume", ")", "==", "0", ":", "\n", "        ", "import", "glob", "\n", "all_checkpoints", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'checkpoint-*.pth'", ")", ")", "\n", "latest_ckpt", "=", "-", "1", "\n", "for", "ckpt", "in", "all_checkpoints", ":", "\n", "            ", "t", "=", "ckpt", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "if", "t", ".", "isdigit", "(", ")", ":", "\n", "                ", "latest_ckpt", "=", "max", "(", "int", "(", "t", ")", ",", "latest_ckpt", ")", "\n", "", "", "if", "latest_ckpt", ">=", "0", ":", "\n", "            ", "args", ".", "resume", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'checkpoint-%d.pth'", "%", "latest_ckpt", ")", "\n", "", "print", "(", "\"Auto resume checkpoint: %s\"", "%", "args", ".", "resume", ")", "\n", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "args", ".", "resume", ".", "startswith", "(", "'https'", ")", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "\n", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ",", "check_hash", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "'cpu'", ")", "\n", "", "model_without_ddp", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "print", "(", "\"Resume checkpoint %s\"", "%", "args", ".", "resume", ")", "\n", "if", "'optimizer'", "in", "checkpoint", "and", "'epoch'", "in", "checkpoint", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "if", "not", "isinstance", "(", "checkpoint", "[", "'epoch'", "]", ",", "str", ")", ":", "# does not support resuming with 'best', 'best-ema'", "\n", "                ", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "", "else", ":", "\n", "                ", "assert", "args", ".", "eval", ",", "'Does not support resuming with checkpoint-best'", "\n", "", "if", "hasattr", "(", "args", ",", "'model_ema'", ")", "and", "args", ".", "model_ema", ":", "\n", "                ", "if", "'model_ema'", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "                    ", "model_ema", ".", "ema", ".", "load_state_dict", "(", "checkpoint", "[", "'model_ema'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "model_ema", ".", "ema", ".", "load_state_dict", "(", "checkpoint", "[", "'model'", "]", ")", "\n", "", "", "if", "'scaler'", "in", "checkpoint", ":", "\n", "                ", "loss_scaler", ".", "load_state_dict", "(", "checkpoint", "[", "'scaler'", "]", ")", "\n", "", "print", "(", "\"With optim & sched!\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.Trainer.__init__": [[48, 50], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.Trainer.__call__": [[51, 56], ["run_with_submitit.Trainer._setup_gpu_args", "main.main"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.Trainer._setup_gpu_args", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.main"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "import", "main", "as", "classification", "\n", "\n", "self", ".", "_setup_gpu_args", "(", ")", "\n", "classification", ".", "main", "(", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.Trainer.checkpoint": [[57, 66], ["get_init_file().as_uri", "print", "submitit.helpers.DelayedSubmission", "type", "run_with_submitit.get_init_file"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.get_init_file"], ["", "def", "checkpoint", "(", "self", ")", ":", "\n", "        ", "import", "os", "\n", "import", "submitit", "\n", "\n", "self", ".", "args", ".", "dist_url", "=", "get_init_file", "(", ")", ".", "as_uri", "(", ")", "\n", "self", ".", "args", ".", "auto_resume", "=", "True", "\n", "print", "(", "\"Requeuing \"", ",", "self", ".", "args", ")", "\n", "empty_trainer", "=", "type", "(", "self", ")", "(", "self", ".", "args", ")", "\n", "return", "submitit", ".", "helpers", ".", "DelayedSubmission", "(", "empty_trainer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.Trainer._setup_gpu_args": [[67, 77], ["submitit.JobEnvironment", "pathlib.Path", "print"], "methods", ["None"], ["", "def", "_setup_gpu_args", "(", "self", ")", ":", "\n", "        ", "import", "submitit", "\n", "from", "pathlib", "import", "Path", "\n", "\n", "job_env", "=", "submitit", ".", "JobEnvironment", "(", ")", "\n", "self", ".", "args", ".", "output_dir", "=", "Path", "(", "self", ".", "args", ".", "job_dir", ")", "\n", "self", ".", "args", ".", "gpu", "=", "job_env", ".", "local_rank", "\n", "self", ".", "args", ".", "rank", "=", "job_env", ".", "global_rank", "\n", "self", ".", "args", ".", "world_size", "=", "job_env", ".", "num_tasks", "\n", "print", "(", "f\"Process group: {job_env.num_tasks} tasks, rank: {job_env.global_rank}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.parse_args": [[17, 30], ["main.get_args_parser", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.main.get_args_parser", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "classification_parser", "=", "classification", ".", "get_args_parser", "(", ")", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Submitit for ConvNeXt\"", ",", "parents", "=", "[", "classification_parser", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--ngpus\"", ",", "default", "=", "8", ",", "type", "=", "int", ",", "help", "=", "\"Number of gpus to request on each node\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--nodes\"", ",", "default", "=", "2", ",", "type", "=", "int", ",", "help", "=", "\"Number of nodes to request\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--timeout\"", ",", "default", "=", "72", ",", "type", "=", "int", ",", "help", "=", "\"Duration of the job, in hours\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--job_name\"", ",", "default", "=", "\"convnext\"", ",", "type", "=", "str", ",", "help", "=", "\"Job name\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--job_dir\"", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "help", "=", "\"Job directory; leave empty for default\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--partition\"", ",", "default", "=", "\"learnlab\"", ",", "type", "=", "str", ",", "help", "=", "\"Partition where to submit\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--use_volta32\"", ",", "action", "=", "'store_true'", ",", "default", "=", "True", ",", "help", "=", "\"Big models? Use this\"", ")", "\n", "parser", ".", "add_argument", "(", "'--comment'", ",", "default", "=", "\"\"", ",", "type", "=", "str", ",", "\n", "help", "=", "'Comment to pass to scheduler, e.g. priority message'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.get_shared_folder": [[31, 38], ["os.getenv", "pathlib.Path().is_dir", "RuntimeError", "pathlib.Path", "pathlib.Path.mkdir", "pathlib.Path"], "function", ["None"], ["", "def", "get_shared_folder", "(", ")", "->", "Path", ":", "\n", "    ", "user", "=", "os", ".", "getenv", "(", "\"USER\"", ")", "\n", "if", "Path", "(", "\"/checkpoint/\"", ")", ".", "is_dir", "(", ")", ":", "\n", "        ", "p", "=", "Path", "(", "f\"/checkpoint/{user}/convnext\"", ")", "\n", "p", ".", "mkdir", "(", "exist_ok", "=", "True", ")", "\n", "return", "p", "\n", "", "raise", "RuntimeError", "(", "\"No shared folder available\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.get_init_file": [[39, 46], ["os.makedirs", "init_file.exists", "str", "run_with_submitit.get_shared_folder", "os.remove", "run_with_submitit.get_shared_folder", "str", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.get_shared_folder", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.get_shared_folder"], ["", "def", "get_init_file", "(", ")", ":", "\n", "# Init file must not exist, but it's parent dir must exist.", "\n", "    ", "os", ".", "makedirs", "(", "str", "(", "get_shared_folder", "(", ")", ")", ",", "exist_ok", "=", "True", ")", "\n", "init_file", "=", "get_shared_folder", "(", ")", "/", "f\"{uuid.uuid4().hex}_init\"", "\n", "if", "init_file", ".", "exists", "(", ")", ":", "\n", "        ", "os", ".", "remove", "(", "str", "(", "init_file", ")", ")", "\n", "", "return", "init_file", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.main": [[79, 120], ["run_with_submitit.parse_args", "submitit.AutoExecutor", "submitit.AutoExecutor.update_parameters", "submitit.AutoExecutor.update_parameters", "get_init_file().as_uri", "run_with_submitit.Trainer", "submitit.AutoExecutor.submit", "print", "run_with_submitit.get_shared_folder", "run_with_submitit.get_init_file"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.parse_args", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.get_shared_folder", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.run_with_submitit.get_init_file"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "job_dir", "==", "\"\"", ":", "\n", "        ", "args", ".", "job_dir", "=", "get_shared_folder", "(", ")", "/", "\"%j\"", "\n", "\n", "", "executor", "=", "submitit", ".", "AutoExecutor", "(", "folder", "=", "args", ".", "job_dir", ",", "slurm_max_num_timeout", "=", "30", ")", "\n", "\n", "num_gpus_per_node", "=", "args", ".", "ngpus", "\n", "nodes", "=", "args", ".", "nodes", "\n", "timeout_min", "=", "args", ".", "timeout", "*", "60", "\n", "\n", "partition", "=", "args", ".", "partition", "\n", "kwargs", "=", "{", "}", "\n", "if", "args", ".", "use_volta32", ":", "\n", "        ", "kwargs", "[", "'slurm_constraint'", "]", "=", "'volta32gb'", "\n", "", "if", "args", ".", "comment", ":", "\n", "        ", "kwargs", "[", "'slurm_comment'", "]", "=", "args", ".", "comment", "\n", "\n", "", "executor", ".", "update_parameters", "(", "\n", "mem_gb", "=", "40", "*", "num_gpus_per_node", ",", "\n", "gpus_per_node", "=", "num_gpus_per_node", ",", "\n", "tasks_per_node", "=", "num_gpus_per_node", ",", "# one task per GPU", "\n", "cpus_per_task", "=", "10", ",", "\n", "nodes", "=", "nodes", ",", "\n", "timeout_min", "=", "timeout_min", ",", "# max is 60 * 72", "\n", "# Below are cluster dependent parameters", "\n", "slurm_partition", "=", "partition", ",", "\n", "slurm_signal_delay_s", "=", "120", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "executor", ".", "update_parameters", "(", "name", "=", "args", ".", "job_name", ")", "\n", "\n", "args", ".", "dist_url", "=", "get_init_file", "(", ")", ".", "as_uri", "(", ")", "\n", "args", ".", "output_dir", "=", "args", ".", "job_dir", "\n", "\n", "trainer", "=", "Trainer", "(", "args", ")", "\n", "job", "=", "executor", ".", "submit", "(", "trainer", ")", "\n", "\n", "print", "(", "\"Submitted job_id:\"", ",", "job", ".", "job_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.datasets.build_dataset": [[16, 48], ["datasets.build_transform", "print", "isinstance", "print", "print", "torchvision.datasets.CIFAR100", "print", "print", "print", "os.path.join", "torchvision.datasets.ImageFolder", "print", "torchvision.datasets.ImageFolder", "NotImplementedError", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.datasets.build_transform"], ["def", "build_dataset", "(", "is_train", ",", "args", ")", ":", "\n", "    ", "transform", "=", "build_transform", "(", "is_train", ",", "args", ")", "\n", "\n", "print", "(", "\"Transform = \"", ")", "\n", "if", "isinstance", "(", "transform", ",", "tuple", ")", ":", "\n", "        ", "for", "trans", "in", "transform", ":", "\n", "            ", "print", "(", "\" - - - - - - - - - - \"", ")", "\n", "for", "t", "in", "trans", ".", "transforms", ":", "\n", "                ", "print", "(", "t", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "t", "in", "transform", ".", "transforms", ":", "\n", "            ", "print", "(", "t", ")", "\n", "", "", "print", "(", "\"---------------------------\"", ")", "\n", "\n", "if", "args", ".", "data_set", "==", "'CIFAR'", ":", "\n", "        ", "dataset", "=", "datasets", ".", "CIFAR100", "(", "args", ".", "data_path", ",", "train", "=", "is_train", ",", "transform", "=", "transform", ",", "download", "=", "True", ")", "\n", "nb_classes", "=", "100", "\n", "", "elif", "args", ".", "data_set", "==", "'IMNET'", ":", "\n", "        ", "print", "(", "\"reading from datapath\"", ",", "args", ".", "data_path", ")", "\n", "root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_path", ",", "'train'", "if", "is_train", "else", "'val'", ")", "\n", "dataset", "=", "datasets", ".", "ImageFolder", "(", "root", ",", "transform", "=", "transform", ")", "\n", "nb_classes", "=", "1000", "\n", "", "elif", "args", ".", "data_set", "==", "\"image_folder\"", ":", "\n", "        ", "root", "=", "args", ".", "data_path", "if", "is_train", "else", "args", ".", "eval_data_path", "\n", "dataset", "=", "datasets", ".", "ImageFolder", "(", "root", ",", "transform", "=", "transform", ")", "\n", "nb_classes", "=", "args", ".", "nb_classes", "\n", "assert", "len", "(", "dataset", ".", "class_to_idx", ")", "==", "nb_classes", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "print", "(", "\"Number of the class = %d\"", "%", "nb_classes", ")", "\n", "\n", "return", "dataset", ",", "nb_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.datasets.build_transform": [[50, 97], ["t.append", "t.append", "torchvision.transforms.Compose", "timm.data.create_transform", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomCrop", "t.append", "print", "int", "t.append", "t.append", "torchvision.transforms.Resize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop"], "function", ["None"], ["", "def", "build_transform", "(", "is_train", ",", "args", ")", ":", "\n", "    ", "resize_im", "=", "args", ".", "input_size", ">", "32", "\n", "imagenet_default_mean_and_std", "=", "args", ".", "imagenet_default_mean_and_std", "\n", "mean", "=", "IMAGENET_INCEPTION_MEAN", "if", "not", "imagenet_default_mean_and_std", "else", "IMAGENET_DEFAULT_MEAN", "\n", "std", "=", "IMAGENET_INCEPTION_STD", "if", "not", "imagenet_default_mean_and_std", "else", "IMAGENET_DEFAULT_STD", "\n", "\n", "if", "is_train", ":", "\n", "# this should always dispatch to transforms_imagenet_train", "\n", "        ", "transform", "=", "create_transform", "(", "\n", "input_size", "=", "args", ".", "input_size", ",", "\n", "is_training", "=", "True", ",", "\n", "color_jitter", "=", "args", ".", "color_jitter", ",", "\n", "auto_augment", "=", "args", ".", "aa", ",", "\n", "interpolation", "=", "args", ".", "train_interpolation", ",", "\n", "re_prob", "=", "args", ".", "reprob", ",", "\n", "re_mode", "=", "args", ".", "remode", ",", "\n", "re_count", "=", "args", ".", "recount", ",", "\n", "mean", "=", "mean", ",", "\n", "std", "=", "std", ",", "\n", ")", "\n", "if", "not", "resize_im", ":", "\n", "            ", "transform", ".", "transforms", "[", "0", "]", "=", "transforms", ".", "RandomCrop", "(", "\n", "args", ".", "input_size", ",", "padding", "=", "4", ")", "\n", "", "return", "transform", "\n", "\n", "", "t", "=", "[", "]", "\n", "if", "resize_im", ":", "\n", "# warping (no cropping) when evaluated at 384 or larger", "\n", "        ", "if", "args", ".", "input_size", ">=", "384", ":", "\n", "            ", "t", ".", "append", "(", "\n", "transforms", ".", "Resize", "(", "(", "args", ".", "input_size", ",", "args", ".", "input_size", ")", ",", "\n", "interpolation", "=", "transforms", ".", "InterpolationMode", ".", "BICUBIC", ")", ",", "\n", ")", "\n", "print", "(", "f\"Warping {args.input_size} size input images...\"", ")", "\n", "", "else", ":", "\n", "            ", "if", "args", ".", "crop_pct", "is", "None", ":", "\n", "                ", "args", ".", "crop_pct", "=", "224", "/", "256", "\n", "", "size", "=", "int", "(", "args", ".", "input_size", "/", "args", ".", "crop_pct", ")", "\n", "t", ".", "append", "(", "\n", "# to maintain same ratio w.r.t. 224 images", "\n", "transforms", ".", "Resize", "(", "size", ",", "interpolation", "=", "transforms", ".", "InterpolationMode", ".", "BICUBIC", ")", ",", "\n", ")", "\n", "t", ".", "append", "(", "transforms", ".", "CenterCrop", "(", "args", ".", "input_size", ")", ")", "\n", "\n", "", "", "t", ".", "append", "(", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "t", ".", "append", "(", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", ")", "\n", "return", "transforms", ".", "Compose", "(", "t", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbones.convnext.Block.__init__": [[30, 40], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "convnext.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.GELU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.LayerNorm.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "drop_path", "=", "0.", ",", "layer_scale_init_value", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dwconv", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "7", ",", "padding", "=", "3", ",", "groups", "=", "dim", ")", "# depthwise conv", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "dim", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "pwconv1", "=", "nn", ".", "Linear", "(", "dim", ",", "4", "*", "dim", ")", "# pointwise/1x1 convs, implemented with linear layers", "\n", "self", ".", "act", "=", "nn", ".", "GELU", "(", ")", "\n", "self", ".", "pwconv2", "=", "nn", ".", "Linear", "(", "4", "*", "dim", ",", "dim", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "layer_scale_init_value", "*", "torch", ".", "ones", "(", "(", "dim", ")", ")", ",", "\n", "requires_grad", "=", "True", ")", "if", "layer_scale_init_value", ">", "0", "else", "None", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbones.convnext.Block.forward": [[41, 55], ["convnext.Block.dwconv", "x.permute.permute.permute", "convnext.Block.norm", "convnext.Block.pwconv1", "convnext.Block.act", "convnext.Block.pwconv2", "x.permute.permute.permute", "convnext.Block.drop_path"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input", "=", "x", "\n", "x", "=", "self", ".", "dwconv", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# (N, C, H, W) -> (N, H, W, C)", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "pwconv1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "pwconv2", "(", "x", ")", "\n", "if", "self", ".", "gamma", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "gamma", "*", "x", "\n", "", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# (N, H, W, C) -> (N, C, H, W)", "\n", "\n", "x", "=", "input", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbones.convnext.ConvNeXt.__init__": [[71, 109], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "convnext.ConvNeXt.downsample_layers.append", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "functools.partial", "range", "convnext.ConvNeXt.apply", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "convnext.LayerNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "convnext.ConvNeXt.downsample_layers.append", "x.item", "torch.Sequential", "torch.Sequential", "torch.Sequential", "convnext.ConvNeXt.stages.append", "functools.partial.", "convnext.ConvNeXt.add_module", "convnext.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "sum", "convnext.Block", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.LayerNorm.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", "=", "3", ",", "depths", "=", "[", "3", ",", "3", ",", "9", ",", "3", "]", ",", "dims", "=", "[", "96", ",", "192", ",", "384", ",", "768", "]", ",", "\n", "drop_path_rate", "=", "0.", ",", "layer_scale_init_value", "=", "1e-6", ",", "out_indices", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "downsample_layers", "=", "nn", ".", "ModuleList", "(", ")", "# stem and 3 intermediate downsampling conv layers", "\n", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "dims", "[", "0", "]", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "LayerNorm", "(", "dims", "[", "0", "]", ",", "eps", "=", "1e-6", ",", "data_format", "=", "\"channels_first\"", ")", "\n", ")", "\n", "self", ".", "downsample_layers", ".", "append", "(", "stem", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "downsample_layer", "=", "nn", ".", "Sequential", "(", "\n", "LayerNorm", "(", "dims", "[", "i", "]", ",", "eps", "=", "1e-6", ",", "data_format", "=", "\"channels_first\"", ")", ",", "\n", "nn", ".", "Conv2d", "(", "dims", "[", "i", "]", ",", "dims", "[", "i", "+", "1", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "downsample_layers", ".", "append", "(", "downsample_layer", ")", "\n", "\n", "", "self", ".", "stages", "=", "nn", ".", "ModuleList", "(", ")", "# 4 feature resolution stages, each consisting of multiple residual blocks", "\n", "dp_rates", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "\n", "cur", "=", "0", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "stage", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "Block", "(", "dim", "=", "dims", "[", "i", "]", ",", "drop_path", "=", "dp_rates", "[", "cur", "+", "j", "]", ",", "\n", "layer_scale_init_value", "=", "layer_scale_init_value", ")", "for", "j", "in", "range", "(", "depths", "[", "i", "]", ")", "]", "\n", ")", "\n", "self", ".", "stages", ".", "append", "(", "stage", ")", "\n", "cur", "+=", "depths", "[", "i", "]", "\n", "\n", "", "self", ".", "out_indices", "=", "out_indices", "\n", "\n", "norm_layer", "=", "partial", "(", "LayerNorm", ",", "eps", "=", "1e-6", ",", "data_format", "=", "\"channels_first\"", ")", "\n", "for", "i_layer", "in", "range", "(", "4", ")", ":", "\n", "            ", "layer", "=", "norm_layer", "(", "dims", "[", "i_layer", "]", ")", "\n", "layer_name", "=", "f'norm{i_layer}'", "\n", "self", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbones.convnext.ConvNeXt._init_weights": [[110, 114], ["isinstance", "timm.models.layers.trunc_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbones.convnext.ConvNeXt.init_weights": [[115, 139], ["isinstance", "isinstance", "convnext.ConvNeXt.apply", "mmdet.utils.get_root_logger", "mmcv_custom.load_checkpoint", "timm.models.layers.trunc_normal_", "isinstance", "convnext.ConvNeXt.apply", "TypeError", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize the weights in backbone.\n        Args:\n            pretrained (str, optional): Path to pre-trained weights.\n                Defaults to None.\n        \"\"\"", "\n", "\n", "def", "_init_weights", "(", "m", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n", "", "", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "self", ".", "apply", "(", "_init_weights", ")", "\n", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "self", ".", "apply", "(", "_init_weights", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbones.convnext.ConvNeXt.forward_features": [[140, 151], ["range", "tuple", "getattr", "getattr.", "outs.append"], "methods", ["None"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "x", "=", "self", ".", "downsample_layers", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "stages", "[", "i", "]", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "norm_layer", "=", "getattr", "(", "self", ",", "f'norm{i}'", ")", "\n", "x_out", "=", "norm_layer", "(", "x", ")", "\n", "outs", ".", "append", "(", "x_out", ")", "\n", "\n", "", "", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbones.convnext.ConvNeXt.forward": [[152, 155], ["convnext.ConvNeXt.forward_features"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.ConvNeXt.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbones.convnext.LayerNorm.__init__": [[162, 171], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.LayerNorm.__init__"], ["def", "__init__", "(", "self", ",", "normalized_shape", ",", "eps", "=", "1e-6", ",", "data_format", "=", "\"channels_last\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "normalized_shape", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "normalized_shape", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "data_format", "=", "data_format", "\n", "if", "self", ".", "data_format", "not", "in", "[", "\"channels_last\"", ",", "\"channels_first\"", "]", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "normalized_shape", "=", "(", "normalized_shape", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbones.convnext.LayerNorm.forward": [[172, 181], ["torch.layer_norm", "torch.layer_norm", "torch.layer_norm", "x.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "data_format", "==", "\"channels_last\"", ":", "\n", "            ", "return", "F", ".", "layer_norm", "(", "x", ",", "self", ".", "normalized_shape", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "eps", ")", "\n", "", "elif", "self", ".", "data_format", "==", "\"channels_first\"", ":", "\n", "            ", "u", "=", "x", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "s", "=", "(", "x", "-", "u", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "torch", ".", "sqrt", "(", "s", "+", "self", ".", "eps", ")", "\n", "x", "=", "self", ".", "weight", "[", ":", ",", "None", ",", "None", "]", "*", "x", "+", "self", ".", "bias", "[", ":", ",", "None", ",", "None", "]", "\n", "return", "x", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.layer_decay_optimizer_constructor.LearningRateDecayOptimizerConstructor.add_params": [[59, 124], ["print", "layer_decay_optimizer_constructor.LearningRateDecayOptimizerConstructor.paramwise_cfg.get", "layer_decay_optimizer_constructor.LearningRateDecayOptimizerConstructor.paramwise_cfg.get", "print", "module.named_parameters", "mmcv.runner.get_dist_info", "params.extend", "layer_decay_optimizer_constructor.LearningRateDecayOptimizerConstructor.paramwise_cfg.get", "[].append", "[].append", "print", "parameter_groups.values", "name.endswith", "layer_decay_optimizer_constructor.get_num_layer_layer_wise", "len", "layer_decay_optimizer_constructor.LearningRateDecayOptimizerConstructor.paramwise_cfg.get", "layer_decay_optimizer_constructor.get_num_layer_stage_wise", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.layer_decay_optimizer_constructor.get_num_layer_layer_wise", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.layer_decay_optimizer_constructor.get_num_layer_stage_wise"], ["    ", "def", "add_params", "(", "self", ",", "params", ",", "module", ",", "prefix", "=", "''", ",", "is_dcn_module", "=", "None", ")", ":", "\n", "        ", "\"\"\"Add all parameters of module to the params list.\n        The parameters of the given module will be added to the list of param\n        groups, with specific rules defined by paramwise_cfg.\n        Args:\n            params (list[dict]): A list of param groups, it will be modified\n                in place.\n            module (nn.Module): The module to be added.\n            prefix (str): The prefix of the module\n            is_dcn_module (int|float|None): If the current module is a\n                submodule of DCN, `is_dcn_module` will be passed to\n                control conv_offset layer's learning rate. Defaults to None.\n        \"\"\"", "\n", "parameter_groups", "=", "{", "}", "\n", "print", "(", "self", ".", "paramwise_cfg", ")", "\n", "num_layers", "=", "self", ".", "paramwise_cfg", ".", "get", "(", "'num_layers'", ")", "+", "2", "\n", "decay_rate", "=", "self", ".", "paramwise_cfg", ".", "get", "(", "'decay_rate'", ")", "\n", "decay_type", "=", "self", ".", "paramwise_cfg", ".", "get", "(", "'decay_type'", ",", "\"layer_wise\"", ")", "\n", "print", "(", "\"Build LearningRateDecayOptimizerConstructor %s %f - %d\"", "%", "(", "decay_type", ",", "decay_rate", ",", "num_layers", ")", ")", "\n", "weight_decay", "=", "self", ".", "base_wd", "\n", "\n", "for", "name", ",", "param", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "not", "param", ".", "requires_grad", ":", "\n", "                ", "continue", "# frozen weights", "\n", "", "if", "len", "(", "param", ".", "shape", ")", "==", "1", "or", "name", ".", "endswith", "(", "\".bias\"", ")", "or", "name", "in", "(", "'pos_embed'", ",", "'cls_token'", ")", ":", "\n", "                ", "group_name", "=", "\"no_decay\"", "\n", "this_weight_decay", "=", "0.", "\n", "", "else", ":", "\n", "                ", "group_name", "=", "\"decay\"", "\n", "this_weight_decay", "=", "weight_decay", "\n", "\n", "", "if", "decay_type", "==", "\"layer_wise\"", ":", "\n", "                ", "layer_id", "=", "get_num_layer_layer_wise", "(", "name", ",", "self", ".", "paramwise_cfg", ".", "get", "(", "'num_layers'", ")", ")", "\n", "", "elif", "decay_type", "==", "\"stage_wise\"", ":", "\n", "                ", "layer_id", "=", "get_num_layer_stage_wise", "(", "name", ",", "num_layers", ")", "\n", "\n", "", "group_name", "=", "\"layer_%d_%s\"", "%", "(", "layer_id", ",", "group_name", ")", "\n", "\n", "if", "group_name", "not", "in", "parameter_groups", ":", "\n", "                ", "scale", "=", "decay_rate", "**", "(", "num_layers", "-", "layer_id", "-", "1", ")", "\n", "\n", "parameter_groups", "[", "group_name", "]", "=", "{", "\n", "\"weight_decay\"", ":", "this_weight_decay", ",", "\n", "\"params\"", ":", "[", "]", ",", "\n", "\"param_names\"", ":", "[", "]", ",", "\n", "\"lr_scale\"", ":", "scale", ",", "\n", "\"group_name\"", ":", "group_name", ",", "\n", "\"lr\"", ":", "scale", "*", "self", ".", "base_lr", ",", "\n", "}", "\n", "\n", "", "parameter_groups", "[", "group_name", "]", "[", "\"params\"", "]", ".", "append", "(", "param", ")", "\n", "parameter_groups", "[", "group_name", "]", "[", "\"param_names\"", "]", ".", "append", "(", "name", ")", "\n", "", "rank", ",", "_", "=", "get_dist_info", "(", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "to_display", "=", "{", "}", "\n", "for", "key", "in", "parameter_groups", ":", "\n", "                ", "to_display", "[", "key", "]", "=", "{", "\n", "\"param_names\"", ":", "parameter_groups", "[", "key", "]", "[", "\"param_names\"", "]", ",", "\n", "\"lr_scale\"", ":", "parameter_groups", "[", "key", "]", "[", "\"lr_scale\"", "]", ",", "\n", "\"lr\"", ":", "parameter_groups", "[", "key", "]", "[", "\"lr\"", "]", ",", "\n", "\"weight_decay\"", ":", "parameter_groups", "[", "key", "]", "[", "\"weight_decay\"", "]", ",", "\n", "}", "\n", "", "print", "(", "\"Param groups = %s\"", "%", "json", ".", "dumps", "(", "to_display", ",", "indent", "=", "2", ")", ")", "\n", "\n", "", "params", ".", "extend", "(", "parameter_groups", ".", "values", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.layer_decay_optimizer_constructor.get_num_layer_layer_wise": [[14, 43], ["var_name.startswith", "int", "var_name.startswith", "int", "int", "var_name.split", "var_name.split", "var_name.split"], "function", ["None"], ["def", "get_num_layer_layer_wise", "(", "var_name", ",", "num_max_layer", "=", "12", ")", ":", "\n", "\n", "    ", "if", "var_name", "in", "(", "\"backbone.cls_token\"", ",", "\"backbone.mask_token\"", ",", "\"backbone.pos_embed\"", ")", ":", "\n", "        ", "return", "0", "\n", "", "elif", "var_name", ".", "startswith", "(", "\"backbone.downsample_layers\"", ")", ":", "\n", "        ", "stage_id", "=", "int", "(", "var_name", ".", "split", "(", "'.'", ")", "[", "2", "]", ")", "\n", "if", "stage_id", "==", "0", ":", "\n", "            ", "layer_id", "=", "0", "\n", "", "elif", "stage_id", "==", "1", ":", "\n", "            ", "layer_id", "=", "2", "\n", "", "elif", "stage_id", "==", "2", ":", "\n", "            ", "layer_id", "=", "3", "\n", "", "elif", "stage_id", "==", "3", ":", "\n", "            ", "layer_id", "=", "num_max_layer", "\n", "", "return", "layer_id", "\n", "", "elif", "var_name", ".", "startswith", "(", "\"backbone.stages\"", ")", ":", "\n", "        ", "stage_id", "=", "int", "(", "var_name", ".", "split", "(", "'.'", ")", "[", "2", "]", ")", "\n", "block_id", "=", "int", "(", "var_name", ".", "split", "(", "'.'", ")", "[", "3", "]", ")", "\n", "if", "stage_id", "==", "0", ":", "\n", "            ", "layer_id", "=", "1", "\n", "", "elif", "stage_id", "==", "1", ":", "\n", "            ", "layer_id", "=", "2", "\n", "", "elif", "stage_id", "==", "2", ":", "\n", "            ", "layer_id", "=", "3", "+", "block_id", "//", "3", "\n", "", "elif", "stage_id", "==", "3", ":", "\n", "            ", "layer_id", "=", "num_max_layer", "\n", "", "return", "layer_id", "\n", "", "else", ":", "\n", "        ", "return", "num_max_layer", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.layer_decay_optimizer_constructor.get_num_layer_stage_wise": [[45, 55], ["var_name.startswith", "var_name.startswith", "int", "var_name.split"], "function", ["None"], ["", "", "def", "get_num_layer_stage_wise", "(", "var_name", ",", "num_max_layer", ")", ":", "\n", "    ", "if", "var_name", "in", "(", "\"backbone.cls_token\"", ",", "\"backbone.mask_token\"", ",", "\"backbone.pos_embed\"", ")", ":", "\n", "        ", "return", "0", "\n", "", "elif", "var_name", ".", "startswith", "(", "\"backbone.downsample_layers\"", ")", ":", "\n", "        ", "return", "0", "\n", "", "elif", "var_name", ".", "startswith", "(", "\"backbone.stages\"", ")", ":", "\n", "        ", "stage_id", "=", "int", "(", "var_name", ".", "split", "(", "'.'", ")", "[", "2", "]", ")", "\n", "return", "stage_id", "+", "1", "\n", "", "else", ":", "\n", "        ", "return", "num_max_layer", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.customized_text.CustomizedTextLoggerHook._log_info": [[27, 94], ["log_dict.items", "runner.logger.info", "isinstance", "log_items.append", "customized_text.CustomizedTextLoggerHook.every_n_iters", "runner.logger.info", "isinstance", "log_dict.keys", "str", "torch.cuda.is_available", "customized_text.CustomizedTextLoggerHook.end_of_epoch", "log_dict[].items", "datetime.timedelta", "lr_str.append", "len", "int"], "methods", ["None"], ["def", "_log_info", "(", "self", ",", "log_dict", ",", "runner", ")", ":", "\n", "# print exp name for users to distinguish experiments", "\n", "# at every ``interval_exp_name`` iterations and the end of each epoch", "\n", "        ", "if", "runner", ".", "meta", "is", "not", "None", "and", "'exp_name'", "in", "runner", ".", "meta", ":", "\n", "            ", "if", "(", "self", ".", "every_n_iters", "(", "runner", ",", "self", ".", "interval_exp_name", ")", ")", "or", "(", "\n", "self", ".", "by_epoch", "and", "self", ".", "end_of_epoch", "(", "runner", ")", ")", ":", "\n", "                ", "exp_info", "=", "f'Exp name: {runner.meta[\"exp_name\"]}'", "\n", "runner", ".", "logger", ".", "info", "(", "exp_info", ")", "\n", "\n", "", "", "if", "log_dict", "[", "'mode'", "]", "==", "'train'", ":", "\n", "            ", "lr_str", "=", "{", "}", "\n", "for", "lr_type", "in", "[", "'lr'", ",", "'layer_0_lr'", "]", ":", "\n", "                ", "if", "isinstance", "(", "log_dict", "[", "lr_type", "]", ",", "dict", ")", ":", "\n", "                    ", "lr_str", "[", "lr_type", "]", "=", "[", "]", "\n", "for", "k", ",", "val", "in", "log_dict", "[", "lr_type", "]", ".", "items", "(", ")", ":", "\n", "                        ", "lr_str", ".", "append", "(", "f'{lr_type}_{k}: {val:.3e}'", ")", "\n", "", "lr_str", "[", "lr_type", "]", "=", "' '", ".", "join", "(", "lr_str", ")", "\n", "", "else", ":", "\n", "                    ", "lr_str", "[", "lr_type", "]", "=", "f'{lr_type}: {log_dict[lr_type]:.3e}'", "\n", "\n", "# by epoch: Epoch [4][100/1000]", "\n", "# by iter:  Iter [100/100000]", "\n", "", "", "if", "self", ".", "by_epoch", ":", "\n", "                ", "log_str", "=", "f'Epoch [{log_dict[\"epoch\"]}]'", "f'[{log_dict[\"iter\"]}/{len(runner.data_loader)}]\\t'", "\n", "", "else", ":", "\n", "                ", "log_str", "=", "f'Iter [{log_dict[\"iter\"]}/{runner.max_iters}]\\t'", "\n", "", "log_str", "+=", "f'{lr_str[\"lr\"]}, {lr_str[\"layer_0_lr\"]}, '", "\n", "\n", "if", "'time'", "in", "log_dict", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "time_sec_tot", "+=", "(", "log_dict", "[", "'time'", "]", "*", "self", ".", "interval", ")", "\n", "time_sec_avg", "=", "self", ".", "time_sec_tot", "/", "(", "\n", "runner", ".", "iter", "-", "self", ".", "start_iter", "+", "1", ")", "\n", "eta_sec", "=", "time_sec_avg", "*", "(", "runner", ".", "max_iters", "-", "runner", ".", "iter", "-", "1", ")", "\n", "eta_str", "=", "str", "(", "datetime", ".", "timedelta", "(", "seconds", "=", "int", "(", "eta_sec", ")", ")", ")", "\n", "log_str", "+=", "f'eta: {eta_str}, '", "\n", "log_str", "+=", "f'time: {log_dict[\"time\"]:.3f}, '", "f'data_time: {log_dict[\"data_time\"]:.3f}, '", "\n", "# statistic memory", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                    ", "log_str", "+=", "f'memory: {log_dict[\"memory\"]}, '", "\n", "", "", "", "else", ":", "\n", "# val/test time", "\n", "# here 1000 is the length of the val dataloader", "\n", "# by epoch: Epoch[val] [4][1000]", "\n", "# by iter: Iter[val] [1000]", "\n", "            ", "if", "self", ".", "by_epoch", ":", "\n", "                ", "log_str", "=", "f'Epoch({log_dict[\"mode\"]}) '", "f'[{log_dict[\"epoch\"]}][{log_dict[\"iter\"]}]\\t'", "\n", "", "else", ":", "\n", "                ", "log_str", "=", "f'Iter({log_dict[\"mode\"]}) [{log_dict[\"iter\"]}]\\t'", "\n", "\n", "", "", "log_items", "=", "[", "]", "\n", "for", "name", ",", "val", "in", "log_dict", ".", "items", "(", ")", ":", "\n", "# TODO: resolve this hack", "\n", "# these items have been in log_str", "\n", "            ", "if", "name", "in", "[", "\n", "'mode'", ",", "'Epoch'", ",", "'iter'", ",", "'lr'", ",", "'layer_0_lr'", ",", "'time'", ",", "'data_time'", ",", "\n", "'memory'", ",", "'epoch'", "\n", "]", ":", "\n", "                ", "continue", "\n", "", "if", "isinstance", "(", "val", ",", "float", ")", ":", "\n", "                ", "val", "=", "f'{val:.4f}'", "\n", "", "log_items", ".", "append", "(", "f'{name}: {val}'", ")", "\n", "", "log_str", "+=", "', '", ".", "join", "(", "log_items", ")", "\n", "\n", "runner", ".", "logger", ".", "info", "(", "log_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.customized_text.CustomizedTextLoggerHook.log": [[96, 131], ["collections.OrderedDict", "runner.current_lr", "isinstance", "dict", "customized_text.CustomizedTextLoggerHook._log_info", "customized_text.CustomizedTextLoggerHook._dump_log", "runner.log_buffer.output.pop", "customized_text.CustomizedTextLoggerHook.get_iter", "min", "max", "isinstance", "runner.current_lr.items", "torch.cuda.is_available", "customized_text.CustomizedTextLoggerHook.get_mode", "customized_text.CustomizedTextLoggerHook.get_epoch", "isinstance", "log_dict[].update", "log_dict[].update", "customized_text.CustomizedTextLoggerHook._get_max_memory", "min", "max"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.mmcv_custom.customized_text.CustomizedTextLoggerHook._log_info", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.max", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.SmoothedValue.max"], ["", "def", "log", "(", "self", ",", "runner", ")", ":", "\n", "        ", "if", "'eval_iter_num'", "in", "runner", ".", "log_buffer", ".", "output", ":", "\n", "# this doesn't modify runner.iter and is regardless of by_epoch", "\n", "            ", "cur_iter", "=", "runner", ".", "log_buffer", ".", "output", ".", "pop", "(", "'eval_iter_num'", ")", "\n", "", "else", ":", "\n", "            ", "cur_iter", "=", "self", ".", "get_iter", "(", "runner", ",", "inner_iter", "=", "True", ")", "\n", "\n", "", "log_dict", "=", "OrderedDict", "(", "\n", "mode", "=", "self", ".", "get_mode", "(", "runner", ")", ",", "\n", "epoch", "=", "self", ".", "get_epoch", "(", "runner", ")", ",", "\n", "iter", "=", "cur_iter", ")", "\n", "\n", "# record lr and layer_0_lr", "\n", "cur_lr", "=", "runner", ".", "current_lr", "(", ")", "\n", "if", "isinstance", "(", "cur_lr", ",", "list", ")", ":", "\n", "            ", "log_dict", "[", "'layer_0_lr'", "]", "=", "min", "(", "cur_lr", ")", "\n", "log_dict", "[", "'lr'", "]", "=", "max", "(", "cur_lr", ")", "\n", "", "else", ":", "\n", "            ", "assert", "isinstance", "(", "cur_lr", ",", "dict", ")", "\n", "log_dict", "[", "'lr'", "]", ",", "log_dict", "[", "'layer_0_lr'", "]", "=", "{", "}", ",", "{", "}", "\n", "for", "k", ",", "lr_", "in", "cur_lr", ".", "items", "(", ")", ":", "\n", "                ", "assert", "isinstance", "(", "lr_", ",", "list", ")", "\n", "log_dict", "[", "'layer_0_lr'", "]", ".", "update", "(", "{", "k", ":", "min", "(", "lr_", ")", "}", ")", "\n", "log_dict", "[", "'lr'", "]", ".", "update", "(", "{", "k", ":", "max", "(", "lr_", ")", "}", ")", "\n", "\n", "", "", "if", "'time'", "in", "runner", ".", "log_buffer", ".", "output", ":", "\n", "# statistic memory", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "log_dict", "[", "'memory'", "]", "=", "self", ".", "_get_max_memory", "(", "runner", ")", "\n", "\n", "", "", "log_dict", "=", "dict", "(", "log_dict", ",", "**", "runner", ".", "log_buffer", ".", "output", ")", "\n", "\n", "self", ".", "_log_info", "(", "log_dict", ",", "runner", ")", "\n", "self", ".", "_dump_log", "(", "log_dict", ",", "runner", ")", "\n", "return", "log_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.runner.checkpoint.save_checkpoint": [[19, 86], ["meta.update", "mmcv.parallel.is_module_wrapper", "isinstance", "filename.startswith", "hasattr", "meta.update", "mmcv.runner.checkpoint.weights_to_cpu", "optimizer.state_dict", "isinstance", "modelcloud.Folder", "os.split", "mmcv.mkdir_or_exist", "isinstance", "TypeError", "time.asctime", "mmcv.runner.checkpoint.get_state_dict", "optimizer.items", "modelcloud.get", "tempfile.TemporaryDirectory", "os.join", "root.create_training_model.create_file", "os.dirname", "open", "torch.save", "f.flush", "optim.state_dict", "ImportError", "modelcloud.Folder.create_training_model", "open", "torch.save", "f.flush", "type"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.NativeScalerWithGradNormCount.state_dict", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.flush", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.NativeScalerWithGradNormCount.state_dict", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.flush"], ["", "def", "save_checkpoint", "(", "model", ",", "filename", ",", "optimizer", "=", "None", ",", "meta", "=", "None", ")", ":", "\n", "    ", "\"\"\"Save checkpoint to file.\n\n    The checkpoint will have 4 fields: ``meta``, ``state_dict`` and\n    ``optimizer``, ``amp``. By default ``meta`` will contain version\n    and time info.\n\n    Args:\n        model (Module): Module whose params are to be saved.\n        filename (str): Checkpoint filename.\n        optimizer (:obj:`Optimizer`, optional): Optimizer to be saved.\n        meta (dict, optional): Metadata to be saved in checkpoint.\n    \"\"\"", "\n", "if", "meta", "is", "None", ":", "\n", "        ", "meta", "=", "{", "}", "\n", "", "elif", "not", "isinstance", "(", "meta", ",", "dict", ")", ":", "\n", "        ", "raise", "TypeError", "(", "f'meta must be a dict or None, but got {type(meta)}'", ")", "\n", "", "meta", ".", "update", "(", "mmcv_version", "=", "mmcv", ".", "__version__", ",", "time", "=", "time", ".", "asctime", "(", ")", ")", "\n", "\n", "if", "is_module_wrapper", "(", "model", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "if", "hasattr", "(", "model", ",", "'CLASSES'", ")", "and", "model", ".", "CLASSES", "is", "not", "None", ":", "\n", "# save class name to the meta", "\n", "        ", "meta", ".", "update", "(", "CLASSES", "=", "model", ".", "CLASSES", ")", "\n", "\n", "", "checkpoint", "=", "{", "\n", "'meta'", ":", "meta", ",", "\n", "'state_dict'", ":", "weights_to_cpu", "(", "get_state_dict", "(", "model", ")", ")", "\n", "}", "\n", "# save optimizer state dict in the checkpoint", "\n", "if", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "        ", "checkpoint", "[", "'optimizer'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "optimizer", ",", "dict", ")", ":", "\n", "        ", "checkpoint", "[", "'optimizer'", "]", "=", "{", "}", "\n", "for", "name", ",", "optim", "in", "optimizer", ".", "items", "(", ")", ":", "\n", "            ", "checkpoint", "[", "'optimizer'", "]", "[", "name", "]", "=", "optim", ".", "state_dict", "(", ")", "\n", "\n", "# save amp state dict in the checkpoint", "\n", "# checkpoint['amp'] = apex.amp.state_dict()", "\n", "\n", "", "", "if", "filename", ".", "startswith", "(", "'pavi://'", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "pavi", "import", "modelcloud", "\n", "from", "pavi", ".", "exception", "import", "NodeNotFoundError", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\n", "'Please install pavi to load checkpoint from modelcloud.'", ")", "\n", "", "model_path", "=", "filename", "[", "7", ":", "]", "\n", "root", "=", "modelcloud", ".", "Folder", "(", ")", "\n", "model_dir", ",", "model_name", "=", "osp", ".", "split", "(", "model_path", ")", "\n", "try", ":", "\n", "            ", "model", "=", "modelcloud", ".", "get", "(", "model_dir", ")", "\n", "", "except", "NodeNotFoundError", ":", "\n", "            ", "model", "=", "root", ".", "create_training_model", "(", "model_dir", ")", "\n", "", "with", "TemporaryDirectory", "(", ")", "as", "tmp_dir", ":", "\n", "            ", "checkpoint_file", "=", "osp", ".", "join", "(", "tmp_dir", ",", "model_name", ")", "\n", "with", "open", "(", "checkpoint_file", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "torch", ".", "save", "(", "checkpoint", ",", "f", ")", "\n", "f", ".", "flush", "(", ")", "\n", "", "model", ".", "create_file", "(", "checkpoint_file", ",", "name", "=", "model_name", ")", "\n", "", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "dirname", "(", "filename", ")", ")", "\n", "# immediately flush buffer", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "torch", ".", "save", "(", "checkpoint", ",", "f", ")", "\n", "f", ".", "flush", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext.Block.__init__": [[26, 36], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "convnext.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.GELU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.LayerNorm.__init__"], ["\n", "def", "__init__", "(", "self", ",", "dim", ",", "drop_path", "=", "0.", ",", "layer_scale_init_value", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dwconv", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "7", ",", "padding", "=", "3", ",", "groups", "=", "dim", ")", "# depthwise conv", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "dim", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "pwconv1", "=", "nn", ".", "Linear", "(", "dim", ",", "4", "*", "dim", ")", "# pointwise/1x1 convs, implemented with linear layers", "\n", "self", ".", "act", "=", "nn", ".", "GELU", "(", ")", "\n", "self", ".", "pwconv2", "=", "nn", ".", "Linear", "(", "4", "*", "dim", ",", "dim", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext.Block.forward": [[37, 51], ["convnext.Block.dwconv", "x.permute.permute.permute", "convnext.Block.norm", "convnext.Block.pwconv1", "convnext.Block.act", "convnext.Block.pwconv2", "x.permute.permute.permute", "convnext.Block.drop_path"], "methods", ["None"], ["self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "layer_scale_init_value", "*", "torch", ".", "ones", "(", "(", "dim", ")", ")", ",", "\n", "requires_grad", "=", "True", ")", "if", "layer_scale_init_value", ">", "0", "else", "None", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input", "=", "x", "\n", "x", "=", "self", ".", "dwconv", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# (N, C, H, W) -> (N, H, W, C)", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "pwconv1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "pwconv2", "(", "x", ")", "\n", "if", "self", ".", "gamma", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "gamma", "*", "x", "\n", "", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# (N, H, W, C) -> (N, C, H, W)", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext.ConvNeXt.__init__": [[66, 102], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "convnext.ConvNeXt.downsample_layers.append", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "convnext.ConvNeXt.apply", "convnext.ConvNeXt.head.weight.data.mul_", "convnext.ConvNeXt.head.bias.data.mul_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "convnext.LayerNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "convnext.ConvNeXt.downsample_layers.append", "x.item", "torch.Sequential", "torch.Sequential", "torch.Sequential", "convnext.ConvNeXt.stages.append", "convnext.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "sum", "convnext.Block", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.LayerNorm.__init__"], ["\n", "def", "__init__", "(", "self", ",", "in_chans", "=", "3", ",", "depths", "=", "[", "3", ",", "3", ",", "9", ",", "3", "]", ",", "dims", "=", "[", "96", ",", "192", ",", "384", ",", "768", "]", ",", "\n", "drop_path_rate", "=", "0.", ",", "layer_scale_init_value", "=", "1e-6", ",", "out_indices", "=", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "downsample_layers", "=", "nn", ".", "ModuleList", "(", ")", "# stem and 3 intermediate downsampling conv layers", "\n", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "dims", "[", "0", "]", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "LayerNorm", "(", "dims", "[", "0", "]", ",", "eps", "=", "1e-6", ",", "data_format", "=", "\"channels_first\"", ")", "\n", ")", "\n", "self", ".", "downsample_layers", ".", "append", "(", "stem", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "downsample_layer", "=", "nn", ".", "Sequential", "(", "\n", "LayerNorm", "(", "dims", "[", "i", "]", ",", "eps", "=", "1e-6", ",", "data_format", "=", "\"channels_first\"", ")", ",", "\n", "nn", ".", "Conv2d", "(", "dims", "[", "i", "]", ",", "dims", "[", "i", "+", "1", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "downsample_layers", ".", "append", "(", "downsample_layer", ")", "\n", "\n", "", "self", ".", "stages", "=", "nn", ".", "ModuleList", "(", ")", "# 4 feature resolution stages, each consisting of multiple residual blocks", "\n", "dp_rates", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "\n", "cur", "=", "0", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "stage", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "Block", "(", "dim", "=", "dims", "[", "i", "]", ",", "drop_path", "=", "dp_rates", "[", "cur", "+", "j", "]", ",", "\n", "layer_scale_init_value", "=", "layer_scale_init_value", ")", "for", "j", "in", "range", "(", "depths", "[", "i", "]", ")", "]", "\n", ")", "\n", "self", ".", "stages", ".", "append", "(", "stage", ")", "\n", "cur", "+=", "depths", "[", "i", "]", "\n", "\n", "", "self", ".", "out_indices", "=", "out_indices", "\n", "\n", "norm_layer", "=", "partial", "(", "LayerNorm", ",", "eps", "=", "1e-6", ",", "data_format", "=", "\"channels_first\"", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext.ConvNeXt._init_weights": [[103, 107], ["isinstance", "timm.models.layers.trunc_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["for", "i_layer", "in", "range", "(", "4", ")", ":", "\n", "            ", "layer", "=", "norm_layer", "(", "dims", "[", "i_layer", "]", ")", "\n", "layer_name", "=", "f'norm{i_layer}'", "\n", "self", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext.ConvNeXt.forward_features": [[108, 113], ["range", "convnext.ConvNeXt.norm", "x.mean"], "methods", ["None"], ["", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext.ConvNeXt.forward": [[114, 118], ["convnext.ConvNeXt.forward_features", "convnext.ConvNeXt.head"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.ConvNeXt.forward_features"], ["\n", "", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext.LayerNorm.__init__": [[125, 134], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.LayerNorm.__init__"], ["if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n", "", "", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "self", ".", "apply", "(", "_init_weights", ")", "\n", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext.LayerNorm.forward": [[135, 144], ["torch.layer_norm", "torch.layer_norm", "torch.layer_norm", "x.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "elif", "pretrained", "is", "None", ":", "\n", "            ", "self", ".", "apply", "(", "_init_weights", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n", "", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "x", "=", "self", ".", "downsample_layers", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "stages", "[", "i", "]", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext.convnext_tiny": [[158, 166], ["convnext.ConvNeXt", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "ConvNeXt.load_state_dict"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict"], ["\n", "def", "__init__", "(", "self", ",", "normalized_shape", ",", "eps", "=", "1e-6", ",", "data_format", "=", "\"channels_last\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "normalized_shape", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "normalized_shape", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext.convnext_small": [[167, 175], ["convnext.ConvNeXt", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "ConvNeXt.load_state_dict"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict"], ["self", ".", "data_format", "=", "data_format", "\n", "if", "self", ".", "data_format", "not", "in", "[", "\"channels_last\"", ",", "\"channels_first\"", "]", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "normalized_shape", "=", "(", "normalized_shape", ",", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "data_format", "==", "\"channels_last\"", ":", "\n", "            ", "return", "F", ".", "layer_norm", "(", "x", ",", "self", ".", "normalized_shape", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "eps", ")", "\n", "", "elif", "self", ".", "data_format", "==", "\"channels_first\"", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext.convnext_base": [[176, 184], ["convnext.ConvNeXt", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "ConvNeXt.load_state_dict"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict"], ["            ", "u", "=", "x", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "s", "=", "(", "x", "-", "u", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "torch", ".", "sqrt", "(", "s", "+", "self", ".", "eps", ")", "\n", "x", "=", "self", ".", "weight", "[", ":", ",", "None", ",", "None", "]", "*", "x", "+", "self", ".", "bias", "[", ":", ",", "None", ",", "None", "]", "\n", "return", "x", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext.convnext_large": [[185, 193], ["convnext.ConvNeXt", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "ConvNeXt.load_state_dict"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict"], []], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext.convnext_xlarge": [[194, 203], ["convnext.ConvNeXt", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "ConvNeXt.load_state_dict"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict"], []], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext_isotropic.ConvNeXtIsotropic.__init__": [[32, 50], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "convnext.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "convnext_isotropic.ConvNeXtIsotropic.apply", "convnext_isotropic.ConvNeXtIsotropic.head.weight.data.mul_", "convnext_isotropic.ConvNeXtIsotropic.head.bias.data.mul_", "x.item", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "convnext.Block", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.LayerNorm.__init__"], ["def", "__init__", "(", "self", ",", "in_chans", "=", "3", ",", "num_classes", "=", "1000", ",", "\n", "depth", "=", "18", ",", "dim", "=", "384", ",", "drop_path_rate", "=", "0.", ",", "\n", "layer_scale_init_value", "=", "0", ",", "head_init_scale", "=", "1.", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "stem", "=", "nn", ".", "Conv2d", "(", "in_chans", ",", "dim", ",", "kernel_size", "=", "16", ",", "stride", "=", "16", ")", "\n", "dp_rates", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "depth", ")", "]", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "[", "Block", "(", "dim", "=", "dim", ",", "drop_path", "=", "dp_rates", "[", "i", "]", ",", "\n", "layer_scale_init_value", "=", "layer_scale_init_value", ")", "\n", "for", "i", "in", "range", "(", "depth", ")", "]", ")", "\n", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "dim", ",", "eps", "=", "1e-6", ")", "# final norm layer", "\n", "self", ".", "head", "=", "nn", ".", "Linear", "(", "dim", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "self", ".", "head", ".", "weight", ".", "data", ".", "mul_", "(", "head_init_scale", ")", "\n", "self", ".", "head", ".", "bias", ".", "data", ".", "mul_", "(", "head_init_scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext_isotropic.ConvNeXtIsotropic._init_weights": [[51, 55], ["isinstance", "timm.models.layers.trunc_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n", "            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext_isotropic.ConvNeXtIsotropic.forward_features": [[56, 60], ["convnext_isotropic.ConvNeXtIsotropic.stem", "convnext_isotropic.ConvNeXtIsotropic.blocks", "convnext_isotropic.ConvNeXtIsotropic.norm", "convnext_isotropic.ConvNeXtIsotropic.mean"], "methods", ["None"], ["", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "stem", "(", "x", ")", "\n", "x", "=", "self", ".", "blocks", "(", "x", ")", "\n", "return", "self", ".", "norm", "(", "x", ".", "mean", "(", "[", "-", "2", ",", "-", "1", "]", ")", ")", "# global average pooling, (N, C, H, W) -> (N, C)", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext_isotropic.ConvNeXtIsotropic.forward": [[61, 65], ["convnext_isotropic.ConvNeXtIsotropic.forward_features", "convnext_isotropic.ConvNeXtIsotropic.head"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.ConvNeXt.forward_features"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n", "x", "=", "self", ".", "head", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext_isotropic.convnext_isotropic_small": [[66, 74], ["convnext_isotropic.ConvNeXtIsotropic", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "ConvNeXtIsotropic.load_state_dict"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict"], ["", "", "@", "register_model", "\n", "def", "convnext_isotropic_small", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ConvNeXtIsotropic", "(", "depth", "=", "18", ",", "dim", "=", "384", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "url", "=", "'https://dl.fbaipublicfiles.com/convnext/convnext_iso_small_1k_224_ema.pth'", "\n", "checkpoint", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "url", "=", "url", ",", "map_location", "=", "\"cpu\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model\"", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext_isotropic.convnext_isotropic_base": [[75, 83], ["convnext_isotropic.ConvNeXtIsotropic", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "ConvNeXtIsotropic.load_state_dict"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict"], ["", "@", "register_model", "\n", "def", "convnext_isotropic_base", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ConvNeXtIsotropic", "(", "depth", "=", "18", ",", "dim", "=", "768", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "url", "=", "'https://dl.fbaipublicfiles.com/convnext/convnext_iso_base_1k_224_ema.pth'", "\n", "checkpoint", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "url", "=", "url", ",", "map_location", "=", "\"cpu\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model\"", "]", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.models.convnext_isotropic.convnext_isotropic_large": [[84, 92], ["convnext_isotropic.ConvNeXtIsotropic", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "torch.hub.load_state_dict_from_url", "ConvNeXtIsotropic.load_state_dict"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.load_state_dict"], ["", "@", "register_model", "\n", "def", "convnext_isotropic_large", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ConvNeXtIsotropic", "(", "depth", "=", "36", ",", "dim", "=", "1024", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "url", "=", "'https://dl.fbaipublicfiles.com/convnext/convnext_iso_large_1k_224_ema.pth'", "\n", "checkpoint", "=", "torch", ".", "hub", ".", "load_state_dict_from_url", "(", "url", "=", "url", ",", "map_location", "=", "\"cpu\"", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model\"", "]", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.apex_runner.checkpoint.save_checkpoint": [[19, 86], ["meta.update", "mmcv.parallel.is_module_wrapper", "isinstance", "filename.startswith", "hasattr", "meta.update", "mmcv.runner.checkpoint.weights_to_cpu", "optimizer.state_dict", "isinstance", "modelcloud.Folder", "os.split", "mmcv.mkdir_or_exist", "isinstance", "TypeError", "time.asctime", "mmcv.runner.checkpoint.get_state_dict", "optimizer.items", "modelcloud.get", "tempfile.TemporaryDirectory", "os.join", "root.create_training_model.create_file", "os.dirname", "open", "torch.save", "f.flush", "optim.state_dict", "ImportError", "modelcloud.Folder.create_training_model", "open", "torch.save", "f.flush", "type"], "function", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.update", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.NativeScalerWithGradNormCount.state_dict", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.flush", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.NativeScalerWithGradNormCount.state_dict", "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.None.utils.TensorboardLogger.flush"], ["", "def", "save_checkpoint", "(", "model", ",", "filename", ",", "optimizer", "=", "None", ",", "meta", "=", "None", ")", ":", "\n", "    ", "\"\"\"Save checkpoint to file.\n\n    The checkpoint will have 4 fields: ``meta``, ``state_dict`` and\n    ``optimizer``, ``amp``. By default ``meta`` will contain version\n    and time info.\n\n    Args:\n        model (Module): Module whose params are to be saved.\n        filename (str): Checkpoint filename.\n        optimizer (:obj:`Optimizer`, optional): Optimizer to be saved.\n        meta (dict, optional): Metadata to be saved in checkpoint.\n    \"\"\"", "\n", "if", "meta", "is", "None", ":", "\n", "        ", "meta", "=", "{", "}", "\n", "", "elif", "not", "isinstance", "(", "meta", ",", "dict", ")", ":", "\n", "        ", "raise", "TypeError", "(", "f'meta must be a dict or None, but got {type(meta)}'", ")", "\n", "", "meta", ".", "update", "(", "mmcv_version", "=", "mmcv", ".", "__version__", ",", "time", "=", "time", ".", "asctime", "(", ")", ")", "\n", "\n", "if", "is_module_wrapper", "(", "model", ")", ":", "\n", "        ", "model", "=", "model", ".", "module", "\n", "\n", "", "if", "hasattr", "(", "model", ",", "'CLASSES'", ")", "and", "model", ".", "CLASSES", "is", "not", "None", ":", "\n", "# save class name to the meta", "\n", "        ", "meta", ".", "update", "(", "CLASSES", "=", "model", ".", "CLASSES", ")", "\n", "\n", "", "checkpoint", "=", "{", "\n", "'meta'", ":", "meta", ",", "\n", "'state_dict'", ":", "weights_to_cpu", "(", "get_state_dict", "(", "model", ")", ")", "\n", "}", "\n", "# save optimizer state dict in the checkpoint", "\n", "if", "isinstance", "(", "optimizer", ",", "Optimizer", ")", ":", "\n", "        ", "checkpoint", "[", "'optimizer'", "]", "=", "optimizer", ".", "state_dict", "(", ")", "\n", "", "elif", "isinstance", "(", "optimizer", ",", "dict", ")", ":", "\n", "        ", "checkpoint", "[", "'optimizer'", "]", "=", "{", "}", "\n", "for", "name", ",", "optim", "in", "optimizer", ".", "items", "(", ")", ":", "\n", "            ", "checkpoint", "[", "'optimizer'", "]", "[", "name", "]", "=", "optim", ".", "state_dict", "(", ")", "\n", "\n", "# save amp state dict in the checkpoint", "\n", "# checkpoint['amp'] = apex.amp.state_dict()", "\n", "\n", "", "", "if", "filename", ".", "startswith", "(", "'pavi://'", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "pavi", "import", "modelcloud", "\n", "from", "pavi", ".", "exception", "import", "NodeNotFoundError", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\n", "'Please install pavi to load checkpoint from modelcloud.'", ")", "\n", "", "model_path", "=", "filename", "[", "7", ":", "]", "\n", "root", "=", "modelcloud", ".", "Folder", "(", ")", "\n", "model_dir", ",", "model_name", "=", "osp", ".", "split", "(", "model_path", ")", "\n", "try", ":", "\n", "            ", "model", "=", "modelcloud", ".", "get", "(", "model_dir", ")", "\n", "", "except", "NodeNotFoundError", ":", "\n", "            ", "model", "=", "root", ".", "create_training_model", "(", "model_dir", ")", "\n", "", "with", "TemporaryDirectory", "(", ")", "as", "tmp_dir", ":", "\n", "            ", "checkpoint_file", "=", "osp", ".", "join", "(", "tmp_dir", ",", "model_name", ")", "\n", "with", "open", "(", "checkpoint_file", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "torch", ".", "save", "(", "checkpoint", ",", "f", ")", "\n", "f", ".", "flush", "(", ")", "\n", "", "model", ".", "create_file", "(", "checkpoint_file", ",", "name", "=", "model_name", ")", "\n", "", "", "else", ":", "\n", "        ", "mmcv", ".", "mkdir_or_exist", "(", "osp", ".", "dirname", "(", "filename", ")", ")", "\n", "# immediately flush buffer", "\n", "with", "open", "(", "filename", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "torch", ".", "save", "(", "checkpoint", ",", "f", ")", "\n", "f", ".", "flush", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.Block.__init__": [[32, 42], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "convnext.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.GELU", "torch.GELU", "torch.GELU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "timm.models.layers.DropPath", "torch.Identity", "torch.Identity", "torch.Identity", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.LayerNorm.__init__"], ["self", ".", "dwconv", "=", "nn", ".", "Conv2d", "(", "dim", ",", "dim", ",", "kernel_size", "=", "7", ",", "padding", "=", "3", ",", "groups", "=", "dim", ")", "# depthwise conv", "\n", "self", ".", "norm", "=", "LayerNorm", "(", "dim", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "pwconv1", "=", "nn", ".", "Linear", "(", "dim", ",", "4", "*", "dim", ")", "# pointwise/1x1 convs, implemented with linear layers", "\n", "self", ".", "act", "=", "nn", ".", "GELU", "(", ")", "\n", "self", ".", "pwconv2", "=", "nn", ".", "Linear", "(", "4", "*", "dim", ",", "dim", ")", "\n", "self", ".", "gamma", "=", "nn", ".", "Parameter", "(", "layer_scale_init_value", "*", "torch", ".", "ones", "(", "(", "dim", ")", ")", ",", "\n", "requires_grad", "=", "True", ")", "if", "layer_scale_init_value", ">", "0", "else", "None", "\n", "self", ".", "drop_path", "=", "DropPath", "(", "drop_path", ")", "if", "drop_path", ">", "0.", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "input", "=", "x", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.Block.forward": [[43, 57], ["convnext.Block.dwconv", "x.permute.permute.permute", "convnext.Block.norm", "convnext.Block.pwconv1", "convnext.Block.act", "convnext.Block.pwconv2", "x.permute.permute.permute", "convnext.Block.drop_path"], "methods", ["None"], ["x", "=", "self", ".", "dwconv", "(", "x", ")", "\n", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# (N, C, H, W) -> (N, H, W, C)", "\n", "x", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "pwconv1", "(", "x", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "pwconv2", "(", "x", ")", "\n", "if", "self", ".", "gamma", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "gamma", "*", "x", "\n", "", "x", "=", "x", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "# (N, H, W, C) -> (N, C, H, W)", "\n", "\n", "x", "=", "input", "+", "self", ".", "drop_path", "(", "x", ")", "\n", "return", "x", "\n", "\n", "", "", "@", "BACKBONES", ".", "register_module", "(", ")", "\n", "class", "ConvNeXt", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.ConvNeXt.__init__": [[73, 111], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Sequential", "torch.Sequential", "torch.Sequential", "convnext.ConvNeXt.downsample_layers.append", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "functools.partial", "range", "convnext.ConvNeXt.apply", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "convnext.LayerNorm", "torch.Sequential", "torch.Sequential", "torch.Sequential", "convnext.ConvNeXt.downsample_layers.append", "x.item", "torch.Sequential", "torch.Sequential", "torch.Sequential", "convnext.ConvNeXt.stages.append", "functools.partial.", "convnext.ConvNeXt.add_module", "convnext.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "sum", "convnext.Block", "range"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.LayerNorm.__init__"], [")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "downsample_layers", "=", "nn", ".", "ModuleList", "(", ")", "# stem and 3 intermediate downsampling conv layers", "\n", "stem", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_chans", ",", "dims", "[", "0", "]", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "LayerNorm", "(", "dims", "[", "0", "]", ",", "eps", "=", "1e-6", ",", "data_format", "=", "\"channels_first\"", ")", "\n", ")", "\n", "self", ".", "downsample_layers", ".", "append", "(", "stem", ")", "\n", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "            ", "downsample_layer", "=", "nn", ".", "Sequential", "(", "\n", "LayerNorm", "(", "dims", "[", "i", "]", ",", "eps", "=", "1e-6", ",", "data_format", "=", "\"channels_first\"", ")", ",", "\n", "nn", ".", "Conv2d", "(", "dims", "[", "i", "]", ",", "dims", "[", "i", "+", "1", "]", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "downsample_layers", ".", "append", "(", "downsample_layer", ")", "\n", "\n", "", "self", ".", "stages", "=", "nn", ".", "ModuleList", "(", ")", "# 4 feature resolution stages, each consisting of multiple residual blocks", "\n", "dp_rates", "=", "[", "x", ".", "item", "(", ")", "for", "x", "in", "torch", ".", "linspace", "(", "0", ",", "drop_path_rate", ",", "sum", "(", "depths", ")", ")", "]", "\n", "cur", "=", "0", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "stage", "=", "nn", ".", "Sequential", "(", "\n", "*", "[", "Block", "(", "dim", "=", "dims", "[", "i", "]", ",", "drop_path", "=", "dp_rates", "[", "cur", "+", "j", "]", ",", "\n", "layer_scale_init_value", "=", "layer_scale_init_value", ")", "for", "j", "in", "range", "(", "depths", "[", "i", "]", ")", "]", "\n", ")", "\n", "self", ".", "stages", ".", "append", "(", "stage", ")", "\n", "cur", "+=", "depths", "[", "i", "]", "\n", "\n", "", "self", ".", "out_indices", "=", "out_indices", "\n", "\n", "norm_layer", "=", "partial", "(", "LayerNorm", ",", "eps", "=", "1e-6", ",", "data_format", "=", "\"channels_first\"", ")", "\n", "for", "i_layer", "in", "range", "(", "4", ")", ":", "\n", "            ", "layer", "=", "norm_layer", "(", "dims", "[", "i_layer", "]", ")", "\n", "layer_name", "=", "f'norm{i_layer}'", "\n", "self", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "\n", "", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "nn", ".", "Linear", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.ConvNeXt._init_weights": [[112, 116], ["isinstance", "timm.models.layers.trunc_normal_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["            ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "", "", "def", "init_weights", "(", "self", ",", "pretrained", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.ConvNeXt.init_weights": [[117, 141], ["isinstance", "isinstance", "convnext.ConvNeXt.apply", "mmseg.utils.get_root_logger", "mmcv_custom.load_checkpoint", "timm.models.layers.trunc_normal_", "isinstance", "convnext.ConvNeXt.apply", "TypeError", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["\n", "\n", "def", "_init_weights", "(", "m", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "trunc_normal_", "(", "m", ".", "weight", ",", "std", "=", ".02", ")", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "\n", "", "", "if", "isinstance", "(", "pretrained", ",", "str", ")", ":", "\n", "            ", "self", ".", "apply", "(", "_init_weights", ")", "\n", "logger", "=", "get_root_logger", "(", ")", "\n", "load_checkpoint", "(", "self", ",", "pretrained", ",", "strict", "=", "False", ",", "logger", "=", "logger", ")", "\n", "", "elif", "pretrained", "is", "None", ":", "\n", "            ", "self", ".", "apply", "(", "_init_weights", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "'pretrained must be a str or None'", ")", "\n", "\n", "", "", "def", "forward_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "outs", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.ConvNeXt.forward_features": [[142, 153], ["range", "tuple", "getattr", "getattr.", "outs.append"], "methods", ["None"], ["for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "x", "=", "self", ".", "downsample_layers", "[", "i", "]", "(", "x", ")", "\n", "x", "=", "self", ".", "stages", "[", "i", "]", "(", "x", ")", "\n", "if", "i", "in", "self", ".", "out_indices", ":", "\n", "                ", "norm_layer", "=", "getattr", "(", "self", ",", "f'norm{i}'", ")", "\n", "x_out", "=", "norm_layer", "(", "x", ")", "\n", "outs", ".", "append", "(", "x_out", ")", "\n", "\n", "", "", "return", "tuple", "(", "outs", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "forward_features", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.ConvNeXt.forward": [[154, 157], ["convnext.ConvNeXt.forward_features"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.ConvNeXt.forward_features"], ["return", "x", "\n", "\n", "", "", "class", "LayerNorm", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.LayerNorm.__init__": [[164, 173], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.LayerNorm.__init__"], ["self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "normalized_shape", ")", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "normalized_shape", ")", ")", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "data_format", "=", "data_format", "\n", "if", "self", ".", "data_format", "not", "in", "[", "\"channels_last\"", ",", "\"channels_first\"", "]", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "normalized_shape", "=", "(", "normalized_shape", ",", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "data_format", "==", "\"channels_last\"", ":", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_ConvNeXt.backbone.convnext.LayerNorm.forward": [[174, 183], ["torch.layer_norm", "torch.layer_norm", "torch.layer_norm", "x.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["            ", "return", "F", ".", "layer_norm", "(", "x", ",", "self", ".", "normalized_shape", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "eps", ")", "\n", "", "elif", "self", ".", "data_format", "==", "\"channels_first\"", ":", "\n", "            ", "u", "=", "x", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "s", "=", "(", "x", "-", "u", ")", ".", "pow", "(", "2", ")", ".", "mean", "(", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "(", "x", "-", "u", ")", "/", "torch", ".", "sqrt", "(", "s", "+", "self", ".", "eps", ")", "\n", "x", "=", "self", ".", "weight", "[", ":", ",", "None", ",", "None", "]", "*", "x", "+", "self", ".", "bias", "[", ":", ",", "None", ",", "None", "]", "\n", "return", "x", "\n", "", "", "", ""]]}