{"home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.train.load_dataset": [[37, 44], ["datasets.append", "len"], "function", ["None"], ["def", "load_dataset", "(", "args", ",", "tokenizer", ")", ":", "\n", "    ", "splits", "=", "[", "'train'", ",", "'dev'", ",", "'test'", "]", "\n", "datasets", "=", "[", "]", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "dataset", "=", "dataset_classes", "[", "args", ".", "dataset_name", "]", "(", "args", ".", "dataset_name", ",", "split", ",", "tokenizer", ",", "args", ")", "\n", "datasets", ".", "append", "(", "dataset", ")", "\n", "", "return", "(", "*", "datasets", ",", ")", "if", "len", "(", "datasets", ")", ">", "1", "else", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.train.preprocess_batch": [[46, 63], ["torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "function", ["None"], ["", "def", "preprocess_batch", "(", "data", ")", ":", "\n", "    ", "data_intents", "=", "[", "d", "[", "'intent'", "]", "for", "d", "in", "data", "]", "\n", "data_snippets", "=", "[", "d", "[", "'snippet'", "]", "for", "d", "in", "data", "]", "\n", "keys", "=", "[", "'input_ids'", ",", "'attention_mask'", ",", "'token_type_ids'", "]", "\n", "source_dict", "=", "{", "key", ":", "pad_sequence", "(", "[", "torch", ".", "tensor", "(", "d", "[", "key", "]", ")", "for", "d", "in", "data_intents", "]", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "for", "key", "in", "keys", "}", "\n", "target_dict", "=", "{", "key", ":", "pad_sequence", "(", "[", "torch", ".", "tensor", "(", "d", "[", "key", "]", ")", "for", "d", "in", "data_snippets", "]", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "for", "key", "in", "keys", "}", "\n", "extra_info", "=", "{", "}", "\n", "if", "args", ".", "pointer_network", ":", "\n", "        ", "source_dict", "[", "'source_label'", "]", "=", "pad_sequence", "(", "[", "torch", ".", "tensor", "(", "d", "[", "'source_label'", "]", ")", "for", "d", "in", "data_intents", "]", ",", "\n", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "data_choices", "=", "[", "d", "[", "'choices'", "]", "for", "d", "in", "data", "]", "\n", "extra_info", "[", "'choices'", "]", "=", "{", "key", ":", "pad_sequence", "(", "[", "torch", ".", "tensor", "(", "d", "[", "key", "]", ")", "for", "d", "in", "data_choices", "]", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "for", "key", "in", "keys", "}", "\n", "extra_info", "[", "'label'", "]", "=", "pad_sequence", "(", "[", "torch", ".", "tensor", "(", "d", "[", "'label'", "]", ")", "for", "d", "in", "data", "]", ",", "batch_first", "=", "True", ",", "padding_value", "=", "0", ")", "\n", "", "return", "{", "'source'", ":", "source_dict", ",", "'target'", ":", "target_dict", ",", "**", "extra_info", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.train.print_dataset_length_info": [[65, 74], ["range", "print", "print", "numpy.array", "print", "print", "len", "np.array.append", "min", "max", "numpy.std", "numpy.mean", "len"], "function", ["None"], ["", "def", "print_dataset_length_info", "(", "train_dataset", ")", ":", "\n", "    ", "length", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "train_dataset", ")", ")", ":", "\n", "        ", "length", ".", "append", "(", "len", "(", "train_dataset", "[", "i", "]", "[", "'intent'", "]", "[", "'input_ids'", "]", ")", ")", "\n", "", "print", "(", "\"min\"", ",", "min", "(", "length", ")", ")", "\n", "print", "(", "\"max\"", ",", "max", "(", "length", ")", ")", "\n", "length", "=", "np", ".", "array", "(", "length", ")", "\n", "print", "(", "'std'", ",", "np", ".", "std", "(", "length", ")", ")", "\n", "print", "(", "'mean'", ",", "np", ".", "mean", "(", "length", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.train.train": [[76, 245], ["torch.cuda.is_available", "torch.manual_seed", "numpy.random.seed", "model.Model", "model.Model.named_parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.ExponentialLR", "torch.optim.lr_scheduler.LambdaLR", "model.Model.to", "train.load_dataset", "train.print_dataset_length_info", "print", "utils.generate_model_name", "print", "torch.utils.tensorboard.SummaryWriter", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "print", "print", "print", "print", "print", "os.path.join", "torch.utils.tensorboard.SummaryWriter.close", "torch.cuda.manual_seed_all", "booster.utils.EMA", "int", "torch.utils.data.DataLoader", "iter", "print", "len", "len", "len", "model.Model.tokenizer.decode", "model.Model.tokenizer.decode", "print", "print", "print", "print", "os.path.exists", "range", "torch.no_grad", "model.Model.load_state_dict", "model.Model.eval", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "name.startswith", "params_except_encoder.append", "model.Model.encoder.parameters", "len", "len", "model.Model.tokenizer.decode", "model.Model.tokenizer.decode", "print", "torch.load", "model.Model.load_state_dict", "booster.utils.EMA", "model.Model.load_state_dict", "torch.optim.Adam.load_state_dict", "print", "model.Model.train", "tqdm.tqdm", "torch.optim.lr_scheduler.ExponentialLR.step", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.load", "round", "int", "torch.optim.Adam.load_state_dict", "float", "torch.optim.lr_scheduler.LambdaLR.get_lr", "utils.compute_loss", "torch.cat.sum", "torch.cat.mean", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.cat.backward", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.lr_scheduler.LambdaLR.step", "len", "torch.no_grad", "evaluation.evaluation.evaluate", "print", "os.path.join", "os.path.join", "os.path.exists", "evaluation.compute_eval_metrics.compute_metric", "print", "print", "print", "torch.optim.lr_scheduler.ExponentialLR.get_lr", "utils.compute_loss", "torch.cat", "torch.cat.item", "len", "booster.utils.EMA.update", "evaluation.evaluation.generate_hypothesis", "evaluation.compute_eval_metrics.compute_metric", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "print", "print", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "torch.save", "pickle.load", "evaluation.evaluation.generate_hypothesis", "print", "utils.get_next_batch", "torch.save", "open", "open", "pickle.dump", "len", "loss_bt.sum", "torch.save", "model_to_evaluate.state_dict", "os.path.join", "model_to_evaluate.state_dict", "model.Model.state_dict", "torch.optim.Adam.state_dict", "model_to_evaluate.state_dict", "os.path.join", "torch.optim.Adam.state_dict"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.train.load_dataset", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.train.print_dataset_length_info", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.generate_model_name", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.train.train", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.compute_loss", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.evaluation.evaluate", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_eval_metrics.compute_metric", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.compute_loss", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.evaluation.generate_hypothesis", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_eval_metrics.compute_metric", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.evaluation.generate_hypothesis", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.get_next_batch"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "pretrained_weights", "=", "\"bert-base-uncased\"", "\n", "model", "=", "Model", "(", "pretrained_weights", ",", "args", ")", "\n", "params_except_encoder", "=", "[", "]", "\n", "for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "name", ".", "startswith", "(", "'encoder.'", ")", ":", "\n", "            ", "params_except_encoder", ".", "append", "(", "p", ")", "\n", "\n", "", "", "decoder_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "lr", "=", "args", ".", "decoder_lr", ",", "params", "=", "params_except_encoder", ")", "\n", "encoder_optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "lr", "=", "args", ".", "encoder_lr", ",", "params", "=", "model", ".", "encoder", ".", "parameters", "(", ")", ")", "\n", "encoder_scheduler", "=", "ExponentialLR", "(", "encoder_optimizer", ",", "gamma", "=", "1", ")", "\n", "decoder_scheduler", "=", "LambdaLR", "(", "decoder_optimizer", ",", "lr_lambda", "=", "lambda", "step", ":", "(", "step", "+", "1", ")", "/", "args", ".", "warmup_steps", "if", "step", "<", "args", ".", "warmup_steps", "else", "args", ".", "lr_decay", "**", "(", "step", "-", "args", ".", "warmup_steps", ")", ")", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "if", "args", ".", "EMA", ":", "\n", "        ", "ema_model", "=", "EMA", "(", "model", ",", "args", ".", "ema_param", ")", "\n", "", "train_dataset", ",", "valid_dataset", ",", "test_dataset", "=", "load_dataset", "(", "args", ",", "model", ".", "tokenizer", ")", "\n", "print_dataset_length_info", "(", "train_dataset", ")", "\n", "if", "args", ".", "small_dataset", ":", "\n", "        ", "train_dataset", "=", "train_dataset", "[", ":", "round", "(", "len", "(", "train_dataset", ")", "*", "args", ".", "percentage", "/", "100", ")", "]", "\n", "", "else", ":", "\n", "        ", "args", ".", "percentage", "=", "100", "\n", "", "if", "args", ".", "copy_bt", ":", "\n", "        ", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "//", "(", "1", "+", "args", ".", "monolingual_ratio", ")", ")", "\n", "", "print", "(", "\"Effective batch size\"", ",", "args", ".", "batch_size", ")", "\n", "model_name", "=", "generate_model_name", "(", "args", ")", "\n", "print", "(", "\"model name\"", ",", "model_name", ")", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "args", ".", "save_dir", "+", "'/logs/{}/'", ".", "format", "(", "model_name", ")", "+", "model_name", "[", ":", "-", "4", "]", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "preprocess_batch", ")", "\n", "valid_loader", "=", "DataLoader", "(", "valid_dataset", ",", "batch_size", "=", "args", ".", "valid_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "preprocess_batch", ")", "\n", "if", "args", ".", "copy_bt", ":", "\n", "        ", "copy_dataset", "=", "dataset_classes", "[", "args", ".", "dataset_name", "]", "(", "name", "=", "args", ".", "dataset_name", ",", "split", "=", "'train'", ",", "tokenizer", "=", "model", ".", "tokenizer", ",", "args", "=", "args", ",", "monolingual", "=", "True", ")", "\n", "copy_loader", "=", "DataLoader", "(", "copy_dataset", ",", "batch_size", "=", "int", "(", "args", ".", "batch_size", "*", "args", ".", "monolingual_ratio", ")", ",", "\n", "shuffle", "=", "True", ",", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "preprocess_batch", ")", "\n", "copy_iter", "=", "iter", "(", "copy_loader", ")", "\n", "print", "(", "'copy dataset size'", ",", "len", "(", "copy_dataset", ")", ")", "\n", "\n", "", "print", "(", "'train set size:'", ",", "len", "(", "train_dataset", ")", ")", "\n", "print", "(", "'dev set size'", ",", "len", "(", "valid_dataset", ")", ")", "\n", "print", "(", "'test set size'", ",", "len", "(", "test_dataset", ")", ")", "\n", "print", "(", "\"example of parallel data\"", ")", "\n", "print", "(", "model", ".", "tokenizer", ".", "decode", "(", "train_dataset", "[", "0", "]", "[", "'intent'", "]", "[", "'input_ids'", "]", ")", ")", "\n", "print", "(", "model", ".", "tokenizer", ".", "decode", "(", "train_dataset", "[", "0", "]", "[", "'snippet'", "]", "[", "'input_ids'", "]", ")", ")", "\n", "if", "args", ".", "copy_bt", ":", "\n", "        ", "print", "(", "len", "(", "copy_dataset", ")", ")", "\n", "print", "(", "\"example of monolingual data\"", ")", "\n", "print", "(", "model", ".", "tokenizer", ".", "decode", "(", "copy_dataset", "[", "0", "]", "[", "'intent'", "]", "[", "'input_ids'", "]", ")", ")", "\n", "print", "(", "model", ".", "tokenizer", ".", "decode", "(", "copy_dataset", "[", "0", "]", "[", "'snippet'", "]", "[", "'input_ids'", "]", ")", ")", "\n", "\n", "", "resume_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'resume.pth'", ")", "\n", "if", "not", "args", ".", "just_evaluate", ":", "\n", "        ", "if", "os", ".", "path", ".", "exists", "(", "resume_file", ")", ":", "\n", "            ", "print", "(", "\"resume is loaded\"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_file", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_to_evaluate'", "]", ")", "\n", "ema_model", "=", "EMA", "(", "model", ",", "args", ".", "ema_param", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_to_train'", "]", ")", "\n", "if", "not", "args", ".", "no_encoder", ":", "\n", "                ", "encoder_optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'enc_optimizer_state'", "]", ")", "\n", "", "decoder_optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'dec_optimizer_state'", "]", ")", "\n", "best_criteria", "=", "checkpoint", "[", "'best_criteria'", "]", "\n", "begin_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "early_stopping", "=", "checkpoint", "[", "'early_stopping'", "]", "\n", "", "else", ":", "\n", "            ", "best_criteria", "=", "-", "float", "(", "'inf'", ")", "\n", "begin_epoch", "=", "0", "\n", "early_stopping", "=", "0", "\n", "\n", "", "for", "epoch", "in", "range", "(", "begin_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "            ", "averaged_loss", "=", "0", "\n", "print", "(", "'Epoch :'", ",", "epoch", "+", "1", ",", "\"Early Stopping:\"", ",", "early_stopping", ",", "\n", "\"encoder lr: \"", ",", "encoder_scheduler", ".", "get_lr", "(", ")", "if", "not", "args", ".", "no_encoder", "else", "\"no encoder\"", ",", "\n", "\"decoder_lr\"", ",", "decoder_scheduler", ".", "get_lr", "(", ")", ")", "\n", "model", ".", "train", "(", ")", "\n", "for", "data", "in", "tqdm", "(", "train_loader", ")", ":", "\n", "                ", "loss", ",", "logits", ",", "choices", "=", "compute_loss", "(", "args", ",", "data", ",", "model", ")", "\n", "loss", "=", "loss", ".", "sum", "(", "1", ")", "\n", "if", "args", ".", "copy_bt", ":", "\n", "                    ", "copy_data", "=", "None", "\n", "if", "args", ".", "copy_bt", ":", "\n", "                        ", "copy_data", ",", "copy_iter", "=", "get_next_batch", "(", "iterator", "=", "copy_iter", ",", "loader", "=", "copy_loader", ")", "\n", "copy_data", "[", "'source'", "]", "=", "copy_data", "[", "'target'", "]", "\n", "", "loss_bt", ",", "_", ",", "_", "=", "compute_loss", "(", "args", ",", "copy_data", ",", "model", ",", "no_context_update", "=", "args", ".", "no_encoder_update_for_bt", ")", "\n", "loss", "=", "torch", ".", "cat", "(", "[", "loss", ",", "loss_bt", ".", "sum", "(", "1", ")", "]", ",", "dim", "=", "0", ")", "\n", "if", "args", ".", "copy_bt", ":", "\n", "                        ", "del", "copy_data", "\n", "", "", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "averaged_loss", "+=", "loss", ".", "item", "(", ")", "*", "len", "(", "data", "[", "'source'", "]", "[", "'input_ids'", "]", ")", "\n", "encoder_optimizer", ".", "zero_grad", "(", ")", "\n", "decoder_optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "encoder_optimizer", ".", "step", "(", ")", "\n", "decoder_optimizer", ".", "step", "(", ")", "\n", "if", "args", ".", "EMA", ":", "\n", "                    ", "ema_model", ".", "update", "(", ")", "\n", "", "decoder_scheduler", ".", "step", "(", ")", "\n", "", "encoder_scheduler", ".", "step", "(", ")", "\n", "averaged_loss", "=", "averaged_loss", "/", "len", "(", "train_loader", ".", "dataset", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/train'", ",", "averaged_loss", ",", "epoch", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "model_to_evaluate", "=", "ema_model", ".", "model", "if", "args", ".", "EMA", "else", "model", "\n", "validation_loss", "=", "evaluate", "(", "args", ",", "valid_loader", ",", "model_to_evaluate", ",", "split", "=", "'dev'", ")", "\n", "print", "(", "'validation loss'", ",", "validation_loss", ")", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "eval_interval", "==", "0", ":", "\n", "                    ", "greedy_hype", "=", "generate_hypothesis", "(", "args", ",", "valid_loader", ",", "model_to_evaluate", ",", "search", "=", "'greedy'", ")", "\n", "metrics", "=", "compute_metric", "(", "greedy_hype", ",", "args", ".", "dataset_name", ",", "split", "=", "'dev'", ",", "tokenizer", "=", "model", ".", "tokenizer", ",", "args", "=", "args", ")", "\n", "writer", ".", "add_scalar", "(", "'Loss/dev'", ",", "validation_loss", ",", "epoch", ")", "\n", "print", "(", "'exact match accuracy'", ",", "metrics", "[", "'exact_match'", "]", ")", "\n", "print", "(", "'bleu:'", ",", "metrics", "[", "'bleu'", "]", ")", "\n", "criteria", "=", "metrics", "[", "'exec_acc'", "]", "if", "args", ".", "dataset_name", "==", "'wikisql'", "else", "metrics", "[", "'bleu'", "]", "if", "(", "args", ".", "dataset_name", "==", "'conala'", "or", "args", ".", "dataset_name", "==", "'magic'", ")", "else", "metrics", "[", "'exact_match'", "]", "\n", "print", "(", "\"criteria\"", ",", "criteria", ")", "\n", "writer", ".", "add_scalar", "(", "'evaluation metric'", ",", "criteria", ",", "epoch", ")", "\n", "if", "args", ".", "early_stopping", ":", "\n", "                        ", "if", "best_criteria", "<", "criteria", ":", "\n", "                            ", "best_criteria", "=", "criteria", "\n", "torch", ".", "save", "(", "model_to_evaluate", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "model_name", ")", ")", "\n", "early_stopping", "=", "0", "\n", "", "else", ":", "\n", "                            ", "early_stopping", "+=", "1", "\n", "", "if", "early_stopping", ">=", "args", ".", "early_stopping_epochs", ":", "\n", "                            ", "break", "\n", "", "", "else", ":", "\n", "                        ", "torch", ".", "save", "(", "model_to_evaluate", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "model_name", ")", ")", "\n", "", "print", "(", "\"resume.pth is saved\"", ")", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'model_to_evaluate'", ":", "model_to_evaluate", ".", "state_dict", "(", ")", ",", "\n", "'model_to_train'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'enc_optimizer_state'", ":", "encoder_optimizer", ".", "state_dict", "(", ")", "if", "not", "args", ".", "no_encoder", "else", "None", ",", "\n", "'dec_optimizer_state'", ":", "decoder_optimizer", ".", "state_dict", "(", ")", ",", "\n", "'best_criteria'", ":", "best_criteria", ",", "\n", "'early_stopping'", ":", "early_stopping", "\n", "}", ",", "resume_file", ")", "\n", "\n", "\n", "", "", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "model_name", ")", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "valid_loader", "=", "DataLoader", "(", "valid_dataset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "preprocess_batch", ")", "\n", "test_loader", "=", "DataLoader", "(", "test_dataset", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "preprocess_batch", ")", "\n", "\n", "loader", "=", "{", "'train'", ":", "train_loader", ",", "'dev'", ":", "valid_loader", ",", "'test'", ":", "test_loader", "}", "\n", "for", "split", "in", "[", "'dev'", ",", "'test'", "]", ":", "\n", "            ", "for", "search", "in", "[", "'greedy'", ",", "'beam'", "]", ":", "\n", "                ", "file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "'hype_{}_{}.pt'", ".", "format", "(", "split", ",", "search", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "file", ")", ":", "\n", "                    ", "generated_set", "=", "pickle", ".", "load", "(", "open", "(", "file", ",", "'rb'", ")", ")", "\n", "", "else", ":", "\n", "                    ", "generated_set", "=", "generate_hypothesis", "(", "args", ",", "loader", "[", "split", "]", ",", "model", ",", "search", "=", "search", ")", "\n", "with", "open", "(", "file", ",", "'wb'", ")", "as", "f", ":", "\n", "                        ", "pickle", ".", "dump", "(", "generated_set", ",", "f", ")", "\n", "", "", "metrics", "=", "compute_metric", "(", "generated_set", ",", "args", ".", "dataset_name", ",", "split", "=", "split", ",", "tokenizer", "=", "model", ".", "tokenizer", ",", "args", "=", "args", ")", "\n", "print", "(", "'{} {} accuracy'", ".", "format", "(", "split", ",", "search", ")", ",", "metrics", "[", "'exact_match'", "]", ")", "\n", "if", "search", "==", "'beam'", ":", "\n", "                    ", "print", "(", "'{} {} oracle accuracy'", ".", "format", "(", "split", ",", "search", ")", ",", "metrics", "[", "'exact_oracle_match'", "]", ")", "\n", "", "print", "(", "'{} {} bleu score'", ".", "format", "(", "split", ",", "search", ")", ",", "metrics", "[", "'bleu'", "]", ")", "\n", "print", "(", "\"{} {} exececution accuracy\"", ".", "format", "(", "split", ",", "search", ")", ",", "metrics", "[", "'exec_acc'", "]", ")", "\n", "\n", "", "", "", "writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.nn.MyTransformerDecoder.__init__": [[10, 12], ["torch.nn.modules.transformer.TransformerDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "decoder_layer", ",", "num_layers", ",", "norm", "=", "None", ")", ":", "\n", "        ", "super", "(", "MyTransformerDecoder", ",", "self", ")", ".", "__init__", "(", "decoder_layer", ",", "num_layers", ",", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.nn.MyTransformerDecoder.forward": [[13, 29], ["range", "nn.MyTransformerDecoder.norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "memory", ",", "tgt_mask", "=", "None", ",", "\n", "memory_mask", "=", "None", ",", "tgt_key_padding_mask", "=", "None", ",", "\n", "memory_key_padding_mask", "=", "None", ",", "no_context_update", "=", "False", ",", "no_memory", "=", "False", ")", ":", "\n", "        ", "output", "=", "tgt", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "output", "=", "self", ".", "layers", "[", "i", "]", "(", "output", ",", "memory", ",", "tgt_mask", "=", "tgt_mask", ",", "\n", "memory_mask", "=", "memory_mask", ",", "\n", "tgt_key_padding_mask", "=", "tgt_key_padding_mask", ",", "\n", "memory_key_padding_mask", "=", "memory_key_padding_mask", ",", "\n", "no_context_update", "=", "no_context_update", ",", "no_memory", "=", "no_memory", ")", "\n", "\n", "", "if", "self", ".", "norm", ":", "\n", "            ", "output", "=", "self", ".", "norm", "(", "output", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.nn.MyTransformerDecoderLayer.__init__": [[32, 36], ["torch.nn.modules.transformer.TransformerDecoderLayer.__init__"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "nhead", ",", "dim_feedforward", "=", "2048", ",", "dropout", "=", "0.1", ",", "activation", "=", "\"relu\"", ")", ":", "\n", "        ", "super", "(", "MyTransformerDecoderLayer", ",", "self", ")", ".", "__init__", "(", "d_model", "=", "d_model", ",", "nhead", "=", "nhead", ",", "\n", "dim_feedforward", "=", "dim_feedforward", ",", "dropout", "=", "dropout", ",", "\n", "activation", "=", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.nn.MyTransformerDecoderLayer.forward": [[37, 63], ["nn.MyTransformerDecoderLayer.norm1", "hasattr", "nn.MyTransformerDecoderLayer.norm3", "nn.MyTransformerDecoderLayer.self_attn", "nn.MyTransformerDecoderLayer.dropout1", "nn.MyTransformerDecoderLayer.norm2", "nn.MyTransformerDecoderLayer.linear2", "nn.MyTransformerDecoderLayer.linear2", "nn.MyTransformerDecoderLayer.dropout3", "nn.MyTransformerDecoderLayer.dropout2", "nn.MyTransformerDecoderLayer.dropout", "nn.MyTransformerDecoderLayer.dropout", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "nn.MyTransformerDecoderLayer.multihead_attn", "nn.MyTransformerDecoderLayer.activation", "torch.relu", "torch.relu", "nn.MyTransformerDecoderLayer.multihead_attn", "nn.MyTransformerDecoderLayer.linear1", "nn.MyTransformerDecoderLayer.linear1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tgt", ",", "memory", "=", "None", ",", "tgt_mask", "=", "None", ",", "memory_mask", "=", "None", ",", "\n", "tgt_key_padding_mask", "=", "None", ",", "memory_key_padding_mask", "=", "None", ",", "\n", "no_context_update", "=", "False", ",", "no_memory", "=", "False", ")", ":", "\n", "        ", "tgt2", "=", "self", ".", "self_attn", "(", "tgt", ",", "tgt", ",", "tgt", ",", "attn_mask", "=", "tgt_mask", ",", "\n", "key_padding_mask", "=", "tgt_key_padding_mask", ")", "[", "0", "]", "\n", "tgt", "=", "tgt", "+", "self", ".", "dropout1", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm1", "(", "tgt", ")", "\n", "\n", "if", "not", "no_memory", ":", "\n", "            ", "if", "no_context_update", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "tgt2", "=", "self", ".", "multihead_attn", "(", "tgt", ",", "memory", ",", "memory", ",", "attn_mask", "=", "memory_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ")", "[", "0", "]", "\n", "", "", "else", ":", "\n", "                ", "tgt2", "=", "self", ".", "multihead_attn", "(", "tgt", ",", "memory", ",", "memory", ",", "attn_mask", "=", "memory_mask", ",", "\n", "key_padding_mask", "=", "memory_key_padding_mask", ")", "[", "0", "]", "\n", "", "tgt", "=", "tgt", "+", "self", ".", "dropout2", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm2", "(", "tgt", ")", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "\"activation\"", ")", ":", "\n", "            ", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "self", ".", "activation", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "", "else", ":", "# for backward compatibility", "\n", "            ", "tgt2", "=", "self", ".", "linear2", "(", "self", ".", "dropout", "(", "F", ".", "relu", "(", "self", ".", "linear1", "(", "tgt", ")", ")", ")", ")", "\n", "", "tgt", "=", "tgt", "+", "self", ".", "dropout3", "(", "tgt2", ")", "\n", "tgt", "=", "self", ".", "norm3", "(", "tgt", ")", "\n", "return", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.nn.generate_square_subsequent_mask": [[65, 69], ["mask.float().masked_fill().masked_fill.float().masked_fill().masked_fill", "float", "mask.float().masked_fill().masked_fill.float().masked_fill", "torch.triu", "torch.triu", "float", "torch.ones", "torch.ones", "mask.float().masked_fill().masked_fill.float"], "function", ["None"], ["", "", "def", "generate_square_subsequent_mask", "(", "sz", ":", "int", ")", ":", "\n", "    ", "mask", "=", "(", "torch", ".", "triu", "(", "torch", ".", "ones", "(", "sz", ",", "sz", ")", ")", "==", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "mask", "=", "mask", ".", "float", "(", ")", ".", "masked_fill", "(", "mask", "==", "0", ",", "float", "(", "'-inf'", ")", ")", ".", "masked_fill", "(", "mask", "==", "1", ",", "float", "(", "0.0", ")", ")", "\n", "return", "mask", "\n", "", ""]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.model.Model.__init__": [[15, 37], ["torch.Module.__init__", "transformers.AutoModel.from_pretrained", "transformers.AutoTokenizer.from_pretrained", "model.MyEmbedding", "print", "torch.MyTransformerDecoderLayer", "torch.MyTransformerDecoder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "transformers.BertModel", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.Tanh", "torch.Tanh", "torch.GELU", "torch.GELU", "torch.Tanh", "torch.Tanh", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "pretrained_weights", ",", "args", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "encoder", "=", "AutoModel", ".", "from_pretrained", "(", "pretrained_weights", ")", "\n", "self", ".", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "pretrained_weights", ")", "\n", "self", ".", "myembedding", "=", "MyEmbedding", "(", "self", ".", "encoder", ".", "embeddings", ")", "\n", "config", "=", "self", ".", "encoder", ".", "config", "\n", "if", "args", ".", "random_encoder", ":", "\n", "            ", "self", ".", "encoder", "=", "BertModel", "(", "config", ")", "\n", "", "elif", "args", ".", "no_encoder", ":", "\n", "            ", "self", ".", "encoder", "=", "None", "\n", "", "print", "(", "config", ")", "\n", "decoder_layer", "=", "MyTransformerDecoderLayer", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ",", "\n", "config", ".", "intermediate_size", ",", "dropout", "=", "0.1", ",", "activation", "=", "'gelu'", ")", "\n", "self", ".", "decoder", "=", "MyTransformerDecoder", "(", "decoder_layer", ",", "num_layers", "=", "args", ".", "decoder_layers", ",", "norm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ")", ")", "\n", "self", ".", "device", "=", "args", ".", "device", "\n", "self", ".", "copy_attention", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "if", "not", "args", ".", "use_gelu", "else", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", ")", "\n", "self", ".", "linear_before_softmax", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "if", "not", "args", ".", "use_gelu", "else", "nn", ".", "GELU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.model.Model.encode": [[38, 49], ["model.Model.encoder", "model.Model.extra_encoder", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "source", ",", "no_context_update", ")", ":", "\n", "        ", "encoder_output", "=", "self", ".", "encoder", "(", "\n", "input_ids", "=", "source", "[", "'input_ids'", "]", "if", "(", "not", "(", "self", ".", "args", ".", "dummy_source", "and", "no_context_update", ")", ")", "else", "source", "[", "'input_ids'", "]", "*", "0", ",", "\n", "attention_mask", "=", "source", "[", "'attention_mask'", "]", ",", "\n", "token_type_ids", "=", "source", "[", "'token_type_ids'", "]", "if", "self", ".", "args", ".", "translate_backward", "is", "False", "else", "None", ")", "[", "0", "]", "\n", "if", "self", ".", "args", ".", "extra_encoder", ":", "\n", "            ", "encoder_output", "=", "self", ".", "extra_encoder", "(", "src", "=", "torch", ".", "transpose", "(", "encoder_output", ",", "0", ",", "1", ")", ",", "\n", "mask", "=", "None", ",", "\n", "src_key_padding_mask", "=", "(", "source", "[", "'attention_mask'", "]", "==", "0", ")", ")", "\n", "encoder_output", "=", "torch", ".", "transpose", "(", "encoder_output", ",", "0", ",", "1", ")", "\n", "", "return", "encoder_output", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.model.Model.forward": [[50, 107], ["model.Model.myembedding", "model.Model.decoder", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "model.Model.linear_before_softmax", "value.to", "value.to", "data[].to", "model.Model.myembedding.pembedding.word_embeddings", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.matmul.masked_fill_", "torch.matmul.masked_fill_", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "model.Model.copy_attention", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "copy_attention.masked_fill_.masked_fill_.masked_fill_", "torch.matmul.scatter_add_", "torch.matmul.scatter_add_", "data[].items", "data[].items", "value.to", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.generate_square_subsequent_mask().to", "float", "torch.t", "torch.t", "torch.t", "torch.t", "data[].items", "model.Model.encode", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "index.unsqueeze().expand", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.Model.encode", "torch.generate_square_subsequent_mask", "index.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.model.Model.encode", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.model.Model.encode", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.nn.generate_square_subsequent_mask"], ["", "def", "forward", "(", "self", ",", "data", ",", "target_input", "=", "None", ",", "no_encoder", "=", "None", ",", "no_context_update", "=", "False", ",", "return_encoder_output", "=", "False", ",", "encoder_output_saved", "=", "None", ")", ":", "\n", "        ", "source", "=", "{", "key", ":", "value", ".", "to", "(", "self", ".", "device", ")", "for", "key", ",", "value", "in", "data", "[", "'source'", "]", ".", "items", "(", ")", "}", "\n", "target", "=", "{", "key", ":", "value", ".", "to", "(", "self", ".", "device", ")", "for", "key", ",", "value", "in", "data", "[", "'target'", "]", ".", "items", "(", ")", "}", "\n", "label", ",", "choices", "=", "None", ",", "None", "\n", "if", "self", ".", "args", ".", "pointer_network", ":", "\n", "            ", "choices", "=", "{", "key", ":", "value", ".", "to", "(", "self", ".", "device", ")", "for", "key", ",", "value", "in", "data", "[", "'choices'", "]", ".", "items", "(", ")", "}", "\n", "label", "=", "data", "[", "'label'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "", "if", "target_input", "is", "not", "None", ":", "\n", "            ", "target", "=", "target_input", "\n", "", "if", "encoder_output_saved", "is", "not", "None", ":", "\n", "            ", "encoder_output", "=", "encoder_output_saved", "\n", "", "elif", "not", "self", ".", "args", ".", "no_encoder", ":", "\n", "            ", "if", "no_context_update", ":", "\n", "                ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "encoder_output", "=", "self", ".", "encode", "(", "source", ",", "no_context_update", ")", "\n", "", "", "else", ":", "\n", "                ", "encoder_output", "=", "self", ".", "encode", "(", "source", ",", "no_context_update", ")", "# if not self.args.translate_backward else None)[0]", "\n", "# encoder_output *= 0", "\n", "\n", "", "", "if", "return_encoder_output", ":", "\n", "            ", "return", "encoder_output", "\n", "\n", "", "target_embedding", "=", "self", ".", "myembedding", "(", "target", "[", "'input_ids'", "]", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "target_length", "=", "target", "[", "'input_ids'", "]", ".", "shape", "[", "1", "]", "\n", "prediction", "=", "self", ".", "decoder", "(", "tgt", "=", "torch", ".", "transpose", "(", "target_embedding", ",", "0", ",", "1", ")", ",", "\n", "memory", "=", "torch", ".", "transpose", "(", "encoder_output", ",", "0", ",", "1", ")", "if", "not", "self", ".", "args", ".", "no_encoder", "else", "None", ",", "\n", "tgt_mask", "=", "generate_square_subsequent_mask", "(", "target_length", "-", "1", ")", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "memory_mask", "=", "None", ",", "\n", "tgt_key_padding_mask", "=", "target", "[", "'attention_mask'", "]", "[", ":", ",", ":", "-", "1", "]", "==", "0", ",", "\n", "memory_key_padding_mask", "=", "(", "source", "[", "'attention_mask'", "]", "==", "0", ")", "if", "not", "self", ".", "args", ".", "no_encoder", "else", "None", ",", "\n", "no_memory", "=", "self", ".", "args", ".", "no_encoder", ",", "\n", "no_context_update", "=", "False", "\n", ")", "\n", "prediction", "=", "torch", ".", "transpose", "(", "prediction", ",", "0", ",", "1", ")", "\n", "generation_prediction", "=", "self", ".", "linear_before_softmax", "(", "prediction", ")", "\n", "\n", "if", "self", ".", "args", ".", "pointer_network", ":", "\n", "            ", "choices_emb", "=", "self", ".", "myembedding", ".", "pembedding", ".", "word_embeddings", "(", "choices", "[", "'input_ids'", "]", ")", "\n", "logits", "=", "torch", ".", "einsum", "(", "'bid, bjd->bij'", ",", "prediction", ",", "choices_emb", ")", "\n", "logits", "=", "logits", ".", "masked_fill_", "(", "\n", "(", "choices", "[", "'attention_mask'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "logits", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "float", "(", "'-inf'", ")", ")", "\n", "", "else", ":", "\n", "            ", "logits", "=", "torch", ".", "matmul", "(", "generation_prediction", ",", "torch", ".", "t", "(", "self", ".", "myembedding", ".", "pembedding", ".", "word_embeddings", ".", "weight", ")", ")", "\n", "\n", "", "if", "not", "self", ".", "args", ".", "no_encoder", "and", "self", ".", "args", ".", "use_copy_attention", ":", "\n", "            ", "copy_prediction", "=", "self", ".", "copy_attention", "(", "prediction", ")", "\n", "copy_attention", "=", "torch", ".", "einsum", "(", "'bid, bjd->bij'", ",", "copy_prediction", ",", "encoder_output", ")", "\n", "if", "self", ".", "args", ".", "pointer_network", ":", "\n", "                ", "index", "=", "source", "[", "'source_label'", "]", "\n", "", "else", ":", "\n", "                ", "index", "=", "source", "[", "'input_ids'", "]", "\n", "", "copy_attention", "=", "copy_attention", ".", "masked_fill_", "(", "\n", "(", "source", "[", "'attention_mask'", "]", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "copy_attention", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "0", ")", "\n", "logits", ".", "scatter_add_", "(", "index", "=", "index", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "logits", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "\n", "src", "=", "copy_attention", ",", "dim", "=", "2", ")", "\n", "\n", "", "return", "logits", ",", "target", ",", "choices", ",", "label", ",", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.model.MyEmbedding.__init__": [[110, 113], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ")", ":", "\n", "        ", "super", "(", "MyEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pembedding", "=", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.model.MyEmbedding.forward": [[114, 133], ["model.MyEmbedding.pembedding.position_embeddings", "model.MyEmbedding.pembedding.LayerNorm", "model.MyEmbedding.pembedding.dropout", "input_ids.size", "model.MyEmbedding.pembedding.word_embeddings", "model.MyEmbedding.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", "=", "None", ",", "position_ids", "=", "None", ",", "inputs_embeds", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "is", "not", "None", ":", "\n", "            ", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "", "else", ":", "\n", "            ", "input_shape", "=", "inputs_embeds", ".", "size", "(", ")", "[", ":", "-", "1", "]", "\n", "\n", "", "seq_length", "=", "input_shape", "[", "1", "]", "\n", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "self", ".", "pembedding", ".", "position_ids", "[", ":", ",", ":", "seq_length", "]", "\n", "\n", "", "if", "inputs_embeds", "is", "None", ":", "\n", "            ", "inputs_embeds", "=", "self", ".", "pembedding", ".", "word_embeddings", "(", "input_ids", ")", "\n", "", "position_embeddings", "=", "self", ".", "pembedding", ".", "position_embeddings", "(", "position_ids", ")", "\n", "\n", "embeddings", "=", "inputs_embeds", "+", "position_embeddings", "\n", "embeddings", "=", "self", ".", "pembedding", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "pembedding", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.strip_accents": [[17, 21], ["unicodedata.normalize", "unicodedata.category"], "function", ["None"], ["def", "strip_accents", "(", "text", ")", ":", "\n", "    ", "return", "''", ".", "join", "(", "char", "for", "char", "in", "\n", "unicodedata", ".", "normalize", "(", "'NFKD'", ",", "text", ")", "\n", "if", "unicodedata", ".", "category", "(", "char", ")", "!=", "'Mn'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.my_annotate": [[23, 59], ["range", "len", "len", "gloss.append", "after.append", "tokens.append", "utils.strip_accents", "len", "gloss.append", "after.append", "tokens.append", "tokens.append", "gloss.append", "word.lower", "utils.strip_accents", "len", "gloss.append", "after.append", "tokens.append", "after.append", "after.append", "word.lower", "utils.strip_accents", "word.lower", "len"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.strip_accents", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.strip_accents", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.strip_accents", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower"], ["", "def", "my_annotate", "(", "sentence", ")", ":", "\n", "    ", "gloss", "=", "[", "]", "\n", "tokens", "=", "[", "]", "\n", "after", "=", "[", "]", "\n", "punctuation", "=", "{", "'.'", ",", "','", ",", "\"'\"", ",", "'\"'", ",", "'/'", ",", "'\\\\'", ",", "'&'", ",", "'*'", ",", "'('", ",", "')'", ",", "'%'", ",", "'$'", ",", "'\u20ac'", ",", "'\u00a3'", ",", "'\uffe5'", ",", "'\uffe5'", ",", "'\u2019'", ",", "'\u2013'", ",", "'\u00b7'", ",", "'\u2014'", ",", "\n", "'-'", ",", "'#'", ",", "'!'", ",", "'?'", ",", "'+'", ",", "'^'", ",", "'='", ",", "':'", ",", "';'", ",", "'{'", ",", "'}'", ",", "'['", ",", "']'", ",", "'_'", "}", "\n", "word", "=", "''", "\n", "for", "ind", "in", "range", "(", "len", "(", "sentence", ")", ")", ":", "\n", "        ", "s", "=", "sentence", "[", "ind", "]", "\n", "if", "s", "==", "' '", ":", "\n", "            ", "if", "len", "(", "word", ")", ">", "0", ":", "\n", "                ", "gloss", ".", "append", "(", "word", ")", "\n", "after", ".", "append", "(", "' '", ")", "\n", "tokens", ".", "append", "(", "strip_accents", "(", "word", ".", "lower", "(", ")", ")", ")", "\n", "word", "=", "''", "\n", "", "else", ":", "\n", "                ", "continue", "\n", "", "", "elif", "s", "in", "punctuation", ":", "\n", "            ", "if", "len", "(", "word", ")", ">", "0", ":", "\n", "                ", "gloss", ".", "append", "(", "word", ")", "\n", "after", ".", "append", "(", "''", ")", "\n", "tokens", ".", "append", "(", "strip_accents", "(", "word", ".", "lower", "(", ")", ")", ")", "\n", "word", "=", "''", "\n", "", "tokens", ".", "append", "(", "s", ")", "\n", "gloss", ".", "append", "(", "s", ")", "\n", "if", "ind", "<", "(", "len", "(", "sentence", ")", "-", "1", ")", "and", "sentence", "[", "ind", "+", "1", "]", "==", "' '", ":", "\n", "                ", "after", ".", "append", "(", "' '", ")", "\n", "", "else", ":", "\n", "                ", "after", ".", "append", "(", "''", ")", "\n", "", "", "else", ":", "\n", "            ", "word", "+=", "s", "\n", "", "", "if", "len", "(", "word", ")", ">", "0", ":", "\n", "        ", "gloss", ".", "append", "(", "word", ")", "\n", "after", ".", "append", "(", "''", ")", "\n", "tokens", ".", "append", "(", "strip_accents", "(", "word", ".", "lower", "(", ")", ")", ")", "\n", "", "return", "{", "'gloss'", ":", "gloss", ",", "'words'", ":", "tokens", ",", "'after'", ":", "after", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.linear_combination": [[61, 63], ["None"], "function", ["None"], ["", "def", "linear_combination", "(", "x", ",", "y", ",", "epsilon", ")", ":", "\n", "    ", "return", "epsilon", "*", "x", "+", "(", "1", "-", "epsilon", ")", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.reduce_loss": [[65, 67], ["loss.mean", "loss.sum"], "function", ["None"], ["", "def", "reduce_loss", "(", "loss", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "return", "loss", ".", "mean", "(", ")", "if", "reduction", "==", "'mean'", "else", "loss", ".", "sum", "(", ")", "if", "reduction", "==", "'sum'", "else", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.LabelSmoothingCrossEntropy": [[69, 82], ["torch.log_softmax", "torch.nll_loss", "F.log_softmax.masked_fill", "utils.linear_combination", "torch.isinf", "torch.isinf", "log_preds.masked_fill.sum", "utils.linear_combination", "choices_attention.sum().float", "F.log_softmax.sum", "preds.size", "choices_attention.sum"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.linear_combination", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.linear_combination"], ["", "def", "LabelSmoothingCrossEntropy", "(", "preds", ",", "target", ",", "args", ",", "choices_attention", "=", "None", ")", ":", "\n", "    ", "log_preds", "=", "F", ".", "log_softmax", "(", "preds", ",", "dim", "=", "1", ")", "\n", "nll", "=", "F", ".", "nll_loss", "(", "log_preds", ",", "target", ",", "reduction", "=", "'none'", ")", "\n", "if", "args", ".", "pointer_network", "and", "choices_attention", "is", "not", "None", ":", "\n", "        ", "coeff", "=", "(", "1", "/", "choices_attention", ".", "sum", "(", "1", ")", ".", "float", "(", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "masked_log_preds", "=", "log_preds", ".", "masked_fill", "(", "torch", ".", "isinf", "(", "log_preds", ")", ",", "value", "=", "0.0", ")", "\n", "loss", "=", "-", "masked_log_preds", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "linear_combination", "(", "loss", "*", "coeff", ",", "nll", ",", "args", ".", "label_smoothing", ")", "\n", "", "elif", "not", "args", ".", "pointer_network", ":", "\n", "        ", "loss", "=", "-", "log_preds", ".", "sum", "(", "dim", "=", "1", ")", "/", "preds", ".", "size", "(", ")", "[", "1", "]", "\n", "return", "linear_combination", "(", "loss", ",", "nll", ",", "args", ".", "label_smoothing", ")", "\n", "", "else", ":", "\n", "        ", "return", "nll", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.compute_loss": [[84, 102], ["model", "labels[].to", "utils.LabelSmoothingCrossEntropy", "torch.transpose", "torch.transpose"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.LabelSmoothingCrossEntropy"], ["", "", "def", "compute_loss", "(", "args", ",", "data", ",", "model", ",", "target_input", "=", "None", ",", "no_context_update", "=", "False", ",", "encoder_output_saved", "=", "None", ")", ":", "\n", "    ", "target_input_model", "=", "None", "\n", "if", "target_input", "is", "not", "None", ":", "\n", "        ", "target_input_model", "=", "target_input", "\n", "", "logits", ",", "target", ",", "choices", ",", "labels", ",", "hidden", "=", "model", "(", "data", ",", "target_input", "=", "target_input_model", ",", "\n", "no_context_update", "=", "no_context_update", ",", "\n", "encoder_output_saved", "=", "encoder_output_saved", ")", "\n", "if", "args", ".", "pointer_network", ":", "\n", "        ", "labels", "=", "labels", "[", ":", ",", "1", ":", "target", "[", "'input_ids'", "]", ".", "shape", "[", "1", "]", "]", ".", "to", "(", "args", ".", "device", ")", "\n", "", "else", ":", "\n", "        ", "labels", "=", "target", "[", "'input_ids'", "]", "[", ":", ",", "1", ":", "]", "\n", "", "if", "target_input", "is", "not", "None", ":", "\n", "        ", "loss", "=", "None", "\n", "", "else", ":", "\n", "        ", "loss", "=", "LabelSmoothingCrossEntropy", "(", "torch", ".", "transpose", "(", "logits", ",", "1", ",", "2", ")", ",", "labels", ",", "args", ",", "\n", "choices", "[", "'attention_mask'", "]", "if", "args", ".", "pointer_network", "else", "None", ")", "\n", "loss", "=", "(", "loss", "*", "target", "[", "'attention_mask'", "]", "[", ":", ",", "1", ":", "]", ")", "\n", "", "return", "loss", ",", "logits", ",", "choices", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.generate_model_name": [[104, 145], ["str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "generate_model_name", "(", "args", ")", ":", "\n", "    ", "model_first_token", "=", "args", ".", "dataset_name", "\n", "extention", "=", "'_LM'", "if", "args", ".", "language_model", "is", "True", "else", "''", "\n", "if", "extention", "==", "'_LM'", ":", "\n", "        ", "if", "args", ".", "python", ":", "\n", "            ", "model_first_token", "=", "'python'", "\n", "", "elif", "args", ".", "dataset_name", "==", "'magic'", ":", "\n", "            ", "model_first_token", "=", "'java'", "\n", "", "else", ":", "\n", "            ", "model_first_token", "=", "'sql'", "\n", "\n", "", "", "model_name", "=", "'{}_model{}{}_combined_training={}_seed={}{}{}{}{}.pth'", ".", "format", "(", "\n", "model_first_token", ",", "\n", "extention", ",", "\n", "str", "(", "args", ".", "percentage", ")", "if", "args", ".", "small_dataset", "is", "True", "else", "''", ",", "\n", "args", ".", "combined_training", ",", "\n", "args", ".", "seed", ",", "\n", "'_beta='", "+", "str", "(", "args", ".", "beta", ")", "if", "args", ".", "combined_training", "else", "''", ",", "\n", "'_tmp='", "+", "str", "(", "args", ".", "temp", ")", "if", "args", ".", "combined_training", "else", "''", ",", "\n", "'_trns_back='", "+", "str", "(", "args", ".", "translate_backward", ")", ",", "\n", "'_use_backtr='", "+", "str", "(", "args", ".", "use_back_translation", ")", "+", "\n", "'_lmd='", "+", "str", "(", "args", ".", "lambd", ")", "+", "\n", "'_cp_bt='", "+", "str", "(", "args", ".", "copy_bt", ")", "+", "\n", "'_add_no='", "+", "str", "(", "args", ".", "add_noise", ")", "+", "\n", "'_no_en_upd='", "+", "str", "(", "args", ".", "no_encoder_update_for_bt", ")", "+", "\n", "'_ratio='", "+", "str", "(", "args", ".", "monolingual_ratio", ")", "+", "\n", "'_ext_li='", "+", "str", "(", "args", ".", "extra_linear", ")", "+", "\n", "'_ext_cp_li='", "+", "str", "(", "args", ".", "extra_copy_attention_linear", ")", "+", "\n", "'_cp_att='", "+", "str", "(", "args", ".", "use_copy_attention", ")", "+", "\n", "'_EMA='", "+", "str", "(", "args", ".", "EMA", ")", "[", "0", "]", "+", "\n", "'_rnd_enc='", "+", "str", "(", "args", ".", "random_encoder", ")", "[", "0", "]", "+", "\n", "'_de_lr='", "+", "str", "(", "args", ".", "decoder_lr", ")", "+", "\n", "'_mmp='", "+", "str", "(", "args", ".", "mono_min_prob", ")", "+", "\n", "'_saug='", "+", "str", "(", "args", ".", "sql_augmentation", ")", "[", "0", "]", "+", "\n", "'_dums='", "+", "str", "(", "args", ".", "dummy_source", ")", "[", "0", "]", "+", "\n", "'_dumQ='", "+", "str", "(", "args", ".", "dummy_question", ")", "[", "0", "]", "+", "\n", "'_rsr='", "+", "str", "(", "args", ".", "use_real_source", ")", "[", "0", "]", "+", "\n", "'_fc='", "+", "str", "(", "args", ".", "fixed_copy", ")", "[", "0", "]", "+", "\n", "'_ccr='", "+", "str", "(", "args", ".", "combine_copy_with_real", ")", "[", "0", "]", "\n", ")", "\n", "return", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.get_next_batch": [[147, 153], ["next", "iter", "next"], "function", ["None"], ["", "def", "get_next_batch", "(", "iterator", ",", "loader", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "next", "(", "iterator", ")", ",", "iterator", "\n", "", "except", "StopIteration", ":", "\n", "        ", "iterator", "=", "iter", "(", "loader", ")", "\n", "return", "next", "(", "iterator", ")", ",", "iterator", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.find_sub_sequence": [[155, 160], ["range", "len", "len", "len"], "function", ["None"], ["", "", "def", "find_sub_sequence", "(", "sequence", ",", "query_seq", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "sequence", ")", ")", ":", "\n", "        ", "if", "sequence", "[", "i", ":", "len", "(", "query_seq", ")", "+", "i", "]", "==", "query_seq", ":", "\n", "            ", "return", "i", ",", "len", "(", "query_seq", ")", "+", "i", "\n", "", "", "raise", "IndexError", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.my_detokenize_code": [[162, 187], ["code.replace().replace().replace().replace().replace().split.replace().replace().replace().replace().replace().split", "len", "range", "code.replace().replace().replace().replace().replace().split.replace().replace().replace().replace().replace", "len", "literal.append", "range", "literal.append", "code.replace().replace().replace().replace().replace().split.replace().replace().replace().replace", "len", "len", "code.replace().replace().replace().replace().replace().split.replace().replace().replace", "code.replace().replace().replace().replace().replace().split.replace().replace", "code.replace().replace().replace().replace().replace().split.replace"], "function", ["None"], ["", "def", "my_detokenize_code", "(", "code", ",", "dictionary", ")", ":", "\n", "    ", "code", "=", "code", ".", "replace", "(", "'.'", ",", "' . '", ")", ".", "replace", "(", "','", ",", "' , '", ")", ".", "replace", "(", "\"'\"", ",", "\" ' \"", ")", ".", "replace", "(", "'!'", ",", "' ! '", ")", ".", "replace", "(", "'\"'", ",", "' \" '", ")", ".", "split", "(", ")", "\n", "literal", "=", "[", "]", "\n", "intent", "=", "dictionary", "[", "'words'", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "code", ")", ":", "\n", "        ", "index_i", "=", "-", "1", "\n", "max_length", "=", "1", "\n", "for", "j", "in", "range", "(", "len", "(", "intent", ")", ")", ":", "\n", "            ", "if", "code", "[", "i", "]", "==", "intent", "[", "j", "]", ":", "\n", "                ", "length", "=", "1", "\n", "while", "(", "i", "+", "length", ")", "<", "len", "(", "code", ")", "and", "(", "j", "+", "length", ")", "<", "len", "(", "intent", ")", "and", "code", "[", "i", "+", "length", "]", "==", "intent", "[", "j", "+", "length", "]", ":", "\n", "                    ", "length", "+=", "1", "\n", "", "if", "length", ">", "max_length", ":", "\n", "                    ", "max_length", "=", "length", "\n", "index_i", "=", "j", "\n", "", "", "", "if", "index_i", "==", "-", "1", ":", "\n", "            ", "literal", ".", "append", "(", "code", "[", "i", "]", "+", "' '", ")", "\n", "i", "+=", "1", "\n", "", "else", ":", "\n", "            ", "i", "+=", "max_length", "\n", "for", "j", "in", "range", "(", "max_length", ")", ":", "\n", "                ", "literal", ".", "append", "(", "dictionary", "[", "'gloss'", "]", "[", "index_i", "+", "j", "]", "+", "dictionary", "[", "'after'", "]", "[", "index_i", "+", "j", "]", ")", "\n", "", "", "", "return", "''", ".", "join", "(", "literal", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.my_detokenize": [[189, 217], ["utils.find_sub_sequence", "range", "literal.extend", "IndexError", "zip", "IndexError", "literal.extend", "literal.extend"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.find_sub_sequence"], ["", "def", "my_detokenize", "(", "tokens", ",", "token_dict", ",", "raise_error", "=", "False", ")", ":", "\n", "    ", "literal", "=", "[", "]", "\n", "try", ":", "\n", "        ", "start_idx", ",", "end_idx", "=", "find_sub_sequence", "(", "token_dict", "[", "'words'", "]", ",", "tokens", ")", "\n", "for", "idx", "in", "range", "(", "start_idx", ",", "end_idx", ")", ":", "\n", "            ", "literal", ".", "extend", "(", "[", "token_dict", "[", "'gloss'", "]", "[", "idx", "]", ",", "token_dict", "[", "'after'", "]", "[", "idx", "]", "]", ")", "\n", "\n", "", "val", "=", "''", ".", "join", "(", "literal", ")", ".", "strip", "(", ")", "\n", "", "except", "IndexError", ":", "\n", "        ", "if", "raise_error", ":", "\n", "            ", "raise", "IndexError", "(", "'cannot find the entry for [%s] in the token dict [%s]'", "%", "(", "' '", ".", "join", "(", "tokens", ")", ",", "\n", "' '", ".", "join", "(", "token_dict", "[", "'words'", "]", ")", ")", ")", "\n", "", "for", "token", "in", "tokens", ":", "\n", "            ", "match", "=", "False", "\n", "for", "word", ",", "gloss", ",", "after", "in", "zip", "(", "token_dict", "[", "'words'", "]", ",", "token_dict", "[", "'gloss'", "]", ",", "token_dict", "[", "'after'", "]", ")", ":", "\n", "                ", "if", "token", "==", "word", ":", "\n", "                    ", "literal", ".", "extend", "(", "[", "gloss", ",", "after", "]", ")", "\n", "match", "=", "True", "\n", "break", "\n", "\n", "", "", "if", "not", "match", "and", "raise_error", ":", "\n", "                ", "raise", "IndexError", "(", "'cannot find the entry for [%s] in the token dict [%s]'", "%", "(", "' '", ".", "join", "(", "tokens", ")", ",", "\n", "' '", ".", "join", "(", "\n", "token_dict", "[", "'words'", "]", ")", ")", ")", "\n", "", "if", "not", "match", ":", "\n", "                ", "literal", ".", "extend", "(", "token", ")", "\n", "", "", "val", "=", "''", ".", "join", "(", "literal", ")", ".", "strip", "(", ")", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.detokenize_query": [[219, 236], ["enumerate", "dataset_preprocessing.wikisql.lib.query.Query", "val.split", "utils.my_detokenize", "detokenized_conds.append", "isinstance", "float", "babel.numbers.parse_decimal", "float", "num_re.findall"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.my_detokenize"], ["", "def", "detokenize_query", "(", "query", ",", "tokenized_question", ",", "table_header_type", ")", ":", "\n", "    ", "detokenized_conds", "=", "[", "]", "\n", "for", "i", ",", "(", "col", ",", "op", ",", "val", ")", "in", "enumerate", "(", "query", ".", "conditions", ")", ":", "\n", "        ", "val_tokens", "=", "val", ".", "split", "(", "' '", ")", "\n", "detokenized_cond_val", "=", "my_detokenize", "(", "val_tokens", ",", "tokenized_question", ")", "\n", "\n", "if", "table_header_type", "[", "col", "]", "==", "'real'", "and", "not", "isinstance", "(", "detokenized_cond_val", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "            ", "if", "','", "not", "in", "detokenized_cond_val", ":", "\n", "                ", "try", ":", "\n", "                    ", "detokenized_cond_val", "=", "float", "(", "parse_decimal", "(", "detokenized_cond_val", ")", ")", "\n", "", "except", "NumberFormatError", "as", "e", ":", "\n", "                    ", "try", ":", "\n", "                        ", "detokenized_cond_val", "=", "float", "(", "num_re", ".", "findall", "(", "detokenized_cond_val", ")", "[", "0", "]", ")", "\n", "", "except", ":", "pass", "\n", "", "", "", "detokenized_conds", ".", "append", "(", "(", "col", ",", "op", ",", "detokenized_cond_val", ")", ")", "\n", "", "detokenized_query", "=", "Query", "(", "sel_index", "=", "query", ".", "sel_index", ",", "agg_index", "=", "query", ".", "agg_index", ",", "conditions", "=", "detokenized_conds", ")", "\n", "return", "detokenized_query", "\n", "", ""]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.django.Django.__init__": [[41, 46], ["monolingual_python.MonolingualPython.__init__"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "split", ",", "tokenizer", ",", "args", ",", "monolingual", "=", "False", ")", ":", "\n", "        ", "self", ".", "threshold", "=", "{", "'train'", ":", "100", ",", "\n", "'dev'", ":", "100", ",", "\n", "'test'", ":", "200", "}", "\n", "super", "(", "Django", ",", "self", ")", ".", "__init__", "(", "'django'", ",", "split", ",", "tokenizer", ",", "args", ",", "monolingual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.django.Django.canonicalize_code": [[47, 69], ["p_elif.match", "p_else.match", "p_try.match", "p_decorator.match", "p_except.match", "p_finally.match"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "canonicalize_code", "(", "code", ")", ":", "\n", "        ", "if", "p_elif", ".", "match", "(", "code", ")", ":", "\n", "            ", "code", "=", "'if True: pass\\n'", "+", "code", "\n", "\n", "", "if", "p_else", ".", "match", "(", "code", ")", ":", "\n", "            ", "code", "=", "'if True: pass\\n'", "+", "code", "\n", "\n", "", "if", "p_try", ".", "match", "(", "code", ")", ":", "\n", "            ", "code", "=", "code", "+", "'pass\\nexcept: pass'", "\n", "", "elif", "p_except", ".", "match", "(", "code", ")", ":", "\n", "            ", "code", "=", "'try: pass\\n'", "+", "code", "\n", "", "elif", "p_finally", ".", "match", "(", "code", ")", ":", "\n", "            ", "code", "=", "'try: pass\\n'", "+", "code", "\n", "\n", "", "if", "p_decorator", ".", "match", "(", "code", ")", ":", "\n", "            ", "code", "=", "code", "+", "'\\ndef dummy(): pass'", "\n", "\n", "", "if", "code", "[", "-", "1", "]", "==", "':'", ":", "\n", "            ", "code", "=", "code", "+", "'pass'", "\n", "\n", "", "return", "code", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.django.Django.canonicalize_str_nodes": [[70, 85], ["ast.walk", "isinstance", "list", "slot_map.items", "str_map.items", "str_literal.encode().decode", "str_literal.encode"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.model.Model.encode"], ["", "@", "staticmethod", "\n", "def", "canonicalize_str_nodes", "(", "py_ast", ",", "slot_map", ")", ":", "\n", "        ", "str_map", "=", "{", "x", ":", "slot_name", "for", "slot_name", ",", "x", "in", "list", "(", "slot_map", ".", "items", "(", ")", ")", "}", "\n", "for", "node", "in", "ast", ".", "walk", "(", "py_ast", ")", ":", "\n", "            ", "if", "isinstance", "(", "node", ",", "ast", ".", "Str", ")", ":", "\n", "                ", "str_val", "=", "node", ".", "s", "\n", "\n", "if", "str_val", "in", "str_map", ":", "\n", "                    ", "node", ".", "s", "=", "str_map", "[", "str_val", "]", "\n", "", "else", ":", "\n", "# handle cases like `\\n\\t` in string literals", "\n", "                    ", "for", "str_literal", ",", "slot_id", "in", "str_map", ".", "items", "(", ")", ":", "\n", "                        ", "str_literal_decoded", "=", "str_literal", ".", "encode", "(", ")", ".", "decode", "(", "'unicode_escape'", ")", "\n", "if", "str_literal_decoded", "==", "str_val", ":", "\n", "                            ", "node", ".", "s", "=", "slot_id", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.django.Django.canonicalize_query": [[86, 141], ["dict", "QUOTED_STRING_RE.findall", "set", "dict", "nltk.word_tokenize", "query.replace.replace.replace().replace", "query.replace.replace.replace", "set.add", "new_query_tokens.append", "token.find", "query.replace.replace.replace", "new_query_tokens.extend", "query.replace.replace.replace", "len", "token.replace().split", "token.replace"], "methods", ["None"], ["", "", "", "", "", "", "@", "staticmethod", "\n", "def", "canonicalize_query", "(", "query", ")", ":", "\n", "        ", "\"\"\"\n        canonicalize the query, replace strings to a special place holder\n        \"\"\"", "\n", "str_count", "=", "0", "\n", "str_map", "=", "dict", "(", ")", "\n", "\n", "matches", "=", "QUOTED_STRING_RE", ".", "findall", "(", "query", ")", "\n", "# de-duplicate", "\n", "cur_replaced_strs", "=", "set", "(", ")", "\n", "\n", "slot_map", "=", "dict", "(", ")", "\n", "for", "match", "in", "matches", ":", "\n", "# If one or more groups are present in the pattern,", "\n", "# it returns a list of groups", "\n", "            ", "quote", "=", "match", "[", "0", "]", "\n", "str_literal", "=", "match", "[", "1", "]", "\n", "quoted_str_literal", "=", "quote", "+", "str_literal", "+", "quote", "\n", "\n", "if", "str_literal", "in", "cur_replaced_strs", ":", "\n", "# replace the string with new quote with slot id", "\n", "                ", "query", "=", "query", ".", "replace", "(", "quoted_str_literal", ",", "str_map", "[", "str_literal", "]", ")", "\n", "continue", "\n", "\n", "# FIXME: substitute the ' % s ' with", "\n", "", "if", "str_literal", "in", "[", "'%s'", "]", ":", "\n", "                ", "continue", "\n", "\n", "", "str_repr", "=", "'str%d'", "%", "str_count", "\n", "str_map", "[", "str_literal", "]", "=", "str_repr", "\n", "\n", "slot_map", "[", "str_repr", "]", "=", "str_literal", "\n", "\n", "query", "=", "query", ".", "replace", "(", "quoted_str_literal", ",", "str_repr", ")", "\n", "\n", "str_count", "+=", "1", "\n", "cur_replaced_strs", ".", "add", "(", "str_literal", ")", "\n", "\n", "# tokenize", "\n", "", "query_tokens", "=", "nltk", ".", "word_tokenize", "(", "query", ")", "\n", "\n", "new_query_tokens", "=", "[", "]", "\n", "# break up function calls like foo.bar.func", "\n", "for", "token", "in", "query_tokens", ":", "\n", "            ", "new_query_tokens", ".", "append", "(", "token", ")", "\n", "i", "=", "token", ".", "find", "(", "'.'", ")", "\n", "if", "0", "<", "i", "<", "len", "(", "token", ")", "-", "1", ":", "\n", "                ", "new_tokens", "=", "[", "'['", "]", "+", "token", ".", "replace", "(", "'.'", ",", "' . '", ")", ".", "split", "(", "' '", ")", "+", "[", "']'", "]", "\n", "new_query_tokens", ".", "extend", "(", "new_tokens", ")", "\n", "\n", "", "", "query", "=", "' '", ".", "join", "(", "new_query_tokens", ")", "\n", "query", "=", "query", ".", "replace", "(", "'\\' % s \\''", ",", "'%s'", ")", ".", "replace", "(", "'\\\" %s \\\"'", ",", "'%s'", ")", "\n", "\n", "return", "query", ",", "slot_map", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.django.Django.canonicalize_example": [[142, 154], ["django.Django.canonicalize_query", "canonical_query.split", "django.Django.canonicalize_code", "ast.parse", "django.Django.canonicalize_str_nodes", "astor.to_source"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.django.Django.canonicalize_query", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.canonicalize_code", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.django.Django.canonicalize_str_nodes"], ["", "@", "staticmethod", "\n", "def", "canonicalize_example", "(", "query", ",", "code", ")", ":", "\n", "\n", "        ", "canonical_query", ",", "str_map", "=", "Django", ".", "canonicalize_query", "(", "query", ")", "\n", "query_tokens", "=", "canonical_query", ".", "split", "(", "' '", ")", "\n", "\n", "canonical_code", "=", "Django", ".", "canonicalize_code", "(", "code", ")", "\n", "ast_tree", "=", "ast", ".", "parse", "(", "canonical_code", ")", "\n", "\n", "Django", ".", "canonicalize_str_nodes", "(", "ast_tree", ",", "str_map", ")", "\n", "canonical_code", "=", "astor", ".", "to_source", "(", "ast_tree", ")", "\n", "return", "' '", ".", "join", "(", "query_tokens", ")", ",", "canonical_code", ",", "str_map", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.django.Django._download_dataset": [[155, 158], ["django.Django._download_file", "django.Django._download_file"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset._download_file", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset._download_file"], ["", "def", "_download_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_download_file", "(", "'https://raw.githubusercontent.com/odashi/ase15-django-dataset/master/django/all.anno'", ",", "'all.anno'", ")", "\n", "self", ".", "_download_file", "(", "'https://raw.githubusercontent.com/odashi/ase15-django-dataset/master/django/all.code'", ",", "'all.code'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.django.Django._preprocess": [[159, 185], ["os.path.join", "os.path.exists", "os.path.join", "os.path.join", "open", "open", "code_file.readlines", "anno_file.readlines", "range", "open", "json.dump", "open", "json.load", "len", "annos[].lower().strip", "codes[].lower().strip", "django.Django.canonicalize_example", "utils.my_annotate", "codes[].lower().strip.lower", "json.load.append", "annos[].lower", "codes[].lower", "json.load.append", "json.load.append"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.django.Django.canonicalize_example", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.my_annotate", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower"], ["", "def", "_preprocess", "(", "self", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "json_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'{}.json'", ".", "format", "(", "self", ".", "split", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "json_file", ")", ":", "\n", "            ", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "data", "\n", "", "self", ".", "anno_file_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'all.anno'", ")", "\n", "self", ".", "code_file_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'all.code'", ")", "\n", "with", "open", "(", "self", ".", "anno_file_name", ")", "as", "anno_file", ",", "open", "(", "self", ".", "code_file_name", ")", "as", "code_file", ":", "\n", "            ", "codes", "=", "code_file", ".", "readlines", "(", ")", "\n", "annos", "=", "anno_file", ".", "readlines", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "annos", ")", ")", ":", "\n", "                ", "annot", "=", "annos", "[", "i", "]", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "code", "=", "codes", "[", "i", "]", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "annot", ",", "code", ",", "str_map", "=", "self", ".", "canonicalize_example", "(", "annot", ",", "code", ")", "\n", "instance", "=", "{", "'intent'", ":", "my_annotate", "(", "annot", ")", ",", "'snippet'", ":", "code", ".", "lower", "(", ")", ",", "'slot_map'", ":", "str_map", "}", "\n", "if", "self", ".", "split", "==", "'train'", "and", "0", "<=", "i", "<", "16000", ":", "\n", "                    ", "data", ".", "append", "(", "instance", ")", "\n", "", "elif", "self", ".", "split", "==", "'dev'", "and", "16000", "<=", "i", "<", "17000", ":", "\n", "                    ", "data", ".", "append", "(", "instance", ")", "\n", "", "elif", "self", ".", "split", "==", "'test'", "and", "17000", "<=", "i", ":", "\n", "                    ", "data", ".", "append", "(", "instance", ")", "\n", "", "", "", "with", "open", "(", "json_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "data", ",", "f", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.small_sql.SmallSQL.__init__": [[28, 33], ["monolingual_sql.MonolingualSQL.__init__"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "split", ",", "tokenizer", ",", "args", ",", "monolingual", "=", "False", ")", ":", "\n", "        ", "self", ".", "threshold", "=", "{", "'train'", ":", "300", ",", "\n", "'dev'", ":", "300", ",", "\n", "'test'", ":", "300", "}", "\n", "super", "(", "SmallSQL", ",", "self", ")", ".", "__init__", "(", "name", ",", "split", ",", "tokenizer", ",", "args", ",", "monolingual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.small_sql.SmallSQL._download_dataset": [[34, 41], ["small_sql.SmallSQL._download_file", "small_sql.SmallSQL._download_file"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset._download_file", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset._download_file"], ["", "def", "_download_dataset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "name", "==", "'geography'", ":", "\n", "            ", "self", ".", "_download_file", "(", "url", "=", "'https://raw.githubusercontent.com/jkkummerfeld/text2sql-data/master/data/geography.json'", ",", "\n", "file_name", "=", "'geography.json'", ")", "\n", "", "elif", "self", ".", "name", "==", "'atis'", ":", "\n", "            ", "self", ".", "_download_file", "(", "url", "=", "'https://raw.githubusercontent.com/jkkummerfeld/text2sql-data/master/data/atis.json'", ",", "\n", "file_name", "=", "'atis.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.small_sql.SmallSQL._preprocess": [[42, 73], ["os.path.join", "os.path.exists", "json.loads", "print", "open().read", "len", "open", "json.dump", "open", "json.load", "len", "open", "small_sql.SmallSQL.chunk_sql", "whole_data.append", "os.path.join", "value.join", "value.join", "len", "value.join.split", "value.join.split", "value.join.lower().strip", "value.join.lower().strip", "value.join.lower", "value.join.lower"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.small_sql.SmallSQL.chunk_sql", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower"], ["", "", "def", "_preprocess", "(", "self", ")", ":", "\n", "        ", "json_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'{}.json'", ".", "format", "(", "self", ".", "split", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "json_file", ")", ":", "\n", "            ", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "return", "json", ".", "load", "(", "f", ")", "\n", "", "", "whole_data", "=", "[", "]", "\n", "data", "=", "json", ".", "loads", "(", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'{}.json'", ".", "format", "(", "self", ".", "name", ")", ")", ")", ".", "read", "(", ")", ")", "\n", "dataset_size", "=", "0", "\n", "for", "instance", "in", "data", ":", "\n", "            ", "if", "instance", "[", "'query-split'", "]", "==", "self", ".", "split", ":", "\n", "                ", "dataset_size", "+=", "len", "(", "instance", "[", "'sentences'", "]", ")", "\n", "var_sql", "=", "instance", "[", "\"sql\"", "]", "[", "0", "]", "\n", "for", "sentence", "in", "instance", "[", "\"sentences\"", "]", ":", "\n", "                    ", "text", "=", "sentence", "[", "'text'", "]", "\n", "sql", "=", "var_sql", "# Needed to do variable replacement correctly", "\n", "# Variable replacement", "\n", "for", "name", "in", "sentence", "[", "'variables'", "]", ":", "\n", "                        ", "value", "=", "sentence", "[", "'variables'", "]", "[", "name", "]", "\n", "if", "len", "(", "value", ")", "==", "0", ":", "\n", "                            ", "for", "variable", "in", "instance", "[", "'variables'", "]", ":", "\n", "                                ", "if", "variable", "[", "'name'", "]", "==", "name", ":", "\n", "                                    ", "value", "=", "variable", "[", "'example'", "]", "\n", "", "", "", "text", "=", "value", ".", "join", "(", "text", ".", "split", "(", "name", ")", ")", "\n", "sql", "=", "value", ".", "join", "(", "sql", ".", "split", "(", "name", ")", ")", "\n", "", "sql", "=", "SmallSQL", ".", "chunk_sql", "(", "sql", ")", "\n", "whole_data", ".", "append", "(", "{", "'intent'", ":", "text", ".", "lower", "(", ")", ".", "strip", "(", ")", ",", "'snippet'", ":", "sql", ".", "lower", "(", ")", ".", "strip", "(", ")", "}", ")", "\n", "", "", "", "print", "(", "self", ".", "split", ",", "dataset_size", ")", "\n", "assert", "len", "(", "whole_data", ")", "==", "dataset_size", "\n", "with", "open", "(", "json_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "whole_data", ",", "f", ")", "\n", "", "return", "whole_data", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.small_sql.SmallSQL.chunk_sql": [[74, 81], ["re.sub().replace().replace().replace", "re.sub", "code.replace.replace.replace", "code.replace.replace.replace", "re.sub().replace().replace", "re.sub().replace", "re.sub"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "chunk_sql", "(", "code", ")", ":", "\n", "        ", "code", "=", "re", ".", "sub", "(", "r'(\\w*%s\\w*)'", "%", "'alias'", ",", "''", ",", "code", ")", ".", "replace", "(", "'.'", ",", "''", ")", ".", "replace", "(", "'AS'", ",", "''", ")", ".", "replace", "(", "';'", ",", "''", ")", "\n", "code", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "code", ")", "\n", "code", "=", "code", ".", "replace", "(", "'\"'", ",", "''", ")", "\n", "code", "=", "code", ".", "replace", "(", "'\\''", ",", "''", ")", "\n", "return", "code", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset.__init__": [[20, 56], ["os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.mkdir", "pickle.load", "functools.partial", "print", "list", "print", "pickle.dump", "open", "os.path.exists", "os.mkdir", "dataset.Dataset.preprocess_monolingual", "dataset.Dataset.preprocess", "map", "list", "sorted", "[].tolist", "open", "tqdm.tqdm.tqdm", "filter", "range", "open", "pickle.dump", "len", "os.path.join", "len", "numpy.array", "len", "len"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset.preprocess_monolingual", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset.preprocess"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "split", ",", "tokenizer", ",", "args", ",", "monolingual", "=", "False", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "dir_name", "=", "os", ".", "path", ".", "join", "(", "'data'", ",", "name", ")", "\n", "self", ".", "monolingual", "=", "monolingual", "\n", "self", ".", "monolingual_file", "=", "'train_monolingual.jsonl'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "'data'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'data'", ")", "\n", "", "if", "monolingual", ":", "\n", "            ", "self", ".", "split", "=", "'train'", "\n", "", "else", ":", "\n", "            ", "self", ".", "split", "=", "split", "\n", "", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "args", "=", "args", "\n", "binary_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'{}{}.bin'", ".", "format", "(", "split", ",", "'_mono'", "if", "monolingual", "else", "''", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "binary_file", ")", ":", "\n", "            ", "self", ".", "data", "=", "pickle", ".", "load", "(", "open", "(", "binary_file", ",", "'rb'", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "dir_name", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "self", ".", "dir_name", ")", "\n", "", "if", "monolingual", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "preprocess_monolingual", "(", "args", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "data", "=", "self", ".", "preprocess", "(", ")", "\n", "", "filter_function", "=", "partial", "(", "self", ".", "tokenize", ",", "tokenizer", ")", "\n", "print", "(", "'tokenizing the {} data....'", ".", "format", "(", "self", ".", "split", ")", ")", "\n", "self", ".", "data", "=", "list", "(", "map", "(", "filter_function", ",", "tqdm", "(", "self", ".", "data", ")", ")", ")", "\n", "print", "(", "'tokenization is done.'", ")", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "                ", "self", ".", "data", "=", "list", "(", "filter", "(", "lambda", "x", ":", "len", "(", "x", "[", "'intent'", "]", "[", "'input_ids'", "]", ")", "<", "self", ".", "threshold", "[", "self", ".", "split", "]", "and", "\n", "len", "(", "x", "[", "'snippet'", "]", "[", "'input_ids'", "]", ")", "<", "self", ".", "threshold", "[", "self", ".", "split", "]", ",", "self", ".", "data", ")", ")", "\n", "", "else", ":", "\n", "                ", "indices", "=", "sorted", "(", "range", "(", "len", "(", "self", ".", "data", ")", ")", ",", "key", "=", "lambda", "item", ":", "len", "(", "self", ".", "data", "[", "item", "]", "[", "'snippet'", "]", "[", "'input_ids'", "]", ")", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'{}_order.json'", ".", "format", "(", "split", ")", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "indices", ",", "f", ")", "\n", "", "self", ".", "data", "=", "np", ".", "array", "(", "self", ".", "data", ")", "[", "indices", "]", ".", "tolist", "(", ")", "\n", "", "pickle", ".", "dump", "(", "self", ".", "data", ",", "open", "(", "binary_file", ",", "'wb'", ")", ",", "protocol", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset._download_dataset": [[57, 60], ["None"], "methods", ["None"], ["", "", "@", "abc", ".", "abstractmethod", "\n", "def", "_download_dataset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset._preprocess": [[61, 64], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_preprocess", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset.preprocess": [[65, 68], ["dataset.Dataset._download_dataset", "dataset.Dataset._preprocess"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.wikisql.Wikisql._download_dataset", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.wikisql.Wikisql._preprocess"], ["", "def", "preprocess", "(", "self", ")", ":", "\n", "        ", "self", ".", "_download_dataset", "(", ")", "\n", "return", "self", ".", "_preprocess", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset._preprocess_monolingual": [[69, 72], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_preprocess_monolingual", "(", "self", ",", "args", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset._download_monolingual": [[73, 76], ["None"], "methods", ["None"], ["", "@", "abc", ".", "abstractmethod", "\n", "def", "_download_monolingual", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset.preprocess_monolingual": [[77, 80], ["dataset.Dataset._download_monolingual", "dataset.Dataset._preprocess_monolingual"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.monolingual_sql.MonolingualSQL._download_monolingual", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.monolingual_sql.MonolingualSQL._preprocess_monolingual"], ["", "def", "preprocess_monolingual", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "_download_monolingual", "(", ")", "\n", "return", "self", ".", "_preprocess_monolingual", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset._download_file": [[81, 85], ["os.path.join", "os.path.exists", "wget.download"], "methods", ["None"], ["", "def", "_download_file", "(", "self", ",", "url", ",", "file_name", ")", ":", "\n", "        ", "self", ".", "file_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "file_name", ")", ":", "\n", "            ", "wget", ".", "download", "(", "url", ",", "out", "=", "self", ".", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset.tokenize": [[86, 93], ["isinstance", "tokenizer", "tokenizer"], "methods", ["None"], ["", "", "def", "tokenize", "(", "self", ",", "tokenizer", ",", "json_object", ")", ":", "\n", "        ", "if", "isinstance", "(", "json_object", "[", "'intent'", "]", ",", "dict", ")", ":", "\n", "            ", "intent", "=", "' '", ".", "join", "(", "json_object", "[", "'intent'", "]", "[", "'words'", "]", ")", "\n", "", "else", ":", "\n", "            ", "intent", "=", "json_object", "[", "'intent'", "]", "\n", "", "return", "{", "'intent'", ":", "tokenizer", "(", "intent", ",", "max_length", "=", "self", ".", "threshold", "[", "'test'", "]", ",", "padding", "=", "False", ",", "truncation", "=", "True", ")", ",", "\n", "'snippet'", ":", "tokenizer", "(", "json_object", "[", "'snippet'", "]", ",", "max_length", "=", "self", ".", "threshold", "[", "'test'", "]", ",", "padding", "=", "False", ",", "truncation", "=", "True", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset.__getitem__": [[94, 96], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset.__len__": [[97, 99], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.monolingual_python.MonolingualPython.__init__": [[18, 20], ["dataset.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "split", ",", "tokenizer", ",", "args", ",", "monolingual", "=", "False", ")", ":", "\n", "        ", "super", "(", "MonolingualPython", ",", "self", ")", ".", "__init__", "(", "name", ",", "split", ",", "tokenizer", ",", "args", ",", "monolingual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.monolingual_python.MonolingualPython._download_monolingual": [[21, 28], ["os.path.exists", "monolingual_python.MonolingualPython._download_file", "os.path.join", "zipfile.ZipFile", "zipObj.extract", "os.rename", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset._download_file"], ["", "def", "_download_monolingual", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "self", ".", "monolingual_file", ")", ")", ":", "\n", "            ", "self", ".", "_download_file", "(", "'http://www.phontron.com/download/conala-corpus-v1.1.zip'", ",", "self", ".", "monolingual_file", ")", "\n", "with", "ZipFile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'conala-corpus-v1.1.zip'", ")", ",", "'r'", ")", "as", "zipObj", ":", "\n", "                ", "zipObj", ".", "extract", "(", "'conala-corpus/conala-mined.jsonl'", ",", "self", ".", "dir_name", ")", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'conala-corpus/conala-mined.jsonl'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "self", ".", "monolingual_file", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.monolingual_python.MonolingualPython._preprocess_monolingual": [[29, 42], ["os.path.join", "open", "enumerate", "tqdm.tqdm.tqdm", "json.loads", "f.readlines", "dataset.append", "len", "monolingual_python.MonolingualPython.__class__.canonicalize_code"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.canonicalize_code"], ["", "", "", "def", "_preprocess_monolingual", "(", "self", ",", "args", ")", ":", "\n", "        ", "dataset", "=", "[", "]", "\n", "monolingual_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "self", ".", "monolingual_file", ")", "\n", "with", "open", "(", "monolingual_file", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "tqdm", "(", "f", ".", "readlines", "(", ")", ")", ")", ":", "\n", "                ", "object", "=", "json", ".", "loads", "(", "line", ")", "\n", "if", "args", ".", "mono_min_prob", "<=", "object", "[", "'prob'", "]", "<=", "1", "and", "len", "(", "object", "[", "'snippet'", "]", ")", ">", "4", ":", "\n", "                    ", "if", "self", ".", "name", "==", "'django'", ":", "\n", "                        ", "canonical_code", "=", "self", ".", "__class__", ".", "canonicalize_code", "(", "object", "[", "'snippet'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "canonical_code", "=", "object", "[", "'snippet'", "]", "\n", "", "dataset", ".", "append", "(", "{", "'intent'", ":", "object", "[", "'intent'", "]", ",", "'snippet'", ":", "canonical_code", "}", ")", "\n", "", "", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.monolingual_sql.MonolingualSQL.__init__": [[18, 20], ["dataset.Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "split", ",", "tokenizer", ",", "args", ",", "monolingual", "=", "False", ")", ":", "\n", "        ", "super", "(", "MonolingualSQL", ",", "self", ")", ".", "__init__", "(", "name", ",", "split", ",", "tokenizer", ",", "args", ",", "monolingual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.monolingual_sql.MonolingualSQL._download_monolingual": [[21, 34], ["os.path.exists", "monolingual_sql.MonolingualSQL._download_file", "os.rename", "monolingual_sql.MonolingualSQL._download_file", "os.rename", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset._download_file", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset._download_file"], ["", "def", "_download_monolingual", "(", "self", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "self", ".", "monolingual_file", ")", ")", ":", "\n", "            ", "self", ".", "_download_file", "(", "\n", "'https://raw.githubusercontent.com/LittleYUYU/StackOverflow-Question-Code-Dataset/master/annotation_tool/data/code_solution_labeled_data/source/sql_how_to_do_it_qid_by_classifier_unlabeled_single_code_answer_qid_to_code.pickle'", ",", "\n", "self", ".", "monolingual_file", ")", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "\n", "'sql_how_to_do_it_qid_by_classifier_unlabeled_single_code_answer_qid_to_code.pickle'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'mono_single_sql.pickle'", ")", ")", "\n", "self", ".", "_download_file", "(", "\n", "'https://raw.githubusercontent.com/LittleYUYU/StackOverflow-Question-Code-Dataset/master/annotation_tool/data/code_solution_labeled_data/source/sql_how_to_do_it_by_classifier_multiple_iid_to_code.pickle'", ",", "\n", "self", ".", "monolingual_file", ")", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'sql_how_to_do_it_by_classifier_multiple_iid_to_code.pickle'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'mono_multi_sql.pickle'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.monolingual_sql.MonolingualSQL._preprocess_monolingual": [[35, 70], ["os.path.join", "os.path.exists", "print", "enumerate", "open", "pickle.load", "open", "pickle.load", "tqdm.tqdm.tqdm", "query.replace().replace().replace().replace.replace().replace().replace().replace.lower().strip", "open", "json.dump", "os.path.join", "os.path.join", "open", "json.load", "monolingual_sql.items", "query.replace().replace().replace().replace.replace().replace().replace().replace.replace().replace().replace().replace", "dataset.append", "query.replace().replace().replace().replace.replace().replace().replace().replace.lower", "len", "pglast.Node", "query.replace().replace().replace().replace.replace().replace().replace().replace.lower().strip().split", "pglast.parse_sql", "query.replace().replace().replace().replace.replace().replace().replace().replace.replace().replace().replace", "len", "len", "query.replace().replace().replace().replace.replace().replace().replace().replace.split", "query.replace().replace().replace().replace.replace().replace().replace().replace.lower().strip", "query.replace().replace().replace().replace.replace().replace().replace().replace.replace().replace", "query.replace().replace().replace().replace.replace().replace().replace().replace.lower", "query.replace().replace().replace().replace.replace().replace().replace().replace.replace"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower"], ["", "", "def", "_preprocess_monolingual", "(", "self", ",", "args", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'mono_single_sql.pickle'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "monolingual_sql_single", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'mono_multi_sql.pickle'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "monolingual_sql_multi", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "monolingual_sql", "=", "{", "**", "monolingual_sql_single", ",", "**", "monolingual_sql_multi", "}", "\n", "json_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "self", ".", "monolingual_file", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "json_file", ")", ":", "\n", "            ", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "return", "json", ".", "load", "(", "f", ")", "\n", "", "", "counter", "=", "0", "\n", "dataset", "=", "[", "]", "\n", "length_threshold", "=", "12", "if", "args", ".", "dataset_name", "==", "'geo'", "else", "19", "if", "args", ".", "dataset_name", "==", "'atis'", "else", "80", "\n", "print", "(", "\"lengh threshold\"", ",", "length_threshold", ")", "\n", "for", "index", ",", "(", "id", ",", "query", ")", "in", "enumerate", "(", "tqdm", "(", "monolingual_sql", ".", "items", "(", ")", ")", ")", ":", "\n", "            ", "query", "=", "query", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "len", "(", "query", ")", ">", "6", "and", "'select'", "in", "query", ":", "\n", "                ", "if", "(", "'--'", ")", "in", "query", ":", "\n", "                    ", "continue", "\n", "", "try", ":", "\n", "                    ", "Node", "(", "parse_sql", "(", "query", ")", ")", "# just to make sure the query has a valid grammar", "\n", "", "except", ":", "\n", "                    ", "continue", "\n", "", "query", "=", "query", ".", "replace", "(", "'\\n'", ",", "' '", ")", ".", "replace", "(", "'\"'", ",", "''", ")", ".", "replace", "(", "'\\''", ",", "''", ")", ".", "replace", "(", "';'", ",", "\n", "''", ")", "# simplify the query", "\n", "if", "len", "(", "query", ".", "split", "(", ")", ")", ">", "length_threshold", "or", "len", "(", "query", ")", "<", "8", "or", "query", "[", ":", "6", "]", "!=", "'select'", ":", "\n", "                    ", "continue", "\n", "", "query", "=", "' '", ".", "join", "(", "query", ".", "lower", "(", ")", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "example", "=", "{", "'intent'", ":", "query", ",", "\n", "'snippet'", ":", "query", "}", "\n", "dataset", ".", "append", "(", "example", ")", "\n", "counter", "+=", "1", "\n", "", "", "with", "open", "(", "json_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "dataset", ",", "f", ")", "\n", "", "return", "dataset", "", "", "", ""]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.__init__": [[44, 49], ["monolingual_python.MonolingualPython.__init__"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "split", ",", "tokenizer", ",", "args", ",", "monolingual", "=", "False", ")", ":", "\n", "        ", "self", ".", "threshold", "=", "{", "'train'", ":", "100", ",", "\n", "'dev'", ":", "100", ",", "\n", "'test'", ":", "100", "}", "\n", "super", "(", "Conala", ",", "self", ")", ".", "__init__", "(", "'conala'", ",", "split", ",", "tokenizer", ",", "args", ",", "monolingual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.decanonicalize_code": [[50, 60], ["slot_map.items", "slot_map.items", "conala.is_enumerable_str", "code.replace.replace.replace", "code.replace.replace.replace"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.is_enumerable_str"], ["", "@", "staticmethod", "\n", "def", "decanonicalize_code", "(", "code", ",", "slot_map", ")", ":", "\n", "\n", "        ", "for", "slot_name", ",", "slot_val", "in", "slot_map", ".", "items", "(", ")", ":", "\n", "            ", "if", "is_enumerable_str", "(", "slot_name", ")", ":", "\n", "                ", "code", "=", "code", ".", "replace", "(", "slot_name", ",", "slot_val", ")", "\n", "\n", "", "", "for", "slot_name", ",", "slot_val", "in", "slot_map", ".", "items", "(", ")", ":", "\n", "            ", "code", "=", "code", ".", "replace", "(", "slot_name", ",", "slot_val", ")", "\n", "", "return", "code", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.replace_identifiers_in_ast": [[61, 72], ["ast.walk", "list", "vars().items", "isinstance", "vars", "setattr"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "replace_identifiers_in_ast", "(", "py_ast", ",", "identifier2slot", ")", ":", "\n", "        ", "for", "node", "in", "ast", ".", "walk", "(", "py_ast", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "list", "(", "vars", "(", "node", ")", ".", "items", "(", ")", ")", ":", "\n", "                ", "if", "k", "in", "(", "'lineno'", ",", "'col_offset'", ",", "'ctx'", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "# print(str(v))", "\n", "                    ", "if", "v", "in", "identifier2slot", ":", "\n", "                        ", "slot_name", "=", "identifier2slot", "[", "v", "]", "\n", "setattr", "(", "node", ",", "k", ",", "slot_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.canonicalize_code": [[73, 89], ["ast.parse", "conala.Conala.replace_identifiers_in_ast", "astor.to_source().strip", "list", "astor.to_source", "slot_map.items", "conala.is_enumerable_str", "canonical_code.replace.replace.replace", "slot_map.items"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.replace_identifiers_in_ast", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.is_enumerable_str"], ["", "", "", "", "", "@", "staticmethod", "\n", "def", "canonicalize_code", "(", "code", ",", "slot_map", ")", ":", "\n", "        ", "string2slot", "=", "{", "x", ":", "slot_name", "for", "slot_name", ",", "x", "in", "list", "(", "slot_map", ".", "items", "(", ")", ")", "}", "\n", "py_ast", "=", "ast", ".", "parse", "(", "code", ")", "\n", "Conala", ".", "replace_identifiers_in_ast", "(", "py_ast", ",", "string2slot", ")", "\n", "canonical_code", "=", "astor", ".", "to_source", "(", "py_ast", ")", ".", "strip", "(", ")", "\n", "entries_that_are_lists", "=", "[", "slot_name", "for", "slot_name", ",", "val", "in", "slot_map", ".", "items", "(", ")", "if", "is_enumerable_str", "(", "val", ")", "]", "\n", "if", "entries_that_are_lists", ":", "\n", "            ", "for", "slot_name", "in", "entries_that_are_lists", ":", "\n", "                ", "list_repr", "=", "slot_map", "[", "slot_name", "]", "\n", "first_token", "=", "list_repr", "[", "0", "]", "# e.g. `[`", "\n", "last_token", "=", "list_repr", "[", "-", "1", "]", "# e.g., `]`", "\n", "fake_list", "=", "first_token", "+", "' '", "+", "slot_name", "+", "' '", "+", "last_token", "\n", "slot_map", "[", "fake_list", "]", "=", "slot_map", "[", "slot_name", "]", "\n", "canonical_code", "=", "canonical_code", ".", "replace", "(", "list_repr", ",", "fake_list", ")", "\n", "", "", "return", "canonical_code", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.canonicalize_intent": [[90, 112], ["QUOTED_TOKEN_RE.findall", "dict", "conala.infer_slot_type", "intent.replace.replace.replace", "value.strip().encode().decode", "value.strip().encode", "value.strip"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.infer_slot_type", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.model.Model.encode"], ["", "@", "staticmethod", "\n", "def", "canonicalize_intent", "(", "intent", ")", ":", "\n", "        ", "marked_token_matches", "=", "QUOTED_TOKEN_RE", ".", "findall", "(", "intent", ")", "\n", "slot_map", "=", "dict", "(", ")", "\n", "var_id", "=", "0", "\n", "str_id", "=", "0", "\n", "for", "match", "in", "marked_token_matches", ":", "\n", "            ", "quote", "=", "match", "[", "0", "]", "\n", "value", "=", "match", "[", "1", "]", "\n", "quoted_value", "=", "quote", "+", "value", "+", "quote", "\n", "slot_type", "=", "infer_slot_type", "(", "quote", ",", "value", ")", "\n", "\n", "if", "slot_type", "==", "'var'", ":", "\n", "                ", "slot_name", "=", "'var%d'", "%", "var_id", "\n", "var_id", "+=", "1", "\n", "", "else", ":", "\n", "                ", "slot_name", "=", "'str%d'", "%", "str_id", "\n", "str_id", "+=", "1", "\n", "\n", "", "intent", "=", "intent", ".", "replace", "(", "quoted_value", ",", "slot_name", ")", "\n", "slot_map", "[", "slot_name", "]", "=", "value", ".", "strip", "(", ")", ".", "encode", "(", ")", ".", "decode", "(", "'unicode_escape'", ",", "'ignore'", ")", "\n", "", "return", "intent", ",", "slot_map", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.preprocess_example": [[113, 133], ["rewritten_intent.lower().strip.lower().strip.lower().strip", "example_json[].lower().strip", "conala.Conala.canonicalize_intent", "conala.Conala.canonicalize_code", "utils.my_annotate", "rewritten_intent.lower().strip.lower().strip.lower", "example_json[].lower"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.canonicalize_intent", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.canonicalize_code", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.my_annotate", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower"], ["", "@", "staticmethod", "\n", "def", "preprocess_example", "(", "example_json", ")", ":", "\n", "        ", "intent", "=", "example_json", "[", "'intent'", "]", "\n", "if", "'rewritten_intent'", "in", "example_json", ":", "\n", "            ", "rewritten_intent", "=", "example_json", "[", "'rewritten_intent'", "]", "\n", "", "else", ":", "\n", "            ", "rewritten_intent", "=", "None", "\n", "\n", "", "if", "rewritten_intent", "is", "None", ":", "\n", "            ", "rewritten_intent", "=", "intent", "\n", "", "rewritten_intent", "=", "rewritten_intent", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "snippet", "=", "example_json", "[", "'snippet'", "]", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "\n", "canonical_intent", ",", "slot_map", "=", "Conala", ".", "canonicalize_intent", "(", "rewritten_intent", ")", "\n", "canonical_snippet", "=", "Conala", ".", "canonicalize_code", "(", "snippet", ",", "slot_map", ")", "\n", "canonical_intent", "=", "my_annotate", "(", "canonical_intent", ")", "\n", "\n", "return", "{", "'intent'", ":", "canonical_intent", ",", "\n", "'slot_map'", ":", "slot_map", ",", "\n", "'snippet'", ":", "canonical_snippet", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.preprocess_dataset": [[134, 147], ["enumerate", "json.load", "examples.append", "open", "conala.Conala.preprocess_example", "json.loads", "open().readlines", "open"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.preprocess_example"], ["", "def", "preprocess_dataset", "(", "self", ",", "file_path", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "dataset", "=", "json", ".", "load", "(", "open", "(", "file_path", ")", ")", "\n", "", "except", ":", "\n", "            ", "dataset", "=", "[", "json", ".", "loads", "(", "jline", ")", "for", "jline", "in", "open", "(", "file_path", ")", ".", "readlines", "(", ")", "]", "\n", "", "examples", "=", "[", "]", "\n", "for", "i", ",", "example_json", "in", "enumerate", "(", "dataset", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "example_dict", "=", "Conala", ".", "preprocess_example", "(", "example_json", ")", "\n", "", "except", "(", "AssertionError", ",", "SyntaxError", ",", "ValueError", ",", "OverflowError", ")", "as", "e", ":", "\n", "                ", "continue", "\n", "", "examples", ".", "append", "(", "example_dict", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala._download_dataset": [[148, 154], ["conala.Conala._download_file", "os.path.exists", "os.path.join", "zipfile.ZipFile", "zipObj.extract", "zipObj.extract", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset._download_file"], ["", "def", "_download_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "_download_file", "(", "'http://www.phontron.com/download/conala-corpus-v1.1.zip'", ",", "'conala-corpus/conala-train.json'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'conala-corpus/conala-train.json'", ")", ")", ":", "\n", "            ", "with", "ZipFile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'conala-corpus-v1.1.zip'", ")", ",", "'r'", ")", "as", "zipObj", ":", "\n", "                ", "zipObj", ".", "extract", "(", "'conala-corpus/conala-train.json'", ",", "self", ".", "dir_name", ")", "\n", "zipObj", ".", "extract", "(", "'conala-corpus/conala-test.json'", ",", "self", ".", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala._preprocess": [[155, 171], ["os.path.join", "os.path.exists", "conala.Conala.preprocess_dataset", "os.path.join", "open", "json.dump", "open", "json.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.preprocess_dataset"], ["", "", "", "def", "_preprocess", "(", "self", ")", ":", "\n", "        ", "json_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'{}.json'", ".", "format", "(", "self", ".", "split", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "json_file", ")", ":", "\n", "            ", "examples", "=", "self", ".", "preprocess_dataset", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'conala-corpus/conala-{}.json'", ".", "format", "(", "self", ".", "split", "if", "self", ".", "split", "!=", "'dev'", "else", "'train'", ")", ")", ")", "\n", "if", "self", ".", "split", "==", "'dev'", ":", "\n", "                ", "examples", "=", "examples", "[", "-", "200", ":", "]", "\n", "", "elif", "self", ".", "split", "==", "'train'", ":", "\n", "                ", "examples", "=", "examples", "[", ":", "-", "200", "]", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'{}.json'", ".", "format", "(", "self", ".", "split", ")", ")", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "examples", ",", "f", ")", "\n", "", "return", "examples", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "json_file", ")", "as", "f", ":", "\n", "                ", "examples", "=", "json", ".", "load", "(", "f", ")", "\n", "", "return", "examples", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.infer_slot_type": [[33, 37], ["value.isidentifier"], "function", ["None"], ["def", "infer_slot_type", "(", "quote", ",", "value", ")", ":", "\n", "    ", "if", "quote", "==", "'`'", "and", "value", ".", "isidentifier", "(", ")", ":", "\n", "        ", "return", "'var'", "\n", "", "return", "'str'", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.is_enumerable_str": [[39, 41], ["len"], "function", ["None"], ["", "def", "is_enumerable_str", "(", "identifier_value", ")", ":", "\n", "    ", "return", "len", "(", "identifier_value", ")", ">", "2", "and", "identifier_value", "[", "0", "]", "in", "(", "'{'", ",", "'('", ",", "'['", ")", "and", "identifier_value", "[", "-", "1", "]", "in", "(", "'}'", ",", "']'", ",", "')'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.annotate.annotate": [[20, 34], ["stanza.server.client.CoreNLPClient", "stanza.server.client.CoreNLPClient.annotate", "words.append", "gloss.append", "after.append"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.annotate.annotate"], ["def", "annotate", "(", "sentence", ",", "lower", "=", "True", ")", ":", "\n", "    ", "global", "client", "\n", "if", "client", "is", "None", ":", "\n", "        ", "client", "=", "CoreNLPClient", "(", "default_annotators", "=", "'ssplit,tokenize'", ".", "split", "(", "','", ")", ")", "\n", "", "words", ",", "gloss", ",", "after", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "s", "in", "client", ".", "annotate", "(", "sentence", ")", ".", "sentence", ":", "\n", "        ", "for", "t", "in", "s", ".", "token", ":", "\n", "            ", "words", ".", "append", "(", "t", ".", "word", ")", "\n", "gloss", ".", "append", "(", "t", ".", "originalText", ")", "\n", "after", ".", "append", "(", "t", ".", "after", ")", "\n", "", "", "return", "{", "\n", "'gloss'", ":", "gloss", ",", "\n", "'words'", ":", "words", ",", "\n", "'after'", ":", "after", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.annotate.annotate_example": [[37, 48], ["utils.my_annotate", "utils.my_annotate", "utils.my_annotate", "str"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.my_annotate", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.my_annotate", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.my_annotate"], ["", "def", "annotate_example", "(", "example", ",", "table", ")", ":", "\n", "    ", "ann", "=", "{", "'table_id'", ":", "example", "[", "'table_id'", "]", "}", "\n", "ann", "[", "'question'", "]", "=", "my_annotate", "(", "example", "[", "'question'", "]", ")", "\n", "ann", "[", "'table'", "]", "=", "{", "\n", "'header'", ":", "[", "my_annotate", "(", "h", ")", "for", "h", "in", "table", "[", "'header'", "]", "]", ",", "\n", "'type'", ":", "table", "[", "'types'", "]", ",", "\n", "}", "\n", "ann", "[", "'query'", "]", "=", "example", "[", "'sql'", "]", "\n", "for", "c", "in", "ann", "[", "'query'", "]", "[", "'conds'", "]", ":", "\n", "        ", "c", "[", "-", "1", "]", "=", "my_annotate", "(", "str", "(", "c", "[", "-", "1", "]", ")", ")", "\n", "", "return", "ann", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.annotate.is_valid_example": [[50, 68], ["set", "set", "all", "dataset_preprocessing.wikisql.lib.common.detokenize().lower", "len", "len", "set", "print", "dataset_preprocessing.wikisql.lib.common.detokenize", "print"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.common.detokenize"], ["", "def", "is_valid_example", "(", "e", ")", ":", "\n", "    ", "if", "not", "all", "(", "[", "h", "[", "'words'", "]", "for", "h", "in", "e", "[", "'table'", "]", "[", "'header'", "]", "]", ")", ":", "\n", "        ", "return", "False", "\n", "", "headers", "=", "[", "detokenize", "(", "h", ")", ".", "lower", "(", ")", "for", "h", "in", "e", "[", "'table'", "]", "[", "'header'", "]", "]", "\n", "if", "len", "(", "headers", ")", "!=", "len", "(", "set", "(", "headers", ")", ")", ":", "\n", "        ", "return", "False", "\n", "", "input_vocab", "=", "set", "(", "e", "[", "'seq_input'", "]", "[", "'words'", "]", ")", "\n", "for", "w", "in", "e", "[", "'seq_output'", "]", "[", "'words'", "]", ":", "\n", "        ", "if", "w", "not", "in", "input_vocab", ":", "\n", "            ", "print", "(", "'query word \"{}\" is not in input vocabulary.\\n{}'", ".", "format", "(", "w", ",", "e", "[", "'seq_input'", "]", "[", "'words'", "]", ")", ")", "\n", "return", "False", "\n", "", "", "input_vocab", "=", "set", "(", "e", "[", "'question'", "]", "[", "'words'", "]", ")", "\n", "for", "col", ",", "op", ",", "cond", "in", "e", "[", "'query'", "]", "[", "'conds'", "]", ":", "\n", "        ", "for", "w", "in", "cond", "[", "'words'", "]", ":", "\n", "            ", "if", "w", "not", "in", "input_vocab", ":", "\n", "                ", "print", "(", "'cond word \"{}\" is not in input vocabulary.\\n{}'", ".", "format", "(", "w", ",", "e", "[", "'question'", "]", "[", "'words'", "]", ")", ")", "\n", "return", "False", "\n", "", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.annotate.create_annotations": [[70, 94], ["os.path.isdir", "os.makedirs", "print", "os.path.join", "os.path.join", "os.path.join", "open", "open", "open", "print", "tqdm.tqdm", "print", "tqdm.tqdm", "print", "ujson.loads", "ujson.loads", "annotate.annotate_example", "fo.write", "dataset_preprocessing.wikisql.lib.common.count_lines", "dataset_preprocessing.wikisql.lib.common.count_lines", "ujson.dumps"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.annotate.annotate_example", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.common.count_lines", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.common.count_lines"], ["", "def", "create_annotations", "(", "din", ",", "dout", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "dout", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dout", ")", "\n", "\n", "", "for", "split", "in", "[", "'train'", ",", "'dev'", ",", "'test'", "]", ":", "\n", "        ", "fsplit", "=", "os", ".", "path", ".", "join", "(", "din", ",", "split", ")", "+", "'.jsonl'", "\n", "ftable", "=", "os", ".", "path", ".", "join", "(", "din", ",", "split", ")", "+", "'.tables.jsonl'", "\n", "fout", "=", "os", ".", "path", ".", "join", "(", "dout", ",", "split", ")", "+", "'_annotated.jsonl'", "\n", "\n", "print", "(", "'annotating {}'", ".", "format", "(", "fsplit", ")", ")", "\n", "with", "open", "(", "fsplit", ")", "as", "fs", ",", "open", "(", "ftable", ")", "as", "ft", ",", "open", "(", "fout", ",", "'wt'", ")", "as", "fo", ":", "\n", "            ", "print", "(", "'loading tables'", ")", "\n", "tables", "=", "{", "}", "\n", "for", "line", "in", "tqdm", "(", "ft", ",", "total", "=", "count_lines", "(", "ftable", ")", ")", ":", "\n", "                ", "d", "=", "json", ".", "loads", "(", "line", ")", "\n", "tables", "[", "d", "[", "'id'", "]", "]", "=", "d", "\n", "", "print", "(", "'loading examples'", ")", "\n", "n_written", "=", "0", "\n", "for", "line", "in", "tqdm", "(", "fs", ",", "total", "=", "count_lines", "(", "fsplit", ")", ")", ":", "\n", "                ", "d", "=", "json", ".", "loads", "(", "line", ")", "\n", "a", "=", "annotate_example", "(", "d", ",", "tables", "[", "d", "[", "'table_id'", "]", "]", ")", "\n", "fo", ".", "write", "(", "json", ".", "dumps", "(", "a", ")", "+", "'\\n'", ")", "\n", "n_written", "+=", "1", "\n", "", "print", "(", "'wrote {} examples'", ".", "format", "(", "n_written", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.wikisql.Wikisql.__init__": [[28, 33], ["monolingual_sql.MonolingualSQL.__init__"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "split", ",", "tokenizer", ",", "args", ",", "monolingual", "=", "False", ")", ":", "\n", "        ", "self", ".", "threshold", "=", "{", "'train'", ":", "200", ",", "\n", "'dev'", ":", "512", ",", "\n", "'test'", ":", "512", "}", "\n", "super", "(", "Wikisql", ",", "self", ")", ".", "__init__", "(", "'wikisql'", ",", "split", ",", "tokenizer", ",", "args", ",", "monolingual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.wikisql.Wikisql.input_types": [[34, 46], ["list", "list.insert", "map", "tokenizer", "token_types.append", "list", "map"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "input_types", "(", "question", ",", "header", ",", "types", ",", "tokenizer", ")", ":", "\n", "        ", "types", "=", "list", "(", "map", "(", "lambda", "x", ":", "1", "if", "x", "==", "'text'", "else", "2", ",", "types", ")", ")", "\n", "types", ".", "insert", "(", "0", ",", "0", ")", "\n", "input_tokens", "=", "tokenizer", "(", "question", ",", "header", ")", "[", "'input_ids'", "]", "\n", "token_types", "=", "[", "]", "\n", "j", "=", "0", "\n", "for", "token", "in", "input_tokens", ":", "\n", "            ", "token_types", ".", "append", "(", "types", "[", "j", "]", ")", "\n", "if", "token", "==", "102", ":", "\n", "                ", "j", "+=", "1", "\n", "", "", "return", "', '", ".", "join", "(", "list", "(", "map", "(", "str", ",", "token_types", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.wikisql.Wikisql.create_label": [[47, 61], ["sorted", "enumerate", "list", "tokenizer.encode", "tokenizer", "lables.append", "tokenizer.decode", "set", "sorted.index", "question.split", "tokenizer.encode"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.model.Model.encode", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.model.Model.encode"], ["", "@", "staticmethod", "\n", "def", "create_label", "(", "query", ",", "question", ",", "header", ",", "tokenizer", ")", ":", "\n", "        ", "full_tokens_str", "=", "' '", ".", "join", "(", "reserved_tokens_sql", "+", "question", ".", "split", "(", ")", "+", "header", ")", "\n", "full_tokens", "=", "sorted", "(", "list", "(", "set", "(", "tokenizer", ".", "encode", "(", "full_tokens_str", ",", "add_special_tokens", "=", "False", ")", ")", ")", ")", "\n", "if", "query", "is", "not", "None", ":", "\n", "            ", "query_tokens", "=", "tokenizer", ".", "encode", "(", "query", ")", "\n", "", "else", ":", "\n", "            ", "query_tokens", "=", "tokenizer", "(", "[", "(", "question", ",", "' [SEP] '", ".", "join", "(", "header", ")", ")", "]", ")", "\n", "query_tokens", "=", "query_tokens", "[", "'input_ids'", "]", "[", "0", "]", "\n", "\n", "", "lables", "=", "[", "]", "\n", "for", "i", ",", "token", "in", "enumerate", "(", "query_tokens", ")", ":", "\n", "            ", "lables", ".", "append", "(", "full_tokens", ".", "index", "(", "token", ")", ")", "\n", "", "return", "lables", ",", "full_tokens", ",", "tokenizer", ".", "decode", "(", "query_tokens", "[", "1", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.wikisql.Wikisql.query2str": [[62, 74], ["len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "query2str", "(", "query", ",", "header", ")", ":", "\n", "        ", "agg_str", "=", "header", "[", "query", "[", "'sel'", "]", "]", "\n", "agg_op", "=", "agg_ops", "[", "query", "[", "'agg'", "]", "]", "\n", "if", "agg_op", ":", "\n", "            ", "agg_str", "=", "'{}({})'", ".", "format", "(", "agg_op", ",", "agg_str", ")", "\n", "", "where_str", "=", "' && '", ".", "join", "(", "[", "'{} {} {}'", ".", "format", "(", "header", "[", "i", "]", ",", "cond_ops", "[", "o", "]", ",", "' '", ".", "join", "(", "v", "[", "'words'", "]", ")", ")", "for", "i", ",", "o", ",", "v", "in", "query", "[", "'conds'", "]", "]", ")", "\n", "\n", "if", "len", "(", "query", "[", "'conds'", "]", ")", ">", "0", ":", "\n", "            ", "return", "'SELECT {} WHERE {}'", ".", "format", "(", "agg_str", ",", "where_str", ")", "\n", "", "else", ":", "\n", "            ", "return", "'SELECT {}'", ".", "format", "(", "agg_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.wikisql.Wikisql.augment": [[75, 89], ["query.split.split.split", "random.randint", "copy.copy.copy", "query[].upper", "query[].lower().strip", "new_column_name.strip", "len", "query[].lower"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower"], ["", "", "@", "staticmethod", "\n", "def", "augment", "(", "query", ",", "header", ")", ":", "\n", "        ", "query", "=", "query", ".", "split", "(", ")", "\n", "sel_col", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "header", ")", "-", "1", ")", "\n", "new_column_name", "=", "header", "[", "sel_col", "]", "\n", "new_query", "=", "copy", "(", "query", ")", "\n", "column_index", "=", "1", "\n", "if", "query", "[", "column_index", "]", ".", "upper", "(", ")", "in", "agg_ops", ":", "\n", "            ", "column_index", "+=", "2", "\n", "", "if", "query", "[", "column_index", "]", ".", "lower", "(", ")", ".", "strip", "(", ")", "!=", "new_column_name", ".", "strip", "(", ")", ":", "\n", "            ", "new_query", "[", "column_index", "]", "=", "new_column_name", "\n", "return", "' '", ".", "join", "(", "new_query", ")", "\n", "", "else", ":", "\n", "            ", "return", "new_query", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.wikisql.Wikisql._download_dataset": [[90, 97], ["os.path.exists", "wikisql.Wikisql._download_file", "tarfile.open", "tarfile.open.extractall", "annotate.create_annotations", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.dataset.Dataset._download_file", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.annotate.create_annotations"], ["", "", "def", "_download_dataset", "(", "self", ")", ":", "\n", "        ", "train_file_name", "=", "'data/train.jsonl'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "train_file_name", ")", ")", ":", "\n", "            ", "self", ".", "_download_file", "(", "url", "=", "'https://raw.githubusercontent.com/salesforce/WikiSQL/master/data.tar.bz2'", ",", "file_name", "=", "train_file_name", ")", "\n", "tar", "=", "tarfile", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "\"data.tar.bz2\"", ")", ")", "\n", "tar", ".", "extractall", "(", "path", "=", "self", ".", "dir_name", ")", "\n", "create_annotations", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'data'", ")", ",", "self", ".", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.wikisql.Wikisql._preprocess": [[98, 126], ["os.path.join", "os.path.exists", "open().readlines", "print", "enumerate", "tqdm.tqdm.tqdm", "json.loads", "wikisql.Wikisql.query2str", "wikisql.Wikisql.input_types", "wikisql.Wikisql.create_label", "wikisql.Wikisql.create_label", "full_dataset.append", "open", "json.dump", "open", "json.load", "open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.wikisql.Wikisql.query2str", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.wikisql.Wikisql.input_types", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.wikisql.Wikisql.create_label", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.wikisql.Wikisql.create_label"], ["", "", "def", "_preprocess", "(", "self", ")", ":", "\n", "        ", "json_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'{}.json'", ".", "format", "(", "self", ".", "split", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "json_file", ")", ":", "\n", "            ", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "return", "json", ".", "load", "(", "f", ")", "\n", "", "", "dataset_lines", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "dir_name", ",", "'{}_annotated.jsonl'", ".", "format", "(", "self", ".", "split", ")", ")", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "full_dataset", "=", "[", "]", "\n", "print", "(", "\"Preprocessing {} ...\"", ".", "format", "(", "self", ".", "split", ")", ")", "\n", "for", "index", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataset_lines", ")", ")", ":", "\n", "            ", "data", "=", "json", ".", "loads", "(", "data", ")", "\n", "question", "=", "' '", ".", "join", "(", "data", "[", "'question'", "]", "[", "'words'", "]", ")", "\n", "header", "=", "[", "' '", ".", "join", "(", "header", "[", "'words'", "]", ")", "for", "header", "in", "data", "[", "'table'", "]", "[", "'header'", "]", "]", "\n", "query", "=", "Wikisql", ".", "query2str", "(", "data", "[", "'query'", "]", ",", "header", ")", "\n", "header_string", "=", "' [SEP] '", ".", "join", "(", "header", ")", "\n", "input_types", "=", "Wikisql", ".", "input_types", "(", "question", ",", "header_string", ",", "data", "[", "'table'", "]", "[", "'type'", "]", ",", "self", ".", "tokenizer", ")", "\n", "label", ",", "choices", ",", "query", "=", "Wikisql", ".", "create_label", "(", "query", ",", "question", ",", "header", ",", "self", ".", "tokenizer", ")", "\n", "source_labels", ",", "_", ",", "_", "=", "Wikisql", ".", "create_label", "(", "None", ",", "question", ",", "header", ",", "self", ".", "tokenizer", ")", "\n", "example", "=", "{", "'intent'", ":", "question", ",", "\n", "'header'", ":", "header_string", ",", "\n", "'input_types'", ":", "input_types", ",", "\n", "'source_label'", ":", "source_labels", ",", "\n", "'snippet'", ":", "query", ",", "\n", "'choices'", ":", "choices", ",", "\n", "'label'", ":", "label", "}", "\n", "full_dataset", ".", "append", "(", "example", ")", "\n", "", "with", "open", "(", "json_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "full_dataset", ",", "f", ")", "\n", "", "return", "full_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.wikisql.wikisql.Wikisql.tokenize": [[127, 141], ["tokenizer", "tokenizer", "torch.ones", "torch.zeros", "len", "len"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "tokenizer", ",", "json_object", ")", ":", "\n", "        ", "intent", "=", "tokenizer", "(", "json_object", "[", "'intent'", "]", ",", "json_object", "[", "'header'", "]", ",", "\n", "max_length", "=", "self", ".", "threshold", "[", "'test'", "]", ",", "padding", "=", "False", ",", "truncation", "=", "True", ")", "\n", "target", "=", "tokenizer", "(", "json_object", "[", "'snippet'", "]", ",", "max_length", "=", "self", ".", "threshold", "[", "'test'", "]", ",", "padding", "=", "False", ",", "truncation", "=", "True", ")", "\n", "if", "not", "self", ".", "args", ".", "pointer_network", ":", "\n", "            ", "return", "{", "'intent'", ":", "intent", ",", "'snippet'", ":", "target", "}", "\n", "", "else", ":", "\n", "            ", "source_label", "=", "json_object", "[", "'source_label'", "]", "\n", "intent", "[", "'source_label'", "]", "=", "source_label", "\n", "choice_dict", "=", "{", "'input_ids'", ":", "json_object", "[", "'choices'", "]", ",", "\n", "'attention_mask'", ":", "torch", ".", "ones", "(", "len", "(", "json_object", "[", "'choices'", "]", ")", ")", ",", "\n", "'token_type_ids'", ":", "torch", ".", "zeros", "(", "len", "(", "json_object", "[", "'choices'", "]", ")", ")", "}", "\n", "return", "{", "'intent'", ":", "intent", ",", "'snippet'", ":", "target", ",", "\n", "'choices'", ":", "choice_dict", ",", "'label'", ":", "json_object", "[", "'label'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.__init__": [[23, 28], ["tuple", "list"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sel_index", ",", "agg_index", ",", "conditions", "=", "tuple", "(", ")", ",", "ordered", "=", "False", ")", ":", "\n", "        ", "self", ".", "sel_index", "=", "sel_index", "\n", "self", ".", "agg_index", "=", "agg_index", "\n", "self", ".", "conditions", "=", "list", "(", "conditions", ")", "\n", "self", ".", "ordered", "=", "ordered", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.__eq__": [[29, 41], ["isinstance", "set", "set", "str().lower", "str().lower", "str().lower", "str().lower", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "self", ".", "__class__", ")", ":", "\n", "            ", "indices", "=", "self", ".", "sel_index", "==", "other", ".", "sel_index", "and", "self", ".", "agg_index", "==", "other", ".", "agg_index", "\n", "if", "other", ".", "ordered", ":", "\n", "                ", "conds", "=", "[", "(", "col", ",", "op", ",", "str", "(", "cond", ")", ".", "lower", "(", ")", ")", "for", "col", ",", "op", ",", "cond", "in", "self", ".", "conditions", "]", "==", "[", "\n", "(", "col", ",", "op", ",", "str", "(", "cond", ")", ".", "lower", "(", ")", ")", "for", "col", ",", "op", ",", "cond", "in", "other", ".", "conditions", "]", "\n", "", "else", ":", "\n", "                ", "conds", "=", "set", "(", "[", "(", "col", ",", "op", ",", "str", "(", "cond", ")", ".", "lower", "(", ")", ")", "for", "col", ",", "op", ",", "cond", "in", "self", ".", "conditions", "]", ")", "==", "set", "(", "\n", "[", "(", "col", ",", "op", ",", "str", "(", "cond", ")", ".", "lower", "(", ")", ")", "for", "col", ",", "op", ",", "cond", "in", "other", ".", "conditions", "]", ")", "\n", "\n", "", "return", "indices", "and", "conds", "\n", "", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.__ne__": [[42, 46], ["isinstance", "query.Query.__eq__"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.__eq__"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "self", ".", "__class__", ")", ":", "\n", "            ", "return", "not", "self", ".", "__eq__", "(", "other", ")", "\n", "", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.__hash__": [[47, 49], ["hash", "tuple", "sorted", "query.Query.__dict__.items"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "tuple", "(", "sorted", "(", "self", ".", "__dict__", ".", "items", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.__repr__": [[50, 59], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "rep", "=", "'SELECT {agg} {sel} FROM table'", ".", "format", "(", "\n", "agg", "=", "self", ".", "agg_ops", "[", "self", ".", "agg_index", "]", ",", "\n", "sel", "=", "'col{}'", ".", "format", "(", "self", ".", "sel_index", ")", ",", "\n", ")", "\n", "if", "self", ".", "conditions", ":", "\n", "            ", "rep", "+=", "' WHERE '", "+", "' AND '", ".", "join", "(", "\n", "[", "'{} {} {}'", ".", "format", "(", "'col{}'", ".", "format", "(", "i", ")", ",", "self", ".", "cond_ops", "[", "o", "]", ",", "v", ")", "for", "i", ",", "o", ",", "v", "in", "self", ".", "conditions", "]", ")", "\n", "", "return", "rep", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.to_dict": [[60, 62], ["None"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "'sel'", ":", "self", ".", "sel_index", ",", "'agg'", ":", "self", ".", "agg_index", ",", "'conds'", ":", "self", ".", "conditions", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower": [[63, 68], ["query.Query.__class__", "conds.append", "cond.lower"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower"], ["", "def", "lower", "(", "self", ")", ":", "\n", "        ", "conds", "=", "[", "]", "\n", "for", "col", ",", "op", ",", "cond", "in", "self", ".", "conditions", ":", "\n", "            ", "conds", ".", "append", "(", "[", "col", ",", "op", ",", "cond", ".", "lower", "(", ")", "]", ")", "\n", "", "return", "self", ".", "__class__", "(", "self", ".", "sel_index", ",", "self", ".", "agg_index", ",", "conds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.from_dict": [[69, 72], ["cls"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "d", ",", "ordered", "=", "False", ")", ":", "\n", "        ", "return", "cls", "(", "sel_index", "=", "d", "[", "'sel'", "]", ",", "agg_index", "=", "d", "[", "'agg'", "]", ",", "conditions", "=", "d", "[", "'conds'", "]", ",", "ordered", "=", "ordered", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.from_tokenized_dict": [[73, 79], ["cls", "conds.append", "dataset_preprocessing.wikisql.lib.common.detokenize"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.common.detokenize"], ["", "@", "classmethod", "\n", "def", "from_tokenized_dict", "(", "cls", ",", "d", ")", ":", "\n", "        ", "conds", "=", "[", "]", "\n", "for", "col", ",", "op", ",", "val", "in", "d", "[", "'conds'", "]", ":", "\n", "            ", "conds", ".", "append", "(", "[", "col", ",", "op", ",", "detokenize", "(", "val", ")", "]", ")", "\n", "", "return", "cls", "(", "d", "[", "'sel'", "]", ",", "d", "[", "'agg'", "]", ",", "conds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.from_tokenized_dict_": [[80, 86], ["cls", "conds.append"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_tokenized_dict_", "(", "cls", ",", "d", ")", ":", "\n", "        ", "conds", "=", "[", "]", "\n", "for", "col", ",", "op", ",", "val", "in", "d", "[", "'conds'", "]", ":", "\n", "            ", "conds", ".", "append", "(", "[", "col", ",", "op", ",", "' '", ".", "join", "(", "val", "[", "'words'", "]", ")", "]", ")", "\n", "", "return", "cls", "(", "d", "[", "'sel'", "]", ",", "d", "[", "'agg'", "]", ",", "conds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.from_generated_dict": [[87, 94], ["cls", "len", "conds.append", "dataset_preprocessing.wikisql.lib.common.detokenize"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.common.detokenize"], ["", "@", "classmethod", "\n", "def", "from_generated_dict", "(", "cls", ",", "d", ")", ":", "\n", "        ", "conds", "=", "[", "]", "\n", "for", "col", ",", "op", ",", "val", "in", "d", "[", "'conds'", "]", ":", "\n", "            ", "end", "=", "len", "(", "val", "[", "'words'", "]", ")", "\n", "conds", ".", "append", "(", "[", "col", ",", "op", ",", "detokenize", "(", "val", ")", "]", ")", "\n", "", "return", "cls", "(", "d", "[", "'sel'", "]", ",", "d", "[", "'agg'", "]", ",", "conds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.to_str": [[96, 104], ["None"], "methods", ["None"], ["", "def", "to_str", "(", "self", ",", "header", ")", ":", "\n", "        ", "cond_ops", "=", "[", "'= ='", ",", "'> ='", ",", "'< ='", "]", "\n", "agg_str", "=", "header", "[", "self", ".", "sel_index", "]", "\n", "agg_op", "=", "self", ".", "agg_ops", "[", "self", ".", "agg_index", "]", "\n", "if", "agg_op", ":", "\n", "            ", "agg_str", "=", "'{} ( {} ) '", ".", "format", "(", "agg_op", ",", "agg_str", ")", "\n", "", "where_str", "=", "' & & '", ".", "join", "(", "[", "'{} {} {}'", ".", "format", "(", "header", "[", "i", "]", ",", "cond_ops", "[", "o", "]", ",", "v", ")", "for", "i", ",", "o", ",", "v", "in", "self", ".", "conditions", "]", ")", "\n", "return", "'SELECT {} WHERE {}'", ".", "format", "(", "agg_str", ",", "where_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.from_real_sequence": [[105, 158], ["sequence.lower.lower.lower", "sequence.lower.lower.replace().replace().replace().replace().replace", "cls", "header[].lower().replace", "sequence.lower.replace().replace().replace().replace().replace.find", "query[].split", "cls.agg_ops.index", "query[].split", "tuple", "range", "sequence.lower.lower.replace().replace().replace().replace", "sequence.lower.replace().replace().replace().replace().replace.split", "sel_query[].upper", "sel_query[].upper", "cond.split.split.split", "tuple.append", "header[].lower", "len", "len", "sequence.lower.lower.replace().replace().replace", "cond_op.index", "column.append", "value.append", "sequence.lower.lower.replace().replace", "len", "len", "sequence.lower.lower.replace"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower"], ["", "@", "classmethod", "\n", "def", "from_real_sequence", "(", "cls", ",", "sequence", ",", "header", ")", ":", "\n", "# print(header)", "\n", "        ", "sequence", "=", "sequence", ".", "lower", "(", ")", "\n", "headers", "=", "{", "header", "[", "i", "]", ".", "lower", "(", ")", ".", "replace", "(", "' '", ",", "''", ")", ":", "i", "for", "i", "in", "range", "(", "len", "(", "header", ")", ")", "}", "\n", "query", "=", "sequence", ".", "replace", "(", "'.'", ",", "' . '", ")", ".", "replace", "(", "','", ",", "' , '", ")", ".", "replace", "(", "\"'\"", ",", "\" ' \"", ")", ".", "replace", "(", "'!'", ",", "' ! '", ")", ".", "replace", "(", "'\"'", ",", "' \" '", ")", "\n", "try", ":", "\n", "            ", "where_ind", "=", "query", ".", "find", "(", "'where'", ")", "\n", "sel_query", "=", "query", "[", ":", "where_ind", "]", ".", "split", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "where_ind", "=", "-", "1", "\n", "sel_query", "=", "query", ".", "split", "(", ")", "\n", "\n", "", "if", "sel_query", "[", "1", "]", ".", "upper", "(", ")", "in", "cls", ".", "agg_ops", "and", "sel_query", "[", "2", "]", "==", "'('", ":", "\n", "            ", "agg_index", "=", "cls", ".", "agg_ops", ".", "index", "(", "sel_query", "[", "1", "]", ".", "upper", "(", ")", ")", "\n", "select_column", "=", "''", ".", "join", "(", "sel_query", "[", "3", ":", "-", "1", "]", ")", ".", "lower", "(", ")", "\n", "", "else", ":", "\n", "            ", "agg_index", "=", "0", "\n", "select_column", "=", "''", ".", "join", "(", "sel_query", "[", "1", ":", "]", ")", ".", "lower", "(", ")", "\n", "# print(select_column)", "\n", "", "sel_index", "=", "headers", "[", "select_column", "]", "\n", "\n", "cond_op", "=", "[", "'='", ",", "'>'", ",", "'<'", "]", "\n", "if", "where_ind", "!=", "-", "1", ":", "\n", "            ", "conds", "=", "query", "[", "where_ind", "+", "len", "(", "'where'", ")", ":", "]", ".", "split", "(", "' & & '", ")", "\n", "conds_to_return", "=", "[", "]", "\n", "for", "cond", "in", "conds", ":", "\n", "                ", "cond", "=", "cond", ".", "split", "(", ")", "\n", "value", "=", "[", "]", "\n", "column", "=", "[", "]", "\n", "op", "=", "None", "\n", "col", "=", "True", "\n", "index", "=", "0", "\n", "while", "index", "<", "len", "(", "cond", ")", ":", "\n", "                    ", "t", "=", "cond", "[", "index", "]", "\n", "if", "t", "in", "cond_op", "and", "index", "<", "(", "len", "(", "cond", ")", "-", "1", ")", "and", "cond", "[", "index", "+", "1", "]", "==", "'='", "and", "col", "is", "True", ":", "\n", "                        ", "op", "=", "cond_op", ".", "index", "(", "t", ")", "\n", "index", "+=", "1", "\n", "col", "=", "False", "\n", "", "elif", "col", "==", "True", ":", "\n", "                        ", "column", ".", "append", "(", "t", ")", "\n", "", "else", ":", "\n", "                        ", "value", ".", "append", "(", "t", ")", "\n", "", "index", "+=", "1", "\n", "# print(column)", "\n", "# print(value)", "\n", "#DON\"T REMOVE THE NEXT LINE", "\n", "", "cond_op", "[", "op", "]", "\n", "conds_to_return", ".", "append", "(", "[", "headers", "[", "''", ".", "join", "(", "column", ")", ".", "lower", "(", ")", "]", ",", "op", ",", "' '", ".", "join", "(", "value", ")", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "conds_to_return", "=", "tuple", "(", ")", "\n", "", "return", "cls", "(", "sel_index", ",", "agg_index", ",", "conds_to_return", ",", "ordered", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.from_sequence": [[159, 251], ["copy.deepcopy", "query.Query.from_sequence.flatten"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_sequence", "(", "cls", ",", "sequence", ",", "table", ",", "lowercase", "=", "True", ")", ":", "\n", "        ", "sequence", "=", "deepcopy", "(", "sequence", ")", "\n", "if", "'symend'", "in", "sequence", "[", "'words'", "]", ":", "\n", "            ", "end", "=", "sequence", "[", "'words'", "]", ".", "index", "(", "'symend'", ")", "\n", "for", "k", ",", "v", "in", "sequence", ".", "items", "(", ")", ":", "\n", "                ", "sequence", "[", "k", "]", "=", "v", "[", ":", "end", "]", "\n", "", "", "terms", "=", "[", "{", "'gloss'", ":", "g", ",", "'word'", ":", "w", ",", "'after'", ":", "a", "}", "for", "g", ",", "w", ",", "a", "in", "\n", "zip", "(", "sequence", "[", "'gloss'", "]", ",", "sequence", "[", "'words'", "]", ",", "sequence", "[", "'after'", "]", ")", "]", "\n", "headers", "=", "[", "detokenize", "(", "h", ")", "for", "h", "in", "table", "[", "'header'", "]", "]", "\n", "\n", "# lowercase everything and truncate sequence", "\n", "if", "lowercase", ":", "\n", "            ", "headers", "=", "[", "h", ".", "lower", "(", ")", "for", "h", "in", "headers", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "terms", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", ":", "\n", "                    ", "t", "[", "k", "]", "=", "v", ".", "lower", "(", ")", "\n", "", "", "", "headers_no_whitespcae", "=", "[", "re", ".", "sub", "(", "re_whitespace", ",", "''", ",", "h", ")", "for", "h", "in", "headers", "]", "\n", "\n", "# get select", "\n", "if", "'symselect'", "!=", "terms", ".", "pop", "(", "0", ")", "[", "'word'", "]", ":", "\n", "            ", "raise", "Exception", "(", "'Missing symselect operator'", ")", "\n", "\n", "# get aggregation", "\n", "", "if", "'symagg'", "!=", "terms", ".", "pop", "(", "0", ")", "[", "'word'", "]", ":", "\n", "            ", "raise", "Exception", "(", "'Missing symagg operator'", ")", "\n", "", "agg_op", "=", "terms", ".", "pop", "(", "0", ")", "[", "'word'", "]", "\n", "\n", "if", "agg_op", "==", "'symcol'", ":", "\n", "            ", "agg_op", "=", "''", "\n", "", "else", ":", "\n", "            ", "if", "'symcol'", "!=", "terms", ".", "pop", "(", "0", ")", "[", "'word'", "]", ":", "\n", "                ", "raise", "Exception", "(", "'Missing aggregation column'", ")", "\n", "", "", "try", ":", "\n", "            ", "agg_op", "=", "cls", ".", "agg_ops", ".", "index", "(", "agg_op", ".", "upper", "(", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "raise", "Exception", "(", "'Invalid agg op {}'", ".", "format", "(", "agg_op", ")", ")", "\n", "\n", "", "def", "find_column", "(", "name", ")", ":", "\n", "            ", "return", "headers_no_whitespcae", ".", "index", "(", "re", ".", "sub", "(", "re_whitespace", ",", "''", ",", "name", ")", ")", "\n", "\n", "", "def", "flatten", "(", "tokens", ")", ":", "\n", "            ", "ret", "=", "{", "'words'", ":", "[", "]", ",", "'after'", ":", "[", "]", ",", "'gloss'", ":", "[", "]", "}", "\n", "for", "t", "in", "tokens", ":", "\n", "                ", "ret", "[", "'words'", "]", ".", "append", "(", "t", "[", "'word'", "]", ")", "\n", "ret", "[", "'after'", "]", ".", "append", "(", "t", "[", "'after'", "]", ")", "\n", "ret", "[", "'gloss'", "]", ".", "append", "(", "t", "[", "'gloss'", "]", ")", "\n", "", "return", "ret", "\n", "\n", "", "where_index", "=", "[", "i", "for", "i", ",", "t", "in", "enumerate", "(", "terms", ")", "if", "t", "[", "'word'", "]", "==", "'symwhere'", "]", "\n", "where_index", "=", "where_index", "[", "0", "]", "if", "where_index", "else", "len", "(", "terms", ")", "\n", "flat", "=", "flatten", "(", "terms", "[", ":", "where_index", "]", ")", "\n", "try", ":", "\n", "            ", "agg_col", "=", "find_column", "(", "detokenize", "(", "flat", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "raise", "Exception", "(", "'Cannot find aggregation column {}'", ".", "format", "(", "flat", "[", "'words'", "]", ")", ")", "\n", "", "where_terms", "=", "terms", "[", "where_index", "+", "1", ":", "]", "\n", "\n", "# get conditions", "\n", "conditions", "=", "[", "]", "\n", "while", "where_terms", ":", "\n", "            ", "t", "=", "where_terms", ".", "pop", "(", "0", ")", "\n", "flat", "=", "flatten", "(", "where_terms", ")", "\n", "if", "t", "[", "'word'", "]", "!=", "'symcol'", ":", "\n", "                ", "raise", "Exception", "(", "'Missing conditional column {}'", ".", "format", "(", "flat", "[", "'words'", "]", ")", ")", "\n", "", "try", ":", "\n", "                ", "op_index", "=", "flat", "[", "'words'", "]", ".", "index", "(", "'symop'", ")", "\n", "col_tokens", "=", "flatten", "(", "where_terms", "[", ":", "op_index", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "raise", "Exception", "(", "'Missing conditional operator {}'", ".", "format", "(", "flat", "[", "'words'", "]", ")", ")", "\n", "", "cond_op", "=", "where_terms", "[", "op_index", "+", "1", "]", "[", "'word'", "]", "\n", "try", ":", "\n", "                ", "cond_op", "=", "cls", ".", "cond_ops", ".", "index", "(", "cond_op", ".", "upper", "(", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "raise", "Exception", "(", "'Invalid cond op {}'", ".", "format", "(", "cond_op", ")", ")", "\n", "", "try", ":", "\n", "                ", "cond_col", "=", "find_column", "(", "detokenize", "(", "col_tokens", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "raise", "Exception", "(", "'Cannot find conditional column {}'", ".", "format", "(", "col_tokens", "[", "'words'", "]", ")", ")", "\n", "", "try", ":", "\n", "                ", "val_index", "=", "flat", "[", "'words'", "]", ".", "index", "(", "'symcond'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "raise", "Exception", "(", "'Cannot find conditional value {}'", ".", "format", "(", "flat", "[", "'words'", "]", ")", ")", "\n", "\n", "", "where_terms", "=", "where_terms", "[", "val_index", "+", "1", ":", "]", "\n", "flat", "=", "flatten", "(", "where_terms", ")", "\n", "val_end_index", "=", "flat", "[", "'words'", "]", ".", "index", "(", "'symand'", ")", "if", "'symand'", "in", "flat", "[", "'words'", "]", "else", "len", "(", "where_terms", ")", "\n", "cond_val", "=", "detokenize", "(", "flatten", "(", "where_terms", "[", ":", "val_end_index", "]", ")", ")", "\n", "conditions", ".", "append", "(", "[", "cond_col", ",", "cond_op", ",", "cond_val", "]", ")", "\n", "where_terms", "=", "where_terms", "[", "val_end_index", "+", "1", ":", "]", "\n", "", "q", "=", "cls", "(", "agg_col", ",", "agg_op", ",", "conditions", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.from_partial_sequence": [[252, 320], ["copy.deepcopy", "cls", "sequence[].index", "copy.deepcopy.items", "dataset_preprocessing.wikisql.lib.common.detokenize", "enumerate", "re.sub", "headers_no_whitespcae.index", "len", "where_terms.pop", "query.Query.from_sequence.flatten"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.common.detokenize"], ["", "@", "classmethod", "\n", "def", "from_partial_sequence", "(", "cls", ",", "agg_col", ",", "agg_op", ",", "sequence", ",", "table", ",", "lowercase", "=", "True", ")", ":", "\n", "        ", "sequence", "=", "deepcopy", "(", "sequence", ")", "\n", "if", "'symend'", "in", "sequence", "[", "'words'", "]", ":", "\n", "            ", "end", "=", "sequence", "[", "'words'", "]", ".", "index", "(", "'symend'", ")", "\n", "for", "k", ",", "v", "in", "sequence", ".", "items", "(", ")", ":", "\n", "                ", "sequence", "[", "k", "]", "=", "v", "[", ":", "end", "]", "\n", "", "", "terms", "=", "[", "{", "'gloss'", ":", "g", ",", "'word'", ":", "w", ",", "'after'", ":", "a", "}", "for", "g", ",", "w", ",", "a", "in", "\n", "zip", "(", "sequence", "[", "'gloss'", "]", ",", "sequence", "[", "'words'", "]", ",", "sequence", "[", "'after'", "]", ")", "]", "\n", "headers", "=", "[", "detokenize", "(", "h", ")", "for", "h", "in", "table", "[", "'header'", "]", "]", "\n", "\n", "# lowercase everything and truncate sequence", "\n", "if", "lowercase", ":", "\n", "            ", "headers", "=", "[", "h", ".", "lower", "(", ")", "for", "h", "in", "headers", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "terms", ")", ":", "\n", "                ", "for", "k", ",", "v", "in", "t", ".", "items", "(", ")", ":", "\n", "                    ", "t", "[", "k", "]", "=", "v", ".", "lower", "(", ")", "\n", "", "", "", "headers_no_whitespcae", "=", "[", "re", ".", "sub", "(", "re_whitespace", ",", "''", ",", "h", ")", "for", "h", "in", "headers", "]", "\n", "\n", "def", "find_column", "(", "name", ")", ":", "\n", "            ", "return", "headers_no_whitespcae", ".", "index", "(", "re", ".", "sub", "(", "re_whitespace", ",", "''", ",", "name", ")", ")", "\n", "\n", "", "def", "flatten", "(", "tokens", ")", ":", "\n", "            ", "ret", "=", "{", "'words'", ":", "[", "]", ",", "'after'", ":", "[", "]", ",", "'gloss'", ":", "[", "]", "}", "\n", "for", "t", "in", "tokens", ":", "\n", "                ", "ret", "[", "'words'", "]", ".", "append", "(", "t", "[", "'word'", "]", ")", "\n", "ret", "[", "'after'", "]", ".", "append", "(", "t", "[", "'after'", "]", ")", "\n", "ret", "[", "'gloss'", "]", ".", "append", "(", "t", "[", "'gloss'", "]", ")", "\n", "", "return", "ret", "\n", "\n", "", "where_index", "=", "[", "i", "for", "i", ",", "t", "in", "enumerate", "(", "terms", ")", "if", "t", "[", "'word'", "]", "==", "'symwhere'", "]", "\n", "where_index", "=", "where_index", "[", "0", "]", "if", "where_index", "else", "len", "(", "terms", ")", "\n", "where_terms", "=", "terms", "[", "where_index", "+", "1", ":", "]", "\n", "\n", "# get conditions", "\n", "conditions", "=", "[", "]", "\n", "while", "where_terms", ":", "\n", "            ", "t", "=", "where_terms", ".", "pop", "(", "0", ")", "\n", "flat", "=", "flatten", "(", "where_terms", ")", "\n", "if", "t", "[", "'word'", "]", "!=", "'symcol'", ":", "\n", "                ", "raise", "Exception", "(", "'Missing conditional column {}'", ".", "format", "(", "flat", "[", "'words'", "]", ")", ")", "\n", "", "try", ":", "\n", "                ", "op_index", "=", "flat", "[", "'words'", "]", ".", "index", "(", "'symop'", ")", "\n", "col_tokens", "=", "flatten", "(", "where_terms", "[", ":", "op_index", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "raise", "Exception", "(", "'Missing conditional operator {}'", ".", "format", "(", "flat", "[", "'words'", "]", ")", ")", "\n", "", "cond_op", "=", "where_terms", "[", "op_index", "+", "1", "]", "[", "'word'", "]", "\n", "try", ":", "\n", "                ", "cond_op", "=", "cls", ".", "cond_ops", ".", "index", "(", "cond_op", ".", "upper", "(", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "raise", "Exception", "(", "'Invalid cond op {}'", ".", "format", "(", "cond_op", ")", ")", "\n", "", "try", ":", "\n", "                ", "cond_col", "=", "find_column", "(", "detokenize", "(", "col_tokens", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "raise", "Exception", "(", "'Cannot find conditional column {}'", ".", "format", "(", "col_tokens", "[", "'words'", "]", ")", ")", "\n", "", "try", ":", "\n", "                ", "val_index", "=", "flat", "[", "'words'", "]", ".", "index", "(", "'symcond'", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "raise", "Exception", "(", "'Cannot find conditional value {}'", ".", "format", "(", "flat", "[", "'words'", "]", ")", ")", "\n", "\n", "", "where_terms", "=", "where_terms", "[", "val_index", "+", "1", ":", "]", "\n", "flat", "=", "flatten", "(", "where_terms", ")", "\n", "val_end_index", "=", "flat", "[", "'words'", "]", ".", "index", "(", "'symand'", ")", "if", "'symand'", "in", "flat", "[", "'words'", "]", "else", "len", "(", "where_terms", ")", "\n", "cond_val", "=", "detokenize", "(", "flatten", "(", "where_terms", "[", ":", "val_end_index", "]", ")", ")", "\n", "conditions", ".", "append", "(", "[", "cond_col", ",", "cond_op", ",", "cond_val", "]", ")", "\n", "where_terms", "=", "where_terms", "[", "val_end_index", "+", "1", ":", "]", "\n", "", "q", "=", "cls", "(", "agg_col", ",", "agg_op", ",", "conditions", ")", "\n", "return", "q", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.__init__": [[20, 26], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "table_id", ",", "header", ",", "types", ",", "rows", ",", "caption", "=", "None", ")", ":", "\n", "        ", "self", ".", "table_id", "=", "table_id", "\n", "self", ".", "header", "=", "header", "\n", "self", ".", "types", "=", "types", "\n", "self", ".", "rows", "=", "rows", "\n", "self", ".", "caption", "=", "caption", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.__repr__": [[27, 32], ["tabulate.tabulate.tabulate"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'Table: {id}\\nCaption: {caption}\\n{tabulate}'", ".", "format", "(", "\n", "id", "=", "self", ".", "table_id", ",", "\n", "caption", "=", "self", ".", "caption", ",", "\n", "tabulate", "=", "tabulate", "(", "self", ".", "rows", ",", "headers", "=", "self", ".", "header", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.get_schema": [[34, 41], ["db.query().all", "db.query", "cls.get_id"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.get_id"], ["", "@", "classmethod", "\n", "def", "get_schema", "(", "cls", ",", "db", ",", "table_id", ")", ":", "\n", "        ", "table_infos", "=", "db", ".", "query", "(", "'SELECT sql from sqlite_master WHERE tbl_name = :name'", ",", "name", "=", "cls", ".", "get_id", "(", "table_id", ")", ")", ".", "all", "(", ")", "\n", "if", "table_infos", ":", "\n", "            ", "return", "table_infos", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.get_id": [[42, 45], ["table_id.replace"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "get_id", "(", "cls", ",", "table_id", ")", ":", "\n", "        ", "return", "'table_{}'", ".", "format", "(", "table_id", ".", "replace", "(", "'-'", ",", "'_'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.from_db": [[46, 60], ["cls.get_schema", "schema_str.split", "cls", "cls.schema_re.findall", "tup.split", "header.append", "types.append", "getattr", "db.query", "cls.get_id"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.get_schema", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.get_id"], ["", "@", "classmethod", "\n", "def", "from_db", "(", "cls", ",", "db", ",", "table_id", ")", ":", "\n", "        ", "table_info", "=", "cls", ".", "get_schema", "(", "db", ",", "table_id", ")", "\n", "if", "table_info", ":", "\n", "            ", "schema_str", "=", "cls", ".", "schema_re", ".", "findall", "(", "table_info", ")", "[", "0", "]", "=", "[", "0", "]", ".", "sql", "\n", "header", ",", "types", "=", "[", "]", ",", "[", "]", "\n", "for", "tup", "in", "schema_str", ".", "split", "(", "', '", ")", ":", "\n", "                ", "c", ",", "t", "=", "tup", ".", "split", "(", ")", "\n", "header", ".", "append", "(", "c", ")", "\n", "types", ".", "append", "(", "t", ")", "\n", "", "rows", "=", "[", "[", "getattr", "(", "r", ",", "h", ")", "for", "h", "in", "header", "]", "for", "r", "in", "db", ".", "query", "(", "'SELECT * from {}'", ".", "format", "(", "cls", ".", "get_id", "(", "table_id", ")", ")", ")", "]", "\n", "return", "cls", "(", "table_id", ",", "header", ",", "types", ",", "rows", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.name": [[61, 64], ["table.Table.get_id"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.get_id"], ["", "", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_id", "(", "self", ".", "table_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.create_table": [[65, 80], ["table.Table.get_schema", "db.query", "db.query", "db.query", "enumerate", "enumerate", "enumerate", "isinstance", "v.lower", "value_dict.items"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.get_schema", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower"], ["", "def", "create_table", "(", "self", ",", "db", ",", "replace_existing", "=", "False", ",", "lower", "=", "True", ")", ":", "\n", "        ", "exists", "=", "self", ".", "get_schema", "(", "db", ",", "self", ".", "table_id", ")", "\n", "if", "exists", ":", "\n", "            ", "if", "replace_existing", ":", "\n", "                ", "db", ".", "query", "(", "'DROP TABLE {}'", ".", "format", "(", "self", ".", "name", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "\n", "", "", "type_str", "=", "', '", ".", "join", "(", "[", "'col{} {}'", ".", "format", "(", "i", ",", "t", ")", "for", "i", ",", "t", "in", "enumerate", "(", "self", ".", "types", ")", "]", ")", "\n", "db", ".", "query", "(", "'CREATE TABLE {name} ({types})'", ".", "format", "(", "name", "=", "self", ".", "name", ",", "types", "=", "type_str", ")", ")", "\n", "for", "row", "in", "self", ".", "rows", ":", "\n", "            ", "value_str", "=", "', '", ".", "join", "(", "[", "':val{}'", ".", "format", "(", "j", ")", "for", "j", ",", "c", "in", "enumerate", "(", "row", ")", "]", ")", "\n", "value_dict", "=", "{", "'val{}'", ".", "format", "(", "j", ")", ":", "c", "for", "j", ",", "c", "in", "enumerate", "(", "row", ")", "}", "\n", "if", "lower", ":", "\n", "                ", "value_dict", "=", "{", "k", ":", "v", ".", "lower", "(", ")", "if", "isinstance", "(", "v", ",", "str", ")", "else", "v", "for", "k", ",", "v", "in", "value_dict", ".", "items", "(", ")", "}", "\n", "", "db", ".", "query", "(", "'INSERT INTO {name} VALUES ({values})'", ".", "format", "(", "name", "=", "self", ".", "name", ",", "values", "=", "value_str", ")", ",", "**", "value_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.execute_query": [[81, 100], ["isinstance", "v.lower", "where_map.items", "db.query", "getattr", "db.query", "range", "len"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower"], ["", "", "def", "execute_query", "(", "self", ",", "db", ",", "query", ",", "lower", "=", "True", ")", ":", "\n", "        ", "sel_str", "=", "'col{}'", ".", "format", "(", "query", ".", "sel_index", ")", "if", "query", ".", "sel_index", ">=", "0", "else", "'*'", "\n", "agg_str", "=", "sel_str", "\n", "agg_op", "=", "Query", ".", "agg_ops", "[", "query", ".", "agg_index", "]", "\n", "if", "agg_op", ":", "\n", "            ", "agg_str", "=", "'{}({})'", ".", "format", "(", "agg_op", ",", "sel_str", ")", "\n", "", "where_str", "=", "' AND '", ".", "join", "(", "[", "'col{} {} :col{}'", ".", "format", "(", "i", ",", "Query", ".", "cond_ops", "[", "o", "]", ",", "i", ")", "for", "i", ",", "o", ",", "v", "in", "query", ".", "conditions", "]", ")", "\n", "where_map", "=", "{", "'col{}'", ".", "format", "(", "i", ")", ":", "v", "for", "i", ",", "o", ",", "v", "in", "query", ".", "conditions", "}", "\n", "if", "lower", ":", "\n", "            ", "where_map", "=", "{", "k", ":", "v", ".", "lower", "(", ")", "if", "isinstance", "(", "v", ",", "str", ")", "else", "v", "for", "k", ",", "v", "in", "where_map", ".", "items", "(", ")", "}", "\n", "", "if", "where_map", ":", "\n", "            ", "where_str", "=", "'WHERE '", "+", "where_str", "\n", "\n", "", "if", "query", ".", "sel_index", ">=", "0", ":", "\n", "            ", "query_str", "=", "'SELECT {agg_str} AS result FROM {name} {where_str}'", ".", "format", "(", "agg_str", "=", "agg_str", ",", "name", "=", "self", ".", "name", ",", "where_str", "=", "where_str", ")", "\n", "return", "[", "r", ".", "result", "for", "r", "in", "db", ".", "query", "(", "query_str", ",", "**", "where_map", ")", "]", "\n", "", "else", ":", "\n", "            ", "query_str", "=", "'SELECT {agg_str} FROM {name} {where_str}'", ".", "format", "(", "agg_str", "=", "agg_str", ",", "name", "=", "self", ".", "name", ",", "where_str", "=", "where_str", ")", "\n", "return", "[", "[", "getattr", "(", "r", ",", "'col{}'", ".", "format", "(", "i", ")", ")", "for", "i", "in", "range", "(", "len", "(", "self", ".", "header", ")", ")", "]", "for", "r", "in", "db", ".", "query", "(", "query_str", ",", "**", "where_map", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.query_str": [[101, 108], ["None"], "methods", ["None"], ["", "", "def", "query_str", "(", "self", ",", "query", ")", ":", "\n", "        ", "agg_str", "=", "self", ".", "header", "[", "query", ".", "sel_index", "]", "\n", "agg_op", "=", "Query", ".", "agg_ops", "[", "query", ".", "agg_index", "]", "\n", "if", "agg_op", ":", "\n", "            ", "agg_str", "=", "'{}({})'", ".", "format", "(", "agg_op", ",", "agg_str", ")", "\n", "", "where_str", "=", "' AND '", ".", "join", "(", "[", "'{} {} {}'", ".", "format", "(", "self", ".", "header", "[", "i", "]", ",", "Query", ".", "cond_ops", "[", "o", "]", ",", "v", ")", "for", "i", ",", "o", ",", "v", "in", "query", ".", "conditions", "]", ")", "\n", "return", "'SELECT {} FROM {} WHERE {}'", ".", "format", "(", "agg_str", ",", "self", ".", "name", ",", "where_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.generate_query": [[109, 142], ["min", "random.choice", "dataset_preprocessing.wikisql.lib.query.Query", "table.Table.execute_query", "list", "list.remove", "range", "table.Table.execute_query", "len", "list", "dataset_preprocessing.wikisql.lib.query.Query.agg_ops.index", "range", "random.choice", "random.choice", "dataset_preprocessing.wikisql.lib.query.Query.conditions.append", "table.Table.execute_query", "dataset_preprocessing.wikisql.lib.query.Query.agg_ops.index", "random.choice", "range", "len", "dataset_preprocessing.wikisql.lib.query.Query.cond_ops.index", "random.choice", "list.remove", "dataset_preprocessing.wikisql.lib.query.Query.conditions.pop", "list", "len", "list", "range", "range", "len", "len"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.execute_query", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.execute_query", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.execute_query"], ["", "def", "generate_query", "(", "self", ",", "db", ",", "max_cond", "=", "4", ")", ":", "\n", "        ", "max_cond", "=", "min", "(", "len", "(", "self", ".", "header", ")", ",", "max_cond", ")", "\n", "# sample a select column", "\n", "sel_index", "=", "random", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "self", ".", "header", ")", ")", ")", ")", "\n", "# sample where conditions", "\n", "query", "=", "Query", "(", "-", "1", ",", "Query", ".", "agg_ops", ".", "index", "(", "''", ")", ")", "\n", "results", "=", "self", ".", "execute_query", "(", "db", ",", "query", ")", "\n", "condition_options", "=", "list", "(", "range", "(", "len", "(", "self", ".", "header", ")", ")", ")", "\n", "condition_options", ".", "remove", "(", "sel_index", ")", "\n", "for", "i", "in", "range", "(", "max_cond", ")", ":", "\n", "            ", "if", "not", "results", ":", "\n", "                ", "break", "\n", "", "cond_index", "=", "random", ".", "choice", "(", "condition_options", ")", "\n", "if", "self", ".", "types", "[", "cond_index", "]", "==", "'text'", ":", "\n", "                ", "cond_op", "=", "Query", ".", "cond_ops", ".", "index", "(", "'='", ")", "\n", "", "else", ":", "\n", "                ", "cond_op", "=", "random", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "Query", ".", "cond_ops", ")", ")", ")", ")", "\n", "", "cond_val", "=", "random", ".", "choice", "(", "[", "r", "[", "cond_index", "]", "for", "r", "in", "results", "]", ")", "\n", "query", ".", "conditions", ".", "append", "(", "(", "cond_index", ",", "cond_op", ",", "cond_val", ")", ")", "\n", "new_results", "=", "self", ".", "execute_query", "(", "db", ",", "query", ")", "\n", "if", "[", "r", "[", "sel_index", "]", "for", "r", "in", "new_results", "]", "!=", "[", "r", "[", "sel_index", "]", "for", "r", "in", "results", "]", ":", "\n", "                ", "condition_options", ".", "remove", "(", "cond_index", ")", "\n", "results", "=", "new_results", "\n", "", "else", ":", "\n", "                ", "query", ".", "conditions", ".", "pop", "(", ")", "\n", "# sample an aggregation operation", "\n", "", "", "if", "self", ".", "types", "[", "sel_index", "]", "==", "'text'", ":", "\n", "            ", "query", ".", "agg_index", "=", "Query", ".", "agg_ops", ".", "index", "(", "''", ")", "\n", "", "else", ":", "\n", "            ", "query", ".", "agg_index", "=", "random", ".", "choice", "(", "list", "(", "range", "(", "len", "(", "Query", ".", "agg_ops", ")", ")", ")", ")", "\n", "", "query", ".", "sel_index", "=", "sel_index", "\n", "results", "=", "self", ".", "execute_query", "(", "db", ",", "query", ")", "\n", "return", "query", ",", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.generate_queries": [[143, 154], ["range", "table.Table.generate_query", "qs.append"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.table.Table.generate_query"], ["", "def", "generate_queries", "(", "self", ",", "db", ",", "n", "=", "1", ",", "max_tries", "=", "5", ",", "lower", "=", "True", ")", ":", "\n", "        ", "qs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "n_tries", "=", "0", "\n", "r", "=", "None", "\n", "while", "r", "is", "None", "and", "n_tries", "<", "max_tries", ":", "\n", "                ", "q", ",", "r", "=", "self", ".", "generate_query", "(", "db", ",", "max_cond", "=", "4", ")", "\n", "n_tries", "+=", "1", "\n", "", "if", "r", ":", "\n", "                ", "qs", ".", "append", "(", "(", "q", ",", "r", ")", ")", "\n", "", "", "return", "qs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.common.count_lines": [[10, 13], ["open", "sum"], "function", ["None"], ["def", "count_lines", "(", "fname", ")", ":", "\n", "    ", "with", "open", "(", "fname", ")", "as", "f", ":", "\n", "        ", "return", "sum", "(", "1", "for", "line", "in", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.common.detokenize": [[15, 20], ["zip", "ret.strip"], "function", ["None"], ["", "", "def", "detokenize", "(", "tokens", ")", ":", "\n", "    ", "ret", "=", "''", "\n", "for", "g", ",", "a", "in", "zip", "(", "tokens", "[", "'gloss'", "]", ",", "tokens", "[", "'after'", "]", ")", ":", "\n", "        ", "ret", "+=", "g", "+", "a", "\n", "", "return", "ret", ".", "strip", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.__init__": [[24, 27], ["records.Database", "db_engine.DBEngine.db.get_connection"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fdb", ")", ":", "\n", "        ", "self", ".", "db", "=", "records", ".", "Database", "(", "'sqlite:///{}'", ".", "format", "(", "fdb", ")", ")", "\n", "self", ".", "conn", "=", "self", ".", "db", ".", "get_connection", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.execute_query": [[29, 31], ["db_engine.DBEngine.execute"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.execute"], ["", "def", "execute_query", "(", "self", ",", "table_id", ",", "query", ",", "iws", "=", "False", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "execute", "(", "table_id", ",", "query", ".", "sel_index", ",", "query", ".", "agg_index", ",", "query", ".", "conditions", ",", "ignore_white_space", "=", "iws", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.execute": [[32, 66], ["schema_str.split", "db_engine.DBEngine.conn.query", "table_id.startswith", "schema_re.findall", "tup.split", "table_id.replace", "db_engine.DBEngine.conn.query().all", "isinstance", "float.lower", "where_clause.append", "where_clause.append", "isinstance", "float", "db_engine.DBEngine.conn.query", "babel.numbers.parse_decimal", "float", "num_re.findall"], "methods", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower"], ["", "def", "execute", "(", "self", ",", "table_id", ",", "select_index", ",", "aggregation_index", ",", "conditions", ",", "lower", "=", "True", ",", "ignore_white_space", "=", "False", ")", ":", "\n", "        ", "if", "not", "table_id", ".", "startswith", "(", "'table'", ")", ":", "\n", "            ", "table_id", "=", "'table_{}'", ".", "format", "(", "table_id", ".", "replace", "(", "'-'", ",", "'_'", ")", ")", "\n", "", "table_info", "=", "self", ".", "conn", ".", "query", "(", "'SELECT sql from sqlite_master WHERE tbl_name = :name'", ",", "name", "=", "table_id", ")", ".", "all", "(", ")", "[", "0", "]", ".", "sql", "\n", "schema_str", "=", "schema_re", ".", "findall", "(", "table_info", ")", "[", "0", "]", "\n", "schema", "=", "{", "}", "\n", "for", "tup", "in", "schema_str", ".", "split", "(", "', '", ")", ":", "\n", "            ", "c", ",", "t", "=", "tup", ".", "split", "(", ")", "\n", "schema", "[", "c", "]", "=", "t", "\n", "", "select", "=", "'col{}'", ".", "format", "(", "select_index", ")", "\n", "agg", "=", "Query", ".", "agg_ops", "[", "aggregation_index", "]", "\n", "if", "agg", ":", "\n", "            ", "select", "=", "'{}({})'", ".", "format", "(", "agg", ",", "select", ")", "\n", "", "where_clause", "=", "[", "]", "\n", "where_map", "=", "{", "}", "\n", "for", "col_index", ",", "op", ",", "val", "in", "conditions", ":", "\n", "            ", "if", "lower", "and", "isinstance", "(", "val", ",", "str", ")", ":", "\n", "                ", "val", "=", "val", ".", "lower", "(", ")", "\n", "", "if", "schema", "[", "'col{}'", ".", "format", "(", "col_index", ")", "]", "==", "'real'", "and", "not", "isinstance", "(", "val", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "val", "=", "float", "(", "parse_decimal", "(", "val", ")", ")", "\n", "", "except", "NumberFormatError", "as", "e", ":", "\n", "                    ", "val", "=", "float", "(", "num_re", ".", "findall", "(", "val", ")", "[", "0", "]", ")", "\n", "", "", "if", "ignore_white_space", "and", "schema", "[", "'col{}'", ".", "format", "(", "col_index", ")", "]", "==", "'text'", ":", "\n", "                ", "where_clause", ".", "append", "(", "'REPLACE( col{}, \" \", \"\") {} :col{}'", ".", "format", "(", "col_index", ",", "Query", ".", "cond_ops", "[", "op", "]", ",", "col_index", ")", ")", "\n", "", "else", ":", "\n", "                ", "where_clause", ".", "append", "(", "'col{} {} :col{}'", ".", "format", "(", "col_index", ",", "Query", ".", "cond_ops", "[", "op", "]", ",", "col_index", ")", ")", "\n", "", "where_map", "[", "'col{}'", ".", "format", "(", "col_index", ")", "]", "=", "val", "\n", "", "where_str", "=", "''", "\n", "if", "where_clause", ":", "\n", "            ", "where_str", "=", "'WHERE '", "+", "' AND '", ".", "join", "(", "where_clause", ")", "\n", "", "query", "=", "'SELECT {} AS result FROM {} {}'", ".", "format", "(", "select", ",", "table_id", ",", "where_str", ")", "\n", "out", "=", "self", ".", "conn", ".", "query", "(", "query", ",", "**", "where_map", ")", "\n", "return", "[", "o", ".", "result", "for", "o", "in", "out", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu._get_ngrams": [[30, 37], ["collections.Counter", "range", "range", "tuple", "len"], "function", ["None"], ["def", "_get_ngrams", "(", "segment", ",", "max_order", ")", ":", "\n", "  ", "ngram_counts", "=", "collections", ".", "Counter", "(", ")", "\n", "for", "order", "in", "range", "(", "1", ",", "max_order", "+", "1", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "segment", ")", "-", "order", "+", "1", ")", ":", "\n", "      ", "ngram", "=", "tuple", "(", "segment", "[", "i", ":", "i", "+", "order", "]", ")", "\n", "ngram_counts", "[", "ngram", "]", "+=", "1", "\n", "", "", "return", "ngram_counts", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu.tokenize_for_bleu_eval_python": [[39, 47], ["re.sub", "re.sub", "re.sub", "code.replace.replace", "code.replace.replace", "code.replace.split"], "function", ["None"], ["", "def", "tokenize_for_bleu_eval_python", "(", "code", ")", ":", "\n", "    ", "code", "=", "re", ".", "sub", "(", "r'([^A-Za-z0-9_])'", ",", "r' \\1 '", ",", "code", ")", "\n", "code", "=", "re", ".", "sub", "(", "r'([a-z])([A-Z])'", ",", "r'\\1 \\2'", ",", "code", ")", "\n", "code", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "code", ")", "\n", "code", "=", "code", ".", "replace", "(", "'\"'", ",", "'`'", ")", "\n", "code", "=", "code", ".", "replace", "(", "'\\''", ",", "'`'", ")", "\n", "tokens", "=", "[", "t", "for", "t", "in", "code", ".", "split", "(", "' '", ")", "if", "t", "]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu.tokenize_for_bleu_java": [[49, 59], ["re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "re.sub", "code.replace.replace", "code.replace.replace"], "function", ["None"], ["", "def", "tokenize_for_bleu_java", "(", "code", ")", ":", "\n", "    ", "code", "=", "re", ".", "sub", "(", "r'([^A-Za-z0-9])'", ",", "r' \\1 '", ",", "code", ")", "# split by punct", "\n", "code", "=", "re", ".", "sub", "(", "r'([a-z])([A-Z])'", ",", "r'\\1 \\2'", ",", "code", ")", "# split camel", "\n", "code", "=", "re", ".", "sub", "(", "r'([0-9])([A-Z])'", ",", "r'\\1 \\2'", ",", "code", ")", "# split camel", "\n", "code", "=", "re", ".", "sub", "(", "r'(# )+'", ",", "'# '", ",", "code", ")", "# new lines to new line", "\n", "code", "=", "re", ".", "sub", "(", "r'\\. # '", ",", "'.'", ",", "code", ")", "\n", "code", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "code", ")", "# spaces to single space", "\n", "code", "=", "code", ".", "replace", "(", "'\"'", ",", "'`'", ")", "# quote", "\n", "code", "=", "code", ".", "replace", "(", "'\\''", ",", "'`'", ")", "# quote", "\n", "return", "code", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu.tokenize_for_bleu_eval_sql": [[61, 72], ["re.sub", "re.sub", "re.sub", "code.lower.replace", "code.lower.replace", "code.lower.replace", "re.sub", "code.lower.lower", "code.lower.split"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower"], ["", "def", "tokenize_for_bleu_eval_sql", "(", "code", ")", ":", "\n", "    ", "code", "=", "re", ".", "sub", "(", "r'([^A-Za-z0-9])'", ",", "r' \\1 '", ",", "code", ")", "\n", "code", "=", "re", ".", "sub", "(", "r'([a-z])([A-Z])'", ",", "r'\\1 \\2'", ",", "code", ")", "\n", "code", "=", "re", ".", "sub", "(", "r'([0-9])([A-Z])'", ",", "r'\\1 \\2'", ",", "code", ")", "\n", "code", "=", "code", ".", "replace", "(", "'\"'", ",", "''", ")", "\n", "code", "=", "code", ".", "replace", "(", "'\\''", ",", "''", ")", "\n", "code", "=", "code", ".", "replace", "(", "\";\"", ",", "''", ")", "\n", "code", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "code", ")", "\n", "code", "=", "code", ".", "lower", "(", ")", "\n", "tokens", "=", "[", "t", "for", "t", "in", "code", ".", "split", "(", "' '", ")", "if", "t", "]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu.remove_s": [[74, 78], ["re.sub", "re.sub"], "function", ["None"], ["", "def", "remove_s", "(", "string", ")", ":", "\n", "    ", "string", "=", "re", ".", "sub", "(", "r'( _ _ )([a-z]+)( _ _ )'", ",", "r'__\\2__'", ",", "string", ")", "\n", "string", "=", "re", ".", "sub", "(", "r'([a-z]+)( _ )([a-z]+)'", ",", "r'\\1_\\3'", ",", "string", ")", "\n", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu.remove_spaces": [[80, 102], ["utils.my_detokenize_code", "utils.my_detokenize_code.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "detokenized_code.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace", "ast.parse", "astor.to_source().strip", "utils.my_detokenize_code.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "detokenized_code.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace", "astor.to_source", "ast.parse", "ast.parse", "utils.my_detokenize_code.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "detokenized_code.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace", "utils.my_detokenize_code.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "utils.my_detokenize_code.replace().replace().replace().replace().replace().replace().replace().replace().replace", "utils.my_detokenize_code.replace().replace().replace().replace().replace().replace().replace().replace", "utils.my_detokenize_code.replace().replace().replace().replace().replace().replace().replace", "utils.my_detokenize_code.replace().replace().replace().replace().replace().replace", "utils.my_detokenize_code.replace().replace().replace().replace().replace", "utils.my_detokenize_code.replace().replace().replace().replace", "utils.my_detokenize_code.replace().replace().replace", "utils.my_detokenize_code.replace().replace", "utils.my_detokenize_code.replace"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.my_detokenize_code"], ["", "def", "remove_spaces", "(", "mistake", ",", "intent", ")", ":", "\n", "    ", "detokenized_code", "=", "my_detokenize_code", "(", "mistake", ",", "intent", ")", "\n", "final_code", "=", "detokenized_code", ".", "replace", "(", "\"* *\"", ",", "\"**\"", ")", ".", "replace", "(", "'+ ='", ",", "'+='", ")", ".", "replace", "(", "'- ='", ",", "'-='", ")", ".", "replace", "(", "'! ='", ",", "'!='", ")", ".", "replace", "(", "'= ='", ",", "'=='", ")", ".", "replace", "(", "'< ='", ",", "'<='", ")", ".", "replace", "(", "'> ='", ",", "'>='", ")", ".", "replace", "(", "'/ /'", ",", "'//'", ")", ".", "replace", "(", "'except'", ",", "'\\nexcept'", ")", ".", "replace", "(", "'finally'", ",", "'\\nfinally'", ")", ".", "replace", "(", "'< <'", ",", "'<<'", ")", ".", "replace", "(", "'> >'", ",", "'>>'", ")", ".", "replace", "(", "'elif'", ",", "'\\nelif'", ")", "\n", "no_space", "=", "final_code", ".", "replace", "(", "' _ '", ",", "'_'", ")", ".", "replace", "(", "'_ '", ",", "'_'", ")", ".", "replace", "(", "' _'", ",", "'_'", ")", "\n", "try", ":", "\n", "        ", "tree", "=", "ast", ".", "parse", "(", "no_space", ")", "\n", "return", "astor", ".", "to_source", "(", "tree", ")", ".", "strip", "(", ")", "\n", "", "except", "SyntaxError", ":", "\n", "        ", "final_code_valid", "=", "False", "\n", "try", ":", "\n", "            ", "ast", ".", "parse", "(", "final_code", ")", "\n", "final_code_valid", "=", "True", "\n", "ast", ".", "parse", "(", "no_space", ")", "\n", "", "except", ":", "\n", "            ", "if", "final_code_valid", "==", "True", ":", "\n", "                ", "pass", "\n", "#print(\"syntax error\")", "\n", "#print(final_code)", "\n", "#print(no_space)", "\n", "", "", "return", "final_code", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu.compute_bleu": [[104, 182], ["range", "nltk.translate.bleu_score.sentence_bleu", "min", "len", "collections.Counter", "compute_bleu._get_ngrams", "range", "min", "sum", "math.exp", "float", "dataset_preprocessing.conala.Conala.decanonicalize_code", "compute_bleu.remove_spaces", "compute_bleu.tokenize_for_bleu_eval_python", "compute_bleu.tokenize_for_bleu_eval_python", "compute_bleu._get_ngrams", "math.exp", "len", "dataset_preprocessing.conala.Conala.decanonicalize_code", "compute_bleu.tokenize_for_bleu_java", "compute_bleu.tokenize_for_bleu_java", "compute_bleu.tokenize_for_bleu_eval_sql", "compute_bleu.tokenize_for_bleu_eval_sql", "len", "nltk.translate.bleu_score.SmoothingFunction", "len", "float", "math.log", "len"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu._get_ngrams", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.decanonicalize_code", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu.remove_spaces", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu.tokenize_for_bleu_eval_python", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu.tokenize_for_bleu_eval_python", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu._get_ngrams", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.dataset_preprocessing.conala.Conala.decanonicalize_code", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu.tokenize_for_bleu_java", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu.tokenize_for_bleu_java", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu.tokenize_for_bleu_eval_sql", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu.tokenize_for_bleu_eval_sql"], ["", "", "def", "compute_bleu", "(", "translation_corpus", ",", "dataset_object", ",", "section", ",", "args", ",", "max_order", "=", "4", ",", "smooth", "=", "False", ")", ":", "\n", "    ", "matches_by_order", "=", "[", "0", "]", "*", "max_order", "\n", "possible_matches_by_order", "=", "[", "0", "]", "*", "max_order", "\n", "reference_length", "=", "0", "\n", "translation_length", "=", "0", "\n", "bleu_sentence", "=", "0", "\n", "\n", "for", "index", "in", "section", ":", "\n", "        ", "translation", "=", "translation_corpus", "[", "index", "]", "\n", "if", "args", ".", "translate_backward", ":", "\n", "            ", "reference", "=", "' '", ".", "join", "(", "dataset_object", "[", "index", "]", "[", "'intent'", "]", "[", "'words'", "]", ")", "\n", "", "else", ":", "\n", "            ", "reference", "=", "dataset_object", "[", "index", "]", "[", "'snippet'", "]", "\n", "\n", "", "if", "args", ".", "python", "is", "True", "and", "args", ".", "translate_backward", "is", "False", ":", "\n", "            ", "slot_map", "=", "dataset_object", "[", "index", "]", "[", "'slot_map'", "]", "\n", "ref", "=", "Conala", ".", "decanonicalize_code", "(", "reference", ",", "slot_map", ")", "\n", "hype", "=", "remove_spaces", "(", "Conala", ".", "decanonicalize_code", "(", "translation", ",", "slot_map", ")", ",", "dataset_object", "[", "index", "]", "[", "'intent'", "]", ")", "\n", "# print('ref', ref)", "\n", "# print('hype', hype)", "\n", "reference", "=", "tokenize_for_bleu_eval_python", "(", "ref", ")", "\n", "translation", "=", "tokenize_for_bleu_eval_python", "(", "hype", ")", "\n", "", "elif", "args", ".", "dataset_name", "==", "'magic'", ":", "\n", "            ", "reference", "=", "tokenize_for_bleu_java", "(", "reference", ")", "\n", "translation", "=", "tokenize_for_bleu_java", "(", "translation", ")", "\n", "", "else", ":", "\n", "            ", "reference", "=", "tokenize_for_bleu_eval_sql", "(", "reference", ")", "\n", "translation", "=", "tokenize_for_bleu_eval_sql", "(", "translation", ")", "\n", "", "references", "=", "[", "reference", "]", "\n", "bleu_sentence", "+=", "nltk", ".", "translate", ".", "bleu_score", ".", "sentence_bleu", "(", "references", ",", "\n", "translation", ",", "\n", "smoothing_function", "=", "SmoothingFunction", "(", ")", ".", "method3", ")", "\n", "\n", "reference_length", "+=", "min", "(", "len", "(", "r", ")", "for", "r", "in", "references", ")", "\n", "translation_length", "+=", "len", "(", "translation", ")", "\n", "\n", "merged_ref_ngram_counts", "=", "collections", ".", "Counter", "(", ")", "\n", "for", "reference", "in", "references", ":", "\n", "            ", "merged_ref_ngram_counts", "|=", "_get_ngrams", "(", "reference", ",", "max_order", ")", "\n", "", "translation_ngram_counts", "=", "_get_ngrams", "(", "translation", ",", "max_order", ")", "\n", "overlap", "=", "translation_ngram_counts", "&", "merged_ref_ngram_counts", "\n", "for", "ngram", "in", "overlap", ":", "\n", "            ", "matches_by_order", "[", "len", "(", "ngram", ")", "-", "1", "]", "+=", "overlap", "[", "ngram", "]", "\n", "", "for", "order", "in", "range", "(", "1", ",", "max_order", "+", "1", ")", ":", "\n", "            ", "possible_matches", "=", "len", "(", "translation", ")", "-", "order", "+", "1", "\n", "if", "possible_matches", ">", "0", ":", "\n", "                ", "possible_matches_by_order", "[", "order", "-", "1", "]", "+=", "possible_matches", "\n", "\n", "", "", "", "precisions", "=", "[", "0", "]", "*", "max_order", "\n", "for", "i", "in", "range", "(", "0", ",", "max_order", ")", ":", "\n", "        ", "if", "smooth", ":", "\n", "            ", "precisions", "[", "i", "]", "=", "(", "(", "matches_by_order", "[", "i", "]", "+", "1.", ")", "/", "\n", "(", "possible_matches_by_order", "[", "i", "]", "+", "1.", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "possible_matches_by_order", "[", "i", "]", ">", "0", ":", "\n", "                ", "precisions", "[", "i", "]", "=", "(", "float", "(", "matches_by_order", "[", "i", "]", ")", "/", "\n", "possible_matches_by_order", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "precisions", "[", "i", "]", "=", "0.0", "\n", "\n", "", "", "", "if", "min", "(", "precisions", ")", ">", "0", ":", "\n", "        ", "p_log_sum", "=", "sum", "(", "(", "1.", "/", "max_order", ")", "*", "math", ".", "log", "(", "p", ")", "for", "p", "in", "precisions", ")", "\n", "geo_mean", "=", "math", ".", "exp", "(", "p_log_sum", ")", "\n", "", "else", ":", "\n", "        ", "geo_mean", "=", "0", "\n", "\n", "", "ratio", "=", "float", "(", "translation_length", ")", "/", "reference_length", "\n", "\n", "if", "ratio", ">", "1.0", ":", "\n", "        ", "bp", "=", "1.", "\n", "", "else", ":", "\n", "        ", "if", "ratio", "==", "0.", ":", "\n", "            ", "bp", "=", "0.", "\n", "", "else", ":", "\n", "            ", "bp", "=", "math", ".", "exp", "(", "1", "-", "1.", "/", "ratio", ")", "\n", "\n", "", "", "bleu", "=", "geo_mean", "*", "bp", "\n", "return", "bleu", ",", "bleu_sentence", "/", "len", "(", "section", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.search.greedy_search": [[12, 33], ["torch.zeros().to", "torch.zeros().to.long", "range", "torch.zeros().to.long", "torch.cuda.amp.autocast", "model", "torch.argmax", "selected_indices.squeeze.squeeze", "torch.zeros", "torch.cuda.amp.autocast", "utils.compute_loss", "torch.gather().squeeze", "torch.argmax.squeeze", "len", "generated_seq.items", "torch.gather"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.compute_loss"], ["def", "greedy_search", "(", "args", ",", "model", ",", "data", ",", "prediction_length", ")", ":", "\n", "    ", "cls", "=", "torch", ".", "zeros", "(", "len", "(", "data", "[", "'source'", "]", "[", "'input_ids'", "]", ")", ",", "prediction_length", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "cls", "[", ":", ",", "0", "]", "=", "101", "\n", "attention_mask", "=", "cls", ".", "long", "(", ")", "\n", "attention_mask", "[", ":", ",", "0", "]", "=", "1", "\n", "generated_seq", "=", "{", "'attention_mask'", ":", "attention_mask", ",", "'input_ids'", ":", "cls", ".", "long", "(", ")", "}", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "        ", "encoder_outputs", "=", "model", "(", "data", ",", "target_input", "=", "None", ",", "no_context_update", "=", "False", ",", "return_encoder_output", "=", "True", ")", "\n", "", "for", "i", "in", "range", "(", "1", ",", "prediction_length", ")", ":", "\n", "        ", "target_input", "=", "(", "{", "k", ":", "v", "[", ":", ",", ":", "i", "+", "1", "]", "for", "k", ",", "v", "in", "generated_seq", ".", "items", "(", ")", "}", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "            ", "_", ",", "logits", ",", "choices", "=", "compute_loss", "(", "args", ",", "data", ",", "model", ",", "target_input", "=", "target_input", ",", "encoder_output_saved", "=", "encoder_outputs", ")", "\n", "", "logits", "=", "logits", "[", ":", ",", "i", "-", "1", "]", "\n", "selected_indices", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "if", "args", ".", "pointer_network", ":", "\n", "            ", "selected_tokens", "=", "torch", ".", "gather", "(", "choices", "[", "'input_ids'", "]", ",", "index", "=", "selected_indices", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "", "else", ":", "\n", "            ", "selected_tokens", "=", "selected_indices", ".", "squeeze", "(", ")", "\n", "", "generated_seq", "[", "'input_ids'", "]", "[", ":", ",", "i", "]", "=", "selected_tokens", ".", "squeeze", "(", ")", "\n", "generated_seq", "[", "'attention_mask'", "]", "[", ":", ",", "i", "]", "=", "1", "\n", "", "return", "generated_seq", "[", "'input_ids'", "]", "[", ":", ",", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.search.repeat_list": [[35, 37], ["range", "len"], "function", ["None"], ["", "def", "repeat_list", "(", "input_list", ",", "counts", ")", ":", "\n", "    ", "return", "[", "input_list", "[", "i", "//", "counts", "]", "for", "i", "in", "range", "(", "counts", "*", "len", "(", "input_list", ")", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.search.length_norm": [[39, 43], ["None"], "function", ["None"], ["", "def", "length_norm", "(", "num", ",", "alpha", ",", "base", "=", "5", ")", ":", "\n", "    ", "if", "num", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "return", "(", "(", "base", "+", "num", ")", "**", "alpha", ")", "/", "(", "(", "base", "+", "1", ")", "**", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.search.beam_search": [[45, 122], ["len", "data[].keys", "torch.zeros().to", "torch.zeros", "torch.zeros().to.clone().long", "torch.cuda.empty_cache", "range", "range", "torch.stack", "torch.zeros().to.clone().long", "torch.cuda.amp.autocast", "model", "logits[].clone", "torch.logsumexp", "torch.topk", "sep_score.to.to", "topKselected.to.to", "search.length_norm", "search.length_norm", "loss.to.to", "temp_scores.reshape.reshape", "torch.gather().reshape", "search.repeat_list", "torch.zeros", "torch.zeros().to.clone", "range", "range", "torch.cuda.amp.autocast", "utils.compute_loss", "choices[].to", "float", "torch.logsumexp.squeeze", "torch.arange().unsqueeze().expand", "torch.gather().squeeze().reshape", "torch.topk", "torch.nonzero().squeeze", "topkscores.reshape", "torch.gather().squeeze", "torch.gather().reshape.squeeze", "len", "final.append", "torch.topk", "final.append", "torch.zeros().to.clone", "generated_seq.items", "len", "finalized_scores[].clone", "finalized_seq.clone.clone", "enumerate", "torch.gather", "torch.arange().unsqueeze", "[].to", "torch.tensor", "torch.zeros.unsqueeze().expand", "torch.arange().unsqueeze", "torch.gather().squeeze", "torch.nonzero", "score_pools[].append", "seq_pools[].append", "topKselected.to.reshape", "torch.gather", "min", "finalized_seq[].to", "torch.arange", "len", "torch.zeros.unsqueeze", "torch.arange", "torch.gather", "topkscores[].unsqueeze().expand().reshape", "topkscores[].unsqueeze().expand", "topkscores[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.search.length_norm", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.search.length_norm", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.search.repeat_list", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.compute_loss"], ["", "def", "beam_search", "(", "args", ",", "model", ",", "data", ",", "prediction_length", "=", "140", ")", ":", "\n", "    ", "beam_num", "=", "args", ".", "beam_num", "\n", "num_questions", "=", "len", "(", "data", "[", "'source'", "]", "[", "'input_ids'", "]", ")", "\n", "for", "key", "in", "data", "[", "'source'", "]", ".", "keys", "(", ")", ":", "\n", "        ", "data", "[", "'source'", "]", "[", "key", "]", "=", "torch", ".", "stack", "(", "repeat_list", "(", "data", "[", "'source'", "]", "[", "key", "]", ",", "beam_num", ")", ",", "dim", "=", "0", ")", "\n", "", "cls", "=", "torch", ".", "zeros", "(", "num_questions", "*", "beam_num", ",", "prediction_length", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "cls", "[", ":", ",", "0", "]", "=", "101", "\n", "scores", "=", "torch", ".", "zeros", "(", "num_questions", "*", "beam_num", ")", "\n", "attention_mask", "=", "cls", ".", "clone", "(", ")", ".", "long", "(", ")", "\n", "attention_mask", "[", ":", ",", "0", "]", "=", "1", "\n", "generated_seq", "=", "{", "'attention_mask'", ":", "attention_mask", ",", "'input_ids'", ":", "cls", ".", "clone", "(", ")", ".", "long", "(", ")", "}", "\n", "score_pools", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_questions", ")", "]", "\n", "seq_pools", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_questions", ")", "]", "\n", "if", "args", ".", "pointer_network", ":", "\n", "        ", "SEP", "=", "2", "\n", "", "else", ":", "\n", "        ", "SEP", "=", "102", "\n", "", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "        ", "encoder_outputs", "=", "model", "(", "data", ",", "target_input", "=", "None", ",", "no_context_update", "=", "False", ",", "return_encoder_output", "=", "True", ")", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "prediction_length", ")", ":", "\n", "        ", "target_input", "=", "(", "{", "k", ":", "v", "[", ":", ",", ":", "i", "+", "1", "]", "for", "k", ",", "v", "in", "generated_seq", ".", "items", "(", ")", "}", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", ")", ":", "\n", "            ", "_", ",", "logits", ",", "choices", "=", "compute_loss", "(", "args", ",", "data", ",", "model", ",", "target_input", "=", "target_input", ",", "encoder_output_saved", "=", "encoder_outputs", ")", "\n", "", "if", "args", ".", "pointer_network", ":", "\n", "            ", "choices", "[", "'input_ids'", "]", "=", "choices", "[", "'input_ids'", "]", ".", "to", "(", "'cpu'", ")", "\n", "", "logits", "=", "logits", "[", ":", ",", "i", "-", "1", "]", "\n", "sep_score", "=", "logits", "[", ":", ",", "SEP", "]", ".", "clone", "(", ")", "\n", "pf", "=", "torch", ".", "logsumexp", "(", "logits", ",", "keepdim", "=", "True", ",", "dim", "=", "-", "1", ")", "\n", "logits", "[", ":", ",", "SEP", "]", "=", "-", "float", "(", "'inf'", ")", "\n", "logits", ",", "topKselected", "=", "torch", ".", "topk", "(", "logits", ",", "dim", "=", "-", "1", ",", "k", "=", "(", "beam_num", ")", ")", "\n", "loss", "=", "-", "logits", "+", "pf", "\n", "sep_score", "=", "-", "sep_score", "+", "pf", ".", "squeeze", "(", ")", "\n", "sep_score", "=", "sep_score", ".", "to", "(", "'cpu'", ")", "\n", "topKselected", "=", "topKselected", ".", "to", "(", "'cpu'", ")", "\n", "l_i_", "=", "length_norm", "(", "i", "-", "1", ",", "alpha", "=", "args", ".", "beam_search_alpha", ",", "base", "=", "args", ".", "beam_search_base", ")", "\n", "l_i", "=", "length_norm", "(", "i", ",", "alpha", "=", "args", ".", "beam_search_alpha", ",", "base", "=", "args", ".", "beam_search_base", ")", "\n", "loss", "=", "loss", ".", "to", "(", "'cpu'", ")", "\n", "temp_scores", "=", "(", "scores", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "beam_num", ")", "*", "l_i_", "+", "loss", ")", "/", "l_i", "\n", "temp_scores", "=", "temp_scores", ".", "reshape", "(", "-", "1", ",", "beam_num", "**", "2", ")", "\n", "if", "i", "==", "1", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "beam_num", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "num_questions", ",", "-", "1", ")", "\n", "scores", "[", ":", "]", "=", "torch", ".", "gather", "(", "temp_scores", ",", "index", "=", "indices", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "topkscores", ",", "indices", "=", "torch", ".", "topk", "(", "temp_scores", ",", "dim", "=", "-", "1", ",", "k", "=", "beam_num", ",", "largest", "=", "False", ",", "sorted", "=", "True", ")", "\n", "finalized_scores", "=", "(", "scores", "*", "l_i_", "+", "sep_score", ")", "/", "l_i", "\n", "finalized_index", "=", "torch", ".", "nonzero", "(", "(", "finalized_scores", "<", "topkscores", "[", ":", ",", "-", "1", "]", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "\n", "beam_num", ")", ".", "reshape", "(", "\n", "num_questions", "*", "beam_num", ")", ")", ".", "float", "(", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "if", "len", "(", "finalized_index", ")", ">", "0", ":", "\n", "                ", "finalized_seq", "=", "generated_seq", "[", "'input_ids'", "]", "[", "finalized_index", ",", "1", ":", "]", "\n", "finalized_scores", "=", "finalized_scores", "[", "finalized_index", "]", ".", "clone", "(", ")", "\n", "finalized_seq", "=", "finalized_seq", ".", "clone", "(", ")", "\n", "finalized_seq", "[", ":", ",", "i", "-", "1", ":", "]", "=", "SEP", "\n", "finalized_index", "=", "finalized_index", "//", "(", "beam_num", ")", "\n", "for", "q_index", ",", "q", "in", "enumerate", "(", "finalized_index", ")", ":", "\n", "                    ", "score_pools", "[", "q", "]", ".", "append", "(", "finalized_scores", "[", "q_index", "]", ")", "\n", "seq_pools", "[", "q", "]", ".", "append", "(", "finalized_seq", "[", "q_index", "]", ".", "to", "(", "'cpu'", ")", ")", "\n", "", "", "scores", "[", ":", "]", "=", "topkscores", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "", "selected_indices", "=", "torch", ".", "gather", "(", "topKselected", ".", "reshape", "(", "-", "1", ",", "beam_num", "**", "2", ")", ",", "index", "=", "indices", ",", "dim", "=", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "if", "args", ".", "pointer_network", ":", "\n", "            ", "selected_tokens", "=", "torch", ".", "gather", "(", "choices", "[", "'input_ids'", "]", ",", "index", "=", "selected_indices", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "", "else", ":", "\n", "            ", "selected_tokens", "=", "selected_indices", ".", "squeeze", "(", ")", "\n", "", "indices", "=", "indices", "+", "torch", ".", "arange", "(", "num_questions", ")", ".", "unsqueeze", "(", "-", "1", ")", "*", "beam_num", "**", "2", "\n", "generated_seq", "[", "'input_ids'", "]", "=", "generated_seq", "[", "'input_ids'", "]", "[", "(", "indices", "//", "beam_num", ")", ".", "reshape", "(", "-", "1", ")", "]", "\n", "generated_seq", "[", "'input_ids'", "]", "[", ":", ",", "i", "]", "=", "selected_tokens", "\n", "generated_seq", "[", "'attention_mask'", "]", "[", ":", ",", "i", "]", "=", "1", "\n", "", "final", "=", "[", "]", "\n", "for", "q", "in", "range", "(", "num_questions", ")", ":", "\n", "        ", "if", "len", "(", "score_pools", "[", "q", "]", ")", "==", "0", ":", "\n", "            ", "final", ".", "append", "(", "generated_seq", "[", "'input_ids'", "]", "[", "q", "*", "beam_num", ":", "(", "q", "+", "1", ")", "*", "beam_num", ",", "1", ":", "]", ".", "to", "(", "'cpu'", ")", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "index", "=", "torch", ".", "topk", "(", "torch", ".", "tensor", "(", "score_pools", "[", "q", "]", ")", ",", "largest", "=", "False", ",", "k", "=", "min", "(", "len", "(", "score_pools", "[", "q", "]", ")", ",", "beam_num", ")", ",", "sorted", "=", "True", ")", "\n", "final", ".", "append", "(", "[", "seq_pools", "[", "q", "]", "[", "ind", "]", "for", "ind", "in", "index", "]", ")", "\n", "", "", "return", "final", "\n", "", ""]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.evaluation.evaluate": [[13, 24], ["model.eval", "torch.no_grad", "enumerate", "print", "tqdm.tqdm", "utils.compute_loss", "loss.sum", "len"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.compute_loss"], ["def", "evaluate", "(", "args", ",", "valid_loader", ",", "model", ",", "split", "=", "'dev'", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "averaged_loss", "=", "0", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "valid_loader", ")", ")", ":", "\n", "            ", "loss", ",", "_", ",", "_", "=", "compute_loss", "(", "args", ",", "data", ",", "model", ")", "\n", "averaged_loss", "+=", "loss", ".", "sum", "(", ")", "\n", "\n", "", "averaged_loss", "=", "(", "averaged_loss", "/", "len", "(", "valid_loader", ".", "dataset", ")", ")", ".", "item", "(", ")", "\n", "print", "(", "'average {} loss:'", ".", "format", "(", "split", ")", ",", "averaged_loss", ")", "\n", "return", "averaged_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.evaluation.generate_hypothesis": [[26, 61], ["enumerate", "tqdm.tqdm", "evaluation.search.beam_search", "evaluation.search.greedy_search", "whole_hype.append", "model.tokenizer.decode", "model.tokenizer.decode.find", "whole_hype.append", "model.tokenizer.decode", "model.tokenizer.decode.find", "current_hypes.append"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.search.beam_search", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.search.greedy_search"], ["", "", "def", "generate_hypothesis", "(", "args", ",", "valid_loader", ",", "model", ",", "search", ")", ":", "\n", "    ", "whole_hype", "=", "[", "]", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "valid_loader", ")", ")", ":", "\n", "        ", "data", "[", "'target'", "]", "[", "'input_ids'", "]", "*=", "0", "\n", "if", "args", ".", "pointer_network", ":", "\n", "            ", "data", "[", "'label'", "]", "*=", "0", "\n", "\n", "", "prediction_length", "=", "data", "[", "'target'", "]", "[", "'input_ids'", "]", ".", "shape", "[", "1", "]", "+", "25", "\n", "if", "search", "==", "'beam'", ":", "\n", "            ", "predicted_query", "=", "beam_search", "(", "args", ",", "model", ",", "data", ",", "\n", "prediction_length", "=", "prediction_length", ")", "\n", "", "elif", "search", "==", "'greedy'", ":", "\n", "            ", "predicted_query", "=", "greedy_search", "(", "args", ",", "model", ",", "data", ",", "\n", "prediction_length", "=", "prediction_length", ")", "\n", "", "sep_text", "=", "'</s>'", "if", "args", ".", "use_codebert", "else", "'[SEP]'", "\n", "for", "pred", "in", "predicted_query", ":", "\n", "            ", "if", "search", "==", "'beam'", ":", "\n", "                ", "current_hypes", "=", "[", "]", "\n", "for", "p", "in", "pred", ":", "\n", "                    ", "hypothesis", "=", "model", ".", "tokenizer", ".", "decode", "(", "p", ")", "\n", "end_index", "=", "hypothesis", ".", "find", "(", "sep_text", ")", "\n", "#if end_index==-1:", "\n", "#    print(\"not found end of setnence\")", "\n", "hypothesis", "=", "hypothesis", "[", ":", "end_index", "]", "\n", "current_hypes", ".", "append", "(", "{", "'str'", ":", "hypothesis", ",", "'token'", ":", "p", "}", ")", "\n", "", "whole_hype", ".", "append", "(", "current_hypes", ")", "\n", "", "else", ":", "\n", "                ", "hypothesis", "=", "model", ".", "tokenizer", ".", "decode", "(", "pred", ")", "\n", "end_index", "=", "hypothesis", ".", "find", "(", "sep_text", ")", "\n", "#if end_index == -1:", "\n", "#    print(\"not found end of setnence\")", "\n", "hypothesis", "=", "hypothesis", "[", ":", "end_index", "]", "\n", "whole_hype", ".", "append", "(", "{", "'str'", ":", "hypothesis", ",", "'token'", ":", "pred", "}", ")", "\n", "\n", "", "", "", "return", "whole_hype", "\n", "", ""]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_eval_metrics.is_equal": [[18, 24], ["len", "len", "len", "len"], "function", ["None"], ["def", "is_equal", "(", "translation_token", ",", "tokenized_source", ")", ":", "\n", "    ", "if", "(", "len", "(", "tokenized_source", ")", "-", "1", ")", "<=", "len", "(", "translation_token", ")", ":", "\n", "        ", "correct_tokens", "=", "(", "(", "translation_token", "[", ":", "len", "(", "tokenized_source", ")", "-", "1", "]", "==", "tokenized_source", "[", "1", ":", "]", ")", ".", "float", "(", ")", ")", ".", "sum", "(", ")", "\n", "return", "correct_tokens", "==", "(", "len", "(", "tokenized_source", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_eval_metrics.compute_metric": [[26, 98], ["os.path.join", "[].tolist", "evaluation.compute_bleu.compute_bleu", "open", "json.loads", "open", "pickle.load", "os.path.join", "open().readlines", "[].tolist", "dataset_preprocessing.wikisql.lib.db_engine.DBEngine", "range", "[].lower", "isinstance", "dataset_file.read", "len", "json.loads", "tokenizer.encode", "compute_eval_metrics.is_equal", "compute_eval_metrics.is_equal", "[].split", "dataset_preprocessing.wikisql.lib.query.Query.from_tokenized_dict", "dataset_preprocessing.wikisql.lib.db_engine.DBEngine.execute_query", "len", "len", "len", "numpy.array", "open", "tokenized_source.to", "mistakes.append", "mistakes.append", "compute_eval_metrics.is_equal", "dataset_preprocessing.wikisql.lib.query.Query.from_real_sequence", "utils.detokenize_query", "dataset_preprocessing.wikisql.lib.db_engine.DBEngine.execute_query", "numpy.array", "int"], "function", ["home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_bleu.compute_bleu", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.lower", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.model.Model.encode", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_eval_metrics.is_equal", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_eval_metrics.is_equal", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.from_tokenized_dict", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.execute_query", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.evaluation.compute_eval_metrics.is_equal", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.query.Query.from_real_sequence", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.None.utils.detokenize_query", "home.repos.pwc.inspect_result.borealisai_code-gen-tae.lib.db_engine.DBEngine.execute_query"], ["", "", "def", "compute_metric", "(", "translation_corpus", ",", "dataset_name", ",", "split", ",", "tokenizer", "=", "None", ",", "section", "=", "None", ",", "args", "=", "None", ")", ":", "\n", "    ", "dataset", "=", "os", ".", "path", ".", "join", "(", "'data/{}/{}.json'", ".", "format", "(", "dataset_name", ",", "split", ")", ")", "\n", "with", "open", "(", "dataset", ")", "as", "dataset_file", ":", "\n", "        ", "dataset_object", "=", "json", ".", "loads", "(", "dataset_file", ".", "read", "(", ")", ")", "\n", "", "with", "open", "(", "'data/{}/{}_order.json'", ".", "format", "(", "dataset_name", ",", "split", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "indices", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "dataset_object", "=", "np", ".", "array", "(", "dataset_object", ")", "[", "indices", "]", ".", "tolist", "(", ")", "\n", "if", "dataset_name", "==", "'wikisql'", ":", "\n", "        ", "annotated_dataset_file", "=", "os", ".", "path", ".", "join", "(", "'data/{}/{}_annotated.jsonl'", ".", "format", "(", "dataset_name", ",", "split", ")", ")", "\n", "annotated_dataset_object", "=", "open", "(", "annotated_dataset_file", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "annotated_dataset_object", "=", "np", ".", "array", "(", "annotated_dataset_object", ")", "[", "indices", "]", ".", "tolist", "(", ")", "\n", "dbengine", "=", "DBEngine", "(", "'data/wikisql/{}.db'", ".", "format", "(", "split", ")", ")", "\n", "\n", "", "exact_match_acc", "=", "0", "\n", "oracle_exact_match_acc", "=", "0", "\n", "execution_acc", "=", "0", "\n", "\n", "if", "section", "is", "None", ":", "\n", "        ", "section", "=", "range", "(", "len", "(", "dataset_object", ")", ")", "\n", "", "mistakes", "=", "[", "]", "\n", "for", "index", "in", "section", ":", "\n", "        ", "translation", "=", "translation_corpus", "[", "index", "]", "\n", "reference", "=", "dataset_object", "[", "index", "]", "[", "'snippet'", "]", ".", "lower", "(", ")", "\n", "if", "args", ".", "dataset_name", "==", "'wikisql'", ":", "\n", "            ", "annotated_data", "=", "json", ".", "loads", "(", "annotated_dataset_object", "[", "index", "]", ")", "\n", "", "tokenized_source", "=", "tokenizer", ".", "encode", "(", "reference", ",", "padding", "=", "True", ",", "truncation", "=", "True", ",", "return_tensors", "=", "\"pt\"", ")", "[", "0", "]", "\n", "if", "isinstance", "(", "translation", ",", "dict", ")", ":", "\n", "            ", "if", "is_equal", "(", "translation", "[", "'token'", "]", ",", "tokenized_source", ".", "to", "(", "'cuda'", ")", ")", ":", "\n", "                ", "exact_match_acc", "+=", "1", "\n", "", "else", ":", "\n", "                ", "mistakes", ".", "append", "(", "(", "index", ",", "translation", "[", "'str'", "]", ")", ")", "\n", "", "translation", "=", "translation", "[", "'str'", "]", "\n", "translation_corpus", "[", "index", "]", "=", "translation", "\n", "", "else", ":", "\n", "            ", "if", "is_equal", "(", "translation", "[", "0", "]", "[", "'token'", "]", ",", "tokenized_source", ")", ":", "\n", "                ", "exact_match_acc", "+=", "1", "\n", "", "else", ":", "\n", "                ", "mistakes", ".", "append", "(", "(", "index", ",", "translation", "[", "0", "]", "[", "'str'", "]", ")", ")", "\n", "", "for", "trans", "in", "translation", ":", "\n", "                ", "if", "is_equal", "(", "trans", "[", "'token'", "]", ",", "tokenized_source", ")", ":", "\n", "                    ", "oracle_exact_match_acc", "+=", "1", "\n", "break", "\n", "", "", "translation", "=", "translation", "[", "0", "]", "[", "'str'", "]", "\n", "translation_corpus", "[", "index", "]", "=", "translation", "\n", "\n", "", "if", "dataset_name", "==", "'wikisql'", ":", "\n", "            ", "header", "=", "dataset_object", "[", "index", "]", "[", "'header'", "]", ".", "split", "(", "'[SEP]'", ")", "\n", "reference_query", "=", "Query", ".", "from_tokenized_dict", "(", "annotated_data", "[", "'query'", "]", ")", "\n", "result2", "=", "dbengine", ".", "execute_query", "(", "annotated_data", "[", "'table_id'", "]", ",", "reference_query", ",", "lower", "=", "True", ")", "\n", "try", ":", "\n", "                ", "predicted_query", "=", "Query", ".", "from_real_sequence", "(", "translation", ",", "header", ")", "\n", "if", "predicted_query", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "detokenized_prediction", "=", "detokenize_query", "(", "predicted_query", ",", "\n", "annotated_data", "[", "'question'", "]", ",", "\n", "annotated_data", "[", "'table'", "]", "[", "'type'", "]", ")", "\n", "result1", "=", "dbengine", ".", "execute_query", "(", "annotated_data", "[", "'table_id'", "]", ",", "detokenized_prediction", ",", "\n", "lower", "=", "True", ")", "\n", "if", "result1", "==", "result2", ":", "\n", "                    ", "execution_acc", "+=", "int", "(", "result1", "==", "result2", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "                ", "continue", "\n", "\n", "", "", "", "bleu", ",", "bleu_sentence", "=", "compute_bleu", "(", "translation_corpus", ",", "dataset_object", ",", "section", ",", "args", "=", "args", ")", "\n", "metrics", "=", "{", "'bleu'", ":", "bleu", ",", "\n", "'bleu_sentence'", ":", "bleu_sentence", ",", "\n", "'exact_match'", ":", "exact_match_acc", "/", "len", "(", "section", ")", ",", "\n", "'exact_oracle_match'", ":", "oracle_exact_match_acc", "/", "len", "(", "section", ")", ",", "\n", "'exec_acc'", ":", "execution_acc", "/", "len", "(", "section", ")", ",", "\n", "'mistakes'", ":", "mistakes", "\n", "}", "\n", "return", "metrics", "\n", "\n"]]}