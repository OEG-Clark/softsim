{"home.repos.pwc.inspect_result.caelan_stripstream.pyr2.problems.ManipulationProblem.__init__": [[18, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "workspace", ",", "initial_conf", ",", "initial_poses", "=", "[", "]", ",", "\n", "movable_names", "=", "[", "]", ",", "known_poses", "=", "[", "]", ",", "\n", "goal_conf", "=", "None", ",", "goal_poses", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "workspace", "=", "workspace", "\n", "self", ".", "initial_conf", "=", "initial_conf", "\n", "self", ".", "initial_poses", "=", "initial_poses", "\n", "self", ".", "movable_names", "=", "movable_names", "\n", "self", ".", "goal_conf", "=", "goal_conf", "\n", "self", ".", "goal_poses", "=", "goal_poses", "\n", "self", ".", "known_poses", "=", "known_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.problems.dantam2": [[30, 92], ["numpy.array", "PyR2.pr2.pr2Robot.makeRobot", "PyR2.pr2.pr2Robot.makeRobot.makeConf", "initial_conf.set.set", "robotics.pyr2.utils.get_box_body", "initial_poses.append", "range", "list", "random.sample", "enumerate", "problems.ManipulationProblem", "range", "poses.append", "itertools.product", "len", "numpy.zeros", "robotics.pyr2.utils.get_box_body", "initial_poses.append", "movable_names.append", "PyR2.hu.Pose", "row.append", "range", "range", "PyR2.hu.Pose"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_box_body", "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_box_body"], ["", "", "def", "dantam2", "(", ")", ":", "\n", "    ", "m", ",", "n", "=", "3", ",", "3", "\n", "\n", "n_obj", "=", "2", "\n", "side_dim", "=", ".07", "\n", "height_dim", "=", ".1", "\n", "box_dims", "=", "(", "side_dim", ",", "side_dim", ",", "height_dim", ")", "\n", "separation", "=", "(", "side_dim", ",", "side_dim", ")", "\n", "\n", "workspace", "=", "np", ".", "array", "(", "[", "[", "-", "2.0", ",", "-", "1.5", ",", "0.0", "]", ",", "\n", "[", "1.0", ",", "1.5", ",", "2.0", "]", "]", ")", "\n", "robot", "=", "makeRobot", "(", "workspace", ",", "useLeft", "=", "True", ",", "useRight", "=", "False", ")", "\n", "base_conf", "=", "(", "-", ".75", ",", ".2", ",", "-", "math", ".", "pi", "/", "2", ")", "\n", "initial_conf", "=", "robot", ".", "makeConf", "(", "\n", "*", "base_conf", ",", "g", "=", "robot", ".", "gripMax", ",", "ignoreStandard", "=", "True", ")", "\n", "initial_conf", "=", "initial_conf", ".", "set", "(", "'pr2LeftArm'", ",", "TOP_HOLDING_LEFT_ARM", ")", "\n", "\n", "initial_poses", "=", "[", "]", "\n", "goal_poses", "=", "{", "}", "\n", "\n", "length", "=", "m", "*", "(", "box_dims", "[", "0", "]", "+", "separation", "[", "0", "]", ")", "\n", "width", "=", "n", "*", "(", "box_dims", "[", "1", "]", "+", "separation", "[", "1", "]", ")", "\n", "height", "=", ".7", "\n", "table", "=", "get_box_body", "(", "length", ",", "width", ",", "height", ",", "name", "=", "'table'", ",", "color", "=", "'brown'", ")", "\n", "initial_poses", ".", "append", "(", "(", "table", ",", "hu", ".", "Pose", "(", "0", ",", "0", ",", "height", "/", "2", ",", "0", ")", ")", ")", "\n", "\n", "poses", "=", "[", "]", "\n", "z", "=", "height", "+", "height_dim", "/", "2", "+", "BODY_PLACEMENT_Z_OFFSET", "\n", "theta", "=", "0", "\n", "for", "r", "in", "range", "(", "m", ")", ":", "\n", "        ", "row", "=", "[", "]", "\n", "x", "=", "-", "length", "/", "2", "+", "(", "r", "+", ".5", ")", "*", "(", "box_dims", "[", "0", "]", "+", "separation", "[", "0", "]", ")", "\n", "for", "c", "in", "range", "(", "n", ")", ":", "\n", "            ", "y", "=", "-", "width", "/", "2", "+", "(", "c", "+", ".5", ")", "*", "(", "box_dims", "[", "1", "]", "+", "separation", "[", "1", "]", ")", "\n", "row", ".", "append", "(", "hu", ".", "Pose", "(", "x", ",", "y", ",", "z", ",", "theta", ")", ")", "\n", "", "poses", ".", "append", "(", "row", ")", "\n", "\n", "", "coordinates", "=", "list", "(", "product", "(", "range", "(", "m", ")", ",", "range", "(", "n", ")", ")", ")", "\n", "assert", "n_obj", "<=", "len", "(", "coordinates", ")", "\n", "obj_coordinates", "=", "sample", "(", "coordinates", ",", "n_obj", ")", "\n", "movable_names", "=", "[", "]", "\n", "for", "i", ",", "(", "r", ",", "c", ")", "in", "enumerate", "(", "obj_coordinates", ")", ":", "\n", "        ", "row_color", "=", "np", ".", "zeros", "(", "4", ")", "\n", "row_color", "[", "2", "-", "r", "]", "=", "1.", "\n", "if", "i", "==", "0", ":", "\n", "            ", "name", "=", "'goal%d-%d'", "%", "(", "r", ",", "c", ")", "\n", "color", "=", "'blue'", "\n", "\n", "goal_poses", "[", "name", "]", "=", "poses", "[", "m", "/", "2", "]", "[", "n", "/", "2", "]", "\n", "", "else", ":", "\n", "            ", "name", "=", "'block%d-%d'", "%", "(", "r", ",", "c", ")", "\n", "color", "=", "'red'", "\n", "\n", "", "obj", "=", "get_box_body", "(", "*", "box_dims", ",", "name", "=", "name", ",", "color", "=", "color", ")", "\n", "initial_poses", ".", "append", "(", "(", "obj", ",", "poses", "[", "r", "]", "[", "c", "]", ")", ")", "\n", "movable_names", ".", "append", "(", "name", ")", "\n", "\n", "", "known_poses", "=", "[", "pose", "for", "col", "in", "poses", "for", "pose", "in", "col", "]", "\n", "\n", "return", "ManipulationProblem", "(", "workspace", ",", "initial_conf", ",", "initial_poses", "=", "initial_poses", ",", "\n", "movable_names", "=", "movable_names", ",", "known_poses", "=", "known_poses", ",", "\n", "goal_poses", "=", "goal_poses", ",", "goal_conf", "=", "initial_conf", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.Traj.__init__": [[95, 99], ["next"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "path", ",", "grasp", "=", "None", ")", ":", "\n", "        ", "self", ".", "id", "=", "next", "(", "self", ".", "_ids", ")", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "grasp", "=", "grasp", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.Traj.__repr__": [[100, 102], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'%s(%d)'", "%", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_window_name": [[9, 11], ["None"], "function", ["None"], ["def", "get_window_name", "(", "window_3d", ")", ":", "\n", "    ", "return", "window_3d", ".", "window", ".", "title", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.is_window_active": [[13, 15], ["None"], "function", ["None"], ["", "def", "is_window_active", "(", "window_3d", ")", ":", "\n", "    ", "return", "window_3d", ".", "window", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_name": [[17, 19], ["shape.name"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.name"], ["", "def", "get_name", "(", "shape", ")", ":", "\n", "    ", "return", "shape", ".", "name", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_color": [[21, 23], ["None"], "function", ["None"], ["", "def", "get_color", "(", "shape", ")", ":", "\n", "    ", "return", "shape", ".", "properties", "[", "'color'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_box_body": [[25, 30], ["PyR2.shapes.Shape", "PyR2.shapes.BoxAligned", "numpy.array"], "function", ["None"], ["", "def", "get_box_body", "(", "length", ",", "width", ",", "height", ",", "name", "=", "'box'", ",", "color", "=", "'black'", ")", ":", "\n", "    ", "return", "Shape", "(", "[", "\n", "BoxAligned", "(", "np", ".", "array", "(", "[", "(", "-", "length", "/", "2.", ",", "-", "width", "/", "2.", ",", "-", "height", "/", "2", ")", ",", "\n", "(", "length", "/", "2.", ",", "width", "/", "2.", ",", "height", "/", "2", ")", "]", ")", ",", "None", ")", "\n", "]", ",", "None", ",", "name", "=", "name", ",", "color", "=", "color", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_grasp_frame_origin": [[36, 43], ["PyR2.hu.Pose", "grasp_frame.compose", "grasp_frame.compose.compose", "hu.Pose.compose"], "function", ["None"], ["def", "get_grasp_frame_origin", "(", "grasp_frame", ")", ":", "\n", "\n", "    ", "objFrame", "=", "hu", ".", "Pose", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "faceFrame", "=", "grasp_frame", ".", "compose", "(", "GRASP_FRAME", ")", "\n", "centerFrame", "=", "faceFrame", ".", "compose", "(", "CENTER_FRAME", ")", "\n", "graspFrame", "=", "objFrame", ".", "compose", "(", "centerFrame", ")", "\n", "return", "graspFrame", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.is_left_active": [[74, 76], ["None"], "function", ["None"], ["def", "is_left_active", "(", "robot", ")", ":", "\n", "    ", "return", "'pr2LeftArm'", "in", "robot", ".", "moveChainNames", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.is_right_active": [[78, 80], ["None"], "function", ["None"], ["", "def", "is_right_active", "(", "robot", ")", ":", "\n", "    ", "return", "'pr2RightArm'", "in", "robot", ".", "moveChainNames", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.open_grippers": [[82, 85], ["conf.set"], "function", ["None"], ["", "def", "open_grippers", "(", "conf", ")", ":", "\n", "    ", "for", "arm", "in", "conf", ".", "robot", ".", "gripperChainNames", ":", "\n", "        ", "conf", ".", "set", "(", "conf", ".", "robot", ".", "gripperChainNames", "[", "arm", "]", ",", "[", "conf", ".", "robot", ".", "gripMax", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.close_grippers": [[87, 90], ["conf.set"], "function", ["None"], ["", "", "def", "close_grippers", "(", "conf", ")", ":", "\n", "    ", "for", "arm", "in", "conf", ".", "robot", ".", "gripperChainNames", ":", "\n", "        ", "conf", ".", "set", "(", "conf", ".", "robot", ".", "gripperChainNames", "[", "arm", "]", ",", "[", "0.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.interpolate": [[104, 113], ["q1.keys", "all", "q1.robot.stepAlongLine"], "function", ["None"], ["", "", "def", "interpolate", "(", "q1", ",", "q2", ",", "step_size", ",", "active_chains", "=", "None", ")", ":", "\n", "    ", "assert", "q1", ".", "robot", "==", "q2", ".", "robot", "\n", "moveChains", "=", "active_chains", "or", "q1", ".", "keys", "(", ")", "\n", "q", "=", "q1", "\n", "while", "not", "all", "(", "q", "[", "c", "]", "==", "q2", "[", "c", "]", "for", "c", "in", "moveChains", ")", ":", "\n", "        ", "yield", "q", "\n", "q", "=", "q1", ".", "robot", ".", "stepAlongLine", "(", "\n", "q2", ",", "q", ",", "step_size", ",", "forward", "=", "True", ",", "moveChains", "=", "moveChains", ")", "\n", "", "yield", "q2", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.forward_kinematics": [[115, 117], ["conf.cartConf"], "function", ["None"], ["", "def", "forward_kinematics", "(", "conf", ",", "arm", ")", ":", "\n", "    ", "return", "conf", ".", "cartConf", "(", ")", "[", "conf", ".", "robot", ".", "armChainNames", "[", "arm", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.inverse_kinematics": [[119, 122], ["default_conf.robot.inverseKinWristGen", "default_conf.basePose"], "function", ["None"], ["", "def", "inverse_kinematics", "(", "default_conf", ",", "manip_trans", ",", "arm", ")", ":", "\n", "    ", "return", "default_conf", ".", "robot", ".", "inverseKinWristGen", "(", "manip_trans", ",", "arm", ",", "default_conf", ",", "\n", "basePose", "=", "default_conf", ".", "basePose", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_wrist_frame": [[124, 128], ["grasp.compose", "gripperFrame.inverse"], "function", ["None"], ["", "def", "get_wrist_frame", "(", "grasp", ",", "robot", ",", "hand", ")", ":", "\n", "    ", "gripperFrame", "=", "robot", ".", "gripperFaceFrame", "[", "hand", "]", "\n", "wristFrame", "=", "grasp", ".", "compose", "(", "gripperFrame", ".", "inverse", "(", ")", ")", "\n", "return", "wristFrame", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.manip_from_pose_grasp": [[130, 132], ["pose.compose", "utils.get_wrist_frame"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_wrist_frame"], ["", "def", "manip_from_pose_grasp", "(", "pose", ",", "grasp", ",", "robot", ",", "hand", ")", ":", "\n", "    ", "return", "pose", ".", "compose", "(", "get_wrist_frame", "(", "grasp", ",", "robot", ",", "hand", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.pose_from_manip_grasp": [[134, 136], ["manip.compose", "get_wrist_frame().inverse", "utils.get_wrist_frame"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_wrist_frame"], ["", "def", "pose_from_manip_grasp", "(", "manip", ",", "grasp", ",", "robot", ",", "hand", ")", ":", "\n", "    ", "return", "manip", ".", "compose", "(", "get_wrist_frame", "(", "grasp", ",", "robot", ",", "hand", ")", ".", "inverse", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.approach_from_manip": [[141, 145], ["manip_trans.compose", "abs", "manip_trans.compose", "PyR2.hu.Pose", "PyR2.hu.Pose"], "function", ["None"], ["def", "approach_from_manip", "(", "manip_trans", ")", ":", "\n", "    ", "if", "abs", "(", "manip_trans", ".", "matrix", "[", "2", ",", "0", "]", ")", "<", "0.1", ":", "\n", "        ", "return", "manip_trans", ".", "compose", "(", "hu", ".", "Pose", "(", "-", "BACKOFF", ",", "0.", ",", "PERP_BACKOFF", ",", "0.", ")", ")", "\n", "", "return", "manip_trans", ".", "compose", "(", "hu", ".", "Pose", "(", "-", "BACKOFF", ",", "0.", ",", "0.", ",", "0.", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_sample_fn": [[147, 149], ["conf.robot.randomConf"], "function", ["None"], ["", "def", "get_sample_fn", "(", "conf", ",", "active_chains", ")", ":", "\n", "    ", "return", "lambda", ":", "conf", ".", "robot", ".", "randomConf", "(", "active_chains", ",", "conf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_extend_fn": [[151, 154], ["utils.interpolate"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.interpolate"], ["", "def", "get_extend_fn", "(", "active_chains", ",", "step_size", ")", ":", "\n", "\n", "    ", "return", "lambda", "q1", ",", "q2", ":", "interpolate", "(", "q1", ",", "q2", ",", "step_size", ",", "active_chains", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_distance_fn": [[156, 162], ["q1.robot.distConf"], "function", ["None"], ["", "def", "get_distance_fn", "(", "active_chains", ")", ":", "\n", "    ", "def", "distance_fn", "(", "q1", ",", "q2", ")", ":", "\n", "        ", "assert", "q1", ".", "robot", "==", "q2", ".", "robot", "\n", "return", "q1", ".", "robot", ".", "distConf", "(", "q1", ",", "q2", ",", "active_chains", ")", "\n", "\n", "", "return", "distance_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_collision_fn": [[164, 171], ["q.placement", "any", "q.placement.collides"], "function", ["None"], ["", "def", "get_collision_fn", "(", "placed", "=", "[", "]", ",", "attached", "=", "None", ")", ":", "\n", "\n", "    ", "def", "collision_fn", "(", "q", ")", ":", "\n", "        ", "placed_robot", "=", "q", ".", "placement", "(", "attached", ")", "\n", "\n", "return", "any", "(", "placed_robot", ".", "collides", "(", "body", ")", "for", "body", "in", "placed", ")", "\n", "", "return", "collision_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.draw_window_3d": [[176, 184], ["window_3d.clear", "robot_conf.placement", "window_3d.draw", "utils.is_window_active", "window_3d.draw", "utils.get_color"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.clear", "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.is_window_active", "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp.get_color"], ["def", "draw_window_3d", "(", "window_3d", ",", "robot_conf", ",", "placements", ",", "attached", "=", "None", ")", ":", "\n", "    ", "if", "not", "is_window_active", "(", "window_3d", ")", ":", "\n", "        ", "return", "\n", "", "window_3d", ".", "clear", "(", ")", "\n", "placed_robot", "=", "robot_conf", ".", "placement", "(", "attached", "=", "attached", ")", "\n", "window_3d", ".", "draw", "(", "placed_robot", ",", "color", "=", "ROBOT_COLOR", ")", "\n", "for", "placed", "in", "placements", ":", "\n", "        ", "window_3d", ".", "draw", "(", "placed", ",", "color", "=", "get_color", "(", "placed", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.norm": [[6, 8], ["numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.norm"], ["def", "norm", "(", "vector", ",", "order", "=", "2", ")", ":", "\n", "    ", "return", "np", ".", "linalg", ".", "norm", "(", "vector", ",", "ord", "=", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.length": [[10, 12], ["numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.norm"], ["", "def", "length", "(", "vector", ")", ":", "\n", "    ", "return", "np", ".", "linalg", ".", "norm", "(", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.length2": [[14, 16], ["numpy.dot"], "function", ["None"], ["", "def", "length2", "(", "vector", ")", ":", "\n", "    ", "return", "np", ".", "dot", "(", "vector", ",", "vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.normalize": [[18, 20], ["transforms.length"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.length"], ["", "def", "normalize", "(", "vector", ")", ":", "\n", "    ", "return", "1.", "/", "length", "(", "vector", ")", "*", "vector", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_x": [[22, 24], ["numpy.array"], "function", ["None"], ["", "def", "unit_x", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "(", "1", ",", "0", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_y": [[26, 28], ["numpy.array"], "function", ["None"], ["", "def", "unit_y", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "(", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_z": [[30, 32], ["numpy.array"], "function", ["None"], ["", "def", "unit_z", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "(", "0", ",", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_point": [[34, 36], ["numpy.zeros"], "function", ["None"], ["", "def", "unit_point", "(", ")", ":", "\n", "    ", "return", "np", ".", "zeros", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_quat": [[38, 40], ["numpy.array"], "function", ["None"], ["", "def", "unit_quat", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "(", "1", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_rot": [[42, 44], ["numpy.identity"], "function", ["None"], ["", "def", "unit_rot", "(", ")", ":", "\n", "    ", "return", "np", ".", "identity", "(", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_pose": [[46, 48], ["numpy.array"], "function", ["None"], ["", "def", "unit_pose", "(", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "(", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_trans": [[50, 52], ["numpy.identity"], "function", ["None"], ["", "def", "unit_trans", "(", ")", ":", "\n", "    ", "return", "np", ".", "identity", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_transform_point": [[54, 56], ["trans.dot", "numpy.concatenate"], "function", ["None"], ["", "def", "trans_transform_point", "(", "trans", ",", "point", ")", ":", "\n", "    ", "return", "trans", ".", "dot", "(", "np", ".", "concatenate", "(", "[", "point", ",", "[", "1", "]", "]", ")", ".", "T", ")", "[", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_transform_points": [[58, 60], ["numpy.dot", "numpy.tile"], "function", ["None"], ["", "def", "trans_transform_points", "(", "trans", ",", "points", ")", ":", "\n", "    ", "return", "np", ".", "dot", "(", "trans", "[", ":", "3", ",", ":", "3", "]", ",", "points", ")", "+", "np", ".", "tile", "(", "trans", "[", ":", "3", ",", "3", "]", ".", "T", ",", "(", "points", ".", "shape", "[", "1", "]", ",", "1", ")", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_transform_point": [[62, 64], ["openravepy.poseTransformPoints", "numpy.array"], "function", ["None"], ["", "def", "pose_transform_point", "(", "pose", ",", "point", ")", ":", "\n", "    ", "return", "poseTransformPoints", "(", "pose", ",", "np", ".", "array", "(", "[", "point", "]", ")", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_transform_point": [[66, 68], ["transforms.pose_transform_point", "transforms.pose_from_quat_point", "transforms.unit_point"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_transform_point", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_quat_point", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_point"], ["", "def", "quat_transform_point", "(", "quat", ",", "point", ")", ":", "\n", "    ", "return", "pose_transform_point", "(", "pose_from_quat_point", "(", "quat", ",", "unit_point", "(", ")", ")", ",", "point", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.rot_transform_point": [[70, 72], ["rot.dot"], "function", ["None"], ["", "def", "rot_transform_point", "(", "rot", ",", "point", ")", ":", "\n", "    ", "return", "rot", ".", "dot", "(", "point", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_pose": [[74, 76], ["None"], "function", ["None"], ["", "def", "quat_from_pose", "(", "pose", ")", ":", "\n", "    ", "return", "pose", "[", ":", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.point_from_pose": [[78, 80], ["None"], "function", ["None"], ["", "def", "point_from_pose", "(", "pose", ")", ":", "\n", "    ", "return", "pose", "[", "4", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_quat_point": [[82, 84], ["numpy.concatenate"], "function", ["None"], ["", "def", "pose_from_quat_point", "(", "quat", ",", "point", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "[", "quat", ",", "point", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_quat_point": [[86, 88], ["transforms.trans_from_pose", "transforms.pose_from_quat_point"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_pose", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_quat_point"], ["", "def", "trans_from_quat_point", "(", "quat", ",", "point", ")", ":", "\n", "    ", "return", "trans_from_pose", "(", "pose_from_quat_point", "(", "quat", ",", "point", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_pose": [[90, 92], ["openravepy.matrixFromPose"], "function", ["None"], ["", "def", "trans_from_pose", "(", "pose", ")", ":", "\n", "    ", "return", "matrixFromPose", "(", "pose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_trans": [[94, 96], ["openravepy.poseFromMatrix"], "function", ["None"], ["", "def", "pose_from_trans", "(", "trans", ")", ":", "\n", "    ", "return", "poseFromMatrix", "(", "trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_point": [[98, 100], ["transforms.trans_from_quat_point", "transforms.unit_quat", "numpy.array"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_quat_point", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_quat"], ["", "def", "trans_from_point", "(", "x", ",", "y", ",", "z", ")", ":", "\n", "    ", "return", "trans_from_quat_point", "(", "unit_quat", "(", ")", ",", "np", ".", "array", "(", "[", "x", ",", "y", ",", "z", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_quat": [[102, 104], ["openravepy.matrixFromQuat"], "function", ["None"], ["", "def", "trans_from_quat", "(", "quat", ")", ":", "\n", "    ", "return", "matrixFromQuat", "(", "quat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_axis_angle": [[106, 108], ["transforms.trans_from_quat", "transforms.quat_from_axis_angle"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_quat", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_axis_angle"], ["", "def", "trans_from_axis_angle", "(", "x_angle", ",", "y_angle", ",", "z_angle", ")", ":", "\n", "    ", "return", "trans_from_quat", "(", "quat_from_axis_angle", "(", "x_angle", ",", "y_angle", ",", "z_angle", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_rot_point": [[110, 115], ["transforms.unit_trans"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_trans"], ["", "def", "trans_from_rot_point", "(", "rot", ",", "point", ")", ":", "\n", "    ", "trans", "=", "unit_trans", "(", ")", "\n", "trans", "[", ":", "3", ",", ":", "3", "]", "=", "rot", "\n", "trans", "[", ":", "3", ",", "3", "]", "=", "point", "\n", "return", "trans", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_rot": [[117, 119], ["transforms.trans_from_rot_point", "transforms.unit_point"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_rot_point", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_point"], ["", "def", "trans_from_rot", "(", "rot", ")", ":", "\n", "    ", "return", "trans_from_rot_point", "(", "rot", ",", "unit_point", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.rot_from_trans": [[121, 123], ["None"], "function", ["None"], ["", "def", "rot_from_trans", "(", "trans", ")", ":", "\n", "    ", "return", "trans", "[", ":", "3", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_trans": [[125, 127], ["transforms.quat_from_rot", "transforms.rot_from_trans"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_rot", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.rot_from_trans"], ["", "def", "quat_from_trans", "(", "trans", ")", ":", "\n", "    ", "return", "quat_from_rot", "(", "rot_from_trans", "(", "trans", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.point_from_trans": [[129, 131], ["None"], "function", ["None"], ["", "def", "point_from_trans", "(", "trans", ")", ":", "\n", "    ", "return", "trans", "[", ":", "3", ",", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_axis_angle": [[133, 135], ["openravepy.quatFromAxisAngle", "numpy.array"], "function", ["None"], ["", "def", "quat_from_axis_angle", "(", "x_angle", ",", "y_angle", ",", "z_angle", ")", ":", "\n", "    ", "return", "quatFromAxisAngle", "(", "np", ".", "array", "(", "(", "x_angle", ",", "y_angle", ",", "z_angle", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.rot_from_axis_angle": [[137, 139], ["openravepy.matrixFromAxisAngle", "numpy.array"], "function", ["None"], ["", "def", "rot_from_axis_angle", "(", "x_angle", ",", "y_angle", ",", "z_angle", ")", ":", "\n", "    ", "return", "matrixFromAxisAngle", "(", "np", ".", "array", "(", "(", "x_angle", ",", "y_angle", ",", "z_angle", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.axis_angle_from_rot": [[141, 143], ["openravepy.axisAngleFromRotationMatrix"], "function", ["None"], ["", "def", "axis_angle_from_rot", "(", "rot", ")", ":", "\n", "    ", "return", "axisAngleFromRotationMatrix", "(", "rot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_rot": [[145, 147], ["openravepy.quatFromRotationMatrix"], "function", ["None"], ["", "def", "quat_from_rot", "(", "rot", ")", ":", "\n", "    ", "return", "quatFromRotationMatrix", "(", "rot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.rot_from_quat": [[149, 151], ["openravepy.rotationMatrixFromQuat"], "function", ["None"], ["", "def", "rot_from_quat", "(", "quat", ")", ":", "\n", "    ", "return", "rotationMatrixFromQuat", "(", "quat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_angle_vector": [[153, 155], ["numpy.concatenate", "math.cos", "math.sin", "transforms.normalize", "numpy.array"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.normalize"], ["", "def", "quat_from_angle_vector", "(", "angle", ",", "vector", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "[", "[", "cos", "(", "angle", "/", "2", ")", "]", ",", "sin", "(", "angle", "/", "2", ")", "*", "normalize", "(", "np", ".", "array", "(", "vector", ")", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.rot_from_angle_vector": [[157, 159], ["transforms.rot_from_quat", "transforms.quat_from_angle_vector"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.rot_from_quat", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_angle_vector"], ["", "def", "rot_from_angle_vector", "(", "angle", ",", "vector", ")", ":", "\n", "    ", "return", "rot_from_quat", "(", "quat_from_angle_vector", "(", "angle", ",", "vector", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_dot": [[161, 163], ["numpy.dot"], "function", ["None"], ["", "def", "trans_dot", "(", "*", "trans", ")", ":", "\n", "    ", "return", "np", ".", "dot", "(", "*", "trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_inv": [[165, 167], ["numpy.linalg.inv"], "function", ["None"], ["", "def", "trans_inv", "(", "trans", ")", ":", "\n", "    ", "return", "np", ".", "linalg", ".", "inv", "(", "trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_dot": [[169, 171], ["reduce"], "function", ["None"], ["", "def", "quat_dot", "(", "*", "quats", ")", ":", "\n", "    ", "return", "reduce", "(", "quatMult", ",", "quats", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_inv": [[173, 175], ["openravepy.quatInverse"], "function", ["None"], ["", "def", "quat_inv", "(", "quat", ")", ":", "\n", "    ", "return", "quatInverse", "(", "quat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_look_at": [[177, 182], ["openravepy.quatRotateDirection", "transforms.unit_x"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_x"], ["", "def", "quat_look_at", "(", "vector1", ",", "vector2", "=", "None", ")", ":", "\n", "    ", "if", "vector2", "is", "None", ":", "\n", "        ", "vector2", "=", "vector1", "\n", "vector1", "=", "unit_x", "(", ")", "\n", "", "return", "quatRotateDirection", "(", "vector1", ",", "vector2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.rot_look_at": [[184, 186], ["transforms.rot_from_quat", "transforms.quat_look_at"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.rot_from_quat", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_look_at"], ["", "def", "rot_look_at", "(", "vector1", ",", "vector2", "=", "None", ")", ":", "\n", "    ", "return", "rot_from_quat", "(", "quat_look_at", "(", "vector1", ",", "vector2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.camera_look_at": [[188, 190], ["transforms.unit_point", "openravepy.transformLookat", "numpy.array", "numpy.array", "numpy.array", "transforms.unit_z"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_point", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_z"], ["", "def", "camera_look_at", "(", "point", ",", "look_point", "=", "unit_point", "(", ")", ")", ":", "\n", "    ", "return", "transformLookat", "(", "np", ".", "array", "(", "look_point", ")", "-", "np", ".", "array", "(", "point", ")", ",", "np", ".", "array", "(", "point", ")", ",", "-", "unit_z", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_interpolate": [[192, 194], ["openravepy.quatSlerp"], "function", ["None"], ["", "def", "quat_interpolate", "(", "quat1", ",", "quat2", ",", "t", "=", ".5", ")", ":", "\n", "    ", "return", "quatSlerp", "(", "quat1", ",", "quat2", ",", "t", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_interpolate": [[196, 199], ["transforms.pose_from_quat_point", "transforms.quat_interpolate", "transforms.quat_from_pose", "transforms.quat_from_pose", "transforms.point_from_pose", "transforms.point_from_pose"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_quat_point", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_interpolate", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_pose", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_pose", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.point_from_pose", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.point_from_pose"], ["", "def", "pose_interpolate", "(", "pose1", ",", "pose2", ",", "t", "=", ".5", ")", ":", "\n", "    ", "return", "pose_from_quat_point", "(", "quat_interpolate", "(", "quat_from_pose", "(", "pose1", ")", ",", "quat_from_pose", "(", "pose2", ")", ",", "t", ")", ",", "\n", "t", "*", "point_from_pose", "(", "pose1", ")", "+", "(", "1", "-", "t", ")", "*", "point_from_pose", "(", "pose2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.vector_trans": [[201, 203], ["transforms.trans_from_pose", "transforms.pose_from_trans", "numpy.concatenate", "numpy.zeros"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_pose", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_trans"], ["", "def", "vector_trans", "(", "trans", ",", "vector", ")", ":", "\n", "    ", "return", "trans_from_pose", "(", "pose_from_trans", "(", "trans", ")", "+", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "(", "4", ",", ")", ")", ",", "vector", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_z_rot": [[205, 207], ["transforms.quat_from_axis_angle"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_axis_angle"], ["", "def", "quat_from_z_rot", "(", "theta", ")", ":", "\n", "    ", "return", "quat_from_axis_angle", "(", "0", ",", "0", ",", "theta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.base_values_from_trans": [[209, 211], ["openravepy.RaveGetAffineDOFValuesFromTransform"], "function", ["None"], ["", "def", "base_values_from_trans", "(", "trans", ")", ":", "\n", "    ", "return", "RaveGetAffineDOFValuesFromTransform", "(", "trans", ",", "DOFAffine", ".", "X", "|", "DOFAffine", ".", "Y", "|", "DOFAffine", ".", "RotationAxis", ",", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.xyzt_from_trans": [[213, 215], ["openravepy.RaveGetAffineDOFValuesFromTransform"], "function", ["None"], ["", "def", "xyzt_from_trans", "(", "trans", ")", ":", "\n", "    ", "return", "RaveGetAffineDOFValuesFromTransform", "(", "trans", ",", "DOFAffine", ".", "X", "|", "DOFAffine", ".", "Y", "|", "DOFAffine", ".", "Z", "|", "DOFAffine", ".", "RotationAxis", ",", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.base_values_from_pose": [[217, 219], ["transforms.base_values_from_trans", "transforms.trans_from_pose"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.base_values_from_trans", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_pose"], ["", "def", "base_values_from_pose", "(", "pose", ")", ":", "\n", "    ", "return", "base_values_from_trans", "(", "trans_from_pose", "(", "pose", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.is_upright": [[221, 223], ["abs", "abs"], "function", ["None"], ["", "def", "is_upright", "(", "trans", ")", ":", "\n", "    ", "return", "abs", "(", "abs", "(", "trans", "[", "2", ",", "2", "]", ")", "-", "1", ")", "<", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_base_values": [[225, 228], ["transforms.pose_from_quat_point", "transforms.quat_from_z_rot"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_quat_point", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_z_rot"], ["", "def", "pose_from_base_values", "(", "base_values", ",", "z", "=", "0.0", ")", ":", "\n", "    ", "x", ",", "y", ",", "theta", "=", "base_values", "\n", "return", "pose_from_quat_point", "(", "quat_from_z_rot", "(", "theta", ")", ",", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_base_values": [[230, 232], ["transforms.trans_from_pose", "transforms.pose_from_base_values"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_pose", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_base_values"], ["", "def", "trans_from_base_values", "(", "base_values", ",", "z", "=", "0.0", ")", ":", "\n", "    ", "return", "trans_from_pose", "(", "pose_from_base_values", "(", "base_values", ",", "z", "=", "z", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans2D_from_trans": [[234, 236], ["transforms.trans_from_base_values", "transforms.base_values_from_trans"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_base_values", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.base_values_from_trans"], ["", "def", "trans2D_from_trans", "(", "trans", ")", ":", "\n", "    ", "return", "trans_from_base_values", "(", "base_values_from_trans", "(", "trans", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.point_from_full_config": [[238, 240], ["None"], "function", ["None"], ["", "def", "point_from_full_config", "(", "config", ")", ":", "\n", "    ", "return", "config", "[", "-", "7", ":", "-", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_full_config": [[242, 244], ["None"], "function", ["None"], ["", "def", "quat_from_full_config", "(", "config", ")", ":", "\n", "    ", "return", "config", "[", "-", "4", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_full_config": [[246, 248], ["numpy.concatenate", "transforms.quat_from_full_config", "transforms.point_from_full_config"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_full_config", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.point_from_full_config"], ["", "def", "pose_from_full_config", "(", "config", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "[", "quat_from_full_config", "(", "config", ")", ",", "point_from_full_config", "(", "config", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_full_config": [[250, 252], ["transforms.trans_from_pose", "transforms.pose_from_full_config"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_pose", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_full_config"], ["", "def", "trans_from_full_config", "(", "config", ")", ":", "\n", "    ", "return", "trans_from_pose", "(", "pose_from_full_config", "(", "config", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.base_values_from_full_config": [[254, 256], ["transforms.base_values_from_pose", "transforms.pose_from_full_config"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.base_values_from_pose", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_full_config"], ["", "def", "base_values_from_full_config", "(", "config", ")", ":", "\n", "    ", "return", "base_values_from_pose", "(", "pose_from_full_config", "(", "config", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.arm_from_full_config": [[258, 260], ["arm.GetArmIndices"], "function", ["None"], ["", "def", "arm_from_full_config", "(", "arm", ",", "config", ")", ":", "\n", "    ", "return", "config", "[", "arm", ".", "GetArmIndices", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.arm_and_base_from_full_config": [[262, 264], ["numpy.concatenate", "transforms.arm_from_full_config", "transforms.base_values_from_full_config"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.arm_from_full_config", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.base_values_from_full_config"], ["", "def", "arm_and_base_from_full_config", "(", "arm", ",", "config", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "[", "arm_from_full_config", "(", "arm", ",", "config", ")", ",", "base_values_from_full_config", "(", "config", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.full_config_from_pose": [[266, 271], ["config.copy"], "function", ["None"], ["", "def", "full_config_from_pose", "(", "pose", ",", "config", ")", ":", "\n", "    ", "new_config", "=", "config", ".", "copy", "(", ")", "\n", "new_config", "[", "-", "7", ":", "-", "4", "]", "=", "pose", "[", "-", "3", ":", "]", "\n", "new_config", "[", "-", "4", ":", "]", "=", "pose", "[", ":", "4", "]", "\n", "return", "new_config", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.full_config_from_trans": [[273, 275], ["transforms.full_config_from_pose", "transforms.pose_from_trans"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.full_config_from_pose", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_trans"], ["", "def", "full_config_from_trans", "(", "trans", ",", "config", ")", ":", "\n", "    ", "return", "full_config_from_pose", "(", "pose_from_trans", "(", "trans", ")", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.full_config_from_base_values": [[277, 280], ["transforms.point_from_full_config", "transforms.full_config_from_pose", "transforms.pose_from_base_values"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.point_from_full_config", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.full_config_from_pose", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_base_values"], ["", "def", "full_config_from_base_values", "(", "base_values", ",", "config", ")", ":", "\n", "    ", "_", ",", "_", ",", "z", "=", "point_from_full_config", "(", "config", ")", "\n", "return", "full_config_from_pose", "(", "pose_from_base_values", "(", "base_values", ",", "z", "=", "z", ")", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_trans": [[282, 284], ["body.GetTransform"], "function", ["None"], ["", "def", "get_trans", "(", "body", ")", ":", "\n", "    ", "return", "body", ".", "GetTransform", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_pose": [[286, 288], ["transforms.pose_from_trans", "transforms.get_trans"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_trans", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_trans"], ["", "def", "get_pose", "(", "body", ")", ":", "\n", "    ", "return", "pose_from_trans", "(", "get_trans", "(", "body", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_point": [[290, 292], ["transforms.point_from_trans", "transforms.get_trans"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.point_from_trans", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_trans"], ["", "def", "get_point", "(", "body", ")", ":", "\n", "    ", "return", "point_from_trans", "(", "get_trans", "(", "body", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_quat": [[294, 296], ["transforms.quat_from_pose", "transforms.get_pose"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_pose", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_pose"], ["", "def", "get_quat", "(", "body", ")", ":", "\n", "    ", "return", "quat_from_pose", "(", "get_pose", "(", "body", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_config": [[298, 302], ["body.GetDOFValues", "body.GetDOFValues"], "function", ["None"], ["", "def", "get_config", "(", "body", ",", "joint_indices", "=", "None", ")", ":", "\n", "    ", "if", "joint_indices", "is", "None", ":", "\n", "        ", "return", "body", ".", "GetDOFValues", "(", ")", "\n", "", "return", "body", ".", "GetDOFValues", "(", "indices", "=", "joint_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_active_config": [[304, 306], ["body.GetActiveDOFValues"], "function", ["None"], ["", "def", "get_active_config", "(", "body", ")", ":", "\n", "    ", "return", "body", ".", "GetActiveDOFValues", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_active_indices": [[308, 310], ["body.GetActiveDOFIndices"], "function", ["None"], ["", "def", "get_active_indices", "(", "body", ")", ":", "\n", "    ", "return", "body", ".", "GetActiveDOFIndices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_full_config": [[312, 316], ["body.GetConfigurationValues", "body.GetConfigurationValues"], "function", ["None"], ["", "def", "get_full_config", "(", "body", ",", "dof_indices", "=", "None", ")", ":", "\n", "    ", "if", "dof_indices", "is", "None", ":", "\n", "        ", "return", "body", ".", "GetConfigurationValues", "(", ")", "\n", "", "return", "body", ".", "GetConfigurationValues", "(", ")", "[", "dof_indices", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_trans": [[318, 320], ["body.SetTransform"], "function", ["None"], ["", "def", "set_trans", "(", "body", ",", "trans", ")", ":", "\n", "    ", "body", ".", "SetTransform", "(", "trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_pose": [[322, 324], ["transforms.set_trans", "transforms.trans_from_pose"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_trans", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.trans_from_pose"], ["", "def", "set_pose", "(", "body", ",", "pose", ")", ":", "\n", "    ", "set_trans", "(", "body", ",", "trans_from_pose", "(", "pose", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_xy": [[326, 329], ["transforms.get_point", "transforms.set_point", "numpy.array"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_point", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_point"], ["", "def", "set_xy", "(", "body", ",", "x", ",", "y", ")", ":", "\n", "    ", "point", "=", "get_point", "(", "body", ")", "\n", "set_point", "(", "body", ",", "np", ".", "array", "(", "[", "x", ",", "y", ",", "point", "[", "2", "]", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_point": [[331, 333], ["transforms.set_pose", "transforms.pose_from_quat_point", "transforms.get_quat"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_pose", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_quat_point", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_quat"], ["", "def", "set_point", "(", "body", ",", "point", ")", ":", "\n", "    ", "set_pose", "(", "body", ",", "pose_from_quat_point", "(", "get_quat", "(", "body", ")", ",", "point", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_quat": [[335, 337], ["transforms.set_pose", "transforms.pose_from_quat_point", "transforms.get_point"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_pose", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_quat_point", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_point"], ["", "def", "set_quat", "(", "body", ",", "quat", ")", ":", "\n", "    ", "set_pose", "(", "body", ",", "pose_from_quat_point", "(", "quat", ",", "get_point", "(", "body", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_config": [[339, 344], ["body.SetDOFValues", "body.SetDOFValues"], "function", ["None"], ["", "def", "set_config", "(", "body", ",", "config", ",", "joint_indices", "=", "None", ")", ":", "\n", "    ", "if", "joint_indices", "is", "None", ":", "\n", "        ", "body", ".", "SetDOFValues", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "body", ".", "SetDOFValues", "(", "config", ",", "joint_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_active_config": [[346, 348], ["body.SetActiveDOFValues"], "function", ["None"], ["", "", "def", "set_active_config", "(", "body", ",", "config", ")", ":", "\n", "    ", "body", ".", "SetActiveDOFValues", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_active_indices": [[350, 352], ["body.SetActiveDOFs"], "function", ["None"], ["", "def", "set_active_indices", "(", "body", ",", "indices", ")", ":", "\n", "    ", "body", ".", "SetActiveDOFs", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_full_config": [[354, 361], ["body.SetConfigurationValues", "transforms.get_full_config", "body.SetConfigurationValues"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_full_config"], ["", "def", "set_full_config", "(", "body", ",", "config", ",", "dof_indices", "=", "None", ")", ":", "\n", "    ", "if", "dof_indices", "is", "None", ":", "\n", "        ", "body", ".", "SetConfigurationValues", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "full_config", "=", "get_full_config", "(", "body", ")", "\n", "full_config", "[", "dof_indices", "]", "=", "config", "\n", "body", ".", "SetConfigurationValues", "(", "full_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_base_values": [[363, 368], ["transforms.get_trans", "transforms.rot_from_quat", "transforms.set_trans", "transforms.quat_from_z_rot"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.get_trans", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.rot_from_quat", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_trans", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.quat_from_z_rot"], ["", "", "def", "set_base_values", "(", "body", ",", "base_values", ")", ":", "\n", "    ", "trans", "=", "get_trans", "(", "body", ")", "\n", "trans", "[", ":", "3", ",", ":", "3", "]", "=", "rot_from_quat", "(", "quat_from_z_rot", "(", "base_values", "[", "-", "1", "]", ")", ")", "\n", "trans", "[", ":", "2", ",", "3", "]", "=", "base_values", "[", ":", "2", "]", "\n", "set_trans", "(", "body", ",", "trans", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_manipulator_values": [[370, 372], ["transforms.set_config", "manipulator.GetRobot", "manipulator.GetArmIndices"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_config"], ["", "def", "set_manipulator_values", "(", "manipulator", ",", "values", ")", ":", "\n", "    ", "set_config", "(", "manipulator", ".", "GetRobot", "(", ")", ",", "values", ",", "manipulator", ".", "GetArmIndices", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.object_trans_from_manip_trans": [[374, 376], ["numpy.dot"], "function", ["None"], ["", "def", "object_trans_from_manip_trans", "(", "manip_trans", ",", "grasp", ")", ":", "\n", "    ", "return", "np", ".", "dot", "(", "manip_trans", ",", "grasp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.manip_trans_from_object_trans": [[378, 381], ["numpy.linalg.solve"], "function", ["None"], ["", "def", "manip_trans_from_object_trans", "(", "object_trans", ",", "grasp", ")", ":", "\n", "\n", "    ", "return", "np", ".", "linalg", ".", "solve", "(", "grasp", ".", "T", ",", "object_trans", ".", "T", ")", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.compute_grasp": [[383, 385], ["numpy.linalg.solve"], "function", ["None"], ["", "def", "compute_grasp", "(", "manip_trans", ",", "object_trans", ")", ":", "\n", "    ", "return", "np", ".", "linalg", ".", "solve", "(", "manip_trans", ",", "object_trans", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.problems.RealProblem.__init__": [[40, 44], ["None"], "methods", ["None"], ["[", "1.0", ",", "1.5", ",", "2.0", "]", "]", ")", "\n", "robot", "=", "makeRobot", "(", "workspace", ",", "useLeft", "=", "True", ",", "useRight", "=", "False", ")", "\n", "base_conf", "=", "(", "-", ".75", ",", ".2", ",", "-", "math", ".", "pi", "/", "2", ")", "\n", "initial_conf", "=", "robot", ".", "makeConf", "(", "\n", "*", "base_conf", ",", "g", "=", "robot", ".", "gripMax", ",", "ignoreStandard", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.problems.RealProblem.__str__": [[45, 50], ["problems.RealProblem.__dict__.iteritems", "str"], "methods", ["None"], ["initial_conf", "=", "initial_conf", ".", "set", "(", "'pr2LeftArm'", ",", "TOP_HOLDING_LEFT_ARM", ")", "\n", "\n", "initial_poses", "=", "[", "]", "\n", "goal_poses", "=", "{", "}", "\n", "\n", "length", "=", "m", "*", "(", "box_dims", "[", "0", "]", "+", "separation", "[", "0", "]", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.problems.ManipulationProblem.__init__": [[92, 107], ["None"], "methods", ["None"], ["", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.problems.ManipulationProblem.__str__": [[108, 113], ["problems.ManipulationProblem.__dict__.iteritems", "str"], "methods", ["None"], []], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.problems.simple": [[53, 88], ["env.Load", "map", "filter", "map", "utils.set_manipulator_conf", "utils.open_gripper", "utils.set_manipulator_conf", "utils.close_gripper", "robot.SetDOFValues", "utils.set_base_conf", "robot.SetAffineTranslationLimits", "utils.box_body", "env.Add", "filter", "problems.RealProblem", "os.path.join", "env.GetBodies", "env.GetBodies", "env.GetRobots", "robot.GetManipulator", "robot.GetManipulator", "robot.GetManipulator", "utils.mirror_arm_config", "robot.GetManipulator", "surface_map[].sample_placement", "utils.get_name", "map", "robot.GetJointIndex", "robotics.openrave.transforms.set_pose", "env.GetBodies", "utils.get_name", "numpy.array"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_name", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_pose", "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.get_name"], ["table", "=", "get_box_body", "(", "length", ",", "width", ",", "height", ",", "name", "=", "'table'", ",", "color", "=", "'brown'", ")", "\n", "initial_poses", ".", "append", "(", "(", "table", ",", "hu", ".", "Pose", "(", "0", ",", "0", ",", "height", "/", "2", ",", "0", ")", ")", ")", "\n", "\n", "poses", "=", "[", "]", "\n", "z", "=", "height", "+", "height_dim", "/", "2", "+", "BODY_PLACEMENT_Z_OFFSET", "\n", "theta", "=", "0", "\n", "for", "r", "in", "range", "(", "m", ")", ":", "\n", "        ", "row", "=", "[", "]", "\n", "x", "=", "-", "length", "/", "2", "+", "(", "r", "+", ".5", ")", "*", "(", "box_dims", "[", "0", "]", "+", "separation", "[", "0", "]", ")", "\n", "for", "c", "in", "range", "(", "n", ")", ":", "\n", "            ", "y", "=", "-", "width", "/", "2", "+", "(", "c", "+", ".5", ")", "*", "(", "box_dims", "[", "1", "]", "+", "separation", "[", "1", "]", ")", "\n", "row", ".", "append", "(", "hu", ".", "Pose", "(", "x", ",", "y", ",", "z", ",", "theta", ")", ")", "\n", "", "poses", ".", "append", "(", "row", ")", "\n", "\n", "", "coordinates", "=", "list", "(", "product", "(", "range", "(", "m", ")", ",", "range", "(", "n", ")", ")", ")", "\n", "assert", "n_obj", "<=", "len", "(", "coordinates", ")", "\n", "obj_coordinates", "=", "sample", "(", "coordinates", ",", "n_obj", ")", "\n", "movable_names", "=", "[", "]", "\n", "for", "i", ",", "(", "r", ",", "c", ")", "in", "enumerate", "(", "obj_coordinates", ")", ":", "\n", "        ", "row_color", "=", "np", ".", "zeros", "(", "4", ")", "\n", "row_color", "[", "2", "-", "r", "]", "=", "1.", "\n", "if", "i", "==", "0", ":", "\n", "            ", "name", "=", "'goal%d-%d'", "%", "(", "r", ",", "c", ")", "\n", "color", "=", "'blue'", "\n", "\n", "goal_poses", "[", "name", "]", "=", "poses", "[", "m", "/", "2", "]", "[", "n", "/", "2", "]", "\n", "", "else", ":", "\n", "            ", "name", "=", "'block%d-%d'", "%", "(", "r", ",", "c", ")", "\n", "color", "=", "'red'", "\n", "\n", "", "obj", "=", "get_box_body", "(", "*", "box_dims", ",", "name", "=", "name", ",", "color", "=", "color", ")", "\n", "initial_poses", ".", "append", "(", "(", "obj", ",", "poses", "[", "r", "]", "[", "c", "]", ")", ")", "\n", "movable_names", ".", "append", "(", "name", ")", "\n", "\n", "", "known_poses", "=", "[", "pose", "for", "col", "in", "poses", "for", "pose", "in", "col", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.openrave.problems.dantam_distract": [[116, 180], ["env.Load", "list", "random.sample", "utils.box_body", "robotics.openrave.transforms.set_pose", "env.Add", "utils.set_manipulator_conf", "utils.open_gripper", "utils.set_manipulator_conf", "utils.close_gripper", "robot.SetDOFValues", "utils.set_base_conf", "range", "enumerate", "list", "initial_poses.keys", "list", "problems.ManipulationProblem", "os.path.join", "itertools.product", "len", "robotics.openrave.transforms.pose_from_quat_point", "env.GetRobots", "robot.GetManipulator", "robot.GetManipulator", "robot.GetManipulator", "utils.mirror_arm_config", "robot.GetManipulator", "range", "poses.append", "numpy.zeros", "utils.box_body", "robotics.openrave.transforms.set_pose", "env.Add", "stripstream.utils.flatten", "map", "range", "range", "robotics.openrave.transforms.unit_quat", "numpy.array", "robot.GetJointIndex", "row.append", "utils.top_grasps", "utils.Pose", "env.GetKinBody", "utils.box_body.GetName", "robotics.openrave.transforms.pose_from_quat_point", "robotics.openrave.transforms.unit_quat", "numpy.array"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_pose", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_quat_point", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.set_pose", "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.flatten", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_quat", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.pose_from_quat_point", "home.repos.pwc.inspect_result.caelan_stripstream.openrave.transforms.unit_quat"], []], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.Stack.__init__": [[9, 11], ["collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "array", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "stack", "=", "deque", "(", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.Stack.peek": [[12, 14], ["None"], "methods", ["None"], ["", "def", "peek", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stack", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.Stack.push": [[15, 17], ["priority_queue.Stack.stack.appendleft"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "_", ",", "element", ")", ":", "\n", "        ", "self", ".", "stack", ".", "appendleft", "(", "element", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.Stack.pop": [[18, 20], ["priority_queue.Stack.stack.popleft"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stack", ".", "popleft", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.Stack.empty": [[21, 23], ["len"], "methods", ["None"], ["", "def", "empty", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "stack", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.Queue.__init__": [[27, 29], ["collections.deque"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "array", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "queue", "=", "deque", "(", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.Queue.peek": [[30, 32], ["None"], "methods", ["None"], ["", "def", "peek", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "queue", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.Queue.push": [[33, 35], ["priority_queue.Queue.queue.append"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "_", ",", "element", ")", ":", "\n", "        ", "self", ".", "queue", ".", "append", "(", "element", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.Queue.pop": [[36, 38], ["priority_queue.Queue.queue.popleft"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "queue", ".", "popleft", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.Queue.empty": [[39, 41], ["len"], "methods", ["None"], ["", "def", "empty", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "queue", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.StableQueue.__init__": [[47, 49], ["itertools.count"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "counter", "=", "count", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.StableQueue.new_node": [[50, 52], ["priority_queue.StableQueue.Node", "next"], "methods", ["None"], ["", "def", "new_node", "(", "self", ",", "priority", ",", "element", ")", ":", "\n", "        ", "return", "self", ".", "Node", "(", "priority", ",", "self", ".", "sign", "*", "next", "(", "self", ".", "counter", ")", ",", "element", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.PriorityQueue.__init__": [[56, 60], ["priority_queue.StableQueue.__init__", "map", "heapq.heapify", "priority_queue.PriorityQueue.new_node"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__", "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.StableQueue.new_node"], ["    ", "def", "__init__", "(", "self", ",", "array", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "PriorityQueue", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "queue", "=", "map", "(", "lambda", "x", ":", "self", ".", "new_node", "(", "*", "x", ")", ",", "array", ")", "\n", "heapify", "(", "self", ".", "queue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.PriorityQueue.peek": [[61, 63], ["None"], "methods", ["None"], ["", "def", "peek", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "queue", "[", "0", "]", ".", "element", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.PriorityQueue.push": [[64, 66], ["heapq.heappush", "priority_queue.PriorityQueue.new_node"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.StableQueue.new_node"], ["", "def", "push", "(", "self", ",", "priority", ",", "element", ")", ":", "\n", "        ", "heappush", "(", "self", ".", "queue", ",", "self", ".", "new_node", "(", "priority", ",", "element", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.PriorityQueue.pop": [[67, 69], ["heapq.heappop"], "methods", ["None"], ["", "def", "pop", "(", "self", ")", ":", "\n", "        ", "return", "heappop", "(", "self", ".", "queue", ")", ".", "element", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.PriorityQueue.empty": [[70, 72], ["len"], "methods", ["None"], ["", "def", "empty", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "queue", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.ClassicPriorityQueue.__init__": [[84, 91], ["priority_queue.StableQueue.__init__", "set", "priority_queue.ClassicPriorityQueue.decrease_key"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__", "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.ClassicPriorityQueue.decrease_key"], ["    ", "def", "__init__", "(", "self", ",", "array", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", "ClassicPriorityQueue", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "queue", "=", "[", "]", "\n", "self", ".", "priorities", "=", "{", "}", "\n", "self", ".", "processed", "=", "set", "(", ")", "\n", "for", "x", "in", "array", ":", "\n", "            ", "self", ".", "decrease_key", "(", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.ClassicPriorityQueue.decrease_key": [[92, 96], ["heapq.heappush", "priority_queue.ClassicPriorityQueue.new_node"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.StableQueue.new_node"], ["", "", "def", "decrease_key", "(", "self", ",", "priority", ",", "element", ")", ":", "\n", "        ", "if", "element", "not", "in", "self", ".", "priorities", "or", "priority", "<", "self", ".", "priorities", "[", "element", "]", ":", "\n", "            ", "self", ".", "priorities", "[", "element", "]", "=", "priority", "\n", "heappush", "(", "self", ".", "queue", ",", "self", ".", "new_node", "(", "priority", ",", "element", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.ClassicPriorityQueue.clean": [[97, 100], ["heapq.heappop", "len"], "methods", ["None"], ["", "", "def", "clean", "(", "self", ")", ":", "\n", "        ", "while", "len", "(", "self", ".", "queue", ")", ">", "0", "and", "self", ".", "queue", "[", "0", "]", "in", "self", ".", "processed", ":", "\n", "            ", "heappop", "(", "self", ".", "queue", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.ClassicPriorityQueue.pop": [[101, 106], ["priority_queue.ClassicPriorityQueue.clean", "priority_queue.ClassicPriorityQueue.processed.add", "heapq.heappop"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.ClassicPriorityQueue.clean", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.add"], ["", "", "def", "pop", "(", "self", ")", ":", "\n", "        ", "self", ".", "clean", "(", ")", "\n", "element", "=", "heappop", "(", "self", ".", "queue", ")", ".", "element", "\n", "self", ".", "processed", ".", "add", "(", "element", ")", "\n", "return", "element", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.ClassicPriorityQueue.empty": [[107, 110], ["priority_queue.ClassicPriorityQueue.clean", "len"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.stripstream.priority_queue.ClassicPriorityQueue.clean"], ["", "def", "empty", "(", "self", ")", ":", "\n", "        ", "self", ".", "clean", "(", ")", "\n", "return", "len", "(", "self", ".", "queue", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.separator": [[11, 13], ["None"], "function", ["None"], ["\n", "\n", "", "def", "is_window_active", "(", "window_3d", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.header": [[15, 17], ["None"], "function", ["None"], ["\n", "\n", "", "def", "get_name", "(", "shape", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.set_deterministic": [[19, 23], ["random.seed", "numpy.random.seed"], "function", ["None"], ["\n", "\n", "", "def", "get_color", "(", "shape", ")", ":", "\n", "    ", "return", "shape", ".", "properties", "[", "'color'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.implies": [[25, 27], ["None"], "function", ["None"], ["", "def", "get_box_body", "(", "length", ",", "width", ",", "height", ",", "name", "=", "'box'", ",", "color", "=", "'black'", ")", ":", "\n", "    ", "return", "Shape", "(", "[", "\n", "BoxAligned", "(", "np", ".", "array", "(", "[", "(", "-", "length", "/", "2.", ",", "-", "width", "/", "2.", ",", "-", "height", "/", "2", ")", ",", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.flatten": [[29, 31], ["None"], "function", ["None"], ["]", ",", "None", ",", "name", "=", "name", ",", "color", "=", "color", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.irange": [[33, 38], ["None"], "function", ["None"], ["CENTER_FRAME", "=", "hu", ".", "Pose", "(", "0", ",", "0", ",", "0.025", ",", "0", ")", "\n", "\n", "\n", "def", "get_grasp_frame_origin", "(", "grasp_frame", ")", ":", "\n", "\n", "    ", "objFrame", "=", "hu", ".", "Pose", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.argmin": [[40, 44], ["list", "function", "scores.index", "min"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.function"], ["centerFrame", "=", "faceFrame", ".", "compose", "(", "CENTER_FRAME", ")", "\n", "graspFrame", "=", "objFrame", ".", "compose", "(", "centerFrame", ")", "\n", "return", "graspFrame", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.first": [[46, 51], ["function"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.function"], ["\n", "\n", "gMat0", "=", "hu", ".", "Transform", "(", "np", ".", "array", "(", "[", "(", "0.", ",", "1.", ",", "0.", ",", "0.", ")", ",", "\n", "(", "0.", ",", "0.", ",", "1.", ",", "-", "0.025", ")", ",", "\n", "(", "1.", ",", "0.", ",", "0.", ",", "Z_OFFSET", ")", ",", "\n", "(", "0.", ",", "0.", ",", "0.", ",", "1.", ")", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.random_sequence": [[53, 58], ["range", "random.shuffle", "len"], "function", ["None"], ["(", "0.", ",", "0.", ",", "-", "1.", ",", "0.025", ")", ",", "\n", "(", "1.", ",", "0.", ",", "0.", ",", "Z_OFFSET", ")", ",", "\n", "(", "0.", ",", "0.", ",", "0.", ",", "1.", ")", "]", ")", ")", "\n", "gMat4", "=", "hu", ".", "Pose", "(", "0", ",", "0", ",", "0", ",", "math", ".", "pi", "/", "2", ")", ".", "compose", "(", "gMat0", ")", "\n", "gMat5", "=", "hu", ".", "Pose", "(", "0", ",", "0", ",", "0", ",", "-", "math", ".", "pi", "/", "2", ")", ".", "compose", "(", "gMat0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.read": [[60, 63], ["open", "f.read"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.read"], ["\n", "\n", "gMat2", "=", "hu", ".", "Transform", "(", "np", ".", "array", "(", "[", "(", "-", "1.", ",", "0.", ",", "0.", ",", "0.", ")", ",", "\n", "(", "0.", ",", "0.", ",", "-", "1.", ",", "0.025", ")", ",", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.write": [[65, 68], ["open", "f.write"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.write"], ["(", "0.", ",", "0.", ",", "0.", ",", "1.", ")", "]", ")", ")", "\n", "gMat3", "=", "hu", ".", "Transform", "(", "np", ".", "array", "(", "[", "(", "1.", ",", "0.", ",", "0.", ",", "0.", ")", ",", "\n", "(", "0.", ",", "0.", ",", "1.", ",", "-", "0.025", ")", ",", "\n", "(", "0.", ",", "-", "1.", ",", "0.", ",", "0.", ")", ",", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.write_pickle": [[70, 73], ["open", "pickle.dump"], "function", ["None"], ["\n", "TOP_GRASPS", "=", "map", "(", "get_grasp_frame_origin", ",", "[", "gMat2", ",", "gMat3", "]", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.read_pickle": [[75, 78], ["open", "pickle.load"], "function", ["None"], ["    ", "return", "'pr2LeftArm'", "in", "robot", ".", "moveChainNames", "\n", "\n", "\n", "", "def", "is_right_active", "(", "robot", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.ensure_dir": [[80, 84], ["os.path.dirname", "os.path.exists", "os.makedirs"], "function", ["None"], ["\n", "\n", "", "def", "open_grippers", "(", "conf", ")", ":", "\n", "    ", "for", "arm", "in", "conf", ".", "robot", ".", "gripperChainNames", ":", "\n", "        ", "conf", ".", "set", "(", "conf", ".", "robot", ".", "gripperChainNames", "[", "arm", "]", ",", "[", "conf", ".", "robot", ".", "gripMax", "]", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.safe_remove": [[86, 89], ["os.path.exists", "os.remove"], "function", ["None"], ["\n", "", "", "def", "close_grippers", "(", "conf", ")", ":", "\n", "    ", "for", "arm", "in", "conf", ".", "robot", ".", "gripperChainNames", ":", "\n", "        ", "conf", ".", "set", "(", "conf", ".", "robot", ".", "gripperChainNames", "[", "arm", "]", ",", "[", "0.0", "]", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.remove_dir": [[91, 94], ["os.path.exists", "shutil.rmtree"], "function", ["None"], ["\n", "", "", "class", "Traj", "(", "object", ")", ":", "\n", "    ", "_ids", "=", "count", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.set_union": [[117, 119], ["set().union", "set"], "function", ["None"], ["\n", "\n", "", "def", "inverse_kinematics", "(", "default_conf", ",", "manip_trans", ",", "arm", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.problem.FTSProblem.__init__": [[6, 13], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "state_vars", ",", "control_vars", ",", "transition", ",", "samplers", ",", "initial_state", ",", "goal_constraints", ")", ":", "\n", "        ", "self", ".", "state_vars", "=", "state_vars", "\n", "self", ".", "control_vars", "=", "control_vars", "\n", "self", ".", "transition", "=", "transition", "\n", "self", ".", "samplers", "=", "samplers", "\n", "self", ".", "initial_state", "=", "initial_state", "\n", "self", ".", "goal_constraints", "=", "goal_constraints", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.problem.FTSProblem.get_variable_map": [[14, 16], ["None"], "methods", ["None"], ["", "def", "get_variable_map", "(", "self", ")", ":", "\n", "        ", "return", "{", "var", ".", "name", ":", "var", "for", "var", "in", "self", ".", "state_vars", "+", "self", ".", "control_vars", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.problem.FTSProblem.get_constraint_forms": [[17, 30], ["set", "set.add", "list", "list", "set.add", "set.add"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.add", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.add", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.add"], ["", "def", "get_constraint_forms", "(", "self", ")", ":", "\n", "        ", "con_forms", "=", "set", "(", ")", "\n", "for", "con", "in", "self", ".", "initial_state", "+", "self", ".", "goal_constraints", ":", "\n", "            ", "if", "con", ".", "constraint", "!=", "Eq", ":", "\n", "                ", "con_forms", ".", "add", "(", "con", ".", "constraint", ")", "\n", "", "", "for", "clause", "in", "self", ".", "transition", ":", "\n", "            ", "for", "con", "in", "clause", ".", "constraints", ":", "\n", "                ", "if", "con", ".", "constraint", "!=", "Eq", ":", "\n", "                    ", "con_forms", ".", "add", "(", "con", ".", "constraint", ")", "\n", "", "", "", "for", "sampler", "in", "self", ".", "samplers", ":", "\n", "            ", "for", "con", "in", "list", "(", "sampler", ".", "cons", ")", "+", "list", "(", "sampler", ".", "domain", ")", ":", "\n", "                ", "con_forms", ".", "add", "(", "con", ".", "constraint", ")", "\n", "", "", "return", "con_forms", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.problem.FTSProblem.__repr__": [[31, 34], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'Factored Transition System Problem\\n'", "'State Variables: %s\\n'", "'Control Variables: %s\\n'", "'Transition Relation: %s\\n'", "'Samplers: %s\\n'", "'Initial State: %s\\n'", "'Goal Constraints: %s'", "%", "(", "self", ".", "state_vars", ",", "self", ".", "control_vars", ",", "\n", "self", ".", "transition", ",", "self", ".", "samplers", ",", "self", ".", "initial_state", ",", "self", ".", "goal_constraints", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.sampler.Sampler.__init__": [[8, 30], ["filter", "tuple", "tuple", "isinstance", "isinstance", "str", "isinstance", "isinstance", "ValueError", "outputs.append", "outputs.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "values", ",", "gen", ",", "inputs", "=", "(", ")", ",", "domain", "=", "(", ")", ",", "name", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "cons", "=", "filter", "(", "lambda", "c", ":", "isinstance", "(", "c", ",", "Constraint", ")", ",", "values", ")", "\n", "self", ".", "gen", "=", "gen", "\n", "self", ".", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "self", ".", "domain", "=", "domain", "\n", "\n", "self", ".", "name", "=", "name", "if", "name", "is", "not", "None", "else", "self", ".", "__class__", ".", "__name__", "+", "str", "(", "values", ")", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "outputs", "=", "[", "]", "\n", "for", "val", "in", "values", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "Constraint", ")", ":", "\n", "                ", "for", "par", "in", "val", ".", "values", ":", "\n", "                    ", "assert", "isinstance", "(", "par", ",", "FreeParameter", ")", "\n", "if", "par", "not", "in", "self", ".", "inputs", "and", "par", "not", "in", "outputs", ":", "\n", "                        ", "outputs", ".", "append", "(", "par", ")", "\n", "", "", "", "elif", "isinstance", "(", "val", ",", "FreeParameter", ")", ":", "\n", "                ", "if", "val", "not", "in", "self", ".", "inputs", "and", "val", "not", "in", "outputs", ":", "\n", "                    ", "outputs", ".", "append", "(", "val", ")", "\n", "", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Unexpected value %s'", "%", "val", ")", "\n", "", "", "self", ".", "outputs", "=", "tuple", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.sampler.Sampler.__repr__": [[31, 33], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.sampler.convert_sampler": [[35, 57], ["stripstream.pddl.cond_streams.ExternalGenCondStream", "tuple", "sampler.gen", "map", "map", "const.type.get_value", "type", "new_output_list.append", "type", "len", "len", "tuple", "par.type", "zip"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value"], ["", "", "def", "convert_sampler", "(", "sampler", ")", ":", "\n", "    ", "def", "generator", "(", "inputs", ")", ":", "\n", "        ", "input_values", "=", "tuple", "(", "const", ".", "type", ".", "get_value", "(", "const", ")", "for", "const", "in", "inputs", ")", "\n", "for", "output_list", "in", "sampler", ".", "gen", "(", "*", "input_values", ")", ":", "\n", "            ", "assert", "type", "(", "output_list", ")", "==", "list", "\n", "new_output_list", "=", "[", "]", "\n", "for", "outputs", "in", "output_list", ":", "\n", "                ", "if", "type", "(", "outputs", ")", "not", "in", "[", "list", ",", "tuple", "]", ":", "\n", "                    ", "outputs", "=", "[", "outputs", "]", "\n", "", "assert", "len", "(", "outputs", ")", "==", "len", "(", "sampler", ".", "outputs", ")", "\n", "new_output_list", ".", "append", "(", "tuple", "(", "par", ".", "type", "(", "out", ")", "\n", "for", "par", ",", "out", "in", "zip", "(", "sampler", ".", "outputs", ",", "outputs", ")", ")", ")", "\n", "", "yield", "new_output_list", "\n", "\n", "", "", "return", "ExternalGenCondStream", "(", "\n", "generator", "=", "generator", ",", "\n", "name", "=", "sampler", ".", "name", ",", "\n", "inputs", "=", "sampler", ".", "inputs", ",", "\n", "outputs", "=", "sampler", ".", "outputs", ",", "\n", "conditions", "=", "map", "(", "convert_constraint", ",", "sampler", ".", "domain", ")", ",", "\n", "effects", "=", "map", "(", "convert_constraint", ",", "sampler", ".", "cons", ")", ",", "\n", "**", "sampler", ".", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.derived.create_axiom": [[7, 22], ["tuple", "tuple", "tuple", "zip", "conditions.append", "stripstream.pddl.logic.predicates.Predicate", "stripstream.pddl.logic.predicates.Predicate.", "stripstream.pddl.operators.STRIPSAxiom", "con_form.predicate", "conditions.append", "len", "var_map[].predicate"], "function", ["None"], ["def", "create_axiom", "(", "con_form", ",", "var_names", ",", "params", ",", "inputs", ",", "var_map", ",", "axiom_map", ")", ":", "\n", "    ", "key", "=", "(", "con_form", ",", "tuple", "(", "var_names", ")", ",", "tuple", "(", "params", ")", ",", "tuple", "(", "inputs", ")", ")", "\n", "if", "key", "not", "in", "axiom_map", ":", "\n", "        ", "conditions", "=", "[", "]", "\n", "for", "name", ",", "nested", "in", "zip", "(", "var_names", ",", "params", ")", ":", "\n", "            ", "if", "name", "is", "not", "None", ":", "\n", "                ", "conditions", ".", "append", "(", "var_map", "[", "name", "]", ".", "predicate", "(", "*", "nested", ")", ")", "\n", "", "", "con_params", "=", "[", "nested", "[", "-", "1", "]", "for", "nested", "in", "params", "]", "\n", "conditions", ".", "append", "(", "con_form", ".", "predicate", "(", "*", "con_params", ")", ")", "\n", "\n", "DerPred", "=", "Predicate", "(", "'_der_%s'", "%", "len", "(", "axiom_map", ")", ",", "[", "\n", "par", ".", "type", "for", "par", "in", "inputs", "]", ")", "\n", "effect", "=", "DerPred", "(", "*", "inputs", ")", "\n", "axiom_map", "[", "key", "]", "=", "STRIPSAxiom", "(", "conditions", ",", "[", "effect", "]", ")", "\n", "", "return", "axiom_map", "[", "key", "]", ".", "effects", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.derived.get_derived": [[24, 76], ["enumerate", "derived.create_axiom", "zip", "create_axiom.predicate", "stripstream.fts.variable.Par", "isinstance", "new_args.append", "isinstance", "isinstance", "var_names.append", "enumerate", "nested.append", "params.append", "var_names.append", "derived.get_derived.get_item"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.fts.derived.create_axiom"], ["", "def", "get_derived", "(", "con", ",", "var_map", ",", "axiom_map", ",", "constants", ")", ":", "\n", "\n", "    ", "param_map", "=", "{", "}", "\n", "num_params", "=", "[", "0", "]", "\n", "\n", "def", "get_item", "(", "item", ",", "dtype", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "FreeParameter", ")", "or", "isinstance", "(", "item", ",", "VarMember", ")", ":", "\n", "            ", "if", "item", "not", "in", "param_map", ":", "\n", "                ", "num_params", "[", "0", "]", "+=", "1", "\n", "param_map", "[", "item", "]", "=", "Par", "(", "'%s'", "%", "num_params", "[", "0", "]", ",", "dtype", ")", "\n", "", "return", "param_map", "[", "item", "]", "\n", "", "num_params", "[", "0", "]", "+=", "1", "\n", "return", "Par", "(", "'%s'", "%", "num_params", "[", "0", "]", ",", "dtype", ")", "\n", "\n", "", "var_names", "=", "[", "]", "\n", "params", "=", "[", "]", "\n", "inputs", "=", "[", "]", "\n", "constant_map", "=", "{", "}", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "con", ".", "values", ")", ":", "\n", "        ", "if", "isinstance", "(", "item", ",", "VarMember", ")", ":", "\n", "            ", "name", ",", "args", "=", "item", ".", "var", "[", "0", "]", ",", "item", ".", "var", "[", "1", ":", "]", "\n", "var_names", ".", "append", "(", "name", ")", "\n", "assert", "len", "(", "var_map", "[", "name", "]", ".", "args", ")", "==", "len", "(", "args", ")", "\n", "nested", "=", "[", "]", "\n", "for", "j", ",", "arg", "in", "enumerate", "(", "args", ")", ":", "\n", "                ", "param", "=", "get_item", "(", "arg", ",", "var_map", "[", "name", "]", ".", "args", "[", "j", "]", ")", "\n", "\n", "if", "arg", "in", "constants", ":", "\n", "                    ", "inputs", ".", "append", "(", "param", ")", "\n", "constant_map", "[", "param", "]", "=", "arg", "\n", "", "nested", ".", "append", "(", "param", ")", "\n", "", "nested", ".", "append", "(", "get_item", "(", "item", ",", "var_map", "[", "name", "]", ".", "dtype", ")", ")", "\n", "params", ".", "append", "(", "tuple", "(", "nested", ")", ")", "\n", "", "else", ":", "\n", "            ", "var_names", ".", "append", "(", "None", ")", "\n", "param", "=", "get_item", "(", "item", ",", "con", ".", "constraint", ".", "types", "[", "i", "]", ")", "\n", "\n", "if", "item", "in", "constants", ":", "\n", "                ", "inputs", ".", "append", "(", "param", ")", "\n", "constant_map", "[", "param", "]", "=", "item", "\n", "", "params", ".", "append", "(", "(", "param", ",", ")", ")", "\n", "\n", "", "", "effect", "=", "create_axiom", "(", "con", ".", "constraint", ",", "var_names", ",", "\n", "params", ",", "inputs", ",", "var_map", ",", "axiom_map", ")", "\n", "\n", "new_args", "=", "[", "]", "\n", "for", "ty", ",", "arg", "in", "zip", "(", "effect", ".", "predicate", ".", "types", ",", "effect", ".", "args", ")", ":", "\n", "        ", "value", "=", "constant_map", "[", "arg", "]", "\n", "if", "not", "isinstance", "(", "value", ",", "FreeParameter", ")", "and", "not", "isinstance", "(", "value", ",", "Constant", ")", ":", "\n", "            ", "value", "=", "ty", "(", "value", ")", "\n", "", "new_args", ".", "append", "(", "value", ")", "\n", "", "return", "effect", ".", "predicate", "(", "*", "new_args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.constraint.ConstraintType.__init__": [[14, 24], ["tuple", "tuple", "tuple", "stripstream.pddl.logic.predicates.Predicate"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "types", "=", "(", ")", ",", "test", "=", "None", ",", "domain", "=", "(", ")", ",", "satisfying", "=", "(", ")", ",", "name", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "types", "=", "tuple", "(", "types", ")", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "n", "=", "ConstraintType", ".", "num", "\n", "ConstraintType", ".", "num", "+=", "1", "\n", "self", ".", "name", "=", "name", "if", "name", "is", "not", "None", "else", "self", ".", "prefix", "%", "self", ".", "n", "\n", "self", ".", "domain", "=", "tuple", "(", "domain", ")", "\n", "self", ".", "satisfying", "=", "tuple", "(", "satisfying", ")", "\n", "self", ".", "predicate", "=", "Predicate", "(", "self", ".", "name", ",", "self", ".", "types", ")", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.constraint.ConstraintType.__call__": [[25, 27], ["constraint.Constraint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "Constraint", "(", "self", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.constraint.ConstraintType.__repr__": [[28, 30], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.constraint.Constraint.__init__": [[51, 54], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "constraint", ",", "values", ")", ":", "\n", "        ", "self", ".", "constraint", "=", "constraint", "\n", "self", ".", "values", "=", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.constraint.Constraint.__eq__": [[55, 57], ["type", "type"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "==", "type", "(", "other", ")", "and", "self", ".", "constraint", "==", "other", ".", "constraint", "and", "self", ".", "values", "==", "other", ".", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.constraint.Constraint.__ne__": [[58, 60], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "(", "self", "==", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.constraint.Constraint.__hash__": [[61, 63], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "(", "self", ".", "__class__", ",", "self", ".", "constraint", ",", "self", ".", "values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.constraint.Constraint.__repr__": [[64, 66], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'%s(%s)'", "%", "(", "self", ".", "constraint", ".", "name", ",", "','", ".", "join", "(", "repr", "(", "value", ")", "for", "value", "in", "self", ".", "values", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.constraint.convert_constraint": [[68, 72], ["all", "constraint.constraint.predicate", "isinstance"], "function", ["None"], ["", "", "def", "convert_constraint", "(", "constraint", ")", ":", "\n", "\n", "    ", "assert", "all", "(", "isinstance", "(", "item", ",", "FreeParameter", ")", "for", "item", "in", "constraint", ".", "values", ")", "\n", "return", "constraint", ".", "constraint", ".", "predicate", "(", "*", "constraint", ".", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.constraint.make_test_stream": [[74, 90], ["constraint_form", "stripstream.pddl.cond_streams.ExternalTestCondStream", "stripstream.fts.variable.FreeParameter", "constraint_form.test", "enumerate", "map", "map", "i.type.get_value"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.TestStream.test", "home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value"], ["", "def", "make_test_stream", "(", "constraint_form", ")", ":", "\n", "    ", "assert", "constraint_form", ".", "test", "is", "not", "None", "\n", "assert", "not", "constraint_form", ".", "domain", "\n", "params", "=", "[", "FreeParameter", "(", "'%s'", "%", "i", ",", "dtype", ")", "\n", "for", "i", ",", "dtype", "in", "enumerate", "(", "constraint_form", ".", "types", ")", "]", "\n", "constraint", "=", "constraint_form", "(", "*", "params", ")", "\n", "test", "=", "lambda", "inputs", ":", "constraint_form", ".", "test", "(", "\n", "*", "[", "i", ".", "type", ".", "get_value", "(", "i", ")", "for", "i", "in", "inputs", "]", ")", "\n", "return", "ExternalTestCondStream", "(", "\n", "test", "=", "test", ",", "\n", "name", "=", "constraint_form", ".", "name", ",", "\n", "inputs", "=", "params", ",", "\n", "conditions", "=", "map", "(", "convert_constraint", ",", "constraint_form", ".", "domain", ")", ",", "\n", "effects", "=", "map", "(", "convert_constraint", ",", "[", "constraint", "]", ")", ",", "\n", "eager", "=", "EAGER_TEST", ",", "\n", "**", "constraint_form", ".", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.constraint.make_con_constants": [[93, 96], ["stripstream.fts.variable.is_constant", "ty", "zip"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.is_constant"], ["", "def", "make_con_constants", "(", "con", ")", ":", "\n", "    ", "return", "[", "ty", "(", "arg", ")", "if", "is_constant", "(", "arg", ")", "else", "arg", "\n", "for", "ty", ",", "arg", "in", "zip", "(", "con", ".", "constraint", ".", "types", ",", "con", ".", "values", ")", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.utils.get_value": [[7, 11], ["x.type.get_value", "type", "isinstance"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value"], ["\n", "\n", "def", "get_window_name", "(", "window_3d", ")", ":", "\n", "    ", "return", "window_3d", ".", "window", ".", "title", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.utils.convert_plan": [[13, 17], ["map"], "function", ["None"], ["", "def", "is_window_active", "(", "window_3d", ")", ":", "\n", "    ", "return", "window_3d", ".", "window", "is", "not", "None", "\n", "\n", "\n", "", "def", "get_name", "(", "shape", ")", ":", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.utils.rename_variables": [[19, 28], ["assignments.iteritems", "type", "name.lower", "type", "name.lower", "stripstream.pddl.logic.predicates.Predicate", "type", "stripstream.fts.variable.FreeParameter.__init__"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["\n", "\n", "", "def", "get_color", "(", "shape", ")", ":", "\n", "    ", "return", "shape", ".", "properties", "[", "'color'", "]", "\n", "\n", "\n", "", "def", "get_box_body", "(", "length", ",", "width", ",", "height", ",", "name", "=", "'box'", ",", "color", "=", "'black'", ")", ":", "\n", "    ", "return", "Shape", "(", "[", "\n", "BoxAligned", "(", "np", ".", "array", "(", "[", "(", "-", "length", "/", "2.", ",", "-", "width", "/", "2.", ",", "-", "height", "/", "2", ")", ",", "\n", "(", "length", "/", "2.", ",", "width", "/", "2.", ",", "height", "/", "2", ")", "]", ")", ",", "None", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.VariableType.__init__": [[10, 18], ["stripstream.pddl.objects.Type.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["def", "__init__", "(", "self", ",", "name", "=", "None", ",", "domain", "=", "None", ")", ":", "\n", "        ", "if", "name", "is", "None", ":", "\n", "            ", "name", "=", "self", ".", "prefix", "%", "VariableType", ".", "num", "\n", "VariableType", ".", "num", "+=", "1", "\n", "", "self", ".", "value_to_const", "=", "{", "}", "\n", "self", ".", "const_to_value", "=", "{", "}", "\n", "self", ".", "domain", "=", "domain", "\n", "super", "(", "VariableType", ",", "self", ")", ".", "__init__", "(", "name", ",", "parent", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.VariableType.__call__": [[19, 28], ["stripstream.pddl.objects.Constant", "ValueError", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "value", "not", "in", "self", ".", "value_to_const", ":", "\n", "            ", "if", "self", ".", "domain", "is", "not", "None", "and", "value", "not", "in", "self", ".", "domain", ":", "\n", "                ", "raise", "ValueError", "(", "'%s not in the domain of %s'", "%", "(", "value", ",", "self", ")", ")", "\n", "", "name", "=", "'%s_%s'", "%", "(", "self", ".", "name", ",", "len", "(", "self", ".", "value_to_const", ")", ")", "\n", "const", "=", "Constant", "(", "name", ",", "self", ")", "\n", "self", ".", "value_to_const", "[", "value", "]", "=", "const", "\n", "self", ".", "const_to_value", "[", "const", "]", "=", "value", "\n", "", "return", "self", ".", "value_to_const", "[", "value", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.VariableType.get_value": [[29, 31], ["None"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "const", ")", ":", "\n", "        ", "return", "self", ".", "const_to_value", "[", "const", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.VariableType.param": [[32, 34], ["variable.FreeParameter"], "methods", ["None"], ["", "def", "param", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "FreeParameter", "(", "name", ",", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.FreeParameter.__init__": [[46, 53], ["stripstream.pddl.objects.Parameter.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["def", "__init__", "(", "self", ",", "name", ",", "type", "=", "None", ")", ":", "\n", "        ", "if", "type", "is", "None", ":", "\n", "            ", "type", "=", "name", "\n", "assert", "isinstance", "(", "type", ",", "VarType", ")", "\n", "name", "=", "self", ".", "prefix", "%", "FreeParameter", ".", "num", "\n", "FreeParameter", ".", "num", "+=", "1", "\n", "", "super", "(", "FreeParameter", ",", "self", ")", ".", "__init__", "(", "name", ",", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.Variable.__init__": [[71, 77], ["all", "stripstream.pddl.logic.predicates.Predicate"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "dtype", ",", "args", "=", "[", "]", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "args", "=", "args", "\n", "assert", "all", "(", "arg", ".", "domain", "is", "not", "None", "for", "arg", "in", "args", ")", "\n", "self", ".", "predicate", "=", "Predicate", "(", "'%s_at'", "%", "name", ",", "args", "+", "[", "dtype", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.Variable.__repr__": [[78, 82], ["map"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "args", ":", "\n", "            ", "return", "self", ".", "name", "\n", "", "return", "'%s(%s)'", "%", "(", "self", ".", "name", ",", "','", ".", "join", "(", "map", "(", "repr", ",", "self", ".", "args", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.VariableSet.__init__": [[88, 90], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.VariableSet.__getitem__": [[91, 95], ["VarMember", "isinstance"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "var", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "var", ",", "tuple", ")", ":", "\n", "            ", "var", "=", "(", "var", ",", ")", "\n", "", "return", "VarMember", "(", "self", ",", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.VariableSet.__call__": [[96, 98], ["variable.VariableSet.__getitem__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.VariableSet.__getitem__"], ["", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "return", "self", ".", "__getitem__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.VariableSet.__repr__": [[99, 101], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.VariableMember.__init__": [[109, 112], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "temp", ",", "var", ")", ":", "\n", "        ", "self", ".", "temp", "=", "temp", "\n", "self", ".", "var", "=", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.VariableMember.__eq__": [[113, 115], ["type", "type"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "==", "type", "(", "other", ")", "and", "self", ".", "temp", "==", "other", ".", "temp", "and", "self", ".", "var", "==", "other", ".", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.VariableMember.__ne__": [[116, 118], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "(", "self", "==", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.VariableMember.__hash__": [[119, 121], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "(", "self", ".", "__class__", ",", "self", ".", "temp", ",", "self", ".", "var", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.VariableMember.__repr__": [[122, 124], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'%s[%s]'", "%", "(", "self", ".", "temp", ",", "','", ".", "join", "(", "repr", "(", "item", ")", "for", "item", "in", "self", ".", "var", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.get_value": [[38, 40], ["const.type.get_value"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value"], ["def", "get_value", "(", "const", ")", ":", "\n", "    ", "return", "const", ".", "type", ".", "get_value", "(", "const", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.var_name": [[57, 59], ["None"], "function", ["None"], ["def", "var_name", "(", "var", ")", ":", "\n", "    ", "return", "var", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.var_args": [[61, 63], ["None"], "function", ["None"], ["", "def", "var_args", "(", "var", ")", ":", "\n", "    ", "return", "var", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.split_var": [[65, 67], ["variable.var_name", "variable.var_args"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.var_name", "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.var_args"], ["", "def", "split_var", "(", "var", ")", ":", "\n", "    ", "return", "var_name", "(", "var", ")", ",", "var_args", "(", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.is_parameter": [[128, 130], ["isinstance", "isinstance"], "function", ["None"], ["def", "is_parameter", "(", "v", ")", ":", "\n", "    ", "return", "isinstance", "(", "v", ",", "FreeParameter", ")", "or", "isinstance", "(", "v", ",", "VarMember", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.is_constant": [[132, 134], ["variable.is_parameter"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.is_parameter"], ["", "def", "is_constant", "(", "v", ")", ":", "\n", "    ", "return", "not", "is_parameter", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.expand_variables": [[136, 144], ["set", "itertools.product", "set.add"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.add"], ["", "def", "expand_variables", "(", "vars", ")", ":", "\n", "    ", "expanded_vars", "=", "set", "(", ")", "\n", "for", "var", "in", "vars", ":", "\n", "        ", "values", "=", "[", "[", "var", ".", "name", "]", "]", "+", "[", "arg", ".", "domain", "for", "arg", "in", "var", ".", "args", "]", "\n", "for", "combo", "in", "product", "(", "*", "values", ")", ":", "\n", "            ", "assert", "var", "not", "in", "expanded_vars", "\n", "expanded_vars", ".", "add", "(", "combo", ")", "\n", "", "", "return", "expanded_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.make_var_constants": [[146, 150], ["variable.split_var", "len", "len", "ty", "zip", "isinstance"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.fts.variable.split_var"], ["", "def", "make_var_constants", "(", "var", ",", "var_map", ")", ":", "\n", "    ", "name", ",", "args", "=", "split_var", "(", "var", ")", "\n", "assert", "len", "(", "args", ")", "==", "len", "(", "var_map", "[", "name", "]", ".", "args", ")", "\n", "return", "[", "ty", "(", "arg", ")", "if", "not", "isinstance", "(", "arg", ",", "FreeParameter", ")", "else", "arg", "for", "ty", ",", "arg", "in", "zip", "(", "var_map", "[", "name", "]", ".", "args", ",", "args", ")", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.Type.__init__": [[9, 19], ["name.lower"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "parent", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        PDDL type.\n\n        :param name: the string name of the type\n        :param parent: the parent :class:`.Type`\n        \"\"\"", "\n", "self", ".", "name", "=", "name", ".", "lower", "(", ")", "\n", "self", ".", "parent", "=", "parent", "\n", "self", ".", "_hash", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.Type.__eq__": [[20, 22], ["type", "type"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "==", "type", "(", "other", ")", "and", "self", ".", "name", "==", "other", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.Type.__ne__": [[23, 25], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "(", "self", "==", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.Type.__hash__": [[26, 30], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_hash", "is", "None", ":", "\n", "            ", "self", ".", "_hash", "=", "hash", "(", "(", "self", ".", "__class__", ",", "self", ".", "name", ")", ")", "\n", "", "return", "self", ".", "_hash", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.Type.__repr__": [[31, 33], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.Type.pddl": [[34, 36], ["None"], "methods", ["None"], ["", "def", "pddl", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.FixedType.__init__": [[42, 45], ["objects.Type.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "universe", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "universe", "=", "universe", "\n", "super", "(", "FixedType", ",", "self", ")", ".", "__init__", "(", "name", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.EuclideanType.__init__": [[61, 64], ["objects.Type.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "norm", ")", ":", "\n", "        ", "self", ".", "norm", "=", "norm", "\n", "super", "(", "EuclideanType", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.EasyType.__init__": [[79, 85], ["objects.Type.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "name", "=", "self", ".", "_template", "%", "EasyType", ".", "_num", "\n", "EasyType", ".", "_num", "+=", "1", "\n", "self", ".", "const_to_value", "=", "{", "}", "\n", "self", ".", "value_to_const", "=", "{", "}", "\n", "super", "(", "EasyType", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.EasyType.get_const": [[86, 95], ["isinstance", "ValueError", "objects.Constant", "len"], "methods", ["None"], ["", "def", "get_const", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "value", ",", "collections", ".", "Hashable", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'%s is not hashable'", "%", "value", ")", "\n", "", "if", "value", "not", "in", "self", ".", "value_to_const", ":", "\n", "\n", "            ", "name", "=", "self", ".", "_const_template", "%", "(", "self", ".", "name", ",", "len", "(", "self", ".", "value_to_const", ")", ")", "\n", "self", ".", "value_to_const", "[", "value", "]", "=", "Constant", "(", "name", ",", "self", ")", "\n", "self", ".", "const_to_value", "[", "self", ".", "value_to_const", "[", "value", "]", "]", "=", "value", "\n", "", "return", "self", ".", "value_to_const", "[", "value", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.EasyType.get_value": [[96, 98], ["None"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "const", ")", ":", "\n", "        ", "return", "self", ".", "const_to_value", "[", "const", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.EasyType.get_param": [[99, 101], ["objects.EasyParameter"], "methods", ["None"], ["", "def", "get_param", "(", "self", ")", ":", "\n", "        ", "return", "EasyParameter", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.EasyType.__call__": [[102, 108], ["ValueError", "len", "objects.EasyType.get_param", "len", "objects.EasyType.get_const"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.EasyType.get_param", "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.EasyType.get_const"], ["", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "len", "(", "args", ")", "==", "0", ":", "\n", "            ", "return", "self", ".", "get_param", "(", ")", "\n", "", "if", "len", "(", "args", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "get_const", "(", "args", "[", "0", "]", ")", "\n", "", "raise", "ValueError", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.Object.__init__": [[112, 122], ["name.lower"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "type", ")", ":", "\n", "        ", "\"\"\"\n        PDDL object abstract class.\n\n        :param name: the string name of the object\n        :param type: the :class:`.Type` of the object\n        \"\"\"", "\n", "self", ".", "name", "=", "name", ".", "lower", "(", ")", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "_hash", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.Object.__eq__": [[123, 125], ["type", "type"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "==", "type", "(", "other", ")", "and", "self", ".", "name", "==", "other", ".", "name", "and", "self", ".", "type", "==", "other", ".", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.Object.__ne__": [[126, 128], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "(", "self", "==", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.Object.__hash__": [[129, 133], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_hash", "is", "None", ":", "\n", "            ", "self", ".", "_hash", "=", "hash", "(", "(", "self", ".", "__class__", ",", "self", ".", "name", ",", "self", ".", "type", ")", ")", "\n", "", "return", "self", ".", "_hash", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.Object.pddl": [[134, 136], ["None"], "methods", ["None"], ["", "def", "pddl", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.Object.typed_pddl": [[137, 139], ["None"], "methods", ["None"], ["", "def", "typed_pddl", "(", "self", ")", ":", "\n", "        ", "return", "TYPE_PAIR", "%", "(", "self", ".", "name", ",", "self", ".", "type", ")", "\n", "", "__repr__", "=", "pddl", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.Parameter.__init__": [[151, 159], ["objects.Object.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "type", ")", ":", "\n", "        ", "\"\"\"\n        PDDL parameter which extends :class:`.Object`.\n\n        :param name: the string name of the parameter\n        :param type: the :class:`.Type` of the parameter\n        \"\"\"", "\n", "super", "(", "Parameter", ",", "self", ")", ".", "__init__", "(", "PARAM_PREFIX", "+", "name", ",", "type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.Parameter.original": [[160, 163], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "original", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "name", "[", "len", "(", "PARAM_PREFIX", ")", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.EasyParameter.__init__": [[177, 184], ["objects.Parameter.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["def", "__init__", "(", "self", ",", "type", ")", ":", "\n", "        ", "\"\"\"\n        :param type: the :class:`.Type` of the parameter\n        \"\"\"", "\n", "super", "(", "EasyParameter", ",", "self", ")", ".", "__init__", "(", "\n", "self", ".", "_template", "%", "EasyParameter", ".", "_num", ",", "type", ")", "\n", "EasyParameter", ".", "_num", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.NamedObject.__init__": [[188, 191], ["objects.Object.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "super", "(", "NamedObject", ",", "self", ")", ".", "__init__", "(", "value", ".", "name", ",", "self", ".", "type", ")", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.StringObject.__init__": [[195, 199], ["objects.Object.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "super", "(", "StringObject", ",", "self", ")", ".", "__init__", "(", "'%s%s'", "%", "\n", "(", "self", ".", "prefix", ",", "value", ")", ",", "self", ".", "type", ")", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.HashableObject.__init__": [[205, 214], ["objects.Object.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "prefix", "not", "in", "self", ".", "dictionary", ":", "\n", "            ", "self", ".", "dictionary", "[", "self", ".", "prefix", "]", "=", "{", "}", "\n", "", "if", "value", "not", "in", "self", ".", "dictionary", "[", "self", ".", "prefix", "]", ":", "\n", "            ", "self", ".", "dictionary", "[", "self", ".", "prefix", "]", "[", "value", "]", "=", "'%s%s'", "%", "(", "\n", "self", ".", "prefix", ",", "len", "(", "self", ".", "dictionary", "[", "self", ".", "prefix", "]", ")", ")", "\n", "", "super", "(", "HashableObject", ",", "self", ")", ".", "__init__", "(", "\n", "self", ".", "dictionary", "[", "self", ".", "prefix", "]", "[", "value", "]", ",", "self", ".", "type", ")", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.HashableObject.__repr__": [[215, 221], ["isinstance", "round"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "value_repr", ":", "\n", "            ", "repr_value", "=", "round", "(", "self", ".", "value", ",", "3", ")", "if", "isinstance", "(", "\n", "self", ".", "value", ",", "float", ")", "else", "self", ".", "value", "\n", "return", "'%s(%s)'", "%", "(", "self", ".", "prefix", ",", "repr_value", ")", "\n", "", "return", "self", ".", "name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.ConditionalStream.__init__": [[33, 91], ["tuple", "tuple", "tuple", "tuple", "cond_streams.mdp_cost", "all", "ValueError", "all", "ValueError", "set", "set", "ValueError", "all", "ValueError", "all", "ValueError", "ValueError", "ValueError", "isinstance", "set", "isinstance", "set", "set", "set", "isinstance", "isinstance", "set", "isinstance", "isinstance", "set", "set", "list", "list", "set", "set"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.mdp_cost"], ["def", "__init__", "(", "self", ",", "inputs", ",", "outputs", ",", "conditions", ",", "effects", ",", "\n", "eager", "=", "False", ",", "cost", "=", "DEFAULT_COST", ",", "order", "=", "0", ",", "plannable", "=", "True", ",", "\n", "prob", "=", "1.", ",", "avg_time", "=", "1.", ",", "max_level", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Conditional stream abstract class.\n\n        :param inputs: a list of :class:`.Parameter` which are the inputs to ``StreamFn``\n        :param outputs: a list of :class:`.Parameter` which are the outputs from ``StreamFn``\n        :param conditions: a list of :class:`.Atom` forming a conjunctive condition on inputs\n        :param effects: a list of :class:`.Atom` forming a conjunctive effect on inputs\n        :param eager: boolean which informs a planner to apply ``self`` immediately\n        :param cost: numeric which informs a planner of the difficultly (ex. runtime, likelihood of success) in applying ``self``\n        :param order: numeric which informs a planner of the order to apply ``self``\n        :param plannable: boolean which informs a planner if ``self`` can be treated as an action\n        \"\"\"", "\n", "if", "not", "all", "(", "isinstance", "(", "p", ",", "Parameter", ")", "for", "p", "in", "inputs", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'All inputs must be class Parameter: %s'", "%", "inputs", ")", "\n", "", "if", "not", "all", "(", "isinstance", "(", "p", ",", "Parameter", ")", "for", "p", "in", "outputs", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'All outputs must be of class Parameter: %s'", "%", "outputs", ")", "\n", "", "if", "set", "(", "inputs", ")", "&", "set", "(", "outputs", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'The input and output parameters must be distinct: %s'", "%", "set", "(", "\n", "inputs", ")", "&", "set", "(", "outputs", ")", ")", "\n", "", "if", "not", "all", "(", "isinstance", "(", "atom", ",", "Atom", ")", "for", "atom", "in", "conditions", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'All conditions must be of class Atom: %s'", "%", "conditions", ")", "\n", "", "if", "not", "all", "(", "isinstance", "(", "atom", ",", "Atom", ")", "for", "atom", "in", "effects", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'All effects must be of class Atom: %s'", "%", "effects", ")", "\n", "", "con_params", "=", "{", "\n", "p", "for", "con", "in", "conditions", "for", "p", "in", "con", ".", "args", "if", "isinstance", "(", "p", ",", "Parameter", ")", "}", "\n", "if", "not", "(", "con_params", "<=", "set", "(", "inputs", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Parameters %s within the conditions must be specified within the inputs %s'", "%", "(", "\n", "con_params", ",", "set", "(", "inputs", ")", ")", ")", "\n", "", "eff_params", "=", "{", "\n", "p", "for", "eff", "in", "effects", "for", "p", "in", "eff", ".", "args", "if", "isinstance", "(", "p", ",", "Parameter", ")", "}", "\n", "if", "not", "(", "eff_params", "<=", "set", "(", "list", "(", "inputs", ")", "+", "list", "(", "outputs", ")", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Parameters %s within the effects must be specified within the inputs %s or outputs %s'", "%", "(", "\n", "eff_params", ",", "set", "(", "inputs", ")", ",", "set", "(", "outputs", ")", ")", ")", "\n", "\n", "", "self", ".", "name", "=", "self", ".", "__class__", ".", "__name__", "\n", "self", ".", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "self", ".", "outputs", "=", "tuple", "(", "outputs", ")", "\n", "self", ".", "conditions", "=", "conditions", "\n", "self", ".", "effects", "=", "effects", "\n", "self", ".", "free_params", "=", "tuple", "(", "set", "(", "inputs", ")", "-", "con_params", ")", "\n", "self", ".", "free_outputs", "=", "tuple", "(", "set", "(", "outputs", ")", "-", "eff_params", ")", "\n", "self", ".", "streams", "=", "{", "}", "\n", "self", ".", "eager", "=", "eager", "\n", "self", ".", "cost", "=", "cost", "\n", "self", ".", "order", "=", "order", "\n", "self", ".", "plannable", "=", "plannable", "\n", "self", ".", "prob", "=", "prob", "\n", "self", ".", "avg_time", "=", "avg_time", "\n", "self", ".", "mdp_cost", "=", "mdp_cost", "(", "\n", "self", ".", "avg_time", ",", "self", ".", "avg_time", "+", "PLAN_TIME", ",", "self", ".", "prob", ")", "\n", "self", ".", "max_level", "=", "max_level", "\n", "self", ".", "n", "=", "CondStream", ".", "_num", "\n", "CondStream", ".", "_num", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.ConditionalStream.instantiate_conditions": [[94, 97], ["dict", "zip", "condition.instantiate"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.instantiate"], ["def", "instantiate_conditions", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "param_map", "=", "dict", "(", "zip", "(", "self", ".", "inputs", ",", "inputs", ")", ")", "\n", "return", "[", "condition", ".", "instantiate", "(", "param_map", ")", "for", "condition", "in", "self", ".", "conditions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.ConditionalStream.instantiate_effects": [[98, 101], ["dict", "effect.instantiate", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.instantiate"], ["", "def", "instantiate_effects", "(", "self", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "param_map", "=", "dict", "(", "zip", "(", "self", ".", "inputs", ",", "inputs", ")", "+", "zip", "(", "self", ".", "outputs", ",", "outputs", ")", ")", "\n", "return", "[", "effect", ".", "instantiate", "(", "param_map", ")", "for", "effect", "in", "self", ".", "effects", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.ConditionalStream.__call__": [[102, 107], ["tuple", "cond_streams.ConditionalStream.StreamFn"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "if", "inputs", "not", "in", "self", ".", "streams", ":", "\n", "            ", "self", ".", "streams", "[", "inputs", "]", "=", "self", ".", "StreamFn", "(", "self", ",", "inputs", ")", "\n", "", "return", "self", ".", "streams", "[", "inputs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.ConditionalStream.reset": [[108, 111], ["cond_streams.ConditionalStream.streams.values", "stream.reset"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.Stream.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "stream", "in", "self", ".", "streams", ".", "values", "(", ")", ":", "\n", "            ", "stream", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.ConditionalStream.all_values": [[112, 117], ["cond_streams.ConditionalStream.streams.values", "stream.call_history"], "methods", ["None"], ["", "", "def", "all_values", "(", "self", ")", ":", "\n", "        ", "for", "stream", "in", "self", ".", "streams", ".", "values", "(", ")", ":", "\n", "            ", "for", "values", "in", "stream", ".", "call_history", "(", ")", ":", "\n", "                ", "for", "value", "in", "values", ":", "\n", "                    ", "yield", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.ConditionalStream.calls": [[118, 121], ["sum", "cond_streams.ConditionalStream.streams.values"], "methods", ["None"], ["", "", "", "", "@", "property", "\n", "def", "calls", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "stream", ".", "calls", "for", "stream", "in", "self", ".", "streams", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.ConditionalStream.call_time": [[122, 125], ["sum", "cond_streams.ConditionalStream.streams.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "call_time", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "stream", ".", "call_time", "for", "stream", "in", "self", ".", "streams", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.ConditionalStream.__repr__": [[126, 129], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "\n", "        ", "return", "'%s->%s'", "%", "(", "self", ".", "inputs", ",", "self", ".", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.ConstCondStream.__init__": [[135, 138], ["CondStream.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "outputs", ",", "effects", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConstCondStream", ",", "self", ")", ".", "__init__", "(", "\n", "[", "]", ",", "outputs", ",", "[", "]", ",", "effects", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.TestCondStream.__init__": [[142, 145], ["CondStream.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "conditions", ",", "effects", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TestCondStream", ",", "self", ")", ".", "__init__", "(", "inputs", ",", "[", "]", ",", "\n", "conditions", ",", "effects", ",", "cost", "=", "TEST_COST", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.ProducerCondStream.__init__": [[149, 152], ["CondStream.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "outputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ProducerCondStream", ",", "self", ")", ".", "__init__", "(", "\n", "inputs", ",", "outputs", ",", "[", "]", ",", "[", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.CostCondStream.__init__": [[156, 159], ["CondStream.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "conditions", ",", "function", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "CostCondStream", ",", "self", ")", ".", "__init__", "(", "inputs", ",", "[", "]", ",", "\n", "conditions", ",", "[", "function", "]", ",", "cost", "=", "TEST_COST", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.ExternalTestCondStream.__init__": [[163, 168], ["cond_streams.TestCondStream.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "test", ",", "name", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "test", "=", "test", "\n", "super", "(", "ExternalTestCondStream", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.ExternalGenCondStream.__init__": [[178, 183], ["CondStream.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "generator", ",", "name", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "generator", "=", "generator", "\n", "super", "(", "ExternalGenCondStream", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "name", "is", "not", "None", ":", "\n", "            ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.EasyGenStream.__init__": [[207, 223], ["CondStream.__init__", "callable", "ValueError"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["def", "__init__", "(", "self", ",", "inputs", ",", "outputs", ",", "conditions", ",", "effects", ",", "generator", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: a list of :class:`.Parameter` which are the inputs to ``generator``\n        :param outputs: a list of :class:`.Parameter` which are the outputs from ``generator``\n        :param conditions: a list of :class:`.Atom` forming a conjunctive condition on inputs\n        :param effects: a list of :class:`.Atom` forming a conjunctive effect on inputs and outputs\n        :param generator: a function from values for ``inputs`` to a generator for values of ``outputs``\n        :param kwargs: keyword arguments for :class:`.ConditionalStream`\n        \"\"\"", "\n", "super", "(", "EasyGenStream", ",", "self", ")", ".", "__init__", "(", "\n", "inputs", ",", "outputs", ",", "conditions", ",", "effects", ",", "**", "kwargs", ")", "\n", "\n", "if", "not", "callable", "(", "generator", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'EasyGenStream expects generator to be a function: %s'", "%", "generator", ")", "\n", "", "self", ".", "generator", "=", "generator", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.EasyTestStream.__init__": [[274, 288], ["CondStream.__init__", "callable", "ValueError"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["def", "__init__", "(", "self", ",", "inputs", ",", "conditions", ",", "effects", ",", "test", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: a list of :class:`.Parameter` which are the inputs to ``test``\n        :param conditions: a list of :class:`.Atom` forming a conjunctive condition on inputs\n        :param effects: a list of :class:`.Atom` forming a conjunctive effect on inputs\n        :param test: a function from values for ``inputs`` to ``{False, True}``\n        :param kwargs: keyword arguments for :class:`.ConditionalStream`\n        \"\"\"", "\n", "super", "(", "EasyTestStream", ",", "self", ")", ".", "__init__", "(", "inputs", ",", "[", "]", ",", "\n", "conditions", ",", "effects", ",", "cost", "=", "TEST_COST", ",", "**", "kwargs", ")", "\n", "if", "not", "callable", "(", "test", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'EasyTestStream expects test to be a function: %s'", "%", "test", ")", "\n", "", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.EasyFnStream.__init__": [[305, 322], ["CondStream.__init__", "callable", "ValueError"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["def", "__init__", "(", "self", ",", "inputs", ",", "outputs", ",", "conditions", ",", "effects", ",", "function", ",", "test", "=", "lambda", "*", "args", ":", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: a list of :class:`.Parameter` which are the inputs to ``generator``\n        :param outputs: a list of :class:`.Parameter` which are the outputs from ``generator``\n        :param conditions: a list of :class:`.Atom` forming a conjunctive condition on inputs\n        :param effects: a list of :class:`.Atom` forming a conjunctive effect on inputs and outputs\n        :param function: a function from values for ``inputs`` to values of ``outputs``\n        :param test: an optional function from values for ``inputs`` to ``{False, True}`` # TODO\n        :param kwargs: keyword arguments for :class:`.ConditionalStream`\n        \"\"\"", "\n", "super", "(", "EasyFnStream", ",", "self", ")", ".", "__init__", "(", "\n", "inputs", ",", "outputs", ",", "conditions", ",", "effects", ",", "**", "kwargs", ")", "\n", "if", "not", "callable", "(", "function", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'EasyFnStream expects function to be a function: %s'", "%", "function", ")", "\n", "", "self", ".", "function", "=", "function", "\n", "self", ".", "test", "=", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.ClassStream.__init__": [[342, 349], ["CondStream.__init__", "issubclass", "ValueError"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "outputs", ",", "conditions", ",", "effects", ",", "StreamClass", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ClassStream", ",", "self", ")", ".", "__init__", "(", "\n", "inputs", ",", "outputs", ",", "conditions", ",", "effects", ",", "**", "kwargs", ")", "\n", "if", "not", "issubclass", "(", "StreamClass", ",", "Stream", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'ClassStream expects StreamClass to extend %s: %s'", "%", "(", "Stream", ",", "StreamClass", ")", ")", "\n", "", "self", ".", "StreamFn", "=", "StreamClass", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.EasyCostStream.__init__": [[353, 370], ["CondStream.__init__", "all", "callable", "ValueError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "conditions", ",", "effects", ",", "function", ",", "scale", "=", "100", ",", "eager", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :param inputs: a list of :class:`.Parameter` which are the inputs to ``test``\n        :param conditions: a list of :class:`.Atom` forming a conjunctive condition on inputs\n        :param effects: a list of :class:`.Atom` forming a conjunctive effect on inputs\n        :param function: a function from values for ``inputs`` to a nonnegative number\n        :param kwargs: keyword arguments for :class:`.ConditionalStream`\n        \"\"\"", "\n", "super", "(", "EasyCostStream", ",", "self", ")", ".", "__init__", "(", "inputs", ",", "[", "]", ",", "\n", "conditions", ",", "effects", ",", "eager", "=", "eager", ",", "**", "kwargs", ")", "\n", "if", "not", "callable", "(", "function", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'EasyCostStream expects function to be a function: %s'", "%", "function", ")", "\n", "", "assert", "all", "(", "isinstance", "(", "effect", ".", "predicate", ",", "Function", ")", "\n", "for", "effect", "in", "effects", ")", "\n", "self", ".", "function", "=", "function", "\n", "self", ".", "scale", "=", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.log_cost": [[17, 19], ["math.log", "max"], "function", ["None"], ["def", "log_cost", "(", "p", ",", "min_p", "=", "1e-6", ")", ":", "\n", "    ", "return", "-", "math", ".", "log", "(", "max", "(", "p", ",", "min_p", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.geom_cost": [[21, 23], ["max"], "function", ["None"], ["", "def", "geom_cost", "(", "cost", ",", "p", ",", "min_p", "=", "1e-6", ")", ":", "\n", "    ", "return", "cost", "/", "max", "(", "p", ",", "min_p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.mdp_cost": [[25, 28], ["max"], "function", ["None"], ["", "def", "mdp_cost", "(", "success_cost", ",", "failure_cost", ",", "p", ",", "min_p", "=", "1e-6", ")", ":", "\n", "\n", "    ", "return", "success_cost", "+", "failure_cost", "*", "(", "1.", "/", "max", "(", "p", ",", "min_p", ")", "-", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.equal_stream": [[382, 389], ["stripstream.pddl.logic.predicates.NamedPredicate", "cond_streams.EasyTestStream", "stripstream.pddl.objects.Parameter", "stripstream.pddl.objects.Parameter", "stripstream.pddl.logic.predicates.NamedPredicate."], "function", ["None"], ["", "", "", "def", "equal_stream", "(", "ty1", "=", "OBJECT", ",", "ty2", "=", "OBJECT", ")", ":", "\n", "    ", "name", "=", "'_eq_%s_%s'", "%", "(", "ty1", ".", "name", ",", "ty2", ".", "name", ")", "\n", "AreEqual", "=", "NamedPredicate", "(", "name", ",", "[", "ty1", ",", "ty2", "]", ")", "\n", "X1", ",", "X2", "=", "Parameter", "(", "'x1'", ",", "ty1", ")", ",", "Parameter", "(", "'x2'", ",", "ty2", ")", "\n", "cs", "=", "EasyTestStream", "(", "[", "X1", ",", "X2", "]", ",", "[", "]", ",", "[", "AreEqual", "(", "X1", ",", "X2", ")", "]", ",", "\n", "lambda", "x1", ",", "x2", ":", "x1", "==", "x2", ",", "eager", "=", "True", ")", "\n", "return", "AreEqual", ",", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.not_equal_stream": [[391, 398], ["stripstream.pddl.logic.predicates.NamedPredicate", "cond_streams.EasyTestStream", "stripstream.pddl.objects.Parameter", "stripstream.pddl.objects.Parameter", "stripstream.pddl.logic.predicates.NamedPredicate."], "function", ["None"], ["", "def", "not_equal_stream", "(", "ty1", "=", "OBJECT", ",", "ty2", "=", "OBJECT", ")", ":", "\n", "    ", "name", "=", "'_not_eq_%s_%s'", "%", "(", "ty1", ".", "name", ",", "ty2", ".", "name", ")", "\n", "AreNotEqual", "=", "NamedPredicate", "(", "name", ",", "[", "ty1", ",", "ty2", "]", ")", "\n", "X1", ",", "X2", "=", "Parameter", "(", "'x1'", ",", "ty1", ")", ",", "Parameter", "(", "'x2'", ",", "ty2", ")", "\n", "cs", "=", "EasyTestStream", "(", "[", "X1", ",", "X2", "]", ",", "[", "]", ",", "[", "AreNotEqual", "(", "X1", ",", "X2", ")", "]", ",", "\n", "lambda", "x1", ",", "x2", ":", "x1", "!=", "x2", ",", "eager", "=", "True", ")", "\n", "return", "AreNotEqual", ",", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.cond_streams.make_test_stream": [[400, 405], ["NotImplementedError"], "function", ["None"], ["", "def", "make_test_stream", "(", "cond_stream", ")", ":", "\n", "    ", "if", "not", "cond_stream", ".", "outputs", ":", "\n", "        ", "return", "cond_stream", "\n", "\n", "", "raise", "NotImplementedError", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.Stream.__init__": [[9, 22], ["tuple", "streams.Stream.reset", "streams.Stream.cond_stream.instantiate_conditions"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.Stream.reset", "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.Stream.instantiate_conditions"], ["def", "__init__", "(", "self", ",", "cond_stream", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        :param cond_stream: a :class:`.ConditionalStream` which produced this stream\n        :param inputs: a list of values for parameters ``cond_stream.inputs`` that are the inputs to this stream\n        \"\"\"", "\n", "self", ".", "cond_stream", "=", "cond_stream", "\n", "self", ".", "inputs", "=", "tuple", "(", "inputs", ")", "\n", "self", ".", "history", "=", "{", "}", "\n", "self", ".", "enumerated", "=", "False", "\n", "self", ".", "call_times", "=", "[", "]", "\n", "self", ".", "call_history", "=", "[", "]", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "conditions", "=", "self", ".", "cond_stream", ".", "instantiate_conditions", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.Stream.instantiate_conditions": [[23, 25], ["None"], "methods", ["None"], ["", "def", "instantiate_conditions", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "conditions", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.Stream.instantiate_effects": [[26, 28], ["streams.Stream.cond_stream.instantiate_effects"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.Stream.instantiate_effects"], ["", "def", "instantiate_effects", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "return", "self", ".", "cond_stream", ".", "instantiate_effects", "(", "self", ".", "inputs", ",", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.Stream.get_values": [[29, 34], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_values", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :returns: a list of :class:`.Constant` and :class:`.Atom` of the values produced by the stream\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.Stream.call_time": [[35, 38], ["sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "call_time", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "self", ".", "call_times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.Stream.calls": [[39, 42], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "calls", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "call_times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.Stream.call": [[43, 63], ["time.time.time", "tuple", "streams.Stream.call_history.append", "streams.Stream.call_times.append", "streams.Stream.get_values", "list", "len", "streams.Stream.history[].append", "time.time.time", "len"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.StrictStream.get_values"], ["", "def", "call", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "not", "self", ".", "enumerated", "\n", "if", "not", "self", ".", "called", "and", "self", ".", "calls", ":", "\n", "            ", "self", ".", "called", "=", "True", "\n", "self", ".", "enumerated", "=", "self", ".", "true_enumerated", "\n", "all_values", "=", "[", "]", "\n", "for", "values", "in", "self", ".", "call_history", ":", "\n", "                ", "all_values", "+=", "list", "(", "values", ")", "\n", "", "return", "all_values", "\n", "", "t0", "=", "time", "(", ")", "\n", "self", ".", "called", "=", "True", "\n", "new_values", "=", "tuple", "(", "self", ".", "get_values", "(", "**", "kwargs", ")", ")", "\n", "for", "value", "in", "new_values", ":", "\n", "            ", "if", "value", "not", "in", "self", ".", "history", ":", "\n", "                ", "self", ".", "history", "[", "value", "]", "=", "[", "]", "\n", "", "if", "len", "(", "self", ".", "history", ")", "not", "in", "self", ".", "history", "[", "value", "]", ":", "\n", "                ", "self", ".", "history", "[", "value", "]", ".", "append", "(", "len", "(", "self", ".", "history", ")", ")", "\n", "", "", "self", ".", "call_history", ".", "append", "(", "new_values", ")", "\n", "self", ".", "call_times", ".", "append", "(", "time", "(", ")", "-", "t0", ")", "\n", "return", "new_values", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.Stream.reset": [[64, 68], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "called", "=", "False", "\n", "self", ".", "true_enumerated", "=", "self", ".", "enumerated", "\n", "self", ".", "enumerated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.Stream.__repr__": [[69, 71], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'%s(%s | %s)'", "%", "(", "self", ".", "cond_stream", ".", "__class__", ".", "__name__", ",", "self", ".", "cond_stream", ".", "outputs", ",", "self", ".", "inputs", ")", "\n", "", "__str__", "=", "__repr__", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.StrictStream.get_next": [[79, 84], ["NotImplementedError"], "methods", ["None"], ["def", "get_next", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        :returns: a list of tuples of :class:`.Constant` which satisfy ``self.cond_stream.outputs``\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.StrictStream.get_values": [[85, 94], ["streams.StrictStream.get_next", "all", "list", "streams.StrictStream.cond_stream.instantiate_effects", "len", "len", "zip"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.TestStream.get_next", "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.Stream.instantiate_effects"], ["", "def", "get_values", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "not", "self", ".", "enumerated", "\n", "values", "=", "[", "]", "\n", "for", "outputs", "in", "self", ".", "get_next", "(", "**", "kwargs", ")", ":", "\n", "            ", "assert", "len", "(", "self", ".", "cond_stream", ".", "outputs", ")", "==", "len", "(", "outputs", ")", "and", "all", "(", "\n", "p", ".", "type", "==", "a", ".", "type", "for", "p", ",", "a", "in", "zip", "(", "self", ".", "cond_stream", ".", "outputs", ",", "outputs", ")", ")", "\n", "values", "+=", "list", "(", "outputs", ")", "+", "self", ".", "cond_stream", ".", "instantiate_effects", "(", "self", ".", "inputs", ",", "outputs", ")", "\n", "", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.GeneratorStream.__init__": [[101, 104], ["streams.GeneratorStream.get_generator", "streams.Stream.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.GeneratorStream.get_generator", "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["def", "__init__", "(", "self", ",", "cond_stream", ",", "inputs", ")", ":", "\n", "        ", "self", ".", "generator", "=", "self", ".", "get_generator", "(", "inputs", ")", "\n", "super", "(", "GeneratorStream", ",", "self", ")", ".", "__init__", "(", "cond_stream", ",", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.GeneratorStream.get_generator": [[105, 113], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_generator", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        Generator function which must be overridden.\n\n        :param inputs: a list of values for parameters ``cond_stream.inputs`` that are the inputs to the stream\n        :returns: a generator of tuples of :class:`.Constant` which satisfy ``self.cond_stream.outputs``\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.GeneratorStream.get_next": [[114, 123], ["next", "isinstance"], "methods", ["None"], ["", "def", "get_next", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "values", "=", "next", "(", "self", ".", "generator", ")", "\n", "if", "not", "isinstance", "(", "values", ",", "list", ")", ":", "\n", "                ", "return", "[", "values", "]", "\n", "", "return", "values", "\n", "", "except", "StopIteration", ":", "\n", "            ", "self", ".", "enumerated", "=", "True", "\n", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.ListStream.get_list": [[130, 138], ["NotImplementedError"], "methods", ["None"], ["def", "get_list", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        List function which must be overridden.\n\n        :param inputs: a list of values for parameters ``cond_stream.inputs`` that are the inputs to the stream\n        :returns: a list of tuples of :class:`.Constant` which satisfy ``self.cond_stream.outputs``\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.ListStream.get_next": [[139, 142], ["streams.ListStream.get_list"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.ListStream.get_list"], ["", "def", "get_next", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "enumerated", "=", "True", "\n", "return", "self", ".", "get_list", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.FunctionStream.function": [[149, 157], ["NotImplementedError"], "methods", ["None"], ["def", "function", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        Function which must be overridden.\n\n        :param inputs: a list of values for parameters ``cond_stream.inputs`` that are the inputs to the stream\n        :returns: a tuple of :class:`.Constant` which satisfies ``self.cond_stream.outputs``\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.FunctionStream.test": [[158, 166], ["None"], "methods", ["None"], ["", "def", "test", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        Test which may optionally be overridden.\n\n        :param inputs: a list of values for parameters ``cond_stream.inputs`` that are the inputs to the stream\n        :returns: a boolean value ``{False, True}``\n        \"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.FunctionStream.get_next": [[167, 172], ["streams.FunctionStream.test", "streams.FunctionStream.function"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.TestStream.test", "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.function"], ["", "def", "get_next", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "enumerated", "=", "True", "\n", "if", "self", ".", "test", "(", "self", ".", "inputs", ")", ":", "\n", "            ", "return", "[", "self", ".", "function", "(", "self", ".", "inputs", ")", "]", "\n", "", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.TestStream.test": [[179, 187], ["NotImplementedError"], "methods", ["None"], ["def", "test", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        Test which must be overridden.\n\n        :param inputs: a list of values for parameters ``cond_stream.inputs`` that are the inputs to the stream\n        :returns: a boolean value ``{False, True}``\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.TestStream.get_next": [[188, 191], ["streams.TestStream.test"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.streams.TestStream.test"], ["", "def", "get_next", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "enumerated", "=", "True", "\n", "return", "[", "(", ")", "]", "if", "self", ".", "test", "(", "self", ".", "inputs", ")", "else", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value": [[8, 12], ["x.type.get_value", "type", "isinstance"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value"], ["\n", "def", "get_window_name", "(", "window_3d", ")", ":", "\n", "    ", "return", "window_3d", ".", "window", ".", "title", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.convert_plan": [[14, 18], ["map"], "function", ["None"], ["    ", "return", "window_3d", ".", "window", "is", "not", "None", "\n", "\n", "\n", "", "def", "get_name", "(", "shape", ")", ":", "\n", "    ", "return", "shape", ".", "name", "(", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_param_names": [[20, 32], ["stripstream.pddl.logic.utils.is_literal", "isinstance", "isinstance"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.utils.is_literal"], ["\n", "", "def", "get_color", "(", "shape", ")", ":", "\n", "    ", "return", "shape", ".", "properties", "[", "'color'", "]", "\n", "\n", "\n", "", "def", "get_box_body", "(", "length", ",", "width", ",", "height", ",", "name", "=", "'box'", ",", "color", "=", "'black'", ")", ":", "\n", "    ", "return", "Shape", "(", "[", "\n", "BoxAligned", "(", "np", ".", "array", "(", "[", "(", "-", "length", "/", "2.", ",", "-", "width", "/", "2.", ",", "-", "height", "/", "2", ")", ",", "\n", "(", "length", "/", "2.", ",", "width", "/", "2.", ",", "height", "/", "2", ")", "]", ")", ",", "None", ")", "\n", "]", ",", "None", ",", "name", "=", "name", ",", "color", "=", "color", ")", "\n", "\n", "\n", "", "GRASP_FRAME", "=", "hu", ".", "Pose", "(", "0", ",", "-", "0.025", ",", "0", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.rename_easy": [[34, 45], ["assignments.iteritems", "type", "name.lower", "type", "stripstream.pddl.objects.Parameter.__init__"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["\n", "\n", "def", "get_grasp_frame_origin", "(", "grasp_frame", ")", ":", "\n", "\n", "    ", "objFrame", "=", "hu", ".", "Pose", "(", "0", ",", "0", ",", "0", ",", "0", ")", "\n", "faceFrame", "=", "grasp_frame", ".", "compose", "(", "GRASP_FRAME", ")", "\n", "centerFrame", "=", "faceFrame", ".", "compose", "(", "CENTER_FRAME", ")", "\n", "graspFrame", "=", "objFrame", ".", "compose", "(", "centerFrame", ")", "\n", "return", "graspFrame", "\n", "\n", "\n", "", "Z_OFFSET", "=", "0.02", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.reset_easy": [[47, 53], ["None"], "function", ["None"], ["\n", "gMat0", "=", "hu", ".", "Transform", "(", "np", ".", "array", "(", "[", "(", "0.", ",", "1.", ",", "0.", ",", "0.", ")", ",", "\n", "(", "0.", ",", "0.", ",", "1.", ",", "-", "0.025", ")", ",", "\n", "(", "1.", ",", "0.", ",", "0.", ",", "Z_OFFSET", ")", ",", "\n", "(", "0.", ",", "0.", ",", "0.", ",", "1.", ")", "]", ")", ")", "\n", "gMat1", "=", "hu", ".", "Transform", "(", "np", ".", "array", "(", "[", "(", "0.", ",", "-", "1.", ",", "0.", ",", "0.", ")", ",", "\n", "(", "0.", ",", "0.", ",", "-", "1.", ",", "0.025", ")", ",", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Connective.__init__": [[21, 33], ["all", "ValueError", "ValueError", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "formulas", ")", ":", "\n", "        ", "\"\"\"\n        Logical connective abstract class.\n\n        :param formulas: a list of :class:`.Formula`\n        \"\"\"", "\n", "if", "not", "all", "(", "isinstance", "(", "f", ",", "Formula", ")", "for", "f", "in", "formulas", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'All Connective formulas must extend class Formula: %s'", "%", "formulas", ")", "\n", "", "if", "not", "formulas", ":", "\n", "            ", "raise", "ValueError", "(", "'Must specify at least one Connective formula'", ")", "\n", "", "self", ".", "formulas", "=", "formulas", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Connective.get_atoms": [[34, 36], ["reduce", "f.get_atoms"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_atoms"], ["", "def", "get_atoms", "(", "self", ")", ":", "return", "reduce", "(", "\n", "operator", ".", "or_", ",", "(", "f", ".", "get_atoms", "(", ")", "for", "f", "in", "self", ".", "formulas", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Connective.get_formulas": [[37, 38], ["None"], "methods", ["None"], ["def", "get_formulas", "(", "self", ")", ":", "return", "self", ".", "formulas", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Connective.get_quantified": [[39, 41], ["reduce", "f.get_quantified"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_quantified"], ["def", "get_quantified", "(", "self", ")", ":", "return", "reduce", "(", "\n", "operator", ".", "or_", ",", "(", "f", ".", "get_quantified", "(", ")", "for", "f", "in", "self", ".", "formulas", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Connective.simplify": [[42, 48], ["connectives.Connective.__class__", "f.simplify", "len", "connectives.combine_connectives"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.simplify", "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.combine_connectives"], ["def", "simplify", "(", "self", ")", ":", "\n", "        ", "formulas", "=", "[", "f", ".", "simplify", "(", ")", "\n", "for", "f", "in", "combine_connectives", "(", "self", ",", "self", ".", "__class__", ")", "]", "\n", "if", "len", "(", "formulas", ")", "==", "1", ":", "\n", "            ", "return", "formulas", "[", "0", "]", "\n", "", "return", "self", ".", "__class__", "(", "*", "formulas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Connective.substitute": [[49, 58], ["list", "enumerate", "tuple", "isinstance", "subformula.instantiate", "formula.substitute", "dict", "zip"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.instantiate", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.substitute"], ["", "def", "substitute", "(", "self", ",", "atom", ",", "subformula", ")", ":", "\n", "        ", "new_formulas", "=", "list", "(", "self", ".", "formulas", ")", "\n", "for", "i", ",", "formula", "in", "enumerate", "(", "self", ".", "formulas", ")", ":", "\n", "            ", "if", "isinstance", "(", "formula", ",", "stripstream", ".", "pddl", ".", "logic", ".", "atoms", ".", "Atom", ")", "and", "formula", ".", "predicate", "==", "atom", ".", "predicate", ":", "\n", "                ", "new_formulas", "[", "i", "]", "=", "subformula", ".", "instantiate", "(", "\n", "dict", "(", "zip", "(", "atom", ".", "args", ",", "self", ".", "formulas", "[", "i", "]", ".", "args", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "formula", ".", "substitute", "(", "atom", ",", "subformula", ")", "\n", "", "", "self", ".", "formulas", "=", "tuple", "(", "new_formulas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Connective.propositional": [[59, 61], ["connectives.Connective.__class__", "formula.propositional"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.propositional"], ["", "def", "propositional", "(", "self", ",", "constants", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "*", "[", "formula", ".", "propositional", "(", "constants", ")", "for", "formula", "in", "self", ".", "formulas", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Connective.dequantify": [[62, 64], ["connectives.Connective.__class__", "formula.dequantify"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.dequantify"], ["", "def", "dequantify", "(", "self", ",", "constants", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "*", "[", "formula", ".", "dequantify", "(", "constants", ")", "for", "formula", "in", "self", ".", "formulas", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Connective.instantiate": [[65, 67], ["connectives.Connective.__class__", "formula.instantiate"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.instantiate"], ["", "def", "instantiate", "(", "self", ",", "parameter_map", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "*", "[", "formula", ".", "instantiate", "(", "parameter_map", ")", "for", "formula", "in", "self", ".", "formulas", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Connective.pddl": [[68, 70], ["formula.pddl"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.Head.pddl"], ["", "def", "pddl", "(", "self", ")", ":", "\n", "        ", "return", "'(%s %s)'", "%", "(", "self", ".", "_pddl_name", ",", "' '", ".", "join", "(", "formula", ".", "pddl", "(", ")", "for", "formula", "in", "self", ".", "formulas", ")", ")", "\n", "", "__repr__", "=", "pddl", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.And.de_morgan": [[89, 93], ["f.de_morgan", "connectives.And", "connectives.Or"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.de_morgan"], ["def", "de_morgan", "(", "self", ",", "sign", "=", "True", ")", ":", "\n", "        ", "formulas", "=", "[", "f", ".", "de_morgan", "(", "sign", "=", "sign", ")", "for", "f", "in", "self", ".", "formulas", "]", "\n", "\n", "return", "And", "(", "*", "formulas", ")", "if", "sign", "else", "Or", "(", "*", "formulas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.And.get_literals": [[94, 99], ["itertools.product", "f.get_literals", "reduce"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.utils.get_literals"], ["", "def", "get_literals", "(", "self", ")", ":", "\n", "        ", "dnfs", "=", "[", "f", ".", "get_literals", "(", ")", "for", "f", "in", "self", ".", "formulas", "]", "\n", "for", "combo", "in", "product", "(", "*", "dnfs", ")", ":", "\n", "\n", "            ", "yield", "reduce", "(", "operator", ".", "add", ",", "combo", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.And.holds": [[100, 102], ["all", "formula.holds"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.holds"], ["", "", "def", "holds", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "return", "all", "(", "formula", ".", "holds", "(", "atoms", ",", "constants", ")", "for", "formula", "in", "self", ".", "formulas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.And.positive_supporters": [[103, 111], ["set", "formula.positive_supporters"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.positive_supporters"], ["", "def", "positive_supporters", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "literals", "=", "set", "(", ")", "\n", "for", "formula", "in", "self", ".", "formulas", ":", "\n", "            ", "child_literals", "=", "formula", ".", "positive_supporters", "(", "atoms", ",", "constants", ")", "\n", "if", "child_literals", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "literals", "|=", "child_literals", "\n", "", "return", "literals", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.And.negative_supporters": [[112, 118], ["formula.negative_supporters"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.negative_supporters"], ["", "def", "negative_supporters", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "for", "formula", "in", "self", ".", "formulas", ":", "\n", "            ", "child_literals", "=", "formula", ".", "negative_supporters", "(", "atoms", ",", "constants", ")", "\n", "if", "child_literals", "is", "not", "None", ":", "\n", "                ", "return", "child_literals", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.And.add": [[119, 121], ["stripstream.utils.flatten", "formula.add"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.flatten", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.add"], ["", "def", "add", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "return", "flatten", "(", "formula", ".", "add", "(", "atoms", ",", "constants", ")", "for", "formula", "in", "self", ".", "formulas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.And.delete": [[122, 124], ["stripstream.utils.flatten", "formula.delete"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.flatten", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.delete"], ["", "def", "delete", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "return", "flatten", "(", "formula", ".", "delete", "(", "atoms", ",", "constants", ")", "for", "formula", "in", "self", ".", "formulas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Or.de_morgan": [[141, 145], ["f.de_morgan", "connectives.Or", "connectives.And"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.de_morgan"], ["def", "de_morgan", "(", "self", ",", "sign", "=", "True", ")", ":", "\n", "        ", "formulas", "=", "[", "f", ".", "de_morgan", "(", "sign", "=", "sign", ")", "for", "f", "in", "self", ".", "formulas", "]", "\n", "\n", "return", "Or", "(", "*", "formulas", ")", "if", "sign", "else", "And", "(", "*", "formulas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Or.get_literals": [[146, 148], ["stripstream.utils.flatten", "f.get_literals"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.flatten", "home.repos.pwc.inspect_result.caelan_stripstream.logic.utils.get_literals"], ["", "def", "get_literals", "(", "self", ")", ":", "\n", "        ", "return", "flatten", "(", "f", ".", "get_literals", "(", ")", "for", "f", "in", "self", ".", "formulas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Or.holds": [[149, 151], ["any", "formula.holds"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.holds"], ["", "def", "holds", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "return", "any", "(", "formula", ".", "holds", "(", "atoms", ",", "constants", ")", "for", "formula", "in", "self", ".", "formulas", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Or.positive_supporters": [[152, 158], ["formula.positive_supporters"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.positive_supporters"], ["", "def", "positive_supporters", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "for", "formula", "in", "self", ".", "formulas", ":", "\n", "            ", "child_literals", "=", "formula", ".", "positive_supporters", "(", "atoms", ",", "constants", ")", "\n", "if", "child_literals", "is", "not", "None", ":", "\n", "                ", "return", "child_literals", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Or.negative_supporters": [[159, 167], ["set", "formula.negative_supporters"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.negative_supporters"], ["", "def", "negative_supporters", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "literals", "=", "set", "(", ")", "\n", "for", "formula", "in", "self", ".", "formulas", ":", "\n", "            ", "child_literals", "=", "formula", ".", "negative_supporters", "(", "atoms", ",", "constants", ")", "\n", "if", "child_literals", "is", "None", ":", "\n", "                ", "return", "None", "\n", "", "literals", "|=", "child_literals", "\n", "", "return", "literals", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Not.__init__": [[183, 188], ["connectives.Connective.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["def", "__init__", "(", "self", ",", "formula", ")", ":", "\n", "        ", "\"\"\"\n        :param formula: a :class:`.Formula`\n        \"\"\"", "\n", "super", "(", "Not", ",", "self", ")", ".", "__init__", "(", "formula", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Not.formula": [[189, 191], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "formula", "(", "self", ")", ":", "return", "self", ".", "formulas", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Not.de_morgan": [[192, 194], ["connectives.Not.formula.de_morgan"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.de_morgan"], ["def", "de_morgan", "(", "self", ",", "sign", "=", "True", ")", ":", "return", "self", ".", "formula", ".", "de_morgan", "(", "\n", "sign", "=", "not", "sign", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Not.simplify": [[195, 196], ["None"], "methods", ["None"], ["def", "simplify", "(", "self", ")", ":", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Not.get_literals": [[197, 201], ["connectives.Not.formulas[].get_literals", "itertools.product", "map"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.utils.get_literals"], ["def", "get_literals", "(", "self", ")", ":", "\n", "        ", "dnf", "=", "self", ".", "formulas", "[", "0", "]", ".", "get_literals", "(", ")", "\n", "for", "combo", "in", "product", "(", "*", "dnf", ")", ":", "\n", "            ", "yield", "map", "(", "utils", ".", "invert", ",", "combo", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Not.holds": [[202, 204], ["connectives.Not.formula.holds"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.holds"], ["", "", "def", "holds", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "return", "not", "self", ".", "formula", ".", "holds", "(", "atoms", ",", "constants", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Not.positive_supporters": [[205, 207], ["set", "map", "connectives.Not.formula.negative_supporters"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.negative_supporters"], ["", "def", "positive_supporters", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "return", "set", "(", "map", "(", "utils", ".", "invert", ",", "self", ".", "formula", ".", "negative_supporters", "(", "atoms", ",", "constants", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Not.negative_supporters": [[208, 210], ["set", "map", "connectives.Not.formula.positive_supporters"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.positive_supporters"], ["", "def", "negative_supporters", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "return", "set", "(", "map", "(", "utils", ".", "invert", ",", "self", ".", "formula", ".", "positive_supporters", "(", "atoms", ",", "constants", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Not.add": [[211, 213], ["connectives.Not.formula.delete"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.delete"], ["", "def", "add", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "return", "self", ".", "formula", ".", "delete", "(", "atoms", ",", "constants", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Not.delete": [[214, 216], ["connectives.Not.formula.add"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.add"], ["", "def", "delete", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "return", "self", ".", "formula", ".", "add", "(", "atoms", ",", "constants", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Not.__eq__": [[217, 219], ["type", "type"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "==", "type", "(", "other", ")", "and", "self", ".", "formula", "==", "other", ".", "formula", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Not.__ne__": [[220, 222], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "(", "self", "==", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.Not.__hash__": [[223, 225], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "(", "self", ".", "__class__", ",", "self", ".", "formulas", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.When.__init__": [[233, 240], ["connectives.Connective.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["def", "__init__", "(", "self", ",", "formula1", ",", "formula2", ")", ":", "\n", "        ", "\"\"\"\n        :param formula1: a :class:`.Formula` for the antecedent\n        :param formula2: a :class:`.Formula` for the consequent\n        \"\"\"", "\n", "\n", "super", "(", "When", ",", "self", ")", ".", "__init__", "(", "formula1", ",", "formula2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.When.add": [[241, 245], ["connectives.When.formulas[].holds", "connectives.When.formulas[].add"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.holds", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.add"], ["", "def", "add", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "if", "self", ".", "formulas", "[", "0", "]", ".", "holds", "(", "atoms", ",", "constants", ")", ":", "\n", "            ", "return", "self", ".", "formulas", "[", "1", "]", ".", "add", "(", "atoms", ",", "constants", ")", "\n", "", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.When.delete": [[246, 250], ["connectives.When.formulas[].holds", "connectives.When.formulas[].delete"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.holds", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.delete"], ["", "def", "delete", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "if", "self", ".", "formulas", "[", "0", "]", ".", "holds", "(", "atoms", ",", "constants", ")", ":", "\n", "            ", "return", "self", ".", "formulas", "[", "1", "]", ".", "delete", "(", "atoms", ",", "constants", ")", "\n", "", "return", "[", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.combine_connectives": [[9, 16], ["isinstance", "connectives.combine_connectives"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.connectives.combine_connectives"], ["def", "combine_connectives", "(", "formula", ",", "Class", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "formula", ",", "Class", ")", ":", "\n", "        ", "return", "[", "formula", "]", "\n", "", "children", "=", "[", "]", "\n", "for", "f", "in", "formula", ".", "formulas", ":", "\n", "        ", "children", "+=", "combine_connectives", "(", "f", ",", "Class", ")", "\n", "", "return", "children", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.__init__": [[9, 31], ["tuple", "tuple", "all", "ValueError", "len", "len", "ValueError", "all", "ValueError", "isinstance", "zip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "predicate", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Atomic formula (P O1 O2 ... ON).\n\n        :param predicate: the :class:`.Predicate` form of the atom\n        :param args: a list of :class:`.Object` arguments to ``predicate``\n        :raises ValueError: if ``predicate.types`` does not match the types of ``args``\n        .. automethod:: __invert__\n        \"\"\"", "\n", "if", "not", "all", "(", "isinstance", "(", "arg", ",", "Object", ")", "for", "arg", "in", "args", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Expected atom arguments %s to extend class Object'", "%", "args", ")", "\n", "", "if", "len", "(", "predicate", ".", "types", ")", "!=", "len", "(", "args", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Expected atom arguments %s to have the same length as predicate types %s'", "%", "(", "\n", "args", ",", "predicate", ".", "types", ")", ")", "\n", "", "arg_types", "=", "tuple", "(", "arg", ".", "type", "for", "arg", "in", "args", ")", "\n", "if", "not", "all", "(", "ty", "==", "arg_ty", "or", "ty", "==", "OBJECT", "for", "ty", ",", "arg_ty", "in", "zip", "(", "predicate", ".", "types", ",", "arg_types", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Expected atom argument types %s to be the same as predicate types %s'", "%", "(", "\n", "arg_types", ",", "predicate", ".", "types", ")", ")", "\n", "", "self", ".", "predicate", "=", "predicate", "\n", "self", ".", "args", "=", "tuple", "(", "args", ")", "\n", "self", ".", "_hash", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.name": [[32, 34], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "return", "self", ".", "predicate", ".", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.types": [[35, 37], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "types", "(", "self", ")", ":", "return", "self", ".", "predicate", ".", "types", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.function": [[38, 40], ["None"], "methods", ["None"], ["@", "property", "\n", "def", "function", "(", "self", ")", ":", "return", "self", ".", "predicate", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.get_atoms": [[41, 42], ["None"], "methods", ["None"], ["def", "get_atoms", "(", "self", ")", ":", "return", "{", "self", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.get_literals": [[43, 44], ["None"], "methods", ["None"], ["def", "get_literals", "(", "self", ")", ":", "return", "[", "[", "self", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.get_formulas": [[45, 46], ["None"], "methods", ["None"], ["def", "get_formulas", "(", "self", ")", ":", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.get_quantified": [[47, 48], ["set"], "methods", ["None"], ["def", "get_quantified", "(", "self", ")", ":", "return", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.substitute": [[49, 50], ["None"], "methods", ["None"], ["def", "substitute", "(", "self", ",", "atom", ",", "subformula", ")", ":", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.holds": [[51, 52], ["None"], "methods", ["None"], ["def", "holds", "(", "self", ",", "atoms", ",", "constants", ")", ":", "return", "self", "in", "atoms", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.positive_supporters": [[53, 55], ["atoms.Atom.holds"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.holds"], ["def", "positive_supporters", "(", "self", ",", "atoms", ",", "constants", ")", ":", "return", "{", "\n", "self", "}", "if", "self", ".", "holds", "(", "atoms", ",", "constants", ")", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.negative_supporters": [[56, 58], ["atoms.Atom.holds"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.holds"], ["def", "negative_supporters", "(", "self", ",", "atoms", ",", "constants", ")", ":", "return", "None", "if", "self", ".", "holds", "(", "\n", "atoms", ",", "constants", ")", "else", "{", "self", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.add": [[59, 60], ["None"], "methods", ["None"], ["def", "add", "(", "self", ",", "atoms", ",", "constants", ")", ":", "return", "[", "self", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.delete": [[61, 62], ["None"], "methods", ["None"], ["def", "delete", "(", "self", ",", "atoms", ",", "constants", ")", ":", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.is_function": [[63, 64], ["isinstance"], "methods", ["None"], ["def", "is_function", "(", "self", ")", ":", "return", "isinstance", "(", "self", ".", "function", ",", "Function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.get_parameters": [[65, 67], ["set", "isinstance"], "methods", ["None"], ["def", "get_parameters", "(", "self", ")", ":", "\n", "        ", "return", "set", "(", "arg", "for", "arg", "in", "self", ".", "args", "if", "isinstance", "(", "arg", ",", "Parameter", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.propositional": [[68, 69], ["None"], "methods", ["None"], ["", "def", "propositional", "(", "self", ",", "constants", ")", ":", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.dequantify": [[70, 71], ["None"], "methods", ["None"], ["def", "dequantify", "(", "self", ",", "constants", ")", ":", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.instantiate": [[72, 74], ["atoms.Atom"], "methods", ["None"], ["def", "instantiate", "(", "self", ",", "parameter_map", ")", ":", "\n", "        ", "return", "Atom", "(", "self", ".", "predicate", ",", "[", "parameter_map", "[", "arg", "]", "if", "arg", "in", "parameter_map", "else", "arg", "for", "arg", "in", "self", ".", "args", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.de_morgan": [[75, 77], ["stripstream.pddl.logic.connectives.Not"], "methods", ["None"], ["", "def", "de_morgan", "(", "self", ",", "sign", "=", "True", ")", ":", "\n", "        ", "return", "self", "if", "sign", "else", "stripstream", ".", "pddl", ".", "logic", ".", "connectives", ".", "Not", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.__invert__": [[78, 85], ["stripstream.pddl.logic.connectives.Not"], "methods", ["None"], ["", "def", "__invert__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Negates the atom.\n\n        :return: :class:`.Not` of the atom\n        \"\"\"", "\n", "return", "stripstream", ".", "pddl", ".", "logic", ".", "connectives", ".", "Not", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.__eq__": [[86, 88], ["type", "type"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "==", "type", "(", "other", ")", "and", "self", ".", "predicate", "==", "other", ".", "predicate", "and", "self", ".", "args", "==", "other", ".", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.__ne__": [[89, 91], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "(", "self", "==", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.__hash__": [[92, 96], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_hash", "is", "None", ":", "\n", "            ", "self", ".", "_hash", "=", "hash", "(", "(", "self", ".", "__class__", ",", "self", ".", "predicate", ",", "self", ".", "args", ")", ")", "\n", "", "return", "self", ".", "_hash", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.__repr__": [[97, 99], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "predicate", ".", "name", "+", "'('", "+", "','", ".", "join", "(", "repr", "(", "arg", ")", "for", "arg", "in", "self", ".", "args", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.pddl": [[100, 102], ["arg.pddl"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.Head.pddl"], ["", "def", "pddl", "(", "self", ")", ":", "\n", "        ", "return", "'('", "+", "' '", ".", "join", "(", "[", "self", ".", "name", "]", "+", "[", "arg", ".", "pddl", "(", ")", "for", "arg", "in", "self", ".", "args", "]", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.typed_pddl": [[103, 105], ["arg.typed_pddl"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Atom.typed_pddl"], ["", "def", "typed_pddl", "(", "self", ")", ":", "\n", "        ", "return", "'('", "+", "self", ".", "name", "+", "''", ".", "join", "(", "' '", "+", "arg", ".", "typed_pddl", "(", ")", "for", "arg", "in", "self", ".", "args", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Equal.__init__": [[119, 129], ["list", "all", "ValueError", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "arg1", ",", "arg2", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"\n        :param arg1: the first :class:`.Object` argument\n        :param arg2: the second :class:`.Object` argument\n        :param *args: a list of any remaining :class:`.Object` arguments\n        \"\"\"", "\n", "self", ".", "args", "=", "[", "arg1", ",", "arg2", "]", "+", "list", "(", "args", ")", "\n", "if", "not", "all", "(", "isinstance", "(", "arg", ",", "Object", ")", "for", "arg", "in", "self", ".", "args", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Expected atom arguments %s to extend class Object'", "%", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Equal.get_atoms": [[130, 131], ["set"], "methods", ["None"], ["", "", "def", "get_atoms", "(", "self", ")", ":", "return", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Equal.get_literals": [[132, 142], ["filter", "filter", "isinstance", "all", "atoms.Equal", "isinstance", "atoms.Equal"], "methods", ["None"], ["def", "get_literals", "(", "self", ")", ":", "\n", "        ", "constants", "=", "filter", "(", "lambda", "a", ":", "isinstance", "(", "a", ",", "Constant", ")", ",", "self", ".", "args", ")", "\n", "if", "constants", "and", "not", "all", "(", "c", "==", "constants", "[", "0", "]", "for", "c", "in", "constants", ")", ":", "\n", "            ", "return", "[", "]", "\n", "", "params", "=", "filter", "(", "lambda", "a", ":", "not", "isinstance", "(", "a", ",", "Constant", ")", ",", "self", ".", "args", ")", "\n", "if", "not", "params", ":", "\n", "            ", "return", "[", "[", "]", "]", "\n", "", "if", "constants", ":", "\n", "            ", "return", "[", "[", "Equal", "(", "constants", "[", "0", "]", ",", "*", "params", ")", "]", "]", "\n", "", "return", "[", "[", "Equal", "(", "*", "params", ")", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Equal.get_formulas": [[143, 144], ["None"], "methods", ["None"], ["", "def", "get_formulas", "(", "self", ")", ":", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Equal.get_quantified": [[145, 146], ["set"], "methods", ["None"], ["def", "get_quantified", "(", "self", ")", ":", "return", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Equal.substitute": [[147, 148], ["None"], "methods", ["None"], ["def", "substitute", "(", "self", ",", "atom", ",", "subformula", ")", ":", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Equal.propositional": [[149, 150], ["None"], "methods", ["None"], ["def", "propositional", "(", "self", ",", "constants", ")", ":", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Equal.dequantify": [[151, 152], ["None"], "methods", ["None"], ["def", "dequantify", "(", "self", ",", "constants", ")", ":", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Equal.instantiate": [[153, 155], ["atoms.Equal.__class__", "parameter_map.get"], "methods", ["None"], ["def", "instantiate", "(", "self", ",", "parameter_map", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "*", "[", "parameter_map", ".", "get", "(", "arg", ",", "arg", ")", "for", "arg", "in", "self", ".", "args", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Equal.de_morgan": [[156, 158], ["stripstream.pddl.logic.connectives.Not"], "methods", ["None"], ["", "def", "de_morgan", "(", "self", ",", "sign", "=", "True", ")", ":", "\n", "        ", "return", "self", "if", "sign", "else", "stripstream", ".", "pddl", ".", "logic", ".", "connectives", ".", "Not", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Equal.holds": [[159, 162], ["all"], "methods", ["None"], ["", "def", "holds", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "\n", "        ", "return", "all", "(", "self", ".", "args", "[", "0", "]", "==", "arg", "for", "arg", "in", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Equal.positive_supporters": [[163, 165], ["atoms.Equal.holds", "set"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.holds"], ["", "def", "positive_supporters", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "return", "set", "(", ")", "if", "self", ".", "holds", "(", "atoms", ",", "constants", ")", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Equal.negative_supporters": [[166, 168], ["atoms.Equal.holds", "set"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.holds"], ["", "def", "negative_supporters", "(", "self", ",", "atoms", ",", "constants", ")", ":", "\n", "        ", "raise", "None", "if", "self", ".", "holds", "(", "atoms", ",", "constants", ")", "else", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Equal.pddl": [[169, 171], ["arg.pddl"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.Head.pddl"], ["", "def", "pddl", "(", "self", ")", ":", "\n", "        ", "return", "'(= %s)'", "%", "' '", ".", "join", "(", "arg", ".", "pddl", "(", ")", "for", "arg", "in", "self", ".", "args", ")", "\n", "", "__repr__", "=", "pddl", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Increase.__init__": [[176, 186], ["hasattr"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "function", ",", "value", ")", ":", "\n", "        ", "\"\"\"\n        Increase function atom (increase F1 F2).\n\n        :param function: the :class:`.Function` that is increased\n        :param value: the numeric or :class:`.Function` amount that the ``function`` increases\n        \"\"\"", "\n", "self", ".", "function", "=", "function", "\n", "self", ".", "value", "=", "value", "\n", "self", ".", "function_value", "=", "hasattr", "(", "self", ".", "value", ",", "'pddl'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Increase.get_atoms": [[187, 188], ["set"], "methods", ["None"], ["", "def", "get_atoms", "(", "self", ")", ":", "return", "{", "self", ".", "value", "}", "if", "self", ".", "function_value", "else", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Increase.get_literals": [[189, 190], ["None"], "methods", ["None"], ["def", "get_literals", "(", "self", ")", ":", "return", "[", "[", "self", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Increase.get_formulas": [[191, 192], ["None"], "methods", ["None"], ["def", "get_formulas", "(", "self", ")", ":", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Increase.get_quantified": [[193, 194], ["set"], "methods", ["None"], ["def", "get_quantified", "(", "self", ")", ":", "return", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Increase.substitute": [[195, 196], ["None"], "methods", ["None"], ["def", "substitute", "(", "self", ",", "atom", ",", "subformula", ")", ":", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Increase.propositional": [[197, 198], ["None"], "methods", ["None"], ["def", "propositional", "(", "self", ",", "constants", ")", ":", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Increase.dequantify": [[199, 200], ["None"], "methods", ["None"], ["def", "dequantify", "(", "self", ",", "constants", ")", ":", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Increase.instantiate": [[201, 205], ["atoms.Increase", "atoms.Increase", "atoms.Increase.function.instantiate", "atoms.Increase.value.instantiate", "atoms.Increase.function.instantiate"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.instantiate", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.instantiate", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.instantiate"], ["def", "instantiate", "(", "self", ",", "param_map", ")", ":", "\n", "        ", "if", "not", "self", ".", "function_value", ":", "\n", "            ", "return", "Increase", "(", "self", ".", "function", ".", "instantiate", "(", "param_map", ")", ",", "self", ".", "value", ")", "\n", "", "return", "Increase", "(", "self", ".", "function", ".", "instantiate", "(", "param_map", ")", ",", "self", ".", "value", ".", "instantiate", "(", "param_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Increase.de_morgan": [[206, 210], ["ValueError"], "methods", ["None"], ["", "def", "de_morgan", "(", "self", ",", "sign", "=", "True", ")", ":", "\n", "        ", "if", "sign", ":", "\n", "            ", "return", "self", "\n", "", "raise", "ValueError", "(", "'Cannot negate %s'", "%", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Increase.add": [[211, 212], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "atoms", ",", "constants", ")", ":", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Increase.delete": [[213, 214], ["None"], "methods", ["None"], ["def", "delete", "(", "self", ",", "atoms", ",", "constants", ")", ":", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Increase.pddl": [[215, 217], ["atoms.Increase.function.pddl", "atoms.Increase.value.pddl"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.Head.pddl", "home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.Head.pddl"], ["def", "pddl", "(", "self", ")", ":", "\n", "        ", "return", "'(increase %s %s)'", "%", "(", "self", ".", "function", ".", "pddl", "(", ")", ",", "self", ".", "value", ".", "pddl", "(", ")", "if", "self", ".", "function_value", "else", "self", ".", "value", ")", "\n", "", "__repr__", "=", "pddl", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Cost.__init__": [[226, 231], ["atoms.Increase.__init__", "stripstream.pddl.logic.predicates.TotalCost"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["def", "__init__", "(", "self", ",", "cost", ")", ":", "\n", "        ", "\"\"\"\n        :param cost: the numeric or :class:`.Function` amount that :class:`.TotalCost()` increases\n        \"\"\"", "\n", "super", "(", "Cost", ",", "self", ")", ".", "__init__", "(", "TotalCost", "(", ")", ",", "cost", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Initialize.__init__": [[235, 244], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "atom", ",", "value", ")", ":", "\n", "        ", "\"\"\"\n        Formula atom (= F N) which initializes the value of an atom of :class:`.Function`.\n\n        :param atom: an :class:`.Atom` of :class:`.Function`\n        :param value: the numeric value of ``value``\n        \"\"\"", "\n", "self", ".", "atom", "=", "atom", "\n", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Initialize.get_atoms": [[245, 246], ["set"], "methods", ["None"], ["", "def", "get_atoms", "(", "self", ")", ":", "return", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Initialize.get_formulas": [[247, 248], ["None"], "methods", ["None"], ["def", "get_formulas", "(", "self", ")", ":", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Initialize.get_quantified": [[249, 250], ["set"], "methods", ["None"], ["def", "get_quantified", "(", "self", ")", ":", "return", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.atoms.Initialize.pddl": [[251, 253], ["atoms.Initialize.atom.pddl"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.Head.pddl"], ["def", "pddl", "(", "self", ")", ":", "\n", "        ", "return", "'(= %s %s)'", "%", "(", "self", ".", "atom", ".", "pddl", "(", ")", ",", "self", ".", "value", ")", "\n", "", "__repr__", "=", "pddl", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.is_valid_condition": [[6, 8], ["isinstance", "all", "f.is_valid_condition", "formulas.Formula.get_formulas"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.is_valid_condition", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_formulas"], ["    ", "def", "is_valid_condition", "(", "self", ")", ":", "\n", "        ", "return", "isinstance", "(", "self", ",", "Condition", ")", "and", "all", "(", "f", ".", "is_valid_condition", "(", ")", "for", "f", "in", "self", ".", "get_formulas", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.is_valid_effect": [[9, 11], ["isinstance", "all", "f.is_valid_effect", "formulas.Formula.get_formulas"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.is_valid_effect", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_formulas"], ["", "def", "is_valid_effect", "(", "self", ")", ":", "\n", "        ", "return", "isinstance", "(", "self", ",", "Effect", ")", "and", "all", "(", "f", ".", "is_valid_effect", "(", ")", "for", "f", "in", "self", ".", "get_formulas", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_atoms": [[12, 13], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_atoms", "(", "self", ")", ":", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_literals": [[14, 15], ["NotImplementedError"], "methods", ["None"], ["def", "get_literals", "(", "self", ")", ":", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_formulas": [[16, 17], ["NotImplementedError"], "methods", ["None"], ["def", "get_formulas", "(", "self", ")", ":", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.de_morgan": [[18, 19], ["NotImplementedError"], "methods", ["None"], ["def", "de_morgan", "(", "self", ",", "sign", "=", "True", ")", ":", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.simplify": [[20, 21], ["None"], "methods", ["None"], ["def", "simplify", "(", "self", ")", ":", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_objects": [[22, 24], ["set", "stripstream.utils.flatten", "formulas.Formula.get_atoms"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.flatten", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_atoms"], ["def", "get_objects", "(", "self", ")", ":", "\n", "        ", "return", "set", "(", "flatten", "(", "atom", ".", "args", "for", "atom", "in", "self", ".", "get_atoms", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_parameters": [[25, 27], ["set", "stripstream.utils.flatten", "atom.get_parameters", "formulas.Formula.get_atoms"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.flatten", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_parameters", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_atoms"], ["", "def", "get_parameters", "(", "self", ")", ":", "\n", "        ", "return", "set", "(", "flatten", "(", "atom", ".", "get_parameters", "(", ")", "for", "atom", "in", "self", ".", "get_atoms", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_quantified": [[28, 29], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_quantified", "(", "self", ")", ":", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.propositional": [[30, 31], ["NotImplementedError"], "methods", ["None"], ["def", "propositional", "(", "self", ",", "constants", ")", ":", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.dequantify": [[32, 33], ["NotImplementedError"], "methods", ["None"], ["def", "dequantify", "(", "self", ",", "constants", ")", ":", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.instantiate": [[34, 35], ["NotImplementedError"], "methods", ["None"], ["def", "instantiate", "(", "self", ",", "parameter_map", ")", ":", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.clone": [[36, 37], ["formulas.Formula.instantiate"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.instantiate"], ["def", "clone", "(", "self", ")", ":", "return", "self", ".", "instantiate", "(", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.substitute": [[38, 39], ["NotImplementedError"], "methods", ["None"], ["def", "substitute", "(", "self", ",", "atom", ",", "subformula", ")", ":", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.pddl": [[40, 41], ["NotImplementedError"], "methods", ["None"], ["def", "pddl", "(", "self", ")", ":", "raise", "NotImplementedError", "(", ")", "\n", "__repr__", "=", "pddl", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.holds": [[49, 50], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "holds", "(", "self", ",", "atoms", ",", "constants", ")", ":", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.positive_supporters": [[51, 53], ["NotImplementedError"], "methods", ["None"], ["def", "positive_supporters", "(", "\n", "self", ",", "atoms", ",", "constants", ")", ":", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.negative_supporters": [[54, 56], ["NotImplementedError"], "methods", ["None"], ["def", "negative_supporters", "(", "\n", "self", ",", "atoms", ",", "constants", ")", ":", "raise", "NotImplementedError", "(", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.add": [[63, 64], ["NotImplementedError"], "methods", ["None"], ["    ", "def", "add", "(", "self", ",", "atoms", ",", "constants", ")", ":", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.delete": [[65, 66], ["NotImplementedError"], "methods", ["None"], ["def", "delete", "(", "self", ",", "atoms", ",", "constants", ")", ":", "raise", "NotImplementedError", "(", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.Head.__init__": [[6, 17], ["tuple", "name.lower", "tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "types", "=", "tuple", "(", ")", ")", ":", "\n", "        ", "\"\"\"\n        Head abstract class.\n\n        :param name: the string name of the head\n        :param types: a list of :class:`.Type` inputs to the head\n        .. automethod:: __call__\n        \"\"\"", "\n", "self", ".", "name", "=", "name", ".", "lower", "(", ")", "\n", "self", ".", "types", "=", "tuple", "(", "types", ")", "\n", "self", ".", "_hash", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.Head.__call__": [[18, 27], ["predicates.convert_args"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.convert_args"], ["", "def", "__call__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"\n        Creates an :class:`.Atom` instance from ``args``\n\n        :param args: a list of hashable arguments to ``self``\n        :returns: :class:`.Atom` with predicate ``self`` and wrapped :class:`.Object` arguments ``args``\n        :raises ValueError: if ``self.types`` does not match the length of ``args``\n        \"\"\"", "\n", "return", "convert_args", "(", "self", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.Head.__eq__": [[28, 30], ["type", "type"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "type", "(", "self", ")", "==", "type", "(", "other", ")", "and", "self", ".", "name", "==", "other", ".", "name", "and", "self", ".", "types", "==", "other", ".", "types", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.Head.__ne__": [[31, 33], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "(", "self", "==", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.Head.__hash__": [[34, 38], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_hash", "is", "None", ":", "\n", "            ", "self", ".", "_hash", "=", "hash", "(", "(", "self", ".", "__class__", ",", "self", ".", "name", ",", "self", ".", "types", ")", ")", "\n", "", "return", "self", ".", "_hash", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.Head.pddl": [[39, 41], ["enumerate"], "methods", ["None"], ["", "def", "pddl", "(", "self", ")", ":", "\n", "        ", "return", "'('", "+", "' '", ".", "join", "(", "[", "self", ".", "name", "]", "+", "[", "TYPE_PAIR", "%", "(", "'%sx%s'", "%", "(", "PARAM_PREFIX", ",", "i", ")", ",", "ty", ")", "for", "i", ",", "ty", "in", "enumerate", "(", "self", ".", "types", ")", "]", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.Head.__repr__": [[42, 44], ["repr"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'('", "+", "' '", ".", "join", "(", "[", "self", ".", "name", "]", "+", "[", "repr", "(", "ty", ")", "for", "ty", "in", "self", ".", "types", "]", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.EasyPredicate.__init__": [[66, 74], ["predicates.Head.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["def", "__init__", "(", "self", ",", "*", "types", ")", ":", "\n", "        ", "\"\"\"\n        :param types: a list of :class:`.Type` inputs to the predicate\n        .. automethod:: __call__\n        \"\"\"", "\n", "name", "=", "self", ".", "template", "%", "EasyPredicate", ".", "num", "\n", "EasyPredicate", ".", "num", "+=", "1", "\n", "super", "(", "EasyPredicate", ",", "self", ")", ".", "__init__", "(", "name", ",", "types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.EasyFunction.__init__": [[97, 105], ["predicates.Head.__init__"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__"], ["def", "__init__", "(", "self", ",", "*", "types", ")", ":", "\n", "        ", "\"\"\"\n        :param types: a list of :class:`.Type` inputs to the predicate\n        .. automethod:: __call__\n        \"\"\"", "\n", "name", "=", "self", ".", "template", "%", "EasyFunction", ".", "num", "\n", "EasyFunction", ".", "num", "+=", "1", "\n", "super", "(", "EasyFunction", ",", "self", ")", ".", "__init__", "(", "name", ",", "types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.predicates.convert_args": [[110, 121], ["zip", "atoms.Atom", "len", "len", "ValueError", "isinstance", "new_args.append", "new_args.append", "isinstance", "ty.get_const"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.objects.EasyType.get_const"], ["def", "convert_args", "(", "self", ",", "args", ")", ":", "\n", "    ", "if", "len", "(", "args", ")", "!=", "len", "(", "self", ".", "types", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'%s must have the same length as %s'", "%", "\n", "(", "args", ",", "self", ".", "types", ")", ")", "\n", "", "new_args", "=", "[", "]", "\n", "for", "ty", ",", "arg", "in", "zip", "(", "self", ".", "types", ",", "args", ")", ":", "\n", "        ", "if", "isinstance", "(", "ty", ",", "EasyType", ")", "and", "not", "isinstance", "(", "arg", ",", "Object", ")", ":", "\n", "            ", "new_args", ".", "append", "(", "ty", ".", "get_const", "(", "arg", ")", ")", "\n", "", "else", ":", "\n", "            ", "new_args", ".", "append", "(", "arg", ")", "\n", "", "", "return", "atoms", ".", "Atom", "(", "self", ",", "new_args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.utils.invert": [[6, 10], ["isinstance", "connectives.Not"], "function", ["None"], ["import", "numpy", "as", "np", "\n", "\n", "\n", "def", "get_window_name", "(", "window_3d", ")", ":", "\n", "    ", "return", "window_3d", ".", "window", ".", "title", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.utils.is_literal": [[12, 14], ["isinstance", "isinstance", "isinstance", "isinstance", "utils.is_literal"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.utils.is_literal"], ["\n", "", "def", "is_window_active", "(", "window_3d", ")", ":", "\n", "    ", "return", "window_3d", ".", "window", "is", "not", "None", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.utils.is_conjunction": [[16, 18], ["utils.is_literal", "isinstance", "all", "utils.is_conjunction"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.utils.is_literal", "home.repos.pwc.inspect_result.caelan_stripstream.logic.utils.is_conjunction"], ["\n", "", "def", "get_name", "(", "shape", ")", ":", "\n", "    ", "return", "shape", ".", "name", "(", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.utils.get_literals": [[20, 24], ["utils.is_literal", "reduce", "utils.get_literals"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.utils.is_literal", "home.repos.pwc.inspect_result.caelan_stripstream.logic.utils.get_literals"], ["\n", "", "def", "get_color", "(", "shape", ")", ":", "\n", "    ", "return", "shape", ".", "properties", "[", "'color'", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.logic.utils.get_increases": [[26, 34], ["isinstance", "isinstance", "isinstance", "reduce", "utils.get_increases"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.utils.get_increases"], ["    ", "return", "Shape", "(", "[", "\n", "BoxAligned", "(", "np", ".", "array", "(", "[", "(", "-", "length", "/", "2.", ",", "-", "width", "/", "2.", ",", "-", "height", "/", "2", ")", ",", "\n", "(", "length", "/", "2.", ",", "width", "/", "2.", ",", "height", "/", "2", ")", "]", ")", ",", "None", ")", "\n", "]", ",", "None", ",", "name", "=", "name", ",", "color", "=", "color", ")", "\n", "\n", "\n", "", "GRASP_FRAME", "=", "hu", ".", "Pose", "(", "0", ",", "-", "0.025", ",", "0", ",", "0", ")", "\n", "CENTER_FRAME", "=", "hu", ".", "Pose", "(", "0", ",", "0", ",", "0.025", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.__init__": [[12, 43], ["Tkinter.Tk", "continuous_tamp_viewer.ContinuousTMPViewer.tk.withdraw", "Tkinter.Toplevel", "continuous_tamp_viewer.ContinuousTMPViewer.top.wm_title", "continuous_tamp_viewer.ContinuousTMPViewer.top.protocol", "Tkinter.Canvas", "continuous_tamp_viewer.ContinuousTMPViewer.canvas.pack", "continuous_tamp_viewer.ContinuousTMPViewer.move_frame", "continuous_tamp_viewer.ContinuousTMPViewer.draw_environment"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.move_frame", "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.draw_environment"], ["    ", "def", "__init__", "(", "self", ",", "env_region", ",", "regions", "=", "[", "]", ",", "tl_x", "=", "0", ",", "tl_y", "=", "0", ",", "width", "=", "500", ",", "height", "=", "250", ",", "title", "=", "'Grid'", ",", "background", "=", "'tan'", ")", ":", "\n", "        ", "self", ".", "tk", "=", "Tk", "(", ")", "\n", "\n", "self", ".", "tk", ".", "withdraw", "(", ")", "\n", "self", ".", "top", "=", "Toplevel", "(", "self", ".", "tk", ")", "\n", "self", ".", "top", ".", "wm_title", "(", "title", ")", "\n", "self", ".", "top", ".", "protocol", "(", "'WM_DELETE_WINDOW'", ",", "self", ".", "top", ".", "destroy", ")", "\n", "\n", "self", ".", "env_region", "=", "env_region", "\n", "self", ".", "regions", "=", "regions", "\n", "self", ".", "tl_x", "=", "tl_x", "\n", "self", ".", "tl_y", "=", "tl_y", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "canvas", "=", "Canvas", "(", "self", ".", "top", ",", "width", "=", "self", ".", "width", ",", "\n", "height", "=", "self", ".", "height", ",", "background", "=", "background", ")", "\n", "self", ".", "canvas", ".", "pack", "(", ")", "\n", "\n", "self", ".", "move_frame", "(", "self", ".", "tl_x", ",", "self", ".", "tl_y", ")", "\n", "\n", "self", ".", "dist_to_pixel", "=", "(", "\n", "self", ".", "width", "-", "2", "*", "PIXEL_BUFFER", ")", "/", "(", "self", ".", "env_region", ".", "w", ")", "\n", "self", ".", "dist_width", "=", "self", ".", "width", "/", "self", ".", "dist_to_pixel", "\n", "self", ".", "dist_height", "=", "self", ".", "height", "/", "self", ".", "dist_to_pixel", "\n", "self", ".", "ground_height", "=", "self", ".", "height", "-", "self", ".", "dist_to_pixel", "*", "ENV_HEIGHT", "\n", "self", ".", "robot_dist", "=", "self", ".", "dist_height", "/", "2.", "\n", "\n", "self", ".", "robot", "=", "[", "]", "\n", "self", ".", "blocks", "=", "[", "]", "\n", "self", ".", "holding", "=", "None", "\n", "self", ".", "draw_environment", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.center": [[44, 53], ["continuous_tamp_viewer.ContinuousTMPViewer.top.update_idletasks", "continuous_tamp_viewer.ContinuousTMPViewer.top.winfo_screenwidth", "continuous_tamp_viewer.ContinuousTMPViewer.top.winfo_screenheight", "tuple", "continuous_tamp_viewer.ContinuousTMPViewer.top.geometry", "int", "[].split", "continuous_tamp_viewer.ContinuousTMPViewer.top.geometry().split", "continuous_tamp_viewer.ContinuousTMPViewer.top.geometry"], "methods", ["None"], ["", "def", "center", "(", "self", ")", ":", "\n", "        ", "self", ".", "top", ".", "update_idletasks", "(", ")", "\n", "w", "=", "self", ".", "top", ".", "winfo_screenwidth", "(", ")", "\n", "h", "=", "self", ".", "top", ".", "winfo_screenheight", "(", ")", "\n", "size", "=", "tuple", "(", "int", "(", "_", ")", "\n", "for", "_", "in", "self", ".", "top", ".", "geometry", "(", ")", ".", "split", "(", "'+'", ")", "[", "0", "]", ".", "split", "(", "'x'", ")", ")", "\n", "x", "=", "w", "/", "2", "-", "size", "[", "0", "]", "/", "2", "\n", "y", "=", "h", "/", "2", "-", "size", "[", "1", "]", "/", "2", "\n", "self", ".", "top", ".", "geometry", "(", "\"%dx%d+%d+%d\"", "%", "(", "size", "+", "(", "x", ",", "y", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.move_frame": [[54, 59], ["continuous_tamp_viewer.ContinuousTMPViewer.top.update_idletasks", "tuple", "continuous_tamp_viewer.ContinuousTMPViewer.top.geometry", "int", "[].split", "continuous_tamp_viewer.ContinuousTMPViewer.top.geometry().split", "continuous_tamp_viewer.ContinuousTMPViewer.top.geometry"], "methods", ["None"], ["", "def", "move_frame", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "self", ".", "top", ".", "update_idletasks", "(", ")", "\n", "size", "=", "tuple", "(", "int", "(", "_", ")", "\n", "for", "_", "in", "self", ".", "top", ".", "geometry", "(", ")", ".", "split", "(", "'+'", ")", "[", "0", "]", ".", "split", "(", "'x'", ")", ")", "\n", "self", ".", "top", ".", "geometry", "(", "\"%dx%d+%d+%d\"", "%", "(", "size", "+", "(", "x", ",", "y", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_x": [[60, 62], ["None"], "methods", ["None"], ["", "def", "t_x", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "dist_to_pixel", "*", "(", "x", "+", "self", ".", "dist_width", "/", "2.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_y": [[63, 65], ["None"], "methods", ["None"], ["", "def", "t_y", "(", "self", ",", "y", ")", ":", "\n", "        ", "return", "self", ".", "ground_height", "-", "self", ".", "dist_to_pixel", "*", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.draw_block": [[66, 71], ["continuous_tamp_viewer.ContinuousTMPViewer.blocks.append", "continuous_tamp_viewer.ContinuousTMPViewer.canvas.create_rectangle", "continuous_tamp_viewer.ContinuousTMPViewer.t_x", "continuous_tamp_viewer.ContinuousTMPViewer.t_y", "continuous_tamp_viewer.ContinuousTMPViewer.t_x", "continuous_tamp_viewer.ContinuousTMPViewer.t_y"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_x", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_y", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_x", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_y"], ["", "def", "draw_block", "(", "self", ",", "block", ",", "x", ")", ":", "\n", "        ", "self", ".", "blocks", ".", "append", "(", "self", ".", "canvas", ".", "create_rectangle", "(", "self", ".", "t_x", "(", "x", "-", "block", ".", "w", "/", "2.", ")", ",", "self", ".", "t_y", "(", "0", ")", ",", "\n", "self", ".", "t_x", "(", "\n", "x", "+", "block", ".", "w", "/", "2.", ")", ",", "self", ".", "t_y", "(", "block", ".", "h", ")", ",", "\n", "fill", "=", "block", ".", "color", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.draw_holding": [[72, 77], ["continuous_tamp_viewer.ContinuousTMPViewer.canvas.create_rectangle", "continuous_tamp_viewer.ContinuousTMPViewer.t_x", "continuous_tamp_viewer.ContinuousTMPViewer.t_y", "continuous_tamp_viewer.ContinuousTMPViewer.t_x", "continuous_tamp_viewer.ContinuousTMPViewer.t_y"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_x", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_y", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_x", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_y"], ["", "def", "draw_holding", "(", "self", ",", "block", ",", "x", ")", ":", "\n", "        ", "self", ".", "holding", "=", "self", ".", "canvas", ".", "create_rectangle", "(", "self", ".", "t_x", "(", "x", "-", "block", ".", "w", "/", "2.", ")", ",", "self", ".", "t_y", "(", "self", ".", "robot_dist", "-", "SUCTION_HEIGHT", "/", "2", "-", "block", ".", "h", ")", ",", "\n", "self", ".", "t_x", "(", "\n", "x", "+", "block", ".", "w", "/", "2.", ")", ",", "self", ".", "t_y", "(", "self", ".", "robot_dist", "-", "SUCTION_HEIGHT", "/", "2", ")", ",", "\n", "fill", "=", "block", ".", "color", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.draw_region": [[78, 83], ["continuous_tamp_viewer.ContinuousTMPViewer.environment.append", "continuous_tamp_viewer.ContinuousTMPViewer.canvas.create_rectangle", "continuous_tamp_viewer.ContinuousTMPViewer.t_x", "continuous_tamp_viewer.ContinuousTMPViewer.t_x"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_x", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_x"], ["", "def", "draw_region", "(", "self", ",", "region", ")", ":", "\n", "        ", "self", ".", "environment", ".", "append", "(", "self", ".", "canvas", ".", "create_rectangle", "(", "self", ".", "t_x", "(", "region", ".", "x", "-", "region", ".", "w", "/", "2.", ")", ",", "self", ".", "ground_height", ",", "\n", "self", ".", "t_x", "(", "\n", "region", ".", "x", "+", "region", ".", "w", "/", "2.", ")", ",", "self", ".", "height", ",", "\n", "fill", "=", "'red'", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.draw_environment": [[84, 93], ["continuous_tamp_viewer.ContinuousTMPViewer.canvas.create_rectangle", "continuous_tamp_viewer.ContinuousTMPViewer.draw_region", "continuous_tamp_viewer.ContinuousTMPViewer.t_x", "continuous_tamp_viewer.ContinuousTMPViewer.t_x"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.draw_region", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_x", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_x"], ["", "def", "draw_environment", "(", "self", ",", "table_color", "=", "'lightgrey'", ",", "bin_color", "=", "'grey'", ")", ":", "\n", "        ", "self", ".", "environment", "=", "[", "\n", "self", ".", "canvas", ".", "create_rectangle", "(", "self", ".", "t_x", "(", "-", "self", ".", "env_region", ".", "w", "/", "2", ")", ",", "self", ".", "ground_height", ",", "\n", "self", ".", "t_x", "(", "self", ".", "env_region", ".", "w", "/", "\n", "2", ")", ",", "self", ".", "height", ",", "\n", "fill", "=", "table_color", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", "\n", "]", "\n", "for", "region", "in", "self", ".", "regions", ":", "\n", "            ", "self", ".", "draw_region", "(", "region", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.draw_robot": [[94, 104], ["continuous_tamp_viewer.ContinuousTMPViewer.canvas.create_rectangle", "continuous_tamp_viewer.ContinuousTMPViewer.canvas.create_rectangle", "continuous_tamp_viewer.ContinuousTMPViewer.t_x", "continuous_tamp_viewer.ContinuousTMPViewer.t_y", "continuous_tamp_viewer.ContinuousTMPViewer.t_x", "continuous_tamp_viewer.ContinuousTMPViewer.t_y", "continuous_tamp_viewer.ContinuousTMPViewer.t_x", "continuous_tamp_viewer.ContinuousTMPViewer.t_y", "continuous_tamp_viewer.ContinuousTMPViewer.t_x", "continuous_tamp_viewer.ContinuousTMPViewer.t_y"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_x", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_y", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_x", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_y", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_x", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_y", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_x", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.t_y"], ["", "", "def", "draw_robot", "(", "self", ",", "x", ",", "color", "=", "'yellow'", ")", ":", "\n", "        ", "self", ".", "robot", "=", "[", "\n", "self", ".", "canvas", ".", "create_rectangle", "(", "self", ".", "t_x", "(", "x", "-", "SUCTION_WIDTH", "/", "2.", ")", ",", "self", ".", "t_y", "(", "self", ".", "robot_dist", "-", "SUCTION_HEIGHT", "/", "2.", ")", ",", "\n", "self", ".", "t_x", "(", "\n", "x", "+", "SUCTION_WIDTH", "/", "2.", ")", ",", "self", ".", "t_y", "(", "self", ".", "robot_dist", "+", "SUCTION_HEIGHT", "/", "2.", ")", ",", "\n", "fill", "=", "color", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", ",", "\n", "self", ".", "canvas", ".", "create_rectangle", "(", "self", ".", "t_x", "(", "x", "-", "STEM_WIDTH", "/", "2.", ")", ",", "self", ".", "t_y", "(", "self", ".", "robot_dist", "+", "SUCTION_HEIGHT", "/", "2.", ")", ",", "\n", "self", ".", "t_x", "(", "\n", "x", "+", "STEM_WIDTH", "/", "2.", ")", ",", "self", ".", "t_y", "(", "self", ".", "robot_dist", "+", "SUCTION_HEIGHT", "/", "2.", "+", "STEM_HEIGHT", ")", ",", "\n", "fill", "=", "color", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.clear_state": [[106, 113], ["continuous_tamp_viewer.ContinuousTMPViewer.canvas.delete", "continuous_tamp_viewer.ContinuousTMPViewer.canvas.delete", "continuous_tamp_viewer.ContinuousTMPViewer.canvas.delete"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.delete", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.delete", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.delete"], ["", "def", "clear_state", "(", "self", ")", ":", "\n", "        ", "for", "block", "in", "self", ".", "blocks", ":", "\n", "            ", "self", ".", "canvas", ".", "delete", "(", "block", ")", "\n", "", "for", "part", "in", "self", ".", "robot", ":", "\n", "            ", "self", ".", "canvas", ".", "delete", "(", "part", ")", "\n", "", "if", "self", ".", "holding", "is", "not", "None", ":", "\n", "            ", "self", ".", "canvas", ".", "delete", "(", "self", ".", "holding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.clear_all": [[114, 116], ["continuous_tamp_viewer.ContinuousTMPViewer.canvas.delete"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.delete"], ["", "", "def", "clear_all", "(", "self", ")", ":", "\n", "        ", "self", ".", "canvas", ".", "delete", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.save": [[117, 121], ["ImageGrab.grab().save", "ImageGrab.grab"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.save"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "\n", "        ", "from", "PIL", "import", "ImageGrab", "\n", "ImageGrab", ".", "grab", "(", "(", "0", ",", "0", ",", "self", ".", "width", ",", "self", ".", "height", ")", ")", ".", "save", "(", "filename", "+", "'.jpg'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp.compile_problem": [[40, 139], ["stripstream.pddl.objects.EasyParameter", "stripstream.pddl.problem.STRIPStreamProblem", "stripstream.pddl.objects.EasyParameter", "stripstream.pddl.objects.EasyParameter", "stripstream.pddl.objects.EasyParameter", "stripstream.pddl.objects.EasyParameter", "stripstream.pddl.objects.EasyParameter", "stripstream.pddl.objects.EasyParameter", "stripstream.pddl.operators.Action", "stripstream.pddl.operators.Action", "stripstream.pddl.operators.Action", "stripstream.pddl.operators.Action", "stripstream.pddl.operators.Action", "stripstream.pddl.operators.Axiom", "stripstream.pddl.operators.Axiom", "stripstream.pddl.cond_streams.EasyGenStream", "stripstream.pddl.cond_streams.EasyGenStream", "stripstream.pddl.cond_streams.EasyTestStream", "stripstream.pddl.cond_streams.EasyTestStream", "REGION", "initial_atoms.append", "initial_atoms.append", "goal_literals.append", "goal_literals.append", "goal_literals.append", "initial_atoms.append", "goal_literals.append", "CanPlace", "HandEmpty", "Holding", "AtConf", "HandEmpty", "goal_literals.append", "AtPose", "CanPlace", "InRegion", "stripstream.pddl.logic.connectives.And", "stripstream.pddl.logic.connectives.And", "stripstream.pddl.logic.connectives.And", "stripstream.pddl.logic.connectives.And", "AtConf", "stripstream.pddl.logic.connectives.And", "stripstream.pddl.logic.connectives.And", "stripstream.pddl.logic.connectives.And", "stripstream.pddl.logic.connectives.And", "stripstream.pddl.logic.connectives.And", "InRegion", "stripstream.pddl.logic.quantifiers.Exists", "Safe", "stripstream.pddl.logic.quantifiers.Exists", "AtConf", "AtPose", "Holding", "AtPose", "HandEmpty", "AtConf", "LegalKin", "Holding", "stripstream.pddl.logic.connectives.Not", "stripstream.pddl.logic.connectives.Not", "Holding", "AtConf", "LegalKin", "stripstream.pddl.logic.quantifiers.ForAll", "AtPose", "HandEmpty", "stripstream.pddl.logic.connectives.Not", "AtConf", "stripstream.pddl.logic.connectives.Not", "InRegion", "IsSink", "Cleaned", "InRegion", "IsStove", "Cooked", "stripstream.pddl.logic.connectives.And", "stripstream.pddl.logic.connectives.And", "CanPlace", "Contained", "LegalKin", "iter", "Contained", "CollisionFree", "tamp_problem.initial_poses.iteritems", "AtPose", "HandEmpty", "stripstream.pddl.logic.connectives.Or", "Holding", "AtConf", "AtPose", "Contained", "AtPose", "CollisionFree", "stripstream.pddl.examples.continuous_tamp.continuous_tamp_utils.sample_region_pose", "stripstream.pddl.examples.continuous_tamp.continuous_tamp_utils.are_colliding", "stripstream.pddl.logic.atoms.Equal", "Safe", "stripstream.utils.irange", "stripstream.pddl.examples.continuous_tamp.continuous_tamp_utils.inverse_kinematics"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.irange", "home.repos.pwc.inspect_result.caelan_stripstream.pyr2.utils.inverse_kinematics"], ["def", "compile_problem", "(", "tamp_problem", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a STRIPStream problem for the continuous TMP problem.\n\n    :param tamp_problem: a :class:`.TMPProblem`\n    :return: a :class:`.STRIPStreamProblem`\n    \"\"\"", "\n", "\n", "B1", ",", "B2", "=", "Param", "(", "BLOCK", ")", ",", "Param", "(", "BLOCK", ")", "\n", "P1", ",", "P2", "=", "Param", "(", "POSE", ")", ",", "Param", "(", "POSE", ")", "\n", "Q1", ",", "Q2", "=", "Param", "(", "CONF", ")", ",", "Param", "(", "CONF", ")", "\n", "R", "=", "Param", "(", "REGION", ")", "\n", "\n", "actions", "=", "[", "\n", "Action", "(", "name", "=", "'pick'", ",", "parameters", "=", "[", "B1", ",", "P1", ",", "Q1", "]", ",", "\n", "condition", "=", "And", "(", "AtPose", "(", "B1", ",", "P1", ")", ",", "HandEmpty", "(", ")", ",", "\n", "AtConf", "(", "Q1", ")", ",", "LegalKin", "(", "P1", ",", "Q1", ")", ")", ",", "\n", "effect", "=", "And", "(", "Holding", "(", "B1", ")", ",", "Not", "(", "AtPose", "(", "B1", ",", "P1", ")", ")", ",", "Not", "(", "HandEmpty", "(", ")", ")", ")", ")", ",", "\n", "Action", "(", "name", "=", "'place'", ",", "parameters", "=", "[", "B1", ",", "P1", ",", "Q1", "]", ",", "\n", "condition", "=", "And", "(", "Holding", "(", "B1", ")", ",", "AtConf", "(", "Q1", ")", ",", "LegalKin", "(", "P1", ",", "Q1", ")", ",", "\n", "ForAll", "(", "[", "B2", "]", ",", "Or", "(", "Equal", "(", "B1", ",", "B2", ")", ",", "Safe", "(", "B2", ",", "B1", ",", "P1", ")", ")", ")", ")", ",", "\n", "effect", "=", "And", "(", "AtPose", "(", "B1", ",", "P1", ")", ",", "HandEmpty", "(", ")", ",", "Not", "(", "Holding", "(", "B1", ")", ")", ")", ")", ",", "\n", "Action", "(", "name", "=", "'move'", ",", "parameters", "=", "[", "Q1", ",", "Q2", "]", ",", "\n", "condition", "=", "AtConf", "(", "Q1", ")", ",", "\n", "effect", "=", "And", "(", "AtConf", "(", "Q2", ")", ",", "Not", "(", "AtConf", "(", "Q1", ")", ")", ")", ")", ",", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "Action", "(", "name", "=", "'clean'", ",", "parameters", "=", "[", "B1", ",", "R", "]", ",", "\n", "condition", "=", "And", "(", "InRegion", "(", "B1", ",", "R", ")", ",", "IsSink", "(", "R", ")", ")", ",", "\n", "effect", "=", "And", "(", "Cleaned", "(", "B1", ")", ")", ")", ",", "\n", "Action", "(", "name", "=", "'cook'", ",", "parameters", "=", "[", "B1", ",", "R", "]", ",", "\n", "condition", "=", "And", "(", "InRegion", "(", "B1", ",", "R", ")", ",", "IsStove", "(", "R", ")", ")", ",", "\n", "effect", "=", "And", "(", "Cooked", "(", "B1", ")", ")", ")", ",", "\n", "]", "\n", "\n", "axioms", "=", "[", "\n", "Axiom", "(", "effect", "=", "InRegion", "(", "B1", ",", "R", ")", ",", "condition", "=", "Exists", "(", "\n", "[", "P1", "]", ",", "And", "(", "AtPose", "(", "B1", ",", "P1", ")", ",", "Contained", "(", "B1", ",", "P1", ",", "R", ")", ")", ")", ")", ",", "\n", "Axiom", "(", "effect", "=", "Safe", "(", "B2", ",", "B1", ",", "P1", ")", ",", "condition", "=", "Exists", "(", "\n", "[", "P2", "]", ",", "And", "(", "AtPose", "(", "B2", ",", "P2", ")", ",", "CollisionFree", "(", "B1", ",", "P1", ",", "B2", ",", "P2", ")", ")", ")", ")", ",", "\n", "]", "\n", "\n", "cond_streams", "=", "[", "\n", "EasyGenStream", "(", "inputs", "=", "[", "R", ",", "B1", "]", ",", "outputs", "=", "[", "P1", "]", ",", "conditions", "=", "[", "CanPlace", "(", "B1", ",", "R", ")", "]", ",", "effects", "=", "[", "Contained", "(", "B1", ",", "P1", ",", "R", ")", "]", ",", "\n", "generator", "=", "lambda", "r", ",", "b", ":", "(", "sample_region_pose", "(", "r", ",", "b", ")", "for", "_", "in", "irange", "(", "0", ",", "INF", ")", ")", ")", ",", "\n", "EasyGenStream", "(", "inputs", "=", "[", "P1", "]", ",", "outputs", "=", "[", "Q1", "]", ",", "conditions", "=", "[", "]", ",", "effects", "=", "[", "LegalKin", "(", "P1", ",", "Q1", ")", "]", ",", "\n", "generator", "=", "lambda", "p", ":", "iter", "(", "[", "inverse_kinematics", "(", "p", ")", "]", ")", ")", ",", "\n", "EasyTestStream", "(", "inputs", "=", "[", "R", ",", "B1", ",", "P1", "]", ",", "conditions", "=", "[", "]", ",", "effects", "=", "[", "Contained", "(", "B1", ",", "P1", ",", "R", ")", "]", ",", "\n", "test", "=", "in_region", ",", "eager", "=", "EAGER_TESTS", ",", "plannable", "=", "False", ")", ",", "\n", "EasyTestStream", "(", "inputs", "=", "[", "B1", ",", "P1", ",", "B2", ",", "P2", "]", ",", "conditions", "=", "[", "]", ",", "effects", "=", "[", "CollisionFree", "(", "B1", ",", "P1", ",", "B2", ",", "P2", ")", "]", ",", "\n", "test", "=", "lambda", "*", "args", ":", "not", "are_colliding", "(", "*", "args", ")", ",", "eager", "=", "EAGER_TESTS", ")", ",", "\n", "]", "\n", "\n", "constants", "=", "[", "\n", "REGION", "(", "tamp_problem", ".", "env_region", ")", ",", "\n", "]", "\n", "\n", "initial_atoms", "=", "[", "\n", "AtConf", "(", "tamp_problem", ".", "initial_config", ")", ",", "\n", "]", "+", "[", "\n", "AtPose", "(", "block", ",", "pose", ")", "for", "block", ",", "pose", "in", "tamp_problem", ".", "initial_poses", ".", "iteritems", "(", ")", "\n", "]", "+", "[", "\n", "CanPlace", "(", "block", ",", "tamp_problem", ".", "env_region", ")", "for", "block", "in", "tamp_problem", ".", "initial_poses", "\n", "]", "\n", "\n", "if", "tamp_problem", ".", "initial_holding", "is", "None", ":", "\n", "        ", "initial_atoms", ".", "append", "(", "HandEmpty", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "initial_atoms", ".", "append", "(", "Holding", "(", "tamp_problem", ".", "initial_holding", ")", ")", "\n", "\n", "", "goal_literals", "=", "[", "]", "\n", "if", "tamp_problem", ".", "goal_config", "is", "not", "None", ":", "\n", "        ", "goal_literals", ".", "append", "(", "AtConf", "(", "tamp_problem", ".", "goal_config", ")", ")", "\n", "", "if", "tamp_problem", ".", "goal_holding", "is", "False", ":", "\n", "        ", "goal_literals", ".", "append", "(", "HandEmpty", "(", ")", ")", "\n", "", "elif", "tamp_problem", ".", "goal_holding", "is", "not", "None", ":", "\n", "        ", "goal_literals", ".", "append", "(", "Holding", "(", "tamp_problem", ".", "goal_holding", ")", ")", "\n", "", "for", "block", ",", "goal", "in", "tamp_problem", ".", "goal_poses", ":", "\n", "        ", "goal_literals", ".", "append", "(", "AtPose", "(", "block", ",", "goal", ")", ")", "\n", "", "for", "block", ",", "goal", "in", "tamp_problem", ".", "goal_regions", ":", "\n", "        ", "initial_atoms", ".", "append", "(", "CanPlace", "(", "block", ",", "goal", ")", ")", "\n", "goal_literals", ".", "append", "(", "InRegion", "(", "block", ",", "goal", ")", ")", "\n", "\n", "", "return", "STRIPStreamProblem", "(", "initial_atoms", ",", "goal_literals", ",", "actions", "+", "axioms", ",", "cond_streams", ",", "constants", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp.get_config": [[144, 150], ["stripstream.pddl.utils.get_value"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value"], ["def", "get_config", "(", "atoms", ")", ":", "\n", "    ", "for", "atom", "in", "atoms", ":", "\n", "        ", "if", "atom", ".", "predicate", "==", "AtConf", ":", "\n", "            ", "q", ",", "=", "atom", ".", "args", "\n", "return", "get_value", "(", "q", ")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp.get_holding": [[152, 158], ["stripstream.pddl.utils.get_value"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value"], ["", "def", "get_holding", "(", "atoms", ")", ":", "\n", "    ", "for", "atom", "in", "atoms", ":", "\n", "        ", "if", "atom", ".", "predicate", "==", "Holding", ":", "\n", "            ", "b", ",", "=", "atom", ".", "args", "\n", "return", "get_value", "(", "b", ")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp.visualize_atoms": [[160, 171], ["viewer.draw_robot", "stripstream.pddl.utils.get_value", "viewer.draw_block", "stripstream.pddl.utils.get_value", "stripstream.pddl.utils.get_value", "viewer.draw_holding", "stripstream.pddl.utils.get_value", "continuous_tamp.get_config"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.draw_robot", "home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value", "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.draw_block", "home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value", "home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value", "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp_viewer.ContinuousTMPViewer.draw_holding", "home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value", "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp.get_config"], ["", "def", "visualize_atoms", "(", "viewer", ",", "atoms", ")", ":", "\n", "    ", "for", "atom", "in", "atoms", ":", "\n", "        ", "if", "atom", ".", "predicate", "==", "AtConf", ":", "\n", "            ", "q", ",", "=", "atom", ".", "args", "\n", "viewer", ".", "draw_robot", "(", "get_value", "(", "q", ")", ")", "\n", "", "elif", "atom", ".", "predicate", "==", "AtPose", ":", "\n", "            ", "b", ",", "p", "=", "atom", ".", "args", "\n", "viewer", ".", "draw_block", "(", "get_value", "(", "b", ")", ",", "get_value", "(", "p", ")", ")", "\n", "", "elif", "atom", ".", "predicate", "==", "Holding", ":", "\n", "            ", "b", ",", "=", "atom", ".", "args", "\n", "viewer", ".", "draw_holding", "(", "get_value", "(", "b", ")", ",", "get_config", "(", "atoms", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp.visualize_initial": [[173, 179], ["ContinuousTMPViewer", "continuous_tamp.visualize_atoms", "tamp_problem.get_regions"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp.visualize_atoms"], ["", "", "", "def", "visualize_initial", "(", "tamp_problem", ",", "planning_problem", ")", ":", "\n", "    ", "from", "stripstream", ".", "pddl", ".", "examples", ".", "continuous_tamp", ".", "continuous_tamp_viewer", "import", "ContinuousTMPViewer", "\n", "viewer", "=", "ContinuousTMPViewer", "(", "\n", "tamp_problem", ".", "env_region", ",", "tamp_problem", ".", "get_regions", "(", ")", ",", "title", "=", "'Initial'", ")", "\n", "visualize_atoms", "(", "viewer", ",", "planning_problem", ".", "initial_atoms", ")", "\n", "return", "viewer", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.continuous_tamp.continuous_tamp.visualize_goal": [[181, 187], ["ContinuousTMPViewer", "continuous_tamp.visualize_atoms", "tamp_problem.get_regions"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp.visualize_atoms"], ["", "def", "visualize_goal", "(", "tamp_problem", ",", "planning_problem", ")", ":", "\n", "    ", "from", "stripstream", ".", "pddl", ".", "examples", ".", "continuous_tamp", ".", "continuous_tamp_viewer", "import", "ContinuousTMPViewer", "\n", "viewer", "=", "ContinuousTMPViewer", "(", "\n", "tamp_problem", ".", "env_region", ",", "tamp_problem", ".", "get_regions", "(", ")", ",", "tl_y", "=", "300", ",", "title", "=", "'Goal'", ")", "\n", "visualize_atoms", "(", "viewer", ",", "planning_problem", ".", "goal_literals", ")", "\n", "return", "viewer", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp.compile_problem": [[35, 104], ["tamp_problem.goal_poses.iteritems", "stripstream.pddl.problem.STRIPStreamProblem", "stripstream.pddl.objects.EasyParameter", "stripstream.pddl.objects.EasyParameter", "stripstream.pddl.objects.EasyParameter", "stripstream.pddl.objects.EasyParameter", "stripstream.pddl.objects.EasyParameter", "stripstream.pddl.objects.EasyParameter", "stripstream.pddl.operators.Action", "stripstream.pddl.operators.Action", "stripstream.pddl.operators.Action", "stripstream.pddl.operators.Axiom", "stripstream.pddl.cond_streams.EasyGenStream", "stripstream.pddl.cond_streams.EasyGenStream", "stripstream.pddl.cond_streams.EasyTestStream", "initial_atoms.append", "initial_atoms.append", "goal_literals.append", "goal_literals.append", "AtConf", "AtPose", "HandEmpty", "Holding", "HandEmpty", "goal_literals.append", "AtPose", "stripstream.pddl.logic.connectives.And", "stripstream.pddl.logic.connectives.And", "stripstream.pddl.logic.connectives.And", "stripstream.pddl.logic.connectives.And", "AtConf", "stripstream.pddl.logic.connectives.And", "Safe", "stripstream.pddl.logic.quantifiers.Exists", "tamp_problem.initial_poses.iteritems", "Holding", "AtPose", "HandEmpty", "AtConf", "LegalKin", "Holding", "stripstream.pddl.logic.connectives.Not", "stripstream.pddl.logic.connectives.Not", "Holding", "AtConf", "LegalKin", "stripstream.pddl.logic.quantifiers.ForAll", "AtPose", "HandEmpty", "stripstream.pddl.logic.connectives.Not", "AtConf", "stripstream.pddl.logic.connectives.Not", "stripstream.pddl.logic.connectives.And", "stripstream.utils.irange", "LegalKin", "iter", "CollisionFree", "AtPose", "HandEmpty", "stripstream.pddl.logic.connectives.Or", "Holding", "AtConf", "AtPose", "CollisionFree", "stripstream.pddl.logic.atoms.Equal", "Safe"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.stripstream.utils.irange"], ["def", "compile_problem", "(", "tamp_problem", ")", ":", "\n", "    ", "\"\"\"\n    Constructs a STRIPStream problem for the countable TMP problem.\n\n    :param tamp_problem: a :class:`.TMPProblem`\n    :return: a :class:`.STRIPStreamProblem`\n    \"\"\"", "\n", "\n", "B1", ",", "B2", "=", "Param", "(", "BLOCK", ")", ",", "Param", "(", "BLOCK", ")", "\n", "P1", ",", "P2", "=", "Param", "(", "POSE", ")", ",", "Param", "(", "POSE", ")", "\n", "Q1", ",", "Q2", "=", "Param", "(", "CONF", ")", ",", "Param", "(", "CONF", ")", "\n", "\n", "actions", "=", "[", "\n", "Action", "(", "name", "=", "'pick'", ",", "parameters", "=", "[", "B1", ",", "P1", ",", "Q1", "]", ",", "\n", "condition", "=", "And", "(", "AtPose", "(", "B1", ",", "P1", ")", ",", "HandEmpty", "(", ")", ",", "\n", "AtConf", "(", "Q1", ")", ",", "LegalKin", "(", "P1", ",", "Q1", ")", ")", ",", "\n", "effect", "=", "And", "(", "Holding", "(", "B1", ")", ",", "Not", "(", "AtPose", "(", "B1", ",", "P1", ")", ")", ",", "Not", "(", "HandEmpty", "(", ")", ")", ")", ")", ",", "\n", "Action", "(", "name", "=", "'place'", ",", "parameters", "=", "[", "B1", ",", "P1", ",", "Q1", "]", ",", "\n", "condition", "=", "And", "(", "Holding", "(", "B1", ")", ",", "AtConf", "(", "Q1", ")", ",", "LegalKin", "(", "P1", ",", "Q1", ")", ",", "\n", "\n", "ForAll", "(", "[", "B2", "]", ",", "Or", "(", "Equal", "(", "B1", ",", "B2", ")", ",", "Safe", "(", "B2", ",", "P1", ")", ")", ")", ")", ",", "\n", "\n", "effect", "=", "And", "(", "AtPose", "(", "B1", ",", "P1", ")", ",", "HandEmpty", "(", ")", ",", "Not", "(", "Holding", "(", "B1", ")", ")", ")", ")", ",", "\n", "Action", "(", "name", "=", "'move'", ",", "parameters", "=", "[", "Q1", ",", "Q2", "]", ",", "\n", "condition", "=", "AtConf", "(", "Q1", ")", ",", "\n", "effect", "=", "And", "(", "AtConf", "(", "Q2", ")", ",", "Not", "(", "AtConf", "(", "Q1", ")", ")", ")", ")", ",", "\n", "]", "\n", "\n", "axioms", "=", "[", "\n", "\n", "Axiom", "(", "effect", "=", "Safe", "(", "B2", ",", "P1", ")", ",", "condition", "=", "Exists", "(", "\n", "[", "P2", "]", ",", "And", "(", "AtPose", "(", "B2", ",", "P2", ")", ",", "CollisionFree", "(", "P1", ",", "P2", ")", ")", ")", ")", ",", "\n", "]", "\n", "\n", "cond_streams", "=", "[", "\n", "\n", "\n", "\n", "EasyGenStream", "(", "inputs", "=", "[", "]", ",", "outputs", "=", "[", "P1", "]", ",", "conditions", "=", "[", "]", ",", "effects", "=", "[", "]", ",", "\n", "generator", "=", "lambda", ":", "irange", "(", "0", ",", "NUM_POSES", ")", ")", ",", "\n", "EasyGenStream", "(", "inputs", "=", "[", "P1", "]", ",", "outputs", "=", "[", "Q1", "]", ",", "conditions", "=", "[", "]", ",", "effects", "=", "[", "LegalKin", "(", "P1", ",", "Q1", ")", "]", ",", "\n", "generator", "=", "lambda", "p", ":", "iter", "(", "[", "p", "]", ")", ")", ",", "\n", "\n", "\n", "EasyTestStream", "(", "inputs", "=", "[", "P1", ",", "P2", "]", ",", "conditions", "=", "[", "]", ",", "effects", "=", "[", "CollisionFree", "(", "P1", ",", "P2", ")", "]", ",", "\n", "test", "=", "lambda", "p1", ",", "p2", ":", "p1", "!=", "p2", ",", "eager", "=", "EAGER_TESTS", ")", ",", "\n", "]", "\n", "\n", "constants", "=", "[", "]", "\n", "\n", "initial_atoms", "=", "[", "\n", "AtConf", "(", "tamp_problem", ".", "initial_config", ")", ",", "\n", "]", "+", "[", "\n", "AtPose", "(", "block", ",", "pose", ")", "for", "block", ",", "pose", "in", "tamp_problem", ".", "initial_poses", ".", "iteritems", "(", ")", "\n", "]", "\n", "if", "tamp_problem", ".", "initial_holding", "is", "False", ":", "\n", "        ", "initial_atoms", ".", "append", "(", "HandEmpty", "(", ")", ")", "\n", "", "else", ":", "\n", "        ", "initial_atoms", ".", "append", "(", "Holding", "(", "tamp_problem", ".", "initial_holding", ",", "BLOCK", ")", ")", "\n", "\n", "", "goal_literals", "=", "[", "]", "\n", "if", "tamp_problem", ".", "goal_holding", "is", "False", ":", "\n", "        ", "goal_literals", ".", "append", "(", "HandEmpty", "(", ")", ")", "\n", "", "elif", "tamp_problem", ".", "goal_holding", "is", "not", "None", ":", "\n", "        ", "goal_literals", ".", "append", "(", "Holding", "(", "tamp_problem", ".", "goal_holding", ")", ")", "\n", "", "for", "block", ",", "goal", "in", "tamp_problem", ".", "goal_poses", ".", "iteritems", "(", ")", ":", "\n", "        ", "goal_literals", ".", "append", "(", "AtPose", "(", "block", ",", "goal", ")", ")", "\n", "\n", "", "return", "STRIPStreamProblem", "(", "initial_atoms", ",", "goal_literals", ",", "actions", "+", "axioms", ",", "cond_streams", ",", "constants", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp.get_config": [[109, 115], ["stripstream.pddl.utils.get_value"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value"], ["def", "get_config", "(", "atoms", ")", ":", "\n", "    ", "for", "atom", "in", "atoms", ":", "\n", "        ", "if", "atom", ".", "predicate", "==", "AtConf", ":", "\n", "            ", "q", ",", "=", "atom", ".", "args", "\n", "return", "get_value", "(", "q", ")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp.get_holding": [[117, 123], ["stripstream.pddl.utils.get_value"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value"], ["", "def", "get_holding", "(", "atoms", ")", ":", "\n", "    ", "for", "atom", "in", "atoms", ":", "\n", "        ", "if", "atom", ".", "predicate", "==", "Holding", ":", "\n", "            ", "b", ",", "=", "atom", ".", "args", "\n", "return", "get_value", "(", "b", ")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp.get_color": [[125, 127], ["int", "len"], "function", ["None"], ["", "def", "get_color", "(", "b", ")", ":", "\n", "    ", "return", "COLORS", "[", "int", "(", "b", "[", "len", "(", "'block'", ")", ":", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp.visualize_atoms": [[129, 139], ["countable_tamp.get_config", "countable_tamp.get_holding", "viewer.draw_robot", "viewer.draw_block", "isinstance", "viewer.draw_block", "countable_tamp.get_color", "stripstream.pddl.utils.get_value", "countable_tamp.get_color", "stripstream.pddl.utils.get_value"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp.get_config", "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp.get_holding", "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.draw_robot", "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.draw_block", "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.draw_block", "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp.get_color", "home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value", "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp.get_color", "home.repos.pwc.inspect_result.caelan_stripstream.pddl.utils.get_value"], ["", "def", "visualize_atoms", "(", "viewer", ",", "atoms", ")", ":", "\n", "    ", "conf", "=", "get_config", "(", "atoms", ")", "\n", "holding", "=", "get_holding", "(", "atoms", ")", "\n", "viewer", ".", "draw_robot", "(", "ROBOT_ROW", ",", "conf", ")", "\n", "if", "holding", "is", "not", "None", ":", "\n", "        ", "viewer", ".", "draw_block", "(", "ROBOT_ROW", ",", "conf", ",", "color", "=", "get_color", "(", "holding", ")", ")", "\n", "", "for", "atom", "in", "atoms", ":", "\n", "        ", "if", "isinstance", "(", "atom", ",", "Atom", ")", "and", "atom", ".", "predicate", "==", "AtPose", ":", "\n", "            ", "b", ",", "p", "=", "atom", ".", "args", "\n", "viewer", ".", "draw_block", "(", "0", ",", "get_value", "(", "p", ")", ",", "color", "=", "get_color", "(", "get_value", "(", "b", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_utils.TMPProblem.__init__": [[8, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "initial_config", ",", "initial_holding", ",", "initial_poses", ",", "\n", "goal_config", ",", "goal_holding", ",", "goal_poses", ")", ":", "\n", "        ", "self", ".", "initial_config", "=", "initial_config", "\n", "self", ".", "initial_holding", "=", "initial_holding", "\n", "self", ".", "initial_poses", "=", "initial_poses", "\n", "self", ".", "goal_config", "=", "goal_config", "\n", "self", ".", "goal_holding", "=", "goal_holding", "\n", "self", ".", "goal_poses", "=", "goal_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_utils.TMPProblem.get_blocks": [[17, 22], ["countable_tamp_utils.TMPProblem.initial_poses.keys", "countable_tamp_utils.TMPProblem.append"], "methods", ["None"], ["", "def", "get_blocks", "(", "self", ")", ":", "\n", "        ", "blocks", "=", "self", ".", "initial_poses", ".", "keys", "(", ")", "\n", "if", "self", ".", "initial_holding", "is", "not", "False", ":", "\n", "            ", "blocks", ".", "append", "(", "self", ".", "initial_holding", ")", "\n", "", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_utils.get_grasp_problem": [[24, 32], ["countable_tamp_utils.TMPProblem"], "function", ["None"], ["", "", "def", "get_grasp_problem", "(", "p", "=", "100", ")", ":", "\n", "    ", "initial_config", "=", "0", "\n", "initial_holding", "=", "False", "\n", "initial_poses", "=", "{", "'block1'", ":", "p", "}", "\n", "goal_config", "=", "None", "\n", "goal_holding", "=", "'block1'", "\n", "goal_poses", "=", "{", "}", "\n", "return", "TMPProblem", "(", "initial_config", ",", "initial_holding", ",", "initial_poses", ",", "goal_config", ",", "goal_holding", ",", "goal_poses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_utils.get_distract_problem": [[34, 42], ["countable_tamp_utils.TMPProblem", "dict", "range"], "function", ["None"], ["", "def", "get_distract_problem", "(", "p", "=", "100", ")", ":", "\n", "    ", "initial_config", "=", "0", "\n", "initial_holding", "=", "False", "\n", "initial_poses", "=", "[", "(", "'block%s'", "%", "p", ",", "p", ")", "for", "p", "in", "range", "(", "1", ",", "p", "+", "1", ")", "]", "\n", "goal_config", "=", "None", "\n", "goal_holding", "=", "initial_poses", "[", "-", "1", "]", "[", "0", "]", "\n", "goal_poses", "=", "{", "}", "\n", "return", "TMPProblem", "(", "initial_config", ",", "initial_holding", ",", "dict", "(", "initial_poses", ")", ",", "goal_config", ",", "goal_holding", ",", "goal_poses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_utils.get_invert_problem": [[44, 53], ["countable_tamp_utils.TMPProblem", "dict", "range", "enumerate", "enumerate", "len"], "function", ["None"], ["", "def", "get_invert_problem", "(", "p", "=", "3", ")", ":", "\n", "    ", "blocks", "=", "[", "'block%s'", "%", "p", "for", "p", "in", "range", "(", "0", ",", "p", ")", "]", "\n", "initial_config", "=", "0", "\n", "initial_holding", "=", "False", "\n", "initial_poses", "=", "[", "(", "block", ",", "p", ")", "for", "p", ",", "block", "in", "enumerate", "(", "blocks", ")", "]", "\n", "goal_config", "=", "None", "\n", "goal_holding", "=", "None", "\n", "goal_poses", "=", "{", "block", ":", "len", "(", "blocks", ")", "-", "p", "-", "1", "for", "p", ",", "block", "in", "enumerate", "(", "blocks", ")", "}", "\n", "return", "TMPProblem", "(", "initial_config", ",", "initial_holding", ",", "dict", "(", "initial_poses", ")", ",", "goal_config", ",", "goal_holding", ",", "goal_poses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_utils.get_shift_problem": [[55, 64], ["countable_tamp_utils.TMPProblem", "dict", "range", "enumerate", "enumerate"], "function", ["None"], ["", "def", "get_shift_problem", "(", "p", "=", "3", ")", ":", "\n", "    ", "blocks", "=", "[", "'block%s'", "%", "p", "for", "p", "in", "range", "(", "0", ",", "p", ")", "]", "\n", "initial_config", "=", "0", "\n", "initial_holding", "=", "False", "\n", "initial_poses", "=", "[", "(", "block", ",", "p", ")", "for", "p", ",", "block", "in", "enumerate", "(", "blocks", ")", "]", "\n", "goal_config", "=", "None", "\n", "goal_holding", "=", "None", "\n", "goal_poses", "=", "{", "block", ":", "p", "+", "1", "for", "p", ",", "block", "in", "enumerate", "(", "blocks", ")", "}", "\n", "return", "TMPProblem", "(", "initial_config", ",", "initial_holding", ",", "dict", "(", "initial_poses", ")", ",", "goal_config", ",", "goal_holding", ",", "goal_poses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_utils.get_distract_place_problem": [[66, 74], ["countable_tamp_utils.TMPProblem", "dict", "range"], "function", ["None"], ["", "def", "get_distract_place_problem", "(", "p", "=", "100", ")", ":", "\n", "    ", "initial_config", "=", "0", "\n", "initial_holding", "=", "False", "\n", "initial_poses", "=", "[", "(", "'block%s'", "%", "p", ",", "p", ")", "for", "p", "in", "range", "(", "1", ",", "p", "+", "1", ")", "]", "\n", "goal_config", "=", "None", "\n", "goal_holding", "=", "None", "\n", "goal_poses", "=", "{", "'block1'", ":", "0", "}", "\n", "return", "TMPProblem", "(", "initial_config", ",", "initial_holding", ",", "dict", "(", "initial_poses", ")", ",", "goal_config", ",", "goal_holding", ",", "goal_poses", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.__init__": [[10, 29], ["Tkinter.Tk", "Tkinter.Tk.withdraw", "Tkinter.Toplevel", "Tkinter.Toplevel.wm_title", "Tkinter.Toplevel.protocol", "min", "min", "Tkinter.Canvas", "countable_tamp_viewer.CountableTMPViewer.canvas.pack", "countable_tamp_viewer.CountableTMPViewer.draw_environment"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.draw_environment"], ["    ", "def", "__init__", "(", "self", ",", "rows", ",", "cols", ",", "width", "=", "500", ",", "height", "=", "500", ",", "side", "=", "25", ",", "block_buffer", "=", "10", ",", "title", "=", "'Grid'", ",", "background", "=", "'tan'", ")", ":", "\n", "        ", "tk", "=", "Tk", "(", ")", "\n", "tk", ".", "withdraw", "(", ")", "\n", "top", "=", "Toplevel", "(", "tk", ")", "\n", "top", ".", "wm_title", "(", "title", ")", "\n", "top", ".", "protocol", "(", "'WM_DELETE_WINDOW'", ",", "top", ".", "destroy", ")", "\n", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "self", ".", "rows", "=", "min", "(", "rows", ",", "MAX_ROWS", ")", "\n", "self", ".", "cols", "=", "min", "(", "cols", ",", "MAX_COLS", ")", "\n", "self", ".", "canvas", "=", "Canvas", "(", "top", ",", "width", "=", "self", ".", "width", ",", "\n", "height", "=", "self", ".", "height", ",", "background", "=", "background", ")", "\n", "self", ".", "canvas", ".", "pack", "(", ")", "\n", "self", ".", "side", "=", "side", "\n", "self", ".", "block_buffer", "=", "block_buffer", "\n", "self", ".", "cells", "=", "{", "}", "\n", "self", ".", "robot", "=", "[", "]", "\n", "self", ".", "draw_environment", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.transform_r": [[30, 32], ["None"], "methods", ["None"], ["", "def", "transform_r", "(", "self", ",", "r", ")", ":", "\n", "        ", "return", "self", ".", "table_y1", "+", "r", "*", "(", "self", ".", "side", "+", "2", "*", "self", ".", "block_buffer", ")", "+", "2", "*", "self", ".", "block_buffer", "+", "self", ".", "side", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.transform_c": [[33, 36], ["None"], "methods", ["None"], ["", "def", "transform_c", "(", "self", ",", "c", ")", ":", "\n", "\n", "        ", "return", "self", ".", "table_x1", "+", "c", "*", "(", "self", ".", "side", "+", "2", "*", "self", ".", "block_buffer", ")", "+", "2", "*", "self", ".", "block_buffer", "+", "self", ".", "side", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.draw_environment": [[37, 73], ["range", "countable_tamp_viewer.CountableTMPViewer.canvas.create_rectangle", "countable_tamp_viewer.CountableTMPViewer.canvas.create_rectangle", "countable_tamp_viewer.CountableTMPViewer.canvas.create_rectangle", "countable_tamp_viewer.CountableTMPViewer.canvas.create_rectangle", "countable_tamp_viewer.CountableTMPViewer.canvas.create_rectangle", "range", "countable_tamp_viewer.CountableTMPViewer.transform_c", "countable_tamp_viewer.CountableTMPViewer.transform_r", "countable_tamp_viewer.CountableTMPViewer.environment.append", "countable_tamp_viewer.CountableTMPViewer.canvas.create_oval"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.transform_c", "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.transform_r"], ["", "def", "draw_environment", "(", "self", ",", "table_color", "=", "'lightgrey'", ",", "bin_color", "=", "'grey'", ")", ":", "\n", "        ", "table_width", "=", "self", ".", "cols", "*", "(", "self", ".", "side", "+", "2", "*", "self", ".", "block_buffer", ")", "+", "2", "*", "self", ".", "block_buffer", "\n", "table_height", "=", "self", ".", "rows", "*", "(", "self", ".", "side", "+", "2", "*", "self", ".", "block_buffer", ")", "+", "2", "*", "self", ".", "block_buffer", "\n", "\n", "border_buffer", "=", "50", "\n", "self", ".", "table_x1", "=", "border_buffer", "\n", "self", ".", "table_y1", "=", "self", ".", "height", "-", "table_height", "-", "border_buffer", "\n", "\n", "bin_width", "=", "20", "\n", "self", ".", "environment", "=", "[", "\n", "self", ".", "canvas", ".", "create_rectangle", "(", "self", ".", "table_x1", ",", "self", ".", "table_y1", ",", "\n", "self", ".", "table_x1", "+", "table_width", ",", "self", ".", "table_y1", "+", "table_height", ",", "\n", "fill", "=", "table_color", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", ",", "\n", "self", ".", "canvas", ".", "create_rectangle", "(", "self", ".", "table_x1", "-", "bin_width", ",", "self", ".", "table_y1", ",", "\n", "self", ".", "table_x1", ",", "self", ".", "table_y1", "+", "table_height", ",", "\n", "fill", "=", "bin_color", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", ",", "\n", "self", ".", "canvas", ".", "create_rectangle", "(", "self", ".", "table_x1", "+", "table_width", ",", "self", ".", "table_y1", ",", "\n", "self", ".", "table_x1", "+", "table_width", "+", "bin_width", ",", "self", ".", "table_y1", "+", "table_height", ",", "\n", "fill", "=", "bin_color", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", ",", "\n", "self", ".", "canvas", ".", "create_rectangle", "(", "self", ".", "table_x1", ",", "self", ".", "table_y1", "+", "table_height", ",", "\n", "self", ".", "table_x1", "+", "table_width", ",", "self", ".", "table_y1", "+", "table_height", "+", "bin_width", ",", "\n", "fill", "=", "bin_color", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", ",", "\n", "self", ".", "canvas", ".", "create_rectangle", "(", "self", ".", "table_x1", "-", "bin_width", ",", "self", ".", "table_y1", "+", "table_height", ",", "\n", "self", ".", "table_x1", "+", "table_width", "+", "bin_width", ",", "self", ".", "table_y1", "+", "table_height", "+", "bin_width", ",", "\n", "fill", "=", "bin_color", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", ",", "\n", "]", "\n", "\n", "pose_radius", "=", "2", "\n", "for", "r", "in", "range", "(", "self", ".", "rows", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "self", ".", "cols", ")", ":", "\n", "                ", "x", "=", "self", ".", "transform_c", "(", "c", ")", "\n", "y", "=", "self", ".", "transform_r", "(", "r", ")", "\n", "self", ".", "environment", ".", "append", "(", "self", ".", "canvas", ".", "create_oval", "(", "x", "-", "pose_radius", ",", "y", "-", "pose_radius", ",", "\n", "x", "+", "pose_radius", ",", "y", "+", "pose_radius", ",", "fill", "=", "'black'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.draw_robot": [[74, 100], ["countable_tamp_viewer.CountableTMPViewer.transform_c", "countable_tamp_viewer.CountableTMPViewer.canvas.create_rectangle", "countable_tamp_viewer.CountableTMPViewer.canvas.create_rectangle", "countable_tamp_viewer.CountableTMPViewer.canvas.create_rectangle", "countable_tamp_viewer.CountableTMPViewer.canvas.create_rectangle", "countable_tamp_viewer.CountableTMPViewer.transform_r"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.transform_c", "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.transform_r"], ["", "", "", "def", "draw_robot", "(", "self", ",", "r", ",", "c", ",", "color", "=", "'white'", ")", ":", "\n", "        ", "grasp_buffer", "=", "5", "\n", "finger_length", "=", "self", ".", "side", "+", "grasp_buffer", "\n", "finger_width", "=", "10", "\n", "gripper_length", "=", "20", "\n", "gripper_width", "=", "self", ".", "side", "+", "2", "*", "self", ".", "block_buffer", "+", "finger_width", "\n", "stem_length", "=", "50", "\n", "stem_width", "=", "20", "\n", "\n", "x", "=", "self", ".", "transform_c", "(", "c", ")", "\n", "y", "=", "self", ".", "transform_r", "(", "r", ")", "-", "self", ".", "side", "/", "2", "-", "gripper_length", "/", "2", "-", "grasp_buffer", "\n", "finger_x", "=", "gripper_width", "/", "2", "-", "finger_width", "/", "2", "\n", "self", ".", "robot", "=", "[", "\n", "self", ".", "canvas", ".", "create_rectangle", "(", "x", "+", "finger_x", "-", "finger_width", "/", "2.", ",", "y", ",", "\n", "x", "+", "finger_x", "+", "finger_width", "/", "2.", ",", "y", "+", "finger_length", ",", "\n", "fill", "=", "color", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", ",", "\n", "self", ".", "canvas", ".", "create_rectangle", "(", "x", "-", "finger_x", "-", "finger_width", "/", "2.", ",", "y", ",", "\n", "x", "-", "finger_x", "+", "finger_width", "/", "2.", ",", "y", "+", "finger_length", ",", "\n", "fill", "=", "color", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", ",", "\n", "self", ".", "canvas", ".", "create_rectangle", "(", "x", "-", "stem_width", "/", "2.", ",", "y", "-", "stem_length", ",", "\n", "x", "+", "stem_width", "/", "2.", ",", "y", ",", "\n", "fill", "=", "color", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", ",", "\n", "self", ".", "canvas", ".", "create_rectangle", "(", "x", "-", "gripper_width", "/", "2.", ",", "y", "-", "gripper_length", "/", "2.", ",", "\n", "x", "+", "gripper_width", "/", "2.", ",", "y", "+", "gripper_length", "/", "2.", ",", "\n", "fill", "=", "color", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.draw_block": [[102, 108], ["countable_tamp_viewer.CountableTMPViewer.transform_c", "countable_tamp_viewer.CountableTMPViewer.transform_r", "countable_tamp_viewer.CountableTMPViewer.canvas.create_rectangle"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.transform_c", "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.transform_r"], ["", "def", "draw_block", "(", "self", ",", "r", ",", "c", ",", "color", "=", "'red'", ")", ":", "\n", "        ", "x", "=", "self", ".", "transform_c", "(", "c", ")", "\n", "y", "=", "self", ".", "transform_r", "(", "r", ")", "\n", "self", ".", "cells", "[", "(", "x", ",", "y", ")", "]", "=", "self", ".", "canvas", ".", "create_rectangle", "(", "x", "-", "self", ".", "side", "/", "2.", ",", "y", "-", "self", ".", "side", "/", "2.", ",", "\n", "x", "+", "self", ".", "side", "/", "2.", ",", "y", "+", "self", ".", "side", "/", "2.", ",", "\n", "fill", "=", "color", ",", "outline", "=", "'black'", ",", "width", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.clear": [[109, 111], ["countable_tamp_viewer.CountableTMPViewer.canvas.delete"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.delete"], ["", "def", "clear", "(", "self", ")", ":", "\n", "        ", "self", ".", "canvas", ".", "delete", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.save": [[112, 116], ["ImageGrab.grab().save", "ImageGrab.grab"], "methods", ["home.repos.pwc.inspect_result.caelan_stripstream.countable_tamp.countable_tamp_viewer.CountableTMPViewer.save"], ["", "def", "save", "(", "self", ",", "filename", ")", ":", "\n", "\n", "        ", "from", "PIL", "import", "ImageGrab", "\n", "ImageGrab", ".", "grab", "(", "(", "0", ",", "0", ",", "self", ".", "width", ",", "self", ".", "height", ")", ")", ".", "save", "(", "filename", "+", "'.jpg'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.search.bfs.retrace": [[8, 12], ["bfs.retrace"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.search.bfs.retrace"], ["def", "retrace", "(", "fluents", ",", "state_space", ")", ":", "\n", "    ", "if", "state_space", "[", "fluents", "]", ".", "parent", "is", "None", ":", "\n", "        ", "return", "[", "]", "\n", "", "return", "retrace", "(", "state_space", "[", "fluents", "]", ".", "parent", ",", "state_space", ")", "+", "[", "state_space", "[", "fluents", "]", ".", "action", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.search.bfs.bfs": [[14, 55], ["collections.namedtuple", "time.time", "list", "list", "frozenset", "collections.deque", "stripstream.algorithms.instantiation.instantiate_actions", "stripstream.algorithms.instantiation.instantiate_axioms", "universe.initial_fluents", "collections.namedtuple.", "collections.deque.popleft", "set", "universe.goal_formula.holds", "universe.get_initial_atoms", "len", "map", "isinstance", "time.time", "bfs.retrace", "action.is_applicable", "frozenset", "time.time", "axiom.is_applicable", "axiom.apply", "set.add", "action.apply", "collections.namedtuple.", "collections.deque.append"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.holds", "home.repos.pwc.inspect_result.caelan_stripstream.search.bfs.retrace", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.add"], ["", "def", "bfs", "(", "universe", ",", "max_time", ",", "max_cost", ",", "verbose", ")", ":", "\n", "    ", "Node", "=", "namedtuple", "(", "'Node'", ",", "[", "'cost'", ",", "'action'", ",", "'parent'", "]", ")", "\n", "\n", "start_time", "=", "time", "(", ")", "\n", "\n", "action_instances", "=", "list", "(", "instantiate_actions", "(", "universe", ")", ")", "\n", "\n", "axiom_instances", "=", "list", "(", "instantiate_axioms", "(", "universe", ")", ")", "\n", "\n", "static_atoms", "=", "{", "atom", "for", "atom", "in", "universe", ".", "get_initial_atoms", "(", ")", "if", "isinstance", "(", "atom", ",", "Atom", ")", "and", "\n", "atom", ".", "predicate", "not", "in", "universe", ".", "fluent_predicates", "and", "atom", ".", "predicate", "not", "in", "universe", ".", "derived_predicates", "}", "\n", "initial_fluents", "=", "frozenset", "(", "universe", ".", "initial_fluents", "(", ")", ")", "\n", "state_space", "=", "{", "initial_fluents", ":", "Node", "(", "0", ",", "None", ",", "None", ")", "}", "\n", "queue", "=", "deque", "(", "[", "initial_fluents", "]", ")", "\n", "while", "len", "(", "queue", ")", ">", "0", "and", "time", "(", ")", "-", "start_time", "<", "max_time", ":", "\n", "        ", "current_fluents", "=", "queue", ".", "popleft", "(", ")", "\n", "node", "=", "state_space", "[", "current_fluents", "]", "\n", "\n", "applied_axioms", "=", "set", "(", ")", "\n", "state", "=", "static_atoms", "|", "current_fluents", "\n", "new_derived", "=", "True", "\n", "while", "new_derived", "and", "time", "(", ")", "-", "start_time", "<", "max_time", ":", "\n", "            ", "new_derived", "=", "False", "\n", "for", "axiom", "in", "axiom_instances", ":", "\n", "                ", "if", "axiom", "not", "in", "applied_axioms", "and", "axiom", ".", "is_applicable", "(", "state", ",", "universe", ".", "type_to_objects", ")", ":", "\n", "                    ", "state", "=", "axiom", ".", "apply", "(", "state", ",", "universe", ".", "type_to_objects", ")", "\n", "applied_axioms", ".", "add", "(", "axiom", ")", "\n", "new_derived", "=", "True", "\n", "\n", "", "", "", "if", "universe", ".", "goal_formula", ".", "holds", "(", "state", ",", "universe", ".", "type_to_objects", ")", ":", "\n", "            ", "return", "map", "(", "lambda", "a", ":", "(", "a", ".", "lifted", ",", "a", ".", "args", ")", ",", "retrace", "(", "current_fluents", ",", "state_space", ")", ")", "\n", "\n", "", "for", "action", "in", "action_instances", ":", "\n", "            ", "if", "node", ".", "cost", "+", "action", ".", "cost", "<=", "max_cost", "and", "action", ".", "is_applicable", "(", "state", ",", "universe", ".", "type_to_objects", ")", ":", "\n", "                ", "next_fluents", "=", "frozenset", "(", "action", ".", "apply", "(", "\n", "current_fluents", ",", "universe", ".", "type_to_objects", ")", ")", "\n", "if", "next_fluents", "not", "in", "state_space", ":", "\n", "                    ", "state_space", "[", "next_fluents", "]", "=", "Node", "(", "\n", "node", ".", "cost", "+", "1", ",", "action", ",", "current_fluents", ")", "\n", "queue", ".", "append", "(", "next_fluents", ")", "\n", "", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.search.bfs.get_bfs": [[57, 67], ["bfs.bfs", "min", "min"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.search.bfs.bfs"], ["", "def", "get_bfs", "(", "max_time", "=", "30", ",", "max_cost", "=", "INF", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Returns a breadth-first search (BFS) search function configured using the arguments.\n\n    :param max_time: a numeric constant for the maximum BFS search time.\n    :param max_cost: a numeric constant for the maximum BFS solution cost.\n    :param verbose: a boolean flag toggling the amount of terminal output\n    :return: function wrapper around :class:`.bfs`\n    \"\"\"", "\n", "return", "lambda", "p", ",", "mt", ",", "mc", ":", "bfs", "(", "p", ",", "min", "(", "mt", ",", "max_time", ")", ",", "min", "(", "mc", ",", "max_cost", ")", ",", "verbose", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.caelan_stripstream.focused.utils.is_concrete": [[14, 16], ["None"], "function", ["None"], ["    ", "return", "window_3d", ".", "window", "is", "not", "None", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.focused.utils.constant_from_concrete": [[18, 22], ["utils.is_concrete"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.focused.utils.is_concrete"], ["    ", "return", "shape", ".", "name", "(", ")", "\n", "\n", "\n", "", "def", "get_color", "(", "shape", ")", ":", "\n", "    ", "return", "shape", ".", "properties", "[", "'color'", "]", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.focused.utils.partition_values": [[24, 35], ["set", "set", "isinstance", "isinstance", "objects.update", "objects.add", "utils.is_concrete", "atoms.add"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.add", "home.repos.pwc.inspect_result.caelan_stripstream.focused.utils.is_concrete", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.add"], ["\n", "", "def", "get_box_body", "(", "length", ",", "width", ",", "height", ",", "name", "=", "'box'", ",", "color", "=", "'black'", ")", ":", "\n", "    ", "return", "Shape", "(", "[", "\n", "BoxAligned", "(", "np", ".", "array", "(", "[", "(", "-", "length", "/", "2.", ",", "-", "width", "/", "2.", ",", "-", "height", "/", "2", ")", ",", "\n", "(", "length", "/", "2.", ",", "width", "/", "2.", ",", "height", "/", "2", ")", "]", ")", ",", "None", ")", "\n", "]", ",", "None", ",", "name", "=", "name", ",", "color", "=", "color", ")", "\n", "\n", "\n", "", "GRASP_FRAME", "=", "hu", ".", "Pose", "(", "0", ",", "-", "0.025", ",", "0", ",", "0", ")", "\n", "CENTER_FRAME", "=", "hu", ".", "Pose", "(", "0", ",", "0", ",", "0.025", ",", "0", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.focused.utils.make_abstract_constant": [[42, 48], ["utils.AbstractConstant"], "function", ["None"], ["return", "graspFrame", "\n", "\n", "\n", "", "Z_OFFSET", "=", "0.02", "\n", "\n", "\n", "gMat0", "=", "hu", ".", "Transform", "(", "np", ".", "array", "(", "[", "(", "0.", ",", "1.", ",", "0.", ",", "0.", ")", ",", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.focused.utils.has_abstract_inputs": [[50, 52], ["any", "isinstance"], "function", ["None"], ["(", "1.", ",", "0.", ",", "0.", ",", "Z_OFFSET", ")", ",", "\n", "(", "0.", ",", "0.", ",", "0.", ",", "1.", ")", "]", ")", ")", "\n", "gMat1", "=", "hu", ".", "Transform", "(", "np", ".", "array", "(", "[", "(", "0.", ",", "-", "1.", ",", "0.", ",", "0.", ")", ",", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.focused.utils.replace_abstract_constants": [[54, 58], ["any", "map", "bindings.get", "isinstance"], "function", ["None"], ["(", "1.", ",", "0.", ",", "0.", ",", "Z_OFFSET", ")", ",", "\n", "(", "0.", ",", "0.", ",", "0.", ",", "1.", ")", "]", ")", ")", "\n", "gMat4", "=", "hu", ".", "Pose", "(", "0", ",", "0", ",", "0", ",", "math", ".", "pi", "/", "2", ")", ".", "compose", "(", "gMat0", ")", "\n", "gMat5", "=", "hu", ".", "Pose", "(", "0", ",", "0", ",", "0", ",", "-", "math", ".", "pi", "/", "2", ")", ".", "compose", "(", "gMat0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.focused.utils.get_target_atoms": [[60, 76], ["universe.get_initial_atoms", "action.instantiate", "zip", "set", "stripstream.algorithms.plan.substitute_axioms", "condition.holds", "condition.positive_supporters", "target_atoms.append", "instance.apply", "set.add"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.instantiate", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.holds", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Condition.positive_supporters", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Effect.add"], ["\n", "\n", "gMat2", "=", "hu", ".", "Transform", "(", "np", ".", "array", "(", "[", "(", "-", "1.", ",", "0.", ",", "0.", ",", "0.", ")", ",", "\n", "(", "0.", ",", "0.", ",", "-", "1.", ",", "0.025", ")", ",", "\n", "(", "0.", ",", "-", "1.", ",", "0.", ",", "0.", ")", ",", "\n", "(", "0.", ",", "0.", ",", "0.", ",", "1.", ")", "]", ")", ")", "\n", "gMat3", "=", "hu", ".", "Transform", "(", "np", ".", "array", "(", "[", "(", "1.", ",", "0.", ",", "0.", ",", "0.", ")", ",", "\n", "(", "0.", ",", "0.", ",", "1.", ",", "-", "0.025", ")", ",", "\n", "(", "0.", ",", "-", "1.", ",", "0.", ",", "0.", ")", ",", "\n", "(", "0.", ",", "0.", ",", "0.", ",", "1.", ")", "]", ")", ")", "\n", "\n", "TOP_GRASPS", "=", "map", "(", "get_grasp_frame_origin", ",", "[", "gMat2", ",", "gMat3", "]", ")", "\n", "\n", "\n", "def", "is_left_active", "(", "robot", ")", ":", "\n", "    ", "return", "'pr2LeftArm'", "in", "robot", ".", "moveChainNames", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.focused.utils.get_cost_atoms": [[78, 80], ["filter", "action.effect.get_atoms", "isinstance"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_atoms"], ["", "def", "is_right_active", "(", "robot", ")", ":", "\n", "    ", "return", "'pr2RightArm'", "in", "robot", ".", "moveChainNames", "\n", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.focused.utils.get_stream_functions": [[82, 96], ["universe.name_to_action.values", "utils.get_cost_atoms", "any", "stripstream.pddl.logic.predicates.Function", "universe.add_function", "stripstream.pddl.logic.connectives.And", "stripstream.pddl.logic.atoms.Cost", "action.condition.get_atoms"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.focused.utils.get_cost_atoms", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_atoms"], ["", "def", "open_grippers", "(", "conf", ")", ":", "\n", "    ", "for", "arm", "in", "conf", ".", "robot", ".", "gripperChainNames", ":", "\n", "        ", "conf", ".", "set", "(", "conf", ".", "robot", ".", "gripperChainNames", "[", "arm", "]", ",", "[", "conf", ".", "robot", ".", "gripMax", "]", ")", "\n", "\n", "\n", "", "", "def", "close_grippers", "(", "conf", ")", ":", "\n", "    ", "for", "arm", "in", "conf", ".", "robot", ".", "gripperChainNames", ":", "\n", "        ", "conf", ".", "set", "(", "conf", ".", "robot", ".", "gripperChainNames", "[", "arm", "]", ",", "[", "0.0", "]", ")", "\n", "\n", "\n", "", "", "class", "Traj", "(", "object", ")", ":", "\n", "    ", "_ids", "=", "count", "(", "0", ")", "\n", "\n", "def", "__init__", "(", "self", ",", "path", ",", "grasp", "=", "None", ")", ":", "\n", "        ", "self", ".", "id", "=", "next", "(", "self", ".", "_ids", ")", "\n"]], "home.repos.pwc.inspect_result.caelan_stripstream.focused.utils.add_stream_cost": [[98, 121], ["utils.get_cost_atoms", "action.condition.get_atoms", "min", "stripstream.pddl.logic.atoms.Initialize", "universe.add_temp_initialize", "any", "int", "stripstream.pddl.logic.atoms.Initialize", "universe.add_temp_initialize", "isinstance", "math.ceil", "isinstance"], "function", ["home.repos.pwc.inspect_result.caelan_stripstream.focused.utils.get_cost_atoms", "home.repos.pwc.inspect_result.caelan_stripstream.logic.formulas.Formula.get_atoms"], ["self", ".", "grasp", "=", "grasp", "\n", "\n", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'%s(%d)'", "%", "(", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "id", ")", "\n", "\n", "\n", "", "", "def", "interpolate", "(", "q1", ",", "q2", ",", "step_size", ",", "active_chains", "=", "None", ")", ":", "\n", "    ", "assert", "q1", ".", "robot", "==", "q2", ".", "robot", "\n", "moveChains", "=", "active_chains", "or", "q1", ".", "keys", "(", ")", "\n", "q", "=", "q1", "\n", "while", "not", "all", "(", "q", "[", "c", "]", "==", "q2", "[", "c", "]", "for", "c", "in", "moveChains", ")", ":", "\n", "        ", "yield", "q", "\n", "q", "=", "q1", ".", "robot", ".", "stepAlongLine", "(", "\n", "q2", ",", "q", ",", "step_size", ",", "forward", "=", "True", ",", "moveChains", "=", "moveChains", ")", "\n", "", "yield", "q2", "\n", "\n", "\n", "", "def", "forward_kinematics", "(", "conf", ",", "arm", ")", ":", "\n", "    ", "return", "conf", ".", "cartConf", "(", ")", "[", "conf", ".", "robot", ".", "armChainNames", "[", "arm", "]", "]", "\n", "\n", "\n", "", "def", "inverse_kinematics", "(", "default_conf", ",", "manip_trans", ",", "arm", ")", ":", "\n", "    ", "return", "default_conf", ".", "robot", ".", "inverseKinWristGen", "(", "manip_trans", ",", "arm", ",", "default_conf", ",", "\n", "basePose", "=", "default_conf", ".", "basePose", "(", ")", ")", "\n"]]}