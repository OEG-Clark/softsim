{"home.repos.pwc.inspect_result.rycolab_intrinsic-probing.None.preprocess_treebank.subword_tokenize": [[53, 65], ["enumerate", "tokenizer.tokenize", "indexed_subtokens.append"], "function", ["None"], ["", "def", "subword_tokenize", "(", "tokenizer", ":", "BertTokenizer", ",", "tokens", ":", "List", "[", "str", "]", ")", "->", "List", "[", "Tuple", "[", "int", ",", "str", "]", "]", ":", "\n", "    ", "\"\"\"\n    Returns: List of subword tokens, List of indices mapping each subword token to one real token.\n    \"\"\"", "\n", "subtokens", "=", "[", "tokenizer", ".", "tokenize", "(", "t", ")", "for", "t", "in", "tokens", "]", "\n", "\n", "indexed_subtokens", "=", "[", "]", "\n", "for", "idx", ",", "subtoks", "in", "enumerate", "(", "subtokens", ")", ":", "\n", "        ", "for", "subtok", "in", "subtoks", ":", "\n", "            ", "indexed_subtokens", ".", "append", "(", "(", "idx", ",", "subtok", ")", ")", "\n", "\n", "", "", "return", "indexed_subtokens", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.None.preprocess_treebank.unimorph_feature_parser": [[67, 72], ["utils.parser.parse_unimorph_features", "line[].split"], "function", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.parser.parse_unimorph_features"], ["", "def", "unimorph_feature_parser", "(", "line", ":", "List", "[", "str", "]", ",", "i", ":", "int", ")", "->", "Dict", "[", "str", ",", "str", "]", ":", "\n", "    ", "if", "line", "[", "i", "]", "==", "\"_\"", ":", "\n", "        ", "return", "{", "}", "\n", "\n", "", "return", "parse_unimorph_features", "(", "line", "[", "i", "]", ".", "split", "(", "\";\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.None.preprocess_treebank.merge_attributes": [[74, 94], ["merged_attributes.items", "t[].items", "merged_attributes[].append", "len"], "function", ["None"], ["", "def", "merge_attributes", "(", "tokens", ":", "List", "[", "str", "]", ",", "value_to_attr_dict", ":", "Dict", "[", "str", ",", "str", "]", ")", "->", "Dict", "[", "str", ",", "str", "]", ":", "\n", "    ", "\"\"\"\n    Returns a dictionary containing Unimorph attributes, and the values taken on after the merge.\n    \"\"\"", "\n", "# First, build a list that naively merges everything", "\n", "merged_attributes", ":", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", "=", "{", "}", "\n", "for", "t", "in", "tokens", ":", "\n", "        ", "for", "attr", ",", "val", "in", "t", "[", "\"um_feats\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "attr", "not", "in", "merged_attributes", ":", "\n", "                ", "merged_attributes", "[", "attr", "]", "=", "[", "]", "\n", "\n", "", "merged_attributes", "[", "attr", "]", ".", "append", "(", "val", ")", "\n", "\n", "# Second, remove attributes with multiple values (even if they are the same)", "\n", "", "", "final_attributes", ":", "Dict", "[", "str", ",", "str", "]", "=", "{", "}", "\n", "for", "attr", ",", "vals", "in", "merged_attributes", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "vals", ")", "==", "1", ":", "\n", "            ", "final_attributes", "[", "attr", "]", "=", "vals", "[", "0", "]", "\n", "\n", "", "", "return", "final_attributes", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCacheEntry.__init__": [[14, 42], ["cache.AttributeValueGaussianCacheEntry.trainer.compute_gaussian_model_params_for_attribute_value", "cache.AttributeValueGaussianCacheEntry.trainer.compute_categorical_model_sampling_prob_for_attribute_value", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "numpy.min", "cache.diagonalize_cov", "numpy.real", "Exception", "numpy.eye", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.linalg.eigvals"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.trainer.base.Trainer.compute_gaussian_model_params_for_attribute_value", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.trainer.base.Trainer.compute_categorical_model_sampling_prob_for_attribute_value", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.diagonalize_cov"], ["    ", "def", "__init__", "(", "self", ",", "attribute", ":", "str", ",", "value", ":", "str", ",", "words", ":", "List", "[", "Word", "]", ",", "trainer", ":", "Trainer", ",", "\n", "diagonal_only", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "self", ".", "attribute", "=", "attribute", "\n", "self", ".", "value", "=", "value", "\n", "self", ".", "trainer", "=", "trainer", "\n", "\n", "self", ".", "mean", ",", "self", ".", "cov", "=", "self", ".", "trainer", ".", "compute_gaussian_model_params_for_attribute_value", "(", "attribute", ",", "value", ",", "words", ")", "\n", "\n", "# This matrix may have very small eigenvalues, and due to floating point truncation errors these may be", "\n", "# negative, making the matrix non-PSD. We add small value to the diagonal elements to prevent this", "\n", "# from happening.", "\n", "try", ":", "\n", "            ", "min_eig", "=", "np", ".", "min", "(", "np", ".", "real", "(", "np", ".", "linalg", ".", "eigvals", "(", "self", ".", "cov", ")", ")", ")", "\n", "", "except", "Exception", "as", "ex", ":", "\n", "            ", "raise", "Exception", "(", "ex", ")", "\n", "\n", "", "if", "min_eig", "<", "0", ":", "\n", "            ", "self", ".", "cov", "-=", "10", "*", "min_eig", "*", "np", ".", "eye", "(", "self", ".", "cov", ".", "shape", "[", "0", "]", ")", "\n", "\n", "", "if", "diagonal_only", ":", "\n", "            ", "self", ".", "cov", "=", "diagonalize_cov", "(", "self", ".", "cov", ")", "\n", "\n", "", "self", ".", "sampling_prob", "=", "self", ".", "trainer", ".", "compute_categorical_model_sampling_prob_for_attribute_value", "(", "\n", "attribute", ",", "value", ",", "words", ")", "\n", "self", ".", "sampling_prob_torch", "=", "torch", ".", "tensor", "(", "[", "self", ".", "sampling_prob", "]", ")", ".", "float", "(", ")", "\n", "\n", "self", ".", "mean_torch", "=", "torch", ".", "tensor", "(", "self", ".", "mean", ")", ".", "float", "(", ")", "\n", "self", ".", "cov_torch", "=", "torch", ".", "tensor", "(", "self", ".", "cov", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCacheEntry.get_sampling_prob": [[43, 48], ["None"], "methods", ["None"], ["", "def", "get_sampling_prob", "(", "self", ",", "as_torch", "=", "True", ")", ":", "\n", "        ", "if", "as_torch", ":", "\n", "            ", "return", "self", ".", "sampling_prob_torch", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "sampling_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCacheEntry.get_gaussian_model_params": [[49, 54], ["None"], "methods", ["None"], ["", "", "def", "get_gaussian_model_params", "(", "self", ",", "as_torch", "=", "True", ")", ":", "\n", "        ", "if", "as_torch", ":", "\n", "            ", "return", "self", ".", "mean_torch", ",", "self", ".", "cov_torch", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "mean", ",", "self", ".", "cov", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCacheEntry.get_attribute": [[55, 57], ["None"], "methods", ["None"], ["", "", "def", "get_attribute", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "attribute", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCacheEntry.get_value": [[58, 60], ["None"], "methods", ["None"], ["", "def", "get_value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCache.__init__": [[67, 85], ["tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "w.get_attributes", "attribute_values_dict.items", "cache.AttributeValueGaussianCache.get_cache_entry", "cache.AttributeValueGaussianCache.get_cache_entry", "w.get_attribute"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_attributes", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCache.get_cache_entry", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCache.get_cache_entry", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_attribute"], ["def", "__init__", "(", "self", ",", "words", ":", "List", "[", "Word", "]", ",", "trainer", ":", "Trainer", ",", "diagonal_only", ":", "bool", "=", "False", ",", "\n", "attribute_values_dict", ":", "Optional", "[", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "self", ".", "words", "=", "words", "\n", "self", ".", "cache", ":", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "AttributeValueGaussianCacheEntry", "]", "]", "=", "{", "}", "\n", "self", ".", "diagonal_only", "=", "diagonal_only", "\n", "self", ".", "trainer", "=", "trainer", "\n", "\n", "if", "attribute_values_dict", "is", "None", ":", "\n", "# Preload everything by bruteforcing every combination", "\n", "            ", "for", "w", "in", "tqdm", "(", "words", ",", "desc", "=", "\"Build Cache\"", ")", ":", "\n", "                ", "for", "a", "in", "w", ".", "get_attributes", "(", ")", ":", "\n", "# Actual values", "\n", "                    ", "self", ".", "get_cache_entry", "(", "a", ",", "w", ".", "get_attribute", "(", "a", ")", ")", "\n", "", "", "", "else", ":", "\n", "# Preload everything based on precomputed options", "\n", "            ", "for", "attr", ",", "vals", "in", "tqdm", "(", "attribute_values_dict", ".", "items", "(", ")", ",", "desc", "=", "\"Build Cache\"", ")", ":", "\n", "                ", "for", "v", "in", "vals", ":", "\n", "                    ", "self", ".", "get_cache_entry", "(", "attr", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCache.get_cache_entry": [[86, 95], ["cache.AttributeValueGaussianCacheEntry"], "methods", ["None"], ["", "", "", "", "def", "get_cache_entry", "(", "self", ",", "attribute", ":", "str", ",", "value", ":", "str", ")", "->", "AttributeValueGaussianCacheEntry", ":", "\n", "        ", "if", "attribute", "not", "in", "self", ".", "cache", ":", "\n", "            ", "self", ".", "cache", "[", "attribute", "]", "=", "{", "}", "\n", "\n", "", "if", "value", "not", "in", "self", ".", "cache", "[", "attribute", "]", ":", "\n", "            ", "self", ".", "cache", "[", "attribute", "]", "[", "value", "]", "=", "AttributeValueGaussianCacheEntry", "(", "\n", "attribute", ",", "value", ",", "self", ".", "words", ",", "trainer", "=", "self", ".", "trainer", ",", "diagonal_only", "=", "self", ".", "diagonal_only", ")", "\n", "\n", "", "return", "self", ".", "cache", "[", "attribute", "]", "[", "value", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCache.get_all_attribute_values": [[96, 98], ["cache.AttributeValueGaussianCache.cache[].items"], "methods", ["None"], ["", "def", "get_all_attribute_values", "(", "self", ",", "attribute", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "[", "k", "for", "k", ",", "v", "in", "self", ".", "cache", "[", "attribute", "]", ".", "items", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCache.has_attribute": [[99, 101], ["None"], "methods", ["None"], ["", "def", "has_attribute", "(", "self", ",", "attribute", ":", "str", ")", "->", "bool", ":", "\n", "        ", "return", "attribute", "in", "self", ".", "cache", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.diagonalize_cov": [[9, 11], ["numpy.diag", "numpy.diagonal"], "function", ["None"], ["def", "diagonalize_cov", "(", "cov", ":", "np", ".", "ndarray", ")", "->", "np", ".", "ndarray", ":", "\n", "    ", "return", "np", ".", "diag", "(", "np", ".", "diagonal", "(", "cov", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.__init__": [[22, 24], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "selected_results", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ")", ":", "\n", "        ", "self", ".", "_selected_results", "=", "selected_results", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.plot_dimension_scatter_graph": [[25, 99], ["plotly.Figure", "enumerate", "enumerate", "plotly.Figure.update_xaxes", "plotly.Figure.update_yaxes", "plotly.Figure.update_layout", "zip", "cache.get_value", "plotly.Figure.add_trace", "zip", "cache.get_value", "range", "itertools.cycle", "list", "plotly.Scatter", "itertools.cycle", "str", "torch.linspace().to", "torch.stack", "[].t", "torch.cholesky", "dict", "dict", "math.exp", "zip", "[].split", "torch.linspace().to.cos", "torch.linspace().to.sin", "[].to", "mean.unsqueeze", "torch.stack.matmul", "l.squeeze().tolist", "plotly.Figure.add_trace", "plotly.Figure.add_trace", "dict", "int", "torch.linspace", "torch.cholesky.t", "torch.stack.cpu().split", "plotly.Scatter", "plotly.Scatter", "x.strip", "[].t", "l.squeeze", "cache.get_gaussian_model_params", "torch.stack.cpu", "[].to", "cache.get_gaussian_model_params"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCacheEntry.get_value", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCacheEntry.get_value", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCacheEntry.get_gaussian_model_params", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCacheEntry.get_gaussian_model_params"], ["", "@", "staticmethod", "\n", "def", "plot_dimension_scatter_graph", "(", "groups", ":", "DimensionScatterGraphData", ",", "dim_1", ":", "int", ",", "dim_2", ":", "int", ",", "device", ",", "show_legend", ":", "bool", "=", "False", ")", ":", "\n", "        ", "fig", "=", "go", ".", "Figure", "(", ")", "\n", "for", "idx", ",", "(", "color", ",", "(", "cache", ",", "points", ")", ")", "in", "enumerate", "(", "zip", "(", "cycle", "(", "QUALITATIVE_COLORS_SCATTER", ")", ",", "groups", ")", ")", ":", "\n", "            ", "name", "=", "cache", ".", "get_value", "(", ")", "\n", "\n", "# Plot points", "\n", "word", "=", "[", "p", "[", "\"word\"", "]", "for", "p", "in", "points", "]", "\n", "x_point", "=", "[", "p", "[", "\"coordinate\"", "]", "[", "0", "]", "for", "p", "in", "points", "]", "\n", "y_point", "=", "[", "p", "[", "\"coordinate\"", "]", "[", "1", "]", "for", "p", "in", "points", "]", "\n", "\n", "if", "\"log_prob\"", "in", "points", "[", "0", "]", ":", "\n", "                ", "log_prob", "=", "[", "p", "[", "\"log_prob\"", "]", "for", "p", "in", "points", "]", "\n", "prob", "=", "[", "math", ".", "exp", "(", "p", "[", "\"log_prob\"", "]", ")", "for", "p", "in", "points", "]", "\n", "custom_data", "=", "list", "(", "zip", "(", "word", ",", "log_prob", ",", "prob", ")", ")", "\n", "hover_template", "=", "'<b>%{customdata[0]}</b><br>log_prob: %{customdata[1]:.3f} \\\n                    <br>prob: %{customdata[2]:.3f}'", "\n", "", "else", ":", "\n", "                ", "custom_data", "=", "word", "\n", "hover_template", "=", "'<b>%{customdata}</b>'", "\n", "\n", "", "fig", ".", "add_trace", "(", "go", ".", "Scatter", "(", "\n", "x", "=", "x_point", ",", "y", "=", "y_point", ",", "mode", "=", "\"markers\"", ",", "name", "=", "name", ",", "\n", "customdata", "=", "custom_data", ",", "\n", "hovertemplate", "=", "hover_template", ",", "\n", "marker_color", "=", "color", ",", "marker", "=", "dict", "(", "opacity", "=", "0.5", ")", ",", "\n", "showlegend", "=", "show_legend", ",", "\n", ")", ")", "\n", "\n", "", "for", "idx", ",", "(", "color", ",", "(", "cache", ",", "points", ")", ")", "in", "enumerate", "(", "zip", "(", "cycle", "(", "QUALITATIVE_COLORS_SCATTER", ")", ",", "groups", ")", ")", ":", "\n", "            ", "name", "=", "cache", ".", "get_value", "(", ")", "\n", "darkening_factor", "=", "0.75", "\n", "\n", "# Darken contour", "\n", "rgb_ints", "=", "[", "str", "(", "int", "(", "x", ".", "strip", "(", "\" \"", ")", ")", "*", "darkening_factor", ")", "for", "x", "in", "color", "[", "4", ":", "]", "[", ":", "-", "1", "]", ".", "split", "(", "\",\"", ")", "]", "\n", "new_color", "=", "f\"rgb({','.join(rgb_ints)})\"", "\n", "\n", "# Plot contours", "\n", "num_contours", "=", "3", "\n", "num_points", "=", "100", "\n", "for", "r", "in", "range", "(", "1", ",", "num_contours", ")", ":", "\n", "# Compute circle points", "\n", "                ", "angles", "=", "torch", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "steps", "=", "num_points", ")", ".", "to", "(", "device", ")", "\n", "x", "=", "r", "*", "angles", ".", "cos", "(", ")", "\n", "y", "=", "r", "*", "angles", ".", "sin", "(", ")", "\n", "vectors", "=", "torch", ".", "stack", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# Transform according to model", "\n", "dims", "=", "[", "dim_1", ",", "dim_2", "]", "\n", "mean", "=", "cache", ".", "get_gaussian_model_params", "(", ")", "[", "0", "]", ".", "to", "(", "device", ")", "[", "dims", "]", "\n", "cov", "=", "cache", ".", "get_gaussian_model_params", "(", ")", "[", "1", "]", ".", "to", "(", "device", ")", "[", "dims", "]", ".", "t", "(", ")", "[", "dims", "]", ".", "t", "(", ")", "\n", "cov_lt", "=", "torch", ".", "cholesky", "(", "cov", ")", "\n", "vectors", "=", "mean", ".", "unsqueeze", "(", "0", ")", "+", "vectors", ".", "matmul", "(", "cov_lt", ".", "t", "(", ")", ")", "\n", "vals", "=", "[", "l", ".", "squeeze", "(", ")", ".", "tolist", "(", ")", "for", "l", "in", "vectors", ".", "cpu", "(", ")", ".", "split", "(", "dim", "=", "1", ",", "split_size", "=", "1", ")", "]", "\n", "x", ",", "y", "=", "vals", "[", "0", "]", ",", "vals", "[", "1", "]", "\n", "\n", "# Plot", "\n", "contour_data", "=", "{", "\"x\"", ":", "x", ",", "\"y\"", ":", "y", ",", "\"mode\"", ":", "\"lines\"", ",", "\"marker_color\"", ":", "new_color", ",", "\n", "\"legendgroup\"", ":", "f\"{name} (Model)\"", ",", "\"name\"", ":", "f\"{name} (Model)\"", "}", "\n", "if", "r", "==", "0", ":", "\n", "                    ", "fig", ".", "add_trace", "(", "go", ".", "Scatter", "(", "**", "contour_data", ")", ")", "\n", "", "else", ":", "\n", "                    ", "fig", ".", "add_trace", "(", "go", ".", "Scatter", "(", "showlegend", "=", "show_legend", ",", "**", "contour_data", ")", ")", "\n", "\n", "", "", "", "fig", ".", "update_xaxes", "(", "title_text", "=", "f\"Dimension {dim_1}\"", ")", "\n", "fig", ".", "update_yaxes", "(", "title_text", "=", "f\"Dimension {dim_2}\"", ")", "\n", "\n", "# Make serif", "\n", "fig", ".", "update_layout", "(", "\n", "font", "=", "dict", "(", "family", "=", "\"serif\"", ")", ",", "\n", "margin", "=", "dict", "(", "l", "=", "0", ",", "r", "=", "0", ",", "t", "=", "0", ",", "b", "=", "0", ")", ",", "\n", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.plot_dimensions_graph": [[100, 171], ["list", "fig.add_trace", "fig.update_traces", "fig.update_layout", "fig.update_xaxes", "fig.update_layout", "str", "range", "fig.add_trace", "plotly.Scatter", "fig.add_shape", "int", "[].split", "plotly.Scatter", "list", "dict", "dict", "list.strip", "len", "zip", "zip", "zip", "min", "max", "dict"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "plot_dimensions_graph", "(", "\n", "fig", ":", "go", ".", "Figure", ",", "y", ":", "List", "[", "float", "]", ",", "y_labels", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "y_err", ":", "Optional", "[", "List", "[", "float", "]", "]", "=", "None", ",", "\n", "practical_maximum", ":", "Optional", "[", "float", "]", "=", "None", ",", "label", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "        ", "color", "=", "QUALITATIVE_COLORS", "[", "0", "]", "\n", "rgb_ints", "=", "[", "str", "(", "int", "(", "x", ".", "strip", "(", "\" \"", ")", ")", ")", "for", "x", "in", "color", "[", "4", ":", "]", "[", ":", "-", "1", "]", ".", "split", "(", "\",\"", ")", "]", "\n", "new_color", "=", "f\"rgba({','.join(rgb_ints + ['0.2'])})\"", "\n", "\n", "# Error range", "\n", "x", "=", "list", "(", "range", "(", "1", ",", "len", "(", "y", ")", "+", "1", ")", ")", "\n", "if", "y_err", ":", "\n", "            ", "y_upper", "=", "[", "m", "+", "e", "for", "m", ",", "e", "in", "zip", "(", "y", ",", "y_err", ")", "]", "\n", "y_lower", "=", "[", "m", "-", "e", "for", "m", ",", "e", "in", "zip", "(", "y", ",", "y_err", ")", "]", "\n", "fig", ".", "add_trace", "(", "go", ".", "Scatter", "(", "\n", "x", "=", "x", "+", "x", "[", ":", ":", "-", "1", "]", ",", "\n", "y", "=", "y_upper", "+", "y_lower", "[", ":", ":", "-", "1", "]", ",", "\n", "fill", "=", "'toself'", ",", "\n", "fillcolor", "=", "new_color", ",", "\n", "line_color", "=", "'rgba(255,255,255,0)'", ",", "\n", "showlegend", "=", "False", ",", "\n", "name", "=", "label", ",", "\n", "hoverinfo", "=", "'skip'", ",", "\n", "legendgroup", "=", "label", ",", "\n", ")", ")", "\n", "\n", "", "custom_data", ":", "Optional", "[", "List", "[", "Any", "]", "]", "=", "None", "\n", "hover_template", "=", "None", "\n", "if", "y_labels", ":", "\n", "            ", "if", "y_err", ":", "\n", "                ", "custom_data", "=", "list", "(", "zip", "(", "y_labels", ",", "y_err", ")", ")", "\n", "hover_template", "=", "'<b>%{y:.3f} +- %{customdata[1]:.3f}</b><br>%{customdata[0]}'", "\n", "", "else", ":", "\n", "                ", "custom_data", "=", "y_labels", "\n", "hover_template", "=", "'<b>%{y:.3f}</b><br>%{customdata}'", "\n", "\n", "# Mean line", "\n", "", "", "fig", ".", "add_trace", "(", "go", ".", "Scatter", "(", "\n", "x", "=", "x", ",", "y", "=", "y", ",", "\n", "customdata", "=", "custom_data", ",", "\n", "hovertemplate", "=", "hover_template", ",", "\n", "line_color", "=", "color", ",", "\n", "showlegend", "=", "True", ",", "\n", "name", "=", "label", ",", "\n", "legendgroup", "=", "label", ",", "\n", ")", ")", "\n", "fig", ".", "update_traces", "(", "mode", "=", "'lines'", ")", "\n", "\n", "# Max MI", "\n", "if", "practical_maximum", ":", "\n", "            ", "fig", ".", "add_shape", "(", "\n", "# Line Horizontal", "\n", "type", "=", "\"line\"", ",", "\n", "x0", "=", "min", "(", "x", ")", ",", "\n", "y0", "=", "practical_maximum", ",", "\n", "x1", "=", "max", "(", "x", ")", ",", "\n", "y1", "=", "practical_maximum", ",", "\n", "line", "=", "dict", "(", "\n", "color", "=", "\"LightSeaGreen\"", ",", "\n", "dash", "=", "\"dash\"", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "", "fig", ".", "update_layout", "(", "margin", "=", "dict", "(", "l", "=", "20", ",", "r", "=", "20", ",", "t", "=", "20", ",", "b", "=", "20", ")", ")", "# noqa", "\n", "fig", ".", "update_xaxes", "(", "title_text", "=", "\"Dimensions Selected\"", ",", "tickvals", "=", "x", ")", "\n", "\n", "# Make serif", "\n", "fig", ".", "update_layout", "(", "font", "=", "dict", "(", "\n", "family", "=", "\"serif\"", ",", "\n", ")", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.add_to_plot": [[172, 225], ["list", "fig.add_trace", "fig.update_traces", "fig.update_layout", "str", "range", "fig.add_trace", "plotly.Scatter", "int", "[].split", "list", "plotly.Scatter", "dict", "len", "list.strip", "zip", "len", "zip", "zip"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_to_plot", "(", "\n", "fig", ":", "go", ".", "Figure", ",", "y", ":", "List", "[", "float", "]", ",", "y_labels", ":", "Optional", "[", "List", "[", "str", "]", "]", "=", "None", ",", "y_err", ":", "Optional", "[", "List", "[", "float", "]", "]", "=", "None", ",", "\n", "practical_maximum", ":", "Optional", "[", "float", "]", "=", "None", ",", "label", ":", "Optional", "[", "str", "]", "=", "None", ",", "index", ":", "int", "=", "0", ")", ":", "\n", "        ", "color", "=", "QUALITATIVE_COLORS", "[", "index", "%", "len", "(", "QUALITATIVE_COLORS", ")", "]", "\n", "rgb_ints", "=", "[", "str", "(", "int", "(", "x", ".", "strip", "(", "\" \"", ")", ")", ")", "for", "x", "in", "color", "[", "4", ":", "]", "[", ":", "-", "1", "]", ".", "split", "(", "\",\"", ")", "]", "\n", "new_color", "=", "f\"rgba({','.join(rgb_ints + ['0.2'])})\"", "\n", "\n", "custom_data", ":", "Optional", "[", "List", "[", "Any", "]", "]", "=", "None", "\n", "hover_template", "=", "None", "\n", "if", "y_labels", ":", "\n", "            ", "if", "y_err", ":", "\n", "                ", "custom_data", ":", "List", "[", "Any", "]", "=", "list", "(", "zip", "(", "y_labels", ",", "y_err", ")", ")", "\n", "hover_template", "=", "'<b>%{y:.3f} +- %{customdata[1]:.3f}</b><br>%{customdata[0]}'", "\n", "", "else", ":", "\n", "                ", "custom_data", "=", "y_labels", "\n", "hover_template", "=", "'<b>%{y:.3f}</b><br>%{customdata}'", "\n", "\n", "# Error range", "\n", "", "", "x", "=", "list", "(", "range", "(", "1", ",", "len", "(", "y", ")", "+", "1", ")", ")", "\n", "if", "y_err", ":", "\n", "            ", "y_upper", "=", "[", "m", "+", "e", "for", "m", ",", "e", "in", "zip", "(", "y", ",", "y_err", ")", "]", "\n", "y_lower", "=", "[", "m", "-", "e", "for", "m", ",", "e", "in", "zip", "(", "y", ",", "y_err", ")", "]", "\n", "fig", ".", "add_trace", "(", "go", ".", "Scatter", "(", "\n", "x", "=", "x", "+", "x", "[", ":", ":", "-", "1", "]", ",", "\n", "y", "=", "y_upper", "+", "y_lower", "[", ":", ":", "-", "1", "]", ",", "\n", "fill", "=", "'toself'", ",", "\n", "fillcolor", "=", "new_color", ",", "\n", "line_color", "=", "'rgba(255,255,255,0)'", ",", "\n", "showlegend", "=", "False", ",", "\n", "name", "=", "label", ",", "\n", "hoverinfo", "=", "'skip'", ",", "\n", "legendgroup", "=", "label", ",", "\n", ")", ")", "\n", "\n", "# Mean line", "\n", "", "fig", ".", "add_trace", "(", "go", ".", "Scatter", "(", "\n", "x", "=", "x", ",", "y", "=", "y", ",", "\n", "customdata", "=", "custom_data", ",", "\n", "hovertemplate", "=", "hover_template", ",", "\n", "line_color", "=", "color", ",", "\n", "showlegend", "=", "True", ",", "\n", "name", "=", "label", ",", "\n", "legendgroup", "=", "label", ",", "\n", ")", ")", "\n", "fig", ".", "update_traces", "(", "mode", "=", "'lines'", ")", "\n", "\n", "# Make serif", "\n", "fig", ".", "update_layout", "(", "font", "=", "dict", "(", "\n", "family", "=", "\"serif\"", ",", "\n", ")", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.plot_mi": [[226, 252], ["plotly.Figure", "graph_writer.GraphWriter.plot_dimensions_graph", "graph_writer.GraphWriter.add_to_plot", "graph_writer.GraphWriter.add_to_plot", "graph_writer.GraphWriter.add_to_plot", "str"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.plot_dimensions_graph", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.add_to_plot", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.add_to_plot", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.add_to_plot"], ["", "def", "plot_mi", "(", "self", ",", "theoretical_maximum", ":", "float", ",", "practical_maximum", ":", "Optional", "[", "float", "]", "=", "None", ")", ":", "\n", "# Construct Y-value arrays", "\n", "        ", "y", "=", "[", "x", "[", "\"mi\"", "]", ".", "nominal_value", "for", "x", "in", "self", ".", "_selected_results", "]", "\n", "y_err", "=", "[", "x", "[", "\"mi\"", "]", ".", "std_dev", "for", "x", "in", "self", ".", "_selected_results", "]", "\n", "y_labels", "=", "[", "\", \"", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "x", "[", "\"candidate_dim_pool\"", "]", "]", ")", "for", "x", "in", "self", ".", "_selected_results", "]", "\n", "\n", "fig", "=", "go", ".", "Figure", "(", ")", "\n", "fig", "=", "GraphWriter", ".", "plot_dimensions_graph", "(", "\n", "fig", "=", "fig", ",", "y", "=", "y", ",", "y_err", "=", "y_err", ",", "y_labels", "=", "y_labels", ",", "practical_maximum", "=", "practical_maximum", ",", "\n", "label", "=", "\"Mutual Information\"", ")", "\n", "\n", "# Add entropy line", "\n", "y_entropy", "=", "[", "x", "[", "\"entropy\"", "]", "for", "x", "in", "self", ".", "_selected_results", "]", "\n", "fig", "=", "GraphWriter", ".", "add_to_plot", "(", "\n", "fig", "=", "fig", ",", "y", "=", "y_entropy", ",", "y_labels", "=", "y_labels", ",", "label", "=", "\"Entropy\"", ")", "\n", "\n", "# Add conditional entropy line", "\n", "y_entropy", "=", "[", "x", "[", "\"conditional_entropy\"", "]", ".", "nominal_value", "for", "x", "in", "self", ".", "_selected_results", "]", "\n", "y_err_entropy", "=", "[", "x", "[", "\"conditional_entropy\"", "]", ".", "std_dev", "for", "x", "in", "self", ".", "_selected_results", "]", "\n", "fig", "=", "GraphWriter", ".", "add_to_plot", "(", "\n", "fig", "=", "fig", ",", "y", "=", "y_entropy", ",", "y_err", "=", "y_err_entropy", ",", "y_labels", "=", "y_labels", ",", "label", "=", "\"Conditional Entropy\"", ")", "\n", "\n", "# Setup axes and labels", "\n", "fig", ".", "update_yaxes", "(", "title_text", "=", "\"Mutual Information\"", ",", "range", "=", "[", "0.0", ",", "theoretical_maximum", "+", "0.05", "]", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.plot_normalized_mi": [[253, 268], ["plotly.Figure", "graph_writer.GraphWriter.plot_dimensions_graph", "graph_writer.GraphWriter.plot_dimensions_graph", "str"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.plot_dimensions_graph", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.plot_dimensions_graph"], ["", "def", "plot_normalized_mi", "(", "self", ",", "theoretical_maximum", ":", "float", ",", "practical_maximum", ":", "Optional", "[", "float", "]", "=", "None", ")", ":", "\n", "# Construct Y-value arrays", "\n", "        ", "y", "=", "[", "x", "[", "\"mi\"", "]", ".", "nominal_value", "/", "theoretical_maximum", "for", "x", "in", "self", ".", "_selected_results", "]", "\n", "y_err", "=", "[", "x", "[", "\"mi\"", "]", ".", "std_dev", "/", "theoretical_maximum", "for", "x", "in", "self", ".", "_selected_results", "]", "\n", "y_labels", "=", "[", "\", \"", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "x", "[", "\"candidate_dim_pool\"", "]", "]", ")", "for", "x", "in", "self", ".", "_selected_results", "]", "\n", "\n", "fig", "=", "go", ".", "Figure", "(", ")", "\n", "fig", "=", "GraphWriter", ".", "plot_dimensions_graph", "(", "\n", "fig", "=", "fig", ",", "y", "=", "y", ",", "y_err", "=", "y_err", ",", "y_labels", "=", "y_labels", ",", "practical_maximum", "=", "practical_maximum", ",", "\n", "label", "=", "\"Normalized Mutual Information\"", ")", "\n", "\n", "# Setup axes and labels", "\n", "fig", ".", "update_yaxes", "(", "title_text", "=", "\"Normalized Mutual Information\"", ",", "range", "=", "[", "0.0", ",", "1.0", "]", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.plot_accuracy": [[269, 287], ["plotly.Figure", "graph_writer.GraphWriter.plot_dimensions_graph", "graph_writer.GraphWriter.add_to_plot", "graph_writer.GraphWriter.add_to_plot", "str"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.plot_dimensions_graph", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.add_to_plot", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.add_to_plot"], ["", "def", "plot_accuracy", "(", "self", ",", "practical_maximum", ":", "Optional", "[", "float", "]", "=", "None", ")", ":", "\n", "# Construct Y-value arrays", "\n", "        ", "y", "=", "[", "x", "[", "\"model_accuracy\"", "]", "for", "x", "in", "self", ".", "_selected_results", "]", "\n", "y_labels", "=", "[", "\", \"", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "x", "[", "\"candidate_dim_pool\"", "]", "]", ")", "for", "x", "in", "self", ".", "_selected_results", "]", "\n", "\n", "fig", "=", "go", ".", "Figure", "(", ")", "\n", "fig", "=", "GraphWriter", ".", "plot_dimensions_graph", "(", "\n", "fig", "=", "fig", ",", "y", "=", "y", ",", "y_labels", "=", "y_labels", ",", "practical_maximum", "=", "practical_maximum", ",", "label", "=", "\"Model\"", ")", "\n", "\n", "# Majority class baseline", "\n", "y_baseline", "=", "[", "x", "[", "\"baseline_accuracy\"", "]", "for", "x", "in", "self", ".", "_selected_results", "]", "\n", "fig", "=", "GraphWriter", ".", "add_to_plot", "(", "\n", "fig", "=", "fig", ",", "y", "=", "y_baseline", ",", "y_labels", "=", "y_labels", ",", "label", "=", "\"Majority-class Baseline\"", ")", "\n", "\n", "# Setup y-axis", "\n", "fig", ".", "update_yaxes", "(", "title_text", "=", "\"Accuracy\"", ",", "range", "=", "[", "0.0", ",", "1.0", "]", ")", "\n", "\n", "return", "fig", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.parser.parse_unimorph_features": [[15, 57], ["x.startswith", "x.split", "sorted", "Exception"], "function", ["None"], ["def", "parse_unimorph_features", "(", "features", ":", "List", "[", "str", "]", ")", "->", "Dict", "[", "str", ",", "str", "]", ":", "\n", "    ", "final_attrs", ":", "Dict", "[", "str", ",", "str", "]", "=", "{", "}", "\n", "for", "x", "in", "features", ":", "\n", "        ", "if", "\"/\"", "in", "x", ":", "\n", "# Drop disjunctions.", "\n", "            ", "continue", "\n", "", "elif", "x", "==", "\"{CMPR}\"", ":", "\n", "# I am assuming they meant to type \"CMPR\" and not \"{CMPR}\"", "\n", "            ", "final_attrs", "[", "\"Comparison\"", "]", "=", "\"CMPR\"", "\n", "", "elif", "x", "==", "\"PST+PRF\"", ":", "\n", "# PST+PRF is a common feature of Latin, Romanian, and Turkish annotations.", "\n", "# I assign it to Tense due aspect having already been assigned to something different in Turkish,", "\n", "# and since \"PST\" comes first.", "\n", "            ", "final_attrs", "[", "\"Tense\"", "]", "=", "x", "\n", "", "elif", "x", ".", "startswith", "(", "\"ARG\"", ")", ":", "\n", "# Argument marking (e.g. in Basque) is labelled with ARGX where X is the actual feature.", "\n", "            ", "v", "=", "x", "[", "3", ":", "]", "\n", "final_attrs", "[", "_UNIMORPH_VALUES_ATTRIBUTE", "[", "v", "]", "]", "=", "v", "\n", "", "elif", "x", "==", "\"NDEF\"", ":", "\n", "            ", "final_attrs", "[", "\"Definiteness\"", "]", "=", "\"INDF\"", "\n", "", "elif", "\"+\"", "in", "x", ":", "\n", "# We handle conjunctive statements by creating a new value for them.", "\n", "# We canonicalize the feature by sorting the composing conjuncts alphabetically.", "\n", "            ", "values", "=", "x", ".", "split", "(", "\"+\"", ")", "\n", "attr", "=", "_UNIMORPH_VALUES_ATTRIBUTE", "[", "values", "[", "0", "]", "]", "\n", "for", "v", "in", "values", ":", "\n", "                ", "if", "attr", "!=", "_UNIMORPH_VALUES_ATTRIBUTE", "[", "v", "]", ":", "\n", "                    ", "raise", "Exception", "(", "\"Conjunctive values don't all belong to the same dimension.\"", ")", "\n", "\n", "", "", "final_attrs", "[", "attr", "]", "=", "\"+\"", ".", "join", "(", "sorted", "(", "values", ")", ")", "\n", "", "elif", "\"PSS\"", "in", "x", ":", "\n", "            ", "final_attrs", "[", "\"Possession\"", "]", "=", "x", "\n", "", "elif", "\"LGSPEC\"", "in", "x", ":", "\n", "# We discard language-specific features as this is not a canonical unimorph dimension", "\n", "            ", "continue", "\n", "", "else", ":", "\n", "            ", "if", "x", "not", "in", "_UNIMORPH_VALUES_ATTRIBUTE", ":", "\n", "                ", "continue", "\n", "\n", "", "final_attrs", "[", "_UNIMORPH_VALUES_ATTRIBUTE", "[", "x", "]", "]", "=", "x", "\n", "\n", "", "", "return", "final_attrs", "\n", "", ""]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.__init__": [[6, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "word", ":", "str", ",", "embedding", ":", "np", ".", "ndarray", ",", "count", ":", "int", ",", "attributes", ":", "Dict", "[", "str", ",", "str", "]", ")", "->", "None", ":", "\n", "        ", "self", ".", "_word", "=", "word", "\n", "self", ".", "_embedding", "=", "embedding", "\n", "self", ".", "_count", "=", "count", "\n", "self", ".", "_attributes", "=", "attributes", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_word": [[12, 14], ["None"], "methods", ["None"], ["", "def", "get_word", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "_word", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_embedding": [[15, 17], ["None"], "methods", ["None"], ["", "def", "get_embedding", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_count": [[18, 20], ["None"], "methods", ["None"], ["", "def", "get_count", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_count", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.has_attribute": [[21, 23], ["None"], "methods", ["None"], ["", "def", "has_attribute", "(", "self", ",", "attr", ")", ":", "\n", "        ", "return", "attr", "in", "self", ".", "_attributes", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_attribute": [[24, 26], ["None"], "methods", ["None"], ["", "def", "get_attribute", "(", "self", ",", "attr", ")", ":", "\n", "        ", "return", "self", ".", "_attributes", "[", "attr", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_attributes": [[27, 29], ["list", "word.Word._attributes.keys"], "methods", ["None"], ["", "def", "get_attributes", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_attributes", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.__repr__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "_word", ",", "self", ".", "_attributes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.json.ResultsEncoder.default": [[9, 18], ["isinstance", "json.JSONEncoder.default"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.json.ResultsEncoder.default"], ["def", "default", "(", "self", ",", "obj", ")", ":", "\n", "        ", "if", "isinstance", "(", "obj", ",", "core", ".", "AffineScalarFunc", ")", ":", "\n", "            ", "return", "{", "\n", "\"type\"", ":", "\"ufloat\"", ",", "\n", "\"nominal_value\"", ":", "obj", ".", "nominal_value", ",", "\n", "\"std_dev\"", ":", "obj", ".", "std_dev", "\n", "}", "\n", "\n", "", "return", "json", ".", "JSONEncoder", ".", "default", "(", "self", ",", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.json.ResultsDecoder.__init__": [[24, 26], ["json.JSONDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.DummyEmbedder.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "json", ".", "JSONDecoder", ".", "__init__", "(", "self", ",", "object_hook", "=", "self", ".", "object_hook", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.json.ResultsDecoder.object_hook": [[27, 36], ["uncertainties.ufloat"], "methods", ["None"], ["", "def", "object_hook", "(", "self", ",", "obj", ")", ":", "\n", "        ", "if", "\"_type\"", "not", "in", "obj", ":", "\n", "            ", "return", "obj", "\n", "\n", "", "type", "=", "obj", "[", "\"_type\"", "]", "\n", "if", "type", "==", "\"ufloat\"", ":", "\n", "            ", "return", "ufloat", "(", "obj", "[", "\"nominal_value\"", "]", ",", "obj", "[", "\"std_dev\"", "]", ")", "\n", "\n", "", "return", "obj", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.EmbeddingDistribution.__init__": [[22, 26], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.DummyEmbedder.__init__"], ["def", "__init__", "(", "self", ",", "dimensionality", ":", "int", ")", ":", "\n", "        ", "self", ".", "_dimensionality", "=", "dimensionality", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.EmbeddingDistribution.sample": [[27, 29], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "num_samples", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.EmbeddingDistribution.log_prob": [[30, 32], ["None"], "methods", ["None"], ["", "def", "log_prob", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.EmbeddingDistribution.get_dimensionality": [[33, 35], ["None"], "methods", ["None"], ["", "def", "get_dimensionality", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_dimensionality", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.__init__": [[38, 44], ["zip", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.distributions.Categorical", "torch.tensor().double().to", "torch.tensor().double().to", "torch.tensor().double().to", "torch.tensor().double().to", "torch.tensor().double().to", "torch.tensor().double().to", "torch.tensor().double().to", "torch.tensor().double().to", "torch.tensor().double().to", "enumerate", "torch.tensor().double", "torch.tensor().double", "torch.tensor().double", "torch.tensor().double", "torch.tensor().double", "torch.tensor().double", "torch.tensor().double", "torch.tensor().double", "torch.tensor().double", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value_probs", ":", "List", "[", "Tuple", "[", "str", ",", "float", "]", "]", ",", "device", ":", "PyTorchDevice", "=", "\"cpu\"", ")", ":", "\n", "        ", "self", ".", "_values", ",", "self", ".", "_probs", "=", "zip", "(", "*", "value_probs", ")", "\n", "self", ".", "_distribution", "=", "torch", ".", "distributions", ".", "Categorical", "(", "torch", ".", "tensor", "(", "self", ".", "_probs", ")", ".", "double", "(", ")", ".", "to", "(", "device", ")", ")", "\n", "self", ".", "_device", "=", "device", "\n", "\n", "self", ".", "_values_dict", "=", "{", "val", ":", "idx", "for", "idx", ",", "val", "in", "enumerate", "(", "self", ".", "_values", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.create_uniform": [[45, 52], ["cls", "len", "list", "zip", "float", "len"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "create_uniform", "(", "cls", ",", "values", ":", "List", "[", "str", "]", ",", "device", ":", "PyTorchDevice", "=", "\"cpu\"", ")", ":", "\n", "        ", "\"\"\"\n        Creates a attribute-value model that assigns uniform probability to each possibility.\n        \"\"\"", "\n", "probs", "=", "[", "1.0", "/", "float", "(", "len", "(", "values", ")", ")", "]", "*", "len", "(", "values", ")", "\n", "return", "cls", "(", "list", "(", "zip", "(", "values", ",", "probs", ")", ")", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.from_cache_entries": [[53, 69], ["cls", "values.append", "probs.append", "math.isclose", "Exception", "list", "cache_entry.get_value", "cache_entry.get_sampling_prob", "sum", "zip"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCacheEntry.get_value", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCacheEntry.get_sampling_prob"], ["", "@", "classmethod", "\n", "def", "from_cache_entries", "(", "\n", "cls", ",", "cache_entries", ":", "Iterable", "[", "AttributeValueGaussianCacheEntry", "]", ",", "device", ":", "PyTorchDevice", "=", "\"cpu\"", ")", ":", "\n", "        ", "\"\"\"\n        Creates a attribute-value model that uses the probabilities appearing in unimorph data.\n        \"\"\"", "\n", "values", "=", "[", "]", "\n", "probs", "=", "[", "]", "\n", "for", "cache_entry", "in", "cache_entries", ":", "\n", "            ", "values", ".", "append", "(", "cache_entry", ".", "get_value", "(", ")", ")", "\n", "probs", ".", "append", "(", "cache_entry", ".", "get_sampling_prob", "(", "as_torch", "=", "False", ")", ")", "\n", "\n", "", "if", "not", "isclose", "(", "sum", "(", "probs", ")", ",", "1.0", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Attribute-value model probabilities do not add up to one.\"", ")", "\n", "\n", "", "return", "cls", "(", "list", "(", "zip", "(", "values", ",", "probs", ")", ")", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.get_num_possibilities": [[70, 72], ["len"], "methods", ["None"], ["", "def", "get_num_possibilities", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.get_probs": [[73, 75], ["list"], "methods", ["None"], ["", "def", "get_probs", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "return", "list", "(", "self", ".", "_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.sample": [[76, 80], ["base.ValueModel._distribution.sample", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.sample"], ["", "def", "sample", "(", "self", ",", "num_samples", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "samples", "=", "self", ".", "_distribution", ".", "sample", "(", "sample_shape", "=", "torch", ".", "Size", "(", "[", "num_samples", "]", ")", ")", "\n", "assert", "samples", ".", "shape", "==", "(", "num_samples", ",", ")", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.log_prob": [[81, 85], ["base.ValueModel._distribution.log_prob"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.log_prob"], ["", "def", "log_prob", "(", "self", ",", "sample", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "probs", "=", "self", ".", "_distribution", ".", "log_prob", "(", "sample", ")", "\n", "assert", "probs", ".", "shape", "==", "(", "sample", ".", "shape", "[", "0", "]", ",", ")", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.entropy": [[86, 88], ["base.ValueModel._distribution.entropy"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.entropy"], ["", "def", "entropy", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "_distribution", ".", "entropy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.get_value_ids": [[89, 92], ["torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "get_value_ids", "(", "self", ",", "values", ":", "List", "[", "str", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "value_indices", "=", "[", "self", ".", "_values_dict", "[", "v", "]", "for", "v", "in", "values", "]", "\n", "return", "torch", ".", "tensor", "(", "value_indices", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.get_values": [[93, 95], ["list"], "methods", ["None"], ["", "def", "get_values", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "list", "(", "self", ".", "_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.get_values_from_ids": [[96, 98], ["None"], "methods", ["None"], ["", "def", "get_values_from_ids", "(", "self", ",", "values_idx", ":", "List", "[", "int", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "[", "self", ".", "_values", "[", "i", "]", "for", "i", "in", "values_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.EmbeddingModel.__init__": [[101, 106], ["embedding_distributions[].get_dimensionality"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.DummyEmbedder.get_dimensionality"], ["    ", "def", "__init__", "(", "self", ",", "embedding_distributions", ":", "List", "[", "EmbeddingDistribution", "]", ",", "\n", "device", ":", "Optional", "[", "PyTorchDevice", "]", "=", "\"cpu\"", ")", ":", "\n", "        ", "self", ".", "_device", "=", "device", "\n", "self", ".", "_embedding_size", "=", "embedding_distributions", "[", "0", "]", ".", "get_dimensionality", "(", ")", "\n", "self", ".", "_embedding_dists", "=", "embedding_distributions", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.EmbeddingModel.get_dimensionality": [[107, 109], ["None"], "methods", ["None"], ["", "def", "get_dimensionality", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_embedding_size", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.EmbeddingModel.sample": [[110, 128], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "mask.unsqueeze.unsqueeze.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "x.sample", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "attribute_values.unsqueeze().expand", "len", "len", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "attribute_values.unsqueeze", "torch.arange().reshape", "torch.arange().reshape", "torch.arange().reshape", "torch.arange().reshape", "torch.arange().reshape", "torch.arange().reshape", "torch.arange().reshape", "torch.arange().reshape", "torch.arange().reshape", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.sample"], ["", "def", "sample", "(", "self", ",", "attribute_values", ")", ":", "\n", "        ", "num_samples", "=", "attribute_values", ".", "shape", "[", "0", "]", "\n", "\n", "# Sample from all embedding distributions", "\n", "dist_results", "=", "[", "x", ".", "sample", "(", "num_samples", "=", "num_samples", ")", "for", "x", "in", "self", ".", "_embedding_dists", "]", "\n", "\n", "dist_results_stacked", "=", "torch", ".", "stack", "(", "dist_results", ",", "dim", "=", "2", ")", "\n", "assert", "dist_results_stacked", ".", "shape", "==", "(", "num_samples", ",", "self", ".", "_embedding_size", ",", "len", "(", "self", ".", "_embedding_dists", ")", ")", "\n", "\n", "# Select correct sampled embedding depending on which value it was sampled from", "\n", "mask", "=", "torch", ".", "arange", "(", "0", ",", "len", "(", "self", ".", "_embedding_dists", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "\n", "num_samples", ",", "-", "1", ")", ".", "to", "(", "self", ".", "_device", ")", "==", "attribute_values", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "len", "(", "self", ".", "_embedding_dists", ")", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "correct_samples", "=", "torch", ".", "sum", "(", "dist_results_stacked", "*", "mask", ",", "dim", "=", "2", ")", "\n", "assert", "correct_samples", ".", "shape", "==", "(", "num_samples", ",", "self", ".", "_embedding_size", ")", "\n", "\n", "return", "correct_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.EmbeddingModel.log_prob": [[129, 142], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "x.log_prob", "len"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.log_prob"], ["", "def", "log_prob", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"\n        Returns probabilities of samples according to ALL embedding distributions,\n        aka. forall v in calV   p(h_C|v,a)  # noqa\n        \"\"\"", "\n", "num_samples", "=", "samples", ".", "shape", "[", "0", "]", "\n", "\n", "# Compute sample probs according to each distribution", "\n", "log_probs", "=", "[", "x", ".", "log_prob", "(", "samples", ")", "for", "x", "in", "self", ".", "_embedding_dists", "]", "\n", "log_probs", "=", "torch", ".", "stack", "(", "log_probs", ",", "dim", "=", "1", ")", "\n", "assert", "log_probs", ".", "shape", "==", "(", "num_samples", ",", "len", "(", "self", ".", "_embedding_dists", ")", ")", "\n", "\n", "return", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.EmbeddingModel.log_prob_conditional": [[143, 157], ["base.EmbeddingModel.log_prob", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "torch.arange().reshape().expand().to", "attribute_values.unsqueeze().expand", "len", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "torch.arange().reshape().expand", "attribute_values.unsqueeze", "torch.arange().reshape", "torch.arange().reshape", "torch.arange().reshape", "torch.arange().reshape", "torch.arange().reshape", "torch.arange().reshape", "torch.arange().reshape", "torch.arange().reshape", "torch.arange().reshape", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.log_prob"], ["", "def", "log_prob_conditional", "(", "self", ",", "samples", ",", "attribute_values", ")", ":", "\n", "        ", "\"\"\"\n        Returns probabilities of samples conditioned on the values in attribute_values, aka. p(h_C|v,a)\n        \"\"\"", "\n", "num_samples", "=", "samples", ".", "shape", "[", "0", "]", "\n", "log_probs", "=", "self", ".", "log_prob", "(", "samples", ")", "\n", "\n", "# Select correct sample log prob according to which value it was sampled from", "\n", "mask", "=", "torch", ".", "arange", "(", "0", ",", "len", "(", "self", ".", "_embedding_dists", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "\n", "num_samples", ",", "-", "1", ")", ".", "to", "(", "self", ".", "_device", ")", "==", "attribute_values", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "len", "(", "self", ".", "_embedding_dists", ")", ")", "\n", "log_probs", "=", "torch", ".", "sum", "(", "mask", "*", "log_probs", ",", "dim", "=", "1", ")", "\n", "assert", "log_probs", ".", "shape", "==", "(", "num_samples", ",", ")", "\n", "\n", "return", "log_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.__init__": [[160, 165], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "embedding_model", ":", "EmbeddingModel", ",", "value_model", ":", "ValueModel", ",", "\n", "device", ":", "PyTorchDevice", "=", "\"cpu\"", ")", ":", "\n", "        ", "self", ".", "_embedding_model", "=", "embedding_model", "\n", "self", ".", "_value_model", "=", "value_model", "\n", "self", ".", "_device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.get_device": [[166, 168], ["None"], "methods", ["None"], ["", "def", "get_device", "(", "self", ")", "->", "PyTorchDevice", ":", "\n", "        ", "return", "self", ".", "_device", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.get_pred_true_arrays": [[169, 192], ["list", "eval_dataset.get_words_with_filter_from_cache", "eval_dataset.get_values_with_filter_from_cache", "[].to", "base.ProbingModel.log_prob_all_values", "base.ProbingModel.argmax", "eval_dataset.get_valid_attributes", "Exception", "x.has_attribute", "eval_dataset.get_embeddings_with_filter_from_cache"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_words_with_filter_from_cache", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_values_with_filter_from_cache", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.log_prob_all_values", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_valid_attributes", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.has_attribute", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_embeddings_with_filter_from_cache"], ["", "def", "get_pred_true_arrays", "(", "self", ",", "attribute", ":", "str", ",", "select_dimensions", ":", "Iterable", "[", "int", "]", ",", "\n", "eval_dataset", ":", "Reader", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "List", "[", "Word", "]", "]", ":", "\n", "        ", "if", "attribute", "not", "in", "eval_dataset", ".", "get_valid_attributes", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"The attribute '{}' does not exist in the evaluation dataset.\"", ".", "format", "(", "attribute", ")", ")", "\n", "\n", "", "select_dimensions", "=", "list", "(", "select_dimensions", ")", "\n", "\n", "# Select words that have the attribute specified attribute", "\n", "cache_key", "=", "f\"words_with_{attribute}\"", "\n", "cache_key_filter", "=", "lambda", "x", ":", "x", ".", "has_attribute", "(", "attribute", ")", "# noqa", "\n", "\n", "words", "=", "eval_dataset", ".", "get_words_with_filter_from_cache", "(", "\n", "cache_key", ",", "cache_key_filter", ")", "\n", "\n", "values_tensor", "=", "eval_dataset", ".", "get_values_with_filter_from_cache", "(", "\n", "attribute", ",", "cache_key", ",", "self", ".", "_value_model", ",", "cache_key_filter", ")", "\n", "embeddings_tensor", "=", "eval_dataset", ".", "get_embeddings_with_filter_from_cache", "(", "\n", "cache_key", ",", "cache_key_filter", ")", "[", ":", ",", "select_dimensions", "]", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "conditional_probs", "=", "self", ".", "log_prob_all_values", "(", "embeddings_tensor", ")", "\n", "predicted_values", "=", "conditional_probs", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "return", "predicted_values", ",", "values_tensor", ",", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.get_log_likelihood": [[193, 218], ["list", "eval_dataset.get_values_with_filter_from_cache", "[].to", "base.ProbingModel.log_prob_conditional", "base.ProbingModel.log_prob", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "eval_dataset.get_valid_attributes", "Exception", "x.has_attribute", "eval_dataset.get_embeddings_with_filter_from_cache"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_values_with_filter_from_cache", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.log_prob_conditional", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.log_prob", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_valid_attributes", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.has_attribute", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_embeddings_with_filter_from_cache"], ["", "def", "get_log_likelihood", "(", "self", ",", "attribute", ":", "str", ",", "select_dimensions", ":", "Iterable", "[", "int", "]", ",", "\n", "eval_dataset", ":", "Reader", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Returns the average log likelihood.\n        \"\"\"", "\n", "if", "attribute", "not", "in", "eval_dataset", ".", "get_valid_attributes", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"The attribute '{}' does not exist in the evaluation dataset.\"", ".", "format", "(", "attribute", ")", ")", "\n", "\n", "", "select_dimensions", "=", "list", "(", "select_dimensions", ")", "\n", "\n", "# Select words that have the attribute specified attribute", "\n", "cache_key", "=", "f\"words_with_{attribute}\"", "\n", "cache_key_filter", "=", "lambda", "x", ":", "x", ".", "has_attribute", "(", "attribute", ")", "# noqa", "\n", "\n", "values_tensor", "=", "eval_dataset", ".", "get_values_with_filter_from_cache", "(", "\n", "attribute", ",", "cache_key", ",", "self", ".", "_value_model", ",", "cache_key_filter", ")", "\n", "embeddings_tensor", "=", "eval_dataset", ".", "get_embeddings_with_filter_from_cache", "(", "\n", "cache_key", ",", "cache_key_filter", ")", "[", ":", ",", "select_dimensions", "]", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "# Compute probabilities", "\n", "log_prob", "=", "self", ".", "log_prob_conditional", "(", "embeddings_tensor", ",", "values_tensor", ")", "\n", "log_prob_normalizer", "=", "self", ".", "log_prob", "(", "embeddings_tensor", ")", "\n", "\n", "log_prob_avg", "=", "torch", ".", "mean", "(", "log_prob", "-", "log_prob_normalizer", ")", "\n", "return", "log_prob_avg", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.get_accuracy": [[219, 223], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_accuracy", "(", "predicted_values", ":", "torch", ".", "Tensor", ",", "values_tensor", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "num_items", "=", "predicted_values", ".", "shape", "[", "0", "]", "\n", "return", "(", "predicted_values", "==", "values_tensor", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "/", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.get_value_model": [[224, 226], ["None"], "methods", ["None"], ["", "def", "get_value_model", "(", "self", ")", "->", "ValueModel", ":", "\n", "        ", "return", "self", ".", "_value_model", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.sample": [[227, 235], ["base.ProbingModel._value_model.sample", "base.ProbingModel._embedding_model.sample"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.sample", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.sample"], ["", "def", "sample", "(", "self", ",", "num_samples", ")", "->", "torch", ".", "Tensor", ":", "\n", "# Sample values from categorical", "\n", "        ", "samples", "=", "self", ".", "_value_model", ".", "sample", "(", "num_samples", ")", "\n", "\n", "# Using sampled categorical values, sample from correct embedding distributions", "\n", "emb_samples", "=", "self", ".", "_embedding_model", ".", "sample", "(", "samples", ")", "\n", "\n", "return", "emb_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.log_prob_all_values": [[236, 255], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "base.ProbingModel._embedding_model.log_prob", "base.ProbingModel._value_model.log_prob", "range", "base.ProbingModel._value_model.get_num_possibilities", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones().long", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.log_prob", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.log_prob", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.get_num_possibilities"], ["", "def", "log_prob_all_values", "(", "self", ",", "samples", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Returns p(h_C,v|a) for all v\n        \"\"\"", "\n", "num_samples", "=", "samples", ".", "shape", "[", "0", "]", "\n", "\n", "# Get log probs for all possibilies ways to sample the values", "\n", "val_log_probs", "=", "[", "self", ".", "_value_model", ".", "log_prob", "(", "(", "torch", ".", "ones", "(", "num_samples", ")", ".", "long", "(", ")", "*", "x", ")", ".", "to", "(", "self", ".", "_device", ")", ")", "\n", "for", "x", "in", "range", "(", "self", ".", "_value_model", ".", "get_num_possibilities", "(", ")", ")", "]", "\n", "val_log_prob", "=", "torch", ".", "stack", "(", "val_log_probs", ",", "dim", "=", "1", ")", "\n", "\n", "# Get log probs for all possible values embeddings may have been sampled from", "\n", "emb_log_prob", "=", "self", ".", "_embedding_model", ".", "log_prob", "(", "samples", ")", "\n", "assert", "emb_log_prob", ".", "shape", "==", "val_log_prob", ".", "shape", "\n", "\n", "# Numerically stable computation", "\n", "log_prob_sum", "=", "emb_log_prob", "+", "val_log_prob", "\n", "\n", "return", "log_prob_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.log_prob": [[256, 266], ["base.ProbingModel.log_prob_all_values", "base.ProbingModel.logsumexp"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.log_prob_all_values"], ["", "def", "log_prob", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"\n        Returns p(h_C|a)\n        \"\"\"", "\n", "num_samples", "=", "samples", ".", "shape", "[", "0", "]", "\n", "log_prob_sum", "=", "self", ".", "log_prob_all_values", "(", "samples", ")", "\n", "log_prob", "=", "log_prob_sum", ".", "logsumexp", "(", "dim", "=", "1", ")", "\n", "\n", "assert", "log_prob", ".", "shape", "==", "(", "num_samples", ",", ")", "\n", "return", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.log_prob_conditional": [[267, 279], ["base.ProbingModel._embedding_model.log_prob_conditional", "base.ProbingModel._value_model.log_prob"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.log_prob_conditional", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.log_prob"], ["", "def", "log_prob_conditional", "(", "self", ",", "samples", ",", "attribute_values", ")", ":", "\n", "        ", "\"\"\"\n        Return p(h_C, v|a) = p(h_C|v, a) p(v|a)\n        \"\"\"", "\n", "num_samples", "=", "samples", ".", "shape", "[", "0", "]", "\n", "\n", "emb_log_prob", "=", "self", ".", "_embedding_model", ".", "log_prob_conditional", "(", "samples", ",", "attribute_values", ")", "\n", "val_log_prob", "=", "self", ".", "_value_model", ".", "log_prob", "(", "attribute_values", ")", "\n", "log_prob", "=", "val_log_prob", "+", "emb_log_prob", "\n", "assert", "log_prob", ".", "shape", "==", "(", "num_samples", ",", ")", "\n", "\n", "return", "log_prob", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.__init__": [[17, 21], ["models.base.EmbeddingDistribution.__init__"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.DummyEmbedder.__init__"], ["def", "__init__", "(", "self", ",", "distribution", ":", "torch", ".", "distributions", ".", "MultivariateNormal", ")", ":", "\n", "        ", "self", ".", "_distribution", "=", "distribution", "\n", "dimensionality", "=", "distribution", ".", "mean", ".", "shape", "[", "0", "]", "\n", "super", "(", ")", ".", "__init__", "(", "dimensionality", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.sample": [[22, 25], ["gaussian_model.GaussianEmbeddingDistribution._distribution.sample", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.sample"], ["", "@", "overrides", "\n", "def", "sample", "(", "self", ",", "num_samples", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "_distribution", ".", "sample", "(", "sample_shape", "=", "torch", ".", "Size", "(", "[", "num_samples", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.log_prob": [[26, 29], ["gaussian_model.GaussianEmbeddingDistribution._distribution.log_prob"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.log_prob"], ["", "@", "overrides", "\n", "def", "log_prob", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "_distribution", ".", "log_prob", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingModel.train_from_cache": [[32, 35], ["None"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "train_from_cache", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingModel.from_cache_entries": [[36, 58], ["cls", "cache_entries[].get_gaussian_model_params", "list", "list", "cache_entry.get_gaussian_model_params", "mean[].double().to", "[].t().double().to", "dists.append", "range", "gaussian_model.GaussianEmbeddingDistribution", "mean[].double", "[].t().double", "torch.distributions.MultivariateNormal", "torch.distributions.MultivariateNormal", "torch.distributions.MultivariateNormal", "torch.distributions.MultivariateNormal", "[].t", "cov[].t"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCacheEntry.get_gaussian_model_params", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCacheEntry.get_gaussian_model_params"], ["", "@", "classmethod", "\n", "def", "from_cache_entries", "(", "\n", "cls", ",", "cache_entries", ":", "List", "[", "AttributeValueGaussianCacheEntry", "]", ",", "\n", "select_dimensions", ":", "Optional", "[", "Iterable", "[", "int", "]", "]", "=", "None", ",", "\n", "device", ":", "Optional", "[", "PyTorchDevice", "]", "=", "\"cpu\"", ")", ":", "\n", "        ", "if", "not", "select_dimensions", ":", "\n", "            ", "dummy_embedding", ",", "_", "=", "cache_entries", "[", "0", "]", ".", "get_gaussian_model_params", "(", ")", "\n", "select_dimensions", "=", "list", "(", "range", "(", "dummy_embedding", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "select_dimensions", "=", "list", "(", "select_dimensions", ")", "\n", "\n", "", "dists", "=", "[", "]", "\n", "for", "cache_entry", "in", "cache_entries", ":", "\n", "            ", "mean", ",", "cov", "=", "cache_entry", ".", "get_gaussian_model_params", "(", ")", "\n", "\n", "mean", "=", "mean", "[", "select_dimensions", "]", ".", "double", "(", ")", ".", "to", "(", "device", ")", "\n", "cov", "=", "cov", "[", "select_dimensions", "]", ".", "t", "(", ")", "[", "select_dimensions", "]", ".", "t", "(", ")", ".", "double", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "dists", ".", "append", "(", "GaussianEmbeddingDistribution", "(", "\n", "torch", ".", "distributions", ".", "MultivariateNormal", "(", "mean", ",", "covariance_matrix", "=", "cov", ")", ")", ")", "\n", "\n", "", "return", "cls", "(", "embedding_distributions", "=", "dists", ",", "device", "=", "device", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.estimators.base.Estimator.__init__": [[12, 15], ["base.Estimator._probing_model.get_value_model"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.get_value_model"], ["\n", "\n", "PyTorchDevice", "=", "Union", "[", "torch", ".", "device", ",", "str", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.estimators.base.Estimator.estimate_integral": [[16, 21], ["None"], "methods", ["None"], ["\n", "class", "EmbeddingDistribution", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    Denotes a general, possibly trainable, pyTorch module that represents an embedding distribution, aka.\n    p(h_C|v, a).\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.estimators.base.Estimator.estimate_conditional_entropy": [[22, 31], ["uncertainties.ufloat", "torch.no_grad", "zip", "base.Estimator._value_model.get_values", "base.Estimator._value_model.get_probs", "base.Estimator.estimate_integral"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.get_values", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.get_probs", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.estimators.fixed_samples.FixedSamplesEstimator.estimate_integral"], ["def", "__init__", "(", "self", ",", "dimensionality", ":", "int", ")", ":", "\n", "        ", "self", ".", "_dimensionality", "=", "dimensionality", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "sample", "(", "self", ",", "num_samples", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "log_prob", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.estimators.fixed_samples.FixedSamplesEstimator.__init__": [[12, 19], ["list", "estimators.base.Estimator.__init__"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.DummyEmbedder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "probing_model", ":", "ProbingModel", ",", "reader", ":", "Reader", ",", "attribute", ":", "str", ",", "\n", "select_dimensions", ":", "Iterable", "[", "int", "]", ",", "value_model", ":", "ValueModel", ")", ":", "\n", "        ", "self", ".", "_reader", "=", "reader", "\n", "self", ".", "_attribute", "=", "attribute", "\n", "self", ".", "_select_dimensions", "=", "list", "(", "select_dimensions", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "probing_model", ",", "value_model", "=", "value_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.estimators.fixed_samples.FixedSamplesEstimator.estimate_integral": [[20, 44], ["embeddings.to", "fixed_samples.FixedSamplesEstimator._probing_model.log_prob_conditional", "fixed_samples.FixedSamplesEstimator._probing_model.log_prob", "sampled_log_prob.mean().item", "uncertainties.ufloat", "fixed_samples.FixedSamplesEstimator._probing_model._value_model.get_value_ids().cpu().tolist", "fixed_samples.FixedSamplesEstimator._reader.get_embeddings_with_filter_from_cache", "torch.ones().to", "fixed_samples.FixedSamplesEstimator._probing_model.get_device", "sampled_log_prob.std().item", "math.sqrt", "x.has_attribute", "fixed_samples.FixedSamplesEstimator._probing_model.get_device", "sampled_log_prob.mean", "fixed_samples.FixedSamplesEstimator._probing_model._value_model.get_value_ids().cpu", "x.get_attribute", "torch.ones", "sampled_log_prob.std", "fixed_samples.FixedSamplesEstimator._probing_model._value_model.get_value_ids"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.log_prob_conditional", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.log_prob", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_embeddings_with_filter_from_cache", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.get_device", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.has_attribute", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.get_device", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_attribute", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.get_value_ids"], ["", "def", "estimate_integral", "(", "self", ",", "value_name", ":", "str", ")", "->", "ufloat", ":", "\n", "        ", "\"\"\"\n        Estimates the integral we need to compute\n        \"\"\"", "\n", "# Let samples be the ones we have", "\n", "value", "=", "self", ".", "_probing_model", ".", "_value_model", ".", "get_value_ids", "(", "[", "value_name", "]", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "[", "0", "]", "\n", "filter", "=", "lambda", "x", ":", "x", ".", "has_attribute", "(", "self", ".", "_attribute", ")", "and", "x", ".", "get_attribute", "(", "self", ".", "_attribute", ")", "==", "value_name", "\n", "embeddings", "=", "self", ".", "_reader", ".", "get_embeddings_with_filter_from_cache", "(", "\n", "f\"{value_name}_{value}\"", ",", "filter", ")", "[", ":", ",", "self", ".", "_select_dimensions", "]", "\n", "num_samples", "=", "embeddings", ".", "shape", "[", "0", "]", "\n", "\n", "attribute_values", "=", "value", "*", "torch", ".", "ones", "(", "num_samples", ")", ".", "to", "(", "self", ".", "_probing_model", ".", "get_device", "(", ")", ")", "\n", "model_samples", "=", "embeddings", ".", "to", "(", "self", ".", "_probing_model", ".", "get_device", "(", ")", ")", "\n", "\n", "# Compute probabilities", "\n", "log_prob", "=", "self", ".", "_probing_model", ".", "log_prob_conditional", "(", "model_samples", ",", "attribute_values", ")", "\n", "log_prob_normalizer", "=", "self", ".", "_probing_model", ".", "log_prob", "(", "model_samples", ")", "\n", "\n", "sampled_log_prob", "=", "log_prob", "-", "log_prob_normalizer", "\n", "mean_log_prob", "=", "sampled_log_prob", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "std_log_prob", "=", "sampled_log_prob", ".", "std", "(", ")", ".", "item", "(", ")", "/", "math", ".", "sqrt", "(", "num_samples", ")", "\n", "\n", "# Return estimated mean with 95% confidence bound", "\n", "return", "ufloat", "(", "mean_log_prob", ",", "2", "*", "std_log_prob", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.trainer.map.MAPTrainer.__init__": [[23, 39], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "device", ":", "torch", ".", "device", ",", "\n", "# Parameters mean", "\n", "mu", ":", "np", ".", "array", ",", "k", ":", "float", ",", "\n", "# Parameters covariance", "\n", "nu", ":", "float", ",", "Lambda", ":", "np", ".", "array", ",", "\n", "# If this is set, overrides all arguments passed and uses a data-dependent prior", "\n", "# from the literature", "\n", "initialize_from_data", ":", "bool", "=", "False", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "nu", "=", "nu", "\n", "self", ".", "Lambda", "=", "Lambda", "\n", "\n", "self", ".", "initialize_from_data", "=", "initialize_from_data", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.trainer.map.MAPTrainer.from_data": [[40, 47], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "cls", "float", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_data", "(", "cls", ",", "device", ":", "torch", ".", "device", ")", ":", "\n", "        ", "dimension", "=", "42", "\n", "mu", "=", "torch", ".", "zeros", "(", "dimension", ")", "\n", "return", "cls", "(", "\n", "device", "=", "device", ",", "initialize_from_data", "=", "True", ",", "\n", "mu", "=", "mu", ",", "k", "=", "1.0", ",", "nu", "=", "float", "(", "dimension", ")", ",", "Lambda", "=", "torch", ".", "eye", "(", "dimension", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.trainer.map.MAPTrainer.from_dimension": [[48, 52], ["cls", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "float", "numpy.eye"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_dimension", "(", "cls", ",", "device", ":", "torch", ".", "device", ",", "dimension", ":", "int", ",", "mu", ":", "Optional", "[", "torch", ".", "tensor", "]", "=", "None", ",", "k", ":", "float", "=", "1.0", ")", ":", "\n", "        ", "mu", "=", "mu", "or", "torch", ".", "zeros", "(", "dimension", ")", "\n", "return", "cls", "(", "device", "=", "device", ",", "mu", "=", "mu", ",", "k", "=", "k", ",", "nu", "=", "float", "(", "dimension", ")", ",", "Lambda", "=", "np", ".", "eye", "(", "dimension", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.trainer.map.MAPTrainer.compute_gaussian_model_params_for_word_list": [[53, 87], ["torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.stack().to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "mean.cpu().numpy", "cov.cpu().numpy", "x.get_embedding", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "centered_embeddings.t().matmul", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "mean.cpu", "cov.cpu", "centered_embeddings.t"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.get_embedding"], ["", "@", "overrides", "\n", "def", "compute_gaussian_model_params_for_word_list", "(", "self", ",", "words", ":", "List", "[", "Word", "]", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "embeddings", "=", "[", "torch", ".", "tensor", "(", "x", ".", "get_embedding", "(", ")", ")", "for", "x", "in", "words", "]", "\n", "\n", "# Create numpy array where rows are embeddings", "\n", "embeddings_array", "=", "torch", ".", "stack", "(", "embeddings", ",", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "embeddings_mean", "=", "torch", ".", "mean", "(", "embeddings_array", ",", "dim", "=", "0", ")", "\n", "embeddings_scatter", "=", "(", "embeddings_array", "-", "embeddings_mean", ")", ".", "t", "(", ")", ".", "matmul", "(", "embeddings_array", "-", "embeddings_mean", ")", "\n", "\n", "d", "=", "embeddings_mean", ".", "shape", "[", "0", "]", "\n", "n", "=", "len", "(", "words", ")", "\n", "\n", "if", "self", ".", "initialize_from_data", ":", "\n", "            ", "centered_embeddings", "=", "(", "embeddings_array", "-", "embeddings_mean", ")", "\n", "cov", "=", "centered_embeddings", ".", "t", "(", ")", ".", "matmul", "(", "centered_embeddings", ")", "/", "n", "\n", "\n", "self", ".", "Lambda", "=", "torch", ".", "diag", "(", "torch", ".", "diag", "(", "cov", ")", ")", "\n", "self", ".", "nu", "=", "d", "+", "2", "\n", "self", ".", "mu", "=", "embeddings_mean", "\n", "self", ".", "k", "=", "0.01", "\n", "\n", "", "mu_update", "=", "(", "self", ".", "k", "*", "self", ".", "mu", "+", "n", "*", "embeddings_mean", ")", "/", "(", "self", ".", "k", "+", "n", ")", "\n", "\n", "k_update", "=", "self", ".", "k", "+", "n", "\n", "nu_update", "=", "self", ".", "nu", "+", "n", "\n", "\n", "embeddings_scatter_prior", "=", "(", "embeddings_mean", "-", "self", ".", "mu", ")", "@", "(", "embeddings_mean", "-", "self", ".", "mu", ")", ".", "T", "\n", "Lambda_update", "=", "self", ".", "Lambda", "+", "embeddings_scatter", "\n", "Lambda_update", "+=", "(", "self", ".", "k", "*", "n", ")", "/", "(", "self", ".", "k", "+", "n", ")", "*", "embeddings_scatter_prior", "\n", "\n", "# Get MAP estimates for mean and covariance", "\n", "mean", "=", "mu_update", "\n", "cov", "=", "(", "nu_update", "+", "d", "+", "2", ")", "**", "-", "1", "*", "Lambda_update", "\n", "return", "mean", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "cov", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.trainer.base.Trainer.compute_gaussian_model_params_for_word_list": [[7, 9], ["None"], "methods", ["None"], ["\n", "from", "utils", ".", "cache", "import", "AttributeValueGaussianCacheEntry", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.trainer.base.Trainer.compute_gaussian_model_params_for_attribute_value": [[10, 20], ["base.Trainer.compute_gaussian_model_params_for_word_list", "x.has_attribute", "x.get_attribute"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.trainer.mle.MLETrainer.compute_gaussian_model_params_for_word_list", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.has_attribute", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_attribute"], ["from", "readers", ".", "base", "import", "Reader", "\n", "from", "utils", ".", "word", "import", "Word", "\n", "\n", "\n", "PyTorchDevice", "=", "Union", "[", "torch", ".", "device", ",", "str", "]", "\n", "\n", "\n", "class", "EmbeddingDistribution", "(", "nn", ".", "Module", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.trainer.base.Trainer.compute_categorical_model_sampling_prob_for_attribute_value": [[21, 36], ["float", "float", "sum", "sum", "x.get_count", "x.get_count", "x.has_attribute", "x.has_attribute", "x.get_attribute"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_count", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_count", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.has_attribute", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.has_attribute", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_attribute"], ["\n", "def", "__init__", "(", "self", ",", "dimensionality", ":", "int", ")", ":", "\n", "        ", "self", ".", "_dimensionality", "=", "dimensionality", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "sample", "(", "self", ",", "num_samples", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "log_prob", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "get_dimensionality", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_dimensionality", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.trainer.mle.MLETrainer.compute_gaussian_model_params_for_word_list": [[9, 21], ["numpy.vstack", "numpy.mean", "numpy.cov", "numpy.array", "x.get_embedding"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.get_embedding"], ["    ", "@", "overrides", "\n", "def", "compute_gaussian_model_params_for_word_list", "(", "self", ",", "words", ":", "List", "[", "Word", "]", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "np", ".", "ndarray", "]", ":", "\n", "        ", "embeddings", "=", "[", "np", ".", "array", "(", "x", ".", "get_embedding", "(", ")", ")", "for", "x", "in", "words", "]", "\n", "\n", "# Create numpy array where rows are embeddings", "\n", "embeddings_array", "=", "np", ".", "vstack", "(", "embeddings", ")", "\n", "\n", "# Compute mean and covariance", "\n", "mean", "=", "np", ".", "mean", "(", "embeddings_array", ",", "axis", "=", "0", ")", "\n", "cov", "=", "np", ".", "cov", "(", "embeddings_array", ",", "rowvar", "=", "False", ")", "\n", "\n", "return", "mean", ",", "cov", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.ud_treebank_reader.UDTreebankReader.get_treebank_file": [[14, 40], ["pycountry.languages.get", "os.path.join", "Exception"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "get_treebank_file", "(", "\n", "language_code", ":", "str", ",", "embedding", ":", "Optional", "[", "str", "]", "=", "\"bert\"", ",", "\n", "test_file", ":", "Optional", "[", "bool", "]", "=", "False", ",", "valid_file", ":", "Optional", "[", "bool", "]", "=", "False", ")", "->", "str", ":", "\n", "\n", "        ", "assert", "not", "(", "valid_file", "and", "test_file", ")", "\n", "\n", "lang", "=", "pycountry", ".", "languages", ".", "get", "(", "alpha_3", "=", "language_code", ")", "\n", "\n", "if", "embedding", "==", "\"bert\"", ":", "\n", "            ", "embedding_file", "=", "\"bert-base-multilingual-cased\"", "\n", "", "elif", "embedding", "==", "\"fasttext\"", ":", "\n", "            ", "embedding_file", "=", "f\"cc.{lang.alpha_2}.300.bin\"", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"\"", ")", "\n", "\n", "", "if", "test_file", ":", "\n", "            ", "flag", "=", "\"test\"", "\n", "", "elif", "valid_file", ":", "\n", "            ", "flag", "=", "\"dev\"", "\n", "", "else", ":", "\n", "            ", "flag", "=", "\"train\"", "\n", "\n", "", "return", "path", ".", "join", "(", "\n", "config", ".", "DATA_ROOT", ",", "\n", "f\"ud/ud-treebanks-v2.1/UD_{lang.name}/{lang.alpha_2}-um-{flag}-{embedding_file}.pkl\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.ud_treebank_reader.UDTreebankReader.read": [[42, 60], ["words.append", "open", "raw_words.extend", "utils.word.Word", "pickle.load", "item[].reshape"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "read", "(", "cls", ",", "paths", ":", "List", "[", "str", "]", ")", "->", "List", "[", "Word", "]", ":", "\n", "        ", "\"\"\"\n        Should be overriden with the logic to (i) read all words in the dataset and (ii) discover\n        the values each unimorph attribute can take and place them in\n        self._unimorph_attributes_to_values_dict.\n        \"\"\"", "\n", "raw_words", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "[", "]", "\n", "for", "path", "in", "paths", ":", "\n", "            ", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "h", ":", "\n", "                ", "raw_words", ".", "extend", "(", "pickle", ".", "load", "(", "h", ")", ")", "\n", "\n", "# Read all words and store them in self._words", "\n", "", "", "words", "=", "[", "]", "\n", "for", "item", "in", "raw_words", ":", "\n", "            ", "words", ".", "append", "(", "Word", "(", "item", "[", "\"word\"", "]", ",", "item", "[", "\"embedding\"", "]", ".", "reshape", "(", "-", "1", ")", ",", "1", ",", "item", "[", "\"attributes\"", "]", ")", ")", "\n", "\n", "", "return", "words", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.__init__": [[24, 55], ["w.get_attributes", "modified_words.append", "w.get_attribute", "utils.word.Word", "w.get_word", "w.get_embedding", "w.get_count"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_attributes", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_attribute", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_word", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.get_embedding", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_count"], ["\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "", "def", "sample", "(", "self", ",", "num_samples", ":", "int", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "log_prob", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "get_dimensionality", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_dimensionality", "\n", "\n", "\n", "", "", "class", "ValueModel", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "value_probs", ":", "List", "[", "Tuple", "[", "str", ",", "float", "]", "]", ",", "device", ":", "PyTorchDevice", "=", "\"cpu\"", ")", ":", "\n", "        ", "self", ".", "_values", ",", "self", ".", "_probs", "=", "zip", "(", "*", "value_probs", ")", "\n", "self", ".", "_distribution", "=", "torch", ".", "distributions", ".", "Categorical", "(", "torch", ".", "tensor", "(", "self", ".", "_probs", ")", ".", "double", "(", ")", ".", "to", "(", "device", ")", ")", "\n", "self", ".", "_device", "=", "device", "\n", "\n", "self", ".", "_values_dict", "=", "{", "val", ":", "idx", "for", "idx", ",", "val", "in", "enumerate", "(", "self", ".", "_values", ")", "}", "\n", "\n", "", "@", "classmethod", "\n", "def", "create_uniform", "(", "cls", ",", "values", ":", "List", "[", "str", "]", ",", "device", ":", "PyTorchDevice", "=", "\"cpu\"", ")", ":", "\n", "        ", "\"\"\"\n        Creates a attribute-value model that assigns uniform probability to each possibility.\n        \"\"\"", "\n", "probs", "=", "[", "1.0", "/", "float", "(", "len", "(", "values", ")", ")", "]", "*", "len", "(", "values", ")", "\n", "return", "cls", "(", "list", "(", "zip", "(", "values", ",", "probs", ")", ")", ",", "device", "=", "device", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_cache_entries", "(", "\n", "cls", ",", "cache_entries", ":", "Iterable", "[", "AttributeValueGaussianCacheEntry", "]", ",", "device", ":", "PyTorchDevice", "=", "\"cpu\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_attribute_value_counter": [[56, 93], ["item.get_attributes", "item.get_attribute", "[].add", "set", "item.get_word", "item.get_word"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_attributes", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_attribute", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_word", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_word"], ["        ", "\"\"\"\n        Creates a attribute-value model that uses the probabilities appearing in unimorph data.\n        \"\"\"", "\n", "values", "=", "[", "]", "\n", "probs", "=", "[", "]", "\n", "for", "cache_entry", "in", "cache_entries", ":", "\n", "            ", "values", ".", "append", "(", "cache_entry", ".", "get_value", "(", ")", ")", "\n", "probs", ".", "append", "(", "cache_entry", ".", "get_sampling_prob", "(", "as_torch", "=", "False", ")", ")", "\n", "\n", "", "if", "not", "isclose", "(", "sum", "(", "probs", ")", ",", "1.0", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"Attribute-value model probabilities do not add up to one.\"", ")", "\n", "\n", "", "return", "cls", "(", "list", "(", "zip", "(", "values", ",", "probs", ")", ")", ",", "device", "=", "device", ")", "\n", "\n", "", "def", "get_num_possibilities", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "_probs", ")", "\n", "\n", "", "def", "get_probs", "(", "self", ")", "->", "List", "[", "float", "]", ":", "\n", "        ", "return", "list", "(", "self", ".", "_probs", ")", "\n", "\n", "", "def", "sample", "(", "self", ",", "num_samples", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "samples", "=", "self", ".", "_distribution", ".", "sample", "(", "sample_shape", "=", "torch", ".", "Size", "(", "[", "num_samples", "]", ")", ")", "\n", "assert", "samples", ".", "shape", "==", "(", "num_samples", ",", ")", "\n", "return", "samples", "\n", "\n", "", "def", "log_prob", "(", "self", ",", "sample", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "probs", "=", "self", ".", "_distribution", ".", "log_prob", "(", "sample", ")", "\n", "assert", "probs", ".", "shape", "==", "(", "sample", ".", "shape", "[", "0", "]", ",", ")", "\n", "return", "probs", "\n", "\n", "", "def", "entropy", "(", "self", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "return", "self", ".", "_distribution", ".", "entropy", "(", ")", "\n", "\n", "", "def", "get_value_ids", "(", "self", ",", "values", ":", "List", "[", "str", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "value_indices", "=", "[", "self", ".", "_values_dict", "[", "v", "]", "for", "v", "in", "values", "]", "\n", "return", "torch", ".", "tensor", "(", "value_indices", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "", "def", "get_values", "(", "self", ")", "->", "List", "[", "str", "]", ":", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_attributes_to_values_dict_from_counters": [[94, 135], ["list", "list", "list", "attr_val_dict.items", "[].keys", "counters[].keys", "attr_val_dict.items", "list", "len", "attr_val_dict[].remove", "attr_val_dict[].remove"], "methods", ["None"], ["        ", "return", "list", "(", "self", ".", "_values", ")", "\n", "\n", "", "def", "get_values_from_ids", "(", "self", ",", "values_idx", ":", "List", "[", "int", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "[", "self", ".", "_values", "[", "i", "]", "for", "i", "in", "values_idx", "]", "\n", "\n", "\n", "", "", "class", "EmbeddingModel", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "embedding_distributions", ":", "List", "[", "EmbeddingDistribution", "]", ",", "\n", "device", ":", "Optional", "[", "PyTorchDevice", "]", "=", "\"cpu\"", ")", ":", "\n", "        ", "self", ".", "_device", "=", "device", "\n", "self", ".", "_embedding_size", "=", "embedding_distributions", "[", "0", "]", ".", "get_dimensionality", "(", ")", "\n", "self", ".", "_embedding_dists", "=", "embedding_distributions", "\n", "\n", "", "def", "get_dimensionality", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_embedding_size", "\n", "\n", "", "def", "sample", "(", "self", ",", "attribute_values", ")", ":", "\n", "        ", "num_samples", "=", "attribute_values", ".", "shape", "[", "0", "]", "\n", "\n", "# Sample from all embedding distributions", "\n", "dist_results", "=", "[", "x", ".", "sample", "(", "num_samples", "=", "num_samples", ")", "for", "x", "in", "self", ".", "_embedding_dists", "]", "\n", "\n", "dist_results_stacked", "=", "torch", ".", "stack", "(", "dist_results", ",", "dim", "=", "2", ")", "\n", "assert", "dist_results_stacked", ".", "shape", "==", "(", "num_samples", ",", "self", ".", "_embedding_size", ",", "len", "(", "self", ".", "_embedding_dists", ")", ")", "\n", "\n", "# Select correct sampled embedding depending on which value it was sampled from", "\n", "mask", "=", "torch", ".", "arange", "(", "0", ",", "len", "(", "self", ".", "_embedding_dists", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "\n", "num_samples", ",", "-", "1", ")", ".", "to", "(", "self", ".", "_device", ")", "==", "attribute_values", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "len", "(", "self", ".", "_embedding_dists", ")", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "correct_samples", "=", "torch", ".", "sum", "(", "dist_results_stacked", "*", "mask", ",", "dim", "=", "2", ")", "\n", "assert", "correct_samples", ".", "shape", "==", "(", "num_samples", ",", "self", ".", "_embedding_size", ")", "\n", "\n", "return", "correct_samples", "\n", "\n", "", "def", "log_prob", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"\n        Returns probabilities of samples according to ALL embedding distributions,\n        aka. forall v in calV   p(h_C|v,a)  # noqa\n        \"\"\"", "\n", "num_samples", "=", "samples", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_dimensionality": [[136, 138], ["base.Reader._words[].get_embedding"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.get_embedding"], ["# Compute sample probs according to each distribution", "\n", "log_probs", "=", "[", "x", ".", "log_prob", "(", "samples", ")", "for", "x", "in", "self", ".", "_embedding_dists", "]", "\n", "log_probs", "=", "torch", ".", "stack", "(", "log_probs", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_words": [[139, 141], ["None"], "methods", ["None"], ["assert", "log_probs", ".", "shape", "==", "(", "num_samples", ",", "len", "(", "self", ".", "_embedding_dists", ")", ")", "\n", "\n", "return", "log_probs", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_words_with_filter_from_cache": [[142, 158], ["base.Reader.get_words", "filter", "base.Reader.get_words"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_words", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_words"], ["\n", "", "def", "log_prob_conditional", "(", "self", ",", "samples", ",", "attribute_values", ")", ":", "\n", "        ", "\"\"\"\n        Returns probabilities of samples conditioned on the values in attribute_values, aka. p(h_C|v,a)\n        \"\"\"", "\n", "num_samples", "=", "samples", ".", "shape", "[", "0", "]", "\n", "log_probs", "=", "self", ".", "log_prob", "(", "samples", ")", "\n", "\n", "# Select correct sample log prob according to which value it was sampled from", "\n", "mask", "=", "torch", ".", "arange", "(", "0", ",", "len", "(", "self", ".", "_embedding_dists", ")", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ".", "expand", "(", "\n", "num_samples", ",", "-", "1", ")", ".", "to", "(", "self", ".", "_device", ")", "==", "attribute_values", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "len", "(", "self", ".", "_embedding_dists", ")", ")", "\n", "log_probs", "=", "torch", ".", "sum", "(", "mask", "*", "log_probs", ",", "dim", "=", "1", ")", "\n", "assert", "log_probs", ".", "shape", "==", "(", "num_samples", ",", ")", "\n", "\n", "return", "log_probs", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_embeddings_with_filter_from_cache": [[159, 177], ["torch.tensor", "torch.tensor", "w.get_embedding", "w.get_embedding", "base.Reader.get_words", "filter", "base.Reader.get_words"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.get_embedding", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.get_embedding", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_words", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_words"], ["", "", "class", "ProbingModel", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "embedding_model", ":", "EmbeddingModel", ",", "value_model", ":", "ValueModel", ",", "\n", "device", ":", "PyTorchDevice", "=", "\"cpu\"", ")", ":", "\n", "        ", "self", ".", "_embedding_model", "=", "embedding_model", "\n", "self", ".", "_value_model", "=", "value_model", "\n", "self", ".", "_device", "=", "device", "\n", "\n", "", "def", "get_device", "(", "self", ")", "->", "PyTorchDevice", ":", "\n", "        ", "return", "self", ".", "_device", "\n", "\n", "", "def", "get_pred_true_arrays", "(", "self", ",", "attribute", ":", "str", ",", "select_dimensions", ":", "Iterable", "[", "int", "]", ",", "\n", "eval_dataset", ":", "Reader", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "List", "[", "Word", "]", "]", ":", "\n", "        ", "if", "attribute", "not", "in", "eval_dataset", ".", "get_valid_attributes", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"The attribute '{}' does not exist in the evaluation dataset.\"", ".", "format", "(", "attribute", ")", ")", "\n", "\n", "", "select_dimensions", "=", "list", "(", "select_dimensions", ")", "\n", "\n", "# Select words that have the attribute specified attribute", "\n", "cache_key", "=", "f\"words_with_{attribute}\"", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_values_with_filter_from_cache": [[178, 194], ["value_model.get_value_ids", "value_model.get_value_ids", "w.get_attribute", "w.get_attribute", "base.Reader.get_words", "filter", "base.Reader.get_words"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.get_value_ids", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.get_value_ids", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_attribute", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_attribute", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_words", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_words"], ["cache_key_filter", "=", "lambda", "x", ":", "x", ".", "has_attribute", "(", "attribute", ")", "# noqa", "\n", "\n", "words", "=", "eval_dataset", ".", "get_words_with_filter_from_cache", "(", "\n", "cache_key", ",", "cache_key_filter", ")", "\n", "\n", "values_tensor", "=", "eval_dataset", ".", "get_values_with_filter_from_cache", "(", "\n", "attribute", ",", "cache_key", ",", "self", ".", "_value_model", ",", "cache_key_filter", ")", "\n", "embeddings_tensor", "=", "eval_dataset", ".", "get_embeddings_with_filter_from_cache", "(", "\n", "cache_key", ",", "cache_key_filter", ")", "[", ":", ",", "select_dimensions", "]", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "conditional_probs", "=", "self", ".", "log_prob_all_values", "(", "embeddings_tensor", ")", "\n", "predicted_values", "=", "conditional_probs", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "return", "predicted_values", ",", "values_tensor", ",", "words", "\n", "\n", "", "def", "get_log_likelihood", "(", "self", ",", "attribute", ":", "str", ",", "select_dimensions", ":", "Iterable", "[", "int", "]", ",", "\n", "eval_dataset", ":", "Reader", ")", "->", "torch", ".", "Tensor", ":", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.has_attribute": [[195, 200], ["base.Reader._get_implemented_attributes_to_values_dict().keys", "base.Reader._get_implemented_attributes_to_values_dict"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader._get_implemented_attributes_to_values_dict"], ["        ", "\"\"\"\n        Returns the average log likelihood.\n        \"\"\"", "\n", "if", "attribute", "not", "in", "eval_dataset", ".", "get_valid_attributes", "(", ")", ":", "\n", "            ", "raise", "Exception", "(", "\"The attribute '{}' does not exist in the evaluation dataset.\"", ".", "format", "(", "attribute", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader._get_implemented_attributes_to_values_dict": [[201, 204], ["base.Reader._get_unimorph_attributes_to_values_dict", "dict", "base.Reader._get_custom_attributes_to_values_dict"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader._get_unimorph_attributes_to_values_dict", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader._get_custom_attributes_to_values_dict"], ["", "select_dimensions", "=", "list", "(", "select_dimensions", ")", "\n", "\n", "# Select words that have the attribute specified attribute", "\n", "cache_key", "=", "f\"words_with_{attribute}\"", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader._get_unimorph_attributes_to_values_dict": [[205, 207], ["None"], "methods", ["None"], ["cache_key_filter", "=", "lambda", "x", ":", "x", ".", "has_attribute", "(", "attribute", ")", "# noqa", "\n", "\n", "values_tensor", "=", "eval_dataset", ".", "get_values_with_filter_from_cache", "(", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_valid_attributes": [[208, 210], ["list", "base.Reader._get_implemented_attributes_to_values_dict().keys", "base.Reader._get_implemented_attributes_to_values_dict"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader._get_implemented_attributes_to_values_dict"], ["attribute", ",", "cache_key", ",", "self", ".", "_value_model", ",", "cache_key_filter", ")", "\n", "embeddings_tensor", "=", "eval_dataset", ".", "get_embeddings_with_filter_from_cache", "(", "\n", "cache_key", ",", "cache_key_filter", ")", "[", ":", ",", "select_dimensions", "]", ".", "to", "(", "self", ".", "_device", ")", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_valid_attribute_values": [[211, 216], ["base.Reader.has_attribute", "Exception", "base.Reader._get_implemented_attributes_to_values_dict"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.has_attribute", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader._get_implemented_attributes_to_values_dict"], ["\n", "# Compute probabilities", "\n", "log_prob", "=", "self", ".", "log_prob_conditional", "(", "embeddings_tensor", ",", "values_tensor", ")", "\n", "log_prob_normalizer", "=", "self", ".", "log_prob", "(", "embeddings_tensor", ")", "\n", "\n", "log_prob_avg", "=", "torch", ".", "mean", "(", "log_prob", "-", "log_prob_normalizer", ")", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_attributes_from_features": [[217, 231], ["base.AttributeDict", "base.AttributeDict.build_from_attribute_value_dict", "AttributeDict.update", "base.Reader._get_implemented_attributes_to_values_dict", "base.Reader._get_language_specific_attributes"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.AttributeDict.build_from_attribute_value_dict", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader._get_implemented_attributes_to_values_dict", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader._get_language_specific_attributes"], ["return", "log_prob_avg", "\n", "\n", "", "@", "staticmethod", "\n", "def", "get_accuracy", "(", "predicted_values", ":", "torch", ".", "Tensor", ",", "values_tensor", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "num_items", "=", "predicted_values", ".", "shape", "[", "0", "]", "\n", "return", "(", "predicted_values", "==", "values_tensor", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "/", "num_items", "\n", "\n", "", "def", "get_value_model", "(", "self", ")", "->", "ValueModel", ":", "\n", "        ", "return", "self", ".", "_value_model", "\n", "\n", "", "def", "sample", "(", "self", ",", "num_samples", ")", "->", "torch", ".", "Tensor", ":", "\n", "# Sample values from categorical", "\n", "        ", "samples", "=", "self", ".", "_value_model", ".", "sample", "(", "num_samples", ")", "\n", "\n", "# Using sampled categorical values, sample from correct embedding distributions", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.read": [[232, 239], ["None"], "methods", ["None"], ["emb_samples", "=", "self", ".", "_embedding_model", ".", "sample", "(", "samples", ")", "\n", "\n", "return", "emb_samples", "\n", "\n", "", "def", "log_prob_all_values", "(", "self", ",", "samples", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Returns p(h_C,v|a) for all v\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader._get_custom_attributes_to_values_dict": [[240, 246], ["None"], "methods", ["None"], ["num_samples", "=", "samples", ".", "shape", "[", "0", "]", "\n", "\n", "# Get log probs for all possibilies ways to sample the values", "\n", "val_log_probs", "=", "[", "self", ".", "_value_model", ".", "log_prob", "(", "(", "torch", ".", "ones", "(", "num_samples", ")", ".", "long", "(", ")", "*", "x", ")", ".", "to", "(", "self", ".", "_device", ")", ")", "\n", "for", "x", "in", "range", "(", "self", ".", "_value_model", ".", "get_num_possibilities", "(", ")", ")", "]", "\n", "val_log_prob", "=", "torch", ".", "stack", "(", "val_log_probs", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader._get_language_specific_attributes": [[247, 257], ["None"], "methods", ["None"], ["# Get log probs for all possible values embeddings may have been sampled from", "\n", "emb_log_prob", "=", "self", ".", "_embedding_model", ".", "log_prob", "(", "samples", ")", "\n", "assert", "emb_log_prob", ".", "shape", "==", "val_log_prob", ".", "shape", "\n", "\n", "# Numerically stable computation", "\n", "log_prob_sum", "=", "emb_log_prob", "+", "val_log_prob", "\n", "\n", "return", "log_prob_sum", "\n", "\n", "", "def", "log_prob", "(", "self", ",", "samples", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.AttributeDict.accept_first_match": [[260, 266], ["None"], "methods", ["None"], ["num_samples", "=", "samples", ".", "shape", "[", "0", "]", "\n", "log_prob_sum", "=", "self", ".", "log_prob_all_values", "(", "samples", ")", "\n", "log_prob", "=", "log_prob_sum", ".", "logsumexp", "(", "dim", "=", "1", ")", "\n", "\n", "assert", "log_prob", ".", "shape", "==", "(", "num_samples", ",", ")", "\n", "return", "log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.AttributeDict.add_if_match": [[267, 274], ["base.AttributeDict.accept_first_match"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.AttributeDict.accept_first_match"], ["", "def", "log_prob_conditional", "(", "self", ",", "samples", ",", "attribute_values", ")", ":", "\n", "        ", "\"\"\"\n        Return p(h_C, v|a) = p(h_C|v, a) p(v|a)\n        \"\"\"", "\n", "num_samples", "=", "samples", ".", "shape", "[", "0", "]", "\n", "\n", "emb_log_prob", "=", "self", ".", "_embedding_model", ".", "log_prob_conditional", "(", "samples", ",", "attribute_values", ")", "\n", "val_log_prob", "=", "self", ".", "_value_model", ".", "log_prob", "(", "attribute_values", ")", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.AttributeDict.build_from_attribute_value_dict": [[275, 281], ["attribute_value_dict.items", "base.AttributeDict.add_if_match"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.AttributeDict.add_if_match"], ["log_prob", "=", "val_log_prob", "+", "emb_log_prob", "\n", "assert", "log_prob", ".", "shape", "==", "(", "num_samples", ",", ")", "\n", "\n", "return", "log_prob", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.load_dimensions_to_features": [[11, 16], ["open", "yaml.full_load"], "function", ["None"], ["from", "utils", ".", "word", "import", "Word", "\n", "\n", "\n", "PyTorchDevice", "=", "Union", "[", "torch", ".", "device", ",", "str", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.runner.runner.Runner.__init__": [[15, 34], ["runner.Runner.cache.get_all_attribute_values", "runner.Runner.cache.get_cache_entry"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCache.get_all_attribute_values", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCache.get_cache_entry"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "Dict", "[", "str", ",", "Any", "]", ")", ":", "\n", "        ", "self", ".", "reader", "=", "config", "[", "\"reader\"", "]", "\n", "self", ".", "reader_valid", "=", "config", "[", "\"reader_valid\"", "]", "\n", "self", ".", "reader_test", "=", "config", "[", "\"reader_test\"", "]", "\n", "self", ".", "device", "=", "config", "[", "\"device\"", "]", "\n", "self", ".", "cache", "=", "config", "[", "\"cache\"", "]", "\n", "self", ".", "cache_valid", "=", "config", "[", "\"cache_valid\"", "]", "\n", "self", ".", "cache_test", "=", "config", "[", "\"cache_test\"", "]", "\n", "self", ".", "value_model", "=", "config", "[", "\"value_model\"", "]", "\n", "self", ".", "value_model_valid", "=", "config", "[", "\"value_model_valid\"", "]", "\n", "self", ".", "value_model_test", "=", "config", "[", "\"value_model_test\"", "]", "\n", "self", ".", "attribute", "=", "config", "[", "\"attribute\"", "]", "\n", "self", ".", "selection_criterion", "=", "config", "[", "\"selection_criterion\"", "]", "\n", "self", ".", "wandb_run", "=", "config", "[", "\"wandb_run\"", "]", "if", "\"wandb_run\"", "in", "config", "else", "None", "\n", "\n", "# Create caches for train & test set", "\n", "attribute_values", "=", "self", ".", "cache", ".", "get_all_attribute_values", "(", "self", ".", "attribute", ")", "\n", "cache_entries", "=", "[", "self", ".", "cache", ".", "get_cache_entry", "(", "self", ".", "attribute", ",", "v", ")", "for", "v", "in", "attribute_values", "]", "\n", "self", ".", "cache_entries", "=", "cache_entries", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.runner.runner.Runner.main_loop": [[35, 173], ["runner.Runner.reader.get_dimensionality", "set", "range", "runner.Runner.compute_test_metrics", "print", "tqdm.tqdm.tqdm", "selected_dims.add", "best_dim_test_metrics.update", "best_dim_test_metrics.update", "best_dim_test_metrics.update", "selected_results.append", "print", "print", "print", "print", "print", "print", "list", "set", "models.gaussian_model.GaussianEmbeddingModel.from_cache_entries", "models.base.ProbingModel", "estimators.fixed_samples.FixedSamplesEstimator", "models.base.ProbingModel.get_pred_true_arrays", "models.base.ProbingModel.get_accuracy().cpu().item", "models.base.ProbingModel.get_log_likelihood", "iteration_results.append", "max", "runner.Runner.compute_test_metrics", "len", "max", "max", "max", "runner.Runner.wandb_run.log", "range", "len", "range", "list", "runner.Runner.value_model_valid.entropy().item", "torch.tensor().log().item", "estimators.fixed_samples.FixedSamplesEstimator.estimate_conditional_entropy", "torch.tensor().log().item", "max", "uncertainties.ufloat", "range", "models.base.ProbingModel.get_accuracy().cpu", "list", "max", "len", "runner.Runner.value_model_valid.entropy", "torch.tensor().log", "torch.tensor().log", "models.base.ProbingModel.get_accuracy", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.DummyEmbedder.get_dimensionality", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.runner.runner.Runner.compute_test_metrics", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingModel.from_cache_entries", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.get_pred_true_arrays", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.get_log_likelihood", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.runner.runner.Runner.compute_test_metrics", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.estimators.base.Estimator.estimate_conditional_entropy", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.entropy", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.get_accuracy"], ["", "def", "main_loop", "(", "self", ",", "max_iter", ":", "int", "=", "10", ")", "->", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "total_dims", "=", "self", ".", "reader", ".", "get_dimensionality", "(", ")", "\n", "selected_dims", ":", "Set", "[", "int", "]", "=", "set", "(", ")", "\n", "selected_results", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", "=", "[", "]", "\n", "\n", "for", "iter_idx", "in", "range", "(", "max_iter", ")", ":", "\n", "            ", "iteration_results", "=", "[", "]", "\n", "unselected_dims", "=", "set", "(", "list", "(", "range", "(", "total_dims", ")", ")", ")", "-", "selected_dims", "\n", "\n", "# Compute all possible next dims", "\n", "for", "candidate_dim", "in", "tqdm", "(", "unselected_dims", ")", ":", "\n", "                ", "candidate_dim_pool", "=", "selected_dims", "|", "{", "candidate_dim", "}", "\n", "\n", "# Create embedding model from selected dims", "\n", "embedding_model", "=", "GaussianEmbeddingModel", ".", "from_cache_entries", "(", "\n", "self", ".", "cache_entries", ",", "select_dimensions", "=", "candidate_dim_pool", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# Compute metrics using validation data", "\n", "gaussian_model", "=", "ProbingModel", "(", "embedding_model", ",", "self", ".", "value_model", ",", "device", "=", "self", ".", "device", ")", "\n", "estimator", "=", "FixedSamplesEstimator", "(", "gaussian_model", ",", "self", ".", "reader_valid", ",", "self", ".", "attribute", ",", "\n", "select_dimensions", "=", "candidate_dim_pool", ",", "\n", "value_model", "=", "self", ".", "value_model_valid", ")", "\n", "entropy", "=", "self", ".", "value_model_valid", ".", "entropy", "(", ")", ".", "item", "(", ")", "/", "torch", ".", "tensor", "(", "2.0", ")", ".", "log", "(", ")", ".", "item", "(", ")", "\n", "conditional_entropy", "=", "estimator", ".", "estimate_conditional_entropy", "(", ")", "/", "torch", ".", "tensor", "(", "2.0", ")", ".", "log", "(", ")", ".", "item", "(", ")", "\n", "mutual_information", "=", "entropy", "-", "conditional_entropy", "\n", "\n", "y_pred", ",", "y_true", ",", "words", "=", "gaussian_model", ".", "get_pred_true_arrays", "(", "\n", "self", ".", "attribute", ",", "candidate_dim_pool", ",", "self", ".", "reader_valid", ")", "\n", "accuracy", "=", "gaussian_model", ".", "get_accuracy", "(", "y_pred", ",", "y_true", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", "\n", "log_likelihood", "=", "gaussian_model", ".", "get_log_likelihood", "(", "\n", "self", ".", "attribute", ",", "candidate_dim_pool", ",", "self", ".", "reader_valid", ")", "\n", "\n", "iteration_results", ".", "append", "(", "{", "\n", "\"candidate_dim\"", ":", "candidate_dim", ",", "\n", "\"candidate_dim_pool\"", ":", "list", "(", "candidate_dim_pool", ")", ",", "\n", "\"mi\"", ":", "mutual_information", ",", "\n", "\"accuracy\"", ":", "accuracy", ",", "\n", "\"conditional_entropy\"", ":", "conditional_entropy", ",", "\n", "\"entropy\"", ":", "entropy", ",", "\n", "\"log_likelihood\"", ":", "log_likelihood", ",", "\n", "}", ")", "\n", "\n", "# Select greedily", "\n", "", "if", "self", ".", "selection_criterion", "==", "\"mi\"", ":", "\n", "                ", "best_dim", "=", "max", "(", "iteration_results", ",", "key", "=", "lambda", "x", ":", "x", "[", "\"mi\"", "]", ")", "\n", "", "elif", "self", ".", "selection_criterion", "==", "\"accuracy\"", ":", "\n", "                ", "best_dim", "=", "max", "(", "iteration_results", ",", "key", "=", "lambda", "x", ":", "x", "[", "\"accuracy\"", "]", ")", "\n", "", "elif", "self", ".", "selection_criterion", "==", "\"log_likelihood\"", ":", "\n", "                ", "best_dim", "=", "max", "(", "iteration_results", ",", "key", "=", "lambda", "x", ":", "x", "[", "\"log_likelihood\"", "]", ")", "\n", "\n", "# Add selected dimension to dim pool", "\n", "", "selected_dims", ".", "add", "(", "best_dim", "[", "\"candidate_dim\"", "]", ")", "\n", "\n", "best_dim_test_metrics", "=", "{", "\n", "\"candidate_dim\"", ":", "best_dim", "[", "\"candidate_dim\"", "]", ",", "\n", "\"candidate_dim_pool\"", ":", "best_dim", "[", "\"candidate_dim_pool\"", "]", ",", "\n", "}", "\n", "\n", "best_dim_test_metrics", ".", "update", "(", "self", ".", "compute_test_metrics", "(", "best_dim", "[", "\"candidate_dim_pool\"", "]", ")", ")", "\n", "\n", "# Lower-bound metrics", "\n", "if", "len", "(", "selected_results", ")", ">", "1", ":", "\n", "                ", "mi_max", "=", "max", "(", "selected_results", "[", "-", "1", "]", "[", "\"mi_max\"", "]", ",", "best_dim_test_metrics", "[", "\"mi\"", "]", ")", "\n", "model_accuracy_max", "=", "max", "(", "selected_results", "[", "-", "1", "]", "[", "\"model_accuracy_max\"", "]", ",", "best_dim_test_metrics", "[", "\"model_accuracy\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "mi_max", "=", "max", "(", "best_dim_test_metrics", "[", "\"mi\"", "]", ",", "ufloat", "(", "0.0", ",", "0.0", ")", ")", "\n", "model_accuracy_max", "=", "best_dim_test_metrics", "[", "\"model_accuracy\"", "]", "\n", "\n", "", "best_dim_test_metrics", ".", "update", "(", "mi_max", "=", "mi_max", ")", "\n", "best_dim_test_metrics", ".", "update", "(", "model_accuracy_max", "=", "model_accuracy_max", ")", "\n", "\n", "selected_results", ".", "append", "(", "best_dim_test_metrics", ")", "\n", "print", "(", "\"Selected '{}'\"", ".", "format", "(", "best_dim_test_metrics", "[", "\"candidate_dim\"", "]", ")", ")", "\n", "print", "(", "\"\\tI(H_{}; V_a): {}\"", ".", "format", "(", "best_dim_test_metrics", "[", "\"candidate_dim_pool\"", "]", ",", "\n", "best_dim_test_metrics", "[", "\"mi\"", "]", ".", "nominal_value", ")", ")", "\n", "print", "(", "\"\\tAccuracy: {}\"", ".", "format", "(", "best_dim_test_metrics", "[", "\"model_accuracy\"", "]", ")", ")", "\n", "print", "(", "\"\\tConfusion Matrix: \"", ")", "\n", "print", "(", "best_dim_test_metrics", "[", "\"confusion_matrix\"", "]", ")", "\n", "print", "(", ")", "\n", "\n", "if", "self", ".", "wandb_run", "is", "not", "None", ":", "\n", "                ", "self", ".", "wandb_run", ".", "log", "(", "{", "\n", "\"mi\"", ":", "best_dim_test_metrics", "[", "\"mi\"", "]", ".", "nominal_value", ",", "\n", "\"mi_max\"", ":", "best_dim_test_metrics", "[", "\"mi_max\"", "]", ".", "nominal_value", ",", "\n", "\"conditional_entropy\"", ":", "best_dim_test_metrics", "[", "\"conditional_entropy\"", "]", ".", "nominal_value", ",", "\n", "\"entropy\"", ":", "best_dim_test_metrics", "[", "\"entropy\"", "]", ",", "\n", "\"mi_normalized\"", ":", "best_dim_test_metrics", "[", "\"mi\"", "]", ".", "nominal_value", "/", "best_dim_test_metrics", "[", "\"entropy\"", "]", ",", "# noqa", "\n", "\"mi_max_normalized\"", ":", "best_dim_test_metrics", "[", "\"mi_max\"", "]", ".", "nominal_value", "/", "best_dim_test_metrics", "[", "\"entropy\"", "]", ",", "# noqa", "\n", "\"conditional_entropy_normalized\"", ":", "best_dim_test_metrics", "[", "\"conditional_entropy\"", "]", ".", "nominal_value", "/", "best_dim_test_metrics", "[", "\"entropy\"", "]", ",", "# noqa", "\n", "\"model_accuracy\"", ":", "best_dim_test_metrics", "[", "\"model_accuracy\"", "]", ",", "\n", "\"model_accuracy_max\"", ":", "best_dim_test_metrics", "[", "\"model_accuracy_max\"", "]", ",", "\n", "\"baseline_accuracy\"", ":", "best_dim_test_metrics", "[", "\"baseline_accuracy\"", "]", ",", "\n", "\"micro_precision\"", ":", "best_dim_test_metrics", "[", "\"micro_precision\"", "]", ",", "\n", "\"micro_recall\"", ":", "best_dim_test_metrics", "[", "\"micro_recall\"", "]", ",", "\n", "\"micro_f1\"", ":", "best_dim_test_metrics", "[", "\"micro_f1\"", "]", ",", "\n", "\"macro_precision\"", ":", "best_dim_test_metrics", "[", "\"macro_precision\"", "]", ",", "\n", "\"macro_recall\"", ":", "best_dim_test_metrics", "[", "\"macro_recall\"", "]", ",", "\n", "\"macro_f1\"", ":", "best_dim_test_metrics", "[", "\"macro_f1\"", "]", ",", "\n", "}", ")", "\n", "\n", "# Get maximum accuracy", "\n", "", "", "full_vector_test_metrics", "=", "self", ".", "compute_test_metrics", "(", "list", "(", "range", "(", "total_dims", ")", ")", ")", "\n", "print", "(", "\"Full Vector Accuracy: {}\"", ".", "format", "(", "full_vector_test_metrics", "[", "\"model_accuracy\"", "]", ")", ")", "\n", "\n", "# Add summary metrics (every 5 steps)", "\n", "if", "self", ".", "wandb_run", "is", "not", "None", ":", "\n", "# Add entropy", "\n", "            ", "self", ".", "wandb_run", ".", "summary", "[", "\"entropy\"", "]", "=", "selected_results", "[", "-", "1", "]", "[", "\"entropy\"", "]", "\n", "\n", "# Add after 2 selected", "\n", "if", "len", "(", "selected_results", ")", ">=", "2", ":", "\n", "                ", "idx", "=", "1", "\n", "self", ".", "wandb_run", ".", "summary", "[", "f\"mi_{idx + 1}\"", "]", "=", "selected_results", "[", "idx", "]", "[", "\"mi\"", "]", ".", "nominal_value", "\n", "self", ".", "wandb_run", ".", "summary", "[", "f\"mi_max_{idx + 1}\"", "]", "=", "selected_results", "[", "idx", "]", "[", "\"mi_max\"", "]", ".", "nominal_value", "\n", "self", ".", "wandb_run", ".", "summary", "[", "f\"mi_normalized_{idx + 1}\"", "]", "=", "selected_results", "[", "idx", "]", "[", "\"mi\"", "]", ".", "nominal_value", "/", "selected_results", "[", "-", "1", "]", "[", "\"entropy\"", "]", "\n", "self", ".", "wandb_run", ".", "summary", "[", "f\"mi_max_normalized_{idx + 1}\"", "]", "=", "selected_results", "[", "idx", "]", "[", "\"mi_max\"", "]", ".", "nominal_value", "/", "selected_results", "[", "-", "1", "]", "[", "\"entropy\"", "]", "\n", "self", ".", "wandb_run", ".", "summary", "[", "f\"model_accuracy_{idx + 1}\"", "]", "=", "selected_results", "[", "idx", "]", "[", "\"model_accuracy\"", "]", "\n", "self", ".", "wandb_run", ".", "summary", "[", "f\"model_accuracy_max_{idx + 1}\"", "]", "=", "selected_results", "[", "idx", "]", "[", "\"model_accuracy_max\"", "]", "\n", "\n", "# Add every 5 selected", "\n", "", "for", "pos", "in", "range", "(", "0", ",", "len", "(", "selected_results", ")", "+", "1", ",", "5", ")", "[", "1", ":", "]", ":", "\n", "                ", "idx", "=", "pos", "-", "1", "\n", "self", ".", "wandb_run", ".", "summary", "[", "f\"mi_{idx + 1}\"", "]", "=", "selected_results", "[", "idx", "]", "[", "\"mi\"", "]", ".", "nominal_value", "\n", "self", ".", "wandb_run", ".", "summary", "[", "f\"mi_max_{idx + 1}\"", "]", "=", "selected_results", "[", "idx", "]", "[", "\"mi_max\"", "]", ".", "nominal_value", "\n", "self", ".", "wandb_run", ".", "summary", "[", "f\"mi_normalized_{idx + 1}\"", "]", "=", "selected_results", "[", "idx", "]", "[", "\"mi\"", "]", ".", "nominal_value", "/", "selected_results", "[", "-", "1", "]", "[", "\"entropy\"", "]", "\n", "self", ".", "wandb_run", ".", "summary", "[", "f\"mi_max_normalized_{idx + 1}\"", "]", "=", "selected_results", "[", "idx", "]", "[", "\"mi_max\"", "]", ".", "nominal_value", "/", "selected_results", "[", "-", "1", "]", "[", "\"entropy\"", "]", "\n", "self", ".", "wandb_run", ".", "summary", "[", "f\"model_accuracy_{idx + 1}\"", "]", "=", "selected_results", "[", "idx", "]", "[", "\"model_accuracy\"", "]", "\n", "self", ".", "wandb_run", ".", "summary", "[", "f\"model_accuracy_max_{idx + 1}\"", "]", "=", "selected_results", "[", "idx", "]", "[", "\"model_accuracy_max\"", "]", "\n", "\n", "# Report full vector accuracy as summary in wandb", "\n", "", "self", ".", "wandb_run", ".", "summary", "[", "\"model_accuracy_full\"", "]", "=", "full_vector_test_metrics", "[", "\"model_accuracy\"", "]", "\n", "\n", "", "return", "selected_results", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.runner.runner.Runner.compute_test_metrics": [[174, 233], ["models.gaussian_model.GaussianEmbeddingModel.from_cache_entries", "models.base.ProbingModel", "estimators.fixed_samples.FixedSamplesEstimator", "models.base.ProbingModel.get_pred_true_arrays", "y_true.cpu().tolist", "y_pred.cpu().tolist", "sklearn.metrics.precision_recall_fscore_support", "class_support.tolist.tolist.tolist", "sklearn.metrics.precision_recall_fscore_support", "sklearn.metrics.precision_recall_fscore_support", "models.base.ProbingModel.get_log_likelihood", "runner.Runner.value_model_test.entropy().item", "torch.tensor().log().item", "estimators.fixed_samples.FixedSamplesEstimator.estimate_conditional_entropy", "torch.tensor().log().item", "models.base.ProbingModel.get_accuracy().cpu().item", "sklearn.metrics.confusion_matrix().tolist", "class_precision.tolist", "class_recall.tolist", "class_f1.tolist", "models.base.ProbingModel.get_log_likelihood.cpu().item", "y_true.cpu", "y_pred.cpu", "max", "sum", "runner.Runner.value_model_test.entropy", "torch.tensor().log", "torch.tensor().log", "models.base.ProbingModel.get_accuracy().cpu", "w.get_word", "enumerate", "sklearn.metrics.confusion_matrix", "models.base.ProbingModel.get_log_likelihood.cpu", "torch.tensor", "torch.tensor", "models.base.ProbingModel.get_accuracy"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingModel.from_cache_entries", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.get_pred_true_arrays", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.get_log_likelihood", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.estimators.base.Estimator.estimate_conditional_entropy", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.entropy", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_word", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.get_accuracy"], ["", "def", "compute_test_metrics", "(", "self", ",", "candidate_dim_pool", ":", "List", "[", "int", "]", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "# Create embedding model from selected dims", "\n", "        ", "embedding_model", "=", "GaussianEmbeddingModel", ".", "from_cache_entries", "(", "\n", "self", ".", "cache_entries", ",", "select_dimensions", "=", "candidate_dim_pool", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "# Compute mutual information", "\n", "gaussian_model", "=", "ProbingModel", "(", "embedding_model", ",", "self", ".", "value_model", ",", "device", "=", "self", ".", "device", ")", "\n", "estimator", "=", "FixedSamplesEstimator", "(", "gaussian_model", ",", "self", ".", "reader_test", ",", "self", ".", "attribute", ",", "\n", "select_dimensions", "=", "candidate_dim_pool", ",", "value_model", "=", "self", ".", "value_model_test", ")", "\n", "entropy", "=", "self", ".", "value_model_test", ".", "entropy", "(", ")", ".", "item", "(", ")", "/", "torch", ".", "tensor", "(", "2.0", ")", ".", "log", "(", ")", ".", "item", "(", ")", "\n", "conditional_entropy", "=", "estimator", ".", "estimate_conditional_entropy", "(", ")", "/", "torch", ".", "tensor", "(", "2.0", ")", ".", "log", "(", ")", ".", "item", "(", ")", "\n", "mutual_information", "=", "entropy", "-", "conditional_entropy", "\n", "\n", "y_pred", ",", "y_true", ",", "words", "=", "gaussian_model", ".", "get_pred_true_arrays", "(", "\n", "self", ".", "attribute", ",", "candidate_dim_pool", ",", "self", ".", "reader_test", ")", "\n", "y_true_label", "=", "y_true", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "y_pred_label", "=", "y_pred", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "# Class-wise metrics", "\n", "class_precision", ",", "class_recall", ",", "class_f1", ",", "class_support", "=", "precision_recall_fscore_support", "(", "\n", "y_true_label", ",", "y_pred_label", ",", "average", "=", "None", ")", "\n", "# Support: the number of items for each class in y_true", "\n", "class_support", "=", "class_support", ".", "tolist", "(", ")", "\n", "\n", "# Macro metrics", "\n", "macro_precision", ",", "macro_recall", ",", "macro_f1", ",", "_", "=", "precision_recall_fscore_support", "(", "\n", "y_true_label", ",", "y_pred_label", ",", "average", "=", "\"macro\"", ")", "\n", "\n", "# Micro metrics", "\n", "micro_precision", ",", "micro_recall", ",", "micro_f1", ",", "_", "=", "precision_recall_fscore_support", "(", "\n", "y_true_label", ",", "y_pred_label", ",", "average", "=", "\"micro\"", ")", "\n", "\n", "# Log-likelihood", "\n", "log_likelihood", "=", "gaussian_model", ".", "get_log_likelihood", "(", "\n", "self", ".", "attribute", ",", "candidate_dim_pool", ",", "self", ".", "reader_test", ")", "\n", "\n", "return", "{", "\n", "\"mi\"", ":", "mutual_information", ",", "\n", "\"conditional_entropy\"", ":", "conditional_entropy", ",", "\n", "\"entropy\"", ":", "entropy", ",", "\n", "\"model_accuracy\"", ":", "gaussian_model", ".", "get_accuracy", "(", "y_pred", ",", "y_true", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "\n", "# Most common item baseline accuracy", "\n", "\"baseline_accuracy\"", ":", "max", "(", "class_support", ")", "/", "sum", "(", "class_support", ")", ",", "\n", "\"test_predictions\"", ":", "[", "{", "\n", "\"word\"", ":", "w", ".", "get_word", "(", ")", ",", "\n", "\"pred\"", ":", "y_pred_label", "[", "idx", "]", ",", "\n", "\"true\"", ":", "y_true_label", "[", "idx", "]", "\n", "}", "for", "idx", ",", "w", "in", "enumerate", "(", "words", ")", "]", ",", "\n", "\"confusion_matrix\"", ":", "confusion_matrix", "(", "y_true_label", ",", "y_pred_label", ")", ".", "tolist", "(", ")", ",", "\n", "\"class_precision\"", ":", "class_precision", ".", "tolist", "(", ")", ",", "\n", "\"class_recall\"", ":", "class_recall", ".", "tolist", "(", ")", ",", "\n", "\"class_f1\"", ":", "class_f1", ".", "tolist", "(", ")", ",", "\n", "\"macro_precision\"", ":", "macro_precision", ",", "\n", "\"macro_recall\"", ":", "macro_recall", ",", "\n", "\"macro_f1\"", ":", "macro_f1", ",", "\n", "\"micro_precision\"", ":", "micro_precision", ",", "\n", "\"micro_recall\"", ":", "micro_recall", ",", "\n", "\"micro_f1\"", ":", "micro_f1", ",", "\n", "\"log_likelihood\"", ":", "log_likelihood", ".", "cpu", "(", ")", ".", "item", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.runner.runner.Runner.draw_graphs": [[235, 246], ["utils.graph_writer.GraphWriter", "utils.graph_writer.GraphWriter.plot_mi", "utils.graph_writer.GraphWriter.plot_normalized_mi", "utils.graph_writer.GraphWriter.plot_accuracy"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.plot_mi", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.plot_normalized_mi", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.plot_accuracy"], ["", "def", "draw_graphs", "(", "self", ",", "selected_results", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "entropy", "=", "selected_results", "[", "-", "1", "]", "[", "\"entropy\"", "]", "\n", "gw", "=", "GraphWriter", "(", "selected_results", ")", "\n", "mi_fig", "=", "gw", ".", "plot_mi", "(", "entropy", ",", "practical_maximum", "=", "selected_results", "[", "-", "1", "]", "[", "\"mi_max\"", "]", ".", "nominal_value", ")", "\n", "normalized_mi_fig", "=", "gw", ".", "plot_normalized_mi", "(", "\n", "entropy", ",", "practical_maximum", "=", "selected_results", "[", "-", "1", "]", "[", "\"mi_max\"", "]", ".", "nominal_value", "/", "entropy", ")", "\n", "accuracy_fig", "=", "gw", ".", "plot_accuracy", "(", ")", "\n", "return", "{", "\n", "\"mi\"", ":", "mi_fig", ",", "\n", "\"normalized_mi\"", ":", "normalized_mi_fig", ",", "\n", "\"accuracy\"", ":", "accuracy_fig", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.runner.runner.Runner.plot_dims": [[248, 292], ["utils.graph_writer.GraphWriter.plot_dimension_scatter_graph", "cache_entry.get_value", "data.append", "points.append", "models.gaussian_model.GaussianEmbeddingModel.from_cache_entries", "models.base.ProbingModel", "models.base.ProbingModel.get_value_model().get_value_ids().expand", "torch.stack().to", "models.base.ProbingModel.log_prob_conditional", "log_probs.cpu().tolist.cpu().tolist.cpu().tolist", "zip", "reader.get_words", "w.get_word", "len", "models.base.ProbingModel.log_prob", "w.has_attribute", "models.base.ProbingModel.get_value_model().get_value_ids", "torch.stack", "log_probs.cpu().tolist.cpu().tolist.cpu", "w.get_attribute", "w.get_embedding", "w.get_embedding", "models.base.ProbingModel.get_value_model", "torch.tensor", "w.get_embedding"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.graph_writer.GraphWriter.plot_dimension_scatter_graph", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.cache.AttributeValueGaussianCacheEntry.get_value", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingModel.from_cache_entries", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.log_prob_conditional", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.get_words", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_word", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.gaussian_model.GaussianEmbeddingDistribution.log_prob", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.readers.base.Reader.has_attribute", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ValueModel.get_value_ids", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.utils.word.Word.get_attribute", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.get_embedding", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.get_embedding", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.models.base.ProbingModel.get_value_model", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.get_embedding"], ["", "def", "plot_dims", "(", "\n", "self", ",", "dim_1", ":", "int", ",", "dim_2", ":", "int", ",", "test_data", ":", "bool", "=", "False", ",", "\n", "log_prob_dim_pool", ":", "Optional", "[", "List", "[", "int", "]", "]", "=", "None", ",", "\n", "show_legend", ":", "bool", "=", "False", ")", ":", "\n", "        ", "data", ":", "GraphWriter", ".", "DimensionScatterGraphDataType", "=", "[", "]", "\n", "reader", "=", "self", ".", "reader_test", "if", "test_data", "else", "self", ".", "reader", "\n", "\n", "for", "cache_entry", "in", "self", ".", "cache_entries", ":", "\n", "            ", "value", "=", "cache_entry", ".", "get_value", "(", ")", "\n", "points", "=", "[", "]", "\n", "words", "=", "[", "\n", "w", "for", "w", "in", "reader", ".", "get_words", "(", ")", "\n", "if", "w", ".", "has_attribute", "(", "self", ".", "attribute", ")", "and", "w", ".", "get_attribute", "(", "self", ".", "attribute", ")", "==", "value", "\n", "]", "\n", "\n", "for", "w", "in", "words", ":", "\n", "# Add base info", "\n", "                ", "info", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "\n", "\"word\"", ":", "w", ".", "get_word", "(", ")", ",", "\"coordinate\"", ":", "(", "w", ".", "get_embedding", "(", ")", "[", "dim_1", "]", ",", "w", ".", "get_embedding", "(", ")", "[", "dim_2", "]", ")", "\n", "}", "\n", "\n", "points", ".", "append", "(", "info", ")", "\n", "\n", "# Add datapoint log probs if a log prob dim pool has been passed", "\n", "", "if", "log_prob_dim_pool", "is", "not", "None", ":", "\n", "                ", "embedding_model", "=", "GaussianEmbeddingModel", ".", "from_cache_entries", "(", "\n", "self", ".", "cache_entries", ",", "select_dimensions", "=", "log_prob_dim_pool", ",", "device", "=", "self", ".", "device", ")", "\n", "gaussian_model", "=", "ProbingModel", "(", "embedding_model", ",", "self", ".", "value_model", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "attribute_values", "=", "(", "gaussian_model", ".", "get_value_model", "(", ")", ".", "get_value_ids", "(", "[", "value", "]", ")", ")", ".", "expand", "(", "len", "(", "words", ")", ")", "\n", "samples", "=", "torch", ".", "stack", "(", "[", "torch", ".", "tensor", "(", "w", ".", "get_embedding", "(", ")", "[", "log_prob_dim_pool", "]", ")", "for", "w", "in", "words", "]", ",", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "log_probs_value", "=", "gaussian_model", ".", "log_prob_conditional", "(", "samples", ",", "attribute_values", ")", "\n", "log_probs", "=", "log_probs_value", "-", "gaussian_model", ".", "log_prob", "(", "samples", ")", "\n", "log_probs", "=", "log_probs", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "\n", "for", "info", ",", "log_prob", "in", "zip", "(", "points", ",", "log_probs", ")", ":", "\n", "                    ", "info", "[", "\"log_prob\"", "]", "=", "log_prob", "\n", "\n", "", "", "data", ".", "append", "(", "(", "cache_entry", ",", "points", ")", ")", "\n", "\n", "", "fig", "=", "GraphWriter", ".", "plot_dimension_scatter_graph", "(", "data", ",", "dim_1", ",", "dim_2", ",", "device", "=", "self", ".", "device", ",", "show_legend", "=", "show_legend", ")", "\n", "\n", "return", "fig", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.__init__": [[10, 20], ["os.path.exists", "open", "pickle.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cache_file", ":", "Optional", "[", "str", "]", "=", "None", ",", "update_cache", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "self", ".", "_cache_file", "=", "cache_file", "or", "None", "\n", "self", ".", "_update_cache", "=", "update_cache", "\n", "\n", "# Load cache if it is enabled.", "\n", "# Create empty cache if it doesn't exist (though this doesn't create a file)", "\n", "self", ".", "_cache", ":", "Dict", "[", "str", ",", "np", ".", "ndarray", "]", "=", "{", "}", "\n", "if", "self", ".", "_cache_file", "is", "not", "None", "and", "path", ".", "exists", "(", "self", ".", "_cache_file", ")", ":", "\n", "            ", "with", "open", "(", "self", ".", "_cache_file", ",", "\"rb\"", ")", "as", "h", ":", "\n", "                ", "self", ".", "_cache", "=", "pickle", ".", "load", "(", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.update_cache_file": [[21, 27], ["Exception", "open", "pickle.dump"], "methods", ["None"], ["", "", "", "def", "update_cache_file", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "_cache_file", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "\"Cannot update cache as it has not been enabled.\"", ")", "\n", "\n", "", "with", "open", "(", "self", ".", "_cache_file", ",", "\"wb\"", ")", "as", "h", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "_cache", ",", "h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.get_embedding": [[28, 41], ["embedders.Embedder.has_cached_word", "embedders.Embedder.compute_embedding", "embedders.Embedder.update_cache_file"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.has_cached_word", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.DummyEmbedder.compute_embedding", "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.update_cache_file"], ["", "", "def", "get_embedding", "(", "self", ",", "word", ":", "str", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "if", "self", ".", "has_cached_word", "(", "word", ")", ":", "\n", "            ", "return", "self", ".", "_cache", "[", "word", "]", "\n", "\n", "# Write new word to cache", "\n", "", "embedding", "=", "self", ".", "compute_embedding", "(", "word", ")", "\n", "self", ".", "_cache", "[", "word", "]", "=", "embedding", "\n", "\n", "# Update cache", "\n", "if", "self", ".", "_update_cache", ":", "\n", "            ", "self", ".", "update_cache_file", "(", ")", "\n", "\n", "", "return", "embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.compute_embedding": [[42, 44], ["None"], "methods", ["None"], ["", "def", "compute_embedding", "(", "self", ",", "word", ":", "str", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.get_dimensionality": [[45, 47], ["None"], "methods", ["None"], ["", "def", "get_dimensionality", "(", "self", ")", "->", "int", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.Embedder.has_cached_word": [[48, 53], ["None"], "methods", ["None"], ["", "def", "has_cached_word", "(", "self", ",", "word", ":", "str", ")", "->", "bool", ":", "\n", "        ", "if", "word", "in", "self", ".", "_cache", ":", "\n", "            ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.FastTextEmbedder.__init__": [[56, 61], ["fasttext.load_model", "embedders.Embedder.__init__"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.DummyEmbedder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding_path", ":", "str", ",", "cache_file", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "update_cache", ":", "bool", "=", "True", ")", "->", "None", ":", "\n", "        ", "self", ".", "_embeddings", "=", "fasttext", ".", "load_model", "(", "embedding_path", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "cache_file", ",", "update_cache", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.FastTextEmbedder.compute_embedding": [[62, 65], ["embedders.FastTextEmbedder._embeddings.get_word_vector"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "compute_embedding", "(", "self", ",", "word", ":", "str", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "self", ".", "_embeddings", ".", "get_word_vector", "(", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.FastTextEmbedder.get_dimensionality": [[66, 69], ["embedders.FastTextEmbedder._embeddings.get_dimension"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "get_dimensionality", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_embeddings", ".", "get_dimension", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.DummyEmbedder.__init__": [[72, 76], ["embedders.Embedder.__init__"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.DummyEmbedder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ":", "int", "=", "50", ")", ":", "\n", "        ", "self", ".", "_dim", "=", "dim", "\n", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.DummyEmbedder.compute_embedding": [[77, 80], ["numpy.random.randn", "embedders.DummyEmbedder.get_dimensionality"], "methods", ["home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.DummyEmbedder.get_dimensionality"], ["", "@", "overrides", "\n", "def", "compute_embedding", "(", "self", ",", "word", ":", "str", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "return", "np", ".", "random", ".", "randn", "(", "self", ".", "get_dimensionality", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rycolab_intrinsic-probing.embedders.embedders.DummyEmbedder.get_dimensionality": [[81, 84], ["None"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "get_dimensionality", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "_dim", "\n", "", "", ""]]}