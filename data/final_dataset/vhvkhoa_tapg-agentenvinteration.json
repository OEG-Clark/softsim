{"home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_thumos.run_evaluation": [[15, 41], ["pickle.load", "evaluation_thumos.prop_eval.pkl2dataframe", "pandas.DataFrame", "evaluation_thumos.prop_eval.average_recall_vs_nr_proposals", "open", "os.path.isfile", "pandas.read_csv", "pd.read_csv.to_csv", "pandas.read_csv", "requests.get", "io.StringIO", "s.decode"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.pkl2dataframe", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.average_recall_vs_nr_proposals"], ["def", "run_evaluation", "(", "proposal_filename", ",", "groundtruth_filename", "=", "'../datasets/thumos14/thumos14_test_groundtruth.csv'", ")", ":", "\n", "    ", "frm_nums", "=", "pickle", ".", "load", "(", "open", "(", "\"evaluation_thumos/frm_num.pkl\"", ",", "'rb'", ")", ")", "\n", "rows", "=", "prop_eval", ".", "pkl2dataframe", "(", "frm_nums", ",", "'evaluation_thumos/movie_fps.pkl'", ",", "proposal_filename", ")", "\n", "aen_results", "=", "pd", ".", "DataFrame", "(", "rows", ",", "columns", "=", "[", "'f-end'", ",", "'f-init'", ",", "'score'", ",", "'video-frames'", ",", "'video-name'", "]", ")", "\n", "\n", "# Retrieves and loads Thumos14 test set ground-truth.", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "groundtruth_filename", ")", ":", "\n", "        ", "ground_truth_url", "=", "(", "'https://gist.githubusercontent.com/cabaf/'", "\n", "'ed34a35ee4443b435c36de42c4547bd7/raw/'", "\n", "'952f17b9cdc6aa4e6d696315ba75091224f5de97/'", "\n", "'thumos14_test_groundtruth.csv'", ")", "\n", "s", "=", "requests", ".", "get", "(", "ground_truth_url", ")", ".", "content", "\n", "groundtruth", "=", "pd", ".", "read_csv", "(", "io", ".", "StringIO", "(", "s", ".", "decode", "(", "'utf-8'", ")", ")", ",", "sep", "=", "' '", ")", "\n", "groundtruth", ".", "to_csv", "(", "groundtruth_filename", ")", "\n", "", "else", ":", "\n", "        ", "groundtruth", "=", "pd", ".", "read_csv", "(", "groundtruth_filename", ")", "\n", "# Computes recall for different tiou thresholds at a fixed average number of proposals.", "\n", "", "'''\n    recall, tiou_thresholds = prop_eval.recall_vs_tiou_thresholds(aen_results, ground_truth,\n                                                        nr_proposals=nr_proposals,\n                                                        tiou_thresholds=np.linspace(0.5, 1.0, 11))\n    recall = np.mean(recall)\n    '''", "\n", "average_recall", ",", "average_nr_proposals", "=", "prop_eval", ".", "average_recall_vs_nr_proposals", "(", "aen_results", ",", "groundtruth", ")", "\n", "\n", "return", "average_recall", ",", "average_nr_proposals", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_thumos.evaluate_proposals": [[43, 53], ["eval_thumos.run_evaluation", "scipy.interpolate.interp1d", "float", "print", "scipy.interpolate.interp1d."], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_anet.run_evaluation"], ["", "def", "evaluate_proposals", "(", "cfg", ",", "nr_proposals_list", "=", "(", "50", ",", "100", ",", "200", ",", "500", ",", "1000", ")", ")", ":", "\n", "    ", "average_recall", ",", "average_nr_proposals", "=", "run_evaluation", "(", "cfg", ".", "DATA", ".", "RESULT_PATH", ")", "\n", "f", "=", "interp1d", "(", "average_nr_proposals", ",", "average_recall", ",", "axis", "=", "0", ",", "bounds_error", "=", "False", ",", "fill_value", "=", "'extrapolate'", ")", "\n", "\n", "ar_results", "=", "{", "}", "\n", "for", "nr_prop", "in", "nr_proposals_list", ":", "\n", "        ", "ar_results", "[", "nr_prop", "]", "=", "float", "(", "f", "(", "nr_prop", ")", ")", "\n", "print", "(", "\"AR@{} is {}\\n\"", ".", "format", "(", "nr_prop", ",", "ar_results", "[", "nr_prop", "]", ")", ")", "\n", "\n", "", "return", "ar_results", "[", "100", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_thumos.plot_metric": [[55, 95], ["matplotlib.figure", "matplotlib.subplot", "eval_thumos.plot_metric.plotting"], "function", ["None"], ["", "def", "plot_metric", "(", "average_nr_proposals", ",", "recalls", ",", "labels", ",", "colors", ",", "linestyles", ",", "figure_file", ")", ":", "\n", "    ", "fn_size", "=", "25", "\n", "plt", ".", "figure", "(", "num", "=", "None", ",", "figsize", "=", "(", "30", ",", "12", ")", ")", "\n", "\n", "#colors = ['#2CBDFE', '#47DBCD', '#F3A0F2', '#9D2EC5', '#661D98', '#F5B14C']", "\n", "\n", "def", "plotting", "(", "sub_ax", ",", "recs", ",", "lbs", ",", "lnstls", ",", "clrs", ")", ":", "\n", "        ", "for", "idx", ",", "rec", "in", "enumerate", "(", "recs", ")", ":", "\n", "            ", "ax", ".", "plot", "(", "average_nr_proposals", ",", "rec", ",", "color", "=", "clrs", "[", "idx", "]", ",", "\n", "label", "=", "lbs", "[", "idx", "]", ",", "\n", "linewidth", "=", "6", ",", "linestyle", "=", "lnstls", "[", "idx", "]", ",", "marker", "=", "None", ")", "\n", "", "handles", ",", "labels", "=", "ax", ".", "get_legend_handles_labels", "(", ")", "\n", "ax", ".", "legend", "(", "handles", ",", "labels", ",", "loc", "=", "'lower right'", ",", "fontsize", "=", "fn_size", ")", "\n", "\n", "plt", ".", "ylabel", "(", "'Average Recall'", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "xlabel", "(", "'Average Number of Proposals per Video'", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "\"both\"", ")", "\n", "#plt.ylim([.35, .6])", "\n", "plt", ".", "setp", "(", "ax", ".", "get_xticklabels", "(", ")", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "setp", "(", "ax", ".", "get_yticklabels", "(", ")", ",", "fontsize", "=", "fn_size", ")", "\n", "\n", "", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plotting", "(", "\n", "ax", ",", "\n", "recalls", "[", ":", "4", "]", ",", "\n", "labels", "[", ":", "4", "]", ",", "\n", "linestyles", "[", ":", "4", "]", ",", "\n", "colors", "[", ":", "4", "]", "\n", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plotting", "(", "\n", "ax", ",", "\n", "recalls", "[", "4", ":", "]", ",", "\n", "labels", "[", "4", ":", "]", ",", "\n", "linestyles", "[", "4", ":", "]", ",", "\n", "[", "colors", "[", "0", "]", "]", "+", "colors", "[", "4", ":", "]", "\n", ")", "\n", "\n", "# plt.show()", "\n", "plt", ".", "savefig", "(", "figure_file", ",", "dpi", "=", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_thumos.main_evaluate_proposals": [[97, 105], ["eval_thumos.run_evaluation", "scipy.interpolate.interp1d", "ar_results.append", "float", "scipy.interpolate.interp1d."], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_anet.run_evaluation"], ["", "def", "main_evaluate_proposals", "(", "result_file", ",", "nr_proposals_list", ")", ":", "\n", "    ", "average_recall", ",", "average_nr_proposals", "=", "run_evaluation", "(", "result_file", ")", "\n", "f", "=", "interp1d", "(", "average_nr_proposals", ",", "average_recall", ",", "axis", "=", "0", ",", "bounds_error", "=", "False", ",", "fill_value", "=", "'extrapolate'", ")", "\n", "\n", "ar_results", "=", "[", "]", "\n", "for", "nr_prop", "in", "nr_proposals_list", ":", "\n", "        ", "ar_results", ".", "append", "(", "float", "(", "f", "(", "nr_prop", ")", ")", ")", "\n", "", "return", "ar_results", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_thumos.main": [[107, 139], ["list", "tqdm.tqdm", "print", "eval_thumos.plot_metric", "range", "ar_results.append", "eval_thumos.main_evaluate_proposals", "os.path.join"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_anet.plot_metric", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_thumos.main_evaluate_proposals"], ["", "def", "main", "(", ")", ":", "\n", "    ", "result_dir", "=", "'results/ablation_study/'", "\n", "result_files", "=", "[", "\n", "'full_arch.pkl'", ",", "\n", "'act_only.pkl'", ",", "\n", "'env_only.pkl'", ",", "\n", "'no_interaction.pkl'", ",", "\n", "'full_arch.pkl'", ",", "\n", "'env+hard_attn_only.pkl'", ",", "\n", "'env+self_attn_only.pkl'", ",", "\n", "]", "\n", "labels", "=", "[", "\n", "'AEI (all spectators)'", ",", "\n", "'Actors spectator only'", ",", "\n", "'Environment spectator only'", ",", "\n", "'W/o interaction spectator'", ",", "\n", "'AEI (main actor selection and feature fusion)'", ",", "\n", "'W/o feature fusion'", ",", "\n", "'W/o main actor selection'", ",", "\n", "]", "\n", "#colors = ['#2f4858', '#55dde0', '#33658a', '#f6ae2d', '#f26419']", "\n", "#colors = ['#390099', '#9e0059', '#ff0054', '#ff5400', '#ffbd00']", "\n", "colors", "=", "[", "'tab:red'", ",", "'tab:purple'", ",", "'tab:green'", ",", "'tab:pink'", ",", "'tab:blue'", ",", "'tab:orange'", "]", "\n", "linestyles", "=", "[", "'-'", "]", "*", "7", "\n", "\n", "nr_props", "=", "list", "(", "range", "(", "50", ",", "1000", ")", ")", "\n", "\n", "ar_results", "=", "[", "]", "\n", "for", "res_file", "in", "tqdm", "(", "result_files", ")", ":", "\n", "        ", "ar_results", ".", "append", "(", "main_evaluate_proposals", "(", "os", ".", "path", ".", "join", "(", "result_dir", ",", "res_file", ")", ",", "nr_props", ")", ")", "\n", "", "print", "(", "'Finished evaluating, start plotting!'", ")", "\n", "plot_metric", "(", "nr_props", ",", "ar_results", ",", "labels", ",", "colors", ",", "linestyles", ",", "'ablation_study.png'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.main.Solver.__init__": [[30, 63], ["models.model.EventDetection().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "dataset.Collator", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "main.Solver.model.load_state_dict", "torch.AdamW", "torch.AdamW", "torch.AdamW", "dataset.Collator", "print", "models.model.EventDetection", "filter", "main.Solver.model.parameters"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "self", ".", "cfg", "=", "cfg", "\n", "self", ".", "model", "=", "EventDetection", "(", "cfg", ")", ".", "cuda", "(", ")", "\n", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ",", "device_ids", "=", "cfg", ".", "GPU_IDS", ")", "\n", "if", "cfg", ".", "MODE", "not", "in", "[", "'train'", ",", "'training'", "]", ":", "# TODO: add condition for resume feature.", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "cfg", ".", "TEST", ".", "CHECKPOINT_PATH", ")", "\n", "print", "(", "'Loaded model at epoch %d.'", "%", "checkpoint", "[", "'epoch'", "]", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "", "if", "cfg", ".", "MODE", "in", "[", "'train'", ",", "'training'", "]", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "AdamW", "(", "\n", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "cfg", ".", "TRAIN", ".", "LR", ",", "weight_decay", "=", "cfg", ".", "TRAIN", ".", "WEIGHT_DECAY", ")", "\n", "#self.scheduler = optim.lr_scheduler.StepLR(self.optimizer, step_size=10, gamma=0.1)", "\n", "self", ".", "train_collator", "=", "Collator", "(", "cfg", ",", "'train'", ")", "\n", "", "self", ".", "test_collator", "=", "Collator", "(", "cfg", ",", "'test'", ")", "\n", "\n", "self", ".", "temporal_dim", "=", "cfg", ".", "DATA", ".", "TEMPORAL_DIM", "\n", "self", ".", "max_duration", "=", "cfg", ".", "DATA", ".", "MAX_DURATION", "\n", "\n", "self", ".", "evaluate_func", "=", "None", "\n", "if", "cfg", ".", "DATASET", "==", "'anet'", ":", "\n", "            ", "if", "cfg", ".", "EVAL_TYPE", "==", "'proposal'", ":", "\n", "                ", "self", ".", "evaluate_func", "=", "anet_evaluate_prop", "\n", "", "elif", "cfg", ".", "EVAL_TYPE", "==", "'detection'", ":", "\n", "                ", "self", ".", "evaluate_func", "=", "anet_evaluate_det", "\n", "", "", "elif", "cfg", ".", "DATASET", "==", "'thumos'", ":", "\n", "            ", "if", "cfg", ".", "EVAL_TYPE", "==", "'proposal'", ":", "\n", "                ", "self", ".", "evaluate_func", "=", "thumos_evaluate_prop", "\n", "", "elif", "cfg", ".", "EVAL_TYPE", "==", "'detection'", ":", "\n", "                ", "self", ".", "evaluate_func", "=", "thumos_evaluate_det", "\n", "", "", "if", "self", ".", "evaluate_func", "is", "None", ":", "\n", "            ", "print", "(", "'Evaluation function [{}] of dataset [{}] is not implemented'", ".", "format", "(", "cfg", ".", "EVAL_TYPE", ",", "cfg", ".", "DATASET", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.main.Solver.train_epoch": [[64, 112], ["main.Solver.model.train", "main.Solver.optimizer.zero_grad", "enumerate", "print", "len", "tqdm.tqdm.tqdm", "label_start.cuda.cuda.cuda", "label_end.cuda.cuda.cuda", "label_confidence.cuda.cuda.cuda", "main.Solver.model", "loss_function.bmn_loss_func", "total_loss.backward", "main.Solver.optimizer.step", "main.Solver.optimizer.zero_grad", "enumerate", "len", "env_features.cuda", "agent_features.cuda", "agent_masks.cuda", "writer.add_scalar", "l.cpu().detach().numpy", "zip", "zip", "len", "len", "l.cpu().detach", "l.cpu"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.main.Solver.train", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.loss_function.bmn_loss_func"], ["", "", "def", "train_epoch", "(", "self", ",", "data_loader", ",", "bm_mask", ",", "epoch", ",", "writer", ")", ":", "\n", "        ", "cfg", "=", "self", ".", "cfg", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_names", "=", "[", "'Loss'", ",", "'TemLoss'", ",", "'PemLoss Regression'", ",", "'PemLoss Classification'", "]", "\n", "epoch_losses", "=", "[", "0", "]", "*", "4", "\n", "period_losses", "=", "[", "0", "]", "*", "4", "\n", "last_period_size", "=", "len", "(", "data_loader", ")", "%", "cfg", ".", "TRAIN", ".", "STEP_PERIOD", "\n", "last_period_start", "=", "cfg", ".", "TRAIN", ".", "STEP_PERIOD", "*", "(", "len", "(", "data_loader", ")", "//", "cfg", ".", "TRAIN", ".", "STEP_PERIOD", ")", "\n", "\n", "for", "n_iter", ",", "(", "env_features", ",", "agent_features", ",", "agent_masks", ",", "label_confidence", ",", "label_start", ",", "label_end", ")", "in", "enumerate", "(", "tqdm", "(", "data_loader", ")", ")", ":", "\n", "            ", "env_features", "=", "env_features", ".", "cuda", "(", ")", "if", "cfg", ".", "USE_ENV", "else", "None", "\n", "agent_features", "=", "agent_features", ".", "cuda", "(", ")", "if", "cfg", ".", "USE_AGENT", "else", "None", "\n", "agent_masks", "=", "agent_masks", ".", "cuda", "(", ")", "if", "cfg", ".", "USE_AGENT", "else", "None", "\n", "\n", "label_start", "=", "label_start", ".", "cuda", "(", ")", "\n", "label_end", "=", "label_end", ".", "cuda", "(", ")", "\n", "label_confidence", "=", "label_confidence", ".", "cuda", "(", ")", "\n", "\n", "confidence_map", ",", "start", ",", "end", "=", "self", ".", "model", "(", "env_features", ",", "agent_features", ",", "agent_masks", ")", "\n", "\n", "losses", "=", "bmn_loss_func", "(", "confidence_map", ",", "start", ",", "end", ",", "label_confidence", ",", "label_start", ",", "label_end", ",", "bm_mask", ")", "\n", "period_size", "=", "cfg", ".", "TRAIN", ".", "STEP_PERIOD", "if", "n_iter", "<", "last_period_start", "else", "last_period_size", "\n", "total_loss", "=", "losses", "[", "0", "]", "/", "period_size", "\n", "total_loss", ".", "backward", "(", ")", "\n", "\n", "losses", "=", "[", "l", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "/", "cfg", ".", "TRAIN", ".", "STEP_PERIOD", "for", "l", "in", "losses", "]", "\n", "period_losses", "=", "[", "l", "+", "pl", "for", "l", ",", "pl", "in", "zip", "(", "losses", ",", "period_losses", ")", "]", "\n", "\n", "if", "(", "n_iter", "+", "1", ")", "%", "cfg", ".", "TRAIN", ".", "STEP_PERIOD", "!=", "0", "and", "n_iter", "!=", "(", "len", "(", "data_loader", ")", "-", "1", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "epoch_losses", "=", "[", "el", "+", "pl", "for", "el", ",", "pl", "in", "zip", "(", "epoch_losses", ",", "period_losses", ")", "]", "\n", "\n", "write_step", "=", "epoch", "*", "len", "(", "data_loader", ")", "+", "n_iter", "\n", "for", "i", ",", "loss_name", "in", "enumerate", "(", "loss_names", ")", ":", "\n", "                ", "writer", ".", "add_scalar", "(", "loss_name", ",", "period_losses", "[", "i", "]", ",", "write_step", ")", "\n", "", "period_losses", "=", "[", "0", "]", "*", "4", "\n", "\n", "", "print", "(", "\n", "\"BMN training loss(epoch %d): tem_loss: %.03f, pem reg_loss: %.03f, pem cls_loss: %.03f, total_loss: %.03f\"", "%", "(", "\n", "epoch", ",", "epoch_losses", "[", "1", "]", "/", "(", "n_iter", "+", "1", ")", ",", "\n", "epoch_losses", "[", "2", "]", "/", "(", "n_iter", "+", "1", ")", ",", "\n", "epoch_losses", "[", "3", "]", "/", "(", "n_iter", "+", "1", ")", ",", "\n", "epoch_losses", "[", "0", "]", "/", "(", "n_iter", "+", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.main.Solver.train": [[113, 153], ["os.path.join", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "os.path.join", "os.makedirs", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "loss_function.get_mask().cuda", "range", "max", "os.path.isdir", "os.makedirs", "os.path.isdir", "dataset.VideoDataSet", "dataset.VideoDataSet", "main.Solver.train_epoch", "main.Solver.evaluate", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "scores.append", "str", "os.path.dirname", "os.path.dirname", "str", "loss_function.get_mask", "main.Solver.model.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "len", "max", "os.path.join", "int", "os.listdir", "run.split"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.main.Solver.train_epoch", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.evaluate", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.loss_function.get_mask"], ["", "def", "train", "(", "self", ",", "n_epochs", ")", ":", "\n", "        ", "exp_id", "=", "max", "(", "[", "0", "]", "+", "[", "int", "(", "run", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "for", "run", "in", "os", ".", "listdir", "(", "self", ".", "cfg", ".", "TRAIN", ".", "LOG_DIR", ")", "]", ")", "+", "1", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "TRAIN", ".", "LOG_DIR", ",", "'run_'", "+", "str", "(", "exp_id", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "dirname", "(", "log_dir", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "log_dir", ")", ")", "\n", "\n", "", "writer", "=", "SummaryWriter", "(", "log_dir", ")", "\n", "checkpoint_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "cfg", ".", "MODEL", ".", "CHECKPOINT_DIR", ",", "'checkpoint_'", "+", "str", "(", "exp_id", ")", ")", "\n", "assert", "not", "os", ".", "path", ".", "isdir", "(", "checkpoint_dir", ")", ",", "'Checkpoint directory %s has already been created.'", "%", "checkpoint_dir", "\n", "os", ".", "makedirs", "(", "checkpoint_dir", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "VideoDataSet", "(", "self", ".", "cfg", ",", "split", "=", "self", ".", "cfg", ".", "TRAIN", ".", "SPLIT", ")", ",", "\n", "batch_size", "=", "self", ".", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ",", "collate_fn", "=", "self", ".", "train_collator", ")", "\n", "\n", "eval_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "VideoDataSet", "(", "self", ".", "cfg", ",", "split", "=", "self", ".", "cfg", ".", "VAL", ".", "SPLIT", ")", ",", "\n", "batch_size", "=", "self", ".", "cfg", ".", "VAL", ".", "BATCH_SIZE", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ",", "collate_fn", "=", "self", ".", "test_collator", ")", "\n", "\n", "bm_mask", "=", "get_mask", "(", "self", ".", "temporal_dim", ",", "self", ".", "max_duration", ")", ".", "cuda", "(", ")", "\n", "scores", "=", "[", "]", "\n", "for", "epoch", "in", "range", "(", "n_epochs", ")", ":", "\n", "#print('Current LR: {}'.format(self.scheduler.get_last_lr()[0]))", "\n", "            ", "self", ".", "train_epoch", "(", "train_loader", ",", "bm_mask", ",", "epoch", ",", "writer", ")", "\n", "#self.scheduler.step()", "\n", "score", "=", "self", ".", "evaluate", "(", "eval_loader", ",", "self", ".", "cfg", ".", "VAL", ".", "SPLIT", ")", "\n", "\n", "state", "=", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'score'", ":", "score", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "}", "\n", "if", "len", "(", "scores", ")", "==", "0", "or", "score", ">", "max", "(", "scores", ")", ":", "\n", "                ", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "\"best_{}.pth\"", ".", "format", "(", "self", ".", "cfg", ".", "EVAL_SCORE", ")", ")", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "checkpoint_dir", ",", "\"model_{}.pth\"", ".", "format", "(", "epoch", "+", "1", ")", ")", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "self", ".", "cfg", ".", "EVAL_SCORE", ",", "score", ",", "epoch", ")", "\n", "scores", ".", "append", "(", "score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.main.Solver.evaluate": [[154, 158], ["main.Solver.inference", "main.Solver.evaluate_func"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.main.Solver.inference"], ["", "", "def", "evaluate", "(", "self", ",", "data_loader", "=", "None", ",", "split", "=", "None", ")", ":", "\n", "        ", "self", ".", "inference", "(", "data_loader", ",", "split", ",", "self", ".", "cfg", ".", "VAL", ".", "BATCH_SIZE", ")", "\n", "score", "=", "self", ".", "evaluate_func", "(", "self", ".", "cfg", ")", "# AUC if dataset=anet, AR@100 if dataset=thumos", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.main.Solver.inference": [[159, 190], ["utils.ProposalGenerator", "post_processing.PostProcessor", "main.Solver.model.eval", "main.Solver.post_processing", "os.path.isdir", "os.makedirs", "post_processing.getDatasetDict", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "dataset.VideoDataSet", "main.Solver.model", "confidence_map.cpu().numpy.cpu().numpy.cpu().numpy", "start_map.cpu().numpy.cpu().numpy.cpu().numpy", "end_map.cpu().numpy.cpu().numpy.cpu().numpy", "main.Solver.prop_gen", "zip", "env_features.cuda", "agent_features.cuda", "agent_masks.cuda", "pandas.DataFrame", "pandas.DataFrame.to_feather", "confidence_map.cpu().numpy.cpu().numpy.cpu", "start_map.cpu().numpy.cpu().numpy.cpu", "end_map.cpu().numpy.cpu().numpy.cpu"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.getDatasetDict"], ["", "def", "inference", "(", "self", ",", "data_loader", "=", "None", ",", "split", "=", "None", ",", "batch_size", "=", "None", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "'results/outputs/'", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "'results/outputs/'", ")", "\n", "\n", "", "annotations", "=", "getDatasetDict", "(", "self", ".", "cfg", ".", "DATA", ".", "ANNOTATION_FILE", ",", "split", ")", "if", "self", ".", "cfg", ".", "DATASET", "==", "'thumos'", "else", "None", "\n", "self", ".", "prop_gen", "=", "ProposalGenerator", "(", "self", ".", "temporal_dim", ",", "self", ".", "max_duration", ",", "annotations", ")", "\n", "self", ".", "post_processing", "=", "PostProcessor", "(", "self", ".", "cfg", ",", "split", ")", "\n", "if", "data_loader", "is", "None", ":", "\n", "            ", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "VideoDataSet", "(", "self", ".", "cfg", ",", "split", "=", "split", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "12", ",", "pin_memory", "=", "True", ",", "drop_last", "=", "False", ",", "collate_fn", "=", "self", ".", "test_collator", ")", "\n", "\n", "", "col_name", "=", "[", "\"xmin\"", ",", "\"xmax\"", ",", "\"xmin_score\"", ",", "\"xmax_score\"", ",", "\"clr_score\"", ",", "\"reg_score\"", ",", "\"score\"", "]", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "video_names", ",", "env_features", ",", "agent_features", ",", "agent_masks", "in", "tqdm", "(", "data_loader", ")", ":", "\n", "                ", "env_features", "=", "env_features", ".", "cuda", "(", ")", "if", "self", ".", "cfg", ".", "USE_ENV", "else", "None", "\n", "agent_features", "=", "agent_features", ".", "cuda", "(", ")", "if", "self", ".", "cfg", ".", "USE_AGENT", "else", "None", "\n", "agent_masks", "=", "agent_masks", ".", "cuda", "(", ")", "if", "self", ".", "cfg", ".", "USE_AGENT", "else", "None", "\n", "\n", "confidence_map", ",", "start_map", ",", "end_map", "=", "self", ".", "model", "(", "env_features", ",", "agent_features", ",", "agent_masks", ")", "\n", "confidence_map", "=", "confidence_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "start_map", "=", "start_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "end_map", "=", "end_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "batch_props", "=", "self", ".", "prop_gen", "(", "start_map", ",", "end_map", ",", "confidence_map", ",", "video_names", ")", "\n", "for", "video_name", ",", "new_props", "in", "zip", "(", "video_names", ",", "batch_props", ")", ":", "\n", "                    ", "new_df", "=", "pd", ".", "DataFrame", "(", "new_props", ",", "columns", "=", "col_name", ")", "\n", "new_df", ".", "to_feather", "(", "\"./results/outputs/\"", "+", "video_name", "+", "\".feather\"", ")", "\n", "", "", "", "self", ".", "post_processing", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.main.get_args": [[192, 207], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--cfg-file'", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Path to YAML config file.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "help", "=", "\"See slowfast/config/defaults.py for all options\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", "\n", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.main.main": [[209, 225], ["config.defaults.get_cfg", "config.defaults.get_cfg.freeze", "main.Solver", "config.defaults.get_cfg.merge_from_file", "config.defaults.get_cfg.merge_from_list", "main.Solver.train", "main.Solver.evaluate", "main.Solver.inference"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.config.defaults.get_cfg", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.main.Solver.train", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.evaluate", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.main.Solver.inference"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "cfg", "=", "get_cfg", "(", ")", "\n", "if", "args", ".", "cfg_file", ":", "\n", "        ", "cfg", ".", "merge_from_file", "(", "args", ".", "cfg_file", ")", "\n", "", "if", "args", ".", "opts", "is", "not", "None", ":", "\n", "        ", "cfg", ".", "merge_from_list", "(", "args", ".", "opts", ")", "\n", "", "cfg", ".", "freeze", "(", ")", "\n", "\n", "solver", "=", "Solver", "(", "cfg", ")", "\n", "\n", "if", "cfg", ".", "MODE", "in", "[", "\"train\"", ",", "\"training\"", "]", ":", "\n", "        ", "solver", ".", "train", "(", "cfg", ".", "TRAIN", ".", "NUM_EPOCHS", ")", "\n", "", "elif", "cfg", ".", "MODE", "in", "[", "'validate'", ",", "'validation'", "]", ":", "\n", "        ", "solver", ".", "evaluate", "(", "split", "=", "cfg", ".", "VAL", ".", "SPLIT", ")", "\n", "", "elif", "cfg", ".", "MODE", "in", "[", "'test'", ",", "'testing'", "]", ":", "\n", "        ", "solver", ".", "inference", "(", "split", "=", "cfg", ".", "TEST", ".", "SPLIT", ",", "batch_size", "=", "cfg", ".", "TEST", ".", "BATCH_SIZE", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_anet.load_json": [[6, 10], ["open", "json.load"], "function", ["None"], ["def", "load_json", "(", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ")", "as", "json_file", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_anet.add_topk_detection": [[12, 24], ["range", "class_scores.argsort", "detections.append"], "function", ["None"], ["", "", "def", "add_topk_detection", "(", "proposals", ",", "class_scores", ",", "class_names", ",", "k", "=", "3", ")", ":", "\n", "    ", "topk_indices", "=", "class_scores", ".", "argsort", "(", ")", "[", "-", "k", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "topk_scores", "=", "class_scores", "[", "topk_indices", "]", "\n", "\n", "detections", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "        ", "for", "proposal", "in", "proposals", ":", "\n", "            ", "detection", "=", "{", "'segment'", ":", "proposal", "[", "'segment'", "]", "}", "\n", "detection", "[", "'score'", "]", "=", "proposal", "[", "'score'", "]", "*", "topk_scores", "[", "i", "]", "\n", "detection", "[", "'label'", "]", "=", "class_names", "[", "topk_indices", "[", "i", "]", "]", "\n", "detections", ".", "append", "(", "detection", ")", "\n", "", "", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_anet.gen_detection": [[26, 42], ["eval_det_anet.load_json", "eval_det_anet.load_json", "proposals[].items", "numpy.array", "eval_det_anet.add_topk_detection", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.load_json", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.load_json", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_thumos.add_topk_detection"], ["", "def", "gen_detection", "(", "prop_file", ",", "cls_file", ",", "out_file", ")", ":", "\n", "    ", "proposals", "=", "load_json", "(", "prop_file", ")", "\n", "classifications", "=", "load_json", "(", "cls_file", ")", "\n", "class_names", "=", "classifications", "[", "'class'", "]", "\n", "detections", "=", "{", "\n", "'version'", ":", "proposals", "[", "'version'", "]", ",", "\n", "'external_data'", ":", "proposals", "[", "'external_data'", "]", ",", "\n", "'results'", ":", "{", "}", "\n", "}", "\n", "\n", "for", "video_name", ",", "results", "in", "proposals", "[", "'results'", "]", ".", "items", "(", ")", ":", "\n", "        ", "class_scores", "=", "np", ".", "array", "(", "classifications", "[", "'results'", "]", "[", "video_name", "]", ")", "\n", "detections", "[", "'results'", "]", "[", "video_name", "]", "=", "add_topk_detection", "(", "results", ",", "class_scores", ",", "class_names", ")", "\n", "\n", "", "with", "open", "(", "out_file", ",", "'w'", ")", "as", "out", ":", "\n", "        ", "json", ".", "dump", "(", "detections", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_anet.evaluate_detections": [[44, 65], ["print", "eval_det_anet.gen_detection", "print", "ANETdetection", "ANETdetection.evaluate", "print", "zip"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_thumos.gen_detection", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.evaluate"], ["", "", "def", "evaluate_detections", "(", "cfg", ",", "out_file", "=", "None", ",", "verbose", "=", "False", ",", "check_status", "=", "True", ")", ":", "\n", "    ", "prop_file", "=", "cfg", ".", "DATA", ".", "RESULT_PATH", "\n", "cls_file", "=", "cfg", ".", "DATA", ".", "CLASSIFICATION_PATH", "\n", "gt_file", "=", "cfg", ".", "DATA", ".", "ANNOTATION_FILE", "\n", "if", "out_file", "is", "None", ":", "\n", "        ", "out_file", "=", "prop_file", "\n", "", "print", "(", "\"Detection processing start\"", ")", "\n", "gen_detection", "(", "prop_file", ",", "cls_file", ",", "out_file", ")", "\n", "print", "(", "\"Detection processing finished\"", ")", "\n", "\n", "from", "evaluation_anet", ".", "eval_detection", "import", "ANETdetection", "\n", "anet_detection", "=", "ANETdetection", "(", "\n", "ground_truth_filename", "=", "gt_file", ",", "\n", "prediction_filename", "=", "out_file", ",", "\n", "subset", "=", "'validation'", ",", "verbose", "=", "verbose", ",", "check_status", "=", "check_status", ")", "\n", "anet_detection", ".", "evaluate", "(", ")", "\n", "\n", "mAP_at_tIoU", "=", "[", "f'mAP@{t:.2f}: {mAP*100:.3f}'", "for", "t", ",", "mAP", "in", "zip", "(", "anet_detection", ".", "tiou_thresholds", ",", "anet_detection", ".", "mAP", ")", "]", "\n", "results", "=", "'Detection: average-mAP {:.3f}.\\n'", ".", "format", "(", "anet_detection", ".", "average_mAP", "*", "100", ")", "+", "'\\n'", ".", "join", "(", "mAP_at_tIoU", ")", "\n", "print", "(", "results", ")", "\n", "return", "anet_detection", ".", "average_mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_anet.get_det_scores": [[67, 87], ["print", "eval_det_anet.gen_detection", "print"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_thumos.gen_detection"], ["", "def", "get_det_scores", "(", "prop_file", ",", "cls_file", ",", "gt_file", ",", "out_file", "=", "None", ",", "verbose", "=", "False", ",", "check_status", "=", "False", ")", ":", "\n", "    ", "if", "out_file", "is", "None", ":", "\n", "        ", "out_file", "=", "prop_file", "\n", "", "print", "(", "\"Detection processing start\"", ")", "\n", "gen_detection", "(", "prop_file", ",", "cls_file", ",", "out_file", ")", "\n", "print", "(", "\"Detection processing finished\"", ")", "\n", "\n", "'''\n    from evaluation_anet.eval_detection import ANETdetection\n    anet_detection = ANETdetection(\n        ground_truth_filename=gt_file,\n        prediction_filename=out_file,\n        subset='validation', verbose=verbose, check_status=check_status)\n    anet_detection.evaluate()\n\n    mAP_at_tIoU = [f'mAP@{t:.2f}: {mAP*100:.3f}' for t, mAP in zip(anet_detection.tiou_thresholds, anet_detection.mAP)]\n    results = 'Detection: average-mAP {:.3f}.\\n'.format(anet_detection.average_mAP * 100) + '\\n'.join(mAP_at_tIoU)\n    print(results)\n    return anet_detection.average_mAP\n    '''", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_anet.run_evaluation": [[9, 25], ["numpy.linspace", "eval_proposal.ANETproposal", "eval_proposal.ANETproposal.evaluate"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.evaluate"], ["def", "run_evaluation", "(", "ground_truth_filename", ",", "proposal_filename", ",", "\n", "max_avg_nr_proposals", "=", "100", ",", "\n", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ",", "\n", "subset", "=", "'validation'", ")", ":", "\n", "\n", "    ", "anet_proposal", "=", "ANETproposal", "(", "ground_truth_filename", ",", "proposal_filename", ",", "\n", "tiou_thresholds", "=", "tiou_thresholds", ",", "\n", "max_avg_nr_proposals", "=", "max_avg_nr_proposals", ",", "\n", "subset", "=", "subset", ",", "verbose", "=", "True", ",", "check_status", "=", "True", ")", "\n", "auc_score", "=", "anet_proposal", ".", "evaluate", "(", ")", "\n", "\n", "recall", "=", "anet_proposal", ".", "recall", "\n", "average_recall", "=", "anet_proposal", ".", "avg_recall", "\n", "average_nr_proposals", "=", "anet_proposal", ".", "proposals_per_video", "\n", "\n", "return", "(", "average_nr_proposals", ",", "average_recall", ",", "recall", ",", "auc_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_anet.plot_metric": [[27, 57], ["numpy.linspace", "matplotlib.figure", "matplotlib.subplot", "numpy.zeros_like", "range", "enumerate", "plt.subplot.plot", "plt.subplot.get_legend_handles_labels", "plt.subplot.legend", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.grid", "matplotlib.ylim", "matplotlib.setp", "matplotlib.setp", "matplotlib.savefig", "numpy.trapz", "plt.subplot.plot", "plt.subplot.get_xticklabels", "plt.subplot.get_yticklabels", "str", "str", "int", "str", "int", "numpy.trapz"], "function", ["None"], ["", "def", "plot_metric", "(", "cfg", ",", "average_nr_proposals", ",", "average_recall", ",", "recall", ",", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ")", ":", "\n", "    ", "fn_size", "=", "14", "\n", "plt", ".", "figure", "(", "num", "=", "None", ",", "figsize", "=", "(", "12", ",", "8", ")", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "1", ",", "1", ")", "\n", "\n", "colors", "=", "[", "'k'", ",", "'r'", ",", "'yellow'", ",", "'b'", ",", "'c'", ",", "'m'", ",", "'b'", ",", "'pink'", ",", "'lawngreen'", ",", "'indigo'", "]", "\n", "area_under_curve", "=", "np", ".", "zeros_like", "(", "tiou_thresholds", ")", "\n", "for", "i", "in", "range", "(", "recall", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "area_under_curve", "[", "i", "]", "=", "np", ".", "trapz", "(", "recall", "[", "i", "]", ",", "average_nr_proposals", ")", "\n", "\n", "", "for", "idx", ",", "tiou", "in", "enumerate", "(", "tiou_thresholds", "[", ":", ":", "2", "]", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "average_nr_proposals", ",", "recall", "[", "2", "*", "idx", ",", ":", "]", ",", "color", "=", "colors", "[", "idx", "+", "1", "]", ",", "\n", "label", "=", "\"tiou=[\"", "+", "str", "(", "tiou", ")", "+", "\"], area=\"", "+", "str", "(", "int", "(", "area_under_curve", "[", "2", "*", "idx", "]", "*", "100", ")", "/", "100.", ")", ",", "\n", "linewidth", "=", "4", ",", "linestyle", "=", "'--'", ",", "marker", "=", "None", ")", "\n", "# Plots Average Recall vs Average number of proposals.", "\n", "", "ax", ".", "plot", "(", "average_nr_proposals", ",", "average_recall", ",", "color", "=", "colors", "[", "0", "]", ",", "\n", "label", "=", "\"tiou = 0.5:0.05:0.95,\"", "+", "\" area=\"", "+", "str", "(", "int", "(", "np", ".", "trapz", "(", "average_recall", ",", "average_nr_proposals", ")", "*", "100", ")", "/", "100.", ")", ",", "\n", "linewidth", "=", "4", ",", "linestyle", "=", "'-'", ",", "marker", "=", "None", ")", "\n", "\n", "handles", ",", "labels", "=", "ax", ".", "get_legend_handles_labels", "(", ")", "\n", "ax", ".", "legend", "(", "[", "handles", "[", "-", "1", "]", "]", "+", "handles", "[", ":", "-", "1", "]", ",", "[", "labels", "[", "-", "1", "]", "]", "+", "labels", "[", ":", "-", "1", "]", ",", "loc", "=", "'best'", ")", "\n", "\n", "plt", ".", "ylabel", "(", "'Average Recall'", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "xlabel", "(", "'Average Number of Proposals per Video'", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "\"both\"", ")", "\n", "plt", ".", "ylim", "(", "[", "0", ",", "1.0", "]", ")", "\n", "plt", ".", "setp", "(", "ax", ".", "get_xticklabels", "(", ")", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "setp", "(", "ax", ".", "get_yticklabels", "(", ")", ",", "fontsize", "=", "fn_size", ")", "\n", "# plt.show()", "\n", "plt", ".", "savefig", "(", "cfg", ".", "DATA", ".", "FIGURE_PATH", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_anet.evaluate_proposals": [[59, 74], ["eval_anet.run_evaluation", "eval_anet.plot_metric", "print", "print", "print", "print", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.linspace"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_anet.run_evaluation", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_anet.plot_metric"], ["", "def", "evaluate_proposals", "(", "cfg", ")", ":", "\n", "    ", "uniform_average_nr_proposals_valid", ",", "uniform_average_recall_valid", ",", "uniform_recall_valid", ",", "auc_score", "=", "run_evaluation", "(", "\n", "cfg", ".", "DATA", ".", "ANNOTATION_FILE", ",", "\n", "cfg", ".", "DATA", ".", "RESULT_PATH", ",", "\n", "max_avg_nr_proposals", "=", "100", ",", "\n", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ",", "\n", "subset", "=", "'validation'", ")", "\n", "\n", "plot_metric", "(", "cfg", ",", "uniform_average_nr_proposals_valid", ",", "uniform_average_recall_valid", ",", "uniform_recall_valid", ")", "\n", "print", "(", "\"AR@1 is \\t\"", ",", "np", ".", "mean", "(", "uniform_recall_valid", "[", ":", ",", "0", "]", ")", ")", "\n", "print", "(", "\"AR@5 is \\t\"", ",", "np", ".", "mean", "(", "uniform_recall_valid", "[", ":", ",", "4", "]", ")", ")", "\n", "print", "(", "\"AR@10 is \\t\"", ",", "np", ".", "mean", "(", "uniform_recall_valid", "[", ":", ",", "9", "]", ")", ")", "\n", "print", "(", "\"AR@100 is \\t\"", ",", "np", ".", "mean", "(", "uniform_recall_valid", "[", ":", ",", "-", "1", "]", ")", ")", "\n", "\n", "return", "auc_score", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.Collator.__init__": [[20, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "mode", ")", ":", "\n", "        ", "self", ".", "is_train", "=", "mode", "in", "[", "'train'", ",", "'training'", "]", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "batch_names", "=", "[", "'env_feats'", ",", "'agent_feats'", ",", "'box_lens'", ",", "'conf_labels'", ",", "'start_labels'", ",", "'end_labels'", "]", "\n", "self", ".", "label_names", "=", "[", "'conf_labels'", ",", "'start_labels'", ",", "'end_labels'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "batch_names", "=", "[", "'video_ids'", ",", "'env_feats'", ",", "'agent_feats'", ",", "'box_lens'", "]", "\n", "self", ".", "label_names", "=", "[", "]", "\n", "", "self", ".", "feat_names", "=", "[", "'env_feats'", ",", "'agent_feats'", ",", "'box_lens'", "]", "\n", "self", ".", "tmp_dim", "=", "cfg", ".", "DATA", ".", "TEMPORAL_DIM", "\n", "self", ".", "feat_dim", "=", "cfg", ".", "MODEL", ".", "AGENT_DIM", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.Collator.process_features": [[32, 56], ["torch.stack", "torch.stack", "torch.max().item", "torch.zeros", "enumerate", "enumerate", "torch.max", "torch.arange", "len", "torch.tensor", "len"], "methods", ["None"], ["", "def", "process_features", "(", "self", ",", "bsz", ",", "env_feats", ",", "agent_feats", ",", "box_lens", ")", ":", "\n", "        ", "if", "env_feats", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "env_feats", "=", "torch", ".", "stack", "(", "env_feats", ")", "\n", "", "else", ":", "\n", "            ", "env_feats", "=", "None", "\n", "\n", "# Make new order to inputs by their lengths (long-to-short)", "\n", "", "if", "agent_feats", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "box_lens", "=", "torch", ".", "stack", "(", "box_lens", ",", "dim", "=", "0", ")", "\n", "\n", "max_box_dim", "=", "torch", ".", "max", "(", "box_lens", ")", ".", "item", "(", ")", "\n", "# Make padding mask for self-attention", "\n", "agent_mask", "=", "torch", ".", "arange", "(", "max_box_dim", ")", "[", "None", ",", "None", ",", ":", "]", "<", "box_lens", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "# Pad agent features at temporal and box dimension", "\n", "pad_agent_feats", "=", "torch", ".", "zeros", "(", "bsz", ",", "self", ".", "tmp_dim", ",", "max_box_dim", ",", "self", ".", "feat_dim", ")", "\n", "for", "i", ",", "temporal_features", "in", "enumerate", "(", "agent_feats", ")", ":", "\n", "                ", "for", "j", ",", "box_features", "in", "enumerate", "(", "temporal_features", ")", ":", "\n", "                    ", "if", "len", "(", "box_features", ")", ">", "0", ":", "\n", "                        ", "pad_agent_feats", "[", "i", ",", "j", ",", ":", "len", "(", "box_features", ")", "]", "=", "torch", ".", "tensor", "(", "box_features", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "pad_agent_feats", "=", "None", "\n", "agent_mask", "=", "None", "\n", "", "return", "env_feats", ",", "pad_agent_feats", ",", "agent_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.Collator.__call__": [[57, 69], ["dict", "len", "output_batch.extend", "zip", "dataset.Collator.process_features", "output_batch.append", "zip", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.Collator.process_features"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "input_batch", "=", "dict", "(", "zip", "(", "self", ".", "batch_names", ",", "zip", "(", "*", "batch", ")", ")", ")", "\n", "bsz", "=", "len", "(", "input_batch", "[", "'env_feats'", "]", ")", "\n", "output_batch", "=", "[", "]", "if", "self", ".", "is_train", "else", "[", "input_batch", "[", "'video_ids'", "]", "]", "\n", "\n", "# Process environment and agent features", "\n", "input_feats", "=", "[", "input_batch", "[", "feat_name", "]", "for", "feat_name", "in", "self", ".", "feat_names", "]", "\n", "output_batch", ".", "extend", "(", "self", ".", "process_features", "(", "bsz", ",", "*", "input_feats", ")", ")", "\n", "\n", "for", "label_name", "in", "self", ".", "label_names", ":", "\n", "            ", "output_batch", ".", "append", "(", "torch", ".", "stack", "(", "input_batch", "[", "label_name", "]", ")", ")", "\n", "", "return", "output_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.VideoDataSet.__init__": [[72, 91], ["dataset.VideoDataSet._get_dataset", "dataset.VideoDataSet._get_match_map"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.VideoDataSet._get_dataset", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.VideoDataSet._get_match_map"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "split", "=", "'training'", ")", ":", "\n", "        ", "self", ".", "split", "=", "split", "\n", "self", ".", "dataset_name", "=", "cfg", ".", "DATASET", "\n", "self", ".", "video_anno_path", "=", "cfg", ".", "DATA", ".", "ANNOTATION_FILE", "\n", "self", ".", "temporal_dim", "=", "cfg", ".", "DATA", ".", "TEMPORAL_DIM", "\n", "self", ".", "max_duration", "=", "cfg", ".", "DATA", ".", "MAX_DURATION", "\n", "self", ".", "temporal_gap", "=", "1.", "/", "self", ".", "temporal_dim", "\n", "self", ".", "env_feature_dir", "=", "cfg", ".", "DATA", ".", "ENV_FEATURE_DIR", "\n", "self", ".", "agent_feature_dir", "=", "cfg", ".", "DATA", ".", "AGENT_FEATURE_DIR", "\n", "\n", "self", ".", "use_env", "=", "cfg", ".", "USE_ENV", "\n", "self", ".", "use_agent", "=", "cfg", ".", "USE_AGENT", "\n", "\n", "if", "split", "in", "[", "'train'", ",", "'training'", "]", ":", "\n", "            ", "self", ".", "_get_match_map", "(", ")", "\n", "\n", "", "self", ".", "video_prefix", "=", "'v_'", "if", "cfg", ".", "DATASET", "==", "'anet'", "else", "''", "\n", "\n", "self", ".", "_get_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.VideoDataSet._get_match_map": [[92, 108], ["range", "numpy.array", "numpy.transpose", "numpy.reshape", "range", "numpy.reshape.append", "tmp_match_window.append", "range", "range"], "methods", ["None"], ["", "def", "_get_match_map", "(", "self", ")", ":", "\n", "        ", "match_map", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "self", ".", "temporal_dim", ")", ":", "\n", "            ", "tmp_match_window", "=", "[", "]", "\n", "xmin", "=", "self", ".", "temporal_gap", "*", "idx", "\n", "for", "jdx", "in", "range", "(", "1", ",", "self", ".", "max_duration", "+", "1", ")", ":", "\n", "                ", "xmax", "=", "xmin", "+", "self", ".", "temporal_gap", "*", "jdx", "\n", "tmp_match_window", ".", "append", "(", "[", "xmin", ",", "xmax", "]", ")", "\n", "", "match_map", ".", "append", "(", "tmp_match_window", ")", "\n", "", "match_map", "=", "np", ".", "array", "(", "match_map", ")", "# 100x100x2", "\n", "match_map", "=", "np", ".", "transpose", "(", "match_map", ",", "[", "1", ",", "0", ",", "2", "]", ")", "# [0,1] [1,2] [2,3].....[99,100]", "\n", "match_map", "=", "np", ".", "reshape", "(", "match_map", ",", "[", "-", "1", ",", "2", "]", ")", "# [0,2] [1,3] [2,4].....[99,101]   # duration x start", "\n", "self", ".", "match_map", "=", "match_map", "\n", "\n", "self", ".", "anchor_xmin", "=", "[", "self", ".", "temporal_gap", "*", "(", "i", "-", "0.5", ")", "for", "i", "in", "range", "(", "self", ".", "temporal_dim", ")", "]", "\n", "self", ".", "anchor_xmax", "=", "[", "self", ".", "temporal_gap", "*", "(", "i", "+", "0.5", ")", "for", "i", "in", "range", "(", "1", ",", "self", ".", "temporal_dim", "+", "1", ")", "]", "\n", "# self.anchor_xmin = [self.temporal_gap * i for i in range(self.temporal_dim)]", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.VideoDataSet.get_filter_video_names": [[111, 144], ["list", "range", "len", "os.path.isfile", "filter_video_names.append", "len", "max", "max", "gt_lens.append", "numpy.mean", "os.path.join", "min", "min", "filter_video_names.append", "augment_video_names.append"], "methods", ["None"], ["", "def", "get_filter_video_names", "(", "self", ",", "json_data", ",", "upper_thresh", "=", ".98", ",", "lower_thresh", "=", ".3", ")", ":", "\n", "        ", "\"\"\"\n        Select video according to length of ground truth\n        :param video_info_file: json file path of video information\n        :param gt_len_thres: max length of ground truth\n        :return: list of video names\n        \"\"\"", "\n", "filter_video_names", ",", "augment_video_names", "=", "[", "]", ",", "[", "]", "\n", "video_lists", "=", "list", "(", "json_data", ")", "\n", "for", "video_name", "in", "video_lists", ":", "\n", "            ", "video_info", "=", "json_data", "[", "video_name", "]", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "self", ".", "env_feature_dir", ",", "'v_'", "+", "video_name", "+", "'.json'", ")", ")", ":", "\n", "                ", "filter_video_names", ".", "append", "(", "video_name", ")", "\n", "continue", "\n", "", "if", "video_info", "[", "'subset'", "]", "!=", "\"training\"", ":", "\n", "                ", "continue", "\n", "", "video_second", "=", "video_info", "[", "\"duration\"", "]", "\n", "gt_lens", "=", "[", "]", "\n", "video_labels", "=", "video_info", "[", "\"annotations\"", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "video_labels", ")", ")", ":", "\n", "                ", "tmp_info", "=", "video_labels", "[", "j", "]", "\n", "tmp_start", "=", "tmp_info", "[", "\"segment\"", "]", "[", "0", "]", "\n", "tmp_end", "=", "tmp_info", "[", "\"segment\"", "]", "[", "1", "]", "\n", "tmp_start", "=", "max", "(", "min", "(", "1", ",", "tmp_start", "/", "video_second", ")", ",", "0", ")", "\n", "tmp_end", "=", "max", "(", "min", "(", "1", ",", "tmp_end", "/", "video_second", ")", ",", "0", ")", "\n", "gt_lens", ".", "append", "(", "tmp_end", "-", "tmp_start", ")", "\n", "", "if", "len", "(", "gt_lens", ")", ":", "\n", "                ", "mean_len", "=", "np", ".", "mean", "(", "gt_lens", ")", "\n", "if", "mean_len", ">=", "upper_thresh", ":", "\n", "                    ", "filter_video_names", ".", "append", "(", "video_name", ")", "\n", "", "if", "mean_len", "<", "lower_thresh", ":", "\n", "                    ", "augment_video_names", ".", "append", "(", "video_name", ")", "\n", "", "", "", "return", "filter_video_names", ",", "augment_video_names", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.VideoDataSet._get_dataset": [[145, 169], ["annotations.items", "print", "dataset.load_json", "dataset.VideoDataSet.get_filter_video_names", "dataset.VideoDataSet.video_ids.append", "dataset.VideoDataSet.video_ids.extend", "len"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.load_json", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.VideoDataSet.get_filter_video_names"], ["", "def", "_get_dataset", "(", "self", ")", ":", "\n", "        ", "annotations", "=", "load_json", "(", "self", ".", "video_anno_path", ")", "[", "'database'", "]", "\n", "if", "self", ".", "dataset_name", "==", "'anet'", ":", "\n", "            ", "filter_video_names", ",", "augment_video_names", "=", "self", ".", "get_filter_video_names", "(", "annotations", ")", "\n", "", "else", ":", "\n", "            ", "filter_video_names", ",", "augment_video_names", "=", "[", "]", ",", "[", "]", "\n", "\n", "# Read event segments", "\n", "", "self", ".", "event_dict", "=", "{", "}", "\n", "self", ".", "video_ids", "=", "[", "]", "\n", "\n", "for", "video_id", ",", "annotation", "in", "annotations", ".", "items", "(", ")", ":", "\n", "            ", "if", "annotation", "[", "'subset'", "]", "!=", "self", ".", "split", "or", "video_id", "in", "filter_video_names", ":", "\n", "                ", "continue", "\n", "", "self", ".", "event_dict", "[", "video_id", "]", "=", "{", "\n", "'duration'", ":", "annotation", "[", "'duration'", "]", ",", "\n", "'events'", ":", "annotation", "[", "'annotations'", "]", "\n", "# 'events': annotation['timestamps']", "\n", "}", "\n", "self", ".", "video_ids", ".", "append", "(", "video_id", ")", "\n", "", "if", "self", ".", "split", "in", "[", "'train'", ",", "'training'", "]", ":", "\n", "            ", "self", ".", "video_ids", ".", "extend", "(", "augment_video_names", ")", "\n", "\n", "", "print", "(", "\"Split: %s. Dataset size: %d\"", "%", "(", "self", ".", "split", ",", "len", "(", "self", ".", "video_ids", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.VideoDataSet.__getitem__": [[170, 177], ["dataset.VideoDataSet._load_item", "dataset.VideoDataSet._get_train_label"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.VideoDataSet._load_item", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.VideoDataSet._get_train_label"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "env_features", ",", "agent_features", ",", "box_lengths", "=", "self", ".", "_load_item", "(", "index", ")", "\n", "if", "self", ".", "split", "==", "'training'", ":", "\n", "            ", "match_score_start", ",", "match_score_end", ",", "confidence_score", "=", "self", ".", "_get_train_label", "(", "index", ")", "\n", "return", "env_features", ",", "agent_features", ",", "box_lengths", ",", "confidence_score", ",", "match_score_start", ",", "match_score_end", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "video_ids", "[", "index", "]", ",", "env_features", ",", "agent_features", ",", "box_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.VideoDataSet._load_item": [[178, 214], ["torch.tensor().float().squeeze", "torch.tensor", "dataset.load_json", "dataset.load_json", "os.path.join", "torch.tensor().float", "os.path.join", "len", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.load_json", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.load_json"], ["", "", "def", "_load_item", "(", "self", ",", "index", ")", ":", "\n", "        ", "video_name", "=", "self", ".", "video_prefix", "+", "self", ".", "video_ids", "[", "index", "]", "\n", "\n", "'''\n        Read environment features at every timestamp\n        Feature size: TxF\n        T: number of timestamps\n        F: feature size\n        '''", "\n", "if", "self", ".", "use_env", "is", "True", ":", "\n", "            ", "env_features", "=", "load_json", "(", "os", ".", "path", ".", "join", "(", "self", ".", "env_feature_dir", ",", "video_name", "+", "'.json'", ")", ")", "[", "'video_features'", "]", "\n", "# env_segments = [env['segment'] for env in env_features]", "\n", "env_features", "=", "torch", ".", "tensor", "(", "[", "feature", "[", "'features'", "]", "for", "feature", "in", "env_features", "]", ")", ".", "float", "(", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "env_features", "=", "None", "\n", "\n", "", "'''\n        Read agents features at every timestamp\n        Feature size: TxBxF\n        T: number of timestamps\n        B: max number of bounding boxes\n        F: feature size\n        '''", "\n", "if", "self", ".", "use_agent", "is", "True", ":", "\n", "            ", "agent_features", "=", "load_json", "(", "os", ".", "path", ".", "join", "(", "self", ".", "agent_feature_dir", ",", "video_name", "+", "'.json'", ")", ")", "[", "'video_features'", "]", "\n", "# agent_segments = [feature['segment'] for feature in agent_features]", "\n", "agent_features", "=", "[", "feature", "[", "'features'", "]", "for", "feature", "in", "agent_features", "]", "\n", "# Create and pad agent_box_lengths if train", "\n", "box_lengths", "=", "torch", ".", "tensor", "(", "[", "len", "(", "x", ")", "for", "x", "in", "agent_features", "]", ")", "\n", "", "else", ":", "\n", "            ", "agent_features", "=", "None", "\n", "box_lengths", "=", "None", "\n", "\n", "# assert env_segments == agent_segments and len(env_segments) == 100, 'Two streams must have 100 segments.'", "\n", "\n", "", "return", "env_features", ",", "agent_features", ",", "box_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.VideoDataSet._get_train_label": [[215, 266], ["range", "numpy.array", "numpy.max", "torch.Tensor", "numpy.array", "numpy.stack", "numpy.stack", "range", "range", "torch.tensor", "torch.tensor", "len", "max", "max", "numpy.array.append", "utils.iou_with_anchors", "numpy.reshape", "torch.Tensor.append", "len", "torch.tensor.append", "len", "torch.tensor.append", "min", "min", "numpy.max", "numpy.max", "utils.ioa_with_anchors", "utils.ioa_with_anchors"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.utils.iou_with_anchors", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.utils.ioa_with_anchors", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.utils.ioa_with_anchors"], ["", "def", "_get_train_label", "(", "self", ",", "index", ")", ":", "\n", "        ", "video_id", "=", "self", ".", "video_ids", "[", "index", "]", "\n", "video_info", "=", "self", ".", "event_dict", "[", "video_id", "]", "\n", "video_labels", "=", "video_info", "[", "'events'", "]", "# the measurement is second, not frame", "\n", "duration", "=", "video_info", "[", "'duration'", "]", "\n", "\n", "##############################################################################################", "\n", "# change the measurement from second to percentage", "\n", "gt_bbox", "=", "[", "]", "\n", "gt_iou_map", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "video_labels", ")", ")", ":", "\n", "            ", "tmp_info", "=", "video_labels", "[", "j", "]", "\n", "tmp_start", "=", "max", "(", "min", "(", "1", ",", "tmp_info", "[", "'segment'", "]", "[", "0", "]", "/", "duration", ")", ",", "0", ")", "\n", "tmp_end", "=", "max", "(", "min", "(", "1", ",", "tmp_info", "[", "'segment'", "]", "[", "1", "]", "/", "duration", ")", ",", "0", ")", "\n", "gt_bbox", ".", "append", "(", "[", "tmp_start", ",", "tmp_end", "]", ")", "\n", "tmp_gt_iou_map", "=", "iou_with_anchors", "(", "\n", "self", ".", "match_map", "[", ":", ",", "0", "]", ",", "self", ".", "match_map", "[", ":", ",", "1", "]", ",", "tmp_start", ",", "tmp_end", ")", "\n", "tmp_gt_iou_map", "=", "np", ".", "reshape", "(", "tmp_gt_iou_map", ",", "\n", "[", "self", ".", "max_duration", ",", "self", ".", "temporal_dim", "]", ")", "\n", "gt_iou_map", ".", "append", "(", "tmp_gt_iou_map", ")", "\n", "", "gt_iou_map", "=", "np", ".", "array", "(", "gt_iou_map", ")", "\n", "gt_iou_map", "=", "np", ".", "max", "(", "gt_iou_map", ",", "axis", "=", "0", ")", "\n", "gt_iou_map", "=", "torch", ".", "Tensor", "(", "gt_iou_map", ")", "\n", "##############################################################################################", "\n", "\n", "##############################################################################################", "\n", "# generate R_s and R_e", "\n", "gt_bbox", "=", "np", ".", "array", "(", "gt_bbox", ")", "\n", "gt_xmins", "=", "gt_bbox", "[", ":", ",", "0", "]", "\n", "gt_xmaxs", "=", "gt_bbox", "[", ":", ",", "1", "]", "\n", "# gt_lens = gt_xmaxs - gt_xmins", "\n", "gt_len_small", "=", "3", "*", "self", ".", "temporal_gap", "# np.maximum(self.temporal_gap, self.boundary_ratio * gt_lens)", "\n", "gt_start_bboxs", "=", "np", ".", "stack", "(", "(", "gt_xmins", "-", "gt_len_small", "/", "2", ",", "gt_xmins", "+", "gt_len_small", "/", "2", ")", ",", "axis", "=", "1", ")", "\n", "gt_end_bboxs", "=", "np", ".", "stack", "(", "(", "gt_xmaxs", "-", "gt_len_small", "/", "2", ",", "gt_xmaxs", "+", "gt_len_small", "/", "2", ")", ",", "axis", "=", "1", ")", "\n", "##############################################################################################", "\n", "\n", "##############################################################################################", "\n", "# calculate the ioa for all timestamp", "\n", "match_score_start", "=", "[", "]", "\n", "for", "jdx", "in", "range", "(", "len", "(", "self", ".", "anchor_xmin", ")", ")", ":", "\n", "            ", "match_score_start", ".", "append", "(", "np", ".", "max", "(", "\n", "ioa_with_anchors", "(", "self", ".", "anchor_xmin", "[", "jdx", "]", ",", "self", ".", "anchor_xmax", "[", "jdx", "]", ",", "gt_start_bboxs", "[", ":", ",", "0", "]", ",", "gt_start_bboxs", "[", ":", ",", "1", "]", ")", ")", ")", "\n", "", "match_score_end", "=", "[", "]", "\n", "for", "jdx", "in", "range", "(", "len", "(", "self", ".", "anchor_xmin", ")", ")", ":", "\n", "            ", "match_score_end", ".", "append", "(", "np", ".", "max", "(", "\n", "ioa_with_anchors", "(", "self", ".", "anchor_xmin", "[", "jdx", "]", ",", "self", ".", "anchor_xmax", "[", "jdx", "]", ",", "gt_end_bboxs", "[", ":", ",", "0", "]", ",", "gt_end_bboxs", "[", ":", ",", "1", "]", ")", ")", ")", "\n", "", "match_score_start", "=", "torch", ".", "tensor", "(", "match_score_start", ")", "\n", "match_score_end", "=", "torch", ".", "tensor", "(", "match_score_end", ")", "\n", "##############################################################################################", "\n", "\n", "return", "match_score_start", ",", "match_score_end", ",", "gt_iou_map", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.VideoDataSet.__len__": [[267, 269], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "video_ids", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.dataset.load_json": [[13, 17], ["open", "json.load"], "function", ["None"], ["def", "load_json", "(", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ")", "as", "json_file", ":", "\n", "        ", "json_data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "return", "json_data", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.PostProcessor.__init__": [[77, 109], ["post_processing.getDatasetDict", "list", "multiprocessing.Manager().dict", "post_processing.PostProcessor.video_dict.keys", "multiprocessing.Manager", "post_processing.get_durations", "collections.defaultdict", "post_processing.PostProcessor.video_groups[].append", "sorted", "int", "video_name.split", "x.split"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.getDatasetDict", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.get_durations"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ",", "split", ")", ":", "\n", "        ", "self", ".", "result_path", "=", "cfg", ".", "DATA", ".", "RESULT_PATH", "\n", "\n", "self", ".", "snms_alpha", "=", "cfg", ".", "BMN", ".", "POST_PROCESS", ".", "SOFT_NMS_ALPHA", "\n", "self", ".", "snms_t1", "=", "cfg", ".", "BMN", ".", "POST_PROCESS", ".", "SOFT_NMS_LOW_THRESHOLD", "\n", "self", ".", "snms_t2", "=", "cfg", ".", "BMN", ".", "POST_PROCESS", ".", "SOFT_NMS_HIGH_THRESHOLD", "\n", "self", ".", "nms_thresh", "=", "cfg", ".", "BMN", ".", "POST_PROCESS", ".", "HARD_NMS_THRESHOLD", "\n", "\n", "self", ".", "max_proposals", "=", "cfg", ".", "BMN", ".", "POST_PROCESS", ".", "MAX_PROPOSALS", "\n", "self", ".", "n_threads", "=", "cfg", ".", "BMN", ".", "POST_PROCESS", ".", "NUM_THREADS", "\n", "\n", "self", ".", "video_dict", "=", "getDatasetDict", "(", "cfg", ".", "DATA", ".", "ANNOTATION_FILE", ",", "split", ")", "\n", "self", ".", "video_list", "=", "list", "(", "self", ".", "video_dict", ".", "keys", "(", ")", ")", "# [:100]", "\n", "self", ".", "result_dict", "=", "mp", ".", "Manager", "(", ")", ".", "dict", "(", ")", "\n", "self", ".", "dataset", "=", "cfg", ".", "DATASET", "\n", "self", ".", "nms_func", "=", "self", ".", "hard_nms", "if", "cfg", ".", "BMN", ".", "POST_PROCESS", ".", "USE_HARD_NMS", "else", "self", ".", "soft_nms", "\n", "\n", "if", "self", ".", "dataset", "==", "'anet'", ":", "\n", "            ", "self", ".", "standardize_results", "=", "standardize_results_anet", "\n", "self", ".", "get_duration", "=", "self", ".", "get_duration_anet", "\n", "self", ".", "save_result", "=", "save_json", "\n", "", "elif", "self", ".", "dataset", "==", "'thumos'", ":", "\n", "            ", "self", ".", "standardize_results", "=", "standardize_results_thumos", "\n", "self", ".", "durations", "=", "get_durations", "(", "self", ".", "video_dict", ")", "\n", "self", ".", "get_duration", "=", "self", ".", "get_duration_thumos", "\n", "self", ".", "save_result", "=", "save_pickle", "\n", "\n", "self", ".", "video_groups", "=", "defaultdict", "(", "list", ")", "\n", "for", "video_name", "in", "self", ".", "video_list", ":", "\n", "                ", "self", ".", "video_groups", "[", "video_name", ".", "split", "(", "'-'", ")", "[", "0", "]", "]", ".", "append", "(", "video_name", ")", "\n", "", "for", "group_name", "in", "self", ".", "video_groups", ":", "\n", "                ", "self", ".", "video_groups", "[", "group_name", "]", "=", "sorted", "(", "self", ".", "video_groups", "[", "group_name", "]", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'-'", ")", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.PostProcessor.get_duration_anet": [[110, 112], ["None"], "methods", ["None"], ["", "", "", "def", "get_duration_anet", "(", "self", ",", "video_name", ")", ":", "\n", "        ", "return", "self", ".", "video_dict", "[", "video_name", "]", "[", "'duration'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.PostProcessor.get_duration_thumos": [[113, 115], ["None"], "methods", ["None"], ["", "def", "get_duration_thumos", "(", "self", ",", "video_name", ")", ":", "\n", "        ", "return", "self", ".", "durations", "[", "video_name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.PostProcessor.hard_nms": [[116, 149], ["list", "list", "list", "numpy.array", "numpy.array", "numpy.array", "pandas.DataFrame", "numpy.array.argsort", "keep.append", "numpy.maximum", "numpy.minimum", "numpy.where"], "methods", ["None"], ["", "def", "hard_nms", "(", "self", ",", "df", ")", ":", "\n", "        ", "'''\n        df: proposals generated by network;\n        '''", "\n", "tstart", "=", "list", "(", "df", ".", "xmin", ".", "values", "[", ":", "]", ")", "\n", "tend", "=", "list", "(", "df", ".", "xmax", ".", "values", "[", ":", "]", ")", "\n", "tscore", "=", "list", "(", "df", ".", "score", ".", "values", "[", ":", "]", ")", "\n", "\n", "t1", "=", "np", ".", "array", "(", "tstart", ")", "\n", "t2", "=", "np", ".", "array", "(", "tend", ")", "\n", "scores", "=", "np", ".", "array", "(", "tscore", ")", "\n", "durations", "=", "t2", "-", "t1", "\n", "order", "=", "scores", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "keep", "=", "[", "]", "\n", "while", "order", ".", "size", ">", "0", ":", "# and len(keep) < self.max_proposals:", "\n", "            ", "i", "=", "order", "[", "0", "]", "\n", "keep", ".", "append", "(", "i", ")", "\n", "tt1", "=", "np", ".", "maximum", "(", "t1", "[", "i", "]", ",", "t1", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "tt2", "=", "np", ".", "minimum", "(", "t2", "[", "i", "]", ",", "t2", "[", "order", "[", "1", ":", "]", "]", ")", "\n", "intersection", "=", "tt2", "-", "tt1", "\n", "IoU", "=", "intersection", "/", "(", "durations", "[", "i", "]", "+", "durations", "[", "order", "[", "1", ":", "]", "]", "-", "intersection", ")", ".", "astype", "(", "float", ")", "\n", "\n", "inds", "=", "np", ".", "where", "(", "IoU", "<=", "self", ".", "nms_thresh", ")", "[", "0", "]", "\n", "order", "=", "order", "[", "inds", "+", "1", "]", "\n", "\n", "", "rscore", "=", "[", "tscore", "[", "i", "]", "for", "i", "in", "keep", "]", "\n", "rstart", "=", "[", "tstart", "[", "i", "]", "for", "i", "in", "keep", "]", "\n", "rend", "=", "[", "tend", "[", "i", "]", "for", "i", "in", "keep", "]", "\n", "newDf", "=", "pd", ".", "DataFrame", "(", ")", "\n", "newDf", "[", "'score'", "]", "=", "rscore", "\n", "newDf", "[", "'xmin'", "]", "=", "rstart", "\n", "newDf", "[", "'xmax'", "]", "=", "rend", "\n", "return", "newDf", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.PostProcessor.soft_nms": [[150, 187], ["df.sort_values.sort_values.sort_values", "list", "list", "list", "pandas.DataFrame", "list.index", "utils.iou_with_anchors", "range", "rstart.append", "rend.append", "rscore.append", "list.pop", "list.pop", "list.pop", "len", "len", "max", "numpy.array", "numpy.array", "len", "numpy.exp", "numpy.square"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.utils.iou_with_anchors"], ["", "def", "soft_nms", "(", "self", ",", "df", ")", ":", "\n", "        ", "'''\n        df: proposals generated by network;\n        alpha: alpha value of Gaussian decaying function;\n        t1, t2: threshold for soft nms.\n        '''", "\n", "df", "=", "df", ".", "sort_values", "(", "by", "=", "\"score\"", ",", "ascending", "=", "False", ")", "\n", "tstart", "=", "list", "(", "df", ".", "xmin", ".", "values", "[", ":", "]", ")", "\n", "tend", "=", "list", "(", "df", ".", "xmax", ".", "values", "[", ":", "]", ")", "\n", "tscore", "=", "list", "(", "df", ".", "score", ".", "values", "[", ":", "]", ")", "\n", "\n", "rstart", ",", "rend", ",", "rscore", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "while", "len", "(", "tscore", ")", ">", "1", "and", "len", "(", "rscore", ")", "<=", "self", ".", "max_proposals", ":", "\n", "            ", "max_index", "=", "tscore", ".", "index", "(", "max", "(", "tscore", ")", ")", "\n", "tmp_iou_list", "=", "iou_with_anchors", "(", "\n", "np", ".", "array", "(", "tstart", ")", ",", "\n", "np", ".", "array", "(", "tend", ")", ",", "tstart", "[", "max_index", "]", ",", "tend", "[", "max_index", "]", ")", "\n", "for", "idx", "in", "range", "(", "0", ",", "len", "(", "tscore", ")", ")", ":", "\n", "                ", "if", "idx", "!=", "max_index", ":", "\n", "                    ", "tmp_iou", "=", "tmp_iou_list", "[", "idx", "]", "\n", "tmp_width", "=", "tend", "[", "max_index", "]", "-", "tstart", "[", "max_index", "]", "\n", "if", "tmp_iou", ">", "self", ".", "snms_t1", "+", "(", "self", ".", "snms_t2", "-", "self", ".", "snms_t1", ")", "*", "tmp_width", ":", "\n", "                        ", "tscore", "[", "idx", "]", "=", "tscore", "[", "idx", "]", "*", "np", ".", "exp", "(", "-", "np", ".", "square", "(", "tmp_iou", ")", "/", "self", ".", "snms_alpha", ")", "\n", "\n", "", "", "", "rstart", ".", "append", "(", "tstart", "[", "max_index", "]", ")", "\n", "rend", ".", "append", "(", "tend", "[", "max_index", "]", ")", "\n", "rscore", ".", "append", "(", "tscore", "[", "max_index", "]", ")", "\n", "tstart", ".", "pop", "(", "max_index", ")", "\n", "tend", ".", "pop", "(", "max_index", ")", "\n", "tscore", ".", "pop", "(", "max_index", ")", "\n", "\n", "", "newDf", "=", "pd", ".", "DataFrame", "(", ")", "\n", "newDf", "[", "'score'", "]", "=", "rscore", "\n", "newDf", "[", "'xmin'", "]", "=", "rstart", "\n", "newDf", "[", "'xmax'", "]", "=", "rend", "\n", "return", "newDf", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.PostProcessor.video_post_process": [[188, 208], ["pandas.read_feather", "post_processing.PostProcessor.sort_values", "post_processing.PostProcessor.get_duration", "range", "len", "post_processing.PostProcessor.nms_func", "min", "proposal_list.append", "len", "max", "min"], "methods", ["None"], ["", "def", "video_post_process", "(", "self", ",", "video_list", ")", ":", "\n", "        ", "for", "video_name", "in", "video_list", ":", "\n", "            ", "df", "=", "pd", ".", "read_feather", "(", "\"./results/outputs/\"", "+", "video_name", "+", "\".feather\"", ")", "\n", "\n", "if", "len", "(", "df", ")", ">", "1", ":", "\n", "                ", "df", "=", "self", ".", "nms_func", "(", "df", ")", "\n", "\n", "", "df", "=", "df", ".", "sort_values", "(", "by", "=", "\"score\"", ",", "ascending", "=", "False", ")", "\n", "video_duration", "=", "self", ".", "get_duration", "(", "video_name", ")", "\n", "proposal_list", "=", "[", "]", "\n", "\n", "for", "j", "in", "range", "(", "min", "(", "self", ".", "max_proposals", ",", "len", "(", "df", ")", ")", ")", ":", "\n", "                ", "tmp_proposal", "=", "{", "}", "\n", "tmp_proposal", "[", "\"score\"", "]", "=", "df", ".", "score", ".", "values", "[", "j", "]", "\n", "tmp_proposal", "[", "\"segment\"", "]", "=", "[", "\n", "max", "(", "0", ",", "df", ".", "xmin", ".", "values", "[", "j", "]", ")", "*", "video_duration", ",", "\n", "min", "(", "1", ",", "df", ".", "xmax", ".", "values", "[", "j", "]", ")", "*", "video_duration", "\n", "]", "\n", "proposal_list", ".", "append", "(", "tmp_proposal", ")", "\n", "", "self", ".", "result_dict", "[", "video_name", "]", "=", "proposal_list", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.PostProcessor.__call__": [[209, 254], ["post_processing.PostProcessor.standardize_results", "post_processing.PostProcessor.save_result", "post_processing.PostProcessor.video_groups.items", "sorted", "tqdm.tqdm.tqdm", "dict", "pandas.concat", "pandas.concat.to_feather", "len", "post_processing.PostProcessor.video_groups.keys", "p.join", "numpy.linspace", "pandas.read_feather", "len", "processes.append", "processes[].start", "len", "processes.append", "processes[].start", "p.join", "multiprocessing.Process", "range", "int", "int", "range", "multiprocessing.Process", "processes[].is_alive", "processes[].join", "multiprocessing.Process", "processes[].start"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "dataset", "==", "'thumos'", ":", "\n", "            ", "video_lengths", "=", "{", "}", "\n", "for", "group_name", ",", "video_sequence", "in", "self", ".", "video_groups", ".", "items", "(", ")", ":", "\n", "                ", "video_df", "=", "[", "\n", "pd", ".", "read_feather", "(", "'./results/outputs/'", "+", "video_name", "+", "'.feather'", ")", "\n", "for", "video_name", "in", "video_sequence", "]", "\n", "video_df", "=", "pd", ".", "concat", "(", "video_df", ",", "ignore_index", "=", "True", ")", "\n", "video_df", ".", "to_feather", "(", "'./results/outputs/'", "+", "group_name", "+", "'.feather'", ")", "\n", "video_lengths", "[", "group_name", "]", "=", "len", "(", "video_df", ")", "\n", "", "video_list", "=", "sorted", "(", "self", ".", "video_groups", ".", "keys", "(", ")", ",", "key", "=", "lambda", "name", ":", "video_lengths", "[", "name", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "processes", "=", "[", "]", "\n", "for", "video_name", "in", "tqdm", "(", "video_list", ")", ":", "\n", "                ", "if", "len", "(", "processes", ")", "<", "self", ".", "n_threads", ":", "\n", "                    ", "processes", ".", "append", "(", "mp", ".", "Process", "(", "target", "=", "self", ".", "video_post_process", ",", "args", "=", "(", "[", "video_name", "]", ",", ")", ")", ")", "\n", "processes", "[", "-", "1", "]", ".", "start", "(", ")", "\n", "", "else", ":", "\n", "                    ", "process_done", "=", "False", "\n", "while", "not", "process_done", ":", "\n", "                        ", "for", "j", "in", "range", "(", "self", ".", "n_threads", ")", ":", "\n", "                            ", "if", "not", "processes", "[", "j", "]", ".", "is_alive", "(", ")", ":", "\n", "                                ", "processes", "[", "j", "]", ".", "join", "(", ")", "\n", "processes", "[", "j", "]", "=", "mp", ".", "Process", "(", "target", "=", "self", ".", "video_post_process", ",", "args", "=", "(", "[", "video_name", "]", ",", ")", ")", "\n", "processes", "[", "j", "]", ".", "start", "(", ")", "\n", "process_done", "=", "True", "\n", "break", "\n", "", "", "", "", "", "for", "p", "in", "processes", ":", "\n", "                ", "p", ".", "join", "(", ")", "\n", "\n", "", "", "elif", "self", ".", "dataset", "==", "'anet'", ":", "\n", "            ", "video_list", "=", "self", ".", "video_list", "\n", "linspace", "=", "np", ".", "linspace", "(", "0", ",", "len", "(", "video_list", ")", ",", "self", ".", "n_threads", "+", "1", ")", "\n", "thrd_segms", "=", "[", "(", "int", "(", "linspace", "[", "i", "]", ")", ",", "int", "(", "linspace", "[", "i", "+", "1", "]", ")", ")", "for", "i", "in", "range", "(", "self", ".", "n_threads", ")", "]", "\n", "\n", "processes", "=", "[", "]", "\n", "for", "s_thrd", ",", "e_thrd", "in", "thrd_segms", ":", "\n", "                ", "tmp_video_list", "=", "video_list", "[", "s_thrd", ":", "e_thrd", "]", "\n", "processes", ".", "append", "(", "mp", ".", "Process", "(", "target", "=", "self", ".", "video_post_process", ",", "args", "=", "(", "tmp_video_list", ",", ")", ")", ")", "\n", "processes", "[", "-", "1", "]", ".", "start", "(", ")", "\n", "", "for", "p", "in", "processes", ":", "\n", "                ", "p", ".", "join", "(", ")", "\n", "\n", "", "", "self", ".", "result_dict", "=", "self", ".", "standardize_results", "(", "dict", "(", "self", ".", "result_dict", ")", ")", "\n", "self", ".", "save_result", "(", "self", ".", "result_path", ",", "self", ".", "result_dict", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.load_json": [[13, 17], ["open", "json.load"], "function", ["None"], ["def", "load_json", "(", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ")", "as", "json_file", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.save_json": [[19, 22], ["open", "json.dump"], "function", ["None"], ["", "", "def", "save_json", "(", "file", ",", "obj", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'w'", ")", "as", "json_file", ":", "\n", "        ", "json", ".", "dump", "(", "obj", ",", "json_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.save_pickle": [[24, 27], ["open", "pickle.dump"], "function", ["None"], ["", "", "def", "save_pickle", "(", "file", ",", "obj", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'wb'", ")", "as", "pkl_file", ":", "\n", "        ", "pkl", ".", "dump", "(", "obj", ",", "pkl_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.get_durations": [[29, 38], ["annotations.items", "video_id.split"], "function", ["None"], ["", "", "def", "get_durations", "(", "annotations", ")", ":", "\n", "    ", "durations", "=", "{", "}", "\n", "for", "video_id", ",", "annot", "in", "annotations", ".", "items", "(", ")", ":", "\n", "        ", "video_name", "=", "video_id", ".", "split", "(", "'-'", ")", "[", "0", "]", "\n", "if", "video_id", "not", "in", "durations", ":", "\n", "            ", "durations", "[", "video_name", "]", "=", "annot", "[", "'master_duration'", "]", "\n", "", "else", ":", "\n", "            ", "assert", "annot", "[", "'master_duration'", "]", "==", "durations", "[", "video_name", "]", "\n", "", "", "return", "durations", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.getDatasetDict": [[40, 47], ["[].items", "post_processing.load_json"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.load_json"], ["", "def", "getDatasetDict", "(", "annot_file", ",", "split", ")", ":", "\n", "    ", "annotations", "=", "{", "\n", "vdo_id", ":", "anno", "for", "vdo_id", ",", "anno", "in", "load_json", "(", "annot_file", ")", "[", "'database'", "]", ".", "items", "(", ")", "\n", "if", "anno", "[", "'subset'", "]", "==", "split", "\n", "}", "\n", "\n", "return", "annotations", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.standardize_results_anet": [[49, 62], ["video_dict.items"], "function", ["None"], ["", "def", "standardize_results_anet", "(", "video_dict", ")", ":", "\n", "    ", "result_dict", "=", "{", "\n", "'version'", ":", "'ACTIVITY_NET_1.3'", ",", "\n", "'external_data'", ":", "{", "\n", "'used'", ":", "'true'", ",", "\n", "'details'", ":", "'Backbone 3D Network are trained on Kinetics training set.'", "\n", "}", ",", "\n", "'results'", ":", "{", "}", ",", "\n", "}", "\n", "\n", "for", "video_id", ",", "results", "in", "video_dict", ".", "items", "(", ")", ":", "\n", "        ", "result_dict", "[", "'results'", "]", "[", "video_id", "]", "=", "results", "\n", "", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.post_processing.standardize_results_thumos": [[64, 74], ["video_dict.items", "numpy.array"], "function", ["None"], ["", "def", "standardize_results_thumos", "(", "video_dict", ")", ":", "\n", "    ", "result_dict", "=", "{", "}", "\n", "\n", "for", "video_id", ",", "results", "in", "video_dict", ".", "items", "(", ")", ":", "\n", "        ", "result_dict", "[", "video_id", "]", "=", "np", ".", "array", "(", "[", "[", "\n", "r", "[", "'segment'", "]", "[", "0", "]", ",", "\n", "r", "[", "'segment'", "]", "[", "1", "]", ",", "\n", "r", "[", "'score'", "]", "]", "for", "r", "in", "results", "\n", "]", ")", "\n", "", "return", "result_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.loss_function.FocalLoss.__init__": [[13, 20], ["torch.Module.__init__", "isinstance", "isinstance", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "0", ",", "alpha", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "if", "isinstance", "(", "alpha", ",", "(", "float", ",", "int", ",", "long", ")", ")", ":", "self", ".", "alpha", "=", "torch", ".", "Tensor", "(", "[", "alpha", ",", "1", "-", "alpha", "]", ")", "\n", "if", "isinstance", "(", "alpha", ",", "list", ")", ":", "self", ".", "alpha", "=", "torch", ".", "Tensor", "(", "alpha", ")", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.loss_function.FocalLoss.forward": [[21, 42], ["target.view.view.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "logpt.view.view.gather", "logpt.view.view.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "input.contiguous().view.contiguous().view.dim", "input.contiguous().view.contiguous().view.view", "input.contiguous().view.contiguous().view.transpose", "input.contiguous().view.contiguous().view.contiguous().view", "logpt.view.view.data.exp", "loss_function.FocalLoss.alpha.gather", "loss.mean", "loss.sum", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "loss_function.FocalLoss.alpha.type", "input.contiguous().view.contiguous().view.data.type", "loss_function.FocalLoss.alpha.type_as", "target.view.view.data.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "input.contiguous().view.contiguous().view.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# N,C,H,W => N,C,H*W", "\n", "input", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", "# N,C,H*W => N,H*W,C", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", "# N,H*W,C => N*H*W,C", "\n", "", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "logpt", "=", "F", ".", "log_softmax", "(", "input", ")", "\n", "logpt", "=", "logpt", ".", "gather", "(", "1", ",", "target", ")", "\n", "logpt", "=", "logpt", ".", "view", "(", "-", "1", ")", "\n", "pt", "=", "Variable", "(", "logpt", ".", "data", ".", "exp", "(", ")", ")", "\n", "\n", "if", "self", ".", "alpha", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "alpha", ".", "type", "(", ")", "!=", "input", ".", "data", ".", "type", "(", ")", ":", "\n", "                ", "self", ".", "alpha", "=", "self", ".", "alpha", ".", "type_as", "(", "input", ".", "data", ")", "\n", "", "at", "=", "self", ".", "alpha", ".", "gather", "(", "0", ",", "target", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "logpt", "=", "logpt", "*", "Variable", "(", "at", ")", "\n", "\n", "", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "logpt", "\n", "if", "self", ".", "size_average", ":", "return", "loss", ".", "mean", "(", ")", "\n", "else", ":", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.loss_function.get_mask": [[44, 52], ["range", "numpy.array", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "np.array.append", "range", "range"], "function", ["None"], ["", "", "def", "get_mask", "(", "tscale", ",", "duration", ")", ":", "\n", "    ", "bm_mask", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "duration", ")", ":", "\n", "        ", "mask_vector", "=", "[", "1", "for", "i", "in", "range", "(", "tscale", "-", "idx", ")", "\n", "]", "+", "[", "0", "for", "i", "in", "range", "(", "idx", ")", "]", "\n", "bm_mask", ".", "append", "(", "mask_vector", ")", "\n", "", "bm_mask", "=", "np", ".", "array", "(", "bm_mask", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "return", "torch", ".", "Tensor", "(", "bm_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.loss_function.bmn_loss_func": [[54, 66], ["pred_bm[].contiguous", "pred_bm[].contiguous", "loss_function.pem_reg_loss_func", "loss_function.pem_cls_loss_func", "loss_function.tem_loss_func"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.loss_function.pem_reg_loss_func", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.loss_function.pem_cls_loss_func", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.loss_function.tem_loss_func"], ["", "def", "bmn_loss_func", "(", "pred_bm", ",", "pred_start", ",", "pred_end", ",", "gt_iou_map", ",", "gt_start", ",", "gt_end", ",", "bm_mask", ")", ":", "\n", "    ", "pred_bm_reg", "=", "pred_bm", "[", ":", ",", "0", "]", ".", "contiguous", "(", ")", "\n", "pred_bm_cls", "=", "pred_bm", "[", ":", ",", "1", "]", ".", "contiguous", "(", ")", "\n", "\n", "gt_iou_map", "=", "gt_iou_map", "*", "bm_mask", "\n", "\n", "pem_reg_loss", "=", "pem_reg_loss_func", "(", "pred_bm_reg", ",", "gt_iou_map", ",", "bm_mask", ")", "\n", "pem_cls_loss", "=", "pem_cls_loss_func", "(", "pred_bm_cls", ",", "gt_iou_map", ",", "bm_mask", ")", "\n", "tem_loss", "=", "tem_loss_func", "(", "pred_start", ",", "pred_end", ",", "gt_start", ",", "gt_end", ")", "\n", "\n", "loss", "=", "tem_loss", "+", "10", "*", "pem_reg_loss", "+", "pem_cls_loss", "\n", "return", "loss", ",", "tem_loss", ",", "pem_reg_loss", ",", "pem_cls_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.loss_function.tem_loss_func": [[68, 88], ["loss_function.tem_loss_func.bi_loss"], "function", ["None"], ["", "def", "tem_loss_func", "(", "pred_start", ",", "pred_end", ",", "gt_start", ",", "gt_end", ")", ":", "\n", "    ", "def", "bi_loss", "(", "pred_score", ",", "gt_label", ")", ":", "\n", "        ", "pred_score", "=", "pred_score", ".", "view", "(", "-", "1", ")", "\n", "gt_label", "=", "gt_label", ".", "view", "(", "-", "1", ")", "\n", "pmask", "=", "(", "gt_label", ">", "0.5", ")", ".", "float", "(", ")", "\n", "num_entries", "=", "len", "(", "pmask", ")", "\n", "num_positive", "=", "torch", ".", "sum", "(", "pmask", ")", "\n", "ratio", "=", "num_entries", "/", "num_positive", "\n", "coef_0", "=", "0.5", "*", "ratio", "/", "(", "ratio", "-", "1", ")", "\n", "coef_1", "=", "0.5", "*", "ratio", "\n", "epsilon", "=", "0.000001", "\n", "loss_pos", "=", "coef_1", "*", "torch", ".", "log", "(", "pred_score", "+", "epsilon", ")", "*", "pmask", "\n", "loss_neg", "=", "coef_0", "*", "torch", ".", "log", "(", "1.0", "-", "pred_score", "+", "epsilon", ")", "*", "(", "1.0", "-", "pmask", ")", "\n", "loss", "=", "-", "1", "*", "torch", ".", "mean", "(", "loss_pos", "+", "loss_neg", ")", "\n", "return", "loss", "\n", "\n", "", "loss_start", "=", "bi_loss", "(", "pred_start", ",", "gt_start", ")", "\n", "loss_end", "=", "bi_loss", "(", "pred_end", ",", "gt_end", ")", "\n", "loss", "=", "loss_start", "+", "loss_end", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.loss_function.pem_reg_loss_func": [[90, 117], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.mse_loss", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "numpy.random.rand", "numpy.random.rand", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "function", ["None"], ["", "def", "pem_reg_loss_func", "(", "pred_score", ",", "gt_iou_map", ",", "mask", ")", ":", "\n", "\n", "    ", "u_hmask", "=", "(", "gt_iou_map", ">", "0.7", ")", ".", "float", "(", ")", "\n", "u_mmask", "=", "(", "(", "gt_iou_map", "<=", "0.7", ")", "&", "(", "gt_iou_map", ">", "0.3", ")", ")", ".", "float", "(", ")", "\n", "u_lmask", "=", "(", "(", "gt_iou_map", "<=", "0.3", ")", "&", "(", "gt_iou_map", ">", "0.", ")", ")", ".", "float", "(", ")", "\n", "u_lmask", "=", "u_lmask", "*", "mask", "\n", "\n", "num_h", "=", "torch", ".", "sum", "(", "u_hmask", ")", "\n", "num_m", "=", "torch", ".", "sum", "(", "u_mmask", ")", "\n", "num_l", "=", "torch", ".", "sum", "(", "u_lmask", ")", "\n", "\n", "r_m", "=", "num_h", "/", "num_m", "\n", "u_smmask", "=", "torch", ".", "Tensor", "(", "np", ".", "random", ".", "rand", "(", "*", "gt_iou_map", ".", "shape", ")", ")", ".", "cuda", "(", ")", "\n", "u_smmask", "=", "u_mmask", "*", "u_smmask", "\n", "u_smmask", "=", "(", "u_smmask", ">", "(", "1.", "-", "r_m", ")", ")", ".", "float", "(", ")", "\n", "\n", "r_l", "=", "num_h", "/", "num_l", "\n", "u_slmask", "=", "torch", ".", "Tensor", "(", "np", ".", "random", ".", "rand", "(", "*", "gt_iou_map", ".", "shape", ")", ")", ".", "cuda", "(", ")", "\n", "u_slmask", "=", "u_lmask", "*", "u_slmask", "\n", "u_slmask", "=", "(", "u_slmask", ">", "(", "1.", "-", "r_l", ")", ")", ".", "float", "(", ")", "\n", "\n", "weights", "=", "u_hmask", "+", "u_smmask", "+", "u_slmask", "\n", "\n", "loss", "=", "F", ".", "mse_loss", "(", "pred_score", "*", "weights", ",", "gt_iou_map", "*", "weights", ")", "\n", "loss", "=", "0.5", "*", "torch", ".", "sum", "(", "loss", "*", "torch", ".", "ones", "(", "*", "weights", ".", "shape", ")", ".", "cuda", "(", ")", ")", "/", "torch", ".", "sum", "(", "weights", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.loss_function.pem_cls_loss_func": [[119, 135], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "pem_cls_loss_func", "(", "pred_score", ",", "gt_iou_map", ",", "mask", ")", ":", "\n", "\n", "    ", "pmask", "=", "(", "gt_iou_map", ">", "0.9", ")", ".", "float", "(", ")", "\n", "nmask", "=", "(", "gt_iou_map", "<=", "0.9", ")", ".", "float", "(", ")", "\n", "nmask", "=", "nmask", "*", "mask", "\n", "\n", "num_positive", "=", "torch", ".", "sum", "(", "pmask", ")", "\n", "num_entries", "=", "num_positive", "+", "torch", ".", "sum", "(", "nmask", ")", "\n", "ratio", "=", "num_entries", "/", "num_positive", "\n", "coef_0", "=", "0.5", "*", "ratio", "/", "(", "ratio", "-", "1", ")", "\n", "coef_1", "=", "0.5", "*", "ratio", "\n", "epsilon", "=", "0.000001", "\n", "loss_pos", "=", "coef_1", "*", "torch", ".", "log", "(", "pred_score", "+", "epsilon", ")", "*", "pmask", "\n", "loss_neg", "=", "coef_0", "*", "torch", ".", "log", "(", "1.0", "-", "pred_score", "+", "epsilon", ")", "*", "nmask", "\n", "loss", "=", "-", "1", "*", "torch", ".", "sum", "(", "loss_pos", "+", "loss_neg", ")", "/", "num_entries", "\n", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.utils.ProposalGenerator.__init__": [[31, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "temporal_dim", "=", "None", ",", "max_duration", "=", "None", ",", "annotations", "=", "None", ")", ":", "\n", "        ", "self", ".", "tscale", "=", "temporal_dim", "\n", "self", ".", "max_duration", "=", "max_duration", "\n", "self", ".", "annots", "=", "annotations", "# For THUMOS only", "\n", "self", ".", "rescale_segment", "=", "self", ".", "rescale_segment_anet", "if", "self", ".", "annots", "is", "None", "else", "self", ".", "rescale_segment_thumos", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.utils.ProposalGenerator.rescale_segment_anet": [[37, 39], ["None"], "methods", ["None"], ["", "def", "rescale_segment_anet", "(", "self", ",", "start_index", ",", "end_index", ",", "video_name", "=", "None", ")", ":", "\n", "        ", "return", "start_index", "/", "self", ".", "tscale", ",", "end_index", "/", "self", ".", "tscale", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.utils.ProposalGenerator.rescale_segment_thumos": [[40, 44], ["None"], "methods", ["None"], ["", "def", "rescale_segment_thumos", "(", "self", ",", "start_index", ",", "end_index", ",", "video_name", "=", "None", ")", ":", "\n", "        ", "b", "=", "self", ".", "annots", "[", "video_name", "]", "[", "'start_snippet'", "]", "\n", "d", "=", "self", ".", "annots", "[", "video_name", "]", "[", "'master_snippet_duration'", "]", "\n", "return", "(", "start_index", "+", "b", ")", "/", "d", ",", "(", "end_index", "+", "b", ")", "/", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.utils.ProposalGenerator.__call__": [[45, 91], ["enumerate", "max", "max", "numpy.zeros", "range", "numpy.zeros", "range", "range", "numpy.stack", "batch_props.append", "len", "range", "utils.ProposalGenerator.rescale_segment", "numpy.stack.append"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "start", ",", "end", ",", "confidence_map", ",", "video_names", ")", ":", "\n", "        ", "batch_props", "=", "[", "]", "\n", "for", "i", ",", "video_name", "in", "enumerate", "(", "video_names", ")", ":", "\n", "            ", "start_scores", "=", "start", "[", "i", "]", "\n", "end_scores", "=", "end", "[", "i", "]", "\n", "clr_confidence", "=", "(", "confidence_map", "[", "i", "]", "[", "1", "]", ")", "\n", "reg_confidence", "=", "(", "confidence_map", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "max_start", "=", "max", "(", "start_scores", ")", "\n", "max_end", "=", "max", "(", "end_scores", ")", "\n", "\n", "# generate the set of start points and end points", "\n", "start_bins", "=", "np", ".", "zeros", "(", "self", ".", "tscale", ")", "\n", "start_bins", "[", "0", "]", "=", "1", "# [1,0,0...,0,1]", "\n", "for", "idx", "in", "range", "(", "1", ",", "self", ".", "tscale", "-", "1", ")", ":", "\n", "                ", "if", "start_scores", "[", "idx", "]", ">", "start_scores", "[", "idx", "+", "1", "]", "and", "start_scores", "[", "idx", "]", ">", "start_scores", "[", "idx", "-", "1", "]", ":", "\n", "                    ", "start_bins", "[", "idx", "]", "=", "1", "\n", "", "elif", "start_scores", "[", "idx", "]", ">", "(", "0.5", "*", "max_start", ")", ":", "\n", "                    ", "start_bins", "[", "idx", "]", "=", "1", "\n", "\n", "", "", "end_bins", "=", "np", ".", "zeros", "(", "len", "(", "end_scores", ")", ")", "\n", "end_bins", "[", "-", "1", "]", "=", "1", "\n", "for", "idx", "in", "range", "(", "1", ",", "self", ".", "tscale", "-", "1", ")", ":", "\n", "                ", "if", "end_scores", "[", "idx", "]", ">", "end_scores", "[", "idx", "+", "1", "]", "and", "end_scores", "[", "idx", "]", ">", "end_scores", "[", "idx", "-", "1", "]", ":", "\n", "                    ", "end_bins", "[", "idx", "]", "=", "1", "\n", "", "elif", "end_scores", "[", "idx", "]", ">", "(", "0.5", "*", "max_end", ")", ":", "\n", "                    ", "end_bins", "[", "idx", "]", "=", "1", "\n", "\n", "# generate proposals", "\n", "", "", "new_props", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "self", ".", "max_duration", ")", ":", "\n", "                ", "for", "jdx", "in", "range", "(", "self", ".", "tscale", ")", ":", "\n", "                    ", "start_index", "=", "jdx", "\n", "end_index", "=", "start_index", "+", "idx", "+", "1", "\n", "if", "end_index", "<", "self", ".", "tscale", "and", "start_bins", "[", "start_index", "]", "==", "1", "and", "end_bins", "[", "end_index", "]", "==", "1", ":", "\n", "                        ", "xmin", ",", "xmax", "=", "self", ".", "rescale_segment", "(", "start_index", ",", "end_index", ",", "video_name", ")", "\n", "xmin_score", "=", "start_scores", "[", "start_index", "]", "\n", "xmax_score", "=", "end_scores", "[", "end_index", "]", "\n", "clr_score", "=", "clr_confidence", "[", "idx", ",", "jdx", "]", "\n", "reg_score", "=", "reg_confidence", "[", "idx", ",", "jdx", "]", "\n", "score", "=", "xmin_score", "*", "xmax_score", "*", "clr_score", "*", "reg_score", "\n", "new_props", ".", "append", "(", "[", "xmin", ",", "xmax", ",", "xmin_score", ",", "xmax_score", ",", "clr_score", ",", "reg_score", ",", "score", "]", ")", "\n", "", "", "", "new_props", "=", "np", ".", "stack", "(", "new_props", ")", "\n", "batch_props", ".", "append", "(", "new_props", ")", "\n", "\n", "", "return", "batch_props", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.utils.ioa_with_anchors": [[6, 15], ["numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.divide"], "function", ["None"], ["def", "ioa_with_anchors", "(", "anchors_min", ",", "anchors_max", ",", "box_min", ",", "box_max", ")", ":", "\n", "# calculate the overlap proportion between the anchor and all bbox for supervise signal,", "\n", "# the length of the anchor is 0.01", "\n", "    ", "len_anchors", "=", "anchors_max", "-", "anchors_min", "\n", "int_xmin", "=", "np", ".", "maximum", "(", "anchors_min", ",", "box_min", ")", "\n", "int_xmax", "=", "np", ".", "minimum", "(", "anchors_max", ",", "box_max", ")", "\n", "inter_len", "=", "np", ".", "maximum", "(", "int_xmax", "-", "int_xmin", ",", "0.", ")", "\n", "scores", "=", "np", ".", "divide", "(", "inter_len", ",", "len_anchors", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.utils.iou_with_anchors": [[17, 28], ["numpy.maximum", "numpy.minimum", "numpy.maximum", "numpy.divide"], "function", ["None"], ["", "def", "iou_with_anchors", "(", "anchors_min", ",", "anchors_max", ",", "box_min", ",", "box_max", ")", ":", "\n", "    ", "\"\"\"Compute jaccard score between a box and the anchors.\n    \"\"\"", "\n", "len_anchors", "=", "anchors_max", "-", "anchors_min", "\n", "int_xmin", "=", "np", ".", "maximum", "(", "anchors_min", ",", "box_min", ")", "\n", "int_xmax", "=", "np", ".", "minimum", "(", "anchors_max", ",", "box_max", ")", "\n", "inter_len", "=", "np", ".", "maximum", "(", "int_xmax", "-", "int_xmin", ",", "0.", ")", "\n", "union_len", "=", "len_anchors", "-", "inter_len", "+", "box_max", "-", "box_min", "\n", "# print inter_len,union_len", "\n", "jaccard", "=", "np", ".", "divide", "(", "inter_len", ",", "union_len", ")", "\n", "return", "jaccard", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_thumos.load_pkl": [[31, 35], ["open", "pickle.load"], "function", ["None"], ["def", "load_pkl", "(", "filename", ")", ":", "\n", "    ", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_thumos.add_topk_detection": [[37, 50], ["range", "sorted", "class_scores.argsort", "detections.append", "proposal[].tolist"], "function", ["None"], ["", "", "def", "add_topk_detection", "(", "proposals", ",", "class_scores", ",", "class_names", ",", "k", "=", "2", ",", "max_proposals", "=", "3000", ")", ":", "\n", "    ", "topk_indices", "=", "class_scores", ".", "argsort", "(", ")", "[", "-", "k", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "topk_scores", "=", "class_scores", "[", "topk_indices", "]", "\n", "\n", "detections", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "        ", "for", "proposal", "in", "proposals", ":", "\n", "            ", "detection", "=", "{", "'segment'", ":", "proposal", "[", ":", "2", "]", ".", "tolist", "(", ")", "}", "\n", "detection", "[", "'score'", "]", "=", "proposal", "[", "2", "]", "*", "topk_scores", "[", "i", "]", "\n", "detection", "[", "'label'", "]", "=", "class_names", "[", "topk_indices", "[", "i", "]", "]", "\n", "detections", ".", "append", "(", "detection", ")", "\n", "", "", "detections", "=", "sorted", "(", "detections", ",", "key", "=", "lambda", "x", ":", "x", "[", "'score'", "]", ",", "reverse", "=", "True", ")", "[", ":", "max_proposals", "]", "\n", "return", "detections", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_thumos.gen_detection": [[52, 87], ["eval_det_thumos.load_pkl", "numpy.array", "numpy.load", "load_pkl.items", "eval_det_thumos.add_topk_detection", "open", "json.dump", "thumos_class.keys", "int", "thumos_class.keys", "video_name.split"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_thumos.load_pkl", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_thumos.add_topk_detection"], ["", "def", "gen_detection", "(", "prop_file", ",", "cls_file", ",", "out_file", ")", ":", "\n", "    ", "proposals", "=", "load_pkl", "(", "prop_file", ")", "\n", "class_names", "=", "[", "thumos_class", "[", "k", "]", "for", "k", "in", "thumos_class", ".", "keys", "(", ")", "]", "\n", "class_ids", "=", "np", ".", "array", "(", "[", "k", "-", "1", "for", "k", "in", "thumos_class", ".", "keys", "(", ")", "]", ")", "\n", "classifications", "=", "np", ".", "load", "(", "cls_file", ")", "\n", "classifications", "=", "classifications", "[", ":", ",", "class_ids", "]", "\n", "\n", "detections", "=", "{", "\n", "'version'", ":", "'THUMOS14'", ",", "\n", "'external_data'", ":", "'used anet evaluation code'", ",", "\n", "'results'", ":", "{", "}", "\n", "}", "\n", "for", "video_name", ",", "results", "in", "proposals", ".", "items", "(", ")", ":", "\n", "        ", "video_id", "=", "int", "(", "video_name", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "-", "1", "\n", "class_scores", "=", "classifications", "[", "video_id", "]", "\n", "detections", "[", "'results'", "]", "[", "video_name", "]", "=", "add_topk_detection", "(", "results", ",", "class_scores", ",", "class_names", ")", "\n", "\n", "", "with", "open", "(", "out_file", ",", "'w'", ")", "as", "out", ":", "\n", "        ", "json", ".", "dump", "(", "detections", ",", "out", ")", "\n", "\n", "", "'''\n    detections = {}\n    for video_name, results in proposals.items():\n        video_id = int(video_name.split('_')[-1]) - 1\n        class_scores = classifications[video_id]\n        detections[video_name] = add_topk_detection(results, class_scores, class_names)\n\n    with open(out_file, 'w') as out:\n        lines = []\n        for video_name, dets in detections.items():\n            for det in dets:\n                line = [video_name] + det['segment'] + [det['label'], det['score']]\n                lines.append(' '.join([str(x) for x in line]))\n        out.write('\\n'.join(lines))\n    '''", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_thumos.evaluate_detections": [[89, 114], ["print", "eval_det_thumos.gen_detection", "print", "ANETdetection", "ANETdetection.evaluate", "print", "zip"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_thumos.gen_detection", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.evaluate"], ["", "def", "evaluate_detections", "(", "cfg", ",", "out_file", "=", "'results/thumos_det.json'", ",", "verbose", "=", "True", ",", "check_status", "=", "False", ")", ":", "\n", "    ", "prop_file", "=", "cfg", ".", "DATA", ".", "RESULT_PATH", "\n", "cls_file", "=", "cfg", ".", "DATA", ".", "CLASSIFICATION_PATH", "\n", "gt_file", "=", "cfg", ".", "DATA", ".", "ANNOTATION_FILE", "if", "cfg", ".", "DATA", ".", "DETECTION_GT_FILE", "is", "None", "else", "cfg", ".", "DATA", ".", "DETECTION_GT_FILE", "\n", "split", "=", "cfg", ".", "VAL", ".", "SPLIT", "\n", "\n", "if", "out_file", "is", "None", ":", "\n", "        ", "out_file", "=", "prop_file", "\n", "", "print", "(", "\"Detection processing start\"", ")", "\n", "gen_detection", "(", "prop_file", ",", "cls_file", ",", "out_file", ")", "\n", "print", "(", "\"Detection processing finished\"", ")", "\n", "\n", "from", "evaluation_anet", ".", "eval_detection", "import", "ANETdetection", "\n", "tious", "=", "[", "0.3", ",", "0.4", ",", "0.5", ",", "0.6", ",", "0.7", "]", "\n", "anet_detection", "=", "ANETdetection", "(", "\n", "ground_truth_filename", "=", "gt_file", ",", "\n", "prediction_filename", "=", "out_file", ",", "\n", "subset", "=", "split", ",", "tiou_thresholds", "=", "tious", ",", "\n", "verbose", "=", "verbose", ",", "check_status", "=", "check_status", ")", "\n", "anet_detection", ".", "evaluate", "(", ")", "\n", "\n", "mAP_at_tIoU", "=", "[", "f'mAP@{t:.2f}: {mAP*100:.3f}'", "for", "t", ",", "mAP", "in", "zip", "(", "anet_detection", ".", "tiou_thresholds", ",", "anet_detection", ".", "mAP", ")", "]", "\n", "results", "=", "'Detection: average-mAP {:.3f}.\\n'", ".", "format", "(", "anet_detection", ".", "average_mAP", "*", "100", ")", "+", "'\\n'", ".", "join", "(", "mAP_at_tIoU", ")", "\n", "print", "(", "results", ")", "\n", "return", "anet_detection", ".", "average_mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_thumos.get_det_scores": [[116, 136], ["print", "eval_det_thumos.gen_detection", "print", "ANETdetection", "ANETdetection.evaluate", "print", "zip"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.None.eval_det_thumos.gen_detection", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.evaluate"], ["", "def", "get_det_scores", "(", "prop_file", ",", "cls_file", ",", "gt_file", ",", "out_file", "=", "None", ",", "verbose", "=", "False", ",", "check_status", "=", "False", ")", ":", "\n", "    ", "if", "out_file", "is", "None", ":", "\n", "        ", "out_file", "=", "prop_file", "\n", "", "print", "(", "\"Detection processing start\"", ")", "\n", "gen_detection", "(", "prop_file", ",", "cls_file", ",", "out_file", ")", "\n", "print", "(", "\"Detection processing finished\"", ")", "\n", "\n", "from", "evaluation_anet", ".", "eval_detection", "import", "ANETdetection", "\n", "tious", "=", "[", "0.3", ",", "0.4", ",", "0.5", ",", "0.6", ",", "0.7", "]", "\n", "anet_detection", "=", "ANETdetection", "(", "\n", "ground_truth_filename", "=", "gt_file", ",", "\n", "prediction_filename", "=", "out_file", ",", "\n", "subset", "=", "'testing'", ",", "tiou_thresholds", "=", "tious", ",", "\n", "verbose", "=", "verbose", ",", "check_status", "=", "check_status", ")", "\n", "anet_detection", ".", "evaluate", "(", ")", "\n", "\n", "mAP_at_tIoU", "=", "[", "f'mAP@{t:.2f}: {mAP*100:.3f}'", "for", "t", ",", "mAP", "in", "zip", "(", "anet_detection", ".", "tiou_thresholds", ",", "anet_detection", ".", "mAP", ")", "]", "\n", "results", "=", "'Detection: average-mAP {:.3f}.\\n'", ".", "format", "(", "anet_detection", ".", "average_mAP", "*", "100", ")", "+", "'\\n'", ".", "join", "(", "mAP_at_tIoU", ")", "\n", "print", "(", "results", ")", "\n", "return", "anet_detection", ".", "average_mAP", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.pkl2dataframe": [[13, 26], ["pickle.load", "pickle.load", "open", "open", "int", "int", "float", "data_frame.append"], "function", ["None"], ["def", "pkl2dataframe", "(", "frm_nums", ",", "movie_fps_file", ",", "result_file", ")", ":", "\n", "    ", "data_frame", "=", "[", "]", "\n", "movie_fps", "=", "pickle", ".", "load", "(", "open", "(", "movie_fps_file", ",", "'rb'", ")", ")", "\n", "dt_results", "=", "pickle", ".", "load", "(", "open", "(", "result_file", ",", "'rb'", ")", ")", "\n", "for", "_key", "in", "dt_results", ":", "\n", "        ", "fps", "=", "movie_fps", "[", "_key", "]", "\n", "frm_num", "=", "frm_nums", "[", "_key", "]", "\n", "for", "line", "in", "dt_results", "[", "_key", "]", ":", "\n", "            ", "start", "=", "int", "(", "line", "[", "0", "]", "*", "fps", ")", "\n", "end", "=", "int", "(", "line", "[", "1", "]", "*", "fps", ")", "\n", "score", "=", "float", "(", "line", "[", "2", "]", ")", "\n", "data_frame", ".", "append", "(", "[", "end", ",", "start", ",", "score", ",", "frm_num", ",", "_key", "]", ")", "\n", "", "", "return", "data_frame", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.segment_tiou": [[28, 60], ["numpy.empty", "range", "ValueError", "numpy.maximum", "numpy.minimum"], "function", ["None"], ["", "def", "segment_tiou", "(", "target_segments", ",", "test_segments", ")", ":", "\n", "    ", "\"\"\"Compute intersection over union btw segments\n    Parameters\n    ----------\n    target_segments : ndarray\n        2-dim array in format [m x 2:=[init, end]]\n    test_segments : ndarray\n        2-dim array in format [n x 2:=[init, end]]\n    Outputs\n    -------\n    tiou : ndarray\n        2-dim array [m x n] with IOU ratio.\n    Note: It assumes that target-segments are more scarce that test-segments\n    \"\"\"", "\n", "if", "target_segments", ".", "ndim", "!=", "2", "or", "test_segments", ".", "ndim", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'Dimension of arguments is incorrect'", ")", "\n", "\n", "", "m", ",", "n", "=", "target_segments", ".", "shape", "[", "0", "]", ",", "test_segments", ".", "shape", "[", "0", "]", "\n", "tiou", "=", "np", ".", "empty", "(", "(", "m", ",", "n", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "tt1", "=", "np", ".", "maximum", "(", "target_segments", "[", "i", ",", "0", "]", ",", "test_segments", "[", ":", ",", "0", "]", ")", "\n", "tt2", "=", "np", ".", "minimum", "(", "target_segments", "[", "i", ",", "1", "]", ",", "test_segments", "[", ":", ",", "1", "]", ")", "\n", "\n", "# Non-negative overlap score", "\n", "intersection", "=", "(", "tt2", "-", "tt1", "+", "1.0", ")", ".", "clip", "(", "0", ")", "\n", "union", "=", "(", "(", "test_segments", "[", ":", ",", "1", "]", "-", "test_segments", "[", ":", ",", "0", "]", "+", "1", ")", "+", "\n", "(", "target_segments", "[", "i", ",", "1", "]", "-", "target_segments", "[", "i", ",", "0", "]", "+", "1", ")", "-", "\n", "intersection", ")", "\n", "# Compute overlap as the ratio of the intersection", "\n", "# over union of two segments at the frame level.", "\n", "tiou", "[", "i", ",", ":", "]", "=", "intersection", "/", "union", "\n", "", "return", "tiou", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.average_recall_vs_nr_proposals": [[62, 149], ["numpy.linspace", "proposals[].unique", "numpy.empty", "numpy.empty", "numpy.empty", "enumerate", "recall.mean.mean", "prop_eval.segment_tiou", "score_lst.append", "numpy.arange", "enumerate", "[].argsort", "enumerate", "np.empty.sum", "np.empty.sum", "float", "int"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.segment_tiou"], ["", "def", "average_recall_vs_nr_proposals", "(", "proposals", ",", "ground_truth", ",", "\n", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "1.0", ",", "11", ")", ")", ":", "\n", "    ", "\"\"\" Computes the average recall given an average number \n        of proposals per video.\n\n    Parameters\n    ----------\n    proposals : DataFrame\n        pandas table with the resulting proposals. It must include \n        the following columns: {'video-name': (str) Video identifier,\n                                'f-init': (int) Starting index Frame,\n                                'f-end': (int) Ending index Frame,\n                                'score': (float) Proposal confidence}\n    ground_truth : DataFrame\n        pandas table with annotations of the dataset. It must include \n        the following columns: {'video-name': (str) Video identifier,\n                                'f-init': (int) Starting index Frame,\n                                'f-end': (int) Ending index Frame}\n    tiou_thresholds : 1darray, optional\n        array with tiou threholds.\n\n    Outputs\n    -------\n    average_recall : 1darray\n        recall averaged over a list of tiou threshold.\n    proposals_per_video : 1darray\n        average number of proposals per video.\n    \"\"\"", "\n", "# Get list of videos.", "\n", "video_lst", "=", "proposals", "[", "'video-name'", "]", ".", "unique", "(", ")", "\n", "\n", "# For each video, computes tiou scores among the retrieved proposals.", "\n", "score_lst", "=", "[", "]", "\n", "for", "videoid", "in", "video_lst", ":", "\n", "\n", "# Get proposals for this video.", "\n", "        ", "prop_idx", "=", "proposals", "[", "'video-name'", "]", "==", "videoid", "\n", "this_video_proposals", "=", "proposals", "[", "prop_idx", "]", "[", "[", "'f-init'", ",", "\n", "'f-end'", "]", "]", ".", "values", "\n", "# Sort proposals by score.", "\n", "sort_idx", "=", "proposals", "[", "prop_idx", "]", "[", "'score'", "]", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "this_video_proposals", "=", "this_video_proposals", "[", "sort_idx", ",", ":", "]", "\n", "\n", "# Get ground-truth instances associated to this video.", "\n", "gt_idx", "=", "ground_truth", "[", "'video-name'", "]", "==", "videoid", "\n", "this_video_ground_truth", "=", "ground_truth", "[", "gt_idx", "]", "[", "[", "'f-init'", ",", "\n", "'f-end'", "]", "]", ".", "values", "\n", "\n", "# Compute tiou scores.", "\n", "tiou", "=", "segment_tiou", "(", "this_video_ground_truth", ",", "this_video_proposals", ")", "\n", "score_lst", ".", "append", "(", "tiou", ")", "\n", "\n", "# Given that the length of the videos is really varied, we ", "\n", "# compute the number of proposals in terms of a ratio of the total ", "\n", "# proposals retrieved, i.e. average recall at a percentage of proposals ", "\n", "# retrieved per video.", "\n", "\n", "# Computes average recall.", "\n", "", "pcn_lst", "=", "np", ".", "arange", "(", "1", ",", "101", ")", "/", "100.0", "\n", "matches", "=", "np", ".", "empty", "(", "(", "video_lst", ".", "shape", "[", "0", "]", ",", "pcn_lst", ".", "shape", "[", "0", "]", ")", ")", "\n", "positives", "=", "np", ".", "empty", "(", "video_lst", ".", "shape", "[", "0", "]", ")", "\n", "recall", "=", "np", ".", "empty", "(", "(", "tiou_thresholds", ".", "shape", "[", "0", "]", ",", "pcn_lst", ".", "shape", "[", "0", "]", ")", ")", "\n", "# Iterates over each tiou threshold.", "\n", "for", "ridx", ",", "tiou", "in", "enumerate", "(", "tiou_thresholds", ")", ":", "\n", "\n", "# Inspect positives retrieved per video at different ", "\n", "# number of proposals (percentage of the total retrieved).", "\n", "        ", "for", "i", ",", "score", "in", "enumerate", "(", "score_lst", ")", ":", "\n", "# Total positives per video.", "\n", "            ", "positives", "[", "i", "]", "=", "score", ".", "shape", "[", "0", "]", "\n", "\n", "for", "j", ",", "pcn", "in", "enumerate", "(", "pcn_lst", ")", ":", "\n", "# Get number of proposals as a percentage of total retrieved.", "\n", "                ", "nr_proposals", "=", "int", "(", "score", ".", "shape", "[", "1", "]", "*", "pcn", ")", "\n", "# Find proposals that satisfies minimum tiou threhold.", "\n", "matches", "[", "i", ",", "j", "]", "=", "(", "(", "score", "[", ":", ",", ":", "nr_proposals", "]", ">=", "tiou", ")", ".", "sum", "(", "axis", "=", "1", ")", ">", "0", ")", ".", "sum", "(", ")", "\n", "\n", "# Computes recall given the set of matches per video.", "\n", "", "", "recall", "[", "ridx", ",", ":", "]", "=", "matches", ".", "sum", "(", "axis", "=", "0", ")", "/", "positives", ".", "sum", "(", ")", "\n", "\n", "# Recall is averaged.", "\n", "", "recall", "=", "recall", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "# Get the average number of proposals per video.", "\n", "proposals_per_video", "=", "pcn_lst", "*", "(", "float", "(", "proposals", ".", "shape", "[", "0", "]", ")", "/", "video_lst", ".", "shape", "[", "0", "]", ")", "\n", "\n", "return", "recall", ",", "proposals_per_video", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.average_recall_vs_freq": [[150, 206], ["numpy.linspace", "proposals[].unique", "numpy.array", "numpy.empty", "numpy.empty", "numpy.empty", "enumerate", "recall.mean.mean", "prop_eval.segment_tiou", "score_lst.append", "score_name.append", "enumerate", "[].argsort", "float", "enumerate", "np.empty.sum", "np.empty.sum", "min", "numpy.arange", "int"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.segment_tiou"], ["", "def", "average_recall_vs_freq", "(", "proposals", ",", "ground_truth", ",", "frm_nums", ",", "\n", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "1.0", ",", "11", ")", ")", ":", "\n", "# Get list of videos.", "\n", "    ", "video_lst", "=", "proposals", "[", "'video-name'", "]", ".", "unique", "(", ")", "\n", "\n", "# For each video, computes tiou scores among the retrieved proposals.", "\n", "score_lst", "=", "[", "]", "\n", "score_name", "=", "[", "]", "\n", "for", "videoid", "in", "video_lst", ":", "\n", "\n", "# Get proposals for this video.", "\n", "        ", "prop_idx", "=", "proposals", "[", "'video-name'", "]", "==", "videoid", "\n", "this_video_proposals", "=", "proposals", "[", "prop_idx", "]", "[", "[", "'f-init'", ",", "\n", "'f-end'", "]", "]", ".", "values", "\n", "# Sort proposals by score.", "\n", "sort_idx", "=", "proposals", "[", "prop_idx", "]", "[", "'score'", "]", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "this_video_proposals", "=", "this_video_proposals", "[", "sort_idx", ",", ":", "]", "\n", "\n", "# Get ground-truth instances associated to this video.", "\n", "gt_idx", "=", "ground_truth", "[", "'video-name'", "]", "==", "videoid", "\n", "this_video_ground_truth", "=", "ground_truth", "[", "gt_idx", "]", "[", "[", "'f-init'", ",", "\n", "'f-end'", "]", "]", ".", "values", "\n", "\n", "# Compute tiou scores.", "\n", "tiou", "=", "segment_tiou", "(", "this_video_ground_truth", ",", "this_video_proposals", ")", "\n", "score_lst", ".", "append", "(", "tiou", ")", "\n", "score_name", ".", "append", "(", "videoid", ")", "\n", "\n", "# Computes average recall.", "\n", "", "freq_lst", "=", "np", ".", "array", "(", "[", "float", "(", "number", ")", "for", "number", "in", "10", "**", "(", "np", ".", "arange", "(", "-", "1", ",", "0.9", ",", "0.1", ")", ")", "]", ")", "\n", "matches", "=", "np", ".", "empty", "(", "(", "video_lst", ".", "shape", "[", "0", "]", ",", "freq_lst", ".", "shape", "[", "0", "]", ")", ")", "\n", "positives", "=", "np", ".", "empty", "(", "video_lst", ".", "shape", "[", "0", "]", ")", "\n", "recall", "=", "np", ".", "empty", "(", "(", "tiou_thresholds", ".", "shape", "[", "0", "]", ",", "freq_lst", ".", "shape", "[", "0", "]", ")", ")", "\n", "# Iterates over each tiou threshold.", "\n", "for", "ridx", ",", "tiou", "in", "enumerate", "(", "tiou_thresholds", ")", ":", "\n", "\n", "# Inspect positives retrieved per video at different ", "\n", "# number of proposals (percentage of the total retrieved).", "\n", "        ", "for", "i", ",", "score", "in", "enumerate", "(", "score_lst", ")", ":", "\n", "            ", "frm_num", "=", "frm_nums", "[", "score_name", "[", "i", "]", "]", "\n", "# Total positives per video.", "\n", "positives", "[", "i", "]", "=", "score", ".", "shape", "[", "0", "]", "\n", "\n", "for", "j", ",", "freq", "in", "enumerate", "(", "freq_lst", ")", ":", "\n", "# Get number of proposals as a percentage of total retrieved.", "\n", "                ", "nr_proposals", "=", "min", "(", "score", ".", "shape", "[", "1", "]", ",", "int", "(", "freq", "*", "frm_num", "/", "30.0", ")", ")", "\n", "# Find proposals that satisfies minimum tiou threhold.", "\n", "matches", "[", "i", ",", "j", "]", "=", "(", "(", "score", "[", ":", ",", ":", "nr_proposals", "]", ">=", "tiou", ")", ".", "sum", "(", "axis", "=", "1", ")", ">", "0", ")", ".", "sum", "(", ")", "\n", "\n", "# Computes recall given the set of matches per video.", "\n", "", "", "recall", "[", "ridx", ",", ":", "]", "=", "matches", ".", "sum", "(", "axis", "=", "0", ")", "/", "positives", ".", "sum", "(", ")", "\n", "\n", "# Recall is averaged.", "\n", "", "recall", "=", "recall", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "return", "recall", ",", "freq_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.recall_vs_tiou_thresholds": [[207, 258], ["numpy.arange", "proposals[].unique", "numpy.empty", "numpy.empty", "numpy.empty", "enumerate", "prop_eval.segment_tiou", "score_lst.append", "enumerate", "[].argsort", "float", "int", "matches[].sum", "np.empty.sum"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.segment_tiou"], ["", "def", "recall_vs_tiou_thresholds", "(", "proposals", ",", "ground_truth", ",", "nr_proposals", "=", "1000", ",", "\n", "tiou_thresholds", "=", "np", ".", "arange", "(", "0.05", ",", "1.05", ",", "0.05", ")", ")", ":", "\n", "\n", "# Get list of videos.", "\n", "    ", "video_lst", "=", "proposals", "[", "'video-name'", "]", ".", "unique", "(", ")", "\n", "\n", "# For each video, computes tiou scores among the retrieved proposals.", "\n", "score_lst", "=", "[", "]", "\n", "for", "videoid", "in", "video_lst", ":", "\n", "\n", "# Get proposals for this video.", "\n", "        ", "prop_idx", "=", "proposals", "[", "'video-name'", "]", "==", "videoid", "\n", "this_video_proposals", "=", "proposals", "[", "prop_idx", "]", "[", "[", "'f-init'", ",", "\n", "'f-end'", "]", "]", ".", "values", "\n", "# Sort proposals by score.", "\n", "sort_idx", "=", "proposals", "[", "prop_idx", "]", "[", "'score'", "]", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "this_video_proposals", "=", "this_video_proposals", "[", "sort_idx", ",", ":", "]", "\n", "\n", "# Get ground-truth instances associated to this video.", "\n", "gt_idx", "=", "ground_truth", "[", "'video-name'", "]", "==", "videoid", "\n", "this_video_ground_truth", "=", "ground_truth", "[", "gt_idx", "]", "[", "[", "'f-init'", ",", "\n", "'f-end'", "]", "]", ".", "values", "\n", "\n", "# Compute tiou scores.", "\n", "tiou", "=", "segment_tiou", "(", "this_video_ground_truth", ",", "this_video_proposals", ")", "\n", "score_lst", ".", "append", "(", "tiou", ")", "\n", "\n", "# To obtain the average number of proposals, we need to define a ", "\n", "# percentage of proposals to get per video.", "\n", "", "pcn", "=", "(", "video_lst", ".", "shape", "[", "0", "]", "*", "float", "(", "nr_proposals", ")", ")", "/", "proposals", ".", "shape", "[", "0", "]", "\n", "\n", "# Computes recall at different tiou thresholds.", "\n", "matches", "=", "np", ".", "empty", "(", "(", "video_lst", ".", "shape", "[", "0", "]", ",", "tiou_thresholds", ".", "shape", "[", "0", "]", ")", ")", "\n", "positives", "=", "np", ".", "empty", "(", "video_lst", ".", "shape", "[", "0", "]", ")", "\n", "recall", "=", "np", ".", "empty", "(", "tiou_thresholds", ".", "shape", "[", "0", "]", ")", "\n", "# Iterates over each tiou threshold.", "\n", "for", "ridx", ",", "tiou", "in", "enumerate", "(", "tiou_thresholds", ")", ":", "\n", "\n", "        ", "for", "i", ",", "score", "in", "enumerate", "(", "score_lst", ")", ":", "\n", "# Total positives per video.", "\n", "            ", "positives", "[", "i", "]", "=", "score", ".", "shape", "[", "0", "]", "\n", "\n", "# Get number of proposals at the fixed percentage of total retrieved.", "\n", "nr_proposals", "=", "int", "(", "score", ".", "shape", "[", "1", "]", "*", "pcn", ")", "\n", "# Find proposals that satisfies minimum tiou threhold.", "\n", "matches", "[", "i", ",", "ridx", "]", "=", "(", "(", "score", "[", ":", ",", ":", "nr_proposals", "]", ">=", "tiou", ")", ".", "sum", "(", "axis", "=", "1", ")", ">", "0", ")", ".", "sum", "(", ")", "\n", "\n", "# Computes recall given the set of matches per video.", "\n", "", "recall", "[", "ridx", "]", "=", "matches", "[", ":", ",", "ridx", "]", ".", "sum", "(", "axis", "=", "0", ")", "/", "positives", ".", "sum", "(", ")", "\n", "\n", "", "return", "recall", ",", "tiou_thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.recall_freq_vs_tiou_thresholds": [[259, 309], ["numpy.arange", "proposals[].unique", "numpy.empty", "numpy.empty", "numpy.empty", "enumerate", "prop_eval.segment_tiou", "score_lst.append", "score_name.append", "enumerate", "[].argsort", "int", "matches[].sum", "np.empty.sum", "min"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.segment_tiou"], ["", "def", "recall_freq_vs_tiou_thresholds", "(", "proposals", ",", "ground_truth", ",", "frm_nums", ",", "\n", "tiou_thresholds", "=", "np", ".", "arange", "(", "0.05", ",", "1.05", ",", "0.05", ")", ")", ":", "\n", "\n", "# Get list of videos.", "\n", "    ", "video_lst", "=", "proposals", "[", "'video-name'", "]", ".", "unique", "(", ")", "\n", "\n", "# For each video, computes tiou scores among the retrieved proposals.", "\n", "score_lst", "=", "[", "]", "\n", "score_name", "=", "[", "]", "\n", "for", "videoid", "in", "video_lst", ":", "\n", "\n", "# Get proposals for this video.", "\n", "        ", "prop_idx", "=", "proposals", "[", "'video-name'", "]", "==", "videoid", "\n", "this_video_proposals", "=", "proposals", "[", "prop_idx", "]", "[", "[", "'f-init'", ",", "\n", "'f-end'", "]", "]", ".", "values", "\n", "# Sort proposals by score.", "\n", "sort_idx", "=", "proposals", "[", "prop_idx", "]", "[", "'score'", "]", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "this_video_proposals", "=", "this_video_proposals", "[", "sort_idx", ",", ":", "]", "\n", "\n", "# Get ground-truth instances associated to this video.", "\n", "gt_idx", "=", "ground_truth", "[", "'video-name'", "]", "==", "videoid", "\n", "this_video_ground_truth", "=", "ground_truth", "[", "gt_idx", "]", "[", "[", "'f-init'", ",", "\n", "'f-end'", "]", "]", ".", "values", "\n", "\n", "# Compute tiou scores.", "\n", "tiou", "=", "segment_tiou", "(", "this_video_ground_truth", ",", "this_video_proposals", ")", "\n", "score_lst", ".", "append", "(", "tiou", ")", "\n", "score_name", ".", "append", "(", "videoid", ")", "\n", "\n", "", "freq", "=", "1.0", "\n", "\n", "# Computes recall at different tiou thresholds.", "\n", "matches", "=", "np", ".", "empty", "(", "(", "video_lst", ".", "shape", "[", "0", "]", ",", "tiou_thresholds", ".", "shape", "[", "0", "]", ")", ")", "\n", "positives", "=", "np", ".", "empty", "(", "video_lst", ".", "shape", "[", "0", "]", ")", "\n", "recall", "=", "np", ".", "empty", "(", "tiou_thresholds", ".", "shape", "[", "0", "]", ")", "\n", "# Iterates over each tiou threshold.", "\n", "for", "ridx", ",", "tiou", "in", "enumerate", "(", "tiou_thresholds", ")", ":", "\n", "\n", "        ", "for", "i", ",", "score", "in", "enumerate", "(", "score_lst", ")", ":", "\n", "# Total positives per video.", "\n", "            ", "positives", "[", "i", "]", "=", "score", ".", "shape", "[", "0", "]", "\n", "frm_num", "=", "frm_nums", "[", "score_name", "[", "i", "]", "]", "\n", "nr_proposals", "=", "int", "(", "min", "(", "score", ".", "shape", "[", "1", "]", ",", "freq", "*", "frm_num", "/", "30.0", ")", ")", "\n", "# Find proposals that satisfies minimum tiou threhold.", "\n", "matches", "[", "i", ",", "ridx", "]", "=", "(", "(", "score", "[", ":", ",", ":", "nr_proposals", "]", ">=", "tiou", ")", ".", "sum", "(", "axis", "=", "1", ")", ">", "0", ")", ".", "sum", "(", ")", "\n", "\n", "# Computes recall given the set of matches per video.", "\n", "", "recall", "[", "ridx", "]", "=", "matches", "[", ":", ",", "ridx", "]", ".", "sum", "(", "axis", "=", "0", ")", "/", "positives", ".", "sum", "(", ")", "\n", "\n", "", "return", "recall", ",", "tiou_thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.main": [[311, 507], ["pickle.load", "prop_eval.pkl2dataframe", "pandas.DataFrame", "pandas.read_csv", "prop_eval.average_recall_vs_nr_proposals", "prop_eval.average_recall_vs_freq", "prop_eval.recall_vs_tiou_thresholds", "prop_eval.recall_freq_vs_tiou_thresholds", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.array", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.array", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.array", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.load", "numpy.array", "matplotlib.figure", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.grid", "matplotlib.ylim", "matplotlib.xlim", "matplotlib.yticks", "matplotlib.legend", "matplotlib.setp", "matplotlib.setp", "matplotlib.savefig", "matplotlib.figure", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.grid", "matplotlib.ylim", "matplotlib.xlim", "matplotlib.yticks", "matplotlib.legend", "matplotlib.setp", "matplotlib.setp", "matplotlib.savefig", "matplotlib.figure", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.grid", "matplotlib.ylim", "matplotlib.xlim", "matplotlib.xticks", "matplotlib.legend", "matplotlib.setp", "matplotlib.setp", "matplotlib.savefig", "matplotlib.figure", "matplotlib.ylabel", "matplotlib.xlabel", "matplotlib.grid", "matplotlib.ylim", "matplotlib.xlim", "matplotlib.xticks", "matplotlib.legend", "matplotlib.setp", "matplotlib.setp", "matplotlib.savefig", "open", "requests.get", "io.StringIO", "matplotlib.semilogx", "numpy.arange", "matplotlib.axes().get_xticklabels", "matplotlib.axes().get_yticklabels", "matplotlib.semilogx", "numpy.arange", "matplotlib.axes().get_xticklabels", "matplotlib.axes().get_yticklabels", "matplotlib.plot", "numpy.arange", "matplotlib.axes().get_xticklabels", "matplotlib.axes().get_yticklabels", "matplotlib.plot", "numpy.arange", "matplotlib.axes().get_xticklabels", "matplotlib.axes().get_yticklabels", "s.decode", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "str", "str", "matplotlib.axes", "matplotlib.axes", "sys.argv[].split", "str", "str", "matplotlib.axes", "matplotlib.axes", "sys.argv[].split", "str", "str", "matplotlib.axes", "matplotlib.axes", "sys.argv[].split", "str", "str", "matplotlib.axes", "matplotlib.axes", "sys.argv[].split"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.pkl2dataframe", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.average_recall_vs_nr_proposals", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.average_recall_vs_freq", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.recall_vs_tiou_thresholds", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_thumos.prop_eval.recall_freq_vs_tiou_thresholds"], ["", "def", "main", "(", ")", ":", "\n", "# Retrieves and loads DAPs proposal results.", "\n", "    ", "frm_nums", "=", "pickle", ".", "load", "(", "open", "(", "\"./frm_num.pkl\"", ",", "'rb'", ")", ")", "\n", "rows", "=", "pkl2dataframe", "(", "frm_nums", ")", "\n", "daps_results", "=", "pd", ".", "DataFrame", "(", "rows", ",", "columns", "=", "[", "'f-end'", ",", "'f-init'", ",", "'score'", ",", "'video-frames'", ",", "'video-name'", "]", ")", "\n", "\n", "# Retrieves and loads Thumos14 test set ground-truth.", "\n", "ground_truth_url", "=", "(", "'https://gist.githubusercontent.com/cabaf/'", "\n", "'ed34a35ee4443b435c36de42c4547bd7/raw/'", "\n", "'952f17b9cdc6aa4e6d696315ba75091224f5de97/'", "\n", "'thumos14_test_groundtruth.csv'", ")", "\n", "s", "=", "requests", ".", "get", "(", "ground_truth_url", ")", ".", "content", "\n", "ground_truth", "=", "pd", ".", "read_csv", "(", "io", ".", "StringIO", "(", "s", ".", "decode", "(", "'utf-8'", ")", ")", ",", "sep", "=", "' '", ")", "\n", "# Computes average recall vs average number of proposals.", "\n", "average_recall", ",", "average_nr_proposals", "=", "average_recall_vs_nr_proposals", "(", "daps_results", ",", "\n", "ground_truth", ")", "\n", "\n", "# Computes average recall vs proposal frequency.", "\n", "average_recall_freq", ",", "freqs", "=", "average_recall_vs_freq", "(", "daps_results", ",", "ground_truth", ",", "frm_nums", ")", "\n", "\n", "# Computes recall for different tiou thresholds at a fixed average number of proposals.", "\n", "recall", ",", "tiou_thresholds", "=", "recall_vs_tiou_thresholds", "(", "daps_results", ",", "ground_truth", ",", "\n", "nr_proposals", "=", "1000", ")", "\n", "\n", "recall_freq", ",", "tiou_thresholds_freq", "=", "recall_freq_vs_tiou_thresholds", "(", "daps_results", ",", "ground_truth", ",", "frm_nums", ")", "\n", "\n", "\n", "\n", "# Define plot style.", "\n", "method", "=", "{", "'DAPs'", ":", "{", "'legend'", ":", "'DAPs-prop'", ",", "\n", "'color'", ":", "np", ".", "array", "(", "[", "102", ",", "166", ",", "30", "]", ")", "/", "255.0", ",", "\n", "'marker'", ":", "None", ",", "\n", "'linewidth'", ":", "6.5", ",", "\n", "'linestyle'", ":", "'-'", "}", ",", "\n", "'SCNN-prop'", ":", "{", "'legend'", ":", "'SCNN-prop'", ",", "\n", "'color'", ":", "np", ".", "array", "(", "[", "230", ",", "171", ",", "2", "]", ")", "/", "255.0", ",", "\n", "'marker'", ":", "None", ",", "\n", "'linewidth'", ":", "6.5", ",", "\n", "'linestyle'", ":", "'-'", "}", ",", "\n", "'Sparse-prop'", ":", "{", "'legend'", ":", "'Sparse-prop'", ",", "\n", "'color'", ":", "np", ".", "array", "(", "[", "153", ",", "78", ",", "160", "]", ")", "/", "255.0", ",", "\n", "'marker'", ":", "None", ",", "\n", "'linewidth'", ":", "6.5", ",", "\n", "'linestyle'", ":", "'-'", "}", ",", "\n", "'Sliding Window'", ":", "{", "'legend'", ":", "'Sliding Window'", ",", "\n", "'color'", ":", "np", ".", "array", "(", "[", "205", ",", "110", ",", "51", "]", ")", "/", "255.0", ",", "\n", "'marker'", ":", "None", ",", "\n", "'linewidth'", ":", "6.5", ",", "\n", "'linestyle'", ":", "'-'", "}", ",", "\n", "'Random'", ":", "{", "'legend'", ":", "'Random'", ",", "\n", "'color'", ":", "np", ".", "array", "(", "[", "132", ",", "132", ",", "132", "]", ")", "/", "255.0", ",", "\n", "'marker'", ":", "None", ",", "\n", "'linewidth'", ":", "6.5", ",", "\n", "'linestyle'", ":", "'-'", "}", ",", "\n", "'Our Method'", ":", "{", "'legend'", ":", "'Our Method'", ",", "\n", "'color'", ":", "np", ".", "array", "(", "[", "224", ",", "44", ",", "119", "]", ")", "/", "255.0", ",", "\n", "'marker'", ":", "None", ",", "\n", "'linewidth'", ":", "6.5", ",", "\n", "'linestyle'", ":", "'-'", "}", "\n", "}", "\n", "\n", "\n", "fn_size", "=", "30", "\n", "legend_size", "=", "27.5", "\n", "\n", "\n", "#reference points load:", "\n", "avg_prop_pnt_pairs", "=", "{", "}", "\n", "avg_prop_pnt_pairs", "[", "'DAPs'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/DAP_avg_prop_pnt_pairs.npy\"", ")", "\n", "avg_prop_pnt_pairs", "[", "'SCNN-prop'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/SCNN_avg_prop_pnt_pairs.npy\"", ")", "\n", "avg_prop_pnt_pairs", "[", "'Sparse-prop'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/sparse_avg_prop_pnt_pairs.npy\"", ")", "\n", "avg_prop_pnt_pairs", "[", "'Sparse-prop'", "]", "=", "avg_prop_pnt_pairs", "[", "'Sparse-prop'", "]", "\n", "avg_prop_pnt_pairs", "[", "'flow'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/flow_svm_avg_prop_pnt_pairs.npy\"", ")", "\n", "avg_prop_pnt_pairs", "[", "'Sliding Window'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/sliding_avg_prop_pnt_pairs.npy\"", ")", "\n", "avg_prop_pnt_pairs", "[", "'Random'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/random_avg_prop_pnt_pairs.npy\"", ")", "\n", "avg_prop_pnt_pairs", "[", "'Our Method'", "]", "=", "np", ".", "array", "(", "[", "average_nr_proposals", ",", "average_recall", "]", ")", "\n", "\n", "freq_pnt_pairs", "=", "{", "}", "\n", "freq_pnt_pairs", "[", "'DAPs'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/DAP_freq_pnt_pairs.npy\"", ")", "\n", "freq_pnt_pairs", "[", "'SCNN-prop'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/scnn_freq_pnt_pairs.npy\"", ")", "\n", "freq_pnt_pairs", "[", "'Sparse-prop'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/sparse_freq_pnt_pairs.npy\"", ")", "\n", "freq_pnt_pairs", "[", "'Sparse-prop'", "]", "=", "freq_pnt_pairs", "[", "'Sparse-prop'", "]", "[", ":", ",", "0", ":", "-", "2", "]", "\n", "freq_pnt_pairs", "[", "'flow'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/flow_svm_freq_pnt_pairs.npy\"", ")", "\n", "freq_pnt_pairs", "[", "'Sliding Window'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/sliding_freq_pnt_pairs.npy\"", ")", "\n", "freq_pnt_pairs", "[", "'Random'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/random_freq_pnt_pairs.npy\"", ")", "\n", "freq_pnt_pairs", "[", "'Our Method'", "]", "=", "np", ".", "array", "(", "[", "freqs", ",", "average_recall_freq", "]", ")", "\n", "\n", "recall1000_pnt_pairs", "=", "{", "}", "\n", "recall1000_pnt_pairs", "[", "'DAPs'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/DAP_recall_pnt_pairs.npy\"", ")", "\n", "recall1000_pnt_pairs", "[", "'SCNN-prop'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/SCNN_recall_pnt_pairs.npy\"", ")", "\n", "recall1000_pnt_pairs", "[", "'Sparse-prop'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/sparse_recall_pnt_pairs.npy\"", ")", "\n", "recall1000_pnt_pairs", "[", "'flow'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/flow_svm_recall_pnt_pairs.npy\"", ")", "\n", "recall1000_pnt_pairs", "[", "'Sliding Window'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/sliding_recall_pnt_pairs.npy\"", ")", "\n", "recall1000_pnt_pairs", "[", "'Random'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/random_recall_pnt_pairs.npy\"", ")", "\n", "recall1000_pnt_pairs", "[", "'Our Method'", "]", "=", "np", ".", "array", "(", "[", "tiou_thresholds", ",", "recall", "]", ")", "\n", "\n", "recall_freq_pnt_pairs", "=", "{", "}", "\n", "recall_freq_pnt_pairs", "[", "'DAPs'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/DAPs_recall_freq_pnt_pairs.npy\"", ")", "\n", "recall_freq_pnt_pairs", "[", "'SCNN-prop'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/scnn_recall_freq_pnt_pairs.npy\"", ")", "\n", "recall_freq_pnt_pairs", "[", "'Sparse-prop'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/sparse_recall_freq_pnt_pairs.npy\"", ")", "\n", "#recall_freq_pnt_pairs['flow'] = np.load(\"./ref_pnt_pairs/flow_svm_recall_pnt_pairs.npy\")", "\n", "recall_freq_pnt_pairs", "[", "'Sliding Window'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/sliding_recall_freq_pnt_pairs.npy\"", ")", "\n", "recall_freq_pnt_pairs", "[", "'Random'", "]", "=", "np", ".", "load", "(", "\"./ref_pnt_pairs/random_recall_freq_pnt_pairs.npy\"", ")", "\n", "recall_freq_pnt_pairs", "[", "'Our Method'", "]", "=", "np", ".", "array", "(", "[", "tiou_thresholds_freq", ",", "recall_freq", "]", ")", "\n", "\n", "legends", "=", "[", "'Random'", ",", "'Sliding Window'", ",", "'Sparse-prop'", ",", "'DAPs'", ",", "'SCNN-prop'", ",", "'Our Method'", "]", "\n", "#legends = ['DAPs','SCNN-prop','Our Method']", "\n", "# legends = ['Our Method']", "\n", "\n", "plt", ".", "figure", "(", "num", "=", "None", ",", "figsize", "=", "(", "12", ",", "10", ")", ")", "\n", "\n", "# Plots Average Recall vs Average number of proposals.", "\n", "for", "_key", "in", "legends", ":", "\n", "        ", "plt", ".", "semilogx", "(", "avg_prop_pnt_pairs", "[", "_key", "]", "[", "0", ",", ":", "]", ",", "avg_prop_pnt_pairs", "[", "_key", "]", "[", "1", ",", ":", "]", ",", "\n", "label", "=", "method", "[", "_key", "]", "[", "'legend'", "]", ",", "\n", "color", "=", "method", "[", "_key", "]", "[", "'color'", "]", ",", "\n", "linewidth", "=", "method", "[", "_key", "]", "[", "'linewidth'", "]", ",", "\n", "linestyle", "=", "str", "(", "method", "[", "_key", "]", "[", "'linestyle'", "]", ")", ",", "\n", "marker", "=", "str", "(", "method", "[", "_key", "]", "[", "'marker'", "]", ")", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'Average Recall'", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "xlabel", "(", "'Average number of retrieved proposals'", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "\"both\"", ")", "\n", "plt", ".", "ylim", "(", "[", "0", ",", "0.8", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "10", "**", "1", ",", "5", "*", "10", "**", "3", "]", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "0.0", ",", "0.9", ",", "0.2", ")", ")", "\n", "plt", ".", "legend", "(", "legends", ",", "loc", "=", "2", ",", "prop", "=", "{", "'size'", ":", "legend_size", "}", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "axes", "(", ")", ".", "get_xticklabels", "(", ")", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "axes", "(", ")", ".", "get_yticklabels", "(", ")", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "savefig", "(", "sys", ".", "argv", "[", "1", "]", ".", "split", "(", "\".pkl\"", ")", "[", "0", "]", "+", "\"_avg_recall.pdf\"", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "#plt.show()", "\n", "\n", "plt", ".", "figure", "(", "num", "=", "None", ",", "figsize", "=", "(", "12", ",", "10", ")", ")", "\n", "# Plots Average Recall vs Average number of proposals.", "\n", "for", "_key", "in", "legends", ":", "\n", "        ", "plt", ".", "semilogx", "(", "freq_pnt_pairs", "[", "_key", "]", "[", "0", ",", ":", "]", ",", "freq_pnt_pairs", "[", "_key", "]", "[", "1", ",", ":", "]", ",", "\n", "label", "=", "method", "[", "_key", "]", "[", "'legend'", "]", ",", "\n", "color", "=", "method", "[", "_key", "]", "[", "'color'", "]", ",", "\n", "linewidth", "=", "method", "[", "_key", "]", "[", "'linewidth'", "]", ",", "\n", "linestyle", "=", "str", "(", "method", "[", "_key", "]", "[", "'linestyle'", "]", ")", ",", "\n", "marker", "=", "str", "(", "method", "[", "_key", "]", "[", "'marker'", "]", ")", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'Average Recall'", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "xlabel", "(", "'Proposal frequency'", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "\"both\"", ")", "\n", "plt", ".", "ylim", "(", "[", "0", ",", "0.8", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "10", "**", "(", "-", "1", ")", ",", "10", "]", ")", "\n", "plt", ".", "yticks", "(", "np", ".", "arange", "(", "0.0", ",", "0.9", ",", "0.2", ")", ")", "\n", "plt", ".", "legend", "(", "legends", ",", "loc", "=", "2", ",", "prop", "=", "{", "'size'", ":", "legend_size", "}", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "axes", "(", ")", ".", "get_xticklabels", "(", ")", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "axes", "(", ")", ".", "get_yticklabels", "(", ")", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "savefig", "(", "sys", ".", "argv", "[", "1", "]", ".", "split", "(", "\".pkl\"", ")", "[", "0", "]", "+", "\"_freq.pdf\"", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "#plt.show()", "\n", "\n", "# Plots recall at different tiou thresholds.", "\n", "plt", ".", "figure", "(", "num", "=", "None", ",", "figsize", "=", "(", "12", ",", "10", ")", ")", "\n", "for", "_key", "in", "legends", ":", "\n", "        ", "plt", ".", "plot", "(", "recall1000_pnt_pairs", "[", "_key", "]", "[", "0", ",", ":", "]", ",", "recall1000_pnt_pairs", "[", "_key", "]", "[", "1", ",", ":", "]", ",", "\n", "label", "=", "method", "[", "_key", "]", "[", "'legend'", "]", ",", "\n", "color", "=", "method", "[", "_key", "]", "[", "'color'", "]", ",", "\n", "linewidth", "=", "method", "[", "_key", "]", "[", "'linewidth'", "]", ",", "\n", "linestyle", "=", "str", "(", "method", "[", "_key", "]", "[", "'linestyle'", "]", ")", ",", "\n", "marker", "=", "str", "(", "method", "[", "_key", "]", "[", "'marker'", "]", ")", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'Recall@AN=1000'", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "xlabel", "(", "'tIoU'", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "\"both\"", ")", "\n", "plt", ".", "ylim", "(", "[", "0", ",", "1", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "0.1", ",", "1", "]", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "0.0", ",", "1.1", ",", "0.2", ")", ")", "\n", "plt", ".", "legend", "(", "legends", ",", "loc", "=", "3", ",", "prop", "=", "{", "'size'", ":", "legend_size", "}", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "axes", "(", ")", ".", "get_xticklabels", "(", ")", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "axes", "(", ")", ".", "get_yticklabels", "(", ")", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "savefig", "(", "sys", ".", "argv", "[", "1", "]", ".", "split", "(", "\".pkl\"", ")", "[", "0", "]", "+", "\"_recall1000.pdf\"", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "#plt.show()", "\n", "\n", "plt", ".", "figure", "(", "num", "=", "None", ",", "figsize", "=", "(", "12", ",", "10", ")", ")", "\n", "# Plots Average Recall vs Average number of proposals.", "\n", "for", "_key", "in", "legends", ":", "\n", "        ", "plt", ".", "plot", "(", "recall_freq_pnt_pairs", "[", "_key", "]", "[", "0", ",", ":", "]", ",", "recall_freq_pnt_pairs", "[", "_key", "]", "[", "1", ",", ":", "]", ",", "\n", "label", "=", "method", "[", "_key", "]", "[", "'legend'", "]", ",", "\n", "color", "=", "method", "[", "_key", "]", "[", "'color'", "]", ",", "\n", "linewidth", "=", "method", "[", "_key", "]", "[", "'linewidth'", "]", ",", "\n", "linestyle", "=", "str", "(", "method", "[", "_key", "]", "[", "'linestyle'", "]", ")", ",", "\n", "marker", "=", "str", "(", "method", "[", "_key", "]", "[", "'marker'", "]", ")", ")", "\n", "\n", "", "plt", ".", "ylabel", "(", "'Recall@F=1.0'", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "xlabel", "(", "'tIoU'", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "grid", "(", "b", "=", "True", ",", "which", "=", "\"both\"", ")", "\n", "plt", ".", "ylim", "(", "[", "0", ",", "1", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "0.1", ",", "1", "]", ")", "\n", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "0.0", ",", "1.1", ",", "0.2", ")", ")", "\n", "plt", ".", "legend", "(", "legends", ",", "loc", "=", "3", ",", "prop", "=", "{", "'size'", ":", "legend_size", "}", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "axes", "(", ")", ".", "get_xticklabels", "(", ")", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "setp", "(", "plt", ".", "axes", "(", ")", ".", "get_yticklabels", "(", ")", ",", "fontsize", "=", "fn_size", ")", "\n", "plt", ".", "savefig", "(", "sys", ".", "argv", "[", "1", "]", ".", "split", "(", "\".pkl\"", ")", "[", "0", "]", "+", "\"_recall_freq.pdf\"", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "#plt.show()", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.config.defaults._assert_and_infer_cfg": [[77, 80], ["len"], "function", ["None"], ["def", "_assert_and_infer_cfg", "(", "cfg", ")", ":", "\n", "    ", "assert", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "%", "len", "(", "cfg", ".", "GPU_IDS", ")", "==", "0", "\n", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.config.defaults.get_cfg": [[82, 87], ["defaults._assert_and_infer_cfg", "_C.clone"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.config.defaults._assert_and_infer_cfg"], ["", "def", "get_cfg", "(", ")", ":", "\n", "    ", "\"\"\"\n    Get a copy of the default config.\n    \"\"\"", "\n", "return", "_assert_and_infer_cfg", "(", "_C", ".", "clone", "(", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.bmn.BoundaryMatchingNetwork.__init__": [[9, 65], ["torch.Module.__init__", "bmn.BoundaryMatchingNetwork._get_interp1d_mask", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.__init__", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.bmn.BoundaryMatchingNetwork._get_interp1d_mask"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "BoundaryMatchingNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "prop_boundary_ratio", "=", "cfg", ".", "BMN", ".", "PROP_BOUNDARY_RATIO", "\n", "self", ".", "num_sample", "=", "cfg", ".", "BMN", ".", "NUM_SAMPLES", "\n", "self", ".", "num_sample_perbin", "=", "cfg", ".", "BMN", ".", "NUM_SAMPLES_PER_BIN", "\n", "self", ".", "temporal_dim", "=", "cfg", ".", "DATA", ".", "TEMPORAL_DIM", "\n", "self", ".", "max_duration", "=", "cfg", ".", "DATA", ".", "MAX_DURATION", "\n", "\n", "self", ".", "feat_dim", "=", "cfg", ".", "MODEL", ".", "FEAT_DIM", "\n", "\n", "self", ".", "hidden_dim_1d", "=", "cfg", ".", "MODEL", ".", "HIDDEN_DIM_1D", "\n", "self", ".", "hidden_dim_2d", "=", "cfg", ".", "MODEL", ".", "HIDDEN_DIM_2D", "\n", "self", ".", "hidden_dim_3d", "=", "cfg", ".", "MODEL", ".", "HIDDEN_DIM_3D", "\n", "\n", "self", ".", "sample_mask", "=", "self", ".", "_get_interp1d_mask", "(", ")", "\n", "\n", "# Base Module", "\n", "self", ".", "x_1d_b", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "self", ".", "feat_dim", ",", "self", ".", "hidden_dim_1d", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "groups", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "self", ".", "hidden_dim_1d", ",", "self", ".", "hidden_dim_1d", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "groups", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "# Temporal Evaluation Module", "\n", "self", ".", "x_1d_s", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "self", ".", "hidden_dim_1d", ",", "self", ".", "hidden_dim_1d", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "groups", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "self", ".", "hidden_dim_1d", ",", "1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "x_1d_e", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "self", ".", "hidden_dim_1d", ",", "self", ".", "hidden_dim_1d", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "groups", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "self", ".", "hidden_dim_1d", ",", "1", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "# Proposal Evaluation Module", "\n", "self", ".", "x_1d_p", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "self", ".", "hidden_dim_1d", ",", "self", ".", "hidden_dim_1d", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "x_3d_p", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "self", ".", "hidden_dim_1d", ",", "self", ".", "hidden_dim_3d", ",", "kernel_size", "=", "(", "self", ".", "num_sample", ",", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "self", ".", "x_2d_p", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "hidden_dim_3d", ",", "self", ".", "hidden_dim_2d", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "hidden_dim_2d", ",", "self", ".", "hidden_dim_2d", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "hidden_dim_2d", ",", "self", ".", "hidden_dim_2d", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "hidden_dim_2d", ",", "2", ",", "kernel_size", "=", "1", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.bmn.BoundaryMatchingNetwork.forward": [[67, 78], ["bmn.BoundaryMatchingNetwork.x_1d_b", "bmn.BoundaryMatchingNetwork.x_1d_s().squeeze", "bmn.BoundaryMatchingNetwork.x_1d_e().squeeze", "bmn.BoundaryMatchingNetwork.x_1d_p", "bmn.BoundaryMatchingNetwork._boundary_matching_layer", "bmn.BoundaryMatchingNetwork.x_3d_p().squeeze", "bmn.BoundaryMatchingNetwork.x_2d_p", "bmn.BoundaryMatchingNetwork.x_1d_s", "bmn.BoundaryMatchingNetwork.x_1d_e", "bmn.BoundaryMatchingNetwork.x_3d_p"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.bmn.BoundaryMatchingNetwork._boundary_matching_layer"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "base_feature", "=", "self", ".", "x_1d_b", "(", "x", ")", "\n", "\n", "start", "=", "self", ".", "x_1d_s", "(", "base_feature", ")", ".", "squeeze", "(", "1", ")", "\n", "end", "=", "self", ".", "x_1d_e", "(", "base_feature", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "confidence_map", "=", "self", ".", "x_1d_p", "(", "base_feature", ")", "\n", "confidence_map", "=", "self", ".", "_boundary_matching_layer", "(", "confidence_map", ")", "\n", "confidence_map", "=", "self", ".", "x_3d_p", "(", "confidence_map", ")", ".", "squeeze", "(", "2", ")", "\n", "confidence_map", "=", "self", ".", "x_2d_p", "(", "confidence_map", ")", "\n", "return", "confidence_map", ",", "start", ",", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.bmn.BoundaryMatchingNetwork._boundary_matching_layer": [[79, 89], ["x.size", "torch.matmul().reshape", "torch.matmul().reshape", "torch.matmul().reshape", "torch.matmul().reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "_boundary_matching_layer", "(", "self", ",", "x", ")", ":", "\n", "        ", "input_size", "=", "x", ".", "size", "(", ")", "\n", "out", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "sample_mask", ")", ".", "reshape", "(", "\n", "input_size", "[", "0", "]", ",", "\n", "input_size", "[", "1", "]", ",", "\n", "self", ".", "num_sample", ",", "\n", "self", ".", "max_duration", ",", "\n", "self", ".", "temporal_dim", "\n", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.bmn.BoundaryMatchingNetwork._get_interp1d_bin_mask": [[90, 113], ["float", "range", "numpy.stack", "numpy.zeros", "numpy.stack.append", "range", "math.ceil", "math.modf", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "_get_interp1d_bin_mask", "(", "self", ",", "seg_xmin", ",", "seg_xmax", ",", "tscale", ",", "num_sample", ",", "num_sample_perbin", ")", ":", "\n", "# generate sample mask for a boundary-matching pair", "\n", "        ", "plen", "=", "float", "(", "seg_xmax", "-", "seg_xmin", ")", "\n", "plen_sample", "=", "plen", "/", "(", "num_sample", "*", "num_sample_perbin", "-", "1.0", ")", "\n", "total_samples", "=", "[", "\n", "seg_xmin", "+", "plen_sample", "*", "ii", "\n", "for", "ii", "in", "range", "(", "num_sample", "*", "num_sample_perbin", ")", "\n", "]", "\n", "p_mask", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "num_sample", ")", ":", "\n", "            ", "bin_samples", "=", "total_samples", "[", "idx", "*", "num_sample_perbin", ":", "(", "idx", "+", "1", ")", "*", "num_sample_perbin", "]", "\n", "bin_vector", "=", "np", ".", "zeros", "(", "[", "tscale", "]", ")", "\n", "for", "sample", "in", "bin_samples", ":", "\n", "                ", "sample_upper", "=", "math", ".", "ceil", "(", "sample", ")", "\n", "sample_decimal", ",", "sample_down", "=", "math", ".", "modf", "(", "sample", ")", "\n", "if", "int", "(", "sample_down", ")", "<=", "(", "tscale", "-", "1", ")", "and", "int", "(", "sample_down", ")", ">=", "0", ":", "\n", "                    ", "bin_vector", "[", "int", "(", "sample_down", ")", "]", "+=", "1", "-", "sample_decimal", "\n", "", "if", "int", "(", "sample_upper", ")", "<=", "(", "tscale", "-", "1", ")", "and", "int", "(", "sample_upper", ")", ">=", "0", ":", "\n", "                    ", "bin_vector", "[", "int", "(", "sample_upper", ")", "]", "+=", "sample_decimal", "\n", "", "", "bin_vector", "=", "1.0", "/", "num_sample_perbin", "*", "bin_vector", "\n", "p_mask", ".", "append", "(", "bin_vector", ")", "\n", "", "p_mask", "=", "np", ".", "stack", "(", "p_mask", ",", "axis", "=", "1", ")", "\n", "return", "p_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.bmn.BoundaryMatchingNetwork._get_interp1d_mask": [[114, 137], ["range", "numpy.stack", "mask_mat.astype.astype.astype", "torch.Parameter", "torch.Parameter", "range", "numpy.stack", "mask_mat.astype.astype.append", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "numpy.stack.append", "bmn.BoundaryMatchingNetwork._get_interp1d_bin_mask", "numpy.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "float"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.bmn.BoundaryMatchingNetwork._get_interp1d_bin_mask"], ["", "def", "_get_interp1d_mask", "(", "self", ")", ":", "\n", "# generate sample mask for each point in Boundary-Matching Map", "\n", "        ", "mask_mat", "=", "[", "]", "\n", "for", "start_index", "in", "range", "(", "self", ".", "temporal_dim", ")", ":", "\n", "            ", "mask_mat_vector", "=", "[", "]", "\n", "for", "duration_index", "in", "range", "(", "self", ".", "max_duration", ")", ":", "\n", "                ", "if", "start_index", "+", "duration_index", "<", "self", ".", "temporal_dim", ":", "\n", "                    ", "p_xmin", "=", "start_index", "\n", "p_xmax", "=", "start_index", "+", "duration_index", "\n", "center_len", "=", "float", "(", "p_xmax", "-", "p_xmin", ")", "+", "1", "\n", "sample_xmin", "=", "p_xmin", "-", "center_len", "*", "self", ".", "prop_boundary_ratio", "\n", "sample_xmax", "=", "p_xmax", "+", "center_len", "*", "self", ".", "prop_boundary_ratio", "\n", "p_mask", "=", "self", ".", "_get_interp1d_bin_mask", "(", "\n", "sample_xmin", ",", "sample_xmax", ",", "self", ".", "temporal_dim", ",", "self", ".", "num_sample", ",", "\n", "self", ".", "num_sample_perbin", ")", "\n", "", "else", ":", "\n", "                    ", "p_mask", "=", "np", ".", "zeros", "(", "[", "self", ".", "temporal_dim", ",", "self", ".", "num_sample", "]", ")", "\n", "", "mask_mat_vector", ".", "append", "(", "p_mask", ")", "\n", "", "mask_mat_vector", "=", "np", ".", "stack", "(", "mask_mat_vector", ",", "axis", "=", "2", ")", "\n", "mask_mat", ".", "append", "(", "mask_mat_vector", ")", "\n", "", "mask_mat", "=", "np", ".", "stack", "(", "mask_mat", ",", "axis", "=", "3", ")", "\n", "mask_mat", "=", "mask_mat", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "mask_mat", ")", ".", "view", "(", "self", ".", "temporal_dim", ",", "-", "1", ")", ",", "requires_grad", "=", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.gtad.GCNeXt.__init__": [[70, 92], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.__init__"], ["    ", "def", "__init__", "(", "self", ",", "channel_in", ",", "channel_out", ",", "k", "=", "3", ",", "norm_layer", "=", "None", ",", "groups", "=", "32", ",", "width_group", "=", "4", ",", "idx", "=", "None", ")", ":", "\n", "        ", "super", "(", "GCNeXt", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "groups", "=", "groups", "\n", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm1d", "\n", "", "width", "=", "width_group", "*", "groups", "\n", "self", ".", "tconvs", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "channel_in", ",", "width", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "groups", "=", "groups", ",", "padding", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv1d", "(", "width", ",", "channel_out", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", "# temporal graph", "\n", "\n", "self", ".", "sconvs", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "channel_in", "*", "2", ",", "width", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "width", ",", "width", ",", "kernel_size", "=", "1", ",", "groups", "=", "groups", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "width", ",", "channel_out", ",", "kernel_size", "=", "1", ")", ",", "\n", ")", "# semantic graph", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "True", ")", "\n", "self", ".", "idx_list", "=", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.gtad.GCNeXt.forward": [[93, 105], ["gtad.GCNeXt.tconvs", "gtad.get_graph_feature", "gtad.GCNeXt.sconvs", "gtad.GCNeXt.relu", "gtad.GCNeXt.max", "gtad.GCNeXt.idx_list.append"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.gtad.get_graph_feature"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "# residual", "\n", "tout", "=", "self", ".", "tconvs", "(", "x", ")", "# conv on temporal graph", "\n", "\n", "x_f", ",", "idx", "=", "get_graph_feature", "(", "x", ",", "k", "=", "self", ".", "k", ",", "style", "=", "1", ")", "# (bs,ch,100) -> (bs, 2ch, 100, k)", "\n", "sout", "=", "self", ".", "sconvs", "(", "x_f", ")", "# conv on semantic graph", "\n", "sout", "=", "sout", ".", "max", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", "[", "0", "]", "# (bs, ch, 100, k) -> (bs, ch, 100)", "\n", "\n", "out", "=", "tout", "+", "identity", "+", "sout", "# fusion", "\n", "if", "not", "self", ".", "idx_list", "is", "None", ":", "\n", "            ", "self", ".", "idx_list", ".", "append", "(", "idx", ")", "\n", "", "return", "self", ".", "relu", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.gtad.GraphAlign.__init__": [[108, 120], ["torch.Module.__init__", "gtad_lib.align.Align1DLayer", "gtad_lib.align.Align1DLayer", "gtad.GraphAlign._get_anchors"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.__init__", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.gtad.GraphAlign._get_anchors"], ["    ", "def", "__init__", "(", "self", ",", "k", "=", "3", ",", "t", "=", "100", ",", "d", "=", "100", ",", "bs", "=", "64", ",", "samp", "=", "0", ",", "style", "=", "0", ")", ":", "\n", "        ", "super", "(", "GraphAlign", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "t", "=", "t", "\n", "self", ".", "d", "=", "d", "\n", "self", ".", "bs", "=", "bs", "\n", "self", ".", "style", "=", "style", "\n", "self", ".", "expand_ratio", "=", "0.5", "\n", "self", ".", "resolution", "=", "16", "\n", "self", ".", "align_inner", "=", "Align1DLayer", "(", "self", ".", "resolution", ",", "samp", ")", "\n", "self", ".", "align_context", "=", "Align1DLayer", "(", "16", ",", "samp", ")", "\n", "self", ".", "_get_anchors", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.gtad.GraphAlign.forward": [[121, 147], ["gtad.GraphAlign.align_inner", "torch.cat().view.permute", "torch.cat().view.permute", "gtad.GraphAlign.anchors.cuda", "gtad.get_graph_feature", "torch.cat().view.mean", "torch.cat().view.mean", "gtad.GraphAlign.align_context", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "gtad.get_graph_feature", "torch.cat().view.mean", "torch.cat().view.mean", "gtad.GraphAlign.align_context", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.gtad.get_graph_feature", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.gtad.get_graph_feature"], ["", "def", "forward", "(", "self", ",", "x", ",", "index", ")", ":", "\n", "        ", "bs", ",", "ch", ",", "t", "=", "x", ".", "shape", "\n", "# print('feature channel is', ch)", "\n", "if", "not", "self", ".", "anchors", ".", "is_cuda", ":", "# run once", "\n", "            ", "self", ".", "anchors", "=", "self", ".", "anchors", ".", "cuda", "(", ")", "\n", "\n", "", "anchor", "=", "self", ".", "anchors", "[", ":", "self", ".", "anchor_num", "*", "bs", ",", ":", "]", "# (bs*tscale*tscal, 3)", "\n", "# print('first value in anchor is', anchor[0])", "\n", "feat_inner", "=", "self", ".", "align_inner", "(", "x", ",", "anchor", ")", "# (bs*tscale*tscal, ch, resolution)", "\n", "#print('inner feature is with shape', feat_inner.shape)", "\n", "if", "self", ".", "style", "==", "1", ":", "# use last layer neighbours", "\n", "            ", "feat", ",", "_", "=", "get_graph_feature", "(", "x", ",", "k", "=", "self", ".", "k", ",", "style", "=", "2", ")", "# (bs,ch,100) -> (bs, ch, 100, k)", "\n", "feat", "=", "feat", ".", "mean", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", "# (bs. 2*ch, 100)", "\n", "feat_context", "=", "self", ".", "align_context", "(", "feat", ",", "anchor", ")", "# (bs*tscale*tscal, ch, resolution//2)", "\n", "feat", "=", "torch", ".", "cat", "(", "(", "feat_inner", ",", "feat_context", ")", ",", "dim", "=", "2", ")", ".", "view", "(", "bs", ",", "t", ",", "self", ".", "d", ",", "-", "1", ")", "\n", "# print('sg feature is with shape', feat.shape)", "\n", "", "elif", "self", ".", "style", "==", "2", ":", "# use all layers neighbour", "\n", "            ", "feat", ",", "_", "=", "get_graph_feature", "(", "x", ",", "k", "=", "self", ".", "k", ",", "style", "=", "2", ",", "idx_knn", "=", "index", ")", "# (bs,ch,100) -> (bs, ch, 100, k)", "\n", "feat", "=", "feat", ".", "mean", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "False", ")", "# (bs. 2*ch, 100)", "\n", "feat_context", "=", "self", ".", "align_context", "(", "feat", ",", "anchor", ")", "# (bs*tscale*tscal, ch, resolution//2)", "\n", "feat", "=", "torch", ".", "cat", "(", "(", "feat_inner", ",", "feat_context", ")", ",", "dim", "=", "2", ")", ".", "view", "(", "bs", ",", "t", ",", "self", ".", "d", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "feat", "=", "torch", ".", "cat", "(", "(", "feat_inner", ",", ")", ",", "dim", "=", "2", ")", ".", "view", "(", "bs", ",", "t", ",", "t", ",", "-", "1", ")", "\n", "# print('shape after align is', feat_context.shape)", "\n", "\n", "", "return", "feat", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "# (bs,2*ch*(-1),t,t)", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.gtad.GraphAlign._get_anchors": [[148, 165], ["range", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "range", "len", "range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.stack", "anchors.append", "anchors.append", "float"], "methods", ["None"], ["", "def", "_get_anchors", "(", "self", ")", ":", "\n", "        ", "anchors", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "self", ".", "bs", ")", ":", "\n", "            ", "for", "start_index", "in", "range", "(", "self", ".", "t", ")", ":", "\n", "                ", "for", "duration_index", "in", "range", "(", "self", ".", "d", ")", ":", "\n", "                    ", "if", "start_index", "+", "duration_index", "<", "self", ".", "t", ":", "\n", "                        ", "p_xmin", "=", "start_index", "\n", "p_xmax", "=", "start_index", "+", "duration_index", "\n", "center_len", "=", "float", "(", "p_xmax", "-", "p_xmin", ")", "+", "1", "\n", "sample_xmin", "=", "p_xmin", "-", "center_len", "*", "self", ".", "expand_ratio", "\n", "sample_xmax", "=", "p_xmax", "+", "center_len", "*", "self", ".", "expand_ratio", "\n", "anchors", ".", "append", "(", "[", "k", ",", "sample_xmin", ",", "sample_xmax", "]", ")", "\n", "", "else", ":", "\n", "                        ", "anchors", ".", "append", "(", "[", "k", ",", "0", ",", "0", "]", ")", "\n", "", "", "", "", "self", ".", "anchor_num", "=", "len", "(", "anchors", ")", "//", "self", ".", "bs", "\n", "self", ".", "anchors", "=", "torch", ".", "tensor", "(", "np", ".", "stack", "(", "anchors", ")", ")", ".", "float", "(", ")", "# save to cpu", "\n", "return", "# anchors, anchor_num", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.gtad.GTAD.__init__": [[168, 219], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "gtad.GraphAlign", "torch.Sequential", "torch.Sequential", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.Conv1d", "torch.Conv1d", "torch.ReLU", "torch.ReLU", "gtad.GCNeXt", "gtad.GCNeXt", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "gtad.GCNeXt", "torch.Conv1d", "torch.Conv1d", "torch.Sigmoid", "torch.Sigmoid", "gtad.GCNeXt", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "GTAD", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "tscale", "=", "cfg", ".", "DATA", ".", "TEMPORAL_DIM", "\n", "self", ".", "feat_dim", "=", "cfg", ".", "MODEL", ".", "FEAT_DIM", "\n", "self", ".", "bs", "=", "cfg", ".", "TRAIN", ".", "BATCH_SIZE", "\n", "self", ".", "h_dim_1d", "=", "256", "\n", "self", ".", "h_dim_2d", "=", "128", "\n", "self", ".", "h_dim_3d", "=", "512", "\n", "self", ".", "goi_style", "=", "1", "# cfg.MODEL.GOI_STYLE = 1", "\n", "self", ".", "h_dim_goi", "=", "self", ".", "h_dim_1d", "*", "(", "16", ",", "32", ",", "32", ")", "[", "1", "]", "# )[cfg.MODEL.GOI_STYLE = 1]", "\n", "self", ".", "idx_list", "=", "[", "]", "\n", "\n", "# Backbone Part 1", "\n", "self", ".", "backbone1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "self", ".", "feat_dim", ",", "self", ".", "h_dim_1d", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "groups", "=", "4", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "GCNeXt", "(", "self", ".", "h_dim_1d", ",", "self", ".", "h_dim_1d", ",", "k", "=", "3", ",", "groups", "=", "32", ",", "idx", "=", "self", ".", "idx_list", ")", ",", "\n", ")", "\n", "\n", "# Regularization", "\n", "self", ".", "regu_s", "=", "nn", ".", "Sequential", "(", "\n", "GCNeXt", "(", "self", ".", "h_dim_1d", ",", "self", ".", "h_dim_1d", ",", "k", "=", "3", ",", "groups", "=", "32", ")", ",", "\n", "nn", ".", "Conv1d", "(", "self", ".", "h_dim_1d", ",", "1", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "self", ".", "regu_e", "=", "nn", ".", "Sequential", "(", "\n", "GCNeXt", "(", "self", ".", "h_dim_1d", ",", "self", ".", "h_dim_1d", ",", "k", "=", "3", ",", "groups", "=", "32", ")", ",", "\n", "nn", ".", "Conv1d", "(", "self", ".", "h_dim_1d", ",", "1", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "\n", "\n", "# Backbone Part 2", "\n", "self", ".", "backbone2", "=", "nn", ".", "Sequential", "(", "\n", "GCNeXt", "(", "self", ".", "h_dim_1d", ",", "self", ".", "h_dim_1d", ",", "k", "=", "3", ",", "groups", "=", "32", ",", "idx", "=", "self", ".", "idx_list", ")", ",", "\n", ")", "\n", "\n", "# SGAlign: sub-graph of interest alignment", "\n", "self", ".", "goi_align", "=", "GraphAlign", "(", "\n", "t", "=", "self", ".", "tscale", ",", "d", "=", "cfg", ".", "DATA", ".", "MAX_DURATION", ",", "bs", "=", "self", ".", "bs", ",", "\n", "samp", "=", "0", ",", "style", "=", "1", "# for ablation", "\n", ")", "# arg 4 = cfg.GOI_SAMP, arg 5 = GOI_STYLE", "\n", "\n", "# Localization Module", "\n", "self", ".", "localization", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "h_dim_goi", ",", "self", ".", "h_dim_3d", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "h_dim_3d", ",", "self", ".", "h_dim_2d", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "h_dim_2d", ",", "self", ".", "h_dim_2d", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "h_dim_2d", ",", "self", ".", "h_dim_2d", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "self", ".", "h_dim_2d", ",", "2", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "Sigmoid", "(", ")", "\n", ")", "# row 3 arg 3 = KERN_2d, row 3 arg 4 = pad 2d, row 4 arg 3 = kern_2d, row 4 arg 4 = pad 2d", "\n", "\n", "# Position encoding (not used)", "\n", "self", ".", "pos", "=", "torch", ".", "arange", "(", "0", ",", "1", ",", "1.0", "/", "self", ".", "tscale", ")", ".", "view", "(", "1", ",", "1", ",", "self", ".", "tscale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.gtad.GTAD.forward": [[220, 237], ["gtad.GTAD.backbone1().contiguous", "gtad.GTAD.backbone2", "gtad.GTAD.regu_s().squeeze", "gtad.GTAD.regu_e().squeeze", "gtad.GTAD.goi_align", "gtad.GTAD.localization", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gtad.GTAD.backbone1", "gtad.GTAD.regu_s", "gtad.GTAD.regu_e"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "snip_feature", ")", ":", "\n", "        ", "del", "self", ".", "idx_list", "[", ":", "]", "# clean the idx list", "\n", "base_feature", "=", "self", ".", "backbone1", "(", "snip_feature", ")", ".", "contiguous", "(", ")", "# (bs, 2048, 256) -> (bs, 256, 256)", "\n", "gcnext_feature", "=", "self", ".", "backbone2", "(", "base_feature", ")", "#", "\n", "\n", "regu_s", "=", "self", ".", "regu_s", "(", "base_feature", ")", ".", "squeeze", "(", "1", ")", "# start", "\n", "regu_e", "=", "self", ".", "regu_e", "(", "base_feature", ")", ".", "squeeze", "(", "1", ")", "# end", "\n", "\n", "if", "self", ".", "goi_style", "==", "2", ":", "\n", "            ", "idx_list", "=", "[", "idx", "for", "idx", "in", "self", ".", "idx_list", "if", "idx", ".", "device", "==", "snip_feature", ".", "device", "]", "\n", "idx_list", "=", "torch", ".", "cat", "(", "idx_list", ",", "dim", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "idx_list", "=", "None", "\n", "\n", "", "subgraph_map", "=", "self", ".", "goi_align", "(", "gcnext_feature", ",", "idx_list", ")", "\n", "iou_map", "=", "self", ".", "localization", "(", "subgraph_map", ")", "\n", "return", "iou_map", ",", "regu_s", ",", "regu_e", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.gtad.knn": [[8, 24], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "pairwise_distance.topk", "torch.matmul", "torch.matmul", "torch.sum.transpose", "y.transpose"], "function", ["None"], ["def", "knn", "(", "x", ",", "y", "=", "None", ",", "k", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    :param x: BxCxN\n    :param y: BxCxM\n    :param k: scalar\n    :return: BxMxk\n    \"\"\"", "\n", "if", "y", "is", "None", ":", "\n", "        ", "y", "=", "x", "\n", "# logging.info('Size in KNN: {} - {}'.format(x.size(), y.size()))", "\n", "", "inner", "=", "-", "2", "*", "torch", ".", "matmul", "(", "y", ".", "transpose", "(", "2", ",", "1", ")", ",", "x", ")", "\n", "xx", "=", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "yy", "=", "torch", ".", "sum", "(", "y", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "pairwise_distance", "=", "-", "xx", "-", "inner", "-", "yy", ".", "transpose", "(", "2", ",", "1", ")", "\n", "_", ",", "idx", "=", "pairwise_distance", ".", "topk", "(", "k", "=", "k", ",", "dim", "=", "-", "1", ")", "# (batch_size, num_points, k)", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.gtad.get_graph_feature": [[27, 66], ["x.view().repeat.size", "x.view().repeat.size", "x.view().repeat.view", "idx.view.view", "x.view().repeat.size", "x.view().repeat.transpose().contiguous", "feature.permute.view", "x.view().repeat.view().repeat", "gtad.knn", "torch.arange().view", "torch.arange().view", "x.view().repeat.view", "torch.cat().permute", "torch.cat().permute", "torch.from_numpy().to", "torch.from_numpy().to", "x.view().repeat.transpose", "x.view().repeat.view", "torch.cat().permute", "torch.cat().permute", "feature.permute.permute", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.from_numpy", "torch.from_numpy", "torch.cat", "torch.cat", "numpy.random.choice", "feature.permute.size", "feature.permute.size"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.gtad.knn"], ["", "def", "get_graph_feature", "(", "x", ",", "prev_x", "=", "None", ",", "k", "=", "20", ",", "idx_knn", "=", "None", ",", "r", "=", "-", "1", ",", "style", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    :param x:\n    :param prev_x:\n    :param k:\n    :param idx:\n    :param r: output downsampling factor (-1 for no downsampling)\n    :param style: method to get graph feature\n    :return:\n    \"\"\"", "\n", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "num_points", "=", "x", ".", "size", "(", "2", ")", "# if prev_x is None else prev_x.size(2)", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "-", "1", ",", "num_points", ")", "\n", "if", "idx_knn", "is", "None", ":", "\n", "        ", "idx_knn", "=", "knn", "(", "x", "=", "x", ",", "y", "=", "prev_x", ",", "k", "=", "k", ")", "# (batch_size, num_points, k)", "\n", "", "else", ":", "\n", "        ", "k", "=", "idx_knn", ".", "shape", "[", "-", "1", "]", "\n", "# print(idx_knn.shape)", "\n", "", "device", "=", "x", ".", "device", "# torch.device('cuda')", "\n", "idx_base", "=", "torch", ".", "arange", "(", "0", ",", "batch_size", ",", "device", "=", "device", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "*", "num_points", "\n", "idx", "=", "idx_knn", "+", "idx_base", "\n", "idx", "=", "idx", ".", "view", "(", "-", "1", ")", "\n", "_", ",", "num_dims", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "x", ".", "transpose", "(", "2", ",", "1", ")", ".", "contiguous", "(", ")", "# (batch_size, num_points, num_dims)  -> (batch_size*num_points, num_dims)", "\n", "feature", "=", "x", ".", "view", "(", "batch_size", "*", "num_points", ",", "-", "1", ")", "[", "idx", ",", ":", "]", "\n", "feature", "=", "feature", ".", "view", "(", "batch_size", ",", "num_points", ",", "k", ",", "num_dims", ")", "\n", "x", "=", "x", ".", "view", "(", "batch_size", ",", "num_points", ",", "1", ",", "num_dims", ")", ".", "repeat", "(", "1", ",", "1", ",", "k", ",", "1", ")", "\n", "if", "style", "==", "0", ":", "# use offset as feature", "\n", "        ", "feature", "=", "torch", ".", "cat", "(", "(", "feature", "-", "x", ",", "x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "elif", "style", "==", "1", ":", "# use feature as feature", "\n", "        ", "feature", "=", "torch", ".", "cat", "(", "(", "feature", ",", "x", ")", ",", "dim", "=", "3", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "else", ":", "# style == 2:", "\n", "        ", "feature", "=", "feature", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "# downsample if needed", "\n", "", "if", "r", "!=", "-", "1", ":", "\n", "        ", "select_idx", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "choice", "(", "feature", ".", "size", "(", "2", ")", ",", "feature", ".", "size", "(", "2", ")", "//", "r", ",", "\n", "replace", "=", "False", ")", ")", ".", "to", "(", "device", "=", "device", ")", "\n", "feature", "=", "feature", "[", ":", ",", ":", ",", "select_idx", ",", ":", "]", "\n", "", "return", "feature", ",", "idx_knn", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.model.EventDetection.__init__": [[12, 33], ["torch.Module.__init__", "utils.TransformerEncoder", "utils.TransformerEncoder", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "bmn.BoundaryMatchingNetwork", "gtad.GTAD"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cfg", ")", ":", "\n", "        ", "super", "(", "EventDetection", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "use_env_linear", "=", "cfg", ".", "MODEL", ".", "ENV_HIDDEN_DIM", "is", "not", "None", "\n", "self", ".", "use_agent_linear", "=", "cfg", ".", "MODEL", ".", "AGENT_HIDDEN_DIM", "is", "not", "None", "\n", "\n", "if", "self", ".", "use_env_linear", ":", "\n", "            ", "self", ".", "env_linear", "=", "nn", ".", "Linear", "(", "cfg", ".", "MODEL", ".", "ENV_DIM", ",", "cfg", ".", "MODEL", ".", "ENV_HIDDEN_DIM", ")", "\n", "", "if", "self", ".", "use_agent_linear", ":", "\n", "            ", "self", ".", "agent_linear", "=", "nn", ".", "Linear", "(", "cfg", ".", "MODEL", ".", "AGENT_DIM", ",", "cfg", ".", "MODEL", ".", "AGENT_HIDDEN_DIM", ")", "\n", "\n", "", "self", ".", "agents_fuser", "=", "TransformerEncoder", "(", "cfg", ")", "\n", "self", ".", "agents_environment_fuser", "=", "TransformerEncoder", "(", "cfg", ")", "\n", "\n", "self", ".", "bmm_name", "=", "cfg", ".", "MODEL", ".", "BOUNDARY_MATCHING_MODULE", "\n", "if", "self", ".", "bmm_name", "==", "'bmn'", ":", "\n", "            ", "self", ".", "event_detector", "=", "BoundaryMatchingNetwork", "(", "cfg", ")", "\n", "", "elif", "self", ".", "bmm_name", "==", "'gtad'", ":", "\n", "            ", "self", ".", "event_detector", "=", "GTAD", "(", "cfg", ")", "\n", "\n", "", "self", ".", "attention_steps", "=", "cfg", ".", "TRAIN", ".", "ATTENTION_STEPS", "\n", "self", ".", "topk_hard_attention", "=", "cfg", ".", "MODEL", ".", "TOPK_AGENTS", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.model.EventDetection.fuse_agent": [[34, 92], ["agent_feats.size", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "agent_env_feats[].contiguous().view", "agent_masks[].contiguous().view", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "utils.masked_softmax", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "agent_feats[].contiguous().view().permute", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "torch.arange().cuda", "len", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "model.EventDetection.agents_fuser", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "torch.zeros().cuda.view", "agent_env_feats[].contiguous", "agent_masks[].contiguous", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "agent_feats[].contiguous().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "hard_attn_masks.size", "agent_feats[].contiguous"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.utils.masked_softmax"], ["", "def", "fuse_agent", "(", "self", ",", "agent_feats", ",", "agent_masks", ",", "env_feats", ")", ":", "\n", "        ", "bsz", ",", "tmprl_sz", ",", "n_boxes", ",", "ft_sz", "=", "agent_feats", ".", "size", "(", ")", "\n", "step", "=", "self", ".", "attention_steps", "\n", "\n", "agent_env_feats", "=", "torch", ".", "unsqueeze", "(", "env_feats", ",", "2", ")", "+", "agent_feats", "\n", "# Fuse all agents together at every temporal point", "\n", "smpl_bgn", "=", "0", "\n", "\n", "agent_fused_features", "=", "torch", ".", "zeros", "(", "bsz", ",", "tmprl_sz", ",", "ft_sz", ")", ".", "cuda", "(", ")", "\n", "if", "n_boxes", "==", "0", ":", "\n", "            ", "return", "agent_fused_features", "\n", "\n", "", "for", "smpl_bgn", "in", "range", "(", "0", ",", "tmprl_sz", ",", "step", ")", ":", "\n", "            ", "smpl_end", "=", "smpl_bgn", "+", "step", "\n", "\n", "ae_feats", "=", "agent_env_feats", "[", ":", ",", "smpl_bgn", ":", "smpl_end", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "n_boxes", ",", "ft_sz", ")", "# bsz x n_boxes x feat_dim", "\n", "masks", "=", "agent_masks", "[", ":", ",", "smpl_bgn", ":", "smpl_end", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "n_boxes", ")", "# bsz x n_boxes", "\n", "\n", "#hard_attn_masks = masks", "\n", "l2_norm", "=", "torch", ".", "norm", "(", "ae_feats", ",", "dim", "=", "-", "1", ")", "# bsz x n_boxes", "\n", "l2_norm_softmax", "=", "masked_softmax", "(", "l2_norm", ",", "masks", ")", "# bsz x n_boxes", "\n", "\n", "# Adaptive threshold is 1 / number of bounding boxes:", "\n", "ada_thresh", "=", "torch", ".", "clamp", "(", "1.", "/", "torch", ".", "sum", "(", "masks", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ",", "0.", ",", "1.", ")", "\n", "\n", "# Generate hard attention masks", "\n", "hard_attn_masks", "=", "l2_norm_softmax", ">=", "ada_thresh", "# bsz x n_boxes", "\n", "\n", "'''\n            # Generate masks for topk l2_norm\n            _, topk_indices = torch.topk(l2_norm_softmax, self.topk_hard_attention, dim=-1)\n            topk_masks = torch.zeros_like(hard_attn_masks, dtype=torch.bool)\n            topk_masks = topk_masks.scatter(-1, topk_indices, 1)\n\n            # merge hard attention masks with topk masks to only keep topk elements higher than adaptive threshold\n            hard_attn_masks = torch.logical_and(hard_attn_masks, topk_masks)\n\n            hard_attn_count = torch.sum(hard_attn_masks, dim=-1).cpu().numpy()  # bsz\n            mask_count = torch.sum(masks, dim=-1).cpu().numpy()  # bsz\n            '''", "\n", "\n", "keep_mask", "=", "(", "torch", ".", "sum", "(", "hard_attn_masks", ",", "dim", "=", "-", "1", ")", ">", "0", ")", "# bsz", "\n", "keep_indices", "=", "torch", ".", "masked_select", "(", "torch", ".", "arange", "(", "hard_attn_masks", ".", "size", "(", "0", ")", ")", ".", "cuda", "(", ")", ",", "keep_mask", ")", "# keep_mask", "\n", "\n", "fuser_input", "=", "agent_feats", "[", ":", ",", "smpl_bgn", ":", "smpl_end", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "n_boxes", ",", "ft_sz", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "# n_boxes x bsz x feat_dim", "\n", "\n", "if", "len", "(", "keep_indices", ")", ">", "0", ":", "\n", "                ", "fuser_input", "=", "fuser_input", "[", ":", ",", "keep_indices", "]", "# n_boxes x keep_mask x feat_dim", "\n", "hard_attn_masks", "=", "hard_attn_masks", "[", "keep_indices", "]", "# keep_mask x n_boxes", "\n", "\n", "padded_output", "=", "torch", ".", "zeros", "(", "bsz", "*", "(", "smpl_end", "-", "smpl_bgn", ")", ",", "ft_sz", ")", ".", "cuda", "(", ")", "# bsz x feat_dim", "\n", "fuser_output", "=", "self", ".", "agents_fuser", "(", "fuser_input", ",", "key_padding_mask", "=", "~", "hard_attn_masks", ")", "# n_boxes x keep_mask x feat_dim", "\n", "#fuser_output = fuser_input * hard_attn_masks.permute(1, 0).contiguous().unsqueeze(-1)", "\n", "fuser_output", "=", "torch", ".", "sum", "(", "fuser_output", ",", "dim", "=", "0", ")", "/", "torch", ".", "sum", "(", "hard_attn_masks", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "# keep_mask x feat_dim", "\n", "padded_output", "[", "keep_indices", "]", "=", "fuser_output", "\n", "agent_fused_features", "[", ":", ",", "smpl_bgn", ":", "smpl_end", "]", "=", "padded_output", ".", "view", "(", "bsz", ",", "-", "1", ",", "ft_sz", ")", "\n", "\n", "", "", "return", "agent_fused_features", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.model.EventDetection.forward": [[93, 127], ["model.EventDetection.fuse_agent", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "model.EventDetection.event_detector", "model.EventDetection.env_linear", "model.EventDetection.agent_linear", "model.EventDetection.event_detector", "model.EventDetection.event_detector", "env_agent_cat_features[].contiguous", "fuser_input.view().permute.view().permute.view().permute", "model.EventDetection.agents_environment_fuser", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean.view", "torch.mean.view", "torch.mean.view", "torch.zeros().cuda.permute", "torch.zeros().cuda.permute", "torch.zeros().cuda.permute", "model.EventDetection.permute", "model.EventDetection.permute", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "fuser_input.view().permute.view().permute.view"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.model.EventDetection.fuse_agent"], ["", "def", "forward", "(", "self", ",", "env_features", "=", "None", ",", "agent_features", "=", "None", ",", "agent_masks", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "use_env_linear", "and", "env_features", "is", "not", "None", ":", "\n", "            ", "env_features", "=", "self", ".", "env_linear", "(", "env_features", ")", "\n", "", "if", "self", ".", "use_agent_linear", "and", "agent_features", "is", "not", "None", ":", "\n", "            ", "agent_features", "=", "self", ".", "agent_linear", "(", "agent_features", ")", "\n", "\n", "", "if", "agent_features", "is", "None", ":", "\n", "            ", "return", "self", ".", "event_detector", "(", "env_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "", "agent_fused_features", "=", "self", ".", "fuse_agent", "(", "agent_features", ",", "agent_masks", ",", "env_features", ")", "\n", "\n", "if", "env_features", "is", "None", ":", "\n", "            ", "return", "self", ".", "event_detector", "(", "agent_fused_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "\n", "", "env_agent_cat_features", "=", "torch", ".", "stack", "(", "[", "env_features", ",", "agent_fused_features", "]", ",", "dim", "=", "2", ")", "\n", "\n", "bsz", ",", "tmprl_sz", ",", "ft_sz", "=", "env_features", ".", "shape", "\n", "step", "=", "self", ".", "attention_steps", "\n", "smpl_bgn", "=", "0", "\n", "context_features", "=", "torch", ".", "zeros", "(", "bsz", ",", "tmprl_sz", ",", "ft_sz", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "smpl_bgn", "in", "range", "(", "0", ",", "tmprl_sz", ",", "step", ")", ":", "\n", "            ", "smpl_end", "=", "smpl_bgn", "+", "step", "\n", "\n", "fuser_input", "=", "env_agent_cat_features", "[", ":", ",", "smpl_bgn", ":", "smpl_end", "]", ".", "contiguous", "(", ")", "\n", "fuser_input", "=", "fuser_input", ".", "view", "(", "-", "1", ",", "2", ",", "ft_sz", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "fuser_output", "=", "self", ".", "agents_environment_fuser", "(", "fuser_input", ")", "\n", "fuser_output", "=", "torch", ".", "mean", "(", "fuser_output", ",", "dim", "=", "0", ")", "\n", "#fuser_output = fuser_input", "\n", "#fuser_output = torch.mean(fuser_output, dim=0)", "\n", "context_features", "[", ":", ",", "smpl_bgn", ":", "smpl_end", "]", "=", "fuser_output", ".", "view", "(", "bsz", ",", "-", "1", ",", "ft_sz", ")", "\n", "\n", "", "return", "self", ".", "event_detector", "(", "context_features", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.utils.TransformerEncoder.__init__": [[83, 93], ["torch.Module.__init__", "utils.TransformerEncoderLayer", "utils._get_clones"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.__init__", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.utils._get_clones"], ["clr_score", "=", "clr_confidence", "[", "idx", ",", "jdx", "]", "\n", "reg_score", "=", "reg_confidence", "[", "idx", ",", "jdx", "]", "\n", "score", "=", "xmin_score", "*", "xmax_score", "*", "clr_score", "*", "reg_score", "\n", "new_props", ".", "append", "(", "[", "xmin", ",", "xmax", ",", "xmin_score", ",", "xmax_score", ",", "clr_score", ",", "reg_score", ",", "score", "]", ")", "\n", "", "", "", "new_props", "=", "np", ".", "stack", "(", "new_props", ")", "\n", "batch_props", ".", "append", "(", "new_props", ")", "\n", "\n", "", "return", "batch_props", "\n", "", "", ""]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.utils.TransformerEncoder.forward": [[94, 115], ["range", "utils.TransformerEncoder.norm"], "methods", ["None"], []], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.utils.TransformerEncoderLayer.__init__": [[138, 152], ["torch.Module.__init__", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.MultiheadAttention", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "utils._get_activation_fn"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.__init__", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.utils._get_activation_fn"], []], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.utils.TransformerEncoderLayer.forward": [[153, 179], ["utils.TransformerEncoderLayer.norm1", "hasattr", "utils.TransformerEncoderLayer.norm2", "utils.TransformerEncoderLayer.self_attn", "utils.TransformerEncoderLayer.masked_fill", "utils.TransformerEncoderLayer.dropout1", "utils.TransformerEncoderLayer.linear2", "utils.TransformerEncoderLayer.linear2", "utils.TransformerEncoderLayer.dropout2", "src.masked_fill.masked_fill.masked_fill", "key_padding_mask.permute().unsqueeze", "utils.TransformerEncoderLayer.dropout", "utils.TransformerEncoderLayer.dropout", "key_padding_mask.permute().unsqueeze", "utils.TransformerEncoderLayer.activation", "torch.relu", "torch.relu", "torch.relu", "key_padding_mask.permute", "utils.TransformerEncoderLayer.linear1", "utils.TransformerEncoderLayer.linear1", "key_padding_mask.permute"], "methods", ["None"], []], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.utils.masked_softmax": [[7, 53], ["torch.softmax", "mask.unsqueeze.float", "mask.unsqueeze.dim", "vector.dim", "mask.unsqueeze.unsqueeze", "torch.softmax", "vector.masked_fill", "torch.softmax", "F.softmax.sum"], "function", ["None"], ["# calculate the overlap proportion between the anchor and all bbox for supervise signal,", "\n", "# the length of the anchor is 0.01", "\n", "    ", "len_anchors", "=", "anchors_max", "-", "anchors_min", "\n", "int_xmin", "=", "np", ".", "maximum", "(", "anchors_min", ",", "box_min", ")", "\n", "int_xmax", "=", "np", ".", "minimum", "(", "anchors_max", ",", "box_max", ")", "\n", "inter_len", "=", "np", ".", "maximum", "(", "int_xmax", "-", "int_xmin", ",", "0.", ")", "\n", "scores", "=", "np", ".", "divide", "(", "inter_len", ",", "len_anchors", ")", "\n", "return", "scores", "\n", "\n", "\n", "", "def", "iou_with_anchors", "(", "anchors_min", ",", "anchors_max", ",", "box_min", ",", "box_max", ")", ":", "\n", "    ", "\"\"\"Compute jaccard score between a box and the anchors.\n    \"\"\"", "\n", "len_anchors", "=", "anchors_max", "-", "anchors_min", "\n", "int_xmin", "=", "np", ".", "maximum", "(", "anchors_min", ",", "box_min", ")", "\n", "int_xmax", "=", "np", ".", "minimum", "(", "anchors_max", ",", "box_max", ")", "\n", "inter_len", "=", "np", ".", "maximum", "(", "int_xmax", "-", "int_xmin", ",", "0.", ")", "\n", "union_len", "=", "len_anchors", "-", "inter_len", "+", "box_max", "-", "box_min", "\n", "# print inter_len,union_len", "\n", "jaccard", "=", "np", ".", "divide", "(", "inter_len", ",", "union_len", ")", "\n", "return", "jaccard", "\n", "\n", "\n", "", "class", "ProposalGenerator", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "temporal_dim", "=", "None", ",", "max_duration", "=", "None", ",", "annotations", "=", "None", ")", ":", "\n", "        ", "self", ".", "tscale", "=", "temporal_dim", "\n", "self", ".", "max_duration", "=", "max_duration", "\n", "self", ".", "annots", "=", "annotations", "# For THUMOS only", "\n", "self", ".", "rescale_segment", "=", "self", ".", "rescale_segment_anet", "if", "self", ".", "annots", "is", "None", "else", "self", ".", "rescale_segment_thumos", "\n", "\n", "", "def", "rescale_segment_anet", "(", "self", ",", "start_index", ",", "end_index", ",", "video_name", "=", "None", ")", ":", "\n", "        ", "return", "start_index", "/", "self", ".", "tscale", ",", "end_index", "/", "self", ".", "tscale", "\n", "\n", "", "def", "rescale_segment_thumos", "(", "self", ",", "start_index", ",", "end_index", ",", "video_name", "=", "None", ")", ":", "\n", "        ", "b", "=", "self", ".", "annots", "[", "video_name", "]", "[", "'start_snippet'", "]", "\n", "d", "=", "self", ".", "annots", "[", "video_name", "]", "[", "'master_snippet_duration'", "]", "\n", "return", "(", "start_index", "+", "b", ")", "/", "d", ",", "(", "end_index", "+", "b", ")", "/", "d", "\n", "\n", "", "def", "__call__", "(", "self", ",", "start", ",", "end", ",", "confidence_map", ",", "video_names", ")", ":", "\n", "        ", "batch_props", "=", "[", "]", "\n", "for", "i", ",", "video_name", "in", "enumerate", "(", "video_names", ")", ":", "\n", "            ", "start_scores", "=", "start", "[", "i", "]", "\n", "end_scores", "=", "end", "[", "i", "]", "\n", "clr_confidence", "=", "(", "confidence_map", "[", "i", "]", "[", "1", "]", ")", "\n", "reg_confidence", "=", "(", "confidence_map", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "max_start", "=", "max", "(", "start_scores", ")", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.utils._get_clones": [[55, 57], ["torch.ModuleList", "copy.deepcopy", "range"], "function", ["None"], ["\n", "# generate the set of start points and end points", "\n", "start_bins", "=", "np", ".", "zeros", "(", "self", ".", "tscale", ")", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.models.utils._get_activation_fn": [[59, 66], ["RuntimeError"], "function", ["None"], ["for", "idx", "in", "range", "(", "1", ",", "self", ".", "tscale", "-", "1", ")", ":", "\n", "                ", "if", "start_scores", "[", "idx", "]", ">", "start_scores", "[", "idx", "+", "1", "]", "and", "start_scores", "[", "idx", "]", ">", "start_scores", "[", "idx", "-", "1", "]", ":", "\n", "                    ", "start_bins", "[", "idx", "]", "=", "1", "\n", "", "elif", "start_scores", "[", "idx", "]", ">", "(", "0.5", "*", "max_start", ")", ":", "\n", "                    ", "start_bins", "[", "idx", "]", "=", "1", "\n", "\n", "", "", "end_bins", "=", "np", ".", "zeros", "(", "len", "(", "end_scores", ")", ")", "\n", "end_bins", "[", "-", "1", "]", "=", "1", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_detection.ANETdetection.__init__": [[85, 119], ["numpy.linspace", "eval_detection.ANETdetection._import_ground_truth", "eval_detection.ANETdetection._import_prediction", "IOError", "IOError", "eval_detection.get_blocked_videos", "list", "print", "len", "print", "len", "print", "print"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal._import_ground_truth", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_detection.ANETdetection._import_prediction", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.utils.get_blocked_videos"], ["def", "__init__", "(", "self", ",", "ground_truth_filename", "=", "None", ",", "prediction_filename", "=", "None", ",", "\n", "ground_truth_fields", "=", "GROUND_TRUTH_FIELDS", ",", "\n", "prediction_fields", "=", "PREDICTION_FIELDS", ",", "\n", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ",", "\n", "subset", "=", "'validation'", ",", "verbose", "=", "False", ",", "\n", "check_status", "=", "True", ")", ":", "\n", "        ", "if", "not", "ground_truth_filename", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid ground truth file.'", ")", "\n", "", "if", "not", "prediction_filename", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid prediction file.'", ")", "\n", "", "self", ".", "subset", "=", "subset", "\n", "self", ".", "tiou_thresholds", "=", "tiou_thresholds", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "gt_fields", "=", "ground_truth_fields", "\n", "self", ".", "pred_fields", "=", "prediction_fields", "\n", "self", ".", "ap", "=", "None", "\n", "self", ".", "check_status", "=", "check_status", "\n", "# Retrieve blocked videos from server.", "\n", "if", "self", ".", "check_status", ":", "\n", "            ", "self", ".", "blocked_videos", "=", "get_blocked_videos", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "blocked_videos", "=", "list", "(", ")", "\n", "# Import ground truth and predictions.", "\n", "", "self", ".", "ground_truth", ",", "self", ".", "activity_index", "=", "self", ".", "_import_ground_truth", "(", "\n", "ground_truth_filename", ")", "\n", "self", ".", "prediction", "=", "self", ".", "_import_prediction", "(", "prediction_filename", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'[INIT] Loaded annotations from {} subset.'", ".", "format", "(", "subset", ")", ")", "\n", "nr_gt", "=", "len", "(", "self", ".", "ground_truth", ")", "\n", "print", "(", "'\\tNumber of ground truth instances: {}'", ".", "format", "(", "nr_gt", ")", ")", "\n", "nr_pred", "=", "len", "(", "self", ".", "prediction", ")", "\n", "print", "(", "'\\tNumber of predictions: {}'", ".", "format", "(", "nr_pred", ")", ")", "\n", "print", "(", "'\\tFixed threshold for tiou score: {}'", ".", "format", "(", "self", ".", "tiou_thresholds", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_detection.ANETdetection._import_ground_truth": [[120, 162], ["data[].items", "pandas.DataFrame", "open", "json.load", "all", "IOError", "video_lst.append", "t_start_lst.append", "t_end_lst.append", "label_lst.append", "float", "float", "json.load.keys"], "methods", ["None"], ["", "", "def", "_import_ground_truth", "(", "self", ",", "ground_truth_filename", ")", ":", "\n", "        ", "\"\"\"Reads ground truth file, checks if it is well formatted, and returns\n           the ground truth instances and the activity classes.\n        Parameters\n        ----------\n        ground_truth_filename : str\n            Full path to the ground truth json file.\n        Outputs\n        -------\n        ground_truth : df\n            Data frame containing the ground truth instances.\n        activity_index : dict\n            Dictionary containing class index.\n        \"\"\"", "\n", "with", "open", "(", "ground_truth_filename", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "# Checking format", "\n", "", "if", "not", "all", "(", "[", "field", "in", "data", ".", "keys", "(", ")", "for", "field", "in", "self", ".", "gt_fields", "]", ")", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid ground truth file.'", ")", "\n", "\n", "# Read ground truth data.", "\n", "", "activity_index", ",", "cidx", "=", "{", "}", ",", "0", "\n", "video_lst", ",", "t_start_lst", ",", "t_end_lst", ",", "label_lst", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "subset", "!=", "v", "[", "'subset'", "]", ":", "\n", "                ", "continue", "\n", "", "if", "videoid", "in", "self", ".", "blocked_videos", ":", "\n", "                ", "continue", "\n", "", "for", "ann", "in", "v", "[", "'annotations'", "]", ":", "\n", "                ", "if", "ann", "[", "'label'", "]", "not", "in", "activity_index", ":", "\n", "                    ", "activity_index", "[", "ann", "[", "'label'", "]", "]", "=", "cidx", "\n", "cidx", "+=", "1", "\n", "", "video_lst", ".", "append", "(", "videoid", ")", "\n", "t_start_lst", ".", "append", "(", "float", "(", "ann", "[", "'segment'", "]", "[", "0", "]", ")", ")", "\n", "t_end_lst", ".", "append", "(", "float", "(", "ann", "[", "'segment'", "]", "[", "1", "]", ")", ")", "\n", "label_lst", ".", "append", "(", "activity_index", "[", "ann", "[", "'label'", "]", "]", ")", "\n", "\n", "", "", "ground_truth", "=", "pd", ".", "DataFrame", "(", "{", "'video-id'", ":", "video_lst", ",", "\n", "'t-start'", ":", "t_start_lst", ",", "\n", "'t-end'", ":", "t_end_lst", ",", "\n", "'label'", ":", "label_lst", "}", ")", "\n", "return", "ground_truth", ",", "activity_index", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_detection.ANETdetection._import_prediction": [[163, 200], ["data[].items", "pandas.DataFrame", "open", "json.load", "all", "IOError", "video_lst.append", "t_start_lst.append", "t_end_lst.append", "label_lst.append", "score_lst.append", "float", "float", "json.load.keys"], "methods", ["None"], ["", "def", "_import_prediction", "(", "self", ",", "prediction_filename", ")", ":", "\n", "        ", "\"\"\"Reads prediction file, checks if it is well formatted, and returns\n           the prediction instances.\n        Parameters\n        ----------\n        prediction_filename : str\n            Full path to the prediction json file.\n        Outputs\n        -------\n        prediction : df\n            Data frame containing the prediction instances.\n        \"\"\"", "\n", "with", "open", "(", "prediction_filename", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "# Checking format...", "\n", "", "if", "not", "all", "(", "[", "field", "in", "data", ".", "keys", "(", ")", "for", "field", "in", "self", ".", "pred_fields", "]", ")", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid prediction file.'", ")", "\n", "\n", "# Read predictions.", "\n", "", "video_lst", ",", "t_start_lst", ",", "t_end_lst", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "label_lst", ",", "score_lst", "=", "[", "]", ",", "[", "]", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'results'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "videoid", "in", "self", ".", "blocked_videos", ":", "\n", "                ", "continue", "\n", "", "for", "result", "in", "v", ":", "\n", "                ", "label", "=", "self", ".", "activity_index", "[", "result", "[", "'label'", "]", "]", "\n", "video_lst", ".", "append", "(", "videoid", ")", "\n", "t_start_lst", ".", "append", "(", "float", "(", "result", "[", "'segment'", "]", "[", "0", "]", ")", ")", "\n", "t_end_lst", ".", "append", "(", "float", "(", "result", "[", "'segment'", "]", "[", "1", "]", ")", ")", "\n", "label_lst", ".", "append", "(", "label", ")", "\n", "score_lst", ".", "append", "(", "result", "[", "'score'", "]", ")", "\n", "", "", "prediction", "=", "pd", ".", "DataFrame", "(", "{", "'video-id'", ":", "video_lst", ",", "\n", "'t-start'", ":", "t_start_lst", ",", "\n", "'t-end'", ":", "t_end_lst", ",", "\n", "'label'", ":", "label_lst", ",", "\n", "'score'", ":", "score_lst", "}", ")", "\n", "return", "prediction", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_detection.ANETdetection._get_predictions_with_label": [[201, 210], ["prediction_by_label.get_group().reset_index", "print", "pandas.DataFrame", "prediction_by_label.get_group"], "methods", ["None"], ["", "def", "_get_predictions_with_label", "(", "self", ",", "prediction_by_label", ",", "label_name", ",", "cidx", ")", ":", "\n", "        ", "\"\"\"Get all predicitons of the given label. Return empty DataFrame if there\n        is no predcitions with the given label.\n        \"\"\"", "\n", "try", ":", "\n", "            ", "return", "prediction_by_label", ".", "get_group", "(", "cidx", ")", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "'Warning: No predictions of label \\'%s\\' were provdied.'", "%", "label_name", ")", "\n", "return", "pd", ".", "DataFrame", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_detection.ANETdetection.wrapper_compute_average_precision": [[211, 231], ["numpy.zeros", "eval_detection.ANETdetection.ground_truth.groupby", "eval_detection.ANETdetection.prediction.groupby", "enumerate", "joblib.Parallel", "eval_detection.ANETdetection.activity_index.values", "len", "len", "len", "joblib.delayed", "eval_detection.ANETdetection.activity_index.items", "eval_detection.ANETdetection.get_group().reset_index", "eval_detection.ANETdetection._get_predictions_with_label", "eval_detection.ANETdetection.get_group"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_detection.ANETdetection._get_predictions_with_label"], ["", "", "def", "wrapper_compute_average_precision", "(", "self", ")", ":", "\n", "        ", "\"\"\"Computes average precision for each class in the subset.\n        \"\"\"", "\n", "ap", "=", "np", ".", "zeros", "(", "(", "len", "(", "self", ".", "tiou_thresholds", ")", ",", "len", "(", "self", ".", "activity_index", ")", ")", ")", "\n", "\n", "# Adaptation to query faster", "\n", "ground_truth_by_label", "=", "self", ".", "ground_truth", ".", "groupby", "(", "'label'", ")", "\n", "prediction_by_label", "=", "self", ".", "prediction", ".", "groupby", "(", "'label'", ")", "\n", "\n", "results", "=", "Parallel", "(", "n_jobs", "=", "len", "(", "self", ".", "activity_index", ")", ")", "(", "\n", "delayed", "(", "compute_average_precision_detection", ")", "(", "\n", "ground_truth", "=", "ground_truth_by_label", ".", "get_group", "(", "cidx", ")", ".", "reset_index", "(", "drop", "=", "True", ")", ",", "\n", "prediction", "=", "self", ".", "_get_predictions_with_label", "(", "prediction_by_label", ",", "label_name", ",", "cidx", ")", ",", "\n", "tiou_thresholds", "=", "self", ".", "tiou_thresholds", ",", "\n", ")", "for", "label_name", ",", "cidx", "in", "self", ".", "activity_index", ".", "items", "(", ")", ")", "\n", "\n", "for", "i", ",", "cidx", "in", "enumerate", "(", "self", ".", "activity_index", ".", "values", "(", ")", ")", ":", "\n", "            ", "ap", "[", ":", ",", "cidx", "]", "=", "results", "[", "i", "]", "\n", "\n", "", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_detection.ANETdetection.evaluate": [[232, 245], ["eval_detection.ANETdetection.wrapper_compute_average_precision", "eval_detection.ANETdetection.ap.mean", "eval_detection.ANETdetection.mAP.mean", "print", "print"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_detection.ANETdetection.wrapper_compute_average_precision"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Evaluates a prediction file. For the detection task we measure the\n        interpolated mean average precision to measure the performance of a\n        method.\n        \"\"\"", "\n", "self", ".", "ap", "=", "self", ".", "wrapper_compute_average_precision", "(", ")", "\n", "\n", "self", ".", "mAP", "=", "self", ".", "ap", ".", "mean", "(", "axis", "=", "1", ")", "\n", "self", ".", "average_mAP", "=", "self", ".", "mAP", ".", "mean", "(", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'[RESULTS] Performance on ActivityNet detection task.'", ")", "\n", "print", "(", "'\\tAverage-mAP: {}'", ".", "format", "(", "self", ".", "average_mAP", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_detection.get_blocked_videos": [[8, 11], ["open", "json.load"], "function", ["None"], ["def", "get_blocked_videos", "(", "api", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "'evaluation_anet/api.json'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "return", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_detection.interpolated_prec_rec": [[13, 23], ["numpy.hstack", "numpy.hstack", "numpy.sum", "range", "max", "numpy.where", "len"], "function", ["None"], ["", "", "def", "interpolated_prec_rec", "(", "prec", ",", "rec", ")", ":", "\n", "    ", "\"\"\"Interpolated AP - VOCdevkit from VOC 2011.\n    \"\"\"", "\n", "mprec", "=", "np", ".", "hstack", "(", "[", "[", "0", "]", ",", "prec", ",", "[", "0", "]", "]", ")", "\n", "mrec", "=", "np", ".", "hstack", "(", "[", "[", "0", "]", ",", "rec", ",", "[", "1", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mprec", ")", "-", "1", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "mprec", "[", "i", "]", "=", "max", "(", "mprec", "[", "i", "]", ",", "mprec", "[", "i", "+", "1", "]", ")", "\n", "", "idx", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", ":", "]", "!=", "mrec", "[", "0", ":", "-", "1", "]", ")", "[", "0", "]", "+", "1", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "idx", "]", "-", "mrec", "[", "idx", "-", "1", "]", ")", "*", "mprec", "[", "idx", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_detection.segment_iou": [[25, 52], ["numpy.maximum", "numpy.minimum", "segments_intersection.astype"], "function", ["None"], ["", "def", "segment_iou", "(", "target_segment", ",", "candidate_segments", ")", ":", "\n", "    ", "\"\"\"Compute the temporal intersection over union between a\n    target segment and all the test segments.\n\n    Parameters\n    ----------\n    target_segment : 1d array\n        Temporal target segment containing [starting, ending] times.\n    candidate_segments : 2d array\n        Temporal candidate segments containing N x [starting, ending] times.\n\n    Outputs\n    -------\n    tiou : 1d array\n        Temporal intersection over union score of the N's candidate segments.\n    \"\"\"", "\n", "tt1", "=", "np", ".", "maximum", "(", "target_segment", "[", "0", "]", ",", "candidate_segments", "[", ":", ",", "0", "]", ")", "\n", "tt2", "=", "np", ".", "minimum", "(", "target_segment", "[", "1", "]", ",", "candidate_segments", "[", ":", ",", "1", "]", ")", "\n", "# Intersection including Non-negative overlap score.", "\n", "segments_intersection", "=", "(", "tt2", "-", "tt1", ")", ".", "clip", "(", "0", ")", "\n", "# Segment union.", "\n", "segments_union", "=", "(", "candidate_segments", "[", ":", ",", "1", "]", "-", "candidate_segments", "[", ":", ",", "0", "]", ")", "+", "(", "target_segment", "[", "1", "]", "-", "target_segment", "[", "0", "]", ")", "-", "segments_intersection", "\n", "# Compute overlap as the ratio of the intersection", "\n", "# over union of two segments.", "\n", "tIoU", "=", "segments_intersection", ".", "astype", "(", "float", ")", "/", "segments_union", "\n", "return", "tIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_detection.wrapper_segment_iou": [[54, 77], ["numpy.empty", "range", "ValueError", "eval_detection.segment_iou"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.utils.segment_iou"], ["", "def", "wrapper_segment_iou", "(", "target_segments", ",", "candidate_segments", ")", ":", "\n", "    ", "\"\"\"Compute intersection over union btw segments\n    Parameters\n    ----------\n    target_segments : ndarray\n        2-dim array in format [m x 2:=[init, end]]\n    candidate_segments : ndarray\n        2-dim array in format [n x 2:=[init, end]]\n    Outputs\n    -------\n    tiou : ndarray\n        2-dim array [n x m] with IOU ratio.\n    Note: It assumes that candidate-segments are more scarce that target-segments\n    \"\"\"", "\n", "if", "candidate_segments", ".", "ndim", "!=", "2", "or", "target_segments", ".", "ndim", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'Dimension of arguments is incorrect'", ")", "\n", "\n", "", "n", ",", "m", "=", "candidate_segments", ".", "shape", "[", "0", "]", ",", "target_segments", ".", "shape", "[", "0", "]", "\n", "tiou", "=", "np", ".", "empty", "(", "(", "n", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "tiou", "[", ":", ",", "i", "]", "=", "segment_iou", "(", "target_segments", "[", "i", ",", ":", "]", ",", "candidate_segments", ")", "\n", "\n", "", "return", "tiou", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_detection.compute_average_precision_detection": [[247, 324], ["numpy.linspace", "numpy.zeros", "float", "prediction.loc[].reset_index.loc[].reset_index", "numpy.zeros", "numpy.zeros", "ground_truth.groupby", "prediction.loc[].reset_index.iterrows", "numpy.cumsum().astype", "numpy.cumsum().astype", "range", "len", "len", "numpy.ones", "prediction[].values.argsort", "ground_truth_gbvn.get_group.reset_index", "eval_detection.segment_iou", "enumerate", "len", "eval_detection.interpolated_prec_rec", "len", "len", "len", "len", "ground_truth.groupby.get_group", "segment_iou.argsort", "numpy.cumsum", "numpy.cumsum", "len", "len"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.utils.segment_iou", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.utils.interpolated_prec_rec"], ["", "", "", "def", "compute_average_precision_detection", "(", "ground_truth", ",", "prediction", ",", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ")", ":", "\n", "    ", "\"\"\"Compute average precision (detection task) between ground truth and\n    predictions data frames. If multiple predictions occurs for the same\n    predicted segment, only the one with highest score is matches as\n    true positive. This code is greatly inspired by Pascal VOC devkit.\n    Parameters\n    ----------\n    ground_truth : df\n        Data frame containing the ground truth instances.\n        Required fields: ['video-id', 't-start', 't-end']\n    prediction : df\n        Data frame containing the prediction instances.\n        Required fields: ['video-id, 't-start', 't-end', 'score']\n    tiou_thresholds : 1darray, optional\n        Temporal intersection over union threshold.\n    Outputs\n    -------\n    ap : float\n        Average precision score.\n    \"\"\"", "\n", "ap", "=", "np", ".", "zeros", "(", "len", "(", "tiou_thresholds", ")", ")", "\n", "if", "prediction", ".", "empty", ":", "\n", "        ", "return", "ap", "\n", "\n", "", "npos", "=", "float", "(", "len", "(", "ground_truth", ")", ")", "\n", "lock_gt", "=", "np", ".", "ones", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "ground_truth", ")", ")", ")", "*", "-", "1", "\n", "# Sort predictions by decreasing score order.", "\n", "sort_idx", "=", "prediction", "[", "'score'", "]", ".", "values", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "prediction", "=", "prediction", ".", "loc", "[", "sort_idx", "]", ".", "reset_index", "(", "drop", "=", "True", ")", "\n", "\n", "# Initialize true positive and false positive vectors.", "\n", "tp", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "prediction", ")", ")", ")", "\n", "fp", "=", "np", ".", "zeros", "(", "(", "len", "(", "tiou_thresholds", ")", ",", "len", "(", "prediction", ")", ")", ")", "\n", "\n", "# Adaptation to query faster", "\n", "ground_truth_gbvn", "=", "ground_truth", ".", "groupby", "(", "'video-id'", ")", "\n", "\n", "# Assigning true positive to truly grount truth instances.", "\n", "for", "idx", ",", "this_pred", "in", "prediction", ".", "iterrows", "(", ")", ":", "\n", "\n", "        ", "try", ":", "\n", "# Check if there is at least one ground truth in the video associated.", "\n", "            ", "ground_truth_videoid", "=", "ground_truth_gbvn", ".", "get_group", "(", "this_pred", "[", "'video-id'", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "fp", "[", ":", ",", "idx", "]", "=", "1", "\n", "continue", "\n", "\n", "", "this_gt", "=", "ground_truth_videoid", ".", "reset_index", "(", ")", "\n", "tiou_arr", "=", "segment_iou", "(", "this_pred", "[", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", ",", "\n", "this_gt", "[", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", ")", "\n", "# We would like to retrieve the predictions with highest tiou score.", "\n", "tiou_sorted_idx", "=", "tiou_arr", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "for", "tidx", ",", "tiou_thr", "in", "enumerate", "(", "tiou_thresholds", ")", ":", "\n", "            ", "for", "jdx", "in", "tiou_sorted_idx", ":", "\n", "                ", "if", "tiou_arr", "[", "jdx", "]", "<", "tiou_thr", ":", "\n", "                    ", "fp", "[", "tidx", ",", "idx", "]", "=", "1", "\n", "break", "\n", "", "if", "lock_gt", "[", "tidx", ",", "this_gt", ".", "loc", "[", "jdx", "]", "[", "'index'", "]", "]", ">=", "0", ":", "\n", "                    ", "continue", "\n", "# Assign as true positive after the filters above.", "\n", "", "tp", "[", "tidx", ",", "idx", "]", "=", "1", "\n", "lock_gt", "[", "tidx", ",", "this_gt", ".", "loc", "[", "jdx", "]", "[", "'index'", "]", "]", "=", "idx", "\n", "break", "\n", "\n", "", "if", "fp", "[", "tidx", ",", "idx", "]", "==", "0", "and", "tp", "[", "tidx", ",", "idx", "]", "==", "0", ":", "\n", "                ", "fp", "[", "tidx", ",", "idx", "]", "=", "1", "\n", "\n", "", "", "", "tp_cumsum", "=", "np", ".", "cumsum", "(", "tp", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "fp_cumsum", "=", "np", ".", "cumsum", "(", "fp", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float", ")", "\n", "recall_cumsum", "=", "tp_cumsum", "/", "npos", "\n", "\n", "precision_cumsum", "=", "tp_cumsum", "/", "(", "tp_cumsum", "+", "fp_cumsum", ")", "\n", "\n", "for", "tidx", "in", "range", "(", "len", "(", "tiou_thresholds", ")", ")", ":", "\n", "        ", "ap", "[", "tidx", "]", "=", "interpolated_prec_rec", "(", "precision_cumsum", "[", "tidx", ",", ":", "]", ",", "recall_cumsum", "[", "tidx", ",", ":", "]", ")", "\n", "\n", "", "return", "ap", "\n", "", ""]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.__init__": [[83, 121], ["numpy.linspace", "eval_proposal.ANETproposal._import_ground_truth", "eval_proposal.ANETproposal._import_proposal", "IOError", "IOError", "eval_proposal.get_blocked_videos", "list", "print", "len", "print", "len", "print", "print"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal._import_ground_truth", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal._import_proposal", "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.utils.get_blocked_videos"], ["def", "__init__", "(", "self", ",", "ground_truth_filename", "=", "None", ",", "proposal_filename", "=", "None", ",", "\n", "ground_truth_fields", "=", "GROUND_TRUTH_FIELDS", ",", "\n", "proposal_fields", "=", "PROPOSAL_FIELDS", ",", "\n", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ",", "\n", "max_avg_nr_proposals", "=", "None", ",", "\n", "subset", "=", "'validation'", ",", "verbose", "=", "False", ",", "\n", "check_status", "=", "False", ")", ":", "\n", "        ", "if", "not", "ground_truth_filename", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid ground truth file.'", ")", "\n", "", "if", "not", "proposal_filename", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid proposal file.'", ")", "\n", "", "self", ".", "subset", "=", "subset", "\n", "self", ".", "tiou_thresholds", "=", "tiou_thresholds", "\n", "self", ".", "max_avg_nr_proposals", "=", "max_avg_nr_proposals", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "gt_fields", "=", "ground_truth_fields", "\n", "self", ".", "pred_fields", "=", "proposal_fields", "\n", "self", ".", "recall", "=", "None", "\n", "self", ".", "avg_recall", "=", "None", "\n", "self", ".", "proposals_per_video", "=", "None", "\n", "self", ".", "check_status", "=", "check_status", "\n", "# Retrieve blocked videos from server.", "\n", "if", "self", ".", "check_status", ":", "\n", "            ", "self", ".", "blocked_videos", "=", "get_blocked_videos", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "blocked_videos", "=", "list", "(", ")", "\n", "# Import ground truth and proposals.", "\n", "", "self", ".", "ground_truth", ",", "self", ".", "activity_index", "=", "self", ".", "_import_ground_truth", "(", "\n", "ground_truth_filename", ")", "\n", "self", ".", "proposal", "=", "self", ".", "_import_proposal", "(", "proposal_filename", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'[INIT] Loaded annotations from {} subset.'", ".", "format", "(", "subset", ")", ")", "\n", "nr_gt", "=", "len", "(", "self", ".", "ground_truth", ")", "\n", "print", "(", "'\\tNumber of ground truth instances: {}'", ".", "format", "(", "nr_gt", ")", ")", "\n", "nr_pred", "=", "len", "(", "self", ".", "proposal", ")", "\n", "print", "(", "'\\tNumber of proposals: {}'", ".", "format", "(", "nr_pred", ")", ")", "\n", "print", "(", "'\\tFixed threshold for tiou score: {}'", ".", "format", "(", "self", ".", "tiou_thresholds", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal._import_ground_truth": [[122, 166], ["data[].items", "pandas.DataFrame", "open", "json.load", "all", "IOError", "video_lst.append", "t_start_lst.append", "t_end_lst.append", "label_lst.append", "json.load.keys"], "methods", ["None"], ["", "", "def", "_import_ground_truth", "(", "self", ",", "ground_truth_filename", ")", ":", "\n", "        ", "\"\"\"Reads ground truth file, checks if it is well formatted, and returns\n           the ground truth instances and the activity classes.\n\n        Parameters\n        ----------\n        ground_truth_filename : str\n            Full path to the ground truth json file.\n\n        Outputs\n        -------\n        ground_truth : df\n            Data frame containing the ground truth instances.\n        activity_index : dict\n            Dictionary containing class index.\n        \"\"\"", "\n", "with", "open", "(", "ground_truth_filename", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "# Checking format", "\n", "", "if", "not", "all", "(", "[", "field", "in", "data", ".", "keys", "(", ")", "for", "field", "in", "self", ".", "gt_fields", "]", ")", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid ground truth file.'", ")", "\n", "\n", "# Read ground truth data.", "\n", "", "activity_index", ",", "cidx", "=", "{", "}", ",", "0", "\n", "video_lst", ",", "t_start_lst", ",", "t_end_lst", ",", "label_lst", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'database'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "self", ".", "subset", "!=", "v", "[", "'subset'", "]", ":", "\n", "                ", "continue", "\n", "", "if", "videoid", "in", "self", ".", "blocked_videos", ":", "\n", "                ", "continue", "\n", "", "for", "ann", "in", "v", "[", "'annotations'", "]", ":", "\n", "                ", "if", "ann", "[", "'label'", "]", "not", "in", "activity_index", ":", "\n", "                    ", "activity_index", "[", "ann", "[", "'label'", "]", "]", "=", "cidx", "\n", "cidx", "+=", "1", "\n", "", "video_lst", ".", "append", "(", "videoid", ")", "\n", "t_start_lst", ".", "append", "(", "ann", "[", "'segment'", "]", "[", "0", "]", ")", "\n", "t_end_lst", ".", "append", "(", "ann", "[", "'segment'", "]", "[", "1", "]", ")", "\n", "label_lst", ".", "append", "(", "activity_index", "[", "ann", "[", "'label'", "]", "]", ")", "\n", "\n", "", "", "ground_truth", "=", "pd", ".", "DataFrame", "(", "{", "'video-id'", ":", "video_lst", ",", "\n", "'t-start'", ":", "t_start_lst", ",", "\n", "'t-end'", ":", "t_end_lst", ",", "\n", "'label'", ":", "label_lst", "}", ")", "\n", "return", "ground_truth", ",", "activity_index", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal._import_proposal": [[167, 205], ["data[].items", "pandas.DataFrame", "open", "json.load", "all", "IOError", "video_lst.append", "t_start_lst.append", "t_end_lst.append", "score_lst.append", "json.load.keys"], "methods", ["None"], ["", "def", "_import_proposal", "(", "self", ",", "proposal_filename", ")", ":", "\n", "        ", "\"\"\"Reads proposal file, checks if it is well formatted, and returns\n           the proposal instances.\n\n        Parameters\n        ----------\n        proposal_filename : str\n            Full path to the proposal json file.\n\n        Outputs\n        -------\n        proposal : df\n            Data frame containing the proposal instances.\n        \"\"\"", "\n", "with", "open", "(", "proposal_filename", ",", "'r'", ")", "as", "fobj", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fobj", ")", "\n", "# Checking format...", "\n", "", "if", "not", "all", "(", "[", "field", "in", "data", ".", "keys", "(", ")", "for", "field", "in", "self", ".", "pred_fields", "]", ")", ":", "\n", "            ", "raise", "IOError", "(", "'Please input a valid proposal file.'", ")", "\n", "\n", "# Read predictions.", "\n", "", "video_lst", ",", "t_start_lst", ",", "t_end_lst", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "score_lst", "=", "[", "]", "\n", "for", "videoid", ",", "v", "in", "data", "[", "'results'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "videoid", "in", "self", ".", "blocked_videos", ":", "\n", "                ", "continue", "\n", "", "for", "result", "in", "v", ":", "\n", "                ", "video_lst", ".", "append", "(", "videoid", ")", "\n", "t_start_lst", ".", "append", "(", "result", "[", "'segment'", "]", "[", "0", "]", ")", "\n", "t_end_lst", ".", "append", "(", "result", "[", "'segment'", "]", "[", "1", "]", ")", "\n", "score_lst", ".", "append", "(", "result", "[", "'score'", "]", ")", "\n", "", "", "proposal", "=", "pd", ".", "DataFrame", "(", "{", "\n", "'video-id'", ":", "video_lst", ",", "\n", "'t-start'", ":", "t_start_lst", ",", "\n", "'t-end'", ":", "t_end_lst", ",", "\n", "'score'", ":", "score_lst", "\n", "}", ")", "\n", "return", "proposal", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.ANETproposal.evaluate": [[206, 228], ["eval_proposal.average_recall_vs_avg_nr_proposals", "numpy.trapz", "print", "print", "float", "float"], "methods", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.average_recall_vs_avg_nr_proposals"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Evaluates a proposal file. To measure the performance of a\n        method for the proposal task, we computes the area under the\n        average recall vs average number of proposals per video curve.\n        \"\"\"", "\n", "recall", ",", "avg_recall", ",", "proposals_per_video", "=", "average_recall_vs_avg_nr_proposals", "(", "\n", "self", ".", "ground_truth", ",", "self", ".", "proposal", ",", "\n", "max_avg_nr_proposals", "=", "self", ".", "max_avg_nr_proposals", ",", "\n", "tiou_thresholds", "=", "self", ".", "tiou_thresholds", "\n", ")", "\n", "\n", "area_under_curve", "=", "np", ".", "trapz", "(", "avg_recall", ",", "proposals_per_video", ")", "\n", "\n", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'[RESULTS] Performance on ActivityNet proposal task.'", ")", "\n", "print", "(", "'\\tArea Under the AR vs AN curve: {}%'", ".", "format", "(", "100.", "*", "float", "(", "area_under_curve", ")", "/", "proposals_per_video", "[", "-", "1", "]", ")", ")", "\n", "\n", "", "self", ".", "recall", "=", "recall", "\n", "self", ".", "avg_recall", "=", "avg_recall", "\n", "self", ".", "proposals_per_video", "=", "proposals_per_video", "\n", "\n", "return", "100.", "*", "float", "(", "area_under_curve", ")", "/", "proposals_per_video", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.get_blocked_videos": [[6, 9], ["open", "json.load"], "function", ["None"], ["def", "get_blocked_videos", "(", "api", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "'evaluation_anet/api.json'", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "return", "json", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.interpolated_prec_rec": [[11, 22], ["numpy.hstack", "numpy.hstack", "numpy.sum", "range", "max", "numpy.where", "len"], "function", ["None"], ["", "", "def", "interpolated_prec_rec", "(", "prec", ",", "rec", ")", ":", "\n", "    ", "\"\"\"\n    Interpolated AP - VOCdevkit from VOC 2011.\n    \"\"\"", "\n", "mprec", "=", "np", ".", "hstack", "(", "[", "[", "0", "]", ",", "prec", ",", "[", "0", "]", "]", ")", "\n", "mrec", "=", "np", ".", "hstack", "(", "[", "[", "0", "]", ",", "rec", ",", "[", "1", "]", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "mprec", ")", "-", "1", ")", "[", ":", ":", "-", "1", "]", ":", "\n", "        ", "mprec", "[", "i", "]", "=", "max", "(", "mprec", "[", "i", "]", ",", "mprec", "[", "i", "+", "1", "]", ")", "\n", "", "idx", "=", "np", ".", "where", "(", "mrec", "[", "1", ":", ":", "]", "!=", "mrec", "[", "0", ":", "-", "1", "]", ")", "[", "0", "]", "+", "1", "\n", "ap", "=", "np", ".", "sum", "(", "(", "mrec", "[", "idx", "]", "-", "mrec", "[", "idx", "-", "1", "]", ")", "*", "mprec", "[", "idx", "]", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.segment_iou": [[24, 51], ["numpy.maximum", "numpy.minimum", "segments_intersection.astype"], "function", ["None"], ["", "def", "segment_iou", "(", "target_segment", ",", "candidate_segments", ")", ":", "\n", "    ", "\"\"\"Compute the temporal intersection over union between a\n    target segment and all the test segments.\n\n    Parameters\n    ----------\n    target_segment : 1d array\n        Temporal target segment containing [starting, ending] times.\n    candidate_segments : 2d array\n        Temporal candidate segments containing N x [starting, ending] times.\n\n    Outputs\n    -------\n    tiou : 1d array\n        Temporal intersection over union score of the N's candidate segments.\n    \"\"\"", "\n", "tt1", "=", "np", ".", "maximum", "(", "target_segment", "[", "0", "]", ",", "candidate_segments", "[", ":", ",", "0", "]", ")", "\n", "tt2", "=", "np", ".", "minimum", "(", "target_segment", "[", "1", "]", ",", "candidate_segments", "[", ":", ",", "1", "]", ")", "\n", "# Intersection including Non-negative overlap score.", "\n", "segments_intersection", "=", "(", "tt2", "-", "tt1", ")", ".", "clip", "(", "0", ")", "\n", "# Segment union.", "\n", "segments_union", "=", "(", "candidate_segments", "[", ":", ",", "1", "]", "-", "candidate_segments", "[", ":", ",", "0", "]", ")", "+", "(", "target_segment", "[", "1", "]", "-", "target_segment", "[", "0", "]", ")", "-", "segments_intersection", "\n", "# Compute overlap as the ratio of the intersection", "\n", "# over union of two segments.", "\n", "tIoU", "=", "segments_intersection", ".", "astype", "(", "float", ")", "/", "segments_union", "\n", "return", "tIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.wrapper_segment_iou": [[53, 76], ["numpy.empty", "range", "ValueError", "eval_proposal.segment_iou"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.utils.segment_iou"], ["", "def", "wrapper_segment_iou", "(", "target_segments", ",", "candidate_segments", ")", ":", "\n", "    ", "\"\"\"Compute intersection over union btw segments\n    Parameters\n    ----------\n    target_segments : ndarray\n        2-dim array in format [m x 2:=[init, end]]\n    candidate_segments : ndarray\n        2-dim array in format [n x 2:=[init, end]]\n    Outputs\n    -------\n    tiou : ndarray\n        2-dim array [n x m] with IOU ratio.\n    Note: It assumes that candidate-segments are more scarce that target-segments\n    \"\"\"", "\n", "if", "candidate_segments", ".", "ndim", "!=", "2", "or", "target_segments", ".", "ndim", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'Dimension of arguments is incorrect'", ")", "\n", "\n", "", "n", ",", "m", "=", "candidate_segments", ".", "shape", "[", "0", "]", ",", "target_segments", ".", "shape", "[", "0", "]", "\n", "tiou", "=", "np", ".", "empty", "(", "(", "n", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "m", ")", ":", "\n", "        ", "tiou", "[", ":", ",", "i", "]", "=", "segment_iou", "(", "target_segments", "[", "i", ",", ":", "]", ",", "candidate_segments", ")", "\n", "\n", "", "return", "tiou", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.eval_proposal.average_recall_vs_avg_nr_proposals": [[230, 341], ["numpy.linspace", "ground_truth[].unique", "ground_truth.groupby", "proposals.groupby", "numpy.empty", "numpy.empty", "numpy.empty", "enumerate", "np.empty.mean", "proposals.groupby.get_group", "ground_truth.groupby.get_group", "numpy.minimum", "eval_proposal.wrapper_segment_iou", "score_lst.append", "enumerate", "float", "float", "proposals_videoid[].argsort", "score_lst.append", "numpy.expand_dims", "numpy.expand_dims", "int", "numpy.arange", "numpy.minimum", "enumerate", "np.empty.sum", "np.empty.sum", "float", "numpy.zeros", "float", "numpy.count_nonzero", "true_positives_tiou[].sum"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.utils.wrapper_segment_iou"], ["", "", "def", "average_recall_vs_avg_nr_proposals", "(", "ground_truth", ",", "proposals", ",", "\n", "max_avg_nr_proposals", "=", "None", ",", "\n", "tiou_thresholds", "=", "np", ".", "linspace", "(", "0.5", ",", "0.95", ",", "10", ")", ")", ":", "\n", "    ", "\"\"\" Computes the average recall given an average number\n        of proposals per video.\n\n    Parameters\n    ----------\n    ground_truth : df\n        Data frame containing the ground truth instances.\n        Required fields: ['video-id', 't-start', 't-end']\n    proposal : df\n        Data frame containing the proposal instances.\n        Required fields: ['video-id, 't-start', 't-end', 'score']\n    tiou_thresholds : 1darray, optional\n        array with tiou thresholds.\n\n    Outputs\n    -------\n    recall : 2darray\n        recall[i,j] is recall at ith tiou threshold at the jth average number of average number of proposals per video.\n    average_recall : 1darray\n        recall averaged over a list of tiou threshold. This is equivalent to recall.mean(axis=0).\n    proposals_per_video : 1darray\n        average number of proposals per video.\n    \"\"\"", "\n", "\n", "# Get list of videos.", "\n", "video_lst", "=", "ground_truth", "[", "'video-id'", "]", ".", "unique", "(", ")", "\n", "\n", "if", "not", "max_avg_nr_proposals", ":", "\n", "        ", "max_avg_nr_proposals", "=", "float", "(", "proposals", ".", "shape", "[", "0", "]", ")", "/", "video_lst", ".", "shape", "[", "0", "]", "\n", "\n", "", "ratio", "=", "max_avg_nr_proposals", "*", "float", "(", "video_lst", ".", "shape", "[", "0", "]", ")", "/", "proposals", ".", "shape", "[", "0", "]", "\n", "\n", "# Adaptation to query faster", "\n", "ground_truth_gbvn", "=", "ground_truth", ".", "groupby", "(", "'video-id'", ")", "\n", "proposals_gbvn", "=", "proposals", ".", "groupby", "(", "'video-id'", ")", "\n", "\n", "# For each video, computes tiou scores among the retrieved proposals.", "\n", "score_lst", "=", "[", "]", "\n", "total_nr_proposals", "=", "0", "\n", "for", "videoid", "in", "video_lst", ":", "\n", "\n", "# Get proposals for this video.", "\n", "        ", "proposals_videoid", "=", "proposals_gbvn", ".", "get_group", "(", "videoid", ")", "\n", "this_video_proposals", "=", "proposals_videoid", ".", "loc", "[", ":", ",", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", "\n", "\n", "# Sort proposals by score.", "\n", "sort_idx", "=", "proposals_videoid", "[", "'score'", "]", ".", "argsort", "(", ")", "[", ":", ":", "-", "1", "]", "\n", "this_video_proposals", "=", "this_video_proposals", "[", "sort_idx", ",", ":", "]", "\n", "\n", "# Get ground-truth instances associated to this video.", "\n", "ground_truth_videoid", "=", "ground_truth_gbvn", ".", "get_group", "(", "videoid", ")", "\n", "this_video_ground_truth", "=", "ground_truth_videoid", ".", "loc", "[", ":", ",", "[", "'t-start'", ",", "'t-end'", "]", "]", ".", "values", "\n", "\n", "if", "this_video_proposals", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "n", "=", "this_video_ground_truth", ".", "shape", "[", "0", "]", "\n", "score_lst", ".", "append", "(", "np", ".", "zeros", "(", "(", "n", ",", "1", ")", ")", ")", "\n", "continue", "\n", "\n", "", "if", "this_video_proposals", ".", "ndim", "!=", "2", ":", "\n", "            ", "this_video_proposals", "=", "np", ".", "expand_dims", "(", "this_video_proposals", ",", "axis", "=", "0", ")", "\n", "", "if", "this_video_ground_truth", ".", "ndim", "!=", "2", ":", "\n", "            ", "this_video_ground_truth", "=", "np", ".", "expand_dims", "(", "this_video_ground_truth", ",", "axis", "=", "0", ")", "\n", "\n", "", "nr_proposals", "=", "np", ".", "minimum", "(", "int", "(", "this_video_proposals", ".", "shape", "[", "0", "]", "*", "ratio", ")", ",", "this_video_proposals", ".", "shape", "[", "0", "]", ")", "\n", "total_nr_proposals", "+=", "nr_proposals", "\n", "this_video_proposals", "=", "this_video_proposals", "[", ":", "nr_proposals", ",", ":", "]", "\n", "\n", "# Compute tiou scores.", "\n", "tiou", "=", "wrapper_segment_iou", "(", "this_video_proposals", ",", "this_video_ground_truth", ")", "\n", "score_lst", ".", "append", "(", "tiou", ")", "\n", "\n", "# Given that the length of the videos is really varied, we", "\n", "# compute the number of proposals in terms of a ratio of the total", "\n", "# proposals retrieved, i.e. average recall at a percentage of proposals", "\n", "# retrieved per video.", "\n", "\n", "# Computes average recall.", "\n", "", "pcn_lst", "=", "np", ".", "arange", "(", "1", ",", "101", ")", "/", "100.0", "*", "(", "max_avg_nr_proposals", "*", "float", "(", "video_lst", ".", "shape", "[", "0", "]", ")", "/", "total_nr_proposals", ")", "\n", "matches", "=", "np", ".", "empty", "(", "(", "video_lst", ".", "shape", "[", "0", "]", ",", "pcn_lst", ".", "shape", "[", "0", "]", ")", ")", "\n", "positives", "=", "np", ".", "empty", "(", "video_lst", ".", "shape", "[", "0", "]", ")", "\n", "recall", "=", "np", ".", "empty", "(", "(", "tiou_thresholds", ".", "shape", "[", "0", "]", ",", "pcn_lst", ".", "shape", "[", "0", "]", ")", ")", "\n", "# Iterates over each tiou threshold.", "\n", "for", "ridx", ",", "tiou", "in", "enumerate", "(", "tiou_thresholds", ")", ":", "\n", "\n", "# Inspect positives retrieved per video at different", "\n", "# number of proposals (percentage of the total retrieved).", "\n", "        ", "for", "i", ",", "score", "in", "enumerate", "(", "score_lst", ")", ":", "\n", "# Total positives per video.", "\n", "            ", "positives", "[", "i", "]", "=", "score", ".", "shape", "[", "0", "]", "\n", "# Find proposals that satisfies minimum tiou threshold.", "\n", "true_positives_tiou", "=", "score", ">=", "tiou", "\n", "# Get number of proposals as a percentage of total retrieved.", "\n", "pcn_proposals", "=", "np", ".", "minimum", "(", "(", "score", ".", "shape", "[", "1", "]", "*", "pcn_lst", ")", ".", "astype", "(", "np", ".", "int", ")", ",", "score", ".", "shape", "[", "1", "]", ")", "\n", "\n", "for", "j", ",", "nr_proposals", "in", "enumerate", "(", "pcn_proposals", ")", ":", "\n", "# Compute the number of matches for each percentage of the proposals", "\n", "                ", "matches", "[", "i", ",", "j", "]", "=", "np", ".", "count_nonzero", "(", "(", "true_positives_tiou", "[", ":", ",", ":", "nr_proposals", "]", ")", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "\n", "# Computes recall given the set of matches per video.", "\n", "", "", "recall", "[", "ridx", ",", ":", "]", "=", "matches", ".", "sum", "(", "axis", "=", "0", ")", "/", "positives", ".", "sum", "(", ")", "\n", "\n", "# Recall is averaged.", "\n", "", "avg_recall", "=", "recall", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "# Get the average number of proposals per video.", "\n", "proposals_per_video", "=", "pcn_lst", "*", "(", "float", "(", "total_nr_proposals", ")", "/", "video_lst", ".", "shape", "[", "0", "]", ")", "\n", "\n", "return", "recall", ",", "avg_recall", ",", "proposals_per_video", "\n", "", ""]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.utils.get_blocked_videos": [[9, 14], ["urllib2.Request", "urllib2.urlopen", "json.loads", "urllib2.urlopen.read"], "function", ["None"], ["    ", "len_anchors", "=", "anchors_max", "-", "anchors_min", "\n", "int_xmin", "=", "np", ".", "maximum", "(", "anchors_min", ",", "box_min", ")", "\n", "int_xmax", "=", "np", ".", "minimum", "(", "anchors_max", ",", "box_max", ")", "\n", "inter_len", "=", "np", ".", "maximum", "(", "int_xmax", "-", "int_xmin", ",", "0.", ")", "\n", "scores", "=", "np", ".", "divide", "(", "inter_len", ",", "len_anchors", ")", "\n", "return", "scores", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.utils.interpolated_prec_rec": [[16, 26], ["numpy.hstack", "numpy.hstack", "numpy.sum", "range", "max", "numpy.where", "len"], "function", ["None"], ["\n", "", "def", "iou_with_anchors", "(", "anchors_min", ",", "anchors_max", ",", "box_min", ",", "box_max", ")", ":", "\n", "    ", "\"\"\"Compute jaccard score between a box and the anchors.\n    \"\"\"", "\n", "len_anchors", "=", "anchors_max", "-", "anchors_min", "\n", "int_xmin", "=", "np", ".", "maximum", "(", "anchors_min", ",", "box_min", ")", "\n", "int_xmax", "=", "np", ".", "minimum", "(", "anchors_max", ",", "box_max", ")", "\n", "inter_len", "=", "np", ".", "maximum", "(", "int_xmax", "-", "int_xmin", ",", "0.", ")", "\n", "union_len", "=", "len_anchors", "-", "inter_len", "+", "box_max", "-", "box_min", "\n", "# print inter_len,union_len", "\n", "jaccard", "=", "np", ".", "divide", "(", "inter_len", ",", "union_len", ")", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.utils.segment_iou": [[28, 55], ["numpy.maximum", "numpy.minimum", "segments_intersection.astype"], "function", ["None"], ["\n", "\n", "", "class", "ProposalGenerator", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "temporal_dim", "=", "None", ",", "max_duration", "=", "None", ",", "annotations", "=", "None", ")", ":", "\n", "        ", "self", ".", "tscale", "=", "temporal_dim", "\n", "self", ".", "max_duration", "=", "max_duration", "\n", "self", ".", "annots", "=", "annotations", "# For THUMOS only", "\n", "self", ".", "rescale_segment", "=", "self", ".", "rescale_segment_anet", "if", "self", ".", "annots", "is", "None", "else", "self", ".", "rescale_segment_thumos", "\n", "\n", "", "def", "rescale_segment_anet", "(", "self", ",", "start_index", ",", "end_index", ",", "video_name", "=", "None", ")", ":", "\n", "        ", "return", "start_index", "/", "self", ".", "tscale", ",", "end_index", "/", "self", ".", "tscale", "\n", "\n", "", "def", "rescale_segment_thumos", "(", "self", ",", "start_index", ",", "end_index", ",", "video_name", "=", "None", ")", ":", "\n", "        ", "b", "=", "self", ".", "annots", "[", "video_name", "]", "[", "'start_snippet'", "]", "\n", "d", "=", "self", ".", "annots", "[", "video_name", "]", "[", "'master_snippet_duration'", "]", "\n", "return", "(", "start_index", "+", "b", ")", "/", "d", ",", "(", "end_index", "+", "b", ")", "/", "d", "\n", "\n", "", "def", "__call__", "(", "self", ",", "start", ",", "end", ",", "confidence_map", ",", "video_names", ")", ":", "\n", "        ", "batch_props", "=", "[", "]", "\n", "for", "i", ",", "video_name", "in", "enumerate", "(", "video_names", ")", ":", "\n", "            ", "start_scores", "=", "start", "[", "i", "]", "\n", "end_scores", "=", "end", "[", "i", "]", "\n", "clr_confidence", "=", "(", "confidence_map", "[", "i", "]", "[", "1", "]", ")", "\n", "reg_confidence", "=", "(", "confidence_map", "[", "i", "]", "[", "0", "]", ")", "\n", "\n", "max_start", "=", "max", "(", "start_scores", ")", "\n", "max_end", "=", "max", "(", "end_scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.utils.wrapper_segment_iou": [[57, 80], ["numpy.empty", "xrange", "ValueError", "utils.segment_iou"], "function", ["home.repos.pwc.inspect_result.vhvkhoa_tapg-agentenvinteration.evaluation_anet.utils.segment_iou"], ["start_bins", "=", "np", ".", "zeros", "(", "self", ".", "tscale", ")", "\n", "start_bins", "[", "0", "]", "=", "1", "# [1,0,0...,0,1]", "\n", "for", "idx", "in", "range", "(", "1", ",", "self", ".", "tscale", "-", "1", ")", ":", "\n", "                ", "if", "start_scores", "[", "idx", "]", ">", "start_scores", "[", "idx", "+", "1", "]", "and", "start_scores", "[", "idx", "]", ">", "start_scores", "[", "idx", "-", "1", "]", ":", "\n", "                    ", "start_bins", "[", "idx", "]", "=", "1", "\n", "", "elif", "start_scores", "[", "idx", "]", ">", "(", "0.5", "*", "max_start", ")", ":", "\n", "                    ", "start_bins", "[", "idx", "]", "=", "1", "\n", "\n", "", "", "end_bins", "=", "np", ".", "zeros", "(", "len", "(", "end_scores", ")", ")", "\n", "end_bins", "[", "-", "1", "]", "=", "1", "\n", "for", "idx", "in", "range", "(", "1", ",", "self", ".", "tscale", "-", "1", ")", ":", "\n", "                ", "if", "end_scores", "[", "idx", "]", ">", "end_scores", "[", "idx", "+", "1", "]", "and", "end_scores", "[", "idx", "]", ">", "end_scores", "[", "idx", "-", "1", "]", ":", "\n", "                    ", "end_bins", "[", "idx", "]", "=", "1", "\n", "", "elif", "end_scores", "[", "idx", "]", ">", "(", "0.5", "*", "max_end", ")", ":", "\n", "                    ", "end_bins", "[", "idx", "]", "=", "1", "\n", "\n", "# generate proposals", "\n", "", "", "new_props", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "self", ".", "max_duration", ")", ":", "\n", "                ", "for", "jdx", "in", "range", "(", "self", ".", "tscale", ")", ":", "\n", "                    ", "start_index", "=", "jdx", "\n", "end_index", "=", "start_index", "+", "idx", "+", "1", "\n", "if", "end_index", "<", "self", ".", "tscale", "and", "start_bins", "[", "start_index", "]", "==", "1", "and", "end_bins", "[", "end_index", "]", "==", "1", ":", "\n", "                        ", "xmin", ",", "xmax", "=", "self", ".", "rescale_segment", "(", "start_index", ",", "end_index", ",", "video_name", ")", "\n"]]}