{"home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.saturate.AttnTracker.__init__": [[57, 60], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "cpu", "=", "True", ")", ":", "\n", "        ", "self", ".", "attns", "=", "{", "}", "\n", "self", ".", "cpu", "=", "cpu", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.saturate.AttnTracker.forward_hook": [[61, 80], ["net.query", "net.key", "torch.einsum", "net.softmax", "torch.einsum.size", "torch.arange", "weights.cpu.cpu.cpu", "math.sqrt", "torch.arange.unsqueeze", "torch.arange.unsqueeze", "mask.unsqueeze"], "methods", ["None"], ["", "def", "forward_hook", "(", "self", ",", "net", ",", "inputs", ",", "outputs", ")", ":", "\n", "        ", "encodings", "=", "inputs", "[", "0", "]", "\n", "queries", "=", "net", ".", "query", "(", "encodings", ")", "\n", "keys", "=", "net", ".", "key", "(", "encodings", ")", "\n", "scores", "=", "torch", ".", "einsum", "(", "\"bti, bsi -> bts\"", ",", "queries", ",", "keys", ")", "\n", "\n", "if", "net", ".", "config", ".", "scale_scores", ":", "\n", "            ", "scores", "=", "scores", "/", "sqrt", "(", "net", ".", "d_head", ")", "\n", "\n", "", "if", "net", ".", "config", ".", "masked", ":", "\n", "            ", "seq_len", "=", "scores", ".", "size", "(", "1", ")", "\n", "arange", "=", "torch", ".", "arange", "(", "seq_len", ",", "device", "=", "queries", ".", "device", ")", "\n", "mask", "=", "arange", ".", "unsqueeze", "(", "dim", "=", "0", ")", "<=", "arange", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "scores", "=", "mask", ".", "unsqueeze", "(", "dim", "=", "0", ")", "*", "scores", "\n", "\n", "", "weights", "=", "net", ".", "softmax", "(", "scores", ")", "\n", "if", "self", ".", "cpu", ":", "\n", "            ", "weights", "=", "weights", ".", "cpu", "(", ")", "\n", "", "self", ".", "attns", "[", "net", ".", "__name__", "]", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.saturate.parse_args": [[29, 53], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "list", "src.language_model.transformers.keys"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "\"--dev_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--half\"", ",", "action", "=", "\"store_true\"", ")", "\n", "# Wikitext-2: Largest sentence is 699 on train, 429 on test.", "\n", "# Penn: Largest sentence is 82 on train, 74 on test.", "\n", "parser", ".", "add_argument", "(", "\"--seq_len\"", ",", "type", "=", "int", ",", "default", "=", "700", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_model\"", ",", "type", "=", "int", ",", "default", "=", "768", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_ff\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_heads\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_layers\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--fine_lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-1", ")", "\n", "parser", ".", "add_argument", "(", "\"--pre_epochs\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--fine_epochs\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--trans\"", ",", "type", "=", "str", ",", "default", "=", "\"vaswani\"", ",", "choices", "=", "[", "\"vaswani\"", "]", "+", "list", "(", "transformers", ".", "keys", "(", ")", ")", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_bias\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data\"", ",", "choices", "=", "[", "\"wikitext-2\"", ",", "\"penn\"", "]", ",", "default", "=", "\"wikitext-2\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_samples\"", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.schedulers.get_policy": [[4, 15], ["None"], "function", ["None"], ["def", "get_policy", "(", "name", ")", ":", "\n", "    ", "if", "name", "is", "None", ":", "\n", "        ", "return", "constant_lr", "\n", "\n", "", "out_dict", "=", "{", "\n", "\"constant_lr\"", ":", "constant_lr", ",", "\n", "\"linear_lr\"", ":", "linear_lr", ",", "\n", "\"sqrt_lr\"", ":", "sqrt_lr", ",", "\n", "}", "\n", "\n", "return", "out_dict", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.schedulers.assign_learning_rate": [[17, 20], ["None"], "function", ["None"], ["", "def", "assign_learning_rate", "(", "optimizer", ",", "new_lr", ")", ":", "\n", "    ", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "\"lr\"", "]", "=", "new_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.schedulers.constant_lr": [[22, 31], ["schedulers.assign_learning_rate"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.schedulers.assign_learning_rate"], ["", "", "def", "constant_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "lr", "=", "args", ".", "lr", "\n", "\n", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.schedulers.sqrt_lr": [[33, 43], ["schedulers.assign_learning_rate", "numpy.sqrt", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.schedulers.assign_learning_rate"], ["", "def", "sqrt_lr", "(", "optimizer", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "iteration", "<=", "args", ".", "stop_iteration", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "", "else", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "*", "np", ".", "sqrt", "(", "args", ".", "stop_iteration", ")", "/", "np", ".", "sqrt", "(", "iteration", ")", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.schedulers.linear_lr": [[45, 55], ["schedulers.assign_learning_rate"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.schedulers.assign_learning_rate"], ["", "def", "linear_lr", "(", "optimizer", ",", "args", ",", "max_iterations", ",", "**", "kwargs", ")", ":", "\n", "    ", "def", "_lr_adjuster", "(", "epoch", ",", "iteration", ")", ":", "\n", "        ", "if", "iteration", "<=", "args", ".", "stop_iteration", ":", "\n", "            ", "lr", "=", "args", ".", "lr", "\n", "", "else", ":", "\n", "            ", "lr", "=", "-", "0.9", "*", "args", ".", "lr", "/", "(", "max_iterations", "-", "args", ".", "stop_iteration", ")", "*", "(", "iteration", "-", "args", ".", "stop_iteration", ")", "+", "args", ".", "lr", "\n", "", "assign_learning_rate", "(", "optimizer", ",", "lr", ")", "\n", "return", "lr", "\n", "\n", "", "return", "_lr_adjuster", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.schedulers._warmup_lr": [[57, 59], ["None"], "function", ["None"], ["", "def", "_warmup_lr", "(", "base_lr", ",", "warmup_length", ",", "epoch", ")", ":", "\n", "    ", "return", "base_lr", "*", "(", "epoch", "+", "1", ")", "/", "warmup_length", "\n", "", ""]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.plot_lr_norms.parse_args": [[9, 13], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--optim\"", ",", "choices", "=", "[", "\"adamw\"", ",", "\"adam\"", ",", "\"sgd\"", "]", ",", "default", "=", "\"sgd\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.plot_lr_norms.load_data": [[15, 19], ["os.path.join", "open", "pickle.load"], "function", ["None"], ["", "def", "load_data", "(", "optim", ",", "sched", ")", ":", "\n", "    ", "path", "=", "os", ".", "path", ".", "join", "(", "MODELS", ",", "f\"finetune-trans/penn/vaswani-{optim}-{sched}-batch_data.dat\"", ")", "\n", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "fh", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "fh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.Avg.__init__": [[28, 31], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "sum", "=", "0.", "\n", "self", ".", "num", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.Avg.update": [[32, 35], ["tensor.sum().item", "tensor.numel", "tensor.sum"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "tensor", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "self", ".", "sum", "+=", "tensor", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "num", "+=", "tensor", ".", "numel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.Avg.value": [[36, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "value", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sum", "/", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.Avg.is_zero": [[40, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "is_zero", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sum", "==", "0.", "and", "self", ".", "num", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.WrapT5.__init__": [[46, 53], ["super().__init__", "T5Config.from_pretrained", "T5Model", "T5Model.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ":", "str", ",", "random_init", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "random_init", ":", "\n", "            ", "config", "=", "T5Config", ".", "from_pretrained", "(", "model_name", ",", "output_hidden_states", "=", "True", ")", "\n", "self", ".", "t5", "=", "T5Model", "(", "config", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "t5", "=", "T5Model", ".", "from_pretrained", "(", "model_name", ",", "output_hidden_states", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.WrapT5.forward": [[54, 57], ["eval_pretrain_sat_brown.WrapT5.t5"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_ids", ")", ":", "\n", "        ", "results", "=", "self", ".", "t5", "(", "input_ids", ",", "decoder_input_ids", "=", "input_ids", ")", "\n", "return", "results", "[", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.WrapXLNet.__init__": [[60, 67], ["super().__init__", "XLNetConfig.from_pretrained", "XLNetModel", "XLNetModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ":", "str", ",", "random_init", ":", "bool", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "random_init", ":", "\n", "            ", "config", "=", "XLNetConfig", ".", "from_pretrained", "(", "model_name", ",", "output_hidden_states", "=", "True", ")", "\n", "self", ".", "xlnet", "=", "XLNetModel", "(", "config", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "xlnet", "=", "XLNetModel", ".", "from_pretrained", "(", "model_name", ",", "output_hidden_states", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.WrapXLNet.forward": [[68, 71], ["eval_pretrain_sat_brown.WrapXLNet.xlnet"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_ids", ")", ":", "\n", "        ", "results", "=", "self", ".", "xlnet", "(", "input_ids", ")", "\n", "return", "results", "[", "0", "]", ",", "results", "[", "0", "]", ",", "results", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.cos": [[18, 24], ["torch.sum", "vec1.norm", "vec2.norm"], "function", ["None"], ["def", "cos", "(", "vec1", ":", "torch", ".", "FloatTensor", ",", "vec2", ":", "torch", ".", "FloatTensor", ",", "dim", ":", "int", "=", "-", "1", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "    ", "\"\"\"Return the cosine similarity between two vectors along `dim`.\n    \n    There was a bug in this that I fixed.\"\"\"", "\n", "return", "torch", ".", "sum", "(", "vec1", "*", "vec2", ",", "dim", "=", "dim", ")", "/", "(", "\n", "vec1", ".", "norm", "(", "dim", "=", "dim", ")", "*", "vec2", ".", "norm", "(", "dim", "=", "dim", ")", "+", "1e-9", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.parse_args": [[73, 83], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "action", "=", "\"append\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cuda\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--mock_sents\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--agreement\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_sents\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--random_init\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.get_sentences": [[85, 98], ["open", "fh.read", "fh.read.split", "line.startswith"], "function", ["None"], ["", "def", "get_sentences", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "mock_sents", ":", "\n", "        ", "return", "[", "\n", "\"Hello to my little friend.\"", ",", "\n", "\"It's a great day in Seattle, besides the virus.\"", ",", "\n", "\"Working from home is great.\"", ",", "\n", "\"Wow, who needs pre-annotated corpora?\"", ",", "\n", "]", "\n", "\n", "", "with", "open", "(", "f\"{DATA}/brown.txt\"", ")", "as", "fh", ":", "\n", "        ", "text", "=", "fh", ".", "read", "(", ")", "\n", "sentences", "=", "[", "line", "for", "line", "in", "text", ".", "split", "(", "\"\\n\\n\"", ")", "if", "not", "line", ".", "startswith", "(", "\"#\"", ")", "]", "\n", "return", "sentences", "[", ":", "args", ".", "num_sents", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.collect_data": [[99, 148], ["eval_pretrain_sat_brown.get_sentences", "zip", "AutoTokenizer.from_pretrained", "AutoTokenizer.from_pretrained", "AutoTokenizer.from_pretrained", "AutoTokenizer.from_pretrained", "rich.print", "enumerate", "BertModel.from_pretrained", "RobertaModel.from_pretrained", "eval_pretrain_sat_brown.WrapT5", "eval_pretrain_sat_brown.WrapXLNet", "BertModel", "RobertaModel", "eval_pretrain_sat_brown.WrapT5", "eval_pretrain_sat_brown.WrapXLNet", "eval_pretrain_sat_brown.Avg", "torch.tensor().unsqueeze", "model", "zip", "rich.print", "BertConfig.from_pretrained", "RobertaConfig.from_pretrained", "range", "isinstance", "model.values", "src.saturate.saturate", "model", "eval_pretrain_sat_brown.cos", "avg.update", "torch.tensor", "isinstance", "model.values", "type", "tokenizer.encode"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.get_sentences", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.cos", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.Avg.update", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.AutoEncoder.encode"], ["", "", "def", "collect_data", "(", "args", ")", ":", "\n", "    ", "sentences", "=", "get_sentences", "(", "args", ")", "\n", "\n", "tokenizers", "=", "[", "\n", "AutoTokenizer", ".", "from_pretrained", "(", "\"bert-base-cased\"", ")", ",", "\n", "AutoTokenizer", ".", "from_pretrained", "(", "\"roberta-base\"", ")", ",", "\n", "AutoTokenizer", ".", "from_pretrained", "(", "\"t5-base\"", ")", ",", "\n", "AutoTokenizer", ".", "from_pretrained", "(", "\"xlnet-base-cased\"", ")", ",", "\n", "]", "\n", "\n", "model_names", "=", "[", "\"bert-base-cased\"", ",", "\"roberta-base\"", ",", "\"t5-base\"", ",", "\"xlnet-base-cased\"", "]", "\n", "\n", "if", "not", "args", ".", "random_init", ":", "\n", "        ", "models", "=", "[", "\n", "BertModel", ".", "from_pretrained", "(", "\"bert-base-cased\"", ",", "output_hidden_states", "=", "True", ")", ",", "\n", "RobertaModel", ".", "from_pretrained", "(", "\"roberta-base\"", ",", "output_hidden_states", "=", "True", ")", ",", "\n", "WrapT5", "(", "\"t5-base\"", ")", ",", "\n", "WrapXLNet", "(", "\"xlnet-base-cased\"", ")", ",", "\n", "]", "\n", "\n", "", "else", ":", "\n", "        ", "models", "=", "[", "\n", "BertModel", "(", "BertConfig", ".", "from_pretrained", "(", "\"bert-base-cased\"", ",", "output_hidden_states", "=", "True", ")", ")", ",", "\n", "RobertaModel", "(", "RobertaConfig", ".", "from_pretrained", "(", "\"roberta-base\"", ",", "output_hidden_states", "=", "True", ")", ")", ",", "\n", "WrapT5", "(", "\"t5-base\"", ",", "random_init", "=", "True", ")", ",", "\n", "WrapXLNet", "(", "\"xlnet-base-cased\"", ",", "random_init", "=", "True", ")", ",", "\n", "]", "\n", "\n", "", "sims_by_model", "=", "{", "}", "\n", "for", "name", ",", "tokenizer", ",", "model", "in", "zip", "(", "model_names", ",", "tokenizers", ",", "models", ")", ":", "\n", "        ", "print", "(", "f\"[green]=>[/green] {type(model).__name__}...\"", ")", "\n", "sim_avgs", "=", "[", "Avg", "(", ")", "for", "_", "in", "range", "(", "13", ")", "]", "\n", "\n", "for", "sentence", "in", "sentences", ":", "\n", "            ", "input_ids", "=", "torch", ".", "tensor", "(", "tokenizer", ".", "encode", "(", "sentence", ",", "max_length", "=", "512", ",", "truncation", "=", "True", ")", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "outputs", "=", "model", "(", "input_ids", ")", "\n", "_", ",", "_", ",", "states", "=", "outputs", "if", "isinstance", "(", "outputs", ",", "tuple", ")", "else", "outputs", ".", "values", "(", ")", "\n", "with", "saturate", "(", "model", ")", ":", "\n", "                ", "hard_outputs", "=", "model", "(", "input_ids", ")", "\n", "_", ",", "_", ",", "hard_states", "=", "hard_outputs", "if", "isinstance", "(", "hard_outputs", ",", "tuple", ")", "else", "hard_outputs", ".", "values", "(", ")", "\n", "", "for", "state", ",", "hard_state", ",", "avg", "in", "zip", "(", "states", ",", "hard_states", ",", "sim_avgs", ")", ":", "\n", "                ", "sim", "=", "cos", "(", "state", ",", "hard_state", ")", "\n", "avg", ".", "update", "(", "sim", ")", "\n", "\n", "", "", "sims_by_model", "[", "name", "]", "=", "[", "avg", ".", "value", "for", "avg", "in", "sim_avgs", "if", "not", "avg", ".", "is_zero", "]", "\n", "for", "layer", ",", "avg_value", "in", "enumerate", "(", "sims_by_model", "[", "name", "]", ")", ":", "\n", "            ", "print", "(", "f\"[red]Layer #{layer} Sim[/red]: {avg_value:.2f}\"", ")", "\n", "\n", "", "", "return", "sims_by_model", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.main": [[150, 177], ["pickle.load.items", "matplotlib.ylim", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.legend", "matplotlib.tight_layout", "matplotlib.savefig", "rich.print", "eval_pretrain_sat_brown.collect_data", "list", "matplotlib.plot", "os.path.join", "os.path.join", "open", "pickle.load", "range", "open", "pickle.dump", "len"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.collect_data"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "load", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "load", ",", "\"rb\"", ")", "as", "fh", ":", "\n", "            ", "sims_by_model", "=", "pickle", ".", "load", "(", "fh", ")", "\n", "", "", "else", ":", "\n", "        ", "sims_by_model", "=", "collect_data", "(", "args", ")", "\n", "\n", "", "for", "model", ",", "data", "in", "sims_by_model", ".", "items", "(", ")", ":", "\n", "        ", "data", "=", "data", "[", "1", ":", "]", "# Ignore the embedding layer, which is constant 1.", "\n", "layers", "=", "list", "(", "range", "(", "1", ",", "len", "(", "data", ")", "+", "1", ")", ")", "\n", "plt", ".", "plot", "(", "layers", ",", "data", ",", "label", "=", "model", ",", "marker", "=", "\"o\"", ")", "\n", "", "plt", ".", "ylim", "(", "top", "=", "1", ")", "\n", "plt", ".", "xlabel", "(", "\"Layer #\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Representation similarity\"", ")", "\n", "plt", ".", "title", "(", "\"Randomly initialized representation similarity\"", "if", "args", ".", "random_init", "else", "\"Pretrained representation similarity\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "if", "args", ".", "random_init", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "PATH", ",", "\"random-init.pdf\"", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "PATH", ",", "\"pretrained.pdf\"", ")", "\n", "", "plt", ".", "savefig", "(", "path", ")", "\n", "print", "(", "f\"[green]=>[/green] Saved fig to {path}.\"", ")", "\n", "\n", "if", "not", "args", ".", "load", ":", "\n", "        ", "with", "open", "(", "f\"{CACHED}/sims_by_model-{args.random_init}.dat\"", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "            ", "pickle", ".", "dump", "(", "sims_by_model", ",", "fh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.track_gp.parse_args": [[46, 71], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "list", "src.language_model.transformers.keys"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "\"--dev_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--half\"", ",", "action", "=", "\"store_true\"", ")", "\n", "# Wikitext-2: Largest sentence is 699 on train, 429 on test.", "\n", "# Penn: Largest sentence is 82 on train, 74 on test.", "\n", "parser", ".", "add_argument", "(", "\"--seq_len\"", ",", "type", "=", "int", ",", "default", "=", "700", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_model\"", ",", "type", "=", "int", ",", "default", "=", "768", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_ff\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_heads\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_layers\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--trans\"", ",", "type", "=", "str", ",", "default", "=", "\"vaswani\"", ",", "choices", "=", "[", "\"vaswani\"", "]", "+", "list", "(", "transformers", ".", "keys", "(", ")", ")", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--fig_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"figs/finetune-trans\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"data/finetune-trans\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_bias\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data\"", ",", "choices", "=", "[", "\"wikitext-2\"", ",", "\"penn\"", "]", ",", "default", "=", "\"wikitext-2\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--optim\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"sgd\"", ",", "\"adamw\"", "]", ",", "default", "=", "\"sgd\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-3", ")", "\n", "parser", ".", "add_argument", "(", "\"--wd\"", ",", "type", "=", "float", ",", "default", "=", "0.", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.track_gp.train_model": [[73, 134], ["collections.defaultdict", "float", "range", "model.train", "log.info", "torch.randperm", "torch.randperm", "tqdm.trange", "len", "p.data.clone", "train_tokens[].to", "train_mask[].to", "optimizer.zero_grad", "model", "src.loss.sequence_cross_entropy_with_logits", "src.loss.sequence_cross_entropy_with_logits.backward", "optimizer.step", "timeseries[].append", "timeseries[].append", "timeseries[].append", "model.parameters", "len", "p.data.clone", "p.norm().item", "d.norm().item", "model.parameters", "zip", "zip", "p.norm", "d.norm", "d.flatten", "p.flatten"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.loss.sequence_cross_entropy_with_logits", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.norm_sgd.NormSGD.step"], ["", "def", "train_model", "(", "\n", "args", ",", "\n", "model", ",", "\n", "train_tokens", ",", "\n", "train_mask", ",", "\n", "dev_tokens", ",", "\n", "dev_mask", ",", "\n", "optimizer", ",", "\n", "epochs", "=", "10", ",", "\n", "device", "=", "\"cuda:0\"", ",", "\n", ")", ":", "\n", "    ", "timeseries", "=", "defaultdict", "(", "list", ")", "\n", "best_loss", "=", "float", "(", "\"inf\"", ")", "\n", "\n", "for", "e", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "log", ".", "info", "(", "f\"Starting epoch {e}...\"", ")", "\n", "perm", "=", "torch", ".", "randperm", "(", "len", "(", "train_tokens", ")", ")", "\n", "train_tokens", "=", "train_tokens", "[", "perm", ",", ":", "]", "\n", "train_mask", "=", "train_mask", "[", "perm", ",", ":", "]", "\n", "\n", "params", "=", "[", "p", ".", "data", ".", "clone", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "\n", "for", "b", "in", "tqdm", ".", "trange", "(", "0", ",", "len", "(", "train_tokens", ")", "-", "args", ".", "batch_size", ",", "args", ".", "batch_size", ")", ":", "\n", "            ", "prev_params", "=", "params", "\n", "\n", "batch_tokens", "=", "train_tokens", "[", "b", ":", "b", "+", "args", ".", "batch_size", "]", ".", "to", "(", "device", ")", "\n", "batch_mask", "=", "train_mask", "[", "b", ":", "b", "+", "args", ".", "batch_size", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "logits", "=", "model", "(", "batch_tokens", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "loss", "=", "sequence_cross_entropy_with_logits", "(", "\n", "logits", ",", "batch_tokens", "[", ":", ",", "1", ":", "]", ",", "batch_mask", "[", ":", ",", ":", "-", "1", "]", "\n", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "params", "=", "[", "p", ".", "data", ".", "clone", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "deltas", "=", "[", "p", "-", "pp", "for", "p", ",", "pp", "in", "zip", "(", "params", ",", "prev_params", ")", "]", "\n", "\n", "pnorms", "=", "[", "p", ".", "norm", "(", "p", "=", "2", ")", ".", "item", "(", ")", "for", "p", "in", "params", "]", "\n", "dnorms", "=", "[", "d", ".", "norm", "(", "p", "=", "2", ")", ".", "item", "(", ")", "for", "d", "in", "deltas", "]", "\n", "projs", "=", "[", "(", "d", ".", "flatten", "(", ")", "@", "p", ".", "flatten", "(", ")", ")", ".", "item", "(", ")", "for", "d", ",", "p", "in", "zip", "(", "params", ",", "deltas", ")", "]", "\n", "\n", "timeseries", "[", "\"pnorms\"", "]", ".", "append", "(", "pnorms", ")", "\n", "timeseries", "[", "\"dnorms\"", "]", ".", "append", "(", "dnorms", ")", "\n", "timeseries", "[", "\"projs\"", "]", ".", "append", "(", "projs", ")", "\n", "\n", "# model.eval()", "\n", "# metrics = get_metrics(args, model, dev_tokens, dev_mask, device=device)", "\n", "# for name, value in metrics.items():", "\n", "#     timeseries[name].append(value)", "\n", "# print(metrics)", "\n", "\n", "# Save the model checkpoint if this is the best performance yet.", "\n", "# if metrics[\"loss\"] < best_loss:", "\n", "#     best_loss = metrics[\"loss\"]", "\n", "#     data_dir = os.path.join(args.data_dir, args.data)", "\n", "#     ckpt_path = os.path.join(data_dir, args.trans + \".pt\")", "\n", "#     torch.save(model.state_dict(), ckpt_path)", "\n", "\n", "", "", "return", "timeseries", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.track_gp.main": [[136, 196], ["torch.device", "torch.device", "src.tokenizer.Tokenizer", "log.info", "list", "src.utils.pad_sequence_to_len", "src.utils.get_mask().float", "max", "log.info", "log.info", "list", "src.utils.pad_sequence_to_len", "src.utils.get_mask().float", "max", "log.info", "src.language_model.LanguageModel", "model.half.to", "track_gp.train_model", "rich.print", "src.tokenizer.Tokenizer.gen_tokens", "src.tokenizer.Tokenizer.gen_tokens", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "model.half.half", "torch.optim", "os.path.exists", "os.makedirs", "open", "pickle.dump", "torch.cuda.is_available", "torch.cuda.is_available", "src.utils.get_mask", "len", "src.utils.get_mask", "len", "model.half.parameters"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.pad_sequence_to_len", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.pad_sequence_to_len", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.train_model", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.gen_tokens", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.gen_tokens", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.get_mask", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.get_mask"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "tokenizer", "=", "Tokenizer", "(", ")", "\n", "\n", "# TODO: Added this in utils.", "\n", "log", ".", "info", "(", "f\"Loading train data from {PATH}/{args.data}/train.txt...\"", ")", "\n", "raw_train", "=", "list", "(", "tokenizer", ".", "gen_tokens", "(", "f\"{PATH}/{args.data}/train.txt\"", ")", ")", "\n", "train_tokens", "=", "pad_sequence_to_len", "(", "raw_train", ",", "args", ".", "seq_len", ")", "\n", "train_mask", "=", "get_mask", "(", "raw_train", ",", "args", ".", "seq_len", ")", ".", "float", "(", ")", "\n", "train_len", "=", "max", "(", "len", "(", "s", ")", "for", "s", "in", "raw_train", ")", "\n", "assert", "train_len", "<=", "args", ".", "seq_len", "\n", "log", ".", "info", "(", "f\"Max train sentence length is {train_len} (<= {args.seq_len}).\"", ")", "\n", "\n", "log", ".", "info", "(", "f\"Loading dev data from {PATH}/{args.data}/valid.txt...\"", ")", "\n", "raw_dev", "=", "list", "(", "tokenizer", ".", "gen_tokens", "(", "f\"{PATH}/{args.data}/valid.txt\"", ")", ")", "\n", "dev_tokens", "=", "pad_sequence_to_len", "(", "raw_dev", ",", "args", ".", "seq_len", ")", "\n", "dev_mask", "=", "get_mask", "(", "raw_dev", ",", "args", ".", "seq_len", ")", ".", "float", "(", ")", "\n", "dev_len", "=", "max", "(", "len", "(", "s", ")", "for", "s", "in", "raw_dev", ")", "\n", "assert", "dev_len", "<=", "args", ".", "seq_len", "\n", "log", ".", "info", "(", "f\"Max dev sentence length is {dev_len} (<= {args.seq_len}).\"", ")", "\n", "\n", "model", "=", "LanguageModel", "(", "\n", "d_model", "=", "args", ".", "d_model", ",", "\n", "d_ff", "=", "args", ".", "d_ff", ",", "\n", "d_vocab", "=", "tokenizer", ".", "d_vocab", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "n_heads", "=", "args", ".", "n_heads", ",", "\n", "n_layers", "=", "args", ".", "n_layers", ",", "\n", "encoder_type", "=", "args", ".", "trans", ",", "\n", "bias", "=", "not", "args", ".", "no_bias", ",", "\n", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "half", ":", "\n", "        ", "model", "=", "model", ".", "half", "(", ")", "\n", "\n", "", "optim", "=", "optims", "[", "args", ".", "optim", "]", "\n", "\n", "timeseries", "=", "train_model", "(", "\n", "args", ",", "\n", "model", ",", "\n", "train_tokens", ",", "\n", "train_mask", ",", "\n", "dev_tokens", ",", "\n", "dev_mask", ",", "\n", "optim", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wd", ")", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", ")", "\n", "\n", "data_dir", "=", "f\"{CACHED}/wd\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "data_dir", ")", "\n", "", "filename", "=", "f\"{data_dir}/{args.data}-{args.trans}-{args.optim}-lr={args.lr}-wd={args.wd}.dat\"", "\n", "with", "open", "(", "filename", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "timeseries", ",", "fh", ")", "\n", "\n", "", "print", "(", "f\"Saved {filename}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.get_checkpoints": [[35, 43], ["os.listdir", "sorted", "list", "file_name.endswith", "sorted.append", "file_name.replace", "int", "ckpt.split"], "function", ["None"], ["def", "get_checkpoints", "(", "model_dir", ")", ":", "\n", "# return tf.train.get_checkpoint_state(model_dir).all_model_checkpoint_paths", "\n", "    ", "ckpts", "=", "[", "]", "\n", "for", "file_name", "in", "os", ".", "listdir", "(", "model_dir", ")", ":", "\n", "        ", "if", "file_name", ".", "endswith", "(", "\".index\"", ")", ":", "\n", "            ", "ckpts", ".", "append", "(", "file_name", ".", "replace", "(", "\".index\"", ",", "\"\"", ")", ")", "\n", "", "", "ckpts", "=", "sorted", "(", "ckpts", ",", "key", "=", "lambda", "ckpt", ":", "int", "(", "ckpt", ".", "split", "(", "\"-\"", ")", "[", "1", "]", ")", ")", "\n", "return", "list", "(", "ckpts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.downsample": [[45, 50], ["enumerate", "len"], "function", ["None"], ["", "def", "downsample", "(", "li", ":", "list", ",", "samples", ":", "int", "=", "5", ")", ":", "\n", "    ", "step", "=", "len", "(", "li", ")", "//", "samples", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "li", ")", ":", "\n", "        ", "if", "idx", "%", "step", "==", "0", ":", "\n", "            ", "yield", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.write_checkpoint_file": [[52, 56], ["open", "FILE_FORMAT.format", "fh.write"], "function", ["None"], ["", "", "", "def", "write_checkpoint_file", "(", "ckpt", ")", ":", "\n", "    ", "with", "open", "(", "CKPT_PATH", ",", "\"w\"", ")", "as", "fh", ":", "\n", "        ", "contents", "=", "FILE_FORMAT", ".", "format", "(", "ckpt", "=", "ckpt", ")", "\n", "fh", ".", "write", "(", "contents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main._operative_config_path": [[58, 60], ["os.path.join"], "function", ["None"], ["", "", "def", "_operative_config_path", "(", "model_dir", ")", ":", "\n", "    ", "return", "os", ".", "path", ".", "join", "(", "model_dir", ",", "\"operative_config.gin\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main._fan_in": [[62, 65], ["float", "float", "len"], "function", ["None"], ["", "def", "_fan_in", "(", "shape", ")", "->", "int", ":", "\n", "# This is from some TensorFlow code or something.", "\n", "    ", "return", "float", "(", "shape", "[", "-", "2", "]", ")", "if", "len", "(", "shape", ")", ">", "1", "else", "float", "(", "shape", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.get_param_names": [[67, 69], ["estimator.get_variable_names", "p.startswith"], "function", ["None"], ["", "def", "get_param_names", "(", "estimator", ")", ":", "\n", "    ", "return", "[", "p", "for", "p", "in", "estimator", ".", "get_variable_names", "(", ")", "if", "p", ".", "startswith", "(", "\"encoder/\"", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.filter_by_layer": [[71, 74], ["p.startswith"], "function", ["None"], ["", "def", "filter_by_layer", "(", "param_names", ",", "layer_num", ":", "int", ")", ":", "\n", "    ", "expr", "=", "f\"encoder/block_{layer_num:03d}\"", "\n", "return", "[", "p", "for", "p", "in", "param_names", "if", "p", ".", "startswith", "(", "expr", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.get_param_norm": [[76, 91], ["numpy.min", "numpy.concatenate", "numpy.linalg.norm", "numpy.linalg.norm", "len", "numpy.sqrt", "value.flatten", "len", "math.sqrt", "t5_main._fan_in"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main._fan_in"], ["", "def", "get_param_norm", "(", "params", ":", "Iterable", "[", "np", ".", "ndarray", "]", ",", "normalize", ":", "bool", "=", "False", ",", "min", ":", "bool", "=", "False", ")", ":", "\n", "# There are weird scalars in here, which we filter out.", "\n", "    ", "values", "=", "[", "v", "for", "v", "in", "params", "if", "len", "(", "v", ".", "shape", ")", ">", "0", "]", "\n", "if", "min", ":", "\n", "# Take the linear transformation in the network with the least norm.", "\n", "        ", "values", "=", "[", "v", "/", "np", ".", "sqrt", "(", "v", ".", "size", ")", "for", "v", "in", "values", "if", "len", "(", "v", ".", "shape", ")", "==", "2", "]", "\n", "norms", "=", "[", "np", ".", "linalg", ".", "norm", "(", "v", ")", "for", "v", "in", "values", "]", "\n", "return", "np", ".", "min", "(", "norms", ")", "\n", "", "else", ":", "\n", "# This is the 2-norm.", "\n", "        ", "if", "normalize", ":", "\n", "            ", "values", "=", "[", "value", "/", "sqrt", "(", "_fan_in", "(", "value", ".", "shape", ")", ")", "for", "value", "in", "values", "]", "\n", "", "flat", "=", "np", ".", "concatenate", "(", "[", "value", ".", "flatten", "(", ")", "for", "value", "in", "values", "]", ")", "\n", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "flat", ")", "\n", "return", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.get_param": [[93, 96], ["numpy.concatenate", "value.flatten", "len"], "function", ["None"], ["", "", "def", "get_param", "(", "params", ":", "Iterable", "[", "np", ".", "ndarray", "]", ")", ":", "\n", "    ", "values", "=", "[", "v", "for", "v", "in", "params", "if", "len", "(", "v", ".", "shape", ")", ">", "0", "]", "\n", "return", "np", ".", "concatenate", "(", "[", "value", ".", "flatten", "(", ")", "for", "value", "in", "values", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.main": [[98, 191], ["collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "t5.models.mtf_model.MtfModel", "gin.parse_config_file", "t5.data.get_mixture_or_task().get_vocabulary", "t5_main.get_checkpoints", "enumerate", "print", "t5_main._operative_config_path", "list", "tqdm.tqdm", "print", "int", "ckpt_ids.append", "t5_main.write_checkpoint_file", "t5.models.mtf_model.MtfModel.estimator", "t5_main.get_param_names", "t5_main.get_param_norm", "norms.append", "range", "t5_main.get_param", "range", "os.path.isdir", "os.makedirs", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "t5.data.get_mixture_or_task", "t5_main.downsample", "model.estimator.get_variable_value", "print", "print", "t5_main.filter_by_layer", "t5_main.get_param_norm", "norms_by_layer[].append", "model.estimator.get_variable_value", "t5_main.filter_by_layer", "t5_main.get_param", "dir_sims.append", "enumerate", "alignments.append", "enumerate", "range", "range", "ckpt.split", "model.estimator.get_variable_value", "model.estimator.get_variable_value", "zip", "dir_sims_by_layer[].append", "numpy.linalg.norm", "zip", "alignments_by_layer[].append", "numpy.linalg.norm", "len", "len"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.get_checkpoints", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main._operative_config_path", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.write_checkpoint_file", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.get_param_names", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.get_param_norm", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.get_param", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.downsample", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.filter_by_layer", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.get_param_norm", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.filter_by_layer", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_main.get_param"], ["", "def", "main", "(", "args", ")", ":", "\n", "# Can look at both the histogram and the norm of the weights.", "\n", "    ", "ckpt_ids", "=", "[", "]", "\n", "norms", "=", "[", "]", "\n", "norms_by_layer", "=", "defaultdict", "(", "list", ")", "\n", "\n", "last_param", ",", "param", "=", "None", ",", "None", "\n", "last_param_layer", ",", "param_layer", "=", "[", "None", "for", "_", "in", "range", "(", "12", ")", "]", ",", "[", "None", "for", "_", "in", "range", "(", "12", ")", "]", "\n", "dir_sims", "=", "[", "]", "\n", "dir_sims_by_layer", "=", "defaultdict", "(", "list", ")", "\n", "alignments", "=", "[", "]", "\n", "alignments_by_layer", "=", "defaultdict", "(", "list", ")", "\n", "\n", "model", "=", "MtfModel", "(", "f\"{PATH}/bsl-{args.n}/\"", ",", "tpu", "=", "None", ")", "\n", "gin", ".", "parse_config_file", "(", "_operative_config_path", "(", "model", ".", "_model_dir", ")", ")", "\n", "vocabulary", "=", "t5", ".", "data", ".", "get_mixture_or_task", "(", "MIXTURE_NAME", ")", ".", "get_vocabulary", "(", ")", "\n", "ckpts", "=", "get_checkpoints", "(", "model", ".", "_model_dir", ")", "\n", "if", "args", ".", "samples", "is", "not", "None", ":", "\n", "        ", "ckpts", "=", "list", "(", "downsample", "(", "ckpts", ",", "samples", "=", "args", ".", "samples", ")", ")", "\n", "\n", "", "for", "n", ",", "ckpt", "in", "enumerate", "(", "tqdm", ".", "tqdm", "(", "ckpts", ")", ")", ":", "\n", "        ", "print", "(", "f\"Starting ckpt {ckpt}...\"", ")", "\n", "ckpt_id", "=", "int", "(", "ckpt", ".", "split", "(", "\"-\"", ")", "[", "1", "]", ")", "\n", "ckpt_ids", ".", "append", "(", "ckpt_id", ")", "\n", "write_checkpoint_file", "(", "ckpt", ")", "\n", "\n", "estimator", "=", "model", ".", "estimator", "(", "vocabulary", ",", "init_checkpoint", "=", "ckpt", ")", "\n", "param_names", "=", "get_param_names", "(", "estimator", ")", "\n", "\n", "values", "=", "(", "estimator", ".", "get_variable_value", "(", "p", ")", "for", "p", "in", "param_names", ")", "\n", "norm", "=", "get_param_norm", "(", "values", ",", "normalize", "=", "False", ",", "min", "=", "args", ".", "min", ")", "\n", "norms", ".", "append", "(", "norm", ")", "\n", "\n", "if", "not", "args", ".", "min", ":", "\n", "            ", "print", "(", "f\"({n}/{len(ckpts)}) norm({ckpt_id}) = {norm:.0f}\"", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "f\"({n}/{len(ckpts)}) norm({ckpt_id}) = {norm:.10f}\"", ")", "\n", "\n", "", "for", "layer", "in", "range", "(", "12", ")", ":", "\n", "            ", "layer_params", "=", "filter_by_layer", "(", "param_names", ",", "layer", ")", "\n", "values", "=", "(", "estimator", ".", "get_variable_value", "(", "p", ")", "for", "p", "in", "layer_params", ")", "\n", "norm", "=", "get_param_norm", "(", "values", ",", "normalize", "=", "False", ",", "min", "=", "args", ".", "min", ")", "\n", "norms_by_layer", "[", "layer", "]", ".", "append", "(", "norm", ")", "\n", "\n", "", "last_param", "=", "param", "\n", "values", "=", "(", "estimator", ".", "get_variable_value", "(", "p", ")", "for", "p", "in", "param_names", ")", "\n", "param", "=", "get_param", "(", "values", ")", "\n", "for", "layer", "in", "range", "(", "12", ")", ":", "\n", "            ", "last_param_layer", "[", "layer", "]", "=", "param_layer", "[", "layer", "]", "\n", "layer_params", "=", "filter_by_layer", "(", "param_names", ",", "layer", ")", "\n", "values", "=", "(", "estimator", ".", "get_variable_value", "(", "p", ")", "for", "p", "in", "layer_params", ")", "\n", "param_layer", "[", "layer", "]", "=", "get_param", "(", "values", ")", "\n", "\n", "", "if", "last_param", "is", "not", "None", ":", "\n", "            ", "dir_sim", "=", "(", "param", "@", "last_param", ")", "/", "(", "norms", "[", "-", "1", "]", "*", "norms", "[", "-", "2", "]", ")", "\n", "dir_sims", ".", "append", "(", "dir_sim", ")", "\n", "for", "layer", ",", "(", "param_", ",", "last_param_", ")", "in", "enumerate", "(", "zip", "(", "param_layer", ",", "last_param_layer", ")", ")", ":", "\n", "                ", "norm_", "=", "norms_by_layer", "[", "layer", "]", "[", "-", "1", "]", "\n", "last_norm_", "=", "norms_by_layer", "[", "layer", "]", "[", "-", "2", "]", "\n", "dir_sim_", "=", "(", "param_", "@", "last_param_", ")", "/", "(", "norm_", "*", "last_norm_", ")", "\n", "dir_sims_by_layer", "[", "layer", "]", ".", "append", "(", "dir_sim_", ")", "\n", "\n", "", "numerator", "=", "param", "@", "last_param", "-", "norms", "[", "-", "2", "]", "*", "norms", "[", "-", "2", "]", "\n", "denominator", "=", "np", ".", "linalg", ".", "norm", "(", "param", "-", "last_param", ")", "*", "norms", "[", "-", "2", "]", "\n", "alignment", "=", "numerator", "/", "denominator", "\n", "alignments", ".", "append", "(", "alignment", ")", "\n", "for", "layer", ",", "(", "param_", ",", "last_param_", ")", "in", "enumerate", "(", "zip", "(", "param_layer", ",", "last_param_layer", ")", ")", ":", "\n", "                ", "last_norm_", "=", "norms_by_layer", "[", "layer", "]", "[", "-", "2", "]", "\n", "numerator_", "=", "param_", "@", "last_param_", "-", "last_norm_", "*", "last_norm_", "\n", "denominator_", "=", "np", ".", "linalg", ".", "norm", "(", "param_", "-", "last_norm_", ")", "*", "last_norm_", "\n", "alignment_", "=", "numerator_", "/", "denominator_", "\n", "alignments_by_layer", "[", "layer", "]", ".", "append", "(", "alignment_", ")", "\n", "\n", "# Create the path for saving data.", "\n", "", "", "", "path", "=", "f\"{PATH}/t5-deriv/norm-{args.n}\"", "if", "not", "args", ".", "min", "else", "f\"{PATH}/t5-deriv/min-{args.n}\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n", "# Save the norm data, which is expensive to compute.", "\n", "", "with", "open", "(", "f\"{path}/norms.dat\"", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "norms", ",", "fh", ")", "\n", "", "with", "open", "(", "f\"{path}/ckpts.dat\"", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "ckpt_ids", ",", "fh", ")", "\n", "", "with", "open", "(", "f\"{path}/norms_by_layer.dat\"", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "norms_by_layer", ",", "fh", ")", "\n", "\n", "# Save the cosine distance data.", "\n", "", "with", "open", "(", "f\"{path}/dir_sims.dat\"", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "dir_sims", ",", "fh", ")", "\n", "", "with", "open", "(", "f\"{path}/dir_sims_by_layer.dat\"", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "dir_sims_by_layer", ",", "fh", ")", "\n", "\n", "", "print", "(", "\"Saved all norm and dir sim data.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.grid.parse_args": [[54, 78], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "optims.keys", "list", "src.language_model.transformers.keys"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "\n", "# Wikitext-2: Largest sentence is 699 on train, 429 on test.", "\n", "# Penn: Largest sentence is 82 on train, 74 on test.", "\n", "parser", ".", "add_argument", "(", "\"--seq_len\"", ",", "type", "=", "int", ",", "default", "=", "700", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_model\"", ",", "type", "=", "int", ",", "default", "=", "768", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_ff\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_heads\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_layers\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--trans\"", ",", "type", "=", "str", ",", "default", "=", "\"vaswani\"", ",", "choices", "=", "[", "\"vaswani\"", "]", "+", "list", "(", "transformers", ".", "keys", "(", ")", ")", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--fig_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"figs/finetune-trans\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"grid-norms\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_bias\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data\"", ",", "choices", "=", "[", "\"wikitext-2\"", ",", "\"penn\"", "]", ",", "default", "=", "\"wikitext-2\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--wd_range\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr_range\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--optim\"", ",", "default", "=", "\"SGD\"", ",", "choices", "=", "optims", ".", "keys", "(", ")", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_gpus\"", ",", "type", "=", "int", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.grid.get_norm_linear": [[80, 89], ["torch.no_grad", "torch.no_grad", "torch.cat", "torch.cat", "torch.cat.mean().item", "model.modules", "lin.norm", "torch.cat.mean", "isinstance"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_norm_linear", "(", "model", ")", ":", "\n", "    ", "lins", "=", "[", "\n", "mod", ".", "weight", "\n", "for", "mod", "in", "model", ".", "modules", "(", ")", "\n", "if", "isinstance", "(", "mod", ",", "nn", ".", "Linear", ")", "and", "mod", ".", "weight", ".", "requires_grad", "\n", "]", "\n", "norms", "=", "torch", ".", "cat", "(", "[", "lin", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "0", ")", "for", "lin", "in", "lins", "]", ")", "\n", "return", "norms", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.grid.get_norm_encoder": [[91, 96], ["torch.no_grad", "torch.no_grad", "model.encoder.parameters", "torch.cat", "torch.cat", "torch.cat.norm().item", "p.flatten", "torch.cat.norm"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_norm_encoder", "(", "model", ")", ":", "\n", "    ", "params", "=", "model", ".", "encoder", ".", "parameters", "(", ")", "\n", "params", "=", "torch", ".", "cat", "(", "[", "p", ".", "flatten", "(", ")", "for", "p", "in", "params", "]", ")", "\n", "return", "params", ".", "norm", "(", "p", "=", "2", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.grid.train_model": [[98, 124], ["range", "model.train", "log.info", "torch.randperm", "torch.randperm", "tqdm.trange", "len", "train_tokens[].to", "train_mask[].to", "optimizer.zero_grad", "model", "src.loss.sequence_cross_entropy_with_logits", "src.loss.sequence_cross_entropy_with_logits.backward", "optimizer.step", "len"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.loss.sequence_cross_entropy_with_logits", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.norm_sgd.NormSGD.step"], ["", "def", "train_model", "(", "\n", "args", ",", "\n", "model", ",", "\n", "train_tokens", ",", "\n", "train_mask", ",", "\n", "optimizer", ",", "\n", "epochs", "=", "5", ",", "\n", "device", "=", "\"cuda:0\"", ",", "\n", ")", ":", "\n", "    ", "for", "e", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "log", ".", "info", "(", "f\"Starting epoch {e}...\"", ")", "\n", "perm", "=", "torch", ".", "randperm", "(", "len", "(", "train_tokens", ")", ")", "\n", "train_tokens", "=", "train_tokens", "[", "perm", ",", ":", "]", "\n", "train_mask", "=", "train_mask", "[", "perm", ",", ":", "]", "\n", "\n", "for", "b", "in", "tqdm", ".", "trange", "(", "0", ",", "len", "(", "train_tokens", ")", "-", "args", ".", "batch_size", ",", "args", ".", "batch_size", ")", ":", "\n", "            ", "batch_tokens", "=", "train_tokens", "[", "b", ":", "b", "+", "args", ".", "batch_size", "]", ".", "to", "(", "device", ")", "\n", "batch_mask", "=", "train_mask", "[", "b", ":", "b", "+", "args", ".", "batch_size", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "logits", "=", "model", "(", "batch_tokens", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "loss", "=", "sequence_cross_entropy_with_logits", "(", "\n", "logits", ",", "batch_tokens", "[", ":", ",", "1", ":", "]", ",", "batch_mask", "[", ":", ",", ":", "-", "1", "]", "\n", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.grid.wrapper": [[126, 160], ["log.info", "src.language_model.LanguageModel", "log.info", "model.to.to", "collections.defaultdict", "norms[].append", "norms[].append", "log.info", "grid.train_model", "norms[].append", "norms[].append", "grid.get_norm_linear", "grid.get_norm_encoder", "torch.optim", "grid.get_norm_linear", "grid.get_norm_encoder", "model.to.parameters", "torch.optim"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.train_model", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.grid.get_norm_linear", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.grid.get_norm_encoder", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.grid.get_norm_linear", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.grid.get_norm_encoder"], ["", "", "", "def", "wrapper", "(", "optim", ",", "lr", ",", "wd", ",", "device", ",", "tokenizer", ",", "train_tokens", ",", "train_mask", ")", ":", "\n", "    ", "log", ".", "info", "(", "\"Creating model...\"", ")", "\n", "model", "=", "LanguageModel", "(", "\n", "d_model", "=", "args", ".", "d_model", ",", "\n", "d_ff", "=", "args", ".", "d_ff", ",", "\n", "d_vocab", "=", "tokenizer", ".", "d_vocab", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "n_heads", "=", "args", ".", "n_heads", ",", "\n", "n_layers", "=", "args", ".", "n_layers", ",", "\n", "encoder_type", "=", "args", ".", "trans", ",", "\n", "bias", "=", "not", "args", ".", "no_bias", ",", "\n", ")", "\n", "\n", "log", ".", "info", "(", "f\"Moving model to {device}.\"", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "norms", "=", "defaultdict", "(", "list", ")", "\n", "norms", "[", "\"linear\"", "]", ".", "append", "(", "get_norm_linear", "(", "model", ")", ")", "\n", "norms", "[", "\"encoder\"", "]", ".", "append", "(", "get_norm_encoder", "(", "model", ")", ")", "\n", "\n", "log", ".", "info", "(", "f\"Start training on {device}...\"", ")", "\n", "train_model", "(", "\n", "args", ",", "\n", "model", ",", "\n", "train_tokens", ",", "\n", "train_mask", ",", "\n", "optim", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "wd", ")", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", "device", "=", "device", ",", "\n", ")", "\n", "\n", "norms", "[", "\"linear\"", "]", ".", "append", "(", "get_norm_linear", "(", "model", ")", ")", "\n", "norms", "[", "\"encoder\"", "]", ".", "append", "(", "get_norm_encoder", "(", "model", ")", ")", "\n", "return", "norms", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.grid.run_exp": [[162, 197], ["src.tokenizer.Tokenizer", "log.info", "list", "src.utils.pad_sequence_to_len", "src.utils.get_mask().float", "max", "log.info", "src.tokenizer.Tokenizer.gen_tokens", "in_queue.empty", "time.time", "grid.wrapper", "os.path.join", "src.utils.get_mask", "len", "in_queue.get", "os.path.isdir", "os.makedirs", "open", "pickle.dump", "open", "f.write", "str", "time.time"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.pad_sequence_to_len", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.gen_tokens", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.grid.wrapper", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.get_mask"], ["", "def", "run_exp", "(", "gpu_num", ",", "in_queue", ")", ":", "\n", "# It seems like thread locking or something, gross.", "\n", "    ", "tokenizer", "=", "Tokenizer", "(", ")", "\n", "log", ".", "info", "(", "f\"Loading train data from {PATH}/{args.data}/train.txt...\"", ")", "\n", "raw_train", "=", "list", "(", "tokenizer", ".", "gen_tokens", "(", "f\"{PATH}/{args.data}/train.txt\"", ")", ")", "\n", "train_tokens", "=", "pad_sequence_to_len", "(", "raw_train", ",", "args", ".", "seq_len", ")", "\n", "train_mask", "=", "get_mask", "(", "raw_train", ",", "args", ".", "seq_len", ")", ".", "float", "(", ")", "\n", "train_len", "=", "max", "(", "len", "(", "s", ")", "for", "s", "in", "raw_train", ")", "\n", "assert", "train_len", "<=", "args", ".", "seq_len", "\n", "log", ".", "info", "(", "f\"Max train sentence length is {train_len} (<= {args.seq_len}).\"", ")", "\n", "\n", "while", "not", "in_queue", ".", "empty", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "experiment", "=", "in_queue", ".", "get", "(", "timeout", "=", "3", ")", "\n", "", "except", ":", "\n", "            ", "return", "\n", "", "before", "=", "time", ".", "time", "(", ")", "\n", "\n", "optim", "=", "experiment", "[", "\"optim\"", "]", "\n", "lr", "=", "experiment", "[", "\"lr\"", "]", "\n", "wd", "=", "experiment", "[", "\"wd\"", "]", "\n", "device", "=", "f\"cuda:{gpu_num}\"", "\n", "\n", "norms", "=", "wrapper", "(", "optim", ",", "lr", ",", "wd", ",", "device", ",", "tokenizer", ",", "train_tokens", ",", "train_mask", ")", "\n", "name", "=", "f\"{optim.__name__}-lr={lr}-wd={wd}.dat\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "SAVE", ",", "name", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "SAVE", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "SAVE", ")", "\n", "", "with", "open", "(", "path", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "            ", "pickle", ".", "dump", "(", "norms", ",", "fh", ")", "\n", "\n", "", "with", "open", "(", "\"output.txt\"", ",", "\"a+\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "\n", "\"Finished experiment {} in {}.\\n\"", ".", "format", "(", "\n", "experiment", ",", "str", "(", "(", "time", ".", "time", "(", ")", "-", "before", ")", "/", "60.0", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.grid.main": [[201, 225], ["gpus.extend", "numpy.logspace", "numpy.logspace", "itertools.product", "rich.print", "multiprocessing.Queue", "str", "experiments.append", "multiprocessing.Queue.put", "multiprocessing.Process", "multiprocessing.Process.start", "processes.append", "multiprocessing.Process.join", "range"], "function", ["None"], ["", "", "", "def", "main", "(", ")", ":", "\n", "    ", "gpus", "=", "[", "str", "(", "x", ")", "for", "x", "in", "range", "(", "args", ".", "n_gpus", ")", "]", "\n", "gpus", ".", "extend", "(", "gpus", ")", "\n", "\n", "optim", "=", "optims", "[", "args", ".", "optim", "]", "\n", "# optims = [torch.optim.SGD, torch.optim.AdamW]", "\n", "lrs", "=", "np", ".", "logspace", "(", "1", ",", "args", ".", "lr_range", ",", "base", "=", ".1", ",", "num", "=", "20", ")", "\n", "wds", "=", "np", ".", "logspace", "(", "1", ",", "args", ".", "wd_range", ",", "base", "=", ".1", ",", "num", "=", "20", ")", "\n", "\n", "experiments", "=", "[", "]", "\n", "for", "optim", ",", "lr", ",", "wd", "in", "product", "(", "[", "optim", "]", ",", "lrs", ",", "wds", ")", ":", "\n", "        ", "experiments", ".", "append", "(", "{", "\"optim\"", ":", "optim", ",", "\"lr\"", ":", "lr", ",", "\"wd\"", ":", "wd", "}", ")", "\n", "", "print", "(", "experiments", ")", "\n", "\n", "queue", "=", "Queue", "(", ")", "\n", "for", "e", "in", "experiments", ":", "\n", "        ", "queue", ".", "put", "(", "e", ")", "\n", "", "processes", "=", "[", "]", "\n", "for", "gpu", "in", "gpus", ":", "\n", "        ", "p", "=", "Process", "(", "target", "=", "run_exp", ",", "args", "=", "(", "gpu", ",", "queue", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "", "for", "p", "in", "processes", ":", "\n", "        ", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.plot_grid_v2.parse_args": [[14, 19], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--optim\"", ",", "default", "=", "\"SGD\"", ",", "choices", "=", "[", "\"SGD\"", ",", "\"AdamW\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"grid-norms\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.plot_trans_scale.parse_args": [[19, 31], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_model\"", ",", "type", "=", "int", ",", "default", "=", "768", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_ff\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_heads\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_layers\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--fig_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"figs/trans-scale\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seq_len\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_sents\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_vocab\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.plot_trans_scale.main": [[33, 88], ["random.seed", "torch.randint", "numpy.linspace", "collections.defaultdict", "tqdm.tqdm", "tqdm.tqdm.close", "matplotlib.rcParams.update", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.tight_layout", "matplotlib.savefig", "rich.print", "os.path.isdir", "os.makedirs", "src.language_model.LanguageModel", "src.saturate.saturate", "src.language_model.LanguageModel.", "sat_encodings.flatten.flatten", "tqdm.tqdm.update", "results[].append", "tqdm.tqdm.update", "len", "len", "len", "src.saturate.saturate", "src.language_model.LanguageModel.", "encodings.flatten.flatten", "sim.item", "encodings.flatten.norm", "sat_encodings.flatten.norm"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.Avg.update", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.Avg.update", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.Avg.update"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "sents", "=", "torch", ".", "randint", "(", "high", "=", "args", ".", "d_vocab", ",", "size", "=", "[", "args", ".", "n_sents", ",", "args", ".", "seq_len", "]", ")", "\n", "\n", "encoders", "=", "[", "\"pre_norm\"", ",", "\"control\"", "]", "\n", "biases", "=", "[", "True", ",", "False", "]", "\n", "scales", "=", "np", ".", "linspace", "(", "1", ",", "10", ",", "20", ")", "\n", "results", "=", "defaultdict", "(", "list", ")", "\n", "prog", "=", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "encoders", ")", "*", "len", "(", "biases", ")", "*", "(", "len", "(", "scales", ")", "+", "1", ")", ")", "\n", "for", "encoder", "in", "encoders", ":", "\n", "        ", "for", "bias", "in", "biases", ":", "\n", "            ", "model", "=", "LanguageModel", "(", "\n", "d_model", "=", "args", ".", "d_model", ",", "\n", "d_ff", "=", "args", ".", "d_ff", ",", "\n", "d_vocab", "=", "args", ".", "d_vocab", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "n_heads", "=", "args", ".", "n_heads", ",", "\n", "n_layers", "=", "args", ".", "n_layers", ",", "\n", "encoder_type", "=", "encoder", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "with", "saturate", "(", "model", ")", ":", "\n", "                ", "sat_encodings", ",", "_", "=", "model", "(", "sents", ")", "\n", "sat_encodings", "=", "sat_encodings", ".", "flatten", "(", ")", "\n", "prog", ".", "update", "(", ")", "\n", "\n", "", "for", "scale", "in", "scales", ":", "\n", "                ", "with", "saturate", "(", "model", ",", "infinity", "=", "scale", ")", ":", "\n", "                    ", "encodings", ",", "_", "=", "model", "(", "sents", ")", "\n", "encodings", "=", "encodings", ".", "flatten", "(", ")", "\n", "", "sim", "=", "encodings", "@", "sat_encodings", "/", "(", "encodings", ".", "norm", "(", "p", "=", "2", ")", "*", "sat_encodings", ".", "norm", "(", "p", "=", "2", ")", ")", "\n", "results", "[", "encoder", ",", "bias", "]", ".", "append", "(", "sim", ".", "item", "(", ")", ")", "\n", "prog", ".", "update", "(", ")", "\n", "", "", "", "prog", ".", "close", "(", ")", "\n", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "\n", "\"axes.titlesize\"", ":", "\"large\"", ",", "\n", "\"axes.labelsize\"", ":", "\"large\"", ",", "\n", "\"legend.fontsize\"", ":", "\"large\"", ",", "\n", "}", ")", "\n", "plt", ".", "plot", "(", "scales", ",", "results", "[", "\"pre_norm\"", ",", "False", "]", ",", "color", "=", "\"orange\"", ",", "label", "=", "\"Pre-norm\"", ")", "\n", "plt", ".", "plot", "(", "scales", ",", "results", "[", "\"pre_norm\"", ",", "True", "]", ",", "color", "=", "\"orange\"", ",", "linestyle", "=", "\"dashed\"", ",", "label", "=", "\"Pre-norm (+bias)\"", ")", "\n", "plt", ".", "plot", "(", "scales", ",", "results", "[", "\"control\"", ",", "False", "]", ",", "color", "=", "\"blue\"", ",", "label", "=", "\"Post-norm\"", ")", "\n", "plt", ".", "plot", "(", "scales", ",", "results", "[", "\"control\"", ",", "True", "]", ",", "color", "=", "\"blue\"", ",", "linestyle", "=", "\"dashed\"", ",", "label", "=", "\"Post-norm (+bias)\"", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "title", "(", "\"Scaling curves for transformer variants\"", ")", "\n", "plt", ".", "xlabel", "(", "R\"Scaling factor $c$\"", ")", "\n", "plt", ".", "ylabel", "(", "R\"Cosine similarity to sat. transformer\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "args", ".", "fig_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "fig_dir", ")", "\n", "", "path", "=", "f\"{args.fig_dir}/scales.pdf\"", "\n", "plt", ".", "savefig", "(", "path", ")", "\n", "print", "(", "f\"[green]=>[/green] Saved {path}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_norm_regression.parse_args": [[13, 21], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--format\"", ",", "choices", "=", "[", "\"png\"", ",", "\"pdf\"", "]", ",", "default", "=", "\"pdf\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--small_font\"", ",", "type", "=", "int", ",", "default", "=", "14", ")", "\n", "parser", ".", "add_argument", "(", "\"--large_font\"", ",", "type", "=", "int", ",", "default", "=", "18", ")", "\n", "parser", ".", "add_argument", "(", "\"-n\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--min\"", ",", "action", "=", "\"store_true\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.t5_norm_regression.regress": [[34, 38], ["sklearn.linear_model.LinearRegression", "sklearn.linear_model.LinearRegression.fit", "sklearn.linear_model.LinearRegression.score"], "function", ["None"], ["", "def", "regress", "(", "x", ",", "y", ")", ":", "\n", "    ", "reg", "=", "LinearRegression", "(", ")", "\n", "reg", ".", "fit", "(", "x", ",", "y", ")", "\n", "return", "reg", ".", "score", "(", "x", ",", "y", ")", ",", "reg", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.plot_grid.parse_args": [[15, 20], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--optim\"", ",", "default", "=", "\"SGD\"", ",", "choices", "=", "[", "\"SGD\"", ",", "\"AdamW\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"grid-norms\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.finetune_trans.parse_args": [[57, 86], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "optims.keys", "list", "src.language_model.transformers.keys"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "\"--dev_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--half\"", ",", "action", "=", "\"store_true\"", ")", "\n", "# Wikitext-2: Largest sentence is 699 on train, 429 on test.", "\n", "# Penn: Largest sentence is 82 on train, 74 on test.", "\n", "parser", ".", "add_argument", "(", "\"--seq_len\"", ",", "type", "=", "int", ",", "default", "=", "700", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_model\"", ",", "type", "=", "int", ",", "default", "=", "768", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_ff\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_heads\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_layers\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-2", ")", "\n", "parser", ".", "add_argument", "(", "\"--fine_lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-1", ")", "\n", "parser", ".", "add_argument", "(", "\"--pre_epochs\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--fine_epochs\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--trans\"", ",", "type", "=", "str", ",", "default", "=", "\"vaswani\"", ",", "choices", "=", "[", "\"vaswani\"", "]", "+", "list", "(", "transformers", ".", "keys", "(", ")", ")", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--fig_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"figs/finetune-trans\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "type", "=", "str", ",", "default", "=", "f\"{MODELS}/finetune-trans\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_bias\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data\"", ",", "choices", "=", "[", "\"wikitext-2\"", ",", "\"penn\"", "]", ",", "default", "=", "\"wikitext-2\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--optim\"", ",", "choices", "=", "optims", ".", "keys", "(", ")", ",", "default", "=", "\"adamw\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sched\"", ",", "choices", "=", "[", "\"constant_lr\"", ",", "\"linear_lr\"", ",", "\"sqrt_lr\"", "]", ",", "default", "=", "\"constant_lr\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--stop_iteration\"", ",", "type", "=", "int", ",", "default", "=", "1000", ")", "# End of constant LR warmup", "\n", "parser", ".", "add_argument", "(", "\"--batch_metrics\"", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.finetune_trans.get_norm": [[88, 94], ["torch.no_grad", "torch.no_grad", "torch.cat().norm", "torch.cat().norm", "model.parameters", "torch.cat", "torch.cat", "len", "p.flatten"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_norm", "(", "model", ")", ":", "\n", "# Use the same norm as for T5.", "\n", "    ", "params", "=", "[", "p", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "params", "=", "[", "p", "for", "p", "in", "params", "if", "len", "(", "p", ".", "shape", ")", ">", "0", "]", "\n", "return", "torch", ".", "cat", "(", "[", "p", ".", "flatten", "(", ")", "for", "p", "in", "params", "]", ")", ".", "norm", "(", "p", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.finetune_trans.get_saturation": [[107, 115], ["torch.no_grad", "torch.no_grad", "torch.einsum", "torch.einsum", "soft.norm", "hard_callback.norm", "src.saturate.saturate", "hard_callback"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_saturation", "(", "soft", ",", "model", ",", "hard_callback", ")", ":", "\n", "    ", "with", "saturate", "(", "model", ")", ":", "\n", "        ", "hard", "=", "hard_callback", "(", ")", "\n", "", "prod", "=", "torch", ".", "einsum", "(", "\"bti, bti -> bt\"", ",", "soft", ",", "hard", ")", "\n", "soft_norm", "=", "soft", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "hard_norm", "=", "hard", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "return", "prod", "/", "(", "soft_norm", "*", "hard_norm", "+", "1e-9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.finetune_trans.get_projection": [[117, 124], ["torch.autograd.grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "loss.sum", "p.flatten", "g.flatten", "torch.cat.norm", "torch.cat.norm"], "function", ["None"], ["", "def", "get_projection", "(", "loss", ",", "params", ")", ":", "\n", "    ", "grads", "=", "grad", "(", "loss", ".", "sum", "(", ")", ",", "params", ")", "\n", "params", "=", "torch", ".", "cat", "(", "[", "p", ".", "flatten", "(", ")", "for", "p", "in", "params", "]", ")", "\n", "grads", "=", "torch", ".", "cat", "(", "[", "g", ".", "flatten", "(", ")", "for", "g", "in", "grads", "]", ")", "\n", "proj", "=", "params", ".", "T", "@", "grads", "\n", "proj_sim", "=", "proj", "/", "(", "params", ".", "norm", "(", "p", "=", "2", ")", "*", "grads", ".", "norm", "(", "p", "=", "2", ")", "+", "1e-9", ")", "\n", "return", "proj", ",", "proj_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.finetune_trans.get_metrics": [[126, 172], ["torch.no_grad", "torch.no_grad", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.pow", "torch.pow", "dev_mask[].sum", "len", "dev_tokens[].to", "dev_mask[].to", "model", "src.loss.sequence_cross_entropy_with_logits", "dev_logits.argmax", "finetune_trans.get_saturation", "torch.cat.append", "torch.cat.append", "torch.cat.append", "get_norm().item", "torch.cat.mean().item", "torch.pow.mean().item", "src.loss.sequence_cross_entropy_with_logits.cpu", "agreement.cpu", "get_saturation.cpu", "dev_batch_mask[].unsqueeze", "finetune_trans.get_norm", "torch.cat.mean", "torch.pow.mean", "dev_batch_mask[].unsqueeze", "torch.cat.sum", "torch.cat.sum", "model"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.loss.sequence_cross_entropy_with_logits", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.get_saturation", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.get_norm"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_metrics", "(", "args", ",", "model", ",", "dev_tokens", ",", "dev_mask", ",", "device", "=", "\"cuda:0\"", ")", ":", "\n", "    ", "all_agreement", "=", "[", "]", "\n", "all_saturation", "=", "[", "]", "\n", "all_loss", "=", "[", "]", "\n", "all_proj", "=", "0.", "\n", "all_proj_sim", "=", "0.", "\n", "# In this loop, we iterate over the full dev set, including the small bit at the end.", "\n", "for", "b", "in", "range", "(", "0", ",", "len", "(", "dev_tokens", ")", ",", "args", ".", "dev_batch_size", ")", ":", "\n", "        ", "dev_batch_tokens", "=", "dev_tokens", "[", "b", ":", "b", "+", "args", ".", "dev_batch_size", "]", ".", "to", "(", "device", ")", "\n", "dev_batch_mask", "=", "dev_mask", "[", "b", ":", "b", "+", "args", ".", "dev_batch_size", "]", ".", "to", "(", "device", ")", "\n", "dev_encoding", ",", "dev_logits", "=", "model", "(", "dev_batch_tokens", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "dev_loss", "=", "sequence_cross_entropy_with_logits", "(", "\n", "dev_logits", ",", "dev_batch_tokens", "[", ":", ",", "1", ":", "]", ",", "dev_batch_mask", "[", ":", ",", ":", "-", "1", "]", ",", "average", "=", "None", "\n", ")", "\n", "dev_preds", "=", "dev_logits", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "agreement", "=", "(", "dev_preds", "==", "dev_batch_tokens", "[", ":", ",", "1", ":", "]", ")", ".", "float", "(", ")", "*", "dev_batch_mask", "[", "\n", ":", ",", ":", "-", "1", "\n", "]", "\n", "saturation", "=", "get_saturation", "(", "\n", "dev_encoding", "*", "dev_batch_mask", "[", ":", ",", ":", "-", "1", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ",", "\n", "model", ",", "\n", "lambda", ":", "model", "(", "dev_batch_tokens", "[", ":", ",", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "*", "dev_batch_mask", "[", ":", ",", ":", "-", "1", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ",", "\n", ")", "\n", "# With multiple devices, this doesn't work. Also can turn on no_grad when we don't do this.", "\n", "# proj, proj_sim = get_projection(dev_loss, [p for p in model.parameters() if p.requires_grad])", "\n", "\n", "all_loss", ".", "append", "(", "dev_loss", ".", "cpu", "(", ")", ")", "\n", "all_agreement", ".", "append", "(", "agreement", ".", "cpu", "(", ")", ")", "\n", "all_saturation", ".", "append", "(", "saturation", ".", "cpu", "(", ")", ")", "\n", "# all_proj += proj.item()", "\n", "# all_proj_sim += proj_sim.item()", "\n", "\n", "", "all_loss", "=", "torch", ".", "cat", "(", "all_loss", ",", "dim", "=", "0", ")", "\n", "all_agreement", "=", "torch", ".", "cat", "(", "all_agreement", ",", "dim", "=", "0", ")", "\n", "all_saturation", "=", "torch", ".", "cat", "(", "all_saturation", ",", "dim", "=", "0", ")", "\n", "all_perps", "=", "torch", ".", "pow", "(", "2", ",", "all_loss", ")", "\n", "numel", "=", "dev_mask", "[", ":", ",", ":", "-", "1", "]", ".", "sum", "(", ")", "\n", "\n", "return", "{", "\n", "\"acc1\"", ":", "(", "all_agreement", ".", "sum", "(", ")", "/", "numel", ")", ".", "item", "(", ")", ",", "\n", "\"norm\"", ":", "get_norm", "(", "model", ")", ".", "item", "(", ")", ",", "\n", "\"loss\"", ":", "all_loss", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "\"pplx\"", ":", "all_perps", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "\"sat\"", ":", "(", "all_saturation", ".", "sum", "(", ")", "/", "numel", ")", ".", "item", "(", ")", ",", "\n", "# \"proj\": all_proj / len(dev_tokens),", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.finetune_trans.train_model": [[177, 247], ["collections.defaultdict", "collections.defaultdict", "float", "range", "finetune_trans.get_metrics", "get_metrics.items", "rich.print", "schedulers.get_policy", "model.train", "log.info", "torch.randperm", "torch.randperm", "tqdm.trange", "model.eval", "finetune_trans.get_metrics", "get_metrics.items", "rich.print", "timeseries[].append", "len", "lr_adjuster", "tqdm.tqdm.write", "train_tokens[].to", "train_mask[].to", "optimizer.zero_grad", "model", "src.loss.sequence_cross_entropy_with_logits", "src.loss.sequence_cross_entropy_with_logits.backward", "optimizer.step", "timeseries[].append", "os.path.join", "os.path.join", "torch.save", "torch.save", "len", "get_norm().item", "batch_timeseries[].append", "batch_timeseries[].append", "batch_timeseries[].append", "model.state_dict", "finetune_trans.get_norm"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.get_metrics", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.schedulers.get_policy", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.get_metrics", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.loss.sequence_cross_entropy_with_logits", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.norm_sgd.NormSGD.step", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.get_norm"], ["", "def", "train_model", "(", "\n", "args", ",", "\n", "model", ",", "\n", "train_tokens", ",", "\n", "train_mask", ",", "\n", "dev_tokens", ",", "\n", "dev_mask", ",", "\n", "optimizer", ",", "\n", "epochs", "=", "10", ",", "\n", "record_init", "=", "False", ",", "\n", "device", "=", "\"cuda:0\"", ",", "\n", "scheduler", ":", "str", "=", "None", ",", "\n", "max_iterations", "=", "None", ",", "\n", ")", ":", "\n", "    ", "batch_timeseries", "=", "defaultdict", "(", "list", ")", "\n", "timeseries", "=", "defaultdict", "(", "list", ")", "\n", "if", "record_init", ":", "\n", "        ", "metrics", "=", "get_metrics", "(", "args", ",", "model", ",", "dev_tokens", ",", "dev_mask", ")", "\n", "for", "name", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "timeseries", "[", "name", "]", ".", "append", "(", "value", ")", "\n", "", "print", "(", "metrics", ")", "\n", "\n", "", "best_loss", "=", "float", "(", "\"inf\"", ")", "\n", "\n", "lr_adjuster", "=", "get_policy", "(", "scheduler", ")", "(", "optimizer", ",", "args", ",", "max_iterations", "=", "max_iterations", ")", "\n", "\n", "iteration", "=", "0", "\n", "for", "e", "in", "range", "(", "epochs", ")", ":", "\n", "\n", "        ", "model", ".", "train", "(", ")", "\n", "log", ".", "info", "(", "f\"Starting epoch {e}...\"", ")", "\n", "perm", "=", "torch", ".", "randperm", "(", "len", "(", "train_tokens", ")", ")", "\n", "train_tokens", "=", "train_tokens", "[", "perm", ",", ":", "]", "\n", "train_mask", "=", "train_mask", "[", "perm", ",", ":", "]", "\n", "\n", "for", "b", "in", "tqdm", ".", "trange", "(", "0", ",", "len", "(", "train_tokens", ")", "-", "args", ".", "batch_size", ",", "args", ".", "batch_size", ")", ":", "\n", "            ", "cur_lr", "=", "lr_adjuster", "(", "e", ",", "iteration", ")", "\n", "\n", "if", "args", ".", "batch_metrics", "is", "not", "None", "and", "iteration", "%", "args", ".", "batch_metrics", "==", "0", ":", "\n", "                ", "norm", "=", "get_norm", "(", "model", ")", ".", "item", "(", ")", "\n", "batch_timeseries", "[", "\"step\"", "]", ".", "append", "(", "iteration", ")", "\n", "batch_timeseries", "[", "\"norm\"", "]", ".", "append", "(", "norm", ")", "\n", "batch_timeseries", "[", "\"lr\"", "]", ".", "append", "(", "cur_lr", ")", "\n", "\n", "", "tqdm", ".", "tqdm", ".", "write", "(", "f\"i={iteration}, lr={cur_lr}\"", ",", "end", "=", "\"\\r\"", ")", "\n", "batch_tokens", "=", "train_tokens", "[", "b", ":", "b", "+", "args", ".", "batch_size", "]", ".", "to", "(", "device", ")", "\n", "batch_mask", "=", "train_mask", "[", "b", ":", "b", "+", "args", ".", "batch_size", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "logits", "=", "model", "(", "batch_tokens", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "loss", "=", "sequence_cross_entropy_with_logits", "(", "\n", "logits", ",", "batch_tokens", "[", ":", ",", "1", ":", "]", ",", "batch_mask", "[", ":", ",", ":", "-", "1", "]", "\n", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "iteration", "+=", "1", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "metrics", "=", "get_metrics", "(", "args", ",", "model", ",", "dev_tokens", ",", "dev_mask", ",", "device", "=", "device", ")", "\n", "for", "name", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "timeseries", "[", "name", "]", ".", "append", "(", "value", ")", "\n", "", "print", "(", "metrics", ")", "\n", "\n", "# Save the model checkpoint if this is the best performance yet.", "\n", "if", "metrics", "[", "\"loss\"", "]", "<", "best_loss", ":", "\n", "            ", "best_loss", "=", "metrics", "[", "\"loss\"", "]", "\n", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "args", ".", "data", ")", "\n", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "args", ".", "trans", "+", "\".pt\"", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_path", ")", "\n", "\n", "", "", "return", "timeseries", ",", "batch_timeseries", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.finetune_trans.main": [[249, 357], ["torch.device", "torch.device", "src.tokenizer.Tokenizer", "log.info", "list", "src.utils.pad_sequence_to_len", "src.utils.get_mask().float", "max", "log.info", "log.info", "list", "src.utils.pad_sequence_to_len", "src.utils.get_mask().float", "max", "log.info", "src.language_model.LanguageModel", "model.half.to", "finetune_trans.train_model", "finetune_trans.train_model", "copy.deepcopy", "all_series[].items", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.save", "torch.save", "os.path.join", "all_series[].items", "src.tokenizer.Tokenizer.gen_tokens", "src.tokenizer.Tokenizer.gen_tokens", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "model.half.half", "opt", "src.norm_sgd.NormSGD", "[].extend", "os.path.isdir", "os.makedirs", "open", "pickle.dump", "open", "pickle.dump", "model.half.state_dict", "os.path.isdir", "os.makedirs", "matplotlib.figure", "matplotlib.plot", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "torch.cuda.is_available", "torch.cuda.is_available", "src.utils.get_mask", "len", "src.utils.get_mask", "len", "len", "model.half.parameters", "model.half.parameters", "len", "min", "max", "matplotlib.plot", "len"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.pad_sequence_to_len", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.pad_sequence_to_len", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.train_model", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.train_model", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.gen_tokens", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.gen_tokens", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.get_mask", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.get_mask"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "all_series", "=", "{", "}", "\n", "tokenizer", "=", "Tokenizer", "(", ")", "\n", "\n", "# TODO: Added this in utils.", "\n", "log", ".", "info", "(", "f\"Loading train data from {PATH}/{args.data}/train.txt...\"", ")", "\n", "raw_train", "=", "list", "(", "tokenizer", ".", "gen_tokens", "(", "f\"{PATH}/{args.data}/train.txt\"", ")", ")", "\n", "train_tokens", "=", "pad_sequence_to_len", "(", "raw_train", ",", "args", ".", "seq_len", ")", "\n", "train_mask", "=", "get_mask", "(", "raw_train", ",", "args", ".", "seq_len", ")", ".", "float", "(", ")", "\n", "train_len", "=", "max", "(", "len", "(", "s", ")", "for", "s", "in", "raw_train", ")", "\n", "assert", "train_len", "<=", "args", ".", "seq_len", "\n", "log", ".", "info", "(", "f\"Max train sentence length is {train_len} (<= {args.seq_len}).\"", ")", "\n", "\n", "log", ".", "info", "(", "f\"Loading dev data from {PATH}/{args.data}/valid.txt...\"", ")", "\n", "raw_dev", "=", "list", "(", "tokenizer", ".", "gen_tokens", "(", "f\"{PATH}/{args.data}/valid.txt\"", ")", ")", "\n", "dev_tokens", "=", "pad_sequence_to_len", "(", "raw_dev", ",", "args", ".", "seq_len", ")", "\n", "dev_mask", "=", "get_mask", "(", "raw_dev", ",", "args", ".", "seq_len", ")", ".", "float", "(", ")", "\n", "dev_len", "=", "max", "(", "len", "(", "s", ")", "for", "s", "in", "raw_dev", ")", "\n", "assert", "dev_len", "<=", "args", ".", "seq_len", "\n", "log", ".", "info", "(", "f\"Max dev sentence length is {dev_len} (<= {args.seq_len}).\"", ")", "\n", "\n", "# Maximum number of training steps, used for linearly decaying learning rate schedule.", "\n", "max_iterations", "=", "len", "(", "raw_train", ")", "//", "args", ".", "batch_size", "*", "args", ".", "pre_epochs", "\n", "\n", "model", "=", "LanguageModel", "(", "\n", "d_model", "=", "args", ".", "d_model", ",", "\n", "d_ff", "=", "args", ".", "d_ff", ",", "\n", "d_vocab", "=", "tokenizer", ".", "d_vocab", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "n_heads", "=", "args", ".", "n_heads", ",", "\n", "n_layers", "=", "args", ".", "n_layers", ",", "\n", "encoder_type", "=", "args", ".", "trans", ",", "\n", "bias", "=", "not", "args", ".", "no_bias", ",", "\n", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "# model = nn.DataParallel(model, device_ids=list(range(args.gpus)))", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "half", ":", "\n", "        ", "model", "=", "model", ".", "half", "(", ")", "\n", "\n", "", "opt", "=", "optims", "[", "args", ".", "optim", "]", "\n", "\n", "all_series", "[", "\"pre\"", "]", ",", "batch_data", "=", "train_model", "(", "\n", "args", ",", "\n", "model", ",", "\n", "train_tokens", ",", "\n", "train_mask", ",", "\n", "dev_tokens", ",", "\n", "dev_mask", ",", "\n", "opt", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", ",", "\n", "epochs", "=", "args", ".", "pre_epochs", ",", "\n", "record_init", "=", "True", ",", "\n", "scheduler", "=", "args", ".", "sched", ",", "\n", "max_iterations", "=", "max_iterations", ",", "\n", ")", "\n", "# TODO: Should we try varying the learning rate from this checkpoint?", "\n", "all_series", "[", "\"fine\"", "]", ",", "batch_data_fine", "=", "train_model", "(", "\n", "args", ",", "\n", "model", ",", "\n", "train_tokens", ",", "\n", "train_mask", ",", "\n", "dev_tokens", ",", "\n", "dev_mask", ",", "\n", "NormSGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "fine_lr", ")", ",", "\n", "epochs", "=", "args", ".", "fine_epochs", ",", "\n", ")", "\n", "\n", "all_series", "[", "\"all\"", "]", "=", "deepcopy", "(", "all_series", "[", "\"pre\"", "]", ")", "\n", "for", "metric", ",", "series", "in", "all_series", "[", "\"fine\"", "]", ".", "items", "(", ")", ":", "\n", "        ", "all_series", "[", "\"all\"", "]", "[", "metric", "]", ".", "extend", "(", "series", ")", "\n", "\n", "", "data_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "args", ".", "data", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "data_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "data_dir", ")", "\n", "", "filename", "=", "f\"{args.trans}-{args.optim}-{args.sched}\"", "\n", "\n", "data_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "filename", "+", "\".dat\"", ")", "\n", "with", "open", "(", "data_path", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "all_series", ",", "fh", ")", "\n", "\n", "", "data_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "f\"{filename}-batch_data.dat\"", ")", "\n", "with", "open", "(", "data_path", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "batch_data", ",", "fh", ")", "\n", "\n", "", "ckpt_path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "f\"{filename}.pt\"", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "ckpt_path", ")", "\n", "\n", "fig_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "fig_dir", ",", "args", ".", "data", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "fig_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "fig_dir", ")", "\n", "\n", "", "for", "metric", ",", "values", "in", "all_series", "[", "\"all\"", "]", ".", "items", "(", ")", ":", "\n", "        ", "plt", ".", "figure", "(", ")", "\n", "minval", ",", "maxval", "=", "None", ",", "None", "\n", "plt", ".", "plot", "(", "values", ")", "\n", "if", "len", "(", "all_series", "[", "\"fine\"", "]", "[", "metric", "]", ")", ">", "0", ":", "\n", "            ", "min_val", "=", "min", "(", "values", ")", "\n", "max_val", "=", "max", "(", "values", ")", "\n", "split", "=", "len", "(", "all_series", "[", "\"pre\"", "]", "[", "metric", "]", ")", "-", "1", "\n", "plt", ".", "plot", "(", "[", "split", ",", "split", "]", ",", "[", "min_val", ",", "max_val", "]", ",", "\"k-\"", ",", "lw", "=", "2", ")", "\n", "", "plt", ".", "title", "(", "f\"dev {metric} over training\"", ")", "\n", "plt", ".", "xlabel", "(", "\"epoch\"", ")", "\n", "plt", ".", "ylabel", "(", "metric", ")", "\n", "plt", ".", "savefig", "(", "f\"{fig_dir}/{metric}.pdf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.test_ppl.parse_args": [[34, 57], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "list", "src.language_model.transformers.keys"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "\"--dev_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--half\"", ",", "action", "=", "\"store_true\"", ")", "\n", "# Wikitext-2: Largest sentence is 699 on train, 429 on test.", "\n", "# Penn: Largest sentence is 82 on train, 74 on test.", "\n", "parser", ".", "add_argument", "(", "\"--seq_len\"", ",", "type", "=", "int", ",", "default", "=", "700", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_model\"", ",", "type", "=", "int", ",", "default", "=", "768", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_ff\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_heads\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_layers\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--fine_lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-1", ")", "\n", "parser", ".", "add_argument", "(", "\"--pre_epochs\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--fine_epochs\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--trans\"", ",", "type", "=", "str", ",", "default", "=", "\"vaswani\"", ",", "choices", "=", "[", "\"vaswani\"", "]", "+", "list", "(", "transformers", ".", "keys", "(", ")", ")", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--fig_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"figs/finetune-trans\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "type", "=", "str", ",", "default", "=", "f\"{MODELS}/finetune-trans\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_bias\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data\"", ",", "choices", "=", "[", "\"wikitext-2\"", ",", "\"penn\"", "]", ",", "default", "=", "\"wikitext-2\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.test_ppl.get_norm": [[59, 68], ["torch.no_grad", "torch.cat", "torch.cat.mean", "model.modules", "lin.norm", "isinstance"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_norm", "(", "model", ")", ":", "\n", "    ", "lins", "=", "[", "\n", "mod", ".", "weight", "\n", "for", "mod", "in", "model", ".", "modules", "(", ")", "\n", "if", "isinstance", "(", "mod", ",", "nn", ".", "Linear", ")", "and", "mod", ".", "weight", ".", "requires_grad", "\n", "]", "\n", "norms", "=", "torch", ".", "cat", "(", "[", "lin", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "0", ")", "for", "lin", "in", "lins", "]", ")", "\n", "return", "norms", ".", "mean", "(", ")", "\n", "# params = [p for p in model.parameters() if p.requires_grad and p.grad is not None]", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.test_ppl.get_saturation": [[72, 80], ["torch.no_grad", "torch.einsum", "soft.norm", "hard_callback.norm", "src.saturate.saturate", "hard_callback"], "function", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_saturation", "(", "soft", ",", "model", ",", "hard_callback", ")", ":", "\n", "    ", "with", "saturate", "(", "model", ")", ":", "\n", "        ", "hard", "=", "hard_callback", "(", ")", "\n", "", "prod", "=", "torch", ".", "einsum", "(", "\"bti, bti -> bt\"", ",", "soft", ",", "hard", ")", "\n", "soft_norm", "=", "soft", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "hard_norm", "=", "hard", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "return", "prod", "/", "(", "soft_norm", "*", "hard_norm", "+", "1e-9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.test_ppl.get_projection": [[82, 89], ["grad", "torch.cat", "torch.cat", "loss.sum", "p.flatten", "g.flatten", "torch.cat.norm", "torch.cat.norm"], "function", ["None"], ["", "def", "get_projection", "(", "loss", ",", "params", ")", ":", "\n", "    ", "grads", "=", "grad", "(", "loss", ".", "sum", "(", ")", ",", "params", ")", "\n", "params", "=", "torch", ".", "cat", "(", "[", "p", ".", "flatten", "(", ")", "for", "p", "in", "params", "]", ")", "\n", "grads", "=", "torch", ".", "cat", "(", "[", "g", ".", "flatten", "(", ")", "for", "g", "in", "grads", "]", ")", "\n", "proj", "=", "params", ".", "T", "@", "grads", "\n", "proj_sim", "=", "proj", "/", "(", "params", ".", "norm", "(", "p", "=", "2", ")", "*", "grads", ".", "norm", "(", "p", "=", "2", ")", "+", "1e-9", ")", "\n", "return", "proj", ",", "proj_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.test_ppl.get_metrics": [[91, 137], ["torch.no_grad", "range", "torch.cat", "torch.cat", "torch.cat", "torch.pow", "dev_mask[].sum", "len", "dev_tokens[].to", "dev_mask[].to", "model", "src.loss.sequence_cross_entropy_with_logits", "dev_logits.argmax", "test_ppl.get_saturation", "torch.cat.append", "torch.cat.append", "torch.cat.append", "get_norm().item", "torch.cat.mean().item", "torch.pow.mean().item", "src.loss.sequence_cross_entropy_with_logits.cpu", "agreement.cpu", "get_saturation.cpu", "dev_batch_mask[].unsqueeze", "test_ppl.get_norm", "torch.cat.mean", "torch.pow.mean", "dev_batch_mask[].unsqueeze", "torch.cat.sum", "torch.cat.sum", "model"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.loss.sequence_cross_entropy_with_logits", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.get_saturation", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.get_norm"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "get_metrics", "(", "args", ",", "model", ",", "dev_tokens", ",", "dev_mask", ",", "device", "=", "\"cuda:0\"", ")", ":", "\n", "    ", "all_agreement", "=", "[", "]", "\n", "all_saturation", "=", "[", "]", "\n", "all_loss", "=", "[", "]", "\n", "all_proj", "=", "0.", "\n", "all_proj_sim", "=", "0.", "\n", "# In this loop, we iterate over the full dev set, including the small bit at the end.", "\n", "for", "b", "in", "range", "(", "0", ",", "len", "(", "dev_tokens", ")", ",", "args", ".", "dev_batch_size", ")", ":", "\n", "        ", "dev_batch_tokens", "=", "dev_tokens", "[", "b", ":", "b", "+", "args", ".", "dev_batch_size", "]", ".", "to", "(", "device", ")", "\n", "dev_batch_mask", "=", "dev_mask", "[", "b", ":", "b", "+", "args", ".", "dev_batch_size", "]", ".", "to", "(", "device", ")", "\n", "dev_encoding", ",", "dev_logits", "=", "model", "(", "dev_batch_tokens", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "dev_loss", "=", "sequence_cross_entropy_with_logits", "(", "\n", "dev_logits", ",", "dev_batch_tokens", "[", ":", ",", "1", ":", "]", ",", "dev_batch_mask", "[", ":", ",", ":", "-", "1", "]", ",", "average", "=", "None", "\n", ")", "\n", "dev_preds", "=", "dev_logits", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "agreement", "=", "(", "dev_preds", "==", "dev_batch_tokens", "[", ":", ",", "1", ":", "]", ")", ".", "float", "(", ")", "*", "dev_batch_mask", "[", "\n", ":", ",", ":", "-", "1", "\n", "]", "\n", "saturation", "=", "get_saturation", "(", "\n", "dev_encoding", "*", "dev_batch_mask", "[", ":", ",", ":", "-", "1", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ",", "\n", "model", ",", "\n", "lambda", ":", "model", "(", "dev_batch_tokens", "[", ":", ",", ":", "-", "1", "]", ")", "[", "0", "]", "\n", "*", "dev_batch_mask", "[", ":", ",", ":", "-", "1", "]", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", ",", "\n", ")", "\n", "# With multiple devices, this doesn't work. Also can turn on no_grad when we don't do this.", "\n", "# proj, proj_sim = get_projection(dev_loss, [p for p in model.parameters() if p.requires_grad])", "\n", "\n", "all_loss", ".", "append", "(", "dev_loss", ".", "cpu", "(", ")", ")", "\n", "all_agreement", ".", "append", "(", "agreement", ".", "cpu", "(", ")", ")", "\n", "all_saturation", ".", "append", "(", "saturation", ".", "cpu", "(", ")", ")", "\n", "# all_proj += proj.item()", "\n", "# all_proj_sim += proj_sim.item()", "\n", "\n", "", "all_loss", "=", "torch", ".", "cat", "(", "all_loss", ",", "dim", "=", "0", ")", "\n", "all_agreement", "=", "torch", ".", "cat", "(", "all_agreement", ",", "dim", "=", "0", ")", "\n", "all_saturation", "=", "torch", ".", "cat", "(", "all_saturation", ",", "dim", "=", "0", ")", "\n", "all_perps", "=", "torch", ".", "pow", "(", "2", ",", "all_loss", ")", "\n", "numel", "=", "dev_mask", "[", ":", ",", ":", "-", "1", "]", ".", "sum", "(", ")", "\n", "\n", "return", "{", "\n", "\"acc1\"", ":", "(", "all_agreement", ".", "sum", "(", ")", "/", "numel", ")", ".", "item", "(", ")", ",", "\n", "\"norm\"", ":", "get_norm", "(", "model", ")", ".", "item", "(", ")", ",", "\n", "\"loss\"", ":", "all_loss", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "\"pplx\"", ":", "all_perps", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "\"sat\"", ":", "(", "all_saturation", ".", "sum", "(", ")", "/", "numel", ")", ".", "item", "(", ")", ",", "\n", "# \"proj\": all_proj / len(dev_tokens),", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.test_ppl.main": [[142, 183], ["src.tokenizer.Tokenizer", "log.info", "list", "src.utils.pad_sequence_to_len", "src.utils.get_mask().float", "log.info", "list", "src.utils.pad_sequence_to_len", "src.utils.get_mask().float", "log.info", "list", "src.utils.pad_sequence_to_len", "src.utils.get_mask().float", "max", "log.info", "src.language_model.LanguageModel", "src.language_model.LanguageModel.to", "torch.load", "src.language_model.LanguageModel.load_state_dict", "test_ppl.get_metrics", "log.info", "src.tokenizer.Tokenizer.gen_tokens", "src.tokenizer.Tokenizer.gen_tokens", "src.tokenizer.Tokenizer.gen_tokens", "torch.device", "torch.device", "src.utils.get_mask", "src.utils.get_mask", "src.utils.get_mask", "len", "torch.cuda.is_available"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.pad_sequence_to_len", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.pad_sequence_to_len", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.pad_sequence_to_len", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.get_metrics", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.gen_tokens", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.gen_tokens", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.gen_tokens", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.get_mask", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.get_mask", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.get_mask"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "tokenizer", "=", "Tokenizer", "(", ")", "\n", "\n", "log", ".", "info", "(", "f\"Loading train data from {PATH}/{args.data}/train.txt...\"", ")", "\n", "raw_train", "=", "list", "(", "tokenizer", ".", "gen_tokens", "(", "f\"{PATH}/{args.data}/train.txt\"", ")", ")", "\n", "train_tokens", "=", "pad_sequence_to_len", "(", "raw_train", ",", "args", ".", "seq_len", ")", "\n", "train_mask", "=", "get_mask", "(", "raw_train", ",", "args", ".", "seq_len", ")", ".", "float", "(", ")", "\n", "\n", "log", ".", "info", "(", "f\"Loading dev data from {PATH}/{args.data}/valid.txt...\"", ")", "\n", "raw_dev", "=", "list", "(", "tokenizer", ".", "gen_tokens", "(", "f\"{PATH}/{args.data}/valid.txt\"", ")", ")", "\n", "dev_tokens", "=", "pad_sequence_to_len", "(", "raw_dev", ",", "args", ".", "seq_len", ")", "\n", "dev_mask", "=", "get_mask", "(", "raw_dev", ",", "args", ".", "seq_len", ")", ".", "float", "(", ")", "\n", "\n", "log", ".", "info", "(", "f\"Loading test data from {PATH}/{args.data}/test.txt...\"", ")", "\n", "raw_test", "=", "list", "(", "tokenizer", ".", "gen_tokens", "(", "f\"{PATH}/{args.data}/test.txt\"", ",", "static", "=", "True", ")", ")", "\n", "test_tokens", "=", "pad_sequence_to_len", "(", "raw_test", ",", "args", ".", "seq_len", ")", "\n", "test_mask", "=", "get_mask", "(", "raw_test", ",", "args", ".", "seq_len", ")", ".", "float", "(", ")", "\n", "\n", "max_test_len", "=", "max", "(", "len", "(", "s", ")", "for", "s", "in", "raw_test", ")", "\n", "assert", "max_test_len", "<=", "args", ".", "seq_len", "\n", "log", ".", "info", "(", "f\"max test length is {max_test_len} (< {args.seq_len}).\"", ")", "\n", "\n", "model", "=", "LanguageModel", "(", "\n", "d_model", "=", "args", ".", "d_model", ",", "\n", "d_ff", "=", "args", ".", "d_ff", ",", "\n", "d_vocab", "=", "tokenizer", ".", "d_vocab", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "n_heads", "=", "args", ".", "n_heads", ",", "\n", "n_layers", "=", "args", ".", "n_layers", ",", "\n", "encoder_type", "=", "args", ".", "trans", ",", "\n", "bias", "=", "not", "args", ".", "no_bias", ",", "\n", ")", "\n", "\n", "model_path", "=", "f\"data/finetune-trans/{args.data}/{args.trans}.pt\"", "\n", "dev", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "torch", ".", "device", "(", "\"cuda:0\"", ")", "\n", "model", ".", "to", "(", "dev", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "model_path", ",", "map_location", "=", "dev", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "metrics", "=", "get_metrics", "(", "args", ",", "model", ",", "test_tokens", ",", "test_mask", ",", "device", "=", "dev", ")", "\n", "log", ".", "info", "(", "f\"pplx={metrics['pplx']:.2f}, sat={metrics['sat']:.2f}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.saturate.saturate.__init__": [[13, 28], ["isinstance", "list", "model_or_params.parameters", "torch.no_grad"], "methods", ["None"], ["import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "collections", "import", "defaultdict", "\n", "import", "os", "\n", "\n", "from", "src", ".", "tokenizer", "import", "Tokenizer", "\n", "from", "src", ".", "language_model", "import", "LanguageModel", ",", "transformers", "\n", "from", "src", ".", "utils", "import", "pad_sequence_to_len", ",", "get_mask", "\n", "\n", "\n", "PATH", "=", "os", ".", "environ", "[", "\"DATA\"", "]", "\n", "MODELS", "=", "os", ".", "environ", "[", "\"MODELS\"", "]", "\n", "CACHED", "=", "os", ".", "environ", "[", "\"CACHED\"", "]", "\n", "\n", "log", "=", "logging", ".", "getLogger", "(", "\"rich\"", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.saturate.saturate.__enter__": [[29, 35], ["saturate.saturate.no_grad.__enter__", "saturate.saturate.old_param_data.append", "param.data.mul"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.saturate.masked_saturate.__enter__"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "\"--dev_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--half\"", ",", "action", "=", "\"store_true\"", ")", "\n", "# Wikitext-2: Largest sentence is 699 on train, 429 on test.", "\n", "# Penn: Largest sentence is 82 on train, 74 on test.", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.saturate.saturate.__exit__": [[36, 41], ["zip", "saturate.saturate.no_grad.__exit__"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.saturate.masked_saturate.__exit__"], ["parser", ".", "add_argument", "(", "\"--seq_len\"", ",", "type", "=", "int", ",", "default", "=", "700", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_model\"", ",", "type", "=", "int", ",", "default", "=", "768", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_ff\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_heads\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_layers\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--fine_lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-1", ")", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.saturate.masked_saturate.__init__": [[44, 55], ["list", "torch.no_grad"], "methods", ["None"], ["parser", ".", "add_argument", "(", "\n", "\"--trans\"", ",", "type", "=", "str", ",", "default", "=", "\"vaswani\"", ",", "choices", "=", "[", "\"vaswani\"", "]", "+", "list", "(", "transformers", ".", "keys", "(", ")", ")", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_bias\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data\"", ",", "choices", "=", "[", "\"wikitext-2\"", ",", "\"penn\"", "]", ",", "default", "=", "\"wikitext-2\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_samples\"", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n", "\n", "", "class", "AttnTracker", ":", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.saturate.masked_saturate.__enter__": [[56, 61], ["saturate.masked_saturate.no_grad.__enter__", "zip", "saturate.masked_saturate.old_param_data.append", "torch.where", "param.data.mul"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.saturate.masked_saturate.__enter__"], ["\n", "    ", "def", "__init__", "(", "self", ",", "cpu", "=", "True", ")", ":", "\n", "        ", "self", ".", "attns", "=", "{", "}", "\n", "self", ".", "cpu", "=", "cpu", "\n", "\n", "", "def", "forward_hook", "(", "self", ",", "net", ",", "inputs", ",", "outputs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.saturate.masked_saturate.__exit__": [[62, 66], ["zip", "saturate.masked_saturate.no_grad.__exit__"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.saturate.masked_saturate.__exit__"], ["        ", "encodings", "=", "inputs", "[", "0", "]", "\n", "queries", "=", "net", ".", "query", "(", "encodings", ")", "\n", "keys", "=", "net", ".", "key", "(", "encodings", ")", "\n", "scores", "=", "torch", ".", "einsum", "(", "\"bti, bsi -> bts\"", ",", "queries", ",", "keys", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.si_transformer.SiSelfAttention.__init__": [[34, 51], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Softmax", "x.norm"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "SiTransConfig", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "config", ".", "d_model", "%", "config", ".", "n_heads", "==", "0", "\n", "d_head", "=", "config", ".", "d_model", "//", "config", ".", "n_heads", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "d_head", ",", "bias", "=", "config", ".", "biases", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "d_head", ",", "bias", "=", "config", ".", "biases", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "d_head", ",", "bias", "=", "config", ".", "biases", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "d_head", "=", "d_head", "\n", "\n", "if", "not", "config", ".", "softmax", ":", "\n", "# Can't use standard LayerNorm here, since the mean shift will allow lookahead. This function will", "\n", "# produce a valid probability distribution.", "\n", "            ", "self", ".", "softmax", "=", "lambda", "x", ":", "x", "*", "x", "/", "x", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.si_transformer.SiSelfAttention.forward": [[52, 70], ["si_transformer.SiSelfAttention.query", "si_transformer.SiSelfAttention.key", "si_transformer.SiSelfAttention.value", "torch.einsum", "si_transformer.SiSelfAttention.softmax", "torch.einsum", "torch.einsum.size", "torch.arange", "math.sqrt", "torch.arange.unsqueeze", "torch.arange.unsqueeze", "mask.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.Avg.value"], ["", "", "@", "overrides", "\n", "def", "forward", "(", "self", ",", "encodings", ")", ":", "\n", "        ", "queries", "=", "self", ".", "query", "(", "encodings", ")", "\n", "keys", "=", "self", ".", "key", "(", "encodings", ")", "\n", "values", "=", "self", ".", "value", "(", "encodings", ")", "\n", "scores", "=", "torch", ".", "einsum", "(", "\"bti, bsi -> bts\"", ",", "queries", ",", "keys", ")", "\n", "\n", "if", "self", ".", "config", ".", "scale_scores", ":", "\n", "            ", "scores", "=", "scores", "/", "sqrt", "(", "self", ".", "d_head", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "masked", ":", "\n", "            ", "seq_len", "=", "scores", ".", "size", "(", "1", ")", "\n", "arange", "=", "torch", ".", "arange", "(", "seq_len", ",", "device", "=", "queries", ".", "device", ")", "\n", "mask", "=", "arange", ".", "unsqueeze", "(", "dim", "=", "0", ")", "<=", "arange", ".", "unsqueeze", "(", "dim", "=", "1", ")", "\n", "scores", "=", "mask", ".", "unsqueeze", "(", "dim", "=", "0", ")", "*", "scores", "\n", "\n", "", "weights", "=", "self", ".", "softmax", "(", "scores", ")", "\n", "return", "torch", ".", "einsum", "(", "\"bts, bsh -> bth\"", ",", "weights", ",", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.si_transformer.SiMultiHead.__init__": [[73, 83], ["torch.nn.Module.__init__", "enumerate", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.Dropout", "si_transformer.SiSelfAttention", "si_transformer.SiMultiHead.add_module", "range"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "heads", "=", "[", "SiSelfAttention", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "n_heads", ")", "]", "\n", "for", "idx", ",", "head", "in", "enumerate", "(", "self", ".", "heads", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "f\"head{idx}\"", ",", "head", ")", "\n", "\n", "", "self", ".", "pooler", "=", "torch", ".", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "d_model", ",", "bias", "=", "config", ".", "biases", ")", "\n", "self", ".", "lnorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "p_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.si_transformer.SiMultiHead.forward": [[84, 93], ["si_transformer.SiMultiHead.pooler", "si_transformer.SiMultiHead.dropout", "head", "torch.cat", "si_transformer.SiMultiHead.lnorm", "si_transformer.SiMultiHead.lnorm"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "forward", "(", "self", ",", "encodings", ")", ":", "\n", "        ", "heads", "=", "[", "head", "(", "encodings", ")", "for", "head", "in", "self", ".", "heads", "]", "\n", "outputs", "=", "self", ".", "pooler", "(", "torch", ".", "cat", "(", "heads", ",", "dim", "=", "-", "1", ")", ")", "\n", "outputs", "=", "self", ".", "dropout", "(", "outputs", ")", "\n", "if", "not", "self", ".", "config", ".", "post_ln", ":", "\n", "            ", "return", "self", ".", "lnorm", "(", "outputs", ")", "+", "encodings", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "lnorm", "(", "outputs", "+", "encodings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.si_transformer.SiFeedforward.__init__": [[96, 108], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.LayerNorm", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "d_model", "=", "config", ".", "d_model", "\n", "d_hidden", "=", "config", ".", "d_hidden", "\n", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "d_model", ",", "d_hidden", ",", "bias", "=", "config", ".", "biases", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "d_hidden", ",", "d_model", ",", "bias", "=", "config", ".", "biases", ")", ",", "\n", ")", "\n", "self", ".", "lnorm", "=", "nn", ".", "LayerNorm", "(", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "p_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.si_transformer.SiFeedforward.forward": [[109, 117], ["si_transformer.SiFeedforward.net", "si_transformer.SiFeedforward.dropout", "si_transformer.SiFeedforward.lnorm", "si_transformer.SiFeedforward.lnorm"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "forward", "(", "self", ",", "encodings", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "net", "(", "encodings", ")", "\n", "outputs", "=", "self", ".", "dropout", "(", "outputs", ")", "\n", "if", "not", "self", ".", "config", ".", "post_ln", ":", "\n", "            ", "return", "self", ".", "lnorm", "(", "outputs", ")", "+", "encodings", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "lnorm", "(", "outputs", "+", "encodings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.si_transformer.SiLayer.__init__": [[120, 124], ["torch.nn.Module.__init__", "si_transformer.SiMultiHead", "si_transformer.SiFeedforward"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "heads", "=", "SiMultiHead", "(", "config", ")", "\n", "self", ".", "ff", "=", "SiFeedforward", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.si_transformer.SiLayer.forward": [[125, 128], ["si_transformer.SiLayer.ff", "si_transformer.SiLayer.heads"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "forward", "(", "self", ",", "encodings", ")", ":", "\n", "        ", "return", "self", ".", "ff", "(", "self", ".", "heads", "(", "encodings", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.si_transformer.SiEncoder.__init__": [[131, 136], ["torch.nn.Module.__init__", "enumerate", "si_transformer.SiLayer", "si_transformer.SiEncoder.add_module", "range"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layers", "=", "[", "SiLayer", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "n_layers", ")", "]", "\n", "for", "idx", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "self", ".", "add_module", "(", "f\"layer{idx}\"", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.si_transformer.SiEncoder.forward": [[137, 142], ["layer"], "methods", ["None"], ["", "", "@", "overrides", "\n", "def", "forward", "(", "self", ",", "encodings", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "encodings", "=", "layer", "(", "encodings", ")", "\n", "", "return", "encodings", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.si_transformer.SiEmbedder.__init__": [[145, 158], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "range", "range", "math.sin", "math.cos"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.cos"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "config", ".", "n_vocab", ",", "config", ".", "d_model", ")", "\n", "self", ".", "pos_embed", "=", "nn", ".", "Embedding", "(", "config", ".", "seq_len", ",", "config", ".", "d_model", ")", "\n", "\n", "if", "config", ".", "rel_embed", ":", "\n", "# Relative positional embeddings taken from https://arxiv.org/pdf/1706.03762.pdf.", "\n", "            ", "self", ".", "pos_embed", ".", "requires_grad", "=", "False", "\n", "embeddings", "=", "self", ".", "pos_embed", ".", "weight", "\n", "for", "pos", "in", "range", "(", "config", ".", "seq_len", ")", ":", "\n", "                ", "for", "idx", "in", "range", "(", "config", ".", "d_model", "//", "2", ")", ":", "\n", "                    ", "embeddings", "[", "pos", ",", "2", "*", "idx", "]", "=", "sin", "(", "pos", "/", "10000", "**", "(", "2", "*", "idx", "/", "config", ".", "d_model", ")", ")", "\n", "embeddings", "[", "pos", ",", "2", "*", "idx", "+", "1", "]", "=", "cos", "(", "pos", "/", "10000", "**", "(", "2", "*", "idx", "/", "config", ".", "d_model", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.si_transformer.SiEmbedder.forward": [[159, 166], ["token_ids.size", "si_transformer.SiEmbedder.embed", "torch.arange", "si_transformer.SiEmbedder.pos_embed().unsqueeze", "si_transformer.SiEmbedder.pos_embed"], "methods", ["None"], ["", "", "", "", "@", "overrides", "\n", "def", "forward", "(", "self", ",", "token_ids", ")", ":", "\n", "        ", "_", ",", "seq_len", "=", "token_ids", ".", "size", "(", ")", "\n", "embeddings", "=", "self", ".", "embed", "(", "token_ids", ")", "\n", "positions", "=", "torch", ".", "arange", "(", "seq_len", ",", "device", "=", "token_ids", ".", "device", ")", "\n", "pos_embeddings", "=", "self", ".", "pos_embed", "(", "positions", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "return", "embeddings", "+", "pos_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.si_transformer.SiTransformer.__init__": [[169, 173], ["torch.nn.Module.__init__", "si_transformer.SiEmbedder", "si_transformer.SiEncoder"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedder", "=", "SiEmbedder", "(", "config", ")", "\n", "self", ".", "encoder", "=", "SiEncoder", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.si_transformer.SiTransformer.forward": [[174, 178], ["si_transformer.SiTransformer.embedder", "si_transformer.SiTransformer.encoder"], "methods", ["None"], ["", "@", "overrides", "\n", "def", "forward", "(", "self", ",", "token_ids", ")", ":", "\n", "        ", "embeddings", "=", "self", ".", "embedder", "(", "token_ids", ")", "\n", "return", "self", ".", "encoder", "(", "embeddings", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.__init__": [[5, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "mapping", "=", "{", "}", "\n", "self", ".", "idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.tokenize": [[9, 18], ["None"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "token", ",", "static", "=", "False", ")", ":", "\n", "        ", "if", "token", "not", "in", "self", ".", "mapping", ":", "\n", "            ", "if", "static", ":", "\n", "# This happens 3 times on Wikitext-2 (capitalization), and never on PTB.", "\n", "                ", "token", "=", "\"<unk>\"", "\n", "", "else", ":", "\n", "                ", "self", ".", "mapping", "[", "token", "]", "=", "self", ".", "idx", "\n", "self", ".", "idx", "+=", "1", "\n", "", "", "return", "self", ".", "mapping", "[", "token", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.gen_tokens": [[19, 27], ["open", "line.strip.strip.strip", "line.strip.strip.split", "torch.tensor", "tokenizer.Tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.tokenize"], ["", "def", "gen_tokens", "(", "self", ",", "path", ",", "device", "=", "None", ",", "**", "args", ")", ":", "\n", "        ", "with", "open", "(", "path", ")", "as", "fh", ":", "\n", "            ", "for", "line", "in", "fh", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", "and", "line", "[", "0", "]", "!=", "\"=\"", ":", "\n", "                    ", "tokens", "=", "line", ".", "split", "(", ")", "\n", "yield", "torch", ".", "tensor", "(", "\n", "[", "self", ".", "tokenize", "(", "tok", ",", "**", "args", ")", "for", "tok", "in", "tokens", "]", ",", "device", "=", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.d_vocab": [[29, 32], ["len"], "methods", ["None"], ["", "", "", "", "@", "property", "\n", "def", "d_vocab", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "mapping", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.loss.sequence_cross_entropy_with_logits": [[7, 158], ["weights.to.to", "tuple", "weights.to.sum", "logits.view", "torch.nn.functional.log_softmax", "targets.reshape().long", "negative_log_likelihood_flat.sum.view", "ValueError", "range", "logits.size", "torch.nn.functional.log_softmax.exp", "torch.gather", "focal_factor.view.view", "isinstance", "torch.gather().view", "logits.size", "torch.zeros_like().scatter_", "negative_log_likelihood_flat.sum.sum", "len", "targets.reshape", "torch.tensor", "isinstance", "torch.gather", "targets.size", "negative_log_likelihood_flat.view.sum", "loss.tiny_value_of_dtype", "per_batch_loss.sum", "targets.size", "torch.tensor", "TypeError", "torch.gather", "targets.size", "torch.zeros_like", "loss.tiny_value_of_dtype", "negative_log_likelihood_flat.view.sum", "negative_log_likelihood_flat.view.sum", "float", "torch.cat.size", "torch.cat.view", "torch.cat", "weights.sum.sum", "loss.tiny_value_of_dtype", "loss.tiny_value_of_dtype", "float", "type", "targets.reshape().long.view"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.loss.tiny_value_of_dtype", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.loss.tiny_value_of_dtype", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.loss.tiny_value_of_dtype", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.loss.tiny_value_of_dtype"], ["def", "sequence_cross_entropy_with_logits", "(", "\n", "logits", ":", "torch", ".", "FloatTensor", ",", "\n", "targets", ":", "torch", ".", "LongTensor", ",", "\n", "weights", ":", "Union", "[", "torch", ".", "FloatTensor", ",", "torch", ".", "BoolTensor", "]", ",", "\n", "average", ":", "str", "=", "\"batch\"", ",", "\n", "label_smoothing", ":", "float", "=", "None", ",", "\n", "gamma", ":", "float", "=", "None", ",", "\n", "alpha", ":", "Union", "[", "float", ",", "List", "[", "float", "]", ",", "torch", ".", "FloatTensor", "]", "=", "None", ",", "\n", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "    ", "\"\"\"\n    Computes the cross entropy loss of a sequence, weighted with respect to\n    some user provided weights. Note that the weighting here is not the same as\n    in the `torch.nn.CrossEntropyLoss()` criterion, which is weighting\n    classes; here we are weighting the loss contribution from particular elements\n    in the sequence. This allows loss computations for models which use padding.\n    # Parameters\n    logits : `torch.FloatTensor`, required.\n        A `torch.FloatTensor` of size (batch_size, sequence_length, num_classes)\n        which contains the unnormalized probability for each class.\n    targets : `torch.LongTensor`, required.\n        A `torch.LongTensor` of size (batch, sequence_length) which contains the\n        index of the true class for each corresponding step.\n    weights : `Union[torch.FloatTensor, torch.BoolTensor]`, required.\n        A `torch.FloatTensor` of size (batch, sequence_length)\n    average: `str`, optional (default = `\"batch\"`)\n        If \"batch\", average the loss across the batches. If \"token\", average\n        the loss across each item in the input. If `None`, return a vector\n        of losses per batch element.\n    label_smoothing : `float`, optional (default = `None`)\n        Whether or not to apply label smoothing to the cross-entropy loss.\n        For example, with a label smoothing value of 0.2, a 4 class classification\n        target would look like `[0.05, 0.05, 0.85, 0.05]` if the 3rd class was\n        the correct label.\n    gamma : `float`, optional (default = `None`)\n        Focal loss[*] focusing parameter `gamma` to reduces the relative loss for\n        well-classified examples and put more focus on hard. The greater value\n        `gamma` is, the more focus on hard examples.\n    alpha : `Union[float, List[float]]`, optional (default = `None`)\n        Focal loss[*] weighting factor `alpha` to balance between classes. Can be\n        used independently with `gamma`. If a single `float` is provided, it\n        is assumed binary case using `alpha` and `1 - alpha` for positive and\n        negative respectively. If a list of `float` is provided, with the same\n        length as the number of classes, the weights will match the classes.\n        [*] T. Lin, P. Goyal, R. Girshick, K. He and P. Doll\u00e1r, \"Focal Loss for\n        Dense Object Detection,\" 2017 IEEE International Conference on Computer\n        Vision (ICCV), Venice, 2017, pp. 2999-3007.\n    # Returns\n    `torch.FloatTensor`\n        A torch.FloatTensor representing the cross entropy loss.\n        If `average==\"batch\"` or `average==\"token\"`, the returned loss is a scalar.\n        If `average is None`, the returned loss is a vector of shape (batch_size,).\n    \"\"\"", "\n", "if", "average", "not", "in", "{", "None", ",", "\"token\"", ",", "\"batch\"", "}", ":", "\n", "        ", "raise", "ValueError", "(", "\"Got average f{average}, expected one of None, 'token', or 'batch'\"", ")", "\n", "\n", "# make sure weights are float", "\n", "", "weights", "=", "weights", ".", "to", "(", "logits", ".", "dtype", ")", "\n", "# sum all dim except batch", "\n", "non_batch_dims", "=", "tuple", "(", "range", "(", "1", ",", "len", "(", "weights", ".", "shape", ")", ")", ")", "\n", "# shape : (batch_size,)", "\n", "weights_batch_sum", "=", "weights", ".", "sum", "(", "dim", "=", "non_batch_dims", ")", "\n", "# shape : (batch * sequence_length, num_classes)", "\n", "logits_flat", "=", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", "\n", "# shape : (batch * sequence_length, num_classes)", "\n", "log_probs_flat", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "logits_flat", ",", "dim", "=", "-", "1", ")", "\n", "# shape : (batch * max_len, 1)", "\n", "targets_flat", "=", "targets", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "long", "(", ")", "\n", "# targets_flat = targets.view(-1, 1).long()  # For some reason, this line doesn't work.", "\n", "# focal loss coefficient", "\n", "if", "gamma", ":", "\n", "# shape : (batch * sequence_length, num_classes)", "\n", "        ", "probs_flat", "=", "log_probs_flat", ".", "exp", "(", ")", "\n", "# shape : (batch * sequence_length,)", "\n", "probs_flat", "=", "torch", ".", "gather", "(", "probs_flat", ",", "dim", "=", "1", ",", "index", "=", "targets_flat", ")", "\n", "# shape : (batch * sequence_length,)", "\n", "focal_factor", "=", "(", "1.0", "-", "probs_flat", ")", "**", "gamma", "\n", "# shape : (batch, sequence_length)", "\n", "focal_factor", "=", "focal_factor", ".", "view", "(", "*", "targets", ".", "size", "(", ")", ")", "\n", "weights", "=", "weights", "*", "focal_factor", "\n", "\n", "", "if", "alpha", "is", "not", "None", ":", "\n", "# shape : () / (num_classes,)", "\n", "        ", "if", "isinstance", "(", "alpha", ",", "(", "float", ",", "int", ")", ")", ":", "\n", "\n", "# shape : (2,)", "\n", "            ", "alpha_factor", "=", "torch", ".", "tensor", "(", "\n", "[", "1.0", "-", "float", "(", "alpha", ")", ",", "float", "(", "alpha", ")", "]", ",", "dtype", "=", "weights", ".", "dtype", ",", "device", "=", "weights", ".", "device", "\n", ")", "\n", "\n", "", "elif", "isinstance", "(", "alpha", ",", "(", "list", ",", "numpy", ".", "ndarray", ",", "torch", ".", "Tensor", ")", ")", ":", "\n", "\n", "# shape : (c,)", "\n", "            ", "alpha_factor", "=", "torch", ".", "tensor", "(", "alpha", ",", "dtype", "=", "weights", ".", "dtype", ",", "device", "=", "weights", ".", "device", ")", "\n", "\n", "if", "not", "alpha_factor", ".", "size", "(", ")", ":", "\n", "# shape : (1,)", "\n", "                ", "alpha_factor", "=", "alpha_factor", ".", "view", "(", "1", ")", "\n", "# shape : (2,)", "\n", "alpha_factor", "=", "torch", ".", "cat", "(", "[", "1", "-", "alpha_factor", ",", "alpha_factor", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "(", "\"alpha must be float, list of float, or torch.FloatTensor, {} provided.\"", ")", ".", "format", "(", "\n", "type", "(", "alpha", ")", "\n", ")", "\n", ")", "\n", "# shape : (batch, max_len)", "\n", "", "alpha_factor", "=", "torch", ".", "gather", "(", "alpha_factor", ",", "dim", "=", "0", ",", "index", "=", "targets_flat", ".", "view", "(", "-", "1", ")", ")", ".", "view", "(", "\n", "*", "targets", ".", "size", "(", ")", "\n", ")", "\n", "weights", "=", "weights", "*", "alpha_factor", "\n", "\n", "", "if", "label_smoothing", "is", "not", "None", "and", "label_smoothing", ">", "0.0", ":", "\n", "        ", "num_classes", "=", "logits", ".", "size", "(", "-", "1", ")", "\n", "smoothing_value", "=", "label_smoothing", "/", "num_classes", "\n", "# Fill all the correct indices with 1 - smoothing value.", "\n", "one_hot_targets", "=", "torch", ".", "zeros_like", "(", "log_probs_flat", ")", ".", "scatter_", "(", "\n", "-", "1", ",", "targets_flat", ",", "1.0", "-", "label_smoothing", "\n", ")", "\n", "smoothed_targets", "=", "one_hot_targets", "+", "smoothing_value", "\n", "negative_log_likelihood_flat", "=", "-", "log_probs_flat", "*", "smoothed_targets", "\n", "negative_log_likelihood_flat", "=", "negative_log_likelihood_flat", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "", "else", ":", "\n", "# Contribution to the negative log likelihood only comes from the exact indices", "\n", "# of the targets, as the target distributions are one-hot. Here we use torch.gather", "\n", "# to extract the indices of the num_classes dimension which contribute to the loss.", "\n", "# shape : (batch * sequence_length, 1)", "\n", "        ", "negative_log_likelihood_flat", "=", "-", "torch", ".", "gather", "(", "log_probs_flat", ",", "dim", "=", "1", ",", "index", "=", "targets_flat", ")", "\n", "# shape : (batch, sequence_length)", "\n", "", "negative_log_likelihood", "=", "negative_log_likelihood_flat", ".", "view", "(", "*", "targets", ".", "size", "(", ")", ")", "\n", "# shape : (batch, sequence_length)", "\n", "negative_log_likelihood", "=", "negative_log_likelihood", "*", "weights", "\n", "\n", "if", "average", "==", "\"batch\"", ":", "\n", "# shape : (batch_size,)", "\n", "        ", "per_batch_loss", "=", "negative_log_likelihood", ".", "sum", "(", "non_batch_dims", ")", "/", "(", "\n", "weights_batch_sum", "+", "tiny_value_of_dtype", "(", "negative_log_likelihood", ".", "dtype", ")", "\n", ")", "\n", "num_non_empty_sequences", "=", "(", "weights_batch_sum", ">", "0", ")", ".", "sum", "(", ")", "+", "tiny_value_of_dtype", "(", "\n", "negative_log_likelihood", ".", "dtype", "\n", ")", "\n", "return", "per_batch_loss", ".", "sum", "(", ")", "/", "num_non_empty_sequences", "\n", "", "elif", "average", "==", "\"token\"", ":", "\n", "        ", "return", "negative_log_likelihood", ".", "sum", "(", ")", "/", "(", "\n", "weights_batch_sum", ".", "sum", "(", ")", "+", "tiny_value_of_dtype", "(", "negative_log_likelihood", ".", "dtype", ")", "\n", ")", "\n", "", "else", ":", "\n", "# shape : (batch_size,)", "\n", "        ", "per_batch_loss", "=", "negative_log_likelihood", ".", "sum", "(", "non_batch_dims", ")", "/", "(", "\n", "weights_batch_sum", "+", "tiny_value_of_dtype", "(", "negative_log_likelihood", ".", "dtype", ")", "\n", ")", "\n", "return", "per_batch_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.loss.tiny_value_of_dtype": [[160, 175], ["TypeError", "TypeError", "str"], "function", ["None"], ["", "", "def", "tiny_value_of_dtype", "(", "dtype", ":", "torch", ".", "dtype", ")", ":", "\n", "    ", "\"\"\"\n    Returns a moderately tiny value for a given PyTorch data type that is used to avoid numerical\n    issues such as division by zero.\n    This is different from `info_value_of_dtype(dtype).tiny` because it causes some NaN bugs.\n    Only supports floating point dtypes.\n    \"\"\"", "\n", "if", "not", "dtype", ".", "is_floating_point", ":", "\n", "        ", "raise", "TypeError", "(", "\"Only supports floating point dtypes.\"", ")", "\n", "", "if", "dtype", "==", "torch", ".", "float", "or", "dtype", "==", "torch", ".", "double", ":", "\n", "        ", "return", "1e-13", "\n", "", "elif", "dtype", "==", "torch", ".", "half", ":", "\n", "        ", "return", "1e-4", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"Does not support dtype \"", "+", "str", "(", "dtype", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.norm_sgd.NormSGD.__init__": [[6, 8], ["torch.SGD.__init__"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.norm_sgd.NormSGD.step": [[9, 50], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "torch.enable_grad", "closure", "p.add_", "p.grad.norm", "d_p.add.add.add", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach.mul_().add_", "torch.clone().detach.mul_().add_", "d_p.add.add.add", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone().detach.mul_", "torch.clone().detach.mul_"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "dampening", "=", "group", "[", "'dampening'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", "or", "not", "p", ".", "requires_grad", ":", "\n", "                    ", "continue", "\n", "\n", "# TODO: Could make sense to normalize by the in dimension.", "\n", "", "d_p", "=", "p", ".", "grad", "/", "p", ".", "grad", ".", "norm", "(", ")", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "d_p", "=", "d_p", ".", "add", "(", "p", ",", "alpha", "=", "weight_decay", ")", "\n", "", "if", "momentum", "!=", "0", ":", "\n", "                    ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "clone", "(", "d_p", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "d_p", ",", "alpha", "=", "1", "-", "dampening", ")", "\n", "", "if", "nesterov", ":", "\n", "                        ", "d_p", "=", "d_p", ".", "add", "(", "buf", ",", "alpha", "=", "momentum", ")", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "\n", "", "", "p", ".", "add_", "(", "d_p", ",", "alpha", "=", "-", "group", "[", "'lr'", "]", ")", "\n", "\n", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.language_model.LanguageModel.__init__": [[26, 54], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.TransformerEncoderLayer", "torch.nn.TransformerEncoder", "si_transformer.SiTransConfig", "si_transformer.SiEncoder"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "d_model", ",", "d_ff", ",", "d_vocab", ",", "seq_len", ",", "n_heads", ",", "n_layers", ",", "encoder_type", ",", "bias", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed", "=", "torch", ".", "nn", ".", "Embedding", "(", "d_vocab", ",", "d_model", ")", "\n", "self", ".", "pos_embed", "=", "torch", ".", "nn", ".", "Embedding", "(", "seq_len", ",", "d_model", ")", "\n", "\n", "# Note: Before we were using the PyTorch transformer, but that one doesn't have masking.", "\n", "if", "encoder_type", "==", "\"vaswani\"", ":", "\n", "            ", "layer", "=", "nn", ".", "TransformerEncoderLayer", "(", "\n", "d_model", "=", "d_model", ",", "nhead", "=", "n_heads", ",", "dim_feedforward", "=", "d_ff", "\n", ")", "\n", "# I believe that this encoder is masked by default.", "\n", "self", ".", "encoder", "=", "nn", ".", "TransformerEncoder", "(", "layer", ",", "num_layers", "=", "n_layers", ")", "\n", "", "else", ":", "\n", "            ", "config", "=", "SiTransConfig", "(", "\n", "d_vocab", ",", "\n", "d_model", ",", "\n", "d_ff", ",", "\n", "n_heads", ",", "\n", "n_layers", ",", "\n", "seq_len", "-", "1", ",", "\n", "masked", "=", "True", ",", "\n", "**", "transformers", "[", "encoder_type", "]", ",", "\n", ")", "\n", "self", ".", "encoder", "=", "SiEncoder", "(", "config", ")", "\n", "\n", "", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "d_model", ",", "d_vocab", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.language_model.LanguageModel.forward": [[55, 61], ["token_ids.size", "torch.arange", "language_model.LanguageModel.encoder", "language_model.LanguageModel.embed", "language_model.LanguageModel.pos_embed().unsqueeze", "language_model.LanguageModel.classifier", "language_model.LanguageModel.pos_embed"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "token_ids", ")", ":", "\n", "        ", "seq_len", "=", "token_ids", ".", "size", "(", "1", ")", "\n", "pos", "=", "torch", ".", "arange", "(", "0", ",", "seq_len", ",", "device", "=", "token_ids", ".", "device", ")", "\n", "embeddings", "=", "self", ".", "embed", "(", "token_ids", ")", "+", "self", ".", "pos_embed", "(", "pos", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "encodings", "=", "self", ".", "encoder", "(", "embeddings", ")", "\n", "return", "encodings", ",", "self", ".", "classifier", "(", "encodings", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.pad_sequence_to_len": [[6, 13], ["torch.zeros", "torch.nn.utils.rnn.pad_sequence", "sequences.size", "sequences.size", "sequences.size"], "function", ["None"], ["def", "pad_sequence_to_len", "(", "sequence", ",", "seq_len", ")", ":", "\n", "    ", "sequences", "=", "pad_sequence", "(", "sequence", ",", "batch_first", "=", "True", ")", "[", ":", ",", ":", "seq_len", "]", "\n", "if", "sequences", ".", "size", "(", "1", ")", "==", "seq_len", ":", "\n", "        ", "return", "sequences", "\n", "", "padding", "=", "torch", ".", "zeros", "(", "sequences", ".", "size", "(", "0", ")", ",", "seq_len", ",", "device", "=", "sequences", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "padding", "[", ":", ",", ":", "sequences", ".", "size", "(", "1", ")", "]", "=", "sequences", "\n", "return", "padding", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.get_mask": [[15, 25], ["torch.tensor", "torch.arange().unsqueeze().repeat", "lengths.unsqueeze.unsqueeze", "torch.where", "len", "torch.ones_like", "torch.zeros_like", "len", "torch.arange().unsqueeze", "torch.arange"], "function", ["None"], ["", "def", "get_mask", "(", "tokens", ":", "List", "[", "torch", ".", "Tensor", "]", ",", "seq_len", ")", ":", "\n", "    ", "lengths", "=", "torch", ".", "tensor", "(", "[", "len", "(", "sent", ")", "for", "sent", "in", "tokens", "]", ",", "device", "=", "tokens", "[", "0", "]", ".", "device", ")", "\n", "indices", "=", "(", "\n", "torch", ".", "arange", "(", "0", ",", "seq_len", ",", "device", "=", "lengths", ".", "device", ")", "\n", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", ".", "repeat", "(", "len", "(", "lengths", ")", ",", "1", ")", "\n", ")", "\n", "lengths", "=", "lengths", ".", "unsqueeze", "(", "dim", "=", "-", "1", ")", "\n", "return", "torch", ".", "where", "(", "\n", "indices", "<", "lengths", ",", "torch", ".", "ones_like", "(", "indices", ")", ",", "torch", ".", "zeros_like", "(", "indices", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.get_text_tokens_mask": [[27, 39], ["list", "utils.pad_sequence_to_len", "get_mask().float", "max", "log.info", "tokenizer.gen_tokens", "log.info", "utils.get_mask", "len"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.pad_sequence_to_len", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.gen_tokens", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.get_mask"], ["", "def", "get_text_tokens_mask", "(", "path", ",", "seq_len", ",", "tokenizer", ",", "name", "=", "\"data\"", ",", "log", "=", "None", ")", ":", "\n", "    ", "if", "log", ":", "\n", "        ", "log", ".", "info", "(", "f\"Loading train data from {path}...\"", ")", "\n", "", "raw_train", "=", "list", "(", "tokenizer", ".", "gen_tokens", "(", "path", ")", ")", "\n", "train_tokens", "=", "pad_sequence_to_len", "(", "raw_train", ",", "args", ".", "seq_len", ")", "\n", "train_mask", "=", "get_mask", "(", "raw_train", ",", "args", ".", "seq_len", ")", ".", "float", "(", ")", "\n", "train_len", "=", "max", "(", "len", "(", "s", ")", "for", "s", "in", "raw_train", ")", "\n", "assert", "train_len", "<=", "args", ".", "seq_len", "\n", "if", "log", ":", "\n", "        ", "log", ".", "info", "(", "f\"Max train sentence length is {train_len} (<= {args.seq_len}).\"", ")", "\n", "\n", "", "return", "raw_train", ",", "train_tokens", ",", "train_mask", "\n", "", ""]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.experiment.__init__": [[20, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", "=", "None", ",", "default", "=", "False", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "default", "=", "default", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.experiment.__call__": [[24, 30], ["type"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "callback", ")", ":", "\n", "        ", "name", "=", "self", ".", "name", "or", "callback", ".", "__name__", "\n", "self", ".", "registry", "[", "name", "]", "=", "callback", "\n", "if", "self", ".", "default", ":", "\n", "            ", "type", "(", "self", ")", ".", "default", "=", "name", "\n", "", "return", "callback", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.experiment.add_arguments": [[31, 34], ["parser.add_argument", "list"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "add_arguments", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\"--exp\"", ",", "type", "=", "str", ",", "default", "=", "cls", ".", "default", ",", "choices", "=", "list", "(", "cls", ".", "registry", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.experiment.run": [[35, 38], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "run", "(", "cls", ",", "args", ")", ":", "\n", "        ", "cls", ".", "registry", "[", "args", ".", "exp", "]", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.parse_args": [[40, 49], ["argparse.ArgumentParser", "plot_gp.experiment.add_arguments", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.experiment.add_arguments", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["", "", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "experiment", ".", "add_arguments", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "\"--optim\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"sgd\"", ",", "\"adamw\"", "]", ",", "default", "=", "\"sgd\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-3", ")", "\n", "parser", ".", "add_argument", "(", "\"--wd\"", ",", "type", "=", "float", ",", "default", "=", "0.", ")", "\n", "parser", ".", "add_argument", "(", "\"--window\"", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"cache\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.add_arrow": [[51, 72], ["line.get_xdata", "line.get_ydata", "numpy.argmin", "line.axes.annotate", "line.get_color", "line.get_xdata.mean", "numpy.absolute", "dict"], "function", ["None"], ["", "def", "add_arrow", "(", "line", ",", "position", "=", "None", ",", "direction", "=", "'right'", ",", "size", "=", "15", ",", "color", "=", "None", ")", ":", "\n", "    ", "if", "color", "is", "None", ":", "\n", "        ", "color", "=", "line", ".", "get_color", "(", ")", "\n", "\n", "", "xdata", "=", "line", ".", "get_xdata", "(", ")", "\n", "ydata", "=", "line", ".", "get_ydata", "(", ")", "\n", "\n", "if", "position", "is", "None", ":", "\n", "        ", "position", "=", "xdata", ".", "mean", "(", ")", "\n", "# find closest index", "\n", "", "start_ind", "=", "np", ".", "argmin", "(", "np", ".", "absolute", "(", "xdata", "-", "position", ")", ")", "\n", "if", "direction", "==", "'right'", ":", "\n", "        ", "end_ind", "=", "start_ind", "+", "1", "\n", "", "else", ":", "\n", "        ", "end_ind", "=", "start_ind", "-", "1", "\n", "\n", "", "line", ".", "axes", ".", "annotate", "(", "''", ",", "\n", "xytext", "=", "(", "xdata", "[", "start_ind", "]", ",", "ydata", "[", "start_ind", "]", ")", ",", "\n", "xy", "=", "(", "xdata", "[", "end_ind", "]", ",", "ydata", "[", "end_ind", "]", ")", ",", "\n", "arrowprops", "=", "dict", "(", "arrowstyle", "=", "\"->\"", ",", "color", "=", "color", ")", ",", "\n", "size", "=", "size", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.smooth": [[75, 77], ["numpy.convolve", "numpy.ones"], "function", ["None"], ["", "def", "smooth", "(", "signal", ",", "window", "=", "100", ")", ":", "\n", "    ", "return", "np", ".", "convolve", "(", "signal", ",", "np", ".", "ones", "(", "window", ")", "/", "window", ",", "mode", "=", "\"valid\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.consume": [[79, 96], ["numpy.array", "numpy.array", "numpy.median", "numpy.median", "plot_gp.smooth", "plot_gp.smooth", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.smooth", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.smooth"], ["", "def", "consume", "(", "timeseries", ",", "args", ")", ":", "\n", "    ", "\"\"\"Get parameter time series data from `timeseries`.\"\"\"", "\n", "projs", "=", "np", ".", "array", "(", "timeseries", "[", "\"projs\"", "]", ")", "\n", "deltas", "=", "np", ".", "array", "(", "timeseries", "[", "\"dnorms\"", "]", ")", "\n", "deltas_sq", "=", "deltas", "*", "deltas", "\n", "\n", "# TODO: What is the right statistic to use here? Median seems the best.", "\n", "mean_proj", "=", "np", ".", "median", "(", "projs", ",", "axis", "=", "1", ")", "\n", "mean_delta_sq", "=", "np", ".", "median", "(", "deltas_sq", ",", "axis", "=", "1", ")", "\n", "\n", "# Smooth these things.", "\n", "mean_proj", "=", "smooth", "(", "mean_proj", ",", "args", ".", "window", ")", "# SMOOTHING", "\n", "mean_delta_sq", "=", "smooth", "(", "mean_delta_sq", ",", "args", ".", "window", ")", "# SMOOTHING", "\n", "\n", "mean_delta", "=", "np", ".", "sqrt", "(", "mean_delta_sq", ")", "\n", "\n", "return", "mean_delta", ",", "mean_proj", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.main": [[98, 136], ["plot_gp.experiment", "plot_gp.consume", "max", "numpy.linspace", "min", "max", "matplotlib.fill_between", "matplotlib.plot", "matplotlib.plot", "plot_gp.add_arrow", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylim", "matplotlib.savefig", "rich.print", "open", "pickle.load", "min", "min", "max", "max", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.consume", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.add_arrow"], ["", "@", "experiment", "(", "default", "=", "True", ")", "\n", "def", "main", "(", "args", ")", ":", "\n", "    ", "path", "=", "f\"{args.data_dir}/wd/wikitext-2-vaswani-{args.optim}-lr={args.lr}-wd={args.wd}.dat\"", "\n", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "fh", ":", "\n", "        ", "timeseries", "=", "pickle", ".", "load", "(", "fh", ")", "\n", "\n", "", "mean_delta", ",", "mean_proj", "=", "consume", "(", "timeseries", ",", "args", ")", "\n", "\n", "# Compute the boundary curve.", "\n", "xmax", "=", "max", "(", "mean_delta", ")", "\n", "xs", "=", "np", ".", "linspace", "(", "0", ",", "xmax", ",", "1000", ")", "\n", "ys", "=", "-", ".5", "*", "xs", "*", "xs", "\n", "\n", "# Set up scaling.", "\n", "ymin", "=", "min", "(", "min", "(", "ys", ")", ",", "min", "(", "mean_proj", ")", ")", "\n", "ymax", "=", "max", "(", "max", "(", "ys", ")", ",", "max", "(", "mean_proj", ")", ")", "\n", "yrange", "=", "ymax", "-", "ymin", "\n", "ymin", "-=", "yrange", "/", "2", "\n", "ymax", "+=", "yrange", "/", "2", "\n", "\n", "# Plot all the stuff.", "\n", "plt", ".", "fill_between", "(", "xs", ",", "ymin", ",", "ys", ",", "color", "=", "\"red\"", ",", "alpha", "=", ".1", ")", "\n", "plt", ".", "plot", "(", "xs", ",", "ys", ",", "linestyle", "=", "\"--\"", ",", "color", "=", "\"black\"", ")", "\n", "line", ",", "=", "plt", ".", "plot", "(", "mean_delta", ",", "mean_proj", ")", "\n", "add_arrow", "(", "line", ")", "\n", "\n", "# Add various labels.", "\n", "plt", ".", "title", "(", "fR\"Trajectory with {args.optim} ($\\eta = {args.lr}, \\lambda = {args.wd}$)\"", ")", "\n", "plt", ".", "xlabel", "(", "R\"$\\Vert \\delta_t \\Vert$\"", ")", "\n", "plt", ".", "ylabel", "(", "R\"$\\theta_t^\\top \\cdot \\delta_t$\"", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "ymin", ",", "ymax", "=", "ymax", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"figs/wd\"", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "\"figs/wd\"", ")", "\n", "\n", "", "filename", "=", "f\"figs/wd/{args.optim}-lr={args.lr}-wd={args.wd}.pdf\"", "\n", "plt", ".", "savefig", "(", "filename", ")", "\n", "print", "(", "f\"Saved [green]{filename}[/green].\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.vary_lr": [[138, 190], ["plot_gp.experiment", "numpy.linspace", "min", "max", "matplotlib.fill_between", "matplotlib.plot", "all_xs.keys", "matplotlib.legend", "matplotlib.xscale", "matplotlib.yscale", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylim", "matplotlib.savefig", "rich.print", "float", "plot_gp.consume", "max", "min", "max", "min", "max", "matplotlib.plot", "plot_gp.add_arrow", "os.path.exists", "os.makedirs", "open", "pickle.load", "max", "min", "max", "numpy.ones_like"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.consume", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.add_arrow"], ["", "@", "experiment", "(", ")", "\n", "def", "vary_lr", "(", "args", ")", ":", "\n", "    ", "all_xs", "=", "{", "}", "\n", "all_ys", "=", "{", "}", "\n", "xmax", "=", "0.", "\n", "ymin", ",", "ymax", "=", "float", "(", "\"inf\"", ")", ",", "0.", "\n", "\n", "lrs", "=", "[", "1e-3", ",", "1e-5", "]", "\n", "# lrs = [1e-2, 1e-3, 1e-5]", "\n", "for", "lr", "in", "lrs", ":", "\n", "        ", "path", "=", "f\"{args.data_dir}/wd/wikitext-2-vaswani-{args.optim}-lr={lr}-wd={args.wd}.dat\"", "\n", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "fh", ":", "\n", "            ", "timeseries", "=", "pickle", ".", "load", "(", "fh", ")", "\n", "\n", "", "mean_delta", ",", "mean_proj", "=", "consume", "(", "timeseries", ",", "args", ")", "\n", "\n", "all_xs", "[", "lr", "]", "=", "mean_delta", "\n", "all_ys", "[", "lr", "]", "=", "mean_proj", "\n", "xmax", "=", "max", "(", "xmax", ",", "max", "(", "mean_delta", ")", ")", "\n", "ymin", "=", "min", "(", "ymin", ",", "min", "(", "mean_proj", ")", ")", "\n", "ymax", "=", "max", "(", "ymax", ",", "max", "(", "mean_proj", ")", ")", "\n", "\n", "", "xs", "=", "np", ".", "linspace", "(", "0", ",", "xmax", ",", "1000", ")", "\n", "ys", "=", "-", ".5", "*", "xs", "*", "xs", "\n", "ymin", "=", "min", "(", "ymin", ",", "min", "(", "ys", ")", ")", "\n", "ymax", "=", "max", "(", "ymax", ",", "max", "(", "ys", ")", ")", "\n", "yrange", "=", "ymax", "-", "ymin", "\n", "ymin", "-=", "yrange", "/", "2", "\n", "ymax", "+=", "yrange", "/", "2", "\n", "\n", "plt", ".", "fill_between", "(", "xs", ",", "ymin", "*", "np", ".", "ones_like", "(", "ys", ")", ",", "ys", ",", "color", "=", "\"red\"", ",", "alpha", "=", ".1", ")", "\n", "plt", ".", "plot", "(", "xs", ",", "ys", ",", "linestyle", "=", "\"--\"", ",", "color", "=", "\"black\"", ")", "\n", "\n", "for", "lr", "in", "all_xs", ".", "keys", "(", ")", ":", "\n", "        ", "line", ",", "=", "plt", ".", "plot", "(", "all_xs", "[", "lr", "]", ",", "all_ys", "[", "lr", "]", ",", "label", "=", "fR\"$\\eta = {lr}$\"", ")", "\n", "add_arrow", "(", "line", ")", "\n", "\n", "# Add various labels.", "\n", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "xscale", "(", "\"log\"", ")", "\n", "plt", ".", "yscale", "(", "\"symlog\"", ")", "\n", "plt", ".", "title", "(", "fR\"Trajectory with {args.optim} ($\\lambda = {args.wd}$)\"", ")", "\n", "plt", ".", "xlabel", "(", "R\"$\\Vert \\delta_t \\Vert$\"", ")", "\n", "plt", ".", "ylabel", "(", "R\"$\\theta_t^\\top \\cdot \\delta_t$\"", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "ymin", ",", "ymax", "=", "ymax", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"figs/wd\"", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "\"figs/wd\"", ")", "\n", "\n", "", "filename", "=", "f\"figs/wd/{args.optim}-lr=vary-wd={args.wd}.pdf\"", "\n", "plt", ".", "savefig", "(", "filename", ")", "\n", "print", "(", "f\"Saved [green]{filename}[/green].\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.vary_wd": [[192, 242], ["plot_gp.experiment", "numpy.linspace", "min", "max", "matplotlib.fill_between", "matplotlib.plot", "all_xs.keys", "matplotlib.legend", "matplotlib.xscale", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylim", "matplotlib.savefig", "rich.print", "float", "plot_gp.consume", "max", "min", "max", "min", "max", "matplotlib.plot", "plot_gp.add_arrow", "os.path.exists", "os.makedirs", "open", "pickle.load", "max", "min", "max", "numpy.ones_like"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.consume", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.plot_gp.add_arrow"], ["", "@", "experiment", "(", ")", "\n", "def", "vary_wd", "(", "args", ")", ":", "\n", "    ", "all_xs", "=", "{", "}", "\n", "all_ys", "=", "{", "}", "\n", "xmax", "=", "0.", "\n", "ymin", ",", "ymax", "=", "float", "(", "\"inf\"", ")", ",", "0.", "\n", "\n", "for", "wd", "in", "[", "1e-2", ",", "1e-3", ",", "1e-4", "]", ":", "\n", "        ", "path", "=", "f\"{args.data_dir}/wd/wikitext-2-vaswani-{args.optim}-lr={args.lr}-wd={wd}.dat\"", "\n", "with", "open", "(", "path", ",", "\"rb\"", ")", "as", "fh", ":", "\n", "            ", "timeseries", "=", "pickle", ".", "load", "(", "fh", ")", "\n", "\n", "", "mean_delta", ",", "mean_proj", "=", "consume", "(", "timeseries", ",", "args", ")", "\n", "\n", "all_xs", "[", "wd", "]", "=", "mean_delta", "\n", "all_ys", "[", "wd", "]", "=", "mean_proj", "\n", "xmax", "=", "max", "(", "xmax", ",", "max", "(", "mean_delta", ")", ")", "\n", "ymin", "=", "min", "(", "ymin", ",", "min", "(", "mean_proj", ")", ")", "\n", "ymax", "=", "max", "(", "ymax", ",", "max", "(", "mean_proj", ")", ")", "\n", "\n", "", "xs", "=", "np", ".", "linspace", "(", "0", ",", "xmax", ",", "1000", ")", "\n", "ys", "=", "-", ".5", "*", "xs", "*", "xs", "\n", "ymin", "=", "min", "(", "ymin", ",", "min", "(", "ys", ")", ")", "\n", "ymax", "=", "max", "(", "ymax", ",", "max", "(", "ys", ")", ")", "\n", "yrange", "=", "ymax", "-", "ymin", "\n", "ymin", "-=", "yrange", "/", "2", "\n", "ymax", "+=", "yrange", "/", "2", "\n", "\n", "plt", ".", "fill_between", "(", "xs", ",", "ymin", "*", "np", ".", "ones_like", "(", "ys", ")", ",", "ys", ",", "color", "=", "\"red\"", ",", "alpha", "=", ".1", ")", "\n", "plt", ".", "plot", "(", "xs", ",", "ys", ",", "linestyle", "=", "\"--\"", ",", "color", "=", "\"black\"", ")", "\n", "\n", "for", "wd", "in", "all_xs", ".", "keys", "(", ")", ":", "\n", "        ", "line", ",", "=", "plt", ".", "plot", "(", "all_xs", "[", "wd", "]", ",", "all_ys", "[", "wd", "]", ",", "label", "=", "fR\"$\\lambda = {wd}$\"", ")", "\n", "add_arrow", "(", "line", ")", "\n", "\n", "# Add various labels.", "\n", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "xscale", "(", "\"log\"", ")", "\n", "# plt.yscale(\"symlog\")", "\n", "plt", ".", "title", "(", "fR\"Trajectory with {args.optim} ($\\eta = {args.lr}$)\"", ")", "\n", "plt", ".", "xlabel", "(", "R\"$\\Vert \\delta_t \\Vert$\"", ")", "\n", "plt", ".", "ylabel", "(", "R\"$\\theta_t^\\top \\cdot \\delta_t$\"", ")", "\n", "plt", ".", "ylim", "(", "ymin", "=", "ymin", ",", "ymax", "=", "ymax", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"figs/wd\"", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "\"figs/wd\"", ")", "\n", "\n", "", "filename", "=", "f\"figs/wd/{args.optim}-lr={args.lr}-wd=vary.pdf\"", "\n", "plt", ".", "savefig", "(", "filename", ")", "\n", "print", "(", "f\"Saved [green]{filename}[/green].\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.track_gp.parse_args": [[45, 70], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "list", "src.language_model.transformers.keys"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["\n", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "\"--dev_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--half\"", ",", "action", "=", "\"store_true\"", ")", "\n", "# Wikitext-2: Largest sentence is 699 on train, 429 on test.", "\n", "# Penn: Largest sentence is 82 on train, 74 on test.", "\n", "parser", ".", "add_argument", "(", "\"--seq_len\"", ",", "type", "=", "int", ",", "default", "=", "700", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_model\"", ",", "type", "=", "int", ",", "default", "=", "768", ")", "\n", "parser", ".", "add_argument", "(", "\"--d_ff\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_heads\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_layers\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--epochs\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--trans\"", ",", "type", "=", "str", ",", "default", "=", "\"vaswani\"", ",", "choices", "=", "[", "\"vaswani\"", "]", "+", "list", "(", "transformers", ".", "keys", "(", ")", ")", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--fig_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"figs/finetune-trans\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"data/finetune-trans\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_bias\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--data\"", ",", "choices", "=", "[", "\"wikitext-2\"", ",", "\"penn\"", "]", ",", "default", "=", "\"wikitext-2\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--optim\"", ",", "type", "=", "str", ",", "choices", "=", "[", "\"sgd\"", ",", "\"adamw\"", "]", ",", "default", "=", "\"sgd\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "1e-3", ")", "\n", "parser", ".", "add_argument", "(", "\"--wd\"", ",", "type", "=", "float", ",", "default", "=", "0.", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.track_gp.train_model": [[72, 133], ["collections.defaultdict", "float", "range", "model.train", "log.info", "torch.randperm", "torch.randperm", "tqdm.trange", "len", "p.data.clone", "train_tokens[].to", "train_mask[].to", "optimizer.zero_grad", "model", "src.loss.sequence_cross_entropy_with_logits", "src.loss.sequence_cross_entropy_with_logits.backward", "optimizer.step", "timeseries[].append", "timeseries[].append", "timeseries[].append", "model.parameters", "len", "p.data.clone", "p.norm().item", "d.norm().item", "model.parameters", "zip", "zip", "p.norm", "d.norm", "d.flatten", "p.flatten"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.loss.sequence_cross_entropy_with_logits", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.norm_sgd.NormSGD.step"], ["\n", "", "def", "train_model", "(", "\n", "args", ",", "\n", "model", ",", "\n", "train_tokens", ",", "\n", "train_mask", ",", "\n", "dev_tokens", ",", "\n", "dev_mask", ",", "\n", "optimizer", ",", "\n", "epochs", "=", "10", ",", "\n", "device", "=", "\"cuda:0\"", ",", "\n", ")", ":", "\n", "    ", "timeseries", "=", "defaultdict", "(", "list", ")", "\n", "best_loss", "=", "float", "(", "\"inf\"", ")", "\n", "\n", "for", "e", "in", "range", "(", "epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "log", ".", "info", "(", "f\"Starting epoch {e}...\"", ")", "\n", "perm", "=", "torch", ".", "randperm", "(", "len", "(", "train_tokens", ")", ")", "\n", "train_tokens", "=", "train_tokens", "[", "perm", ",", ":", "]", "\n", "train_mask", "=", "train_mask", "[", "perm", ",", ":", "]", "\n", "\n", "params", "=", "[", "p", ".", "data", ".", "clone", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "\n", "for", "b", "in", "tqdm", ".", "trange", "(", "0", ",", "len", "(", "train_tokens", ")", "-", "args", ".", "batch_size", ",", "args", ".", "batch_size", ")", ":", "\n", "            ", "prev_params", "=", "params", "\n", "\n", "batch_tokens", "=", "train_tokens", "[", "b", ":", "b", "+", "args", ".", "batch_size", "]", ".", "to", "(", "device", ")", "\n", "batch_mask", "=", "train_mask", "[", "b", ":", "b", "+", "args", ".", "batch_size", "]", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "_", ",", "logits", "=", "model", "(", "batch_tokens", "[", ":", ",", ":", "-", "1", "]", ")", "\n", "loss", "=", "sequence_cross_entropy_with_logits", "(", "\n", "logits", ",", "batch_tokens", "[", ":", ",", "1", ":", "]", ",", "batch_mask", "[", ":", ",", ":", "-", "1", "]", "\n", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "params", "=", "[", "p", ".", "data", ".", "clone", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "deltas", "=", "[", "p", "-", "pp", "for", "p", ",", "pp", "in", "zip", "(", "params", ",", "prev_params", ")", "]", "\n", "\n", "pnorms", "=", "[", "p", ".", "norm", "(", "p", "=", "2", ")", ".", "item", "(", ")", "for", "p", "in", "params", "]", "\n", "dnorms", "=", "[", "d", ".", "norm", "(", "p", "=", "2", ")", ".", "item", "(", ")", "for", "d", "in", "deltas", "]", "\n", "projs", "=", "[", "(", "d", ".", "flatten", "(", ")", "@", "p", ".", "flatten", "(", ")", ")", ".", "item", "(", ")", "for", "d", ",", "p", "in", "zip", "(", "params", ",", "deltas", ")", "]", "\n", "\n", "timeseries", "[", "\"pnorms\"", "]", ".", "append", "(", "pnorms", ")", "\n", "timeseries", "[", "\"dnorms\"", "]", ".", "append", "(", "dnorms", ")", "\n", "timeseries", "[", "\"projs\"", "]", ".", "append", "(", "projs", ")", "\n", "\n", "# model.eval()", "\n", "# metrics = get_metrics(args, model, dev_tokens, dev_mask, device=device)", "\n", "# for name, value in metrics.items():", "\n", "#     timeseries[name].append(value)", "\n", "# print(metrics)", "\n", "\n", "# Save the model checkpoint if this is the best performance yet.", "\n", "# if metrics[\"loss\"] < best_loss:", "\n", "#     best_loss = metrics[\"loss\"]", "\n", "#     data_dir = os.path.join(args.data_dir, args.data)", "\n", "#     ckpt_path = os.path.join(data_dir, args.trans + \".pt\")", "\n", "#     torch.save(model.state_dict(), ckpt_path)", "\n", "\n", "", "", "return", "timeseries", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.track_gp.main": [[135, 195], ["torch.device", "torch.device", "src.tokenizer.Tokenizer", "log.info", "list", "src.utils.pad_sequence_to_len", "src.utils.get_mask().float", "max", "log.info", "log.info", "list", "src.utils.pad_sequence_to_len", "src.utils.get_mask().float", "max", "log.info", "src.language_model.LanguageModel", "model.half.to", "track_gp.train_model", "rich.print", "src.tokenizer.Tokenizer.gen_tokens", "src.tokenizer.Tokenizer.gen_tokens", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "model.half.half", "torch.optim", "os.path.exists", "os.makedirs", "open", "pickle.dump", "torch.cuda.is_available", "torch.cuda.is_available", "src.utils.get_mask", "len", "src.utils.get_mask", "len", "model.half.parameters"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.pad_sequence_to_len", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.pad_sequence_to_len", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.train_model", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.gen_tokens", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.tokenizer.Tokenizer.gen_tokens", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.get_mask", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.utils.get_mask"], ["\n", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "tokenizer", "=", "Tokenizer", "(", ")", "\n", "\n", "# TODO: Added this in utils.", "\n", "log", ".", "info", "(", "f\"Loading train data from {PATH}/{args.data}/train.txt...\"", ")", "\n", "raw_train", "=", "list", "(", "tokenizer", ".", "gen_tokens", "(", "f\"{PATH}/{args.data}/train.txt\"", ")", ")", "\n", "train_tokens", "=", "pad_sequence_to_len", "(", "raw_train", ",", "args", ".", "seq_len", ")", "\n", "train_mask", "=", "get_mask", "(", "raw_train", ",", "args", ".", "seq_len", ")", ".", "float", "(", ")", "\n", "train_len", "=", "max", "(", "len", "(", "s", ")", "for", "s", "in", "raw_train", ")", "\n", "assert", "train_len", "<=", "args", ".", "seq_len", "\n", "log", ".", "info", "(", "f\"Max train sentence length is {train_len} (<= {args.seq_len}).\"", ")", "\n", "\n", "log", ".", "info", "(", "f\"Loading dev data from {PATH}/{args.data}/valid.txt...\"", ")", "\n", "raw_dev", "=", "list", "(", "tokenizer", ".", "gen_tokens", "(", "f\"{PATH}/{args.data}/valid.txt\"", ")", ")", "\n", "dev_tokens", "=", "pad_sequence_to_len", "(", "raw_dev", ",", "args", ".", "seq_len", ")", "\n", "dev_mask", "=", "get_mask", "(", "raw_dev", ",", "args", ".", "seq_len", ")", ".", "float", "(", ")", "\n", "dev_len", "=", "max", "(", "len", "(", "s", ")", "for", "s", "in", "raw_dev", ")", "\n", "assert", "dev_len", "<=", "args", ".", "seq_len", "\n", "log", ".", "info", "(", "f\"Max dev sentence length is {dev_len} (<= {args.seq_len}).\"", ")", "\n", "\n", "model", "=", "LanguageModel", "(", "\n", "d_model", "=", "args", ".", "d_model", ",", "\n", "d_ff", "=", "args", ".", "d_ff", ",", "\n", "d_vocab", "=", "tokenizer", ".", "d_vocab", ",", "\n", "seq_len", "=", "args", ".", "seq_len", ",", "\n", "n_heads", "=", "args", ".", "n_heads", ",", "\n", "n_layers", "=", "args", ".", "n_layers", ",", "\n", "encoder_type", "=", "args", ".", "trans", ",", "\n", "bias", "=", "not", "args", ".", "no_bias", ",", "\n", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "\n", "if", "args", ".", "half", ":", "\n", "        ", "model", "=", "model", ".", "half", "(", ")", "\n", "\n", "", "optim", "=", "optims", "[", "args", ".", "optim", "]", "\n", "\n", "timeseries", "=", "train_model", "(", "\n", "args", ",", "\n", "model", ",", "\n", "train_tokens", ",", "\n", "train_mask", ",", "\n", "dev_tokens", ",", "\n", "dev_mask", ",", "\n", "optim", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "wd", ")", ",", "\n", "epochs", "=", "args", ".", "epochs", ",", "\n", ")", "\n", "\n", "data_dir", "=", "f\"{CACHED}/wd\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "data_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "data_dir", ")", "\n", "", "filename", "=", "f\"{data_dir}/{args.data}-{args.trans}-{args.optim}-lr={args.lr}-wd={args.wd}.dat\"", "\n", "with", "open", "(", "filename", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "timeseries", ",", "fh", ")", "\n", "\n", "", "print", "(", "f\"Saved {filename}.\"", ")", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.SelfAttention.__init__": [[62, 69], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "TransConfig", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "config", ".", "n_model", "%", "config", ".", "n_heads", "==", "0", "\n", "key_dim", "=", "config", ".", "n_model", "//", "config", ".", "n_heads", "\n", "self", ".", "key_map", "=", "Linear", "(", "config", ".", "n_model", ",", "key_dim", ",", "bias", "=", "config", ".", "bias", ")", "\n", "self", ".", "query_map", "=", "Linear", "(", "config", ".", "n_model", ",", "key_dim", ",", "bias", "=", "config", ".", "bias", ")", "\n", "self", ".", "value_map", "=", "Linear", "(", "config", ".", "n_model", ",", "key_dim", ",", "bias", "=", "config", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.SelfAttention.forward": [[70, 76], ["transformer_scale_test_softmax.SelfAttention.key_map", "transformer_scale_test_softmax.SelfAttention.query_map", "transformer_scale_test_softmax.SelfAttention.value_map", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "transformer_scale_test_softmax.SelfAttention.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "keys", "=", "self", ".", "key_map", "(", "inputs", ")", "\n", "queries", "=", "self", ".", "query_map", "(", "inputs", ")", "\n", "values", "=", "self", ".", "value_map", "(", "inputs", ")", "\n", "attn_weights", "=", "torch", ".", "softmax", "(", "keys", "@", "queries", ".", "t", "(", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "attn_weights", "@", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.PoolHeads.__init__": [[79, 87], ["torch.nn.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "transformer_scale_test_softmax.SelfAttention", "range"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "heads", "=", "nn", ".", "ModuleList", "(", "\n", "[", "SelfAttention", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "n_heads", ")", "]", "\n", ")", "\n", "self", ".", "pooler", "=", "nn", ".", "Linear", "(", "config", ".", "n_model", ",", "config", ".", "n_model", ",", "bias", "=", "config", ".", "bias", ")", "\n", "self", ".", "lnorm", "=", "LayerNorm", "(", "config", ".", "n_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.PoolHeads.forward": [[88, 95], ["transformer_scale_test_softmax.PoolHeads.pooler", "head", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transformer_scale_test_softmax.PoolHeads.lnorm", "transformer_scale_test_softmax.PoolHeads.lnorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "heads", "=", "[", "head", "(", "inputs", ")", "for", "head", "in", "self", ".", "heads", "]", "\n", "outputs", "=", "self", ".", "pooler", "(", "torch", ".", "cat", "(", "heads", ",", "dim", "=", "-", "1", ")", ")", "\n", "if", "self", ".", "config", ".", "residual", ":", "\n", "            ", "return", "self", ".", "lnorm", "(", "outputs", "+", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "lnorm", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.FullyConnected.__init__": [[98, 104], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "torch.nn.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "TransConfig", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "first", "=", "Linear", "(", "config", ".", "n_model", ",", "config", ".", "ff_dim", ",", "bias", "=", "config", ".", "bias", ")", "\n", "self", ".", "second", "=", "Linear", "(", "config", ".", "ff_dim", ",", "config", ".", "n_model", ",", "bias", "=", "config", ".", "bias", ")", "\n", "self", ".", "lnorm", "=", "LayerNorm", "(", "config", ".", "n_model", ")", "\n", "self", ".", "residual", "=", "config", ".", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.FullyConnected.forward": [[105, 112], ["transformer_scale_test_softmax.FullyConnected.first().relu", "transformer_scale_test_softmax.FullyConnected.second", "transformer_scale_test_softmax.FullyConnected.lnorm", "transformer_scale_test_softmax.FullyConnected.lnorm", "transformer_scale_test_softmax.FullyConnected.first"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "hidden", "=", "self", ".", "first", "(", "inputs", ")", ".", "relu", "(", ")", "\n", "hidden", "=", "self", ".", "second", "(", "hidden", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "return", "self", ".", "lnorm", "(", "hidden", "+", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "lnorm", "(", "hidden", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.TransformerLayer.__init__": [[115, 119], ["torch.nn.Module.__init__", "transformer_scale_test_softmax.PoolHeads", "transformer_scale_test_softmax.FullyConnected"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "TransConfig", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "PoolHeads", "(", "config", ")", "\n", "self", ".", "fully_connected", "=", "FullyConnected", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.TransformerLayer.forward": [[120, 123], ["transformer_scale_test_softmax.TransformerLayer.attention", "transformer_scale_test_softmax.TransformerLayer.fully_connected"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "attention", "=", "self", ".", "attention", "(", "x", ")", "\n", "return", "self", ".", "fully_connected", "(", "attention", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.Embedding.__init__": [[126, 130], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "TransConfig", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed", "=", "torch", ".", "nn", ".", "Embedding", "(", "config", ".", "n_vocab", ",", "config", ".", "n_model", ")", "\n", "self", ".", "pos_embed", "=", "torch", ".", "nn", ".", "Embedding", "(", "512", ",", "config", ".", "n_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.Embedding.forward": [[131, 134], ["torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "transformer_scale_test_softmax.Embedding.embed", "transformer_scale_test_softmax.Embedding.pos_embed"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "pos", "=", "torch", ".", "arange", "(", "len", "(", "x", ")", ",", "device", "=", "x", ".", "device", ")", "\n", "return", "self", ".", "embed", "(", "x", ")", "+", "self", ".", "pos_embed", "(", "pos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.Transformer.__init__": [[137, 150], ["torch.nn.Module.__init__", "transformer_scale_test_softmax.Embedding", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "transformer_scale_test_softmax.TransformerLayer", "range"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ":", "TransConfig", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed", "=", "Embedding", "(", "config", ")", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "TransformerLayer", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "n_layers", ")", "]", "\n", ")", "\n", "self", ".", "output", "=", "nn", ".", "Linear", "(", "config", ".", "n_model", ",", "config", ".", "n_classes", ",", "bias", "=", "config", ".", "bias", ")", "\n", "\n", "not_bias", "=", "\"bias\"", "if", "not", "config", ".", "bias", "else", "\"\"", "\n", "not_res", "=", "\"res\"", "if", "not", "config", ".", "residual", "else", "\"\"", "\n", "self", ".", "name", "=", "\"Trans\"", "\n", "if", "not_bias", "or", "not_res", ":", "\n", "            ", "self", ".", "name", "+=", "\" w/o \"", "+", "\", \"", ".", "join", "(", "x", "for", "x", "in", "[", "not_bias", ",", "not_res", "]", "if", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.Transformer.forward": [[151, 156], ["transformer_scale_test_softmax.Transformer.embed", "transformer_scale_test_softmax.Transformer.output", "layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "inputs", "=", "self", ".", "embed", "(", "inputs", ")", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "inputs", "=", "layer", "(", "inputs", ")", "\n", "", "return", "self", ".", "output", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.parse_args": [[30, 43], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--dim\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--font_size\"", ",", "type", "=", "str", ",", "default", "=", "\"large\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_trials\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--min_h\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_h\"", ",", "type", "=", "int", ",", "default", "=", "120", ")", "\n", "parser", ".", "add_argument", "(", "\"--step_h\"", ",", "type", "=", "int", ",", "default", "=", "12", ")", "\n", "parser", ".", "add_argument", "(", "\"--scale\"", ",", "type", "=", "float", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--symlog\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--experiment\"", ",", "choices", "=", "[", "\"hid_dim\"", ",", "\"scale\"", "]", ",", "default", "=", "\"hid_dim\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.get_norm": [[45, 48], ["torch.cat().norm", "torch.cat().norm", "param.flatten", "network.parameters", "torch.cat", "torch.cat"], "function", ["None"], ["", "def", "get_norm", "(", "network", ")", ":", "\n", "    ", "params", "=", "[", "param", ".", "flatten", "(", ")", "for", "param", "in", "network", ".", "parameters", "(", ")", "]", "\n", "return", "torch", ".", "cat", "(", "params", ")", ".", "norm", "(", "p", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.scale_params": [[158, 164], ["module.parameters", "old_params.append", "param.data.clone"], "function", ["None"], ["", "", "def", "scale_params", "(", "module", ",", "scale", ":", "int", ")", "->", "List", "[", "torch", ".", "Tensor", "]", ":", "\n", "    ", "old_params", "=", "[", "]", "\n", "for", "param", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "old_params", ".", "append", "(", "param", ".", "data", ".", "clone", "(", ")", ")", "\n", "param", ".", "data", "*=", "scale", "\n", "", "return", "old_params", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.unscale_params": [[166, 169], ["zip", "module.parameters"], "function", ["None"], ["", "def", "unscale_params", "(", "module", ",", "old_params", ":", "List", "[", "torch", ".", "Tensor", "]", ")", "->", "None", ":", "\n", "    ", "for", "param", ",", "old_data", "in", "zip", "(", "module", ".", "parameters", "(", ")", ",", "old_params", ")", ":", "\n", "        ", "param", ".", "data", "=", "old_data", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.get_networks": [[171, 184], ["transformer_scale_test_softmax.Transformer", "transformer_scale_test_softmax.Transformer", "transformer_scale_test_softmax.Transformer", "transformer_scale_test_softmax.Transformer", "transformer_scale_test_softmax.TransConfig", "transformer_scale_test_softmax.TransConfig", "transformer_scale_test_softmax.TransConfig", "transformer_scale_test_softmax.TransConfig", "transformer_scale_test_softmax.scale_params"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.scale_params"], ["", "", "def", "get_networks", "(", "n_classes", ",", "scale", ":", "float", "=", "1.0", ")", ":", "\n", "    ", "networks", "=", "[", "\n", "Transformer", "(", "TransConfig", "(", "TRANS_SIZE", ",", "n_classes", ")", ")", ",", "\n", "Transformer", "(", "TransConfig", "(", "TRANS_SIZE", ",", "n_classes", ",", "bias", "=", "False", ")", ")", ",", "\n", "Transformer", "(", "TransConfig", "(", "TRANS_SIZE", ",", "n_classes", ",", "residual", "=", "False", ")", ")", ",", "\n", "Transformer", "(", "TransConfig", "(", "TRANS_SIZE", ",", "n_classes", ",", "bias", "=", "False", ",", "residual", "=", "False", ")", ")", ",", "\n", "]", "\n", "\n", "if", "scale", "!=", "1.0", ":", "\n", "        ", "for", "network", "in", "networks", ":", "\n", "            ", "scale_params", "(", "network", ",", "scale", ")", "\n", "\n", "", "", "return", "networks", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.new_tracker": [[186, 190], ["None"], "function", ["None"], ["", "def", "new_tracker", "(", ")", ":", "\n", "    ", "return", "{", "\n", "\"mean\"", ":", "[", "]", ",", "\n", "\"std\"", ":", "[", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.get_metrics": [[193, 216], ["network", "criterion", "torch.autograd.grad", "zip", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "p.flatten.flatten", "g.flatten.flatten", "proj.item", "network.parameters", "p.flatten.flatten", "g.flatten.flatten", "torch.cat.norm", "torch.cat.norm", "g.flatten.norm"], "function", ["None"], ["", "def", "get_metrics", "(", "network", ",", "criterion", ",", "token_ids", ",", "labels", ",", "one_hot_labels", ")", ":", "\n", "    ", "preds", "=", "network", "(", "token_ids", ")", "\n", "loss", "=", "criterion", "(", "preds", ",", "labels", ")", "\n", "params", "=", "[", "p", "for", "p", "in", "network", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "]", "\n", "grads", "=", "grad", "(", "loss", ",", "params", ")", "\n", "\n", "lr", "=", "1e-3", "\n", "exp", "=", "0.", "\n", "for", "p", ",", "g", "in", "zip", "(", "params", ",", "grads", ")", ":", "\n", "        ", "p", "=", "p", ".", "flatten", "(", ")", "\n", "g", "=", "g", ".", "flatten", "(", ")", "\n", "exp", "+=", "(", "lr", "**", "2", "*", "g", ".", "norm", "(", "p", "=", "2", ")", "**", "2", "-", "2", "*", "lr", "*", "p", "@", "g", ")", ".", "item", "(", ")", "\n", "\n", "", "params", "=", "torch", ".", "cat", "(", "[", "p", ".", "flatten", "(", ")", "for", "p", "in", "params", "]", ")", "\n", "grads", "=", "torch", ".", "cat", "(", "[", "g", ".", "flatten", "(", ")", "for", "g", "in", "grads", "]", ")", "\n", "proj", "=", "params", "@", "grads", "/", "(", "params", ".", "norm", "(", "p", "=", "2", ")", "*", "grads", ".", "norm", "(", "p", "=", "2", ")", "+", "1e-9", ")", "\n", "\n", "# expansion = lr * lr * grads.norm(p=2)**2 - 2 * lr * params @ grads", "\n", "\n", "return", "{", "\n", "# We use cosine similarity because it is normalized for the fact that loss grows with num hidden???", "\n", "\"proj\"", ":", "proj", ".", "item", "(", ")", ",", "\n", "\"exp\"", ":", "exp", ",", "\n", "# \"homo-proj\": homo_projs.mean().item(),", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.get_metrics_by_hid_dim": [[220, 258], ["torch.randint", "torch.randint", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "list", "collections.defaultdict", "collections.defaultdict", "range", "rich.print", "tqdm.tqdm", "range", "tqdm.tqdm.close", "collections.defaultdict", "collections.defaultdict", "transformer_scale_test_softmax.get_networks", "torch.randint", "torch.randint", "torch.nn.functional.one_hot", "transformer_scale_test_softmax.get_metrics", "get_metrics.items", "tqdm.tqdm.update", "numpy.mean", "numpy.std", "[].append", "[].append", "[].append"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.get_networks", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.get_metrics", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.Avg.update"], ["", "def", "get_metrics_by_hid_dim", "(", "args", ")", ":", "\n", "    ", "metrics", "=", "{", "\n", "\"exp\"", ":", "defaultdict", "(", "new_tracker", ")", ",", "\n", "\"proj\"", ":", "defaultdict", "(", "new_tracker", ")", ",", "\n", "}", "\n", "token_ids", "=", "torch", ".", "randint", "(", "0", ",", "100", ",", "size", "=", "[", "512", "]", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "hid_dims", "=", "list", "(", "range", "(", "args", ".", "min_h", ",", "args", ".", "max_h", ",", "args", ".", "step_h", ")", ")", "\n", "for", "hid_dim", "in", "hid_dims", ":", "\n", "        ", "print", "(", "f\"=> h={hid_dim}...\"", ")", "\n", "t", "=", "tqdm", "(", "total", "=", "args", ".", "n_trials", "*", "4", ")", "\n", "data", "=", "{", "\n", "\"exp\"", ":", "defaultdict", "(", "list", ")", ",", "\n", "\"proj\"", ":", "defaultdict", "(", "list", ")", "\n", "}", "\n", "for", "trial", "in", "range", "(", "args", ".", "n_trials", ")", ":", "\n", "            ", "networks", "=", "get_networks", "(", "hid_dim", ",", "scale", "=", "args", ".", "scale", ")", "\n", "labels", "=", "torch", ".", "randint", "(", "0", ",", "hid_dim", ",", "size", "=", "(", "512", ",", ")", ")", "\n", "one_hot_labels", "=", "one_hot", "(", "labels", ",", "hid_dim", ")", "\n", "for", "network", "in", "networks", ":", "\n", "                ", "mets", "=", "get_metrics", "(", "\n", "network", ",", "criterion", ",", "token_ids", ",", "labels", ",", "one_hot_labels", "\n", ")", "\n", "for", "metric", ",", "value", "in", "mets", ".", "items", "(", ")", ":", "\n", "                    ", "data", "[", "metric", "]", "[", "network", ".", "name", "]", ".", "append", "(", "value", ")", "\n", "", "t", ".", "update", "(", ")", "\n", "\n", "", "", "for", "metric", "in", "[", "\"proj\"", ",", "\"exp\"", "]", ":", "\n", "            ", "for", "network", "in", "networks", ":", "\n", "                ", "mean", "=", "np", ".", "mean", "(", "data", "[", "metric", "]", "[", "network", ".", "name", "]", ")", "\n", "std", "=", "np", ".", "std", "(", "data", "[", "metric", "]", "[", "network", ".", "name", "]", ")", "\n", "metrics", "[", "metric", "]", "[", "network", ".", "name", "]", "[", "\"mean\"", "]", ".", "append", "(", "mean", ")", "\n", "metrics", "[", "metric", "]", "[", "network", ".", "name", "]", "[", "\"std\"", "]", ".", "append", "(", "std", ")", "\n", "\n", "", "", "t", ".", "close", "(", ")", "\n", "\n", "", "return", "hid_dims", ",", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.get_metrics_by_scale": [[260, 297], ["torch.randint", "torch.randint", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "numpy.linspace", "collections.defaultdict", "collections.defaultdict", "rich.print", "tqdm.tqdm", "collections.defaultdict", "range", "tqdm.tqdm.close", "range", "transformer_scale_test_softmax.Transformer", "torch.randint", "torch.randint", "torch.nn.functional.one_hot", "transformer_scale_test_softmax.TransConfig", "transformer_scale_test_softmax.scale_params", "transformer_scale_test_softmax.get_metrics", "get_metrics.items", "transformer_scale_test_softmax.unscale_params", "tqdm.tqdm.update", "numpy.mean", "numpy.std", "[].append", "[].append", "len", "data[].append"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.scale_params", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.get_metrics", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.unscale_params", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.None.eval_pretrain_sat_brown.Avg.update"], ["", "def", "get_metrics_by_scale", "(", "args", ")", ":", "\n", "    ", "metrics", "=", "{", "\n", "\"exp\"", ":", "defaultdict", "(", "new_tracker", ")", ",", "\n", "\"proj\"", ":", "defaultdict", "(", "new_tracker", ")", ",", "\n", "}", "\n", "token_ids", "=", "torch", ".", "randint", "(", "0", ",", "100", ",", "size", "=", "[", "512", "]", ")", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "scales", "=", "np", ".", "linspace", "(", "1", ",", "10", ",", "30", ")", "\n", "hid_dims", "=", "[", "12", "*", "2", "**", "i", "for", "i", "in", "range", "(", "1", ",", "5", ")", "]", "\n", "for", "hid_dim", "in", "hid_dims", ":", "\n", "        ", "print", "(", "f\"=> h={hid_dim}...\"", ")", "\n", "t", "=", "tqdm", "(", "total", "=", "len", "(", "scales", ")", "*", "args", ".", "n_trials", ")", "\n", "data", "=", "defaultdict", "(", "list", ")", "\n", "for", "trial", "in", "range", "(", "args", ".", "n_trials", ")", ":", "\n", "            ", "network", "=", "Transformer", "(", "TransConfig", "(", "TRANS_SIZE", ",", "hid_dim", ")", ")", "\n", "labels", "=", "torch", ".", "randint", "(", "0", ",", "hid_dim", ",", "size", "=", "(", "512", ",", ")", ")", "\n", "one_hot_labels", "=", "one_hot", "(", "labels", ",", "hid_dim", ")", "\n", "for", "scale", "in", "scales", ":", "\n", "                ", "old_params", "=", "scale_params", "(", "network", ",", "scale", ")", "\n", "mets", "=", "get_metrics", "(", "\n", "network", ",", "criterion", ",", "token_ids", ",", "labels", ",", "one_hot_labels", "\n", ")", "\n", "for", "metric", ",", "value", "in", "mets", ".", "items", "(", ")", ":", "\n", "                    ", "data", "[", "metric", ",", "hid_dim", ",", "scale", "]", ".", "append", "(", "value", ")", "\n", "", "unscale_params", "(", "network", ",", "old_params", ")", "\n", "t", ".", "update", "(", ")", "\n", "\n", "", "", "for", "metric", "in", "metrics", ":", "\n", "            ", "for", "scale", "in", "scales", ":", "\n", "                ", "mean", "=", "np", ".", "mean", "(", "data", "[", "metric", ",", "hid_dim", ",", "scale", "]", ")", "\n", "std", "=", "np", ".", "std", "(", "data", "[", "metric", ",", "hid_dim", ",", "scale", "]", ")", "\n", "metrics", "[", "metric", "]", "[", "hid_dim", "]", "[", "\"mean\"", "]", ".", "append", "(", "mean", ")", "\n", "metrics", "[", "metric", "]", "[", "hid_dim", "]", "[", "\"std\"", "]", ".", "append", "(", "std", ")", "\n", "\n", "", "", "t", ".", "close", "(", ")", "\n", "\n", "", "return", "scales", ",", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.main_hid_dim": [[304, 355], ["metrics.items", "transformer_scale_test_softmax.get_metrics_by_hid_dim", "open", "pickle.dump", "str", "float", "matplotlib.figure", "net_data.items", "matplotlib.legend", "matplotlib.ticklabel_format", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylim", "matplotlib.title", "matplotlib.savefig", "open", "pickle.load", "int", "numpy.asarray", "max", "matplotlib.plot", "matplotlib.fill_between", "matplotlib.yscale", "os.path.isdir", "os.makedirs", "numpy.max", "numpy.asarray", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.get_metrics_by_hid_dim"], ["", "def", "main_hid_dim", "(", "args", ")", ":", "\n", "    ", "if", "not", "args", ".", "load", ":", "\n", "        ", "data", "=", "get_metrics_by_hid_dim", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "f\"{DATA}/scale-softmax-init-{args.scale}.dat\"", ",", "\"rb\"", ")", "as", "fh", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "fh", ")", "\n", "\n", "", "", "with", "open", "(", "f\"{DATA}/scale-softmax-init-{args.scale}.dat\"", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "fh", ")", "\n", "\n", "", "scale", "=", "str", "(", "int", "(", "args", ".", "scale", ")", ")", "if", "args", ".", "scale", "!=", "1.0", "else", "\"\"", "\n", "latex", "=", "{", "\n", "# \"proj\": R\"$\\theta_0^\\top \\cdot \\nabla L_{| \\theta_0}$\",", "\n", "\"proj\"", ":", "R\"$\\mathrm{cos}(\"", "\n", "+", "scale", "\n", "+", "R\"\\theta_0, \\nabla L_{| \"", "\n", "+", "scale", "\n", "+", "R\"\\theta_0})$\"", ",", "\n", "# \"homo-proj\": R\"$f_0^\\top \\cdot ( \\mathrm{softmax}(f_0) - y )$\",", "\n", "\"homo-proj\"", ":", "R\"$\\mathrm{cos}( f_{\"", "\n", "+", "scale", "\n", "+", "R\" \\theta_0}, \\mathrm{softmax}(f_{\"", "\n", "+", "scale", "\n", "+", "R\"\\theta_0}) - y )$\"", ",", "\n", "\"exp\"", ":", "Rf\"$\\Delta \\Vert {scale} \\theta_0 \\Vert^2$\"", "\n", "}", "\n", "\n", "max_mean", "=", "-", "float", "(", "\"inf\"", ")", "\n", "hid_dims", ",", "metrics", "=", "data", "\n", "for", "metric", ",", "net_data", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "plt", ".", "figure", "(", ")", "\n", "for", "net", ",", "series", "in", "net_data", ".", "items", "(", ")", ":", "\n", "            ", "means", "=", "np", ".", "asarray", "(", "series", "[", "\"mean\"", "]", ")", "\n", "max_mean", "=", "max", "(", "max_mean", ",", "np", ".", "max", "(", "np", ".", "abs", "(", "means", ")", ")", ")", "\n", "errors", "=", "2", "*", "np", ".", "asarray", "(", "series", "[", "\"std\"", "]", ")", "\n", "plt", ".", "plot", "(", "hid_dims", ",", "means", ",", "label", "=", "net", ")", "\n", "plt", ".", "fill_between", "(", "hid_dims", ",", "means", "-", "errors", ",", "means", "+", "errors", ",", "alpha", "=", "0.1", ")", "\n", "\n", "", "plt", ".", "legend", "(", "fontsize", "=", "args", ".", "font_size", ")", "\n", "plt", ".", "ticklabel_format", "(", "scilimits", "=", "[", "1", ",", "3", "]", ")", "\n", "plt", ".", "xlabel", "(", "\"num classes\"", ",", "fontsize", "=", "args", ".", "font_size", ")", "\n", "plt", ".", "ylabel", "(", "f\"{latex[metric]}\"", ",", "fontsize", "=", "args", ".", "font_size", ")", "\n", "plt", ".", "ylim", "(", "[", "-", "2", "*", "max_mean", ",", "2", "*", "max_mean", "]", ")", "\n", "if", "args", ".", "symlog", ":", "\n", "            ", "plt", ".", "yscale", "(", "\"symlog\"", ")", "\n", "", "plt", ".", "title", "(", "f\"transformer variants at init by hidden dim\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "f\"{IMAGES}/scale-softmax\"", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "f\"{IMAGES}/scale-softmax\"", ")", "\n", "", "title", "=", "f\"{metric}-{args.scale}\"", "\n", "plt", ".", "savefig", "(", "f\"{IMAGES}/scale-softmax/{title}.pdf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.main_scale": [[357, 398], ["metrics.items", "transformer_scale_test_softmax.get_metrics_by_scale", "open", "pickle.dump", "matplotlib.figure", "net_data.items", "matplotlib.legend", "matplotlib.ticklabel_format", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.ylim", "matplotlib.yscale", "matplotlib.title", "matplotlib.savefig", "open", "pickle.load", "float", "numpy.asarray", "max", "matplotlib.plot", "matplotlib.fill_between", "os.path.isdir", "os.makedirs", "numpy.max", "numpy.asarray", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test_softmax.get_metrics_by_scale"], ["", "", "def", "main_scale", "(", "args", ")", ":", "\n", "    ", "if", "not", "args", ".", "load", ":", "\n", "        ", "data", "=", "get_metrics_by_scale", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "f\"{DATA}/scale-softmax-scale.dat\"", ",", "\"rb\"", ")", "as", "fh", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "fh", ")", "\n", "\n", "", "", "with", "open", "(", "f\"{DATA}/scale-softmax-scale.dat\"", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "fh", ")", "\n", "\n", "", "latex", "=", "{", "\n", "# \"proj\": R\"$\\theta_0^\\top \\cdot \\nabla L_{| \\theta_0}$\",", "\n", "\"proj\"", ":", "R\"$\\mathrm{cos}(c\\theta_0, \\nabla L_{| c\\theta_0})$\"", ",", "\n", "# \"homo-proj\": R\"$f_0^\\top \\cdot ( \\mathrm{softmax}(f_0) - y )$\",", "\n", "\"homo-proj\"", ":", "R\"$\\mathrm{cos}( f_{c\\theta_0}, \\mathrm{softmax}(f_{c\\theta_0}) - y )$\"", ",", "\n", "\"exp\"", ":", "Rf\"$\\Delta \\Vert c \\theta_0 \\Vert^2$\"", "\n", "}", "\n", "\n", "scales", ",", "metrics", "=", "data", "\n", "for", "metric", ",", "net_data", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "max_mean", "=", "-", "float", "(", "\"inf\"", ")", "\n", "plt", ".", "figure", "(", ")", "\n", "for", "hid_dim", ",", "series", "in", "net_data", ".", "items", "(", ")", ":", "\n", "            ", "means", "=", "np", ".", "asarray", "(", "series", "[", "\"mean\"", "]", ")", "\n", "max_mean", "=", "max", "(", "max_mean", ",", "np", ".", "max", "(", "np", ".", "abs", "(", "means", ")", ")", ")", "\n", "# TODO: Percentile instead?", "\n", "errors", "=", "2", "*", "np", ".", "asarray", "(", "series", "[", "\"std\"", "]", ")", "\n", "plt", ".", "plot", "(", "scales", ",", "means", ",", "label", "=", "f\"$h={hid_dim}$\"", ")", "\n", "plt", ".", "fill_between", "(", "scales", ",", "means", "-", "errors", ",", "means", "+", "errors", ",", "alpha", "=", "0.1", ")", "\n", "", "plt", ".", "legend", "(", "fontsize", "=", "args", ".", "font_size", ")", "\n", "plt", ".", "ticklabel_format", "(", "scilimits", "=", "[", "1", ",", "3", "]", ")", "\n", "plt", ".", "xlabel", "(", "\"scale $c$\"", ",", "fontsize", "=", "args", ".", "font_size", ")", "\n", "plt", ".", "ylabel", "(", "f\"{latex[metric]}\"", ",", "fontsize", "=", "args", ".", "font_size", ")", "\n", "plt", ".", "ylim", "(", "[", "-", "2", "*", "max_mean", ",", "2", "*", "max_mean", "]", ")", "\n", "plt", ".", "yscale", "(", "\"symlog\"", ")", "\n", "plt", ".", "title", "(", "f\"projection by scale for different hidden dims\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "f\"{IMAGES}/scale-softmax\"", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "f\"{IMAGES}/scale-softmax\"", ")", "\n", "", "title", "=", "f\"{metric}-scales\"", "\n", "plt", ".", "savefig", "(", "f\"{IMAGES}/scale-softmax/{title}.pdf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.parse_args": [[16, 29], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_train\"", ",", "type", "=", "int", ",", "default", "=", "200", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_epochs\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_batch\"", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "\"--cuda\"", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--x_dim\"", ",", "type", "=", "int", ",", "default", "=", "50", ")", "\n", "parser", ".", "add_argument", "(", "\"--h_dim\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--y_dim\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "\"--save\"", ",", "type", "=", "str", ",", "default", "=", "\"data/time_series.dat\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--bce\"", ",", "action", "=", "\"store_true\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.ntk": [[31, 55], ["torch.stack", "torch.cat", "torch.stack", "torch.cat", "x.flatten", "torch.autograd.grad", "x.flatten", "net", "net.parameters", "torch.autograd.grad", "net", "net.parameters"], "function", ["None"], ["", "def", "ntk", "(", "net", ",", "x1", ",", "x2", "=", "None", ")", ":", "\n", "    ", "\"\"\"Compute the NTK matrix comparing `x1` against `x2`.\n\n    The number of gradient computations (the major bottleneck) is `len(x1) + len(x2)`.\n    \"\"\"", "\n", "# kernel = torch.empty(len(x1), len(x2), device=x1.device)", "\n", "\n", "# Compute the gradients with respect to the first list of inputs.", "\n", "grad1", "=", "[", "\n", "torch", ".", "cat", "(", "[", "x", ".", "flatten", "(", ")", "for", "x", "in", "grad", "(", "net", "(", "xi", ")", ",", "net", ".", "parameters", "(", ")", ")", "]", ")", "for", "xi", "in", "x1", "\n", "]", "\n", "grad1", "=", "torch", ".", "stack", "(", "grad1", ",", "dim", "=", "0", ")", "\n", "\n", "# Compute the gradients with respect to the second list of inputs.", "\n", "if", "x2", "is", "None", ":", "\n", "        ", "grad2", "=", "grad1", ".", "T", "\n", "", "else", ":", "\n", "        ", "grad2", "=", "[", "\n", "torch", ".", "cat", "(", "[", "x", ".", "flatten", "(", ")", "for", "x", "in", "grad", "(", "net", "(", "xj", ")", ",", "net", ".", "parameters", "(", ")", ")", "]", ")", "\n", "for", "xj", "in", "x2", "\n", "]", "\n", "grad2", "=", "torch", ".", "stack", "(", "grad2", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "grad1", "@", "grad2", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.linearize": [[57, 64], ["f", "toy_ntk.ntk", "ntk().pinverse", "f", "toy_ntk.ntk"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.ntk", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.ntk"], ["", "def", "linearize", "(", "f", ",", "X", ",", "Y", ")", ":", "\n", "    ", "def", "_f", "(", "x", ")", ":", "\n", "# We can't memoize this kernel, since the parameters in f can change.", "\n", "# FIXME: Rarely (but sometimes) get an error computing the true inverse here.", "\n", "        ", "return", "f", "(", "x", ")", "-", "ntk", "(", "f", ",", "x", ",", "X", ")", "@", "ntk", "(", "f", ",", "X", ",", "X", ")", ".", "pinverse", "(", ")", "@", "(", "f", "(", "X", ")", "-", "Y", ")", "\n", "\n", "", "return", "_f", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.solve_params": [[66, 78], ["memo.squeeze.squeeze", "torch.autograd.grad", "torch.stack", "ntk().pinverse", "f", "f.parameters", "zip", "f", "toy_ntk.ntk"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.ntk"], ["", "def", "solve_params", "(", "f", ",", "X", ",", "Y", ")", ":", "\n", "    ", "\"\"\"Returns `omega_t`, the difference in parameters updated by linear dynamics.\n\n    See: https://arxiv.org/pdf/1902.06720.pdf\n    \"\"\"", "\n", "# TODO: Can actually memoize this gradient computation from the ntk.", "\n", "grads", "=", "[", "grad", "(", "f", "(", "xi", ")", ",", "f", ".", "parameters", "(", ")", ")", "for", "xi", "in", "X", "]", "\n", "# import pdb; pdb.set_trace()", "\n", "grads_trans", "=", "[", "torch", ".", "stack", "(", "grad", ",", "dim", "=", "-", "1", ")", "for", "grad", "in", "zip", "(", "*", "grads", ")", "]", "\n", "memo", "=", "ntk", "(", "f", ",", "X", ")", ".", "pinverse", "(", ")", "@", "(", "Y", "-", "f", "(", "X", ")", ")", "\n", "memo", "=", "memo", ".", "squeeze", "(", "dim", "=", "1", ")", "\n", "return", "[", "grad_trans", "@", "memo", "for", "grad_trans", "in", "grads_trans", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.metrics": [[80, 85], ["len"], "function", ["None"], ["", "def", "metrics", "(", "preds", ",", "labels", ")", ":", "\n", "# The train loss should be 0 based on Vivek's derivation.", "\n", "    ", "return", "{", "\n", "\"loss\"", ":", "(", "preds", "-", "labels", ")", ".", "norm", "(", "p", "=", "2", ")", ".", "item", "(", ")", "/", "len", "(", "preds", ")", ",", "\n", "\"saturation\"", ":", "(", "2", "*", "preds", "-", "1", ")", ".", "abs", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.map_append": [[88, 91], ["metrics.items", "time_series[].append"], "function", ["None"], ["", "def", "map_append", "(", "time_series", ",", "metrics", ")", ":", "\n", "    ", "for", "name", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "time_series", "[", "name", "]", ".", "append", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.make_data": [[93, 103], ["rich.print", "torch.randn", "torch.randn", "torch.randn"], "function", ["None"], ["", "", "def", "make_data", "(", "args", ")", ":", "\n", "    ", "\"\"\"Create linearly separable data.\"\"\"", "\n", "print", "(", "\"Generating data..\"", ")", "\n", "n_test", "=", "args", ".", "n_train", "//", "10", "\n", "W", "=", "torch", ".", "randn", "(", "args", ".", "x_dim", ",", "args", ".", "y_dim", ",", "device", "=", "args", ".", "cuda", ")", "\n", "X", "=", "torch", ".", "randn", "(", "args", ".", "n_train", ",", "args", ".", "x_dim", ",", "device", "=", "args", ".", "cuda", ")", "\n", "Y", "=", "(", "(", "X", "@", "W", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "x", "=", "torch", ".", "randn", "(", "n_test", ",", "args", ".", "x_dim", ",", "device", "=", "args", ".", "cuda", ")", "\n", "y", "=", "(", "(", "x", "@", "W", ")", ">", "0", ")", ".", "float", "(", ")", "\n", "return", "X", ",", "Y", ",", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.make_network": [[105, 122], ["rich.print", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sequential.cuda"], "function", ["None"], ["", "def", "make_network", "(", "args", ")", ":", "\n", "    ", "print", "(", "\"Creating network..\"", ")", "\n", "net", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "torch", ".", "nn", ".", "Linear", "(", "args", ".", "x_dim", ",", "args", ".", "h_dim", ",", "bias", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "args", ".", "h_dim", ",", "args", ".", "y_dim", ",", "bias", "=", "False", ")", ",", "\n", "torch", ".", "nn", ".", "Sigmoid", "(", ")", ",", "\n", ")", "\n", "# net = torch.nn.Sequential(", "\n", "#     torch.nn.Linear(args.x_dim, args.h_dim),", "\n", "#     torch.nn.Sigmoid(),", "\n", "#     torch.nn.Linear(args.h_dim, args.y_dim),", "\n", "#     torch.nn.Sigmoid(),", "\n", "# )", "\n", "if", "args", ".", "cuda", "is", "not", "None", ":", "\n", "        ", "net", ".", "cuda", "(", "args", ".", "cuda", ")", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.param_space_linearize": [[124, 186], ["toy_ntk.solve_params", "f", "f", "rich.print", "rich.print", "zip", "f", "f", "rich.print", "rich.print", "src.saturate.saturate", "f", "f", "f.parameters", "src.saturate.saturate", "f", "f", "f.round", "f.round", "f.round", "f.round"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.solve_params"], ["", "def", "param_space_linearize", "(", "f", ",", "X", ",", "Y", ",", "x", ",", "y", ")", ":", "\n", "# # This part takes the prediction points.", "\n", "# order0 = f(X).squeeze(dim=-1)", "\n", "# order1 = torch.stack(", "\n", "#     [torch.cat([g.flatten() for g in grad(f(xj), f.parameters())]) for xj in X],", "\n", "#     dim=0,", "\n", "# )", "\n", "# with saturate(f, no_grad=False):", "\n", "#     sat_order0 = f(X).squeeze(dim=-1)", "\n", "#     sat_order1 = torch.stack(", "\n", "#         [torch.cat([g.flatten() for g in grad(f(xj), f.parameters())]) for xj in X],", "\n", "#         dim=0,", "\n", "#     )", "\n", "\n", "# # This part takes the train data.", "\n", "    ", "omegas", "=", "solve_params", "(", "f", ",", "X", ",", "Y", ")", "\n", "# flat_omegas = torch.cat([omega.flatten() for omega in omegas])", "\n", "# f_unsat = order0 + order1 @ flat_omegas", "\n", "# f_sat = sat_order0 + sat_order1 @ flat_omegas", "\n", "\n", "train", "=", "f", "(", "X", ")", "\n", "test", "=", "f", "(", "x", ")", "\n", "with", "saturate", "(", "f", ")", ":", "\n", "        ", "sat_train", "=", "f", "(", "X", ")", "\n", "sat_test", "=", "f", "(", "x", ")", "\n", "\n", "", "print", "(", "\n", "\"init-round\"", ",", "\n", "{", "\n", "\"train_acc\"", ":", "(", "train", ".", "round", "(", ")", "==", "Y", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "\"test_acc\"", ":", "(", "test", ".", "round", "(", ")", "==", "y", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "}", ",", "\n", ")", "\n", "print", "(", "\n", "\"init-sat\"", ",", "\n", "{", "\n", "\"train_acc\"", ":", "(", "sat_train", "==", "Y", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "\"test_acc\"", ":", "(", "sat_test", "==", "y", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "}", ",", "\n", ")", "\n", "\n", "for", "param", ",", "omega", "in", "zip", "(", "f", ".", "parameters", "(", ")", ",", "omegas", ")", ":", "\n", "        ", "param", ".", "data", "+=", "omega", "\n", "\n", "", "train", "=", "f", "(", "X", ")", "\n", "test", "=", "f", "(", "x", ")", "\n", "with", "saturate", "(", "f", ")", ":", "\n", "        ", "sat_train", "=", "f", "(", "X", ")", "\n", "sat_test", "=", "f", "(", "x", ")", "\n", "\n", "", "print", "(", "\n", "\"fine-round\"", ",", "\n", "{", "\n", "\"train_acc\"", ":", "(", "train", ".", "round", "(", ")", "==", "Y", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "\"test_acc\"", ":", "(", "test", ".", "round", "(", ")", "==", "y", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "}", ",", "\n", ")", "\n", "print", "(", "\n", "\"fine-sat\"", ",", "\n", "{", "\n", "\"train_acc\"", ":", "(", "sat_train", "==", "Y", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "\"test_acc\"", ":", "(", "sat_test", "==", "y", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.run_experiment": [[191, 238], ["toy_ntk.make_data", "toy_ntk.make_network", "toy_ntk.linearize", "toy_ntk.param_space_linearize", "toy_ntk.map_append", "toy_ntk.map_append", "torch.optim.AdamW", "rich.print", "range", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "torch.no_grad", "toy_ntk.map_append", "toy_ntk.map_append", "toy_ntk.metrics", "toy_ntk.metrics", "make_network.parameters", "torch.nn.BCELoss", "torch.nn.MSELoss", "rich.print", "torch.randperm", "tqdm.trange", "toy_ntk.map_append", "toy_ntk.map_append", "toy_ntk.metrics", "toy_ntk.metrics", "linearize.", "linearize.", "len", "make_network.", "torch.optim.AdamW.zero_grad", "criterion", "criterion.backward", "torch.optim.AdamW.step", "torch.no_grad", "toy_ntk.map_append", "toy_ntk.map_append", "toy_ntk.metrics", "toy_ntk.metrics", "make_network.", "make_network.", "toy_ntk.metrics", "toy_ntk.metrics", "linearize.", "linearize.", "make_network.", "make_network."], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.make_data", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.make_network", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.linearize", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.param_space_linearize", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.map_append", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.map_append", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.map_append", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.map_append", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.metrics", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.metrics", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.map_append", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.map_append", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.metrics", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.metrics", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.norm_sgd.NormSGD.step", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.map_append", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.map_append", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.metrics", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.metrics", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.metrics", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.metrics"], ["", "def", "run_experiment", "(", "args", ")", ":", "\n", "    ", "X", ",", "Y", ",", "x", ",", "y", "=", "make_data", "(", "args", ")", "\n", "f", "=", "make_network", "(", "args", ")", "\n", "f_lin", "=", "linearize", "(", "f", ",", "X", ",", "Y", ")", "\n", "\n", "param_space_linearize", "(", "f", ",", "X", ",", "Y", ",", "x", ",", "y", ")", "\n", "\n", "time_series", "=", "{", "\n", "\"train\"", ":", "defaultdict", "(", "list", ")", ",", "\n", "\"test\"", ":", "defaultdict", "(", "list", ")", ",", "\n", "\"train+NTK\"", ":", "defaultdict", "(", "list", ")", ",", "\n", "\"test+NTK\"", ":", "defaultdict", "(", "list", ")", ",", "\n", "}", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "map_append", "(", "time_series", "[", "\"train\"", "]", ",", "metrics", "(", "f", "(", "X", ")", ",", "Y", ")", ")", "\n", "map_append", "(", "time_series", "[", "\"test\"", "]", ",", "metrics", "(", "f", "(", "x", ")", ",", "y", ")", ")", "\n", "", "map_append", "(", "time_series", "[", "\"train+NTK\"", "]", ",", "metrics", "(", "f_lin", "(", "X", ")", ",", "Y", ")", ")", "\n", "map_append", "(", "time_series", "[", "\"test+NTK\"", "]", ",", "metrics", "(", "f_lin", "(", "x", ")", ",", "y", ")", ")", "\n", "\n", "optim", "=", "AdamW", "(", "f", ".", "parameters", "(", ")", ")", "\n", "# See https://pytorch.org/docs/stable/generated/torch.nn.BCELoss.html.", "\n", "criterion", "=", "nn", ".", "BCELoss", "(", ")", "if", "args", ".", "bce", "else", "nn", ".", "MSELoss", "(", ")", "\n", "print", "(", "\"Starting optimization...\"", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "n_epochs", ")", ":", "\n", "        ", "print", "(", "f\"  => epoch={epoch}\"", ")", "\n", "# Create a shuffled copy of the data. We need to preserve the original order for NTK.", "\n", "perm", "=", "torch", ".", "randperm", "(", "len", "(", "X", ")", ")", "\n", "X_perm", "=", "X", "[", "perm", ",", ":", "]", "\n", "Y_perm", "=", "Y", "[", "perm", ",", ":", "]", "\n", "\n", "for", "batch", "in", "tqdm", ".", "trange", "(", "args", ".", "n_train", "//", "args", ".", "n_batch", ")", ":", "\n", "            ", "batch_X", "=", "X_perm", "[", "batch", "*", "args", ".", "n_batch", ":", "(", "batch", "+", "1", ")", "*", "args", ".", "n_batch", "]", "\n", "batch_Y", "=", "Y_perm", "[", "batch", "*", "args", ".", "n_batch", ":", "(", "batch", "+", "1", ")", "*", "args", ".", "n_batch", "]", "\n", "preds", "=", "f", "(", "batch_X", ")", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "loss", "=", "criterion", "(", "preds", ",", "batch_Y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "\n", "# Record metrics at end of epoch.", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "map_append", "(", "time_series", "[", "\"train\"", "]", ",", "metrics", "(", "f", "(", "X", ")", ",", "Y", ")", ")", "\n", "map_append", "(", "time_series", "[", "\"test\"", "]", ",", "metrics", "(", "f", "(", "x", ")", ",", "y", ")", ")", "\n", "", "map_append", "(", "time_series", "[", "\"train+NTK\"", "]", ",", "metrics", "(", "f_lin", "(", "X", ")", ",", "Y", ")", ")", "\n", "map_append", "(", "time_series", "[", "\"test+NTK\"", "]", ",", "metrics", "(", "f_lin", "(", "x", ")", ",", "y", ")", ")", "\n", "\n", "", "return", "time_series", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.main": [[240, 265], ["time_series[].keys", "toy_ntk.run_experiment", "plt.figure", "zip", "plt.legend", "plt.title", "plt.xlabel", "plt.ylabel", "plt.savefig", "rich.print", "open", "pickle.dump", "open", "pickle.load", "pickle.load.items", "plt.plot"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.toy_ntk.run_experiment"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "load", "is", "None", ":", "\n", "        ", "time_series", "=", "run_experiment", "(", "args", ")", "\n", "with", "open", "(", "args", ".", "save", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "            ", "pickle", ".", "dump", "(", "time_series", ",", "fh", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "args", ".", "load", ",", "\"rb\"", ")", "as", "fh", ":", "\n", "            ", "time_series", "=", "pickle", ".", "load", "(", "fh", ")", "\n", "\n", "", "", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "\n", "styles", "=", "[", "\".-\"", ",", "\"--\"", ",", "\"-\"", ",", "\":\"", "]", "\n", "\n", "metric_names", "=", "time_series", "[", "\"train\"", "]", ".", "keys", "(", ")", "\n", "for", "metric", "in", "metric_names", ":", "\n", "        ", "plt", ".", "figure", "(", ")", "\n", "for", "style", ",", "(", "key", ",", "data", ")", "in", "zip", "(", "styles", ",", "time_series", ".", "items", "(", ")", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "data", "[", "metric", "]", ",", "label", "=", "key", ",", "linestyle", "=", "style", ")", "\n", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "title", "(", "f\"{metric} over training\"", ")", "\n", "plt", ".", "xlabel", "(", "\"epoch\"", ")", "\n", "plt", ".", "ylabel", "(", "metric", ")", "\n", "path", "=", "f\"figs/toy-ntk/{metric}.pdf\"", "\n", "plt", ".", "savefig", "(", "path", ")", "\n", "print", "(", "f\"=> Saved {path}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.AutoEncoder.__init__": [[29, 36], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Embedding", "torch.Embedding", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_bytes", ",", "out_bytes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "1", "<<", "in_bytes", ",", "out_bytes", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "out_bytes", ",", "1", "<<", "in_bytes", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.AutoEncoder.encode": [[37, 39], ["finetune.AutoEncoder.encoder"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "return", "self", ".", "encoder", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.AutoEncoder.decode": [[40, 42], ["finetune.AutoEncoder.decoder"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "z", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "return", "self", ".", "decoder", "(", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.AutoEncoder.forward": [[43, 46], ["finetune.AutoEncoder.encode", "finetune.AutoEncoder.decode"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.AutoEncoder.encode", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.AutoEncoder.decode"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "encoding", "=", "self", ".", "encode", "(", "x", ")", "\n", "return", "encoding", ",", "self", ".", "decode", "(", "encoding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.parse_args": [[18, 26], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_bits\"", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "\"--hid_max\"", ",", "type", "=", "int", ",", "default", "=", "15", ")", "\n", "parser", ".", "add_argument", "(", "\"--hid_step\"", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.generate_data": [[48, 50], ["torch.arange", "torch.arange"], "function", ["None"], ["", "", "def", "generate_data", "(", "num_bits", ":", "int", ",", "device", "=", "None", ")", ":", "\n", "    ", "return", "torch", ".", "arange", "(", "0", ",", "1", "<<", "num_bits", ",", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.get_norm": [[52, 55], ["torch.cat().norm", "torch.cat().norm", "model.parameters", "torch.cat", "torch.cat", "p.flatten"], "function", ["None"], ["", "def", "get_norm", "(", "model", ")", ":", "\n", "    ", "params", "=", "[", "p", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "and", "p", ".", "grad", "is", "not", "None", "]", "\n", "return", "torch", ".", "cat", "(", "[", "p", ".", "flatten", "(", ")", "for", "p", "in", "params", "]", ")", ".", "norm", "(", "p", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.get_saturation": [[57, 67], ["model.encode", "torch.einsum", "torch.einsum", "model.encode.norm", "model.encode.norm", "sats.mean", "src.saturate.saturate", "model.encode"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.AutoEncoder.encode", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.AutoEncoder.encode"], ["", "def", "get_saturation", "(", "model", ",", "data", ")", ":", "\n", "    ", "soft", "=", "model", ".", "encode", "(", "data", ")", "\n", "with", "saturate", "(", "model", ")", ":", "\n", "        ", "hard", "=", "model", ".", "encode", "(", "data", ")", "\n", "\n", "", "prod", "=", "torch", ".", "einsum", "(", "\"bi, bi -> b\"", ",", "soft", ",", "hard", ")", "\n", "soft_norm", "=", "soft", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "hard_norm", "=", "hard", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "-", "1", ")", "\n", "sats", "=", "prod", "/", "(", "soft_norm", "*", "hard_norm", "+", "1e-9", ")", "\n", "return", "sats", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.train_model": [[69, 96], ["model.train", "collections.defaultdict", "tqdm.tqdm", "range", "torch.randperm", "torch.randperm", "range", "metrics.items", "len", "len", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "optimizer.step", "get_norm().item", "criterion.item", "get_saturation().item", "timeseries[].append", "finetune.get_norm", "finetune.get_saturation", "output.argmax"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.src.norm_sgd.NormSGD.step", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.get_norm", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.get_saturation"], ["", "def", "train_model", "(", "args", ",", "model", ",", "data", ",", "optimizer", ",", "criterion", ",", "epochs", "=", "10", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "timeseries", "=", "defaultdict", "(", "list", ")", "\n", "for", "e", "in", "tqdm", ".", "tqdm", "(", "range", "(", "epochs", ")", ",", "ascii", "=", "True", ")", ":", "\n", "        ", "perm", "=", "torch", ".", "randperm", "(", "len", "(", "data", ")", ")", "\n", "data", "=", "data", "[", "perm", "]", "\n", "\n", "for", "b", "in", "range", "(", "0", ",", "len", "(", "data", ")", ",", "args", ".", "batch_size", ")", ":", "\n", "            ", "batch", "=", "data", "[", "b", ":", "b", "+", "args", ".", "batch_size", "]", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "encoding", ",", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "data", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "metrics", "=", "{", "\n", "\"acc1\"", ":", "(", "output", ".", "argmax", "(", "dim", "=", "-", "1", ")", "==", "data", ")", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "\n", "\"norm\"", ":", "get_norm", "(", "model", ")", ".", "item", "(", ")", ",", "\n", "\"loss\"", ":", "loss", ".", "item", "(", ")", ",", "\n", "\"sat\"", ":", "get_saturation", "(", "model", ",", "data", ")", ".", "item", "(", ")", ",", "\n", "}", "\n", "for", "name", ",", "value", "in", "metrics", ".", "items", "(", ")", ":", "\n", "            ", "timeseries", "[", "name", "]", ".", "append", "(", "value", ")", "\n", "# tqdm.tqdm.write(f\"e{e}:\", \", \".join(f\"{n}={v}\" for n, v in metrics.items()))", "\n", "\n", "", "", "return", "timeseries", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.main": [[98, 141], ["finetune.generate_data", "collections.defaultdict", "range", "[].keys", "finetune.AutoEncoder", "AutoEncoder.cuda", "torch.CrossEntropyLoss", "finetune.train_model", "finetune.train_model", "copy.deepcopy", "[].items", "matplotlib.get_cmap", "numpy.linspace", "matplotlib.figure", "zip", "matplotlib.plot", "matplotlib.legend", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.hsv", "matplotlib.savefig", "torch.optim.AdamW", "src.norm_sgd.NormSGD", "[].extend", "collections.defaultdict.items", "matplotlib.plot", "len", "AutoEncoder.parameters", "AutoEncoder.parameters", "min", "min", "max", "max", "str", "min", "max"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.generate_data", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.train_model", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.finetune.train_model"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "data", "=", "generate_data", "(", "args", ".", "n_bits", ",", "device", "=", "args", ".", "gpu", ")", "\n", "all_series", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "for", "hid_bits", "in", "range", "(", "1", ",", "args", ".", "hid_max", ",", "args", ".", "hid_step", ")", ":", "\n", "        ", "model", "=", "AutoEncoder", "(", "args", ".", "n_bits", ",", "hid_bits", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "all_series", "[", "hid_bits", "]", "[", "\"pre\"", "]", "=", "train_model", "(", "\n", "args", ",", "model", ",", "data", ",", "optim", ".", "AdamW", "(", "model", ".", "parameters", "(", ")", ")", ",", "criterion", ",", "epochs", "=", "100", "\n", ")", "\n", "all_series", "[", "hid_bits", "]", "[", "\"fine\"", "]", "=", "train_model", "(", "\n", "args", ",", "\n", "model", ",", "\n", "data", ",", "\n", "NormSGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", ",", "\n", "criterion", ",", "\n", "epochs", "=", "100", ",", "\n", ")", "\n", "\n", "all_series", "[", "hid_bits", "]", "[", "\"all\"", "]", "=", "deepcopy", "(", "all_series", "[", "hid_bits", "]", "[", "\"pre\"", "]", ")", "\n", "for", "key", ",", "series", "in", "all_series", "[", "hid_bits", "]", "[", "\"fine\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "all_series", "[", "hid_bits", "]", "[", "\"all\"", "]", "[", "key", "]", ".", "extend", "(", "series", ")", "\n", "\n", "\n", "", "", "colors", "=", "plt", ".", "get_cmap", "(", "\"hsv\"", ")", "(", "np", ".", "linspace", "(", ".2", ",", ".8", ",", "15", ")", ")", "#\"Greys\"", "\n", "for", "metric", "in", "all_series", "[", "1", "]", "[", "\"all\"", "]", ".", "keys", "(", ")", ":", "\n", "        ", "plt", ".", "figure", "(", ")", "\n", "minval", ",", "maxval", "=", "None", ",", "None", "\n", "for", "color", ",", "(", "hid_bits", ",", "data", ")", "in", "zip", "(", "colors", ",", "all_series", ".", "items", "(", ")", ")", ":", "\n", "            ", "values", "=", "data", "[", "\"all\"", "]", "[", "metric", "]", "\n", "plt", ".", "plot", "(", "values", ",", "label", "=", "str", "(", "hid_bits", ")", ",", "color", "=", "color", ")", "\n", "minval", "=", "min", "(", "minval", ",", "min", "(", "values", ")", ")", "if", "minval", "is", "not", "None", "else", "min", "(", "values", ")", "\n", "maxval", "=", "max", "(", "maxval", ",", "max", "(", "values", ")", ")", "if", "maxval", "is", "not", "None", "else", "max", "(", "values", ")", "\n", "", "split", "=", "len", "(", "data", "[", "\"pre\"", "]", "[", "metric", "]", ")", "-", "1", "\n", "plt", ".", "plot", "(", "[", "split", ",", "split", "]", ",", "[", "minval", ",", "maxval", "]", ",", "\"k-\"", ",", "lw", "=", "2", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "title", "(", "f\"{metric} over time\"", ")", "\n", "plt", ".", "xlabel", "(", "\"epoch\"", ")", "\n", "plt", ".", "ylabel", "(", "metric", ")", "\n", "plt", ".", "hsv", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"figs/finetune/{metric}.pdf\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.SelfAttention.__init__": [[25, 36], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "type"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "10", ",", "key_dim", "=", "10", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "key_map", "=", "Linear", "(", "input_dim", ",", "key_dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "query_map", "=", "Linear", "(", "input_dim", ",", "key_dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "value_map", "=", "Linear", "(", "input_dim", ",", "input_dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "lnorm", "=", "LayerNorm", "(", "input_dim", ")", "\n", "\n", "self", ".", "name", "=", "type", "(", "self", ")", ".", "__name__", "\n", "if", "not", "bias", ":", "\n", "            ", "self", ".", "name", "+=", "\" (no biases)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.SelfAttention.forward": [[37, 44], ["transformer_scale_test.SelfAttention.key_map", "transformer_scale_test.SelfAttention.query_map", "transformer_scale_test.SelfAttention.value_map", "torch.softmax", "transformer_scale_test.SelfAttention.lnorm", "transformer_scale_test.SelfAttention.t"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "keys", "=", "self", ".", "key_map", "(", "inputs", ")", "\n", "queries", "=", "self", ".", "query_map", "(", "inputs", ")", "\n", "values", "=", "self", ".", "value_map", "(", "inputs", ")", "\n", "attn_weights", "=", "torch", ".", "softmax", "(", "keys", "@", "queries", ".", "t", "(", ")", ",", "dim", "=", "-", "1", ")", "\n", "outputs", "=", "attn_weights", "@", "values", "\n", "return", "self", ".", "lnorm", "(", "outputs", "+", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.FullyConnected.__init__": [[47, 59], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LayerNorm", "type"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "10", ",", "hidden_dim", "=", "100", ",", "bias", "=", "True", ",", "residual", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "first", "=", "Linear", "(", "input_dim", ",", "hidden_dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "second", "=", "Linear", "(", "hidden_dim", ",", "input_dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "lnorm", "=", "LayerNorm", "(", "input_dim", ")", "\n", "self", ".", "residual", "=", "residual", "\n", "\n", "self", ".", "name", "=", "type", "(", "self", ")", ".", "__name__", "\n", "if", "not", "bias", "and", "not", "residual", ":", "\n", "            ", "self", ".", "name", "+=", "\" (no biases or res)\"", "\n", "", "elif", "not", "bias", ":", "\n", "            ", "self", ".", "name", "+=", "\" (no biases)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.FullyConnected.forward": [[60, 67], ["transformer_scale_test.FullyConnected.first().relu", "transformer_scale_test.FullyConnected.second", "transformer_scale_test.FullyConnected.lnorm", "transformer_scale_test.FullyConnected.lnorm", "transformer_scale_test.FullyConnected.first"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "hidden", "=", "self", ".", "first", "(", "inputs", ")", ".", "relu", "(", ")", "\n", "hidden", "=", "self", ".", "second", "(", "hidden", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "return", "self", ".", "lnorm", "(", "hidden", "+", "inputs", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "lnorm", "(", "hidden", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.TransformerLayer.__init__": [[70, 76], ["torch.nn.Module.__init__", "transformer_scale_test.SelfAttention", "transformer_scale_test.FullyConnected"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "input_dim", "=", "10", ",", "hidden_dim", "=", "100", ",", "key_dim", "=", "10", ",", "bias", "=", "True", ",", "residual", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "SelfAttention", "(", "input_dim", ",", "key_dim", ",", "bias", ")", "\n", "self", ".", "fully_connected", "=", "FullyConnected", "(", "input_dim", ",", "hidden_dim", ",", "bias", ",", "residual", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.TransformerLayer.forward": [[77, 80], ["transformer_scale_test.TransformerLayer.attention", "transformer_scale_test.TransformerLayer.fully_connected"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "attention", "=", "self", ".", "attention", "(", "x", ")", "\n", "return", "self", ".", "fully_connected", "(", "attention", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__": [[83, 102], ["torch.nn.Module.__init__", "enumerate", "transformer_scale_test.TransformerLayer", "setattr", "range"], "methods", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "n_layers", ":", "int", "=", "10", ",", "\n", "input_dim", "=", "10", ",", "\n", "hidden_dim", "=", "100", ",", "\n", "key_dim", "=", "10", ",", "\n", "bias", "=", "True", ",", "\n", "residual", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "f\"Transformer ({n_layers})\"", "\n", "self", ".", "layers", "=", "[", "\n", "TransformerLayer", "(", "input_dim", ",", "hidden_dim", ",", "key_dim", ",", "bias", ",", "residual", ")", "\n", "for", "_", "in", "range", "(", "n_layers", ")", "\n", "]", "\n", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "# self.add_module(f\"layer_{i}\", layer)", "\n", "            ", "setattr", "(", "self", ",", "f\"layer_{i}\"", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.Transformer.forward": [[103, 107], ["layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "inputs", "=", "layer", "(", "inputs", ")", "\n", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.get_norm": [[19, 22], ["torch.cat().norm", "param.flatten", "network.parameters", "torch.cat"], "function", ["None"], ["def", "get_norm", "(", "network", ")", ":", "\n", "    ", "params", "=", "[", "param", ".", "flatten", "(", ")", "for", "param", "in", "network", ".", "parameters", "(", ")", "]", "\n", "return", "torch", ".", "cat", "(", "params", ")", ".", "norm", "(", "p", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.scale_params": [[109, 115], ["module.parameters", "old_params.append", "param.data.clone"], "function", ["None"], ["", "", "def", "scale_params", "(", "module", ",", "scale", ":", "int", ")", ":", "\n", "    ", "old_params", "=", "[", "]", "\n", "for", "param", "in", "module", ".", "parameters", "(", ")", ":", "\n", "        ", "old_params", ".", "append", "(", "param", ".", "data", ".", "clone", "(", ")", ")", "\n", "param", ".", "data", "*=", "scale", "\n", "", "return", "old_params", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.unscale_params": [[117, 120], ["zip", "module.parameters"], "function", ["None"], ["", "def", "unscale_params", "(", "module", ",", "old_params", ")", ":", "\n", "    ", "for", "param", ",", "old_data", "in", "zip", "(", "module", ".", "parameters", "(", ")", ",", "old_params", ")", ":", "\n", "        ", "param", ".", "data", "=", "old_data", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.generate": [[122, 173], ["torch.randn", "collections.defaultdict", "collections.defaultdict", "torch.nn.CrossEntropyLoss", "list", "transformer_scale_test.get_norm", "rich.print", "tqdm.tqdm", "range", "numpy.linspace", "int", "round", "transformer_scale_test.scale_params", "network", "network.argmax", "torch.nn.CrossEntropyLoss.", "list", "torch.cat", "torch.cat", "grad_projs[].append", "grad_projs_unnorm[].append", "transformer_scale_test.unscale_params", "inputs.cuda.cuda", "network.parameters", "gr.flatten", "param.flatten", "torch.autograd.grad", "torch.cat.norm", "torch.cat.norm"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.get_norm", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.scale_params", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.unscale_params"], ["", "", "def", "generate", "(", "networks", ",", "args", ",", "dim", ")", ":", "\n", "    ", "inputs", "=", "torch", ".", "randn", "(", "dim", ",", "10", ")", "\n", "scales", "=", "list", "(", "range", "(", "1", ",", "50", ",", "1", ")", ")", "+", "[", "1000", "]", "\n", "grad_projs", "=", "defaultdict", "(", "list", ")", "\n", "grad_projs_unnorm", "=", "defaultdict", "(", "list", ")", "\n", "\n", "n_samples", "=", "args", ".", "dim", "\n", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "norms", "=", "{", "network", ".", "name", ":", "get_norm", "(", "network", ")", "for", "network", "in", "networks", "}", "\n", "for", "network", "in", "networks", ":", "\n", "# outputs = []", "\n", "# all_grads = []", "\n", "        ", "print", "(", "f\"[gray]=>[/gray] [green]Computing values for {network}[/green]\"", ")", "\n", "\n", "for", "acc", "in", "tqdm", "(", "np", ".", "linspace", "(", "args", ".", "acc_min", ",", "1.", ",", "args", ".", "acc_step", ")", ")", ":", "\n", "            ", "n_mistakes", "=", "int", "(", "round", "(", "n_samples", "*", "(", "1", "-", "acc", ")", ")", ")", "\n", "for", "scale", "in", "scales", ":", "\n", "                ", "old_params", "=", "scale_params", "(", "network", ",", "scale", ")", "\n", "\n", "if", "args", ".", "cuda", ":", "\n", "                    ", "inputs", "=", "inputs", ".", "cuda", "(", "0", ")", "\n", "\n", "# Assume that the input is 1-homogeneous.", "\n", "", "output", "=", "network", "(", "scale", "*", "inputs", ")", "\n", "\n", "# Fake loss function for computing grads with softmax cross-entropy loss.", "\n", "labels", "=", "output", ".", "argmax", "(", "dim", "=", "-", "1", ")", "\n", "labels", "[", ":", "n_mistakes", "]", "=", "9", "-", "labels", "[", ":", "n_mistakes", "]", "\n", "# labels = torch.zeros_like(labels, dtype=torch.long)", "\n", "loss", "=", "criterion", "(", "output", ",", "labels", ")", "\n", "params", "=", "list", "(", "network", ".", "parameters", "(", ")", ")", "\n", "grads", "=", "torch", ".", "cat", "(", "[", "gr", ".", "flatten", "(", ")", "for", "gr", "in", "grad", "(", "loss", ",", "params", ")", "]", ")", "\n", "params", "=", "torch", ".", "cat", "(", "[", "param", ".", "flatten", "(", ")", "for", "param", "in", "params", "]", ")", "\n", "\n", "grad_projs", "[", "network", ".", "name", ",", "n_mistakes", "]", ".", "append", "(", "\n", "(", "params", "@", "grads", "/", "(", "params", ".", "norm", "(", ")", "*", "grads", ".", "norm", "(", ")", "+", "EPS", ")", ")", ".", "item", "(", ")", "\n", ")", "\n", "grad_projs_unnorm", "[", "network", ".", "name", ",", "n_mistakes", "]", ".", "append", "(", "\n", "(", "params", "@", "grads", ")", ".", "item", "(", ")", "\n", ")", "\n", "\n", "unscale_params", "(", "network", ",", "old_params", ")", "\n", "\n", "\n", "", "", "", "return", "{", "\n", "\"scales\"", ":", "scales", ",", "\n", "\"grad_projs\"", ":", "grad_projs", ",", "\n", "\"grad_projs_unnorm\"", ":", "grad_projs_unnorm", ",", "\n", "\"norms\"", ":", "norms", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.main": [[177, 219], ["transformer_scale_test.plot_grad_proj", "matplotlib.figure", "matplotlib.figure", "transformer_scale_test.plot_grad_proj", "matplotlib.figure", "transformer_scale_test.n_mistakes_reflection_point", "transformer_scale_test.generate", "min", "transformer_scale_test.SelfAttention", "transformer_scale_test.SelfAttention", "transformer_scale_test.FullyConnected", "transformer_scale_test.FullyConnected", "transformer_scale_test.FullyConnected", "open", "pickle.load", "grad_projs.keys", "open", "pickle.dump", "abs", "round"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.plot_grad_proj", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.plot_grad_proj", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.n_mistakes_reflection_point", "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.generate"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "if", "not", "args", ".", "load", ":", "\n", "        ", "networks", "=", "[", "\n", "# lnorm,", "\n", "SelfAttention", "(", "10", ",", "10", ")", ",", "\n", "SelfAttention", "(", "10", ",", "10", ",", "bias", "=", "False", ")", ",", "\n", "FullyConnected", "(", "10", ",", "10", ")", ",", "\n", "FullyConnected", "(", "10", ",", "10", ",", "bias", "=", "False", ")", ",", "\n", "FullyConnected", "(", "10", ",", "10", ",", "bias", "=", "False", ",", "residual", "=", "False", ")", ",", "\n", "]", "\n", "data_dict", "=", "generate", "(", "networks", ",", "args", ",", "args", ".", "dim", ")", "\n", "", "else", ":", "\n", "        ", "with", "open", "(", "\"data/data-dict.dat\"", ",", "\"rb\"", ")", "as", "fh", ":", "\n", "            ", "data_dict", "=", "pickle", ".", "load", "(", "fh", ")", "\n", "\n", "", "", "scales", "=", "data_dict", "[", "\"scales\"", "]", "\n", "grad_projs", "=", "data_dict", "[", "\"grad_projs\"", "]", "\n", "grad_projs_unnorm", "=", "data_dict", "[", "\"grad_projs_unnorm\"", "]", "\n", "norms", "=", "data_dict", "[", "\"norms\"", "]", "\n", "n_samples", "=", "args", ".", "dim", "\n", "\n", "plot_grad_proj", "(", "\n", "args", ",", "scales", ",", "grad_projs_unnorm", ",", "norms", ",", "n_mistakes", "=", "0", ",", "n_samples", "=", "n_samples", ",", "legend", "=", "True", "\n", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "perc_mistakes", "=", "0.2", "\n", "n_mistakes", "=", "min", "(", "\n", "grad_projs", ".", "keys", "(", ")", ",", "\n", "key", "=", "lambda", "tup", ":", "abs", "(", "tup", "[", "1", "]", "-", "round", "(", "perc_mistakes", "*", "n_samples", ")", ")", ",", "\n", ")", "[", "1", "]", "\n", "plt", ".", "figure", "(", ")", "\n", "plot_grad_proj", "(", "\n", "args", ",", "scales", ",", "grad_projs_unnorm", ",", "norms", ",", "n_mistakes", "=", "n_mistakes", ",", "n_samples", "=", "n_samples", ",", "\n", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "n_mistakes_reflection_point", "(", "args", ",", "scales", ",", "grad_projs_unnorm", ",", "norms", ",", "n_samples", "=", "n_samples", ")", "\n", "\n", "if", "not", "args", ".", "load", ":", "\n", "        ", "with", "open", "(", "\"data/data-dict.dat\"", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "            ", "pickle", ".", "dump", "(", "data_dict", ",", "fh", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.n_mistakes_reflection_point": [[221, 247], ["collections.defaultdict", "grad_projs.items", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.savefig", "rich.print", "data[].append", "matplotlib.plot", "matplotlib.legend", "enumerate", "len", "zip", "sorted"], "function", ["None"], ["", "", "", "def", "n_mistakes_reflection_point", "(", "\n", "args", ",", "scales", ",", "grad_projs", ",", "norms", ",", "n_samples", ":", "int", ",", "legend", ":", "bool", "=", "False", "\n", ")", ":", "\n", "    ", "data", "=", "defaultdict", "(", "list", ")", "\n", "for", "(", "name", ",", "n_mistakes", ")", ",", "projs", "in", "grad_projs", ".", "items", "(", ")", ":", "\n", "        ", "if", "n_mistakes", "==", "0", ":", "# Prevent having infinity/etc. in plot.", "\n", "            ", "continue", "\n", "", "checker", "=", "[", "idx", "for", "idx", ",", "x", "in", "enumerate", "(", "projs", ")", "if", "x", ">", "0", "]", "\n", "crossing_point", "=", "checker", "[", "0", "]", "if", "len", "(", "checker", ")", ">", "0", "else", "None", "\n", "assert", "crossing_point", "is", "not", "None", "\n", "acc", "=", "(", "n_samples", "-", "n_mistakes", ")", "/", "n_samples", "\n", "# TODO: Changed this. Make sure it's right.", "\n", "crossing_norm", "=", "scales", "[", "crossing_point", "]", "*", "norms", "[", "name", "]", "\n", "data", "[", "name", "]", ".", "append", "(", "(", "acc", ",", "crossing_norm", ")", ")", "\n", "\n", "", "for", "name", "in", "data", ":", "\n", "        ", "plt", ".", "plot", "(", "*", "zip", "(", "*", "sorted", "(", "data", "[", "name", "]", ")", ")", ",", "label", "=", "name", ")", "\n", "\n", "", "if", "legend", ":", "\n", "        ", "plt", ".", "legend", "(", "fontsize", "=", "args", ".", "font_size", ")", "\n", "", "plt", ".", "xlabel", "(", "\"Accuracy\"", ",", "fontsize", "=", "args", ".", "font_size", ")", "\n", "plt", ".", "ylabel", "(", "\"Norm with projection equilibrium\"", ",", "fontsize", "=", "args", ".", "font_size", ")", "\n", "plt", ".", "title", "(", "\"Norm with proj equilibrium\"", ")", "\n", "path", "=", "f\"images/grad-proj/full.{args.format}\"", "\n", "plt", ".", "savefig", "(", "path", ")", "\n", "print", "(", "\"Saved\"", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.main_depth": [[249, 299], ["matplotlib.get_cmap", "plt.get_cmap.", "collections.defaultdict", "collections.defaultdict", "grad_projs_unnorm.items", "matplotlib.figure", "zip", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.savefig", "transformer_scale_test.Transformer", "transformer_scale_test.generate", "open", "pickle.dump", "numpy.linspace", "range", "data[].append", "matplotlib.figure", "zip", "matplotlib.legend", "matplotlib.savefig", "matplotlib.plot", "range", "open", "pickle.load", "len", "data_fig[].items", "matplotlib.plot", "abs", "enumerate", "len", "zip", "sorted"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.generate"], ["", "def", "main_depth", "(", "args", ")", ":", "\n", "    ", "networks", "=", "[", "Transformer", "(", "n_layers", "=", "depth", ")", "for", "depth", "in", "range", "(", "1", ",", "args", ".", "max_depth", ")", "]", "\n", "\n", "if", "args", ".", "load", ":", "\n", "        ", "with", "open", "(", "\"data/depth-data-dict.dat\"", ",", "\"rb\"", ")", "as", "fh", ":", "\n", "            ", "data_dict", "=", "pickle", ".", "load", "(", "fh", ")", "\n", "", "", "else", ":", "\n", "        ", "data_dict", "=", "generate", "(", "networks", ",", "args", ",", "args", ".", "dim", ")", "\n", "\n", "# grad_projs = data_dict[\"grad_projs\"]", "\n", "", "grad_projs_unnorm", "=", "data_dict", "[", "\"grad_projs_unnorm\"", "]", "\n", "\n", "with", "open", "(", "\"data/depth-data-dict.dat\"", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "        ", "pickle", ".", "dump", "(", "data_dict", ",", "fh", ")", "\n", "\n", "", "hsv", "=", "plt", ".", "get_cmap", "(", "'hsv'", ")", "\n", "colors", "=", "hsv", "(", "np", ".", "linspace", "(", "0", ",", "0.8", ",", "args", ".", "max_depth", ")", ")", "\n", "\n", "data", "=", "defaultdict", "(", "list", ")", "\n", "data_fig", "=", "defaultdict", "(", "dict", ")", "\n", "\n", "for", "(", "name", ",", "n_mistakes", ")", ",", "grad_proj_series", "in", "grad_projs_unnorm", ".", "items", "(", ")", ":", "\n", "        ", "for", "idx", "in", "range", "(", "len", "(", "grad_proj_series", ")", ")", ":", "\n", "            ", "if", "abs", "(", "grad_proj_series", "[", "idx", "]", ")", ">", "10", ":", "\n", "                ", "grad_proj_series", "[", "idx", "]", "=", "grad_proj_series", "[", "idx", "-", "1", "]", "\n", "# grad_projs_unnorm[name, n_mistakes] = medfilt(grad_proj_series)", "\n", "\n", "", "", "acc", "=", "1", "-", "(", "n_mistakes", "/", "args", ".", "dim", ")", "\n", "checker", "=", "[", "idx", "for", "idx", ",", "x", "in", "enumerate", "(", "grad_proj_series", ")", "if", "x", ">", "0", "]", "\n", "crossing_point", "=", "checker", "[", "0", "]", "if", "len", "(", "checker", ")", ">", "0", "else", "None", "\n", "\n", "data", "[", "name", "]", ".", "append", "(", "(", "acc", ",", "crossing_point", ")", ")", "\n", "data_fig", "[", "acc", "]", "[", "name", "]", "=", "grad_proj_series", "\n", "\n", "", "for", "acc", "in", "data_fig", ":", "\n", "        ", "plt", ".", "figure", "(", ")", "\n", "for", "(", "name", ",", "grad_proj_series", ")", ",", "color", "in", "zip", "(", "data_fig", "[", "acc", "]", ".", "items", "(", ")", ",", "colors", ")", ":", "\n", "            ", "plt", ".", "plot", "(", "grad_proj_series", ",", "label", "=", "name", ",", "color", "=", "color", ")", "\n", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "f\"images/grad-proj-acc-{acc}.{args.format}\"", ")", "\n", "\n", "", "plt", ".", "figure", "(", ")", "\n", "for", "color", ",", "name", "in", "zip", "(", "colors", ",", "data", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "*", "zip", "(", "*", "sorted", "(", "data", "[", "name", "]", ")", ")", ",", "label", "=", "name", ")", "\n", "\n", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "xlabel", "(", "\"Accuracy\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Scale achieving proj equilibrium\"", ")", "\n", "plt", ".", "title", "(", "\"Scale achieving equilibrium by accuracy\"", ")", "\n", "plt", ".", "savefig", "(", "f\"images/grad-project-by-depth.{args.format}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.plot_grad_proj": [[301, 333], ["data.items", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "rich.print", "matplotlib.plot", "matplotlib.title", "matplotlib.title", "matplotlib.legend", "path.replace.replace", "grad_projs.items"], "function", ["None"], ["", "def", "plot_grad_proj", "(", "\n", "args", ",", "\n", "scales", ",", "\n", "grad_projs", ",", "\n", "norms", ",", "\n", "n_mistakes", ":", "int", ",", "\n", "n_samples", ":", "int", ",", "\n", "legend", ":", "bool", "=", "False", ",", "\n", "unnorm", ":", "bool", "=", "True", ",", "\n", ")", ":", "\n", "    ", "acc", "=", "(", "n_samples", "-", "n_mistakes", ")", "/", "n_samples", "\n", "data", "=", "{", "\n", "name", ":", "projs", "\n", "for", "(", "name", ",", "n_mist", ")", ",", "projs", "in", "grad_projs", ".", "items", "(", ")", "\n", "if", "n_mistakes", "==", "n_mist", "\n", "}", "\n", "for", "name", ",", "projs", "in", "data", ".", "items", "(", ")", ":", "\n", "        ", "norm_seq", "=", "[", "norms", "[", "name", "]", "*", "scale", "for", "scale", "in", "scales", "[", ":", "-", "1", "]", "]", "\n", "plt", ".", "plot", "(", "norm_seq", ",", "projs", "[", ":", "-", "1", "]", ",", "label", "=", "name", ")", "\n", "", "plt", ".", "xlabel", "(", "\"Scaled norm\"", ",", "fontsize", "=", "args", ".", "font_size", ")", "\n", "plt", ".", "ylabel", "(", "\"Gradient projection\"", ",", "fontsize", "=", "args", ".", "font_size", ")", "\n", "if", "unnorm", ":", "\n", "        ", "plt", ".", "title", "(", "f\"Grad proj curve at {100 * acc:.0f}% acc\"", ",", "fontsize", "=", "args", ".", "font_size", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "title", "(", "f\"Grad proj curve at {100 * acc:.0f}% acc (normalized)\"", ",", "fontsize", "=", "args", ".", "font_size", ")", "\n", "", "if", "legend", ":", "\n", "        ", "plt", ".", "legend", "(", "fontsize", "=", "args", ".", "font_size", ")", "\n", "", "path", "=", "f\"images/grad-proj/{100 * acc:.0f}.{args.format}\"", "\n", "if", "not", "unnorm", ":", "\n", "        ", "path", "=", "path", ".", "replace", "(", "f\".{args.format}\"", ",", "f\"-norm.{args.format}\"", ")", "\n", "", "plt", ".", "savefig", "(", "path", ")", "\n", "print", "(", "\"Saved\"", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args": [[335, 347], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.old.transformer_scale_test.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--dim\"", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "\"--load\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--acc_min\"", ",", "type", "=", "int", ",", "default", "=", ".75", ")", "\n", "parser", ".", "add_argument", "(", "\"--acc_step\"", ",", "type", "=", "int", ",", "default", "=", "15", ")", "\n", "parser", ".", "add_argument", "(", "\"--font_size\"", ",", "type", "=", "str", ",", "default", "=", "\"large\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_depth\"", ",", "type", "=", "int", ",", "default", "=", "13", ")", "\n", "parser", ".", "add_argument", "(", "\"--experiment\"", ",", "choices", "=", "[", "\"main\"", ",", "\"depth\"", "]", ",", "default", "=", "\"main\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cuda\"", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--format\"", ",", "choices", "=", "[", "\"png\"", ",", "\"pdf\"", "]", ",", "default", "=", "\"pdf\"", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.tests.test_si_transformer.TestSiTransformer.setUp": [[10, 13], ["SiTransConfig", "torch.randint"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", "=", "SiTransConfig", "(", "500", ",", "120", ",", "256", ",", "12", ",", "12", ",", "512", ")", "\n", "self", ".", "token_ids", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "499", ",", "size", "=", "[", "16", ",", "512", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.tests.test_si_transformer.TestSiTransformer.test_self_attn_dims": [[14, 18], ["SiSelfAttention", "SiSelfAttention.", "torch.ones", "list"], "methods", ["None"], ["", "def", "test_self_attn_dims", "(", "self", ")", ":", "\n", "        ", "attn", "=", "SiSelfAttention", "(", "self", ".", "config", ")", "\n", "out", "=", "attn", "(", "torch", ".", "ones", "(", "16", ",", "512", ",", "120", ")", ")", "\n", "assert", "list", "(", "out", ".", "shape", ")", "==", "[", "16", ",", "512", ",", "10", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.tests.test_si_transformer.TestSiTransformer.test_multihead_dims": [[19, 23], ["SiMultiHead", "SiMultiHead.", "torch.ones", "list"], "methods", ["None"], ["", "def", "test_multihead_dims", "(", "self", ")", ":", "\n", "        ", "heads", "=", "SiMultiHead", "(", "self", ".", "config", ")", "\n", "out", "=", "heads", "(", "torch", ".", "ones", "(", "16", ",", "512", ",", "120", ")", ")", "\n", "assert", "list", "(", "out", ".", "shape", ")", "==", "[", "16", ",", "512", ",", "120", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.tests.test_si_transformer.TestSiTransformer.test_ff_dims": [[24, 28], ["SiFeedforward", "SiFeedforward.", "torch.ones", "list"], "methods", ["None"], ["", "def", "test_ff_dims", "(", "self", ")", ":", "\n", "        ", "ff", "=", "SiFeedforward", "(", "self", ".", "config", ")", "\n", "out", "=", "ff", "(", "torch", ".", "ones", "(", "16", ",", "512", ",", "120", ")", ")", "\n", "assert", "list", "(", "out", ".", "shape", ")", "==", "[", "16", ",", "512", ",", "120", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.tests.test_si_transformer.TestSiTransformer.test_scale_invariance": [[29, 37], ["SiTransformer", "SiTransformer.", "torch.testing.assert_allclose", "src.saturate.saturate", "SiTransformer."], "methods", ["None"], ["", "def", "test_scale_invariance", "(", "self", ")", ":", "\n", "        ", "transformer", "=", "SiTransformer", "(", "self", ".", "config", ")", "\n", "encodings", "=", "transformer", "(", "self", ".", "token_ids", ")", "\n", "with", "saturate", "(", "transformer", ")", ":", "\n", "            ", "sat_encodings", "=", "transformer", "(", "self", ".", "token_ids", ")", "\n", "\n", "# The output should be 1-homogeneous.", "\n", "", "torch", ".", "testing", ".", "assert_allclose", "(", "encodings", ",", "sat_encodings", "/", "1000", ",", "rtol", "=", "1e-1", ",", "atol", "=", "1e-1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.tests.test_si_transformer.TestSiTransformer.test_masked_dims": [[38, 43], ["SiTransConfig", "SiTransformer", "SiTransformer.", "list"], "methods", ["None"], ["", "def", "test_masked_dims", "(", "self", ")", ":", "\n", "        ", "config", "=", "SiTransConfig", "(", "500", ",", "120", ",", "256", ",", "12", ",", "12", ",", "512", ",", "masked", "=", "True", ")", "\n", "transformer", "=", "SiTransformer", "(", "config", ")", "\n", "encodings", "=", "transformer", "(", "self", ".", "token_ids", ")", "\n", "assert", "list", "(", "encodings", ".", "shape", ")", "==", "[", "16", ",", "512", ",", "120", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.viking-sudo-rm_norm-growth.tests.test_si_transformer.TestSiTransformer.test_softmax_dims": [[44, 49], ["SiTransConfig", "SiTransformer", "SiTransformer.", "list"], "methods", ["None"], ["", "def", "test_softmax_dims", "(", "self", ")", ":", "\n", "        ", "config", "=", "SiTransConfig", "(", "500", ",", "120", ",", "256", ",", "12", ",", "12", ",", "512", ",", "softmax", "=", "True", ")", "\n", "transformer", "=", "SiTransformer", "(", "config", ")", "\n", "encodings", "=", "transformer", "(", "self", ".", "token_ids", ")", "\n", "assert", "list", "(", "encodings", ".", "shape", ")", "==", "[", "16", ",", "512", ",", "120", "]", "\n", "", "", ""]]}