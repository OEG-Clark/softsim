{"home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.SmoothCrossEntropy.__init__": [[266, 269], ["torch.Module.__init__", "float"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", ":", "float", "=", "0.", ")", ":", "\n", "        ", "super", "(", "SmoothCrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "float", "(", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.SmoothCrossEntropy.forward": [[270, 274], ["torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like.scatter_", "torch.full_like.scatter_", "torch.full_like.scatter_", "torch.full_like.scatter_", "torch.full_like.scatter_", "torch.full_like.scatter_", "torch.full_like.scatter_", "torch.full_like.scatter_", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "labels.unsqueeze", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ":", "torch", ".", "Tensor", ",", "labels", ":", "torch", ".", "LongTensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "target_probs", "=", "torch", ".", "full_like", "(", "logits", ",", "self", ".", "epsilon", "/", "(", "logits", ".", "shape", "[", "1", "]", "-", "1", ")", ")", "\n", "target_probs", ".", "scatter_", "(", "1", ",", "labels", ".", "unsqueeze", "(", "1", ")", ",", "1", "-", "self", ".", "epsilon", ")", "\n", "return", "F", ".", "kl_div", "(", "torch", ".", "log_softmax", "(", "logits", ",", "1", ")", ",", "target_probs", ",", "reduction", "=", "'batchmean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.AverageMeter.__init__": [[276, 278], ["train_lshot.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.AverageMeter.reset": [[279, 284], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.AverageMeter.update": [[285, 290], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.main": [[32, 138], ["utils.configuration.parser_args", "train_lshot.setup_logger", "sorted", "setup_logger.info", "setup_logger.info", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "train_lshot.get_optimizer", "train_lshot.get_dataloader", "train_lshot.get_scheduler", "train_lshot.warp_tqdm", "train_lshot.do_extract_and_evaluate", "vars().items", "setup_logger.info", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "SmoothCrossEntropy().cuda", "torch.CrossEntropyLoss().cuda", "os.path.isfile", "os.path.isfile", "os.path.isfile", "train_lshot.do_extract_and_evaluate", "train_lshot.get_dataloader", "train_lshot.get_dataloader", "len", "list", "train_lshot.train", "get_scheduler.step", "train_lshot.save_checkpoint", "sum", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "setup_logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.state_dict", "model.state_dict.update", "torch.nn.DataParallel().cuda.load_state_dict", "setup_logger.info", "setup_logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "get_optimizer.load_state_dict", "setup_logger.info", "setup_logger.info", "range", "train_lshot.meta_val", "setup_logger.info", "max", "vars", "str", "train_lshot.SmoothCrossEntropy", "torch.CrossEntropyLoss", "warp_tqdm.set_description", "torch.nn.DataParallel().cuda.state_dict", "get_optimizer.state_dict", "str", "p.data.nelement", "params.items", "torch.nn.DataParallel().cuda.parameters"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.utils.configuration.parser_args", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.setup_logger", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_optimizer", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_dataloader", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_scheduler", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.do_extract_and_evaluate", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.do_extract_and_evaluate", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_dataloader", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_dataloader", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.train", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.save_checkpoint", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.update", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.meta_val"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", "\n", "args", "=", "configuration", ".", "parser_args", "(", ")", "\n", "### initial logger", "\n", "log", "=", "setup_logger", "(", "args", ".", "save_path", "+", "args", ".", "log_file", ")", "\n", "for", "key", ",", "value", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "log", ".", "info", "(", "str", "(", "key", ")", "+", "': '", "+", "str", "(", "value", ")", ")", "\n", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "cudnn", ".", "deterministic", "=", "True", "\n", "# create model", "\n", "log", ".", "info", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "args", ".", "num_classes", ",", "remove_linear", "=", "args", ".", "do_meta_train", ")", "\n", "\n", "log", ".", "info", "(", "'Number of model parameters: {}'", ".", "format", "(", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "if", "args", ".", "label_smooth", ">", "0", ":", "\n", "        ", "criterion", "=", "SmoothCrossEntropy", "(", "epsilon", "=", "args", ".", "label_smooth", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", "=", "get_optimizer", "(", "model", ")", "\n", "\n", "if", "args", ".", "pretrain", ":", "\n", "        ", "pretrain", "=", "args", ".", "pretrain", "+", "'/checkpoint.pth.tar'", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pretrain", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"=> loading pretrained weight '{}'\"", ".", "format", "(", "pretrain", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "pretrain", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "params", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "params", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "params", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "params", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "'[Attention]: Do not find pretrained model {}'", ".", "format", "(", "pretrain", ")", ")", "\n", "\n", "# resume from an exist checkpoint", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "ckpt_path", "+", "'/checkpoint.pth.tar'", ")", "and", "args", ".", "resume", "==", "''", ":", "\n", "        ", "args", ".", "resume", "=", "args", ".", "ckpt_path", "+", "'/checkpoint.pth.tar'", "\n", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "# scheduler.load_state_dict(checkpoint['scheduler'])", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "log", ".", "info", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "'[Attention]: Do not find checkpoint {}'", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "# Data loading code", "\n", "\n", "", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "do_extract_and_evaluate", "(", "model", ",", "log", ")", "\n", "return", "\n", "\n", "", "args", ".", "enlarge", "=", "False", "\n", "if", "args", ".", "do_meta_train", ":", "\n", "        ", "sample_info", "=", "[", "args", ".", "meta_train_iter", ",", "args", ".", "meta_train_way", ",", "args", ".", "meta_train_shot", ",", "args", ".", "meta_train_query", "]", "\n", "train_loader", "=", "get_dataloader", "(", "'train'", ",", "not", "args", ".", "disable_train_augment", ",", "sample", "=", "sample_info", ")", "\n", "", "else", ":", "\n", "        ", "train_loader", "=", "get_dataloader", "(", "'train'", ",", "not", "args", ".", "disable_train_augment", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "sample_info", "=", "[", "args", ".", "meta_val_iter", ",", "args", ".", "meta_val_way", ",", "args", ".", "meta_val_shot", ",", "args", ".", "meta_val_query", "]", "\n", "val_loader", "=", "get_dataloader", "(", "'val'", ",", "False", ",", "sample", "=", "sample_info", ")", "\n", "\n", "scheduler", "=", "get_scheduler", "(", "len", "(", "train_loader", ")", ",", "optimizer", ")", "\n", "tqdm_loop", "=", "warp_tqdm", "(", "list", "(", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ")", ")", "\n", "for", "epoch", "in", "tqdm_loop", ":", "\n", "# train for one epoch", "\n", "        ", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "scheduler", ",", "log", ")", "\n", "scheduler", ".", "step", "(", "epoch", ")", "\n", "# evaluate on meta validation set", "\n", "is_best", "=", "False", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "meta_val_interval", "==", "0", ":", "\n", "            ", "prec1", "=", "meta_val", "(", "val_loader", ",", "model", ")", "\n", "log", ".", "info", "(", "'Meta Val {}: {}'", ".", "format", "(", "epoch", ",", "prec1", ")", ")", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "if", "not", "args", ".", "disable_tqdm", ":", "\n", "                ", "tqdm_loop", ".", "set_description", "(", "'Best Acc {:.2f}'", ".", "format", "(", "best_prec1", "*", "100.", ")", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "", "", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "# 'scheduler': scheduler.state_dict(),", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ",", "folder", "=", "args", ".", "ckpt_path", ")", "\n", "\n", "# do evaluate at the end", "\n", "", "args", ".", "enlarge", "=", "True", "\n", "do_extract_and_evaluate", "(", "model", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.get_metric": [[140, 148], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.cosine_similarity"], "function", ["None"], ["", "def", "get_metric", "(", "metric_type", ")", ":", "\n", "    ", "METRICS", "=", "{", "\n", "'cosine'", ":", "lambda", "gallery", ",", "query", ":", "1.", "-", "F", ".", "cosine_similarity", "(", "query", "[", ":", ",", "None", ",", ":", "]", ",", "gallery", "[", "None", ",", ":", ",", ":", "]", ",", "dim", "=", "2", ")", ",", "\n", "'euclidean'", ":", "lambda", "gallery", ",", "query", ":", "(", "(", "query", "[", ":", ",", "None", ",", ":", "]", "-", "gallery", "[", "None", ",", ":", ",", ":", "]", ")", "**", "2", ")", ".", "sum", "(", "2", ")", ",", "\n", "'l1'", ":", "lambda", "gallery", ",", "query", ":", "torch", ".", "norm", "(", "(", "query", "[", ":", ",", "None", ",", ":", "]", "-", "gallery", "[", "None", ",", ":", ",", ":", "]", ")", ",", "p", "=", "1", ",", "dim", "=", "2", ")", ",", "\n", "'l2'", ":", "lambda", "gallery", ",", "query", ":", "torch", ".", "norm", "(", "(", "query", "[", ":", ",", "None", ",", ":", "]", "-", "gallery", "[", "None", ",", ":", ",", ":", "]", ")", ",", "p", "=", "2", ",", "dim", "=", "2", ")", ",", "\n", "}", "\n", "return", "METRICS", "[", "metric_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.metric_prediction": [[150, 158], ["gallery.view.view", "query.view.view", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.take", "torch.take", "torch.take", "torch.take", "torch.take", "torch.take", "torch.take", "torch.take", "train_lshot.get_metric"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_metric"], ["", "def", "metric_prediction", "(", "gallery", ",", "query", ",", "train_label", ",", "metric_type", ")", ":", "\n", "    ", "gallery", "=", "gallery", ".", "view", "(", "gallery", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "query", "=", "query", ".", "view", "(", "query", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "distance", "=", "get_metric", "(", "metric_type", ")", "(", "gallery", ",", "query", ")", "\n", "predict", "=", "torch", ".", "argmin", "(", "distance", ",", "dim", "=", "1", ")", "\n", "predict", "=", "torch", ".", "take", "(", "train_label", ",", "predict", ")", "\n", "\n", "return", "predict", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.meta_val": [[160, 183], ["train_lshot.AverageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train_lshot.warp_tqdm", "enumerate", "target.cuda.cuda", "[].cuda", "train_out.reshape().mean.reshape().mean", "train_lshot.metric_prediction", "train_lshot.AverageMeter.update", "acc.item", "warp_tqdm.set_description", "train_out.reshape().mean.reshape", "model"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.metric_prediction", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.update"], ["", "def", "meta_val", "(", "test_loader", ",", "model", ",", "train_mean", "=", "None", ")", ":", "\n", "    ", "top1", "=", "AverageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "tqdm_test_loader", "=", "warp_tqdm", "(", "test_loader", ")", "\n", "for", "i", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "tqdm_test_loader", ")", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", "0", ",", "non_blocking", "=", "True", ")", "\n", "output", "=", "model", "(", "inputs", ",", "True", ")", "[", "0", "]", ".", "cuda", "(", "0", ")", "\n", "if", "train_mean", "is", "not", "None", ":", "\n", "                ", "output", "=", "output", "-", "train_mean", "\n", "", "train_out", "=", "output", "[", ":", "args", ".", "meta_val_way", "*", "args", ".", "meta_val_shot", "]", "\n", "train_label", "=", "target", "[", ":", "args", ".", "meta_val_way", "*", "args", ".", "meta_val_shot", "]", "\n", "test_out", "=", "output", "[", "args", ".", "meta_val_way", "*", "args", ".", "meta_val_shot", ":", "]", "\n", "test_label", "=", "target", "[", "args", ".", "meta_val_way", "*", "args", ".", "meta_val_shot", ":", "]", "\n", "train_out", "=", "train_out", ".", "reshape", "(", "args", ".", "meta_val_way", ",", "args", ".", "meta_val_shot", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "\n", "train_label", "=", "train_label", "[", ":", ":", "args", ".", "meta_val_shot", "]", "\n", "prediction", "=", "metric_prediction", "(", "train_out", ",", "test_out", ",", "train_label", ",", "args", ".", "meta_val_metric", ")", "\n", "acc", "=", "(", "prediction", "==", "test_label", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "top1", ".", "update", "(", "acc", ".", "item", "(", ")", ")", "\n", "if", "not", "args", ".", "disable_tqdm", ":", "\n", "                ", "tqdm_test_loader", ".", "set_description", "(", "'Acc {:.2f}'", ".", "format", "(", "top1", ".", "avg", "*", "100", ")", ")", "\n", "", "", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.train": [[185, 258], ["train_lshot.AverageMeter", "train_lshot.AverageMeter", "train_lshot.AverageMeter", "train_lshot.AverageMeter", "train_lshot.AverageMeter", "model.train", "time.time", "train_lshot.warp_tqdm", "enumerate", "train_lshot.AverageMeter.update", "[].repeat().reshape().long.cuda", "numpy.random.rand", "train_lshot.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "train_lshot.accuracy", "train_lshot.AverageMeter.update", "train_lshot.AverageMeter.update", "train_lshot.AverageMeter.update", "time.time", "scheduler.step", "[].repeat().reshape().long", "numpy.random.beta", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "train_lshot.rand_bbox", "model", "model", "criterion", "criterion.item", "input.size", "input.size", "input.size", "warp_tqdm.set_description", "log.info", "time.time", "input.size", "output.cuda.cuda", "shot_proto.reshape().mean.reshape().mean", "time.time", "[].repeat().reshape", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "criterion", "criterion", "len", "len", "shot_proto.reshape().mean.reshape", "train_lshot.get_metric", "[].repeat", "input.size", "input.size", "input.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.train", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.update", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.update", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.accuracy", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.update", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.update", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.update", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.rand_bbox", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_metric"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "scheduler", ",", "log", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "tqdm_train_loader", "=", "warp_tqdm", "(", "train_loader", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "tqdm_train_loader", ")", ":", "\n", "        ", "if", "args", ".", "scheduler", "==", "'cosine'", ":", "\n", "            ", "scheduler", ".", "step", "(", "epoch", "*", "len", "(", "train_loader", ")", "+", "i", ")", "\n", "# measure data loading time", "\n", "", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "do_meta_train", ":", "\n", "            ", "target", "=", "torch", ".", "arange", "(", "args", ".", "meta_train_way", ")", "[", ":", ",", "None", "]", ".", "repeat", "(", "1", ",", "args", ".", "meta_train_query", ")", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "r", "=", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "if", "args", ".", "beta", ">", "0", "and", "r", "<", "args", ".", "cutmix_prob", ":", "\n", "# generate mixed sample", "\n", "            ", "lam", "=", "np", ".", "random", ".", "beta", "(", "args", ".", "beta", ",", "args", ".", "beta", ")", "\n", "rand_index", "=", "torch", ".", "randperm", "(", "input", ".", "size", "(", ")", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "target_a", "=", "target", "\n", "target_b", "=", "target", "[", "rand_index", "]", "\n", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "=", "rand_bbox", "(", "input", ".", "size", "(", ")", ",", "lam", ")", "\n", "input", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "=", "input", "[", "rand_index", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "\n", "# adjust lambda to exactly match pixel ratio", "\n", "lam", "=", "1", "-", "(", "(", "bbx2", "-", "bbx1", ")", "*", "(", "bby2", "-", "bby1", ")", "/", "(", "input", ".", "size", "(", ")", "[", "-", "1", "]", "*", "input", ".", "size", "(", ")", "[", "-", "2", "]", ")", ")", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_a", ")", "*", "lam", "+", "criterion", "(", "output", ",", "target_b", ")", "*", "(", "1.", "-", "lam", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "model", "(", "input", ")", "\n", "if", "args", ".", "do_meta_train", ":", "\n", "                ", "output", "=", "output", ".", "cuda", "(", "0", ")", "\n", "shot_proto", "=", "output", "[", ":", "args", ".", "meta_train_shot", "*", "args", ".", "meta_train_way", "]", "\n", "query_proto", "=", "output", "[", "args", ".", "meta_train_shot", "*", "args", ".", "meta_train_way", ":", "]", "\n", "shot_proto", "=", "shot_proto", ".", "reshape", "(", "args", ".", "meta_train_way", ",", "args", ".", "meta_train_shot", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "\n", "output", "=", "-", "get_metric", "(", "args", ".", "meta_train_metric", ")", "(", "shot_proto", ",", "query_proto", ")", "\n", "", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "prec1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "if", "not", "args", ".", "disable_tqdm", ":", "\n", "            ", "tqdm_train_loader", ".", "set_description", "(", "'Acc {:.2f}'", ".", "format", "(", "top1", ".", "avg", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "log", ".", "info", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.save_checkpoint": [[260, 264], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ",", "folder", "=", "'result/default'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "folder", "+", "'/'", "+", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "folder", "+", "'/'", "+", "filename", ",", "folder", "+", "'/model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.accuracy": [[292, 307], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.setup_logger": [[309, 328], ["logging.Formatter", "logging.getLogger", "logging.FileHandler", "logging.FileHandler.set_name", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "os.path.dirname", "os.path.isdir", "os.makedirs", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["", "", "def", "setup_logger", "(", "filepath", ")", ":", "\n", "    ", "file_formatter", "=", "logging", ".", "Formatter", "(", "\n", "\"[%(asctime)s %(filename)s:%(lineno)s] %(levelname)-8s %(message)s\"", ",", "\n", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ",", "\n", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'example'", ")", "\n", "\n", "file_handle_name", "=", "\"file\"", "\n", "if", "file_handle_name", "in", "[", "h", ".", "name", "for", "h", "in", "logger", ".", "handlers", "]", ":", "\n", "        ", "return", "\n", "", "if", "os", ".", "path", ".", "dirname", "(", "filepath", ")", "!=", "''", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "dirname", "(", "filepath", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filepath", ")", ")", "\n", "", "", "file_handle", "=", "logging", ".", "FileHandler", "(", "filename", "=", "filepath", ",", "mode", "=", "\"a\"", ")", "\n", "file_handle", ".", "set_name", "(", "file_handle_name", ")", "\n", "file_handle", ".", "setFormatter", "(", "file_formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handle", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.get_scheduler": [[330, 341], ["torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "int", "int"], "function", ["None"], ["", "def", "get_scheduler", "(", "batches", ",", "optimiter", ")", ":", "\n", "    ", "\"\"\"\n    cosine will change learning rate every iteration, others change learning rate every epoch\n    :param batches: the number of iterations in each epochs\n    :return: scheduler\n    \"\"\"", "\n", "SCHEDULER", "=", "{", "'step'", ":", "StepLR", "(", "optimiter", ",", "args", ".", "lr_stepsize", ",", "args", ".", "lr_gamma", ")", ",", "\n", "'multi_step'", ":", "MultiStepLR", "(", "optimiter", ",", "milestones", "=", "[", "int", "(", ".5", "*", "args", ".", "epochs", ")", ",", "int", "(", ".75", "*", "args", ".", "epochs", ")", "]", ",", "\n", "gamma", "=", "args", ".", "lr_gamma", ")", ",", "\n", "'cosine'", ":", "CosineAnnealingLR", "(", "optimiter", ",", "batches", "*", "args", ".", "epochs", ",", "eta_min", "=", "1e-9", ")", "}", "\n", "return", "SCHEDULER", "[", "args", ".", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.get_optimizer": [[343, 348], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "module.parameters", "module.parameters"], "function", ["None"], ["", "def", "get_optimizer", "(", "module", ")", ":", "\n", "    ", "OPTIMIZER", "=", "{", "'SGD'", ":", "torch", ".", "optim", ".", "SGD", "(", "module", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ")", ",", "\n", "'Adam'", ":", "torch", ".", "optim", ".", "Adam", "(", "module", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "}", "\n", "return", "OPTIMIZER", "[", "args", ".", "optimizer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.rand_bbox": [[350, 367], ["numpy.sqrt", "numpy.int", "numpy.int", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip"], "function", ["None"], ["", "def", "rand_bbox", "(", "size", ",", "lam", ")", ":", "\n", "    ", "W", "=", "size", "[", "2", "]", "\n", "H", "=", "size", "[", "3", "]", "\n", "cut_rat", "=", "np", ".", "sqrt", "(", "1.", "-", "lam", ")", "\n", "cut_w", "=", "np", ".", "int", "(", "W", "*", "cut_rat", ")", "\n", "cut_h", "=", "np", ".", "int", "(", "H", "*", "cut_rat", ")", "\n", "\n", "# uniform", "\n", "cx", "=", "np", ".", "random", ".", "randint", "(", "W", ")", "\n", "cy", "=", "np", ".", "random", ".", "randint", "(", "H", ")", "\n", "\n", "bbx1", "=", "np", ".", "clip", "(", "cx", "-", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby1", "=", "np", ".", "clip", "(", "cy", "-", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "bbx2", "=", "np", ".", "clip", "(", "cx", "+", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby2", "=", "np", ".", "clip", "(", "cy", "+", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "\n", "return", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.extract_feature": [[369, 414], ["os.path.isfile", "model.eval", "train_lshot.load_pickle", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "collections.defaultdict", "collections.defaultdict", "enumerate", "train_lshot.save_pickle", "os.path.isdir", "os.makedirs", "os.path.isfile", "enumerate", "numpy.concatenate().mean", "train_lshot.save_pickle", "train_lshot.load_pickle", "train_lshot.warp_tqdm", "model", "outputs.cpu().data.numpy.cpu().data.numpy", "zip", "train_lshot.warp_tqdm", "model", "np.concatenate().mean.append", "len", "numpy.concatenate().mean", "fc_outputs.cpu().data.numpy.cpu().data.numpy", "output_dict[].append", "fc_output_dict[].append", "outputs.cpu().data.numpy.cpu().data.numpy", "np.concatenate().mean.append", "numpy.concatenate", "fc_outputs.cpu().data.numpy.cpu().data.numpy", "numpy.concatenate", "outputs.cpu().data.numpy.cpu", "fc_outputs.cpu().data.numpy.cpu", "outputs.cpu().data.numpy.cpu", "label.item", "label.item", "fc_outputs.cpu().data.numpy.cpu"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.load_pickle", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.save_pickle", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.save_pickle", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.load_pickle", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm"], ["", "def", "extract_feature", "(", "train_loader", ",", "val_loader", ",", "model", ",", "tag", "=", "'last'", ")", ":", "\n", "# return out mean, fcout mean, out feature, fcout features", "\n", "    ", "save_dir", "=", "'{}/{}/{}'", ".", "format", "(", "args", ".", "save_path", ",", "tag", ",", "args", ".", "enlarge", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "save_dir", "+", "'/output.plk'", ")", ":", "\n", "        ", "data", "=", "load_pickle", "(", "save_dir", "+", "'/output.plk'", ")", "\n", "return", "data", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# get training mean", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "save_dir", "+", "'/output_mean.plk'", ")", ":", "\n", "            ", "out_mean", ",", "fc_out_mean", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "(", "inputs", ",", "_", ")", "in", "enumerate", "(", "warp_tqdm", "(", "train_loader", ")", ")", ":", "\n", "                ", "outputs", ",", "fc_outputs", "=", "model", "(", "inputs", ",", "True", ")", "\n", "out_mean", ".", "append", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "if", "fc_outputs", "is", "not", "None", ":", "\n", "                    ", "fc_out_mean", ".", "append", "(", "fc_outputs", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "", "", "out_mean", "=", "np", ".", "concatenate", "(", "out_mean", ",", "axis", "=", "0", ")", ".", "mean", "(", "0", ")", "\n", "if", "len", "(", "fc_out_mean", ")", ">", "0", ":", "\n", "                ", "fc_out_mean", "=", "np", ".", "concatenate", "(", "fc_out_mean", ",", "axis", "=", "0", ")", ".", "mean", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "fc_out_mean", "=", "-", "1", "\n", "", "save_pickle", "(", "save_dir", "+", "'/output_mean.plk'", ",", "[", "out_mean", ",", "fc_out_mean", "]", ")", "\n", "", "else", ":", "\n", "            ", "out_mean", ",", "fc_out_mean", "=", "load_pickle", "(", "save_dir", "+", "'/output_mean.plk'", ")", "\n", "\n", "", "output_dict", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "fc_output_dict", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "(", "inputs", ",", "labels", ")", "in", "enumerate", "(", "warp_tqdm", "(", "val_loader", ")", ")", ":", "\n", "# compute output", "\n", "            ", "outputs", ",", "fc_outputs", "=", "model", "(", "inputs", ",", "True", ")", "\n", "outputs", "=", "outputs", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "if", "fc_outputs", "is", "not", "None", ":", "\n", "                ", "fc_outputs", "=", "fc_outputs", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "fc_outputs", "=", "[", "None", "]", "*", "outputs", ".", "shape", "[", "0", "]", "\n", "", "for", "out", ",", "fc_out", ",", "label", "in", "zip", "(", "outputs", ",", "fc_outputs", ",", "labels", ")", ":", "\n", "                ", "output_dict", "[", "label", ".", "item", "(", ")", "]", ".", "append", "(", "out", ")", "\n", "fc_output_dict", "[", "label", ".", "item", "(", ")", "]", ".", "append", "(", "fc_out", ")", "\n", "", "", "all_info", "=", "[", "out_mean", ",", "fc_out_mean", ",", "output_dict", ",", "fc_output_dict", "]", "\n", "save_pickle", "(", "save_dir", "+", "'/output.plk'", ",", "all_info", ")", "\n", "return", "all_info", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.extract_feature_tune": [[415, 454], ["os.path.isfile", "model.eval", "train_lshot.load_pickle", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "collections.defaultdict", "enumerate", "train_lshot.save_pickle", "os.path.isdir", "os.makedirs", "os.path.isfile", "enumerate", "numpy.concatenate().mean", "train_lshot.save_pickle", "train_lshot.warp_tqdm", "model", "outputs.cpu().data.numpy.cpu().data.numpy", "zip", "train_lshot.warp_tqdm", "model", "np.concatenate().mean.append", "len", "numpy.concatenate().mean", "train_lshot.load_pickle", "output_dict[].append", "outputs.cpu().data.numpy.cpu().data.numpy", "np.concatenate().mean.append", "numpy.concatenate", "fc_outputs.cpu().data.numpy", "numpy.concatenate", "outputs.cpu().data.numpy.cpu", "outputs.cpu().data.numpy.cpu", "label.item", "fc_outputs.cpu"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.load_pickle", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.save_pickle", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.save_pickle", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.load_pickle"], ["", "", "def", "extract_feature_tune", "(", "train_loader", ",", "val_loader", ",", "model", ",", "tag", "=", "'best'", ")", ":", "\n", "# return out mean, fcout mean, out feature, fcout features", "\n", "    ", "save_dir", "=", "'{}/{}/{}'", ".", "format", "(", "args", ".", "save_path", ",", "tag", ",", "args", ".", "enlarge", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "save_dir", "+", "'/output_tune.plk'", ")", ":", "\n", "        ", "data", "=", "load_pickle", "(", "save_dir", "+", "'/output_tune.plk'", ")", "\n", "return", "data", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# get training mean", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "save_dir", "+", "'/output_mean.plk'", ")", ":", "\n", "            ", "out_mean", ",", "fc_out_mean", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "(", "inputs", ",", "_", ")", "in", "enumerate", "(", "warp_tqdm", "(", "train_loader", ")", ")", ":", "\n", "                ", "outputs", ",", "fc_outputs", "=", "model", "(", "inputs", ",", "True", ")", "\n", "out_mean", ".", "append", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "if", "fc_outputs", "is", "not", "None", ":", "\n", "                    ", "fc_out_mean", ".", "append", "(", "fc_outputs", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "", "", "out_mean", "=", "np", ".", "concatenate", "(", "out_mean", ",", "axis", "=", "0", ")", ".", "mean", "(", "0", ")", "\n", "if", "len", "(", "fc_out_mean", ")", ">", "0", ":", "\n", "                ", "fc_out_mean", "=", "np", ".", "concatenate", "(", "fc_out_mean", ",", "axis", "=", "0", ")", ".", "mean", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "fc_out_mean", "=", "-", "1", "\n", "", "save_pickle", "(", "save_dir", "+", "'/output_mean.plk'", ",", "[", "out_mean", ",", "fc_out_mean", "]", ")", "\n", "", "else", ":", "\n", "            ", "out_mean", "=", "load_pickle", "(", "save_dir", "+", "'/output_mean.plk'", ")", "[", "0", "]", "\n", "\n", "", "output_dict", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "(", "inputs", ",", "labels", ")", "in", "enumerate", "(", "warp_tqdm", "(", "val_loader", ")", ")", ":", "\n", "# compute output", "\n", "            ", "outputs", ",", "_", "=", "model", "(", "inputs", ",", "True", ")", "\n", "outputs", "=", "outputs", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "for", "out", ",", "label", "in", "zip", "(", "outputs", ",", "labels", ")", ":", "\n", "                ", "output_dict", "[", "label", ".", "item", "(", ")", "]", ".", "append", "(", "out", ")", "\n", "", "", "all_info", "=", "[", "out_mean", ",", "output_dict", "]", "\n", "save_pickle", "(", "save_dir", "+", "'/output_tune.plk'", ",", "all_info", ")", "\n", "return", "all_info", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.get_dataloader": [[455, 471], ["datasets.DatasetFolder", "datasets.with_augment", "datasets.without_augment", "datasets.CategoriesSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.transform.with_augment", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.transform.without_augment"], ["", "", "def", "get_dataloader", "(", "split", ",", "aug", "=", "False", ",", "shuffle", "=", "True", ",", "out_name", "=", "False", ",", "sample", "=", "None", ")", ":", "\n", "\n", "# sample: iter, way, shot, query", "\n", "    ", "if", "aug", ":", "\n", "        ", "transform", "=", "datasets", ".", "with_augment", "(", "84", ",", "disable_random_resize", "=", "args", ".", "disable_random_resize", ",", "jitter", "=", "args", ".", "jitter", ")", "\n", "", "else", ":", "\n", "        ", "transform", "=", "datasets", ".", "without_augment", "(", "84", ",", "enlarge", "=", "args", ".", "enlarge", ")", "\n", "", "sets", "=", "datasets", ".", "DatasetFolder", "(", "args", ".", "data", ",", "args", ".", "split_dir", ",", "split", ",", "transform", ",", "out_name", "=", "out_name", ")", "\n", "if", "sample", "is", "not", "None", ":", "\n", "        ", "sampler", "=", "datasets", ".", "CategoriesSampler", "(", "sets", ".", "labels", ",", "*", "sample", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "sets", ",", "batch_sampler", "=", "sampler", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "sets", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.warp_tqdm": [[474, 480], ["tqdm.tqdm", "len"], "function", ["None"], ["", "def", "warp_tqdm", "(", "data_loader", ")", ":", "\n", "    ", "if", "args", ".", "disable_tqdm", ":", "\n", "        ", "tqdm_loader", "=", "data_loader", "\n", "", "else", ":", "\n", "        ", "tqdm_loader", "=", "tqdm", ".", "tqdm", "(", "data_loader", ",", "total", "=", "len", "(", "data_loader", ")", ")", "\n", "", "return", "tqdm_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.save_pickle": [[482, 485], ["open", "pickle.dump"], "function", ["None"], ["", "def", "save_pickle", "(", "file", ",", "data", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.load_pickle": [[487, 490], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "load_pickle", "(", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.load_checkpoint": [[492, 500], ["model.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "", "def", "load_checkpoint", "(", "model", ",", "type", "=", "'best'", ")", ":", "\n", "    ", "if", "type", "==", "'best'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "'{}/model_best.pth.tar'", ".", "format", "(", "args", ".", "ckpt_path", ")", ")", "\n", "", "elif", "type", "==", "'last'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "'{}/checkpoint.pth.tar'", ".", "format", "(", "args", ".", "ckpt_path", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "'type should be in [best, or last], but got {}'", ".", "format", "(", "type", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.compute_confidence_interval": [[502, 513], ["numpy.mean", "numpy.std", "numpy.array", "numpy.sqrt", "len"], "function", ["None"], ["", "def", "compute_confidence_interval", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Compute 95% confidence interval\n    :param data: An array of mean accuracy (or mAP) across a number of sampled episodes.\n    :return: the 95% confidence interval for this data.\n    \"\"\"", "\n", "a", "=", "1.0", "*", "np", ".", "array", "(", "data", ")", "\n", "m", "=", "np", ".", "mean", "(", "a", ")", "\n", "std", "=", "np", ".", "std", "(", "a", ")", "\n", "pm", "=", "1.96", "*", "(", "std", "/", "np", ".", "sqrt", "(", "len", "(", "a", ")", ")", ")", "\n", "return", "m", ",", "pm", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.meta_evaluate": [[515, 534], ["train_lshot.warp_tqdm", "train_lshot.compute_confidence_interval", "train_lshot.compute_confidence_interval", "train_lshot.compute_confidence_interval", "range", "train_lshot.sample_case", "train_lshot.metric_class_type", "cl2n_list.append", "train_lshot.metric_class_type", "l2n_list.append", "train_lshot.metric_class_type", "un_list.append"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.compute_confidence_interval", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.compute_confidence_interval", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.compute_confidence_interval", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.sample_case", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.metric_class_type", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.metric_class_type", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.metric_class_type"], ["", "def", "meta_evaluate", "(", "data", ",", "train_mean", ",", "shot", ")", ":", "\n", "    ", "un_list", "=", "[", "]", "\n", "l2n_list", "=", "[", "]", "\n", "cl2n_list", "=", "[", "]", "\n", "for", "_", "in", "warp_tqdm", "(", "range", "(", "args", ".", "meta_test_iter", ")", ")", ":", "\n", "        ", "train_data", ",", "test_data", ",", "train_label", ",", "test_label", "=", "sample_case", "(", "data", ",", "shot", ")", "\n", "acc", "=", "metric_class_type", "(", "train_data", ",", "test_data", ",", "train_label", ",", "test_label", ",", "shot", ",", "train_mean", "=", "train_mean", ",", "\n", "norm_type", "=", "'CL2N'", ")", "\n", "cl2n_list", ".", "append", "(", "acc", ")", "\n", "acc", "=", "metric_class_type", "(", "train_data", ",", "test_data", ",", "train_label", ",", "test_label", ",", "shot", ",", "train_mean", "=", "train_mean", ",", "\n", "norm_type", "=", "'L2N'", ")", "\n", "l2n_list", ".", "append", "(", "acc", ")", "\n", "acc", "=", "metric_class_type", "(", "train_data", ",", "test_data", ",", "train_label", ",", "test_label", ",", "shot", ",", "train_mean", "=", "train_mean", ",", "\n", "norm_type", "=", "'UN'", ")", "\n", "un_list", ".", "append", "(", "acc", ")", "\n", "", "un_mean", ",", "un_conf", "=", "compute_confidence_interval", "(", "un_list", ")", "\n", "l2n_mean", ",", "l2n_conf", "=", "compute_confidence_interval", "(", "l2n_list", ")", "\n", "cl2n_mean", ",", "cl2n_conf", "=", "compute_confidence_interval", "(", "cl2n_list", ")", "\n", "return", "un_mean", ",", "un_conf", ",", "l2n_mean", ",", "l2n_conf", ",", "cl2n_mean", ",", "cl2n_conf", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.meta_evaluate_tune": [[535, 544], ["train_lshot.warp_tqdm", "train_lshot.compute_confidence_interval", "range", "train_lshot.sample_case", "train_lshot.metric_class_type", "cl2n_list.append"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.compute_confidence_interval", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.sample_case", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.metric_class_type"], ["", "def", "meta_evaluate_tune", "(", "data", ",", "train_mean", ",", "shot", ")", ":", "\n", "    ", "cl2n_list", "=", "[", "]", "\n", "for", "_", "in", "warp_tqdm", "(", "range", "(", "args", ".", "meta_val_iter", ")", ")", ":", "\n", "        ", "train_data", ",", "test_data", ",", "train_label", ",", "test_label", "=", "sample_case", "(", "data", ",", "shot", ")", "\n", "acc", "=", "metric_class_type", "(", "train_data", ",", "test_data", ",", "train_label", ",", "test_label", ",", "shot", ",", "train_mean", "=", "train_mean", ",", "\n", "norm_type", "=", "'CL2N'", ")", "\n", "cl2n_list", ".", "append", "(", "acc", ")", "\n", "", "cl2n_mean", ",", "cl2n_conf", "=", "compute_confidence_interval", "(", "cl2n_list", ")", "\n", "return", "cl2n_mean", ",", "cl2n_conf", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.tune_lambda": [[545, 583], ["train_lshot.get_dataloader", "train_lshot.load_checkpoint", "train_lshot.extract_feature_tune", "numpy.asarray", "numpy.asarray", "np.asarray.max", "np.asarray.max", "print", "log.info", "train_lshot.meta_evaluate_tune", "train_lshot.meta_evaluate_tune", "np.asarray.append", "np.asarray.append", "print", "log.info", "np.asarray.argmax", "np.asarray.argmax"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_dataloader", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.load_checkpoint", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.extract_feature_tune", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.meta_evaluate_tune", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.meta_evaluate_tune"], ["", "def", "tune_lambda", "(", "train_loader", ",", "model", ",", "log", ")", ":", "\n", "    ", "val_loader", "=", "get_dataloader", "(", "'val'", ",", "aug", "=", "False", ",", "shuffle", "=", "False", ",", "out_name", "=", "False", ")", "\n", "load_checkpoint", "(", "model", ",", "'best'", ")", "\n", "\n", "out_mean", ",", "out_dict", "=", "extract_feature_tune", "(", "train_loader", ",", "val_loader", ",", "model", ",", "tag", "=", "'best'", ")", "\n", "\n", "acc_val_list_1", "=", "[", "]", "\n", "acc_val_list_5", "=", "[", "]", "\n", "\n", "lmd_list", "=", "[", "0.1", ",", "0.3", ",", "0.5", ",", "0.7", ",", "0.8", ",", "1.0", ",", "1.2", ",", "1.5", "]", "\n", "for", "lmd", "in", "lmd_list", ":", "\n", "        ", "args", ".", "lmd", "=", "lmd", "\n", "accuracy_info_shot1", "=", "meta_evaluate_tune", "(", "out_dict", ",", "out_mean", ",", "1", ")", "\n", "accuracy_info_shot5", "=", "meta_evaluate_tune", "(", "out_dict", ",", "out_mean", ",", "5", ")", "\n", "\n", "acc_1_val", "=", "accuracy_info_shot1", "[", "0", "]", "\n", "acc_5_val", "=", "accuracy_info_shot5", "[", "0", "]", "\n", "acc_val_list_1", ".", "append", "(", "acc_1_val", ")", "\n", "acc_val_list_5", ".", "append", "(", "acc_5_val", ")", "\n", "\n", "print", "(", "\n", "'validation lmd={:0.2f}: Best\\nfeature\\tCL2N\\n{}\\t{:.4f}({:.4f})\\n{}\\t{:.4f}({:.4f}))'", ".", "format", "(", "args", ".", "lmd", ",", "\n", "'GVP 1Shot'", ",", "*", "accuracy_info_shot1", ",", "'GVP_5Shot'", ",", "*", "accuracy_info_shot5", ")", ")", "\n", "log", ".", "info", "(", "\n", "'validation lmd={:0.2f}: Best\\nfeature\\tCL2N\\n{}\\t{:.4f}({:.4f})\\n{}\\t{:.4f}({:.4f}))'", ".", "format", "(", "args", ".", "lmd", ",", "\n", "'GVP 1Shot'", ",", "*", "accuracy_info_shot1", ",", "'GVP_5Shot'", ",", "*", "accuracy_info_shot5", ")", ")", "\n", "\n", "", "acc_val_list_1", "=", "np", ".", "asarray", "(", "acc_val_list_1", ")", "\n", "acc_val_list_5", "=", "np", ".", "asarray", "(", "acc_val_list_5", ")", "\n", "best_acc_1", "=", "acc_val_list_1", ".", "max", "(", ")", "\n", "best_lmd_1", "=", "lmd_list", "[", "acc_val_list_1", ".", "argmax", "(", ")", "]", "\n", "best_acc_5", "=", "acc_val_list_5", ".", "max", "(", ")", "\n", "best_lmd_5", "=", "lmd_list", "[", "acc_val_list_5", ".", "argmax", "(", ")", "]", "\n", "\n", "print", "(", "'Best lambda on validation:\\n{:0.2f} with 1 shot acc {:.4f}\\n{:0.2f} with 5 shot acc {:.4f}'", ".", "format", "(", "best_lmd_1", ",", "best_acc_1", ",", "best_lmd_5", ",", "best_acc_5", ")", ")", "\n", "log", ".", "info", "(", "'Best lambda on validation:\\n{:0.2f} with 1 shot acc {:.4f}\\n{:0.2f} with 5 shot acc {:.4f}'", ".", "format", "(", "best_lmd_1", ",", "best_acc_1", ",", "best_lmd_5", ",", "best_acc_5", ")", ")", "\n", "\n", "return", "best_lmd_1", ",", "best_lmd_5", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.lshot_prediction": [[584, 592], ["train_lshot.create_affinity", "lshot_update.bound_update", "numpy.take"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.create_affinity", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.lshot_update.bound_update"], ["", "def", "lshot_prediction", "(", "args", ",", "knn", ",", "lmd", ",", "X", ",", "unary", ",", "support_label", ",", "test_label", ")", ":", "\n", "\n", "    ", "W", "=", "create_affinity", "(", "X", ",", "knn", ")", "\n", "l", "=", "bound_update", "(", "args", ",", "unary", ",", "W", ",", "lmd", ")", "\n", "out", "=", "np", ".", "take", "(", "support_label", ",", "l", ")", "\n", "#     acc, _ = get_accuracy(test_label, out) # Update", "\n", "acc", "=", "(", "out", "==", "test_label", ")", ".", "mean", "(", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.metric_class_type": [[593, 637], ["numpy.linalg.norm", "numpy.array", "numpy.concatenate", "gallery.reshape().mean.reshape().mean", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.cosine_similarity", "torch.softmax", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "gallery.reshape().mean.reshape().mean", "train_lshot.lshot_prediction", "numpy.take", "out.astype.astype", "gallery.reshape().mean.mean", "query.mean", "train_lshot.get_metric", "LA.norm.transpose", "numpy.argpartition", "scipy.stats.mode", "numpy.linalg.norm", "numpy.linalg.norm", "gallery.reshape().mean.reshape", "torch.argmin.unique", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gallery.reshape().mean.reshape", "numpy.linalg.norm", "numpy.linalg.norm", "W[].unsqueeze"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.lshot_prediction", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_metric"], ["", "def", "metric_class_type", "(", "gallery", ",", "query", ",", "support_label", ",", "test_label", ",", "shot", ",", "train_mean", "=", "None", ",", "norm_type", "=", "'CL2N'", ")", ":", "\n", "    ", "if", "norm_type", "==", "'CL2N'", ":", "\n", "        ", "gallery", "=", "gallery", "-", "train_mean", "\n", "gallery", "=", "gallery", "/", "LA", ".", "norm", "(", "gallery", ",", "2", ",", "1", ")", "[", ":", ",", "None", "]", "\n", "query", "=", "query", "-", "train_mean", "\n", "query", "=", "query", "/", "LA", ".", "norm", "(", "query", ",", "2", ",", "1", ")", "[", ":", ",", "None", "]", "\n", "", "elif", "norm_type", "==", "'L2N'", ":", "\n", "        ", "gallery", "=", "gallery", "/", "LA", ".", "norm", "(", "gallery", ",", "2", ",", "1", ")", "[", ":", ",", "None", "]", "\n", "query", "=", "query", "/", "LA", ".", "norm", "(", "query", ",", "2", ",", "1", ")", "[", ":", ",", "None", "]", "\n", "\n", "", "if", "args", ".", "proto_rect", ":", "\n", "        ", "eta", "=", "gallery", ".", "mean", "(", "0", ")", "-", "query", ".", "mean", "(", "0", ")", "# shift", "\n", "query", "=", "query", "+", "eta", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "query_aug", "=", "np", ".", "concatenate", "(", "(", "gallery", ",", "query", ")", ",", "axis", "=", "0", ")", "\n", "gallery_", "=", "gallery", ".", "reshape", "(", "args", ".", "meta_val_way", ",", "shot", ",", "gallery", ".", "shape", "[", "-", "1", "]", ")", ".", "mean", "(", "1", ")", "\n", "gallery_", "=", "torch", ".", "from_numpy", "(", "gallery_", ")", "\n", "query_aug", "=", "torch", ".", "from_numpy", "(", "query_aug", ")", "\n", "distance", "=", "get_metric", "(", "'cosine'", ")", "(", "gallery_", ",", "query_aug", ")", "\n", "predict", "=", "torch", ".", "argmin", "(", "distance", ",", "dim", "=", "1", ")", "\n", "cos_sim", "=", "F", ".", "cosine_similarity", "(", "query_aug", "[", ":", ",", "None", ",", ":", "]", ",", "gallery_", "[", "None", ",", ":", ",", ":", "]", ",", "dim", "=", "2", ")", "\n", "cos_sim", "=", "10", "*", "cos_sim", "\n", "W", "=", "F", ".", "softmax", "(", "cos_sim", ",", "dim", "=", "1", ")", "\n", "gallery_list", "=", "[", "(", "W", "[", "predict", "==", "i", ",", "i", "]", ".", "unsqueeze", "(", "1", ")", "*", "query_aug", "[", "predict", "==", "i", "]", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "for", "i", "in", "predict", ".", "unique", "(", ")", "]", "\n", "gallery", "=", "torch", ".", "cat", "(", "gallery_list", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "        ", "gallery", "=", "gallery", ".", "reshape", "(", "args", ".", "meta_val_way", ",", "shot", ",", "gallery", ".", "shape", "[", "-", "1", "]", ")", ".", "mean", "(", "1", ")", "\n", "\n", "", "support_label", "=", "support_label", "[", ":", ":", "shot", "]", "\n", "subtract", "=", "gallery", "[", ":", ",", "None", ",", ":", "]", "-", "query", "\n", "distance", "=", "LA", ".", "norm", "(", "subtract", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "test_label", "=", "np", ".", "array", "(", "test_label", ")", "\n", "# with LapLacianShot", "\n", "if", "args", ".", "lshot", "and", "args", ".", "lmd", "!=", "0", ":", "\n", "        ", "knn", "=", "args", ".", "knn", "\n", "lmd", "=", "args", ".", "lmd", "\n", "unary", "=", "distance", ".", "transpose", "(", ")", "**", "2", "\n", "acc", "=", "lshot_prediction", "(", "args", ",", "knn", ",", "lmd", ",", "query", ",", "unary", ",", "support_label", ",", "test_label", ")", "\n", "", "else", ":", "\n", "        ", "idx", "=", "np", ".", "argpartition", "(", "distance", ",", "args", ".", "num_NN", ",", "axis", "=", "0", ")", "[", ":", "args", ".", "num_NN", "]", "\n", "nearest_samples", "=", "np", ".", "take", "(", "support_label", ",", "idx", ")", "\n", "out", "=", "mode", "(", "nearest_samples", ",", "axis", "=", "0", ")", "[", "0", "]", "\n", "out", "=", "out", ".", "astype", "(", "int", ")", "\n", "acc", "=", "(", "out", "==", "test_label", ")", ".", "mean", "(", ")", "\n", "", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.create_affinity": [[639, 650], ["sklearn.neighbors.NearestNeighbors().fit", "NearestNeighbors().fit.kneighbors", "numpy.repeat", "knnind[].flatten", "numpy.ones", "scipy.sparse.csc_matrix", "range", "sklearn.neighbors.NearestNeighbors"], "function", ["None"], ["", "def", "create_affinity", "(", "X", ",", "knn", ")", ":", "\n", "    ", "N", ",", "D", "=", "X", ".", "shape", "\n", "# print('Compute Affinity ')", "\n", "nbrs", "=", "NearestNeighbors", "(", "n_neighbors", "=", "knn", ")", ".", "fit", "(", "X", ")", "\n", "dist", ",", "knnind", "=", "nbrs", ".", "kneighbors", "(", "X", ")", "\n", "\n", "row", "=", "np", ".", "repeat", "(", "range", "(", "N", ")", ",", "knn", "-", "1", ")", "\n", "col", "=", "knnind", "[", ":", ",", "1", ":", "]", ".", "flatten", "(", ")", "\n", "data", "=", "np", ".", "ones", "(", "X", ".", "shape", "[", "0", "]", "*", "(", "knn", "-", "1", ")", ")", "\n", "W", "=", "sparse", ".", "csc_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "N", ",", "N", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "return", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.get_accuracy": [[651, 676], ["numpy.unique", "np.unique.__len__", "numpy.unique", "np.unique.__len__", "max", "numpy.zeros", "range", "numpy.zeros", "range", "L1.__len__", "L2.__len__", "print", "range", "scipy.optimize.linear_sum_assignment", "L2.__len__", "sklearn.metrics.accuracy_score", "[].__len__", "numpy.nonzero", "len", "numpy.nonzero"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.loader.DatasetFolder.__len__", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.loader.DatasetFolder.__len__", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.loader.DatasetFolder.__len__", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.loader.DatasetFolder.__len__", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.loader.DatasetFolder.__len__", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.loader.DatasetFolder.__len__"], ["", "def", "get_accuracy", "(", "L1", ",", "L2", ")", ":", "\n", "# Since the labels may be different we utilize the Hungarian method to ensure the map of", "\n", "# the original ground truth labeling with the returned labels from our laplacian update which is similar to clustering.", "\n", "    ", "if", "L1", ".", "__len__", "(", ")", "!=", "L2", ".", "__len__", "(", ")", ":", "\n", "        ", "print", "(", "'size(L1) must == size(L2)'", ")", "\n", "\n", "", "Label1", "=", "np", ".", "unique", "(", "L1", ")", "\n", "nClass1", "=", "Label1", ".", "__len__", "(", ")", "\n", "Label2", "=", "np", ".", "unique", "(", "L2", ")", "\n", "nClass2", "=", "Label2", ".", "__len__", "(", ")", "\n", "\n", "nClass", "=", "max", "(", "nClass1", ",", "nClass2", ")", "\n", "G", "=", "np", ".", "zeros", "(", "(", "nClass", ",", "nClass", ")", ")", "\n", "for", "i", "in", "range", "(", "nClass1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "nClass2", ")", ":", "\n", "            ", "G", "[", "i", "]", "[", "j", "]", "=", "np", ".", "nonzero", "(", "(", "L1", "==", "Label1", "[", "i", "]", ")", "*", "(", "L2", "==", "Label2", "[", "j", "]", ")", ")", "[", "0", "]", ".", "__len__", "(", ")", "\n", "\n", "", "", "c", "=", "linear_sum_assignment", "(", "-", "G", ".", "T", ")", "[", "1", "]", "\n", "newL2", "=", "np", ".", "zeros", "(", "L2", ".", "__len__", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "nClass2", ")", ":", "\n", "        ", "for", "j", "in", "np", ".", "nonzero", "(", "L2", "==", "Label2", "[", "i", "]", ")", "[", "0", "]", ":", "\n", "            ", "if", "len", "(", "Label1", ")", ">", "c", "[", "i", "]", ":", "\n", "                ", "newL2", "[", "j", "]", "=", "Label1", "[", "c", "[", "i", "]", "]", "\n", "\n", "", "", "", "return", "accuracy_score", "(", "L1", ",", "newL2", ")", ",", "newL2", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.sample_case": [[677, 697], ["random.sample", "numpy.array().astype", "numpy.array().astype", "list", "random.sample", "ld_dict.keys", "len", "len", "len", "len", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "sample_case", "(", "ld_dict", ",", "shot", ")", ":", "\n", "# Sample meta task", "\n", "    ", "sample_class", "=", "random", ".", "sample", "(", "list", "(", "ld_dict", ".", "keys", "(", ")", ")", ",", "args", ".", "meta_val_way", ")", "\n", "train_input", "=", "[", "]", "\n", "test_input", "=", "[", "]", "\n", "test_label", "=", "[", "]", "\n", "train_label", "=", "[", "]", "\n", "for", "each_class", "in", "sample_class", ":", "\n", "        ", "total_samples", "=", "shot", "+", "args", ".", "meta_val_query", "\n", "if", "len", "(", "ld_dict", "[", "each_class", "]", ")", "<", "total_samples", ":", "\n", "            ", "total_samples", "=", "len", "(", "ld_dict", "[", "each_class", "]", ")", "\n", "\n", "", "samples", "=", "random", ".", "sample", "(", "ld_dict", "[", "each_class", "]", ",", "total_samples", ")", "\n", "train_label", "+=", "[", "each_class", "]", "*", "len", "(", "samples", "[", ":", "shot", "]", ")", "\n", "test_label", "+=", "[", "each_class", "]", "*", "len", "(", "samples", "[", "shot", ":", "]", ")", "\n", "train_input", "+=", "samples", "[", ":", "shot", "]", "\n", "test_input", "+=", "samples", "[", "shot", ":", "]", "\n", "", "train_input", "=", "np", ".", "array", "(", "train_input", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "test_input", "=", "np", ".", "array", "(", "test_input", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "train_input", ",", "test_input", ",", "train_label", ",", "test_label", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.do_extract_and_evaluate": [[699, 743], ["train_lshot.get_dataloader", "train_lshot.get_dataloader", "print", "log.info", "train_lshot.load_checkpoint", "train_lshot.extract_feature", "print", "log.info", "train_lshot.meta_evaluate", "print", "log.info", "train_lshot.meta_evaluate", "print", "log.info", "train_lshot.load_checkpoint", "train_lshot.extract_feature", "print", "log.info", "train_lshot.meta_evaluate", "print", "log.info", "train_lshot.meta_evaluate", "print", "log.info", "print", "train_lshot.tune_lambda"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_dataloader", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_dataloader", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.load_checkpoint", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.extract_feature", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.meta_evaluate", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.meta_evaluate", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.load_checkpoint", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.extract_feature", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.meta_evaluate", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.meta_evaluate", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_lshot.tune_lambda"], ["", "def", "do_extract_and_evaluate", "(", "model", ",", "log", ")", ":", "\n", "    ", "train_loader", "=", "get_dataloader", "(", "'train'", ",", "aug", "=", "False", ",", "shuffle", "=", "False", ",", "out_name", "=", "False", ")", "\n", "if", "args", ".", "tune_lmd", ":", "\n", "        ", "print", "(", "'Tuning Lambda'", ")", "\n", "best_lmd_1", ",", "best_lmd_5", "=", "tune_lambda", "(", "train_loader", ",", "model", ",", "log", ")", "\n", "", "else", ":", "\n", "        ", "best_lmd_1", "=", "best_lmd_5", "=", "args", ".", "lmd", "\n", "", "val_loader", "=", "get_dataloader", "(", "'test'", ",", "aug", "=", "False", ",", "shuffle", "=", "False", ",", "out_name", "=", "False", ")", "\n", "print", "(", "' Proto-rectification = {} in Evaluation'", ".", "format", "(", "args", ".", "proto_rect", ")", ")", "\n", "log", ".", "info", "(", "' Proto-rectification = {} in Evaluation'", ".", "format", "(", "args", ".", "proto_rect", ")", ")", "\n", "## With the last model trained on source dataset", "\n", "load_checkpoint", "(", "model", ",", "'last'", ")", "\n", "out_mean", ",", "fc_out_mean", ",", "out_dict", ",", "fc_out_dict", "=", "extract_feature", "(", "train_loader", ",", "val_loader", ",", "model", ",", "'last'", ")", "\n", "args", ".", "lmd", "=", "best_lmd_1", "\n", "print", "(", "' Run with lambda {} for 1 shot'", ".", "format", "(", "args", ".", "lmd", ")", ")", "\n", "log", ".", "info", "(", "' Run with lambda {} for 1 shot'", ".", "format", "(", "args", ".", "lmd", ")", ")", "\n", "accuracy_info_shot1", "=", "meta_evaluate", "(", "out_dict", ",", "out_mean", ",", "1", ")", "\n", "args", ".", "lmd", "=", "best_lmd_5", "\n", "print", "(", "' Run with lambda {} for 5 shot'", ".", "format", "(", "args", ".", "lmd", ")", ")", "\n", "log", ".", "info", "(", "' Run with lambda {} for 5 shot'", ".", "format", "(", "args", ".", "lmd", ")", ")", "\n", "accuracy_info_shot5", "=", "meta_evaluate", "(", "out_dict", ",", "out_mean", ",", "5", ")", "\n", "print", "(", "\n", "'Meta Test: LAST\\nfeature\\tUN\\tL2N\\tCL2N\\n{}\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})\\n{}\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})'", ".", "format", "(", "\n", "'GVP 1Shot'", ",", "*", "accuracy_info_shot1", ",", "'GVP_5Shot'", ",", "*", "accuracy_info_shot5", ")", ")", "\n", "log", ".", "info", "(", "\n", "'Meta Test: LAST\\nfeature\\tUN\\tL2N\\tCL2N\\n{}\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})\\n{}\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})'", ".", "format", "(", "\n", "'GVP 1Shot'", ",", "*", "accuracy_info_shot1", ",", "'GVP_5Shot'", ",", "*", "accuracy_info_shot5", ")", ")", "\n", "## With the best model trained on source dataset", "\n", "load_checkpoint", "(", "model", ",", "'best'", ")", "\n", "out_mean", ",", "fc_out_mean", ",", "out_dict", ",", "fc_out_dict", "=", "extract_feature", "(", "train_loader", ",", "val_loader", ",", "model", ",", "'best'", ")", "\n", "args", ".", "lmd", "=", "best_lmd_1", "\n", "print", "(", "' Run with lambda {} for 1 shot'", ".", "format", "(", "args", ".", "lmd", ")", ")", "\n", "log", ".", "info", "(", "' Run with lambda {} for 1 shot'", ".", "format", "(", "args", ".", "lmd", ")", ")", "\n", "accuracy_info_shot1", "=", "meta_evaluate", "(", "out_dict", ",", "out_mean", ",", "1", ")", "\n", "args", ".", "lmd", "=", "best_lmd_5", "\n", "print", "(", "' Run with lambda {} for 5 shot'", ".", "format", "(", "args", ".", "lmd", ")", ")", "\n", "log", ".", "info", "(", "' Run with lambda {} for 5 shot'", ".", "format", "(", "args", ".", "lmd", ")", ")", "\n", "accuracy_info_shot5", "=", "meta_evaluate", "(", "out_dict", ",", "out_mean", ",", "5", ")", "\n", "print", "(", "\n", "'Meta Test: BEST\\nfeature\\tUN\\tL2N\\tCL2N\\n{}\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})\\n{}\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})'", ".", "format", "(", "\n", "'GVP 1Shot'", ",", "*", "accuracy_info_shot1", ",", "'GVP_5Shot'", ",", "*", "accuracy_info_shot5", ")", ")", "\n", "log", ".", "info", "(", "\n", "'Meta Test: BEST\\nfeature\\tUN\\tL2N\\tCL2N\\n{}\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})\\n{}\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})\\t{:.4f}({:.4f})'", ".", "format", "(", "\n", "'GVP 1Shot'", ",", "*", "accuracy_info_shot1", ",", "'GVP_5Shot'", ",", "*", "accuracy_info_shot5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.SmoothCrossEntropy.__init__": [[271, 274], ["torch.Module.__init__", "float"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "epsilon", ":", "float", "=", "0.", ")", ":", "\n", "        ", "super", "(", "SmoothCrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "epsilon", "=", "float", "(", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.SmoothCrossEntropy.forward": [[275, 279], ["torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like.scatter_", "torch.full_like.scatter_", "torch.full_like.scatter_", "torch.full_like.scatter_", "torch.full_like.scatter_", "torch.full_like.scatter_", "torch.full_like.scatter_", "torch.full_like.scatter_", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "torch.kl_div", "labels.unsqueeze", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ":", "torch", ".", "Tensor", ",", "labels", ":", "torch", ".", "LongTensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "target_probs", "=", "torch", ".", "full_like", "(", "logits", ",", "self", ".", "epsilon", "/", "(", "logits", ".", "shape", "[", "1", "]", "-", "1", ")", ")", "\n", "target_probs", ".", "scatter_", "(", "1", ",", "labels", ".", "unsqueeze", "(", "1", ")", ",", "1", "-", "self", ".", "epsilon", ")", "\n", "return", "F", ".", "kl_div", "(", "torch", ".", "log_softmax", "(", "logits", ",", "1", ")", ",", "target_probs", ",", "reduction", "=", "'batchmean'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.__init__": [[281, 283], ["train_inatural_lshot.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.reset": [[284, 289], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.update": [[290, 295], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.main": [[37, 143], ["utils.configuration.parser_args", "train_inatural_lshot.setup_logger", "sorted", "setup_logger.info", "setup_logger.info", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "train_inatural_lshot.get_optimizer", "train_inatural_lshot.get_dataloader", "train_inatural_lshot.get_scheduler", "train_inatural_lshot.warp_tqdm", "train_inatural_lshot.do_extract_and_evaluate", "vars().items", "setup_logger.info", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "SmoothCrossEntropy().cuda", "torch.CrossEntropyLoss().cuda", "os.path.isfile", "os.path.isfile", "os.path.isfile", "train_inatural_lshot.do_extract_and_evaluate", "train_inatural_lshot.get_dataloader", "train_inatural_lshot.get_dataloader", "len", "list", "train_inatural_lshot.train", "get_scheduler.step", "train_inatural_lshot.save_checkpoint", "sum", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "setup_logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.state_dict", "model.state_dict.update", "torch.nn.DataParallel().cuda.load_state_dict", "setup_logger.info", "setup_logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.DataParallel().cuda.load_state_dict", "get_optimizer.load_state_dict", "setup_logger.info", "setup_logger.info", "range", "train_inatural_lshot.meta_val", "setup_logger.info", "max", "vars", "str", "train_inatural_lshot.SmoothCrossEntropy", "torch.CrossEntropyLoss", "warp_tqdm.set_description", "torch.nn.DataParallel().cuda.state_dict", "get_optimizer.state_dict", "str", "p.data.nelement", "params.items", "torch.nn.DataParallel().cuda.parameters"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.utils.configuration.parser_args", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.setup_logger", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_optimizer", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_dataloader", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_scheduler", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.do_extract_and_evaluate", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.do_extract_and_evaluate", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_dataloader", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_dataloader", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.train", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.save_checkpoint", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.update", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.meta_val"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_prec1", "\n", "args", "=", "configuration", ".", "parser_args", "(", ")", "\n", "\n", "### initial logger", "\n", "log", "=", "setup_logger", "(", "args", ".", "save_path", "+", "args", ".", "log_file", ")", "\n", "for", "key", ",", "value", "in", "sorted", "(", "vars", "(", "args", ")", ".", "items", "(", ")", ")", ":", "\n", "        ", "log", ".", "info", "(", "str", "(", "key", ")", "+", "': '", "+", "str", "(", "value", ")", ")", "\n", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "cudnn", ".", "deterministic", "=", "True", "\n", "# create model", "\n", "log", ".", "info", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "args", ".", "num_classes", ",", "remove_linear", "=", "args", ".", "do_meta_train", ")", "\n", "\n", "log", ".", "info", "(", "'Number of model parameters: {}'", ".", "format", "(", "sum", "(", "[", "p", ".", "data", ".", "nelement", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "]", ")", ")", ")", "\n", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "if", "args", ".", "label_smooth", ">", "0", ":", "\n", "        ", "criterion", "=", "SmoothCrossEntropy", "(", "epsilon", "=", "args", ".", "label_smooth", ")", ".", "cuda", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", "=", "get_optimizer", "(", "model", ")", "\n", "\n", "if", "args", ".", "pretrain", ":", "\n", "        ", "pretrain", "=", "args", ".", "pretrain", "+", "'/checkpoint.pth.tar'", "\n", "if", "os", ".", "path", ".", "isfile", "(", "pretrain", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"=> loading pretrained weight '{}'\"", ".", "format", "(", "pretrain", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "pretrain", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "params", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "params", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "params", ".", "items", "(", ")", "if", "k", "in", "model_dict", "}", "\n", "model_dict", ".", "update", "(", "params", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "'[Attention]: Do not find pretrained model {}'", ".", "format", "(", "pretrain", ")", ")", "\n", "\n", "# resume from an exist checkpoint", "\n", "", "", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "ckpt_path", "+", "'/checkpoint.pth.tar'", ")", "and", "args", ".", "resume", "==", "''", ":", "\n", "        ", "args", ".", "resume", "=", "args", ".", "ckpt_path", "+", "'/checkpoint.pth.tar'", "\n", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "log", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_prec1", "=", "checkpoint", "[", "'best_prec1'", "]", "\n", "# scheduler.load_state_dict(checkpoint['scheduler'])", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "log", ".", "info", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "log", ".", "info", "(", "'[Attention]: Do not find checkpoint {}'", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "# Data loading code", "\n", "\n", "", "", "if", "args", ".", "evaluate", ":", "\n", "        ", "do_extract_and_evaluate", "(", "model", ",", "log", ")", "\n", "return", "\n", "", "args", ".", "enlarge", "=", "False", "\n", "if", "args", ".", "do_meta_train", ":", "\n", "        ", "sample_info", "=", "[", "args", ".", "meta_train_iter", ",", "args", ".", "meta_train_way", ",", "args", ".", "meta_train_shot", ",", "args", ".", "meta_train_query", "]", "\n", "train_loader", "=", "get_dataloader", "(", "'train'", ",", "not", "args", ".", "disable_train_augment", ",", "sample", "=", "sample_info", ")", "\n", "", "else", ":", "\n", "        ", "train_loader", "=", "get_dataloader", "(", "'train'", ",", "not", "args", ".", "disable_train_augment", ",", "shuffle", "=", "True", ")", "\n", "\n", "", "sample_info", "=", "[", "args", ".", "meta_val_iter", ",", "args", ".", "meta_val_way", ",", "args", ".", "meta_val_shot", ",", "args", ".", "meta_val_query", "]", "\n", "val_loader", "=", "get_dataloader", "(", "'val'", ",", "False", ",", "sample", "=", "sample_info", ")", "\n", "\n", "scheduler", "=", "get_scheduler", "(", "len", "(", "train_loader", ")", ",", "optimizer", ")", "\n", "tqdm_loop", "=", "warp_tqdm", "(", "list", "(", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ")", ")", "\n", "for", "epoch", "in", "tqdm_loop", ":", "\n", "# train for one epoch", "\n", "        ", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "scheduler", ",", "log", ")", "\n", "scheduler", ".", "step", "(", "epoch", ")", "\n", "# evaluate on meta validation set", "\n", "is_best", "=", "False", "\n", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "meta_val_interval", "==", "0", ":", "\n", "            ", "prec1", "=", "meta_val", "(", "val_loader", ",", "model", ")", "\n", "log", ".", "info", "(", "'Meta Val {}: {}'", ".", "format", "(", "epoch", ",", "prec1", ")", ")", "\n", "is_best", "=", "prec1", ">", "best_prec1", "\n", "best_prec1", "=", "max", "(", "prec1", ",", "best_prec1", ")", "\n", "if", "not", "args", ".", "disable_tqdm", ":", "\n", "                ", "tqdm_loop", ".", "set_description", "(", "'Best Acc {:.2f}'", ".", "format", "(", "best_prec1", "*", "100.", ")", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "", "", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "# 'scheduler': scheduler.state_dict(),", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_prec1'", ":", "best_prec1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", ",", "folder", "=", "args", ".", "ckpt_path", ")", "\n", "\n", "# do evaluate at the end", "\n", "", "args", ".", "enlarge", "=", "True", "\n", "do_extract_and_evaluate", "(", "model", ",", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_metric": [[145, 153], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.cosine_similarity"], "function", ["None"], ["", "def", "get_metric", "(", "metric_type", ")", ":", "\n", "    ", "METRICS", "=", "{", "\n", "'cosine'", ":", "lambda", "gallery", ",", "query", ":", "1.", "-", "F", ".", "cosine_similarity", "(", "query", "[", ":", ",", "None", ",", ":", "]", ",", "gallery", "[", "None", ",", ":", ",", ":", "]", ",", "dim", "=", "2", ")", ",", "\n", "'euclidean'", ":", "lambda", "gallery", ",", "query", ":", "(", "(", "query", "[", ":", ",", "None", ",", ":", "]", "-", "gallery", "[", "None", ",", ":", ",", ":", "]", ")", "**", "2", ")", ".", "sum", "(", "2", ")", ",", "\n", "'l1'", ":", "lambda", "gallery", ",", "query", ":", "torch", ".", "norm", "(", "(", "query", "[", ":", ",", "None", ",", ":", "]", "-", "gallery", "[", "None", ",", ":", ",", ":", "]", ")", ",", "p", "=", "1", ",", "dim", "=", "2", ")", ",", "\n", "'l2'", ":", "lambda", "gallery", ",", "query", ":", "torch", ".", "norm", "(", "(", "query", "[", ":", ",", "None", ",", ":", "]", "-", "gallery", "[", "None", ",", ":", ",", ":", "]", ")", ",", "p", "=", "2", ",", "dim", "=", "2", ")", ",", "\n", "}", "\n", "return", "METRICS", "[", "metric_type", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.metric_prediction": [[155, 163], ["gallery.view.view", "query.view.view", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.argmin", "torch.take", "torch.take", "torch.take", "torch.take", "torch.take", "torch.take", "torch.take", "torch.take", "train_inatural_lshot.get_metric"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_metric"], ["", "def", "metric_prediction", "(", "gallery", ",", "query", ",", "train_label", ",", "metric_type", ")", ":", "\n", "    ", "gallery", "=", "gallery", ".", "view", "(", "gallery", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "query", "=", "query", ".", "view", "(", "query", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "distance", "=", "get_metric", "(", "metric_type", ")", "(", "gallery", ",", "query", ")", "\n", "predict", "=", "torch", ".", "argmin", "(", "distance", ",", "dim", "=", "1", ")", "\n", "predict", "=", "torch", ".", "take", "(", "train_label", ",", "predict", ")", "\n", "\n", "return", "predict", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.meta_val": [[165, 188], ["train_inatural_lshot.AverageMeter", "model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "train_inatural_lshot.warp_tqdm", "enumerate", "target.cuda.cuda", "[].cuda", "train_out.reshape().mean.reshape().mean", "train_inatural_lshot.metric_prediction", "train_inatural_lshot.AverageMeter.update", "acc.item", "warp_tqdm.set_description", "train_out.reshape().mean.reshape", "model"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.metric_prediction", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.update"], ["", "def", "meta_val", "(", "test_loader", ",", "model", ",", "train_mean", "=", "None", ")", ":", "\n", "    ", "top1", "=", "AverageMeter", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "tqdm_test_loader", "=", "warp_tqdm", "(", "test_loader", ")", "\n", "for", "i", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "tqdm_test_loader", ")", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", "0", ",", "non_blocking", "=", "True", ")", "\n", "output", "=", "model", "(", "inputs", ",", "True", ")", "[", "0", "]", ".", "cuda", "(", "0", ")", "\n", "if", "train_mean", "is", "not", "None", ":", "\n", "                ", "output", "=", "output", "-", "train_mean", "\n", "", "train_out", "=", "output", "[", ":", "args", ".", "meta_val_way", "*", "args", ".", "meta_val_shot", "]", "\n", "train_label", "=", "target", "[", ":", "args", ".", "meta_val_way", "*", "args", ".", "meta_val_shot", "]", "\n", "test_out", "=", "output", "[", "args", ".", "meta_val_way", "*", "args", ".", "meta_val_shot", ":", "]", "\n", "test_label", "=", "target", "[", "args", ".", "meta_val_way", "*", "args", ".", "meta_val_shot", ":", "]", "\n", "train_out", "=", "train_out", ".", "reshape", "(", "args", ".", "meta_val_way", ",", "args", ".", "meta_val_shot", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "\n", "train_label", "=", "train_label", "[", ":", ":", "args", ".", "meta_val_shot", "]", "\n", "prediction", "=", "metric_prediction", "(", "train_out", ",", "test_out", ",", "train_label", ",", "args", ".", "meta_val_metric", ")", "\n", "acc", "=", "(", "prediction", "==", "test_label", ")", ".", "float", "(", ")", ".", "mean", "(", ")", "\n", "top1", ".", "update", "(", "acc", ".", "item", "(", ")", ")", "\n", "if", "not", "args", ".", "disable_tqdm", ":", "\n", "                ", "tqdm_test_loader", ".", "set_description", "(", "'Acc {:.2f}'", ".", "format", "(", "top1", ".", "avg", "*", "100", ")", ")", "\n", "", "", "", "return", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.train": [[190, 263], ["train_inatural_lshot.AverageMeter", "train_inatural_lshot.AverageMeter", "train_inatural_lshot.AverageMeter", "train_inatural_lshot.AverageMeter", "train_inatural_lshot.AverageMeter", "model.train", "time.time", "train_inatural_lshot.warp_tqdm", "enumerate", "train_inatural_lshot.AverageMeter.update", "[].repeat().reshape().long.cuda", "numpy.random.rand", "train_inatural_lshot.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "train_inatural_lshot.accuracy", "train_inatural_lshot.AverageMeter.update", "train_inatural_lshot.AverageMeter.update", "train_inatural_lshot.AverageMeter.update", "time.time", "scheduler.step", "[].repeat().reshape().long", "numpy.random.beta", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "train_inatural_lshot.rand_bbox", "model", "model", "criterion", "criterion.item", "input.size", "input.size", "input.size", "warp_tqdm.set_description", "log.info", "time.time", "input.size", "output.cuda.cuda", "shot_proto.reshape().mean.reshape().mean", "time.time", "[].repeat().reshape", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "criterion", "criterion", "len", "len", "shot_proto.reshape().mean.reshape", "train_inatural_lshot.get_metric", "[].repeat", "input.size", "input.size", "input.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.train", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.update", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.update", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.accuracy", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.update", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.update", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.AverageMeter.update", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.rand_bbox", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_metric"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "scheduler", ",", "log", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "data_time", "=", "AverageMeter", "(", ")", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "tqdm_train_loader", "=", "warp_tqdm", "(", "train_loader", ")", "\n", "for", "i", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "tqdm_train_loader", ")", ":", "\n", "        ", "if", "args", ".", "scheduler", "==", "'cosine'", ":", "\n", "            ", "scheduler", ".", "step", "(", "epoch", "*", "len", "(", "train_loader", ")", "+", "i", ")", "\n", "# measure data loading time", "\n", "", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "do_meta_train", ":", "\n", "            ", "target", "=", "torch", ".", "arange", "(", "args", ".", "meta_train_way", ")", "[", ":", ",", "None", "]", ".", "repeat", "(", "1", ",", "args", ".", "meta_train_query", ")", ".", "reshape", "(", "-", "1", ")", ".", "long", "(", ")", "\n", "", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "r", "=", "np", ".", "random", ".", "rand", "(", "1", ")", "\n", "if", "args", ".", "beta", ">", "0", "and", "r", "<", "args", ".", "cutmix_prob", ":", "\n", "# generate mixed sample", "\n", "            ", "lam", "=", "np", ".", "random", ".", "beta", "(", "args", ".", "beta", ",", "args", ".", "beta", ")", "\n", "rand_index", "=", "torch", ".", "randperm", "(", "input", ".", "size", "(", ")", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "target_a", "=", "target", "\n", "target_b", "=", "target", "[", "rand_index", "]", "\n", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "=", "rand_bbox", "(", "input", ".", "size", "(", ")", ",", "lam", ")", "\n", "input", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "=", "input", "[", "rand_index", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "\n", "# adjust lambda to exactly match pixel ratio", "\n", "lam", "=", "1", "-", "(", "(", "bbx2", "-", "bbx1", ")", "*", "(", "bby2", "-", "bby1", ")", "/", "(", "input", ".", "size", "(", ")", "[", "-", "1", "]", "*", "input", ".", "size", "(", ")", "[", "-", "2", "]", ")", ")", "\n", "# compute output", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target_a", ")", "*", "lam", "+", "criterion", "(", "output", ",", "target_b", ")", "*", "(", "1.", "-", "lam", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "model", "(", "input", ")", "\n", "if", "args", ".", "do_meta_train", ":", "\n", "                ", "output", "=", "output", ".", "cuda", "(", "0", ")", "\n", "shot_proto", "=", "output", "[", ":", "args", ".", "meta_train_shot", "*", "args", ".", "meta_train_way", "]", "\n", "query_proto", "=", "output", "[", "args", ".", "meta_train_shot", "*", "args", ".", "meta_train_way", ":", "]", "\n", "shot_proto", "=", "shot_proto", ".", "reshape", "(", "args", ".", "meta_train_way", ",", "args", ".", "meta_train_shot", ",", "-", "1", ")", ".", "mean", "(", "1", ")", "\n", "output", "=", "-", "get_metric", "(", "args", ".", "meta_train_metric", ")", "(", "shot_proto", ",", "query_proto", ")", "\n", "", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "prec1", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", "[", "0", "]", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "if", "not", "args", ".", "disable_tqdm", ":", "\n", "            ", "tqdm_train_loader", ".", "set_description", "(", "'Acc {:.2f}'", ".", "format", "(", "top1", ".", "avg", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "log", ".", "info", "(", "'Epoch: [{0}][{1}/{2}]\\t'", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Loss {loss.val:.4f} ({loss.avg:.4f})\\t'", "\n", "'Prec@1 {top1.val:.3f} ({top1.avg:.3f})\\t'", "\n", "'Prec@5 {top5.val:.3f} ({top5.avg:.3f})'", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "batch_time", "=", "batch_time", ",", "\n", "data_time", "=", "data_time", ",", "loss", "=", "losses", ",", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.save_checkpoint": [[265, 269], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["None"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ",", "folder", "=", "'result/default'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "folder", "+", "'/'", "+", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "folder", "+", "'/'", "+", "filename", ",", "folder", "+", "'/model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.accuracy": [[297, 312], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.setup_logger": [[314, 333], ["logging.Formatter", "logging.getLogger", "logging.FileHandler", "logging.FileHandler.set_name", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "os.path.dirname", "os.path.isdir", "os.makedirs", "os.path.dirname", "os.path.dirname"], "function", ["None"], ["", "", "def", "setup_logger", "(", "filepath", ")", ":", "\n", "    ", "file_formatter", "=", "logging", ".", "Formatter", "(", "\n", "\"[%(asctime)s %(filename)s:%(lineno)s] %(levelname)-8s %(message)s\"", ",", "\n", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ",", "\n", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "'example'", ")", "\n", "\n", "file_handle_name", "=", "\"file\"", "\n", "if", "file_handle_name", "in", "[", "h", ".", "name", "for", "h", "in", "logger", ".", "handlers", "]", ":", "\n", "        ", "return", "\n", "", "if", "os", ".", "path", ".", "dirname", "(", "filepath", ")", "is", "not", "''", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "dirname", "(", "filepath", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "filepath", ")", ")", "\n", "", "", "file_handle", "=", "logging", ".", "FileHandler", "(", "filename", "=", "filepath", ",", "mode", "=", "\"a\"", ")", "\n", "file_handle", ".", "set_name", "(", "file_handle_name", ")", "\n", "file_handle", ".", "setFormatter", "(", "file_formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handle", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_scheduler": [[335, 346], ["torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "int", "int"], "function", ["None"], ["", "def", "get_scheduler", "(", "batches", ",", "optimiter", ")", ":", "\n", "    ", "\"\"\"\n    cosine will change learning rate every iteration, others change learning rate every epoch\n    :param batches: the number of iterations in each epochs\n    :return: scheduler\n    \"\"\"", "\n", "SCHEDULER", "=", "{", "'step'", ":", "StepLR", "(", "optimiter", ",", "args", ".", "lr_stepsize", ",", "args", ".", "lr_gamma", ")", ",", "\n", "'multi_step'", ":", "MultiStepLR", "(", "optimiter", ",", "milestones", "=", "[", "int", "(", ".5", "*", "args", ".", "epochs", ")", ",", "int", "(", ".75", "*", "args", ".", "epochs", ")", "]", ",", "\n", "gamma", "=", "args", ".", "lr_gamma", ")", ",", "\n", "'cosine'", ":", "CosineAnnealingLR", "(", "optimiter", ",", "batches", "*", "args", ".", "epochs", ",", "eta_min", "=", "1e-9", ")", "}", "\n", "return", "SCHEDULER", "[", "args", ".", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_optimizer": [[348, 353], ["torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "module.parameters", "module.parameters"], "function", ["None"], ["", "def", "get_optimizer", "(", "module", ")", ":", "\n", "    ", "OPTIMIZER", "=", "{", "'SGD'", ":", "torch", ".", "optim", ".", "SGD", "(", "module", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "args", ".", "nesterov", ")", ",", "\n", "'Adam'", ":", "torch", ".", "optim", ".", "Adam", "(", "module", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "}", "\n", "return", "OPTIMIZER", "[", "args", ".", "optimizer", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.rand_bbox": [[355, 372], ["numpy.sqrt", "numpy.int", "numpy.int", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip"], "function", ["None"], ["", "def", "rand_bbox", "(", "size", ",", "lam", ")", ":", "\n", "    ", "W", "=", "size", "[", "2", "]", "\n", "H", "=", "size", "[", "3", "]", "\n", "cut_rat", "=", "np", ".", "sqrt", "(", "1.", "-", "lam", ")", "\n", "cut_w", "=", "np", ".", "int", "(", "W", "*", "cut_rat", ")", "\n", "cut_h", "=", "np", ".", "int", "(", "H", "*", "cut_rat", ")", "\n", "\n", "# uniform", "\n", "cx", "=", "np", ".", "random", ".", "randint", "(", "W", ")", "\n", "cy", "=", "np", ".", "random", ".", "randint", "(", "H", ")", "\n", "\n", "bbx1", "=", "np", ".", "clip", "(", "cx", "-", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby1", "=", "np", ".", "clip", "(", "cy", "-", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "bbx2", "=", "np", ".", "clip", "(", "cx", "+", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby2", "=", "np", ".", "clip", "(", "cy", "+", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "\n", "return", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.extract_feature": [[374, 434], ["os.path.isfile", "model.eval", "train_inatural_lshot.load_pickle", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "collections.defaultdict", "collections.defaultdict", "enumerate", "collections.defaultdict", "collections.defaultdict", "enumerate", "train_inatural_lshot.save_pickle", "os.path.isdir", "os.makedirs", "os.path.isfile", "enumerate", "numpy.concatenate().mean", "train_inatural_lshot.save_pickle", "train_inatural_lshot.load_pickle", "train_inatural_lshot.warp_tqdm", "model", "outputs.cpu().data.numpy.cpu().data.numpy", "zip", "train_inatural_lshot.warp_tqdm", "model", "outputs.cpu().data.numpy.cpu().data.numpy", "zip", "train_inatural_lshot.warp_tqdm", "model", "np.concatenate().mean.append", "len", "numpy.concatenate().mean", "fc_outputs.cpu().data.numpy.cpu().data.numpy", "query_output_dict[].append", "query_fc_output_dict[].append", "fc_outputs.cpu().data.numpy.cpu().data.numpy", "repr_output_dict[].append", "repr_fc_output_dict[].append", "outputs.cpu().data.numpy.cpu().data.numpy", "np.concatenate().mean.append", "numpy.concatenate", "fc_outputs.cpu().data.numpy.cpu().data.numpy", "numpy.concatenate", "outputs.cpu().data.numpy.cpu", "outputs.cpu().data.numpy.cpu", "fc_outputs.cpu().data.numpy.cpu", "fc_outputs.cpu().data.numpy.cpu", "outputs.cpu().data.numpy.cpu", "label.item", "label.item", "label.item", "label.item", "fc_outputs.cpu().data.numpy.cpu"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.load_pickle", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.save_pickle", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.save_pickle", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.load_pickle", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm"], ["", "def", "extract_feature", "(", "train_loader", ",", "query_loader", ",", "repr_loader", ",", "model", ",", "tag", "=", "'last'", ")", ":", "\n", "# return out mean, fcout mean, out feature, fcout features", "\n", "    ", "save_dir", "=", "'{}/{}'", ".", "format", "(", "args", ".", "ckpt_path", ",", "tag", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "save_dir", "+", "'/output.plk'", ")", ":", "\n", "        ", "data", "=", "load_pickle", "(", "save_dir", "+", "'/output.plk'", ")", "\n", "return", "data", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# get training mean", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "save_dir", "+", "'/output_mean.plk'", ")", ":", "\n", "            ", "out_mean", ",", "fc_out_mean", "=", "[", "]", ",", "[", "]", "\n", "for", "i", ",", "(", "inputs", ",", "_", ")", "in", "enumerate", "(", "warp_tqdm", "(", "train_loader", ")", ")", ":", "\n", "                ", "outputs", ",", "fc_outputs", "=", "model", "(", "inputs", ",", "True", ")", "\n", "out_mean", ".", "append", "(", "outputs", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "if", "fc_outputs", "is", "not", "None", ":", "\n", "                    ", "fc_out_mean", ".", "append", "(", "fc_outputs", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "", "", "out_mean", "=", "np", ".", "concatenate", "(", "out_mean", ",", "axis", "=", "0", ")", ".", "mean", "(", "0", ")", "\n", "if", "len", "(", "fc_out_mean", ")", ">", "0", ":", "\n", "                ", "fc_out_mean", "=", "np", ".", "concatenate", "(", "fc_out_mean", ",", "axis", "=", "0", ")", ".", "mean", "(", "0", ")", "\n", "", "else", ":", "\n", "                ", "fc_out_mean", "=", "-", "1", "\n", "", "save_pickle", "(", "save_dir", "+", "'/output_mean.plk'", ",", "[", "out_mean", ",", "fc_out_mean", "]", ")", "\n", "", "else", ":", "\n", "            ", "out_mean", ",", "fc_out_mean", "=", "load_pickle", "(", "save_dir", "+", "'/output_mean.plk'", ")", "\n", "\n", "", "query_output_dict", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "query_fc_output_dict", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "\n", "for", "i", ",", "(", "inputs", ",", "labels", ")", "in", "enumerate", "(", "warp_tqdm", "(", "query_loader", ")", ")", ":", "\n", "# for i, (inputs, labels) in enumerate(query_loader):", "\n", "# compute output", "\n", "            ", "outputs", ",", "fc_outputs", "=", "model", "(", "inputs", ",", "True", ")", "\n", "outputs", "=", "outputs", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "if", "fc_outputs", "is", "not", "None", ":", "\n", "                ", "fc_outputs", "=", "fc_outputs", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "fc_outputs", "=", "[", "None", "]", "*", "outputs", ".", "shape", "[", "0", "]", "\n", "", "for", "out", ",", "fc_out", ",", "label", "in", "zip", "(", "outputs", ",", "fc_outputs", ",", "labels", ")", ":", "\n", "                ", "query_output_dict", "[", "label", ".", "item", "(", ")", "]", ".", "append", "(", "out", ")", "\n", "query_fc_output_dict", "[", "label", ".", "item", "(", ")", "]", ".", "append", "(", "fc_out", ")", "\n", "", "", "repr_output_dict", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "repr_fc_output_dict", "=", "collections", ".", "defaultdict", "(", "list", ")", "\n", "for", "i", ",", "(", "inputs", ",", "labels", ")", "in", "enumerate", "(", "warp_tqdm", "(", "repr_loader", ")", ")", ":", "\n", "# compute output", "\n", "            ", "outputs", ",", "fc_outputs", "=", "model", "(", "inputs", ",", "True", ")", "\n", "outputs", "=", "outputs", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "if", "fc_outputs", "is", "not", "None", ":", "\n", "                ", "fc_outputs", "=", "fc_outputs", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "fc_outputs", "=", "[", "None", "]", "*", "outputs", ".", "shape", "[", "0", "]", "\n", "", "for", "out", ",", "fc_out", ",", "label", "in", "zip", "(", "outputs", ",", "fc_outputs", ",", "labels", ")", ":", "\n", "                ", "repr_output_dict", "[", "label", ".", "item", "(", ")", "]", ".", "append", "(", "out", ")", "\n", "repr_fc_output_dict", "[", "label", ".", "item", "(", ")", "]", ".", "append", "(", "fc_out", ")", "\n", "", "", "all_info", "=", "[", "out_mean", ",", "fc_out_mean", ",", "query_output_dict", ",", "query_fc_output_dict", ",", "repr_output_dict", ",", "\n", "repr_fc_output_dict", "]", "\n", "save_pickle", "(", "save_dir", "+", "'/output.plk'", ",", "all_info", ")", "\n", "return", "all_info", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_dataloader": [[435, 450], ["datasets.DatasetFolder", "datasets.with_augment", "datasets.without_augment", "datasets.CategoriesSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.transform.with_augment", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.transform.without_augment"], ["", "", "def", "get_dataloader", "(", "split", ",", "aug", "=", "False", ",", "shuffle", "=", "True", ",", "out_name", "=", "False", ",", "sample", "=", "None", ")", ":", "\n", "# sample: iter, way, shot, query", "\n", "    ", "if", "aug", ":", "\n", "        ", "transform", "=", "datasets", ".", "with_augment", "(", "84", ",", "jitter", "=", "args", ".", "jitter", ")", "\n", "", "else", ":", "\n", "        ", "transform", "=", "datasets", ".", "without_augment", "(", "84", ",", "enlarge", "=", "args", ".", "enlarge", ")", "\n", "", "sets", "=", "datasets", ".", "DatasetFolder", "(", "args", ".", "data", ",", "args", ".", "split_dir", ",", "split", ",", "transform", ",", "out_name", "=", "out_name", ")", "\n", "if", "sample", "is", "not", "None", ":", "\n", "        ", "sampler", "=", "datasets", ".", "CategoriesSampler", "(", "sets", ".", "labels", ",", "*", "sample", ")", "\n", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "sets", ",", "batch_sampler", "=", "sampler", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "sets", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.warp_tqdm": [[452, 458], ["tqdm.tqdm", "len"], "function", ["None"], ["", "def", "warp_tqdm", "(", "data_loader", ")", ":", "\n", "    ", "if", "args", ".", "disable_tqdm", ":", "\n", "        ", "tqdm_loader", "=", "data_loader", "\n", "", "else", ":", "\n", "        ", "tqdm_loader", "=", "tqdm", ".", "tqdm", "(", "data_loader", ",", "total", "=", "len", "(", "data_loader", ")", ")", "\n", "", "return", "tqdm_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.save_pickle": [[460, 463], ["open", "pickle.dump"], "function", ["None"], ["", "def", "save_pickle", "(", "file", ",", "data", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.load_pickle": [[465, 468], ["open", "pickle.load"], "function", ["None"], ["", "", "def", "load_pickle", "(", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.load_checkpoint": [[470, 478], ["model.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "function", ["None"], ["", "", "def", "load_checkpoint", "(", "model", ",", "type", "=", "'best'", ")", ":", "\n", "    ", "if", "type", "==", "'best'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "'{}/model_best.pth.tar'", ".", "format", "(", "args", ".", "ckpt_path", ")", ")", "\n", "", "elif", "type", "==", "'last'", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "'{}/checkpoint.pth.tar'", ".", "format", "(", "args", ".", "ckpt_path", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "False", ",", "'type should be in [best, or last], but got {}'", ".", "format", "(", "type", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.meta_evaluate": [[480, 488], ["train_inatural_lshot.metric_class_type", "train_inatural_lshot.metric_class_type", "train_inatural_lshot.metric_class_type"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.metric_class_type", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.metric_class_type", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.metric_class_type"], ["", "def", "meta_evaluate", "(", "query_data", ",", "repr_data", ",", "train_mean", ")", ":", "\n", "    ", "cl2n_acc", ",", "cl2n_mean_acc", "=", "metric_class_type", "(", "query_data", ",", "repr_data", ",", "train_mean", "=", "train_mean", ",", "\n", "norm_type", "=", "'CL2N'", ")", "\n", "l2n_acc", ",", "l2n_mean_acc", "=", "metric_class_type", "(", "query_data", ",", "repr_data", ",", "train_mean", "=", "train_mean", ",", "\n", "norm_type", "=", "'L2N'", ")", "\n", "un_acc", ",", "un_mean_acc", "=", "metric_class_type", "(", "query_data", ",", "repr_data", ",", "train_mean", "=", "train_mean", ",", "\n", "norm_type", "=", "'UN'", ")", "\n", "return", "cl2n_acc", ",", "cl2n_mean_acc", ",", "l2n_acc", ",", "l2n_mean_acc", ",", "un_acc", ",", "un_mean_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.metric_class_type": [[489, 530], ["copy.deepcopy", "copy.deepcopy", "copy.deepcopy.keys", "sorted", "numpy.stack", "enumerate", "numpy.array().mean", "gallery[].mean", "copy.deepcopy.keys", "gallery_list.append", "sorted", "numpy.linalg.norm", "numpy.array", "np.array().mean.append", "mean_acc.append", "numpy.array().sum", "copy.deepcopy.keys", "train_inatural_lshot.lshot_prediction", "numpy.argmin", "acc.mean", "acc.sum", "numpy.array", "LA.norm.transpose", "numpy.array", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.lshot_prediction"], ["", "def", "metric_class_type", "(", "query", ",", "gallery", ",", "train_mean", "=", "None", ",", "norm_type", "=", "'CL2N'", ")", ":", "\n", "    ", "gallery", "=", "copy", ".", "deepcopy", "(", "gallery", ")", "\n", "query", "=", "copy", ".", "deepcopy", "(", "query", ")", "\n", "for", "key", "in", "gallery", ".", "keys", "(", ")", ":", "\n", "        ", "if", "norm_type", "==", "'CL2N'", ":", "\n", "            ", "gallery", "[", "key", "]", "=", "gallery", "[", "key", "]", "-", "train_mean", "\n", "gallery", "[", "key", "]", "=", "gallery", "[", "key", "]", "/", "LA", ".", "norm", "(", "gallery", "[", "key", "]", ",", "2", ",", "1", ")", "[", ":", ",", "None", "]", "\n", "query", "[", "key", "]", "=", "query", "[", "key", "]", "-", "train_mean", "\n", "query", "[", "key", "]", "=", "query", "[", "key", "]", "/", "LA", ".", "norm", "(", "query", "[", "key", "]", ",", "2", ",", "1", ")", "[", ":", ",", "None", "]", "\n", "", "elif", "norm_type", "==", "'L2N'", ":", "\n", "            ", "gallery", "[", "key", "]", "=", "gallery", "[", "key", "]", "/", "LA", ".", "norm", "(", "gallery", "[", "key", "]", ",", "2", ",", "1", ")", "[", ":", ",", "None", "]", "\n", "query", "[", "key", "]", "=", "query", "[", "key", "]", "/", "LA", ".", "norm", "(", "query", "[", "key", "]", ",", "2", ",", "1", ")", "[", ":", ",", "None", "]", "\n", "", "gallery", "[", "key", "]", "=", "gallery", "[", "key", "]", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "", "gallery_list", "=", "[", "]", "\n", "for", "key", "in", "sorted", "(", "gallery", ".", "keys", "(", ")", ")", ":", "\n", "        ", "gallery_list", ".", "append", "(", "gallery", "[", "key", "]", ")", "\n", "", "gallery_support", "=", "np", ".", "stack", "(", "gallery_list", ",", "axis", "=", "0", ")", "\n", "per_acc", "=", "[", "]", "\n", "mean_acc", "=", "[", "]", "\n", "count", "=", "0", "\n", "for", "label", ",", "key", "in", "enumerate", "(", "sorted", "(", "gallery", ".", "keys", "(", ")", ")", ")", ":", "\n", "        ", "subtract", "=", "gallery_support", "[", ":", ",", "None", ",", ":", "]", "-", "query", "[", "key", "]", "\n", "distance", "=", "LA", ".", "norm", "(", "subtract", ",", "2", ",", "axis", "=", "-", "1", ")", "\n", "test_label", "=", "np", ".", "array", "(", "[", "label", "]", "*", "query", "[", "key", "]", ".", "shape", "[", "0", "]", ")", "\n", "if", "args", ".", "lshot", "and", "args", ".", "lmd", "!=", "0", ":", "\n", "            ", "knn", "=", "10", "\n", "lmd", "=", "args", ".", "lmd", "\n", "unary", "=", "distance", ".", "transpose", "(", ")", "**", "2", "\n", "predict", "=", "lshot_prediction", "(", "args", ",", "knn", ",", "lmd", ",", "query", "[", "key", "]", ",", "unary", ")", "\n", "", "else", ":", "\n", "            ", "predict", "=", "np", ".", "argmin", "(", "distance", ",", "axis", "=", "0", ")", "\n", "\n", "", "acc", "=", "(", "predict", "==", "test_label", ")", "\n", "per_acc", ".", "append", "(", "acc", ".", "mean", "(", ")", ")", "\n", "mean_acc", ".", "append", "(", "acc", ".", "sum", "(", ")", ")", "\n", "count", "+=", "acc", ".", "shape", "[", "0", "]", "\n", "\n", "", "per_acc", "=", "np", ".", "array", "(", "per_acc", ")", ".", "mean", "(", ")", "\n", "mean_acc", "=", "np", ".", "array", "(", "mean_acc", ")", ".", "sum", "(", ")", "/", "count", "\n", "return", "per_acc", ",", "mean_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.lshot_prediction": [[531, 536], ["train_inatural_lshot.create_affinity", "lshot_update.bound_update"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.create_affinity", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.lshot_update.bound_update"], ["", "def", "lshot_prediction", "(", "args", ",", "knn", ",", "lmd", ",", "X", ",", "unary", ")", ":", "\n", "\n", "    ", "W", "=", "create_affinity", "(", "X", ",", "knn", ")", "\n", "out", "=", "bound_update", "(", "args", ",", "unary", ",", "W", ",", "lmd", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.create_affinity": [[538, 551], ["sklearn.neighbors.NearestNeighbors().fit", "NearestNeighbors().fit.kneighbors", "numpy.repeat", "knnind[].flatten", "numpy.ones", "scipy.sparse.csc_matrix", "range", "sklearn.neighbors.NearestNeighbors"], "function", ["None"], ["", "def", "create_affinity", "(", "X", ",", "knn", ")", ":", "\n", "    ", "N", ",", "D", "=", "X", ".", "shape", "\n", "# print('Compute Affinity ')", "\n", "nbrs", "=", "NearestNeighbors", "(", "n_neighbors", "=", "knn", ")", ".", "fit", "(", "X", ")", "\n", "dist", ",", "knnind", "=", "nbrs", ".", "kneighbors", "(", "X", ")", "\n", "\n", "row", "=", "np", ".", "repeat", "(", "range", "(", "N", ")", ",", "knn", "-", "1", ")", "\n", "col", "=", "knnind", "[", ":", ",", "1", ":", "]", ".", "flatten", "(", ")", "\n", "data", "=", "np", ".", "ones", "(", "X", ".", "shape", "[", "0", "]", "*", "(", "knn", "-", "1", ")", ")", "\n", "W", "=", "sparse", ".", "csc_matrix", "(", "(", "data", ",", "(", "row", ",", "col", ")", ")", ",", "shape", "=", "(", "N", ",", "N", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "\n", "\n", "return", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.do_extract_and_evaluate": [[552, 584], ["train_inatural_lshot.get_dataloader", "train_inatural_lshot.get_dataloader", "train_inatural_lshot.get_dataloader", "train_inatural_lshot.load_checkpoint", "train_inatural_lshot.extract_feature", "repr_out_dict.keys", "train_inatural_lshot.meta_evaluate", "print", "log.info", "print", "log.info", "numpy.stack", "numpy.stack", "train_inatural_lshot.meta_evaluate", "print", "log.info", "numpy.stack", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_dataloader", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_dataloader", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.get_dataloader", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.load_checkpoint", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.extract_feature", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.meta_evaluate", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.train_inatural_lshot.meta_evaluate"], ["", "def", "do_extract_and_evaluate", "(", "model", ",", "log", ")", ":", "\n", "\n", "    ", "train_loader", "=", "get_dataloader", "(", "'train'", ",", "aug", "=", "False", ",", "shuffle", "=", "False", ",", "out_name", "=", "False", ")", "\n", "query_loader", "=", "get_dataloader", "(", "'query'", ",", "aug", "=", "False", ",", "shuffle", "=", "False", ",", "out_name", "=", "False", ")", "\n", "repr_loader", "=", "get_dataloader", "(", "'repr'", ",", "aug", "=", "False", ",", "shuffle", "=", "False", ",", "out_name", "=", "False", ")", "\n", "load_checkpoint", "(", "model", ",", "'last'", ")", "\n", "[", "out_mean", ",", "fc_out_mean", ",", "out_dict", ",", "fc_out_dict", ",", "repr_out_dict", ",", "\n", "repr_fc_out_dict", "]", "=", "extract_feature", "(", "train_loader", ",", "query_loader", ",", "repr_loader", ",", "model", ",", "\n", "'last_inatural_enlarge_{}'", ".", "format", "(", "args", ".", "enlarge", ")", ")", "\n", "if", "args", ".", "lshot", ":", "\n", "        ", "print", "(", "'Running LaplacianShot with Lambda ={}'", ".", "format", "(", "args", ".", "lmd", ")", ")", "\n", "log", ".", "info", "(", "'Running LaplacianShot with Lambda ={}'", ".", "format", "(", "args", ".", "lmd", ")", ")", "\n", "\n", "", "for", "key", "in", "repr_out_dict", ".", "keys", "(", ")", ":", "\n", "        ", "out_dict", "[", "key", "]", "=", "np", ".", "stack", "(", "out_dict", "[", "key", "]", ",", "axis", "=", "0", ")", "\n", "repr_out_dict", "[", "key", "]", "=", "np", ".", "stack", "(", "repr_out_dict", "[", "key", "]", ",", "axis", "=", "0", ")", "\n", "if", "args", ".", "eval_fc", ":", "\n", "            ", "fc_out_dict", "[", "key", "]", "=", "np", ".", "stack", "(", "fc_out_dict", "[", "key", "]", ",", "axis", "=", "0", ")", "\n", "repr_fc_out_dict", "[", "key", "]", "=", "np", ".", "stack", "(", "repr_fc_out_dict", "[", "key", "]", ",", "axis", "=", "0", ")", "\n", "", "", "accuracy_info", "=", "meta_evaluate", "(", "out_dict", ",", "repr_out_dict", ",", "out_mean", ")", "\n", "print", "(", "'Meta Test: LAST\\nfeature\\tCL2N(per/mean)\\tL2N(per/mean)\\tUN(per/mean)\\n{}\\t{:.4f}/{:.4f}\\t{:.4f}/{:.4f}\\t{:.4f}/{:.4f}'", ".", "format", "(", "\n", "'Feature:'", ",", "*", "accuracy_info", ")", ")", "\n", "log", ".", "info", "(", "'Meta Test: LAST\\nfeature\\tCL2N(per/mean)\\tL2N(per/mean)\\tUN(per/mean)\\n{}\\t{:.4f}/{:.4f}\\t{:.4f}/{:.4f}\\t{:.4f}/{:.4f}'", ".", "format", "(", "\n", "'Feature:'", ",", "*", "accuracy_info", ")", ")", "\n", "if", "args", ".", "eval_fc", ":", "\n", "        ", "accuracy_info", "=", "meta_evaluate", "(", "fc_out_dict", ",", "repr_fc_out_dict", ",", "fc_out_mean", ")", "\n", "print", "(", "\n", "'Meta Test: LAST\\nfeature\\tCL2N(per/mean)\\tL2N(per/mean)\\tUN(per/mean)\\n{}\\t{:.4f}/{:.4f}\\t{:.4f}/{:.4f}\\t{:.4f}/{:.4f}'", ".", "format", "(", "\n", "'Logits:'", ",", "*", "accuracy_info", ")", ")", "\n", "log", ".", "info", "(", "\n", "'Meta Test: LAST\\nfeature\\tCL2N(per/mean)\\tL2N(per/mean)\\tUN(per/mean)\\n{}\\t{:.4f}/{:.4f}\\t{:.4f}/{:.4f}\\t{:.4f}/{:.4f}'", ".", "format", "(", "\n", "'Logits:'", ",", "*", "accuracy_info", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.inatural_split.walk_path": [[9, 18], ["os.listdir", "sorted", "sorted", "os.listdir"], "function", ["None"], ["def", "walk_path", "(", "data", ",", "tag", ")", ":", "\n", "    ", "results", "=", "[", "]", "\n", "path", "=", "'{}/{}/'", ".", "format", "(", "data", ",", "tag", ")", "\n", "sub_folders", "=", "os", ".", "listdir", "(", "path", ")", "\n", "for", "sub", "in", "sorted", "(", "sub_folders", ")", ":", "\n", "        ", "sub_path", "=", "'{}/{}'", ".", "format", "(", "path", ",", "sub", ")", "\n", "files", "=", "[", "(", "'{}/{}/{}'", ".", "format", "(", "tag", ",", "sub", ",", "x", ")", ",", "sub", ")", "for", "x", "in", "sorted", "(", "os", ".", "listdir", "(", "sub_path", ")", ")", "]", "\n", "results", "+=", "files", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.lshot_update.normalize": [[11, 33], ["numpy.max", "int", "range", "numpy.vstack", "numpy.exp", "math.ceil", "min", "numpy.exp", "np.exp.append", "numpy.sum", "numpy.sum"], "function", ["None"], ["def", "normalize", "(", "Y_in", ")", ":", "\n", "    ", "maxcol", "=", "np", ".", "max", "(", "Y_in", ",", "axis", "=", "1", ")", "\n", "Y_in", "=", "Y_in", "-", "maxcol", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "N", "=", "Y_in", ".", "shape", "[", "0", "]", "\n", "size_limit", "=", "150000", "\n", "if", "N", ">", "size_limit", ":", "\n", "        ", "batch_size", "=", "1280", "\n", "Y_out", "=", "[", "]", "\n", "num_batch", "=", "int", "(", "math", ".", "ceil", "(", "1.0", "*", "N", "/", "batch_size", ")", ")", "\n", "for", "batch_idx", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "start", "=", "batch_idx", "*", "batch_size", "\n", "end", "=", "min", "(", "(", "batch_idx", "+", "1", ")", "*", "batch_size", ",", "N", ")", "\n", "tmp", "=", "np", ".", "exp", "(", "Y_in", "[", "start", ":", "end", ",", ":", "]", ")", "\n", "tmp", "=", "tmp", "/", "(", "np", ".", "sum", "(", "tmp", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", ")", "\n", "Y_out", ".", "append", "(", "tmp", ")", "\n", "", "del", "Y_in", "\n", "Y_out", "=", "np", ".", "vstack", "(", "Y_out", ")", "\n", "", "else", ":", "\n", "        ", "Y_out", "=", "np", ".", "exp", "(", "Y_in", ")", "\n", "Y_out", "=", "Y_out", "/", "(", "np", ".", "sum", "(", "Y_out", ",", "axis", "=", "1", ")", "[", ":", ",", "None", "]", ")", "\n", "\n", "", "return", "Y_out", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.lshot_update.normalize_2": [[34, 38], ["numpy.divide", "np.divide.sum"], "function", ["None"], ["", "def", "normalize_2", "(", "Y_in", ")", ":", "\n", "    ", "Y_in_sum", "=", "Y_in", ".", "sum", "(", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "Y_in", "=", "np", ".", "divide", "(", "Y_in", ",", "Y_in_sum", ")", "\n", "return", "Y_in", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.lshot_update.entropy_energy": [[40, 57], ["kernel.dot", "int", "range", "math.ceil", "min", "numpy.log", "numpy.maximum", "numpy.log", "numpy.maximum"], "function", ["None"], ["", "def", "entropy_energy", "(", "Y", ",", "unary", ",", "kernel", ",", "bound_lambda", ",", "batch", "=", "False", ")", ":", "\n", "    ", "tot_size", "=", "Y", ".", "shape", "[", "0", "]", "\n", "pairwise", "=", "kernel", ".", "dot", "(", "Y", ")", "\n", "if", "batch", "==", "False", ":", "\n", "        ", "temp", "=", "(", "unary", "*", "Y", ")", "+", "(", "-", "bound_lambda", "*", "pairwise", "*", "Y", ")", "\n", "E", "=", "(", "Y", "*", "np", ".", "log", "(", "np", ".", "maximum", "(", "Y", ",", "1e-20", ")", ")", "+", "temp", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "1024", "\n", "num_batch", "=", "int", "(", "math", ".", "ceil", "(", "1.0", "*", "tot_size", "/", "batch_size", ")", ")", "\n", "E", "=", "0", "\n", "for", "batch_idx", "in", "range", "(", "num_batch", ")", ":", "\n", "            ", "start", "=", "batch_idx", "*", "batch_size", "\n", "end", "=", "min", "(", "(", "batch_idx", "+", "1", ")", "*", "batch_size", ",", "tot_size", ")", "\n", "temp", "=", "(", "unary", "[", "start", ":", "end", "]", "*", "Y", "[", "start", ":", "end", "]", ")", "+", "(", "-", "bound_lambda", "*", "pairwise", "[", "start", ":", "end", "]", "*", "Y", "[", "start", ":", "end", "]", ")", "\n", "E", "=", "E", "+", "(", "Y", "[", "start", ":", "end", "]", "*", "np", ".", "log", "(", "np", ".", "maximum", "(", "Y", "[", "start", ":", "end", "]", ",", "1e-20", ")", ")", "+", "temp", ")", ".", "sum", "(", ")", "\n", "\n", "", "", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.lshot_update.plot_convergence": [[59, 76], ["numpy.asarray", "len", "numpy.asarray", "matplotlib.pyplot.figure", "matplotlib.pyplot.ion", "matplotlib.pyplot.clf", "matplotlib.pyplot.plot", "matplotlib.pyplot.xticks", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.savefig", "matplotlib.pyplot.show", "matplotlib.pyplot.close", "list", "range"], "function", ["None"], ["", "def", "plot_convergence", "(", "filename", ",", "E_list", ")", ":", "\n", "# Plot the convergence of bound updates", "\n", "\n", "    ", "E_list", "=", "np", ".", "asarray", "(", "E_list", ")", "\n", "length", "=", "len", "(", "E_list", ")", "\n", "iter_range", "=", "np", ".", "asarray", "(", "list", "(", "range", "(", "length", ")", ")", ")", "\n", "plt", ".", "figure", "(", "1", ",", "figsize", "=", "(", "6.4", ",", "4.8", ")", ")", "\n", "plt", ".", "ion", "(", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "ylabel", "=", "r'$\\mathcal{B}_i(\\mathbf{Y})$'", "\n", "plt", ".", "plot", "(", "iter_range", ",", "E_list", ",", "'b-'", ",", "linewidth", "=", "2.2", ")", "\n", "plt", ".", "xticks", "(", "iter_range", "[", "1", ":", ":", "2", "]", ",", "(", "iter_range", "[", "1", ":", ":", "2", "]", "+", "1", ")", ")", "\n", "plt", ".", "xlabel", "(", "'iterations'", ")", "\n", "plt", ".", "ylabel", "(", "ylabel", ")", "\n", "plt", ".", "savefig", "(", "filename", ",", "format", "=", "'png'", ",", "dpi", "=", "800", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", "'all'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.lshot_update.bound_update": [[78, 106], ["float", "lshot_update.normalize", "range", "numpy.argmax", "kernel.dot", "lshot_update.normalize", "lshot_update.entropy_energy", "E_list.append", "os.join", "lshot_update.plot_convergence", "entropy_energy.copy", "abs", "abs"], "function", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.lshot_update.normalize", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.lshot_update.normalize", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.lshot_update.entropy_energy", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.src.lshot_update.plot_convergence"], ["", "def", "bound_update", "(", "args", ",", "unary", ",", "kernel", ",", "bound_lambda", ",", "bound_iteration", "=", "20", ",", "batch", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "oldE", "=", "float", "(", "'inf'", ")", "\n", "Y", "=", "normalize", "(", "-", "unary", ")", "\n", "E_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "bound_iteration", ")", ":", "\n", "        ", "additive", "=", "-", "unary", "\n", "mul_kernel", "=", "kernel", ".", "dot", "(", "Y", ")", "\n", "Y", "=", "-", "bound_lambda", "*", "mul_kernel", "\n", "additive", "=", "additive", "-", "Y", "\n", "Y", "=", "normalize", "(", "additive", ")", "\n", "E", "=", "entropy_energy", "(", "Y", ",", "unary", ",", "kernel", ",", "bound_lambda", ",", "batch", ")", "\n", "E_list", ".", "append", "(", "E", ")", "\n", "# print('entropy_energy is ' +repr(E) + ' at iteration ',i)", "\n", "if", "(", "i", ">", "1", "and", "(", "abs", "(", "E", "-", "oldE", ")", "<=", "1e-6", "*", "abs", "(", "oldE", ")", ")", ")", ":", "\n", "# print('Converged')", "\n", "            ", "break", "\n", "\n", "", "else", ":", "\n", "            ", "oldE", "=", "E", ".", "copy", "(", ")", "\n", "\n", "", "", "if", "args", ".", "plot_converge", ":", "\n", "      ", "filename", "=", "osp", ".", "join", "(", "args", ".", "save_path", ",", "'convergence_{}.png'", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "plot_convergence", "(", "filename", ",", "E_list", ")", "\n", "\n", "", "l", "=", "np", ".", "argmax", "(", "Y", ",", "axis", "=", "1", ")", "\n", "return", "l", "", "", ""]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.utils.tieredImagenet.save_imgs": [[14, 26], ["enumerate", "open", "pickle.load", "open", "pickle.load", "tqdm.tqdm", "cv2.imdecode", "cv2.imwrite", "zip", "len", "str", "str", "str"], "function", ["None"], ["def", "save_imgs", "(", "prex1", ",", "prex2", ",", "tag", ")", ":", "\n", "    ", "data_file", "=", "prex1", "+", "tag", "+", "'_images_png.pkl'", "\n", "label_file", "=", "prex1", "+", "tag", "+", "'_labels.pkl'", "\n", "with", "open", "(", "data_file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "array", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "label_file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "labels", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "for", "idx", ",", "(", "img", ",", "glabel", ",", "slabel", ")", "in", "enumerate", "(", "\n", "tqdm", ".", "tqdm", "(", "zip", "(", "array", ",", "labels", "[", "'label_general'", "]", ",", "labels", "[", "'label_specific'", "]", ")", ",", "total", "=", "len", "(", "array", ")", ")", ")", ":", "\n", "        ", "file_name", "=", "prex2", "+", "tag", "+", "'_'", "+", "str", "(", "glabel", ")", "+", "'_'", "+", "str", "(", "slabel", ")", "+", "'_'", "+", "str", "(", "idx", ")", "+", "'.png'", "\n", "im", "=", "cv2", ".", "imdecode", "(", "img", ",", "1", ")", "\n", "cv2", ".", "imwrite", "(", "file_name", ",", "im", ")", "\n", "# print('Finish ' + file_name)", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.utils.download.download_file_from_google_drive": [[5, 27], ["requests.Session", "requests.Session.get", "download.download_file_from_google_drive.get_confirm_token"], "function", ["None"], ["def", "download_file_from_google_drive", "(", "id", ",", "destination", ")", ":", "\n", "    ", "def", "get_confirm_token", "(", "response", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "response", ".", "cookies", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", ".", "startswith", "(", "'download_warning'", ")", ":", "\n", "                ", "return", "value", "\n", "", "", "return", "None", "\n", "\n", "", "def", "save_response_content", "(", "response", ",", "destination", ")", ":", "\n", "        ", "CHUNK_SIZE", "=", "32768", "\n", "with", "open", "(", "destination", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "for", "chunk", "in", "response", ".", "iter_content", "(", "CHUNK_SIZE", ")", ":", "\n", "                ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                    ", "f", ".", "write", "(", "chunk", ")", "\n", "\n", "", "", "", "", "URL", "=", "\"https://docs.google.com/uc?export=download\"", "\n", "session", "=", "requests", ".", "Session", "(", ")", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "{", "'id'", ":", "id", "}", ",", "stream", "=", "True", ")", "\n", "token", "=", "get_confirm_token", "(", "response", ")", "\n", "if", "token", ":", "\n", "        ", "params", "=", "{", "'id'", ":", "id", ",", "'confirm'", ":", "token", "}", "\n", "response", "=", "session", ".", "get", "(", "URL", ",", "params", "=", "params", ",", "stream", "=", "True", ")", "\n", "", "save_response_content", "(", "response", ",", "destination", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.utils.configuration.parser_args": [[4, 120], ["configargparse.ArgParser", "configargparse.ArgParser.add", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.add_argument", "configargparse.ArgParser.parse_args"], "function", ["None"], ["def", "parser_args", "(", ")", ":", "\n", "    ", "parser", "=", "configargparse", ".", "ArgParser", "(", "description", "=", "'LaplacianSHot'", ")", "\n", "parser", ".", "add", "(", "'-c'", ",", "'--config'", ",", "required", "=", "True", ",", "\n", "is_config_file", "=", "True", ",", "help", "=", "'config file'", ")", "\n", "### dataset", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "metavar", "=", "'DIR'", ",", "help", "=", "'path to dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-classes'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "'use all data to train the network'", ")", "\n", "parser", ".", "add_argument", "(", "'-j'", ",", "'--workers'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of data loading workers (default: 8)'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "90", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of total epochs to run'", ")", "\n", "parser", ".", "add_argument", "(", "'--start-epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'manual epoch number (useful on restarts)'", ")", "\n", "parser", ".", "add_argument", "(", "'-b'", ",", "'--batch-size'", ",", "default", "=", "256", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'mini-batch size (default: 256)'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-train-augment'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable training augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-random-resize'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable random resizing'", ")", "\n", "parser", ".", "add_argument", "(", "'--jitter'", ",", "default", "=", "True", ",", "type", "=", "bool", ",", "help", "=", "'Image jitter'", ")", "\n", "parser", ".", "add_argument", "(", "'--enlarge'", ",", "default", "=", "True", ",", "type", "=", "bool", ",", "help", "=", "'enlarge the image size then center crop'", ")", "\n", "### network setting", "\n", "parser", ".", "add_argument", "(", "'--arch'", ",", "'-a'", ",", "metavar", "=", "'ARCH'", ",", "default", "=", "'resnet18'", ",", "\n", "help", "=", "'network architecture'", ")", "\n", "parser", ".", "add_argument", "(", "'--scheduler'", ",", "default", "=", "'step'", ",", "choices", "=", "(", "'step'", ",", "'multi_step'", ",", "'cosine'", ")", ",", "\n", "help", "=", "'scheduler, the detail is shown in train.py'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "'--learning-rate'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'LR'", ",", "help", "=", "'initial learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-stepsize'", ",", "default", "=", "30", ",", "type", "=", "int", ",", "\n", "help", "=", "'learning rate decay step size (\"step\" scheduler) (default: 30)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-gamma'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'gamma for learning rate decay (default: 0.1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "default", "=", "'SGD'", ",", "choices", "=", "(", "'SGD'", ",", "'Adam'", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ",", "\n", "metavar", "=", "'W'", ",", "help", "=", "'weight decay (default: 1e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--nesterov'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use nesterov for SGD, disable it in default'", ")", "\n", "### meta val setting", "\n", "parser", ".", "add_argument", "(", "'--meta-test-iter'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "\n", "help", "=", "'number of iterations for meta test'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-val-iter'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "\n", "help", "=", "'number of iterations for meta val'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-val-way'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "\n", "help", "=", "'number of ways for meta val/test'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-val-shot'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'number of shots for meta val/test'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-val-query'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "'number of queries for meta val/test'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-val-interval'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'do mate val in every D epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-val-metric'", ",", "type", "=", "str", ",", "choices", "=", "(", "'euclidean'", ",", "'cosine'", ",", "'l1'", ",", "'l2'", ")", ",", "\n", "default", "=", "'euclidean'", ",", "\n", "help", "=", "'meta-val/test evaluate metric'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_NN'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'number of nearest neighbors, set this number >1 when do kNN'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval_fc'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do evaluate with final fc layer.'", ")", "\n", "### meta train setting", "\n", "parser", ".", "add_argument", "(", "'--do-meta-train'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do prototypical training'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-train-iter'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "\n", "help", "=", "'number of iterations for meta val'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-train-way'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "\n", "help", "=", "'number of ways for meta val'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-train-shot'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "'number of shots for meta val'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-train-query'", ",", "type", "=", "int", ",", "default", "=", "15", ",", "\n", "help", "=", "'number of queries for meta val'", ")", "\n", "parser", ".", "add_argument", "(", "'--meta-train-metric'", ",", "type", "=", "str", ",", "choices", "=", "(", "'euclidean'", ",", "'cosine'", ",", "'l1'", ",", "'l2'", ")", ",", "\n", "default", "=", "'euclidean'", ",", "\n", "help", "=", "'meta-train evaluate metric'", ")", "\n", "### others", "\n", "parser", ".", "add_argument", "(", "'--split-dir'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to the folder stored split files.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-path'", ",", "default", "=", "'result/default'", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to folder stored the log and checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt-path'", ",", "default", "=", "'models/default'", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to folder stored the log and checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-file'", ",", "default", "=", "'/training.log'", ",", "type", "=", "str", ",", "\n", "help", "=", "'log-file'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'seed for initializing training. '", ")", "\n", "parser", ".", "add_argument", "(", "'--disable-tqdm'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable tqdm.'", ")", "\n", "parser", ".", "add_argument", "(", "'--print-freq'", ",", "'-p'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'print frequency (default: 10)'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "metavar", "=", "'PATH'", ",", "\n", "help", "=", "'path to latest checkpoint (default: none)'", ")", "\n", "parser", ".", "add_argument", "(", "'--cutmix_prob'", ",", "default", "=", "0", ",", "type", "=", "float", ",", "\n", "help", "=", "'cutmix probability. Open cutmix augmentation when cutmix_prob>0 and beta >0'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "default", "=", "-", "1.", ",", "type", "=", "float", ",", "\n", "help", "=", "'cutmix beta. Open cutmix augmentation when cutmix_prob>0 and beta >0'", ")", "\n", "parser", ".", "add_argument", "(", "'--evaluate'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'evaluate the final result'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrain'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'path to the pretrained model, used for fine-tuning'", ")", "\n", "parser", ".", "add_argument", "(", "'--label-smooth'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'Label smoothing. 0.0 means no label smoothing'", ")", "\n", "\n", "## LaplacianShot", "\n", "\n", "parser", ".", "add_argument", "(", "'--lmd'", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'weight for Laplacian'", ")", "\n", "parser", ".", "add_argument", "(", "'--knn'", ",", "default", "=", "3", ",", "type", "=", "int", ",", "\n", "help", "=", "'knn for affinity'", ")", "\n", "parser", ".", "add_argument", "(", "'--lshot'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'enable LaplacianShot.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tune-lmd'", ",", "default", "=", "False", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'Tune Lambda on Validation set.'", ")", "\n", "parser", ".", "add_argument", "(", "'--proto-rect'", ",", "default", "=", "False", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'Prototype rectification'", ")", "\n", "parser", ".", "add_argument", "(", "'--plot-converge'", ",", "default", "=", "False", ",", "type", "=", "str2bool", ",", "\n", "help", "=", "'plot the energy in each bound updates.'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.utils.configuration.str2bool": [[121, 130], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "       ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.imagejitter.ImageJitter.__init__": [[10, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "transformdict", ")", ":", "\n", "        ", "self", ".", "transforms", "=", "[", "(", "transformtypedict", "[", "k", "]", ",", "transformdict", "[", "k", "]", ")", "for", "k", "in", "transformdict", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.imagejitter.ImageJitter.__call__": [[14, 22], ["torch.rand", "enumerate", "len", "transformer().enhance().convert", "transformer().enhance", "transformer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "out", "=", "img", "\n", "randtensor", "=", "torch", ".", "rand", "(", "len", "(", "self", ".", "transforms", ")", ")", "\n", "for", "i", ",", "(", "transformer", ",", "alpha", ")", "in", "enumerate", "(", "self", ".", "transforms", ")", ":", "\n", "            ", "r", "=", "alpha", "*", "(", "randtensor", "[", "i", "]", "*", "2.0", "-", "1.0", ")", "+", "1", "\n", "out", "=", "transformer", "(", "out", ")", ".", "enhance", "(", "r", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.sampler.CategoriesSampler.__init__": [[10, 25], ["numpy.array", "numpy.unique", "numpy.sort", "numpy.argwhere().reshape", "torch.from_numpy", "sampler.CategoriesSampler.m_ind.append", "numpy.argwhere"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "label", ",", "n_iter", ",", "n_way", ",", "n_shot", ",", "n_query", ")", ":", "\n", "\n", "        ", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "n_way", "=", "n_way", "\n", "self", ".", "n_shot", "=", "n_shot", "\n", "self", ".", "n_query", "=", "n_query", "\n", "\n", "label", "=", "np", ".", "array", "(", "label", ")", "\n", "self", ".", "m_ind", "=", "[", "]", "\n", "unique", "=", "np", ".", "unique", "(", "label", ")", "\n", "unique", "=", "np", ".", "sort", "(", "unique", ")", "\n", "for", "i", "in", "unique", ":", "\n", "            ", "ind", "=", "np", ".", "argwhere", "(", "label", "==", "i", ")", ".", "reshape", "(", "-", "1", ")", "\n", "ind", "=", "torch", ".", "from_numpy", "(", "ind", ")", "\n", "self", ".", "m_ind", ".", "append", "(", "ind", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.sampler.CategoriesSampler.__len__": [[26, 28], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.sampler.CategoriesSampler.__iter__": [[29, 41], ["range", "torch.cat", "torch.randperm", "torch.randperm", "batch_gallery.append", "batch_query.append", "len", "c.item", "l.size"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "self", ".", "n_iter", ")", ":", "\n", "            ", "batch_gallery", "=", "[", "]", "\n", "batch_query", "=", "[", "]", "\n", "classes", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "m_ind", ")", ")", "[", ":", "self", ".", "n_way", "]", "\n", "for", "c", "in", "classes", ":", "\n", "                ", "l", "=", "self", ".", "m_ind", "[", "c", ".", "item", "(", ")", "]", "\n", "pos", "=", "torch", ".", "randperm", "(", "l", ".", "size", "(", ")", "[", "0", "]", ")", "\n", "batch_gallery", ".", "append", "(", "l", "[", "pos", "[", ":", "self", ".", "n_shot", "]", "]", ")", "\n", "batch_query", ".", "append", "(", "l", "[", "pos", "[", "self", ".", "n_shot", ":", "self", ".", "n_shot", "+", "self", ".", "n_query", "]", "]", ")", "\n", "", "batch", "=", "torch", ".", "cat", "(", "batch_gallery", "+", "batch_query", ")", "\n", "yield", "batch", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.transform.without_augment": [[8, 18], ["torchvision.Compose", "int", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor"], "function", ["None"], ["def", "without_augment", "(", "size", "=", "84", ",", "enlarge", "=", "False", ")", ":", "\n", "    ", "if", "enlarge", ":", "\n", "        ", "resize", "=", "int", "(", "size", "*", "256.", "/", "224.", ")", "\n", "", "else", ":", "\n", "        ", "resize", "=", "size", "\n", "", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "resize", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.transform.with_augment": [[20, 45], ["torchvision.Compose", "imagejitter.ImageJitter", "transform_funcs.insert", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor"], "function", ["None"], ["", "def", "with_augment", "(", "size", "=", "84", ",", "disable_random_resize", "=", "False", ",", "jitter", "=", "False", ")", ":", "\n", "# Added Jitter.", "\n", "    ", "if", "disable_random_resize", ":", "\n", "        ", "transform_funcs", "=", "[", "\n", "transforms", ".", "Resize", "(", "size", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", "", "else", ":", "\n", "        ", "transform_funcs", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", "\n", "\n", "", "if", "jitter", ":", "\n", "        ", "jitter_func", "=", "ImageJitter", "(", "jitter_param", ")", "\n", "transform_funcs", ".", "insert", "(", "1", ",", "jitter_func", ")", "\n", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "transform_funcs", ")", "\n", "\n", "return", "transform", "", "", ""]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.loader.DatasetFolder.__init__": [[11, 29], ["os.path.join", "os.path.isfile", "sorted", "dict", "len", "open", "numpy.unique", "zip", "x.strip().split", "numpy.array", "range", "len", "x.strip", "f.readlines", "x.strip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "split_dir", ",", "split_type", ",", "transform", ",", "out_name", "=", "False", ")", ":", "\n", "        ", "assert", "split_type", "in", "[", "'train'", ",", "'test'", ",", "'val'", ",", "'query'", ",", "'repr'", "]", "\n", "split_file", "=", "os", ".", "path", ".", "join", "(", "split_dir", ",", "split_type", "+", "'.csv'", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "split_file", ")", "\n", "with", "open", "(", "split_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "split", "=", "[", "x", ".", "strip", "(", ")", ".", "split", "(", "','", ")", "for", "x", "in", "f", ".", "readlines", "(", ")", "[", "1", ":", "]", "if", "x", ".", "strip", "(", ")", "!=", "''", "]", "\n", "\n", "", "data", ",", "ori_labels", "=", "[", "x", "[", "0", "]", "for", "x", "in", "split", "]", ",", "[", "x", "[", "1", "]", "for", "x", "in", "split", "]", "\n", "label_key", "=", "sorted", "(", "np", ".", "unique", "(", "np", ".", "array", "(", "ori_labels", ")", ")", ")", "\n", "label_map", "=", "dict", "(", "zip", "(", "label_key", ",", "range", "(", "len", "(", "label_key", ")", ")", ")", ")", "\n", "mapped_labels", "=", "[", "label_map", "[", "x", "]", "for", "x", "in", "ori_labels", "]", "\n", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "labels", "=", "mapped_labels", "\n", "self", ".", "out_name", "=", "out_name", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.loader.DatasetFolder.__len__": [[30, 32], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.datasets.loader.DatasetFolder.__getitem__": [[33, 46], ["os.path.join", "os.path.isfile", "PIL.open().convert", "int", "loader.DatasetFolder.transform", "PIL.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", "=", "self", ".", "data", "[", "index", "]", "\n", "path_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "filename", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "path_file", ")", "\n", "img", "=", "Image", ".", "open", "(", "path_file", ")", ".", "convert", "(", "'RGB'", ")", "\n", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "label", "=", "int", "(", "label", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "if", "self", ".", "out_name", ":", "\n", "            ", "return", "img", ",", "label", ",", "self", ".", "data", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "return", "img", ",", "label", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.WideResNet.wide_basic.__init__": [[24, 36], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "wide_basic", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.WideResNet.wide_basic.forward": [[38, 44], ["WideResNet.wide_basic.dropout", "WideResNet.wide_basic.conv2", "WideResNet.wide_basic.shortcut", "WideResNet.wide_basic.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "WideResNet.wide_basic.bn2", "WideResNet.wide_basic.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.WideResNet.Wide_ResNet.__init__": [[47, 74], ["torch.Module.__init__", "print", "WideResNet.conv3x3", "WideResNet.Wide_ResNet._wide_layer", "WideResNet.Wide_ResNet._wide_layer", "WideResNet.Wide_ResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "WideResNet.Wide_ResNet.modules", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.__init__", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.conv3x3", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.WideResNet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.WideResNet.Wide_ResNet._wide_layer", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.WideResNet.Wide_ResNet._wide_layer"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "widen_factor", ",", "dropout_rate", ",", "num_classes", ",", "remove_linear", "=", "False", ")", ":", "\n", "        ", "super", "(", "Wide_ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "print", "(", "'| Wide-Resnet %dx%d'", "%", "(", "depth", ",", "k", ")", ")", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "wide_basic", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "if", "remove_linear", ":", "\n", "            ", "self", ".", "linear", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "nStages", "[", "3", "]", ",", "num_classes", ")", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.WideResNet.Wide_ResNet._wide_layer": [[75, 84], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.WideResNet.Wide_ResNet.forward": [[85, 103], ["WideResNet.Wide_ResNet.conv1", "WideResNet.Wide_ResNet.layer1", "WideResNet.Wide_ResNet.layer2", "WideResNet.Wide_ResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "WideResNet.Wide_ResNet.avgpool", "out.view.view.view", "WideResNet.Wide_ResNet.linear", "WideResNet.Wide_ResNet.bn1", "out.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "feature", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "linear", "is", "None", ":", "\n", "            ", "if", "feature", ":", "\n", "                ", "return", "out", ",", "None", "\n", "", "else", ":", "\n", "                ", "return", "out", "\n", "", "", "out1", "=", "self", ".", "linear", "(", "out", ")", "\n", "if", "feature", ":", "\n", "            ", "return", "out", ",", "out1", "\n", "", "return", "out1", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.WideResNet.conv3x3": [[9, 11], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.WideResNet.conv_init": [[13, 21], ["classname.find", "torch.xavier_uniform", "torch.constant", "classname.find", "torch.constant", "torch.constant", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "xavier_uniform", "(", "m", ".", "weight", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "init", ".", "constant", "(", "m", ".", "weight", ",", "1", ")", "\n", "init", ".", "constant", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.WideResNet.wideres": [[105, 109], ["WideResNet.Wide_ResNet"], "function", ["None"], ["", "", "def", "wideres", "(", "num_classes", ",", "remove_linear", "=", "False", ")", ":", "\n", "    ", "\"\"\"Constructs a wideres-28-10 model without dropout.\n    \"\"\"", "\n", "return", "Wide_ResNet", "(", "28", ",", "10", ",", "0", ",", "num_classes", ",", "remove_linear", "=", "remove_linear", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.BasicBlock.__init__": [[21, 30], ["torch.Module.__init__", "ResNet.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "ResNet.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.__init__", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.conv3x3", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.BasicBlock.forward": [[31, 48], ["ResNet.BasicBlock.conv1", "ResNet.BasicBlock.bn1", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.conv2", "ResNet.BasicBlock.bn2", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.Bottleneck.__init__": [[53, 64], ["torch.Module.__init__", "ResNet.conv1x1", "torch.BatchNorm2d", "ResNet.conv3x3", "torch.BatchNorm2d", "ResNet.conv1x1", "torch.BatchNorm2d", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.__init__", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.conv1x1", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.conv3x3", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.Bottleneck.forward": [[65, 86], ["ResNet.Bottleneck.conv1", "ResNet.Bottleneck.bn1", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv2", "ResNet.Bottleneck.bn2", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv3", "ResNet.Bottleneck.bn3", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.ResNet.__init__": [[90, 123], ["torch.Module.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "ResNet.ResNet.modules", "torch.Linear", "isinstance", "ResNet.ResNet.modules", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.__init__", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "remove_linear", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "if", "remove_linear", ":", "\n", "            ", "self", ".", "fc", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.ResNet._make_layer": [[124, 139], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "ResNet.conv1x1", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.ResNet.forward": [[140, 162], ["ResNet.ResNet.conv1", "ResNet.ResNet.bn1", "ResNet.ResNet.relu", "ResNet.ResNet.layer1", "ResNet.ResNet.layer2", "ResNet.ResNet.layer3", "ResNet.ResNet.layer4", "ResNet.ResNet.avgpool", "ResNet.ResNet.view", "ResNet.ResNet.fc", "ResNet.ResNet.size", "ResNet.ResNet.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "feature", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "self", ".", "fc", "is", "None", ":", "\n", "            ", "if", "feature", ":", "\n", "                ", "return", "x", ",", "None", "\n", "", "else", ":", "\n", "                ", "return", "x", "\n", "", "", "if", "feature", ":", "\n", "            ", "x1", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", ",", "x1", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.conv3x3": [[7, 11], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.conv1x1": [[13, 16], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.resnet10": [[164, 169], ["ResNet.ResNet"], "function", ["None"], ["", "", "def", "resnet10", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-10 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.resnet18": [[171, 176], ["ResNet.ResNet"], "function", ["None"], ["", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.resnet34": [[178, 183], ["ResNet.ResNet"], "function", ["None"], ["", "def", "resnet34", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.resnet50": [[185, 190], ["ResNet.ResNet"], "function", ["None"], ["", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.resnet101": [[192, 197], ["ResNet.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.ResNet.resnet152": [[199, 204], ["ResNet.ResNet"], "function", ["None"], ["", "def", "resnet152", "(", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.DenseNet._DenseLayer.__init__": [[11, 22], ["torch.Sequential.__init__", "DenseNet._DenseLayer.add_module", "DenseNet._DenseLayer.add_module", "DenseNet._DenseLayer.add_module", "DenseNet._DenseLayer.add_module", "DenseNet._DenseLayer.add_module", "DenseNet._DenseLayer.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm1'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu1'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv1'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "bn_size", "*", "\n", "growth_rate", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'norm2'", ",", "nn", ".", "BatchNorm2d", "(", "bn_size", "*", "growth_rate", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'relu2'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "self", ".", "add_module", "(", "'conv2'", ",", "nn", ".", "Conv2d", "(", "bn_size", "*", "growth_rate", ",", "growth_rate", ",", "\n", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "self", ".", "drop_rate", "=", "drop_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.DenseNet._DenseLayer.forward": [[23, 28], ["super().forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.dropout", "torch.dropout", "torch.dropout"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_features", "=", "super", "(", "_DenseLayer", ",", "self", ")", ".", "forward", "(", "x", ")", "\n", "if", "self", ".", "drop_rate", ">", "0", ":", "\n", "            ", "new_features", "=", "F", ".", "dropout", "(", "new_features", ",", "p", "=", "self", ".", "drop_rate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "x", ",", "new_features", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.DenseNet._DenseBlock.__init__": [[31, 36], ["torch.Sequential.__init__", "range", "DenseNet._DenseLayer", "DenseNet._DenseBlock.add_module"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_input_features", ",", "bn_size", ",", "growth_rate", ",", "drop_rate", ")", ":", "\n", "        ", "super", "(", "_DenseBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "layer", "=", "_DenseLayer", "(", "num_input_features", "+", "i", "*", "growth_rate", ",", "growth_rate", ",", "bn_size", ",", "drop_rate", ")", "\n", "self", ".", "add_module", "(", "'denselayer%d'", "%", "(", "i", "+", "1", ")", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.DenseNet._Transition.__init__": [[39, 46], ["torch.Sequential.__init__", "DenseNet._Transition.add_module", "DenseNet._Transition.add_module", "DenseNet._Transition.add_module", "DenseNet._Transition.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_input_features", ",", "num_output_features", ")", ":", "\n", "        ", "super", "(", "_Transition", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "add_module", "(", "'norm'", ",", "nn", ".", "BatchNorm2d", "(", "num_input_features", ")", ")", "\n", "self", ".", "add_module", "(", "'relu'", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "add_module", "(", "'conv'", ",", "nn", ".", "Conv2d", "(", "num_input_features", ",", "num_output_features", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ")", "\n", "self", ".", "add_module", "(", "'pool'", ",", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.DenseNet.DenseNet.__init__": [[62, 102], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "enumerate", "DenseNet.DenseNet.features.add_module", "DenseNet.DenseNet.modules", "collections.OrderedDict", "DenseNet._DenseBlock", "DenseNet.DenseNet.features.add_module", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Linear", "torch.Linear", "torch.Linear", "isinstance", "DenseNet._Transition", "DenseNet.DenseNet.features.add_module", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "len", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.__init__"], ["def", "__init__", "(", "self", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "num_init_features", "=", "64", ",", "bn_size", "=", "4", ",", "drop_rate", "=", "0", ",", "num_classes", "=", "1000", ",", "remove_linear", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "DenseNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# First convolution", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'conv0'", ",", "nn", ".", "Conv2d", "(", "3", ",", "num_init_features", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ")", ",", "\n", "]", ")", ")", "\n", "\n", "# Each denseblock", "\n", "num_features", "=", "num_init_features", "\n", "for", "i", ",", "num_layers", "in", "enumerate", "(", "block_config", ")", ":", "\n", "            ", "block", "=", "_DenseBlock", "(", "num_layers", "=", "num_layers", ",", "num_input_features", "=", "num_features", ",", "\n", "bn_size", "=", "bn_size", ",", "growth_rate", "=", "growth_rate", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'denseblock%d'", "%", "(", "i", "+", "1", ")", ",", "block", ")", "\n", "num_features", "=", "num_features", "+", "num_layers", "*", "growth_rate", "\n", "if", "i", "!=", "len", "(", "block_config", ")", "-", "1", ":", "\n", "                ", "trans", "=", "_Transition", "(", "num_input_features", "=", "num_features", ",", "num_output_features", "=", "num_features", "//", "2", ")", "\n", "self", ".", "features", ".", "add_module", "(", "'transition%d'", "%", "(", "i", "+", "1", ")", ",", "trans", ")", "\n", "num_features", "=", "num_features", "//", "2", "\n", "\n", "# Final batch norm", "\n", "", "", "self", ".", "features", ".", "add_module", "(", "'norm5'", ",", "nn", ".", "BatchNorm2d", "(", "num_features", ")", ")", "\n", "\n", "# Linear layer", "\n", "if", "remove_linear", ":", "\n", "            ", "self", ".", "classifier", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "\n", "\n", "# Official init from torch repo.", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.DenseNet.DenseNet.forward": [[103, 118], ["DenseNet.DenseNet.features", "torch.relu", "torch.relu", "torch.relu", "torch.adaptive_avg_pool2d().view", "torch.adaptive_avg_pool2d().view", "torch.adaptive_avg_pool2d().view", "DenseNet.DenseNet.classifier", "DenseNet.DenseNet.size", "DenseNet.DenseNet.classifier", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "feature", "=", "False", ")", ":", "\n", "        ", "features", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "features", ",", "inplace", "=", "True", ")", "\n", "out", "=", "F", ".", "adaptive_avg_pool2d", "(", "out", ",", "(", "1", ",", "1", ")", ")", ".", "view", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "self", ".", "classifier", "is", "None", ":", "\n", "            ", "if", "feature", ":", "\n", "                ", "return", "out", ",", "None", "\n", "", "else", ":", "\n", "                ", "return", "out", "\n", "", "", "if", "feature", ":", "\n", "            ", "out1", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", ",", "out1", "\n", "\n", "", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.DenseNet.densenet121": [[120, 127], ["DenseNet.DenseNet"], "function", ["None"], ["", "", "def", "densenet121", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-121 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n    \"\"\"", "\n", "model", "=", "DenseNet", "(", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "24", ",", "16", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.DenseNet.densenet169": [[129, 136], ["DenseNet.DenseNet"], "function", ["None"], ["", "def", "densenet169", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-169 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n    \"\"\"", "\n", "model", "=", "DenseNet", "(", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "32", ",", "32", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.DenseNet.densenet201": [[138, 145], ["DenseNet.DenseNet"], "function", ["None"], ["", "def", "densenet201", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-201 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n    \"\"\"", "\n", "model", "=", "DenseNet", "(", "num_init_features", "=", "64", ",", "growth_rate", "=", "32", ",", "block_config", "=", "(", "6", ",", "12", ",", "48", ",", "32", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.DenseNet.densenet161": [[147, 154], ["DenseNet.DenseNet"], "function", ["None"], ["", "def", "densenet161", "(", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Densenet-161 model from\n    `\"Densely Connected Convolutional Networks\" <https://arxiv.org/pdf/1608.06993.pdf>`_\n    \"\"\"", "\n", "model", "=", "DenseNet", "(", "num_init_features", "=", "96", ",", "growth_rate", "=", "48", ",", "block_config", "=", "(", "6", ",", "12", ",", "36", ",", "24", ")", ",", "\n", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.Block.__init__": [[15, 22], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "in_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "groups", "=", "in_planes", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.Block.forward": [[23, 27], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "MobileNet.Block.bn1", "MobileNet.Block.bn2", "MobileNet.Block.conv1", "MobileNet.Block.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.__init__": [[33, 43], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "MobileNet.MobileNet._make_layers", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.__init__", "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet._make_layers"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "remove_linear", "=", "False", ")", ":", "\n", "        ", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "32", ")", "\n", "self", ".", "layers", "=", "self", ".", "_make_layers", "(", "in_planes", "=", "32", ")", "\n", "if", "remove_linear", ":", "\n", "            ", "self", ".", "linear", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "1024", ",", "num_classes", ")", "\n", "", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet._make_layers": [[44, 52], ["torch.Sequential", "torch.Sequential", "layers.append", "isinstance", "isinstance", "MobileNet.Block"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_planes", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "x", "in", "self", ".", "cfg", ":", "\n", "            ", "out_planes", "=", "x", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "0", "]", "\n", "stride", "=", "1", "if", "isinstance", "(", "x", ",", "int", ")", "else", "x", "[", "1", "]", "\n", "layers", ".", "append", "(", "Block", "(", "in_planes", ",", "out_planes", ",", "stride", ")", ")", "\n", "in_planes", "=", "out_planes", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.imtiazziko_LaplacianShot.models.MobileNet.MobileNet.forward": [[53, 68], ["torch.relu", "torch.relu", "MobileNet.MobileNet.layers", "MobileNet.MobileNet.avgpool", "MobileNet.MobileNet.view", "MobileNet.MobileNet.linear", "MobileNet.MobileNet.bn1", "MobileNet.MobileNet.size", "MobileNet.MobileNet.linear", "MobileNet.MobileNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "feature", "=", "False", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layers", "(", "out", ")", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "self", ".", "linear", "is", "None", ":", "\n", "            ", "if", "feature", ":", "\n", "                ", "return", "out", ",", "None", "\n", "", "else", ":", "\n", "                ", "return", "out", "\n", "", "", "if", "feature", ":", "\n", "            ", "out1", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", ",", "out1", "\n", "", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]]}