{"home.repos.pwc.inspect_result.pythonpanda2_active-learning-md.workflow.activesample.activesample.__init__": [[25, 46], ["ase.io.read", "mdtraj.load_pdb", "activesample.activesample.compute_dist", "os.path.isfile", "ase.io.write", "exyzfile.strip", "exyzfile.strip", "exyzfile.strip"], "methods", ["home.repos.pwc.inspect_result.pythonpanda2_active-learning-md.workflow.activesample.activesample.compute_dist"], ["def", "__init__", "(", "self", ",", "exyzfile", ",", "nsample", "=", "10", ",", "nminclust", "=", "10", ",", "truncate", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        Input Args:\n        exyztrj (str): File name of AIMD trajectory (ase exyz format)\n        nsample (int): Number of samples for unsupervised learning\n        nminclust (int): Minimum number of clusters\n        truncate (int): Truncation level for sampling clusters. '1' for default random sampling\n        \"\"\"", "\n", "\n", "self", ".", "exyzfile", "=", "exyzfile", "\n", "self", ".", "nsample", "=", "nsample", "\n", "self", ".", "nminclust", "=", "nminclust", "\n", "self", ".", "truncate", "=", "truncate", "\n", "self", ".", "exyztrj", "=", "read", "(", "exyzfile", ",", "':'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "exyzfile", ".", "strip", "(", "'.extxyz'", ")", "+", "'.pdb'", ")", ":", "\n", "            ", "write", "(", "exyzfile", ".", "strip", "(", "'.extxyz'", ")", "+", "'.pdb'", ",", "self", ".", "exyztrj", ",", "format", "=", "'proteindatabank'", ")", "\n", "", "self", ".", "pdbtrj", "=", "md", ".", "load_pdb", "(", "exyzfile", ".", "strip", "(", "'.extxyz'", ")", "+", "'.pdb'", ")", "\n", "self", ".", "distances", "=", "self", ".", "compute_dist", "(", ")", "\n", "self", ".", "clustdict", "=", "{", "}", "\n", "self", ".", "trainlist", "=", "[", "]", "\n", "self", ".", "testlist", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.pythonpanda2_active-learning-md.workflow.activesample.activesample.compute_dist": [[48, 58], ["numpy.empty", "range", "mdtraj.rmsd"], "methods", ["None"], ["", "def", "compute_dist", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Compute the rmsd distance matrix from the input trajectory\n        return:\n        distmat : numpy distance matrix\n        \"\"\"", "\n", "distmat", "=", "np", ".", "empty", "(", "(", "self", ".", "pdbtrj", ".", "n_frames", ",", "self", ".", "pdbtrj", ".", "n_frames", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "pdbtrj", ".", "n_frames", ")", ":", "\n", "            ", "distmat", "[", "i", "]", "=", "md", ".", "rmsd", "(", "self", ".", "pdbtrj", ",", "self", ".", "pdbtrj", ",", "i", ")", "\n", "", "return", "distmat", "\n", "\n"]], "home.repos.pwc.inspect_result.pythonpanda2_active-learning-md.workflow.activesample.activesample.plot_elbow": [[60, 70], ["matplotlib.figure", "matplotlib.plot", "numpy.sort"], "methods", ["None"], ["", "def", "plot_elbow", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        A method to perform elbow plot of the distance matrix. The epsilon parameter\n        can be chosen by visually inspecting the elbow.\n        \"\"\"", "\n", "plotthisarray", "=", "self", ".", "distances", "[", ":", ",", "-", "1", "]", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "-", "np", ".", "sort", "(", "-", "plotthisarray", ")", ")", "\n", "#plt.show()", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.pythonpanda2_active-learning-md.workflow.activesample.activesample.gen_cluster": [[72, 94], ["hdbscan.HDBSCAN().fit", "list().count", "enumerate", "copy.deepcopy", "len", "hdbscan.HDBSCAN", "set", "list", "lclustdict[].append", "lclustdict.keys"], "methods", ["None"], ["", "def", "gen_cluster", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Perform HDBSCAN clustering on a given distance matrix\n        return:\n        n_clusters_ (int) : Total number of clusters excluding noise\n        n_noise_ (int) : Total number of noise points\n        clustdict (dict) : Cluster number keys. List values of AIMD trajectory index\n        \"\"\"", "\n", "hdb", "=", "HDBSCAN", "(", "metric", "=", "'precomputed'", ",", "min_samples", "=", "self", ".", "nsample", ",", "min_cluster_size", "=", "self", ".", "nminclust", ")", ".", "fit", "(", "self", ".", "distances", ")", "# allow_single_cluster=True", "\n", "labels", "=", "hdb", ".", "labels_", "\n", "n_clusters_", "=", "len", "(", "set", "(", "labels", ")", ")", "-", "(", "1", "if", "-", "1", "in", "labels", "else", "0", ")", "\n", "n_noise_", "=", "list", "(", "labels", ")", ".", "count", "(", "-", "1", ")", "\n", "\n", "lclustdict", "=", "{", "}", "\n", "for", "index", ",", "clustnum", "in", "enumerate", "(", "labels", ")", ":", "\n", "            ", "if", "clustnum", "!=", "-", "1", ":", "\n", "                ", "if", "clustnum", "not", "in", "lclustdict", ".", "keys", "(", ")", ":", "\n", "                    ", "lclustdict", "[", "clustnum", "]", "=", "[", "]", "\n", "", "lclustdict", "[", "clustnum", "]", ".", "append", "(", "index", ")", "\n", "\n", "", "", "self", ".", "clustdict", "=", "deepcopy", "(", "lclustdict", ")", "\n", "return", "n_clusters_", ",", "n_noise_", ",", "lclustdict", "\n", "\n"]], "home.repos.pwc.inspect_result.pythonpanda2_active-learning-md.workflow.activesample.activesample.clusterpartition": [[97, 133], ["activesample.activesample.clustdict.items", "copy.deepcopy", "copy.deepcopy", "list", "list", "list.append", "random.sample", "train_list.append", "test_list.append", "random.choice", "random.sample", "len", "list.append", "random.sample", "random.choice", "random.sample", "len"], "methods", ["None"], ["", "def", "clusterpartition", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        A method to create test/ train split by paritioning the cluster\n        Return type: traininglist, testlist (list)\n        \"\"\"", "\n", "\n", "train_list", "=", "[", "]", "\n", "test_list", "=", "[", "]", "\n", "\n", "for", "key", ",", "trjlist", "in", "self", ".", "clustdict", ".", "items", "(", ")", ":", "\n", "            ", "ltrain", "=", "list", "(", ")", "\n", "ltest", "=", "list", "(", ")", "\n", "if", "self", ".", "truncate", "==", "1", ":", "\n", "                ", "ltrain", ".", "append", "(", "random", ".", "choice", "(", "trjlist", ")", ")", "\n", "ltest", "=", "random", ".", "sample", "(", "trjlist", ",", "4", ")", "\n", "while", "ltrain", "[", "0", "]", "in", "ltest", ":", "\n", "                    ", "ltest", "=", "random", ".", "sample", "(", "trjlist", ",", "4", ")", "\n", "\n", "", "", "elif", "self", ".", "truncate", "!=", "1", ":", "\n", "                ", "if", "len", "(", "trjlist", ")", "<=", "self", ".", "truncate", ":", "\n", "#muind = int(np.floor(len(trjlist)/2) ) ", "\n", "#ltrain.append(trjlist[muind] )", "\n", "                    ", "ltrain", ".", "append", "(", "random", ".", "choice", "(", "trjlist", ")", ")", "\n", "ltest", "=", "random", ".", "sample", "(", "trjlist", ",", "1", ")", "\n", "while", "ltrain", "[", "0", "]", "in", "ltest", ":", "\n", "                        ", "ltest", "=", "random", ".", "sample", "(", "trjlist", ",", "1", ")", "\n", "", "", "elif", "len", "(", "trjlist", ")", ">", "self", ".", "truncate", ":", "\n", "                    ", "ltrain", "=", "trjlist", "[", "0", ":", ":", "self", ".", "truncate", "]", "\n", "ltest", "=", "trjlist", "[", "2", ":", ":", "self", ".", "truncate", "]", "\n", "", "", "for", "k", "in", "ltrain", ":", "\n", "                ", "train_list", ".", "append", "(", "k", ")", "\n", "", "for", "v", "in", "ltest", ":", "\n", "                ", "test_list", ".", "append", "(", "v", ")", "\n", "", "", "self", ".", "trainlist", "=", "deepcopy", "(", "train_list", ")", "\n", "self", ".", "testlist", "=", "deepcopy", "(", "test_list", ")", "\n", "return", "train_list", ",", "test_list", "\n", "\n"]], "home.repos.pwc.inspect_result.pythonpanda2_active-learning-md.workflow.activesample.activesample.writeconfigs": [[135, 148], ["ase.io.write", "ase.io.write", "train_xyz.append", "test_xyz.append"], "methods", ["None"], ["", "def", "writeconfigs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Write training and test configurations to exyz files!\n        \"\"\"", "\n", "train_xyz", "=", "[", "]", "\n", "test_xyz", "=", "[", "]", "\n", "for", "i", "in", "self", ".", "trainlist", ":", "\n", "            ", "train_xyz", ".", "append", "(", "self", ".", "exyztrj", "[", "i", "]", ")", "\n", "", "for", "j", "in", "self", ".", "testlist", ":", "\n", "            ", "test_xyz", ".", "append", "(", "self", ".", "exyztrj", "[", "j", "]", ")", "\n", "\n", "", "write", "(", "\"train.extxyz\"", ",", "train_xyz", ")", "\n", "write", "(", "\"test.extxyz\"", ",", "test_xyz", ")", "\n", "", "", ""]]}