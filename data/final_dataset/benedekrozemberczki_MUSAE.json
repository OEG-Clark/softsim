{"home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.SecondOrderRandomWalker.__init__": [[15, 35], ["networkx.nodes", "print", "tqdm.tqdm.tqdm", "walkers.SecondOrderRandomWalker.preprocess_transition_probs", "walkers.SecondOrderRandomWalker.simulate_walks", "walkers.SecondOrderRandomWalker.G.edges"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.SecondOrderRandomWalker.preprocess_transition_probs", "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.FirstOrderRandomWalker.simulate_walks"], ["def", "__init__", "(", "self", ",", "G", ",", "p", ",", "q", ",", "num_walks", ",", "walk_length", ")", ":", "\n", "        ", "\"\"\"\n        :param G: NetworkX graph object.\n        :param p: Return parameter.\n        :param q: In-out parameter.\n        :param num_walks: Number of walks per source node.\n        :param walk_length: Random walk length.\n        \"\"\"", "\n", "self", ".", "G", "=", "G", "\n", "self", ".", "nodes", "=", "nx", ".", "nodes", "(", "self", ".", "G", ")", "\n", "print", "(", "\"Edge weighting.\\n\"", ")", "\n", "for", "edge", "in", "tqdm", "(", "self", ".", "G", ".", "edges", "(", ")", ")", ":", "\n", "            ", "self", ".", "G", "[", "edge", "[", "0", "]", "]", "[", "edge", "[", "1", "]", "]", "[", "'weight'", "]", "=", "1.0", "\n", "self", ".", "G", "[", "edge", "[", "1", "]", "]", "[", "edge", "[", "0", "]", "]", "[", "'weight'", "]", "=", "1.0", "\n", "", "self", ".", "p", "=", "p", "\n", "self", ".", "q", "=", "q", "\n", "self", ".", "num_walks", "=", "num_walks", "\n", "self", ".", "walk_length", "=", "walk_length", "\n", "self", ".", "preprocess_transition_probs", "(", ")", "\n", "self", ".", "simulate_walks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.SecondOrderRandomWalker.node2vec_walk": [[36, 60], ["len", "sorted", "str", "G.neighbors", "len", "len", "walk.append", "walk.append", "walkers.alias_draw", "walkers.alias_draw"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.alias_draw", "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.alias_draw"], ["", "def", "node2vec_walk", "(", "self", ",", "start_node", ")", ":", "\n", "        ", "\"\"\"\n        Simulate a random walk starting from start node.\n        \"\"\"", "\n", "G", "=", "self", ".", "G", "\n", "alias_nodes", "=", "self", ".", "alias_nodes", "\n", "alias_edges", "=", "self", ".", "alias_edges", "\n", "\n", "walk", "=", "[", "start_node", "]", "\n", "\n", "while", "len", "(", "walk", ")", "<", "self", ".", "walk_length", ":", "\n", "            ", "cur", "=", "walk", "[", "-", "1", "]", "\n", "cur_nbrs", "=", "sorted", "(", "G", ".", "neighbors", "(", "cur", ")", ")", "\n", "if", "len", "(", "cur_nbrs", ")", ">", "0", ":", "\n", "                ", "if", "len", "(", "walk", ")", "==", "1", ":", "\n", "                    ", "walk", ".", "append", "(", "cur_nbrs", "[", "alias_draw", "(", "alias_nodes", "[", "cur", "]", "[", "0", "]", ",", "alias_nodes", "[", "cur", "]", "[", "1", "]", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "prev", "=", "walk", "[", "-", "2", "]", "\n", "next", "=", "cur_nbrs", "[", "alias_draw", "(", "alias_edges", "[", "(", "prev", ",", "cur", ")", "]", "[", "0", "]", ",", "alias_edges", "[", "(", "prev", ",", "cur", ")", "]", "[", "1", "]", ")", "]", "\n", "walk", ".", "append", "(", "next", ")", "\n", "", "", "else", ":", "\n", "                ", "break", "\n", "", "", "walk", "=", "[", "str", "(", "w", ")", "for", "w", "in", "walk", "]", "\n", "return", "walk", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.SecondOrderRandomWalker.simulate_walks": [[61, 71], ["tqdm.tqdm.trange", "tqdm.tqdm.trange", "walkers.SecondOrderRandomWalker.G.number_of_nodes", "walkers.SecondOrderRandomWalker.node2vec_walk", "walkers.SecondOrderRandomWalker.walks.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.SecondOrderRandomWalker.node2vec_walk"], ["", "def", "simulate_walks", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Repeatedly simulate random walks from each node.\n        \"\"\"", "\n", "G", "=", "self", ".", "G", "\n", "self", ".", "walks", "=", "[", "]", "\n", "for", "iteration", "in", "trange", "(", "self", ".", "num_walks", ",", "desc", "=", "'Walk series: '", ")", ":", "\n", "            ", "for", "node", "in", "trange", "(", "self", ".", "G", ".", "number_of_nodes", "(", ")", ",", "desc", "=", "'Nodes: '", ")", ":", "\n", "                ", "walk", "=", "self", ".", "node2vec_walk", "(", "start_node", "=", "node", ")", "\n", "self", ".", "walks", ".", "append", "(", "walk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.SecondOrderRandomWalker.get_alias_edge": [[72, 92], ["sorted", "sum", "walkers.alias_setup", "G.neighbors", "unnormalized_probs.append", "G.has_edge", "float", "unnormalized_probs.append", "unnormalized_probs.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.alias_setup"], ["", "", "", "def", "get_alias_edge", "(", "self", ",", "src", ",", "dst", ")", ":", "\n", "        ", "\"\"\"\n        Get the alias edge setup lists for a given edge.\n        \"\"\"", "\n", "G", "=", "self", ".", "G", "\n", "p", "=", "self", ".", "p", "\n", "q", "=", "self", ".", "q", "\n", "\n", "unnormalized_probs", "=", "[", "]", "\n", "for", "dst_nbr", "in", "sorted", "(", "G", ".", "neighbors", "(", "dst", ")", ")", ":", "\n", "            ", "if", "dst_nbr", "==", "src", ":", "\n", "                ", "unnormalized_probs", ".", "append", "(", "G", "[", "dst", "]", "[", "dst_nbr", "]", "[", "'weight'", "]", "/", "p", ")", "\n", "", "elif", "G", ".", "has_edge", "(", "dst_nbr", ",", "src", ")", ":", "\n", "                ", "unnormalized_probs", ".", "append", "(", "G", "[", "dst", "]", "[", "dst_nbr", "]", "[", "'weight'", "]", ")", "\n", "", "else", ":", "\n", "                ", "unnormalized_probs", ".", "append", "(", "G", "[", "dst", "]", "[", "dst_nbr", "]", "[", "'weight'", "]", "/", "q", ")", "\n", "", "", "norm_const", "=", "sum", "(", "unnormalized_probs", ")", "\n", "normalized_probs", "=", "[", "float", "(", "u_prob", ")", "/", "norm_const", "for", "u_prob", "in", "unnormalized_probs", "]", "\n", "\n", "return", "alias_setup", "(", "normalized_probs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.SecondOrderRandomWalker.preprocess_transition_probs": [[93, 118], ["print", "print", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm", "print", "G.nodes", "sum", "walkers.alias_setup", "G.edges", "walkers.SecondOrderRandomWalker.get_alias_edge", "walkers.SecondOrderRandomWalker.get_alias_edge", "sorted", "float", "G.neighbors"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.alias_setup", "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.SecondOrderRandomWalker.get_alias_edge", "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.SecondOrderRandomWalker.get_alias_edge"], ["", "def", "preprocess_transition_probs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Preprocessing of transition probabilities for guiding the random walks.\n        \"\"\"", "\n", "G", "=", "self", ".", "G", "\n", "\n", "alias_nodes", "=", "{", "}", "\n", "print", "(", "\"\"", ")", "\n", "print", "(", "\"Preprocesing.\\n\"", ")", "\n", "for", "node", "in", "tqdm", "(", "G", ".", "nodes", "(", ")", ")", ":", "\n", "            ", "unnormalized_probs", "=", "[", "G", "[", "node", "]", "[", "nbr", "]", "[", "'weight'", "]", "for", "nbr", "in", "sorted", "(", "G", ".", "neighbors", "(", "node", ")", ")", "]", "\n", "norm_const", "=", "sum", "(", "unnormalized_probs", ")", "\n", "normalized_probs", "=", "[", "float", "(", "u_prob", ")", "/", "norm_const", "for", "u_prob", "in", "unnormalized_probs", "]", "\n", "alias_nodes", "[", "node", "]", "=", "alias_setup", "(", "normalized_probs", ")", "\n", "\n", "", "alias_edges", "=", "{", "}", "\n", "triads", "=", "{", "}", "\n", "\n", "for", "edge", "in", "tqdm", "(", "G", ".", "edges", "(", ")", ")", ":", "\n", "            ", "alias_edges", "[", "edge", "]", "=", "self", ".", "get_alias_edge", "(", "edge", "[", "0", "]", ",", "edge", "[", "1", "]", ")", "\n", "alias_edges", "[", "(", "edge", "[", "1", "]", ",", "edge", "[", "0", "]", ")", "]", "=", "self", ".", "get_alias_edge", "(", "edge", "[", "1", "]", ",", "edge", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "alias_nodes", "=", "alias_nodes", "\n", "self", ".", "alias_edges", "=", "alias_edges", "\n", "print", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.FirstOrderRandomWalker.__init__": [[168, 178], ["walkers.FirstOrderRandomWalker.simulate_walks"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.FirstOrderRandomWalker.simulate_walks"], ["def", "__init__", "(", "self", ",", "G", ",", "num_walks", ",", "walk_length", ")", ":", "\n", "        ", "\"\"\"\n        :param G: NetworkX object.\n        :param num_walks: Number of walks per node.\n        :param walk_length: Random walk length.\n        \"\"\"", "\n", "self", ".", "G", "=", "G", "\n", "self", ".", "num_walks", "=", "num_walks", "\n", "self", ".", "walk_length", "=", "walk_length", "\n", "self", ".", "simulate_walks", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.FirstOrderRandomWalker.do_walk": [[179, 194], ["range", "str", "len", "walk.append", "walkers.FirstOrderRandomWalker.G.neighbors", "random.choice"], "methods", ["None"], ["", "def", "do_walk", "(", "self", ",", "node", ")", ":", "\n", "        ", "\"\"\"\n        Doing a single truncated random walk from a source node.\n        :param node: Source node of the truncated random walk.\n        :return walk: A single random walk.\n        \"\"\"", "\n", "walk", "=", "[", "node", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "walk_length", "-", "1", ")", ":", "\n", "            ", "nebs", "=", "[", "node", "for", "node", "in", "self", ".", "G", ".", "neighbors", "(", "walk", "[", "-", "1", "]", ")", "]", "\n", "if", "len", "(", "nebs", ")", ">", "0", ":", "\n", "                ", "walk", ".", "append", "(", "random", ".", "choice", "(", "nebs", ")", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "", "", "walk", "=", "[", "str", "(", "x", ")", "for", "x", "in", "walk", "]", "\n", "return", "walk", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.FirstOrderRandomWalker.simulate_walks": [[195, 204], ["tqdm.tqdm.trange", "tqdm.tqdm.trange", "walkers.FirstOrderRandomWalker.G.number_of_nodes", "walkers.FirstOrderRandomWalker.do_walk", "walkers.FirstOrderRandomWalker.walks.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.FirstOrderRandomWalker.do_walk"], ["", "def", "simulate_walks", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Doing a fixed number of truncated random walk from every node in the graph.\n        \"\"\"", "\n", "self", ".", "walks", "=", "[", "]", "\n", "for", "_", "in", "trange", "(", "self", ".", "num_walks", ",", "desc", "=", "'Walk series: '", ")", ":", "\n", "            ", "for", "node", "in", "trange", "(", "self", ".", "G", ".", "number_of_nodes", "(", ")", ",", "desc", "=", "'Nodes: '", ")", ":", "\n", "                ", "walk_from_node", "=", "self", ".", "do_walk", "(", "node", ")", "\n", "self", ".", "walks", ".", "append", "(", "walk_from_node", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.alias_setup": [[120, 150], ["len", "numpy.zeros", "numpy.zeros", "enumerate", "smaller.pop", "larger.pop", "smaller.append", "larger.append", "len", "len", "smaller.append", "larger.append"], "function", ["None"], ["", "", "def", "alias_setup", "(", "probs", ")", ":", "\n", "    ", "\"\"\"\n    Compute utility lists for non-uniform sampling from discrete distributions.\n    Refer to https://hips.seas.harvard.edu/blog/2013/03/03/the-alias-method-efficient-sampling-with-many-discrete-outcomes/\n    for details\n    \"\"\"", "\n", "K", "=", "len", "(", "probs", ")", "\n", "q", "=", "np", ".", "zeros", "(", "K", ")", "\n", "J", "=", "np", ".", "zeros", "(", "K", ",", "dtype", "=", "np", ".", "int", ")", "\n", "smaller", "=", "[", "]", "\n", "larger", "=", "[", "]", "\n", "\n", "for", "kk", ",", "prob", "in", "enumerate", "(", "probs", ")", ":", "\n", "        ", "q", "[", "kk", "]", "=", "K", "*", "prob", "\n", "if", "q", "[", "kk", "]", "<", "1.0", ":", "\n", "            ", "smaller", ".", "append", "(", "kk", ")", "\n", "", "else", ":", "\n", "            ", "larger", ".", "append", "(", "kk", ")", "\n", "\n", "", "", "while", "len", "(", "smaller", ")", ">", "0", "and", "len", "(", "larger", ")", ">", "0", ":", "\n", "        ", "small", "=", "smaller", ".", "pop", "(", ")", "\n", "large", "=", "larger", ".", "pop", "(", ")", "\n", "J", "[", "small", "]", "=", "large", "\n", "q", "[", "large", "]", "=", "q", "[", "large", "]", "+", "q", "[", "small", "]", "-", "1.0", "\n", "if", "q", "[", "large", "]", "<", "1.0", ":", "\n", "            ", "smaller", ".", "append", "(", "large", ")", "\n", "", "else", ":", "\n", "            ", "larger", ".", "append", "(", "large", ")", "\n", "\n", "", "", "return", "J", ",", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.walkers.alias_draw": [[151, 162], ["len", "int", "numpy.floor", "numpy.random.rand", "numpy.random.rand"], "function", ["None"], ["", "def", "alias_draw", "(", "J", ",", "q", ")", ":", "\n", "    ", "\"\"\"\n    Draw sample from a non-uniform discrete distribution using alias sampling.\n    \"\"\"", "\n", "K", "=", "len", "(", "J", ")", "\n", "\n", "kk", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "K", ")", ")", "\n", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "q", "[", "kk", "]", ":", "\n", "        ", "return", "kk", "\n", "", "else", ":", "\n", "        ", "return", "J", "[", "kk", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.main.main": [[7, 17], ["musae.MUSAE", "musae.MUSAE.do_sampling", "musae.MUSAE.learn_embedding", "musae.MUSAE.save_embedding", "musae.MUSAE.save_logs"], "function", ["home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE.do_sampling", "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE.learn_embedding", "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE.save_embedding", "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE.save_logs"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Multi-scale attributed node embedding machine calling wrapper.\n    :param args: Arguments object parsed up.\n    \"\"\"", "\n", "model", "=", "MUSAE", "(", "args", ")", "\n", "model", ".", "do_sampling", "(", ")", "\n", "model", ".", "learn_embedding", "(", ")", "\n", "model", ".", "save_embedding", "(", ")", "\n", "model", ".", "save_logs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.parser.parameter_parser": [[5, 120], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "parameter_parser", "(", ")", ":", "\n", "    ", "\"\"\"\n    A method to parse up command line parameters. \n    By default it gives an embedding of the Wikipedia Chameleons dataset.\n    The default hyperparameters give a good quality representation without grid search.\n    Representations are sorted by ID.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"Run MUSAE/AE.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--graph-input'", ",", "\n", "nargs", "=", "'?'", ",", "\n", "default", "=", "\"./input/edges/chameleon_edges.csv\"", ",", "\n", "help", "=", "'Input edge list csv.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--features-input'", ",", "\n", "nargs", "=", "'?'", ",", "\n", "default", "=", "\"./input/features/chameleon.json\"", ",", "\n", "help", "=", "'Input features json.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "\n", "nargs", "=", "'?'", ",", "\n", "default", "=", "'./output/chameleon_embedding.csv'", ",", "\n", "help", "=", "'Embeddings path.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log'", ",", "\n", "nargs", "=", "'?'", ",", "\n", "default", "=", "'./logs/chameleon.json'", ",", "\n", "help", "=", "'Log  path.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--dimensions'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "32", ",", "\n", "help", "=", "'Number of dimensions. Default is 32.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--walk-number'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", ",", "\n", "help", "=", "'Number of walks. Default is 5.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--walk-length'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "80", ",", "\n", "help", "=", "'Walk length. Default is 80.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--base-model'", ",", "\n", "nargs", "=", "'?'", ",", "\n", "default", "=", "'null'", ",", "\n", "help", "=", "'Fit base embedding. Default is NULL.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "\n", "nargs", "=", "'?'", ",", "\n", "default", "=", "'musae'", ",", "\n", "help", "=", "'Attributed embedding type. Default is MUSAE.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--sampling'", ",", "\n", "nargs", "=", "'?'", ",", "\n", "default", "=", "'first'", ",", "\n", "help", "=", "'Random walk order. Default is first.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--P'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "'Return hyperparameter. Default is 1.0.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--Q'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "help", "=", "'In-out hyperparameter. Default is 1.0.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--down-sampling'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.001", ",", "\n", "help", "=", "'Down-sampling rate. Default is 0.001.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--exponent'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.75", ",", "\n", "help", "=", "'Frequency sampling exponent. Default is 0.75.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.05", ",", "\n", "help", "=", "'Start learning rate. Default is 0.05.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--min-alpha'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.025", ",", "\n", "help", "=", "'Final learning rate. Default is 0.025.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--approximation-order'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "3", ",", "\n", "help", "=", "'Number of adjacency matrix powers. Default is 3.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--min-count'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'Minimal count. Default is 3.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--negative-samples'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", ",", "\n", "help", "=", "'Number of negative samples. Default is 5.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "4", ",", "\n", "help", "=", "'Number of cores. Default is 4.'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "5", ",", "\n", "help", "=", "'Number of epochs. Default is 5.'", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE.__init__": [[19, 28], ["dict", "utils.load_graph", "utils.load_features"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.utils.load_graph", "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.utils.load_features"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        MUSAE and AE machine constructor.\n        :param args: Arguments object with the model hyperparameters.\n        \"\"\"", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "log", "=", "dict", "(", ")", "\n", "self", ".", "graph", "=", "load_graph", "(", "args", ".", "graph_input", ")", "\n", "self", ".", "features", "=", "load_features", "(", "args", ".", "features_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE.do_sampling": [[29, 48], ["time.time", "time.time", "walkers.SecondOrderRandomWalker", "walkers.FirstOrderRandomWalker"], "methods", ["None"], ["", "def", "do_sampling", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Running a first or second-order random walk sampler.\n        Measuring the sampling runtime.\n        \"\"\"", "\n", "self", ".", "log", "[", "\"walk_start_time\"", "]", "=", "time", ".", "time", "(", ")", "\n", "if", "self", ".", "args", ".", "sampling", "==", "\"second\"", ":", "\n", "            ", "self", ".", "sampler", "=", "SecondOrderRandomWalker", "(", "self", ".", "graph", ",", "\n", "self", ".", "args", ".", "P", ",", "\n", "self", ".", "args", ".", "Q", ",", "\n", "self", ".", "args", ".", "walk_number", ",", "\n", "self", ".", "args", ".", "walk_length", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "sampler", "=", "FirstOrderRandomWalker", "(", "self", ".", "graph", ",", "\n", "self", ".", "args", ".", "walk_number", ",", "\n", "self", ".", "args", ".", "walk_length", ")", "\n", "", "self", ".", "walks", "=", "self", ".", "sampler", ".", "walks", "\n", "del", "self", ".", "sampler", "\n", "self", ".", "log", "[", "\"walk_end_time\"", "]", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._create_single_embedding": [[49, 73], ["print", "utils.create_documents", "gensim.models.doc2vec.Doc2Vec", "numpy.array", "range", "str", "musae.MUSAE.graph.number_of_nodes"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.utils.create_documents"], ["", "def", "_create_single_embedding", "(", "self", ",", "features", ")", ":", "\n", "        ", "\"\"\"\n        Learning an embedding from a feature hash table.\n        :param features: A hash table with node keys and feature list values.\n        :return embedding: Numpy array of embedding.\n        \"\"\"", "\n", "print", "(", "\"\\nLearning the embedding.\"", ")", "\n", "document_collections", "=", "create_documents", "(", "features", ")", "\n", "\n", "model", "=", "Doc2Vec", "(", "document_collections", ",", "\n", "vector_size", "=", "self", ".", "args", ".", "dimensions", ",", "\n", "window", "=", "0", ",", "\n", "min_count", "=", "self", ".", "args", ".", "min_count", ",", "\n", "alpha", "=", "self", ".", "args", ".", "alpha", ",", "\n", "dm", "=", "0", ",", "\n", "negative", "=", "self", ".", "args", ".", "negative_samples", ",", "\n", "ns_exponent", "=", "self", ".", "args", ".", "exponent", ",", "\n", "min_alpha", "=", "self", ".", "args", ".", "min_alpha", ",", "\n", "sample", "=", "self", ".", "args", ".", "down_sampling", ",", "\n", "workers", "=", "self", ".", "args", ".", "workers", ",", "\n", "epochs", "=", "self", ".", "args", ".", "epochs", ")", "\n", "\n", "emb", "=", "np", ".", "array", "(", "[", "model", ".", "docvecs", "[", "str", "(", "n", ")", "]", "for", "n", "in", "range", "(", "self", ".", "graph", ".", "number_of_nodes", "(", ")", ")", "]", ")", "\n", "return", "emb", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._create_documents": [[75, 81], ["print", "tqdm.tqdm.tqdm", "features.items", "len", "str"], "methods", ["None"], ["", "def", "_create_documents", "(", "self", ",", "features", ")", ":", "\n", "        ", "print", "(", "\"Creating documents.\"", ")", "\n", "features_out", "=", "{", "}", "\n", "for", "node", ",", "feature_set", "in", "tqdm", "(", "features", ".", "items", "(", ")", ",", "total", "=", "len", "(", "features", ")", ")", ":", "\n", "            ", "features_out", "[", "str", "(", "node", ")", "]", "=", "[", "feat", "for", "feat_elems", "in", "feature_set", "for", "feat", "in", "feat_elems", "]", "\n", "", "return", "features_out", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._setup_musae_features": [[82, 98], ["print", "tqdm.tqdm.tqdm", "musae.MUSAE._create_documents", "str", "range", "musae.MUSAE.graph.nodes", "features[].append", "features[].append", "len", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._create_documents"], ["", "def", "_setup_musae_features", "(", "self", ",", "approximation", ")", ":", "\n", "        ", "\"\"\"\n        Creating MUSAE feature set.\n        :param approximation: Approximation-order.\n        :return features: Feature hash-table.\n        \"\"\"", "\n", "features", "=", "{", "str", "(", "node", ")", ":", "[", "]", "for", "node", "in", "self", ".", "graph", ".", "nodes", "(", ")", "}", "\n", "print", "(", "\"Processing attributed walks.\"", ")", "\n", "for", "walk", "in", "tqdm", "(", "self", ".", "walks", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "walk", ")", "-", "approximation", ")", ":", "\n", "                ", "source", "=", "walk", "[", "i", "]", "\n", "target", "=", "walk", "[", "i", "+", "approximation", "]", "\n", "features", "[", "str", "(", "source", ")", "]", ".", "append", "(", "self", ".", "features", "[", "str", "(", "target", ")", "]", ")", "\n", "features", "[", "str", "(", "target", ")", "]", ".", "append", "(", "self", ".", "features", "[", "str", "(", "source", ")", "]", ")", "\n", "\n", "", "", "return", "self", ".", "_create_documents", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._setup_ae_features": [[99, 115], ["print", "tqdm.tqdm.tqdm", "musae.MUSAE._create_documents", "str", "range", "musae.MUSAE.graph.nodes", "range", "len", "features[].append", "features[].append", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._create_documents"], ["", "def", "_setup_ae_features", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Create AE feature set.\n        :return features: Feature set hash table.\n        \"\"\"", "\n", "features", "=", "{", "str", "(", "node", ")", ":", "[", "]", "for", "node", "in", "self", ".", "graph", ".", "nodes", "(", ")", "}", "\n", "print", "(", "\"Processing attributed walks.\"", ")", "\n", "for", "walk", "in", "tqdm", "(", "self", ".", "walks", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "walk", ")", "-", "self", ".", "args", ".", "approximation_order", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "self", ".", "args", ".", "approximation_order", ")", ":", "\n", "                    ", "source", "=", "walk", "[", "i", "]", "\n", "target", "=", "walk", "[", "i", "+", "j", "+", "1", "]", "\n", "features", "[", "str", "(", "source", ")", "]", ".", "append", "(", "self", ".", "features", "[", "str", "(", "target", ")", "]", ")", "\n", "features", "[", "str", "(", "target", ")", "]", ".", "append", "(", "self", ".", "features", "[", "str", "(", "source", ")", "]", ")", "\n", "\n", "", "", "", "return", "self", ".", "_create_documents", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._print_approximation_order": [[116, 122], ["print", "str"], "methods", ["None"], ["", "def", "_print_approximation_order", "(", "self", ",", "approximation", ")", ":", "\n", "        ", "\"\"\"\n        Nice printing ofapproximation order for MUSAE.\n        :param approximation: Approximation order.\n        \"\"\"", "\n", "print", "(", "\"\\nApproximation order: \"", "+", "str", "(", "approximation", "+", "1", ")", "+", "\".\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._learn_musae_embedding": [[123, 132], ["range", "musae.MUSAE._print_approximation_order", "musae.MUSAE._setup_musae_features", "musae.MUSAE._create_single_embedding", "musae.MUSAE.embeddings.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._print_approximation_order", "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._setup_musae_features", "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._create_single_embedding"], ["", "def", "_learn_musae_embedding", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Learning MUSAE embeddings up to the approximation order.\n        \"\"\"", "\n", "for", "approximation", "in", "range", "(", "self", ".", "args", ".", "approximation_order", ")", ":", "\n", "            ", "self", ".", "_print_approximation_order", "(", "approximation", ")", "\n", "features", "=", "self", ".", "_setup_musae_features", "(", "approximation", "+", "1", ")", "\n", "embedding", "=", "self", ".", "_create_single_embedding", "(", "features", ")", "\n", "self", ".", "embeddings", ".", "append", "(", "embedding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._learn_ae_embedding": [[133, 140], ["musae.MUSAE._setup_ae_features", "musae.MUSAE._create_single_embedding", "musae.MUSAE.embeddings.append"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._setup_ae_features", "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._create_single_embedding"], ["", "", "def", "_learn_ae_embedding", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Learning an AE embedding.\n        \"\"\"", "\n", "features", "=", "self", ".", "_setup_ae_features", "(", ")", "\n", "embedding", "=", "self", ".", "_create_single_embedding", "(", "features", ")", "\n", "self", ".", "embeddings", ".", "append", "(", "embedding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE.learn_embedding": [[141, 156], ["time.time", "numpy.concatenate", "time.time", "musae.MUSAE._create_single_embedding", "musae.MUSAE.embeddings.append", "musae.MUSAE._learn_musae_embedding", "musae.MUSAE._learn_ae_embedding"], "methods", ["home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._create_single_embedding", "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._learn_musae_embedding", "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE._learn_ae_embedding"], ["", "def", "learn_embedding", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Learning the embeddings and measuring optimization runtime.\n        \"\"\"", "\n", "self", ".", "log", "[", "\"optim_start_time\"", "]", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "embeddings", "=", "[", "]", "\n", "if", "self", ".", "args", ".", "base_model", "==", "\"null\"", ":", "\n", "            ", "embedding", "=", "self", ".", "_create_single_embedding", "(", "self", ".", "features", ")", "\n", "self", ".", "embeddings", ".", "append", "(", "embedding", ")", "\n", "", "if", "self", ".", "args", ".", "model", "==", "\"musae\"", ":", "\n", "            ", "self", ".", "_learn_musae_embedding", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_learn_ae_embedding", "(", ")", "\n", "", "self", ".", "embeddings", "=", "np", ".", "concatenate", "(", "self", ".", "embeddings", ",", "axis", "=", "1", ")", "\n", "self", ".", "log", "[", "\"optim_end_time\"", "]", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE.save_embedding": [[157, 167], ["print", "numpy.array().reshape", "numpy.concatenate", "pandas.DataFrame", "musae.MUSAE.embeddings.to_csv", "numpy.array", "str", "range", "range"], "methods", ["None"], ["", "def", "save_embedding", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Method to save the embedding.\n        \"\"\"", "\n", "print", "(", "\"\\nSaving embedding.\\n\"", ")", "\n", "columns", "=", "[", "\"id\"", "]", "+", "[", "\"x_\"", "+", "str", "(", "x", ")", "for", "x", "in", "range", "(", "self", ".", "embeddings", ".", "shape", "[", "1", "]", ")", "]", "\n", "ids", "=", "np", ".", "array", "(", "range", "(", "self", ".", "embeddings", ".", "shape", "[", "0", "]", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "self", ".", "embeddings", "=", "np", ".", "concatenate", "(", "[", "ids", ",", "self", ".", "embeddings", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "embeddings", "=", "pd", ".", "DataFrame", "(", "self", ".", "embeddings", ",", "columns", "=", "columns", ")", "\n", "self", ".", "embeddings", ".", "to_csv", "(", "self", ".", "args", ".", "output", ",", "index", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.musae.MUSAE.save_logs": [[168, 175], ["print", "open", "json.dump"], "methods", ["None"], ["", "def", "save_logs", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Method to save the logs.\n        \"\"\"", "\n", "print", "(", "\"Saving the logs.\"", ")", "\n", "with", "open", "(", "self", ".", "args", ".", "log", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "log", ",", "f", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.utils.tab_printer": [[9, 20], ["vars", "sorted", "texttable.Texttable", "texttable.Texttable.add_rows", "texttable.Texttable.add_rows", "print", "vars.keys", "texttable.Texttable.draw", "k.replace().capitalize", "k.replace"], "function", ["None"], ["def", "tab_printer", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    Function to print the logs in a nice tabular format.\n    :param args: Parameters used for the model.\n    \"\"\"", "\n", "args", "=", "vars", "(", "args", ")", "\n", "keys", "=", "sorted", "(", "args", ".", "keys", "(", ")", ")", "\n", "t", "=", "Texttable", "(", ")", "\n", "t", ".", "add_rows", "(", "[", "[", "\"Parameter\"", ",", "\"Value\"", "]", "]", ")", "\n", "t", ".", "add_rows", "(", "[", "[", "k", ".", "replace", "(", "\"_\"", ",", "\" \"", ")", ".", "capitalize", "(", ")", ",", "args", "[", "k", "]", "]", "for", "k", "in", "keys", "]", ")", "\n", "print", "(", "t", ".", "draw", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.utils.load_graph": [[21, 33], ["pandas.read_csv", "pd.read_csv.values.tolist", "networkx.from_edgelist", "nx.from_edgelist.remove_edges_from", "networkx.selfloop_edges", "int", "int"], "function", ["None"], ["", "def", "load_graph", "(", "graph_path", ")", ":", "\n", "    ", "\"\"\"\n    Reading a NetworkX graph.\n    :param graph_path: Path to the edge list.\n    :return graph: NetworkX object.\n    \"\"\"", "\n", "data", "=", "pd", ".", "read_csv", "(", "graph_path", ")", "\n", "edges", "=", "data", ".", "values", ".", "tolist", "(", ")", "\n", "edges", "=", "[", "[", "int", "(", "edge", "[", "0", "]", ")", ",", "int", "(", "edge", "[", "1", "]", ")", "]", "for", "edge", "in", "edges", "]", "\n", "graph", "=", "nx", ".", "from_edgelist", "(", "edges", ")", "\n", "graph", ".", "remove_edges_from", "(", "nx", ".", "selfloop_edges", "(", "graph", ")", ")", "\n", "return", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.utils.load_features": [[34, 43], ["json.load", "open", "str", "str", "json.load.items"], "function", ["None"], ["", "def", "load_features", "(", "features_path", ")", ":", "\n", "    ", "\"\"\"\n    Reading the features from disk.\n    :param features_path: Location of feature JSON.\n    :return features: Feature hash table.\n    \"\"\"", "\n", "features", "=", "json", ".", "load", "(", "open", "(", "features_path", ")", ")", "\n", "features", "=", "{", "str", "(", "k", ")", ":", "[", "str", "(", "val", ")", "for", "val", "in", "v", "]", "for", "k", ",", "v", "in", "features", ".", "items", "(", ")", "}", "\n", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.benedekrozemberczki_MUSAE.src.utils.create_documents": [[44, 52], ["gensim.models.doc2vec.TaggedDocument", "features.items", "str"], "function", ["None"], ["", "def", "create_documents", "(", "features", ")", ":", "\n", "    ", "\"\"\"\n    From a feature hash create a list of TaggedDocuments.\n    :param features: Feature hash table - keys are nodes, values are feature lists.\n    :return docs: Tagged Documents list.\n    \"\"\"", "\n", "docs", "=", "[", "TaggedDocument", "(", "words", "=", "v", ",", "tags", "=", "[", "str", "(", "k", ")", "]", ")", "for", "k", ",", "v", "in", "features", ".", "items", "(", ")", "]", "\n", "return", "docs", "\n", "", ""]]}