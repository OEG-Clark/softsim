{"home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.demo.main": [[17, 59], ["config.init_obj", "torch.load", "model.to.load_state_dict", "model.to.to", "model.to.eval", "print", "utils.util.load_sample_images", "torch.tensor().to", "model.to.", "utils.generate_figure.generate_mesh", "os.path.join", "os.makedirs", "o3d.io.write_triangle_mesh", "range", "torch.tensor", "os.path.join", "len", "o3d.io.write_triangle_mesh", "o3d.visualization.Visualizer", "o3d.visualization.Visualizer.create_window", "o3d.visualization.Visualizer.run", "o3d.visualization.Visualizer.destroy_window", "os.path.join", "o3d.visualization.Visualizer.add_geometry"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.load_sample_images", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.generate_figure.generate_mesh"], ["def", "main", "(", "config", ")", ":", "\n", "# load model", "\n", "    ", "model", "=", "config", ".", "init_obj", "(", "'arch'", ",", "module_arch", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", ".", "resume", ")", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "print", "(", "\"load model\"", ")", "\n", "\n", "# load image", "\n", "img", ",", "fname", "=", "load_sample_images", "(", "config", ".", "inputimg", ")", "\n", "img", "=", "torch", ".", "tensor", "(", "img", ")", ".", "to", "(", "device", ")", "\n", "\n", "# run model", "\n", "polycoeff", ",", "_", ",", "_", ",", "A_10x10", "=", "model", "(", "img", ")", "\n", "\n", "# generate meshes", "\n", "meshlist", ",", "total_mesh", ",", "_", "=", "generate_mesh", "(", "polycoeff", ",", "A_10x10", ")", "\n", "\n", "# generate figures", "\n", "output_dir", "=", "os", ".", "path", ".", "join", "(", "\"./output\"", ",", "fname", ")", "\n", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "\"open3d\"", "in", "sys", ".", "modules", ":", "\n", "# save whole mesh", "\n", "        ", "o3d", ".", "io", ".", "write_triangle_mesh", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"total.ply\"", ")", ",", "total_mesh", ")", "\n", "\n", "# save meshes of parts", "\n", "for", "i", "in", "range", "(", "len", "(", "meshlist", ")", ")", ":", "\n", "            ", "o3d", ".", "io", ".", "write_triangle_mesh", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"parts_{}.ply\"", ".", "format", "(", "i", ")", ")", ",", "meshlist", "[", "i", "]", ")", "\n", "\n", "# visualize with open3d", "\n", "", "if", "config", ".", "visualize", ":", "\n", "            ", "vis", "=", "o3d", ".", "visualization", ".", "Visualizer", "(", ")", "\n", "vis", ".", "create_window", "(", ")", "\n", "\n", "for", "mesh", "in", "meshlist", ":", "\n", "                ", "vis", ".", "add_geometry", "(", "mesh", ")", "\n", "\n", "", "vis", ".", "run", "(", ")", "\n", "vis", ".", "destroy_window", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.train.main": [[12, 40], ["config.get_logger", "config.init_obj", "config.init_obj", "config.init_obj", "config.get_logger.info", "getattr", "filter", "config.init_obj", "config.init_obj", "trainer.Trainer", "trainer.Trainer.train", "getattr", "config.init_obj.parameters"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_trainer.BaseTrainer.train"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "logger", "=", "config", ".", "get_logger", "(", "'train'", ")", "\n", "\n", "# setup data_loader instances", "\n", "data_loader", "=", "config", ".", "init_obj", "(", "'data_loader'", ",", "module_data", ")", "\n", "valid_data_loader", "=", "config", ".", "init_obj", "(", "'valid_data_loader'", ",", "module_data", ")", "\n", "\n", "# build model architecture, then print to console", "\n", "model", "=", "config", ".", "init_obj", "(", "'arch'", ",", "module_arch", ")", "\n", "logger", ".", "info", "(", "model", ")", "\n", "\n", "# get function handles of loss and metrics", "\n", "criterion", "=", "getattr", "(", "module_loss", ",", "config", "[", "'loss'", "]", ")", "\n", "metrics", "=", "[", "getattr", "(", "module_metric", ",", "met", ")", "for", "met", "in", "config", "[", "'metrics'", "]", "]", "\n", "\n", "# build optimizer, learning rate scheduler. delete every lines containing lr_scheduler for disabling scheduler", "\n", "trainable_params", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "\n", "optimizer", "=", "config", ".", "init_obj", "(", "'optimizer'", ",", "torch", ".", "optim", ",", "trainable_params", ")", "\n", "\n", "lr_scheduler", "=", "config", ".", "init_obj", "(", "'lr_scheduler'", ",", "torch", ".", "optim", ".", "lr_scheduler", ",", "optimizer", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "model", ",", "criterion", ",", "metrics", ",", "optimizer", ",", "\n", "config", "=", "config", ",", "\n", "data_loader", "=", "data_loader", ",", "\n", "valid_data_loader", "=", "valid_data_loader", ",", "\n", "lr_scheduler", "=", "lr_scheduler", ")", "\n", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.test.main": [[14, 108], ["config.get_logger", "config.init_obj", "config.init_obj", "config.get_logger.info", "config.get_logger.info", "torch.load", "torch.nn.DataParallel.load_state_dict", "str", "os.makedirs", "os.makedirs", "range", "torch.device", "torch.nn.DataParallel.to", "torch.nn.DataParallel.eval", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "print", "print", "range", "print", "print", "print", "print", "print", "print", "print", "torch.nn.DataParallel", "len", "os.makedirs", "os.makedirs", "torch.no_grad", "utils.util.gen_polynomial_orders", "tqdm.tqdm", "print", "print", "print", "torch.cuda.is_available", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "img_H.to.to", "torch.nn.DataParallel.", "torch.from_numpy().to", "model.loss.PI_funcs_generator", "model.loss.PI_value_generator", "model.metric.surfaceSampling", "model.metric.chamfer_distance_naive", "test.coeff2polystr", "range", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.tanh", "model.metric.IOU", "model.metric.fscore", "polycoeff.detach().cpu().numpy", "max", "max", "max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "print", "target[].to", "torch.from_numpy", "print", "open", "f.write", "open", "f.write", "torch.mean", "torch.mean", "torch.mean", "utils.util.gen_polynomial_orders", "polycoeff.detach().cpu", "polycoeff.detach", "str", "str", "[].item", "[].item", "str", "str", "[].item", "[].item"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.gen_polynomial_orders", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.PI_funcs_generator", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.PI_value_generator", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.metric.surfaceSampling", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.metric.chamfer_distance_naive", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.test.coeff2polystr", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.metric.IOU", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.metric.fscore", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.gen_polynomial_orders"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "logger", "=", "config", ".", "get_logger", "(", "'test'", ")", "\n", "\n", "# setup data_loader instances", "\n", "test_data_loader", "=", "config", ".", "init_obj", "(", "'test_data_loader'", ",", "module_data", ")", "\n", "\n", "# build model architecture", "\n", "model", "=", "config", ".", "init_obj", "(", "'arch'", ",", "module_arch", ")", "\n", "logger", ".", "info", "(", "model", ")", "\n", "\n", "logger", ".", "info", "(", "'Loading checkpoint: {} ...'", ".", "format", "(", "config", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", ".", "resume", ")", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "if", "config", "[", "'n_gpu'", "]", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "checkname", "=", "str", "(", "config", ".", "run_id", ")", "\n", "os", ".", "makedirs", "(", "'./visualization/'", "+", "checkname", "+", "\"/functions/\"", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "'./visualization/'", "+", "checkname", "+", "\"/valid_indices/\"", ",", "exist_ok", "=", "True", ")", "\n", "cls1_name", "=", "[", "'02691156'", ",", "'02828884'", ",", "'02933112'", ",", "'02958343'", ",", "'03001627'", ",", "'03211117'", ",", "'03636649'", ",", "'03691459'", ",", "'04090263'", ",", "'04256520'", ",", "'04379243'", ",", "'04401088'", ",", "'04530566'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "cls1_name", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "'./visualization/'", "+", "checkname", "+", "'/functions/'", "+", "cls1_name", "[", "i", "]", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "'./visualization/'", "+", "checkname", "+", "'/valid_indices/'", "+", "cls1_name", "[", "i", "]", ",", "exist_ok", "=", "True", ")", "\n", "# prepare model for testing", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "sum_iou_cls", "=", "torch", ".", "zeros", "(", "13", ")", ".", "to", "(", "'cuda'", ")", "\n", "sum_f_cls", "=", "torch", ".", "zeros", "(", "13", ")", ".", "to", "(", "'cuda'", ")", "\n", "sum_chamfer_cls", "=", "torch", ".", "zeros", "(", "13", ")", ".", "to", "(", "'cuda'", ")", "\n", "sum_iou_cls_mean", "=", "torch", ".", "zeros", "(", "13", ")", ".", "to", "(", "'cuda'", ")", "\n", "sum_f_cls_mean", "=", "torch", ".", "zeros", "(", "13", ")", ".", "to", "(", "'cuda'", ")", "\n", "sum_cham_cls_mean", "=", "torch", ".", "zeros", "(", "13", ")", ".", "to", "(", "'cuda'", ")", "\n", "count_cls", "=", "torch", ".", "zeros", "(", "13", ")", ".", "to", "(", "'cuda'", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "polyorder_cpu", "=", "gen_polynomial_orders", "(", "4", ")", "\n", "for", "img_H", ",", "target", "in", "tqdm", "(", "test_data_loader", ")", ":", "\n", "            ", "img_H", "=", "img_H", ".", "to", "(", "'cuda'", ")", "\n", "for", "key", "in", "target", ":", "\n", "                ", "if", "target", "[", "key", "]", ".", "size", "==", "0", ":", "print", "(", "target", "[", "'directory'", "]", ")", ";", "raise", "\n", "if", "key", "!=", "'directory'", ":", "\n", "                    ", "target", "[", "key", "]", "=", "target", "[", "key", "]", ".", "to", "(", "'cuda'", ")", "\n", "\n", "", "", "polycoeff", ",", "_", ",", "A_10x10", "=", "model", "(", "img_H", ")", "\n", "\n", "polyorder", "=", "torch", ".", "from_numpy", "(", "gen_polynomial_orders", "(", "4", ")", ")", ".", "to", "(", "'cuda'", ")", "\n", "PI_funcs_inout", "=", "PI_funcs_generator", "(", "target", "[", "'inoutpts'", "]", ",", "polycoeff", ",", "polyorder", ")", "\n", "PI_value_inout", ",", "_", "=", "PI_value_generator", "(", "torch", ".", "tanh", "(", "PI_funcs_inout", ")", ")", "\n", "\n", "batchiou", "=", "IOU", "(", "PI_value_inout", ",", "target", ")", "[", ":", "]", "\n", "batchf", "=", "fscore", "(", "PI_value_inout", ",", "target", ")", "[", ":", "]", "\n", "sampled_point", "=", "surfaceSampling", "(", "polycoeff", ",", "test_data_loader", ".", "dataset", ".", "allpoints", ")", "# on points", "\n", "batchchamferL1", "=", "chamfer_distance_naive", "(", "sampled_point", ",", "target", "[", "'onpts'", "]", ")", "\n", "\n", "surfs", ",", "validinds", "=", "coeff2polystr", "(", "polycoeff", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "polyorder_cpu", ",", "A_10x10", ",", "PI_funcs_inout", ")", "\n", "\n", "for", "ii", "in", "range", "(", "batchiou", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "sum_iou_cls_mean", "[", "target", "[", "'class_num'", "]", "[", "ii", "]", "]", "+=", "batchiou", "[", "ii", "]", "\n", "sum_f_cls_mean", "[", "target", "[", "'class_num'", "]", "[", "ii", "]", "]", "+=", "batchf", "[", "ii", "]", "\n", "sum_cham_cls_mean", "[", "target", "[", "'class_num'", "]", "[", "ii", "]", "]", "+=", "batchchamferL1", "[", "ii", "]", "\n", "if", "batchiou", "[", "ii", "]", ">=", "sum_iou_cls", "[", "target", "[", "'class_num'", "]", "[", "ii", "]", "]", ":", "\n", "                    ", "print", "(", "'Check: '", ",", "batchiou", "[", "ii", "]", ",", "target", "[", "'directory'", "]", "[", "ii", "]", ")", "\n", "", "sum_iou_cls", "[", "target", "[", "'class_num'", "]", "[", "ii", "]", "]", "=", "max", "(", "batchiou", "[", "ii", "]", ",", "sum_iou_cls", "[", "target", "[", "'class_num'", "]", "[", "ii", "]", "]", ")", "\n", "sum_f_cls", "[", "target", "[", "'class_num'", "]", "[", "ii", "]", "]", "=", "max", "(", "batchiou", "[", "ii", "]", ",", "sum_f_cls", "[", "target", "[", "'class_num'", "]", "[", "ii", "]", "]", ")", "\n", "sum_chamfer_cls", "[", "target", "[", "'class_num'", "]", "[", "ii", "]", "]", "=", "max", "(", "batchiou", "[", "ii", "]", ",", "sum_chamfer_cls", "[", "target", "[", "'class_num'", "]", "[", "ii", "]", "]", ")", "\n", "count_cls", "[", "target", "[", "'class_num'", "]", "[", "ii", "]", "]", "+=", "1", "\n", "\n", "# save sample images, or do something with output here", "\n", "with", "open", "(", "'./visualization/'", "+", "checkname", "+", "'/functions/'", "+", "'0'", "+", "str", "(", "target", "[", "'directory'", "]", "[", "ii", "]", "[", "0", "]", ".", "item", "(", ")", ")", "+", "'/'", "+", "str", "(", "target", "[", "'directory'", "]", "[", "ii", "]", "[", "1", "]", ".", "item", "(", ")", ")", "+", "'.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "surfs", "[", "ii", "]", ")", "\n", "", "with", "open", "(", "'./visualization/'", "+", "checkname", "+", "'/valid_indices/'", "+", "'0'", "+", "str", "(", "target", "[", "'directory'", "]", "[", "ii", "]", "[", "0", "]", ".", "item", "(", ")", ")", "+", "'/'", "+", "str", "(", "target", "[", "'directory'", "]", "[", "ii", "]", "[", "1", "]", ".", "item", "(", ")", ")", "+", "'.txt'", ",", "'w'", ")", "as", "f", ":", "\n", "                        ", "f", ".", "write", "(", "validinds", "[", "ii", "]", ")", "\n", "\n", "\n", "", "", "", "", "cls_name", "=", "[", "'plane'", ",", "'bench'", ",", "'cabinet'", ",", "'car'", ",", "'chair'", ",", "'display'", ",", "'lamp'", ",", "'speaker'", ",", "'rifle'", ",", "'sofa'", ",", "'table'", ",", "'phone'", ",", "'vessel'", "]", "\n", "iou_per_cls", "=", "sum_iou_cls_mean", "/", "count_cls", "\n", "f_per_cls", "=", "sum_f_cls_mean", "/", "count_cls", "\n", "cham_per_cls", "=", "sum_cham_cls_mean", "/", "count_cls", "\n", "print", "(", "\"class names:\"", ",", "cls_name", ")", "\n", "print", "(", "\"# samples  :\"", ",", "count_cls", ")", "\n", "for", "ii", "in", "range", "(", "13", ")", ":", "\n", "        ", "print", "(", "cls_name", "[", "ii", "]", "+", "\" IoU: {}\"", ".", "format", "(", "iou_per_cls", "[", "ii", "]", ")", ")", "\n", "print", "(", "cls_name", "[", "ii", "]", "+", "\" chamfer: {}\"", ".", "format", "(", "cham_per_cls", "[", "ii", "]", ")", ")", "\n", "print", "(", "cls_name", "[", "ii", "]", "+", "\" F: {}\"", ".", "format", "(", "f_per_cls", "[", "ii", "]", ")", ")", "\n", "", "print", "(", "\"#####################\"", ")", "\n", "print", "(", "\"naive average IoU: {}\"", ".", "format", "(", "torch", ".", "mean", "(", "iou_per_cls", ")", ".", "item", "(", ")", ")", ")", "\n", "print", "(", "\"Total average IoU: {}\"", ".", "format", "(", "torch", ".", "sum", "(", "sum_iou_cls_mean", ")", "/", "torch", ".", "sum", "(", "count_cls", ")", ")", ")", "\n", "print", "(", "\"naive average F: {}\"", ".", "format", "(", "torch", ".", "mean", "(", "f_per_cls", ")", ".", "item", "(", ")", ")", ")", "\n", "print", "(", "\"Total average F: {}\"", ".", "format", "(", "torch", ".", "sum", "(", "sum_f_cls_mean", ")", "/", "torch", ".", "sum", "(", "count_cls", ")", ")", ")", "\n", "print", "(", "\"naive average chamfer: {}\"", ".", "format", "(", "torch", ".", "mean", "(", "cham_per_cls", ")", ".", "item", "(", ")", ")", ")", "\n", "print", "(", "\"Total average chamfer: {}\"", ".", "format", "(", "torch", ".", "sum", "(", "sum_cham_cls_mean", ")", "/", "torch", ".", "sum", "(", "count_cls", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.test.coeff2polystr": [[110, 146], ["range", "range", "range", "range", "torch.norm", "list_valid.append", "range", "torch.min", "torch.max", "torch.sum", "torch.min", "str", "torch.abs", "torch.prod", "str", "torch.eig", "torch.eig", "int", "str", "torch.eig", "int", "str", "int", "str"], "function", ["None"], ["", "def", "coeff2polystr", "(", "polycoeff", ",", "polyorder", ",", "A_10x10", ",", "PI_funcs_inout", ")", ":", "\n", "    ", "\"\"\"\n    polycoeff (=Params): \n        (batch, num_params, num_functions) = (batch, 35, 32)\n    polyorders: \n        (num_params, 3) = (35, 3) - degree of x,y,z for each term in polynomial.\n        Since we use 4th-polynomials, the number of parameters is determined by (4+1)(4+1+1)(4+1+2)/6 = 35\n    \"\"\"", "\n", "\n", "batchsurfs", "=", "[", "\"\"", "for", "i", "in", "range", "(", "polycoeff", ".", "shape", "[", "0", "]", ")", "]", "\n", "batchind", "=", "[", "\"\"", "for", "i", "in", "range", "(", "polycoeff", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n", "for", "batch", "in", "range", "(", "polycoeff", ".", "shape", "[", "0", "]", ")", ":", "#batch", "\n", "        ", "surface", "=", "\"\"", "\n", "c", "=", "0", "\n", "list_valid", "=", "[", "]", "\n", "for", "subf", "in", "range", "(", "polycoeff", ".", "shape", "[", "2", "]", ")", ":", "#100 = 25*4", "\n", "            ", "f_tmp", "=", "\"\"", "\n", "A_10x10", "[", "batch", ",", ":", ",", ":", ",", "subf", "]", "=", "A_10x10", "[", "batch", ",", ":", ",", ":", ",", "subf", "]", "/", "torch", ".", "norm", "(", "A_10x10", "[", "batch", ",", ":", ",", ":", ",", "subf", "]", ")", "\n", "if", "torch", ".", "min", "(", "torch", ".", "eig", "(", "A_10x10", "[", "batch", ",", ":", ",", ":", ",", "subf", "]", ")", "[", "0", "]", "[", ":", ",", "0", "]", ")", "<", "-", "0.0", "and", "torch", ".", "max", "(", "torch", ".", "eig", "(", "A_10x10", "[", "batch", ",", ":", ",", ":", ",", "subf", "]", ")", "[", "0", "]", "[", ":", ",", "0", "]", ")", ">", "0", "and", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "torch", ".", "prod", "(", "torch", ".", "eig", "(", "A_10x10", "[", "batch", ",", ":", ",", ":", ",", "subf", "]", ")", "[", "0", "]", "[", ":", ",", "1", "]", ")", ")", ")", "==", "0", "and", "torch", ".", "min", "(", "PI_funcs_inout", "[", "batch", ",", ":", ",", "subf", "]", ")", "<", "0", ":", "\n", "                ", "list_valid", ".", "append", "(", "subf", ")", "\n", "\n", "for", "term", "in", "range", "(", "polycoeff", ".", "shape", "[", "1", "]", ")", ":", "#35", "\n", "                    ", "f_tmp", "=", "f_tmp", "+", "'+('", "+", "str", "(", "polycoeff", "[", "batch", ",", "term", ",", "subf", "]", ")", "+", "')*(x^'", "+", "str", "(", "int", "(", "polyorder", "[", "term", ",", "0", "]", ")", ")", "+", "')*(y^'", "+", "str", "(", "int", "(", "polyorder", "[", "term", ",", "1", "]", ")", ")", "+", "')*(z^'", "+", "str", "(", "int", "(", "polyorder", "[", "term", ",", "2", "]", ")", ")", "+", "')'", "\n", "", "if", "c", "==", "0", ":", "\n", "                   ", "surface", "=", "surface", "+", "f_tmp", "[", "1", ":", "]", "+", "'\\n'", "\n", "", "else", ":", "\n", "                    ", "surface", "=", "'min('", "+", "surface", "+", "','", "+", "f_tmp", "[", "1", ":", "]", "+", "')'", "+", "'\\n'", "\n", "", "c", "+=", "1", "\n", "", "", "valids", "=", "\"\"", "\n", "for", "sub_valid", "in", "list_valid", ":", "\n", "            ", "valids", "=", "valids", "+", "str", "(", "sub_valid", ")", "+", "' '", "\n", "", "batchind", "[", "batch", "]", "=", "batchind", "[", "batch", "]", "+", "valids", "#+ '-' + str(R[batch,0]) ", "\n", "batchsurfs", "[", "batch", "]", "=", "batchsurfs", "[", "batch", "]", "+", "surface", "#+ '-' + str(R[batch,0]) ", "\n", "\n", "", "return", "batchsurfs", ",", "batchind", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.__init__": [[12, 59], ["parse_config._update_config", "pathlib.Path", "parse_config.ConfigParser.save_dir.mkdir", "parse_config.ConfigParser.log_dir.mkdir", "utils.write_json", "utils.logger.setup_logging", "datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config._update_config", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.write_json", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.logger.logger.setup_logging"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "resume", "=", "None", ",", "modification", "=", "None", ",", "run_id", "=", "None", ",", "inputimg", "=", "None", ",", "visualize", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        class to parse configuration json file. Handles hyperparameters for training, initializations of modules, checkpoint saving\n        and logging module.\n        :param config: Dict containing configurations, hyperparameters for training. contents of `config.json` file for example.\n        :param resume: String, path to the checkpoint being loaded.\n        :param modification: Dict keychain:value, specifying position values to be replaced from config dict.\n        :param run_id: Unique Identifier for training processes. Used to save checkpoints and training log. Timestamp is being used as default\n        \"\"\"", "\n", "# load config file and apply modification", "\n", "self", ".", "_config", "=", "_update_config", "(", "config", ",", "modification", ")", "\n", "self", ".", "resume", "=", "resume", "\n", "self", ".", "inputimg", "=", "inputimg", "\n", "self", ".", "visualize", "=", "visualize", "\n", "if", "run_id", "is", "None", ":", "\n", "            ", "self", ".", "run_id", "=", "\"exp_test\"", "\n", "", "else", ":", "\n", "            ", "self", ".", "run_id", "=", "run_id", "\n", "\n", "# set save_dir where trained model and log will be saved.", "\n", "", "save_dir", "=", "Path", "(", "self", ".", "config", "[", "'trainer'", "]", "[", "'save_dir'", "]", ")", "\n", "\n", "exper_name", "=", "self", ".", "config", "[", "'name'", "]", "\n", "if", "run_id", "is", "None", ":", "# use timestamp as default run-id", "\n", "            ", "date", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "r'%m%d_%H%M%S'", ")", "\n", "self", ".", "_save_dir", "=", "save_dir", "/", "'models'", "/", "exper_name", "/", "date", "\n", "self", ".", "_log_dir", "=", "save_dir", "/", "'log'", "/", "exper_name", "/", "date", "\n", "", "else", ":", "\n", "            ", "date", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "r'%m%d_%H%M%S'", ")", "\n", "self", ".", "_save_dir", "=", "save_dir", "/", "'models'", "/", "exper_name", "/", "date", "/", "run_id", "\n", "self", ".", "_log_dir", "=", "save_dir", "/", "'log'", "/", "exper_name", "/", "date", "/", "run_id", "\n", "\n", "\n", "# make directory for saving checkpoints and log.", "\n", "", "exist_ok", "=", "run_id", "==", "''", "\n", "self", ".", "save_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "exist_ok", ")", "\n", "self", ".", "log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "exist_ok", ")", "\n", "\n", "# save updated config file to the checkpoint dir", "\n", "write_json", "(", "self", ".", "config", ",", "self", ".", "save_dir", "/", "'config.json'", ")", "\n", "\n", "# configure logging module", "\n", "setup_logging", "(", "self", ".", "log_dir", ")", "\n", "self", ".", "log_levels", "=", "{", "\n", "0", ":", "logging", ".", "WARNING", ",", "\n", "1", ":", "logging", ".", "INFO", ",", "\n", "2", ":", "logging", ".", "DEBUG", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.from_args": [[61, 89], ["utils.read_json", "pathlib.Path", "pathlib.Path", "utils.read_json.update", "getattr", "cls", "cls", "utils.read_json", "parse_config._get_opt_name"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.read_json", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.read_json", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config._get_opt_name"], ["", "@", "classmethod", "\n", "def", "from_args", "(", "cls", ",", "args", ",", "options", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this class from some cli arguments. Used in train, test.\n        \"\"\"", "\n", "\n", "if", "args", ".", "device", "is", "not", "None", ":", "\n", "            ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "device", "\n", "", "if", "args", ".", "resume", "is", "not", "None", ":", "\n", "            ", "resume", "=", "Path", "(", "args", ".", "resume", ")", "\n", "cfg_fname", "=", "resume", ".", "parent", "/", "'config.json'", "\n", "", "else", ":", "\n", "            ", "msg_no_cfg", "=", "\"Configuration file need to be specified. Add '-c config.json', for example.\"", "\n", "assert", "args", ".", "config", "is", "not", "None", ",", "msg_no_cfg", "\n", "resume", "=", "None", "\n", "cfg_fname", "=", "Path", "(", "args", ".", "config", ")", "\n", "\n", "", "config", "=", "read_json", "(", "cfg_fname", ")", "\n", "if", "args", ".", "config", "and", "resume", ":", "\n", "# update new config for fine-tuning", "\n", "            ", "config", ".", "update", "(", "read_json", "(", "args", ".", "config", ")", ")", "\n", "\n", "# parse custom cli options into dictionary", "\n", "", "modification", "=", "{", "opt", ".", "target", ":", "getattr", "(", "args", ",", "_get_opt_name", "(", "opt", ".", "flags", ")", ")", "for", "opt", "in", "options", "}", "\n", "if", "\"inputimg\"", "in", "args", "and", "\"visualize\"", "in", "args", ":", "\n", "            ", "return", "cls", "(", "config", ",", "resume", ",", "modification", ",", "args", ".", "tag", ",", "args", ".", "inputimg", ",", "args", ".", "visualize", ")", "\n", "", "else", ":", "\n", "            ", "return", "cls", "(", "config", ",", "resume", ",", "modification", ",", "args", ".", "tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.init_obj": [[90, 104], ["dict", "all", "dict.update", "getattr"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.update"], ["", "", "def", "init_obj", "(", "self", ",", "name", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Finds a function handle with the name given as 'type' in config, and returns the\n        instance initialized with corresponding arguments given.\n\n        `object = config.init_obj('name', module, a, b=1)`\n        is equivalent to\n        `object = module.name(a, b=1)`\n        \"\"\"", "\n", "module_name", "=", "self", "[", "name", "]", "[", "'type'", "]", "\n", "module_args", "=", "dict", "(", "self", "[", "name", "]", "[", "'args'", "]", ")", "\n", "assert", "all", "(", "[", "k", "not", "in", "module_args", "for", "k", "in", "kwargs", "]", ")", ",", "'Overwriting kwargs given in config file is not allowed'", "\n", "module_args", ".", "update", "(", "kwargs", ")", "\n", "return", "getattr", "(", "module", ",", "module_name", ")", "(", "*", "args", ",", "**", "module_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.init_ftn": [[105, 119], ["dict", "all", "dict.update", "functools.partial", "getattr"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.update"], ["", "def", "init_ftn", "(", "self", ",", "name", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Finds a function handle with the name given as 'type' in config, and returns the\n        function with given arguments fixed with functools.partial.\n\n        `function = config.init_ftn('name', module, a, b=1)`\n        is equivalent to\n        `function = lambda *args, **kwargs: module.name(a, *args, b=1, **kwargs)`.\n        \"\"\"", "\n", "module_name", "=", "self", "[", "name", "]", "[", "'type'", "]", "\n", "module_args", "=", "dict", "(", "self", "[", "name", "]", "[", "'args'", "]", ")", "\n", "assert", "all", "(", "[", "k", "not", "in", "module_args", "for", "k", "in", "kwargs", "]", ")", ",", "'Overwriting kwargs given in config file is not allowed'", "\n", "module_args", ".", "update", "(", "kwargs", ")", "\n", "return", "partial", "(", "getattr", "(", "module", ",", "module_name", ")", ",", "*", "args", ",", "**", "module_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.__getitem__": [[120, 123], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Access items like ordinary dict.\"\"\"", "\n", "return", "self", ".", "config", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.get_logger": [[124, 130], ["logging.getLogger", "logging.getLogger.setLevel", "parse_config.ConfigParser.log_levels.keys"], "methods", ["None"], ["", "def", "get_logger", "(", "self", ",", "name", ",", "verbosity", "=", "2", ")", ":", "\n", "        ", "msg_verbosity", "=", "'verbosity option {} is invalid. Valid options are {}.'", ".", "format", "(", "verbosity", ",", "self", ".", "log_levels", ".", "keys", "(", ")", ")", "\n", "assert", "verbosity", "in", "self", ".", "log_levels", ",", "msg_verbosity", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "self", ".", "log_levels", "[", "verbosity", "]", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.config": [[132, 135], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.save_dir": [[136, 139], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "save_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.log_dir": [[140, 143], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "log_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config._update_config": [[145, 153], ["modification.items", "parse_config._set_by_path"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config._set_by_path"], ["", "", "def", "_update_config", "(", "config", ",", "modification", ")", ":", "\n", "    ", "if", "modification", "is", "None", ":", "\n", "        ", "return", "config", "\n", "\n", "", "for", "k", ",", "v", "in", "modification", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "is", "not", "None", ":", "\n", "            ", "_set_by_path", "(", "config", ",", "k", ",", "v", ")", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config._get_opt_name": [[154, 159], ["flags[].replace", "flg.startswith", "flg.replace"], "function", ["None"], ["", "def", "_get_opt_name", "(", "flags", ")", ":", "\n", "    ", "for", "flg", "in", "flags", ":", "\n", "        ", "if", "flg", ".", "startswith", "(", "'--'", ")", ":", "\n", "            ", "return", "flg", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "", "", "return", "flags", "[", "0", "]", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config._set_by_path": [[160, 164], ["keys.split.split", "parse_config._get_by_path"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config._get_by_path"], ["", "def", "_set_by_path", "(", "tree", ",", "keys", ",", "value", ")", ":", "\n", "    ", "\"\"\"Set a value in a nested object in tree by sequence of keys.\"\"\"", "\n", "keys", "=", "keys", ".", "split", "(", "';'", ")", "\n", "_get_by_path", "(", "tree", ",", "keys", "[", ":", "-", "1", "]", ")", "[", "keys", "[", "-", "1", "]", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config._get_by_path": [[165, 168], ["functools.reduce"], "function", ["None"], ["", "def", "_get_by_path", "(", "tree", ",", "keys", ")", ":", "\n", "    ", "\"\"\"Access a nested object in tree by sequence of keys.\"\"\"", "\n", "return", "reduce", "(", "getitem", ",", "keys", ",", "tree", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.generate_figure.mesh_from_vf": [[9, 16], ["open3d.geometry.TriangleMesh", "open3d.utility.Vector3dVector", "open3d.utility.Vector3iVector", "o3d.geometry.TriangleMesh.compute_vertex_normals", "o3d.geometry.TriangleMesh.paint_uniform_color", "verts.cpu().numpy", "faces.cpu().numpy", "verts.cpu", "faces.cpu"], "function", ["None"], ["def", "mesh_from_vf", "(", "verts", ",", "faces", ",", "valid_color", ")", ":", "\n", "    ", "mesh", "=", "o3d", ".", "geometry", ".", "TriangleMesh", "(", ")", "\n", "mesh", ".", "vertices", "=", "o3d", ".", "utility", ".", "Vector3dVector", "(", "verts", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "mesh", ".", "triangles", "=", "o3d", ".", "utility", ".", "Vector3iVector", "(", "faces", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "mesh", ".", "compute_vertex_normals", "(", ")", "\n", "mesh", ".", "paint_uniform_color", "(", "valid_color", ")", "\n", "return", "mesh", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.generate_figure.generate_mesh": [[17, 50], ["numpy.random.seed", "numpy.random.rand", "torch.from_numpy().to", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "torch.from_numpy().cuda().unsqueeze", "enumerate", "torchmcubes.marching_cubes", "generate_figure.mesh_from_vf", "torch.ones().to", "torchmcubes.marching_cubes", "torch.min", "numpy.array", "torch.from_numpy", "range", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "generate_figure.mesh_from_vf", "meshlist.append", "feasible_idx.append", "utils.util.gen_polynomial_orders", "torch.min", "torch.ones", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.eig"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.generate_figure.mesh_from_vf", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.generate_figure.mesh_from_vf", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.gen_polynomial_orders"], ["", "def", "generate_mesh", "(", "coeff", ",", "A_6x6", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "222", ")", "\n", "color", "=", "np", ".", "random", ".", "rand", "(", "100", ",", "3", ")", "\n", "\n", "polyorder", "=", "torch", ".", "from_numpy", "(", "gen_polynomial_orders", "(", "4", ")", ")", ".", "to", "(", "device", ")", "\n", "valid_idx", "=", "[", "i", "for", "i", "in", "range", "(", "A_6x6", ".", "shape", "[", "3", "]", ")", "if", "torch", ".", "min", "(", "torch", ".", "eig", "(", "A_6x6", "[", "0", ",", ":", ",", ":", ",", "i", "]", ")", "[", "0", "]", "[", ":", ",", "0", "]", ")", "<", "0", "]", "\n", "\n", "N", "=", "128", "\n", "x", ",", "y", ",", "z", "=", "np", ".", "mgrid", "[", ":", "N", ",", ":", "N", ",", ":", "N", "]", "\n", "x", "=", "torch", ".", "from_numpy", "(", "(", "x", "/", "(", "N", "-", "1", ")", "*", "2.2", "-", "1.1", ")", ".", "astype", "(", "'float32'", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "dim", "=", "3", ")", "#.reshape(-1,1)", "\n", "y", "=", "torch", ".", "from_numpy", "(", "(", "y", "/", "(", "N", "-", "1", ")", "*", "2.2", "-", "1.1", ")", ".", "astype", "(", "'float32'", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "dim", "=", "3", ")", "#.reshape(-1,1)", "\n", "z", "=", "torch", ".", "from_numpy", "(", "(", "z", "/", "(", "N", "-", "1", ")", "*", "2.2", "-", "1.1", ")", ".", "astype", "(", "'float32'", ")", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "dim", "=", "3", ")", "#.reshape(-1,1)", "\n", "\n", "### generate meshes ", "\n", "meshlist", "=", "[", "]", "\n", "feasible_idx", "=", "[", "]", "\n", "total_func_val", "=", "torch", ".", "ones", "(", "N", ",", "N", ",", "N", ")", ".", "to", "(", "device", ")", "*", "100", "\n", "for", "i", ",", "idx", "in", "enumerate", "(", "valid_idx", ")", ":", "\n", "        ", "func_val", "=", "(", "coeff", "[", "0", ",", ":", ",", "idx", "]", "*", "(", "x", "**", "polyorder", "[", ":", ",", "0", "]", "*", "y", "**", "polyorder", "[", ":", ",", "1", "]", "*", "z", "**", "polyorder", "[", ":", ",", "2", "]", ")", ")", ".", "sum", "(", "dim", "=", "3", ")", ".", "detach", "(", ")", "\n", "verts0", ",", "faces0", "=", "marching_cubes", "(", "func_val", ",", "0.0", ")", "\n", "if", "verts0", ".", "shape", "[", "0", "]", ">", "3", ":", "# if valid", "\n", "            ", "mesh0", "=", "mesh_from_vf", "(", "verts0", ",", "faces0", ",", "color", "[", "valid_idx", "[", "i", "]", ",", ":", "]", ")", "\n", "meshlist", ".", "append", "(", "mesh0", ")", "\n", "feasible_idx", ".", "append", "(", "idx", ")", "\n", "\n", "# for whole shape", "\n", "", "total_func_val", "=", "torch", ".", "min", "(", "total_func_val", ",", "func_val", ")", "\n", "\n", "### generate a mesh for whole shape", "\n", "", "verts0", ",", "faces0", "=", "marching_cubes", "(", "total_func_val", ",", "0.0", ")", "\n", "total_mesh", "=", "mesh_from_vf", "(", "verts0", ",", "faces0", ",", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ")", "# gray color", "\n", "\n", "return", "meshlist", ",", "total_mesh", ",", "feasible_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.__init__": [[55, 59], ["pandas.DataFrame", "util.MetricTracker.reset"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.reset"], ["    ", "def", "__init__", "(", "self", ",", "*", "keys", ",", "writer", "=", "None", ")", ":", "\n", "        ", "self", ".", "writer", "=", "writer", "\n", "self", ".", "_data", "=", "pd", ".", "DataFrame", "(", "index", "=", "keys", ",", "columns", "=", "[", "'total'", ",", "'counts'", ",", "'average'", "]", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.reset": [[60, 63], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "col", "in", "self", ".", "_data", ".", "columns", ":", "\n", "            ", "self", ".", "_data", "[", "col", "]", ".", "values", "[", ":", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.update": [[64, 71], ["util.MetricTracker.writer.add_scalar"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "key", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "key", ",", "value", ")", "\n", "# self.writer.close()", "\n", "", "self", ".", "_data", ".", "total", "[", "key", "]", "+=", "value", "*", "n", "\n", "self", ".", "_data", ".", "counts", "[", "key", "]", "+=", "n", "\n", "self", ".", "_data", ".", "average", "[", "key", "]", "=", "self", ".", "_data", ".", "total", "[", "key", "]", "/", "self", ".", "_data", ".", "counts", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.avg": [[72, 74], ["None"], "methods", ["None"], ["", "def", "avg", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_data", ".", "average", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.result": [[75, 77], ["dict"], "methods", ["None"], ["", "def", "result", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "self", ".", "_data", ".", "average", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.ensure_dir": [[9, 13], ["pathlib.Path", "pathlib.Path.is_dir", "pathlib.Path.mkdir"], "function", ["None"], ["def", "ensure_dir", "(", "dirname", ")", ":", "\n", "    ", "dirname", "=", "Path", "(", "dirname", ")", "\n", "if", "not", "dirname", ".", "is_dir", "(", ")", ":", "\n", "        ", "dirname", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.read_json": [[14, 18], ["pathlib.Path", "pathlib.Path.open", "json.load"], "function", ["None"], ["", "", "def", "read_json", "(", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'rt'", ")", "as", "handle", ":", "\n", "        ", "return", "json", ".", "load", "(", "handle", ",", "object_hook", "=", "OrderedDict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.write_json": [[19, 23], ["pathlib.Path", "pathlib.Path.open", "json.dump"], "function", ["None"], ["", "", "def", "write_json", "(", "content", ",", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'wt'", ")", "as", "handle", ":", "\n", "        ", "json", ".", "dump", "(", "content", ",", "handle", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.load_sample_images": [[24, 34], ["PIL.Image.open", "numpy.array().astype", "images.append", "numpy.array", "numpy.transpose", "numpy.array", "fpath.split"], "function", ["None"], ["", "", "def", "load_sample_images", "(", "fpath", ")", ":", "\n", "    ", "images", "=", "[", "]", "\n", "\n", "image_H", "=", "Image", ".", "open", "(", "fpath", ")", "\n", "image_H", "=", "np", ".", "array", "(", "image_H", ")", ".", "astype", "(", "np", ".", "float32", ")", "[", "5", ":", "-", "4", ",", "5", ":", "-", "4", ",", ":", "3", "]", "\n", "\n", "if", "image_H", "is", "not", "None", ":", "\n", "        ", "images", ".", "append", "(", "np", ".", "transpose", "(", "image_H", ",", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "images", ")", ",", "fpath", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.gen_polynomial_orders": [[35, 52], ["int", "int", "numpy.zeros", "range", "range", "range", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "gen_polynomial_orders", "(", "degree", ")", ":", "#4", "\n", "    ", "under_inds", "=", "int", "(", "(", "degree", ")", "*", "(", "degree", "+", "1", ")", "*", "(", "degree", "+", "2", ")", "/", "6", ")", "# 20 for d=4", "\n", "num_inds", "=", "int", "(", "(", "degree", "+", "1", ")", "*", "(", "degree", "+", "2", ")", "*", "(", "degree", "+", "3", ")", "/", "6", ")", "# 35 for d=4", "\n", "orders", "=", "np", ".", "zeros", "(", "[", "num_inds", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "count", "=", "0", "\n", "countLargestOrder", "=", "under_inds", "\n", "for", "i", "in", "range", "(", "degree", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "degree", "-", "i", "+", "1", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "degree", "-", "i", "-", "j", "+", "1", ")", ":", "\n", "                ", "if", "i", "+", "j", "+", "k", "==", "degree", ":", "\n", "                    ", "orders", "[", "countLargestOrder", ",", ":", "]", "=", "np", ".", "array", "(", "[", "i", ",", "j", ",", "k", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "countLargestOrder", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "orders", "[", "count", ",", ":", "]", "=", "np", ".", "array", "(", "[", "i", ",", "j", ",", "k", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "count", "+=", "1", "\n", "", "", "", "", "return", "orders", "# (35,3) for d=4", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.logger.visualization.TensorboardWriter.__init__": [[6, 39], ["datetime.datetime.datetime.now", "str", "logger.warning", "importlib.import_module().SummaryWriter", "importlib.import_module"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ",", "logger", ",", "enabled", ")", ":", "\n", "        ", "self", ".", "writer", "=", "None", "\n", "self", ".", "selected_module", "=", "\"\"", "\n", "\n", "if", "enabled", ":", "\n", "            ", "log_dir", "=", "str", "(", "log_dir", ")", "\n", "\n", "# Retrieve vizualization writer.", "\n", "succeeded", "=", "False", "\n", "for", "module", "in", "[", "\"torch.utils.tensorboard\"", ",", "\"tensorboardX\"", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "writer", "=", "importlib", ".", "import_module", "(", "module", ")", ".", "SummaryWriter", "(", "log_dir", ")", "\n", "succeeded", "=", "True", "\n", "break", "\n", "", "except", "ImportError", ":", "\n", "                    ", "succeeded", "=", "False", "\n", "", "self", ".", "selected_module", "=", "module", "\n", "\n", "", "if", "not", "succeeded", ":", "\n", "                ", "message", "=", "\"Warning: visualization (Tensorboard) is configured to use, but currently not installed on \"", "\"this machine. Please install TensorboardX with 'pip install tensorboardx', upgrade PyTorch to \"", "\"version >= 1.1 to use 'torch.utils.tensorboard' or turn off the option in the 'config.json' file.\"", "\n", "logger", ".", "warning", "(", "message", ")", "\n", "\n", "", "", "self", ".", "step", "=", "0", "\n", "self", ".", "mode", "=", "''", "\n", "\n", "self", ".", "tb_writer_ftns", "=", "{", "\n", "'add_scalar'", ",", "'add_scalars'", ",", "'add_image'", ",", "'add_images'", ",", "'add_audio'", ",", "\n", "'add_text'", ",", "'add_histogram'", ",", "'add_pr_curve'", ",", "'add_embedding'", "\n", "}", "\n", "self", ".", "tag_mode_exceptions", "=", "{", "'add_histogram'", ",", "'add_embedding'", "}", "\n", "self", ".", "timer", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.logger.visualization.TensorboardWriter.set_step": [[40, 49], ["datetime.datetime.datetime.now", "visualization.TensorboardWriter.add_scalar", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "duration.total_seconds"], "methods", ["None"], ["", "def", "set_step", "(", "self", ",", "step", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "step", "=", "step", "\n", "if", "step", "==", "0", ":", "\n", "            ", "self", ".", "timer", "=", "datetime", ".", "now", "(", ")", "\n", "", "else", ":", "\n", "            ", "duration", "=", "datetime", ".", "now", "(", ")", "-", "self", ".", "timer", "\n", "self", ".", "add_scalar", "(", "'steps_per_sec'", ",", "1", "/", "duration", ".", "total_seconds", "(", ")", ")", "\n", "self", ".", "timer", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.logger.visualization.TensorboardWriter.__getattr__": [[50, 81], ["getattr", "getattr", "object.__getattr__", "getattr.", "getattr.", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.logger.visualization.TensorboardWriter.__getattr__"], ["", "", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        If visualization is configured to use:\n            return add_data() methods of tensorboard with additional information (step, tag) added.\n        Otherwise:\n            return a blank function handle that does nothing\n        \"\"\"", "\n", "if", "name", "==", "'close'", ":", "\n", "            ", "doclose", "=", "getattr", "(", "self", ".", "writer", ",", "name", ",", "None", ")", "\n", "def", "wrapper2", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "if", "doclose", "is", "not", "None", ":", "\n", "                    ", "doclose", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "wrapper2", "\n", "\n", "", "if", "name", "in", "self", ".", "tb_writer_ftns", ":", "\n", "            ", "add_data", "=", "getattr", "(", "self", ".", "writer", ",", "name", ",", "None", ")", "\n", "\n", "def", "wrapper", "(", "tag", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "if", "add_data", "is", "not", "None", ":", "\n", "# add mode(train/valid) tag", "\n", "                    ", "if", "name", "not", "in", "self", ".", "tag_mode_exceptions", ":", "\n", "                        ", "tag", "=", "'{}/{}'", ".", "format", "(", "tag", ",", "self", ".", "mode", ")", "\n", "", "add_data", "(", "tag", ",", "data", ",", "self", ".", "step", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "wrapper", "\n", "", "else", ":", "\n", "# default action for returning methods defined in this class, set_step() for instance.", "\n", "            ", "try", ":", "\n", "                ", "attr", "=", "object", ".", "__getattr__", "(", "name", ")", "\n", "", "except", "AttributeError", ":", "\n", "                ", "raise", "AttributeError", "(", "\"type object '{}' has no attribute '{}'\"", ".", "format", "(", "self", ".", "selected_module", ",", "name", ")", ")", "\n", "", "return", "attr", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.logger.logger.setup_logging": [[7, 23], ["pathlib.Path", "pathlib.Path.is_file", "utils.read_json", "config[].items", "logging.config.dictConfig", "logging.config.dictConfig", "print", "logging.basicConfig", "logging.basicConfig", "str"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.read_json"], ["def", "setup_logging", "(", "save_dir", ",", "log_config", "=", "'utils/logger/logger_config.json'", ",", "default_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"\n    Setup logging configuration\n    \"\"\"", "\n", "log_config", "=", "Path", "(", "log_config", ")", "\n", "if", "log_config", ".", "is_file", "(", ")", ":", "\n", "        ", "config", "=", "read_json", "(", "log_config", ")", "\n", "# modify logging paths based on run config", "\n", "for", "_", ",", "handler", "in", "config", "[", "'handlers'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "'filename'", "in", "handler", ":", "\n", "                ", "handler", "[", "'filename'", "]", "=", "str", "(", "save_dir", "/", "handler", "[", "'filename'", "]", ")", "\n", "\n", "", "", "logging", ".", "config", ".", "dictConfig", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Warning: logging configuration file is not found in {}.\"", ".", "format", "(", "log_config", ")", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "default_level", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.BasicBlock.__init__": [[23, 40], ["torch.Module.__init__", "ResNet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "ResNet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_data_loader.BaseDataLoader.__init__", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.conv3x3", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.BasicBlock.forward": [[41, 58], ["ResNet.BasicBlock.conv1", "ResNet.BasicBlock.bn1", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.conv2", "ResNet.BasicBlock.bn2", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.Bottleneck.__init__": [[69, 85], ["torch.Module.__init__", "ResNet.conv1x1", "norm_layer", "ResNet.conv3x3", "norm_layer", "ResNet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_data_loader.BaseDataLoader.__init__", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.conv1x1", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.conv3x3", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.Bottleneck.forward": [[86, 107], ["ResNet.Bottleneck.conv1", "ResNet.Bottleneck.bn1", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv2", "ResNet.Bottleneck.bn2", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv3", "ResNet.Bottleneck.bn3", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.ResNet.__init__": [[113, 163], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "ResNet.ResNet.modules", "len", "ValueError", "isinstance", "ResNet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_data_loader.BaseDataLoader.__init__", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.ResNet._make_layer", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.ResNet._make_layer": [[164, 187], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "ResNet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.ResNet._forward_impl": [[188, 205], ["ResNet.ResNet.conv1", "ResNet.ResNet.bn1", "ResNet.ResNet.relu", "ResNet.ResNet.maxpool", "ResNet.ResNet.layer1", "ResNet.ResNet.layer2", "ResNet.ResNet.layer3", "ResNet.ResNet.layer4", "ResNet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "ResNet.ResNet.fc", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "ResNet.ResNet.avgpool", "ResNet.ResNet.avgpool", "ResNet.ResNet.avgpool"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "l1", "=", "self", ".", "layer1", "(", "x", ")", "\n", "l2", "=", "self", ".", "layer2", "(", "l1", ")", "\n", "l3", "=", "self", ".", "layer3", "(", "l2", ")", "\n", "l4", "=", "self", ".", "layer4", "(", "l3", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "l4", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", ",", "torch", ".", "flatten", "(", "self", ".", "avgpool", "(", "l1", ")", ",", "1", ")", ",", "torch", ".", "flatten", "(", "self", ".", "avgpool", "(", "l2", ")", ",", "1", ")", ",", "torch", ".", "flatten", "(", "self", ".", "avgpool", "(", "l3", ")", ",", "1", ")", ",", "l4", "# 1000, 64, 128, 256, 512", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.ResNet.forward": [[206, 208], ["ResNet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.conv3x3": [[9, 13], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.conv1x1": [[15, 18], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet._resnet": [[210, 217], ["ResNet.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "'https://s3.amazonaws.com/pytorch/models/resnet18-5c106cde.pth'", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.resnet18": [[219, 228], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.resnet34": [[229, 238], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.resnet50": [[240, 249], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.resnet101": [[251, 260], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.resnet152": [[262, 271], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.resnext50_32x4d": [[273, 284], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.resnext101_32x8d": [[286, 297], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.wide_resnet50_2": [[299, 313], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.wide_resnet101_2": [[315, 329], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.PI_funcs_generator": [[11, 15], ["points.unsqueeze", "coeff.unsqueeze", "I.unsqueeze"], "function", ["None"], ["def", "PI_funcs_generator", "(", "points", ",", "coeff", ",", "polyorder", ")", ":", "\n", "    ", "I", "=", "(", "points", ".", "unsqueeze", "(", "dim", "=", "2", ")", "**", "polyorder", ")", ".", "prod", "(", "dim", "=", "3", ")", "# (batch, num_points, num_params) - Calculating the order of x^a*y^b*z^c", "\n", "PI_funcs", "=", "(", "coeff", ".", "unsqueeze", "(", "dim", "=", "1", ")", "*", "I", ".", "unsqueeze", "(", "dim", "=", "3", ")", ")", ".", "sum", "(", "dim", "=", "2", ")", "# (batch, num_points, num_functions)", "\n", "return", "PI_funcs", "# (batch, num_points, num_functions)", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.PI_value_generator": [[16, 19], ["torch.min", "torch.min", "torch.min", "union[].unsqueeze"], "function", ["None"], ["", "def", "PI_value_generator", "(", "PI_funcs", ")", ":", "\n", "    ", "union", "=", "torch", ".", "min", "(", "PI_funcs", "[", ":", ",", ":", ",", ":", "]", ",", "dim", "=", "2", ")", "\n", "return", "union", "[", "0", "]", ".", "unsqueeze", "(", "dim", "=", "2", ")", ",", "union", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.PI_difffuncs_generator": [[20, 32], ["polyorder.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "coeff.unsqueeze", "polyorder.unsqueeze().unsqueeze", "torch.eye", "torch.eye", "torch.eye", "torch.zeros", "torch.zeros", "torch.zeros", "polyorder.unsqueeze", "points.unsqueeze().unsqueeze", "torch.max.unsqueeze().unsqueeze", "dcoeff.unsqueeze", "dI.unsqueeze", "points.unsqueeze", "torch.max.unsqueeze"], "function", ["None"], ["", "def", "PI_difffuncs_generator", "(", "points", ",", "coeff", ",", "polyorder", ")", ":", "\n", "# Making [df1, df2, ... ] / [dx, dy, dz] - (batch, num_points, num_functions, 3)", "\n", "    ", "dcoeff", "=", "coeff", ".", "unsqueeze", "(", "dim", "=", "3", ")", "*", "polyorder", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "# (batch, num_params, num_functions, 3)", "\n", "\n", "dpolyorder", "=", "polyorder", ".", "unsqueeze", "(", "dim", "=", "2", ")", "\n", "dpolyorder", "=", "torch", ".", "cat", "(", "(", "dpolyorder", ",", "dpolyorder", ",", "dpolyorder", ")", ",", "dim", "=", "2", ")", "# (num_params, 3 for x/y/z, 3 for dx/dy/dz) (e.g. dpolyorder[:,:,0] contains orders differentiated by x)", "\n", "dpolyorder", "=", "dpolyorder", "-", "torch", ".", "eye", "(", "3", ",", "device", "=", "'cuda'", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "dpolyorder", "=", "torch", ".", "max", "(", "dpolyorder", ",", "torch", ".", "zeros", "(", "1", ",", "device", "=", "'cuda'", ",", "dtype", "=", "torch", ".", "float32", ")", ")", "# avoid 0 ** -1", "\n", "dI", "=", "(", "points", ".", "unsqueeze", "(", "dim", "=", "2", ")", ".", "unsqueeze", "(", "dim", "=", "4", ")", "**", "dpolyorder", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ")", ".", "prod", "(", "dim", "=", "3", ")", "# (batch, num_points, num_params, 3)", "\n", "\n", "PI_diff", "=", "(", "dcoeff", ".", "unsqueeze", "(", "dim", "=", "1", ")", "*", "dI", ".", "unsqueeze", "(", "dim", "=", "3", ")", ")", ".", "sum", "(", "dim", "=", "2", ")", "# (batch, num_points, num_functions, 3)", "\n", "return", "PI_diff", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.PI_diff_generator_torch": [[33, 40], ["torch.cat", "torch.cat", "torch.cat", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "torch.gather", "torch.gather", "torch.gather", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze"], "function", ["None"], ["", "def", "PI_diff_generator_torch", "(", "PI_diff", ",", "min_idx", ")", ":", "\n", "    ", "idx", "=", "min_idx", "\n", "idx", "=", "torch", ".", "cat", "(", "[", "idx", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "idx", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "idx", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "Diff_funcs", "=", "torch", ".", "gather", "(", "PI_diff", ",", "2", ",", "idx", ")", "[", ":", ",", ":", ",", "0", ",", ":", "]", "\n", "PI_normal", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "Diff_funcs", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "# normalized vectors / negative direction", "\n", "return", "PI_normal", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.loss_points": [[41, 56], ["mse", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "mse", "mse", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "function", ["None"], ["", "def", "loss_points", "(", "union_on", ",", "union_inout", ",", "target", ",", "loss_weights", ")", ":", "\n", "    ", "num_inside", "=", "target", "[", "'numinside'", "]", "\n", "\n", "loss_on", "=", "mse", "(", "union_on", ",", "torch", ".", "zeros_like", "(", "union_on", ")", ")", "\n", "loss_out", "=", "0", "\n", "loss_in", "=", "0", "\n", "for", "i", "in", "range", "(", "num_inside", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "loss_in", "+=", "mse", "(", "union_inout", "[", "i", ",", ":", "num_inside", "[", "i", "]", "]", ",", "-", "torch", ".", "ones_like", "(", "union_inout", "[", "i", ",", ":", "num_inside", "[", "i", "]", "]", ")", ")", "# inside", "\n", "loss_out", "+=", "mse", "(", "union_inout", "[", "i", ",", "num_inside", "[", "i", "]", ":", "]", ",", "torch", ".", "ones_like", "(", "union_inout", "[", "i", ",", "num_inside", "[", "i", "]", ":", "]", ")", ")", "# outside", "\n", "", "loss_in", "=", "loss_in", "/", "(", "num_inside", ".", "shape", "[", "0", "]", ")", "\n", "loss_out", "=", "loss_out", "/", "(", "num_inside", ".", "shape", "[", "0", "]", ")", "\n", "\n", "loss", "=", "loss_weights", "[", "'on'", "]", "*", "loss_on", "+", "loss_weights", "[", "'in'", "]", "*", "loss_in", "+", "loss_weights", "[", "'out'", "]", "*", "loss_out", "\n", "\n", "return", "loss_on", ",", "loss_in", ",", "loss_out", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.loss_normvec": [[57, 67], ["mse", "torch.isfinite", "torch.isfinite", "torch.isfinite", "print", "range", "torch.isfinite", "torch.isfinite", "torch.isfinite", "print", "mse"], "function", ["None"], ["", "def", "loss_normvec", "(", "target", ",", "normal", ")", ":", "\n", "    ", "\"\"\" target: (batch, num_point_on, 3) - true normal vector at the position of an on point \"\"\"", "\n", "loss_normvec", "=", "mse", "(", "normal", ",", "target", ")", "\n", "if", "not", "torch", ".", "isfinite", "(", "loss_normvec", ")", ":", "\n", "        ", "print", "(", "\"problem on loss_normvec\\n\"", ",", "\"normal\\n\"", ",", "normal", ",", "\"\\nnormal SHAPE\\n\"", ",", "normal", ".", "shape", ")", ";", "\n", "for", "batches", "in", "range", "(", "normal", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "if", "not", "torch", ".", "isfinite", "(", "mse", "(", "normal", "[", "batches", "]", ",", "target", "[", "batches", "]", ")", ")", ":", "\n", "                ", "print", "(", "\"idx:\"", ",", "batches", ")", "\n", "", "", "raise", "\n", "", "return", "loss_normvec", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.total_loss": [[68, 90], ["torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "loss.PI_funcs_generator", "loss.PI_funcs_generator", "loss.PI_value_generator", "loss.PI_value_generator", "loss.loss_points", "loss.PI_difffuncs_generator", "loss.PI_diff_generator_torch", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "loss.loss_normvec", "union_inout.detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "lossPTSon.detach().item", "lossPTSin.detach().item", "lossPTSout.detach().item", "lossNormVec.detach().item", "utils.util.gen_polynomial_orders", "lossPTSon.detach", "lossPTSin.detach", "lossPTSout.detach", "lossNormVec.detach"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.PI_funcs_generator", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.PI_funcs_generator", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.PI_value_generator", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.PI_value_generator", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.loss_points", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.PI_difffuncs_generator", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.PI_diff_generator_torch", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.loss_normvec", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.gen_polynomial_orders"], ["", "def", "total_loss", "(", "polycoeff", ",", "target", ",", "loss_weights", ")", ":", "\n", "## Point loss ", "\n", "    ", "polyorder", "=", "torch", ".", "from_numpy", "(", "gen_polynomial_orders", "(", "4", ")", ")", ".", "to", "(", "'cuda'", ")", "\n", "PI_funcs_on", "=", "PI_funcs_generator", "(", "target", "[", "'onpts'", "]", ",", "polycoeff", ",", "polyorder", ")", "# (batch, num_points, num_functions)", "\n", "PI_funcs_inout", "=", "PI_funcs_generator", "(", "target", "[", "'inoutpts'", "]", ",", "polycoeff", ",", "polyorder", ")", "# (batch, num_points, num_functions)", "\n", "\n", "union_on", ",", "min_idx_on", "=", "PI_value_generator", "(", "torch", ".", "tanh", "(", "PI_funcs_on", ")", ")", "# (batch, num_points, 1)", "\n", "union_inout", ",", "_", "=", "PI_value_generator", "(", "torch", ".", "tanh", "(", "PI_funcs_inout", ")", ")", "# (batch, num_points, 1)", "\n", "\n", "lossPTSon", ",", "lossPTSin", ",", "lossPTSout", ",", "lossPTS", "=", "loss_points", "(", "union_on", ",", "union_inout", ",", "target", ",", "loss_weights", ")", "\n", "\n", "## Normal vector loss", "\n", "PI_diff", "=", "PI_difffuncs_generator", "(", "target", "[", "'onpts'", "]", ",", "polycoeff", ",", "polyorder", ")", "# Making [df1, df2, ... ] / [dx, dy, dz] - (batch, num_points, num_functions, 3)", "\n", "normal", "=", "PI_diff_generator_torch", "(", "PI_diff", ",", "min_idx_on", ")", "\n", "lossNormVec", "=", "loss_weights", "[", "'normvec'", "]", "*", "loss_normvec", "(", "target", "[", "'normal'", "]", ",", "normal", ")", "\n", "\n", "return", "lossPTS", "+", "lossNormVec", ",", "{", "'loss_pnt_on'", ":", "lossPTSon", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'loss_pnt_in'", ":", "lossPTSin", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'loss_pnt_out'", ":", "lossPTSout", ".", "detach", "(", ")", ".", "item", "(", ")", ",", "\n", "'loss_normvec'", ":", "lossNormVec", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "}", ",", "union_inout", ".", "detach", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.model.Shape3DModel.__init__": [[8, 57], ["base.BaseModel.__init__", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "model.ResNet.resnet18", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_data_loader.BaseDataLoader.__init__", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.ResNet.resnet18"], ["    ", "def", "__init__", "(", "self", ",", "num_param", ",", "num_functions", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_param", "=", "num_param", "\n", "self", ".", "num_functions", "=", "num_functions", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "num_coeff", "=", "35", "\n", "self", ".", "num_function", "=", "[", "100", "]", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "\n", "\n", "# model: resnet_batchnorm2", "\n", "self", ".", "gen_r", "=", "nn", ".", "Linear", "(", "num_param", "*", "num_functions", ",", "1", ")", "\n", "self", ".", "gen_lambda", "=", "nn", ".", "Linear", "(", "num_param", "*", "num_functions", ",", "1", ")", "\n", "# encoder", "\n", "self", ".", "resnet_h", "=", "resnet18", "(", "num_classes", "=", "1000", ",", "pretrained", "=", "True", ")", "\n", "\n", "# results", "\n", "self", ".", "gen_paramsh_0", "=", "nn", ".", "Linear", "(", "1000", ",", "1024", ")", "\n", "self", ".", "gen_paramsh_1", "=", "nn", ".", "Linear", "(", "1000", ",", "4096", ")", "\n", "self", ".", "gen_paramsh_2", "=", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", "\n", "self", ".", "gen_paramsh_3", "=", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", "\n", "self", ".", "gen_paramsh_4", "=", "nn", ".", "Linear", "(", "4096", ",", "num_param", "*", "self", ".", "num_function", "[", "0", "]", ")", "\n", "\n", "self", ".", "orgh_0", "=", "nn", ".", "Linear", "(", "1000", ",", "1024", ")", "\n", "self", ".", "orgh_1", "=", "nn", ".", "Linear", "(", "1000", ",", "1024", ")", "\n", "self", ".", "orgh_2", "=", "nn", ".", "Linear", "(", "1024", ",", "512", ")", "\n", "self", ".", "orgh_3", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "self", ".", "orgh_4", "=", "nn", ".", "Linear", "(", "256", ",", "self", ".", "num_function", "[", "0", "]", "*", "3", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "35", "*", "num_functions", ",", "1000", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "1000", ",", "num_classes", ")", "\n", "\n", "self", ".", "fc_pd1", "=", "nn", ".", "Linear", "(", "1000", ",", "256", ")", "\n", "self", ".", "fc_pd2", "=", "nn", ".", "Linear", "(", "256", ",", "self", ".", "num_function", "[", "0", "]", ")", "\n", "\n", "self", ".", "batchnorm_h_0", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "batchnorm_h_1", "=", "nn", ".", "BatchNorm1d", "(", "4096", ")", "\n", "self", ".", "batchnorm_h_2", "=", "nn", ".", "BatchNorm1d", "(", "4096", ")", "\n", "self", ".", "batchnorm_h_3", "=", "nn", ".", "BatchNorm1d", "(", "4096", ")", "\n", "\n", "self", ".", "batchnorm_org_h_0", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "batchnorm_org_h_1", "=", "nn", ".", "BatchNorm1d", "(", "1024", ")", "\n", "self", ".", "batchnorm_org_h_2", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "batchnorm_org_h_3", "=", "nn", ".", "BatchNorm1d", "(", "256", ")", "\n", "\n", "self", ".", "drop0", "=", "nn", ".", "Dropout", "(", "p", "=", "0.0", ")", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "p", "=", "0.0", ")", "\n", "self", ".", "drop2", "=", "nn", ".", "Dropout", "(", "p", "=", "0.0", ")", "\n", "self", ".", "drop3", "=", "nn", ".", "Dropout", "(", "p", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.model.Shape3DModel.forward": [[59, 216], ["model.Shape3DModel.resnet_h", "model.Shape3DModel.drop1", "model.Shape3DModel.drop2", "model.Shape3DModel.drop3", "model.Shape3DModel.gen_paramsh_4", "net_params_B.view.view.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "model.Shape3DModel.forward._gen_polycoeff_center"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img_H", ")", ":", "\n", "\n", "        ", "def", "_pd_full", "(", "netcoeff", ",", "R", ")", ":", "\n", "            ", "'''\n            netcoeff: (batch, 55, num_functions)\n            R : (batch, num_functions)\n            '''", "\n", "#### generate symm-matrix B", "\n", "B", "=", "torch", ".", "zeros", "(", "(", "netcoeff", ".", "shape", "[", "0", "]", "*", "netcoeff", ".", "shape", "[", "2", "]", ",", "10", ",", "10", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "triu_idcs", "=", "torch", ".", "triu_indices", "(", "row", "=", "10", ",", "col", "=", "10", ",", "offset", "=", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "B", "[", ":", ",", "triu_idcs", "[", "0", "]", ",", "triu_idcs", "[", "1", "]", "]", "=", "netcoeff", ".", "reshape", "(", "-", "1", ",", "55", ")", "# vector to upper triangular matrix", "\n", "B", "[", ":", ",", "triu_idcs", "[", "1", "]", ",", "triu_idcs", "[", "0", "]", "]", "=", "netcoeff", ".", "reshape", "(", "-", "1", ",", "55", ")", "# B: symm. matrix", "\n", "\n", "#### generate A_10x10 from symm-matrix B", "\n", "A", "=", "torch", ".", "bmm", "(", "B", ",", "B", ")", "# A = B**2  // A: symm. positive definite (batch*num_funcs, 6,6)", "\n", "A", ".", "add_", "(", "torch", ".", "eye", "(", "10", ",", "device", "=", "self", ".", "device", ")", "/", "10000", ")", "# for stability", "\n", "A", "=", "A", ".", "reshape", "(", "netcoeff", ".", "shape", "[", "0", "]", ",", "netcoeff", ".", "shape", "[", "2", "]", ",", "10", ",", "10", ")", "# (batch, num_funcs, 6, 6)", "\n", "A", "=", "A", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# (batch, 6, 6, num_funcs)", "\n", "\n", "#### add boundary R ", "\n", "A", "[", ":", ",", "0", ",", "0", ",", ":", "]", "=", "A", "[", ":", ",", "0", ",", "0", ",", ":", "]", "-", "R", "\n", "A", "[", ":", ",", "4", ",", "4", ",", ":", "]", "=", "A", "[", ":", ",", "4", ",", "4", ",", ":", "]", "+", "1", "\n", "A", "[", ":", ",", "5", ",", "5", ",", ":", "]", "=", "A", "[", ":", ",", "5", ",", "5", ",", ":", "]", "+", "1", "\n", "A", "[", ":", ",", "6", ",", "6", ",", ":", "]", "=", "A", "[", ":", ",", "6", ",", "6", ",", ":", "]", "+", "1", "\n", "\n", "#### generate polynomial coefficent from matrix A_10x10", "\n", "# order of v: [1, z, y, x, x^2, y^2, z^2, xy, yz, xz] -> vAv'", "\n", "# order of pcoeff: [1, z, z^2, z^3, y, yz, yz^2, y^2, y^2z, y^3, x, xz, xz^2, xy, xyz, xy^2, x^2, x^2z, x^2y, x^3,", "\n", "#                   z^4, yz^3, y^2z^2, y^3z, y^4, xz^3, xyz^2, xy^2z, xy^3, x^2z^2, x^2yz, x^2y^2, x^3z, x^3y, x^4]", "\n", "pcoeff", "=", "torch", ".", "zeros", "(", "(", "netcoeff", ".", "shape", "[", "0", "]", ",", "35", ",", "netcoeff", ".", "shape", "[", "2", "]", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "pcoeff", "[", ":", ",", "0", ",", ":", "]", "=", "A", "[", ":", ",", "0", ",", "0", ",", ":", "]", "# 1", "\n", "pcoeff", "[", ":", ",", "1", ",", ":", "]", "=", "A", "[", ":", ",", "0", ",", "1", ",", ":", "]", "+", "A", "[", ":", ",", "1", ",", "0", ",", ":", "]", "# z", "\n", "pcoeff", "[", ":", ",", "2", ",", ":", "]", "=", "A", "[", ":", ",", "0", ",", "6", ",", ":", "]", "+", "A", "[", ":", ",", "6", ",", "0", ",", ":", "]", "+", "A", "[", ":", ",", "1", ",", "1", ",", ":", "]", "# z^2", "\n", "pcoeff", "[", ":", ",", "3", ",", ":", "]", "=", "A", "[", ":", ",", "1", ",", "6", ",", ":", "]", "+", "A", "[", ":", ",", "6", ",", "1", ",", ":", "]", "# z^3", "\n", "pcoeff", "[", ":", ",", "4", ",", ":", "]", "=", "A", "[", ":", ",", "0", ",", "2", ",", ":", "]", "+", "A", "[", ":", ",", "2", ",", "0", ",", ":", "]", "# y", "\n", "pcoeff", "[", ":", ",", "5", ",", ":", "]", "=", "A", "[", ":", ",", "1", ",", "2", ",", ":", "]", "+", "A", "[", ":", ",", "2", ",", "1", ",", ":", "]", "+", "A", "[", ":", ",", "0", ",", "8", ",", ":", "]", "+", "A", "[", ":", ",", "8", ",", "0", ",", ":", "]", "# yz", "\n", "pcoeff", "[", ":", ",", "6", ",", ":", "]", "=", "A", "[", ":", ",", "2", ",", "6", ",", ":", "]", "+", "A", "[", ":", ",", "6", ",", "2", ",", ":", "]", "+", "A", "[", ":", ",", "1", ",", "8", ",", ":", "]", "+", "A", "[", ":", ",", "8", ",", "1", ",", ":", "]", "# yz^2", "\n", "pcoeff", "[", ":", ",", "7", ",", ":", "]", "=", "A", "[", ":", ",", "0", ",", "5", ",", ":", "]", "+", "A", "[", ":", ",", "5", ",", "0", ",", ":", "]", "+", "A", "[", ":", ",", "2", ",", "2", ",", ":", "]", "# y^2", "\n", "pcoeff", "[", ":", ",", "8", ",", ":", "]", "=", "A", "[", ":", ",", "1", ",", "5", ",", ":", "]", "+", "A", "[", ":", ",", "5", ",", "1", ",", ":", "]", "+", "A", "[", ":", ",", "2", ",", "8", ",", ":", "]", "+", "A", "[", ":", ",", "8", ",", "2", ",", ":", "]", "# y^2z", "\n", "pcoeff", "[", ":", ",", "9", ",", ":", "]", "=", "A", "[", ":", ",", "2", ",", "5", ",", ":", "]", "+", "A", "[", ":", ",", "5", ",", "2", ",", ":", "]", "# y^3", "\n", "pcoeff", "[", ":", ",", "10", ",", ":", "]", "=", "A", "[", ":", ",", "0", ",", "3", ",", ":", "]", "+", "A", "[", ":", ",", "3", ",", "0", ",", ":", "]", "# x", "\n", "pcoeff", "[", ":", ",", "11", ",", ":", "]", "=", "A", "[", ":", ",", "1", ",", "3", ",", ":", "]", "+", "A", "[", ":", ",", "3", ",", "1", ",", ":", "]", "+", "A", "[", ":", ",", "0", ",", "9", ",", ":", "]", "+", "A", "[", ":", ",", "9", ",", "0", ",", ":", "]", "# xz", "\n", "pcoeff", "[", ":", ",", "12", ",", ":", "]", "=", "A", "[", ":", ",", "3", ",", "6", ",", ":", "]", "+", "A", "[", ":", ",", "6", ",", "3", ",", ":", "]", "+", "A", "[", ":", ",", "1", ",", "9", ",", ":", "]", "+", "A", "[", ":", ",", "9", ",", "1", ",", ":", "]", "# xz^2", "\n", "pcoeff", "[", ":", ",", "13", ",", ":", "]", "=", "A", "[", ":", ",", "2", ",", "3", ",", ":", "]", "+", "A", "[", ":", ",", "3", ",", "2", ",", ":", "]", "+", "A", "[", ":", ",", "0", ",", "7", ",", ":", "]", "+", "A", "[", ":", ",", "7", ",", "0", ",", ":", "]", "# xy", "\n", "pcoeff", "[", ":", ",", "14", ",", ":", "]", "=", "A", "[", ":", ",", "1", ",", "7", ",", ":", "]", "+", "A", "[", ":", ",", "7", ",", "1", ",", ":", "]", "+", "A", "[", ":", ",", "2", ",", "9", ",", ":", "]", "+", "A", "[", ":", ",", "9", ",", "2", ",", ":", "]", "+", "A", "[", ":", ",", "3", ",", "8", ",", ":", "]", "+", "A", "[", ":", ",", "8", ",", "3", ",", ":", "]", "# xyz", "\n", "pcoeff", "[", ":", ",", "15", ",", ":", "]", "=", "A", "[", ":", ",", "3", ",", "5", ",", ":", "]", "+", "A", "[", ":", ",", "5", ",", "3", ",", ":", "]", "+", "A", "[", ":", ",", "2", ",", "7", ",", ":", "]", "+", "A", "[", ":", ",", "7", ",", "2", ",", ":", "]", "# xy^2", "\n", "pcoeff", "[", ":", ",", "16", ",", ":", "]", "=", "A", "[", ":", ",", "0", ",", "4", ",", ":", "]", "+", "A", "[", ":", ",", "4", ",", "0", ",", ":", "]", "+", "A", "[", ":", ",", "3", ",", "3", ",", ":", "]", "# x^2", "\n", "pcoeff", "[", ":", ",", "17", ",", ":", "]", "=", "A", "[", ":", ",", "1", ",", "4", ",", ":", "]", "+", "A", "[", ":", ",", "4", ",", "1", ",", ":", "]", "+", "A", "[", ":", ",", "3", ",", "9", ",", ":", "]", "+", "A", "[", ":", ",", "9", ",", "3", ",", ":", "]", "# x^2z", "\n", "pcoeff", "[", ":", ",", "18", ",", ":", "]", "=", "A", "[", ":", ",", "2", ",", "4", ",", ":", "]", "+", "A", "[", ":", ",", "4", ",", "2", ",", ":", "]", "+", "A", "[", ":", ",", "3", ",", "7", ",", ":", "]", "+", "A", "[", ":", ",", "7", ",", "3", ",", ":", "]", "# x^2y", "\n", "pcoeff", "[", ":", ",", "19", ",", ":", "]", "=", "A", "[", ":", ",", "3", ",", "4", ",", ":", "]", "+", "A", "[", ":", ",", "4", ",", "3", ",", ":", "]", "# x^3", "\n", "pcoeff", "[", ":", ",", "20", ",", ":", "]", "=", "A", "[", ":", ",", "6", ",", "6", ",", ":", "]", "# z^4", "\n", "pcoeff", "[", ":", ",", "21", ",", ":", "]", "=", "A", "[", ":", ",", "6", ",", "8", ",", ":", "]", "+", "A", "[", ":", ",", "8", ",", "6", ",", ":", "]", "# yz^3", "\n", "pcoeff", "[", ":", ",", "22", ",", ":", "]", "=", "A", "[", ":", ",", "5", ",", "6", ",", ":", "]", "+", "A", "[", ":", ",", "6", ",", "5", ",", ":", "]", "+", "A", "[", ":", ",", "8", ",", "8", ",", ":", "]", "# y^2z^2", "\n", "pcoeff", "[", ":", ",", "23", ",", ":", "]", "=", "A", "[", ":", ",", "5", ",", "8", ",", ":", "]", "+", "A", "[", ":", ",", "8", ",", "5", ",", ":", "]", "# y^3z", "\n", "pcoeff", "[", ":", ",", "24", ",", ":", "]", "=", "A", "[", ":", ",", "5", ",", "5", ",", ":", "]", "# y^4", "\n", "pcoeff", "[", ":", ",", "25", ",", ":", "]", "=", "A", "[", ":", ",", "6", ",", "9", ",", ":", "]", "+", "A", "[", ":", ",", "9", ",", "6", ",", ":", "]", "# xz^3", "\n", "pcoeff", "[", ":", ",", "26", ",", ":", "]", "=", "A", "[", ":", ",", "6", ",", "7", ",", ":", "]", "+", "A", "[", ":", ",", "7", ",", "6", ",", ":", "]", "+", "A", "[", ":", ",", "8", ",", "9", ",", ":", "]", "+", "A", "[", ":", ",", "9", ",", "8", ",", ":", "]", "# xyz^2", "\n", "pcoeff", "[", ":", ",", "27", ",", ":", "]", "=", "A", "[", ":", ",", "5", ",", "9", ",", ":", "]", "+", "A", "[", ":", ",", "9", ",", "5", ",", ":", "]", "+", "A", "[", ":", ",", "7", ",", "8", ",", ":", "]", "+", "A", "[", ":", ",", "8", ",", "7", ",", ":", "]", "# xy^2z", "\n", "pcoeff", "[", ":", ",", "28", ",", ":", "]", "=", "A", "[", ":", ",", "5", ",", "7", ",", ":", "]", "+", "A", "[", ":", ",", "7", ",", "5", ",", ":", "]", "# xy^3", "\n", "pcoeff", "[", ":", ",", "29", ",", ":", "]", "=", "A", "[", ":", ",", "4", ",", "6", ",", ":", "]", "+", "A", "[", ":", ",", "6", ",", "4", ",", ":", "]", "+", "A", "[", ":", ",", "9", ",", "9", ",", ":", "]", "# x^2z^2", "\n", "pcoeff", "[", ":", ",", "30", ",", ":", "]", "=", "A", "[", ":", ",", "4", ",", "8", ",", ":", "]", "+", "A", "[", ":", ",", "8", ",", "4", ",", ":", "]", "+", "A", "[", ":", ",", "7", ",", "9", ",", ":", "]", "+", "A", "[", ":", ",", "9", ",", "7", ",", ":", "]", "# x^2yz", "\n", "pcoeff", "[", ":", ",", "31", ",", ":", "]", "=", "A", "[", ":", ",", "4", ",", "5", ",", ":", "]", "+", "A", "[", ":", ",", "5", ",", "4", ",", ":", "]", "+", "A", "[", ":", ",", "7", ",", "7", ",", ":", "]", "# x^2y^2", "\n", "pcoeff", "[", ":", ",", "32", ",", ":", "]", "=", "A", "[", ":", ",", "4", ",", "9", ",", ":", "]", "+", "A", "[", ":", ",", "9", ",", "4", ",", ":", "]", "# x^3z", "\n", "pcoeff", "[", ":", ",", "33", ",", ":", "]", "=", "A", "[", ":", ",", "4", ",", "7", ",", ":", "]", "+", "A", "[", ":", ",", "7", ",", "4", ",", ":", "]", "# x^3y", "\n", "pcoeff", "[", ":", ",", "34", ",", ":", "]", "=", "A", "[", ":", ",", "4", ",", "4", ",", ":", "]", "# x^4", "\n", "\n", "return", "pcoeff", ",", "A", "\n", "\n", "", "def", "_gen_polycoeff_center", "(", "net_params", ",", "origins", ")", ":", "\n", "            ", "'''\n            net_params: (batch, 35, num_functions)\n            origins : (batch, 3, num_functions)\n            '''", "\n", "polycoeff_center", "=", "torch", ".", "zeros_like", "(", "net_params", ")", "\n", "polycoeff_center", "[", ":", ",", "0", ",", ":", "]", "=", "net_params", "[", ":", ",", "0", ",", ":", "]", "-", "net_params", "[", ":", ",", "1", ",", ":", "]", "*", "origins", "[", ":", ",", "2", ",", ":", "]", "+", "net_params", "[", ":", ",", "2", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "-", "net_params", "[", ":", ",", "3", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "3", ")", "-", "net_params", "[", ":", ",", "4", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "5", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "6", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "7", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "-", "net_params", "[", ":", ",", "8", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "-", "net_params", "[", ":", ",", "9", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "3", ")", "-", "net_params", "[", ":", ",", "10", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "11", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "12", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "+", "net_params", "[", ":", ",", "13", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "14", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "15", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "+", "net_params", "[", ":", ",", "16", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "-", "net_params", "[", ":", ",", "17", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "18", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "19", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "3", ")", "+", "net_params", "[", ":", ",", "20", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "4", ")", "+", "net_params", "[", ":", ",", "21", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "3", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "22", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "+", "net_params", "[", ":", ",", "23", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "3", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "24", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "4", ")", "+", "net_params", "[", ":", ",", "25", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "3", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "26", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "27", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "28", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "3", ")", "+", "net_params", "[", ":", ",", "29", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "+", "net_params", "[", ":", ",", "30", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "31", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "+", "net_params", "[", ":", ",", "32", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "3", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "33", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "3", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "34", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "4", ")", "\n", "polycoeff_center", "[", ":", ",", "1", ",", ":", "]", "=", "net_params", "[", ":", ",", "1", ",", ":", "]", "-", "2", "*", "net_params", "[", ":", ",", "2", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "+", "3", "*", "net_params", "[", ":", ",", "3", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "-", "net_params", "[", ":", ",", "5", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "2", "*", "net_params", "[", ":", ",", "6", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "8", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "-", "net_params", "[", ":", ",", "11", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "2", "*", "net_params", "[", ":", ",", "12", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "14", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "17", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "-", "4", "*", "net_params", "[", ":", ",", "20", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "3", ")", "-", "3", "*", "net_params", "[", ":", ",", "21", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "2", "*", "net_params", "[", ":", ",", "22", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "-", "net_params", "[", ":", ",", "23", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "3", ")", "-", "3", "*", "net_params", "[", ":", ",", "25", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "-", "2", "*", "net_params", "[", ":", ",", "26", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "27", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "30", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "32", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "3", ")", "-", "2", "*", "net_params", "[", ":", ",", "29", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "\n", "polycoeff_center", "[", ":", ",", "2", ",", ":", "]", "=", "net_params", "[", ":", ",", "2", ",", ":", "]", "-", "3", "*", "net_params", "[", ":", ",", "3", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "6", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "12", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "6", "*", "net_params", "[", ":", ",", "20", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "+", "3", "*", "net_params", "[", ":", ",", "21", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "22", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "+", "3", "*", "net_params", "[", ":", ",", "25", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "26", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "29", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "\n", "polycoeff_center", "[", ":", ",", "3", ",", ":", "]", "=", "net_params", "[", ":", ",", "3", ",", ":", "]", "-", "4", "*", "net_params", "[", ":", ",", "20", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "21", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "25", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "polycoeff_center", "[", ":", ",", "4", ",", ":", "]", "=", "net_params", "[", ":", ",", "4", ",", ":", "]", "-", "net_params", "[", ":", ",", "5", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "6", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "-", "2", "*", "net_params", "[", ":", ",", "7", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "2", "*", "net_params", "[", ":", ",", "8", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "3", "*", "net_params", "[", ":", ",", "9", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "-", "net_params", "[", ":", ",", "13", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "14", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "+", "2", "*", "net_params", "[", ":", ",", "15", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "18", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "-", "net_params", "[", ":", ",", "21", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "3", ")", "-", "2", "*", "net_params", "[", ":", ",", "22", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "3", "*", "net_params", "[", ":", ",", "23", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "-", "4", "*", "net_params", "[", ":", ",", "24", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "3", ")", "-", "net_params", "[", ":", ",", "26", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "-", "2", "*", "net_params", "[", ":", ",", "27", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "-", "3", "*", "net_params", "[", ":", ",", "28", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "30", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "33", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "3", ")", "-", "2", "*", "net_params", "[", ":", ",", "31", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "\n", "polycoeff_center", "[", ":", ",", "5", ",", ":", "]", "=", "net_params", "[", ":", ",", "5", ",", ":", "]", "-", "2", "*", "net_params", "[", ":", ",", "6", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "2", "*", "net_params", "[", ":", ",", "8", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "14", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "3", "*", "net_params", "[", ":", ",", "21", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "+", "4", "*", "net_params", "[", ":", ",", "22", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "3", "*", "net_params", "[", ":", ",", "23", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "+", "2", "*", "net_params", "[", ":", ",", "26", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "2", "*", "net_params", "[", ":", ",", "27", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "30", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "\n", "polycoeff_center", "[", ":", ",", "6", ",", ":", "]", "=", "net_params", "[", ":", ",", "6", ",", ":", "]", "-", "3", "*", "net_params", "[", ":", ",", "21", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "2", "*", "net_params", "[", ":", ",", "22", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "26", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "polycoeff_center", "[", ":", ",", "7", ",", ":", "]", "=", "net_params", "[", ":", ",", "7", ",", ":", "]", "-", "net_params", "[", ":", ",", "8", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "3", "*", "net_params", "[", ":", ",", "9", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "15", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "22", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "+", "3", "*", "net_params", "[", ":", ",", "23", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "6", "*", "net_params", "[", ":", ",", "24", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "+", "net_params", "[", ":", ",", "27", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "3", "*", "net_params", "[", ":", ",", "28", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "31", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "\n", "polycoeff_center", "[", ":", ",", "8", ",", ":", "]", "=", "net_params", "[", ":", ",", "8", ",", ":", "]", "-", "2", "*", "net_params", "[", ":", ",", "22", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "3", "*", "net_params", "[", ":", ",", "23", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "27", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "polycoeff_center", "[", ":", ",", "9", ",", ":", "]", "=", "net_params", "[", ":", ",", "9", ",", ":", "]", "-", "net_params", "[", ":", ",", "23", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "4", "*", "net_params", "[", ":", ",", "24", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "28", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "polycoeff_center", "[", ":", ",", "10", ",", ":", "]", "=", "net_params", "[", ":", ",", "10", ",", ":", "]", "-", "net_params", "[", ":", ",", "11", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "12", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "-", "net_params", "[", ":", ",", "13", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "14", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "15", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "-", "2", "*", "net_params", "[", ":", ",", "16", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "2", "*", "net_params", "[", ":", ",", "17", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "+", "2", "*", "net_params", "[", ":", ",", "18", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "3", "*", "net_params", "[", ":", ",", "19", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "-", "net_params", "[", ":", ",", "25", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "3", ")", "-", "net_params", "[", ":", ",", "26", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "27", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "-", "net_params", "[", ":", ",", "28", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "3", ")", "-", "2", "*", "net_params", "[", ":", ",", "29", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "-", "2", "*", "net_params", "[", ":", ",", "30", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "-", "2", "*", "net_params", "[", ":", ",", "31", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "-", "3", "*", "net_params", "[", ":", ",", "32", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "4", "*", "net_params", "[", ":", ",", "34", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "3", ")", "-", "3", "*", "net_params", "[", ":", ",", "33", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "\n", "polycoeff_center", "[", ":", ",", "11", ",", ":", "]", "=", "net_params", "[", ":", ",", "11", ",", ":", "]", "-", "2", "*", "net_params", "[", ":", ",", "12", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "14", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "2", "*", "net_params", "[", ":", ",", "17", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "3", "*", "net_params", "[", ":", ",", "25", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "+", "2", "*", "net_params", "[", ":", ",", "26", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "27", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "+", "4", "*", "net_params", "[", ":", ",", "29", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "2", "*", "net_params", "[", ":", ",", "30", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "3", "*", "net_params", "[", ":", ",", "32", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "\n", "polycoeff_center", "[", ":", ",", "12", ",", ":", "]", "=", "net_params", "[", ":", ",", "12", ",", ":", "]", "-", "3", "*", "net_params", "[", ":", ",", "25", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "26", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "2", "*", "net_params", "[", ":", ",", "29", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "polycoeff_center", "[", ":", ",", "13", ",", ":", "]", "=", "net_params", "[", ":", ",", "13", ",", ":", "]", "-", "net_params", "[", ":", ",", "14", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "2", "*", "net_params", "[", ":", ",", "15", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "2", "*", "net_params", "[", ":", ",", "18", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "26", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "+", "2", "*", "net_params", "[", ":", ",", "27", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "3", "*", "net_params", "[", ":", ",", "28", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "+", "2", "*", "net_params", "[", ":", ",", "30", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "4", "*", "net_params", "[", ":", ",", "31", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "3", "*", "net_params", "[", ":", ",", "33", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "\n", "polycoeff_center", "[", ":", ",", "14", ",", ":", "]", "=", "net_params", "[", ":", ",", "14", ",", ":", "]", "-", "2", "*", "net_params", "[", ":", ",", "26", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "2", "*", "net_params", "[", ":", ",", "27", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "2", "*", "net_params", "[", ":", ",", "30", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "polycoeff_center", "[", ":", ",", "15", ",", ":", "]", "=", "net_params", "[", ":", ",", "15", ",", ":", "]", "-", "net_params", "[", ":", ",", "27", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "3", "*", "net_params", "[", ":", ",", "28", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "2", "*", "net_params", "[", ":", ",", "31", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "polycoeff_center", "[", ":", ",", "16", ",", ":", "]", "=", "net_params", "[", ":", ",", "16", ",", ":", "]", "-", "net_params", "[", ":", ",", "17", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "18", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "3", "*", "net_params", "[", ":", ",", "19", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "29", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", "**", "2", ")", "+", "net_params", "[", ":", ",", "30", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "+", "net_params", "[", ":", ",", "31", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", "**", "2", ")", "+", "3", "*", "net_params", "[", ":", ",", "32", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "3", "*", "net_params", "[", ":", ",", "33", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "+", "6", "*", "net_params", "[", ":", ",", "34", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", "**", "2", ")", "\n", "polycoeff_center", "[", ":", ",", "17", ",", ":", "]", "=", "net_params", "[", ":", ",", "17", ",", ":", "]", "-", "1", "*", "net_params", "[", ":", ",", "29", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "30", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "3", "*", "net_params", "[", ":", ",", "32", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "polycoeff_center", "[", ":", ",", "18", ",", ":", "]", "=", "net_params", "[", ":", ",", "18", ",", ":", "]", "-", "net_params", "[", ":", ",", "30", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "2", "*", "net_params", "[", ":", ",", "31", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "3", "*", "net_params", "[", ":", ",", "33", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "polycoeff_center", "[", ":", ",", "19", ",", ":", "]", "=", "net_params", "[", ":", ",", "19", ",", ":", "]", "-", "net_params", "[", ":", ",", "32", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "2", ",", ":", "]", ")", "-", "net_params", "[", ":", ",", "33", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "1", ",", ":", "]", ")", "-", "4", "*", "net_params", "[", ":", ",", "34", ",", ":", "]", "*", "(", "origins", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "polycoeff_center", "[", ":", ",", "20", ":", ",", ":", "]", "=", "net_params", "[", ":", ",", "20", ":", ",", ":", "]", "# origin does not effect on the highest term", "\n", "\n", "return", "polycoeff_center", "\n", "\n", "#### Format: (N, C, H, W)", "\n", "", "feature_resnet", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "resnet_h", "(", "img_H", ")", "\n", "\n", "#### generate the elements for symm-matrix B", "\n", "net_params_B", "=", "self", ".", "drop1", "(", "F", ".", "relu", "(", "self", ".", "batchnorm_h_1", "(", "self", ".", "gen_paramsh_1", "(", "feature_resnet", ")", ")", ")", ")", "\n", "net_params_B", "=", "self", ".", "drop2", "(", "F", ".", "relu", "(", "self", ".", "batchnorm_h_2", "(", "self", ".", "gen_paramsh_2", "(", "net_params_B", ")", ")", ")", ")", "\n", "net_params_B", "=", "self", ".", "drop3", "(", "F", ".", "relu", "(", "self", ".", "batchnorm_h_3", "(", "self", ".", "gen_paramsh_3", "(", "net_params_B", ")", ")", ")", ")", "\n", "net_params_B", "=", "self", ".", "gen_paramsh_4", "(", "net_params_B", ")", "\n", "net_params_B", "=", "net_params_B", ".", "view", "(", "-", "1", ",", "self", ".", "num_param", ",", "self", ".", "num_function", "[", "0", "]", ")", "# (batch, 55, num_functions)", "\n", "\n", "#### generate boundary R", "\n", "boundary_R", "=", "torch", ".", "relu", "(", "self", ".", "fc_pd1", "(", "feature_resnet", ")", ")", "\n", "boundary_R", "=", "torch", ".", "sigmoid", "(", "self", ".", "fc_pd2", "(", "boundary_R", ")", ")", "# (batch, num_functions)", "\n", "\n", "#### generate \"polynomial coefficient\" from symm-matrix B and boundary R", "\n", "net_params", "=", "[", "]", "\n", "A_10x10", "=", "[", "]", "\n", "for", "f", "in", "range", "(", "self", ".", "num_function", "[", "0", "]", ")", ":", "\n", "           ", "coeff0", ",", "a0", "=", "_pd_full", "(", "net_params_B", "[", ":", ",", ":", ",", "f", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "boundary_R", "[", ":", ",", "f", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "net_params", ".", "append", "(", "coeff0", ")", "\n", "A_10x10", ".", "append", "(", "a0", ")", "\n", "", "net_params", "=", "torch", ".", "cat", "(", "net_params", ",", "dim", "=", "-", "1", ")", "# (batch, 35, num_functions)", "\n", "A_10x10", "=", "torch", ".", "cat", "(", "A_10x10", ",", "dim", "=", "-", "1", ")", "# (batch, 10, 10, num_functions)", "\n", "\n", "#### generate logits", "\n", "#logits = F.relu(self.fc1(net_params.view(-1, 35*self.num_functions)))", "\n", "#logits = self.fc2(logits)", "\n", "\n", "#### generate centers", "\n", "origins", "=", "F", ".", "relu", "(", "self", ".", "orgh_1", "(", "feature_resnet", ")", ")", "\n", "origins", "=", "F", ".", "relu", "(", "self", ".", "orgh_2", "(", "origins", ")", ")", "\n", "origins", "=", "F", ".", "relu", "(", "self", ".", "orgh_3", "(", "origins", ")", ")", "\n", "origins", "=", "torch", ".", "tanh", "(", "self", ".", "orgh_4", "(", "origins", ")", ")", "\n", "origins", "=", "torch", ".", "reshape", "(", "origins", ",", "(", "-", "1", ",", "3", ",", "self", ".", "num_function", "[", "0", "]", ")", ")", "# (batch, 3, num_functions)", "\n", "\n", "#### geneate coefficients that reflects centers", "\n", "polycoeff_center", "=", "_gen_polycoeff_center", "(", "net_params", ",", "origins", ")", "# (batch, 35, num_functions)", "\n", "\n", "return", "polycoeff_center", ",", "origins", ",", "A_10x10", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.metric.IOU": [[6, 20], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.sum", "torch.sum", "torch.sum", "torch.true_divide", "torch.mean", "torch.true_divide"], "function", ["None"], ["def", "IOU", "(", "PI_value_inout", ",", "target", ",", "per_class", "=", "True", ")", ":", "\n", "# per batch", "\n", "    ", "ininA", "=", "torch", ".", "zeros_like", "(", "target", "[", "'numinside'", "]", ")", "\n", "inoutB", "=", "torch", ".", "zeros_like", "(", "target", "[", "'numinside'", "]", ")", "\n", "outinC", "=", "torch", ".", "zeros_like", "(", "target", "[", "'numinside'", "]", ")", "\n", "for", "i", "in", "range", "(", "target", "[", "'numinside'", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ininA", "[", "i", "]", "=", "torch", ".", "sum", "(", "PI_value_inout", "[", "i", ",", ":", "target", "[", "'numinside'", "]", "[", "i", "]", "]", "<=", "0", ",", "dim", "=", "0", ")", "# (batch)", "\n", "inoutB", "[", "i", "]", "=", "torch", ".", "sum", "(", "PI_value_inout", "[", "i", ",", ":", "target", "[", "'numinside'", "]", "[", "i", "]", "]", ">", "0", ",", "dim", "=", "0", ")", "# estimated outside but actually inside", "\n", "outinC", "[", "i", "]", "=", "torch", ".", "sum", "(", "PI_value_inout", "[", "i", ",", "target", "[", "'numinside'", "]", "[", "i", "]", ":", "]", "<=", "0", ",", "dim", "=", "0", ")", "# (batch)", "\n", "\n", "", "if", "per_class", ":", "\n", "        ", "return", "torch", ".", "true_divide", "(", "ininA", ",", "ininA", "+", "inoutB", "+", "outinC", ")", "# IOU per batch", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "torch", ".", "true_divide", "(", "ininA", ",", "ininA", "+", "inoutB", "+", "outinC", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.metric.fscore": [[22, 48], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.zeros", "torch.true_divide", "torch.zeros", "torch.true_divide", "torch.zeros", "torch.sum", "torch.sum", "torch.sum", "torch.true_divide", "torch.mean"], "function", ["None"], ["", "", "def", "fscore", "(", "PI_value_inout", ",", "target", ",", "per_class", "=", "True", ")", ":", "\n", "# per batch", "\n", "    ", "ininA", "=", "torch", ".", "zeros_like", "(", "target", "[", "'numinside'", "]", ")", "\n", "inoutB", "=", "torch", ".", "zeros_like", "(", "target", "[", "'numinside'", "]", ")", "\n", "outinC", "=", "torch", ".", "zeros_like", "(", "target", "[", "'numinside'", "]", ")", "\n", "for", "i", "in", "range", "(", "target", "[", "'numinside'", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ininA", "[", "i", "]", "=", "torch", ".", "sum", "(", "PI_value_inout", "[", "i", ",", ":", "target", "[", "'numinside'", "]", "[", "i", "]", "]", "<=", "0", ",", "dim", "=", "0", ")", "# (batch)", "\n", "inoutB", "[", "i", "]", "=", "torch", ".", "sum", "(", "PI_value_inout", "[", "i", ",", ":", "target", "[", "'numinside'", "]", "[", "i", "]", "]", ">", "0", ",", "dim", "=", "0", ")", "# estimated outside but actually inside", "\n", "outinC", "[", "i", "]", "=", "torch", ".", "sum", "(", "PI_value_inout", "[", "i", ",", "target", "[", "'numinside'", "]", "[", "i", "]", ":", "]", "<=", "0", ",", "dim", "=", "0", ")", "# (batch)", "\n", "\n", "", "precision", "=", "torch", ".", "zeros", "(", "ininA", ".", "shape", ",", "device", "=", "'cuda'", ")", "\n", "vidx_pre", "=", "ininA", "+", "outinC", ">", "0", "\n", "precision", "[", "vidx_pre", "]", "=", "torch", ".", "true_divide", "(", "ininA", "[", "vidx_pre", "]", ",", "(", "ininA", "+", "outinC", ")", "[", "vidx_pre", "]", ")", "\n", "\n", "recall", "=", "torch", ".", "zeros", "(", "ininA", ".", "shape", ",", "device", "=", "'cuda'", ")", "\n", "vidx_rec", "=", "ininA", "+", "inoutB", ">", "0", "\n", "recall", "[", "vidx_rec", "]", "=", "torch", ".", "true_divide", "(", "ininA", "[", "vidx_rec", "]", ",", "(", "ininA", "+", "inoutB", ")", "[", "vidx_rec", "]", ")", "\n", "\n", "F", "=", "torch", ".", "zeros", "(", "ininA", ".", "shape", ",", "device", "=", "'cuda'", ")", "\n", "vidx_f", "=", "precision", "+", "recall", ">", "0", "\n", "F", "[", "vidx_f", "]", "=", "2", "*", "torch", ".", "true_divide", "(", "(", "precision", "*", "recall", ")", "[", "vidx_f", "]", ",", "(", "precision", "+", "recall", ")", "[", "vidx_f", "]", ")", "\n", "\n", "if", "per_class", ":", "\n", "        ", "return", "F", "# IOU per batch", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "F", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.metric.surfaceSampling": [[50, 59], ["torch.from_numpy().to", "torch.from_numpy().unsqueeze().to", "model.loss.PI_funcs_generator", "model.loss.PI_value_generator", "torch.tanh", "torch.from_numpy", "torch.from_numpy().unsqueeze", "torch.argsort", "utils.util.gen_polynomial_orders", "torch.abs", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.PI_funcs_generator", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.loss.PI_value_generator", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.gen_polynomial_orders"], ["", "", "def", "surfaceSampling", "(", "coeff", ",", "allpoints", ")", ":", "\n", "    ", "polyorder", "=", "torch", ".", "from_numpy", "(", "gen_polynomial_orders", "(", "4", ")", ")", ".", "to", "(", "'cuda'", ")", "\n", "allpoints", "=", "torch", ".", "from_numpy", "(", "allpoints", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "'cuda'", ")", "\n", "\n", "PI_funcs", "=", "PI_funcs_generator", "(", "allpoints", ",", "coeff", ",", "polyorder", ")", "\n", "PI_value", ",", "_", "=", "PI_value_generator", "(", "torch", ".", "tanh", "(", "PI_funcs", ")", ")", "\n", "\n", "idx", "=", "torch", ".", "argsort", "(", "torch", ".", "abs", "(", "PI_value", ")", ",", "dim", "=", "1", ")", "[", ":", ",", ":", "2000", "]", "[", "0", ",", ":", ",", "0", "]", "\n", "return", "allpoints", "[", ":", ",", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.model.metric.chamfer_distance_naive": [[61, 80], ["points1.view.view", "points2.view.view", "torch.abs().sum", "[].mean", "[].mean", "torch.abs", "torch.abs().sum.min", "torch.abs().sum.min"], "function", ["None"], ["", "def", "chamfer_distance_naive", "(", "points1", ",", "points2", ")", ":", "\n", "    ", "''' Naive implementation of the Chamfer distance.\n    Args:\n        points1 (batch, num_on_points, 3)\n        points2 (batch, num_on_points, 3)\n    '''", "\n", "assert", "(", "points1", ".", "shape", "==", "points2", ".", "shape", ")", "\n", "batch_size", ",", "T", ",", "_", "=", "points1", ".", "shape", "\n", "\n", "points1", "=", "points1", ".", "view", "(", "batch_size", ",", "T", ",", "1", ",", "3", ")", "\n", "points2", "=", "points2", ".", "view", "(", "batch_size", ",", "1", ",", "T", ",", "3", ")", "\n", "\n", "distances", "=", "torch", ".", "abs", "(", "points1", "-", "points2", ")", ".", "sum", "(", "-", "1", ")", "\n", "\n", "chamfer1", "=", "distances", ".", "min", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "mean", "(", "dim", "=", "1", ")", "\n", "chamfer2", "=", "distances", ".", "min", "(", "dim", "=", "2", ")", "[", "0", "]", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "chamfer", "=", "chamfer1", "+", "chamfer2", "\n", "return", "chamfer", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.data_loader.data_loaders.Shape3DLoader.__init__": [[17, 25], ["data_loaders.Shape3DDataset", "base.BaseDataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "data_dir", ",", "metadata", ",", "point_limit", ",", "batch_size", ",", "task", ",", "shuffle", "=", "True", ",", "validation_split", "=", "0.0", ",", "num_workers", "=", "1", ",", "training", "=", "True", ")", ":", "\n", "        ", "self", ".", "metadata", "=", "metadata", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "point_limit", "=", "point_limit", "\n", "\n", "self", ".", "dataset", "=", "Shape3DDataset", "(", "self", ".", "metadata", ",", "self", ".", "data_dir", ",", "self", ".", "point_limit", ",", "task", "=", "task", ",", "transform", "=", "None", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "self", ".", "dataset", ",", "batch_size", ",", "shuffle", ",", "validation_split", ",", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.data_loader.data_loaders.Shape3DDataset.__init__": [[30, 59], ["pandas.read_csv", "numpy.array", "numpy.array", "data_loaders.Shape3DDataset._indices_generator", "numpy.load", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.data_loader.data_loaders.Shape3DDataset._indices_generator"], ["def", "__init__", "(", "self", ",", "csv_file", ",", "data_dir", ",", "point_limit", ",", "task", ",", "transform", "=", "None", ")", ":", "\n", "        ", "\"\"\" \n        csv_file: location of metadata.csv file\n        data_dir: path where the data located\n        point_limit: list of limit #points - on, out, in (in order)\n        transform: Ignore this\n        \"\"\"", "\n", "self", ".", "task", "=", "task", "\n", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "metadata", "=", "pd", ".", "read_csv", "(", "csv_file", ")", "\n", "if", "self", ".", "task", "==", "\"train\"", ":", "\n", "            ", "self", ".", "cls_sizes", "=", "np", ".", "array", "(", "metadata", "[", "'class_size'", "]", ")", "\n", "", "elif", "self", ".", "task", "==", "\"val\"", ":", "\n", "            ", "self", ".", "cls_sizes", "=", "np", ".", "array", "(", "metadata", "[", "'class_size_valid'", "]", ")", "\n", "", "elif", "self", ".", "task", "==", "\"test\"", ":", "\n", "            ", "self", ".", "cls_sizes", "=", "np", ".", "array", "(", "metadata", "[", "'class_size_test'", "]", ")", "\n", "", "self", ".", "cls_names", "=", "np", ".", "array", "(", "metadata", "[", "'class_name'", "]", ")", "\n", "self", ".", "cls_num", "=", "np", ".", "array", "(", "metadata", "[", "'class_num'", "]", ")", "\n", "\n", "\n", "self", ".", "point_limit", "=", "point_limit", "# on, out, in ", "\n", "self", ".", "indices", "=", "self", ".", "_indices_generator", "(", ")", "\n", "self", ".", "allpoints", "=", "np", ".", "load", "(", "data_dir", "+", "'newDataPoints/all.npy'", ")", "# (1,000,000 , 3)", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "\n", "self", ".", "loclist", "=", "[", "'on'", ",", "'out'", ",", "'in'", "]", "\n", "self", ".", "planelist", "=", "[", "'xy'", ",", "'yz'", ",", "'xz'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.data_loader.data_loaders.Shape3DDataset.__len__": [[60, 62], ["numpy.sum"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "self", ".", "cls_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.data_loader.data_loaders.Shape3DDataset.__getitem__": [[63, 129], ["torch.is_tensor", "str().zfill", "data_loaders.Shape3DDataset.__getitem__._image_loader"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "def", "_adjust_points", "(", "points", ",", "limit_num", ")", ":", "\n", "            ", "\"\"\" if limit_num is larger than the #points in .ply, use replace sampling \"\"\"", "\n", "idx", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "points", ".", "shape", "[", "0", "]", ")", ",", "size", "=", "limit_num", ",", "replace", "=", "(", "points", ".", "shape", "[", "0", "]", "<", "limit_num", ")", ")", "\n", "return", "points", "[", "idx", ",", ":", "]", "\n", "\n", "", "def", "_inout_points_loader", "(", "class_name", ",", "number_in_class", ")", ":", "\n", "            ", "\"\"\" Instead of saving in/out points, We save all the location of in/out points to all.npy and also save the index for inside points at `id` folder \"\"\"", "\n", "points", "=", "{", "}", "\n", "in_points_path", "=", "self", ".", "data_dir", "+", "'newDataPoints/id/'", "+", "class_name", "+", "'/'", "+", "self", ".", "task", "+", "'/'", "+", "str", "(", "number_in_class", ")", ".", "zfill", "(", "4", ")", "+", "'.npy'", "\n", "in_idx", "=", "np", ".", "load", "(", "in_points_path", ")", "\n", "\n", "spRate", "=", "10000.0", "/", "self", ".", "allpoints", ".", "shape", "[", "0", "]", "\n", "\n", "num_inpoints", "=", "int", "(", "np", ".", "round", "(", "in_idx", ".", "shape", "[", "0", "]", "*", "spRate", ")", ")", "\n", "num_outpoints", "=", "10000", "-", "num_inpoints", "\n", "assert", "num_inpoints", ">", "0", "\n", "assert", "num_outpoints", ">", "0", "\n", "\n", "points", "[", "'in'", "]", "=", "_adjust_points", "(", "self", ".", "allpoints", "[", "in_idx", ",", ":", "]", ",", "num_inpoints", ")", "\n", "points", "[", "'out'", "]", "=", "_adjust_points", "(", "np", ".", "delete", "(", "self", ".", "allpoints", ",", "in_idx", ",", "axis", "=", "0", ")", ",", "num_outpoints", ")", "\n", "\n", "return", "points", ",", "num_inpoints", "\n", "\n", "", "def", "_on_points_loader", "(", "class_name", ",", "number_in_class", ")", ":", "\n", "            ", "points", "=", "{", "}", "\n", "in_points_path", "=", "self", ".", "data_dir", "+", "'newDataPoints/on_10/'", "+", "class_name", "+", "'/'", "+", "self", ".", "task", "+", "'/'", "+", "str", "(", "number_in_class", ")", ".", "zfill", "(", "4", ")", "+", "'.npy'", "\n", "on_points_normal", "=", "_adjust_points", "(", "np", ".", "load", "(", "in_points_path", ")", ",", "self", ".", "point_limit", "[", "0", "]", ")", "\n", "points", "[", "'on'", "]", "=", "on_points_normal", "[", ":", ",", "0", ":", "3", "]", "\n", "normal", "=", "on_points_normal", "[", ":", ",", "3", ":", "6", "]", "\n", "return", "points", ",", "normal", "\n", "\n", "", "def", "_image_loader", "(", "class_name", ",", "number_in_class", ",", "img_rand_idx", ")", ":", "\n", "            ", "image_H", "=", "Image", ".", "open", "(", "self", ".", "data_dir", "+", "'images/img/'", "+", "class_name", "+", "'/'", "+", "self", ".", "task", "+", "'/'", "+", "str", "(", "number_in_class", ")", ".", "zfill", "(", "4", ")", "+", "'/'", "+", "str", "(", "img_rand_idx", ")", ".", "zfill", "(", "2", ")", "+", "'.png'", ")", "# (137, 137, 4)", "\n", "image_H", "=", "np", ".", "array", "(", "image_H", ")", ".", "astype", "(", "np", ".", "float32", ")", "[", "5", ":", "-", "4", ",", "5", ":", "-", "4", ",", ":", "3", "]", "\n", "return", "np", ".", "transpose", "(", "image_H", ",", "(", "2", ",", "0", ",", "1", ")", ")", "# (batch, 3, 128, 128)", "\n", "\n", "", "if", "torch", ".", "is_tensor", "(", "index", ")", ":", "\n", "            ", "index", "=", "index", ".", "tolist", "(", ")", "\n", "\n", "# select class, #data", "\n", "", "number_in_class", "=", "self", ".", "indices", "[", "index", ",", "0", "]", "\n", "class_name", "=", "str", "(", "self", ".", "indices", "[", "index", ",", "1", "]", ")", ".", "zfill", "(", "8", ")", "\n", "\n", "# loading random image", "\n", "img_rand_idx", "=", "np", ".", "random", ".", "randint", "(", "24", ",", "size", "=", "1", ")", "[", "0", "]", "# 24 random images", "\n", "image_H", "=", "_image_loader", "(", "class_name", ",", "number_in_class", ",", "img_rand_idx", ")", "\n", "if", "image_H", ".", "size", "==", "0", ":", "print", "(", "\"class:{}, num:{}\"", ".", "format", "(", "class_name", ",", "number_in_class", ")", ")", ";", "raise", "\n", "\n", "# loading points, normal vector", "\n", "inout_points", ",", "num_inpoints", "=", "_inout_points_loader", "(", "class_name", ",", "number_in_class", ")", "\n", "on_points", ",", "normal", "=", "_on_points_loader", "(", "class_name", ",", "number_in_class", ")", "\n", "if", "on_points", "[", "'on'", "]", ".", "size", "==", "0", ":", "print", "(", "\"class:{}, num:{}\"", ".", "format", "(", "class_name", ",", "number_in_class", ")", ")", ";", "raise", "\n", "if", "inout_points", "[", "'in'", "]", ".", "size", "==", "0", ":", "print", "(", "\"class:{}, num:{}\"", ".", "format", "(", "class_name", ",", "number_in_class", ")", ")", ";", "raise", "\n", "if", "inout_points", "[", "'out'", "]", ".", "size", "==", "0", ":", "print", "(", "\"class:{}, num:{}\"", ".", "format", "(", "class_name", ",", "number_in_class", ")", ")", ";", "raise", "\n", "\n", "directory", "=", "np", ".", "array", "(", "[", "int", "(", "class_name", ")", ",", "number_in_class", "]", ")", "\n", "target", "=", "{", "'onpts'", ":", "on_points", "[", "'on'", "]", ",", "\n", "'normal'", ":", "normal", ",", "\n", "'inoutpts'", ":", "np", ".", "concatenate", "(", "(", "inout_points", "[", "'in'", "]", ",", "inout_points", "[", "'out'", "]", ")", ",", "axis", "=", "0", ")", ",", "# in-out", "\n", "'numinside'", ":", "num_inpoints", ",", "# in + out = 10k", "\n", "'class_num'", ":", "self", ".", "indices", "[", "index", ",", "2", "]", ".", "astype", "(", "np", ".", "int_", ")", ",", "\n", "'directory'", ":", "directory", "# list, not Tensor", "\n", "}", "\n", "\n", "return", "image_H", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.data_loader.data_loaders.Shape3DDataset._indices_generator": [[130, 139], ["numpy.zeros", "range", "numpy.zeros.astype", "len", "numpy.arange", "sum"], "methods", ["None"], ["", "def", "_indices_generator", "(", "self", ")", ":", "\n", "        ", "indices", "=", "np", ".", "zeros", "(", "[", "sum", "(", "self", ".", "cls_sizes", ")", ",", "3", "]", ")", "\n", "c", "=", "0", "\n", "for", "ind", "in", "range", "(", "len", "(", "self", ".", "cls_sizes", ")", ")", ":", "\n", "            ", "indices", "[", "c", ":", "self", ".", "cls_sizes", "[", "ind", "]", "+", "c", ",", "0", "]", "=", "np", ".", "arange", "(", "self", ".", "cls_sizes", "[", "ind", "]", ")", "\n", "indices", "[", "c", ":", "self", ".", "cls_sizes", "[", "ind", "]", "+", "c", ",", "1", "]", "=", "self", ".", "cls_names", "[", "ind", "]", "\n", "indices", "[", "c", ":", "self", ".", "cls_sizes", "[", "ind", "]", "+", "c", ",", "2", "]", "=", "self", ".", "cls_num", "[", "ind", "]", "\n", "c", "=", "c", "+", "self", ".", "cls_sizes", "[", "ind", "]", "\n", "", "return", "indices", ".", "astype", "(", "int", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.trainer.trainer.Trainer.__init__": [[8, 19], ["base.BaseTrainer.__init__", "utils.util.MetricTracker", "utils.util.MetricTracker"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_data_loader.BaseDataLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "criterion", ",", "metric_ftns", ",", "optimizer", ",", "config", ",", "data_loader", ",", "\n", "valid_data_loader", "=", "None", ",", "lr_scheduler", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "criterion", ",", "metric_ftns", ",", "optimizer", ",", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "data_loader", "=", "data_loader", "\n", "self", ".", "valid_data_loader", "=", "valid_data_loader", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", "\n", "\n", "self", ".", "allpoints", "=", "data_loader", ".", "dataset", ".", "allpoints", "\n", "self", ".", "train_metrics", "=", "MetricTracker", "(", "'Total_loss'", ",", "'loss_pnt_on'", ",", "'loss_pnt_in'", ",", "'loss_pnt_out'", ",", "'loss_normvec'", ",", "*", "[", "m", ".", "__name__", "for", "m", "in", "self", ".", "metric_ftns", "]", ",", "writer", "=", "self", ".", "writer", ")", "\n", "self", ".", "valid_metrics", "=", "MetricTracker", "(", "'Total_loss'", ",", "'loss_pnt_on'", ",", "'loss_pnt_in'", ",", "'loss_pnt_out'", ",", "'loss_normvec'", ",", "*", "[", "m", ".", "__name__", "for", "m", "in", "self", ".", "metric_ftns", "]", ",", "writer", "=", "self", ".", "writer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.trainer.trainer.Trainer._train_epoch": [[20, 67], ["trainer.Trainer.model.train", "trainer.Trainer.train_metrics.reset", "enumerate", "trainer.Trainer.train_metrics.result", "trainer.Trainer.writer.close", "img_H.to.to.to", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.model", "trainer.Trainer.criterion", "loss.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.writer.set_step", "trainer.Trainer.train_metrics.update", "trainer.Trainer._valid_epoch", "trainer.Trainer.update", "trainer.Trainer.lr_scheduler.step", "target[].to", "loss.item", "trainer.Trainer.train_metrics.update", "trainer.Trainer.train_metrics.update", "trainer.Trainer.logger.debug", "print", "met", "int", "len", "numpy.sqrt", "trainer.Trainer._progress", "loss.item", "trainer.Trainer.items"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.reset", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.result", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.logger.visualization.TensorboardWriter.set_step", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.trainer.trainer.Trainer._valid_epoch", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.trainer.trainer.Trainer._progress"], ["", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "train_metrics", ".", "reset", "(", ")", "\n", "for", "batch_idx", ",", "(", "img_H", ",", "target", ")", "in", "enumerate", "(", "self", ".", "data_loader", ")", ":", "\n", "            ", "img_H", "=", "img_H", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "key", "in", "target", ":", "\n", "                ", "if", "target", "[", "key", "]", ".", "size", "==", "0", ":", "print", "(", "target", "[", "'directory'", "]", ")", ";", "raise", "\n", "target", "[", "key", "]", "=", "target", "[", "key", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "polycoeff", ",", "_", ",", "_", "=", "self", ".", "model", "(", "img_H", ")", "# data: images, output: (params, R, logits)", "\n", "loss", ",", "loss_valdict", ",", "PI_value_inout", "=", "self", ".", "criterion", "(", "polycoeff", ",", "target", ",", "self", ".", "config", "[", "'loss_weights'", "]", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "self", ".", "writer", ".", "set_step", "(", "(", "epoch", "-", "1", ")", "*", "len", "(", "self", ".", "data_loader", ")", "+", "batch_idx", ")", "\n", "self", ".", "train_metrics", ".", "update", "(", "'Total_loss'", ",", "loss", ".", "item", "(", ")", ")", "\n", "for", "los", "in", "loss_valdict", ":", "\n", "                ", "self", ".", "train_metrics", ".", "update", "(", "los", ",", "loss_valdict", "[", "los", "]", ")", "\n", "", "for", "met", "in", "self", ".", "metric_ftns", ":", "\n", "                ", "self", ".", "train_metrics", ".", "update", "(", "met", ".", "__name__", ",", "met", "(", "PI_value_inout", ",", "target", ",", "False", ")", ")", "\n", "\n", "", "if", "batch_idx", "%", "int", "(", "np", ".", "sqrt", "(", "self", ".", "data_loader", ".", "batch_size", ")", ")", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "debug", "(", "'Train Epoch: {} {} TotalLoss: {:.6f} = {:.6g} + {:.6g} + {:.6g}, normvec: {:.5g}'", ".", "format", "(", "\n", "epoch", ",", "\n", "self", ".", "_progress", "(", "batch_idx", ")", ",", "\n", "loss", ".", "item", "(", ")", ",", "\n", "loss_valdict", "[", "'loss_pnt_on'", "]", ",", "\n", "loss_valdict", "[", "'loss_pnt_in'", "]", ",", "\n", "loss_valdict", "[", "'loss_pnt_out'", "]", ",", "\n", "loss_valdict", "[", "'loss_normvec'", "]", "\n", ")", ")", "\n", "\n", "", "del", "img_H", ";", "del", "polycoeff", ";", "del", "logits", ";", "del", "loss", "\n", "\n", "", "log", "=", "self", ".", "train_metrics", ".", "result", "(", ")", "\n", "\n", "if", "self", ".", "valid_data_loader", "is", "not", "None", ":", "\n", "            ", "val_log", "=", "self", ".", "_valid_epoch", "(", "epoch", ")", "\n", "log", ".", "update", "(", "**", "{", "'val_'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", ")", "\n", "\n", "", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.trainer.trainer.Trainer._valid_epoch": [[69, 94], ["trainer.Trainer.model.eval", "trainer.Trainer.valid_metrics.reset", "trainer.Trainer.writer.close", "trainer.Trainer.valid_metrics.result", "torch.no_grad", "enumerate", "img_H.to.to.to", "trainer.Trainer.model", "trainer.Trainer.criterion", "trainer.Trainer.writer.set_step", "trainer.Trainer.valid_metrics.update", "target[].to", "loss.item", "trainer.Trainer.valid_metrics.update", "trainer.Trainer.valid_metrics.update", "print", "met", "len"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.reset", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.result", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.logger.visualization.TensorboardWriter.set_step", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.update"], ["", "def", "_valid_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "valid_metrics", ".", "reset", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "img_H", ",", "target", ")", "in", "enumerate", "(", "self", ".", "valid_data_loader", ")", ":", "\n", "                ", "img_H", "=", "img_H", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "key", "in", "target", ":", "\n", "                    ", "if", "target", "[", "key", "]", ".", "size", "==", "0", ":", "print", "(", "target", "[", "'directory'", "]", ")", ";", "raise", "\n", "target", "[", "key", "]", "=", "target", "[", "key", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "polycoeff", ",", "_", ",", "_", "=", "self", ".", "model", "(", "img_H", ")", "\n", "loss", ",", "loss_valdict", ",", "PI_value_inout", "=", "self", ".", "criterion", "(", "polycoeff", ",", "target", ",", "self", ".", "config", "[", "'loss_weights'", "]", ")", "\n", "\n", "self", ".", "writer", ".", "set_step", "(", "(", "epoch", "-", "1", ")", "*", "len", "(", "self", ".", "valid_data_loader", ")", "+", "batch_idx", ",", "'valid'", ")", "\n", "\n", "self", ".", "valid_metrics", ".", "update", "(", "'Total_loss'", ",", "loss", ".", "item", "(", ")", ")", "\n", "for", "los", "in", "loss_valdict", ":", "\n", "                    ", "self", ".", "valid_metrics", ".", "update", "(", "los", ",", "loss_valdict", "[", "los", "]", ")", "\n", "", "for", "met", "in", "self", ".", "metric_ftns", ":", "\n", "                    ", "self", ".", "valid_metrics", ".", "update", "(", "met", ".", "__name__", ",", "met", "(", "PI_value_inout", ",", "target", ",", "False", ")", ")", "\n", "\n", "", "del", "img_H", ";", "del", "loss", "\n", "\n", "", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "return", "self", ".", "valid_metrics", ".", "result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.trainer.trainer.Trainer._progress": [[96, 105], ["hasattr", "base.format", "len"], "methods", ["None"], ["", "def", "_progress", "(", "self", ",", "batch_idx", ")", ":", "\n", "        ", "base", "=", "'[{}/{} ({:.0f}%)]'", "\n", "if", "hasattr", "(", "self", ".", "data_loader", ",", "'n_samples'", ")", ":", "\n", "            ", "current", "=", "batch_idx", "*", "self", ".", "data_loader", ".", "batch_size", "\n", "total", "=", "self", ".", "data_loader", ".", "n_samples", "\n", "", "else", ":", "\n", "            ", "current", "=", "batch_idx", "\n", "total", "=", "len", "(", "self", ".", "data_loader", ")", "\n", "", "return", "base", ".", "format", "(", "current", ",", "total", ",", "100.0", "*", "current", "/", "total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_trainer.BaseTrainer.__init__": [[11, 50], ["config.get_logger", "base_trainer.BaseTrainer._prepare_device", "model.to", "cfg_trainer.get", "utils.logger.TensorboardWriter", "len", "torch.nn.DataParallel", "base_trainer.BaseTrainer.monitor.split", "cfg_trainer.get", "base_trainer.BaseTrainer._resume_checkpoint"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.None.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_trainer.BaseTrainer._prepare_device", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_trainer.BaseTrainer._resume_checkpoint"], ["def", "__init__", "(", "self", ",", "model", ",", "criterion", ",", "metric_ftns", ",", "optimizer", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "logger", "=", "config", ".", "get_logger", "(", "'trainer'", ",", "config", "[", "'trainer'", "]", "[", "'verbosity'", "]", ")", "\n", "\n", "# setup GPU device if available, move model into configured device", "\n", "self", ".", "device", ",", "device_ids", "=", "self", ".", "_prepare_device", "(", "config", "[", "'n_gpu'", "]", ")", "\n", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "len", "(", "device_ids", ")", ">", "1", ":", "\n", "            ", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "\n", "", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "metric_ftns", "=", "metric_ftns", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "cfg_trainer", "=", "config", "[", "'trainer'", "]", "\n", "self", ".", "epochs", "=", "cfg_trainer", "[", "'epochs'", "]", "\n", "self", ".", "save_period", "=", "cfg_trainer", "[", "'save_period'", "]", "\n", "self", ".", "monitor", "=", "cfg_trainer", ".", "get", "(", "'monitor'", ",", "'off'", ")", "\n", "\n", "# configuration to monitor model performance and save best", "\n", "if", "self", ".", "monitor", "==", "'off'", ":", "\n", "            ", "self", ".", "mnt_mode", "=", "'off'", "\n", "self", ".", "mnt_best", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "mnt_mode", ",", "self", ".", "mnt_metric", "=", "self", ".", "monitor", ".", "split", "(", ")", "\n", "assert", "self", ".", "mnt_mode", "in", "[", "'min'", ",", "'max'", "]", "\n", "\n", "self", ".", "mnt_best", "=", "inf", "if", "self", ".", "mnt_mode", "==", "'min'", "else", "-", "inf", "\n", "self", ".", "early_stop", "=", "cfg_trainer", ".", "get", "(", "'early_stop'", ",", "inf", ")", "\n", "\n", "", "self", ".", "start_epoch", "=", "1", "\n", "\n", "self", ".", "checkpoint_dir", "=", "config", ".", "save_dir", "\n", "\n", "# setup visualization writer instance                ", "\n", "self", ".", "writer", "=", "TensorboardWriter", "(", "config", ".", "log_dir", ",", "self", ".", "logger", ",", "cfg_trainer", "[", "'tensorboard'", "]", ")", "\n", "\n", "if", "config", ".", "resume", "is", "not", "None", ":", "\n", "            ", "self", ".", "_resume_checkpoint", "(", "config", ".", "resume", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_trainer.BaseTrainer._train_epoch": [[51, 59], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Training logic for an epoch\n\n        :param epoch: Current epoch number\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_trainer.BaseTrainer.train": [[60, 103], ["range", "base_trainer.BaseTrainer._train_epoch", "log.update", "log.items", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer._save_checkpoint", "base_trainer.BaseTrainer.logger.info", "str", "base_trainer.BaseTrainer.logger.warning"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_trainer.BaseTrainer._train_epoch", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.utils.util.MetricTracker.update", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_trainer.BaseTrainer._save_checkpoint"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Full training logic\n        \"\"\"", "\n", "not_improved_count", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "result", "=", "self", ".", "_train_epoch", "(", "epoch", ")", "\n", "\n", "# save logged informations into log dict", "\n", "log", "=", "{", "'epoch'", ":", "epoch", "}", "\n", "log", ".", "update", "(", "result", ")", "\n", "\n", "# print logged informations to the screen", "\n", "for", "key", ",", "value", "in", "log", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'    {:15s}: {}'", ".", "format", "(", "str", "(", "key", ")", ",", "value", ")", ")", "\n", "\n", "# evaluate model performance according to configured metric, save best checkpoint as model_best", "\n", "", "best", "=", "False", "\n", "if", "self", ".", "mnt_mode", "!=", "'off'", ":", "\n", "                ", "try", ":", "\n", "# check whether model performance improved or not, according to specified metric(mnt_metric)", "\n", "                    ", "improved", "=", "(", "self", ".", "mnt_mode", "==", "'min'", "and", "log", "[", "self", ".", "mnt_metric", "]", "<=", "self", ".", "mnt_best", ")", "or", "(", "self", ".", "mnt_mode", "==", "'max'", "and", "log", "[", "self", ".", "mnt_metric", "]", ">=", "self", ".", "mnt_best", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Metric '{}' is not found. \"", "\n", "\"Model performance monitoring is disabled.\"", ".", "format", "(", "self", ".", "mnt_metric", ")", ")", "\n", "self", ".", "mnt_mode", "=", "'off'", "\n", "improved", "=", "False", "\n", "\n", "", "if", "improved", ":", "\n", "                    ", "self", ".", "mnt_best", "=", "log", "[", "self", ".", "mnt_metric", "]", "\n", "not_improved_count", "=", "0", "\n", "best", "=", "True", "\n", "", "else", ":", "\n", "                    ", "not_improved_count", "+=", "1", "\n", "\n", "", "if", "not_improved_count", ">", "self", ".", "early_stop", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\"Validation performance didn\\'t improve for {} epochs. \"", "\n", "\"Training stops.\"", ".", "format", "(", "self", ".", "early_stop", ")", ")", "\n", "break", "\n", "\n", "", "", "if", "epoch", "%", "self", ".", "save_period", "==", "0", ":", "\n", "                ", "self", ".", "_save_checkpoint", "(", "epoch", ",", "save_best", "=", "best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_trainer.BaseTrainer._prepare_device": [[104, 120], ["torch.cuda.device_count", "torch.device", "list", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.logger.warning", "range"], "methods", ["None"], ["", "", "", "def", "_prepare_device", "(", "self", ",", "n_gpu_use", ")", ":", "\n", "        ", "\"\"\"\n        setup GPU device if available, move model into configured device\n        \"\"\"", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "n_gpu_use", ">", "0", "and", "n_gpu", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: There\\'s no GPU available on this machine,\"", "\n", "\"training will be performed on CPU.\"", ")", "\n", "n_gpu_use", "=", "0", "\n", "", "if", "n_gpu_use", ">", "n_gpu", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: The number of GPU\\'s configured to use is {}, but only {} are available \"", "\n", "\"on this machine.\"", ".", "format", "(", "n_gpu_use", ",", "n_gpu", ")", ")", "\n", "n_gpu_use", "=", "n_gpu", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "n_gpu_use", ">", "0", "else", "'cpu'", ")", "\n", "list_ids", "=", "list", "(", "range", "(", "n_gpu_use", ")", ")", "\n", "return", "device", ",", "list_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_trainer.BaseTrainer._save_checkpoint": [[121, 145], ["str", "torch.save", "base_trainer.BaseTrainer.logger.info", "type", "base_trainer.BaseTrainer.model.state_dict", "base_trainer.BaseTrainer.optimizer.state_dict", "str", "torch.save", "base_trainer.BaseTrainer.logger.info"], "methods", ["None"], ["", "def", "_save_checkpoint", "(", "self", ",", "epoch", ",", "save_best", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Saving checkpoints\n\n        :param epoch: current epoch number\n        :param log: logging information of the epoch\n        :param save_best: if True, rename the saved checkpoint to 'model_best.pth'\n        \"\"\"", "\n", "arch", "=", "type", "(", "self", ".", "model", ")", ".", "__name__", "\n", "state", "=", "{", "\n", "'arch'", ":", "arch", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'monitor_best'", ":", "self", ".", "mnt_best", ",", "\n", "'config'", ":", "self", ".", "config", "\n", "}", "\n", "filename", "=", "str", "(", "self", ".", "checkpoint_dir", "/", "'checkpoint-epoch{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving checkpoint: {} ...\"", ".", "format", "(", "filename", ")", ")", "\n", "if", "save_best", ":", "\n", "            ", "best_path", "=", "str", "(", "self", ".", "checkpoint_dir", "/", "'model_best.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "best_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving current best: model_best.pth ...\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_trainer.BaseTrainer._resume_checkpoint": [[146, 172], ["str", "base_trainer.BaseTrainer.logger.info", "torch.load", "base_trainer.BaseTrainer.model.load_state_dict", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.optimizer.load_state_dict"], "methods", ["None"], ["", "", "def", "_resume_checkpoint", "(", "self", ",", "resume_path", ")", ":", "\n", "        ", "\"\"\"\n        Resume from saved checkpoints\n\n        :param resume_path: Checkpoint path to be resumed\n        \"\"\"", "\n", "resume_path", "=", "str", "(", "resume_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint: {} ...\"", ".", "format", "(", "resume_path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_path", ")", "\n", "self", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "self", ".", "mnt_best", "=", "checkpoint", "[", "'monitor_best'", "]", "\n", "\n", "# load architecture params from checkpoint.", "\n", "if", "checkpoint", "[", "'config'", "]", "[", "'arch'", "]", "!=", "self", ".", "config", "[", "'arch'", "]", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Architecture configuration given in config file is different from that of \"", "\n", "\"checkpoint. This may yield an exception while state_dict is being loaded.\"", ")", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "\n", "# load optimizer state from checkpoint only when optimizer type is not changed.", "\n", "if", "checkpoint", "[", "'config'", "]", "[", "'optimizer'", "]", "[", "'type'", "]", "!=", "self", ".", "config", "[", "'optimizer'", "]", "[", "'type'", "]", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Optimizer type given in config file is different from that of checkpoint. \"", "\n", "\"Optimizer parameters not being resumed.\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Checkpoint loaded. Resume training from epoch {}\"", ".", "format", "(", "self", ".", "start_epoch", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_data_loader.BaseDataLoader.__init__": [[11, 28], ["len", "base_data_loader.BaseDataLoader._split_sampler", "torch.utils.data.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_data_loader.BaseDataLoader._split_sampler", "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_data_loader.BaseDataLoader.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", ",", "shuffle", ",", "validation_split", ",", "num_workers", ",", "collate_fn", "=", "default_collate", ")", ":", "\n", "        ", "self", ".", "validation_split", "=", "validation_split", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n", "self", ".", "batch_idx", "=", "0", "\n", "self", ".", "n_samples", "=", "len", "(", "dataset", ")", "\n", "\n", "self", ".", "sampler", ",", "self", ".", "valid_sampler", "=", "self", ".", "_split_sampler", "(", "self", ".", "validation_split", ")", "\n", "\n", "self", ".", "init_kwargs", "=", "{", "\n", "'dataset'", ":", "dataset", ",", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'shuffle'", ":", "self", ".", "shuffle", ",", "\n", "'collate_fn'", ":", "collate_fn", ",", "\n", "'num_workers'", ":", "num_workers", "\n", "}", "\n", "super", "(", ")", ".", "__init__", "(", "sampler", "=", "self", ".", "sampler", ",", "**", "self", ".", "init_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_data_loader.BaseDataLoader._split_sampler": [[29, 56], ["numpy.arange", "numpy.random.seed", "numpy.random.shuffle", "isinstance", "numpy.delete", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "len", "int", "numpy.arange"], "methods", ["None"], ["", "def", "_split_sampler", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "0.0", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "idx_full", "=", "np", ".", "arange", "(", "self", ".", "n_samples", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_full", ")", "\n", "\n", "if", "isinstance", "(", "split", ",", "int", ")", ":", "\n", "            ", "assert", "split", ">", "0", "\n", "assert", "split", "<", "self", ".", "n_samples", ",", "\"validation set size is configured to be larger than entire dataset.\"", "\n", "len_valid", "=", "split", "\n", "", "else", ":", "\n", "            ", "len_valid", "=", "int", "(", "self", ".", "n_samples", "*", "split", ")", "\n", "\n", "", "valid_idx", "=", "idx_full", "[", "0", ":", "len_valid", "]", "\n", "train_idx", "=", "np", ".", "delete", "(", "idx_full", ",", "np", ".", "arange", "(", "0", ",", "len_valid", ")", ")", "\n", "\n", "train_sampler", "=", "SubsetRandomSampler", "(", "train_idx", ")", "\n", "valid_sampler", "=", "SubsetRandomSampler", "(", "valid_idx", ")", "\n", "\n", "# turn off shuffle option which is mutually exclusive with sampler", "\n", "self", ".", "shuffle", "=", "False", "\n", "self", ".", "n_samples", "=", "len", "(", "train_idx", ")", "\n", "\n", "return", "train_sampler", ",", "valid_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_data_loader.BaseDataLoader.split_validation": [[57, 62], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "split_validation", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "valid_sampler", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "DataLoader", "(", "sampler", "=", "self", ".", "valid_sampler", ",", "**", "self", ".", "init_kwargs", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_model.BaseModel.forward": [[10, 18], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass logic\n\n        :return: Model output\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_model.BaseModel.__str__": [[19, 26], ["filter", "sum", "base_model.BaseModel.parameters", "torch.Module.__str__", "numpy.prod", "p.size"], "methods", ["home.repos.pwc.inspect_result.myavartanoo_3DIAS_PyTorch.base.base_model.BaseModel.__str__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Model prints with number of trainable parameters\n        \"\"\"", "\n", "model_parameters", "=", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "self", ".", "parameters", "(", ")", ")", "\n", "params", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "model_parameters", "]", ")", "\n", "return", "super", "(", ")", ".", "__str__", "(", ")", "+", "'\\nTrainable parameters: {}'", ".", "format", "(", "params", ")", "\n", "", "", ""]]}