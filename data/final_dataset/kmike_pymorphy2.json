{"home.repos.pwc.inspect_result.kmike_pymorphy2.None.setup.get_version": [[8, 11], ["open", "[].strip", "f.readline().split", "f.readline"], "function", ["None"], ["def", "get_version", "(", ")", ":", "\n", "    ", "with", "open", "(", "\"pymorphy2/version.py\"", ",", "\"rt\"", ")", "as", "f", ":", "\n", "        ", "return", "f", ".", "readline", "(", ")", ".", "split", "(", "\"=\"", ")", "[", "1", "]", ".", "strip", "(", "' \"\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.benchmarks.speed.load_words": [[21, 29], ["codecs.open", "line.split", "int", "words.append", "word.lower"], "function", ["None"], ["def", "load_words", "(", "path", "=", "DATA_PATH", ")", ":", "\n", "    ", "words", "=", "[", "]", "\n", "with", "codecs", ".", "open", "(", "path", ",", "'r'", ",", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "word", ",", "count", ",", "ipm", "=", "line", ".", "split", "(", ")", "\n", "count", "=", "int", "(", "count", ")", "\n", "words", ".", "append", "(", "(", "word", ".", "lower", "(", ")", ",", "count", ")", ")", "\n", "", "", "return", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.benchmarks.speed.get_total_usages": [[30, 32], ["sum"], "function", ["None"], ["", "def", "get_total_usages", "(", "words", ")", ":", "\n", "    ", "return", "sum", "(", "w", "[", "1", "]", "for", "w", "in", "words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.benchmarks.speed.bench_tag": [[33, 59], ["functools.partial", "logger.info", "logger.info", "logger.info", "logger.info", "functools.partial.", "functools.partial.", "functools.partial.", "functools.partial.", "w[].replace", "range", "morph.tag", "morph.tag", "str", "len", "len", "len", "morph.tag", "morph.tag"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag"], ["", "def", "bench_tag", "(", "morph", ",", "words", ",", "total_usages", ",", "repeats", ")", ":", "\n", "    ", "word_no_umlauts", "=", "[", "(", "w", "[", "0", "]", ".", "replace", "(", "'\u0451'", ",", "'\u0435'", ")", ",", "w", "[", "1", "]", ")", "for", "w", "in", "words", "]", "\n", "\n", "def", "_run", "(", ")", ":", "\n", "        ", "for", "word", ",", "cnt", "in", "words", ":", "\n", "            ", "for", "x", "in", "range", "(", "cnt", ")", ":", "\n", "                ", "morph", ".", "tag", "(", "word", ")", "\n", "\n", "", "", "", "def", "_run_nofreq", "(", ")", ":", "\n", "        ", "for", "word", ",", "cnt", "in", "words", ":", "\n", "            ", "morph", ".", "tag", "(", "word", ")", "\n", "\n", "", "", "def", "_run_no_umlauts", "(", ")", ":", "\n", "        ", "for", "word", ",", "cnt", "in", "word_no_umlauts", ":", "\n", "            ", "morph", ".", "tag", "(", "word", ")", "\n", "\n", "", "", "def", "_run_str", "(", ")", ":", "\n", "        ", "for", "word", ",", "cnt", "in", "words", ":", "\n", "            ", "str", "(", "morph", ".", "tag", "(", "word", ")", ")", "\n", "\n", "", "", "measure", "=", "functools", ".", "partial", "(", "utils", ".", "measure", ",", "repeats", "=", "repeats", ")", "\n", "\n", "logger", ".", "info", "(", "\"    morph.tag(w): %0.0f words/sec (considering word frequencies)\"", ",", "measure", "(", "_run", ",", "total_usages", ")", ")", "\n", "logger", ".", "info", "(", "\"    morph.tag(w): %0.0f words/sec\"", ",", "measure", "(", "_run_nofreq", ",", "len", "(", "words", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"    morph.tag(w): %0.0f words/sec (umlauts removed from input)\"", ",", "measure", "(", "_run_no_umlauts", ",", "len", "(", "words", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"    morph.tag(w): %0.0f words/sec (str(tag) called)\"", ",", "measure", "(", "_run_str", ",", "len", "(", "words", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.benchmarks.speed.bench_parse": [[61, 132], ["functools.partial", "speed.bench_parse.show_info"], "function", ["None"], ["", "def", "bench_parse", "(", "morph", ",", "words", ",", "total_usages", ",", "repeats", ")", ":", "\n", "    ", "def", "_run", "(", ")", ":", "\n", "        ", "for", "word", ",", "cnt", "in", "words", ":", "\n", "            ", "for", "x", "in", "range", "(", "cnt", ")", ":", "\n", "                ", "morph", ".", "parse", "(", "word", ")", "\n", "\n", "", "", "", "def", "_run_nofreq", "(", ")", ":", "\n", "        ", "for", "word", ",", "cnt", "in", "words", ":", "\n", "            ", "morph", ".", "parse", "(", "word", ")", "\n", "\n", "", "", "def", "_run_normal_form", "(", ")", ":", "\n", "        ", "for", "word", ",", "cnt", "in", "words", ":", "\n", "            ", "[", "p", ".", "normal_form", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", "]", "\n", "\n", "", "", "def", "_run_normalized", "(", ")", ":", "\n", "        ", "for", "word", ",", "cnt", "in", "words", ":", "\n", "            ", "[", "p", ".", "normalized", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", "]", "\n", "\n", "", "", "def", "_run_is_noun", "(", ")", ":", "\n", "        ", "for", "word", ",", "cnt", "in", "words", ":", "\n", "            ", "[", "set", "(", "[", "'NOUN'", "]", ")", "in", "p", ".", "tag", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", "]", "\n", "\n", "", "", "def", "_run_is_noun2", "(", ")", ":", "\n", "        ", "for", "word", ",", "cnt", "in", "words", ":", "\n", "            ", "[", "p", ".", "tag", ".", "POS", "==", "'NOUN'", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", "]", "\n", "\n", "", "", "def", "_run_word_is_known", "(", ")", ":", "\n", "        ", "for", "x", "in", "range", "(", "10", ")", ":", "\n", "            ", "for", "word", ",", "cnt", "in", "words", ":", "\n", "                ", "morph", ".", "word_is_known", "(", "word", ")", "\n", "\n", "", "", "", "def", "_run_cyr_repr", "(", ")", ":", "\n", "        ", "for", "word", ",", "cnt", "in", "words", ":", "\n", "            ", "[", "p", ".", "tag", ".", "cyr_repr", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", "]", "\n", "\n", "", "", "def", "_run_grammemes_cyr", "(", ")", ":", "\n", "        ", "for", "word", ",", "cnt", "in", "words", ":", "\n", "            ", "[", "p", ".", "tag", ".", "grammemes_cyr", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", "]", "\n", "\n", "", "", "def", "_run_POS_cyr", "(", ")", ":", "\n", "        ", "for", "word", ",", "cnt", "in", "words", ":", "\n", "            ", "[", "morph", ".", "lat2cyr", "(", "p", ".", "tag", ")", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", "]", "\n", "\n", "", "", "def", "_run_lexeme", "(", ")", ":", "\n", "        ", "for", "word", ",", "cnt", "in", "words", "[", ":", ":", "5", "]", ":", "\n", "            ", "[", "p", ".", "lexeme", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", "]", "\n", "\n", "", "", "measure", "=", "functools", ".", "partial", "(", "utils", ".", "measure", ",", "repeats", "=", "repeats", ")", "\n", "\n", "def", "show_info", "(", "bench_name", ",", "func", ",", "note", "=", "''", ",", "count", "=", "len", "(", "words", ")", ")", ":", "\n", "        ", "wps", "=", "measure", "(", "func", ",", "count", ")", "\n", "logger", ".", "info", "(", "\"    %-50s %0.0f words/sec %s\"", ",", "bench_name", ",", "wps", ",", "note", ")", "\n", "\n", "\n", "# === run benchmarks:", "\n", "\n", "", "show_info", "(", "'morph.parse(w)'", ",", "_run_nofreq", ")", "\n", "show_info", "(", "'morph.parse(w)'", ",", "_run", ",", "'(considering word frequencies)'", ",", "total_usages", ")", "\n", "\n", "if", "morph", ".", "_result_type", "is", "not", "None", ":", "\n", "        ", "show_info", "(", "'morph.word_is_known(w)'", ",", "_run_word_is_known", ",", "count", "=", "len", "(", "words", ")", "*", "10", ")", "\n", "show_info", "(", "\"[p.normal_form for p in morph.parse(w)]\"", ",", "_run_normal_form", ")", "\n", "show_info", "(", "\"[p.normalized for p in morph.parse(w)]\"", ",", "_run_normalized", ")", "\n", "show_info", "(", "\"[p.lexeme for p in morph.parse(w)]\"", ",", "_run_lexeme", ",", "count", "=", "len", "(", "words", ")", "/", "5", ")", "\n", "show_info", "(", "\"[{'NOUN'} in p.tag for p in morph.parse(w)]\"", ",", "_run_is_noun", ")", "\n", "show_info", "(", "\"[p.tag.POS == 'NOUN' for p in morph.parse(w)]\"", ",", "_run_is_noun2", ")", "\n", "show_info", "(", "\"[p.tag.cyr_repr for p in morph.parse(word)]\"", ",", "_run_cyr_repr", ")", "\n", "show_info", "(", "\"[p.tag.grammemes_cyr for p in morph.parse(word)]\"", ",", "_run_grammemes_cyr", ")", "\n", "show_info", "(", "\"[morph.lat2cyr(p.tag) for p in morph.parse(word)]\"", ",", "_run_POS_cyr", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.benchmarks.speed.bench_all": [[134, 157], ["logger.debug", "pymorphy2.MorphAnalyzer", "pymorphy2.MorphAnalyzer", "logger.debug", "speed.load_words", "speed.get_total_usages", "logger.debug", "datetime.datetime.now", "logger.info", "speed.bench_parse", "speed.bench_tag", "logger.info", "speed.bench_parse", "datetime.datetime.now", "logger.info", "len"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.benchmarks.speed.load_words", "home.repos.pwc.inspect_result.kmike_pymorphy2.benchmarks.speed.get_total_usages", "home.repos.pwc.inspect_result.kmike_pymorphy2.benchmarks.speed.bench_parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.benchmarks.speed.bench_tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.benchmarks.speed.bench_parse"], ["", "def", "bench_all", "(", "repeats", ",", "dict_path", "=", "None", ")", ":", "\n", "    ", "\"\"\" Run all benchmarks \"\"\"", "\n", "logger", ".", "debug", "(", "\"loading MorphAnalyzer...\"", ")", "\n", "morph", "=", "MorphAnalyzer", "(", "dict_path", ")", "\n", "morph_plain", "=", "MorphAnalyzer", "(", "dict_path", ",", "result_type", "=", "None", ")", "\n", "\n", "logger", ".", "debug", "(", "\"loading benchmark data...\"", ")", "\n", "words", "=", "load_words", "(", ")", "\n", "total_usages", "=", "get_total_usages", "(", "words", ")", "\n", "\n", "logger", ".", "debug", "(", "\"Words: %d, usages: %d\"", ",", "len", "(", "words", ")", ",", "total_usages", ")", "\n", "\n", "start_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"\\nbenchmarking MorphAnalyzer():\"", ")", "\n", "bench_parse", "(", "morph", ",", "words", ",", "total_usages", ",", "repeats", ")", "\n", "bench_tag", "(", "morph", ",", "words", ",", "total_usages", ",", "repeats", ")", "\n", "\n", "logger", ".", "info", "(", "\"\\nbenchmarking MorphAnalyzer(result_type=None):\"", ")", "\n", "bench_parse", "(", "morph_plain", ",", "words", ",", "total_usages", ",", "repeats", ")", "\n", "\n", "end_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "logger", ".", "info", "(", "\"----\\nDone in %s.\\n\"", "%", "(", "end_time", "-", "start_time", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.benchmarks.bench.main": [[31, 47], ["docopt.docopt", "logger.setLevel", "logger.setLevel", "benchmarks.speed.bench_all", "int"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.benchmarks.speed.bench_all"], ["def", "main", "(", ")", ":", "\n", "    ", "\"\"\" CLI interface dispatcher \"\"\"", "\n", "args", "=", "docopt", "(", "__doc__", ",", "version", "=", "pymorphy2", ".", "__version__", ")", "\n", "\n", "if", "args", "[", "'--verbose'", "]", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "\n", "", "if", "args", "[", "'run'", "]", ":", "\n", "        ", "speed", ".", "bench_all", "(", "\n", "dict_path", "=", "args", "[", "'--dict'", "]", ",", "\n", "repeats", "=", "int", "(", "args", "[", "'--repeats'", "]", ")", "\n", ")", "\n", "\n", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.benchmarks.utils.measure": [[7, 24], ["gc.disable", "range", "gc.enable", "time.time", "func", "times.append", "min", "time.time"], "function", ["None"], ["def", "measure", "(", "func", ",", "inner_iterations", "=", "1", ",", "repeats", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    Runs func ``repeats`` times and returns the fastest speed\n    (inner loop iterations per second). Use ``inner_iterations`` to specify\n    the number of inner loop iterations.\n\n    Use this function for long-running functions.\n    \"\"\"", "\n", "gc", ".", "disable", "(", ")", "\n", "times", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "repeats", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "func", "(", ")", "\n", "times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "", "gc", ".", "enable", "(", ")", "\n", "return", "inner_iterations", "/", "min", "(", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.benchmarks.utils.bench": [[26, 40], ["timeit.Timer", "range", "utils.bench.op_time"], "function", ["None"], ["", "def", "bench", "(", "stmt", ",", "setup", ",", "op_count", "=", "1", ",", "repeats", "=", "3", ",", "runs", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    Runs ``stmt`` benchmark ``repeats``*``runs`` times,\n    selects the fastest run and returns the minimum time.\n    \"\"\"", "\n", "timer", "=", "timeit", ".", "Timer", "(", "stmt", ",", "setup", ")", "\n", "times", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "runs", ")", ":", "\n", "        ", "times", ".", "append", "(", "timer", ".", "timeit", "(", "repeats", ")", ")", "\n", "\n", "", "def", "op_time", "(", "t", ")", ":", "\n", "        ", "return", "op_count", "*", "repeats", "/", "t", "\n", "\n", "", "return", "op_time", "(", "min", "(", "times", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.benchmarks.utils.format_bench": [[42, 44], ["None"], "function", ["None"], ["", "def", "format_bench", "(", "name", ",", "result", ",", "description", "=", "'K words/sec'", ")", ":", "\n", "    ", "return", "\"%25s:\\t%0.3f%s\"", "%", "(", "name", ",", "result", ",", "description", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.shapes.is_latin_char": [[11, 19], ["isinstance", "_latin_letters_cache.setdefault", "uchr.decode.decode", "unicodedata.name"], "function", ["None"], ["def", "is_latin_char", "(", "uchr", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "return", "_latin_letters_cache", "[", "uchr", "]", "\n", "", "except", "KeyError", ":", "\n", "        ", "if", "isinstance", "(", "uchr", ",", "bytes", ")", ":", "\n", "            ", "uchr", "=", "uchr", ".", "decode", "(", "'ascii'", ")", "\n", "", "is_latin", "=", "'LATIN'", "in", "unicodedata", ".", "name", "(", "uchr", ")", "\n", "return", "_latin_letters_cache", ".", "setdefault", "(", "uchr", ",", "is_latin", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.shapes.is_latin": [[21, 41], ["any", "all", "ch.isalpha", "shapes.is_latin_char", "ch.isalpha"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.shapes.is_latin_char"], ["", "", "def", "is_latin", "(", "token", ")", ":", "\n", "    ", "\"\"\"\n    Return True if all token letters are latin and there is at\n    least one latin letter in the token:\n\n        >>> is_latin('foo')\n        True\n        >>> is_latin('123-FOO')\n        True\n        >>> is_latin('123')\n        False\n        >>> is_latin(':)')\n        False\n        >>> is_latin('')\n        False\n\n    \"\"\"", "\n", "return", "(", "\n", "any", "(", "ch", ".", "isalpha", "(", ")", "for", "ch", "in", "token", ")", "and", "\n", "all", "(", "is_latin_char", "(", "ch", ")", "for", "ch", "in", "token", "if", "ch", ".", "isalpha", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.shapes.is_punctuation": [[44, 68], ["isinstance", "token.decode.decode", "bool", "all", "token.decode.isspace", "unicodedata.category", "ch.isspace"], "function", ["None"], ["", "def", "is_punctuation", "(", "token", ")", ":", "\n", "    ", "\"\"\"\n    Return True if a word contains only spaces and punctuation marks\n    and there is at least one punctuation mark:\n\n        >>> is_punctuation(', ')\n        True\n        >>> is_punctuation('..!')\n        True\n        >>> is_punctuation('x')\n        False\n        >>> is_punctuation(' ')\n        False\n        >>> is_punctuation('')\n        False\n\n    \"\"\"", "\n", "if", "isinstance", "(", "token", ",", "bytes", ")", ":", "# python 2.x ascii str", "\n", "        ", "token", "=", "token", ".", "decode", "(", "'ascii'", ")", "\n", "\n", "", "return", "(", "\n", "bool", "(", "token", ")", "and", "\n", "not", "token", ".", "isspace", "(", ")", "and", "\n", "all", "(", "unicodedata", ".", "category", "(", "ch", ")", "[", "0", "]", "==", "'P'", "for", "ch", "in", "token", "if", "not", "ch", ".", "isspace", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.shapes.is_roman_number": [[83, 100], ["_match"], "function", ["None"], ["def", "is_roman_number", "(", "token", ",", "_match", "=", "ROMAN_NUMBERS_RE", ".", "match", ")", ":", "\n", "    ", "\"\"\"\n    Return True if token looks like a Roman number:\n\n        >>> is_roman_number('II')\n        True\n        >>> is_roman_number('IX')\n        True\n        >>> is_roman_number('XIIIII')\n        False\n        >>> is_roman_number('')\n        False\n\n    \"\"\"", "\n", "if", "not", "token", ":", "\n", "        ", "return", "False", "\n", "", "return", "_match", "(", "token", ")", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.shapes.restore_capitalization": [[102, 146], ["shapes._make_the_same_case", "word.split", "example.split", "enumerate", "len", "results.append", "results.append", "shapes._make_the_same_case", "part.lower"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.shapes._make_the_same_case", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.shapes._make_the_same_case"], ["", "def", "restore_capitalization", "(", "word", ",", "example", ")", ":", "\n", "    ", "\"\"\"\n    Make the capitalization of the ``word`` be the same as in ``example``:\n\n        >>> restore_capitalization('bye', 'Hello')\n        'Bye'\n        >>> restore_capitalization('half-an-hour', 'Minute')\n        'Half-An-Hour'\n        >>> restore_capitalization('usa', 'IEEE')\n        'USA'\n        >>> restore_capitalization('pre-world', 'anti-World')\n        'pre-World'\n        >>> restore_capitalization('123-do', 'anti-IEEE')\n        '123-DO'\n        >>> restore_capitalization('123--do', 'anti--IEEE')\n        '123--DO'\n\n    In the alignment fails, the reminder is lower-cased:\n\n        >>> restore_capitalization('foo-BAR-BAZ', 'Baz-Baz')\n        'Foo-Bar-baz'\n        >>> restore_capitalization('foo', 'foo-bar')\n        'foo'\n\n    .. note:\n\n        Currently this function doesn't handle uppercase letters in\n        the middle of the token (e.g. McDonald).\n\n    \"\"\"", "\n", "if", "'-'", "in", "example", ":", "\n", "        ", "results", "=", "[", "]", "\n", "word_parts", "=", "word", ".", "split", "(", "'-'", ")", "\n", "example_parts", "=", "example", ".", "split", "(", "'-'", ")", "\n", "\n", "for", "i", ",", "part", "in", "enumerate", "(", "word_parts", ")", ":", "\n", "            ", "if", "len", "(", "example_parts", ")", ">", "i", ":", "\n", "                ", "results", ".", "append", "(", "_make_the_same_case", "(", "part", ",", "example_parts", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "results", ".", "append", "(", "part", ".", "lower", "(", ")", ")", "\n", "\n", "", "", "return", "'-'", ".", "join", "(", "results", ")", "\n", "\n", "", "return", "_make_the_same_case", "(", "word", ",", "example", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.shapes.restore_word_case": [[148, 155], ["warnings.warn", "shapes.restore_capitalization"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.shapes.restore_capitalization"], ["", "def", "restore_word_case", "(", "word", ",", "example", ")", ":", "\n", "    ", "\"\"\" This function is renamed to ``restore_capitalization`` \"\"\"", "\n", "warnings", ".", "warn", "(", "\n", "\"`restore_word_case` function is renamed to `restore_capitalization`; \"", "\n", "\"old alias will be removed in future releases.\"", ",", "\n", ")", "\n", "return", "restore_capitalization", "(", "word", ",", "example", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.shapes._make_the_same_case": [[157, 166], ["example.islower", "word.lower", "example.isupper", "word.upper", "example.istitle", "word.title", "word.lower"], "function", ["None"], ["", "def", "_make_the_same_case", "(", "word", ",", "example", ")", ":", "\n", "    ", "if", "example", ".", "islower", "(", ")", ":", "\n", "        ", "return", "word", ".", "lower", "(", ")", "\n", "", "elif", "example", ".", "isupper", "(", ")", ":", "\n", "        ", "return", "word", ".", "upper", "(", ")", "\n", "", "elif", "example", ".", "istitle", "(", ")", ":", "\n", "        ", "return", "word", ".", "title", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "word", ".", "lower", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cli._TokenParserFormatter.__init__": [[202, 266], ["ValueError", "operator.itemgetter", "morph_parse", "sorted", "join", "lemmas.get", "join", "morph_parse", "join", "morph_parse", "join", "str", "morph_parse", "join", "morph_parse", "join", "lemmas.items", "morph_tag"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "morph", ",", "score", ",", "normal_form", ",", "tag", ",", "newlines", ",", "thresh", ")", ":", "\n", "        ", "tpl", "=", "self", ".", "tpl_newline", "if", "newlines", "else", "self", ".", "tpl_no_newline", "\n", "morph_tag", "=", "morph", ".", "tag", "\n", "morph_parse", "=", "morph", ".", "parse", "\n", "join", "=", "self", ".", "or_sep", ".", "join", "\n", "\n", "if", "not", "normal_form", "and", "not", "tag", ":", "\n", "            ", "raise", "ValueError", "(", "\"Empty output is requested\"", ")", "\n", "\n", "", "if", "not", "normal_form", "and", "not", "score", "and", "not", "thresh", ":", "\n", "# morph.tag method is enough", "\n", "            ", "self", ".", "parse", "=", "lambda", "tok", ":", "tpl", "%", "(", "tok", ",", "join", "(", "str", "(", "t", ")", "for", "t", "in", "morph_tag", "(", "tok", ")", ")", ")", "\n", "return", "\n", "\n", "", "if", "normal_form", ":", "\n", "            ", "if", "tag", ":", "\n", "                ", "if", "score", ":", "\n", "                    ", "def", "_parse_token", "(", "tok", ")", ":", "\n", "                        ", "seq", "=", "[", "\n", "\"%s:%0.3f=%s\"", "%", "(", "p", ".", "normal_form", ",", "p", ".", "score", ",", "p", ".", "tag", ")", "\n", "for", "p", "in", "morph_parse", "(", "tok", ")", "if", "p", ".", "score", ">=", "thresh", "\n", "]", "\n", "return", "tpl", "%", "(", "tok", ",", "join", "(", "seq", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "def", "_parse_token", "(", "tok", ")", ":", "\n", "                        ", "seq", "=", "[", "\n", "\"%s:%s\"", "%", "(", "p", ".", "normal_form", ",", "p", ".", "tag", ")", "\n", "for", "p", "in", "morph_parse", "(", "tok", ")", "if", "p", ".", "score", ">=", "thresh", "\n", "]", "\n", "return", "tpl", "%", "(", "tok", ",", "join", "(", "seq", ")", ")", "\n", "", "", "", "else", ":", "\n", "                ", "val", "=", "operator", ".", "itemgetter", "(", "1", ")", "\n", "def", "_parse_token", "(", "tok", ")", ":", "\n", "                    ", "lemmas", "=", "{", "}", "\n", "for", "p", "in", "morph_parse", "(", "tok", ")", ":", "\n", "                        ", "lemmas", "[", "p", ".", "normal_form", "]", "=", "lemmas", ".", "get", "(", "p", ".", "normal_form", ",", "0", ")", "+", "p", ".", "score", "\n", "\n", "", "items", "=", "sorted", "(", "\n", "[", "(", "lemma", ",", "w", ")", "for", "(", "lemma", ",", "w", ")", "in", "lemmas", ".", "items", "(", ")", "if", "w", ">=", "thresh", "]", ",", "\n", "key", "=", "val", ",", "reverse", "=", "True", "\n", ")", "\n", "if", "score", ":", "\n", "                        ", "seq", "=", "[", "\"%s:%0.3f\"", "%", "(", "lemma", ",", "w", ")", "for", "(", "lemma", ",", "w", ")", "in", "items", "]", "\n", "", "else", ":", "\n", "                        ", "seq", "=", "[", "lemma", "for", "(", "lemma", ",", "w", ")", "in", "items", "]", "\n", "\n", "", "return", "tpl", "%", "(", "tok", ",", "join", "(", "seq", ")", ")", "\n", "", "", "", "else", ":", "\n", "            ", "if", "score", ":", "\n", "                ", "def", "_parse_token", "(", "tok", ")", ":", "\n", "                    ", "seq", "=", "[", "\n", "\"%0.3f=%s\"", "%", "(", "p", ".", "score", ",", "p", ".", "tag", ")", "\n", "for", "p", "in", "morph_parse", "(", "tok", ")", "if", "p", ".", "score", ">=", "thresh", "\n", "]", "\n", "return", "tpl", "%", "(", "tok", ",", "join", "(", "seq", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "def", "_parse_token", "(", "tok", ")", ":", "\n", "                    ", "seq", "=", "[", "\n", "\"%s\"", "%", "p", ".", "tag", "\n", "for", "p", "in", "morph_parse", "(", "tok", ")", "if", "p", ".", "score", ">=", "thresh", "\n", "]", "\n", "return", "tpl", "%", "(", "tok", ",", "join", "(", "seq", ")", ")", "\n", "\n", "", "", "", "self", ".", "parse", "=", "_parse_token", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cli.main": [[63, 110], ["docopt", "pymorphy2.MorphAnalyzer", "cli._open_for_read", "any", "cli.parse", "logger.addHandler", "logger.setLevel", "logger.debug", "logging.StreamHandler", "cli.show_dict_mem_usage", "codecs.getwriter", "float", "cli.show_dict_meta"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cli._open_for_read", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cli.show_dict_mem_usage", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cli.show_dict_meta"], ["def", "main", "(", "argv", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Pymorphy CLI interface dispatcher.\n    \"\"\"", "\n", "\n", "from", "docopt", "import", "docopt", "\n", "args", "=", "docopt", "(", "DOC", ",", "argv", ",", "version", "=", "pymorphy2", ".", "__version__", ")", "\n", "\n", "path", "=", "args", "[", "'--dict'", "]", "\n", "lang", "=", "args", "[", "'--lang'", "]", "\n", "\n", "if", "args", "[", "'parse'", "]", ":", "\n", "        ", "morph", "=", "pymorphy2", ".", "MorphAnalyzer", "(", "path", "=", "path", ",", "lang", "=", "lang", ")", "\n", "in_file", "=", "_open_for_read", "(", "args", "[", "'<input>'", "]", ")", "\n", "\n", "if", "any", "(", "[", "args", "[", "'--score'", "]", ",", "args", "[", "'--lemmatize'", "]", ",", "args", "[", "'--tag'", "]", "]", ")", ":", "\n", "            ", "score", ",", "lemmatize", ",", "tag", "=", "args", "[", "'--score'", "]", ",", "args", "[", "'--lemmatize'", "]", ",", "args", "[", "'--tag'", "]", "\n", "", "else", ":", "\n", "            ", "score", ",", "lemmatize", ",", "tag", "=", "True", ",", "True", ",", "True", "\n", "\n", "", "if", "PY2", ":", "\n", "            ", "out_file", "=", "codecs", ".", "getwriter", "(", "'utf8'", ")", "(", "sys", ".", "stdout", ")", "\n", "", "else", ":", "\n", "            ", "out_file", "=", "sys", ".", "stdout", "\n", "\n", "", "return", "parse", "(", "\n", "morph", "=", "morph", ",", "\n", "in_file", "=", "in_file", ",", "\n", "out_file", "=", "out_file", ",", "\n", "tokenize", "=", "not", "args", "[", "'--tokenized'", "]", ",", "\n", "score", "=", "score", ",", "\n", "normal_form", "=", "lemmatize", ",", "\n", "tag", "=", "tag", ",", "\n", "newlines", "=", "True", ",", "# not args['--inline'],", "\n", "cache_size", "=", "args", "[", "'--cache'", "]", ",", "\n", "thresh", "=", "float", "(", "args", "[", "'--thresh'", "]", ")", ",", "\n", ")", "\n", "\n", "", "if", "args", "[", "'dict'", "]", ":", "\n", "        ", "logger", ".", "addHandler", "(", "logging", ".", "StreamHandler", "(", ")", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", "if", "args", "[", "'--verbose'", "]", "else", "logging", ".", "INFO", ")", "\n", "logger", ".", "debug", "(", "args", ")", "\n", "\n", "if", "args", "[", "'mem_usage'", "]", ":", "\n", "            ", "return", "show_dict_mem_usage", "(", "lang", ",", "path", ",", "args", "[", "'--verbose'", "]", ")", "\n", "", "elif", "args", "[", "'meta'", "]", ":", "\n", "            ", "return", "show_dict_meta", "(", "lang", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cli._open_for_read": [[112, 123], ["codecs.open", "open", "codecs.getreader"], "function", ["None"], ["", "", "", "def", "_open_for_read", "(", "fn", ")", ":", "\n", "    ", "\"\"\" Open a file for reading \"\"\"", "\n", "if", "fn", "in", "[", "'-'", ",", "''", ",", "None", "]", ":", "\n", "        ", "if", "PY2", ":", "\n", "            ", "return", "codecs", ".", "getreader", "(", "'utf8'", ")", "(", "sys", ".", "stdin", ")", "\n", "", "else", ":", "\n", "            ", "return", "sys", ".", "stdin", "\n", "", "", "if", "PY2", ":", "\n", "        ", "return", "codecs", ".", "open", "(", "fn", ",", "'rt'", ",", "encoding", "=", "'utf8'", ")", "\n", "", "else", ":", "\n", "        ", "return", "open", "(", "fn", ",", "'rt'", ",", "encoding", "=", "'utf8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cli.show_dict_mem_usage": [[127, 142], ["pymorphy2.utils.get_mem_usage", "time.time", "pymorphy2.MorphAnalyzer", "time.time", "pymorphy2.utils.get_mem_usage", "logger.info"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.get_mem_usage", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.get_mem_usage"], ["", "", "def", "show_dict_mem_usage", "(", "lang", ",", "dict_path", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Show dictionary memory usage.\n    \"\"\"", "\n", "initial_mem", "=", "get_mem_usage", "(", ")", "\n", "initial_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "morph", "=", "pymorphy2", ".", "MorphAnalyzer", "(", "path", "=", "dict_path", ",", "lang", "=", "lang", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "mem_usage", "=", "get_mem_usage", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\n", "'Memory usage: %0.1fM dictionary, %0.1fM total (load time %0.2fs)'", ",", "\n", "(", "mem_usage", "-", "initial_mem", ")", "/", "(", "1024", "*", "1024", ")", ",", "mem_usage", "/", "(", "1024", "*", "1024", ")", ",", "end_time", "-", "initial_time", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cli.show_dict_meta": [[145, 150], ["pymorphy2.MorphAnalyzer", "pymorphy2.MorphAnalyzer.dictionary.meta.items", "logger.info"], "function", ["None"], ["", "def", "show_dict_meta", "(", "lang", ",", "dict_path", "=", "None", ")", ":", "\n", "    ", "morph", "=", "pymorphy2", ".", "MorphAnalyzer", "(", "path", "=", "dict_path", ",", "lang", "=", "lang", ")", "\n", "\n", "for", "key", ",", "value", "in", "morph", ".", "dictionary", ".", "meta", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"%s: %s\"", ",", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cli.parse": [[152, 190], ["cli._TokenParserFormatter", "iter_tokens", "int", "_write", "pymorphy2.cache.memoized_with_single_argument", "_parse", "pymorphy2.cache.lru_cache"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cache.memoized_with_single_argument"], ["", "", "def", "parse", "(", "morph", ",", "in_file", ",", "out_file", ",", "tokenize", ",", "score", ",", "normal_form", ",", "tag", ",", "\n", "newlines", ",", "cache_size", ",", "thresh", ")", ":", "\n", "    ", "\"\"\"\n    Parse text from in_file; write output to out_file.\n    Both ``in_file`` and ``out_file`` must support unicode.\n\n    * If `tokenize` is False assume text is already tokenized - a token per\n    new line.\n    * If `score` is True, include score in the output.\n    * If `normal_form` is True, include normal form in the output.\n    * If `tag` is True, include tags in the output.\n    * If `newline` is True, write each result on a new line.\n    * `cache_size` is a maximum number of entries in internal cache.\n    * `thresh` is a minimum allowed parse score\n\n    \"\"\"", "\n", "iter_tokens", "=", "_iter_tokens_tokenize", "if", "tokenize", "else", "_iter_tokens_notokenize", "\n", "\n", "parser", "=", "_TokenParserFormatter", "(", "\n", "morph", "=", "morph", ",", "\n", "score", "=", "score", ",", "\n", "normal_form", "=", "normal_form", ",", "\n", "tag", "=", "tag", ",", "\n", "newlines", "=", "newlines", ",", "\n", "thresh", "=", "thresh", ",", "\n", ")", "\n", "\n", "_parse", "=", "parser", ".", "parse", "\n", "if", "cache_size", "==", "'unlim'", ":", "\n", "        ", "_parse", "=", "memoized_with_single_argument", "(", "{", "}", ")", "(", "_parse", ")", "\n", "", "else", ":", "\n", "        ", "cache_size", "=", "int", "(", "cache_size", ")", "\n", "if", "cache_size", ":", "\n", "            ", "_parse", "=", "lru_cache", "(", "cache_size", ")", "(", "_parse", ")", "\n", "", "", "_write", "=", "out_file", ".", "write", "\n", "\n", "for", "token", "in", "iter_tokens", "(", "in_file", ")", ":", "\n", "        ", "_write", "(", "_parse", "(", "token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cli._iter_tokens_tokenize": [[268, 271], ["pymorphy2.tokenizers.simple_word_tokenize"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tokenizers.simple_word_tokenize"], ["", "", "def", "_iter_tokens_tokenize", "(", "fp", ")", ":", "\n", "    ", "\"\"\" Return an iterator of input tokens; each line is tokenized \"\"\"", "\n", "return", "(", "token", "for", "line", "in", "fp", "for", "token", "in", "simple_word_tokenize", "(", "line", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cli._iter_tokens_notokenize": [[273, 276], ["line.strip"], "function", ["None"], ["", "def", "_iter_tokens_notokenize", "(", "fp", ")", ":", "\n", "    ", "\"\"\" Return an iterator of input tokens; each line is a single token \"\"\"", "\n", "return", "(", "line", "for", "line", "in", "(", "line", ".", "strip", "(", ")", "for", "line", "in", "fp", ")", "if", "line", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cache.memoized_with_single_argument": [[23, 50], ["functools.wraps", "func"], "function", ["None"], ["", "", "def", "memoized_with_single_argument", "(", "cache", ")", ":", "\n", "    ", "\"\"\"\n    Basic caching decorator. It assumes a function only accepts\n    a single argument, which is used as a cache key.\n\n    >>> cache = {}\n    >>> @memoized_with_single_argument(cache)\n    ... def func(x):\n    ...     return x*2\n    >>> func(2)\n    4\n    >>> cache\n    {2: 4}\n    >>> cache[2] = 6\n    >>> func(2)\n    6\n    \"\"\"", "\n", "def", "decorator", "(", "func", ")", ":", "\n", "        ", "@", "functools", ".", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "arg", ")", ":", "\n", "            ", "if", "arg", "in", "cache", ":", "\n", "                ", "return", "cache", "[", "arg", "]", "\n", "", "res", "=", "func", "(", "arg", ")", "\n", "cache", "[", "arg", "]", "=", "res", "\n", "return", "res", "\n", "", "return", "wrapper", "\n", "", "return", "decorator", "\n", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.WordsDawg.__init__": [[30, 36], ["RecordDAWG.__init__", "dawg.assert_can_create", "RecordDAWG.__init__"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.__init__", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.assert_can_create", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.__init__"], ["def", "__init__", "(", "self", ",", "data", "=", "None", ")", ":", "\n", "        ", "if", "data", "is", "None", ":", "\n", "            ", "super", "(", "WordsDawg", ",", "self", ")", ".", "__init__", "(", "self", ".", "DATA_FORMAT", ")", "\n", "", "else", ":", "\n", "            ", "assert_can_create", "(", ")", "\n", "super", "(", "WordsDawg", ",", "self", ")", ".", "__init__", "(", "self", ".", "DATA_FORMAT", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.ConditionalProbDistDAWG.__init__": [[53, 63], ["IntCompletionDAWG.__init__", "dawg.assert_can_create", "IntCompletionDAWG.__init__", "int"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.__init__", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.assert_can_create", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.__init__"], ["def", "__init__", "(", "self", ",", "data", "=", "None", ")", ":", "\n", "        ", "if", "data", "is", "None", ":", "\n", "            ", "super", "(", "ConditionalProbDistDAWG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert_can_create", "(", ")", "\n", "dawg_data", "=", "(", "\n", "(", "\"%s:%s\"", "%", "(", "word", ",", "tag", ")", ",", "int", "(", "prob", "*", "self", ".", "MULTIPLIER", ")", ")", "\n", "for", "(", "word", ",", "tag", ")", ",", "prob", "in", "data", "\n", ")", "\n", "super", "(", "ConditionalProbDistDAWG", ",", "self", ")", ".", "__init__", "(", "dawg_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.ConditionalProbDistDAWG.prob": [[64, 67], ["dawg.ConditionalProbDistDAWG.get"], "methods", ["None"], ["", "", "def", "prob", "(", "self", ",", "word", ",", "tag", ")", ":", "\n", "        ", "dawg_key", "=", "\"%s:%s\"", "%", "(", "word", ",", "tag", ")", "\n", "return", "self", ".", "get", "(", "dawg_key", ",", "0", ")", "/", "self", ".", "MULTIPLIER", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.DawgPrefixMatcher.is_prefixed": [[70, 72], ["bool", "dawg.DawgPrefixMatcher.prefixes"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.PythonPrefixMatcher.prefixes"], ["    ", "def", "is_prefixed", "(", "self", ",", "word", ")", ":", "\n", "        ", "return", "bool", "(", "self", ".", "prefixes", "(", "word", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.PythonPrefixMatcher.__init__": [[75, 77], ["tuple"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prefixes", ")", ":", "\n", "        ", "self", ".", "_prefixes", "=", "tuple", "(", "prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.PythonPrefixMatcher.prefixes": [[78, 82], ["dawg.PythonPrefixMatcher.is_prefixed", "word.startswith"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.PythonPrefixMatcher.is_prefixed"], ["", "def", "prefixes", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_prefixed", "(", "word", ")", ":", "# fail-fast path", "\n", "            ", "return", "[", "]", "\n", "", "return", "[", "pref", "for", "pref", "in", "self", ".", "_prefixes", "if", "word", ".", "startswith", "(", "pref", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.PythonPrefixMatcher.is_prefixed": [[83, 85], ["word.startswith"], "methods", ["None"], ["", "def", "is_prefixed", "(", "self", ",", "word", ")", ":", "\n", "        ", "return", "word", ".", "startswith", "(", "self", ".", "_prefixes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.assert_can_create": [[13, 18], ["NotImplementedError"], "function", ["None"], ["", "def", "assert_can_create", "(", ")", ":", "\n", "    ", "if", "not", "EXTENSION_AVAILABLE", ":", "\n", "        ", "msg", "=", "(", "\"Creating of DAWGs with DAWG-Python is \"", "\n", "\"not supported; install 'dawg' package.\"", ")", "\n", "raise", "NotImplementedError", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset._select_grammeme_from.__init__": [[20, 45], ["type", "type.__eq__", "type.__hash__", "ValueError", "tagset._select_grammeme_from.__eq__"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.__eq__", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.__hash__", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.__eq__"], ["def", "__init__", "(", "self", ",", "grammeme_set", ")", ":", "\n", "        ", "self", ".", "grammeme_set", "=", "grammeme_set", "\n", "# ... are descriptors not magical enough?", "\n", "\n", "# In order to fight typos, raise an exception", "\n", "# if a result is compared to a grammeme which", "\n", "# is not in a set of allowed grammemes.", "\n", "_str", "=", "type", "(", "\"unicode string\"", ")", "\n", "\n", "class", "TypedGrammeme", "(", "_str", ")", ":", "\n", "            ", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "                ", "if", "other", "is", "None", ":", "\n", "                    ", "return", "False", "\n", "", "if", "other", "not", "in", "grammeme_set", ":", "\n", "                    ", "known_grammemes", "=", "\", \"", ".", "join", "(", "grammeme_set", ")", "\n", "raise", "ValueError", "(", "\"'%s' is not a valid grammeme for this attribute. Valid grammemes: %s\"", "%", "(", "other", ",", "known_grammemes", ")", ")", "\n", "", "return", "_str", ".", "__eq__", "(", "self", ",", "other", ")", "\n", "\n", "", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "                ", "return", "not", "self", ".", "__eq__", "(", "other", ")", "\n", "\n", "", "def", "__hash__", "(", "self", ")", ":", "\n", "                ", "return", "_str", ".", "__hash__", "(", "self", ")", "\n", "\n", "", "", "self", ".", "TypedGrammeme", "=", "TypedGrammeme", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset._select_grammeme_from.__get__": [[46, 55], ["next", "iter", "tagset._select_grammeme_from.TypedGrammeme"], "methods", ["None"], ["", "def", "__get__", "(", "self", ",", "instance", ",", "owner", ")", ":", "\n", "        ", "grammemes", "=", "self", ".", "grammeme_set", "&", "instance", ".", "grammemes", "\n", "\n", "if", "not", "grammemes", ":", "\n", "# XXX: type checks are not enforced in this case", "\n", "            ", "return", "None", "\n", "\n", "", "res", "=", "next", "(", "iter", "(", "grammemes", ")", ")", "\n", "return", "self", ".", "TypedGrammeme", "(", "res", ")", "if", "owner", ".", "typed_grammemes", "else", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.__init__": [[265, 285], ["tag.replace().split", "tuple", "tagset.OpencorporaTag._assert_grammemes_are_known", "set", "tag.replace", "intern", "str"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag._assert_grammemes_are_known"], ["def", "__init__", "(", "self", ",", "tag", ")", ":", "\n", "        ", "self", ".", "_str", "=", "tag", "\n", "# XXX: we loose information about which grammemes", "\n", "# belongs to lexeme and which belongs to form", "\n", "# (but this information seems useless for pymorphy2).", "\n", "\n", "# Hacks for better memory usage:", "\n", "# - store grammemes in a tuple and build a set only when needed;", "\n", "# - use byte strings for grammemes under Python 2.x;", "\n", "# - grammemes are interned.", "\n", "grammemes", "=", "tag", ".", "replace", "(", "' '", ",", "','", ",", "1", ")", ".", "split", "(", "','", ")", "\n", "grammemes_tuple", "=", "tuple", "(", "[", "intern", "(", "str", "(", "g", ")", ")", "for", "g", "in", "grammemes", "]", ")", "\n", "\n", "self", ".", "_assert_grammemes_are_known", "(", "set", "(", "grammemes_tuple", ")", ")", "\n", "\n", "self", ".", "_grammemes_tuple", "=", "grammemes_tuple", "\n", "self", ".", "_POS", "=", "self", ".", "_grammemes_tuple", "[", "0", "]", "\n", "self", ".", "_grammemes_cache", "=", "None", "\n", "self", ".", "_cyr_grammemes_cache", "=", "None", "\n", "self", ".", "_cyr", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.grammemes": [[300, 306], ["frozenset"], "methods", ["None"], ["@", "property", "\n", "def", "grammemes", "(", "self", ")", ":", "\n", "        ", "\"\"\" A frozenset with grammemes for this tag. \"\"\"", "\n", "if", "self", ".", "_grammemes_cache", "is", "None", ":", "\n", "            ", "self", ".", "_grammemes_cache", "=", "frozenset", "(", "self", ".", "_grammemes_tuple", ")", "\n", "", "return", "self", ".", "_grammemes_cache", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.grammemes_cyr": [[307, 314], ["frozenset"], "methods", ["None"], ["", "@", "property", "\n", "def", "grammemes_cyr", "(", "self", ")", ":", "\n", "        ", "\"\"\" A frozenset with Cyrillic grammemes for this tag. \"\"\"", "\n", "if", "self", ".", "_cyr_grammemes_cache", "is", "None", ":", "\n", "            ", "cyr_grammemes", "=", "[", "self", ".", "_LAT2CYR", "[", "g", "]", "for", "g", "in", "self", ".", "_grammemes_tuple", "]", "\n", "self", ".", "_cyr_grammemes_cache", "=", "frozenset", "(", "cyr_grammemes", ")", "\n", "", "return", "self", ".", "_cyr_grammemes_cache", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.cyr_repr": [[315, 321], ["tagset.OpencorporaTag.lat2cyr"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.lat2cyr"], ["", "@", "property", "\n", "def", "cyr_repr", "(", "self", ")", ":", "\n", "        ", "\"\"\" Cyrillic representation of this tag \"\"\"", "\n", "if", "self", ".", "_cyr", "is", "None", ":", "\n", "            ", "self", ".", "_cyr", "=", "self", ".", "lat2cyr", "(", "self", ")", "\n", "", "return", "self", ".", "_cyr", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.cyr2lat": [[322, 326], ["tagset._translate_tag"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset._translate_tag"], ["", "@", "classmethod", "\n", "def", "cyr2lat", "(", "cls", ",", "tag_or_grammeme", ")", ":", "\n", "        ", "\"\"\" Return Latin representation for ``tag_or_grammeme`` string \"\"\"", "\n", "return", "_translate_tag", "(", "tag_or_grammeme", ",", "cls", ".", "_CYR2LAT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.lat2cyr": [[327, 331], ["tagset._translate_tag"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset._translate_tag"], ["", "@", "classmethod", "\n", "def", "lat2cyr", "(", "cls", ",", "tag_or_grammeme", ")", ":", "\n", "        ", "\"\"\" Return Cyrillic representation for ``tag_or_grammeme`` string \"\"\"", "\n", "return", "_translate_tag", "(", "tag_or_grammeme", ",", "cls", ".", "_LAT2CYR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.__contains__": [[332, 348], ["isinstance", "tagset.OpencorporaTag._assert_grammemes_are_known", "tagset.OpencorporaTag.grammeme_is_known", "ValueError"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag._assert_grammemes_are_known", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.grammeme_is_known"], ["", "def", "__contains__", "(", "self", ",", "grammeme", ")", ":", "\n", "\n", "# {'NOUN', 'sing'} in tag", "\n", "        ", "if", "isinstance", "(", "grammeme", ",", "(", "set", ",", "frozenset", ")", ")", ":", "\n", "            ", "if", "grammeme", "<=", "self", ".", "grammemes", ":", "\n", "                ", "return", "True", "\n", "", "self", ".", "_assert_grammemes_are_known", "(", "grammeme", ")", "\n", "return", "False", "\n", "\n", "# 'NOUN' in tag", "\n", "", "if", "grammeme", "in", "self", ".", "grammemes", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "if", "not", "self", ".", "grammeme_is_known", "(", "grammeme", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Grammeme is unknown: %s\"", "%", "grammeme", ")", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.__str__": [[351, 353], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_str", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.__repr__": [[354, 356], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"OpencorporaTag('%s')\"", "%", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.__eq__": [[358, 360], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "_grammemes_tuple", "==", "other", ".", "_grammemes_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.__ne__": [[361, 363], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "_grammemes_tuple", "!=", "other", ".", "_grammemes_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.__lt__": [[364, 366], ["None"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "_grammemes_tuple", "<", "other", ".", "_grammemes_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.__gt__": [[367, 369], ["None"], "methods", ["None"], ["", "def", "__gt__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "_grammemes_tuple", ">", "other", ".", "_grammemes_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.__hash__": [[370, 372], ["hash"], "methods", ["None"], ["", "def", "__hash__", "(", "self", ")", ":", "\n", "        ", "return", "hash", "(", "self", ".", "_grammemes_tuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.__len__": [[373, 375], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_grammemes_tuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.__reduce__": [[376, 378], ["None"], "methods", ["None"], ["", "def", "__reduce__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ",", "(", "self", ".", "_str", ",", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.is_productive": [[380, 382], ["None"], "methods", ["None"], ["", "def", "is_productive", "(", "self", ")", ":", "\n", "        ", "return", "not", "self", ".", "grammemes", "&", "self", ".", "_NON_PRODUCTIVE_GRAMMEMES", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag._is_unknown": [[383, 385], ["None"], "methods", ["None"], ["", "def", "_is_unknown", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_POS", "not", "in", "self", ".", "PARTS_OF_SPEECH", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.grammeme_is_known": [[386, 390], ["cls._assert_grammemes_initialized"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag._assert_grammemes_initialized"], ["", "@", "classmethod", "\n", "def", "grammeme_is_known", "(", "cls", ",", "grammeme", ")", ":", "\n", "        ", "cls", ".", "_assert_grammemes_initialized", "(", ")", "\n", "return", "grammeme", "in", "cls", ".", "KNOWN_GRAMMEMES", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag._assert_grammemes_are_known": [[391, 398], ["cls._assert_grammemes_initialized", "ValueError", "sorted"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag._assert_grammemes_initialized"], ["", "@", "classmethod", "\n", "def", "_assert_grammemes_are_known", "(", "cls", ",", "grammemes", ")", ":", "\n", "        ", "if", "not", "grammemes", "<=", "cls", ".", "KNOWN_GRAMMEMES", ":", "\n", "            ", "cls", ".", "_assert_grammemes_initialized", "(", ")", "\n", "unknown", "=", "grammemes", "-", "cls", ".", "KNOWN_GRAMMEMES", "\n", "unknown_repr", "=", "\", \"", ".", "join", "(", "[", "\"'%s'\"", "%", "g", "for", "g", "in", "sorted", "(", "unknown", ")", "]", ")", "\n", "raise", "ValueError", "(", "\"Grammemes are unknown: {%s}\"", "%", "unknown_repr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag._assert_grammemes_initialized": [[399, 404], ["RuntimeError"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "_assert_grammemes_initialized", "(", "cls", ")", ":", "\n", "        ", "if", "not", "cls", ".", "KNOWN_GRAMMEMES", ":", "\n", "            ", "msg", "=", "\"The class was not properly initialized.\"", "\n", "raise", "RuntimeError", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.updated_grammemes": [[405, 416], ["tagset.OpencorporaTag.grammeme_is_known", "ValueError"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.grammeme_is_known"], ["", "", "def", "updated_grammemes", "(", "self", ",", "required", ")", ":", "\n", "        ", "\"\"\"\n        Return a new set of grammemes with ``required`` grammemes added\n        and incompatible grammemes removed.\n        \"\"\"", "\n", "new_grammemes", "=", "self", ".", "grammemes", "|", "required", "\n", "for", "grammeme", "in", "required", ":", "\n", "            ", "if", "not", "self", ".", "grammeme_is_known", "(", "grammeme", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Unknown grammeme: %s\"", "%", "grammeme", ")", "\n", "", "new_grammemes", "-=", "self", ".", "_GRAMMEME_INCOMPATIBLE", "[", "grammeme", "]", "\n", "", "return", "new_grammemes", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.fix_rare_cases": [[417, 423], ["frozenset", "cls.RARE_CASES.get"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "fix_rare_cases", "(", "cls", ",", "grammemes", ")", ":", "\n", "        ", "\"\"\"\n        Replace rare cases (loc2/voct/...) with common ones (loct/nomn/...).\n        \"\"\"", "\n", "return", "frozenset", "(", "cls", ".", "RARE_CASES", ".", "get", "(", "g", ",", "g", ")", "for", "g", "in", "grammemes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.add_grammemes_to_known": [[424, 431], ["cls.KNOWN_GRAMMEMES.add"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "add_grammemes_to_known", "(", "cls", ",", "lat", ",", "cyr", ",", "overwrite", "=", "True", ")", ":", "\n", "        ", "if", "not", "overwrite", "and", "lat", "in", "cls", ".", "KNOWN_GRAMMEMES", ":", "\n", "            ", "return", "\n", "", "cls", ".", "KNOWN_GRAMMEMES", ".", "add", "(", "lat", ")", "\n", "cls", ".", "_LAT2CYR", "[", "lat", "]", "=", "cyr", "\n", "cls", ".", "_CYR2LAT", "[", "cyr", "]", "=", "lat", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag._init_grammemes": [[432, 474], ["set", "dict", "collections.defaultdict", "enumerate", "cls._EXTRA_INCOMPATIBLE.items", "enumerate", "cls.add_grammemes_to_known", "dict.get", "g_set.copy", "cls._EXTRA_INCOMPATIBLE.get", "frozenset", "children[].add", "children[].add", "g_set.update", "set", "set"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.add_grammemes_to_known"], ["", "@", "classmethod", "\n", "def", "_init_grammemes", "(", "cls", ",", "dict_grammemes", ")", ":", "\n", "        ", "\"\"\"\n        Initialize various class attributes with grammeme\n        information obtained from XML dictionary.\n\n        ``dict_grammemes`` is a list of tuples::\n\n            [\n                (name, parent, alias, description),\n                ...\n            ]\n\n        \"\"\"", "\n", "cls", ".", "KNOWN_GRAMMEMES", "=", "set", "(", ")", "\n", "cls", ".", "_CYR2LAT", "=", "{", "}", "\n", "cls", ".", "_LAT2CYR", "=", "{", "}", "\n", "for", "name", ",", "parent", ",", "alias", ",", "description", "in", "dict_grammemes", ":", "\n", "            ", "cls", ".", "add_grammemes_to_known", "(", "name", ",", "alias", ")", "\n", "\n", "", "gr", "=", "dict", "(", "(", "name", ",", "parent", ")", "for", "(", "name", ",", "parent", ",", "alias", ",", "description", ")", "in", "dict_grammemes", ")", "\n", "\n", "# figure out parents & children", "\n", "children", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "for", "index", ",", "(", "name", ",", "parent", ",", "alias", ",", "description", ")", "in", "enumerate", "(", "dict_grammemes", ")", ":", "\n", "            ", "if", "parent", ":", "\n", "                ", "children", "[", "parent", "]", ".", "add", "(", "name", ")", "\n", "", "if", "gr", ".", "get", "(", "parent", ",", "None", ")", ":", "# parent's parent", "\n", "                ", "children", "[", "gr", "[", "parent", "]", "]", ".", "add", "(", "name", ")", "\n", "\n", "# expand EXTRA_INCOMPATIBLE", "\n", "", "", "for", "grammeme", ",", "g_set", "in", "cls", ".", "_EXTRA_INCOMPATIBLE", ".", "items", "(", ")", ":", "\n", "            ", "for", "g", "in", "g_set", ".", "copy", "(", ")", ":", "\n", "                ", "g_set", ".", "update", "(", "children", "[", "g", "]", ")", "\n", "\n", "# fill GRAMMEME_INDICES and GRAMMEME_INCOMPATIBLE", "\n", "", "", "for", "index", ",", "(", "name", ",", "parent", ",", "alias", ",", "description", ")", "in", "enumerate", "(", "dict_grammemes", ")", ":", "\n", "            ", "cls", ".", "_GRAMMEME_INDICES", "[", "name", "]", "=", "index", "\n", "incompatible", "=", "cls", ".", "_EXTRA_INCOMPATIBLE", ".", "get", "(", "name", ",", "set", "(", ")", ")", "\n", "incompatible", "=", "(", "incompatible", "|", "children", "[", "parent", "]", ")", "-", "set", "(", "[", "name", "]", ")", "\n", "\n", "cls", ".", "_GRAMMEME_INCOMPATIBLE", "[", "name", "]", "=", "frozenset", "(", "incompatible", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag._from_internal_tag": [[476, 480], ["None"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "_from_internal_tag", "(", "cls", ",", "tag", ")", ":", "\n", "        ", "\"\"\" Return tag string given internal tag string \"\"\"", "\n", "return", "tag", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag._from_internal_grammeme": [[481, 484], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_from_internal_grammeme", "(", "cls", ",", "grammeme", ")", ":", "\n", "        ", "return", "grammeme", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.numeral_agreement_grammemes": [[485, 513], ["set", "set", "set"], "methods", ["None"], ["", "def", "numeral_agreement_grammemes", "(", "self", ",", "num", ")", ":", "\n", "        ", "if", "(", "num", "%", "10", "==", "1", ")", "and", "(", "num", "%", "100", "!=", "11", ")", ":", "\n", "            ", "index", "=", "0", "\n", "", "elif", "(", "num", "%", "10", ">=", "2", ")", "and", "(", "num", "%", "10", "<=", "4", ")", "and", "(", "num", "%", "100", "<", "10", "or", "num", "%", "100", ">=", "20", ")", ":", "\n", "            ", "index", "=", "1", "\n", "", "else", ":", "\n", "            ", "index", "=", "2", "\n", "\n", "", "if", "self", ".", "POS", "not", "in", "(", "'NOUN'", ",", "'ADJF'", ",", "'PRTF'", ")", ":", "\n", "            ", "return", "set", "(", "[", "]", ")", "\n", "\n", "", "if", "self", ".", "POS", "==", "'NOUN'", "and", "self", ".", "case", "not", "in", "(", "'nomn'", ",", "'accs'", ")", ":", "\n", "            ", "if", "index", "==", "0", ":", "\n", "                ", "grammemes", "=", "set", "(", "[", "'sing'", ",", "self", ".", "case", "]", ")", "\n", "", "else", ":", "\n", "                ", "grammemes", "=", "set", "(", "[", "'plur'", ",", "self", ".", "case", "]", ")", "\n", "", "", "elif", "index", "==", "0", ":", "\n", "            ", "if", "self", ".", "case", "==", "'nomn'", ":", "\n", "                ", "grammemes", "=", "self", ".", "_NUMERAL_AGREEMENT_GRAMMEMES", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "grammemes", "=", "self", ".", "_NUMERAL_AGREEMENT_GRAMMEMES", "[", "1", "]", "\n", "", "", "elif", "self", ".", "POS", "==", "'NOUN'", "and", "index", "==", "1", ":", "\n", "            ", "grammemes", "=", "self", ".", "_NUMERAL_AGREEMENT_GRAMMEMES", "[", "2", "]", "\n", "", "elif", "self", ".", "POS", "in", "(", "'ADJF'", ",", "'PRTF'", ")", "and", "self", ".", "gender", "==", "'femn'", "and", "index", "==", "1", ":", "\n", "            ", "grammemes", "=", "self", ".", "_NUMERAL_AGREEMENT_GRAMMEMES", "[", "3", "]", "\n", "", "else", ":", "\n", "            ", "grammemes", "=", "self", ".", "_NUMERAL_AGREEMENT_GRAMMEMES", "[", "4", "]", "\n", "", "return", "grammemes", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.CyrillicOpencorporaTag._from_internal_tag": [[538, 544], ["cls._GRAMMEME_ALIAS_MAP.items", "tag.replace.replace.replace"], "methods", ["None"], ["@", "classmethod", "\n", "def", "_from_internal_tag", "(", "cls", ",", "tag", ")", ":", "\n", "        ", "for", "name", ",", "alias", "in", "cls", ".", "_GRAMMEME_ALIAS_MAP", ".", "items", "(", ")", ":", "\n", "            ", "if", "alias", ":", "\n", "                ", "tag", "=", "tag", ".", "replace", "(", "name", ",", "alias", ")", "\n", "", "", "return", "tag", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.CyrillicOpencorporaTag._from_internal_grammeme": [[545, 548], ["cls._GRAMMEME_ALIAS_MAP.get"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_from_internal_grammeme", "(", "cls", ",", "grammeme", ")", ":", "\n", "        ", "return", "cls", ".", "_GRAMMEME_ALIAS_MAP", ".", "get", "(", "grammeme", ",", "grammeme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.CyrillicOpencorporaTag._init_grammemes": [[549, 572], ["cls._init_alias_map", "tagset.OpencorporaTag._init_grammemes", "collections.defaultdict", "cls._GRAMMEME_INDICES.items", "collections.defaultdict", "cls._GRAMMEME_INCOMPATIBLE.items", "set", "set", "cls._from_internal_grammeme", "cls._from_internal_grammeme", "cls._from_internal_grammeme", "cls._from_internal_grammeme"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.CyrillicOpencorporaTag._init_alias_map", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations.AbbreviatedPatronymicAnalyzer._init_grammemes", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.CyrillicOpencorporaTag._from_internal_grammeme", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.CyrillicOpencorporaTag._from_internal_grammeme", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.CyrillicOpencorporaTag._from_internal_grammeme", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.CyrillicOpencorporaTag._from_internal_grammeme"], ["", "@", "classmethod", "\n", "def", "_init_grammemes", "(", "cls", ",", "dict_grammemes", ")", ":", "\n", "        ", "\"\"\"\n        Initialize various class attributes with grammeme\n        information obtained from XML dictionary.\n        \"\"\"", "\n", "cls", ".", "_init_alias_map", "(", "dict_grammemes", ")", "\n", "super", "(", "CyrillicOpencorporaTag", ",", "cls", ")", ".", "_init_grammemes", "(", "dict_grammemes", ")", "\n", "\n", "GRAMMEME_INDICES", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "for", "name", ",", "idx", "in", "cls", ".", "_GRAMMEME_INDICES", ".", "items", "(", ")", ":", "\n", "            ", "GRAMMEME_INDICES", "[", "cls", ".", "_from_internal_grammeme", "(", "name", ")", "]", "=", "idx", "\n", "", "cls", ".", "_GRAMMEME_INDICES", "=", "GRAMMEME_INDICES", "\n", "\n", "GRAMMEME_INCOMPATIBLE", "=", "collections", ".", "defaultdict", "(", "set", ")", "\n", "for", "name", ",", "value", "in", "cls", ".", "_GRAMMEME_INCOMPATIBLE", ".", "items", "(", ")", ":", "\n", "            ", "GRAMMEME_INCOMPATIBLE", "[", "cls", ".", "_from_internal_grammeme", "(", "name", ")", "]", "=", "set", "(", "[", "\n", "cls", ".", "_from_internal_grammeme", "(", "gr", ")", "for", "gr", "in", "value", "\n", "]", ")", "\n", "", "cls", ".", "_GRAMMEME_INCOMPATIBLE", "=", "GRAMMEME_INCOMPATIBLE", "\n", "\n", "cls", ".", "_NON_PRODUCTIVE_GRAMMEMES", "=", "set", "(", "[", "\n", "cls", ".", "_from_internal_grammeme", "(", "gr", ")", "for", "gr", "in", "cls", ".", "_NON_PRODUCTIVE_GRAMMEMES", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.CyrillicOpencorporaTag._init_alias_map": [[574, 578], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_init_alias_map", "(", "cls", ",", "dict_grammemes", ")", ":", "\n", "        ", "for", "name", ",", "parent", ",", "alias", ",", "description", "in", "dict_grammemes", ":", "\n", "            ", "cls", ".", "_GRAMMEME_ALIAS_MAP", "[", "name", "]", "=", "alias", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset._translate_tag": [[580, 591], ["isinstance", "str", "tagset._translate_comma_separated", "str.split"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset._translate_comma_separated"], ["", "", "", "def", "_translate_tag", "(", "tag", ",", "mapping", ")", ":", "\n", "    ", "\"\"\"\n    Translate ``tag`` string according to ``mapping``, assuming grammemes\n    are separated by commas or whitespaces. Commas/whitespaces positions\n    are preserved.\n    \"\"\"", "\n", "if", "isinstance", "(", "tag", ",", "OpencorporaTag", ")", ":", "\n", "        ", "tag", "=", "str", "(", "tag", ")", "\n", "", "return", "\" \"", ".", "join", "(", "[", "\n", "_translate_comma_separated", "(", "whitespace_separated_part", ",", "mapping", ")", "\n", "for", "whitespace_separated_part", "in", "tag", ".", "split", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset._translate_comma_separated": [[594, 597], ["mapping.get", "tag_part.split"], "function", ["None"], ["", "def", "_translate_comma_separated", "(", "tag_part", ",", "mapping", ")", ":", "\n", "    ", "grammemes", "=", "[", "mapping", ".", "get", "(", "tok", ",", "tok", ")", "for", "tok", "in", "tag_part", ".", "split", "(", "','", ")", "]", "\n", "return", "\",\"", ".", "join", "(", "grammemes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tokenizers.simple_word_tokenize": [[8, 14], ["_split", "t.isspace"], "function", ["None"], ["def", "simple_word_tokenize", "(", "text", ",", "_split", "=", "GROUPING_SPACE_REGEX", ".", "split", ")", ":", "\n", "    ", "\"\"\"\n    Split text into tokens. Don't split by a hyphen.\n    Preserve punctuation, but not whitespaces.\n    \"\"\"", "\n", "return", "[", "t", "for", "t", "in", "_split", "(", "text", ")", "if", "t", "and", "not", "t", ".", "isspace", "(", ")", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.Parse.inflect": [[34, 37], ["analyzer.Parse._morph._inflect"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._inflect"], ["def", "inflect", "(", "self", ",", "required_grammemes", ")", ":", "\n", "        ", "res", "=", "self", ".", "_morph", ".", "_inflect", "(", "self", ",", "required_grammemes", ")", "\n", "return", "None", "if", "not", "res", "else", "res", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.Parse.make_agree_with_number": [[38, 43], ["analyzer.Parse.inflect", "analyzer.Parse.tag.numeral_agreement_grammemes"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.Parse.inflect", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.numeral_agreement_grammemes"], ["", "def", "make_agree_with_number", "(", "self", ",", "num", ")", ":", "\n", "        ", "\"\"\"\n        Inflect the word so that it agrees with ``num``\n        \"\"\"", "\n", "return", "self", ".", "inflect", "(", "self", ".", "tag", ".", "numeral_agreement_grammemes", "(", "num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.Parse.lexeme": [[44, 48], ["analyzer.Parse._morph.get_lexeme"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.get_lexeme"], ["", "@", "property", "\n", "def", "lexeme", "(", "self", ")", ":", "\n", "        ", "\"\"\" A lexeme this form belongs to. \"\"\"", "\n", "return", "self", ".", "_morph", ".", "get_lexeme", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.Parse.is_known": [[49, 55], ["analyzer.Parse._dict.word_is_known"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.word_is_known"], ["", "@", "property", "\n", "def", "is_known", "(", "self", ")", ":", "\n", "        ", "\"\"\" True if this form is a known dictionary form. \"\"\"", "\n", "return", "self", ".", "_dict", ".", "word_is_known", "(", "\n", "word", "=", "self", ".", "word", ",", "\n", "substitutes_compiled", "=", "self", ".", "_morph", ".", "char_substitutes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.Parse.normalized": [[57, 62], ["analyzer.Parse.__class__", "last_method[].normalized"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.normalized"], ["", "@", "property", "\n", "def", "normalized", "(", "self", ")", ":", "\n", "        ", "\"\"\" A :class:`Parse` instance for :attr:`self.normal_form`. \"\"\"", "\n", "last_method", "=", "self", ".", "methods_stack", "[", "-", "1", "]", "\n", "return", "self", ".", "__class__", "(", "*", "last_method", "[", "0", "]", ".", "normalized", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.ProbabilityEstimator.__init__": [[69, 72], ["os.path.join", "pymorphy2.dawg.ConditionalProbDistDAWG().load", "pymorphy2.dawg.ConditionalProbDistDAWG"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dict_path", ")", ":", "\n", "        ", "cpd_path", "=", "os", ".", "path", ".", "join", "(", "dict_path", ",", "'p_t_given_w.intdawg'", ")", "\n", "self", ".", "p_t_given_w", "=", "ConditionalProbDistDAWG", "(", ")", ".", "load", "(", "cpd_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.ProbabilityEstimator.apply_to_parses": [[73, 94], ["sorted", "analyzer.ProbabilityEstimator.p_t_given_w.prob", "sum", "sum", "map", "zip"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.ConditionalProbDistDAWG.prob"], ["", "def", "apply_to_parses", "(", "self", ",", "word", ",", "word_lower", ",", "parses", ")", ":", "\n", "        ", "if", "not", "parses", ":", "\n", "            ", "return", "parses", "\n", "\n", "", "probs", "=", "[", "self", ".", "p_t_given_w", ".", "prob", "(", "word_lower", ",", "tag", ")", "\n", "for", "(", "word", ",", "tag", ",", "normal_form", ",", "score", ",", "methods_stack", ")", "in", "parses", "]", "\n", "\n", "if", "sum", "(", "probs", ")", "==", "0", ":", "\n", "# no P(t|w) information is available; return normalized estimate", "\n", "            ", "k", "=", "1.0", "/", "sum", "(", "map", "(", "_score_getter", ",", "parses", ")", ")", "\n", "return", "[", "\n", "(", "word", ",", "tag", ",", "normal_form", ",", "score", "*", "k", ",", "methods_stack", ")", "\n", "for", "(", "word", ",", "tag", ",", "normal_form", ",", "score", ",", "methods_stack", ")", "in", "parses", "\n", "]", "\n", "\n", "# replace score with P(t|w) probability", "\n", "", "return", "sorted", "(", "[", "\n", "(", "word", ",", "tag", ",", "normal_form", ",", "prob", ",", "methods_stack", ")", "\n", "for", "(", "word", ",", "tag", ",", "normal_form", ",", "score", ",", "methods_stack", ")", ",", "prob", "\n", "in", "zip", "(", "parses", ",", "probs", ")", "\n", "]", ",", "key", "=", "_score_getter", ",", "reverse", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.ProbabilityEstimator.apply_to_tags": [[95, 101], ["sorted", "analyzer.ProbabilityEstimator.p_t_given_w.prob"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.ConditionalProbDistDAWG.prob"], ["", "def", "apply_to_tags", "(", "self", ",", "word", ",", "word_lower", ",", "tags", ")", ":", "\n", "        ", "if", "not", "tags", ":", "\n", "            ", "return", "tags", "\n", "", "return", "sorted", "(", "tags", ",", "\n", "key", "=", "lambda", "tag", ":", "self", ".", "p_t_given_w", ".", "prob", "(", "word_lower", ",", "tag", ")", ",", "\n", "reverse", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.__init__": [[190, 225], ["analyzer.MorphAnalyzer.choose_dictionary_path", "pymorphy2.opencorpora_dict.Dictionary", "analyzer.MorphAnalyzer.choose_language", "analyzer.MorphAnalyzer._get_prob_estimator", "analyzer.MorphAnalyzer._init_char_substitutes", "analyzer.MorphAnalyzer._init_units", "type"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.choose_dictionary_path", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.choose_language", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._get_prob_estimator", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._init_char_substitutes", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._init_units"], ["def", "__init__", "(", "self", ",", "path", "=", "None", ",", "lang", "=", "None", ",", "result_type", "=", "Parse", ",", "units", "=", "None", ",", "\n", "probability_estimator_cls", "=", "auto", ",", "char_substitutes", "=", "auto", ")", ":", "\n", "\n", "# save arguments for pickling/unpickling", "\n", "        ", "self", ".", "_path", "=", "path", "\n", "self", ".", "_lang", "=", "lang", "\n", "\n", "if", "path", "is", "None", "and", "lang", "is", "None", ":", "\n", "            ", "lang", "=", "'ru'", "\n", "\n", "", "path", "=", "self", ".", "choose_dictionary_path", "(", "path", ",", "lang", ")", "\n", "\n", "with", "self", ".", "_lock", ":", "\n", "            ", "self", ".", "dictionary", "=", "opencorpora_dict", ".", "Dictionary", "(", "path", ")", "\n", "self", ".", "lang", "=", "self", ".", "choose_language", "(", "self", ".", "dictionary", ",", "lang", ")", "\n", "\n", "self", ".", "prob_estimator", "=", "self", ".", "_get_prob_estimator", "(", "\n", "probability_estimator_cls", ",", "self", ".", "dictionary", ",", "path", "\n", ")", "\n", "\n", "if", "result_type", "is", "not", "None", ":", "\n", "# create a subclass with the same name,", "\n", "# but with _morph attribute bound to self", "\n", "                ", "res_type", "=", "type", "(", "\n", "result_type", ".", "__name__", ",", "\n", "(", "result_type", ",", ")", ",", "\n", "{", "'_morph'", ":", "self", ",", "'_dict'", ":", "self", ".", "dictionary", "}", "\n", ")", "\n", "self", ".", "_result_type", "=", "res_type", "\n", "", "else", ":", "\n", "                ", "self", ".", "_result_type", "=", "None", "\n", "\n", "", "self", ".", "_result_type_orig", "=", "result_type", "\n", "self", ".", "_init_char_substitutes", "(", "char_substitutes", ")", "\n", "self", ".", "_init_units", "(", "units", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._init_units": [[226, 239], ["analyzer.MorphAnalyzer._config_value", "isinstance", "analyzer.MorphAnalyzer._units.append", "analyzer.MorphAnalyzer._units.append", "analyzer.MorphAnalyzer._units.append", "analyzer.MorphAnalyzer._bound_unit", "analyzer.MorphAnalyzer._bound_unit", "analyzer.MorphAnalyzer._bound_unit"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._config_value", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._bound_unit", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._bound_unit", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._bound_unit"], ["", "", "def", "_init_units", "(", "self", ",", "units_unbound", "=", "None", ")", ":", "\n", "        ", "if", "units_unbound", "is", "None", ":", "\n", "            ", "units_unbound", "=", "self", ".", "_config_value", "(", "'DEFAULT_UNITS'", ",", "self", ".", "DEFAULT_UNITS", ")", "\n", "\n", "", "self", ".", "_units_unbound", "=", "units_unbound", "\n", "self", ".", "_units", "=", "[", "]", "\n", "for", "item", "in", "units_unbound", ":", "\n", "            ", "if", "isinstance", "(", "item", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "                ", "for", "unit", "in", "item", "[", ":", "-", "1", "]", ":", "\n", "                    ", "self", ".", "_units", ".", "append", "(", "(", "self", ".", "_bound_unit", "(", "unit", ")", ",", "False", ")", ")", "\n", "", "self", ".", "_units", ".", "append", "(", "(", "self", ".", "_bound_unit", "(", "item", "[", "-", "1", "]", ")", ",", "True", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_units", ".", "append", "(", "(", "self", ".", "_bound_unit", "(", "item", ")", ",", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._init_char_substitutes": [[240, 244], ["analyzer.MorphAnalyzer.dictionary.words.compile_replaces", "analyzer.MorphAnalyzer._config_value"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._config_value"], ["", "", "", "def", "_init_char_substitutes", "(", "self", ",", "char_substitutes", ")", ":", "\n", "        ", "if", "char_substitutes", "is", "auto", ":", "\n", "            ", "char_substitutes", "=", "self", ".", "_config_value", "(", "'CHAR_SUBSTITUTES'", ",", "self", ".", "DEFAULT_SUBSTITUTES", ")", "\n", "", "self", ".", "char_substitutes", "=", "self", ".", "dictionary", ".", "words", ".", "compile_replaces", "(", "char_substitutes", "or", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._bound_unit": [[245, 249], ["unit.clone.clone.clone", "unit.clone.clone.init"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.BaseAnalyzerUnit.clone", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init"], ["", "def", "_bound_unit", "(", "self", ",", "unit", ")", ":", "\n", "        ", "unit", "=", "unit", ".", "clone", "(", ")", "\n", "unit", ".", "init", "(", "self", ")", "\n", "return", "unit", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._lang_default_config": [[250, 258], ["aliases.get", "getattr", "hasattr", "warnings.warn"], "methods", ["None"], ["", "def", "_lang_default_config", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "lang", "is", "not", "None", "\n", "aliases", "=", "{", "'ru-old'", ":", "'ru'", "}", "\n", "lang", "=", "aliases", ".", "get", "(", "self", ".", "lang", ",", "self", ".", "lang", ")", "\n", "if", "not", "hasattr", "(", "pymorphy2", ".", "lang", ",", "lang", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"unknown language code: %r\"", "%", "lang", ")", "\n", "return", "None", "\n", "", "return", "getattr", "(", "pymorphy2", ".", "lang", ",", "lang", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._config_value": [[259, 262], ["analyzer.MorphAnalyzer._lang_default_config", "getattr"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._lang_default_config"], ["", "def", "_config_value", "(", "self", ",", "key", ",", "default", ")", ":", "\n", "        ", "config", "=", "self", ".", "_lang_default_config", "(", ")", "\n", "return", "getattr", "(", "config", ",", "key", ",", "default", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._get_prob_estimator": [[263, 271], ["estimator_cls", "dictionary.meta.get"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_get_prob_estimator", "(", "cls", ",", "estimator_cls", ",", "dictionary", ",", "path", ")", ":", "\n", "        ", "if", "estimator_cls", "is", "auto", ":", "\n", "            ", "if", "dictionary", ".", "meta", ".", "get", "(", "'P(t|w)'", ")", ":", "\n", "                ", "estimator_cls", "=", "ProbabilityEstimator", "\n", "", "", "if", "estimator_cls", "is", "auto", "or", "estimator_cls", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "estimator_cls", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.choose_dictionary_path": [[272, 281], ["analyzer.lang_dict_path"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.lang_dict_path"], ["", "@", "classmethod", "\n", "def", "choose_dictionary_path", "(", "cls", ",", "path", "=", "None", ",", "lang", "=", "None", ")", ":", "\n", "        ", "if", "path", "is", "not", "None", ":", "\n", "            ", "return", "path", "\n", "\n", "", "if", "cls", ".", "DICT_PATH_ENV_VARIABLE", "in", "os", ".", "environ", ":", "\n", "            ", "return", "os", ".", "environ", "[", "cls", ".", "DICT_PATH_ENV_VARIABLE", "]", "\n", "\n", "", "return", "lang_dict_path", "(", "lang", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.choose_language": [[282, 300], ["warnings.warn", "warnings.warn"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "choose_language", "(", "cls", ",", "dictionary", ",", "lang", ")", ":", "\n", "        ", "if", "lang", "is", "None", ":", "\n", "            ", "if", "dictionary", ".", "lang", "is", "None", ":", "\n", "# this could be e.g. old pymorphy2 dictionary", "\n", "                ", "warnings", ".", "warn", "(", "\"Dictionary doesn't declare its language; \"", "\n", "\"assuming 'ru'\"", ")", "\n", "return", "'ru'", "\n", "", "return", "dictionary", ".", "lang", "\n", "\n", "", "if", "dictionary", ".", "lang", "!=", "lang", ":", "\n", "# allow incorrect 'lang' values, but show a warning", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"Dictionary language (%r) doesn't match \"", "\n", "\"analyzer language (%r).\"", "%", "(", "dictionary", ".", "lang", ",", "lang", ")", "\n", ")", "\n", "\n", "", "return", "lang", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.parse": [[301, 327], ["set", "word.lower", "analyzer.MorphAnalyzer.extend", "analyzer.MorphAnalyzer.prob_estimator.apply_to_parses", "analyzer.MorphAnalyzer._result_type", "analyzer.parse"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.ProbabilityEstimator.apply_to_parses", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "def", "parse", "(", "self", ",", "word", ")", ":", "\n", "        ", "\"\"\"\n        Analyze the word and return a list of :class:`pymorphy2.analyzer.Parse`\n        namedtuples:\n\n            Parse(word, tag, normal_form, para_id, idx, _score)\n\n        (or plain tuples if ``result_type=None`` was used in constructor).\n        \"\"\"", "\n", "res", "=", "[", "]", "\n", "seen", "=", "set", "(", ")", "\n", "word_lower", "=", "word", ".", "lower", "(", ")", "\n", "\n", "for", "analyzer", ",", "is_terminal", "in", "self", ".", "_units", ":", "\n", "            ", "res", ".", "extend", "(", "analyzer", ".", "parse", "(", "word", ",", "word_lower", ",", "seen", ")", ")", "\n", "\n", "if", "is_terminal", "and", "res", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "self", ".", "prob_estimator", "is", "not", "None", ":", "\n", "            ", "res", "=", "self", ".", "prob_estimator", ".", "apply_to_parses", "(", "word", ",", "word_lower", ",", "res", ")", "\n", "\n", "", "if", "self", ".", "_result_type", "is", "None", ":", "\n", "            ", "return", "res", "\n", "\n", "", "return", "[", "self", ".", "_result_type", "(", "*", "p", ")", "for", "p", "in", "res", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.tag": [[328, 342], ["set", "word.lower", "analyzer.MorphAnalyzer.extend", "analyzer.MorphAnalyzer.prob_estimator.apply_to_tags", "analyzer.tag"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.ProbabilityEstimator.apply_to_tags", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag"], ["", "def", "tag", "(", "self", ",", "word", ")", ":", "\n", "        ", "res", "=", "[", "]", "\n", "seen", "=", "set", "(", ")", "\n", "word_lower", "=", "word", ".", "lower", "(", ")", "\n", "\n", "for", "analyzer", ",", "is_terminal", "in", "self", ".", "_units", ":", "\n", "            ", "res", ".", "extend", "(", "analyzer", ".", "tag", "(", "word", ",", "word_lower", ",", "seen", ")", ")", "\n", "\n", "if", "is_terminal", "and", "res", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "self", ".", "prob_estimator", "is", "not", "None", ":", "\n", "            ", "res", "=", "self", ".", "prob_estimator", ".", "apply_to_tags", "(", "word", ",", "word_lower", ",", "res", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.normal_forms": [[343, 356], ["set", "analyzer.MorphAnalyzer.parse", "result.append", "set.add"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "def", "normal_forms", "(", "self", ",", "word", ")", ":", "\n", "        ", "\"\"\"\n        Return a list of word normal forms.\n        \"\"\"", "\n", "seen", "=", "set", "(", ")", "\n", "result", "=", "[", "]", "\n", "\n", "for", "p", "in", "self", ".", "parse", "(", "word", ")", ":", "\n", "            ", "normal_form", "=", "p", "[", "2", "]", "\n", "if", "normal_form", "not", "in", "seen", ":", "\n", "                ", "result", ".", "append", "(", "normal_form", ")", "\n", "seen", ".", "add", "(", "normal_form", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.get_lexeme": [[359, 370], ["last_method[].get_lexeme", "analyzer.MorphAnalyzer._result_type"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.get_lexeme"], ["", "def", "get_lexeme", "(", "self", ",", "form", ")", ":", "\n", "        ", "\"\"\"\n        Return the lexeme this parse belongs to.\n        \"\"\"", "\n", "methods_stack", "=", "form", "[", "4", "]", "\n", "last_method", "=", "methods_stack", "[", "-", "1", "]", "\n", "result", "=", "last_method", "[", "0", "]", ".", "get_lexeme", "(", "form", ")", "\n", "\n", "if", "self", ".", "_result_type", "is", "None", ":", "\n", "            ", "return", "result", "\n", "", "return", "[", "self", ".", "_result_type", "(", "*", "p", ")", "for", "p", "in", "result", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer._inflect": [[371, 386], ["form[].updated_grammemes", "heapq.nlargest", "analyzer.MorphAnalyzer.TagClass.fix_rare_cases", "analyzer.MorphAnalyzer.get_lexeme", "len", "analyzer.MorphAnalyzer.get_lexeme", "len"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.updated_grammemes", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.fix_rare_cases", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.get_lexeme", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.get_lexeme"], ["", "def", "_inflect", "(", "self", ",", "form", ",", "required_grammemes", ")", ":", "\n", "        ", "possible_results", "=", "[", "f", "for", "f", "in", "self", ".", "get_lexeme", "(", "form", ")", "\n", "if", "required_grammemes", "<=", "f", "[", "1", "]", ".", "grammemes", "]", "\n", "\n", "if", "not", "possible_results", ":", "\n", "            ", "required_grammemes", "=", "self", ".", "TagClass", ".", "fix_rare_cases", "(", "required_grammemes", ")", "\n", "possible_results", "=", "[", "f", "for", "f", "in", "self", ".", "get_lexeme", "(", "form", ")", "\n", "if", "required_grammemes", "<=", "f", "[", "1", "]", ".", "grammemes", "]", "\n", "\n", "", "grammemes", "=", "form", "[", "1", "]", ".", "updated_grammemes", "(", "required_grammemes", ")", "\n", "def", "similarity", "(", "frm", ")", ":", "\n", "            ", "tag", "=", "frm", "[", "1", "]", "\n", "return", "len", "(", "grammemes", "&", "tag", ".", "grammemes", ")", "-", "0.1", "*", "len", "(", "grammemes", "^", "tag", ".", "grammemes", ")", "\n", "\n", "", "return", "heapq", ".", "nlargest", "(", "1", ",", "possible_results", ",", "key", "=", "similarity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.iter_known_word_parses": [[389, 404], ["analyzer.MorphAnalyzer.dictionary.iter_known_words", "analyzer.MorphAnalyzer._result_type"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.iter_known_words"], ["", "def", "iter_known_word_parses", "(", "self", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "\"\"\"\n        Return an iterator over parses of dictionary words that starts\n        with a given prefix (default empty prefix means \"all words\").\n        \"\"\"", "\n", "\n", "# XXX: this method currently assumes that", "\n", "# units.DictionaryAnalyzer is the first analyzer unit.", "\n", "for", "word", ",", "tag", ",", "normal_form", ",", "para_id", ",", "idx", "in", "self", ".", "dictionary", ".", "iter_known_words", "(", "prefix", ")", ":", "\n", "            ", "methods", "=", "(", "(", "self", ".", "_units", "[", "0", "]", "[", "0", "]", ",", "word", ",", "para_id", ",", "idx", ")", ",", ")", "\n", "parse", "=", "(", "word", ",", "tag", ",", "normal_form", ",", "1.0", ",", "methods", ")", "\n", "if", "self", ".", "_result_type", "is", "None", ":", "\n", "                ", "yield", "parse", "\n", "", "else", ":", "\n", "                ", "yield", "self", ".", "_result_type", "(", "*", "parse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.word_is_known": [[405, 425], ["analyzer.MorphAnalyzer.dictionary.word_is_known", "word.lower"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.word_is_known"], ["", "", "", "def", "word_is_known", "(", "self", ",", "word", ",", "strict", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Check if a ``word`` is in the dictionary.\n\n        By default, some fuzziness is allowed, depending on a\n        dictionary - e.g. for Russian \u0451 letters replaced with \u0435 are handled.\n        Pass ``strict=True`` to make matching strict (e.g. if it is\n        guaranteed the ``word`` has correct \u0435/\u0451 or \u0433/\u0491 letters).\n\n        .. note::\n\n            Dictionary words are not always correct words;\n            the dictionary also contains incorrect forms which\n            are commonly used. So for spellchecking tasks this\n            method should be used with extra care.\n\n        \"\"\"", "\n", "return", "self", ".", "dictionary", ".", "word_is_known", "(", "\n", "word", "=", "word", ".", "lower", "(", ")", ",", "\n", "substitutes_compiled", "=", "None", "if", "strict", "else", "self", ".", "char_substitutes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.TagClass": [[427, 433], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "TagClass", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :rtype: pymorphy2.tagset.OpencorporaTag\n        \"\"\"", "\n", "return", "self", ".", "dictionary", ".", "Tag", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.cyr2lat": [[434, 437], ["analyzer.MorphAnalyzer.TagClass.cyr2lat"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.cyr2lat"], ["", "def", "cyr2lat", "(", "self", ",", "tag_or_grammeme", ")", ":", "\n", "        ", "\"\"\" Return Latin representation for ``tag_or_grammeme`` string \"\"\"", "\n", "return", "self", ".", "TagClass", ".", "cyr2lat", "(", "tag_or_grammeme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.lat2cyr": [[438, 441], ["analyzer.MorphAnalyzer.TagClass.lat2cyr"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.lat2cyr"], ["", "def", "lat2cyr", "(", "self", ",", "tag_or_grammeme", ")", ":", "\n", "        ", "\"\"\" Return Cyrillic representation for ``tag_or_grammeme`` string \"\"\"", "\n", "return", "self", ".", "TagClass", ".", "lat2cyr", "(", "tag_or_grammeme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.__reduce__": [[442, 445], ["None"], "methods", ["None"], ["", "def", "__reduce__", "(", "self", ")", ":", "\n", "        ", "args", "=", "(", "self", ".", "_path", ",", "self", ".", "_lang", ",", "self", ".", "_result_type_orig", ",", "self", ".", "_units_unbound", ")", "\n", "return", "self", ".", "__class__", ",", "args", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer._iter_entry_points": [[104, 117], ["pkg_resources.WorkingSet", "pkg_resources.WorkingSet.iter_entry_points"], "function", ["None"], ["", "", "def", "_iter_entry_points", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\" Like pkg_resources.iter_entry_points, but uses a WorkingSet which\n    is not populated at startup. This ensures that all entry points\n    are picked up, even if a package which provides them is installed\n    after the current process is started.\n\n    The main use case is to make ``!pip install pymorphy2`` work\n    within a Jupyter or Google Colab notebook.\n    See https://github.com/kmike/pymorphy2/issues/131\n    \"\"\"", "\n", "import", "pkg_resources", "\n", "ws", "=", "pkg_resources", ".", "WorkingSet", "(", ")", "\n", "return", "ws", ".", "iter_entry_points", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer._lang_dict_paths": [[119, 133], ["dict", "pymorphy2_dicts.get_path", "pkg.load().get_path", "analyzer._iter_entry_points", "pkg.load"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer._iter_entry_points"], ["", "def", "_lang_dict_paths", "(", ")", ":", "\n", "    ", "paths", "=", "dict", "(", "\n", "(", "pkg", ".", "name", ",", "pkg", ".", "load", "(", ")", ".", "get_path", "(", ")", ")", "\n", "for", "pkg", "in", "_iter_entry_points", "(", "'pymorphy2_dicts'", ")", "\n", ")", "\n", "\n", "# discovery of pymorphy2 v0.8 dicts", "\n", "try", ":", "\n", "        ", "import", "pymorphy2_dicts", "\n", "paths", "[", "'ru-old'", "]", "=", "pymorphy2_dicts", ".", "get_path", "(", ")", "\n", "", "except", "ImportError", ":", "\n", "        ", "pass", "\n", "\n", "", "return", "paths", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.lang_dict_path": [[135, 145], ["analyzer._lang_dict_paths", "ValueError", "list", "_lang_dict_paths.keys"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer._lang_dict_paths"], ["", "def", "lang_dict_path", "(", "lang", ")", ":", "\n", "    ", "\"\"\" Return language-specific dictionary path \"\"\"", "\n", "lang_paths", "=", "_lang_dict_paths", "(", ")", "\n", "if", "lang", "in", "lang_paths", ":", "\n", "        ", "return", "lang_paths", "[", "lang", "]", "\n", "\n", "", "raise", "ValueError", "(", "\n", "\"Can't find a dictionary for language %r. Installed languages: %r. \"", "\n", "\"Try installing pymorphy2-dicts-%s package.\"", "%", "(", "\n", "lang", ",", "list", "(", "lang_paths", ".", "keys", "(", ")", ")", ",", "lang", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.get_mem_usage": [[12, 24], ["psutil.Process", "os.getpid", "psutil.Process.memory_info", "psutil.Process.get_memory_info"], "function", ["None"], ["\n", "gc", ".", "disable", "(", ")", "\n", "times", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "repeats", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "func", "(", ")", "\n", "times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n", "\n", "", "gc", ".", "enable", "(", ")", "\n", "return", "inner_iterations", "/", "min", "(", "times", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.combinations_of_all_lengths": [[26, 43], ["itertools.chain", "itertools.combinations", "range", "len"], "function", ["None"], ["", "def", "bench", "(", "stmt", ",", "setup", ",", "op_count", "=", "1", ",", "repeats", "=", "3", ",", "runs", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    Runs ``stmt`` benchmark ``repeats``*``runs`` times,\n    selects the fastest run and returns the minimum time.\n    \"\"\"", "\n", "timer", "=", "timeit", ".", "Timer", "(", "stmt", ",", "setup", ")", "\n", "times", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "runs", ")", ":", "\n", "        ", "times", ".", "append", "(", "timer", ".", "timeit", "(", "repeats", ")", ")", "\n", "\n", "", "def", "op_time", "(", "t", ")", ":", "\n", "        ", "return", "op_count", "*", "repeats", "/", "t", "\n", "\n", "", "return", "op_time", "(", "min", "(", "times", ")", ")", "\n", "\n", "\n", "", "def", "format_bench", "(", "name", ",", "result", ",", "description", "=", "'K words/sec'", ")", ":", "\n", "    ", "return", "\"%25s:\\t%0.3f%s\"", "%", "(", "name", ",", "result", ",", "description", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.longest_common_substring": [[46, 75], ["range", "len", "len", "range", "len", "all", "len", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.json_write": [[77, 84], ["json_options.setdefault", "json_options.setdefault", "codecs.open", "json.dump"], "function", ["None"], []], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.json_read": [[86, 90], ["codecs.open", "json.load"], "function", ["None"], []], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.largest_elements": [[92, 113], ["itertools.tee", "set", "heapq.nlargest", "set", "map", "key"], "function", ["None"], []], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.word_splits": [[115, 123], ["min", "range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.kwargs_repr": [[125, 139], ["set", "sorted", "kwargs.items", "repr"], "function", ["None"], []], "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.with_progress": [[142, 166], ["utils.with_progress._it"], "function", ["None"], []], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.probability.add_conditional_tag_probability": [[19, 46], ["logging.getLogger.info", "probability.estimate_conditional_tag_probability", "logging.getLogger.info", "probability.build_cpd_dawg", "os.path.join", "build_cpd_dawg.save", "logging.getLogger.info", "os.path.join", "pymorphy2.opencorpora_dict.storage.update_meta", "logging.getLogger.info", "pymorphy2.MorphAnalyzer", "logging.getLogger", "int", "len", "cfd.N", "int", "cpd.conditions"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.probability.estimate_conditional_tag_probability", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.probability.build_cpd_dawg", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage.update_meta"], ["def", "add_conditional_tag_probability", "(", "corpus_filename", ",", "out_path", ",", "min_word_freq", ",", "\n", "logger", "=", "None", ",", "morph", "=", "None", ")", ":", "\n", "    ", "\"\"\" Add P(t|w) estimates to a compiled dictionary \"\"\"", "\n", "\n", "if", "morph", "is", "None", ":", "\n", "        ", "morph", "=", "MorphAnalyzer", "(", "out_path", ",", "probability_estimator_cls", "=", "None", ")", "\n", "\n", "", "if", "logger", "is", "None", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Estimating P(t|w) from %s\"", "%", "corpus_filename", ")", "\n", "cpd", ",", "cfd", "=", "estimate_conditional_tag_probability", "(", "morph", ",", "corpus_filename", ",", "logger", ")", "\n", "\n", "logger", ".", "info", "(", "\"Encoding P(t|w) as DAWG\"", ")", "\n", "d", "=", "build_cpd_dawg", "(", "morph", ",", "cpd", ",", "int", "(", "min_word_freq", ")", ")", "\n", "dawg_filename", "=", "os", ".", "path", ".", "join", "(", "out_path", ",", "'p_t_given_w.intdawg'", ")", "\n", "d", ".", "save", "(", "dawg_filename", ")", "\n", "\n", "logger", ".", "info", "(", "\"Updating meta information\"", ")", "\n", "meta_filename", "=", "os", ".", "path", ".", "join", "(", "out_path", ",", "'meta.json'", ")", "\n", "update_meta", "(", "meta_filename", ",", "[", "\n", "(", "'P(t|w)'", ",", "True", ")", ",", "\n", "(", "'P(t|w)_unique_words'", ",", "len", "(", "cpd", ".", "conditions", "(", ")", ")", ")", ",", "\n", "(", "'P(t|w)_outcomes'", ",", "cfd", ".", "N", "(", ")", ")", ",", "\n", "(", "'P(t|w)_min_word_freq'", ",", "int", "(", "min_word_freq", ")", ")", ",", "\n", "]", ")", "\n", "logger", ".", "info", "(", "'\\nDone.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.probability.estimate_conditional_tag_probability": [[48, 98], ["opencorpora.CorpusReader", "list", "pymorphy2.utils.with_progress", "logging.getLogger.info", "nltk.ConditionalFreqDist", "_ConditionalProbDist", "logging.getLogger", "pymorphy2.utils.with_progress", "max", "nltk.LaplaceProbDist", "probability._disambiguated_words", "len", "fd.B", "probability.estimate_conditional_tag_probability.probdist_factory"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.with_progress", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.with_progress", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.probability._disambiguated_words"], ["", "def", "estimate_conditional_tag_probability", "(", "morph", ",", "corpus_filename", ",", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Estimate P(t|w) based on OpenCorpora xml dump.\n\n    Probability is estimated based on counts of disambiguated\n    ambiguous words, using simple Laplace smoothing.\n    \"\"\"", "\n", "import", "nltk", "\n", "import", "opencorpora", "\n", "\n", "if", "logger", "is", "None", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "", "class", "_ConditionalProbDist", "(", "nltk", ".", "ConditionalProbDist", ")", ":", "\n", "        ", "\"\"\"\n        This ConditionalProbDist subclass passes 'condition' variable to\n        probdist_factory. See https://github.com/nltk/nltk/issues/500\n        \"\"\"", "\n", "def", "__init__", "(", "self", ",", "cfdist", ",", "probdist_factory", ")", ":", "\n", "            ", "self", ".", "_probdist_factory", "=", "probdist_factory", "\n", "for", "condition", "in", "cfdist", ":", "\n", "                ", "self", "[", "condition", "]", "=", "probdist_factory", "(", "cfdist", "[", "condition", "]", ",", "condition", ")", "\n", "\n", "", "", "", "reader", "=", "opencorpora", ".", "CorpusReader", "(", "corpus_filename", ")", "\n", "\n", "disambig_words", "=", "list", "(", "\n", "with_progress", "(", "\n", "_disambiguated_words", "(", "reader", ")", ",", "\n", "\"Reading disambiguated words from corpus\"", "\n", ")", "\n", ")", "\n", "\n", "disambig_words", "=", "with_progress", "(", "disambig_words", ",", "\"Filtering out non-ambiguous words\"", ")", "\n", "ambiguous_words", "=", "[", "\n", "(", "w", ",", "gr", ")", "for", "(", "w", ",", "gr", ")", "in", "(", "\n", "(", "w", ".", "lower", "(", ")", ",", "tag2grammemes", "(", "t", ")", ")", "\n", "for", "(", "w", ",", "t", ")", "in", "disambig_words", "\n", "if", "len", "(", "morph", ".", "tag", "(", "w", ")", ")", ">", "1", "\n", ")", "if", "gr", "!=", "set", "(", "[", "'UNKN'", "]", ")", "\n", "]", "\n", "\n", "logger", ".", "info", "(", "\"Computing P(t|w)\"", ")", "\n", "\n", "def", "probdist_factory", "(", "fd", ",", "condition", ")", ":", "\n", "        ", "bins", "=", "max", "(", "len", "(", "morph", ".", "tag", "(", "condition", ")", ")", ",", "fd", ".", "B", "(", ")", ")", "\n", "return", "nltk", ".", "LaplaceProbDist", "(", "fd", ",", "bins", "=", "bins", ")", "\n", "\n", "", "cfd", "=", "nltk", ".", "ConditionalFreqDist", "(", "ambiguous_words", ")", "\n", "cpd", "=", "_ConditionalProbDist", "(", "cfd", ",", "probdist_factory", ")", "\n", "return", "cpd", ",", "cfd", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.probability.build_cpd_dawg": [[100, 120], ["filter", "pymorphy2.dawg.ConditionalProbDistDAWG", "cpd.items", "probs.items", "fd.freqdist().N", "probability._all_the_same", "probability._tag_probabilities", "fd.freqdist"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.probability._all_the_same", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.probability._tag_probabilities"], ["", "def", "build_cpd_dawg", "(", "morph", ",", "cpd", ",", "min_word_freq", ")", ":", "\n", "    ", "\"\"\"\n    Return conditional tag probability information encoded as DAWG.\n\n    For each \"interesting\" word and tag the resulting DAWG\n    stores ``\"word:tag\"`` key with ``probability*1000000`` integer value.\n    \"\"\"", "\n", "words", "=", "[", "word", "for", "(", "word", ",", "fd", ")", "in", "cpd", ".", "items", "(", ")", "\n", "if", "fd", ".", "freqdist", "(", ")", ".", "N", "(", ")", ">=", "min_word_freq", "]", "\n", "\n", "prob_data", "=", "filter", "(", "\n", "lambda", "rec", ":", "not", "_all_the_same", "(", "rec", "[", "1", "]", ")", ",", "\n", "(", "(", "word", ",", "_tag_probabilities", "(", "morph", ",", "word", ",", "cpd", ")", ")", "for", "word", "in", "words", ")", "\n", ")", "\n", "dawg_data", "=", "(", "\n", "(", "(", "word", ",", "tag", ")", ",", "prob", ")", "\n", "for", "word", ",", "probs", "in", "prob_data", "\n", "for", "tag", ",", "prob", "in", "probs", ".", "items", "(", ")", "\n", ")", "\n", "return", "ConditionalProbDistDAWG", "(", "dawg_data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.probability._disambiguated_words": [[122, 127], ["reader.iter_parsed_words", "len"], "function", ["None"], ["", "def", "_disambiguated_words", "(", "reader", ")", ":", "\n", "    ", "return", "(", "\n", "(", "word", ",", "parses", "[", "0", "]", "[", "1", "]", ")", "\n", "for", "(", "word", ",", "parses", ")", "in", "reader", ".", "iter_parsed_words", "(", ")", "\n", "if", "len", "(", "parses", ")", "==", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.probability._all_the_same": [[130, 132], ["len", "set", "probs.values"], "function", ["None"], ["", "def", "_all_the_same", "(", "probs", ")", ":", "\n", "    ", "return", "len", "(", "set", "(", "probs", ".", "values", "(", ")", ")", ")", "<=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.probability._parse_probabilities": [[134, 142], ["morph.parse", "list", "cpd[].prob", "zip"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.ConditionalProbDistDAWG.prob"], ["", "def", "_parse_probabilities", "(", "morph", ",", "word", ",", "cpd", ")", ":", "\n", "    ", "\"\"\"\n    Return probabilities of word parses\n    according to CustomConditionalProbDist ``cpd``.\n    \"\"\"", "\n", "parses", "=", "morph", ".", "parse", "(", "word", ")", "\n", "probabilities", "=", "[", "cpd", "[", "word", "]", ".", "prob", "(", "p", ".", "tag", ".", "grammemes", ")", "for", "p", "in", "parses", "]", "\n", "return", "list", "(", "zip", "(", "parses", ",", "probabilities", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.probability._tag_probabilities": [[144, 148], ["dict", "probability._parse_probabilities"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.probability._parse_probabilities"], ["", "def", "_tag_probabilities", "(", "morph", ",", "word", ",", "cpd", ")", ":", "\n", "    ", "return", "dict", "(", "\n", "(", "p", ".", "tag", ",", "prob", ")", "\n", "for", "(", "p", ",", "prob", ")", "in", "_parse_probabilities", "(", "morph", ",", "word", ",", "cpd", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.parse.get_dictionary_info": [[36, 46], ["enumerate", "iterparse", "elem.get", "elem.get", "str"], "function", ["None"], ["def", "get_dictionary_info", "(", "filename", ",", "elem_limit", "=", "1000", ")", ":", "\n", "    ", "\"\"\" Return dictionary version and revision \"\"\"", "\n", "for", "idx", ",", "(", "ev", ",", "elem", ")", "in", "enumerate", "(", "iterparse", "(", "filename", ",", "events", "=", "(", "str", "(", "'start'", ")", ",", ")", ")", ")", ":", "\n", "        ", "if", "elem", ".", "tag", "==", "'dictionary'", ":", "\n", "            ", "version", "=", "elem", ".", "get", "(", "'version'", ")", "\n", "revision", "=", "elem", ".", "get", "(", "'revision'", ")", "\n", "return", "version", ",", "revision", "\n", "", "if", "idx", ">", "elem_limit", ":", "\n", "            ", "return", "None", ",", "None", "\n", "", "", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.parse.parse_opencorpora_xml": [[48, 100], ["parse.get_dictionary_info", "logger.info", "set", "logger.info", "pymorphy2.utils.with_progress", "ParsedDictionary", "iterparse", "parse.parse_opencorpora_xml._parse"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.parse.get_dictionary_info", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.with_progress"], ["", "def", "parse_opencorpora_xml", "(", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Parse OpenCorpora dict XML and return a ``ParsedDictionary`` namedtuple.\n    \"\"\"", "\n", "\n", "links", "=", "[", "]", "\n", "lexemes", "=", "{", "}", "\n", "grammemes", "=", "[", "]", "\n", "\n", "version", ",", "revision", "=", "get_dictionary_info", "(", "filename", ")", "\n", "logger", ".", "info", "(", "\"dictionary v%s, rev%s\"", ",", "version", ",", "revision", ")", "\n", "interesting_tags", "=", "set", "(", "[", "'grammeme'", ",", "'lemma'", ",", "'link'", "]", ")", "\n", "\n", "def", "_parse", "(", "filename", ")", ":", "\n", "        ", "for", "ev", ",", "elem", "in", "iterparse", "(", "filename", ")", ":", "\n", "            ", "if", "elem", ".", "tag", "not", "in", "interesting_tags", ":", "\n", "                ", "continue", "\n", "", "yield", "ev", ",", "elem", "\n", "\n", "", "", "logger", ".", "info", "(", "\"parsing XML dictionary\"", ")", "\n", "\n", "for", "ev", ",", "elem", "in", "with_progress", "(", "_parse", "(", "filename", ")", ",", "\"XML parsing\"", ")", ":", "\n", "        ", "if", "elem", ".", "tag", "==", "'grammeme'", ":", "\n", "            ", "name", "=", "elem", ".", "find", "(", "'name'", ")", ".", "text", "\n", "parent", "=", "elem", ".", "get", "(", "'parent'", ")", "\n", "alias", "=", "elem", ".", "find", "(", "'alias'", ")", ".", "text", "\n", "description", "=", "elem", ".", "find", "(", "'description'", ")", ".", "text", "\n", "\n", "grammeme", "=", "(", "name", ",", "parent", ",", "alias", ",", "description", ")", "\n", "grammemes", ".", "append", "(", "grammeme", ")", "\n", "xml_clear_elem", "(", "elem", ")", "\n", "\n", "", "if", "elem", ".", "tag", "==", "'lemma'", ":", "\n", "            ", "lex_id", ",", "word_forms", "=", "_word_forms_from_xml_elem", "(", "elem", ")", "\n", "lexemes", "[", "lex_id", "]", "=", "word_forms", "\n", "xml_clear_elem", "(", "elem", ")", "\n", "\n", "", "elif", "elem", ".", "tag", "==", "'link'", ":", "\n", "            ", "link_tuple", "=", "(", "\n", "elem", ".", "get", "(", "'from'", ")", ",", "\n", "elem", ".", "get", "(", "'to'", ")", ",", "\n", "elem", ".", "get", "(", "'type'", ")", ",", "\n", ")", "\n", "links", ".", "append", "(", "link_tuple", ")", "\n", "xml_clear_elem", "(", "elem", ")", "\n", "\n", "", "", "return", "ParsedDictionary", "(", "\n", "lexemes", "=", "lexemes", ",", "\n", "links", "=", "links", ",", "\n", "grammemes", "=", "grammemes", ",", "\n", "version", "=", "version", ",", "\n", "revision", "=", "revision", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.parse._grammemes_from_elem": [[103, 105], ["g.get", "elem.iter"], "function", ["None"], ["", "def", "_grammemes_from_elem", "(", "elem", ")", ":", "\n", "    ", "return", "\",\"", ".", "join", "(", "[", "g", ".", "get", "(", "'v'", ")", "for", "g", "in", "elem", ".", "iter", "(", "'g'", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.parse._word_forms_from_xml_elem": [[107, 135], ["elem.get", "list", "parse._grammemes_from_elem", "elem.iter", "len", "elem.iter", "len", "parse._grammemes_from_elem", "form_elem.get().lower", "isinstance", "lexeme.append", "logger.warning", "form.decode.decode", "form_elem.get"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.parse._grammemes_from_elem", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.parse._grammemes_from_elem"], ["", "def", "_word_forms_from_xml_elem", "(", "elem", ")", ":", "\n", "    ", "\"\"\"\n    Return a list of (word, tag) pairs given \"lemma\" XML element.\n    \"\"\"", "\n", "lexeme", "=", "[", "]", "\n", "lex_id", "=", "elem", ".", "get", "(", "'id'", ")", "\n", "\n", "if", "len", "(", "elem", ")", "==", "0", ":", "# deleted lexeme?", "\n", "        ", "return", "lex_id", ",", "lexeme", "\n", "\n", "", "base_info", "=", "list", "(", "elem", ".", "iter", "(", "'l'", ")", ")", "\n", "\n", "assert", "len", "(", "base_info", ")", "==", "1", "\n", "base_grammemes", "=", "_grammemes_from_elem", "(", "base_info", "[", "0", "]", ")", "\n", "\n", "for", "form_elem", "in", "elem", ".", "iter", "(", "'f'", ")", ":", "\n", "        ", "grammemes", "=", "_grammemes_from_elem", "(", "form_elem", ")", "\n", "form", "=", "form_elem", ".", "get", "(", "'t'", ")", ".", "lower", "(", ")", "\n", "if", "not", "(", "base_grammemes", "+", "grammemes", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "\"no information provided for word %s, dropping the whole lexeme\"", "%", "form", ")", "\n", "return", "lex_id", ",", "[", "]", "\n", "", "if", "isinstance", "(", "form", ",", "bytes", ")", ":", "# Python 2.x", "\n", "            ", "form", "=", "form", ".", "decode", "(", "'ascii'", ")", "\n", "", "lexeme", ".", "append", "(", "\n", "(", "form", ",", "(", "base_grammemes", "+", "\" \"", "+", "grammemes", ")", ".", "strip", "(", ")", ")", "\n", ")", "\n", "\n", "", "return", "lex_id", ",", "lexeme", "\n", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.__init__": [[14, 35], ["logger.info", "storage.load_dict", "logger.info", "wrapper.Dictionary.meta.get"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage.load_dict"], ["def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "\n", "        ", "logger", ".", "info", "(", "\"Loading dictionaries from %s\"", ",", "path", ")", "\n", "\n", "self", ".", "_data", "=", "load_dict", "(", "path", ")", "\n", "\n", "logger", ".", "info", "(", "\"format: %(format_version)s, revision: %(source_revision)s, updated: %(compiled_at)s\"", ",", "self", ".", "_data", ".", "meta", ")", "\n", "\n", "# attributes from opencorpora_dict.storage.LoadedDictionary", "\n", "self", ".", "paradigms", "=", "self", ".", "_data", ".", "paradigms", "\n", "self", ".", "gramtab", "=", "self", ".", "_data", ".", "gramtab", "\n", "self", ".", "paradigm_prefixes", "=", "self", ".", "_data", ".", "paradigm_prefixes", "\n", "self", ".", "suffixes", "=", "self", ".", "_data", ".", "suffixes", "\n", "self", ".", "words", "=", "self", ".", "_data", ".", "words", "\n", "self", ".", "prediction_suffixes_dawgs", "=", "self", ".", "_data", ".", "prediction_suffixes_dawgs", "\n", "self", ".", "meta", "=", "self", ".", "_data", ".", "meta", "\n", "self", ".", "Tag", "=", "self", ".", "_data", ".", "Tag", "\n", "self", ".", "lang", "=", "self", ".", "meta", ".", "get", "(", "'language_code'", ")", "\n", "\n", "# extra attributes", "\n", "self", ".", "path", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_tag_info": [[36, 44], ["len"], "methods", ["None"], ["", "def", "build_tag_info", "(", "self", ",", "para_id", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Return tag as a string.\n        \"\"\"", "\n", "paradigm", "=", "self", ".", "paradigms", "[", "para_id", "]", "\n", "tag_info_offset", "=", "len", "(", "paradigm", ")", "//", "3", "\n", "tag_id", "=", "paradigm", "[", "tag_info_offset", "+", "idx", "]", "\n", "return", "self", ".", "gramtab", "[", "tag_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_paradigm_info": [[45, 67], ["range", "len", "res.append", "wrapper.Dictionary.build_tag_info"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_tag_info"], ["", "def", "build_paradigm_info", "(", "self", ",", "para_id", ")", ":", "\n", "        ", "\"\"\"\n        Return a list of\n\n            (prefix, tag, suffix)\n\n        tuples representing the paradigm.\n        \"\"\"", "\n", "paradigm", "=", "self", ".", "paradigms", "[", "para_id", "]", "\n", "paradigm_len", "=", "len", "(", "paradigm", ")", "//", "3", "\n", "res", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "paradigm_len", ")", ":", "\n", "            ", "prefix_id", "=", "paradigm", "[", "paradigm_len", "*", "2", "+", "idx", "]", "\n", "prefix", "=", "self", ".", "paradigm_prefixes", "[", "prefix_id", "]", "\n", "\n", "suffix_id", "=", "paradigm", "[", "idx", "]", "\n", "suffix", "=", "self", ".", "suffixes", "[", "suffix_id", "]", "\n", "\n", "res", ".", "append", "(", "\n", "(", "prefix", ",", "self", ".", "build_tag_info", "(", "para_id", ",", "idx", ")", ",", "suffix", ")", "\n", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_normal_form": [[68, 88], ["wrapper.Dictionary.build_stem", "len"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_stem"], ["", "def", "build_normal_form", "(", "self", ",", "para_id", ",", "idx", ",", "fixed_word", ")", ":", "\n", "        ", "\"\"\"\n        Build a normal form.\n        \"\"\"", "\n", "\n", "if", "idx", "==", "0", ":", "# a shortcut: normal form is a word itself", "\n", "            ", "return", "fixed_word", "\n", "\n", "", "paradigm", "=", "self", ".", "paradigms", "[", "para_id", "]", "\n", "paradigm_len", "=", "len", "(", "paradigm", ")", "//", "3", "\n", "\n", "stem", "=", "self", ".", "build_stem", "(", "paradigm", ",", "idx", ",", "fixed_word", ")", "\n", "\n", "normal_prefix_id", "=", "paradigm", "[", "paradigm_len", "*", "2", "+", "0", "]", "\n", "normal_suffix_id", "=", "paradigm", "[", "0", "]", "\n", "\n", "normal_prefix", "=", "self", ".", "paradigm_prefixes", "[", "normal_prefix_id", "]", "\n", "normal_suffix", "=", "self", ".", "suffixes", "[", "normal_suffix_id", "]", "\n", "\n", "return", "normal_prefix", "+", "stem", "+", "normal_suffix", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_stem": [[89, 105], ["len", "len", "len", "len"], "methods", ["None"], ["", "def", "build_stem", "(", "self", ",", "paradigm", ",", "idx", ",", "fixed_word", ")", ":", "\n", "        ", "\"\"\"\n        Return word stem (given a word, paradigm and the word index).\n        \"\"\"", "\n", "paradigm_len", "=", "len", "(", "paradigm", ")", "//", "3", "\n", "\n", "prefix_id", "=", "paradigm", "[", "paradigm_len", "*", "2", "+", "idx", "]", "\n", "prefix", "=", "self", ".", "paradigm_prefixes", "[", "prefix_id", "]", "\n", "\n", "suffix_id", "=", "paradigm", "[", "idx", "]", "\n", "suffix", "=", "self", ".", "suffixes", "[", "suffix_id", "]", "\n", "\n", "if", "suffix", ":", "\n", "            ", "return", "fixed_word", "[", "len", "(", "prefix", ")", ":", "-", "len", "(", "suffix", ")", "]", "\n", "", "else", ":", "\n", "            ", "return", "fixed_word", "[", "len", "(", "prefix", ")", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.word_is_known": [[106, 127], ["bool", "wrapper.Dictionary.words.similar_keys"], "methods", ["None"], ["", "", "def", "word_is_known", "(", "self", ",", "word", ",", "substitutes_compiled", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Check if a ``word`` is in the dictionary.\n\n        To allow some fuzzyness pass ``substitutes_compiled`` argument;\n        it should be a result of :meth:`DAWG.compile_replaces()`.\n        This way you can e.g. handle \u0451 letters replaced with \u0435 in the\n        input words.\n\n        .. note::\n\n            Dictionary words are not always correct words;\n            the dictionary also contains incorrect forms which\n            are commonly used. So for spellchecking tasks this\n            method should be used with extra care.\n\n        \"\"\"", "\n", "if", "substitutes_compiled", ":", "\n", "            ", "return", "bool", "(", "self", ".", "words", ".", "similar_keys", "(", "word", ",", "substitutes_compiled", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "word", "in", "self", ".", "words", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.iter_known_words": [[128, 139], ["wrapper.Dictionary.words.iteritems", "wrapper.Dictionary.build_tag_info", "wrapper.Dictionary.build_normal_form"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_tag_info", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_normal_form"], ["", "", "def", "iter_known_words", "(", "self", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "\"\"\"\n        Return an iterator over ``(word, tag, normal_form, para_id, idx)``\n        tuples with dictionary words that starts with a given prefix\n        (default empty prefix means \"all words\").\n        \"\"\"", "\n", "\n", "for", "word", ",", "(", "para_id", ",", "idx", ")", "in", "self", ".", "words", ".", "iteritems", "(", "prefix", ")", ":", "\n", "            ", "tag", "=", "self", ".", "build_tag_info", "(", "para_id", ",", "idx", ")", "\n", "normal_form", "=", "self", ".", "build_normal_form", "(", "para_id", ",", "idx", ",", "word", ")", "\n", "yield", "word", ",", "tag", ",", "normal_form", ",", "para_id", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.__repr__": [[140, 142], ["str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "\"<%s>\"", ")", "%", "self", ".", "__class__", ".", "__name__", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess.simplify_tags": [[19, 39], ["logger.info", "preprocess._get_tag_spellings", "logger.info", "preprocess._get_duplicate_tag_replaces", "logger.debug", "logger.info", "pymorphy2.utils.with_progress", "len", "preprocess._simplify_tag"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess._get_tag_spellings", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess._get_duplicate_tag_replaces", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.with_progress", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess._simplify_tag"], ["def", "simplify_tags", "(", "parsed_dict", ",", "skip_space_ambiguity", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    This function simplifies tags in :param:`parsed_dict`.\n    :param:`parsed_dict` is modified inplace.\n    \"\"\"", "\n", "logger", ".", "info", "(", "\"simplifying tags: looking for tag spellings\"", ")", "\n", "spellings", "=", "_get_tag_spellings", "(", "parsed_dict", ")", "\n", "\n", "logger", ".", "info", "(", "\"simplifying tags: looking for spelling duplicates \"", "\n", "\"(skip_space_ambiguity: %s)\"", ",", "skip_space_ambiguity", ")", "\n", "tag_replaces", "=", "_get_duplicate_tag_replaces", "(", "spellings", ",", "skip_space_ambiguity", ")", "\n", "logger", ".", "debug", "(", "\"%d duplicate tags will be removed\"", ",", "len", "(", "tag_replaces", ")", ")", "\n", "\n", "logger", ".", "info", "(", "\"simplifying tags: fixing\"", ")", "\n", "for", "lex_id", "in", "with_progress", "(", "parsed_dict", ".", "lexemes", ",", "\"Simplifying tags\"", ")", ":", "\n", "        ", "new_lexeme", "=", "[", "\n", "(", "word", ",", "_simplify_tag", "(", "tag", ",", "tag_replaces", ")", ")", "\n", "for", "word", ",", "tag", "in", "parsed_dict", ".", "lexemes", "[", "lex_id", "]", "\n", "]", "\n", "parsed_dict", ".", "lexemes", "[", "lex_id", "]", "=", "new_lexeme", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess.drop_unsupported_parses": [[41, 53], ["logger.info"], "function", ["None"], ["", "", "def", "drop_unsupported_parses", "(", "parsed_dict", ")", ":", "\n", "    ", "\"\"\"\n    Remove unsupported parses from OpenCorpora dictionary.\n\n    In particular, lexemes with Init tags are removed\n    because pymorphy2 handles them differently.\n    \"\"\"", "\n", "logger", ".", "info", "(", "\"dropping unsupported parses\"", ")", "\n", "for", "lex_id", "in", "parsed_dict", ".", "lexemes", ":", "\n", "        ", "parsed_dict", ".", "lexemes", "[", "lex_id", "]", "=", "[", "\n", "(", "word", ",", "tag", ")", "for", "word", ",", "tag", "in", "parsed_dict", ".", "lexemes", "[", "lex_id", "]", "\n", "if", "'Init'", "not", "in", "tag", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess.tag2grammemes": [[56, 60], ["pymorphy2.cache.memoized_with_single_argument", "preprocess._split_grammemes", "preprocess.replace_redundant_grammemes"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cache.memoized_with_single_argument", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess._split_grammemes", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess.replace_redundant_grammemes"], ["", "", "@", "memoized_with_single_argument", "(", "{", "}", ")", "\n", "def", "tag2grammemes", "(", "tag_str", ")", ":", "\n", "    ", "\"\"\" Given tag string, return tag grammemes \"\"\"", "\n", "return", "_split_grammemes", "(", "replace_redundant_grammemes", "(", "tag_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess.replace_redundant_grammemes": [[62, 66], ["pymorphy2.cache.memoized_with_single_argument", "tag_str.replace().replace().replace", "tag_str.replace().replace", "tag_str.replace"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cache.memoized_with_single_argument"], ["", "@", "memoized_with_single_argument", "(", "{", "}", ")", "\n", "def", "replace_redundant_grammemes", "(", "tag_str", ")", ":", "\n", "    ", "\"\"\" Replace 'loc1', 'gen1' and 'acc1' grammemes in ``tag_str`` \"\"\"", "\n", "return", "tag_str", ".", "replace", "(", "'loc1'", ",", "'loct'", ")", ".", "replace", "(", "'gen1'", ",", "'gent'", ")", ".", "replace", "(", "'acc1'", ",", "'accs'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess._split_grammemes": [[68, 70], ["frozenset", "tag_str.replace().split", "tag_str.replace"], "function", ["None"], ["", "def", "_split_grammemes", "(", "tag_str", ")", ":", "\n", "    ", "return", "frozenset", "(", "tag_str", ".", "replace", "(", "' '", ",", "','", ",", "1", ")", ".", "split", "(", "','", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess._get_tag_spellings": [[72, 81], ["collections.defaultdict", "preprocess._itertags", "collections.defaultdict", "preprocess.tag2grammemes"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess._itertags", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess.tag2grammemes"], ["", "def", "_get_tag_spellings", "(", "parsed_dict", ")", ":", "\n", "    ", "\"\"\"\n    Return a dict where keys are sets of grammemes found in dictionary\n    and values are counters of all tag spellings for these grammemes.\n    \"\"\"", "\n", "spellings", "=", "collections", ".", "defaultdict", "(", "lambda", ":", "collections", ".", "defaultdict", "(", "int", ")", ")", "\n", "for", "tag", "in", "_itertags", "(", "parsed_dict", ")", ":", "\n", "        ", "spellings", "[", "tag2grammemes", "(", "tag", ")", "]", "[", "tag", "]", "+=", "1", "\n", "", "return", "spellings", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess._get_duplicate_tag_replaces": [[83, 93], ["preprocess._is_ambiguous", "tags.keys", "sorted", "tags.items"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess._is_ambiguous"], ["", "def", "_get_duplicate_tag_replaces", "(", "spellings", ",", "skip_space_ambiguity", ")", ":", "\n", "    ", "replaces", "=", "{", "}", "\n", "for", "grammemes", "in", "spellings", ":", "\n", "        ", "tags", "=", "spellings", "[", "grammemes", "]", "\n", "if", "_is_ambiguous", "(", "tags", ".", "keys", "(", ")", ",", "skip_space_ambiguity", ")", ":", "\n", "            ", "items", "=", "sorted", "(", "tags", ".", "items", "(", ")", ",", "key", "=", "lambda", "it", ":", "it", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "top_tag", "=", "items", "[", "0", "]", "[", "0", "]", "\n", "for", "tag", ",", "count", "in", "items", "[", "1", ":", "]", ":", "\n", "                ", "replaces", "[", "tag", "]", "=", "top_tag", "\n", "", "", "", "return", "replaces", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess._is_ambiguous": [[95, 119], ["len", "len", "len", "tag.index", "map", "set"], "function", ["None"], ["", "def", "_is_ambiguous", "(", "tags", ",", "skip_space_ambiguity", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    >>> _is_ambiguous(['NOUN sing,masc'])\n    False\n    >>> _is_ambiguous(['NOUN sing,masc', 'NOUN masc,sing'])\n    True\n    >>> _is_ambiguous(['NOUN masc,sing', 'NOUN,masc sing'])\n    False\n    >>> _is_ambiguous(['NOUN masc,sing', 'NOUN,masc sing'], skip_space_ambiguity=False)\n    True\n    \"\"\"", "\n", "if", "len", "(", "tags", ")", "<", "2", ":", "\n", "        ", "return", "False", "\n", "\n", "", "if", "skip_space_ambiguity", ":", "\n", "# if space position differs then skip this ambiguity", "\n", "# XXX: this doesn't handle cases when space position difference", "\n", "# is not the only ambiguity", "\n", "        ", "space_pos", "=", "[", "tag", ".", "index", "(", "' '", ")", "if", "' '", "in", "tag", "else", "None", "\n", "for", "tag", "in", "map", "(", "str", ",", "tags", ")", "]", "\n", "if", "len", "(", "space_pos", ")", "==", "len", "(", "set", "(", "space_pos", ")", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess._simplify_tag": [[121, 124], ["preprocess.replace_redundant_grammemes", "tag_replaces.get"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess.replace_redundant_grammemes"], ["", "def", "_simplify_tag", "(", "tag", ",", "tag_replaces", ")", ":", "\n", "    ", "tag", "=", "replace_redundant_grammemes", "(", "tag", ")", "\n", "return", "tag_replaces", ".", "get", "(", "tag", ",", "tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess._itertags": [[126, 130], ["pymorphy2.utils.with_progress"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.with_progress"], ["", "def", "_itertags", "(", "parsed_dict", ")", ":", "\n", "    ", "for", "lex_id", "in", "with_progress", "(", "parsed_dict", ".", "lexemes", ",", "\"Looking for tag spellings\"", ")", ":", "\n", "        ", "for", "word", ",", "tag", "in", "parsed_dict", ".", "lexemes", "[", "lex_id", "]", ":", "\n", "            ", "yield", "tag", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile.convert_to_pymorphy2": [[38, 60], ["pymorphy2.dawg.assert_can_create", "parse_opencorpora_xml", "simplify_tags", "drop_unsupported_parses", "compile.compile_parsed_dict", "save_compiled_dict", "compile._create_out_path"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.assert_can_create", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.parse.parse_opencorpora_xml", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess.simplify_tags", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.preprocess.drop_unsupported_parses", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile.compile_parsed_dict", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage.save_compiled_dict", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._create_out_path"], ["def", "convert_to_pymorphy2", "(", "opencorpora_dict_path", ",", "out_path", ",", "source_name", ",", "\n", "language_code", ",", "overwrite", "=", "False", ",", "compile_options", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Convert a dictionary from OpenCorpora XML format to\n    Pymorphy2 compacted format.\n\n    ``out_path`` should be a name of folder where to put dictionaries.\n    \"\"\"", "\n", "from", ".", "parse", "import", "parse_opencorpora_xml", "\n", "from", ".", "preprocess", "import", "simplify_tags", ",", "drop_unsupported_parses", "\n", "from", ".", "storage", "import", "save_compiled_dict", "\n", "\n", "dawg", ".", "assert_can_create", "(", ")", "\n", "if", "not", "_create_out_path", "(", "out_path", ",", "overwrite", ")", ":", "\n", "        ", "return", "\n", "\n", "", "parsed_dict", "=", "parse_opencorpora_xml", "(", "opencorpora_dict_path", ")", "\n", "simplify_tags", "(", "parsed_dict", ")", "\n", "drop_unsupported_parses", "(", "parsed_dict", ")", "\n", "compiled_dict", "=", "compile_parsed_dict", "(", "parsed_dict", ",", "compile_options", ")", "\n", "save_compiled_dict", "(", "compiled_dict", ",", "out_path", ",", "\n", "source_name", "=", "source_name", ",", "language_code", "=", "language_code", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile.compile_parsed_dict": [[62, 179], ["dict", "dict.update", "dict", "dict", "logger.info", "compile._join_lexemes", "logger.info", "logger.info", "logger.debug", "collections.defaultdict", "enumerate", "logger.debug", "logger.debug", "sorted", "dict", "dict", "logger.debug", "compile._suffixes_prediction_data", "logger.debug", "pymorphy2.dawg.WordsDawg", "enumerate", "CompiledDictionary", "len", "compile._to_paradigm", "enumerate", "len", "len", "len", "list", "compile.compile_parsed_dict.get_form"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._join_lexemes", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._suffixes_prediction_data", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._to_paradigm"], ["", "def", "compile_parsed_dict", "(", "parsed_dict", ",", "compile_options", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Return compacted dictionary data.\n    \"\"\"", "\n", "options", "=", "dict", "(", "\n", "min_ending_freq", "=", "2", ",", "\n", "min_paradigm_popularity", "=", "3", ",", "\n", "max_suffix_length", "=", "5", ",", "\n", ")", "\n", "options", ".", "update", "(", "compile_options", "or", "{", "}", ")", "\n", "paradigm_prefixes", "=", "options", "[", "\"paradigm_prefixes\"", "]", "\n", "\n", "gramtab", "=", "[", "]", "\n", "paradigms", "=", "[", "]", "\n", "words", "=", "[", "]", "\n", "\n", "tag_ids", "=", "dict", "(", ")", "\n", "paradigm_ids", "=", "dict", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"inlining lexeme derivational rules\"", ")", "\n", "lexemes", "=", "_join_lexemes", "(", "parsed_dict", ".", "lexemes", ",", "parsed_dict", ".", "links", ")", "\n", "logger", ".", "info", "(", "\"lexemes after link inlining: %s\"", ",", "len", "(", "lexemes", ")", ")", "\n", "\n", "logger", ".", "info", "(", "'building paradigms'", ")", "\n", "logger", ".", "debug", "(", "\"%20s %15s %15s %15s\"", ",", "\"word\"", ",", "\"len(gramtab)\"", ",", "\"len(words)\"", ",", "\"len(paradigms)\"", ")", "\n", "\n", "paradigm_popularity", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "\n", "for", "index", ",", "lexeme", "in", "enumerate", "(", "lexemes", ")", ":", "\n", "        ", "stem", ",", "paradigm", "=", "_to_paradigm", "(", "lexeme", ",", "paradigm_prefixes", ")", "\n", "\n", "# build gramtab", "\n", "for", "suff", ",", "tag", ",", "pref", "in", "paradigm", ":", "\n", "            ", "if", "tag", "not", "in", "tag_ids", ":", "\n", "                ", "tag_ids", "[", "tag", "]", "=", "len", "(", "gramtab", ")", "\n", "gramtab", ".", "append", "(", "tag", ")", "\n", "\n", "# build paradigm index", "\n", "", "", "if", "paradigm", "not", "in", "paradigm_ids", ":", "\n", "            ", "paradigm_ids", "[", "paradigm", "]", "=", "len", "(", "paradigms", ")", "\n", "paradigms", ".", "append", "(", "\n", "tuple", "(", "[", "(", "suff", ",", "tag_ids", "[", "tag", "]", ",", "pref", ")", "for", "suff", ",", "tag", ",", "pref", "in", "paradigm", "]", ")", "\n", ")", "\n", "\n", "", "para_id", "=", "paradigm_ids", "[", "paradigm", "]", "\n", "paradigm_popularity", "[", "para_id", "]", "+=", "1", "\n", "\n", "for", "idx", ",", "(", "suff", ",", "tag", ",", "pref", ")", "in", "enumerate", "(", "paradigm", ")", ":", "\n", "            ", "form", "=", "pref", "+", "stem", "+", "suff", "\n", "words", ".", "append", "(", "\n", "(", "form", ",", "(", "para_id", ",", "idx", ")", ")", "\n", ")", "\n", "\n", "", "if", "not", "(", "index", "%", "10000", ")", ":", "\n", "            ", "word", "=", "paradigm", "[", "0", "]", "[", "2", "]", "+", "stem", "+", "paradigm", "[", "0", "]", "[", "0", "]", "\n", "logger", ".", "debug", "(", "\"%20s %15s %15s %15s\"", ",", "word", ",", "len", "(", "gramtab", ")", ",", "len", "(", "words", ")", ",", "len", "(", "paradigms", ")", ")", "\n", "\n", "\n", "", "", "logger", ".", "debug", "(", "\"%20s %15s %15s %15s\"", ",", "\"total:\"", ",", "len", "(", "gramtab", ")", ",", "len", "(", "words", ")", ",", "len", "(", "paradigms", ")", ")", "\n", "logger", ".", "debug", "(", "\"linearizing paradigms\"", ")", "\n", "\n", "def", "get_form", "(", "para", ")", ":", "\n", "        ", "return", "list", "(", "next", "(", "izip", "(", "*", "para", ")", ")", ")", "\n", "\n", "", "forms", "=", "[", "get_form", "(", "para", ")", "for", "para", "in", "paradigms", "]", "\n", "suffixes", "=", "sorted", "(", "set", "(", "list", "(", "itertools", ".", "chain", "(", "*", "forms", ")", ")", ")", ")", "\n", "suffix_ids", "=", "dict", "(", "\n", "(", "suff", ",", "index", ")", "\n", "for", "index", ",", "suff", "in", "enumerate", "(", "suffixes", ")", "\n", ")", "\n", "\n", "paradigm_prefix_ids", "=", "dict", "(", "\n", "(", "pref", ",", "idx", ")", "for", "idx", ",", "pref", "in", "enumerate", "(", "paradigm_prefixes", ")", "\n", ")", "\n", "def", "fix_strings", "(", "paradigm", ")", ":", "\n", "        ", "\"\"\" Replace suffix and prefix with the respective id numbers. \"\"\"", "\n", "para", "=", "[", "]", "\n", "for", "suff", ",", "tag", ",", "pref", "in", "paradigm", ":", "\n", "            ", "para", ".", "append", "(", "\n", "(", "suffix_ids", "[", "suff", "]", ",", "tag", ",", "paradigm_prefix_ids", "[", "pref", "]", ")", "\n", ")", "\n", "", "return", "para", "\n", "\n", "", "paradigms", "=", "(", "fix_strings", "(", "para", ")", "for", "para", "in", "paradigms", ")", "\n", "paradigms", "=", "[", "_linearized_paradigm", "(", "paradigm", ")", "for", "paradigm", "in", "paradigms", "]", "\n", "\n", "logger", ".", "debug", "(", "'calculating prediction data..'", ")", "\n", "suffixes_dawgs_data", "=", "_suffixes_prediction_data", "(", "\n", "words", "=", "words", ",", "\n", "paradigm_popularity", "=", "paradigm_popularity", ",", "\n", "gramtab", "=", "gramtab", ",", "\n", "paradigms", "=", "paradigms", ",", "\n", "suffixes", "=", "suffixes", ",", "\n", "min_ending_freq", "=", "options", "[", "\"min_ending_freq\"", "]", ",", "\n", "min_paradigm_popularity", "=", "options", "[", "\"min_paradigm_popularity\"", "]", ",", "\n", "max_suffix_length", "=", "options", "[", "\"max_suffix_length\"", "]", ",", "\n", "paradigm_prefixes", "=", "paradigm_prefixes", ",", "\n", ")", "\n", "\n", "logger", ".", "debug", "(", "'building word DAFSA'", ")", "\n", "words_dawg", "=", "dawg", ".", "WordsDawg", "(", "words", ")", "\n", "\n", "del", "words", "\n", "\n", "prediction_suffixes_dawgs", "=", "[", "]", "\n", "for", "prefix_id", ",", "dawg_data", "in", "enumerate", "(", "suffixes_dawgs_data", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "'building prediction_suffixes DAFSA #%d'", "%", "prefix_id", ")", "\n", "prediction_suffixes_dawgs", ".", "append", "(", "dawg", ".", "PredictionSuffixesDAWG", "(", "dawg_data", ")", ")", "\n", "\n", "", "return", "CompiledDictionary", "(", "\n", "gramtab", "=", "tuple", "(", "gramtab", ")", ",", "\n", "suffixes", "=", "suffixes", ",", "\n", "paradigms", "=", "paradigms", ",", "\n", "words_dawg", "=", "words_dawg", ",", "\n", "prediction_suffixes_dawgs", "=", "prediction_suffixes_dawgs", ",", "\n", "parsed_dict", "=", "parsed_dict", ",", "\n", "compile_options", "=", "options", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._join_lexemes": [[182, 243], ["set", "dict", "sorted", "lexemes[].extend", "compile._join_lexemes.move_lexeme"], "function", ["None"], ["", "def", "_join_lexemes", "(", "lexemes", ",", "links", ")", ":", "\n", "    ", "\"\"\"\n    Combine linked lexemes to a single lexeme.\n    \"\"\"", "\n", "\n", "#    <link_types>", "\n", "#    <type id=\"1\">ADJF-ADJS</type>", "\n", "#    <type id=\"2\">ADJF-COMP</type>", "\n", "#    <type id=\"3\">INFN-VERB</type>", "\n", "#    <type id=\"4\">INFN-PRTF</type>", "\n", "#    <type id=\"5\">INFN-GRND</type>", "\n", "#    <type id=\"6\">PRTF-PRTS</type>", "\n", "#    <type id=\"7\">NAME-PATR</type>", "\n", "#    <type id=\"8\">PATR_MASC-PATR_FEMN</type>", "\n", "#    <type id=\"9\">SURN_MASC-SURN_FEMN</type>", "\n", "#    <type id=\"10\">SURN_MASC-SURN_PLUR</type>", "\n", "#    <type id=\"11\">PERF-IMPF</type>", "\n", "#    <type id=\"12\">ADJF-SUPR_ejsh</type>", "\n", "#    <type id=\"13\">PATR_MASC_FORM-PATR_MASC_INFR</type>", "\n", "#    <type id=\"14\">PATR_FEMN_FORM-PATR_FEMN_INFR</type>", "\n", "#    <type id=\"15\">ADJF_eish-SUPR_nai_eish</type>", "\n", "#    <type id=\"16\">ADJF-SUPR_ajsh</type>", "\n", "#    <type id=\"17\">ADJF_aish-SUPR_nai_aish</type>", "\n", "#    <type id=\"18\">ADJF-SUPR_suppl</type>", "\n", "#    <type id=\"19\">ADJF-SUPR_nai</type>", "\n", "#    <type id=\"20\">ADJF-SUPR_slng</type>", "\n", "#    <type id=\"21\">FULL-CONTRACTED</type>", "\n", "#    <type id=\"22\">NORM-ORPHOVAR</type>", "\n", "#    <type id=\"23\">CARDINAL-ORDINAL</type>      # e.g. \u043f\u0435\u0440\u0432\u044b\u0439 - \u043e\u0434\u0438\u043d", "\n", "#    <type id=\"24\">SBST_MASC-SBST_FEMN</type>   # e.g. \u043f\u043e\u0434\u0441\u0443\u0434\u0438\u043c\u044b\u0439 - \u043f\u043e\u0434\u0441\u0443\u0434\u0438\u043c\u0430\u044f", "\n", "#    <type id=\"25\">SBST_MASC-SBST_PLUR</type>   # e.g. \u043f\u043e\u0434\u0441\u0443\u0434\u0438\u043c\u044b\u0439 - \u043f\u043e\u0434\u0441\u0443\u0434\u0438\u043c\u044b\u0435", "\n", "#    <type id=\"26\">ADVB-COMP</type>             # ??", "\n", "#    <type id=\"27\">ADJF_TEXT-ADJF_NUMBER</type> # e.g. \u043f\u0435\u0440\u0432\u044b\u0439 - 1-\u0439", "\n", "#    </link_types>", "\n", "\n", "EXCLUDED_LINK_TYPES", "=", "set", "(", "[", "'7'", ",", "'21'", ",", "'23'", ",", "'27'", "]", ")", "\n", "#    ALLOWED_LINK_TYPES = set(['3', '4', '5'])", "\n", "\n", "moves", "=", "dict", "(", ")", "\n", "\n", "def", "move_lexeme", "(", "from_id", ",", "to_id", ")", ":", "\n", "        ", "lm", "=", "lexemes", "[", "str", "(", "from_id", ")", "]", "\n", "\n", "while", "to_id", "in", "moves", ":", "\n", "            ", "to_id", "=", "moves", "[", "to_id", "]", "\n", "\n", "", "lexemes", "[", "str", "(", "to_id", ")", "]", ".", "extend", "(", "lm", ")", "\n", "del", "lm", "[", ":", "]", "\n", "moves", "[", "from_id", "]", "=", "to_id", "\n", "\n", "", "for", "link_start", ",", "link_end", ",", "type_id", "in", "links", ":", "\n", "        ", "if", "type_id", "in", "EXCLUDED_LINK_TYPES", ":", "\n", "            ", "continue", "\n", "\n", "#        if type_id not in ALLOWED_LINK_TYPES:", "\n", "#            continue", "\n", "\n", "", "move_lexeme", "(", "link_end", ",", "link_start", ")", "\n", "\n", "", "lex_ids", "=", "sorted", "(", "lexemes", ".", "keys", "(", ")", ",", "key", "=", "int", ")", "\n", "return", "[", "lexemes", "[", "lex_id", "]", "for", "lex_id", "in", "lex_ids", "if", "lexemes", "[", "lex_id", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._to_paradigm": [[245, 274], ["list", "zip", "len", "pymorphy2.utils.longest_common_substring", "any", "tuple", "zip", "zip", "len", "form.index", "len", "len"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.longest_common_substring"], ["", "def", "_to_paradigm", "(", "lexeme", ",", "paradigm_prefixes", ")", ":", "\n", "    ", "\"\"\"\n    Extract (stem, paradigm) pair from lexeme (which is a list of\n    (word_form, tag) tuples). Paradigm is a list of suffixes with\n    associated tags and prefixes.\n    \"\"\"", "\n", "forms", ",", "tags", "=", "list", "(", "zip", "(", "*", "lexeme", ")", ")", "\n", "\n", "if", "len", "(", "forms", ")", "==", "1", ":", "\n", "        ", "stem", "=", "forms", "[", "0", "]", "\n", "prefixes", "=", "[", "''", "]", "\n", "", "else", ":", "\n", "        ", "stem", "=", "longest_common_substring", "(", "forms", ")", "\n", "prefixes", "=", "[", "form", "[", ":", "form", ".", "index", "(", "stem", ")", "]", "for", "form", "in", "forms", "]", "\n", "\n", "# only allow prefixes from PARADIGM_PREFIXES", "\n", "if", "any", "(", "pref", "not", "in", "paradigm_prefixes", "for", "pref", "in", "prefixes", ")", ":", "\n", "# With right PARADIGM_PREFIXES empty stem is fine;", "\n", "# os.path.commonprefix doesn't return anything useful", "\n", "# for prediction.", "\n", "# stem = os.path.commonprefix(forms)", "\n", "            ", "stem", "=", "\"\"", "\n", "prefixes", "=", "[", "''", "]", "*", "len", "(", "tags", ")", "\n", "\n", "", "", "suffixes", "=", "(", "\n", "form", "[", "len", "(", "pref", ")", "+", "len", "(", "stem", ")", ":", "]", "\n", "for", "form", ",", "pref", "in", "zip", "(", "forms", ",", "prefixes", ")", "\n", ")", "\n", "return", "stem", ",", "tuple", "(", "zip", "(", "suffixes", ",", "tags", ",", "prefixes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._suffixes_prediction_data": [[276, 335], ["logger.debug", "compile._popular_keys", "collections.defaultdict", "range", "logger.debug", "pymorphy2.utils.with_progress", "sorted", "len", "collections.defaultdict", "word.startswith", "word.endswith", "range", "prefix_endings.keys", "logger.debug", "dawgs_data.append", "len", "len", "len", "len", "tuple", "max", "compile._get_suffixes_dawg_data", "collections.defaultdict", "len", "len", "tag.replace().split", "len", "collections.defaultdict", "tag.replace"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._popular_keys", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.with_progress", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._get_suffixes_dawg_data"], ["", "def", "_suffixes_prediction_data", "(", "words", ",", "paradigm_popularity", ",", "gramtab", ",", "paradigms", ",", "suffixes", ",", "\n", "min_ending_freq", ",", "min_paradigm_popularity", ",", "max_suffix_length", ",", "\n", "paradigm_prefixes", ")", ":", "\n", "\n", "    ", "logger", ".", "debug", "(", "'calculating prediction data: removing non-productive paradigms..'", ")", "\n", "productive_paradigms", "=", "_popular_keys", "(", "paradigm_popularity", ",", "min_paradigm_popularity", ")", "\n", "\n", "# [\"suffix\"] => number of occurrences", "\n", "# this is for removing non-productive suffixes", "\n", "ending_counts", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "\n", "# [form_prefix_id][\"suffix\"][\"POS\"][(para_id, idx)] => number or occurrences", "\n", "# this is for selecting most popular parses", "\n", "prefix_endings", "=", "{", "}", "\n", "for", "form_prefix_id", "in", "range", "(", "len", "(", "paradigm_prefixes", ")", ")", ":", "\n", "        ", "prefix_endings", "[", "form_prefix_id", "]", "=", "collections", ".", "defaultdict", "(", "\n", "lambda", ":", "collections", ".", "defaultdict", "(", "\n", "lambda", ":", "collections", ".", "defaultdict", "(", "int", ")", ")", ")", "\n", "\n", "", "logger", ".", "debug", "(", "'calculating prediction data: checking word endings..'", ")", "\n", "for", "word", ",", "(", "para_id", ",", "idx", ")", "in", "with_progress", "(", "words", ",", "\"Checking word endings\"", ")", ":", "\n", "\n", "        ", "if", "para_id", "not", "in", "productive_paradigms", ":", "\n", "            ", "continue", "\n", "\n", "", "paradigm", "=", "paradigms", "[", "para_id", "]", "\n", "\n", "form_count", "=", "len", "(", "paradigm", ")", "//", "3", "\n", "\n", "tag", "=", "gramtab", "[", "paradigm", "[", "form_count", "+", "idx", "]", "]", "\n", "form_prefix_id", "=", "paradigm", "[", "2", "*", "form_count", "+", "idx", "]", "\n", "form_prefix", "=", "paradigm_prefixes", "[", "form_prefix_id", "]", "\n", "form_suffix", "=", "suffixes", "[", "paradigm", "[", "idx", "]", "]", "\n", "\n", "assert", "len", "(", "word", ")", ">=", "len", "(", "form_prefix", "+", "form_suffix", ")", ",", "word", "\n", "assert", "word", ".", "startswith", "(", "form_prefix", ")", ",", "word", "\n", "assert", "word", ".", "endswith", "(", "form_suffix", ")", ",", "word", "\n", "\n", "if", "len", "(", "word", ")", "==", "len", "(", "form_prefix", ")", "+", "len", "(", "form_suffix", ")", ":", "\n", "# pseudo-paradigms are useless for prediction", "\n", "            ", "continue", "\n", "\n", "", "POS", "=", "tuple", "(", "tag", ".", "replace", "(", "' '", ",", "','", ",", "1", ")", ".", "split", "(", "','", ")", ")", "[", "0", "]", "\n", "\n", "for", "i", "in", "range", "(", "max", "(", "len", "(", "form_suffix", ")", ",", "1", ")", ",", "max_suffix_length", "+", "1", ")", ":", "#was: 1,2,3,4,5", "\n", "            ", "word_end", "=", "word", "[", "-", "i", ":", "]", "\n", "ending_counts", "[", "word_end", "]", "+=", "1", "\n", "prefix_endings", "[", "form_prefix_id", "]", "[", "word_end", "]", "[", "POS", "]", "[", "(", "para_id", ",", "idx", ")", "]", "+=", "1", "\n", "\n", "", "", "dawgs_data", "=", "[", "]", "\n", "\n", "for", "form_prefix_id", "in", "sorted", "(", "prefix_endings", ".", "keys", "(", ")", ")", ":", "\n", "        ", "logger", ".", "debug", "(", "'calculating prediction data: preparing DAFSA #%d..'", "%", "form_prefix_id", ")", "\n", "endings", "=", "prefix_endings", "[", "form_prefix_id", "]", "\n", "dawgs_data", ".", "append", "(", "\n", "_get_suffixes_dawg_data", "(", "endings", ",", "ending_counts", ",", "min_ending_freq", ")", "\n", ")", "\n", "\n", "", "return", "dawgs_data", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._get_suffixes_dawg_data": [[337, 361], ["pymorphy2.utils.largest_elements", "counted_suffixes_dawg_data.append", "[].items"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.largest_elements"], ["", "def", "_get_suffixes_dawg_data", "(", "endings", ",", "ending_counts", ",", "min_ending_freq", ")", ":", "\n", "    ", "counted_suffixes_dawg_data", "=", "[", "]", "\n", "\n", "for", "ending", "in", "endings", ":", "\n", "        ", "if", "ending_counts", "[", "ending", "]", "<", "min_ending_freq", ":", "\n", "            ", "continue", "\n", "\n", "", "for", "POS", "in", "endings", "[", "ending", "]", ":", "\n", "\n", "            ", "common_form_counts", "=", "largest_elements", "(", "\n", "iterable", "=", "endings", "[", "ending", "]", "[", "POS", "]", ".", "items", "(", ")", ",", "\n", "key", "=", "_pick_second_item", ",", "\n", "n", "=", "1", ",", "\n", ")", "\n", "\n", "for", "form", ",", "cnt", "in", "common_form_counts", ":", "\n", "# form is a `(para_id, idx)` tuple here", "\n", "# XXX: shouldn't we use inverted cnt to make the results", "\n", "# sorted high to low?", "\n", "                ", "counted_suffixes_dawg_data", ".", "append", "(", "\n", "(", "ending", ",", "(", "cnt", ",", ")", "+", "form", ")", "\n", ")", "\n", "\n", "", "", "", "return", "counted_suffixes_dawg_data", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._popular_keys": [[363, 365], ["set", "counter.items"], "function", ["None"], ["", "def", "_popular_keys", "(", "counter", ",", "threshold", ")", ":", "\n", "    ", "return", "set", "(", "key", "for", "(", "key", ",", "count", ")", "in", "counter", ".", "items", "(", ")", "if", "count", ">=", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._linearized_paradigm": [[367, 373], ["array.array", "str", "list", "itertools.chain", "zip"], "function", ["None"], ["", "def", "_linearized_paradigm", "(", "paradigm", ")", ":", "\n", "    ", "\"\"\"\n    Convert ``paradigm`` (a list of tuples with numbers)\n    to 1-dimensional array.array (for reduced memory usage).\n    \"\"\"", "\n", "return", "array", ".", "array", "(", "str", "(", "\"H\"", ")", ",", "list", "(", "itertools", ".", "chain", "(", "*", "zip", "(", "*", "paradigm", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._create_out_path": [[375, 386], ["logger.debug", "os.mkdir", "logger.info", "logger.warning"], "function", ["None"], ["", "def", "_create_out_path", "(", "out_path", ",", "overwrite", "=", "False", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Creating output folder %s\"", ",", "out_path", ")", "\n", "os", ".", "mkdir", "(", "out_path", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "if", "overwrite", ":", "\n", "            ", "logger", ".", "info", "(", "\"Output folder already exists, overwriting..\"", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Output folder already exists!\"", ")", "\n", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage.load_dict": [[41, 82], ["storage.load_meta", "storage._assert_format_is_compatible", "storage._load_tag_class", "storage._load_gramtab", "pymorphy2.utils.json_read", "storage._load_paradigms", "pymorphy2.dawg.WordsDawg().load", "range", "LoadedDictionary", "os.path.join", "_f", "_f", "_load_tag_class.", "_f", "_f", "_f", "len", "_f", "os.path.exists", "prediction_suffixes_dawgs.append", "pymorphy2.dawg.WordsDawg", "pymorphy2.utils.json_read", "pymorphy2.dawg.PredictionSuffixesDAWG().load", "_f", "pymorphy2.dawg.PredictionSuffixesDAWG"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage.load_meta", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage._assert_format_is_compatible", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage._load_tag_class", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage._load_gramtab", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.json_read", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage._load_paradigms", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.json_read"], ["def", "load_dict", "(", "path", ",", "gramtab_format", "=", "'opencorpora-int'", ")", ":", "\n", "    ", "\"\"\"\n    Load pymorphy2 dictionary.\n    ``path`` is a folder name with dictionary data.\n    \"\"\"", "\n", "\n", "_f", "=", "lambda", "p", ":", "os", ".", "path", ".", "join", "(", "path", ",", "p", ")", "\n", "\n", "meta", "=", "load_meta", "(", "_f", "(", "'meta.json'", ")", ")", "\n", "_assert_format_is_compatible", "(", "meta", ",", "path", ")", "\n", "\n", "Tag", "=", "_load_tag_class", "(", "gramtab_format", ",", "_f", "(", "'grammemes.json'", ")", ")", "\n", "\n", "str_gramtab", "=", "_load_gramtab", "(", "meta", ",", "gramtab_format", ",", "path", ")", "\n", "gramtab", "=", "[", "Tag", "(", "tag_str", ")", "for", "tag_str", "in", "str_gramtab", "]", "\n", "\n", "suffixes", "=", "json_read", "(", "_f", "(", "'suffixes.json'", ")", ")", "\n", "paradigms", "=", "_load_paradigms", "(", "_f", "(", "'paradigms.array'", ")", ")", "\n", "words", "=", "dawg", ".", "WordsDawg", "(", ")", ".", "load", "(", "_f", "(", "'words.dawg'", ")", ")", "\n", "\n", "try", ":", "\n", "        ", "paradigm_prefixes", "=", "meta", "[", "\"compile_options\"", "]", "[", "\"paradigm_prefixes\"", "]", "\n", "", "except", "KeyError", ":", "\n", "# support dicts v2.4", "\n", "        ", "paradigm_prefixes", "=", "json_read", "(", "_f", "(", "'paradigm-prefixes.json'", ")", ")", "\n", "\n", "", "prediction_suffixes_dawgs", "=", "[", "]", "\n", "for", "prefix_id", "in", "range", "(", "len", "(", "paradigm_prefixes", ")", ")", ":", "\n", "        ", "fn", "=", "_f", "(", "'prediction-suffixes-%s.dawg'", "%", "prefix_id", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "fn", ")", "\n", "prediction_suffixes_dawgs", ".", "append", "(", "dawg", ".", "PredictionSuffixesDAWG", "(", ")", ".", "load", "(", "fn", ")", ")", "\n", "\n", "", "return", "LoadedDictionary", "(", "\n", "meta", "=", "meta", ",", "\n", "gramtab", "=", "gramtab", ",", "\n", "suffixes", "=", "suffixes", ",", "\n", "paradigms", "=", "paradigms", ",", "\n", "words", "=", "words", ",", "\n", "prediction_suffixes_dawgs", "=", "prediction_suffixes_dawgs", ",", "\n", "Tag", "=", "Tag", ",", "\n", "paradigm_prefixes", "=", "paradigm_prefixes", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage.save_compiled_dict": [[85, 150], ["logger.info", "pymorphy2.utils.json_write", "pymorphy2.tagset.registry.items", "pymorphy2.utils.json_write", "compiled_dict.words_dawg.save", "enumerate", "logger.debug", "logger.debug", "storage.save_compiled_dict._dawg_len"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.json_write", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.json_write"], ["", "def", "save_compiled_dict", "(", "compiled_dict", ",", "out_path", ",", "source_name", ",", "language_code", ")", ":", "\n", "    ", "\"\"\"\n    Save a compiled_dict to ``out_path``\n    ``out_path`` should be a name of folder where to put dictionaries.\n    \"\"\"", "\n", "logger", ".", "info", "(", "\"Saving...\"", ")", "\n", "_f", "=", "lambda", "path", ":", "os", ".", "path", ".", "join", "(", "out_path", ",", "path", ")", "\n", "\n", "json_write", "(", "_f", "(", "'grammemes.json'", ")", ",", "compiled_dict", ".", "parsed_dict", ".", "grammemes", ")", "\n", "\n", "gramtab_formats", "=", "{", "}", "\n", "for", "format", ",", "Tag", "in", "tagset", ".", "registry", ".", "items", "(", ")", ":", "\n", "        ", "Tag", ".", "_init_grammemes", "(", "compiled_dict", ".", "parsed_dict", ".", "grammemes", ")", "\n", "new_gramtab", "=", "[", "Tag", ".", "_from_internal_tag", "(", "tag", ")", "for", "tag", "in", "compiled_dict", ".", "gramtab", "]", "\n", "\n", "gramtab_name", "=", "\"gramtab-%s.json\"", "%", "format", "\n", "gramtab_formats", "[", "format", "]", "=", "gramtab_name", "\n", "\n", "json_write", "(", "_f", "(", "gramtab_name", ")", ",", "new_gramtab", ")", "\n", "\n", "", "with", "open", "(", "_f", "(", "'paradigms.array'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "struct", ".", "pack", "(", "str", "(", "\"<H\"", ")", ",", "len", "(", "compiled_dict", ".", "paradigms", ")", ")", ")", "\n", "for", "para", "in", "compiled_dict", ".", "paradigms", ":", "\n", "            ", "f", ".", "write", "(", "struct", ".", "pack", "(", "str", "(", "\"<H\"", ")", ",", "len", "(", "para", ")", ")", ")", "\n", "para", ".", "tofile", "(", "f", ")", "\n", "\n", "", "", "json_write", "(", "_f", "(", "'suffixes.json'", ")", ",", "compiled_dict", ".", "suffixes", ")", "\n", "compiled_dict", ".", "words_dawg", ".", "save", "(", "_f", "(", "'words.dawg'", ")", ")", "\n", "\n", "for", "prefix_id", ",", "prediction_suffixes_dawg", "in", "enumerate", "(", "compiled_dict", ".", "prediction_suffixes_dawgs", ")", ":", "\n", "        ", "prediction_suffixes_dawg", ".", "save", "(", "_f", "(", "'prediction-suffixes-%s.dawg'", "%", "prefix_id", ")", ")", "\n", "\n", "", "logger", ".", "debug", "(", "\"computing metadata..\"", ")", "\n", "\n", "def", "_dawg_len", "(", "dawg", ")", ":", "\n", "        ", "return", "sum", "(", "1", "for", "k", "in", "dawg", ".", "iterkeys", "(", ")", ")", "\n", "\n", "", "logger", ".", "debug", "(", "'  words_dawg_len'", ")", "\n", "words_dawg_len", "=", "_dawg_len", "(", "compiled_dict", ".", "words_dawg", ")", "\n", "logger", ".", "debug", "(", "'  prediction_suffixes_dawgs_len'", ")", "\n", "\n", "prediction_suffixes_dawg_lenghts", "=", "[", "]", "\n", "for", "prediction_suffixes_dawg", "in", "compiled_dict", ".", "prediction_suffixes_dawgs", ":", "\n", "        ", "prediction_suffixes_dawg_lenghts", ".", "append", "(", "_dawg_len", "(", "prediction_suffixes_dawg", ")", ")", "\n", "\n", "", "write_meta", "(", "_f", "(", "'meta.json'", ")", ",", "[", "\n", "[", "'language_code'", ",", "language_code", "]", ",", "\n", "[", "'format_version'", ",", "CURRENT_FORMAT_VERSION", "]", ",", "\n", "[", "'pymorphy2_version'", ",", "pymorphy2", ".", "__version__", "]", ",", "\n", "[", "'compiled_at'", ",", "datetime", ".", "datetime", ".", "utcnow", "(", ")", ".", "isoformat", "(", ")", "]", ",", "\n", "\n", "[", "'source'", ",", "source_name", "]", ",", "\n", "[", "'source_version'", ",", "compiled_dict", ".", "parsed_dict", ".", "version", "]", ",", "\n", "[", "'source_revision'", ",", "compiled_dict", ".", "parsed_dict", ".", "revision", "]", ",", "\n", "[", "'source_lexemes_count'", ",", "len", "(", "compiled_dict", ".", "parsed_dict", ".", "lexemes", ")", "]", ",", "\n", "[", "'source_links_count'", ",", "len", "(", "compiled_dict", ".", "parsed_dict", ".", "links", ")", "]", ",", "\n", "\n", "[", "'gramtab_length'", ",", "len", "(", "compiled_dict", ".", "gramtab", ")", "]", ",", "\n", "[", "'gramtab_formats'", ",", "gramtab_formats", "]", ",", "\n", "[", "'paradigms_length'", ",", "len", "(", "compiled_dict", ".", "paradigms", ")", "]", ",", "\n", "[", "'suffixes_length'", ",", "len", "(", "compiled_dict", ".", "suffixes", ")", "]", ",", "\n", "\n", "[", "'words_dawg_length'", ",", "words_dawg_len", "]", ",", "\n", "[", "'compile_options'", ",", "compiled_dict", ".", "compile_options", "]", ",", "\n", "[", "'prediction_suffixes_dawg_lengths'", ",", "prediction_suffixes_dawg_lenghts", "]", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage.load_meta": [[153, 159], ["pymorphy2.utils.json_read", "hasattr", "dict", "collections.OrderedDict"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.json_read"], ["", "def", "load_meta", "(", "filename", ")", ":", "\n", "    ", "\"\"\" Load metadata. \"\"\"", "\n", "meta", "=", "json_read", "(", "filename", ",", "parse_float", "=", "str", ")", "\n", "if", "hasattr", "(", "collections", ",", "'OrderedDict'", ")", ":", "\n", "        ", "return", "collections", ".", "OrderedDict", "(", "meta", ")", "\n", "", "return", "dict", "(", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage.write_meta": [[161, 166], ["isinstance", "pymorphy2.utils.json_write", "list", "list.items"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.json_write"], ["", "def", "write_meta", "(", "filename", ",", "meta", ")", ":", "\n", "    ", "\"\"\" Save metadata to a file. \"\"\"", "\n", "if", "isinstance", "(", "meta", ",", "dict", ")", ":", "\n", "        ", "meta", "=", "list", "(", "meta", ".", "items", "(", ")", ")", "\n", "", "json_write", "(", "filename", ",", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage.update_meta": [[168, 173], ["storage.load_meta", "load_meta.update", "storage.write_meta"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage.load_meta", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage.write_meta"], ["", "def", "update_meta", "(", "filename", ",", "extra", ")", ":", "\n", "    ", "\"\"\" Update meta with extra fields \"\"\"", "\n", "meta", "=", "load_meta", "(", "filename", ")", "\n", "meta", ".", "update", "(", "extra", ")", "\n", "write_meta", "(", "filename", ",", "meta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage._load_tag_class": [[175, 187], ["pymorphy2.utils.json_read", "Tag._init_grammemes", "ValueError"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.json_read", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations.AbbreviatedPatronymicAnalyzer._init_grammemes"], ["", "def", "_load_tag_class", "(", "gramtab_format", ",", "grammemes_filename", ")", ":", "\n", "    ", "\"\"\" Load and initialize Tag class (according to ``gramtab_format``). \"\"\"", "\n", "if", "gramtab_format", "not", "in", "tagset", ".", "registry", ":", "\n", "        ", "raise", "ValueError", "(", "\"This gramtab format ('%s') is unsupported.\"", "%", "gramtab_format", ")", "\n", "\n", "# FIXME: clone the class", "\n", "", "Tag", "=", "tagset", ".", "registry", "[", "gramtab_format", "]", "#._clone_class()", "\n", "\n", "grammemes", "=", "json_read", "(", "grammemes_filename", ")", "\n", "Tag", ".", "_init_grammemes", "(", "grammemes", ")", "\n", "\n", "return", "Tag", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage._load_gramtab": [[189, 197], ["meta.get", "os.path.join", "pymorphy2.utils.json_read", "ValueError", "meta.get.keys"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.json_read"], ["", "def", "_load_gramtab", "(", "meta", ",", "gramtab_format", ",", "path", ")", ":", "\n", "    ", "\"\"\" Load gramtab (a list of tags) \"\"\"", "\n", "gramtab_formats", "=", "meta", ".", "get", "(", "'gramtab_formats'", ",", "{", "}", ")", "\n", "if", "gramtab_format", "not", "in", "gramtab_formats", ":", "\n", "        ", "raise", "ValueError", "(", "\"This gramtab format (%s) is unavailable; available formats: %s\"", "%", "(", "gramtab_format", ",", "gramtab_formats", ".", "keys", "(", ")", ")", ")", "\n", "\n", "", "gramtab_filename", "=", "os", ".", "path", ".", "join", "(", "path", ",", "gramtab_formats", "[", "gramtab_format", "]", ")", "\n", "return", "json_read", "(", "gramtab_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage._load_paradigms": [[199, 213], ["open", "range", "struct.unpack", "array.array", "array.array.fromfile", "paradigms.append", "str", "f.read", "struct.unpack", "str", "str", "f.read"], "function", ["None"], ["", "def", "_load_paradigms", "(", "filename", ")", ":", "\n", "    ", "\"\"\" Load paradigms data \"\"\"", "\n", "paradigms", "=", "[", "]", "\n", "with", "open", "(", "filename", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "paradigms_count", "=", "struct", ".", "unpack", "(", "str", "(", "\"<H\"", ")", ",", "f", ".", "read", "(", "2", ")", ")", "[", "0", "]", "\n", "\n", "for", "x", "in", "range", "(", "paradigms_count", ")", ":", "\n", "            ", "paradigm_len", "=", "struct", ".", "unpack", "(", "str", "(", "\"<H\"", ")", ",", "f", ".", "read", "(", "2", ")", ")", "[", "0", "]", "\n", "\n", "para", "=", "array", ".", "array", "(", "str", "(", "\"H\"", ")", ")", "\n", "para", ".", "fromfile", "(", "f", ",", "paradigm_len", ")", "\n", "\n", "paradigms", ".", "append", "(", "para", ")", "\n", "", "", "return", "paradigms", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.storage._assert_format_is_compatible": [[215, 230], ["str", "str.split", "CURRENT_FORMAT_VERSION.split", "meta.get", "ValueError", "ValueError"], "function", ["None"], ["", "def", "_assert_format_is_compatible", "(", "meta", ",", "path", ")", ":", "\n", "    ", "\"\"\" Raise an exception if dictionary format is not compatible \"\"\"", "\n", "format_version", "=", "str", "(", "meta", ".", "get", "(", "'format_version'", ",", "'0.0'", ")", ")", "\n", "\n", "if", "'.'", "not", "in", "format_version", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid format_version: %s'", "%", "format_version", ")", "\n", "\n", "", "major", ",", "minor", "=", "format_version", ".", "split", "(", "'.'", ")", "\n", "curr_major", ",", "curr_minor", "=", "CURRENT_FORMAT_VERSION", ".", "split", "(", "'.'", ")", "\n", "\n", "if", "major", "!=", "curr_major", ":", "\n", "        ", "msg", "=", "(", "\"Error loading dictionaries from %s: \"", "\n", "\"the format ('%s') is not supported; \"", "\n", "\"required format is '%s.x'.\"", ")", "%", "(", "path", ",", "format_version", ",", "curr_major", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.BaseAnalyzerUnit.init": [[30, 33], ["None"], "methods", ["None"], ["def", "init", "(", "self", ",", "morph", ")", ":", "\n", "        ", "self", ".", "morph", "=", "morph", "\n", "self", ".", "dict", "=", "morph", ".", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.BaseAnalyzerUnit.clone": [[34, 36], ["base.BaseAnalyzerUnit.__class__", "base.BaseAnalyzerUnit._get_params"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.BaseAnalyzerUnit._get_params"], ["", "def", "clone", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", "(", "**", "self", ".", "_get_params", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.BaseAnalyzerUnit.parse": [[37, 39], ["NotImplementedError"], "methods", ["None"], ["", "def", "parse", "(", "self", ",", "word", ",", "word_lower", ",", "seen_parses", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.BaseAnalyzerUnit.tag": [[40, 48], ["base.BaseAnalyzerUnit.parse", "set", "pymorphy2.units.utils.add_tag_if_not_seen"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.add_tag_if_not_seen"], ["", "def", "tag", "(", "self", ",", "word", ",", "word_lower", ",", "seen_tags", ")", ":", "\n", "# By default .tag() uses .parse().", "\n", "# Usually it is possible to write a more efficient implementation;", "\n", "# analyzers should do it when possible.", "\n", "        ", "result", "=", "[", "]", "\n", "for", "p", "in", "self", ".", "parse", "(", "word", ",", "word_lower", ",", "set", "(", ")", ")", ":", "\n", "            ", "add_tag_if_not_seen", "(", "p", "[", "1", "]", ",", "result", ",", "seen_tags", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.BaseAnalyzerUnit.normalized": [[49, 51], ["NotImplementedError"], "methods", ["None"], ["", "def", "normalized", "(", "self", ",", "form", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.BaseAnalyzerUnit.get_lexeme": [[52, 54], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_lexeme", "(", "self", ",", "form", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.BaseAnalyzerUnit.__repr__": [[55, 60], ["pymorphy2.utils.kwargs_repr", "base.BaseAnalyzerUnit._get_params", "str"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.kwargs_repr", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.BaseAnalyzerUnit._get_params"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "cls_text", "=", "self", ".", "__class__", ".", "__name__", "\n", "kwargs_text", "=", "kwargs_repr", "(", "self", ".", "_get_params", "(", ")", ",", "\n", "self", ".", "_repr_skip_value_params", ")", "\n", "return", "str", "(", "\"%s(%s)\"", ")", "%", "(", "cls_text", ",", "kwargs_text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.BaseAnalyzerUnit._get_param_names": [[61, 72], ["inspect.getargspec", "sorted"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_get_param_names", "(", "cls", ")", ":", "\n", "        ", "\"\"\"\n        Get parameter names for the analyzer unit.\n        It works by introspecting `__init__` arguments.\n        `__init__` method must not use *args.\n        \"\"\"", "\n", "if", "cls", ".", "__init__", "is", "object", ".", "__init__", ":", "\n", "            ", "return", "[", "]", "\n", "", "args", ",", "varargs", ",", "kw", ",", "default", "=", "inspect", ".", "getargspec", "(", "cls", ".", "__init__", ")", "\n", "return", "sorted", "(", "args", "[", "1", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.BaseAnalyzerUnit._get_params": [[73, 77], ["dict", "getattr", "base.BaseAnalyzerUnit._get_param_names"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.BaseAnalyzerUnit._get_param_names"], ["", "def", "_get_params", "(", "self", ")", ":", "\n", "        ", "\"\"\" Return a dict with the parameters for this analyzer unit. \"\"\"", "\n", "return", "dict", "(", "\n", "(", "key", ",", "getattr", "(", "self", ",", "key", ",", "None", ")", ")", "for", "key", "in", "self", ".", "_get_param_names", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.AnalogyAnalizerUnit.normalized": [[83, 86], ["base.AnalogyAnalizerUnit._method_info", "base.AnalogyAnalizerUnit._normalized"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.AnalogyAnalizerUnit._method_info", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.AnalogyAnalizerUnit._normalized"], ["    ", "def", "normalized", "(", "self", ",", "form", ")", ":", "\n", "        ", "base_analyzer", ",", "this_method", "=", "self", ".", "_method_info", "(", "form", ")", "\n", "return", "self", ".", "_normalized", "(", "form", ",", "base_analyzer", ",", "this_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.AnalogyAnalizerUnit._normalized": [[87, 93], ["base.AnalogyAnalizerUnit.normalizer", "pymorphy2.units.utils.without_last_method", "base.AnalogyAnalizerUnit.send", "pymorphy2.units.utils.append_method", "next", "base_analyzer.normalized"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy._PrefixAnalyzer.normalizer", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.without_last_method", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.append_method", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.normalized"], ["", "def", "_normalized", "(", "self", ",", "form", ",", "base_analyzer", ",", "this_method", ")", ":", "\n", "        ", "normalizer", "=", "self", ".", "normalizer", "(", "form", ",", "this_method", ")", "\n", "\n", "form", "=", "without_last_method", "(", "next", "(", "normalizer", ")", ")", "\n", "normal_form", "=", "normalizer", ".", "send", "(", "base_analyzer", ".", "normalized", "(", "form", ")", ")", "\n", "return", "append_method", "(", "normal_form", ",", "this_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.AnalogyAnalizerUnit.get_lexeme": [[94, 97], ["base.AnalogyAnalizerUnit._method_info", "base.AnalogyAnalizerUnit._get_lexeme"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.AnalogyAnalizerUnit._method_info", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.AnalogyAnalizerUnit._get_lexeme"], ["", "def", "get_lexeme", "(", "self", ",", "form", ")", ":", "\n", "        ", "base_analyzer", ",", "this_method", "=", "self", ".", "_method_info", "(", "form", ")", "\n", "return", "self", ".", "_get_lexeme", "(", "form", ",", "base_analyzer", ",", "this_method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.AnalogyAnalizerUnit._get_lexeme": [[98, 103], ["base.AnalogyAnalizerUnit.lexemizer", "pymorphy2.units.utils.without_last_method", "base.AnalogyAnalizerUnit.send", "next", "base_analyzer.get_lexeme", "pymorphy2.units.utils.append_method"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy._PrefixAnalyzer.lexemizer", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.without_last_method", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.get_lexeme", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.append_method"], ["", "def", "_get_lexeme", "(", "self", ",", "form", ",", "base_analyzer", ",", "this_method", ")", ":", "\n", "        ", "lexemizer", "=", "self", ".", "lexemizer", "(", "form", ",", "this_method", ")", "\n", "form", "=", "without_last_method", "(", "next", "(", "lexemizer", ")", ")", "\n", "lexeme", "=", "lexemizer", ".", "send", "(", "base_analyzer", ".", "get_lexeme", "(", "form", ")", ")", "\n", "return", "[", "append_method", "(", "f", ",", "this_method", ")", "for", "f", "in", "lexeme", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.AnalogyAnalizerUnit.normalizer": [[104, 118], ["None"], "methods", ["None"], ["", "def", "normalizer", "(", "self", ",", "form", ",", "this_method", ")", ":", "\n", "        ", "\"\"\" A coroutine for normalization \"\"\"", "\n", "\n", "# 1. undecorate form:", "\n", "# form = undecorate(form)", "\n", "\n", "# 2. get normalized version of undecorated form:", "\n", "normal_form", "=", "yield", "form", "\n", "\n", "# 3. decorate the normalized version:", "\n", "# normal_form = decorate(normal_form)", "\n", "\n", "# 4. return the result", "\n", "yield", "normal_form", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.AnalogyAnalizerUnit.lexemizer": [[119, 123], ["None"], "methods", ["None"], ["", "def", "lexemizer", "(", "self", ",", "form", ",", "this_method", ")", ":", "\n", "        ", "\"\"\" A coroutine for preparing lexemes \"\"\"", "\n", "lexeme", "=", "yield", "form", "\n", "yield", "lexeme", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.base.AnalogyAnalizerUnit._method_info": [[124, 129], ["None"], "methods", ["None"], ["", "def", "_method_info", "(", "self", ",", "form", ")", ":", "\n", "        ", "methods_stack", "=", "form", "[", "4", "]", "\n", "base_method", ",", "this_method", "=", "methods_stack", "[", "-", "2", ":", "]", "\n", "base_analyzer", "=", "base_method", "[", "0", "]", "\n", "return", "base_analyzer", ",", "this_method", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations._InitialsAnalyzer.__init__": [[11, 21], ["set", "hasattr", "ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "letters", ",", "tag_pattern", "=", "None", ",", "score", "=", "0.1", ")", ":", "\n", "        ", "if", "tag_pattern", "is", "None", ":", "\n", "            ", "if", "hasattr", "(", "self", ",", "'TAG_PATTERN'", ")", ":", "\n", "                ", "tag_pattern", "=", "self", ".", "TAG_PATTERN", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"Please provide tag_pattern.\"", ")", "\n", "", "", "self", ".", "tag_pattern", "=", "tag_pattern", "\n", "self", ".", "score", "=", "score", "\n", "self", ".", "letters", "=", "letters", "\n", "self", ".", "_letters_set", "=", "set", "(", "letters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations._InitialsAnalyzer.init": [[22, 26], ["super().init", "abbreviations._InitialsAnalyzer._init_grammemes", "abbreviations._InitialsAnalyzer._get_gender_case_tags"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations.AbbreviatedPatronymicAnalyzer._init_grammemes", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations._InitialsAnalyzer._get_gender_case_tags"], ["", "def", "init", "(", "self", ",", "morph", ")", ":", "\n", "        ", "super", "(", "_InitialsAnalyzer", ",", "self", ")", ".", "init", "(", "morph", ")", "\n", "self", ".", "_init_grammemes", "(", "self", ".", "morph", ".", "TagClass", ")", "\n", "self", ".", "_tags", "=", "self", ".", "_get_gender_case_tags", "(", "self", ".", "tag_pattern", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations._InitialsAnalyzer._init_grammemes": [[27, 29], ["tag_cls.add_grammemes_to_known"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.add_grammemes_to_known"], ["", "def", "_init_grammemes", "(", "self", ",", "tag_cls", ")", ":", "\n", "        ", "tag_cls", ".", "add_grammemes_to_known", "(", "'Init'", ",", "'\u0438\u043d\u0438\u0446'", ",", "overwrite", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations._InitialsAnalyzer._get_gender_case_tags": [[30, 35], ["abbreviations._InitialsAnalyzer.morph.TagClass"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.TagClass"], ["", "def", "_get_gender_case_tags", "(", "self", ",", "pattern", ")", ":", "\n", "        ", "return", "[", "\n", "self", ".", "morph", ".", "TagClass", "(", "pattern", "%", "{", "'gender'", ":", "gender", ",", "'case'", ":", "case", "}", ")", "\n", "for", "gender", "in", "[", "'masc'", ",", "'femn'", "]", "\n", "for", "case", "in", "[", "'nomn'", ",", "'gent'", ",", "'datv'", ",", "'accs'", ",", "'ablt'", ",", "'loct'", "]", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations._InitialsAnalyzer.parse": [[37, 43], ["None"], "methods", ["None"], ["", "def", "parse", "(", "self", ",", "word", ",", "word_lower", ",", "seen_parses", ")", ":", "\n", "        ", "if", "word", "not", "in", "self", ".", "_letters_set", ":", "\n", "            ", "return", "[", "]", "\n", "", "return", "[", "\n", "(", "word_lower", ",", "tag", ",", "word_lower", ",", "self", ".", "score", ",", "(", "(", "self", ",", "word", ")", ",", ")", ")", "\n", "for", "tag", "in", "self", ".", "_tags", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations._InitialsAnalyzer.tag": [[45, 49], ["None"], "methods", ["None"], ["", "def", "tag", "(", "self", ",", "word", ",", "word_lower", ",", "seen_tags", ")", ":", "\n", "        ", "if", "word", "not", "in", "self", ".", "_letters_set", ":", "\n", "            ", "return", "[", "]", "\n", "", "return", "self", ".", "_tags", "[", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations.AbbreviatedFirstNameAnalyzer.init": [[54, 59], ["abbreviations._InitialsAnalyzer.init"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init"], ["def", "init", "(", "self", ",", "morph", ")", ":", "\n", "        ", "super", "(", "AbbreviatedFirstNameAnalyzer", ",", "self", ")", ".", "init", "(", "morph", ")", "\n", "self", ".", "_tags_masc", "=", "[", "tag", "for", "tag", "in", "self", ".", "_tags", "if", "'masc'", "in", "tag", "]", "\n", "self", ".", "_tags_femn", "=", "[", "tag", "for", "tag", "in", "self", ".", "_tags", "if", "'femn'", "in", "tag", "]", "\n", "assert", "self", ".", "_tags_masc", "+", "self", ".", "_tags_femn", "==", "self", ".", "_tags", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations.AbbreviatedFirstNameAnalyzer._init_grammemes": [[60, 63], ["abbreviations._InitialsAnalyzer._init_grammemes", "abbreviations.AbbreviatedFirstNameAnalyzer.morph.TagClass.add_grammemes_to_known"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations.AbbreviatedPatronymicAnalyzer._init_grammemes", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.add_grammemes_to_known"], ["", "def", "_init_grammemes", "(", "self", ",", "tag_cls", ")", ":", "\n", "        ", "super", "(", "AbbreviatedFirstNameAnalyzer", ",", "self", ")", ".", "_init_grammemes", "(", "tag_cls", ")", "\n", "self", ".", "morph", ".", "TagClass", ".", "add_grammemes_to_known", "(", "'Name'", ",", "'\u0438\u043c\u044f'", ",", "overwrite", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations.AbbreviatedFirstNameAnalyzer.get_lexeme": [[64, 71], ["None"], "methods", ["None"], ["", "def", "get_lexeme", "(", "self", ",", "form", ")", ":", "\n", "# 2 lexemes: masc and femn", "\n", "        ", "fixed_word", ",", "form_tag", ",", "normal_form", ",", "score", ",", "methods_stack", "=", "form", "\n", "tags", "=", "self", ".", "_tags_masc", "if", "'masc'", "in", "form_tag", "else", "self", ".", "_tags_femn", "\n", "return", "[", "\n", "(", "fixed_word", ",", "tag", ",", "normal_form", ",", "score", ",", "methods_stack", ")", "\n", "for", "tag", "in", "tags", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations.AbbreviatedFirstNameAnalyzer.normalized": [[73, 78], ["None"], "methods", ["None"], ["", "def", "normalized", "(", "self", ",", "form", ")", ":", "\n", "# don't normalize female names to male names", "\n", "        ", "fixed_word", ",", "form_tag", ",", "normal_form", ",", "score", ",", "methods_stack", "=", "form", "\n", "tags", "=", "self", ".", "_tags_masc", "if", "'masc'", "in", "form_tag", "else", "self", ".", "_tags_femn", "\n", "return", "fixed_word", ",", "tags", "[", "0", "]", ",", "normal_form", ",", "score", ",", "methods_stack", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations.AbbreviatedPatronymicAnalyzer._init_grammemes": [[83, 86], ["abbreviations._InitialsAnalyzer._init_grammemes", "abbreviations.AbbreviatedPatronymicAnalyzer.morph.TagClass.add_grammemes_to_known"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations.AbbreviatedPatronymicAnalyzer._init_grammemes", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.add_grammemes_to_known"], ["def", "_init_grammemes", "(", "self", ",", "tag_cls", ")", ":", "\n", "        ", "super", "(", "AbbreviatedPatronymicAnalyzer", ",", "self", ")", ".", "_init_grammemes", "(", "tag_cls", ")", "\n", "self", ".", "morph", ".", "TagClass", ".", "add_grammemes_to_known", "(", "'Patr'", ",", "'\u043e\u0442\u0447'", ",", "overwrite", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations.AbbreviatedPatronymicAnalyzer.get_lexeme": [[87, 92], ["None"], "methods", ["None"], ["", "def", "get_lexeme", "(", "self", ",", "form", ")", ":", "\n", "        ", "fixed_word", ",", "_", ",", "normal_form", ",", "score", ",", "methods_stack", "=", "form", "\n", "return", "[", "\n", "(", "fixed_word", ",", "tag", ",", "normal_form", ",", "score", ",", "methods_stack", ")", "\n", "for", "tag", "in", "self", ".", "_tags", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.abbreviations.AbbreviatedPatronymicAnalyzer.normalized": [[94, 97], ["None"], "methods", ["None"], ["", "def", "normalized", "(", "self", ",", "form", ")", ":", "\n", "        ", "fixed_word", ",", "_", ",", "normal_form", ",", "score", ",", "methods_stack", "=", "form", "\n", "return", "fixed_word", ",", "self", ".", "_tags", "[", "0", "]", ",", "normal_form", ",", "score", ",", "methods_stack", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_lookup.DictionaryAnalyzer.parse": [[19, 37], ["by_lookup.DictionaryAnalyzer.dict.words.similar_items", "by_lookup.DictionaryAnalyzer.dict.build_normal_form", "by_lookup.DictionaryAnalyzer.dict.build_tag_info", "res.append"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_normal_form", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_tag_info"], ["def", "parse", "(", "self", ",", "word", ",", "word_lower", ",", "seen_parses", ")", ":", "\n", "        ", "\"\"\"\n        Parse a word using this dictionary.\n        \"\"\"", "\n", "res", "=", "[", "]", "\n", "para_data", "=", "self", ".", "dict", ".", "words", ".", "similar_items", "(", "word_lower", ",", "self", ".", "morph", ".", "char_substitutes", ")", "\n", "\n", "for", "fixed_word", ",", "parses", "in", "para_data", ":", "\n", "# `fixed_word` is a word with proper substitute (e.g. \u0451) letters", "\n", "\n", "            ", "for", "para_id", ",", "idx", "in", "parses", ":", "\n", "                ", "normal_form", "=", "self", ".", "dict", ".", "build_normal_form", "(", "para_id", ",", "idx", ",", "fixed_word", ")", "\n", "tag", "=", "self", ".", "dict", ".", "build_tag_info", "(", "para_id", ",", "idx", ")", "\n", "method", "=", "(", "(", "self", ",", "fixed_word", ",", "para_id", ",", "idx", ")", ",", ")", "\n", "res", ".", "append", "(", "(", "fixed_word", ",", "tag", ",", "normal_form", ",", "1.0", ",", "method", ")", ")", "\n", "\n", "# res.sort(key=lambda p: len(p[1]))  #  prefer simple parses", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_lookup.DictionaryAnalyzer.tag": [[38, 60], ["by_lookup.DictionaryAnalyzer.dict.words.similar_item_values", "result.append", "len"], "methods", ["None"], ["", "def", "tag", "(", "self", ",", "word", ",", "word_lower", ",", "seen_tags", ")", ":", "\n", "        ", "\"\"\"\n        Tag a word using this dictionary.\n        \"\"\"", "\n", "para_data", "=", "self", ".", "dict", ".", "words", ".", "similar_item_values", "(", "word_lower", ",", "self", ".", "morph", ".", "char_substitutes", ")", "\n", "\n", "# avoid extra attribute lookups", "\n", "paradigms", "=", "self", ".", "dict", ".", "paradigms", "\n", "gramtab", "=", "self", ".", "dict", ".", "gramtab", "\n", "\n", "# tag known word", "\n", "result", "=", "[", "]", "\n", "for", "parse", "in", "para_data", ":", "\n", "            ", "for", "para_id", ",", "idx", "in", "parse", ":", "\n", "# result.append(self.build_tag_info(para_id, idx))", "\n", "# .build_tag_info is unrolled for speed", "\n", "                ", "paradigm", "=", "paradigms", "[", "para_id", "]", "\n", "paradigm_len", "=", "len", "(", "paradigm", ")", "//", "3", "\n", "tag_id", "=", "paradigm", "[", "paradigm_len", "+", "idx", "]", "\n", "result", ".", "append", "(", "gramtab", "[", "tag_id", "]", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_lookup.DictionaryAnalyzer.get_lexeme": [[61, 81], ["by_lookup.DictionaryAnalyzer._extract_para_info", "by_lookup.DictionaryAnalyzer.dict.build_stem", "by_lookup.DictionaryAnalyzer.dict.build_paradigm_info", "enumerate", "by_lookup.DictionaryAnalyzer._fix_stack", "result.append"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_lookup.DictionaryAnalyzer._extract_para_info", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_stem", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_paradigm_info", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_lookup.DictionaryAnalyzer._fix_stack"], ["", "def", "get_lexeme", "(", "self", ",", "form", ")", ":", "\n", "        ", "\"\"\"\n        Return a lexeme (given a parsed word).\n        \"\"\"", "\n", "fixed_word", ",", "tag", ",", "normal_form", ",", "score", ",", "methods_stack", "=", "form", "\n", "_", ",", "para_id", ",", "idx", "=", "self", ".", "_extract_para_info", "(", "methods_stack", ")", "\n", "\n", "_para", "=", "self", ".", "dict", ".", "paradigms", "[", "para_id", "]", "\n", "stem", "=", "self", ".", "dict", ".", "build_stem", "(", "_para", ",", "idx", ",", "fixed_word", ")", "\n", "\n", "result", "=", "[", "]", "\n", "paradigm", "=", "self", ".", "dict", ".", "build_paradigm_info", "(", "para_id", ")", "# XXX: reuse _para?", "\n", "\n", "for", "index", ",", "(", "_prefix", ",", "_tag", ",", "_suffix", ")", "in", "enumerate", "(", "paradigm", ")", ":", "\n", "            ", "word", "=", "_prefix", "+", "stem", "+", "_suffix", "\n", "new_methods_stack", "=", "self", ".", "_fix_stack", "(", "methods_stack", ",", "word", ",", "para_id", ",", "index", ")", "\n", "parse", "=", "(", "word", ",", "_tag", ",", "normal_form", ",", "1.0", ",", "new_methods_stack", ")", "\n", "result", ".", "append", "(", "parse", ")", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_lookup.DictionaryAnalyzer.normalized": [[82, 93], ["by_lookup.DictionaryAnalyzer._extract_para_info", "by_lookup.DictionaryAnalyzer.dict.build_tag_info", "by_lookup.DictionaryAnalyzer._fix_stack"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_lookup.DictionaryAnalyzer._extract_para_info", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_tag_info", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_lookup.DictionaryAnalyzer._fix_stack"], ["", "def", "normalized", "(", "self", ",", "form", ")", ":", "\n", "        ", "fixed_word", ",", "tag", ",", "normal_form", ",", "score", ",", "methods_stack", "=", "form", "\n", "original_word", ",", "para_id", ",", "idx", "=", "self", ".", "_extract_para_info", "(", "methods_stack", ")", "\n", "\n", "if", "idx", "==", "0", ":", "\n", "            ", "return", "form", "\n", "\n", "", "tag", "=", "self", ".", "dict", ".", "build_tag_info", "(", "para_id", ",", "0", ")", "\n", "new_methods_stack", "=", "self", ".", "_fix_stack", "(", "methods_stack", ",", "normal_form", ",", "para_id", ",", "0", ")", "\n", "\n", "return", "(", "normal_form", ",", "tag", ",", "normal_form", ",", "1.0", ",", "new_methods_stack", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_lookup.DictionaryAnalyzer._extract_para_info": [[94, 100], ["None"], "methods", ["None"], ["", "def", "_extract_para_info", "(", "self", ",", "methods_stack", ")", ":", "\n", "# This method assumes that DictionaryAnalyzer is the first", "\n", "# and the only method in methods_stack.", "\n", "        ", "analyzer", ",", "original_word", ",", "para_id", ",", "idx", "=", "methods_stack", "[", "0", "]", "\n", "assert", "analyzer", "is", "self", "\n", "return", "original_word", ",", "para_id", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_lookup.DictionaryAnalyzer._fix_stack": [[101, 104], ["None"], "methods", ["None"], ["", "def", "_fix_stack", "(", "self", ",", "methods_stack", ",", "word", ",", "para_id", ",", "idx", ")", ":", "\n", "        ", "method0", "=", "self", ",", "word", ",", "para_id", ",", "idx", "\n", "return", "(", "method0", ",", ")", "+", "methods_stack", "[", "1", ":", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenSeparatedParticleAnalyzer.__init__": [[31, 37], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "particles_after_hyphen", ",", "score_multiplier", "=", "0.9", ")", ":", "\n", "        ", "self", ".", "score_multiplier", "=", "score_multiplier", "\n", "\n", "# XXX: maybe the code can be made faster by compiling", "\n", "# `particles_after_hyphen` list to a DAWG?", "\n", "self", ".", "particles_after_hyphen", "=", "particles_after_hyphen", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenSeparatedParticleAnalyzer.parse": [[38, 59], ["by_hyphen.HyphenSeparatedParticleAnalyzer.possible_splits", "by_hyphen.HyphenSeparatedParticleAnalyzer.morph.parse", "pymorphy2.units.utils.add_parse_if_not_seen"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownPrefixAnalyzer.possible_splits", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.add_parse_if_not_seen"], ["", "def", "parse", "(", "self", ",", "word", ",", "word_lower", ",", "seen_parses", ")", ":", "\n", "\n", "        ", "result", "=", "[", "]", "\n", "for", "unsuffixed_word", ",", "particle", "in", "self", ".", "possible_splits", "(", "word_lower", ")", ":", "\n", "            ", "method", "=", "(", "self", ",", "particle", ")", "\n", "\n", "for", "fixed_word", ",", "tag", ",", "normal_form", ",", "score", ",", "methods_stack", "in", "self", ".", "morph", ".", "parse", "(", "unsuffixed_word", ")", ":", "\n", "                ", "parse", "=", "(", "\n", "fixed_word", "+", "particle", ",", "\n", "tag", ",", "\n", "normal_form", "+", "particle", ",", "\n", "score", "*", "self", ".", "score_multiplier", ",", "\n", "methods_stack", "+", "(", "method", ",", ")", "\n", ")", "\n", "add_parse_if_not_seen", "(", "parse", ",", "result", ",", "seen_parses", ")", "\n", "\n", "# If a word ends with with one of the particles,", "\n", "# it can't ends with an another.", "\n", "", "break", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenSeparatedParticleAnalyzer.tag": [[60, 69], ["by_hyphen.HyphenSeparatedParticleAnalyzer.possible_splits", "result.extend", "by_hyphen.HyphenSeparatedParticleAnalyzer.morph.tag"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownPrefixAnalyzer.possible_splits", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag"], ["", "def", "tag", "(", "self", ",", "word", ",", "word_lower", ",", "seen_tags", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "unsuffixed_word", ",", "particle", "in", "self", ".", "possible_splits", "(", "word_lower", ")", ":", "\n", "            ", "result", ".", "extend", "(", "self", ".", "morph", ".", "tag", "(", "unsuffixed_word", ")", ")", "\n", "# If a word ends with with one of the particles,", "\n", "# it can't ends with an another.", "\n", "break", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenSeparatedParticleAnalyzer.possible_splits": [[70, 83], ["word.endswith", "len"], "methods", ["None"], ["", "def", "possible_splits", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "'-'", "not", "in", "word", ":", "\n", "            ", "return", "\n", "\n", "", "for", "particle", "in", "self", ".", "particles_after_hyphen", ":", "\n", "            ", "if", "not", "word", ".", "endswith", "(", "particle", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "unsuffixed_word", "=", "word", "[", ":", "-", "len", "(", "particle", ")", "]", "\n", "if", "not", "unsuffixed_word", ":", "\n", "                ", "continue", "\n", "\n", "", "yield", "unsuffixed_word", ",", "particle", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenSeparatedParticleAnalyzer.normalizer": [[84, 88], ["pymorphy2.units.utils.without_fixed_suffix", "pymorphy2.units.utils.with_suffix", "len"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.without_fixed_suffix", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.with_suffix"], ["", "", "def", "normalizer", "(", "self", ",", "form", ",", "this_method", ")", ":", "\n", "        ", "particle", "=", "this_method", "[", "1", "]", "\n", "normal_form", "=", "yield", "without_fixed_suffix", "(", "form", ",", "len", "(", "particle", ")", ")", "\n", "yield", "with_suffix", "(", "normal_form", ",", "particle", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenSeparatedParticleAnalyzer.lexemizer": [[89, 93], ["pymorphy2.units.utils.without_fixed_suffix", "len", "pymorphy2.units.utils.with_suffix"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.without_fixed_suffix", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.with_suffix"], ["", "def", "lexemizer", "(", "self", ",", "form", ",", "this_method", ")", ":", "\n", "        ", "particle", "=", "this_method", "[", "1", "]", "\n", "lexeme", "=", "yield", "without_fixed_suffix", "(", "form", ",", "len", "(", "particle", ")", ")", "\n", "yield", "[", "with_suffix", "(", "f", ",", "particle", ")", "for", "f", "in", "lexeme", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenAdverbAnalyzer.__init__": [[101, 103], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "score_multiplier", "=", "0.7", ")", ":", "\n", "        ", "self", ".", "score_multiplier", "=", "score_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenAdverbAnalyzer.init": [[104, 107], ["super().init", "by_hyphen.HyphenAdverbAnalyzer.morph.TagClass"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.TagClass"], ["", "def", "init", "(", "self", ",", "morph", ")", ":", "\n", "        ", "super", "(", "HyphenAdverbAnalyzer", ",", "self", ")", ".", "init", "(", "morph", ")", "\n", "self", ".", "_tag", "=", "self", ".", "morph", ".", "TagClass", "(", "'ADVB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenAdverbAnalyzer.parse": [[108, 119], ["seen_parses.add", "by_hyphen.HyphenAdverbAnalyzer.should_parse"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenAdverbAnalyzer.should_parse"], ["", "def", "parse", "(", "self", ",", "word", ",", "word_lower", ",", "seen_parses", ")", ":", "\n", "        ", "if", "not", "self", ".", "should_parse", "(", "word_lower", ")", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "parse", "=", "(", "\n", "word_lower", ",", "self", ".", "_tag", ",", "word_lower", ",", "\n", "self", ".", "score_multiplier", ",", "\n", "(", "(", "self", ",", "word", ")", ",", ")", "\n", ")", "\n", "seen_parses", ".", "add", "(", "parse", ")", "\n", "return", "[", "parse", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenAdverbAnalyzer.tag": [[120, 126], ["seen_tags.add", "by_hyphen.HyphenAdverbAnalyzer.should_parse"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenAdverbAnalyzer.should_parse"], ["", "def", "tag", "(", "self", ",", "word", ",", "word_lower", ",", "seen_tags", ")", ":", "\n", "        ", "if", "not", "self", ".", "should_parse", "(", "word_lower", ")", "or", "self", ".", "_tag", "in", "seen_tags", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "seen_tags", ".", "add", "(", "self", ".", "_tag", ")", "\n", "return", "[", "self", ".", "_tag", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenAdverbAnalyzer.should_parse": [[127, 133], ["by_hyphen.HyphenAdverbAnalyzer.morph.tag", "any", "len", "word.startswith", "set"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag"], ["", "def", "should_parse", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "len", "(", "word", ")", "<", "5", "or", "not", "word", ".", "startswith", "(", "'\u043f\u043e-'", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "tags", "=", "self", ".", "morph", ".", "tag", "(", "word", "[", "3", ":", "]", ")", "\n", "return", "any", "(", "set", "(", "[", "'ADJF'", ",", "'sing'", ",", "'datv'", "]", ")", "in", "tag", "for", "tag", "in", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenAdverbAnalyzer.normalized": [[134, 136], ["None"], "methods", ["None"], ["", "def", "normalized", "(", "self", ",", "form", ")", ":", "\n", "        ", "return", "form", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenAdverbAnalyzer.get_lexeme": [[137, 139], ["None"], "methods", ["None"], ["", "def", "get_lexeme", "(", "self", ",", "form", ")", ":", "\n", "        ", "return", "[", "form", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer.__init__": [[160, 163], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "skip_prefixes", ",", "score_multiplier", "=", "0.75", ")", ":", "\n", "        ", "self", ".", "score_multiplier", "=", "score_multiplier", "\n", "self", ".", "skip_prefixes", "=", "skip_prefixes", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer.init": [[164, 170], ["super().init", "pymorphy2.dawg.PrefixMatcher"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init"], ["", "def", "init", "(", "self", ",", "morph", ")", ":", "\n", "        ", "super", "(", "HyphenatedWordsAnalyzer", ",", "self", ")", ".", "init", "(", "morph", ")", "\n", "Tag", "=", "morph", ".", "TagClass", "\n", "self", ".", "_FEATURE_GRAMMEMES", "=", "(", "Tag", ".", "PARTS_OF_SPEECH", "|", "Tag", ".", "NUMBERS", "|", "\n", "Tag", ".", "CASES", "|", "Tag", ".", "PERSONS", "|", "Tag", ".", "TENSES", ")", "\n", "self", ".", "_has_skip_prefix", "=", "PrefixMatcher", "(", "self", ".", "skip_prefixes", ")", ".", "is_prefixed", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer.parse": [[171, 188], ["word_lower.split", "by_hyphen.HyphenatedWordsAnalyzer.morph.parse", "by_hyphen.HyphenatedWordsAnalyzer.morph.parse", "by_hyphen.HyphenatedWordsAnalyzer._parse_as_variable_both", "seen_parses.copy", "by_hyphen.HyphenatedWordsAnalyzer.extend", "seen_parses.update", "by_hyphen.HyphenatedWordsAnalyzer._should_parse", "by_hyphen.HyphenatedWordsAnalyzer._parse_as_fixed_left"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._parse_as_variable_both", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._should_parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._parse_as_fixed_left"], ["", "def", "parse", "(", "self", ",", "word", ",", "word_lower", ",", "seen_parses", ")", ":", "\n", "        ", "if", "not", "self", ".", "_should_parse", "(", "word_lower", ")", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "left", ",", "right", "=", "word_lower", ".", "split", "(", "'-'", ",", "1", ")", "\n", "left_parses", "=", "self", ".", "morph", ".", "parse", "(", "left", ")", "\n", "right_parses", "=", "self", ".", "morph", ".", "parse", "(", "right", ")", "\n", "\n", "result", "=", "self", ".", "_parse_as_variable_both", "(", "left_parses", ",", "right_parses", ",", "seen_parses", ")", "\n", "\n", "# We copy `seen_parses` to preserve parses even if similar parses", "\n", "# were observed at previous step (they may have different lexemes).", "\n", "_seen", "=", "seen_parses", ".", "copy", "(", ")", "\n", "result", ".", "extend", "(", "self", ".", "_parse_as_fixed_left", "(", "right_parses", ",", "_seen", ",", "left", ")", ")", "\n", "seen_parses", ".", "update", "(", "_seen", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._parse_as_fixed_left": [[189, 214], ["tag._is_unknown", "result.append"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag._is_unknown"], ["", "def", "_parse_as_fixed_left", "(", "self", ",", "right_parses", ",", "seen", ",", "left", ")", ":", "\n", "        ", "\"\"\"\n        Step 1: Assume that the left part is an immutable prefix.\n        Examples: \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d, \u0432\u043e\u0437\u0434\u0443\u0448\u043d\u043e-\u043a\u0430\u043f\u0435\u043b\u044c\u043d\u044b\u0439\n        \"\"\"", "\n", "result", "=", "[", "]", "\n", "\n", "for", "fixed_word", ",", "tag", ",", "normal_form", ",", "score", ",", "right_methods", "in", "right_parses", ":", "\n", "\n", "            ", "if", "tag", ".", "_is_unknown", "(", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "new_methods_stack", "=", "(", "(", "self", ",", "left", ",", "right_methods", ")", ",", ")", "\n", "\n", "parse", "=", "(", "\n", "'-'", ".", "join", "(", "(", "left", ",", "fixed_word", ")", ")", ",", "\n", "tag", ",", "\n", "'-'", ".", "join", "(", "(", "left", ",", "normal_form", ")", ")", ",", "\n", "score", "*", "self", ".", "score_multiplier", ",", "\n", "new_methods_stack", "\n", ")", "\n", "result", ".", "append", "(", "parse", ")", "\n", "# add_parse_if_not_seen(parse, result, seen_left)", "\n", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._parse_as_variable_both": [[215, 258], ["by_hyphen.HyphenatedWordsAnalyzer._similarity_features", "left_tag._is_unknown", "by_hyphen.HyphenatedWordsAnalyzer._similarity_features", "enumerate", "result.append"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._similarity_features", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag._is_unknown", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._similarity_features"], ["", "def", "_parse_as_variable_both", "(", "self", ",", "left_parses", ",", "right_parses", ",", "seen", ")", ":", "\n", "        ", "\"\"\"\n        Step 2: if left and right can be parsed the same way,\n        then it may be the case that both parts should be inflected.\n        Examples: \u0447\u0435\u043b\u043e\u0432\u0435\u043a-\u0433\u043e\u0440\u0430, \u043a\u043e\u043c\u0430\u043d\u0434-\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u0446, \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f-\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\n        \"\"\"", "\n", "result", "=", "[", "]", "\n", "right_features", "=", "[", "self", ".", "_similarity_features", "(", "p", "[", "1", "]", ")", "for", "p", "in", "right_parses", "]", "\n", "\n", "# FIXME: quadratic algorithm", "\n", "for", "left_parse", "in", "left_parses", ":", "\n", "\n", "            ", "left_tag", "=", "left_parse", "[", "1", "]", "\n", "\n", "if", "left_tag", ".", "_is_unknown", "(", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "left_feat", "=", "self", ".", "_similarity_features", "(", "left_tag", ")", "\n", "\n", "for", "parse_index", ",", "right_parse", "in", "enumerate", "(", "right_parses", ")", ":", "\n", "\n", "                ", "right_feat", "=", "right_features", "[", "parse_index", "]", "\n", "\n", "if", "left_feat", "!=", "right_feat", ":", "\n", "                    ", "continue", "\n", "\n", "", "left_methods", "=", "left_parse", "[", "4", "]", "\n", "right_methods", "=", "right_parse", "[", "4", "]", "\n", "\n", "new_methods_stack", "=", "(", "(", "self", ",", "left_methods", ",", "right_methods", ")", ",", ")", "\n", "\n", "# tag", "\n", "parse", "=", "(", "\n", "'-'", ".", "join", "(", "(", "left_parse", "[", "0", "]", ",", "right_parse", "[", "0", "]", ")", ")", ",", "# word", "\n", "left_tag", ",", "\n", "'-'", ".", "join", "(", "(", "left_parse", "[", "2", "]", ",", "right_parse", "[", "2", "]", ")", ")", ",", "# normal form", "\n", "left_parse", "[", "3", "]", "*", "self", ".", "score_multiplier", ",", "\n", "new_methods_stack", "\n", ")", "\n", "result", ".", "append", "(", "parse", ")", "\n", "# add_parse_if_not_seen(parse, result, seen_right)", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._similarity_features": [[259, 264], ["by_hyphen.replace_grammemes"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.replace_grammemes"], ["", "def", "_similarity_features", "(", "self", ",", "tag", ")", ":", "\n", "        ", "\"\"\" :type tag: pymorphy2.tagset.OpencorporaTag \"\"\"", "\n", "return", "replace_grammemes", "(", "\n", "tag", ".", "grammemes", "&", "self", ".", "_FEATURE_GRAMMEMES", ",", "\n", "{", "'gen1'", ":", "'gent'", ",", "'loc1'", ":", "'loct'", "}", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._should_parse": [[266, 284], ["word.strip", "by_hyphen.HyphenatedWordsAnalyzer._has_skip_prefix", "word.strip.count"], "methods", ["None"], ["", "def", "_should_parse", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "'-'", "not", "in", "word", ":", "\n", "            ", "return", "False", "\n", "\n", "", "word_stripped", "=", "word", ".", "strip", "(", "'-'", ")", "\n", "if", "word_stripped", "!=", "word", ":", "\n", "# don't handle words that start of end with a hyphen", "\n", "            ", "return", "False", "\n", "\n", "", "if", "word_stripped", ".", "count", "(", "'-'", ")", "!=", "1", ":", "\n", "# require exactly 1 hyphen, in the middle of the word", "\n", "            ", "return", "False", "\n", "\n", "", "if", "self", ".", "_has_skip_prefix", "(", "word", ")", ":", "\n", "# such words should really be parsed by KnownPrefixAnalyzer", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer.normalized": [[285, 287], ["next", "by_hyphen.HyphenatedWordsAnalyzer._iter_lexeme"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._iter_lexeme"], ["", "def", "normalized", "(", "self", ",", "form", ")", ":", "\n", "        ", "return", "next", "(", "self", ".", "_iter_lexeme", "(", "form", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer.get_lexeme": [[288, 290], ["list", "by_hyphen.HyphenatedWordsAnalyzer._iter_lexeme"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._iter_lexeme"], ["", "def", "get_lexeme", "(", "self", ",", "form", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_iter_lexeme", "(", "form", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._iter_lexeme": [[291, 335], ["by_hyphen.HyphenatedWordsAnalyzer._fixed_left_method_was_used", "len", "pymorphy2.units.utils.without_fixed_prefix", "base_analyzer.get_lexeme", "by_hyphen.HyphenatedWordsAnalyzer._without_right_part", "by_hyphen.HyphenatedWordsAnalyzer._without_left_part", "[].get_lexeme", "[].get_lexeme", "by_hyphen.HyphenatedWordsAnalyzer._merge_lexemes", "pymorphy2.units.utils.replace_methods_stack", "len", "pymorphy2.units.utils.replace_methods_stack", "pymorphy2.units.utils.replace_methods_stack", "pymorphy2.units.utils.replace_methods_stack", "pymorphy2.units.utils.with_prefix"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._fixed_left_method_was_used", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.without_fixed_prefix", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.get_lexeme", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._without_right_part", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._without_left_part", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.get_lexeme", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.get_lexeme", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._merge_lexemes", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.replace_methods_stack", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.replace_methods_stack", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.replace_methods_stack", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.replace_methods_stack", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.with_prefix"], ["", "def", "_iter_lexeme", "(", "self", ",", "form", ")", ":", "\n", "        ", "methods_stack", "=", "form", "[", "4", "]", "\n", "assert", "len", "(", "methods_stack", ")", "==", "1", "\n", "\n", "this_method", ",", "left_methods", ",", "right_methods", "=", "methods_stack", "[", "0", "]", "\n", "assert", "this_method", "is", "self", "\n", "\n", "if", "self", ".", "_fixed_left_method_was_used", "(", "left_methods", ")", ":", "\n", "# Form is obtained by parsing right part,", "\n", "# assuming that left part is an uninflected prefix.", "\n", "# Lexeme can be calculated from the right part in this case:", "\n", "            ", "prefix", "=", "left_methods", "+", "'-'", "\n", "\n", "right_form", "=", "without_fixed_prefix", "(", "\n", "replace_methods_stack", "(", "form", ",", "right_methods", ")", ",", "\n", "len", "(", "prefix", ")", "\n", ")", "\n", "base_analyzer", "=", "right_methods", "[", "-", "1", "]", "[", "0", "]", "\n", "\n", "lexeme", "=", "base_analyzer", ".", "get_lexeme", "(", "right_form", ")", "\n", "return", "(", "\n", "replace_methods_stack", "(", "\n", "with_prefix", "(", "f", ",", "prefix", ")", ",", "\n", "(", "(", "this_method", ",", "left_methods", ",", "f", "[", "4", "]", ")", ",", ")", "\n", ")", "\n", "for", "f", "in", "lexeme", "\n", ")", "\n", "\n", "", "else", ":", "\n", "# Form is obtained by parsing both parts.", "\n", "# Compute lexemes for left and right parts,", "\n", "# then merge them.", "\n", "            ", "left_form", "=", "self", ".", "_without_right_part", "(", "\n", "replace_methods_stack", "(", "form", ",", "left_methods", ")", "\n", ")", "\n", "\n", "right_form", "=", "self", ".", "_without_left_part", "(", "\n", "replace_methods_stack", "(", "form", ",", "right_methods", ")", "\n", ")", "\n", "\n", "left_lexeme", "=", "left_methods", "[", "-", "1", "]", "[", "0", "]", ".", "get_lexeme", "(", "left_form", ")", "\n", "right_lexeme", "=", "right_methods", "[", "-", "1", "]", "[", "0", "]", ".", "get_lexeme", "(", "right_form", ")", "\n", "\n", "return", "self", ".", "_merge_lexemes", "(", "left_lexeme", ",", "right_lexeme", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._merge_lexemes": [[336, 346], ["by_hyphen.HyphenatedWordsAnalyzer._align_lexeme_forms"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._align_lexeme_forms"], ["", "", "def", "_merge_lexemes", "(", "self", ",", "left_lexeme", ",", "right_lexeme", ")", ":", "\n", "\n", "        ", "for", "left", ",", "right", "in", "self", ".", "_align_lexeme_forms", "(", "left_lexeme", ",", "right_lexeme", ")", ":", "\n", "            ", "word", "=", "'-'", ".", "join", "(", "(", "left", "[", "0", "]", ",", "right", "[", "0", "]", ")", ")", "\n", "tag", "=", "left", "[", "1", "]", "\n", "normal_form", "=", "'-'", ".", "join", "(", "(", "left", "[", "2", "]", ",", "right", "[", "2", "]", ")", ")", "\n", "score", "=", "(", "left", "[", "3", "]", "+", "right", "[", "3", "]", ")", "/", "2", "\n", "method_stack", "=", "(", "(", "self", ",", "left", "[", "4", "]", ",", "right", "[", "4", "]", ")", ",", ")", "\n", "\n", "yield", "(", "word", ",", "tag", ",", "normal_form", ",", "score", ",", "method_stack", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._align_lexeme_forms": [[347, 361], ["by_hyphen.replace_grammemes", "by_hyphen.replace_grammemes", "len"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.replace_grammemes", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.replace_grammemes"], ["", "", "def", "_align_lexeme_forms", "(", "self", ",", "left_lexeme", ",", "right_lexeme", ")", ":", "\n", "# FIXME: quadratic algorithm", "\n", "        ", "for", "right", "in", "right_lexeme", ":", "\n", "            ", "min_dist", ",", "closest", "=", "1e6", ",", "None", "\n", "gr_right", "=", "replace_grammemes", "(", "right", "[", "1", "]", ".", "grammemes", ",", "self", ".", "_CONSIDER_THE_SAME", ")", "\n", "\n", "for", "left", "in", "left_lexeme", ":", "\n", "                ", "gr_left", "=", "replace_grammemes", "(", "left", "[", "1", "]", ".", "grammemes", ",", "self", ".", "_CONSIDER_THE_SAME", ")", "\n", "dist", "=", "len", "(", "gr_left", "^", "gr_right", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                    ", "min_dist", "=", "dist", "\n", "closest", "=", "left", "\n", "\n", "", "", "yield", "closest", ",", "right", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._without_right_part": [[362, 367], ["word.index", "normal_form.index"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "_without_right_part", "(", "cls", ",", "form", ")", ":", "\n", "        ", "word", ",", "tag", ",", "normal_form", ",", "score", ",", "methods_stack", "=", "form", "\n", "return", "(", "word", "[", ":", "word", ".", "index", "(", "'-'", ")", "]", ",", "tag", ",", "normal_form", "[", ":", "normal_form", ".", "index", "(", "'-'", ")", "]", ",", "\n", "score", ",", "methods_stack", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._without_left_part": [[368, 373], ["word.index", "normal_form.index"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_without_left_part", "(", "cls", ",", "form", ")", ":", "\n", "        ", "word", ",", "tag", ",", "normal_form", ",", "score", ",", "methods_stack", "=", "form", "\n", "return", "(", "word", "[", "word", ".", "index", "(", "'-'", ")", "+", "1", ":", "]", ",", "tag", ",", "normal_form", "[", "normal_form", ".", "index", "(", "'-'", ")", "+", "1", ":", "]", ",", "\n", "score", ",", "methods_stack", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.HyphenatedWordsAnalyzer._fixed_left_method_was_used": [[374, 377], ["isinstance"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_fixed_left_method_was_used", "(", "cls", ",", "left_methods", ")", ":", "\n", "        ", "return", "not", "isinstance", "(", "left_methods", ",", "tuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_hyphen.replace_grammemes": [[379, 386], ["set", "replaces.items", "set.remove", "set.add"], "function", ["None"], ["", "", "def", "replace_grammemes", "(", "grammemes", ",", "replaces", ")", ":", "\n", "    ", "grammemes", "=", "set", "(", "grammemes", ")", "\n", "for", "gr", ",", "replace", "in", "replaces", ".", "items", "(", ")", ":", "\n", "        ", "if", "gr", "in", "grammemes", ":", "\n", "            ", "grammemes", ".", "remove", "(", "gr", ")", "\n", "grammemes", ".", "add", "(", "replace", ")", "\n", "", "", "return", "grammemes", "\n", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.unkn.UnknAnalyzer.init": [[12, 16], ["super().init", "unkn.UnknAnalyzer.morph.TagClass.add_grammemes_to_known", "unkn.UnknAnalyzer.morph.TagClass"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.add_grammemes_to_known", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.TagClass"], ["def", "init", "(", "self", ",", "morph", ")", ":", "\n", "        ", "super", "(", "UnknAnalyzer", ",", "self", ")", ".", "init", "(", "morph", ")", "\n", "self", ".", "morph", ".", "TagClass", ".", "add_grammemes_to_known", "(", "'UNKN'", ",", "'\u041d\u0415\u0418\u0417\u0412'", ")", "\n", "self", ".", "_tag", "=", "self", ".", "morph", ".", "TagClass", "(", "'UNKN'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.unkn.UnknAnalyzer.parse": [[17, 23], ["None"], "methods", ["None"], ["", "def", "parse", "(", "self", ",", "word", ",", "word_lower", ",", "seen_parses", ")", ":", "\n", "        ", "if", "seen_parses", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "methods", "=", "(", "(", "self", ",", "word", ")", ",", ")", "\n", "return", "[", "(", "word_lower", ",", "self", ".", "_tag", ",", "word_lower", ",", "1.0", ",", "methods", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.unkn.UnknAnalyzer.tag": [[24, 28], ["None"], "methods", ["None"], ["", "def", "tag", "(", "self", ",", "word", ",", "word_lower", ",", "seen_tags", ")", ":", "\n", "        ", "if", "seen_tags", ":", "\n", "            ", "return", "[", "]", "\n", "", "return", "[", "self", ".", "_tag", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.unkn.UnknAnalyzer.get_lexeme": [[29, 31], ["None"], "methods", ["None"], ["", "def", "get_lexeme", "(", "self", ",", "form", ")", ":", "\n", "        ", "return", "[", "form", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.unkn.UnknAnalyzer.normalized": [[32, 34], ["None"], "methods", ["None"], ["", "def", "normalized", "(", "self", ",", "form", ")", ":", "\n", "        ", "return", "form", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.__init__": [[17, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "score", "=", "0.9", ")", ":", "\n", "        ", "self", ".", "score", "=", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.init": [[20, 25], ["super().init", "zip", "by_shape._ShapeAnalyzer.morph.TagClass.add_grammemes_to_known"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.add_grammemes_to_known"], ["", "def", "init", "(", "self", ",", "morph", ")", ":", "\n", "        ", "super", "(", "_ShapeAnalyzer", ",", "self", ")", ".", "init", "(", "morph", ")", "\n", "\n", "for", "lat", ",", "cyr", "in", "zip", "(", "self", ".", "EXTRA_GRAMMEMES", ",", "self", ".", "EXTRA_GRAMMEMES_CYR", ")", ":", "\n", "            ", "self", ".", "morph", ".", "TagClass", ".", "add_grammemes_to_known", "(", "lat", ",", "cyr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.parse": [[26, 33], ["by_shape._ShapeAnalyzer.check_shape", "by_shape._ShapeAnalyzer.get_tag"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape.RomanNumberAnalyzer.check_shape", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape.NumberAnalyzer.get_tag"], ["", "", "def", "parse", "(", "self", ",", "word", ",", "word_lower", ",", "seen_parses", ")", ":", "\n", "        ", "shape", "=", "self", ".", "check_shape", "(", "word", ",", "word_lower", ")", "\n", "if", "not", "shape", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "", "methods", "=", "(", "(", "self", ",", "word", ")", ",", ")", "\n", "return", "[", "(", "word_lower", ",", "self", ".", "get_tag", "(", "word", ",", "shape", ")", ",", "word_lower", ",", "self", ".", "score", ",", "methods", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.tag": [[34, 39], ["by_shape._ShapeAnalyzer.check_shape", "by_shape._ShapeAnalyzer.get_tag"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape.RomanNumberAnalyzer.check_shape", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape.NumberAnalyzer.get_tag"], ["", "def", "tag", "(", "self", ",", "word", ",", "word_lower", ",", "seen_tags", ")", ":", "\n", "        ", "shape", "=", "self", ".", "check_shape", "(", "word", ",", "word_lower", ")", "\n", "if", "not", "shape", ":", "\n", "            ", "return", "[", "]", "\n", "", "return", "[", "self", ".", "get_tag", "(", "word", ",", "shape", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.get_lexeme": [[40, 42], ["None"], "methods", ["None"], ["", "def", "get_lexeme", "(", "self", ",", "form", ")", ":", "\n", "        ", "return", "[", "form", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.normalized": [[43, 45], ["None"], "methods", ["None"], ["", "def", "normalized", "(", "self", ",", "form", ")", ":", "\n", "        ", "return", "form", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.check_shape": [[47, 49], ["NotImplementedError"], "methods", ["None"], ["", "def", "check_shape", "(", "self", ",", "word", ",", "word_lower", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._ShapeAnalyzer.get_tag": [[50, 52], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_tag", "(", "self", ",", "word", ",", "shape", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._SingleShapeAnalyzer.init": [[58, 65], ["by_shape._SingleShapeAnalyzer.TAG_STR.split", "by_shape._SingleShapeAnalyzer.TAG_STR_CYR.split", "by_shape._ShapeAnalyzer.init", "by_shape._SingleShapeAnalyzer.morph.TagClass"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.TagClass"], ["def", "init", "(", "self", ",", "morph", ")", ":", "\n", "        ", "assert", "self", ".", "TAG_STR", "is", "not", "None", "\n", "assert", "self", ".", "TAG_STR_CYR", "is", "not", "None", "\n", "self", ".", "EXTRA_GRAMMEMES", "=", "self", ".", "TAG_STR", ".", "split", "(", "','", ")", "\n", "self", ".", "EXTRA_GRAMMEMES_CYR", "=", "self", ".", "TAG_STR_CYR", ".", "split", "(", "','", ")", "\n", "super", "(", "_SingleShapeAnalyzer", ",", "self", ")", ".", "init", "(", "morph", ")", "\n", "self", ".", "_tag", "=", "self", ".", "morph", ".", "TagClass", "(", "self", ".", "TAG_STR", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape._SingleShapeAnalyzer.get_tag": [[66, 68], ["None"], "methods", ["None"], ["", "def", "get_tag", "(", "self", ",", "word", ",", "shape", ")", ":", "\n", "        ", "return", "self", ".", "_tag", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape.PunctuationAnalyzer.check_shape": [[78, 80], ["pymorphy2.shapes.is_punctuation"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.shapes.is_punctuation"], ["def", "check_shape", "(", "self", ",", "word", ",", "word_lower", ")", ":", "\n", "        ", "return", "is_punctuation", "(", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape.LatinAnalyzer.check_shape": [[90, 92], ["pymorphy2.shapes.is_latin"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.shapes.is_latin"], ["def", "check_shape", "(", "self", ",", "word", ",", "word_lower", ")", ":", "\n", "        ", "return", "is_latin", "(", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape.NumberAnalyzer.init": [[107, 112], ["by_shape._ShapeAnalyzer.init", "morph.TagClass", "morph.TagClass"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.TagClass", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.TagClass"], ["def", "init", "(", "self", ",", "morph", ")", ":", "\n", "        ", "super", "(", "NumberAnalyzer", ",", "self", ")", ".", "init", "(", "morph", ")", "\n", "self", ".", "_tags", "=", "{", "\n", "'intg'", ":", "morph", ".", "TagClass", "(", "'NUMB,intg'", ")", ",", "\n", "'real'", ":", "morph", ".", "TagClass", "(", "'NUMB,real'", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape.NumberAnalyzer.check_shape": [[114, 125], ["int", "float", "word.replace"], "methods", ["None"], ["", "def", "check_shape", "(", "self", ",", "word", ",", "word_lower", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "int", "(", "word", ")", "\n", "return", "'intg'", "\n", "", "except", "ValueError", ":", "\n", "            ", "try", ":", "\n", "                ", "float", "(", "word", ".", "replace", "(", "','", ",", "'.'", ")", ")", "\n", "return", "'real'", "\n", "", "except", "ValueError", ":", "\n", "                ", "pass", "\n", "", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape.NumberAnalyzer.get_tag": [[126, 128], ["None"], "methods", ["None"], ["", "def", "get_tag", "(", "self", ",", "word", ",", "shape", ")", ":", "\n", "        ", "return", "self", ".", "_tags", "[", "shape", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_shape.RomanNumberAnalyzer.check_shape": [[134, 136], ["pymorphy2.shapes.is_roman_number"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.shapes.is_roman_number"], ["def", "check_shape", "(", "self", ",", "word", ",", "word_lower", ")", ":", "\n", "        ", "return", "is_roman_number", "(", "word", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy._PrefixAnalyzer.normalizer": [[31, 35], ["pymorphy2.units.utils.without_fixed_prefix", "pymorphy2.units.utils.with_prefix", "len"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.without_fixed_prefix", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.with_prefix"], ["    ", "def", "normalizer", "(", "self", ",", "form", ",", "this_method", ")", ":", "\n", "        ", "prefix", "=", "this_method", "[", "1", "]", "\n", "normal_form", "=", "yield", "without_fixed_prefix", "(", "form", ",", "len", "(", "prefix", ")", ")", "\n", "yield", "with_prefix", "(", "normal_form", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy._PrefixAnalyzer.lexemizer": [[36, 40], ["pymorphy2.units.utils.without_fixed_prefix", "len", "pymorphy2.units.utils.with_prefix"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.without_fixed_prefix", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.with_prefix"], ["", "def", "lexemizer", "(", "self", ",", "form", ",", "this_method", ")", ":", "\n", "        ", "prefix", "=", "this_method", "[", "1", "]", "\n", "lexeme", "=", "yield", "without_fixed_prefix", "(", "form", ",", "len", "(", "prefix", ")", ")", "\n", "yield", "[", "with_prefix", "(", "f", ",", "prefix", ")", "for", "f", "in", "lexeme", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownPrefixAnalyzer.__init__": [[51, 55], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "known_prefixes", ",", "score_multiplier", "=", "0.75", ",", "min_remainder_length", "=", "3", ")", ":", "\n", "        ", "self", ".", "known_prefixes", "=", "known_prefixes", "\n", "self", ".", "score_multiplier", "=", "score_multiplier", "\n", "self", ".", "min_remainder_length", "=", "min_remainder_length", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownPrefixAnalyzer.init": [[56, 59], ["super().init", "pymorphy2.dawg.PrefixMatcher"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init"], ["", "def", "init", "(", "self", ",", "morph", ")", ":", "\n", "        ", "super", "(", "KnownPrefixAnalyzer", ",", "self", ")", ".", "init", "(", "morph", ")", "\n", "self", ".", "get_prefixes", "=", "PrefixMatcher", "(", "self", ".", "known_prefixes", ")", ".", "prefixes", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownPrefixAnalyzer.parse": [[60, 82], ["by_analogy.KnownPrefixAnalyzer.possible_splits", "by_analogy.KnownPrefixAnalyzer.morph.parse", "pymorphy2.units.utils.add_parse_if_not_seen", "tag.is_productive"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownPrefixAnalyzer.possible_splits", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.add_parse_if_not_seen", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.is_productive"], ["", "def", "parse", "(", "self", ",", "word", ",", "word_lower", ",", "seen_parses", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "prefix", ",", "unprefixed_word", "in", "self", ".", "possible_splits", "(", "word_lower", ")", ":", "\n", "            ", "method", "=", "(", "self", ",", "prefix", ")", "\n", "\n", "parses", "=", "self", ".", "morph", ".", "parse", "(", "unprefixed_word", ")", "\n", "for", "fixed_word", ",", "tag", ",", "normal_form", ",", "score", ",", "methods_stack", "in", "parses", ":", "\n", "\n", "                ", "if", "not", "tag", ".", "is_productive", "(", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "parse", "=", "(", "\n", "prefix", "+", "fixed_word", ",", "\n", "tag", ",", "\n", "prefix", "+", "normal_form", ",", "\n", "score", "*", "self", ".", "score_multiplier", ",", "\n", "methods_stack", "+", "(", "method", ",", ")", "\n", ")", "\n", "\n", "add_parse_if_not_seen", "(", "parse", ",", "result", ",", "seen_parses", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownPrefixAnalyzer.tag": [[83, 91], ["by_analogy.KnownPrefixAnalyzer.possible_splits", "by_analogy.KnownPrefixAnalyzer.morph.tag", "pymorphy2.units.utils.add_tag_if_not_seen", "tag.is_productive"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownPrefixAnalyzer.possible_splits", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.add_tag_if_not_seen", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.is_productive"], ["", "def", "tag", "(", "self", ",", "word", ",", "word_lower", ",", "seen_tags", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "prefix", ",", "unprefixed_word", "in", "self", ".", "possible_splits", "(", "word_lower", ")", ":", "\n", "            ", "for", "tag", "in", "self", ".", "morph", ".", "tag", "(", "unprefixed_word", ")", ":", "\n", "                ", "if", "not", "tag", ".", "is_productive", "(", ")", ":", "\n", "                    ", "continue", "\n", "", "add_tag_if_not_seen", "(", "tag", ",", "result", ",", "seen_tags", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownPrefixAnalyzer.possible_splits": [[92, 102], ["by_analogy.KnownPrefixAnalyzer.get_prefixes", "by_analogy.KnownPrefixAnalyzer.sort", "len", "len"], "methods", ["None"], ["", "def", "possible_splits", "(", "self", ",", "word", ")", ":", "\n", "        ", "word_prefixes", "=", "self", ".", "get_prefixes", "(", "word", ")", "\n", "word_prefixes", ".", "sort", "(", "key", "=", "len", ",", "reverse", "=", "True", ")", "\n", "for", "prefix", "in", "word_prefixes", ":", "\n", "            ", "unprefixed_word", "=", "word", "[", "len", "(", "prefix", ")", ":", "]", "\n", "\n", "if", "len", "(", "unprefixed_word", ")", "<", "self", ".", "min_remainder_length", ":", "\n", "                ", "continue", "\n", "\n", "", "yield", "prefix", ",", "unprefixed_word", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.UnknownPrefixAnalyzer.__init__": [[112, 114], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "score_multiplier", "=", "0.5", ")", ":", "\n", "        ", "self", ".", "score_multiplier", "=", "score_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.UnknownPrefixAnalyzer.init": [[115, 119], ["super().init", "pymorphy2.units.by_lookup.DictionaryAnalyzer", "by_analogy.UnknownPrefixAnalyzer.dict_analyzer.init"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init"], ["", "def", "init", "(", "self", ",", "morph", ")", ":", "\n", "        ", "super", "(", "AnalogyAnalizerUnit", ",", "self", ")", ".", "init", "(", "morph", ")", "\n", "self", ".", "dict_analyzer", "=", "DictionaryAnalyzer", "(", ")", "\n", "self", ".", "dict_analyzer", ".", "init", "(", "morph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.UnknownPrefixAnalyzer.parse": [[120, 142], ["pymorphy2.utils.word_splits", "by_analogy.UnknownPrefixAnalyzer.dict_analyzer.parse", "pymorphy2.units.utils.add_parse_if_not_seen", "tag.is_productive"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.word_splits", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.add_parse_if_not_seen", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.is_productive"], ["", "def", "parse", "(", "self", ",", "word", ",", "word_lower", ",", "seen_parses", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "prefix", ",", "unprefixed_word", "in", "word_splits", "(", "word_lower", ")", ":", "\n", "\n", "            ", "method", "=", "(", "self", ",", "prefix", ")", "\n", "\n", "parses", "=", "self", ".", "dict_analyzer", ".", "parse", "(", "unprefixed_word", ",", "unprefixed_word", ",", "seen_parses", ")", "\n", "for", "fixed_word", ",", "tag", ",", "normal_form", ",", "score", ",", "methods_stack", "in", "parses", ":", "\n", "\n", "                ", "if", "not", "tag", ".", "is_productive", "(", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "parse", "=", "(", "\n", "prefix", "+", "fixed_word", ",", "\n", "tag", ",", "\n", "prefix", "+", "normal_form", ",", "\n", "score", "*", "self", ".", "score_multiplier", ",", "\n", "methods_stack", "+", "(", "method", ",", ")", "\n", ")", "\n", "add_parse_if_not_seen", "(", "parse", ",", "result", ",", "seen_parses", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.UnknownPrefixAnalyzer.tag": [[143, 156], ["pymorphy2.utils.word_splits", "by_analogy.UnknownPrefixAnalyzer.dict_analyzer.tag", "pymorphy2.units.utils.add_tag_if_not_seen", "tag.is_productive"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.word_splits", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.add_tag_if_not_seen", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.is_productive"], ["", "def", "tag", "(", "self", ",", "word", ",", "word_lower", ",", "seen_tags", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "_", ",", "unprefixed_word", "in", "word_splits", "(", "word_lower", ")", ":", "\n", "\n", "            ", "tags", "=", "self", ".", "dict_analyzer", ".", "tag", "(", "unprefixed_word", ",", "unprefixed_word", ",", "seen_tags", ")", "\n", "for", "tag", "in", "tags", ":", "\n", "\n", "                ", "if", "not", "tag", ".", "is_productive", "(", ")", ":", "\n", "                    ", "continue", "\n", "\n", "", "add_tag_if_not_seen", "(", "tag", ",", "result", ",", "seen_tags", ")", "\n", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.__init__": [[170, 173], ["None"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "score_multiplier", "=", "0.5", ",", "min_word_length", "=", "4", ")", ":", "\n", "        ", "self", ".", "min_word_length", "=", "min_word_length", "\n", "self", ".", "score_multiplier", "=", "score_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init": [[174, 181], ["super().init", "list", "list", "by_analogy.KnownSuffixAnalyzer.FakeDictionary", "by_analogy.KnownSuffixAnalyzer.fake_dict.init", "reversed", "reversed", "list", "range", "enumerate", "by_analogy.KnownSuffixAnalyzer._max_suffix_length"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer._max_suffix_length"], ["", "def", "init", "(", "self", ",", "morph", ")", ":", "\n", "        ", "super", "(", "KnownSuffixAnalyzer", ",", "self", ")", ".", "init", "(", "morph", ")", "\n", "self", ".", "_paradigm_prefixes", "=", "list", "(", "reversed", "(", "list", "(", "enumerate", "(", "self", ".", "dict", ".", "paradigm_prefixes", ")", ")", ")", ")", "\n", "self", ".", "_prediction_splits", "=", "list", "(", "reversed", "(", "range", "(", "1", ",", "self", ".", "_max_suffix_length", "(", ")", "+", "1", ")", ")", ")", "\n", "\n", "self", ".", "fake_dict", "=", "self", ".", "FakeDictionary", "(", ")", "\n", "self", ".", "fake_dict", ".", "init", "(", "morph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer._max_suffix_length": [[182, 188], ["None"], "methods", ["None"], ["", "def", "_max_suffix_length", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", ".", "dict", ".", "meta", "[", "'compile_options'", "]", "[", "'max_suffix_length'", "]", "\n", "", "except", "KeyError", ":", "\n", "# dicts v2.4 support", "\n", "            ", "return", "self", ".", "dict", ".", "meta", "[", "'prediction_options'", "]", "[", "'max_suffix_length'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse": [[189, 243], ["by_analogy.KnownSuffixAnalyzer._possible_prefixes", "result.sort", "len", "len", "suffixes_dawg.similar_items", "by_analogy.KnownSuffixAnalyzer.dict.build_tag_info", "seen_parses.add", "by_analogy.KnownSuffixAnalyzer.dict.build_normal_form", "result.append", "by_analogy.KnownSuffixAnalyzer.is_productive"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer._possible_prefixes", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_tag_info", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_normal_form", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.is_productive"], ["", "", "def", "parse", "(", "self", ",", "word", ",", "word_lower", ",", "seen_parses", ")", ":", "\n", "        ", "result", "=", "[", "]", "\n", "if", "len", "(", "word", ")", "<", "self", ".", "min_word_length", ":", "\n", "            ", "return", "result", "\n", "\n", "# smoothing; XXX: isn't max_cnt better?", "\n", "# or maybe use a proper discounting?", "\n", "", "total_counts", "=", "[", "1", "]", "*", "len", "(", "self", ".", "_paradigm_prefixes", ")", "\n", "\n", "for", "prefix_id", ",", "prefix", ",", "suffixes_dawg", "in", "self", ".", "_possible_prefixes", "(", "word_lower", ")", ":", "\n", "\n", "            ", "for", "i", "in", "self", ".", "_prediction_splits", ":", "\n", "\n", "# XXX: this should be counted once, not for each prefix", "\n", "                ", "word_start", ",", "word_end", "=", "word_lower", "[", ":", "-", "i", "]", ",", "word_lower", "[", "-", "i", ":", "]", "\n", "\n", "para_data", "=", "suffixes_dawg", ".", "similar_items", "(", "word_end", ",", "self", ".", "morph", ".", "char_substitutes", ")", "\n", "for", "fixed_suffix", ",", "parses", "in", "para_data", ":", "\n", "\n", "                    ", "fixed_word", "=", "word_start", "+", "fixed_suffix", "\n", "\n", "for", "cnt", ",", "para_id", ",", "idx", "in", "parses", ":", "\n", "                        ", "tag", "=", "self", ".", "dict", ".", "build_tag_info", "(", "para_id", ",", "idx", ")", "\n", "\n", "# skip non-productive tags", "\n", "if", "not", "tag", ".", "is_productive", "(", ")", ":", "\n", "                            ", "continue", "\n", "\n", "", "total_counts", "[", "prefix_id", "]", "+=", "cnt", "\n", "\n", "# avoid duplicate parses", "\n", "reduced_parse", "=", "fixed_word", ",", "tag", ",", "para_id", "\n", "if", "reduced_parse", "in", "seen_parses", ":", "\n", "                            ", "continue", "\n", "", "seen_parses", ".", "add", "(", "reduced_parse", ")", "\n", "\n", "# ok, build the result", "\n", "normal_form", "=", "self", ".", "dict", ".", "build_normal_form", "(", "para_id", ",", "idx", ",", "fixed_word", ")", "\n", "methods", "=", "(", "\n", "(", "self", ".", "fake_dict", ",", "fixed_word", ",", "para_id", ",", "idx", ")", ",", "\n", "(", "self", ",", "fixed_suffix", ")", ",", "\n", ")", "\n", "parse", "=", "(", "cnt", ",", "fixed_word", ",", "tag", ",", "normal_form", ",", "prefix_id", ",", "methods", ")", "\n", "result", ".", "append", "(", "parse", ")", "\n", "\n", "", "", "if", "total_counts", "[", "prefix_id", "]", ">", "1", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "result", "=", "[", "\n", "(", "fixed_word", ",", "tag", ",", "normal_form", ",", "cnt", "/", "total_counts", "[", "prefix_id", "]", "*", "self", ".", "score_multiplier", ",", "methods_stack", ")", "\n", "for", "(", "cnt", ",", "fixed_word", ",", "tag", ",", "normal_form", ",", "prefix_id", ",", "methods_stack", ")", "in", "result", "\n", "]", "\n", "result", ".", "sort", "(", "key", "=", "_cnt_getter", ",", "reverse", "=", "True", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag": [[244, 281], ["by_analogy.KnownSuffixAnalyzer._possible_prefixes", "result.sort", "len", "suffixes_dawg.similar_items", "by_analogy.KnownSuffixAnalyzer.dict.build_tag_info", "seen_tags.add", "result.append", "by_analogy.KnownSuffixAnalyzer.is_productive"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer._possible_prefixes", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.build_tag_info", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.is_productive"], ["", "def", "tag", "(", "self", ",", "word", ",", "word_lower", ",", "seen_tags", ")", ":", "\n", "# XXX: the result order may be different from", "\n", "# ``self.parse(...)``.", "\n", "\n", "        ", "result", "=", "[", "]", "\n", "if", "len", "(", "word", ")", "<", "self", ".", "min_word_length", ":", "\n", "            ", "return", "result", "\n", "\n", "", "for", "prefix_id", ",", "prefix", ",", "suffixes_dawg", "in", "self", ".", "_possible_prefixes", "(", "word_lower", ")", ":", "\n", "\n", "            ", "for", "i", "in", "self", ".", "_prediction_splits", ":", "\n", "\n", "# XXX: end should be counted once, not for each prefix", "\n", "                ", "end", "=", "word_lower", "[", "-", "i", ":", "]", "\n", "\n", "para_data", "=", "suffixes_dawg", ".", "similar_items", "(", "end", ",", "self", ".", "morph", ".", "char_substitutes", ")", "\n", "found", "=", "False", "\n", "\n", "for", "fixed_suffix", ",", "parses", "in", "para_data", ":", "\n", "                    ", "for", "cnt", ",", "para_id", ",", "idx", "in", "parses", ":", "\n", "\n", "                        ", "tag", "=", "self", ".", "dict", ".", "build_tag_info", "(", "para_id", ",", "idx", ")", "\n", "\n", "if", "not", "tag", ".", "is_productive", "(", ")", ":", "\n", "                            ", "continue", "\n", "\n", "", "found", "=", "True", "\n", "if", "tag", "in", "seen_tags", ":", "\n", "                            ", "continue", "\n", "", "seen_tags", ".", "add", "(", "tag", ")", "\n", "result", ".", "append", "(", "(", "cnt", ",", "tag", ")", ")", "\n", "\n", "", "", "if", "found", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "result", ".", "sort", "(", "reverse", "=", "True", ")", "\n", "return", "[", "tag", "for", "cnt", ",", "tag", "in", "result", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer._possible_prefixes": [[282, 289], ["word.startswith"], "methods", ["None"], ["", "def", "_possible_prefixes", "(", "self", ",", "word", ")", ":", "\n", "        ", "for", "prefix_id", ",", "prefix", "in", "self", ".", "_paradigm_prefixes", ":", "\n", "            ", "if", "not", "word", ".", "startswith", "(", "prefix", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "suffixes_dawg", "=", "self", ".", "dict", ".", "prediction_suffixes_dawgs", "[", "prefix_id", "]", "\n", "yield", "prefix_id", ",", "prefix", ",", "suffixes_dawg", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.add_parse_if_not_seen": [[5, 20], ["seen_parses.add", "result_list.append"], "function", ["None"], ["import", "gc", "\n", "\n", "def", "measure", "(", "func", ",", "inner_iterations", "=", "1", ",", "repeats", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    Runs func ``repeats`` times and returns the fastest speed\n    (inner loop iterations per second). Use ``inner_iterations`` to specify\n    the number of inner loop iterations.\n\n    Use this function for long-running functions.\n    \"\"\"", "\n", "gc", ".", "disable", "(", ")", "\n", "times", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "repeats", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "func", "(", ")", "\n", "times", ".", "append", "(", "time", ".", "time", "(", ")", "-", "start", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.add_tag_if_not_seen": [[22, 27], ["seen_tags.add", "result_list.append"], "function", ["None"], ["", "gc", ".", "enable", "(", ")", "\n", "return", "inner_iterations", "/", "min", "(", "times", ")", "\n", "\n", "\n", "", "def", "bench", "(", "stmt", ",", "setup", ",", "op_count", "=", "1", ",", "repeats", "=", "3", ",", "runs", "=", "5", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.with_suffix": [[29, 33], ["None"], "function", ["None"], ["\n", "timer", "=", "timeit", ".", "Timer", "(", "stmt", ",", "setup", ")", "\n", "times", "=", "[", "]", "\n", "for", "x", "in", "range", "(", "runs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.without_fixed_suffix": [[35, 40], ["None"], "function", ["None"], ["\n", "", "def", "op_time", "(", "t", ")", ":", "\n", "        ", "return", "op_count", "*", "repeats", "/", "t", "\n", "\n", "", "return", "op_time", "(", "min", "(", "times", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.without_fixed_prefix": [[42, 47], ["None"], "function", ["None"], ["", "def", "format_bench", "(", "name", ",", "result", ",", "description", "=", "'K words/sec'", ")", ":", "\n", "    ", "return", "\"%25s:\\t%0.3f%s\"", "%", "(", "name", ",", "result", ",", "description", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.with_prefix": [[49, 53], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.replace_methods_stack": [[55, 61], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.without_last_method": [[63, 67], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.kmike_pymorphy2.units.utils.append_method": [[69, 73], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.kmike_pymorphy2.docs.conf.setup": [[24, 27], ["app.add_stylesheet"], "function", ["None"], ["def", "setup", "(", "app", ")", ":", "\n", "# see https://github.com/snide/sphinx_rtd_theme/issues/117", "\n", "    ", "app", ".", "add_stylesheet", "(", "\"rtfd_overrides.css\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tokenizers.TestSimpleWordTokenize.test_split_simple": [[7, 10], ["pymorphy2.tokenizers.simple_word_tokenize", "pymorphy2.tokenizers.simple_word_tokenize"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tokenizers.simple_word_tokenize", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tokenizers.simple_word_tokenize"], ["    ", "def", "test_split_simple", "(", "self", ")", ":", "\n", "        ", "assert", "simple_word_tokenize", "(", "'\u041c\u0430\u043c\u0430 \u043c\u044b\u043b\u0430 \u0440\u0430\u043c\u0443'", ")", "==", "[", "'\u041c\u0430\u043c\u0430'", ",", "'\u043c\u044b\u043b\u0430'", ",", "'\u0440\u0430\u043c\u0443'", "]", "\n", "assert", "simple_word_tokenize", "(", "'\u041f\u043e\u0441\u0442\u043e\u0439, \u043f\u0430\u0440\u043e\u0432\u043e\u0437!'", ")", "==", "[", "'\u041f\u043e\u0441\u0442\u043e\u0439'", ",", "','", ",", "'\u043f\u0430\u0440\u043e\u0432\u043e\u0437'", ",", "'!'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tokenizers.TestSimpleWordTokenize.test_split_hyphen": [[11, 14], ["pymorphy2.tokenizers.simple_word_tokenize", "pymorphy2.tokenizers.simple_word_tokenize"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tokenizers.simple_word_tokenize", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tokenizers.simple_word_tokenize"], ["", "def", "test_split_hyphen", "(", "self", ")", ":", "\n", "        ", "assert", "simple_word_tokenize", "(", "'\u0420\u043e\u0441\u0442\u043e\u0432-\u043d\u0430-\u0414\u043e\u043d\u0443'", ")", "==", "[", "'\u0420\u043e\u0441\u0442\u043e\u0432-\u043d\u0430-\u0414\u043e\u043d\u0443'", "]", "\n", "assert", "simple_word_tokenize", "(", "'\u0423\u0440\u0430 - \u043f\u043e\u0431\u0435\u0434\u0430'", ")", "==", "[", "'\u0423\u0440\u0430'", ",", "'-'", ",", "'\u043f\u043e\u0431\u0435\u0434\u0430'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tokenizers.TestSimpleWordTokenize.test_split_signs": [[15, 17], ["pymorphy2.tokenizers.simple_word_tokenize"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tokenizers.simple_word_tokenize"], ["", "def", "test_split_signs", "(", "self", ")", ":", "\n", "        ", "assert", "simple_word_tokenize", "(", "'a+b=c_1'", ")", "==", "[", "'a'", ",", "'+'", ",", "'b'", ",", "'='", ",", "'c_1'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tokenizers.TestSimpleWordTokenize.test_exctract_words": [[18, 28], ["pymorphy2.tokenizers.simple_word_tokenize"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tokenizers.simple_word_tokenize"], ["", "def", "test_exctract_words", "(", "self", ")", ":", "\n", "        ", "text", "=", "'''\u042d\u0442\u043e  \u043e\u0442\u0440\u0430\u0437\u0438\u043b\u043e\u0441\u044c: \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c,\u0438 \u043d\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d_\u043d\u043e\u043c\n                - \u0440\u043e\u0441\u0442\u0435 \u043a\u0430\u0440\u0435\u043b\u044c\u0441\u043a\u043e-\u0444\u0438\u043d\u043b\u044f\u043d\u0434\u0441\u043a\u043e\u0433\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0430 - \u043e\u0444\u0438\u0433\u0435\u0442\u044c! \u043a\u043e\u043d\u0438+\u043b\u043e\u0448\u0430\u0434\u0438=\u043c\u0430\u0441\u043b\u043e.\n                -\u0441\u043a\u0430\u0437\u0430\u043b \u043a\u0442\u043e-\u0442\u043e --\u043d\u0435\u0442--'''", "\n", "\n", "assert", "simple_word_tokenize", "(", "text", ")", "==", "[", "\n", "'\u042d\u0442\u043e'", ",", "'\u043e\u0442\u0440\u0430\u0437\u0438\u043b\u043e\u0441\u044c'", ",", "':'", ",", "'\u043d\u0430'", ",", "'\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c'", ",", "','", ",", "'\u0438'", ",", "'\u043d\u0430'", ",", "\n", "'\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435\u043d_\u043d\u043e\u043c'", ",", "'-'", ",", "'\u0440\u043e\u0441\u0442\u0435'", ",", "'\u043a\u0430\u0440\u0435\u043b\u044c\u0441\u043a\u043e-\u0444\u0438\u043d\u043b\u044f\u043d\u0434\u0441\u043a\u043e\u0433\u043e'", ",", "\n", "'\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u0447\u0435\u0441\u0442\u0432\u0430'", ",", "'-'", ",", "'\u043e\u0444\u0438\u0433\u0435\u0442\u044c'", ",", "'!'", ",", "'\u043a\u043e\u043d\u0438'", ",", "'+'", ",", "'\u043b\u043e\u0448\u0430\u0434\u0438'", ",", "\n", "'='", ",", "'\u043c\u0430\u0441\u043b\u043e'", ",", "'.'", ",", "'-\u0441\u043a\u0430\u0437\u0430\u043b'", ",", "'\u043a\u0442\u043e-\u0442\u043e'", ",", "'--\u043d\u0435\u0442--'", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_result_wrapper.test_indexing": [[4, 15], ["len", "morph.parse", "morph.parse"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["def", "test_indexing", "(", "morph", ")", ":", "\n", "    ", "assert", "len", "(", "morph", ".", "parse", "(", "'\u0441\u0442\u0440\u0435\u043b\u044f\u043b\u0438'", ")", ")", "==", "1", "\n", "p", "=", "morph", ".", "parse", "(", "'\u0441\u0442\u0440\u0435\u043b\u044f\u043b\u0438'", ")", "[", "0", "]", "\n", "\n", "assert", "p", "[", "0", "]", "==", "'\u0441\u0442\u0440\u0435\u043b\u044f\u043b\u0438'", "# word", "\n", "assert", "p", "[", "1", "]", ".", "POS", "==", "'VERB'", "# tag", "\n", "assert", "p", "[", "2", "]", "==", "'\u0441\u0442\u0440\u0435\u043b\u044f\u0442\u044c'", "\n", "\n", "assert", "p", "[", "0", "]", "==", "p", ".", "word", "\n", "assert", "p", "[", "1", "]", "==", "p", ".", "tag", "\n", "assert", "p", "[", "2", "]", "==", "p", ".", "normal_form", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_result_wrapper.test_inflect_valid": [[17, 20], ["morph.parse", "p.inflect", "set"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.Parse.inflect"], ["", "def", "test_inflect_valid", "(", "morph", ")", ":", "\n", "    ", "p", "=", "morph", ".", "parse", "(", "'\u0441\u0442\u0440\u0435\u043b\u044f\u043b\u0438'", ")", "[", "0", "]", "\n", "assert", "p", ".", "inflect", "(", "set", "(", "[", "'femn'", "]", ")", ")", ".", "word", "==", "'\u0441\u0442\u0440\u0435\u043b\u044f\u043b\u0430'", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_result_wrapper.test_inflect_invalid": [[22, 25], ["morph.parse", "p.inflect", "set"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.Parse.inflect"], ["", "def", "test_inflect_invalid", "(", "morph", ")", ":", "\n", "    ", "p", "=", "morph", ".", "parse", "(", "'\u0441\u0442\u0440\u0435\u043b\u044f\u043b\u0438'", ")", "[", "0", "]", "\n", "assert", "p", ".", "inflect", "(", "set", "(", "[", "'NOUN'", "]", ")", ")", "==", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_result_wrapper.test_is_known": [[27, 30], ["morph.parse", "morph.parse"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "def", "test_is_known", "(", "morph", ")", ":", "\n", "    ", "assert", "morph", ".", "parse", "(", "'\u0441\u0442\u0440\u0435\u043b\u044f\u043b\u0438'", ")", "[", "0", "]", ".", "is_known", "\n", "assert", "not", "morph", ".", "parse", "(", "'\u0441\u043f\u0442\u0440\u0438\u043e\u044f\u043b\u0438'", ")", "[", "0", "]", ".", "is_known", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_result_wrapper.test_normalized": [[32, 34], ["morph.parse"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "def", "test_normalized", "(", "morph", ")", ":", "\n", "    ", "assert", "morph", ".", "parse", "(", "'\u0441\u0442\u0440\u0435\u043b\u044f\u043b\u0438'", ")", "[", "0", "]", ".", "normalized", ".", "word", "==", "'\u0441\u0442\u0440\u0435\u043b\u044f\u0442\u044c'", "\n", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_prefix_matching.test_prefix_matcher_is_prefixed": [[18, 23], ["pytest.mark.parametrize", "pytest.mark.parametrize", "matcher_cls", "matcher_cls.is_prefixed"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.PythonPrefixMatcher.is_prefixed"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "'matcher_cls'", ",", "MATCHERS", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "[", "'word'", ",", "'is_prefixed'", "]", ",", "HAS_PREFIXES", ")", "\n", "def", "test_prefix_matcher_is_prefixed", "(", "matcher_cls", ",", "word", ",", "is_prefixed", ")", ":", "\n", "    ", "matcher", "=", "matcher_cls", "(", "lang", ".", "ru", ".", "KNOWN_PREFIXES", ")", "\n", "assert", "matcher", ".", "is_prefixed", "(", "word", ")", "==", "is_prefixed", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_prefix_matching.test_prefix_matcher_prefixes": [[25, 30], ["pytest.mark.parametrize", "pytest.mark.parametrize", "matcher_cls", "set", "set", "matcher_cls.prefixes"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.PythonPrefixMatcher.prefixes"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "'matcher_cls'", ",", "MATCHERS", ")", "\n", "@", "pytest", ".", "mark", ".", "parametrize", "(", "[", "'word'", ",", "'prefixes'", "]", ",", "PREFIXES", ")", "\n", "def", "test_prefix_matcher_prefixes", "(", "matcher_cls", ",", "word", ",", "prefixes", ")", ":", "\n", "    ", "matcher", "=", "matcher_cls", "(", "lang", ".", "ru", ".", "KNOWN_PREFIXES", ")", "\n", "assert", "set", "(", "matcher", ".", "prefixes", "(", "word", ")", ")", "==", "set", "(", "prefixes", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestNormalForms.test_normal_forms": [[115, 118], ["test_analyzer.with_test_data", "morph.normal_forms"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.with_test_data", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.normal_forms"], ["    ", "@", "with_test_data", "(", "TEST_DATA", ")", "\n", "def", "test_normal_forms", "(", "self", ",", "word", ",", "parse_result", ",", "morph", ")", ":", "\n", "        ", "assert", "morph", ".", "normal_forms", "(", "word", ")", "==", "parse_result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestNormalForms.test_normal_forms_prediction": [[119, 122], ["test_analyzer.with_test_data", "morph.normal_forms"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.with_test_data", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.normal_forms"], ["", "@", "with_test_data", "(", "PREDICTION_TEST_DATA", ")", "\n", "def", "test_normal_forms_prediction", "(", "self", ",", "word", ",", "parse_result", ",", "morph", ")", ":", "\n", "        ", "assert", "morph", ".", "normal_forms", "(", "word", ")", "==", "parse_result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestNormalForms.test_normal_forms_prefix_prediction": [[123, 126], ["test_analyzer.with_test_data", "morph.normal_forms"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.with_test_data", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.normal_forms"], ["", "@", "with_test_data", "(", "PREFIX_PREDICTION_DATA", ")", "\n", "def", "test_normal_forms_prefix_prediction", "(", "self", ",", "word", ",", "parse_result", ",", "morph", ")", ":", "\n", "        ", "assert", "morph", ".", "normal_forms", "(", "word", ")", "==", "parse_result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestTagAndParse.assertTagAndParseAgree": [[132, 134], ["set", "set", "morph.tag", "morph.parse"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["def", "assertTagAndParseAgree", "(", "self", ",", "word", ",", "morph", ")", ":", "\n", "        ", "assert", "set", "(", "morph", ".", "tag", "(", "word", ")", ")", "==", "set", "(", "p", ".", "tag", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestTagAndParse.test_basic": [[135, 138], ["test_analyzer.with_test_data", "test_analyzer.TestTagAndParse.assertTagAndParseAgree"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.with_test_data", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestTagAndParse.assertTagAndParseAgree"], ["", "@", "with_test_data", "(", "TEST_DATA", ")", "\n", "def", "test_basic", "(", "self", ",", "word", ",", "parse_result", ",", "morph", ")", ":", "\n", "        ", "self", ".", "assertTagAndParseAgree", "(", "word", ",", "morph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestTagAndParse.test_prediction": [[139, 142], ["test_analyzer.with_test_data", "test_analyzer.TestTagAndParse.assertTagAndParseAgree"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.with_test_data", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestTagAndParse.assertTagAndParseAgree"], ["", "@", "with_test_data", "(", "PREDICTION_TEST_DATA", ")", "\n", "def", "test_prediction", "(", "self", ",", "word", ",", "parse_result", ",", "morph", ")", ":", "\n", "        ", "self", ".", "assertTagAndParseAgree", "(", "word", ",", "morph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestTagAndParse.test_prefix_prediction": [[143, 146], ["test_analyzer.with_test_data", "test_analyzer.TestTagAndParse.assertTagAndParseAgree"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.with_test_data", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestTagAndParse.assertTagAndParseAgree"], ["", "@", "with_test_data", "(", "PREFIX_PREDICTION_DATA", ")", "\n", "def", "test_prefix_prediction", "(", "self", ",", "word", ",", "parse_result", ",", "morph", ")", ":", "\n", "        ", "self", ".", "assertTagAndParseAgree", "(", "word", ",", "morph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestTagMethod._tagged_as": [[149, 151], ["any"], "methods", ["None"], ["    ", "def", "_tagged_as", "(", "self", ",", "tags", ",", "cls", ")", ":", "\n", "        ", "return", "any", "(", "tag", ".", "POS", "==", "cls", "for", "tag", "in", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestTagMethod.assertNotTaggedAs": [[152, 155], ["morph.tag", "test_analyzer.TestTagMethod._tagged_as"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestTagMethod._tagged_as"], ["", "def", "assertNotTaggedAs", "(", "self", ",", "word", ",", "cls", ",", "morph", ")", ":", "\n", "        ", "tags", "=", "morph", ".", "tag", "(", "word", ")", "\n", "assert", "not", "self", ".", "_tagged_as", "(", "tags", ",", "cls", ")", ",", "(", "tags", ",", "cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestTagMethod.test_no_nonproductive_forms": [[156, 159], ["test_analyzer.with_test_data", "test_analyzer.TestTagMethod.assertNotTaggedAs"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.with_test_data", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestTagMethod.assertNotTaggedAs"], ["", "@", "with_test_data", "(", "NON_PRODUCTIVE_BUGS_DATA", ",", "'cls'", ")", "\n", "def", "test_no_nonproductive_forms", "(", "self", ",", "word", ",", "cls", ",", "morph", ")", ":", "\n", "        ", "self", ".", "assertNotTaggedAs", "(", "word", ",", "cls", ",", "morph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParse._parsed_as": [[162, 164], ["any"], "methods", ["None"], ["    ", "def", "_parsed_as", "(", "self", ",", "parse", ",", "cls", ")", ":", "\n", "        ", "return", "any", "(", "p", "[", "1", "]", ".", "POS", "==", "cls", "for", "p", "in", "parse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParse._parse_cls_first_index": [[165, 169], ["enumerate"], "methods", ["None"], ["", "def", "_parse_cls_first_index", "(", "self", ",", "parse", ",", "cls", ")", ":", "\n", "        ", "for", "idx", ",", "p", "in", "enumerate", "(", "parse", ")", ":", "\n", "            ", "if", "p", ".", "tag", ".", "POS", "==", "cls", ":", "\n", "                ", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParse.assertNotParsedAs": [[170, 173], ["morph.parse", "test_analyzer.TestParse._parsed_as"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParse._parsed_as"], ["", "", "", "def", "assertNotParsedAs", "(", "self", ",", "word", ",", "cls", ",", "morph", ")", ":", "\n", "        ", "parse", "=", "morph", ".", "parse", "(", "word", ")", "\n", "assert", "not", "self", ".", "_parsed_as", "(", "parse", ",", "cls", ")", ",", "(", "parse", ",", "cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParse.test_no_nonproductive_forms": [[174, 177], ["test_analyzer.with_test_data", "test_analyzer.TestParse.assertNotParsedAs"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.with_test_data", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParse.assertNotParsedAs"], ["", "@", "with_test_data", "(", "NON_PRODUCTIVE_BUGS_DATA", ",", "'cls'", ")", "\n", "def", "test_no_nonproductive_forms", "(", "self", ",", "word", ",", "cls", ",", "morph", ")", ":", "\n", "        ", "self", ".", "assertNotParsedAs", "(", "word", ",", "cls", ",", "morph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParse.test_no_duplicate_parses": [[178, 182], ["morph.parse", "len", "len", "set"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "def", "test_no_duplicate_parses", "(", "self", ",", "morph", ")", ":", "\n", "        ", "parse", "=", "morph", ".", "parse", "(", "'\u0431\u0443\u0442\u044f\u0432\u043a\u043e\u0439'", ")", "\n", "data", "=", "[", "variant", "[", ":", "3", "]", "for", "variant", "in", "parse", "]", "\n", "assert", "len", "(", "set", "(", "data", ")", ")", "==", "len", "(", "data", ")", ",", "parse", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParse.test_parse_order": [[183, 188], ["morph.parse", "test_analyzer.TestParse._parsed_as", "test_analyzer.TestParse._parsed_as", "test_analyzer.TestParse._parse_cls_first_index", "test_analyzer.TestParse._parse_cls_first_index"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParse._parsed_as", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParse._parsed_as", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParse._parse_cls_first_index", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParse._parse_cls_first_index"], ["", "def", "test_parse_order", "(", "self", ",", "morph", ")", ":", "\n", "        ", "parse", "=", "morph", ".", "parse", "(", "'\u043f\u0440\u043e\u0434\u044e\u0441\u0435\u0440\u0441\u0442\u0432\u043e'", ")", "\n", "assert", "self", ".", "_parsed_as", "(", "parse", ",", "'NOUN'", ")", "\n", "assert", "self", ".", "_parsed_as", "(", "parse", ",", "'ADVB'", ")", "\n", "assert", "self", ".", "_parse_cls_first_index", "(", "parse", ",", "'NOUN'", ")", "<", "self", ".", "_parse_cls_first_index", "(", "parse", ",", "'ADVB'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestHyphen.assert_not_parsed_by_hyphen": [[191, 196], ["morph.parse", "isinstance"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["    ", "def", "assert_not_parsed_by_hyphen", "(", "self", ",", "word", ",", "morph", ")", ":", "\n", "        ", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", ":", "\n", "            ", "for", "meth", "in", "p", ".", "methods_stack", ":", "\n", "                ", "analyzer", "=", "meth", "[", "0", "]", "\n", "assert", "not", "isinstance", "(", "analyzer", ",", "HyphenatedWordsAnalyzer", ")", ",", "p", ".", "methods_stack", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestHyphen.test_no_hyphen_analyzer_for_known_prefixes": [[197, 200], ["test_analyzer.TestHyphen.assert_not_parsed_by_hyphen"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestHyphen.assert_not_parsed_by_hyphen"], ["", "", "", "def", "test_no_hyphen_analyzer_for_known_prefixes", "(", "self", ",", "morph", ")", ":", "\n", "# this word should be parsed by KnownPrefixAnalyzer", "\n", "        ", "self", ".", "assert_not_parsed_by_hyphen", "(", "'\u043c\u0438\u043d\u0438-\u0431\u0443\u0434\u0438\u043b\u044c\u043d\u0438\u043a'", ",", "morph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestHyphen.test_no_hyphen_analyzer_bad_input": [[201, 203], ["test_analyzer.TestHyphen.assert_not_parsed_by_hyphen"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestHyphen.assert_not_parsed_by_hyphen"], ["", "def", "test_no_hyphen_analyzer_bad_input", "(", "self", ",", "morph", ")", ":", "\n", "        ", "self", ".", "assert_not_parsed_by_hyphen", "(", "'\u043f\u0440\u0438\u0432\u0435\u0442-\u043f\u043e\u043a\u0430-'", ",", "morph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestTagWithPrefix.test_tag_with_unknown_prefix": [[206, 217], ["pymorphy2.units.by_analogy.UnknownPrefixAnalyzer", "pymorphy2.units.by_analogy.UnknownPrefixAnalyzer.init", "pymorphy2.units.by_analogy.KnownPrefixAnalyzer", "pymorphy2.units.by_analogy.KnownPrefixAnalyzer.init", "pymorphy2.units.by_analogy.UnknownPrefixAnalyzer.tag", "pymorphy2.units.by_analogy.KnownPrefixAnalyzer.tag", "word.lower", "set", "word.lower", "set"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.init", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag"], ["    ", "def", "test_tag_with_unknown_prefix", "(", "self", ",", "morph", ")", ":", "\n", "        ", "word", "=", "'\u043c\u0435\u0433\u0430\u043a\u043e\u0442'", "\n", "\n", "pred1", "=", "UnknownPrefixAnalyzer", "(", ")", "\n", "pred1", ".", "init", "(", "morph", ")", "\n", "pred2", "=", "KnownPrefixAnalyzer", "(", "lang", ".", "ru", ".", "KNOWN_PREFIXES", ")", "\n", "pred2", ".", "init", "(", "morph", ")", "\n", "\n", "parse1", "=", "pred1", ".", "tag", "(", "word", ",", "word", ".", "lower", "(", ")", ",", "set", "(", ")", ")", "\n", "parse2", "=", "pred2", ".", "tag", "(", "word", ",", "word", ".", "lower", "(", ")", ",", "set", "(", ")", ")", "\n", "assert", "parse1", "==", "parse2", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestTagWithPrefix.test_longest_prefixes_are_used": [[218, 222], ["morph.parse", "len", "len"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "def", "test_longest_prefixes_are_used", "(", "self", ",", "morph", ")", ":", "\n", "        ", "parses", "=", "morph", ".", "parse", "(", "'\u043d\u0435\u0434\u043e\u0431\u0430\u0440\u0430\u0431\u0430\u043d\u043e\u043c'", ")", "\n", "assert", "len", "(", "parses", ")", "==", "1", "\n", "assert", "len", "(", "parses", "[", "0", "]", ".", "methods_stack", ")", "==", "2", "# \u043d\u0435\u0434\u043e+\u0431\u0430\u0440\u0430\u0431\u0430\u043d\u043e\u043c, not \u043d\u0435+\u0434\u043e+\u0431\u0430\u0440\u0430\u0431\u0430\u043d\u043e\u043c", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestUtils.test_word_is_known": [[225, 229], ["morph.word_is_known", "morph.word_is_known", "morph.word_is_known"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.word_is_known", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.word_is_known", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.word_is_known"], ["    ", "def", "test_word_is_known", "(", "self", ",", "morph", ")", ":", "\n", "        ", "assert", "morph", ".", "word_is_known", "(", "'\u0435\u0436'", ")", "\n", "assert", "morph", ".", "word_is_known", "(", "'\u0451\u0436'", ")", "\n", "assert", "not", "morph", ".", "word_is_known", "(", "'\u0435\u0448'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestUtils.test_word_is_known_strict": [[230, 234], ["morph.word_is_known", "morph.word_is_known", "morph.word_is_known"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.word_is_known", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.word_is_known", "home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.wrapper.Dictionary.word_is_known"], ["", "def", "test_word_is_known_strict", "(", "self", ",", "morph", ")", ":", "\n", "        ", "assert", "not", "morph", ".", "word_is_known", "(", "'\u0435\u0436'", ",", "strict", "=", "True", ")", "\n", "assert", "morph", ".", "word_is_known", "(", "'\u0451\u0436'", ",", "strict", "=", "True", ")", "\n", "assert", "not", "morph", ".", "word_is_known", "(", "'\u0435\u0448'", ",", "strict", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParseResultClass.assertNotTuples": [[237, 239], ["all", "type"], "methods", ["None"], ["    ", "def", "assertNotTuples", "(", "self", ",", "parses", ")", ":", "\n", "        ", "assert", "all", "(", "type", "(", "p", ")", "!=", "tuple", "for", "p", "in", "parses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParseResultClass.assertAllTuples": [[240, 242], ["all", "type"], "methods", ["None"], ["", "def", "assertAllTuples", "(", "self", ",", "parses", ")", ":", "\n", "        ", "assert", "all", "(", "type", "(", "p", ")", "==", "tuple", "for", "p", "in", "parses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParseResultClass.test_namedtuples": [[243, 245], ["test_analyzer.TestParseResultClass.assertNotTuples", "morph.parse"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParseResultClass.assertNotTuples", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "def", "test_namedtuples", "(", "self", ",", "morph", ")", ":", "\n", "        ", "self", ".", "assertNotTuples", "(", "morph", ".", "parse", "(", "'\u043a\u043e\u0442'", ")", ")", "\n", "# self.assertNotTuples(morph.inflect('\u043a\u043e\u0442', set(['plur'])))", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParseResultClass.test_plain_tuples": [[248, 251], ["pymorphy2.MorphAnalyzer", "test_analyzer.TestParseResultClass.assertAllTuples", "pymorphy2.MorphAnalyzer.parse"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestParseResultClass.assertAllTuples", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "def", "test_plain_tuples", "(", "self", ")", ":", "\n", "        ", "morph_plain", "=", "pymorphy2", ".", "MorphAnalyzer", "(", "result_type", "=", "None", ")", "\n", "self", ".", "assertAllTuples", "(", "morph_plain", ".", "parse", "(", "'\u043a\u043e\u0442'", ")", ")", "\n", "# self.assertAllTuples(morph_plain.inflect('\u043a\u043e\u0442', set(['plur'])))", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestLatinPredictor.test_tag": [[256, 258], ["morph.tag", "morph.TagClass"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.TagClass"], ["    ", "def", "test_tag", "(", "self", ",", "morph", ")", ":", "\n", "        ", "assert", "morph", ".", "tag", "(", "'Ma\u00dfstab'", ")", "==", "[", "morph", ".", "TagClass", "(", "'LATN'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestLatinPredictor.test_parse": [[259, 263], ["morph.parse", "len"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "def", "test_parse", "(", "self", ",", "morph", ")", ":", "\n", "        ", "parses", "=", "morph", ".", "parse", "(", "'Ma\u00dfstab'", ")", "\n", "assert", "len", "(", "parses", ")", "==", "1", "\n", "assert", "'LATN'", "in", "parses", "[", "0", "]", ".", "tag", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestLatinPredictor.test_lexeme": [[264, 267], ["morph.parse"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "def", "test_lexeme", "(", "self", ",", "morph", ")", ":", "\n", "        ", "p", "=", "morph", ".", "parse", "(", "'Ma\u00dfstab'", ")", "[", "0", "]", "\n", "assert", "p", ".", "lexeme", "==", "[", "p", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestLatinPredictor.test_normalized": [[268, 271], ["morph.parse"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "def", "test_normalized", "(", "self", ",", "morph", ")", ":", "\n", "        ", "p", "=", "morph", ".", "parse", "(", "'Ma\u00dfstab'", ")", "[", "0", "]", "\n", "assert", "p", ".", "normalized", "==", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestLatinPredictor.test_normal_forms": [[272, 274], ["morph.normal_forms"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.normal_forms"], ["", "def", "test_normal_forms", "(", "self", ",", "morph", ")", ":", "\n", "        ", "assert", "morph", ".", "normal_forms", "(", "'Ma\u00dfstab'", ")", "==", "[", "'ma\u00dfstab'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TetsPunctuationPredictor.test_tag": [[277, 279], ["morph.tag", "morph.TagClass"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.TagClass"], ["    ", "def", "test_tag", "(", "self", ",", "morph", ")", ":", "\n", "        ", "assert", "morph", ".", "tag", "(", "'\u2026'", ")", "==", "[", "morph", ".", "TagClass", "(", "'PNCT'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials.assertHasFirstName": [[282, 284], ["any", "set"], "methods", ["None"], ["    ", "def", "assertHasFirstName", "(", "self", ",", "tags", ")", ":", "\n", "        ", "assert", "any", "(", "set", "(", "[", "'Name'", ",", "'Abbr'", "]", ")", "in", "tag", "for", "tag", "in", "tags", ")", ",", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials.assertHasPatronymic": [[285, 287], ["any", "set"], "methods", ["None"], ["", "def", "assertHasPatronymic", "(", "self", ",", "tags", ")", ":", "\n", "        ", "assert", "any", "(", "set", "(", "[", "'Patr'", ",", "'Abbr'", "]", ")", "in", "tag", "for", "tag", "in", "tags", ")", ",", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials._filter_parse": [[288, 290], ["morph.parse", "set"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "def", "_filter_parse", "(", "self", ",", "word", ",", "grammemes", ",", "morph", ")", ":", "\n", "        ", "return", "[", "p", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", "if", "set", "(", "grammemes", ")", "in", "p", ".", "tag", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials.test_tag": [[291, 295], ["morph.tag", "test_analyzer.TestInitials.assertHasFirstName", "test_analyzer.TestInitials.assertHasPatronymic"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials.assertHasFirstName", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials.assertHasPatronymic"], ["", "def", "test_tag", "(", "self", ",", "morph", ")", ":", "\n", "        ", "tags", "=", "morph", ".", "tag", "(", "'\u0414'", ")", "\n", "self", ".", "assertHasFirstName", "(", "tags", ")", "\n", "self", ".", "assertHasPatronymic", "(", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials.test_tag_conj": [[296, 301], ["morph.tag", "test_analyzer.TestInitials.assertHasFirstName", "test_analyzer.TestInitials.assertHasPatronymic", "any"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials.assertHasFirstName", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials.assertHasPatronymic"], ["", "def", "test_tag_conj", "(", "self", ",", "morph", ")", ":", "\n", "        ", "tags", "=", "morph", ".", "tag", "(", "'\u0418'", ")", "\n", "self", ".", "assertHasFirstName", "(", "tags", ")", "\n", "self", ".", "assertHasPatronymic", "(", "tags", ")", "\n", "assert", "any", "(", "'CONJ'", "in", "tag", "for", "tag", "in", "tags", ")", ",", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials.test_parse": [[302, 306], ["test_analyzer.TestInitials.assertHasFirstName", "test_analyzer.TestInitials.assertHasPatronymic", "morph.parse"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials.assertHasFirstName", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials.assertHasPatronymic", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "def", "test_parse", "(", "self", ",", "morph", ")", ":", "\n", "        ", "tags", "=", "[", "p", ".", "tag", "for", "p", "in", "morph", ".", "parse", "(", "'\u0418'", ")", "]", "\n", "self", ".", "assertHasFirstName", "(", "tags", ")", "\n", "self", ".", "assertHasPatronymic", "(", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials.test_normalize_name_masc": [[307, 312], ["test_analyzer.TestInitials._filter_parse"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials._filter_parse"], ["", "def", "test_normalize_name_masc", "(", "self", ",", "morph", ")", ":", "\n", "        ", "parse", "=", "self", ".", "_filter_parse", "(", "'\u0418'", ",", "[", "'Name'", ",", "'accs'", ",", "'masc'", "]", ",", "morph", ")", "[", "0", "]", "\n", "assert", "parse", ".", "normalized", ".", "word", "==", "'\u0438'", "\n", "assert", "parse", ".", "normalized", ".", "tag", ".", "case", "==", "'nomn'", "\n", "assert", "parse", ".", "normalized", ".", "tag", ".", "gender", "==", "'masc'", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials.test_normalize_patr_masc": [[313, 318], ["test_analyzer.TestInitials._filter_parse"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials._filter_parse"], ["", "def", "test_normalize_patr_masc", "(", "self", ",", "morph", ")", ":", "\n", "        ", "parse", "=", "self", ".", "_filter_parse", "(", "'\u0418'", ",", "[", "'Patr'", ",", "'accs'", ",", "'masc'", "]", ",", "morph", ")", "[", "0", "]", "\n", "assert", "parse", ".", "normalized", ".", "word", "==", "'\u0438'", "\n", "assert", "parse", ".", "normalized", ".", "tag", ".", "case", "==", "'nomn'", "\n", "assert", "parse", ".", "normalized", ".", "tag", ".", "gender", "==", "'masc'", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials.test_normalize_name_femn": [[319, 324], ["test_analyzer.TestInitials._filter_parse"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials._filter_parse"], ["", "def", "test_normalize_name_femn", "(", "self", ",", "morph", ")", ":", "\n", "        ", "parse", "=", "self", ".", "_filter_parse", "(", "'\u0418'", ",", "[", "'Name'", ",", "'accs'", ",", "'femn'", "]", ",", "morph", ")", "[", "0", "]", "\n", "assert", "parse", ".", "normalized", ".", "word", "==", "'\u0438'", "\n", "assert", "parse", ".", "normalized", ".", "tag", ".", "case", "==", "'nomn'", "\n", "assert", "parse", ".", "normalized", ".", "tag", ".", "gender", "==", "'femn'", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials.test_normalize_patr_femn": [[325, 330], ["test_analyzer.TestInitials._filter_parse"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.TestInitials._filter_parse"], ["", "def", "test_normalize_patr_femn", "(", "self", ",", "morph", ")", ":", "\n", "        ", "parse", "=", "self", ".", "_filter_parse", "(", "'\u0418'", ",", "[", "'Patr'", ",", "'accs'", ",", "'femn'", "]", ",", "morph", ")", "[", "0", "]", "\n", "assert", "parse", ".", "normalized", ".", "word", "==", "'\u0438'", "\n", "assert", "parse", ".", "normalized", ".", "tag", ".", "case", "==", "'nomn'", "\n", "assert", "parse", ".", "normalized", ".", "tag", ".", "gender", "==", "'masc'", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.test_pickling": [[101, 105], ["pickle.dumps", "pickle.loads", "pickle.loads.tag", "morph.tag"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag"], ["def", "test_pickling", "(", "morph", ")", ":", "\n", "    ", "data", "=", "pickle", ".", "dumps", "(", "morph", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "morph2", "=", "pickle", ".", "loads", "(", "data", ")", "\n", "assert", "morph2", ".", "tag", "(", "'\u0441\u043b\u043e\u0432\u043e'", ")", "==", "morph", ".", "tag", "(", "'\u0441\u043b\u043e\u0432\u043e'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.with_test_data": [[107, 111], ["pytest.mark.parametrize"], "function", ["None"], ["", "def", "with_test_data", "(", "data", ",", "second_param_name", "=", "'parse_result'", ")", ":", "\n", "    ", "return", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "(", "\"word\"", ",", "second_param_name", ")", ",", "\n", "data", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_analyzer.test_iter_known_word_parses": [[332, 338], ["list", "any", "morph.iter_known_word_parses", "isinstance"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.iter_known_word_parses"], ["", "", "def", "test_iter_known_word_parses", "(", "morph", ")", ":", "\n", "    ", "parses", "=", "list", "(", "morph", ".", "iter_known_word_parses", "(", "'\u043f\u0440\u0438\u0432\u0435'", ")", ")", "\n", "assert", "any", "(", "\n", "(", "p", ".", "word", "==", "'\u043f\u0440\u0438\u0432\u0435\u0442'", "and", "isinstance", "(", "p", ".", "methods_stack", "[", "0", "]", "[", "0", "]", ",", "DictionaryAnalyzer", ")", ")", "\n", "for", "p", "in", "parses", "\n", ")", ",", "parses", "\n", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestUpdated.test_number": [[80, 84], ["Tag", "Tag.updated_grammemes", "set", "set"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.updated_grammemes"], ["    ", "def", "test_number", "(", "self", ",", "Tag", ")", ":", "\n", "        ", "tag", "=", "Tag", "(", "'NOUN,sing,masc'", ")", "\n", "grammemes", "=", "tag", ".", "updated_grammemes", "(", "required", "=", "set", "(", "[", "'plur'", "]", ")", ")", "\n", "assert", "grammemes", "==", "set", "(", "[", "'NOUN'", ",", "'plur'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestUpdated.test_order": [[85, 89], ["Tag", "Tag.updated_grammemes", "set", "set"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.tagset.OpencorporaTag.updated_grammemes"], ["", "def", "test_order", "(", "self", ",", "Tag", ")", ":", "\n", "        ", "tag", "=", "Tag", "(", "'VERB,impf,tran sing,3per,pres,indc'", ")", "\n", "grammemes", "=", "tag", ".", "updated_grammemes", "(", "required", "=", "set", "(", "[", "'1per'", "]", ")", ")", "\n", "assert", "grammemes", "==", "set", "(", "'VERB,sing,impf,tran,1per,pres,indc'", ".", "split", "(", "','", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestAttributes.test_attributes": [[93, 107], ["Tag"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["    ", "def", "test_attributes", "(", "self", ",", "Tag", ")", ":", "\n", "        ", "tag", "=", "Tag", "(", "'VERB,impf,tran sing,3per,pres,indc'", ")", "\n", "assert", "tag", ".", "POS", "==", "'VERB'", "\n", "assert", "tag", ".", "gender", "is", "None", "\n", "assert", "tag", ".", "animacy", "is", "None", "\n", "assert", "tag", ".", "number", "==", "'sing'", "\n", "assert", "tag", ".", "case", "is", "None", "\n", "assert", "tag", ".", "tense", "==", "'pres'", "\n", "assert", "tag", ".", "aspect", "==", "'impf'", "\n", "assert", "tag", ".", "mood", "==", "'indc'", "\n", "assert", "tag", ".", "person", "==", "'3per'", "\n", "assert", "tag", ".", "transitivity", "==", "'tran'", "\n", "assert", "tag", ".", "voice", "is", "None", "# ?", "\n", "assert", "tag", ".", "involvement", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestAttributes.test_attributes2": [[108, 122], ["Tag"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["", "def", "test_attributes2", "(", "self", ",", "Tag", ")", ":", "\n", "        ", "tag", "=", "Tag", "(", "'NOUN,inan,masc plur,accs'", ")", "\n", "assert", "tag", ".", "POS", "==", "'NOUN'", "\n", "assert", "tag", ".", "gender", "==", "'masc'", "\n", "assert", "tag", ".", "animacy", "==", "'inan'", "\n", "assert", "tag", ".", "number", "==", "'plur'", "\n", "assert", "tag", ".", "case", "==", "'accs'", "\n", "assert", "tag", ".", "tense", "is", "None", "\n", "assert", "tag", ".", "aspect", "is", "None", "\n", "assert", "tag", ".", "mood", "is", "None", "\n", "assert", "tag", ".", "person", "is", "None", "\n", "assert", "tag", ".", "transitivity", "is", "None", "\n", "assert", "tag", ".", "voice", "is", "None", "\n", "assert", "tag", ".", "involvement", "is", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestAttributes.test_attributes3": [[123, 126], ["Tag"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["", "def", "test_attributes3", "(", "self", ",", "Tag", ")", ":", "\n", "        ", "tag", "=", "Tag", "(", "'PRTF,impf,tran,pres,pssv inan,masc,sing,accs'", ")", "\n", "assert", "tag", ".", "voice", "==", "'pssv'", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestAttributes.test_attributes4": [[127, 130], ["Tag"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["", "def", "test_attributes4", "(", "self", ",", "Tag", ")", ":", "\n", "        ", "tag", "=", "Tag", "(", "'VERB,perf,tran plur,impr,excl'", ")", "\n", "assert", "tag", ".", "involvement", "==", "'excl'", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestAttributes.test_attribute_exceptions": [[131, 139], ["Tag", "pytest.raises", "pytest.raises"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["", "def", "test_attribute_exceptions", "(", "self", ",", "Tag", ")", ":", "\n", "        ", "tag", "=", "Tag", "(", "'NOUN,inan,masc plur,accs'", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "            ", "tag", ".", "POS", "==", "'hello'", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "            ", "tag", ".", "POS", "==", "'noun'", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestAttributes.test_attributes_as_set_items": [[140, 145], ["Tag", "set"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["", "", "def", "test_attributes_as_set_items", "(", "self", ",", "Tag", ")", ":", "\n", "        ", "tag", "=", "Tag", "(", "'NOUN,inan,masc plur,accs'", ")", "\n", "\n", "# this doesn't raise an exception", "\n", "assert", "tag", ".", "gender", "in", "set", "(", "[", "'masc'", ",", "'sing'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestContains.test_contains_correct": [[149, 154], ["Tag", "tag_text.replace().split", "tag_text.replace"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["    ", "def", "test_contains_correct", "(", "self", ",", "Tag", ")", ":", "\n", "        ", "tag_text", "=", "'VERB,perf,tran plur,impr,excl'", "\n", "tag", "=", "Tag", "(", "tag_text", ")", "\n", "for", "grammeme", "in", "tag_text", ".", "replace", "(", "' '", ",", "','", ")", ".", "split", "(", "','", ")", ":", "\n", "            ", "assert", "grammeme", "in", "tag", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestContains.test_not_contains": [[155, 163], ["Tag"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["", "", "def", "test_not_contains", "(", "self", ",", "Tag", ")", ":", "\n", "# we need to use a prepared Tag class for this to work", "\n", "        ", "tag", "=", "Tag", "(", "'VERB,perf,tran plur,impr,excl'", ")", "\n", "\n", "assert", "'VERB'", "in", "tag", "\n", "assert", "'NOUN'", "not", "in", "tag", "\n", "assert", "'sing'", "not", "in", "tag", "\n", "assert", "'Dist'", "not", "in", "tag", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestContains.test_contains_error": [[164, 173], ["Tag", "pytest.raises", "pytest.raises"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["", "def", "test_contains_error", "(", "self", ",", "Tag", ")", ":", "\n", "# we need to use a prepared Tag class for this to work", "\n", "        ", "tag", "=", "Tag", "(", "'VERB,perf,tran plur,impr,excl'", ")", "\n", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "            ", "assert", "'foo'", "in", "tag", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "            ", "assert", "'VERP'", "in", "tag", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestContains.test_contains_set": [[174, 183], ["Tag", "set", "set", "set", "pytest.raises", "set"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["", "", "def", "test_contains_set", "(", "self", ",", "Tag", ")", ":", "\n", "        ", "tag", "=", "Tag", "(", "'VERB,perf,tran plur,impr,excl'", ")", "\n", "assert", "set", "(", "[", "'VERB'", ",", "'perf'", "]", ")", "in", "tag", "\n", "assert", "set", "(", "[", "'VERB'", ",", "'sing'", "]", ")", "not", "in", "tag", "\n", "\n", "assert", "set", "(", ")", "in", "tag", "# ??", "\n", "\n", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "            ", "assert", "set", "(", "[", "'VERB'", ",", "'pref'", "]", ")", "in", "tag", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestCyrillic.test_cyr_repr": [[186, 189], ["Tag"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["    ", "def", "test_cyr_repr", "(", "self", ",", "Tag", ")", ":", "\n", "        ", "tag", "=", "Tag", "(", "'VERB,perf,tran plur,impr,excl'", ")", "\n", "assert", "tag", ".", "cyr_repr", "==", "'\u0413\u041b,\u0441\u043e\u0432,\u043f\u0435\u0440\u0435\u0445 \u043c\u043d,\u043f\u043e\u0432\u0435\u043b,\u0432\u044b\u043a\u043b'", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestCyrillic.test_grammemes_cyr": [[190, 193], ["Tag", "frozenset"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["", "def", "test_grammemes_cyr", "(", "self", ",", "Tag", ")", ":", "\n", "        ", "tag", "=", "Tag", "(", "'VERB,perf,tran plur,impr,excl'", ")", "\n", "assert", "tag", ".", "grammemes_cyr", "==", "frozenset", "(", "[", "'\u0413\u041b'", ",", "'\u0441\u043e\u0432'", ",", "'\u043f\u0435\u0440\u0435\u0445'", ",", "'\u043c\u043d'", ",", "'\u043f\u043e\u0432\u0435\u043b'", ",", "'\u0432\u044b\u043a\u043b'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestCyrillic.test_cyr_extra_grammemes": [[194, 197], ["Tag"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["", "def", "test_cyr_extra_grammemes", "(", "self", ",", "Tag", ")", ":", "\n", "        ", "tag", "=", "Tag", "(", "'ROMN'", ")", "\n", "assert", "tag", ".", "cyr_repr", "==", "'\u0420\u0418\u041c'", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.TestCyrillic.test_lat2cyr": [[198, 209], ["pytest.mark.parametrize", "Tag.lat2cyr", "Tag.cyr2lat", "morph.lat2cyr", "morph.cyr2lat"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.lat2cyr", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.cyr2lat", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.lat2cyr", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.cyr2lat"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "(", "'lat'", ",", "'cyr'", ")", ",", "[", "\n", "(", "'VERB,perf,tran plur,impr,excl'", ",", "'\u0413\u041b,\u0441\u043e\u0432,\u043f\u0435\u0440\u0435\u0445 \u043c\u043d,\u043f\u043e\u0432\u0435\u043b,\u0432\u044b\u043a\u043b'", ")", ",", "\n", "(", "'ROMN'", ",", "'\u0420\u0418\u041c'", ")", ",", "\n", "(", "'ROMN,unknown_grammeme'", ",", "'\u0420\u0418\u041c,unknown_grammeme'", ")", ",", "\n", "(", "'plur'", ",", "'\u043c\u043d'", ")", ",", "\n", "]", ")", "\n", "def", "test_lat2cyr", "(", "self", ",", "lat", ",", "cyr", ",", "Tag", ",", "morph", ")", ":", "\n", "        ", "assert", "Tag", ".", "lat2cyr", "(", "lat", ")", "==", "cyr", "\n", "assert", "Tag", ".", "cyr2lat", "(", "cyr", ")", "==", "lat", "\n", "assert", "morph", ".", "lat2cyr", "(", "lat", ")", "==", "cyr", "\n", "assert", "morph", ".", "cyr2lat", "(", "cyr", ")", "==", "lat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.test_hashing": [[10, 19], ["Tag", "Tag", "Tag", "set", "set", "set", "set"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["def", "test_hashing", "(", "Tag", ")", ":", "\n", "    ", "tag1", "=", "Tag", "(", "'NOUN'", ")", "\n", "tag2", "=", "Tag", "(", "'NOUN'", ")", "\n", "tag3", "=", "Tag", "(", "'VERB'", ")", "\n", "\n", "assert", "tag1", "==", "tag2", "\n", "assert", "tag1", "!=", "tag3", "\n", "assert", "set", "(", "[", "tag1", "]", ")", "==", "set", "(", "[", "tag2", "]", ")", "\n", "assert", "set", "(", "[", "tag3", "]", ")", "!=", "set", "(", "[", "tag1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.test_cls": [[21, 28], ["pytest.mark.parametrize", "Tag"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["", "@", "pytest", ".", "mark", ".", "parametrize", "(", "(", "\"tag\"", ",", "\"cls\"", ")", ",", "[", "\n", "[", "'NOUN'", ",", "'NOUN'", "]", ",", "\n", "[", "'NOUN,sing'", ",", "'NOUN'", "]", ",", "\n", "[", "'NOUN sing'", ",", "'NOUN'", "]", ",", "\n", "]", ")", "\n", "def", "test_cls", "(", "tag", ",", "cls", ",", "Tag", ")", ":", "\n", "    ", "assert", "Tag", "(", "tag", ")", ".", "POS", "==", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.test_repr": [[30, 32], ["repr", "Tag"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["", "def", "test_repr", "(", "Tag", ")", ":", "\n", "    ", "assert", "repr", "(", "Tag", "(", "'NOUN anim,plur'", ")", ")", "==", "\"OpencorporaTag('NOUN anim,plur')\"", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.test_extra_grammemes": [[35, 53], ["pymorphy2.MorphAnalyzer", "pymorphy2.MorphAnalyzer.TagClass.KNOWN_GRAMMEMES.add", "pymorphy2.MorphAnalyzer.TagClass"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.TagClass"], ["", "@", "pytest", ".", "mark", ".", "xfail", "\n", "def", "test_extra_grammemes", "(", "Tag", ")", ":", "\n", "    ", "m", "=", "pymorphy2", ".", "MorphAnalyzer", "(", ")", "\n", "\n", "assert", "m", ".", "TagClass", ".", "KNOWN_GRAMMEMES", "is", "not", "Tag", ".", "KNOWN_GRAMMEMES", "\n", "assert", "m", ".", "TagClass", ".", "KNOWN_GRAMMEMES", "is", "not", "OpencorporaTag", ".", "KNOWN_GRAMMEMES", "\n", "\n", "assert", "'new_grammeme'", "not", "in", "Tag", ".", "KNOWN_GRAMMEMES", "\n", "assert", "'new_grammeme'", "not", "in", "m", ".", "TagClass", ".", "KNOWN_GRAMMEMES", "\n", "\n", "m", ".", "TagClass", ".", "KNOWN_GRAMMEMES", ".", "add", "(", "'new_grammeme'", ")", "\n", "\n", "new_tag", "=", "m", ".", "TagClass", "(", "'NOUN,sing,new_grammeme'", ")", "\n", "\n", "assert", "'new_grammeme'", "in", "new_tag", "\n", "assert", "'new_grammeme'", "in", "m", ".", "TagClass", ".", "KNOWN_GRAMMEMES", "\n", "assert", "'new_grammeme'", "not", "in", "OpencorporaTag", ".", "KNOWN_GRAMMEMES", "\n", "assert", "'new_grammeme'", "not", "in", "Tag", ".", "KNOWN_GRAMMEMES", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.test_len": [[55, 60], ["len", "len", "len", "len", "Tag", "Tag", "Tag", "Tag"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["", "def", "test_len", "(", "Tag", ")", ":", "\n", "    ", "assert", "len", "(", "Tag", "(", "'NOUN'", ")", ")", "==", "1", "\n", "assert", "len", "(", "Tag", "(", "'NOUN plur'", ")", ")", "==", "2", "\n", "assert", "len", "(", "Tag", "(", "'NOUN plur,masc'", ")", ")", "==", "3", "\n", "assert", "len", "(", "Tag", "(", "'NOUN,plur,masc'", ")", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.test_pickle": [[62, 67], ["Tag", "pickle.dumps", "pickle.loads"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag"], ["", "def", "test_pickle", "(", "Tag", ")", ":", "\n", "    ", "tag", "=", "Tag", "(", "'NOUN'", ")", "\n", "data", "=", "pickle", ".", "dumps", "(", "tag", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "tag_unpickled", "=", "pickle", ".", "loads", "(", "data", ")", "\n", "assert", "tag", "==", "tag_unpickled", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_tagset.test_pickle_custom": [[69, 76], ["pymorphy2.MorphAnalyzer", "pymorphy2.MorphAnalyzer.TagClass.KNOWN_GRAMMEMES.add", "pymorphy2.MorphAnalyzer.TagClass", "pickle.dumps", "pickle.loads"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.TagClass"], ["", "def", "test_pickle_custom", "(", ")", ":", "\n", "    ", "m", "=", "pymorphy2", ".", "MorphAnalyzer", "(", ")", "\n", "m", ".", "TagClass", ".", "KNOWN_GRAMMEMES", ".", "add", "(", "'new_grammeme'", ")", "\n", "tag", "=", "m", ".", "TagClass", "(", "'new_grammeme'", ")", "\n", "data", "=", "pickle", ".", "dumps", "(", "tag", ",", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "tag_unpickled", "=", "pickle", ".", "loads", "(", "data", ")", "\n", "assert", "tag", "==", "tag_unpickled", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_cli.run_pymorphy2": [[11, 13], ["pymorphy2.cli.main"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.cli.main"], ["def", "run_pymorphy2", "(", "args", "=", "(", ")", ",", "stdin", "=", "None", ")", ":", "\n", "    ", "cli", ".", "main", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_cli.test_show_usage": [[15, 19], ["pytest.raises", "test_cli.run_pymorphy2", "str"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_cli.run_pymorphy2"], ["", "def", "test_show_usage", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "docopt", ".", "DocoptExit", ")", "as", "e", ":", "\n", "        ", "run_pymorphy2", "(", "[", "]", ")", "\n", "", "assert", "'Usage:'", "in", "str", "(", "e", ".", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_cli.test_show_memory_usage": [[21, 27], ["pytest.importorskip", "test_cli.run_pymorphy2", "capsys.readouterr"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_cli.run_pymorphy2"], ["", "def", "test_show_memory_usage", "(", "capsys", ")", ":", "\n", "    ", "pytest", ".", "importorskip", "(", "\"psutil\"", ")", "\n", "\n", "run_pymorphy2", "(", "[", "'dict'", ",", "'mem_usage'", "]", ")", "\n", "out", "=", "' '", ".", "join", "(", "capsys", ".", "readouterr", "(", ")", ")", "\n", "assert", "'Memory usage:'", "in", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_cli.test_show_dict_meta": [[29, 34], ["test_cli.run_pymorphy2", "capsys.readouterr"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_cli.run_pymorphy2"], ["", "def", "test_show_dict_meta", "(", "capsys", ",", "morph", ")", ":", "\n", "    ", "meta", "=", "morph", ".", "dictionary", ".", "meta", "\n", "run_pymorphy2", "(", "[", "'dict'", ",", "'meta'", "]", ")", "\n", "out", "=", "' '", ".", "join", "(", "capsys", ".", "readouterr", "(", ")", ")", "\n", "assert", "meta", "[", "'compiled_at'", "]", "in", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_cli.test_parse_basic": [[36, 53], ["tmpdir.join", "tmpdir.join.write_text", "test_cli.run_pymorphy2", "capsys.readouterr", "print", "print", "out.strip", "str"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_cli.run_pymorphy2"], ["", "def", "test_parse_basic", "(", "tmpdir", ",", "capsys", ")", ":", "\n", "    ", "logging", ".", "raiseExceptions", "=", "False", "\n", "try", ":", "\n", "        ", "p", "=", "tmpdir", ".", "join", "(", "'words.txt'", ")", "\n", "p", ".", "write_text", "(", "u\"\"\"\n        \u043a\u0440\u043e\u0442 \u043f\u0440\u0438\u0448\u0435\u043b\n        \"\"\"", ",", "encoding", "=", "'utf8'", ")", "\n", "run_pymorphy2", "(", "[", "\"parse\"", ",", "str", "(", "p", ")", "]", ")", "\n", "out", ",", "err", "=", "capsys", ".", "readouterr", "(", ")", "\n", "print", "(", "out", ")", "\n", "print", "(", "err", ")", "\n", "assert", "out", ".", "strip", "(", ")", "==", "u\"\"\"\n\u043a\u0440\u043e\u0442{\u043a\u0440\u043e\u0442:1.000=NOUN,anim,masc sing,nomn}\n\u043f\u0440\u0438\u0448\u0435\u043b{\u043f\u0440\u0438\u0439\u0442\u0438:1.000=VERB,perf,intr masc,sing,past,indc}\n        \"\"\"", ".", "strip", "(", ")", "\n", "", "finally", ":", "\n", "        ", "logging", ".", "raiseExceptions", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_opencorpora_dict.TestToyDictionary.test_parse_xml": [[26, 42], ["pymorphy2.opencorpora_dict.parse.parse_opencorpora_xml", "len", "len"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.parse.parse_opencorpora_xml"], ["def", "test_parse_xml", "(", "self", ")", ":", "\n", "        ", "dct", "=", "parse_opencorpora_xml", "(", "self", ".", "XML_PATH", ")", "\n", "assert", "dct", ".", "version", "==", "'0.92'", "\n", "assert", "dct", ".", "revision", "==", "'389440'", "\n", "\n", "assert", "dct", ".", "links", "[", "0", "]", "==", "(", "'5'", ",", "'6'", ",", "'1'", ")", "\n", "assert", "len", "(", "dct", ".", "links", ")", "==", "13", "\n", "\n", "assert", "dct", ".", "grammemes", "[", "1", "]", "==", "(", "'NOUN'", ",", "'POST'", ",", "'\u0421\u0423\u0429'", ",", "'\u0438\u043c\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435'", ")", "\n", "assert", "len", "(", "dct", ".", "grammemes", ")", "==", "114", "\n", "\n", "assert", "dct", ".", "lexemes", "[", "'14'", "]", "==", "[", "(", "'\u0451\u0436\u0438\u0442\u044c\u0441\u044f'", ",", "'INFN,impf,intr'", ")", "]", "\n", "\n", "# bad values should be dropped", "\n", "assert", "dct", ".", "lexemes", "[", "'111111'", "]", "==", "[", "]", "\n", "assert", "dct", ".", "lexemes", "[", "'222222'", "]", "==", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_opencorpora_dict.TestToyDictionary.test_convert_to_pymorphy2": [[43, 80], ["str", "pymorphy2.opencorpora_dict.compile.convert_to_pymorphy2", "pymorphy2.MorphAnalyzer", "pymorphy2.dawg.assert_can_create", "tmpdir.join", "pymorphy2.MorphAnalyzer.tag", "pymorphy2.MorphAnalyzer.normal_forms", "pymorphy2.MorphAnalyzer.normal_forms", "pytest.skip", "pymorphy2.MorphAnalyzer.TagClass", "pymorphy2.MorphAnalyzer.tag", "pymorphy2.MorphAnalyzer.tag", "pymorphy2.MorphAnalyzer.tag", "pymorphy2.MorphAnalyzer.tag", "str"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile.convert_to_pymorphy2", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.dawg.assert_can_create", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.normal_forms", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.normal_forms", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.MorphAnalyzer.TagClass", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag"], ["", "def", "test_convert_to_pymorphy2", "(", "self", ",", "tmpdir", ")", ":", "\n", "\n", "# import logging", "\n", "# from pymorphy2.opencorpora_dict.compile import logger", "\n", "# logger.setLevel(logging.DEBUG)", "\n", "# logger.addHandler(logging.StreamHandler())", "\n", "\n", "        ", "try", ":", "\n", "            ", "assert_can_create", "(", ")", "\n", "", "except", "NotImplementedError", "as", "e", ":", "\n", "            ", "raise", "pytest", ".", "skip", "(", "str", "(", "e", ")", ")", "\n", "\n", "# create a dictionary", "\n", "", "out_path", "=", "str", "(", "tmpdir", ".", "join", "(", "'dicts'", ")", ")", "\n", "options", "=", "{", "\n", "'min_paradigm_popularity'", ":", "0", ",", "\n", "'min_ending_freq'", ":", "0", ",", "\n", "'paradigm_prefixes'", ":", "lang", ".", "ru", ".", "PARADIGM_PREFIXES", ",", "\n", "}", "\n", "convert_to_pymorphy2", "(", "self", ".", "XML_PATH", ",", "out_path", ",", "\n", "source_name", "=", "'toy'", ",", "language_code", "=", "'ru'", ",", "\n", "overwrite", "=", "True", ",", "compile_options", "=", "options", ")", "\n", "\n", "# use it", "\n", "morph", "=", "pymorphy2", ".", "MorphAnalyzer", "(", "out_path", ")", "\n", "assert", "morph", ".", "tag", "(", "'\u0451\u0436\u0438\u0442\u044c\u0441\u044f'", ")", "==", "[", "morph", ".", "TagClass", "(", "'INFN,impf,intr'", ")", "]", "\n", "\n", "# tag simplification should work", "\n", "assert", "morph", ".", "tag", "(", "\"\u0451\u0436\"", ")", "[", "0", "]", "==", "morph", ".", "tag", "(", "\"\u0432\u0430\u043d\u044c\u043a\u0430-\u0432\u0441\u0442\u0430\u043d\u044c\u043a\u0430\"", ")", "[", "0", "]", "\n", "\n", "# Init tags should be handled correctly", "\n", "assert", "'Init'", "in", "morph", ".", "tag", "(", "\"\u0426\"", ")", "[", "0", "]", "\n", "assert", "'Init'", "not", "in", "morph", ".", "tag", "(", "\"\u0446\"", ")", "[", "0", "]", "\n", "\n", "# normalization tests", "\n", "assert", "morph", ".", "normal_forms", "(", "'\u0430\u0431\u0441\u0443\u0440\u0434\u043d\u0435\u0435'", ")", "==", "[", "'\u0430\u0431\u0441\u0443\u0440\u0434\u043d\u044b\u0439'", "]", "\n", "assert", "morph", ".", "normal_forms", "(", "'\u0430'", ")", "==", "[", "'\u0430'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_opencorpora_dict.TestToParadigm.test_simple": [[84, 94], ["pymorphy2.opencorpora_dict.compile._to_paradigm"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._to_paradigm"], ["    ", "def", "test_simple", "(", "self", ")", ":", "\n", "        ", "lexeme", "=", "[", "\n", "[", "\"\u044f\u0440\u0447\u0435\"", ",", "\"COMP,Qual\"", "]", ",", "\n", "[", "\"\u044f\u0440\u0447\u0435\u0439\"", ",", "\"COMP,Qual V-ej\"", "]", ",", "\n", "]", "\n", "stem", ",", "forms", "=", "_to_paradigm", "(", "lexeme", ",", "lang", ".", "ru", ".", "PARADIGM_PREFIXES", ")", "\n", "assert", "stem", "==", "\"\u044f\u0440\u0447\u0435\"", "\n", "assert", "forms", "==", "(", "\n", "(", "\"\"", ",", "\"COMP,Qual\"", ",", "\"\"", ")", ",", "\n", "(", "\"\u0439\"", ",", "\"COMP,Qual V-ej\"", ",", "\"\"", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_opencorpora_dict.TestToParadigm.test_single_prefix": [[96, 106], ["pymorphy2.opencorpora_dict.compile._to_paradigm"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._to_paradigm"], ["", "def", "test_single_prefix", "(", "self", ")", ":", "\n", "        ", "lexeme", "=", "[", "\n", "[", "\"\u044f\u0440\u0447\u0435\"", ",", "\"COMP,Qual\"", "]", ",", "\n", "[", "\"\u043f\u043e\u044f\u0440\u0447\u0435\"", ",", "\"COMP,Qual Cmp2\"", "]", ",", "\n", "]", "\n", "stem", ",", "forms", "=", "_to_paradigm", "(", "lexeme", ",", "lang", ".", "ru", ".", "PARADIGM_PREFIXES", ")", "\n", "assert", "stem", "==", "\"\u044f\u0440\u0447\u0435\"", "\n", "assert", "forms", "==", "(", "\n", "(", "\"\"", ",", "\"COMP,Qual\"", ",", "\"\"", ")", ",", "\n", "(", "\"\"", ",", "\"COMP,Qual Cmp2\"", ",", "\"\u043f\u043e\"", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_opencorpora_dict.TestToParadigm.test_multiple_prefixes": [[108, 118], ["pymorphy2.opencorpora_dict.compile._to_paradigm"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._to_paradigm"], ["", "def", "test_multiple_prefixes", "(", "self", ")", ":", "\n", "        ", "lexeme", "=", "[", "\n", "[", "\"\u044f\u0440\u0447\u0435\"", ",", "\"COMP,Qual\"", "]", ",", "\n", "[", "\"\u044f\u0440\u0447\u0435\u0439\"", ",", "\"COMP,Qual V-ej\"", "]", ",", "\n", "[", "\"\u043f\u043e\u044f\u0440\u0447\u0435\"", ",", "\"COMP,Qual Cmp2\"", "]", ",", "\n", "[", "\"\u043f\u043e\u044f\u0440\u0447\u0435\u0439\"", ",", "\"COMP,Qual Cmp2,V-ej\"", "]", ",", "\n", "[", "\"\u043d\u0430\u0438\u044f\u0440\u0447\u0430\u0439\u0448\u0438\u0439\"", ",", "\"ADJF,Supr,Qual masc,sing,nomn\"", "]", ",", "\n", "]", "\n", "stem", ",", "forms", "=", "_to_paradigm", "(", "lexeme", ",", "lang", ".", "ru", ".", "PARADIGM_PREFIXES", ")", "\n", "assert", "stem", "==", "'\u044f\u0440\u0447'", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_opencorpora_dict.TestToParadigm.test_multiple_prefixes_2": [[119, 131], ["pymorphy2.opencorpora_dict.compile._to_paradigm"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._to_paradigm"], ["", "def", "test_multiple_prefixes_2", "(", "self", ")", ":", "\n", "        ", "lexeme", "=", "[", "\n", "[", "\"\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0439\u0448\u0438\u0439\"", ",", "1", "]", ",", "\n", "[", "\"\u043d\u0430\u0438\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0439\u0448\u0438\u0439\"", ",", "2", "]", ",", "\n", "[", "\"\u043f\u043e\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435\"", ",", "3", "]", "\n", "]", "\n", "stem", ",", "forms", "=", "_to_paradigm", "(", "lexeme", ",", "lang", ".", "ru", ".", "PARADIGM_PREFIXES", ")", "\n", "assert", "stem", "==", "'\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435'", "\n", "assert", "forms", "==", "(", "\n", "(", "\"\u0439\u0448\u0438\u0439\"", ",", "1", ",", "\"\"", ")", ",", "\n", "(", "\"\u0439\u0448\u0438\u0439\"", ",", "2", ",", "\"\u043d\u0430\u0438\"", ")", ",", "\n", "(", "\"\u0435\"", ",", "3", ",", "\"\u043f\u043e\"", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_opencorpora_dict.TestToParadigm.test_platina": [[133, 148], ["pymorphy2.opencorpora_dict.compile._to_paradigm"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._to_paradigm"], ["", "def", "test_platina", "(", "self", ")", ":", "\n", "        ", "lexeme", "=", "[", "\n", "[", "\"\u043f\u043b\u0430\u0442\u0438\u043d\u043e\u0432\u0435\u0435\"", ",", "1", "]", ",", "\n", "[", "\"\u043f\u043b\u0430\u0442\u0438\u043d\u043e\u0432\u0435\u0439\"", ",", "2", "]", ",", "\n", "[", "\"\u043f\u043e\u043f\u043b\u0430\u0442\u0438\u043d\u043e\u0432\u0435\u0435\"", ",", "3", "]", ",", "\n", "[", "\"\u043f\u043e\u043f\u043b\u0430\u0442\u0438\u043d\u043e\u0432\u0435\u0439\"", ",", "4", "]", ",", "\n", "]", "\n", "stem", ",", "forms", "=", "_to_paradigm", "(", "lexeme", ",", "lang", ".", "ru", ".", "PARADIGM_PREFIXES", ")", "\n", "assert", "forms", "==", "(", "\n", "(", "\"\u0435\"", ",", "1", ",", "\"\"", ")", ",", "\n", "(", "\"\u0439\"", ",", "2", ",", "\"\"", ")", ",", "\n", "(", "\"\u0435\"", ",", "3", ",", "\"\u043f\u043e\"", ")", ",", "\n", "(", "\"\u0439\"", ",", "4", ",", "\"\u043f\u043e\"", ")", ",", "\n", ")", "\n", "assert", "stem", "==", "'\u043f\u043b\u0430\u0442\u0438\u043d\u043e\u0432\u0435'", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_opencorpora_dict.TestToParadigm.test_no_prefix": [[149, 156], ["pymorphy2.opencorpora_dict.compile._to_paradigm"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._to_paradigm"], ["", "def", "test_no_prefix", "(", "self", ")", ":", "\n", "        ", "lexeme", "=", "[", "[", "\"\u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u0439\"", ",", "1", "]", ",", "[", "\"\u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e\"", ",", "2", "]", "]", "\n", "stem", ",", "forms", "=", "_to_paradigm", "(", "lexeme", ",", "lang", ".", "ru", ".", "PARADIGM_PREFIXES", ")", "\n", "assert", "stem", "==", "'\u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a'", "\n", "assert", "forms", "==", "(", "\n", "(", "\"\u0438\u0439\"", ",", "1", ",", "\"\"", ")", ",", "\n", "(", "\"\u043e\u0433\u043e\"", ",", "2", ",", "\"\"", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_opencorpora_dict.TestToParadigm.test_single": [[158, 163], ["pymorphy2.opencorpora_dict.compile._to_paradigm"], "methods", ["home.repos.pwc.inspect_result.kmike_pymorphy2.opencorpora_dict.compile._to_paradigm"], ["", "def", "test_single", "(", "self", ")", ":", "\n", "        ", "lexeme", "=", "[", "[", "\"\u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\"", ",", "1", "]", "]", "\n", "stem", ",", "forms", "=", "_to_paradigm", "(", "lexeme", ",", "lang", ".", "ru", ".", "PARADIGM_PREFIXES", ")", "\n", "assert", "stem", "==", "'\u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438'", "\n", "assert", "forms", "==", "(", "(", "\"\"", ",", "1", ",", "\"\"", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_parsing._to_test_data": [[10, 17], ["l.split", "text.splitlines", "l.strip", "l.startswith"], "function", ["None"], ["def", "_to_test_data", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    Lines should be of this format: <word> <normal_form> <tag>.\n    Lines that starts with \"#\" and blank lines are skipped.\n    \"\"\"", "\n", "return", "[", "l", ".", "split", "(", "None", ",", "2", ")", "for", "l", "in", "text", ".", "splitlines", "(", ")", "\n", "if", "l", ".", "strip", "(", ")", "and", "not", "l", ".", "startswith", "(", "\"#\"", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_parsing.run_for_all": [[151, 153], ["pytest.mark.parametrize"], "function", ["None"], ["def", "run_for_all", "(", "parses", ")", ":", "\n", "    ", "return", "pytest", ".", "mark", ".", "parametrize", "(", "(", "\"word\"", ",", "\"normal_form\"", ",", "\"tag\"", ")", ",", "parses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_parsing._test_has_parse": [[156, 163], ["test_parsing.run_for_all", "morph.parse", "utils.assert_parse_is_correct"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_parsing.run_for_all", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.utils.assert_parse_is_correct"], ["", "def", "_test_has_parse", "(", "parses", ")", ":", "\n", "    ", "@", "run_for_all", "(", "parses", ")", "\n", "def", "test_case", "(", "word", ",", "normal_form", ",", "tag", ",", "morph", ")", ":", "\n", "        ", "parse", "=", "morph", ".", "parse", "(", "word", ")", "\n", "assert_parse_is_correct", "(", "parse", ",", "word", ",", "normal_form", ",", "tag", ")", "\n", "\n", "", "return", "test_case", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_parsing._test_tag": [[171, 180], ["test_parsing.run_for_all", "set", "set", "morph.tag", "morph.parse"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_parsing.run_for_all", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["def", "_test_tag", "(", "parses", ")", ":", "\n", "    ", "@", "run_for_all", "(", "parses", ")", "\n", "def", "test_tag_produces_the_same_as_parse", "(", "word", ",", "normal_form", ",", "tag", ",", "morph", ")", ":", "\n", "        ", "\"\"\"\n        Check if morph.tag produces the same results as morph.parse.\n        \"\"\"", "\n", "assert", "set", "(", "morph", ".", "tag", "(", "word", ")", ")", "==", "set", "(", "p", ".", "tag", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", ")", "\n", "\n", "", "return", "test_tag_produces_the_same_as_parse", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_lexemes.parse_lexemes": [[10, 16], ["lexemes_txt.split", "lexemes_txt.strip().splitlines", "line.startswith", "lexemes_txt.strip"], "function", ["None"], ["def", "parse_lexemes", "(", "lexemes_txt", ")", ":", "\n", "    ", "lexemes_txt", "=", "\"\"", ".", "join", "(", "\n", "line", "for", "line", "in", "lexemes_txt", ".", "strip", "(", ")", ".", "splitlines", "(", "True", ")", "\n", "if", "not", "line", ".", "startswith", "(", "\"#\"", ")", "\n", ")", "\n", "return", "lexemes_txt", ".", "split", "(", "\"\\n\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_lexemes.get_lexeme_words": [[17, 22], ["tuple", "lexeme_words[].startswith", "lexeme.split", "pytest.xfail"], "function", ["None"], ["", "def", "get_lexeme_words", "(", "lexeme", ")", ":", "\n", "    ", "lexeme_words", "=", "tuple", "(", "lexeme", ".", "split", "(", ")", ")", "\n", "if", "lexeme_words", "[", "0", "]", ".", "startswith", "(", "'XFAIL'", ")", ":", "\n", "        ", "pytest", ".", "xfail", "(", ")", "\n", "", "return", "lexeme_words", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_lexemes.parse_full_lexeme": [[24, 27], ["lexeme.strip().splitlines", "form.split", "lexeme.strip"], "function", ["None"], ["", "def", "parse_full_lexeme", "(", "lexeme", ")", ":", "\n", "    ", "forms", "=", "lexeme", ".", "strip", "(", ")", ".", "splitlines", "(", ")", "\n", "return", "[", "form", ".", "split", "(", "None", ",", "1", ")", "for", "form", "in", "forms", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_lexemes.test_has_proper_lexemes": [[179, 190], ["pytest.mark.parametrize", "test_lexemes.get_lexeme_words", "test_lexemes._lexemes_for_word"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_lexemes.get_lexeme_words", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_lexemes._lexemes_for_word"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "\"lexeme\"", ",", "LEXEMES", ")", "\n", "def", "test_has_proper_lexemes", "(", "lexeme", ",", "morph", ")", ":", "\n", "    ", "\"\"\"\n    Check if the lexeme of the first word in the lexeme is the same lexeme.\n    \"\"\"", "\n", "lexeme_words", "=", "get_lexeme_words", "(", "lexeme", ")", "\n", "\n", "variants", "=", "_lexemes_for_word", "(", "lexeme_words", "[", "0", "]", ",", "morph", ")", "\n", "if", "lexeme_words", "not", "in", "variants", ":", "\n", "        ", "variants_repr", "=", "\"\\n\"", ".", "join", "(", "[", "\" \"", ".", "join", "(", "v", ")", "for", "v", "in", "variants", "]", ")", "\n", "assert", "False", ",", "\"%s not in \\n%s\"", "%", "(", "lexeme", ",", "variants_repr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_lexemes.test_lexemes_sanity": [[192, 202], ["pytest.mark.parametrize", "test_lexemes.get_lexeme_words", "morph.parse"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_lexemes.get_lexeme_words", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"lexeme\"", ",", "LEXEMES", ")", "\n", "def", "test_lexemes_sanity", "(", "lexeme", ",", "morph", ")", ":", "\n", "    ", "\"\"\"\n    Check if parse.lexeme works properly by applying it several times.\n    \"\"\"", "\n", "lexeme_words", "=", "get_lexeme_words", "(", "lexeme", ")", "\n", "\n", "for", "word", "in", "lexeme_words", ":", "\n", "        ", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", ":", "\n", "            ", "assert", "p", ".", "lexeme", "[", "0", "]", ".", "lexeme", "==", "p", ".", "lexeme", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_lexemes.test_normalized_is_first": [[204, 218], ["pytest.mark.parametrize", "test_lexemes.get_lexeme_words", "morph.parse", "morph.parse"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_lexemes.get_lexeme_words", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"lexeme\"", ",", "LEXEMES", ")", "\n", "def", "test_normalized_is_first", "(", "lexeme", ",", "morph", ")", ":", "\n", "    ", "\"\"\"\n    Test that parse.normalized is a first form in lexeme.\n    \"\"\"", "\n", "lexeme_words", "=", "get_lexeme_words", "(", "lexeme", ")", "\n", "\n", "first_parse", "=", "morph", ".", "parse", "(", "lexeme_words", "[", "0", "]", ")", "[", "0", "]", "\n", "normal_form", "=", "(", "first_parse", ".", "word", ",", "first_parse", ".", "tag", ".", "POS", ")", "\n", "\n", "for", "word", "in", "lexeme_words", ":", "\n", "        ", "parses", "=", "morph", ".", "parse", "(", "word", ")", "\n", "normalized", "=", "[", "(", "p", ".", "normalized", ".", "word", ",", "p", ".", "normalized", ".", "tag", ".", "POS", ")", "for", "p", "in", "parses", "]", "\n", "assert", "normal_form", "in", "normalized", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_lexemes.test_full_lexemes": [[220, 229], ["pytest.mark.parametrize", "test_lexemes.parse_full_lexeme", "test_lexemes.assert_has_full_lexeme", "w.lower"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_lexemes.parse_full_lexeme", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_lexemes.assert_has_full_lexeme"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "\"lexeme\"", ",", "LEXEMES_FULL", ")", "\n", "def", "test_full_lexemes", "(", "lexeme", ",", "morph", ")", ":", "\n", "    ", "\"\"\"\n    Test that full lexemes are correct.\n    \"\"\"", "\n", "forms", "=", "parse_full_lexeme", "(", "lexeme", ")", "\n", "forms_lower", "=", "[", "(", "w", ".", "lower", "(", ")", ",", "tag", ")", "for", "w", ",", "tag", "in", "forms", "]", "\n", "for", "word", ",", "tag", "in", "forms", ":", "\n", "        ", "assert_has_full_lexeme", "(", "word", ",", "forms_lower", ",", "morph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_lexemes.assert_has_full_lexeme": [[231, 237], ["morph.parse", "AssertionError", "str"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "", "def", "assert_has_full_lexeme", "(", "word", ",", "forms", ",", "morph", ")", ":", "\n", "    ", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", ":", "\n", "        ", "lexeme_forms", "=", "[", "(", "f", ".", "word", ",", "str", "(", "f", ".", "tag", ")", ")", "for", "f", "in", "p", ".", "lexeme", "]", "\n", "if", "lexeme_forms", "==", "forms", ":", "\n", "            ", "return", "\n", "", "", "raise", "AssertionError", "(", "\"Word %s doesn't have lexeme %s\"", "%", "(", "word", ",", "forms", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_lexemes._lexemes_for_word": [[239, 244], ["morph.parse", "res.append", "tuple"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "def", "_lexemes_for_word", "(", "word", ",", "morph", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", ":", "\n", "        ", "res", ".", "append", "(", "tuple", "(", "f", ".", "word", "for", "f", "in", "p", ".", "lexeme", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_numeral_agreement.test_plural_forms": [[6, 31], ["pytest.mark.parametrize", "morph.parse", "len", "zip", "parsed[].make_agree_with_number"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.Parse.make_agree_with_number"], ["@", "pytest", ".", "mark", ".", "parametrize", "(", "(", "'word'", ",", "'result'", ")", ",", "[", "\n", "# \u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435", "\n", "(", "\"\u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u0430\u044f\"", ",", "[", "\"\u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u0430\u044f\"", ",", "\"\u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0435\"", ",", "\"\u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0445\"", "]", ")", ",", "\n", "(", "\"\u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0439\"", ",", "[", "\"\u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0439\"", ",", "\"\u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0445\"", ",", "\"\u0431\u0435\u0441\u043f\u043b\u0430\u0442\u043d\u044b\u0445\"", "]", ")", ",", "\n", "\n", "# \u0447\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435", "\n", "(", "\"\u043f\u0435\u0440\u0432\u044b\u0439\"", ",", "[", "\"\u043f\u0435\u0440\u0432\u044b\u0439\"", ",", "\"\u043f\u0435\u0440\u0432\u044b\u0445\"", ",", "\"\u043f\u0435\u0440\u0432\u044b\u0445\"", "]", ")", ",", "\n", "(", "\"\u043f\u0435\u0440\u0432\u0430\u044f\"", ",", "[", "\"\u043f\u0435\u0440\u0432\u0430\u044f\"", ",", "\"\u043f\u0435\u0440\u0432\u044b\u0435\"", ",", "\"\u043f\u0435\u0440\u0432\u044b\u0445\"", "]", ")", ",", "\n", "\n", "# \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435", "\n", "(", "\"\u043a\u043d\u0438\u0433\u0430\"", ",", "[", "\"\u043a\u043d\u0438\u0433\u0430\"", ",", "\"\u043a\u043d\u0438\u0433\u0438\"", ",", "\"\u043a\u043d\u0438\u0433\"", "]", ")", ",", "\n", "(", "\"\u0431\u043e\u043b\u0442\"", ",", "[", "\"\u0431\u043e\u043b\u0442\"", ",", "\"\u0431\u043e\u043b\u0442\u0430\"", ",", "\"\u0431\u043e\u043b\u0442\u043e\u0432\"", "]", ")", ",", "\n", "\n", "# \u043f\u0440\u0438\u0447\u0430\u0441\u0442\u0438\u044f", "\n", "(", "\"\u043b\u0435\u0442\u044f\u0449\u0438\u0439\"", ",", "[", "\"\u043b\u0435\u0442\u044f\u0449\u0438\u0439\"", ",", "\"\u043b\u0435\u0442\u044f\u0449\u0438\u0445\"", ",", "\"\u043b\u0435\u0442\u044f\u0449\u0438\u0445\"", "]", ")", ",", "\n", "(", "\"\u043b\u0435\u0442\u044f\u0449\u0430\u044f\"", ",", "[", "\"\u043b\u0435\u0442\u044f\u0449\u0430\u044f\"", ",", "\"\u043b\u0435\u0442\u044f\u0449\u0438\u0435\"", ",", "\"\u043b\u0435\u0442\u044f\u0449\u0438\u0445\"", "]", ")", ",", "\n", "\n", "# \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0430\u0441\u0442\u0438 \u0440\u0435\u0447\u0438 \u043c\u044b \u043d\u0438\u043a\u0430\u043a \u043d\u0435 \u0441\u043e\u0433\u043b\u0430\u0441\u043e\u0432\u044b\u0432\u0430\u0435\u043c \u0441 \u0447\u0438\u0441\u043b\u0430\u043c\u0438", "\n", "(", "\"\u0438\u0433\u0440\u0430\u0435\u0442\"", ",", "[", "\"\u0438\u0433\u0440\u0430\u0435\u0442\"", ",", "\"\u0438\u0433\u0440\u0430\u0435\u0442\"", ",", "\"\u0438\u0433\u0440\u0430\u0435\u0442\"", "]", ")", "\n", "]", ")", "\n", "def", "test_plural_forms", "(", "word", ",", "result", ",", "morph", ")", ":", "\n", "    ", "parsed", "=", "morph", ".", "parse", "(", "word", ")", "\n", "assert", "len", "(", "parsed", ")", "\n", "for", "plural", ",", "num", "in", "zip", "(", "result", ",", "[", "1", ",", "2", ",", "5", "]", ")", ":", "\n", "        ", "assert", "parsed", "[", "0", "]", ".", "make_agree_with_number", "(", "num", ")", ".", "word", "==", "plural", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_numeral_agreement.test_plural_inflected": [[33, 49], ["pytest.mark.parametrize", "len", "zip", "morph.parse", "parsed[].make_agree_with_number"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.Parse.make_agree_with_number"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "(", "'word'", ",", "'case'", ",", "'result'", ")", ",", "[", "\n", "(", "\"\u043a\u043d\u0438\u0433\u0438\"", ",", "'gent'", ",", "[", "\"\u043a\u043d\u0438\u0433\u0438\"", ",", "\"\u043a\u043d\u0438\u0433\"", ",", "\"\u043a\u043d\u0438\u0433\"", "]", ")", ",", "\n", "(", "\"\u043a\u043d\u0438\u0433\u0435\"", ",", "'datv'", ",", "[", "\"\u043a\u043d\u0438\u0433\u0435\"", ",", "\"\u043a\u043d\u0438\u0433\u0430\u043c\"", ",", "\"\u043a\u043d\u0438\u0433\u0430\u043c\"", "]", ")", ",", "\n", "(", "\"\u043a\u043d\u0438\u0433\u0443\"", ",", "'accs'", ",", "[", "\"\u043a\u043d\u0438\u0433\u0443\"", ",", "\"\u043a\u043d\u0438\u0433\u0438\"", ",", "\"\u043a\u043d\u0438\u0433\"", "]", ")", ",", "\n", "(", "\"\u043a\u043d\u0438\u0433\u043e\u0439\"", ",", "'ablt'", ",", "[", "\"\u043a\u043d\u0438\u0433\u043e\u0439\"", ",", "\"\u043a\u043d\u0438\u0433\u0430\u043c\u0438\"", ",", "\"\u043a\u043d\u0438\u0433\u0430\u043c\u0438\"", "]", ")", ",", "\n", "(", "\"\u043a\u043d\u0438\u0433\u0435\"", ",", "'loct'", ",", "[", "\"\u043a\u043d\u0438\u0433\u0435\"", ",", "\"\u043a\u043d\u0438\u0433\u0430\u0445\"", ",", "\"\u043a\u043d\u0438\u0433\u0430\u0445\"", "]", ")", ",", "\n", "\n", "(", "\"\u0447\u0430\u0441\"", ",", "\"accs\"", ",", "[", "\"\u0447\u0430\u0441\"", ",", "\"\u0447\u0430\u0441\u0430\"", ",", "\"\u0447\u0430\u0441\u043e\u0432\"", "]", ")", ",", "# see https://github.com/kmike/pymorphy2/issues/32", "\n", "(", "\"\u0434\u0435\u043d\u044c\"", ",", "\"accs\"", ",", "[", "\"\u0434\u0435\u043d\u044c\"", ",", "\"\u0434\u043d\u044f\"", ",", "\"\u0434\u043d\u0435\u0439\"", "]", ")", ",", "\n", "(", "\"\u043c\u0438\u043d\u0443\u0442\u0443\"", ",", "\"accs\"", ",", "[", "\"\u043c\u0438\u043d\u0443\u0442\u0443\"", ",", "\"\u043c\u0438\u043d\u0443\u0442\u044b\"", ",", "\"\u043c\u0438\u043d\u0443\u0442\"", "]", ")", ",", "\n", "]", ")", "\n", "def", "test_plural_inflected", "(", "word", ",", "case", ",", "result", ",", "morph", ")", ":", "\n", "    ", "parsed", "=", "[", "p", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", "if", "p", ".", "tag", ".", "case", "==", "case", "]", "\n", "assert", "len", "(", "parsed", ")", "\n", "for", "plural", ",", "num", "in", "zip", "(", "result", ",", "[", "1", ",", "2", ",", "5", "]", ")", ":", "\n", "        ", "assert", "parsed", "[", "0", "]", ".", "make_agree_with_number", "(", "num", ")", ".", "word", "==", "plural", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_numeral_agreement.test_plural_num": [[51, 80], ["pytest.mark.parametrize", "morph.parse", "len", "parsed[].make_agree_with_number"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.Parse.make_agree_with_number"], ["", "", "@", "pytest", ".", "mark", ".", "parametrize", "(", "(", "'word'", ",", "'num'", ",", "'result'", ")", ",", "[", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "0", ",", "\"\u043b\u043e\u043f\u0430\u0442\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "1", ",", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "2", ",", "\"\u043b\u043e\u043f\u0430\u0442\u044b\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "4", ",", "\"\u043b\u043e\u043f\u0430\u0442\u044b\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "5", ",", "\"\u043b\u043e\u043f\u0430\u0442\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "6", ",", "\"\u043b\u043e\u043f\u0430\u0442\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "11", ",", "\"\u043b\u043e\u043f\u0430\u0442\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "12", ",", "\"\u043b\u043e\u043f\u0430\u0442\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "15", ",", "\"\u043b\u043e\u043f\u0430\u0442\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "21", ",", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "24", ",", "\"\u043b\u043e\u043f\u0430\u0442\u044b\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "25", ",", "\"\u043b\u043e\u043f\u0430\u0442\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "101", ",", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "103", ",", "\"\u043b\u043e\u043f\u0430\u0442\u044b\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "105", ",", "\"\u043b\u043e\u043f\u0430\u0442\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "111", ",", "\"\u043b\u043e\u043f\u0430\u0442\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "112", ",", "\"\u043b\u043e\u043f\u0430\u0442\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "151", ",", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "122", ",", "\"\u043b\u043e\u043f\u0430\u0442\u044b\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "5624", ",", "\"\u043b\u043e\u043f\u0430\u0442\u044b\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "5431", ",", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "7613", ",", "\"\u043b\u043e\u043f\u0430\u0442\"", ")", ",", "\n", "(", "\"\u043b\u043e\u043f\u0430\u0442\u0430\"", ",", "2111", ",", "\"\u043b\u043e\u043f\u0430\u0442\"", ")", ",", "\n", "]", ")", "\n", "def", "test_plural_num", "(", "word", ",", "num", ",", "result", ",", "morph", ")", ":", "\n", "    ", "parsed", "=", "morph", ".", "parse", "(", "word", ")", "\n", "assert", "len", "(", "parsed", ")", "\n", "assert", "parsed", "[", "0", "]", ".", "make_agree_with_number", "(", "num", ")", ".", "word", "==", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_utils.test_get_mem_usage": [[8, 12], ["pytest.importorskip", "pymorphy2.utils.get_mem_usage"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.utils.get_mem_usage"], ["def", "test_get_mem_usage", "(", ")", ":", "\n", "    ", "pytest", ".", "importorskip", "(", "\"psutil\"", ")", "\n", "rss", "=", "get_mem_usage", "(", ")", "\n", "assert", "1000000", "<", "rss", "<", "1000000000", "# 1MB to 1GB", "\n", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_threading._check_analyzer": [[12, 16], ["morph.parse", "utils.assert_parse_is_correct"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.utils.assert_parse_is_correct"], ["def", "_check_analyzer", "(", "morph", ",", "parses", ")", ":", "\n", "    ", "for", "word", ",", "normal_form", ",", "tag", "in", "parses", ":", "\n", "        ", "parse", "=", "morph", ".", "parse", "(", "word", ")", "\n", "assert_parse_is_correct", "(", "parse", ",", "word", ",", "normal_form", ",", "tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_threading._check_new_analyzer": [[18, 23], ["pymorphy2.MorphAnalyzer", "pymorphy2.MorphAnalyzer.parse", "utils.assert_parse_is_correct"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.utils.assert_parse_is_correct"], ["", "", "def", "_check_new_analyzer", "(", "parses", ")", ":", "\n", "    ", "morph", "=", "pymorphy2", ".", "MorphAnalyzer", "(", ")", "\n", "for", "word", ",", "normal_form", ",", "tag", "in", "parses", ":", "\n", "        ", "parse", "=", "morph", ".", "parse", "(", "word", ")", "\n", "assert_parse_is_correct", "(", "parse", ",", "word", ",", "normal_form", ",", "tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_threading._create_morph_analyzer": [[25, 30], ["pymorphy2.MorphAnalyzer", "random.choice", "pymorphy2.MorphAnalyzer.parse", "utils.assert_parse_is_correct"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.utils.assert_parse_is_correct"], ["", "", "def", "_create_morph_analyzer", "(", "i", ")", ":", "\n", "    ", "morph", "=", "pymorphy2", ".", "MorphAnalyzer", "(", ")", "\n", "word", ",", "normal_form", ",", "tag", "=", "random", ".", "choice", "(", "PARSES", ")", "\n", "parse", "=", "morph", ".", "parse", "(", "word", ")", "\n", "assert_parse_is_correct", "(", "parse", ",", "word", ",", "normal_form", ",", "tag", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_threading.test_threading_single_morph_analyzer": [[32, 35], ["concurrent.futures.ThreadPoolExecutor", "list", "executor.map"], "function", ["None"], ["", "def", "test_threading_single_morph_analyzer", "(", "morph", ")", ":", "\n", "    ", "with", "concurrent", ".", "futures", ".", "ThreadPoolExecutor", "(", "3", ")", "as", "executor", ":", "\n", "        ", "res", "=", "list", "(", "executor", ".", "map", "(", "_check_analyzer", ",", "[", "morph", "]", "*", "10", ",", "[", "PARSES", "]", "*", "10", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_threading.test_threading_multiple_morph_analyzers": [[37, 40], ["concurrent.futures.ThreadPoolExecutor", "list", "executor.map"], "function", ["None"], ["", "", "def", "test_threading_multiple_morph_analyzers", "(", ")", ":", "\n", "    ", "with", "concurrent", ".", "futures", ".", "ThreadPoolExecutor", "(", "3", ")", "as", "executor", ":", "\n", "        ", "res", "=", "list", "(", "executor", ".", "map", "(", "_check_new_analyzer", ",", "[", "PARSES", "]", "*", "10", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_threading.test_threading_create_analyzer": [[42, 45], ["concurrent.futures.ThreadPoolExecutor", "list", "executor.map", "range"], "function", ["None"], ["", "", "def", "test_threading_create_analyzer", "(", ")", ":", "\n", "    ", "with", "concurrent", ".", "futures", ".", "ThreadPoolExecutor", "(", "3", ")", "as", "executor", ":", "\n", "        ", "res", "=", "list", "(", "executor", ".", "map", "(", "_create_morph_analyzer", ",", "range", "(", "10", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_dict_loading.test_old_dictionaries_supported": [[9, 14], ["pytest.importorskip", "pymorphy2.MorphAnalyzer", "pymorphy2.MorphAnalyzer.tag"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag"], ["def", "test_old_dictionaries_supported", "(", ")", ":", "\n", "    ", "pytest", ".", "importorskip", "(", "\"pymorphy2_dicts\"", ")", "\n", "m", "=", "pymorphy2", ".", "MorphAnalyzer", "(", "lang", "=", "'ru-old'", ")", "\n", "assert", "m", ".", "lang", "==", "'ru-old'", "\n", "assert", "m", ".", "tag", "(", "'\u0441\u0442\u0438\u043b\u044c'", ")", "[", "0", "]", ".", "POS", "==", "'NOUN'", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_dict_loading.test_old_dictionaries_not_installed": [[16, 25], ["pytest.skip", "pytest.raises", "pymorphy2.MorphAnalyzer"], "function", ["None"], ["", "def", "test_old_dictionaries_not_installed", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import", "pymorphy2_dicts", "\n", "pytest", ".", "skip", "(", "\"pymorphy2_dicts package is installed\"", ")", "\n", "", "except", "ImportError", ":", "\n", "        ", "pass", "\n", "\n", "", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "pymorphy2", ".", "MorphAnalyzer", "(", "lang", "=", "'ru-old'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_dict_loading.test_old_dictionaries_supported_by_path": [[27, 32], ["pytest.importorskip", "pymorphy2.MorphAnalyzer", "pytest.importorskip.get_path", "pymorphy2.MorphAnalyzer.tag"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.tag"], ["", "", "def", "test_old_dictionaries_supported_by_path", "(", ")", ":", "\n", "    ", "pymorphy2_dicts", "=", "pytest", ".", "importorskip", "(", "\"pymorphy2_dicts\"", ")", "\n", "m", "=", "pymorphy2", ".", "MorphAnalyzer", "(", "pymorphy2_dicts", ".", "get_path", "(", ")", ")", "\n", "assert", "m", ".", "lang", "==", "'ru'", "\n", "assert", "m", ".", "tag", "(", "'\u0441\u0442\u0438\u043b\u044c'", ")", "[", "0", "]", ".", "POS", "==", "'NOUN'", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_dict_loading.test_morph_analyzer_bad_path": [[34, 37], ["pytest.raises", "pymorphy2.MorphAnalyzer"], "function", ["None"], ["", "def", "test_morph_analyzer_bad_path", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "IOError", ")", ":", "\n", "        ", "pymorphy2", ".", "MorphAnalyzer", "(", "\"/sdfgsd/gdsfgsdfg/dfgdsfg/dsfgsdfg/as\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_dict_loading.test_language_from_dict": [[39, 43], ["pymorphy2.analyzer.lang_dict_path", "pymorphy2.MorphAnalyzer"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.lang_dict_path"], ["", "", "def", "test_language_from_dict", "(", ")", ":", "\n", "    ", "ru_path", "=", "lang_dict_path", "(", "'ru'", ")", "\n", "m", "=", "pymorphy2", ".", "MorphAnalyzer", "(", "path", "=", "ru_path", ")", "\n", "assert", "m", ".", "lang", "==", "'ru'", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_dict_loading.test_bad_language": [[45, 48], ["pytest.raises", "pymorphy2.MorphAnalyzer"], "function", ["None"], ["", "def", "test_bad_language", "(", ")", ":", "\n", "    ", "with", "pytest", ".", "raises", "(", "ValueError", ")", ":", "\n", "        ", "pymorphy2", ".", "MorphAnalyzer", "(", "lang", "=", "'something-unsupported'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_dict_loading.test_nonmatching_language": [[50, 55], ["pymorphy2.analyzer.lang_dict_path", "pymorphy2.MorphAnalyzer", "pymorphy2.MorphAnalyzer.parse"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.lang_dict_path", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "", "def", "test_nonmatching_language", "(", ")", ":", "\n", "    ", "ru_path", "=", "lang_dict_path", "(", "'ru'", ")", "\n", "m", "=", "pymorphy2", ".", "MorphAnalyzer", "(", "path", "=", "ru_path", ",", "lang", "=", "'uk'", ")", "\n", "assert", "'Init'", "in", "m", ".", "parse", "(", "'\u0407'", ")", "[", "0", "]", ".", "tag", "\n", "assert", "m", ".", "lang", "==", "'uk'", "\n", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.with_test_data": [[8, 12], ["pytest.mark.parametrize"], "function", ["None"], ["def", "with_test_data", "(", "data", ")", ":", "\n", "    ", "return", "pytest", ".", "mark", ".", "parametrize", "(", "\n", "(", "\"word\"", ",", "\"grammemes\"", ",", "\"result\"", ")", ",", "\n", "data", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.assert_first_inflected_variant": [[15, 23], ["len", "p.inflect", "pymorphy2.shapes.restore_capitalization", "set", "morph.parse"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.analyzer.Parse.inflect", "home.repos.pwc.inspect_result.kmike_pymorphy2.pymorphy2.shapes.restore_capitalization", "home.repos.pwc.inspect_result.kmike_pymorphy2.units.by_analogy.KnownSuffixAnalyzer.parse"], ["", "def", "assert_first_inflected_variant", "(", "word", ",", "grammemes", ",", "result", ",", "morph", ")", ":", "\n", "    ", "inflected_variants", "=", "[", "p", ".", "inflect", "(", "set", "(", "grammemes", ")", ")", "for", "p", "in", "morph", ".", "parse", "(", "word", ")", "]", "\n", "inflected_variants", "=", "[", "v", "for", "v", "in", "inflected_variants", "if", "v", "]", "\n", "# inflected_variants = morph.inflect(word, grammemes)", "\n", "assert", "len", "(", "inflected_variants", ")", "\n", "\n", "inflected", "=", "inflected_variants", "[", "0", "]", "\n", "assert", "restore_capitalization", "(", "inflected", ".", "word", ",", "word", ")", "==", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.test_first_inflected_value": [[25, 68], ["test_inflection.with_test_data", "test_inflection.assert_first_inflected_variant"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.with_test_data", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.assert_first_inflected_variant"], ["", "@", "with_test_data", "(", "[", "\n", "# \u0441\u0443\u0441\u043b\u0438\u043a\u0438 \u0438 \u0431\u0443\u0442\u044f\u0432\u043a\u0438", "\n", "(", "\"\u0441\u0443\u0441\u043b\u0438\u043a\"", ",", "[", "\"datv\"", "]", ",", "\"\u0441\u0443\u0441\u043b\u0438\u043a\u0443\"", ")", ",", "\n", "(", "\"\u0441\u0443\u0441\u043b\u0438\u043a\u0438\"", ",", "[", "\"datv\"", "]", ",", "\"\u0441\u0443\u0441\u043b\u0438\u043a\u0430\u043c\"", ")", ",", "\n", "(", "\"\u0441\u0443\u0441\u043b\u0438\u043a\u043e\u0432\"", ",", "[", "\"datv\"", "]", ",", "\"\u0441\u0443\u0441\u043b\u0438\u043a\u0430\u043c\"", ")", ",", "\n", "(", "\"\u0441\u0443\u0441\u043b\u0438\u043a\u0430\"", ",", "[", "\"datv\"", "]", ",", "\"\u0441\u0443\u0441\u043b\u0438\u043a\u0443\"", ")", ",", "\n", "(", "\"\u0441\u0443\u0441\u043b\u0438\u043a\"", ",", "[", "\"datv\"", ",", "\"plur\"", "]", ",", "\"\u0441\u0443\u0441\u043b\u0438\u043a\u0430\u043c\"", ")", ",", "\n", "\n", "(", "\"\u0431\u0443\u0442\u044f\u0432\u043a\u0430\"", ",", "[", "\"datv\"", "]", ",", "\"\u0431\u0443\u0442\u044f\u0432\u043a\u0435\"", ")", ",", "\n", "(", "\"\u0431\u0443\u0442\u044f\u0432\u043e\u043a\"", ",", "[", "\"datv\"", "]", ",", "\"\u0431\u0443\u0442\u044f\u0432\u043a\u0430\u043c\"", ")", ",", "\n", "\n", "# \u0433\u043b\u0430\u0433\u043e\u043b\u044b, \u043f\u0440\u0438\u0447\u0430\u0441\u0442\u0438\u044f, \u0434\u0435\u0435\u043f\u0440\u0438\u0447\u0430\u0441\u0442\u0438\u044f", "\n", "(", "\"\u0433\u0443\u043b\u044f\u044e\"", ",", "[", "\"past\"", "]", ",", "\"\u0433\u0443\u043b\u044f\u043b\"", ")", ",", "\n", "(", "\"\u0433\u0443\u043b\u044f\u043b\"", ",", "[", "\"pres\"", "]", ",", "\"\u0433\u0443\u043b\u044f\u044e\"", ")", ",", "\n", "(", "\"\u0433\u0443\u043b\u044f\u043b\"", ",", "[", "\"INFN\"", "]", ",", "\"\u0433\u0443\u043b\u044f\u0442\u044c\"", ")", ",", "\n", "(", "\"\u0433\u0443\u043b\u044f\u043b\"", ",", "[", "\"GRND\"", "]", ",", "\"\u0433\u0443\u043b\u044f\u0432\"", ")", ",", "\n", "(", "\"\u0433\u0443\u043b\u044f\u043b\"", ",", "[", "\"PRTF\"", "]", ",", "\"\u0433\u0443\u043b\u044f\u0432\u0448\u0438\u0439\"", ")", ",", "\n", "(", "\"\u0433\u0443\u043b\u044f\u043b\u0430\"", ",", "[", "\"PRTF\"", "]", ",", "\"\u0433\u0443\u043b\u044f\u0432\u0448\u0430\u044f\"", ")", ",", "\n", "(", "\"\u0433\u0443\u043b\u044f\u044e\"", ",", "[", "\"PRTF\"", ",", "\"datv\"", "]", ",", "\"\u0433\u0443\u043b\u044f\u044e\u0449\u0435\u043c\u0443\"", ")", ",", "\n", "(", "\"\u0433\u0443\u043b\u044f\u0432\u0448\u0438\u0439\"", ",", "[", "\"VERB\"", "]", ",", "\"\u0433\u0443\u043b\u044f\u043b\"", ")", ",", "\n", "(", "\"\u0433\u0443\u043b\u044f\u0432\u0448\u0438\u0439\"", ",", "[", "\"VERB\"", ",", "\"femn\"", "]", ",", "\"\u0433\u0443\u043b\u044f\u043b\u0430\"", ")", ",", "\n", "(", "\"\u0438\u0434\u0443\"", ",", "[", "\"2per\"", "]", ",", "\"\u0438\u0434\u0451\u0448\u044c\"", ")", ",", "\n", "(", "\"\u0438\u0434\u0443\"", ",", "[", "\"2per\"", ",", "\"plur\"", "]", ",", "\"\u0438\u0434\u0451\u0442\u0435\"", ")", ",", "\n", "(", "\"\u0438\u0434\u0443\"", ",", "[", "\"3per\"", "]", ",", "\"\u0438\u0434\u0451\u0442\"", ")", ",", "\n", "(", "\"\u0438\u0434\u0443\"", ",", "[", "\"3per\"", ",", "\"plur\"", "]", ",", "\"\u0438\u0434\u0443\u0442\"", ")", ",", "\n", "(", "\"\u0438\u0434\u0443\"", ",", "[", "\"impr\"", ",", "\"excl\"", "]", ",", "\"\u0438\u0434\u0438\"", ")", ",", "\n", "\n", "# \u0431\u0430\u0433 \u0438\u0437 pymorphy", "\n", "(", "'\u043a\u0438\u0435\u0432'", ",", "[", "'loct'", "]", ",", "'\u043a\u0438\u0435\u0432\u0435'", ")", ",", "\n", "\n", "# \u043e\u0434\u0443\u0448\u0435\u0432\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\n", "(", "'\u0441\u043b\u0430\u0431\u044b\u0439'", ",", "[", "'accs'", ",", "'inan'", "]", ",", "'\u0441\u043b\u0430\u0431\u044b\u0439'", ")", ",", "\n", "(", "'\u0441\u043b\u0430\u0431\u044b\u0439'", ",", "[", "'accs'", ",", "'anim'", "]", ",", "'\u0441\u043b\u0430\u0431\u043e\u0433\u043e'", ")", ",", "\n", "\n", "# \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u043f\u0440\u0438\u043b\u0430\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445", "\n", "(", "'\u0431\u044b\u0441\u0442\u0440\u044b\u0439'", ",", "[", "'COMP'", "]", ",", "'\u0431\u044b\u0441\u0442\u0440\u0435\u0435'", ")", ",", "\n", "(", "'\u0445\u043e\u0440\u043e\u0448\u0430\u044f'", ",", "[", "'COMP'", "]", ",", "'\u043b\u0443\u0447\u0448\u0435'", ")", ",", "\n", "\n", "# \u0447\u0430\u0441\u0442\u0438\u0446\u044b - \u043d\u0435 \u043e\u0442\u0440\u0435\u0437\u0430\u044e\u0442\u0441\u044f", "\n", "(", "'\u0441\u043a\u0430\u0436\u0438-\u043a\u0430'", ",", "[", "'futr'", "]", ",", "'\u0441\u043a\u0430\u0436\u0443-\u043a\u0430'", ")", ",", "\n", "]", ")", "\n", "def", "test_first_inflected_value", "(", "word", ",", "grammemes", ",", "result", ",", "morph", ")", ":", "\n", "    ", "assert_first_inflected_variant", "(", "word", ",", "grammemes", ",", "result", ",", "morph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.test_orel": [[70, 72], ["test_inflection.assert_first_inflected_variant"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.assert_first_inflected_variant"], ["", "def", "test_orel", "(", "morph", ")", ":", "\n", "    ", "assert_first_inflected_variant", "(", "'\u043e\u0440\u0435\u043b'", ",", "[", "'gent'", "]", ",", "'\u043e\u0440\u043b\u0430'", ",", "morph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.test_second_cases": [[74, 81], ["test_inflection.with_test_data", "test_inflection.assert_first_inflected_variant"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.with_test_data", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.assert_first_inflected_variant"], ["", "@", "with_test_data", "(", "[", "\n", "(", "'\u0441\u043d\u0435\u0433'", ",", "[", "'gent'", "]", ",", "'\u0441\u043d\u0435\u0433\u0430'", ")", ",", "\n", "(", "'\u0441\u043d\u0435\u0433'", ",", "[", "'gen2'", "]", ",", "'\u0441\u043d\u0435\u0433\u0443'", ")", ",", "\n", "(", "'\u0411\u043e\u0440\u044f'", ",", "[", "'voct'", "]", ",", "'\u0411\u043e\u0440\u044c'", ")", ",", "\n", "]", ")", "\n", "def", "test_second_cases", "(", "word", ",", "grammemes", ",", "result", ",", "morph", ")", ":", "\n", "    ", "assert_first_inflected_variant", "(", "word", ",", "grammemes", ",", "result", ",", "morph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.test_case_substitution": [[83, 93], ["test_inflection.with_test_data", "test_inflection.assert_first_inflected_variant"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.with_test_data", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.assert_first_inflected_variant"], ["", "@", "with_test_data", "(", "[", "\n", "(", "'\u0432\u0430\u043b\u0435\u043d\u043e\u043a'", ",", "[", "'gent'", ",", "'sing'", "]", ",", "'\u0432\u0430\u043b\u0435\u043d\u043a\u0430'", ")", ",", "\n", "(", "'\u0432\u0430\u043b\u0435\u043d\u043e\u043a'", ",", "[", "'gen2'", ",", "'sing'", "]", ",", "'\u0432\u0430\u043b\u0435\u043d\u043a\u0430'", ")", ",", "# there is no gen2", "\n", "(", "'\u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434'", ",", "[", "'loct'", "]", ",", "'\u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u0435'", ")", ",", "# \u043e \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u0435", "\n", "(", "'\u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434'", ",", "[", "'loc2'", "]", ",", "'\u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u0435'", ")", ",", "# \u0430 \u0442\u0443\u0442 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u043d\u043e\u0433\u043e \u043d\u0435\u0442, \u0432 \u0432\u0435\u043b\u043e\u0441\u0438\u043f\u0435\u0434\u0435", "\n", "(", "'\u0445\u043e\u043c\u044f\u043a'", ",", "[", "'voct'", "]", ",", "'\u0445\u043e\u043c\u044f\u043a'", ")", ",", "# there is not voct, nomn should be used", "\n", "(", "'\u0413\u0435\u043d\u043d\u0430\u0434\u0438\u0439'", ",", "[", "'voct'", "]", ",", "'\u0413\u0435\u043d\u043d\u0430\u0434\u0438\u0439'", ")", ",", "# there is not voct, nomn should be used", "\n", "]", ")", "\n", "def", "test_case_substitution", "(", "word", ",", "grammemes", ",", "result", ",", "morph", ")", ":", "\n", "    ", "assert_first_inflected_variant", "(", "word", ",", "grammemes", ",", "result", ",", "morph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.test_best_guess": [[95, 104], ["test_inflection.with_test_data", "test_inflection.assert_first_inflected_variant"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.with_test_data", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.assert_first_inflected_variant"], ["", "@", "pytest", ".", "mark", ".", "xfail", "\n", "@", "with_test_data", "(", "[", "\n", "# \u0434\u043e\u043f. \u043f\u0430\u0434\u0435\u0436\u0438, fixme", "\n", "(", "'\u043b\u0435\u0441'", ",", "[", "'loct'", "]", ",", "'\u043b\u0435\u0441\u0435'", ")", ",", "# \u043e \u043b\u0435\u0441\u0435", "\n", "(", "'\u043b\u0435\u0441'", ",", "[", "'loc2'", "]", ",", "'\u043b\u0435\u0441\u0443'", ")", ",", "# \u0432 \u043b\u0435\u0441\u0443", "\n", "(", "'\u043e\u0441\u0442\u0440\u043e\u0432\u0430'", ",", "[", "'datv'", "]", ",", "'\u043e\u0441\u0442\u0440\u043e\u0432\u0430\u043c'", ")", ",", "\n", "]", ")", "\n", "def", "test_best_guess", "(", "word", ",", "grammemes", ",", "result", ",", "morph", ")", ":", "\n", "    ", "assert_first_inflected_variant", "(", "word", ",", "grammemes", ",", "result", ",", "morph", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.test_not_informal": [[106, 112], ["test_inflection.with_test_data", "test_inflection.assert_first_inflected_variant"], "function", ["home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.with_test_data", "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.test_inflection.assert_first_inflected_variant"], ["", "@", "with_test_data", "(", "[", "\n", "(", "'\u0437\u0430\u0441\u043d\u0435\u0436\u0435\u043d\u043d\u044b\u0439'", ",", "[", "'gent'", "]", ",", "'\u0437\u0430\u0441\u043d\u0435\u0436\u0435\u043d\u043d\u043e\u0433\u043e'", ")", ",", "# \u043d\u0435 \"\u0437\u0430\u0441\u043d\u0435\u0436\u0451\u043d\u043d\u043e\u0433\u043e\"", "\n", "(", "'\u0432\u0435\u0434\u0440\u043e'", ",", "[", "'gent'", "]", ",", "'\u0432\u0435\u0434\u0440\u0430'", ")", ",", "# \u043d\u0435 \"\u0432\u0451\u0434\u0440\u0430\"", "\n", "]", ")", "\n", "def", "test_not_informal", "(", "word", ",", "grammemes", ",", "result", ",", "morph", ")", ":", "\n", "    ", "assert_first_inflected_variant", "(", "word", ",", "grammemes", ",", "result", ",", "morph", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.utils.assert_parse_is_correct": [[5, 14], ["str"], "function", ["None"], ["import", "gc", "\n", "\n", "def", "measure", "(", "func", ",", "inner_iterations", "=", "1", ",", "repeats", "=", "5", ")", ":", "\n", "    ", "\"\"\"\n    Runs func ``repeats`` times and returns the fastest speed\n    (inner loop iterations per second). Use ``inner_iterations`` to specify\n    the number of inner loop iterations.\n\n    Use this function for long-running functions.\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.morph": [[5, 9], ["pytest.fixture", "pymorphy2.MorphAnalyzer"], "function", ["None"], ["@", "pytest", ".", "fixture", "(", "scope", "=", "'session'", ")", "\n", "def", "morph", "(", ")", ":", "\n", "    ", "import", "pymorphy2", "\n", "return", "pymorphy2", ".", "MorphAnalyzer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kmike_pymorphy2.tests.conftest.Tag": [[11, 14], ["pytest.fixture"], "function", ["None"], ["", "@", "pytest", ".", "fixture", "(", "scope", "=", "'session'", ")", "\n", "def", "Tag", "(", "morph", ")", ":", "\n", "    ", "return", "morph", ".", "TagClass", "\n", "", ""]]}