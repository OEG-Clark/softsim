{"home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.None.main.main": [[19, 50], ["os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "launch_dialog_box", "launch_analysis_box", "os.listdir", "os.listdir.sort", "utils.launch_code.import_new_db", "os.remove", "read_json", "utils.launch_code.corrupt_db", "read_json", "utils.launch_code.train_net", "read_json", "utils.launch_code.evaluate_net", "read_json"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.GUI1.launch_dialog_box", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.GUI2.launch_analysis_box", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.launch_code.import_new_db", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.launch_code.corrupt_db", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.launch_code.train_net", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.launch_code.evaluate_net", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "data_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "code_path", "+", "'/Todo_list'", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "code_path", "+", "'/Todo_list'", ")", "\n", "\n", "", "if", "args", ".", "gui1", ":", "\n", "        ", "from", "GUI", ".", "GUI1", "import", "launch_dialog_box", "\n", "launch_dialog_box", "(", "all_p", "[", "0", "]", ")", "\n", "", "elif", "args", ".", "gui2", ":", "\n", "        ", "from", "GUI", ".", "GUI2", "import", "launch_analysis_box", "\n", "launch_analysis_box", "(", "all_p", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "        ", "if", "args", ".", "todo", ":", "\n", "            ", "todo_path", "=", "code_path", "+", "'/'", "+", "args", ".", "todo", "\n", "", "else", ":", "\n", "            ", "todo_path", "=", "code_path", "+", "'/Todo_list'", "\n", "\n", "", "lst", "=", "os", ".", "listdir", "(", "todo_path", ")", "\n", "lst", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ")", "\n", "for", "file", "in", "lst", ":", "\n", "            ", "if", "'IMPORT_DB'", "in", "file", ":", "\n", "                ", "import_new_db", "(", "read_json", "(", "todo_path", "+", "'/'", "+", "file", ")", ")", "\n", "", "elif", "'CORRUPT_DB'", "in", "file", ":", "\n", "                ", "corrupt_db", "(", "read_json", "(", "todo_path", "+", "'/'", "+", "file", ")", ",", "all_p", "[", "0", "]", ")", "\n", "", "elif", "'TRAIN_NET'", "in", "file", ":", "\n", "                ", "train_net", "(", "read_json", "(", "todo_path", "+", "'/'", "+", "file", ")", ")", "\n", "", "elif", "'EVAL_NET'", "in", "file", ":", "\n", "                ", "evaluate_net", "(", "read_json", "(", "todo_path", "+", "'/'", "+", "file", ")", ")", "\n", "", "if", "not", "args", ".", "keep", ":", "\n", "                ", "os", ".", "remove", "(", "todo_path", "+", "'/'", "+", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.instantiate_net.instantiate_net": [[7, 24], ["importlib.import_module", "getattr", "getattr.", "datasets.dataset.Dataset", "datasets.dataset.Dataset.load_test", "class_.create_model", "datasets.dataset.Dataset.load_train"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.dataset.Dataset.load_test", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.create_model", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.dataset.Dataset.load_train"], ["def", "instantiate_net", "(", "args", ",", "Train", "=", "True", ")", ":", "\n", "    ", "module", "=", "importlib", ".", "import_module", "(", "'Models.Class'", "+", "args", "[", "'3_model_class'", "]", ")", "\n", "class_", "=", "getattr", "(", "module", ",", "args", "[", "'3_model_class'", "]", ")", "\n", "my_net", "=", "class_", "(", ")", "\n", "\n", "with_GT", "=", "True", "\n", "if", "args", "[", "'3_dimension'", "]", "==", "''", ":", "\n", "        ", "rescale_factor", "=", "'Default'", "\n", "", "else", ":", "\n", "        ", "rescale_factor", "=", "args", "[", "'3_dimension'", "]", "\n", "", "my_dataset", "=", "Dataset", "(", ")", "\n", "if", "Train", ":", "\n", "        ", "my_dataset", ".", "load_train", "(", "args", "[", "'3_ds'", "]", ",", "rescale_factor", ")", "\n", "", "my_dataset", ".", "load_test", "(", "args", "[", "'3_ds'", "]", ",", "rescale_factor", ")", "\n", "my_net", ".", "create_model", "(", "args", ",", "my_dataset", ")", "\n", "\n", "return", "my_dataset", ",", "my_net", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.show_im": [[29, 34], ["matplotlib.pyplot.imshow", "matplotlib.pyplot.axis", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.show"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.show"], ["def", "show_im", "(", "im", ")", ":", "\n", "    ", "plt", ".", "imshow", "(", "im", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "#plt.close()", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.show": [[46, 64], ["matplotlib.pyplot.close", "matplotlib.pyplot.imshow", "matplotlib.pyplot.axis", "matplotlib.pyplot.figure", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.gcf", "os.path.exists", "os.makedirs", "str", "str", "Path", "Path"], "function", ["None"], ["def", "show", "(", "im", ",", "file_path", "=", "None", ",", "GUI", "=", "False", ",", "row", "=", "None", ",", "col", "=", "None", ")", ":", "\n", "    ", "plt", ".", "close", "(", "'all'", ")", "\n", "if", "GUI", ":", "\n", "        ", "my_dpi", "=", "96", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "col", "/", "my_dpi", ",", "row", "/", "my_dpi", ")", ",", "dpi", "=", "my_dpi", ")", "\n", "#plt.imshow(im, cmap = 'gray', interpolation = 'bicubic',  vmin=0, vmax=255)", "\n", "", "plt", ".", "imshow", "(", "im", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "if", "not", "GUI", ":", "\n", "        ", "plt", ".", "tight_layout", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", "\n", "", "plt", ".", "savefig", "(", "file_path", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "tight_layout", "(", "rect", "=", "[", "-", "0.15", ",", "0.22", ",", "1", ",", "1", "]", ")", "\n", "fig", "=", "plt", ".", "gcf", "(", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.show_tight": [[73, 80], ["matplotlib.pyplot.figure", "matplotlib.pyplot.imshow", "plt.imshow.axes.get_xaxis().set_visible", "plt.imshow.axes.get_yaxis().set_visible", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "plt.imshow.axes.get_xaxis", "plt.imshow.axes.get_yaxis"], "function", ["None"], ["def", "show_tight", "(", "im", ",", "file_path", "=", "None", ",", "GUI", "=", "False", ",", "row", "=", "None", ",", "col", "=", "None", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "fig", "=", "plt", ".", "imshow", "(", "im", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", ".", "axes", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "fig", ".", "axes", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "savefig", "(", "file_path", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_learningcurves": [[90, 134], ["matplotlib.pyplot.ylabel", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.legend", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.legend", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "open", "pickle.loads", "len", "matplotlib.pyplot.rc", "matplotlib.pyplot.rc", "matplotlib.pyplot.rcParams.update", "matplotlib.pyplot.figure", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "matplotlib.pyplot.legend", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.gcf", "range", "range", "handle.read", "range", "range", "range", "range"], "function", ["None"], ["def", "print_learningcurves", "(", "exp_name", ",", "GUI", "=", "False", ",", "row", "=", "None", ",", "col", "=", "None", ")", ":", "\n", "\n", "    ", "history_path", "=", "root_path", "+", "'/Experiments/'", "+", "exp_name", "+", "'/history.h5'", "\n", "plot_path", "=", "root_path", "+", "'/Experiments/'", "+", "exp_name", "+", "'/Learning'", "\n", "with", "open", "(", "history_path", ",", "'rb'", ")", "as", "handle", ":", "\n", "        ", "history", "=", "pickle", ".", "loads", "(", "handle", ".", "read", "(", ")", ")", "\n", "\n", "", "nb_epoch", "=", "len", "(", "history", "[", "'loss'", "]", ")", "+", "1", "\n", "if", "GUI", ":", "\n", "        ", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "7", ")", "\n", "plt", ".", "rc", "(", "'ytick'", ",", "labelsize", "=", "7", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'font.size'", ":", "7", "}", ")", "\n", "my_dpi", "=", "96", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "col", "/", "my_dpi", ",", "row", "/", "my_dpi", ")", ",", "dpi", "=", "my_dpi", ")", "\n", "\n", "# summarize history for PSNR", "\n", "", "if", "GUI", ":", "\n", "        ", "plt", ".", "plot", "(", "range", "(", "1", ",", "nb_epoch", ")", ",", "history", "[", "'PSNRLoss'", "]", ",", "color", "=", "colors", "[", "'train'", "]", ",", "linewidth", "=", "1", ",", "label", "=", "'training set'", ")", "\n", "plt", ".", "plot", "(", "range", "(", "1", ",", "nb_epoch", ")", ",", "history", "[", "'val_PSNRLoss'", "]", ",", "color", "=", "colors", "[", "'val'", "]", ",", "linewidth", "=", "1", ",", "label", "=", "'validation set'", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "plot", "(", "range", "(", "1", ",", "nb_epoch", ")", ",", "history", "[", "'PSNRLoss'", "]", ",", "color", "=", "colors", "[", "'train'", "]", ",", "linewidth", "=", "2", ",", "label", "=", "'training set'", ")", "\n", "plt", ".", "plot", "(", "range", "(", "1", ",", "nb_epoch", ")", ",", "history", "[", "'val_PSNRLoss'", "]", ",", "color", "=", "colors", "[", "'val'", "]", ",", "linewidth", "=", "2", ",", "label", "=", "'validation set'", ")", "\n", "", "plt", ".", "ylabel", "(", "'PSNR'", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "if", "not", "GUI", ":", "\n", "        ", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "plot_path", "+", "'_PSNR.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "fig", "=", "plt", ".", "gcf", "(", ")", "\n", "return", "fig", "\n", "\n", "# summarize history for loss", "\n", "", "plt", ".", "plot", "(", "range", "(", "1", ",", "nb_epoch", ")", ",", "history", "[", "'loss'", "]", ",", "color", "=", "colors", "[", "'train'", "]", ",", "linewidth", "=", "2", ",", "label", "=", "'training set'", ")", "\n", "plt", ".", "plot", "(", "range", "(", "1", ",", "nb_epoch", ")", ",", "history", "[", "'val_loss'", "]", ",", "color", "=", "colors", "[", "'val'", "]", ",", "linewidth", "=", "2", ",", "label", "=", "'validation set'", ")", "\n", "plt", ".", "ylabel", "(", "'MSE'", ")", "\n", "plt", ".", "xlabel", "(", "'Epoch'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "plot_path", "+", "'_loss.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_evaluation": [[146, 183], ["matplotlib.pyplot.figure", "plt.figure.add_subplot", "f.add_subplot.set_title", "f.add_subplot.imshow", "f.add_subplot.axis", "plt.figure.add_subplot", "f.add_subplot.set_title", "f.add_subplot.imshow", "f.add_subplot.axis", "plt.figure.add_subplot", "diff", "f.add_subplot.set_title", "f.add_subplot.axis", "matplotlib.pyplot.savefig", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "os.path.exists", "os.makedirs", "np.squeeze", "np.squeeze", "f.add_subplot.imshow", "f.add_subplot.imshow", "f.add_subplot.imshow", "str", "str", "Path", "Path"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff"], ["def", "print_evaluation", "(", "input", ",", "prediction", ",", "file_path", ",", "map", "=", "False", ",", "Vmin", "=", "0", ",", "Vmax", "=", "255", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", "\n", "\n", "", "if", "prediction", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "prediction", "=", "np", ".", "squeeze", "(", "prediction", ",", "axis", "=", "-", "1", ")", "\n", "input", "=", "np", ".", "squeeze", "(", "input", ",", "axis", "=", "-", "1", ")", "\n", "\n", "#f  = plt.figure(figsize=(8,2.5))", "\n", "", "plt", ".", "rcParams", "[", "'savefig.pad_inches'", "]", "=", "0", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "fig", "=", "f", ".", "add_subplot", "(", "131", ")", "\n", "fig", ".", "set_title", "(", "'Input'", ",", "fontsize", "=", "16", ")", "\n", "fig", ".", "imshow", "(", "input", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", ".", "axis", "(", "'off'", ")", "\n", "\n", "fig", "=", "f", ".", "add_subplot", "(", "132", ")", "\n", "fig", ".", "set_title", "(", "'Prediction'", ",", "fontsize", "=", "16", ")", "\n", "fig", ".", "imshow", "(", "prediction", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", ".", "axis", "(", "'off'", ")", "\n", "\n", "fig", "=", "f", ".", "add_subplot", "(", "133", ")", "\n", "diff_im", "=", "diff", "(", "input", ",", "prediction", ")", "\n", "if", "map", ":", "\n", "#mask = np.ma.masked_where(diff_im < 0.1, diff_im)", "\n", "        ", "fig", ".", "imshow", "(", "input", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", ".", "imshow", "(", "diff_im", ",", "cmap", "=", "'cividis'", ",", "interpolation", "=", "'bicubic'", ",", "alpha", "=", ".9", ",", "vmin", "=", "Vmin", ",", "vmax", "=", "Vmax", ")", "\n", "#fig.imshow(diff_im, cmap = 'jet', interpolation = 'bicubic',alpha=.8,  vmin=Vmin, vmax=Vmax)", "\n", "", "else", ":", "\n", "        ", "fig", ".", "imshow", "(", "diff_im", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "", "fig", ".", "set_title", "(", "'Difference (I-P)'", ",", "fontsize", "=", "16", ")", "\n", "fig", ".", "axis", "(", "'off'", ")", "\n", "\n", "plt", ".", "savefig", "(", "file_path", ")", "\n", "plt", ".", "savefig", "(", "file_path", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_evaluation_individual": [[185, 230], ["matplotlib.pyplot.figure", "matplotlib.pyplot.imshow", "plt.imshow.axes.get_xaxis().set_visible", "plt.imshow.axes.get_yaxis().set_visible", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "matplotlib.pyplot.figure", "matplotlib.pyplot.imshow", "plt.imshow.axes.get_xaxis().set_visible", "plt.imshow.axes.get_yaxis().set_visible", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "matplotlib.pyplot.figure", "matplotlib.pyplot.imshow", "diff", "matplotlib.pyplot.imshow", "plt.imshow.axes.get_xaxis().set_visible", "plt.imshow.axes.get_yaxis().set_visible", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "matplotlib.pyplot.figure", "np.array", "matplotlib.pyplot.imshow", "matplotlib.pyplot.gca().set_visible", "matplotlib.pyplot.colorbar", "plt.colorbar.ax.tick_params", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "os.path.exists", "os.makedirs", "np.squeeze", "np.squeeze", "str", "str", "plt.imshow.axes.get_xaxis", "plt.imshow.axes.get_yaxis", "plt.imshow.axes.get_xaxis", "plt.imshow.axes.get_yaxis", "plt.imshow.axes.get_xaxis", "plt.imshow.axes.get_yaxis", "matplotlib.pyplot.gca", "Path", "Path"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff"], ["", "def", "print_evaluation_individual", "(", "input", ",", "prediction", ",", "file_path", ",", "Vmin", "=", "0", ",", "Vmax", "=", "255", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", "\n", "\n", "", "if", "prediction", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "prediction", "=", "np", ".", "squeeze", "(", "prediction", ",", "axis", "=", "-", "1", ")", "\n", "input", "=", "np", ".", "squeeze", "(", "input", ",", "axis", "=", "-", "1", ")", "\n", "\n", "#plt.rcParams['savefig.pad_inches'] = 0", "\n", "", "plt", ".", "figure", "(", ")", "\n", "fig", "=", "plt", ".", "imshow", "(", "input", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", ".", "axes", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "fig", ".", "axes", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "savefig", "(", "file_path", "+", "'_INPUT.png'", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "#plt.rcParams['savefig.pad_inches'] = 0", "\n", "plt", ".", "figure", "(", ")", "\n", "fig", "=", "plt", ".", "imshow", "(", "prediction", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", ".", "axes", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "fig", ".", "axes", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "savefig", "(", "file_path", "+", "'_OUTPUT.png'", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "#plt.rcParams['savefig.pad_inches'] = 0", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "input", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "diff_im", "=", "diff", "(", "input", ",", "prediction", ")", "\n", "fig", "=", "plt", ".", "imshow", "(", "diff_im", ",", "cmap", "=", "'cividis'", ",", "interpolation", "=", "'bicubic'", ",", "alpha", "=", ".9", ",", "vmin", "=", "Vmin", ",", "vmax", "=", "Vmax", ")", "\n", "fig", ".", "axes", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "fig", ".", "axes", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "savefig", "(", "file_path", "+", "'_HEATMAP.png'", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "1.5", ",", "3", ")", ")", "\n", "a", "=", "np", ".", "array", "(", "[", "[", "Vmin", ",", "Vmax", "]", "]", ")", "\n", "fig", "=", "plt", ".", "imshow", "(", "a", ",", "cmap", "=", "'cividis'", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "#cax = plt.axes(np.linspace(Vmin, Vmax,5))", "\n", "cbar", "=", "plt", ".", "colorbar", "(", ")", "\n", "cbar", ".", "ax", ".", "tick_params", "(", "labelsize", "=", "22", ")", "\n", "\n", "\n", "plt", ".", "savefig", "(", "file_path", "+", "'_COLORBAR.png'", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_MCevaluation": [[234, 268], ["matplotlib.pyplot.figure", "plt.figure.add_subplot", "f.add_subplot.set_title", "f.add_subplot.imshow", "f.add_subplot.axis", "plt.figure.add_subplot", "f.add_subplot.set_title", "f.add_subplot.imshow", "f.add_subplot.axis", "plt.figure.add_subplot", "f.add_subplot.imshow", "f.add_subplot.imshow", "f.add_subplot.set_title", "f.add_subplot.axis", "matplotlib.pyplot.savefig", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "os.path.exists", "os.makedirs", "np.squeeze", "np.squeeze", "np.squeeze", "str", "str", "Path", "Path"], "function", ["None"], ["", "def", "print_MCevaluation", "(", "input", ",", "prediction", ",", "variance", ",", "file_path", ",", "Vmin", "=", "0", ",", "Vmax", "=", "255", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", "\n", "\n", "", "if", "prediction", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "prediction", "=", "np", ".", "squeeze", "(", "prediction", ",", "axis", "=", "-", "1", ")", "\n", "", "if", "variance", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "variance", "=", "np", ".", "squeeze", "(", "variance", ",", "axis", "=", "-", "1", ")", "\n", "", "if", "input", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "input", "=", "np", ".", "squeeze", "(", "input", ",", "axis", "=", "-", "1", ")", "\n", "\n", "#f  = plt.figure(figsize=(8,2.5))", "\n", "", "plt", ".", "rcParams", "[", "'savefig.pad_inches'", "]", "=", "0", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "fig", "=", "f", ".", "add_subplot", "(", "131", ")", "\n", "fig", ".", "set_title", "(", "'Input'", ",", "fontsize", "=", "16", ")", "\n", "fig", ".", "imshow", "(", "input", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", ".", "axis", "(", "'off'", ")", "\n", "\n", "fig", "=", "f", ".", "add_subplot", "(", "132", ")", "\n", "fig", ".", "set_title", "(", "'Mean Prediction'", ",", "fontsize", "=", "16", ")", "\n", "fig", ".", "imshow", "(", "prediction", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", ".", "axis", "(", "'off'", ")", "\n", "\n", "fig", "=", "f", ".", "add_subplot", "(", "133", ")", "\n", "fig", ".", "imshow", "(", "input", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", ".", "imshow", "(", "variance", ",", "cmap", "=", "'cividis'", ",", "interpolation", "=", "'bicubic'", ",", "alpha", "=", ".9", ",", "vmin", "=", "Vmin", ",", "vmax", "=", "Vmax", ")", "\n", "fig", ".", "set_title", "(", "'Variance'", ",", "fontsize", "=", "16", ")", "\n", "fig", ".", "axis", "(", "'off'", ")", "\n", "\n", "plt", ".", "savefig", "(", "file_path", ")", "\n", "plt", ".", "savefig", "(", "file_path", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_MCevaluation_individual": [[270, 314], ["matplotlib.pyplot.figure", "matplotlib.pyplot.imshow", "plt.imshow.axes.get_xaxis().set_visible", "plt.imshow.axes.get_yaxis().set_visible", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "matplotlib.pyplot.figure", "matplotlib.pyplot.imshow", "plt.imshow.axes.get_xaxis().set_visible", "plt.imshow.axes.get_yaxis().set_visible", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "matplotlib.pyplot.figure", "matplotlib.pyplot.imshow", "matplotlib.pyplot.imshow", "plt.imshow.axes.get_xaxis().set_visible", "plt.imshow.axes.get_yaxis().set_visible", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "matplotlib.pyplot.figure", "np.array", "matplotlib.pyplot.imshow", "matplotlib.pyplot.gca().set_visible", "matplotlib.pyplot.colorbar", "plt.colorbar.ax.tick_params", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "os.path.exists", "os.makedirs", "np.squeeze", "np.squeeze", "np.squeeze", "str", "str", "plt.imshow.axes.get_xaxis", "plt.imshow.axes.get_yaxis", "plt.imshow.axes.get_xaxis", "plt.imshow.axes.get_yaxis", "plt.imshow.axes.get_xaxis", "plt.imshow.axes.get_yaxis", "matplotlib.pyplot.gca", "Path", "Path"], "function", ["None"], ["", "def", "print_MCevaluation_individual", "(", "input", ",", "prediction", ",", "variance", ",", "file_path", ",", "Vmin", "=", "0", ",", "Vmax", "=", "255", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", "\n", "\n", "", "if", "prediction", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "prediction", "=", "np", ".", "squeeze", "(", "prediction", ",", "axis", "=", "-", "1", ")", "\n", "variance", "=", "np", ".", "squeeze", "(", "variance", ",", "axis", "=", "-", "1", ")", "\n", "input", "=", "np", ".", "squeeze", "(", "input", ",", "axis", "=", "-", "1", ")", "\n", "\n", "#plt.rcParams['savefig.pad_inches'] = 0", "\n", "", "plt", ".", "figure", "(", ")", "\n", "fig", "=", "plt", ".", "imshow", "(", "input", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", ".", "axes", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "fig", ".", "axes", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "savefig", "(", "file_path", "+", "'_INPUT.png'", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "#plt.rcParams['savefig.pad_inches'] = 0", "\n", "plt", ".", "figure", "(", ")", "\n", "fig", "=", "plt", ".", "imshow", "(", "prediction", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", ".", "axes", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "fig", ".", "axes", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "savefig", "(", "file_path", "+", "'_MEANMC.png'", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "#plt.rcParams['savefig.pad_inches'] = 0", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "input", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", "=", "plt", ".", "imshow", "(", "variance", ",", "cmap", "=", "'cividis'", ",", "interpolation", "=", "'bicubic'", ",", "alpha", "=", ".9", ",", "vmin", "=", "Vmin", ",", "vmax", "=", "Vmax", ")", "\n", "fig", ".", "axes", ".", "get_xaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "fig", ".", "axes", ".", "get_yaxis", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "plt", ".", "savefig", "(", "file_path", "+", "'_VARIANCEMC.png'", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "1.5", ",", "3", ")", ")", "\n", "a", "=", "np", ".", "array", "(", "[", "[", "Vmin", ",", "Vmax", "]", "]", ")", "\n", "fig", "=", "plt", ".", "imshow", "(", "a", ",", "cmap", "=", "'cividis'", ")", "\n", "plt", ".", "gca", "(", ")", ".", "set_visible", "(", "False", ")", "\n", "#cax = plt.axes(np.linspace(Vmin, Vmax,5))", "\n", "cbar", "=", "plt", ".", "colorbar", "(", ")", "\n", "cbar", ".", "ax", ".", "tick_params", "(", "labelsize", "=", "22", ")", "\n", "\n", "plt", ".", "savefig", "(", "file_path", "+", "'MC__COLORBAR.png'", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_evaluationMCDRopout": [[326, 364], ["matplotlib.pyplot.figure", "plt.figure.add_subplot", "f.add_subplot.set_title", "f.add_subplot.imshow", "f.add_subplot.axis", "plt.figure.add_subplot", "f.add_subplot.set_title", "f.add_subplot.imshow", "f.add_subplot.axis", "np.ma.masked_where", "plt.figure.add_subplot", "f.add_subplot.set_title", "f.add_subplot.imshow", "f.add_subplot.imshow", "f.add_subplot.axis", "matplotlib.pyplot.savefig", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "os.path.exists", "os.makedirs", "np.squeeze", "np.squeeze", "np.squeeze", "str", "str", "skimage.color.rgb2gray", "skimage.color.rgb2gray", "Path", "Path"], "function", ["None"], ["def", "print_evaluationMCDRopout", "(", "input", ",", "pred", ",", "var", ",", "file_path", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", "\n", "\n", "#f  = plt.figure(figsize=(8,2.5)", "\n", "\n", "", "if", "pred", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "pred", "=", "np", ".", "squeeze", "(", "pred", ",", "axis", "=", "-", "1", ")", "\n", "input", "=", "np", ".", "squeeze", "(", "input", ",", "axis", "=", "-", "1", ")", "\n", "var", "=", "np", ".", "squeeze", "(", "var", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "plt", ".", "rcParams", "[", "'savefig.pad_inches'", "]", "=", "0", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "fig", "=", "f", ".", "add_subplot", "(", "131", ")", "\n", "fig", ".", "set_title", "(", "'Input'", ",", "fontsize", "=", "16", ")", "\n", "fig", ".", "imshow", "(", "input", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", ".", "axis", "(", "'off'", ")", "\n", "\n", "fig", "=", "f", ".", "add_subplot", "(", "132", ")", "\n", "fig", ".", "set_title", "(", "'Mean Pred'", ",", "fontsize", "=", "16", ")", "\n", "fig", ".", "imshow", "(", "pred", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", ".", "axis", "(", "'off'", ")", "\n", "\n", "if", "pred", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "        ", "input", "=", "rgb2gray", "(", "input", ")", "*", "255", "\n", "var", "=", "rgb2gray", "(", "var", ")", "*", "255", "\n", "", "mask", "=", "var", "\n", "mask", "=", "np", ".", "ma", ".", "masked_where", "(", "mask", "<", "0.1", ",", "mask", ")", "\n", "fig", "=", "f", ".", "add_subplot", "(", "133", ")", "\n", "fig", ".", "set_title", "(", "'Uncertainty'", ",", "fontsize", "=", "16", ")", "\n", "fig", ".", "imshow", "(", "input", ",", "cmap", "=", "'gray'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", ".", "imshow", "(", "mask", ",", "cmap", "=", "'jet'", ",", "interpolation", "=", "'bicubic'", ")", "\n", "fig", ".", "axis", "(", "'off'", ")", "\n", "\n", "plt", ".", "savefig", "(", "file_path", ")", "\n", "plt", ".", "savefig", "(", "file_path", ",", "bbox_inches", "=", "'tight'", ",", "pad_inches", "=", "0", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_ROC": [[375, 408], ["matplotlib.pyplot.rc", "matplotlib.pyplot.rc", "matplotlib.pyplot.rcParams.update", "read_json", "matplotlib.pyplot.figure", "zip", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.legend", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "os.path.exists", "os.makedirs", "matplotlib.pyplot.plot", "str", "str", "len", "round", "str", "auc", "Path", "Path", "str"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json"], ["def", "print_ROC", "(", "json_path", ",", "file_path", ",", "AUC", "=", "False", ")", ":", "\n", "    ", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "16", ")", "\n", "plt", ".", "rc", "(", "'ytick'", ",", "labelsize", "=", "16", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'font.size'", ":", "16", "}", ")", "\n", "\n", "from", "sklearn", ".", "metrics", "import", "auc", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", "\n", "\n", "", "labels", "=", "[", "'L0 Norm'", ",", "'L1 Norm'", ",", "'L2 Norm'", ",", "'L$\\infty$ Norm'", "]", "\n", "\n", "dict", "=", "read_json", "(", "json_path", ")", "\n", "TP", "=", "dict", "[", "'all_TP'", "]", "\n", "FP", "=", "dict", "[", "'all_FP'", "]", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "max_auc", "=", "0", "\n", "for", "this_TP", ",", "this_FP", ",", "this_color", ",", "this_label", "in", "zip", "(", "TP", ",", "FP", ",", "colors4", ",", "labels", ")", ":", "\n", "        ", "if", "len", "(", "TP", ")", "==", "1", ":", "\n", "            ", "this_color", "=", "colors4", "[", "-", "1", "]", "\n", "this_label", "=", "labels", "[", "-", "1", "]", "\n", "", "if", "AUC", ":", "\n", "            ", "this_label", "+=", "'('", "\n", "this_auc", "=", "round", "(", "auc", "(", "this_FP", ",", "this_TP", ")", ",", "2", ")", "\n", "if", "this_auc", ">", "max_auc", ":", "\n", "                ", "max_auc", "=", "this_auc", "\n", "", "this_label", "+=", "str", "(", "this_auc", ")", "\n", "this_label", "+=", "')'", "\n", "", "plt", ".", "plot", "(", "this_FP", ",", "this_TP", ",", "color", "=", "this_color", ",", "linewidth", "=", "2", ",", "label", "=", "this_label", ")", "\n", "", "plt", ".", "xlabel", "(", "'FP rate'", ")", "\n", "plt", ".", "ylabel", "(", "'TP rate'", ")", "\n", "plt", ".", "legend", "(", "bbox_to_anchor", "=", "(", "1.04", ",", "1", ")", ",", "title", "=", "\"Max AUC = \"", "+", "str", "(", "max_auc", ")", "+", "\"\\n \\n Norm (AUC) \"", ",", "loc", "=", "\"upper left\"", ")", "\n", "plt", ".", "savefig", "(", "file_path", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_PIXEL_WISE_ROC": [[410, 441], ["matplotlib.pyplot.rc", "matplotlib.pyplot.rc", "matplotlib.pyplot.rcParams.update", "read_json", "matplotlib.pyplot.figure", "matplotlib.pyplot.plot", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.legend", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "os.path.exists", "os.makedirs", "str", "str", "str", "Path", "Path", "round", "auc"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json"], ["", "def", "print_PIXEL_WISE_ROC", "(", "json_path", ",", "file_path", ",", "AUC", "=", "False", ")", ":", "\n", "    ", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "16", ")", "\n", "plt", ".", "rc", "(", "'ytick'", ",", "labelsize", "=", "16", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'font.size'", ":", "16", "}", ")", "\n", "\n", "from", "sklearn", ".", "metrics", "import", "auc", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", "\n", "\n", "", "dict", "=", "read_json", "(", "json_path", ")", "\n", "TP", "=", "dict", "[", "'TP'", "]", "\n", "FP", "=", "dict", "[", "'FP'", "]", "\n", "f", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "plt", ".", "plot", "(", "FP", ",", "TP", ",", "color", "=", "colors4", "[", "-", "1", "]", ",", "linewidth", "=", "2", ",", "label", "=", "'Pixel Difference'", ")", "\n", "plt", ".", "xlabel", "(", "'FP rate'", ")", "\n", "plt", ".", "ylabel", "(", "'TP rate'", ")", "\n", "plt", ".", "legend", "(", "bbox_to_anchor", "=", "(", "1.04", ",", "1", ")", ",", "title", "=", "\"Max AUC = \"", "+", "str", "(", "round", "(", "auc", "(", "FP", ",", "TP", ")", ",", "2", ")", ")", ",", "loc", "=", "\"upper left\"", ")", "\n", "plt", ".", "savefig", "(", "file_path", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "\n", "\"\"\" -----------------------------------------------------------------------------------------\nPrint ROC curve \nINPUT 2D : \n    - TP: true positive rates\n    - FP: false positive rates\n    - prediction: output of the network (prediction of the GT)\nOUTPUT : \n    - png files in prediction folder\n----------------------------------------------------------------------------------------- \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_2DROC": [[442, 515], ["matplotlib.pyplot.rc", "matplotlib.pyplot.rc", "matplotlib.pyplot.rcParams.update", "read_json", "matplotlib.pyplot.figure", "zip", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "min", "min", "max", "os.path.exists", "os.makedirs", "plt.figure.add_subplot", "make_graph.print_2DROC.split"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json"], ["", "def", "print_2DROC", "(", "json_path", ",", "file_path", ")", ":", "\n", "    ", "def", "split", "(", "u", ",", "v", ",", "points", ")", ":", "\n", "# return points on left side of UV", "\n", "        ", "return", "[", "p", "for", "p", "in", "points", "if", "np", ".", "cross", "(", "p", "-", "u", ",", "v", "-", "u", ")", "<", "0", "]", "\n", "\n", "", "def", "extend", "(", "u", ",", "v", ",", "points", ")", ":", "\n", "        ", "if", "not", "points", ":", "\n", "            ", "return", "[", "]", "\n", "\n", "# find furthest point W, and split search to WV, UW", "\n", "", "w", "=", "min", "(", "points", ",", "key", "=", "lambda", "p", ":", "np", ".", "cross", "(", "p", "-", "u", ",", "v", "-", "u", ")", ")", "\n", "p1", ",", "p2", "=", "split", "(", "w", ",", "v", ",", "points", ")", ",", "split", "(", "u", ",", "w", ",", "points", ")", "\n", "return", "extend", "(", "w", ",", "v", ",", "p1", ")", "+", "[", "w", "]", "+", "extend", "(", "u", ",", "w", ",", "p2", ")", "\n", "\n", "", "def", "convex_hull", "(", "points", ")", ":", "\n", "# find two hull points, U, V, and split to left and right search", "\n", "        ", "u", "=", "min", "(", "points", ",", "key", "=", "lambda", "p", ":", "p", "[", "0", "]", ")", "\n", "v", "=", "max", "(", "points", ",", "key", "=", "lambda", "p", ":", "p", "[", "0", "]", ")", "\n", "left", ",", "right", "=", "split", "(", "u", ",", "v", ",", "points", ")", ",", "split", "(", "v", ",", "u", ",", "points", ")", "\n", "\n", "#return [v] + extend(u, v, left) + [u] + extend(v, u, right) + [v]", "\n", "return", "[", "v", "]", "+", "extend", "(", "u", ",", "v", ",", "left", ")", "+", "[", "u", "]", "\n", "\n", "\n", "", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "14", ")", "\n", "plt", ".", "rc", "(", "'ytick'", ",", "labelsize", "=", "14", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'font.size'", ":", "14", "}", ")", "\n", "\n", "from", "sklearn", ".", "metrics", "import", "auc", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", "\n", "\n", "", "labels", "=", "[", "'L0 Norm'", ",", "'L1 Norm'", ",", "'L2 Norm'", ",", "'L$\\infty$ Norm'", "]", "\n", "subplot", "=", "{", "'L0 Norm'", ":", "'221'", ",", "'L1 Norm'", ":", "'222'", ",", "'L2 Norm'", ":", "'223'", ",", "'L$\\infty$ Norm'", ":", "'224'", "}", "\n", "\n", "dict", "=", "read_json", "(", "json_path", ")", "\n", "TP", "=", "dict", "[", "'all_TP'", "]", "\n", "FP", "=", "dict", "[", "'all_FP'", "]", "\n", "f", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "12", ",", "8", ")", ")", "\n", "\n", "max_auc", "=", "0", "\n", "for", "this_TP", ",", "this_FP", ",", "this_color", ",", "this_label", "in", "zip", "(", "TP", ",", "FP", ",", "colors4", ",", "labels", ")", ":", "\n", "        ", "if", "len", "(", "TP", ")", "==", "1", ":", "\n", "            ", "this_color", "=", "colors4", "[", "-", "1", "]", "\n", "this_label", "=", "labels", "[", "-", "1", "]", "\n", "\n", "", "fig", "=", "f", ".", "add_subplot", "(", "subplot", "[", "this_label", "]", ")", "\n", "\n", "if", "this_FP", "and", "this_TP", ":", "\n", "            ", "flat_fp", "=", "[", "item", "for", "sublist", "in", "this_FP", "for", "item", "in", "sublist", "]", "\n", "flat_tp", "=", "[", "item", "for", "sublist", "in", "this_TP", "for", "item", "in", "sublist", "]", "\n", "points", "=", "[", "[", "x", "[", "0", "]", ",", "x", "[", "1", "]", "]", "for", "x", "in", "zip", "(", "flat_fp", ",", "flat_tp", ")", "]", "\n", "hull", "=", "convex_hull", "(", "np", ".", "array", "(", "points", ")", ")", "\n", "\n", "for", "fp", ",", "tp", "in", "zip", "(", "this_FP", ",", "this_TP", ")", ":", "\n", "                ", "fig", ".", "plot", "(", "fp", ",", "tp", ",", "'o'", ",", "color", "=", "this_color", ",", "markersize", "=", "0.1", ",", "alpha", "=", "0.8", ")", "\n", "fig", ".", "set_xlabel", "(", "'FP rate'", ")", "\n", "fig", ".", "set_ylabel", "(", "'TP rate'", ")", "\n", "\n", "", "x", ",", "y", "=", "[", "]", ",", "[", "]", "\n", "for", "point", "in", "hull", ":", "\n", "                ", "x", ".", "append", "(", "point", "[", "0", "]", ")", "\n", "y", ".", "append", "(", "point", "[", "1", "]", ")", "\n", "\n", "#fig.plot(point[:,0], point[:,1], 'o', color='red', markersize=0.8)", "\n", "", "fig", ".", "plot", "(", "x", ",", "y", ",", "color", "=", "'red'", ",", "linewidth", "=", "1", ")", "\n", "this_auc", "=", "round", "(", "auc", "(", "x", ",", "y", ")", ",", "2", ")", "\n", "plt", ".", "legend", "(", "title", "=", "\"AUC = \"", "+", "str", "(", "this_auc", ")", ",", "loc", "=", "\"lower right\"", ")", "\n", "\n", "\n", "\n", "", "", "plt", ".", "savefig", "(", "file_path", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "plt", ".", "close", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.write_json": [[25, 30], ["os.path.exists", "os.makedirs", "open", "json.dump", "str", "str", "pathlib.Path", "pathlib.Path"], "function", ["None"], ["def", "write_json", "(", "dict", ",", "file_path", ",", "sort_keys", "=", "True", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", "\n", "", "with", "open", "(", "file_path", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "dict", ",", "fp", ",", "sort_keys", "=", "sort_keys", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json": [[38, 41], ["open", "json.load"], "function", ["None"], ["def", "read_json", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "return", "json", ".", "load", "(", "fp", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_png": [[50, 61], ["skimage.io.imread", "skimage.transform.resize", "skimage.color.gray2rgb.astype", "skimage.color.gray2rgb", "numpy.max", "int", "int"], "function", ["None"], ["def", "read_png", "(", "file_path", ",", "rescale_factor", "=", "'Default'", ")", ":", "\n", "    ", "img", "=", "imread", "(", "file_path", ")", "\n", "if", "rescale_factor", "!=", "'Default'", ":", "\n", "        ", "img", "=", "resize", "(", "img", ",", "(", "int", "(", "img", ".", "shape", "[", "0", "]", "*", "rescale_factor", ")", ",", "int", "(", "img", ".", "shape", "[", "1", "]", "*", "rescale_factor", ")", ")", ")", "\n", "\n", "", "if", "img", "is", "not", "None", ":", "\n", "        ", "if", "img", ".", "ndim", "==", "2", ":", "\n", "            ", "img", "=", "gray2rgb", "(", "img", ")", "\n", "", "if", "np", ".", "max", "(", "img", ")", "<=", "1", ":", "\n", "            ", "img", "*=", "255", "\n", "", "return", "img", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_folder": [[70, 82], ["os.listdir", "list_file_path.sort", "numpy.asarray", "images.append", "list_file_path.append", "helper.read_png", "os.path.join", "int", "[].split", "x.split"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_png"], ["def", "read_folder", "(", "folder_path", ",", "max_size", "=", "None", ")", ":", "\n", "    ", "list_file_path", ",", "images", ",", "nb_imgs", "=", "[", "]", ",", "[", "]", ",", "0", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "folder_path", ")", ":", "\n", "        ", "if", "'png'", "in", "filename", "or", "'jpg'", "in", "filename", ":", "\n", "            ", "list_file_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "folder_path", ",", "filename", ")", ")", "\n", "", "", "list_file_path", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "(", "x", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "for", "path", "in", "list_file_path", ":", "\n", "        ", "images", ".", "append", "(", "read_png", "(", "path", ")", ")", "\n", "nb_imgs", "+=", "1", "\n", "if", "nb_imgs", "==", "max_size", ":", "\n", "            ", "break", "\n", "", "", "return", "np", ".", "asarray", "(", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.print_array": [[92, 108], ["enumerate", "numpy.squeeze", "os.path.exists", "os.makedirs", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "skimage.io.imsave", "str", "str", "str", "str"], "function", ["None"], ["def", "print_array", "(", "array", ",", "folder_path", ",", "suffix", "=", "None", ",", "prefix", "=", "None", ")", ":", "\n", "\n", "    ", "if", "array", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "array", "=", "np", ".", "squeeze", "(", "array", ",", "-", "1", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "", "for", "idx", ",", "img", "in", "enumerate", "(", "array", ")", ":", "\n", "        ", "if", "suffix", "and", "prefix", ":", "\n", "            ", "imsave", "(", "folder_path", "+", "'/'", "+", "prefix", "+", "str", "(", "idx", ")", "+", "suffix", "+", "'.png'", ",", "img", ")", "\n", "", "elif", "suffix", ":", "\n", "            ", "imsave", "(", "folder_path", "+", "'/'", "+", "str", "(", "idx", ")", "+", "suffix", "+", "'.png'", ",", "img", ")", "\n", "", "elif", "prefix", ":", "\n", "            ", "imsave", "(", "folder_path", "+", "'/'", "+", "prefix", "+", "str", "(", "idx", ")", "+", "'.png'", ",", "img", ")", "\n", "", "else", ":", "\n", "            ", "imsave", "(", "folder_path", "+", "'/'", "+", "str", "(", "idx", ")", "+", "'.png'", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.drop_array": [[118, 137], ["enumerate", "os.path.exists", "os.makedirs", "len", "int", "os.remove", "os.listdir", "skimage.io.imsave", "skimage.io.imsave", "os.listdir", "str", "str", "str"], "function", ["None"], ["def", "drop_array", "(", "array", ",", "folder_path", ",", "overwrite", "=", "False", ",", "suffix_iter", "=", "False", ",", "iter", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "", "if", "overwrite", ":", "\n", "        ", "filesToRemove", "=", "[", "folder_path", "+", "'/'", "+", "x", "for", "x", "in", "os", ".", "listdir", "(", "folder_path", ")", "]", "\n", "for", "f", "in", "filesToRemove", ":", "\n", "            ", "os", ".", "remove", "(", "f", ")", "\n", "\n", "", "", "if", "iter", "is", "None", ":", "\n", "        ", "shift", "=", "len", "(", "os", ".", "listdir", "(", "folder_path", ")", ")", "\n", "", "else", ":", "\n", "        ", "shift", "=", "int", "(", "iter", ")", "\n", "", "iter", "=", "0", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "array", ")", ":", "\n", "        ", "if", "not", "suffix_iter", ":", "\n", "            ", "imsave", "(", "folder_path", "+", "'/'", "+", "str", "(", "shift", "+", "idx", ")", "+", "'.png'", ",", "img", ")", "\n", "", "else", ":", "\n", "            ", "imsave", "(", "folder_path", "+", "'/'", "+", "str", "(", "shift", ")", "+", "'_'", "+", "str", "(", "iter", ")", "+", "'.png'", ",", "img", ")", "\n", "iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff": [[145, 147], ["numpy.uint8", "numpy.abs", "numpy.int16"], "function", ["None"], ["def", "diff", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "return", "(", "np", ".", "uint8", "(", "np", ".", "abs", "(", "np", ".", "int16", "(", "img1", ")", "-", "img2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.add": [[155, 159], ["numpy.uint8", "numpy.int16", "numpy.int16"], "function", ["None"], ["def", "add", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "res", "=", "np", ".", "int16", "(", "img1", ")", "+", "np", ".", "int16", "(", "img2", ")", "\n", "res", "[", "res", ">", "256", "]", "=", "256", "\n", "return", "np", ".", "uint8", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.process_im": [[170, 178], ["numpy.array", "im_array.astype", "K.image_dim_ordering", "numpy.reshape", "numpy.reshape", "len", "len"], "function", ["None"], ["def", "process_im", "(", "im_array", ",", "img_row", ",", "img_col", ")", ":", "\n", "    ", "im_array", "=", "im_array", ".", "astype", "(", "'float32'", ")", "/", "255.", "\n", "channels", "=", "im_array", ".", "shape", "[", "-", "1", "]", "\n", "if", "K", ".", "image_dim_ordering", "(", ")", "==", "\"th\"", ":", "\n", "        ", "new_array", "=", "np", ".", "reshape", "(", "im_array", ",", "(", "len", "(", "im_array", ")", ",", "channels", ",", "img_row", ",", "img_col", ")", ")", "\n", "", "else", ":", "\n", "        ", "new_array", "=", "np", ".", "reshape", "(", "im_array", ",", "(", "len", "(", "im_array", ")", ",", "img_row", ",", "img_col", ",", "channels", ")", ")", "\n", "", "return", "np", ".", "array", "(", "new_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.deprocess_im": [[189, 197], ["im_array.astype.astype", "numpy.array", "K.image_dim_ordering", "numpy.squeeze", "numpy.squeeze"], "function", ["None"], ["def", "deprocess_im", "(", "im_array", ")", ":", "\n", "    ", "im_array", "=", "im_array", "*", "255.", "\n", "im_array", "=", "im_array", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "K", ".", "image_dim_ordering", "(", ")", "==", "\"th\"", ":", "\n", "        ", "new_array", "=", "np", ".", "squeeze", "(", "im_array", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "new_array", "=", "np", ".", "squeeze", "(", "im_array", ",", "axis", "=", "3", ")", "\n", "", "return", "np", ".", "array", "(", "new_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.label_generator": [[207, 233], ["numpy.ones", "numpy.zeros", "numpy.random.randint", "enumerate", "numpy.random.randint", "enumerate", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint"], "function", ["None"], ["def", "label_generator", "(", "size", ",", "var", "=", "0", ",", "corr", "=", "0", ")", ":", "\n", "    ", "if", "var", "==", "0", ":", "\n", "        ", "label_real", "=", "np", ".", "ones", "(", "size", ")", "\n", "label_fake", "=", "np", ".", "zeros", "(", "size", ")", "\n", "", "else", ":", "\n", "        ", "label_real", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "101", "-", "var", "*", "100", ",", "high", "=", "101", ",", "size", "=", "size", ")", "/", "100.", "\n", "label_fake", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "var", "*", "100", "+", "1", ",", "size", "=", "size", ")", "/", "100.", "\n", "\n", "", "if", "corr", "!=", "0", ":", "\n", "        ", "chance", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "100", ",", "size", ")", "\n", "for", "idx", ",", "this_chance", "in", "enumerate", "(", "chance", ")", ":", "\n", "            ", "if", "this_chance", "<", "corr", ":", "\n", "                ", "if", "var", "==", "0", ":", "\n", "                    ", "label_real", "[", "idx", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "label_real", "[", "idx", "]", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "var", "*", "100", "+", "1", ")", "/", "100.", "\n", "\n", "", "", "", "chance", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "100", ",", "size", ")", "\n", "for", "idx", ",", "this_chance", "in", "enumerate", "(", "chance", ")", ":", "\n", "            ", "if", "this_chance", "<", "corr", ":", "\n", "                ", "if", "var", "==", "0", ":", "\n", "                    ", "label_fake", "[", "idx", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "label_fake", "[", "idx", "]", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "101", "-", "var", "*", "100", ",", "high", "=", "101", ")", "/", "100.", "\n", "\n", "", "", "", "", "return", "label_real", ",", "label_fake", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.iterate_dict": [[241, 248], ["d.items", "isinstance", "helper.iterate_dict"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.iterate_dict"], ["def", "iterate_dict", "(", "d", ",", "new_dict", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "iterate_dict", "(", "v", ",", "new_dict", ")", "\n", "", "else", ":", "\n", "            ", "new_dict", "[", "k", "]", "=", "v", "\n", "", "", "return", "new_dict", "", "", ""]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.launch_code.import_new_db": [[16, 68], ["launch_code.import_new_db.copy_folder"], "function", ["None"], ["def", "import_new_db", "(", "args", ")", ":", "\n", "    ", "ds_name", "=", "args", "[", "\"0_ds_name\"", "]", "\n", "\n", "# Create Empty folders ", "\n", "ds_path", "=", "data_path", "+", "'/'", "+", "ds_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "ds_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ds_path", ")", "\n", "os", ".", "makedirs", "(", "ds_path", "+", "'/Train/Clean'", ")", "\n", "os", ".", "makedirs", "(", "ds_path", "+", "'/Test/Real_corruption'", ")", "\n", "os", ".", "makedirs", "(", "ds_path", "+", "'/Test/Clean'", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'The %s database already exists'", "%", "(", "ds_name", ")", ")", "\n", "\n", "\n", "", "def", "copy_folder", "(", "from_folder", ",", "to_folder", ",", "maskPath", "=", "''", ")", ":", "\n", "# Copy images ", "\n", "        ", "lst", "=", "sorted", "(", "os", ".", "listdir", "(", "from_folder", ")", ")", "\n", "ims", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "to_folder", ")", "if", "'mask'", "not", "in", "x", "]", "\n", "shift", "=", "len", "(", "ims", ")", "\n", "for", "idx", ",", "img_path", "in", "enumerate", "(", "lst", ")", ":", "\n", "            ", "copyfile", "(", "from_folder", "+", "'/'", "+", "img_path", ",", "to_folder", "+", "str", "(", "shift", "+", "idx", ")", "+", "'.png'", ")", "\n", "\n", "# Copy masks if any ", "\n", "", "if", "maskPath", "is", "not", "''", ":", "\n", "            ", "lstMasks", "=", "sorted", "(", "os", ".", "listdir", "(", "maskPath", ")", ")", "\n", "masks", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "to_folder", ")", "if", "'mask'", "in", "x", "]", "\n", "shift", "=", "len", "(", "masks", ")", "\n", "for", "idx", ",", "img_path", "in", "enumerate", "(", "lstMasks", ")", ":", "\n", "                ", "copyfile", "(", "maskPath", "+", "'/'", "+", "img_path", ",", "to_folder", "+", "'mask_'", "+", "str", "(", "shift", "+", "idx", ")", "+", "'.png'", ")", "\n", "\n", "# Copy train images", "\n", "", "", "", "train_path", "=", "args", "[", "'0_train_set'", "]", "\n", "copy_folder", "(", "train_path", ",", "ds_path", "+", "'/Train/Clean/'", ")", "\n", "write_json", "(", "{", "\"1_default\"", ":", "None", "}", ",", "ds_path", "+", "'/Train/Clean/00_description.json'", ")", "\n", "\n", "# Copy test images", "\n", "test_clean_path", "=", "args", "[", "'0_test_clean'", "]", "\n", "copy_folder", "(", "test_clean_path", ",", "ds_path", "+", "'/Test/Clean/'", ")", "\n", "write_json", "(", "{", "\"1_default\"", ":", "None", "}", ",", "ds_path", "+", "'/Test/Clean/00_description.json'", ")", "\n", "\n", "all_def_folders", "=", "[", "x", "for", "x", "in", "args", "if", "'0_test_defaul'", "in", "x", "]", "\n", "all_mask_folders", "=", "[", "x", "for", "x", "in", "args", "if", "'0_test_mask'", "in", "x", "]", "\n", "\n", "description", "=", "{", "}", "\n", "shift", "=", "0", "\n", "for", "this_def", ",", "this_mask", "in", "zip", "(", "all_def_folders", ",", "all_mask_folders", ")", ":", "\n", "        ", "if", "args", "[", "this_def", "]", "is", "not", "''", ":", "\n", "            ", "copy_folder", "(", "args", "[", "this_def", "]", ",", "ds_path", "+", "'/Test/Real_corruption/'", ",", "args", "[", "this_mask", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "os", ".", "listdir", "(", "args", "[", "this_def", "]", ")", ")", ")", ":", "\n", "                ", "description", "[", "str", "(", "shift", "+", "i", ")", "+", "'.png'", "]", "=", "args", "[", "'0_test_label'", "+", "this_def", "[", "-", "1", "]", "]", "\n", "", "shift", "+=", "(", "i", "+", "1", ")", "\n", "", "", "write_json", "(", "description", ",", "ds_path", "+", "'/Test/Real_corruption/00_description.json'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.launch_code.get_preview": [[73, 88], ["all_clean_ds.sort", "range", "len", "read_folder", "datasets.add_corruption.corrupt", "os.listdir", "ds_to_corrupt.append", "str"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_folder", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.corrupt"], ["def", "get_preview", "(", "args", ")", ":", "\n", "# Get path and names of all clean and corrupted datasetsClean'", "\n", "    ", "all_clean_ds", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "data_path", ")", "]", "\n", "all_clean_ds", "=", "[", "x", "for", "x", "in", "all_clean_ds", "if", "not", "'.'", "in", "x", "and", "not", "x", "==", "'__pycache__'", "and", "not", "x", "==", "'00_datasets'", "]", "\n", "all_clean_ds", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ")", "\n", "\n", "ds_to_corrupt", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "all_clean_ds", ")", ")", ":", "\n", "        ", "if", "args", "[", "'1_'", "+", "str", "(", "i", ")", "]", ":", "\n", "            ", "ds_to_corrupt", ".", "append", "(", "all_clean_ds", "[", "i", "]", ")", "\n", "\n", "", "", "for", "this_ds", "in", "ds_to_corrupt", ":", "\n", "        ", "clean_imgs", "=", "read_folder", "(", "data_path", "+", "'/'", "+", "this_ds", "+", "'/Train/Clean'", ",", "max_size", "=", "1", ")", "\n", "res", "=", "corrupt", "(", "clean_imgs", ",", "args", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.launch_code.corrupt_db": [[89, 131], ["all_clean_ds.sort", "params.items", "range", "len", "read_folder", "write_json", "write_json", "range", "os.listdir", "ds_to_corrupt.append", "os.path.exists", "os.makedirs", "ValueError", "datasets.add_corruption.corrupt", "print_array", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_folder", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.write_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.write_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.corrupt", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.print_array"], ["", "def", "corrupt_db", "(", "args", ",", "def_p", ")", ":", "\n", "# Get path and names of all clean and corrupted datasets", "\n", "    ", "all_clean_ds", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "data_path", ")", "]", "\n", "all_clean_ds", "=", "[", "x", "for", "x", "in", "all_clean_ds", "if", "not", "'.'", "in", "x", "and", "not", "x", "==", "'__pycache__'", "and", "not", "x", "==", "'00_datasets'", "]", "\n", "all_clean_ds", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ")", "\n", "\n", "# Compute a string to identify corruption settings ", "\n", "corr_name", "=", "args", "[", "'1_cor_name'", "]", "\n", "full_name", "=", "corr_name", "+", "args", "[", "'1_cor_name'", "]", "\n", "params", "=", "def_p", "[", "args", "[", "'1_default'", "]", "[", "0", "]", "]", "\n", "dict", "=", "{", "'1_default'", ":", "args", "[", "'1_default'", "]", "[", "0", "]", "}", "\n", "\n", "if", "args", "[", "'1_HE'", "]", ":", "\n", "        ", "corr_name", "+=", "'HE'", "\n", "", "idx", "=", "0", "\n", "for", "key", ",", "value", "in", "params", ".", "items", "(", ")", ":", "\n", "        ", "corr_name", "+=", "'_'", "+", "key", "\n", "corr_name", "+=", "args", "[", "'1_p_'", "+", "str", "(", "idx", ")", "]", "\n", "dict", "[", "key", "]", "=", "args", "[", "'1_p_'", "+", "str", "(", "idx", ")", "]", "\n", "idx", "+=", "1", "\n", "\n", "", "ds_to_corrupt", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "all_clean_ds", ")", ")", ":", "\n", "        ", "if", "args", "[", "'1_'", "+", "str", "(", "i", ")", "]", ":", "\n", "            ", "ds_to_corrupt", ".", "append", "(", "all_clean_ds", "[", "i", "]", ")", "\n", "\n", "", "", "for", "this_ds", "in", "ds_to_corrupt", ":", "\n", "        ", "clean_imgs", "=", "read_folder", "(", "data_path", "+", "'/'", "+", "this_ds", "+", "'/Test/Clean'", ")", "\n", "dest_path", "=", "data_path", "+", "'/'", "+", "this_ds", "+", "'/Test/'", "+", "args", "[", "'1_cor_name'", "]", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dest_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dest_path", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'The %s database has already a %s corruption folder'", "%", "(", "this_ds", ",", "args", "[", "'1_cor_name'", "]", ")", ")", "\n", "\n", "", "write_json", "(", "dict", ",", "dest_path", "+", "'/00_description.json'", ")", "\n", "write_json", "(", "dict", ",", "data_path", "+", "'/'", "+", "this_ds", "+", "'/Train/'", "+", "args", "[", "'1_cor_name'", "]", "+", "'/00_description.json'", ")", "\n", "\n", "# For 1 clean image, create 5 corrupted images (only for the test set)", "\n", "for", "repet", "in", "range", "(", "5", ")", ":", "\n", "            ", "corr_imgs", "=", "corrupt", "(", "clean_imgs", ",", "args", ")", "\n", "print_array", "(", "corr_imgs", ",", "data_path", "+", "'/'", "+", "this_ds", "+", "'/Test/'", "+", "args", "[", "'1_cor_name'", "]", ",", "'_'", "+", "str", "(", "repet", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.launch_code.train_net": [[136, 159], ["instantiate_net", "print", "my_net.fit", "print", "my_net.print_learning_curves", "print", "my_net.load_weights", "my_net.evaluate", "colored", "colored", "args.copy", "multiprocessing.Process", "multiprocessing.Process.start", "multiprocessing.Process.join"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.instantiate_net.instantiate_net", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.fit", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.print_learning_curves", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.load_weights", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.evaluate"], ["def", "train_net", "(", "args", ")", ":", "\n", "    ", "def", "call_training", "(", "this_exp", ")", ":", "\n", "        ", "my_dataset", ",", "my_net", "=", "instantiate_net", "(", "this_exp", ")", "\n", "print", "(", "colored", "(", "'Start to train the network for experiment : %s.'", ",", "'red'", ")", "%", "(", "my_net", ".", "exp_name", ")", ")", "\n", "my_net", ".", "fit", "(", "this_exp", ",", "my_dataset", ")", "\n", "print", "(", "colored", "(", "'The network is trained.'", ",", "'red'", ")", ")", "\n", "my_net", ".", "print_learning_curves", "(", ")", "\n", "print", "(", "'curves printed'", ")", "\n", "my_net", ".", "load_weights", "(", "my_net", ".", "exp_name", ")", "\n", "my_net", ".", "evaluate", "(", "my_dataset", ",", "print_pred", "=", "True", ",", "image_wise", "=", "True", ",", "pixel_wise", "=", "True", ")", "\n", "\n", "", "for", "this_dataset", "in", "args", "[", "'3_ds'", "]", ":", "\n", "        ", "for", "this_architecture", "in", "args", "[", "'3_model_arch'", "]", ":", "\n", "            ", "for", "this_training", "in", "args", "[", "'3_train'", "]", ":", "\n", "\n", "                ", "this_exp", "=", "args", ".", "copy", "(", ")", "\n", "this_exp", "[", "'3_ds'", "]", "=", "this_dataset", "\n", "this_exp", "[", "'3_model_arch'", "]", "=", "this_architecture", "\n", "this_exp", "[", "'3_train'", "]", "=", "this_training", "\n", "\n", "p", "=", "Process", "(", "target", "=", "call_training", ",", "args", "=", "(", "this_exp", ",", ")", ")", "\n", "p", ".", "start", "(", ")", "\n", "p", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.launch_code.evaluate_net": [[165, 180], ["read_json", "instantiate_net", "my_net.load_weights", "my_net.evaluate", "read_json", "instantiate_net", "my_net.load_weights", "my_net.evaluate_MCDropout"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.instantiate_net.instantiate_net", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.load_weights", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.evaluate", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.instantiate_net.instantiate_net", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.load_weights", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.evaluate_MCDropout"], ["def", "evaluate_net", "(", "args", ")", ":", "\n", "    ", "if", "args", "[", "'4_ROC'", "]", "or", "args", "[", "'4_ROC_pixel'", "]", ":", "\n", "        ", "for", "this_exp", "in", "args", "[", "'4_exp'", "]", ":", "\n", "            ", "this_args", "=", "read_json", "(", "root_path", "+", "'/Experiments/'", "+", "this_exp", "+", "'/00_description.json'", ")", "\n", "my_dataset", ",", "my_net", "=", "instantiate_net", "(", "this_args", ")", "\n", "my_net", ".", "load_weights", "(", "this_exp", ")", "\n", "my_net", ".", "evaluate", "(", "my_dataset", ",", "print_pred", "=", "args", "[", "'4_ROC_printpred'", "]", ",", "image_wise", "=", "args", "[", "'4_ROC'", "]", ",", "pixel_wise", "=", "args", "[", "'4_ROC_pixel'", "]", ")", "\n", "\n", "", "", "if", "args", "[", "'4_MCdrop'", "]", "or", "args", "[", "'4_MCdrop_pixel'", "]", ":", "\n", "        ", "for", "this_exp", "in", "args", "[", "'4_exp'", "]", ":", "\n", "            ", "this_args", "=", "read_json", "(", "root_path", "+", "'/Experiments/'", "+", "this_exp", "+", "'/00_description.json'", ")", "\n", "this_args", "[", "'4_MCdrop'", "]", "=", "True", "\n", "_", ",", "my_net", "=", "instantiate_net", "(", "this_args", ")", "\n", "my_net", ".", "load_weights", "(", "this_exp", ")", "\n", "my_net", ".", "evaluate_MCDropout", "(", "this_args", ",", "print_pred", "=", "args", "[", "'4_MCdrop_printpred'", "]", ",", "image_wise", "=", "args", "[", "'4_MCdrop'", "]", ",", "pixel_wise", "=", "args", "[", "'4_MCdrop_pixel'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.callbacks.HistoryCheckpoint.__init__": [[22, 25], ["tensorflow.keras.callbacks.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.__init__"], ["    ", "def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "super", "(", "Callback", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "filename", "=", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.callbacks.HistoryCheckpoint.on_train_begin": [[26, 29], ["None"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "[", "]", "\n", "self", ".", "history", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.callbacks.HistoryCheckpoint.on_epoch_end": [[30, 39], ["callbacks.HistoryCheckpoint.epoch.append", "logs.items", "callbacks.HistoryCheckpoint.history[].append", "open", "pickle.dump"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "epoch", ".", "append", "(", "epoch", ")", "\n", "for", "k", ",", "v", "in", "logs", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "not", "in", "self", ".", "history", ":", "\n", "                ", "self", ".", "history", "[", "k", "]", "=", "[", "]", "\n", "", "self", ".", "history", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "with", "open", "(", "self", ".", "filename", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "self", ".", "history", ",", "f", ")", "", "", "", "", ""]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.psnr": [[19, 25], ["str", "str", "np.log10", "np.log10", "np.mean"], "function", ["None"], ["def", "psnr", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "assert", "y_true", ".", "shape", "==", "y_pred", ".", "shape", ",", "\"Cannot calculate PSNR. Input shapes not same.\"", "\" y_true shape = %s, y_pred shape = %s\"", "%", "(", "str", "(", "y_true", ".", "shape", ")", ",", "\n", "str", "(", "y_pred", ".", "shape", ")", ")", "\n", "\n", "return", "20", "*", "np", ".", "log10", "(", "255", ")", "-", "10.", "*", "np", ".", "log10", "(", "np", ".", "mean", "(", "(", "y_pred", "-", "y_true", ")", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.l_metric": [[34, 53], ["np.sum.astype", "np.sum", "np.sum", "np.count_nonzero", "np.sum", "np.sqrt", "np.max", "np.sum"], "function", ["None"], ["def", "l_metric", "(", "diff", ",", "norm", ")", ":", "\n", "    ", "diff", "=", "diff", ".", "astype", "(", "np", ".", "float64", ")", "\n", "if", "diff", ".", "shape", "[", "-", "1", "]", "!=", "1", ":", "\n", "        ", "diff", "=", "np", ".", "sum", "(", "diff", ",", "axis", "=", "-", "1", ")", "\n", "diff_square", "=", "np", ".", "sum", "(", "diff", "**", "2", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "diff_square", "=", "diff", "**", "2", "\n", "", "if", "norm", "==", "'l0'", ":", "\n", "        ", "return", "np", ".", "count_nonzero", "(", "diff", ")", "\n", "", "elif", "norm", "==", "'l1'", ":", "\n", "        ", "W", ",", "H", "=", "diff", ".", "shape", "[", "0", "]", ",", "diff", ".", "shape", "[", "1", "]", "\n", "return", "np", ".", "sum", "(", "diff", ")", "/", "(", "W", "*", "H", ")", "\n", "", "elif", "norm", "==", "'l2'", ":", "\n", "        ", "W", ",", "H", "=", "diff", ".", "shape", "[", "0", "]", ",", "diff", ".", "shape", "[", "1", "]", "\n", "return", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "diff_square", ")", "/", "(", "W", "*", "H", ")", ")", "\n", "", "elif", "norm", "==", "'linf'", ":", "\n", "        ", "return", "np", ".", "max", "(", "diff", ")", "\n", "", "else", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.compute_ROC": [[63, 95], ["zip", "diff", "np.array", "np.copy", "all_TP.append", "all_FP.append", "thres_matrix[].append", "np.argsort", "np.where", "np.cumsum", "ROC.l_metric", "np.diff"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.l_metric", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff"], ["def", "compute_ROC", "(", "x", ",", "y", ",", "y_GT", ")", ":", "\n", "# Compute all thresholds", "\n", "    ", "thres_matrix", "=", "{", "'l0'", ":", "[", "]", ",", "'l1'", ":", "[", "]", ",", "'l2'", ":", "[", "]", ",", "'linf'", ":", "[", "]", "}", "\n", "for", "this_x", ",", "this_y", "in", "zip", "(", "x", ",", "y", ")", ":", "\n", "        ", "this_diff", "=", "diff", "(", "this_x", ",", "this_y", ")", "\n", "for", "this_norm", "in", "[", "'l0'", ",", "'l1'", ",", "'l2'", ",", "'linf'", "]", ":", "\n", "            ", "thres_matrix", "[", "this_norm", "]", ".", "append", "(", "l_metric", "(", "this_diff", ",", "this_norm", ")", ")", "\n", "\n", "# Compute ROC Curves for all norms", "\n", "", "", "all_TP", ",", "all_FP", "=", "[", "]", ",", "[", "]", "\n", "for", "this_norm", "in", "[", "'l0'", ",", "'l1'", ",", "'l2'", ",", "'linf'", "]", ":", "\n", "        ", "y_score", "=", "np", ".", "array", "(", "thres_matrix", "[", "this_norm", "]", ")", "\n", "# sort scores and corresponding truth values", "\n", "desc_score_indices", "=", "np", ".", "argsort", "(", "y_score", ",", "kind", "=", "\"mergesort\"", ")", "[", ":", ":", "-", "1", "]", "\n", "y_score", "=", "y_score", "[", "desc_score_indices", "]", "\n", "y_copy", "=", "np", ".", "copy", "(", "y_GT", ")", "\n", "y_labels", "=", "y_copy", "[", "desc_score_indices", "]", "\n", "\n", "# Keep transition thresholds", "\n", "distinct_value_indices", "=", "np", ".", "where", "(", "np", ".", "diff", "(", "y_score", ")", ")", "[", "0", "]", "\n", "threshold_idxs", "=", "np", ".", "r_", "[", "distinct_value_indices", ",", "y_labels", ".", "size", "-", "1", "]", "\n", "\n", "tps", "=", "np", ".", "cumsum", "(", "y_labels", ")", "[", "threshold_idxs", "]", "\n", "fps", "=", "1", "+", "threshold_idxs", "-", "tps", "\n", "\n", "tps", "=", "[", "0", "]", "+", "(", "tps", "/", "tps", "[", "-", "1", "]", ")", ".", "tolist", "(", ")", "\n", "fps", "=", "[", "0", "]", "+", "(", "fps", "/", "fps", "[", "-", "1", "]", ")", ".", "tolist", "(", ")", "\n", "\n", "all_TP", ".", "append", "(", "tps", ")", "\n", "all_FP", ".", "append", "(", "fps", ")", "\n", "\n", "", "return", "all_TP", ",", "all_FP", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.compute_ROC_pixel_wise": [[106, 145], ["zip", "np.array", "thres_matrix.ravel.ravel", "np.array", "np.copy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "diff", "thres_matrix.ravel.append", "mask.ravel", "np.argsort", "np.where", "np.cumsum", "np.sum", "np.squeeze", "np.diff"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff"], ["def", "compute_ROC_pixel_wise", "(", "x_in", ",", "y_in", ",", "mask_in", ")", ":", "\n", "    ", "x", ",", "y", ",", "mask", "=", "copy", ".", "deepcopy", "(", "x_in", ")", ",", "copy", ".", "deepcopy", "(", "y_in", ")", ",", "copy", ".", "deepcopy", "(", "mask_in", ")", "\n", "mask", "=", "mask", ">", "0.9", "\n", "#x, y = np.squeeze(x, axis=-1), np.squeeze(y, axis=-1)", "\n", "\n", "thres_matrix", "=", "[", "]", "\n", "for", "this_x", ",", "this_y", "in", "zip", "(", "x", ",", "y", ")", ":", "\n", "        ", "this_diff", "=", "diff", "(", "this_x", ",", "this_y", ")", "\n", "if", "this_diff", ".", "shape", "[", "-", "1", "]", "!=", "1", ":", "\n", "            ", "this_diff", "=", "np", ".", "sum", "(", "this_diff", ",", "axis", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "this_diff", "=", "np", ".", "squeeze", "(", "this_diff", ",", "axis", "=", "-", "1", ")", "\n", "", "thres_matrix", ".", "append", "(", "this_diff", ")", "\n", "", "thres_matrix", "=", "np", ".", "array", "(", "thres_matrix", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "thres_matrix", "=", "thres_matrix", ".", "ravel", "(", "order", "=", "'C'", ")", "\n", "y_GT", "=", "np", ".", "array", "(", "mask", ".", "ravel", "(", "order", "=", "'C'", ")", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "# Compute ROC Curves", "\n", "# sort scores and corresponding truth values", "\n", "desc_score_indices", "=", "np", ".", "argsort", "(", "thres_matrix", ",", "kind", "=", "\"mergesort\"", ")", "[", ":", ":", "-", "1", "]", "\n", "y_score", "=", "thres_matrix", "[", "desc_score_indices", "]", "\n", "y_copy", "=", "np", ".", "copy", "(", "y_GT", ")", "\n", "y_labels", "=", "y_copy", "[", "desc_score_indices", "]", "\n", "\n", "# Keep transition thresholds", "\n", "distinct_value_indices", "=", "np", ".", "where", "(", "np", ".", "diff", "(", "y_score", ")", ")", "[", "0", "]", "\n", "threshold_idxs", "=", "np", ".", "r_", "[", "distinct_value_indices", ",", "y_labels", ".", "size", "-", "1", "]", "\n", "\n", "tps", "=", "np", ".", "cumsum", "(", "y_labels", ")", "[", "threshold_idxs", "]", "\n", "\n", "fps", "=", "1", "+", "threshold_idxs", "-", "tps", "\n", "\n", "tps", "=", "[", "0", "]", "+", "(", "tps", "/", "tps", "[", "-", "1", "]", ")", ".", "tolist", "(", ")", "\n", "fps", "=", "[", "0", "]", "+", "(", "fps", "/", "fps", "[", "-", "1", "]", ")", ".", "tolist", "(", ")", "\n", "\n", "#fps, tps, _ = roc_curve(y_GT, thres_matrix)", "\n", "\n", "return", "tps", ",", "fps", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.compute_combinedROC": [[158, 231], ["zip", "diff", "diff", "np.array", "np.array", "np.copy", "np.copy", "enumerate", "all_TP.append", "all_FP.append", "thres_matrix1[].append", "thres_matrix2[].append", "np.argsort", "np.argsort", "np.where", "np.where", "enumerate", "round", "print", "ROC.l_metric", "ROC.l_metric", "np.diff", "np.diff", "eligible1.append", "len", "auc", "len", "np.where", "np.cumsum", "len", "combined_labels.append", "np.diff"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.l_metric", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.l_metric", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff"], ["def", "compute_combinedROC", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "binary_test_labels", ")", ":", "\n", "    ", "from", "sklearn", ".", "metrics", "import", "auc", "\n", "# Compute all thresholds", "\n", "thres_matrix1", "=", "{", "'l0'", ":", "[", "]", ",", "'l1'", ":", "[", "]", ",", "'l2'", ":", "[", "]", ",", "'linf'", ":", "[", "]", "}", "\n", "thres_matrix2", "=", "{", "'l0'", ":", "[", "]", ",", "'l1'", ":", "[", "]", ",", "'l2'", ":", "[", "]", ",", "'linf'", ":", "[", "]", "}", "\n", "for", "this_x1", ",", "this_y1", ",", "this_x2", ",", "this_y2", "in", "zip", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ":", "\n", "        ", "this_diff1", "=", "diff", "(", "this_x1", ",", "this_y1", ")", "\n", "this_diff2", "=", "diff", "(", "this_x2", ",", "this_y2", ")", "\n", "for", "this_norm", "in", "[", "'l0'", ",", "'l1'", ",", "'l2'", ",", "'linf'", "]", ":", "\n", "            ", "thres_matrix1", "[", "this_norm", "]", ".", "append", "(", "l_metric", "(", "this_diff1", ",", "this_norm", ")", ")", "\n", "thres_matrix2", "[", "this_norm", "]", ".", "append", "(", "l_metric", "(", "this_diff2", ",", "this_norm", ")", ")", "\n", "\n", "# Compute ROC Curves for all norms", "\n", "", "", "all_TP", ",", "all_FP", "=", "[", "]", ",", "[", "]", "\n", "for", "this_norm", "in", "[", "'l0'", ",", "'l1'", ",", "'l2'", ",", "'linf'", "]", ":", "\n", "#for this_norm in ['l0']: ", "\n", "        ", "y_score1", "=", "np", ".", "array", "(", "thres_matrix1", "[", "this_norm", "]", ")", "\n", "y_score2", "=", "np", ".", "array", "(", "thres_matrix2", "[", "this_norm", "]", ")", "\n", "# sort scores and corresponding truth values", "\n", "desc_score_indices1", "=", "np", ".", "argsort", "(", "y_score1", ",", "kind", "=", "\"mergesort\"", ")", "[", ":", ":", "-", "1", "]", "\n", "y_score1", "=", "y_score1", "[", "desc_score_indices1", "]", "\n", "y_copy1", "=", "np", ".", "copy", "(", "binary_test_labels", ")", "\n", "y_label1", "=", "y_copy1", "[", "desc_score_indices1", "]", "\n", "\n", "desc_score_indices2", "=", "np", ".", "argsort", "(", "y_score2", ",", "kind", "=", "\"mergesort\"", ")", "[", ":", ":", "-", "1", "]", "\n", "y_score2", "=", "y_score2", "[", "desc_score_indices2", "]", "\n", "y_copy2", "=", "np", ".", "copy", "(", "binary_test_labels", ")", "\n", "y_label2", "=", "y_copy2", "[", "desc_score_indices2", "]", "\n", "\n", "# Keep transition thresholds", "\n", "distinct_value_indices1", "=", "np", ".", "where", "(", "np", ".", "diff", "(", "y_score1", ")", ")", "[", "0", "]", "\n", "threshold_idxs1", "=", "np", ".", "r_", "[", "distinct_value_indices1", ",", "y_label1", ".", "size", "-", "1", "]", "\n", "\n", "distinct_value_indices2", "=", "np", ".", "where", "(", "np", ".", "diff", "(", "y_score2", ")", ")", "[", "0", "]", "\n", "threshold_idxs2", "=", "np", ".", "r_", "[", "distinct_value_indices2", ",", "y_label2", ".", "size", "-", "1", "]", "\n", "\n", "combined_TP", ",", "combined_FP", "=", "[", "]", ",", "[", "]", "\n", "eligible1", ",", "idx1", "=", "[", "]", ",", "0", "\n", "max_auc", "=", "0", "\n", "for", "pos1", ",", "tresh1", "in", "enumerate", "(", "threshold_idxs1", ")", ":", "\n", "# Add new selected item by thres1", "\n", "            ", "while", "idx1", "<", "len", "(", "y_score1", ")", "and", "(", "y_score1", "[", "idx1", "]", ">", "tresh1", ")", ":", "\n", "                ", "eligible1", ".", "append", "(", "desc_score_indices1", "[", "idx1", "]", ")", "\n", "idx1", "+=", "1", "\n", "\n", "", "eligible2", ",", "idx2", "=", "[", "]", ",", "0", "\n", "combined_labels", "=", "[", "]", "\n", "for", "pos2", ",", "tresh2", "in", "enumerate", "(", "threshold_idxs2", ")", ":", "\n", "                ", "while", "idx2", "<", "len", "(", "y_score2", ")", "and", "(", "y_score2", "[", "idx2", "]", ">", "tresh2", ")", ":", "\n", "                    ", "if", "desc_score_indices2", "[", "idx2", "]", "in", "eligible1", ":", "\n", "                        ", "combined_labels", ".", "append", "(", "y_label2", "[", "idx2", "]", ")", "\n", "", "idx2", "+=", "1", "\n", "", "", "if", "len", "(", "combined_labels", ")", "!=", "0", ":", "\n", "                ", "distinct_value_indices", "=", "np", ".", "where", "(", "np", ".", "diff", "(", "y_score2", ")", ")", "[", "0", "]", "\n", "threshold_idxs", "=", "np", ".", "r_", "[", "distinct_value_indices", ",", "y_label2", ".", "size", "-", "1", "]", "\n", "tps", "=", "np", ".", "cumsum", "(", "combined_labels", ")", "[", "threshold_idxs", "]", "\n", "fps", "=", "1", "+", "threshold_idxs", "-", "tps", "\n", "tps", "=", "[", "0", "]", "+", "(", "tps", "/", "tps", "[", "-", "1", "]", ")", ".", "tolist", "(", ")", "\n", "fps", "=", "[", "0", "]", "+", "(", "fps", "/", "fps", "[", "-", "1", "]", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "                ", "tps", "=", "[", "0", ",", "1", "]", "\n", "fps", "=", "[", "0", ",", "1", "]", "\n", "\n", "", "this_auc", "=", "round", "(", "auc", "(", "fps", ",", "tps", ")", ",", "2", ")", "\n", "print", "(", "this_norm", ",", "this_auc", ",", "fps", ")", "\n", "if", "this_auc", ">", "max_auc", ":", "\n", "                ", "max_auc", "=", "this_auc", "\n", "temp_fps", "=", "fps", "\n", "temp_tps", "=", "tps", "\n", "", "", "all_TP", ".", "append", "(", "temp_tps", ")", "\n", "all_FP", ".", "append", "(", "temp_fps", ")", "\n", "\n", "", "return", "all_TP", ",", "all_FP", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.compute_2DcombinedROC": [[243, 321], ["zip", "diff", "diff", "np.array", "np.array", "np.argsort", "np.copy", "np.argsort", "np.copy", "enumerate", "all_TP.append", "all_FP.append", "thres_matrix1[].append", "thres_matrix2[].append", "np.where", "np.where", "enumerate", "tps.append", "fps.append", "ROC.l_metric", "ROC.l_metric", "np.diff", "np.diff", "eligible1.append", "np.sum", "tps.append", "fps.append", "len", "len", "np.sum", "len", "len", "combined_labels.append", "len", "np.sum"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.l_metric", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.l_metric", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff"], ["def", "compute_2DcombinedROC", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ",", "binary_test_labels", ")", ":", "\n", "    ", "from", "sklearn", ".", "metrics", "import", "auc", "\n", "# Compute all thresholds", "\n", "thres_matrix1", "=", "{", "'l0'", ":", "[", "]", ",", "'l1'", ":", "[", "]", ",", "'l2'", ":", "[", "]", ",", "'linf'", ":", "[", "]", "}", "\n", "thres_matrix2", "=", "{", "'l0'", ":", "[", "]", ",", "'l1'", ":", "[", "]", ",", "'l2'", ":", "[", "]", ",", "'linf'", ":", "[", "]", "}", "\n", "for", "this_x1", ",", "this_y1", ",", "this_x2", ",", "this_y2", "in", "zip", "(", "x1", ",", "y1", ",", "x2", ",", "y2", ")", ":", "\n", "        ", "this_diff1", "=", "diff", "(", "this_x1", ",", "this_y1", ")", "\n", "this_diff2", "=", "diff", "(", "this_x2", ",", "this_y2", ")", "\n", "for", "this_norm", "in", "[", "'l0'", ",", "'l1'", ",", "'l2'", ",", "'linf'", "]", ":", "\n", "            ", "thres_matrix1", "[", "this_norm", "]", ".", "append", "(", "l_metric", "(", "this_diff1", ",", "this_norm", ")", ")", "\n", "thres_matrix2", "[", "this_norm", "]", ".", "append", "(", "l_metric", "(", "this_diff2", ",", "this_norm", ")", ")", "\n", "\n", "# Compute ROC Curves for all norms", "\n", "", "", "all_TP", ",", "all_FP", "=", "[", "]", ",", "[", "]", "\n", "for", "this_norm", "in", "[", "'l0'", ",", "'l1'", ",", "'l2'", ",", "'linf'", "]", ":", "\n", "#for this_norm in ['linf']: ", "\n", "        ", "y_score1", "=", "np", ".", "array", "(", "thres_matrix1", "[", "this_norm", "]", ")", "\n", "y_score2", "=", "np", ".", "array", "(", "thres_matrix2", "[", "this_norm", "]", ")", "\n", "# sort scores and corresponding truth values", "\n", "asc_score_indices1", "=", "np", ".", "argsort", "(", "y_score1", ",", "kind", "=", "\"mergesort\"", ")", "\n", "y_score1", "=", "y_score1", "[", "asc_score_indices1", "]", "\n", "y_copy1", "=", "np", ".", "copy", "(", "binary_test_labels", ")", "\n", "y_label1", "=", "y_copy1", "[", "asc_score_indices1", "]", "\n", "\n", "asc_score_indices2", "=", "np", ".", "argsort", "(", "y_score2", ",", "kind", "=", "\"mergesort\"", ")", "\n", "y_score2", "=", "y_score2", "[", "asc_score_indices2", "]", "\n", "y_copy2", "=", "np", ".", "copy", "(", "binary_test_labels", ")", "\n", "y_label2", "=", "y_copy2", "[", "asc_score_indices2", "]", "\n", "\n", "# Keep transition thresholds", "\n", "distinct_value_indices1", "=", "np", ".", "where", "(", "np", ".", "diff", "(", "y_score1", ")", ")", "[", "0", "]", "\n", "threshold_idxs1", "=", "np", ".", "r_", "[", "distinct_value_indices1", ",", "y_label1", ".", "size", "-", "1", "]", "\n", "\n", "distinct_value_indices2", "=", "np", ".", "where", "(", "np", ".", "diff", "(", "y_score2", ")", ")", "[", "0", "]", "\n", "threshold_idxs2", "=", "np", ".", "r_", "[", "distinct_value_indices2", ",", "y_label2", ".", "size", "-", "1", "]", "\n", "\n", "combined_TP", ",", "combined_FP", "=", "[", "]", ",", "[", "]", "\n", "eligible1", ",", "idx1", "=", "[", "]", ",", "0", "\n", "max_auc", "=", "0", "\n", "temp_tps", ",", "temp_fps", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "pos1", ",", "tresh1", "in", "enumerate", "(", "y_score1", "[", "threshold_idxs1", "]", ")", ":", "\n", "# Add new selected item by thres1", "\n", "            ", "while", "idx1", "<", "len", "(", "y_score1", ")", "and", "(", "y_score1", "[", "idx1", "]", "<", "tresh1", ")", ":", "\n", "                ", "eligible1", ".", "append", "(", "asc_score_indices1", "[", "idx1", "]", ")", "\n", "idx1", "+=", "1", "\n", "\n", "", "eligible2", ",", "idx2", "=", "[", "]", ",", "0", "\n", "combined_labels", "=", "[", "]", "\n", "tps", ",", "fps", "=", "[", "0", "]", ",", "[", "0", "]", "\n", "for", "pos2", ",", "tresh2", "in", "enumerate", "(", "y_score2", "[", "threshold_idxs2", "]", ")", ":", "\n", "                ", "while", "idx2", "<", "len", "(", "y_score2", ")", "and", "(", "y_score2", "[", "idx2", "]", "<", "tresh2", ")", ":", "\n", "                    ", "if", "asc_score_indices2", "[", "idx2", "]", "in", "eligible1", ":", "\n", "                        ", "combined_labels", ".", "append", "(", "y_label2", "[", "idx2", "]", ")", "\n", "", "idx2", "+=", "1", "\n", "\n", "", "fp", "=", "np", ".", "sum", "(", "combined_labels", ")", "\n", "tp", "=", "np", ".", "sum", "(", "y_label2", ")", "-", "fp", "\n", "tn", "=", "len", "(", "combined_labels", ")", "-", "fp", "\n", "fn", "=", "len", "(", "y_label2", ")", "-", "np", ".", "sum", "(", "y_label2", ")", "-", "tn", "\n", "\n", "tps", ".", "append", "(", "tp", "/", "(", "tp", "+", "fn", ")", "if", "tp", "+", "fn", "!=", "0", "else", "0", ")", "\n", "fps", ".", "append", "(", "fp", "/", "(", "tn", "+", "fp", ")", "if", "tn", "+", "fp", "!=", "0", "else", "0", ")", "\n", "", "tps", ".", "append", "(", "1", ")", "\n", "fps", ".", "append", "(", "1", ")", "\n", "\n", "if", "len", "(", "temp_fps", ")", "==", "0", ":", "\n", "                ", "temp_tps", "=", "[", "tps", "]", "\n", "temp_fps", "=", "[", "fps", "]", "\n", "", "else", ":", "\n", "                ", "temp_tps", "+=", "[", "tps", "]", "\n", "temp_fps", "+=", "[", "fps", "]", "\n", "\n", "\n", "", "", "all_TP", ".", "append", "(", "temp_tps", ")", "\n", "all_FP", ".", "append", "(", "temp_fps", ")", "\n", "\n", "", "return", "all_TP", ",", "all_FP", "", "", ""]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.patch.patchify": [[16, 57], ["math.ceil", "math.ceil", "range", "ValueError", "ValueError", "ValueError", "range", "up_left_corner.append", "range", "numpy.array", "numpy.vstack", "numpy.vstack", "up_left_corner.append", "numpy.vstack", "up_left_corner.append", "numpy.vstack", "up_left_corner.append", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["def", "patchify", "(", "im", ",", "patch_row", ",", "patch_col", ",", "stride_row", ",", "stride_col", ")", ":", "\n", "    ", "im_row", ",", "im_col", "=", "im", ".", "shape", "[", "0", "]", ",", "im", ".", "shape", "[", "1", "]", "\n", "if", "patch_row", ">", "im_row", ":", "\n", "        ", "raise", "ValueError", "(", "'Patch height is higher than the height of the original image.'", ")", "\n", "", "if", "patch_col", ">", "im_col", ":", "\n", "        ", "raise", "ValueError", "(", "'Patch width is higher than the width of the original image.'", ")", "\n", "", "if", "patch_row", "<", "0", "or", "patch_col", "<", "0", ":", "\n", "        ", "raise", "ValueError", "(", "'Width and height must be greater than zero.'", ")", "\n", "", "if", "patch_row", "==", "im_row", "and", "patch_col", "==", "im_col", ":", "\n", "        ", "return", "im", "\n", "", "nb_row", "=", "math", ".", "ceil", "(", "(", "im_row", "-", "patch_row", ")", "/", "stride_row", ")", "\n", "nb_col", "=", "math", ".", "ceil", "(", "(", "im_col", "-", "patch_col", ")", "/", "stride_col", ")", "\n", "\n", "patches", "=", "None", "\n", "up_left_corner", "=", "[", "]", "\n", "\n", "for", "idx_row", "in", "range", "(", "0", ",", "nb_row", ")", ":", "\n", "        ", "for", "idx_col", "in", "range", "(", "0", ",", "nb_col", ")", ":", "\n", "            ", "if", "idx_row", "==", "0", "and", "idx_col", "==", "0", ":", "\n", "                ", "patches", "=", "np", ".", "array", "(", "[", "im", "[", "0", ":", "patch_row", ",", "0", ":", "patch_col", ",", ":", "]", "]", ")", "\n", "", "else", ":", "\n", "                ", "temp", "=", "im", "[", "idx_row", "*", "stride_row", ":", "idx_row", "*", "stride_row", "+", "patch_row", ",", "idx_col", "*", "stride_col", ":", "idx_col", "*", "stride_col", "+", "patch_col", ",", ":", "]", "\n", "patches", "=", "np", ".", "vstack", "(", "(", "patches", ",", "np", ".", "array", "(", "[", "temp", "]", ")", ")", ")", "\n", "\n", "", "up_left_corner", ".", "append", "(", "(", "idx_row", "*", "stride_row", ",", "idx_col", "*", "stride_col", ")", ")", "\n", "\n", "if", "idx_col", "==", "nb_col", "-", "1", "and", "idx_col", "*", "stride_col", "+", "patch_col", "<", "im_col", ":", "\n", "                ", "temp", "=", "im", "[", "idx_row", "*", "stride_row", ":", "idx_row", "*", "stride_row", "+", "patch_row", ",", "im_col", "-", "(", "patch_col", "+", "1", ")", ":", "im_col", "-", "1", ",", ":", "]", "\n", "patches", "=", "np", ".", "vstack", "(", "(", "patches", ",", "np", ".", "array", "(", "[", "temp", "]", ")", ")", ")", "\n", "up_left_corner", ".", "append", "(", "(", "idx_row", "*", "stride_row", ",", "im_col", "-", "(", "patch_col", "+", "1", ")", ")", ")", "\n", "", "", "if", "idx_row", "==", "nb_row", "-", "1", "and", "idx_row", "*", "stride_row", "+", "patch_row", "<", "im_row", ":", "\n", "            ", "for", "idx_col", "in", "range", "(", "0", ",", "nb_col", ")", ":", "\n", "                ", "temp", "=", "im", "[", "im_row", "-", "(", "patch_row", "+", "1", ")", ":", "im_row", "-", "1", ",", "idx_col", "*", "stride_col", ":", "idx_col", "*", "stride_col", "+", "patch_col", ",", ":", "]", "\n", "patches", "=", "np", ".", "vstack", "(", "(", "patches", ",", "np", ".", "array", "(", "[", "temp", "]", ")", ")", ")", "\n", "up_left_corner", ".", "append", "(", "(", "im_row", "-", "(", "patch_row", "+", "1", ")", ",", "idx_col", "*", "stride_col", ")", ")", "\n", "if", "idx_col", "==", "nb_col", "-", "1", "and", "idx_col", "*", "stride_col", "+", "patch_col", "<", "im_col", ":", "\n", "                    ", "temp", "=", "im", "[", "im_row", "-", "(", "patch_row", "+", "1", ")", ":", "im_row", "-", "1", ",", "im_col", "-", "(", "patch_col", "+", "1", ")", ":", "im_col", "-", "1", ",", ":", "]", "\n", "patches", "=", "np", ".", "vstack", "(", "(", "patches", ",", "np", ".", "array", "(", "[", "temp", "]", ")", ")", ")", "\n", "up_left_corner", ".", "append", "(", "(", "im_row", "-", "(", "patch_row", "+", "1", ")", ",", "im_col", "-", "(", "patch_col", "+", "1", ")", ")", ")", "\n", "\n", "", "", "", "", "return", "patches", ",", "up_left_corner", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.patch.depatchify": [[71, 81], ["numpy.zeros", "numpy.zeros", "zip", "numpy.divide().astype", "numpy.divide"], "function", ["None"], ["def", "depatchify", "(", "patches", ",", "im_row", ",", "im_col", ",", "up_left_corner", ")", ":", "\n", "    ", "patch_row", ",", "patch_col", ",", "channel", "=", "patches", ".", "shape", "[", "1", "]", ",", "patches", ".", "shape", "[", "2", "]", ",", "patches", ".", "shape", "[", "3", "]", "\n", "result", "=", "np", ".", "zeros", "(", "(", "im_row", ",", "im_col", ",", "channel", ")", ")", "\n", "normalization", "=", "np", ".", "zeros", "(", "(", "im_row", ",", "im_col", ",", "channel", ")", ")", "\n", "for", "this_corner", ",", "this_patch", "in", "zip", "(", "up_left_corner", ",", "patches", ")", ":", "\n", "        ", "result", "[", "this_corner", "[", "0", "]", ":", "this_corner", "[", "0", "]", "+", "patch_row", ",", "this_corner", "[", "1", "]", ":", "this_corner", "[", "1", "]", "+", "patch_col", ",", ":", "]", "+=", "this_patch", "\n", "normalization", "[", "this_corner", "[", "0", "]", ":", "this_corner", "[", "0", "]", "+", "patch_row", ",", "this_corner", "[", "1", "]", ":", "this_corner", "[", "1", "]", "+", "patch_col", ",", ":", "]", "+=", "1", "\n", "\n", "", "normalization", "[", "normalization", "==", "0", "]", "=", "1", "\n", "return", "(", "np", ".", "divide", "(", "result", ",", "normalization", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "", "", ""]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.corrupt_image": [[22, 80], ["add_corruption.add_gaussian", "float", "add_corruption.add_gaussian", "float", "add_corruption.add_stain", "float", "float", "add_corruption.add_stain", "float", "float", "add_corruption.add_scratch", "add_corruption.add_scratch", "add_corruption.add_drops", "float", "int", "float", "add_corruption.add_drops", "float", "int", "float", "random.uniform", "float", "add_corruption.add_stain", "random.uniform", "add_corruption.add_scratch", "add_corruption.add_drops", "float", "add_corruption.add_stain", "random.uniform", "float", "add_corruption.add_scratch", "add_corruption.add_drops", "float", "add_corruption.add_stain", "add_corruption.add_gaussian", "random.uniform", "float", "float", "float", "float", "add_corruption.add_stain", "add_corruption.add_gaussian", "float", "float"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_gaussian", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_gaussian", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_stain", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_stain", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_scratch", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_scratch", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_drops", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_drops", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_stain", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_scratch", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_drops", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_stain", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_scratch", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_drops", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_stain", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_gaussian", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_stain", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_gaussian"], ["def", "corrupt_image", "(", "img", ",", "args", ")", ":", "\n", "    ", "default", "=", "args", "[", "'1_default'", "]", "\n", "if", "default", "==", "[", "'Gaussian'", "]", ":", "\n", "        ", "img_modified", "=", "add_gaussian", "(", "img", ",", "float", "(", "args", "[", "'1_p_0'", "]", ")", ")", "\n", "", "elif", "default", "==", "'Gaussian'", ":", "\n", "        ", "img_modified", "=", "add_gaussian", "(", "img", ",", "float", "(", "args", "[", "'std'", "]", ")", ")", "\n", "\n", "", "elif", "default", "==", "[", "'Stain'", "]", ":", "\n", "        ", "img_modified", "=", "add_stain", "(", "img", ",", "args", "[", "'1_p_0'", "]", ",", "args", "[", "'1_p_1'", "]", ",", "float", "(", "args", "[", "'1_p_2'", "]", ")", ",", "float", "(", "args", "[", "'1_p_3'", "]", ")", ")", "\n", "", "elif", "default", "==", "'Stain'", ":", "\n", "        ", "img_modified", "=", "add_stain", "(", "img", ",", "args", "[", "'size'", "]", ",", "args", "[", "'color'", "]", ",", "float", "(", "args", "[", "'irregularity'", "]", ")", ",", "float", "(", "args", "[", "'blur'", "]", ")", ")", "\n", "\n", "\n", "", "elif", "default", "==", "[", "'Scratch'", "]", ":", "\n", "        ", "img_modified", "=", "add_scratch", "(", "img", ",", "args", "[", "'1_p_0'", "]", ")", "\n", "", "elif", "default", "==", "'Scratch'", ":", "\n", "        ", "img_modified", "=", "add_scratch", "(", "img", ",", "args", "[", "'color'", "]", ")", "\n", "\n", "\n", "", "elif", "default", "==", "[", "'Drops'", "]", ":", "\n", "        ", "img_modified", "=", "add_drops", "(", "img", ",", "args", "[", "'1_p_0'", "]", ",", "args", "[", "'1_p_1'", "]", ",", "float", "(", "args", "[", "'1_p_2'", "]", ")", ",", "int", "(", "args", "[", "'1_p_3'", "]", ")", ",", "float", "(", "args", "[", "'1_p_3'", "]", ")", ")", "\n", "", "elif", "default", "==", "'Drops'", ":", "\n", "        ", "img_modified", "=", "add_drops", "(", "img", ",", "args", "[", "'size'", "]", ",", "args", "[", "'color'", "]", ",", "float", "(", "args", "[", "'irregularity'", "]", ")", ",", "int", "(", "args", "[", "'number'", "]", ")", ",", "float", "(", "args", "[", "'spacing'", "]", ")", ")", "\n", "\n", "\n", "", "elif", "default", "==", "[", "'Structural'", "]", ":", "\n", "        ", "prob", "=", "uniform", "(", "0", ",", "1", ")", "\n", "if", "prob", "<", "float", "(", "args", "[", "'1_p_0'", "]", ")", ":", "\n", "            ", "img_modified", "=", "add_stain", "(", "img", ",", "\"1-12\"", ",", "\"10-220\"", ",", "0.1", ",", "0.15", ")", "\n", "", "elif", "prob", ">=", "float", "(", "args", "[", "'1_p_0'", "]", ")", "and", "prob", "<=", "(", "float", "(", "args", "[", "'1_p_0'", "]", ")", "+", "float", "(", "args", "[", "'1_p_1'", "]", ")", ")", ":", "\n", "            ", "img_modified", "=", "add_scratch", "(", "img", ",", "\"10-220\"", ")", "\n", "", "else", ":", "\n", "            ", "img_modified", "=", "add_drops", "(", "img", ",", "\"1-2\"", ",", "\"10-220\"", ",", "0.1", ",", "10", ",", "0.1", ")", "\n", "", "", "elif", "default", "==", "'Structural'", ":", "\n", "        ", "prob", "=", "uniform", "(", "0", ",", "1", ")", "\n", "if", "prob", "<", "float", "(", "args", "[", "'drops'", "]", ")", ":", "\n", "            ", "img_modified", "=", "add_stain", "(", "img", ",", "\"1-12\"", ",", "\"10-220\"", ",", "0.1", ",", "0.15", ")", "\n", "", "elif", "prob", ">=", "float", "(", "args", "[", "'drops'", "]", ")", "and", "prob", "<=", "(", "float", "(", "args", "[", "'drops'", "]", ")", "+", "float", "(", "args", "[", "'scrath'", "]", ")", ")", ":", "\n", "            ", "img_modified", "=", "add_scratch", "(", "img", ",", "\"10-220\"", ")", "\n", "", "else", ":", "\n", "            ", "img_modified", "=", "add_drops", "(", "img", ",", "\"1-2\"", ",", "\"10-220\"", ",", "0.1", ",", "10", ",", "0.1", ")", "\n", "\n", "", "", "elif", "default", "==", "[", "'StainOrGaussian'", "]", ":", "\n", "        ", "prob", "=", "uniform", "(", "0", ",", "1", ")", "\n", "if", "prob", "<", "float", "(", "args", "[", "'1_p_0'", "]", ")", ":", "\n", "            ", "img_modified", "=", "add_stain", "(", "img", ",", "\"1-12\"", ",", "\"10-220\"", ",", "0.1", ",", "0.15", ")", "\n", "", "else", ":", "\n", "            ", "img_modified", "=", "add_gaussian", "(", "img", ",", "0.1", ")", "\n", "", "", "elif", "default", "==", "'StainOrGaussian'", ":", "\n", "        ", "prob", "=", "uniform", "(", "0", ",", "1", ")", "\n", "if", "prob", "<", "float", "(", "args", "[", "'stain'", "]", ")", ":", "\n", "            ", "img_modified", "=", "add_stain", "(", "img", ",", "\"1-12\"", ",", "\"10-220\"", ",", "0.1", ",", "0.15", ")", "\n", "", "else", ":", "\n", "            ", "img_modified", "=", "add_gaussian", "(", "img", ",", "0.1", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "img_modified", "=", "img", "\n", "", "return", "img_modified", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.corrupt": [[89, 94], ["np.copy", "enumerate", "np.copy", "add_corruption.corrupt_image"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.corrupt_image"], ["def", "corrupt", "(", "im_array", ",", "args", ")", ":", "\n", "    ", "temp", "=", "np", ".", "copy", "(", "im_array", ")", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "np", ".", "copy", "(", "im_array", ")", ")", ":", "\n", "        ", "temp", "[", "idx", "]", "=", "corrupt_image", "(", "img", ",", "args", ")", "\n", "", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.corrupt_dataset": [[104, 110], ["read_json", "np.copy", "enumerate", "np.copy", "add_corruption.corrupt_image"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.corrupt_image"], ["def", "corrupt_dataset", "(", "im_array", ",", "path", ")", ":", "\n", "    ", "params", "=", "read_json", "(", "path", ")", "\n", "temp", "=", "np", ".", "copy", "(", "im_array", ")", "\n", "for", "idx", ",", "img", "in", "enumerate", "(", "np", ".", "copy", "(", "im_array", ")", ")", ":", "\n", "        ", "temp", "[", "idx", "]", "=", "corrupt_image", "(", "img", ",", "params", ")", "\n", "", "return", "temp", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_stain": [[122, 157], ["random.uniform", "skimage.draw.ellipse_perimeter", "np.array", "np.zeros", "cv2.drawContours", "np.subtract", "np.add", "np.add.astype", "int", "random.randint", "float", "float", "random.randint", "random.randint", "random.randint", "random.randint", "add_corruption.perturbate_ellipse", "scipy.ndimage.gaussian_filter", "np.dstack", "np.dstack", "np.ones", "skimage.util.random_noise", "np.multiply", "np.multiply", "int", "int", "int", "int", "int", "int", "max", "int", "max", "int", "np.zeros", "size.split", "size.split", "zip", "max", "random.randint.split", "random.randint.split", "max", "max"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.add", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.perturbate_ellipse"], ["def", "add_stain", "(", "img", ",", "size", ",", "color", ",", "irregularity", ",", "blur", ")", ":", "\n", "\n", "    ", "if", "'-'", "not", "in", "color", ":", "\n", "        ", "color", "=", "int", "(", "color", ")", "\n", "", "else", ":", "\n", "        ", "min_color", ",", "max_color", "=", "int", "(", "color", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", ",", "int", "(", "color", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "color", "=", "randint", "(", "min_color", ",", "max_color", ")", "\n", "", "col", ",", "row", "=", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", "\n", "min_range", ",", "max_range", "=", "float", "(", "size", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", ",", "float", "(", "size", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "a", ",", "b", "=", "randint", "(", "int", "(", "min_range", "/", "100.", "*", "col", ")", ",", "int", "(", "max_range", "/", "100.", "*", "col", ")", ")", ",", "randint", "(", "int", "(", "min_range", "/", "100.", "*", "row", ")", ",", "int", "(", "max_range", "/", "100.", "*", "row", ")", ")", "\n", "rotation", "=", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ")", "\n", "\n", "cx", ",", "cy", "=", "randint", "(", "max", "(", "a", ",", "b", ")", ",", "int", "(", "col", "-", "max", "(", "a", ",", "b", ")", ")", ")", ",", "randint", "(", "max", "(", "a", ",", "b", ")", ",", "int", "(", "row", "-", "max", "(", "a", ",", "b", ")", ")", ")", "\n", "x", ",", "y", "=", "ellipse_perimeter", "(", "cy", ",", "cx", ",", "a", ",", "b", ",", "rotation", ")", "\n", "contour", "=", "np", ".", "array", "(", "[", "[", "i", ",", "j", "]", "for", "i", ",", "j", "in", "zip", "(", "x", ",", "y", ")", "]", ")", "\n", "\n", "# Change the shape of the ellipse ", "\n", "if", "irregularity", ">", "0", ":", "\n", "        ", "contour", "=", "perturbate_ellipse", "(", "contour", ",", "cx", ",", "cy", ",", "(", "a", "+", "b", ")", "/", "2", ",", "irregularity", ")", "\n", "\n", "", "mask", "=", "np", ".", "zeros", "(", "(", "row", ",", "col", ")", ")", "\n", "mask", "=", "cv2", ".", "drawContours", "(", "mask", ",", "[", "contour", "]", ",", "-", "1", ",", "1", ",", "-", "1", ")", "\n", "\n", "if", "blur", "!=", "0", ":", "\n", "        ", "mask", "=", "gaussian_filter", "(", "mask", ",", "max", "(", "a", ",", "b", ")", "*", "blur", ")", "\n", "\n", "", "if", "img", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "rgb_mask", "=", "np", ".", "dstack", "(", "[", "mask", "]", ")", "\n", "", "else", ":", "\n", "        ", "rgb_mask", "=", "np", ".", "dstack", "(", "[", "mask", "]", "*", "3", ")", "\n", "", "not_modified", "=", "np", ".", "subtract", "(", "np", ".", "ones", "(", "img", ".", "shape", ")", ",", "rgb_mask", ")", "\n", "stain", "=", "255", "*", "random_noise", "(", "np", ".", "zeros", "(", "img", ".", "shape", ")", ",", "mode", "=", "'gaussian'", ",", "mean", "=", "color", "/", "255.", ",", "var", "=", "0.05", "/", "255.", ")", "\n", "result", "=", "np", ".", "add", "(", "np", ".", "multiply", "(", "img", ",", "not_modified", ")", ",", "np", ".", "multiply", "(", "stain", ",", "rgb_mask", ")", ")", "\n", "\n", "return", "result", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.perturbate_ellipse": [[158, 178], ["enumerate", "sorted", "sorted.append", "np.arange", "np.linspace", "np.array", "len", "len", "np.arange.max", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "np.arange.max", "int", "random.randint", "random.randint", "add_corruption.clockwiseangle", "np.array", "np.array", "int", "int", "zip", "int", "int", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.clockwiseangle"], ["", "def", "perturbate_ellipse", "(", "contour", ",", "cx", ",", "cy", ",", "diag", ",", "irregularity", ")", ":", "\n", "# Keep only some points", "\n", "    ", "if", "len", "(", "contour", ")", "<", "20", ":", "\n", "        ", "pts", "=", "contour", "\n", "", "else", ":", "\n", "        ", "pts", "=", "contour", "[", "0", ":", ":", "int", "(", "len", "(", "contour", ")", "/", "20", ")", "]", "\n", "\n", "# Perturbate coordinates", "\n", "", "for", "idx", ",", "pt", "in", "enumerate", "(", "pts", ")", ":", "\n", "        ", "pts", "[", "idx", "]", "=", "[", "pt", "[", "0", "]", "+", "randint", "(", "-", "int", "(", "diag", "*", "irregularity", ")", ",", "int", "(", "diag", "*", "irregularity", ")", ")", ",", "pt", "[", "1", "]", "+", "randint", "(", "-", "int", "(", "diag", "*", "irregularity", ")", ",", "int", "(", "diag", "*", "irregularity", ")", ")", "]", "\n", "", "pts", "=", "sorted", "(", "pts", ",", "key", "=", "lambda", "p", ":", "clockwiseangle", "(", "p", ",", "cx", ",", "cy", ")", ")", "\n", "pts", ".", "append", "(", "[", "pts", "[", "0", "]", "[", "0", "]", ",", "pts", "[", "0", "]", "[", "1", "]", "]", ")", "\n", "\n", "# Interpolate between remaining points", "\n", "i", "=", "np", ".", "arange", "(", "len", "(", "pts", ")", ")", "\n", "interp_i", "=", "np", ".", "linspace", "(", "0", ",", "i", ".", "max", "(", ")", ",", "10", "*", "i", ".", "max", "(", ")", ")", "\n", "xi", "=", "interp1d", "(", "i", ",", "np", ".", "array", "(", "pts", ")", "[", ":", ",", "0", "]", ",", "kind", "=", "'cubic'", ")", "(", "interp_i", ")", "\n", "yi", "=", "interp1d", "(", "i", ",", "np", ".", "array", "(", "pts", ")", "[", ":", ",", "1", "]", ",", "kind", "=", "'cubic'", ")", "(", "interp_i", ")", "\n", "\n", "return", "np", ".", "array", "(", "[", "[", "int", "(", "i", ")", ",", "int", "(", "j", ")", "]", "for", "i", ",", "j", "in", "zip", "(", "yi", ",", "xi", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.clockwiseangle": [[179, 193], ["math.hypot", "math.atan2"], "function", ["None"], ["", "def", "clockwiseangle", "(", "point", ",", "cx", ",", "cy", ")", ":", "\n", "    ", "refvec", "=", "[", "0", ",", "1", "]", "\n", "vector", "=", "[", "point", "[", "0", "]", "-", "cy", ",", "point", "[", "1", "]", "-", "cx", "]", "\n", "norm", "=", "math", ".", "hypot", "(", "vector", "[", "0", "]", ",", "vector", "[", "1", "]", ")", "\n", "# If length is zero there is no angle", "\n", "if", "norm", "==", "0", ":", "\n", "        ", "return", "-", "math", ".", "pi", "\n", "", "normalized", "=", "[", "vector", "[", "0", "]", "/", "norm", ",", "vector", "[", "1", "]", "/", "norm", "]", "\n", "dotprod", "=", "normalized", "[", "0", "]", "*", "refvec", "[", "0", "]", "+", "normalized", "[", "1", "]", "*", "refvec", "[", "1", "]", "\n", "diffprod", "=", "refvec", "[", "1", "]", "*", "normalized", "[", "0", "]", "-", "refvec", "[", "0", "]", "*", "normalized", "[", "1", "]", "\n", "angle", "=", "math", ".", "atan2", "(", "diffprod", ",", "dotprod", ")", "\n", "if", "angle", "<", "0", ":", "\n", "        ", "return", "2", "*", "math", ".", "pi", "+", "angle", "\n", "", "return", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_drops": [[208, 242], ["np.zeros", "range", "np.subtract", "np.add", "np.add.astype", "int", "random.randint", "float", "float", "random.randint", "np.log", "random.randint", "random.randint", "skimage.draw.circle", "zip", "np.dstack", "np.dstack", "np.ones", "skimage.util.random_noise", "np.multiply", "np.multiply", "int", "int", "int", "int", "int", "int", "int", "int", "numpy.random.normal", "numpy.random.normal", "np.zeros", "size.split", "size.split", "new_x.append", "new_y.append", "random.randint.split", "random.randint.split"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.add"], ["def", "add_drops", "(", "img", ",", "size", ",", "color", ",", "irregularity", ",", "nb", ",", "spacing", ")", ":", "\n", "    ", "if", "'-'", "not", "in", "color", ":", "\n", "        ", "color", "=", "int", "(", "color", ")", "\n", "", "else", ":", "\n", "        ", "min_color", ",", "max_color", "=", "int", "(", "color", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", ",", "int", "(", "color", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "color", "=", "randint", "(", "min_color", ",", "max_color", ")", "\n", "", "col", ",", "row", "=", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", "\n", "min_range", ",", "max_range", "=", "float", "(", "size", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", ",", "float", "(", "size", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "radius", "=", "randint", "(", "int", "(", "min_range", "/", "100.", "*", "col", ")", ",", "int", "(", "max_range", "/", "100.", "*", "col", ")", ")", "+", "1", "\n", "\n", "shift", "=", "np", ".", "log", "(", "nb", ")", "+", "5", "\n", "cx", ",", "cy", "=", "randint", "(", "int", "(", "shift", "*", "radius", ")", ",", "int", "(", "col", "-", "shift", "*", "radius", ")", ")", ",", "randint", "(", "int", "(", "shift", "*", "radius", ")", ",", "int", "(", "row", "-", "shift", "*", "radius", ")", ")", "\n", "\n", "# Print nb circles", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "row", ",", "col", ")", ")", "\n", "for", "_", "in", "range", "(", "nb", ")", ":", "\n", "        ", "ccx", ",", "ccy", "=", "normal", "(", "cx", ",", "spacing", "*", "radius", "/", "10", ")", ",", "normal", "(", "cy", ",", "spacing", "*", "radius", "/", "10", ")", "\n", "x", ",", "y", "=", "circle", "(", "ccy", ",", "ccx", ",", "radius", ")", "\n", "new_x", ",", "new_y", "=", "[", "]", ",", "[", "]", "\n", "for", "xx", ",", "yy", "in", "zip", "(", "x", ",", "y", ")", ":", "\n", "            ", "if", "xx", "<", "col", "-", "1", "and", "yy", "<", "row", "-", "1", ":", "\n", "                ", "new_x", ".", "append", "(", "xx", ")", "\n", "new_y", ".", "append", "(", "yy", ")", "\n", "", "", "mask", "[", "new_y", ",", "new_x", "]", "=", "1", "\n", "\n", "", "if", "img", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "\n", "        ", "rgb_mask", "=", "np", ".", "dstack", "(", "[", "mask", "]", ")", "\n", "", "else", ":", "\n", "        ", "rgb_mask", "=", "np", ".", "dstack", "(", "[", "mask", "]", "*", "3", ")", "\n", "", "not_modified", "=", "np", ".", "subtract", "(", "np", ".", "ones", "(", "img", ".", "shape", ")", ",", "rgb_mask", ")", "\n", "stain", "=", "255", "*", "random_noise", "(", "np", ".", "zeros", "(", "img", ".", "shape", ")", ",", "mode", "=", "'gaussian'", ",", "mean", "=", "color", "/", "255.", ",", "var", "=", "0.05", "/", "255.", ")", "\n", "result", "=", "np", ".", "add", "(", "np", ".", "multiply", "(", "img", ",", "not_modified", ")", ",", "np", ".", "multiply", "(", "stain", ",", "rgb_mask", ")", ")", "\n", "\n", "return", "result", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_gaussian": [[252, 256], ["np.add", "np.add.astype", "skimage.util.random_noise"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.add"], ["def", "add_gaussian", "(", "img", ",", "sigma", ")", ":", "\n", "    ", "noise", "=", "255", "*", "random_noise", "(", "img", ",", "mode", "=", "'gaussian'", ",", "mean", "=", "0", ",", "var", "=", "sigma", ")", "\n", "result", "=", "np", ".", "add", "(", "img", ",", "noise", ")", "\n", "return", "result", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.add_scratch": [[266, 307], ["random.randint", "random.randint", "random.randint", "random.randint", "int", "random.randint", "int", "int", "int", "int", "random.randint", "random.randint", "add_corruption.func_x", "range", "int", "int", "add_corruption.func_x", "range", "add_corruption.func_x", "random.randint.split", "random.randint.split", "np.random.normal"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.func_x", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.func_x", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.func_x"], ["def", "add_scratch", "(", "img", ",", "color", ")", ":", "\n", "    ", "if", "'-'", "not", "in", "color", ":", "\n", "        ", "color", "=", "int", "(", "color", ")", "\n", "", "else", ":", "\n", "        ", "min_color", ",", "max_color", "=", "int", "(", "color", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", ",", "int", "(", "color", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "color", "=", "randint", "(", "min_color", ",", "max_color", ")", "\n", "\n", "", "max_x", ",", "max_y", "=", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", "\n", "start_point_x", "=", "randint", "(", "int", "(", "max_x", "/", "6", ")", ",", "int", "(", "max_x", "-", "max_x", "/", "6", "+", "1", ")", ")", "\n", "start_point_y", "=", "randint", "(", "int", "(", "max_y", "/", "6", ")", ",", "int", "(", "max_y", "-", "max_y", "/", "6", "+", "1", ")", ")", "\n", "length_scratch_x", "=", "randint", "(", "start_point_x", ",", "max_x", ")", "/", "4", "\n", "length_scratch_y", "=", "randint", "(", "start_point_y", ",", "max_y", ")", "/", "4", "\n", "\n", "scratch_shape", "=", "[", "'line'", ",", "'sin'", ",", "'root'", "]", "\n", "scratch_direction", "=", "[", "'right'", ",", "'left'", ",", "'down'", ",", "'up'", "]", "\n", "shape", "=", "randint", "(", "0", ",", "2", ")", "\n", "direction", "=", "randint", "(", "0", ",", "3", ")", "\n", "\n", "list_point", "=", "[", "]", "\n", "if", "scratch_shape", "[", "shape", "]", "==", "'line'", ":", "\n", "        ", "list_point", "=", "func_x", "(", "start_point_x", ",", "length_scratch_x", ",", "start_point_y", ",", "length_scratch_y", ",", "\n", "scratch_direction", "[", "direction", "]", ",", "_line", ",", "img", ".", "shape", ")", "\n", "", "elif", "scratch_shape", "[", "shape", "]", "==", "'sin'", ":", "\n", "        ", "list_point", "=", "func_x", "(", "start_point_x", ",", "length_scratch_x", ",", "start_point_y", ",", "length_scratch_y", ",", "\n", "scratch_direction", "[", "direction", "]", ",", "_sin", ",", "img", ".", "shape", ")", "\n", "", "elif", "scratch_shape", "[", "shape", "]", "==", "'root'", ":", "\n", "        ", "list_point", "=", "func_x", "(", "start_point_x", ",", "length_scratch_x", ",", "start_point_y", ",", "length_scratch_y", ",", "\n", "scratch_direction", "[", "direction", "]", ",", "_root", ",", "img", ".", "shape", ")", "\n", "\n", "", "for", "x", ",", "y", "in", "list_point", ":", "\n", "        ", "for", "dx", "in", "range", "(", "-", "1", ",", "2", ")", ":", "\n", "            ", "for", "dy", "in", "range", "(", "-", "1", ",", "2", ")", ":", "\n", "                ", "point_x", ",", "point_y", "=", "(", "x", "+", "dx", ",", "y", "+", "dy", ")", "\n", "if", "0", "<=", "point_x", "<", "max_x", "and", "0", "<=", "point_y", "<", "max_y", ":", "\n", "                    ", "new_val", "=", "np", ".", "random", ".", "normal", "(", "color", ",", "20", ",", "1", ")", "\n", "if", "new_val", ">", "0", ":", "\n", "                        ", "img", "[", "point_y", ",", "point_x", "]", "=", "new_val", "\n", "", "else", ":", "\n", "                        ", "img", "[", "point_y", ",", "point_x", "]", "=", "0", "\n", "\n", "", "", "", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.func_x": [[308, 332], ["list", "np.arange", "np.arange", "list.append", "np.arange", "int", "int", "list.append", "np.arange", "int", "int", "list.append", "int", "int", "list.append", "int", "int", "add_corruption._line", "add_corruption._sin", "add_corruption._root"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption._line", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption._sin", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption._root"], ["", "def", "func_x", "(", "start_x", ",", "length_x", ",", "start_y", ",", "length_y", ",", "direction", ",", "func", ",", "shape", ")", ":", "\n", "    ", "set_point", "=", "list", "(", ")", "\n", "if", "direction", "==", "'up'", ":", "\n", "        ", "for", "x", "in", "np", ".", "arange", "(", "0.0", ",", "length_x", ",", "0.1", ")", ":", "\n", "            ", "point_x", ",", "point_y", "=", "(", "start_x", "+", "int", "(", "x", ")", ",", "start_y", "+", "int", "(", "func", "(", "x", ")", ")", ")", "\n", "if", "0", "<=", "point_x", "<", "shape", "[", "1", "]", "and", "0", "<=", "point_y", "<", "shape", "[", "0", "]", ":", "\n", "                ", "set_point", ".", "append", "(", "(", "point_x", ",", "point_y", ")", ")", "\n", "", "", "", "elif", "direction", "==", "'down'", ":", "\n", "        ", "for", "x", "in", "np", ".", "arange", "(", "0.0", ",", "-", "1", "*", "length_x", ",", "-", "0.1", ")", ":", "\n", "            ", "point_x", ",", "point_y", "=", "(", "start_x", "+", "int", "(", "x", ")", ",", "start_y", "+", "int", "(", "func", "(", "x", ")", ")", ")", "\n", "if", "0", "<=", "point_x", "<", "shape", "[", "1", "]", "and", "0", "<=", "point_y", "<", "shape", "[", "0", "]", ":", "\n", "                ", "set_point", ".", "append", "(", "(", "point_x", ",", "point_y", ")", ")", "\n", "", "", "", "elif", "direction", "==", "'right'", ":", "\n", "        ", "for", "y", "in", "np", ".", "arange", "(", "0.0", ",", "length_y", ",", "0.1", ")", ":", "\n", "            ", "point_x", ",", "point_y", "=", "(", "start_x", "+", "int", "(", "func", "(", "y", ")", ")", ",", "start_y", "+", "int", "(", "y", ")", ")", "\n", "if", "0", "<=", "point_x", "<", "shape", "[", "1", "]", "and", "0", "<=", "point_y", "<", "shape", "[", "0", "]", ":", "\n", "                ", "set_point", ".", "append", "(", "(", "point_x", ",", "point_y", ")", ")", "\n", "", "", "", "elif", "direction", "==", "'left'", ":", "\n", "        ", "for", "y", "in", "np", ".", "arange", "(", "0.0", ",", "-", "1", "*", "length_y", ",", "-", "0.1", ")", ":", "\n", "            ", "point_x", ",", "point_y", "=", "(", "start_x", "+", "int", "(", "func", "(", "y", ")", ")", ",", "start_y", "+", "int", "(", "y", ")", ")", "\n", "if", "0", "<=", "point_x", "<", "shape", "[", "1", "]", "and", "0", "<=", "point_y", "<", "shape", "[", "0", "]", ":", "\n", "                ", "set_point", ".", "append", "(", "(", "point_x", ",", "point_y", ")", ")", "\n", "\n", "", "", "", "return", "set_point", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption._line": [[333, 335], ["None"], "function", ["None"], ["", "def", "_line", "(", "x", ")", ":", "\n", "    ", "return", "2", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption._sin": [[336, 338], ["math.sin", "math.radians"], "function", ["None"], ["", "def", "_sin", "(", "x", ")", ":", "\n", "    ", "return", "16", "*", "math", ".", "sin", "(", "math", ".", "radians", "(", "x", "*", "4", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption._root": [[339, 341], ["math.sqrt", "math.sqrt"], "function", ["None"], ["", "def", "_root", "(", "x", ")", ":", "\n", "    ", "return", "10", "*", "math", ".", "sqrt", "(", "x", ")", "if", "x", ">=", "0", "else", "10", "*", "math", ".", "sqrt", "(", "-", "1", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.dataset.Dataset.__init__": [[13, 27], ["np.empty", "list", "list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "ds_name", "=", "None", "\n", "self", ".", "train", "=", "None", "\n", "self", ".", "train_corruption", "=", "None", "\n", "self", ".", "train_GT", "=", "np", ".", "empty", "(", "(", "0", ",", "0", ")", ")", "\n", "self", ".", "test", "=", "None", "\n", "self", ".", "mask", "=", "None", "\n", "self", ".", "test_label", "=", "list", "(", ")", "# array of 0 (clean),1 (synthetic) and 2 (real)", "\n", "self", ".", "test_label_name", "=", "list", "(", ")", "# array of strings", "\n", "self", ".", "train_size", "=", "0", "\n", "self", ".", "validation_size", "=", "0", "\n", "self", ".", "test_size", "=", "0", "\n", "self", ".", "img_col", "=", "0", "\n", "self", ".", "img_row", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.dataset.Dataset.import_train_set": [[33, 42], ["os.listdir", "np.array", "np.vstack", "dataset.Dataset.ds_name.split", "read_png", "np.array", "read_png"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_png", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_png"], ["def", "import_train_set", "(", "self", ",", "rescale_factor", ")", ":", "\n", "        ", "train_path", "=", "data_path", "+", "'/'", "+", "self", ".", "ds_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "+", "'/Train/Clean'", "\n", "img_list", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "train_path", ")", "if", "'.png'", "in", "x", "]", "\n", "for", "img_path", "in", "img_list", ":", "\n", "            ", "if", "self", ".", "train", "is", "None", ":", "\n", "                ", "self", ".", "train", "=", "np", ".", "array", "(", "[", "read_png", "(", "train_path", "+", "'/'", "+", "img_path", ",", "rescale_factor", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "train", "=", "np", ".", "vstack", "(", "(", "self", ".", "train", ",", "np", ".", "array", "(", "[", "read_png", "(", "train_path", "+", "'/'", "+", "img_path", ",", "rescale_factor", ")", "]", ")", ")", ")", "\n", "", "", "self", ".", "img_row", ",", "self", ".", "img_col", "=", "self", ".", "train", ".", "shape", "[", "1", "]", ",", "self", ".", "train", ".", "shape", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.dataset.Dataset.load_train": [[43, 54], ["read_json", "dataset.Dataset.import_train_set", "int", "read_png", "dataset.Dataset.ds_name.split", "dataset.Dataset.ds_name.split", "dataset.Dataset.ds_name.split"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.dataset.Dataset.import_train_set", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_png"], ["", "def", "load_train", "(", "self", ",", "dataset", ",", "scaling", "=", "'Default'", ")", ":", "\n", "        ", "self", ".", "ds_name", "=", "dataset", "\n", "if", "scaling", "==", "'Default'", ":", "\n", "            ", "rescale_factor", "=", "1", "\n", "", "else", ":", "\n", "            ", "initial_dim", "=", "(", "read_png", "(", "data_path", "+", "'/'", "+", "self", ".", "ds_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "+", "'/Train/Clean/0.png'", ",", "1", ")", ")", ".", "shape", "[", "0", "]", "\n", "final_dim", "=", "int", "(", "scaling", ")", "\n", "rescale_factor", "=", "final_dim", "/", "initial_dim", "\n", "\n", "", "self", ".", "train_corruption", "=", "read_json", "(", "data_path", "+", "'/'", "+", "self", ".", "ds_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "+", "'/Train/'", "+", "self", ".", "ds_name", ".", "split", "(", "'_'", ")", "[", "1", "]", "+", "'/00_description.json'", ")", "\n", "self", ".", "import_train_set", "(", "rescale_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.dataset.Dataset.import_test_set": [[61, 104], ["read_json", "img_list.sort", "np.array", "os.listdir", "np.vstack", "dataset.Dataset.test_label.append", "dataset.Dataset.test_label_name.append", "read_png", "np.zeros", "np.vstack", "dataset.Dataset.test_label.append", "dataset.Dataset.test_label_name.append", "dataset.Dataset.test_label.append", "dataset.Dataset.test_label_name.append", "dataset.Dataset.ds_name.split", "int", "skimage.color.rgb2gray", "np.vstack", "np.zeros", "np.vstack", "skimage.color.rgb2gray", "np.zeros", "np.array", "np.zeros", "fname.split", "skimage.color.rgb2gray", "skimage.color.rgb2gray", "np.zeros", "skimage.color.rgb2gray", "read_png", "skimage.color.rgb2gray"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_png", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_png"], ["def", "import_test_set", "(", "self", ",", "subfolder", ",", "rescale_factor", ")", ":", "\n", "        ", "test_path", "=", "data_path", "+", "'/'", "+", "self", ".", "ds_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "+", "'/Test/'", "+", "subfolder", "\n", "img_list", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "test_path", ")", "if", "'.png'", "in", "x", "and", "'mask'", "not", "in", "x", "]", "\n", "if", "'_'", "not", "in", "img_list", "[", "0", "]", ":", "\n", "            ", "img_list", ".", "sort", "(", "key", "=", "lambda", "fname", ":", "int", "(", "fname", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "\n", "", "labels", "=", "read_json", "(", "test_path", "+", "'/00_description.json'", ")", "\n", "for", "img_path", "in", "img_list", ":", "\n", "            ", "image", "=", "np", ".", "array", "(", "[", "read_png", "(", "test_path", "+", "'/'", "+", "img_path", ",", "rescale_factor", ")", "]", ")", "\n", "if", "self", ".", "test", "is", "None", ":", "\n", "                ", "self", ".", "test", "=", "image", "\n", "", "else", ":", "\n", "                ", "self", ".", "test", "=", "np", ".", "vstack", "(", "(", "self", ".", "test", ",", "image", ")", ")", "\n", "\n", "", "if", "subfolder", "==", "'Clean'", ":", "\n", "                ", "self", ".", "test_label", ".", "append", "(", "0", ")", "\n", "self", ".", "test_label_name", ".", "append", "(", "'clean'", ")", "\n", "if", "self", ".", "mask", "is", "None", ":", "\n", "                    ", "self", ".", "mask", "=", "np", ".", "zeros", "(", "rgb2gray", "(", "image", ")", ".", "shape", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "mask", "=", "np", ".", "vstack", "(", "(", "self", ".", "mask", ",", "np", ".", "zeros", "(", "rgb2gray", "(", "image", ")", ".", "shape", ")", ")", ")", "\n", "\n", "", "", "elif", "subfolder", "==", "'Real_corruption'", ":", "\n", "                ", "self", ".", "test_label", ".", "append", "(", "2", ")", "\n", "self", ".", "test_label_name", ".", "append", "(", "labels", "[", "img_path", "]", ")", "\n", "try", ":", "\n", "                    ", "mask", "=", "np", ".", "array", "(", "[", "read_png", "(", "test_path", "+", "'/mask_'", "+", "img_path", ",", "rescale_factor", ")", "]", ")", "/", "255.", "\n", "", "except", ":", "\n", "                    ", "mask", "=", "np", ".", "zeros", "(", "image", ".", "shape", ")", "\n", "\n", "", "if", "self", ".", "mask", "is", "None", ":", "\n", "                    ", "self", ".", "mask", "=", "rgb2gray", "(", "mask", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "mask", "=", "np", ".", "vstack", "(", "(", "self", ".", "mask", ",", "rgb2gray", "(", "mask", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "test_label", ".", "append", "(", "1", ")", "\n", "self", ".", "test_label_name", ".", "append", "(", "subfolder", ")", "\n", "if", "self", ".", "mask", "is", "None", ":", "\n", "                    ", "self", ".", "mask", "=", "np", ".", "zeros", "(", "rgb2gray", "(", "image", ")", ".", "shape", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "mask", "=", "np", ".", "vstack", "(", "(", "self", ".", "mask", ",", "np", ".", "zeros", "(", "rgb2gray", "(", "image", ")", ".", "shape", ")", ")", ")", "\n", "\n", "", "", "", "self", ".", "img_row", ",", "self", ".", "img_col", "=", "self", ".", "test", ".", "shape", "[", "1", "]", ",", "self", ".", "test", ".", "shape", "[", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.dataset.Dataset.load_test": [[106, 123], ["np.array", "np.array", "int", "folder_list.append", "dataset.Dataset.import_test_set", "read_png", "dataset.split", "dataset.Dataset.ds_name.split"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.dataset.Dataset.import_test_set", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_png"], ["", "def", "load_test", "(", "self", ",", "dataset", ",", "scaling", "=", "'Default'", ")", ":", "\n", "        ", "self", ".", "ds_name", "=", "dataset", "\n", "if", "scaling", "==", "'Default'", ":", "\n", "            ", "rescale_factor", "=", "1", "\n", "", "else", ":", "\n", "            ", "initial_dim", "=", "(", "read_png", "(", "data_path", "+", "'/'", "+", "self", ".", "ds_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "+", "'/Test/Clean/0.png'", ",", "1", ")", ")", ".", "shape", "[", "0", "]", "\n", "final_dim", "=", "int", "(", "scaling", ")", "\n", "rescale_factor", "=", "final_dim", "/", "initial_dim", "\n", "\n", "", "folder_list", "=", "[", "'Clean'", ",", "'Real_corruption'", "]", "\n", "if", "dataset", "!=", "'Clean'", ":", "\n", "            ", "folder_list", ".", "append", "(", "dataset", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "\n", "", "for", "subfolder", "in", "folder_list", ":", "\n", "            ", "self", ".", "import_test_set", "(", "subfolder", ",", "rescale_factor", ")", "\n", "", "self", ".", "test_label_name", "=", "np", ".", "array", "(", "self", ".", "test_label_name", ")", "\n", "self", ".", "test_label", "=", "np", ".", "array", "(", "self", ".", "test_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.GUI1.launch_dialog_box": [[48, 346], ["subframe11.append", "frame1.append", "frame1.append", "subframe12.append", "subframe12.append", "range", "frame1.append", "enumerate", "f2_default.append", "f2_default.append", "f2_default.append", "f2_param.append", "range", "f2_param.append", "f2_param.append", "f3_ds01.append", "f3_ds01.append", "f3_ds01.append", "f3_model01.append", "f3_model01.append", "f3_model01.append", "f3_model01.append", "f3_model01.append", "f3_model01.append", "f3_model01.append", "f3_train01.append", "f3_train01.append", "f3_train01.append", "f3_train01.append", "f4_simu.append", "f4_exp.append", "f4_exp.append", "sub_frame41.append", "sub_frame41.append", "sub_frame41.append", "sub_frame41.append", "frame4.append", "sub_frame42.append", "sub_frame42.append", "sub_frame42.append", "sub_frame42.append", "frame4.append", "layout.append", "PySimpleGUI.Window().Layout", "subframe12.append", "subframe12.append", "f2_db.append", "f2_param.append", "sg.Window().Layout.Read", "len", "len", "PySimpleGUI.Text", "PySimpleGUI.Text", "PySimpleGUI.InputText", "PySimpleGUI.Text", "PySimpleGUI.Input", "PySimpleGUI.FolderBrowse", "PySimpleGUI.Text", "PySimpleGUI.InputText", "PySimpleGUI.Text", "PySimpleGUI.Frame", "PySimpleGUI.Text", "PySimpleGUI.Text", "PySimpleGUI.Input", "PySimpleGUI.FolderBrowse", "PySimpleGUI.Text", "PySimpleGUI.Text", "PySimpleGUI.Text", "PySimpleGUI.Frame", "PySimpleGUI.Text", "PySimpleGUI.Text", "PySimpleGUI.Listbox", "PySimpleGUI.Button", "PySimpleGUI.Checkbox", "PySimpleGUI.Text", "PySimpleGUI.Text", "PySimpleGUI.InputText", "PySimpleGUI.Button", "PySimpleGUI.Canvas", "PySimpleGUI.Column", "PySimpleGUI.Column", "PySimpleGUI.Column", "PySimpleGUI.Text", "PySimpleGUI.InputText", "PySimpleGUI.Listbox", "PySimpleGUI.Text", "PySimpleGUI.Text", "PySimpleGUI.InputText", "PySimpleGUI.Frame", "PySimpleGUI.Text", "PySimpleGUI.Combo", "PySimpleGUI.Text", "PySimpleGUI.Text", "PySimpleGUI.InputText", "PySimpleGUI.Listbox", "PySimpleGUI.Text", "PySimpleGUI.InputText", "PySimpleGUI.Button", "PySimpleGUI.Multiline", "PySimpleGUI.Frame", "PySimpleGUI.Text", "PySimpleGUI.InputText", "PySimpleGUI.Listbox", "PySimpleGUI.Text", "PySimpleGUI.InputText", "PySimpleGUI.Button", "PySimpleGUI.Multiline", "PySimpleGUI.Frame", "PySimpleGUI.Column", "PySimpleGUI.Column", "PySimpleGUI.Column", "PySimpleGUI.Text", "PySimpleGUI.Combo", "PySimpleGUI.Text", "PySimpleGUI.Text", "PySimpleGUI.InputText", "PySimpleGUI.Listbox", "PySimpleGUI.Column", "PySimpleGUI.Column", "PySimpleGUI.Text", "PySimpleGUI.Checkbox", "PySimpleGUI.Checkbox", "PySimpleGUI.Text", "PySimpleGUI.Checkbox", "PySimpleGUI.Frame", "PySimpleGUI.Text", "PySimpleGUI.Checkbox", "PySimpleGUI.Checkbox", "PySimpleGUI.Text", "PySimpleGUI.Checkbox", "PySimpleGUI.Frame", "PySimpleGUI.TabGroup", "PySimpleGUI.Button", "PySimpleGUI.Button", "PySimpleGUI.Button", "PySimpleGUI.Window", "sg.Window().Layout.FindElement().Update", "params.items", "range", "utils.launch_code.get_preview", "GUI.helper.show_im", "GUI.helper.draw_figure", "sg.Window().Layout.FindElement().Update", "sg.Window().Layout.FindElement().Update", "sg.Window().Layout.FindElement().Update", "enumerate", "GUI.helper.update_list", "sg.Window().Layout.FindElement().Update", "sg.Window().Layout.FindElement().Update", "os.listdir", "os.listdir.sort", "GUI.helper.update_list", "sg.Window().Layout.FindElement().Update", "sg.Window().Layout.FindElement().Update", "os.listdir", "os.listdir.sort", "GUI.helper.update_list", "sg.Window().Layout.FindElement().Update", "sg.Window().Layout.FindElement().Update", "GUI.helper.hjson_parser", "sg.Window().Layout.FindElement().Update", "os.listdir", "GUI.helper.hjson_parser", "sg.Window().Layout.FindElement().Update", "os.listdir", "new_all_exp.sort", "sg.Window().Layout.FindElement().Update", "GUI.helper.update_list", "sg.Window().Layout.FindElement().Update", "sg.Window().Layout.FindElement().Update", "utils.launch_code.import_new_db", "PySimpleGUI.Text", "PySimpleGUI.Input", "PySimpleGUI.FolderBrowse", "PySimpleGUI.Text", "PySimpleGUI.Input", "PySimpleGUI.Input", "PySimpleGUI.FolderBrowse", "PySimpleGUI.Checkbox", "PySimpleGUI.Text", "PySimpleGUI.InputText", "params.items", "range", "sg.Window().Layout.FindElement().Update", "sg.Window().Layout.FindElement().Update", "sg.Window().Layout.FindElement().Update", "sg.Window().Layout.FindElement().Update", "sg.Window().Layout.FindElement().Update", "values[].split", "values[].split", "values[].split", "PySimpleGUI.Popup", "PySimpleGUI.Popup", "PySimpleGUI.Popup", "PySimpleGUI.Popup", "values[].split", "print", "write_json", "utils.launch_code.corrupt_db", "list", "list", "list", "list", "list", "sg.Window().Layout.FindElement", "values[].split", "sg.Window().Layout.FindElement().Update", "sg.Window().Layout.FindElement().Update", "sg.Window().Layout.FindElement().Update", "sg.Window().Layout.FindElement().Update", "print", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "open", "hjson.dump", "os.listdir", "os.listdir.sort", "GUI.helper.update_list", "sg.Window().Layout.FindElement().Update", "sg.Window().Layout.FindElement", "open", "hjson.dump", "os.listdir", "os.listdir.sort", "GUI.helper.update_list", "sg.Window().Layout.FindElement().Update", "os.listdir", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "os.path.exists", "os.makedirs", "os.listdir", "create_ds", "str", "def_p.keys", "str", "PySimpleGUI.Tab", "PySimpleGUI.Tab", "PySimpleGUI.Tab", "PySimpleGUI.Tab", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "os.listdir", "os.listdir", "sg.Window().Layout.FindElement", "hjson.loads", "values[].split", "hjson.loads", "values[].split", "utils.launch_code.train_net", "str", "str", "str", "str", "str", "str", "str", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "sg.Window().Layout.FindElement", "str", "utils.launch_code.evaluate_net", "str", "str", "str", "str", "str", "folder.split", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.launch_code.get_preview", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.show_im", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.draw_figure", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.update_list", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.update_list", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.update_list", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.hjson_parser", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.hjson_parser", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.update_list", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.launch_code.import_new_db", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.write_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.launch_code.corrupt_db", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.update_list", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.update_list", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.launch_code.train_net", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.launch_code.evaluate_net"], ["def", "launch_dialog_box", "(", "def_p", ")", ":", "\n", "    ", "\"\"\" -----------------------------------------------------------------------------------------\n    DIALOG BOX\n    ----------------------------------------------------------------------------------------- \"\"\"", "\n", "col", "=", "20", "\n", "col1", "=", "30", "\n", "col2", "=", "10", "\n", "col3", "=", "5", "\n", "\n", "# Max number of parameters for data corruption", "\n", "nb_param", "=", "0", "\n", "for", "param", "in", "def_p", ":", "\n", "        ", "if", "len", "(", "def_p", "[", "param", "]", ")", ">", "nb_param", ":", "\n", "            ", "nb_param", "=", "len", "(", "def_p", "[", "param", "]", ")", "\n", "\n", "# IMPORT A NEW DATABASE", "\n", "", "", "frame1", "=", "[", "[", "sg", ".", "Text", "(", "'Select which new database you want to import'", ",", "text_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", "]", "\n", "subframe011", "=", "[", "[", "sg", ".", "Text", "(", "'Dataset name'", ",", "size", "=", "(", "col2", ",", "1", ")", ")", ",", "sg", ".", "InputText", "(", "''", ",", "key", "=", "'0_ds_name'", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", "]", "]", "\n", "subframe11", "=", "[", "[", "sg", ".", "Text", "(", "'Clean Images'", ",", "size", "=", "(", "col", ",", "1", ")", ")", "]", "]", "\n", "subframe11", ".", "append", "(", "[", "sg", ".", "Input", "(", "key", "=", "'0_train_set'", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", ",", "sg", ".", "FolderBrowse", "(", ")", "]", ")", "\n", "frame1", ".", "append", "(", "[", "sg", ".", "Text", "(", "'Dataset name'", ",", "size", "=", "(", "15", ",", "1", ")", ")", ",", "sg", ".", "InputText", "(", "''", ",", "key", "=", "'0_ds_name'", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ",", "size", "=", "(", "col", ",", "1", ")", ")", ",", "sg", ".", "Text", "(", "''", ",", "size", "=", "(", "18", ",", "1", ")", ")", ",", "\n", "sg", ".", "Frame", "(", "'Training Set'", ",", "subframe11", ",", "title_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", ")", "\n", "frame1", ".", "append", "(", "[", "sg", ".", "Text", "(", "''", ")", "]", ")", "\n", "\n", "subframe12", "=", "[", "[", "sg", ".", "Text", "(", "'Clean Images'", ",", "size", "=", "(", "col", ",", "1", ")", ")", "]", "]", "\n", "subframe12", ".", "append", "(", "[", "sg", ".", "Input", "(", "key", "=", "'0_test_clean'", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", ",", "sg", ".", "FolderBrowse", "(", ")", "]", ")", "\n", "subframe12", ".", "append", "(", "[", "sg", ".", "Text", "(", "'Images with Defects'", ",", "size", "=", "(", "3", "*", "col", "+", "9", ",", "1", ")", ")", ",", "\n", "sg", ".", "Text", "(", "'Label to identify the defect category'", ",", "size", "=", "(", "2", "*", "col", "+", "5", ",", "1", ")", ")", ",", "\n", "sg", ".", "Text", "(", "'Binary mask to segment defects (Optional)'", ",", "size", "=", "(", "2", "*", "col", "+", "5", ",", "1", ")", ")", "]", ")", "\n", "for", "idx", "in", "range", "(", "9", ")", ":", "\n", "        ", "subframe12", ".", "append", "(", "[", "sg", ".", "Text", "(", "'Type '", "+", "str", "(", "idx", "+", "1", ")", ",", "size", "=", "(", "col", ",", "1", ")", ")", "]", ")", "\n", "subframe12", ".", "append", "(", "[", "sg", ".", "Input", "(", "key", "=", "'0_test_default'", "+", "str", "(", "idx", ")", ",", "change_submits", "=", "True", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", ",", "sg", ".", "FolderBrowse", "(", ")", ",", "\n", "sg", ".", "Text", "(", "''", ",", "size", "=", "(", "col2", ",", "1", ")", ")", ",", "sg", ".", "Input", "(", "key", "=", "'0_test_label'", "+", "str", "(", "idx", ")", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", ",", "\n", "sg", ".", "Input", "(", "key", "=", "'0_test_mask'", "+", "str", "(", "idx", ")", ",", "change_submits", "=", "True", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", ",", "sg", ".", "FolderBrowse", "(", ")", "]", ")", "\n", "", "frame1", ".", "append", "(", "[", "sg", ".", "Frame", "(", "'Test Set'", ",", "subframe12", ",", "title_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", ")", "\n", "\n", "# CORRUPT AN EXISTING DATABASE", "\n", "f2_db", "=", "[", "[", "sg", ".", "Text", "(", "'Select the Database'", ",", "text_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", "]", "\n", "for", "idx", ",", "x", "in", "enumerate", "(", "all_clean_ds", ")", ":", "\n", "        ", "f2_db", ".", "append", "(", "[", "sg", ".", "Checkbox", "(", "x", ",", "key", "=", "'1_'", "+", "str", "(", "idx", ")", ")", "]", ")", "\n", "\n", "", "f2_default", "=", "[", "[", "sg", ".", "Text", "(", "'Select the corruption'", ",", "text_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", "]", "\n", "f2_default", ".", "append", "(", "[", "sg", ".", "Listbox", "(", "values", "=", "list", "(", "def_p", ".", "keys", "(", ")", ")", ",", "key", "=", "'1_default'", ",", "size", "=", "(", "30", ",", "15", ")", ",", "change_submits", "=", "True", ",", "bind_return_key", "=", "True", ")", "]", ")", "\n", "f2_default", ".", "append", "(", "[", "sg", ".", "Button", "(", "'Set default parameters'", ",", "key", "=", "'1_def_param'", ",", "button_color", "=", "(", "'white'", ",", "'#0f2851'", ")", ")", "]", ")", "\n", "f2_default", ".", "append", "(", "[", "sg", ".", "Checkbox", "(", "'Histogram Equalization'", ",", "key", "=", "'1_HE'", ")", "]", ")", "\n", "\n", "f2_param", "=", "[", "[", "sg", ".", "Text", "(", "'Default Parameters'", ",", "size", "=", "(", "col", ",", "1", ")", ",", "key", "=", "'def_name'", ")", "]", "]", "\n", "f2_param", ".", "append", "(", "[", "sg", ".", "Text", "(", "'Corruption Name'", ",", "size", "=", "(", "col", ",", "1", ")", ")", ",", "sg", ".", "InputText", "(", "''", ",", "key", "=", "'1_cor_name'", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "nb_param", ")", ":", "\n", "        ", "f2_param", ".", "append", "(", "[", "sg", ".", "Text", "(", "'Param'", "+", "str", "(", "i", ")", ",", "size", "=", "(", "col2", ",", "1", ")", ",", "key", "=", "'1_pp_'", "+", "str", "(", "i", ")", ")", ",", "sg", ".", "InputText", "(", "''", ",", "key", "=", "'1_p_'", "+", "str", "(", "i", ")", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", "]", ")", "\n", "", "f2_param", ".", "append", "(", "[", "sg", ".", "Button", "(", "'Preview'", ",", "key", "=", "'1_preview'", ",", "button_color", "=", "(", "'white'", ",", "'#0f2851'", ")", ",", "change_submits", "=", "True", ")", "]", ")", "\n", "f2_param", ".", "append", "(", "[", "sg", ".", "Canvas", "(", "size", "=", "(", "300", ",", "200", ")", ",", "key", "=", "'canvas'", ")", "]", ")", "\n", "frame2", "=", "[", "[", "sg", ".", "Column", "(", "f2_db", ")", ",", "sg", ".", "Column", "(", "f2_default", ")", ",", "sg", ".", "Column", "(", "f2_param", ")", "]", "]", "\n", "\n", "# TRAIN A NETWORK", "\n", "# Select the dataset", "\n", "f3_ds01", "=", "[", "]", "\n", "f3_ds01", "=", "[", "[", "sg", ".", "Text", "(", "'Query'", ",", "size", "=", "(", "8", ",", "1", ")", ")", ",", "sg", ".", "InputText", "(", "''", ",", "key", "=", "'3_ds_query'", ",", "change_submits", "=", "True", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", "]", "]", "\n", "f3_ds01", ".", "append", "(", "[", "sg", ".", "Listbox", "(", "values", "=", "all_ds", ",", "key", "=", "'3_ds'", ",", "size", "=", "(", "40", ",", "15", ")", ",", "select_mode", "=", "'multiple'", ",", "bind_return_key", "=", "True", ")", "]", ")", "\n", "f3_ds01", ".", "append", "(", "[", "sg", ".", "Text", "(", "''", ")", "]", ")", "\n", "f3_ds01", ".", "append", "(", "[", "sg", ".", "Text", "(", "'Resolution (1st axis)'", ",", "size", "=", "(", "23", ",", "1", ")", ")", ",", "sg", ".", "InputText", "(", "''", ",", "key", "=", "'3_dimension'", ",", "size", "=", "(", "10", ",", "1", ")", ",", "change_submits", "=", "True", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", "]", ")", "\n", "f3_ds", "=", "[", "[", "sg", ".", "Frame", "(", "'Select the Dataset(s)'", ",", "f3_ds01", ",", "title_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", "]", "\n", "\n", "# Select Model Class and Architecture", "\n", "f3_model01", "=", "[", "[", "sg", ".", "Text", "(", "'Select the Model Class (choose ImToIm by default)'", ",", "text_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", "]", "\n", "f3_model01", ".", "append", "(", "[", "sg", ".", "Combo", "(", "values", "=", "list", "(", "model_classes", ")", ",", "key", "=", "'3_model_class'", ",", "size", "=", "(", "50", ",", "5", ")", ",", "change_submits", "=", "True", ")", "]", ")", "\n", "f3_model01", ".", "append", "(", "[", "sg", ".", "Text", "(", "'Select the Model Architecture'", ",", "text_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", ")", "\n", "f3_model01", ".", "append", "(", "[", "sg", ".", "Text", "(", "'Query'", ",", "size", "=", "(", "8", ",", "1", ")", ")", ",", "sg", ".", "InputText", "(", "''", ",", "key", "=", "'3_model_query'", ",", "change_submits", "=", "True", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", "]", ")", "\n", "f3_model01", ".", "append", "(", "[", "sg", ".", "Listbox", "(", "values", "=", "list", "(", "model_archs", ")", ",", "key", "=", "'3_model_arch'", ",", "size", "=", "(", "80", ",", "10", ")", ",", "change_submits", "=", "True", ",", "select_mode", "=", "'multiple'", ",", "bind_return_key", "=", "True", ")", "]", ")", "\n", "f3_model01", ".", "append", "(", "[", "sg", ".", "Text", "(", "'Save this new Model Architecture under the name:'", ")", "]", ")", "\n", "f3_model01", ".", "append", "(", "[", "sg", ".", "InputText", "(", "''", ",", "key", "=", "'3_archi_name'", ",", "size", "=", "(", "40", ",", "10", ")", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", ",", "sg", ".", "Button", "(", "'Save'", ",", "key", "=", "'3_save_archi'", ",", "button_color", "=", "(", "'white'", ",", "'#0f2851'", ")", ")", "]", ")", "\n", "f3_model01", ".", "append", "(", "[", "sg", ".", "Multiline", "(", "''", ",", "key", "=", "'3_archi_hjson'", ",", "size", "=", "(", "50", ",", "20", ")", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", "]", ")", "\n", "\n", "f3_model", "=", "[", "[", "sg", ".", "Frame", "(", "'Select the Model Class and Architecture'", ",", "f3_model01", ",", "title_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", "]", "\n", "\n", "# Select Training Scheme", "\n", "f3_train01", "=", "[", "[", "sg", ".", "Text", "(", "'Query'", ",", "size", "=", "(", "8", ",", "1", ")", ")", ",", "sg", ".", "InputText", "(", "''", ",", "key", "=", "'3_train_query'", ",", "change_submits", "=", "True", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", "]", "]", "\n", "f3_train01", ".", "append", "(", "[", "sg", ".", "Listbox", "(", "values", "=", "all_training", ",", "key", "=", "'3_train'", ",", "size", "=", "(", "60", ",", "10", ")", ",", "change_submits", "=", "True", ",", "select_mode", "=", "'multiple'", ",", "bind_return_key", "=", "True", ")", "]", ")", "\n", "f3_train01", ".", "append", "(", "[", "sg", ".", "Text", "(", "'Save this new Training Scheme under the name:'", ")", "]", ")", "\n", "f3_train01", ".", "append", "(", "[", "sg", ".", "InputText", "(", "''", ",", "key", "=", "'3_train_name'", ",", "size", "=", "(", "40", ",", "10", ")", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", ",", "sg", ".", "Button", "(", "'Save'", ",", "key", "=", "'3_save_train'", ",", "button_color", "=", "(", "'white'", ",", "'#0f2851'", ")", ")", "]", ")", "\n", "f3_train01", ".", "append", "(", "[", "sg", ".", "Multiline", "(", "''", ",", "key", "=", "'3_train_hjson'", ",", "size", "=", "(", "50", ",", "20", ")", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", "]", ")", "\n", "\n", "f3_train", "=", "[", "[", "sg", ".", "Frame", "(", "'Select the Model Training Scheme'", ",", "f3_train01", ",", "title_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", "]", "\n", "\n", "frame3", "=", "[", "[", "sg", ".", "Column", "(", "f3_ds", ")", ",", "sg", ".", "Column", "(", "f3_model", ")", ",", "sg", ".", "Column", "(", "f3_train", ")", "]", "]", "\n", "\n", "# EVALUATE A NETWORK", "\n", "f4_simu", "=", "[", "[", "sg", ".", "Text", "(", "'Select Location of Simulation Results'", ",", "text_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", "]", "\n", "f4_simu", ".", "append", "(", "[", "sg", ".", "Combo", "(", "values", "=", "list", "(", "all_simu_paths", ")", ",", "key", "=", "'4_simu'", ",", "size", "=", "(", "50", ",", "5", ")", ",", "change_submits", "=", "True", ")", "]", ")", "\n", "\n", "f4_exp", "=", "[", "[", "sg", ".", "Text", "(", "'Select Experiments'", ",", "text_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", "]", "\n", "f4_exp", ".", "append", "(", "[", "sg", ".", "Text", "(", "'Query'", ",", "size", "=", "(", "8", ",", "1", ")", ")", ",", "sg", ".", "InputText", "(", "''", ",", "key", "=", "'4_exp_query'", ",", "change_submits", "=", "True", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", "]", ")", "\n", "f4_exp", ".", "append", "(", "[", "sg", ".", "Listbox", "(", "values", "=", "list", "(", "all_exp", ")", ",", "key", "=", "'4_exp'", ",", "size", "=", "(", "120", ",", "10", ")", ",", "select_mode", "=", "'multiple'", ",", "change_submits", "=", "True", ",", "bind_return_key", "=", "True", ")", "]", ")", "\n", "frame4", "=", "[", "[", "sg", ".", "Column", "(", "f4_simu", ")", ",", "sg", ".", "Column", "(", "f4_exp", ")", "]", "]", "\n", "\n", "sub_frame41", "=", "[", "[", "sg", ".", "Text", "(", "'This options reprint ROC curves of an experiment given that TP and FP rates have been computed previously.'", ")", "]", "]", "\n", "sub_frame41", ".", "append", "(", "[", "sg", ".", "Checkbox", "(", "'Standard evaluation (Image-wise)'", ",", "key", "=", "'4_ROC'", ")", "]", ")", "\n", "sub_frame41", ".", "append", "(", "[", "sg", ".", "Checkbox", "(", "'Standard evaluation (Pixel-wise)'", ",", "key", "=", "'4_ROC_pixel'", ")", "]", ")", "\n", "sub_frame41", ".", "append", "(", "[", "sg", ".", "Text", "(", "'_________________________________________________________'", ")", "]", ")", "\n", "sub_frame41", ".", "append", "(", "[", "sg", ".", "Checkbox", "(", "'Print Prediction'", ",", "key", "=", "'4_ROC_printpred'", ")", "]", ")", "\n", "frame4", ".", "append", "(", "[", "sg", ".", "Frame", "(", "'Standard ROC Curves'", ",", "sub_frame41", ",", "title_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", ")", "\n", "\n", "sub_frame42", "=", "[", "[", "sg", ".", "Text", "(", "'MCDropout allows to evaluate uncertainty of a network by introducting dropout during inference. By averaging results obtained with multiple dropout patterns, uncertainty is estimated.'", ")", "]", "]", "\n", "sub_frame42", ".", "append", "(", "[", "sg", ".", "Checkbox", "(", "'Perform MCdropout evaluation (Image-wise)'", ",", "key", "=", "'4_MCdrop'", ")", "]", ")", "\n", "sub_frame42", ".", "append", "(", "[", "sg", ".", "Checkbox", "(", "'Perform MCdropout evaluation (Pixel-wise)'", ",", "key", "=", "'4_MCdrop_pixel'", ")", "]", ")", "\n", "sub_frame42", ".", "append", "(", "[", "sg", ".", "Text", "(", "'_________________________________________________________'", ")", "]", ")", "\n", "sub_frame42", ".", "append", "(", "[", "sg", ".", "Checkbox", "(", "'Print Prediction'", ",", "key", "=", "'4_MCdrop_printpred'", ")", "]", ")", "\n", "frame4", ".", "append", "(", "[", "sg", ".", "Frame", "(", "'Monte Carlo Dropout'", ",", "sub_frame42", ",", "title_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", ")", "\n", "\n", "\n", "# GENERAL LAYOUT", "\n", "layout", "=", "[", "[", "sg", ".", "TabGroup", "(", "[", "[", "sg", ".", "Tab", "(", "'IMPORT_DB'", ",", "frame1", ")", ",", "sg", ".", "Tab", "(", "'CORRUPT_DB'", ",", "frame2", ")", ",", "sg", ".", "Tab", "(", "'TRAIN_NET'", ",", "frame3", ")", ",", "sg", ".", "Tab", "(", "'EVAL_NET'", ",", "frame4", ")", "]", "]", ",", "key", "=", "'action_choice'", ")", "]", "]", "\n", "layout", ".", "append", "(", "[", "sg", ".", "Button", "(", "'Execute'", ",", "key", "=", "'Execute'", ",", "button_color", "=", "(", "'white'", ",", "'#0f2851'", ")", ")", ",", "sg", ".", "Button", "(", "'Cancel'", ",", "key", "=", "'Cancel'", ",", "button_color", "=", "(", "'white'", ",", "'#0f2851'", ")", ")", ",", "\n", "sg", ".", "Button", "(", "'Add to the TODO list'", ",", "key", "=", "'TODO'", ",", "button_color", "=", "(", "'white'", ",", "'#34916f'", ")", ")", "]", ")", "\n", "window", "=", "sg", ".", "Window", "(", "'Action selection'", ")", ".", "Layout", "(", "layout", ")", "\n", "new_all_exp", "=", "all_exp", "\n", "simu_path", "=", "all_simu_paths", "[", "0", "]", "\n", "while", "True", ":", "\n", "        ", "event", ",", "values", "=", "window", ".", "Read", "(", ")", "\n", "if", "event", "is", "None", ":", "\n", "            ", "break", "\n", "\n", "# 1- Import a new database : Update labels", "\n", "", "if", "'0_test_default'", "in", "event", ":", "\n", "            ", "idx", "=", "event", "[", "-", "1", "]", "\n", "window", ".", "FindElement", "(", "'0_test_label'", "+", "str", "(", "idx", ")", ")", ".", "Update", "(", "values", "[", "'0_test_default'", "+", "str", "(", "idx", ")", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ")", "\n", "\n", "# 2- Corrupt ds : Update parameters list ", "\n", "", "if", "event", "is", "'1_def_param'", ":", "\n", "            ", "try", ":", "\n", "                ", "params", "=", "def_p", "[", "values", "[", "'1_default'", "]", "[", "0", "]", "]", "\n", "counter", "=", "0", "\n", "for", "key", ",", "value", "in", "params", ".", "items", "(", ")", ":", "\n", "                    ", "window", ".", "FindElement", "(", "'1_pp_'", "+", "str", "(", "counter", ")", ")", ".", "Update", "(", "key", ")", "\n", "window", ".", "FindElement", "(", "'1_p_'", "+", "str", "(", "counter", ")", ")", ".", "Update", "(", "value", ")", "\n", "counter", "+=", "1", "\n", "", "for", "i", "in", "range", "(", "counter", ",", "nb_param", ")", ":", "\n", "                    ", "window", ".", "FindElement", "(", "'1_pp_'", "+", "str", "(", "i", ")", ")", ".", "Update", "(", "''", ")", "\n", "window", ".", "FindElement", "(", "'1_p_'", "+", "str", "(", "i", ")", ")", ".", "Update", "(", "'XXX'", ")", "\n", "", "", "except", ":", "\n", "                ", "print", "(", "'unable to determine default type'", ")", "\n", "\n", "# 2- Corrupt ds : Update preview ", "\n", "", "", "if", "event", "is", "'1_preview'", ":", "\n", "# Keep parameters modifications ", "\n", "            ", "counter", "=", "0", "\n", "for", "key", ",", "value", "in", "params", ".", "items", "(", ")", ":", "\n", "                ", "window", ".", "FindElement", "(", "'1_pp_'", "+", "str", "(", "counter", ")", ")", ".", "Update", "(", "key", ")", "\n", "window", ".", "FindElement", "(", "'1_p_'", "+", "str", "(", "counter", ")", ")", ".", "Update", "(", "values", "[", "'1_p_'", "+", "str", "(", "counter", ")", "]", ")", "\n", "counter", "+=", "1", "\n", "", "for", "i", "in", "range", "(", "counter", ",", "nb_param", ")", ":", "\n", "                ", "window", ".", "FindElement", "(", "'1_pp_'", "+", "str", "(", "i", ")", ")", ".", "Update", "(", "''", ")", "\n", "window", ".", "FindElement", "(", "'1_p_'", "+", "str", "(", "i", ")", ")", ".", "Update", "(", "'XXX'", ")", "\n", "# Provide the preview", "\n", "", "img", "=", "get_preview", "(", "values", ")", "\n", "fig", "=", "show_im", "(", "img", "[", "0", "]", ",", "200", ",", "300", ")", "\n", "_", "=", "draw_figure", "(", "window", ".", "FindElement", "(", "'canvas'", ")", ".", "TKCanvas", ",", "fig", ")", "\n", "\n", "# 3- Create ds : Update subfolders list ", "\n", "", "if", "event", "is", "'2_subfolders'", ":", "\n", "            ", "new_clean_ds", "=", "values", "[", "'2_all_clean_ds'", "]", "\n", "new_clean_paths", "=", "[", "data_path", "+", "'/'", "+", "x", "for", "x", "in", "new_clean_ds", "]", "\n", "new_subfolders_paths", "=", "[", "]", "\n", "new_subfolders", "=", "[", "]", "\n", "for", "folder", "in", "new_clean_paths", ":", "\n", "                ", "new_subfolders_paths", "+=", "[", "folder", "+", "'/'", "+", "x", "for", "x", "in", "os", ".", "listdir", "(", "folder", ")", "]", "\n", "new_subfolders", "+=", "[", "folder", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "+", "'_'", "+", "x", "for", "x", "in", "os", ".", "listdir", "(", "folder", ")", "]", "\n", "\n", "", "window", ".", "FindElement", "(", "'2_all_subfolders'", ")", ".", "Update", "(", "new_subfolders", ")", "\n", "window", ".", "FindElement", "(", "'2_training_prop'", ")", ".", "Update", "(", "values", "[", "'2_training_prop'", "]", ")", "\n", "window", ".", "FindElement", "(", "'2_val_prop'", ")", ".", "Update", "(", "values", "[", "'2_val_prop'", "]", ")", "\n", "\n", "# 3- Create ds : Update subfolders list for training and eval repartition", "\n", "", "if", "event", "is", "'2_split'", ":", "\n", "            ", "ds_to_split", "=", "values", "[", "'2_all_subfolders'", "]", "\n", "for", "idx", ",", "ds", "in", "enumerate", "(", "ds_to_split", ")", ":", "\n", "                ", "window", ".", "FindElement", "(", "'2_training_'", "+", "str", "(", "idx", ")", ")", ".", "Update", "(", "ds", ")", "\n", "", "if", "idx", ">", "nb_subfolder_max", ":", "\n", "                ", "break", "\n", "\n", "# 4- Train net : Update datasetlist", "\n", "", "", "if", "event", "is", "'3_ds_query'", ":", "\n", "            ", "new_list", "=", "update_list", "(", "all_ds", ",", "values", "[", "'3_ds_query'", "]", ".", "split", "(", "','", ")", ")", "\n", "window", ".", "FindElement", "(", "'3_ds'", ")", ".", "Update", "(", "new_list", ")", "\n", "window", ".", "FindElement", "(", "'3_ds_query'", ")", ".", "Update", "(", "values", "[", "'3_ds_query'", "]", ")", "\n", "\n", "# 4- Train net : Update modellist", "\n", "", "if", "event", "is", "'3_model_query'", ":", "\n", "            ", "model_archs_bis", "=", "os", ".", "listdir", "(", "code_path", "+", "'/Models/Networks/Architecture_Config'", ")", "\n", "model_archs_bis", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ")", "\n", "new_list", "=", "update_list", "(", "model_archs_bis", ",", "values", "[", "'3_model_query'", "]", ".", "split", "(", "','", ")", ")", "\n", "window", ".", "FindElement", "(", "'3_model_arch'", ")", ".", "Update", "(", "new_list", ")", "\n", "window", ".", "FindElement", "(", "'3_model_query'", ")", ".", "Update", "(", "values", "[", "'3_model_query'", "]", ")", "\n", "\n", "# 4- Train net : Update trainlist", "\n", "", "if", "event", "is", "'3_train_query'", ":", "\n", "            ", "all_training_bis", "=", "os", ".", "listdir", "(", "code_path", "+", "'/Models/Training_Config'", ")", "\n", "all_training_bis", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ")", "\n", "new_list", "=", "update_list", "(", "all_training_bis", ",", "values", "[", "'3_train_query'", "]", ".", "split", "(", "','", ")", ")", "\n", "window", ".", "FindElement", "(", "'3_train'", ")", ".", "Update", "(", "new_list", ")", "\n", "window", ".", "FindElement", "(", "'3_train_query'", ")", ".", "Update", "(", "values", "[", "'3_train_query'", "]", ")", "\n", "\n", "# 4- Train net : Update trainingHJSON", "\n", "", "if", "event", "is", "'3_train'", "and", "values", "[", "'3_train'", "]", "!=", "[", "]", ":", "\n", "            ", "message", "=", "hjson_parser", "(", "code_path", "+", "'/Models/Training_Config/'", "+", "values", "[", "'3_train'", "]", "[", "0", "]", ")", "\n", "window", ".", "FindElement", "(", "'3_train_hjson'", ")", ".", "Update", "(", "message", ")", "\n", "\n", "# 4- Train net : Save new training config", "\n", "", "if", "event", "is", "'3_save_train'", ":", "\n", "            ", "if", "values", "[", "'3_train_name'", "]", "==", "''", ":", "\n", "                ", "sg", ".", "Popup", "(", "'Your configuration name is empty'", ")", "\n", "\n", "", "all_configs", "=", "os", ".", "listdir", "(", "code_path", "+", "'/Models/Training_Config'", ")", "\n", "if", "values", "[", "'3_train_name'", "]", "+", "'.hjson'", "in", "all_configs", ":", "\n", "                ", "sg", ".", "Popup", "(", "'One training configuration file already has this name'", ")", "\n", "", "else", ":", "\n", "                ", "with", "open", "(", "code_path", "+", "'/Models/Training_Config/'", "+", "values", "[", "'3_train_name'", "]", "+", "'.hjson'", ",", "'w'", ")", "as", "fp", ":", "\n", "                    ", "hjson", ".", "dump", "(", "hjson", ".", "loads", "(", "values", "[", "'3_train_hjson'", "]", ")", ",", "fp", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "model_train_bis", "=", "os", ".", "listdir", "(", "code_path", "+", "'/Models/Training_Config'", ")", "\n", "model_train_bis", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ")", "\n", "new_list", "=", "update_list", "(", "model_train_bis", ",", "values", "[", "'3_train_query'", "]", ".", "split", "(", "','", ")", ")", "\n", "window", ".", "FindElement", "(", "'3_train'", ")", ".", "Update", "(", "new_list", ")", "\n", "\n", "# 4- Train net : Update architectureHJSON", "\n", "", "", "", "if", "event", "is", "'3_model_arch'", "and", "values", "[", "'3_model_arch'", "]", "!=", "[", "]", ":", "\n", "            ", "message", "=", "hjson_parser", "(", "code_path", "+", "'/Models/Networks/Architecture_Config/'", "+", "values", "[", "'3_model_arch'", "]", "[", "0", "]", ")", "\n", "window", ".", "FindElement", "(", "'3_archi_hjson'", ")", ".", "Update", "(", "message", ")", "\n", "\n", "# 4- Train net : Save new architecture config ", "\n", "", "if", "event", "is", "'3_save_archi'", ":", "\n", "            ", "if", "values", "[", "'3_archi_name'", "]", "==", "''", ":", "\n", "                ", "sg", ".", "Popup", "(", "'Your configuration name is empty'", ")", "\n", "\n", "", "all_configs", "=", "os", ".", "listdir", "(", "code_path", "+", "'/Models/Networks/Architecture_Config'", ")", "\n", "if", "values", "[", "'3_archi_name'", "]", "+", "'.hjson'", "in", "all_configs", ":", "\n", "                ", "sg", ".", "Popup", "(", "'One architecture configuration file already has this name'", ")", "\n", "", "else", ":", "\n", "                ", "with", "open", "(", "code_path", "+", "'/Models/Networks/Architecture_Config/'", "+", "values", "[", "'3_archi_name'", "]", "+", "'.hjson'", ",", "'w'", ")", "as", "fp", ":", "\n", "                    ", "hjson", ".", "dump", "(", "hjson", ".", "loads", "(", "values", "[", "'3_archi_hjson'", "]", ")", ",", "fp", ",", "sort_keys", "=", "True", ",", "indent", "=", "4", ")", "\n", "model_archs_bis", "=", "os", ".", "listdir", "(", "code_path", "+", "'/Models/Networks/Architecture_Config'", ")", "\n", "model_archs_bis", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ")", "\n", "new_list", "=", "update_list", "(", "model_archs_bis", ",", "values", "[", "'3_model_query'", "]", ".", "split", "(", "','", ")", ")", "\n", "window", ".", "FindElement", "(", "'3_model_arch'", ")", ".", "Update", "(", "new_list", ")", "\n", "\n", "# 5- Evaluate net : Update default location of simulations", "\n", "", "", "", "if", "'4_simu'", "in", "event", ":", "\n", "            ", "simu_path", "=", "values", "[", "event", "]", "\n", "new_all_exp", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "simu_path", "+", "'/Experiments'", ")", "]", "\n", "new_all_exp", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ")", "\n", "window", ".", "FindElement", "(", "'4_exp'", ")", ".", "Update", "(", "new_all_exp", ")", "\n", "\n", "#5 - Evaluate net : Update experiences list", "\n", "", "if", "event", "is", "'4_exp_query'", ":", "\n", "            ", "new_exp_list", "=", "update_list", "(", "new_all_exp", ",", "values", "[", "'4_exp_query'", "]", ".", "split", "(", "','", ")", ")", "\n", "window", ".", "FindElement", "(", "'4_exp'", ")", ".", "Update", "(", "new_exp_list", ")", "\n", "window", ".", "FindElement", "(", "'4_exp_query'", ")", ".", "Update", "(", "values", "[", "'4_exp_query'", "]", ")", "\n", "\n", "", "if", "event", "is", "'Execute'", ":", "\n", "            ", "break", "\n", "\n", "", "if", "event", "is", "'TODO'", ":", "\n", "            ", "action", "=", "values", "[", "'action_choice'", "]", "\n", "if", "action", "==", "'CREATE_DS'", ":", "\n", "                ", "print", "(", "'The creation of a datase must be executed directly : click on execute'", ")", "\n", "", "else", ":", "\n", "                ", "todo_path", "=", "code_path", "+", "'/Todo_list'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "todo_path", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "todo_path", ")", "\n", "lst", "=", "None", "\n", "", "else", ":", "\n", "                    ", "lst", "=", "os", ".", "listdir", "(", "todo_path", ")", "\n", "\n", "", "counter", "=", "0", "\n", "for", "file", "in", "lst", ":", "\n", "                    ", "if", "action", "in", "file", ":", "\n", "                        ", "counter", "+=", "1", "\n", "", "", "write_json", "(", "values", ",", "code_path", "+", "'/Todo_list/'", "+", "action", "+", "'_'", "+", "str", "(", "counter", ")", "+", "'.json'", ")", "\n", "\n", "", "", "if", "event", "is", "'Cancel'", ":", "\n", "            ", "values", "=", "None", "\n", "break", "\n", "\n", "\n", "", "", "\"\"\" -----------------------------------------------------------------------------------------\n    EXECUTE ACTION DEPENDING ON THE OUTPUT OF THE DIALOG BOX\n    ----------------------------------------------------------------------------------------- \"\"\"", "\n", "# Execute action choosen before Execute", "\n", "if", "values", "is", "not", "None", ":", "\n", "        ", "if", "values", "[", "'action_choice'", "]", "==", "'IMPORT_DB'", ":", "\n", "            ", "import_new_db", "(", "values", ")", "\n", "", "elif", "values", "[", "'action_choice'", "]", "==", "'CORRUPT_DB'", ":", "\n", "            ", "corrupt_db", "(", "values", ",", "def_p", ")", "\n", "", "elif", "values", "[", "'action_choice'", "]", "==", "'CREATE_DS'", ":", "\n", "            ", "create_ds", "(", "values", ",", "new_subfolders_paths", ")", "\n", "", "elif", "values", "[", "'action_choice'", "]", "==", "'TRAIN_NET'", ":", "\n", "            ", "train_net", "(", "values", ")", "\n", "", "elif", "values", "[", "'action_choice'", "]", "==", "'EVAL_NET'", ":", "\n", "            ", "evaluate_net", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.GUI2.launch_analysis_box": [[23, 202], ["f1_simu.append", "f1_exp.append", "f1_exp.append", "enumerate", "f1_display.append", "range", "frame1.append", "layout.append", "PySimpleGUI.Window().Layout().Finalize", "f1_display.append", "range", "row.append", "sg.Window().Layout().Finalize.Read", "PySimpleGUI.Text", "PySimpleGUI.Combo", "PySimpleGUI.Text", "PySimpleGUI.Text", "PySimpleGUI.InputText", "PySimpleGUI.Listbox", "PySimpleGUI.Text", "PySimpleGUI.Button", "PySimpleGUI.Column", "PySimpleGUI.Column", "PySimpleGUI.Column", "this_plot.append", "this_plot.append", "PySimpleGUI.Column", "PySimpleGUI.Button", "PySimpleGUI.Window().Layout", "new_all_exp.sort", "sg.Window().Layout().Finalize.FindElement().Update", "sg.Window().Layout().Finalize.FindElement().Update", "sg.Window().Layout().Finalize.FindElement().Update", "GUI.helper.update_list", "sg.Window().Layout().Finalize.FindElement().Update", "sg.Window().Layout().Finalize.FindElement().Update", "enumerate", "enumerate", "enumerate", "PySimpleGUI.Checkbox", "PySimpleGUI.Multiline", "PySimpleGUI.Frame", "values[].split", "max", "plot_showed.values", "sg.Window().Layout().Finalize.FindElement().Update", "read_json", "enumerate", "list", "list", "PySimpleGUI.Text", "PySimpleGUI.Canvas", "PySimpleGUI.Window", "os.listdir", "sg.Window().Layout().Finalize.FindElement", "sg.Window().Layout().Finalize.FindElement", "sg.Window().Layout().Finalize.FindElement", "sg.Window().Layout().Finalize.FindElement", "sg.Window().Layout().Finalize.FindElement", "range", "range", "range", "len", "plot_showed.values", "sg.Window().Layout().Finalize.FindElement().Update", "str", "str", "sg.Window().Layout().Finalize.FindElement().Update", "sg.Window().Layout().Finalize.FindElement().Update", "sg.Window().Layout().Finalize.FindElement", "str", "str", "str", "str", "sg.Window().Layout().Finalize.FindElement", "print_learningcurves", "GUI.helper.draw_figure", "str", "str", "sg.Window().Layout().Finalize.FindElement", "sg.Window().Layout().Finalize.FindElement", "str", "figs[].get_tk_widget().forget", "GUI.helper.print_ROC", "GUI.helper.draw_figure", "im_list.sort", "range", "str", "str", "sg.Window().Layout().Finalize.FindElement", "figs[].get_tk_widget().forget", "show", "GUI.helper.draw_figure", "str", "str", "str", "str", "figs[].get_tk_widget", "str", "sg.Window().Layout().Finalize.FindElement", "os.listdir", "read_png", "figs[].get_tk_widget().forget", "GUI.helper.print_ROC", "GUI.helper.draw_figure", "sg.Window().Layout().Finalize.FindElement().Update", "im_list.sort", "range", "str", "figs[].get_tk_widget", "sg.Window().Layout().Finalize.FindElement", "str", "os.listdir", "figs[].get_tk_widget().forget", "show", "GUI.helper.draw_figure", "str", "str", "int", "int", "figs[].get_tk_widget", "sg.Window().Layout().Finalize.FindElement", "sg.Window().Layout().Finalize.FindElement", "this_json.split", "[].split", "os.listdir", "read_png", "figs[].get_tk_widget().forget", "str", "str", "figs[].get_tk_widget", "sg.Window().Layout().Finalize.FindElement", "str", "x.split", "x.split", "str", "str", "int", "int", "figs[].get_tk_widget", "str", "json_path.split", "str", "str", "str", "x.split", "x.split", "str"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.update_list", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_learningcurves", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.draw_figure", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.print_ROC", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.draw_figure", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.show", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.draw_figure", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_png", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.print_ROC", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.draw_figure", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.show", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.draw_figure", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_png"], ["def", "launch_analysis_box", "(", "def_p", ")", ":", "\n", "    ", "\"\"\" -----------------------------------------------------------------------------------------\n    DIALOG BOX\n    ----------------------------------------------------------------------------------------- \"\"\"", "\n", "\n", "# CURVES ANALYSIS (ROC and training)", "\n", "roc_col", ",", "roc_row", "=", "260", ",", "160", "\n", "nb_COL", ",", "nb_ROW", "=", "5", ",", "50", "\n", "n_pred", ",", "DS", "=", "31", ",", "'Mint'", "# Number of the image for the prediction", "\n", "\n", "f1_simu", "=", "[", "[", "sg", ".", "Text", "(", "'Select Location of Simulation Results'", ",", "text_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", "]", "\n", "f1_simu", ".", "append", "(", "[", "sg", ".", "Combo", "(", "values", "=", "list", "(", "all_simu_paths", ")", ",", "key", "=", "'1_simu'", ",", "size", "=", "(", "50", ",", "5", ")", ",", "change_submits", "=", "True", ")", "]", ")", "\n", "\n", "f1_exp", "=", "[", "[", "sg", ".", "Text", "(", "'Select Experiments'", ",", "text_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", "]", "\n", "f1_exp", ".", "append", "(", "[", "sg", ".", "Text", "(", "'Query'", ",", "size", "=", "(", "8", ",", "1", ")", ")", ",", "sg", ".", "InputText", "(", "''", ",", "key", "=", "'1_exp_query'", ",", "change_submits", "=", "True", ",", "do_not_clear", "=", "True", ",", "focus", "=", "True", ")", "]", ")", "\n", "f1_exp", ".", "append", "(", "[", "sg", ".", "Listbox", "(", "values", "=", "list", "(", "all_exp", ")", ",", "key", "=", "'1_exp'", ",", "size", "=", "(", "130", ",", "10", ")", ",", "select_mode", "=", "'multiple'", ",", "change_submits", "=", "True", ")", "]", ")", "\n", "f1_display", "=", "[", "[", "sg", ".", "Text", "(", "'Select Items to display ('", "+", "str", "(", "nb_ROW", ")", "+", "')'", ",", "size", "=", "(", "30", ",", "1", ")", ",", "text_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", "]", "\n", "\n", "display", "=", "[", "'Learning Curve (PSNR)'", ",", "'ROC (Clean vs Real corruption)'", ",", "'ROC (all)'", ",", "'Samples'", "]", "\n", "display_path", "=", "[", "'/Experiments/'", ",", "'/Results/'", ",", "'/Results/'", ",", "'/Results/'", "]", "\n", "for", "idx", ",", "x", "in", "enumerate", "(", "display", ")", ":", "\n", "        ", "f1_display", ".", "append", "(", "[", "sg", ".", "Checkbox", "(", "x", ",", "key", "=", "'1_display_'", "+", "str", "(", "idx", ")", ")", "]", ")", "\n", "", "f1_display", ".", "append", "(", "[", "sg", ".", "Button", "(", "'Intialize'", ",", "key", "=", "'1_init'", ",", "button_color", "=", "(", "'white'", ",", "'#0f2851'", ")", ")", "]", ")", "\n", "frame1", "=", "[", "[", "sg", ".", "Column", "(", "f1_simu", ")", ",", "sg", ".", "Column", "(", "f1_display", ")", ",", "sg", ".", "Column", "(", "f1_exp", ")", "]", "]", "\n", "\n", "row", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "nb_COL", ")", ":", "\n", "        ", "this_plot", "=", "[", "[", "sg", ".", "Multiline", "(", "''", ",", "key", "=", "'1_exp_name'", "+", "str", "(", "idx", ")", ",", "size", "=", "(", "35", ",", "2", ")", ",", "do_not_clear", "=", "True", ")", "]", "]", "\n", "for", "idx2", "in", "range", "(", "nb_ROW", ")", ":", "\n", "            ", "this_plot", ".", "append", "(", "[", "sg", ".", "Text", "(", "''", ",", "key", "=", "'1_txt_'", "+", "str", "(", "idx2", ")", "+", "'_'", "+", "str", "(", "idx", ")", ",", "size", "=", "(", "35", ",", "1", ")", ")", "]", ")", "\n", "this_plot", ".", "append", "(", "[", "sg", ".", "Canvas", "(", "size", "=", "(", "roc_col", ",", "roc_row", ")", ",", "key", "=", "'1_im_'", "+", "str", "(", "idx2", ")", "+", "'_'", "+", "str", "(", "idx", ")", ")", "]", ")", "\n", "", "this_frame", "=", "[", "[", "sg", ".", "Frame", "(", "'Experiment '", "+", "str", "(", "idx", "+", "1", ")", ",", "this_plot", ",", "key", "=", "'1_frame'", "+", "str", "(", "idx", ")", ",", "title_color", "=", "'#0f2851'", ",", "font", "=", "(", "\"Arial Bold\"", ",", "11", ")", ")", "]", "]", "\n", "row", ".", "append", "(", "sg", ".", "Column", "(", "this_frame", ",", "scrollable", "=", "True", ",", "vertical_scroll_only", "=", "True", ")", ")", "\n", "", "frame1", ".", "append", "(", "row", ")", "\n", "\n", "# GENERAL LAYOUT", "\n", "layout", "=", "frame1", "\n", "layout", ".", "append", "(", "[", "sg", ".", "Button", "(", "'Cancel'", ",", "key", "=", "'Cancel'", ",", "button_color", "=", "(", "'white'", ",", "'#0f2851'", ")", ")", "]", ")", "\n", "window", "=", "sg", ".", "Window", "(", "'Action selection'", ")", ".", "Layout", "(", "layout", ")", ".", "Finalize", "(", ")", "\n", "window", ".", "Size", "=", "(", "1850", ",", "1000", ")", "\n", "plot_showed", "=", "None", "\n", "simu_path", "=", "all_simu_paths", "[", "0", "]", "\n", "new_all_exp", "=", "all_exp", "\n", "#temp = draw_figure(window.FindElement('1_input').TKCanvas, fig_pred)", "\n", "\n", "while", "True", ":", "\n", "        ", "event", ",", "values", "=", "window", ".", "Read", "(", ")", "\n", "if", "event", "is", "None", ":", "\n", "            ", "break", "\n", "\n", "# 0- All Analysis : Update default location of simulations", "\n", "", "if", "'_simu'", "in", "event", ":", "\n", "            ", "simu_path", "=", "values", "[", "event", "]", "\n", "new_all_exp", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "simu_path", "+", "'/Experiments'", ")", "]", "\n", "new_all_exp", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ")", "\n", "window", ".", "FindElement", "(", "'1_exp'", ")", ".", "Update", "(", "new_all_exp", ")", "\n", "window", ".", "FindElement", "(", "'2_exp'", ")", ".", "Update", "(", "new_all_exp", ")", "\n", "window", ".", "FindElement", "(", "'3_exp'", ")", ".", "Update", "(", "new_all_exp", ")", "\n", "\n", "# 1- Analysis 1 : Update experiences list", "\n", "", "if", "event", "is", "'1_exp_query'", ":", "\n", "            ", "new_exp_list", "=", "update_list", "(", "new_all_exp", ",", "values", "[", "'1_exp_query'", "]", ".", "split", "(", "','", ")", ")", "\n", "window", ".", "FindElement", "(", "'1_exp'", ")", ".", "Update", "(", "new_exp_list", ")", "\n", "window", ".", "FindElement", "(", "'1_exp_query'", ")", ".", "Update", "(", "values", "[", "'1_exp_query'", "]", ")", "\n", "\n", "# 1- Analysis 1 : Initialize window", "\n", "", "if", "event", "is", "'1_init'", ":", "\n", "            ", "disp_idx", "=", "0", "\n", "for", "idx", ",", "this_display", "in", "enumerate", "(", "display", ")", ":", "\n", "                ", "if", "values", "[", "'1_display_'", "+", "str", "(", "idx", ")", "]", ":", "\n", "                    ", "for", "idx2", "in", "range", "(", "nb_COL", ")", ":", "\n", "                        ", "window", ".", "FindElement", "(", "'1_exp_name'", "+", "str", "(", "idx2", ")", ")", ".", "Update", "(", "''", ")", "\n", "window", ".", "FindElement", "(", "'1_txt_'", "+", "str", "(", "disp_idx", ")", "+", "'_'", "+", "str", "(", "idx2", ")", ")", ".", "Update", "(", "this_display", ")", "\n", "", "disp_idx", "+=", "1", "\n", "", "if", "disp_idx", ">", "nb_ROW", "-", "1", ":", "\n", "                    ", "break", "\n", "", "", "plot_showed", "=", "{", "key", ":", "None", "for", "key", "in", "range", "(", "nb_COL", ")", "}", "\n", "figs", "=", "{", "key", ":", "None", "for", "key", "in", "range", "(", "nb_COL", "*", "nb_ROW", ")", "}", "\n", "\n", "# 1- Analysis 1 : Update plot when experience is selected", "\n", "", "if", "event", "is", "'1_exp'", "and", "plot_showed", "is", "not", "None", ":", "\n", "            ", "plot_showed_size", "=", "0", "\n", "for", "val", "in", "plot_showed", ":", "\n", "                ", "if", "plot_showed", "[", "val", "]", "is", "not", "None", ":", "\n", "                    ", "plot_showed_size", "+=", "1", "\n", "", "", "is_val_in_dic", "=", "[", "False", "]", "*", "max", "(", "plot_showed_size", ",", "len", "(", "values", "[", "'1_exp'", "]", ")", ")", "\n", "new_item", "=", "None", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "values", "[", "'1_exp'", "]", ")", ":", "\n", "                ", "if", "item", "in", "plot_showed", ".", "values", "(", ")", ":", "\n", "                    ", "is_val_in_dic", "[", "idx", "]", "=", "True", "\n", "", "elif", "plot_showed_size", "<", "nb_COL", ":", "\n", "                    ", "new_item", "=", "item", "\n", "\n", "# Check if item has been removed ", "\n", "", "", "for", "idx", ",", "key", "in", "enumerate", "(", "plot_showed", ".", "values", "(", ")", ")", ":", "\n", "                ", "if", "key", "is", "not", "None", "and", "key", "not", "in", "values", "[", "'1_exp'", "]", ":", "\n", "                    ", "plot_showed", "[", "idx", "]", "=", "None", "\n", "window", ".", "FindElement", "(", "'1_exp_name'", "+", "str", "(", "idx", ")", ")", ".", "Update", "(", "''", ")", "\n", "\n", "# Show a new item ", "\n", "", "", "if", "new_item", ":", "\n", "                ", "col", "=", "nb_COL", "\n", "for", "plot_slot", "in", "plot_showed", ":", "\n", "                    ", "if", "plot_showed", "[", "plot_slot", "]", "is", "None", ":", "\n", "                        ", "col", "=", "plot_slot", "\n", "break", "\n", "", "", "if", "col", "<", "nb_COL", ":", "\n", "                    ", "plot_showed", "[", "col", "]", "=", "new_item", "\n", "", "window", ".", "FindElement", "(", "'1_exp_name'", "+", "str", "(", "col", ")", ")", ".", "Update", "(", "new_item", ")", "\n", "\n", "disp_idx", "=", "0", "\n", "args", "=", "read_json", "(", "root_path", "+", "'/Experiments/'", "+", "new_item", "+", "'/00_description.json'", ")", "\n", "for", "j", ",", "this_display", "in", "enumerate", "(", "display", ")", ":", "\n", "                    ", "if", "values", "[", "'1_display_'", "+", "str", "(", "j", ")", "]", "and", "'Learning'", "in", "display", "[", "j", "]", ":", "\n", "                        ", "try", ":", "\n", "                            ", "fig", "=", "print_learningcurves", "(", "new_item", ",", "GUI", "=", "True", ",", "row", "=", "roc_row", ",", "col", "=", "roc_col", ")", "\n", "if", "figs", "[", "col", "+", "disp_idx", "*", "nb_COL", "]", ":", "\n", "                                ", "figs", "[", "col", "+", "disp_idx", "*", "nb_COL", "]", ".", "get_tk_widget", "(", ")", ".", "forget", "(", ")", "\n", "", "figs", "[", "col", "+", "disp_idx", "*", "nb_COL", "]", "=", "draw_figure", "(", "window", ".", "FindElement", "(", "'1_im_'", "+", "str", "(", "disp_idx", ")", "+", "'_'", "+", "str", "(", "col", ")", ")", ".", "TKCanvas", ",", "fig", ")", "\n", "disp_idx", "+=", "1", "\n", "", "except", ":", "\n", "                            ", "pass", "\n", "\n", "", "", "elif", "values", "[", "'1_display_'", "+", "str", "(", "j", ")", "]", "and", "'Real'", "in", "display", "[", "j", "]", ":", "\n", "                        ", "try", ":", "\n", "                            ", "json_path", "=", "simu_path", "+", "'/Results/'", "+", "new_item", "+", "'/ROC_clean_vs_realDefaults.json'", "\n", "fig", "=", "print_ROC", "(", "json_path", ",", "roc_row", ",", "roc_col", ",", "AUC", "=", "True", ")", "\n", "if", "figs", "[", "col", "+", "disp_idx", "*", "nb_COL", "]", ":", "\n", "                                ", "figs", "[", "col", "+", "disp_idx", "*", "nb_COL", "]", ".", "get_tk_widget", "(", ")", ".", "forget", "(", ")", "\n", "", "figs", "[", "col", "+", "disp_idx", "*", "nb_COL", "]", "=", "draw_figure", "(", "window", ".", "FindElement", "(", "'1_im_'", "+", "str", "(", "disp_idx", ")", "+", "'_'", "+", "str", "(", "col", ")", ")", ".", "TKCanvas", ",", "fig", ")", "\n", "", "except", ":", "\n", "                            ", "pass", "\n", "", "disp_idx", "+=", "1", "\n", "try", ":", "\n", "                            ", "im_list", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "root_path", "+", "'/Results/'", "+", "new_item", "+", "'/clean_prediction'", ")", "if", "'.png'", "in", "x", "]", "\n", "im_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "if", "'_'", "in", "x", "else", "int", "(", "x", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                                ", "im_path", "=", "root_path", "+", "'/Results/'", "+", "new_item", "+", "'/clean_prediction/'", "+", "im_list", "[", "i", "]", "\n", "fig", "=", "show", "(", "read_png", "(", "im_path", ")", ",", "GUI", "=", "True", ",", "row", "=", "roc_row", ",", "col", "=", "roc_col", ")", "\n", "if", "figs", "[", "col", "+", "disp_idx", "*", "nb_COL", "]", ":", "\n", "                                    ", "figs", "[", "col", "+", "disp_idx", "*", "nb_COL", "]", ".", "get_tk_widget", "(", ")", ".", "forget", "(", ")", "\n", "", "figs", "[", "col", "+", "disp_idx", "*", "nb_COL", "]", "=", "draw_figure", "(", "window", ".", "FindElement", "(", "'1_im_'", "+", "str", "(", "disp_idx", ")", "+", "'_'", "+", "str", "(", "col", ")", ")", ".", "TKCanvas", ",", "fig", ")", "\n", "disp_idx", "+=", "1", "\n", "", "", "except", ":", "\n", "                            ", "pass", "\n", "\n", "", "", "elif", "values", "[", "'1_display_'", "+", "str", "(", "j", ")", "]", "and", "'all'", "in", "display", "[", "j", "]", ":", "\n", "                        ", "try", ":", "\n", "                            ", "ROC_list", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "simu_path", "+", "display_path", "[", "j", "]", "+", "new_item", ")", "if", "'json'", "in", "x", "and", "'real'", "not", "in", "x", "]", "\n", "", "except", ":", "\n", "                            ", "pass", "\n", "", "for", "this_json", "in", "ROC_list", ":", "\n", "                            ", "try", ":", "\n", "                                ", "json_path", "=", "simu_path", "+", "'/Results/'", "+", "new_item", "+", "'/'", "+", "this_json", "\n", "fig", "=", "print_ROC", "(", "json_path", ",", "roc_row", ",", "roc_col", ",", "AUC", "=", "True", ")", "\n", "if", "figs", "[", "col", "+", "disp_idx", "*", "nb_COL", "]", ":", "\n", "                                    ", "figs", "[", "col", "+", "disp_idx", "*", "nb_COL", "]", ".", "get_tk_widget", "(", ")", ".", "forget", "(", ")", "\n", "", "figs", "[", "col", "+", "disp_idx", "*", "nb_COL", "]", "=", "draw_figure", "(", "window", ".", "FindElement", "(", "'1_im_'", "+", "str", "(", "disp_idx", ")", "+", "'_'", "+", "str", "(", "col", ")", ")", ".", "TKCanvas", ",", "fig", ")", "\n", "window", ".", "FindElement", "(", "'1_txt_'", "+", "str", "(", "disp_idx", ")", "+", "'_'", "+", "str", "(", "col", ")", ")", ".", "Update", "(", "this_json", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "except", ":", "\n", "                                ", "pass", "\n", "", "disp_idx", "+=", "1", "\n", "try", ":", "\n", "                                ", "folder_path", "=", "(", "json_path", ".", "split", "(", "'vs_'", ")", "[", "1", "]", ")", ".", "split", "(", "'.'", ")", "[", "0", "]", "+", "'_prediction'", "\n", "im_list", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "root_path", "+", "'/Results/'", "+", "new_item", "+", "'/'", "+", "folder_path", ")", "if", "'.png'", "in", "x", "]", "\n", "im_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "if", "'_'", "in", "x", "else", "int", "(", "x", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "                                    ", "im_path", "=", "root_path", "+", "'/Results/'", "+", "new_item", "+", "'/'", "+", "folder_path", "+", "'/'", "+", "im_list", "[", "i", "]", "\n", "fig", "=", "show", "(", "read_png", "(", "im_path", ")", ",", "GUI", "=", "True", ",", "row", "=", "roc_row", ",", "col", "=", "roc_col", ")", "\n", "if", "figs", "[", "col", "+", "disp_idx", "*", "nb_COL", "]", ":", "\n", "                                        ", "figs", "[", "col", "+", "disp_idx", "*", "nb_COL", "]", ".", "get_tk_widget", "(", ")", ".", "forget", "(", ")", "\n", "", "figs", "[", "col", "+", "disp_idx", "*", "nb_COL", "]", "=", "draw_figure", "(", "window", ".", "FindElement", "(", "'1_im_'", "+", "str", "(", "disp_idx", ")", "+", "'_'", "+", "str", "(", "col", ")", ")", ".", "TKCanvas", ",", "fig", ")", "\n", "disp_idx", "+=", "1", "\n", "", "", "except", ":", "\n", "                                ", "pass", "\n", "\n", "", "", "", "", "", "", "if", "event", "is", "'Cancel'", ":", "\n", "            ", "values", "=", "None", "\n", "break", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.hjson_parser": [[22, 29], ["hjson.dumps", "open", "hjson.load"], "function", ["None"], ["\n", "def", "write_json", "(", "dict", ",", "file_path", ",", "sort_keys", "=", "True", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "str", "(", "Path", "(", "file_path", ")", ".", "parent", ")", ")", "\n", "", "with", "open", "(", "file_path", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "dict", ",", "fp", ",", "sort_keys", "=", "sort_keys", ",", "indent", "=", "4", ")", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.update_list": [[38, 53], ["len", "this_query[].lower", "this_elem.lower", "this_query.lower", "this_elem.lower"], "function", ["None"], ["def", "read_json", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "return", "json", ".", "load", "(", "fp", ",", "object_pairs_hook", "=", "OrderedDict", ")", "\n", "\n", "", "", "\"\"\" -----------------------------------------------------------------------------------------\nreturn (grayscale) images with image in file_path\nINPUT:\n    - file_path: path to the image\n    - gray_scale: read_png in grayscale or not\nOUTPUT:\n    - grayscale image\n----------------------------------------------------------------------------------------- \"\"\"", "\n", "def", "read_png", "(", "file_path", ",", "rescale_factor", "=", "'Default'", ")", ":", "\n", "    ", "img", "=", "imread", "(", "file_path", ")", "\n", "if", "rescale_factor", "!=", "'Default'", ":", "\n", "        ", "img", "=", "resize", "(", "img", ",", "(", "int", "(", "img", ".", "shape", "[", "0", "]", "*", "rescale_factor", ")", ",", "int", "(", "img", ".", "shape", "[", "1", "]", "*", "rescale_factor", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.show_im": [[62, 68], ["matplotlib.pyplot.figure", "matplotlib.pyplot.imshow", "matplotlib.pyplot.axis", "matplotlib.pyplot.gcf", "matplotlib.colors.NoNorm"], "function", ["None"], ["", ""]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.show_im_with_uncertainty": [[78, 87], ["np.ma.masked_where", "matplotlib.pyplot.figure", "matplotlib.pyplot.imshow", "matplotlib.pyplot.imshow", "matplotlib.pyplot.axis", "matplotlib.pyplot.gcf", "matplotlib.colors.NoNorm", "matplotlib.colors.NoNorm"], "function", ["None"], ["nb_imgs", "+=", "1", "\n", "if", "nb_imgs", "==", "max_size", ":", "\n", "            ", "break", "\n", "", "", "return", "np", ".", "asarray", "(", "images", ")", "\n", "\n", ""]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.show_im_withdef": [[97, 106], ["matplotlib.pyplot.figure", "diff", "np.ma.masked_where", "matplotlib.pyplot.imshow", "matplotlib.pyplot.imshow", "matplotlib.pyplot.axis", "matplotlib.pyplot.gcf", "matplotlib.colors.NoNorm"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.diff"], ["", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "", "for", "idx", ",", "img", "in", "enumerate", "(", "array", ")", ":", "\n", "        ", "if", "suffix", "and", "prefix", ":", "\n", "            ", "imsave", "(", "folder_path", "+", "'/'", "+", "prefix", "+", "str", "(", "idx", ")", "+", "suffix", "+", "'.png'", ",", "img", ")", "\n", "", "elif", "suffix", ":", "\n", "            ", "imsave", "(", "folder_path", "+", "'/'", "+", "str", "(", "idx", ")", "+", "suffix", "+", "'.png'", ",", "img", ")", "\n", "", "elif", "prefix", ":", "\n", "            ", "imsave", "(", "folder_path", "+", "'/'", "+", "prefix", "+", "str", "(", "idx", ")", "+", "'.png'", ",", "img", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.draw_figure": [[115, 120], ["matplotlib.backends.backend_tkagg.FigureCanvasTkAgg", "matplotlib.backends.backend_tkagg.FigureCanvasTkAgg.draw", "matplotlib.backends.backend_tkagg.FigureCanvasTkAgg.get_tk_widget().pack", "matplotlib.backends.backend_tkagg.FigureCanvasTkAgg.get_tk_widget"], "function", ["None"], ["\n", "def", "drop_array", "(", "array", ",", "folder_path", ",", "overwrite", "=", "False", ",", "suffix_iter", "=", "False", ",", "iter", "=", "None", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "folder_path", ")", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.print_ROC": [[132, 159], ["read_json", "matplotlib.pyplot.figure", "zip", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.legend", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.gcf", "matplotlib.pyplot.plot", "round", "str", "auc", "str"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json"], ["        ", "if", "not", "suffix_iter", ":", "\n", "            ", "imsave", "(", "folder_path", "+", "'/'", "+", "str", "(", "shift", "+", "idx", ")", "+", "'.png'", ",", "img", ")", "\n", "", "else", ":", "\n", "            ", "imsave", "(", "folder_path", "+", "'/'", "+", "str", "(", "shift", ")", "+", "'_'", "+", "str", "(", "iter", ")", "+", "'.png'", ",", "img", ")", "\n", "iter", "+=", "1", "\n", "\n", "", "", "", "\"\"\" -----------------------------------------------------------------------------------------\nAbsolute difference of two images in uint8 format \nINPUT:\n    -im1, im2: the two images\nOUTPUT:\n    - array with element-wise abosulte differences\n----------------------------------------------------------------------------------------- \"\"\"", "\n", "def", "diff", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "return", "(", "np", ".", "uint8", "(", "np", ".", "abs", "(", "np", ".", "int16", "(", "img1", ")", "-", "img2", ")", ")", ")", "\n", "\n", "", "\"\"\" -----------------------------------------------------------------------------------------\nAdd two images in uint8 format (no overflow)\nINPUT:\n    -im1, im2: the two images\nOUTPUT:\n    - array with element-wise addition\n----------------------------------------------------------------------------------------- \"\"\"", "\n", "def", "add", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "res", "=", "np", ".", "int16", "(", "img1", ")", "+", "np", ".", "int16", "(", "img2", ")", "\n", "res", "[", "res", ">", "256", "]", "=", "256", "\n", "return", "np", ".", "uint8", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.print_learning_curves": [[168, 185], ["matplotlib.pyplot.figure", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.legend", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.gcf", "open", "pickle.loads", "len", "range", "range", "handle.read"], "function", ["None"], ["\n", "def", "process_im", "(", "im_array", ",", "img_row", ",", "img_col", ")", ":", "\n", "    ", "im_array", "=", "im_array", ".", "astype", "(", "'float32'", ")", "/", "255.", "\n", "channels", "=", "im_array", ".", "shape", "[", "-", "1", "]", "\n", "if", "K", ".", "image_dim_ordering", "(", ")", "==", "\"th\"", ":", "\n", "        ", "new_array", "=", "np", ".", "reshape", "(", "im_array", ",", "(", "len", "(", "im_array", ")", ",", "channels", ",", "img_row", ",", "img_col", ")", ")", "\n", "", "else", ":", "\n", "        ", "new_array", "=", "np", ".", "reshape", "(", "im_array", ",", "(", "len", "(", "im_array", ")", ",", "img_row", ",", "img_col", ",", "channels", ")", ")", "\n", "", "return", "np", ".", "array", "(", "new_array", ")", "\n", "\n", ""]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.Losses.MSE": [[6, 8], ["tensorflow.reduce_mean"], "function", ["None"], ["def", "MSE", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "(", "y_pred", "-", "y_true", ")", "**", "2", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.Losses.PSNRLoss": [[12, 14], ["tensorflow.image.psnr"], "function", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.psnr"], ["def", "PSNRLoss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "return", "tf", ".", "image", ".", "psnr", "(", "y_true", ",", "y_pred", ",", "max_val", "=", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.ClassImtoIm.ImtoIm.__init__": [[36, 38], ["Models.SuperClass.Network_Class.__init__"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImtoIm", ",", "self", ")", ".", "__init__", "(", "\"ImtoIm\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.ClassImtoIm.ImtoIm.create_model": [[42, 56], ["super().create_model", "tensorflow.keras.Input", "importlib.import_module", "getattr", "getattr.", "int", "int", "args[].split", "ClassImtoIm.ImtoIm.Patch.split", "ClassImtoIm.ImtoIm.Patch.split"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.create_model"], ["", "def", "create_model", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "        ", "super", "(", "ImtoIm", ",", "self", ")", ".", "create_model", "(", "args", ",", "dataset", ")", "\n", "\n", "channels", "=", "1", "if", "self", ".", "Grayscale", "else", "3", "\n", "if", "self", ".", "Patch", "==", "''", ":", "\n", "            ", "shape", "=", "(", "self", ".", "row", ",", "self", ".", "col", ",", "channels", ")", "\n", "", "else", ":", "\n", "            ", "shape", "=", "(", "int", "(", "self", ".", "Patch", ".", "split", "(", "'x'", ")", "[", "0", "]", ")", ",", "int", "(", "self", ".", "Patch", ".", "split", "(", "'x'", ")", "[", "1", "]", ")", ",", "channels", ")", "\n", "", "init", "=", "tf", ".", "keras", ".", "Input", "(", "shape", "=", "shape", ")", "\n", "\n", "# Create the network ", "\n", "net_module", "=", "importlib", ".", "import_module", "(", "'Models.Networks.'", "+", "args", "[", "'3_model_arch'", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "build_model", "=", "getattr", "(", "net_module", ",", "'build_model'", ")", "\n", "self", ".", "model", "=", "build_model", "(", "self", ",", "init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.ClassImtoIm.ImtoIm.fit": [[60, 64], ["super().augment_data", "super().fit"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.augment_data", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.fit"], ["", "def", "fit", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "tmp", "=", "data_path", "+", "'/.tmp/'", "+", "self", ".", "exp_name", "\n", "super", "(", "ImtoIm", ",", "self", ")", ".", "augment_data", "(", "dataset", ")", "\n", "super", "(", "ImtoIm", ",", "self", ")", ".", "fit", "(", "args", ",", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.ClassImtoIm.ImtoIm.make_prediction": [[68, 88], ["np.shape", "len", "np.array", "enumerate", "utils.patch.patchify", "int", "int", "np.array", "np.array", "np.vstack", "ClassImtoIm.ImtoIm.model.predict", "ClassImtoIm.ImtoIm.Patch.split", "ClassImtoIm.ImtoIm.Patch.split", "ClassImtoIm.ImtoIm.model.predict", "utils.patch.depatchify", "utils.patch.depatchify", "np.array.astype", "patches.astype"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.patch.patchify", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.patch.depatchify", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.patch.depatchify"], ["", "def", "make_prediction", "(", "self", ",", "input_im", ",", "GUI", "=", "False", ",", "row", "=", "None", ",", "col", "=", "None", ")", ":", "\n", "\n", "        ", "im_shape", "=", "np", ".", "shape", "(", "input_im", ")", "\n", "if", "len", "(", "input_im", ".", "shape", ")", "!=", "4", ":", "\n", "            ", "input_im", "=", "np", ".", "array", "(", "[", "input_im", "]", ")", "\n", "\n", "", "if", "self", ".", "Patch", "==", "''", ":", "\n", "            ", "return", "(", "(", "self", ".", "model", ".", "predict", "(", "input_im", ".", "astype", "(", "'float32'", ")", "/", "255", ")", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "", "else", ":", "\n", "            ", "result_list", "=", "None", "\n", "for", "idx", ",", "this_im", "in", "enumerate", "(", "input_im", ")", ":", "\n", "                ", "patches", ",", "corner", "=", "patchify", "(", "this_im", ",", "int", "(", "self", ".", "Patch", ".", "split", "(", "'x'", ")", "[", "0", "]", ")", ",", "int", "(", "self", ".", "Patch", ".", "split", "(", "'x'", ")", "[", "1", "]", ")", ",", "25", ",", "25", ")", "\n", "prediction", "=", "(", "(", "self", ".", "model", ".", "predict", "(", "patches", ".", "astype", "(", "'float32'", ")", "/", "255", ")", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "if", "idx", "==", "0", ":", "\n", "                    ", "result_list", "=", "np", ".", "array", "(", "[", "depatchify", "(", "prediction", ",", "input_im", ".", "shape", "[", "1", "]", ",", "input_im", ".", "shape", "[", "2", "]", ",", "corner", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "this_pred", "=", "np", ".", "array", "(", "[", "depatchify", "(", "prediction", ",", "input_im", ".", "shape", "[", "1", "]", ",", "input_im", ".", "shape", "[", "2", "]", ",", "corner", ")", "]", ")", "\n", "result_list", "=", "np", ".", "vstack", "(", "(", "result_list", ",", "this_pred", ")", ")", "\n", "", "", "return", "result_list", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.ClassImtoIm.ImtoIm.make_MCprediction": [[92, 133], ["dict", "enumerate", "set", "enumerate", "skimage.color.rgb2gray", "np.reshape", "np.zeros", "np.zeros", "np.zeros", "range", "np.mean", "zip", "new_net.model.layers[].set_weights", "new_net.make_prediction", "np.var", "np.mean", "np.reshape", "range", "print_MCevaluation", "len", "layer_dict[].get_weights", "set.add", "len", "len", "np.var", "len", "layer_dict[].get_weights", "str"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.ClassImtoIm.ImtoIm.make_prediction", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_MCevaluation", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.add"], ["", "", "def", "make_MCprediction", "(", "self", ",", "dataset", ",", "new_net", ",", "print_pred", ",", "GUI", "=", "False", ",", "row", "=", "None", ",", "col", "=", "None", ")", ":", "\n", "        ", "layer_dict", "=", "dict", "(", "[", "(", "layer", ".", "name", ",", "layer", ")", "for", "layer", "in", "self", ".", "model", ".", "layers", "]", ")", "\n", "newlayers", "=", "[", "layer", ".", "name", "for", "layer", "in", "new_net", ".", "model", ".", "layers", "]", "\n", "\n", "for", "idx", ",", "layer_name", "in", "enumerate", "(", "newlayers", ")", ":", "\n", "            ", "if", "'Dropout'", "not", "in", "layer_name", ":", "\n", "                ", "if", "layer_name", "in", "layer_dict", "and", "len", "(", "layer_dict", "[", "layer_name", "]", ".", "get_weights", "(", ")", ")", ">", "0", ":", "\n", "                    ", "new_net", ".", "model", ".", "layers", "[", "idx", "]", ".", "set_weights", "(", "layer_dict", "[", "layer_name", "]", ".", "get_weights", "(", ")", ")", "\n", "\n", "", "", "", "used", "=", "set", "(", ")", "\n", "subsets", "=", "[", "x", "for", "x", "in", "dataset", ".", "test_label_name", "if", "x", "not", "in", "used", "and", "(", "used", ".", "add", "(", "x", ")", "or", "True", ")", "]", "\n", "all_pred", "=", "{", "}", "\n", "n_pred", "=", "30", "\n", "# Compute the prediction masks", "\n", "for", "this_subset", "in", "subsets", ":", "\n", "            ", "input_imgs", "=", "dataset", ".", "test", "[", "dataset", ".", "test_label_name", "==", "this_subset", "]", "\n", "if", "self", ".", "Grayscale", ":", "\n", "                ", "input_imgs", "=", "rgb2gray", "(", "input_imgs", ")", "\n", "input_imgs", "=", "np", ".", "reshape", "(", "input_imgs", "*", "255", ",", "(", "len", "(", "input_imgs", ")", ",", "self", ".", "row", ",", "self", ".", "col", ",", "1", ")", ")", "\n", "", "mean_pred", ",", "var_pred", "=", "np", ".", "zeros", "(", "input_imgs", ".", "shape", ",", "dtype", "=", "'uint8'", ")", ",", "np", ".", "zeros", "(", "(", "len", "(", "input_imgs", ")", ",", "self", ".", "row", ",", "self", ".", "col", ",", "1", ")", ")", "\n", "for", "i", ",", "input_im", "in", "enumerate", "(", "input_imgs", ")", ":", "\n", "                ", "these_pred", "=", "np", ".", "zeros", "(", "(", "n_pred", ",", "input_im", ".", "shape", "[", "0", "]", ",", "input_im", ".", "shape", "[", "1", "]", ",", "1", "if", "self", ".", "Grayscale", "else", "3", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "for", "j", "in", "range", "(", "n_pred", ")", ":", "\n", "                    ", "these_pred", "[", "j", "]", "=", "new_net", ".", "make_prediction", "(", "input_im", ")", "\n", "\n", "", "mean_pred", "[", "i", "]", "=", "np", ".", "mean", "(", "these_pred", ",", "axis", "=", "0", ")", "\n", "if", "self", ".", "Grayscale", ":", "\n", "                    ", "var_pred", "[", "i", "]", "=", "np", ".", "var", "(", "these_pred", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                    ", "temp", "=", "np", ".", "mean", "(", "np", ".", "var", "(", "these_pred", ",", "axis", "=", "0", ")", ",", "axis", "=", "-", "1", ")", "\n", "var_pred", "[", "i", "]", "=", "np", ".", "reshape", "(", "temp", ",", "(", "self", ".", "row", ",", "self", ".", "col", ",", "1", ")", ")", "\n", "\n", "", "", "result_path", "=", "root_path", "+", "'/Results_MCDropout/'", "+", "new_net", ".", "exp_name", "+", "'/'", "+", "this_subset", "+", "'_prediction/'", "\n", "all_pred", "[", "this_subset", "]", "=", "None", "\n", "all_pred", "[", "this_subset", "]", "=", "{", "'input'", ":", "input_imgs", ",", "'output'", ":", "mean_pred", ",", "'variance'", ":", "var_pred", "}", "\n", "\n", "# Show the result ", "\n", "if", "print_pred", ":", "\n", "                ", "for", "input", ",", "pred", ",", "var", ",", "idx", "in", "zip", "(", "input_imgs", ",", "mean_pred", ",", "var_pred", ",", "range", "(", "len", "(", "input_imgs", ")", ")", ")", ":", "\n", "                    ", "print_MCevaluation", "(", "input", ",", "pred", ",", "var", ",", "result_path", "+", "str", "(", "idx", ")", "+", "'.png'", ")", "\n", "", "", "", "return", "all_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.ClassImtoIm.ImtoIm.make_MCpredictionBIS": [[137, 163], ["np.shape", "instantiate_net", "dict", "enumerate", "enumerate", "len", "np.array", "np.zeros", "np.zeros", "np.zeros", "range", "np.mean", "np.var", "new_net.make_prediction", "new_net.model.layers[].set_weights", "len", "layer_dict[].get_weights", "layer_dict[].get_weights"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.instantiate_net.instantiate_net", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.ClassImtoIm.ImtoIm.make_prediction"], ["", "def", "make_MCpredictionBIS", "(", "self", ",", "input_img", ",", "args", ")", ":", "\n", "\n", "        ", "im_shape", "=", "np", ".", "shape", "(", "input_img", ")", "\n", "if", "len", "(", "input_img", ".", "shape", ")", "!=", "4", ":", "\n", "            ", "input_img", "=", "np", ".", "array", "(", "[", "input_img", "]", ")", "\n", "\n", "", "args", "[", "'4_MCdrop'", "]", "=", "True", "\n", "my_dataset", ",", "new_net", "=", "instantiate_net", "(", "args", ",", "Train", "=", "False", ")", "\n", "new_net", ".", "MCDropout", "=", "True", "\n", "layer_dict", "=", "dict", "(", "[", "(", "layer", ".", "name", ",", "layer", ")", "for", "layer", "in", "self", ".", "model", ".", "layers", "]", ")", "\n", "newlayers", "=", "[", "layer", ".", "name", "for", "layer", "in", "new_net", ".", "model", ".", "layers", "]", "\n", "for", "idx", ",", "layer_name", "in", "enumerate", "(", "newlayers", ")", ":", "\n", "            ", "if", "'Dropout'", "not", "in", "layer_name", ":", "\n", "                ", "if", "layer_name", "in", "layer_dict", "and", "len", "(", "layer_dict", "[", "layer_name", "]", ".", "get_weights", "(", ")", ")", ">", "0", ":", "\n", "                    ", "new_net", ".", "model", ".", "layers", "[", "idx", "]", ".", "set_weights", "(", "layer_dict", "[", "layer_name", "]", ".", "get_weights", "(", ")", ")", "\n", "\n", "", "", "", "n_pred", "=", "30", "\n", "\n", "mean_pred", ",", "var_pred", "=", "np", ".", "zeros", "(", "input_img", ".", "shape", ",", "dtype", "=", "'uint8'", ")", ",", "np", ".", "zeros", "(", "input_img", ".", "shape", ")", "\n", "for", "i", ",", "input_im", "in", "enumerate", "(", "input_img", ")", ":", "\n", "            ", "these_pred", "=", "np", ".", "zeros", "(", "(", "n_pred", ",", "input_im", ".", "shape", "[", "0", "]", ",", "input_im", ".", "shape", "[", "1", "]", ",", "1", "if", "self", ".", "Grayscale", "else", "3", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "for", "j", "in", "range", "(", "n_pred", ")", ":", "\n", "                ", "these_pred", "[", "j", "]", "=", "new_net", ".", "make_prediction", "(", "input_im", ")", "\n", "", "mean_pred", "[", "i", "]", "=", "np", ".", "mean", "(", "these_pred", ",", "axis", "=", "0", ")", "\n", "var_pred", "[", "i", "]", "=", "np", ".", "var", "(", "these_pred", ",", "axis", "=", "0", ")", "\n", "", "return", "mean_pred", ",", "var_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.__init__": [[46, 53], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "class_type", ")", ":", "\n", "        ", "self", ".", "model", "=", "None", "\n", "self", ".", "model_name", "=", "None", "\n", "self", ".", "exp_name", "=", "None", "\n", "self", ".", "class_type", "=", "class_type", "\n", "self", ".", "row", "=", "None", "\n", "self", ".", "col", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.create_model": [[57, 98], ["SuperClass.Network_Class.create_model.import_config"], "methods", ["None"], ["", "def", "create_model", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "        ", "def", "import_config", "(", "type", ")", ":", "\n", "            ", "if", "type", "==", "'archi'", ":", "\n", "                ", "path", "=", "code_path", "+", "'/Models/Networks/Architecture_Config/'", "+", "args", "[", "'3_model_arch'", "]", "\n", "default_path", "=", "code_path", "+", "'/Models/Networks/Architecture_Config/00_Default.hjson'", "\n", "", "elif", "type", "==", "'train'", ":", "\n", "                ", "path", "=", "code_path", "+", "'/Models/Training_Config/'", "+", "args", "[", "'3_train'", "]", "\n", "default_path", "=", "code_path", "+", "'/Models/Training_Config/00_Default.hjson'", "\n", "\n", "", "with", "open", "(", "path", ",", "'r'", ")", "as", "fp", ":", "\n", "                ", "param", "=", "hjson", ".", "load", "(", "fp", ")", "\n", "", "with", "open", "(", "default_path", ",", "'r'", ")", "as", "fp", ":", "\n", "                ", "default_param", "=", "hjson", ".", "load", "(", "fp", ")", "\n", "", "return", "param", ",", "default_param", "\n", "\n", "", "def", "init_object", "(", "param", ",", "default_param", ")", ":", "\n", "            ", "flatten_default_param", "=", "iterate_dict", "(", "default_param", ",", "{", "}", ")", "\n", "flatten_param", "=", "iterate_dict", "(", "param", ",", "{", "}", ")", "\n", "for", "this_param", "in", "flatten_default_param", ":", "\n", "                ", "if", "this_param", "in", "flatten_param", ":", "\n", "                    ", "setattr", "(", "self", ",", "this_param", ",", "flatten_param", "[", "this_param", "]", ")", "\n", "", "else", ":", "\n", "                    ", "setattr", "(", "self", ",", "this_param", ",", "flatten_default_param", "[", "this_param", "]", ")", "\n", "", "", "for", "this_param", "in", "flatten_param", ":", "\n", "                ", "setattr", "(", "self", ",", "this_param", ",", "flatten_param", "[", "this_param", "]", ")", "\n", "\n", "", "", "archi_param", ",", "default_archi_param", "=", "import_config", "(", "'archi'", ")", "\n", "train_param", ",", "default_train_param", "=", "import_config", "(", "'train'", ")", "\n", "init_object", "(", "archi_param", ",", "default_archi_param", ")", "\n", "init_object", "(", "train_param", ",", "default_train_param", ")", "\n", "\n", "self", ".", "row", ",", "self", ".", "col", "=", "dataset", ".", "img_row", ",", "dataset", ".", "img_col", "\n", "self", ".", "model_name", "=", "args", "[", "'3_model_arch'", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "\n", "if", "args", "[", "'4_MCdrop'", "]", ":", "\n", "            ", "self", ".", "MCDropout", "=", "True", "\n", "\n", "", "self", ".", "exp_name", "=", "dataset", ".", "ds_name", "+", "str", "(", "dataset", ".", "img_row", ")", "+", "'x'", "+", "str", "(", "dataset", ".", "img_col", ")", "+", "'_'", "+", "args", "[", "'3_model_class'", "]", "+", "'_'", "+", "args", "[", "'3_model_arch'", "]", ".", "split", "(", "'.hjson'", ")", "[", "0", "]", "+", "'_'", "+", "args", "[", "'3_train'", "]", ".", "split", "(", "'.hjson'", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.augment_data": [[103, 162], ["print", "print", "numpy.vstack", "numpy.vstack", "range", "range", "numpy.copy", "range", "zip", "drop_array", "drop_array", "zip", "zip", "datasets.add_corruption.corrupt_dataset", "drop_array", "drop_array", "utils.patch.patchify", "utils.patch.patchify", "drop_array", "drop_array", "os.remove", "os.remove", "numpy.flip", "numpy.flip", "random.uniform", "drop_array", "drop_array", "drop_array", "drop_array", "os.listdir", "os.listdir", "read_png", "read_png", "int", "int", "int", "int", "skimage.exposure.adjust_gamma", "skimage.exposure.equalize_hist", "SuperClass.Network_Class.Patch.split", "SuperClass.Network_Class.Patch.split", "SuperClass.Network_Class.Patch.split", "SuperClass.Network_Class.Patch.split", "dataset.ds_name.split", "dataset.ds_name.split"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.drop_array", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.drop_array", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.corrupt_dataset", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.drop_array", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.drop_array", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.patch.patchify", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.patch.patchify", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.drop_array", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.drop_array", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.drop_array", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.drop_array", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.drop_array", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.drop_array", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_png", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_png"], ["", "def", "augment_data", "(", "self", ",", "dataset", ")", ":", "\n", "\n", "        ", "print", "(", "'start offline data augmentation'", ")", "\n", "overwrite", "=", "True", "\n", "# Pure \"classical\" Data Augmentation ", "\n", "if", "self", ".", "Rotation_Translation", ":", "\n", "            ", "dataset", ".", "train", "=", "np", ".", "vstack", "(", "(", "dataset", ".", "train", ",", "np", ".", "flip", "(", "dataset", ".", "train", ",", "1", ")", ")", ")", "\n", "dataset", ".", "train", "=", "np", ".", "vstack", "(", "(", "dataset", ".", "train", ",", "np", ".", "flip", "(", "dataset", ".", "train", ",", "2", ")", ")", ")", "\n", "dataset", ".", "train_GT", "=", "dataset", ".", "train", "\n", "\n", "", "if", "self", ".", "Illumination_Changes", ":", "\n", "            ", "new_train_set", ",", "new_GT", "=", "None", ",", "None", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "                ", "for", "im", "in", "zip", "(", "dataset", ".", "train", ")", ":", "\n", "                    ", "gamma", "=", "uniform", "(", "0.5", ",", "2.0", ")", "\n", "drop_array", "(", "[", "adjust_gamma", "(", "im", ",", "gamma", ")", "]", ",", "self", ".", "tmp", "+", "'/Train/Imgs'", ",", "overwrite", "=", "overwrite", ")", "\n", "drop_array", "(", "[", "im", "]", ",", "self", ".", "tmp", "+", "'/Train_GT/Imgs'", ",", "overwrite", "=", "overwrite", ")", "\n", "overwrite", "=", "False", "\n", "\n", "", "", "", "if", "self", ".", "Histogram_Equalization", ":", "\n", "            ", "new_train_set", ",", "new_GT", "=", "None", ",", "None", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "                ", "for", "im", "in", "zip", "(", "dataset", ".", "train", ")", ":", "\n", "                    ", "drop_array", "(", "[", "equalize_hist", "(", "im", ",", "gamma", ")", "]", ",", "self", ".", "tmp", "+", "'/Train/Imgs'", ",", "overwrite", "=", "overwrite", ")", "\n", "drop_array", "(", "[", "im", "]", ",", "self", ".", "tmp", "+", "'/Train_GT/Imgs'", ",", "overwrite", "=", "overwrite", ")", "\n", "overwrite", "=", "False", "\n", "\n", "# Homemade Corruption", "\n", "", "", "", "if", "'Clean'", "not", "in", "dataset", ".", "ds_name", "and", "self", ".", "Offline_Corruption", ":", "\n", "            ", "new_train_set", ",", "new_GT", "=", "None", ",", "None", "\n", "GT_images", "=", "np", ".", "copy", "(", "dataset", ".", "train", ")", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "\n", "                ", "temp", "=", "corrupt_dataset", "(", "dataset", ".", "train", ",", "data_path", "+", "'/'", "+", "dataset", ".", "ds_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "+", "'/Train/'", "+", "dataset", ".", "ds_name", ".", "split", "(", "'_'", ")", "[", "1", "]", "+", "'/00_description.json'", ")", "\n", "drop_array", "(", "temp", ",", "self", ".", "tmp", "+", "'/Train/Imgs'", ",", "overwrite", "=", "overwrite", ")", "\n", "drop_array", "(", "dataset", ".", "train", ",", "self", ".", "tmp", "+", "'/Train_GT/Imgs'", ",", "overwrite", "=", "overwrite", ")", "\n", "overwrite", "=", "False", "\n", "\n", "# Patch ", "\n", "", "", "if", "self", ".", "Patch", "!=", "''", ":", "\n", "            ", "overwrite", "=", "False", "\n", "idx", "=", "0", "\n", "list1", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "self", ".", "tmp", "+", "'/Train/Imgs'", ")", "if", "'_'", "not", "in", "x", "]", "\n", "list2", "=", "[", "x", "for", "x", "in", "os", ".", "listdir", "(", "self", ".", "tmp", "+", "'/Train/Imgs'", ")", "if", "'_'", "not", "in", "x", "]", "\n", "for", "im_path", ",", "im_GT_path", "in", "zip", "(", "list1", ",", "list2", ")", ":", "\n", "                ", "im", ",", "im_GT", "=", "read_png", "(", "self", ".", "tmp", "+", "'/Train/Imgs/'", "+", "im_path", ")", ",", "read_png", "(", "self", ".", "tmp", "+", "'/Train/Imgs/'", "+", "im_GT_path", ")", "\n", "new_train_set", ",", "_", "=", "patchify", "(", "im", ",", "int", "(", "self", ".", "Patch", ".", "split", "(", "'x'", ")", "[", "0", "]", ")", ",", "int", "(", "self", ".", "Patch", ".", "split", "(", "'x'", ")", "[", "1", "]", ")", ",", "50", ",", "50", ")", "\n", "new_train_set_GT", ",", "_", "=", "patchify", "(", "im_GT", ",", "int", "(", "self", ".", "Patch", ".", "split", "(", "'x'", ")", "[", "0", "]", ")", ",", "int", "(", "self", ".", "Patch", ".", "split", "(", "'x'", ")", "[", "1", "]", ")", ",", "50", ",", "50", ")", "\n", "drop_array", "(", "new_train_set", ",", "self", ".", "tmp", "+", "'/Train/Imgs'", ",", "overwrite", "=", "overwrite", ",", "suffix_iter", "=", "True", ",", "iter", "=", "idx", ")", "\n", "drop_array", "(", "new_train_set_GT", ",", "self", ".", "tmp", "+", "'/Train_GT/Imgs'", ",", "overwrite", "=", "overwrite", ",", "suffix_iter", "=", "True", ",", "iter", "=", "idx", ")", "\n", "os", ".", "remove", "(", "self", ".", "tmp", "+", "'/Train/Imgs/'", "+", "im_path", ")", "\n", "os", ".", "remove", "(", "self", ".", "tmp", "+", "'/Train_GT/Imgs/'", "+", "im_GT_path", ")", "\n", "idx", "+=", "1", "\n", "\n", "\n", "", "", "if", "overwrite", ":", "\n", "            ", "drop_array", "(", "dataset", ".", "train", ",", "self", ".", "tmp", "+", "'/Train/Imgs'", ",", "overwrite", "=", "overwrite", ")", "\n", "drop_array", "(", "dataset", ".", "train", ",", "self", ".", "tmp", "+", "'/Train_GT/Imgs'", ",", "overwrite", "=", "overwrite", ")", "\n", "\n", "", "print", "(", "'end offline data augmentation'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.fit": [[166, 257], ["write_json", "callback_list.append", "dict", "tensorflow.keras.preprocessing.image.ImageDataGenerator", "tensorflow.keras.preprocessing.image.ImageDataGenerator", "dict", "tensorflow.keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "tensorflow.keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "tensorflow.keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "tensorflow.keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "tensorflow.keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "tensorflow.keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "tensorflow.keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "tensorflow.keras.preprocessing.image.ImageDataGenerator.flow_from_directory", "zip", "zip", "SuperClass.Network_Class.model.fit_generator", "shutil.rmtree", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "tensorflow.ModelCheckpoint", "tensorflow.ModelCheckpoint", "callback_list.append", "callback_list.append", "callback_list.append", "utils.callbacks.HistoryCheckpoint", "tensorflow.keras.preprocessing.image.ImageDataGenerator", "tensorflow.keras.preprocessing.image.ImageDataGenerator", "read_json", "tensorflow.keras.preprocessing.image.ImageDataGenerator", "tensorflow.keras.preprocessing.image.ImageDataGenerator", "str", "str", "str", "str", "tensorflow.ReduceLROnPlateau", "tensorflow.ReduceLROnPlateau", "tensorflow.LearningRateScheduler", "tensorflow.LearningRateScheduler", "tensorflow.LearningRateScheduler", "tensorflow.LearningRateScheduler", "numpy.random.get_state", "datasets.add_corruption.corrupt_image().astype", "numpy.random.set_state", "int", "int", "math.pow", "Path", "Path", "Path", "Path", "math.floor", "datasets.add_corruption.corrupt_image", "dataset.ds_name.split", "dataset.ds_name.split"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.write_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.read_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.datasets.add_corruption.corrupt_image"], ["", "def", "fit", "(", "self", ",", "args", ",", "dataset", ")", ":", "\n", "\n", "# Prepare saving results", "\n", "        ", "write_json", "(", "args", ",", "root_path", "+", "'/Experiments/'", "+", "self", ".", "exp_name", "+", "'/00_description.json'", ")", "\n", "weights_path", "=", "root_path", "+", "'/Experiments/'", "+", "self", ".", "exp_name", "+", "'/weights.h5'", "\n", "history_path", "=", "root_path", "+", "'/Experiments/'", "+", "self", ".", "exp_name", "+", "'/history.h5'", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "str", "(", "Path", "(", "weights_path", ")", ".", "parent", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "str", "(", "Path", "(", "weights_path", ")", ".", "parent", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "str", "(", "Path", "(", "history_path", ")", ".", "parent", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "str", "(", "Path", "(", "history_path", ")", ".", "parent", ")", ")", "\n", "\n", "# Initialize callbacks", "\n", "", "callback_list", "=", "[", "callbacks", ".", "ModelCheckpoint", "(", "weights_path", ",", "monitor", "=", "'val_PSNRLoss'", ",", "save_best_only", "=", "True", ",", "mode", "=", "'max'", ",", "save_weights_only", "=", "True", ",", "verbose", "=", "1", ")", "]", "\n", "if", "self", ".", "Callback", "==", "\"ReduceonPlateau\"", ":", "\n", "            ", "callback_list", ".", "append", "(", "callbacks", ".", "ReduceLROnPlateau", "(", "monitor", "=", "'val_PSNRLoss'", ",", "factor", "=", "0.5", ",", "patience", "=", "30", ",", "verbose", "=", "0", ",", "mode", "=", "'max'", ",", "min_delta", "=", "1", ",", "cooldown", "=", "0", ",", "min_lr", "=", "0", ")", ")", "\n", "", "if", "self", ".", "Callback", "==", "'Step_decay'", ":", "\n", "            ", "def", "step_down", "(", "epoch", ")", ":", "\n", "                ", "initial_lrate", "=", "self", ".", "Learning_rate", "\n", "drop", "=", "0.5", "\n", "epochs_drop", "=", "30.0", "\n", "lrate", "=", "initial_lrate", "*", "math", ".", "pow", "(", "drop", ",", "math", ".", "floor", "(", "(", "1", "+", "epoch", ")", "/", "epochs_drop", ")", ")", "\n", "return", "lrate", "\n", "", "callback_list", ".", "append", "(", "callbacks", ".", "LearningRateScheduler", "(", "step_decay", ")", ")", "\n", "", "if", "self", ".", "Callback", "==", "\"Step_down\"", ":", "\n", "            ", "def", "step_down", "(", "epoch", ")", ":", "\n", "                ", "initial_lrate", "=", "self", ".", "Learning_rate", "\n", "if", "epoch", ">", "69", "and", "epoch", "<", "149", ":", "\n", "                    ", "return", "initial_lrate", "/", "10", "\n", "", "elif", "epoch", ">", "149", ":", "\n", "                    ", "return", "initial_lrate", "/", "50", "\n", "", "else", ":", "\n", "                    ", "return", "initial_lrate", "\n", "", "", "callback_list", ".", "append", "(", "callbacks", ".", "LearningRateScheduler", "(", "step_down", ")", ")", "\n", "\n", "", "callback_list", ".", "append", "(", "HistoryCheckpoint", "(", "history_path", ")", ")", "\n", "\n", "# Training procedure", "\n", "seed", "=", "2042", "\n", "\n", "datagen_args", "=", "dict", "(", "rescale", "=", "1.0", "/", "255.0", ",", "\n", "validation_split", "=", "0.2", ",", "\n", "rotation_range", "=", "self", ".", "Rotation", ",", "\n", "width_shift_range", "=", "self", ".", "Width_shift", ",", "\n", "height_shift_range", "=", "self", ".", "Height_shift", ",", "\n", "horizontal_flip", "=", "self", ".", "Horizontal_flip", ",", "\n", "vertical_flip", "=", "self", ".", "Vertical_flip", ",", "\n", "zoom_range", "=", "self", ".", "Zoom", ",", "\n", "fill_mode", "=", "\"nearest\"", ")", "\n", "\n", "if", "'Clean'", "in", "dataset", ".", "ds_name", "or", "self", ".", "Offline_Corruption", ":", "\n", "            ", "generator_x", "=", "ImageDataGenerator", "(", "**", "datagen_args", ")", "\n", "", "else", ":", "\n", "            ", "corruption_args", "=", "read_json", "(", "data_path", "+", "'/'", "+", "dataset", ".", "ds_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "+", "'/Train/'", "+", "dataset", ".", "ds_name", ".", "split", "(", "'_'", ")", "[", "1", "]", "+", "'/00_description.json'", ")", "\n", "def", "my_corruption", "(", "image", ")", ":", "\n", "                ", "st0", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "result", "=", "corrupt_image", "(", "image", ",", "corruption_args", ")", ".", "astype", "(", "'float32'", ")", "\n", "np", ".", "random", ".", "set_state", "(", "st0", ")", "\n", "return", "result", "\n", "", "generator_x", "=", "ImageDataGenerator", "(", "preprocessing_function", "=", "my_corruption", ",", "**", "datagen_args", ")", "\n", "", "generator_y", "=", "ImageDataGenerator", "(", "**", "datagen_args", ")", "\n", "\n", "\n", "dataflow_args", "=", "dict", "(", "batch_size", "=", "self", ".", "Batch_size", ",", "\n", "class_mode", "=", "None", ",", "\n", "target_size", "=", "(", "self", ".", "row", ",", "self", ".", "col", ")", ",", "\n", "color_mode", "=", "'grayscale'", "if", "self", ".", "Grayscale", "else", "'rgb'", ",", "\n", "shuffle", "=", "True", ",", "\n", "seed", "=", "seed", "\n", ")", "\n", "\n", "train_input", "=", "generator_x", ".", "flow_from_directory", "(", "self", ".", "tmp", "+", "'/Train'", ",", "subset", "=", "'training'", ",", "**", "dataflow_args", ")", "\n", "train_masks", "=", "generator_y", ".", "flow_from_directory", "(", "self", ".", "tmp", "+", "'/Train_GT'", ",", "subset", "=", "'training'", ",", "**", "dataflow_args", ")", "\n", "val_input", "=", "generator_x", ".", "flow_from_directory", "(", "self", ".", "tmp", "+", "'/Train'", ",", "subset", "=", "'validation'", ",", "**", "dataflow_args", ")", "\n", "val_masks", "=", "generator_y", ".", "flow_from_directory", "(", "self", ".", "tmp", "+", "'/Train_GT'", ",", "subset", "=", "'validation'", ",", "**", "dataflow_args", ")", "\n", "\n", "train_generator", "=", "zip", "(", "train_input", ",", "train_masks", ")", "\n", "val_generator", "=", "zip", "(", "val_input", ",", "val_masks", ")", "\n", "\n", "self", ".", "model", ".", "fit_generator", "(", "generator", "=", "train_generator", ",", "\n", "epochs", "=", "self", ".", "Epoch", ",", "\n", "steps_per_epoch", "=", "int", "(", "2000", "/", "self", ".", "Batch_size", ")", ",", "\n", "validation_data", "=", "val_generator", ",", "\n", "validation_steps", "=", "int", "(", "500", "/", "self", ".", "Batch_size", ")", ",", "\n", "callbacks", "=", "callback_list", ",", "\n", "verbose", "=", "1", ",", "\n", "#use_multiprocessing=True,", "\n", "#workers=4", "\n", ")", "\n", "\n", "shutil", ".", "rmtree", "(", "self", ".", "tmp", ",", "ignore_errors", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.print_learning_curves": [[261, 304], ["matplotlib.pyplot.ylabel", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.legend", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.legend", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "open", "pickle.loads", "len", "matplotlib.pyplot.rc", "matplotlib.pyplot.rc", "matplotlib.pyplot.rcParams.update", "matplotlib.pyplot.figure", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.savefig", "matplotlib.pyplot.close", "matplotlib.pyplot.legend", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.gcf", "range", "range", "handle.read", "range", "range", "range", "range"], "methods", ["None"], ["", "def", "print_learning_curves", "(", "self", ",", "GUI", "=", "False", ",", "row", "=", "None", ",", "col", "=", "None", ")", ":", "\n", "        ", "history_path", "=", "root_path", "+", "'/Experiments/'", "+", "self", ".", "exp_name", "+", "'/history.h5'", "\n", "plot_path", "=", "root_path", "+", "'/Experiments/'", "+", "self", ".", "exp_name", "+", "'/Learning'", "\n", "with", "open", "(", "history_path", ",", "'rb'", ")", "as", "handle", ":", "\n", "            ", "history", "=", "pickle", ".", "loads", "(", "handle", ".", "read", "(", ")", ")", "\n", "\n", "", "nb_epoch", "=", "len", "(", "history", "[", "'loss'", "]", ")", "+", "1", "\n", "if", "GUI", ":", "\n", "            ", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "7", ")", "\n", "plt", ".", "rc", "(", "'ytick'", ",", "labelsize", "=", "7", ")", "\n", "plt", ".", "rcParams", ".", "update", "(", "{", "'font.size'", ":", "7", "}", ")", "\n", "my_dpi", "=", "96", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "col", "/", "my_dpi", ",", "row", "/", "my_dpi", ")", ",", "dpi", "=", "my_dpi", ")", "\n", "\n", "# summarize history for PSNR", "\n", "", "if", "GUI", ":", "\n", "            ", "plt", ".", "plot", "(", "range", "(", "1", ",", "nb_epoch", ")", ",", "history", "[", "'PSNRLoss'", "]", ",", "color", "=", "colors", "[", "'train'", "]", ",", "linewidth", "=", "1", ",", "label", "=", "'training set'", ")", "\n", "plt", ".", "plot", "(", "range", "(", "1", ",", "nb_epoch", ")", ",", "history", "[", "'val_PSNRLoss'", "]", ",", "color", "=", "colors", "[", "'val'", "]", ",", "linewidth", "=", "1", ",", "label", "=", "'validation set'", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "plot", "(", "range", "(", "1", ",", "nb_epoch", ")", ",", "history", "[", "'PSNRLoss'", "]", ",", "color", "=", "colors", "[", "'train'", "]", ",", "linewidth", "=", "2", ",", "label", "=", "'training set'", ")", "\n", "plt", ".", "plot", "(", "range", "(", "1", ",", "nb_epoch", ")", ",", "history", "[", "'val_PSNRLoss'", "]", ",", "color", "=", "colors", "[", "'val'", "]", ",", "linewidth", "=", "2", ",", "label", "=", "'validation set'", ")", "\n", "", "plt", ".", "ylabel", "(", "'PSNR'", ")", "\n", "plt", ".", "xlabel", "(", "'epoch'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "if", "not", "GUI", ":", "\n", "            ", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "plot_path", "+", "'_PSNR.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "legend", "(", "loc", "=", "'lower right'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "fig", "=", "plt", ".", "gcf", "(", ")", "\n", "return", "fig", "\n", "\n", "# summarize history for loss", "\n", "", "plt", ".", "plot", "(", "range", "(", "1", ",", "nb_epoch", ")", ",", "history", "[", "'loss'", "]", ",", "color", "=", "colors", "[", "'train'", "]", ",", "linewidth", "=", "2", ",", "label", "=", "'training set'", ")", "\n", "plt", ".", "plot", "(", "range", "(", "1", ",", "nb_epoch", ")", ",", "history", "[", "'val_loss'", "]", ",", "color", "=", "colors", "[", "'val'", "]", ",", "linewidth", "=", "2", ",", "label", "=", "'validation set'", ")", "\n", "plt", ".", "ylabel", "(", "'MSE'", ")", "\n", "plt", ".", "xlabel", "(", "'Epoch'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "savefig", "(", "plot_path", "+", "'_loss.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.load_weights": [[308, 314], ["SuperClass.Network_Class.model.load_weights", "SuperClass.Network_Class.model.load_weights"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.load_weights", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.load_weights"], ["", "def", "load_weights", "(", "self", ",", "exp_name", ",", "weight_file", "=", "None", ")", ":", "\n", "        ", "self", ".", "exp_name", "=", "exp_name", "\n", "if", "weight_file", "is", "None", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "root_path", "+", "'/Experiments/'", "+", "self", ".", "exp_name", "+", "'/weights.h5'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "load_weights", "(", "root_path", "+", "'/Experiments/'", "+", "self", ".", "exp_name", "+", "'/'", "+", "weight_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.evaluate": [[318, 385], ["set", "print", "print", "SuperClass.Network_Class.make_prediction", "print", "subsets.remove", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "skimage.color.rgb2gray", "numpy.reshape", "numpy.copy", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "utils.ROC.compute_ROC", "write_json", "print_ROC", "utils.ROC.compute_ROC_pixel_wise", "write_json", "print_PIXEL_WISE_ROC", "zip", "utils.ROC.compute_ROC", "write_json", "print_ROC", "utils.ROC.compute_ROC_pixel_wise", "write_json", "print_PIXEL_WISE_ROC", "len", "range", "print_evaluation", "set.add", "len", "str"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.ClassImtoIm.ImtoIm.make_prediction", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.compute_ROC", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.write_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.print_ROC", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.compute_ROC_pixel_wise", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.write_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_PIXEL_WISE_ROC", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.compute_ROC", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.write_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.print_ROC", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.compute_ROC_pixel_wise", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.write_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_PIXEL_WISE_ROC", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_evaluation", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.add"], ["", "", "def", "evaluate", "(", "self", ",", "dataset", ",", "print_pred", "=", "True", ",", "image_wise", "=", "False", ",", "pixel_wise", "=", "False", ",", "ROC", "=", "True", ",", "norms", "=", "[", "'l0'", ",", "'l1'", ",", "'l2'", ",", "'linf'", "]", ")", ":", "\n", "# Compute the predictions", "\n", "        ", "used", "=", "set", "(", ")", "\n", "subsets", "=", "[", "x", "for", "x", "in", "dataset", ".", "test_label_name", "if", "x", "not", "in", "used", "and", "(", "used", ".", "add", "(", "x", ")", "or", "True", ")", "]", "\n", "all_pred", "=", "{", "}", "\n", "all_mask", "=", "{", "}", "\n", "\n", "# Infer all the test images", "\n", "print", "(", "'-------start Inference---------'", ")", "\n", "print", "(", "'xxxxxx'", ",", "self", ".", "exp_name", ")", "\n", "all_inputs", "=", "dataset", ".", "test", "\n", "if", "self", ".", "Grayscale", ":", "\n", "            ", "all_inputs", "=", "rgb2gray", "(", "dataset", ".", "test", ")", "\n", "all_inputs", "=", "np", ".", "reshape", "(", "all_inputs", "*", "255", ",", "(", "len", "(", "all_inputs", ")", ",", "self", ".", "row", ",", "self", ".", "col", ",", "1", ")", ")", "\n", "", "all_preds", "=", "self", ".", "make_prediction", "(", "np", ".", "copy", "(", "all_inputs", ")", ")", "\n", "print", "(", "'-------end Inference---------'", ")", "\n", "\n", "for", "this_subset", "in", "subsets", ":", "\n", "            ", "prediction", "=", "all_preds", "[", "dataset", ".", "test_label_name", "==", "this_subset", "]", "\n", "this_pred", "=", "{", "'input'", ":", "all_inputs", "[", "dataset", ".", "test_label_name", "==", "this_subset", "]", ",", "'output'", ":", "prediction", "}", "\n", "all_pred", "[", "this_subset", "]", "=", "this_pred", "\n", "all_mask", "[", "this_subset", "]", "=", "dataset", ".", "mask", "[", "dataset", ".", "test_label_name", "==", "this_subset", "]", "\n", "\n", "if", "print_pred", ":", "\n", "                ", "result_path", "=", "root_path", "+", "'/Results/'", "+", "self", ".", "exp_name", "+", "'/'", "+", "this_subset", "+", "'_prediction/'", "\n", "for", "input", ",", "pred", ",", "idx", "in", "zip", "(", "all_inputs", "[", "dataset", ".", "test_label_name", "==", "this_subset", "]", ",", "prediction", ",", "range", "(", "len", "(", "prediction", ")", ")", ")", ":", "\n", "                    ", "print_evaluation", "(", "input", ",", "pred", ",", "result_path", "+", "str", "(", "idx", ")", "+", "'.png'", ")", "\n", "\n", "# Compute the ROC curve for each type of anomaly ", "\n", "", "", "", "subsets", ".", "remove", "(", "'clean'", ")", "\n", "for", "this_subset", "in", "subsets", ":", "\n", "            ", "x", "=", "np", ".", "concatenate", "(", "(", "all_pred", "[", "'clean'", "]", "[", "'input'", "]", ",", "all_pred", "[", "this_subset", "]", "[", "'input'", "]", ")", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "(", "all_pred", "[", "'clean'", "]", "[", "'output'", "]", ",", "all_pred", "[", "this_subset", "]", "[", "'output'", "]", ")", ")", "\n", "masks", "=", "np", ".", "concatenate", "(", "(", "all_mask", "[", "'clean'", "]", ",", "all_mask", "[", "this_subset", "]", ")", ")", "\n", "\n", "binary_test_labels", "=", "np", ".", "concatenate", "(", "(", "dataset", ".", "test_label", "[", "dataset", ".", "test_label_name", "==", "'clean'", "]", ",", "dataset", ".", "test_label", "[", "dataset", ".", "test_label_name", "==", "this_subset", "]", ")", ")", "\n", "binary_test_labels", "[", "binary_test_labels", "==", "2", "]", "=", "1", "\n", "\n", "if", "image_wise", ":", "\n", "                ", "all_TP", ",", "all_FP", "=", "compute_ROC", "(", "x", ",", "y", ",", "binary_test_labels", ")", "\n", "result_path", "=", "root_path", "+", "'/Results/'", "+", "self", ".", "exp_name", "+", "'/ROC_clean_vs_'", "+", "this_subset", "\n", "write_json", "(", "{", "'all_TP'", ":", "all_TP", ",", "'all_FP'", ":", "all_FP", "}", ",", "result_path", "+", "'.json'", ")", "\n", "print_ROC", "(", "result_path", "+", "'.json'", ",", "result_path", "+", "'.png'", ",", "AUC", "=", "True", ")", "\n", "", "if", "pixel_wise", ":", "\n", "                ", "TP", ",", "FP", "=", "compute_ROC_pixel_wise", "(", "x", ",", "y", ",", "masks", ")", "\n", "result_path", "=", "root_path", "+", "'/Results/'", "+", "self", ".", "exp_name", "+", "'/PIXELWISE_ROC_clean_vs_'", "+", "this_subset", "\n", "write_json", "(", "{", "'TP'", ":", "TP", ",", "'FP'", ":", "FP", "}", ",", "result_path", "+", "'.json'", ")", "\n", "print_PIXEL_WISE_ROC", "(", "result_path", "+", "'.json'", ",", "result_path", "+", "'.png'", ",", "AUC", "=", "True", ")", "\n", "\n", "# Compute combined ROC curve (all defects categories vs. clean)", "\n", "", "", "x", "=", "np", ".", "concatenate", "(", "(", "all_pred", "[", "'clean'", "]", "[", "'input'", "]", ",", "all_inputs", "[", "dataset", ".", "test_label", "==", "2", "]", ")", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "(", "all_pred", "[", "'clean'", "]", "[", "'output'", "]", ",", "all_preds", "[", "dataset", ".", "test_label", "==", "2", "]", ")", ")", "\n", "\n", "binary_test_labels", "=", "np", ".", "concatenate", "(", "(", "dataset", ".", "test_label", "[", "dataset", ".", "test_label_name", "==", "'clean'", "]", ",", "dataset", ".", "test_label", "[", "dataset", ".", "test_label", "==", "2", "]", ")", ")", "\n", "binary_test_labels", "[", "binary_test_labels", "==", "2", "]", "=", "1", "\n", "masks", "=", "np", ".", "concatenate", "(", "(", "dataset", ".", "mask", "[", "dataset", ".", "test_label_name", "==", "'clean'", "]", ",", "dataset", ".", "mask", "[", "dataset", ".", "test_label", "==", "2", "]", ")", ")", "\n", "\n", "if", "image_wise", ":", "\n", "            ", "all_TP", ",", "all_FP", "=", "compute_ROC", "(", "x", ",", "y", ",", "binary_test_labels", ")", "\n", "result_path", "=", "root_path", "+", "'/Results/'", "+", "self", ".", "exp_name", "+", "'/ROC_clean_vs_realDefaults'", "\n", "write_json", "(", "{", "'all_TP'", ":", "all_TP", ",", "'all_FP'", ":", "all_FP", "}", ",", "result_path", "+", "'.json'", ")", "\n", "print_ROC", "(", "result_path", "+", "'.json'", ",", "result_path", "+", "'.png'", ",", "AUC", "=", "True", ")", "\n", "", "if", "pixel_wise", ":", "\n", "            ", "TP", ",", "FP", "=", "compute_ROC_pixel_wise", "(", "x", ",", "y", ",", "masks", ")", "\n", "result_path", "=", "root_path", "+", "'/Results/'", "+", "self", ".", "exp_name", "+", "'/PIXELWISE_ROC_clean_vs_realDefaults'", "\n", "write_json", "(", "{", "'TP'", ":", "TP", ",", "'FP'", ":", "FP", "}", ",", "result_path", "+", "'.json'", ")", "\n", "print_PIXEL_WISE_ROC", "(", "result_path", "+", "'.json'", ",", "result_path", "+", "'.png'", ",", "AUC", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.SuperClass.Network_Class.evaluate_MCDropout": [[390, 462], ["instantiate_net", "set", "print", "print", "SuperClass.Network_Class.make_MCprediction", "print", "subsets.remove", "set", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.concatenate", "numpy.concatenate", "utils.ROC.compute_ROC", "write_json", "print_ROC", "utils.ROC.compute_ROC_pixel_wise", "write_json", "print_PIXEL_WISE_ROC", "utils.ROC.compute_ROC", "write_json", "print_ROC", "utils.ROC.compute_ROC_pixel_wise", "write_json", "print_PIXEL_WISE_ROC", "numpy.vstack", "set.add", "set.add"], "methods", ["home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.instantiate_net.instantiate_net", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Models.ClassImtoIm.ImtoIm.make_MCprediction", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.compute_ROC", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.write_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.print_ROC", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.compute_ROC_pixel_wise", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.write_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_PIXEL_WISE_ROC", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.compute_ROC", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.write_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.GUI.helper.print_ROC", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.ROC.compute_ROC_pixel_wise", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.write_json", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.make_graph.print_PIXEL_WISE_ROC", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.add", "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.utils.helper.add"], ["", "", "def", "evaluate_MCDropout", "(", "self", ",", "args", ",", "print_pred", "=", "True", ",", "image_wise", "=", "False", ",", "pixel_wise", "=", "False", ",", "ROC", "=", "True", ",", "norms", "=", "[", "'l0'", ",", "'l1'", ",", "'l2'", ",", "'linf'", "]", ")", ":", "\n", "\n", "        ", "args", "[", "'4_MCdrop'", "]", "=", "True", "\n", "my_dataset", ",", "new_net", "=", "instantiate_net", "(", "args", ",", "Train", "=", "False", ")", "\n", "new_net", ".", "MCDropout", "=", "True", "\n", "\n", "# Compute the predictions", "\n", "used", "=", "set", "(", ")", "\n", "subsets", "=", "[", "x", "for", "x", "in", "my_dataset", ".", "test_label_name", "if", "x", "not", "in", "used", "and", "(", "used", ".", "add", "(", "x", ")", "or", "True", ")", "]", "\n", "all_mask", "=", "{", "}", "\n", "\n", "for", "this_subset", "in", "subsets", ":", "\n", "            ", "all_mask", "[", "this_subset", "]", "=", "my_dataset", ".", "mask", "[", "my_dataset", ".", "test_label_name", "==", "this_subset", "]", "\n", "\n", "# Infer all the test images", "\n", "", "print", "(", "'-------start Inference---------'", ")", "\n", "print", "(", "'xxxxxx'", ",", "self", ".", "exp_name", ")", "\n", "all_pred", "=", "self", ".", "make_MCprediction", "(", "my_dataset", ",", "new_net", ",", "print_pred", ")", "\n", "print", "(", "'-------end Inference---------'", ")", "\n", "\n", "\n", "# Compute the ROC curve for each type of anomaly ", "\n", "subsets", ".", "remove", "(", "'clean'", ")", "\n", "for", "this_subset", "in", "subsets", ":", "\n", "            ", "y", "=", "np", ".", "concatenate", "(", "(", "all_pred", "[", "'clean'", "]", "[", "'variance'", "]", ",", "all_pred", "[", "this_subset", "]", "[", "'variance'", "]", ")", ")", "\n", "x", "=", "np", ".", "zeros", "(", "y", ".", "shape", ")", "\n", "masks", "=", "np", ".", "concatenate", "(", "(", "all_mask", "[", "'clean'", "]", ",", "all_mask", "[", "this_subset", "]", ")", ")", "\n", "\n", "binary_test_labels", "=", "my_dataset", ".", "test_label", "\n", "binary_test_labels", "=", "np", ".", "concatenate", "(", "(", "my_dataset", ".", "test_label", "[", "my_dataset", ".", "test_label_name", "==", "'clean'", "]", ",", "my_dataset", ".", "test_label", "[", "my_dataset", ".", "test_label_name", "==", "this_subset", "]", ")", ")", "\n", "binary_test_labels", "[", "binary_test_labels", "==", "2", "]", "=", "1", "\n", "\n", "if", "image_wise", ":", "\n", "                ", "all_TP", ",", "all_FP", "=", "compute_ROC", "(", "x", ",", "y", ",", "binary_test_labels", ")", "\n", "result_path", "=", "root_path", "+", "'/Results_MCDropout/'", "+", "self", ".", "exp_name", "+", "'/ROC_clean_vs_'", "+", "this_subset", "\n", "write_json", "(", "{", "'all_TP'", ":", "all_TP", ",", "'all_FP'", ":", "all_FP", "}", ",", "result_path", "+", "'.json'", ")", "\n", "print_ROC", "(", "result_path", "+", "'.json'", ",", "result_path", "+", "'.png'", ",", "AUC", "=", "True", ")", "\n", "", "if", "pixel_wise", ":", "\n", "                ", "TP", ",", "FP", "=", "compute_ROC_pixel_wise", "(", "x", ",", "y", ",", "masks", ")", "\n", "result_path", "=", "root_path", "+", "'/Results_MCDropout/'", "+", "self", ".", "exp_name", "+", "'/PIXELWISE_ROC_clean_vs_'", "+", "this_subset", "\n", "write_json", "(", "{", "'TP'", ":", "TP", ",", "'FP'", ":", "FP", "}", ",", "result_path", "+", "'.json'", ")", "\n", "print_PIXEL_WISE_ROC", "(", "result_path", "+", "'.json'", ",", "result_path", "+", "'.png'", ",", "AUC", "=", "True", ")", "\n", "\n", "# Compute combined ROC curve (all defects categories vs. clean)", "\n", "", "", "all_def", "=", "my_dataset", ".", "test_label_name", "[", "my_dataset", ".", "test_label", "==", "2", "]", "\n", "used", "=", "set", "(", ")", "\n", "subsets", "=", "[", "x", "for", "x", "in", "all_def", "if", "x", "not", "in", "used", "and", "(", "used", ".", "add", "(", "x", ")", "or", "True", ")", "]", "\n", "\n", "prediction", "=", "None", "\n", "for", "this_subset", "in", "subsets", ":", "\n", "            ", "if", "prediction", "is", "None", ":", "\n", "                ", "prediction", "=", "all_pred", "[", "this_subset", "]", "[", "'variance'", "]", "\n", "", "else", ":", "\n", "                ", "prediction", "=", "np", ".", "vstack", "(", "(", "prediction", ",", "all_pred", "[", "this_subset", "]", "[", "'variance'", "]", ")", ")", "\n", "\n", "", "", "y", "=", "np", ".", "concatenate", "(", "(", "all_pred", "[", "'clean'", "]", "[", "'variance'", "]", ",", "prediction", ")", ")", "\n", "x", "=", "np", ".", "zeros", "(", "y", ".", "shape", ")", "\n", "masks", "=", "np", ".", "concatenate", "(", "(", "my_dataset", ".", "mask", "[", "my_dataset", ".", "test_label_name", "==", "'clean'", "]", ",", "my_dataset", ".", "mask", "[", "my_dataset", ".", "test_label", "==", "2", "]", ")", ")", "\n", "\n", "binary_test_labels", "=", "np", ".", "concatenate", "(", "(", "my_dataset", ".", "test_label", "[", "my_dataset", ".", "test_label_name", "==", "'clean'", "]", ",", "my_dataset", ".", "test_label", "[", "my_dataset", ".", "test_label", "==", "2", "]", ")", ")", "\n", "binary_test_labels", "[", "binary_test_labels", "==", "2", "]", "=", "1", "\n", "\n", "if", "image_wise", ":", "\n", "            ", "all_TP", ",", "all_FP", "=", "compute_ROC", "(", "x", ",", "y", ",", "binary_test_labels", ")", "\n", "result_path", "=", "root_path", "+", "'/Results_MCDropout/'", "+", "self", ".", "exp_name", "+", "'/ROC_clean_vs_realDefaults'", "\n", "write_json", "(", "{", "'all_TP'", ":", "all_TP", ",", "'all_FP'", ":", "all_FP", "}", ",", "result_path", "+", "'.json'", ")", "\n", "print_ROC", "(", "result_path", "+", "'.json'", ",", "result_path", "+", "'.png'", ",", "AUC", "=", "True", ")", "\n", "", "if", "pixel_wise", ":", "\n", "            ", "TP", ",", "FP", "=", "compute_ROC_pixel_wise", "(", "x", ",", "y", ",", "masks", ")", "\n", "result_path", "=", "root_path", "+", "'/Results_MCDropout/'", "+", "self", ".", "exp_name", "+", "'/PIXELWISE_ROC_clean_vs_realDefaults'", "\n", "write_json", "(", "{", "'TP'", ":", "TP", ",", "'FP'", ":", "FP", "}", ",", "result_path", "+", "'.json'", ")", "\n", "print_PIXEL_WISE_ROC", "(", "result_path", "+", "'.json'", ",", "result_path", "+", "'.png'", ",", "AUC", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Networks.AE.build_model": [[19, 87], ["range", "range", "AE.build_model.resize_layer"], "function", ["None"], ["def", "build_model", "(", "net", ",", "init", ")", ":", "\n", "    ", "def", "resize_layer", "(", "conv", ",", "deconv", ")", ":", "\n", "        ", "if", "tf", ".", "keras", ".", "backend", ".", "image_data_format", "(", ")", "==", "\"channels_first\"", ":", "\n", "            ", "if", "deconv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", ">", "conv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", ":", "\n", "                ", "deconv", "=", "Cropping2D", "(", "cropping", "=", "(", "(", "0", ",", "1", ")", ",", "(", "0", ",", "0", ")", ")", ")", "(", "deconv", ")", "\n", "", "if", "deconv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", ">", "conv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", ":", "\n", "                ", "deconv", "=", "Cropping2D", "(", "cropping", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "1", ")", ")", ")", "(", "deconv", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "deconv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", ">", "conv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", ":", "\n", "                ", "deconv", "=", "Cropping2D", "(", "cropping", "=", "(", "(", "0", ",", "1", ")", ",", "(", "0", ",", "0", ")", ")", ")", "(", "deconv", ")", "\n", "", "if", "deconv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", ">", "conv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", ":", "\n", "                ", "deconv", "=", "Cropping2D", "(", "cropping", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "1", ")", ")", ")", "(", "deconv", ")", "\n", "", "", "return", "deconv", "\n", "\n", "", "def", "get_name", "(", "type", ",", "prev_layer", "=", "None", ")", ":", "\n", "        ", "if", "'CONV'", "in", "type", ":", "\n", "            ", "get_name", ".", "iter", "+=", "1", "\n", "name", "=", "str", "(", "get_name", ".", "iter", ")", ".", "zfill", "(", "3", ")", "+", "'-layer_'", "+", "type", "+", "'_'", "+", "str", "(", "int", "(", "prev_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "/", "2", ")", ")", "+", "'x'", "+", "str", "(", "int", "(", "prev_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "/", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "name", "=", "str", "(", "get_name", ".", "iter", ")", ".", "zfill", "(", "3", ")", "+", "'-layer_'", "+", "type", "\n", "", "return", "name", "\n", "", "get_name", ".", "iter", "=", "0", "\n", "\n", "drop", "=", "[", "0", ",", "0", ",", "0.0", ",", "0.0", ",", "0.1", ",", "0.2", "]", "\n", "\n", "# ------------", "\n", "# Encoder part", "\n", "# ------------", "\n", "conv_layers", "=", "[", "None", "]", "*", "net", ".", "Depth", "\n", "for", "idx", "in", "range", "(", "net", ".", "Depth", ")", ":", "\n", "        ", "conv_layers", "[", "idx", "]", "=", "Conv2D", "(", "net", ".", "Nb_feature_maps", "*", "(", "2", "**", "idx", ")", ",", "(", "net", ".", "Filter_size", ",", "net", ".", "Filter_size", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "\n", "name", "=", "get_name", "(", "'strided_CONV'", ",", "init", "if", "idx", "==", "0", "else", "conv_layers", "[", "idx", "-", "1", "]", ")", ")", "(", "init", "if", "idx", "==", "0", "else", "conv_layers", "[", "idx", "-", "1", "]", ")", "\n", "conv_layers", "[", "idx", "]", "=", "BatchNormalization", "(", "name", "=", "get_name", "(", "'BN'", ")", ")", "(", "conv_layers", "[", "idx", "]", ")", "\n", "conv_layers", "[", "idx", "]", "=", "LeakyReLU", "(", "name", "=", "get_name", "(", "'LeakyReLU'", ")", ")", "(", "conv_layers", "[", "idx", "]", ")", "\n", "conv_layers", "[", "idx", "]", "=", "Dropout", "(", "net", ".", "Dropout_rate", ",", "name", "=", "get_name", "(", "'Dropout'", ")", ",", "seed", "=", "2019", ")", "(", "conv_layers", "[", "idx", "]", ")", "\n", "if", "net", ".", "MCDropout", ":", "\n", "            ", "conv_layers", "[", "idx", "]", "=", "Dropout", "(", "drop", "[", "idx", "]", ",", "name", "=", "get_name", "(", "'MCDropout_encoder'", ")", ")", "(", "conv_layers", "[", "idx", "]", ",", "training", "=", "True", ")", "\n", "\n", "# ------------", "\n", "# Decoder part", "\n", "# ------------", "\n", "", "", "deconv_layers", "=", "[", "None", "]", "*", "net", ".", "Depth", "\n", "for", "idx", "in", "range", "(", "net", ".", "Depth", ")", ":", "\n", "        ", "if", "idx", "==", "0", ":", "\n", "            ", "deconv_layers", "[", "idx", "]", "=", "UpSampling2D", "(", "name", "=", "get_name", "(", "'UpSampling'", ")", ")", "(", "conv_layers", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "deconv_layers", "[", "idx", "]", "=", "Conv2D", "(", "net", ".", "Nb_feature_maps", "*", "(", "2", "**", "(", "net", ".", "Depth", "-", "1", "-", "idx", ")", ")", ",", "(", "net", ".", "Filter_size", ",", "net", ".", "Filter_size", ")", ",", "padding", "=", "'same'", ",", "\n", "name", "=", "get_name", "(", "'deCONV'", ",", "conv_layers", "[", "-", "1", "]", "if", "idx", "==", "0", "else", "deconv_layers", "[", "idx", "-", "1", "]", ")", ")", "(", "conv_layers", "[", "-", "1", "]", "if", "idx", "==", "0", "else", "deconv_layers", "[", "idx", "-", "1", "]", ")", "\n", "deconv_layers", "[", "idx", "]", "=", "BatchNormalization", "(", "name", "=", "get_name", "(", "'BN'", ")", ")", "(", "deconv_layers", "[", "idx", "]", ")", "\n", "deconv_layers", "[", "idx", "]", "=", "LeakyReLU", "(", "name", "=", "get_name", "(", "'LeakyReLU'", ")", ")", "(", "deconv_layers", "[", "idx", "]", ")", "\n", "deconv_layers", "[", "idx", "]", "=", "resize_layer", "(", "conv_layers", "[", "net", ".", "Depth", "-", "1", "-", "idx", "]", ",", "deconv_layers", "[", "idx", "]", ")", "\n", "if", "net", ".", "MCDropout", ":", "\n", "                ", "deconv_layers", "[", "idx", "]", "=", "Dropout", "(", "drop", "[", "net", ".", "Depth", "-", "1", "-", "idx", "]", ",", "name", "=", "get_name", "(", "'MCDropout_decoder'", ")", ")", "(", "deconv_layers", "[", "idx", "]", ",", "training", "=", "True", ")", "\n", "\n", "", "deconv_layers", "[", "idx", "]", "=", "UpSampling2D", "(", "name", "=", "get_name", "(", "'UpSampling'", ")", ")", "(", "deconv_layers", "[", "idx", "]", ")", "\n", "deconv_layers", "[", "idx", "]", "=", "Dropout", "(", "net", ".", "Dropout_rate", ",", "name", "=", "get_name", "(", "'Dropout'", ")", ",", "seed", "=", "2019", ")", "(", "deconv_layers", "[", "idx", "]", ")", "\n", "\n", "\n", "", "", "out", "=", "Conv2D", "(", "1", "if", "net", ".", "Grayscale", "else", "3", ",", "(", "net", ".", "Filter_size", ",", "net", ".", "Filter_size", ")", ",", "padding", "=", "'same'", ",", "activation", "=", "'sigmoid'", ",", "name", "=", "get_name", "(", "'OUT'", ",", "None", ")", ")", "(", "deconv_layers", "[", "-", "1", "]", ")", "\n", "out", "=", "resize_layer", "(", "init", ",", "out", ")", "\n", "model", "=", "tf", ".", "keras", ".", "Model", "(", "init", ",", "out", ")", "\n", "\n", "module", "=", "import_module", "(", "'Models.Losses'", ")", "\n", "loss_fct", "=", "getattr", "(", "module", ",", "net", ".", "Loss", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "net", ".", "Optimizer", ",", "loss", "=", "loss_fct", ",", "metrics", "=", "[", "PSNRLoss", "]", ")", "\n", "#model.summary()", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.anncollin_AnomalyDetection-Keras.Networks.AESc.build_model": [[21, 92], ["range", "range", "AESc.build_model.resize_layer"], "function", ["None"], ["def", "build_model", "(", "net", ",", "init", ")", ":", "\n", "    ", "def", "resize_layer", "(", "conv", ",", "deconv", ")", ":", "\n", "        ", "if", "tf", ".", "keras", ".", "backend", ".", "image_data_format", "(", ")", "==", "\"channels_first\"", ":", "\n", "            ", "if", "deconv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", ">", "conv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", ":", "\n", "                ", "deconv", "=", "Cropping2D", "(", "cropping", "=", "(", "(", "0", ",", "1", ")", ",", "(", "0", ",", "0", ")", ")", ")", "(", "deconv", ")", "\n", "", "if", "deconv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", ">", "conv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "3", "]", ":", "\n", "                ", "deconv", "=", "Cropping2D", "(", "cropping", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "1", ")", ")", ")", "(", "deconv", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "deconv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", ">", "conv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", ":", "\n", "                ", "deconv", "=", "Cropping2D", "(", "cropping", "=", "(", "(", "0", ",", "1", ")", ",", "(", "0", ",", "0", ")", ")", ")", "(", "deconv", ")", "\n", "", "if", "deconv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", ">", "conv", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", ":", "\n", "                ", "deconv", "=", "Cropping2D", "(", "cropping", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "1", ")", ")", ")", "(", "deconv", ")", "\n", "", "", "return", "deconv", "\n", "\n", "\n", "", "def", "get_name", "(", "type", ",", "prev_layer", "=", "None", ")", ":", "\n", "        ", "if", "'CONV'", "in", "type", ":", "\n", "            ", "get_name", ".", "iter", "+=", "1", "\n", "name", "=", "str", "(", "get_name", ".", "iter", ")", ".", "zfill", "(", "3", ")", "+", "'-layer_'", "+", "type", "+", "'_'", "+", "str", "(", "int", "(", "prev_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", "]", "/", "2", ")", ")", "+", "'x'", "+", "str", "(", "int", "(", "prev_layer", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "/", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "name", "=", "str", "(", "get_name", ".", "iter", ")", ".", "zfill", "(", "3", ")", "+", "'-layer_'", "+", "type", "\n", "", "return", "name", "\n", "", "get_name", ".", "iter", "=", "0", "\n", "\n", "drop", "=", "[", "0", ",", "0", ",", "0.1", ",", "0.2", ",", "0.4", ",", "0.5", "]", "\n", "\n", "# ------------", "\n", "# Encoder part", "\n", "# ------------", "\n", "conv_layers", "=", "[", "None", "]", "*", "net", ".", "Depth", "\n", "for", "idx", "in", "range", "(", "net", ".", "Depth", ")", ":", "\n", "        ", "conv_layers", "[", "idx", "]", "=", "Conv2D", "(", "net", ".", "Nb_feature_maps", "*", "(", "2", "**", "idx", ")", ",", "(", "net", ".", "Filter_size", ",", "net", ".", "Filter_size", ")", ",", "strides", "=", "(", "2", ",", "2", ")", ",", "padding", "=", "'same'", ",", "\n", "name", "=", "get_name", "(", "'strided_CONV'", ",", "init", "if", "idx", "==", "0", "else", "conv_layers", "[", "idx", "-", "1", "]", ")", ")", "(", "init", "if", "idx", "==", "0", "else", "conv_layers", "[", "idx", "-", "1", "]", ")", "\n", "conv_layers", "[", "idx", "]", "=", "BatchNormalization", "(", "name", "=", "get_name", "(", "'BN'", ")", ")", "(", "conv_layers", "[", "idx", "]", ")", "\n", "conv_layers", "[", "idx", "]", "=", "LeakyReLU", "(", "name", "=", "get_name", "(", "'LeakyReLU'", ")", ")", "(", "conv_layers", "[", "idx", "]", ")", "\n", "conv_layers", "[", "idx", "]", "=", "Dropout", "(", "net", ".", "Dropout_rate", ",", "name", "=", "get_name", "(", "'Dropout'", ")", ",", "seed", "=", "2019", ")", "(", "conv_layers", "[", "idx", "]", ")", "\n", "if", "net", ".", "MCDropout", ":", "\n", "            ", "conv_layers", "[", "idx", "]", "=", "Dropout", "(", "drop", "[", "idx", "]", ",", "name", "=", "get_name", "(", "'MCDropout_encoder'", ")", ")", "(", "conv_layers", "[", "idx", "]", ",", "training", "=", "True", ")", "\n", "\n", "# ------------", "\n", "# Decoder part", "\n", "# ------------", "\n", "", "", "deconv_layers", "=", "[", "None", "]", "*", "net", ".", "Depth", "\n", "for", "idx", "in", "range", "(", "net", ".", "Depth", ")", ":", "\n", "        ", "if", "idx", "==", "0", ":", "\n", "            ", "deconv_layers", "[", "idx", "]", "=", "UpSampling2D", "(", "name", "=", "get_name", "(", "'UpSampling'", ")", ")", "(", "conv_layers", "[", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "deconv_layers", "[", "idx", "]", "=", "Conv2D", "(", "net", ".", "Nb_feature_maps", "*", "(", "2", "**", "(", "net", ".", "Depth", "-", "1", "-", "idx", ")", ")", ",", "(", "net", ".", "Filter_size", ",", "net", ".", "Filter_size", ")", ",", "padding", "=", "'same'", ",", "\n", "name", "=", "get_name", "(", "'deCONV'", ",", "deconv_layers", "[", "idx", "-", "1", "]", ")", ")", "(", "deconv_layers", "[", "idx", "-", "1", "]", ")", "\n", "deconv_layers", "[", "idx", "]", "=", "BatchNormalization", "(", "name", "=", "get_name", "(", "'BN'", ")", ")", "(", "deconv_layers", "[", "idx", "]", ")", "\n", "deconv_layers", "[", "idx", "]", "=", "LeakyReLU", "(", "name", "=", "get_name", "(", "'LeakyReLU'", ")", ")", "(", "deconv_layers", "[", "idx", "]", ")", "\n", "deconv_layers", "[", "idx", "]", "=", "resize_layer", "(", "conv_layers", "[", "net", ".", "Depth", "-", "1", "-", "idx", "]", ",", "deconv_layers", "[", "idx", "]", ")", "\n", "\n", "if", "net", ".", "MCDropout", ":", "\n", "                ", "deconv_layers", "[", "idx", "]", "=", "Dropout", "(", "drop", "[", "net", ".", "Depth", "-", "1", "-", "idx", "]", ",", "name", "=", "get_name", "(", "'MCDropout_decoder'", ")", ")", "(", "deconv_layers", "[", "idx", "]", ",", "training", "=", "True", ")", "\n", "\n", "", "deconv_layers", "[", "idx", "]", "=", "Add", "(", ")", "(", "[", "conv_layers", "[", "net", ".", "Depth", "-", "1", "-", "idx", "]", ",", "deconv_layers", "[", "idx", "]", "]", ")", "\n", "deconv_layers", "[", "idx", "]", "=", "UpSampling2D", "(", "name", "=", "get_name", "(", "'UpSampling'", ")", ")", "(", "deconv_layers", "[", "idx", "]", ")", "\n", "deconv_layers", "[", "idx", "]", "=", "Dropout", "(", "net", ".", "Dropout_rate", ",", "name", "=", "get_name", "(", "'Dropout'", ")", ",", "seed", "=", "2019", ")", "(", "deconv_layers", "[", "idx", "]", ")", "\n", "\n", "\n", "", "", "out", "=", "Conv2D", "(", "1", "if", "net", ".", "Grayscale", "else", "3", ",", "(", "net", ".", "Filter_size", ",", "net", ".", "Filter_size", ")", ",", "padding", "=", "'same'", ",", "activation", "=", "'sigmoid'", ",", "name", "=", "get_name", "(", "'OUT'", ",", "None", ")", ")", "(", "deconv_layers", "[", "-", "1", "]", ")", "\n", "out", "=", "resize_layer", "(", "init", ",", "out", ")", "\n", "model", "=", "tf", ".", "keras", ".", "Model", "(", "init", ",", "out", ")", "\n", "\n", "module", "=", "import_module", "(", "'Models.Losses'", ")", "\n", "loss_fct", "=", "getattr", "(", "module", ",", "net", ".", "Loss", ")", "\n", "model", ".", "compile", "(", "optimizer", "=", "net", ".", "Optimizer", ",", "loss", "=", "loss_fct", ",", "metrics", "=", "[", "PSNRLoss", "]", ")", "\n", "#model.summary()", "\n", "\n", "return", "model", "\n", "\n"]]}