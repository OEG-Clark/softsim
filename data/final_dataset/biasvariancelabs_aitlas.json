{"home.repos.pwc.inspect_result.biasvariancelabs_aitlas.None.setup.parse_requirements": [[5, 10], ["sorted", "set", "set", "[].strip", "open", "os.path.join", "line.partition", "os.path.dirname"], "function", ["None"], ["def", "parse_requirements", "(", "file", ")", ":", "\n", "    ", "return", "sorted", "(", "set", "(", "\n", "line", ".", "partition", "(", "'#'", ")", "[", "0", "]", ".", "strip", "(", ")", "\n", "for", "line", "in", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "file", ")", ")", "\n", ")", "-", "set", "(", "''", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.aitlas.run.run": [[11, 28], ["utils.get_class", "utils.get_class.", "task_cls.run", "utils.get_class", "utils.get_class.", "model_cls.prepare"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.get_class", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.run", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.get_class", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.prepare"], ["def", "run", "(", "rank", ",", "config", ")", ":", "\n", "# load model, if specified", "\n", "    ", "model", "=", "None", "\n", "if", "config", ".", "model", ":", "\n", "# pass additional parameters to the model", "\n", "        ", "config", ".", "model", ".", "config", ".", "rank", "=", "rank", "\n", "config", ".", "model", ".", "config", ".", "use_ddp", "=", "config", ".", "use_ddp", "\n", "\n", "# initialize model", "\n", "model_cls", "=", "get_class", "(", "config", ".", "model", ".", "classname", ")", "\n", "model", "=", "model_cls", "(", "config", ".", "model", ".", "config", ")", "\n", "model", ".", "prepare", "(", ")", "\n", "\n", "# load task", "\n", "", "task_cls", "=", "get_class", "(", "config", ".", "task", ".", "classname", ")", "\n", "task", "=", "task_cls", "(", "model", ",", "config", ".", "task", ".", "config", ")", "\n", "task", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.aitlas.run.main": [[30, 49], ["base.Config", "open", "json.load", "base.RunConfig().load", "torch.cuda.device_count", "run.run", "ignite.Parallel", "parallel.run", "base.RunConfig"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.run", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.run"], ["", "def", "main", "(", "config_file", ")", ":", "\n", "    ", "\"\"\"Main entry function to the toolbox\"\"\"", "\n", "\n", "with", "open", "(", "config_file", ")", "as", "file", ":", "\n", "        ", "config", "=", "json", ".", "load", "(", "file", ")", "\n", "\n", "# load configuration", "\n", "", "config", "=", "Config", "(", "RunConfig", "(", ")", ".", "load", "(", "config", ")", ")", "\n", "\n", "# run task", "\n", "if", "config", ".", "use_ddp", ":", "\n", "# check if there are multiple GPUs", "\n", "        ", "world_size", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "# spawn processes", "\n", "with", "idist", ".", "Parallel", "(", "backend", "=", "\"gloo\"", ",", "nproc_per_node", "=", "world_size", ")", "as", "parallel", ":", "\n", "            ", "parallel", ".", "run", "(", "run", ",", "config", ")", "\n", "", "", "else", ":", "\n", "        ", "run", "(", "0", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.segmentation_losses.DiceLoss.__init__": [[7, 13], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Dice Loss for image segmentation. Expects sigmoided inputs and binary targets.\n        Implementation from: kaggle.com/bigironsphere/loss-function-library-keras-pytorch\n        \"\"\"", "\n", "super", "(", "DiceLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.segmentation_losses.DiceLoss.forward": [[14, 23], ["inputs.view.view.view", "targets.view.view.view", "inputs.view.view.sum", "targets.view.view.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "smooth", "=", "1", ")", ":", "\n", "\n", "        ", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "intersection", "=", "(", "inputs", "*", "targets", ")", ".", "sum", "(", ")", "\n", "dice", "=", "(", "2.0", "*", "intersection", "+", "smooth", ")", "/", "(", "inputs", ".", "sum", "(", ")", "+", "targets", ".", "sum", "(", ")", "+", "smooth", ")", "\n", "\n", "return", "1", "-", "dice", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.segmentation_losses.FocalLoss.__init__": [[29, 35], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Focal Loss for image segmentation. Expects sigmoided inputs and binary targets.\n        Implementation from: kaggle.com/bigironsphere/loss-function-library-keras-pytorch\n        \"\"\"", "\n", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.segmentation_losses.FocalLoss.forward": [[36, 46], ["inputs.view.view.view", "targets.view.view.view", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "alpha", "=", "ALPHA", ",", "gamma", "=", "GAMMA", ")", ":", "\n", "\n", "        ", "inputs", "=", "inputs", ".", "view", "(", "-", "1", ")", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "\n", "\n", "BCE", "=", "F", ".", "binary_cross_entropy", "(", "inputs", ",", "targets", ",", "reduction", "=", "\"mean\"", ")", "\n", "BCE_EXP", "=", "torch", ".", "exp", "(", "-", "BCE", ")", "\n", "focal_loss", "=", "alpha", "*", "(", "1", "-", "BCE_EXP", ")", "**", "gamma", "*", "BCE", "\n", "\n", "return", "focal_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.segmentation_losses.ComboLoss.__init__": [[49, 58], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loss_modules", ":", "list", ")", ":", "\n", "        ", "\"\"\"\n        Helper module to combine (sum) multiple objectives with equal weights\n\n        Args:\n            loss_modules: List of objective functions\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "losses", "=", "loss_modules", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.segmentation_losses.ComboLoss.forward": [[59, 62], ["sum", "l"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "loss_values", "=", "[", "l", "(", "*", "args", ",", "**", "kwargs", ")", "for", "l", "in", "self", ".", "losses", "]", "\n", "return", "sum", "(", "loss_values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.segmentation_losses.DiceFocal.__init__": [[65, 70], ["segmentation_losses.ComboLoss.__init__", "segmentation_losses.DiceLoss", "segmentation_losses.FocalLoss"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Combination loss: DiceLoss() + FocalLoss()\n        \"\"\"", "\n", "super", "(", "DiceFocal", ",", "self", ")", ".", "__init__", "(", "[", "DiceLoss", "(", ")", ",", "FocalLoss", "(", ")", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.get_class": [[15, 20], ["getattr", "importlib.import_module", "class_name.rindex", "class_name.rindex"], "function", ["None"], ["def", "get_class", "(", "class_name", ")", ":", "\n", "    ", "\"\"\"returns the class type for a given class name. Expects a string of type `module.submodule.Class`\"\"\"", "\n", "module", "=", "class_name", "[", ":", "class_name", ".", "rindex", "(", "\".\"", ")", "]", "\n", "cls", "=", "class_name", "[", "class_name", ".", "rindex", "(", "\".\"", ")", "+", "1", ":", "]", "\n", "return", "getattr", "(", "importlib", ".", "import_module", "(", "module", ")", ",", "cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.current_ts": [[22, 25], ["int", "time.time"], "function", ["None"], ["", "def", "current_ts", "(", ")", ":", "\n", "    ", "\"\"\"returns current timestamp in secs\"\"\"", "\n", "return", "int", "(", "time", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.pil_loader": [[27, 33], ["open", "numpy.asarray", "numpy.asarray", "PIL.Image.open", "PIL.Image.open().convert", "PIL.Image.open"], "function", ["None"], ["", "def", "pil_loader", "(", "file", ",", "convert_to_grayscale", "=", "False", ")", ":", "\n", "    ", "\"\"\"open an image from disk\"\"\"", "\n", "with", "open", "(", "file", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "if", "convert_to_grayscale", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "\"L\"", ")", ")", "\n", "", "return", "np", ".", "asarray", "(", "Image", ".", "open", "(", "f", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.tiff_loader": [[35, 38], ["tifffile.imread"], "function", ["None"], ["", "", "def", "tiff_loader", "(", "file", ")", ":", "\n", "    ", "\"\"\"opens a tiff image from disk\"\"\"", "\n", "return", "tifffile", ".", "imread", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader": [[40, 48], ["os.path.splitext", "utils.pil_loader", "utils.tiff_loader", "ValueError"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.pil_loader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.tiff_loader"], ["", "def", "image_loader", "(", "file_path", ",", "convert_to_grayscale", "=", "False", ")", ":", "\n", "    ", "filename", ",", "file_extension", "=", "os", ".", "path", ".", "splitext", "(", "file_path", ")", "\n", "if", "file_extension", "in", "[", "\".jpg\"", ",", "\".png\"", ",", "\".bmp\"", "]", ":", "\n", "        ", "return", "pil_loader", "(", "file_path", ",", "convert_to_grayscale", ")", "\n", "", "elif", "file_extension", "in", "[", "\".tif\"", ",", "\".tiff\"", "]", ":", "\n", "        ", "return", "tiff_loader", "(", "file_path", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid image. It should be `.jpg, .png, .bmp, .tif, .tiff`\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_invert": [[50, 55], ["PIL.Image.open().convert", "numpy.asarray", "PIL.ImageOps.invert", "PIL.Image.open"], "function", ["None"], ["", "", "def", "image_invert", "(", "file_path", ",", "convert_to_grayscale", "=", "False", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "file_path", ")", ".", "convert", "(", "\"L\"", ")", "\n", "if", "convert_to_grayscale", ":", "\n", "        ", "img", "=", "ImageOps", ".", "invert", "(", "img", ")", "\n", "", "return", "np", ".", "asarray", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.stringify": [[57, 67], ["isinstance", "isinstance", "str", "utils.stringify", "obj.items", "utils.stringify"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.stringify", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.stringify"], ["", "def", "stringify", "(", "obj", ")", ":", "\n", "    ", "\"\"\"stringify whatever object you have\"\"\"", "\n", "if", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "        ", "response", "=", "\", \"", ".", "join", "(", "[", "stringify", "(", "o", ")", "for", "o", "in", "obj", "]", ")", "\n", "", "elif", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "        ", "response", "=", "\", \"", ".", "join", "(", "[", "f\"{k}:{stringify(v)}\"", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "response", "=", "str", "(", "obj", ")", "\n", "\n", "", "return", "response", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.parse_img_id": [[69, 81], ["int", "torch.from_numpy().float", "int", "torch.Tensor().float", "numpy.asarray", "file_path.split", "torch.from_numpy().float", "file_name.split", "torch.from_numpy", "torch.Tensor", "numpy.reshape", "numpy.zeros", "torch.from_numpy", "numpy.asarray", "numpy.reshape", "len"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split"], ["", "def", "parse_img_id", "(", "file_path", ",", "orients", ")", ":", "\n", "    ", "\"\"\"Parses direction, strip and coordinate components from a SpaceNet6 image filepath.\"\"\"", "\n", "file_name", "=", "file_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "strip_name", "=", "\"_\"", ".", "join", "(", "file_name", ".", "split", "(", "\"_\"", ")", "[", "-", "4", ":", "-", "2", "]", ")", "\n", "direction", "=", "int", "(", "orients", ".", "loc", "[", "strip_name", "]", "[", "\"direction\"", "]", ")", "\n", "direction", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "np", ".", "asarray", "(", "[", "direction", "]", ")", ",", "(", "1", ",", "1", ",", "1", ")", ")", ")", ".", "float", "(", ")", "\n", "val", "=", "int", "(", "orients", ".", "loc", "[", "strip_name", "]", "[", "\"val\"", "]", ")", "\n", "strip", "=", "torch", ".", "Tensor", "(", "np", ".", "zeros", "(", "(", "len", "(", "orients", ".", "index", ")", ",", "1", ",", "1", ")", ")", ")", ".", "float", "(", ")", "\n", "strip", "[", "val", "]", "=", "1", "\n", "coord", "=", "np", ".", "asarray", "(", "[", "orients", ".", "loc", "[", "strip_name", "]", "[", "\"coord_y\"", "]", "]", ")", "\n", "coord", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "coord", ",", "(", "1", ",", "1", ",", "1", ")", ")", ")", ".", "float", "(", ")", "-", "0.5", "\n", "return", "direction", ",", "strip", ",", "coord", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.split_images": [[85, 121], ["glob.glob", "glob.glob", "open", "glob.glob.sort", "glob.glob.sort", "os.makedirs", "enumerate", "open.close", "os.path.join", "os.path.join", "zip", "cv2.imread", "cv2.imread", "range", "print", "os.path.splitext", "os.path.splitext", "range", "os.path.basename", "os.path.basename", "len", "os.path.join", "cv2.imwrite", "os.path.join", "cv2.imwrite", "open.write"], "function", ["None"], ["", "def", "split_images", "(", "images_dir", ",", "ext_images", ",", "masks_dir", ",", "ext_masks", ",", "output_dir", ",", "target_size", ")", ":", "\n", "    ", "img_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "images_dir", ",", "ext_images", ")", ")", "\n", "mask_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "masks_dir", ",", "ext_masks", ")", ")", "\n", "file", "=", "open", "(", "\"list_patches.txt\"", ",", "\"w\"", ")", "\n", "\n", "img_paths", ".", "sort", "(", ")", "\n", "mask_paths", ".", "sort", "(", ")", "\n", "\n", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "for", "i", ",", "(", "img_path", ",", "mask_path", ")", "in", "enumerate", "(", "zip", "(", "img_paths", ",", "mask_paths", ")", ")", ":", "\n", "        ", "img_filename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "mask_filename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "mask_path", ")", ")", "[", "0", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "mask", "=", "cv2", ".", "imread", "(", "mask_path", ")", "\n", "\n", "assert", "img_filename", "==", "mask_filename", "and", "img", ".", "shape", "[", ":", "2", "]", "==", "mask", ".", "shape", "[", ":", "2", "]", "\n", "\n", "k", "=", "0", "\n", "for", "y", "in", "range", "(", "0", ",", "img", ".", "shape", "[", "0", "]", ",", "target_size", ")", ":", "\n", "            ", "for", "x", "in", "range", "(", "0", ",", "img", ".", "shape", "[", "1", "]", ",", "target_size", ")", ":", "\n", "                ", "img_tile", "=", "img", "[", "y", ":", "y", "+", "target_size", ",", "x", ":", "x", "+", "target_size", "]", "\n", "mask_tile", "=", "mask", "[", "y", ":", "y", "+", "target_size", ",", "x", ":", "x", "+", "target_size", "]", "\n", "\n", "if", "img_tile", ".", "shape", "[", "0", "]", "==", "target_size", "and", "img_tile", ".", "shape", "[", "1", "]", "==", "target_size", ":", "\n", "                    ", "out_img_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"{}_{}.jpg\"", ".", "format", "(", "img_filename", ",", "k", ")", ")", "\n", "cv2", ".", "imwrite", "(", "out_img_path", ",", "img_tile", ")", "\n", "\n", "out_mask_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"{}_{}_m.png\"", ".", "format", "(", "mask_filename", ",", "k", ")", ")", "\n", "cv2", ".", "imwrite", "(", "out_mask_path", ",", "mask_tile", ")", "\n", "\n", "file", ".", "write", "(", "\"{}_{}\"", ".", "format", "(", "img_filename", ",", "k", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "k", "+=", "1", "\n", "\n", "", "", "print", "(", "\"Processed {} {}/{}\"", ".", "format", "(", "img_filename", ",", "i", "+", "1", ",", "len", "(", "img_paths", ")", ")", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.load_voc_format_dataset": [[123, 149], ["os.path.expanduser", "sorted", "open", "f.readlines", "os.walk", "sorted", "line.decode.decode", "line[].split", "numpy.asarray", "os.path.join", "list", "images.append", "map", "fname.find", "line.decode.find", "line.decode.find", "fname.find"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.map"], ["", "def", "load_voc_format_dataset", "(", "dir_path", ",", "csv_file_path", ")", ":", "\n", "    ", "\"\"\"Loads a dataset in the Pascal VOC format. It expects a `multilabels.txt` file and `images` in the root folder\"\"\"", "\n", "\n", "# read labels", "\n", "multi_hot_labels", "=", "{", "}", "\n", "with", "open", "(", "csv_file_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", "[", "1", ":", "]", ":", "\n", "            ", "line", "=", "line", ".", "decode", "(", "\"utf-8\"", ")", "\n", "labels_list", "=", "line", "[", "line", ".", "find", "(", "\"\\t\"", ")", "+", "1", ":", "]", ".", "split", "(", "\"\\t\"", ")", "\n", "multi_hot_labels", "[", "line", "[", ":", "line", ".", "find", "(", "\"\\t\"", ")", "]", "]", "=", "np", ".", "asarray", "(", "\n", "list", "(", "(", "map", "(", "float", ",", "labels_list", ")", ")", ")", "\n", ")", "\n", "\n", "", "", "images", "=", "[", "]", "\n", "images_folder", "=", "os", ".", "path", ".", "expanduser", "(", "dir_path", ")", "\n", "# this ensures the image always have the same index numbers", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "images_folder", ")", ")", ":", "\n", "        ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "if", "fname", "[", ":", "fname", ".", "find", "(", "\".\"", ")", "]", "in", "multi_hot_labels", ":", "\n", "                ", "multi_hot_label", "=", "multi_hot_labels", "[", "fname", "[", ":", "fname", ".", "find", "(", "\".\"", ")", "]", "]", "\n", "item", "=", "(", "path", ",", "multi_hot_label", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.has_file_allowed_extension": [[151, 161], ["file_path.lower", "any", "file_path.lower.endswith"], "function", ["None"], ["", "def", "has_file_allowed_extension", "(", "file_path", ",", "extensions", ")", ":", "\n", "    ", "\"\"\"Checks if a file is an allowed extension.\n    Args:\n        file_path (string): path to a file\n        extensions (iterable of strings): extensions to consider (lowercase)\n    Returns:\n        bool: True if the filename ends with one of given extensions\n    \"\"\"", "\n", "filename_lower", "=", "file_path", ".", "lower", "(", ")", "\n", "return", "any", "(", "filename_lower", ".", "endswith", "(", "ext", ")", "for", "ext", "in", "extensions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.load_folder_per_class_dataset": [[163, 186], ["os.path.expanduser", "ValueError", "os.path.join", "sorted", "os.listdir", "os.path.isdir", "os.path.isdir", "os.walk", "sorted", "os.path.join", "utils.has_file_allowed_extension", "os.path.join", "images.append", "os.path.basename", "os.path.normpath"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.has_file_allowed_extension"], ["", "def", "load_folder_per_class_dataset", "(", "dir", ",", "extensions", "=", "None", ")", ":", "\n", "    ", "if", "not", "extensions", ":", "\n", "        ", "raise", "ValueError", "(", "\"Please provide accepted extensions for image scanning.\"", ")", "\n", "\n", "", "images", "=", "[", "]", "\n", "dir", "=", "os", ".", "path", ".", "expanduser", "(", "dir", ")", "\n", "classes", "=", "[", "\n", "item", "for", "item", "in", "os", ".", "listdir", "(", "dir", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "item", ")", ")", "\n", "]", "\n", "\n", "for", "target", "in", "classes", ":", "\n", "        ", "d", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "target", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "d", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "d", ")", ")", ":", "\n", "            ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "                ", "if", "has_file_allowed_extension", "(", "fname", ",", "extensions", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "root", ")", ")", ",", "fname", ")", "\n", "item", "=", "(", "path", ",", "target", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.load_aitlas_format_dataset": [[188, 200], ["open", "csv.reader", "enumerate", "data.append"], "function", ["None"], ["", "def", "load_aitlas_format_dataset", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"Reads the images from a CSV. Format: (image_path, class_name)\"\"\"", "\n", "data", "=", "[", "]", "\n", "\n", "with", "open", "(", "file_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "csv_reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "index", ",", "row", "in", "enumerate", "(", "csv_reader", ")", ":", "\n", "            ", "path", "=", "row", "[", "0", "]", "\n", "item", "=", "(", "path", ",", "row", "[", "1", "]", ")", "\n", "data", ".", "append", "(", "item", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.submit_inria_results": [[204, 216], ["os.listdir", "file.endswith", "os.path.join", "os.path.join().replace", "subprocess.call", "os.path.join().replace", "os.path.join().replace", "subprocess.call", "os.path.join", "os.path.join", "os.path.join"], "function", ["None"], ["", "", "def", "submit_inria_results", "(", "input_dir", ",", "output_dir", ")", ":", "\n", "    ", "for", "file", "in", "os", ".", "listdir", "(", "input_dir", ")", ":", "\n", "        ", "if", "file", ".", "endswith", "(", "\"_Buildings.png\"", ")", ":", "\n", "            ", "input_file", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "file", ")", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "file", ")", ".", "replace", "(", "\"_Buildings.png\"", ",", "\".tif\"", ")", "\n", "command", "=", "\"gdal_translate -of GTiff \"", "+", "input_file", "+", "\" \"", "+", "output_file", "\n", "subprocess", ".", "call", "(", "command", ",", "shell", "=", "True", ")", "\n", "input_file", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "file", ")", ".", "replace", "(", "\"_Buildings.png\"", ",", "\".tif\"", ")", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "file", ")", ".", "replace", "(", "\"_Buildings.png\"", ",", "\".tif\"", ")", "\n", "command", "=", "\"gdal_translate --config GDAL_PAM_ENABLED NO -co COMPRESS=CCITTFAX4 -co NBITS=1 \"", "+", "input_file", "+", "\" \"", "+", "output_file", "\n", "subprocess", ".", "call", "(", "command", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.save_best_model": [[218, 243], ["utils.current_ts", "os.path.join", "torch.save", "os.path.isdir", "os.makedirs", "os.path.join", "os.path.join", "model.state_dict", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.current_ts"], ["", "", "", "def", "save_best_model", "(", "model", ",", "model_directory", ",", "epoch", ",", "optimizer", ",", "loss", ",", "start", ",", "run_id", ")", ":", "\n", "    ", "\"\"\"\n    Saves the model on disk\n    :param model_directory:\n    :return:\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "model_directory", ",", "run_id", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "model_directory", ",", "run_id", ")", ")", "\n", "\n", "", "timestamp", "=", "current_ts", "(", ")", "\n", "checkpoint", "=", "os", ".", "path", ".", "join", "(", "\n", "model_directory", ",", "run_id", ",", "f\"best_checkpoint_{timestamp}_{epoch}.pth.tar\"", "\n", ")", "\n", "\n", "# create timestamped checkpoint", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"loss\"", ":", "loss", ",", "\n", "\"start\"", ":", "start", ",", "\n", "\"id\"", ":", "run_id", ",", "\n", "}", ",", "\n", "checkpoint", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.pic.PIC.__init__": [[26, 33], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "args", "=", "None", ",", "sigma", "=", "0.2", ",", "nnn", "=", "5", ",", "alpha", "=", "0.001", ",", "distribute_singletons", "=", "True", "\n", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "nnn", "=", "nnn", "\n", "self", ".", "distribute_singletons", "=", "distribute_singletons", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.pic.PIC.cluster": [[34, 77], ["time.time", "utils.preprocess_features", "utils.make_graph", "utils.run_pic", "set", "enumerate", "images_lists[].append", "pic.PIC.images_lists.append", "logging.info", "images_lists[].append", "len", "time.time", "len"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.preprocess_features", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.make_graph", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.run_pic"], ["", "def", "cluster", "(", "self", ",", "data", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# preprocess the data", "\n", "xb", "=", "preprocess_features", "(", "data", ")", "\n", "\n", "# construct nnn graph", "\n", "I", ",", "D", "=", "make_graph", "(", "xb", ",", "self", ".", "nnn", ")", "\n", "\n", "# run PIC", "\n", "clust", "=", "run_pic", "(", "I", ",", "D", ",", "self", ".", "sigma", ",", "self", ".", "alpha", ")", "\n", "images_lists", "=", "{", "}", "\n", "for", "h", "in", "set", "(", "clust", ")", ":", "\n", "            ", "images_lists", "[", "h", "]", "=", "[", "]", "\n", "", "for", "data", ",", "c", "in", "enumerate", "(", "clust", ")", ":", "\n", "            ", "images_lists", "[", "c", "]", ".", "append", "(", "data", ")", "\n", "\n", "# allocate singletons to clusters of their closest NN not singleton", "\n", "", "if", "self", ".", "distribute_singletons", ":", "\n", "            ", "clust_NN", "=", "{", "}", "\n", "for", "i", "in", "images_lists", ":", "\n", "# if singleton", "\n", "                ", "if", "len", "(", "images_lists", "[", "i", "]", ")", "==", "1", ":", "\n", "                    ", "s", "=", "images_lists", "[", "i", "]", "[", "0", "]", "\n", "# for NN", "\n", "for", "n", "in", "I", "[", "s", ",", "1", ":", "]", ":", "\n", "# if NN is not a singleton", "\n", "                        ", "if", "not", "len", "(", "images_lists", "[", "clust", "[", "n", "]", "]", ")", "==", "1", ":", "\n", "                            ", "clust_NN", "[", "s", "]", "=", "n", "\n", "break", "\n", "", "", "", "", "for", "s", "in", "clust_NN", ":", "\n", "                ", "del", "images_lists", "[", "clust", "[", "s", "]", "]", "\n", "clust", "[", "s", "]", "=", "clust", "[", "clust_NN", "[", "s", "]", "]", "\n", "images_lists", "[", "clust", "[", "s", "]", "]", ".", "append", "(", "s", ")", "\n", "\n", "", "", "self", ".", "images_lists", "=", "[", "]", "\n", "for", "c", "in", "images_lists", ":", "\n", "            ", "self", ".", "images_lists", ".", "append", "(", "images_lists", "[", "c", "]", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "logging", ".", "info", "(", "\"pic time: {0:.0f} s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "", "return", "0", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.kmeans.Kmeans.__init__": [[16, 18], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "k", ")", ":", "\n", "        ", "self", ".", "k", "=", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.kmeans.Kmeans.cluster": [[19, 39], ["time.time", "utils.preprocess_features", "utils.run_kmeans", "range", "len", "kmeans.Kmeans.images_lists[].append", "logging.info", "range", "time.time"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.preprocess_features", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.run_kmeans"], ["", "def", "cluster", "(", "self", ",", "data", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"Performs k-means clustering.\n            Args:\n                x_data (np.array N * dim): data to cluster\n        \"\"\"", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "# PCA-reducing, whitening and L2-normalization", "\n", "xb", "=", "preprocess_features", "(", "data", ")", "\n", "\n", "# cluster the data", "\n", "I", ",", "loss", "=", "run_kmeans", "(", "xb", ",", "self", ".", "k", ",", "verbose", ")", "\n", "self", ".", "images_lists", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "k", ")", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "data", ")", ")", ":", "\n", "            ", "self", ".", "images_lists", "[", "I", "[", "i", "]", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "            ", "logging", ".", "info", "(", "\"k-means time: {0:.0f} s\"", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.ReassignedDataset.__init__": [[72, 75], ["utils.ReassignedDataset.make_dataset"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.ReassignedDataset.make_dataset"], ["strip_name", "=", "\"_\"", ".", "join", "(", "file_name", ".", "split", "(", "\"_\"", ")", "[", "-", "4", ":", "-", "2", "]", ")", "\n", "direction", "=", "int", "(", "orients", ".", "loc", "[", "strip_name", "]", "[", "\"direction\"", "]", ")", "\n", "direction", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "np", ".", "asarray", "(", "[", "direction", "]", ")", ",", "(", "1", ",", "1", ",", "1", ")", ")", ")", ".", "float", "(", ")", "\n", "val", "=", "int", "(", "orients", ".", "loc", "[", "strip_name", "]", "[", "\"val\"", "]", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.ReassignedDataset.make_dataset": [[76, 82], ["enumerate", "pseudolabels.append", "enumerate", "set"], "methods", ["None"], ["strip", "=", "torch", ".", "Tensor", "(", "np", ".", "zeros", "(", "(", "len", "(", "orients", ".", "index", ")", ",", "1", ",", "1", ")", ")", ")", ".", "float", "(", ")", "\n", "strip", "[", "val", "]", "=", "1", "\n", "coord", "=", "np", ".", "asarray", "(", "[", "orients", ".", "loc", "[", "strip_name", "]", "[", "\"coord_y\"", "]", "]", ")", "\n", "coord", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "coord", ",", "(", "1", ",", "1", ",", "1", ")", ")", ")", ".", "float", "(", ")", "-", "0.5", "\n", "return", "direction", ",", "strip", ",", "coord", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.ReassignedDataset.__getitem__": [[83, 91], ["utils.ReassignedDataset.dataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__getitem__"], ["# Run this Function to split images into XxX pieces, and file out.txt containing the lists of patches", "\n", "# Example call: split_images(\"./inria/images\", \"*.tiff\", \"./inria/masks\", \"*.tif\", \"./inria/output\", 500)", "\n", "", "def", "split_images", "(", "images_dir", ",", "ext_images", ",", "masks_dir", ",", "ext_masks", ",", "output_dir", ",", "target_size", ")", ":", "\n", "    ", "img_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "images_dir", ",", "ext_images", ")", ")", "\n", "mask_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "masks_dir", ",", "ext_masks", ")", ")", "\n", "file", "=", "open", "(", "\"list_patches.txt\"", ",", "\"w\"", ")", "\n", "\n", "img_paths", ".", "sort", "(", ")", "\n", "mask_paths", ".", "sort", "(", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.ReassignedDataset.__len__": [[92, 94], ["len"], "methods", ["None"], ["\n", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "for", "i", ",", "(", "img_path", ",", "mask_path", ")", "in", "enumerate", "(", "zip", "(", "img_paths", ",", "mask_paths", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.preprocess_features": [[14, 36], ["mat.apply_py.astype", "faiss.PCAMatrix", "faiss.PCAMatrix.train", "faiss.PCAMatrix.apply_py", "numpy.linalg.norm"], "function", ["None"], ["\n", "def", "get_class", "(", "class_name", ")", ":", "\n", "    ", "\"\"\"returns the class type for a given class name. Expects a string of type `module.submodule.Class`\"\"\"", "\n", "module", "=", "class_name", "[", ":", "class_name", ".", "rindex", "(", "\".\"", ")", "]", "\n", "cls", "=", "class_name", "[", "class_name", ".", "rindex", "(", "\".\"", ")", "+", "1", ":", "]", "\n", "return", "getattr", "(", "importlib", ".", "import_module", "(", "module", ")", ",", "cls", ")", "\n", "\n", "\n", "", "def", "current_ts", "(", ")", ":", "\n", "    ", "\"\"\"returns current timestamp in secs\"\"\"", "\n", "return", "int", "(", "time", "(", ")", ")", "\n", "\n", "\n", "", "def", "pil_loader", "(", "file", ",", "convert_to_grayscale", "=", "False", ")", ":", "\n", "    ", "\"\"\"open an image from disk\"\"\"", "\n", "with", "open", "(", "file", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "if", "convert_to_grayscale", ":", "\n", "            ", "return", "np", ".", "asarray", "(", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "\"L\"", ")", ")", "\n", "", "return", "np", ".", "asarray", "(", "Image", ".", "open", "(", "f", ")", ")", "\n", "\n", "\n", "", "", "def", "tiff_loader", "(", "file", ")", ":", "\n", "    ", "\"\"\"opens a tiff image from disk\"\"\"", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.make_graph": [[38, 59], ["faiss.StandardGpuResources", "faiss.GpuIndexFlatConfig", "faiss.GpuIndexFlatL2", "faiss.GpuIndexFlatL2.add", "faiss.GpuIndexFlatL2.search", "int", "torch.cuda.device_count", "torch.cuda.device_count"], "function", ["None"], ["\n", "\n", "", "def", "image_loader", "(", "file_path", ",", "convert_to_grayscale", "=", "False", ")", ":", "\n", "    ", "filename", ",", "file_extension", "=", "os", ".", "path", ".", "splitext", "(", "file_path", ")", "\n", "if", "file_extension", "in", "[", "\".jpg\"", ",", "\".png\"", ",", "\".bmp\"", "]", ":", "\n", "        ", "return", "pil_loader", "(", "file_path", ",", "convert_to_grayscale", ")", "\n", "", "elif", "file_extension", "in", "[", "\".tif\"", ",", "\".tiff\"", "]", ":", "\n", "        ", "return", "tiff_loader", "(", "file_path", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid image. It should be `.jpg, .png, .bmp, .tif, .tiff`\"", ")", "\n", "\n", "\n", "", "", "def", "image_invert", "(", "file_path", ",", "convert_to_grayscale", "=", "False", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "file_path", ")", ".", "convert", "(", "\"L\"", ")", "\n", "if", "convert_to_grayscale", ":", "\n", "        ", "img", "=", "ImageOps", ".", "invert", "(", "img", ")", "\n", "", "return", "np", ".", "asarray", "(", "img", ")", "\n", "\n", "\n", "", "def", "stringify", "(", "obj", ")", ":", "\n", "    ", "\"\"\"stringify whatever object you have\"\"\"", "\n", "if", "isinstance", "(", "obj", ",", "list", ")", ":", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.cluster_assign": [[96, 114], ["enumerate", "utils.ReassignedDataset", "image_indexes.extend", "pseudolabels.extend", "len"], "function", ["None"], ["mask_filename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "mask_path", ")", ")", "[", "0", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "mask", "=", "cv2", ".", "imread", "(", "mask_path", ")", "\n", "\n", "assert", "img_filename", "==", "mask_filename", "and", "img", ".", "shape", "[", ":", "2", "]", "==", "mask", ".", "shape", "[", ":", "2", "]", "\n", "\n", "k", "=", "0", "\n", "for", "y", "in", "range", "(", "0", ",", "img", ".", "shape", "[", "0", "]", ",", "target_size", ")", ":", "\n", "            ", "for", "x", "in", "range", "(", "0", ",", "img", ".", "shape", "[", "1", "]", ",", "target_size", ")", ":", "\n", "                ", "img_tile", "=", "img", "[", "y", ":", "y", "+", "target_size", ",", "x", ":", "x", "+", "target_size", "]", "\n", "mask_tile", "=", "mask", "[", "y", ":", "y", "+", "target_size", ",", "x", ":", "x", "+", "target_size", "]", "\n", "\n", "if", "img_tile", ".", "shape", "[", "0", "]", "==", "target_size", "and", "img_tile", ".", "shape", "[", "1", "]", "==", "target_size", ":", "\n", "                    ", "out_img_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"{}_{}.jpg\"", ".", "format", "(", "img_filename", ",", "k", ")", ")", "\n", "cv2", ".", "imwrite", "(", "out_img_path", ",", "img_tile", ")", "\n", "\n", "out_mask_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"{}_{}_m.png\"", ".", "format", "(", "mask_filename", ",", "k", ")", ")", "\n", "cv2", ".", "imwrite", "(", "out_mask_path", ",", "mask_tile", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.run_kmeans": [[116, 138], ["faiss.Kmeans", "faiss.IndexFlatL2", "faiss.Kmeans.train", "faiss.Kmeans.index.search", "faiss.vector_to_array", "logging.info", "int"], "function", ["None"], ["\n", "", "k", "+=", "1", "\n", "\n", "", "", "print", "(", "\"Processed {} {}/{}\"", ".", "format", "(", "img_filename", ",", "i", "+", "1", ",", "len", "(", "img_paths", ")", ")", ")", "\n", "", "file", ".", "close", "(", ")", "\n", "\n", "\n", "", "def", "load_voc_format_dataset", "(", "dir_path", ",", "csv_file_path", ")", ":", "\n", "    ", "\"\"\"Loads a dataset in the Pascal VOC format. It expects a `multilabels.txt` file and `images` in the root folder\"\"\"", "\n", "\n", "# read labels", "\n", "multi_hot_labels", "=", "{", "}", "\n", "with", "open", "(", "csv_file_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", "[", "1", ":", "]", ":", "\n", "            ", "line", "=", "line", ".", "decode", "(", "\"utf-8\"", ")", "\n", "labels_list", "=", "line", "[", "line", ".", "find", "(", "\"\\t\"", ")", "+", "1", ":", "]", ".", "split", "(", "\"\\t\"", ")", "\n", "multi_hot_labels", "[", "line", "[", ":", "line", ".", "find", "(", "\"\\t\"", ")", "]", "]", "=", "np", ".", "asarray", "(", "\n", "list", "(", "(", "map", "(", "float", ",", "labels_list", ")", ")", ")", "\n", ")", "\n", "\n", "", "", "images", "=", "[", "]", "\n", "images_folder", "=", "os", ".", "path", ".", "expanduser", "(", "dir_path", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.arrange_clustering": [[140, 148], ["enumerate", "numpy.argsort", "image_indexes.extend", "pseudolabels.extend", "numpy.asarray", "len"], "function", ["None"], ["for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "images_folder", ")", ")", ":", "\n", "        ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "if", "fname", "[", ":", "fname", ".", "find", "(", "\".\"", ")", "]", "in", "multi_hot_labels", ":", "\n", "                ", "multi_hot_label", "=", "multi_hot_labels", "[", "fname", "[", ":", "fname", ".", "find", "(", "\".\"", ")", "]", "]", "\n", "item", "=", "(", "path", ",", "multi_hot_label", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "return", "images", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.make_adjacencyW": [[150, 175], ["numpy.reshape", "numpy.multiply", "numpy.vectorize", "np.vectorize."], "function", ["None"], ["\n", "", "def", "has_file_allowed_extension", "(", "file_path", ",", "extensions", ")", ":", "\n", "    ", "\"\"\"Checks if a file is an allowed extension.\n    Args:\n        file_path (string): path to a file\n        extensions (iterable of strings): extensions to consider (lowercase)\n    Returns:\n        bool: True if the filename ends with one of given extensions\n    \"\"\"", "\n", "filename_lower", "=", "file_path", ".", "lower", "(", ")", "\n", "return", "any", "(", "filename_lower", ".", "endswith", "(", "ext", ")", "for", "ext", "in", "extensions", ")", "\n", "\n", "\n", "", "def", "load_folder_per_class_dataset", "(", "dir", ",", "extensions", "=", "None", ")", ":", "\n", "    ", "if", "not", "extensions", ":", "\n", "        ", "raise", "ValueError", "(", "\"Please provide accepted extensions for image scanning.\"", ")", "\n", "\n", "", "images", "=", "[", "]", "\n", "dir", "=", "os", ".", "path", ".", "expanduser", "(", "dir", ")", "\n", "classes", "=", "[", "\n", "item", "for", "item", "in", "os", ".", "listdir", "(", "dir", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "item", ")", ")", "\n", "]", "\n", "\n", "for", "target", "in", "classes", ":", "\n", "        ", "d", "=", "os", ".", "path", ".", "join", "(", "dir", ",", "target", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "d", ")", ":", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.run_pic": [[177, 208], ["utils.make_adjacencyW", "time.time", "v0.astype", "time.time", "range", "make_adjacencyW.transpose", "numpy.ones", "numpy.zeros", "np.zeros.sum", "int", "W.transpose().dot", "utils.find_maxima_cluster", "W.transpose"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.make_adjacencyW", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.find_maxima_cluster"], ["\n", "", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "d", ")", ")", ":", "\n", "            ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "                ", "if", "has_file_allowed_extension", "(", "fname", ",", "extensions", ")", ":", "\n", "                    ", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "root", ")", ")", ",", "fname", ")", "\n", "item", "=", "(", "path", ",", "target", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "", "return", "images", "\n", "\n", "\n", "", "def", "load_aitlas_format_dataset", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"Reads the images from a CSV. Format: (image_path, class_name)\"\"\"", "\n", "data", "=", "[", "]", "\n", "\n", "with", "open", "(", "file_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "csv_reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "index", ",", "row", "in", "enumerate", "(", "csv_reader", ")", ":", "\n", "            ", "path", "=", "row", "[", "0", "]", "\n", "item", "=", "(", "path", ",", "row", "[", "1", "]", ")", "\n", "data", ".", "append", "(", "item", ")", "\n", "\n", "", "return", "data", "\n", "\n", "\n", "# Run this function to submit the masks to inria contest for semantic segmentation", "\n", "# https://project.inria.fr/aerialimagelabeling/", "\n", "", "", "def", "submit_inria_results", "(", "input_dir", ",", "output_dir", ")", ":", "\n", "    ", "for", "file", "in", "os", ".", "listdir", "(", "input_dir", ")", ":", "\n", "        ", "if", "file", ".", "endswith", "(", "\"_Buildings.png\"", ")", ":", "\n", "            ", "input_file", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "file", ")", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "file", ")", ".", "replace", "(", "\"_Buildings.png\"", ",", "\".tif\"", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.find_maxima_cluster": [[210, 241], ["numpy.zeros", "list", "range", "range", "range", "range", "range", "numpy.ones"], "function", ["None"], ["subprocess", ".", "call", "(", "command", ",", "shell", "=", "True", ")", "\n", "input_file", "=", "os", ".", "path", ".", "join", "(", "input_dir", ",", "file", ")", ".", "replace", "(", "\"_Buildings.png\"", ",", "\".tif\"", ")", "\n", "output_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "file", ")", ".", "replace", "(", "\"_Buildings.png\"", ",", "\".tif\"", ")", "\n", "command", "=", "\"gdal_translate --config GDAL_PAM_ENABLED NO -co COMPRESS=CCITTFAX4 -co NBITS=1 \"", "+", "input_file", "+", "\" \"", "+", "output_file", "\n", "subprocess", ".", "call", "(", "command", ",", "shell", "=", "True", ")", "\n", "\n", "\n", "", "", "", "def", "save_best_model", "(", "model", ",", "model_directory", ",", "epoch", ",", "optimizer", ",", "loss", ",", "start", ",", "run_id", ")", ":", "\n", "    ", "\"\"\"\n    Saves the model on disk\n    :param model_directory:\n    :return:\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "model_directory", ",", "run_id", ")", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "model_directory", ",", "run_id", ")", ")", "\n", "\n", "", "timestamp", "=", "current_ts", "(", ")", "\n", "checkpoint", "=", "os", ".", "path", ".", "join", "(", "\n", "model_directory", ",", "run_id", ",", "f\"best_checkpoint_{timestamp}_{epoch}.pth.tar\"", "\n", ")", "\n", "\n", "# create timestamped checkpoint", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"loss\"", ":", "loss", ",", "\n", "\"start\"", ":", "start", ",", "\n", "\"id\"", ":", "run_id", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.DownloadProgressBar.update_to": [[41, 45], ["breizhcrops.DownloadProgressBar.update"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.update"], ["    ", "def", "update_to", "(", "self", ",", "b", "=", "1", ",", "bsize", "=", "1", ",", "tsize", "=", "None", ")", ":", "\n", "        ", "if", "tsize", "is", "not", "None", ":", "\n", "            ", "self", ".", "total", "=", "tsize", "\n", "", "self", ".", "update", "(", "b", "*", "bsize", "-", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.__init__": [[173, 200], ["aitlas.datasets.crops_classification.CropsDataset.__init__", "pandas.DataFrame", "breizhcrops.BreizhCropsDataset.preprocess", "region.lower"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.preprocess"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "# :param region: dataset region. choose from \"frh01\", \"frh02\", \"frh03\", \"frh04\", \"belle-ile\"", "\n", "# :param root: where the data will be stored. defaults to `./breizhcrops_dataset`", "\n", "# :param \u0444: year of the data. currently only `2017`", "\n", "# :param level: Sentinel 2 processing level. Either `L1C` (top of atmosphere) or `L2A` (bottom of atmosphere)", "\n", "# :param transform: a transformation function applied to the raw data before retrieving a sample. Can be used for featured extraction or data augmentaiton", "\n", "# :param target_transform: a transformation function applied to the label.", "\n", "# :param filter_length: time series shorter than `filter_length` will be ignored", "\n", "# :param bool verbose: verbosity flag", "\n", "# :param bool load_timeseries: if False, no time series data will be loaded. Only index file and class initialization. Used mostly for tests", "\n", "# :param bool recompile_h5_from_csv: downloads raw csv files and recompiles the h5 databases. Only required when dealing with new datasets", "\n", "# :param bool preload_ram: loads all time series data in RAM at initialization. Can speed up training if data is stored on HDD.", "\n", "\n", "self", ".", "regions", "=", "[", "region", ".", "lower", "(", ")", "for", "region", "in", "self", ".", "config", ".", "regions", "]", "\n", "self", ".", "bands", "=", "BANDS", "[", "self", ".", "config", ".", "level", "]", "\n", "self", ".", "selected_bands", "=", "SELECTED_BANDS", "[", "self", ".", "config", ".", "level", "]", "\n", "self", ".", "root", "=", "self", ".", "config", ".", "root", "\n", "\n", "self", ".", "h5path", "=", "{", "}", "\n", "self", ".", "indexfile", "=", "{", "}", "\n", "self", ".", "shapefile", "=", "{", "}", "\n", "self", ".", "csvfolder", "=", "{", "}", "\n", "\n", "self", ".", "index", "=", "pd", ".", "DataFrame", "(", ")", "\n", "\n", "self", ".", "preprocess", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.preprocess": [[201, 299], ["int", "pandas.read_csv", "breizhcrops.BreizhCropsDataset.index.rename", "breizhcrops.BreizhCropsDataset.get_codes", "breizhcrops.BreizhCropsDataset.build_folder_structure", "breizhcrops.BreizhCropsDataset.load_classmapping", "logging.info", "os.path.exists", "pandas.read_csv", "pandas.concat", "logging.info", "breizhcrops.BreizhCropsDataset.index[].max", "os.path.exists", "breizhcrops.download_file", "logging.info", "os.path.exists", "breizhcrops.download_file", "breizhcrops.BreizhCropsDataset.download_csv_files", "breizhcrops.BreizhCropsDataset.write_index", "breizhcrops.BreizhCropsDataset.write_h5_database_from_csv", "breizhcrops.BreizhCropsDataset.download_h5_database", "index_region[].apply", "pandas.read_csv.to_csv", "len", "pandas.DataFrame", "os.path.getsize", "index_region[].isin", "index_region[].isin", "len"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.get_codes", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.build_folder_structure", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.load_classmapping", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.eopatch_crops.download_file", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.eopatch_crops.download_file", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.download_csv_files", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.eopatch_crops.EOPatchCrops.write_index", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.write_h5_database_from_csv", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.download_h5_database"], ["", "def", "preprocess", "(", "self", ")", ":", "\n", "        ", "for", "region", "in", "self", ".", "regions", ":", "\n", "            ", "if", "self", ".", "config", ".", "verbose", ":", "\n", "                ", "logging", ".", "info", "(", "\n", "f\"Initializing BreizhCrops region {region}, year {self.config.year}, level {self.config.level}\"", "\n", ")", "\n", "\n", "", "(", "\n", "self", ".", "h5path", "[", "region", "]", ",", "\n", "self", ".", "indexfile", "[", "region", "]", ",", "\n", "self", ".", "codesfile", ",", "\n", "self", ".", "shapefile", "[", "region", "]", ",", "\n", "self", ".", "classmapping", ",", "\n", "self", ".", "csvfolder", "[", "region", "]", ",", "\n", ")", "=", "self", ".", "build_folder_structure", "(", "\n", "self", ".", "root", ",", "self", ".", "config", ".", "year", ",", "self", ".", "config", ".", "level", ",", "region", "\n", ")", "\n", "\n", "self", ".", "load_classmapping", "(", "self", ".", "classmapping", ")", "\n", "logging", ".", "info", "(", "\"Path \"", "+", "self", ".", "h5path", "[", "region", "]", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "self", ".", "h5path", "[", "region", "]", ")", ":", "\n", "                ", "h5_database_ok", "=", "(", "\n", "os", ".", "path", ".", "getsize", "(", "self", ".", "h5path", "[", "region", "]", ")", "\n", "==", "FILESIZES", "[", "self", ".", "config", ".", "year", "]", "[", "self", ".", "config", ".", "level", "]", "[", "region", "]", "\n", ")", "\n", "", "else", ":", "\n", "                ", "h5_database_ok", "=", "False", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "indexfile", "[", "region", "]", ")", ":", "\n", "                ", "download_file", "(", "\n", "INDEX_FILE_URLs", "[", "self", ".", "config", ".", "year", "]", "[", "self", ".", "config", ".", "level", "]", "[", "region", "]", ",", "\n", "self", ".", "indexfile", "[", "region", "]", ",", "\n", ")", "\n", "\n", "", "if", "(", "\n", "not", "h5_database_ok", "\n", "and", "self", ".", "config", ".", "recompile_h5_from_csv", "\n", "and", "self", ".", "config", ".", "load_timeseries", "\n", ")", ":", "\n", "                ", "self", ".", "download_csv_files", "(", "region", ")", "\n", "self", ".", "write_index", "(", "region", ")", "\n", "self", ".", "write_h5_database_from_csv", "(", "self", ".", "index", ",", "region", ")", "\n", "", "if", "(", "\n", "not", "h5_database_ok", "\n", "and", "not", "self", ".", "config", ".", "recompile_h5_from_csv", "\n", "and", "self", ".", "config", ".", "load_timeseries", "\n", ")", ":", "\n", "                ", "self", ".", "download_h5_database", "(", "region", ")", "\n", "\n", "", "index_region", "=", "pd", ".", "read_csv", "(", "self", ".", "indexfile", "[", "region", "]", ",", "index_col", "=", "None", ")", "\n", "index_region", "=", "index_region", ".", "loc", "[", "\n", "index_region", "[", "\"CODE_CULTU\"", "]", ".", "isin", "(", "self", ".", "mapping", ".", "index", ")", "\n", "]", "\n", "\n", "if", "(", "\n", "\"classid\"", "not", "in", "index_region", ".", "columns", "\n", "or", "\"classname\"", "not", "in", "index_region", ".", "columns", "\n", "or", "\"region\"", "not", "in", "index_region", ".", "columns", "\n", ")", ":", "\n", "# drop fields that are not in the class mapping", "\n", "                ", "index_region", "=", "index_region", ".", "loc", "[", "\n", "index_region", "[", "\"CODE_CULTU\"", "]", ".", "isin", "(", "self", ".", "mapping", ".", "index", ")", "\n", "]", "\n", "index_region", "[", "[", "\"classid\"", ",", "\"classname\"", "]", "]", "=", "index_region", "[", "\n", "\"CODE_CULTU\"", "\n", "]", ".", "apply", "(", "lambda", "code", ":", "self", ".", "mapping", ".", "loc", "[", "code", "]", ")", "\n", "index_region", "[", "\"region\"", "]", "=", "region", "\n", "index_region", ".", "to_csv", "(", "self", ".", "indexfile", "[", "region", "]", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "index", ".", "columns", ")", "==", "0", ":", "\n", "                ", "self", ".", "index", "=", "pd", ".", "DataFrame", "(", "columns", "=", "index_region", ".", "columns", ")", "\n", "", "self", ".", "index", "=", "pd", ".", "concat", "(", "\n", "[", "self", ".", "index", ",", "index_region", "]", ",", "axis", "=", "0", ",", "ignore_index", "=", "True", "\n", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "verbose", ":", "\n", "            ", "logging", ".", "info", "(", "\n", "f\"kept {len(self.index)} time series references from applying class mapping\"", "\n", ")", "\n", "\n", "# filter zero-length time series", "\n", "", "if", "self", ".", "index", ".", "index", ".", "name", "!=", "\"idx\"", ":", "\n", "            ", "self", ".", "index", "=", "self", ".", "index", ".", "loc", "[", "\n", "self", ".", "index", ".", "sequencelength", ">", "self", ".", "config", ".", "filter_length", "\n", "]", "# set_index('idx')", "\n", "\n", "", "self", ".", "maxseqlength", "=", "int", "(", "self", ".", "index", "[", "\"sequencelength\"", "]", ".", "max", "(", ")", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "codesfile", ")", ":", "\n", "            ", "download_file", "(", "CODESURL", ",", "self", ".", "codesfile", ")", "\n", "", "self", ".", "codes", "=", "pd", ".", "read_csv", "(", "self", ".", "codesfile", ",", "delimiter", "=", "\";\"", ",", "index_col", "=", "0", ")", "\n", "\n", "# for now", "\n", "self", ".", "X_list", "=", "None", "\n", "\n", "self", ".", "index", ".", "rename", "(", "columns", "=", "{", "\"meanQA60\"", ":", "\"meanCLD\"", "}", ",", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "get_codes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.__len__": [[300, 302], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.__getitem__": [[303, 329], ["breizhcrops.BreizhCropsDataset.transform", "h5py.File", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "row", "=", "self", ".", "index", ".", "iloc", "[", "index", "]", "\n", "\n", "h5path", "=", "self", ".", "h5path", "[", "row", ".", "region", "]", "\n", "\n", "if", "self", ".", "X_list", "is", "None", ":", "\n", "# Looks like this is what I need (load directly from file)", "\n", "            ", "with", "h5py", ".", "File", "(", "h5path", ",", "\"r\"", ")", "as", "dataset", ":", "\n", "                ", "X", "=", "np", ".", "array", "(", "dataset", "[", "(", "row", ".", "path", ")", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "X", "=", "self", ".", "X_list", "[", "index", "]", "\n", "\n", "# translate CODE_CULTU to class id", "\n", "", "y", "=", "self", ".", "mapping", ".", "loc", "[", "row", "[", "\"CODE_CULTU\"", "]", "]", ".", "id", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "X", ",", "y", "=", "self", ".", "transform", "(", "(", "X", ",", "y", ")", ")", "\n", "\n", "", "return", "X", ",", "y", "# , row.id", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.get_labels": [[330, 332], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "index", ".", "classid", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.data_distribution_table": [[335, 344], ["breizhcrops.BreizhCropsDataset.index[].groupby().count().reset_index", "breizhcrops.BreizhCropsDataset.index[].groupby().count", "breizhcrops.BreizhCropsDataset.index[].groupby"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.count"], ["", "def", "data_distribution_table", "(", "self", ")", ":", "\n", "        ", "label_count", "=", "(", "\n", "self", ".", "index", "[", "[", "\"id\"", ",", "\"region\"", ",", "\"classname\"", "]", "]", "\n", ".", "groupby", "(", "[", "\"classname\"", ",", "\"region\"", "]", ")", "\n", ".", "count", "(", ")", "\n", ".", "reset_index", "(", ")", "\n", ")", "\n", "label_count", ".", "columns", "=", "[", "\"Label\"", ",", "\"Region\"", ",", "\"Number of parcels\"", "]", "\n", "return", "label_count", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.parcel_distribution_table": [[345, 356], ["breizhcrops.BreizhCropsDataset.index[].groupby().count().reset_index", "parcel_count.append.append.sum", "parcel_count.append.append.append", "breizhcrops.BreizhCropsDataset.index[].groupby().count", "breizhcrops.BreizhCropsDataset.index[].groupby"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.count"], ["", "def", "parcel_distribution_table", "(", "self", ")", ":", "\n", "# Figure 2 a) in the paper", "\n", "        ", "parcel_count", "=", "(", "\n", "self", ".", "index", "[", "[", "\"id\"", ",", "\"region\"", "]", "]", ".", "groupby", "(", "\"region\"", ")", ".", "count", "(", ")", ".", "reset_index", "(", ")", "\n", ")", "\n", "parcel_count", ".", "columns", "=", "[", "\"Region NUTS-3\"", ",", "\"# \"", "+", "self", ".", "config", ".", "level", "]", "\n", "total_row", "=", "parcel_count", ".", "sum", "(", "axis", "=", "0", ")", "\n", "total_row", "[", "\"Region NUTS-3\"", "]", "=", "\"Total\"", "\n", "\n", "parcel_count", "=", "parcel_count", ".", "append", "(", "total_row", ",", "ignore_index", "=", "True", ")", "\n", "return", "parcel_count", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.data_distribution_barchart": [[357, 367], ["breizhcrops.BreizhCropsDataset.data_distribution_table", "matplotlib.subplots", "seaborn.barplot", "seaborn.barplot.set_xticklabels", "seaborn.barplot.set_yscale", "seaborn.barplot.get_xticklabels"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.data_distribution_table"], ["", "def", "data_distribution_barchart", "(", "self", ")", ":", "\n", "# Figure 2 b) in the paper", "\n", "        ", "label_count", "=", "self", ".", "data_distribution_table", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "12", ",", "10", ")", ")", "\n", "g", "=", "sns", ".", "barplot", "(", "\n", "x", "=", "\"Label\"", ",", "y", "=", "\"Number of parcels\"", ",", "hue", "=", "\"Region\"", ",", "data", "=", "label_count", ",", "ax", "=", "ax", "\n", ")", "\n", "g", ".", "set_xticklabels", "(", "g", ".", "get_xticklabels", "(", ")", ",", "rotation", "=", "30", ")", "\n", "g", ".", "set_yscale", "(", "\"log\"", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.show_samples": [[368, 370], ["breizhcrops.BreizhCropsDataset.index.head"], "methods", ["None"], ["", "def", "show_samples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "index", ".", "head", "(", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.show_timeseries": [[371, 385], ["breizhcrops.BreizhCropsDataset.__getitem__", "matplotlib.subplots", "ax.set_title", "ax.plot", "ax.legend", "ax.set_ylabel"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__getitem__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.visualizations.BaseDetailedVisualization.plot"], ["", "def", "show_timeseries", "(", "self", ",", "index", ")", ":", "\n", "# Figure 3 in the paper", "\n", "        ", "X", ",", "_", "=", "self", ".", "__getitem__", "(", "index", ")", "\n", "label", "=", "row", "=", "self", ".", "index", ".", "iloc", "[", "index", "]", ".", "loc", "[", "\"classname\"", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "ax", ".", "set_title", "(", "\n", "f\"Timeseries with index {index} from the region {self.index.iloc[index].loc['region']}, with label {label}\\n\"", ",", "\n", "fontsize", "=", "14", ",", "\n", ")", "\n", "ax", ".", "plot", "(", "X", ")", "\n", "ax", ".", "legend", "(", "BANDS", "[", "self", ".", "config", ".", "level", "]", "[", ":", "X", ".", "shape", "[", "1", "]", "]", ")", "\n", "ax", ".", "set_ylabel", "(", "\"\u03c1 \"", ")", "# x ${10^4}$", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.download_csv_files": [[392, 401], ["os.path.join", "breizhcrops.download_file", "breizhcrops.unzip", "os.remove", "str"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.eopatch_crops.download_file", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.unzip"], ["def", "download_csv_files", "(", "self", ",", "region", ")", ":", "\n", "        ", "zipped_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "str", "(", "self", ".", "config", ".", "year", ")", ",", "self", ".", "config", ".", "level", ",", "f\"{region}.zip\"", "\n", ")", "\n", "download_file", "(", "\n", "RAW_CSV_URL", "[", "self", ".", "config", ".", "year", "]", "[", "self", ".", "config", ".", "level", "]", "[", "region", "]", ",", "zipped_file", "\n", ")", "\n", "unzip", "(", "zipped_file", ",", "self", ".", "csvfolder", "[", "region", "]", ")", "\n", "os", ".", "remove", "(", "zipped_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.build_folder_structure": [[402, 432], ["str", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "build_folder_structure", "(", "self", ",", "root", ",", "year", ",", "level", ",", "region", ")", ":", "\n", "        ", "\"\"\"\n        folder structure\n\n        <root>\n           codes.csv\n           classmapping.csv\n           <year>\n              <region>.shp\n              <level>\n                 <region>.csv\n                 <region>.h5\n                 <region>\n                     <csv>\n                         123123.csv\n                         123125.csv\n                         ...\n        \"\"\"", "\n", "year", "=", "str", "(", "year", ")", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "root", ",", "year", ",", "level", ",", "region", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "h5path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "year", ",", "level", ",", "f\"{region}.h5\"", ")", "\n", "indexfile", "=", "os", ".", "path", ".", "join", "(", "root", ",", "year", ",", "level", ",", "region", "+", "\".csv\"", ")", "\n", "codesfile", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"codes.csv\"", ")", "\n", "shapefile", "=", "os", ".", "path", ".", "join", "(", "root", ",", "year", ",", "f\"{region}.shp\"", ")", "\n", "classmapping", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"classmapping.csv\"", ")", "\n", "csvfolder", "=", "os", ".", "path", ".", "join", "(", "root", ",", "year", ",", "level", ",", "region", ",", "\"csv\"", ")", "\n", "\n", "return", "h5path", ",", "indexfile", ",", "codesfile", ",", "shapefile", ",", "classmapping", ",", "csvfolder", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.get_fid": [[433, 435], ["None"], "methods", ["None"], ["", "def", "get_fid", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "index", "[", "self", ".", "index", "[", "\"idx\"", "]", "==", "idx", "]", ".", "index", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.download_h5_database": [[436, 453], ["logging.info", "breizhcrops.download_file", "logging.info", "breizhcrops.untar", "logging.info", "os.remove", "logging.info", "logging.info", "os.path.getsize"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.eopatch_crops.download_file", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.untar"], ["", "def", "download_h5_database", "(", "self", ",", "region", ")", ":", "\n", "        ", "logging", ".", "info", "(", "f\"downloading {self.h5path[region]}.tar.gz\"", ")", "\n", "download_file", "(", "\n", "H5_URLs", "[", "self", ".", "config", ".", "year", "]", "[", "self", ".", "config", ".", "level", "]", "[", "region", "]", ",", "\n", "self", ".", "h5path", "[", "region", "]", "+", "\".tar.gz\"", ",", "\n", "overwrite", "=", "True", ",", "\n", ")", "\n", "logging", ".", "info", "(", "f\"extracting {self.h5path[region]}.tar.gz to {self.h5path}\"", ")", "\n", "untar", "(", "self", ".", "h5path", "[", "region", "]", "+", "\".tar.gz\"", ")", "\n", "logging", ".", "info", "(", "f\"removing {self.h5path[region]}.tar.gz\"", ")", "\n", "os", ".", "remove", "(", "self", ".", "h5path", "[", "region", "]", "+", "\".tar.gz\"", ")", "\n", "logging", ".", "info", "(", "f\"checking integrity by file size...\"", ")", "\n", "assert", "(", "\n", "os", ".", "path", ".", "getsize", "(", "self", ".", "h5path", "[", "region", "]", ")", "\n", "==", "FILESIZES", "[", "self", ".", "config", ".", "year", "]", "[", "self", ".", "config", ".", "level", "]", "[", "region", "]", "\n", ")", "\n", "logging", ".", "info", "(", "\"ok!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.write_h5_database_from_csv": [[454, 463], ["h5py.File", "tqdm.tqdm.tqdm", "index.iterrows", "breizhcrops.BreizhCropsDataset.load", "dataset.create_dataset", "len", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.create_dataset"], ["", "def", "write_h5_database_from_csv", "(", "self", ",", "index", ",", "region", ")", ":", "\n", "        ", "with", "h5py", ".", "File", "(", "self", ".", "h5path", "[", "region", "]", ",", "\"w\"", ")", "as", "dataset", ":", "\n", "            ", "for", "idx", ",", "row", "in", "tqdm", "(", "\n", "index", ".", "iterrows", "(", ")", ",", "\n", "total", "=", "len", "(", "index", ")", ",", "\n", "desc", "=", "f\"writing {self.h5path[region]}\"", ",", "\n", ")", ":", "\n", "                ", "X", "=", "self", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "row", ".", "path", ")", ")", "\n", "dataset", ".", "create_dataset", "(", "row", ".", "path", ",", "data", "=", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.get_codes": [[464, 466], ["None"], "methods", ["None"], ["", "", "", "def", "get_codes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "codes", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load_classmapping": [[467, 486], ["pandas.read_csv().sort_values", "breizhcrops.BreizhCropsDataset.mapping.set_index", "breizhcrops.BreizhCropsDataset.mapping[].unique", "len", "os.path.exists", "breizhcrops.download_file", "logging.info", "print", "print", "pandas.read_csv", "breizhcrops.BreizhCropsDataset.mapping.groupby().first", "breizhcrops.BreizhCropsDataset.mapping.groupby"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.eopatch_crops.download_file"], ["", "def", "load_classmapping", "(", "self", ",", "classmapping", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "classmapping", ")", ":", "\n", "            ", "if", "self", ".", "config", ".", "verbose", ":", "\n", "                ", "print", "(", "\n", "f\"no classmapping found at {classmapping}, downloading from {CLASSMAPPINGURL}\"", "\n", ")", "\n", "", "download_file", "(", "CLASSMAPPINGURL", ",", "classmapping", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "config", ".", "verbose", ":", "\n", "                ", "print", "(", "f\"found classmapping at {classmapping}\"", ")", "\n", "\n", "", "", "self", ".", "mapping", "=", "pd", ".", "read_csv", "(", "classmapping", ",", "index_col", "=", "0", ")", ".", "sort_values", "(", "by", "=", "\"id\"", ")", "\n", "self", ".", "mapping", "=", "self", ".", "mapping", ".", "set_index", "(", "\"code\"", ")", "\n", "self", ".", "classes", "=", "self", ".", "mapping", "[", "\"id\"", "]", ".", "unique", "(", ")", "\n", "self", ".", "classname", "=", "self", ".", "mapping", ".", "groupby", "(", "\"id\"", ")", ".", "first", "(", ")", ".", "classname", ".", "values", "\n", "self", ".", "klassenname", "=", "self", ".", "classname", "\n", "self", ".", "nclasses", "=", "len", "(", "self", ".", "classes", ")", "\n", "if", "self", ".", "config", ".", "verbose", ":", "\n", "            ", "logging", ".", "info", "(", "f\"read {self.nclasses} classes from {classmapping}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.get_classes_to_ind": [[487, 503], ["pandas.read_csv().sort_values", "mapping[].groupby().first", "mapping.set_index.set_index.set_index", "os.path.exists", "breizhcrops.download_file", "mapping.set_index.set_index.T.to_dict", "logging.info", "logging.info", "pandas.read_csv", "mapping[].groupby"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.eopatch_crops.download_file"], ["", "", "def", "get_classes_to_ind", "(", "self", ",", "classmapping", ")", ":", "\n", "        ", "\"\"\" keep for now, could be needed to make it compatible with GenericMulticlass \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "classmapping", ")", ":", "\n", "            ", "if", "self", ".", "config", ".", "verbose", ":", "\n", "                ", "logging", ".", "info", "(", "\n", "f\"no classmapping found at {classmapping}, downloading from {CLASSMAPPINGURL}\"", "\n", ")", "\n", "", "download_file", "(", "CLASSMAPPINGURL", ",", "classmapping", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "config", ".", "verbose", ":", "\n", "                ", "logging", ".", "info", "(", "f\"found classmapping at {classmapping}\"", ")", "\n", "\n", "", "", "mapping", "=", "pd", ".", "read_csv", "(", "classmapping", ",", "index_col", "=", "0", ")", ".", "sort_values", "(", "by", "=", "\"id\"", ")", "\n", "mapping", "=", "mapping", "[", "[", "\"id\"", ",", "\"classname\"", "]", "]", ".", "groupby", "(", "\"id\"", ")", ".", "first", "(", ")", "\n", "mapping", "=", "mapping", ".", "set_index", "(", "\"classnamedf.to_dict('index')\"", ")", "\n", "return", "mapping", ".", "T", ".", "to_dict", "(", "\"records\"", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load_raw": [[504, 516], ["pandas.read_csv().dropna", "pandas.to_datetime().astype", "sample.groupby().first().reset_index.groupby().first().reset_index.groupby().first().reset_index", "pandas.read_csv", "pandas.to_datetime", "sample.groupby().first().reset_index.groupby().first().reset_index.groupby().first", "os.path.join", "os.path.basename", "sample.groupby().first().reset_index.groupby().first().reset_index.groupby"], "methods", ["None"], ["", "def", "load_raw", "(", "self", ",", "csv_file", ")", ":", "\n", "        ", "\"\"\"['B1', 'B10', 'B11', 'B12', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8',\n               'B8A', 'B9', 'QA10', 'QA20', 'QA60', 'doa', 'label', 'id']\"\"\"", "\n", "sample", "=", "pd", ".", "read_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "csvfolder", ",", "os", ".", "path", ".", "basename", "(", "csv_file", ")", ")", ",", "index_col", "=", "0", "\n", ")", ".", "dropna", "(", ")", "\n", "\n", "# convert datetime to int", "\n", "sample", "[", "\"doa\"", "]", "=", "pd", ".", "to_datetime", "(", "sample", "[", "\"doa\"", "]", ")", ".", "astype", "(", "int", ")", "\n", "sample", "=", "sample", ".", "groupby", "(", "by", "=", "\"doa\"", ")", ".", "first", "(", ")", ".", "reset_index", "(", ")", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load": [[517, 527], ["breizhcrops.BreizhCropsDataset.load_raw", "numpy.array", "numpy.isnan().any", "numpy.isnan", "numpy.isnan().sum", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load_raw"], ["", "def", "load", "(", "self", ",", "csv_file", ")", ":", "\n", "        ", "sample", "=", "self", ".", "load_raw", "(", "csv_file", ")", "\n", "\n", "selected_bands", "=", "SELECTED_BANDS", "[", "self", ".", "config", ".", "level", "]", "\n", "X", "=", "np", ".", "array", "(", "sample", "[", "selected_bands", "]", ".", "values", ")", "\n", "if", "np", ".", "isnan", "(", "X", ")", ".", "any", "(", ")", ":", "\n", "            ", "t_without_nans", "=", "np", ".", "isnan", "(", "X", ")", ".", "sum", "(", "1", ")", ">", "0", "\n", "X", "=", "X", "[", "~", "t_without_nans", "]", "\n", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load_culturecode_and_id": [[528, 545], ["breizhcrops.BreizhCropsDataset.load_raw", "numpy.array", "breizhcrops.BreizhCropsDataset.bands.index", "breizhcrops.BreizhCropsDataset.bands.index", "breizhcrops.BreizhCropsDataset.bands.index", "len"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load_raw"], ["", "def", "load_culturecode_and_id", "(", "self", ",", "csv_file", ")", ":", "\n", "        ", "sample", "=", "self", ".", "load_raw", "(", "csv_file", ")", "\n", "X", "=", "np", ".", "array", "(", "sample", ".", "values", ")", "\n", "\n", "if", "self", ".", "config", ".", "level", "==", "\"L1C\"", ":", "\n", "            ", "cc_index", "=", "self", ".", "bands", ".", "index", "(", "\"label\"", ")", "\n", "", "else", ":", "\n", "            ", "cc_index", "=", "self", ".", "bands", ".", "index", "(", "\"code_cultu\"", ")", "\n", "", "id_index", "=", "self", ".", "bands", ".", "index", "(", "\"id\"", ")", "\n", "\n", "if", "len", "(", "X", ")", ">", "0", ":", "\n", "            ", "field_id", "=", "X", "[", "0", ",", "id_index", "]", "\n", "culture_code", "=", "X", "[", "0", ",", "cc_index", "]", "\n", "return", "culture_code", ",", "field_id", "\n", "\n", "", "else", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.write_index": [[546, 579], ["os.listdir", "list", "tqdm.tqdm.tqdm", "pandas.DataFrame", "breizhcrops.BreizhCropsDataset.index.to_csv", "breizhcrops.BreizhCropsDataset.load", "breizhcrops.BreizhCropsDataset.load_culturecode_and_id", "list.append", "SELECTED_BANDS[].index", "os.path.join", "os.path.join", "dict", "SELECTED_BANDS[].index", "numpy.mean", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load_culturecode_and_id"], ["", "", "def", "write_index", "(", "self", ",", "region", ")", ":", "\n", "        ", "csv_files", "=", "os", ".", "listdir", "(", "self", ".", "csvfolder", "[", "region", "]", ")", "\n", "listcsv_statistics", "=", "list", "(", ")", "\n", "i", "=", "1", "\n", "\n", "for", "csv_file", "in", "tqdm", "(", "csv_files", ")", ":", "\n", "            ", "if", "self", ".", "config", ".", "level", "==", "\"L1C\"", ":", "\n", "                ", "cld_index", "=", "SELECTED_BANDS", "[", "\"L1C\"", "]", ".", "index", "(", "\"QA60\"", ")", "\n", "", "elif", "self", ".", "config", ".", "level", "==", "\"L2A\"", ":", "\n", "                ", "cld_index", "=", "SELECTED_BANDS", "[", "\"L2A\"", "]", ".", "index", "(", "\"CLD\"", ")", "\n", "\n", "", "X", "=", "self", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "csvfolder", ",", "csv_file", ")", ")", "\n", "culturecode", ",", "id", "=", "self", ".", "load_culturecode_and_id", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "csvfolder", ",", "csv_file", ")", "\n", ")", "\n", "\n", "if", "culturecode", "is", "None", "or", "id", "is", "None", ":", "\n", "                ", "continue", "\n", "\n", "", "listcsv_statistics", ".", "append", "(", "\n", "dict", "(", "\n", "meanQA60", "=", "np", ".", "mean", "(", "X", "[", ":", ",", "cld_index", "]", ")", ",", "\n", "id", "=", "id", ",", "\n", "CODE_CULTU", "=", "culturecode", ",", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "csvfolder", "[", "region", "]", ",", "f\"{id}\"", "+", "\".csv\"", ")", ",", "\n", "idx", "=", "i", ",", "\n", "sequencelength", "=", "len", "(", "X", ")", ",", "\n", ")", "\n", ")", "\n", "i", "+=", "1", "\n", "\n", "", "self", ".", "index", "=", "pd", ".", "DataFrame", "(", "listcsv_statistics", ")", "\n", "self", ".", "index", ".", "to_csv", "(", "self", ".", "indexfile", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.download_file": [[47, 61], ["ValueError", "logging.info", "os.path.exists", "breizhcrops.DownloadProgressBar", "urllib.request.urlretrieve", "url.split", "urls.CODESURL", "urls.CLASSMAPPINGURL", "urls.CLASSMAPPINGURL"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split"], ["", "", "def", "download_file", "(", "url", ",", "output_path", ",", "overwrite", "=", "False", ")", ":", "\n", "    ", "if", "url", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"download_file: provided url is None!\"", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", "or", "overwrite", ":", "\n", "        ", "with", "DownloadProgressBar", "(", "\n", "unit", "=", "\"B\"", ",", "unit_scale", "=", "True", ",", "miniters", "=", "1", ",", "desc", "=", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", ")", "as", "t", ":", "\n", "            ", "urllib", ".", "request", ".", "urlretrieve", "(", "\n", "url", ",", "filename", "=", "output_path", ",", "reporthook", "=", "t", ".", "update_to", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "\n", "f\"file exists in {output_path}. specify `overwrite=True` if intended\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.unzip": [[64, 71], ["zipfile.ZipFile", "zip.infolist", "os.path.basename", "zip.extract"], "function", ["None"], ["", "", "def", "unzip", "(", "zipfile_path", ",", "target_dir", ")", ":", "\n", "    ", "with", "zipfile", ".", "ZipFile", "(", "zipfile_path", ")", "as", "zip", ":", "\n", "        ", "for", "zip_info", "in", "zip", ".", "infolist", "(", ")", ":", "\n", "            ", "if", "zip_info", ".", "filename", "[", "-", "1", "]", "==", "\"/\"", ":", "\n", "                ", "continue", "\n", "", "zip_info", ".", "filename", "=", "os", ".", "path", ".", "basename", "(", "zip_info", ".", "filename", ")", "\n", "zip", ".", "extract", "(", "zip_info", ",", "target_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.untar": [[73, 82], ["os.path.dirname", "tarfile.open", "tar.getmembers", "member.isreg", "os.path.basename", "tar.extract"], "function", ["None"], ["", "", "", "def", "untar", "(", "filepath", ")", ":", "\n", "    ", "dirname", "=", "os", ".", "path", ".", "dirname", "(", "filepath", ")", "\n", "with", "tarfile", ".", "open", "(", "filepath", ",", "\"r:gz\"", ")", "as", "tar", ":", "\n", "        ", "for", "member", "in", "tar", ".", "getmembers", "(", ")", ":", "\n", "            ", "if", "member", ".", "isreg", "(", ")", ":", "# skip if the TarInfo is not files", "\n", "                ", "member", ".", "name", "=", "os", ".", "path", ".", "basename", "(", "\n", "member", ".", "name", "\n", ")", "# remove the path by reset it", "\n", "tar", ".", "extract", "(", "member", ",", "dirname", ")", "# extract", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.rsd46_whu.RSD46WHUDataset.__init__": [[65, 68], ["multiclass_classification.MultiClassClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.rsd46_whu.RSD46WHUDataset.__getitem__": [[69, 89], ["numpy.asarray", "PIL.Image.fromarray().convert", "rsd46_whu.RSD46WHUDataset.transform", "rsd46_whu.RSD46WHUDataset.target_transform", "PIL.Image.fromarray", "utils.image_loader"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "# load image", "\n", "img", "=", "np", ".", "asarray", "(", "\n", "Image", ".", "fromarray", "(", "image_loader", "(", "self", ".", "data", "[", "index", "]", "[", "0", "]", ")", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", ")", "\n", "\n", "# apply transformations", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "target", "=", "self", ".", "data", "[", "index", "]", "[", "1", "]", "\n", "if", "self", ".", "target_transform", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "self", ".", "data", "[", "index", "]", "[", "1", "]", ")", "\n", "", "return", "img", ",", "target", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.pattern_net.PatternNetDataset.__init__": [[53, 56], ["multiclass_classification.MultiClassClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multilabel_classification.MultiLabelClassificationDataset.__init__": [[23, 34], ["base.BaseDataset.__init__", "multilabel_classification.MultiLabelClassificationDataset.load_dataset"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.load_dataset"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constuctor to validate the schema", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "# this can be overridden if needed", "\n", "self", ".", "image_loader", "=", "image_loader", "\n", "\n", "# load the data", "\n", "self", ".", "data_dir", "=", "self", ".", "config", ".", "data_dir", "\n", "self", ".", "csv_file", "=", "self", ".", "config", ".", "csv_file", "\n", "self", ".", "data", "=", "self", ".", "load_dataset", "(", "self", ".", "data_dir", ",", "self", ".", "csv_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multilabel_classification.MultiLabelClassificationDataset.__getitem__": [[35, 51], ["multilabel_classification.MultiLabelClassificationDataset.image_loader", "multilabel_classification.MultiLabelClassificationDataset.transform", "multilabel_classification.MultiLabelClassificationDataset.target_transform"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "# load image", "\n", "img", "=", "self", ".", "image_loader", "(", "self", ".", "data", "[", "index", "]", "[", "0", "]", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "target", "=", "self", ".", "data", "[", "index", "]", "[", "1", "]", "\n", "if", "self", ".", "target_transform", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "self", ".", "data", "[", "index", "]", "[", "1", "]", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multilabel_classification.MultiLabelClassificationDataset.__len__": [[52, 54], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multilabel_classification.MultiLabelClassificationDataset.get_labels": [[55, 57], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multilabel_classification.MultiLabelClassificationDataset.data_distribution_table": [[58, 64], ["pandas.read_csv", "pandas.DataFrame().reset_index", "pandas.DataFrame().reset_index.drop", "pandas.DataFrame", "pandas.read_csv.sum"], "methods", ["None"], ["", "def", "data_distribution_table", "(", "self", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "csv_file", ",", "sep", "=", "\"\\t\"", ")", "\n", "label_count", "=", "pd", ".", "DataFrame", "(", "df", ".", "sum", "(", "axis", "=", "0", ")", ")", ".", "reset_index", "(", ")", "\n", "label_count", ".", "columns", "=", "[", "\"Label\"", ",", "\"Count\"", "]", "\n", "label_count", ".", "drop", "(", "label_count", ".", "index", "[", "0", "]", ",", "inplace", "=", "True", ")", "\n", "return", "label_count", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multilabel_classification.MultiLabelClassificationDataset.data_distribution_barchart": [[65, 73], ["multilabel_classification.MultiLabelClassificationDataset.data_distribution_table", "matplotlib.subplots", "seaborn.barplot", "ax.set_title", "multilabel_classification.MultiLabelClassificationDataset.get_name"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.data_distribution_table", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "data_distribution_barchart", "(", "self", ")", ":", "\n", "        ", "label_count", "=", "self", ".", "data_distribution_table", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "12", ",", "10", ")", ")", "\n", "sns", ".", "barplot", "(", "y", "=", "\"Label\"", ",", "x", "=", "\"Count\"", ",", "data", "=", "label_count", ",", "ax", "=", "ax", ")", "\n", "ax", ".", "set_title", "(", "\n", "\"Labels distribution for {}\"", ".", "format", "(", "self", ".", "get_name", "(", ")", ")", ",", "pad", "=", "20", ",", "fontsize", "=", "18", "\n", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multilabel_classification.MultiLabelClassificationDataset.show_samples": [[74, 77], ["pandas.read_csv", "pandas.read_csv.head"], "methods", ["None"], ["", "def", "show_samples", "(", "self", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "csv_file", ",", "sep", "=", "\"\\t\"", ")", "\n", "return", "df", ".", "head", "(", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multilabel_classification.MultiLabelClassificationDataset.show_image": [[78, 89], ["list", "matplotlib.figure", "matplotlib.title", "matplotlib.axis", "matplotlib.imshow", "itertools.compress", "multilabel_classification.MultiLabelClassificationDataset.get_name", "str().strip", "str"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "labels_list", "=", "list", "(", "compress", "(", "self", ".", "labels", ",", "self", "[", "index", "]", "[", "1", "]", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "plt", ".", "title", "(", "\n", "f\"Image with index {index} from the dataset {self.get_name()}, with labels:\\n \"", "\n", "f\"{str(labels_list).strip('[]')}\\n\"", ",", "\n", "fontsize", "=", "14", ",", "\n", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "imshow", "(", "self", "[", "index", "]", "[", "0", "]", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multilabel_classification.MultiLabelClassificationDataset.show_batch": [[90, 130], ["random.sample", "matplotlib.subplots", "zip", "figure.tight_layout", "ValueError", "range", "int", "figure.suptitle", "ax.flatten", "list", "numpy.zeros", "numpy.zeros.fill", "math.ceil", "enumerate", "numpy.hstack", "axes.imshow", "axes.set_xticks", "axes.set_yticks", "axes.axis", "len", "itertools.compress", "text.split", "cv2.putText", "multilabel_classification.MultiLabelClassificationDataset.get_name", "cv2.getTextSize", "int"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_batch", "(", "self", ",", "size", ",", "show_title", "=", "True", ")", ":", "\n", "        ", "if", "size", "%", "4", ":", "\n", "            ", "raise", "ValueError", "(", "\"The provided size should be divided by 4!\"", ")", "\n", "", "image_indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "self", ".", "data", ")", ")", ",", "size", ")", "\n", "figure", ",", "ax", "=", "plt", ".", "subplots", "(", "int", "(", "size", "/", "4", ")", ",", "4", ",", "figsize", "=", "(", "13.75", ",", "2.0", "*", "int", "(", "size", "/", "4", ")", ")", ")", "\n", "if", "show_title", ":", "\n", "            ", "figure", ".", "suptitle", "(", "\n", "\"Example images with labels from {}\"", ".", "format", "(", "self", ".", "get_name", "(", ")", ")", ",", "\n", "fontsize", "=", "32", ",", "\n", "y", "=", "1.006", ",", "\n", ")", "\n", "", "for", "axes", ",", "image_index", "in", "zip", "(", "ax", ".", "flatten", "(", ")", ",", "image_indices", ")", ":", "\n", "            ", "labels_list", "=", "list", "(", "compress", "(", "self", ".", "labels", ",", "self", "[", "image_index", "]", "[", "1", "]", ")", ")", "\n", "height", ",", "width", ",", "depth", "=", "self", "[", "image_index", "]", "[", "0", "]", ".", "shape", "\n", "white_image", "=", "np", ".", "zeros", "(", "[", "height", ",", "width", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "white_image", ".", "fill", "(", "255", ")", "\n", "text", "=", "'\\n'", ".", "join", "(", "labels_list", ")", "\n", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "font_size", "=", "width", "/", "600", "*", "2.5", "\n", "font_thickness", "=", "math", ".", "ceil", "(", "width", "/", "600", "*", "4", ")", "\n", "x", "=", "30", "\n", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "text", ".", "split", "(", "'\\n'", ")", ")", ":", "\n", "                ", "textsize", "=", "cv2", ".", "getTextSize", "(", "line", ",", "font", ",", "font_size", ",", "font_thickness", ")", "[", "0", "]", "\n", "gap", "=", "textsize", "[", "1", "]", "+", "5", "\n", "y", "=", "textsize", "[", "1", "]", "+", "i", "*", "gap", "\n", "cv2", ".", "putText", "(", "white_image", ",", "line", ",", "(", "x", ",", "y", ")", ",", "font", ",", "\n", "font_size", ",", "\n", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "font_thickness", ",", "\n", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n", "", "display_image", "=", "np", ".", "hstack", "(", "(", "self", "[", "image_index", "]", "[", "0", "]", ",", "white_image", ")", ")", "\n", "axes", ".", "imshow", "(", "display_image", ")", "\n", "axes", ".", "set_xticks", "(", "[", "]", ")", "\n", "axes", ".", "set_yticks", "(", "[", "]", ")", "\n", "axes", ".", "axis", "(", "'off'", ")", "\n", "", "figure", ".", "tight_layout", "(", ")", "\n", "return", "figure", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multilabel_classification.MultiLabelClassificationDataset.load_dataset": [[131, 133], ["utils.load_voc_format_dataset"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.load_voc_format_dataset"], ["", "def", "load_dataset", "(", "self", ",", "data_dir", ",", "csv_file", ")", ":", "\n", "        ", "return", "load_voc_format_dataset", "(", "data_dir", ",", "csv_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multilabel_classification.MultiLabelClassificationDataset.labels_stats": [[134, 149], ["float", "float", "sum", "sum", "sum", "sum", "sum", "len"], "methods", ["None"], ["", "def", "labels_stats", "(", "self", ")", ":", "\n", "        ", "min_number", "=", "float", "(", "\"inf\"", ")", "\n", "max_number", "=", "float", "(", "\"-inf\"", ")", "\n", "average_number", "=", "0", "\n", "for", "img", ",", "labels", "in", "self", ".", "data", ":", "\n", "            ", "if", "sum", "(", "labels", ")", "<", "min_number", ":", "\n", "                ", "min_number", "=", "sum", "(", "labels", ")", "\n", "\n", "", "if", "sum", "(", "labels", ")", ">", "max_number", ":", "\n", "                ", "max_number", "=", "sum", "(", "labels", ")", "\n", "\n", "", "average_number", "+=", "sum", "(", "labels", ")", "\n", "\n", "", "return", "(", "\n", "f\"Minimum number of labels: {min_number}, Maximum number of labels: {max_number}, \"", "\n", "f\"Average number of labels: {average_number/len(self.data)}\"", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.resisc45.Resisc45Dataset.__init__": [[60, 63], ["multiclass_classification.MultiClassClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.uc_merced_multilabel.UcMercedMultiLabelDataset.__init__": [[31, 34], ["multilabel_classification.MultiLabelClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.optimal_31.Optimal31Dataset.__init__": [[46, 49], ["multiclass_classification.MultiClassClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.landcover_ai.LandCoverAiDataset.__init__": [[35, 41], ["base.BaseDataset.__init__", "landcover_ai.LandCoverAiDataset.load_dataset"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.load_dataset"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and split the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "masks", "=", "[", "]", "\n", "self", ".", "load_dataset", "(", "self", ".", "config", ".", "data_dir", ",", "self", ".", "config", ".", "csv_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.landcover_ai.LandCoverAiDataset.__getitem__": [[42, 53], ["utils.image_loader", "utils.image_loader", "numpy.stack().astype", "landcover_ai.LandCoverAiDataset.transform", "landcover_ai.LandCoverAiDataset.target_transform", "enumerate", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "image_loader", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "mask", "=", "image_loader", "(", "self", ".", "masks", "[", "index", "]", ",", "True", ")", "\n", "# extract certain classes from mask (e.g. Buildings)", "\n", "masks", "=", "[", "(", "mask", "==", "v", ")", "for", "v", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", "]", "\n", "mask", "=", "np", ".", "stack", "(", "masks", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.landcover_ai.LandCoverAiDataset.__len__": [[54, 56], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.landcover_ai.LandCoverAiDataset.load_dataset": [[57, 65], ["ValueError", "open", "csv.reader", "enumerate", "landcover_ai.LandCoverAiDataset.images.append", "landcover_ai.LandCoverAiDataset.masks.append", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "data_dir", ",", "csv_file", ")", ":", "\n", "        ", "if", "not", "self", ".", "labels", ":", "\n", "            ", "raise", "ValueError", "(", "\"You need to provide the list of labels for the dataset\"", ")", "\n", "", "with", "open", "(", "csv_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "csv_reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "index", ",", "row", "in", "enumerate", "(", "csv_reader", ")", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "row", "[", "0", "]", "+", "\".jpg\"", ")", ")", "\n", "self", ".", "masks", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "row", "[", "0", "]", "+", "\"_m.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.landcover_ai.LandCoverAiDataset.get_labels": [[66, 68], ["None"], "methods", ["None"], ["", "", "", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.landcover_ai.LandCoverAiDataset.show_image": [[69, 99], ["numpy.zeros", "enumerate", "matplotlib.figure", "matplotlib.figure.suptitle", "matplotlib.figure.legend", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.figure.tight_layout", "matplotlib.show", "legend_elements.append", "matplotlib.patches.Patch", "numpy.where", "landcover_ai.LandCoverAiDataset.get_name", "tuple"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "self", "[", "index", "]", "[", "0", "]", "\n", "mask", "=", "self", "[", "index", "]", "[", "1", "]", "\n", "img_mask", "=", "np", ".", "zeros", "(", "[", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ",", "3", "]", ",", "np", ".", "uint8", ")", "\n", "legend_elements", "=", "[", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", ":", "\n", "            ", "legend_elements", ".", "append", "(", "\n", "Patch", "(", "\n", "facecolor", "=", "tuple", "(", "[", "x", "/", "255", "for", "x", "in", "self", ".", "color_mapping", "[", "i", "]", "]", ")", ",", "\n", "label", "=", "self", ".", "labels", "[", "i", "]", ",", "\n", ")", "\n", ")", "\n", "img_mask", "[", "np", ".", "where", "(", "mask", "[", ":", ",", ":", ",", "i", "]", "==", "1", ")", "]", "=", "self", ".", "color_mapping", "[", "i", "]", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "8", ")", ")", "\n", "fig", ".", "suptitle", "(", "\n", "f\"Image and mask with index {index} from the dataset {self.get_name()}\\n\"", ",", "\n", "fontsize", "=", "16", ",", "\n", "y", "=", "1.006", ",", "\n", ")", "\n", "fig", ".", "legend", "(", "handles", "=", "legend_elements", ",", "bbox_to_anchor", "=", "[", "0.5", ",", "0.85", "]", ",", "loc", "=", "\"center\"", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "img_mask", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.landcover_ai.split_images": [[101, 142], ["glob.glob", "glob.glob", "glob.glob.sort", "glob.glob.sort", "os.makedirs", "enumerate", "os.path.join", "os.path.join", "zip", "cv2.imread", "cv2.imread", "range", "print", "os.path.splitext", "os.path.splitext", "range", "os.path.basename", "os.path.basename", "len", "os.path.join", "cv2.imwrite", "os.path.join", "cv2.imwrite"], "function", ["None"], ["", "", "def", "split_images", "(", "imgs_dir", ",", "masks_dir", ",", "output_dir", ")", ":", "\n", "    ", "target_size", "=", "512", "\n", "\n", "img_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "imgs_dir", ",", "\"*.tif\"", ")", ")", "\n", "mask_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "masks_dir", ",", "\"*.tif\"", ")", ")", "\n", "\n", "img_paths", ".", "sort", "(", ")", "\n", "mask_paths", ".", "sort", "(", ")", "\n", "\n", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "for", "i", ",", "(", "img_path", ",", "mask_path", ")", "in", "enumerate", "(", "zip", "(", "img_paths", ",", "mask_paths", ")", ")", ":", "\n", "        ", "img_filename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "img_path", ")", ")", "[", "0", "]", "\n", "mask_filename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "mask_path", ")", ")", "[", "0", "]", "\n", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "mask", "=", "cv2", ".", "imread", "(", "mask_path", ")", "\n", "\n", "assert", "img_filename", "==", "mask_filename", "and", "img", ".", "shape", "[", ":", "2", "]", "==", "mask", ".", "shape", "[", ":", "2", "]", "\n", "\n", "k", "=", "0", "\n", "for", "y", "in", "range", "(", "0", ",", "img", ".", "shape", "[", "0", "]", ",", "target_size", ")", ":", "\n", "            ", "for", "x", "in", "range", "(", "0", ",", "img", ".", "shape", "[", "1", "]", ",", "target_size", ")", ":", "\n", "                ", "img_tile", "=", "img", "[", "y", ":", "y", "+", "target_size", ",", "x", ":", "x", "+", "target_size", "]", "\n", "mask_tile", "=", "mask", "[", "y", ":", "y", "+", "target_size", ",", "x", ":", "x", "+", "target_size", "]", "\n", "\n", "if", "(", "\n", "img_tile", ".", "shape", "[", "0", "]", "==", "target_size", "\n", "and", "img_tile", ".", "shape", "[", "1", "]", "==", "target_size", "\n", ")", ":", "\n", "                    ", "out_img_path", "=", "os", ".", "path", ".", "join", "(", "\n", "output_dir", ",", "\"{}_{}.jpg\"", ".", "format", "(", "img_filename", ",", "k", ")", "\n", ")", "\n", "cv2", ".", "imwrite", "(", "out_img_path", ",", "img_tile", ")", "\n", "\n", "out_mask_path", "=", "os", ".", "path", ".", "join", "(", "\n", "output_dir", ",", "\"{}_{}_m.png\"", ".", "format", "(", "mask_filename", ",", "k", ")", "\n", ")", "\n", "cv2", ".", "imwrite", "(", "out_mask_path", ",", "mask_tile", ")", "\n", "\n", "", "k", "+=", "1", "\n", "\n", "", "", "print", "(", "\"Processed {} {}/{}\"", ".", "format", "(", "img_filename", ",", "i", "+", "1", ",", "len", "(", "img_paths", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.inria.InriaDataset.__init__": [[35, 41], ["base.BaseDataset.__init__", "inria.InriaDataset.load_dataset"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.load_dataset"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and split the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "masks", "=", "[", "]", "\n", "self", ".", "load_dataset", "(", "self", ".", "config", ".", "data_dir", ",", "self", ".", "config", ".", "csv_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.inria.InriaDataset.__getitem__": [[42, 54], ["utils.image_loader", "numpy.stack().astype", "utils.image_loader", "inria.InriaDataset.joint_transform", "inria.InriaDataset.transform", "inria.InriaDataset.target_transform", "enumerate", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "image_loader", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "mask", "=", "image_loader", "(", "self", ".", "masks", "[", "index", "]", ",", "True", ")", "/", "255", "\n", "masks", "=", "[", "(", "mask", "==", "v", ")", "for", "v", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", "]", "\n", "mask", "=", "np", ".", "stack", "(", "masks", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "if", "self", ".", "joint_transform", ":", "\n", "            ", "image", ",", "mask", "=", "self", ".", "joint_transform", "(", "image", ",", "mask", ")", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.inria.InriaDataset.__len__": [[55, 57], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.inria.InriaDataset.load_dataset": [[58, 66], ["ValueError", "open", "csv.reader", "enumerate", "inria.InriaDataset.images.append", "inria.InriaDataset.masks.append", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "data_dir", ",", "csv_file", ")", ":", "\n", "        ", "if", "not", "self", ".", "labels", ":", "\n", "            ", "raise", "ValueError", "(", "\"You need to provide the list of labels for the dataset\"", ")", "\n", "", "with", "open", "(", "csv_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "csv_reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "index", ",", "row", "in", "enumerate", "(", "csv_reader", ")", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "row", "[", "0", "]", "+", "\".jpg\"", ")", ")", "\n", "self", ".", "masks", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "row", "[", "0", "]", "+", "\"_m.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.inria.InriaDataset.get_labels": [[67, 69], ["None"], "methods", ["None"], ["", "", "", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.inria.InriaDataset.show_image": [[70, 100], ["numpy.zeros", "enumerate", "matplotlib.figure", "matplotlib.figure.suptitle", "matplotlib.figure.legend", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.figure.tight_layout", "matplotlib.show", "legend_elements.append", "matplotlib.patches.Patch", "numpy.where", "inria.InriaDataset.get_name", "tuple"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "self", "[", "index", "]", "[", "0", "]", "\n", "mask", "=", "self", "[", "index", "]", "[", "1", "]", "\n", "img_mask", "=", "np", ".", "zeros", "(", "[", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ",", "3", "]", ",", "np", ".", "uint8", ")", "\n", "legend_elements", "=", "[", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", ":", "\n", "            ", "legend_elements", ".", "append", "(", "\n", "Patch", "(", "\n", "facecolor", "=", "tuple", "(", "[", "x", "/", "255", "for", "x", "in", "self", ".", "color_mapping", "[", "i", "]", "]", ")", ",", "\n", "label", "=", "self", ".", "labels", "[", "i", "]", ",", "\n", ")", "\n", ")", "\n", "img_mask", "[", "np", ".", "where", "(", "mask", "[", ":", ",", ":", ",", "i", "]", "==", "1", ")", "]", "=", "self", ".", "color_mapping", "[", "i", "]", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "8", ")", ")", "\n", "fig", ".", "suptitle", "(", "\n", "f\"Image and mask with index {index} from the dataset {self.get_name()}\\n\"", ",", "\n", "fontsize", "=", "16", ",", "\n", "y", "=", "1.006", ",", "\n", ")", "\n", "fig", ".", "legend", "(", "handles", "=", "legend_elements", ",", "bbox_to_anchor", "=", "[", "0.5", ",", "0.85", "]", ",", "loc", "=", "\"center\"", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "img_mask", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "fig", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.planet_uas.PlanetUASMultiLabelDataset.__init__": [[33, 36], ["multilabel_classification.MultiLabelClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.planet_uas.PlanetUASMultiLabelDataset.__getitem__": [[37, 53], ["planet_uas.PlanetUASMultiLabelDataset.image_loader", "planet_uas.PlanetUASMultiLabelDataset.transform", "planet_uas.PlanetUASMultiLabelDataset.target_transform"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "# load image and remove last channel", "\n", "img", "=", "self", ".", "image_loader", "(", "self", ".", "data", "[", "index", "]", "[", "0", "]", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "target", "=", "self", ".", "data", "[", "index", "]", "[", "1", "]", "\n", "if", "self", ".", "target_transform", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "self", ".", "data", "[", "index", "]", "[", "1", "]", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.planet_uas.prepare": [[56, 87], ["open", "open.write", "images.items", "open.close", "open", "csv.reader", "open.write", "row[].split", "labels.append"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split"], ["", "", "def", "prepare", "(", "csv_train_file", ")", ":", "\n", "    ", "f", "=", "open", "(", "\"multilabels.txt\"", ",", "\"w\"", ")", "\n", "labels", "=", "[", "]", "\n", "images", "=", "{", "}", "\n", "\n", "with", "open", "(", "csv_train_file", ")", "as", "csv_file", ":", "\n", "        ", "csv_reader", "=", "csv", ".", "reader", "(", "csv_file", ",", "delimiter", "=", "\",\"", ")", "\n", "line_count", "=", "0", "\n", "for", "row", "in", "csv_reader", ":", "\n", "            ", "if", "line_count", "==", "0", ":", "\n", "                ", "line_count", "+=", "1", "\n", "", "else", ":", "\n", "                ", "tmp_labels", "=", "row", "[", "1", "]", ".", "split", "(", "\" \"", ")", "\n", "images", "[", "row", "[", "0", "]", "]", "=", "tmp_labels", "\n", "for", "label", "in", "tmp_labels", ":", "\n", "                    ", "if", "label", "not", "in", "labels", ":", "\n", "                        ", "labels", ".", "append", "(", "label", ")", "\n", "", "", "line_count", "+=", "1", "\n", "\n", "", "", "", "header", "=", "\"\\t\"", ".", "join", "(", "labels", ")", "\n", "f", ".", "write", "(", "\"image\\t\"", "+", "header", "+", "\"\\n\"", ")", "\n", "\n", "for", "k", ",", "v", "in", "images", ".", "items", "(", ")", ":", "\n", "        ", "tmp_image", "=", "\"\"", "\n", "for", "label", "in", "labels", ":", "\n", "            ", "if", "label", "in", "v", ":", "\n", "                ", "tmp_image", "+=", "\"1\\t\"", "\n", "", "else", ":", "\n", "                ", "tmp_image", "+=", "\"0\\t\"", "\n", "", "", "f", ".", "write", "(", "k", "+", "\"\\t\"", "+", "tmp_image", "[", ":", "-", "1", "]", "+", "\"\\n\"", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.planet_uas.kaggle_format": [[89, 114], ["open", "open.write", "images.items", "open.close", "open", "csv.reader", "enumerate", "open.write", "float", "k.replace"], "function", ["None"], ["", "def", "kaggle_format", "(", "csv_file_path", ",", "output_file", ",", "threshold", ")", ":", "\n", "    ", "f", "=", "open", "(", "csv_file_path", ",", "\"w\"", ")", "\n", "labels", "=", "[", "]", "\n", "images", "=", "{", "}", "\n", "\n", "with", "open", "(", "output_file", ")", "as", "csv_file", ":", "\n", "        ", "csv_reader", "=", "csv", ".", "reader", "(", "csv_file", ",", "delimiter", "=", "\";\"", ")", "\n", "line_count", "=", "0", "\n", "for", "row", "in", "csv_reader", ":", "\n", "            ", "if", "line_count", "==", "0", ":", "\n", "                ", "labels", "=", "row", "[", "1", ":", "]", "\n", "line_count", "+=", "1", "\n", "", "else", ":", "\n", "                ", "images", "[", "row", "[", "0", "]", "]", "=", "row", "[", "1", ":", "]", "\n", "line_count", "+=", "1", "\n", "", "", "", "header", "=", "\"image_name\"", "+", "\",\"", "+", "\"tags\"", "\n", "f", ".", "write", "(", "header", "+", "\"\\n\"", ")", "\n", "\n", "for", "k", ",", "v", "in", "images", ".", "items", "(", ")", ":", "\n", "        ", "tmp_image", "=", "\"\"", "\n", "for", "i", ",", "prob", "in", "enumerate", "(", "v", ")", ":", "\n", "            ", "if", "float", "(", "prob", ")", ">=", "threshold", ":", "\n", "                ", "tmp_image", "+=", "labels", "[", "i", "]", "+", "\" \"", "\n", "", "", "f", ".", "write", "(", "k", ".", "replace", "(", "\".jpg\"", ",", "\"\"", ")", "+", "\",\"", "+", "tmp_image", "[", ":", "-", "1", "]", "+", "\"\\n\"", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.massachusetts_roads.MassachusettsRoadsDataset.__init__": [[31, 37], ["base.BaseDataset.__init__", "massachusetts_roads.MassachusettsRoadsDataset.load_dataset"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.load_dataset"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and split the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "masks", "=", "[", "]", "\n", "self", ".", "load_dataset", "(", "self", ".", "config", ".", "data_dir", ",", "self", ".", "config", ".", "csv_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.massachusetts_roads.MassachusettsRoadsDataset.__getitem__": [[38, 48], ["utils.image_loader", "numpy.stack().astype", "utils.image_loader", "massachusetts_roads.MassachusettsRoadsDataset.transform", "massachusetts_roads.MassachusettsRoadsDataset.target_transform", "enumerate", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "image_loader", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "mask", "=", "image_loader", "(", "self", ".", "masks", "[", "index", "]", ",", "True", ")", "/", "255", "\n", "masks", "=", "[", "(", "mask", "==", "v", ")", "for", "v", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", "]", "\n", "mask", "=", "np", ".", "stack", "(", "masks", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.massachusetts_roads.MassachusettsRoadsDataset.__len__": [[49, 51], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.massachusetts_roads.MassachusettsRoadsDataset.load_dataset": [[52, 60], ["ValueError", "open", "csv.reader", "enumerate", "massachusetts_roads.MassachusettsRoadsDataset.images.append", "massachusetts_roads.MassachusettsRoadsDataset.masks.append", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "data_dir", ",", "csv_file", ")", ":", "\n", "        ", "if", "not", "self", ".", "labels", ":", "\n", "            ", "raise", "ValueError", "(", "\"You need to provide the list of labels for the dataset\"", ")", "\n", "", "with", "open", "(", "csv_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "csv_reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "index", ",", "row", "in", "enumerate", "(", "csv_reader", ")", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "row", "[", "0", "]", "+", "\".jpg\"", ")", ")", "\n", "self", ".", "masks", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "row", "[", "0", "]", "+", "\"_m.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.massachusetts_roads.MassachusettsRoadsDataset.get_labels": [[61, 63], ["None"], "methods", ["None"], ["", "", "", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.massachusetts_roads.MassachusettsRoadsDataset.show_image": [[64, 94], ["numpy.zeros", "enumerate", "matplotlib.figure", "matplotlib.figure.suptitle", "matplotlib.figure.legend", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.figure.tight_layout", "matplotlib.show", "legend_elements.append", "matplotlib.patches.Patch", "numpy.where", "massachusetts_roads.MassachusettsRoadsDataset.get_name", "tuple"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "self", "[", "index", "]", "[", "0", "]", "\n", "mask", "=", "self", "[", "index", "]", "[", "1", "]", "\n", "img_mask", "=", "np", ".", "zeros", "(", "[", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ",", "3", "]", ",", "np", ".", "uint8", ")", "\n", "legend_elements", "=", "[", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", ":", "\n", "            ", "legend_elements", ".", "append", "(", "\n", "Patch", "(", "\n", "facecolor", "=", "tuple", "(", "[", "x", "/", "255", "for", "x", "in", "self", ".", "color_mapping", "[", "i", "]", "]", ")", ",", "\n", "label", "=", "self", ".", "labels", "[", "i", "]", ",", "\n", ")", "\n", ")", "\n", "img_mask", "[", "np", ".", "where", "(", "mask", "[", ":", ",", ":", ",", "i", "]", "==", "1", ")", "]", "=", "self", ".", "color_mapping", "[", "i", "]", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "8", ")", ")", "\n", "fig", ".", "suptitle", "(", "\n", "f\"Image and mask with index {index} from the dataset {self.get_name()}\\n\"", ",", "\n", "fontsize", "=", "16", ",", "\n", "y", "=", "1.006", ",", "\n", ")", "\n", "fig", ".", "legend", "(", "handles", "=", "legend_elements", ",", "bbox_to_anchor", "=", "[", "0.5", ",", "0.85", "]", ",", "loc", "=", "\"center\"", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "img_mask", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "fig", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.rsscn7.RSSCN7Dataset.__init__": [[22, 25], ["multiclass_classification.MultiClassClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.siri_whu.SiriWhuDataset.__init__": [[26, 29], ["multiclass_classification.MultiClassClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.camvid.CamVidDataset.__init__": [[34, 40], ["base.BaseDataset.__init__", "camvid.CamVidDataset.load_dataset"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.load_dataset"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "masks", "=", "[", "]", "\n", "self", ".", "load_dataset", "(", "self", ".", "config", ".", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.camvid.CamVidDataset.__getitem__": [[41, 51], ["utils.image_loader", "utils.image_loader", "numpy.stack().astype", "camvid.CamVidDataset.transform", "camvid.CamVidDataset.target_transform", "enumerate", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "image_loader", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "mask", "=", "image_loader", "(", "self", ".", "masks", "[", "index", "]", ",", "False", ")", "\n", "masks", "=", "[", "(", "mask", "==", "v", ")", "for", "v", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", "]", "\n", "mask", "=", "np", ".", "stack", "(", "masks", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.camvid.CamVidDataset.__len__": [[52, 54], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.camvid.CamVidDataset.load_dataset": [[55, 62], ["os.listdir", "ValueError", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "if", "not", "self", ".", "labels", ":", "\n", "            ", "raise", "ValueError", "(", "\"You need to provide the list of labels for the dataset\"", ")", "\n", "\n", "", "ids", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"images\"", ")", ")", "\n", "self", ".", "images", "=", "[", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"images\"", ",", "image_id", ")", "for", "image_id", "in", "ids", "]", "\n", "self", ".", "masks", "=", "[", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"masks\"", ",", "image_id", ")", "for", "image_id", "in", "ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.camvid.CamVidDataset.get_labels": [[63, 65], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.rsi_cb256.RSICB256Dataset.__init__": [[50, 53], ["multiclass_classification.MultiClassClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.eopatch_crops.DownloadProgressBar.update_to": [[20, 24], ["eopatch_crops.DownloadProgressBar.update"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.update"], ["    ", "def", "update_to", "(", "self", ",", "b", "=", "1", ",", "bsize", "=", "1", ",", "tsize", "=", "None", ")", ":", "\n", "        ", "if", "tsize", "is", "not", "None", ":", "\n", "            ", "self", ".", "total", "=", "tsize", "\n", "", "self", ".", "update", "(", "b", "*", "bsize", "-", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.eopatch_crops.EOPatchCrops.__init__": [[49, 85], ["aitlas.datasets.crops_classification.CropsDataset.__init__", "os.path.join", "os.path.join", "eopatch_crops.EOPatchCrops.load_classmapping", "pandas.read_csv", "eopatch_crops.EOPatchCrops.show_timeseries", "matplotlib.show", "os.path.join", "os.path.isfile", "eopatch_crops.EOPatchCrops.preprocess", "os.path.join", "pandas.read_csv", "pandas.concat", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.load_classmapping", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.show_timeseries", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.preprocess"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "root", "=", "self", ".", "config", ".", "root", "\n", "self", ".", "regions", "=", "self", ".", "config", ".", "regions", "\n", "self", ".", "indexfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "root", ",", "self", ".", "config", ".", "csv_file_path", ")", "\n", "self", ".", "h5path", "=", "{", "}", "\n", "\n", "self", ".", "split_sets", "=", "[", "\"train\"", ",", "\"test\"", ",", "\"val\"", "]", "\n", "\n", "for", "region", "in", "self", ".", "split_sets", ":", "\n", "            ", "self", ".", "h5path", "[", "region", "]", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "root", ",", "f\"{region}.hdf5\"", ")", "\n", "", "self", ".", "classmappingfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "root", ",", "\"classmapping.csv\"", ")", "\n", "\n", "self", ".", "load_classmapping", "(", "self", ".", "classmappingfile", ")", "\n", "\n", "# Only do the timeseries (breizhcrops) file structure generation once, if a general index doesn't exist", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "indexfile", ")", ":", "\n", "            ", "self", ".", "preprocess", "(", ")", "\n", "\n", "", "self", ".", "selected_bands", "=", "BANDS", "\n", "\n", "self", ".", "index", "=", "pd", ".", "read_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "root", ",", "f\"{self.regions[0]}.csv\"", ")", ",", "index_col", "=", "None", "\n", ")", "\n", "\n", "for", "region", "in", "self", ".", "regions", "[", "1", ":", "]", ":", "\n", "            ", "region_ind", "=", "pd", ".", "read_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "root", ",", "f\"{region}.csv\"", ")", ",", "index_col", "=", "None", "\n", ")", "\n", "self", ".", "index", "=", "pd", ".", "concat", "(", "[", "self", ".", "index", ",", "region_ind", "]", ",", "axis", "=", "0", ",", "ignore_index", "=", "True", ")", "\n", "\n", "", "self", ".", "X_list", "=", "None", "\n", "\n", "self", ".", "show_timeseries", "(", "0", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.eopatch_crops.EOPatchCrops.preprocess": [[86, 175], ["os.path.join", "list", "pandas.DataFrame", "eopatch_crops.EOPatchCrops.split", "eopatch_crops.EOPatchCrops.index.set_index", "eopatch_crops.EOPatchCrops.index.reset_index", "eopatch_crops.EOPatchCrops.write_index", "eolearn.core.EOPatch.load", "polygons.itertuples", "h5py.File", "eolearn.core.EOPatch.load", "polygons.itertuples", "os.scandir", "f.is_dir", "os.path.join", "int", "list.append", "os.path.join", "int", "eolearn.geometry.VectorToRasterTask", "numpy.repeat", "numpy.repeat", "numpy.sum", "f[].create_dataset", "os.path.join", "numpy.multiply", "os.path.join", "os.path.join", "eolearn.geometry.VectorToRasterTask.execute", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.eopatch_crops.EOPatchCrops.write_index", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.create_dataset"], ["", "def", "preprocess", "(", "self", ")", ":", "\n", "        ", "self", ".", "eopatches", "=", "[", "\n", "f", ".", "name", "\n", "for", "f", "in", "os", ".", "scandir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"eopatches\"", ")", ")", "\n", "if", "f", ".", "is_dir", "(", ")", "\n", "]", "\n", "self", ".", "indexfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"index.csv\"", ")", "\n", "columns", "=", "[", "\n", "\"path\"", ",", "\n", "\"eopatch\"", ",", "\n", "\"polygon_id\"", ",", "\n", "\"CODE_CULTU\"", ",", "\n", "\"sequencelength\"", ",", "\n", "\"classid\"", ",", "\n", "\"classname\"", ",", "\n", "\"region\"", ",", "\n", "]", "\n", "list_index", "=", "list", "(", ")", "\n", "for", "patch", "in", "self", ".", "eopatches", ":", "\n", "            ", "eop", "=", "EOPatch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"eopatches\"", ",", "patch", ")", ")", "\n", "polygons", "=", "eop", ".", "vector_timeless", "[", "\"CROP_TYPE_GDF\"", "]", "\n", "for", "row", "in", "polygons", ".", "itertuples", "(", ")", ":", "\n", "                ", "if", "row", ".", "ct_eu_code", "not", "in", "self", ".", "mapping", ".", "index", ".", "values", ":", "\n", "                    ", "continue", "\n", "", "poly_id", "=", "int", "(", "row", ".", "polygon_id", ")", "\n", "\n", "classid", "=", "self", ".", "mapping", ".", "loc", "[", "row", ".", "ct_eu_code", "]", ".", "id", "\n", "classname", "=", "self", ".", "mapping", ".", "loc", "[", "row", ".", "ct_eu_code", "]", ".", "classname", "\n", "\n", "list_index", ".", "append", "(", "\n", "{", "\n", "columns", "[", "0", "]", ":", "os", ".", "path", ".", "join", "(", "patch", ",", "str", "(", "poly_id", ")", ")", ",", "\n", "columns", "[", "1", "]", ":", "patch", ",", "\n", "columns", "[", "2", "]", ":", "poly_id", ",", "\n", "columns", "[", "3", "]", ":", "row", ".", "ct_eu_code", ",", "\n", "columns", "[", "4", "]", ":", "0", ",", "\n", "columns", "[", "5", "]", ":", "classid", ",", "\n", "columns", "[", "6", "]", ":", "classname", ",", "\n", "columns", "[", "7", "]", ":", "\"\"", ",", "\n", "}", "\n", ")", "\n", "", "", "self", ".", "index", "=", "pd", ".", "DataFrame", "(", "list_index", ")", "\n", "\n", "self", ".", "split", "(", ")", "\n", "\n", "f", "=", "{", "}", "\n", "for", "set", "in", "self", ".", "split_sets", ":", "\n", "            ", "f", "[", "set", "]", "=", "h5py", ".", "File", "(", "self", ".", "h5path", "[", "set", "]", ",", "\"w\"", ")", "\n", "\n", "", "self", ".", "index", ".", "set_index", "(", "\"path\"", ",", "drop", "=", "False", ",", "inplace", "=", "True", ")", "\n", "\n", "for", "patch", "in", "self", ".", "eopatches", ":", "\n", "            ", "eop", "=", "EOPatch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"eopatches\"", ",", "patch", ")", ")", "\n", "polygons", "=", "eop", ".", "vector_timeless", "[", "\"CROP_TYPE_GDF\"", "]", "\n", "for", "row", "in", "polygons", ".", "itertuples", "(", ")", ":", "\n", "                ", "if", "row", ".", "ct_eu_code", "not", "in", "self", ".", "mapping", ".", "index", ".", "values", ":", "\n", "                    ", "continue", "\n", "", "poly_id", "=", "int", "(", "row", ".", "polygon_id", ")", "\n", "index_row", "=", "self", ".", "index", ".", "loc", "[", "os", ".", "path", ".", "join", "(", "patch", ",", "str", "(", "poly_id", ")", ")", "]", "\n", "\n", "polygon", "=", "polygons", "[", "polygons", ".", "polygon_id", "==", "poly_id", "]", "\n", "temp", "=", "VectorToRasterTask", "(", "\n", "vector_input", "=", "polygon", ",", "\n", "raster_feature", "=", "(", "FeatureType", ".", "MASK_TIMELESS", ",", "\"poly\"", ")", ",", "\n", "values", "=", "1", ",", "\n", "raster_shape", "=", "(", "FeatureType", ".", "MASK_TIMELESS", ",", "\"CROP_TYPE\"", ")", ",", "\n", ")", "\n", "polygon_indicator_mask", "=", "temp", ".", "execute", "(", "eop", ")", ".", "mask_timeless", "[", "\"poly\"", "]", "\n", "\n", "seq_length", "=", "eop", ".", "data", "[", "\"FEATURES_S2\"", "]", ".", "shape", "[", "0", "]", "\n", "num_bands", "=", "eop", ".", "data", "[", "\"FEATURES_S2\"", "]", ".", "shape", "[", "3", "]", "\n", "\n", "polygon_indicator_mask_ts", "=", "np", ".", "repeat", "(", "\n", "polygon_indicator_mask", "[", "np", ".", "newaxis", ",", ":", ",", ":", ",", ":", "]", ",", "seq_length", ",", "axis", "=", "0", "\n", ")", "\n", "polygon_indicator_mask_ts", "=", "np", ".", "repeat", "(", "\n", "polygon_indicator_mask_ts", ",", "num_bands", ",", "axis", "=", "3", "\n", ")", "\n", "\n", "temp_X", "=", "np", ".", "sum", "(", "\n", "np", ".", "multiply", "(", "polygon_indicator_mask_ts", ",", "eop", ".", "data", "[", "\"FEATURES_S2\"", "]", ")", ",", "\n", "axis", "=", "(", "1", ",", "2", ")", ",", "\n", ")", "\n", "\n", "dset", "=", "f", "[", "index_row", ".", "region", "]", ".", "create_dataset", "(", "\n", "patch", "+", "os", ".", "sep", "+", "str", "(", "poly_id", ")", ",", "data", "=", "temp_X", "\n", ")", "\n", "", "", "self", ".", "index", ".", "reset_index", "(", "inplace", "=", "True", ",", "drop", "=", "True", ")", "\n", "self", ".", "write_index", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.eopatch_crops.EOPatchCrops.split": [[176, 195], ["sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "pandas.DataFrame", "pandas.DataFrame.to_csv", "pandas.DataFrame", "pandas.DataFrame.to_csv", "pandas.DataFrame", "pandas.DataFrame.to_csv", "pandas.concat", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "split", "(", "self", ")", ":", "\n", "        ", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "\n", "self", ".", "index", ".", "values", ",", "self", ".", "index", ".", "classid", ".", "values", ",", "test_size", "=", "0.15", ",", "random_state", "=", "1", "\n", ")", "\n", "X_train", ",", "X_val", ",", "y_train", ",", "y_val", "=", "train_test_split", "(", "\n", "X_train", ",", "y_train", ",", "test_size", "=", "0.15", ",", "random_state", "=", "1", "\n", ")", "\n", "\n", "X_train", "=", "pd", ".", "DataFrame", "(", "X_train", ",", "columns", "=", "self", ".", "index", ".", "columns", ")", "\n", "X_train", "[", "\"region\"", "]", "=", "\"train\"", "\n", "X_train", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"train.csv\"", ")", ")", "\n", "X_test", "=", "pd", ".", "DataFrame", "(", "X_test", ",", "columns", "=", "self", ".", "index", ".", "columns", ")", "\n", "X_test", "[", "\"region\"", "]", "=", "\"test\"", "\n", "X_test", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"test.csv\"", ")", ")", "\n", "X_val", "=", "pd", ".", "DataFrame", "(", "X_val", ",", "columns", "=", "self", ".", "index", ".", "columns", ")", "\n", "X_val", "[", "\"region\"", "]", "=", "\"val\"", "\n", "X_val", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"val.csv\"", ")", ")", "\n", "\n", "self", ".", "index", "=", "pd", ".", "concat", "(", "[", "X_train", ",", "X_val", ",", "X_test", "]", ",", "ignore_index", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.eopatch_crops.EOPatchCrops.write_index": [[196, 198], ["eopatch_crops.EOPatchCrops.index.to_csv"], "methods", ["None"], ["", "def", "write_index", "(", "self", ")", ":", "\n", "        ", "self", ".", "index", ".", "to_csv", "(", "self", ".", "indexfile", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.eopatch_crops.download_file": [[26, 40], ["ValueError", "logging.info", "os.path.exists", "eopatch_crops.DownloadProgressBar", "urllib.request.urlretrieve", "url.split"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split"], ["", "", "def", "download_file", "(", "url", ",", "output_path", ",", "overwrite", "=", "False", ")", ":", "\n", "    ", "if", "url", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"download_file: provided url is None!\"", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", "or", "overwrite", ":", "\n", "        ", "with", "DownloadProgressBar", "(", "\n", "unit", "=", "\"B\"", ",", "unit_scale", "=", "True", ",", "miniters", "=", "1", ",", "desc", "=", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", ")", "as", "t", ":", "\n", "            ", "urllib", ".", "request", ".", "urlretrieve", "(", "\n", "url", ",", "filename", "=", "output_path", ",", "reporthook", "=", "t", ".", "update_to", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "logging", ".", "info", "(", "\n", "f\"file exists in {output_path}. specify overwrite=True if intended\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.clrs.CLRSDataset.__init__": [[39, 42], ["multiclass_classification.MultiClassClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.eurosat.EurosatDataset.__init__": [[25, 28], ["multiclass_classification.MultiClassClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.BigEarthNetDataset.__init__": [[202, 220], ["base.BaseDataset.__init__", "torch.multiprocessing.set_sharing_strategy", "big_earth_net.BigEarthNetDataset.load_patches", "lmdb.open"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.BigEarthNetDataset.load_patches"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "BaseDataset", ".", "__init__", "(", "self", ",", "config", ")", "\n", "torch", ".", "multiprocessing", ".", "set_sharing_strategy", "(", "\"file_system\"", ")", "\n", "\n", "self", ".", "data_dir", "=", "self", ".", "config", ".", "data_dir", "\n", "self", ".", "lmdb_path", "=", "self", ".", "config", ".", "lmdb_path", "\n", "self", ".", "version", "=", "self", ".", "config", ".", "version", "\n", "self", ".", "selection", "=", "self", ".", "config", ".", "selection", "\n", "\n", "if", "self", ".", "lmdb_path", "and", "not", "self", ".", "config", ".", "import_to_lmdb", ":", "\n", "            ", "self", ".", "db", "=", "lmdb", ".", "open", "(", "self", ".", "lmdb_path", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "readahead", "=", "False", ",", "meminit", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "version", "==", "'19 labels'", ":", "\n", "            ", "self", ".", "labels", "=", "LABELS", "[", "'BigEarthNet-19_labels'", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "labels", "=", "LABELS", "[", "'original_labels'", "]", "\n", "\n", "", "self", ".", "patches", "=", "self", ".", "load_patches", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.BigEarthNetDataset.__getitem__": [[221, 259], ["big_earth_net.BigEarthNetDataset.db.begin", "txn.get", "big_earth_net.loads_pickle", "numpy.clip().astype", "patch_name.encode", "multihots_19.astype", "multihots_43.astype", "numpy.clip", "bands10.astype.astype.astype", "big_earth_net.BigEarthNetDataset.transform", "big_earth_net.BigEarthNetDataset.target_transform", "big_earth_net.interp_band", "bands10.astype.astype.astype", "bands20.astype.astype.astype", "big_earth_net.BigEarthNetDataset.transform", "big_earth_net.BigEarthNetDataset.target_transform"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.loads_pickle", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.interp_band"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "patch_name", "=", "self", ".", "patches", "[", "index", "]", "\n", "\n", "with", "self", ".", "db", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "byteflow", "=", "txn", ".", "get", "(", "patch_name", ".", "encode", "(", ")", ")", "\n", "bands10", ",", "bands20", ",", "_", ",", "multihots_19", ",", "multihots_43", "=", "loads_pickle", "(", "byteflow", ")", "\n", "bands10", "=", "bands10", "/", "2000", "*", "255.0", "\n", "bands10", "=", "np", ".", "clip", "(", "bands10", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "if", "self", ".", "version", "==", "'19 labels'", ":", "\n", "                ", "multihots", "=", "multihots_19", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                ", "multihots", "=", "multihots_43", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "if", "self", ".", "selection", "==", "'rgb'", ":", "\n", "                ", "bands10", "=", "bands10", ".", "astype", "(", "np", ".", "float32", ")", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "if", "self", ".", "transform", ":", "\n", "                    ", "bands10", "=", "self", ".", "transform", "(", "bands10", ")", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "                    ", "multihots", "=", "self", ".", "target_transform", "(", "multihots", ")", "\n", "\n", "", "return", "bands10", ",", "multihots", "\n", "\n", "", "elif", "self", ".", "selection", "==", "'all'", ":", "\n", "# TODO interpolate/merge bands10 and bands20", "\n", "                ", "bands20", "=", "interp_band", "(", "bands20", ")", "\n", "bands10", "=", "bands10", ".", "astype", "(", "np", ".", "float32", ")", "\n", "bands20", "=", "bands20", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "                    ", "bands10", ",", "bands20", ",", "bands60", ",", "multihots", "=", "self", ".", "transform", "(", "\n", "(", "bands10", ",", "bands20", ")", "\n", ")", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "                    ", "multihots", "=", "self", ".", "target_transform", "(", "multihots", ")", "\n", "\n", "", "return", "bands10", ",", "bands20", ",", "multihots", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.BigEarthNetDataset.__len__": [[260, 262], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "patches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.BigEarthNetDataset.get_labels": [[263, 265], ["list", "big_earth_net.BigEarthNetDataset.labels.keys"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "labels", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.BigEarthNetDataset.load_patches": [[266, 275], ["open", "csv.reader", "patch_names.append"], "methods", ["None"], ["", "def", "load_patches", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "lmdb_path", ":", "\n", "            ", "patch_names", "=", "[", "]", "\n", "if", "self", ".", "config", ".", "csv_file", ":", "\n", "                ", "with", "open", "(", "self", ".", "config", ".", "csv_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "                    ", "csv_reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "row", "in", "csv_reader", ":", "\n", "                        ", "patch_names", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "", "", "", "return", "patch_names", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.BigEarthNetDataset.get_item_name": [[276, 278], ["None"], "methods", ["None"], ["", "", "def", "get_item_name", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "patches", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.BigEarthNetDataset.show_image": [[279, 290], ["list", "matplotlib.figure", "matplotlib.title", "matplotlib.axis", "matplotlib.imshow", "itertools.compress", "big_earth_net.BigEarthNetDataset.labels.keys", "[].astype", "big_earth_net.BigEarthNetDataset.get_name", "str().strip", "str"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "labels_list", "=", "list", "(", "compress", "(", "self", ".", "labels", ".", "keys", "(", ")", ",", "self", "[", "index", "]", "[", "2", "]", ")", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "plt", ".", "title", "(", "\n", "f\"Image with index {index} from the dataset {self.get_name()}, with labels:\\n \"", "\n", "f\"{str(labels_list).strip('[]')}\\n\"", ",", "\n", "fontsize", "=", "14", ",", "\n", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "imshow", "(", "self", "[", "index", "]", "[", "0", "]", ".", "astype", "(", "'uint16'", ")", "/", "4096.0", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.BigEarthNetDataset.show_batch": [[291, 333], ["random.sample", "matplotlib.subplots", "zip", "figure.tight_layout", "ValueError", "range", "int", "figure.suptitle", "ax.flatten", "list", "numpy.zeros", "numpy.zeros.fill", "enumerate", "numpy.hstack", "axes.imshow", "axes.set_xticks", "axes.set_yticks", "axes.axis", "len", "itertools.compress", "text.split", "cv2.putText", "big_earth_net.BigEarthNetDataset.get_name", "big_earth_net.BigEarthNetDataset.labels.keys", "DISPLAY_NAMES.keys", "cv2.getTextSize", "int"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_batch", "(", "self", ",", "size", ",", "show_title", "=", "True", ")", ":", "\n", "        ", "if", "size", "%", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"The provided size should be divided by 3!\"", ")", "\n", "", "image_indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "self", ".", "patches", ")", ")", ",", "size", ")", "\n", "figure", ",", "ax", "=", "plt", ".", "subplots", "(", "int", "(", "size", "/", "3", ")", ",", "3", ",", "figsize", "=", "(", "13.75", ",", "2.0", "*", "int", "(", "size", "/", "3", ")", ")", ")", "\n", "if", "show_title", ":", "\n", "            ", "figure", ".", "suptitle", "(", "\n", "\"Example images with labels from {}\"", ".", "format", "(", "self", ".", "get_name", "(", ")", ")", ",", "\n", "fontsize", "=", "32", ",", "\n", "y", "=", "1.006", ",", "\n", ")", "\n", "", "for", "axes", ",", "image_index", "in", "zip", "(", "ax", ".", "flatten", "(", ")", ",", "image_indices", ")", ":", "\n", "            ", "labels_list", "=", "list", "(", "compress", "(", "self", ".", "labels", ".", "keys", "(", ")", ",", "self", "[", "image_index", "]", "[", "1", "]", ")", ")", "\n", "height", ",", "width", ",", "depth", "=", "self", "[", "image_index", "]", "[", "0", "]", ".", "shape", "\n", "white_image", "=", "np", ".", "zeros", "(", "[", "height", ",", "2", "*", "width", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "white_image", ".", "fill", "(", "255", ")", "\n", "text", "=", "'\\n'", ".", "join", "(", "labels_list", ")", "\n", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_SIMPLEX", "\n", "font_size", "=", "0.5", "\n", "font_thickness", "=", "1", "\n", "x", "=", "10", "\n", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "text", ".", "split", "(", "'\\n'", ")", ")", ":", "\n", "                ", "if", "line", "in", "DISPLAY_NAMES", ".", "keys", "(", ")", ":", "\n", "                    ", "line", "=", "DISPLAY_NAMES", "[", "line", "]", "\n", "", "textsize", "=", "cv2", ".", "getTextSize", "(", "line", ",", "font", ",", "font_size", ",", "font_thickness", ")", "[", "0", "]", "\n", "gap", "=", "textsize", "[", "1", "]", "+", "5", "\n", "y", "=", "textsize", "[", "1", "]", "+", "i", "*", "gap", "\n", "cv2", ".", "putText", "(", "white_image", ",", "line", ",", "(", "x", ",", "y", ")", ",", "font", ",", "\n", "font_size", ",", "\n", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "font_thickness", ",", "\n", "lineType", "=", "cv2", ".", "LINE_AA", ")", "\n", "\n", "", "display_image", "=", "np", ".", "hstack", "(", "(", "self", "[", "image_index", "]", "[", "0", "]", ",", "white_image", ")", ")", "\n", "axes", ".", "imshow", "(", "display_image", ")", "\n", "axes", ".", "set_xticks", "(", "[", "]", ")", "\n", "axes", ".", "set_yticks", "(", "[", "]", ")", "\n", "axes", ".", "axis", "(", "'off'", ")", "\n", "", "figure", ".", "tight_layout", "(", ")", "\n", "return", "figure", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.BigEarthNetDataset.data_distribution_table": [[334, 355], ["big_earth_net.BigEarthNetDataset.labels.keys", "enumerate", "pandas.DataFrame", "list", "print", "distribution_table.items", "enumerate", "big_earth_net.BigEarthNetDataset.labels.items", "len"], "methods", ["None"], ["", "def", "data_distribution_table", "(", "self", ")", ":", "\n", "        ", "distribution_table", "=", "{", "}", "\n", "for", "label", "in", "self", ".", "labels", ".", "keys", "(", ")", ":", "\n", "            ", "distribution_table", "[", "label", "]", "=", "0", "\n", "\n", "", "for", "patch_index", ",", "patch_name", "in", "enumerate", "(", "self", ".", "patches", ")", ":", "\n", "            ", "if", "patch_index", "and", "patch_index", "%", "100000", "==", "0", ":", "\n", "                ", "print", "(", "f\"Processed {patch_index} of {len(self.patches)}\"", ")", "\n", "\n", "", "_", ",", "multihots", "=", "self", "[", "patch_index", "]", "\n", "\n", "indices", "=", "[", "index", "for", "index", ",", "element", "in", "enumerate", "(", "multihots", ")", "if", "element", "==", "1", "]", "\n", "for", "index", "in", "indices", ":", "\n", "                ", "key", "=", "[", "k", "for", "k", ",", "v", "in", "self", ".", "labels", ".", "items", "(", ")", "if", "v", "==", "index", "]", "\n", "distribution_table", "[", "key", "[", "0", "]", "]", "+=", "1", "\n", "\n", "# creating a Dataframe object from a list of tuples of key, value pair", "\n", "", "", "label_count", "=", "pd", ".", "DataFrame", "(", "list", "(", "distribution_table", ".", "items", "(", ")", ")", ")", "\n", "label_count", ".", "columns", "=", "[", "\"Label\"", ",", "\"Count\"", "]", "\n", "\n", "return", "label_count", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.BigEarthNetDataset.data_distribution_barchart": [[356, 362], ["big_earth_net.BigEarthNetDataset.data_distribution_table", "matplotlib.subplots", "seaborn.barplot", "ax.set_title", "big_earth_net.BigEarthNetDataset.get_name"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.data_distribution_table", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "data_distribution_barchart", "(", "self", ")", ":", "\n", "        ", "label_count", "=", "self", ".", "data_distribution_table", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "12", ",", "10", ")", ")", "\n", "sns", ".", "barplot", "(", "y", "=", "\"Label\"", ",", "x", "=", "\"Count\"", ",", "data", "=", "label_count", ",", "ax", "=", "ax", ")", "\n", "ax", ".", "set_title", "(", "\"Image distribution for {}\"", ".", "format", "(", "self", ".", "get_name", "(", ")", ")", ",", "pad", "=", "20", ",", "fontsize", "=", "18", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.BigEarthNetDataset.labels_stats": [[363, 382], ["float", "float", "enumerate", "sum", "print", "sum", "sum", "sum", "sum", "len", "len"], "methods", ["None"], ["", "def", "labels_stats", "(", "self", ")", ":", "\n", "        ", "min_number", "=", "float", "(", "'inf'", ")", "\n", "max_number", "=", "float", "(", "'-inf'", ")", "\n", "average_number", "=", "0", "\n", "for", "patch_index", ",", "patch_name", "in", "enumerate", "(", "self", ".", "patches", ")", ":", "\n", "            ", "if", "patch_index", "and", "patch_index", "%", "100000", "==", "0", ":", "\n", "                ", "print", "(", "f\"Processed {patch_index} of {len(self.patches)}\"", ")", "\n", "\n", "", "_", ",", "multihots", "=", "self", "[", "patch_index", "]", "\n", "\n", "if", "sum", "(", "multihots", ")", "<", "min_number", ":", "\n", "                ", "min_number", "=", "sum", "(", "multihots", ")", "\n", "\n", "", "if", "sum", "(", "multihots", ")", ">", "max_number", ":", "\n", "                ", "max_number", "=", "sum", "(", "multihots", ")", "\n", "\n", "", "average_number", "+=", "sum", "(", "multihots", ")", "\n", "\n", "", "return", "f\"Minimum number of labels: {min_number}, Maximum number of labels: {max_number}, \"", "f\"Average number of labels: {average_number / len(self.patches)}\"", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.BigEarthNetDataset.prepare": [[384, 387], ["super().prepare", "big_earth_net.BigEarthNetDataset.process_to_lmdb"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.prepare", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.BigEarthNetDataset.process_to_lmdb"], ["", "def", "prepare", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "prepare", "(", ")", "\n", "self", ".", "process_to_lmdb", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.BigEarthNetDataset.process_to_lmdb": [[388, 433], ["os.path.expanduser", "os.path.isdir", "big_earth_net.PrepBigEarthNetDataset", "torch.utils.data.DataLoader", "lmdb.open", "big_earth_net.BigEarthNetDataset.db.begin", "enumerate", "big_earth_net.BigEarthNetDataset.commit", "big_earth_net.BigEarthNetDataset.db.sync", "big_earth_net.BigEarthNetDataset.db.close", "sorted", "print", "big_earth_net.BigEarthNetDataset.put", "patch_names.append", "big_earth_net.BigEarthNetDataset.db.begin", "big_earth_net.BigEarthNetDataset.put", "big_earth_net.BigEarthNetDataset.put", "os.listdir", "big_earth_net.dumps_pickle", "big_earth_net.BigEarthNetDataset.commit", "big_earth_net.BigEarthNetDataset.db.begin", "big_earth_net.dumps_pickle", "big_earth_net.dumps_pickle", "len", "len", "bands10[].numpy", "bands20[].numpy", "bands60[].numpy", "multihots_19[].numpy", "multihots_43[].numpy"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.dumps_pickle", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.dumps_pickle", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.dumps_pickle"], ["", "def", "process_to_lmdb", "(", "self", ")", ":", "\n", "        ", "patches", "=", "[", "]", "\n", "dir", "=", "os", ".", "path", ".", "expanduser", "(", "self", ".", "data_dir", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "dir", ")", ":", "\n", "            ", "patches", "=", "sorted", "(", "os", ".", "listdir", "(", "dir", ")", ")", "\n", "\n", "", "datagen", "=", "PrepBigEarthNetDataset", "(", "\n", "self", ".", "data_dir", ",", "patch_names_list", "=", "patches", ",", "label_indices", "=", "LABELS", "\n", ")", "\n", "dataloader", "=", "DataLoader", "(", "datagen", ",", "batch_size", "=", "1", ",", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "\n", "patch_names", "=", "[", "]", "\n", "self", ".", "db", "=", "lmdb", ".", "open", "(", "self", ".", "lmdb_path", ",", "map_size", "=", "1e12", ",", "readonly", "=", "False", ",", "meminit", "=", "False", ",", "map_async", "=", "True", ")", "\n", "txn", "=", "self", ".", "db", ".", "begin", "(", "write", "=", "True", ")", "\n", "for", "idx", ",", "data", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "print", "(", "f\"Processed {idx} of {len(dataloader)}\"", ")", "\n", "bands10", ",", "bands20", ",", "bands60", ",", "patch_name", ",", "multihots_19", ",", "multihots_43", "=", "data", "\n", "patch_name", "=", "patch_name", "[", "0", "]", "\n", "txn", ".", "put", "(", "\n", "u\"{}\"", ".", "format", "(", "patch_name", ")", ".", "encode", "(", "\"ascii\"", ")", ",", "\n", "dumps_pickle", "(", "\n", "(", "\n", "bands10", "[", "0", "]", ".", "numpy", "(", ")", ",", "\n", "bands20", "[", "0", "]", ".", "numpy", "(", ")", ",", "\n", "bands60", "[", "0", "]", ".", "numpy", "(", ")", ",", "\n", "multihots_19", "[", "0", "]", ".", "numpy", "(", ")", ",", "\n", "multihots_43", "[", "0", "]", ".", "numpy", "(", ")", "\n", ")", "\n", ")", ",", "\n", ")", "\n", "patch_names", ".", "append", "(", "patch_name", ")", "\n", "\n", "if", "idx", "%", "10000", "==", "0", ":", "\n", "                ", "txn", ".", "commit", "(", ")", "\n", "txn", "=", "self", ".", "db", ".", "begin", "(", "write", "=", "True", ")", "\n", "\n", "", "", "txn", ".", "commit", "(", ")", "\n", "keys", "=", "[", "u\"{}\"", ".", "format", "(", "patch_name", ")", ".", "encode", "(", "\"ascii\"", ")", "for", "patch_name", "in", "patch_names", "]", "\n", "\n", "with", "self", ".", "db", ".", "begin", "(", "write", "=", "True", ")", "as", "txn", ":", "\n", "            ", "txn", ".", "put", "(", "b\"__keys__\"", ",", "dumps_pickle", "(", "keys", ")", ")", "\n", "txn", ".", "put", "(", "b\"__len__\"", ",", "dumps_pickle", "(", "len", "(", "keys", ")", ")", ")", "\n", "\n", "", "self", ".", "db", ".", "sync", "(", ")", "\n", "self", ".", "db", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.PrepBigEarthNetDataset.__init__": [[436, 443], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", "=", "None", ",", "patch_names_list", "=", "None", ",", "label_indices", "=", "None", ")", ":", "\n", "        ", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "label_indices", "=", "label_indices", "\n", "self", ".", "bands10", "=", "[", "\"02\"", ",", "\"03\"", ",", "\"04\"", ",", "\"08\"", "]", "\n", "self", ".", "bands20", "=", "[", "\"05\"", ",", "\"06\"", ",", "\"07\"", ",", "\"8A\"", ",", "\"11\"", ",", "\"12\"", "]", "\n", "self", ".", "bands60", "=", "[", "\"01\"", ",", "\"09\"", "]", "\n", "self", ".", "patch_names_list", "=", "patch_names_list", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.PrepBigEarthNetDataset.__len__": [[444, 446], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "patch_names_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.PrepBigEarthNetDataset.__getitem__": [[447, 449], ["big_earth_net.PrepBigEarthNetDataset.__data_generation"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.PrepBigEarthNetDataset.__data_generation"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "__data_generation", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.PrepBigEarthNetDataset.__data_generation": [[450, 486], ["big_earth_net.parse_json_labels", "big_earth_net.cls2multihot", "bands10_array.append", "bands20_array.append", "bands60_array.append", "os.path.join", "numpy.array().transpose", "numpy.array().transpose", "numpy.array().transpose", "numpy.array", "numpy.array", "utils.tiff_loader().astype", "utils.tiff_loader().astype", "utils.tiff_loader().astype", "numpy.array", "numpy.array", "numpy.array", "utils.tiff_loader", "utils.tiff_loader", "utils.tiff_loader", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.parse_json_labels", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.cls2multihot", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.tiff_loader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.tiff_loader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.tiff_loader"], ["", "def", "__data_generation", "(", "self", ",", "idx", ")", ":", "\n", "        ", "patch_name", "=", "self", ".", "patch_names_list", "[", "idx", "]", "\n", "bands10_array", "=", "[", "]", "\n", "bands20_array", "=", "[", "]", "\n", "bands60_array", "=", "[", "]", "\n", "\n", "for", "band", "in", "self", ".", "bands10", ":", "\n", "            ", "bands10_array", ".", "append", "(", "tiff_loader", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "patch_name", ",", "patch_name", "+", "\"_B\"", "+", "band", "+", "\".tif\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "\n", "\n", "", "for", "band", "in", "self", ".", "bands20", ":", "\n", "            ", "bands20_array", ".", "append", "(", "tiff_loader", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "patch_name", ",", "patch_name", "+", "\"_B\"", "+", "band", "+", "\".tif\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "\n", "\n", "", "for", "band", "in", "self", ".", "bands60", ":", "\n", "            ", "bands60_array", ".", "append", "(", "tiff_loader", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "patch_name", ",", "patch_name", "+", "\"_B\"", "+", "band", "+", "\".tif\"", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "\n", "\n", "", "labels", "=", "parse_json_labels", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "patch_name", ",", "patch_name", "+", "\"_labels_metadata.json\"", ")", "\n", ")", "\n", "\n", "labels_multihot_19", ",", "labels_multihot_43", "=", "cls2multihot", "(", "\n", "labels", ",", "self", ".", "label_indices", "\n", ")", "\n", "\n", "return", "(", "\n", "np", ".", "array", "(", "bands10_array", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "\n", "np", ".", "array", "(", "bands20_array", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "\n", "np", ".", "array", "(", "bands60_array", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "\n", "patch_name", ",", "\n", "np", ".", "array", "(", "labels_multihot_19", ")", ",", "\n", "np", ".", "array", "(", "labels_multihot_43", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.interp_band": [[121, 131], ["numpy.zeros().astype", "range", "numpy.zeros", "skimage.transform.resize"], "function", ["None"], ["def", "interp_band", "(", "bands", ",", "img10_shape", "=", "[", "120", ",", "120", "]", ")", ":", "\n", "    ", "\"\"\"\n    https://github.com/lanha/DSen2/blob/master/utils/patches.py\n    \"\"\"", "\n", "bands_interp", "=", "np", ".", "zeros", "(", "[", "bands", ".", "shape", "[", "0", "]", "]", "+", "img10_shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "bands", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "bands_interp", "[", "i", "]", "=", "resize", "(", "bands", "[", "i", "]", "/", "30000", ",", "img10_shape", ",", "mode", "=", "\"reflect\"", ")", "*", "30000", "\n", "\n", "", "return", "bands_interp", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.parse_json_labels": [[133, 142], ["open", "json.load"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load"], ["", "def", "parse_json_labels", "(", "f_j_path", ")", ":", "\n", "    ", "\"\"\"\n    parse meta-data json file for big earth to get image labels\n    :param f_j_path: json file path\n    :return:\n    \"\"\"", "\n", "with", "open", "(", "f_j_path", ",", "\"r\"", ")", "as", "f_j", ":", "\n", "        ", "j_f_c", "=", "json", ".", "load", "(", "f_j", ")", "\n", "", "return", "j_f_c", "[", "\"labels\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.update_json_labels": [[144, 152], ["open", "json.load", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load"], ["", "def", "update_json_labels", "(", "f_j_path", ",", "BigEarthNet_19_labels", ")", ":", "\n", "    ", "with", "open", "(", "f_j_path", ",", "\"r\"", ")", "as", "f_j", ":", "\n", "        ", "j_f_c", "=", "json", ".", "load", "(", "f_j", ")", "\n", "\n", "", "j_f_c", "[", "\"BigEarthNet_19_labels\"", "]", "=", "BigEarthNet_19_labels", "\n", "\n", "with", "open", "(", "f_j_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "j_f_c", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.loads_pickle": [[154, 160], ["pickle.loads"], "function", ["None"], ["", "", "def", "loads_pickle", "(", "buf", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        buf: the output of `dumps`.\n    \"\"\"", "\n", "return", "pickle", ".", "loads", "(", "buf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.dumps_pickle": [[162, 169], ["pickle.dumps"], "function", ["None"], ["", "def", "dumps_pickle", "(", "obj", ")", ":", "\n", "    ", "\"\"\"\n    Serialize an object.\n    Returns:\n        Implementation-dependent bytes-like object\n    \"\"\"", "\n", "return", "pickle", ".", "dumps", "(", "obj", ",", "protocol", "=", "pickle", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.big_earth_net.cls2multihot": [[171, 194], ["numpy.zeros", "numpy.zeros", "range", "len", "numpy.where", "bigearthnet_19_labels.append", "label_indices[].items", "len", "len", "numpy.sum"], "function", ["None"], ["", "def", "cls2multihot", "(", "cls_vec", ",", "label_indices", ")", ":", "\n", "    ", "label_conversion", "=", "label_indices", "[", "\"label_conversion\"", "]", "\n", "\n", "bigearthnet_19_label_idx", "=", "{", "\n", "v", ":", "k", "for", "k", ",", "v", "in", "label_indices", "[", "\"BigEarthNet-19_labels\"", "]", ".", "items", "(", ")", "\n", "}", "\n", "\n", "bigearthnet_19_labels_multihot", "=", "np", ".", "zeros", "(", "(", "len", "(", "label_conversion", ")", ",", ")", ")", "\n", "original_labels_multihot", "=", "np", ".", "zeros", "(", "(", "len", "(", "label_indices", "[", "\"original_labels\"", "]", ")", ",", ")", ")", "\n", "\n", "for", "cls_nm", "in", "cls_vec", ":", "\n", "        ", "original_labels_multihot", "[", "label_indices", "[", "\"original_labels\"", "]", "[", "cls_nm", "]", "]", "=", "1", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "label_conversion", ")", ")", ":", "\n", "        ", "bigearthnet_19_labels_multihot", "[", "i", "]", "=", "(", "\n", "np", ".", "sum", "(", "original_labels_multihot", "[", "label_conversion", "[", "i", "]", "]", ")", ">", "0", "\n", ")", ".", "astype", "(", "int", ")", "\n", "\n", "", "bigearthnet_19_labels", "=", "[", "]", "\n", "for", "i", "in", "np", ".", "where", "(", "bigearthnet_19_labels_multihot", "==", "1", ")", "[", "0", "]", ":", "\n", "        ", "bigearthnet_19_labels", ".", "append", "(", "bigearthnet_19_label_idx", "[", "i", "]", ")", "\n", "\n", "", "return", "bigearthnet_19_labels_multihot", ",", "original_labels_multihot", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.aid_multilabel.AIDMultiLabelDataset.__init__": [[13, 16], ["multilabel_classification.MultiLabelClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "MultiLabelClassificationDataset", ".", "__init__", "(", "self", ",", "config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.whu_rs19.WHURS19Dataset.__init__": [[33, 36], ["multiclass_classification.MultiClassClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.amazon_rainforest.AmazonRainforestDataset.__init__": [[31, 37], ["base.BaseDataset.__init__", "amazon_rainforest.AmazonRainforestDataset.load_dataset"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.load_dataset"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema", "\n", "        ", "BaseDataset", ".", "__init__", "(", "self", ",", "config", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "masks", "=", "[", "]", "\n", "self", ".", "load_dataset", "(", "self", ".", "config", ".", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.amazon_rainforest.AmazonRainforestDataset.__getitem__": [[38, 48], ["utils.image_loader", "numpy.stack().astype", "utils.image_loader", "amazon_rainforest.AmazonRainforestDataset.transform", "amazon_rainforest.AmazonRainforestDataset.target_transform", "enumerate", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "image_loader", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "mask", "=", "image_loader", "(", "self", ".", "masks", "[", "index", "]", ",", "True", ")", "/", "255", "\n", "masks", "=", "[", "(", "mask", "==", "v", ")", "for", "v", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", "]", "\n", "mask", "=", "np", ".", "stack", "(", "masks", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.amazon_rainforest.AmazonRainforestDataset.__len__": [[49, 51], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.amazon_rainforest.AmazonRainforestDataset.load_dataset": [[52, 61], ["os.listdir", "ValueError", "os.path.join", "os.path.join", "os.path.join", "image_id.rfind"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "if", "not", "self", ".", "labels", ":", "\n", "            ", "raise", "ValueError", "(", "\"You need to provide the list of labels for the dataset\"", ")", "\n", "\n", "", "ids", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"images\"", ")", ")", "\n", "self", ".", "images", "=", "[", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"images\"", ",", "image_id", ")", "for", "image_id", "in", "ids", "]", "\n", "self", ".", "masks", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"masks\"", ",", "image_id", "[", ":", "image_id", ".", "rfind", "(", "\".\"", ")", "]", "+", "\".png\"", ")", "\n", "for", "image_id", "in", "ids", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.amazon_rainforest.AmazonRainforestDataset.get_labels": [[63, 65], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.amazon_rainforest.AmazonRainforestDataset.show_image": [[66, 96], ["numpy.zeros", "enumerate", "matplotlib.figure", "matplotlib.figure.suptitle", "matplotlib.figure.legend", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.figure.tight_layout", "matplotlib.show", "legend_elements.append", "matplotlib.patches.Patch", "numpy.where", "amazon_rainforest.AmazonRainforestDataset.get_name", "tuple"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "self", "[", "index", "]", "[", "0", "]", "\n", "mask", "=", "self", "[", "index", "]", "[", "1", "]", "\n", "img_mask", "=", "np", ".", "zeros", "(", "[", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ",", "3", "]", ",", "np", ".", "uint8", ")", "\n", "legend_elements", "=", "[", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", ":", "\n", "            ", "legend_elements", ".", "append", "(", "\n", "Patch", "(", "\n", "facecolor", "=", "tuple", "(", "[", "x", "/", "255", "for", "x", "in", "self", ".", "color_mapping", "[", "i", "]", "]", ")", ",", "\n", "label", "=", "self", ".", "labels", "[", "i", "]", ",", "\n", ")", "\n", ")", "\n", "img_mask", "[", "np", ".", "where", "(", "mask", "[", ":", ",", ":", ",", "i", "]", "==", "1", ")", "]", "=", "self", ".", "color_mapping", "[", "i", "]", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "8", ")", ")", "\n", "fig", ".", "suptitle", "(", "\n", "f\"Image and mask with index {index} from the dataset {self.get_name()}\\n\"", ",", "\n", "fontsize", "=", "16", ",", "\n", "y", "=", "1.006", ",", "\n", ")", "\n", "fig", ".", "legend", "(", "handles", "=", "legend_elements", ",", "bbox_to_anchor", "=", "[", "0.5", ",", "0.85", "]", ",", "loc", "=", "\"center\"", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "img_mask", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "fig", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multiclass_classification.MultiClassClassificationDataset.__init__": [[25, 33], ["base.BaseDataset.__init__", "multiclass_classification.MultiClassClassificationDataset.load_dataset"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.load_dataset"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "# load the data", "\n", "self", ".", "data_dir", "=", "self", ".", "config", ".", "data_dir", "\n", "self", ".", "csv_file", "=", "self", ".", "config", ".", "csv_file", "\n", "self", ".", "data", "=", "self", ".", "load_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multiclass_classification.MultiClassClassificationDataset.__getitem__": [[34, 51], ["utils.image_loader", "multiclass_classification.MultiClassClassificationDataset.transform", "multiclass_classification.MultiClassClassificationDataset.target_transform"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "# load image", "\n", "img", "=", "image_loader", "(", "self", ".", "data", "[", "index", "]", "[", "0", "]", ")", "\n", "# apply transformations", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "target", "=", "self", ".", "data", "[", "index", "]", "[", "1", "]", "\n", "if", "self", ".", "target_transform", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "self", ".", "data", "[", "index", "]", "[", "1", "]", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multiclass_classification.MultiClassClassificationDataset.__len__": [[52, 54], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multiclass_classification.MultiClassClassificationDataset.get_labels": [[55, 57], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multiclass_classification.MultiClassClassificationDataset.data_distribution_table": [[58, 63], ["pandas.read_csv", "pandas.read_csv.groupby().count().reset_index", "pandas.read_csv.groupby().count", "pandas.read_csv.groupby"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.count"], ["", "def", "data_distribution_table", "(", "self", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "csv_file", ",", "sep", "=", "\",\"", ",", "names", "=", "[", "\"File name\"", ",", "\"Label\"", "]", ")", "\n", "label_count", "=", "df", ".", "groupby", "(", "\"Label\"", ")", ".", "count", "(", ")", ".", "reset_index", "(", ")", "\n", "label_count", ".", "columns", "=", "[", "\"Label\"", ",", "\"Count\"", "]", "\n", "return", "label_count", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multiclass_classification.MultiClassClassificationDataset.data_distribution_barchart": [[64, 72], ["multiclass_classification.MultiClassClassificationDataset.data_distribution_table", "matplotlib.subplots", "seaborn.barplot", "ax.set_title", "multiclass_classification.MultiClassClassificationDataset.get_name"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.data_distribution_table", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "data_distribution_barchart", "(", "self", ")", ":", "\n", "        ", "label_count", "=", "self", ".", "data_distribution_table", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "12", ",", "10", ")", ")", "\n", "sns", ".", "barplot", "(", "y", "=", "\"Label\"", ",", "x", "=", "\"Count\"", ",", "data", "=", "label_count", ",", "ax", "=", "ax", ")", "\n", "ax", ".", "set_title", "(", "\n", "\"Labels distribution for {}\"", ".", "format", "(", "self", ".", "get_name", "(", ")", ")", ",", "pad", "=", "20", ",", "fontsize", "=", "18", "\n", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multiclass_classification.MultiClassClassificationDataset.show_samples": [[73, 76], ["pandas.read_csv", "pandas.read_csv.head"], "methods", ["None"], ["", "def", "show_samples", "(", "self", ")", ":", "\n", "        ", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "csv_file", ",", "sep", "=", "\",\"", ",", "names", "=", "[", "\"File name\"", ",", "\"Label\"", "]", ")", "\n", "return", "df", ".", "head", "(", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multiclass_classification.MultiClassClassificationDataset.show_image": [[77, 87], ["matplotlib.figure", "matplotlib.title", "matplotlib.axis", "matplotlib.imshow", "multiclass_classification.MultiClassClassificationDataset.get_name"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "label", "=", "self", ".", "labels", "[", "self", "[", "index", "]", "[", "1", "]", "]", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "plt", ".", "title", "(", "\n", "f\"Image with index {index} from the dataset {self.get_name()}, with label {label}\\n\"", ",", "\n", "fontsize", "=", "14", ",", "\n", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "imshow", "(", "self", "[", "index", "]", "[", "0", "]", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multiclass_classification.MultiClassClassificationDataset.show_batch": [[88, 106], ["random.sample", "matplotlib.subplots", "zip", "figure.tight_layout", "ValueError", "range", "int", "figure.suptitle", "ax.flatten", "axes.imshow", "axes.set_title", "axes.set_xticks", "axes.set_yticks", "len", "multiclass_classification.MultiClassClassificationDataset.get_name", "int"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_batch", "(", "self", ",", "size", ",", "show_title", "=", "True", ")", ":", "\n", "        ", "if", "size", "%", "5", ":", "\n", "            ", "raise", "ValueError", "(", "\"The provided size should be divided by 5!\"", ")", "\n", "", "image_indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "self", ".", "data", ")", ")", ",", "size", ")", "\n", "figure", ",", "ax", "=", "plt", ".", "subplots", "(", "int", "(", "size", "/", "5", ")", ",", "5", ",", "figsize", "=", "(", "13.75", ",", "2.8", "*", "int", "(", "size", "/", "5", ")", ")", ")", "\n", "if", "show_title", ":", "\n", "            ", "figure", ".", "suptitle", "(", "\n", "\"Example images with labels from {}\"", ".", "format", "(", "self", ".", "get_name", "(", ")", ")", ",", "\n", "fontsize", "=", "32", ",", "\n", "y", "=", "1.006", ",", "\n", ")", "\n", "", "for", "axes", ",", "image_index", "in", "zip", "(", "ax", ".", "flatten", "(", ")", ",", "image_indices", ")", ":", "\n", "            ", "axes", ".", "imshow", "(", "self", "[", "image_index", "]", "[", "0", "]", ")", "\n", "axes", ".", "set_title", "(", "self", ".", "labels", "[", "self", "[", "image_index", "]", "[", "1", "]", "]", ",", "fontsize", "=", "18", ",", "pad", "=", "10", ")", "\n", "axes", ".", "set_xticks", "(", "[", "]", ")", "\n", "axes", ".", "set_yticks", "(", "[", "]", ")", "\n", "", "figure", ".", "tight_layout", "(", ")", "\n", "return", "figure", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.multiclass_classification.MultiClassClassificationDataset.load_dataset": [[107, 122], ["ValueError", "open", "csv.reader", "enumerate", "data.append", "os.path.join", "multiclass_classification.MultiClassClassificationDataset.labels.index"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "labels", ":", "\n", "            ", "raise", "ValueError", "(", "\"You need to provide the list of labels for the dataset\"", ")", "\n", "", "data", "=", "[", "]", "\n", "if", "self", ".", "csv_file", ":", "\n", "            ", "with", "open", "(", "self", ".", "csv_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "csv_reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "index", ",", "row", "in", "enumerate", "(", "csv_reader", ")", ":", "\n", "                    ", "file_name", "=", "row", "[", "0", "]", "\n", "item", "=", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "file_name", ")", ",", "\n", "self", ".", "labels", ".", "index", "(", "row", "[", "1", "]", ")", ",", "\n", ")", "\n", "data", ".", "append", "(", "item", ")", "\n", "", "", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.spacenet6.SpaceNet6Dataset.__init__": [[131, 137], ["base.BaseDataset.__init__", "list", "list", "pandas.read_csv", "list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "image_paths", "=", "list", "(", ")", "\n", "self", ".", "mask_paths", "=", "list", "(", ")", "\n", "self", ".", "orients", "=", "pd", ".", "read_csv", "(", "config", ".", "orients", ",", "index_col", "=", "0", ")", "\n", "self", ".", "orients", "[", "\"val\"", "]", "=", "list", "(", "range", "(", "len", "(", "self", ".", "orients", ".", "index", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.spacenet6.SpaceNet6Dataset.__getitem__": [[138, 208], ["skimage.io.imread", "numpy.where", "numpy.where", "utils.parse_img_id", "direction.item", "torch.from_numpy().float", "numpy.amin", "numpy.amin", "skimage.io.imread", "spacenet6.SpaceNet6Dataset.transform", "numpy.fliplr", "numpy.array", "numpy.ones_like", "skimage.measure.label", "skimage.measure.regionprops", "range", "torch.from_numpy().float", "torch.from_numpy().float", "torch.Tensor", "torch.Tensor", "numpy.amax", "numpy.amax", "numpy.flipud", "numpy.fliplr", "numpy.array", "torch.from_numpy", "numpy.flipud", "numpy.fliplr.transpose().copy", "torch.from_numpy", "torch.from_numpy", "numpy.fliplr.sum", "numpy.fliplr.sum", "torch.Tensor.transpose().copy", "numpy.fliplr.transpose().copy", "numpy.fliplr.transpose", "torch.Tensor.transpose", "numpy.fliplr.transpose"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.parse_img_id"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Loads the dataset item at the specified index.\n        Applies the transformations to the item before returning it.\n\n        Parameters\n        ----------\n            index : int\n                Specifying which item to return.\n        \"\"\"", "\n", "# Get image paths", "\n", "image_path", "=", "self", ".", "image_paths", "[", "index", "]", "\n", "# Read image", "\n", "image", "=", "io", ".", "imread", "(", "image_path", ")", "\n", "mask", "=", "None", "# placeholder, ignores the \"might be referenced before assignment\" warning", "\n", "# Calculate min/max x/y for the black parts", "\n", "m", "=", "np", ".", "where", "(", "(", "image", ".", "sum", "(", "axis", "=", "2", ")", ">", "0", ")", ".", "any", "(", "1", ")", ")", "\n", "y_min", ",", "y_max", "=", "np", ".", "amin", "(", "m", ")", ",", "np", ".", "amax", "(", "m", ")", "+", "1", "\n", "m", "=", "np", ".", "where", "(", "(", "image", ".", "sum", "(", "axis", "=", "2", ")", ">", "0", ")", ".", "any", "(", "0", ")", ")", "\n", "x_min", ",", "x_max", "=", "np", ".", "amin", "(", "m", ")", ",", "np", ".", "amax", "(", "m", ")", "+", "1", "\n", "# Remove black parts", "\n", "image", "=", "image", "[", "y_min", ":", "y_max", ",", "x_min", ":", "x_max", "]", "\n", "# Apply transformations, (should be available only for training data)", "\n", "if", "self", ".", "config", ".", "transforms", ":", "\n", "# Get mask path", "\n", "            ", "mask_path", "=", "self", ".", "mask_paths", "[", "index", "]", "\n", "# Read mask", "\n", "mask", "=", "io", ".", "imread", "(", "mask_path", ")", "\n", "# Remove black parts", "\n", "mask", "=", "mask", "[", "y_min", ":", "y_max", ",", "x_min", ":", "x_max", "]", "\n", "image", ",", "mask", "=", "self", ".", "transform", "(", "{", "\"image\"", ":", "image", ",", "\"mask\"", ":", "mask", "}", ")", "\n", "# Extract direction, strip and coordinates from image", "\n", "", "direction", ",", "strip", ",", "coordinate", "=", "parse_img_id", "(", "image_path", ",", "self", ".", "orients", ")", "\n", "if", "direction", ".", "item", "(", ")", ":", "\n", "            ", "image", "=", "np", ".", "fliplr", "(", "np", ".", "flipud", "(", "image", ")", ")", "\n", "if", "self", ".", "config", ".", "transforms", ":", "\n", "                ", "mask", "=", "np", ".", "fliplr", "(", "np", ".", "flipud", "(", "mask", ")", ")", "\n", "", "", "image", "=", "(", "\n", "image", "-", "np", ".", "array", "(", "[", "28.62501827", ",", "36.09922463", ",", "33.84483687", ",", "26.21196667", "]", ")", "\n", ")", "/", "np", ".", "array", "(", "[", "8.41487376", ",", "8.26645475", ",", "8.32328472", ",", "8.63668993", "]", ")", "\n", "# Transpose image", "\n", "image", "=", "torch", ".", "from_numpy", "(", "image", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "# Reorder bands", "\n", "image", "=", "image", "[", "[", "0", ",", "3", ",", "1", ",", "2", "]", "]", "\n", "if", "self", ".", "config", ".", "transforms", ":", "\n", "            ", "weights", "=", "np", ".", "ones_like", "(", "mask", "[", ":", ",", ":", ",", ":", "1", "]", ",", "dtype", "=", "float", ")", "\n", "region_labels", ",", "region_count", "=", "measure", ".", "label", "(", "\n", "mask", "[", ":", ",", ":", ",", "0", "]", ",", "background", "=", "0", ",", "connectivity", "=", "1", ",", "return_num", "=", "True", "\n", ")", "\n", "region_properties", "=", "measure", ".", "regionprops", "(", "region_labels", ")", "\n", "for", "bl", "in", "range", "(", "region_count", ")", ":", "\n", "                ", "weights", "[", "region_labels", "==", "bl", "+", "1", "]", "=", "1024.0", "/", "region_properties", "[", "bl", "]", ".", "area", "\n", "", "mask", "[", ":", ",", ":", ",", ":", "3", "]", "=", "(", "mask", "[", ":", ",", ":", ",", ":", "3", "]", ">", "1", ")", "*", "1", "\n", "weights", "=", "torch", ".", "from_numpy", "(", "weights", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "copy", "(", ")", ")", ".", "float", "(", ")", "\n", "rgb", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "rgb", "=", "weights", "=", "region_count", "=", "torch", ".", "Tensor", "(", "[", "0", "]", ")", "\n", "", "return", "{", "\n", "\"image\"", ":", "image", ",", "\n", "\"mask\"", ":", "mask", ",", "\n", "\"rgb\"", ":", "rgb", ",", "\n", "\"strip\"", ":", "strip", ",", "\n", "\"direction\"", ":", "direction", ",", "\n", "\"coordinate\"", ":", "coordinate", ",", "\n", "\"image_path\"", ":", "image_path", ",", "\n", "\"ymin\"", ":", "y_min", ",", "\n", "\"xmin\"", ":", "x_min", ",", "\n", "\"b_count\"", ":", "region_count", ",", "\n", "\"weights\"", ":", "weights", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.spacenet6.SpaceNet6Dataset.__len__": [[210, 212], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "image_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.spacenet6.SpaceNet6Dataset.load_directory": [[213, 217], ["glob.glob", "os.path.join"], "methods", ["None"], ["", "def", "load_directory", "(", "self", ")", ":", "\n", "        ", "\"\"\"Loads the *.tif images from the specified directory.\"\"\"", "\n", "self", ".", "image_paths", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "test_directory", ",", "\"*.tif\"", ")", ")", "\n", "self", ".", "mask_paths", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.spacenet6.SpaceNet6Dataset.load_other_folds": [[218, 238], ["pandas.read_csv", "os.path.join", "os.path.join", "os.path.basename", "os.path.basename", "numpy.logical_or", "numpy.logical_or"], "methods", ["None"], ["", "def", "load_other_folds", "(", "self", ",", "fold", ")", ":", "\n", "        ", "\"\"\"Loads all images (and masks) except the ones from this fold.\"\"\"", "\n", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "config", ".", "folds_path", ")", "\n", "self", ".", "image_paths", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "config", ".", "root_directory", ",", "\"SAR-Intensity\"", ",", "os", ".", "path", ".", "basename", "(", "x", ")", "\n", ")", "\n", "for", "x", "in", "df", "[", "\n", "np", ".", "logical_or", "(", "\n", "df", "[", "\"fold\"", "]", ">", "(", "fold", "%", "10", ")", "+", "1", ",", "df", "[", "\"fold\"", "]", "<", "(", "fold", "%", "10", ")", "-", "1", "\n", ")", "\n", "]", "[", "\"sar\"", "]", ".", "values", "\n", "]", "\n", "self", ".", "mask_paths", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "segmentation_directory", ",", "os", ".", "path", ".", "basename", "(", "x", ")", ")", "\n", "for", "x", "in", "df", "[", "\n", "np", ".", "logical_or", "(", "\n", "df", "[", "\"fold\"", "]", ">", "(", "fold", "%", "10", ")", "+", "1", ",", "df", "[", "\"fold\"", "]", "<", "(", "fold", "%", "10", ")", "-", "1", "\n", ")", "\n", "]", "[", "\"segm\"", "]", ".", "values", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.spacenet6.SpaceNet6Dataset.load_fold": [[240, 250], ["pandas.read_csv", "os.path.join", "os.path.basename"], "methods", ["None"], ["", "def", "load_fold", "(", "self", ",", "fold", ")", ":", "\n", "        ", "\"\"\"Loads the images from this fold.\"\"\"", "\n", "df", "=", "pd", ".", "read_csv", "(", "self", ".", "config", ".", "folds_path", ")", "\n", "self", ".", "image_paths", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "config", ".", "root_directory", ",", "\"SAR-Intensity\"", ",", "os", ".", "path", ".", "basename", "(", "x", ")", "\n", ")", "\n", "for", "x", "in", "df", "[", "df", "[", "\"fold\"", "]", "==", "(", "fold", "%", "10", ")", "]", "[", "\"sar\"", "]", ".", "values", "\n", "]", "\n", "self", ".", "mask_paths", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.spacenet6.SpaceNet6Dataset.labels": [[251, 253], ["None"], "methods", ["None"], ["", "def", "labels", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.spacenet6.SpaceNet6Dataset.prepare": [[254, 353], ["os.makedirs", "os.makedirs", "os.path.join", "pandas.read_csv", "glob.glob", "pandas.read_csv", "pandas.DataFrame", "tqdm.tqdm.tqdm", "df_fold.append.append.to_csv", "range", "pandas.read_csv.to_csv", "os.path.join", "multiprocessing.Pool", "tqdm.tqdm.tqdm", "[].squeeze", "gdal.Open().GetGeoTransform", "min", "os.path.join", "df_fold.append.append.append", "os.path.join", "gt_buildings[].to_csv", "pool.imap_unordered", "max", "os.path.basename", "os.path.join().format", "functools.partial", "[].split", "image_id.split", "gdal.Open", "math.floor", "os.path.join", "pandas.read_csv.ImageId.isin", "os.path.splitext", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split"], ["", "def", "prepare", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Prepares the SpaceNet6 data set for model training and validation by:\n\n        1. Creating training segmentation masks from the geojson files\n\n        2. Splitting the data set by location, which was shown to be very important for model learning, see:\n        https://github.com/SpaceNetChallenge/SpaceNet_SAR_Buildings_Solutions/blob/master/1-zbigniewwojna/README.md\n        Creates 10 splits of the data set. Each split consists of 10 folds (i.e. further splits) of which 9 are used for\n        training and one for validation/testing (in essence, a cross validation procedure).\n        \"\"\"", "\n", "# Create destination directories if they don't exist", "\n", "os", ".", "makedirs", "(", "self", ".", "config", ".", "segmentation_directory", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "config", ".", "folds_dir", ",", "exist_ok", "=", "True", ")", "\n", "# Path to the ground-truth buildings csv file", "\n", "gt_buildings_csv_filepath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "config", ".", "root_directory", ",", "\n", "\"SummaryData/SN6_Train_AOI_11_Rotterdam_Buildings.csv\"", ",", "\n", ")", "\n", "# Read gt building csv file", "\n", "gt_buildings", "=", "pd", ".", "read_csv", "(", "gt_buildings_csv_filepath", ")", "\n", "# Walk the raw data directory with the SAR images and save the filenames in it", "\n", "sar_image_paths", "=", "glob", ".", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "root_directory", ",", "\"SAR-Intensity\"", ",", "\"*.tif\"", ")", "\n", ")", "\n", "# Process each SAR image", "\n", "with", "Pool", "(", "self", ".", "config", ".", "num_threads", ")", "as", "pool", ":", "\n", "            ", "for", "_", "in", "tqdm", "(", "\n", "pool", ".", "imap_unordered", "(", "\n", "partial", "(", "\n", "process_image", ",", "\n", "segmentation_directory", "=", "self", ".", "config", ".", "segmentation_directory", ",", "\n", "edge_width", "=", "self", ".", "config", ".", "edge_width", ",", "\n", "contact_width", "=", "self", ".", "config", ".", "contact_width", ",", "\n", "gt_buildings_csv", "=", "gt_buildings_csv_filepath", ",", "\n", ")", ",", "\n", "sar_image_paths", ",", "\n", ")", "\n", ")", ":", "\n", "                ", "pass", "\n", "", "", "orientations", "=", "pd", ".", "read_csv", "(", "\n", "filepath_or_buffer", "=", "self", ".", "config", ".", "orients", ",", "\n", "sep", "=", "\" \"", ",", "\n", "index_col", "=", "0", ",", "\n", "names", "=", "[", "\"strip\"", ",", "\"direction\"", "]", ",", "\n", "header", "=", "None", ",", "\n", ")", "\n", "df_fold", "=", "pd", ".", "DataFrame", "(", "\n", "columns", "=", "[", "\"ImageId\"", ",", "\"sar\"", ",", "\"segm\"", ",", "\"rotation\"", ",", "\"x\"", ",", "\"y\"", ",", "\"fold\"", "]", "\n", ")", "\n", "l_edge", "=", "591640", "\n", "r_edge", "=", "596160", "\n", "orientations", "[", "\"sum_y\"", "]", "=", "0.0", "\n", "orientations", "[", "\"ctr_y\"", "]", "=", "0.0", "\n", "for", "sar_path", "in", "tqdm", "(", "sar_image_paths", ")", ":", "\n", "            ", "image_id", "=", "\"_\"", ".", "join", "(", "\n", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "sar_path", ")", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "4", ":", "]", "\n", ")", "\n", "strip_name", "=", "\"_\"", ".", "join", "(", "image_id", ".", "split", "(", "\"_\"", ")", "[", "-", "4", ":", "-", "2", "]", ")", "\n", "rotation", "=", "orientations", ".", "loc", "[", "strip_name", "]", "[", "\"direction\"", "]", ".", "squeeze", "(", ")", "\n", "tr", "=", "gdal", ".", "Open", "(", "sar_path", ")", ".", "GetGeoTransform", "(", ")", "\n", "orientations", ".", "loc", "[", "strip_name", ",", "\"sum_y\"", "]", "+=", "tr", "[", "3", "]", "\n", "orientations", ".", "loc", "[", "strip_name", ",", "\"ctr_y\"", "]", "+=", "1", "\n", "fold_no", "=", "min", "(", "\n", "self", ".", "config", ".", "num_folds", "-", "1", ",", "\n", "max", "(", "\n", "0", ",", "\n", "math", ".", "floor", "(", "\n", "(", "tr", "[", "0", "]", "-", "l_edge", ")", "/", "(", "r_edge", "-", "l_edge", ")", "*", "self", ".", "config", ".", "num_folds", "\n", ")", ",", "\n", ")", ",", "\n", ")", "\n", "segmentation_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "config", ".", "segmentation_directory", ",", "os", ".", "path", ".", "basename", "(", "sar_path", ")", "\n", ")", "\n", "df_fold", "=", "df_fold", ".", "append", "(", "\n", "{", "\n", "\"ImageId\"", ":", "image_id", ",", "\n", "\"sar\"", ":", "sar_path", ",", "\n", "\"segm\"", ":", "segmentation_path", ",", "\n", "\"rotation\"", ":", "rotation", ",", "\n", "\"x\"", ":", "tr", "[", "0", "]", ",", "\n", "\"y\"", ":", "tr", "[", "3", "]", ",", "\n", "\"fold\"", ":", "fold_no", ",", "\n", "}", ",", "\n", "ignore_index", "=", "True", ",", "\n", ")", "\n", "", "df_fold", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "folds_dir", ",", "\"folds.csv\"", ")", ",", "index", "=", "False", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "config", ".", "num_folds", ")", ":", "\n", "            ", "img_ids", "=", "df_fold", "[", "df_fold", "[", "\"fold\"", "]", "==", "i", "]", "[", "\"ImageId\"", "]", ".", "values", "\n", "gt_buildings", "[", "gt_buildings", ".", "ImageId", ".", "isin", "(", "img_ids", ")", "]", ".", "to_csv", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "folds_dir", ",", "\"gt_fold{}.csv\"", ")", ".", "format", "(", "i", ")", ",", "\n", "index", "=", "False", ",", "\n", ")", "\n", "", "orientations", "[", "\"mean_y\"", "]", "=", "orientations", "[", "\"sum_y\"", "]", "/", "orientations", "[", "\"ctr_y\"", "]", "\n", "orientations", "[", "\"coord_y\"", "]", "=", "(", "\n", "(", "orientations", "[", "\"mean_y\"", "]", "-", "5746153.106161971", ")", "/", "11000", "\n", ")", "+", "0.2", "\n", "orientations", ".", "to_csv", "(", "self", ".", "config", ".", "orients_output", ",", "index", "=", "True", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.spacenet6.polygon_to_mask": [[39, 50], ["numpy.zeros", "cv2.fillPoly", "cv2.fillPoly", "numpy.array().round().astype", "spacenet6.polygon_to_mask.integer_coordinates"], "function", ["None"], ["def", "polygon_to_mask", "(", "poly", ",", "image_size", ")", ":", "\n", "    ", "image_mask", "=", "np", ".", "zeros", "(", "image_size", ",", "np", ".", "uint8", ")", "\n", "\n", "def", "integer_coordinates", "(", "x", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "x", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "", "exteriors", "=", "[", "integer_coordinates", "(", "poly", ".", "exterior", ".", "coords", ")", "]", "\n", "interiors", "=", "[", "integer_coordinates", "(", "pi", ".", "coords", ")", "for", "pi", "in", "poly", ".", "interiors", "]", "\n", "cv2", ".", "fillPoly", "(", "image_mask", ",", "exteriors", ",", "1", ")", "\n", "cv2", ".", "fillPoly", "(", "image_mask", ",", "interiors", ",", "0", ")", "\n", "return", "image_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.spacenet6.process_image": [[52, 124], ["pandas.read_csv", "os.path.basename", "numpy.zeros", "numpy.zeros", "range", "numpy.zeros", "skimage.io.imsave", "shapely.wkt.loads", "numpy.zeros_like", "range", "skimage.morphology.dilation", "skimage.morphology.dilation", "numpy.zeros_like", "range", "numpy.stack().astype", "numpy.rollaxis", "os.path.join", "spacenet6.polygon_to_mask", "skimage.morphology.square", "skimage.morphology.erosion", "skimage.morphology.square", "skimage.segmentation.watershed", "skimage.morphology.square", "range", "np.zeros.max", "numpy.unique", "numpy.stack", "len", "max", "min", "max", "min", "os.path.basename.split"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.spacenet6.polygon_to_mask", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split"], ["", "def", "process_image", "(", "\n", "image_path", ",", "segmentation_directory", ",", "edge_width", ",", "contact_width", ",", "gt_buildings_csv", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Creates and saves the target (ground-truth) segmentation mask for the input image.\n\n    Parameters\n    ----------\n        image_path : str\n            path to the source image\n        segmentation_directory : str\n            path to the destination directory for the segmentation masks\n        edge_width : int\n            the width of the edge\n        contact_width : int\n            the width of the contact\n        gt_buildings_csv : str\n            path to the source ground-truth-buildings csv\n    \"\"\"", "\n", "gt_buildings", "=", "pd", ".", "read_csv", "(", "gt_buildings_csv", ")", "\n", "image_name", "=", "os", ".", "path", ".", "basename", "(", "image_path", ")", "\n", "values", "=", "gt_buildings", "[", "\n", "(", "gt_buildings", "[", "\"ImageId\"", "]", "==", "\"_\"", ".", "join", "(", "image_name", ".", "split", "(", "\"_\"", ")", "[", "-", "4", ":", "]", ")", "[", ":", "-", "4", "]", ")", "\n", "]", "[", "[", "\"TileBuildingId\"", ",", "\"PolygonWKT_Pix\"", ",", "\"Mean_Building_Height\"", "]", "]", ".", "values", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "900", ",", "900", ")", ",", "dtype", "=", "\"uint16\"", ")", "\n", "heights", "=", "np", ".", "zeros", "(", "(", "900", ",", "900", ")", ",", "dtype", "=", "\"float\"", ")", "\n", "cur_lbl", "=", "0", "\n", "for", "i", "in", "range", "(", "values", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "poly", "=", "loads", "(", "values", "[", "i", ",", "1", "]", ")", "\n", "if", "not", "poly", ".", "is_empty", ":", "\n", "            ", "cur_lbl", "+=", "1", "\n", "msk", "=", "polygon_to_mask", "(", "poly", ",", "(", "900", ",", "900", ")", ")", "\n", "labels", "[", "msk", ">", "0", "]", "=", "cur_lbl", "\n", "if", "values", "[", "i", ",", "2", "]", "==", "values", "[", "i", ",", "2", "]", ":", "\n", "                ", "heights", "[", "msk", ">", "0", "]", "=", "values", "[", "i", ",", "2", "]", "\n", "", "", "", "msk", "=", "np", ".", "zeros", "(", "(", "900", ",", "900", ",", "3", ")", ",", "dtype", "=", "\"uint8\"", ")", "\n", "if", "cur_lbl", ">", "0", ":", "\n", "        ", "footprint_msk", "=", "labels", ">", "0", "\n", "border_msk", "=", "np", ".", "zeros_like", "(", "labels", ",", "dtype", "=", "\"bool\"", ")", "\n", "for", "l", "in", "range", "(", "1", ",", "labels", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "            ", "tmp_lbl", "=", "labels", "==", "l", "\n", "_k", "=", "square", "(", "edge_width", ")", "\n", "tmp", "=", "erosion", "(", "tmp_lbl", ",", "_k", ")", "\n", "tmp", "=", "tmp", "^", "tmp_lbl", "\n", "border_msk", "=", "border_msk", "|", "tmp", "\n", "", "tmp", "=", "dilation", "(", "labels", ">", "0", ",", "square", "(", "contact_width", ")", ")", "\n", "tmp2", "=", "watershed", "(", "tmp", ",", "labels", ",", "mask", "=", "tmp", ",", "watershed_line", "=", "True", ")", ">", "0", "\n", "tmp", "=", "tmp", "^", "tmp2", "\n", "tmp", "=", "tmp", "|", "border_msk", "\n", "tmp", "=", "dilation", "(", "tmp", ",", "square", "(", "contact_width", ")", ")", "\n", "contact_msk", "=", "np", ".", "zeros_like", "(", "labels", ",", "dtype", "=", "\"bool\"", ")", "\n", "for", "y0", "in", "range", "(", "labels", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "for", "x0", "in", "range", "(", "labels", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "if", "not", "tmp", "[", "y0", ",", "x0", "]", ":", "\n", "                    ", "continue", "\n", "", "if", "labels", "[", "y0", ",", "x0", "]", "==", "0", ":", "\n", "                    ", "sz", "=", "3", "\n", "", "else", ":", "\n", "                    ", "sz", "=", "1", "\n", "", "unique", "=", "np", ".", "unique", "(", "\n", "labels", "[", "\n", "max", "(", "0", ",", "y0", "-", "sz", ")", ":", "min", "(", "labels", ".", "shape", "[", "0", "]", ",", "y0", "+", "sz", "+", "1", ")", ",", "\n", "max", "(", "0", ",", "x0", "-", "sz", ")", ":", "min", "(", "labels", ".", "shape", "[", "1", "]", ",", "x0", "+", "sz", "+", "1", ")", ",", "\n", "]", "\n", ")", "\n", "if", "len", "(", "unique", "[", "unique", ">", "0", "]", ")", ">", "1", ":", "\n", "                    ", "contact_msk", "[", "y0", ",", "x0", "]", "=", "True", "\n", "", "", "", "msk", "=", "np", ".", "stack", "(", "\n", "(", "255", "*", "footprint_msk", ",", "255", "*", "border_msk", ",", "255", "*", "contact_msk", ")", "\n", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "msk", "=", "np", ".", "rollaxis", "(", "msk", ",", "0", ",", "3", ")", "\n", "", "io", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "segmentation_directory", ",", "image_name", ")", ",", "msk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.chactun.ChactunDataset.__init__": [[29, 35], ["base.BaseDataset.__init__", "chactun.ChactunDataset.load_dataset"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.load_dataset"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and split the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "masks", "=", "[", "]", "\n", "self", ".", "load_dataset", "(", "self", ".", "config", ".", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.chactun.ChactunDataset.__getitem__": [[36, 48], ["utils.image_loader", "numpy.zeros", "enumerate", "utils.image_invert", "chactun.ChactunDataset.transform", "chactun.ChactunDataset.target_transform", "len"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_invert"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "image_loader", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "\n", "shape", "=", "(", "len", "(", "self", ".", "masks", "[", "index", "]", ")", ",", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "float", "\n", ")", "\n", "for", "i", ",", "path", "in", "enumerate", "(", "self", ".", "masks", "[", "index", "]", ")", ":", "\n", "            ", "mask", "[", "i", "]", "=", "image_invert", "(", "path", ",", "True", ")", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.chactun.ChactunDataset.__len__": [[49, 51], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.chactun.ChactunDataset.load_dataset": [[52, 67], ["sorted", "ValueError", "os.walk", "enumerate", "sorted", "os.path.join", "chactun.ChactunDataset.images.append", "masks_for_image.append", "chactun.ChactunDataset.masks.append"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "data_dir", ")", ":", "\n", "        ", "if", "not", "self", ".", "labels", ":", "\n", "            ", "raise", "ValueError", "(", "\"You need to provide the list of labels for the dataset\"", ")", "\n", "\n", "", "masks_for_image", "=", "[", "]", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "data_dir", ")", ")", ":", "\n", "            ", "for", "i", ",", "fname", "in", "enumerate", "(", "sorted", "(", "fnames", ")", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "fname", ")", "\n", "if", "i", "%", "4", "==", "0", ":", "\n", "                    ", "self", ".", "images", ".", "append", "(", "path", ")", "\n", "masks_for_image", "=", "[", "]", "\n", "", "else", ":", "\n", "                    ", "masks_for_image", ".", "append", "(", "path", ")", "\n", "if", "i", "%", "4", "==", "3", ":", "\n", "                        ", "self", ".", "masks", ".", "append", "(", "masks_for_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.chactun.ChactunDataset.get_labels": [[68, 70], ["None"], "methods", ["None"], ["", "", "", "", "", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.chactun.ChactunDataset.show_image": [[71, 110], ["[].transpose", "enumerate", "matplotlib.figure", "matplotlib.figure.suptitle", "matplotlib.figure.legend", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.figure.tight_layout", "matplotlib.show", "legend_elements.append", "img_mask.append", "matplotlib.patches.Patch", "numpy.zeros", "numpy.where", "chactun.ChactunDataset.get_name", "tuple"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "self", "[", "index", "]", "[", "0", "]", "\n", "mask", "=", "self", "[", "index", "]", "[", "1", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "\n", "legend_elements", "=", "[", "]", "\n", "img_mask", "=", "[", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", ":", "\n", "            ", "legend_elements", ".", "append", "(", "\n", "Patch", "(", "\n", "facecolor", "=", "tuple", "(", "[", "x", "/", "255", "for", "x", "in", "self", ".", "color_mapping", "[", "i", "]", "]", ")", ",", "\n", "label", "=", "self", ".", "labels", "[", "i", "]", ",", "\n", ")", "\n", ")", "\n", "img_mask", ".", "append", "(", "np", ".", "zeros", "(", "[", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ",", "3", "]", ",", "np", ".", "uint8", ")", ")", "\n", "img_mask", "[", "i", "]", "[", "np", ".", "where", "(", "mask", "[", ":", ",", ":", ",", "i", "]", "==", "255", ")", "]", "=", "self", ".", "color_mapping", "[", "i", "]", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "8", ")", ")", "\n", "fig", ".", "suptitle", "(", "\n", "f\"Image and mask with index {index} from the dataset {self.get_name()}\\n\"", ",", "\n", "fontsize", "=", "16", ",", "\n", "y", "=", "1.006", ",", "\n", ")", "\n", "fig", ".", "legend", "(", "\n", "handles", "=", "legend_elements", ",", "bbox_to_anchor", "=", "[", "0.95", ",", "0.95", "]", ",", "loc", "=", "\"upper right\"", "\n", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "img_mask", "[", "0", "]", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "3", ")", "\n", "plt", ".", "imshow", "(", "img_mask", "[", "1", "]", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "subplot", "(", "2", ",", "2", ",", "4", ")", "\n", "plt", ".", "imshow", "(", "img_mask", "[", "2", "]", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "fig", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.airs.AIRSDataset.__init__": [[31, 37], ["base.BaseDataset.__init__", "airs.AIRSDataset.load_dataset"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.load_dataset"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and split the data", "\n", "        ", "BaseDataset", ".", "__init__", "(", "self", ",", "config", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "masks", "=", "[", "]", "\n", "self", ".", "load_dataset", "(", "self", ".", "config", ".", "data_dir", ",", "self", ".", "config", ".", "csv_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.airs.AIRSDataset.__getitem__": [[38, 48], ["utils.image_loader", "utils.image_loader", "numpy.stack().astype", "airs.AIRSDataset.transform", "airs.AIRSDataset.target_transform", "enumerate", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "image_loader", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "mask", "=", "image_loader", "(", "self", ".", "masks", "[", "index", "]", ",", "True", ")", "\n", "masks", "=", "[", "(", "mask", "==", "v", ")", "for", "v", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", "]", "\n", "mask", "=", "np", ".", "stack", "(", "masks", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.airs.AIRSDataset.__len__": [[49, 51], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.airs.AIRSDataset.load_dataset": [[52, 60], ["ValueError", "open", "csv.reader", "enumerate", "airs.AIRSDataset.images.append", "airs.AIRSDataset.masks.append", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "data_dir", ",", "csv_file", ")", ":", "\n", "        ", "if", "not", "self", ".", "labels", ":", "\n", "            ", "raise", "ValueError", "(", "\"You need to provide the list of labels for the dataset\"", ")", "\n", "", "with", "open", "(", "csv_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "csv_reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "index", ",", "row", "in", "enumerate", "(", "csv_reader", ")", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "row", "[", "0", "]", "+", "\".jpg\"", ")", ")", "\n", "self", ".", "masks", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "row", "[", "0", "]", "+", "\"_m.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.airs.AIRSDataset.get_labels": [[61, 63], ["None"], "methods", ["None"], ["", "", "", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.airs.AIRSDataset.show_image": [[64, 94], ["numpy.zeros", "enumerate", "matplotlib.figure", "matplotlib.figure.suptitle", "matplotlib.figure.legend", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.figure.tight_layout", "matplotlib.show", "legend_elements.append", "matplotlib.patches.Patch", "numpy.where", "airs.AIRSDataset.get_name", "tuple"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "self", "[", "index", "]", "[", "0", "]", "\n", "mask", "=", "self", "[", "index", "]", "[", "1", "]", "\n", "img_mask", "=", "np", ".", "zeros", "(", "[", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ",", "3", "]", ",", "np", ".", "uint8", ")", "\n", "legend_elements", "=", "[", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", ":", "\n", "            ", "legend_elements", ".", "append", "(", "\n", "Patch", "(", "\n", "facecolor", "=", "tuple", "(", "[", "x", "/", "255", "for", "x", "in", "self", ".", "color_mapping", "[", "i", "]", "]", ")", ",", "\n", "label", "=", "self", ".", "labels", "[", "i", "]", ",", "\n", ")", "\n", ")", "\n", "img_mask", "[", "np", ".", "where", "(", "mask", "[", ":", ",", ":", ",", "i", "]", "==", "1", ")", "]", "=", "self", ".", "color_mapping", "[", "i", "]", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "8", ")", ")", "\n", "fig", ".", "suptitle", "(", "\n", "f\"Image and mask with index {index} from the dataset {self.get_name()}\\n\"", ",", "\n", "fontsize", "=", "16", ",", "\n", "y", "=", "1.006", ",", "\n", ")", "\n", "fig", ".", "legend", "(", "handles", "=", "legend_elements", ",", "bbox_to_anchor", "=", "[", "0.5", ",", "0.85", "]", ",", "loc", "=", "\"center\"", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "img_mask", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "fig", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.massachusetts_buildings.MassachusettsBuildingsDataset.__init__": [[31, 37], ["base.BaseDataset.__init__", "massachusetts_buildings.MassachusettsBuildingsDataset.load_dataset"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.load_dataset"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and split the data", "\n", "        ", "BaseDataset", ".", "__init__", "(", "self", ",", "config", ")", "\n", "self", ".", "images", "=", "[", "]", "\n", "self", ".", "masks", "=", "[", "]", "\n", "self", ".", "load_dataset", "(", "self", ".", "config", ".", "data_dir", ",", "self", ".", "config", ".", "csv_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.massachusetts_buildings.MassachusettsBuildingsDataset.__getitem__": [[38, 48], ["utils.image_loader", "numpy.stack().astype", "utils.image_loader", "massachusetts_buildings.MassachusettsBuildingsDataset.transform", "massachusetts_buildings.MassachusettsBuildingsDataset.target_transform", "enumerate", "numpy.stack"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "image_loader", "(", "self", ".", "images", "[", "index", "]", ")", "\n", "mask", "=", "image_loader", "(", "self", ".", "masks", "[", "index", "]", ",", "True", ")", "/", "76", "\n", "masks", "=", "[", "(", "mask", "==", "v", ")", "for", "v", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", "]", "\n", "mask", "=", "np", ".", "stack", "(", "masks", ",", "axis", "=", "-", "1", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "            ", "mask", "=", "self", ".", "target_transform", "(", "mask", ")", "\n", "", "return", "image", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.massachusetts_buildings.MassachusettsBuildingsDataset.__len__": [[49, 51], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.massachusetts_buildings.MassachusettsBuildingsDataset.load_dataset": [[52, 60], ["ValueError", "open", "csv.reader", "enumerate", "massachusetts_buildings.MassachusettsBuildingsDataset.images.append", "massachusetts_buildings.MassachusettsBuildingsDataset.masks.append", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "data_dir", ",", "csv_file", ")", ":", "\n", "        ", "if", "not", "self", ".", "labels", ":", "\n", "            ", "raise", "ValueError", "(", "\"You need to provide the list of labels for the dataset\"", ")", "\n", "", "with", "open", "(", "csv_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "csv_reader", "=", "csv", ".", "reader", "(", "f", ")", "\n", "for", "index", ",", "row", "in", "enumerate", "(", "csv_reader", ")", ":", "\n", "                ", "self", ".", "images", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "row", "[", "0", "]", "+", "\".jpg\"", ")", ")", "\n", "self", ".", "masks", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "row", "[", "0", "]", "+", "\"_m.png\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.massachusetts_buildings.MassachusettsBuildingsDataset.get_labels": [[61, 63], ["None"], "methods", ["None"], ["", "", "", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.massachusetts_buildings.MassachusettsBuildingsDataset.show_image": [[64, 94], ["numpy.zeros", "enumerate", "matplotlib.figure", "matplotlib.figure.suptitle", "matplotlib.figure.legend", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.axis", "matplotlib.figure.tight_layout", "matplotlib.show", "legend_elements.append", "matplotlib.patches.Patch", "numpy.where", "massachusetts_buildings.MassachusettsBuildingsDataset.get_name", "tuple"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "self", "[", "index", "]", "[", "0", "]", "\n", "mask", "=", "self", "[", "index", "]", "[", "1", "]", "\n", "img_mask", "=", "np", ".", "zeros", "(", "[", "mask", ".", "shape", "[", "0", "]", ",", "mask", ".", "shape", "[", "1", "]", ",", "3", "]", ",", "np", ".", "uint8", ")", "\n", "legend_elements", "=", "[", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "labels", ")", ":", "\n", "            ", "legend_elements", ".", "append", "(", "\n", "Patch", "(", "\n", "facecolor", "=", "tuple", "(", "[", "x", "/", "255", "for", "x", "in", "self", ".", "color_mapping", "[", "i", "]", "]", ")", ",", "\n", "label", "=", "self", ".", "labels", "[", "i", "]", ",", "\n", ")", "\n", ")", "\n", "img_mask", "[", "np", ".", "where", "(", "mask", "[", ":", ",", ":", ",", "i", "]", "==", "1", ")", "]", "=", "self", ".", "color_mapping", "[", "i", "]", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "8", ")", ")", "\n", "fig", ".", "suptitle", "(", "\n", "f\"Image and mask with index {index} from the dataset {self.get_name()}\\n\"", ",", "\n", "fontsize", "=", "16", ",", "\n", "y", "=", "1.006", ",", "\n", ")", "\n", "fig", ".", "legend", "(", "handles", "=", "legend_elements", ",", "bbox_to_anchor", "=", "[", "0.5", ",", "0.85", "]", ",", "loc", "=", "\"center\"", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "imshow", "(", "img_mask", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "return", "fig", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.__init__": [[32, 40], ["base.BaseDataset.__init__", "sat6.SAT6Dataset.load_dataset"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.load_dataset"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "# load the data", "\n", "self", ".", "mode", "=", "self", ".", "config", ".", "mode", "\n", "self", ".", "csv_file", "=", "self", ".", "config", ".", "csv_file", "\n", "self", ".", "data", "=", "self", ".", "load_dataset", "(", "self", ".", "config", ".", "mat_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.__getitem__": [[41, 58], ["sat6.SAT6Dataset.transform", "sat6.SAT6Dataset.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "# load image", "\n", "img", "=", "self", ".", "data", "[", "index", "]", "[", "0", "]", "\n", "# apply transformations", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "target", "=", "self", ".", "data", "[", "index", "]", "[", "1", "]", "\n", "if", "self", ".", "target_transform", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "self", ".", "data", "[", "index", "]", "[", "1", "]", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.__len__": [[59, 61], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.get_labels": [[62, 64], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.data_distribution_table": [[65, 90], ["scipy.io.loadmat", "mat_data[].transpose", "list", "pandas.DataFrame", "pandas.DataFrame.groupby().count().reset_index", "list", "numpy.delete", "open", "csv.reader", "sorted", "range", "numpy.where", "enumerate", "pandas.DataFrame.groupby().count", "int", "len", "len", "list.pop", "pandas.DataFrame.groupby"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.count"], ["", "def", "data_distribution_table", "(", "self", ")", ":", "\n", "        ", "mat_data", "=", "scipy", ".", "io", ".", "loadmat", "(", "self", ".", "config", ".", "mat_file", ")", "\n", "img_labels", "=", "mat_data", "[", "f\"{self.mode}_y\"", "]", ".", "transpose", "(", ")", "\n", "\n", "indices", "=", "None", "\n", "if", "self", ".", "csv_file", ":", "\n", "            ", "with", "open", "(", "self", ".", "csv_file", ")", "as", "infile", ":", "\n", "                ", "data", "=", "csv", ".", "reader", "(", "infile", ")", "\n", "indices", "=", "[", "int", "(", "row", "[", "0", "]", ")", "for", "row", "in", "data", "]", "\n", "indices", "=", "sorted", "(", "indices", ",", "reverse", "=", "True", ")", "\n", "", "", "if", "indices", ":", "\n", "# generate list of indices", "\n", "            ", "indices_range", "=", "list", "(", "range", "(", "len", "(", "img_labels", ")", ")", ")", "\n", "for", "idx", "in", "indices", ":", "\n", "                ", "if", "idx", "<", "len", "(", "img_labels", ")", ":", "\n", "                    ", "indices_range", ".", "pop", "(", "idx", ")", "\n", "\n", "", "", "img_labels", "=", "np", ".", "delete", "(", "img_labels", ",", "indices_range", ",", "0", ")", "\n", "\n", "", "data", "=", "list", "(", "np", ".", "where", "(", "img_labels", "==", "1", ")", "[", "1", "]", ")", "\n", "res_list", "=", "[", "[", "i", ",", "self", ".", "labels", "[", "index", "]", "]", "for", "i", ",", "index", "in", "enumerate", "(", "data", ")", "]", "\n", "df", "=", "pd", ".", "DataFrame", "(", "res_list", ",", "columns", "=", "[", "\"id\"", ",", "\"Label\"", "]", ")", "\n", "label_count", "=", "df", ".", "groupby", "(", "\"Label\"", ")", ".", "count", "(", ")", ".", "reset_index", "(", ")", "\n", "label_count", ".", "columns", "=", "[", "\"Label\"", ",", "\"Count\"", "]", "\n", "return", "label_count", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.data_distribution_barchart": [[91, 99], ["sat6.SAT6Dataset.data_distribution_table", "matplotlib.subplots", "seaborn.barplot", "ax.set_title", "sat6.SAT6Dataset.get_name"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.data_distribution_table", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "data_distribution_barchart", "(", "self", ")", ":", "\n", "        ", "label_count", "=", "self", ".", "data_distribution_table", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "12", ",", "10", ")", ")", "\n", "sns", ".", "barplot", "(", "y", "=", "\"Label\"", ",", "x", "=", "\"Count\"", ",", "data", "=", "label_count", ",", "ax", "=", "ax", ")", "\n", "ax", ".", "set_title", "(", "\n", "\"Labels distribution for {}\"", ".", "format", "(", "self", ".", "get_name", "(", ")", ")", ",", "pad", "=", "20", ",", "fontsize", "=", "18", "\n", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.show_image": [[100, 110], ["matplotlib.figure", "matplotlib.title", "matplotlib.axis", "matplotlib.imshow", "sat6.SAT6Dataset.get_name"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "label", "=", "self", ".", "labels", "[", "self", "[", "index", "]", "[", "1", "]", "]", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "plt", ".", "title", "(", "\n", "f\"Image with index {index} from the dataset {self.get_name()}, with label {label}\\n\"", ",", "\n", "fontsize", "=", "14", ",", "\n", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "imshow", "(", "self", "[", "index", "]", "[", "0", "]", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.show_batch": [[111, 129], ["random.sample", "matplotlib.subplots", "zip", "figure.tight_layout", "ValueError", "range", "int", "figure.suptitle", "ax.flatten", "axes.imshow", "axes.set_title", "axes.set_xticks", "axes.set_yticks", "len", "sat6.SAT6Dataset.get_name", "int"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_batch", "(", "self", ",", "size", ",", "show_title", "=", "True", ")", ":", "\n", "        ", "if", "size", "%", "5", ":", "\n", "            ", "raise", "ValueError", "(", "\"The provided size should be divided by 5!\"", ")", "\n", "", "image_indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "self", ".", "data", ")", ")", ",", "size", ")", "\n", "figure", ",", "ax", "=", "plt", ".", "subplots", "(", "int", "(", "size", "/", "5", ")", ",", "5", ",", "figsize", "=", "(", "13.75", ",", "2.8", "*", "int", "(", "size", "/", "5", ")", ")", ")", "\n", "if", "show_title", ":", "\n", "            ", "figure", ".", "suptitle", "(", "\n", "\"Example images with labels from {}\"", ".", "format", "(", "self", ".", "get_name", "(", ")", ")", ",", "\n", "fontsize", "=", "32", ",", "\n", "y", "=", "1.006", ",", "\n", ")", "\n", "", "for", "axes", ",", "image_index", "in", "zip", "(", "ax", ".", "flatten", "(", ")", ",", "image_indices", ")", ":", "\n", "            ", "axes", ".", "imshow", "(", "self", "[", "image_index", "]", "[", "0", "]", ")", "\n", "axes", ".", "set_title", "(", "self", ".", "labels", "[", "self", "[", "image_index", "]", "[", "1", "]", "]", ",", "fontsize", "=", "18", ",", "pad", "=", "10", ")", "\n", "axes", ".", "set_xticks", "(", "[", "]", ")", "\n", "axes", ".", "set_yticks", "(", "[", "]", ")", "\n", "", "figure", ".", "tight_layout", "(", ")", "\n", "return", "figure", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.sat6.SAT6Dataset.load_dataset": [[130, 160], ["ValueError", "scipy.io.loadmat", "mat_data[].transpose", "mat_data[].transpose", "list", "open", "csv.reader", "sorted", "list", "numpy.delete", "numpy.delete", "zip", "int", "range", "len", "len", "list.pop", "numpy.where"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "mat_file", ")", ":", "\n", "        ", "if", "not", "self", ".", "labels", ":", "\n", "            ", "raise", "ValueError", "(", "\"You need to provide the list of labels for the dataset\"", ")", "\n", "\n", "", "indices", "=", "None", "\n", "if", "self", ".", "csv_file", ":", "\n", "            ", "with", "open", "(", "self", ".", "csv_file", ")", "as", "infile", ":", "\n", "                ", "data", "=", "csv", ".", "reader", "(", "infile", ")", "\n", "indices", "=", "[", "int", "(", "row", "[", "0", "]", ")", "for", "row", "in", "data", "]", "\n", "indices", "=", "sorted", "(", "indices", ",", "reverse", "=", "True", ")", "\n", "\n", "", "", "data", "=", "[", "]", "\n", "if", "mat_file", ":", "\n", "            ", "mat_data", "=", "scipy", ".", "io", ".", "loadmat", "(", "mat_file", ")", "\n", "images", "=", "mat_data", "[", "f\"{self.mode}_x\"", "]", ".", "transpose", "(", "3", ",", "0", ",", "1", ",", "2", ")", "\n", "img_labels", "=", "mat_data", "[", "f\"{self.mode}_y\"", "]", ".", "transpose", "(", ")", "\n", "\n", "if", "indices", ":", "\n", "# generate list of indices", "\n", "                ", "indices_range", "=", "list", "(", "range", "(", "len", "(", "images", ")", ")", ")", "\n", "for", "idx", "in", "indices", ":", "\n", "                    ", "if", "idx", "<", "len", "(", "images", ")", ":", "\n", "                        ", "indices_range", ".", "pop", "(", "idx", ")", "\n", "\n", "", "", "images", "=", "np", ".", "delete", "(", "images", ",", "indices_range", ",", "0", ")", "\n", "img_labels", "=", "np", ".", "delete", "(", "img_labels", ",", "indices_range", ",", "0", ")", "\n", "\n", "", "data", "=", "list", "(", "zip", "(", "images", "[", ":", ",", ":", ",", ":", ",", "0", ":", "3", "]", ",", "np", ".", "where", "(", "img_labels", "==", "1", ")", "[", "1", "]", ")", ")", "\n", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.__init__": [[22, 24], ["base.BaseDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.preprocess": [[25, 28], ["NotImplementedError"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"Please implement the `preprocess` method for your crop type classification dataset\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.__len__": [[30, 32], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.__getitem__": [[33, 59], ["crops_classification.CropsDataset.transform", "h5py.File", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (timeseries, target) where target is index of the target class.\n        \"\"\"", "\n", "row", "=", "self", ".", "index", ".", "iloc", "[", "index", "]", "\n", "\n", "h5path", "=", "self", ".", "h5path", "[", "row", ".", "region", "]", "\n", "if", "self", ".", "X_list", "is", "None", ":", "\n", "# Looks like this is what I need (load directly from file)", "\n", "            ", "with", "h5py", ".", "File", "(", "h5path", ",", "\"r\"", ")", "as", "dataset", ":", "\n", "                ", "X", "=", "np", ".", "array", "(", "dataset", "[", "(", "row", ".", "path", ")", "]", ")", "\n", "# print(row.path)", "\n", "", "", "else", ":", "\n", "            ", "X", "=", "self", ".", "X_list", "[", "index", "]", "\n", "\n", "# translate CODE_CULTU to class id", "\n", "", "y", "=", "self", ".", "mapping", ".", "loc", "[", "row", "[", "\"CODE_CULTU\"", "]", "]", ".", "id", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "X", ",", "y", "=", "self", ".", "transform", "(", "(", "X", ",", "y", ")", ")", "\n", "\n", "", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.get_labels": [[60, 62], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "index", ".", "classid", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.data_distribution_table": [[65, 74], ["crops_classification.CropsDataset.index[].groupby().count().reset_index", "crops_classification.CropsDataset.index[].groupby().count", "crops_classification.CropsDataset.index[].groupby"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.count"], ["", "def", "data_distribution_table", "(", "self", ")", ":", "\n", "        ", "label_count", "=", "(", "\n", "self", ".", "index", "[", "[", "\"id\"", ",", "\"region\"", ",", "\"classname\"", "]", "]", "\n", ".", "groupby", "(", "[", "\"classname\"", ",", "\"region\"", "]", ")", "\n", ".", "count", "(", ")", "\n", ".", "reset_index", "(", ")", "\n", ")", "\n", "label_count", ".", "columns", "=", "[", "\"Label\"", ",", "\"Region\"", ",", "\"Number of parcels\"", "]", "\n", "return", "label_count", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.parcel_distribution_table": [[75, 86], ["crops_classification.CropsDataset.index[].groupby().count().reset_index", "parcel_count.append.append.sum", "parcel_count.append.append.append", "crops_classification.CropsDataset.index[].groupby().count", "crops_classification.CropsDataset.index[].groupby"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.count"], ["", "def", "parcel_distribution_table", "(", "self", ")", ":", "\n", "# Figure 2 a) in the paper", "\n", "        ", "parcel_count", "=", "(", "\n", "self", ".", "index", "[", "[", "\"id\"", ",", "\"region\"", "]", "]", ".", "groupby", "(", "\"region\"", ")", ".", "count", "(", ")", ".", "reset_index", "(", ")", "\n", ")", "\n", "parcel_count", ".", "columns", "=", "[", "\"Region NUTS-3\"", ",", "\"# \"", "+", "self", ".", "config", ".", "level", "]", "\n", "total_row", "=", "parcel_count", ".", "sum", "(", "axis", "=", "0", ")", "\n", "total_row", "[", "\"Region NUTS-3\"", "]", "=", "\"Total\"", "\n", "\n", "parcel_count", "=", "parcel_count", ".", "append", "(", "total_row", ",", "ignore_index", "=", "True", ")", "\n", "return", "parcel_count", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.data_distribution_barchart": [[87, 97], ["crops_classification.CropsDataset.data_distribution_table", "matplotlib.subplots", "seaborn.barplot", "seaborn.barplot.set_xticklabels", "seaborn.barplot.set_yscale", "seaborn.barplot.get_xticklabels"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.data_distribution_table"], ["", "def", "data_distribution_barchart", "(", "self", ")", ":", "\n", "# Figure 2 b) in the paper", "\n", "        ", "label_count", "=", "self", ".", "data_distribution_table", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "12", ",", "10", ")", ")", "\n", "g", "=", "sns", ".", "barplot", "(", "\n", "x", "=", "\"Label\"", ",", "y", "=", "\"Number of parcels\"", ",", "hue", "=", "\"Region\"", ",", "data", "=", "label_count", ",", "ax", "=", "ax", "\n", ")", "\n", "g", ".", "set_xticklabels", "(", "g", ".", "get_xticklabels", "(", ")", ",", "rotation", "=", "30", ")", "\n", "g", ".", "set_yscale", "(", "\"log\"", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.show_samples": [[98, 100], ["crops_classification.CropsDataset.index.head"], "methods", ["None"], ["", "def", "show_samples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "index", ".", "head", "(", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.show_timeseries": [[101, 115], ["crops_classification.CropsDataset.__getitem__", "matplotlib.subplots", "ax.set_title", "ax.plot", "ax.legend", "ax.set_ylabel"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__getitem__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.visualizations.BaseDetailedVisualization.plot"], ["", "def", "show_timeseries", "(", "self", ",", "index", ")", ":", "\n", "# Figure 3 in the paper", "\n", "        ", "X", ",", "_", "=", "self", ".", "__getitem__", "(", "index", ")", "\n", "label", "=", "row", "=", "self", ".", "index", ".", "iloc", "[", "index", "]", ".", "loc", "[", "\"classname\"", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "ax", ".", "set_title", "(", "\n", "f\"Time series with index {index} from the region {self.index.iloc[index].loc['region']}, with label {label}\\n\"", ",", "\n", "fontsize", "=", "14", ",", "\n", ")", "\n", "ax", ".", "plot", "(", "X", ")", "\n", "ax", ".", "legend", "(", "self", ".", "selected_bands", "[", ":", "X", ".", "shape", "[", "1", "]", "]", ")", "\n", "ax", ".", "set_ylabel", "(", "\"\u03c1 \"", ")", "# x ${10^4}$", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.get_codes": [[116, 118], ["None"], "methods", ["None"], ["", "def", "get_codes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "codes", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.crops_classification.CropsDataset.load_classmapping": [[119, 137], ["pandas.read_csv().sort_values", "crops_classification.CropsDataset.mapping.set_index", "crops_classification.CropsDataset.mapping[].unique", "len", "os.path.exists", "logging.info", "logging.info", "pandas.read_csv", "crops_classification.CropsDataset.mapping.groupby().first", "crops_classification.CropsDataset.mapping.groupby"], "methods", ["None"], ["", "def", "load_classmapping", "(", "self", ",", "classmapping", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "classmapping", ")", ":", "\n", "            ", "if", "self", ".", "config", ".", "verbose", ":", "\n", "                ", "\"\"\"\n                TODOELENA: either add a url for our dataset or remove it for breizhcrops\n                \"\"\"", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "config", ".", "verbose", ":", "\n", "                ", "logging", ".", "info", "(", "f\"Found class mapping at {classmapping}\"", ")", "\n", "\n", "", "", "self", ".", "mapping", "=", "pd", ".", "read_csv", "(", "classmapping", ",", "index_col", "=", "0", ")", ".", "sort_values", "(", "by", "=", "\"id\"", ")", "\n", "self", ".", "mapping", "=", "self", ".", "mapping", ".", "set_index", "(", "\"code\"", ")", "\n", "self", ".", "classes", "=", "self", ".", "mapping", "[", "\"id\"", "]", ".", "unique", "(", ")", "\n", "self", ".", "classname", "=", "self", ".", "mapping", ".", "groupby", "(", "\"id\"", ")", ".", "first", "(", ")", ".", "classname", ".", "values", "\n", "self", ".", "klassenname", "=", "self", ".", "classname", "\n", "self", ".", "nclasses", "=", "len", "(", "self", ".", "classes", ")", "\n", "if", "self", ".", "config", ".", "verbose", ":", "\n", "            ", "logging", ".", "info", "(", "f\"read {self.nclasses} classes from {classmapping}\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.uc_merced.UcMercedDataset.__init__": [[34, 37], ["multiclass_classification.MultiClassClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.brazilian_coffee_scenes.prepare": [[23, 49], ["os.makedirs", "os.makedirs", "glob.glob", "x.index", "os.path.join", "os.path.join", "fold.split", "open", "f.readlines", "map", "shutil.rmtree", "shutil.move", "x[].strip", "brazilian_coffee_scenes.prepare.trans"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.map"], ["", "def", "prepare", "(", "root", ")", ":", "\n", "\n", "# remapping function", "\n", "    ", "def", "trans", "(", "x", ")", ":", "\n", "        ", "i", "=", "x", ".", "index", "(", "\".\"", ")", "\n", "return", "x", "[", ":", "i", "]", ",", "f\"{x[i + 1:].strip()}.jpg\"", "\n", "\n", "# create class folders", "\n", "", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"coffee\"", ")", ",", "exist_ok", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "root", ",", "\"noncoffee\"", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "# iterate folds", "\n", "folds", "=", "glob", ".", "glob", "(", "f\"{root}/*.txt\"", ")", "\n", "for", "fold", "in", "folds", ":", "\n", "        ", "fold_name", "=", "fold", ".", "split", "(", "\".txt\"", ")", "[", "0", "]", "\n", "with", "open", "(", "fold", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "for", "label", ",", "img", "in", "map", "(", "lambda", "x", ":", "trans", "(", "x", ")", ",", "lines", ")", ":", "\n", "# print(os.path.join(root, fold_name, img))", "\n", "# print(os.path.join(root, label, img))", "\n", "                ", "shutil", ".", "move", "(", "\n", "os", ".", "path", ".", "join", "(", "root", ",", "fold_name", ",", "img", ")", ",", "os", ".", "path", ".", "join", "(", "root", ",", "label", ",", "img", ")", "\n", ")", "\n", "\n", "", "", "if", "fold_name", "!=", "\"/\"", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "fold_name", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.mlrs_net.MLRSNetMultiLabelDataset.__init__": [[78, 81], ["multilabel_classification.MultiLabelClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.mlrs_net.prepare": [[85, 96], ["pandas.concat", "combined_csv[].str.replace", "pd.concat.to_csv", "glob.glob", "pandas.read_csv"], "function", ["None"], ["", "", "def", "prepare", "(", "root_folder", ")", ":", "\n", "    ", "all_csv_filenames", "=", "[", "\n", "i", "for", "i", "in", "glob", ".", "glob", "(", "\"{}{}/*.{}\"", ".", "format", "(", "root_folder", ",", "\"labels\"", ",", "\"csv\"", ")", ")", "\n", "]", "\n", "combined_csv", "=", "pd", ".", "concat", "(", "[", "pd", ".", "read_csv", "(", "f", ")", "for", "f", "in", "all_csv_filenames", "]", ")", "\n", "combined_csv", "[", "\"image\"", "]", "=", "combined_csv", "[", "\"image\"", "]", ".", "str", ".", "replace", "(", "\".jpg\"", ",", "\"\"", ",", "regex", "=", "False", ")", "\n", "combined_csv", ".", "to_csv", "(", "\n", "\"{}/multilabels.txt\"", ".", "format", "(", "root_folder", ")", ",", "\n", "index", "=", "False", ",", "\n", "sep", "=", "\"\\t\"", ",", "\n", "encoding", "=", "\"utf-8\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.so2sat.So2SatDataset.__init__": [[52, 58], ["base.BaseDataset.__init__", "h5py.File"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "file_path", "=", "self", ".", "config", ".", "h5_file", "\n", "self", ".", "data", "=", "h5py", ".", "File", "(", "\n", "self", ".", "file_path", "\n", ")", "# TODO: we should close this file eventually", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.so2sat.So2SatDataset.__getitem__": [[60, 75], ["[].astype", "numpy.clip().astype", "so2sat.So2SatDataset.transform", "so2sat.So2SatDataset.target_transform", "numpy.clip", "numpy.where"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "label", "=", "self", ".", "data", "[", "\"label\"", "]", "[", "index", "]", "\n", "\n", "# we are using sentinel 2 data only for now", "\n", "img", "=", "self", ".", "data", "[", "\"sen2\"", "]", "[", "index", "]", "[", ":", ",", ":", ",", "[", "2", ",", "1", ",", "0", "]", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# Calibration for the optical RGB channels of Sentinel-2 in this dataset.", "\n", "img", "=", "np", ".", "clip", "(", "img", "*", "3.5", "*", "255.0", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "            ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "return", "img", ",", "np", ".", "where", "(", "label", "==", "1.0", ")", "[", "0", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.so2sat.So2SatDataset.__len__": [[76, 78], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "\"label\"", "]", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.so2sat.So2SatDataset.get_labels": [[79, 81], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.so2sat.So2SatDataset.show_image": [[82, 92], ["matplotlib.figure", "matplotlib.title", "matplotlib.axis", "matplotlib.imshow", "so2sat.So2SatDataset.get_name"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "label", "=", "self", ".", "labels", "[", "self", "[", "index", "]", "[", "1", "]", "]", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "plt", ".", "title", "(", "\n", "f\"Image with index {index} from the dataset {self.get_name()}, with label {label}\\n\"", ",", "\n", "fontsize", "=", "14", ",", "\n", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "imshow", "(", "self", "[", "index", "]", "[", "0", "]", ")", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.so2sat.So2SatDataset.show_samples": [[93, 95], ["None"], "methods", ["None"], ["", "def", "show_samples", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "\"label\"", "]", "[", ":", "20", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.so2sat.So2SatDataset.show_batch": [[96, 114], ["random.sample", "matplotlib.subplots", "zip", "figure.tight_layout", "ValueError", "range", "int", "figure.suptitle", "ax.flatten", "axes.imshow", "axes.set_title", "axes.set_xticks", "axes.set_yticks", "len", "so2sat.So2SatDataset.get_name", "int"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "show_batch", "(", "self", ",", "size", ",", "show_title", "=", "True", ")", ":", "\n", "        ", "if", "size", "%", "5", ":", "\n", "            ", "raise", "ValueError", "(", "\"The provided size should be divided by 5!\"", ")", "\n", "", "image_indices", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "self", ".", "data", "[", "\"sen2\"", "]", ")", ")", ",", "size", ")", "\n", "figure", ",", "ax", "=", "plt", ".", "subplots", "(", "int", "(", "size", "/", "5", ")", ",", "5", ",", "figsize", "=", "(", "13.75", ",", "2.8", "*", "int", "(", "size", "/", "5", ")", ")", ")", "\n", "if", "show_title", ":", "\n", "            ", "figure", ".", "suptitle", "(", "\n", "\"Example images with labels from {}\"", ".", "format", "(", "self", ".", "get_name", "(", ")", ")", ",", "\n", "fontsize", "=", "32", ",", "\n", "y", "=", "1.006", ",", "\n", ")", "\n", "", "for", "axes", ",", "image_index", "in", "zip", "(", "ax", ".", "flatten", "(", ")", ",", "image_indices", ")", ":", "\n", "            ", "axes", ".", "imshow", "(", "self", "[", "image_index", "]", "[", "0", "]", ")", "# just show the RGB channel", "\n", "axes", ".", "set_title", "(", "self", ".", "labels", "[", "self", "[", "image_index", "]", "[", "1", "]", "]", ",", "fontsize", "=", "18", ",", "pad", "=", "10", ")", "\n", "axes", ".", "set_xticks", "(", "[", "]", ")", "\n", "axes", ".", "set_yticks", "(", "[", "]", ")", "\n", "", "figure", ".", "tight_layout", "(", ")", "\n", "return", "figure", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.so2sat.So2SatDataset.data_distribution_table": [[115, 121], ["numpy.sum", "pandas.DataFrame", "list", "zip"], "methods", ["None"], ["", "def", "data_distribution_table", "(", "self", ")", ":", "\n", "        ", "sums", "=", "np", ".", "sum", "(", "self", ".", "data", "[", "\"label\"", "]", ",", "axis", "=", "0", ")", "\n", "label_count", "=", "pd", ".", "DataFrame", "(", "\n", "list", "(", "zip", "(", "self", ".", "labels", ",", "sums", ")", ")", ",", "columns", "=", "[", "\"Label\"", ",", "\"Count\"", "]", "\n", ")", "\n", "return", "label_count", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.so2sat.So2SatDataset.data_distribution_barchart": [[122, 130], ["so2sat.So2SatDataset.data_distribution_table", "matplotlib.subplots", "seaborn.barplot", "ax.set_title", "so2sat.So2SatDataset.get_name"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.data_distribution_table", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "data_distribution_barchart", "(", "self", ")", ":", "\n", "        ", "label_count", "=", "self", ".", "data_distribution_table", "(", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "12", ",", "10", ")", ")", "\n", "sns", ".", "barplot", "(", "y", "=", "\"Label\"", ",", "x", "=", "\"Count\"", ",", "data", "=", "label_count", ",", "ax", "=", "ax", ")", "\n", "ax", ".", "set_title", "(", "\n", "\"Labels distribution for {}\"", ".", "format", "(", "self", ".", "get_name", "(", ")", ")", ",", "pad", "=", "20", ",", "fontsize", "=", "18", "\n", ")", "\n", "return", "fig", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.dfc15_multilabel.DFC15MultiLabelDataset.__init__": [[22, 25], ["multilabel_classification.MultiLabelClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.aid.AIDDataset.__init__": [[17, 20], ["multiclass_classification.MultiClassClassificationDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "# now call the constructor to validate the schema and load the data", "\n", "        ", "MultiClassClassificationDataset", ".", "__init__", "(", "self", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.predict.ImageFolderDataset.__init__": [[20, 37], ["base.BaseDataset.__init__", "predict.ImageFolderDataset.load_transforms", "os.path.expanduser", "sorted", "os.walk", "sorted", "predict.ImageFolderDataset.data.append", "predict.ImageFolderDataset.fnames.append", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.load_transforms"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "labels", ",", "transforms", ",", "batch_size", ")", ":", "\n", "        ", "BaseDataset", ".", "__init__", "(", "self", ",", "{", "}", ")", "\n", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "transform", "=", "self", ".", "load_transforms", "(", "transforms", ")", "\n", "self", ".", "shuffle", "=", "False", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "fnames", "=", "[", "]", "\n", "\n", "data_dir", "=", "os", ".", "path", ".", "expanduser", "(", "self", ".", "data_dir", ")", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "data_dir", ")", ")", ":", "\n", "            ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "                ", "self", ".", "data", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", ")", "\n", "self", ".", "fnames", ".", "append", "(", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.predict.ImageFolderDataset.__getitem__": [[38, 43], ["predict.ImageFolderDataset.transform", "utils.image_loader"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", "=", "self", ".", "data", "[", "index", "]", "\n", "return", "(", "\n", "self", ".", "transform", "(", "image_loader", "(", "img", ")", ")", ",", "\n", "0", ",", "\n", ")", "# returning `0` because we have no target", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.predict.ImageFolderDataset.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.predict.PredictTask.__init__": [[52, 59], ["base.BaseTask.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "model", ":", "BaseModel", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "config", ")", "\n", "\n", "self", ".", "data_dir", "=", "self", ".", "config", ".", "data_dir", "\n", "self", ".", "output_dir", "=", "self", ".", "config", ".", "output_dir", "\n", "self", ".", "output_file", "=", "self", ".", "config", ".", "output_file", "\n", "self", ".", "output_format", "=", "self", ".", "config", ".", "output_format", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.predict.PredictTask.run": [[60, 101], ["predict.ImageFolderDataset", "predict.PredictTask.model.load_model", "predict.PredictTask.model.predict", "predict.PredictTask.create_dataset", "predict.PredictTask.get_labels", "enumerate", "predict.PredictTask.export_predictions_to_csv", "os.path.join", "visualizations.display_image_labels"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.load_model", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.predict", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.create_dataset", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_labels", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.predict.PredictEOPatchTask.export_predictions_to_csv", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.classification.display_image_labels"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do something awesome here\"\"\"", "\n", "\n", "# load the configs", "\n", "if", "self", ".", "config", ".", "dataset_config", ":", "\n", "            ", "dataset", "=", "self", ".", "create_dataset", "(", "self", ".", "config", ".", "dataset_config", ")", "\n", "labels", "=", "dataset", ".", "get_labels", "(", ")", "\n", "transforms", "=", "dataset", ".", "config", ".", "transforms", "\n", "batch_size", "=", "dataset", ".", "config", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "labels", "=", "self", ".", "config", ".", "labels", "\n", "transforms", "=", "self", ".", "config", ".", "transforms", "\n", "batch_size", "=", "self", ".", "config", ".", "batch_size", "\n", "\n", "", "test_dataset", "=", "ImageFolderDataset", "(", "\n", "self", ".", "data_dir", ",", "labels", ",", "transforms", ",", "batch_size", ",", "\n", ")", "\n", "\n", "# load the model", "\n", "self", ".", "model", ".", "load_model", "(", "self", ".", "config", ".", "model_path", ")", "\n", "\n", "# run predictions", "\n", "y_true", ",", "y_pred", ",", "y_prob", "=", "self", ".", "model", ".", "predict", "(", "dataset", "=", "test_dataset", ",", ")", "\n", "\n", "if", "self", ".", "output_format", "==", "\"plot\"", ":", "\n", "            ", "for", "i", ",", "image_path", "in", "enumerate", "(", "test_dataset", ".", "data", ")", ":", "\n", "                ", "plot_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "output_dir", ",", "f\"{test_dataset.fnames[i]}_plot.png\"", "\n", ")", "\n", "# y_true, y_pred, y_prob, labels, file", "\n", "display_image_labels", "(", "\n", "image_path", ",", "\n", "y_true", "[", "i", "]", ",", "\n", "y_pred", "[", "i", "]", ",", "\n", "y_prob", "[", "i", "]", ",", "\n", "test_dataset", ".", "labels", ",", "\n", "plot_path", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "export_predictions_to_csv", "(", "\n", "self", ".", "output_file", ",", "test_dataset", ".", "fnames", ",", "y_prob", ",", "test_dataset", ".", "labels", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.predict.PredictTask.export_predictions_to_csv": [[103, 114], ["open", "csv.DictWriter", "csv.DictWriter.writeheader", "enumerate", "csv.DictWriter.writerow", "enumerate"], "methods", ["None"], ["", "", "def", "export_predictions_to_csv", "(", "self", ",", "file", ",", "fnames", ",", "probs", ",", "labels", ")", ":", "\n", "        ", "with", "open", "(", "file", ",", "\"w\"", ",", "newline", "=", "\"\"", ")", "as", "csvfile", ":", "\n", "            ", "fieldnames", "=", "[", "\"image\"", "]", "+", "labels", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ",", "delimiter", "=", "\";\"", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "\n", "for", "i", ",", "fname", "in", "enumerate", "(", "fnames", ")", ":", "\n", "                ", "obj", "=", "{", "label", ":", "probs", "[", "i", "]", "[", "j", "]", "for", "j", ",", "label", "in", "enumerate", "(", "labels", ")", "}", "\n", "obj", "[", "\"image\"", "]", "=", "fname", "\n", "\n", "writer", ".", "writerow", "(", "obj", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.predict.PredictSegmentationTask.__init__": [[119, 123], ["base.BaseTask.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "model", ":", "BaseModel", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "config", ")", "\n", "\n", "self", ".", "output_format", "=", "self", ".", "config", ".", "output_format", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.predict.PredictSegmentationTask.run": [[124, 170], ["predict.ImageFolderDataset", "predict.PredictSegmentationTask.model.load_model", "predict.PredictSegmentationTask.model.predict", "predict.PredictSegmentationTask.create_dataset", "predict.PredictSegmentationTask.get_labels", "enumerate", "enumerate", "os.path.join", "visualizations.display_image_segmentation", "os.path.join", "visualizations.save_predicted_masks", "os.path.splitext"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.load_model", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.predict", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.create_dataset", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_labels", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.segmentation.display_image_segmentation", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.segmentation.save_predicted_masks"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do something awesome here\"\"\"", "\n", "\n", "# load the configs", "\n", "if", "self", ".", "config", ".", "dataset_config", ":", "\n", "            ", "dataset", "=", "self", ".", "create_dataset", "(", "self", ".", "config", ".", "dataset_config", ")", "\n", "labels", "=", "dataset", ".", "get_labels", "(", ")", "\n", "transforms", "=", "dataset", ".", "config", ".", "transforms", "\n", "batch_size", "=", "dataset", ".", "config", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "labels", "=", "self", ".", "config", ".", "labels", "\n", "transforms", "=", "self", ".", "config", ".", "transforms", "\n", "batch_size", "=", "self", ".", "config", ".", "batch_size", "\n", "\n", "", "test_dataset", "=", "ImageFolderDataset", "(", "\n", "self", ".", "config", ".", "data_dir", ",", "labels", ",", "transforms", ",", "batch_size", ",", "\n", ")", "\n", "\n", "# load the model", "\n", "self", ".", "model", ".", "load_model", "(", "self", ".", "config", ".", "model_path", ")", "\n", "\n", "# run predictions", "\n", "y_true", ",", "y_pred", ",", "y_prob", "=", "self", ".", "model", ".", "predict", "(", "dataset", "=", "test_dataset", ",", ")", "\n", "\n", "if", "self", ".", "output_format", "==", "\"plot\"", ":", "\n", "# plot predictions", "\n", "            ", "for", "i", ",", "image_path", "in", "enumerate", "(", "test_dataset", ".", "data_dir", ")", ":", "\n", "                ", "plot_path", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "config", ".", "output_dir", ",", "f\"{test_dataset.fnames[i]}_plot.png\"", "\n", ")", "\n", "display_image_segmentation", "(", "\n", "image_path", ",", "\n", "y_true", "[", "i", "]", ",", "\n", "y_pred", "[", "i", "]", ",", "\n", "y_prob", "[", "i", "]", ",", "\n", "test_dataset", ".", "labels", ",", "\n", "plot_path", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "# save raw masks", "\n", "            ", "for", "i", ",", "image_path", "in", "enumerate", "(", "test_dataset", ".", "data_dir", ")", ":", "\n", "                ", "base_filepath_name", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "config", ".", "output_dir", ",", "os", ".", "path", ".", "splitext", "(", "test_dataset", ".", "fnames", "[", "i", "]", ")", "[", "0", "]", "\n", ")", "\n", "save_predicted_masks", "(", "\n", "y_pred", "[", "i", "]", ",", "test_dataset", ".", "labels", ",", "base_filepath_name", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.predict.PredictEOPatchTask.__init__": [[176, 182], ["base.BaseTask.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "model", ":", "BaseModel", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "config", ")", "\n", "\n", "self", ".", "dir", "=", "self", ".", "config", ".", "dir", "\n", "self", ".", "output_path", "=", "self", ".", "config", ".", "output_path", "# use this", "\n", "self", ".", "output_format", "=", "self", ".", "config", ".", "output_format", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.predict.PredictEOPatchTask.run": [[183, 222], ["predict.PredictEOPatchTask.model.load_model", "predict.PredictEOPatchTask.model.predict", "predict.PredictEOPatchTask.create_dataset", "predict.PredictEOPatchTask.get_labels", "ValueError", "os.path.isdir", "os.makedirs", "os.path.join", "os.scandir", "f.is_dir", "visualizations.display_eopatch_predictions"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.load_model", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.predict", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.create_dataset", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_labels", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.eopatch.display_eopatch_predictions"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do something awesome here\"\"\"", "\n", "\n", "# load the configs", "\n", "if", "self", ".", "config", ".", "dataset_config", ":", "\n", "            ", "dataset", "=", "self", ".", "create_dataset", "(", "self", ".", "config", ".", "dataset_config", ")", "\n", "labels", "=", "dataset", ".", "get_labels", "(", ")", "\n", "transforms", "=", "dataset", ".", "config", ".", "transforms", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Please provide a test dataset config.\"", ")", "\n", "\n", "", "test_dataset", "=", "dataset", "\n", "# load the model", "\n", "self", ".", "model", ".", "load_model", "(", "self", ".", "config", ".", "model_path", ")", "\n", "\n", "# run predictions", "\n", "y_true", ",", "y_pred", ",", "y_prob", "=", "self", ".", "model", ".", "predict", "(", "dataset", "=", "test_dataset", ",", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "output_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "output_path", ")", "\n", "\n", "", "if", "self", ".", "output_format", "==", "\"plot\"", ":", "\n", "# assume all eopatches in the test dataset are in the same \"eopatches\" folder", "\n", "            ", "eopatches_path", "=", "os", ".", "path", ".", "join", "(", "test_dataset", ".", "root", ",", "\"eopatches\"", ")", "\n", "test_index", "=", "test_dataset", ".", "index", "\n", "\n", "# this for should be in a separate function", "\n", "for", "f", "in", "os", ".", "scandir", "(", "eopatches_path", ")", ":", "# TODO: the dataset should return this", "\n", "                ", "if", "f", ".", "is_dir", "(", ")", ":", "\n", "                    ", "patch", "=", "f", ".", "name", "\n", "\n", "display_eopatch_predictions", "(", "\n", "eopatches_path", ",", "\n", "patch", ",", "\n", "y_pred", ",", "\n", "test_index", ",", "\n", "self", ".", "output_path", ",", "\n", "y_true", ",", "\n", "test_dataset", ".", "mapping", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.predict.PredictEOPatchTask.export_predictions_to_csv": [[224, 235], ["open", "csv.DictWriter", "csv.DictWriter.writeheader", "enumerate", "csv.DictWriter.writerow", "enumerate"], "methods", ["None"], ["", "", "", "", "def", "export_predictions_to_csv", "(", "self", ",", "file", ",", "fnames", ",", "probs", ",", "labels", ")", ":", "\n", "        ", "with", "open", "(", "file", ",", "\"w\"", ",", "newline", "=", "\"\"", ")", "as", "csvfile", ":", "\n", "            ", "fieldnames", "=", "[", "\"image\"", "]", "+", "labels", "\n", "writer", "=", "csv", ".", "DictWriter", "(", "csvfile", ",", "fieldnames", "=", "fieldnames", ",", "delimiter", "=", "\";\"", ")", "\n", "writer", ".", "writeheader", "(", ")", "\n", "\n", "for", "i", ",", "fname", "in", "enumerate", "(", "fnames", ")", ":", "\n", "                ", "obj", "=", "{", "label", ":", "probs", "[", "i", "]", "[", "j", "]", "for", "j", ",", "label", "in", "enumerate", "(", "labels", ")", "}", "\n", "obj", "[", "\"image\"", "]", "=", "fname", "\n", "\n", "writer", ".", "writerow", "(", "obj", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.evaluate.EvaluateTask.__init__": [[14, 16], ["base.BaseTask.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "model", ":", "BaseModel", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.evaluate.EvaluateTask.run": [[17, 30], ["evaluate.EvaluateTask.create_dataset", "evaluate.EvaluateTask.model.evaluate", "logging.info", "evaluate.EvaluateTask.model.report", "utils.stringify", "evaluate.EvaluateTask.get_labels", "evaluate.EvaluateTask.get_name", "evaluate.EvaluateTask.model.running_metrics.get_scores"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.create_dataset", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.evaluate", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.report", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.stringify", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_labels", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.get_scores"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Evaluate the dataset against a given model\"\"\"", "\n", "\n", "# load the dataset", "\n", "dataset", "=", "self", ".", "create_dataset", "(", "self", ".", "config", ".", "dataset_config", ")", "\n", "\n", "loss", "=", "self", ".", "model", ".", "evaluate", "(", "dataset", "=", "dataset", ",", "model_path", "=", "self", ".", "config", ".", "model_path", ")", "\n", "\n", "# log the metrics", "\n", "logging", ".", "info", "(", "stringify", "(", "self", ".", "model", ".", "running_metrics", ".", "get_scores", "(", "self", ".", "model", ".", "metrics", ")", ")", ")", "\n", "\n", "# generate a report", "\n", "self", ".", "model", ".", "report", "(", "dataset", ".", "get_labels", "(", ")", ",", "dataset", ".", "get_name", "(", ")", ",", "self", ".", "model", ".", "running_metrics", ",", "id", "=", "self", ".", "id", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.__init__": [[39, 43], ["base.BaseTask.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "model", ":", "BaseModel", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "config", ")", "\n", "self", ".", "data_dir", "=", "self", ".", "config", ".", "data_dir", "\n", "self", ".", "csv_file", "=", "self", ".", "config", ".", "csv_file", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.run": [[44, 56], ["logging.info", "split.BaseSplitTask.load_images", "logging.info", "numpy.array", "numpy.array", "split.BaseSplitTask.split", "logging.info"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.load_images", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Loading data...\"", ")", "\n", "self", ".", "images", "=", "self", ".", "load_images", "(", "self", ".", "data_dir", ",", "self", ".", "csv_file", ")", "\n", "\n", "logging", ".", "info", "(", "\"Making splits...\"", ")", "\n", "\n", "# load the images and labels", "\n", "self", ".", "X", "=", "np", ".", "array", "(", "[", "x", "[", "0", "]", "for", "x", "in", "self", ".", "images", "]", ")", "\n", "self", ".", "y", "=", "np", ".", "array", "(", "[", "y", "[", "1", "]", "for", "y", "in", "self", ".", "images", "]", ")", "\n", "\n", "self", ".", "split", "(", ")", "\n", "logging", ".", "info", "(", "\"And that's it!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.has_val": [[57, 59], ["None"], "methods", ["None"], ["", "def", "has_val", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "config", ".", "split", ".", "val", "and", "self", ".", "config", ".", "split", ".", "val", ".", "ratio", ">", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.is_split_valid": [[60, 65], ["split.BaseSplitTask.has_val"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.has_val"], ["", "def", "is_split_valid", "(", "self", ")", ":", "\n", "        ", "res", "=", "self", ".", "config", ".", "split", ".", "train", ".", "ratio", "+", "self", ".", "config", ".", "split", ".", "test", ".", "ratio", "\n", "if", "self", ".", "has_val", "(", ")", ":", "\n", "            ", "res", "+=", "self", ".", "config", ".", "split", ".", "val", ".", "ratio", "\n", "", "return", "res", "==", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split": [[66, 73], ["split.BaseSplitTask.make_splits", "split.BaseSplitTask.is_split_valid", "ValueError"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.make_splits", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.is_split_valid"], ["", "def", "split", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "is_split_valid", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The defined split is invalid. The sum should be equal to 100.\"", "\n", ")", "\n", "# split the dataset", "\n", "", "self", ".", "make_splits", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.save_split": [[74, 90], ["open", "zip", "f.close", "f.write", "f.write", "f.write", "isinstance", "img.rfind", "str", "img.rfind", "int"], "methods", ["None"], ["", "def", "save_split", "(", "self", ",", "X", ",", "y", ",", "file", ")", ":", "\n", "        ", "with", "open", "(", "file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "if", "self", ".", "is_multilabel", ":", "\n", "                ", "row", "=", "\"\\t\"", ".", "join", "(", "self", ".", "header", ")", "\n", "f", ".", "write", "(", "f\"{row}\\n\"", ")", "\n", "\n", "", "for", "xx", ",", "yy", "in", "zip", "(", "X", ",", "y", ")", ":", "\n", "                ", "if", "self", ".", "is_multilabel", ":", "\n", "# save in VOC format again", "\n", "                    ", "img", "=", "xx", "[", "0", "]", "if", "isinstance", "(", "xx", ",", "np", ".", "ndarray", ")", "else", "xx", "\n", "img", "=", "img", "[", "img", ".", "rfind", "(", "\"images\"", ")", "+", "7", ":", "img", ".", "rfind", "(", "\".\"", ")", "]", "\n", "row", "=", "\"\\t\"", ".", "join", "(", "[", "str", "(", "int", "(", "i", ")", ")", "for", "i", "in", "yy", "]", ")", "\n", "f", ".", "write", "(", "f\"{img}\\t{row}\\n\"", ")", "\n", "", "else", ":", "\n", "                    ", "f", ".", "write", "(", "f\"{xx},{yy}\\n\"", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.load_images": [[91, 116], ["utils.load_voc_format_dataset", "ValueError", "open", "f.readline().decode().strip().split", "utils.load_aitlas_format_dataset", "utils.load_folder_per_class_dataset", "f.readline().decode().strip", "f.readline().decode", "f.readline"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.load_voc_format_dataset", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.load_aitlas_format_dataset", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.load_folder_per_class_dataset"], ["", "", "def", "load_images", "(", "self", ",", "data_dir", ",", "csv_file", ",", "extensions", "=", "None", ")", ":", "\n", "        ", "\"\"\"Attempts to read in VOC format, then in internal format, then in folder per class format\"\"\"", "\n", "images", "=", "[", "]", "\n", "try", ":", "\n", "            ", "images", "=", "load_voc_format_dataset", "(", "data_dir", ",", "csv_file", ")", "\n", "\n", "# if this format is load, it's a multilabel dataset", "\n", "self", ".", "is_multilabel", "=", "True", "\n", "\n", "# read the header again. TODO: Maybe this can be a bit better implemented.", "\n", "with", "open", "(", "csv_file", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "header", "=", "f", ".", "readline", "(", ")", ".", "decode", "(", "\"utf-8\"", ")", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "\n", "", "", "except", "TypeError", ":", "# it's not in VOC format, then let's try aitlas (CSV) internal one", "\n", "            ", "if", "csv_file", "is", "not", "None", ":", "\n", "                ", "images", "=", "load_aitlas_format_dataset", "(", "csv_file", ")", "\n", "", "else", ":", "\n", "                ", "if", "not", "extensions", ":", "\n", "                    ", "extensions", "=", "self", ".", "extensions", "\n", "", "images", "=", "load_folder_per_class_dataset", "(", "data_dir", ",", "extensions", ")", "\n", "\n", "", "", "if", "not", "images", ":", "\n", "            ", "raise", "ValueError", "(", "\"No images were found!\"", ")", "\n", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.make_splits": [[117, 140], ["float", "split.BaseSplitTask.perform_split", "split.BaseSplitTask.has_val", "split.BaseSplitTask.save_split", "split.BaseSplitTask.save_split", "float", "split.BaseSplitTask.perform_split", "split.BaseSplitTask.save_split"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.StratifiedSplitTask.perform_split", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.has_val", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.save_split", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.save_split", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.StratifiedSplitTask.perform_split", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.save_split"], ["", "def", "make_splits", "(", "self", ")", ":", "\n", "# load paths and labels", "\n", "        ", "test_size", "=", "float", "(", "self", ".", "config", ".", "split", ".", "test", ".", "ratio", "/", "100", ")", "\n", "\n", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "self", ".", "perform_split", "(", "self", ".", "X", ",", "self", ".", "y", ",", "test_size", ")", "\n", "\n", "# if there is a validation split, perform that as well", "\n", "if", "self", ".", "has_val", "(", ")", ":", "\n", "            ", "val_size", "=", "float", "(", "\n", "self", ".", "config", ".", "split", ".", "val", ".", "ratio", "\n", "/", "(", "self", ".", "config", ".", "split", ".", "val", ".", "ratio", "+", "self", ".", "config", ".", "split", ".", "train", ".", "ratio", ")", "\n", ")", "\n", "\n", "X_train", ",", "y_train", ",", "X_val", ",", "y_val", "=", "self", ".", "perform_split", "(", "\n", "X_train", ",", "y_train", ",", "val_size", "\n", ")", "\n", "\n", "# save split", "\n", "self", ".", "save_split", "(", "X_val", ",", "y_val", ",", "self", ".", "config", ".", "split", ".", "val", ".", "file", ")", "\n", "\n", "# save the other splits", "\n", "", "self", ".", "save_split", "(", "X_train", ",", "y_train", ",", "self", ".", "config", ".", "split", ".", "train", ".", "file", ")", "\n", "self", ".", "save_split", "(", "X_test", ",", "y_test", ",", "self", ".", "config", ".", "split", ".", "test", ".", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.perform_split": [[141, 143], ["None"], "methods", ["None"], ["", "def", "perform_split", "(", "self", ",", "X", ",", "y", ",", "test_size", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.RandomSplitTask.perform_split": [[148, 169], ["len", "int", "int", "torch.utils.data.random_split", "math.ceil", "range", "X_train.append", "y_train.append", "X_test.append", "y_test.append"], "methods", ["None"], ["def", "perform_split", "(", "self", ",", "X", ",", "y", ",", "test_size", ")", ":", "\n", "        ", "\"\"\"Peform actual split using pytorch random split\"\"\"", "\n", "size", "=", "len", "(", "X", ")", "\n", "train_num", "=", "int", "(", "math", ".", "ceil", "(", "size", "*", "(", "1", "-", "test_size", ")", ")", ")", "\n", "test_num", "=", "int", "(", "size", "*", "test_size", ")", "\n", "\n", "arr_num", "=", "[", "train_num", ",", "test_num", "]", "\n", "\n", "train_split", ",", "test_split", "=", "random_split", "(", "range", "(", "size", ")", ",", "arr_num", ")", "\n", "\n", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", "in", "train_split", ":", "\n", "            ", "X_train", ".", "append", "(", "X", "[", "i", "]", ")", "\n", "y_train", ".", "append", "(", "y", "[", "i", "]", ")", "\n", "\n", "", "for", "i", "in", "test_split", ":", "\n", "            ", "X_test", ".", "append", "(", "X", "[", "i", "]", ")", "\n", "y_test", ".", "append", "(", "y", "[", "i", "]", ")", "\n", "\n", "", "return", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.StratifiedSplitTask.perform_split": [[174, 190], ["X.reshape.reshape.reshape", "skmultilearn.model_selection.iterative_train_test_split", "sklearn.model_selection.train_test_split"], "methods", ["None"], ["def", "perform_split", "(", "self", ",", "X", ",", "y", ",", "test_size", ")", ":", "\n", "        ", "\"\"\"Perform the actual split using sklearn or skmultilearn\"\"\"", "\n", "\n", "# check if multilabel or multiclass dataset", "\n", "if", "self", ".", "is_multilabel", ":", "\n", "            ", "X", "=", "X", ".", "reshape", "(", "X", ".", "shape", "[", "0", "]", ",", "1", ")", "# it needs this reshape for the split to work", "\n", "\n", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "iterative_train_test_split", "(", "\n", "X", ",", "y", ",", "test_size", "=", "test_size", "\n", ")", "\n", "", "else", ":", "\n", "            ", "X_train", ",", "X_test", ",", "y_train", ",", "y_test", "=", "train_test_split", "(", "\n", "X", ",", "y", ",", "test_size", "=", "test_size", ",", "stratify", "=", "y", "\n", ")", "\n", "\n", "", "return", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.extract_features.ExtractFeaturesTask.__init__": [[19, 25], ["base.BaseTask.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "model", ":", "BaseModel", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "config", ")", "\n", "\n", "self", ".", "data_dir", "=", "self", ".", "config", ".", "data_dir", "\n", "self", ".", "output_dir", "=", "self", ".", "config", ".", "output_dir", "\n", "self", ".", "transforms", "=", "self", ".", "config", ".", "transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.extract_features.ExtractFeaturesTask.run": [[26, 64], ["torch.device", "extract_features.ExtractFeaturesTask.model.extract_features", "extract_features.ExtractFeaturesTask.model.allocate_device", "extract_features.ExtractFeaturesTask.model.eval", "logging.info", "extract_features.ExtractFeaturesTask.model.load_model", "torch.no_grad", "os.path.expanduser", "sorted", "torch.cuda.is_available", "os.walk", "sorted", "os.path.join", "utils.image_loader", "extract_features.ExtractFeaturesTask.model", "numpy.savetxt", "input.unsqueeze", "feats.cpu.cpu.cpu", "os.path.join", "feats.cpu.cpu.numpy().flatten", "base.load_transforms", "feats.cpu.cpu.numpy"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.extract_features", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.allocate_device", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.load_model", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.image_loader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.load_transforms"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do something awesome here\"\"\"", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "# set the model to extract feature only", "\n", "self", ".", "model", ".", "extract_features", "(", ")", "\n", "\n", "# load the model from disk if specified", "\n", "if", "self", ".", "config", ".", "model_path", ":", "\n", "            ", "self", ".", "model", ".", "load_model", "(", "self", ".", "config", ".", "model_path", ")", "\n", "\n", "# allocate device", "\n", "", "self", ".", "model", ".", "allocate_device", "(", ")", "\n", "\n", "# set model in eval model", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "# run through the directory", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "data_dir", "=", "os", ".", "path", ".", "expanduser", "(", "self", ".", "data_dir", ")", "\n", "for", "root", ",", "_", ",", "fnames", "in", "sorted", "(", "os", ".", "walk", "(", "data_dir", ")", ")", ":", "\n", "                ", "for", "fname", "in", "sorted", "(", "fnames", ")", ":", "\n", "                    ", "full_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "fname", ")", "\n", "img", "=", "image_loader", "(", "full_path", ")", "\n", "input", "=", "load_transforms", "(", "self", ".", "transforms", ",", "self", ".", "config", ")", "(", "img", ")", ".", "to", "(", "\n", "device", "\n", ")", "\n", "feats", "=", "self", ".", "model", "(", "input", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "# move the features to cpu if not there", "\n", "if", "device", "!=", "\"cpu\"", ":", "\n", "                        ", "feats", "=", "feats", ".", "cpu", "(", ")", "\n", "\n", "", "np", ".", "savetxt", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "output_dir", ",", "f\"{fname}.feat\"", ")", ",", "feats", ".", "numpy", "(", ")", ".", "flatten", "(", ")", ",", "\n", ")", "\n", "\n", "", "", "", "logging", ".", "info", "(", "f\"And that's it! The features are in {self.output_dir}\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.train.TrainTask.__init__": [[17, 19], ["base.BaseTask.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "model", ":", "BaseModel", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.train.TrainTask.run": [[20, 35], ["train.TrainTask.create_dataset", "train.TrainTask.prepare", "train.TrainTask.model.train_model"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.create_dataset", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.prepare", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.train_model"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do something awesome here\"\"\"", "\n", "dataset", "=", "self", ".", "create_dataset", "(", "self", ".", "config", ".", "dataset_config", ")", "\n", "\n", "dataset", ".", "prepare", "(", ")", "\n", "\n", "self", ".", "model", ".", "train_model", "(", "\n", "train_dataset", "=", "dataset", ",", "\n", "epochs", "=", "self", ".", "config", ".", "epochs", ",", "\n", "model_directory", "=", "self", ".", "config", ".", "model_directory", ",", "\n", "save_epochs", "=", "self", ".", "config", ".", "save_epochs", ",", "\n", "resume_model", "=", "self", ".", "config", ".", "resume_model", ",", "\n", "run_id", "=", "self", ".", "id", ",", "\n", "iterations_log", "=", "self", ".", "config", ".", "iterations_log", ",", "\n", "metrics", "=", "self", ".", "model", ".", "metrics", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.train.TrainAndEvaluateTask.__init__": [[41, 43], ["base.BaseTask.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "model", ":", "BaseModel", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.train.TrainAndEvaluateTask.run": [[44, 59], ["train.TrainAndEvaluateTask.create_dataset", "train.TrainAndEvaluateTask.create_dataset", "train.TrainAndEvaluateTask.model.train_and_evaluate_model"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.create_dataset", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.create_dataset", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.train_and_evaluate_model"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do something awesome here\"\"\"", "\n", "train_dataset", "=", "self", ".", "create_dataset", "(", "self", ".", "config", ".", "train_dataset_config", ")", "\n", "val_dataset", "=", "self", ".", "create_dataset", "(", "self", ".", "config", ".", "val_dataset_config", ")", "\n", "\n", "self", ".", "model", ".", "train_and_evaluate_model", "(", "\n", "train_dataset", "=", "train_dataset", ",", "\n", "val_dataset", "=", "val_dataset", ",", "\n", "epochs", "=", "self", ".", "config", ".", "epochs", ",", "\n", "model_directory", "=", "self", ".", "config", ".", "model_directory", ",", "\n", "save_epochs", "=", "self", ".", "config", ".", "save_epochs", ",", "\n", "resume_model", "=", "self", ".", "config", ".", "resume_model", ",", "\n", "run_id", "=", "self", ".", "id", ",", "\n", "iterations_log", "=", "self", ".", "config", ".", "iterations_log", ",", "\n", "metrics", "=", "self", ".", "model", ".", "metrics", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.train.OptimizeTask.__init__": [[103, 105], ["base.BaseTask.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "model", ":", "BaseModel", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.train.OptimizeTask.run": [[106, 161], ["logging.info", "train.OptimizeTask.create_dataset", "train.OptimizeTask.create_dataset", "train.generate_parameters", "os.path.join", "enumerate", "logging.info", "shutil.copyfile", "logging.info", "logging.info", "train.OptimizeTask.model.train_and_evaluate_model", "os.path.isdir", "os.makedirs", "sorted", "os.path.join", "setattr", "filter", "os.listdir", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.create_dataset", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.create_dataset", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.train.generate_parameters", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.train_and_evaluate_model"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do something awesome here\"\"\"", "\n", "logging", ".", "info", "(", "f\"Searching parameters\"", ")", "\n", "train_dataset", "=", "self", ".", "create_dataset", "(", "self", ".", "config", ".", "train_dataset_config", ")", "\n", "val_dataset", "=", "self", ".", "create_dataset", "(", "self", ".", "config", ".", "val_dataset_config", ")", "\n", "\n", "parameters", "=", "generate_parameters", "(", "self", ".", "config", ".", "method", ",", "self", ".", "config", ".", "parameters", ")", "\n", "\n", "best_parameters", "=", "None", "\n", "best_run_id", "=", "None", "\n", "best_model_output_directory", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "model_directory", ",", "\"best\"", ")", "\n", "best_loss", "=", "None", "\n", "loss", "=", "0", "\n", "\n", "for", "i", ",", "parameter_set", "in", "enumerate", "(", "parameters", ")", ":", "\n", "            ", "logging", ".", "info", "(", "f\"Testing {i} for parameters: {parameter_set}\"", ")", "\n", "run_id", "=", "f\"{self.id}-{i}\"", "\n", "\n", "for", "parameter", "in", "parameter_set", ":", "\n", "                ", "setattr", "(", "self", ".", "model", ".", "config", ",", "parameter", "[", "\"name\"", "]", ",", "parameter", "[", "\"value\"", "]", ")", "\n", "\n", "", "loss", "=", "self", ".", "model", ".", "train_and_evaluate_model", "(", "\n", "train_dataset", "=", "train_dataset", ",", "\n", "val_dataset", "=", "val_dataset", ",", "\n", "epochs", "=", "self", ".", "config", ".", "epochs", ",", "\n", "model_directory", "=", "self", ".", "config", ".", "model_directory", ",", "\n", "save_epochs", "=", "self", ".", "config", ".", "epochs", ",", "\n", "run_id", "=", "run_id", ",", "\n", "iterations_log", "=", "100", ",", "\n", "metrics", "=", "self", ".", "model", ".", "metrics", ",", "\n", ")", "\n", "\n", "if", "not", "best_loss", "or", "loss", "<", "best_loss", ":", "\n", "                ", "best_loss", "=", "loss", "\n", "best_parameters", "=", "parameter_set", "\n", "best_run_id", "=", "run_id", "\n", "\n", "", "", "logging", ".", "info", "(", "f\"Best parameters: {best_parameters}\"", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "best_model_output_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "best_model_output_directory", ")", "\n", "\n", "", "checkpoint", "=", "sorted", "(", "\n", "filter", "(", "\n", "lambda", "x", ":", "\"checkpoint\"", "in", "x", ",", "\n", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "model_directory", ",", "best_run_id", ")", ")", ",", "\n", ")", ",", "\n", "reverse", "=", "True", ",", "\n", ")", "[", "0", "]", "\n", "\n", "copyfile", "(", "\n", "checkpoint", ",", "os", ".", "path", ".", "join", "(", "best_model_output_directory", ",", "\"checkpoint.pth.tar\"", ")", "\n", ")", "\n", "logging", ".", "info", "(", "\n", "f\"Best models saved at: {os.path.join(best_model_output_directory, 'checkpoint.pth.tar')}\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.train.generate_parameters_for_range": [[62, 75], ["numpy.arange", "numpy.random.uniform", "ValueError"], "function", ["None"], ["", "", "def", "generate_parameters_for_range", "(", "method", ",", "parameter", ")", ":", "\n", "    ", "if", "method", "==", "\"grid\"", ":", "\n", "        ", "return", "np", ".", "arange", "(", "\n", "parameter", ".", "min", ",", "\n", "parameter", ".", "max", ",", "\n", "(", "parameter", ".", "max", "-", "parameter", ".", "min", ")", "/", "parameter", ".", "steps", ",", "\n", ")", "\n", "", "elif", "method", "==", "\"random\"", ":", "\n", "        ", "return", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "parameter", ".", "min", ",", "high", "=", "parameter", ".", "max", ",", "size", "=", "(", "parameter", ".", "steps", ",", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Incorrect parameter search method!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.train.generate_parameters": [[77, 94], ["numpy.array().T.reshape", "train.generate_parameters_for_range", "values.append", "len", "enumerate", "parameter_set.append", "numpy.array", "numpy.meshgrid"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.train.generate_parameters_for_range"], ["", "", "def", "generate_parameters", "(", "method", ",", "parameters", ")", ":", "\n", "    ", "\"\"\"Generate parameters to search\"\"\"", "\n", "names", "=", "[", "parameter", ".", "name", "for", "parameter", "in", "parameters", "]", "\n", "\n", "values", "=", "[", "]", "\n", "for", "parameter", "in", "parameters", ":", "\n", "        ", "ranges", "=", "generate_parameters_for_range", "(", "method", ",", "parameter", ")", "\n", "values", ".", "append", "(", "ranges", ")", "\n", "\n", "", "total", "=", "np", ".", "array", "(", "np", ".", "meshgrid", "(", "*", "values", ")", ")", ".", "T", ".", "reshape", "(", "-", "1", ",", "len", "(", "parameters", ")", ")", "\n", "\n", "for", "row", "in", "total", ":", "\n", "        ", "parameter_set", "=", "[", "]", "\n", "for", "i", ",", "name", "in", "enumerate", "(", "names", ")", ":", "\n", "            ", "parameter_set", ".", "append", "(", "{", "\"name\"", ":", "name", ",", "\"value\"", ":", "row", "[", "i", "]", "}", ")", "\n", "\n", "", "yield", "parameter_set", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.prepare.PrepareTask.__init__": [[15, 17], ["base.BaseTask.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "model", ":", "BaseModel", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.prepare.PrepareTask.run": [[18, 25], ["prepare.PrepareTask.create_dataset", "prepare.PrepareTask.prepare", "logging.info"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.create_dataset", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.prepare"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Do some offline preparation\"\"\"", "\n", "\n", "dataset", "=", "self", ".", "create_dataset", "(", "self", ".", "config", ".", "dataset_config", ")", "\n", "dataset", ".", "prepare", "(", ")", "\n", "\n", "logging", ".", "info", "(", "\"And that's it!\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.visualize.VisualizeTask.__init__": [[17, 19], ["base.BaseTask.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "model", ":", "BaseModel", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.visualize.VisualizeTask.get_distribution_for_split": [[20, 30], ["visualize.VisualizeTask.create_dataset", "visualize.VisualizeTask.data_distribution_table", "visualize.VisualizeTask.get_name"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.create_dataset", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.data_distribution_table", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name"], ["", "def", "get_distribution_for_split", "(", "self", ",", "split", ",", "split_type", ")", ":", "\n", "        ", "if", "split", ":", "\n", "            ", "dataset", "=", "self", ".", "create_dataset", "(", "split", ")", "\n", "\n", "df", "=", "dataset", ".", "data_distribution_table", "(", ")", "\n", "df", "[", "\"Split\"", "]", "=", "split_type", "\n", "\n", "return", "df", ",", "dataset", ".", "get_name", "(", ")", "\n", "\n", "", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.visualize.VisualizeTask.get_distribution": [[31, 56], ["visualize.VisualizeTask.get_distribution_for_split", "visualize.VisualizeTask.get_distribution_for_split", "visualize.VisualizeTask.get_distribution_for_split", "pandas.concat", "matplotlib.subplots", "seaborn.barplot", "ax.set_title"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.visualize.VisualizeTask.get_distribution_for_split", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.visualize.VisualizeTask.get_distribution_for_split", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.visualize.VisualizeTask.get_distribution_for_split"], ["", "def", "get_distribution", "(", "self", ")", ":", "\n", "# load the datasets and distributions", "\n", "        ", "train", ",", "train_name", "=", "self", ".", "get_distribution_for_split", "(", "\n", "self", ".", "config", ".", "split", ".", "train", ",", "\"Train\"", "\n", ")", "\n", "val", ",", "val_name", "=", "self", ".", "get_distribution_for_split", "(", "self", ".", "config", ".", "split", ".", "val", ",", "\"Val\"", ")", "\n", "test", ",", "test_name", "=", "self", ".", "get_distribution_for_split", "(", "\n", "self", ".", "config", ".", "split", ".", "test", ",", "\"Test\"", "\n", ")", "\n", "\n", "name", "=", "(", "\n", "train_name", "\n", "if", "train_name", "\n", "else", "test_name", "\n", "if", "test_name", "\n", "else", "val_name", "\n", "if", "val_name", "\n", "else", "\"\"", "\n", ")", "\n", "\n", "label_count", "=", "pd", ".", "concat", "(", "[", "train", ",", "val", ",", "test", "]", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "12", ",", "10", ")", ")", "\n", "sns", ".", "barplot", "(", "y", "=", "\"Label\"", ",", "x", "=", "\"Count\"", ",", "hue", "=", "\"Split\"", ",", "data", "=", "label_count", ")", "\n", "ax", ".", "set_title", "(", "\"Image distribution for {}\"", ".", "format", "(", "name", ")", ",", "pad", "=", "20", ",", "fontsize", "=", "18", ")", "\n", "return", "fig", ",", "label_count", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.visualize.VisualizeTask.run": [[57, 77], ["logging.info", "visualize.VisualizeTask.get_distribution", "logging.info", "fig.savefig", "logging.info", "df.to_excel", "logging.info", "visualize.VisualizeTask.config.output_file.split"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.visualize.VisualizeTask.get_distribution", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Visualize the distribution of the dataset\"\"\"", "\n", "\n", "logging", ".", "info", "(", "\"Loading config...\"", ")", "\n", "\n", "fig", ",", "df", "=", "self", ".", "get_distribution", "(", ")", "\n", "\n", "output_xls", "=", "self", ".", "config", ".", "output_xls", "\n", "if", "not", "output_xls", ":", "\n", "            ", "output_xls", "=", "self", ".", "config", ".", "output_file", ".", "split", "(", "\".\"", ")", "[", "0", "]", "+", "\".xls\"", "\n", "\n", "", "logging", ".", "info", "(", "f\"Saving plot to {self.config.output_file}\"", ")", "\n", "\n", "fig", ".", "savefig", "(", "self", ".", "config", ".", "output_file", ",", "format", "=", "\"png\"", ")", "\n", "\n", "logging", ".", "info", "(", "f\"Saving excel to {output_xls}\"", ")", "\n", "\n", "df", ".", "to_excel", "(", "output_xls", ")", "\n", "\n", "logging", ".", "info", "(", "\"Done!\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.starrnn.StarRNN.__init__": [[31, 77], ["base.BaseMulticlassClassifier.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "starrnn.StarLayer", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "starrnn.StarLayer"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "d_model", "=", "self", ".", "config", ".", "num_layers", "*", "self", ".", "config", ".", "hidden_dims", "\n", "\n", "if", "self", ".", "config", ".", "use_layernorm", ":", "\n", "            ", "self", ".", "model", ".", "inlayernorm", "=", "nn", ".", "LayerNorm", "(", "self", ".", "config", ".", "input_dim", ")", "\n", "self", ".", "model", ".", "clayernorm", "=", "nn", ".", "LayerNorm", "(", "\n", "(", "\n", "self", ".", "config", ".", "hidden_dims", "\n", "+", "self", ".", "config", ".", "hidden_dims", "*", "self", ".", "config", ".", "bidirectional", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "model", ".", "block", "=", "torch", ".", "nn", ".", "Sequential", "(", "\n", "StarLayer", "(", "\n", "input_dim", "=", "self", ".", "config", ".", "input_dim", ",", "\n", "hidden_dim", "=", "self", ".", "config", ".", "hidden_dims", ",", "\n", "droput_factor", "=", "self", ".", "config", ".", "dropout", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", ")", ",", "\n", "*", "[", "\n", "StarLayer", "(", "\n", "input_dim", "=", "self", ".", "config", ".", "hidden_dims", ",", "\n", "hidden_dim", "=", "self", ".", "config", ".", "hidden_dims", ",", "\n", "droput_factor", "=", "self", ".", "config", ".", "dropout", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", ")", "\n", "]", "\n", "*", "(", "self", ".", "config", ".", "num_layers", "-", "1", ")", "\n", ")", "\n", "\n", "if", "self", ".", "config", ".", "bidirectional", ":", "\n", "            ", "hidden_dims", "=", "self", ".", "config", ".", "hidden_dims", "*", "2", "\n", "", "else", ":", "\n", "            ", "hidden_dims", "=", "self", ".", "config", ".", "hidden_dims", "\n", "\n", "", "self", ".", "model", ".", "linear_class", "=", "nn", ".", "Linear", "(", "\n", "hidden_dims", ",", "self", ".", "config", ".", "num_classes", ",", "bias", "=", "True", "\n", ")", "\n", "\n", "if", "self", ".", "config", ".", "use_batchnorm", ":", "\n", "            ", "if", "self", ".", "config", ".", "bidirectional", ":", "\n", "                ", "self", ".", "model", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "hidden_dims", "*", "2", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "model", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "hidden_dims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.starrnn.StarRNN._logits": [[78, 98], ["starrnn.StarRNN.model.block", "starrnn.StarRNN.model.linear_class.forward", "starrnn.StarRNN.model.inlayernorm", "starrnn.StarRNN.view().permute", "starrnn.StarRNN.model.bn().permute().view", "starrnn.StarRNN.model.clayernorm", "starrnn.StarRNN.view", "starrnn.StarRNN.model.bn().permute", "starrnn.StarRNN.model.bn"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.forward"], ["", "", "", "def", "_logits", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "use_layernorm", ":", "\n", "            ", "x", "=", "self", ".", "model", ".", "inlayernorm", "(", "x", ")", "\n", "\n", "", "outputs", "=", "self", ".", "model", ".", "block", "(", "x", ")", "\n", "\n", "if", "self", ".", "config", ".", "use_batchnorm", ":", "\n", "            ", "outputs", "=", "outputs", "[", ":", ",", "-", "1", ":", ",", ":", "]", "\n", "b", ",", "t", ",", "d", "=", "outputs", ".", "shape", "\n", "o_", "=", "outputs", ".", "view", "(", "b", ",", "-", "1", ",", "d", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "outputs", "=", "self", ".", "model", ".", "bn", "(", "o_", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ".", "view", "(", "b", ",", "t", ",", "d", ")", "\n", "\n", "", "h", "=", "outputs", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "\n", "if", "self", ".", "config", ".", "use_layernorm", ":", "\n", "            ", "h", "=", "self", ".", "model", ".", "clayernorm", "(", "h", ")", "\n", "\n", "", "logits", "=", "self", ".", "model", ".", "linear_class", ".", "forward", "(", "h", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.starrnn.StarRNN.forward": [[99, 105], ["starrnn.StarRNN._logits", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet._logits"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "self", ".", "_logits", "(", "x", ")", "\n", "\n", "logprobabilities", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "# stack the lists to new tensor (b,d,t,h,w)", "\n", "return", "logprobabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.starrnn.StarRNN.load_optimizer": [[106, 112], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "starrnn.StarRNN.model.parameters"], "methods", ["None"], ["", "def", "load_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load the optimizer\"\"\"", "\n", "return", "optim", ".", "Adam", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "learning_rate", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "weight_decay", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.starrnn.StarCell.__init__": [[116, 133], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "torch.orthogonal_", "starrnn.StarCell.x_K.bias.data.fill_", "starrnn.StarCell.x_z.bias.data.fill_"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "hidden_size", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "StarCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "x_K", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ",", "bias", "=", "bias", ")", "\n", "self", ".", "x_z", "=", "nn", ".", "Linear", "(", "input_size", ",", "hidden_size", ",", "bias", "=", "bias", ")", "\n", "self", ".", "h_K", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ",", "bias", "=", "bias", ")", "\n", "\n", "# self.reset_parameters()", "\n", "init", ".", "orthogonal_", "(", "self", ".", "x_K", ".", "weight", ")", "\n", "init", ".", "orthogonal_", "(", "self", ".", "x_z", ".", "weight", ")", "\n", "init", ".", "orthogonal_", "(", "self", ".", "h_K", ".", "weight", ")", "\n", "\n", "self", ".", "x_K", ".", "bias", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "self", ".", "x_z", ".", "bias", ".", "data", ".", "fill_", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.starrnn.StarCell.reset_parameters": [[134, 138], ["starrnn.StarCell.parameters", "math.sqrt", "w.data.uniform_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "std", "=", "1.0", "/", "math", ".", "sqrt", "(", "self", ".", "hidden_size", ")", "\n", "for", "w", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "w", ".", "data", ".", "uniform_", "(", "-", "std", ",", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.starrnn.StarCell.forward": [[139, 159], ["x.view.view.view", "starrnn.StarCell.x_K", "starrnn.StarCell.x_z", "starrnn.StarCell.h_K", "gate_x_K.squeeze.squeeze.squeeze", "gate_x_z.squeeze.squeeze.squeeze", "gate_h_K.squeeze.squeeze.squeeze", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "x.view.view.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "hidden", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "1", ")", ")", "\n", "\n", "gate_x_K", "=", "self", ".", "x_K", "(", "x", ")", "\n", "gate_x_z", "=", "self", ".", "x_z", "(", "x", ")", "\n", "gate_h_K", "=", "self", ".", "h_K", "(", "hidden", ")", "\n", "\n", "gate_x_K", "=", "gate_x_K", ".", "squeeze", "(", ")", "\n", "gate_x_z", "=", "gate_x_z", ".", "squeeze", "(", ")", "\n", "gate_h_K", "=", "gate_h_K", ".", "squeeze", "(", ")", "\n", "\n", "# K_gain = torch.sigmoid(gate_x_K + gate_h_K + self.bias_K )", "\n", "K_gain", "=", "torch", ".", "sigmoid", "(", "gate_x_K", "+", "gate_h_K", ")", "\n", "z", "=", "torch", ".", "tanh", "(", "gate_x_z", ")", "\n", "\n", "h_new", "=", "K_gain", "*", "hidden", "+", "(", "1", "-", "K_gain", ")", "*", "z", "\n", "# h_new = hidden + K_gain * ( z - hidden)", "\n", "h_new", "=", "torch", ".", "tanh", "(", "h_new", ")", "\n", "\n", "return", "h_new", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.starrnn.StarLayer.__init__": [[162, 188], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "starrnn.StarCell", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", ",", "\n", "hidden_dim", ",", "\n", "bias", "=", "True", ",", "\n", "droput_factor", "=", "0.2", ",", "\n", "batch_norm", "=", "True", ",", "\n", "layer_norm", "=", "False", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:0\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", "StarLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "# Hidden dimensions", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "cell", "=", "StarCell", "(", "input_dim", ",", "hidden_dim", ",", "bias", ")", "\n", "self", ".", "droput_factor", "=", "droput_factor", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "layer_norm", "=", "layer_norm", "\n", "\n", "if", "self", ".", "droput_factor", "!=", "0", ":", "\n", "            ", "self", ".", "naive_dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "droput_factor", ")", "\n", "\n", "", "if", "batch_norm", ":", "\n", "            ", "self", ".", "bn_layer", "=", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", "\n", "", "if", "layer_norm", ":", "\n", "            ", "self", ".", "layer_norm_layer", "=", "nn", ".", "LayerNorm", "(", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.starrnn.StarLayer.forward": [[189, 210], ["torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "torch.autograd.Variable().to", "range", "x.size", "starrnn.StarLayer.cell", "starrnn.StarLayer.bn_layer().permute", "starrnn.StarLayer.layer_norm_layer", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "starrnn.StarLayer.naive_dropout", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "starrnn.StarLayer.bn_layer", "x.size", "x.size", "starrnn.StarLayer.permute"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Initialize hidden state with zeros", "\n", "        ", "h0", "=", "Variable", "(", "torch", ".", "zeros", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "hidden_dim", ")", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "outs", "=", "Variable", "(", "torch", ".", "zeros", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "shape", "[", "1", "]", ",", "self", ".", "hidden_dim", ")", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "hn", "=", "h0", "\n", "for", "seq", "in", "range", "(", "x", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "hn", "=", "self", ".", "cell", "(", "x", "[", ":", ",", "seq", "]", ",", "hn", ")", "\n", "if", "self", ".", "droput_factor", "!=", "0", ":", "\n", "                ", "outs", "[", ":", ",", "seq", ",", ":", "]", "=", "self", ".", "naive_dropout", "(", "hn", ")", "\n", "", "else", ":", "\n", "                ", "outs", "[", ":", ",", "seq", ",", ":", "]", "=", "hn", "\n", "# batch normalization:", "\n", "", "", "if", "self", ".", "batch_norm", ":", "\n", "            ", "outs", "=", "self", ".", "bn_layer", "(", "outs", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "# layer normalization:", "\n", "", "if", "self", ".", "layer_norm", ":", "\n", "            ", "outs", "=", "self", ".", "layer_norm_layer", "(", "outs", ")", "\n", "\n", "", "return", "outs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.shallow.ShallowCNNNet.__init__": [[8, 17], ["base.BaseMulticlassClassifier.__init__", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "model", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "model", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "model", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "model", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "53", "*", "53", ",", "120", ")", "\n", "self", ".", "model", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "model", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.shallow.ShallowCNNNet.forward": [[18, 27], ["shallow.ShallowCNNNet.model.pool", "shallow.ShallowCNNNet.model.pool", "shallow.ShallowCNNNet.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shallow.ShallowCNNNet.model.fc3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shallow.ShallowCNNNet.model.fc1", "shallow.ShallowCNNNet.model.fc2", "shallow.ShallowCNNNet.model.conv1", "shallow.ShallowCNNNet.model.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "model", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "model", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "model", ".", "conv2", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "16", "*", "53", "*", "53", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "model", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "model", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "model", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.shallow.ShallowCNNNetMultilabel.__init__": [[30, 39], ["base.BaseMultilabelClassifier.__init__", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "model", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "6", ",", "5", ")", "\n", "self", ".", "model", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "model", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", "\n", "self", ".", "model", ".", "fc1", "=", "nn", ".", "Linear", "(", "16", "*", "53", "*", "53", ",", "120", ")", "\n", "self", ".", "model", ".", "fc2", "=", "nn", ".", "Linear", "(", "120", ",", "84", ")", "\n", "self", ".", "model", ".", "fc3", "=", "nn", ".", "Linear", "(", "84", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.shallow.ShallowCNNNetMultilabel.forward": [[40, 49], ["shallow.ShallowCNNNetMultilabel.model.pool", "shallow.ShallowCNNNetMultilabel.model.pool", "shallow.ShallowCNNNetMultilabel.view", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shallow.ShallowCNNNetMultilabel.model.fc3", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "shallow.ShallowCNNNetMultilabel.model.fc1", "shallow.ShallowCNNNetMultilabel.model.fc2", "shallow.ShallowCNNNetMultilabel.model.conv1", "shallow.ShallowCNNNetMultilabel.model.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "model", ".", "conv1", "(", "x", ")", ")", ")", "\n", "x", "=", "self", ".", "model", ".", "pool", "(", "F", ".", "relu", "(", "self", ".", "model", ".", "conv2", "(", "x", ")", ")", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "16", "*", "53", "*", "53", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "model", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "model", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "model", ".", "fc3", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG16.__init__": [[11, 25], ["base.BaseMulticlassClassifier.__init__", "torchvision.vgg16", "vgg.VGG16.model.classifier.add_module", "torchvision.vgg16", "torch.Linear", "torch.Linear", "vgg.VGG16.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.vgg16", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.vgg16", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "vgg16", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "1", "]", "# remove final layer", "\n", "self", ".", "model", ".", "classifier", ".", "add_module", "(", "\n", "\"6\"", ",", "nn", ".", "Linear", "(", "4096", ",", "self", ".", "config", ".", "num_classes", ",", "bias", "=", "True", ")", "\n", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "vgg16", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG16.forward": [[27, 29], ["vgg.VGG16.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG16.freeze": [[30, 35], ["vgg.VGG16.model.parameters", "vgg.VGG16.model.classifier.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG16.extract_features": [[36, 41], ["None"], "methods", ["None"], ["", "", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "3", "]", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG19.__init__": [[46, 60], ["base.BaseMulticlassClassifier.__init__", "torchvision.vgg19", "vgg.VGG19.model.classifier.add_module", "torchvision.vgg19", "torch.Linear", "torch.Linear", "vgg.VGG19.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "vgg19", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "1", "]", "# remove final layer", "\n", "self", ".", "model", ".", "classifier", ".", "add_module", "(", "\n", "\"6\"", ",", "nn", ".", "Linear", "(", "4096", ",", "self", ".", "config", ".", "num_classes", ",", "bias", "=", "True", ")", "\n", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "vgg19", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG19.forward": [[62, 64], ["vgg.VGG19.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG19.extract_features": [[65, 70], ["None"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "3", "]", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG19.freeze": [[71, 76], ["vgg.VGG19.model.parameters", "vgg.VGG19.model.classifier.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG16MultiLabel.__init__": [[81, 95], ["base.BaseMultilabelClassifier.__init__", "torchvision.vgg16", "vgg.VGG16MultiLabel.model.classifier.add_module", "torchvision.vgg16", "torch.Linear", "torch.Linear", "vgg.VGG16MultiLabel.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.vgg16", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.vgg16", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "vgg16", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "1", "]", "# remove final layer", "\n", "self", ".", "model", ".", "classifier", ".", "add_module", "(", "\n", "\"6\"", ",", "nn", ".", "Linear", "(", "4096", ",", "self", ".", "config", ".", "num_classes", ",", "bias", "=", "True", ")", "\n", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "vgg16", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG16MultiLabel.forward": [[97, 99], ["vgg.VGG16MultiLabel.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG16MultiLabel.extract_features": [[100, 105], ["None"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "3", "]", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG16MultiLabel.freeze": [[106, 111], ["vgg.VGG16MultiLabel.model.parameters", "vgg.VGG16MultiLabel.model.classifier.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG19MultiLabel.__init__": [[116, 130], ["base.BaseMultilabelClassifier.__init__", "torchvision.vgg19", "vgg.VGG19MultiLabel.model.classifier.add_module", "torchvision.vgg19", "torch.Linear", "torch.Linear", "vgg.VGG19MultiLabel.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "vgg19", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "1", "]", "# remove final layer", "\n", "self", ".", "model", ".", "classifier", ".", "add_module", "(", "\n", "\"6\"", ",", "nn", ".", "Linear", "(", "4096", ",", "self", ".", "config", ".", "num_classes", ",", "bias", "=", "True", ")", "\n", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "vgg19", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG19MultiLabel.forward": [[132, 134], ["vgg.VGG19MultiLabel.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG19MultiLabel.freeze": [[135, 140], ["vgg.VGG19MultiLabel.model.parameters", "vgg.VGG19MultiLabel.model.classifier.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vgg.VGG19MultiLabel.extract_features": [[141, 146], ["None"], "methods", ["None"], ["", "", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "3", "]", "\n", "\n", "return", "self", ".", "model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB0.__init__": [[10, 22], ["base.BaseMulticlassClassifier.__init__", "torchvision.efficientnet_b0", "torch.Linear", "torchvision.efficientnet_b0", "efficientnet.EfficientNetB0.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "efficientnet_b0", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "num_ftrs", "=", "self", ".", "model", ".", "classifier", "[", "1", "]", ".", "in_features", "\n", "self", ".", "model", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "efficientnet_b0", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB0.forward": [[24, 26], ["efficientnet.EfficientNetB0.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB0.freeze": [[27, 32], ["efficientnet.EfficientNetB0.model.parameters", "efficientnet.EfficientNetB0.model.classifier.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB0.extract_features": [[34, 38], ["torch.Sequential", "list", "efficientnet.EfficientNetB0.model.children"], "methods", ["None"], ["def", "extract_features", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB0MultiLabel.__init__": [[43, 55], ["base.BaseMultilabelClassifier.__init__", "torchvision.efficientnet_b0", "torch.Linear", "torchvision.efficientnet_b0", "efficientnet.EfficientNetB0MultiLabel.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "efficientnet_b0", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "num_ftrs", "=", "self", ".", "model", ".", "classifier", "[", "1", "]", ".", "in_features", "\n", "self", ".", "model", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "efficientnet_b0", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB0MultiLabel.forward": [[57, 59], ["efficientnet.EfficientNetB0MultiLabel.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB0MultiLabel.extract_features": [[60, 65], ["torch.Sequential", "list", "efficientnet.EfficientNetB0MultiLabel.model.children"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB0MultiLabel.freeze": [[66, 71], ["efficientnet.EfficientNetB0MultiLabel.model.parameters", "efficientnet.EfficientNetB0MultiLabel.model.classifier.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB4.__init__": [[76, 88], ["base.BaseMulticlassClassifier.__init__", "torchvision.efficientnet_b4", "torch.Linear", "torchvision.efficientnet_b4", "efficientnet.EfficientNetB4.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "efficientnet_b4", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "num_ftrs", "=", "self", ".", "model", ".", "classifier", "[", "1", "]", ".", "in_features", "\n", "self", ".", "model", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "efficientnet_b4", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB4.forward": [[90, 92], ["efficientnet.EfficientNetB4.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB4.freeze": [[93, 98], ["efficientnet.EfficientNetB4.model.parameters", "efficientnet.EfficientNetB4.model.classifier.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB4.extract_features": [[100, 104], ["torch.Sequential", "list", "efficientnet.EfficientNetB4.model.children"], "methods", ["None"], ["def", "extract_features", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB4MultiLabel.__init__": [[109, 121], ["base.BaseMultilabelClassifier.__init__", "torchvision.efficientnet_b4", "torch.Linear", "torchvision.efficientnet_b4", "efficientnet.EfficientNetB4MultiLabel.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "efficientnet_b4", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "num_ftrs", "=", "self", ".", "model", ".", "classifier", "[", "1", "]", ".", "in_features", "\n", "self", ".", "model", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "efficientnet_b4", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB4MultiLabel.forward": [[123, 125], ["efficientnet.EfficientNetB4MultiLabel.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB4MultiLabel.extract_features": [[126, 131], ["torch.Sequential", "list", "efficientnet.EfficientNetB4MultiLabel.model.children"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB4MultiLabel.freeze": [[132, 137], ["efficientnet.EfficientNetB4MultiLabel.model.parameters", "efficientnet.EfficientNetB4MultiLabel.model.classifier.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB7.__init__": [[142, 154], ["base.BaseMulticlassClassifier.__init__", "torchvision.efficientnet_b7", "torch.Linear", "torchvision.efficientnet_b7", "efficientnet.EfficientNetB7.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "efficientnet_b7", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "num_ftrs", "=", "self", ".", "model", ".", "classifier", ".", "in_features", "\n", "self", ".", "model", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "efficientnet_b7", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB7.forward": [[156, 158], ["efficientnet.EfficientNetB7.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB7.freeze": [[159, 164], ["efficientnet.EfficientNetB7.model.parameters", "efficientnet.EfficientNetB7.model.fc.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "fc", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB7.extract_features": [[166, 170], ["torch.Sequential", "list", "efficientnet.EfficientNetB7.model.children"], "methods", ["None"], ["def", "extract_features", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB7MultiLabel.__init__": [[175, 187], ["base.BaseMultilabelClassifier.__init__", "torchvision.efficientnet_b7", "torch.Linear", "torchvision.efficientnet_b7", "efficientnet.EfficientNetB7MultiLabel.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "efficientnet_b7", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "num_ftrs", "=", "self", ".", "model", ".", "classifier", "[", "1", "]", ".", "in_features", "\n", "self", ".", "model", ".", "classifier", "[", "1", "]", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "efficientnet_b7", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB7MultiLabel.forward": [[189, 191], ["efficientnet.EfficientNetB7MultiLabel.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB7MultiLabel.extract_features": [[192, 197], ["torch.Sequential", "list", "efficientnet.EfficientNetB7MultiLabel.model.children"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.efficientnet.EfficientNetB7MultiLabel.freeze": [[198, 203], ["efficientnet.EfficientNetB7MultiLabel.model.parameters", "efficientnet.EfficientNetB7MultiLabel.model.classifier.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.omniscalecnn.SampaddingConv1D_BN.__init__": [[21, 30], ["torch.Module.__init__", "torch.ConstantPad1d", "torch.ConstantPad1d", "torch.ConstantPad1d", "torch.ConstantPad1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "int", "int"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ")", ":", "\n", "        ", "super", "(", "SampaddingConv1D_BN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "padding", "=", "nn", ".", "ConstantPad1d", "(", "\n", "(", "int", "(", "(", "kernel_size", "-", "1", ")", "/", "2", ")", ",", "int", "(", "kernel_size", "/", "2", ")", ")", ",", "0", "\n", ")", "\n", "self", ".", "conv1d", "=", "torch", ".", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "in_channels", ",", "out_channels", "=", "out_channels", ",", "kernel_size", "=", "kernel_size", "\n", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "num_features", "=", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.omniscalecnn.SampaddingConv1D_BN.forward": [[31, 36], ["omniscalecnn.SampaddingConv1D_BN.padding", "omniscalecnn.SampaddingConv1D_BN.conv1d", "omniscalecnn.SampaddingConv1D_BN.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "padding", "(", "X", ")", "\n", "X", "=", "self", ".", "conv1d", "(", "X", ")", "\n", "X", "=", "self", ".", "bn", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.omniscalecnn.build_layer_with_layer_parameter.__init__": [[43, 58], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "omniscalecnn.SampaddingConv1D_BN", "omniscalecnn.build_layer_with_layer_parameter.conv_list.append"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "layer_parameters", ")", ":", "\n", "        ", "\"\"\"\n        layer_parameters format\n            [in_channels, out_channels, kernel_size,\n            in_channels, out_channels, kernel_size,\n            ..., nlayers\n            ]\n        \"\"\"", "\n", "super", "(", "build_layer_with_layer_parameter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "for", "i", "in", "layer_parameters", ":", "\n", "# in_channels, out_channels, kernel_size", "\n", "            ", "conv", "=", "SampaddingConv1D_BN", "(", "i", "[", "0", "]", ",", "i", "[", "1", "]", ",", "i", "[", "2", "]", ")", "\n", "self", ".", "conv_list", ".", "append", "(", "conv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.omniscalecnn.build_layer_with_layer_parameter.forward": [[59, 68], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "conv", "conv_result_list.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "tuple"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "\n", "        ", "conv_result_list", "=", "[", "]", "\n", "for", "conv", "in", "self", ".", "conv_list", ":", "\n", "            ", "conv_result", "=", "conv", "(", "X", ")", "\n", "conv_result_list", ".", "append", "(", "conv_result", ")", "\n", "\n", "", "result", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "tuple", "(", "conv_result_list", ")", ",", "1", ")", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.omniscalecnn.OmniScaleCNN.__init__": [[75, 100], ["base.BaseMulticlassClassifier.__init__", "omniscalecnn.generate_layer_parameter_list", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "len", "omniscalecnn.build_layer_with_layer_parameter", "omniscalecnn.OmniScaleCNN.layer_list.append"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.omniscalecnn.generate_layer_parameter_list"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "receptive_field_shape", "=", "self", ".", "config", ".", "sequence_length", "//", "4", "\n", "layer_parameter_list", "=", "generate_layer_parameter_list", "(", "\n", "1", ",", "\n", "receptive_field_shape", ",", "\n", "self", ".", "config", ".", "parameter_number_of_layer_list", ",", "\n", "in_channel", "=", "self", ".", "config", ".", "input_dim", ",", "\n", ")", "\n", "self", ".", "layer_parameter_list", "=", "layer_parameter_list", "\n", "self", ".", "layer_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "layer_parameter_list", ")", ")", ":", "\n", "            ", "layer", "=", "build_layer_with_layer_parameter", "(", "layer_parameter_list", "[", "i", "]", ")", "\n", "self", ".", "layer_list", ".", "append", "(", "layer", ")", "\n", "\n", "", "self", ".", "model", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "layer_list", ")", "\n", "\n", "self", ".", "model", ".", "averagepool", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "\n", "out_put_channel_numebr", "=", "0", "\n", "for", "final_layer_parameters", "in", "layer_parameter_list", "[", "-", "1", "]", ":", "\n", "            ", "out_put_channel_numebr", "=", "out_put_channel_numebr", "+", "final_layer_parameters", "[", "1", "]", "\n", "\n", "", "self", ".", "model", ".", "hidden", "=", "nn", ".", "Linear", "(", "out_put_channel_numebr", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.omniscalecnn.OmniScaleCNN.forward": [[101, 108], ["omniscalecnn.OmniScaleCNN.model.net", "omniscalecnn.OmniScaleCNN.model.averagepool", "omniscalecnn.OmniScaleCNN.squeeze_", "omniscalecnn.OmniScaleCNN.transpose", "omniscalecnn.OmniScaleCNN.model.hidden"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "model", ".", "net", "(", "X", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "X", "=", "self", ".", "model", ".", "averagepool", "(", "X", ")", "\n", "X", "=", "X", ".", "squeeze_", "(", "-", "1", ")", "\n", "if", "not", "self", ".", "config", ".", "few_shot", ":", "\n", "            ", "X", "=", "self", ".", "model", ".", "hidden", "(", "X", ")", "\n", "", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.omniscalecnn.OmniScaleCNN.load_optimizer": [[109, 115], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "omniscalecnn.OmniScaleCNN.model.parameters"], "methods", ["None"], ["", "def", "load_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load the optimizer\"\"\"", "\n", "return", "optim", ".", "Adam", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "learning_rate", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "weight_decay", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.omniscalecnn.get_Prime_number_in_a_range": [[118, 129], ["range", "range", "Prime_list.append"], "function", ["None"], ["", "", "def", "get_Prime_number_in_a_range", "(", "start", ",", "end", ")", ":", "\n", "    ", "Prime_list", "=", "[", "]", "\n", "for", "val", "in", "range", "(", "start", ",", "end", "+", "1", ")", ":", "\n", "        ", "prime_or_not", "=", "True", "\n", "for", "n", "in", "range", "(", "2", ",", "val", ")", ":", "\n", "            ", "if", "(", "val", "%", "n", ")", "==", "0", ":", "\n", "                ", "prime_or_not", "=", "False", "\n", "break", "\n", "", "", "if", "prime_or_not", ":", "\n", "            ", "Prime_list", ".", "append", "(", "val", ")", "\n", "", "", "return", "Prime_list", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.omniscalecnn.get_out_channel_number": [[131, 134], ["int", "sum"], "function", ["None"], ["", "def", "get_out_channel_number", "(", "paramenter_layer", ",", "in_channel", ",", "prime_list", ")", ":", "\n", "    ", "out_channel_expect", "=", "int", "(", "paramenter_layer", "/", "(", "in_channel", "*", "sum", "(", "prime_list", ")", ")", ")", "\n", "return", "out_channel_expect", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.omniscalecnn.generate_layer_parameter_list": [[136, 162], ["omniscalecnn.get_Prime_number_in_a_range", "tuples_in_layer_last.append", "tuples_in_layer_last.append", "layer_parameter_list.append", "omniscalecnn.get_out_channel_number", "layer_parameter_list.append", "len", "omniscalecnn.get_out_channel_number", "tuples_in_layer.append", "len"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.omniscalecnn.get_Prime_number_in_a_range", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.omniscalecnn.get_out_channel_number", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.omniscalecnn.get_out_channel_number"], ["", "def", "generate_layer_parameter_list", "(", "\n", "start", ",", "end", ",", "paramenter_number_of_layer_list", ",", "in_channel", "=", "1", "\n", ")", ":", "\n", "    ", "prime_list", "=", "get_Prime_number_in_a_range", "(", "start", ",", "end", ")", "\n", "\n", "layer_parameter_list", "=", "[", "]", "\n", "for", "paramenter_number_of_layer", "in", "paramenter_number_of_layer_list", ":", "\n", "        ", "out_channel", "=", "get_out_channel_number", "(", "\n", "paramenter_number_of_layer", ",", "in_channel", ",", "prime_list", "\n", ")", "\n", "\n", "tuples_in_layer", "=", "[", "]", "\n", "for", "prime", "in", "prime_list", ":", "\n", "            ", "tuples_in_layer", ".", "append", "(", "(", "in_channel", ",", "out_channel", ",", "prime", ")", ")", "\n", "", "in_channel", "=", "len", "(", "prime_list", ")", "*", "out_channel", "\n", "\n", "layer_parameter_list", ".", "append", "(", "tuples_in_layer", ")", "\n", "\n", "", "tuples_in_layer_last", "=", "[", "]", "\n", "first_out_channel", "=", "len", "(", "prime_list", ")", "*", "get_out_channel_number", "(", "\n", "paramenter_number_of_layer_list", "[", "0", "]", ",", "1", ",", "prime_list", "\n", ")", "\n", "tuples_in_layer_last", ".", "append", "(", "(", "in_channel", ",", "first_out_channel", ",", "1", ")", ")", "\n", "tuples_in_layer_last", ".", "append", "(", "(", "in_channel", ",", "first_out_channel", ",", "2", ")", ")", "\n", "layer_parameter_list", ".", "append", "(", "tuples_in_layer_last", ")", "\n", "return", "layer_parameter_list", "\n", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.convnext.ConvNeXtTiny.__init__": [[10, 24], ["base.BaseMulticlassClassifier.__init__", "torchvision.convnext_tiny", "convnext.ConvNeXtTiny.model.classifier.add_module", "torchvision.convnext_tiny", "torch.Linear", "convnext.ConvNeXtTiny.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "convnext_tiny", "(", "pretrained", "=", "self", ".", "config", ".", "pretrained", ")", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "1", "]", "# remove final layer", "\n", "self", ".", "model", ".", "classifier", ".", "add_module", "(", "\n", "\"2\"", ",", "nn", ".", "Linear", "(", "768", ",", "self", ".", "config", ".", "num_classes", ",", "bias", "=", "True", ")", "\n", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "convnext_tiny", "(", "\n", "pretrained", "=", "self", ".", "config", ".", "pretrained", ",", "progress", "=", "True", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.convnext.ConvNeXtTiny.forward": [[26, 28], ["convnext.ConvNeXtTiny.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.convnext.ConvNeXtTiny.freeze": [[29, 34], ["convnext.ConvNeXtTiny.model.parameters", "convnext.ConvNeXtTiny.model.classifier.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.convnext.ConvNeXtTiny.extract_features": [[35, 40], ["None"], "methods", ["None"], ["", "", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "1", "]", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.convnext.ConvNeXtTinyMultiLabel.__init__": [[45, 59], ["base.BaseMultilabelClassifier.__init__", "torchvision.convnext_tiny", "convnext.ConvNeXtTinyMultiLabel.model.classifier.add_module", "torchvision.convnext_tiny", "torch.Linear", "convnext.ConvNeXtTinyMultiLabel.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "convnext_tiny", "(", "pretrained", "=", "self", ".", "config", ".", "pretrained", ")", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "1", "]", "# remove final layer", "\n", "self", ".", "model", ".", "classifier", ".", "add_module", "(", "\n", "\"2\"", ",", "nn", ".", "Linear", "(", "768", ",", "self", ".", "config", ".", "num_classes", ",", "bias", "=", "True", ")", "\n", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "convnext_tiny", "(", "\n", "pretrained", "=", "self", ".", "config", ".", "pretrained", ",", "progress", "=", "True", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.convnext.ConvNeXtTinyMultiLabel.forward": [[61, 63], ["convnext.ConvNeXtTinyMultiLabel.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.convnext.ConvNeXtTinyMultiLabel.extract_features": [[64, 69], ["None"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "1", "]", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.convnext.ConvNeXtTinyMultiLabel.freeze": [[70, 75], ["convnext.ConvNeXtTinyMultiLabel.model.parameters", "convnext.ConvNeXtTinyMultiLabel.model.classifier.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet.Unet.__init__": [[7, 16], ["base.BaseSegmentationClassifier.__init__", "segmentation_models_pytorch.Unet"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "model", "=", "smp", ".", "Unet", "(", "\n", "encoder_name", "=", "\"resnet34\"", ",", "\n", "encoder_weights", "=", "\"imagenet\"", "\n", "if", "self", ".", "config", ".", "pretrained", "\n", "else", "None", ",", "# set pretrained weights for encoder", "\n", "classes", "=", "self", ".", "config", ".", "num_classes", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet.Unet.forward": [[18, 20], ["unet.Unet.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.mlp_mixer.MLPMixer.__init__": [[10, 18], ["base.BaseMulticlassClassifier.__init__", "timm.create_model", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "model", "=", "timm", ".", "create_model", "(", "\n", "\"mixer_b16_224\"", ",", "pretrained", "=", "self", ".", "config", ".", "pretrained", "\n", ")", "\n", "self", ".", "model", ".", "head", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "768", ",", "out_features", "=", "self", ".", "config", ".", "num_classes", ",", "bias", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.mlp_mixer.MLPMixer.forward": [[20, 22], ["mlp_mixer.MLPMixer.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.mlp_mixer.MLPMixerMultilabel.__init__": [[27, 35], ["base.BaseMultilabelClassifier.__init__", "timm.create_model", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "model", "=", "timm", ".", "create_model", "(", "\n", "\"mixer_b16_224\"", ",", "pretrained", "=", "self", ".", "config", ".", "pretrained", "\n", ")", "\n", "self", ".", "model", ".", "head", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "768", ",", "out_features", "=", "self", ".", "config", ".", "num_classes", ",", "bias", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.mlp_mixer.MLPMixerMultilabel.forward": [[37, 39], ["mlp_mixer.MLPMixerMultilabel.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.tempcnn.TempCNN.__init__": [[23, 53], ["base.BaseMulticlassClassifier.__init__", "tempcnn.Conv1D_BatchNorm_Relu_Dropout", "tempcnn.Conv1D_BatchNorm_Relu_Dropout", "tempcnn.Conv1D_BatchNorm_Relu_Dropout", "tempcnn.Flatten", "tempcnn.FC_BatchNorm_Relu_Dropout", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "model", ".", "conv_bn_relu1", "=", "Conv1D_BatchNorm_Relu_Dropout", "(", "\n", "self", ".", "config", ".", "input_dim", ",", "\n", "self", ".", "config", ".", "input_dim", ",", "\n", "kernel_size", "=", "self", ".", "config", ".", "kernel_size", ",", "\n", "drop_probability", "=", "self", ".", "config", ".", "dropout", ",", "\n", ")", "\n", "self", ".", "model", ".", "conv_bn_relu2", "=", "Conv1D_BatchNorm_Relu_Dropout", "(", "\n", "self", ".", "config", ".", "input_dim", ",", "\n", "self", ".", "config", ".", "input_dim", ",", "\n", "kernel_size", "=", "self", ".", "config", ".", "kernel_size", ",", "\n", "drop_probability", "=", "self", ".", "config", ".", "dropout", ",", "\n", ")", "\n", "self", ".", "model", ".", "conv_bn_relu3", "=", "Conv1D_BatchNorm_Relu_Dropout", "(", "\n", "self", ".", "config", ".", "input_dim", ",", "\n", "self", ".", "config", ".", "input_dim", ",", "\n", "kernel_size", "=", "self", ".", "config", ".", "kernel_size", ",", "\n", "drop_probability", "=", "self", ".", "config", ".", "dropout", ",", "\n", ")", "\n", "self", ".", "model", ".", "flatten", "=", "Flatten", "(", ")", "\n", "self", ".", "model", ".", "dense", "=", "FC_BatchNorm_Relu_Dropout", "(", "\n", "self", ".", "config", ".", "input_dim", "*", "self", ".", "config", ".", "sequence_length", ",", "\n", "4", "*", "self", ".", "config", ".", "input_dim", ",", "\n", "drop_probability", "=", "self", ".", "config", ".", "dropout", ",", "\n", ")", "\n", "self", ".", "model", ".", "logsoftmax", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4", "*", "self", ".", "config", ".", "input_dim", ",", "self", ".", "config", ".", "num_classes", ")", ",", "\n", "nn", ".", "LogSoftmax", "(", "dim", "=", "-", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.tempcnn.TempCNN.forward": [[55, 64], ["tempcnn.TempCNN.transpose", "tempcnn.TempCNN.model.conv_bn_relu1", "tempcnn.TempCNN.model.conv_bn_relu2", "tempcnn.TempCNN.model.conv_bn_relu3", "tempcnn.TempCNN.model.flatten", "tempcnn.TempCNN.model.dense", "tempcnn.TempCNN.model.logsoftmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# require NxTxD", "\n", "        ", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x", "=", "self", ".", "model", ".", "conv_bn_relu1", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "conv_bn_relu2", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "conv_bn_relu3", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "flatten", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "dense", "(", "x", ")", "\n", "return", "self", ".", "model", ".", "logsoftmax", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.tempcnn.TempCNN.load_optimizer": [[65, 71], ["torch.Adam", "torch.Adam", "torch.Adam", "tempcnn.TempCNN.model.parameters"], "methods", ["None"], ["", "def", "load_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load the optimizer\"\"\"", "\n", "return", "optim", ".", "Adam", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "learning_rate", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "weight_decay", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.tempcnn.Conv1D_BatchNorm_Relu_Dropout.__init__": [[75, 83], ["super().__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dims", ",", "kernel_size", "=", "5", ",", "drop_probability", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "Conv1D_BatchNorm_Relu_Dropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "input_dim", ",", "hidden_dims", ",", "kernel_size", ",", "padding", "=", "(", "kernel_size", "//", "2", ")", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hidden_dims", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "drop_probability", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.tempcnn.Conv1D_BatchNorm_Relu_Dropout.forward": [[85, 87], ["tempcnn.Conv1D_BatchNorm_Relu_Dropout.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.tempcnn.FC_BatchNorm_Relu_Dropout.__init__": [[90, 98], ["super().__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "hidden_dims", ",", "drop_probability", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "FC_BatchNorm_Relu_Dropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "hidden_dims", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "hidden_dims", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "drop_probability", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.tempcnn.FC_BatchNorm_Relu_Dropout.forward": [[100, 102], ["tempcnn.FC_BatchNorm_Relu_Dropout.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "return", "self", ".", "block", "(", "X", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.tempcnn.Flatten.forward": [[105, 107], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.hrnet.HRNetModule.__init__": [[14, 29], ["torch.Module.__init__", "timm.create_model"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "head", ":", "nn", ".", "Module", ",", "pretrained", ":", "bool", "=", "True", ",", "higher_res", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "\"\"\" Pretrained backbone for HRNet.\n\n        Args:\n            head: Output head\n            pretrained: If True, uses imagenet pretrained weights\n            higher_res: If True, retains higher resolution features\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "head", "=", "head", "\n", "self", ".", "backbone", "=", "timm", ".", "create_model", "(", "\"hrnet_w48\"", ",", "pretrained", "=", "pretrained", ")", "\n", "if", "higher_res", ":", "\n", "            ", "self", ".", "backbone", ".", "conv2", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.hrnet.HRNetModule.forward": [[30, 59], ["hrnet.HRNetModule.backbone.conv1", "hrnet.HRNetModule.backbone.bn1", "hrnet.HRNetModule.backbone.act1", "hrnet.HRNetModule.backbone.conv2", "hrnet.HRNetModule.backbone.bn2", "hrnet.HRNetModule.backbone.act2", "hrnet.HRNetModule.backbone.layer1", "hrnet.HRNetModule.backbone.stage2", "hrnet.HRNetModule.backbone.stage3", "hrnet.HRNetModule.backbone.stage4", "t", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "enumerate", "t", "enumerate", "t", "enumerate", "hrnet.HRNetModule.head", "isinstance", "isinstance"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "inshape", "=", "x", ".", "shape", "[", "-", "2", ":", "]", "\n", "x", "=", "self", ".", "backbone", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "backbone", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "backbone", ".", "act1", "(", "x", ")", "\n", "x", "=", "self", ".", "backbone", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "backbone", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "backbone", ".", "act2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "backbone", ".", "layer1", "(", "x", ")", "\n", "\n", "xl", "=", "[", "t", "(", "x", ")", "for", "i", ",", "t", "in", "enumerate", "(", "self", ".", "backbone", ".", "transition1", ")", "]", "\n", "yl", "=", "self", ".", "backbone", ".", "stage2", "(", "xl", ")", "\n", "\n", "xl", "=", "[", "\n", "t", "(", "yl", "[", "-", "1", "]", ")", "if", "not", "isinstance", "(", "t", ",", "nn", ".", "Identity", ")", "else", "yl", "[", "i", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "self", ".", "backbone", ".", "transition2", ")", "\n", "]", "\n", "yl", "=", "self", ".", "backbone", ".", "stage3", "(", "xl", ")", "\n", "\n", "xl", "=", "[", "\n", "t", "(", "yl", "[", "-", "1", "]", ")", "if", "not", "isinstance", "(", "t", ",", "nn", ".", "Identity", ")", "else", "yl", "[", "i", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "self", ".", "backbone", ".", "transition3", ")", "\n", "]", "\n", "yl", "=", "self", ".", "backbone", ".", "stage4", "(", "xl", ")", "\n", "\n", "return", "{", "\n", "\"out\"", ":", "F", ".", "interpolate", "(", "\n", "self", ".", "head", "(", "x", ",", "yl", ")", ",", "size", "=", "inshape", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.hrnet.HRNetSegHead.__init__": [[64, 78], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nclasses", ":", "int", "=", "3", ",", "higher_res", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\" Segmentation head for HRNet. Does not have pretrained weights.\n\n        Args:\n            nclasses: Number of output classes\n            higher_res: If True, retains higher resolution features\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "res_modifier", "=", "2", "if", "higher_res", "else", "1", "\n", "self", ".", "projection", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "976", ",", "256", ",", "3", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "nclasses", ",", "1", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.hrnet.HRNetSegHead.forward": [[80, 87], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "hrnet.HRNetSegHead.projection", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "yl", ")", ":", "\n", "        ", "mod", "=", "self", ".", "res_modifier", "\n", "low_level", "=", "torch", ".", "cat", "(", "\n", "[", "F", ".", "interpolate", "(", "feat", ",", "(", "NHIGH", "*", "mod", ",", "NHIGH", "*", "mod", ")", ")", "for", "feat", "in", "[", "x", ",", "*", "yl", "]", "]", ",", "1", "\n", ")", "\n", "out", "=", "self", ".", "projection", "(", "low_level", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.hrnet.HRNet.__init__": [[90, 96], ["base.BaseSegmentationClassifier.__init__", "hrnet.HRNetModule", "hrnet.HRNetSegHead"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "higher_res", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "model", "=", "HRNetModule", "(", "\n", "HRNetSegHead", "(", "self", ".", "config", ".", "num_classes", ",", "higher_res", ")", ",", "\n", "self", ".", "config", ".", "pretrained", ",", "\n", "higher_res", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.hrnet.HRNet.forward": [[98, 100], ["hrnet.HRNet.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.cnn_rnn.EncoderCNN.__init__": [[10, 17], ["torch.Module.__init__", "torchvision.models.resnet152", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "list", "torchvision.models.resnet152.children"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_size", ")", ":", "\n", "        ", "super", "(", "EncoderCNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "resnet", "=", "resnet152", "(", "pretrained", "=", "True", ")", "\n", "modules", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", "# ignore the last fc layer", "\n", "self", ".", "resnet", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "resnet", ".", "fc", ".", "in_features", ",", "embed_size", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "embed_size", ",", "momentum", "=", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.cnn_rnn.EncoderCNN.forward": [[18, 23], ["cnn_rnn.EncoderCNN.reshape", "cnn_rnn.EncoderCNN.bn", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cnn_rnn.EncoderCNN.resnet", "cnn_rnn.EncoderCNN.size", "cnn_rnn.EncoderCNN.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "images", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "features", "=", "self", ".", "resnet", "(", "images", ")", "\n", "", "features", "=", "features", ".", "reshape", "(", "features", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "bn", "(", "self", ".", "linear", "(", "features", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.cnn_rnn.DecoderRNN.__init__": [[26, 30], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_size", ",", "hidden_size", ",", "num_classes", ",", "num_layers", ")", ":", "\n", "        ", "super", "(", "DecoderRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "embed_size", ",", "hidden_size", ",", "num_layers", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.cnn_rnn.DecoderRNN.forward": [[31, 35], ["features.unsqueeze.unsqueeze.unsqueeze", "cnn_rnn.DecoderRNN.lstm", "cnn_rnn.DecoderRNN.linear", "hiddens.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "features", "=", "features", ".", "unsqueeze", "(", "1", ")", "\n", "hiddens", ",", "_", "=", "self", ".", "lstm", "(", "features", ",", "None", ")", "\n", "return", "self", ".", "linear", "(", "hiddens", ".", "squeeze", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.cnn_rnn.CNNRNN.__init__": [[42, 53], ["base.BaseMultilabelClassifier.__init__", "EncoderCNN().to", "DecoderRNN().to", "cnn_rnn.EncoderCNN", "cnn_rnn.DecoderRNN"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "CNNRNN", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "model", ".", "encoder", "=", "EncoderCNN", "(", "embed_size", "=", "self", ".", "config", "[", "\"embed_size\"", "]", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "self", ".", "model", ".", "decoder", "=", "DecoderRNN", "(", "\n", "embed_size", "=", "self", ".", "config", "[", "\"embed_size\"", "]", ",", "\n", "hidden_size", "=", "self", ".", "config", "[", "\"hidden_size\"", "]", ",", "\n", "num_classes", "=", "self", ".", "config", "[", "\"num_classes\"", "]", ",", "\n", "num_layers", "=", "self", ".", "config", "[", "\"num_layers\"", "]", ",", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.cnn_rnn.CNNRNN.forward": [[54, 56], ["cnn_rnn.CNNRNN.model.decoder", "cnn_rnn.CNNRNN.model.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "decoder", "(", "self", ".", "model", ".", "encoder", "(", "inputs", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.lstm.LSTM.__init__": [[24, 54], ["base.BaseMulticlassClassifier.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "use_layernorm", ":", "\n", "            ", "self", ".", "model", ".", "inlayernorm", "=", "nn", ".", "LayerNorm", "(", "self", ".", "config", ".", "input_dim", ")", "\n", "self", ".", "model", ".", "clayernorm", "=", "nn", ".", "LayerNorm", "(", "\n", "(", "\n", "self", ".", "config", ".", "hidden_dims", "\n", "+", "self", ".", "config", ".", "hidden_dims", "*", "self", ".", "config", ".", "bidirectional", "\n", ")", "\n", "*", "self", ".", "config", ".", "num_layers", "\n", ")", "\n", "\n", "", "self", ".", "model", ".", "lstm", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "self", ".", "config", ".", "input_dim", ",", "\n", "hidden_size", "=", "self", ".", "config", ".", "hidden_dims", ",", "\n", "num_layers", "=", "self", ".", "config", ".", "num_layers", ",", "\n", "bias", "=", "False", ",", "\n", "batch_first", "=", "True", ",", "\n", "dropout", "=", "self", ".", "config", ".", "dropout", ",", "\n", "bidirectional", "=", "self", ".", "config", ".", "bidirectional", ",", "\n", ")", "\n", "\n", "if", "self", ".", "config", ".", "bidirectional", ":", "\n", "            ", "hidden_dims", "=", "self", ".", "config", ".", "hidden_dims", "*", "2", "\n", "", "else", ":", "\n", "            ", "hidden_dims", "=", "self", ".", "config", ".", "hidden_dims", "\n", "\n", "", "self", ".", "model", ".", "linear_class", "=", "nn", ".", "Linear", "(", "\n", "hidden_dims", "*", "self", ".", "config", ".", "num_layers", ",", "self", ".", "config", ".", "num_classes", ",", "bias", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.lstm.LSTM.logits": [[56, 71], ["lstm.LSTM.model.lstm.forward", "lstm.LSTM.model.clayernorm", "lstm.LSTM.model.linear_class.forward", "lstm.LSTM.model.inlayernorm", "c.transpose().contiguous().view", "c.transpose().contiguous", "c.transpose"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.forward", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.forward"], ["", "def", "logits", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "use_layernorm", ":", "\n", "            ", "x", "=", "self", ".", "model", ".", "inlayernorm", "(", "x", ")", "\n", "\n", "", "outputs", ",", "last_state_list", "=", "self", ".", "model", ".", "lstm", ".", "forward", "(", "x", ")", "\n", "\n", "h", ",", "c", "=", "last_state_list", "\n", "\n", "nlayers", ",", "batchsize", ",", "n_hidden", "=", "c", ".", "shape", "\n", "h", "=", "self", ".", "model", ".", "clayernorm", "(", "\n", "c", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batchsize", ",", "nlayers", "*", "n_hidden", ")", "\n", ")", "\n", "logits", "=", "self", ".", "model", ".", "linear_class", ".", "forward", "(", "h", ")", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.lstm.LSTM.forward": [[72, 75], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "lstm.LSTM.logits"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.lstm.LSTM.logits"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logprobabilities", "=", "F", ".", "log_softmax", "(", "self", ".", "logits", "(", "x", ")", ",", "dim", "=", "-", "1", ")", "\n", "return", "logprobabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.lstm.LSTM.load_optimizer": [[76, 82], ["torch.Adam", "torch.Adam", "torch.Adam", "lstm.LSTM.model.parameters"], "methods", ["None"], ["", "def", "load_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load the optimizer\"\"\"", "\n", "return", "optim", ".", "Adam", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "learning_rate", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "weight_decay", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet50.__init__": [[10, 22], ["base.BaseMulticlassClassifier.__init__", "torchvision.resnet50", "torch.Linear", "torchvision.resnet50", "resnet.ResNet50.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "resnet50", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "num_ftrs", "=", "self", ".", "model", ".", "fc", ".", "in_features", "\n", "self", ".", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "resnet50", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet50.forward": [[24, 26], ["resnet.ResNet50.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet50.freeze": [[27, 32], ["resnet.ResNet50.model.parameters", "resnet.ResNet50.model.fc.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "fc", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet50.extract_features": [[33, 38], ["torch.Sequential", "list", "resnet.ResNet50.model.children"], "methods", ["None"], ["", "", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet152.__init__": [[43, 55], ["base.BaseMulticlassClassifier.__init__", "torchvision.resnet152", "torch.Linear", "torchvision.resnet152", "resnet.ResNet152.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "resnet152", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "num_ftrs", "=", "self", ".", "model", ".", "fc", ".", "in_features", "\n", "self", ".", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "resnet152", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet152.forward": [[57, 59], ["resnet.ResNet152.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet152.extract_features": [[60, 65], ["torch.Sequential", "list", "resnet.ResNet152.model.children"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet152.freeze": [[66, 71], ["resnet.ResNet152.model.parameters", "resnet.ResNet152.model.fc.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "fc", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet50MultiLabel.__init__": [[76, 88], ["base.BaseMultilabelClassifier.__init__", "torchvision.resnet50", "torch.Linear", "torchvision.resnet50", "resnet.ResNet50MultiLabel.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "resnet50", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "num_ftrs", "=", "self", ".", "model", ".", "fc", ".", "in_features", "\n", "self", ".", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "resnet50", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet50MultiLabel.forward": [[90, 92], ["resnet.ResNet50MultiLabel.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet50MultiLabel.extract_features": [[93, 98], ["torch.Sequential", "list", "resnet.ResNet50MultiLabel.model.children"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet50MultiLabel.freeze": [[99, 104], ["resnet.ResNet50MultiLabel.model.parameters", "resnet.ResNet50MultiLabel.model.fc.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "fc", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet152MultiLabel.__init__": [[109, 121], ["base.BaseMultilabelClassifier.__init__", "torchvision.resnet152", "torch.Linear", "torchvision.resnet152", "resnet.ResNet152MultiLabel.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "resnet152", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "num_ftrs", "=", "self", ".", "model", ".", "fc", ".", "in_features", "\n", "self", ".", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "resnet152", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet152MultiLabel.forward": [[123, 125], ["resnet.ResNet152MultiLabel.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet152MultiLabel.extract_features": [[126, 131], ["torch.Sequential", "list", "resnet.ResNet152MultiLabel.model.children"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.resnet.ResNet152MultiLabel.freeze": [[132, 137], ["resnet.ResNet152MultiLabel.model.parameters", "resnet.ResNet152MultiLabel.model.fc.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "fc", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.densenet.DenseNet161.__init__": [[10, 22], ["base.BaseMulticlassClassifier.__init__", "torchvision.densenet161", "torch.Linear", "torchvision.densenet161", "densenet.DenseNet161.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "densenet161", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "num_ftrs", "=", "self", ".", "model", ".", "classifier", ".", "in_features", "\n", "self", ".", "model", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "densenet161", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.densenet.DenseNet161.forward": [[24, 26], ["densenet.DenseNet161.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.densenet.DenseNet161.extract_features": [[27, 32], ["torch.Sequential", "list", "densenet.DenseNet161.model.children"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.densenet.DenseNet161.freeze": [[33, 38], ["densenet.DenseNet161.model.parameters", "densenet.DenseNet161.model.classifier.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.densenet.DenseNet161MultiLabel.__init__": [[43, 55], ["base.BaseMultilabelClassifier.__init__", "torchvision.densenet161", "torch.Linear", "torchvision.densenet161", "densenet.DenseNet161MultiLabel.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "densenet161", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "num_ftrs", "=", "self", ".", "model", ".", "classifier", ".", "in_features", "\n", "self", ".", "model", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "densenet161", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.densenet.DenseNet161MultiLabel.forward": [[57, 59], ["densenet.DenseNet161MultiLabel.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.densenet.DenseNet161MultiLabel.extract_features": [[60, 65], ["torch.Sequential", "list", "densenet.DenseNet161MultiLabel.model.children"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "self", ".", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.densenet.DenseNet161MultiLabel.freeze": [[66, 71], ["densenet.DenseNet161MultiLabel.model.parameters", "densenet.DenseNet161MultiLabel.model.classifier.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.inceptiontime.InceptionTime.__init__": [[25, 47], ["base.BaseMulticlassClassifier.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.AdaptiveAvgPool1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "inceptiontime.InceptionModule", "range"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "BaseMulticlassClassifier", ".", "__init__", "(", "self", ",", "config", ")", "\n", "\n", "self", ".", "model", ".", "inlinear", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "config", ".", "input_dim", ",", "self", ".", "config", ".", "hidden_dims", "*", "4", "\n", ")", "\n", "\n", "self", ".", "model", ".", "inception_modules_list", "=", "[", "\n", "InceptionModule", "(", "\n", "kernel_size", "=", "32", ",", "\n", "num_filters", "=", "self", ".", "config", ".", "hidden_dims", "*", "4", ",", "\n", "use_bias", "=", "self", ".", "config", ".", "use_bias", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "config", ".", "num_layers", ")", "\n", "]", "\n", "\n", "self", ".", "inception_modules", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "model", ".", "inception_modules_list", ")", "\n", "\n", "self", ".", "model", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool1d", "(", "1", ")", "\n", "self", ".", "model", ".", "outlinear", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "config", ".", "hidden_dims", "*", "4", ",", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.inceptiontime.InceptionTime.forward": [[49, 62], ["inceptiontime.InceptionTime.transpose", "inceptiontime.InceptionTime.model.inlinear().transpose", "range", "inceptiontime.InceptionTime.model.avgpool().squeeze", "inceptiontime.InceptionTime.model.outlinear", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "inceptiontime.InceptionTime.model.inlinear", "inceptiontime.InceptionTime.model.avgpool", "inceptiontime.InceptionTime.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# N x T x D -> N x D x T", "\n", "        ", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "# expand dimensions", "\n", "x", "=", "self", ".", "model", ".", "inlinear", "(", "x", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "config", ".", "num_layers", ")", ":", "\n", "            ", "x", "=", "self", ".", "model", ".", "inception_modules_list", "[", "i", "]", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "model", ".", "avgpool", "(", "x", ")", ".", "squeeze", "(", "2", ")", "\n", "x", "=", "self", ".", "model", ".", "outlinear", "(", "x", ")", "\n", "logprobabilities", "=", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "return", "logprobabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.inceptiontime.InceptionTime.load_optimizer": [[63, 69], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "inceptiontime.InceptionTime.model.parameters"], "methods", ["None"], ["", "def", "load_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load the optimizer\"\"\"", "\n", "return", "optim", ".", "Adam", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "learning_rate", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "weight_decay", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.inceptiontime.InceptionModule.__init__": [[73, 114], ["torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "inceptiontime.InceptionModule.to", "torch.Conv1d().to", "torch.Conv1d().to", "torch.Conv1d().to", "torch.Conv1d().to", "torch.Conv1d().to", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "kernel_size", "=", "32", ",", "\n", "num_filters", "=", "128", ",", "\n", "residual", "=", "True", ",", "\n", "use_bias", "=", "False", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", "InceptionModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "residual", "=", "residual", "\n", "\n", "self", ".", "bottleneck", "=", "nn", ".", "Linear", "(", "num_filters", ",", "out_features", "=", "1", ",", "bias", "=", "use_bias", ")", "\n", "\n", "kernel_size_s", "=", "[", "kernel_size", "//", "(", "2", "**", "i", ")", "for", "i", "in", "range", "(", "3", ")", "]", "\n", "self", ".", "convolutions", "=", "[", "\n", "nn", ".", "Conv1d", "(", "\n", "1", ",", "\n", "num_filters", "//", "4", ",", "\n", "kernel_size", "=", "kernel_size", "+", "1", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "use_bias", ",", "\n", "padding", "=", "kernel_size", "//", "2", ",", "\n", ")", ".", "to", "(", "device", ")", "\n", "for", "kernel_size", "in", "kernel_size_s", "\n", "]", "\n", "\n", "self", ".", "pool_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "Conv1d", "(", "\n", "num_filters", ",", "num_filters", "//", "4", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "use_bias", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "bn_relu", "=", "nn", ".", "Sequential", "(", "nn", ".", "BatchNorm1d", "(", "num_filters", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "if", "residual", ":", "\n", "            ", "self", ".", "residual_relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "# Maybe keep self.to here (it doesn't inherit from base)", "\n", "", "self", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.inceptiontime.InceptionModule.forward": [[115, 126], ["inceptiontime.InceptionModule.bottleneck().transpose", "inceptiontime.InceptionModule.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "inceptiontime.InceptionModule.bn_relu", "conv", "inceptiontime.InceptionModule.pool_conv", "inceptiontime.InceptionModule.residual_relu", "inceptiontime.InceptionModule.bottleneck", "input_tensor.contiguous", "input_tensor.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ")", ":", "\n", "# collapse feature dimension", "\n", "        ", "input_inception", "=", "self", ".", "bottleneck", "(", "input_tensor", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "features", "=", "[", "conv", "(", "input_inception", ")", "for", "conv", "in", "self", ".", "convolutions", "]", "\n", "features", ".", "append", "(", "self", ".", "pool_conv", "(", "input_tensor", ".", "contiguous", "(", ")", ")", ")", "\n", "features", "=", "torch", ".", "cat", "(", "features", ",", "dim", "=", "1", ")", "\n", "features", "=", "self", ".", "bn_relu", "(", "features", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "features", "=", "features", "+", "input_tensor", "\n", "features", "=", "self", ".", "residual_relu", "(", "features", ")", "\n", "", "return", "features", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.UnsupervisedDeepMulticlassClassifier.__init__": [[17, 32], ["base.BaseMulticlassClassifier.__init__", "unsupervised.vgg16", "int", "clustering.Kmeans", "unsupervised.UnsupervisedDeepMulticlassClassifier.model.top_layer.weight.size"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.vgg16"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "learning_rate", "=", "self", ".", "config", ".", "learning_rate", "\n", "self", ".", "weight_decay", "=", "self", ".", "config", ".", "weight_decay", "\n", "self", ".", "number_of_clusters", "=", "self", ".", "config", ".", "number_of_clusters", "\n", "self", ".", "sobel", "=", "self", ".", "config", ".", "sobel", "\n", "\n", "self", ".", "model", "=", "vgg16", "(", "sobel", "=", "self", ".", "sobel", ")", "\n", "self", ".", "fd", "=", "int", "(", "self", ".", "model", ".", "top_layer", ".", "weight", ".", "size", "(", ")", "[", "1", "]", ")", "\n", "self", ".", "model", ".", "top_layer", "=", "None", "\n", "\n", "self", ".", "deepcluster", "=", "Kmeans", "(", "self", ".", "number_of_clusters", ")", "\n", "\n", "self", ".", "reassign", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.UnsupervisedDeepMulticlassClassifier.train_epoch": [[33, 95], ["torch.Sequential", "torch.Sequential", "unsupervised.compute_features", "unsupervised.UnsupervisedDeepMulticlassClassifier.deepcluster.cluster", "clustering.cluster_assign", "unsupervised.UnifLabelSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "list", "list.append", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "unsupervised.UnsupervisedDeepMulticlassClassifier.model.top_layer.weight.data.normal_", "unsupervised.UnsupervisedDeepMulticlassClassifier.model.top_layer.bias.data.zero_", "unsupervised.UnsupervisedDeepMulticlassClassifier.model.top_layer.to", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "super().train_epoch", "len", "int", "unsupervised.UnsupervisedDeepMulticlassClassifier.model.classifier.children", "torch.ReLU().to", "torch.ReLU().to", "len", "unsupervised.UnsupervisedDeepMulticlassClassifier.model.top_layer.parameters", "list", "len", "torch.ReLU", "torch.ReLU", "unsupervised.UnsupervisedDeepMulticlassClassifier.model.classifier.children"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.compute_features", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.kmeans.Kmeans.cluster", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.clustering.utils.cluster_assign", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.train_epoch"], ["", "def", "train_epoch", "(", "self", ",", "epoch", ",", "dataloader", ",", "optimizer", ",", "criterion", ",", "iterations_log", ")", ":", "\n", "        ", "\"\"\"Overriding train epoch to implement the custom logic for the unsupervised classifier\"\"\"", "\n", "self", ".", "model", ".", "top_layer", "=", "None", "\n", "self", ".", "model", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "*", "list", "(", "self", ".", "model", ".", "classifier", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", "\n", ")", "\n", "\n", "# get the original dataset", "\n", "dataset", "=", "dataloader", ".", "dataset", "\n", "\n", "# get the features for the whole dataset", "\n", "features", "=", "compute_features", "(", "\n", "dataloader", ",", "\n", "self", ".", "model", ",", "\n", "len", "(", "dataloader", ")", ",", "\n", "dataset", ".", "config", ".", "batch_size", ",", "\n", "self", ".", "device", ",", "\n", ")", "\n", "\n", "# cluster the features]", "\n", "clustering_loss", "=", "self", ".", "deepcluster", ".", "cluster", "(", "features", ")", "\n", "\n", "# assign pseudo-labels", "\n", "train_dataset", "=", "cluster_assign", "(", "self", ".", "deepcluster", ".", "images_lists", ",", "dataset", ")", "\n", "\n", "# uniformly sample per target", "\n", "sampler", "=", "UnifLabelSampler", "(", "\n", "int", "(", "self", ".", "reassign", "*", "len", "(", "train_dataset", ")", ")", ",", "self", ".", "deepcluster", ".", "images_lists", "\n", ")", "\n", "\n", "train_dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "dataset", ".", "batch_size", ",", "\n", "num_workers", "=", "dataset", ".", "num_workers", ",", "\n", "sampler", "=", "sampler", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "# set last fully connected layer", "\n", "mlp", "=", "list", "(", "self", ".", "model", ".", "classifier", ".", "children", "(", ")", ")", "\n", "mlp", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ".", "to", "(", "self", ".", "device", ")", ")", "\n", "self", ".", "model", ".", "classifier", "=", "nn", ".", "Sequential", "(", "*", "mlp", ")", "\n", "self", ".", "model", ".", "top_layer", "=", "nn", ".", "Linear", "(", "self", ".", "fd", ",", "len", "(", "self", ".", "deepcluster", ".", "images_lists", ")", ")", "\n", "self", ".", "model", ".", "top_layer", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "self", ".", "model", ".", "top_layer", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "model", ".", "top_layer", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# create an optimizer for the last fc layer", "\n", "optimizer_tl", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "model", ".", "top_layer", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "learning_rate", ",", "\n", "weight_decay", "=", "10", "**", "self", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "# send both optimizers", "\n", "optimizers", "=", "(", "\n", "optimizer", ",", "\n", "optimizer_tl", ",", "\n", ")", "\n", "\n", "return", "super", "(", ")", ".", "train_epoch", "(", "\n", "epoch", ",", "train_dataloader", ",", "optimizers", ",", "criterion", ",", "iterations_log", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.UnsupervisedDeepMulticlassClassifier.forward": [[97, 99], ["unsupervised.UnsupervisedDeepMulticlassClassifier.model.forward"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "forward", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.VGG.__init__": [[123, 152], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "unsupervised.VGG._initialize_weights", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.weight.data.fill_", "torch.Conv2d.bias.data.zero_", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d.weight.data[].copy_", "torch.Conv2d.weight.data[].copy_", "torch.Conv2d.bias.data.zero_", "torch.Sequential", "torch.Sequential", "unsupervised.VGG.sobel.parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.UNetEfficientNet._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "num_classes", ",", "sobel", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "512", "*", "7", "*", "7", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "0.5", ")", ",", "\n", "nn", ".", "Linear", "(", "4096", ",", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", ")", "\n", "self", ".", "top_layer", "=", "nn", ".", "Linear", "(", "4096", ",", "num_classes", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "if", "sobel", ":", "\n", "            ", "grayscale", "=", "nn", ".", "Conv2d", "(", "3", ",", "1", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "grayscale", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", "/", "3.0", ")", "\n", "grayscale", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "sobel_filter", "=", "nn", ".", "Conv2d", "(", "1", ",", "2", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "sobel_filter", ".", "weight", ".", "data", "[", "0", ",", "0", "]", ".", "copy_", "(", "\n", "torch", ".", "FloatTensor", "(", "[", "[", "1", ",", "0", ",", "-", "1", "]", ",", "[", "2", ",", "0", ",", "-", "2", "]", ",", "[", "1", ",", "0", ",", "-", "1", "]", "]", ")", "\n", ")", "\n", "sobel_filter", ".", "weight", ".", "data", "[", "1", ",", "0", "]", ".", "copy_", "(", "\n", "torch", ".", "FloatTensor", "(", "[", "[", "1", ",", "2", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "2", ",", "-", "1", "]", "]", ")", "\n", ")", "\n", "sobel_filter", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "sobel", "=", "nn", ".", "Sequential", "(", "grayscale", ",", "sobel_filter", ")", "\n", "for", "p", "in", "self", ".", "sobel", ".", "parameters", "(", ")", ":", "\n", "                ", "p", ".", "requires_grad", "=", "False", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "sobel", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.VGG.forward": [[153, 162], ["unsupervised.VGG.features", "unsupervised.VGG.view", "unsupervised.VGG.classifier", "unsupervised.VGG.sobel", "unsupervised.VGG.size", "unsupervised.VGG.top_layer"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "sobel", ":", "\n", "            ", "x", "=", "self", ".", "sobel", "(", "x", ")", "\n", "", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "if", "self", ".", "top_layer", ":", "\n", "            ", "x", "=", "self", ".", "top_layer", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.VGG._initialize_weights": [[163, 177], ["enumerate", "unsupervised.VGG.modules", "isinstance", "range", "isinstance", "m.weight.data[].normal_", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "math.sqrt", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "y", ",", "m", "in", "enumerate", "(", "self", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "for", "i", "in", "range", "(", "m", ".", "out_channels", ")", ":", "\n", "                    ", "m", ".", "weight", ".", "data", "[", "i", "]", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", ")", "\n", "", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.UnifLabelSampler.__init__": [[228, 232], ["unsupervised.UnifLabelSampler.generate_indexes_epoch"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.UnifLabelSampler.generate_indexes_epoch"], ["def", "__init__", "(", "self", ",", "N", ",", "images_lists", ")", ":", "\n", "        ", "self", ".", "N", "=", "N", "\n", "self", ".", "images_lists", "=", "images_lists", "\n", "self", ".", "indexes", "=", "self", ".", "generate_indexes_epoch", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.UnifLabelSampler.generate_indexes_epoch": [[233, 247], ["numpy.zeros", "range", "numpy.random.shuffle", "res[].astype", "int", "len", "numpy.random.choice", "len", "len", "len"], "methods", ["None"], ["", "def", "generate_indexes_epoch", "(", "self", ")", ":", "\n", "        ", "size_per_pseudolabel", "=", "int", "(", "self", ".", "N", "/", "len", "(", "self", ".", "images_lists", ")", ")", "+", "1", "\n", "res", "=", "np", ".", "zeros", "(", "size_per_pseudolabel", "*", "len", "(", "self", ".", "images_lists", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "images_lists", ")", ")", ":", "\n", "            ", "indexes", "=", "np", ".", "random", ".", "choice", "(", "\n", "self", ".", "images_lists", "[", "i", "]", ",", "\n", "size_per_pseudolabel", ",", "\n", "replace", "=", "(", "len", "(", "self", ".", "images_lists", "[", "i", "]", ")", "<=", "size_per_pseudolabel", ")", ",", "\n", ")", "\n", "res", "[", "i", "*", "size_per_pseudolabel", ":", "(", "i", "+", "1", ")", "*", "size_per_pseudolabel", "]", "=", "indexes", "\n", "\n", "", "np", ".", "random", ".", "shuffle", "(", "res", ")", "\n", "return", "res", "[", ":", "self", ".", "N", "]", ".", "astype", "(", "\"int\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.UnifLabelSampler.__iter__": [[248, 250], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "indexes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.UnifLabelSampler.__len__": [[251, 253], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "N", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.compute_features": [[101, 120], ["model.eval", "enumerate", "torch.autograd.Variable", "torch.autograd.Variable", "model().data.cpu().numpy", "input_tensor.to", "numpy.zeros().astype", "model().data.cpu().numpy.astype", "model().data.cpu().numpy.astype", "model().data.cpu", "len", "numpy.zeros", "model"], "function", ["None"], ["", "", "def", "compute_features", "(", "dataloader", ",", "model", ",", "N", ",", "batch", ",", "device", ")", ":", "\n", "    ", "\"\"\"Compute features for images\"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# discard the label information in the dataloader", "\n", "for", "i", ",", "(", "input_tensor", ",", "_", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "        ", "input_var", "=", "torch", ".", "autograd", ".", "Variable", "(", "input_tensor", ".", "to", "(", "device", ")", ",", "volatile", "=", "True", ")", "\n", "aux", "=", "model", "(", "input_var", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "            ", "features", "=", "np", ".", "zeros", "(", "(", "N", ",", "aux", ".", "shape", "[", "1", "]", ")", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "\n", "", "if", "i", "<", "len", "(", "dataloader", ")", "-", "1", ":", "\n", "            ", "features", "[", "i", "*", "batch", ":", "(", "i", "+", "1", ")", "*", "batch", "]", "=", "aux", ".", "astype", "(", "\"float32\"", ")", "\n", "", "else", ":", "\n", "# special treatment for final batch", "\n", "            ", "features", "[", "i", "*", "batch", ":", "]", "=", "aux", ".", "astype", "(", "\"float32\"", ")", "\n", "\n", "", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.make_layers": [[179, 213], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "", "", "def", "make_layers", "(", "input_dim", ",", "batch_norm", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "input_dim", "\n", "cfg", "=", "[", "\n", "64", ",", "\n", "64", ",", "\n", "\"M\"", ",", "\n", "128", ",", "\n", "128", ",", "\n", "\"M\"", ",", "\n", "256", ",", "\n", "256", ",", "\n", "256", ",", "\n", "\"M\"", ",", "\n", "512", ",", "\n", "512", ",", "\n", "512", ",", "\n", "\"M\"", ",", "\n", "512", ",", "\n", "512", ",", "\n", "512", ",", "\n", "\"M\"", ",", "\n", "]", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "\"M\"", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.vgg16": [[215, 219], ["unsupervised.VGG", "int", "unsupervised.make_layers"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unsupervised.make_layers"], ["", "def", "vgg16", "(", "sobel", "=", "False", ",", "bn", "=", "True", ",", "out", "=", "1000", ")", ":", "\n", "    ", "dim", "=", "2", "+", "int", "(", "not", "sobel", ")", "\n", "model", "=", "VGG", "(", "make_layers", "(", "dim", ",", "bn", ")", ",", "out", ",", "sobel", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.BasicBlock3x3.__init__": [[45, 54], ["torch.Module.__init__", "msresnet.conv3x3", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "msresnet.conv3x3", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.conv3x3", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes3", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes3", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.BasicBlock3x3.forward": [[55, 72], ["msresnet.BasicBlock3x3.conv1", "msresnet.BasicBlock3x3.bn1", "msresnet.BasicBlock3x3.relu", "msresnet.BasicBlock3x3.conv2", "msresnet.BasicBlock3x3.bn2", "msresnet.BasicBlock3x3.relu", "msresnet.BasicBlock3x3.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.BasicBlock5x5.__init__": [[77, 86], ["torch.Module.__init__", "msresnet.conv5x5", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "msresnet.conv5x5", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.conv5x5", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.conv5x5"], ["def", "__init__", "(", "self", ",", "inplanes5", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock5x5", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv5x5", "(", "inplanes5", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv5x5", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.BasicBlock5x5.forward": [[87, 105], ["msresnet.BasicBlock5x5.conv1", "msresnet.BasicBlock5x5.bn1", "msresnet.BasicBlock5x5.relu", "msresnet.BasicBlock5x5.conv2", "msresnet.BasicBlock5x5.bn2", "msresnet.BasicBlock5x5.relu", "msresnet.BasicBlock5x5.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "d", "=", "residual", ".", "shape", "[", "2", "]", "-", "out", ".", "shape", "[", "2", "]", "\n", "out1", "=", "residual", "[", ":", ",", ":", ",", "0", ":", "-", "d", "]", "+", "out", "\n", "out1", "=", "self", ".", "relu", "(", "out1", ")", "\n", "\n", "return", "out1", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.BasicBlock7x7.__init__": [[110, 119], ["torch.Module.__init__", "msresnet.conv7x7", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "msresnet.conv7x7", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.conv7x7", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.conv7x7"], ["def", "__init__", "(", "self", ",", "inplanes7", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock7x7", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv7x7", "(", "inplanes7", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv7x7", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm1d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.BasicBlock7x7.forward": [[120, 138], ["msresnet.BasicBlock7x7.conv1", "msresnet.BasicBlock7x7.bn1", "msresnet.BasicBlock7x7.relu", "msresnet.BasicBlock7x7.conv2", "msresnet.BasicBlock7x7.bn2", "msresnet.BasicBlock7x7.relu", "msresnet.BasicBlock7x7.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "d", "=", "residual", ".", "shape", "[", "2", "]", "-", "out", ".", "shape", "[", "2", "]", "\n", "out1", "=", "residual", "[", ":", ",", ":", ",", "0", ":", "-", "d", "]", "+", "out", "\n", "out1", "=", "self", ".", "relu", "(", "out1", ")", "\n", "\n", "return", "out1", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet.__init__": [[144, 213], ["base.BaseMulticlassClassifier.__init__", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "msresnet.MSResNet._make_layer3", "msresnet.MSResNet._make_layer3", "msresnet.MSResNet._make_layer3", "torch.AvgPool1d", "torch.AvgPool1d", "torch.AvgPool1d", "torch.AvgPool1d", "msresnet.MSResNet._make_layer5", "msresnet.MSResNet._make_layer5", "msresnet.MSResNet._make_layer5", "torch.AvgPool1d", "torch.AvgPool1d", "torch.AvgPool1d", "torch.AvgPool1d", "msresnet.MSResNet._make_layer7", "msresnet.MSResNet._make_layer7", "msresnet.MSResNet._make_layer7", "torch.AvgPool1d", "torch.AvgPool1d", "torch.AvgPool1d", "torch.AvgPool1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet._make_layer3", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet._make_layer3", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet._make_layer3", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet._make_layer5", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet._make_layer5", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet._make_layer5", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet._make_layer7", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet._make_layer7", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet._make_layer7"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "inplanes3", "=", "self", ".", "config", ".", "hidden_dims", "\n", "self", ".", "inplanes5", "=", "self", ".", "config", ".", "hidden_dims", "\n", "self", ".", "inplanes7", "=", "self", ".", "config", ".", "hidden_dims", "\n", "stride", "=", "2", "\n", "\n", "self", ".", "model", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "\n", "self", ".", "config", ".", "input_dim", ",", "\n", "self", ".", "config", ".", "hidden_dims", ",", "\n", "kernel_size", "=", "7", ",", "\n", "stride", "=", "2", ",", "\n", "padding", "=", "3", ",", "\n", "bias", "=", "False", ",", "\n", ")", "\n", "self", ".", "model", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "self", ".", "config", ".", "hidden_dims", ")", "\n", "self", ".", "model", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "model", ".", "maxpool", "=", "nn", ".", "MaxPool1d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "model", ".", "layer3x3_1", "=", "self", ".", "_make_layer3", "(", "\n", "BasicBlock3x3", ",", "self", ".", "config", ".", "hidden_dims", ",", "self", ".", "config", ".", "layers", "[", "0", "]", ",", "stride", "=", "stride", "\n", ")", "\n", "self", ".", "model", ".", "layer3x3_2", "=", "self", ".", "_make_layer3", "(", "\n", "BasicBlock3x3", ",", "\n", "2", "*", "self", ".", "config", ".", "hidden_dims", ",", "\n", "self", ".", "config", ".", "layers", "[", "1", "]", ",", "\n", "stride", "=", "stride", ",", "\n", ")", "\n", "self", ".", "model", ".", "layer3x3_3", "=", "self", ".", "_make_layer3", "(", "\n", "BasicBlock3x3", ",", "\n", "4", "*", "self", ".", "config", ".", "hidden_dims", ",", "\n", "self", ".", "config", ".", "layers", "[", "2", "]", ",", "\n", "stride", "=", "stride", ",", "\n", ")", "\n", "\n", "# maxplooing kernel size: 16, 11, 6", "\n", "self", ".", "model", ".", "maxpool3", "=", "nn", ".", "AvgPool1d", "(", "kernel_size", "=", "16", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "model", ".", "layer5x5_1", "=", "self", ".", "_make_layer5", "(", "\n", "BasicBlock5x5", ",", "self", ".", "config", ".", "hidden_dims", ",", "self", ".", "config", ".", "layers", "[", "0", "]", ",", "stride", "=", "stride", "\n", ")", "\n", "self", ".", "model", ".", "layer5x5_2", "=", "self", ".", "_make_layer5", "(", "\n", "BasicBlock5x5", ",", "\n", "2", "*", "self", ".", "config", ".", "hidden_dims", ",", "\n", "self", ".", "config", ".", "layers", "[", "1", "]", ",", "\n", "stride", "=", "stride", ",", "\n", ")", "\n", "self", ".", "model", ".", "layer5x5_3", "=", "self", ".", "_make_layer5", "(", "\n", "BasicBlock5x5", ",", "\n", "4", "*", "self", ".", "config", ".", "hidden_dims", ",", "\n", "self", ".", "config", ".", "layers", "[", "2", "]", ",", "\n", "stride", "=", "stride", ",", "\n", ")", "\n", "self", ".", "model", ".", "maxpool5", "=", "nn", ".", "AvgPool1d", "(", "kernel_size", "=", "11", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "model", ".", "layer7x7_1", "=", "self", ".", "_make_layer7", "(", "\n", "BasicBlock7x7", ",", "self", ".", "config", ".", "hidden_dims", ",", "self", ".", "config", ".", "layers", "[", "0", "]", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "model", ".", "layer7x7_2", "=", "self", ".", "_make_layer7", "(", "\n", "BasicBlock7x7", ",", "2", "*", "self", ".", "config", ".", "hidden_dims", ",", "self", ".", "config", ".", "layers", "[", "1", "]", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "model", ".", "layer7x7_3", "=", "self", ".", "_make_layer7", "(", "\n", "BasicBlock7x7", ",", "4", "*", "self", ".", "config", ".", "hidden_dims", ",", "self", ".", "config", ".", "layers", "[", "2", "]", ",", "stride", "=", "2", "\n", ")", "\n", "self", ".", "model", ".", "maxpool7", "=", "nn", ".", "AvgPool1d", "(", "kernel_size", "=", "6", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "self", ".", "model", ".", "fc", "=", "nn", ".", "Linear", "(", "\n", "4", "*", "self", ".", "config", ".", "hidden_dims", "*", "3", ",", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet._make_layer3": [[215, 236], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "block"], "methods", ["None"], ["", "def", "_make_layer3", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "2", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes3", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "\n", "self", ".", "inplanes3", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes3", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes3", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes3", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet._make_layer5": [[237, 258], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "block"], "methods", ["None"], ["", "def", "_make_layer5", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "2", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes5", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "\n", "self", ".", "inplanes5", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes5", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes5", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes5", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet._make_layer7": [[259, 280], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "block"], "methods", ["None"], ["", "def", "_make_layer7", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "2", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes7", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "\n", "self", ".", "inplanes7", ",", "\n", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes7", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes7", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes7", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet._logits": [[281, 312], ["msresnet.MSResNet.transpose", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "torch.nn.functional.interpolate", "msresnet.MSResNet.model.conv1", "msresnet.MSResNet.model.bn1", "msresnet.MSResNet.model.relu", "msresnet.MSResNet.model.maxpool", "msresnet.MSResNet.model.layer3x3_1", "msresnet.MSResNet.model.layer3x3_2", "msresnet.MSResNet.model.layer3x3_3", "msresnet.MSResNet.model.maxpool3", "msresnet.MSResNet.model.layer5x5_1", "msresnet.MSResNet.model.layer5x5_2", "msresnet.MSResNet.model.layer5x5_3", "msresnet.MSResNet.model.maxpool5", "msresnet.MSResNet.model.layer7x7_1", "msresnet.MSResNet.model.layer7x7_2", "msresnet.MSResNet.model.layer7x7_3", "msresnet.MSResNet.model.maxpool7", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "out.squeeze.squeeze.squeeze", "msresnet.MSResNet.model.fc"], "methods", ["None"], ["", "def", "_logits", "(", "self", ",", "x0", ")", ":", "\n", "# require NxTxD format", "\n", "        ", "x0", "=", "x0", ".", "transpose", "(", "1", ",", "2", ")", "\n", "x0", "=", "torch", ".", "nn", ".", "functional", ".", "interpolate", "(", "x0", ",", "size", "=", "512", ")", "\n", "\n", "x0", "=", "self", ".", "model", ".", "conv1", "(", "x0", ")", "\n", "x0", "=", "self", ".", "model", ".", "bn1", "(", "x0", ")", "\n", "x0", "=", "self", ".", "model", ".", "relu", "(", "x0", ")", "\n", "x0", "=", "self", ".", "model", ".", "maxpool", "(", "x0", ")", "\n", "\n", "x", "=", "self", ".", "model", ".", "layer3x3_1", "(", "x0", ")", "\n", "x", "=", "self", ".", "model", ".", "layer3x3_2", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "layer3x3_3", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "maxpool3", "(", "x", ")", "\n", "\n", "y", "=", "self", ".", "model", ".", "layer5x5_1", "(", "x0", ")", "\n", "y", "=", "self", ".", "model", ".", "layer5x5_2", "(", "y", ")", "\n", "y", "=", "self", ".", "model", ".", "layer5x5_3", "(", "y", ")", "\n", "y", "=", "self", ".", "model", ".", "maxpool5", "(", "y", ")", "\n", "\n", "z", "=", "self", ".", "model", ".", "layer7x7_1", "(", "x0", ")", "\n", "z", "=", "self", ".", "model", ".", "layer7x7_2", "(", "z", ")", "\n", "z", "=", "self", ".", "model", ".", "layer7x7_3", "(", "z", ")", "\n", "z", "=", "self", ".", "model", ".", "maxpool7", "(", "z", ")", "\n", "\n", "out", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", ",", "z", "]", ",", "dim", "=", "1", ")", "\n", "\n", "out", "=", "out", ".", "squeeze", "(", ")", "\n", "out1", "=", "self", ".", "model", ".", "fc", "(", "out", ")", "\n", "\n", "return", "out1", ",", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet.forward": [[313, 319], ["msresnet.MSResNet._logits", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet._logits"], ["", "def", "forward", "(", "self", ",", "x0", ")", ":", "\n", "        ", "logits", ",", "_", "=", "self", ".", "_logits", "(", "x0", ")", "\n", "\n", "logprobabilities", "=", "Functional", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "logprobabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.MSResNet.load_optimizer": [[320, 326], ["torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "msresnet.MSResNet.model.parameters"], "methods", ["None"], ["", "def", "load_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load the optimizer\"\"\"", "\n", "return", "optim", ".", "Adam", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "learning_rate", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "weight_decay", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.conv3x3": [[23, 27], ["torch.Conv1d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv1d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.conv5x5": [[30, 33], ["torch.Conv1d"], "function", ["None"], ["", "def", "conv5x5", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv1d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.msresnet.conv7x7": [[36, 39], ["torch.Conv1d"], "function", ["None"], ["", "def", "conv7x7", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv1d", "(", "\n", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "7", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNet.__init__": [[10, 24], ["base.BaseMulticlassClassifier.__init__", "torchvision.alexnet", "alexnet.AlexNet.model.classifier.add_module", "torchvision.alexnet", "torch.Linear", "alexnet.AlexNet.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "alexnet", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "1", "]", "# remove final layer", "\n", "self", ".", "model", ".", "classifier", ".", "add_module", "(", "\n", "\"6\"", ",", "nn", ".", "Linear", "(", "4096", ",", "self", ".", "config", ".", "num_classes", ",", "bias", "=", "True", ")", "\n", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "alexnet", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNet.forward": [[26, 28], ["alexnet.AlexNet.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNet.extract_features": [[29, 34], ["None"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "3", "]", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNet.freeze": [[35, 40], ["alexnet.AlexNet.model.parameters", "alexnet.AlexNet.model.classifier.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.__init__": [[45, 60], ["base.BaseMultilabelClassifier.__init__", "torchvision.alexnet", "alexnet.AlexNetMultiLabel.model.classifier.add_module", "torchvision.alexnet", "torch.Linear", "alexnet.AlexNetMultiLabel.freeze"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "if", "self", ".", "config", ".", "pretrained", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "alexnet", "(", "self", ".", "config", ".", "pretrained", ",", "False", ")", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "1", "]", "# remove final layer", "\n", "self", ".", "model", ".", "classifier", ".", "add_module", "(", "\n", "\"6\"", ",", "nn", ".", "Linear", "(", "4096", ",", "self", ".", "config", ".", "num_classes", ",", "bias", "=", "True", ")", "\n", ")", "\n", "if", "self", ".", "config", ".", "freeze", ":", "\n", "                ", "self", ".", "freeze", "(", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "alexnet", "(", "\n", "self", ".", "config", ".", "pretrained", ",", "False", ",", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.forward": [[62, 64], ["alexnet.AlexNetMultiLabel.model"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.extract_features": [[65, 70], ["None"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "\"\"\" Remove final layers if we only need to extract features \"\"\"", "\n", "self", ".", "model", ".", "classifier", "=", "self", ".", "model", ".", "classifier", "[", ":", "-", "3", "]", "\n", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.alexnet.AlexNetMultiLabel.freeze": [[71, 76], ["alexnet.AlexNetMultiLabel.model.parameters", "alexnet.AlexNetMultiLabel.model.classifier.parameters"], "methods", ["None"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "param", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "False", "\n", "", "for", "param", "in", "self", ".", "model", ".", "classifier", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "require_grad", "=", "True", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.deeplabv3.DeepLabV3.__init__": [[10, 19], ["base.BaseSegmentationClassifier.__init__", "torchvision.models.segmentation.deeplabv3_resnet101", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "model", "=", "models", ".", "segmentation", ".", "deeplabv3_resnet101", "(", "\n", "pretrained", "=", "self", ".", "config", ".", "pretrained", ",", "progress", "=", "True", "\n", ")", "\n", "\n", "# change last layer to work with different number of classes", "\n", "self", ".", "model", ".", "classifier", "[", "4", "]", "=", "nn", ".", "Conv2d", "(", "256", ",", "self", ".", "config", ".", "num_classes", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.deeplabv3.DeepLabV3.forward": [[20, 22], ["deeplabv3.DeepLabV3.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vision_transformer.VisionTransformer.__init__": [[10, 18], ["base.BaseMulticlassClassifier.__init__", "timm.create_model", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "model", "=", "timm", ".", "create_model", "(", "\n", "\"vit_base_patch16_224\"", ",", "pretrained", "=", "self", ".", "config", ".", "pretrained", "\n", ")", "\n", "self", ".", "model", ".", "head", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "768", ",", "out_features", "=", "self", ".", "config", ".", "num_classes", ",", "bias", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vision_transformer.VisionTransformer.forward": [[20, 22], ["vision_transformer.VisionTransformer.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vision_transformer.VisionTransformerMultilabel.__init__": [[27, 35], ["base.BaseMultilabelClassifier.__init__", "timm.create_model", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "model", "=", "timm", ".", "create_model", "(", "\n", "\"vit_base_patch16_224\"", ",", "pretrained", "=", "self", ".", "config", ".", "pretrained", "\n", ")", "\n", "self", ".", "model", ".", "head", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "768", ",", "out_features", "=", "self", ".", "config", ".", "num_classes", ",", "bias", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.vision_transformer.VisionTransformerMultilabel.forward": [[37, 39], ["vision_transformer.VisionTransformerMultilabel.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.transformer.TransformerModel.__init__": [[26, 45], ["base.BaseMulticlassClassifier.__init__", "torch.nn.modules.transformer.TransformerEncoderLayer", "torch.nn.modules.transformer.TransformerEncoderLayer", "torch.nn.modules.transformer.TransformerEncoderLayer", "torch.nn.modules.LayerNorm", "torch.nn.modules.LayerNorm", "torch.nn.modules.LayerNorm", "torch.nn.modules.Linear", "torch.nn.modules.Linear", "torch.nn.modules.Linear", "torch.nn.modules.ReLU", "torch.nn.modules.ReLU", "torch.nn.modules.ReLU", "torch.nn.modules.transformer.TransformerEncoder", "torch.nn.modules.transformer.TransformerEncoder", "torch.nn.modules.transformer.TransformerEncoder", "transformer.Flatten", "torch.nn.modules.Linear", "torch.nn.modules.Linear", "torch.nn.modules.Linear"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "encoder_layer", "=", "TransformerEncoderLayer", "(", "\n", "self", ".", "config", ".", "d_model", ",", "\n", "self", ".", "config", ".", "n_head", ",", "\n", "self", ".", "config", ".", "d_inner", ",", "\n", "self", ".", "config", ".", "dropout", ",", "\n", "self", ".", "config", ".", "activation", ",", "\n", ")", "\n", "encoder_norm", "=", "LayerNorm", "(", "self", ".", "config", ".", "d_model", ")", "\n", "\n", "self", ".", "model", ".", "inlinear", "=", "Linear", "(", "self", ".", "config", ".", "input_dim", ",", "self", ".", "config", ".", "d_model", ")", "\n", "self", ".", "model", ".", "relu", "=", "ReLU", "(", ")", "\n", "self", ".", "model", ".", "transformerencoder", "=", "TransformerEncoder", "(", "\n", "encoder_layer", ",", "self", ".", "config", ".", "n_layers", ",", "encoder_norm", "\n", ")", "\n", "self", ".", "model", ".", "flatten", "=", "Flatten", "(", ")", "\n", "self", ".", "model", ".", "outlinear", "=", "Linear", "(", "self", ".", "config", ".", "d_model", ",", "self", ".", "config", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.transformer.TransformerModel.forward": [[46, 58], ["transformer.TransformerModel.model.inlinear", "transformer.TransformerModel.model.relu", "transformer.TransformerModel.transpose", "transformer.TransformerModel.model.transformerencoder", "transformer.TransformerModel.transpose", "transformer.TransformerModel.model.relu", "transformer.TransformerModel.model.outlinear", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "transformer.TransformerModel.max"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "model", ".", "inlinear", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "relu", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "# N x T x D -> T x N x D", "\n", "x", "=", "self", ".", "model", ".", "transformerencoder", "(", "x", ")", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "# T x N x D -> N x T x D", "\n", "x", "=", "x", ".", "max", "(", "1", ")", "[", "0", "]", "\n", "x", "=", "self", ".", "model", ".", "relu", "(", "x", ")", "\n", "logits", "=", "self", ".", "model", ".", "outlinear", "(", "x", ")", "\n", "\n", "logprobabilities", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "return", "logprobabilities", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.transformer.TransformerModel.load_optimizer": [[59, 65], ["torch.Adam", "torch.Adam", "torch.Adam", "transformer.TransformerModel.model.parameters"], "methods", ["None"], ["", "def", "load_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load the optimizer\"\"\"", "\n", "return", "optim", ".", "Adam", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "config", ".", "learning_rate", ",", "\n", "weight_decay", "=", "self", ".", "config", ".", "weight_decay", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.transformer.Flatten.forward": [[71, 73], ["input.reshape", "input.size"], "methods", ["None"], ["def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "reshape", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.FocalLoss2d.__init__": [[138, 143], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "3", ",", "ignore_index", "=", "255", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "ignore_index", "=", "ignore_index", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.FocalLoss2d.forward": [[144, 157], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.clamp.contiguous", "torch.clamp.contiguous", "torch.clamp.contiguous", "torch.clamp.contiguous", "torch.clamp.contiguous", "torch.clamp.contiguous", "weights.contiguous.contiguous.contiguous", "[].float", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.view", "torch.clamp.view", "torch.clamp.view", "torch.clamp.contiguous().view", "torch.clamp.contiguous().view", "torch.clamp.contiguous().view", "weights.contiguous.contiguous.contiguous().view", "torch.clamp.view", "torch.clamp.view", "torch.clamp.view", "torch.clamp.contiguous", "torch.clamp.contiguous", "torch.clamp.contiguous", "weights.contiguous.contiguous.contiguous", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "targets", ",", "weights", "=", "1.0", ")", ":", "\n", "        ", "outputs", "=", "torch", ".", "sigmoid", "(", "outputs", ")", "\n", "outputs", "=", "outputs", ".", "contiguous", "(", ")", "\n", "targets", "=", "targets", ".", "contiguous", "(", ")", "\n", "weights", "=", "weights", ".", "contiguous", "(", ")", "\n", "non_ignored", "=", "targets", ".", "view", "(", "-", "1", ")", "!=", "self", ".", "ignore_index", "\n", "targets", "=", "targets", ".", "view", "(", "-", "1", ")", "[", "non_ignored", "]", ".", "float", "(", ")", "\n", "outputs", "=", "outputs", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "[", "non_ignored", "]", "\n", "weights", "=", "weights", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "[", "non_ignored", "]", "\n", "outputs", "=", "torch", ".", "clamp", "(", "outputs", ",", "self", ".", "eps", ",", "1.0", "-", "self", ".", "eps", ")", "\n", "targets", "=", "torch", ".", "clamp", "(", "targets", ",", "self", ".", "eps", ",", "1.0", "-", "self", ".", "eps", ")", "\n", "pt", "=", "(", "1", "-", "targets", ")", "*", "(", "1", "-", "outputs", ")", "+", "targets", "*", "outputs", "\n", "return", "(", "(", "-", "(", "(", "1.0", "-", "pt", ")", "**", "self", ".", "gamma", ")", "*", "torch", ".", "log", "(", "pt", ")", ")", "*", "weights", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.DiceLoss.__init__": [[160, 165], ["torch.Module.__init__", "unet_efficientnet.DiceLoss.register_buffer"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", "=", "None", ",", "per_image", "=", "False", ",", "eps", "=", "1e-6", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "\"weight\"", ",", "weight", ")", "\n", "self", ".", "per_image", "=", "per_image", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.DiceLoss.forward": [[166, 177], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "targets.contiguous().view().float", "torch.sigmoid.contiguous().view", "torch.sigmoid.contiguous().view", "torch.sigmoid.contiguous().view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sigmoid.size", "torch.sigmoid.size", "torch.sigmoid.size", "targets.contiguous().view", "torch.sigmoid.contiguous", "torch.sigmoid.contiguous", "torch.sigmoid.contiguous", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "targets.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "outputs", ",", "targets", ")", ":", "\n", "        ", "outputs", "=", "torch", ".", "sigmoid", "(", "outputs", ")", "\n", "batch_size", "=", "outputs", ".", "size", "(", ")", "[", "0", "]", "\n", "if", "not", "self", ".", "per_image", ":", "\n", "            ", "batch_size", "=", "1", "\n", "", "dice_target", "=", "targets", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "-", "1", ")", ".", "float", "(", ")", "\n", "dice_output", "=", "outputs", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "intersection", "=", "torch", ".", "sum", "(", "dice_output", "*", "dice_target", ",", "dim", "=", "1", ")", "\n", "union", "=", "torch", ".", "sum", "(", "dice_output", ",", "dim", "=", "1", ")", "+", "torch", ".", "sum", "(", "dice_target", ",", "dim", "=", "1", ")", "+", "self", ".", "eps", "\n", "loss", "=", "(", "1", "-", "(", "2", "*", "intersection", "+", "self", ".", "eps", ")", "/", "union", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.GenEfficientNet.__init__": [[180, 233], ["torch.Module.__init__", "geffnet.efficientnet_builder.round_channels", "geffnet.conv2d_layers.select_conv2d", "norm_layer", "act_layer", "geffnet.efficientnet_builder.EfficientNetBuilder", "torch.Sequential", "torch.Sequential", "torch.Sequential", "geffnet.conv2d_layers.select_conv2d", "norm_layer", "act_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "unet_efficientnet.GenEfficientNet.modules", "geffnet.efficientnet_builder.EfficientNetBuilder.", "geffnet.efficientnet_builder.initialize_weight_goog", "geffnet.efficientnet_builder.initialize_weight_default"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block_args", ",", "\n", "num_classes", "=", "1000", ",", "\n", "in_channels", "=", "3", ",", "\n", "num_features", "=", "1280", ",", "\n", "stem_size", "=", "32", ",", "\n", "fix_stem", "=", "False", ",", "\n", "channel_multiplier", "=", "1.0", ",", "\n", "channel_divisor", "=", "8", ",", "\n", "channel_min", "=", "None", ",", "\n", "pad_type", "=", "\"\"", ",", "\n", "act_layer", "=", "nn", ".", "ReLU", ",", "\n", "drop_connect_rate", "=", "0.0", ",", "\n", "se_kwargs", "=", "None", ",", "\n", "norm_layer", "=", "nn", ".", "BatchNorm2d", ",", "\n", "norm_kwargs", "=", "None", ",", "\n", "weight_init", "=", "\"goog\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "GenEfficientNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "stem_size", "=", "round_channels", "(", "\n", "stem_size", ",", "channel_multiplier", ",", "channel_divisor", ",", "channel_min", "\n", ")", "\n", "self", ".", "conv_stem", "=", "select_conv2d", "(", "\n", "in_channels", ",", "stem_size", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "pad_type", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "stem_size", ",", "**", "norm_kwargs", ")", "\n", "self", ".", "act1", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "builder", "=", "EfficientNetBuilder", "(", "\n", "channel_multiplier", ",", "\n", "channel_divisor", ",", "\n", "channel_min", ",", "\n", "pad_type", ",", "\n", "act_layer", ",", "\n", "se_kwargs", ",", "\n", "norm_layer", ",", "\n", "norm_kwargs", ",", "\n", "drop_connect_rate", ",", "\n", ")", "\n", "self", ".", "blocks", "=", "nn", ".", "Sequential", "(", "*", "builder", "(", "stem_size", ",", "block_args", ")", ")", "\n", "self", ".", "conv_head", "=", "select_conv2d", "(", "\n", "builder", ".", "in_chs", ",", "num_features", ",", "1", ",", "padding", "=", "pad_type", "\n", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "num_features", ",", "**", "norm_kwargs", ")", "\n", "self", ".", "act2", "=", "act_layer", "(", "inplace", "=", "True", ")", "\n", "self", ".", "global_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "num_features", ",", "num_classes", ")", "\n", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "weight_init", "==", "\"goog\"", ":", "\n", "                ", "initialize_weight_goog", "(", "module", ")", "\n", "", "else", ":", "\n", "                ", "initialize_weight_default", "(", "module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.UNetEfficientNet.__init__": [[238, 339], ["base.BaseSegmentationClassifier.__init__", "list", "unet_efficientnet.UNetEfficientNet.__init__.mod"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n            config : Config\n                the configuration for this model\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "dec_ch", "=", "[", "32", ",", "64", ",", "128", ",", "256", ",", "1024", "]", "\n", "# Placeholder variables to avoid \"might be referenced before assignment\" warnings", "\n", "enc_ch", "=", "list", "(", ")", "\n", "depth_multiplier", ",", "channel_multiplier", "=", "1", ",", "1", "\n", "url", "=", "\"\"", "\n", "if", "self", ".", "config", ".", "net", "==", "\"b4\"", ":", "\n", "            ", "channel_multiplier", "=", "1.4", "\n", "depth_multiplier", "=", "1.8", "\n", "url", "=", "\"https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/tf_efficientnet_b4_ns-d6313a46.pth\"", "\n", "enc_ch", "=", "[", "24", ",", "32", ",", "56", ",", "160", ",", "1792", "]", "\n", "", "if", "self", ".", "config", ".", "net", "==", "\"b5\"", ":", "\n", "            ", "channel_multiplier", "=", "1.6", "\n", "depth_multiplier", "=", "2.2", "\n", "url", "=", "\"https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/tf_efficientnet_b5_ns-6f26d0cf.pth\"", "\n", "enc_ch", "=", "[", "24", ",", "40", ",", "64", ",", "176", ",", "2048", "]", "\n", "", "if", "self", ".", "config", ".", "net", "==", "\"b6\"", ":", "\n", "            ", "channel_multiplier", "=", "1.8", "\n", "depth_multiplier", "=", "2.6", "\n", "url", "=", "\"https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/tf_efficientnet_b6_ns-51548356.pth\"", "\n", "enc_ch", "=", "[", "32", ",", "40", ",", "72", ",", "200", ",", "2304", "]", "\n", "", "if", "self", ".", "config", ".", "net", "==", "\"b7\"", ":", "\n", "            ", "channel_multiplier", "=", "2.0", "\n", "depth_multiplier", "=", "3.1", "\n", "url", "=", "\"https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/tf_efficientnet_b7_ns-1dbc32de.pth\"", "\n", "enc_ch", "=", "[", "32", ",", "48", ",", "80", ",", "224", ",", "2560", "]", "\n", "", "if", "self", ".", "config", ".", "net", "==", "\"l2\"", ":", "\n", "            ", "channel_multiplier", "=", "4.3", "\n", "depth_multiplier", "=", "5.3", "\n", "url", "=", "\"https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/tf_efficientnet_l2_ns-df73bb44.pth\"", "\n", "enc_ch", "=", "[", "72", ",", "104", ",", "176", ",", "480", ",", "5504", "]", "\n", "", "if", "self", ".", "config", ".", "stride", "==", "16", ":", "\n", "            ", "dec_ch", "[", "4", "]", "=", "enc_ch", "[", "4", "]", "\n", "", "elif", "self", ".", "config", ".", "stride", "==", "8", ":", "\n", "            ", "dec_ch", "[", "3", "]", "=", "enc_ch", "[", "4", "]", "\n", "\n", "", "def", "mod", "(", "cin", ",", "cout", ",", "k", "=", "3", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "cin", ",", "cout", ",", "k", ",", "padding", "=", "k", "//", "2", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "", "self", ".", "model", ".", "bot0extra", "=", "mod", "(", "206", ",", "enc_ch", "[", "4", "]", ")", "\n", "self", ".", "model", ".", "bot1extra", "=", "mod", "(", "206", ",", "dec_ch", "[", "4", "]", ")", "\n", "self", ".", "model", ".", "bot2extra", "=", "mod", "(", "206", ",", "dec_ch", "[", "3", "]", ")", "\n", "self", ".", "model", ".", "bot3extra", "=", "mod", "(", "206", ",", "dec_ch", "[", "2", "]", ")", "\n", "self", ".", "model", ".", "bot4extra", "=", "mod", "(", "206", ",", "dec_ch", "[", "1", "]", ")", "\n", "self", ".", "model", ".", "bot5extra", "=", "mod", "(", "206", ",", "6", ")", "\n", "\n", "self", ".", "model", ".", "dec0", "=", "mod", "(", "enc_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ")", "\n", "self", ".", "model", ".", "dec1", "=", "mod", "(", "dec_ch", "[", "4", "]", ",", "dec_ch", "[", "3", "]", ")", "\n", "self", ".", "model", ".", "dec2", "=", "mod", "(", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "2", "]", ")", "\n", "self", ".", "model", ".", "dec3", "=", "mod", "(", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "1", "]", ")", "\n", "self", ".", "model", ".", "dec4", "=", "mod", "(", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "0", "]", ")", "\n", "\n", "self", ".", "model", ".", "bot0", "=", "mod", "(", "enc_ch", "[", "3", "]", "+", "dec_ch", "[", "4", "]", ",", "dec_ch", "[", "4", "]", ")", "\n", "self", ".", "model", ".", "bot1", "=", "mod", "(", "enc_ch", "[", "2", "]", "+", "dec_ch", "[", "3", "]", ",", "dec_ch", "[", "3", "]", ")", "\n", "self", ".", "model", ".", "bot2", "=", "mod", "(", "enc_ch", "[", "1", "]", "+", "dec_ch", "[", "2", "]", ",", "dec_ch", "[", "2", "]", ")", "\n", "self", ".", "model", ".", "bot3", "=", "mod", "(", "enc_ch", "[", "0", "]", "+", "dec_ch", "[", "1", "]", ",", "dec_ch", "[", "1", "]", ")", "\n", "\n", "self", ".", "model", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ")", "\n", "self", ".", "model", ".", "upps", "=", "nn", ".", "PixelShuffle", "(", "upscale_factor", "=", "2", ")", "\n", "self", ".", "model", ".", "final", "=", "nn", ".", "Conv2d", "(", "dec_ch", "[", "0", "]", ",", "6", ",", "1", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "arch_def", "=", "[", "\n", "[", "\"ds_r1_k3_s1_e1_c16_se0.25\"", "]", ",", "\n", "[", "\"ir_r2_k3_s2_e6_c24_se0.25\"", "]", ",", "\n", "[", "\"ir_r2_k5_s2_e6_c40_se0.25\"", "]", ",", "\n", "[", "\"ir_r3_k3_s2_e6_c80_se0.25\"", "]", ",", "\n", "[", "\"ir_r3_k5_s1_e6_c112_se0.25\"", "]", ",", "\n", "[", "\"ir_r4_k5_s2_e6_c192_se0.25\"", "]", ",", "\n", "[", "\"ir_r1_k3_s1_e6_c320_se0.25\"", "]", ",", "\n", "]", "\n", "enc", "=", "GenEfficientNet", "(", "\n", "in_channels", "=", "3", ",", "\n", "block_args", "=", "decode_arch_def", "(", "arch_def", ",", "depth_multiplier", ")", ",", "\n", "num_features", "=", "round_channels", "(", "1280", ",", "channel_multiplier", ",", "8", ",", "None", ")", ",", "\n", "stem_size", "=", "32", ",", "\n", "channel_multiplier", "=", "channel_multiplier", ",", "\n", "norm_kwargs", "=", "resolve_bn_args", "(", "{", "\"bn_eps\"", ":", "BN_EPS_TF_DEFAULT", "}", ")", ",", "\n", "pad_type", "=", "\"same\"", ",", "\n", ")", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "url", ")", "\n", "enc", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "stem_size", "=", "round_channels", "(", "32", ",", "channel_multiplier", ",", "8", ",", "None", ")", "\n", "conv_stem", "=", "select_conv2d", "(", "4", ",", "stem_size", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "\"same\"", ")", "\n", "_w", "=", "enc", ".", "conv_stem", ".", "state_dict", "(", ")", "\n", "_w", "[", "\"weight\"", "]", "=", "torch", ".", "cat", "(", "[", "_w", "[", "\"weight\"", "]", ",", "_w", "[", "\"weight\"", "]", "[", ":", ",", "1", ":", "2", "]", "]", ",", "1", ")", "\n", "conv_stem", ".", "load_state_dict", "(", "_w", ")", "\n", "self", ".", "model", ".", "enc0", "=", "nn", ".", "Sequential", "(", "conv_stem", ",", "enc", ".", "bn1", ",", "enc", ".", "act1", ",", "enc", ".", "blocks", "[", "0", "]", ")", "\n", "self", ".", "model", ".", "enc1", "=", "nn", ".", "Sequential", "(", "enc", ".", "blocks", "[", "1", "]", ")", "\n", "self", ".", "model", ".", "enc2", "=", "nn", ".", "Sequential", "(", "enc", ".", "blocks", "[", "2", "]", ")", "\n", "self", ".", "model", ".", "enc3", "=", "nn", ".", "Sequential", "(", "enc", ".", "blocks", "[", "3", "]", ",", "enc", ".", "blocks", "[", "4", "]", ")", "\n", "self", ".", "model", ".", "enc4", "=", "nn", ".", "Sequential", "(", "\n", "enc", ".", "blocks", "[", "5", "]", ",", "enc", ".", "blocks", "[", "6", "]", ",", "enc", ".", "conv_head", ",", "enc", ".", "bn2", ",", "enc", ".", "act2", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.UNetEfficientNet.forward": [[341, 366], ["unet_efficientnet.UNetEfficientNet.model.enc0", "unet_efficientnet.UNetEfficientNet.model.enc1", "unet_efficientnet.UNetEfficientNet.model.enc2", "unet_efficientnet.UNetEfficientNet.model.enc3", "unet_efficientnet.UNetEfficientNet.model.enc4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_efficientnet.UNetEfficientNet.model.dec2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_efficientnet.UNetEfficientNet.model.bot2", "unet_efficientnet.UNetEfficientNet.model.dec3", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_efficientnet.UNetEfficientNet.model.bot3", "unet_efficientnet.UNetEfficientNet.model.dec4", "unet_efficientnet.UNetEfficientNet.model.final", "unet_efficientnet.UNetEfficientNet.model.dec0", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_efficientnet.UNetEfficientNet.model.bot0", "unet_efficientnet.UNetEfficientNet.model.dec1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet_efficientnet.UNetEfficientNet.model.bot1", "unet_efficientnet.UNetEfficientNet.model.up", "unet_efficientnet.UNetEfficientNet.model.up", "unet_efficientnet.UNetEfficientNet.model.up", "unet_efficientnet.UNetEfficientNet.model.up", "unet_efficientnet.UNetEfficientNet.model.up", "unet_efficientnet.UNetEfficientNet.model.bot0extra", "unet_efficientnet.UNetEfficientNet.model.bot1extra"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "strip", ",", "direction", ",", "coord", ")", ":", "\n", "        ", "enc0", "=", "self", ".", "model", ".", "enc0", "(", "x", ")", "\n", "enc1", "=", "self", ".", "model", ".", "enc1", "(", "enc0", ")", "\n", "enc2", "=", "self", ".", "model", ".", "enc2", "(", "enc1", ")", "\n", "enc3", "=", "self", ".", "model", ".", "enc3", "(", "enc2", ")", "\n", "enc4", "=", "self", ".", "model", ".", "enc4", "(", "enc3", ")", "\n", "ex", "=", "torch", ".", "cat", "(", "[", "strip", ",", "direction", ",", "coord", "]", ",", "1", ")", "\n", "x", "=", "enc4", "\n", "if", "self", ".", "config", ".", "stride", "==", "32", ":", "\n", "            ", "x", "=", "self", ".", "model", ".", "dec0", "(", "self", ".", "model", ".", "up", "(", "x", "+", "self", ".", "model", ".", "bot0extra", "(", "ex", ")", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "enc3", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "model", ".", "bot0", "(", "x", ")", "\n", "", "if", "self", ".", "config", ".", "stride", "==", "32", "or", "self", ".", "config", ".", "stride", "==", "16", ":", "\n", "            ", "x", "=", "self", ".", "model", ".", "dec1", "(", "self", ".", "model", ".", "up", "(", "x", "+", "self", ".", "model", ".", "bot1extra", "(", "ex", ")", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "enc2", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "model", ".", "bot1", "(", "x", ")", "\n", "", "x", "=", "self", ".", "model", ".", "dec2", "(", "self", ".", "model", ".", "up", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "enc1", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "model", ".", "bot2", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "dec3", "(", "self", ".", "model", ".", "up", "(", "x", ")", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "enc0", "]", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "model", ".", "bot3", "(", "x", ")", "\n", "x", "=", "self", ".", "model", ".", "dec4", "(", "self", ".", "model", ".", "up", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "model", ".", "final", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.UNetEfficientNet._initialize_weights": [[367, 376], ["unet_efficientnet.UNetEfficientNet.modules", "isinstance", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "module.bias.data.zero_", "module.weight.data.fill_", "module.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "ConvTranspose2d", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", "=", "nn", ".", "init", ".", "kaiming_normal_", "(", "module", ".", "weight", ".", "data", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.UNetEfficientNet.load_optimizer": [[377, 379], ["torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "torch.optim.AdamW", "unet_efficientnet.UNetEfficientNet.model.parameters"], "methods", ["None"], ["", "", "", "def", "load_optimizer", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "AdamW", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "2e-4", ",", "weight_decay", "=", "1e-2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.UNetEfficientNet.load_lr_scheduler": [[380, 383], ["torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "unet_efficientnet.UNetEfficientNet.load_optimizer"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.load_optimizer"], ["", "def", "load_lr_scheduler", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "self", ".", "load_optimizer", "(", ")", ",", "milestones", "=", "[", "80", ",", "100", ",", "120", "]", ",", "gamma", "=", "0.5", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.UNetEfficientNet.train_and_evaluate_model": [[385, 542], ["train_dataset.config.pred_folder.format", "DiceLoss().to", "FocalLoss2d().to", "train_dataset.load_other_folds", "train_dataset.dataloader", "val_dataset.load_fold", "val_dataset.dataloader", "unet_efficientnet.UNetEfficientNet.load_optimizer", "unet_efficientnet.UNetEfficientNet.load_lr_scheduler", "unet_efficientnet.UNetEfficientNet.model.to", "range", "tqdm.tqdm.tqdm", "unet_efficientnet.UNetEfficientNet.model.train", "unet_efficientnet.UNetEfficientNet.step", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "unet_efficientnet.DiceLoss", "unet_efficientnet.FocalLoss2d", "sample[].to", "sample[].to", "sample[].to", "sample[].to", "sample[].to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "range", "unet_efficientnet.UNetEfficientNet.forward", "isinstance", "unet_efficientnet.UNetEfficientNet.zero_grad", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "unet_efficientnet.UNetEfficientNet.step", "tqdm.tqdm.tqdm.set_description", "os.path.join", "shutil.rmtree", "os.makedirs", "unet_efficientnet.UNetEfficientNet.model.eval", "val_dataset.config.pred_csv.format", "val_dataset.config.gt_csv.format", "unet_efficientnet.post_process", "unet_efficientnet.evaluation", "max", "sample[].to", "FocalLoss2d().to.", "DiceLoss().to.", "unet_efficientnet.UNetEfficientNet.model.parameters", "unet_efficientnet.UNetEfficientNet.model.state_dict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "copy.deepcopy", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "FocalLoss2d().to.", "DiceLoss().to.", "FocalLoss2d().to.", "DiceLoss().to.", "sample[].to", "sample[].to", "sample[].to", "sample[].to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "numpy.moveaxis", "range", "v.cpu", "unet_efficientnet.UNetEfficientNet.model.state_dict().items", "os.path.join", "unet_efficientnet.UNetEfficientNet.get_lr", "sample[].item", "sample[].item", "torch.interpolate", "torch.interpolate", "torch.interpolate", "unet_efficientnet.UNetEfficientNet.cpu().data.numpy", "len", "direction[].item", "cv2.copyMakeBorder", "skimage.io.imsave", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "range", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "len", "numpy.fliplr", "os.path.join", "unet_efficientnet.UNetEfficientNet.model.state_dict", "unet_efficientnet.UNetEfficientNet.forward", "isinstance", "torch.interpolate", "torch.interpolate", "torch.interpolate", "len", "len", "numpy.flipud", "rot", "fl", "unet_efficientnet.UNetEfficientNet.cpu", "os.path.split", "math.ceil", "math.ceil", "fl"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.spacenet6.SpaceNet6Dataset.load_other_folds", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.dataloader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.spacenet6.SpaceNet6Dataset.load_fold", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.dataloader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.load_optimizer", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.load_lr_scheduler", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.forward", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.post_process", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.evaluation", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.forward", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split"], ["", "def", "train_and_evaluate_model", "(", "\n", "self", ",", "\n", "train_dataset", ":", "SpaceNet6Dataset", ",", "\n", "epochs", ":", "int", "=", "100", ",", "\n", "model_directory", ":", "str", "=", "None", ",", "\n", "save_epochs", ":", "int", "=", "10", ",", "\n", "iterations_log", ":", "int", "=", "100", ",", "\n", "resume_model", ":", "str", "=", "None", ",", "\n", "val_dataset", ":", "SpaceNet6Dataset", "=", "None", ",", "\n", "run_id", ":", "str", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Overridden method for training on the SpaceNet6 data set.\"\"\"", "\n", "contact_weight", "=", "train_dataset", ".", "config", ".", "contact_weight", "\n", "edge_weight", "=", "train_dataset", ".", "config", ".", "edge_weight", "\n", "fold", "=", "0", "\n", "pred_folder", "=", "train_dataset", ".", "config", ".", "pred_folder", ".", "format", "(", "fold", ")", "\n", "# Initialize loss functions", "\n", "dice_loss", "=", "DiceLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "focal_loss", "=", "FocalLoss2d", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# Load training data set", "\n", "train_dataset", ".", "load_other_folds", "(", "fold", ")", "\n", "train_data_loader", "=", "train_dataset", ".", "dataloader", "(", ")", "\n", "# Load validation data set", "\n", "val_dataset", ".", "load_fold", "(", "fold", ")", "\n", "val_data_loader", "=", "val_dataset", ".", "dataloader", "(", ")", "\n", "# Initialize optimizer and lr scheduler", "\n", "optimizer", "=", "self", ".", "load_optimizer", "(", ")", "\n", "scheduler", "=", "self", ".", "load_lr_scheduler", "(", ")", "\n", "best_f1_score", "=", "-", "1", "\n", "# Kick off training", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "iterator", "=", "tqdm", "(", "train_data_loader", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "# For each batch (i.e. sample)", "\n", "for", "sample", "in", "iterator", ":", "\n", "                ", "images", "=", "sample", "[", "\"image\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "strip", "=", "sample", "[", "\"strip\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "direction", "=", "sample", "[", "\"direction\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "coord", "=", "sample", "[", "\"coordinate\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "sample", "[", "\"mask\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "building_count", "=", "sample", "[", "\"b_count\"", "]", ".", "to", "(", "self", ".", "device", ")", "/", "8", "\n", "building_weight", "=", "building_count", "*", "0.5", "+", "0.5", "\n", "weights", "=", "torch", ".", "ones", "(", "size", "=", "target", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "weights", "[", "target", ">", "0.0", "]", "*=", "0.5", "\n", "for", "i", "in", "range", "(", "weights", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "weights", "[", "i", "]", "=", "weights", "[", "i", "]", "*", "building_weight", "[", "i", "]", "\n", "", "output", "=", "self", ".", "forward", "(", "images", ",", "strip", ",", "direction", ",", "coord", ")", "\n", "if", "isinstance", "(", "output", ",", "tuple", ")", ":", "\n", "                    ", "output", "=", "output", "[", "0", "]", "\n", "", "l0", "=", "focal_loss", "(", "output", "[", ":", ",", "0", "]", ",", "target", "[", ":", ",", "0", "]", ",", "weights", "[", ":", ",", "0", "]", ")", "+", "dice_loss", "(", "\n", "output", "[", ":", ",", "0", "]", ",", "target", "[", ":", ",", "0", "]", "\n", ")", "\n", "l1", "=", "edge_weight", "*", "(", "\n", "focal_loss", "(", "output", "[", ":", ",", "1", "]", ",", "target", "[", ":", ",", "1", "]", ",", "weights", "[", ":", ",", "1", "]", ")", "\n", "+", "dice_loss", "(", "output", "[", ":", ",", "1", "]", ",", "target", "[", ":", ",", "1", "]", ")", "\n", ")", "\n", "l2", "=", "contact_weight", "*", "(", "\n", "focal_loss", "(", "output", "[", ":", ",", "2", "]", ",", "target", "[", ":", ",", "2", "]", ",", "weights", "[", ":", ",", "2", "]", ")", "\n", "+", "dice_loss", "(", "output", "[", ":", ",", "2", "]", ",", "target", "[", ":", ",", "2", "]", ")", "\n", ")", "\n", "loss", "=", "l0", "+", "l1", "+", "l2", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "1.2", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "iterator", ".", "set_description", "(", "\n", "\"epoch: {}; lr {:.5f}; loss {:.4f}\"", ".", "format", "(", "\n", "epoch", ",", "scheduler", ".", "get_lr", "(", ")", "[", "-", "1", "]", ",", "loss", "\n", ")", "\n", ")", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "torch", ".", "save", "(", "\n", "{", "\"epoch\"", ":", "epoch", ",", "\"state_dict\"", ":", "self", ".", "model", ".", "state_dict", "(", ")", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "model_directory", ",", "\"last_model\"", ")", ",", "\n", ")", "\n", "if", "epoch", ">=", "val_dataset", ".", "config", ".", "start_val_epoch", ":", "\n", "                ", "shutil", ".", "rmtree", "(", "pred_folder", ",", "ignore_errors", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "pred_folder", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "for", "sample", "in", "tqdm", "(", "val_data_loader", ")", ":", "\n", "                        ", "images", "=", "sample", "[", "\"image\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "ymin", ",", "xmin", "=", "sample", "[", "\"ymin\"", "]", ".", "item", "(", ")", ",", "sample", "[", "\"xmin\"", "]", ".", "item", "(", ")", "\n", "strip", "=", "sample", "[", "\"strip\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "direction", "=", "sample", "[", "\"direction\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "coord", "=", "sample", "[", "\"coordinate\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "images", ".", "shape", "\n", "scales", "=", "[", "0.8", ",", "1.0", ",", "1.5", "]", "\n", "flips", "=", "[", "lambda", "x", ":", "x", ",", "lambda", "x", ":", "torch", ".", "flip", "(", "x", ",", "(", "3", ",", ")", ")", "]", "\n", "rots", "=", "[", "\n", "(", "lambda", "x", ":", "torch", ".", "rot90", "(", "x", ",", "i", ",", "(", "2", ",", "3", ")", ")", ")", "for", "i", "in", "range", "(", "0", ",", "1", ")", "\n", "]", "\n", "rots2", "=", "[", "\n", "(", "lambda", "x", ":", "torch", ".", "rot90", "(", "x", ",", "4", "-", "i", ",", "(", "2", ",", "3", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "1", ")", "\n", "]", "\n", "oos", "=", "torch", ".", "zeros", "(", "\n", "(", "images", ".", "shape", "[", "0", "]", ",", "6", ",", "images", ".", "shape", "[", "2", "]", ",", "images", ".", "shape", "[", "3", "]", ")", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "sc", "in", "scales", ":", "\n", "                            ", "im", "=", "F", ".", "interpolate", "(", "\n", "images", ",", "\n", "size", "=", "(", "ceil", "(", "h", "*", "sc", "/", "32", ")", "*", "32", ",", "ceil", "(", "w", "*", "sc", "/", "32", ")", "*", "32", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "True", ",", "\n", ")", "\n", "for", "fl", "in", "flips", ":", "\n", "                                ", "for", "i", ",", "rot", "in", "enumerate", "(", "rots", ")", ":", "\n", "                                    ", "o", "=", "self", ".", "forward", "(", "\n", "rot", "(", "fl", "(", "im", ")", ")", ",", "strip", ",", "direction", ",", "coord", "\n", ")", "\n", "if", "isinstance", "(", "o", ",", "tuple", ")", ":", "\n", "                                        ", "o", "=", "o", "[", "0", "]", "\n", "", "oos", "+=", "F", ".", "interpolate", "(", "\n", "fl", "(", "rots2", "[", "i", "]", "(", "o", ")", ")", ",", "\n", "size", "=", "(", "h", ",", "w", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "True", ",", "\n", ")", "\n", "", "", "", "o", "=", "oos", "/", "(", "len", "(", "scales", ")", "*", "len", "(", "flips", ")", "*", "len", "(", "rots", ")", ")", "\n", "o", "=", "np", ".", "moveaxis", "(", "o", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "1", ",", "3", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "o", ")", ")", ":", "\n", "                            ", "img", "=", "o", "[", "i", "]", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "if", "direction", "[", "i", "]", ".", "item", "(", ")", ":", "\n", "                                ", "img", "=", "np", ".", "fliplr", "(", "np", ".", "flipud", "(", "img", ")", ")", "\n", "", "img", "=", "cv2", ".", "copyMakeBorder", "(", "\n", "img", ",", "\n", "ymin", ",", "\n", "900", "-", "h", "-", "ymin", ",", "\n", "xmin", ",", "\n", "900", "-", "w", "-", "xmin", ",", "\n", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "0.0", ",", "\n", ")", "\n", "io", ".", "imsave", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "pred_folder", ",", "\n", "os", ".", "path", ".", "split", "(", "sample", "[", "\"image_path\"", "]", "[", "i", "]", ")", "[", "1", "]", ",", "\n", ")", ",", "\n", "img", ",", "\n", ")", "\n", "", "", "", "to_save", "=", "{", "\n", "k", ":", "copy", ".", "deepcopy", "(", "v", ".", "cpu", "(", ")", ")", "\n", "for", "k", ",", "v", "in", "self", ".", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", "\n", "}", "\n", "pred_csv", "=", "val_dataset", ".", "config", ".", "pred_csv", ".", "format", "(", "fold", ")", "\n", "gt_csv", "=", "val_dataset", ".", "config", ".", "gt_csv", ".", "format", "(", "fold", ")", "\n", "post_process", "(", "pred_folder", ",", "pred_csv", ")", "\n", "val_f1", "=", "evaluation", "(", "pred_csv", ",", "gt_csv", ")", "\n", "if", "best_f1_score", "<", "val_f1", ":", "\n", "                    ", "torch", ".", "save", "(", "\n", "{", "\"epoch\"", ":", "epoch", ",", "\"state_dict\"", ":", "to_save", ",", "\"best_score\"", ":", "val_f1", "}", ",", "\n", "os", ".", "path", ".", "join", "(", "model_directory", ",", "\"best_model\"", ")", ",", "\n", ")", "\n", "", "best_f1_score", "=", "max", "(", "best_f1_score", ",", "val_f1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.UNetEfficientNet.evaluate": [[543, 611], ["unet_efficientnet.UNetEfficientNet.load_model", "dataset.load_fold", "dataset.dataloader", "dataset.config.pred_folder.format", "shutil.rmtree", "os.makedirs", "unet_efficientnet.UNetEfficientNet.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "sample[].to", "sample[].to", "sample[].to", "sample[].to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "numpy.moveaxis", "range", "sample[].item", "sample[].item", "torch.interpolate", "torch.interpolate", "torch.interpolate", "unet_efficientnet.UNetEfficientNet.cpu().data.numpy", "len", "direction[].item", "cv2.copyMakeBorder", "skimage.io.imsave", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.flip", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "range", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "torch.rot90", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "len", "numpy.fliplr", "os.path.join", "unet_efficientnet.UNetEfficientNet.forward", "isinstance", "torch.interpolate", "torch.interpolate", "torch.interpolate", "len", "len", "numpy.flipud", "rot", "fl", "unet_efficientnet.UNetEfficientNet.cpu", "os.path.split", "math.ceil", "math.ceil", "fl"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.load_model", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.spacenet6.SpaceNet6Dataset.load_fold", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.dataloader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.forward", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split"], ["", "", "", "def", "evaluate", "(", "self", ",", "dataset", ":", "SpaceNet6Dataset", "=", "None", ",", "model_path", ":", "str", "=", "None", ")", ":", "\n", "# Load the model", "\n", "        ", "self", ".", "load_model", "(", "model_path", ")", "\n", "# evaluate model on data", "\n", "fold", "=", "3", "# [0, 6, 9, 1, 2, 7, 8]", "\n", "# load data into the data set", "\n", "dataset", ".", "load_fold", "(", "fold", ")", "\n", "# get test data loader", "\n", "data_loader", "=", "dataset", ".", "dataloader", "(", ")", "\n", "pred_folder", "=", "dataset", ".", "config", ".", "pred_folder", ".", "format", "(", "fold", ")", "\n", "# Enforce a clean do-over everytime by re-creating the destination prediction directory", "\n", "shutil", ".", "rmtree", "(", "pred_folder", ",", "ignore_errors", "=", "True", ")", "\n", "os", ".", "makedirs", "(", "pred_folder", ",", "exist_ok", "=", "True", ")", "\n", "# Set model to eval mode", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "sample", "in", "tqdm", "(", "data_loader", ")", ":", "\n", "                ", "images", "=", "sample", "[", "\"image\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "ymin", ",", "xmin", "=", "sample", "[", "\"ymin\"", "]", ".", "item", "(", ")", ",", "sample", "[", "\"xmin\"", "]", ".", "item", "(", ")", "\n", "strip", "=", "sample", "[", "\"strip\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "direction", "=", "sample", "[", "\"direction\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "coord", "=", "sample", "[", "\"coordinate\"", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "_", ",", "_", ",", "h", ",", "w", "=", "images", ".", "shape", "\n", "scales", "=", "[", "0.8", ",", "1.0", ",", "1.5", "]", "\n", "flips", "=", "[", "lambda", "x", ":", "x", ",", "lambda", "x", ":", "torch", ".", "flip", "(", "x", ",", "(", "3", ",", ")", ")", "]", "\n", "rots", "=", "[", "(", "lambda", "x", ":", "torch", ".", "rot90", "(", "x", ",", "i", ",", "(", "2", ",", "3", ")", ")", ")", "for", "i", "in", "range", "(", "0", ",", "1", ")", "]", "\n", "rots2", "=", "[", "(", "lambda", "x", ":", "torch", ".", "rot90", "(", "x", ",", "4", "-", "i", ",", "(", "2", ",", "3", ")", ")", ")", "for", "i", "in", "range", "(", "0", ",", "1", ")", "]", "\n", "oos", "=", "torch", ".", "zeros", "(", "\n", "(", "images", ".", "shape", "[", "0", "]", ",", "6", ",", "images", ".", "shape", "[", "2", "]", ",", "images", ".", "shape", "[", "3", "]", ")", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "sc", "in", "scales", ":", "\n", "                    ", "im", "=", "F", ".", "interpolate", "(", "\n", "images", ",", "\n", "size", "=", "(", "ceil", "(", "h", "*", "sc", "/", "32", ")", "*", "32", ",", "ceil", "(", "w", "*", "sc", "/", "32", ")", "*", "32", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "True", ",", "\n", ")", "\n", "for", "fl", "in", "flips", ":", "\n", "                        ", "for", "i", ",", "rot", "in", "enumerate", "(", "rots", ")", ":", "\n", "                            ", "o", "=", "self", ".", "forward", "(", "rot", "(", "fl", "(", "im", ")", ")", ",", "strip", ",", "direction", ",", "coord", ")", "\n", "if", "isinstance", "(", "o", ",", "tuple", ")", ":", "\n", "                                ", "o", "=", "o", "[", "0", "]", "\n", "", "oos", "+=", "F", ".", "interpolate", "(", "\n", "fl", "(", "rots2", "[", "i", "]", "(", "o", ")", ")", ",", "\n", "size", "=", "(", "h", ",", "w", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "\n", "align_corners", "=", "True", ",", "\n", ")", "\n", "", "", "", "o", "=", "oos", "/", "(", "len", "(", "scales", ")", "*", "len", "(", "flips", ")", "*", "len", "(", "rots", ")", ")", "\n", "o", "=", "np", ".", "moveaxis", "(", "o", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "1", ",", "3", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "o", ")", ")", ":", "\n", "                    ", "img", "=", "o", "[", "i", "]", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "if", "direction", "[", "i", "]", ".", "item", "(", ")", ":", "\n", "                        ", "img", "=", "np", ".", "fliplr", "(", "np", ".", "flipud", "(", "img", ")", ")", "\n", "", "img", "=", "cv2", ".", "copyMakeBorder", "(", "\n", "img", ",", "\n", "ymin", ",", "\n", "900", "-", "h", "-", "ymin", ",", "\n", "xmin", ",", "\n", "900", "-", "w", "-", "xmin", ",", "\n", "cv2", ".", "BORDER_CONSTANT", ",", "\n", "0.0", ",", "\n", ")", "\n", "io", ".", "imsave", "(", "\n", "os", ".", "path", ".", "join", "(", "\n", "pred_folder", ",", "os", ".", "path", ".", "split", "(", "sample", "[", "\"image_path\"", "]", "[", "i", "]", ")", "[", "1", "]", "\n", ")", ",", "\n", "img", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.UNetEfficientNet.load_model": [[629, 656], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "getattr", "loaded[].copy", "unet_efficientnet.UNetEfficientNet.load_model.load"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load"], ["", "", "", "", "def", "load_model", "(", "self", ",", "file_path", ",", "optimizer", "=", "None", ")", ":", "\n", "        ", "loaded", "=", "torch", ".", "load", "(", "file_path", ")", "\n", "\n", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "\n", "metadata", "=", "getattr", "(", "loaded", "[", "\"state_dict\"", "]", ",", "\"_metadata\"", ",", "None", ")", "\n", "state_dict", "=", "loaded", "[", "\"state_dict\"", "]", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "            ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "\"\"", ")", ":", "\n", "            ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "\n", "prefix", ",", "\n", "local_metadata", ",", "\n", "True", ",", "\n", "missing_keys", ",", "\n", "unexpected_keys", ",", "\n", "[", "]", ",", "\n", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "                ", "if", "child", "is", "not", "None", ":", "\n", "                    ", "load", "(", "child", ",", "prefix", "+", "name", "+", "\".\"", ")", "\n", "\n", "", "", "", "load", "(", "self", ".", "model", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.post_process": [[51, 64], ["numpy.seterr", "sorted", "glob.glob", "multiprocessing.Pool", "len", "pandas.concat().to_csv", "os.path.join", "tqdm.tqdm", "pandas.concat", "pool.imap_unordered", "functools.partial", "len"], "function", ["None"], ["def", "post_process", "(", "prediction_directory", ",", "prediction_csv", ")", ":", "\n", "    ", "np", ".", "seterr", "(", "over", "=", "\"ignore\"", ")", "\n", "source_files", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "prediction_directory", ",", "\"*\"", ")", ")", ")", "\n", "with", "Pool", "(", ")", "as", "pool", ":", "\n", "        ", "proposals", "=", "[", "\n", "p", "\n", "for", "p", "in", "tqdm", "(", "\n", "pool", ".", "imap_unordered", "(", "partial", "(", "post_process_single", ")", ",", "source_files", ")", ",", "\n", "total", "=", "len", "(", "source_files", ")", ",", "\n", ")", "\n", "]", "\n", "", "if", "len", "(", "proposals", ")", ">", "0", ":", "\n", "        ", "pd", ".", "concat", "(", "proposals", ")", ".", "to_csv", "(", "prediction_csv", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.post_process_single": [[66, 119], ["gdal.Open().ReadAsArray", "skimage.measure.label", "skimage.measure.regionprops", "range", "skimage.measure.label", "skimage.segmentation.watershed", "skimage.measure.label().astype", "rasterio.features.shapes", "pandas.DataFrame", "len", "shapely.geometry.shape().buffer", "gdal.Open", "numpy.exp", "skimage.measure.label", "shapely.wkt.dumps", "polygons.append", "[].split", "range", "shapely.geometry.shape", "shapely.wkt.dumps.simplify", "len", "os.path.splitext", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tasks.split.BaseSplitTask.split"], ["", "", "def", "post_process_single", "(", "\n", "sourcefile", ",", "\n", "watershed_line", "=", "True", ",", "\n", "conn", "=", "2", ",", "\n", "polygon_buffer", "=", "0.5", ",", "\n", "tolerance", "=", "0.5", ",", "\n", "seed_msk_th", "=", "0.75", ",", "\n", "area_th_for_seed", "=", "110", ",", "\n", "prediction_threshold", "=", "0.5", ",", "\n", "area_th", "=", "80", ",", "\n", "contact_weight", "=", "1.0", ",", "\n", "edge_weight", "=", "0.0", ",", "\n", "seed_contact_weight", "=", "1.0", ",", "\n", "seed_edge_weight", "=", "1.0", ",", "\n", ")", ":", "\n", "    ", "mask", "=", "gdal", ".", "Open", "(", "sourcefile", ")", ".", "ReadAsArray", "(", ")", "\n", "mask", "=", "1.0", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "mask", ")", ")", "\n", "mask", "[", "0", "]", "=", "mask", "[", "0", "]", "*", "(", "1", "-", "contact_weight", "*", "mask", "[", "2", "]", ")", "*", "(", "1", "-", "edge_weight", "*", "mask", "[", "1", "]", ")", "\n", "seed_msk", "=", "(", "\n", "mask", "[", "0", "]", "*", "(", "1", "-", "seed_contact_weight", "*", "mask", "[", "2", "]", ")", "*", "(", "1", "-", "seed_edge_weight", "*", "mask", "[", "1", "]", ")", "\n", ")", "\n", "seed_msk", "=", "measure", ".", "label", "(", "(", "seed_msk", ">", "seed_msk_th", ")", ",", "connectivity", "=", "conn", ",", "background", "=", "0", ")", "\n", "props", "=", "measure", ".", "regionprops", "(", "seed_msk", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "props", ")", ")", ":", "\n", "        ", "if", "props", "[", "i", "]", ".", "area", "<", "area_th_for_seed", ":", "\n", "            ", "seed_msk", "[", "seed_msk", "==", "i", "+", "1", "]", "=", "0", "\n", "", "", "seed_msk", "=", "measure", ".", "label", "(", "seed_msk", ",", "connectivity", "=", "conn", ",", "background", "=", "0", ")", "\n", "mask", "=", "watershed", "(", "\n", "-", "mask", "[", "0", "]", ",", "\n", "seed_msk", ",", "\n", "mask", "=", "(", "mask", "[", "0", "]", ">", "prediction_threshold", ")", ",", "\n", "watershed_line", "=", "watershed_line", ",", "\n", ")", "\n", "mask", "=", "measure", ".", "label", "(", "mask", ",", "connectivity", "=", "conn", ",", "background", "=", "0", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "polygon_generator", "=", "features", ".", "shapes", "(", "mask", ",", "mask", ")", "\n", "polygons", "=", "[", "]", "\n", "for", "polygon", ",", "value", "in", "polygon_generator", ":", "\n", "        ", "p", "=", "shape", "(", "polygon", ")", ".", "buffer", "(", "polygon_buffer", ")", "\n", "if", "p", ".", "area", ">=", "area_th", ":", "\n", "            ", "p", "=", "dumps", "(", "p", ".", "simplify", "(", "tolerance", "=", "tolerance", ")", ",", "rounding_precision", "=", "0", ")", "\n", "polygons", ".", "append", "(", "p", ")", "\n", "", "", "tile_name", "=", "\"_\"", ".", "join", "(", "\n", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "sourcefile", ")", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "4", ":", "]", "\n", ")", "\n", "csv_addition", "=", "pd", ".", "DataFrame", "(", "\n", "{", "\n", "\"ImageId\"", ":", "tile_name", ",", "\n", "\"BuildingId\"", ":", "range", "(", "len", "(", "polygons", ")", ")", ",", "\n", "\"PolygonWKT_Pix\"", ":", "polygons", ",", "\n", "\"Confidence\"", ":", "1", ",", "\n", "}", "\n", ")", "\n", "return", "csv_addition", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.unet_efficientnet.evaluation": [[121, 135], ["solaris.eval.base.Evaluator", "solaris.eval.base.Evaluator.load_proposal", "solaris.eval.base.Evaluator.eval_iou_spacenet_csv"], "function", ["None"], ["", "def", "evaluation", "(", "prediction_csv", ",", "gt_csv", ")", ":", "\n", "    ", "evaluator", "=", "Evaluator", "(", "gt_csv", ")", "\n", "evaluator", ".", "load_proposal", "(", "prediction_csv", ",", "proposalCSV", "=", "True", ",", "conf_field_list", "=", "[", "]", ")", "\n", "report", "=", "evaluator", ".", "eval_iou_spacenet_csv", "(", "miniou", "=", "0.5", ")", "\n", "tp", "=", "0", "\n", "fp", "=", "0", "\n", "fn", "=", "0", "\n", "for", "entry", "in", "report", ":", "\n", "        ", "tp", "+=", "entry", "[", "\"TruePos\"", "]", "\n", "fp", "+=", "entry", "[", "\"FalsePos\"", "]", "\n", "fn", "+=", "entry", "[", "\"FalseNeg\"", "]", "\n", "", "f1score", "=", "(", "2", "*", "tp", ")", "/", "(", "2", "*", "tp", "+", "fp", "+", "fn", ")", "\n", "# print(\"Validation F1 {} tp {} fp {} fn {}\".format(f1score, tp, fp, fn))", "\n", "return", "f1score", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.fastrcnn.FastRCNN.__init__": [[8, 21], ["base.BaseSegmentationClassifier.__init__", "torchvision.models.detection.fasterrcnn_resnet50_fpn", "torchvision.models.detection.faster_rcnn.FastRCNNPredictor"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "# load an instance segmentation model pre-trained pre-trained on COCO", "\n", "self", ".", "model", "=", "torchvision", ".", "models", ".", "detection", ".", "fasterrcnn_resnet50_fpn", "(", "\n", "pretrained", "=", "True", "\n", ")", "\n", "\n", "# get number of input features for the classifier", "\n", "in_features", "=", "self", ".", "model", ".", "roi_heads", ".", "box_predictor", ".", "cls_score", ".", "in_features", "\n", "# replace the pre-trained head with a new one", "\n", "self", ".", "model", ".", "roi_heads", ".", "box_predictor", "=", "FastRCNNPredictor", "(", "\n", "in_features", ",", "self", ".", "config", ".", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.models.fastrcnn.FastRCNN.forward": [[23, 25], ["fastrcnn.FastRCNN.model.forward"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.forward"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "forward", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.breizhcrops.SelectBands.__init__": [[24, 39], ["base.BaseTransforms.__init__", "numpy.array", "bands.index"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["from", ".", ".", "base", "import", "BaseDataset", "\n", "from", ".", "schemas", "import", "BreizhCropsSchema", "\n", "from", ".", "urls", "import", "(", "\n", "CLASSMAPPINGURL", ",", "\n", "CODESURL", ",", "\n", "FILESIZES", ",", "\n", "RAW_CSV_URL", ",", "\n", "H5_URLs", ",", "\n", "INDEX_FILE_URLs", ",", "\n", "SHP_URLs", ",", "\n", ")", "\n", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ",", "format", "=", "\"%(asctime)s %(levelname)s %(message)s\"", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.breizhcrops.SelectBands.__call__": [[40, 55], ["numpy.random.choice", "numpy.random.choice.sort", "torch.from_numpy().type", "torch.tensor", "torch.from_numpy"], "methods", ["None"], ["class", "DownloadProgressBar", "(", "tqdm", ")", ":", "\n", "    ", "def", "update_to", "(", "self", ",", "b", "=", "1", ",", "bsize", "=", "1", ",", "tsize", "=", "None", ")", ":", "\n", "        ", "if", "tsize", "is", "not", "None", ":", "\n", "            ", "self", ".", "total", "=", "tsize", "\n", "", "self", ".", "update", "(", "b", "*", "bsize", "-", "self", ".", "n", ")", "\n", "\n", "\n", "", "", "def", "download_file", "(", "url", ",", "output_path", ",", "overwrite", "=", "False", ")", ":", "\n", "    ", "if", "url", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"download_file: provided url is None!\"", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "output_path", ")", "or", "overwrite", ":", "\n", "        ", "with", "DownloadProgressBar", "(", "\n", "unit", "=", "\"B\"", ",", "unit_scale", "=", "True", ",", "miniters", "=", "1", ",", "desc", "=", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", ")", "as", "t", ":", "\n", "            ", "urllib", ".", "request", ".", "urlretrieve", "(", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.segmentation.MinMaxNormTransponse.__call__": [[9, 11], ["sample.transpose().astype", "sample.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "sample", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "\"float32\"", ")", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.segmentation.Transponse.__call__": [[14, 16], ["sample.transpose().astype", "sample.transpose"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "sample", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.segmentation.MinMaxNorm.__call__": [[19, 21], ["sample.astype"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "sample", ".", "astype", "(", "\"float32\"", ")", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.segmentation.ColorTransformations.__call__": [[24, 33], ["albumentations.Compose", "albumentations.Compose.", "albumentations.OneOf", "albumentations.HueSaturationValue", "albumentations.CLAHE", "albumentations.RandomBrightnessContrast"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data_transforms", "=", "A", ".", "Compose", "(", "[", "\n", "A", ".", "OneOf", "(", "[", "\n", "A", ".", "HueSaturationValue", "(", "10", ",", "15", ",", "10", ")", ",", "\n", "A", ".", "CLAHE", "(", "clip_limit", "=", "2", ")", ",", "\n", "A", ".", "RandomBrightnessContrast", "(", ")", ",", "\n", "]", ",", "p", "=", "0.3", ")", ",", "\n", "]", ")", "\n", "return", "data_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.segmentation.ResizeToTensor.__call__": [[36, 46], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "return", "data_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.segmentation.ResizePerChannelToTensor.__call__": [[49, 67], ["torchvision.transforms.Compose", "torch.cat", "x.append", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Compose."], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"Applies transformations per channel. Assumes this format: (channel, h, w)\"\"\"", "\n", "\n", "data_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "x", "=", "[", "]", "\n", "# apply transformations to each channel", "\n", "for", "ch", "in", "sample", ":", "\n", "            ", "x", ".", "append", "(", "data_transforms", "(", "ch", ")", ")", "\n", "\n", "# this is the multichannel transformed image (a torch tensor)", "\n", "", "return", "torch", ".", "cat", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.joint_transforms.FlipHVRandomRotate.__call__": [[7, 16], ["albumentations.Compose", "albumentations.Compose.", "albumentations.Compose.", "albumentations.HorizontalFlip", "albumentations.VerticalFlip", "albumentations.RandomRotate90", "albumentations.ShiftScaleRotate"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "image", ",", "mask", "=", "None", ")", ":", "\n", "        ", "data_transforms", "=", "A", ".", "Compose", "(", "[", "\n", "A", ".", "HorizontalFlip", "(", ")", ",", "\n", "A", ".", "VerticalFlip", "(", ")", ",", "\n", "A", ".", "RandomRotate90", "(", ")", ",", "\n", "A", ".", "ShiftScaleRotate", "(", "shift_limit", "=", "0.0625", ",", "scale_limit", "=", "0.2", ",", "rotate_limit", "=", "15", ",", "\n", "p", "=", "0.9", ",", "border_mode", "=", "cv2", ".", "BORDER_REFLECT", ")", ",", "\n", "]", ")", "\n", "return", "data_transforms", "(", "image", ")", ",", "data_transforms", "(", "mask", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.big_earth_net.ResizeToTensorNormalizeRGB.__init__": [[11, 16], ["base.BaseTransforms.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["import", "pickle", "\n", "import", "cv2", "\n", "\n", "from", "itertools", "import", "compress", "\n", "from", "skimage", ".", "transform", "import", "resize", "\n", "from", "torch", ".", "utils", ".", "data", "import", "DataLoader", ",", "Dataset", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.big_earth_net.ResizeToTensorNormalizeRGB.__call__": [[17, 24], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.Normalize"], "methods", ["None"], ["from", ".", ".", "base", "import", "BaseDataset", "\n", "from", ".", "schemas", "import", "BigEarthNetSchema", "\n", "from", ".", ".", "utils", "import", "tiff_loader", "\n", "\n", "LABELS", "=", "{", "\n", "\"original_labels\"", ":", "{", "\n", "\"Continuous urban fabric\"", ":", "0", ",", "\n", "\"Discontinuous urban fabric\"", ":", "1", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.big_earth_net.ToTensorResizeRandomCropFlipHV.__init__": [[27, 29], ["base.BaseTransforms.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["\"Port areas\"", ":", "4", ",", "\n", "\"Airports\"", ":", "5", ",", "\n", "\"Mineral extraction sites\"", ":", "6", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.big_earth_net.ToTensorResizeRandomCropFlipHV.__call__": [[30, 40], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomVerticalFlip"], "methods", ["None"], ["\"Dump sites\"", ":", "7", ",", "\n", "\"Construction sites\"", ":", "8", ",", "\n", "\"Green urban areas\"", ":", "9", ",", "\n", "\"Sport and leisure facilities\"", ":", "10", ",", "\n", "\"Non-irrigated arable land\"", ":", "11", ",", "\n", "\"Permanently irrigated land\"", ":", "12", ",", "\n", "\"Rice fields\"", ":", "13", ",", "\n", "\"Vineyards\"", ":", "14", ",", "\n", "\"Fruit trees and berry plantations\"", ":", "15", ",", "\n", "\"Olive groves\"", ":", "16", ",", "\n", "\"Pastures\"", ":", "17", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.big_earth_net.ToTensorResizeCenterCrop.__init__": [[43, 45], ["base.BaseTransforms.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["\"Land principally occupied by agriculture, with significant areas of natural vegetation\"", ":", "20", ",", "\n", "\"Agro-forestry areas\"", ":", "21", ",", "\n", "\"Broad-leaved forest\"", ":", "22", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.big_earth_net.ToTensorResizeCenterCrop.__call__": [[46, 54], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop"], "methods", ["None"], ["\"Coniferous forest\"", ":", "23", ",", "\n", "\"Mixed forest\"", ":", "24", ",", "\n", "\"Natural grassland\"", ":", "25", ",", "\n", "\"Moors and heathland\"", ":", "26", ",", "\n", "\"Sclerophyllous vegetation\"", ":", "27", ",", "\n", "\"Transitional woodland/shrub\"", ":", "28", ",", "\n", "\"Beaches, dunes, sands\"", ":", "29", ",", "\n", "\"Bare rock\"", ":", "30", ",", "\n", "\"Sparsely vegetated areas\"", ":", "31", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.big_earth_net.ToTensorResize.__init__": [[57, 59], ["base.BaseTransforms.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["\"Peatbogs\"", ":", "34", ",", "\n", "\"Salt marshes\"", ":", "35", ",", "\n", "\"Salines\"", ":", "36", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.big_earth_net.ToTensorResize.__call__": [[60, 66], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.ToTensor", "torchvision.transforms.Resize"], "methods", ["None"], ["\"Intertidal flats\"", ":", "37", ",", "\n", "\"Water courses\"", ":", "38", ",", "\n", "\"Water bodies\"", ":", "39", ",", "\n", "\"Coastal lagoons\"", ":", "40", ",", "\n", "\"Estuaries\"", ":", "41", ",", "\n", "\"Sea and ocean\"", ":", "42", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.big_earth_net.NormalizeAllBands.__init__": [[72, 79], ["base.BaseTransforms.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["[", "17", "]", ",", "\n", "[", "19", "]", ",", "\n", "[", "20", "]", ",", "\n", "[", "21", "]", ",", "\n", "[", "22", "]", ",", "\n", "[", "23", "]", ",", "\n", "[", "24", "]", ",", "\n", "[", "25", ",", "31", "]", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.big_earth_net.NormalizeAllBands.__call__": [[80, 90], ["zip", "zip", "t.sub_().div_", "t.sub_().div_", "t.sub_", "t.sub_"], "methods", ["None"], ["[", "26", ",", "27", "]", ",", "\n", "[", "28", "]", ",", "\n", "[", "29", "]", ",", "\n", "[", "33", ",", "34", "]", ",", "\n", "[", "35", ",", "36", "]", ",", "\n", "[", "38", ",", "39", "]", ",", "\n", "[", "40", ",", "41", ",", "42", "]", ",", "\n", "]", ",", "\n", "\"BigEarthNet-19_labels\"", ":", "{", "\n", "\"Urban fabric\"", ":", "0", ",", "\n", "\"Industrial or commercial units\"", ":", "1", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.big_earth_net.ToTensorAllBands.__call__": [[93, 96], ["torch.tensor().permute", "torch.tensor().permute", "torch.tensor", "torch.tensor"], "methods", ["None"], ["\"Pastures\"", ":", "4", ",", "\n", "\"Complex cultivation patterns\"", ":", "5", ",", "\n", "\"Land principally occupied by agriculture, with significant areas of natural vegetation\"", ":", "6", ",", "\n", "\"Agro-forestry areas\"", ":", "7", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.classification.ResizeRandomCropFlipHVToTensor.__call__": [[6, 17], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomVerticalFlip", "torchvision.transforms.ToTensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomVerticalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "# transform the image from H x W x C to C x H x W", "\n", "]", ")", "\n", "\n", "return", "data_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.classification.ResizeCenterCropToTensor.__call__": [[20, 29], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "return", "data_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.classification.ConvertToRGBResizeCenterCropToTensor.__call__": [[32, 42], ["torchvision.transforms.Compose", "torchvision.transforms.Compose.", "torchvision.transforms.ToPILImage", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "=", "sample", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "return", "data_transforms", "(", "sample", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.spacenet6.SpaceNet6Transforms.__call__": [[41, 94], ["sample.get", "sample.get", "max", "cv2.copyMakeBorder", "cv2.copyMakeBorder", "cv2.getRotationMatrix2D", "cv2.warpAffine", "cv2.warpAffine", "random.randint", "random.randint", "spacenet6.saturation", "spacenet6.brightness", "spacenet6.contrast", "random.random", "cv2.getRotationMatrix2D", "cv2.warpAffine", "cv2.warpAffine", "random.random", "numpy.fliplr", "numpy.fliplr", "random.uniform", "random.random", "random.random", "random.random", "random.randint"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.spacenet6.saturation", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.spacenet6.brightness", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.spacenet6.contrast"], ["\n", "def", "integer_coordinates", "(", "x", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "x", ")", ".", "round", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "", "exteriors", "=", "[", "integer_coordinates", "(", "poly", ".", "exterior", ".", "coords", ")", "]", "\n", "interiors", "=", "[", "integer_coordinates", "(", "pi", ".", "coords", ")", "for", "pi", "in", "poly", ".", "interiors", "]", "\n", "cv2", ".", "fillPoly", "(", "image_mask", ",", "exteriors", ",", "1", ")", "\n", "cv2", ".", "fillPoly", "(", "image_mask", ",", "interiors", ",", "0", ")", "\n", "return", "image_mask", "\n", "\n", "\n", "", "def", "process_image", "(", "\n", "image_path", ",", "segmentation_directory", ",", "edge_width", ",", "contact_width", ",", "gt_buildings_csv", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Creates and saves the target (ground-truth) segmentation mask for the input image.\n\n    Parameters\n    ----------\n        image_path : str\n            path to the source image\n        segmentation_directory : str\n            path to the destination directory for the segmentation masks\n        edge_width : int\n            the width of the edge\n        contact_width : int\n            the width of the contact\n        gt_buildings_csv : str\n            path to the source ground-truth-buildings csv\n    \"\"\"", "\n", "gt_buildings", "=", "pd", ".", "read_csv", "(", "gt_buildings_csv", ")", "\n", "image_name", "=", "os", ".", "path", ".", "basename", "(", "image_path", ")", "\n", "values", "=", "gt_buildings", "[", "\n", "(", "gt_buildings", "[", "\"ImageId\"", "]", "==", "\"_\"", ".", "join", "(", "image_name", ".", "split", "(", "\"_\"", ")", "[", "-", "4", ":", "]", ")", "[", ":", "-", "4", "]", ")", "\n", "]", "[", "[", "\"TileBuildingId\"", ",", "\"PolygonWKT_Pix\"", ",", "\"Mean_Building_Height\"", "]", "]", ".", "values", "\n", "labels", "=", "np", ".", "zeros", "(", "(", "900", ",", "900", ")", ",", "dtype", "=", "\"uint16\"", ")", "\n", "heights", "=", "np", ".", "zeros", "(", "(", "900", ",", "900", ")", ",", "dtype", "=", "\"float\"", ")", "\n", "cur_lbl", "=", "0", "\n", "for", "i", "in", "range", "(", "values", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "poly", "=", "loads", "(", "values", "[", "i", ",", "1", "]", ")", "\n", "if", "not", "poly", ".", "is_empty", ":", "\n", "            ", "cur_lbl", "+=", "1", "\n", "msk", "=", "polygon_to_mask", "(", "poly", ",", "(", "900", ",", "900", ")", ")", "\n", "labels", "[", "msk", ">", "0", "]", "=", "cur_lbl", "\n", "if", "values", "[", "i", ",", "2", "]", "==", "values", "[", "i", ",", "2", "]", ":", "\n", "                ", "heights", "[", "msk", ">", "0", "]", "=", "values", "[", "i", ",", "2", "]", "\n", "", "", "", "msk", "=", "np", ".", "zeros", "(", "(", "900", ",", "900", ",", "3", ")", ",", "dtype", "=", "\"uint8\"", ")", "\n", "if", "cur_lbl", ">", "0", ":", "\n", "        ", "footprint_msk", "=", "labels", ">", "0", "\n", "border_msk", "=", "np", ".", "zeros_like", "(", "labels", ",", "dtype", "=", "\"bool\"", ")", "\n", "for", "l", "in", "range", "(", "1", ",", "labels", ".", "max", "(", ")", "+", "1", ")", ":", "\n", "            ", "tmp_lbl", "=", "labels", "==", "l", "\n", "_k", "=", "square", "(", "edge_width", ")", "\n", "tmp", "=", "erosion", "(", "tmp_lbl", ",", "_k", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.spacenet6._blend": [[9, 11], ["None"], "function", ["None"], ["import", "os", "\n", "import", "warnings", "\n", "from", "functools", "import", "partial", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.spacenet6._grayscale": [[16, 18], ["numpy.sum"], "function", ["None"], ["try", ":", "\n", "    ", "import", "gdal", "\n", "", "except", "ModuleNotFoundError", "as", "err", ":", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.spacenet6.saturation": [[20, 23], ["spacenet6._grayscale", "spacenet6._blend"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.spacenet6._grayscale", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.spacenet6._blend"], ["\n", "", "import", "numpy", "as", "np", "\n", "import", "pandas", "as", "pd", "\n", "import", "torch", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.spacenet6.brightness": [[25, 28], ["numpy.zeros_like", "spacenet6._blend"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.spacenet6._blend"], ["from", "skimage", "import", "io", ",", "measure", "\n", "from", "skimage", ".", "morphology", "import", "dilation", ",", "erosion", ",", "square", "\n", "from", "skimage", ".", "segmentation", "import", "watershed", "\n", "from", "tqdm", "import", "tqdm", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.spacenet6.contrast": [[30, 34], ["spacenet6._grayscale", "numpy.repeat", "spacenet6._blend", "np.repeat.mean"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.spacenet6._grayscale", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.transforms.spacenet6._blend"], ["from", ".", ".", "base", "import", "BaseDataset", "\n", "from", ".", ".", "datasets", ".", "schemas", "import", "SpaceNet6DatasetSchema", "\n", "from", ".", ".", "utils", "import", "parse_img_id", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.segmentation.F1ScoreSample.__init__": [[11, 14], ["base.BaseMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["\n", "\n", "", "", "class", "Transponse", "(", "BaseTransforms", ")", ":", "\n", "    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.segmentation.F1ScoreSample.calculate": [[15, 33], ["enumerate", "float", "torch.from_numpy", "torch.from_numpy", "predictions.to.to.to", "labels.to.to.to", "torch.sum", "numpy.array", "numpy.array", "torch.sum", "torch.sum", "len"], "methods", ["None"], ["        ", "return", "sample", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "\n", "\n", "", "", "class", "MinMaxNorm", "(", "BaseTransforms", ")", ":", "\n", "    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "sample", ".", "astype", "(", "\"float32\"", ")", "/", "255", "\n", "\n", "\n", "", "", "class", "ColorTransformations", "(", "BaseTransforms", ")", ":", "\n", "    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data_transforms", "=", "A", ".", "Compose", "(", "[", "\n", "A", ".", "OneOf", "(", "[", "\n", "A", ".", "HueSaturationValue", "(", "10", ",", "15", ",", "10", ")", ",", "\n", "A", ".", "CLAHE", "(", "clip_limit", "=", "2", ")", ",", "\n", "A", ".", "RandomBrightnessContrast", "(", ")", ",", "\n", "]", ",", "p", "=", "0.3", ")", ",", "\n", "]", ")", "\n", "return", "data_transforms", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.segmentation.IoU.__init__": [[39, 42], ["base.BaseMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.segmentation.IoU.calculate": [[43, 57], ["enumerate", "float", "torch.from_numpy", "torch.from_numpy", "predictions.to.to.to", "labels.to.to.to", "torch.sum", "numpy.array", "numpy.array", "len", "torch.sum", "torch.sum"], "methods", ["None"], [")", "\n", "\n", "return", "data_transforms", "(", "sample", ")", "\n", "\n", "\n", "", "", "class", "ResizePerChannelToTensor", "(", "BaseTransforms", ")", ":", "\n", "    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"Applies transformations per channel. Assumes this format: (channel, h, w)\"\"\"", "\n", "\n", "data_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.segmentation.Accuracy.__init__": [[63, 66], ["base.BaseMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["            ", "x", ".", "append", "(", "data_transforms", "(", "ch", ")", ")", "\n", "\n", "# this is the multichannel transformed image (a torch tensor)", "\n", "", "return", "torch", ".", "cat", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.segmentation.Accuracy.calculate": [[67, 80], ["enumerate", "float", "torch.from_numpy", "torch.from_numpy", "predictions.to.to.to", "labels.to.to.to", "torch.sum", "numpy.array", "numpy.array", "len", "labels.to.to.view"], "methods", ["None"], ["\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.segmentation.DiceCoefficient.__init__": [[94, 96], ["base.BaseMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.segmentation.DiceCoefficient.calculate": [[97, 149], ["isinstance", "isinstance", "len", "torch.from_numpy.view", "torch.from_numpy.view", "torch.clamp", "torch.from_numpy", "torch.from_numpy", "ValueError", "torch.from_numpy.view.sum", "torch.from_numpy.view.sum", "scores.sum", "numpy.array", "numpy.array"], "methods", ["None"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.segmentation.FocalLoss.__init__": [[167, 185], ["base.BaseMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.segmentation.FocalLoss.calculate": [[186, 243], ["isinstance", "isinstance", "len", "enumerate", "torch.from_numpy", "torch.from_numpy", "ValueError", "torch.exp", "segmentation.FocalLoss.calculate.loss"], "methods", ["None"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.segmentation.CompositeMetric.__init__": [[252, 276], ["base.BaseMetric.__init__", "zip", "len", "len", "ValueError", "sum", "ValueError", "len", "len", "sum"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.segmentation.CompositeMetric.calculate": [[277, 314], ["isinstance", "isinstance", "sum", "torch.from_numpy", "torch.from_numpy", "ValueError", "starmap", "numpy.array", "numpy.array", "metric.calculate"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.BaseMetric.calculate"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.classification.AccuracyScore.__init__": [[10, 12], ["base.BaseMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["transforms", ".", "RandomCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomVerticalFlip", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.classification.AccuracyScore.calculate": [[13, 15], ["sklearn.metrics.accuracy_score"], "methods", ["None"], ["transforms", ".", "ToTensor", "(", ")", ",", "# transform the image from H x W x C to C x H x W", "\n", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.classification.AveragedScore.__init__": [[18, 21], ["base.BaseMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["\n", "", "", "class", "ResizeCenterCropToTensor", "(", "BaseTransforms", ")", ":", "\n", "    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.classification.AveragedScore.calculate": [[22, 28], ["classification.AveragedScore.method", "classification.AveragedScore.method", "classification.AveragedScore.method"], "methods", ["None"], ["transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "return", "data_transforms", "(", "sample", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.classification.PrecisionScore.__init__": [[34, 37], ["classification.AveragedScore.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["data_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.classification.RecallScore.__init__": [[43, 46], ["classification.AveragedScore.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.metrics.classification.F1Score.__init__": [[52, 55], ["classification.AveragedScore.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.segmentation.ImageMaskPredictionVisualization.__init__": [[9, 12], ["base.BaseDetailedVisualization.__init__", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "sample", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "\"float32\"", ")", "/", "255", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.segmentation.ImageMaskPredictionVisualization.plot": [[13, 17], ["utils.pil_loader", "segmentation.ImageMaskPredictionVisualization.plot_segmenation", "segmentation.ImageMaskPredictionVisualization.savefig"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.pil_loader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.segmentation.ImageMaskPredictionVisualization.plot_segmenation"], ["", "", "class", "Transponse", "(", "BaseTransforms", ")", ":", "\n", "    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "sample", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.segmentation.ImageMaskPredictionVisualization.plot_segmenation": [[18, 40], ["matplotlib.figure", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "range", "matplotlib.tight_layout", "len", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "len", "len"], "methods", ["None"], ["", "", "class", "MinMaxNorm", "(", "BaseTransforms", ")", ":", "\n", "    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "sample", ".", "astype", "(", "\"float32\"", ")", "/", "255", "\n", "\n", "\n", "", "", "class", "ColorTransformations", "(", "BaseTransforms", ")", ":", "\n", "    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data_transforms", "=", "A", ".", "Compose", "(", "[", "\n", "A", ".", "OneOf", "(", "[", "\n", "A", ".", "HueSaturationValue", "(", "10", ",", "15", ",", "10", ")", ",", "\n", "A", ".", "CLAHE", "(", "clip_limit", "=", "2", ")", ",", "\n", "A", ".", "RandomBrightnessContrast", "(", ")", ",", "\n", "]", ",", "p", "=", "0.3", ")", ",", "\n", "]", ")", "\n", "return", "data_transforms", "(", "sample", ")", "\n", "\n", "\n", "", "", "class", "ResizeToTensor", "(", "BaseTransforms", ")", ":", "\n", "    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.segmentation.display_image_segmentation": [[42, 47], ["segmentation.ImageMaskPredictionVisualization", "segmentation.ImageMaskPredictionVisualization.plot"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.visualizations.BaseDetailedVisualization.plot"], ["]", "\n", ")", "\n", "\n", "return", "data_transforms", "(", "sample", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.segmentation.save_predicted_masks": [[49, 55], ["range", "len", "PIL.Image.fromarray", "Image.fromarray.save", "y_pred[].astype"], "function", ["None"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "\"\"\"Applies transformations per channel. Assumes this format: (channel, h, w)\"\"\"", "\n", "\n", "data_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "256", ",", "256", ")", ")", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.classification.PrecisionRecallCurve.plot": [[63, 84], ["matplotlib.figure", "range", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.title", "matplotlib.figure.savefig", "len", "sklearn.precision_recall_curve", "matplotlib.plot"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.classification.precision_recall_curve", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.visualizations.BaseDetailedVisualization.plot"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.classification.ImageLabelsVisualization.__init__": [[87, 90], ["base.BaseDetailedVisualization.__init__", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.classification.ImageLabelsVisualization.plot": [[91, 95], ["utils.pil_loader", "classification.ImageLabelsVisualization.plot_prediction", "classification.ImageLabelsVisualization.savefig"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.pil_loader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.classification.ImageLabelsVisualization.plot_prediction"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.classification.ImageLabelsVisualization.plot_prediction": [[96, 117], ["pandas.DataFrame", "matplotlib.figure", "matplotlib.subplot", "matplotlib.subplot.imshow", "matplotlib.subplot.set_title", "matplotlib.subplot", "[].plot.barh", "matplotlib.xlabel", "matplotlib.tight_layout", "pandas.DataFrame.sort_values"], "methods", ["None"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.classification.plot_confusion_matrix": [[11, 24], ["pandas.DataFrame", "sns.heatmap.yaxis.set_ticklabels", "sns.heatmap.xaxis.set_ticklabels", "axes.set_ylabel", "axes.set_xlabel", "axes.set_title", "seaborn.heatmap", "sns.heatmap.yaxis.get_ticklabels", "sns.heatmap.xaxis.get_ticklabels", "ValueError"], "function", ["None"], ["transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomVerticalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "# transform the image from H x W x C to C x H x W", "\n", "]", ")", "\n", "\n", "return", "data_transforms", "(", "sample", ")", "\n", "\n", "\n", "", "", "class", "ResizeCenterCropToTensor", "(", "BaseTransforms", ")", ":", "\n", "    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.classification.plot_multilabel_confusion_matrix": [[26, 35], ["matplotlib.subplots", "zip", "figure.tight_layout", "figure.savefig", "math.ceil", "ax.flatten", "classification.plot_confusion_matrix", "len"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.classification.plot_confusion_matrix"], ["]", ")", "\n", "\n", "return", "data_transforms", "(", "sample", ")", "\n", "\n", "\n", "", "", "class", "ConvertToRGBResizeCenterCropToTensor", "(", "BaseTransforms", ")", ":", "\n", "    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "=", "sample", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.classification.plot_multiclass_confusion_matrix": [[37, 60], ["pandas.DataFrame", "matplotlib.axes", "seaborn.set", "seaborn.heatmap", "matplotlib.yticks", "plt.figure.tight_layout", "plt.figure.savefig", "len", "matplotlib.figure", "len", "matplotlib.figure", "len", "matplotlib.figure", "matplotlib.figure"], "function", ["None"], ["transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "return", "data_transforms", "(", "sample", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.classification.display_image_labels": [[119, 124], ["classification.ImageLabelsVisualization", "classification.ImageLabelsVisualization.plot"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.visualizations.BaseDetailedVisualization.plot"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.classification.precision_recall_curve": [[126, 129], ["classification.PrecisionRecallCurve", "classification.PrecisionRecallCurve.plot"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.visualizations.BaseDetailedVisualization.plot"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.eopatch.display_eopatch_predictions": [[14, 94], ["eolearn.core.EOPatch.load", "polygons.itertuples", "polygons.copy", "pandas.Series", "len", "eolearn.geometry.VectorToRasterTask", "numpy.unique", "matplotlib.figure", "plt.figure.add_subplot", "matplotlib.cm.get_cmap", "matplotlib.colors.LinearSegmentedColormap.from_list", "fig.add_subplot.imshow", "matplotlib.legend", "matplotlib.subplots_adjust", "plt.figure.savefig", "croptype_indicator_mask.ravel", "ax.imshow.cmap", "matplotlib.Patch", "str", "predictions_list.append", "true_list.append", "predictions_list.append", "true_list.append", "eolearn.geometry.VectorToRasterTask.execute", "tuple", "matplotlib.colors.Normalize", "ax.imshow.norm", "textwrap.wrap", "range", "int", "int", "int", "len", "str", "len"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load"], ["def", "display_eopatch_predictions", "(", "\n", "eopatches_path", ",", "patch", ",", "y_pred", ",", "test_index", ",", "output_path", ",", "y_true", ",", "classmapping", "\n", ")", ":", "\n", "    ", "eop", "=", "EOPatch", ".", "load", "(", "eopatches_path", "+", "os", ".", "sep", "+", "patch", ")", "\n", "polygons", "=", "eop", ".", "vector_timeless", "[", "\"CROP_TYPE_GDF\"", "]", "\n", "predictions_list", "=", "[", "]", "\n", "true_list", "=", "[", "]", "\n", "for", "row", "in", "polygons", ".", "itertuples", "(", ")", ":", "\n", "        ", "current_path", "=", "patch", "+", "os", ".", "sep", "+", "str", "(", "int", "(", "row", ".", "polygon_id", ")", ")", "\n", "if", "current_path", "in", "test_index", ".", "path", ".", "values", ":", "\n", "            ", "label", "=", "y_pred", "[", "\n", "test_index", ".", "index", "[", "test_index", "[", "\"path\"", "]", "==", "current_path", "]", ".", "values", "[", "0", "]", "\n", "]", "\n", "true_label", "=", "y_true", "[", "\n", "test_index", ".", "index", "[", "test_index", "[", "\"path\"", "]", "==", "current_path", "]", ".", "values", "[", "0", "]", "\n", "]", "\n", "predictions_list", ".", "append", "(", "\n", "int", "(", "label", ")", "\n", ")", "# temporary, not consistent with classmapping", "\n", "true_list", ".", "append", "(", "int", "(", "true_label", ")", ")", "\n", "", "else", ":", "\n", "            ", "predictions_list", ".", "append", "(", "\n", "11", "\n", ")", "# essentially background as in VectorToRasterTask, should be changed", "\n", "true_list", ".", "append", "(", "11", ")", "\n", "\n", "", "", "pred_polygons", "=", "polygons", ".", "copy", "(", ")", "\n", "pred_polygons", "[", "\"ct_pred\"", "]", "=", "pd", ".", "Series", "(", "\n", "data", "=", "predictions_list", ",", "index", "=", "pred_polygons", ".", "index", "\n", ")", "\n", "\n", "n_classes", "=", "len", "(", "classmapping", ".", "index", ")", "\n", "\n", "temp", "=", "VectorToRasterTask", "(", "\n", "vector_input", "=", "pred_polygons", ",", "\n", "raster_feature", "=", "(", "FeatureType", ".", "MASK_TIMELESS", ",", "\"poly\"", ")", ",", "\n", "values_column", "=", "\"ct_pred\"", ",", "\n", "raster_shape", "=", "(", "FeatureType", ".", "MASK_TIMELESS", ",", "\"CROP_TYPE\"", ")", ",", "\n", "no_data_value", "=", "11", ",", "\n", ")", "\n", "croptype_indicator_mask", "=", "temp", ".", "execute", "(", "eop", ")", ".", "mask_timeless", "[", "\"poly\"", "]", "\n", "values", "=", "np", ".", "unique", "(", "croptype_indicator_mask", ".", "ravel", "(", ")", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "13", ",", "10", ")", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", ")", "\n", "\n", "croptype_indicator_mask", "=", "croptype_indicator_mask", "\n", "tab10_map", "=", "cm", ".", "get_cmap", "(", "\"tab10\"", ",", "n_classes", ")", "# If it's not 10 this wont work?", "\n", "colors", "=", "[", "tuple", "(", "col", ")", "for", "col", "in", "tab10_map", ".", "colors", "]", "+", "[", "\n", "(", "1", ",", "1", ",", "1", ")", "\n", "]", "# this or list all colors from mapping csv (not implemented yet)", "\n", "\n", "cmap", "=", "LinearSegmentedColormap", ".", "from_list", "(", "\"mycmap\"", ",", "colors", ",", "N", "=", "n_classes", "+", "1", ")", "\n", "\n", "im", "=", "ax", ".", "imshow", "(", "\n", "croptype_indicator_mask", ",", "\n", "norm", "=", "Normalize", "(", "vmin", "=", "0", ",", "vmax", "=", "len", "(", "classmapping", ".", "index", ".", "values", ")", ")", ",", "\n", "cmap", "=", "cmap", ",", "\n", ")", "#'nipy_spectral') #gist_ncar", "\n", "\n", "# get the colors of the values, according to the", "\n", "# colormap used by imshow", "\n", "colors", "=", "[", "im", ".", "cmap", "(", "im", ".", "norm", "(", "value", ")", ")", "for", "value", "in", "values", "]", "\n", "\n", "# create a patch (proxy artist) for every color", "\n", "\n", "labels", "=", "[", "\n", "classmapping", "[", "classmapping", ".", "id", "==", "cl_id", "]", ".", "classname", ".", "values", "[", "0", "]", "\n", "for", "cl_id", "in", "values", "[", ":", "-", "1", "]", "\n", "]", "+", "[", "\"Background\"", "]", "\n", "labels", "=", "[", "\"\\n\"", ".", "join", "(", "wrap", "(", "l", ",", "22", ")", ")", "for", "l", "in", "labels", "]", "\n", "patches", "=", "[", "\n", "mpatches", ".", "Patch", "(", "edgecolor", "=", "(", "0", ",", "0", ",", "0", ")", ",", "facecolor", "=", "colors", "[", "i", "]", ",", "label", "=", "labels", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "values", ")", ")", "\n", "]", "\n", "# put those patched as legend-handles into the legend", "\n", "plt", ".", "legend", "(", "handles", "=", "patches", ",", "bbox_to_anchor", "=", "(", "1.05", ",", "1", ")", ",", "loc", "=", "2", ",", "borderaxespad", "=", "0.0", ")", "\n", "plt", ".", "subplots_adjust", "(", "left", "=", "0.15", ",", "right", "=", "0.7", ")", "\n", "fig", ".", "savefig", "(", "\n", "output_path", "+", "os", ".", "sep", "+", "\"eop\"", "+", "str", "(", "patch", ")", "+", "\"_visual_predictions.png\"", ",", "dpi", "=", "300", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.transforms.BaseTransforms.__init__": [[48, 50], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.transforms.BaseTransforms.__call__": [[51, 53], ["NotImplementedError"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Please implement the `__call__` method\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.transforms.load_transforms": [[13, 39], ["torchvision.transforms.Compose", "utils.get_class", "TRANSFORMS_PARAMS.get", "lst_transforms.append", "utils.get_class.", "getattr", "utils.get_class.", "utils.get_class.", "getattr"], "function", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.get_class"], ["def", "load_transforms", "(", "class_names", ",", "config", ")", ":", "\n", "    ", "\"\"\"Loads transformation classes and make a composition of them\"\"\"", "\n", "lst_transforms", "=", "[", "]", "\n", "\n", "if", "not", "class_names", ":", "\n", "        ", "return", "None", "\n", "\n", "# check all transformation classes", "\n", "", "for", "name", "in", "class_names", ":", "\n", "        ", "cls", "=", "get_class", "(", "name", ")", "# get class", "\n", "args", "=", "TRANSFORMS_PARAMS", ".", "get", "(", "name", ",", "None", ")", "# get params, if specified", "\n", "if", "args", ":", "\n", "            ", "transfrm", "=", "cls", "(", "args", ")", "\n", "", "else", ":", "\n", "            ", "if", "getattr", "(", "cls", ",", "\"configurables\"", ",", "None", ")", ":", "\n", "                ", "kwargs", "=", "{", "}", "\n", "for", "key", "in", "cls", ".", "configurables", ":", "\n", "                    ", "kwargs", "[", "key", "]", "=", "getattr", "(", "config", ",", "key", ")", "\n", "", "transfrm", "=", "cls", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "                ", "transfrm", "=", "cls", "(", ")", "\n", "\n", "", "", "lst_transforms", ".", "append", "(", "transfrm", ")", "\n", "\n", "# return as composition", "\n", "", "return", "transforms", ".", "Compose", "(", "lst_transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.__init__": [[7, 17], ["config.Configurable.__init__", "str", "tasks.BaseTask.generate_task_id"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.generate_task_id"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "\n", "# generate a task ID if not specified", "\n", "id", "=", "self", ".", "config", ".", "id", "\n", "if", "not", "id", ":", "\n", "            ", "id", "=", "str", "(", "self", ".", "generate_task_id", "(", ")", ")", "\n", "", "self", ".", "id", "=", "id", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.create_dataset": [[18, 31], ["utils.get_class", "utils.get_class.", "issubclass", "ValueError"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.get_class"], ["", "@", "staticmethod", "\n", "def", "create_dataset", "(", "dataset_config", ")", ":", "\n", "        ", "\"\"\" Builds the input dataset using the provided configuration. \"\"\"", "\n", "\n", "classname", ",", "config", "=", "dataset_config", ".", "classname", ",", "dataset_config", ".", "config", "\n", "\n", "cls", "=", "get_class", "(", "classname", ")", "\n", "if", "not", "issubclass", "(", "cls", ",", "BaseDataset", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Data input class does not inherit from BaseInput.\"", ")", "\n", "\n", "", "dataset", "=", "cls", "(", "config", ")", "\n", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.generate_task_id": [[32, 35], ["utils.current_ts"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.current_ts"], ["", "def", "generate_task_id", "(", "self", ")", ":", "\n", "        ", "\"\"\"Generates a task ID\"\"\"", "\n", "return", "current_ts", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.tasks.BaseTask.run": [[36, 39], ["None"], "methods", ["None"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "\"\"\"Runs the task.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.EarlyStopping.__init__": [[29, 41], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "patience", "=", "10", ",", "min_delta", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        :param patience: how many epochs to wait before stopping when loss is\n               not improving\n        :param min_delta: minimum difference between new loss and old loss for\n               new loss to be considered as an improvement\n        \"\"\"", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "min_delta", "=", "min_delta", "\n", "self", ".", "counter", "=", "0", "\n", "self", ".", "best_loss", "=", "None", "\n", "self", ".", "early_stop", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.EarlyStopping.__call__": [[42, 55], ["logging.info", "logging.info"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "val_loss", ")", ":", "\n", "        ", "if", "self", ".", "best_loss", "is", "None", ":", "\n", "            ", "self", ".", "best_loss", "=", "val_loss", "\n", "", "elif", "self", ".", "best_loss", "-", "val_loss", ">", "self", ".", "min_delta", ":", "\n", "            ", "self", ".", "best_loss", "=", "val_loss", "\n", "# reset counter if validation loss improves", "\n", "self", ".", "counter", "=", "0", "\n", "", "elif", "self", ".", "best_loss", "-", "val_loss", "<", "self", ".", "min_delta", ":", "\n", "            ", "self", ".", "counter", "+=", "1", "\n", "logging", ".", "info", "(", "f\"INFO: Early stopping counter {self.counter} of {self.patience}\"", ")", "\n", "if", "self", ".", "counter", ">=", "self", ".", "patience", ":", "\n", "                ", "logging", ".", "info", "(", "'INFO: Early stopping'", ")", "\n", "self", ".", "early_stop", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.__init__": [[62, 77], ["config.Configurable.__init__", "super().__init__", "torch.Module", "torch.Module", "torch.device", "torch.device", "torch.device", "torch.device", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "config", "=", "None", ")", ":", "\n", "        ", "Configurable", ".", "__init__", "(", "self", ",", "config", ")", "\n", "super", "(", "BaseModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Module", "(", ")", "\n", "\n", "device_name", "=", "\"cpu\"", "\n", "if", "self", ".", "config", ".", "use_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "device_name", "=", "f\"cuda:{self.config.rank}\"", "\n", "\n", "", "self", ".", "device", "=", "torch", ".", "device", "(", "device_name", ")", "\n", "\n", "self", ".", "metrics", "=", "self", ".", "config", ".", "metrics", "\n", "self", ".", "num_classes", "=", "self", ".", "config", ".", "num_classes", "\n", "self", ".", "weights", "=", "torch", ".", "tensor", "(", "self", ".", "config", ".", "weights", ",", "dtype", "=", "torch", ".", "float32", ")", "if", "self", ".", "config", ".", "weights", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.prepare": [[78, 86], ["models.BaseModel.load_criterion", "models.BaseModel.load_optimizer", "models.BaseModel.load_lr_scheduler", "models.EarlyStopping"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.load_criterion", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.load_optimizer", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.load_lr_scheduler"], ["", "def", "prepare", "(", "self", ")", ":", "\n", "        ", "\"\"\"Prepare the model before using it \"\"\"", "\n", "\n", "# load loss, optimizer and lr scheduler", "\n", "self", ".", "criterion", "=", "self", ".", "load_criterion", "(", ")", "\n", "self", ".", "optimizer", "=", "self", ".", "load_optimizer", "(", ")", "\n", "self", ".", "lr_scheduler", "=", "self", ".", "load_lr_scheduler", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "early_stopping", "=", "EarlyStopping", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.fit": [[87, 209], ["logging.info", "models.BaseModel.allocate_device", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "dataset.dataloader", "range", "models.BaseModel.writer.close", "models.BaseModel.save_model", "logging.info", "logging.info", "logging.info", "logging.info", "models.BaseModel.load_model", "os.path.join", "val_dataset.dataloader", "utils.current_ts", "models.BaseModel.train_epoch", "train_time_epoch.append", "models.BaseModel.writer.add_scalar", "models.BaseModel.running_metrics.reset", "models.BaseModel.evaluate_model", "models.BaseModel.log_metrics", "train_losses.append", "utils.save_best_model", "utils.current_ts", "models.BaseModel.save_model", "models.BaseModel.running_metrics.get_scores", "dataset.get_labels", "models.BaseModel.running_metrics.reset", "models.BaseModel.evaluate_model", "models.BaseModel.log_metrics", "val_losses.append", "models.BaseModel.early_stopping", "models.BaseModel.writer.add_scalar", "models.BaseModel.running_metrics.get_scores", "dataset.get_labels", "copy.deepcopy", "models.BaseModel.lr_scheduler.step", "print"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.allocate_device", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.dataloader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.save_model", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.load_model", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.dataloader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.current_ts", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.train_epoch", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.reset", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.evaluate_model", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.log_metrics", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.save_best_model", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.current_ts", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.save_model", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.get_scores", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_labels", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.reset", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.evaluate_model", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.log_metrics", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.get_scores", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_labels"], ["", "def", "fit", "(", "\n", "self", ",", "\n", "dataset", ":", "BaseDataset", ",", "\n", "epochs", ":", "int", "=", "100", ",", "\n", "model_directory", ":", "str", "=", "None", ",", "\n", "save_epochs", ":", "int", "=", "10", ",", "\n", "iterations_log", ":", "int", "=", "100", ",", "\n", "resume_model", ":", "str", "=", "None", ",", "\n", "val_dataset", ":", "BaseDataset", "=", "None", ",", "\n", "run_id", ":", "str", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "logging", ".", "info", "(", "\"Starting training.\"", ")", "\n", "\n", "start_epoch", "=", "0", "\n", "train_losses", "=", "[", "]", "\n", "val_losses", "=", "[", "]", "\n", "train_time_epoch", "=", "[", "]", "\n", "total_train_time", "=", "0", "\n", "\n", "best_loss", "=", "None", "\n", "best_epoch", "=", "None", "\n", "best_model", "=", "None", "\n", "\n", "# load the model if needs to resume training", "\n", "if", "resume_model", ":", "\n", "            ", "start_epoch", ",", "loss", ",", "start", ",", "run_id", "=", "self", ".", "load_model", "(", "\n", "resume_model", ",", "self", ".", "optimizer", "\n", ")", "\n", "\n", "# allocate device", "\n", "", "self", ".", "allocate_device", "(", ")", "\n", "\n", "# start logger", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "model_directory", ",", "run_id", ")", ")", "\n", "\n", "# get data loaders", "\n", "train_loader", "=", "dataset", ".", "dataloader", "(", ")", "\n", "val_loader", "=", "None", "\n", "if", "val_dataset", ":", "\n", "            ", "val_loader", "=", "val_dataset", ".", "dataloader", "(", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "epochs", ")", ":", "# loop over the dataset multiple times", "\n", "            ", "start", "=", "current_ts", "(", ")", "\n", "loss", "=", "self", ".", "train_epoch", "(", "\n", "epoch", ",", "train_loader", ",", "self", ".", "optimizer", ",", "self", ".", "criterion", ",", "iterations_log", "\n", ")", "\n", "train_time", "=", "(", "current_ts", "(", ")", "-", "start", ")", "\n", "total_train_time", "+=", "train_time", "\n", "train_time_epoch", ".", "append", "(", "train_time", ")", "\n", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Loss/train\"", ",", "loss", ",", "epoch", "+", "1", ")", "\n", "if", "epoch", "%", "save_epochs", "==", "0", ":", "\n", "                ", "self", ".", "save_model", "(", "\n", "model_directory", ",", "epoch", ",", "self", ".", "optimizer", ",", "loss", ",", "start", ",", "run_id", "\n", ")", "\n", "\n", "# evaluate against the train set", "\n", "", "self", ".", "running_metrics", ".", "reset", "(", ")", "\n", "train_loss", "=", "self", ".", "evaluate_model", "(", "\n", "train_loader", ",", "\n", "criterion", "=", "self", ".", "criterion", ",", "\n", "description", "=", "\"testing on train set\"", ",", "\n", ")", "\n", "self", ".", "log_metrics", "(", "\n", "self", ".", "running_metrics", ".", "get_scores", "(", "self", ".", "metrics", ")", ",", "\n", "dataset", ".", "get_labels", "(", ")", ",", "\n", "\"train\"", ",", "\n", "self", ".", "writer", ",", "\n", "epoch", "+", "1", ",", "\n", ")", "\n", "train_losses", ".", "append", "(", "train_loss", ")", "\n", "\n", "# evaluate against a validation set if there is one", "\n", "if", "val_loader", ":", "\n", "                ", "self", ".", "running_metrics", ".", "reset", "(", ")", "\n", "val_loss", "=", "self", ".", "evaluate_model", "(", "\n", "val_loader", ",", "\n", "criterion", "=", "self", ".", "criterion", ",", "\n", "description", "=", "\"testing on validation set\"", ",", "\n", ")", "\n", "self", ".", "log_metrics", "(", "\n", "self", ".", "running_metrics", ".", "get_scores", "(", "self", ".", "metrics", ")", ",", "\n", "dataset", ".", "get_labels", "(", ")", ",", "\n", "\"val\"", ",", "\n", "self", ".", "writer", ",", "\n", "epoch", "+", "1", ",", "\n", ")", "\n", "val_losses", ".", "append", "(", "val_loss", ")", "\n", "if", "not", "best_loss", "or", "val_loss", "<", "best_loss", ":", "\n", "                    ", "best_loss", "=", "val_loss", "\n", "best_epoch", "=", "epoch", "\n", "best_model", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "\n", "# adjust learning rate if needed", "\n", "", "if", "self", ".", "lr_scheduler", ":", "\n", "                    ", "self", ".", "lr_scheduler", ".", "step", "(", "val_loss", ")", "\n", "# self.lr_scheduler.step()", "\n", "\n", "", "self", ".", "early_stopping", "(", "val_loss", ")", "\n", "if", "self", ".", "early_stopping", ".", "early_stop", ":", "\n", "                    ", "break", "\n", "\n", "", "self", ".", "writer", ".", "add_scalar", "(", "\"Loss/val\"", ",", "val_loss", ",", "epoch", "+", "1", ")", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "                    ", "print", "(", "\"\\nLR\"", ",", "epoch", ",", "param_group", "[", "'lr'", "]", ")", "\n", "\n", "", "", "", "self", ".", "writer", ".", "close", "(", ")", "\n", "\n", "# save the model in the end", "\n", "self", ".", "save_model", "(", "model_directory", ",", "epochs", ",", "self", ".", "optimizer", ",", "loss", ",", "start", ",", "run_id", ")", "\n", "\n", "# save the model with lowest validation loss", "\n", "if", "best_model", ":", "\n", "            ", "save_best_model", "(", "best_model", ",", "model_directory", ",", "best_epoch", "+", "1", ",", "self", ".", "optimizer", ",", "best_loss", ",", "start", ",", "run_id", ")", "\n", "\n", "", "logging", ".", "info", "(", "f\"Train loss: {train_losses}\"", ")", "\n", "logging", ".", "info", "(", "f\"Validation loss: {val_losses}\"", ")", "\n", "logging", ".", "info", "(", "f\"Train time per epochs: {train_time_epoch}\"", ")", "\n", "logging", ".", "info", "(", "f\"Finished training. training time: {total_train_time}\"", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.train_epoch": [[210, 265], ["utils.current_ts", "models.BaseModel.model.train", "enumerate", "logging.info", "tqdm.tqdm.tqdm", "inputs.to.to.to", "labels.to.to.to", "isinstance", "models.BaseModel.", "isinstance", "criterion", "criterion.backward", "isinstance", "len", "optimizer.zero_grad", "optimizer.step", "criterion.item", "inputs.to.to.size", "criterion.item", "inputs.to.to.size", "logging.info", "opt.zero_grad", "labels.to.to.type", "opt.step", "len", "utils.current_ts"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.current_ts", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.current_ts"], ["", "def", "train_epoch", "(", "self", ",", "epoch", ",", "dataloader", ",", "optimizer", ",", "criterion", ",", "iterations_log", ")", ":", "\n", "        ", "start", "=", "current_ts", "(", ")", "\n", "running_loss", "=", "0.0", "\n", "total_loss", "=", "0.0", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataloader", ",", "desc", "=", "\"training\"", ")", ")", ":", "\n", "# get the inputs; data is a list of [inputs, labels]", "\n", "            ", "inputs", ",", "labels", "=", "data", "\n", "inputs", "=", "inputs", ".", "to", "(", "self", ".", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# zero the parameter gradients", "\n", "if", "isinstance", "(", "optimizer", ",", "tuple", ")", ":", "\n", "                ", "for", "opt", "in", "optimizer", ":", "\n", "                    ", "opt", ".", "zero_grad", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# forward + backward + optimize", "\n", "", "outputs", "=", "self", "(", "inputs", ")", "\n", "\n", "# check if outputs is OrderedDict for segmentation", "\n", "if", "isinstance", "(", "outputs", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "                ", "outputs", "=", "outputs", "[", "\"out\"", "]", "\n", "\n", "", "loss", "=", "criterion", "(", "\n", "outputs", ",", "labels", "if", "len", "(", "labels", ".", "shape", ")", "==", "1", "else", "labels", ".", "type", "(", "torch", ".", "float", ")", "\n", ")", "# TODO: Check this converion OUT!!!", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# perform a single optimization step", "\n", "if", "isinstance", "(", "optimizer", ",", "tuple", ")", ":", "\n", "                ", "for", "opt", "in", "optimizer", ":", "\n", "                    ", "opt", ".", "step", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "optimizer", ".", "step", "(", ")", "\n", "\n", "# log statistics", "\n", "", "running_loss", "+=", "loss", ".", "item", "(", ")", "*", "inputs", ".", "size", "(", "0", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "inputs", ".", "size", "(", "0", ")", "\n", "\n", "if", "(", "\n", "i", "%", "iterations_log", "==", "iterations_log", "-", "1", "\n", ")", ":", "# print every iterations_log mini-batches", "\n", "                ", "logging", ".", "info", "(", "\n", "f\"[{epoch + 1}, {i + 1}], loss: {running_loss / iterations_log : .5f}\"", "\n", ")", "\n", "running_loss", "=", "0.0", "\n", "\n", "", "", "total_loss", "=", "total_loss", "/", "len", "(", "dataloader", ".", "dataset", ")", "\n", "logging", ".", "info", "(", "\n", "f\"epoch: {epoch + 1}, time: {current_ts() - start}, loss: {total_loss: .5f}\"", "\n", ")", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.evaluate": [[266, 286], ["models.BaseModel.load_model", "dataset.dataloader", "models.BaseModel.evaluate_model"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.load_model", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.dataloader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.evaluate_model"], ["", "def", "evaluate", "(", "\n", "self", ",", "dataset", ":", "BaseDataset", "=", "None", ",", "model_path", ":", "str", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate a model stored in a specified path against a given dataset\n\n        :param dataset: the dataset to evaluate against\n        :param model_path: the path to the model on disk\n        :return:\n        \"\"\"", "\n", "# load the model", "\n", "self", ".", "load_model", "(", "model_path", ")", "\n", "\n", "# get test data loader", "\n", "dataloader", "=", "dataset", ".", "dataloader", "(", ")", "\n", "\n", "# evaluate model on data", "\n", "result", "=", "self", ".", "evaluate_model", "(", "dataloader", ",", "description", "=", "\"testing on test set\"", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.evaluate_model": [[287, 329], ["models.BaseModel.model.eval", "models.BaseModel.predict_output_per_batch", "models.BaseModel.get_predicted", "models.BaseModel.running_metrics.update", "criterion", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "predicted.to.to.reshape", "predicted.to.to.to", "labels.type", "predicted.to.to.type", "len", "criterion.item", "inputs.size", "labels.size", "predicted.to.to.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "predicted.to.to.type", "labels.size"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.predict_output_per_batch", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.get_predicted", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.update"], ["", "def", "evaluate_model", "(", "\n", "self", ",", "dataloader", ",", "criterion", "=", "None", ",", "description", "=", "\"testing on validation set\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Evaluates the current model against the specified dataloader for the specified metrics\n        :param dataloader:\n        :param metrics: list of metric keys to calculate\n        :criterion: Criterion to calculate loss\n        :description: What to show in the progress bar\n        :return: tuple of (metrics, y_true, y_pred)\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "# initialize loss if applicable", "\n", "total_loss", "=", "0.0", "\n", "\n", "for", "inputs", ",", "outputs", ",", "labels", "in", "self", ".", "predict_output_per_batch", "(", "\n", "dataloader", ",", "description", "\n", ")", ":", "\n", "            ", "if", "criterion", ":", "\n", "                ", "batch_loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "total_loss", "+=", "batch_loss", ".", "item", "(", ")", "*", "inputs", ".", "size", "(", "0", ")", "\n", "\n", "", "predicted_probs", ",", "predicted", "=", "self", ".", "get_predicted", "(", "outputs", ")", "\n", "\n", "if", "(", "\n", "len", "(", "labels", ".", "shape", ")", "==", "1", "\n", ")", ":", "# if it is multiclass, then we need one hot encoding for the predictions", "\n", "                ", "one_hot", "=", "torch", ".", "zeros", "(", "labels", ".", "size", "(", "0", ")", ",", "self", ".", "num_classes", ")", "\n", "predicted", "=", "predicted", ".", "reshape", "(", "predicted", ".", "size", "(", "0", ")", ")", "\n", "one_hot", "[", "torch", ".", "arange", "(", "labels", ".", "size", "(", "0", ")", ")", ",", "predicted", ".", "type", "(", "torch", ".", "long", ")", "]", "=", "1", "\n", "predicted", "=", "one_hot", "\n", "predicted", "=", "predicted", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "self", ".", "running_metrics", ".", "update", "(", "\n", "labels", ".", "type", "(", "torch", ".", "int64", ")", ",", "predicted", ".", "type", "(", "torch", ".", "int64", ")", ",", "predicted_probs", "\n", ")", "\n", "\n", "", "if", "criterion", ":", "\n", "            ", "total_loss", "=", "total_loss", "/", "len", "(", "dataloader", ".", "dataset", ")", "\n", "\n", "", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.predict": [[330, 353], ["models.BaseModel.predict_output_per_batch", "dataset.dataloader", "models.BaseModel.get_predicted", "list", "list", "list", "predicted_probs.cpu().detach().numpy", "predicted.cpu().detach().numpy", "labels.cpu().detach().numpy", "predicted_probs.cpu().detach", "predicted.cpu().detach", "labels.cpu().detach", "predicted_probs.cpu", "predicted.cpu", "labels.cpu"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.predict_output_per_batch", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.dataloader", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.get_predicted"], ["", "def", "predict", "(", "\n", "self", ",", "dataset", ":", "BaseDataset", "=", "None", ",", "description", "=", "\"running prediction\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Predicts using a model against for a specified dataset\n\n        :return: tuple of (y_true, y_pred, y_pred_probs)\n        \"\"\"", "\n", "# initialize counters", "\n", "y_true", "=", "[", "]", "\n", "y_pred", "=", "[", "]", "\n", "y_pred_probs", "=", "[", "]", "\n", "\n", "# predict", "\n", "for", "inputs", ",", "outputs", ",", "labels", "in", "self", ".", "predict_output_per_batch", "(", "\n", "dataset", ".", "dataloader", "(", ")", ",", "description", "\n", ")", ":", "\n", "            ", "predicted_probs", ",", "predicted", "=", "self", ".", "get_predicted", "(", "outputs", ")", "\n", "y_pred_probs", "+=", "list", "(", "predicted_probs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "y_pred", "+=", "list", "(", "predicted", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "y_true", "+=", "list", "(", "labels", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "return", "y_true", ",", "y_pred", ",", "y_pred_probs", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.predict_image": [[354, 403], ["copy.deepcopy", "models.BaseModel.model.eval", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "models.BaseModel.", "isinstance", "models.BaseModel.get_predicted", "list", "pandas.DataFrame", "matplotlib.figure", "matplotlib.subplot", "matplotlib.subplot.axis", "matplotlib.subplot.imshow", "matplotlib.subplot.set_title", "matplotlib.subplot", "[].plot.barh", "matplotlib.xlabel", "matplotlib.tight_layout", "data_transforms", "data_transforms.unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "predicted_probs.cpu().detach().numpy", "data_transforms.unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "predicted_probs.cpu().detach", "pandas.DataFrame.sort_values", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "predicted_probs.cpu"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.get_predicted"], ["", "def", "predict_image", "(", "\n", "self", ",", "\n", "image", "=", "None", ",", "\n", "labels", "=", "None", ",", "\n", "data_transforms", "=", "None", ",", "\n", "description", "=", "\"running prediction for single image\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Predicts using a model against for a specified image\n\n        :return: plot\n        \"\"\"", "\n", "# load the image and apply transformations", "\n", "original_image", "=", "copy", ".", "deepcopy", "(", "image", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "data_transforms", ":", "\n", "            ", "image", "=", "data_transforms", "(", "image", ")", "\n", "# check if tensor and convert to batch of size 1, otherwise convert to tensor and then to batch of size 1", "\n", "", "if", "torch", ".", "is_tensor", "(", "image", ")", ":", "\n", "            ", "inputs", "=", "image", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "torch", ".", "from_numpy", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "outputs", "=", "self", "(", "inputs", ")", "\n", "# check if outputs is OrderedDict for segmentation", "\n", "if", "isinstance", "(", "outputs", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "            ", "outputs", "=", "outputs", "[", "\"out\"", "]", "\n", "\n", "", "predicted_probs", ",", "predicted", "=", "self", ".", "get_predicted", "(", "outputs", ")", "\n", "y_pred_probs", "=", "list", "(", "predicted_probs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "\"\"\"Display image and predictions from model\"\"\"", "\n", "# Convert results to dataframe for plotting", "\n", "result", "=", "pd", ".", "DataFrame", "(", "{", "\"p\"", ":", "y_pred_probs", "[", "0", "]", "}", ",", "index", "=", "labels", ")", "\n", "# Show the image", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "16", ",", "5", ")", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "ax", ".", "axis", "(", "\"off\"", ")", "\n", "ax", ".", "imshow", "(", "original_image", ")", "\n", "\n", "# Set title to be the actual class", "\n", "ax", ".", "set_title", "(", "\"\"", ",", "size", "=", "20", ")", "\n", "\n", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "# Plot a bar plot of predictions", "\n", "result", ".", "sort_values", "(", "\"p\"", ")", "[", "\"p\"", "]", ".", "plot", ".", "barh", "(", "color", "=", "\"blue\"", ",", "edgecolor", "=", "\"k\"", ",", "ax", "=", "ax", ")", "\n", "plt", ".", "xlabel", "(", "\"Predicted Probability\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.predict_masks": [[404, 457], ["copy.deepcopy", "models.BaseModel.model.eval", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "models.BaseModel.", "isinstance", "models.BaseModel.get_predicted", "list", "list", "matplotlib.figure", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "range", "matplotlib.tight_layout", "data_transforms", "data_transforms.unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "torch.from_numpy().unsqueeze().to", "list.cpu().detach().numpy", "list.cpu().detach().numpy", "len", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.title", "matplotlib.axis", "len", "data_transforms.unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "list.cpu().detach", "list.cpu().detach", "len", "[].astype", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "list.cpu", "list.cpu"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.get_predicted"], ["", "def", "predict_masks", "(", "\n", "self", ",", "\n", "image", "=", "None", ",", "\n", "labels", "=", "None", ",", "\n", "data_transforms", "=", "None", ",", "\n", "description", "=", "\"running prediction for single image\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Predicts using a model against for a specified image\n\n        :return: plot\n        \"\"\"", "\n", "# load the image and apply transformations", "\n", "original_image", "=", "copy", ".", "deepcopy", "(", "image", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "data_transforms", ":", "\n", "            ", "image", "=", "data_transforms", "(", "image", ")", "\n", "# check if tensor and convert to batch of size 1, otherwise convert to tensor and then to batch of size 1", "\n", "", "if", "torch", ".", "is_tensor", "(", "image", ")", ":", "\n", "            ", "inputs", "=", "image", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "torch", ".", "from_numpy", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "outputs", "=", "self", "(", "inputs", ")", "\n", "# check if outputs is OrderedDict for segmentation", "\n", "if", "isinstance", "(", "outputs", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "            ", "outputs", "=", "outputs", "[", "\"out\"", "]", "\n", "\n", "", "predicted_probs", ",", "predicted", "=", "self", ".", "get_predicted", "(", "outputs", ")", "\n", "predicted_probs", "=", "list", "(", "predicted_probs", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "predicted", "=", "list", "(", "predicted", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "\"\"\"Display image and masks from model\"\"\"", "\n", "# Show the image", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "10", ")", ")", "\n", "\n", "# plot image", "\n", "plt", ".", "subplot", "(", "1", ",", "len", "(", "labels", ")", "+", "1", ",", "1", ")", "\n", "plt", ".", "imshow", "(", "original_image", ")", "\n", "plt", ".", "title", "(", "\"Image\"", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "\n", "# plot masks", "\n", "for", "i", "in", "range", "(", "len", "(", "labels", ")", ")", ":", "\n", "            ", "plt", ".", "subplot", "(", "1", ",", "len", "(", "labels", ")", "+", "1", ",", "i", "+", "2", ")", "\n", "plt", ".", "imshow", "(", "\n", "predicted", "[", "0", "]", "[", "i", "]", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", ",", "cmap", "=", "\"gray\"", ",", "vmin", "=", "0", ",", "vmax", "=", "255", "\n", ")", "\n", "plt", ".", "title", "(", "labels", "[", "i", "]", ")", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.predict_output_per_batch": [[458, 478], ["models.BaseModel.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "tqdm.tqdm.tqdm", "inputs.to.to.to", "labels.to.to.to", "models.BaseModel.", "isinstance"], "methods", ["None"], ["", "def", "predict_output_per_batch", "(", "self", ",", "dataloader", ",", "description", ")", ":", "\n", "        ", "\"\"\"Run predictions on a dataloader and return inputs, outputs, labels per batch\"\"\"", "\n", "\n", "# turn on eval mode", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "# run predictions", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "dataloader", ",", "desc", "=", "description", ")", ")", ":", "\n", "                ", "inputs", ",", "labels", "=", "data", "\n", "inputs", "=", "inputs", ".", "to", "(", "self", ".", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "outputs", "=", "self", "(", "inputs", ")", "\n", "\n", "# check if outputs is OrderedDict for segmentation", "\n", "if", "isinstance", "(", "outputs", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "                    ", "outputs", "=", "outputs", "[", "\"out\"", "]", "\n", "\n", "", "yield", "inputs", ",", "outputs", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.forward": [[479, 485], ["None"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "*", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Abstract method implementing the model. Extending classes should override this method.\n        :return:  instance extending `nn.Module`\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.get_predicted": [[486, 491], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_predicted", "(", "self", ",", "outputs", ",", "threshold", "=", "None", ")", ":", "\n", "        ", "\"\"\"Gets the output from the model and return the predictions\n        :return: tuple in the format (probabilities, predicted classes/labels)\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Please implement `get_predicted` for your model. \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.report": [[492, 495], ["None"], "methods", ["None"], ["", "def", "report", "(", "self", ",", "labels", ",", "dataset_name", ",", "running_metrics", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"The report we want to generate for the model\"\"\"", "\n", "return", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.log_metrics": [[496, 509], ["logging.info", "utils.stringify", "isinstance", "isinstance", "enumerate", "writer.add_scalar", "writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.stringify"], ["", "def", "log_metrics", "(", "self", ",", "output", ",", "labels", ",", "tag", "=", "\"train\"", ",", "writer", "=", "None", ",", "epoch", "=", "0", ")", ":", "\n", "        ", "\"\"\"Log the calculated metrics\"\"\"", "\n", "calculated_metrics", "=", "output", "\n", "logging", ".", "info", "(", "stringify", "(", "calculated_metrics", ")", ")", "\n", "if", "writer", ":", "\n", "            ", "for", "cm", "in", "calculated_metrics", ":", "\n", "                ", "for", "key", "in", "cm", ":", "\n", "                    ", "metric", "=", "cm", "[", "key", "]", "\n", "if", "isinstance", "(", "metric", ",", "list", ")", "or", "isinstance", "(", "metric", ",", "np", ".", "ndarray", ")", ":", "\n", "                        ", "for", "i", ",", "sub", "in", "enumerate", "(", "metric", ")", ":", "\n", "                            ", "writer", ".", "add_scalar", "(", "f\"{key}/{labels[i]}/{tag}\"", ",", "sub", ",", "epoch", ")", "\n", "", "", "else", ":", "\n", "                        ", "writer", ".", "add_scalar", "(", "f\"{key}/{tag}\"", ",", "metric", ",", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.allocate_device": [[510, 522], ["models.BaseModel.model.to", "models.BaseModel.criterion.to", "torch.parallel.DistributedDataParallel", "torch.parallel.DistributedDataParallel"], "methods", ["None"], ["", "", "", "", "", "def", "allocate_device", "(", "self", ",", "opts", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Put the model on CPU or GPU\n        :return:\n        \"\"\"", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterion", "=", "self", ".", "criterion", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "config", ".", "use_ddp", ":", "\n", "            ", "self", ".", "model", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "self", ".", "model", ",", "device_ids", "=", "[", "self", ".", "device", "]", "\n", ")", "\n", "", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.save_model": [[523, 555], ["utils.current_ts", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "os.path.isdir", "os.makedirs", "os.path.isdir", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "models.BaseModel.model.state_dict", "optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.utils.utils.current_ts"], ["", "def", "save_model", "(", "self", ",", "model_directory", ",", "epoch", ",", "optimizer", ",", "loss", ",", "start", ",", "run_id", ")", ":", "\n", "        ", "\"\"\"\n        Saves the model on disk\n        :param model_directory:\n        :return:\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "model_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "model_directory", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "model_directory", ",", "run_id", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "model_directory", ",", "run_id", ")", ")", "\n", "\n", "", "timestamp", "=", "current_ts", "(", ")", "\n", "checkpoint", "=", "os", ".", "path", ".", "join", "(", "\n", "model_directory", ",", "run_id", ",", "f\"checkpoint_{timestamp}.pth.tar\"", "\n", ")", "\n", "\n", "# create timestamped checkpoint", "\n", "torch", ".", "save", "(", "\n", "{", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"state_dict\"", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"loss\"", ":", "loss", ",", "\n", "\"start\"", ":", "start", ",", "\n", "\"id\"", ":", "run_id", ",", "\n", "}", ",", "\n", "checkpoint", ",", "\n", ")", "\n", "\n", "# replace last checkpoint", "\n", "copyfile", "(", "checkpoint", ",", "os", ".", "path", ".", "join", "(", "model_directory", ",", "\"checkpoint.pth.tar\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.extract_features": [[556, 561], ["None"], "methods", ["None"], ["", "def", "extract_features", "(", "self", ",", "*", "input", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Abstract for trim the model to extract feature. Extending classes should override this method.\n        \"\"\"", "\n", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.load_model": [[562, 592], ["os.path.isfile", "logging.info", "torch.load", "torch.load", "torch.load", "torch.load", "logging.info", "ValueError", "models.BaseModel.model.load_state_dict", "models.BaseModel.allocate_device", "models.BaseModel.model.load_state_dict", "models.BaseModel.allocate_device", "optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.allocate_device", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.allocate_device"], ["", "def", "load_model", "(", "self", ",", "file_path", ",", "optimizer", "=", "None", ")", ":", "\n", "        ", "\"\"\"Loads a model from a checkpoint\"\"\"", "\n", "if", "os", ".", "path", ".", "isfile", "(", "file_path", ")", ":", "\n", "            ", "logging", ".", "info", "(", "f\"Loading checkpoint {file_path}\"", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "file_path", ")", "\n", "\n", "if", "\"state_dict\"", "in", "checkpoint", ":", "\n", "                ", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ",", "strict", "=", "False", ")", "\n", "self", ".", "allocate_device", "(", ")", "\n", "\n", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "loss", "=", "checkpoint", "[", "\"loss\"", "]", "\n", "start", "=", "checkpoint", "[", "\"start\"", "]", "\n", "run_id", "=", "checkpoint", "[", "\"id\"", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", ")", "\n", "self", ".", "allocate_device", "(", ")", "\n", "\n", "start_epoch", "=", "1", "\n", "loss", "=", "0", "\n", "start", "=", "0", "\n", "run_id", "=", "\"\"", "\n", "\n", "", "if", "optimizer", ":", "\n", "                ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "\n", "", "logging", ".", "info", "(", "f\"Loaded checkpoint {file_path} at epoch {start_epoch}\"", ")", "\n", "return", "(", "start_epoch", ",", "loss", ",", "start", ",", "run_id", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"No checkpoint found at {file_path}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.load_optimizer": [[593, 596], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "load_optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load the optimizer\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Please implement `load_optimizer` for your model. \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.load_criterion": [[597, 600], ["NotImplementedError"], "methods", ["None"], ["", "def", "load_criterion", "(", "self", ")", ":", "\n", "        ", "\"\"\"Load the loss function\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Please implement `load_criterion` for your model. \"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.load_lr_scheduler": [[601, 604], ["NotImplementedError"], "methods", ["None"], ["", "def", "load_lr_scheduler", "(", "self", ",", "optimizer", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"Please implement `load_lr_scheduler` for your model. \"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.train_model": [[606, 627], ["models.BaseModel.fit"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.fit"], ["", "def", "train_model", "(", "\n", "self", ",", "\n", "train_dataset", ":", "BaseDataset", ",", "\n", "epochs", ":", "int", "=", "100", ",", "\n", "model_directory", ":", "str", "=", "None", ",", "\n", "save_epochs", ":", "int", "=", "10", ",", "\n", "iterations_log", ":", "int", "=", "100", ",", "\n", "resume_model", ":", "str", "=", "None", ",", "\n", "val_dataset", ":", "BaseDataset", "=", "None", ",", "\n", "run_id", ":", "str", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "return", "self", ".", "fit", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "epochs", "=", "epochs", ",", "\n", "model_directory", "=", "model_directory", ",", "\n", "save_epochs", "=", "save_epochs", ",", "\n", "iterations_log", "=", "iterations_log", ",", "\n", "resume_model", "=", "resume_model", ",", "\n", "run_id", "=", "run_id", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.train_and_evaluate_model": [[629, 651], ["models.BaseModel.fit"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.models.BaseModel.fit"], ["", "def", "train_and_evaluate_model", "(", "\n", "self", ",", "\n", "train_dataset", ":", "BaseDataset", ",", "\n", "epochs", ":", "int", "=", "100", ",", "\n", "model_directory", ":", "str", "=", "None", ",", "\n", "save_epochs", ":", "int", "=", "10", ",", "\n", "iterations_log", ":", "int", "=", "100", ",", "\n", "resume_model", ":", "str", "=", "None", ",", "\n", "val_dataset", ":", "BaseDataset", "=", "None", ",", "\n", "run_id", ":", "str", "=", "None", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "return", "self", ".", "fit", "(", "\n", "dataset", "=", "train_dataset", ",", "\n", "epochs", "=", "epochs", ",", "\n", "model_directory", "=", "model_directory", ",", "\n", "save_epochs", "=", "save_epochs", ",", "\n", "iterations_log", "=", "iterations_log", ",", "\n", "resume_model", "=", "resume_model", ",", "\n", "val_dataset", "=", "val_dataset", ",", "\n", "run_id", "=", "run_id", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.config.Config.__init__": [[11, 24], ["convert.Config.__init__.convert"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "def", "convert", "(", "obj", ")", ":", "\n", "            ", "\"\"\" Recursively convert a dict to Munch. (there is a Munch.from_dict method, but it's not python3 compatible)\n            \"\"\"", "\n", "if", "isinstance", "(", "obj", ",", "list", ")", ":", "\n", "                ", "return", "[", "convert", "(", "element", ")", "for", "element", "in", "obj", "]", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "                ", "return", "Munch", "(", "{", "k", ":", "convert", "(", "v", ")", "for", "k", ",", "v", "in", "obj", ".", "items", "(", ")", "}", ")", "\n", "", "return", "obj", "\n", "\n", "", "config", "=", "convert", "(", "config", ")", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.config.Configurable.__init__": [[49, 53], ["config.Config", "ValueError", "config.Configurable.schema().load", "config.Configurable.schema"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.datasets.breizhcrops.BreizhCropsDataset.load"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "if", "not", "self", ".", "schema", ":", "\n", "            ", "raise", "ValueError", "(", "f\"You are missing a schema for {self.__class__}\"", ")", "\n", "", "self", ".", "config", "=", "Config", "(", "self", ".", "schema", "(", ")", ".", "load", "(", "config", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.segmentation.BaseSegmentationClassifier.__init__": [[17, 21], ["models.BaseModel.__init__", "metrics.SegmentationRunningScore"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["\n", "", "", "class", "MinMaxNorm", "(", "BaseTransforms", ")", ":", "\n", "    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "return", "sample", ".", "astype", "(", "\"float32\"", ")", "/", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.segmentation.BaseSegmentationClassifier.get_predicted": [[22, 28], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh"], "methods", ["None"], ["\n", "", "", "class", "ColorTransformations", "(", "BaseTransforms", ")", ":", "\n", "    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "data_transforms", "=", "A", ".", "Compose", "(", "[", "\n", "A", ".", "OneOf", "(", "[", "\n", "A", ".", "HueSaturationValue", "(", "10", ",", "15", ",", "10", ")", ",", "\n", "A", ".", "CLAHE", "(", "clip_limit", "=", "2", ")", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.segmentation.BaseSegmentationClassifier.load_optimizer": [[29, 32], ["torch.Adam", "torch.Adam", "torch.Adam", "dict", "segmentation.BaseSegmentationClassifier.model.parameters"], "methods", ["None"], ["A", ".", "RandomBrightnessContrast", "(", ")", ",", "\n", "]", ",", "p", "=", "0.3", ")", ",", "\n", "]", ")", "\n", "return", "data_transforms", "(", "sample", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.segmentation.BaseSegmentationClassifier.load_criterion": [[33, 36], ["torch.MSELoss", "torch.MSELoss", "torch.MSELoss"], "methods", ["None"], ["\n", "\n", "", "", "class", "ResizeToTensor", "(", "BaseTransforms", ")", ":", "\n", "    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.segmentation.BaseSegmentationClassifier.load_lr_scheduler": [[37, 39], ["None"], "methods", ["None"], ["        ", "data_transforms", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.BaseMetric.__init__": [[11, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "device", "=", "\"cpu\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.BaseMetric.calculate": [[14, 16], ["NotImplementedError"], "methods", ["None"], ["", "def", "calculate", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Please implement you metric calculation logic here.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.__init__": [[19, 23], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "device", ")", ":", "\n", "        ", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "confusion_matrix", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.__getstate__": [[24, 28], ["metrics.RunningScore.__dict__.copy", "dill.dumps"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "state", "[", "\"confusion_matrix\"", "]", "=", "dill", ".", "dumps", "(", "state", "[", "\"confusion_matrix\"", "]", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.__setstate__": [[29, 33], ["dill.loads", "metrics.RunningScore.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.update"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "new_state", "=", "state", "\n", "new_state", "[", "\"confusion_matrix\"", "]", "=", "dill", ".", "loads", "(", "state", "[", "\"confusion_matrix\"", "]", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "new_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.update": [[34, 37], ["metrics.RunningScore.confusion_matrix.update"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.update"], ["", "def", "update", "(", "self", ",", "y_true", ",", "y_pred", ",", "y_prob", "=", "None", ")", ":", "\n", "        ", "\"\"\"Updates stats on each batch\"\"\"", "\n", "self", ".", "confusion_matrix", ".", "update", "(", "(", "y_pred", ",", "y_true", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.reset": [[38, 41], ["metrics.RunningScore.confusion_matrix.reset"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the confusion matrix\"\"\"", "\n", "self", ".", "confusion_matrix", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.get_computed": [[42, 44], ["metrics.RunningScore.confusion_matrix.compute().type", "metrics.RunningScore.confusion_matrix.compute"], "methods", ["None"], ["", "def", "get_computed", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "confusion_matrix", ".", "compute", "(", ")", ".", "type", "(", "torch", ".", "DoubleTensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.precision": [[45, 47], ["None"], "methods", ["None"], ["", "def", "precision", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.accuracy": [[48, 50], ["None"], "methods", ["None"], ["", "def", "accuracy", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.weights": [[51, 53], ["None"], "methods", ["None"], ["", "def", "weights", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.recall": [[54, 56], ["None"], "methods", ["None"], ["", "def", "recall", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.f1_score": [[57, 78], ["metrics.RunningScore.precision", "metrics.RunningScore.recall", "float", "numpy.mean", "numpy.sum", "metrics.RunningScore.weights"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.precision", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.recall", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.weights"], ["", "def", "f1_score", "(", "self", ")", ":", "\n", "        ", "precision", "=", "self", ".", "precision", "(", ")", "\n", "recall", "=", "self", ".", "recall", "(", ")", "\n", "micro", "=", "(", "\n", "2", "\n", "*", "precision", "[", "\"Precision Micro\"", "]", "\n", "*", "recall", "[", "\"Recall Micro\"", "]", "\n", "/", "(", "precision", "[", "\"Precision Micro\"", "]", "+", "recall", "[", "\"Recall Micro\"", "]", "+", "1e-15", ")", "\n", ")", "\n", "per_class", "=", "(", "\n", "2", "\n", "*", "precision", "[", "\"Precision per Class\"", "]", "\n", "*", "recall", "[", "\"Recall per Class\"", "]", "\n", "/", "(", "precision", "[", "\"Precision per Class\"", "]", "+", "recall", "[", "\"Recall per Class\"", "]", "+", "1e-15", ")", "\n", ")", "\n", "\n", "return", "{", "\n", "\"F1_score Micro\"", ":", "float", "(", "micro", ")", ",", "\n", "\"F1_score Macro\"", ":", "np", ".", "mean", "(", "per_class", ")", ",", "\n", "\"F1_score Weighted\"", ":", "np", ".", "sum", "(", "self", ".", "weights", "(", ")", "*", "per_class", ")", ",", "\n", "\"F1_score per Class\"", ":", "per_class", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.iou": [[80, 82], ["None"], "methods", ["None"], ["", "def", "iou", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.get_scores": [[83, 89], ["result.append", "getattr"], "methods", ["None"], ["", "def", "get_scores", "(", "self", ",", "metrics", ")", ":", "\n", "        ", "\"\"\"Returns the specified metrics\"\"\"", "\n", "result", "=", "[", "]", "\n", "for", "metric", "in", "metrics", ":", "\n", "            ", "result", ".", "append", "(", "getattr", "(", "self", ",", "metric", ")", "(", ")", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiClassRunningScore.__init__": [[94, 98], ["metrics.RunningScore.__init__", "ignite.metrics.confusion_matrix.ConfusionMatrix"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "device", ")", "\n", "self", ".", "confusion_matrix", "=", "confusion_matrix", ".", "ConfusionMatrix", "(", "\n", "num_classes", "=", "num_classes", ",", "device", "=", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiClassRunningScore.accuracy": [[100, 104], ["metrics.MultiClassRunningScore.get_computed", "metrics.MultiClassRunningScore.diag().sum", "float", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.diag"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.get_computed"], ["", "def", "accuracy", "(", "self", ")", ":", "\n", "        ", "cm", "=", "self", ".", "get_computed", "(", ")", "\n", "accuracy", "=", "cm", ".", "diag", "(", ")", ".", "sum", "(", ")", "/", "(", "cm", ".", "sum", "(", ")", "+", "1e-15", ")", "\n", "return", "{", "\"Accuracy\"", ":", "float", "(", "accuracy", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiClassRunningScore.weights": [[105, 108], ["metrics.MultiClassRunningScore.get_computed", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.sum"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.get_computed"], ["", "def", "weights", "(", "self", ")", ":", "\n", "        ", "cm", "=", "self", ".", "get_computed", "(", ")", "\n", "return", "(", "cm", ".", "sum", "(", "dim", "=", "1", ")", "/", "cm", ".", "sum", "(", ")", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiClassRunningScore.recall": [[109, 126], ["metrics.MultiClassRunningScore.get_computed", "metrics.MultiClassRunningScore.diag().sum", "metrics.MultiClassRunningScore.diag", "float", "float", "float", "per_class.numpy", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.diag", "metrics.MultiClassRunningScore.diag", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.diag", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.sum"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.get_computed"], ["", "def", "recall", "(", "self", ")", ":", "\n", "        ", "cm", "=", "self", ".", "get_computed", "(", ")", "\n", "micro", "=", "cm", ".", "diag", "(", ")", ".", "sum", "(", ")", "/", "(", "cm", ".", "sum", "(", ")", "+", "1e-15", ")", "# same as accuracy for multiclass", "\n", "macro", "=", "(", "\n", "cm", ".", "diag", "(", ")", "/", "(", "cm", ".", "sum", "(", "dim", "=", "1", ")", "+", "1e-15", ")", "\n", ")", ".", "mean", "(", ")", "# same as average accuracy in breizhcrops", "\n", "weighted", "=", "(", "\n", "(", "cm", ".", "diag", "(", ")", "/", "(", "cm", ".", "sum", "(", "dim", "=", "1", ")", "+", "1e-15", ")", ")", "\n", "*", "(", "(", "cm", ".", "sum", "(", "dim", "=", "1", ")", ")", "/", "(", "cm", ".", "sum", "(", ")", "+", "1e-15", ")", ")", "\n", ")", ".", "sum", "(", ")", "\n", "per_class", "=", "cm", ".", "diag", "(", ")", "/", "(", "cm", ".", "sum", "(", "dim", "=", "1", ")", "+", "1e-15", ")", "\n", "\n", "return", "{", "\n", "\"Recall Micro\"", ":", "float", "(", "micro", ")", ",", "\n", "\"Recall Macro\"", ":", "float", "(", "macro", ")", ",", "\n", "\"Recall Weighted\"", ":", "float", "(", "weighted", ")", ",", "\n", "\"Recall per Class\"", ":", "per_class", ".", "numpy", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiClassRunningScore.precision": [[128, 143], ["metrics.MultiClassRunningScore.get_computed", "metrics.MultiClassRunningScore.diag().sum", "metrics.MultiClassRunningScore.diag", "float", "float", "float", "per_class.numpy", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.diag", "metrics.MultiClassRunningScore.diag", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.diag", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.sum"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.get_computed"], ["", "def", "precision", "(", "self", ")", ":", "\n", "        ", "cm", "=", "self", ".", "get_computed", "(", ")", "\n", "micro", "=", "cm", ".", "diag", "(", ")", ".", "sum", "(", ")", "/", "(", "cm", ".", "sum", "(", ")", "+", "1e-15", ")", "# same as accuracy for multiclass", "\n", "macro", "=", "(", "cm", ".", "diag", "(", ")", "/", "(", "cm", ".", "sum", "(", "dim", "=", "0", ")", "+", "1e-15", ")", ")", ".", "mean", "(", ")", "\n", "weighted", "=", "(", "\n", "(", "cm", ".", "diag", "(", ")", "/", "(", "cm", ".", "sum", "(", "dim", "=", "0", ")", "+", "1e-15", ")", ")", "\n", "*", "(", "(", "cm", ".", "sum", "(", "dim", "=", "1", ")", ")", "/", "(", "cm", ".", "sum", "(", ")", "+", "1e-15", ")", ")", "\n", ")", ".", "sum", "(", ")", "\n", "per_class", "=", "cm", ".", "diag", "(", ")", "/", "(", "cm", ".", "sum", "(", "dim", "=", "0", ")", "+", "1e-15", ")", "\n", "\n", "return", "{", "\n", "\"Precision Micro\"", ":", "float", "(", "micro", ")", ",", "\n", "\"Precision Macro\"", ":", "float", "(", "macro", ")", ",", "\n", "\"Precision Weighted\"", ":", "float", "(", "weighted", ")", ",", "\n", "\"Precision per Class\"", ":", "per_class", ".", "numpy", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiClassRunningScore.iou": [[145, 150], ["metrics.MultiClassRunningScore.get_computed", "metrics.MultiClassRunningScore.diag", "iou.tolist", "float", "iou.mean", "metrics.MultiClassRunningScore.diag", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.sum"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.get_computed"], ["", "def", "iou", "(", "self", ")", ":", "\n", "        ", "cm", "=", "self", ".", "get_computed", "(", ")", "\n", "iou", "=", "cm", ".", "diag", "(", ")", "/", "(", "cm", ".", "sum", "(", "dim", "=", "1", ")", "+", "cm", ".", "sum", "(", "dim", "=", "0", ")", "-", "cm", ".", "diag", "(", ")", "+", "1e-15", ")", "\n", "\n", "return", "{", "\"IOU\"", ":", "iou", ".", "tolist", "(", ")", ",", "\"mIOU\"", ":", "float", "(", "iou", ".", "mean", "(", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiClassRunningScore.kappa": [[151, 168], ["metrics.MultiClassRunningScore.get_computed", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.sum", "metrics.MultiClassRunningScore.diag().sum", "agreements_chance.sum.sum.sum", "metrics.MultiClassRunningScore.diag"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.get_computed"], ["", "def", "kappa", "(", "self", ")", ":", "\n", "        ", "cm", "=", "self", ".", "get_computed", "(", ")", "\n", "N", "=", "cm", ".", "shape", "[", "0", "]", "\n", "\n", "act_hist", "=", "cm", ".", "sum", "(", "axis", "=", "1", ")", "\n", "\n", "pred_hist", "=", "cm", ".", "sum", "(", "axis", "=", "0", ")", "\n", "\n", "num_samples", "=", "cm", ".", "sum", "(", ")", "\n", "\n", "total_agreements", "=", "cm", ".", "diag", "(", ")", ".", "sum", "(", ")", "\n", "agreements_chance", "=", "(", "act_hist", "*", "pred_hist", ")", "/", "num_samples", "\n", "agreements_chance", "=", "agreements_chance", ".", "sum", "(", ")", "\n", "kappa", "=", "(", "total_agreements", "-", "agreements_chance", ")", "/", "(", "\n", "num_samples", "-", "agreements_chance", "\n", ")", "\n", "return", "{", "\"Kappa metric\"", ":", "kappa", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.__init__": [[173, 180], ["metrics.RunningScore.__init__", "ignite.metrics.multilabel_confusion_matrix.MultiLabelConfusionMatrix"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "device", ")", "\n", "self", ".", "confusion_matrix", "=", "MultiLabelConfusionMatrix", "(", "\n", "num_classes", "=", "self", ".", "num_classes", ",", "device", "=", "self", ".", "device", ",", "\n", ")", "\n", "self", ".", "list_y_prob", "=", "[", "]", "\n", "self", ".", "list_y_true", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.reset": [[181, 186], ["metrics.MultiLabelRunningScore.confusion_matrix.reset"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the confusion matrix and list of probabilities\"\"\"", "\n", "self", ".", "confusion_matrix", ".", "reset", "(", ")", "\n", "self", ".", "list_y_prob", "=", "[", "]", "\n", "self", ".", "list_y_true", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.update": [[187, 192], ["metrics.MultiLabelRunningScore.confusion_matrix.update", "metrics.MultiLabelRunningScore.list_y_prob.extend", "metrics.MultiLabelRunningScore.list_y_true.extend", "y_prob.tolist", "y_true.tolist"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.update"], ["", "def", "update", "(", "self", ",", "y_true", ",", "y_pred", ",", "y_prob", "=", "None", ")", ":", "\n", "        ", "\"\"\"Updates stats on each batch\"\"\"", "\n", "self", ".", "confusion_matrix", ".", "update", "(", "(", "y_pred", ",", "y_true", ")", ")", "\n", "self", ".", "list_y_prob", ".", "extend", "(", "y_prob", ".", "tolist", "(", ")", ")", "\n", "self", ".", "list_y_true", ".", "extend", "(", "y_true", ".", "tolist", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.map": [[193, 195], ["sklearn.metrics.average_precision_score", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "map", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"mAP\"", ":", "average_precision_score", "(", "np", ".", "array", "(", "self", ".", "list_y_true", ")", ",", "np", ".", "array", "(", "self", ".", "list_y_prob", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.accuracy": [[196, 204], ["metrics.MultiLabelRunningScore.get_outcomes", "metrics.MultiLabelRunningScore.get_outcomes"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.get_outcomes", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.get_outcomes"], ["", "def", "accuracy", "(", "self", ")", ":", "\n", "        ", "tp", ",", "tn", ",", "fp", ",", "fn", "=", "self", ".", "get_outcomes", "(", ")", "\n", "tp_total", ",", "tn_total", ",", "fp_total", ",", "fn_total", "=", "self", ".", "get_outcomes", "(", "total", "=", "True", ")", "\n", "\n", "accuracy", "=", "(", "tp_total", "+", "tn_total", ")", "/", "(", "tp_total", "+", "tn_total", "+", "fp_total", "+", "fn_total", "+", "1e-15", ")", "\n", "accuracy_per_class", "=", "(", "tp", "+", "tn", ")", "/", "(", "tp", "+", "tn", "+", "fp", "+", "fn", "+", "1e-15", ")", "\n", "\n", "return", "{", "\"Accuracy\"", ":", "accuracy", ",", "\"Accuracy per Class\"", ":", "accuracy_per_class", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.precision": [[205, 217], ["metrics.MultiLabelRunningScore.get_outcomes", "metrics.MultiLabelRunningScore.get_outcomes", "numpy.mean", "numpy.sum", "float", "metrics.MultiLabelRunningScore.weights"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.get_outcomes", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.get_outcomes", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.weights"], ["", "def", "precision", "(", "self", ")", ":", "\n", "        ", "tp", ",", "tn", ",", "fp", ",", "fn", "=", "self", ".", "get_outcomes", "(", ")", "\n", "tp_total", ",", "tn_total", ",", "fp_total", ",", "fn_total", "=", "self", ".", "get_outcomes", "(", "total", "=", "True", ")", "\n", "micro", "=", "tp_total", "/", "(", "tp_total", "+", "fp_total", "+", "1e-15", ")", "\n", "per_class", "=", "tp", "/", "(", "tp", "+", "fp", "+", "1e-15", ")", "\n", "macro", "=", "np", ".", "mean", "(", "per_class", ")", "\n", "weighted", "=", "np", ".", "sum", "(", "per_class", "*", "self", ".", "weights", "(", ")", ")", "\n", "return", "{", "\n", "\"Precision Micro\"", ":", "float", "(", "micro", ")", ",", "\n", "\"Precision Macro\"", ":", "macro", ",", "\n", "\"Precision Weighted\"", ":", "weighted", ",", "\n", "\"Precision per Class\"", ":", "per_class", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.weights": [[219, 223], ["metrics.MultiLabelRunningScore.get_outcomes", "metrics.MultiLabelRunningScore.get_samples"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.get_outcomes", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.get_samples"], ["", "def", "weights", "(", "self", ")", ":", "\n", "        ", "tp", ",", "tn", ",", "fp", ",", "fn", "=", "self", ".", "get_outcomes", "(", ")", "\n", "weights", "=", "(", "tp", "+", "fn", ")", "/", "self", ".", "get_samples", "(", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.recall": [[224, 236], ["metrics.MultiLabelRunningScore.get_outcomes", "metrics.MultiLabelRunningScore.get_outcomes", "numpy.mean", "numpy.sum", "float", "metrics.MultiLabelRunningScore.weights"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.get_outcomes", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.get_outcomes", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.weights"], ["", "def", "recall", "(", "self", ")", ":", "\n", "        ", "tp", ",", "tn", ",", "fp", ",", "fn", "=", "self", ".", "get_outcomes", "(", ")", "\n", "tp_total", ",", "tn_total", ",", "fp_total", ",", "fn_total", "=", "self", ".", "get_outcomes", "(", "total", "=", "True", ")", "\n", "micro", "=", "tp_total", "/", "(", "tp_total", "+", "fn_total", "+", "1e-15", ")", "\n", "per_class", "=", "tp", "/", "(", "tp", "+", "fn", "+", "1e-15", ")", "\n", "macro", "=", "np", ".", "mean", "(", "per_class", ")", "\n", "weighted", "=", "np", ".", "sum", "(", "per_class", "*", "self", ".", "weights", "(", ")", ")", "\n", "return", "{", "\n", "\"Recall Micro\"", ":", "float", "(", "micro", ")", ",", "\n", "\"Recall Macro\"", ":", "macro", ",", "\n", "\"Recall Weighted\"", ":", "weighted", ",", "\n", "\"Recall per Class\"", ":", "per_class", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.get_outcomes": [[238, 253], ["metrics.MultiLabelRunningScore.get_computed", "tp.numpy", "tn.numpy", "fp.numpy", "fn.numpy", "tp.sum", "tn.sum", "fp.sum", "fn.sum"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.get_computed"], ["", "def", "get_outcomes", "(", "self", ",", "total", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Return true/false positives/negatives from the confusion matrix\n        :param total: do we need to return per class or total\n        \"\"\"", "\n", "cm", "=", "self", ".", "get_computed", "(", ")", "\n", "tp", "=", "cm", "[", ":", ",", "1", ",", "1", "]", "\n", "tn", "=", "cm", "[", ":", ",", "0", ",", "0", "]", "\n", "fp", "=", "cm", "[", ":", ",", "0", ",", "1", "]", "\n", "fn", "=", "cm", "[", ":", ",", "1", ",", "0", "]", "\n", "\n", "if", "total", ":", "# sum it all if we need to calculate the totals", "\n", "            ", "tp", ",", "tn", ",", "fp", ",", "fn", "=", "tp", ".", "sum", "(", ")", ",", "tn", ".", "sum", "(", ")", ",", "fp", ".", "sum", "(", ")", ",", "fn", ".", "sum", "(", ")", "\n", "\n", "", "return", "tp", ".", "numpy", "(", ")", ",", "tn", ".", "numpy", "(", ")", ",", "fp", ".", "numpy", "(", ")", ",", "fn", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.count": [[254, 257], ["metrics.MultiLabelRunningScore.get_outcomes"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.get_outcomes"], ["", "def", "count", "(", "self", ")", ":", "\n", "        ", "tp", ",", "tn", ",", "fp", ",", "fn", "=", "self", ".", "get_outcomes", "(", "True", ")", "\n", "return", "tp", "+", "tn", "+", "fp", "+", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.get_samples": [[258, 261], ["metrics.MultiLabelRunningScore.confusion_matrix.compute().cpu().detach().numpy", "numpy.sum", "numpy.sum", "metrics.MultiLabelRunningScore.confusion_matrix.compute().cpu().detach", "metrics.MultiLabelRunningScore.confusion_matrix.compute().cpu", "metrics.MultiLabelRunningScore.confusion_matrix.compute"], "methods", ["None"], ["", "def", "get_samples", "(", "self", ")", ":", "\n", "        ", "cm", "=", "self", ".", "confusion_matrix", ".", "compute", "(", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "return", "np", ".", "sum", "(", "cm", "[", ":", ",", "1", ",", "0", "]", ")", "+", "np", ".", "sum", "(", "cm", "[", ":", ",", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.iou": [[262, 273], ["metrics.MultiLabelRunningScore.get_outcomes", "metrics.MultiLabelRunningScore.get_outcomes", "float", "numpy.mean", "iou_per_class.numpy"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.get_outcomes", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.MultiLabelRunningScore.get_outcomes"], ["", "def", "iou", "(", "self", ")", ":", "\n", "        ", "tp", ",", "tn", ",", "fp", ",", "fn", "=", "self", ".", "get_outcomes", "(", ")", "\n", "tp_total", ",", "tn_total", ",", "fp_total", ",", "fn_total", "=", "self", ".", "get_outcomes", "(", "total", "=", "True", ")", "\n", "\n", "iou_per_class", "=", "tp", "/", "(", "tp", "+", "fp", "+", "fn", "+", "1e-15", ")", "\n", "iou", "=", "tp_total", "/", "(", "tp_total", "+", "fp_total", "+", "fn_total", "+", "1e-15", ")", "\n", "\n", "return", "{", "\n", "\"IOU\"", ":", "float", "(", "iou", ")", ",", "\n", "\"IOU mean\"", ":", "np", ".", "mean", "(", "iou_per_class", ")", ",", "\n", "\"IOU per Class\"", ":", "iou_per_class", ".", "numpy", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.__init__": [[279, 297], ["metrics.RunningScore.__init__", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "device", ")", "\n", "self", ".", "iou_per_class", "=", "torch", ".", "zeros", "(", "num_classes", ",", "dtype", "=", "torch", ".", "float64", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "self", ".", "f1_score_per_class", "=", "torch", ".", "zeros", "(", "num_classes", ",", "dtype", "=", "torch", ".", "float64", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "self", ".", "intersection_per_class", "=", "torch", ".", "zeros", "(", "num_classes", ",", "dtype", "=", "torch", ".", "float64", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "self", ".", "total_per_class", "=", "torch", ".", "zeros", "(", "num_classes", ",", "dtype", "=", "torch", ".", "float64", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "self", ".", "pixel_accuracy_per_class", "=", "torch", ".", "zeros", "(", "\n", "num_classes", ",", "dtype", "=", "torch", ".", "float64", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "samples", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.update": [[298, 318], ["range", "range", "y_pred[].unsqueeze", "y_true[].unsqueeze", "y_true[].unsqueeze.numel", "y_pred[].unsqueeze.float().sum", "y_true[].unsqueeze.float().sum", "y_pred[].unsqueeze.float", "y_true[].unsqueeze.float"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "y_true", ",", "y_pred", ",", "y_prob", "=", "None", ")", ":", "\n", "        ", "\"\"\"Updates metrics on each batch\"\"\"", "\n", "num_images", ",", "num_labels", ",", "h", ",", "w", "=", "y_true", ".", "shape", "\n", "self", ".", "samples", "+=", "num_images", "\n", "for", "i", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "num_labels", ")", ":", "\n", "                ", "y_pred_local", "=", "y_pred", "[", "i", ",", "j", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "\n", "y_true_local", "=", "y_true", "[", "i", ",", "j", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "\n", "intersection", "=", "(", "y_pred_local", "&", "y_true_local", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "union", "=", "(", "y_pred_local", "|", "y_true_local", ")", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "correct", "=", "(", "y_pred_local", "==", "y_true_local", ")", ".", "int", "(", ")", ".", "sum", "(", ")", "\n", "\n", "total", "=", "y_true_local", ".", "numel", "(", ")", "\n", "trues", "=", "y_pred_local", ".", "float", "(", ")", ".", "sum", "(", ")", "+", "y_true_local", ".", "float", "(", ")", ".", "sum", "(", ")", "\n", "\n", "self", ".", "iou_per_class", "[", "j", "]", "+=", "1", "if", "union", "==", "0", "else", "(", "intersection", "/", "union", ")", "\n", "self", ".", "f1_score_per_class", "[", "j", "]", "+=", "(", "\n", "1", "if", "trues", "==", "0", "else", "(", "2", "*", "intersection", "/", "trues", ")", "\n", ")", "\n", "self", ".", "pixel_accuracy_per_class", "[", "j", "]", "+=", "correct", "/", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.reset": [[319, 337], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reset the metrics\"\"\"", "\n", "self", ".", "iou_per_class", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", ",", "dtype", "=", "torch", ".", "float64", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "self", ".", "f1_score_per_class", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", ",", "dtype", "=", "torch", ".", "float64", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "self", ".", "intersection_per_class", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "num_classes", ",", "dtype", "=", "torch", ".", "float64", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "total_per_class", "=", "torch", ".", "zeros", "(", "self", ".", "num_classes", ",", "dtype", "=", "torch", ".", "float64", ")", ".", "to", "(", "\n", "self", ".", "device", "\n", ")", "\n", "self", ".", "pixel_accuracy_per_class", "=", "torch", ".", "zeros", "(", "\n", "self", ".", "num_classes", ",", "dtype", "=", "torch", ".", "float64", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "samples", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.accuracy": [[338, 343], ["float", "metrics.SegmentationRunningScore.pixel_accuracy_per_class.tolist", "metrics.SegmentationRunningScore.pixel_accuracy_per_class.mean"], "methods", ["None"], ["", "def", "accuracy", "(", "self", ")", ":", "\n", "        ", "self", ".", "pixel_accuracy_per_class", "=", "self", ".", "pixel_accuracy_per_class", "/", "self", ".", "samples", "\n", "return", "{", "\n", "\"Accuracy Mean\"", ":", "float", "(", "self", ".", "pixel_accuracy_per_class", ".", "mean", "(", ")", ")", ",", "\n", "\"Accuracy per Class\"", ":", "self", ".", "pixel_accuracy_per_class", ".", "tolist", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.f1_score": [[345, 350], ["float", "metrics.SegmentationRunningScore.f1_score_per_class.tolist", "metrics.SegmentationRunningScore.f1_score_per_class.mean"], "methods", ["None"], ["", "def", "f1_score", "(", "self", ")", ":", "\n", "        ", "self", ".", "f1_score_per_class", "=", "self", ".", "f1_score_per_class", "/", "self", ".", "samples", "\n", "return", "{", "\n", "\"F1_score Mean\"", ":", "float", "(", "self", ".", "f1_score_per_class", ".", "mean", "(", ")", ")", ",", "\n", "\"F1_score per Class\"", ":", "self", ".", "f1_score_per_class", ".", "tolist", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.SegmentationRunningScore.iou": [[352, 357], ["float", "metrics.SegmentationRunningScore.iou_per_class.tolist", "metrics.SegmentationRunningScore.iou_per_class.mean"], "methods", ["None"], ["", "def", "iou", "(", "self", ")", ":", "\n", "        ", "self", ".", "iou_per_class", "=", "self", ".", "iou_per_class", "/", "self", ".", "samples", "\n", "return", "{", "\n", "\"IOU Mean\"", ":", "float", "(", "self", ".", "iou_per_class", ".", "mean", "(", ")", ")", ",", "\n", "\"IOU per Class\"", ":", "self", ".", "iou_per_class", ".", "tolist", "(", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMulticlassClassifier.__init__": [[22, 26], ["models.BaseModel.__init__", "metrics.MultiClassRunningScore"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMulticlassClassifier.get_predicted": [[27, 31], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.topk"], "methods", ["None"], ["\n", "return", "data_transforms", "(", "sample", ")", "\n", "\n", "\n", "", "", "class", "ConvertToRGBResizeCenterCropToTensor", "(", "BaseTransforms", ")", ":", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMulticlassClassifier.report": [[32, 43], ["kwargs.get", "plot_multiclass_confusion_matrix", "running_metrics.get_computed", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.classification.plot_multiclass_confusion_matrix", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.get_computed"], ["    ", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "=", "sample", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToPILImage", "(", ")", ",", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", ")", "\n", "\n", "return", "data_transforms", "(", "sample", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMulticlassClassifier.load_optimizer": [[45, 51], ["torch.RAdam", "torch.RAdam", "torch.RAdam", "torch.RAdam", "classification.BaseMulticlassClassifier.model.parameters"], "methods", ["None"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMulticlassClassifier.load_criterion": [[53, 56], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMulticlassClassifier.load_lr_scheduler": [[57, 59], ["torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau"], "methods", ["None"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.__init__": [[66, 70], ["models.BaseModel.__init__", "metrics.MultiLabelRunningScore"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.load_optimizer": [[71, 77], ["torch.RAdam", "torch.RAdam", "torch.RAdam", "torch.RAdam", "classification.BaseMultilabelClassifier.model.parameters"], "methods", ["None"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.load_criterion": [[79, 82], ["torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss"], "methods", ["None"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.load_lr_scheduler": [[83, 85], ["torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau"], "methods", ["None"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.get_predicted": [[86, 92], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.classification.BaseMultilabelClassifier.report": [[93, 111], ["kwargs.get", "plot_multilabel_confusion_matrix", "running_metrics.get_computed", "enumerate", "numpy.array", "cm_array.append", "int", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.visualizations.classification.plot_multilabel_confusion_matrix", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.metrics.RunningScore.get_computed"], []], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.visualizations.BaseVisualization.__init__": [[4, 9], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "cm", ",", "labels", ",", "file", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Get default params\"\"\"", "\n", "self", ".", "cm", "=", "cm", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "output_file", "=", "file", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.visualizations.BaseVisualization.plot": [[10, 12], ["NotImplementedError"], "methods", ["None"], ["", "def", "plot", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Please implement the `plot` method.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.visualizations.BaseDetailedVisualization.__init__": [[17, 24], ["visualizations.BaseVisualization.__init__"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__"], ["def", "__init__", "(", "self", ",", "y_true", ",", "y_pred", ",", "y_prob", ",", "labels", ",", "file", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Get default params\"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "None", ",", "labels", ",", "file", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "y_true", "=", "y_true", "\n", "self", ".", "y_pred", "=", "y_pred", "\n", "self", ".", "y_prob", "=", "y_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.visualizations.BaseDetailedVisualization.plot": [[25, 27], ["NotImplementedError"], "methods", ["None"], ["", "def", "plot", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"Please implement the `plot` method.\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__": [[15, 33], ["torch.utils.data.Dataset.__init__", "config.Configurable.__init__", "datasets.BaseDataset.load_transforms", "datasets.BaseDataset.load_transforms", "datasets.BaseDataset.load_transforms"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__init__", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.load_transforms", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.load_transforms", "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.load_transforms"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "Dataset", ".", "__init__", "(", "self", ")", "\n", "Configurable", ".", "__init__", "(", "self", ",", "config", ")", "\n", "\n", "# get dataloader parameters", "\n", "self", ".", "shuffle", "=", "self", ".", "config", ".", "shuffle", "\n", "self", ".", "batch_size", "=", "self", ".", "config", ".", "batch_size", "\n", "self", ".", "num_workers", "=", "self", ".", "config", ".", "num_workers", "\n", "self", ".", "pin_memory", "=", "self", ".", "config", ".", "pin_memory", "\n", "\n", "# get labels if provided in config and not set in class", "\n", "if", "not", "self", ".", "labels", "and", "self", ".", "config", ".", "labels", ":", "\n", "            ", "self", ".", "labels", "=", "self", ".", "config", ".", "labels", "\n", "\n", "# get the transformations to be applied for the image and for the target", "\n", "", "self", ".", "transform", "=", "self", ".", "load_transforms", "(", "self", ".", "config", ".", "transforms", ")", "\n", "self", ".", "target_transform", "=", "self", ".", "load_transforms", "(", "self", ".", "config", ".", "target_transforms", ")", "\n", "self", ".", "joint_transform", "=", "self", ".", "load_transforms", "(", "self", ".", "config", ".", "joint_transforms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__getitem__": [[34, 38], ["NotImplementedError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\" Implement here what you want to return\"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "\"Please implement the `__getittem__` method for your dataset\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.__len__": [[40, 43], ["NotImplementedError"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "\"Please implement the `__len__` method for your dataset\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_name": [[45, 50], ["None"], "methods", ["None"], ["", "def", "get_name", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "name", ":", "\n", "            ", "return", "self", ".", "name", "\n", "", "else", ":", "\n", "            ", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.prepare": [[51, 54], ["None"], "methods", ["None"], ["", "", "def", "prepare", "(", "self", ")", ":", "\n", "        ", "\"\"\"Implement if something needs to happen to the dataset after object creation\"\"\"", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.dataloader": [[55, 62], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "dataloader", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "self", ".", "pin_memory", ",", "\n", "# drop_last=True,", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.get_labels": [[65, 69], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "        ", "\"\"\"Implement this if you want to return the complete set of labels of the dataset\"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "\"Please implement the `labels` method for your dataset\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.show_batch": [[71, 75], ["NotImplementedError"], "methods", ["None"], ["", "def", "show_batch", "(", "self", ",", "size", ")", ":", "\n", "        ", "\"\"\"Implement this if you want to return the complete set of labels of the dataset\"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "\"Please implement the `show_batch` method for your dataset\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.show_samples": [[77, 81], ["NotImplementedError"], "methods", ["None"], ["", "def", "show_samples", "(", "self", ")", ":", "\n", "        ", "\"\"\"Implement this if you want to return the complete set of labels of the dataset\"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "\"Please implement the `show_samples` method for your dataset\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.show_image": [[83, 87], ["NotImplementedError"], "methods", ["None"], ["", "def", "show_image", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Implement this if you want to return the complete set of labels of the dataset\"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "\"Please implement the `show_image` method for your dataset\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.data_distribution_table": [[89, 93], ["NotImplementedError"], "methods", ["None"], ["", "def", "data_distribution_table", "(", "self", ")", ":", "\n", "        ", "\"\"\"Implement this if you want to return the complete set of labels of the dataset\"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "\"Please implement the `data_distribution_table` method for your dataset\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.data_distribution_barchart": [[95, 99], ["NotImplementedError"], "methods", ["None"], ["", "def", "data_distribution_barchart", "(", "self", ")", ":", "\n", "        ", "\"\"\"Implement this if you want to return the complete set of labels of the dataset\"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "\"Please implement the `data_distribution_barchart` method for your dataset\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.load_transforms": [[101, 104], ["transforms.load_transforms"], "methods", ["home.repos.pwc.inspect_result.biasvariancelabs_aitlas.base.datasets.BaseDataset.load_transforms"], ["", "def", "load_transforms", "(", "self", ",", "class_names", ")", ":", "\n", "        ", "\"\"\"Loads transformation classes and make a composition of them\"\"\"", "\n", "return", "load_transforms", "(", "class_names", ",", "self", ".", "config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tests.test_dataset.TestSplitableDataset.setUp": [[9, 21], ["None"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "class", "SplitableDatasetFactory", "(", "SplitableDataset", ")", ":", "\n", "            ", "def", "save_splits", "(", "self", ")", ":", "\n", "                ", "return", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "                ", "return", "10", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "                ", "return", "1", "\n", "\n", "", "", "self", ".", "splitable_factory", "=", "SplitableDatasetFactory", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tests.test_dataset.TestSplitableDataset.test_read_empty": [[22, 37], ["test_dataset.TestSplitableDataset.splitable_factory"], "methods", ["None"], ["", "def", "test_read_empty", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "\"override\"", ":", "False", ",", "\n", "\"split\"", ":", "{", "\n", "\"train\"", ":", "{", "\"ratio\"", ":", "60", ",", "\"file\"", ":", "\"./data/train.csv\"", "}", ",", "\n", "\"val\"", ":", "{", "\"ratio\"", ":", "20", ",", "\"file\"", ":", "\"./data/val.csv\"", "}", ",", "\n", "\"test\"", ":", "{", "\"ratio\"", ":", "20", ",", "\"file\"", ":", "\"./data/test.csv\"", "}", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "try", ":", "\n", "            ", "obj", "=", "self", ".", "splitable_factory", "(", "config", ")", "\n", "assert", "False", "\n", "", "except", "ValueError", ":", "\n", "            ", "assert", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tests.test_dataset.TestSplitableDataset.test_bad_split": [[38, 53], ["test_dataset.TestSplitableDataset.splitable_factory"], "methods", ["None"], ["", "", "def", "test_bad_split", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "\"override\"", ":", "True", ",", "\n", "\"split\"", ":", "{", "\n", "\"train\"", ":", "{", "\"ratio\"", ":", "70", ",", "\"file\"", ":", "\"./data/train.csv\"", "}", ",", "\n", "\"val\"", ":", "{", "\"ratio\"", ":", "20", ",", "\"file\"", ":", "\"./data/val.csv\"", "}", ",", "\n", "\"test\"", ":", "{", "\"ratio\"", ":", "20", ",", "\"file\"", ":", "\"./data/test.csv\"", "}", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "try", ":", "\n", "            ", "obj", "=", "self", ".", "splitable_factory", "(", "config", ")", "\n", "assert", "False", "\n", "", "except", "ValueError", ":", "\n", "            ", "assert", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.biasvariancelabs_aitlas.tests.test_dataset.TestSplitableDataset.test_split": [[54, 68], ["test_dataset.TestSplitableDataset.splitable_factory", "len", "len", "len"], "methods", ["None"], ["", "", "def", "test_split", "(", "self", ")", ":", "\n", "        ", "config", "=", "{", "\n", "\"override\"", ":", "True", ",", "\n", "\"split\"", ":", "{", "\n", "\"train\"", ":", "{", "\"ratio\"", ":", "60", ",", "\"file\"", ":", "\"./data/train.csv\"", "}", ",", "\n", "\"val\"", ":", "{", "\"ratio\"", ":", "20", ",", "\"file\"", ":", "\"./data/val.csv\"", "}", ",", "\n", "\"test\"", ":", "{", "\"ratio\"", ":", "20", ",", "\"file\"", ":", "\"./data/test.csv\"", "}", ",", "\n", "}", ",", "\n", "}", "\n", "\n", "obj", "=", "self", ".", "splitable_factory", "(", "config", ")", "\n", "assert", "len", "(", "obj", ".", "train_set", ")", "==", "6", "\n", "assert", "len", "(", "obj", ".", "test_set", ")", "==", "2", "\n", "assert", "len", "(", "obj", ".", "val_set", ")", "==", "2", "\n", "", "", ""]]}