{"home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.run.setup_imports": [[12, 71], ["pythia.common.registry.registry.get", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "importlib.import_module", "os.path.dirname", "os.path.join", "os.environ.get", "os.path.join", "pythia.common.registry.registry.register", "glob.glob", "f.endswith", "os.path.abspath", "glob.glob", "glob.glob", "f.split", "importlib.import_module", "f.find", "f.split", "importlib.import_module", "file_name.find", "f.find", "f.split", "importlib.import_module", "f.endswith", "file_name.find", "f.split", "importlib.import_module", "file_name.find", "file_name.find"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register"], ["def", "setup_imports", "(", ")", ":", "\n", "# Automatically load all of the modules, so that", "\n", "# they register with registry", "\n", "    ", "root_folder", "=", "registry", ".", "get", "(", "\"pythia_root\"", ",", "no_warning", "=", "True", ")", "\n", "\n", "if", "root_folder", "is", "None", ":", "\n", "        ", "root_folder", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "root_folder", "=", "os", ".", "path", ".", "join", "(", "root_folder", ",", "\"..\"", ")", "\n", "\n", "environment_pythia_path", "=", "os", ".", "environ", ".", "get", "(", "\"PYTHIA_PATH\"", ")", "\n", "\n", "if", "environment_pythia_path", "is", "not", "None", ":", "\n", "            ", "root_folder", "=", "environment_pythia_path", "\n", "\n", "", "root_folder", "=", "os", ".", "path", ".", "join", "(", "root_folder", ",", "\"pythia\"", ")", "\n", "registry", ".", "register", "(", "\"pythia_path\"", ",", "root_folder", ")", "\n", "\n", "", "trainer_folder", "=", "os", ".", "path", ".", "join", "(", "root_folder", ",", "\"trainers\"", ")", "\n", "trainer_pattern", "=", "os", ".", "path", ".", "join", "(", "trainer_folder", ",", "\"**\"", ",", "\"*.py\"", ")", "\n", "tasks_folder", "=", "os", ".", "path", ".", "join", "(", "root_folder", ",", "\"tasks\"", ")", "\n", "tasks_pattern", "=", "os", ".", "path", ".", "join", "(", "tasks_folder", ",", "\"**\"", ",", "\"*.py\"", ")", "\n", "model_folder", "=", "os", ".", "path", ".", "join", "(", "root_folder", ",", "\"models\"", ")", "\n", "model_pattern", "=", "os", ".", "path", ".", "join", "(", "model_folder", ",", "\"**\"", ",", "\"*.py\"", ")", "\n", "\n", "importlib", ".", "import_module", "(", "\"pythia.common.meter\"", ")", "\n", "\n", "files", "=", "glob", ".", "glob", "(", "tasks_pattern", ",", "recursive", "=", "True", ")", "+", "glob", ".", "glob", "(", "model_pattern", ",", "recursive", "=", "True", ")", "+", "glob", ".", "glob", "(", "trainer_pattern", ",", "recursive", "=", "True", ")", "\n", "\n", "for", "f", "in", "files", ":", "\n", "        ", "if", "f", ".", "endswith", "(", "\"task.py\"", ")", ":", "\n", "            ", "splits", "=", "f", ".", "split", "(", "os", ".", "sep", ")", "\n", "task_name", "=", "splits", "[", "-", "2", "]", "\n", "if", "task_name", "==", "\"tasks\"", ":", "\n", "                ", "continue", "\n", "", "file_name", "=", "splits", "[", "-", "1", "]", "\n", "module_name", "=", "file_name", "[", ":", "file_name", ".", "find", "(", "\".py\"", ")", "]", "\n", "importlib", ".", "import_module", "(", "\"pythia.tasks.\"", "+", "task_name", "+", "\".\"", "+", "module_name", ")", "\n", "", "elif", "f", ".", "find", "(", "\"models\"", ")", "!=", "-", "1", ":", "\n", "            ", "splits", "=", "f", ".", "split", "(", "os", ".", "sep", ")", "\n", "file_name", "=", "splits", "[", "-", "1", "]", "\n", "module_name", "=", "file_name", "[", ":", "file_name", ".", "find", "(", "\".py\"", ")", "]", "\n", "importlib", ".", "import_module", "(", "\"pythia.models.\"", "+", "module_name", ")", "\n", "", "elif", "f", ".", "find", "(", "\"trainer\"", ")", "!=", "-", "1", ":", "\n", "            ", "splits", "=", "f", ".", "split", "(", "os", ".", "sep", ")", "\n", "file_name", "=", "splits", "[", "-", "1", "]", "\n", "module_name", "=", "file_name", "[", ":", "file_name", ".", "find", "(", "\".py\"", ")", "]", "\n", "importlib", ".", "import_module", "(", "\"pythia.trainers.\"", "+", "module_name", ")", "\n", "", "elif", "f", ".", "endswith", "(", "\"builder.py\"", ")", ":", "\n", "            ", "splits", "=", "f", ".", "split", "(", "os", ".", "sep", ")", "\n", "task_name", "=", "splits", "[", "-", "3", "]", "\n", "dataset_name", "=", "splits", "[", "-", "2", "]", "\n", "if", "task_name", "==", "\"tasks\"", "or", "dataset_name", "==", "\"tasks\"", ":", "\n", "                ", "continue", "\n", "", "file_name", "=", "splits", "[", "-", "1", "]", "\n", "module_name", "=", "file_name", "[", ":", "file_name", ".", "find", "(", "\".py\"", ")", "]", "\n", "importlib", ".", "import_module", "(", "\n", "\"pythia.tasks.\"", "+", "task_name", "+", "\".\"", "+", "dataset_name", "+", "\".\"", "+", "module_name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.run.run": [[74, 91], ["run.setup_imports", "pythia.utils.flags.flags.get_parser", "flags.get_parser.parse_args", "pythia.utils.build_utils.build_trainer", "pythia.utils.build_utils.build_trainer.load", "pythia.utils.build_utils.build_trainer.train", "getattr", "pythia.utils.distributed_utils.is_main_process", "getattr.write"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.run.setup_imports", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor.get_parser", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.parse_args", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.build_utils.build_trainer", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.is_main_process", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "", "", "def", "run", "(", ")", ":", "\n", "    ", "setup_imports", "(", ")", "\n", "parser", "=", "flags", ".", "get_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "trainer", "=", "build_trainer", "(", "args", ")", "\n", "\n", "# Log any errors that occur to log file", "\n", "try", ":", "\n", "        ", "trainer", ".", "load", "(", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "writer", "=", "getattr", "(", "trainer", ",", "\"writer\"", ",", "None", ")", "\n", "\n", "if", "writer", "is", "not", "None", ":", "\n", "            ", "writer", ".", "write", "(", "e", ",", "\"error\"", ",", "donot_print", "=", "True", ")", "\n", "", "if", "is_main_process", "(", ")", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.__init__": [[106, 115], ["convert_VG_to_COCO.COCO_annotation.print"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print"], ["    ", "def", "__init__", "(", "self", ",", "obj_cat_id_map", ",", "att_cat_id_map", ")", ":", "\n", "        ", "self", ".", "annotations", "=", "[", "]", "\n", "self", ".", "number_of_object", "=", "0", "\n", "\n", "self", ".", "obj_cat_id_map", "=", "obj_cat_id_map", "\n", "self", ".", "att_cat_id_map", "=", "att_cat_id_map", "\n", "print", "(", "\n", "\"total number of objects is %d, total number of attributes is %d\"", "\n", "%", "(", "len", "(", "self", ".", "obj_cat_id_map", ")", ",", "len", "(", "self", ".", "att_cat_id_map", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.add_annotation": [[117, 134], ["convert_VG_to_COCO.get_area", "convert_VG_to_COCO.COCO_annotation.annotations.append", "convert_VG_to_COCO.get_segmantation", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.get_area", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.get_segmantation"], ["", "def", "add_annotation", "(", "self", ",", "obj_id", ",", "image_id", ",", "bbox", ",", "att_ids", ")", ":", "\n", "        ", "segmentation", "=", "[", "get_segmantation", "(", "bbox", ")", "]", "\n", "area", "=", "get_area", "(", "bbox", ")", "\n", "self", ".", "number_of_object", "+=", "1", "\n", "annotation", "=", "{", "\n", "\"id\"", ":", "self", ".", "number_of_object", ",", "\n", "\"category_id\"", ":", "obj_id", ",", "\n", "\"segmentation\"", ":", "segmentation", ",", "\n", "\"area\"", ":", "area", ",", "\n", "\"iscrowd\"", ":", "0", ",", "\n", "\"image_id\"", ":", "image_id", ",", "\n", "\"bbox\"", ":", "bbox", ",", "\n", "\"ignore\"", ":", "0", ",", "\n", "}", "\n", "if", "len", "(", "att_ids", ")", ">", "0", ":", "\n", "            ", "annotation", "[", "\"attribute_ids\"", "]", "=", "att_ids", "\n", "", "self", ".", "annotations", ".", "append", "(", "annotation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.summary": [[135, 145], ["convert_VG_to_COCO.clean_category", "convert_VG_to_COCO.clean_category", "clean_category.items", "clean_category.items"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.clean_category", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.clean_category"], ["", "def", "summary", "(", "self", ")", ":", "\n", "        ", "obj_clean_map", "=", "clean_category", "(", "self", ".", "obj_cat_id_map", ")", "\n", "self", ".", "categories", "=", "[", "\n", "{", "\"supercategory\"", ":", "\"obj\"", ",", "\"id\"", ":", "cat_id", ",", "\"name\"", ":", "cat_name", "}", "\n", "for", "cat_id", ",", "cat_name", "in", "obj_clean_map", ".", "items", "(", ")", "\n", "]", "\n", "att_clean_map", "=", "clean_category", "(", "self", ".", "att_cat_id_map", ")", "\n", "self", ".", "att_categories", "=", "[", "\n", "{", "\"supercategory\"", ":", "\"att\"", ",", "\"id\"", ":", "cat_id", ",", "\"name\"", ":", "cat_name", "}", "\n", "for", "cat_id", ",", "cat_name", "in", "att_clean_map", ".", "items", "(", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.add_images": [[147, 161], ["os.path.basename", "convert_VG_to_COCO.COCO_annotation.images.append"], "methods", ["None"], ["", "def", "add_images", "(", "self", ",", "images", ",", "image_group", ")", ":", "\n", "        ", "self", ".", "images", "=", "[", "]", "\n", "for", "image", "in", "images", ":", "\n", "            ", "image_name", "=", "os", ".", "path", ".", "basename", "(", "image", "[", "\"url\"", "]", ")", "\n", "if", "image_name", "not", "in", "image_group", ":", "\n", "                ", "continue", "\n", "\n", "", "new_image", "=", "{", "\n", "\"file_name\"", ":", "image_name", ",", "\n", "\"id\"", ":", "image", "[", "\"image_id\"", "]", ",", "\n", "\"height\"", ":", "image", "[", "\"height\"", "]", ",", "\n", "\"width\"", ":", "image", "[", "\"width\"", "]", ",", "\n", "}", "\n", "self", ".", "images", ".", "append", "(", "new_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print": [[162, 170], ["json.dump"], "methods", ["None"], ["", "", "def", "print", "(", "self", ",", "writer", ")", ":", "\n", "        ", "tmp", "=", "{", "\n", "\"images\"", ":", "self", ".", "images", ",", "\n", "\"annotations\"", ":", "self", ".", "annotations", ",", "\n", "\"categories\"", ":", "self", ".", "categories", ",", "\n", "\"attCategories\"", ":", "self", ".", "att_categories", ",", "\n", "}", "\n", "return", "json", ".", "dump", "(", "tmp", ",", "writer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.extract_category_map": [[39, 50], ["enumerate", "open", "f.readlines", "line.strip", "line.split"], "function", ["None"], ["def", "extract_category_map", "(", "objects_list_file", ")", ":", "\n", "    ", "with", "open", "(", "objects_list_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "obj_list", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "lines", "]", "\n", "id_map", "=", "{", "}", "\n", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "obj_list", ")", ":", "\n", "        ", "objects", "=", "line", ".", "split", "(", "\",\"", ")", "\n", "for", "obj", "in", "objects", ":", "\n", "            ", "id_map", "[", "obj", "]", "=", "i", "\n", "", "", "return", "id_map", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.clean_category": [[52, 58], ["id_map.items"], "function", ["None"], ["", "def", "clean_category", "(", "id_map", ")", ":", "\n", "    ", "clean_id_map", "=", "{", "}", "\n", "for", "obj_name", ",", "obj_id", "in", "id_map", ".", "items", "(", ")", ":", "\n", "        ", "if", "obj_id", "not", "in", "clean_id_map", ":", "\n", "            ", "clean_id_map", "[", "obj_id", "]", "=", "obj_name", "\n", "", "", "return", "clean_id_map", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.get_segmantation": [[60, 66], ["None"], "function", ["None"], ["", "def", "get_segmantation", "(", "bbox", ")", ":", "\n", "    ", "x", "=", "bbox", "[", "0", "]", "\n", "y", "=", "bbox", "[", "1", "]", "\n", "w", "=", "bbox", "[", "2", "]", "\n", "h", "=", "bbox", "[", "3", "]", "\n", "return", "[", "x", ",", "y", ",", "x", ",", "y", "+", "h", ",", "x", "+", "w", ",", "y", "+", "h", ",", "x", "+", "w", ",", "y", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.get_area": [[68, 70], ["None"], "function", ["None"], ["", "def", "get_area", "(", "bbox", ")", ":", "\n", "    ", "return", "bbox", "[", "2", "]", "*", "bbox", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.clean_string": [[72, 77], ["string.lower().strip.lower().strip", "string[].strip", "string.lower().strip.lower", "len"], "function", ["None"], ["", "def", "clean_string", "(", "string", ")", ":", "\n", "    ", "string", "=", "string", ".", "lower", "(", ")", ".", "strip", "(", ")", "\n", "if", "len", "(", "string", ")", ">=", "1", "and", "string", "[", "-", "1", "]", "==", "\".\"", ":", "\n", "        ", "return", "string", "[", ":", "-", "1", "]", ".", "strip", "(", ")", "\n", "", "return", "string", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.clean_objects": [[79, 94], ["convert_VG_to_COCO.clean_string", "clean_string.split", "len"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.clean_string"], ["", "def", "clean_objects", "(", "string", ",", "common_attributes", ")", ":", "\n", "    ", "\"\"\" Return object and attribute lists \"\"\"", "\n", "string", "=", "clean_string", "(", "string", ")", "\n", "words", "=", "string", ".", "split", "(", ")", "\n", "if", "len", "(", "words", ")", ">", "1", ":", "\n", "        ", "prefix_words_are_adj", "=", "True", "\n", "for", "att", "in", "words", "[", ":", "-", "1", "]", ":", "\n", "            ", "if", "att", "not", "in", "common_attributes", ":", "\n", "                ", "prefix_words_are_adj", "=", "False", "\n", "", "", "if", "prefix_words_are_adj", ":", "\n", "            ", "return", "words", "[", "-", "1", ":", "]", ",", "words", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "string", "]", ",", "[", "]", "\n", "", "", "else", ":", "\n", "        ", "return", "[", "string", "]", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.clean_attributes": [[96, 103], ["convert_VG_to_COCO.clean_string", "word.lower().strip", "clean_string.split", "word.lower"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.clean_string"], ["", "", "def", "clean_attributes", "(", "string", ")", ":", "\n", "    ", "\"\"\" Return attribute list \"\"\"", "\n", "string", "=", "clean_string", "(", "string", ")", "\n", "if", "string", "==", "\"black and white\"", ":", "\n", "        ", "return", "[", "string", "]", "\n", "", "else", ":", "\n", "        ", "return", "[", "word", ".", "lower", "(", ")", ".", "strip", "(", ")", "for", "word", "in", "string", ".", "split", "(", "\" and \"", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.convert_2_object_and_att": [[172, 218], ["convert_VG_to_COCO.COCO_annotation", "print", "str", "convert_VG_to_COCO.clean_objects", "convert_VG_to_COCO.COCO_annotation.add_annotation", "len", "convert_VG_to_COCO.clean_attributes", "obj_ids.append", "att_ids.append"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.clean_objects", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.add_annotation", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.clean_attributes"], ["", "", "def", "convert_2_object_and_att", "(", "\n", "VG_attributes", ",", "image_group", ",", "category_id_map", ",", "att_cat_id_maps", "\n", ")", ":", "\n", "    ", "cocoAnnotation", "=", "COCO_annotation", "(", "category_id_map", ",", "att_cat_id_maps", ")", "\n", "\n", "count", "=", "0", "\n", "for", "image", "in", "VG_attributes", ":", "\n", "\n", "        ", "count", "+=", "1", "\n", "\n", "if", "count", "%", "10000", "==", "0", ":", "\n", "            ", "print", "(", "\"process %d images\"", "%", "count", ")", "\n", "\n", "", "image_id", "=", "image", "[", "\"image_id\"", "]", "\n", "image_name", "=", "str", "(", "image_id", ")", "+", "\".jpg\"", "\n", "if", "image_name", "not", "in", "image_group", ":", "\n", "            ", "continue", "\n", "\n", "", "for", "att", "in", "image", "[", "\"attributes\"", "]", ":", "\n", "            ", "atts", "=", "[", "]", "if", "\"attributes\"", "not", "in", "att", "else", "att", "[", "\"attributes\"", "]", "\n", "bbox", "=", "[", "att", "[", "\"x\"", "]", ",", "att", "[", "\"y\"", "]", ",", "att", "[", "\"w\"", "]", ",", "att", "[", "\"h\"", "]", "]", "\n", "object_names", "=", "att", "[", "\"names\"", "]", "\n", "\n", "obj", "=", "object_names", "[", "0", "]", "\n", "objs", ",", "atts_from_name", "=", "clean_objects", "(", "obj", ",", "COMMON_ATTRIBUTES", ")", "\n", "obj_ids", "=", "[", "]", "\n", "for", "obj_tmp", "in", "objs", ":", "\n", "                ", "if", "obj_tmp", "in", "cocoAnnotation", ".", "obj_cat_id_map", ":", "\n", "                    ", "obj_ids", ".", "append", "(", "cocoAnnotation", ".", "obj_cat_id_map", "[", "obj_tmp", "]", ")", "\n", "", "", "if", "len", "(", "obj_ids", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "obj_id", "=", "obj_ids", "[", "0", "]", "\n", "\n", "atts", "+=", "atts_from_name", "\n", "att_ids", "=", "[", "]", "\n", "for", "att", "in", "atts", ":", "\n", "                ", "clean_atts", "=", "clean_attributes", "(", "att", ")", "\n", "for", "clean_att", "in", "clean_atts", ":", "\n", "                    ", "if", "clean_att", "in", "cocoAnnotation", ".", "att_cat_id_map", ":", "\n", "                        ", "clean_att_id", "=", "cocoAnnotation", ".", "att_cat_id_map", "[", "clean_att", "]", "\n", "att_ids", ".", "append", "(", "clean_att_id", ")", "\n", "\n", "", "", "", "cocoAnnotation", ".", "add_annotation", "(", "obj_id", ",", "image_id", ",", "bbox", ",", "att_ids", ")", "\n", "\n", "", "", "return", "cocoAnnotation", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.extract_minival_ids.extract_qid_imid": [[13, 25], ["open", "json.load", "q_im_ids.append"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["def", "extract_qid_imid", "(", "ques_json_file", ")", ":", "\n", "    ", "with", "open", "(", "ques_json_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "info", "=", "json", ".", "load", "(", "f", ")", "\n", "questions", "=", "info", "[", "\"questions\"", "]", "\n", "\n", "", "q_im_ids", "=", "[", "]", "\n", "for", "q", "in", "questions", ":", "\n", "        ", "im_id", "=", "q", "[", "\"image_id\"", "]", "\n", "q_id", "=", "q", "[", "\"question_id\"", "]", "\n", "q_im_ids", ".", "append", "(", "(", "im_id", ",", "q_id", ")", ")", "\n", "\n", "", "return", "q_im_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.extract_visual_features_vgg_pool5.vgg16_feature_module.__init__": [[41, 44], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "list", "list", "vgg16_model.children"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vgg16_model", ")", ":", "\n", "        ", "super", "(", "vgg16_feature_module", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_module", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "list", "(", "vgg16_model", ".", "children", "(", ")", ")", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.extract_visual_features_vgg_pool5.vgg16_feature_module.forward": [[45, 47], ["extract_visual_features_vgg_pool5.vgg16_feature_module.feature_module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "feature_module", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.extract_visual_features_vgg_pool5.extract_image_pool5": [[54, 66], ["numpy.transpose", "torch.FloatTensor", "torch.FloatTensor", "torch.autograd.Variable", "vgg16_feature", "vgg16_feature.data.cpu().numpy", "skimage.io.imread", "skimage.io.imread", "torch.autograd.Variable.cuda", "vgg16_feature.data.cpu"], "function", ["None"], ["def", "extract_image_pool5", "(", "impath", ")", ":", "\n", "    ", "im", "=", "skimage", ".", "io", ".", "imread", "(", "impath", ")", "[", "...", ",", ":", "3", "]", "\n", "im_val", "=", "im", "[", "np", ".", "newaxis", ",", "...", "]", "-", "channel_mean", "\n", "\n", "# permute to get NCHW", "\n", "im_val", "=", "np", ".", "transpose", "(", "im_val", ",", "axes", "=", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "im_val_tensor", "=", "torch", ".", "FloatTensor", "(", "im_val", ")", "\n", "im_val_variable", "=", "Variable", "(", "im_val_tensor", ")", "\n", "im_val_variable", "=", "im_val_variable", ".", "cuda", "(", ")", "if", "use_cuda", "else", "im_val_variable", "\n", "\n", "pool5_val", "=", "vgg16_feature", "(", "im_val_variable", ")", "\n", "return", "pool5_val", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.extract_visual_features_vgg_pool5.extract_dataset_pool5": [[68, 80], ["glob.glob", "os.makedirs", "enumerate", "os.path.join", "print", "os.path.basename().split", "os.path.exists", "extract_visual_features_vgg_pool5.extract_image_pool5", "numpy.save", "os.path.basename", "len"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.extract_visual_features_vgg_pool5.extract_image_pool5", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save"], ["", "def", "extract_dataset_pool5", "(", "image_dir", ",", "save_dir", ",", "ext_filter", "=", "\"*.png\"", ")", ":", "\n", "    ", "image_list", "=", "glob", "(", "image_dir", "+", "\"/\"", "+", "ext_filter", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "for", "n_im", ",", "impath", "in", "enumerate", "(", "image_list", ")", ":", "\n", "        ", "if", "(", "n_im", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "\"processing %d / %d\"", "%", "(", "n_im", "+", "1", ",", "len", "(", "image_list", ")", ")", ")", "\n", "", "image_name", "=", "os", ".", "path", ".", "basename", "(", "impath", ")", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "image_name", "+", "\".npy\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "pool5_val", "=", "extract_image_pool5", "(", "impath", ")", "\n", "np", ".", "save", "(", "save_path", ",", "pool5_val", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.subset_val.parse_args": [[14, 18], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--ques_file\"", ",", "type", "=", "str", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.visualize_bbox.parse_args": [[40, 49], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--img_dir\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--image_name_file\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--out_dir\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--csv_file\"", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.visualize_bbox.vis_detections": [[51, 84], ["matplotlib.subplots", "ax.imshow", "matplotlib.axis", "matplotlib.tight_layout", "matplotlib.draw", "numpy.where", "len", "ax.add_patch", "matplotlib.Rectangle"], "function", ["None"], ["", "def", "vis_detections", "(", "im", ",", "class_name", ",", "bboxes", ",", "dets", ",", "thresh", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Draw detected bounding boxes.\"\"\"", "\n", "inds", "=", "np", ".", "where", "(", "dets", "[", ":", ",", "-", "1", "]", ">=", "thresh", ")", "[", "0", "]", "\n", "if", "len", "(", "inds", ")", "==", "0", ":", "\n", "        ", "return", "\n", "\n", "", "im", "=", "im", "[", ":", ",", ":", ",", "(", "2", ",", "1", ",", "0", ")", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "ax", ".", "imshow", "(", "im", ",", "aspect", "=", "\"equal\"", ")", "\n", "for", "i", "in", "inds", ":", "\n", "        ", "bbox", "=", "dets", "[", "i", ",", ":", "4", "]", "\n", "ax", ".", "add_patch", "(", "\n", "plt", ".", "Rectangle", "(", "\n", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "\n", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ",", "\n", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ",", "\n", "fill", "=", "False", ",", "\n", "edgecolor", "=", "\"red\"", ",", "\n", "linewidth", "=", "3.5", ",", "\n", ")", "\n", ")", "\n", "\"\"\"ax.text(bbox[0], bbox[1] - 2,\n                '{:s} {:.3f}'.format(class_name, score),\n                bbox=dict(facecolor='blue', alpha=0.5),\n                fontsize=14, color='white')\"\"\"", "\n", "\n", "", "\"\"\"ax.set_title(('{} detections with '\n                  'p({} | box) >= {:.1f}').format(class_name, class_name,\n                                                  thresh),\n                  fontsize=14)\"\"\"", "\n", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "draw", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.visualize_bbox.plot_bboxes": [[86, 111], ["matplotlib.subplots", "ax.imshow", "range", "matplotlib.axis", "matplotlib.tight_layout", "matplotlib.draw", "os.path.join", "matplotlib.savefig", "ax.add_patch", "im_file.replace", "matplotlib.Rectangle"], "function", ["None"], ["", "def", "plot_bboxes", "(", "im", ",", "im_file", ",", "bboxes", ",", "out_dir", ")", ":", "\n", "    ", "im", "=", "im", "[", ":", ",", ":", ",", "(", "2", ",", "1", ",", "0", ")", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "figsize", "=", "(", "12", ",", "12", ")", ")", "\n", "ax", ".", "imshow", "(", "im", ",", "aspect", "=", "\"equal\"", ")", "\n", "nboexes", ",", "_", "=", "bboxes", ".", "shape", "\n", "\n", "for", "i", "in", "range", "(", "nboexes", ")", ":", "\n", "        ", "bbox", "=", "bboxes", "[", "i", ",", ":", "4", "]", "\n", "\n", "ax", ".", "add_patch", "(", "\n", "plt", ".", "Rectangle", "(", "\n", "(", "bbox", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", ",", "\n", "bbox", "[", "2", "]", "-", "bbox", "[", "0", "]", ",", "\n", "bbox", "[", "3", "]", "-", "bbox", "[", "1", "]", ",", "\n", "fill", "=", "False", ",", "\n", "edgecolor", "=", "\"red\"", ",", "\n", "linewidth", "=", "2.5", ",", "\n", ")", "\n", ")", "\n", "", "plt", ".", "axis", "(", "\"off\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "draw", "(", ")", "\n", "\n", "out_file", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "im_file", ".", "replace", "(", "\".jpg\"", ",", "\"_demo.jpg\"", ")", ")", "\n", "plt", ".", "savefig", "(", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.timer.Timer.__init__": [[6, 11], ["timeit.default_timer", "NotImplementedError"], "methods", ["None"], ["    ", "DEFAULT_TIME_FORMAT_DATE_TIME", "=", "\"%Y/%m/%d %H:%M:%S\"", "\n", "DEFAULT_TIME_FORMAT", "=", "[", "\"%03dms\"", ",", "\"%02ds\"", ",", "\"%02dm\"", ",", "\"%02dh\"", "]", "\n", "\n", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start", "=", "time", ".", "time", "(", ")", "*", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.timer.Timer.start": [[12, 14], ["timeit.default_timer"], "methods", ["None"], ["", "def", "get_current", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_time_hhmmss", "(", "self", ".", "start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.timer.Timer.end": [[15, 24], ["timeit.default_timer"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "start", "=", "time", ".", "time", "(", ")", "*", "1000", "\n", "\n", "", "def", "get_time_since_start", "(", "self", ",", "format", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "get_time_hhmmss", "(", "self", ".", "start", ",", "format", ")", "\n", "\n", "", "def", "get_time_hhmmss", "(", "self", ",", "start", "=", "None", ",", "end", "=", "None", ",", "gap", "=", "None", ",", "format", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Calculates time since `start` and formats as a string.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.mirror_images.mirror_image": [[20, 27], ["PIL.Image.open", "PIL.ImageOps.mirror", "os.path.join", "ImageOps.mirror.save", "image_path.split"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save"], ["def", "mirror_image", "(", "image_path", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "image_path", ")", "\n", "mirror_img", "=", "ImageOps", ".", "mirror", "(", "img", ")", "\n", "image_name", "=", "image_path", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "fh", "=", "\"data/\"", "+", "split", "\n", "fh", "=", "os", ".", "path", ".", "join", "(", "fh", ",", "image_name", ")", "\n", "mirror_img", ".", "save", "(", "fh", ",", "\"JPEG\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.process_log.parse_arg": [[19, 30], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.parse_args"], ["def", "parse_arg", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--start\"", ",", "type", "=", "int", ",", "required", "=", "True", ",", "help", "=", "\"job id start\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--end\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"job id end\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--out\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"out file name\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--log_dir\"", ",", "type", "=", "str", ",", "help", "=", "\"directory for log\"", ",", "default", "=", "\"logs\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "args", ".", "end", "=", "args", ".", "start", "if", "args", ".", "end", "is", "None", "else", "args", ".", "end", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.process_log.parse_log": [[39, 63], ["JOBID_reg.match().group", "open", "max", "JOBID_reg.match", "line.rstrip.rstrip", "len", "str", "line.rstrip.startswith", "str", "len", "line.rstrip.split", "float", "acc_s.append", "EPOCH_ACC_REG.match().group", "BEST_EPOCH_ACC_REG.match", "float", "BEST_EPOCH_ACC_REG.match.group", "acc_s.index", "BEST_EPOCH_ACC_REG.match.group", "max", "EPOCH_ACC_REG.match"], "function", ["None"], ["def", "parse_log", "(", "file", ")", ":", "\n", "    ", "job_id", "=", "JOBID_reg", ".", "match", "(", "file", ")", ".", "group", "(", "1", ")", "\n", "acc_s", "=", "[", "]", "\n", "best_acc", "=", "0", "\n", "best_epoch", "=", "\"\"", "\n", "out_dir", "=", "\"\"", "\n", "with", "open", "(", "file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "if", "\"snapshot_dir\"", "in", "line", ":", "\n", "                ", "out_dir", "=", "line", ".", "split", "(", "\"=\"", ")", "[", "1", "]", "\n", "", "elif", "line", ".", "startswith", "(", "\"i_epoch\"", ")", ":", "\n", "                ", "acc", "=", "float", "(", "EPOCH_ACC_REG", ".", "match", "(", "line", ")", ".", "group", "(", "1", ")", ")", "\n", "acc_s", ".", "append", "(", "acc", ")", "\n", "", "elif", "\"best_acc\"", "in", "line", ":", "\n", "                ", "match", "=", "BEST_EPOCH_ACC_REG", ".", "match", "(", "line", ")", "\n", "best_acc", "=", "float", "(", "match", ".", "group", "(", "1", ")", ")", "\n", "best_epoch", "=", "match", ".", "group", "(", "2", ")", "\n", "\n", "", "", "", "if", "best_acc", "==", "0", "and", "len", "(", "acc_s", ")", ">", "0", ":", "\n", "        ", "best_acc", "=", "max", "(", "acc_s", ")", "\n", "best_epoch", "=", "str", "(", "acc_s", ".", "index", "(", "max", "(", "acc_s", ")", ")", "+", "1", ")", "+", "\"/\"", "+", "str", "(", "len", "(", "acc_s", ")", ")", "\n", "\n", "", "return", "job_id", ",", "best_acc", ",", "best_epoch", ",", "out_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.process_log.parse_config": [[92, 118], ["str", "open", "yaml.load", "list", "map"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["def", "parse_config", "(", "config_file", ")", ":", "\n", "    ", "with", "open", "(", "config_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "f", ")", "\n", "\n", "", "feats", "=", "\"|\"", ".", "join", "(", "config", "[", "\"data\"", "]", "[", "\"image_feat_train\"", "]", ")", "\n", "imdb", "=", "\"|\"", ".", "join", "(", "config", "[", "\"data\"", "]", "[", "\"imdb_file_train\"", "]", ")", "\n", "eps", "=", "(", "\n", "config", "[", "\"optimizer\"", "]", "[", "\"par\"", "]", "[", "\"eps\"", "]", "if", "\"eps\"", "in", "config", "[", "\"optimizer\"", "]", "[", "\"par\"", "]", "else", "0", "\n", ")", "\n", "eps", "=", "str", "(", "eps", ")", "\n", "\n", "result", "=", "[", "\n", "feats", ",", "\n", "imdb", ",", "\n", "config", "[", "\"data\"", "]", "[", "\"batch_size\"", "]", ",", "\n", "config", "[", "\"optimizer\"", "]", "[", "\"par\"", "]", "[", "\"lr\"", "]", ",", "\n", "eps", ",", "\n", "config", "[", "\"optimizer\"", "]", "[", "\"par\"", "]", "[", "\"weight_decay\"", "]", ",", "\n", "config", "[", "\"training_parameters\"", "]", "[", "\"lr_step\"", "]", ",", "\n", "config", "[", "\"training_parameters\"", "]", "[", "\"lr_ratio\"", "]", ",", "\n", "config", "[", "\"model\"", "]", "[", "\"modal_combine\"", "]", "[", "\"non_linear_elmt_multiply\"", "]", "[", "\"hidden_size\"", "]", ",", "\n", "config", "[", "\"model\"", "]", "[", "\"modal_combine\"", "]", "[", "\"non_linear_elmt_multiply\"", "]", "[", "\"dropout\"", "]", ",", "\n", "]", "\n", "\n", "res", "=", "\"\\t\"", ".", "join", "(", "list", "(", "map", "(", "str", ",", "result", ")", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.process_log.extract_config_file_name": [[123, 131], ["out_file.replace", "open", "line.rstrip.rstrip", "line.rstrip.startswith", "CFG_reg.match().group", "CFG_reg.match"], "function", ["None"], ["def", "extract_config_file_name", "(", "out_file", ")", ":", "\n", "    ", "err_file", "=", "out_file", ".", "replace", "(", "\".out\"", ",", "\".err\"", ")", "\n", "with", "open", "(", "err_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "rstrip", "(", ")", "\n", "if", "line", ".", "startswith", "(", "\"+ EXTRA_ARGS=\"", ")", ":", "\n", "                ", "cfg_file", "=", "CFG_reg", ".", "match", "(", "line", ")", ".", "group", "(", "1", ")", "\n", "", "", "", "return", "cfg_file", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.process_log.parse_a_job": [[133, 190], ["glob.glob", "process_log.parse_config", "process_log.parse_log", "list", "numpy.mean", "math.sqrt", "numpy.max", "os.path.exists", "os.path.join", "process_log.extract_config_file_name", "map", "len", "len", "numpy.var", "len", "str", "os.path.join", "best_epoch.split", "bests.append", "bests.append", "str", "str", "len", "str"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.process_log.parse_config", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.process_log.parse_log", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.process_log.extract_config_file_name"], ["", "def", "parse_a_job", "(", "log_dir", ",", "job_id", ")", ":", "\n", "    ", "bests", "=", "[", "]", "\n", "complete", "=", "False", "\n", "config_file", "=", "None", "\n", "config_file_name", "=", "\"\"", "\n", "for", "file", "in", "glob", ".", "glob", "(", "log_dir", "+", "\"/main*j\"", "+", "str", "(", "job_id", ")", "+", "\"_*out\"", ",", "recursive", "=", "True", ")", ":", "\n", "        ", "job_id_p", ",", "best_acc", ",", "best_epoch", ",", "out_dir", "=", "parse_log", "(", "file", ")", "\n", "if", "out_dir", "==", "\"\"", ":", "\n", "            ", "continue", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"config.yaml\"", ")", ")", "and", "config_file", "is", "None", ":", "\n", "            ", "config_file", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"config.yaml\"", ")", "\n", "config_file_name", "=", "extract_config_file_name", "(", "file", ")", "\n", "\n", "", "[", "e", ",", "t", "]", "=", "list", "(", "map", "(", "int", ",", "best_epoch", ".", "split", "(", "\"/\"", ")", ")", ")", "\n", "if", "t", ">", "e", ":", "\n", "            ", "if", "not", "complete", ":", "\n", "                ", "bests", "=", "[", "best_acc", "]", "\n", "complete", "=", "True", "\n", "", "else", ":", "\n", "                ", "bests", ".", "append", "(", "best_acc", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "not", "complete", ":", "\n", "                ", "bests", ".", "append", "(", "best_acc", ")", "\n", "\n", "", "", "", "mean", "=", "0", "if", "len", "(", "bests", ")", "==", "0", "else", "np", ".", "mean", "(", "bests", ")", "\n", "sd", "=", "0", "if", "len", "(", "bests", ")", "==", "0", "else", "math", ".", "sqrt", "(", "np", ".", "var", "(", "bests", ")", ")", "\n", "max_val", "=", "0", "if", "len", "(", "bests", ")", "==", "0", "else", "np", ".", "max", "(", "bests", ")", "\n", "\n", "if", "config_file", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "cfg_info", "=", "parse_config", "(", "config_file", ")", "\n", "\n", "bests_str", "=", "\"\\t\"", ".", "join", "(", "[", "\"%0.4f\"", "%", "i", "for", "i", "in", "bests", "]", ")", "\n", "\n", "result", "=", "(", "\n", "str", "(", "job_id", ")", "\n", "+", "\"\\t\"", "\n", "+", "config_file_name", "\n", "+", "\"\\t\"", "\n", "+", "cfg_info", "\n", "+", "\"\\t\"", "\n", "+", "\"%.4f\"", "%", "mean", "\n", "+", "\"\\t\"", "\n", "+", "\"%.4f\"", "%", "sd", "\n", "+", "\"\\t\"", "\n", "+", "\"%.4f\"", "%", "max_val", "\n", "+", "\"\\t\"", "\n", "+", "str", "(", "len", "(", "bests", ")", ")", "\n", "+", "\"\\t\"", "\n", "+", "str", "(", "complete", ")", "\n", "+", "\"\\t\"", "\n", "+", "config_file", "\n", "+", "\"\\t\"", "\n", "+", "bests_str", "\n", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.bert.extract_bert_embeddings.BertFeatExtractor.__init__": [[13, 17], ["pytorch_pretrained_bert.BertTokenizer.from_pretrained", "pytorch_pretrained_bert.BertModel.from_pretrained().eval", "extract_bert_embeddings.BertFeatExtractor.model.cuda", "pytorch_pretrained_bert.BertModel.from_pretrained"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "model", "=", "BertModel", ".", "from_pretrained", "(", "model_name", ")", ".", "eval", "(", ")", "\n", "self", ".", "model", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.bert.extract_bert_embeddings.BertFeatExtractor.get_bert_embedding": [[18, 31], ["extract_bert_embeddings.BertFeatExtractor.tokenizer.tokenize", "extract_bert_embeddings.BertFeatExtractor.tokenizer.convert_tokens_to_ids", "torch.Tensor().long", "torch.Tensor().long", "torch.no_grad", "extract_bert_embeddings.BertFeatExtractor.model", "encoded_layers.squeeze", "torch.Tensor", "torch.Tensor", "torch.Tensor().long.cuda", "torch.Tensor().long.cuda", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.tokenize"], ["", "def", "get_bert_embedding", "(", "self", ",", "text", ")", ":", "\n", "        ", "tokenized_text", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "tokenized_text", "=", "[", "\"[CLS]\"", "]", "+", "tokenized_text", "+", "[", "\"[SEP]\"", "]", "\n", "indexed_tokens", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokenized_text", ")", "\n", "tokens_tensor", "=", "torch", ".", "Tensor", "(", "[", "indexed_tokens", "]", ")", ".", "long", "(", ")", "\n", "segments_tensor", "=", "torch", ".", "Tensor", "(", "[", "0", "]", "*", "len", "(", "tokenized_text", ")", ")", ".", "long", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "encoded_layers", ",", "_", "=", "self", ".", "model", "(", "\n", "tokens_tensor", ".", "cuda", "(", ")", ",", "\n", "segments_tensor", ".", "cuda", "(", ")", ",", "\n", "output_all_encoded_layers", "=", "False", ",", "\n", ")", "\n", "", "return", "encoded_layers", ".", "squeeze", "(", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.bert.extract_bert_embeddings.extract_bert": [[33, 49], ["numpy.load", "extract_bert_embeddings.BertFeatExtractor", "enumerate", "tqdm.tqdm", "extract_bert_embeddings.BertFeatExtractor.get_bert_embedding", "numpy.save", "str", "feat_extractor.get_bert_embedding.cpu().numpy", "feat_extractor.get_bert_embedding.cpu"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.bert.extract_bert_embeddings.BertFeatExtractor.get_bert_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save"], ["", "", "def", "extract_bert", "(", "imdb_path", ",", "out_path", ",", "group_id", "=", "0", ",", "n_groups", "=", "1", ")", ":", "\n", "    ", "imdb", "=", "np", ".", "load", "(", "imdb_path", ")", "\n", "\n", "feat_extractor", "=", "BertFeatExtractor", "(", "\"bert-base-uncased\"", ")", "\n", "\n", "if", "group_id", "==", "0", ":", "\n", "        ", "iterator_obj", "=", "tqdm", "(", "imdb", "[", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "        ", "iterator_obj", "=", "imdb", "[", "1", ":", "]", "\n", "\n", "", "for", "idx", ",", "el", "in", "enumerate", "(", "iterator_obj", ")", ":", "\n", "        ", "if", "idx", "%", "n_groups", "!=", "group_id", ":", "\n", "            ", "continue", "\n", "", "emb", "=", "feat_extractor", ".", "get_bert_embedding", "(", "el", "[", "\"question_str\"", "]", ")", "\n", "save_path", "=", "out_path", "+", "str", "(", "el", "[", "\"question_id\"", "]", ")", "\n", "np", ".", "save", "(", "save_path", ",", "emb", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.source.conf.setup": [[186, 192], ["app.add_config_value", "app.add_transform"], "function", ["None"], ["def", "setup", "(", "app", ")", ":", "\n", "    ", "app", ".", "add_config_value", "(", "'recommonmark_config'", ",", "{", "\n", "'url_resolver'", ":", "lambda", "url", ":", "github_doc_root", "+", "url", ",", "\n", "'auto_toc_tree_section'", ":", "'Contents'", ",", "\n", "}", ",", "True", ")", "\n", "app", ".", "add_transform", "(", "AutoStructify", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tests.test_utils.compare_tensors": [[4, 6], ["torch.all", "a.eq"], "function", ["None"], ["def", "compare_tensors", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "torch", ".", "all", "(", "a", ".", "eq", "(", "b", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_model.TestDecoderModel.__init__": [[8, 12], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "vocab", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "vocab", "=", "vocab", "\n", "", "def", "build", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_model.TestDecoderModel.build": [[12, 14], ["None"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_model.TestDecoderModel.init_hidden_state": [[15, 26], ["features.new_zeros", "features.new_zeros", "features.size", "features.size"], "methods", ["None"], ["", "def", "init_hidden_state", "(", "self", ",", "features", ")", ":", "\n", "\n", "        ", "h", "=", "features", ".", "new_zeros", "(", "\n", "(", "features", ".", "size", "(", "0", ")", ",", "self", ".", "config", "[", "\"classifier\"", "]", "[", "\"params\"", "]", "[", "\"hidden_dim\"", "]", ")", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "c", "=", "features", ".", "new_zeros", "(", "\n", "(", "features", ".", "size", "(", "0", ")", ",", "self", ".", "config", "[", "\"classifier\"", "]", "[", "\"params\"", "]", "[", "\"hidden_dim\"", "]", ")", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "return", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_model.TestDecoderModel.get_data_t": [[27, 41], ["pythia.common.registry.registry.register", "test_model.TestDecoderModel.init_hidden_state", "test_model.TestDecoderModel.init_hidden_state"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD.init_hidden_state", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD.init_hidden_state"], ["", "def", "get_data_t", "(", "self", ",", "data", ",", "batch_size_t", ")", ":", "\n", "        ", "data", "[", "\"texts\"", "]", "=", "data", "[", "\"texts\"", "]", "[", ":", "batch_size_t", "]", "\n", "if", "\"state\"", "in", "data", ":", "\n", "            ", "h1", "=", "data", "[", "\"state\"", "]", "[", "\"td_hidden\"", "]", "[", "0", "]", "[", ":", "batch_size_t", "]", "\n", "c1", "=", "data", "[", "\"state\"", "]", "[", "\"td_hidden\"", "]", "[", "1", "]", "[", ":", "batch_size_t", "]", "\n", "h2", "=", "data", "[", "\"state\"", "]", "[", "\"lm_hidden\"", "]", "[", "0", "]", "[", ":", "batch_size_t", "]", "\n", "c2", "=", "data", "[", "\"state\"", "]", "[", "\"lm_hidden\"", "]", "[", "1", "]", "[", ":", "batch_size_t", "]", "\n", "", "else", ":", "\n", "            ", "h1", ",", "c1", "=", "self", ".", "init_hidden_state", "(", "data", "[", "\"texts\"", "]", ")", "\n", "h2", ",", "c2", "=", "self", ".", "init_hidden_state", "(", "data", "[", "\"texts\"", "]", ")", "\n", "", "data", "[", "\"state\"", "]", "=", "{", "\"td_hidden\"", ":", "(", "h1", ",", "c1", ")", ",", "\"lm_hidden\"", ":", "(", "h2", ",", "c2", ")", "}", "\n", "registry", ".", "register", "(", "\"{}_lstm_state\"", ".", "format", "(", "h1", ".", "device", ")", ",", "data", "[", "\"state\"", "]", ")", "\n", "\n", "return", "data", ",", "batch_size_t", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_model.TestDecoderModel.forward": [[43, 70], ["torch.rand", "decoder.init_batch", "decoder.init_batch.image_feature_0.size", "decoder.init_batch.answers.new_full", "decoder.init_batch.add_field", "range", "decoder.get_result", "decoder.init_batch.get_batch_size", "pythia.common.registry.registry.get_decoder_class", "test_model.TestDecoderModel.get_data_t", "torch.randn", "decoder.decode", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.BeamSearch.init_batch", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.add_field", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.NucleusSampling.get_result", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.get_batch_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_decoder_class", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD.get_data_t", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.NucleusSampling.decode"], ["", "def", "forward", "(", "self", ",", "sample_list", ")", ":", "\n", "        ", "scores", "=", "torch", ".", "rand", "(", "sample_list", ".", "get_batch_size", "(", ")", ",", "3127", ")", "\n", "decoder", "=", "registry", ".", "get_decoder_class", "(", "self", ".", "config", "[", "\"inference\"", "]", "[", "\"type\"", "]", ")", "(", "self", ".", "vocab", ",", "self", ".", "config", ")", "\n", "sample_list", "=", "decoder", ".", "init_batch", "(", "sample_list", ")", "\n", "batch_size", "=", "sample_list", ".", "image_feature_0", ".", "size", "(", "0", ")", "\n", "data", "=", "{", "}", "\n", "data", "[", "\"texts\"", "]", "=", "sample_list", ".", "answers", ".", "new_full", "(", "\n", "(", "batch_size", ",", "1", ")", ",", "self", ".", "vocab", ".", "SOS_INDEX", ",", "dtype", "=", "torch", ".", "long", "\n", ")", "\n", "timesteps", "=", "10", "\n", "sample_list", ".", "add_field", "(", "\"targets\"", ",", "sample_list", ".", "answers", "[", ":", ",", "0", ",", "1", ":", "]", ")", "\n", "output", "=", "None", "\n", "batch_size_t", "=", "batch_size", "\n", "for", "t", "in", "range", "(", "timesteps", ")", ":", "\n", "            ", "data", ",", "batch_size_t", "=", "self", ".", "get_data_t", "(", "data", ",", "batch_size_t", ")", "\n", "output", "=", "torch", ".", "randn", "(", "1", ",", "9491", ")", "\n", "if", "(", "t", "==", "timesteps", "-", "1", ")", ":", "\n", "                ", "output", "=", "torch", ".", "ones", "(", "1", ",", "9491", ")", "*", "-", "30", ";", "\n", "output", "[", "0", "]", "[", "2", "]", "=", "10", ";", "\n", "", "finish", ",", "data", ",", "batch_size_t", "=", "decoder", ".", "decode", "(", "t", ",", "data", ",", "output", ")", "\n", "if", "finish", ":", "\n", "                ", "break", "\n", "\n", "", "", "model_output", "=", "{", "\"scores\"", ":", "scores", "}", "\n", "model_output", "[", "\"captions\"", "]", "=", "decoder", ".", "get_result", "(", ")", "\n", "\n", "return", "model_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_timer.TestUtilsTimer.test_get_current": [[9, 14], ["pythia.utils.timer.Timer", "test_timer.TestUtilsTimer.assertEqual", "pythia.utils.timer.Timer.get_current"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.get_current"], ["    ", "def", "test_get_current", "(", "self", ")", ":", "\n", "        ", "timer", "=", "Timer", "(", ")", "\n", "expected", "=", "\"000ms\"", "\n", "\n", "self", ".", "assertEqual", "(", "timer", ".", "get_current", "(", ")", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_timer.TestUtilsTimer.test_reset": [[15, 22], ["pythia.utils.timer.Timer", "time.sleep", "pythia.utils.timer.Timer.reset", "test_timer.TestUtilsTimer.assertEqual", "pythia.utils.timer.Timer.get_current"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.SmoothedValue.reset", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.get_current"], ["", "def", "test_reset", "(", "self", ")", ":", "\n", "        ", "timer", "=", "Timer", "(", ")", "\n", "time", ".", "sleep", "(", "2", ")", "\n", "timer", ".", "reset", "(", ")", "\n", "expected", "=", "\"000ms\"", "\n", "\n", "self", ".", "assertEqual", "(", "timer", ".", "get_current", "(", ")", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_timer.TestUtilsTimer.test_get_time_since_start": [[23, 29], ["pythia.utils.timer.Timer", "time.sleep", "test_timer.TestUtilsTimer.assertTrue", "pythia.utils.timer.Timer.get_time_since_start"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.get_time_since_start"], ["", "def", "test_get_time_since_start", "(", "self", ")", ":", "\n", "        ", "timer", "=", "Timer", "(", ")", "\n", "time", ".", "sleep", "(", "2", ")", "\n", "expected", "=", "\"02s \"", "\n", "\n", "self", ".", "assertTrue", "(", "expected", "in", "timer", ".", "get_time_since_start", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_general.TestUtilsGeneral.test_dict_to_string": [[8, 13], ["test_general.TestUtilsGeneral.assertEqual", "pythia.utils.general.dict_to_string"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.dict_to_string"], ["    ", "def", "test_dict_to_string", "(", "self", ")", ":", "\n", "        ", "dictionary", "=", "{", "\"one\"", ":", "1", ",", "\"two\"", ":", "2", ",", "\"three\"", ":", "3", "}", "\n", "expected", "=", "\"one: 1.0000, two: 2.0000, three: 3.0000\"", "\n", "\n", "self", ".", "assertEqual", "(", "dict_to_string", "(", "dictionary", ")", ",", "expected", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_general.TestUtilsGeneral.test_get_overlap_score": [[30, 45], ["test_general.TestUtilsGeneral.assertEqual", "test_general.TestUtilsGeneral.assertEqual", "test_general.TestUtilsGeneral.assertEqual", "pythia.utils.general.get_overlap_score", "pythia.utils.general.get_overlap_score", "pythia.utils.general.get_overlap_score"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_overlap_score", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_overlap_score", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_overlap_score"], ["", "def", "test_get_overlap_score", "(", "self", ")", ":", "\n", "# Full overlap", "\n", "        ", "candidate", "=", "\"pythia\"", "\n", "target", "=", "\"pythia\"", "\n", "self", ".", "assertEqual", "(", "get_overlap_score", "(", "candidate", ",", "target", ")", ",", "1.0", ")", "\n", "\n", "# Partial overlap", "\n", "candidate", "=", "\"pythia\"", "\n", "target", "=", "\"python\"", "\n", "self", ".", "assertEqual", "(", "get_overlap_score", "(", "candidate", ",", "target", ")", ",", "2", "/", "3", ")", "\n", "\n", "# No overlap", "\n", "candidate", "=", "\"pythia\"", "\n", "target", "=", "\"vqa\"", "\n", "self", ".", "assertEqual", "(", "get_overlap_score", "(", "candidate", ",", "target", ")", ",", "0.0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_text_utils.TestTextUtils.setUp": [[30, 42], ["torch.manual_seed", "os.path.join", "os.path.abspath", "pythia.utils.configuration.Configuration", "pythia.utils.configuration.Configuration.freeze", "pythia.common.registry.registry.register", "pythia.utils.general.get_pythia_root"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.freeze", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root"], ["def", "setUp", "(", "self", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "1234", ")", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "\n", "get_pythia_root", "(", ")", ",", "\"..\"", ",", "\"configs\"", ",", "\"captioning\"", ",", "\"coco\"", ",", "\"butd_nucleus_sampling.yml\"", "\n", ")", "\n", "config_path", "=", "os", ".", "path", ".", "abspath", "(", "config_path", ")", "\n", "configuration", "=", "Configuration", "(", "config_path", ")", "\n", "configuration", ".", "config", "[", "\"datasets\"", "]", "=", "\"coco\"", "\n", "configuration", ".", "config", "[", "\"model_attributes\"", "]", "[", "\"butd\"", "]", "[", "\"inference\"", "]", "[", "\"params\"", "]", "[", "\"sum_threshold\"", "]", "=", "0.5", "\n", "configuration", ".", "freeze", "(", ")", "\n", "self", ".", "config", "=", "configuration", ".", "config", "\n", "registry", ".", "register", "(", "\"config\"", ",", "self", ".", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_text_utils.TestTextUtils.test_tokenize": [[43, 47], ["pythia.tokenize", "test_text_utils.TestTextUtils.assertEqual", "list"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.tokenize"], ["", "def", "test_tokenize", "(", "self", ")", ":", "\n", "        ", "tokens", "=", "text_utils", ".", "tokenize", "(", "self", ".", "TOKENIZE_EXAMPLE", ")", "\n", "\n", "self", ".", "assertEqual", "(", "list", "(", "tokens", ")", ",", "self", ".", "TOKENS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_text_utils.TestTextUtils.test_generate_ngrams": [[48, 61], ["pythia.generate_ngrams", "test_text_utils.TestTextUtils.assertEqual", "pythia.generate_ngrams", "test_text_utils.TestTextUtils.assertEqual", "list", "list"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.generate_ngrams", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.generate_ngrams"], ["", "def", "test_generate_ngrams", "(", "self", ")", ":", "\n", "        ", "ngrams", "=", "text_utils", ".", "generate_ngrams", "(", "self", ".", "TOKENS", ",", "2", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "list", "(", "ngrams", ")", ",", "\n", "[", "\"this will\"", ",", "\"will be\"", ",", "\"be a\"", ",", "\"a test\"", ",", "\"test of\"", ",", "\"of tokens\"", "]", ",", "\n", ")", "\n", "\n", "ngrams", "=", "text_utils", ".", "generate_ngrams", "(", "self", ".", "TOKENS", ",", "3", ")", "\n", "\n", "self", ".", "assertEqual", "(", "\n", "list", "(", "ngrams", ")", ",", "\n", "[", "\"this will be\"", ",", "\"will be a\"", ",", "\"be a test\"", ",", "\"a test of\"", ",", "\"test of tokens\"", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_text_utils.TestTextUtils.test_generate_ngrams_range": [[63, 82], ["pythia.generate_ngrams_range", "test_text_utils.TestTextUtils.assertEqual", "list"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.generate_ngrams_range"], ["", "def", "test_generate_ngrams_range", "(", "self", ")", ":", "\n", "# Test generation of 1grams to 3gram", "\n", "        ", "ngrams", "=", "text_utils", ".", "generate_ngrams_range", "(", "self", ".", "TOKENS", ",", "(", "1", ",", "4", ")", ")", "\n", "\n", "expected_ngrams", "=", "self", ".", "TOKENS", "+", "[", "\n", "\"this will\"", ",", "\n", "\"will be\"", ",", "\n", "\"be a\"", ",", "\n", "\"a test\"", ",", "\n", "\"test of\"", ",", "\n", "\"of tokens\"", ",", "\n", "\"this will be\"", ",", "\n", "\"will be a\"", ",", "\n", "\"be a test\"", ",", "\n", "\"a test of\"", ",", "\n", "\"test of tokens\"", ",", "\n", "]", "\n", "\n", "self", ".", "assertEqual", "(", "list", "(", "ngrams", ")", ",", "expected_ngrams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_text_utils.TestTextUtils.test_vocab_from_text": [[83, 127], ["pythia.VocabFromText", "test_text_utils.TestTextUtils.assertEqual", "test_text_utils.TestTextUtils.assertEqual", "test_text_utils.TestTextUtils.assertEqual", "test_text_utils.TestTextUtils.assertEqual", "test_text_utils.TestTextUtils.assertEqual", "test_text_utils.TestTextUtils.assertEqual", "test_text_utils.TestTextUtils.assertEqual", "test_text_utils.TestTextUtils.assertEqual", "test_text_utils.TestTextUtils.assertEqual", "test_text_utils.TestTextUtils.assertEqual", "test_text_utils.TestTextUtils.assertEqual", "pythia.VocabFromText", "test_text_utils.TestTextUtils.assertEqual", "test_text_utils.TestTextUtils.assertEqual", "pythia.VocabFromText", "test_text_utils.TestTextUtils.assertEqual", "pythia.VocabFromText", "test_text_utils.TestTextUtils.assertEqual", "test_text_utils.TestTextUtils.assertEqual", "pythia.VocabFromText", "test_text_utils.TestTextUtils.assertEqual", "pythia.VocabFromText", "test_text_utils.TestTextUtils.assertEqual", "pythia.VocabFromText", "test_text_utils.TestTextUtils.assertEqual", "pythia.VocabFromText.get_size", "len", "pythia.VocabFromText.get_unk_index", "pythia.VocabFromText.get_size", "pythia.VocabFromText.get_size", "pythia.VocabFromText.get_size", "pythia.VocabFromText.get_size", "pythia.VocabFromText.get_size", "pythia.VocabFromText.get_size", "pythia.VocabFromText.get_size", "pythia.VocabFromText.get_size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_unk_index", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size"], ["", "def", "test_vocab_from_text", "(", "self", ")", ":", "\n", "        ", "vocab", "=", "text_utils", ".", "VocabFromText", "(", "self", ".", "VOCAB_EXAMPLE_SENTENCES", ")", "\n", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "get_size", "(", ")", ",", "41", ")", "\n", "self", ".", "assertEqual", "(", "len", "(", "vocab", ")", ",", "41", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "get_unk_index", "(", ")", ",", "1", ")", "\n", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "itos", "[", "0", "]", ",", "vocab", ".", "DEFAULT_TOKENS", "[", "0", "]", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "itos", "[", "34", "]", ",", "\"that\"", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "itos", "[", "31", "]", ",", "\"cube\"", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "itos", "[", "25", "]", ",", "\"cyan\"", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "itos", "[", "20", "]", ",", "\"the\"", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "itos", "[", "10", "]", ",", "\"than\"", ")", "\n", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "stoi", "[", "\"sphere\"", "]", ",", "30", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "stoi", "[", "\"shape\"", "]", ",", "22", ")", "\n", "\n", "vocab", "=", "text_utils", ".", "VocabFromText", "(", "self", ".", "VOCAB_EXAMPLE_SENTENCES", ",", "min_count", "=", "10", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "get_size", "(", ")", ",", "5", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "itos", "[", "vocab", ".", "get_size", "(", ")", "-", "1", "]", ",", "\"the\"", ")", "\n", "\n", "vocab", "=", "text_utils", ".", "VocabFromText", "(", "self", ".", "VOCAB_EXAMPLE_SENTENCES", ",", "min_count", "=", "11", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "get_size", "(", ")", ",", "4", ")", "\n", "\n", "vocab", "=", "text_utils", ".", "VocabFromText", "(", "\n", "self", ".", "VOCAB_EXAMPLE_SENTENCES", ",", "min_count", "=", "11", ",", "only_unk_extra", "=", "True", "\n", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "get_size", "(", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "itos", "[", "vocab", ".", "get_size", "(", ")", "-", "1", "]", ",", "\"<unk>\"", ")", "\n", "\n", "vocab", "=", "text_utils", ".", "VocabFromText", "(", "\n", "self", ".", "VOCAB_EXAMPLE_SENTENCES", ",", "min_count", "=", "1", ",", "remove", "=", "[", "\";\"", "]", "\n", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "get_size", "(", ")", ",", "40", ")", "\n", "\n", "vocab", "=", "text_utils", ".", "VocabFromText", "(", "\n", "self", ".", "VOCAB_EXAMPLE_SENTENCES", ",", "min_count", "=", "1", ",", "remove", "=", "[", "\";\"", ",", "\",\"", ",", "\"?\"", "]", "\n", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "get_size", "(", ")", ",", "38", ")", "\n", "\n", "vocab", "=", "text_utils", ".", "VocabFromText", "(", "\n", "self", ".", "VOCAB_EXAMPLE_SENTENCES", ",", "min_count", "=", "1", ",", "keep", "=", "[", "\"?\"", "]", ",", "remove", "=", "\";\"", "\n", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ".", "get_size", "(", ")", ",", "40", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.test_text_utils.TestTextUtils.test_nucleus_sampling": [[128, 151], ["pythia.VocabFromText", "tests.utils.test_model.TestDecoderModel", "tests.utils.test_model.TestDecoderModel.build", "tests.utils.test_model.TestDecoderModel.to", "tests.utils.test_model.TestDecoderModel.eval", "pythia.common.sample.Sample", "torch.randn", "torch.zeros", "pythia.common.sample.SampleList", "test_text_utils.TestTextUtils.assertEqual", "tests.utils.test_model.TestDecoderModel.", "tokens[].tolist"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.build", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.to"], ["", "def", "test_nucleus_sampling", "(", "self", ")", ":", "\n", "        ", "vocab", "=", "text_utils", ".", "VocabFromText", "(", "self", ".", "VOCAB_EXAMPLE_SENTENCES", ")", "\n", "\n", "model_config", "=", "self", ".", "config", ".", "model_attributes", ".", "butd", "\n", "model", "=", "TestDecoderModel", "(", "model_config", ",", "vocab", ")", "\n", "model", ".", "build", "(", ")", "\n", "model", ".", "to", "(", "\"cuda\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "sample", "=", "Sample", "(", ")", "\n", "sample", ".", "dataset_name", "=", "\"coco\"", "\n", "sample", ".", "dataset_type", "=", "\"test\"", "\n", "sample", ".", "image_feature_0", "=", "torch", ".", "randn", "(", "100", ",", "2048", ")", "\n", "sample", ".", "answers", "=", "torch", ".", "zeros", "(", "(", "5", ",", "10", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "sample_list", "=", "SampleList", "(", "[", "sample", "]", ")", "\n", "\n", "tokens", "=", "model", "(", "sample_list", ")", "[", "\"captions\"", "]", "\n", "\n", "# these are expected tokens for sum_threshold = 0.5", "\n", "expected_tokens", "=", "[", "1.0000e+00", ",", "2.9140e+03", ",", "5.9210e+03", ",", "2.2040e+03", ",", "5.0550e+03", ",", "9.2240e+03", ",", "\n", "4.5120e+03", ",", "1.8200e+02", ",", "3.6490e+03", ",", "6.4090e+03", ",", "2.0000e+00", "]", "\n", "\n", "self", ".", "assertEqual", "(", "tokens", "[", "0", "]", ".", "tolist", "(", ")", ",", "expected_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.flags.Flags.__init__": [[9, 14], ["argparse.ArgumentParser", "flags.Flags.add_core_args", "flags.Flags.update_task_args", "flags.Flags.update_model_args"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.flags.Flags.add_core_args", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.flags.Flags.update_task_args", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.flags.Flags.update_model_args"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "add_core_args", "(", ")", "\n", "self", ".", "update_task_args", "(", ")", "\n", "self", ".", "update_model_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.flags.Flags.get_parser": [[15, 17], ["None"], "methods", ["None"], ["", "def", "get_parser", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.flags.Flags.add_core_args": [[18, 229], ["flags.Flags.parser.add_argument_group", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument", "flags.Flags.parser.add_argument"], "methods", ["None"], ["", "def", "add_core_args", "(", "self", ")", ":", "\n", "# TODO: Update default values", "\n", "        ", "self", ".", "parser", ".", "add_argument_group", "(", "\"Core Arguments\"", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--config\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "required", "=", "False", ",", "help", "=", "\"config yaml file\"", "\n", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--tasks\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"Tasks for training\"", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--datasets\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "False", ",", "\n", "default", "=", "\"all\"", ",", "\n", "help", "=", "\"Datasets to be used for required task\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--model\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"Model for training\"", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--run_type\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Type of run. Default=train+predict\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"-exp\"", ",", "\n", "\"--experiment_name\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Name of the experiment\"", ",", "\n", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"random seed, default None, meaning nothing will be seeded\"", "\n", "\" set seed to -1 if need a random seed\"", "\n", "\" between 1 and 100000\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--config_overwrite\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"a json string to update yaml config file\"", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--force_restart\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"flag to force clean previous result and restart training\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--log_interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Number of iterations after which we should log validation results\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--snapshot_interval\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Number of iterations after which  we should save snapshots\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--max_iterations\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Number of iterations after which  we should stop training\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--max_epochs\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Number of epochs after which \"", "\n", "\" we should stop training\"", "\n", "\" (mutually exclusive with max_iterations)\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--batch_size\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Batch size to be used for training \"", "\n", "\"If not passed it will default to config one\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--save_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./save\"", ",", "\n", "help", "=", "\"Location for saving model checkpoint\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--log_dir\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"Location for saving logs\"", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--logger_level\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "\"Level of logging\"", "\n", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--should_not_log\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Set when you don't want logging to happen\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"-co\"", ",", "\n", "\"--config_override\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Use to override config from command line directly\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--resume_file\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"File from which to resume checkpoint\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--resume\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Use when you want to restore from automatic checkpoint\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--evalai_inference\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Whether predictions should be made for EvalAI.\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--verbose_dump\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Whether to do verbose dump of dataset\"", "\n", "\" samples, predictions and other things.\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--lr_scheduler\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Use when you want to use lr scheduler\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--clip_gradients\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Use when you want to clip gradients\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--data_parallel\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Use when you want to use DataParallel\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"--distributed\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Use when you want to use DistributedDataParallel for training\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"-dev\"", ",", "\n", "\"--device\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Specify device to be used for training\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"-p\"", ",", "\"--patience\"", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"Patience for early stop\"", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"-fr\"", ",", "\n", "\"--fast_read\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"If fast read should be activated\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"-pt\"", ",", "\n", "\"--load_pretrained\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"If using a pretrained model. \"", "\n", "\"Must be used with --resume_file parameter \"", "\n", "\"to specify pretrained model checkpoint. \"", "\n", "\"Will load only specific layers if \"", "\n", "\"pretrained mapping is specified in config\"", ",", "\n", ")", "\n", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"-nw\"", ",", "\n", "\"--num_workers\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Number of workers for dataloaders\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"-lr\"", ",", "\n", "\"--local_rank\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Local rank of the current node\"", ",", "\n", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "\n", "\"opts\"", ",", "\n", "default", "=", "None", ",", "\n", "nargs", "=", "argparse", ".", "REMAINDER", ",", "\n", "help", "=", "\"Modify config options from command line\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.flags.Flags.update_task_args": [[231, 250], ["enumerate", "map", "map.split", "pythia.common.registry.registry.get_task_class", "pythia.common.registry.registry.get_task_class.", "registry.get_task_class.init_args", "x.strip"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_task_class", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder.init_args"], ["", "def", "update_task_args", "(", "self", ")", ":", "\n", "        ", "args", "=", "sys", ".", "argv", "\n", "task_names", "=", "None", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "args", ")", ":", "\n", "            ", "if", "item", "==", "\"--tasks\"", ":", "\n", "                ", "task_names", "=", "args", "[", "index", "+", "1", "]", "\n", "\n", "", "", "if", "task_names", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "task_names", "=", "map", "(", "lambda", "x", ":", "x", ".", "strip", "(", ")", ",", "task_names", ".", "split", "(", "\",\"", ")", ")", "\n", "\n", "for", "task_name", "in", "task_names", ":", "\n", "            ", "task_class", "=", "registry", ".", "get_task_class", "(", "task_name", ")", "\n", "if", "task_class", "is", "None", ":", "\n", "                ", "return", "\n", "\n", "", "task_object", "=", "task_class", "(", ")", "\n", "task_object", ".", "init_args", "(", "self", ".", "parser", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.flags.Flags.update_model_args": [[251, 266], ["enumerate", "pythia.common.registry.registry.get_model_class", "pythia.common.registry.registry.get_model_class.init_args"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_model_class", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder.init_args"], ["", "", "def", "update_model_args", "(", "self", ")", ":", "\n", "        ", "args", "=", "sys", ".", "argv", "\n", "model_name", "=", "None", "\n", "for", "index", ",", "item", "in", "enumerate", "(", "args", ")", ":", "\n", "            ", "if", "item", "==", "\"--model\"", ":", "\n", "                ", "model_name", "=", "args", "[", "index", "+", "1", "]", "\n", "\n", "", "", "if", "model_name", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "model_class", "=", "registry", ".", "get_model_class", "(", "model_name", ")", "\n", "if", "model_class", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "model_class", ".", "init_args", "(", "self", ".", "parser", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.process_answers.get_score": [[10, 21], ["None"], "function", ["None"], ["def", "get_score", "(", "occurences", ")", ":", "\n", "    ", "if", "occurences", "==", "0", ":", "\n", "        ", "return", "0", "\n", "", "elif", "occurences", "==", "1", ":", "\n", "        ", "return", "0.3", "\n", "", "elif", "occurences", "==", "2", ":", "\n", "        ", "return", "0.6", "\n", "", "elif", "occurences", "==", "3", ":", "\n", "        ", "return", "0.9", "\n", "", "else", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.process_answers.multiple_replace": [[23, 27], ["text.replace.replace"], "function", ["None"], ["", "", "def", "multiple_replace", "(", "text", ",", "wordDict", ")", ":", "\n", "    ", "for", "key", "in", "wordDict", ":", "\n", "        ", "text", "=", "text", ".", "replace", "(", "key", ",", "wordDict", "[", "key", "]", ")", "\n", "", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.process_answers.filter_answers": [[29, 49], ["pythia.tasks.processors.EvalAIAnswerProcessor", "occurence.keys", "print", "pythia.tasks.processors.EvalAIAnswerProcessor.", "occurence[].add", "set", "len", "answer_list.append", "len"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.helper.answer_json.add"], ["", "def", "filter_answers", "(", "answers_dset", ",", "min_occurence", ")", ":", "\n", "    ", "\"\"\"This will change the answer to preprocessed version\n    \"\"\"", "\n", "occurence", "=", "{", "}", "\n", "answer_list", "=", "[", "]", "\n", "evalai_answer_processor", "=", "EvalAIAnswerProcessor", "(", ")", "\n", "for", "ans_entry", "in", "answers_dset", ":", "\n", "        ", "gtruth", "=", "ans_entry", "[", "\"multiple_choice_answer\"", "]", "\n", "gtruth", "=", "evalai_answer_processor", "(", "gtruth", ")", "\n", "if", "gtruth", "not", "in", "occurence", ":", "\n", "            ", "occurence", "[", "gtruth", "]", "=", "set", "(", ")", "\n", "", "occurence", "[", "gtruth", "]", ".", "add", "(", "ans_entry", "[", "\"question_id\"", "]", ")", "\n", "", "for", "answer", "in", "occurence", ".", "keys", "(", ")", ":", "\n", "        ", "if", "len", "(", "occurence", "[", "answer", "]", ")", ">=", "min_occurence", ":", "\n", "            ", "answer_list", ".", "append", "(", "answer", ")", "\n", "\n", "", "", "print", "(", "\n", "\"Num of answers that appear >= %d times: %d\"", "%", "(", "min_occurence", ",", "len", "(", "answer_list", ")", ")", "\n", ")", "\n", "return", "answer_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.synchronize": [[7, 19], ["torch.distributed.get_world_size", "torch.distributed.barrier", "torch.distributed.is_nccl_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_world_size"], ["def", "synchronize", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_nccl_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_rank": [[21, 27], ["torch.distributed.get_rank", "torch.distributed.is_nccl_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_nccl_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.is_main_process": [[29, 31], ["distributed_utils.get_rank"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_world_size": [[33, 39], ["torch.distributed.get_world_size", "torch.distributed.is_nccl_available", "torch.distributed.is_initialized"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_world_size"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_nccl_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.broadcast_tensor": [[41, 50], ["distributed_utils.get_world_size", "torch.no_grad", "torch.distributed.broadcast"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_world_size"], ["", "def", "broadcast_tensor", "(", "tensor", ",", "src", "=", "0", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "tensor", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dist", ".", "broadcast", "(", "tensor", ",", "src", "=", "0", ")", "\n", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.broadcast_scalar": [[52, 56], ["torch.tensor().to", "distributed_utils.broadcast_tensor", "broadcast_tensor.item", "torch.tensor"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.to", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.broadcast_tensor"], ["", "def", "broadcast_scalar", "(", "scalar", ",", "src", "=", "0", ",", "device", "=", "\"cpu\"", ")", ":", "\n", "    ", "scalar_tensor", "=", "torch", ".", "tensor", "(", "scalar", ")", ".", "to", "(", "device", ")", "\n", "scalar_tensor", "=", "broadcast_tensor", "(", "scalar_tensor", ",", "src", ")", "\n", "return", "scalar_tensor", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.reduce_tensor": [[58, 70], ["distributed_utils.get_world_size", "torch.no_grad", "torch.distributed.reduce", "torch.distributed.get_rank", "tensor.div.div"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_world_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_rank"], ["", "def", "reduce_tensor", "(", "tensor", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "tensor", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "dist", ".", "reduce", "(", "tensor", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "tensor", "=", "tensor", ".", "div", "(", "world_size", ")", "\n", "\n", "", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.gather_tensor": [[72, 87], ["distributed_utils.get_world_size", "torch.no_grad", "range", "torch.distributed.all_gather", "torch.stack", "torch.stack.append", "torch.zeros_like"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_world_size"], ["", "def", "gather_tensor", "(", "tensor", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "tensor", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "tensor_list", "=", "[", "]", "\n", "\n", "for", "_", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "tensor_list", ".", "append", "(", "torch", ".", "zeros_like", "(", "tensor", ")", ")", "\n", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "tensor_list", "=", "torch", ".", "stack", "(", "tensor_list", ",", "dim", "=", "0", ")", "\n", "", "return", "tensor_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.reduce_dict": [[89, 106], ["distributed_utils.get_world_size", "torch.no_grad", "zip", "torch.stack", "torch.distributed.reduce", "torch.distributed.get_rank", "sorted", "zip", "dictionary.items"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_world_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_rank"], ["", "def", "reduce_dict", "(", "dictionary", ")", ":", "\n", "    ", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "dictionary", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "keys", ",", "values", "=", "zip", "(", "*", "sorted", "(", "dictionary", ".", "items", "(", ")", ")", ")", "\n", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.dataset_utils.build_bbox_tensors": [[7, 39], ["min", "torch.zeros", "torch.zeros", "torch.zeros", "pythia.common.sample.Sample", "enumerate", "len"], "function", ["None"], ["def", "build_bbox_tensors", "(", "infos", ",", "max_length", ")", ":", "\n", "    ", "num_bbox", "=", "min", "(", "max_length", ",", "len", "(", "infos", ")", ")", "\n", "\n", "# After num_bbox, everything else should be zero", "\n", "coord_tensor", "=", "torch", ".", "zeros", "(", "(", "max_length", ",", "4", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "width_tensor", "=", "torch", ".", "zeros", "(", "max_length", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "height_tensor", "=", "torch", ".", "zeros", "(", "max_length", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "bbox_types", "=", "[", "\"xyxy\"", "]", "*", "max_length", "\n", "\n", "infos", "=", "infos", "[", ":", "num_bbox", "]", "\n", "sample", "=", "Sample", "(", ")", "\n", "\n", "for", "idx", ",", "info", "in", "enumerate", "(", "infos", ")", ":", "\n", "        ", "bbox", "=", "info", "[", "\"bounding_box\"", "]", "\n", "x", "=", "bbox", "[", "\"top_left_x\"", "]", "\n", "y", "=", "bbox", "[", "\"top_left_y\"", "]", "\n", "width", "=", "bbox", "[", "\"width\"", "]", "\n", "height", "=", "bbox", "[", "\"height\"", "]", "\n", "\n", "coord_tensor", "[", "idx", "]", "[", "0", "]", "=", "x", "\n", "coord_tensor", "[", "idx", "]", "[", "1", "]", "=", "y", "\n", "coord_tensor", "[", "idx", "]", "[", "2", "]", "=", "x", "+", "width", "\n", "coord_tensor", "[", "idx", "]", "[", "3", "]", "=", "y", "+", "height", "\n", "\n", "width_tensor", "[", "idx", "]", "=", "width", "\n", "height_tensor", "[", "idx", "]", "=", "height", "\n", "", "sample", ".", "coordinates", "=", "coord_tensor", "\n", "sample", ".", "width", "=", "width_tensor", "\n", "sample", ".", "height", "=", "height_tensor", "\n", "sample", ".", "bbox_types", "=", "bbox_types", "\n", "\n", "return", "sample", "\n", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.VocabDict.__init__": [[109, 123], ["text_utils.load_str_list", "text_utils.VocabDict._build", "pythia.utils.general.get_pythia_root", "os.path.abspath", "os.path.exists", "RuntimeError", "os.path.isabs", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.load_str_list", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.builder.VisualGenomeBuilder._build", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "data_root_dir", "=", "None", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isabs", "(", "vocab_file", ")", "and", "data_root_dir", "is", "not", "None", ":", "\n", "            ", "pythia_root", "=", "get_pythia_root", "(", ")", "\n", "vocab_file", "=", "os", ".", "path", ".", "abspath", "(", "\n", "os", ".", "path", ".", "join", "(", "pythia_root", ",", "data_root_dir", ",", "vocab_file", ")", "\n", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "vocab_file", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Vocab file {} for vocab dict doesn't exist\"", ".", "format", "(", "vocab_file", ")", "\n", ")", "\n", "\n", "", "self", ".", "word_list", "=", "load_str_list", "(", "vocab_file", ")", "\n", "self", ".", "_build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.VocabDict._build": [[124, 146], ["len", "enumerate"], "methods", ["None"], ["", "def", "_build", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "UNK_TOKEN", "not", "in", "self", ".", "word_list", ":", "\n", "            ", "self", ".", "word_list", "=", "[", "self", ".", "UNK_TOKEN", "]", "+", "self", ".", "word_list", "\n", "\n", "", "self", ".", "word2idx_dict", "=", "{", "w", ":", "n_w", "for", "n_w", ",", "w", "in", "enumerate", "(", "self", ".", "word_list", ")", "}", "\n", "\n", "# String (word) to integer (index) dict mapping", "\n", "self", ".", "stoi", "=", "self", ".", "word2idx_dict", "\n", "# Integer to string (word) reverse mapping", "\n", "self", ".", "itos", "=", "self", ".", "word_list", "\n", "self", ".", "num_vocab", "=", "len", "(", "self", ".", "word_list", ")", "\n", "\n", "self", ".", "UNK_INDEX", "=", "(", "\n", "self", ".", "word2idx_dict", "[", "self", ".", "UNK_TOKEN", "]", "\n", "if", "self", ".", "UNK_TOKEN", "in", "self", ".", "word2idx_dict", "\n", "else", "None", "\n", ")", "\n", "\n", "self", ".", "PAD_INDEX", "=", "(", "\n", "self", ".", "word2idx_dict", "[", "self", ".", "PAD_TOKEN", "]", "\n", "if", "self", ".", "PAD_TOKEN", "in", "self", ".", "word2idx_dict", "\n", "else", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.VocabDict.idx2word": [[148, 150], ["None"], "methods", ["None"], ["", "def", "idx2word", "(", "self", ",", "n_w", ")", ":", "\n", "        ", "return", "self", ".", "word_list", "[", "n_w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.VocabDict.__len__": [[151, 153], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "word_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.VocabDict.get_size": [[154, 156], ["len"], "methods", ["None"], ["", "def", "get_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "word_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.VocabDict.get_unk_index": [[157, 159], ["None"], "methods", ["None"], ["", "def", "get_unk_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "UNK_INDEX", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.VocabDict.get_unk_token": [[160, 162], ["None"], "methods", ["None"], ["", "def", "get_unk_token", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "UNK_TOKEN", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.VocabDict.word2idx": [[163, 173], ["ValueError"], "methods", ["None"], ["", "def", "word2idx", "(", "self", ",", "w", ")", ":", "\n", "        ", "if", "w", "in", "self", ".", "word2idx_dict", ":", "\n", "            ", "return", "self", ".", "word2idx_dict", "[", "w", "]", "\n", "", "elif", "self", ".", "UNK_INDEX", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "UNK_INDEX", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"word %s not in dictionary \\\n                             (while dictionary does not contain <unk>)\"", "\n", "%", "w", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.VocabDict.tokenize_and_index": [[175, 178], ["text_utils.VocabDict.word2idx", "text_utils.tokenize"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.word2idx", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.tokenize"], ["", "", "def", "tokenize_and_index", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "inds", "=", "[", "self", ".", "word2idx", "(", "w", ")", "for", "w", "in", "tokenize", "(", "sentence", ")", "]", "\n", "return", "inds", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.VocabFromText.__init__": [[188, 215], ["collections.Counter", "text_utils.VocabFromText._build", "text_utils.tokenize", "collections.Counter.update", "token_list.append"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.builder.VisualGenomeBuilder._build", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.tokenize", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update"], ["def", "__init__", "(", "\n", "self", ",", "\n", "sentences", ",", "\n", "min_count", "=", "1", ",", "\n", "regex", "=", "SENTENCE_SPLIT_REGEX", ",", "\n", "keep", "=", "[", "]", ",", "\n", "remove", "=", "[", "]", ",", "\n", "only_unk_extra", "=", "False", ",", "\n", ")", ":", "\n", "        ", "token_counter", "=", "Counter", "(", ")", "\n", "\n", "for", "sentence", "in", "sentences", ":", "\n", "            ", "tokens", "=", "tokenize", "(", "sentence", ",", "regex", "=", "regex", ",", "keep", "=", "keep", ",", "remove", "=", "remove", ")", "\n", "token_counter", ".", "update", "(", "tokens", ")", "\n", "\n", "", "token_list", "=", "[", "]", "\n", "for", "token", "in", "token_counter", ":", "\n", "            ", "if", "token_counter", "[", "token", "]", ">=", "min_count", ":", "\n", "                ", "token_list", ".", "append", "(", "token", ")", "\n", "\n", "", "", "extras", "=", "self", ".", "DEFAULT_TOKENS", "\n", "\n", "if", "only_unk_extra", ":", "\n", "            ", "extras", "=", "[", "self", ".", "UNK_TOKEN", "]", "\n", "\n", "", "self", ".", "word_list", "=", "extras", "+", "token_list", "\n", "self", ".", "_build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.TextDecoder.__init__": [[226, 233], ["vocab.get_size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size"], ["def", "__init__", "(", "self", ",", "vocab", ")", ":", "\n", "        ", "self", ".", "_vocab", "=", "vocab", "\n", "self", ".", "_vocab_size", "=", "vocab", ".", "get_size", "(", ")", "\n", "\n", "# Lists to store completed sequences and scores", "\n", "self", ".", "_complete_seqs", "=", "[", "]", "\n", "self", ".", "_complete_seqs_scores", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.TextDecoder.init_batch": [[234, 245], ["sample_list.answers.new_full", "sample_list.image_feature_0.unsqueeze().expand().squeeze", "sample_list.image_feature_0.unsqueeze().expand", "sample_list.image_feature_0.unsqueeze"], "methods", ["None"], ["", "def", "init_batch", "(", "self", ",", "sample_list", ")", ":", "\n", "        ", "self", ".", "seqs", "=", "sample_list", ".", "answers", ".", "new_full", "(", "\n", "(", "self", ".", "_decode_size", ",", "1", ")", ",", "self", ".", "_vocab", ".", "SOS_INDEX", ",", "dtype", "=", "torch", ".", "long", "\n", ")", "\n", "\n", "sample_list", ".", "image_feature_0", "=", "(", "\n", "sample_list", ".", "image_feature_0", ".", "unsqueeze", "(", "1", ")", "\n", ".", "expand", "(", "-", "1", ",", "self", ".", "_decode_size", ",", "-", "1", ",", "-", "1", ")", "\n", ".", "squeeze", "(", "0", ")", "\n", ")", "\n", "return", "sample_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.TextDecoder.add_next_word": [[246, 248], ["torch.cat", "next_word_inds.unsqueeze"], "methods", ["None"], ["", "def", "add_next_word", "(", "self", ",", "seqs", ",", "prev_word_inds", ",", "next_word_inds", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "seqs", "[", "prev_word_inds", "]", ",", "next_word_inds", ".", "unsqueeze", "(", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.TextDecoder.find_complete_inds": [[249, 256], ["enumerate", "list", "incomplete_inds.append", "set", "set", "range", "len"], "methods", ["None"], ["", "def", "find_complete_inds", "(", "self", ",", "next_word_inds", ")", ":", "\n", "        ", "incomplete_inds", "=", "[", "]", "\n", "for", "ind", ",", "next_word", "in", "enumerate", "(", "next_word_inds", ")", ":", "\n", "            ", "if", "next_word", "!=", "self", ".", "_vocab", ".", "EOS_INDEX", ":", "\n", "                ", "incomplete_inds", ".", "append", "(", "ind", ")", "\n", "", "", "complete_inds", "=", "list", "(", "set", "(", "range", "(", "len", "(", "next_word_inds", ")", ")", ")", "-", "set", "(", "incomplete_inds", ")", ")", "\n", "return", "complete_inds", ",", "incomplete_inds", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.TextDecoder.update_data": [[257, 265], ["next_word_inds[].unsqueeze"], "methods", ["None"], ["", "def", "update_data", "(", "self", ",", "data", ",", "prev_word_inds", ",", "next_word_inds", ",", "incomplete_inds", ")", ":", "\n", "        ", "data", "[", "\"texts\"", "]", "=", "next_word_inds", "[", "incomplete_inds", "]", ".", "unsqueeze", "(", "1", ")", "\n", "h1", "=", "data", "[", "\"state\"", "]", "[", "\"td_hidden\"", "]", "[", "0", "]", "[", "prev_word_inds", "[", "incomplete_inds", "]", "]", "\n", "c1", "=", "data", "[", "\"state\"", "]", "[", "\"td_hidden\"", "]", "[", "1", "]", "[", "prev_word_inds", "[", "incomplete_inds", "]", "]", "\n", "h2", "=", "data", "[", "\"state\"", "]", "[", "\"lm_hidden\"", "]", "[", "0", "]", "[", "prev_word_inds", "[", "incomplete_inds", "]", "]", "\n", "c2", "=", "data", "[", "\"state\"", "]", "[", "\"lm_hidden\"", "]", "[", "1", "]", "[", "prev_word_inds", "[", "incomplete_inds", "]", "]", "\n", "data", "[", "\"state\"", "]", "=", "{", "\"td_hidden\"", ":", "(", "h1", ",", "c1", ")", ",", "\"lm_hidden\"", ":", "(", "h2", ",", "c2", ")", "}", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.BeamSearch.__init__": [[269, 272], ["text_utils.TextDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "vocab", ",", "config", ")", ":", "\n", "        ", "super", "(", "BeamSearch", ",", "self", ")", ".", "__init__", "(", "vocab", ")", "\n", "self", ".", "_decode_size", "=", "config", "[", "\"inference\"", "]", "[", "\"params\"", "]", "[", "\"beam_length\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.BeamSearch.init_batch": [[273, 280], ["setattr", "text_utils.TextDecoder.init_batch", "sample_list.answers.new_zeros"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.BeamSearch.init_batch"], ["", "def", "init_batch", "(", "self", ",", "sample_list", ")", ":", "\n", "        ", "setattr", "(", "\n", "self", ",", "\n", "\"top_k_scores\"", ",", "\n", "sample_list", ".", "answers", ".", "new_zeros", "(", "(", "self", ".", "_decode_size", ",", "1", ")", ",", "dtype", "=", "torch", ".", "float", ")", ",", "\n", ")", "\n", "return", "super", "(", ")", ".", "init_batch", "(", "sample_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.BeamSearch.decode": [[281, 337], ["torch.nn.functional.log_softmax", "text_utils.BeamSearch.add_next_word", "text_utils.BeamSearch.find_complete_inds", "len", "text_utils.BeamSearch.top_k_scores[].unsqueeze", "text_utils.BeamSearch.update_data", "len", "text_utils.BeamSearch.top_k_scores.expand_as", "scores[].topk", "torch.nn.functional.log_softmax.view().topk", "len", "text_utils.BeamSearch._complete_seqs.extend", "text_utils.BeamSearch._complete_seqs_scores.extend", "text_utils.BeamSearch.seqs[].tolist", "torch.nn.functional.log_softmax.view"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.TextDecoder.add_next_word", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.TextDecoder.find_complete_inds", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.TextDecoder.update_data"], ["", "def", "decode", "(", "self", ",", "t", ",", "data", ",", "scores", ")", ":", "\n", "# Add predicted scores to top_k_scores", "\n", "        ", "scores", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "scores", "=", "self", ".", "top_k_scores", ".", "expand_as", "(", "scores", ")", "+", "scores", "\n", "\n", "# Find next top k scores and words. We flatten the scores tensor here", "\n", "# and get the top_k_scores and their indices top_k_words", "\n", "if", "t", "==", "0", ":", "\n", "            ", "self", ".", "top_k_scores", ",", "top_k_words", "=", "scores", "[", "0", "]", ".", "topk", "(", "\n", "self", ".", "_decode_size", ",", "0", ",", "True", ",", "True", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "top_k_scores", ",", "top_k_words", "=", "scores", ".", "view", "(", "-", "1", ")", ".", "topk", "(", "\n", "self", ".", "_decode_size", ",", "0", ",", "True", ",", "True", "\n", ")", "\n", "\n", "# Convert to vocab indices. top_k_words contain indices from a flattened", "\n", "# k x vocab_size tensor. To get prev_word_indices we divide top_k_words", "\n", "# by vocab_size to determine which index in the beam among k generated", "\n", "# the next top_k_word. To get next_word_indices we take top_k_words", "\n", "# modulo vocab_size index. For example :", "\n", "# vocab_size : 9491", "\n", "# top_k_words : [610, 7, 19592, 9529, 292]", "\n", "# prev_word_inds : [0, 0, 2, 1, 0]", "\n", "# next_word_inds : [610, 7, 610, 38, 292]", "\n", "", "prev_word_inds", "=", "top_k_words", "//", "self", ".", "_vocab_size", "\n", "next_word_inds", "=", "top_k_words", "%", "self", ".", "_vocab_size", "\n", "\n", "# Add new words to sequences", "\n", "self", ".", "seqs", "=", "self", ".", "add_next_word", "(", "self", ".", "seqs", ",", "prev_word_inds", ",", "next_word_inds", ")", "\n", "\n", "# Find completed sequences", "\n", "complete_inds", ",", "incomplete_inds", "=", "self", ".", "find_complete_inds", "(", "next_word_inds", ")", "\n", "\n", "# Add to completed sequences", "\n", "if", "len", "(", "complete_inds", ")", ">", "0", ":", "\n", "            ", "self", ".", "_complete_seqs", ".", "extend", "(", "self", ".", "seqs", "[", "complete_inds", "]", ".", "tolist", "(", ")", ")", "\n", "self", ".", "_complete_seqs_scores", ".", "extend", "(", "self", ".", "top_k_scores", "[", "complete_inds", "]", ")", "\n", "\n", "# Reduce beam length", "\n", "", "self", ".", "_decode_size", "-=", "len", "(", "complete_inds", ")", "\n", "\n", "# Proceed with incomplete sequences", "\n", "if", "self", ".", "_decode_size", "==", "0", ":", "\n", "            ", "return", "True", ",", "data", ",", "0", "\n", "\n", "", "self", ".", "seqs", "=", "self", ".", "seqs", "[", "incomplete_inds", "]", "\n", "self", ".", "top_k_scores", "=", "self", ".", "top_k_scores", "[", "incomplete_inds", "]", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "# TODO: Make the data update generic for any type of model", "\n", "# This is specific to BUTD model only.", "\n", "data", "=", "self", ".", "update_data", "(", "data", ",", "prev_word_inds", ",", "next_word_inds", ",", "incomplete_inds", ")", "\n", "\n", "next_beam_length", "=", "len", "(", "prev_word_inds", "[", "incomplete_inds", "]", ")", "\n", "\n", "return", "False", ",", "data", ",", "next_beam_length", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.BeamSearch.get_result": [[338, 345], ["len", "torch.FloatTensor().unsqueeze", "text_utils.BeamSearch._complete_seqs_scores.index", "torch.FloatTensor().unsqueeze", "max", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "get_result", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_complete_seqs_scores", ")", "==", "0", ":", "\n", "            ", "captions", "=", "torch", ".", "FloatTensor", "(", "[", "0", "]", "*", "5", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "i", "=", "self", ".", "_complete_seqs_scores", ".", "index", "(", "max", "(", "self", ".", "_complete_seqs_scores", ")", ")", "\n", "captions", "=", "torch", ".", "FloatTensor", "(", "self", ".", "_complete_seqs", "[", "i", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "return", "captions", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.NucleusSampling.__init__": [[369, 374], ["text_utils.TextDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ",", "vocab", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "vocab", ")", "\n", "self", ".", "_decode_size", "=", "1", "\n", "# Threshold for sum of probability", "\n", "self", ".", "_threshold", "=", "config", "[", "\"inference\"", "]", "[", "\"params\"", "]", "[", "\"sum_threshold\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.NucleusSampling.decode": [[375, 415], ["torch.nn.functional.softmax", "torch.div", "torch.tensor", "text_utils.NucleusSampling.add_next_word", "text_utils.NucleusSampling.find_complete_inds", "text_utils.NucleusSampling.update_data", "scores[].sort", "torch.nn.functional.softmax.view().sort", "len", "text_utils.NucleusSampling._complete_seqs.extend", "torch.multinomial", "text_utils.NucleusSampling.seqs[].tolist", "torch.nn.functional.softmax.view"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.TextDecoder.add_next_word", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.TextDecoder.find_complete_inds", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.TextDecoder.update_data"], ["", "def", "decode", "(", "self", ",", "t", ",", "data", ",", "scores", ")", ":", "\n", "# Convert scores to probabilities", "\n", "        ", "scores", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "scores", ",", "dim", "=", "1", ")", "\n", "# Sort scores in descending order and then select the top m elements having sum more than threshold.", "\n", "# We get the top_m_scores and their indices top_m_words", "\n", "if", "t", "==", "0", ":", "\n", "            ", "top_m_scores", ",", "top_m_words", "=", "scores", "[", "0", "]", ".", "sort", "(", "0", ",", "True", ")", "\n", "", "else", ":", "\n", "            ", "top_m_scores", ",", "top_m_words", "=", "scores", ".", "view", "(", "-", "1", ")", ".", "sort", "(", "0", ",", "True", ")", "\n", "\n", "", "last_index", "=", "0", "\n", "score_sum", "=", "0", "\n", "for", "score", "in", "top_m_scores", ":", "\n", "            ", "last_index", "+=", "1", "\n", "score_sum", "+=", "score", "\n", "if", "score_sum", ">=", "self", ".", "_threshold", ":", "\n", "                ", "break", "\n", "\n", "", "", "top_m_scores", "=", "torch", ".", "div", "(", "top_m_scores", "[", ":", "last_index", "]", ",", "score_sum", ")", "\n", "top_m_words", "=", "top_m_words", "[", ":", "last_index", "]", "\n", "\n", "# Zero value inside prev_word_inds because we are predicting a single stream of output.", "\n", "prev_word_ind", "=", "torch", ".", "tensor", "(", "[", "0", "]", ")", "\n", "# Get next word based on probabilities of top m words.", "\n", "next_word_ind", "=", "top_m_words", "[", "torch", ".", "multinomial", "(", "top_m_scores", ",", "1", ")", "]", "\n", "# Add next word to sequence", "\n", "\n", "self", ".", "seqs", "=", "self", ".", "add_next_word", "(", "self", ".", "seqs", ",", "prev_word_ind", ",", "next_word_ind", ")", "\n", "# Check if sequence is complete", "\n", "complete_inds", ",", "incomplete_inds", "=", "self", ".", "find_complete_inds", "(", "next_word_ind", ")", "\n", "# If sequence is complete then return", "\n", "if", "len", "(", "complete_inds", ")", ">", "0", ":", "\n", "            ", "self", ".", "_complete_seqs", ".", "extend", "(", "self", ".", "seqs", "[", "complete_inds", "]", ".", "tolist", "(", ")", ")", "\n", "return", "True", ",", "data", ",", "0", "\n", "\n", "", "self", ".", "seqs", "=", "self", ".", "seqs", "[", "incomplete_inds", "]", "\n", "\n", "data", "=", "self", ".", "update_data", "(", "data", ",", "prev_word_ind", ",", "next_word_ind", ",", "incomplete_inds", ")", "\n", "\n", "return", "False", ",", "data", ",", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.NucleusSampling.get_result": [[416, 422], ["len", "torch.FloatTensor().unsqueeze", "torch.FloatTensor().unsqueeze", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["None"], ["", "def", "get_result", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "_complete_seqs", ")", "==", "0", ":", "\n", "            ", "captions", "=", "torch", ".", "FloatTensor", "(", "[", "0", "]", "*", "5", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "captions", "=", "torch", ".", "FloatTensor", "(", "self", ".", "_complete_seqs", "[", "0", "]", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "return", "captions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.generate_ngrams": [[29, 45], ["zip", "range"], "function", ["None"], ["def", "generate_ngrams", "(", "tokens", ",", "n", "=", "1", ")", ":", "\n", "    ", "\"\"\"Generate ngrams for particular 'n' from a list of tokens\n    Parameters\n    ----------\n    tokens : List[str]\n        List of tokens for which the ngram are to be generated\n    n : int\n        n for which ngrams are to be generated\n    Returns\n    -------\n    List[str]\n        List of ngrams generated\n    \"\"\"", "\n", "shifted_tokens", "=", "(", "tokens", "[", "i", ":", "]", "for", "i", "in", "range", "(", "n", ")", ")", "\n", "tuple_ngrams", "=", "zip", "(", "*", "shifted_tokens", ")", "\n", "return", "(", "\" \"", ".", "join", "(", "i", ")", "for", "i", "in", "tuple_ngrams", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.generate_ngrams_range": [[47, 65], ["itertools.chain", "len", "text_utils.generate_ngrams", "range"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.generate_ngrams"], ["", "def", "generate_ngrams_range", "(", "tokens", ",", "ngram_range", "=", "(", "1", ",", "3", ")", ")", ":", "\n", "    ", "\"\"\"Generates and returns a list of ngrams for all n present in ngram_range.\n    Parameters\n    ----------\n    tokens : List[str]\n        List of string tokens for which ngram are to be generated\n    ngram_range : List[int]\n        List of 'n' for which ngrams are to be generated. For e.g. if\n        ngram_range = (1, 4) then it will returns 1grams, 2grams and 3grams\n    Returns\n    -------\n    List[str]\n        List of ngrams for each n in ngram_range.\n    \"\"\"", "\n", "assert", "len", "(", "ngram_range", ")", "==", "2", ",", "(", "\n", "\"'ngram_range' should be a tuple\"", "\" of two elements which is range of numbers\"", "\n", ")", "\n", "return", "chain", "(", "*", "(", "generate_ngrams", "(", "tokens", ",", "i", ")", "for", "i", "in", "range", "(", "*", "ngram_range", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.tokenize": [[67, 79], ["sentence.replace.lower", "regex.split", "sentence.replace.replace", "sentence.replace.replace", "t.strip", "len", "t.strip"], "function", ["None"], ["", "def", "tokenize", "(", "sentence", ",", "regex", "=", "SENTENCE_SPLIT_REGEX", ",", "keep", "=", "[", "\"'s\"", "]", ",", "remove", "=", "[", "\",\"", ",", "\"?\"", "]", ")", ":", "\n", "    ", "sentence", "=", "sentence", ".", "lower", "(", ")", "\n", "\n", "for", "token", "in", "keep", ":", "\n", "        ", "sentence", "=", "sentence", ".", "replace", "(", "token", ",", "\" \"", "+", "token", ")", "\n", "\n", "", "for", "token", "in", "remove", ":", "\n", "        ", "sentence", "=", "sentence", ".", "replace", "(", "token", ",", "\"\"", ")", "\n", "\n", "", "tokens", "=", "regex", ".", "split", "(", "sentence", ")", "\n", "tokens", "=", "[", "t", ".", "strip", "(", ")", "for", "t", "in", "tokens", "if", "len", "(", "t", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.word_tokenize": [[81, 89], ["word.replace.lower", "word.replace.replace", "word.replace.strip", "word.replace.replace"], "function", ["None"], ["", "def", "word_tokenize", "(", "word", ",", "remove", "=", "[", "\",\"", ",", "\"?\"", "]", ")", ":", "\n", "    ", "word", "=", "word", ".", "lower", "(", ")", "\n", "\n", "for", "item", "in", "remove", ":", "\n", "        ", "word", "=", "word", ".", "replace", "(", "item", ",", "\"\"", ")", "\n", "", "word", "=", "word", ".", "replace", "(", "\"'s\"", ",", "\" 's\"", ")", "\n", "\n", "return", "word", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.load_str_list": [[91, 96], ["open", "f.readlines", "l.strip"], "function", ["None"], ["", "def", "load_str_list", "(", "fname", ")", ":", "\n", "    ", "with", "open", "(", "fname", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "lines", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "lines", "]", "\n", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.__init__": [[9, 11], ["time.time"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "start", "=", "time", ".", "time", "(", ")", "*", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.get_current": [[12, 14], ["timer.Timer.get_time_hhmmss"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.get_time_hhmmss"], ["", "def", "get_current", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_time_hhmmss", "(", "self", ".", "start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.reset": [[15, 17], ["time.time"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "start", "=", "time", ".", "time", "(", ")", "*", "1000", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.get_time_since_start": [[18, 20], ["timer.Timer.get_time_hhmmss"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.get_time_hhmmss"], ["", "def", "get_time_since_start", "(", "self", ",", "format", "=", "None", ")", ":", "\n", "        ", "return", "self", ".", "get_time_hhmmss", "(", "self", ".", "start", ",", "format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.get_time_hhmmss": [[21, 53], ["divmod", "divmod", "divmod", "enumerate", "time_str.strip", "time.strftime", "len", "len", "time.time"], "methods", ["None"], ["", "def", "get_time_hhmmss", "(", "self", ",", "start", "=", "None", ",", "end", "=", "None", ",", "gap", "=", "None", ",", "format", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Calculates time since `start` and formats as a string.\n        \"\"\"", "\n", "if", "start", "is", "None", "and", "gap", "is", "None", ":", "\n", "\n", "            ", "if", "format", "is", "None", ":", "\n", "                ", "format", "=", "self", ".", "DEFAULT_TIME_FORMAT_DATE_TIME", "\n", "\n", "", "return", "time", ".", "strftime", "(", "format", ")", "\n", "\n", "", "if", "end", "is", "None", ":", "\n", "            ", "end", "=", "time", ".", "time", "(", ")", "*", "1000", "\n", "", "if", "gap", "is", "None", ":", "\n", "            ", "gap", "=", "end", "-", "start", "\n", "\n", "", "s", ",", "ms", "=", "divmod", "(", "gap", ",", "1000", ")", "\n", "m", ",", "s", "=", "divmod", "(", "s", ",", "60", ")", "\n", "h", ",", "m", "=", "divmod", "(", "m", ",", "60", ")", "\n", "\n", "if", "format", "is", "None", ":", "\n", "            ", "format", "=", "self", ".", "DEFAULT_TIME_FORMAT", "\n", "\n", "", "items", "=", "[", "ms", ",", "s", ",", "m", ",", "h", "]", "\n", "assert", "len", "(", "items", ")", "==", "len", "(", "format", ")", ",", "\"Format length should be same as items\"", "\n", "\n", "time_str", "=", "\"\"", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "items", ")", ":", "\n", "            ", "if", "item", "!=", "0", ":", "\n", "                ", "time_str", "=", "format", "[", "idx", "]", "%", "item", "+", "\" \"", "+", "time_str", "\n", "\n", "", "", "return", "time_str", ".", "strip", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.__init__": [[16, 83], ["pythia.utils.distributed_utils.is_main_process", "pythia.utils.timer.Timer", "pythia.utils.general.ckpt_name_from_core_args", "pythia.utils.general.foldername_from_config_override", "logger.Logger.timer.get_time_hhmmss", "os.path.join", "logger.Logger.config.get", "os.path.join", "tensorboardX.SummaryWriter", "os.path.join", "logging.captureWarnings", "logging.getLogger", "logging.getLogger", "logging.getLogger", "config[].get", "logger.Logger.logger.setLevel", "logger.Logger._file_only_logger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.StreamHandler.setFormatter", "logger.Logger.logger.addHandler", "logger.Logger._file_only_logger.addHandler", "logging.getLogger.addHandler", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logger.Logger.logger.addHandler", "logging.getLogger.addHandler", "set", "pythia.utils.general.ckpt_name_from_core_args", "os.path.exists", "os.makedirs", "print", "getattr", "getattr", "config[].get.upper", "config[].get.upper"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.is_main_process", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.ckpt_name_from_core_args", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.foldername_from_config_override", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.get_time_hhmmss", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.ckpt_name_from_core_args", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "logger", "=", "None", "\n", "self", ".", "summary_writer", "=", "None", "\n", "self", ".", "_is_main_process", "=", "is_main_process", "(", ")", "\n", "\n", "self", ".", "timer", "=", "Timer", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "save_dir", "=", "config", ".", "training_parameters", ".", "save_dir", "\n", "self", ".", "log_folder", "=", "ckpt_name_from_core_args", "(", "config", ")", "\n", "self", ".", "log_folder", "+=", "foldername_from_config_override", "(", "config", ")", "\n", "time_format", "=", "\"%Y-%m-%dT%H:%M:%S\"", "\n", "self", ".", "log_filename", "=", "ckpt_name_from_core_args", "(", "config", ")", "+", "\"_\"", "\n", "self", ".", "log_filename", "+=", "self", ".", "timer", ".", "get_time_hhmmss", "(", "None", ",", "format", "=", "time_format", ")", "\n", "self", ".", "log_filename", "+=", "\".log\"", "\n", "\n", "self", ".", "log_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "self", ".", "log_folder", ",", "\"logs\"", ")", "\n", "\n", "arg_log_dir", "=", "self", ".", "config", ".", "get", "(", "\"log_dir\"", ",", "None", ")", "\n", "if", "arg_log_dir", ":", "\n", "            ", "self", ".", "log_folder", "=", "arg_log_dir", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "log_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "log_folder", ")", "\n", "\n", "", "tensorboard_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_folder", ",", "\"tensorboard\"", ")", "\n", "self", ".", "summary_writer", "=", "SummaryWriter", "(", "tensorboard_folder", ")", "\n", "\n", "self", ".", "log_filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "log_folder", ",", "self", ".", "log_filename", ")", "\n", "\n", "if", "self", ".", "_is_main_process", ":", "\n", "            ", "print", "(", "\"Logging to:\"", ",", "self", ".", "log_filename", ")", "\n", "\n", "", "logging", ".", "captureWarnings", "(", "True", ")", "\n", "\n", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "self", ".", "_file_only_logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "warnings_logger", "=", "logging", ".", "getLogger", "(", "\"py.warnings\"", ")", "\n", "\n", "# Set level", "\n", "level", "=", "config", "[", "\"training_parameters\"", "]", ".", "get", "(", "\"logger_level\"", ",", "\"info\"", ")", "\n", "self", ".", "logger", ".", "setLevel", "(", "getattr", "(", "logging", ",", "level", ".", "upper", "(", ")", ")", ")", "\n", "self", ".", "_file_only_logger", ".", "setLevel", "(", "getattr", "(", "logging", ",", "level", ".", "upper", "(", ")", ")", ")", "\n", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\n", "\"%(asctime)s %(levelname)s: %(message)s\"", ",", "datefmt", "=", "\"%Y-%m-%dT%H:%M:%S\"", "\n", ")", "\n", "\n", "# Add handler to file", "\n", "channel", "=", "logging", ".", "FileHandler", "(", "filename", "=", "self", ".", "log_filename", ",", "mode", "=", "\"a\"", ")", "\n", "channel", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "self", ".", "logger", ".", "addHandler", "(", "channel", ")", "\n", "self", ".", "_file_only_logger", ".", "addHandler", "(", "channel", ")", "\n", "warnings_logger", ".", "addHandler", "(", "channel", ")", "\n", "\n", "# Add handler to stdout", "\n", "channel", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "channel", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "self", ".", "logger", ".", "addHandler", "(", "channel", ")", "\n", "warnings_logger", ".", "addHandler", "(", "channel", ")", "\n", "\n", "should_not_log", "=", "self", ".", "config", "[", "\"training_parameters\"", "]", "[", "\"should_not_log\"", "]", "\n", "self", ".", "should_log", "=", "not", "should_not_log", "\n", "\n", "# Single log wrapper map", "\n", "self", ".", "_single_log_map", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.__del__": [[84, 87], ["getattr", "logger.Logger.summary_writer.close"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.vqa_html_writer.vqa_html_writer.close"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "getattr", "(", "self", ",", "\"summary_writer\"", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "self", ".", "summary_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write": [[88, 106], ["hasattr", "print", "logger.Logger.logger.error", "str", "getattr", "str", "getattr", "str"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print"], ["", "", "def", "write", "(", "self", ",", "x", ",", "level", "=", "\"info\"", ",", "donot_print", "=", "False", ",", "log_all", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "logger", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "if", "log_all", "is", "False", "and", "not", "self", ".", "_is_main_process", ":", "\n", "            ", "return", "\n", "\n", "# if it should not log then just print it", "\n", "", "if", "self", ".", "should_log", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "logger", ",", "level", ")", ":", "\n", "                ", "if", "donot_print", ":", "\n", "                    ", "getattr", "(", "self", ".", "_file_only_logger", ",", "level", ")", "(", "str", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "                    ", "getattr", "(", "self", ".", "logger", ",", "level", ")", "(", "str", "(", "x", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "logger", ".", "error", "(", "\"Unknown log level type: %s\"", "%", "level", ")", "\n", "", "", "else", ":", "\n", "            ", "print", "(", "str", "(", "x", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.single_write": [[107, 112], ["logger.Logger.write"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "", "def", "single_write", "(", "self", ",", "x", ",", "level", "=", "\"info\"", ")", ":", "\n", "        ", "if", "x", "+", "\"_\"", "+", "level", "in", "self", ".", "_single_log_map", ":", "\n", "            ", "return", "\n", "", "else", ":", "\n", "            ", "self", ".", "write", "(", "x", ",", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger._should_log_tensorboard": [[113, 121], ["None"], "methods", ["None"], ["", "", "def", "_should_log_tensorboard", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "summary_writer", "is", "None", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "not", "self", ".", "_is_main_process", ":", "\n", "            ", "return", "False", "\n", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.add_scalar": [[122, 127], ["logger.Logger.summary_writer.add_scalar", "logger.Logger._should_log_tensorboard"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger._should_log_tensorboard"], ["", "def", "add_scalar", "(", "self", ",", "key", ",", "value", ",", "iteration", ")", ":", "\n", "        ", "if", "not", "self", ".", "_should_log_tensorboard", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "summary_writer", ".", "add_scalar", "(", "key", ",", "value", ",", "iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.add_scalars": [[128, 134], ["scalar_dict.items", "logger.Logger._should_log_tensorboard", "logger.Logger.summary_writer.add_scalar"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger._should_log_tensorboard", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.add_scalar"], ["", "def", "add_scalars", "(", "self", ",", "scalar_dict", ",", "iteration", ")", ":", "\n", "        ", "if", "not", "self", ".", "_should_log_tensorboard", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "for", "key", ",", "val", "in", "scalar_dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "summary_writer", ".", "add_scalar", "(", "key", ",", "val", ",", "iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.add_histogram_for_model": [[135, 142], ["model.named_parameters", "logger.Logger._should_log_tensorboard", "param.clone().cpu().data.numpy", "logger.Logger.summary_writer.add_histogram", "param.clone().cpu", "param.clone"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger._should_log_tensorboard"], ["", "", "def", "add_histogram_for_model", "(", "self", ",", "model", ",", "iteration", ")", ":", "\n", "        ", "if", "not", "self", ".", "_should_log_tensorboard", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "np_param", "=", "param", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "self", ".", "summary_writer", ".", "add_histogram", "(", "name", ",", "np_param", ",", "iteration", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.early_stopping.EarlyStopping.__init__": [[16, 39], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "checkpoint_instance", ",", "\n", "monitored_metric", "=", "\"total_loss\"", ",", "\n", "patience", "=", "1000", ",", "\n", "minimize", "=", "False", ",", "\n", "should_stop", "=", "True", ",", "\n", ")", ":", "\n", "        ", "self", ".", "minimize", "=", "minimize", "\n", "self", ".", "patience", "=", "patience", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "checkpoint", "=", "checkpoint_instance", "\n", "self", ".", "monitored_metric", "=", "monitored_metric", "\n", "\n", "if", "\"val\"", "not", "in", "self", ".", "monitored_metric", ":", "\n", "            ", "self", ".", "monitored_metric", "=", "\"val/{}\"", ".", "format", "(", "self", ".", "monitored_metric", ")", "\n", "\n", "", "self", ".", "best_monitored_value", "=", "-", "np", ".", "inf", "if", "not", "minimize", "else", "np", ".", "inf", "\n", "self", ".", "best_monitored_iteration", "=", "0", "\n", "self", ".", "should_stop", "=", "should_stop", "\n", "self", ".", "activated", "=", "False", "\n", "self", ".", "metric", "=", "self", ".", "monitored_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.early_stopping.EarlyStopping.__call__": [[40, 83], ["meter.meters.get", "isinstance", "pythia.utils.distributed_utils.is_main_process", "ValueError", "value.item.item.item", "early_stopping.EarlyStopping.checkpoint.save", "early_stopping.EarlyStopping.checkpoint.save", "early_stopping.EarlyStopping.checkpoint.restore", "early_stopping.EarlyStopping.checkpoint.finalize"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.is_main_process", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.restore", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.finalize"], ["", "def", "__call__", "(", "self", ",", "iteration", ",", "meter", ")", ":", "\n", "        ", "\"\"\"\n        Method to be called everytime you need to check whether to\n        early stop or not\n        Arguments:\n            iteration {number}: Current iteration number\n        Returns:\n            bool -- Tells whether early stopping occurred or not\n        \"\"\"", "\n", "if", "not", "is_main_process", "(", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "value", "=", "meter", ".", "meters", ".", "get", "(", "self", ".", "monitored_metric", ",", "None", ")", "\n", "if", "value", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Metric used for early stopping ({}) is not \"", "\n", "\"present in meter.\"", ".", "format", "(", "self", ".", "monitored_metric", ")", "\n", ")", "\n", "\n", "", "value", "=", "value", ".", "global_avg", "\n", "\n", "if", "isinstance", "(", "value", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "value", "=", "value", ".", "item", "(", ")", "\n", "\n", "", "if", "(", "self", ".", "minimize", "and", "value", "<", "self", ".", "best_monitored_value", ")", "or", "(", "\n", "not", "self", ".", "minimize", "and", "value", ">", "self", ".", "best_monitored_value", "\n", ")", ":", "\n", "            ", "self", ".", "best_monitored_value", "=", "value", "\n", "self", ".", "best_monitored_iteration", "=", "iteration", "\n", "self", ".", "checkpoint", ".", "save", "(", "iteration", ",", "update_best", "=", "True", ")", "\n", "\n", "", "elif", "self", ".", "best_monitored_iteration", "+", "self", ".", "patience", "<", "iteration", ":", "\n", "            ", "self", ".", "activated", "=", "True", "\n", "if", "self", ".", "should_stop", "is", "True", ":", "\n", "                ", "self", ".", "checkpoint", ".", "restore", "(", ")", "\n", "self", ".", "checkpoint", ".", "finalize", "(", ")", "\n", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "checkpoint", ".", "save", "(", "iteration", ",", "update_best", "=", "False", ")", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.early_stopping.EarlyStopping.is_activated": [[84, 86], ["None"], "methods", ["None"], ["", "def", "is_activated", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "activated", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.early_stopping.EarlyStopping.init_from_checkpoint": [[87, 93], ["None"], "methods", ["None"], ["", "def", "init_from_checkpoint", "(", "self", ",", "load", ")", ":", "\n", "        ", "if", "\"best_iteration\"", "in", "load", ":", "\n", "            ", "self", ".", "best_monitored_iteration", "=", "load", "[", "\"best_iteration\"", "]", "\n", "\n", "", "if", "\"best_metric_value\"", "in", "load", ":", "\n", "            ", "self", ".", "best_monitored_value", "=", "load", "[", "\"best_metric_value\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.early_stopping.EarlyStopping.get_info": [[94, 98], ["None"], "methods", ["None"], ["", "", "def", "get_info", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "\"best iteration\"", ":", "self", ".", "best_monitored_iteration", ",", "\n", "\"best {}\"", ".", "format", "(", "self", ".", "metric", ")", ":", "\"{:.6f}\"", ".", "format", "(", "self", ".", "best_monitored_value", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.build_utils.build_trainer": [[10, 37], ["pythia.utils.configuration.Configuration", "pythia.utils.configuration.Configuration.override_with_cmd_config", "pythia.utils.configuration.Configuration.override_with_cmd_opts", "pythia.utils.configuration.Configuration.update_with_args", "pythia.utils.configuration.Configuration.freeze", "pythia.utils.configuration.Configuration.get_config", "pythia.common.registry.registry.register", "pythia.common.registry.registry.register", "pythia.common.registry.registry.get_trainer_class", "registry.get_trainer_class.", "setattr"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.override_with_cmd_config", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.override_with_cmd_opts", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.update_with_args", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.freeze", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.get_config", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_trainer_class"], ["def", "build_trainer", "(", "args", ",", "*", "rest", ",", "**", "kwargs", ")", ":", "\n", "    ", "configuration", "=", "Configuration", "(", "args", ".", "config", ")", "\n", "\n", "# Update with the config override if passed", "\n", "configuration", ".", "override_with_cmd_config", "(", "args", ".", "config_override", ")", "\n", "\n", "# Now, update with opts args that were passed", "\n", "configuration", ".", "override_with_cmd_opts", "(", "args", ".", "opts", ")", "\n", "\n", "# Finally, update with args that were specifically passed", "\n", "# as arguments", "\n", "#pdb.set_trace()", "\n", "configuration", ".", "update_with_args", "(", "args", ")", "\n", "configuration", ".", "freeze", "(", ")", "\n", "\n", "config", "=", "configuration", ".", "get_config", "(", ")", "\n", "registry", ".", "register", "(", "\"config\"", ",", "config", ")", "\n", "registry", ".", "register", "(", "\"configuration\"", ",", "configuration", ")", "\n", "\n", "trainer_type", "=", "config", ".", "training_parameters", ".", "trainer", "\n", "trainer_cls", "=", "registry", ".", "get_trainer_class", "(", "trainer_type", ")", "\n", "trainer_obj", "=", "trainer_cls", "(", "config", ")", "\n", "\n", "# Set args as an attribute for future use", "\n", "setattr", "(", "trainer_obj", ",", "'args'", ",", "args", ")", "\n", "\n", "return", "trainer_obj", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.build_utils.build_model": [[39, 53], ["pythia.common.registry.registry.get_model_class", "registry.get_model_class.", "hasattr", "pythia.common.registry.registry.get().write", "model_class.build", "model_class.init_losses_and_metrics", "pythia.common.registry.registry.get"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_model_class", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.build", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.base_model.BaseModel.init_losses_and_metrics", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "def", "build_model", "(", "config", ")", ":", "\n", "    ", "model_name", "=", "config", ".", "model", "\n", "\n", "model_class", "=", "registry", ".", "get_model_class", "(", "model_name", ")", "\n", "\n", "if", "model_class", "is", "None", ":", "\n", "        ", "registry", ".", "get", "(", "\"writer\"", ")", ".", "write", "(", "\"No model registered for name: %s\"", "%", "model_name", ")", "\n", "", "model", "=", "model_class", "(", "config", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "\"build\"", ")", ":", "\n", "        ", "model", ".", "build", "(", ")", "\n", "model", ".", "init_losses_and_metrics", "(", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.build_utils.build_optimizer": [[55, 85], ["getattr", "hasattr", "pythia.utils.general.get_optimizer_parameters", "registry.get_optimizer_class.", "hasattr", "ValueError", "hasattr", "warnings.warn", "getattr", "pythia.common.registry.registry.get_optimizer_class", "ValueError"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.get_optimizer_parameters", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_optimizer_class"], ["", "def", "build_optimizer", "(", "model", ",", "config", ")", ":", "\n", "    ", "optimizer_config", "=", "config", ".", "optimizer_attributes", "\n", "if", "not", "hasattr", "(", "optimizer_config", ",", "\"type\"", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"Optimizer attributes must have a 'type' key \"", "\n", "\"specifying the type of optimizer. \"", "\n", "\"(Custom or PyTorch)\"", "\n", ")", "\n", "", "optimizer_type", "=", "optimizer_config", ".", "type", "\n", "\n", "if", "not", "hasattr", "(", "optimizer_config", ",", "\"params\"", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "\n", "\"optimizer attributes has no params defined, defaulting to {}.\"", "\n", ")", "\n", "\n", "", "params", "=", "getattr", "(", "optimizer_config", ",", "\"params\"", ",", "{", "}", ")", "\n", "\n", "if", "hasattr", "(", "torch", ".", "optim", ",", "optimizer_type", ")", ":", "\n", "        ", "optimizer_class", "=", "getattr", "(", "torch", ".", "optim", ",", "optimizer_type", ")", "\n", "", "else", ":", "\n", "        ", "optimizer_class", "=", "registry", ".", "get_optimizer_class", "(", "optimizer_type", ")", "\n", "if", "optimizer_class", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"No optimizer class of type {} present in \"", "\n", "\"either torch or registered to registry\"", "\n", ")", "\n", "\n", "", "", "parameters", "=", "get_optimizer_parameters", "(", "model", ",", "config", ")", "\n", "optimizer", "=", "optimizer_class", "(", "parameters", ",", "**", "params", ")", "\n", "return", "optimizer", "\n", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.__init__": [[16, 51], ["pythia.utils.general.ckpt_name_from_core_args", "pythia.common.registry.registry.get", "hasattr", "os.path.join", "os.path.join", "os.path.join", "checkpoint.Checkpoint.save_config", "pythia.utils.general.updir", "git.Repo", "os.path.exists", "os.makedirs", "os.path.abspath", "checkpoint.Checkpoint.trainer.model.get_ckpt_name"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.ckpt_name_from_core_args", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save_config", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.updir"], ["    ", "def", "__init__", "(", "self", ",", "trainer", ")", ":", "\n", "        ", "\"\"\"\n        Generates a path for saving model which can also be used for resuming\n        from a checkpoint.\n        \"\"\"", "\n", "self", ".", "trainer", "=", "trainer", "\n", "\n", "self", ".", "config", "=", "self", ".", "trainer", ".", "config", "\n", "self", ".", "save_dir", "=", "self", ".", "config", ".", "training_parameters", ".", "save_dir", "\n", "self", ".", "model_name", "=", "self", ".", "config", ".", "model", "\n", "\n", "self", ".", "ckpt_foldername", "=", "ckpt_name_from_core_args", "(", "self", ".", "config", ")", "\n", "#pdb.set_trace()", "\n", "#self.ckpt_foldername += foldername_from_config_override(self.trainer.args)", "\n", "\n", "self", ".", "device", "=", "registry", ".", "get", "(", "\"current_device\"", ")", "\n", "\n", "self", ".", "ckpt_prefix", "=", "\"\"", "\n", "\n", "if", "hasattr", "(", "self", ".", "trainer", ".", "model", ",", "\"get_ckpt_name\"", ")", ":", "\n", "            ", "self", ".", "ckpt_prefix", "=", "self", ".", "trainer", ".", "model", ".", "get_ckpt_name", "(", ")", "+", "\"_\"", "\n", "\n", "", "self", ".", "config", "[", "\"log_foldername\"", "]", "=", "self", ".", "ckpt_foldername", "\n", "self", ".", "ckpt_foldername", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "self", ".", "ckpt_foldername", ")", "\n", "self", ".", "pth_filepath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "ckpt_foldername", ",", "self", ".", "ckpt_prefix", "+", "self", ".", "model_name", "+", "\"_final.pth\"", "\n", ")", "\n", "\n", "self", ".", "models_foldername", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_foldername", ",", "\"models\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "models_foldername", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "models_foldername", ")", "\n", "\n", "", "self", ".", "save_config", "(", ")", "\n", "self", ".", "repo_path", "=", "updir", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ",", "n", "=", "3", ")", "\n", "self", ".", "repo", "=", "git", ".", "Repo", "(", "self", ".", "repo_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save_config": [[52, 59], ["os.path.join", "open", "checkpoint.Checkpoint.config.pop", "f.write", "str"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "def", "save_config", "(", "self", ")", ":", "\n", "        ", "cfg_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_foldername", ",", "\"config.yaml\"", ")", "\n", "with", "open", "(", "cfg_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "# Pop out config_override if present to remove clutter in", "\n", "# saved configuration yaml file", "\n", "            ", "self", ".", "config", ".", "pop", "(", "\"config_override\"", ",", "None", ")", "\n", "f", ".", "write", "(", "str", "(", "self", ".", "config", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.load_state_dict": [[60, 80], ["os.path.join", "os.path.exists", "os.path.exists", "checkpoint.Checkpoint._load", "RuntimeError", "checkpoint.Checkpoint._load", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.builder.CLEVRBuilder._load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.builder.CLEVRBuilder._load"], ["", "", "def", "load_state_dict", "(", "self", ")", ":", "\n", "        ", "tp", "=", "self", ".", "config", ".", "training_parameters", "\n", "if", "tp", ".", "resume_file", "is", "not", "None", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "tp", ".", "resume_file", ")", ":", "\n", "                ", "self", ".", "_load", "(", "tp", ".", "resume_file", ")", "\n", "return", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"{} doesn't exist\"", ".", "format", "(", "tp", ".", "resume_file", ")", ")", "\n", "\n", "", "", "ckpt_filepath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "ckpt_foldername", ",", "self", ".", "ckpt_prefix", "+", "\"best.ckpt\"", "\n", ")", "\n", "\n", "if", "tp", ".", "resume", "is", "True", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "ckpt_filepath", ")", ":", "\n", "                ", "self", ".", "_load", "(", "ckpt_filepath", ")", "\n", "", "else", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "\"Tried to resume but checkpoint filepath {} \"", "\n", "\"is not present. Skipping.\"", ".", "format", "(", "ckpt_filepath", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint._load": [[82, 156], ["checkpoint.Checkpoint.trainer.writer.write", "checkpoint.Checkpoint._torch_load", "pythia.common.registry.registry.get", "len", "checkpoint.Checkpoint.trainer.model.load_state_dict", "checkpoint.Checkpoint.trainer.early_stopping.init_from_checkpoint", "checkpoint.Checkpoint.trainer.writer.write", "model.state_dict", "pretrained_mapping.items", "checkpoint.Checkpoint.trainer.writer.write", "pretrained_mapping.items", "checkpoint.Checkpoint.trainer.optimizer.load_state_dict", "warnings.warn", "pythia.common.registry.registry.register", "pythia.common.registry.registry.register", "attr.startswith", "attr.replace", "attr.replace", "checkpoint.Checkpoint.trainer.writer.write", "own_state[].copy_", "attr.replace", "own_attr.replace"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint._torch_load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.load_state_dict", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.early_stopping.EarlyStopping.init_from_checkpoint", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.load_state_dict", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "", "", "def", "_load", "(", "self", ",", "file", ")", ":", "\n", "        ", "self", ".", "trainer", ".", "writer", ".", "write", "(", "\"Loading checkpoint\"", ")", "\n", "ckpt", "=", "self", ".", "_torch_load", "(", "file", ")", "\n", "\n", "data_parallel", "=", "registry", ".", "get", "(", "\"data_parallel\"", ")", "\n", "\n", "if", "\"model\"", "in", "ckpt", ":", "\n", "            ", "ckpt_model", "=", "ckpt", "[", "\"model\"", "]", "\n", "", "else", ":", "\n", "            ", "ckpt_model", "=", "ckpt", "\n", "ckpt", "=", "{", "\"model\"", ":", "ckpt", "}", "\n", "\n", "", "pretrained_mapping", "=", "self", ".", "config", ".", "training_parameters", ".", "pretrained_mapping", "\n", "\n", "if", "not", "self", ".", "config", ".", "training_parameters", ".", "load_pretrained", ":", "\n", "            ", "pretrained_mapping", "=", "{", "}", "\n", "\n", "", "new_dict", "=", "{", "}", "\n", "\n", "# TODO: Move to separate function", "\n", "for", "attr", "in", "ckpt_model", ":", "\n", "            ", "if", "\"fa_history\"", "in", "attr", ":", "\n", "                ", "new_dict", "[", "attr", ".", "replace", "(", "\"fa_history\"", ",", "\"fa_context\"", ")", "]", "=", "ckpt_model", "[", "attr", "]", "\n", "", "elif", "data_parallel", "is", "False", "and", "attr", ".", "startswith", "(", "\"module.\"", ")", ":", "\n", "# In case the ckpt was actually a data parallel model", "\n", "# replace first module. from dataparallel with empty string", "\n", "                ", "new_dict", "[", "attr", ".", "replace", "(", "\"module.\"", ",", "\"\"", ",", "1", ")", "]", "=", "ckpt_model", "[", "attr", "]", "\n", "", "else", ":", "\n", "                ", "new_dict", "[", "attr", "]", "=", "ckpt_model", "[", "attr", "]", "\n", "\n", "", "", "if", "len", "(", "pretrained_mapping", ".", "items", "(", ")", ")", "==", "0", ":", "\n", "            ", "final_dict", "=", "new_dict", "\n", "\n", "self", ".", "trainer", ".", "model", ".", "load_state_dict", "(", "final_dict", ")", "\n", "\n", "if", "\"optimizer\"", "in", "ckpt", ":", "\n", "                ", "self", ".", "trainer", ".", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "\"optimizer\"", "]", ")", "\n", "", "else", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "\"'optimizer' key is not present in the \"", "\n", "\"checkpoint asked to be loaded. Skipping.\"", "\n", ")", "\n", "\n", "", "self", ".", "trainer", ".", "early_stopping", ".", "init_from_checkpoint", "(", "ckpt", ")", "\n", "\n", "self", ".", "trainer", ".", "writer", ".", "write", "(", "\"Checkpoint loaded\"", ")", "\n", "\n", "if", "\"best_iteration\"", "in", "ckpt", ":", "\n", "                ", "self", ".", "trainer", ".", "current_iteration", "=", "ckpt", "[", "\"best_iteration\"", "]", "\n", "registry", ".", "register", "(", "\"current_iteration\"", ",", "self", ".", "trainer", ".", "current_iteration", ")", "\n", "\n", "", "if", "\"best_epoch\"", "in", "ckpt", ":", "\n", "                ", "self", ".", "trainer", ".", "current_epoch", "=", "ckpt", "[", "\"best_epoch\"", "]", "\n", "registry", ".", "register", "(", "\"current_epoch\"", ",", "self", ".", "trainer", ".", "current_epoch", ")", "\n", "", "", "else", ":", "\n", "            ", "final_dict", "=", "{", "}", "\n", "model", "=", "self", ".", "trainer", ".", "model", "\n", "own_state", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "for", "key", ",", "value", "in", "pretrained_mapping", ".", "items", "(", ")", ":", "\n", "                ", "key", "+=", "\".\"", "\n", "value", "+=", "\".\"", "\n", "for", "attr", "in", "new_dict", ":", "\n", "                    ", "for", "own_attr", "in", "own_state", ":", "\n", "                        ", "if", "(", "\n", "key", "in", "attr", "\n", "and", "value", "in", "own_attr", "\n", "and", "attr", ".", "replace", "(", "key", ",", "\"\"", ")", "==", "own_attr", ".", "replace", "(", "value", ",", "\"\"", ")", "\n", ")", ":", "\n", "                            ", "self", ".", "trainer", ".", "writer", ".", "write", "(", "\n", "\"Copying \"", "+", "attr", "+", "\" \"", "+", "own_attr", "\n", ")", "\n", "own_state", "[", "own_attr", "]", ".", "copy_", "(", "new_dict", "[", "attr", "]", ")", "\n", "", "", "", "", "self", ".", "trainer", ".", "writer", ".", "write", "(", "\"Pretrained model loaded\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint._load_state_dict_mapping": [[157, 176], ["pythia.common.registry.registry.get", "getattr().load_state_dict", "attr_mapping.pop", "getattr", "key.replace"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.load_state_dict"], ["", "", "def", "_load_state_dict_mapping", "(", "self", ",", "ckpt_model", ")", ":", "\n", "        ", "model", "=", "self", ".", "trainer", ".", "model", "\n", "attr_mapping", "=", "{", "\n", "\"image_feature_encoders\"", ":", "\"img_feat_encoders\"", ",", "\n", "\"image_feature_embeddings_list\"", ":", "\"img_embeddings_list\"", ",", "\n", "\"image_text_multi_modal_combine_layer\"", ":", "\"multi_modal_combine_layer\"", ",", "\n", "\"text_embeddings\"", ":", "\"text_embeddings\"", ",", "\n", "\"classifier\"", ":", "\"classifier\"", ",", "\n", "}", "\n", "\n", "data_parallel", "=", "registry", ".", "get", "(", "\"data_parallel\"", ")", "\n", "\n", "if", "not", "data_parallel", ":", "\n", "            ", "for", "key", "in", "attr_mapping", ":", "\n", "                ", "attr_mapping", "[", "key", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", "]", "=", "attr_mapping", "[", "key", "]", "\n", "attr_mapping", ".", "pop", "(", "key", ")", "\n", "\n", "", "", "for", "key", "in", "attr_mapping", ":", "\n", "            ", "getattr", "(", "model", ",", "key", ")", ".", "load_state_dict", "(", "ckpt_model", "[", "attr_mapping", "[", "key", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint._torch_load": [[177, 182], ["str", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["", "", "def", "_torch_load", "(", "self", ",", "file", ")", ":", "\n", "        ", "if", "\"cuda\"", "in", "str", "(", "self", ".", "device", ")", ":", "\n", "            ", "return", "torch", ".", "load", "(", "file", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "load", "(", "file", ",", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint._get_vcs_fields": [[183, 203], ["checkpoint.Checkpoint.repo.git.diff"], "methods", ["None"], ["", "", "def", "_get_vcs_fields", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a dict with git fields of the current repository\n\n           To reproduce an experiment directly from a checkpoint\n\n           1) Export `config` key as a yaml\n           2) Clone repository and checkout at given commit on given branch\n           3) Any local change (diff) while running the experiment is stored\n              in the value with key `git/diff`, output the diff to a `path.diff`\n              file and apply the patch to the current state by simply\n\n                           `patch -p0 < path.diff`\n        \"\"\"", "\n", "\n", "return", "{", "\n", "\"git/branch\"", ":", "self", ".", "repo", ".", "active_branch", ".", "name", ",", "\n", "\"git/commit_hash\"", ":", "self", ".", "repo", ".", "head", ".", "commit", ".", "name_rev", ",", "\n", "\"git/commit_author\"", ":", "self", ".", "repo", ".", "head", ".", "commit", ".", "author", ".", "name", ",", "\n", "\"git/commit_message\"", ":", "self", ".", "repo", ".", "head", ".", "commit", ".", "message", ",", "\n", "\"git/diff\"", ":", "self", ".", "repo", ".", "git", ".", "diff", "(", "\"--no-prefix\"", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save": [[205, 235], ["os.path.join", "os.path.join", "checkpoint.Checkpoint._get_vcs_fields", "ckpt.update", "torch.save", "pythia.utils.distributed_utils.is_main_process", "checkpoint.Checkpoint.trainer.model.state_dict", "checkpoint.Checkpoint.trainer.optimizer.state_dict", "torch.save"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint._get_vcs_fields", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.is_main_process", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save"], ["", "def", "save", "(", "self", ",", "iteration", ",", "update_best", "=", "False", ")", ":", "\n", "# Only save in main process", "\n", "        ", "if", "not", "is_main_process", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "ckpt_filepath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "models_foldername", ",", "\"model_%d.ckpt\"", "%", "iteration", "\n", ")", "\n", "best_ckpt_filepath", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "ckpt_foldername", ",", "self", ".", "ckpt_prefix", "+", "\"best.ckpt\"", "\n", ")", "\n", "\n", "best_iteration", "=", "self", ".", "trainer", ".", "early_stopping", ".", "best_monitored_iteration", "\n", "best_metric", "=", "self", ".", "trainer", ".", "early_stopping", ".", "best_monitored_value", "\n", "\n", "ckpt", "=", "{", "\n", "\"model\"", ":", "self", ".", "trainer", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "self", ".", "trainer", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"best_iteration\"", ":", "best_iteration", ",", "\n", "\"best_metric_value\"", ":", "best_metric", ",", "\n", "\"config\"", ":", "self", ".", "config", ",", "\n", "}", "\n", "\n", "git_metadata_dict", "=", "self", ".", "_get_vcs_fields", "(", ")", "\n", "ckpt", ".", "update", "(", "git_metadata_dict", ")", "\n", "\n", "torch", ".", "save", "(", "ckpt", ",", "ckpt_filepath", ")", "\n", "\n", "if", "update_best", ":", "\n", "            ", "torch", ".", "save", "(", "ckpt", ",", "best_ckpt_filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.restore": [[236, 244], ["checkpoint.Checkpoint.trainer.writer.write", "os.path.join", "os.path.exists", "checkpoint.Checkpoint._torch_load", "checkpoint.Checkpoint.trainer.model.load_state_dict", "checkpoint.Checkpoint.trainer.optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint._torch_load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.load_state_dict", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.load_state_dict"], ["", "", "def", "restore", "(", "self", ")", ":", "\n", "        ", "self", ".", "trainer", ".", "writer", ".", "write", "(", "\"Restoring checkpoint\"", ")", "\n", "best_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "ckpt_foldername", ",", "self", ".", "ckpt_prefix", "+", "\"best.ckpt\"", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "best_path", ")", ":", "\n", "            ", "ckpt", "=", "self", ".", "_torch_load", "(", "best_path", ")", "\n", "self", ".", "trainer", ".", "model", ".", "load_state_dict", "(", "ckpt", "[", "\"model\"", "]", ")", "\n", "self", ".", "trainer", ".", "optimizer", ".", "load_state_dict", "(", "ckpt", "[", "\"optimizer\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.finalize": [[245, 247], ["torch.save", "checkpoint.Checkpoint.trainer.model.state_dict"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save"], ["", "", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "torch", ".", "save", "(", "self", ".", "trainer", ".", "model", ".", "state_dict", "(", ")", ",", "self", ".", "pth_filepath", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.lr_lambda_update": [[18, 28], ["bisect.bisect", "pow", "float", "float"], "function", ["None"], ["def", "lr_lambda_update", "(", "i_iter", ",", "cfg", ")", ":", "\n", "    ", "if", "(", "\n", "cfg", "[", "\"training_parameters\"", "]", "[", "\"use_warmup\"", "]", "is", "True", "\n", "and", "i_iter", "<=", "cfg", "[", "\"training_parameters\"", "]", "[", "\"warmup_iterations\"", "]", "\n", ")", ":", "\n", "        ", "alpha", "=", "float", "(", "i_iter", ")", "/", "float", "(", "cfg", "[", "\"training_parameters\"", "]", "[", "\"warmup_iterations\"", "]", ")", "\n", "return", "cfg", "[", "\"training_parameters\"", "]", "[", "\"warmup_factor\"", "]", "*", "(", "1.0", "-", "alpha", ")", "+", "alpha", "\n", "", "else", ":", "\n", "        ", "idx", "=", "bisect", "(", "cfg", "[", "\"training_parameters\"", "]", "[", "\"lr_steps\"", "]", ",", "i_iter", ")", "\n", "return", "pow", "(", "cfg", "[", "\"training_parameters\"", "]", "[", "\"lr_ratio\"", "]", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.clip_gradients": [[30, 51], ["torch.nn.utils.clip_grad_norm_", "writer.add_scalars", "model.parameters", "torch.nn.utils.clip_grad_norm", "writer.add_scalars", "NotImplementedError", "question_embedding.parameters"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.add_scalars", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.add_scalars"], ["", "", "def", "clip_gradients", "(", "model", ",", "i_iter", ",", "writer", ",", "config", ")", ":", "\n", "# TODO: Fix question model retrieval", "\n", "    ", "max_grad_l2_norm", "=", "config", "[", "\"training_parameters\"", "]", "[", "\"max_grad_l2_norm\"", "]", "\n", "clip_norm_mode", "=", "config", "[", "\"training_parameters\"", "]", "[", "\"clip_norm_mode\"", "]", "\n", "\n", "if", "max_grad_l2_norm", "is", "not", "None", ":", "\n", "        ", "if", "clip_norm_mode", "==", "\"all\"", ":", "\n", "            ", "norm", "=", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "max_grad_l2_norm", ")", "\n", "\n", "writer", ".", "add_scalars", "(", "{", "\"grad_norm\"", ":", "norm", "}", ",", "i_iter", ")", "\n", "\n", "", "elif", "clip_norm_mode", "==", "\"question\"", ":", "\n", "            ", "question_embedding", "=", "model", ".", "module", ".", "question_embedding_module", "\n", "norm", "=", "nn", ".", "utils", ".", "clip_grad_norm", "(", "\n", "question_embedding", ".", "parameters", "(", ")", ",", "max_grad_l2_norm", "\n", ")", "\n", "\n", "writer", ".", "add_scalars", "(", "{", "\"question_grad_norm\"", ":", "norm", "}", ",", "i_iter", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Clip norm mode %s not implemented\"", "%", "clip_norm_mode", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.ckpt_name_from_core_args": [[54, 67], ["None"], "function", ["None"], ["", "", "", "def", "ckpt_name_from_core_args", "(", "config", ")", ":", "\n", "    ", "seed", "=", "config", "[", "\"training_parameters\"", "]", "[", "\"seed\"", "]", "\n", "#pdb.set_trace()", "\n", "ckpt_name", "=", "\"{}_{}_{}\"", ".", "format", "(", "\n", "config", "[", "\"tasks\"", "]", ",", "\n", "config", "[", "\"datasets\"", "]", ",", "\n", "config", "[", "\"model\"", "]", "\n", ")", "\n", "\n", "#if seed is not None:", "\n", "#    ckpt_name += \"_{:d}\".format(seed)", "\n", "\n", "return", "ckpt_name", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.foldername_from_config_override": [[68, 84], ["hasattr", "yaml.safe_dump", "folder_name.replace().replace.replace().replace", "folder_name.replace().replace.replace", "folder_name.replace().replace.replace().replace", "len", "folder_name.replace().replace.split", "folder_name.replace().replace.replace", "folder_name.replace().replace.replace"], "function", ["None"], ["", "def", "foldername_from_config_override", "(", "args", ")", ":", "\n", "    ", "cfg_override", "=", "None", "\n", "if", "hasattr", "(", "args", ",", "\"config_override\"", ")", ":", "\n", "        ", "cfg_override", "=", "args", ".", "config_override", "\n", "", "elif", "\"config_override\"", "in", "args", ":", "\n", "        ", "cfg_override", "=", "args", "[", "\"config_override\"", "]", "\n", "\n", "", "folder_name", "=", "\"\"", "\n", "if", "cfg_override", "is", "not", "None", "and", "len", "(", "cfg_override", ")", ">", "0", ":", "\n", "        ", "folder_name", "=", "yaml", ".", "safe_dump", "(", "cfg_override", ",", "default_flow_style", "=", "True", ")", "\n", "folder_name", "=", "folder_name", ".", "replace", "(", "\":\"", ",", "\".\"", ")", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", "\n", "folder_name", "=", "folder_name", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "folder_name", "=", "\" \"", ".", "join", "(", "folder_name", ".", "split", "(", ")", ")", "\n", "folder_name", "=", "folder_name", ".", "replace", "(", "\". \"", ",", "\".\"", ")", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "folder_name", "=", "\"_\"", "+", "folder_name", "\n", "", "return", "folder_name", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root": [[86, 95], ["registry.get", "os.path.dirname", "os.path.abspath", "registry.register", "os.path.abspath", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register"], ["", "def", "get_pythia_root", "(", ")", ":", "\n", "    ", "from", "pythia", ".", "common", ".", "registry", "import", "registry", "\n", "\n", "pythia_root", "=", "registry", ".", "get", "(", "\"pythia_root\"", ",", "no_warning", "=", "True", ")", "\n", "if", "pythia_root", "is", "None", ":", "\n", "        ", "pythia_root", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "pythia_root", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "pythia_root", ",", "\"..\"", ")", ")", "\n", "registry", ".", "register", "(", "\"pythia_root\"", ",", "pythia_root", ")", "\n", "", "return", "pythia_root", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.download_file": [[97, 121], ["os.makedirs", "os.path.join", "requests.get", "int", "int", "len", "os.path.join", "print", "open", "tqdm.tqdm", "requests.get.iter_content", "fh.write", "url.split"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "def", "download_file", "(", "url", ",", "output_dir", "=", "\".\"", ",", "filename", "=", "\"\"", ")", ":", "\n", "    ", "if", "len", "(", "filename", ")", "==", "0", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "\".\"", ",", "url", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ")", "\n", "\n", "", "os", ".", "makedirs", "(", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "filename", ")", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "\n", "if", "r", ".", "status_code", "!=", "requests", ".", "codes", "[", "'ok'", "]", ":", "\n", "        ", "print", "(", "\"The url {} is broken. If this is not your own url,\"", "\n", "\" please open up an issue on GitHub.\"", ".", "format", "(", "url", ")", ")", "\n", "", "file_size", "=", "int", "(", "r", ".", "headers", "[", "\"Content-Length\"", "]", ")", "\n", "num_bars", "=", "int", "(", "file_size", "/", "DOWNLOAD_CHUNK_SIZE", ")", "\n", "\n", "with", "open", "(", "filename", ",", "\"wb\"", ")", "as", "fh", ":", "\n", "        ", "for", "chunk", "in", "tqdm", ".", "tqdm", "(", "\n", "r", ".", "iter_content", "(", "chunk_size", "=", "DOWNLOAD_CHUNK_SIZE", ")", ",", "\n", "total", "=", "num_bars", ",", "\n", "unit", "=", "\"MB\"", ",", "\n", "desc", "=", "filename", ",", "\n", "leave", "=", "True", ",", "\n", ")", ":", "\n", "            ", "fh", ".", "write", "(", "chunk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_optimizer_parameters": [[123, 137], ["model.parameters", "hasattr", "model.get_optimizer_parameters", "isinstance", "isinstance", "hasattr", "model.module.get_optimizer_parameters"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.get_optimizer_parameters", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.get_optimizer_parameters"], ["", "", "", "def", "get_optimizer_parameters", "(", "model", ",", "config", ")", ":", "\n", "    ", "parameters", "=", "model", ".", "parameters", "(", ")", "\n", "\n", "has_custom", "=", "hasattr", "(", "model", ",", "\"get_optimizer_parameters\"", ")", "\n", "if", "has_custom", ":", "\n", "        ", "parameters", "=", "model", ".", "get_optimizer_parameters", "(", "config", ")", "\n", "\n", "", "is_parallel", "=", "(", "isinstance", "(", "model", ",", "nn", ".", "DataParallel", ")", "or", "\n", "isinstance", "(", "model", ",", "nn", ".", "parallel", ".", "DistributedDataParallel", ")", ")", "\n", "\n", "if", "is_parallel", "and", "hasattr", "(", "model", ".", "module", ",", "\"get_optimizer_parameters\"", ")", ":", "\n", "        ", "parameters", "=", "model", ".", "module", ".", "get_optimizer_parameters", "(", "config", ")", "\n", "\n", "", "return", "parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.dict_to_string": [[139, 151], ["dictionary.items", "hasattr", "logs.append", "val.item.item"], "function", ["None"], ["", "def", "dict_to_string", "(", "dictionary", ")", ":", "\n", "    ", "logs", "=", "[", "]", "\n", "if", "dictionary", "is", "None", ":", "\n", "        ", "return", "\"\"", "\n", "", "for", "key", ",", "val", "in", "dictionary", ".", "items", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "val", ",", "\"item\"", ")", ":", "\n", "            ", "val", "=", "val", ".", "item", "(", ")", "\n", "# if key.count('_') == 2:", "\n", "#     key = key[key.find('_') + 1:]", "\n", "", "logs", ".", "append", "(", "\"%s: %.4f\"", "%", "(", "key", ",", "val", ")", ")", "\n", "\n", "", "return", "\", \"", ".", "join", "(", "logs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_overlap_score": [[153, 182], ["len", "len", "len", "len", "len"], "function", ["None"], ["", "def", "get_overlap_score", "(", "candidate", ",", "target", ")", ":", "\n", "    ", "\"\"\"Takes a candidate word and a target word and returns the overlap\n    score between the two.\n\n    Parameters\n    ----------\n    candidate : str\n        Candidate word whose overlap has to be detected.\n    target : str\n        Target word against which the overlap will be detected\n\n    Returns\n    -------\n    float\n        Overlap score betwen candidate and the target.\n\n    \"\"\"", "\n", "if", "len", "(", "candidate", ")", "<", "len", "(", "target", ")", ":", "\n", "        ", "temp", "=", "candidate", "\n", "candidate", "=", "target", "\n", "target", "=", "temp", "\n", "", "overlap", "=", "0.0", "\n", "while", "len", "(", "target", ")", ">=", "2", ":", "\n", "        ", "if", "target", "in", "candidate", ":", "\n", "            ", "overlap", "=", "len", "(", "target", ")", "\n", "return", "overlap", "*", "1.0", "/", "len", "(", "candidate", ")", "\n", "", "else", ":", "\n", "            ", "target", "=", "target", "[", ":", "-", "1", "]", "\n", "", "", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.updir": [[184, 190], ["range", "os.path.dirname"], "function", ["None"], ["", "def", "updir", "(", "d", ",", "n", ")", ":", "\n", "    ", "\"\"\"Given path d, go up n dirs from d and return that path\"\"\"", "\n", "ret_val", "=", "d", "\n", "for", "_", "in", "range", "(", "n", ")", ":", "\n", "        ", "ret_val", "=", "os", ".", "path", ".", "dirname", "(", "ret_val", ")", "\n", "", "return", "ret_val", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.print_cuda_usage": [[192, 197], ["print", "print", "print", "print", "torch.cuda.memory_allocated", "torch.cuda.max_memory_allocated", "torch.cuda.memory_cached", "torch.cuda.max_memory_cached"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print"], ["", "def", "print_cuda_usage", "(", ")", ":", "\n", "    ", "print", "(", "\"Memory Allocated:\"", ",", "torch", ".", "cuda", ".", "memory_allocated", "(", ")", "/", "(", "1024", "*", "1024", ")", ")", "\n", "print", "(", "\"Max Memory Allocated:\"", ",", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "(", "1024", "*", "1024", ")", ")", "\n", "print", "(", "\"Memory Cached:\"", ",", "torch", ".", "cuda", ".", "memory_cached", "(", ")", "/", "(", "1024", "*", "1024", ")", ")", "\n", "print", "(", "\"Max Memory Cached:\"", ",", "torch", ".", "cuda", ".", "max_memory_cached", "(", ")", "/", "(", "1024", "*", "1024", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_current_tensors": [[199, 208], ["gc.get_objects", "torch.is_tensor", "print", "hasattr", "torch.is_tensor", "type", "obj.size"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.gqa.convert_gqa_to_vqa.get_objects", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print"], ["", "def", "get_current_tensors", "(", ")", ":", "\n", "    ", "for", "obj", "in", "gc", ".", "get_objects", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "obj", ")", "or", "(", "\n", "hasattr", "(", "obj", ",", "\"data\"", ")", "and", "torch", ".", "is_tensor", "(", "obj", ".", "data", ")", "\n", ")", ":", "\n", "                ", "print", "(", "type", "(", "obj", ")", ",", "obj", ".", "size", "(", ")", ")", "\n", "", "", "except", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.extract_file": [[210, 231], ["os.getcwd", "os.chdir", "os.chdir", "opener", "f.extractall", "os.path.abspath().split", "os.path.abspath"], "function", ["None"], ["", "", "", "def", "extract_file", "(", "path", ",", "output_dir", "=", "\".\"", ")", ":", "\n", "    ", "_FILETYPE_TO_OPENER_MODE_MAPPING", "=", "{", "\n", "\".zip\"", ":", "(", "zipfile", ".", "ZipFile", ",", "\"r\"", ")", ",", "\n", "\".tar.gz\"", ":", "(", "tarfile", ".", "open", ",", "\"r:gz\"", ")", ",", "\n", "\".tgz\"", ":", "(", "tarfile", ".", "open", ",", "\"r:gz\"", ")", ",", "\n", "\".tar\"", ":", "(", "tarfile", ".", "open", ",", "\"r:\"", ")", ",", "\n", "\".tar.bz2\"", ":", "(", "tarfile", ".", "open", ",", "\"r:bz2\"", ")", ",", "\n", "\".tbz\"", ":", "(", "tarfile", ".", "open", ",", "\"r:bz2\"", ")", ",", "\n", "}", "\n", "\n", "cwd", "=", "os", ".", "getcwd", "(", ")", "\n", "os", ".", "chdir", "(", "output_dir", ")", "\n", "\n", "extension", "=", "\".\"", "+", "\".\"", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "path", ")", ".", "split", "(", "\".\"", ")", "[", "1", ":", "]", ")", "\n", "\n", "opener", ",", "mode", "=", "_FILETYPE_TO_OPENER_MODE_MAPPING", "[", "extension", "]", "\n", "with", "opener", "(", "path", ",", "mode", ")", "as", "f", ":", "\n", "        ", "f", ".", "extractall", "(", ")", "\n", "\n", "", "os", ".", "chdir", "(", "cwd", ")", "\n", "return", "output_dir", "\n", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.ConfigNode.__init__": [[20, 31], ["collections.OrderedDict.__init__", "isinstance", "configuration.ConfigNode", "isinstance", "enumerate", "isinstance", "configuration.ConfigNode"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ",", "init_dict", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "__dict__", "[", "ConfigNode", ".", "IMMUTABLE", "]", "=", "False", "\n", "super", "(", ")", ".", "__init__", "(", "init_dict", ")", "\n", "\n", "for", "key", "in", "self", ":", "\n", "            ", "if", "isinstance", "(", "self", "[", "key", "]", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "                ", "self", "[", "key", "]", "=", "ConfigNode", "(", "self", "[", "key", "]", ")", "\n", "", "elif", "isinstance", "(", "self", "[", "key", "]", ",", "list", ")", ":", "\n", "                ", "for", "idx", ",", "item", "in", "enumerate", "(", "self", "[", "key", "]", ")", ":", "\n", "                    ", "if", "isinstance", "(", "item", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "                        ", "self", "[", "key", "]", "[", "idx", "]", "=", "ConfigNode", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.ConfigNode.freeze": [[32, 42], ["configuration.ConfigNode.keys", "isinstance", "configuration.ConfigNode.freeze", "isinstance", "isinstance", "item.freeze"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.freeze", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.freeze"], ["", "", "", "", "", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "for", "field", "in", "self", ".", "keys", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "self", "[", "field", "]", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "                ", "self", "[", "field", "]", ".", "freeze", "(", ")", "\n", "", "elif", "isinstance", "(", "self", "[", "field", "]", ",", "list", ")", ":", "\n", "                ", "for", "item", "in", "self", "[", "field", "]", ":", "\n", "                    ", "if", "isinstance", "(", "item", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "                        ", "item", ".", "freeze", "(", ")", "\n", "\n", "", "", "", "", "self", ".", "__dict__", "[", "ConfigNode", ".", "IMMUTABLE", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.ConfigNode.defrost": [[43, 53], ["configuration.ConfigNode.keys", "isinstance", "configuration.ConfigNode.defrost", "isinstance", "isinstance", "item.defrost"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.ConfigNode.defrost", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.ConfigNode.defrost"], ["", "def", "defrost", "(", "self", ")", ":", "\n", "        ", "for", "field", "in", "self", ".", "keys", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "self", "[", "field", "]", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "                ", "self", "[", "field", "]", ".", "defrost", "(", ")", "\n", "", "elif", "isinstance", "(", "self", "[", "field", "]", ",", "list", ")", ":", "\n", "                ", "for", "item", "in", "self", "[", "field", "]", ":", "\n", "                    ", "if", "isinstance", "(", "item", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "                        ", "item", ".", "defrost", "(", ")", "\n", "\n", "", "", "", "", "self", ".", "__dict__", "[", "ConfigNode", ".", "IMMUTABLE", "]", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.ConfigNode.__getattr__": [[54, 59], ["AttributeError"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", "not", "in", "self", ":", "\n", "            ", "raise", "AttributeError", "(", "key", ")", "\n", "\n", "", "return", "self", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.ConfigNode.__setattr__": [[60, 65], ["AttributeError"], "methods", ["None"], ["", "def", "__setattr__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "if", "self", ".", "__dict__", "[", "ConfigNode", ".", "IMMUTABLE", "]", "is", "True", ":", "\n", "            ", "raise", "AttributeError", "(", "\"ConfigNode has been frozen and can't be updated\"", ")", "\n", "\n", "", "self", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.ConfigNode._indent": [[66, 73], ["st.split.split.split", "st.split.split.pop"], "methods", ["None"], ["", "def", "_indent", "(", "self", ",", "st", ",", "num_spaces", ")", ":", "\n", "        ", "st", "=", "st", ".", "split", "(", "\"\\n\"", ")", "\n", "first", "=", "st", ".", "pop", "(", "0", ")", "\n", "st", "=", "[", "(", "num_spaces", "*", "\" \"", ")", "+", "line", "for", "line", "in", "st", "]", "\n", "st", "=", "[", "first", "]", "+", "st", "\n", "st", "=", "\"\\n\"", ".", "join", "(", "st", ")", "\n", "return", "st", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.ConfigNode.__str__": [[74, 91], ["isinstance", "sorted", "configuration.ConfigNode.items", "isinstance", "strs.append", "isinstance", "configuration.ConfigNode._indent", "configuration.ConfigNode._indent", "configuration.ConfigNode.append", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.ConfigNode._indent", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.ConfigNode._indent"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "strs", "=", "[", "]", "\n", "\n", "if", "isinstance", "(", "self", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "sorted", "(", "self", ".", "items", "(", ")", ")", ":", "\n", "                ", "seperator", "=", "\"\\n\"", "if", "isinstance", "(", "value", ",", "ConfigNode", ")", "else", "\" \"", "\n", "if", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                    ", "attr_str", "=", "[", "\"{}:\"", ".", "format", "(", "key", ")", "]", "\n", "for", "item", "in", "value", ":", "\n", "                        ", "item_str", "=", "self", ".", "_indent", "(", "str", "(", "item", ")", ",", "2", ")", "\n", "attr_str", ".", "append", "(", "\"- {}\"", ".", "format", "(", "item_str", ")", ")", "\n", "", "attr_str", "=", "\"\\n\"", ".", "join", "(", "attr_str", ")", "\n", "", "else", ":", "\n", "                    ", "attr_str", "=", "\"{}:{}{}\"", ".", "format", "(", "str", "(", "key", ")", ",", "seperator", ",", "str", "(", "value", ")", ")", "\n", "attr_str", "=", "self", ".", "_indent", "(", "attr_str", ",", "2", ")", "\n", "", "strs", ".", "append", "(", "attr_str", ")", "\n", "", "", "return", "\"\\n\"", ".", "join", "(", "strs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.ConfigNode.__repr__": [[92, 94], ["collections.OrderedDict.__repr__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.ConfigNode.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"{}({})\"", ".", "format", "(", "self", ".", "__class__", ".", "__name__", ",", "super", "(", ")", ".", "__repr__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.__init__": [[97, 115], ["configuration.Configuration._get_default_config_path", "configuration.Configuration.load_yaml", "configuration.Configuration.nested_dict_update", "configuration.Configuration.load_yaml"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration._get_default_config_path", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.load_yaml", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.nested_dict_update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.load_yaml"], ["    ", "def", "__init__", "(", "self", ",", "config_yaml_file", ")", ":", "\n", "        ", "self", ".", "config_path", "=", "config_yaml_file", "\n", "self", ".", "default_config", "=", "self", ".", "_get_default_config_path", "(", ")", "\n", "self", ".", "config", "=", "{", "}", "\n", "\n", "base_config", "=", "{", "}", "\n", "\n", "base_config", "=", "self", ".", "load_yaml", "(", "self", ".", "default_config", ")", "\n", "\n", "user_config", "=", "{", "}", "\n", "\n", "if", "self", ".", "config_path", "is", "not", "None", ":", "\n", "            ", "user_config", "=", "self", ".", "load_yaml", "(", "self", ".", "config_path", ")", "\n", "\n", "", "self", ".", "_base_config", "=", "base_config", "\n", "self", ".", "_user_config", "=", "user_config", "\n", "\n", "self", ".", "config", "=", "self", ".", "nested_dict_update", "(", "base_config", ",", "user_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.get_config": [[116, 118], ["None"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.load_yaml": [[119, 148], ["open", "yaml.safe_load", "configuration.Configuration.get", "pythia.utils.general.get_pythia_root", "configuration.Configuration.pop", "configuration.Configuration.nested_dict_update", "isinstance", "AttributeError", "os.path.join", "configuration.Configuration.load_yaml", "configuration.Configuration.nested_dict_update", "type"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.nested_dict_update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.load_yaml", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.nested_dict_update"], ["", "def", "load_yaml", "(", "self", ",", "file", ")", ":", "\n", "        ", "with", "open", "(", "file", ",", "\"r\"", ")", "as", "stream", ":", "\n", "            ", "mapping", "=", "yaml", ".", "safe_load", "(", "stream", ")", "\n", "\n", "if", "mapping", "is", "None", ":", "\n", "                ", "mapping", "=", "{", "}", "\n", "\n", "", "includes", "=", "mapping", ".", "get", "(", "\"includes\"", ",", "[", "]", ")", "\n", "\n", "if", "not", "isinstance", "(", "includes", ",", "list", ")", ":", "\n", "                ", "raise", "AttributeError", "(", "\n", "\"Includes must be a list, {} provided\"", ".", "format", "(", "type", "(", "includes", ")", ")", "\n", ")", "\n", "", "include_mapping", "=", "{", "}", "\n", "\n", "pythia_root_dir", "=", "get_pythia_root", "(", ")", "\n", "\n", "for", "include", "in", "includes", ":", "\n", "                ", "include", "=", "os", ".", "path", ".", "join", "(", "pythia_root_dir", ",", "include", ")", "\n", "current_include_mapping", "=", "self", ".", "load_yaml", "(", "include", ")", "\n", "include_mapping", "=", "self", ".", "nested_dict_update", "(", "\n", "include_mapping", ",", "current_include_mapping", "\n", ")", "\n", "\n", "", "mapping", ".", "pop", "(", "\"includes\"", ",", "None", ")", "\n", "\n", "mapping", "=", "self", ".", "nested_dict_update", "(", "include_mapping", ",", "mapping", ")", "\n", "\n", "return", "mapping", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.update_with_args": [[149, 156], ["vars", "configuration.Configuration._update_key", "configuration.Configuration._update_specific", "configuration.Configuration.config.update"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration._update_key", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration._update_specific", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update"], ["", "", "def", "update_with_args", "(", "self", ",", "args", ",", "force", "=", "False", ")", ":", "\n", "        ", "args_dict", "=", "vars", "(", "args", ")", "\n", "\n", "self", ".", "_update_key", "(", "self", ".", "config", ",", "args_dict", ")", "\n", "if", "force", "is", "True", ":", "\n", "            ", "self", ".", "config", ".", "update", "(", "args_dict", ")", "\n", "", "self", ".", "_update_specific", "(", "args_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.override_with_cmd_config": [[157, 163], ["demjson.decode", "configuration.Configuration.nested_dict_update"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.NucleusSampling.decode", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.nested_dict_update"], ["", "def", "override_with_cmd_config", "(", "self", ",", "cmd_config", ")", ":", "\n", "        ", "if", "cmd_config", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "cmd_config", "=", "demjson", ".", "decode", "(", "cmd_config", ")", "\n", "self", ".", "config", "=", "self", ".", "nested_dict_update", "(", "self", ".", "config", ",", "cmd_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.nested_dict_update": [[164, 188], ["update.items", "isinstance", "configuration.Configuration.nested_dict_update", "configuration.Configuration._decode_value", "dictionary.get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.nested_dict_update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration._decode_value", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "def", "nested_dict_update", "(", "self", ",", "dictionary", ",", "update", ")", ":", "\n", "        ", "\"\"\"Updates a dictionary with other dictionary recursively.\n\n        Parameters\n        ----------\n        dictionary : dict\n            Dictionary to be updated.\n        update : dict\n            Dictionary which has to be added to original one.\n\n        Returns\n        -------\n        dict\n            Updated dictionary.\n        \"\"\"", "\n", "if", "dictionary", "is", "None", ":", "\n", "            ", "dictionary", "=", "{", "}", "\n", "\n", "", "for", "k", ",", "v", "in", "update", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "                ", "dictionary", "[", "k", "]", "=", "self", ".", "nested_dict_update", "(", "dictionary", ".", "get", "(", "k", ",", "{", "}", ")", ",", "v", ")", "\n", "", "else", ":", "\n", "                ", "dictionary", "[", "k", "]", "=", "self", ".", "_decode_value", "(", "v", ")", "\n", "", "", "return", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.freeze": [[189, 192], ["configuration.ConfigNode", "configuration.Configuration.config.freeze"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.freeze"], ["", "def", "freeze", "(", "self", ")", ":", "\n", "        ", "self", ".", "config", "=", "ConfigNode", "(", "self", ".", "config", ")", "\n", "self", ".", "config", ".", "freeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration._merge_from_list": [[193, 223], ["zip", "opt.split", "enumerate", "len", "AttributeError", "isinstance", "pythia.utils.distributed_utils.is_main_process", "configuration.Configuration._decode_value", "AttributeError", "len", "print"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.is_main_process", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration._decode_value", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print"], ["", "def", "_merge_from_list", "(", "self", ",", "opts", ")", ":", "\n", "        ", "if", "opts", "is", "None", ":", "\n", "            ", "opts", "=", "[", "]", "\n", "\n", "", "assert", "len", "(", "opts", ")", "%", "2", "==", "0", ",", "\"Number of opts should be multiple of 2\"", "\n", "\n", "for", "opt", ",", "value", "in", "zip", "(", "opts", "[", "0", ":", ":", "2", "]", ",", "opts", "[", "1", ":", ":", "2", "]", ")", ":", "\n", "            ", "splits", "=", "opt", ".", "split", "(", "\".\"", ")", "\n", "current", "=", "self", ".", "config", "\n", "for", "idx", ",", "field", "in", "enumerate", "(", "splits", ")", ":", "\n", "                ", "if", "field", "not", "in", "current", ":", "\n", "                    ", "raise", "AttributeError", "(", "\n", "\"While updating configuration\"", "\n", "\" option {} is missing from\"", "\n", "\" configuration at field {}\"", ".", "format", "(", "opt", ",", "field", ")", "\n", ")", "\n", "", "if", "not", "isinstance", "(", "current", "[", "field", "]", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "                    ", "if", "idx", "==", "len", "(", "splits", ")", "-", "1", ":", "\n", "                        ", "if", "is_main_process", "(", ")", ":", "\n", "                            ", "print", "(", "\"Overriding option {} to {}\"", ".", "format", "(", "opt", ",", "value", ")", ")", "\n", "\n", "", "current", "[", "field", "]", "=", "self", ".", "_decode_value", "(", "value", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "AttributeError", "(", "\n", "\"While updating configuration\"", ",", "\n", "\"option {} is not present \"", "\n", "\"after field {}\"", ".", "format", "(", "opt", ",", "field", ")", ",", "\n", ")", "\n", "", "", "else", ":", "\n", "                    ", "current", "=", "current", "[", "field", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.override_with_cmd_opts": [[224, 226], ["configuration.Configuration._merge_from_list"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration._merge_from_list"], ["", "", "", "", "def", "override_with_cmd_opts", "(", "self", ",", "opts", ")", ":", "\n", "        ", "self", ".", "_merge_from_list", "(", "opts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration._decode_value": [[227, 242], ["isinstance", "ast.literal_eval"], "methods", ["None"], ["", "def", "_decode_value", "(", "self", ",", "value", ")", ":", "\n", "# https://github.com/rbgirshick/yacs/blob/master/yacs/config.py#L400", "\n", "        ", "if", "not", "isinstance", "(", "value", ",", "str", ")", ":", "\n", "            ", "return", "value", "\n", "\n", "", "if", "value", "==", "\"None\"", ":", "\n", "            ", "value", "=", "None", "\n", "\n", "", "try", ":", "\n", "            ", "value", "=", "literal_eval", "(", "value", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n", "", "except", "SyntaxError", ":", "\n", "            ", "pass", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration._update_key": [[243, 257], ["dictionary.items", "isinstance", "configuration.Configuration._update_key"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration._update_key"], ["", "def", "_update_key", "(", "self", ",", "dictionary", ",", "update_dict", ")", ":", "\n", "        ", "\"\"\"\n        Takes a single depth dictionary update_dict and uses it to\n        update 'dictionary' whenever key in 'update_dict' is found at\n        any level in 'dictionary'\n        \"\"\"", "\n", "for", "key", ",", "value", "in", "dictionary", ".", "items", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "value", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "                ", "if", "key", "in", "update_dict", "and", "update_dict", "[", "key", "]", "is", "not", "None", ":", "\n", "                    ", "dictionary", "[", "key", "]", "=", "update_dict", "[", "key", "]", "\n", "", "", "else", ":", "\n", "                ", "dictionary", "[", "key", "]", "=", "self", ".", "_update_key", "(", "value", ",", "update_dict", ")", "\n", "\n", "", "", "return", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.pretty_print": [[258, 310], ["pythia.common.registry.registry.get", "configuration.Configuration.writer.write", "configuration.Configuration.writer.write", "configuration.Configuration.writer.write", "configuration.Configuration.config.tasks.split", "configuration.Configuration.config.datasets.split", "configuration.Configuration.writer.write", "configuration.Configuration.writer.write", "configuration.Configuration.writer.write", "configuration.Configuration.writer.write", "json.dumps", "json.dumps", "ValueError", "json.dumps", "ValueError", "configuration.Configuration.writer.write", "configuration.Configuration.writer.write", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "def", "pretty_print", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "\n", "self", ".", "writer", ".", "write", "(", "\"=====  Training Parameters    =====\"", ",", "\"info\"", ")", "\n", "self", ".", "writer", ".", "write", "(", "\n", "json", ".", "dumps", "(", "self", ".", "config", ".", "training_parameters", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ",", "\n", "\"info\"", ",", "\n", ")", "\n", "\n", "self", ".", "writer", ".", "write", "(", "\"======  Task Attributes  ======\"", ",", "\"info\"", ")", "\n", "tasks", "=", "self", ".", "config", ".", "tasks", ".", "split", "(", "\",\"", ")", "\n", "datasets", "=", "self", ".", "config", ".", "datasets", ".", "split", "(", "\",\"", ")", "\n", "\n", "for", "task", "in", "tasks", ":", "\n", "            ", "if", "task", "not", "in", "self", ".", "config", ".", "task_attributes", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Task {} not present in task_attributes config\"", ".", "format", "(", "task", ")", "\n", ")", "\n", "\n", "", "task_config", "=", "self", ".", "config", ".", "task_attributes", "[", "task", "]", "\n", "\n", "for", "dataset", "in", "datasets", ":", "\n", "                ", "if", "dataset", "in", "task_config", ".", "dataset_attributes", ":", "\n", "                    ", "self", ".", "writer", ".", "write", "(", "\n", "\"======== {}/{} =======\"", ".", "format", "(", "task", ",", "dataset", ")", ",", "\"info\"", "\n", ")", "\n", "dataset_config", "=", "task_config", ".", "dataset_attributes", "[", "dataset", "]", "\n", "self", ".", "writer", ".", "write", "(", "\n", "json", ".", "dumps", "(", "dataset_config", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ",", "\"info\"", "\n", ")", "\n", "\n", "", "", "", "self", ".", "writer", ".", "write", "(", "\"======  Optimizer Attributes  ======\"", ",", "\"info\"", ")", "\n", "self", ".", "writer", ".", "write", "(", "\n", "json", ".", "dumps", "(", "self", ".", "config", ".", "optimizer_attributes", ",", "indent", "=", "4", ",", "sort_keys", "=", "True", ")", ",", "\n", "\"info\"", ",", "\n", ")", "\n", "\n", "if", "self", ".", "config", ".", "model", "not", "in", "self", ".", "config", ".", "model_attributes", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"{} not present in model attributes\"", ".", "format", "(", "self", ".", "config", ".", "model", ")", "\n", ")", "\n", "\n", "", "self", ".", "writer", ".", "write", "(", "\n", "\"======  Model ({}) Attributes  ======\"", ".", "format", "(", "self", ".", "config", ".", "model", ")", ",", "\"info\"", "\n", ")", "\n", "self", ".", "writer", ".", "write", "(", "\n", "json", ".", "dumps", "(", "\n", "self", ".", "config", ".", "model_attributes", "[", "self", ".", "config", ".", "model", "]", ",", "\n", "indent", "=", "4", ",", "\n", "sort_keys", "=", "True", ",", "\n", ")", ",", "\n", "\"info\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration._get_default_config_path": [[312, 316], ["os.path.dirname", "os.path.join", "os.path.abspath"], "methods", ["None"], ["", "def", "_get_default_config_path", "(", "self", ")", ":", "\n", "        ", "directory", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "\n", "directory", ",", "\"..\"", ",", "\"common\"", ",", "\"defaults\"", ",", "\"configs\"", ",", "\"base.yml\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration._update_specific": [[318, 356], ["pythia.common.registry.registry.get", "print", "random.randint", "pythia.utils.distributed_utils.is_main_process", "print", "torch.cuda.is_available", "print"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.is_main_process", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print"], ["", "def", "_update_specific", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "tp", "=", "self", ".", "config", "[", "\"training_parameters\"", "]", "\n", "\n", "if", "args", "[", "\"seed\"", "]", "is", "not", "None", "or", "tp", "[", "'seed'", "]", "is", "not", "None", ":", "\n", "            ", "print", "(", "\n", "\"You have chosen to seed the training. This will turn on CUDNN deterministic \"", "\n", "\"setting which can slow down your training considerably! You may see unexpected \"", "\n", "\"behavior when restarting from checkpoints.\"", "\n", ")", "\n", "\n", "", "if", "args", "[", "\"seed\"", "]", "==", "-", "1", ":", "\n", "            ", "self", ".", "config", "[", "\"training_parameters\"", "]", "[", "\"seed\"", "]", "=", "random", ".", "randint", "(", "1", ",", "1000000", ")", "\n", "\n", "", "if", "\"learning_rate\"", "in", "args", ":", "\n", "            ", "if", "\"optimizer\"", "in", "self", ".", "config", "and", "\"params\"", "in", "self", ".", "config", "[", "\"optimizer\"", "]", ":", "\n", "                ", "lr", "=", "args", "[", "\"learning_rate\"", "]", "\n", "self", ".", "config", "[", "\"optimizer_attributes\"", "]", "[", "\"params\"", "]", "[", "\"lr\"", "]", "=", "lr", "\n", "\n", "", "", "if", "(", "\n", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "and", "\"cuda\"", "in", "self", ".", "config", "[", "\"training_parameters\"", "]", "[", "\"device\"", "]", "\n", ")", ":", "\n", "            ", "if", "is_main_process", "(", ")", ":", "\n", "                ", "print", "(", "\n", "\"WARNING: Device specified is 'cuda' but cuda is \"", "\n", "\"not present. Switching to CPU version\"", "\n", ")", "\n", "", "self", ".", "config", "[", "\"training_parameters\"", "]", "[", "\"device\"", "]", "=", "\"cpu\"", "\n", "\n", "", "if", "tp", "[", "\"distributed\"", "]", "is", "True", "and", "tp", "[", "\"data_parallel\"", "]", "is", "True", ":", "\n", "            ", "print", "(", "\n", "\"training_parameters.distributed and \"", "\n", "\"training_parameters.data_parallel are \"", "\n", "\"mutually exclusive. Setting \"", "\n", "\"training_parameters.distributed to False\"", "\n", ")", "\n", "tp", "[", "\"distributed\"", "]", "=", "False", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.Vocab.__init__": [[16, 54], ["params.get", "dir", "torchtext.vocab.BaseVocab", "ValueError", "torchtext.vocab.CustomVocab", "ValueError", "torchtext.vocab.PretrainedVocab", "torchtext.vocab.IntersectedVocab", "ValueError", "torchtext.vocab.ExtractedVocab", "ValueError", "ValueError", "ValueError", "torchtext.vocab.ModelVocab"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "params", ")", ":", "\n", "        ", "vocab_type", "=", "params", ".", "get", "(", "\"type\"", ",", "\"pretrained\"", ")", "\n", "# Stores final parameters extracted from vocab_params", "\n", "\n", "if", "vocab_type", "==", "\"random\"", ":", "\n", "            ", "if", "params", "[", "\"vocab_file\"", "]", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"No vocab path passed for vocab\"", ")", "\n", "\n", "", "self", ".", "vocab", "=", "BaseVocab", "(", "*", "args", ",", "**", "params", ")", "\n", "\n", "", "elif", "vocab_type", "==", "\"custom\"", ":", "\n", "            ", "if", "params", "[", "\"vocab_file\"", "]", "is", "None", "or", "params", "[", "\"embedding_file\"", "]", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"No vocab path or embedding_file passed for vocab\"", ")", "\n", "", "self", ".", "vocab", "=", "CustomVocab", "(", "*", "args", ",", "**", "params", ")", "\n", "\n", "", "elif", "vocab_type", "==", "\"pretrained\"", ":", "\n", "            ", "self", ".", "vocab", "=", "PretrainedVocab", "(", "*", "args", ",", "**", "params", ")", "\n", "\n", "", "elif", "vocab_type", "==", "\"intersected\"", ":", "\n", "            ", "if", "params", "[", "\"vocab_file\"", "]", "is", "None", "or", "params", "[", "\"embedding_name\"", "]", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"No vocab path or embedding_name passed for vocab\"", ")", "\n", "\n", "", "self", ".", "vocab", "=", "IntersectedVocab", "(", "*", "args", ",", "**", "params", ")", "\n", "\n", "", "elif", "vocab_type", "==", "\"extracted\"", ":", "\n", "            ", "if", "params", "[", "\"base_path\"", "]", "is", "None", "or", "params", "[", "\"embedding_dim\"", "]", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"No base_path or embedding_dim passed for vocab\"", ")", "\n", "", "self", ".", "vocab", "=", "ExtractedVocab", "(", "*", "args", ",", "**", "params", ")", "\n", "\n", "", "elif", "vocab_type", "==", "\"model\"", ":", "\n", "            ", "if", "params", "[", "\"name\"", "]", "is", "None", "or", "params", "[", "\"model_file\"", "]", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\"No name or model_file passed for vocab\"", ")", "\n", "", "if", "params", "[", "\"name\"", "]", "==", "\"fasttext\"", ":", "\n", "                ", "self", ".", "vocab", "=", "ModelVocab", "(", "*", "args", ",", "**", "params", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown vocab type: %s\"", "%", "vocab_type", ")", "\n", "\n", "", "self", ".", "_dir_representation", "=", "dir", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.Vocab.__call__": [[55, 57], ["torchtext.vocab.Vocab.vocab"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "vocab", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.Vocab.__getattr__": [[58, 66], ["getattr", "hasattr", "getattr", "AttributeError", "type"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "_dir_representation", ":", "\n", "            ", "return", "getattr", "(", "self", ",", "name", ")", "\n", "", "elif", "hasattr", "(", "self", ".", "vocab", ",", "name", ")", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "vocab", ",", "name", ")", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"{} vocab type has no attribute {}.\"", ".", "format", "(", "type", "(", "self", ".", "vocab", ",", "name", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.__init__": [[80, 135], ["len", "len", "collections.defaultdict", "torchtext.vocab.BaseVocab.stoi.update", "torch.FloatTensor", "torchtext.vocab.BaseVocab.itos.keys", "torchtext.vocab.BaseVocab.itos.keys", "torchtext.vocab.BaseVocab.get_size", "pythia.utils.general.get_pythia_root", "os.path.join", "os.path.exists", "RuntimeError", "open", "os.path.isabs", "line.strip", "line.strip"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root"], ["def", "__init__", "(", "\n", "self", ",", "vocab_file", "=", "None", ",", "embedding_dim", "=", "300", ",", "data_root_dir", "=", "None", ",", "*", "args", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Vocab class to be used when you want to train word embeddings from\n        scratch based on a custom vocab. This will initialize the random\n        vectors for the vocabulary you pass. Get the vectors using\n        `get_vectors` function. This will also create random embeddings for\n        some predefined words like PAD - <pad>, SOS - <s>, EOS - </s>,\n        UNK - <unk>.\n\n        Parameters\n        ----------\n        vocab_file : str\n            Path of the vocabulary file containing one word per line\n        embedding_dim : int\n            Size of the embedding\n\n        \"\"\"", "\n", "self", ".", "type", "=", "\"base\"", "\n", "self", ".", "word_dict", "=", "{", "}", "\n", "self", ".", "itos", "=", "{", "}", "\n", "\n", "self", ".", "itos", "[", "self", ".", "PAD_INDEX", "]", "=", "self", ".", "PAD_TOKEN", "\n", "self", ".", "itos", "[", "self", ".", "SOS_INDEX", "]", "=", "self", ".", "SOS_TOKEN", "\n", "self", ".", "itos", "[", "self", ".", "EOS_INDEX", "]", "=", "self", ".", "EOS_TOKEN", "\n", "self", ".", "itos", "[", "self", ".", "UNK_INDEX", "]", "=", "self", ".", "UNK_TOKEN", "\n", "\n", "self", ".", "word_dict", "[", "self", ".", "SOS_TOKEN", "]", "=", "self", ".", "SOS_INDEX", "\n", "self", ".", "word_dict", "[", "self", ".", "EOS_TOKEN", "]", "=", "self", ".", "EOS_INDEX", "\n", "self", ".", "word_dict", "[", "self", ".", "PAD_TOKEN", "]", "=", "self", ".", "PAD_INDEX", "\n", "self", ".", "word_dict", "[", "self", ".", "UNK_TOKEN", "]", "=", "self", ".", "UNK_INDEX", "\n", "\n", "index", "=", "len", "(", "self", ".", "itos", ".", "keys", "(", ")", ")", "\n", "\n", "self", ".", "total_predefined", "=", "len", "(", "self", ".", "itos", ".", "keys", "(", ")", ")", "\n", "\n", "if", "vocab_file", "is", "not", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isabs", "(", "vocab_file", ")", "and", "data_root_dir", "is", "not", "None", ":", "\n", "                ", "pythia_root", "=", "get_pythia_root", "(", ")", "\n", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "pythia_root", ",", "data_root_dir", ",", "vocab_file", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "vocab_file", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Vocab not found at \"", "+", "vocab_file", ")", "\n", "\n", "", "with", "open", "(", "vocab_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "for", "line", "in", "f", ":", "\n", "                    ", "self", ".", "itos", "[", "index", "]", "=", "line", ".", "strip", "(", ")", "\n", "self", ".", "word_dict", "[", "line", ".", "strip", "(", ")", "]", "=", "index", "\n", "index", "+=", "1", "\n", "\n", "", "", "", "self", ".", "word_dict", "[", "self", ".", "UNK_TOKEN", "]", "=", "self", ".", "UNK_INDEX", "\n", "# Return unk index by default", "\n", "self", ".", "stoi", "=", "defaultdict", "(", "lambda", ":", "self", ".", "UNK_INDEX", ")", "\n", "self", ".", "stoi", ".", "update", "(", "self", ".", "word_dict", ")", "\n", "\n", "self", ".", "vectors", "=", "torch", ".", "FloatTensor", "(", "self", ".", "get_size", "(", ")", ",", "embedding_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_itos": [[136, 138], ["None"], "methods", ["None"], ["", "def", "get_itos", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "itos", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_stoi": [[139, 141], ["None"], "methods", ["None"], ["", "def", "get_stoi", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "stoi", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size": [[142, 144], ["len"], "methods", ["None"], ["", "def", "get_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "itos", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_pad_index": [[145, 147], ["None"], "methods", ["None"], ["", "def", "get_pad_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "PAD_INDEX", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_pad_token": [[148, 150], ["None"], "methods", ["None"], ["", "def", "get_pad_token", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "PAD_TOKEN", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_start_index": [[151, 153], ["None"], "methods", ["None"], ["", "def", "get_start_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "SOS_INDEX", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_start_token": [[154, 156], ["None"], "methods", ["None"], ["", "def", "get_start_token", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "SOS_TOKEN", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_end_index": [[157, 159], ["None"], "methods", ["None"], ["", "def", "get_end_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "EOS_INDEX", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_end_token": [[160, 162], ["None"], "methods", ["None"], ["", "def", "get_end_token", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "EOS_TOKEN", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_unk_index": [[163, 165], ["None"], "methods", ["None"], ["", "def", "get_unk_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "UNK_INDEX", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_unk_token": [[166, 168], ["None"], "methods", ["None"], ["", "def", "get_unk_token", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "UNK_TOKEN", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_vectors": [[169, 171], ["getattr"], "methods", ["None"], ["", "def", "get_vectors", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "\"vectors\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_embedding": [[172, 198], ["len", "torchtext.vocab.BaseVocab.get_size", "hasattr", "torch.nn.Embedding", "cls", "torch.nn.Embedding.from_pretrained", "torch.nn.Embedding.from_pretrained", "torch.nn.Sequential", "torchtext.vocab.BaseVocab.get_size", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size"], ["", "def", "get_embedding", "(", "self", ",", "cls", ",", "**", "embedding_kwargs", ")", ":", "\n", "        ", "vector_dim", "=", "len", "(", "self", ".", "vectors", "[", "0", "]", ")", "\n", "embedding_kwargs", "[", "\"vocab_size\"", "]", "=", "self", ".", "get_size", "(", ")", "\n", "\n", "embedding_dim", "=", "embedding_kwargs", "[", "\"embedding_dim\"", "]", "\n", "embedding_kwargs", "[", "\"embedding_dim\"", "]", "=", "vector_dim", "\n", "\n", "embedding", "=", "None", "\n", "\n", "if", "cls", "==", "torch", ".", "nn", ".", "Embedding", ":", "\n", "            ", "embedding", "=", "torch", ".", "nn", ".", "Embedding", "(", "self", ".", "get_size", "(", ")", ",", "vector_dim", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "=", "cls", "(", "**", "embedding_kwargs", ")", "\n", "\n", "", "if", "hasattr", "(", "embedding", ",", "\"embedding\"", ")", ":", "\n", "            ", "embedding", ".", "embedding", "=", "torch", ".", "nn", ".", "Embedding", ".", "from_pretrained", "(", "\n", "self", ".", "vectors", ",", "freeze", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "embedding", "=", "torch", ".", "nn", ".", "Embedding", ".", "from_pretrained", "(", "self", ".", "vectors", ",", "freeze", "=", "False", ")", "\n", "\n", "", "if", "vector_dim", "==", "embedding_dim", ":", "\n", "            ", "return", "embedding", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "nn", ".", "Sequential", "(", "\n", "[", "embedding", ",", "torch", ".", "nn", ".", "Linear", "(", "vector_dim", ",", "embedding_dim", ")", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.CustomVocab.__init__": [[202, 247], ["torchtext.vocab.BaseVocab.__init__", "torch.from_numpy", "torch.FloatTensor", "range", "range", "pythia.utils.general.get_pythia_root", "os.path.join", "os.path.exists", "registry.get", "RuntimeError", "numpy.load", "torchtext.vocab.CustomVocab.get_size", "len", "torchtext.vocab.CustomVocab.get_size", "os.path.isabs", "registry.get.write", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["    ", "def", "__init__", "(", "self", ",", "vocab_file", ",", "embedding_file", ",", "data_root_dir", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Use this vocab class when you have a custom vocab as well as a\n        custom embeddings file.\n\n        This will inherit vocab class, so you will get predefined tokens with\n        this one.\n\n        IMPORTANT: To init your embedding, get your vectors from this class's\n        object by calling `get_vectors` function\n\n        Parameters\n        ----------\n        vocab_file : str\n            Path of custom vocabulary\n        embedding_file : str\n            Path to custom embedding inititalization file\n        data_root_dir : str\n            Path to data directory if embedding file is not an absolute path.\n            Default: None\n        \"\"\"", "\n", "super", "(", "CustomVocab", ",", "self", ")", ".", "__init__", "(", "vocab_file", ")", "\n", "self", ".", "type", "=", "\"custom\"", "\n", "\n", "if", "not", "os", ".", "path", ".", "isabs", "(", "embedding_file", ")", "and", "data_root_dir", "is", "not", "None", ":", "\n", "            ", "pythia_root", "=", "get_pythia_root", "(", ")", "\n", "embedding_file", "=", "os", ".", "path", ".", "join", "(", "pythia_root", ",", "data_root_dir", ",", "embedding_file", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "embedding_file", ")", ":", "\n", "            ", "from", "pythia", ".", "common", ".", "registry", "import", "registry", "\n", "\n", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "error", "=", "\"Embedding file path %s doesn't exist\"", "%", "embedding_file", "\n", "if", "writer", "is", "not", "None", ":", "\n", "                ", "writer", ".", "write", "(", "error", ",", "\"error\"", ")", "\n", "", "raise", "RuntimeError", "(", "error", ")", "\n", "\n", "", "embedding_vectors", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "embedding_file", ")", ")", "\n", "\n", "self", ".", "vectors", "=", "torch", ".", "FloatTensor", "(", "self", ".", "get_size", "(", ")", ",", "len", "(", "embedding_vectors", "[", "0", "]", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "            ", "self", ".", "vectors", "[", "i", "]", "=", "torch", ".", "ones_like", "(", "self", ".", "vectors", "[", "i", "]", ")", "*", "0.1", "*", "i", "\n", "\n", "", "for", "i", "in", "range", "(", "4", ",", "self", ".", "get_size", "(", ")", ")", ":", "\n", "            ", "self", ".", "vectors", "[", "i", "]", "=", "embedding_vectors", "[", "i", "-", "4", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.IntersectedVocab.__init__": [[250, 314], ["torchtext.vocab.BaseVocab.__init__", "os.path.join", "torch.empty", "len", "range", "range", "embedding_name.split", "embedding_name.split", "hasattr", "registry.get", "RuntimeError", "params.append", "pythia.utils.general.get_pythia_root", "getattr", "torchtext.vocab.IntersectedVocab.get_size", "embedding.stoi.get", "embedding_name.split", "registry.get.write", "int", "torchtext.vocab.IntersectedVocab.get_size", "len", "torchtext.vocab.IntersectedVocab.vectors[].clone", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size"], ["    ", "def", "__init__", "(", "self", ",", "vocab_file", ",", "embedding_name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Use this vocab class when you have a custom vocabulary class but you\n        want to use pretrained embedding vectos for it. This will only load\n        the vectors which intersect with your vocabulary. Use the\n        embedding_name specified in torchtext's pretrained aliases:\n        ['charngram.100d', 'fasttext.en.300d', 'fasttext.simple.300d',\n         'glove.42B.300d', 'glove.840B.300d', 'glove.twitter.27B.25d',\n         'glove.twitter.27B.50d', 'glove.twitter.27B.100d',\n         'glove.twitter.27B.200d', 'glove.6B.50d', 'glove.6B.100d',\n         'glove.6B.200d', 'glove.6B.300d']\n\n        Parameters\n        ----------\n        vocab_file : str\n            Vocabulary file containing list of words with one word per line\n            which will be used to collect vectors\n        embedding_name : str\n            Embedding name picked up from the list of the pretrained aliases\n            mentioned above\n        \"\"\"", "\n", "super", "(", "IntersectedVocab", ",", "self", ")", ".", "__init__", "(", "vocab_file", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "type", "=", "\"intersected\"", "\n", "\n", "name", "=", "embedding_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "dim", "=", "embedding_name", ".", "split", "(", "\".\"", ")", "[", "2", "]", "[", ":", "-", "1", "]", "\n", "middle", "=", "embedding_name", ".", "split", "(", "\".\"", ")", "[", "1", "]", "\n", "\n", "class_name", "=", "EMBEDDING_NAME_CLASS_MAPPING", "[", "name", "]", "\n", "\n", "if", "not", "hasattr", "(", "vocab", ",", "class_name", ")", ":", "\n", "            ", "from", "pythia", ".", "common", ".", "registry", "import", "registry", "\n", "\n", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "error", "=", "\"Unknown embedding type: %s\"", "%", "name", ",", "\"error\"", "\n", "if", "writer", "is", "not", "None", ":", "\n", "                ", "writer", ".", "write", "(", "error", ",", "\"error\"", ")", "\n", "", "raise", "RuntimeError", "(", "error", ")", "\n", "\n", "", "params", "=", "[", "middle", "]", "\n", "\n", "if", "name", "==", "\"glove\"", ":", "\n", "            ", "params", ".", "append", "(", "int", "(", "dim", ")", ")", "\n", "\n", "", "vector_cache", "=", "os", ".", "path", ".", "join", "(", "get_pythia_root", "(", ")", ",", "\".vector_cache\"", ")", "\n", "embedding", "=", "getattr", "(", "vocab", ",", "class_name", ")", "(", "*", "params", ",", "cache", "=", "vector_cache", ")", "\n", "\n", "self", ".", "vectors", "=", "torch", ".", "empty", "(", "\n", "(", "self", ".", "get_size", "(", ")", ",", "len", "(", "embedding", ".", "vectors", "[", "0", "]", ")", ")", ",", "dtype", "=", "torch", ".", "float", "\n", ")", "\n", "\n", "self", ".", "embedding_dim", "=", "len", "(", "embedding", ".", "vectors", "[", "0", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "4", ")", ":", "\n", "            ", "self", ".", "vectors", "[", "i", "]", "=", "torch", ".", "ones_like", "(", "self", ".", "vectors", "[", "i", "]", ")", "*", "0.1", "*", "i", "\n", "\n", "", "for", "i", "in", "range", "(", "4", ",", "self", ".", "get_size", "(", ")", ")", ":", "\n", "            ", "word", "=", "self", ".", "itos", "[", "i", "]", "\n", "embedding_index", "=", "embedding", ".", "stoi", ".", "get", "(", "word", ",", "None", ")", "\n", "\n", "if", "embedding_index", "is", "None", ":", "\n", "                ", "self", ".", "vectors", "[", "i", "]", "=", "self", ".", "vectors", "[", "self", ".", "UNK_INDEX", "]", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "vectors", "[", "i", "]", "=", "embedding", ".", "vectors", "[", "embedding_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.IntersectedVocab.get_embedding_dim": [[315, 317], ["None"], "methods", ["None"], ["", "", "", "def", "get_embedding_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "embedding_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.PretrainedVocab.__init__": [[320, 373], ["os.path.join", "collections.defaultdict", "torch.FloatTensor", "range", "registry.get", "RuntimeError", "pythia.utils.general.get_pythia_root", "len", "registry.get.write", "len", "len", "torchtext.vocab.PretrainedVocab.itos.keys", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["    ", "def", "__init__", "(", "self", ",", "embedding_name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Use this if you want to use pretrained embedding. See description\n        of IntersectedVocab to get a list of the embedding available from\n        torchtext\n\n        Parameters\n        ----------\n        embedding_name : str\n            Name of the pretrained alias for the embedding to used\n        \"\"\"", "\n", "self", ".", "type", "=", "\"pretrained\"", "\n", "\n", "if", "embedding_name", "not", "in", "vocab", ".", "pretrained_aliases", ":", "\n", "            ", "from", "pythia", ".", "common", ".", "registry", "import", "registry", "\n", "\n", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "error", "=", "\"Unknown embedding type: %s\"", "%", "embedding_name", ",", "\"error\"", "\n", "if", "writer", "is", "not", "None", ":", "\n", "                ", "writer", ".", "write", "(", "error", ",", "\"error\"", ")", "\n", "", "raise", "RuntimeError", "(", "error", ")", "\n", "\n", "", "vector_cache", "=", "os", ".", "path", ".", "join", "(", "get_pythia_root", "(", ")", ",", "\".vector_cache\"", ")", "\n", "\n", "embedding", "=", "vocab", ".", "pretrained_aliases", "[", "embedding_name", "]", "(", "cache", "=", "vector_cache", ")", "\n", "\n", "self", ".", "UNK_INDEX", "=", "3", "\n", "self", ".", "stoi", "=", "defaultdict", "(", "lambda", ":", "self", ".", "UNK_INDEX", ")", "\n", "self", ".", "itos", "=", "{", "}", "\n", "\n", "self", ".", "itos", "[", "self", ".", "PAD_INDEX", "]", "=", "self", ".", "PAD_TOKEN", "\n", "self", ".", "itos", "[", "self", ".", "SOS_INDEX", "]", "=", "self", ".", "SOS_TOKEN", "\n", "self", ".", "itos", "[", "self", ".", "EOS_INDEX", "]", "=", "self", ".", "EOS_TOKEN", "\n", "self", ".", "itos", "[", "self", ".", "UNK_INDEX", "]", "=", "self", ".", "UNK_TOKEN", "\n", "\n", "self", ".", "stoi", "[", "self", ".", "SOS_TOKEN", "]", "=", "self", ".", "SOS_INDEX", "\n", "self", ".", "stoi", "[", "self", ".", "EOS_TOKEN", "]", "=", "self", ".", "EOS_INDEX", "\n", "self", ".", "stoi", "[", "self", ".", "PAD_TOKEN", "]", "=", "self", ".", "PAD_INDEX", "\n", "self", ".", "stoi", "[", "self", ".", "UNK_TOKEN", "]", "=", "self", ".", "UNK_INDEX", "\n", "\n", "self", ".", "vectors", "=", "torch", ".", "FloatTensor", "(", "\n", "len", "(", "self", ".", "itos", ".", "keys", "(", ")", ")", "+", "len", "(", "embedding", ".", "itos", ")", ",", "len", "(", "embedding", ".", "vectors", "[", "0", "]", ")", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "self", ".", "vectors", "[", "i", "]", "=", "torch", ".", "ones_like", "(", "self", ".", "vectors", "[", "i", "]", ")", "*", "0.1", "*", "i", "\n", "\n", "", "index", "=", "4", "\n", "for", "word", "in", "embedding", ".", "stoi", ":", "\n", "            ", "self", ".", "itos", "[", "index", "]", "=", "word", "\n", "self", ".", "stoi", "[", "word", "]", "=", "index", "\n", "actual_index", "=", "embedding", ".", "stoi", "[", "word", "]", "\n", "self", ".", "vectors", "[", "index", "]", "=", "embedding", ".", "vectors", "[", "actual_index", "]", "\n", "index", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.WordToVectorDict.__init__": [[376, 378], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.WordToVectorDict.__getitem__": [[379, 382], ["numpy.mean", "torchtext.vocab.WordToVectorDict.model.get_word_vector", "word.split"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "word", ")", ":", "\n", "# Check if mean for word split needs to be done here", "\n", "        ", "return", "np", ".", "mean", "(", "[", "self", ".", "model", ".", "get_word_vector", "(", "w", ")", "for", "w", "in", "word", ".", "split", "(", "\" \"", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.ModelVocab.__init__": [[385, 409], ["torchtext.vocab.BaseVocab.__init__", "ValueError", "torchtext.vocab.ModelVocab._load_fasttext_model"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor._load_fasttext_model"], ["    ", "def", "__init__", "(", "self", ",", "name", ",", "model_file", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Special vocab which is not really vocabulary but instead a model\n        which returns embedding directly instead of vocabulary. This is just\n        an abstraction over a model which generates embeddings directly.\n        For e.g. for fasttext model we encapsulate it inside this and provide\n        it as a vocab so that the API of the vocab remains same.\n\n        NOTE: stoi's functionality will remain same but it is actually calling\n        a function to get word vectors. Currently, only fasttext is supported.\n\n        Parameters\n        ----------\n        name : str\n            Name of the embedding model which this vocab currently is loading\n        model_file : str\n            File from which model will be loaded. This API might need to be\n            changed in future.\n        \"\"\"", "\n", "super", "(", "ModelVocab", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "type", "=", "\"model\"", "\n", "if", "name", "!=", "\"fasttext\"", ":", "\n", "            ", "raise", "ValueError", "(", "\"Model vocab only supports fasttext as of now\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_load_fasttext_model", "(", "model_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.ModelVocab._load_fasttext_model": [[410, 421], ["pythia.utils.general.get_pythia_root", "os.path.join", "registry.get().write", "load_model", "torchtext.vocab.WordToVectorDict", "registry.get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "", "def", "_load_fasttext_model", "(", "self", ",", "model_file", ")", ":", "\n", "        ", "from", "fastText", "import", "load_model", "\n", "from", "pythia", ".", "common", ".", "registry", "import", "registry", "\n", "\n", "pythia_root", "=", "get_pythia_root", "(", ")", "\n", "model_file", "=", "os", ".", "path", ".", "join", "(", "pythia_root", ",", "model_file", ")", "\n", "\n", "registry", ".", "get", "(", "\"writer\"", ")", ".", "write", "(", "\"Loading fasttext model now from %s\"", "%", "model_file", ")", "\n", "\n", "self", ".", "model", "=", "load_model", "(", "model_file", ")", "\n", "self", ".", "stoi", "=", "WordToVectorDict", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.ModelVocab.get_embedding_dim": [[422, 424], ["torchtext.vocab.ModelVocab.model.get_dimension"], "methods", ["None"], ["", "def", "get_embedding_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "get_dimension", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.ExtractedVocab.__init__": [[427, 442], ["torchtext.vocab.BaseVocab.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "base_path", ",", "emb_dim", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Special vocab which is not really vocabulary but instead a class\n        which returns embedding pre-extracted from files. Can be used load\n        word embeddings from popular models like ELMo and BERT\n\n\n        Parameters\n        ----------\n        base_path: str\n            path containing saved files with embeddings one file per txt item\n        \"\"\"", "\n", "super", "(", "ExtractedVocab", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "type", "=", "\"extracted\"", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "base_path", "=", "base_path", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.ExtractedVocab.get_dim": [[443, 445], ["None"], "methods", ["None"], ["", "def", "get_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "emb_dim", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_metrics.TestModuleMetrics.test_caption_bleu4": [[16, 52], ["os.path.join", "pythia.utils.configuration.ConfigNode", "os.path.join", "os.path.abspath", "pythia.tasks.processors.CaptionProcessor", "pythia.common.registry.registry.register", "pythia.CaptionBleu4Metric", "pythia.common.sample.Sample", "dict", "torch.empty", "pythia.common.sample.Sample.answers.fill_", "torch.zeros", "test_metrics.TestModuleMetrics.assertEqual", "torch.empty", "pythia.common.sample.Sample.answers.fill_", "torch.zeros", "test_metrics.TestModuleMetrics.assertAlmostEqual", "os.path.abspath", "open", "yaml.load", "os.path.abspath", "pythia.CaptionBleu4Metric.calculate().item", "pythia.CaptionBleu4Metric.calculate().item", "os.path.abspath", "pythia.CaptionBleu4Metric.calculate", "pythia.CaptionBleu4Metric.calculate"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.MeanReciprocalRank.calculate", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.MeanReciprocalRank.calculate"], ["    ", "def", "test_caption_bleu4", "(", "self", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ",", "\n", "\"../../../pythia/common/defaults/configs/tasks/captioning/coco.yml\"", ",", "\n", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "abspath", "(", "path", ")", ")", "as", "f", ":", "\n", "            ", "config", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n", "", "config", "=", "ConfigNode", "(", "config", ")", "\n", "captioning_config", "=", "config", ".", "task_attributes", ".", "captioning", ".", "dataset_attributes", ".", "coco", "\n", "caption_processor_config", "=", "captioning_config", ".", "processors", ".", "caption_processor", "\n", "vocab_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ",", "\"..\"", ",", "\"..\"", ",", "\"data\"", ",", "\"vocab.txt\"", ")", "\n", "caption_processor_config", ".", "params", ".", "vocab", ".", "vocab_file", "=", "os", ".", "path", ".", "abspath", "(", "vocab_path", ")", "\n", "caption_processor", "=", "CaptionProcessor", "(", "caption_processor_config", ".", "params", ")", "\n", "registry", ".", "register", "(", "\"coco_caption_processor\"", ",", "caption_processor", ")", "\n", "\n", "caption_bleu4", "=", "metrics", ".", "CaptionBleu4Metric", "(", ")", "\n", "expected", "=", "Sample", "(", ")", "\n", "predicted", "=", "dict", "(", ")", "\n", "\n", "# Test complete match", "\n", "expected", ".", "answers", "=", "torch", ".", "empty", "(", "(", "5", ",", "5", ",", "10", ")", ")", "\n", "expected", ".", "answers", ".", "fill_", "(", "4", ")", "\n", "predicted", "[", "\"scores\"", "]", "=", "torch", ".", "zeros", "(", "(", "5", ",", "10", ",", "19", ")", ")", "\n", "predicted", "[", "\"scores\"", "]", "[", ":", ",", ":", ",", "4", "]", "=", "1.0", "\n", "\n", "self", ".", "assertEqual", "(", "caption_bleu4", ".", "calculate", "(", "expected", ",", "predicted", ")", ".", "item", "(", ")", ",", "1.0", ")", "\n", "\n", "# Test partial match", "\n", "expected", ".", "answers", "=", "torch", ".", "empty", "(", "(", "5", ",", "5", ",", "10", ")", ")", "\n", "expected", ".", "answers", ".", "fill_", "(", "4", ")", "\n", "predicted", "[", "\"scores\"", "]", "=", "torch", ".", "zeros", "(", "(", "5", ",", "10", ",", "19", ")", ")", "\n", "predicted", "[", "\"scores\"", "]", "[", ":", ",", "0", ":", "5", ",", "4", "]", "=", "1.0", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "caption_bleu4", ".", "calculate", "(", "expected", ",", "predicted", ")", ".", "item", "(", ")", ",", "0.3928", ",", "4", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_layers.TestModuleLayers.setUp": [[14, 16], ["torch.manual_seed"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "1234", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_layers.TestModuleLayers.test_conv_net": [[17, 27], ["pythia.ConvNet", "torch.randn", "pythia.ConvNet.", "torch.Size", "test_layers.TestModuleLayers.assertEqual", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "layers.ConvNet.size", "[].item", "[].item"], "methods", ["None"], ["", "def", "test_conv_net", "(", "self", ")", ":", "\n", "        ", "conv_net", "=", "layers", ".", "ConvNet", "(", "150", ",", "75", ",", "3", ")", "\n", "\n", "input_tensor", "=", "torch", ".", "randn", "(", "4", ",", "150", ",", "64", ",", "64", ")", "\n", "output", "=", "conv_net", "(", "input_tensor", ")", "\n", "expected_size", "=", "torch", ".", "Size", "(", "(", "4", ",", "75", ",", "32", ",", "32", ")", ")", "\n", "self", ".", "assertEqual", "(", "output", ".", "size", "(", ")", ",", "expected_size", ")", "\n", "# Since seed is fix we can check some of tensor values", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "output", "[", "0", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", ".", "item", "(", ")", ",", "-", "6.3501e-01", ",", "decimal", "=", "5", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "output", "[", "3", "]", "[", "74", "]", "[", "31", "]", "[", "31", "]", ".", "item", "(", ")", ",", "6.7757e-01", ",", "decimal", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_layers.TestModuleLayers.test_flatten": [[29, 50], ["pythia.Flatten", "torch.randn", "torch.Size", "pythia.Flatten.size", "test_layers.TestModuleLayers.assertEqual", "torch.randn", "torch.Size", "pythia.Flatten.size", "test_layers.TestModuleLayers.assertEqual", "torch.Size", "torch.randn", "pythia.Flatten.size", "test_layers.TestModuleLayers.assertEqual", "random.randint", "pythia.Flatten.", "pythia.Flatten.", "range", "functools.reduce", "pythia.Flatten."], "methods", ["None"], ["", "def", "test_flatten", "(", "self", ")", ":", "\n", "        ", "flatten", "=", "layers", ".", "Flatten", "(", ")", "\n", "\n", "# Test 3 dim", "\n", "input_tensor", "=", "torch", ".", "randn", "(", "5", ",", "6", ",", "10", ")", "\n", "expected_size", "=", "torch", ".", "Size", "(", "(", "5", ",", "60", ")", ")", "\n", "actual_size", "=", "flatten", "(", "input_tensor", ")", ".", "size", "(", ")", "\n", "self", ".", "assertEqual", "(", "actual_size", ",", "expected_size", ")", "\n", "\n", "# Test 1 dim", "\n", "input_tensor", "=", "torch", ".", "randn", "(", "5", ")", "\n", "expected_size", "=", "torch", ".", "Size", "(", "(", "5", ",", ")", ")", "\n", "actual_size", "=", "flatten", "(", "input_tensor", ")", ".", "size", "(", ")", "\n", "self", ".", "assertEqual", "(", "actual_size", ",", "expected_size", ")", "\n", "\n", "# Test 6 dim", "\n", "size_list", "=", "[", "random", ".", "randint", "(", "2", ",", "4", ")", "for", "_", "in", "range", "(", "7", ")", "]", "\n", "expected_size", "=", "torch", ".", "Size", "(", "(", "size_list", "[", "0", "]", ",", "functools", ".", "reduce", "(", "operator", ".", "mul", ",", "size_list", "[", "1", ":", "]", ")", ")", ")", "\n", "input_tensor", "=", "torch", ".", "randn", "(", "*", "size_list", ")", "\n", "actual_size", "=", "flatten", "(", "input_tensor", ")", ".", "size", "(", ")", "\n", "self", ".", "assertEqual", "(", "actual_size", ",", "expected_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_layers.TestModuleLayers.test_unflatten": [[51, 65], ["pythia.UnFlatten", "torch.randn", "torch.Size", "pythia.UnFlatten.size", "test_layers.TestModuleLayers.assertEqual", "torch.randn", "torch.Size", "pythia.UnFlatten.size", "test_layers.TestModuleLayers.assertEqual", "pythia.UnFlatten.", "pythia.UnFlatten."], "methods", ["None"], ["", "def", "test_unflatten", "(", "self", ")", ":", "\n", "        ", "unflatten", "=", "layers", ".", "UnFlatten", "(", ")", "\n", "\n", "# Test 2 dim to 3 dim", "\n", "input_tensor", "=", "torch", ".", "randn", "(", "5", ",", "60", ")", "\n", "expected_size", "=", "torch", ".", "Size", "(", "(", "5", ",", "6", ",", "10", ")", ")", "\n", "actual_size", "=", "unflatten", "(", "input_tensor", ",", "sizes", "=", "[", "6", ",", "10", "]", ")", ".", "size", "(", ")", "\n", "self", ".", "assertEqual", "(", "actual_size", ",", "expected_size", ")", "\n", "\n", "# Test 1 dim", "\n", "input_tensor", "=", "torch", ".", "randn", "(", "5", ")", "\n", "expected_size", "=", "torch", ".", "Size", "(", "(", "5", ",", ")", ")", "\n", "actual_size", "=", "unflatten", "(", "input_tensor", ",", "sizes", "=", "[", "]", ")", ".", "size", "(", ")", "\n", "self", ".", "assertEqual", "(", "expected_size", ",", "actual_size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_fusions.TestModuleFusions.setUp": [[14, 19], ["torch.randn", "torch.randn"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "bsize", "=", "2", "\n", "self", ".", "x", "=", "[", "torch", ".", "randn", "(", "bsize", ",", "10", ")", ",", "torch", ".", "randn", "(", "bsize", ",", "20", ")", "]", "\n", "self", ".", "input_dims", "=", "[", "self", ".", "x", "[", "0", "]", ".", "shape", "[", "-", "1", "]", ",", "self", ".", "x", "[", "1", "]", ".", "shape", "[", "-", "1", "]", "]", "\n", "self", ".", "output_dims", "=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_fusions.TestModuleFusions.test_BlockFusion": [[20, 27], ["pythia.Block", "pythia.Block.", "torch.cuda.is_available", "pythia.Block.cuda", "pythia.Block.", "torch.Size", "test_fusions.TestModuleFusions.x[].cuda", "test_fusions.TestModuleFusions.x[].cuda"], "methods", ["None"], ["", "def", "test_BlockFusion", "(", "self", ")", ":", "\n", "        ", "fusion", "=", "fusions", ".", "Block", "(", "self", ".", "input_dims", ",", "self", ".", "output_dims", ",", "mm_dim", "=", "20", ")", "\n", "out", "=", "fusion", "(", "self", ".", "x", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "fusion", ".", "cuda", "(", ")", "\n", "out", "=", "fusion", "(", "[", "self", ".", "x", "[", "0", "]", ".", "cuda", "(", ")", ",", "self", ".", "x", "[", "1", "]", ".", "cuda", "(", ")", "]", ")", "\n", "", "assert", "torch", ".", "Size", "(", "[", "2", ",", "2", "]", ")", "==", "out", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_fusions.TestModuleFusions.test_BlockTucker": [[28, 35], ["pythia.BlockTucker", "pythia.BlockTucker.", "torch.cuda.is_available", "pythia.BlockTucker.cuda", "pythia.BlockTucker.", "torch.Size", "test_fusions.TestModuleFusions.x[].cuda", "test_fusions.TestModuleFusions.x[].cuda"], "methods", ["None"], ["", "def", "test_BlockTucker", "(", "self", ")", ":", "\n", "        ", "fusion", "=", "fusions", ".", "BlockTucker", "(", "self", ".", "input_dims", ",", "self", ".", "output_dims", ",", "mm_dim", "=", "20", ")", "\n", "out", "=", "fusion", "(", "self", ".", "x", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "fusion", ".", "cuda", "(", ")", "\n", "out", "=", "fusion", "(", "[", "self", ".", "x", "[", "0", "]", ".", "cuda", "(", ")", ",", "self", ".", "x", "[", "1", "]", ".", "cuda", "(", ")", "]", ")", "\n", "", "assert", "torch", ".", "Size", "(", "[", "2", ",", "2", "]", ")", "==", "out", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_fusions.TestModuleFusions.test_Mutan": [[36, 43], ["pythia.Mutan", "pythia.Mutan.", "torch.cuda.is_available", "pythia.Mutan.cuda", "pythia.Mutan.", "torch.Size", "test_fusions.TestModuleFusions.x[].cuda", "test_fusions.TestModuleFusions.x[].cuda"], "methods", ["None"], ["", "def", "test_Mutan", "(", "self", ")", ":", "\n", "        ", "fusion", "=", "fusions", ".", "Mutan", "(", "self", ".", "input_dims", ",", "self", ".", "output_dims", ",", "mm_dim", "=", "20", ")", "\n", "out", "=", "fusion", "(", "self", ".", "x", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "fusion", ".", "cuda", "(", ")", "\n", "out", "=", "fusion", "(", "[", "self", ".", "x", "[", "0", "]", ".", "cuda", "(", ")", ",", "self", ".", "x", "[", "1", "]", ".", "cuda", "(", ")", "]", ")", "\n", "", "assert", "torch", ".", "Size", "(", "[", "2", ",", "2", "]", ")", "==", "out", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_fusions.TestModuleFusions.test_Tucker": [[44, 51], ["pythia.Tucker", "pythia.Tucker.", "torch.cuda.is_available", "pythia.Tucker.cuda", "pythia.Tucker.", "torch.Size", "test_fusions.TestModuleFusions.x[].cuda", "test_fusions.TestModuleFusions.x[].cuda"], "methods", ["None"], ["", "def", "test_Tucker", "(", "self", ")", ":", "\n", "        ", "fusion", "=", "fusions", ".", "Tucker", "(", "self", ".", "input_dims", ",", "self", ".", "output_dims", ",", "mm_dim", "=", "20", ")", "\n", "out", "=", "fusion", "(", "self", ".", "x", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "fusion", ".", "cuda", "(", ")", "\n", "out", "=", "fusion", "(", "[", "self", ".", "x", "[", "0", "]", ".", "cuda", "(", ")", ",", "self", ".", "x", "[", "1", "]", ".", "cuda", "(", ")", "]", ")", "\n", "", "assert", "torch", ".", "Size", "(", "[", "2", ",", "2", "]", ")", "==", "out", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_fusions.TestModuleFusions.test_MLB": [[52, 59], ["pythia.MLB", "pythia.MLB.", "torch.cuda.is_available", "pythia.MLB.cuda", "pythia.MLB.", "torch.Size", "test_fusions.TestModuleFusions.x[].cuda", "test_fusions.TestModuleFusions.x[].cuda"], "methods", ["None"], ["", "def", "test_MLB", "(", "self", ")", ":", "\n", "        ", "fusion", "=", "fusions", ".", "MLB", "(", "self", ".", "input_dims", ",", "self", ".", "output_dims", ",", "mm_dim", "=", "20", ")", "\n", "out", "=", "fusion", "(", "self", ".", "x", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "fusion", ".", "cuda", "(", ")", "\n", "out", "=", "fusion", "(", "[", "self", ".", "x", "[", "0", "]", ".", "cuda", "(", ")", ",", "self", ".", "x", "[", "1", "]", ".", "cuda", "(", ")", "]", ")", "\n", "", "assert", "torch", ".", "Size", "(", "[", "2", ",", "2", "]", ")", "==", "out", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_fusions.TestModuleFusions.test_MFB": [[60, 67], ["pythia.MFB", "pythia.MFB.", "torch.cuda.is_available", "pythia.MFB.cuda", "pythia.MFB.", "torch.Size", "test_fusions.TestModuleFusions.x[].cuda", "test_fusions.TestModuleFusions.x[].cuda"], "methods", ["None"], ["", "def", "test_MFB", "(", "self", ")", ":", "\n", "        ", "fusion", "=", "fusions", ".", "MFB", "(", "self", ".", "input_dims", ",", "self", ".", "output_dims", ",", "mm_dim", "=", "20", ")", "\n", "out", "=", "fusion", "(", "self", ".", "x", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "fusion", ".", "cuda", "(", ")", "\n", "out", "=", "fusion", "(", "[", "self", ".", "x", "[", "0", "]", ".", "cuda", "(", ")", ",", "self", ".", "x", "[", "1", "]", ".", "cuda", "(", ")", "]", ")", "\n", "", "assert", "torch", ".", "Size", "(", "[", "2", ",", "2", "]", ")", "==", "out", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_fusions.TestModuleFusions.test_MFH": [[68, 75], ["pythia.MFH", "pythia.MFH.", "torch.cuda.is_available", "pythia.MFH.cuda", "pythia.MFH.", "torch.Size", "test_fusions.TestModuleFusions.x[].cuda", "test_fusions.TestModuleFusions.x[].cuda"], "methods", ["None"], ["", "def", "test_MFH", "(", "self", ")", ":", "\n", "        ", "fusion", "=", "fusions", ".", "MFH", "(", "self", ".", "input_dims", ",", "self", ".", "output_dims", ",", "mm_dim", "=", "20", ")", "\n", "out", "=", "fusion", "(", "self", ".", "x", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "fusion", ".", "cuda", "(", ")", "\n", "out", "=", "fusion", "(", "[", "self", ".", "x", "[", "0", "]", ".", "cuda", "(", ")", ",", "self", ".", "x", "[", "1", "]", ".", "cuda", "(", ")", "]", ")", "\n", "", "assert", "torch", ".", "Size", "(", "[", "2", ",", "2", "]", ")", "==", "out", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_fusions.TestModuleFusions.test_MCB": [[76, 83], ["pythia.MCB", "pythia.MCB.", "torch.cuda.is_available", "pythia.MCB.cuda", "pythia.MCB.", "torch.Size", "test_fusions.TestModuleFusions.x[].cuda", "test_fusions.TestModuleFusions.x[].cuda"], "methods", ["None"], ["", "def", "test_MCB", "(", "self", ")", ":", "\n", "        ", "fusion", "=", "fusions", ".", "MCB", "(", "self", ".", "input_dims", ",", "self", ".", "output_dims", ",", "mm_dim", "=", "100", ")", "\n", "out", "=", "fusion", "(", "self", ".", "x", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "fusion", ".", "cuda", "(", ")", "\n", "out", "=", "fusion", "(", "[", "self", ".", "x", "[", "0", "]", ".", "cuda", "(", ")", ",", "self", ".", "x", "[", "1", "]", ".", "cuda", "(", ")", "]", ")", "\n", "", "assert", "torch", ".", "Size", "(", "[", "2", ",", "2", "]", ")", "==", "out", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_fusions.TestModuleFusions.test_LinearSum": [[84, 91], ["pythia.LinearSum", "pythia.LinearSum.", "torch.cuda.is_available", "pythia.LinearSum.cuda", "pythia.LinearSum.", "torch.Size", "test_fusions.TestModuleFusions.x[].cuda", "test_fusions.TestModuleFusions.x[].cuda"], "methods", ["None"], ["", "def", "test_LinearSum", "(", "self", ")", ":", "\n", "        ", "fusion", "=", "fusions", ".", "LinearSum", "(", "self", ".", "input_dims", ",", "self", ".", "output_dims", ",", "mm_dim", "=", "20", ")", "\n", "out", "=", "fusion", "(", "self", ".", "x", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "fusion", ".", "cuda", "(", ")", "\n", "out", "=", "fusion", "(", "[", "self", ".", "x", "[", "0", "]", ".", "cuda", "(", ")", ",", "self", ".", "x", "[", "1", "]", ".", "cuda", "(", ")", "]", ")", "\n", "", "assert", "torch", ".", "Size", "(", "[", "2", ",", "2", "]", ")", "==", "out", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_fusions.TestModuleFusions.test_ConcatMLP": [[92, 99], ["pythia.ConcatMLP", "pythia.ConcatMLP.", "torch.cuda.is_available", "pythia.ConcatMLP.cuda", "pythia.ConcatMLP.", "torch.Size", "test_fusions.TestModuleFusions.x[].cuda", "test_fusions.TestModuleFusions.x[].cuda"], "methods", ["None"], ["", "def", "test_ConcatMLP", "(", "self", ")", ":", "\n", "        ", "fusion", "=", "fusions", ".", "ConcatMLP", "(", "self", ".", "input_dims", ",", "self", ".", "output_dims", ",", "dimensions", "=", "[", "5", ",", "5", "]", ")", "\n", "out", "=", "fusion", "(", "self", ".", "x", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "fusion", ".", "cuda", "(", ")", "\n", "out", "=", "fusion", "(", "[", "self", ".", "x", "[", "0", "]", ".", "cuda", "(", ")", ",", "self", ".", "x", "[", "1", "]", ".", "cuda", "(", ")", "]", ")", "\n", "", "assert", "torch", ".", "Size", "(", "[", "2", ",", "2", "]", ")", "==", "out", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.test_losses.TestModuleLosses.test_caption_cross_entropy": [[9, 29], ["pythia.CaptionCrossEntropyLoss", "dict", "dict", "torch.empty", "expected[].fill_", "torch.zeros", "test_losses.TestModuleLosses.assertEqual", "torch.manual_seed", "torch.randint", "torch.rand", "test_losses.TestModuleLosses.assertAlmostEqual", "pythia.CaptionCrossEntropyLoss.item", "pythia.CaptionCrossEntropyLoss.item", "pythia.CaptionCrossEntropyLoss.", "pythia.CaptionCrossEntropyLoss."], "methods", ["None"], ["    ", "def", "test_caption_cross_entropy", "(", "self", ")", ":", "\n", "        ", "caption_ce_loss", "=", "losses", ".", "CaptionCrossEntropyLoss", "(", ")", "\n", "\n", "expected", "=", "dict", "(", ")", "\n", "predicted", "=", "dict", "(", ")", "\n", "\n", "# Test complete match", "\n", "expected", "[", "\"targets\"", "]", "=", "torch", ".", "empty", "(", "(", "1", ",", "10", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "expected", "[", "\"targets\"", "]", ".", "fill_", "(", "4", ")", "\n", "predicted", "[", "\"scores\"", "]", "=", "torch", ".", "zeros", "(", "(", "1", ",", "10", ",", "10", ")", ")", "\n", "predicted", "[", "\"scores\"", "]", "[", ":", ",", ":", ",", "4", "]", "=", "100.0", "\n", "\n", "self", ".", "assertEqual", "(", "caption_ce_loss", "(", "expected", ",", "predicted", ")", ".", "item", "(", ")", ",", "0.0", ")", "\n", "\n", "# Test random initialized", "\n", "torch", ".", "manual_seed", "(", "1234", ")", "\n", "expected", "[", "\"targets\"", "]", "=", "torch", ".", "randint", "(", "0", ",", "9491", ",", "(", "5", ",", "10", ")", ")", "\n", "predicted", "[", "\"scores\"", "]", "=", "torch", ".", "rand", "(", "(", "5", ",", "10", ",", "9491", ")", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "caption_ce_loss", "(", "expected", ",", "predicted", ")", ".", "item", "(", ")", ",", "9.2507", ",", "4", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.Metrics.__init__": [[69, 75], ["pythia.common.registry.registry.get", "metrics.Metrics._init_metrics", "isinstance"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.Metrics._init_metrics"], ["def", "__init__", "(", "self", ",", "metric_list", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "metric_list", ",", "list", ")", ":", "\n", "            ", "metric_list", "=", "[", "metric_list", "]", "\n", "\n", "", "self", ".", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "self", ".", "metrics", "=", "self", ".", "_init_metrics", "(", "metric_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.Metrics._init_metrics": [[76, 103], ["isinstance", "pythia.common.registry.registry.get_metric_class", "pythia.common.registry.registry.get_metric_class.", "getattr", "ValueError", "hasattr", "ValueError", "isinstance", "TypeError"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_metric_class"], ["", "def", "_init_metrics", "(", "self", ",", "metric_list", ")", ":", "\n", "        ", "metrics", "=", "{", "}", "\n", "#pdb.set_trace()", "\n", "for", "metric", "in", "metric_list", ":", "\n", "            ", "params", "=", "{", "}", "\n", "if", "isinstance", "(", "metric", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "                ", "if", "not", "hasattr", "(", "metric", ",", "\"type\"", ")", ":", "\n", "                    ", "raise", "ValueError", "(", "\n", "\"Metric {} needs to have 'type' attribute\"", ".", "format", "(", "metric", ")", "\n", ")", "\n", "", "metric", "=", "metric", ".", "type", "\n", "params", "=", "getattr", "(", "metric", ",", "\"params\"", ",", "{", "}", ")", "\n", "", "else", ":", "\n", "                ", "if", "not", "isinstance", "(", "metric", ",", "str", ")", ":", "\n", "                    ", "raise", "TypeError", "(", "\n", "\"Metric {} has inappropriate type\"", "\n", "\"'dict' or 'str' allowed\"", ".", "format", "(", "metric", ")", "\n", ")", "\n", "\n", "", "", "metric_cls", "=", "registry", ".", "get_metric_class", "(", "metric", ")", "\n", "if", "metric_cls", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"No metric named {} registered to registry\"", ".", "format", "(", "metric", ")", "\n", ")", "\n", "", "metrics", "[", "metric", "]", "=", "metric_cls", "(", "**", "params", ")", "\n", "\n", "", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.Metrics.__call__": [[104, 131], ["pythia.common.registry.registry.register", "hasattr", "torch.no_grad", "metrics.Metrics.metrics.items", "metric_object._calculate_with_checks", "isinstance", "torch.tensor", "values[].float", "values[].dim", "values[].view"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.BaseMetric._calculate_with_checks"], ["", "def", "__call__", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "values", "=", "{", "}", "\n", "if", "not", "hasattr", "(", "sample_list", ",", "\"targets\"", ")", ":", "\n", "            ", "return", "values", "\n", "\n", "", "dataset_type", "=", "sample_list", ".", "dataset_type", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "metric_name", ",", "metric_object", "in", "self", ".", "metrics", ".", "items", "(", ")", ":", "\n", "                ", "key", "=", "\"{}/{}\"", ".", "format", "(", "dataset_type", ",", "metric_name", ")", "\n", "values", "[", "key", "]", "=", "metric_object", ".", "_calculate_with_checks", "(", "\n", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", "\n", ")", "\n", "\n", "if", "not", "isinstance", "(", "values", "[", "key", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "                    ", "values", "[", "key", "]", "=", "torch", ".", "tensor", "(", "values", "[", "key", "]", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "", "else", ":", "\n", "                    ", "values", "[", "key", "]", "=", "values", "[", "key", "]", ".", "float", "(", ")", "\n", "\n", "", "if", "values", "[", "key", "]", ".", "dim", "(", ")", "==", "0", ":", "\n", "                    ", "values", "[", "key", "]", "=", "values", "[", "key", "]", ".", "view", "(", "1", ")", "\n", "\n", "", "", "", "registry", ".", "register", "(", "\n", "\"{}.{}.{}\"", ".", "format", "(", "\"metrics\"", ",", "sample_list", ".", "dataset_name", ",", "dataset_type", ")", ",", "values", "\n", ")", "\n", "\n", "return", "values", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.BaseMetric.__init__": [[143, 145], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.BaseMetric.calculate": [[146, 163], ["NotImplementedError"], "methods", ["None"], ["", "def", "calculate", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Abstract method to be implemented by the child class. Takes\n        in a ``SampleList`` and a dict returned by model as output and\n        returns back a float tensor/number indicating value for this metric.\n\n        Args:\n            sample_list (SampleList): SampleList provided by the dataloader for the\n                                current iteration.\n            model_output (Dict): Output dict from the model for the current\n                                 SampleList\n\n        Returns:\n            torch.Tensor|float: Value of the metric.\n\n        \"\"\"", "\n", "# Override in your child class", "\n", "raise", "NotImplementedError", "(", "\"'calculate' must be implemented in the child class\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.BaseMetric.__call__": [[164, 166], ["metrics.BaseMetric.calculate"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.MeanReciprocalRank.calculate"], ["", "def", "__call__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "calculate", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.BaseMetric._calculate_with_checks": [[167, 170], ["metrics.BaseMetric.calculate"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.MeanReciprocalRank.calculate"], ["", "def", "_calculate_with_checks", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "value", "=", "self", ".", "calculate", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.Accuracy.__init__": [[179, 181], ["metrics.BaseMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"accuracy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.Accuracy.calculate": [[182, 217], ["len", "output.dim", "expected.dim", "output.dim", "expected.dim", "torch.max", "torch.max", "output.squeeze"], "methods", ["None"], ["", "def", "calculate", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate accuracy and return it back.\n\n        Args:\n            sample_list (SampleList): SampleList provided by DataLoader for\n                                current iteration\n            model_output (Dict): Dict returned by model.\n\n        Returns:\n            torch.FloatTensor: accuracy.\n\n        \"\"\"", "\n", "#pdb.set_trace()", "\n", "output", "=", "model_output", "[", "\"scores\"", "]", "\n", "expected", "=", "sample_list", "[", "\"targets\"", "]", "\n", "\n", "assert", "(", "\n", "output", ".", "dim", "(", ")", "<=", "2", "\n", ")", ",", "\"Output from model shouldn't have more than dim 2 for accuracy\"", "\n", "assert", "(", "\n", "expected", ".", "dim", "(", ")", "<=", "2", "\n", ")", ",", "\"Expected target shouldn't have more than dim 2 for accuracy\"", "\n", "\n", "if", "output", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "output", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "[", "1", "]", "\n", "\n", "# If more than 1", "\n", "", "if", "expected", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "expected", "=", "torch", ".", "max", "(", "expected", ",", "1", ")", "[", "1", "]", "\n", "\n", "", "correct", "=", "(", "expected", "==", "output", ".", "squeeze", "(", ")", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "\n", "total", "=", "len", "(", "expected", ")", "\n", "\n", "value", "=", "correct", "/", "total", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.AccuracyConsistency.__init__": [[225, 227], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.AccuracyConsistency.calculate": [[228, 328], ["expected_reas.argmax.argmax.new_zeros", "expected_reas.argmax.new_zeros.scatter_", "expected_sq.argmax.argmax.new_zeros", "expected_sq.argmax.new_zeros.scatter_", "expected_sq.argmax.argmax.new_zeros", "expected_sq.argmax.new_zeros.scatter_", "expected_reas.argmax.new_zeros.new_zeros", "expected_reas.new_zeros.new_zeros.scatter_", "expected_reas.argmax.new_zeros.new_zeros", "expected_reas.new_zeros.new_zeros.scatter_", "expected_reas.argmax.new_zeros.new_zeros", "expected_reas.new_zeros.new_zeros.scatter_", "output_reas.argmax.argmax.dim", "expected_reas.argmax.argmax.dim", "output_reas.argmax.argmax.dim", "output_reas.argmax.argmax.argmax", "expected_reas.argmax.argmax.dim", "expected_reas.argmax.argmax.argmax", "output_sq.argmax.argmax.dim", "expected_sq.argmax.argmax.dim", "output_sq.argmax.argmax.dim", "output_sq.argmax.argmax.argmax", "expected_sq.argmax.argmax.dim", "expected_sq.argmax.argmax.argmax", "output_oq.argmax.argmax.dim", "expected_oq.argmax.argmax.dim", "output_oq.argmax.argmax.dim", "output_oq.argmax.argmax.argmax", "expected_oq.argmax.argmax.dim", "expected_oq.argmax.argmax.argmax", "output_reas.argmax.argmax.view", "output_sq.argmax.argmax.view", "output_oq.argmax.argmax.view", "expected_reas.argmax.argmax.view", "expected_sq.argmax.argmax.view", "expected_oq.argmax.argmax.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "expected_reas.argmax.argmax.size", "torch.sum", "expected_sq.argmax.argmax.size", "torch.sum", "expected_oq.argmax.argmax.size", "model_output[].size", "model_output[].size", "model_output[].size", "expected_reas.argmax.new_zeros.size", "expected_reas.argmax.new_zeros.size", "expected_reas.argmax.new_zeros.size", "torch.sum", "torch.sum", "scores_oq.float", "scores_reas.float", "scores_sq.float", "scores_reas.float", "scores_sq.float", "scores_oq.float", "expected_reas.argmax.argmax.size", "quad1.float", "output_reas.argmax.argmax.size", "quad2.float", "output_reas.argmax.argmax.size", "quad3.float", "output_reas.argmax.argmax.size", "quad4.float", "output_reas.argmax.argmax.size", "scores_reas.float", "scores_sq.float", "scores_reas.sum().bool", "scores_sq.sum().bool", "scores_reas.sum().bool", "scores_sq.sum().bool", "scores_sq.sum().bool", "scores_reas.sum().bool", "scores_reas.sum().bool", "scores_sq.sum().bool", "scores_reas.sum", "scores_sq.sum", "scores_reas.sum", "scores_sq.sum", "scores_sq.sum", "scores_reas.sum", "scores_reas.sum", "scores_sq.sum"], "methods", ["None"], ["", "def", "calculate", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate accuracy and return it back.\n\n        Args:\n            sample_list (SampleList): SampleList provided by DataLoader for\n                                current iteration\n            model_output (Dict): Dict returned by model.\n\n        Returns:\n            torch.FloatTensor: accuracy.\n\n        \"\"\"", "\n", "output_reas", "=", "model_output", "[", "\"scores\"", "]", "\n", "expected_reas", "=", "sample_list", "[", "\"targets\"", "]", "\n", "\n", "output_sq", "=", "model_output", "[", "\"scores_sq\"", "]", "\n", "expected_sq", "=", "sample_list", "[", "\"targets_sq\"", "]", "\n", "\n", "output_oq", "=", "model_output", "[", "\"scores_oq\"", "]", "\n", "expected_oq", "=", "sample_list", "[", "\"targets_oq\"", "]", "\n", "\n", "assert", "(", "\n", "output_reas", ".", "dim", "(", ")", "<=", "2", "\n", ")", ",", "\"Output from model shouldn't have more than dim 2 for accuracy\"", "\n", "assert", "(", "\n", "expected_reas", ".", "dim", "(", ")", "<=", "2", "\n", ")", ",", "\"Expected target shouldn't have more than dim 2 for accuracy\"", "\n", "\n", "if", "output_reas", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "output_reas", "=", "output_reas", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "# If more than 1", "\n", "", "if", "expected_reas", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "expected_reas", "=", "expected_reas", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "", "assert", "(", "\n", "output_sq", ".", "dim", "(", ")", "<=", "2", "\n", ")", ",", "\"Output from model shouldn't have more than dim 2 for accuracy\"", "\n", "assert", "(", "\n", "expected_sq", ".", "dim", "(", ")", "<=", "2", "\n", ")", ",", "\"Expected target shouldn't have more than dim 2 for accuracy\"", "\n", "\n", "if", "output_sq", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "output_sq", "=", "output_sq", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "# If more than 1", "\n", "", "if", "expected_sq", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "expected_sq", "=", "expected_sq", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "", "assert", "(", "\n", "output_oq", ".", "dim", "(", ")", "<=", "2", "\n", ")", ",", "\"Output from model shouldn't have more than dim 2 for accuracy\"", "\n", "assert", "(", "\n", "expected_oq", ".", "dim", "(", ")", "<=", "2", "\n", ")", ",", "\"Expected target shouldn't have more than dim 2 for accuracy\"", "\n", "\n", "if", "output_oq", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "output_oq", "=", "output_oq", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "# If more than 1", "\n", "", "if", "expected_oq", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "expected_oq", "=", "expected_oq", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "", "one_hots_reas", "=", "expected_reas", ".", "new_zeros", "(", "*", "model_output", "[", "\"scores\"", "]", ".", "size", "(", ")", ")", "\n", "one_hots_reas", ".", "scatter_", "(", "1", ",", "output_reas", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "\n", "one_hots_sq", "=", "expected_sq", ".", "new_zeros", "(", "*", "model_output", "[", "\"scores\"", "]", ".", "size", "(", ")", ")", "\n", "one_hots_sq", ".", "scatter_", "(", "1", ",", "output_sq", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "\n", "one_hots_oq", "=", "expected_sq", ".", "new_zeros", "(", "*", "model_output", "[", "\"scores\"", "]", ".", "size", "(", ")", ")", "\n", "one_hots_oq", ".", "scatter_", "(", "1", ",", "output_oq", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "\n", "one_hots_reas_expected", "=", "one_hots_reas", ".", "new_zeros", "(", "*", "one_hots_reas", ".", "size", "(", ")", ")", "\n", "one_hots_reas_expected", ".", "scatter_", "(", "1", ",", "expected_reas", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "\n", "one_hots_sq_expected", "=", "one_hots_reas", ".", "new_zeros", "(", "*", "one_hots_reas", ".", "size", "(", ")", ")", "\n", "one_hots_sq_expected", ".", "scatter_", "(", "1", ",", "expected_sq", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "\n", "one_hots_oq_expected", "=", "one_hots_reas", ".", "new_zeros", "(", "*", "one_hots_reas", ".", "size", "(", ")", ")", "\n", "one_hots_oq_expected", ".", "scatter_", "(", "1", ",", "expected_oq", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "\n", "scores_reas", "=", "one_hots_reas", "*", "one_hots_reas_expected", "\n", "scores_sq", "=", "one_hots_sq", "*", "one_hots_sq_expected", "\n", "scores_oq", "=", "one_hots_oq", "*", "one_hots_oq_expected", "\n", "scores_total", "=", "torch", ".", "sum", "(", "scores_reas", ".", "float", "(", ")", ")", "+", "torch", ".", "sum", "(", "scores_sq", ".", "float", "(", ")", ")", "+", "torch", ".", "sum", "(", "scores_oq", ".", "float", "(", ")", ")", "\n", "scores_reas_sub", "=", "torch", ".", "sum", "(", "scores_reas", ".", "float", "(", ")", ")", "+", "torch", ".", "sum", "(", "scores_sq", ".", "float", "(", ")", ")", "\n", "\n", "accuracy_reas", "=", "torch", ".", "sum", "(", "scores_reas", ".", "float", "(", ")", ")", "/", "expected_reas", ".", "size", "(", "0", ")", "\n", "#pdb.set_trace()", "\n", "accuracy_sq", "=", "torch", ".", "sum", "(", "scores_sq", ".", "float", "(", ")", ")", "/", "expected_sq", ".", "size", "(", "0", ")", "\n", "accuracy_oq", "=", "torch", ".", "sum", "(", "scores_oq", ".", "float", "(", ")", ")", "/", "expected_oq", ".", "size", "(", "0", ")", "\n", "#accuracy_total = scores_total/(3*expected_reas.size(0))", "\n", "accuracy_total", "=", "scores_reas_sub", "/", "(", "2", "*", "expected_reas", ".", "size", "(", "0", ")", ")", "\n", "#pdb.set_trace()", "\n", "\n", "quad1", "=", "(", "scores_reas", ".", "sum", "(", "dim", "=", "1", ")", ".", "bool", "(", ")", "*", "scores_sq", ".", "sum", "(", "dim", "=", "1", ")", ".", "bool", "(", ")", ")", ".", "sum", "(", ")", "\n", "quad2", "=", "(", "scores_reas", ".", "sum", "(", "dim", "=", "1", ")", ".", "bool", "(", ")", "*", "(", "~", "(", "scores_sq", ".", "sum", "(", "dim", "=", "1", ")", ".", "bool", "(", ")", ")", ")", ")", ".", "sum", "(", ")", "\n", "quad3", "=", "(", "~", "scores_reas", ".", "sum", "(", "dim", "=", "1", ")", ".", "bool", "(", ")", "*", "(", "(", "scores_sq", ".", "sum", "(", "dim", "=", "1", ")", ".", "bool", "(", ")", ")", ")", ")", ".", "sum", "(", ")", "\n", "quad4", "=", "(", "~", "scores_reas", ".", "sum", "(", "dim", "=", "1", ")", ".", "bool", "(", ")", "*", "(", "~", "(", "scores_sq", ".", "sum", "(", "dim", "=", "1", ")", ".", "bool", "(", ")", ")", ")", ")", ".", "sum", "(", ")", "\n", "return", "quad1", ".", "float", "(", ")", "/", "output_reas", ".", "size", "(", "0", ")", ",", "quad2", ".", "float", "(", ")", "/", "output_reas", ".", "size", "(", "0", ")", ",", "quad3", ".", "float", "(", ")", "/", "output_reas", ".", "size", "(", "0", ")", ",", "quad4", ".", "float", "(", ")", "/", "output_reas", ".", "size", "(", "0", ")", ",", "accuracy_reas", ",", "accuracy_sq", ",", "accuracy_oq", ",", "accuracy_total", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RankAccuracy.__init__": [[582, 584], ["metrics.BaseMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"ranking_accuracy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RankAccuracy.calculate": [[585, 602], ["torch.sum().float", "len", "torch.sum"], "methods", ["None"], ["", "def", "calculate", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate accuracy and return it back.\n\n        Args:\n            sample_list (SampleList): SampleList provided by DataLoader for\n                                current iteration\n            model_output (Dict): Dict returned by model.\n\n        Returns:\n            torch.FloatTensor: accuracy.\n\n        \"\"\"", "\n", "ranking_results", "=", "model_output", "[", "'distance_reas_sub'", "]", "<", "model_output", "[", "'distance_reas_other'", "]", "\n", "num_of_correct_rank_inputs", "=", "torch", ".", "sum", "(", "ranking_results", ")", ".", "float", "(", ")", "\n", "batch_size", "=", "len", "(", "model_output", "[", "'distance_reas_sub'", "]", ")", "\n", "value", "=", "num_of_correct_rank_inputs", "/", "batch_size", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.CaptionBleu4Metric.__init__": [[613, 616], ["metrics.BaseMetric.__init__", "pythia.common.registry.registry.get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"caption_bleu4\"", ")", "\n", "self", ".", "caption_processor", "=", "registry", ".", "get", "(", "\"coco_caption_processor\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.CaptionBleu4Metric.calculate": [[617, 655], ["enumerate", "scores.tolist.tolist.tolist", "enumerate", "hypotheses.extend", "metrics.CaptionBleu4Metric.bleu_score.corpus_bleu", "targets.new_tensor", "references.append", "torch.max", "predictions.append", "len", "len", "metrics.CaptionBleu4Metric.caption_processor", "metrics.CaptionBleu4Metric.caption_processor", "targets[].tolist"], "methods", ["None"], ["", "def", "calculate", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate accuracy and return it back.\n\n        Args:\n            sample_list (SampleList): SampleList provided by DataLoader for\n                                current iteration\n            model_output (Dict): Dict returned by model.\n\n        Returns:\n            torch.FloatTensor: bleu4 score.\n\n        \"\"\"", "\n", "# Create reference and hypotheses captions.", "\n", "references", "=", "[", "]", "\n", "hypotheses", "=", "[", "]", "\n", "\n", "# References", "\n", "targets", "=", "sample_list", ".", "answers", "\n", "for", "j", ",", "p", "in", "enumerate", "(", "targets", ")", ":", "\n", "            ", "img_captions", "=", "[", "\n", "self", ".", "caption_processor", "(", "c", ")", "[", "\"tokens\"", "]", "for", "c", "in", "targets", "[", "j", "]", ".", "tolist", "(", ")", "\n", "]", "\n", "references", ".", "append", "(", "img_captions", ")", "\n", "\n", "# Hypotheses", "\n", "", "scores", "=", "torch", ".", "max", "(", "model_output", "[", "\"scores\"", "]", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "\n", "scores", "=", "scores", ".", "tolist", "(", ")", "\n", "predictions", "=", "[", "]", "\n", "for", "j", ",", "p", "in", "enumerate", "(", "scores", ")", ":", "\n", "            ", "caption", "=", "self", ".", "caption_processor", "(", "scores", "[", "j", "]", ")", "[", "\"tokens\"", "]", "\n", "predictions", ".", "append", "(", "caption", ")", "\n", "", "hypotheses", ".", "extend", "(", "predictions", ")", "\n", "\n", "assert", "len", "(", "references", ")", "==", "len", "(", "hypotheses", ")", "\n", "\n", "bleu4", "=", "self", ".", "bleu_score", ".", "corpus_bleu", "(", "references", ",", "hypotheses", ")", "\n", "\n", "return", "targets", ".", "new_tensor", "(", "bleu4", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.VQAAccuracy.__init__": [[667, 669], ["metrics.BaseMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"vqa_accuracy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.VQAAccuracy._masked_unk_softmax": [[670, 676], ["torch.nn.functional.softmax", "torch.sum"], "methods", ["None"], ["", "def", "_masked_unk_softmax", "(", "self", ",", "x", ",", "dim", ",", "mask_idx", ")", ":", "\n", "        ", "x1", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "x", ",", "dim", "=", "dim", ")", "\n", "x1", "[", ":", ",", "mask_idx", "]", "=", "0", "\n", "x1_sum", "=", "torch", ".", "sum", "(", "x1", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "y", "=", "x1", "/", "x1_sum", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.VQAAccuracy.calculate": [[677, 702], ["metrics.VQAAccuracy._masked_unk_softmax", "output.argmax.argmax.argmax", "expected.new_zeros", "expected.new_zeros.scatter_", "output.argmax.argmax.view", "torch.sum", "expected.size", "expected.size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.VQAEvalAIAccuracy._masked_unk_softmax"], ["", "def", "calculate", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate vqa accuracy and return it back.\n\n        Args:\n            sample_list (SampleList): SampleList provided by DataLoader for\n                                current iteration\n            model_output (Dict): Dict returned by model.\n\n        Returns:\n            torch.FloatTensor: VQA Accuracy\n\n        \"\"\"", "\n", "#pdb.set_trace()", "\n", "output", "=", "model_output", "[", "\"scores\"", "]", "\n", "expected", "=", "sample_list", "[", "\"targets\"", "]", "\n", "\n", "output", "=", "self", ".", "_masked_unk_softmax", "(", "output", ",", "1", ",", "0", ")", "\n", "output", "=", "output", ".", "argmax", "(", "dim", "=", "1", ")", "# argmax", "\n", "\n", "one_hots", "=", "expected", ".", "new_zeros", "(", "*", "expected", ".", "size", "(", ")", ")", "\n", "one_hots", ".", "scatter_", "(", "1", ",", "output", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "scores", "=", "one_hots", "*", "expected", "\n", "accuracy", "=", "torch", ".", "sum", "(", "scores", ")", "/", "expected", ".", "size", "(", "0", ")", "\n", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.VQAEvalAIAccuracy.__init__": [[716, 719], ["metrics.BaseMetric.__init__", "pythia.tasks.processors.EvalAIAnswerProcessor"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"vqa_evalai_accuracy\"", ")", "\n", "self", ".", "evalai_answer_processor", "=", "EvalAIAnswerProcessor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.VQAEvalAIAccuracy._masked_unk_softmax": [[720, 726], ["torch.nn.functional.softmax", "torch.sum"], "methods", ["None"], ["", "def", "_masked_unk_softmax", "(", "self", ",", "x", ",", "dim", ",", "mask_idx", ")", ":", "\n", "        ", "x1", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "x", ",", "dim", "=", "dim", ")", "\n", "x1", "[", ":", ",", "mask_idx", "]", "=", "0", "\n", "x1_sum", "=", "torch", ".", "sum", "(", "x1", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "y", "=", "x1", "/", "x1_sum", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.VQAEvalAIAccuracy.calculate": [[727, 773], ["pythia.common.registry.registry.get", "pythia.common.registry.registry.get.get_true_vocab_size", "metrics.VQAEvalAIAccuracy._masked_unk_softmax", "output.argmax().clone().tolist.argmax().clone().tolist.argmax().clone().tolist", "enumerate", "model_output[].new_tensor", "metrics.VQAEvalAIAccuracy.evalai_answer_processor", "list", "accuracy.append", "float", "len", "output.argmax().clone().tolist.argmax().clone().tolist.argmax().clone", "pythia.common.registry.registry.get.idx2word", "metrics.VQAEvalAIAccuracy.evalai_answer_processor", "enumerate", "min", "gt_acc.append", "float", "len", "sum", "sum", "output.argmax().clone().tolist.argmax().clone().tolist.argmax", "float", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_true_vocab_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.VQAEvalAIAccuracy._masked_unk_softmax", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.idx2word"], ["", "def", "calculate", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate vqa accuracy and return it back.\n\n        Args:\n            sample_list (SampleList): SampleList provided by DataLoader for\n                                current iteration\n            model_output (Dict): Dict returned by model.\n\n        Returns:\n            torch.FloatTensor: VQA Accuracy\n\n        \"\"\"", "\n", "output", "=", "model_output", "[", "\"scores\"", "]", "\n", "expected", "=", "sample_list", "[", "\"answers\"", "]", "\n", "\n", "answer_processor", "=", "registry", ".", "get", "(", "sample_list", ".", "dataset_name", "+", "\"_answer_processor\"", ")", "\n", "answer_space_size", "=", "answer_processor", ".", "get_true_vocab_size", "(", ")", "\n", "\n", "output", "=", "self", ".", "_masked_unk_softmax", "(", "output", ",", "1", ",", "0", ")", "\n", "output", "=", "output", ".", "argmax", "(", "dim", "=", "1", ")", ".", "clone", "(", ")", ".", "tolist", "(", ")", "\n", "accuracy", "=", "[", "]", "\n", "\n", "for", "idx", ",", "answer_id", "in", "enumerate", "(", "output", ")", ":", "\n", "            ", "if", "answer_id", ">=", "answer_space_size", ":", "\n", "                ", "answer_id", "-=", "answer_space_size", "\n", "answer", "=", "sample_list", "[", "\"context_tokens\"", "]", "[", "idx", "]", "[", "answer_id", "]", "\n", "", "else", ":", "\n", "                ", "answer", "=", "answer_processor", ".", "idx2word", "(", "answer_id", ")", "\n", "\n", "", "answer", "=", "self", ".", "evalai_answer_processor", "(", "answer", ")", "\n", "\n", "gt_answers", "=", "[", "self", ".", "evalai_answer_processor", "(", "x", ")", "for", "x", "in", "expected", "[", "idx", "]", "]", "\n", "gt_answers", "=", "list", "(", "enumerate", "(", "gt_answers", ")", ")", "\n", "\n", "gt_acc", "=", "[", "]", "\n", "for", "gt_answer", "in", "gt_answers", ":", "\n", "                ", "other_answers", "=", "[", "item", "for", "item", "in", "gt_answers", "if", "item", "!=", "gt_answer", "]", "\n", "matching_answers", "=", "[", "item", "for", "item", "in", "other_answers", "if", "item", "[", "1", "]", "==", "answer", "]", "\n", "acc", "=", "min", "(", "1", ",", "float", "(", "len", "(", "matching_answers", ")", ")", "/", "3", ")", "\n", "gt_acc", ".", "append", "(", "acc", ")", "\n", "", "avgGTAcc", "=", "float", "(", "sum", "(", "gt_acc", ")", ")", "/", "len", "(", "gt_acc", ")", "\n", "accuracy", ".", "append", "(", "avgGTAcc", ")", "\n", "\n", "", "accuracy", "=", "float", "(", "sum", "(", "accuracy", ")", ")", "/", "len", "(", "accuracy", ")", "\n", "\n", "return", "model_output", "[", "\"scores\"", "]", ".", "new_tensor", "(", "accuracy", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAtK.__init__": [[776, 778], ["metrics.BaseMetric.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "\"recall@k\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAtK.score_to_ranks": [[779, 790], ["scores.sort", "ranked_idx.clone().fill_", "range", "ranked_idx.size", "range", "ranked_idx.clone"], "methods", ["None"], ["", "def", "score_to_ranks", "(", "self", ",", "scores", ")", ":", "\n", "# sort in descending order - largest score gets highest rank", "\n", "        ", "sorted_ranks", ",", "ranked_idx", "=", "scores", ".", "sort", "(", "1", ",", "descending", "=", "True", ")", "\n", "\n", "# convert from ranked_idx to ranks", "\n", "ranks", "=", "ranked_idx", ".", "clone", "(", ")", ".", "fill_", "(", "0", ")", "\n", "for", "i", "in", "range", "(", "ranked_idx", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "100", ")", ":", "\n", "                ", "ranks", "[", "i", "]", "[", "ranked_idx", "[", "i", "]", "[", "j", "]", "]", "=", "j", "\n", "", "", "ranks", "+=", "1", "\n", "return", "ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAtK.get_gt_ranks": [[791, 799], ["ans_ind.view.view.max", "ans_ind.view.view.view", "torch.LongTensor", "range", "ans_ind.view.view.size", "ans_ind.view.view.size", "int", "ans_ind[].long"], "methods", ["None"], ["", "def", "get_gt_ranks", "(", "self", ",", "ranks", ",", "ans_ind", ")", ":", "\n", "        ", "_", ",", "ans_ind", "=", "ans_ind", ".", "max", "(", "dim", "=", "1", ")", "\n", "ans_ind", "=", "ans_ind", ".", "view", "(", "-", "1", ")", "\n", "gt_ranks", "=", "torch", ".", "LongTensor", "(", "ans_ind", ".", "size", "(", "0", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "ans_ind", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "gt_ranks", "[", "i", "]", "=", "int", "(", "ranks", "[", "i", ",", "ans_ind", "[", "i", "]", ".", "long", "(", ")", "]", ")", "\n", "", "return", "gt_ranks", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAtK.get_ranks": [[800, 809], ["metrics.RecallAtK.score_to_ranks", "metrics.RecallAtK.get_gt_ranks", "metrics.RecallAtK.process_ranks", "metrics.RecallAtK.float"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAtK.score_to_ranks", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAtK.get_gt_ranks"], ["", "def", "get_ranks", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "output", "=", "model_output", "[", "\"scores\"", "]", "\n", "expected", "=", "sample_list", "[", "\"targets\"", "]", "\n", "\n", "ranks", "=", "self", ".", "score_to_ranks", "(", "output", ")", "\n", "gt_ranks", "=", "self", ".", "get_gt_ranks", "(", "ranks", ",", "expected", ")", "\n", "\n", "ranks", "=", "self", ".", "process_ranks", "(", "gt_ranks", ")", "\n", "return", "ranks", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAtK.calculate": [[810, 814], ["metrics.RecallAtK.get_ranks", "float", "metrics.RecallAtK.size", "torch.sum", "torch.le"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAtK.get_ranks"], ["", "def", "calculate", "(", "self", ",", "sample_list", ",", "model_output", ",", "k", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "ranks", "=", "self", ".", "get_ranks", "(", "sample_list", ",", "model_output", ")", "\n", "recall", "=", "float", "(", "torch", ".", "sum", "(", "torch", ".", "le", "(", "ranks", ",", "k", ")", ")", ")", "/", "ranks", ".", "size", "(", "0", ")", "\n", "return", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAt1.__init__": [[825, 827], ["metrics.RecallAtK.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"r@1\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAt1.calculate": [[828, 841], ["metrics.RecallAt1.calculate"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.MeanReciprocalRank.calculate"], ["", "def", "calculate", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate Recall@1 and return it back.\n\n        Args:\n            sample_list (SampleList): SampleList provided by DataLoader for\n                                current iteration\n            model_output (Dict): Dict returned by model.\n\n        Returns:\n            torch.FloatTensor: Recall@1\n\n        \"\"\"", "\n", "return", "self", ".", "calculate", "(", "sample_list", ",", "model_output", ",", "k", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAt5.__init__": [[852, 854], ["metrics.RecallAtK.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"r@5\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAt5.calculate": [[855, 868], ["metrics.RecallAt5.calculate"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.MeanReciprocalRank.calculate"], ["", "def", "calculate", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate Recall@5 and return it back.\n\n        Args:\n            sample_list (SampleList): SampleList provided by DataLoader for\n                                current iteration\n            model_output (Dict): Dict returned by model.\n\n        Returns:\n            torch.FloatTensor: Recall@5\n\n        \"\"\"", "\n", "return", "self", ".", "calculate", "(", "sample_list", ",", "model_output", ",", "k", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAt10.__init__": [[879, 881], ["metrics.RecallAtK.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"r@10\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAt10.calculate": [[882, 895], ["metrics.RecallAt10.calculate"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.MeanReciprocalRank.calculate"], ["", "def", "calculate", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate Recall@10 and return it back.\n\n        Args:\n            sample_list (SampleList): SampleList provided by DataLoader for\n                                current iteration\n            model_output (Dict): Dict returned by model.\n\n        Returns:\n            torch.FloatTensor: Recall@10\n\n        \"\"\"", "\n", "return", "self", ".", "calculate", "(", "sample_list", ",", "model_output", ",", "k", "=", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.MeanRank.__init__": [[906, 908], ["metrics.RecallAtK.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"mean_r\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.MeanRank.calculate": [[909, 923], ["metrics.MeanRank.get_ranks", "torch.mean"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAtK.get_ranks"], ["", "def", "calculate", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate Mean Rank and return it back.\n\n        Args:\n            sample_list (SampleList): SampleList provided by DataLoader for\n                                current iteration\n            model_output (Dict): Dict returned by model.\n\n        Returns:\n            torch.FloatTensor: mean rank\n\n        \"\"\"", "\n", "ranks", "=", "self", ".", "get_ranks", "(", "sample_list", ",", "model_output", ")", "\n", "return", "torch", ".", "mean", "(", "ranks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.MeanReciprocalRank.__init__": [[933, 935], ["metrics.RecallAtK.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"mean_rr\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.MeanReciprocalRank.calculate": [[936, 950], ["metrics.MeanReciprocalRank.get_ranks", "torch.mean", "metrics.MeanReciprocalRank.reciprocal"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.metrics.RecallAtK.get_ranks"], ["", "def", "calculate", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculate Mean Reciprocal Rank and return it back.\n\n        Args:\n            sample_list (SampleList): SampleList provided by DataLoader for\n                                current iteration\n            model_output (Dict): Dict returned by model.\n\n        Returns:\n            torch.FloatTensor: Mean Reciprocal Rank\n\n        \"\"\"", "\n", "ranks", "=", "self", ".", "get_ranks", "(", "sample_list", ",", "model_output", ")", "\n", "return", "torch", ".", "mean", "(", "ranks", ".", "reciprocal", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.encoders.ImageEncoder.__init__": [[13, 26], ["torch.nn.Module.__init__", "pythia.modules.layers.Identity", "encoders.FinetuneFasterRcnnFpnFc7", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder_type", ",", "in_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ImageEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "encoder_type", "==", "\"default\"", ":", "\n", "            ", "self", ".", "module", "=", "Identity", "(", ")", "\n", "self", ".", "module", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "module", ".", "out_dim", "=", "in_dim", "\n", "", "elif", "encoder_type", "==", "\"finetune_faster_rcnn_fpn_fc7\"", ":", "\n", "            ", "self", ".", "module", "=", "FinetuneFasterRcnnFpnFc7", "(", "in_dim", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown Image Encoder: %s\"", "%", "encoder_type", ")", "\n", "\n", "", "self", ".", "out_dim", "=", "self", ".", "module", ".", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.encoders.ImageEncoder.forward": [[27, 29], ["encoders.ImageEncoder.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.encoders.FinetuneFasterRcnnFpnFc7.__init__": [[32, 51], ["torch.nn.Module.__init__", "pythia.utils.general.get_pythia_root", "os.path.join", "torch.nn.Linear", "encoders.FinetuneFasterRcnnFpnFc7.lc.weight.data.copy_", "encoders.FinetuneFasterRcnnFpnFc7.lc.bias.data.copy_", "os.path.isabs", "os.path.join", "os.path.isabs", "os.path.join", "open", "pickle.load", "open", "pickle.load", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "weights_file", ",", "bias_file", ",", "model_data_dir", ")", ":", "\n", "        ", "super", "(", "FinetuneFasterRcnnFpnFc7", ",", "self", ")", ".", "__init__", "(", ")", "\n", "pythia_root", "=", "get_pythia_root", "(", ")", "\n", "model_data_dir", "=", "os", ".", "path", ".", "join", "(", "pythia_root", ",", "model_data_dir", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isabs", "(", "weights_file", ")", ":", "\n", "            ", "weights_file", "=", "os", ".", "path", ".", "join", "(", "model_data_dir", ",", "weights_file", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isabs", "(", "bias_file", ")", ":", "\n", "            ", "bias_file", "=", "os", ".", "path", ".", "join", "(", "model_data_dir", ",", "bias_file", ")", "\n", "", "with", "open", "(", "weights_file", ",", "\"rb\"", ")", "as", "w", ":", "\n", "            ", "weights", "=", "pickle", ".", "load", "(", "w", ")", "\n", "", "with", "open", "(", "bias_file", ",", "\"rb\"", ")", "as", "b", ":", "\n", "            ", "bias", "=", "pickle", ".", "load", "(", "b", ")", "\n", "", "out_dim", "=", "bias", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "lc", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "lc", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "weights", ")", ")", "\n", "self", ".", "lc", ".", "bias", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "bias", ")", ")", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.encoders.FinetuneFasterRcnnFpnFc7.forward": [[52, 56], ["encoders.FinetuneFasterRcnnFpnFc7.lc", "torch.nn.functional.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "i2", "=", "self", ".", "lc", "(", "image", ")", "\n", "i3", "=", "nn", ".", "functional", ".", "relu", "(", "i2", ")", "\n", "return", "i3", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.ConvNet.__init__": [[11, 30], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.MaxPool2d", "torch.nn.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "padding_size", "=", "\"same\"", ",", "\n", "pool_stride", "=", "2", ",", "\n", "batch_norm", "=", "True", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "padding_size", "==", "\"same\"", ":", "\n", "            ", "padding_size", "=", "kernel_size", "//", "2", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding_size", ")", "\n", "self", ".", "max_pool2d", "=", "nn", ".", "MaxPool2d", "(", "pool_stride", ",", "stride", "=", "pool_stride", ")", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "self", ".", "batch_norm_2d", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.ConvNet.forward": [[31, 38], ["layers.ConvNet.max_pool2d", "torch.nn.functional.leaky_relu", "layers.ConvNet.batch_norm_2d", "layers.ConvNet.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "max_pool2d", "(", "nn", ".", "functional", ".", "leaky_relu", "(", "self", ".", "conv", "(", "x", ")", ")", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "x", "=", "self", ".", "batch_norm_2d", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.Flatten.forward": [[41, 46], ["input.view.view.dim", "input.view.view.view", "input.view.view.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", ">", "1", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.UnFlatten.forward": [[48, 50], ["input.view", "input.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "input", ",", "sizes", "=", "[", "]", ")", ":", "\n", "        ", "return", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "*", "sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.GatedTanh.__init__": [[63, 67], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "GatedTanh", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "gate_fc", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.GatedTanh.forward": [[68, 76], ["torch.tanh", "torch.sigmoid", "layers.GatedTanh.fc", "layers.GatedTanh.gate_fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y_tilda", "=", "torch", ".", "tanh", "(", "self", ".", "fc", "(", "x", ")", ")", "\n", "gated", "=", "torch", ".", "sigmoid", "(", "self", ".", "gate_fc", "(", "x", ")", ")", "\n", "\n", "# Element wise multiplication", "\n", "y", "=", "y_tilda", "*", "gated", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.ReLUWithWeightNormFC.__init__": [[80, 87], ["torch.nn.Module.__init__", "layers.append", "layers.append", "torch.nn.Sequential", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.ReLU", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "ReLUWithWeightNormFC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "weight_norm", "(", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", ",", "dim", "=", "None", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.ReLUWithWeightNormFC.forward": [[88, 90], ["layers.ReLUWithWeightNormFC.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layers", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.ClassifierLayer.__init__": [[93, 106], ["torch.nn.Module.__init__", "layers.WeightNormClassifier", "layers.LogitClassifier", "pythia.modules.decoders.LanguageDecoder", "torch.nn.Linear", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "classifier_type", ",", "in_dim", ",", "out_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ClassifierLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "classifier_type", "==", "\"weight_norm\"", ":", "\n", "            ", "self", ".", "module", "=", "WeightNormClassifier", "(", "in_dim", ",", "out_dim", ",", "**", "kwargs", ")", "\n", "", "elif", "classifier_type", "==", "\"logit\"", ":", "\n", "            ", "self", ".", "module", "=", "LogitClassifier", "(", "in_dim", ",", "out_dim", ",", "**", "kwargs", ")", "\n", "", "elif", "classifier_type", "==", "\"language_decoder\"", ":", "\n", "            ", "self", ".", "module", "=", "LanguageDecoder", "(", "in_dim", ",", "out_dim", ",", "**", "kwargs", ")", "\n", "", "elif", "classifier_type", "==", "\"linear\"", ":", "\n", "            ", "self", ".", "module", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown classifier type: %s\"", "%", "classifier_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.ClassifierLayer.forward": [[107, 109], ["layers.ClassifierLayer.module"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.LogitClassifier.__init__": [[112, 132], ["torch.nn.Module.__init__", "layers.ReLUWithWeightNormFC", "layers.ReLUWithWeightNormFC", "torch.nn.Linear", "torch.nn.Linear", "layers.LogitClassifier.linear_text.weight.data.copy_", "layers.LogitClassifier.linear_image.weight.data.copy_", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LogitClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input_dim", "=", "in_dim", "\n", "num_ans_candidates", "=", "out_dim", "\n", "text_non_linear_dim", "=", "kwargs", "[", "\"text_hidden_dim\"", "]", "\n", "image_non_linear_dim", "=", "kwargs", "[", "\"img_hidden_dim\"", "]", "\n", "\n", "self", ".", "f_o_text", "=", "ReLUWithWeightNormFC", "(", "input_dim", ",", "text_non_linear_dim", ")", "\n", "self", ".", "f_o_image", "=", "ReLUWithWeightNormFC", "(", "input_dim", ",", "image_non_linear_dim", ")", "\n", "self", ".", "linear_text", "=", "nn", ".", "Linear", "(", "text_non_linear_dim", ",", "num_ans_candidates", ")", "\n", "self", ".", "linear_image", "=", "nn", ".", "Linear", "(", "image_non_linear_dim", ",", "num_ans_candidates", ")", "\n", "\n", "if", "\"pretrained_image\"", "in", "kwargs", "and", "kwargs", "[", "\"pretrained_text\"", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "linear_text", ".", "weight", ".", "data", ".", "copy_", "(", "\n", "torch", ".", "from_numpy", "(", "kwargs", "[", "\"pretrained_text\"", "]", ")", "\n", ")", "\n", "\n", "", "if", "\"pretrained_image\"", "in", "kwargs", "and", "kwargs", "[", "\"pretrained_image\"", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "linear_image", ".", "weight", ".", "data", ".", "copy_", "(", "\n", "torch", ".", "from_numpy", "(", "kwargs", "[", "\"pretrained_image\"", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.LogitClassifier.forward": [[134, 140], ["layers.LogitClassifier.linear_text", "layers.LogitClassifier.linear_image", "layers.LogitClassifier.f_o_text", "layers.LogitClassifier.f_o_image"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "joint_embedding", ")", ":", "\n", "        ", "text_val", "=", "self", ".", "linear_text", "(", "self", ".", "f_o_text", "(", "joint_embedding", ")", ")", "\n", "image_val", "=", "self", ".", "linear_image", "(", "self", ".", "f_o_image", "(", "joint_embedding", ")", ")", "\n", "logit_value", "=", "text_val", "+", "image_val", "\n", "\n", "return", "logit_value", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.WeightNormClassifier.__init__": [[143, 152], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "hidden_dim", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "WeightNormClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "\n", "weight_norm", "(", "nn", ".", "Linear", "(", "in_dim", ",", "hidden_dim", ")", ",", "dim", "=", "None", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ",", "inplace", "=", "True", ")", ",", "\n", "weight_norm", "(", "nn", ".", "Linear", "(", "hidden_dim", ",", "out_dim", ")", ",", "dim", "=", "None", ")", ",", "\n", "]", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.WeightNormClassifier.forward": [[153, 156], ["layers.WeightNormClassifier.main"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "self", ".", "main", "(", "x", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.Identity.__init__": [[159, 161], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Identity", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.Identity.forward": [[162, 164], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.ModalCombineLayer.__init__": [[167, 181], ["torch.nn.Module.__init__", "layers.MFH", "layers.NonLinearElementMultiply", "layers.TwoLayerElementMultiply", "layers.TopDownAttentionLSTM", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "combine_type", ",", "img_feat_dim", ",", "txt_emb_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ModalCombineLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "combine_type", "==", "\"MFH\"", ":", "\n", "            ", "self", ".", "module", "=", "MFH", "(", "img_feat_dim", ",", "txt_emb_dim", ",", "**", "kwargs", ")", "\n", "", "elif", "combine_type", "==", "\"non_linear_element_multiply\"", ":", "\n", "            ", "self", ".", "module", "=", "NonLinearElementMultiply", "(", "img_feat_dim", ",", "txt_emb_dim", ",", "**", "kwargs", ")", "\n", "", "elif", "combine_type", "==", "\"two_layer_element_multiply\"", ":", "\n", "            ", "self", ".", "module", "=", "TwoLayerElementMultiply", "(", "img_feat_dim", ",", "txt_emb_dim", ",", "**", "kwargs", ")", "\n", "", "elif", "combine_type", "==", "\"top_down_attention_lstm\"", ":", "\n", "            ", "self", ".", "module", "=", "TopDownAttentionLSTM", "(", "img_feat_dim", ",", "txt_emb_dim", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Not implemented combine type: %s\"", "%", "combine_type", ")", "\n", "\n", "", "self", ".", "out_dim", "=", "self", ".", "module", ".", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.ModalCombineLayer.forward": [[182, 186], ["layers.ModalCombineLayer.module", "layers.ModalCombineLayer.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "embedding", "=", "self", ".", "module", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "question_embedding", "=", "self", ".", "module", ".", "question_embedding", "\n", "return", "self", ".", "module", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.MfbExpand.__init__": [[189, 194], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "img_feat_dim", ",", "txt_emb_dim", ",", "hidden_dim", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "MfbExpand", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lc_image", "=", "nn", ".", "Linear", "(", "in_features", "=", "img_feat_dim", ",", "out_features", "=", "hidden_dim", ")", "\n", "self", ".", "lc_ques", "=", "nn", ".", "Linear", "(", "in_features", "=", "txt_emb_dim", ",", "out_features", "=", "hidden_dim", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.MfbExpand.forward": [[195, 206], ["layers.MfbExpand.lc_image", "layers.MfbExpand.lc_ques", "layers.MfbExpand.dropout", "len", "image_feat.data.size", "torch.unsqueeze().expand", "torch.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embed", ")", ":", "\n", "        ", "image1", "=", "self", ".", "lc_image", "(", "image_feat", ")", "\n", "ques1", "=", "self", ".", "lc_ques", "(", "question_embed", ")", "\n", "if", "len", "(", "image_feat", ".", "data", ".", "shape", ")", "==", "3", ":", "\n", "            ", "num_location", "=", "image_feat", ".", "data", ".", "size", "(", "1", ")", "\n", "ques1_expand", "=", "torch", ".", "unsqueeze", "(", "ques1", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "num_location", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "ques1_expand", "=", "ques1", "\n", "", "joint_feature", "=", "image1", "*", "ques1_expand", "\n", "joint_feature", "=", "self", ".", "dropout", "(", "joint_feature", ")", "\n", "return", "joint_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.MFH.__init__": [[209, 230], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ReLU", "int", "range", "layers.MfbExpand", "layers.MFH.mfb_expand_list.append", "layers.MFH.mfb_sqz_list.append", "sum"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_feat_dim", ",", "ques_emb_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MFH", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mfb_expand_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mfb_sqz_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "hidden_sizes", "=", "kwargs", "[", "\"hidden_sizes\"", "]", "\n", "self", ".", "out_dim", "=", "int", "(", "sum", "(", "hidden_sizes", ")", "/", "kwargs", "[", "\"pool_size\"", "]", ")", "\n", "\n", "self", ".", "order", "=", "kwargs", "[", "\"order\"", "]", "\n", "self", ".", "pool_size", "=", "kwargs", "[", "\"pool_size\"", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "order", ")", ":", "\n", "            ", "mfb_exp_i", "=", "MfbExpand", "(", "\n", "img_feat_dim", "=", "image_feat_dim", ",", "\n", "txt_emb_dim", "=", "ques_emb_dim", ",", "\n", "hidden_dim", "=", "hidden_sizes", "[", "i", "]", ",", "\n", "dropout", "=", "kwargs", "[", "\"dropout\"", "]", ",", "\n", ")", "\n", "self", ".", "mfb_expand_list", ".", "append", "(", "mfb_exp_i", ")", "\n", "self", ".", "mfb_sqz_list", ".", "append", "(", "self", ".", "mfb_squeeze", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.MFH.forward": [[231, 249], ["range", "torch.cat", "mfb_exp", "mfb_sqz", "feature_list.append", "len", "feature_list[].size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embedding", ")", ":", "\n", "        ", "feature_list", "=", "[", "]", "\n", "prev_mfb_exp", "=", "1", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "order", ")", ":", "\n", "            ", "mfb_exp", "=", "self", ".", "mfb_expand_list", "[", "i", "]", "\n", "mfb_sqz", "=", "self", ".", "mfb_sqz_list", "[", "i", "]", "\n", "z_exp_i", "=", "mfb_exp", "(", "image_feat", ",", "question_embedding", ")", "\n", "if", "i", ">", "0", ":", "\n", "                ", "z_exp_i", "=", "prev_mfb_exp", "*", "z_exp_i", "\n", "", "prev_mfb_exp", "=", "z_exp_i", "\n", "z", "=", "mfb_sqz", "(", "z_exp_i", ")", "\n", "feature_list", ".", "append", "(", "z", ")", "\n", "\n", "# append at last feature", "\n", "", "cat_dim", "=", "len", "(", "feature_list", "[", "0", "]", ".", "size", "(", ")", ")", "-", "1", "\n", "feature", "=", "torch", ".", "cat", "(", "feature_list", ",", "dim", "=", "cat_dim", ")", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.MFH.mfb_squeeze": [[250, 286], ["len", "torch.unsqueeze.size", "torch.unsqueeze.view", "torch.sum", "iatt_iq_sqrt.view.view.view", "torch.nn.functional.normalize", "torch.squeeze.view", "torch.unsqueeze.size", "torch.unsqueeze", "exit", "int", "torch.sqrt", "torch.sqrt", "int", "torch.squeeze", "layers.MFH.relu", "layers.MFH.relu"], "methods", ["None"], ["", "def", "mfb_squeeze", "(", "self", ",", "joint_feature", ")", ":", "\n", "# joint_feature dim: N x k x dim or N x dim", "\n", "\n", "        ", "orig_feature_size", "=", "len", "(", "joint_feature", ".", "size", "(", ")", ")", "\n", "\n", "if", "orig_feature_size", "==", "2", ":", "\n", "            ", "joint_feature", "=", "torch", ".", "unsqueeze", "(", "joint_feature", ",", "dim", "=", "1", ")", "\n", "\n", "", "batch_size", ",", "num_loc", ",", "dim", "=", "joint_feature", ".", "size", "(", ")", "\n", "\n", "if", "dim", "%", "self", ".", "pool_size", "!=", "0", ":", "\n", "            ", "exit", "(", "\n", "\"the dim %d is not multiply of \\\n             pool_size %d\"", "\n", "%", "(", "dim", ",", "self", ".", "pool_size", ")", "\n", ")", "\n", "\n", "", "joint_feature_reshape", "=", "joint_feature", ".", "view", "(", "\n", "batch_size", ",", "num_loc", ",", "int", "(", "dim", "/", "self", ".", "pool_size", ")", ",", "self", ".", "pool_size", "\n", ")", "\n", "\n", "# N x 100 x 1000 x 1", "\n", "iatt_iq_sumpool", "=", "torch", ".", "sum", "(", "joint_feature_reshape", ",", "3", ")", "\n", "\n", "iatt_iq_sqrt", "=", "torch", ".", "sqrt", "(", "self", ".", "relu", "(", "iatt_iq_sumpool", ")", ")", "-", "torch", ".", "sqrt", "(", "\n", "self", ".", "relu", "(", "-", "iatt_iq_sumpool", ")", "\n", ")", "\n", "\n", "iatt_iq_sqrt", "=", "iatt_iq_sqrt", ".", "view", "(", "batch_size", ",", "-", "1", ")", "# N x 100000", "\n", "iatt_iq_l2", "=", "nn", ".", "functional", ".", "normalize", "(", "iatt_iq_sqrt", ")", "\n", "iatt_iq_l2", "=", "iatt_iq_l2", ".", "view", "(", "batch_size", ",", "num_loc", ",", "int", "(", "dim", "/", "self", ".", "pool_size", ")", ")", "\n", "\n", "if", "orig_feature_size", "==", "2", ":", "\n", "            ", "iatt_iq_l2", "=", "torch", ".", "squeeze", "(", "iatt_iq_l2", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "iatt_iq_l2", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.NonLinearElementMultiply.__init__": [[292, 304], ["torch.nn.Module.__init__", "layers.ReLUWithWeightNormFC", "layers.ReLUWithWeightNormFC", "kwargs.get", "layers.ReLUWithWeightNormFC", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["    ", "def", "__init__", "(", "self", ",", "image_feat_dim", ",", "ques_emb_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "NonLinearElementMultiply", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fa_image", "=", "ReLUWithWeightNormFC", "(", "image_feat_dim", ",", "kwargs", "[", "\"hidden_dim\"", "]", ")", "\n", "self", ".", "fa_txt", "=", "ReLUWithWeightNormFC", "(", "ques_emb_dim", ",", "kwargs", "[", "\"hidden_dim\"", "]", ")", "\n", "\n", "context_dim", "=", "kwargs", ".", "get", "(", "\"context_dim\"", ",", "None", ")", "\n", "if", "context_dim", "is", "None", ":", "\n", "            ", "context_dim", "=", "ques_emb_dim", "\n", "", "self", ".", "question_embedding", "=", "None", "\n", "self", ".", "fa_context", "=", "ReLUWithWeightNormFC", "(", "context_dim", ",", "kwargs", "[", "\"hidden_dim\"", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "kwargs", "[", "\"dropout\"", "]", ")", "\n", "self", ".", "out_dim", "=", "kwargs", "[", "\"hidden_dim\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.NonLinearElementMultiply.forward": [[305, 328], ["layers.NonLinearElementMultiply.fa_image", "layers.NonLinearElementMultiply.fa_txt", "layers.NonLinearElementMultiply.dropout", "len", "layers.NonLinearElementMultiply.unsqueeze", "layers.NonLinearElementMultiply.fa_context", "torch.cat", "image_feat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embedding", ",", "context_embedding", "=", "None", ")", ":", "\n", "        ", "image_fa", "=", "self", ".", "fa_image", "(", "image_feat", ")", "\n", "question_fa", "=", "self", ".", "fa_txt", "(", "question_embedding", ")", "\n", "#pdb.set_trace()", "\n", "self", ".", "question_embedding", "=", "question_fa", "\n", "\n", "if", "len", "(", "image_feat", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "            ", "question_fa_expand", "=", "question_fa", ".", "unsqueeze", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "question_fa_expand", "=", "question_fa", "\n", "\n", "", "joint_feature", "=", "image_fa", "*", "question_fa_expand", "\n", "\n", "if", "context_embedding", "is", "not", "None", ":", "\n", "            ", "context_fa", "=", "self", ".", "fa_context", "(", "context_embedding", ")", "\n", "\n", "context_text_joint_feaure", "=", "context_fa", "*", "question_fa_expand", "\n", "joint_feature", "=", "torch", ".", "cat", "(", "[", "joint_feature", ",", "context_text_joint_feaure", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "joint_feature", "=", "self", ".", "dropout", "(", "joint_feature", ")", "\n", "#pdb.set_trace()", "\n", "\n", "return", "joint_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.TopDownAttentionLSTM.__init__": [[331, 345], ["torch.nn.Module.__init__", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.LSTMCell", "torch.nn.ReLU", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_feat_dim", ",", "embed_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fa_image", "=", "weight_norm", "(", "nn", ".", "Linear", "(", "image_feat_dim", ",", "kwargs", "[", "\"attention_dim\"", "]", ")", ")", "\n", "self", ".", "fa_hidden", "=", "weight_norm", "(", "\n", "nn", ".", "Linear", "(", "kwargs", "[", "\"hidden_dim\"", "]", ",", "kwargs", "[", "\"attention_dim\"", "]", ")", "\n", ")", "\n", "self", ".", "top_down_lstm", "=", "nn", ".", "LSTMCell", "(", "\n", "embed_dim", "+", "image_feat_dim", "+", "kwargs", "[", "\"hidden_dim\"", "]", ",", "\n", "kwargs", "[", "\"hidden_dim\"", "]", ",", "\n", "bias", "=", "True", ",", "\n", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "kwargs", "[", "\"dropout\"", "]", ")", "\n", "self", ".", "out_dim", "=", "kwargs", "[", "\"attention_dim\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.TopDownAttentionLSTM.forward": [[346, 367], ["image_feat.mean", "pythia.common.registry.registry.get", "layers.TopDownAttentionLSTM.top_down_lstm", "layers.TopDownAttentionLSTM.fa_image", "layers.TopDownAttentionLSTM.fa_hidden", "layers.TopDownAttentionLSTM.relu", "layers.TopDownAttentionLSTM.dropout", "torch.cat", "layers.TopDownAttentionLSTM.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "def", "forward", "(", "self", ",", "image_feat", ",", "embedding", ")", ":", "\n", "        ", "image_feat_mean", "=", "image_feat", ".", "mean", "(", "1", ")", "\n", "\n", "# Get LSTM state", "\n", "state", "=", "registry", ".", "get", "(", "\"{}_lstm_state\"", ".", "format", "(", "image_feat", ".", "device", ")", ")", "\n", "h1", ",", "c1", "=", "state", "[", "\"td_hidden\"", "]", "\n", "h2", ",", "c2", "=", "state", "[", "\"lm_hidden\"", "]", "\n", "\n", "h1", ",", "c1", "=", "self", ".", "top_down_lstm", "(", "\n", "torch", ".", "cat", "(", "[", "h2", ",", "image_feat_mean", ",", "embedding", "]", ",", "dim", "=", "1", ")", ",", "(", "h1", ",", "c1", ")", "\n", ")", "\n", "\n", "state", "[", "\"td_hidden\"", "]", "=", "(", "h1", ",", "c1", ")", "\n", "\n", "image_fa", "=", "self", ".", "fa_image", "(", "image_feat", ")", "\n", "hidden_fa", "=", "self", ".", "fa_hidden", "(", "h1", ")", "\n", "\n", "joint_feature", "=", "self", ".", "relu", "(", "image_fa", "+", "hidden_fa", ".", "unsqueeze", "(", "1", ")", ")", "\n", "joint_feature", "=", "self", ".", "dropout", "(", "joint_feature", ")", "\n", "\n", "return", "joint_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.TwoLayerElementMultiply.__init__": [[370, 383], ["torch.nn.Module.__init__", "layers.ReLUWithWeightNormFC", "layers.ReLUWithWeightNormFC", "layers.ReLUWithWeightNormFC", "layers.ReLUWithWeightNormFC", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_feat_dim", ",", "ques_emb_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TwoLayerElementMultiply", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fa_image1", "=", "ReLUWithWeightNormFC", "(", "image_feat_dim", ",", "kwargs", "[", "\"hidden_dim\"", "]", ")", "\n", "self", ".", "fa_image2", "=", "ReLUWithWeightNormFC", "(", "\n", "kwargs", "[", "\"hidden_dim\"", "]", ",", "kwargs", "[", "\"hidden_dim\"", "]", "\n", ")", "\n", "self", ".", "fa_txt1", "=", "ReLUWithWeightNormFC", "(", "ques_emb_dim", ",", "kwargs", "[", "\"hidden_dim\"", "]", ")", "\n", "self", ".", "fa_txt2", "=", "ReLUWithWeightNormFC", "(", "kwargs", "[", "\"hidden_dim\"", "]", ",", "kwargs", "[", "\"hidden_dim\"", "]", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "kwargs", "[", "\"dropout\"", "]", ")", "\n", "\n", "self", ".", "out_dim", "=", "kwargs", "[", "\"hidden_dim\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.TwoLayerElementMultiply.forward": [[384, 400], ["layers.TwoLayerElementMultiply.fa_image2", "layers.TwoLayerElementMultiply.fa_txt2", "layers.TwoLayerElementMultiply.dropout", "layers.TwoLayerElementMultiply.fa_image1", "layers.TwoLayerElementMultiply.fa_txt1", "len", "image_feat.size", "torch.unsqueeze().expand", "image_feat.size", "torch.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embedding", ")", ":", "\n", "        ", "image_fa", "=", "self", ".", "fa_image2", "(", "self", ".", "fa_image1", "(", "image_feat", ")", ")", "\n", "question_fa", "=", "self", ".", "fa_txt2", "(", "self", ".", "fa_txt1", "(", "question_embedding", ")", ")", "\n", "\n", "if", "len", "(", "image_feat", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "            ", "num_location", "=", "image_feat", ".", "size", "(", "1", ")", "\n", "question_fa_expand", "=", "torch", ".", "unsqueeze", "(", "question_fa", ",", "1", ")", ".", "expand", "(", "\n", "-", "1", ",", "num_location", ",", "-", "1", "\n", ")", "\n", "", "else", ":", "\n", "            ", "question_fa_expand", "=", "question_fa", "\n", "\n", "", "joint_feature", "=", "image_fa", "*", "question_fa_expand", "\n", "joint_feature", "=", "self", ".", "dropout", "(", "joint_feature", ")", "\n", "\n", "return", "joint_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.TransformLayer.__init__": [[403, 415], ["torch.nn.Module.__init__", "layers.LinearTransform", "layers.ConvTransform", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "transform_type", ",", "in_dim", ",", "out_dim", ",", "hidden_dim", "=", "None", ")", ":", "\n", "        ", "super", "(", "TransformLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "transform_type", "==", "\"linear\"", ":", "\n", "            ", "self", ".", "module", "=", "LinearTransform", "(", "in_dim", ",", "out_dim", ")", "\n", "", "elif", "transform_type", "==", "\"conv\"", ":", "\n", "            ", "self", ".", "module", "=", "ConvTransform", "(", "in_dim", ",", "out_dim", ",", "hidden_dim", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "\"Unknown post combine transform type: %s\"", "%", "transform_type", "\n", ")", "\n", "", "self", ".", "out_dim", "=", "self", ".", "module", ".", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.TransformLayer.forward": [[416, 418], ["layers.TransformLayer.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.LinearTransform.__init__": [[421, 427], ["torch.nn.Module.__init__", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "LinearTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lc", "=", "weight_norm", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "in_dim", ",", "out_features", "=", "out_dim", ")", ",", "dim", "=", "None", "\n", ")", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.LinearTransform.forward": [[428, 430], ["layers.LinearTransform.lc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lc", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.ConvTransform.__init__": [[433, 442], ["torch.nn.Module.__init__", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "hidden_dim", ")", ":", "\n", "        ", "super", "(", "ConvTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_dim", ",", "out_channels", "=", "hidden_dim", ",", "kernel_size", "=", "1", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "hidden_dim", ",", "out_channels", "=", "out_dim", ",", "kernel_size", "=", "1", "\n", ")", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.ConvTransform.forward": [[443, 461], ["layers.ConvTransform.conv1", "torch.nn.functional.relu", "layers.ConvTransform.conv2", "len", "torch.unsqueeze", "len", "torch.squeeze().permute", "x.size", "x.permute", "len", "torch.unsqueeze", "x.size", "len", "torch.squeeze", "x.size", "torch.unsqueeze", "torch.squeeze", "x.size", "torch.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "len", "(", "x", ".", "size", "(", ")", ")", "==", "3", ":", "# N x k xdim", "\n", "# N x dim x k x 1", "\n", "            ", "x_reshape", "=", "torch", ".", "unsqueeze", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "3", ")", "\n", "", "elif", "len", "(", "x", ".", "size", "(", ")", ")", "==", "2", ":", "# N x dim", "\n", "# N x dim x 1 x 1", "\n", "            ", "x_reshape", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "x", ",", "2", ")", ",", "3", ")", "\n", "\n", "", "iatt_conv1", "=", "self", ".", "conv1", "(", "x_reshape", ")", "# N x hidden_dim x * x 1", "\n", "iatt_relu", "=", "nn", ".", "functional", ".", "relu", "(", "iatt_conv1", ")", "\n", "iatt_conv2", "=", "self", ".", "conv2", "(", "iatt_relu", ")", "# N x out_dim x * x 1", "\n", "\n", "if", "len", "(", "x", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "            ", "iatt_conv3", "=", "torch", ".", "squeeze", "(", "iatt_conv2", ",", "3", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "elif", "len", "(", "x", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "            ", "iatt_conv3", "=", "torch", ".", "squeeze", "(", "torch", ".", "squeeze", "(", "iatt_conv2", ",", "3", ")", ",", "2", ")", "\n", "\n", "", "return", "iatt_conv3", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.BCNet.__init__": [[468, 495], ["torch.nn.Module.__init__", "layers.FCNet", "layers.FCNet", "torch.nn.Dropout", "torch.nn.AvgPool1d", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.utils.weight_norm.weight_norm", "torch.Tensor().normal_", "torch.Tensor().normal_", "torch.nn.Linear", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ",", "v_dim", ",", "q_dim", ",", "h_dim", ",", "h_out", ",", "act", "=", "\"ReLU\"", ",", "dropout", "=", "[", "0.2", ",", "0.5", "]", ",", "k", "=", "3", ")", ":", "\n", "        ", "super", "(", "BCNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "c", "=", "32", "\n", "self", ".", "k", "=", "k", "\n", "self", ".", "v_dim", "=", "v_dim", "\n", "self", ".", "q_dim", "=", "q_dim", "\n", "self", ".", "h_dim", "=", "h_dim", "\n", "self", ".", "h_out", "=", "h_out", "\n", "\n", "self", ".", "v_net", "=", "FCNet", "(", "[", "v_dim", ",", "h_dim", "*", "self", ".", "k", "]", ",", "act", "=", "act", ",", "dropout", "=", "dropout", "[", "0", "]", ")", "\n", "self", ".", "q_net", "=", "FCNet", "(", "[", "q_dim", ",", "h_dim", "*", "self", ".", "k", "]", ",", "act", "=", "act", ",", "dropout", "=", "dropout", "[", "0", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", "[", "1", "]", ")", "\n", "\n", "if", "k", ">", "1", ":", "\n", "            ", "self", ".", "p_net", "=", "nn", ".", "AvgPool1d", "(", "self", ".", "k", ",", "stride", "=", "self", ".", "k", ")", "\n", "\n", "", "if", "h_out", "is", "None", ":", "\n", "            ", "pass", "\n", "\n", "", "elif", "h_out", "<=", "self", ".", "c", ":", "\n", "            ", "self", ".", "h_mat", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "1", ",", "h_out", ",", "1", ",", "h_dim", "*", "self", ".", "k", ")", ".", "normal_", "(", ")", "\n", ")", "\n", "self", ".", "h_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "h_out", ",", "1", ",", "1", ")", ".", "normal_", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "h_net", "=", "weight_norm", "(", "nn", ".", "Linear", "(", "h_dim", "*", "self", ".", "k", ",", "h_out", ")", ",", "dim", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.BCNet.forward": [[496, 522], ["layers.BCNet.v_net().transpose().unsqueeze", "layers.BCNet.q_net().transpose().unsqueeze", "torch.matmul", "torch.matmul.transpose().transpose", "layers.BCNet.dropout().unsqueeze", "layers.BCNet.q_net", "torch.matmul", "layers.BCNet.dropout().transpose().unsqueeze", "layers.BCNet.q_net().transpose().unsqueeze", "torch.matmul", "layers.BCNet.h_net", "layers.BCNet.transpose().transpose", "layers.BCNet.v_net().transpose", "layers.BCNet.q_net().transpose", "torch.matmul.transpose", "layers.BCNet.unsqueeze().transpose", "torch.matmul.transpose().transpose", "layers.BCNet.dropout", "layers.BCNet.dropout().transpose", "layers.BCNet.q_net().transpose", "layers.BCNet.transpose", "layers.BCNet.v_net", "layers.BCNet.q_net", "layers.BCNet.v_net", "layers.BCNet.unsqueeze", "torch.matmul.transpose", "layers.BCNet.dropout", "layers.BCNet.q_net", "layers.BCNet.v_net"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "v", ",", "q", ")", ":", "\n", "        ", "if", "self", ".", "h_out", "is", "None", ":", "\n", "            ", "v_", "=", "self", ".", "v_net", "(", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "q_", "=", "self", ".", "q_net", "(", "q", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "d_", "=", "torch", ".", "matmul", "(", "v_", ",", "q_", ")", "\n", "logits", "=", "d_", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", "\n", "return", "logits", "\n", "\n", "# broadcast Hadamard product, matrix-matrix production", "\n", "# fast computation but memory inefficient", "\n", "", "elif", "self", ".", "h_out", "<=", "self", ".", "c", ":", "\n", "            ", "v_", "=", "self", ".", "dropout", "(", "self", ".", "v_net", "(", "v", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "q_", "=", "self", ".", "q_net", "(", "q", ")", "\n", "h_", "=", "v_", "*", "self", ".", "h_mat", "\n", "logits", "=", "torch", ".", "matmul", "(", "h_", ",", "q_", ".", "unsqueeze", "(", "1", ")", ".", "transpose", "(", "2", ",", "3", ")", ")", "\n", "logits", "=", "logits", "+", "self", ".", "h_bias", "\n", "return", "logits", "\n", "\n", "# batch outer product, linear projection", "\n", "# memory efficient but slow computation", "\n", "", "else", ":", "\n", "            ", "v_", "=", "self", ".", "dropout", "(", "self", ".", "v_net", "(", "v", ")", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "q_", "=", "self", ".", "q_net", "(", "q", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "d_", "=", "torch", ".", "matmul", "(", "v_", ",", "q_", ")", "\n", "logits", "=", "self", ".", "h_net", "(", "d_", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ")", "\n", "return", "logits", ".", "transpose", "(", "2", ",", "3", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.BCNet.forward_with_weights": [[523, 534], ["layers.BCNet.v_net().transpose().unsqueeze", "layers.BCNet.q_net().transpose().unsqueeze", "torch.matmul", "logits.unsqueeze.unsqueeze.squeeze().squeeze", "torch.matmul", "logits.unsqueeze.unsqueeze.unsqueeze", "layers.BCNet.v_net().transpose", "layers.BCNet.q_net().transpose", "w.unsqueeze", "logits.unsqueeze.unsqueeze.squeeze", "layers.BCNet.p_net().squeeze", "layers.BCNet.v_net", "layers.BCNet.q_net", "layers.BCNet.p_net"], "methods", ["None"], ["", "", "def", "forward_with_weights", "(", "self", ",", "v", ",", "q", ",", "w", ")", ":", "\n", "        ", "v_", "=", "self", ".", "v_net", "(", "v", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "2", ")", "\n", "q_", "=", "self", ".", "q_net", "(", "q", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "logits", "=", "torch", ".", "matmul", "(", "torch", ".", "matmul", "(", "v_", ",", "w", ".", "unsqueeze", "(", "1", ")", ")", ",", "q_", ")", "\n", "logits", "=", "logits", ".", "squeeze", "(", "3", ")", ".", "squeeze", "(", "2", ")", "\n", "\n", "if", "self", ".", "k", ">", "1", ":", "\n", "            ", "logits", "=", "logits", ".", "unsqueeze", "(", "1", ")", "\n", "logits", "=", "self", ".", "p_net", "(", "logits", ")", ".", "squeeze", "(", "1", ")", "*", "self", ".", "k", "\n", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.FCNet.__init__": [[541, 566], ["torch.nn.Module.__init__", "range", "layers.append", "torch.nn.Sequential", "layers.append", "layers.append", "torch.nn.utils.weight_norm.weight_norm", "layers.append", "len", "layers.append", "torch.nn.utils.weight_norm.weight_norm", "layers.append", "torch.nn.Dropout", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Linear", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ",", "dims", ",", "act", "=", "\"ReLU\"", ",", "dropout", "=", "0", ")", ":", "\n", "        ", "super", "(", "FCNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", "-", "2", ")", ":", "\n", "            ", "in_dim", "=", "dims", "[", "i", "]", "\n", "out_dim", "=", "dims", "[", "i", "+", "1", "]", "\n", "\n", "if", "dropout", ">", "0", ":", "\n", "                ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "", "layers", ".", "append", "(", "weight_norm", "(", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", ",", "dim", "=", "None", ")", ")", "\n", "\n", "if", "act", "is", "not", "None", ":", "\n", "                ", "layers", ".", "append", "(", "getattr", "(", "nn", ",", "act", ")", "(", ")", ")", "\n", "\n", "", "", "if", "dropout", ">", "0", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Dropout", "(", "dropout", ")", ")", "\n", "\n", "", "layers", ".", "append", "(", "weight_norm", "(", "nn", ".", "Linear", "(", "dims", "[", "-", "2", "]", ",", "dims", "[", "-", "1", "]", ")", ",", "dim", "=", "None", ")", ")", "\n", "\n", "if", "act", "is", "not", "None", ":", "\n", "            ", "layers", ".", "append", "(", "getattr", "(", "nn", ",", "act", ")", "(", ")", ")", "\n", "\n", "", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.FCNet.forward": [[567, 569], ["layers.FCNet.main"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.BiAttention.__init__": [[572, 580], ["torch.nn.Module.__init__", "torch.nn.utils.weight_norm.weight_norm", "layers.BCNet"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "x_dim", ",", "y_dim", ",", "z_dim", ",", "glimpse", ",", "dropout", "=", "[", "0.2", ",", "0.5", "]", ")", ":", "\n", "        ", "super", "(", "BiAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "glimpse", "=", "glimpse", "\n", "self", ".", "logits", "=", "weight_norm", "(", "\n", "BCNet", "(", "x_dim", ",", "y_dim", ",", "z_dim", ",", "glimpse", ",", "dropout", "=", "dropout", ",", "k", "=", "3", ")", ",", "\n", "name", "=", "\"h_mat\"", ",", "\n", "dim", "=", "None", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.BiAttention.forward": [[582, 585], ["layers.BiAttention.forward_all"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.BiLSTMTextEmbedding.forward_all"], ["", "def", "forward", "(", "self", ",", "v", ",", "q", ",", "v_mask", "=", "True", ")", ":", "\n", "        ", "p", ",", "logits", "=", "self", ".", "forward_all", "(", "v", ",", "q", ",", "v_mask", ")", "\n", "return", "p", ",", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.BiAttention.forward_all": [[586, 601], ["v.size", "q.size", "layers.BiAttention.logits", "layers.BiAttention.view", "torch.nn.functional.softmax", "v.abs().sum", "mask.expand.expand.expand", "layers.BiAttention.masked_fill_", "torch.nn.functional.softmax.view", "layers.BiAttention.size", "v.abs", "float"], "methods", ["None"], ["", "def", "forward_all", "(", "self", ",", "v", ",", "q", ",", "v_mask", "=", "True", ")", ":", "\n", "        ", "v_num", "=", "v", ".", "size", "(", "1", ")", "\n", "q_num", "=", "q", ".", "size", "(", "1", ")", "\n", "logits", "=", "self", ".", "logits", "(", "v", ",", "q", ")", "\n", "\n", "if", "v_mask", ":", "\n", "            ", "v_abs_sum", "=", "v", ".", "abs", "(", ")", ".", "sum", "(", "2", ")", "\n", "mask", "=", "(", "v_abs_sum", "==", "0", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "3", ")", "\n", "mask", "=", "mask", ".", "expand", "(", "logits", ".", "size", "(", ")", ")", "\n", "logits", ".", "masked_fill_", "(", "mask", ",", "-", "float", "(", "\"inf\"", ")", ")", "\n", "\n", "", "expanded_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "glimpse", ",", "v_num", "*", "q_num", ")", "\n", "p", "=", "nn", ".", "functional", ".", "softmax", "(", "expanded_logits", ",", "2", ")", "\n", "\n", "return", "p", ".", "view", "(", "-", "1", ",", "self", ".", "glimpse", ",", "v_num", ",", "q_num", ")", ",", "logits", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.decoders.VisDialDiscriminator.__init__": [[9, 18], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "embedding", ")", ":", "\n", "        ", "super", "(", "VisDialDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "embedding", "=", "embedding", "\n", "\n", "self", ".", "emb_out_dim", "=", "embedding", ".", "text_out_dim", "\n", "self", ".", "hidden_dim", "=", "self", ".", "config", "[", "\"hidden_dim\"", "]", "\n", "\n", "self", ".", "projection_layer", "=", "nn", ".", "Linear", "(", "self", ".", "emb_out_dim", ",", "self", ".", "hidden_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.decoders.VisDialDiscriminator.forward": [[19, 52], ["answer_options.view.view.size", "answer_options.view.view.size", "answer_options.view.view.view", "answer_options_len.view.view.view", "decoders.VisDialDiscriminator.embedding", "decoders.VisDialDiscriminator.projection_layer", "answer_options.view.view.view", "encoder_output.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.sum", "encoder_output.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "encoder_output", ",", "batch", ")", ":", "\n", "        ", "answer_options_len", "=", "batch", "[", "\"answer_options_len\"", "]", "\n", "\n", "# BATCH_SIZE X DIALOGUES X 100 X SEQ_LEN", "\n", "answer_options", "=", "batch", "[", "\"answer_options\"", "]", "\n", "\n", "max_seq_len", "=", "answer_options", ".", "size", "(", "-", "1", ")", "\n", "\n", "batch_size", ",", "ndialogues", ",", "noptions", ",", "seq_len", "=", "answer_options", ".", "size", "(", ")", "\n", "\n", "# (B X D X 100) X SEQ_LEN", "\n", "answer_options", "=", "answer_options", ".", "view", "(", "-", "1", ",", "max_seq_len", ")", "\n", "answer_options_len", "=", "answer_options_len", ".", "view", "(", "-", "1", ")", "\n", "\n", "# (B x D x 100) x EMB_OUT_DIM", "\n", "answer_options", "=", "self", ".", "embedding", "(", "answer_options", ")", "\n", "\n", "# (B x D x 100) x HIDDEN_DIM", "\n", "answer_options", "=", "self", ".", "projection_layer", "(", "answer_options", ")", "\n", "\n", "# (B x D) x 100 x HIDDEN_DIM", "\n", "answer_options", "=", "answer_options", ".", "view", "(", "\n", "batch_size", "*", "ndialogues", ",", "noptions", ",", "self", ".", "hidden_dim", "\n", ")", "\n", "\n", "# (B x D) x HIDDEN_DIM => (B x D) x 100 x HIDDEN_DIM", "\n", "encoder_output", "=", "encoder_output", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "noptions", ",", "-", "1", ")", "\n", "\n", "# (B x D) x 100 x HIDDEN_DIM * (B x D) x 100 x HIDDEN_DIM = SAME THING", "\n", "# SUM => (B x D) x 100", "\n", "scores", "=", "torch", ".", "sum", "(", "answer_options", "*", "encoder_output", ",", "dim", "=", "2", ")", "\n", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.decoders.LanguageDecoder.__init__": [[55, 64], ["torch.nn.Module.__init__", "torch.nn.LSTMCell", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.Dropout", "decoders.LanguageDecoder.init_weights", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.decoders.LanguageDecoder.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "language_lstm", "=", "nn", ".", "LSTMCell", "(", "\n", "in_dim", "+", "kwargs", "[", "\"hidden_dim\"", "]", ",", "kwargs", "[", "\"hidden_dim\"", "]", ",", "bias", "=", "True", "\n", ")", "\n", "self", ".", "fc", "=", "weight_norm", "(", "nn", ".", "Linear", "(", "kwargs", "[", "\"hidden_dim\"", "]", ",", "out_dim", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "kwargs", "[", "\"dropout\"", "]", ")", "\n", "self", ".", "init_weights", "(", "kwargs", "[", "\"fc_bias_init\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.decoders.LanguageDecoder.init_weights": [[65, 68], ["decoders.LanguageDecoder.fc.bias.data.fill_", "decoders.LanguageDecoder.fc.weight.data.uniform_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "fc_bias_init", ")", ":", "\n", "        ", "self", ".", "fc", ".", "bias", ".", "data", ".", "fill_", "(", "fc_bias_init", ")", "\n", "self", ".", "fc", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.decoders.LanguageDecoder.forward": [[69, 83], ["pythia.common.registry.registry.get", "decoders.LanguageDecoder.language_lstm", "decoders.LanguageDecoder.fc", "torch.cat", "decoders.LanguageDecoder.dropout"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "def", "forward", "(", "self", ",", "weighted_attn", ")", ":", "\n", "# Get LSTM state", "\n", "        ", "state", "=", "registry", ".", "get", "(", "\"{}_lstm_state\"", ".", "format", "(", "weighted_attn", ".", "device", ")", ")", "\n", "h1", ",", "c1", "=", "state", "[", "\"td_hidden\"", "]", "\n", "h2", ",", "c2", "=", "state", "[", "\"lm_hidden\"", "]", "\n", "\n", "# Language LSTM", "\n", "h2", ",", "c2", "=", "self", ".", "language_lstm", "(", "torch", ".", "cat", "(", "[", "weighted_attn", ",", "h1", "]", ",", "dim", "=", "1", ")", ",", "(", "h2", ",", "c2", ")", ")", "\n", "predictions", "=", "self", ".", "fc", "(", "self", ".", "dropout", "(", "h2", ")", ")", "\n", "\n", "# Update hidden state for t+1", "\n", "state", "[", "\"lm_hidden\"", "]", "=", "(", "h2", ",", "c2", ")", "\n", "\n", "return", "predictions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.attention.AttentionLayer.__init__": [[9, 32], ["torch.nn.Module.__init__", "pythia.modules.layers.ModalCombineLayer", "pythia.modules.layers.TransformLayer", "attention.TopDownAttention", "getattr"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_dim", ",", "question_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttentionLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "combine_type", "=", "kwargs", "[", "\"modal_combine\"", "]", "[", "\"type\"", "]", "\n", "combine_params", "=", "kwargs", "[", "\"modal_combine\"", "]", "[", "\"params\"", "]", "\n", "modal_combine_layer", "=", "ModalCombineLayer", "(", "\n", "combine_type", ",", "image_dim", ",", "question_dim", ",", "**", "combine_params", "\n", ")", "\n", "\n", "transform_type", "=", "kwargs", "[", "\"transform\"", "]", "[", "\"type\"", "]", "\n", "transform_params", "=", "kwargs", "[", "\"transform\"", "]", "[", "\"params\"", "]", "\n", "transform_layer", "=", "TransformLayer", "(", "\n", "transform_type", ",", "modal_combine_layer", ".", "out_dim", ",", "**", "transform_params", "\n", ")", "\n", "\n", "normalization", "=", "kwargs", "[", "\"normalization\"", "]", "\n", "\n", "self", ".", "module", "=", "TopDownAttention", "(", "\n", "modal_combine_layer", ",", "transform_layer", ",", "normalization", "\n", ")", "\n", "\n", "if", "getattr", "(", "self", ".", "module", ",", "\"out_dim\"", ")", ":", "\n", "            ", "self", ".", "out_dim", "=", "self", ".", "module", ".", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.attention.AttentionLayer.forward": [[33, 35], ["attention.AttentionLayer.module"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.attention.ConcatenationAttention.__init__": [[38, 44], ["torch.nn.Module.__init__", "pythia.modules.layers.GatedTanh", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_feat_dim", ",", "txt_rnn_embeding_dim", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "ConcatenationAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_feat_dim", "=", "image_feat_dim", "\n", "self", ".", "txt_embeding_dim", "=", "txt_rnn_embeding_dim", "\n", "self", ".", "fa", "=", "GatedTanh", "(", "image_feat_dim", "+", "txt_rnn_embeding_dim", ",", "hidden_size", ")", "\n", "self", ".", "lc", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.attention.ConcatenationAttention.forward": [[45, 56], ["torch.unsqueeze().expand", "torch.cat", "attention.ConcatenationAttention.lc", "torch.nn.functional.softmax", "attention_weights.expand_as.expand_as.expand_as", "attention.ConcatenationAttention.fa", "torch.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embedding", ")", ":", "\n", "        ", "_", ",", "num_location", ",", "_", "=", "image_feat", ".", "shape", "\n", "question_embedding_expand", "=", "torch", ".", "unsqueeze", "(", "question_embedding", ",", "1", ")", ".", "expand", "(", "\n", "-", "1", ",", "num_location", ",", "-", "1", "\n", ")", "\n", "concat_feature", "=", "torch", ".", "cat", "(", "(", "image_feat", ",", "question_embedding_expand", ")", ",", "dim", "=", "2", ")", "\n", "raw_attention", "=", "self", ".", "lc", "(", "self", ".", "fa", "(", "concat_feature", ")", ")", "\n", "# softmax across locations", "\n", "attention_weights", "=", "nn", ".", "functional", ".", "softmax", "(", "raw_attention", ",", "dim", "=", "1", ")", "\n", "attention_weights", "=", "attention_weights", ".", "expand_as", "(", "image_feat", ")", "\n", "return", "attention_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.attention.ProjectAttention.__init__": [[59, 67], ["torch.nn.Module.__init__", "pythia.modules.layers.GatedTanh", "pythia.modules.layers.GatedTanh", "torch.nn.Dropout", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_feat_dim", ",", "txt_rnn_embeding_dim", ",", "hidden_size", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "ProjectAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_feat_dim", "=", "image_feat_dim", "\n", "self", ".", "txt_embeding_dim", "=", "txt_rnn_embeding_dim", "\n", "self", ".", "fa_image", "=", "GatedTanh", "(", "image_feat_dim", ",", "hidden_size", ")", "\n", "self", ".", "fa_txt", "=", "GatedTanh", "(", "txt_rnn_embeding_dim", ",", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "lc", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.attention.ProjectAttention.compute_raw_att": [[68, 79], ["attention.ProjectAttention.fa_image", "attention.ProjectAttention.fa_txt", "torch.unsqueeze().expand", "attention.ProjectAttention.dropout", "attention.ProjectAttention.lc", "torch.unsqueeze"], "methods", ["None"], ["", "def", "compute_raw_att", "(", "self", ",", "image_feat", ",", "question_embedding", ")", ":", "\n", "        ", "num_location", "=", "image_feat", ".", "shape", "[", "1", "]", "\n", "image_fa", "=", "self", ".", "fa_image", "(", "image_feat", ")", "\n", "question_fa", "=", "self", ".", "fa_txt", "(", "question_embedding", ")", "\n", "question_fa_expand", "=", "torch", ".", "unsqueeze", "(", "question_fa", ",", "1", ")", ".", "expand", "(", "\n", "-", "1", ",", "num_location", ",", "-", "1", "\n", ")", "\n", "joint_feature", "=", "image_fa", "*", "question_fa_expand", "\n", "joint_feature", "=", "self", ".", "dropout", "(", "joint_feature", ")", "\n", "raw_attention", "=", "self", ".", "lc", "(", "joint_feature", ")", "\n", "return", "raw_attention", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.attention.ProjectAttention.forward": [[80, 86], ["attention.ProjectAttention.compute_raw_att", "torch.nn.functional.softmax", "attention_weights.expand_as.expand_as.expand_as"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.project_attention.compute_raw_att"], ["", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embedding", ")", ":", "\n", "        ", "raw_attention", "=", "self", ".", "compute_raw_att", "(", "image_feat", ",", "question_embedding", ")", "\n", "# softmax across locations", "\n", "attention_weights", "=", "nn", ".", "functional", ".", "softmax", "(", "raw_attention", ",", "dim", "=", "1", ")", "\n", "attention_weights", "=", "attention_weights", ".", "expand_as", "(", "image_feat", ")", "\n", "return", "attention_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.attention.DoubleProjectAttention.__init__": [[89, 99], ["torch.nn.Module.__init__", "attention.ProjectAttention", "attention.ProjectAttention"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_feat_dim", ",", "txt_rnn_embeding_dim", ",", "hidden_size", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "DoubleProjectAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "att1", "=", "ProjectAttention", "(", "\n", "image_feat_dim", ",", "txt_rnn_embeding_dim", ",", "hidden_size", ",", "dropout", "\n", ")", "\n", "self", ".", "att2", "=", "ProjectAttention", "(", "\n", "image_feat_dim", ",", "txt_rnn_embeding_dim", ",", "hidden_size", ",", "dropout", "\n", ")", "\n", "self", ".", "image_feat_dim", "=", "image_feat_dim", "\n", "self", ".", "txt_embeding_dim", "=", "txt_rnn_embeding_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.attention.DoubleProjectAttention.forward": [[100, 108], ["attention.DoubleProjectAttention.att1.compute_raw_att", "attention.DoubleProjectAttention.att2.compute_raw_att", "torch.nn.functional.softmax", "attention_weights.expand_as.expand_as.expand_as"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.project_attention.compute_raw_att", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.project_attention.compute_raw_att"], ["", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embedding", ")", ":", "\n", "        ", "att1", "=", "self", ".", "att1", ".", "compute_raw_att", "(", "image_feat", ",", "question_embedding", ")", "\n", "att2", "=", "self", ".", "att2", ".", "compute_raw_att", "(", "image_feat", ",", "question_embedding", ")", "\n", "raw_attn_weights", "=", "att1", "+", "att2", "\n", "# softmax across locations", "\n", "attention_weights", "=", "nn", ".", "functional", ".", "softmax", "(", "raw_attn_weights", ",", "dim", "=", "1", ")", "\n", "attention_weights", "=", "attention_weights", ".", "expand_as", "(", "image_feat", ")", "\n", "return", "attention_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.attention.TopDownAttention.__init__": [[113, 119], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ",", "combination_layer", ",", "transform_module", ",", "normalization", ")", ":", "\n", "        ", "super", "(", "TopDownAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "combination_layer", "=", "combination_layer", "\n", "self", ".", "normalization", "=", "normalization", "\n", "self", ".", "transform", "=", "transform_module", "\n", "self", ".", "out_dim", "=", "self", ".", "transform", ".", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.attention.TopDownAttention._mask_attentions": [[120, 135], ["attention.masked_fill.masked_fill.size", "attention.masked_fill.masked_fill.new_zeros", "torch.arange().unsqueeze", "tmp1.expand.expand.expand", "image_locs.type", "tmp2.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "torch.ge", "mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "attention.masked_fill.masked_fill.masked_fill", "tmp1.expand.expand.type", "torch.arange", "tmp2.unsqueeze().expand.unsqueeze().expand.unsqueeze", "mask.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_mask_attentions", "(", "attention", ",", "image_locs", ")", ":", "\n", "        ", "batch_size", ",", "num_loc", ",", "n_att", "=", "attention", ".", "size", "(", ")", "\n", "tmp1", "=", "attention", ".", "new_zeros", "(", "num_loc", ")", "\n", "tmp1", "[", ":", "num_loc", "]", "=", "torch", ".", "arange", "(", "0", ",", "num_loc", ",", "dtype", "=", "attention", ".", "dtype", ")", ".", "unsqueeze", "(", "\n", "dim", "=", "0", "\n", ")", "\n", "\n", "tmp1", "=", "tmp1", ".", "expand", "(", "batch_size", ",", "num_loc", ")", "\n", "tmp2", "=", "image_locs", ".", "type", "(", "tmp1", ".", "type", "(", ")", ")", "\n", "tmp2", "=", "tmp2", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "expand", "(", "batch_size", ",", "num_loc", ")", "\n", "mask", "=", "torch", ".", "ge", "(", "tmp1", ",", "tmp2", ")", "\n", "mask", "=", "mask", ".", "unsqueeze", "(", "dim", "=", "2", ")", ".", "expand_as", "(", "attention", ")", "\n", "attention", "=", "attention", ".", "masked_fill", "(", "mask", ",", "0", ")", "\n", "return", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.attention.TopDownAttention.forward": [[136, 159], ["torch.sigmoid.TopDownAttention.combination_layer", "torch.sigmoid.TopDownAttention.transform", "torch.sigmoid.TopDownAttention.normalization.lower", "torch.nn.functional.softmax", "torch.sigmoid.TopDownAttention._mask_attentions", "torch.sum", "torch.sigmoid.TopDownAttention.normalization.lower", "torch.sigmoid", "torch.sum.eq().float", "torch.sigmoid.TopDownAttention._mask_attentions", "torch.sum.eq"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.top_down_attention._mask_attentions", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.top_down_attention._mask_attentions"], ["", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embedding", ",", "image_locs", "=", "None", ")", ":", "\n", "# N x K x joint_dim", "\n", "        ", "joint_feature", "=", "self", ".", "combination_layer", "(", "image_feat", ",", "question_embedding", ")", "\n", "# N x K x n_att", "\n", "raw_attn", "=", "self", ".", "transform", "(", "joint_feature", ")", "\n", "\n", "if", "self", ".", "normalization", ".", "lower", "(", ")", "==", "\"softmax\"", ":", "\n", "            ", "attention", "=", "nn", ".", "functional", ".", "softmax", "(", "raw_attn", ",", "dim", "=", "1", ")", "\n", "if", "image_locs", "is", "not", "None", ":", "\n", "                ", "masked_attention", "=", "self", ".", "_mask_attentions", "(", "attention", ",", "image_locs", ")", "\n", "masked_attention_sum", "=", "torch", ".", "sum", "(", "masked_attention", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "masked_attention_sum", "+=", "masked_attention_sum", ".", "eq", "(", "0", ")", ".", "float", "(", ")", "+", "self", ".", "EPS", "\n", "masked_attention", "=", "masked_attention", "/", "masked_attention_sum", "\n", "", "else", ":", "\n", "                ", "masked_attention", "=", "attention", "\n", "\n", "", "", "elif", "self", ".", "normalization", ".", "lower", "(", ")", "==", "\"sigmoid\"", ":", "\n", "            ", "attention", "=", "torch", ".", "sigmoid", "(", "raw_attn", ")", "\n", "masked_attention", "=", "attention", "\n", "if", "image_locs", "is", "not", "None", ":", "\n", "                ", "masked_attention", "=", "self", ".", "_mask_attentions", "(", "attention", ",", "image_locs", ")", "\n", "\n", "", "", "return", "masked_attention", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.TextEmbedding.__init__": [[17, 44], ["torch.nn.Module.__init__", "kwargs.get", "kwargs.get", "pythia.modules.layers.Identity", "embeddings.VocabEmbedding", "embeddings.PreExtractedEmbedding", "embeddings.BiLSTMTextEmbedding", "embeddings.AttentionTextEmbedding", "torch.nn.Embedding", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["    ", "def", "__init__", "(", "self", ",", "emb_type", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TextEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_data_dir", "=", "kwargs", ".", "get", "(", "\"model_data_dir\"", ",", "None", ")", "\n", "self", ".", "embedding_dim", "=", "kwargs", ".", "get", "(", "\"embedding_dim\"", ",", "None", ")", "\n", "\n", "# Update kwargs here", "\n", "if", "emb_type", "==", "\"identity\"", ":", "\n", "            ", "self", ".", "module", "=", "Identity", "(", ")", "\n", "self", ".", "module", ".", "text_out_dim", "=", "self", ".", "embedding_dim", "\n", "", "elif", "emb_type", "==", "\"vocab\"", ":", "\n", "            ", "self", ".", "module", "=", "VocabEmbedding", "(", "**", "kwargs", ")", "\n", "self", ".", "module", ".", "text_out_dim", "=", "self", ".", "embedding_dim", "\n", "", "elif", "emb_type", "==", "\"preextracted\"", ":", "\n", "            ", "self", ".", "module", "=", "PreExtractedEmbedding", "(", "**", "kwargs", ")", "\n", "", "elif", "emb_type", "==", "\"bilstm\"", ":", "\n", "            ", "self", ".", "module", "=", "BiLSTMTextEmbedding", "(", "**", "kwargs", ")", "\n", "", "elif", "emb_type", "==", "\"attention\"", ":", "\n", "            ", "self", ".", "module", "=", "AttentionTextEmbedding", "(", "**", "kwargs", ")", "\n", "", "elif", "emb_type", "==", "\"torch\"", ":", "\n", "            ", "vocab_size", "=", "kwargs", "[", "\"vocab_size\"", "]", "\n", "embedding_dim", "=", "kwargs", "[", "\"embedding_dim\"", "]", "\n", "self", ".", "module", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embedding_dim", ")", "\n", "self", ".", "module", ".", "text_out_dim", "=", "self", ".", "embedding_dim", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Unknown question embedding '%s'\"", "%", "emb_type", ")", "\n", "\n", "", "self", ".", "text_out_dim", "=", "self", ".", "module", ".", "text_out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.TextEmbedding.forward": [[45, 47], ["embeddings.TextEmbedding.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.VocabEmbedding.__init__": [[50, 53], ["pythia.utils.vocab.Vocab", "embeddings.VocabEmbedding.vocab.get_embedding"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_embedding"], ["    ", "def", "__init__", "(", "self", ",", "embedding_dim", ",", "vocab_params", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "Vocab", "(", "**", "vocab_params", ")", "\n", "self", ".", "module", "=", "self", ".", "vocab", ".", "get_embedding", "(", "nn", ".", "Embedding", ",", "embedding_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.VocabEmbedding.forward": [[54, 56], ["embeddings.VocabEmbedding.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.BiLSTMTextEmbedding.__init__": [[59, 84], ["torch.nn.Module.__init__", "rnn_cls"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "hidden_dim", ",", "\n", "embedding_dim", ",", "\n", "num_layers", ",", "\n", "dropout", ",", "\n", "bidirectional", "=", "False", ",", "\n", "rnn_type", "=", "\"GRU\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BiLSTMTextEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "text_out_dim", "=", "hidden_dim", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "\n", "if", "rnn_type", "==", "\"LSTM\"", ":", "\n", "            ", "rnn_cls", "=", "nn", ".", "LSTM", "\n", "", "elif", "rnn_type", "==", "\"GRU\"", ":", "\n", "            ", "rnn_cls", "=", "nn", ".", "GRU", "\n", "\n", "", "self", ".", "recurrent_encoder", "=", "rnn_cls", "(", "\n", "input_size", "=", "embedding_dim", ",", "\n", "hidden_size", "=", "hidden_dim", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "dropout", "=", "dropout", ",", "\n", "bidirectional", "=", "bidirectional", ",", "\n", "batch_first", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.BiLSTMTextEmbedding.forward": [[86, 95], ["embeddings.BiLSTMTextEmbedding.recurrent_encoder", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", ",", "_", "=", "self", ".", "recurrent_encoder", "(", "x", ")", "\n", "# Return last state", "\n", "if", "self", ".", "bidirectional", ":", "\n", "            ", "return", "out", "[", ":", ",", "-", "1", "]", "\n", "\n", "", "forward_", "=", "out", "[", ":", ",", "-", "1", ",", ":", "self", ".", "num_hid", "]", "\n", "backward", "=", "out", "[", ":", ",", "0", ",", "self", ".", "num_hid", ":", "]", "\n", "return", "torch", ".", "cat", "(", "(", "forward_", ",", "backward", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.BiLSTMTextEmbedding.forward_all": [[96, 99], ["embeddings.BiLSTMTextEmbedding.recurrent_encoder"], "methods", ["None"], ["", "def", "forward_all", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", ",", "_", "=", "self", ".", "recurrent_encoder", "(", "x", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.PreExtractedEmbedding.__init__": [[102, 107], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "out_dim", ",", "base_path", ")", ":", "\n", "        ", "super", "(", "PreExtractedEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "text_out_dim", "=", "out_dim", "\n", "self", ".", "base_path", "=", "base_path", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.PreExtractedEmbedding.forward": [[108, 113], ["torch.stack", "embeddings.append", "embeddings.PreExtractedEmbedding.get_item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.dataset.CLEVRDataset.get_item"], ["", "def", "forward", "(", "self", ",", "qids", ")", ":", "\n", "        ", "embeddings", "=", "[", "]", "\n", "for", "qid", "in", "qids", ":", "\n", "            ", "embeddings", ".", "append", "(", "self", ".", "get_item", "(", "qid", ")", ")", "\n", "", "return", "torch", ".", "stack", "(", "embeddings", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.PreExtractedEmbedding.get_item": [[114, 117], ["functools.lru_cache", "numpy.load", "os.path.join", "str", "qid.item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["", "@", "lru_cache", "(", "maxsize", "=", "5000", ")", "\n", "def", "get_item", "(", "self", ",", "qid", ")", ":", "\n", "        ", "return", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "base_path", ",", "str", "(", "qid", ".", "item", "(", ")", ")", "+", "\".npy\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.AttentionTextEmbedding.__init__": [[120, 157], ["torch.nn.Module.__init__", "kwargs.get", "torch.nn.LSTM", "torch.nn.Dropout", "torch.nn.Conv1d", "torch.nn.Conv1d", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "embedding_dim", ",", "num_layers", ",", "dropout", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttentionTextEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "text_out_dim", "=", "hidden_dim", "*", "kwargs", "[", "\"conv2_out\"", "]", "\n", "\n", "bidirectional", "=", "kwargs", ".", "get", "(", "\"bidirectional\"", ",", "False", ")", "\n", "\n", "self", ".", "recurrent_unit", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "embedding_dim", ",", "\n", "hidden_size", "=", "hidden_dim", "//", "2", "if", "bidirectional", "else", "hidden_dim", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "batch_first", "=", "True", ",", "\n", "bidirectional", "=", "bidirectional", ",", "\n", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "conv1_out", "=", "kwargs", "[", "\"conv1_out\"", "]", "\n", "conv2_out", "=", "kwargs", "[", "\"conv2_out\"", "]", "\n", "kernel_size", "=", "kwargs", "[", "\"kernel_size\"", "]", "\n", "padding", "=", "kwargs", "[", "\"padding\"", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "hidden_dim", ",", "\n", "out_channels", "=", "conv1_out", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "padding", ",", "\n", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "conv1_out", ",", "\n", "out_channels", "=", "conv2_out", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "padding", ",", "\n", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.AttentionTextEmbedding.forward": [[158, 179], ["x.size", "embeddings.AttentionTextEmbedding.recurrent_unit.flatten_parameters", "embeddings.AttentionTextEmbedding.recurrent_unit", "embeddings.AttentionTextEmbedding.dropout", "embeddings.AttentionTextEmbedding.permute", "embeddings.AttentionTextEmbedding.conv1", "embeddings.AttentionTextEmbedding.relu", "embeddings.AttentionTextEmbedding.conv2", "torch.nn.functional.softmax", "torch.bmm", "torch.bmm.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "batch_size", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "self", ".", "recurrent_unit", ".", "flatten_parameters", "(", ")", "\n", "# self.recurrent_unit.flatten_parameters()", "\n", "lstm_out", ",", "_", "=", "self", ".", "recurrent_unit", "(", "x", ")", "# N * T * hidden_dim", "\n", "lstm_drop", "=", "self", ".", "dropout", "(", "lstm_out", ")", "# N * T * hidden_dim", "\n", "lstm_reshape", "=", "lstm_drop", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# N * hidden_dim * T", "\n", "\n", "qatt_conv1", "=", "self", ".", "conv1", "(", "lstm_reshape", ")", "# N x conv1_out x T", "\n", "qatt_relu", "=", "self", ".", "relu", "(", "qatt_conv1", ")", "\n", "qatt_conv2", "=", "self", ".", "conv2", "(", "qatt_relu", ")", "# N x conv2_out x T", "\n", "\n", "# Over last dim", "\n", "qtt_softmax", "=", "nn", ".", "functional", ".", "softmax", "(", "qatt_conv2", ",", "dim", "=", "2", ")", "\n", "# N * conv2_out * hidden_dim", "\n", "qtt_feature", "=", "torch", ".", "bmm", "(", "qtt_softmax", ",", "lstm_drop", ")", "\n", "# N * (conv2_out * hidden_dim)", "\n", "qtt_feature_concat", "=", "qtt_feature", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "return", "qtt_feature_concat", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.ImageEmbedding.__init__": [[197, 202], ["torch.nn.Module.__init__", "pythia.modules.attention.AttentionLayer"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ",", "img_dim", ",", "question_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ImageEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "image_attention_model", "=", "AttentionLayer", "(", "img_dim", ",", "question_dim", ",", "**", "kwargs", ")", "\n", "self", ".", "out_dim", "=", "self", ".", "image_attention_model", ".", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.ImageEmbedding.forward": [[203, 223], ["embeddings.ImageEmbedding.image_attention_model", "embeddings.ImageEmbedding.permute", "getattr", "torch.bmm", "embeddings.ImageEmbedding.permute.size", "torch.bmm.view", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image_feat_variable", ",", "question_embedding", ",", "image_dims", ",", "extra", "=", "{", "}", ")", ":", "\n", "# N x K x n_att", "\n", "        ", "attention", "=", "self", ".", "image_attention_model", "(", "\n", "image_feat_variable", ",", "question_embedding", ",", "image_dims", "\n", ")", "\n", "att_reshape", "=", "attention", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "\n", "order_vectors", "=", "getattr", "(", "extra", ",", "\"order_vectors\"", ",", "None", ")", "\n", "\n", "if", "order_vectors", "is", "not", "None", ":", "\n", "            ", "image_feat_variable", "=", "torch", ".", "cat", "(", "\n", "[", "image_feat_variable", ",", "order_vectors", "]", ",", "dim", "=", "-", "1", "\n", ")", "\n", "", "tmp_embedding", "=", "torch", ".", "bmm", "(", "\n", "att_reshape", ",", "image_feat_variable", "\n", ")", "# N x n_att x image_dim", "\n", "batch_size", "=", "att_reshape", ".", "size", "(", "0", ")", "\n", "image_embedding", "=", "tmp_embedding", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "return", "image_embedding", ",", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.ImageFinetune.__init__": [[226, 238], ["torch.nn.Module.__init__", "torch.nn.Linear", "embeddings.ImageFinetune.lc.weight.data.copy_", "embeddings.ImageFinetune.lc.bias.data.copy_", "open", "pickle.load", "open", "pickle.load", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "weights_file", ",", "bias_file", ")", ":", "\n", "        ", "super", "(", "ImageFinetune", ",", "self", ")", ".", "__init__", "(", ")", "\n", "with", "open", "(", "weights_file", ",", "\"rb\"", ")", "as", "w", ":", "\n", "            ", "weights", "=", "pickle", ".", "load", "(", "w", ")", "\n", "", "with", "open", "(", "bias_file", ",", "\"rb\"", ")", "as", "b", ":", "\n", "            ", "bias", "=", "pickle", ".", "load", "(", "b", ")", "\n", "", "out_dim", "=", "bias", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "lc", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "lc", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "weights", ")", ")", "\n", "self", ".", "lc", ".", "bias", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "bias", ")", ")", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.ImageFinetune.forward": [[239, 243], ["embeddings.ImageFinetune.lc", "torch.nn.functional.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "i2", "=", "self", ".", "lc", "(", "image", ")", "\n", "i3", "=", "nn", ".", "functional", ".", "relu", "(", "i2", ")", "\n", "return", "i3", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.SubQuestionLoss.__init__": [[66, 68], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.SubQuestionLoss.forward": [[69, 87], ["torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss.", "sample_list[].size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sample_list", ",", "model_output", ")", ":", "\n", "        ", "\"\"\"Calculates and returns the binary cross entropy for logits\n\n        Args:\n            sample_list (SampleList): SampleList containing `targets` attribute.\n            model_output (Dict): Model output containing `scores` attribute.\n\n        Returns:\n            torch.FloatTensor: Float value for loss.\n\n        \"\"\"", "\n", "loss_crit", "=", "nn", ".", "MSELoss", "(", ")", "\n", "#pdb.set_trace()", "\n", "reas", "=", "model_output", "[", "\"importance_vectors_reas\"", "]", "\n", "sub", "=", "model_output", "[", "\"importance_vectors_sq\"", "]", "\n", "loss", "=", "loss_crit", "(", "reas", ",", "sub", ")", "\n", "\n", "return", "loss", "*", "sample_list", "[", "\"targets\"", "]", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.Losses.__init__": [[118, 125], ["torch.Module.__init__", "pythia.common.registry.registry.get", "losses.Losses.losses.append", "losses.PythiaLoss"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["def", "__init__", "(", "self", ",", "loss_list", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "losses", "=", "[", "]", "\n", "tp", "=", "registry", ".", "get", "(", "\"config\"", ")", ".", "training_parameters", "\n", "self", ".", "_evalai_inference", "=", "tp", ".", "evalai_inference", "\n", "for", "loss", "in", "loss_list", ":", "\n", "            ", "self", ".", "losses", ".", "append", "(", "PythiaLoss", "(", "loss", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.Losses.forward": [[126, 159], ["pythia.common.registry.registry.register", "hasattr", "output.update", "warnings.warn", "warnings.warn", "warnings.warn", "warnings.warn", "loss"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update"], ["", "", "def", "forward", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Takes in the original ``SampleList`` returned from DataLoader\n        and `model_output` returned from the model and returned a Dict containing\n        loss for each of the losses in `losses`.\n\n        Args:\n            sample_list (SampleList): SampleList given be the dataloader.\n            model_output (Dict): Dict returned from model as output.\n\n        Returns:\n            Dict: Dictionary containing loss value for each of the loss.\n\n        \"\"\"", "\n", "output", "=", "{", "}", "\n", "if", "not", "hasattr", "(", "sample_list", ",", "\"targets\"", ")", ":", "\n", "            ", "if", "not", "self", ".", "_evalai_inference", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "\"Sample list has not field 'targets', are you \"", "\n", "\"sure that your ImDB has labels? you may have \"", "\n", "\"wanted to run with --evalai_inference 1\"", "\n", ")", "\n", "", "return", "output", "\n", "\n", "", "for", "loss", "in", "self", ".", "losses", ":", "\n", "            ", "output", ".", "update", "(", "loss", "(", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ")", "\n", "\n", "", "registry_loss_key", "=", "\"{}.{}.{}\"", ".", "format", "(", "\n", "\"losses\"", ",", "sample_list", ".", "dataset_name", ",", "sample_list", ".", "dataset_type", "\n", ")", "\n", "# Register the losses to registry", "\n", "registry", ".", "register", "(", "registry_loss_key", ",", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.PythiaLoss.__init__": [[179, 203], ["torch.Module.__init__", "pythia.common.registry.registry.get", "pythia.common.registry.registry.get_loss_class", "ValueError", "ValueError", "pythia.common.registry.registry.get_loss_class.", "params.get", "pythia.common.registry.registry.get_loss_class."], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_loss_class", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["def", "__init__", "(", "self", ",", "params", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "if", "\"type\"", "not", "in", "params", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Parameters to loss must have 'type' field to\"", "\n", "\"specify type of loss to instantiate\"", "\n", ")", "\n", "\n", "", "loss_name", "=", "params", "[", "\"type\"", "]", "\n", "self", ".", "name", "=", "loss_name", "\n", "\n", "loss_class", "=", "registry", ".", "get_loss_class", "(", "loss_name", ")", "\n", "\n", "if", "loss_class", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"No loss named {} is registered to registry\"", ".", "format", "(", "loss_name", ")", "\n", ")", "\n", "# Special case of multi as it requires an array", "\n", "", "if", "loss_name", "==", "\"multi\"", ":", "\n", "            ", "self", ".", "loss_criterion", "=", "loss_class", "(", "params", ")", "\n", "", "else", ":", "\n", "            ", "loss_params", "=", "params", ".", "get", "(", "\"params\"", ",", "{", "}", ")", "\n", "self", ".", "loss_criterion", "=", "loss_class", "(", "**", "loss_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.PythiaLoss.forward": [[204, 214], ["losses.PythiaLoss.loss_criterion", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "loss.view.view.dim", "loss.view.view.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "loss", "=", "self", ".", "loss_criterion", "(", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "not", "isinstance", "(", "loss", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "loss", "=", "torch", ".", "tensor", "(", "loss", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "if", "loss", ".", "dim", "(", ")", "==", "0", ":", "\n", "            ", "loss", "=", "loss", ".", "view", "(", "1", ")", "\n", "\n", "", "return", "{", "\"{}/{}\"", ".", "format", "(", "sample_list", ".", "dataset_type", ",", "self", ".", "name", ")", ":", "loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.LogitBinaryCrossEntropy.__init__": [[283, 285], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.LogitBinaryCrossEntropy.forward": [[286, 303], ["torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "targets.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sample_list", ",", "model_output", ")", ":", "\n", "        ", "\"\"\"Calculates and returns the binary cross entropy for logits\n\n        Args:\n            sample_list (SampleList): SampleList containing `targets` attribute.\n            model_output (Dict): Model output containing `scores` attribute.\n\n        Returns:\n            torch.FloatTensor: Float value for loss.\n\n        \"\"\"", "\n", "scores", "=", "model_output", "[", "\"scores_oq\"", "]", "\n", "targets", "=", "sample_list", "[", "\"targets_oq\"", "]", "\n", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "scores", ",", "targets", ",", "reduction", "=", "\"mean\"", ")", "\n", "#pdb.set_trace()", "\n", "\n", "return", "loss", "*", "targets", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.BinaryCrossEntropyLoss.__init__": [[307, 309], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.BinaryCrossEntropyLoss.forward": [[310, 326], ["torch.binary_cross_entropy", "torch.binary_cross_entropy", "torch.binary_cross_entropy", "targets.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sample_list", ",", "model_output", ")", ":", "\n", "        ", "\"\"\"Calculates and returns the binary cross entropy.\n\n        Args:\n            sample_list (SampleList): SampleList containing `targets` attribute.\n            model_output (Dict): Model output containing `scores` attribute.\n\n        Returns:\n            torch.FloatTensor: Float value for loss.\n\n        \"\"\"", "\n", "scores", "=", "model_output", "[", "\"scores\"", "]", "\n", "targets", "=", "sample_list", "[", "\"targets\"", "]", "\n", "loss", "=", "F", ".", "binary_cross_entropy", "(", "scores", ",", "targets", ",", "reduction", "=", "\"mean\"", ")", "\n", "\n", "return", "loss", "*", "targets", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.CaptionCrossEntropyLoss.__init__": [[330, 332], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.CaptionCrossEntropyLoss.forward": [[333, 365], ["hasattr", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "sample_list.caption_len.sort", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "targets.size", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "targets.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sample_list", ",", "model_output", ")", ":", "\n", "        ", "\"\"\"Calculates and returns the cross entropy loss for captions.\n\n        Args:\n            sample_list (SampleList): SampleList containing `targets` attribute.\n            model_output (Dict): Model output containing `scores` attribute.\n\n        Returns:\n            torch.FloatTensor: Float value for loss.\n\n        \"\"\"", "\n", "scores", "=", "model_output", "[", "\"scores\"", "]", "\n", "targets", "=", "sample_list", "[", "\"targets\"", "]", "\n", "\n", "# If no captions(test dataset) then assume decode length to be uniform", "\n", "if", "hasattr", "(", "sample_list", ",", "\"caption_len\"", ")", ":", "\n", "            ", "caption_lengths", ",", "_", "=", "sample_list", ".", "caption_len", ".", "sort", "(", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "decode_lengths", "=", "(", "caption_lengths", "-", "1", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "decode_lengths", "=", "[", "targets", ".", "size", "(", "1", ")", "]", "*", "targets", ".", "size", "(", "0", ")", "\n", "", "if", "torch", ".", "__version__", ">=", "\"1.1\"", ":", "\n", "            ", "scores", "=", "pack_padded_sequence", "(", "scores", ",", "decode_lengths", ",", "batch_first", "=", "True", ")", ".", "data", "\n", "targets", "=", "pack_padded_sequence", "(", "\n", "targets", ",", "decode_lengths", ",", "batch_first", "=", "True", "\n", ")", ".", "data", "\n", "", "else", ":", "\n", "            ", "scores", ",", "_", "=", "pack_padded_sequence", "(", "scores", ",", "decode_lengths", ",", "batch_first", "=", "True", ")", "\n", "targets", ",", "_", "=", "pack_padded_sequence", "(", "targets", ",", "decode_lengths", ",", "batch_first", "=", "True", ")", "\n", "\n", "", "loss", "=", "F", ".", "cross_entropy", "(", "scores", ",", "targets", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.NLLLoss.__init__": [[372, 374], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.NLLLoss.forward": [[375, 392], ["targets.max", "torch.nll_loss", "torch.nll_loss", "torch.nll_loss", "targets.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sample_list", ",", "model_output", ")", ":", "\n", "        ", "\"\"\"Calculates and returns the negative log likelihood.\n\n        Args:\n            sample_list (SampleList): SampleList containing `targets` attribute.\n            model_output (Dict): Model output containing `scores` attribute.\n\n        Returns:\n            torch.FloatTensor: Float value for loss.\n\n        \"\"\"", "\n", "scores", "=", "model_output", "[", "\"scores\"", "]", "\n", "targets", "=", "sample_list", "[", "\"targets\"", "]", "\n", "_", ",", "idx", "=", "targets", ".", "max", "(", "dim", "=", "1", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "scores", ",", "idx", ",", "reduction", "=", "\"mean\"", ")", "\n", "\n", "return", "loss", "*", "targets", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.MultiLoss.__init__": [[428, 442], ["torch.Module.__init__", "pythia.common.registry.registry.get", "losses.MultiLoss.loss_names.append", "losses.PythiaLoss", "loss_params.get", "losses.MultiLoss.losses.append", "losses.MultiLoss.losses_weights.append"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["def", "__init__", "(", "self", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "losses", "=", "[", "]", "\n", "self", ".", "losses_weights", "=", "[", "]", "\n", "self", ".", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "\n", "self", ".", "loss_names", "=", "[", "]", "\n", "\n", "for", "loss_params", "in", "params", "[", "\"params\"", "]", ":", "\n", "            ", "self", ".", "loss_names", ".", "append", "(", "loss_params", "[", "\"type\"", "]", ")", "\n", "loss_fn", "=", "PythiaLoss", "(", "loss_params", ")", "\n", "loss_weight", "=", "loss_params", ".", "get", "(", "\"weight\"", ",", "{", "}", ")", "\n", "self", ".", "losses", ".", "append", "(", "loss_fn", ")", "\n", "self", ".", "losses_weights", ".", "append", "(", "loss_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.MultiLoss.forward": [[443, 460], ["enumerate", "loss_fn", "list", "loss_fn.values"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Calculates and returns the multi loss.\n\n        Args:\n            sample_list (SampleList): SampleList containing `attentions` attribute.\n            model_output (Dict): Model output containing `attention_supervision`\n                                 attribute.\n\n        Returns:\n            torch.FloatTensor: Float value for loss.\n\n        \"\"\"", "\n", "loss", "=", "0", "\n", "for", "idx", ",", "loss_fn", "in", "enumerate", "(", "self", ".", "losses", ")", ":", "\n", "            ", "value", "=", "loss_fn", "(", "sample_list", ",", "model_output", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "loss", "+=", "self", ".", "losses_weights", "[", "idx", "]", "*", "list", "(", "value", ".", "values", "(", ")", ")", "[", "0", "]", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.AttentionSupervisionLoss.__init__": [[468, 472], ["torch.Module.__init__", "torch.functional.binary_cross_entropy", "torch.functional.binary_cross_entropy", "torch.functional.binary_cross_entropy"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss_fn", "=", "lambda", "*", "args", ",", "**", "kwargs", ":", "nn", ".", "functional", ".", "binary_cross_entropy", "(", "\n", "*", "args", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.AttentionSupervisionLoss.forward": [[474, 496], ["losses.AttentionSupervisionLoss.loss_fn", "attention_supervision.float", "attention_supervision.size", "attention_supervision.float"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sample_list", ",", "model_output", ")", ":", "\n", "        ", "\"\"\"Calculates and returns the multi loss.\n\n        Args:\n            sample_list (SampleList): SampleList containing `targets` attribute.\n            model_output (Dict): Model output containing `scores` attribute.\n\n        Returns:\n            torch.FloatTensor: Float value for loss.\n\n        \"\"\"", "\n", "context_attentions", "=", "model_output", "[", "\"attentions\"", "]", "\n", "attention_supervision", "=", "sample_list", "[", "\"info\"", "]", "[", "\"attention_supervision\"", "]", "\n", "\n", "loss", "=", "self", ".", "loss_fn", "(", "\n", "context_attentions", "[", "0", "]", ",", "\n", "attention_supervision", ".", "float", "(", ")", ",", "\n", "weight", "=", "attention_supervision", ".", "float", "(", ")", ",", "\n", ")", "\n", "\n", "# Multiply average loss back with target size to get actual loss", "\n", "return", "loss", "*", "attention_supervision", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.WeightedSoftmaxLoss.__init__": [[500, 502], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.WeightedSoftmaxLoss.forward": [[503, 517], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "losses.kl_div", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "kl_div.size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.kl_div"], ["", "def", "forward", "(", "self", ",", "sample_list", ",", "model_output", ")", ":", "\n", "        ", "pred_score", "=", "model_output", "[", "\"scores\"", "]", "\n", "target_score", "=", "sample_list", "[", "\"targets\"", "]", "\n", "\n", "tar_sum", "=", "torch", ".", "sum", "(", "target_score", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "tar_sum_is_0", "=", "torch", ".", "eq", "(", "tar_sum", ",", "0", ")", "\n", "tar_sum", ".", "masked_fill_", "(", "tar_sum_is_0", ",", "1.0e-06", ")", "\n", "tar", "=", "target_score", "/", "tar_sum", "\n", "\n", "res", "=", "F", ".", "log_softmax", "(", "pred_score", ",", "dim", "=", "1", ")", "\n", "loss", "=", "kl_div", "(", "res", ",", "tar", ")", "\n", "loss", "=", "loss", "*", "tar_sum", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "loss", ".", "size", "(", "0", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.SoftmaxKlDivLoss.__init__": [[521, 523], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.SoftmaxKlDivLoss.forward": [[524, 537], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "losses.kl_div", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "kl_div.size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.kl_div"], ["", "def", "forward", "(", "self", ",", "sample_list", ",", "model_output", ")", ":", "\n", "        ", "pred_score", "=", "model_output", "[", "\"scores\"", "]", "\n", "target_score", "=", "sample_list", "[", "\"targets\"", "]", "\n", "\n", "tar_sum", "=", "torch", ".", "sum", "(", "target_score", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "tar_sum_is_0", "=", "torch", ".", "eq", "(", "tar_sum", ",", "0", ")", "\n", "tar_sum", ".", "masked_fill_", "(", "tar_sum_is_0", ",", "1.0e-06", ")", "\n", "tar", "=", "target_score", "/", "tar_sum", "\n", "\n", "res", "=", "F", ".", "log_softmax", "(", "pred_score", ",", "dim", "=", "1", ")", "\n", "loss", "=", "kl_div", "(", "res", ",", "tar", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "loss", ".", "size", "(", "0", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.WrongLoss.__init__": [[541, 543], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.WrongLoss.forward": [[544, 557], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.kl_div", "torch.kl_div", "torch.kl_div", "target_score.size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.kl_div", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.kl_div", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.kl_div"], ["", "def", "forward", "(", "self", ",", "sample_list", ",", "model_output", ")", ":", "\n", "        ", "pred_score", "=", "model_output", "[", "\"scores\"", "]", "\n", "target_score", "=", "sample_list", "[", "\"targets\"", "]", "\n", "\n", "tar_sum", "=", "torch", ".", "sum", "(", "target_score", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "tar_sum_is_0", "=", "torch", ".", "eq", "(", "tar_sum", ",", "0", ")", "\n", "tar_sum", ".", "masked_fill_", "(", "tar_sum_is_0", ",", "1.0e-06", ")", "\n", "tar", "=", "target_score", "/", "tar_sum", "\n", "\n", "res", "=", "F", ".", "log_softmax", "(", "pred_score", ",", "dim", "=", "1", ")", "\n", "loss", "=", "F", ".", "kl_div", "(", "res", ",", "tar", ",", "reduction", "=", "\"mean\"", ")", "\n", "loss", "*=", "target_score", ".", "size", "(", "1", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.CombinedLoss.__init__": [[561, 564], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight_softmax", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight_softmax", "=", "weight_softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.CombinedLoss.forward": [[565, 586], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "losses.kl_div", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "target_score.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "kl_div.size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.kl_div"], ["", "def", "forward", "(", "self", ",", "sample_list", ",", "model_output", ")", ":", "\n", "        ", "pred_score", "=", "model_output", "[", "\"scores\"", "]", "\n", "target_score", "=", "sample_list", "[", "\"targets\"", "]", "\n", "\n", "tar_sum", "=", "torch", ".", "sum", "(", "target_score", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "tar_sum_is_0", "=", "torch", ".", "eq", "(", "tar_sum", ",", "0", ")", "\n", "tar_sum", ".", "masked_fill_", "(", "tar_sum_is_0", ",", "1.0e-06", ")", "\n", "tar", "=", "target_score", "/", "tar_sum", "\n", "\n", "res", "=", "F", ".", "log_softmax", "(", "pred_score", ",", "dim", "=", "1", ")", "\n", "loss1", "=", "kl_div", "(", "res", ",", "tar", ")", "\n", "loss1", "=", "torch", ".", "sum", "(", "loss1", ")", "/", "loss1", ".", "size", "(", "0", ")", "\n", "\n", "loss2", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred_score", ",", "target_score", ",", "reduction", "=", "\"mean\"", "\n", ")", "\n", "loss2", "*=", "target_score", ".", "size", "(", "1", ")", "\n", "\n", "loss", "=", "self", ".", "weight_softmax", "*", "loss1", "+", "loss2", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.losses.kl_div": [[394, 402], ["torch.eq", "torch.eq", "torch.eq", "y.data.masked_fill_", "torch.log", "torch.log", "torch.log", "y.data.masked_fill_", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "def", "kl_div", "(", "log_x", ",", "y", ")", ":", "\n", "    ", "y_is_0", "=", "torch", ".", "eq", "(", "y", ".", "data", ",", "0", ")", "\n", "y", ".", "data", ".", "masked_fill_", "(", "y_is_0", ",", "1", ")", "\n", "log_y", "=", "torch", ".", "log", "(", "y", ")", "\n", "y", ".", "data", ".", "masked_fill_", "(", "y_is_0", ",", "0", ")", "\n", "res", "=", "y", "*", "(", "log_y", "-", "log_x", ")", "\n", "\n", "return", "torch", ".", "sum", "(", "res", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.test_base_dataset.TestBaseDataset.test_init_processors": [[11, 47], ["os.path.join", "pythia.utils.configuration.Configuration", "test_base_dataset.TestBaseDataset._fix_configuration", "pythia.utils.configuration.Configuration.freeze", "pythia.tasks.base_dataset.BaseDataset", "test_base_dataset.TestBaseDataset.assertFalse", "pythia.tasks.base_dataset.BaseDataset.init_processors", "test_base_dataset.TestBaseDataset.assertTrue", "os.path.abspath", "os.path.abspath", "any", "test_base_dataset.TestBaseDataset.assertIsNone", "all", "test_base_dataset.TestBaseDataset.assertIsNotNone", "pythia.common.registry.registry.get", "pythia.common.registry.registry.get", "hasattr", "hasattr", "pythia.utils.configuration.Configuration.get_config"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.test_base_dataset.TestBaseDataset._fix_configuration", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.freeze", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset.BaseDataset.init_processors", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.get_config"], ["    ", "def", "test_init_processors", "(", "self", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ",", "\n", "\"../../../pythia/common/defaults/configs/tasks/vqa/vqa2.yml\"", "\n", ")", "\n", "\n", "configuration", "=", "Configuration", "(", "os", ".", "path", ".", "abspath", "(", "path", ")", ")", "\n", "self", ".", "_fix_configuration", "(", "configuration", ")", "\n", "configuration", ".", "freeze", "(", ")", "\n", "\n", "base_dataset", "=", "BaseDataset", "(", "\n", "\"vqa\"", ",", "\n", "\"vqa2\"", ",", "\n", "configuration", ".", "get_config", "(", ")", "[", "\"task_attributes\"", "]", "[", "\"vqa\"", "]", "[", "\"dataset_attributes\"", "]", "[", "\n", "\"vqa2\"", "\n", "]", ",", "\n", ")", "\n", "expected_processors", "=", "[", "\n", "\"answer_processor\"", ",", "\n", "\"ocr_token_processor\"", ",", "\n", "\"bbox_processor\"", ",", "\n", "]", "\n", "\n", "# Check no processors are initialized before init_processors call", "\n", "self", ".", "assertFalse", "(", "any", "(", "hasattr", "(", "base_dataset", ",", "key", ")", "\n", "for", "key", "in", "expected_processors", ")", ")", "\n", "\n", "for", "processor", "in", "expected_processors", ":", "\n", "            ", "self", ".", "assertIsNone", "(", "registry", ".", "get", "(", "\"{}_{}\"", ".", "format", "(", "\"vqa\"", ",", "processor", ")", ")", ")", "\n", "\n", "# Check processors are initialized after init_processors", "\n", "", "base_dataset", ".", "init_processors", "(", ")", "\n", "self", ".", "assertTrue", "(", "all", "(", "hasattr", "(", "base_dataset", ",", "key", ")", "\n", "for", "key", "in", "expected_processors", ")", ")", "\n", "for", "processor", "in", "expected_processors", ":", "\n", "            ", "self", ".", "assertIsNotNone", "(", "registry", ".", "get", "(", "\"{}_{}\"", ".", "format", "(", "\"vqa\"", ",", "processor", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.test_base_dataset.TestBaseDataset._fix_configuration": [[48, 54], ["processors.pop", "processors.pop"], "methods", ["None"], ["", "", "def", "_fix_configuration", "(", "self", ",", "configuration", ")", ":", "\n", "        ", "vqa_config", "=", "configuration", ".", "config", "[", "'task_attributes'", "]", "[", "'vqa'", "]", "\n", "vqa2_config", "=", "vqa_config", "[", "'dataset_attributes'", "]", "[", "'vqa2'", "]", "\n", "processors", "=", "vqa2_config", "[", "'processors'", "]", "\n", "processors", ".", "pop", "(", "'text_processor'", ")", "\n", "processors", ".", "pop", "(", "'context_processor'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.test_processors.TestTaskProcessors._get_config": [[19, 25], ["os.path.join", "pythia.utils.configuration.ConfigNode", "os.path.abspath", "open", "yaml.load", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["    ", "def", "_get_config", "(", "self", ",", "path", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ",", "path", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "abspath", "(", "path", ")", ")", "as", "f", ":", "\n", "            ", "config", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "config", "=", "ConfigNode", "(", "config", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.test_processors.TestTaskProcessors.test_caption_processor": [[26, 49], ["test_processors.TestTaskProcessors._get_config", "os.path.join", "os.path.abspath", "pythia.tasks.processors.CaptionProcessor", "pythia.tasks.processors.CaptionProcessor.", "test_processors.TestTaskProcessors.assertNotIn", "test_processors.TestTaskProcessors.assertNotIn", "test_processors.TestTaskProcessors.assertNotIn", "test_processors.TestTaskProcessors.assertEqual", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.test_processors.TestTaskProcessors._get_config"], ["", "def", "test_caption_processor", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "_get_config", "(", "\n", "\"../../../pythia/common/defaults/configs/tasks/captioning/coco.yml\"", "\n", ")", "\n", "captioning_config", "=", "config", ".", "task_attributes", ".", "captioning", ".", "dataset_attributes", ".", "coco", "\n", "caption_processor_config", "=", "captioning_config", ".", "processors", ".", "caption_processor", "\n", "\n", "vocab_path", "=", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ",", "\"..\"", ",", "\"..\"", ",", "\"data\"", ",", "\"vocab.txt\"", "\n", ")", "\n", "caption_processor_config", ".", "params", ".", "vocab", ".", "vocab_file", "=", "os", ".", "path", ".", "abspath", "(", "vocab_path", ")", "\n", "caption_processor", "=", "CaptionProcessor", "(", "caption_processor_config", ".", "params", ")", "\n", "\n", "tokens", "=", "[", "1", ",", "4", ",", "5", ",", "6", ",", "4", ",", "7", ",", "8", ",", "2", ",", "0", ",", "0", ",", "0", "]", "\n", "caption", "=", "caption_processor", "(", "tokens", ")", "\n", "\n", "# Test start, stop, pad are removed", "\n", "self", ".", "assertNotIn", "(", "\"<s>\"", ",", "caption", "[", "\"tokens\"", "]", ")", "\n", "self", ".", "assertNotIn", "(", "\"</s>\"", ",", "caption", "[", "\"tokens\"", "]", ")", "\n", "self", ".", "assertNotIn", "(", "\"<pad>\"", ",", "caption", "[", "\"tokens\"", "]", ")", "\n", "\n", "# Test caption is correct", "\n", "self", ".", "assertEqual", "(", "caption", "[", "\"caption\"", "]", ",", "\"a man with a red helmet\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.test_processors.TestTaskProcessors.test_multi_hot_answer_from_vocab_processor": [[50, 104], ["test_processors.TestTaskProcessors._get_config", "os.path.join", "os.path.abspath", "pythia.tasks.processors.MultiHotAnswerFromVocabProcessor", "pythia.tasks.processors.MultiHotAnswerFromVocabProcessor.", "test_processors.TestTaskProcessors.assertTrue", "torch.zeros", "test_processors.TestTaskProcessors.assertTrue", "os.path.abspath", "pythia.tasks.processors.MultiHotAnswerFromVocabProcessor", "pythia.tasks.processors.MultiHotAnswerFromVocabProcessor.", "test_processors.TestTaskProcessors.assertTrue", "torch.zeros", "test_processors.TestTaskProcessors.assertTrue", "pythia.tasks.processors.MultiHotAnswerFromVocabProcessor.", "test_processors.TestTaskProcessors.assertTrue", "print", "torch.zeros", "test_processors.TestTaskProcessors.assertTrue", "os.path.abspath", "test_utils.compare_tensors", "test_utils.compare_tensors", "test_utils.compare_tensors", "test_utils.compare_tensors", "test_utils.compare_tensors", "test_utils.compare_tensors", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.test_processors.TestTaskProcessors._get_config", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tests.test_utils.compare_tensors", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tests.test_utils.compare_tensors", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tests.test_utils.compare_tensors", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tests.test_utils.compare_tensors", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tests.test_utils.compare_tensors", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tests.test_utils.compare_tensors"], ["", "def", "test_multi_hot_answer_from_vocab_processor", "(", "self", ")", ":", "\n", "        ", "config", "=", "self", ".", "_get_config", "(", "\n", "\"../../../pythia/common/defaults/configs/tasks/vqa/clevr.yml\"", "\n", ")", "\n", "clevr_config", "=", "config", ".", "task_attributes", ".", "vqa", ".", "dataset_attributes", ".", "clevr", "\n", "answer_processor_config", "=", "clevr_config", ".", "processors", ".", "answer_processor", "\n", "\n", "# Test num_answers==1 case", "\n", "vocab_path", "=", "os", ".", "path", ".", "join", "(", "\n", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ",", "\"..\"", ",", "\"..\"", ",", "\"data\"", ",", "\"vocab.txt\"", "\n", ")", "\n", "answer_processor_config", ".", "params", ".", "vocab_file", "=", "os", ".", "path", ".", "abspath", "(", "vocab_path", ")", "\n", "answer_processor", "=", "MultiHotAnswerFromVocabProcessor", "(", "\n", "answer_processor_config", ".", "params", "\n", ")", "\n", "processed", "=", "answer_processor", "(", "{", "\"answers\"", ":", "[", "\"helmet\"", "]", "}", ")", "\n", "answers_indices", "=", "processed", "[", "\"answers_indices\"", "]", "\n", "answers_scores", "=", "processed", "[", "\"answers_scores\"", "]", "\n", "self", ".", "assertTrue", "(", "\n", "compare_tensors", "(", "answers_indices", ",", "torch", ".", "tensor", "(", "[", "5", "]", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", ")", "\n", "expected_answers_scores", "=", "torch", ".", "zeros", "(", "19", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "expected_answers_scores", "[", "5", "]", "=", "1.0", "\n", "self", ".", "assertTrue", "(", "compare_tensors", "(", "answers_scores", ",", "expected_answers_scores", ")", ")", "\n", "\n", "# Test multihot when num answers greater than 1", "\n", "answer_processor_config", ".", "params", ".", "vocab_file", "=", "os", ".", "path", ".", "abspath", "(", "vocab_path", ")", "\n", "answer_processor_config", ".", "params", ".", "num_answers", "=", "3", "\n", "answer_processor", "=", "MultiHotAnswerFromVocabProcessor", "(", "\n", "answer_processor_config", ".", "params", "\n", ")", "\n", "processed", "=", "answer_processor", "(", "{", "\"answers\"", ":", "[", "\"man\"", ",", "\"with\"", ",", "\"countryside\"", "]", "}", ")", "\n", "answers_indices", "=", "processed", "[", "\"answers_indices\"", "]", "\n", "answers_scores", "=", "processed", "[", "\"answers_scores\"", "]", "\n", "self", ".", "assertTrue", "(", "\n", "compare_tensors", "(", "answers_indices", ",", "torch", ".", "tensor", "(", "[", "2", ",", "3", ",", "15", "]", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", ")", "\n", "expected_answers_scores", "=", "torch", ".", "zeros", "(", "19", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "expected_answers_scores", "[", "2", "]", "=", "1.0", "\n", "expected_answers_scores", "[", "3", "]", "=", "1.0", "\n", "expected_answers_scores", "[", "15", "]", "=", "1.0", "\n", "self", ".", "assertTrue", "(", "compare_tensors", "(", "answers_scores", ",", "expected_answers_scores", ")", ")", "\n", "\n", "# Test unk", "\n", "processed", "=", "answer_processor", "(", "{", "\"answers\"", ":", "[", "\"test\"", ",", "\"answer\"", ",", "\"man\"", "]", "}", ")", "\n", "answers_indices", "=", "processed", "[", "\"answers_indices\"", "]", "\n", "answers_scores", "=", "processed", "[", "\"answers_scores\"", "]", "\n", "self", ".", "assertTrue", "(", "\n", "compare_tensors", "(", "answers_indices", ",", "torch", ".", "tensor", "(", "[", "0", ",", "0", ",", "2", "]", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", ")", "\n", "print", "(", "answers_indices", ",", "answers_scores", ")", "\n", "expected_answers_scores", "=", "torch", ".", "zeros", "(", "19", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "expected_answers_scores", "[", "2", "]", "=", "1.0", "\n", "self", ".", "assertTrue", "(", "compare_tensors", "(", "answers_scores", ",", "expected_answers_scores", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.test_processors.TestTaskProcessors.test_evalai_answer_processor": [[105, 132], ["pythia.tasks.processors.EvalAIAnswerProcessor", "pythia.tasks.processors.EvalAIAnswerProcessor.", "test_processors.TestTaskProcessors.assertEqual", "pythia.tasks.processors.EvalAIAnswerProcessor.", "test_processors.TestTaskProcessors.assertEqual", "pythia.tasks.processors.EvalAIAnswerProcessor.", "test_processors.TestTaskProcessors.assertEqual", "pythia.tasks.processors.EvalAIAnswerProcessor.", "test_processors.TestTaskProcessors.assertEqual", "pythia.tasks.processors.EvalAIAnswerProcessor.", "test_processors.TestTaskProcessors.assertEqual"], "methods", ["None"], ["", "def", "test_evalai_answer_processor", "(", "self", ")", ":", "\n", "        ", "evalai_answer_processor", "=", "EvalAIAnswerProcessor", "(", ")", "\n", "\n", "# Test number", "\n", "processed", "=", "evalai_answer_processor", "(", "\"two\"", ")", "\n", "expected", "=", "\"2\"", "\n", "self", ".", "assertEqual", "(", "processed", ",", "expected", ")", "\n", "\n", "# Test article", "\n", "processed", "=", "evalai_answer_processor", "(", "\"a building\"", ")", "\n", "expected", "=", "\"building\"", "\n", "self", ".", "assertEqual", "(", "processed", ",", "expected", ")", "\n", "\n", "# Test tokenize", "\n", "processed", "=", "evalai_answer_processor", "(", "\"snow, mountain\"", ")", "\n", "expected", "=", "\"snow mountain\"", "\n", "self", ".", "assertEqual", "(", "processed", ",", "expected", ")", "\n", "\n", "# Test contractions", "\n", "processed", "=", "evalai_answer_processor", "(", "\"isnt\"", ")", "\n", "expected", "=", "\"isn't\"", "\n", "self", ".", "assertEqual", "(", "processed", ",", "expected", ")", "\n", "\n", "# Test processor", "\n", "processed", "=", "evalai_answer_processor", "(", "\"the two mountain's \\t \\n   \"", ")", "\n", "expected", "=", "\"2 mountain 's\"", "\n", "self", ".", "assertEqual", "(", "processed", ",", "expected", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset_builder.BaseDatasetBuilder.__init__": [[49, 51], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset_name", ")", ":", "\n", "        ", "self", ".", "dataset_name", "=", "dataset_name", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset_builder.BaseDatasetBuilder.load": [[52, 73], ["base_dataset_builder.BaseDatasetBuilder._load", "base_dataset_builder.BaseDatasetBuilder.init_processors", "base_dataset_builder.BaseDatasetBuilder.try_fast_read"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.builder.CLEVRBuilder._load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset.BaseDataset.init_processors", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.try_fast_read"], ["", "def", "load", "(", "self", ",", "dataset_type", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Main load function use by Pythia. This will internally call ``_load``\n        function. Calls ``init_processors`` and ``try_fast_read`` on the\n        dataset returned from ``_load``\n\n        Args:\n            dataset_type (str): Type of dataset, train|val|test\n            config (ConfigNode): Configuration of this dataset loaded from config.\n\n        Returns:\n            dataset (BaseDataset): Dataset containing data to be trained on\n\n        .. warning::\n\n            DO NOT OVERRIDE in child class. Instead override ``_load``.\n        \"\"\"", "\n", "dataset", "=", "self", ".", "_load", "(", "dataset_type", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "dataset", "is", "not", "None", ":", "\n", "            ", "dataset", ".", "init_processors", "(", ")", "\n", "dataset", ".", "try_fast_read", "(", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset_builder.BaseDatasetBuilder._load": [[74, 88], ["NotImplementedError"], "methods", ["None"], ["", "def", "_load", "(", "self", ",", "dataset_type", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        This is used to prepare the dataset and load it from a path.\n        Override this method in your child dataset builder class.\n\n        Args:\n            dataset_type (str): Type of dataset, train|val|test\n            config (ConfigNode): Configuration of this dataset loaded from config.\n\n        Returns:\n            dataset (BaseDataset): Dataset containing data to be trained on\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "\"This dataset builder doesn't implement a load method\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset_builder.BaseDatasetBuilder.build": [[90, 109], ["pythia.utils.distributed_utils.is_main_process", "pythia.utils.distributed_utils.synchronize", "base_dataset_builder.BaseDatasetBuilder._build"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.is_main_process", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.synchronize", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.builder.VisualGenomeBuilder._build"], ["", "def", "build", "(", "self", ",", "dataset_type", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Similar to load function, used by Pythia to build a dataset for first\n        time when it is not available. This internally calls '_build' function.\n        Override that function in your child class.\n\n        Args:\n            dataset_type (str): Type of dataset, train|val|test\n            config (ConfigNode): Configuration of this dataset loaded from\n                                 config.\n\n        .. warning::\n\n            DO NOT OVERRIDE in child class. Instead override ``_build``.\n        \"\"\"", "\n", "# Only build in main process, so none of the others have to build", "\n", "if", "is_main_process", "(", ")", ":", "\n", "            ", "self", ".", "_build", "(", "dataset_type", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "synchronize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset_builder.BaseDatasetBuilder._build": [[110, 122], ["NotImplementedError"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "dataset_type", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        This is used to build a dataset first time.\n        Implement this method in your child dataset builder class.\n\n        Args:\n            dataset_type (str): Type of dataset, train|val|test\n            config (ConfigNode): Configuration of this dataset loaded from\n                                 config.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "\"This dataset builder doesn't implement a build method\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.FeaturesDataset.__init__": [[13, 19], ["features_dataset.COCOFeaturesDataset", "ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "features_type", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "features_db", "=", "None", "\n", "if", "features_type", "==", "\"coco\"", ":", "\n", "            ", "self", ".", "features_db", "=", "COCOFeaturesDataset", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown features' type {}\"", ".", "format", "(", "features_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.FeaturesDataset.__getattr__": [[20, 27], ["hasattr", "getattr", "dir", "getattr", "AttributeError"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "features_db", ",", "name", ")", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "features_db", ",", "name", ")", "\n", "", "elif", "name", "in", "dir", "(", "self", ")", ":", "\n", "            ", "return", "getattr", "(", "self", ",", "name", ")", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.FeaturesDataset.__getitem__": [[28, 30], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "features_db", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.FeaturesDataset.__len__": [[31, 33], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "features_db", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.BaseFeaturesDataset.__init__": [[36, 38], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseFeaturesDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.COCOFeaturesDataset.__init__": [[41, 67], ["features_dataset.BaseFeaturesDataset.__init__", "pythia.common.registry.registry.get", "kwargs.get", "pythia.tasks.feature_readers.FeatureReader", "features_dataset.COCOFeaturesDataset.feature_readers.append", "features_dataset.COCOFeaturesDataset.writer.write", "features_dataset.COCOFeaturesDataset.writer.write", "features_dataset.COCOFeaturesDataset._threaded_read"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.COCOFeaturesDataset._threaded_read"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "COCOFeaturesDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_readers", "=", "[", "]", "\n", "self", ".", "feature_dict", "=", "{", "}", "\n", "\n", "self", ".", "fast_read", "=", "kwargs", "[", "\"fast_read\"", "]", "\n", "self", ".", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "\n", "for", "image_feature_dir", "in", "kwargs", "[", "\"directories\"", "]", ":", "\n", "            ", "feature_reader", "=", "FeatureReader", "(", "\n", "base_path", "=", "image_feature_dir", ",", "\n", "depth_first", "=", "kwargs", "[", "\"depth_first\"", "]", ",", "\n", "max_features", "=", "kwargs", "[", "\"max_features\"", "]", ",", "\n", ")", "\n", "self", ".", "feature_readers", ".", "append", "(", "feature_reader", ")", "\n", "\n", "", "self", ".", "imdb", "=", "kwargs", "[", "\"imdb\"", "]", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "should_return_info", "=", "kwargs", ".", "get", "(", "\"return_info\"", ",", "True", ")", "\n", "\n", "if", "self", ".", "fast_read", ":", "\n", "            ", "self", ".", "writer", ".", "write", "(", "\n", "\"Fast reading features from %s\"", "%", "(", "\", \"", ".", "join", "(", "kwargs", "[", "\"directories\"", "]", ")", ")", "\n", ")", "\n", "self", ".", "writer", ".", "write", "(", "\"Hold tight, this may take a while...\"", ")", "\n", "self", ".", "_threaded_read", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.COCOFeaturesDataset._threaded_read": [[68, 77], ["multiprocessing.pool.ThreadPool", "multiprocessing.pool.ThreadPool.close", "tqdm.tqdm", "enumerate", "range", "multiprocessing.pool.ThreadPool.imap_unordered", "len", "len", "pbar.update", "pythia.utils.distributed_utils.is_main_process"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.vqa_html_writer.vqa_html_writer.close", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.is_main_process"], ["", "", "def", "_threaded_read", "(", "self", ")", ":", "\n", "        ", "elements", "=", "[", "idx", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "self", ".", "imdb", ")", ")", "]", "\n", "pool", "=", "ThreadPool", "(", "processes", "=", "4", ")", "\n", "\n", "with", "tqdm", ".", "tqdm", "(", "total", "=", "len", "(", "elements", ")", ",", "disable", "=", "not", "is_main_process", "(", ")", ")", "as", "pbar", ":", "\n", "            ", "for", "i", ",", "_", "in", "enumerate", "(", "pool", ".", "imap_unordered", "(", "self", ".", "_fill_cache", ",", "elements", ")", ")", ":", "\n", "                ", "if", "i", "%", "100", "==", "0", ":", "\n", "                    ", "pbar", ".", "update", "(", "100", ")", "\n", "", "", "", "pool", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.COCOFeaturesDataset._fill_cache": [[78, 82], ["features_dataset.COCOFeaturesDataset._read_features_and_info"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.COCOFeaturesDataset._read_features_and_info"], ["", "def", "_fill_cache", "(", "self", ",", "idx", ")", ":", "\n", "        ", "feat_file", "=", "self", ".", "imdb", "[", "idx", "]", "[", "\"feature_path\"", "]", "\n", "features", ",", "info", "=", "self", ".", "_read_features_and_info", "(", "feat_file", ")", "\n", "self", ".", "feature_dict", "[", "feat_file", "]", "=", "(", "features", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.COCOFeaturesDataset._read_features_and_info": [[83, 96], ["feature_reader.read", "features.append", "infos.append"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.padded_faster_RCNN_with_bbox_feat_reader.read"], ["", "def", "_read_features_and_info", "(", "self", ",", "feat_file", ")", ":", "\n", "        ", "features", "=", "[", "]", "\n", "infos", "=", "[", "]", "\n", "for", "feature_reader", "in", "self", ".", "feature_readers", ":", "\n", "            ", "feature", ",", "info", "=", "feature_reader", ".", "read", "(", "feat_file", ")", "\n", "# feature = torch.from_numpy(feature).share_memory_()", "\n", "\n", "features", ".", "append", "(", "feature", ")", "\n", "infos", ".", "append", "(", "info", ")", "\n", "\n", "", "if", "not", "self", ".", "should_return_info", ":", "\n", "            ", "infos", "=", "None", "\n", "", "return", "features", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.COCOFeaturesDataset._get_image_features_and_info": [[97, 106], ["features_dataset.COCOFeaturesDataset.feature_dict.get", "features_dataset.COCOFeaturesDataset._read_features_and_info"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.COCOFeaturesDataset._read_features_and_info"], ["", "def", "_get_image_features_and_info", "(", "self", ",", "feat_file", ")", ":", "\n", "        ", "image_feats", ",", "infos", "=", "self", ".", "feature_dict", ".", "get", "(", "feat_file", ",", "(", "None", ",", "None", ")", ")", "\n", "\n", "if", "image_feats", "is", "None", ":", "\n", "            ", "image_feats", ",", "infos", "=", "self", ".", "_read_features_and_info", "(", "feat_file", ")", "\n", "\n", "# TODO: Remove after standardization", "\n", "# https://github.com/facebookresearch/pythia/blob/master/dataset_utils/dataSet.py#L226", "\n", "", "return", "image_feats", ",", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.COCOFeaturesDataset.__len__": [[107, 109], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imdb", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.COCOFeaturesDataset.__getitem__": [[110, 126], ["image_info.get", "features_dataset.COCOFeaturesDataset._get_image_features_and_info", "enumerate"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.features_dataset.COCOFeaturesDataset._get_image_features_and_info"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "image_info", "=", "self", ".", "imdb", "[", "idx", "]", "\n", "image_file_name", "=", "image_info", ".", "get", "(", "\"feature_path\"", ",", "None", ")", "\n", "\n", "if", "image_file_name", "is", "None", ":", "\n", "            ", "image_file_name", "=", "\"{}.npy\"", ".", "format", "(", "image_info", "[", "\"image_id\"", "]", ")", "\n", "\n", "", "image_features", ",", "infos", "=", "self", ".", "_get_image_features_and_info", "(", "image_file_name", ")", "\n", "\n", "item", "=", "{", "}", "\n", "for", "idx", ",", "image_feature", "in", "enumerate", "(", "image_features", ")", ":", "\n", "            ", "item", "[", "\"image_feature_%s\"", "%", "idx", "]", "=", "image_feature", "\n", "if", "infos", "is", "not", "None", ":", "\n", "                ", "item", "[", "\"image_info_%s\"", "%", "idx", "]", "=", "infos", "[", "idx", "]", "\n", "\n", "", "", "return", "item", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.samplers.DistributedSampler.__init__": [[25, 41], ["int", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "math.ceil", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_world_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_world_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_rank", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_rank"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.samplers.DistributedSampler.__iter__": [[42, 61], ["iter", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.samplers.DistributedSampler.__len__": [[62, 64], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.samplers.DistributedSampler.set_epoch": [[65, 67], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.scene_graph_database.SceneGraphDatabase.__init__": [[6, 11], ["pythia.tasks.image_database.ImageDatabase.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "scene_graph_path", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "scene_graph_path", ")", "\n", "self", ".", "data_dict", "=", "{", "}", "\n", "for", "item", "in", "self", ".", "data", ":", "\n", "            ", "self", ".", "data_dict", "[", "item", "[", "\"image_id\"", "]", "]", "=", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.scene_graph_database.SceneGraphDatabase.__getitem__": [[12, 14], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "data_dict", "[", "idx", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.multi_task.MultiTask.__init__": [[9, 54], ["torch.utils.data.Dataset.__init__", "map", "len", "multi_task.MultiTask.change_task", "multi_task.MultiTask.config[].split", "pythia.common.registry.registry.get_task_class", "pythia.common.registry.registry.get_task_class.", "registry.get_task_class.load", "multi_task.MultiTask.tasks.append", "multi_task.MultiTask.tasks_lens.append", "sum", "x.strip", "print", "print", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.multi_task.MultiTask.change_task", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_task_class", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print"], ["    ", "def", "__init__", "(", "self", ",", "dataset_type", ",", "config", ")", ":", "\n", "        ", "super", "(", "MultiTask", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "dataset_type", "=", "dataset_type", "\n", "\n", "self", ".", "task_names", "=", "map", "(", "lambda", "x", ":", "x", ".", "strip", "(", ")", ",", "self", ".", "config", "[", "\"tasks\"", "]", ".", "split", "(", "\",\"", ")", ")", "\n", "\n", "self", ".", "tasks", "=", "[", "]", "\n", "self", ".", "tasks_lens", "=", "[", "]", "\n", "\n", "for", "task_name", "in", "self", ".", "task_names", ":", "\n", "            ", "task_class", "=", "registry", ".", "get_task_class", "(", "task_name", ")", "\n", "if", "task_class", "is", "None", ":", "\n", "                ", "print", "(", "\"[Error] %s not present in our mapping\"", "%", "task_name", ")", "\n", "return", "\n", "\n", "", "if", "task_name", "not", "in", "self", ".", "config", "[", "\"task_attributes\"", "]", ":", "\n", "                ", "print", "(", "\n", "\"[Error] No attributes present for task %s in config.\"", "\n", "\" Skipping\"", "%", "task_name", "\n", ")", "\n", "\n", "", "task_attributes", "=", "self", ".", "config", "[", "\"task_attributes\"", "]", "[", "task_name", "]", "\n", "task_attributes", "[", "\"dataset_type\"", "]", "=", "self", ".", "dataset_type", "\n", "\n", "task", "=", "task_class", "(", ")", "\n", "task", ".", "load", "(", "**", "task_attributes", ")", "\n", "\n", "self", ".", "tasks", ".", "append", "(", "task", ")", "\n", "self", ".", "tasks_lens", ".", "append", "(", "len", "(", "task", ")", ")", "\n", "\n", "", "self", ".", "task_probabilities", "=", "[", "1", "for", "_", "in", "self", ".", "tasks", "]", "\n", "\n", "self", ".", "num_tasks", "=", "len", "(", "self", ".", "tasks", ")", "\n", "\n", "training_parameters", "=", "self", ".", "config", "[", "\"training_parameters\"", "]", "\n", "if", "training_parameters", "[", "\"task_size_proportional_sampling\"", "]", ":", "\n", "            ", "self", ".", "task_probabilities", "=", "self", ".", "tasks_lens", "[", ":", "]", "\n", "len_sum", "=", "sum", "(", "self", ".", "tasks_lens", ")", "\n", "self", ".", "task_probabilities", "=", "[", "\n", "prob", "/", "len_sum", "for", "prob", "in", "self", ".", "task_probabilities", "\n", "]", "\n", "\n", "", "self", ".", "change_task", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.multi_task.MultiTask.change_task": [[55, 61], ["multi_task.MultiTask.chosen_task.change_dataset", "numpy.random.choice"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask.change_dataset"], ["", "def", "change_task", "(", "self", ")", ":", "\n", "        ", "self", ".", "selected_task", "=", "np", ".", "random", ".", "choice", "(", "\n", "self", ".", "num_tasks", ",", "1", ",", "p", "=", "self", ".", "task_probabilities", "\n", ")", "[", "0", "]", "\n", "self", ".", "chosen_task", "=", "self", ".", "tasks", "[", "self", ".", "selected_task", "]", "\n", "self", ".", "chosen_task", ".", "change_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.multi_task.MultiTask.get_tasks": [[62, 64], ["None"], "methods", ["None"], ["", "def", "get_tasks", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tasks", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.multi_task.MultiTask.verbose_dump": [[65, 67], ["multi_task.MultiTask.chosen_task.verbose_dump"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.verbose_dump"], ["", "def", "verbose_dump", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "chosen_task", ".", "verbose_dump", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.multi_task.MultiTask.__len__": [[68, 70], ["sum"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "self", ".", "tasks_lens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.multi_task.MultiTask.__getitem__": [[71, 76], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "idx", "=", "idx", "%", "self", ".", "tasks_lens", "[", "self", ".", "selected_task", "]", "\n", "item", "=", "self", ".", "chosen_task", "[", "idx", "]", "\n", "\n", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.multi_task.MultiTask.update_registry_for_model": [[77, 80], ["task.update_registry_for_model"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.update_registry_for_model"], ["", "def", "update_registry_for_model", "(", "self", ",", "config", ")", ":", "\n", "        ", "for", "task", "in", "self", ".", "tasks", ":", "\n", "            ", "task", ".", "update_registry_for_model", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.multi_task.MultiTask.prepare_batch": [[81, 83], ["multi_task.MultiTask.chosen_task.prepare_batch"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.prepare_batch"], ["", "", "def", "prepare_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "chosen_task", ".", "prepare_batch", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.multi_task.MultiTask.init_args": [[84, 87], ["task.init_args"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder.init_args"], ["", "def", "init_args", "(", "self", ",", "parser", ")", ":", "\n", "        ", "for", "task", "in", "self", ".", "tasks", ":", "\n", "            ", "task", ".", "init_args", "(", "parser", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.multi_task.MultiTask.clean_config": [[88, 93], ["task.clean_config"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.clean_config"], ["", "", "def", "clean_config", "(", "self", ",", "config", ")", ":", "\n", "        ", "for", "task", "in", "self", ".", "tasks", ":", "\n", "            ", "task", ".", "clean_config", "(", "config", ")", "\n", "\n", "", "return", "config", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset.BaseDataset.__init__": [[20, 29], ["torch.utils.data.dataset.Dataset.__init__", "pythia.common.registry.registry.get", "pythia.common.registry.registry.get", "pythia.common.registry.registry.get", "str"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["def", "__init__", "(", "self", ",", "name", ",", "dataset_type", ",", "config", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", "BaseDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "_name", "=", "name", "\n", "self", ".", "_dataset_type", "=", "dataset_type", "\n", "self", ".", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "self", ".", "_global_config", "=", "registry", ".", "get", "(", "\"config\"", ")", "\n", "self", ".", "_device", "=", "registry", ".", "get", "(", "\"current_device\"", ")", "\n", "self", ".", "use_cuda", "=", "\"cuda\"", "in", "str", "(", "self", ".", "_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset.BaseDataset.load_item": [[30, 38], ["None"], "methods", ["None"], ["", "def", "load_item", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Implement if you need to separately load the item and cache it.\n\n        Args:\n            idx (int): Index of the sample to be loaded.\n        \"\"\"", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset.BaseDataset.get_item": [[39, 48], ["None"], "methods", ["None"], ["", "def", "get_item", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Basically, __getitem__ of a torch dataset.\n\n        Args:\n            idx (int): Index of the sample to be loaded.\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset.BaseDataset.init_processors": [[49, 63], ["base_dataset.BaseDataset.config.processors.items", "hasattr", "pythia.common.registry.registry.get", "pythia.tasks.processors.Processor", "setattr", "pythia.common.registry.registry.register", "setattr"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register"], ["", "def", "init_processors", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ".", "config", ",", "\"processors\"", ")", ":", "\n", "            ", "return", "\n", "", "extra_params", "=", "{", "\"data_root_dir\"", ":", "self", ".", "config", ".", "data_root_dir", "}", "\n", "for", "processor_key", ",", "processor_params", "in", "self", ".", "config", ".", "processors", ".", "items", "(", ")", ":", "\n", "            ", "reg_key", "=", "\"{}_{}\"", ".", "format", "(", "self", ".", "_name", ",", "processor_key", ")", "\n", "reg_check", "=", "registry", ".", "get", "(", "reg_key", ",", "no_warning", "=", "True", ")", "\n", "\n", "if", "reg_check", "is", "None", ":", "\n", "                ", "processor_object", "=", "Processor", "(", "processor_params", ",", "**", "extra_params", ")", "\n", "setattr", "(", "self", ",", "processor_key", ",", "processor_object", ")", "\n", "registry", ".", "register", "(", "reg_key", ",", "processor_object", ")", "\n", "", "else", ":", "\n", "                ", "setattr", "(", "self", ",", "processor_key", ",", "reg_check", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset.BaseDataset.try_fast_read": [[64, 66], ["None"], "methods", ["None"], ["", "", "", "def", "try_fast_read", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset.BaseDataset.__getitem__": [[67, 81], ["base_dataset.BaseDataset.get_item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.dataset.CLEVRDataset.get_item"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "# TODO: Add warning about overriding", "\n", "        ", "\"\"\"\n        Internal __getitem__. Don't override, instead override ``get_item`` for your usecase.\n\n        .. warning::\n\n            DO NOT OVERRIDE in child class. Instead override ``get_item``.\n        \"\"\"", "\n", "sample", "=", "self", ".", "get_item", "(", "idx", ")", "\n", "#pdb.set_trace()", "\n", "sample", ".", "dataset_type", "=", "self", ".", "_dataset_type", "\n", "sample", ".", "dataset_name", "=", "self", ".", "_name", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset.BaseDataset.prepare_batch": [[82, 102], ["pythia.common.sample.SampleList.to", "isinstance", "pythia.common.sample.SampleList"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.to"], ["", "def", "prepare_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        Can be possibly overriden in your child class\n\n        Prepare batch for passing to model. Whatever returned from here will\n        be directly passed to model's forward function. Currently moves the batch to\n        proper device.\n\n        Args:\n            batch (SampleList): sample list containing the currently loaded batch\n\n        Returns:\n            sample_list (SampleList): Returns a sample representing current batch loaded\n        \"\"\"", "\n", "# Should be a SampleList", "\n", "if", "not", "isinstance", "(", "batch", ",", "SampleList", ")", ":", "\n", "# Try converting to SampleList", "\n", "            ", "batch", "=", "SampleList", "(", "batch", ")", "\n", "", "batch", "=", "batch", ".", "to", "(", "self", ".", "_device", ")", "\n", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset.BaseDataset.format_for_evalai": [[103, 105], ["None"], "methods", ["None"], ["", "def", "format_for_evalai", "(", "self", ",", "report", ")", ":", "\n", "        ", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_dataset.BaseDataset.verbose_dump": [[106, 108], ["None"], "methods", ["None"], ["", "def", "verbose_dump", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.image_database.ImageDatabase.__init__": [[30, 33], ["super().__init__", "image_database.ImageDatabase._load_imdb"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.image_database.ImageDatabase._load_imdb"], ["def", "__init__", "(", "self", ",", "imdb_path", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_load_imdb", "(", "imdb_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.image_database.ImageDatabase._load_imdb": [[34, 41], ["imdb_path.endswith", "image_database.ImageDatabase._load_npy", "imdb_path.endswith", "image_database.ImageDatabase._load_jsonl", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.image_database.ImageDatabase._load_npy", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.image_database.ImageDatabase._load_jsonl"], ["", "def", "_load_imdb", "(", "self", ",", "imdb_path", ")", ":", "\n", "        ", "if", "imdb_path", ".", "endswith", "(", "\".npy\"", ")", ":", "\n", "            ", "self", ".", "_load_npy", "(", "imdb_path", ")", "\n", "", "elif", "imdb_path", ".", "endswith", "(", "\".jsonl\"", ")", ":", "\n", "            ", "self", ".", "_load_jsonl", "(", "imdb_path", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Unknown file format for imdb\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.image_database.ImageDatabase._load_jsonl": [[42, 49], ["open", "f.readlines", "enumerate", "json.loads", "line.strip"], "methods", ["None"], ["", "", "def", "_load_jsonl", "(", "self", ",", "imdb_path", ")", ":", "\n", "        ", "with", "open", "(", "imdb_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "db", "=", "f", ".", "readlines", "(", ")", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "db", ")", ":", "\n", "                ", "db", "[", "idx", "]", "=", "json", ".", "loads", "(", "line", ".", "strip", "(", "\"\\n\"", ")", ")", "\n", "", "self", ".", "data", "=", "db", "\n", "self", ".", "start_idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.image_database.ImageDatabase._load_npy": [[50, 68], ["numpy.load", "type", "image_database.ImageDatabase.db.get", "image_database.ImageDatabase.db.get", "print", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print"], ["", "", "def", "_load_npy", "(", "self", ",", "imdb_path", ")", ":", "\n", "        ", "self", ".", "db", "=", "np", ".", "load", "(", "imdb_path", ",", "allow_pickle", "=", "True", ")", "\n", "self", ".", "start_idx", "=", "0", "\n", "\n", "if", "type", "(", "self", ".", "db", ")", "==", "dict", ":", "\n", "            ", "self", ".", "metadata", "=", "self", ".", "db", ".", "get", "(", "\"metadata\"", ",", "{", "}", ")", "\n", "self", ".", "data", "=", "self", ".", "db", ".", "get", "(", "\"data\"", ",", "[", "]", ")", "\n", "print", "(", "\"Yes dict\"", ")", "\n", "", "else", ":", "\n", "# TODO: Deprecate support for this", "\n", "            ", "self", ".", "metadata", "=", "{", "\"version\"", ":", "1", "}", "\n", "self", ".", "data", "=", "self", ".", "db", "\n", "# Handle old imdb support", "\n", "if", "\"image_id\"", "not", "in", "self", ".", "data", "[", "0", "]", ":", "\n", "                ", "self", ".", "start_idx", "=", "1", "\n", "\n", "", "", "if", "len", "(", "self", ".", "data", ")", "==", "0", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "db", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.image_database.ImageDatabase.__len__": [[69, 71], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "-", "self", ".", "start_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.image_database.ImageDatabase.__getitem__": [[72, 93], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "self", ".", "data", "[", "idx", "+", "self", ".", "start_idx", "]", "\n", "\n", "# Hacks for older IMDBs", "\n", "if", "\"answers\"", "not", "in", "data", ":", "\n", "            ", "if", "\"all_answers\"", "in", "data", "and", "\"valid_answers\"", "not", "in", "data", ":", "\n", "                ", "data", "[", "\"answers\"", "]", "=", "data", "[", "\"all_answers\"", "]", "\n", "", "if", "\"valid_answers\"", "in", "data", ":", "\n", "                ", "data", "[", "\"answers\"", "]", "=", "data", "[", "\"valid_answers\"", "]", "\n", "", "if", "\"main_answer_str\"", "in", "data", ":", "\n", "                ", "data", "[", "\"answers\"", "]", "=", "data", "[", "\"main_answer_str\"", "]", "\n", "", "if", "\"sub_answer_str\"", "in", "data", ":", "\n", "                ", "data", "[", "\"answers_sq\"", "]", "=", "data", "[", "\"sub_answer_str\"", "]", "\n", "", "if", "\"other_answer_str\"", "in", "data", ":", "\n", "                ", "data", "[", "\"answers_oq\"", "]", "=", "data", "[", "\"other_answer_str\"", "]", "\n", "\n", "# TODO: Later clean up VizWIz IMDB from copy tokens", "\n", "", "", "if", "\"answers\"", "in", "data", "and", "data", "[", "\"answers\"", "]", "[", "-", "1", "]", "==", "\"<copy>\"", ":", "\n", "            ", "data", "[", "\"answers\"", "]", "=", "data", "[", "\"answers\"", "]", "[", ":", "-", "1", "]", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.image_database.ImageDatabase.get_version": [[94, 96], ["image_database.ImageDatabase.metadata.get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "def", "get_version", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metadata", ".", "get", "(", "\"version\"", ",", "None", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.BaseProcessor.__init__": [[101, 103], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.BaseProcessor.__call__": [[104, 116], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "item", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Main function of the processor. Takes in a dict and returns back\n        a dict\n\n        Args:\n            item (Dict): Some item that needs to be processed.\n\n        Returns:\n            Dict: Processed dict.\n\n        \"\"\"", "\n", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.Processor.__init__": [[131, 154], ["pythia.common.registry.registry.get", "pythia.common.registry.registry.get_processor_class", "pythia.common.registry.registry.get_processor_class.", "dir", "hasattr", "AttributeError", "hasattr", "processors.Processor.writer.write"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_processor_class", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "\n", "if", "not", "hasattr", "(", "config", ",", "\"type\"", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Config must have 'type' attribute to specify type of processor\"", "\n", ")", "\n", "\n", "", "processor_class", "=", "registry", ".", "get_processor_class", "(", "config", ".", "type", ")", "\n", "\n", "params", "=", "{", "}", "\n", "if", "not", "hasattr", "(", "config", ",", "\"params\"", ")", ":", "\n", "            ", "self", ".", "writer", ".", "write", "(", "\n", "\"Config doesn't have 'params' attribute to \"", "\n", "\"specify parameters of the processor \"", "\n", "\"of type {}. Setting to default \\{\\}\"", ".", "format", "(", "config", ".", "type", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "params", "=", "config", ".", "params", "\n", "\n", "", "self", ".", "processor", "=", "processor_class", "(", "params", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "_dir_representation", "=", "dir", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.Processor.__call__": [[155, 157], ["processors.Processor.processor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "item", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "processor", "(", "item", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.Processor.__getattr__": [[158, 165], ["getattr", "hasattr", "getattr", "AttributeError"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "_dir_representation", ":", "\n", "            ", "return", "getattr", "(", "self", ",", "name", ")", "\n", "", "elif", "hasattr", "(", "self", ".", "processor", ",", "name", ")", ":", "\n", "            ", "return", "getattr", "(", "self", ".", "processor", ",", "name", ")", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VocabProcessor.__init__": [[207, 215], ["pythia.utils.vocab.Vocab", "processors.VocabProcessor._init_extras", "hasattr", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_extras"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "config", ",", "\"vocab\"", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"config passed to the processor has no attribute vocab\"", "\n", ")", "\n", "\n", "", "self", ".", "vocab", "=", "Vocab", "(", "*", "args", ",", "**", "config", ".", "vocab", ",", "**", "kwargs", ")", "\n", "self", ".", "_init_extras", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VocabProcessor._init_extras": [[216, 235], ["pythia.common.registry.registry.get", "hasattr", "hasattr", "warnings.warn", "processors.Processor", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "def", "_init_extras", "(", "self", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "self", ".", "preprocessor", "=", "None", "\n", "\n", "if", "hasattr", "(", "config", ",", "\"max_length\"", ")", ":", "\n", "            ", "self", ".", "max_length", "=", "config", ".", "max_length", "\n", "", "else", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"No 'max_length' parameter in Processor's \"", "\n", "\"configuration. Setting to {}.\"", ".", "format", "(", "self", ".", "MAX_LENGTH_DEFAULT", ")", "\n", ")", "\n", "self", ".", "max_length", "=", "self", ".", "MAX_LENGTH_DEFAULT", "\n", "\n", "", "if", "hasattr", "(", "config", ",", "\"preprocessor\"", ")", ":", "\n", "            ", "self", ".", "preprocessor", "=", "Processor", "(", "config", ".", "preprocessor", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "self", ".", "preprocessor", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"No text processor named {} is defined.\"", ".", "format", "(", "config", ".", "preprocessor", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VocabProcessor.__call__": [[237, 278], ["processors.VocabProcessor._pad_tokens", "isinstance", "TypeError", "processors.VocabProcessor._map_strings_to_indices", "processors.VocabProcessor._map_strings_to_indices", "AssertionError", "AssertionError", "processors.VocabProcessor.preprocessor"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VocabProcessor._pad_tokens", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor._map_strings_to_indices", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor._map_strings_to_indices"], ["", "", "", "def", "__call__", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"Call requires item to have either \"tokens\" attribute or either\n        \"text\" attribute. If \"text\" is present, it will tokenized using\n        the preprocessor.\n\n        Args:\n            item (Dict): Dict containing the \"text\" or \"tokens\".\n\n        Returns:\n            Dict: Dict containing indices in \"text\" key, \"tokens\" in \"tokens\"\n                  key and \"length\" of the string in \"length\" key.\n\n        \"\"\"", "\n", "indices", "=", "None", "\n", "if", "not", "isinstance", "(", "item", ",", "dict", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Argument passed to the processor must be \"", "\n", "\"a dict with either 'text' or 'tokens' as \"", "\n", "\"keys\"", "\n", ")", "\n", "", "if", "\"tokens\"", "in", "item", ":", "\n", "            ", "tokens", "=", "item", "[", "\"tokens\"", "]", "\n", "indices", "=", "self", ".", "_map_strings_to_indices", "(", "item", "[", "\"tokens\"", "]", ")", "\n", "", "elif", "\"text\"", "in", "item", ":", "\n", "            ", "if", "self", ".", "preprocessor", "is", "None", ":", "\n", "                ", "raise", "AssertionError", "(", "\n", "\"If tokens are not provided, a text \"", "\n", "\"processor must be defined in the config\"", "\n", ")", "\n", "\n", "", "tokens", "=", "self", ".", "preprocessor", "(", "{", "\"text\"", ":", "item", "[", "\"text\"", "]", "}", ")", "[", "\"text\"", "]", "\n", "indices", "=", "self", ".", "_map_strings_to_indices", "(", "tokens", ")", "\n", "", "else", ":", "\n", "            ", "raise", "AssertionError", "(", "\n", "\"A dict with either 'text' or 'tokens' keys \"", "\n", "\"must be passed to the processor\"", "\n", ")", "\n", "\n", "", "tokens", ",", "length", "=", "self", ".", "_pad_tokens", "(", "tokens", ")", "\n", "\n", "return", "{", "\"text\"", ":", "indices", ",", "\"tokens\"", ":", "tokens", ",", "\"length\"", ":", "length", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VocabProcessor._pad_tokens": [[279, 285], ["min", "torch.tensor", "len"], "methods", ["None"], ["", "def", "_pad_tokens", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "padded_tokens", "=", "[", "self", ".", "PAD_TOKEN", "]", "*", "self", ".", "max_length", "\n", "token_length", "=", "min", "(", "len", "(", "tokens", ")", ",", "self", ".", "max_length", ")", "\n", "padded_tokens", "[", ":", "token_length", "]", "=", "tokens", "[", ":", "token_length", "]", "\n", "token_length", "=", "torch", ".", "tensor", "(", "token_length", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "padded_tokens", ",", "token_length", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VocabProcessor.get_pad_index": [[286, 294], ["processors.VocabProcessor.vocab.get_pad_index"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VocabProcessor.get_pad_index"], ["", "def", "get_pad_index", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get index of padding <pad> token in vocabulary.\n\n        Returns:\n            int: index of the padding token.\n\n        \"\"\"", "\n", "return", "self", ".", "vocab", ".", "get_pad_index", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VocabProcessor.get_vocab_size": [[295, 303], ["processors.VocabProcessor.vocab.get_size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size"], ["", "def", "get_vocab_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get size of the vocabulary.\n\n        Returns:\n            int: size of the vocabulary.\n\n        \"\"\"", "\n", "return", "self", ".", "vocab", ".", "get_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VocabProcessor._map_strings_to_indices": [[304, 315], ["min", "torch.zeros", "torch.zeros.fill_", "enumerate", "len", "processors.VocabProcessor.vocab.get_pad_index"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VocabProcessor.get_pad_index"], ["", "def", "_map_strings_to_indices", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "length", "=", "min", "(", "len", "(", "tokens", ")", ",", "self", ".", "max_length", ")", "\n", "tokens", "=", "tokens", "[", ":", "length", "]", "\n", "\n", "output", "=", "torch", ".", "zeros", "(", "self", ".", "max_length", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "output", ".", "fill_", "(", "self", ".", "vocab", ".", "get_pad_index", "(", ")", ")", "\n", "\n", "for", "idx", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "            ", "output", "[", "idx", "]", "=", "self", ".", "vocab", ".", "stoi", "[", "token", "]", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.GloVeProcessor.__init__": [[329, 347], ["pythia.utils.configuration.ConfigNode", "processors.VocabProcessor.__init__", "hasattr", "AttributeError", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "config", ",", "\"vocab\"", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Config passed to the processor has no attribute vocab\"", "\n", ")", "\n", "", "vocab_processor_config", "=", "ConfigNode", "(", "config", ")", "\n", "# GloVeProcessor needs vocab type to be \"intersected\"", "\n", "vocab_processor_config", ".", "vocab", ".", "type", "=", "\"intersected\"", "\n", "\n", "if", "\"vocab_file\"", "not", "in", "vocab_processor_config", ".", "vocab", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"'vocab_file' key is not present in the config.\"", "\n", "\" Switching to pretrained vocab.\"", "\n", ")", "\n", "\n", "vocab_processor_config", ".", "vocab", ".", "type", "=", "\"pretrained\"", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "vocab_processor_config", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.GloVeProcessor.__call__": [[348, 358], ["torch.zeros", "enumerate", "processors.VocabProcessor.__call__", "len", "processors.GloVeProcessor.vocab.get_embedding_dim"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.batch_collator.BatchCollator.__call__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.ModelVocab.get_embedding_dim"], ["", "def", "__call__", "(", "self", ",", "item", ")", ":", "\n", "        ", "indices", "=", "super", "(", ")", ".", "__call__", "(", "item", ")", "[", "\"text\"", "]", "\n", "embeddings", "=", "torch", ".", "zeros", "(", "\n", "(", "len", "(", "indices", ")", ",", "self", ".", "vocab", ".", "get_embedding_dim", "(", ")", ")", ",", "dtype", "=", "torch", ".", "float", "\n", ")", "\n", "\n", "for", "idx", ",", "index", "in", "enumerate", "(", "indices", ")", ":", "\n", "            ", "embeddings", "[", "idx", "]", "=", "self", ".", "vocab", ".", "vectors", "[", "index", "]", "\n", "\n", "", "return", "{", "\"text\"", ":", "embeddings", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor.__init__": [[369, 373], ["processors.FastTextProcessor._init_extras"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_extras"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_init_extras", "(", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "_already_downloaded", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor._try_download": [[374, 410], ["processors.FastTextProcessor._is_main_process", "os.path.join", "pythia.utils.distributed_utils.synchronize", "processors.FastTextProcessor._load_fasttext_model", "processors.FastTextProcessor.writer.write", "hasattr", "pythia.utils.general.get_pythia_root", "os.path.exists", "processors.FastTextProcessor._download_model", "warnings.warn", "warnings.warn", "processors.FastTextProcessor.writer.write"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor._is_main_process", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.synchronize", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor._load_fasttext_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor._download_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "def", "_try_download", "(", "self", ")", ":", "\n", "        ", "is_main_process", "=", "self", ".", "_is_main_process", "(", ")", "\n", "\n", "if", "self", ".", "_already_downloaded", ":", "\n", "            ", "return", "\n", "\n", "", "if", "is_main_process", ":", "\n", "            ", "self", ".", "writer", ".", "write", "(", "\"Fetching fastText model for OCR processing\"", ")", "\n", "\n", "", "needs_download", "=", "False", "\n", "\n", "if", "not", "hasattr", "(", "self", ".", "config", ",", "\"model_file\"", ")", ":", "\n", "            ", "if", "is_main_process", ":", "\n", "                ", "warnings", ".", "warn", "(", "\n", "\"'model_file' key is required but missing \"", "\n", "\"from FastTextProcessor's config.\"", "\n", ")", "\n", "", "needs_download", "=", "True", "\n", "\n", "", "model_file", "=", "self", ".", "config", ".", "model_file", "\n", "model_file", "=", "os", ".", "path", ".", "join", "(", "get_pythia_root", "(", ")", ",", "model_file", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_file", ")", ":", "\n", "            ", "if", "is_main_process", ":", "\n", "                ", "warnings", ".", "warn", "(", "\"No model file present at {}.\"", ".", "format", "(", "model_file", ")", ")", "\n", "", "needs_download", "=", "True", "\n", "\n", "", "if", "needs_download", ":", "\n", "            ", "if", "is_main_process", ":", "\n", "                ", "self", ".", "writer", ".", "write", "(", "\"Downloading FastText bin\"", ",", "\"info\"", ")", "\n", "", "model_file", "=", "self", ".", "_download_model", "(", ")", "\n", "\n", "", "synchronize", "(", ")", "\n", "\n", "self", ".", "_load_fasttext_model", "(", "model_file", ")", "\n", "self", ".", "_already_downloaded", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor._download_model": [[411, 458], ["processors.FastTextProcessor._is_main_process", "os.path.join", "os.path.exists", "os.makedirs", "requests.get", "pythia.utils.general.get_pythia_root", "os.path.dirname", "open", "tqdm", "requests.get.iter_content", "tqdm.close", "processors.FastTextProcessor.writer.write", "processors.FastTextProcessor.writer.write", "f.write", "int", "tqdm.update", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor._is_main_process", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.vqa_html_writer.vqa_html_writer.close", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update"], ["", "def", "_download_model", "(", "self", ")", ":", "\n", "        ", "is_main_process", "=", "self", ".", "_is_main_process", "(", ")", "\n", "\n", "model_file_path", "=", "os", ".", "path", ".", "join", "(", "\n", "get_pythia_root", "(", ")", ",", "\".vector_cache\"", ",", "\"wiki.en.bin\"", "\n", ")", "\n", "\n", "if", "not", "is_main_process", ":", "\n", "            ", "return", "model_file_path", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "model_file_path", ")", ":", "\n", "            ", "if", "is_main_process", ":", "\n", "                ", "self", ".", "writer", ".", "write", "(", "\n", "\"Vectors already present at {}.\"", ".", "format", "(", "model_file_path", ")", ",", "\"info\"", "\n", ")", "\n", "", "return", "model_file_path", "\n", "\n", "", "import", "requests", "\n", "from", "pythia", ".", "common", ".", "constants", "import", "FASTTEXT_WIKI_URL", "\n", "from", "tqdm", "import", "tqdm", "\n", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "model_file_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "response", "=", "requests", ".", "get", "(", "FASTTEXT_WIKI_URL", ",", "stream", "=", "True", ")", "\n", "\n", "with", "open", "(", "model_file_path", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "pbar", "=", "tqdm", "(", "\n", "total", "=", "int", "(", "response", ".", "headers", "[", "\"Content-Length\"", "]", ")", "/", "4096", ",", "\n", "miniters", "=", "50", ",", "\n", "disable", "=", "not", "is_main_process", ",", "\n", ")", "\n", "\n", "idx", "=", "0", "\n", "for", "data", "in", "response", ".", "iter_content", "(", "chunk_size", "=", "4096", ")", ":", "\n", "                ", "if", "data", ":", "\n", "                    ", "if", "idx", "%", "50", "==", "0", ":", "\n", "                        ", "pbar", ".", "update", "(", "len", "(", "data", ")", ")", "\n", "", "f", ".", "write", "(", "data", ")", "\n", "idx", "+=", "1", "\n", "\n", "", "", "pbar", ".", "close", "(", ")", "\n", "\n", "", "if", "is_main_process", ":", "\n", "            ", "self", ".", "writer", ".", "write", "(", "\n", "\"fastText bin downloaded at {}.\"", ".", "format", "(", "model_file_path", ")", ",", "\"info\"", "\n", ")", "\n", "\n", "", "return", "model_file_path", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor._load_fasttext_model": [[459, 473], ["processors.FastTextProcessor._is_main_process", "load_model", "pythia.utils.vocab.WordToVectorDict", "processors.FastTextProcessor.writer.write", "processors.FastTextProcessor.writer.write"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor._is_main_process", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "def", "_load_fasttext_model", "(", "self", ",", "model_file", ")", ":", "\n", "        ", "from", "fastText", "import", "load_model", "\n", "\n", "is_main_process", "=", "self", ".", "_is_main_process", "(", ")", "\n", "\n", "if", "is_main_process", ":", "\n", "            ", "self", ".", "writer", ".", "write", "(", "\"Loading fasttext model now from %s\"", "%", "model_file", ")", "\n", "\n", "", "self", ".", "model", "=", "load_model", "(", "model_file", ")", "\n", "# String to Vector", "\n", "self", ".", "stov", "=", "WordToVectorDict", "(", "self", ".", "model", ")", "\n", "\n", "if", "is_main_process", ":", "\n", "            ", "self", ".", "writer", ".", "write", "(", "\"Finished loading fasttext model\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor._is_main_process": [[474, 476], ["multiprocessing.current_process"], "methods", ["None"], ["", "", "def", "_is_main_process", "(", "self", ")", ":", "\n", "        ", "return", "multiprocessing", ".", "current_process", "(", ")", ".", "name", "==", "\"Process-1\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor._map_strings_to_indices": [[477, 491], ["min", "torch.full", "enumerate", "len", "torch.from_numpy", "processors.FastTextProcessor.model.get_dimension"], "methods", ["None"], ["", "def", "_map_strings_to_indices", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "length", "=", "min", "(", "len", "(", "tokens", ")", ",", "self", ".", "max_length", ")", "\n", "tokens", "=", "tokens", "[", ":", "length", "]", "\n", "\n", "output", "=", "torch", ".", "full", "(", "\n", "(", "self", ".", "max_length", ",", "self", ".", "model", ".", "get_dimension", "(", ")", ")", ",", "\n", "fill_value", "=", "self", ".", "PAD_INDEX", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "\n", "for", "idx", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "            ", "output", "[", "idx", "]", "=", "torch", ".", "from_numpy", "(", "self", ".", "stov", "[", "token", "]", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor.__call__": [[492, 495], ["processors.FastTextProcessor._try_download", "processors.VocabProcessor.__call__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.FastTextProcessor._try_download", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.batch_collator.BatchCollator.__call__"], ["", "def", "__call__", "(", "self", ",", "item", ")", ":", "\n", "        ", "self", ".", "_try_download", "(", ")", "\n", "return", "super", "(", ")", ".", "__call__", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VQAAnswerProcessor.__init__": [[515, 542], ["pythia.common.registry.registry.get", "pythia.utils.text_utils.VocabDict", "hasattr", "hasattr", "hasattr", "AttributeError", "processors.Processor", "warnings.warn", "ValueError"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "if", "not", "hasattr", "(", "config", ",", "\"vocab_file\"", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"'vocab_file' argument required, but not \"", "\n", "\"present in AnswerProcessor's config\"", "\n", ")", "\n", "\n", "", "self", ".", "answer_vocab", "=", "VocabDict", "(", "config", ".", "vocab_file", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "preprocessor", "=", "None", "\n", "\n", "if", "hasattr", "(", "config", ",", "\"preprocessor\"", ")", ":", "\n", "            ", "self", ".", "preprocessor", "=", "Processor", "(", "config", ".", "preprocessor", ")", "\n", "\n", "if", "self", ".", "preprocessor", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"No processor named {} is defined.\"", ".", "format", "(", "config", ".", "preprocessor", ")", "\n", ")", "\n", "\n", "", "", "if", "hasattr", "(", "config", ",", "\"num_answers\"", ")", ":", "\n", "            ", "self", ".", "num_answers", "=", "config", ".", "num_answers", "\n", "", "else", ":", "\n", "            ", "self", ".", "num_answers", "=", "self", ".", "DEFAULT_NUM_ANSWERS", "\n", "warnings", ".", "warn", "(", "\n", "\"'num_answers' not defined in the config. \"", "\n", "\"Setting to default of {}\"", ".", "format", "(", "self", ".", "DEFAULT_NUM_ANSWERS", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VQAAnswerProcessor.__call__": [[544, 593], ["torch.zeros", "torch.zeros.fill_", "enumerate", "processors.VQAAnswerProcessor.compute_answers_scores", "isinstance", "TypeError", "processors.VQAAnswerProcessor.answer_vocab.get_unk_index", "processors.VQAAnswerProcessor.answer_vocab.word2idx", "AssertionError", "AssertionError", "processors.VQAAnswerProcessor.preprocessor"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.MultiHotAnswerFromVocabProcessor.compute_answers_scores", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_unk_index", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.word2idx"], ["", "", "def", "__call__", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"Takes in dict with answers or answers_tokens, and returns back\n        a dict with answers (processed), \"answers_indices\" which point to\n        indices of the answers if present and \"answers_scores\" which represent\n        VQA style scores for the answers.\n\n        Args:\n            item (Dict): Dict containing answers or answers_tokens\n\n        Returns:\n            Dict: Processed answers, indices and scores.\n\n        \"\"\"", "\n", "tokens", "=", "None", "\n", "\n", "if", "not", "isinstance", "(", "item", ",", "dict", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"'item' passed to processor must be a dict\"", ")", "\n", "\n", "", "if", "\"answer_tokens\"", "in", "item", ":", "\n", "            ", "tokens", "=", "item", "[", "\"answer_tokens\"", "]", "\n", "", "elif", "\"answers\"", "in", "item", ":", "\n", "            ", "if", "self", ".", "preprocessor", "is", "None", ":", "\n", "                ", "raise", "AssertionError", "(", "\n", "\"'preprocessor' must be defined if you \"", "\n", "\"don't pass 'answer_tokens'\"", "\n", ")", "\n", "\n", "", "tokens", "=", "[", "\n", "self", ".", "preprocessor", "(", "{", "\"text\"", ":", "answer", "}", ")", "[", "\"text\"", "]", "\n", "for", "answer", "in", "item", "[", "\"answers\"", "]", "\n", "]", "\n", "", "else", ":", "\n", "            ", "raise", "AssertionError", "(", "\n", "\"'answers' or 'answer_tokens' must be passed\"", "\n", "\" to answer processor in a dict\"", "\n", ")", "\n", "\n", "", "answers_indices", "=", "torch", ".", "zeros", "(", "self", ".", "num_answers", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "answers_indices", ".", "fill_", "(", "self", ".", "answer_vocab", ".", "get_unk_index", "(", ")", ")", "\n", "\n", "for", "idx", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "            ", "answers_indices", "[", "idx", "]", "=", "self", ".", "answer_vocab", ".", "word2idx", "(", "token", ")", "\n", "\n", "", "answers_scores", "=", "self", ".", "compute_answers_scores", "(", "answers_indices", ")", "\n", "\n", "return", "{", "\n", "\"answers\"", ":", "tokens", ",", "\n", "\"answers_indices\"", ":", "answers_indices", ",", "\n", "\"answers_scores\"", ":", "answers_scores", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VQAAnswerProcessor.get_vocab_size": [[595, 604], ["None"], "methods", ["None"], ["", "def", "get_vocab_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get vocab size of the answer vocabulary. Can also include\n        soft copy dynamic answer space size.\n\n        Returns:\n            int: size of the answer vocabulary\n\n        \"\"\"", "\n", "return", "self", ".", "answer_vocab", ".", "num_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VQAAnswerProcessor.get_true_vocab_size": [[605, 614], ["None"], "methods", ["None"], ["", "def", "get_true_vocab_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"True vocab size can be different from normal vocab size in some cases\n        such as soft copy where dynamic answer space is added.\n\n        Returns:\n            int: True vocab size.\n\n        \"\"\"", "\n", "return", "self", ".", "answer_vocab", ".", "num_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VQAAnswerProcessor.word2idx": [[615, 626], ["processors.VQAAnswerProcessor.answer_vocab.word2idx"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.word2idx"], ["", "def", "word2idx", "(", "self", ",", "word", ")", ":", "\n", "        ", "\"\"\"Convert a word to its index according to vocabulary\n\n        Args:\n            word (str): Word to be converted to index.\n\n        Returns:\n            int: Index of the word.\n\n        \"\"\"", "\n", "return", "self", ".", "answer_vocab", ".", "word2idx", "(", "word", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VQAAnswerProcessor.idx2word": [[627, 638], ["processors.VQAAnswerProcessor.answer_vocab.idx2word"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.idx2word"], ["", "def", "idx2word", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Index to word according to the vocabulary.\n\n        Args:\n            idx (int): Index to be converted to the word.\n\n        Returns:\n            str: Word corresponding to the index.\n\n        \"\"\"", "\n", "return", "self", ".", "answer_vocab", ".", "idx2word", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.VQAAnswerProcessor.compute_answers_scores": [[639, 667], ["torch.zeros", "list", "set", "processors.VQAAnswerProcessor.get_vocab_size", "enumerate", "answers_indices.tolist", "min", "accs.append", "sum", "len", "float", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_vocab_size"], ["", "def", "compute_answers_scores", "(", "self", ",", "answers_indices", ")", ":", "\n", "        ", "\"\"\"Generate VQA based answer scores for answers_indices.\n\n        Args:\n            answers_indices (torch.LongTensor): tensor containing indices of the answers\n\n        Returns:\n            torch.FloatTensor: tensor containing scores.\n\n        \"\"\"", "\n", "scores", "=", "torch", ".", "zeros", "(", "self", ".", "get_vocab_size", "(", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "gt_answers", "=", "list", "(", "enumerate", "(", "answers_indices", ")", ")", "\n", "unique_answers", "=", "set", "(", "answers_indices", ".", "tolist", "(", ")", ")", "\n", "\n", "for", "answer", "in", "unique_answers", ":", "\n", "            ", "accs", "=", "[", "]", "\n", "for", "gt_answer", "in", "gt_answers", ":", "\n", "                ", "other_answers", "=", "[", "item", "for", "item", "in", "gt_answers", "if", "item", "!=", "gt_answer", "]", "\n", "\n", "matching_answers", "=", "[", "item", "for", "item", "in", "other_answers", "if", "item", "[", "1", "]", "==", "answer", "]", "\n", "acc", "=", "min", "(", "1", ",", "float", "(", "len", "(", "matching_answers", ")", ")", "/", "3", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "", "avg_acc", "=", "sum", "(", "accs", ")", "/", "len", "(", "accs", ")", "\n", "\n", "if", "answer", "!=", "self", ".", "answer_vocab", ".", "UNK_INDEX", ":", "\n", "                ", "scores", "[", "answer", "]", "=", "avg_acc", "\n", "\n", "", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.MultiHotAnswerFromVocabProcessor.__init__": [[671, 673], ["processors.VQAAnswerProcessor.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.MultiHotAnswerFromVocabProcessor.compute_answers_scores": [[674, 679], ["torch.zeros", "processors.MultiHotAnswerFromVocabProcessor.get_vocab_size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_vocab_size"], ["", "def", "compute_answers_scores", "(", "self", ",", "answers_indices", ")", ":", "\n", "        ", "scores", "=", "torch", ".", "zeros", "(", "self", ".", "get_vocab_size", "(", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "scores", "[", "answers_indices", "]", "=", "1", "\n", "scores", "[", "self", ".", "answer_vocab", ".", "UNK_INDEX", "]", "=", "0", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.__init__": [[694, 709], ["processors.VQAAnswerProcessor.__init__", "hasattr", "hasattr", "warnings.warn", "processors.Processor"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "if", "hasattr", "(", "config", ",", "\"max_length\"", ")", ":", "\n", "            ", "self", ".", "max_length", "=", "config", ".", "max_length", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_length", "=", "self", ".", "DEFAULT_MAX_LENGTH", "\n", "warnings", ".", "warn", "(", "\n", "\"'max_length' not defined in the config. \"", "\n", "\"Setting to default of {}\"", ".", "format", "(", "self", ".", "DEFAULT_MAX_LENGTH", ")", "\n", ")", "\n", "\n", "", "self", ".", "context_preprocessor", "=", "None", "\n", "if", "hasattr", "(", "config", ",", "\"context_preprocessor\"", ")", ":", "\n", "            ", "self", ".", "context_preprocessor", "=", "Processor", "(", "config", ".", "context_preprocessor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_vocab_size": [[710, 721], ["None"], "methods", ["None"], ["", "", "def", "get_vocab_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Size of Vocab + Size of Dynamic soft-copy based answer space\n\n        Returns:\n            int: Size of vocab + size of dynamic soft-copy answer space.\n\n        \"\"\"", "\n", "answer_vocab_nums", "=", "self", ".", "answer_vocab", ".", "num_vocab", "\n", "answer_vocab_nums", "+=", "self", ".", "max_length", "\n", "\n", "return", "answer_vocab_nums", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_true_vocab_size": [[722, 730], ["None"], "methods", ["None"], ["", "def", "get_true_vocab_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Actual vocab size which only include size of the vocabulary file.\n\n        Returns:\n            int: Actual size of vocabs.\n\n        \"\"\"", "\n", "return", "self", ".", "answer_vocab", ".", "num_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.__call__": [[731, 773], ["processors.VQAAnswerProcessor.__call__", "super().__call__.new_zeros", "min", "list", "set", "collections.Counter", "enumerate", "len", "enumerate", "min", "accs.append", "sum", "len", "processors.SoftCopyAnswerProcessor.context_preprocessor", "len", "float", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.batch_collator.BatchCollator.__call__"], ["", "def", "__call__", "(", "self", ",", "item", ")", ":", "\n", "        ", "answers", "=", "item", "[", "\"answers\"", "]", "\n", "scores", "=", "super", "(", ")", ".", "__call__", "(", "{", "\"answers\"", ":", "answers", "}", ")", "\n", "\n", "indices", "=", "scores", "[", "\"answers_indices\"", "]", "\n", "answers", "=", "scores", "[", "\"answers\"", "]", "\n", "scores", "=", "scores", "[", "\"answers_scores\"", "]", "\n", "\n", "tokens_scores", "=", "scores", ".", "new_zeros", "(", "self", ".", "max_length", ")", "\n", "tokens", "=", "item", "[", "\"tokens\"", "]", "\n", "length", "=", "min", "(", "len", "(", "tokens", ")", ",", "self", ".", "max_length", ")", "\n", "\n", "gt_answers", "=", "list", "(", "enumerate", "(", "answers", ")", ")", "\n", "unique_answers", "=", "set", "(", "answers", ")", "\n", "\n", "if", "self", ".", "context_preprocessor", "is", "not", "None", ":", "\n", "            ", "tokens", "=", "[", "\n", "self", ".", "context_preprocessor", "(", "{", "\"text\"", ":", "token", "}", ")", "[", "\"text\"", "]", "for", "token", "in", "tokens", "\n", "]", "\n", "\n", "", "answer_counter", "=", "Counter", "(", "answers", ")", "\n", "\n", "for", "idx", ",", "token", "in", "enumerate", "(", "tokens", "[", ":", "length", "]", ")", ":", "\n", "            ", "if", "answer_counter", "[", "token", "]", "==", "0", ":", "\n", "                ", "continue", "\n", "", "accs", "=", "[", "]", "\n", "\n", "for", "gt_answer", "in", "gt_answers", ":", "\n", "                ", "other_answers", "=", "[", "item", "for", "item", "in", "gt_answers", "if", "item", "!=", "gt_answer", "]", "\n", "matching_answers", "=", "[", "item", "for", "item", "in", "other_answers", "if", "item", "[", "1", "]", "==", "token", "]", "\n", "acc", "=", "min", "(", "1", ",", "float", "(", "len", "(", "matching_answers", ")", ")", "/", "3", ")", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "\n", "", "tokens_scores", "[", "idx", "]", "=", "sum", "(", "accs", ")", "/", "len", "(", "accs", ")", "\n", "\n", "# Scores are already proper size, see L314. Now,", "\n", "# fix scores for soft copy candidates", "\n", "", "scores", "[", "-", "len", "(", "tokens_scores", ")", ":", "]", "=", "tokens_scores", "\n", "return", "{", "\n", "\"answers\"", ":", "answers", ",", "\n", "\"answers_indices\"", ":", "indices", ",", "\n", "\"answers_scores\"", ":", "scores", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SimpleWordProcessor.__init__": [[785, 789], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "from", "pythia", ".", "utils", ".", "text_utils", "import", "word_tokenize", "\n", "\n", "self", ".", "tokenizer", "=", "word_tokenize", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SimpleWordProcessor.__call__": [[790, 792], ["processors.SimpleWordProcessor.tokenizer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "item", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "{", "\"text\"", ":", "self", ".", "tokenizer", "(", "item", "[", "\"text\"", "]", ",", "*", "args", ",", "**", "kwargs", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SimpleSentenceProcessor.__init__": [[803, 807], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "from", "pythia", ".", "utils", ".", "text_utils", "import", "tokenize", "\n", "\n", "self", ".", "tokenizer", "=", "tokenize", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SimpleSentenceProcessor.__call__": [[808, 810], ["processors.SimpleSentenceProcessor.tokenizer"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "item", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "{", "\"text\"", ":", "self", ".", "tokenizer", "(", "item", "[", "\"text\"", "]", ",", "*", "args", ",", "**", "kwargs", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.BBoxProcessor.__init__": [[850, 855], ["processors.BBoxProcessor._init_extras"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_extras"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "from", "pythia", ".", "utils", ".", "dataset_utils", "import", "build_bbox_tensors", "\n", "\n", "self", ".", "lambda_fn", "=", "build_bbox_tensors", "\n", "self", ".", "_init_extras", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.BBoxProcessor.__call__": [[856, 862], ["processors.BBoxProcessor.preprocessor", "processors.BBoxProcessor.lambda_fn"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "item", ")", ":", "\n", "        ", "info", "=", "item", "[", "\"info\"", "]", "\n", "if", "self", ".", "preprocessor", "is", "not", "None", ":", "\n", "            ", "info", "=", "self", ".", "preprocessor", "(", "info", ")", "\n", "\n", "", "return", "{", "\"bbox\"", ":", "self", ".", "lambda_fn", "(", "info", ",", "self", ".", "max_length", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.CaptionProcessor.__init__": [[873, 880], ["pythia.utils.vocab.Vocab", "hasattr", "AttributeError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "config", ",", "\"vocab\"", ")", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"config passed to the processor has no \"", "\"attribute vocab\"", "\n", ")", "\n", "\n", "", "self", ".", "vocab", "=", "Vocab", "(", "*", "args", ",", "**", "config", ".", "vocab", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.CaptionProcessor.__call__": [[881, 894], ["enumerate", "processors.CaptionProcessor.vocab.get_itos"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_itos"], ["", "def", "__call__", "(", "self", ",", "item", ")", ":", "\n", "        ", "for", "idx", ",", "v", "in", "enumerate", "(", "item", ")", ":", "\n", "            ", "if", "v", "==", "self", ".", "vocab", ".", "EOS_INDEX", ":", "\n", "                ", "item", "=", "item", "[", ":", "idx", "]", "\n", "break", "\n", "", "", "tokens", "=", "[", "\n", "self", ".", "vocab", ".", "get_itos", "(", ")", "[", "w", "]", "\n", "for", "w", "in", "item", "\n", "if", "w", "\n", "not", "in", "{", "self", ".", "vocab", ".", "SOS_INDEX", ",", "self", ".", "vocab", ".", "EOS_INDEX", ",", "self", ".", "vocab", ".", "PAD_INDEX", "}", "\n", "]", "\n", "caption", "=", "\" \"", ".", "join", "(", "tokens", ")", "\n", "return", "{", "\"tokens\"", ":", "tokens", ",", "\"caption\"", ":", "caption", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.EvalAIAnswerProcessor.__init__": [[1066, 1068], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.EvalAIAnswerProcessor.word_tokenize": [[1069, 1073], ["word.replace().replace().replace.replace().replace().replace.lower", "word.replace().replace().replace.replace().replace().replace.replace().replace().replace", "word.replace().replace().replace.replace().replace().replace.strip", "word.replace().replace().replace.replace().replace().replace.replace().replace", "word.replace().replace().replace.replace().replace().replace.replace"], "methods", ["None"], ["", "def", "word_tokenize", "(", "self", ",", "word", ")", ":", "\n", "        ", "word", "=", "word", ".", "lower", "(", ")", "\n", "word", "=", "word", ".", "replace", "(", "\",\"", ",", "\"\"", ")", ".", "replace", "(", "\"?\"", ",", "\"\"", ")", ".", "replace", "(", "\"'s\"", ",", "\" 's\"", ")", "\n", "return", "word", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.EvalAIAnswerProcessor.process_punctuation": [[1074, 1085], ["processors.EvalAIAnswerProcessor.PERIOD_STRIP.sub", "out_text.replace.replace.replace", "out_text.replace.replace.replace", "re.search"], "methods", ["None"], ["", "def", "process_punctuation", "(", "self", ",", "in_text", ")", ":", "\n", "        ", "out_text", "=", "in_text", "\n", "for", "p", "in", "self", ".", "PUNCTUATIONS", ":", "\n", "            ", "if", "(", "p", "+", "\" \"", "in", "in_text", "or", "\" \"", "+", "p", "in", "in_text", ")", "or", "(", "\n", "re", ".", "search", "(", "self", ".", "COMMA_STRIP", ",", "in_text", ")", "is", "not", "None", "\n", ")", ":", "\n", "                ", "out_text", "=", "out_text", ".", "replace", "(", "p", ",", "\"\"", ")", "\n", "", "else", ":", "\n", "                ", "out_text", "=", "out_text", ".", "replace", "(", "p", ",", "\" \"", ")", "\n", "", "", "out_text", "=", "self", ".", "PERIOD_STRIP", ".", "sub", "(", "\"\"", ",", "out_text", ",", "re", ".", "UNICODE", ")", "\n", "return", "out_text", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.EvalAIAnswerProcessor.process_digit_article": [[1086, 1100], ["in_text.lower().split", "enumerate", "processors.EvalAIAnswerProcessor.NUMBER_MAP.setdefault", "in_text.lower", "out_text.append"], "methods", ["None"], ["", "def", "process_digit_article", "(", "self", ",", "in_text", ")", ":", "\n", "        ", "out_text", "=", "[", "]", "\n", "temp_text", "=", "in_text", ".", "lower", "(", ")", ".", "split", "(", ")", "\n", "for", "word", "in", "temp_text", ":", "\n", "            ", "word", "=", "self", ".", "NUMBER_MAP", ".", "setdefault", "(", "word", ",", "word", ")", "\n", "if", "word", "not", "in", "self", ".", "ARTICLES", ":", "\n", "                ", "out_text", ".", "append", "(", "word", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "for", "word_id", ",", "word", "in", "enumerate", "(", "out_text", ")", ":", "\n", "            ", "if", "word", "in", "self", ".", "CONTRACTIONS", ":", "\n", "                ", "out_text", "[", "word_id", "]", "=", "self", ".", "CONTRACTIONS", "[", "word", "]", "\n", "", "", "out_text", "=", "\" \"", ".", "join", "(", "out_text", ")", "\n", "return", "out_text", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.EvalAIAnswerProcessor.__call__": [[1101, 1107], ["processors.EvalAIAnswerProcessor.word_tokenize", "processors.EvalAIAnswerProcessor.replace().replace().strip", "processors.EvalAIAnswerProcessor.process_punctuation", "processors.EvalAIAnswerProcessor.process_digit_article", "processors.EvalAIAnswerProcessor.replace().replace", "processors.EvalAIAnswerProcessor.replace"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.EvalAIAnswerProcessor.word_tokenize", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.process_answers.process_punctuation", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.process_answers.process_digit_article"], ["", "def", "__call__", "(", "self", ",", "item", ")", ":", "\n", "        ", "item", "=", "self", ".", "word_tokenize", "(", "item", ")", "\n", "item", "=", "item", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", ".", "replace", "(", "\"\\t\"", ",", "\" \"", ")", ".", "strip", "(", ")", "\n", "item", "=", "self", ".", "process_punctuation", "(", "item", ")", "\n", "item", "=", "self", ".", "process_digit_article", "(", "item", ")", "\n", "return", "item", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.concat_dataset.PythiaConcatDataset.__init__": [[12, 15], ["torch.utils.data.ConcatDataset.__init__", "dir"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "datasets", ")", "\n", "self", ".", "_dir_representation", "=", "dir", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.concat_dataset.PythiaConcatDataset.__getattr__": [[16, 29], ["getattr", "hasattr", "getattr", "isinstance", "AttributeError", "functools.partial"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "_dir_representation", ":", "\n", "            ", "return", "getattr", "(", "self", ",", "name", ")", "\n", "", "elif", "hasattr", "(", "self", ".", "datasets", "[", "0", "]", ",", "name", ")", ":", "\n", "            ", "attr", "=", "getattr", "(", "self", ".", "datasets", "[", "0", "]", ",", "name", ")", "\n", "# Check if the current attribute is class method function", "\n", "if", "isinstance", "(", "attr", ",", "types", ".", "MethodType", ")", ":", "\n", "# if it is the, we to call this function for", "\n", "# each of the child datasets", "\n", "                ", "attr", "=", "functools", ".", "partial", "(", "self", ".", "_call_all_datasets_func", ",", "name", ")", "\n", "", "return", "attr", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.concat_dataset.PythiaConcatDataset._get_single_call_funcs": [[30, 32], ["None"], "methods", ["None"], ["", "", "def", "_get_single_call_funcs", "(", "self", ")", ":", "\n", "        ", "return", "PythiaConcatDataset", ".", "_SINGLE_CALL_FUNCS", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.concat_dataset.PythiaConcatDataset._call_all_datasets_func": [[33, 46], ["getattr", "hasattr", "dataset.get_single_call_funcs"], "methods", ["None"], ["", "def", "_call_all_datasets_func", "(", "self", ",", "name", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "dataset", "in", "self", ".", "datasets", ":", "\n", "            ", "value", "=", "getattr", "(", "dataset", ",", "name", ")", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "value", "is", "not", "None", ":", "\n", "# TODO: Log a warning here", "\n", "                ", "return", "value", "\n", "# raise RuntimeError(\"Functions returning values can't be \"", "\n", "#                    \"called through PythiaConcatDataset\")", "\n", "", "if", "(", "\n", "hasattr", "(", "dataset", ",", "\"get_single_call_funcs\"", ")", "\n", "and", "name", "in", "dataset", ".", "get_single_call_funcs", "(", ")", "\n", ")", ":", "\n", "                ", "return", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.feature_readers.FeatureReader.__init__": [[9, 36], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_path", ",", "depth_first", ",", "max_features", "=", "None", ")", ":", "\n", "        ", "\"\"\"Feature Reader class for reading features.\n\n        Note: Deprecation: ndim and image_feature will be deprecated later\n        and the format will be standardize using features from detectron.\n\n        Parameters\n        ----------\n        ndim : int\n            Number of expected dimensions in features\n        depth_first : bool\n            CHW vs HWC\n        max_features : int\n            Number of maximum bboxes to keep\n\n        Returns\n        -------\n        type\n            Description of returned object.\n\n        \"\"\"", "\n", "self", ".", "base_path", "=", "base_path", "\n", "ndim", "=", "None", "\n", "self", ".", "feat_reader", "=", "None", "\n", "self", ".", "depth_first", "=", "depth_first", "\n", "self", ".", "max_features", "=", "max_features", "\n", "self", ".", "ndim", "=", "ndim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.feature_readers.FeatureReader._init_reader": [[37, 58], ["feature_readers.FasterRCNNFeatureReader", "feature_readers.PaddedFasterRCNNFeatureReader", "feature_readers.Dim3FeatureReader", "feature_readers.CHWFeatureReader", "feature_readers.HWCFeatureReader", "TypeError"], "methods", ["None"], ["", "def", "_init_reader", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "ndim", "==", "2", "or", "self", ".", "ndim", "==", "0", ":", "\n", "            ", "if", "self", ".", "max_features", "is", "None", ":", "\n", "                ", "self", ".", "feat_reader", "=", "FasterRCNNFeatureReader", "(", ")", "\n", "", "else", ":", "\n", "# TODO: Fix later when we move to proper standardized features", "\n", "# if isinstance(self.image_feature.item(0), dict):", "\n", "#     self.feat_reader = \\", "\n", "#         PaddedFeatureRCNNWithBBoxesFeatureReader(", "\n", "#             self.max_features", "\n", "#         )", "\n", "# else:", "\n", "                ", "self", ".", "feat_reader", "=", "PaddedFasterRCNNFeatureReader", "(", "self", ".", "max_features", ")", "\n", "", "", "elif", "self", ".", "ndim", "==", "3", "and", "not", "self", ".", "depth_first", ":", "\n", "            ", "self", ".", "feat_reader", "=", "Dim3FeatureReader", "(", ")", "\n", "", "elif", "self", ".", "ndim", "==", "4", "and", "self", ".", "depth_first", ":", "\n", "            ", "self", ".", "feat_reader", "=", "CHWFeatureReader", "(", ")", "\n", "", "elif", "self", ".", "ndim", "==", "4", "and", "not", "self", ".", "depth_first", ":", "\n", "            ", "self", ".", "feat_reader", "=", "HWCFeatureReader", "(", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"unkown image feature format\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.feature_readers.FeatureReader.read": [[59, 71], ["os.path.join", "feature_readers.FeatureReader.feat_reader.read", "os.path.join.endswith", "feature_readers.FeatureReader._init_reader", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.padded_faster_RCNN_with_bbox_feat_reader.read", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.feature_readers.FeatureReader._init_reader", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["", "", "def", "read", "(", "self", ",", "image_feat_path", ")", ":", "\n", "        ", "if", "not", "image_feat_path", ".", "endswith", "(", "\"npy\"", ")", ":", "\n", "            ", "return", "None", "\n", "", "image_feat_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "base_path", ",", "image_feat_path", ")", "\n", "\n", "if", "self", ".", "feat_reader", "is", "None", ":", "\n", "            ", "if", "self", ".", "ndim", "is", "None", ":", "\n", "                ", "feat", "=", "np", ".", "load", "(", "image_feat_path", ")", "\n", "self", ".", "ndim", "=", "feat", ".", "ndim", "\n", "", "self", ".", "_init_reader", "(", ")", "\n", "\n", "", "return", "self", ".", "feat_reader", ".", "read", "(", "image_feat_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.feature_readers.FasterRCNNFeatureReader.read": [[74, 76], ["torch.from_numpy", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["    ", "def", "read", "(", "self", ",", "image_feat_path", ")", ":", "\n", "        ", "return", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "image_feat_path", ")", ")", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.feature_readers.CHWFeatureReader.read": [[79, 84], ["numpy.load", "torch.from_numpy", "torch.from_numpy.squeeze"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["    ", "def", "read", "(", "self", ",", "image_feat_path", ")", ":", "\n", "        ", "feat", "=", "np", ".", "load", "(", "image_feat_path", ")", "\n", "assert", "feat", ".", "shape", "[", "0", "]", "==", "1", ",", "\"batch is not 1\"", "\n", "feat", "=", "torch", ".", "from_numpy", "(", "feat", ".", "squeeze", "(", "0", ")", ")", "\n", "return", "feat", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.feature_readers.Dim3FeatureReader.read": [[87, 92], ["numpy.load", "torch.from_numpy", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["    ", "def", "read", "(", "self", ",", "image_feat_path", ")", ":", "\n", "        ", "tmp", "=", "np", ".", "load", "(", "image_feat_path", ")", "\n", "_", ",", "_", ",", "c_dim", "=", "tmp", ".", "shape", "\n", "image_feature", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "tmp", ",", "(", "-", "1", ",", "c_dim", ")", ")", ")", "\n", "return", "image_feature", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.feature_readers.HWCFeatureReader.read": [[95, 101], ["numpy.load", "torch.from_numpy", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["    ", "def", "read", "(", "self", ",", "image_feat_path", ")", ":", "\n", "        ", "tmp", "=", "np", ".", "load", "(", "image_feat_path", ")", "\n", "assert", "tmp", ".", "shape", "[", "0", "]", "==", "1", ",", "\"batch is not 1\"", "\n", "_", ",", "_", ",", "_", ",", "c_dim", "=", "tmp", ".", "shape", "\n", "image_feature", "=", "torch", ".", "from_numpy", "(", "np", ".", "reshape", "(", "tmp", ",", "(", "-", "1", ",", "c_dim", ")", ")", ")", "\n", "return", "image_feature", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.feature_readers.PaddedFasterRCNNFeatureReader.__init__": [[104, 108], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_loc", ")", ":", "\n", "        ", "self", ".", "max_loc", "=", "max_loc", "\n", "self", ".", "first", "=", "True", "\n", "self", ".", "take_item", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.feature_readers.PaddedFasterRCNNFeatureReader.read": [[109, 143], ["numpy.load", "os.path.exists", "numpy.zeros", "torch.from_numpy", "torch.tensor", "image_info.update", "numpy.load.item", "image_feat_path.split", "numpy.load().item", "numpy.load.item", "image_info.update", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["", "def", "read", "(", "self", ",", "image_feat_path", ")", ":", "\n", "        ", "content", "=", "np", ".", "load", "(", "image_feat_path", ",", "allow_pickle", "=", "True", ")", "\n", "info_path", "=", "\"{}_info.npy\"", ".", "format", "(", "image_feat_path", ".", "split", "(", "\".npy\"", ")", "[", "0", "]", ")", "\n", "image_info", "=", "{", "}", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "info_path", ")", ":", "\n", "            ", "image_info", ".", "update", "(", "np", ".", "load", "(", "info_path", ",", "allow_pickle", "=", "True", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "first", ":", "\n", "            ", "self", ".", "first", "=", "False", "\n", "if", "content", ".", "size", "==", "1", "and", "\"image_feat\"", "in", "content", ".", "item", "(", ")", ":", "\n", "                ", "self", ".", "take_item", "=", "True", "\n", "\n", "", "", "image_feature", "=", "content", "\n", "\n", "if", "self", ".", "take_item", ":", "\n", "            ", "item", "=", "content", ".", "item", "(", ")", "\n", "if", "\"image_text\"", "in", "item", ":", "\n", "                ", "image_info", "[", "\"image_text\"", "]", "=", "item", "[", "\"image_text\"", "]", "\n", "image_info", "[", "\"is_ocr\"", "]", "=", "item", "[", "\"image_bbox_source\"", "]", "\n", "image_feature", "=", "item", "[", "\"image_feat\"", "]", "\n", "\n", "", "if", "\"info\"", "in", "item", ":", "\n", "                ", "if", "\"image_text\"", "in", "item", "[", "\"info\"", "]", ":", "\n", "                    ", "image_info", ".", "update", "(", "item", "[", "\"info\"", "]", ")", "\n", "", "image_feature", "=", "item", "[", "\"feature\"", "]", "\n", "\n", "", "", "image_loc", ",", "image_dim", "=", "image_feature", ".", "shape", "\n", "tmp_image_feat", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_loc", ",", "image_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_image_feat", "[", "0", ":", "image_loc", ",", "]", "=", "image_feature", "\n", "image_feature", "=", "torch", ".", "from_numpy", "(", "tmp_image_feat", ")", "\n", "\n", "image_info", "[", "\"max_features\"", "]", "=", "torch", ".", "tensor", "(", "image_loc", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "image_feature", ",", "image_info", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.feature_readers.PaddedFeatureRCNNWithBBoxesFeatureReader.__init__": [[146, 148], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_loc", ")", ":", "\n", "        ", "self", ".", "max_loc", "=", "max_loc", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.feature_readers.PaddedFeatureRCNNWithBBoxesFeatureReader.read": [[149, 166], ["numpy.load", "numpy.load.item().get", "numpy.load.item().get", "numpy.zeros", "torch.from_numpy", "numpy.zeros", "torch.from_numpy", "torch.tensor", "numpy.load.item", "numpy.load.item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "def", "read", "(", "self", ",", "image_feat_path", ")", ":", "\n", "        ", "image_feat_bbox", "=", "np", ".", "load", "(", "image_feat_path", ")", "\n", "image_boxes", "=", "image_feat_bbox", ".", "item", "(", ")", ".", "get", "(", "\"image_bboxes\"", ")", "\n", "tmp_image_feat", "=", "image_feat_bbox", ".", "item", "(", ")", ".", "get", "(", "\"image_feature\"", ")", "\n", "image_loc", ",", "image_dim", "=", "tmp_image_feat", ".", "shape", "\n", "tmp_image_feat_2", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_loc", ",", "image_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_image_feat_2", "[", "0", ":", "image_loc", ",", "]", "=", "tmp_image_feat", "\n", "tmp_image_feat_2", "=", "torch", ".", "from_numpy", "(", "tmp_image_feat_2", ")", "\n", "tmp_image_box", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_loc", ",", "4", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "tmp_image_box", "[", "0", ":", "image_loc", "]", "=", "image_boxes", "\n", "tmp_image_box", "=", "torch", ".", "from_numpy", "(", "tmp_image_box", ")", "\n", "image_info", "=", "{", "\n", "\"image_bbox\"", ":", "tmp_image_box", ",", "\n", "\"max_features\"", ":", "torch", ".", "tensor", "(", "image_loc", ",", "dtype", "=", "torch", ".", "int", ")", ",", "\n", "}", "\n", "\n", "return", "tmp_image_feat_2", ",", "image_info", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask.__init__": [[52, 56], ["torch.utils.data.Dataset.__init__", "pythia.common.registry.registry.get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["def", "__init__", "(", "self", ",", "task_name", ")", ":", "\n", "        ", "super", "(", "BaseTask", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "task_name", "=", "task_name", "\n", "self", ".", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask._process_datasets": [[57, 78], ["base_task.BaseTask.writer.write", "base_task.BaseTask._get_available_datasets", "type", "list", "base_task.BaseTask._get_available_datasets", "map", "len", "base_task.BaseTask.split", "x.strip"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.dialog_task.DialogTask._get_available_datasets", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.dialog_task.DialogTask._get_available_datasets"], ["", "def", "_process_datasets", "(", "self", ")", ":", "\n", "        ", "if", "\"datasets\"", "not", "in", "self", ".", "opts", ":", "\n", "            ", "self", ".", "writer", ".", "write", "(", "\n", "\"No datasets attribute present for task: %s.\"", "\n", "\" Defaulting to all\"", "%", "(", "self", ".", "task_name", ")", ",", "\n", "\"warning\"", ",", "\n", ")", "\n", "datasets", "=", "\"all\"", "\n", "", "else", ":", "\n", "            ", "datasets", "=", "self", ".", "opts", "[", "\"datasets\"", "]", "\n", "\n", "", "if", "datasets", "is", "None", "or", "datasets", "==", "\"all\"", ":", "\n", "            ", "datasets", "=", "self", ".", "_get_available_datasets", "(", ")", "\n", "\n", "", "if", "type", "(", "datasets", ")", "==", "str", ":", "\n", "            ", "datasets", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", ".", "strip", "(", ")", ",", "datasets", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "datasets", ")", "==", "0", "and", "datasets", "[", "0", "]", "==", "\"all\"", ":", "\n", "            ", "datasets", "=", "self", ".", "_get_available_datasets", "(", ")", "\n", "\n", "", "self", ".", "given_datasets", "=", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask.load": [[79, 138], ["base_task.BaseTask._process_datasets", "base_task.BaseTask._get_available_datasets", "len", "base_task.BaseTask.opts.get", "base_task.BaseTask.change_dataset", "pythia.common.registry.registry.get_builder_class", "pythia.common.registry.registry.get_builder_class.", "base_task.BaseTask.opts.get", "registry.get_builder_class.build", "registry.get_builder_class.load", "base_task.BaseTask.builders.append", "base_task.BaseTask.datasets.append", "base_task.BaseTask.per_dataset_lengths.append", "len", "print", "range", "print", "base_task.BaseTask.writer.write", "sys.exit", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask._process_datasets", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.dialog_task.DialogTask._get_available_datasets", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask.change_dataset", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_builder_class", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.build", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "def", "load", "(", "self", ",", "**", "opts", ")", ":", "\n", "        ", "self", ".", "opts", "=", "opts", "\n", "self", ".", "_process_datasets", "(", ")", "\n", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "self", ".", "builders", "=", "[", "]", "\n", "available_datasets", "=", "self", ".", "_get_available_datasets", "(", ")", "\n", "\n", "self", ".", "total_length", "=", "0", "\n", "self", ".", "per_dataset_lengths", "=", "[", "]", "\n", "self", ".", "num_datasets", "=", "0", "\n", "\n", "for", "dataset", "in", "self", ".", "given_datasets", ":", "\n", "            ", "if", "dataset", "in", "available_datasets", ":", "\n", "                ", "builder_class", "=", "registry", ".", "get_builder_class", "(", "dataset", ")", "\n", "\n", "if", "builder_class", "is", "None", ":", "\n", "                    ", "print", "(", "\"No builder class found for %s.\"", "%", "dataset", ")", "\n", "continue", "\n", "", "builder_instance", "=", "builder_class", "(", ")", "\n", "\n", "if", "dataset", "in", "self", ".", "opts", "[", "\"dataset_attributes\"", "]", ":", "\n", "                    ", "attributes", "=", "self", ".", "opts", "[", "\"dataset_attributes\"", "]", "[", "dataset", "]", "\n", "", "else", ":", "\n", "                    ", "self", ".", "writer", ".", "write", "(", "\n", "\"Dataset %s is missing from \"", "\n", "\"dataset_attributes in config.\"", "%", "dataset", ",", "\n", "\"error\"", ",", "\n", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "dataset_type", "=", "self", ".", "opts", ".", "get", "(", "\"dataset_type\"", ",", "\"train\"", ")", "\n", "builder_instance", ".", "build", "(", "dataset_type", ",", "attributes", ")", "\n", "dataset_instance", "=", "builder_instance", ".", "load", "(", "dataset_type", ",", "attributes", ")", "\n", "\n", "if", "dataset_instance", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "self", ".", "builders", ".", "append", "(", "builder_instance", ")", "\n", "self", ".", "datasets", ".", "append", "(", "dataset_instance", ")", "\n", "self", ".", "per_dataset_lengths", ".", "append", "(", "len", "(", "dataset_instance", ")", ")", "\n", "self", ".", "total_length", "+=", "len", "(", "dataset_instance", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\n", "\"Dataset %s is not a valid dataset for task %s. Skipping\"", "\n", "%", "(", "dataset", ",", "self", ".", "task_name", ")", "\n", ")", "\n", "\n", "", "", "self", ".", "num_datasets", "=", "len", "(", "self", ".", "datasets", ")", "\n", "self", ".", "dataset_probablities", "=", "[", "1", "for", "_", "in", "range", "(", "self", ".", "num_datasets", ")", "]", "\n", "sampling", "=", "self", ".", "opts", ".", "get", "(", "\"dataset_size_proportional_sampling\"", ",", "None", ")", "\n", "\n", "if", "sampling", "is", "True", ":", "\n", "            ", "self", ".", "dataset_probablities", "=", "self", ".", "per_dataset_lengths", "[", ":", "]", "\n", "self", ".", "dataset_probablities", "=", "[", "\n", "prob", "/", "self", ".", "total_length", "for", "prob", "in", "self", ".", "dataset_probablities", "\n", "]", "\n", "\n", "", "self", ".", "change_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask._get_available_datasets": [[139, 149], ["None"], "methods", ["None"], ["", "def", "_get_available_datasets", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set available datasets for this task here.\n        Override in your child task class\n        Temporary solution, later we will use decorators to easily register\n        datasets with a task\n\n        Returns:\n            List - List of available datasets for this particular task\n        \"\"\"", "\n", "return", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask.get_datasets": [[150, 152], ["None"], "methods", ["None"], ["", "def", "get_datasets", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask.__len__": [[153, 155], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_length", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask.__getitem__": [[156, 162], ["base_task.BaseTask._preprocess_item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.dialog_task.DialogTask._preprocess_item"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "idx", "=", "idx", "%", "self", ".", "per_dataset_lengths", "[", "self", ".", "dataset_choice", "]", "\n", "\n", "item", "=", "self", ".", "chosen_dataset", "[", "idx", "]", "\n", "\n", "return", "self", ".", "_preprocess_item", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask.change_dataset": [[163, 168], ["numpy.random.choice"], "methods", ["None"], ["", "def", "change_dataset", "(", "self", ")", ":", "\n", "        ", "self", ".", "dataset_choice", "=", "np", ".", "random", ".", "choice", "(", "\n", "self", ".", "num_datasets", ",", "1", ",", "p", "=", "self", ".", "dataset_probablities", "\n", ")", "[", "0", "]", "\n", "self", ".", "chosen_dataset", "=", "self", ".", "datasets", "[", "self", ".", "dataset_choice", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask.verbose_dump": [[169, 171], ["base_task.BaseTask.chosen_dataset.verbose_dump"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.verbose_dump"], ["", "def", "verbose_dump", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "chosen_dataset", ".", "verbose_dump", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask.prepare_batch": [[172, 174], ["base_task.BaseTask.chosen_dataset.prepare_batch"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.prepare_batch"], ["", "def", "prepare_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "chosen_dataset", ".", "prepare_batch", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask._preprocess_item": [[175, 188], ["NotImplementedError"], "methods", ["None"], ["", "def", "_preprocess_item", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"Preprocess an item to be returned from __getitem__.\n        Override in your child task class, so you have control on what you are\n        returning\n\n        Args:\n            item (Sample): Sample returned by a particular dataset\n\n        Returns:\n            Sample: Preprocessed item\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "\"This task doesn't implement preprocess_item\"", "\" method\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask.update_registry_for_model": [[190, 197], ["builder.update_registry_for_model"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.update_registry_for_model"], ["", "def", "update_registry_for_model", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Use this if there is some specific configuration required by model\n        which must be inferred at runtime.\n        \"\"\"", "\n", "for", "builder", "in", "self", ".", "builders", ":", "\n", "            ", "builder", ".", "update_registry_for_model", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask.init_args": [[198, 206], ["parser.add_argument_group", "parser.add_argument"], "methods", ["None"], ["", "", "def", "init_args", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument_group", "(", "\"General Task Arguments\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-dsp\"", ",", "\n", "\"--dataset_size_proportional_sampling\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"Pass if you want to sample from\"", "\n", "\" dataset according to its size. Default: Equal \"", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask._init_args": [[213, 231], ["builder.init_args"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder.init_args"], ["", "def", "_init_args", "(", "self", ",", "parser", ")", ":", "\n", "        ", "\"\"\"Override this function to add extra parameters to\n        parser in your child task class.\n\n        Parameters\n        ----------\n        parser : ArgumentParser\n            Original parser object passed from the higher level classes like\n            trainer\n\n        Returns\n        -------\n        type\n            Description of returned object.\n\n        \"\"\"", "\n", "for", "builder", "in", "self", ".", "builders", ":", "\n", "            ", "builder", ".", "init_args", "(", "parser", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask.clean_config": [[232, 238], ["None"], "methods", ["None"], ["", "", "def", "clean_config", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        Override this in case you want to clean the config you updated earlier\n        in update_registry_for_model\n        \"\"\"", "\n", "return", "config", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.test_cnn_lstm.TestModelCNNLSTM.setUp": [[17, 30], ["torch.manual_seed", "pythia.common.registry.registry.register", "pythia.common.registry.registry.register", "os.path.join", "os.path.abspath", "pythia.utils.configuration.Configuration", "pythia.utils.configuration.Configuration.freeze", "pythia.common.registry.registry.register", "pythia.utils.general.get_pythia_root"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.freeze", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "torch", ".", "manual_seed", "(", "1234", ")", "\n", "registry", ".", "register", "(", "\"clevr_text_vocab_size\"", ",", "80", ")", "\n", "registry", ".", "register", "(", "\"clevr_num_final_outputs\"", ",", "32", ")", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "\n", "get_pythia_root", "(", ")", ",", "\"..\"", ",", "\"configs\"", ",", "\"vqa\"", ",", "\"clevr\"", ",", "\"cnn_lstm.yml\"", "\n", ")", "\n", "config_path", "=", "os", ".", "path", ".", "abspath", "(", "config_path", ")", "\n", "configuration", "=", "Configuration", "(", "config_path", ")", "\n", "configuration", ".", "config", "[", "\"datasets\"", "]", "=", "\"clevr\"", "\n", "configuration", ".", "freeze", "(", ")", "\n", "self", ".", "config", "=", "configuration", ".", "config", "\n", "registry", ".", "register", "(", "\"config\"", ",", "self", ".", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.test_cnn_lstm.TestModelCNNLSTM.test_forward": [[31, 68], ["pythia.models.cnn_lstm.CNNLSTM", "pythia.models.cnn_lstm.CNNLSTM.build", "pythia.models.cnn_lstm.CNNLSTM.init_losses_and_metrics", "test_cnn_lstm.TestModelCNNLSTM.assertTrue", "pythia.common.sample.Sample", "torch.randint", "torch.randn", "torch.randn", "pythia.common.sample.SampleList", "pythia.models.cnn_lstm.CNNLSTM.", "numpy.testing.assert_almost_equal", "numpy.testing.assert_almost_equal", "test_cnn_lstm.TestModelCNNLSTM.assertEqual", "numpy.testing.assert_almost_equal", "isinstance", "loss.item", "accuracy.item", "scores.size", "torch.Size", "scores[].tolist"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.build", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.base_model.BaseModel.init_losses_and_metrics"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "model_config", "=", "self", ".", "config", ".", "model_attributes", ".", "cnn_lstm", "\n", "\n", "cnn_lstm", "=", "CNNLSTM", "(", "model_config", ")", "\n", "cnn_lstm", ".", "build", "(", ")", "\n", "cnn_lstm", ".", "init_losses_and_metrics", "(", ")", "\n", "\n", "self", ".", "assertTrue", "(", "isinstance", "(", "cnn_lstm", ",", "torch", ".", "nn", ".", "Module", ")", ")", "\n", "\n", "test_sample", "=", "Sample", "(", ")", "\n", "test_sample", ".", "text", "=", "torch", ".", "randint", "(", "1", ",", "79", ",", "(", "10", ",", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "test_sample", ".", "image", "=", "torch", ".", "randn", "(", "3", ",", "320", ",", "480", ")", "\n", "test_sample", ".", "targets", "=", "torch", ".", "randn", "(", "32", ")", "\n", "\n", "test_sample_list", "=", "SampleList", "(", "[", "test_sample", "]", ")", "\n", "test_sample_list", ".", "dataset_type", "=", "\"train\"", "\n", "test_sample_list", ".", "dataset_name", "=", "\"clevr\"", "\n", "output", "=", "cnn_lstm", "(", "test_sample_list", ")", "\n", "\n", "scores", "=", "output", "[", "\"scores\"", "]", "\n", "loss", "=", "output", "[", "\"losses\"", "]", "[", "\"train/logit_bce\"", "]", "\n", "accuracy", "=", "output", "[", "\"metrics\"", "]", "[", "\"train/accuracy\"", "]", "\n", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "loss", ".", "item", "(", ")", ",", "23.4751", ",", "decimal", "=", "4", ")", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "accuracy", ".", "item", "(", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "scores", ".", "size", "(", ")", ",", "torch", ".", "Size", "(", "(", "1", ",", "32", ")", ")", ")", "\n", "\n", "expected_scores", "=", "[", "\n", "2.2298e-02", ",", "-", "2.4975e-01", ",", "-", "1.1960e-01", ",", "-", "5.0868e-01", ",", "-", "9.3013e-02", ",", "\n", "1.3202e-02", ",", "-", "1.7536e-01", ",", "-", "3.1180e-01", ",", "1.5369e-01", ",", "1.4900e-01", ",", "\n", "1.9006e-01", ",", "-", "1.9457e-01", ",", "1.4924e-02", ",", "-", "1.1032e-01", ",", "1.3777e-01", ",", "\n", "-", "3.6255e-01", ",", "-", "2.9327e-01", ",", "5.6247e-04", ",", "-", "4.8732e-01", ",", "4.0949e-01", ",", "\n", "-", "1.1069e-01", ",", "2.9696e-01", ",", "4.1903e-02", ",", "6.7062e-02", ",", "7.0094e-01", ",", "\n", "-", "1.9898e-01", ",", "-", "2.9502e-03", ",", "-", "3.9040e-01", ",", "1.2218e-01", ",", "3.7895e-02", ",", "\n", "2.4472e-02", ",", "1.7213e-01", "\n", "]", "\n", "np", ".", "testing", ".", "assert_almost_equal", "(", "scores", "[", "0", "]", ".", "tolist", "(", ")", ",", "expected_scores", ",", "decimal", "=", "5", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.cnn_lstm.CNNLSTM.__init__": [[35, 39], ["pythia.models.base_model.BaseModel.__init__", "pythia.common.registry.registry.get", "cnn_lstm.CNNLSTM._global_config.datasets.split"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "_global_config", "=", "registry", ".", "get", "(", "\"config\"", ")", "\n", "self", ".", "_datasets", "=", "self", ".", "_global_config", ".", "datasets", ".", "split", "(", "\",\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.cnn_lstm.CNNLSTM.build": [[40, 68], ["pythia.common.registry.registry.get", "pythia.common.registry.registry.get", "torch.nn.Embedding", "torch.nn.LSTM", "range", "conv_layers.append", "torch.nn.Sequential", "torch.nn.Linear", "len", "_TEMPLATES[].format", "_TEMPLATES[].format", "len", "conv_layers.append", "pythia.modules.layers.Flatten", "pythia.modules.layers.ConvNet"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "_datasets", ")", ">", "0", "\n", "num_question_choices", "=", "registry", ".", "get", "(", "\n", "_TEMPLATES", "[", "\"question_vocab_size\"", "]", ".", "format", "(", "self", ".", "_datasets", "[", "0", "]", ")", "\n", ")", "\n", "num_answer_choices", "=", "registry", ".", "get", "(", "\n", "_TEMPLATES", "[", "\"number_of_answers\"", "]", ".", "format", "(", "self", ".", "_datasets", "[", "0", "]", ")", "\n", ")", "\n", "\n", "self", ".", "text_embedding", "=", "nn", ".", "Embedding", "(", "\n", "num_question_choices", ",", "self", ".", "config", ".", "text_embedding", ".", "embedding_dim", "\n", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "**", "self", ".", "config", ".", "lstm", ")", "\n", "\n", "layers_config", "=", "self", ".", "config", ".", "cnn", ".", "layers", "\n", "conv_layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "layers_config", ".", "input_dims", ")", ")", ":", "\n", "            ", "conv_layers", ".", "append", "(", "\n", "ConvNet", "(", "\n", "layers_config", ".", "input_dims", "[", "i", "]", ",", "\n", "layers_config", ".", "output_dims", "[", "i", "]", ",", "\n", "kernel_size", "=", "layers_config", ".", "kernel_sizes", "[", "i", "]", "\n", ")", "\n", ")", "\n", "", "conv_layers", ".", "append", "(", "Flatten", "(", ")", ")", "\n", "self", ".", "cnn", "=", "nn", ".", "Sequential", "(", "*", "conv_layers", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "self", ".", "config", ".", "classifier", ".", "input_dim", ",", "num_answer_choices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.cnn_lstm.CNNLSTM.forward": [[69, 92], ["cnn_lstm.CNNLSTM.lstm.flatten_parameters", "cnn_lstm.CNNLSTM.lstm", "hidden[].transpose", "torch.cat", "cnn_lstm.CNNLSTM.cnn", "torch.cat", "cnn_lstm.CNNLSTM.classifier", "cnn_lstm.CNNLSTM.text_embedding", "torch.cat.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sample_list", ")", ":", "\n", "        ", "self", ".", "lstm", ".", "flatten_parameters", "(", ")", "\n", "\n", "question", "=", "sample_list", ".", "text", "\n", "image", "=", "sample_list", ".", "image", "\n", "\n", "# Get (h_n, c_n), last hidden and cell state", "\n", "_", ",", "hidden", "=", "self", ".", "lstm", "(", "self", ".", "text_embedding", "(", "question", ")", ")", "\n", "# X x B x H => B x X x H where X = num_layers * num_directions", "\n", "hidden", "=", "hidden", "[", "0", "]", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# X should be 2 so we can merge in that dimension", "\n", "assert", "hidden", ".", "size", "(", "1", ")", "==", "2", ",", "_CONSTANTS", "[", "\"hidden_state_warning\"", "]", "\n", "\n", "hidden", "=", "torch", ".", "cat", "(", "[", "hidden", "[", ":", ",", "0", ",", ":", "]", ",", "hidden", "[", ":", ",", "1", ",", ":", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "image", "=", "self", ".", "cnn", "(", "image", ")", "\n", "\n", "# Fuse into single dimension", "\n", "fused", "=", "torch", ".", "cat", "(", "[", "hidden", ",", "image", "]", ",", "dim", "=", "-", "1", ")", "\n", "scores", "=", "self", ".", "classifier", "(", "fused", ")", "\n", "\n", "\n", "return", "{", "\"scores\"", ":", "scores", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD.__init__": [[12, 14], ["pythia.models.pythia.Pythia.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD.build": [[15, 21], ["butd.BUTD._build_word_embedding", "butd.BUTD._init_feature_encoders", "butd.BUTD._init_feature_embeddings", "butd.BUTD._init_classifier", "butd.BUTD._init_extras"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._build_word_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_feature_encoders", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_feature_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._init_classifier", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_extras"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "_build_word_embedding", "(", ")", "\n", "self", ".", "_init_feature_encoders", "(", "\"image\"", ")", "\n", "self", ".", "_init_feature_embeddings", "(", "\"image\"", ")", "\n", "self", ".", "_init_classifier", "(", ")", "\n", "self", ".", "_init_extras", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD._build_word_embedding": [[22, 30], ["pythia.common.registry.registry.get", "butd.BUTD.vocab.get_size", "butd.BUTD.vocab.get_embedding", "setattr"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_embedding"], ["", "def", "_build_word_embedding", "(", "self", ")", ":", "\n", "        ", "self", ".", "text_processor", "=", "registry", ".", "get", "(", "self", ".", "_datasets", "[", "0", "]", "+", "\"_text_processor\"", ")", "\n", "self", ".", "vocab", "=", "self", ".", "text_processor", ".", "vocab", "\n", "self", ".", "vocab_size", "=", "self", ".", "vocab", ".", "get_size", "(", ")", "\n", "self", ".", "word_embedding", "=", "self", ".", "vocab", ".", "get_embedding", "(", "\n", "torch", ".", "nn", ".", "Embedding", ",", "embedding_dim", "=", "self", ".", "config", "[", "\"embedding_dim\"", "]", "\n", ")", "\n", "setattr", "(", "self", ",", "\"text_embeddings_out_dim\"", ",", "self", ".", "config", "[", "\"embedding_dim\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD._init_classifier": [[31, 37], ["pythia.modules.layers.ClassifierLayer"], "methods", ["None"], ["", "def", "_init_classifier", "(", "self", ")", ":", "\n", "        ", "self", ".", "classifier", "=", "ClassifierLayer", "(", "\n", "self", ".", "config", "[", "\"classifier\"", "]", "[", "\"type\"", "]", ",", "\n", "in_dim", "=", "self", ".", "config", "[", "\"classifier\"", "]", "[", "\"params\"", "]", "[", "\"feature_dim\"", "]", ",", "\n", "out_dim", "=", "self", ".", "vocab_size", ",", "\n", "**", "self", ".", "config", "[", "\"classifier\"", "]", "[", "\"params\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD.get_optimizer_parameters": [[39, 50], ["butd.BUTD.word_embedding.parameters", "butd.BUTD.image_feature_embeddings_list.parameters", "butd.BUTD.classifier.parameters", "butd.BUTD.image_feature_encoders.parameters"], "methods", ["None"], ["", "def", "get_optimizer_parameters", "(", "self", ",", "config", ")", ":", "\n", "        ", "params", "=", "[", "\n", "{", "\"params\"", ":", "self", ".", "word_embedding", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "image_feature_embeddings_list", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "classifier", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\n", "\"params\"", ":", "self", ".", "image_feature_encoders", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "(", "config", "[", "\"optimizer_attributes\"", "]", "[", "\"params\"", "]", "[", "\"lr\"", "]", "*", "0.1", ")", ",", "\n", "}", ",", "\n", "]", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD.prepare_data": [[51, 72], ["setattr", "hasattr", "sample_list.caption_len.sort", "max", "sample_list.add_field", "sample_list.answers.new_full", "sample_list.add_field"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.add_field", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.add_field"], ["", "def", "prepare_data", "(", "self", ",", "sample_list", ",", "batch_size", ")", ":", "\n", "        ", "setattr", "(", "self", ",", "\"teacher_forcing\"", ",", "hasattr", "(", "sample_list", ",", "\"text\"", ")", ")", "\n", "data", "=", "{", "}", "\n", "if", "self", ".", "teacher_forcing", ":", "\n", "            ", "caption_lengths", ",", "sort_ind", "=", "sample_list", ".", "caption_len", ".", "sort", "(", "\n", "dim", "=", "0", ",", "descending", "=", "True", "\n", ")", "\n", "data", "[", "\"decode_lengths\"", "]", "=", "(", "caption_lengths", "-", "1", ")", ".", "tolist", "(", ")", "\n", "sample_list", ".", "text", "=", "sample_list", ".", "text", "[", "sort_ind", "]", "\n", "sample_list", ".", "answers", "=", "sample_list", ".", "answers", "[", "sort_ind", "]", "\n", "sample_list", ".", "image_feature_0", "=", "sample_list", ".", "image_feature_0", "[", "sort_ind", "]", "\n", "data", "[", "\"texts\"", "]", "=", "sample_list", ".", "text", "\n", "timesteps", "=", "max", "(", "data", "[", "\"decode_lengths\"", "]", ")", "\n", "sample_list", ".", "add_field", "(", "\"targets\"", ",", "sample_list", ".", "text", "[", ":", ",", "1", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "data", "[", "\"texts\"", "]", "=", "sample_list", ".", "answers", ".", "new_full", "(", "\n", "(", "batch_size", ",", "1", ")", ",", "self", ".", "vocab", ".", "SOS_INDEX", ",", "dtype", "=", "torch", ".", "long", "\n", ")", "\n", "timesteps", "=", "self", ".", "text_processor", ".", "max_length", "\n", "sample_list", ".", "add_field", "(", "\"targets\"", ",", "sample_list", ".", "answers", "[", ":", ",", "0", ",", "1", ":", "]", ")", "\n", "", "return", "data", ",", "sample_list", ",", "timesteps", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD.init_hidden_state": [[73, 83], ["features.new_zeros", "features.new_zeros", "features.size", "features.size"], "methods", ["None"], ["", "def", "init_hidden_state", "(", "self", ",", "features", ")", ":", "\n", "        ", "h", "=", "features", ".", "new_zeros", "(", "\n", "(", "features", ".", "size", "(", "0", ")", ",", "self", ".", "config", "[", "\"classifier\"", "]", "[", "\"params\"", "]", "[", "\"hidden_dim\"", "]", ")", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "c", "=", "features", ".", "new_zeros", "(", "\n", "(", "features", ".", "size", "(", "0", ")", ",", "self", ".", "config", "[", "\"classifier\"", "]", "[", "\"params\"", "]", "[", "\"hidden_dim\"", "]", ")", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "return", "h", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD.get_data_t": [[84, 110], ["pythia.common.registry.registry.register", "sum", "butd.BUTD.init_hidden_state", "butd.BUTD.init_hidden_state", "torch.log_softmax", "torch.max", "torch.cat", "indices.view"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD.init_hidden_state", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD.init_hidden_state"], ["", "def", "get_data_t", "(", "self", ",", "t", ",", "data", ",", "batch_size_t", ",", "prev_output", ")", ":", "\n", "        ", "if", "self", ".", "teacher_forcing", ":", "\n", "# Modify batch_size for timestep t", "\n", "            ", "batch_size_t", "=", "sum", "(", "[", "l", ">", "t", "for", "l", "in", "data", "[", "\"decode_lengths\"", "]", "]", ")", "\n", "", "elif", "prev_output", "is", "not", "None", "and", "self", ".", "config", "[", "\"inference\"", "]", "[", "\"type\"", "]", "==", "\"greedy\"", ":", "\n", "# Adding t-1 output words to data[\"text\"] for greedy decoding", "\n", "            ", "output_softmax", "=", "torch", ".", "log_softmax", "(", "prev_output", ",", "dim", "=", "1", ")", "\n", "_", ",", "indices", "=", "torch", ".", "max", "(", "output_softmax", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "data", "[", "\"texts\"", "]", "=", "torch", ".", "cat", "(", "\n", "(", "data", "[", "\"texts\"", "]", ",", "indices", ".", "view", "(", "batch_size_t", ",", "1", ")", ")", ",", "dim", "=", "1", "\n", ")", "\n", "\n", "# Slice data based on batch_size at timestep t", "\n", "", "data", "[", "\"texts\"", "]", "=", "data", "[", "\"texts\"", "]", "[", ":", "batch_size_t", "]", "\n", "if", "\"state\"", "in", "data", ":", "\n", "            ", "h1", "=", "data", "[", "\"state\"", "]", "[", "\"td_hidden\"", "]", "[", "0", "]", "[", ":", "batch_size_t", "]", "\n", "c1", "=", "data", "[", "\"state\"", "]", "[", "\"td_hidden\"", "]", "[", "1", "]", "[", ":", "batch_size_t", "]", "\n", "h2", "=", "data", "[", "\"state\"", "]", "[", "\"lm_hidden\"", "]", "[", "0", "]", "[", ":", "batch_size_t", "]", "\n", "c2", "=", "data", "[", "\"state\"", "]", "[", "\"lm_hidden\"", "]", "[", "1", "]", "[", ":", "batch_size_t", "]", "\n", "", "else", ":", "\n", "            ", "h1", ",", "c1", "=", "self", ".", "init_hidden_state", "(", "data", "[", "\"texts\"", "]", ")", "\n", "h2", ",", "c2", "=", "self", ".", "init_hidden_state", "(", "data", "[", "\"texts\"", "]", ")", "\n", "", "data", "[", "\"state\"", "]", "=", "{", "\"td_hidden\"", ":", "(", "h1", ",", "c1", ")", ",", "\"lm_hidden\"", ":", "(", "h2", ",", "c2", ")", "}", "\n", "registry", ".", "register", "(", "\"{}_lstm_state\"", ".", "format", "(", "h1", ".", "device", ")", ",", "data", "[", "\"state\"", "]", ")", "\n", "\n", "return", "data", ",", "batch_size_t", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD.forward": [[111, 156], ["decoder.init_batch.answers.new_ones", "decoder.init_batch.image_feature_0.size", "butd.BUTD.prepare_data", "range", "decoder.init_batch", "butd.BUTD.get_data_t", "butd.BUTD.word_embedding", "butd.BUTD.process_feature_embedding", "butd.BUTD.classifier", "decoder.get_result", "decoder.init_batch.answers.size", "pythia.common.registry.registry.get_decoder_class", "[].unsqueeze", "decoder.decode"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD.prepare_data", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.BeamSearch.init_batch", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.butd.BUTD.get_data_t", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.NucleusSampling.get_result", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_decoder_class", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.NucleusSampling.decode"], ["", "def", "forward", "(", "self", ",", "sample_list", ")", ":", "\n", "# Stores the output probabilites.", "\n", "        ", "scores", "=", "sample_list", ".", "answers", ".", "new_ones", "(", "\n", "(", "\n", "sample_list", ".", "answers", ".", "size", "(", "0", ")", ",", "\n", "self", ".", "text_processor", ".", "max_length", ",", "\n", "self", ".", "vocab_size", ",", "\n", ")", ",", "\n", "dtype", "=", "torch", ".", "float", ",", "\n", ")", "\n", "\n", "if", "self", ".", "config", "[", "\"inference\"", "]", "[", "\"type\"", "]", "in", "[", "\"beam_search\"", ",", "\"nucleus_sampling\"", "]", ":", "\n", "            ", "decoder", "=", "registry", ".", "get_decoder_class", "(", "self", ".", "config", "[", "\"inference\"", "]", "[", "\"type\"", "]", ")", "(", "\n", "self", ".", "vocab", ",", "self", ".", "config", "\n", ")", "\n", "sample_list", "=", "decoder", ".", "init_batch", "(", "sample_list", ")", "\n", "\n", "", "batch_size", "=", "sample_list", ".", "image_feature_0", ".", "size", "(", "0", ")", "\n", "data", ",", "sample_list", ",", "timesteps", "=", "self", ".", "prepare_data", "(", "sample_list", ",", "batch_size", ")", "\n", "output", "=", "None", "\n", "batch_size_t", "=", "batch_size", "\n", "for", "t", "in", "range", "(", "timesteps", ")", ":", "\n", "            ", "data", ",", "batch_size_t", "=", "self", ".", "get_data_t", "(", "t", ",", "data", ",", "batch_size_t", ",", "output", ")", "\n", "if", "self", ".", "config", "[", "\"inference\"", "]", "[", "\"type\"", "]", "in", "[", "\"beam_search\"", ",", "\"nucleus_sampling\"", "]", ":", "\n", "                ", "pi_t", "=", "data", "[", "\"texts\"", "]", "\n", "", "else", ":", "\n", "                ", "pi_t", "=", "data", "[", "\"texts\"", "]", "[", ":", ",", "t", "]", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "embedding", "=", "self", ".", "word_embedding", "(", "pi_t", ")", "\n", "attention_feature", ",", "_", "=", "self", ".", "process_feature_embedding", "(", "\n", "\"image\"", ",", "sample_list", ",", "embedding", "[", ":", ",", "0", ",", ":", "]", ",", "batch_size_t", "=", "batch_size_t", "\n", ")", "\n", "output", "=", "self", ".", "classifier", "(", "attention_feature", ")", "\n", "# Compute decoding", "\n", "if", "self", ".", "config", "[", "\"inference\"", "]", "[", "\"type\"", "]", "in", "[", "\"beam_search\"", ",", "\"nucleus_sampling\"", "]", ":", "\n", "                ", "finish", ",", "data", ",", "batch_size_t", "=", "decoder", ".", "decode", "(", "t", ",", "data", ",", "output", ")", "\n", "if", "finish", ":", "\n", "                    ", "break", "\n", "", "", "else", ":", "\n", "                ", "scores", "[", ":", "batch_size_t", ",", "t", "]", "=", "output", "\n", "\n", "", "", "model_output", "=", "{", "\"scores\"", ":", "scores", "}", "\n", "if", "self", ".", "config", "[", "\"inference\"", "]", "[", "\"type\"", "]", "in", "[", "\"beam_search\"", ",", "\"nucleus_sampling\"", "]", ":", "\n", "            ", "model_output", "[", "\"captions\"", "]", "=", "decoder", ".", "get_result", "(", ")", "\n", "\n", "", "return", "model_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.top_down_bottom_up.TopDownBottomUp.__init__": [[17, 30], ["pythia.models.base_model.BaseModel.__init__", "sum", "pythia.modules.layers.ReLUWithWeightNormFC", "pythia.modules.layers.ReLUWithWeightNormFC"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_attention_model", ",", "text_embedding_models", ",", "classifier", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_attention_model", "=", "image_attention_model", "\n", "self", ".", "text_embedding_models", "=", "text_embedding_models", "\n", "self", ".", "classifier", "=", "classifier", "\n", "text_lstm_dim", "=", "sum", "(", "[", "q", ".", "text_out_dim", "for", "q", "in", "text_embedding_models", "]", ")", "\n", "joint_embedding_out_dim", "=", "classifier", ".", "input_dim", "\n", "image_feat_dim", "=", "image_attention_model", ".", "image_feat_dim", "\n", "self", ".", "non_linear_text", "=", "ReLUWithWeightNormFC", "(", "\n", "text_lstm_dim", ",", "joint_embedding_out_dim", "\n", ")", "\n", "self", ".", "non_linear_image", "=", "ReLUWithWeightNormFC", "(", "\n", "image_feat_dim", ",", "joint_embedding_out_dim", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.top_down_bottom_up.TopDownBottomUp.build": [[32, 34], ["None"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.top_down_bottom_up.TopDownBottomUp.forward": [[35, 65], ["torch.cat", "isinstance", "top_down_bottom_up.TopDownBottomUp.classifier", "q_model", "text_embeddings.append", "enumerate", "torch.cat", "top_down_bottom_up.TopDownBottomUp.image_attention_model", "torch.sum", "top_down_bottom_up.TopDownBottomUp.non_linear_text", "top_down_bottom_up.TopDownBottomUp.non_linear_image", "torch.unsqueeze", "torch.unsqueeze", "top_down_bottom_up.TopDownBottomUp.image_attention_model", "torch.sum", "image_embeddings.append"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "image_feat_variable", ",", "input_text_variable", ",", "input_answers", "=", "None", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "text_embeddings", "=", "[", "]", "\n", "for", "q_model", "in", "self", ".", "text_embedding_models", ":", "\n", "            ", "q_embedding", "=", "q_model", "(", "input_text_variable", ")", "\n", "text_embeddings", ".", "append", "(", "q_embedding", ")", "\n", "", "text_embedding", "=", "torch", ".", "cat", "(", "text_embeddings", ",", "dim", "=", "1", ")", "\n", "\n", "if", "isinstance", "(", "image_feat_variable", ",", "list", ")", ":", "\n", "            ", "image_embeddings", "=", "[", "]", "\n", "for", "idx", ",", "image_feat", "in", "enumerate", "(", "image_feat_variable", ")", ":", "\n", "                ", "ques_embedding_each", "=", "torch", ".", "unsqueeze", "(", "text_embedding", "[", "idx", ",", ":", "]", ",", "0", ")", "\n", "image_feat_each", "=", "torch", ".", "unsqueeze", "(", "image_feat", ",", "dim", "=", "0", ")", "\n", "attention_each", "=", "self", ".", "image_attention_model", "(", "\n", "image_feat_each", ",", "ques_embedding_each", "\n", ")", "\n", "image_embedding_each", "=", "torch", ".", "sum", "(", "attention_each", "*", "image_feat", ",", "dim", "=", "1", ")", "\n", "image_embeddings", ".", "append", "(", "image_embedding_each", ")", "\n", "", "image_embedding", "=", "torch", ".", "cat", "(", "image_embeddings", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "attention", "=", "self", ".", "image_attention_model", "(", "image_feat_variable", ",", "text_embedding", ")", "\n", "image_embedding", "=", "torch", ".", "sum", "(", "attention", "*", "image_feat_variable", ",", "dim", "=", "1", ")", "\n", "\n", "", "joint_embedding", "=", "self", ".", "non_linear_text", "(", "text_embedding", ")", "*", "self", ".", "non_linear_image", "(", "\n", "image_embedding", "\n", ")", "\n", "logit_res", "=", "self", ".", "classifier", "(", "joint_embedding", ")", "\n", "\n", "return", "logit_res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia.__init__": [[21, 26], ["pythia.models.base_model.BaseModel.__init__", "pythia.common.registry.registry.get", "pythia.Pythia._global_config.datasets.split"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "_global_config", "=", "registry", ".", "get", "(", "\"config\"", ")", "\n", "self", ".", "_datasets", "=", "self", ".", "_global_config", ".", "datasets", ".", "split", "(", "\",\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia.build": [[27, 35], ["pythia.Pythia._build_word_embedding", "pythia.Pythia._init_text_embeddings", "pythia.Pythia._init_feature_encoders", "pythia.Pythia._init_feature_embeddings", "pythia.Pythia._init_combine_layer", "pythia.Pythia._init_classifier", "pythia.Pythia._init_extras", "pythia.Pythia._get_classifier_input_dim"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._build_word_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_text_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_feature_encoders", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_feature_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_combine_layer", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._init_classifier", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_extras", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._get_classifier_input_dim"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "_build_word_embedding", "(", ")", "\n", "self", ".", "_init_text_embeddings", "(", "\"text\"", ")", "\n", "self", ".", "_init_feature_encoders", "(", "\"image\"", ")", "\n", "self", ".", "_init_feature_embeddings", "(", "\"image\"", ")", "\n", "self", ".", "_init_combine_layer", "(", "\"image\"", ",", "\"text\"", ")", "\n", "self", ".", "_init_classifier", "(", "self", ".", "_get_classifier_input_dim", "(", ")", ")", "\n", "self", ".", "_init_extras", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia._build_word_embedding": [[36, 41], ["pythia.common.registry.registry.get", "vocab.get_embedding", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_embedding"], ["", "def", "_build_word_embedding", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "_datasets", ")", ">", "0", "\n", "text_processor", "=", "registry", ".", "get", "(", "self", ".", "_datasets", "[", "0", "]", "+", "\"_text_processor\"", ")", "\n", "vocab", "=", "text_processor", ".", "vocab", "\n", "self", ".", "word_embedding", "=", "vocab", ".", "get_embedding", "(", "torch", ".", "nn", ".", "Embedding", ",", "embedding_dim", "=", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia._init_text_embeddings": [[42, 64], ["setattr", "setattr", "pythia.utils.configuration.ConfigNode", "pythia.Pythia._update_text_embedding_args", "pythia.modules.embeddings.TextEmbedding", "text_embeddings.append", "torch.nn.ModuleList", "torch.nn.ModuleList"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._update_text_embedding_args"], ["", "def", "_init_text_embeddings", "(", "self", ",", "attr", "=", "\"text\"", ")", ":", "\n", "        ", "if", "\"embeddings\"", "not", "in", "attr", ":", "\n", "            ", "attr", "+=", "\"_embeddings\"", "\n", "\n", "", "text_embeddings", "=", "[", "]", "\n", "text_embeddings_list_config", "=", "self", ".", "config", "[", "attr", "]", "\n", "\n", "embeddings_out_dim", "=", "0", "\n", "\n", "for", "text_embedding", "in", "text_embeddings_list_config", ":", "\n", "            ", "embedding_type", "=", "text_embedding", ".", "type", "\n", "embedding_kwargs", "=", "ConfigNode", "(", "text_embedding", ".", "params", ")", "\n", "\n", "self", ".", "_update_text_embedding_args", "(", "embedding_kwargs", ")", "\n", "\n", "embedding", "=", "TextEmbedding", "(", "embedding_type", ",", "**", "embedding_kwargs", ")", "\n", "\n", "text_embeddings", ".", "append", "(", "embedding", ")", "\n", "embeddings_out_dim", "+=", "embedding", ".", "text_out_dim", "\n", "\n", "", "setattr", "(", "self", ",", "attr", "+", "\"_out_dim\"", ",", "embeddings_out_dim", ")", "\n", "setattr", "(", "self", ",", "attr", ",", "nn", ".", "ModuleList", "(", "text_embeddings", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia._update_text_embedding_args": [[65, 68], ["None"], "methods", ["None"], ["", "def", "_update_text_embedding_args", "(", "self", ",", "args", ")", ":", "\n", "# Add model_data_dir to kwargs", "\n", "        ", "args", "[", "\"model_data_dir\"", "]", "=", "self", ".", "config", "[", "\"model_data_dir\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia._init_feature_encoders": [[69, 86], ["setattr", "setattr", "pythia.modules.encoders.ImageEncoder", "feat_encoders.append", "setattr", "torch.nn.ModuleList", "torch.nn.ModuleList"], "methods", ["None"], ["", "def", "_init_feature_encoders", "(", "self", ",", "attr", ")", ":", "\n", "        ", "feat_encoders", "=", "[", "]", "\n", "feat_encoders_list_config", "=", "self", ".", "config", "[", "attr", "+", "\"_feature_encodings\"", "]", "\n", "feature_dim", "=", "self", ".", "config", "[", "attr", "+", "\"_feature_dim\"", "]", "\n", "setattr", "(", "self", ",", "attr", "+", "\"_feature_dim\"", ",", "feature_dim", ")", "\n", "\n", "for", "feat_encoder", "in", "feat_encoders_list_config", ":", "\n", "            ", "encoder_type", "=", "feat_encoder", "[", "\"type\"", "]", "\n", "encoder_kwargs", "=", "feat_encoder", "[", "\"params\"", "]", "\n", "encoder_kwargs", "[", "\"model_data_dir\"", "]", "=", "self", ".", "config", "[", "\"model_data_dir\"", "]", "\n", "\n", "feat_model", "=", "ImageEncoder", "(", "encoder_type", ",", "feature_dim", ",", "**", "encoder_kwargs", ")", "\n", "\n", "feat_encoders", ".", "append", "(", "feat_model", ")", "\n", "setattr", "(", "self", ",", "attr", "+", "\"_feature_dim\"", ",", "feat_model", ".", "out_dim", ")", "\n", "\n", "", "setattr", "(", "self", ",", "attr", "+", "\"_feature_encoders\"", ",", "nn", ".", "ModuleList", "(", "feat_encoders", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia._init_feature_embeddings": [[87, 121], ["len", "range", "getattr", "setattr", "setattr", "getattr", "torch.nn.ModuleList", "torch.nn.ModuleList", "feature_embeddings_list.append", "torch.nn.ModuleList", "torch.nn.ModuleList", "pythia.modules.embeddings.ImageEmbedding", "torch.nn.ModuleList.append", "getattr"], "methods", ["None"], ["", "def", "_init_feature_embeddings", "(", "self", ",", "attr", ")", ":", "\n", "        ", "feature_embeddings_list", "=", "[", "]", "\n", "num_feature_feat", "=", "len", "(", "\n", "getattr", "(", "self", ".", "config", ",", "\"{}_feature_encodings\"", ".", "format", "(", "attr", ")", ")", "\n", ")", "\n", "\n", "self", ".", "feature_embeddings_out_dim", "=", "0", "\n", "\n", "for", "_", "in", "range", "(", "num_feature_feat", ")", ":", "\n", "            ", "feature_embeddings", "=", "[", "]", "\n", "feature_attn_model_list", "=", "self", ".", "config", "[", "attr", "+", "\"_feature_embeddings\"", "]", "\n", "\n", "for", "feature_attn_model_params", "in", "feature_attn_model_list", ":", "\n", "                ", "feature_embedding", "=", "ImageEmbedding", "(", "\n", "getattr", "(", "self", ",", "attr", "+", "\"_feature_dim\"", ")", ",", "\n", "self", ".", "text_embeddings_out_dim", ",", "\n", "**", "feature_attn_model_params", "\n", ")", "\n", "feature_embeddings", ".", "append", "(", "feature_embedding", ")", "\n", "self", ".", "feature_embeddings_out_dim", "+=", "feature_embedding", ".", "out_dim", "\n", "\n", "", "feature_embeddings", "=", "nn", ".", "ModuleList", "(", "feature_embeddings", ")", "\n", "feature_embeddings_list", ".", "append", "(", "feature_embeddings", ")", "\n", "\n", "", "self", ".", "feature_embeddings_out_dim", "*=", "getattr", "(", "self", ",", "attr", "+", "\"_feature_dim\"", ")", "\n", "\n", "setattr", "(", "\n", "self", ",", "attr", "+", "\"_feature_embeddings_out_dim\"", ",", "self", ".", "feature_embeddings_out_dim", "\n", ")", "\n", "del", "self", ".", "feature_embeddings_out_dim", "\n", "setattr", "(", "\n", "self", ",", "\n", "attr", "+", "\"_feature_embeddings_list\"", ",", "\n", "nn", ".", "ModuleList", "(", "feature_embeddings_list", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia._get_embeddings_attr": [[123, 131], ["hasattr"], "methods", ["None"], ["", "def", "_get_embeddings_attr", "(", "self", ",", "attr", ")", ":", "\n", "        ", "embedding_attr1", "=", "attr", "\n", "if", "hasattr", "(", "self", ",", "attr", "+", "\"_embeddings_out_dim\"", ")", ":", "\n", "            ", "embedding_attr1", "=", "attr", "+", "\"_embeddings_out_dim\"", "\n", "", "else", ":", "\n", "            ", "embedding_attr1", "=", "attr", "+", "\"_feature_embeddings_out_dim\"", "\n", "\n", "", "return", "embedding_attr1", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia._init_combine_layer": [[132, 146], ["pythia.modules.layers.ModalCombineLayer", "setattr", "getattr", "getattr", "pythia.Pythia._get_embeddings_attr", "pythia.Pythia._get_embeddings_attr"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._get_embeddings_attr", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._get_embeddings_attr"], ["", "def", "_init_combine_layer", "(", "self", ",", "attr1", ",", "attr2", ")", ":", "\n", "        ", "config_attr", "=", "attr1", "+", "\"_\"", "+", "attr2", "+", "\"_modal_combine\"", "\n", "\n", "multi_modal_combine_layer", "=", "ModalCombineLayer", "(", "\n", "self", ".", "config", "[", "config_attr", "]", "[", "\"type\"", "]", ",", "\n", "getattr", "(", "self", ",", "self", ".", "_get_embeddings_attr", "(", "attr1", ")", ")", ",", "\n", "getattr", "(", "self", ",", "self", ".", "_get_embeddings_attr", "(", "attr2", ")", ")", ",", "\n", "**", "self", ".", "config", "[", "config_attr", "]", "[", "\"params\"", "]", "\n", ")", "\n", "\n", "setattr", "(", "\n", "self", ",", "\n", "attr1", "+", "\"_\"", "+", "attr2", "+", "\"_multi_modal_combine_layer\"", ",", "\n", "multi_modal_combine_layer", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia._init_classifier": [[148, 157], ["pythia.common.registry.registry.get", "pythia.modules.layers.ClassifierLayer"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "def", "_init_classifier", "(", "self", ",", "combined_embedding_dim", ")", ":", "\n", "# TODO: Later support multihead", "\n", "        ", "num_choices", "=", "registry", ".", "get", "(", "self", ".", "_datasets", "[", "0", "]", "+", "\"_num_final_outputs\"", ")", "\n", "\n", "self", ".", "classifier", "=", "ClassifierLayer", "(", "\n", "self", ".", "config", "[", "\"classifier\"", "]", "[", "\"type\"", "]", ",", "\n", "in_dim", "=", "combined_embedding_dim", ",", "\n", "out_dim", "=", "num_choices", ",", "\n", "**", "self", ".", "config", "[", "\"classifier\"", "]", "[", "\"params\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia._init_extras": [[159, 161], ["None"], "methods", ["None"], ["", "def", "_init_extras", "(", "self", ")", ":", "\n", "        ", "self", ".", "inter_model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia.get_optimizer_parameters": [[162, 177], ["pythia.Pythia.word_embedding.parameters", "pythia.Pythia.image_feature_embeddings_list.parameters", "pythia.Pythia.text_embeddings.parameters", "combine_layer.parameters", "pythia.Pythia.classifier.parameters", "pythia.Pythia.image_feature_encoders.parameters"], "methods", ["None"], ["", "def", "get_optimizer_parameters", "(", "self", ",", "config", ")", ":", "\n", "        ", "combine_layer", "=", "self", ".", "image_text_multi_modal_combine_layer", "\n", "params", "=", "[", "\n", "{", "\"params\"", ":", "self", ".", "word_embedding", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "image_feature_embeddings_list", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "text_embeddings", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "combine_layer", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "classifier", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\n", "\"params\"", ":", "self", ".", "image_feature_encoders", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "(", "config", "[", "\"optimizer_attributes\"", "]", "[", "\"params\"", "]", "[", "\"lr\"", "]", "*", "0.1", ")", ",", "\n", "}", ",", "\n", "]", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia._get_classifier_input_dim": [[178, 180], ["None"], "methods", ["None"], ["", "def", "_get_classifier_input_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_text_multi_modal_combine_layer", ".", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia.process_text_embedding": [[181, 210], ["getattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr", "isinstance", "text_embeddings.append", "getattr", "text_embedding_model", "text_embedding_model", "embedding_attr.split", "getattr", "embedding_attr.split", "embedding_attr.split"], "methods", ["None"], ["", "def", "process_text_embedding", "(", "\n", "self", ",", "sample_list", ",", "embedding_attr", "=", "\"text_embeddings\"", ",", "info", "=", "None", "\n", ")", ":", "\n", "        ", "text_embeddings", "=", "[", "]", "\n", "#pdb.set_trace()", "\n", "\n", "# Get \"text\" attribute in case of \"text_embeddings\" case", "\n", "# and \"context\" attribute in case of \"context_embeddings\"", "\n", "if", "not", "info", ":", "\n", "            ", "texts", "=", "getattr", "(", "sample_list", ",", "embedding_attr", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", "\n", "", "elif", "info", "==", "\"sub_question\"", ":", "\n", "            ", "texts", "=", "getattr", "(", "sample_list", ",", "embedding_attr", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "+", "'_sq'", ")", "\n", "", "elif", "info", "==", "\"other_question\"", ":", "\n", "            ", "texts", "=", "getattr", "(", "sample_list", ",", "embedding_attr", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "+", "'_oq'", ")", "\n", "\n", "# Get embedding models", "\n", "", "text_embedding_models", "=", "getattr", "(", "self", ",", "embedding_attr", ")", "\n", "\n", "for", "text_embedding_model", "in", "text_embedding_models", ":", "\n", "# TODO: Move this logic inside", "\n", "            ", "if", "isinstance", "(", "text_embedding_model", ",", "PreExtractedEmbedding", ")", ":", "\n", "                ", "embedding", "=", "text_embedding_model", "(", "sample_list", ".", "question_id", ")", "\n", "", "else", ":", "\n", "                ", "embedding", "=", "text_embedding_model", "(", "texts", ")", "\n", "", "text_embeddings", ".", "append", "(", "embedding", ")", "\n", "\n", "", "text_embeddding_total", "=", "torch", ".", "cat", "(", "text_embeddings", ",", "dim", "=", "1", ")", "\n", "\n", "return", "text_embeddding_total", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia.process_feature_embedding": [[211, 279], ["sample_list.get_fields", "getattr", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sample_list.get_batch_size", "getattr", "features.append", "len", "len", "len", "len", "getattr", "getattr", "feature_encoder", "getattr", "getattr", "feature_embedding_model", "feature_embeddings.append", "feature_attentions.append", "attention.squeeze"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.get_fields", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.get_batch_size"], ["", "def", "process_feature_embedding", "(", "\n", "self", ",", "attr", ",", "sample_list", ",", "text_embedding_total", ",", "extra", "=", "[", "]", ",", "batch_size_t", "=", "None", "\n", ")", ":", "\n", "        ", "feature_embeddings", "=", "[", "]", "\n", "feature_attentions", "=", "[", "]", "\n", "features", "=", "[", "]", "\n", "batch_size_t", "=", "(", "\n", "sample_list", ".", "get_batch_size", "(", ")", "if", "batch_size_t", "is", "None", "else", "batch_size_t", "\n", ")", "\n", "\n", "# Convert list of keys to the actual values", "\n", "extra", "=", "sample_list", ".", "get_fields", "(", "extra", ")", "\n", "\n", "feature_idx", "=", "0", "\n", "\n", "# Get all of the features, which are in the form, \"image_feature_0\"", "\n", "# \"image_feature_1\" ...", "\n", "while", "True", ":", "\n", "            ", "feature", "=", "getattr", "(", "\n", "sample_list", ",", "\"{}_feature_{:d}\"", ".", "format", "(", "attr", ",", "feature_idx", ")", ",", "None", "\n", ")", "\n", "if", "feature", "is", "None", ":", "\n", "                ", "break", "\n", "", "feature_idx", "+=", "1", "\n", "feature", "=", "feature", "[", ":", "batch_size_t", "]", "\n", "features", ".", "append", "(", "feature", ")", "\n", "\n", "", "feature_encoders", "=", "getattr", "(", "self", ",", "attr", "+", "\"_feature_encoders\"", ")", "\n", "# Each feature should have a separate image feature encoders", "\n", "assert", "len", "(", "features", ")", "==", "len", "(", "feature_encoders", ")", ",", "(", "\n", "\"Number of feature encoders, {} are not equal \"", "\n", "\"to number of features, {}.\"", ".", "format", "(", "len", "(", "feature_encoders", ")", ",", "len", "(", "features", ")", ")", "\n", ")", "\n", "\n", "# Now, iterate to get final attended image features", "\n", "for", "i", ",", "feature", "in", "enumerate", "(", "features", ")", ":", "\n", "# Get info related to the current feature. info is generally", "\n", "# in key of format \"image_info_0\" for 0th feature", "\n", "            ", "feature_info", "=", "getattr", "(", "sample_list", ",", "\"{}_info_{:d}\"", ".", "format", "(", "attr", ",", "i", ")", ",", "{", "}", ")", "\n", "# For Pythia, we need max_features to mask attention", "\n", "feature_dim", "=", "getattr", "(", "feature_info", ",", "\"max_features\"", ",", "None", ")", "\n", "if", "feature_dim", "is", "not", "None", ":", "\n", "                ", "feature_dim", "=", "feature_dim", "[", ":", "batch_size_t", "]", "\n", "\n", "# Attribute in which encoders are saved, for \"image\" it", "\n", "# will be \"image_feature_encoders\", other example is", "\n", "# \"context_feature_encoders\"", "\n", "", "encoders_attr", "=", "attr", "+", "\"_feature_encoders\"", "\n", "feature_encoder", "=", "getattr", "(", "self", ",", "encoders_attr", ")", "[", "i", "]", "\n", "\n", "# Encode the features", "\n", "encoded_feature", "=", "feature_encoder", "(", "feature", ")", "\n", "\n", "# Get all of the feature embeddings", "\n", "list_attr", "=", "attr", "+", "\"_feature_embeddings_list\"", "\n", "feature_embedding_models", "=", "getattr", "(", "self", ",", "list_attr", ")", "[", "i", "]", "\n", "\n", "# Forward through these embeddings one by one", "\n", "for", "feature_embedding_model", "in", "feature_embedding_models", ":", "\n", "                ", "inp", "=", "(", "encoded_feature", ",", "text_embedding_total", ",", "feature_dim", ",", "extra", ")", "\n", "\n", "embedding", ",", "attention", "=", "feature_embedding_model", "(", "*", "inp", ")", "\n", "feature_embeddings", ".", "append", "(", "embedding", ")", "\n", "feature_attentions", ".", "append", "(", "attention", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "\n", "# Concatenate all features embeddings and return along with attention", "\n", "", "", "feature_embedding_total", "=", "torch", ".", "cat", "(", "feature_embeddings", ",", "dim", "=", "1", ")", "\n", "return", "feature_embedding_total", ",", "feature_attentions", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia.combine_embeddings": [[280, 298], ["getattr", "getattr."], "methods", ["None"], ["", "def", "combine_embeddings", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "feature_names", "=", "args", "[", "0", "]", "\n", "feature_embeddings", "=", "args", "[", "1", "]", "\n", "\n", "layer", "=", "\"_\"", ".", "join", "(", "feature_names", ")", "+", "\"_multi_modal_combine_layer\"", "\n", "layer_model", "=", "getattr", "(", "self", ",", "layer", ")", "\n", "joint_embeddings", "=", "layer_model", "(", "*", "feature_embeddings", ")", "\n", "if", "args", "[", "2", "]", "==", "\"main\"", ":", "\n", "            ", "self", ".", "question_embedding", "=", "layer_model", ".", "question_embedding", "\n", "", "elif", "args", "[", "2", "]", "==", "\"sub_question\"", ":", "\n", "            ", "self", ".", "question_embedding_sq", "=", "layer_model", ".", "question_embedding", "\n", "", "elif", "args", "[", "2", "]", "==", "\"other_question\"", ":", "\n", "            ", "self", ".", "question_embedding_oq", "=", "layer_model", ".", "question_embedding", "\n", "#pdb.set_trace()", "\n", "#self.combine_layer = self.layer", "\n", "#joint_embedding = self.combine_layer(feature_embeddings)", "\n", "#pdb.set_trace()", "\n", "", "return", "joint_embeddings", "\n", "#return getattr(self, layer)(*feature_embeddings)", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia.calculate_logits": [[300, 302], ["pythia.Pythia.classifier"], "methods", ["None"], ["", "def", "calculate_logits", "(", "self", ",", "joint_embedding", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "classifier", "(", "joint_embedding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia.compute_grad_cam": [[303, 342], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "range", "range"], "methods", ["None"], ["", "def", "compute_grad_cam", "(", "self", ",", "sample_list", ",", "model_output", ",", "question", "=", "None", ")", ":", "\n", "#pdb.set_trace()", "\n", "#pdb.set_trace()", "\n", "        ", "if", "question", "==", "\"main\"", ":", "\n", "#self.importance_vectors_reas = []", "\n", "            ", "scores", "=", "model_output", "[", "'scores'", "]", "\n", "classes", "=", "sample_list", "[", "'gt_answer_index'", "]", "\n", "classes_one_hot", "=", "torch", ".", "zeros_like", "(", "scores", ")", "\n", "classes_one_hot", "[", "range", "(", "classes_one_hot", ".", "shape", "[", "0", "]", ")", ",", "classes", "]", "=", "1", "\n", "#grads = torch.autograd.grad(outputs = scores, inputs = self.joint_embedding, grad_outputs = classes_one_hot, create_graph=True)[0].to(self.device)", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "scores", ",", "inputs", "=", "self", ".", "joint_embedding", ",", "grad_outputs", "=", "classes_one_hot", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "importance_vectors_cam", "=", "grads", "*", "self", ".", "joint_embedding", "\n", "#self.importance_vectors_reas.append(self.question_embedding)", "\n", "#pdb.set_trace()", "\n", "self", ".", "importance_vectors_reas", "=", "importance_vectors_cam", "\n", "#self.importance_vectors_reas.append(torch.cat((importance_vectors_cam, self.question_embedding), 1))", "\n", "", "elif", "question", "==", "\"sq\"", ":", "\n", "#self.importance_vectors_sq = []", "\n", "            ", "scores", "=", "model_output", "[", "'scores_sq'", "]", "\n", "classes", "=", "sample_list", "[", "'gt_answer_index_sq'", "]", "\n", "classes_one_hot", "=", "torch", ".", "zeros_like", "(", "scores", ")", "\n", "classes_one_hot", "[", "range", "(", "classes_one_hot", ".", "shape", "[", "0", "]", ")", ",", "classes", "]", "=", "1", "\n", "#grads = torch.autograd.grad(outputs = scores, inputs = self.joint_embedding_sq, grad_outputs = classes_one_hot, create_graph=True)[0].to(self.device)", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "scores", ",", "inputs", "=", "self", ".", "joint_embedding_sq", ",", "grad_outputs", "=", "classes_one_hot", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "importance_vectors_cam", "=", "grads", "*", "self", ".", "joint_embedding_sq", "\n", "#self.importance_vectors_sq.append(self.question_embedding_sq)", "\n", "self", ".", "importance_vectors_sq", "=", "importance_vectors_cam", "\n", "#self.importance_vectors_sq.append(torch.cat((importance_vectors_cam, self.question_embedding_sq), 1))", "\n", "", "elif", "question", "==", "\"oq\"", ":", "\n", "#self.importance_vectors_oq = []", "\n", "            ", "scores", "=", "model_output", "[", "'scores_oq'", "]", "\n", "classes", "=", "sample_list", "[", "'gt_answer_index_oq'", "]", "\n", "classes_one_hot", "=", "torch", ".", "zeros_like", "(", "scores", ")", "\n", "classes_one_hot", "[", "range", "(", "classes_one_hot", ".", "shape", "[", "0", "]", ")", ",", "classes", "]", "=", "1", "\n", "#grads = torch.autograd.grad(outputs = scores, inputs = self.joint_embedding_oq, grad_outputs = classes_one_hot, create_graph=True)[0].to(self.device)", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "scores", ",", "inputs", "=", "self", ".", "joint_embedding_oq", ",", "grad_outputs", "=", "classes_one_hot", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "importance_vectors_cam", "=", "grads", "*", "self", ".", "joint_embedding_oq", "\n", "#self.importance_vectors_oq.append(self.question_embedding_oq)", "\n", "self", ".", "importance_vectors_oq", "=", "importance_vectors_cam", "\n", "#self.importance_vectors_oq.append(torch.cat((importance_vectors_cam, self.question_embedding_oq), 1))", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia.cosine_distance": [[344, 353], ["torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "batched_distance_vector.append", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.nn.CosineSimilarity.", "norm_vec_1.unsqueeze", "norm_vec_2.unsqueeze"], "methods", ["None"], ["", "", "def", "cosine_distance", "(", "self", ",", "vec_1", ",", "vec_2", ")", ":", "\n", "        ", "batched_distance_vector", "=", "[", "]", "\n", "cos_similarity", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ",", "eps", "=", "1e-6", ")", "\n", "for", "i", "in", "range", "(", "vec_1", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "norm_vec_1", "=", "vec_1", "[", "i", "]", "/", "torch", ".", "max", "(", "vec_1", "[", "i", "]", ")", "\n", "norm_vec_2", "=", "vec_2", "[", "i", "]", "/", "torch", ".", "max", "(", "vec_2", "[", "i", "]", ")", "\n", "distance", "=", "1", "-", "cos_similarity", "(", "norm_vec_1", ".", "unsqueeze", "(", "0", ")", ",", "norm_vec_2", ".", "unsqueeze", "(", "0", ")", ")", "\n", "batched_distance_vector", ".", "append", "(", "distance", ")", "\n", "", "return", "torch", ".", "cat", "(", "batched_distance_vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia.compute_distances": [[355, 358], ["pythia.Pythia.cosine_distance", "pythia.Pythia.cosine_distance"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.cosine_distance", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.cosine_distance"], ["", "def", "compute_distances", "(", "self", ",", "sample_list", ",", "model_output", ")", ":", "\n", "        ", "model_output", "[", "'distance_reas_sub'", "]", "=", "self", ".", "cosine_distance", "(", "self", ".", "importance_vectors_reas", ",", "self", ".", "importance_vectors_sq", ")", "\n", "model_output", "[", "'distance_reas_other'", "]", "=", "self", ".", "cosine_distance", "(", "self", ".", "importance_vectors_reas", ",", "self", ".", "importance_vectors_oq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.Pythia.forward": [[360, 428], ["pythia.Pythia.word_embedding", "pythia.Pythia.process_text_embedding", "pythia.Pythia.process_feature_embedding", "pythia.Pythia.combine_embeddings", "pythia.Pythia.word_embedding", "pythia.Pythia.process_text_embedding", "pythia.Pythia.process_feature_embedding", "pythia.Pythia.combine_embeddings", "pythia.Pythia.calculate_logits", "pythia.Pythia.word_embedding", "pythia.Pythia.process_text_embedding", "pythia.Pythia.process_feature_embedding", "pythia.Pythia.combine_embeddings", "pythia.Pythia.calculate_logits", "pythia.Pythia.compute_grad_cam", "pythia.Pythia.compute_grad_cam", "pythia.Pythia.compute_grad_cam", "pythia.Pythia.compute_distances", "pythia.Pythia.inter_model", "pythia.Pythia.calculate_logits"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.combine_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.combine_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.calculate_logits", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.combine_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.calculate_logits", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.compute_grad_cam", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.compute_grad_cam", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.compute_grad_cam", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.compute_distances", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.calculate_logits"], ["", "def", "forward", "(", "self", ",", "sample_list", ")", ":", "\n", "# Compute the scores for the reasoning question", "\n", "        ", "sample_list", ".", "text", "=", "self", ".", "word_embedding", "(", "sample_list", ".", "text", ")", "\n", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "sample_list", ")", "\n", "\n", "image_embedding_total", ",", "_", "=", "self", ".", "process_feature_embedding", "(", "\n", "\"image\"", ",", "sample_list", ",", "text_embedding_total", "\n", ")", "\n", "\n", "if", "self", ".", "inter_model", "is", "not", "None", ":", "\n", "            ", "image_embedding_total", "=", "self", ".", "inter_model", "(", "image_embedding_total", ")", "\n", "\n", "", "joint_embedding", "=", "self", ".", "combine_embeddings", "(", "\n", "[", "\"image\"", ",", "\"text\"", "]", ",", "[", "image_embedding_total", ",", "text_embedding_total", "]", ",", "\"main\"", "\n", ")", "\n", "#pdb.set_trace()", "\n", "\n", "self", ".", "joint_embedding", "=", "joint_embedding", "\n", "\n", "model_output", "=", "{", "\"scores\"", ":", "self", ".", "calculate_logits", "(", "joint_embedding", ")", "}", "\n", "\n", "# Compute the scores for the sub-question", "\n", "\n", "sample_list", ".", "text_sq", "=", "self", ".", "word_embedding", "(", "sample_list", ".", "text_sq", ")", "\n", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "sample_list", ",", "info", "=", "\"sub_question\"", ")", "\n", "image_embedding_total", ",", "_", "=", "self", ".", "process_feature_embedding", "(", "\n", "\"image\"", ",", "sample_list", ",", "text_embedding_total", "\n", ")", "\n", "joint_embedding_sq", "=", "self", ".", "combine_embeddings", "(", "\n", "[", "\"image\"", ",", "\"text\"", "]", ",", "[", "image_embedding_total", ",", "text_embedding_total", "]", ",", "\"sub_question\"", "\n", ")", "\n", "self", ".", "joint_embedding_sq", "=", "joint_embedding_sq", "\n", "model_output", "[", "\"scores_sq\"", "]", "=", "self", ".", "calculate_logits", "(", "joint_embedding_sq", ")", "\n", "\n", "sample_list", ".", "text_oq", "=", "self", ".", "word_embedding", "(", "sample_list", ".", "text_oq", ")", "\n", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "sample_list", ",", "info", "=", "\"other_question\"", ")", "\n", "image_embedding_total", ",", "_", "=", "self", ".", "process_feature_embedding", "(", "\n", "\"image\"", ",", "sample_list", ",", "text_embedding_total", "\n", ")", "\n", "joint_embedding_oq", "=", "self", ".", "combine_embeddings", "(", "\n", "[", "\"image\"", ",", "\"text\"", "]", ",", "[", "image_embedding_total", ",", "text_embedding_total", "]", ",", "\"other_question\"", "\n", ")", "\n", "self", ".", "joint_embedding_oq", "=", "joint_embedding_oq", "\n", "model_output", "[", "\"scores_oq\"", "]", "=", "self", ".", "calculate_logits", "(", "joint_embedding_oq", ")", "\n", "self", ".", "compute_grad_cam", "(", "sample_list", ",", "model_output", ",", "question", "=", "\"main\"", ")", "\n", "self", ".", "compute_grad_cam", "(", "sample_list", ",", "model_output", ",", "question", "=", "\"sq\"", ")", "\n", "self", ".", "compute_grad_cam", "(", "sample_list", ",", "model_output", ",", "question", "=", "\"oq\"", ")", "\n", "\n", "self", ".", "compute_distances", "(", "sample_list", ",", "model_output", ")", "\n", "#self.compute_grad_cam()", "\n", "#pdb.set_trace()", "\n", "\n", "#image_embedding_total, _ = self.process_feature_embedding(", "\n", "#    \"image\", sample_list, text_embedding_total", "\n", "#)", "\n", "\n", "#if self.inter_model is not None:", "\n", "#    image_embedding_total = self.inter_model(image_embedding_total)", "\n", "\n", "#joint_embedding = self.combine_embeddings(", "\n", "#    [\"image\", \"text\"], [image_embedding_total, text_embedding_total]", "\n", "#)", "\n", "\n", "#self.joint_embedding = joint_embedding", "\n", "\n", "#model_output = {\"scores\": self.calculate_logits(joint_embedding)}", "\n", "\n", "return", "model_output", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.PythiaQuestionOnly.__init__": [[433, 435], ["pythia.Pythia.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.PythiaQuestionOnly.forward": [[436, 454], ["pythia.PythiaQuestionOnly.process_text_embedding", "text_embedding_total.new_zeros.new_zeros.new_zeros", "dropout", "linear_text", "text_embedding_total.new_zeros.new_zeros.size", "fa_txt", "f_o_text"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding"], ["", "def", "forward", "(", "self", ",", "sample_list", ")", ":", "\n", "        ", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "sample_list", ")", "\n", "text_embedding_total", "=", "text_embedding_total", ".", "new_zeros", "(", "\n", "text_embedding_total", ".", "size", "(", ")", "\n", ")", "\n", "\n", "fa_txt", "=", "self", ".", "image_text_multi_modal_combine_layer", ".", "module", ".", "fa_txt", "\n", "dropout", "=", "self", ".", "image_text_multi_modal_combine_layer", ".", "module", ".", "dropout", "\n", "\n", "joint_embedding", "=", "dropout", "(", "fa_txt", "(", "text_embedding_total", ")", ")", "\n", "\n", "linear_text", "=", "self", ".", "classifier", ".", "module", ".", "linear_text", "\n", "f_o_text", "=", "self", ".", "classifier", ".", "module", ".", "f_o_text", "\n", "scores", "=", "linear_text", "(", "f_o_text", "(", "joint_embedding", ")", ")", "\n", "\n", "model_output", "=", "{", "\"scores\"", ":", "scores", "}", "\n", "\n", "return", "model_output", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.PythiaImageOnly.__init__": [[459, 461], ["pythia.Pythia.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia.PythiaImageOnly.forward": [[462, 483], ["pythia.PythiaImageOnly.process_text_embedding", "text_embedding_total.new_zeros.new_zeros.new_zeros", "pythia.PythiaImageOnly.process_feature_embedding", "dropout", "text_embedding_total.new_zeros.new_zeros.size", "pythia.PythiaImageOnly.inter_model", "fa_image", "pythia.PythiaImageOnly.calculate_logits"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.calculate_logits"], ["", "def", "forward", "(", "self", ",", "sample_list", ")", ":", "\n", "        ", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "sample_list", ")", "\n", "text_embedding_total", "=", "text_embedding_total", ".", "new_zeros", "(", "\n", "text_embedding_total", ".", "size", "(", ")", "\n", ")", "\n", "\n", "image_embedding_total", ",", "_", "=", "self", ".", "process_feature_embedding", "(", "\n", "\"image\"", ",", "sample_list", ",", "text_embedding_total", "\n", ")", "\n", "\n", "if", "self", ".", "inter_model", "is", "not", "None", ":", "\n", "            ", "image_embedding_total", "=", "self", ".", "inter_model", "(", "image_embedding_total", ")", "\n", "\n", "", "fa_image", "=", "self", ".", "image_text_multi_modal_combine_layer", ".", "module", ".", "fa_image", "\n", "dropout", "=", "self", ".", "image_text_multi_modal_combine_layer", ".", "module", ".", "dropout", "\n", "\n", "joint_embedding", "=", "dropout", "(", "fa_image", "(", "image_embedding_total", ")", ")", "\n", "\n", "model_output", "=", "{", "\"scores\"", ":", "self", ".", "calculate_logits", "(", "joint_embedding", ")", "}", "\n", "\n", "return", "model_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.lorra.LoRRA.__init__": [[11, 13], ["pythia.models.pythia.Pythia.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.lorra.LoRRA.build": [[14, 24], ["lorra.LoRRA._init_text_embeddings", "lorra.LoRRA._init_text_embeddings", "lorra.LoRRA._init_feature_encoders", "lorra.LoRRA._init_feature_embeddings", "super().build"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_text_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_text_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_feature_encoders", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_feature_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.build"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "_init_text_embeddings", "(", "\"text\"", ")", "\n", "# For LoRRA context feature and text embeddings would be identity", "\n", "# but to keep a unified API, we will init them also", "\n", "# and we need to build them first before building pythia's other", "\n", "# modules as some of the modules require context attributes to be set", "\n", "self", ".", "_init_text_embeddings", "(", "\"context\"", ")", "\n", "self", ".", "_init_feature_encoders", "(", "\"context\"", ")", "\n", "self", ".", "_init_feature_embeddings", "(", "\"context\"", ")", "\n", "super", "(", ")", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.lorra.LoRRA.get_optimizer_parameters": [[25, 34], ["super().get_optimizer_parameters", "lorra.LoRRA.context_feature_embeddings_list.parameters", "lorra.LoRRA.context_embeddings.parameters", "lorra.LoRRA.context_feature_encoders.parameters"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.get_optimizer_parameters"], ["", "def", "get_optimizer_parameters", "(", "self", ",", "config", ")", ":", "\n", "        ", "params", "=", "super", "(", ")", ".", "get_optimizer_parameters", "(", "config", ")", "\n", "params", "+=", "[", "\n", "{", "\"params\"", ":", "self", ".", "context_feature_embeddings_list", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "context_embeddings", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "context_feature_encoders", ".", "parameters", "(", ")", "}", ",", "\n", "]", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.lorra.LoRRA._get_classifier_input_dim": [[35, 39], ["super()._get_classifier_input_dim"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._get_classifier_input_dim"], ["", "def", "_get_classifier_input_dim", "(", "self", ")", ":", "\n", "# Now, the classifier's input will be cat of image and context based", "\n", "# features", "\n", "        ", "return", "2", "*", "super", "(", ")", ".", "_get_classifier_input_dim", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.lorra.LoRRA.forward": [[40, 63], ["lorra.LoRRA.word_embedding", "lorra.LoRRA.process_text_embedding", "lorra.LoRRA.process_feature_embedding", "lorra.LoRRA.process_feature_embedding", "lorra.LoRRA.combine_embeddings", "lorra.LoRRA.calculate_logits", "lorra.LoRRA.inter_model"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.combine_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.calculate_logits"], ["", "def", "forward", "(", "self", ",", "sample_list", ")", ":", "\n", "        ", "sample_list", ".", "text", "=", "self", ".", "word_embedding", "(", "sample_list", ".", "text", ")", "\n", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "sample_list", ")", "\n", "\n", "image_embedding_total", ",", "_", "=", "self", ".", "process_feature_embedding", "(", "\n", "\"image\"", ",", "sample_list", ",", "text_embedding_total", "\n", ")", "\n", "\n", "context_embedding_total", ",", "_", "=", "self", ".", "process_feature_embedding", "(", "\n", "\"context\"", ",", "sample_list", ",", "text_embedding_total", ",", "[", "\"order_vectors\"", "]", "\n", ")", "\n", "\n", "if", "self", ".", "inter_model", "is", "not", "None", ":", "\n", "            ", "image_embedding_total", "=", "self", ".", "inter_model", "(", "image_embedding_total", ")", "\n", "\n", "", "joint_embedding", "=", "self", ".", "combine_embeddings", "(", "\n", "[", "\"image\"", ",", "\"text\"", "]", ",", "\n", "[", "image_embedding_total", ",", "text_embedding_total", ",", "context_embedding_total", "]", ",", "\n", ")", "\n", "\n", "scores", "=", "self", ".", "calculate_logits", "(", "joint_embedding", ")", "\n", "\n", "return", "{", "\"scores\"", ":", "scores", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.visdial_multi_modal.VisDialMultiModalModel.__init__": [[9, 11], ["pythia.models.pythia.Pythia.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.visdial_multi_modal.VisDialMultiModalModel.build": [[12, 19], ["visdial_multi_modal.VisDialMultiModalModel._init_text_embedding", "visdial_multi_modal.VisDialMultiModalModel._init_image_encoders", "visdial_multi_modal.VisDialMultiModalModel._init_image_embeddings", "visdial_multi_modal.VisDialMultiModalModel._init_combine_layer", "visdial_multi_modal.VisDialMultiModalModel._init_decoder", "visdial_multi_modal.VisDialMultiModalModel._init_extras"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._init_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_combine_layer", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.visdial_multi_modal.VisDialMultiModalModel._init_decoder", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_extras"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "_init_text_embedding", "(", ")", "\n", "self", ".", "_init_image_encoders", "(", ")", "\n", "self", ".", "_init_image_embeddings", "(", ")", "\n", "self", ".", "_init_combine_layer", "(", ")", "\n", "self", ".", "_init_decoder", "(", ")", "\n", "self", ".", "_init_extras", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.visdial_multi_modal.VisDialMultiModalModel._init_text_embedding": [[20, 24], ["super._init_text_embedding", "super._init_text_embedding"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._init_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._init_text_embedding"], ["", "def", "_init_text_embedding", "(", "self", ")", ":", "\n", "        ", "parent", "=", "super", "(", "VisDialMultiModalModel", ",", "self", ")", "\n", "parent", ".", "_init_text_embedding", "(", "\"text_embeddings\"", ",", "False", ")", "\n", "parent", ".", "_init_text_embedding", "(", "\"history_embeddings\"", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.visdial_multi_modal.VisDialMultiModalModel.get_optimizer_parameters": [[25, 39], ["visdial_multi_modal.VisDialMultiModalModel.img_embeddings_list.parameters", "visdial_multi_modal.VisDialMultiModalModel.text_embeddings.parameters", "visdial_multi_modal.VisDialMultiModalModel.multi_modal_combine_layer.parameters", "visdial_multi_modal.VisDialMultiModalModel.decoder.projection_layer.parameters", "visdial_multi_modal.VisDialMultiModalModel.img_feat_encoders.parameters"], "methods", ["None"], ["", "def", "get_optimizer_parameters", "(", "self", ",", "config", ")", ":", "\n", "# TODO: Update after implementing decoder", "\n", "        ", "params", "=", "[", "\n", "{", "\"params\"", ":", "self", ".", "img_embeddings_list", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "text_embeddings", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "multi_modal_combine_layer", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "decoder", ".", "projection_layer", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\n", "\"params\"", ":", "self", ".", "img_feat_encoders", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "(", "config", "[", "\"optimizer_attributes\"", "]", "[", "\"params\"", "]", "[", "\"lr\"", "]", "*", "0.1", ")", ",", "\n", "}", ",", "\n", "]", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.visdial_multi_modal.VisDialMultiModalModel._update_text_embedding_args": [[40, 45], ["super._update_text_embedding_args"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._update_text_embedding_args"], ["", "def", "_update_text_embedding_args", "(", "self", ",", "args", ")", ":", "\n", "        ", "parent", "=", "super", "(", "VisDialMultiModalModel", ",", "self", ")", "\n", "parent", ".", "_update_text_embedding_args", "(", "args", ")", "\n", "# Add embedding vectors to args", "\n", "args", "[", "\"embedding_vectors\"", "]", "=", "self", ".", "config", "[", "\"embedding_vectors\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.visdial_multi_modal.VisDialMultiModalModel._init_decoder": [[46, 53], ["pythia.modules.decoders.VisDialDiscriminator"], "methods", ["None"], ["", "def", "_init_decoder", "(", "self", ")", ":", "\n", "        ", "embedding", "=", "self", ".", "text_embeddings", "[", "0", "]", ".", "module", "\n", "embedding_dim", "=", "self", ".", "text_embeddings", "[", "0", "]", ".", "embedding_dim", "\n", "hidden_dim", "=", "self", ".", "multi_modal_combine_layer", ".", "out_dim", "\n", "\n", "self", ".", "decoder", "=", "VisDialDiscriminator", "(", "\n", "{", "\"embedding_dim\"", ":", "embedding_dim", ",", "\"hidden_dim\"", ":", "hidden_dim", "}", ",", "embedding", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.visdial_multi_modal.VisDialMultiModalModel.combine_embeddings": [[55, 57], ["visdial_multi_modal.VisDialMultiModalModel.multi_modal_combine_layer"], "methods", ["None"], ["", "def", "combine_embeddings", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "return", "self", ".", "multi_modal_combine_layer", "(", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.visdial_multi_modal.VisDialMultiModalModel.calculate_logits": [[58, 60], ["visdial_multi_modal.VisDialMultiModalModel.decoder"], "methods", ["None"], ["", "def", "calculate_logits", "(", "self", ",", "joint_embedding", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "decoder", "(", "joint_embedding", ",", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.visdial_multi_modal.VisDialMultiModalModel.forward": [[61, 98], ["texts.view.view.view", "histories.view.view.view", "visdial_multi_modal.VisDialMultiModalModel.process_text_embedding", "visdial_multi_modal.VisDialMultiModalModel.process_text_embedding", "enumerate", "image_dims.view.view.view", "visdial_multi_modal.VisDialMultiModalModel.process_image_embedding", "visdial_multi_modal.VisDialMultiModalModel.combine_embeddings", "visdial_multi_modal.VisDialMultiModalModel.calculate_logits", "texts.view.view.size", "histories.view.view.size", "image_feature.view", "image_dims.view.view.size", "len", "len", "visdial_multi_modal.VisDialMultiModalModel.inter_model", "image_feature.size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.combine_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.calculate_logits"], ["", "def", "forward", "(", "\n", "self", ",", "texts", ",", "answer_options", ",", "histories", ",", "image_features", ",", "image_dims", ",", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "texts", "=", "texts", ".", "view", "(", "-", "1", ",", "texts", ".", "size", "(", "2", ")", ")", "\n", "histories", "=", "histories", ".", "view", "(", "-", "1", ",", "histories", ".", "size", "(", "2", ")", ")", "\n", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "texts", ")", "\n", "histories_total", "=", "self", ".", "process_text_embedding", "(", "histories", ",", "\"history_embeddings\"", ")", "\n", "\n", "for", "idx", ",", "image_feature", "in", "enumerate", "(", "image_features", ")", ":", "\n", "            ", "feature_size", "=", "image_feature", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "image_features", "[", "idx", "]", "=", "image_feature", ".", "view", "(", "-", "1", ",", "*", "feature_size", ")", "\n", "\n", "", "size", "=", "image_dims", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "image_dims", "=", "image_dims", ".", "view", "(", "-", "1", ",", "*", "size", ")", "\n", "\n", "assert", "len", "(", "image_features", ")", "==", "len", "(", "\n", "self", ".", "img_feat_encoders", "\n", ")", ",", "\"number of image feature model doesnot equal \\\n                 to number of image features\"", "\n", "\n", "image_embedding_total", "=", "self", ".", "process_image_embedding", "(", "\n", "image_features", ",", "image_dims", ",", "text_embedding_total", "\n", ")", "\n", "\n", "if", "self", ".", "inter_model", "is", "not", "None", ":", "\n", "            ", "image_embedding_total", "=", "self", ".", "inter_model", "(", "image_embedding_total", ")", "\n", "\n", "", "joint_embedding", "=", "self", ".", "combine_embeddings", "(", "\n", "image_embedding_total", ",", "text_embedding_total", ",", "histories_total", "\n", ")", "\n", "\n", "decoder_info", "=", "{", "\n", "\"answer_options\"", ":", "answer_options", ",", "\n", "\"answer_options_len\"", ":", "kwargs", "[", "\"answer_options_len\"", "]", ",", "\n", "}", "\n", "return", "self", ".", "calculate_logits", "(", "joint_embedding", ",", "**", "decoder_info", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.__init__": [[21, 26], ["pythia.models.base_model.BaseModel.__init__", "pythia.common.registry.registry.get", "pythia_introspect.PythiaIntrospect._global_config.datasets.split"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "_global_config", "=", "registry", ".", "get", "(", "\"config\"", ")", "\n", "self", ".", "_datasets", "=", "self", ".", "_global_config", ".", "datasets", ".", "split", "(", "\",\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.build": [[27, 35], ["pythia_introspect.PythiaIntrospect._build_word_embedding", "pythia_introspect.PythiaIntrospect._init_text_embeddings", "pythia_introspect.PythiaIntrospect._init_feature_encoders", "pythia_introspect.PythiaIntrospect._init_feature_embeddings", "pythia_introspect.PythiaIntrospect._init_combine_layer", "pythia_introspect.PythiaIntrospect._init_classifier", "pythia_introspect.PythiaIntrospect._init_extras", "pythia_introspect.PythiaIntrospect._get_classifier_input_dim"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._build_word_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_text_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_feature_encoders", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_feature_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_combine_layer", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._init_classifier", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_extras", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._get_classifier_input_dim"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "_build_word_embedding", "(", ")", "\n", "self", ".", "_init_text_embeddings", "(", "\"text\"", ")", "\n", "self", ".", "_init_feature_encoders", "(", "\"image\"", ")", "\n", "self", ".", "_init_feature_embeddings", "(", "\"image\"", ")", "\n", "self", ".", "_init_combine_layer", "(", "\"image\"", ",", "\"text\"", ")", "\n", "self", ".", "_init_classifier", "(", "self", ".", "_get_classifier_input_dim", "(", ")", ")", "\n", "self", ".", "_init_extras", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._build_word_embedding": [[36, 41], ["pythia.common.registry.registry.get", "vocab.get_embedding", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_embedding"], ["", "def", "_build_word_embedding", "(", "self", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "_datasets", ")", ">", "0", "\n", "text_processor", "=", "registry", ".", "get", "(", "self", ".", "_datasets", "[", "0", "]", "+", "\"_text_processor\"", ")", "\n", "vocab", "=", "text_processor", ".", "vocab", "\n", "self", ".", "word_embedding", "=", "vocab", ".", "get_embedding", "(", "torch", ".", "nn", ".", "Embedding", ",", "embedding_dim", "=", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_text_embeddings": [[42, 64], ["setattr", "setattr", "pythia.utils.configuration.ConfigNode", "pythia_introspect.PythiaIntrospect._update_text_embedding_args", "pythia.modules.embeddings.TextEmbedding", "text_embeddings.append", "torch.nn.ModuleList", "torch.nn.ModuleList"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._update_text_embedding_args"], ["", "def", "_init_text_embeddings", "(", "self", ",", "attr", "=", "\"text\"", ")", ":", "\n", "        ", "if", "\"embeddings\"", "not", "in", "attr", ":", "\n", "            ", "attr", "+=", "\"_embeddings\"", "\n", "\n", "", "text_embeddings", "=", "[", "]", "\n", "text_embeddings_list_config", "=", "self", ".", "config", "[", "attr", "]", "\n", "\n", "embeddings_out_dim", "=", "0", "\n", "\n", "for", "text_embedding", "in", "text_embeddings_list_config", ":", "\n", "            ", "embedding_type", "=", "text_embedding", ".", "type", "\n", "embedding_kwargs", "=", "ConfigNode", "(", "text_embedding", ".", "params", ")", "\n", "\n", "self", ".", "_update_text_embedding_args", "(", "embedding_kwargs", ")", "\n", "\n", "embedding", "=", "TextEmbedding", "(", "embedding_type", ",", "**", "embedding_kwargs", ")", "\n", "\n", "text_embeddings", ".", "append", "(", "embedding", ")", "\n", "embeddings_out_dim", "+=", "embedding", ".", "text_out_dim", "\n", "\n", "", "setattr", "(", "self", ",", "attr", "+", "\"_out_dim\"", ",", "embeddings_out_dim", ")", "\n", "setattr", "(", "self", ",", "attr", ",", "nn", ".", "ModuleList", "(", "text_embeddings", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._update_text_embedding_args": [[65, 68], ["None"], "methods", ["None"], ["", "def", "_update_text_embedding_args", "(", "self", ",", "args", ")", ":", "\n", "# Add model_data_dir to kwargs", "\n", "        ", "args", "[", "\"model_data_dir\"", "]", "=", "self", ".", "config", "[", "\"model_data_dir\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_feature_encoders": [[69, 86], ["setattr", "setattr", "pythia.modules.encoders.ImageEncoder", "feat_encoders.append", "setattr", "torch.nn.ModuleList", "torch.nn.ModuleList"], "methods", ["None"], ["", "def", "_init_feature_encoders", "(", "self", ",", "attr", ")", ":", "\n", "        ", "feat_encoders", "=", "[", "]", "\n", "feat_encoders_list_config", "=", "self", ".", "config", "[", "attr", "+", "\"_feature_encodings\"", "]", "\n", "feature_dim", "=", "self", ".", "config", "[", "attr", "+", "\"_feature_dim\"", "]", "\n", "setattr", "(", "self", ",", "attr", "+", "\"_feature_dim\"", ",", "feature_dim", ")", "\n", "\n", "for", "feat_encoder", "in", "feat_encoders_list_config", ":", "\n", "            ", "encoder_type", "=", "feat_encoder", "[", "\"type\"", "]", "\n", "encoder_kwargs", "=", "feat_encoder", "[", "\"params\"", "]", "\n", "encoder_kwargs", "[", "\"model_data_dir\"", "]", "=", "self", ".", "config", "[", "\"model_data_dir\"", "]", "\n", "\n", "feat_model", "=", "ImageEncoder", "(", "encoder_type", ",", "feature_dim", ",", "**", "encoder_kwargs", ")", "\n", "\n", "feat_encoders", ".", "append", "(", "feat_model", ")", "\n", "setattr", "(", "self", ",", "attr", "+", "\"_feature_dim\"", ",", "feat_model", ".", "out_dim", ")", "\n", "\n", "", "setattr", "(", "self", ",", "attr", "+", "\"_feature_encoders\"", ",", "nn", ".", "ModuleList", "(", "feat_encoders", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_feature_embeddings": [[87, 121], ["len", "range", "getattr", "setattr", "setattr", "getattr", "torch.nn.ModuleList", "torch.nn.ModuleList", "feature_embeddings_list.append", "torch.nn.ModuleList", "torch.nn.ModuleList", "pythia.modules.embeddings.ImageEmbedding", "torch.nn.ModuleList.append", "getattr"], "methods", ["None"], ["", "def", "_init_feature_embeddings", "(", "self", ",", "attr", ")", ":", "\n", "        ", "feature_embeddings_list", "=", "[", "]", "\n", "num_feature_feat", "=", "len", "(", "\n", "getattr", "(", "self", ".", "config", ",", "\"{}_feature_encodings\"", ".", "format", "(", "attr", ")", ")", "\n", ")", "\n", "\n", "self", ".", "feature_embeddings_out_dim", "=", "0", "\n", "\n", "for", "_", "in", "range", "(", "num_feature_feat", ")", ":", "\n", "            ", "feature_embeddings", "=", "[", "]", "\n", "feature_attn_model_list", "=", "self", ".", "config", "[", "attr", "+", "\"_feature_embeddings\"", "]", "\n", "\n", "for", "feature_attn_model_params", "in", "feature_attn_model_list", ":", "\n", "                ", "feature_embedding", "=", "ImageEmbedding", "(", "\n", "getattr", "(", "self", ",", "attr", "+", "\"_feature_dim\"", ")", ",", "\n", "self", ".", "text_embeddings_out_dim", ",", "\n", "**", "feature_attn_model_params", "\n", ")", "\n", "feature_embeddings", ".", "append", "(", "feature_embedding", ")", "\n", "self", ".", "feature_embeddings_out_dim", "+=", "feature_embedding", ".", "out_dim", "\n", "\n", "", "feature_embeddings", "=", "nn", ".", "ModuleList", "(", "feature_embeddings", ")", "\n", "feature_embeddings_list", ".", "append", "(", "feature_embeddings", ")", "\n", "\n", "", "self", ".", "feature_embeddings_out_dim", "*=", "getattr", "(", "self", ",", "attr", "+", "\"_feature_dim\"", ")", "\n", "\n", "setattr", "(", "\n", "self", ",", "attr", "+", "\"_feature_embeddings_out_dim\"", ",", "self", ".", "feature_embeddings_out_dim", "\n", ")", "\n", "del", "self", ".", "feature_embeddings_out_dim", "\n", "setattr", "(", "\n", "self", ",", "\n", "attr", "+", "\"_feature_embeddings_list\"", ",", "\n", "nn", ".", "ModuleList", "(", "feature_embeddings_list", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._get_embeddings_attr": [[123, 131], ["hasattr"], "methods", ["None"], ["", "def", "_get_embeddings_attr", "(", "self", ",", "attr", ")", ":", "\n", "        ", "embedding_attr1", "=", "attr", "\n", "if", "hasattr", "(", "self", ",", "attr", "+", "\"_embeddings_out_dim\"", ")", ":", "\n", "            ", "embedding_attr1", "=", "attr", "+", "\"_embeddings_out_dim\"", "\n", "", "else", ":", "\n", "            ", "embedding_attr1", "=", "attr", "+", "\"_feature_embeddings_out_dim\"", "\n", "\n", "", "return", "embedding_attr1", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_combine_layer": [[132, 146], ["pythia.modules.layers.ModalCombineLayer", "setattr", "getattr", "getattr", "pythia_introspect.PythiaIntrospect._get_embeddings_attr", "pythia_introspect.PythiaIntrospect._get_embeddings_attr"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._get_embeddings_attr", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._get_embeddings_attr"], ["", "def", "_init_combine_layer", "(", "self", ",", "attr1", ",", "attr2", ")", ":", "\n", "        ", "config_attr", "=", "attr1", "+", "\"_\"", "+", "attr2", "+", "\"_modal_combine\"", "\n", "\n", "multi_modal_combine_layer", "=", "ModalCombineLayer", "(", "\n", "self", ".", "config", "[", "config_attr", "]", "[", "\"type\"", "]", ",", "\n", "getattr", "(", "self", ",", "self", ".", "_get_embeddings_attr", "(", "attr1", ")", ")", ",", "\n", "getattr", "(", "self", ",", "self", ".", "_get_embeddings_attr", "(", "attr2", ")", ")", ",", "\n", "**", "self", ".", "config", "[", "config_attr", "]", "[", "\"params\"", "]", "\n", ")", "\n", "\n", "setattr", "(", "\n", "self", ",", "\n", "attr1", "+", "\"_\"", "+", "attr2", "+", "\"_multi_modal_combine_layer\"", ",", "\n", "multi_modal_combine_layer", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_classifier": [[148, 157], ["pythia.common.registry.registry.get", "pythia.modules.layers.ClassifierLayer"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "def", "_init_classifier", "(", "self", ",", "combined_embedding_dim", ")", ":", "\n", "# TODO: Later support multihead", "\n", "        ", "num_choices", "=", "registry", ".", "get", "(", "self", ".", "_datasets", "[", "0", "]", "+", "\"_num_final_outputs\"", ")", "\n", "\n", "self", ".", "classifier", "=", "ClassifierLayer", "(", "\n", "self", ".", "config", "[", "\"classifier\"", "]", "[", "\"type\"", "]", ",", "\n", "in_dim", "=", "combined_embedding_dim", ",", "\n", "out_dim", "=", "num_choices", ",", "\n", "**", "self", ".", "config", "[", "\"classifier\"", "]", "[", "\"params\"", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._init_extras": [[159, 161], ["None"], "methods", ["None"], ["", "def", "_init_extras", "(", "self", ")", ":", "\n", "        ", "self", ".", "inter_model", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.get_optimizer_parameters": [[162, 177], ["pythia_introspect.PythiaIntrospect.word_embedding.parameters", "pythia_introspect.PythiaIntrospect.image_feature_embeddings_list.parameters", "pythia_introspect.PythiaIntrospect.text_embeddings.parameters", "combine_layer.parameters", "pythia_introspect.PythiaIntrospect.classifier.parameters", "pythia_introspect.PythiaIntrospect.image_feature_encoders.parameters"], "methods", ["None"], ["", "def", "get_optimizer_parameters", "(", "self", ",", "config", ")", ":", "\n", "        ", "combine_layer", "=", "self", ".", "image_text_multi_modal_combine_layer", "\n", "params", "=", "[", "\n", "{", "\"params\"", ":", "self", ".", "word_embedding", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "image_feature_embeddings_list", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "text_embeddings", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "combine_layer", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\"params\"", ":", "self", ".", "classifier", ".", "parameters", "(", ")", "}", ",", "\n", "{", "\n", "\"params\"", ":", "self", ".", "image_feature_encoders", ".", "parameters", "(", ")", ",", "\n", "\"lr\"", ":", "(", "config", "[", "\"optimizer_attributes\"", "]", "[", "\"params\"", "]", "[", "\"lr\"", "]", "*", "0.1", ")", ",", "\n", "}", ",", "\n", "]", "\n", "\n", "return", "params", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect._get_classifier_input_dim": [[178, 180], ["None"], "methods", ["None"], ["", "def", "_get_classifier_input_dim", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "image_text_multi_modal_combine_layer", ".", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding": [[181, 210], ["getattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "getattr", "isinstance", "text_embeddings.append", "getattr", "text_embedding_model", "text_embedding_model", "embedding_attr.split", "getattr", "embedding_attr.split", "embedding_attr.split"], "methods", ["None"], ["", "def", "process_text_embedding", "(", "\n", "self", ",", "sample_list", ",", "embedding_attr", "=", "\"text_embeddings\"", ",", "info", "=", "None", "\n", ")", ":", "\n", "        ", "text_embeddings", "=", "[", "]", "\n", "#pdb.set_trace()", "\n", "\n", "# Get \"text\" attribute in case of \"text_embeddings\" case", "\n", "# and \"context\" attribute in case of \"context_embeddings\"", "\n", "if", "not", "info", ":", "\n", "            ", "texts", "=", "getattr", "(", "sample_list", ",", "embedding_attr", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ")", "\n", "", "elif", "info", "==", "\"sub_question\"", ":", "\n", "            ", "texts", "=", "getattr", "(", "sample_list", ",", "embedding_attr", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "+", "'_sq'", ")", "\n", "", "elif", "info", "==", "\"other_question\"", ":", "\n", "            ", "texts", "=", "getattr", "(", "sample_list", ",", "embedding_attr", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "+", "'_oq'", ")", "\n", "\n", "# Get embedding models", "\n", "", "text_embedding_models", "=", "getattr", "(", "self", ",", "embedding_attr", ")", "\n", "\n", "for", "text_embedding_model", "in", "text_embedding_models", ":", "\n", "# TODO: Move this logic inside", "\n", "            ", "if", "isinstance", "(", "text_embedding_model", ",", "PreExtractedEmbedding", ")", ":", "\n", "                ", "embedding", "=", "text_embedding_model", "(", "sample_list", ".", "question_id", ")", "\n", "", "else", ":", "\n", "                ", "embedding", "=", "text_embedding_model", "(", "texts", ")", "\n", "", "text_embeddings", ".", "append", "(", "embedding", ")", "\n", "\n", "", "text_embeddding_total", "=", "torch", ".", "cat", "(", "text_embeddings", ",", "dim", "=", "1", ")", "\n", "\n", "return", "text_embeddding_total", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding": [[211, 280], ["sample_list.get_fields", "getattr", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sample_list.get_batch_size", "getattr", "features.append", "len", "len", "len", "len", "getattr", "getattr", "feature_encoder", "getattr", "getattr", "feature_embedding_model", "feature_embeddings.append", "feature_attentions.append", "attention.squeeze"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.get_fields", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.get_batch_size"], ["", "def", "process_feature_embedding", "(", "\n", "self", ",", "attr", ",", "sample_list", ",", "text_embedding_total", ",", "extra", "=", "[", "]", ",", "batch_size_t", "=", "None", "\n", ")", ":", "\n", "        ", "feature_embeddings", "=", "[", "]", "\n", "feature_attentions", "=", "[", "]", "\n", "features", "=", "[", "]", "\n", "batch_size_t", "=", "(", "\n", "sample_list", ".", "get_batch_size", "(", ")", "if", "batch_size_t", "is", "None", "else", "batch_size_t", "\n", ")", "\n", "\n", "# Convert list of keys to the actual values", "\n", "extra", "=", "sample_list", ".", "get_fields", "(", "extra", ")", "\n", "\n", "feature_idx", "=", "0", "\n", "\n", "# Get all of the features, which are in the form, \"image_feature_0\"", "\n", "# \"image_feature_1\" ...", "\n", "while", "True", ":", "\n", "            ", "feature", "=", "getattr", "(", "\n", "sample_list", ",", "\"{}_feature_{:d}\"", ".", "format", "(", "attr", ",", "feature_idx", ")", ",", "None", "\n", ")", "\n", "if", "feature", "is", "None", ":", "\n", "                ", "break", "\n", "", "feature_idx", "+=", "1", "\n", "feature", "=", "feature", "[", ":", "batch_size_t", "]", "\n", "features", ".", "append", "(", "feature", ")", "\n", "\n", "", "feature_encoders", "=", "getattr", "(", "self", ",", "attr", "+", "\"_feature_encoders\"", ")", "\n", "# Each feature should have a separate image feature encoders", "\n", "assert", "len", "(", "features", ")", "==", "len", "(", "feature_encoders", ")", ",", "(", "\n", "\"Number of feature encoders, {} are not equal \"", "\n", "\"to number of features, {}.\"", ".", "format", "(", "len", "(", "feature_encoders", ")", ",", "len", "(", "features", ")", ")", "\n", ")", "\n", "\n", "# Now, iterate to get final attended image features", "\n", "for", "i", ",", "feature", "in", "enumerate", "(", "features", ")", ":", "\n", "# Get info related to the current feature. info is generally", "\n", "# in key of format \"image_info_0\" for 0th feature", "\n", "            ", "feature_info", "=", "getattr", "(", "sample_list", ",", "\"{}_info_{:d}\"", ".", "format", "(", "attr", ",", "i", ")", ",", "{", "}", ")", "\n", "# For Pythia, we need max_features to mask attention", "\n", "feature_dim", "=", "getattr", "(", "feature_info", ",", "\"max_features\"", ",", "None", ")", "\n", "if", "feature_dim", "is", "not", "None", ":", "\n", "                ", "feature_dim", "=", "feature_dim", "[", ":", "batch_size_t", "]", "\n", "\n", "# Attribute in which encoders are saved, for \"image\" it", "\n", "# will be \"image_feature_encoders\", other example is", "\n", "# \"context_feature_encoders\"", "\n", "", "encoders_attr", "=", "attr", "+", "\"_feature_encoders\"", "\n", "feature_encoder", "=", "getattr", "(", "self", ",", "encoders_attr", ")", "[", "i", "]", "\n", "\n", "# Encode the features", "\n", "encoded_feature", "=", "feature_encoder", "(", "feature", ")", "\n", "#pdb.set_trace()", "\n", "\n", "# Get all of the feature embeddings", "\n", "list_attr", "=", "attr", "+", "\"_feature_embeddings_list\"", "\n", "feature_embedding_models", "=", "getattr", "(", "self", ",", "list_attr", ")", "[", "i", "]", "\n", "\n", "# Forward through these embeddings one by one", "\n", "for", "feature_embedding_model", "in", "feature_embedding_models", ":", "\n", "                ", "inp", "=", "(", "encoded_feature", ",", "text_embedding_total", ",", "feature_dim", ",", "extra", ")", "\n", "\n", "embedding", ",", "attention", "=", "feature_embedding_model", "(", "*", "inp", ")", "\n", "feature_embeddings", ".", "append", "(", "embedding", ")", "\n", "feature_attentions", ".", "append", "(", "attention", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "\n", "# Concatenate all features embeddings and return along with attention", "\n", "", "", "feature_embedding_total", "=", "torch", ".", "cat", "(", "feature_embeddings", ",", "dim", "=", "1", ")", "\n", "return", "feature_embedding_total", ",", "feature_attentions", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.combine_embeddings": [[281, 296], ["getattr", "getattr."], "methods", ["None"], ["", "def", "combine_embeddings", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "feature_names", "=", "args", "[", "0", "]", "\n", "feature_embeddings", "=", "args", "[", "1", "]", "\n", "\n", "layer", "=", "\"_\"", ".", "join", "(", "feature_names", ")", "+", "\"_multi_modal_combine_layer\"", "\n", "layer_model", "=", "getattr", "(", "self", ",", "layer", ")", "\n", "joint_embeddings", "=", "layer_model", "(", "*", "feature_embeddings", ")", "\n", "if", "args", "[", "2", "]", "==", "\"main\"", ":", "\n", "            ", "self", ".", "question_embedding", "=", "layer_model", ".", "question_embedding", "\n", "", "elif", "args", "[", "2", "]", "==", "\"sub_question\"", ":", "\n", "            ", "self", ".", "question_embedding_sq", "=", "layer_model", ".", "question_embedding", "\n", "", "elif", "args", "[", "2", "]", "==", "\"other_question\"", ":", "\n", "            ", "self", ".", "question_embedding_oq", "=", "layer_model", ".", "question_embedding", "\n", "\n", "", "return", "joint_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.calculate_logits": [[298, 300], ["pythia_introspect.PythiaIntrospect.classifier"], "methods", ["None"], ["", "def", "calculate_logits", "(", "self", ",", "joint_embedding", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "classifier", "(", "joint_embedding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.compute_grad_cam": [[301, 332], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "range", "range"], "methods", ["None"], ["", "def", "compute_grad_cam", "(", "self", ",", "sample_list", ",", "model_output", ",", "question", "=", "None", ")", ":", "\n", "\n", "        ", "if", "question", "==", "\"main\"", ":", "\n", "            ", "scores", "=", "model_output", "[", "'scores'", "]", "\n", "classes", "=", "sample_list", "[", "'gt_answer_index'", "]", "\n", "classes_one_hot", "=", "torch", ".", "zeros_like", "(", "scores", ")", "\n", "classes_one_hot", "[", "range", "(", "classes_one_hot", ".", "shape", "[", "0", "]", ")", ",", "classes", "]", "=", "1", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "scores", ",", "inputs", "=", "self", ".", "joint_embedding", ",", "grad_outputs", "=", "classes_one_hot", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "importance_vectors_cam", "=", "grads", "*", "self", ".", "joint_embedding", "\n", "self", ".", "importance_vectors_reas", "=", "importance_vectors_cam", "\n", "model_output", "[", "\"importance_vectors_reas\"", "]", "=", "importance_vectors_cam", "\n", "\n", "", "elif", "question", "==", "\"sq\"", ":", "\n", "            ", "scores", "=", "model_output", "[", "'scores_sq'", "]", "\n", "classes", "=", "sample_list", "[", "'gt_answer_index_sq'", "]", "\n", "classes_one_hot", "=", "torch", ".", "zeros_like", "(", "scores", ")", "\n", "classes_one_hot", "[", "range", "(", "classes_one_hot", ".", "shape", "[", "0", "]", ")", ",", "classes", "]", "=", "1", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "scores", ",", "inputs", "=", "self", ".", "joint_embedding_sq", ",", "grad_outputs", "=", "classes_one_hot", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "importance_vectors_cam", "=", "grads", "*", "self", ".", "joint_embedding_sq", "\n", "self", ".", "importance_vectors_sq", "=", "importance_vectors_cam", "\n", "model_output", "[", "\"importance_vectors_sq\"", "]", "=", "importance_vectors_cam", "\n", "\n", "", "elif", "question", "==", "\"oq\"", ":", "\n", "            ", "scores", "=", "model_output", "[", "'scores_oq'", "]", "\n", "classes", "=", "sample_list", "[", "'gt_answer_index_oq'", "]", "\n", "classes_one_hot", "=", "torch", ".", "zeros_like", "(", "scores", ")", "\n", "classes_one_hot", "[", "range", "(", "classes_one_hot", ".", "shape", "[", "0", "]", ")", ",", "classes", "]", "=", "1", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "scores", ",", "inputs", "=", "self", ".", "joint_embedding_oq", ",", "grad_outputs", "=", "classes_one_hot", ",", "create_graph", "=", "True", ")", "[", "0", "]", "\n", "importance_vectors_cam", "=", "grads", "*", "self", ".", "joint_embedding_oq", "\n", "self", ".", "importance_vectors_oq", "=", "importance_vectors_cam", "\n", "model_output", "[", "\"importance_vectors_oq\"", "]", "=", "importance_vectors_cam", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.cosine_distance": [[333, 342], ["torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "batched_distance_vector.append", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.nn.CosineSimilarity.", "norm_vec_1.unsqueeze", "norm_vec_2.unsqueeze"], "methods", ["None"], ["", "", "def", "cosine_distance", "(", "self", ",", "vec_1", ",", "vec_2", ")", ":", "\n", "        ", "batched_distance_vector", "=", "[", "]", "\n", "cos_similarity", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ",", "eps", "=", "1e-6", ")", "\n", "for", "i", "in", "range", "(", "vec_1", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "norm_vec_1", "=", "vec_1", "[", "i", "]", "/", "torch", ".", "max", "(", "vec_1", "[", "i", "]", ")", "\n", "norm_vec_2", "=", "vec_2", "[", "i", "]", "/", "torch", ".", "max", "(", "vec_2", "[", "i", "]", ")", "\n", "distance", "=", "1", "-", "cos_similarity", "(", "norm_vec_1", ".", "unsqueeze", "(", "0", ")", ",", "norm_vec_2", ".", "unsqueeze", "(", "0", ")", ")", "\n", "batched_distance_vector", ".", "append", "(", "distance", ")", "\n", "", "return", "torch", ".", "cat", "(", "batched_distance_vector", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.compute_distances": [[344, 347], ["pythia_introspect.PythiaIntrospect.cosine_distance", "pythia_introspect.PythiaIntrospect.cosine_distance"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.cosine_distance", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.cosine_distance"], ["", "def", "compute_distances", "(", "self", ",", "sample_list", ",", "model_output", ")", ":", "\n", "        ", "model_output", "[", "'distance_reas_sub'", "]", "=", "self", ".", "cosine_distance", "(", "self", ".", "importance_vectors_reas", ",", "self", ".", "importance_vectors_sq", ")", "\n", "model_output", "[", "'distance_reas_other'", "]", "=", "self", ".", "cosine_distance", "(", "self", ".", "importance_vectors_reas", ",", "self", ".", "importance_vectors_oq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.forward": [[349, 487], ["pythia_introspect.PythiaIntrospect.word_embedding", "pythia_introspect.PythiaIntrospect.process_text_embedding", "pythia_introspect.PythiaIntrospect.process_feature_embedding", "pythia_introspect.PythiaIntrospect.combine_embeddings", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "pythia_introspect.PythiaIntrospect.inter_model", "pythia_introspect.PythiaIntrospect.calculate_logits", "pythia_introspect.PythiaIntrospect.word_embedding", "pythia_introspect.PythiaIntrospect.process_text_embedding", "pythia_introspect.PythiaIntrospect.process_feature_embedding", "pythia_introspect.PythiaIntrospect.combine_embeddings", "pythia_introspect.PythiaIntrospect.word_embedding", "pythia_introspect.PythiaIntrospect.process_text_embedding", "pythia_introspect.PythiaIntrospect.process_feature_embedding", "pythia_introspect.PythiaIntrospect.combine_embeddings", "pythia_introspect.PythiaIntrospect.calculate_logits", "pythia_introspect.PythiaIntrospect.word_embedding", "pythia_introspect.PythiaIntrospect.process_text_embedding", "pythia_introspect.PythiaIntrospect.process_feature_embedding", "pythia_introspect.PythiaIntrospect.combine_embeddings", "pythia_introspect.PythiaIntrospect.calculate_logits", "pythia_introspect.PythiaIntrospect.compute_grad_cam", "pythia_introspect.PythiaIntrospect.compute_grad_cam", "pythia_introspect.PythiaIntrospect.compute_grad_cam", "pythia_introspect.PythiaIntrospect.compute_distances", "pythia_introspect.PythiaIntrospect.word_embedding", "pythia_introspect.PythiaIntrospect.process_text_embedding", "pythia_introspect.PythiaIntrospect.process_feature_embedding", "pythia_introspect.PythiaIntrospect.combine_embeddings", "pythia_introspect.PythiaIntrospect.word_embedding", "pythia_introspect.PythiaIntrospect.process_text_embedding", "pythia_introspect.PythiaIntrospect.process_feature_embedding", "pythia_introspect.PythiaIntrospect.combine_embeddings", "pythia_introspect.PythiaIntrospect.calculate_logits", "pythia_introspect.PythiaIntrospect.word_embedding", "pythia_introspect.PythiaIntrospect.process_text_embedding", "pythia_introspect.PythiaIntrospect.process_feature_embedding", "pythia_introspect.PythiaIntrospect.combine_embeddings", "pythia_introspect.PythiaIntrospect.calculate_logits", "pythia_introspect.PythiaIntrospect.compute_grad_cam", "pythia_introspect.PythiaIntrospect.compute_grad_cam", "pythia_introspect.PythiaIntrospect.compute_grad_cam", "pythia_introspect.PythiaIntrospect.compute_distances", "pythia_introspect.PythiaIntrospect.inter_model", "pythia_introspect.PythiaIntrospect.calculate_logits", "pythia_introspect.PythiaIntrospect.inter_model", "pythia_introspect.PythiaIntrospect.calculate_logits"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.combine_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.calculate_logits", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.combine_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.combine_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.calculate_logits", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.combine_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.calculate_logits", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.compute_grad_cam", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.compute_grad_cam", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.compute_grad_cam", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.compute_distances", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.combine_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.combine_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.calculate_logits", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.combine_embeddings", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.calculate_logits", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.compute_grad_cam", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.compute_grad_cam", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.compute_grad_cam", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.compute_distances", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.calculate_logits", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.calculate_logits"], ["", "def", "forward", "(", "self", ",", "sample_list", ")", ":", "\n", "\n", "        ", "if", "sample_list", ".", "dataset_name", "==", "'train_vqa'", ":", "\n", "\n", "            ", "sample_list", ".", "text", "=", "self", ".", "word_embedding", "(", "sample_list", ".", "text", ")", "\n", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "sample_list", ")", "\n", "\n", "image_embedding_total", ",", "_", "=", "self", ".", "process_feature_embedding", "(", "\n", "\"image\"", ",", "sample_list", ",", "text_embedding_total", "\n", ")", "\n", "\n", "if", "self", ".", "inter_model", "is", "not", "None", ":", "\n", "                ", "image_embedding_total", "=", "self", ".", "inter_model", "(", "image_embedding_total", ")", "\n", "\n", "", "joint_embedding", "=", "self", ".", "combine_embeddings", "(", "\n", "[", "\"image\"", ",", "\"text\"", "]", ",", "[", "image_embedding_total", ",", "text_embedding_total", "]", ",", "\"main\"", "\n", ")", "\n", "\n", "\n", "self", ".", "joint_embedding", "=", "joint_embedding", "\n", "\n", "model_output", "=", "{", "\"scores\"", ":", "self", ".", "calculate_logits", "(", "joint_embedding", ")", "}", "\n", "\n", "# General stuff for distance computations", "\n", "\n", "model_output", "[", "\"scores_sq\"", "]", "=", "model_output", "[", "\"scores\"", "]", "\n", "model_output", "[", "\"scores_oq\"", "]", "=", "model_output", "[", "\"scores\"", "]", "\n", "model_output", "[", "\"distance_reas_sub\"", "]", "=", "torch", ".", "zeros_like", "(", "model_output", "[", "\"scores\"", "]", ")", "\n", "model_output", "[", "\"distance_reas_other\"", "]", "=", "torch", ".", "zeros_like", "(", "model_output", "[", "\"scores\"", "]", ")", "\n", "\n", "", "elif", "sample_list", ".", "dataset_name", "==", "'train_introspect'", "or", "sample_list", ".", "dataset_name", "==", "'test'", ":", "\n", "\n", "# Compute the scores for the reasoning question", "\n", "            ", "sample_list", ".", "text", "=", "self", ".", "word_embedding", "(", "sample_list", ".", "text", ")", "\n", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "sample_list", ")", "\n", "\n", "image_embedding_total", ",", "_", "=", "self", ".", "process_feature_embedding", "(", "\n", "\"image\"", ",", "sample_list", ",", "text_embedding_total", "\n", ")", "\n", "\n", "if", "self", ".", "inter_model", "is", "not", "None", ":", "\n", "                ", "image_embedding_total", "=", "self", ".", "inter_model", "(", "image_embedding_total", ")", "\n", "\n", "", "joint_embedding", "=", "self", ".", "combine_embeddings", "(", "\n", "[", "\"image\"", ",", "\"text\"", "]", ",", "[", "image_embedding_total", ",", "text_embedding_total", "]", ",", "\"main\"", "\n", ")", "\n", "\n", "self", ".", "joint_embedding", "=", "joint_embedding", "\n", "\n", "model_output", "=", "{", "\"scores\"", ":", "self", ".", "calculate_logits", "(", "joint_embedding", ")", "}", "\n", "\n", "# Compute the scores for the sub-question", "\n", "\n", "sample_list", ".", "text_sq", "=", "self", ".", "word_embedding", "(", "sample_list", ".", "text_sq", ")", "\n", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "sample_list", ",", "info", "=", "\"sub_question\"", ")", "\n", "image_embedding_total", ",", "_", "=", "self", ".", "process_feature_embedding", "(", "\n", "\"image\"", ",", "sample_list", ",", "text_embedding_total", "\n", ")", "\n", "joint_embedding_sq", "=", "self", ".", "combine_embeddings", "(", "\n", "[", "\"image\"", ",", "\"text\"", "]", ",", "[", "image_embedding_total", ",", "text_embedding_total", "]", ",", "\"sub_question\"", "\n", ")", "\n", "self", ".", "joint_embedding_sq", "=", "joint_embedding_sq", "\n", "model_output", "[", "\"scores_sq\"", "]", "=", "self", ".", "calculate_logits", "(", "joint_embedding_sq", ")", "\n", "\n", "# Compute the scores for the other-question", "\n", "\n", "sample_list", ".", "text_oq", "=", "self", ".", "word_embedding", "(", "sample_list", ".", "text_oq", ")", "\n", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "sample_list", ",", "info", "=", "\"other_question\"", ")", "\n", "image_embedding_total", ",", "_", "=", "self", ".", "process_feature_embedding", "(", "\n", "\"image\"", ",", "sample_list", ",", "text_embedding_total", "\n", ")", "\n", "joint_embedding_oq", "=", "self", ".", "combine_embeddings", "(", "\n", "[", "\"image\"", ",", "\"text\"", "]", ",", "[", "image_embedding_total", ",", "text_embedding_total", "]", ",", "\"other_question\"", "\n", ")", "\n", "self", ".", "joint_embedding_oq", "=", "joint_embedding_oq", "\n", "model_output", "[", "\"scores_oq\"", "]", "=", "self", ".", "calculate_logits", "(", "joint_embedding_oq", ")", "\n", "\n", "# General stuff for distance computations", "\n", "self", ".", "compute_grad_cam", "(", "sample_list", ",", "model_output", ",", "question", "=", "\"main\"", ")", "\n", "self", ".", "compute_grad_cam", "(", "sample_list", ",", "model_output", ",", "question", "=", "\"sq\"", ")", "\n", "self", ".", "compute_grad_cam", "(", "sample_list", ",", "model_output", ",", "question", "=", "\"oq\"", ")", "\n", "\n", "self", ".", "compute_distances", "(", "sample_list", ",", "model_output", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "sample_list", ".", "text", "=", "self", ".", "word_embedding", "(", "sample_list", ".", "text", ")", "\n", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "sample_list", ")", "\n", "\n", "image_embedding_total", ",", "_", "=", "self", ".", "process_feature_embedding", "(", "\n", "\"image\"", ",", "sample_list", ",", "text_embedding_total", "\n", ")", "\n", "\n", "if", "self", ".", "inter_model", "is", "not", "None", ":", "\n", "                ", "image_embedding_total", "=", "self", ".", "inter_model", "(", "image_embedding_total", ")", "\n", "\n", "", "joint_embedding", "=", "self", ".", "combine_embeddings", "(", "\n", "[", "\"image\"", ",", "\"text\"", "]", ",", "[", "image_embedding_total", ",", "text_embedding_total", "]", ",", "\"main\"", "\n", ")", "\n", "\n", "self", ".", "joint_embedding", "=", "joint_embedding", "\n", "\n", "model_output", "=", "{", "\"scores\"", ":", "self", ".", "calculate_logits", "(", "joint_embedding", ")", "}", "\n", "\n", "# Compute the scores for the sub-question", "\n", "\n", "sample_list", ".", "text_sq", "=", "self", ".", "word_embedding", "(", "sample_list", ".", "text_sq", ")", "\n", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "sample_list", ",", "info", "=", "\"sub_question\"", ")", "\n", "image_embedding_total", ",", "_", "=", "self", ".", "process_feature_embedding", "(", "\n", "\"image\"", ",", "sample_list", ",", "text_embedding_total", "\n", ")", "\n", "joint_embedding_sq", "=", "self", ".", "combine_embeddings", "(", "\n", "[", "\"image\"", ",", "\"text\"", "]", ",", "[", "image_embedding_total", ",", "text_embedding_total", "]", ",", "\"sub_question\"", "\n", ")", "\n", "self", ".", "joint_embedding_sq", "=", "joint_embedding_sq", "\n", "model_output", "[", "\"scores_sq\"", "]", "=", "self", ".", "calculate_logits", "(", "joint_embedding_sq", ")", "\n", "\n", "# Compute the scores for the other-question", "\n", "\n", "sample_list", ".", "text_oq", "=", "self", ".", "word_embedding", "(", "sample_list", ".", "text_oq", ")", "\n", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "sample_list", ",", "info", "=", "\"other_question\"", ")", "\n", "image_embedding_total", ",", "_", "=", "self", ".", "process_feature_embedding", "(", "\n", "\"image\"", ",", "sample_list", ",", "text_embedding_total", "\n", ")", "\n", "joint_embedding_oq", "=", "self", ".", "combine_embeddings", "(", "\n", "[", "\"image\"", ",", "\"text\"", "]", ",", "[", "image_embedding_total", ",", "text_embedding_total", "]", ",", "\"other_question\"", "\n", ")", "\n", "self", ".", "joint_embedding_oq", "=", "joint_embedding_oq", "\n", "model_output", "[", "\"scores_oq\"", "]", "=", "self", ".", "calculate_logits", "(", "joint_embedding_oq", ")", "\n", "\n", "# General stuff for distance computations", "\n", "self", ".", "compute_grad_cam", "(", "sample_list", ",", "model_output", ",", "question", "=", "\"main\"", ")", "\n", "self", ".", "compute_grad_cam", "(", "sample_list", ",", "model_output", ",", "question", "=", "\"sq\"", ")", "\n", "self", ".", "compute_grad_cam", "(", "sample_list", ",", "model_output", ",", "question", "=", "\"oq\"", ")", "\n", "\n", "self", ".", "compute_distances", "(", "sample_list", ",", "model_output", ")", "\n", "\n", "", "return", "model_output", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaQuestionOnly.__init__": [[492, 494], ["pythia_introspect.PythiaIntrospect.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaQuestionOnly.forward": [[495, 513], ["pythia_introspect.PythiaQuestionOnly.process_text_embedding", "text_embedding_total.new_zeros.new_zeros.new_zeros", "dropout", "linear_text", "text_embedding_total.new_zeros.new_zeros.size", "fa_txt", "f_o_text"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding"], ["", "def", "forward", "(", "self", ",", "sample_list", ")", ":", "\n", "        ", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "sample_list", ")", "\n", "text_embedding_total", "=", "text_embedding_total", ".", "new_zeros", "(", "\n", "text_embedding_total", ".", "size", "(", ")", "\n", ")", "\n", "\n", "fa_txt", "=", "self", ".", "image_text_multi_modal_combine_layer", ".", "module", ".", "fa_txt", "\n", "dropout", "=", "self", ".", "image_text_multi_modal_combine_layer", ".", "module", ".", "dropout", "\n", "\n", "joint_embedding", "=", "dropout", "(", "fa_txt", "(", "text_embedding_total", ")", ")", "\n", "\n", "linear_text", "=", "self", ".", "classifier", ".", "module", ".", "linear_text", "\n", "f_o_text", "=", "self", ".", "classifier", ".", "module", ".", "f_o_text", "\n", "scores", "=", "linear_text", "(", "f_o_text", "(", "joint_embedding", ")", ")", "\n", "\n", "model_output", "=", "{", "\"scores\"", ":", "scores", "}", "\n", "\n", "return", "model_output", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaImageOnly.__init__": [[518, 520], ["pythia_introspect.PythiaIntrospect.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaImageOnly.forward": [[521, 542], ["pythia_introspect.PythiaImageOnly.process_text_embedding", "text_embedding_total.new_zeros.new_zeros.new_zeros", "pythia_introspect.PythiaImageOnly.process_feature_embedding", "dropout", "text_embedding_total.new_zeros.new_zeros.size", "pythia_introspect.PythiaImageOnly.inter_model", "fa_image", "pythia_introspect.PythiaImageOnly.calculate_logits"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.process_feature_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.pythia_introspect.PythiaIntrospect.calculate_logits"], ["", "def", "forward", "(", "self", ",", "sample_list", ")", ":", "\n", "        ", "text_embedding_total", "=", "self", ".", "process_text_embedding", "(", "sample_list", ")", "\n", "text_embedding_total", "=", "text_embedding_total", ".", "new_zeros", "(", "\n", "text_embedding_total", ".", "size", "(", ")", "\n", ")", "\n", "\n", "image_embedding_total", ",", "_", "=", "self", ".", "process_feature_embedding", "(", "\n", "\"image\"", ",", "sample_list", ",", "text_embedding_total", "\n", ")", "\n", "\n", "if", "self", ".", "inter_model", "is", "not", "None", ":", "\n", "            ", "image_embedding_total", "=", "self", ".", "inter_model", "(", "image_embedding_total", ")", "\n", "\n", "", "fa_image", "=", "self", ".", "image_text_multi_modal_combine_layer", ".", "module", ".", "fa_image", "\n", "dropout", "=", "self", ".", "image_text_multi_modal_combine_layer", ".", "module", ".", "dropout", "\n", "\n", "joint_embedding", "=", "dropout", "(", "fa_image", "(", "image_embedding_total", ")", ")", "\n", "\n", "model_output", "=", "{", "\"scores\"", ":", "self", ".", "calculate_logits", "(", "joint_embedding", ")", "}", "\n", "\n", "return", "model_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN.__init__": [[14, 19], ["pythia.models.base_model.BaseModel.__init__", "pythia.common.registry.registry.get", "ban.BAN._global_config.datasets.split"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BAN", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "_global_config", "=", "registry", ".", "get", "(", "\"config\"", ")", "\n", "self", ".", "_datasets", "=", "self", ".", "_global_config", ".", "datasets", ".", "split", "(", "\",\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN.build": [[20, 25], ["ban.BAN._build_word_embedding", "ban.BAN._init_text_embedding", "ban.BAN._init_classifier", "ban.BAN._init_bilinear_attention"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._build_word_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._init_text_embedding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._init_classifier", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._init_bilinear_attention"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "self", ".", "_build_word_embedding", "(", ")", "\n", "self", ".", "_init_text_embedding", "(", ")", "\n", "self", ".", "_init_classifier", "(", ")", "\n", "self", ".", "_init_bilinear_attention", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._build_word_embedding": [[26, 30], ["pythia.common.registry.registry.get", "vocab.get_embedding"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_embedding"], ["", "def", "_build_word_embedding", "(", "self", ")", ":", "\n", "        ", "text_processor", "=", "registry", ".", "get", "(", "self", ".", "_datasets", "[", "0", "]", "+", "\"_text_processor\"", ")", "\n", "vocab", "=", "text_processor", ".", "vocab", "\n", "self", ".", "word_embedding", "=", "vocab", ".", "get_embedding", "(", "torch", ".", "nn", ".", "Embedding", ",", "embedding_dim", "=", "300", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._init_text_embedding": [[31, 42], ["pythia.modules.embeddings.BiLSTMTextEmbedding"], "methods", ["None"], ["", "def", "_init_text_embedding", "(", "self", ")", ":", "\n", "        ", "module_config", "=", "self", ".", "config", "[", "\"text_embedding\"", "]", "\n", "q_mod", "=", "BiLSTMTextEmbedding", "(", "\n", "module_config", "[", "\"num_hidden\"", "]", ",", "\n", "module_config", "[", "\"emb_size\"", "]", ",", "\n", "module_config", "[", "\"num_layers\"", "]", ",", "\n", "module_config", "[", "\"dropout\"", "]", ",", "\n", "module_config", "[", "\"bidirectional\"", "]", ",", "\n", "module_config", "[", "\"rnn_type\"", "]", ",", "\n", ")", "\n", "self", ".", "q_emb", "=", "q_mod", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._init_bilinear_attention": [[43, 71], ["pythia.modules.layers.BiAttention", "range", "torch.nn.ModuleList", "torch.nn.ModuleList", "b_net.append", "q_prj.append", "pythia.modules.layers.BCNet", "pythia.modules.layers.FCNet"], "methods", ["None"], ["", "def", "_init_bilinear_attention", "(", "self", ")", ":", "\n", "        ", "module_config", "=", "self", ".", "config", "[", "\"bilinear_attention\"", "]", "\n", "num_hidden", "=", "self", ".", "config", "[", "\"text_embedding\"", "]", "[", "\"num_hidden\"", "]", "\n", "v_dim", "=", "module_config", "[", "\"visual_feat_dim\"", "]", "\n", "\n", "v_att", "=", "BiAttention", "(", "v_dim", ",", "num_hidden", ",", "num_hidden", ",", "module_config", "[", "\"gamma\"", "]", ")", "\n", "\n", "b_net", "=", "[", "]", "\n", "q_prj", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "module_config", "[", "\"gamma\"", "]", ")", ":", "\n", "            ", "b_net", ".", "append", "(", "\n", "BCNet", "(", "\n", "v_dim", ",", "num_hidden", ",", "num_hidden", ",", "None", ",", "k", "=", "module_config", "[", "\"bc_net\"", "]", "[", "\"k\"", "]", "\n", ")", "\n", ")", "\n", "\n", "q_prj", ".", "append", "(", "\n", "FCNet", "(", "\n", "dims", "=", "[", "num_hidden", ",", "num_hidden", "]", ",", "\n", "act", "=", "module_config", "[", "\"fc_net\"", "]", "[", "\"activation\"", "]", ",", "\n", "dropout", "=", "module_config", "[", "\"fc_net\"", "]", "[", "\"dropout\"", "]", ",", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "b_net", "=", "nn", ".", "ModuleList", "(", "b_net", ")", "\n", "self", ".", "q_prj", "=", "nn", ".", "ModuleList", "(", "q_prj", ")", "\n", "self", ".", "v_att", "=", "v_att", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN._init_classifier": [[72, 78], ["pythia.common.registry.registry.get", "pythia.modules.layers.WeightNormClassifier"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "def", "_init_classifier", "(", "self", ")", ":", "\n", "        ", "num_hidden", "=", "self", ".", "config", "[", "\"text_embedding\"", "]", "[", "\"num_hidden\"", "]", "\n", "num_choices", "=", "registry", ".", "get", "(", "self", ".", "_datasets", "[", "0", "]", "+", "\"_num_final_outputs\"", ")", "\n", "dropout", "=", "self", ".", "config", "[", "\"classifier\"", "]", "[", "\"dropout\"", "]", "\n", "self", ".", "classifier", "=", "WeightNormClassifier", "(", "\n", "num_hidden", ",", "num_choices", ",", "num_hidden", "*", "2", ",", "dropout", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.ban.BAN.forward": [[80, 98], ["ban.BAN.word_embedding", "ban.BAN.q_emb.forward_all", "ban.BAN.v_att.forward_all", "range", "ban.BAN.classifier", "ban.BAN.b_net[].forward_with_weights", "ban.BAN.sum", "b_emb[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.BiLSTMTextEmbedding.forward_all", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.embeddings.BiLSTMTextEmbedding.forward_all", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.modules.layers.BCNet.forward_with_weights"], ["", "def", "forward", "(", "self", ",", "sample_list", ")", ":", "\n", "\n", "        ", "v", "=", "sample_list", ".", "image_feature_0", "\n", "q", "=", "self", ".", "word_embedding", "(", "sample_list", ".", "text", ")", "\n", "\n", "q_emb", "=", "self", ".", "q_emb", ".", "forward_all", "(", "q", ")", "\n", "\n", "b_emb", "=", "[", "0", "]", "*", "self", ".", "config", "[", "\"bilinear_attention\"", "]", "[", "\"gamma\"", "]", "\n", "att", ",", "logits", "=", "self", ".", "v_att", ".", "forward_all", "(", "v", ",", "q_emb", ")", "\n", "\n", "for", "g", "in", "range", "(", "self", ".", "config", "[", "\"bilinear_attention\"", "]", "[", "\"gamma\"", "]", ")", ":", "\n", "            ", "g_att", "=", "att", "[", ":", ",", "g", ",", ":", ",", ":", "]", "\n", "b_emb", "[", "g", "]", "=", "self", ".", "b_net", "[", "g", "]", ".", "forward_with_weights", "(", "v", ",", "q_emb", ",", "g_att", ")", "\n", "q_emb", "=", "self", ".", "q_prj", "[", "g", "]", "(", "b_emb", "[", "g", "]", ".", "unsqueeze", "(", "1", ")", ")", "+", "q_emb", "\n", "\n", "", "logits", "=", "self", ".", "classifier", "(", "q_emb", ".", "sum", "(", "1", ")", ")", "\n", "\n", "return", "{", "\"scores\"", ":", "logits", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.base_model.BaseModel.__init__": [[64, 68], ["torch.nn.Module.__init__", "pythia.common.registry.registry.get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.base_model.BaseModel.build": [[69, 76], ["NotImplementedError"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "\"\"\"Function to be implemented by the child class, in case they need to\n        build their model separately than ``__init__``. All model related\n        downloads should also happen here.\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "\"Build method not implemented in the child model class.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.base_model.BaseModel.init_losses_and_metrics": [[78, 98], ["base_model.BaseModel.config.get", "base_model.BaseModel.config.get", "pythia.modules.losses.Losses", "pythia.modules.metrics.Metrics", "len", "warnings.warn", "len", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "def", "init_losses_and_metrics", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initializes loss and metrics for the model based ``losses`` key\n        and ``metrics`` keys. Automatically called by Pythia internally after\n        building the model.\n        \"\"\"", "\n", "losses", "=", "self", ".", "config", ".", "get", "(", "\"losses\"", ",", "[", "]", ")", "\n", "metrics", "=", "self", ".", "config", ".", "get", "(", "\"metrics\"", ",", "[", "]", ")", "\n", "if", "len", "(", "losses", ")", "==", "0", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"No losses are defined in model configuration. You are expected \"", "\n", "\"to return loss in your return dict from forward.\"", "\n", ")", "\n", "\n", "", "if", "len", "(", "metrics", ")", "==", "0", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"No metrics are defined in model configuration. You are expected \"", "\n", "\"to return metrics in your return dict from forward.\"", "\n", ")", "\n", "", "self", ".", "losses", "=", "Losses", "(", "losses", ")", "\n", "self", ".", "metrics", "=", "Metrics", "(", "metrics", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.base_model.BaseModel.init_args": [[99, 102], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "init_args", "(", "cls", ",", "parser", ")", ":", "\n", "        ", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.base_model.BaseModel.forward": [[103, 117], ["NotImplementedError"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sample_list", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"To be implemented by child class. Takes in a ``SampleList`` and\n        returns back a dict.\n\n        Args:\n            sample_list (SampleList): SampleList returned by the DataLoader for\n            current iteration\n\n        Returns:\n            Dict: Dict containing scores object.\n\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", "\n", "\"Forward of the child model class needs to be implemented.\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.models.base_model.BaseModel.__call__": [[119, 153], ["super().__call__", "isinstance", "warnings.warn", "isinstance", "base_model.BaseModel.losses", "warnings.warn", "isinstance", "base_model.BaseModel.metrics"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.batch_collator.BatchCollator.__call__"], ["", "def", "__call__", "(", "self", ",", "sample_list", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "model_output", "=", "super", "(", ")", ".", "__call__", "(", "sample_list", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "# Make sure theat the output from the model is a Mapping", "\n", "assert", "isinstance", "(", "model_output", ",", "collections", ".", "abc", ".", "Mapping", ")", ",", "(", "\n", "\"A dict must be returned from the forward of the model.\"", "\n", ")", "\n", "\n", "if", "\"losses\"", "in", "model_output", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"'losses' already present in model output. \"", "\n", "\"No calculation will be done in base model.\"", "\n", ")", "\n", "assert", "isinstance", "(", "\n", "model_output", "[", "\"losses\"", "]", ",", "collections", ".", "abc", ".", "Mapping", "\n", ")", ",", "\"'losses' must be a dict.\"", "\n", "", "else", ":", "\n", "#print(\"ELSE\")", "\n", "#print(\"Sample List : {}\".format(sample_list))", "\n", "#pdb.set_trace()", "\n", "            ", "model_output", "[", "\"losses\"", "]", "=", "self", ".", "losses", "(", "sample_list", ",", "model_output", ")", "\n", "\n", "", "if", "\"metrics\"", "in", "model_output", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"'metrics' already present in model output. \"", "\n", "\"No calculation will be done in base model.\"", "\n", ")", "\n", "assert", "isinstance", "(", "\n", "model_output", "[", "\"metrics\"", "]", ",", "collections", ".", "abc", ".", "Mapping", "\n", ")", ",", "\"'metrics' must be a dict.\"", "\n", "", "else", ":", "\n", "            ", "model_output", "[", "\"metrics\"", "]", "=", "self", ".", "metrics", "(", "sample_list", ",", "model_output", ")", "\n", "\n", "", "return", "model_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.legacy.train.parse_args": [[35, 66], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--config\"", ",", "type", "=", "str", ",", "required", "=", "False", ",", "help", "=", "\"config yaml file\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--out_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"output directory, default is current directory\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--seed\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1234", ",", "\n", "help", "=", "\"random seed, default 1234,\"", "\n", "\"set seed to -1 if need a random seed\"", "\n", "\"between 1 and 100000\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config_overwrite\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"a json string to update yaml config file\"", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--force_restart\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"flag to force clean previous\"", "\"result and restart training\"", ",", "\n", ")", "\n", "\n", "arguments", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "arguments", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.legacy.train.process_config": [[68, 70], ["config.config_utils.finalize_config"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.finalize_config"], ["", "def", "process_config", "(", "config_file", ",", "config_string", ")", ":", "\n", "    ", "finalize_config", "(", "cfg", ",", "config_file", ",", "config_string", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.legacy.train.get_output_folder_name": [[72, 97], ["os.path.splitext", "yaml.safe_dump", "f_name.replace().replace.replace().replace().replace", "f_name.replace().replace.replace().replace", "len", "f_name.replace().replace.split", "f_name.replace().replace.replace().replace", "f_name.replace().replace.replace", "f_name.replace().replace.replace"], "function", ["None"], ["", "def", "get_output_folder_name", "(", "config_basename", ",", "cfg_overwrite_obj", ",", "seed", ")", ":", "\n", "    ", "m_name", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "config_basename", ")", "\n", "\n", "# remove configs which won't change model performance", "\n", "\n", "if", "cfg_overwrite_obj", "is", "not", "None", "and", "len", "(", "cfg_overwrite_obj", ")", ">", "0", ":", "\n", "        ", "f_name", "=", "yaml", ".", "safe_dump", "(", "cfg_overwrite_obj", ",", "default_flow_style", "=", "False", ")", "\n", "f_name", "=", "f_name", ".", "replace", "(", "\":\"", ",", "\".\"", ")", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "f_name", "=", "\" \"", ".", "join", "(", "f_name", ".", "split", "(", ")", ")", "\n", "f_name", "=", "f_name", ".", "replace", "(", "\". \"", ",", "\".\"", ")", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "f_name", "+=", "\"_%d\"", "%", "seed", "\n", "if", "\"data\"", "in", "cfg_overwrite_obj", ":", "\n", "            ", "if", "\"image_fast_reader\"", "in", "cfg_overwrite_obj", "[", "\"data\"", "]", ":", "\n", "                ", "del", "cfg_overwrite_obj", "[", "\"data\"", "]", "[", "\"image_fast_reader\"", "]", "\n", "", "if", "\"num_workers\"", "in", "cfg_overwrite_obj", "[", "\"data\"", "]", ":", "\n", "                ", "del", "cfg_overwrite_obj", "[", "\"data\"", "]", "[", "\"num_workers\"", "]", "\n", "", "", "if", "\"training_parameters\"", "in", "cfg_overwrite_obj", ":", "\n", "            ", "if", "\"max_iter\"", "in", "cfg_overwrite_obj", "[", "\"training_parameters\"", "]", ":", "\n", "                ", "del", "cfg_overwrite_obj", "[", "\"training_parameters\"", "]", "[", "\"max_iter\"", "]", "\n", "", "if", "\"report_interval\"", "in", "cfg_overwrite_obj", "[", "\"training_parameters\"", "]", ":", "\n", "                ", "del", "cfg_overwrite_obj", "[", "\"training_parameters\"", "]", "[", "\"report_interval\"", "]", "\n", "", "", "", "else", ":", "\n", "        ", "f_name", "=", "\"%d\"", "%", "seed", "\n", "\n", "", "return", "m_name", ",", "f_name", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.legacy.train.lr_lambda_fun": [[99, 106], ["bisect.bisect", "pow", "float", "float"], "function", ["None"], ["", "def", "lr_lambda_fun", "(", "i_iter", ")", ":", "\n", "    ", "if", "i_iter", "<=", "cfg", ".", "training_parameters", ".", "wu_iters", ":", "\n", "        ", "alpha", "=", "float", "(", "i_iter", ")", "/", "float", "(", "cfg", ".", "training_parameters", ".", "wu_iters", ")", "\n", "return", "cfg", ".", "training_parameters", ".", "wu_factor", "*", "(", "1.0", "-", "alpha", ")", "+", "alpha", "\n", "", "else", ":", "\n", "        ", "idx", "=", "bisect", "(", "cfg", ".", "training_parameters", ".", "lr_steps", ",", "i_iter", ")", "\n", "return", "pow", "(", "cfg", ".", "training_parameters", ".", "lr_ratio", ",", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.legacy.train.get_optim_scheduler": [[108, 110], ["torch.optim.lr_scheduler.LambdaLR"], "function", ["None"], ["", "", "def", "get_optim_scheduler", "(", "optimizer", ")", ":", "\n", "    ", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lr_lambda_fun", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.legacy.train.print_eval": [[112, 138], ["os.path.join", "os.path.join", "os.path.join", "prepare_data_fun", "torch.utils.data.DataLoader", "train_model.helper.build_model", "train_model.helper.build_model.load_state_dict", "train_model.helper.build_model.eval", "train_model.helper.run_model", "train_model.helper.print_result", "torch.load"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.helper.build_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.load_state_dict", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.helper.run_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.helper.print_result", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["", "def", "print_eval", "(", "prepare_data_fun", ",", "out_label", ")", ":", "\n", "    ", "model_file", "=", "os", ".", "path", ".", "join", "(", "snapshot_dir", ",", "\"best_model.pth\"", ")", "\n", "pkl_res_file", "=", "os", ".", "path", ".", "join", "(", "snapshot_dir", ",", "\"best_model_predict_%s.pkl\"", "%", "out_label", ")", "\n", "out_file", "=", "os", ".", "path", ".", "join", "(", "snapshot_dir", ",", "\"best_model_predict_%s.json\"", "%", "out_label", ")", "\n", "\n", "data_set_test", "=", "prepare_data_fun", "(", "**", "cfg", "[", "\"data\"", "]", ",", "**", "cfg", "[", "\"model\"", "]", ",", "verbose", "=", "True", ")", "\n", "data_reader_test", "=", "DataLoader", "(", "\n", "data_set_test", ",", "\n", "shuffle", "=", "False", ",", "\n", "batch_size", "=", "cfg", ".", "data", ".", "batch_size", ",", "\n", "num_workers", "=", "cfg", ".", "data", ".", "num_workers", ",", "\n", ")", "\n", "ans_dic", "=", "data_set_test", ".", "answer_dict", "\n", "\n", "model", "=", "build_model", "(", "cfg", ",", "data_set_test", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_file", ")", "[", "\"state_dict\"", "]", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "question_ids", ",", "soft_max_result", "=", "run_model", "(", "model", ",", "data_reader_test", ",", "ans_dic", ".", "UNK_idx", ")", "\n", "print_result", "(", "\n", "question_ids", ",", "\n", "soft_max_result", ",", "\n", "ans_dic", ",", "\n", "out_file", ",", "\n", "json_only", "=", "False", ",", "\n", "pkl_res_file", "=", "pkl_res_file", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.legacy.run_test.parse_args": [[21, 52], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--config\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"config yaml file\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--out_prefix\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"output file name prefix, will append .json or .pkl\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_path\"", ",", "type", "=", "str", ",", "help", "=", "\"path of model\"", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--batch_size\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"batch_size for test, o.w. using the one in config file\"", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_workers\"", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"num_workers in dataLoader, default 0\"", ",", "\n", "default", "=", "5", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--json_only\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"flag for only need json result\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--use_val\"", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"flag for using val data for test\"", "\n", ")", "\n", "\n", "arguments", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "arguments", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.legacy.run_test.multi_gpu_state_to_single": [[54, 62], ["state_dict.items", "k.startswith", "TypeError"], "function", ["None"], ["", "def", "multi_gpu_state_to_single", "(", "state_dict", ")", ":", "\n", "    ", "new_sd", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "k", ".", "startswith", "(", "\"module.\"", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"Not a multiple GPU state of dict\"", ")", "\n", "", "k1", "=", "k", "[", "7", ":", "]", "\n", "new_sd", "[", "k1", "]", "=", "v", "\n", "", "return", "new_sd", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.legacy.ensemble.answer_json.__init__": [[35, 37], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "answers", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.legacy.ensemble.answer_json.add": [[38, 41], ["ensemble.answer_json.answers.append"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "ques_id", ",", "ans", ")", ":", "\n", "        ", "res", "=", "{", "\"question_id\"", ":", "ques_id", ",", "\"answer\"", ":", "ans", "}", "\n", "self", ".", "answers", ".", "append", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.legacy.ensemble.parse_args": [[19, 32], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--out\"", ",", "type", "=", "str", ",", "required", "=", "True", ",", "help", "=", "\"output file name\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--res_dirs\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "help", "=", "\"directories for results, NOTE:\"", "\n", "\"all *.pkl file under these dirs will be ensembled\"", ",", "\n", "default", "=", "None", ",", "\n", ")", "\n", "argments", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "return", "argments", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.masked_unk_softmax": [[23, 29], ["torch.softmax", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["def", "masked_unk_softmax", "(", "x", ",", "dim", ",", "mask_idx", ")", ":", "\n", "    ", "x1", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "dim", ")", "\n", "x1", "[", ":", ",", "mask_idx", "]", "=", "0", "\n", "x1_sum", "=", "torch", ".", "sum", "(", "x1", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "y", "=", "x1", "/", "x1_sum", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.compute_score_with_logits": [[31, 39], ["Engineer.masked_unk_softmax", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros.scatter_", "torch.zeros.cuda", "masked_unk_softmax.view", "torch.max", "torch.max", "torch.max", "labels.size"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.masked_unk_softmax"], ["", "def", "compute_score_with_logits", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "logits", "=", "masked_unk_softmax", "(", "logits", ",", "1", ",", "0", ")", "\n", "logits", "=", "torch", ".", "max", "(", "logits", ",", "1", ")", "[", "1", "]", ".", "data", "# argmax", "\n", "one_hots", "=", "torch", ".", "zeros", "(", "*", "labels", ".", "size", "(", ")", ")", "\n", "one_hots", "=", "one_hots", ".", "cuda", "(", ")", "if", "use_cuda", "else", "one_hots", "\n", "one_hots", ".", "scatter_", "(", "1", ",", "logits", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "scores", "=", "one_hots", "*", "labels", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.clip_gradients": [[41, 55], ["torch.utils.clip_grad_norm", "writer.add_scalar", "myModel.parameters", "torch.utils.clip_grad_norm", "writer.add_scalar", "myModel.module.question_embedding_models.parameters"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.add_scalar"], ["", "def", "clip_gradients", "(", "myModel", ",", "i_iter", ",", "writer", ")", ":", "\n", "    ", "max_grad_l2_norm", "=", "cfg", ".", "training_parameters", ".", "max_grad_l2_norm", "\n", "clip_norm_mode", "=", "cfg", ".", "training_parameters", ".", "clip_norm_mode", "\n", "if", "max_grad_l2_norm", "is", "not", "None", ":", "\n", "        ", "if", "clip_norm_mode", "==", "\"all\"", ":", "\n", "            ", "norm", "=", "nn", ".", "utils", ".", "clip_grad_norm", "(", "myModel", ".", "parameters", "(", ")", ",", "max_grad_l2_norm", ")", "\n", "writer", ".", "add_scalar", "(", "\"grad_norm\"", ",", "norm", ",", "i_iter", ")", "\n", "", "elif", "clip_norm_mode", "==", "\"question\"", ":", "\n", "            ", "norm", "=", "nn", ".", "utils", ".", "clip_grad_norm", "(", "\n", "myModel", ".", "module", ".", "question_embedding_models", ".", "parameters", "(", ")", ",", "max_grad_l2_norm", "\n", ")", "\n", "writer", ".", "add_scalar", "(", "\"question_grad_norm\"", ",", "norm", ",", "i_iter", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.save_a_report": [[57, 94], ["next", "Engineer.compute_a_batch", "print", "sys.stdout.flush", "report_timer.start", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "myModel.named_parameters", "iter", "writer.add_histogram", "report_timer.end", "param.clone().cpu().data.numpy", "param.clone().cpu", "param.clone"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.compute_a_batch", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.timer.Timer.start", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.add_scalar", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.timer.Timer.end"], ["", "", "", "def", "save_a_report", "(", "\n", "i_iter", ",", "\n", "train_loss", ",", "\n", "train_acc", ",", "\n", "train_avg_acc", ",", "\n", "report_timer", ",", "\n", "writer", ",", "\n", "data_reader_eval", ",", "\n", "myModel", ",", "\n", "loss_criterion", ",", "\n", ")", ":", "\n", "    ", "val_batch", "=", "next", "(", "iter", "(", "data_reader_eval", ")", ")", "\n", "val_score", ",", "val_loss", ",", "n_val_sample", "=", "compute_a_batch", "(", "\n", "val_batch", ",", "myModel", ",", "eval_mode", "=", "True", ",", "loss_criterion", "=", "loss_criterion", "\n", ")", "\n", "val_acc", "=", "val_score", "/", "n_val_sample", "\n", "\n", "print", "(", "\n", "\"iter:\"", ",", "\n", "i_iter", ",", "\n", "\"train_loss: %.4f\"", "%", "train_loss", ",", "\n", "\" train_score: %.4f\"", "%", "train_acc", ",", "\n", "\" avg_train_score: %.4f\"", "%", "train_avg_acc", ",", "\n", "\"val_score: %.4f\"", "%", "val_acc", ",", "\n", "\"val_loss: %.4f\"", "%", "val_loss", ".", "data", "[", "0", "]", ",", "\n", "\"time(s): % s\"", "%", "report_timer", ".", "end", "(", ")", ",", "\n", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "report_timer", ".", "start", "(", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "\"train_loss\"", ",", "train_loss", ",", "i_iter", ")", "\n", "writer", ".", "add_scalar", "(", "\"train_score\"", ",", "train_acc", ",", "i_iter", ")", "\n", "writer", ".", "add_scalar", "(", "\"train_score_avg\"", ",", "train_avg_acc", ",", "i_iter", ")", "\n", "writer", ".", "add_scalar", "(", "\"val_score\"", ",", "val_score", ",", "i_iter", ")", "\n", "writer", ".", "add_scalar", "(", "\"val_loss\"", ",", "val_loss", ".", "data", "[", "0", "]", ",", "i_iter", ")", "\n", "for", "name", ",", "param", "in", "myModel", ".", "named_parameters", "(", ")", ":", "\n", "        ", "writer", ".", "add_histogram", "(", "name", ",", "param", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "i_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.save_a_snapshot": [[96, 152], ["os.path.join", "os.path.join", "myModel.state_dict", "my_optimizer.state_dict", "Engineer.one_stage_eval_model", "print", "snapshot_timer.start", "sys.stdout.flush", "torch.save", "torch.save", "torch.save", "open", "fid.write", "os.path.join", "os.path.exists", "os.link", "snapshot_timer.end", "os.remove"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.one_stage_eval_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.timer.Timer.start", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.timer.Timer.end"], ["", "", "def", "save_a_snapshot", "(", "\n", "snapshot_dir", ",", "\n", "i_iter", ",", "\n", "iepoch", ",", "\n", "myModel", ",", "\n", "my_optimizer", ",", "\n", "loss_criterion", ",", "\n", "best_val_accuracy", ",", "\n", "best_epoch", ",", "\n", "best_iter", ",", "\n", "snapshot_timer", ",", "\n", "data_reader_eval", ",", "\n", ")", ":", "\n", "    ", "model_snapshot_file", "=", "os", ".", "path", ".", "join", "(", "snapshot_dir", ",", "\"model_%08d.pth\"", "%", "i_iter", ")", "\n", "model_result_file", "=", "os", ".", "path", ".", "join", "(", "snapshot_dir", ",", "\"result_on_val.txt\"", ")", "\n", "save_dic", "=", "{", "\n", "\"epoch\"", ":", "iepoch", ",", "\n", "\"iter\"", ":", "i_iter", ",", "\n", "\"state_dict\"", ":", "myModel", ".", "state_dict", "(", ")", ",", "\n", "\"optimizer\"", ":", "my_optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "\n", "if", "data_reader_eval", "is", "not", "None", ":", "\n", "        ", "val_accuracy", ",", "avg_loss", ",", "val_sample_tot", "=", "one_stage_eval_model", "(", "\n", "data_reader_eval", ",", "myModel", ",", "loss_criterion", "=", "loss_criterion", "\n", ")", "\n", "print", "(", "\n", "\"i_epoch:\"", ",", "\n", "iepoch", ",", "\n", "\"i_iter:\"", ",", "\n", "i_iter", ",", "\n", "\"val_loss:%.4f\"", "%", "avg_loss", ",", "\n", "\"val_acc:%.4f\"", "%", "val_accuracy", ",", "\n", "\"runtime: %s\"", "%", "snapshot_timer", ".", "end", "(", ")", ",", "\n", ")", "\n", "snapshot_timer", ".", "start", "(", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "with", "open", "(", "model_result_file", ",", "\"a\"", ")", "as", "fid", ":", "\n", "            ", "fid", ".", "write", "(", "\"%d %d %.5f\\n\"", "%", "(", "iepoch", ",", "i_iter", ",", "val_accuracy", ")", ")", "\n", "\n", "", "if", "val_accuracy", ">", "best_val_accuracy", ":", "\n", "            ", "best_val_accuracy", "=", "val_accuracy", "\n", "best_epoch", "=", "iepoch", "\n", "best_iter", "=", "i_iter", "\n", "best_model_snapshot_file", "=", "os", ".", "path", ".", "join", "(", "snapshot_dir", ",", "\"best_model.pth\"", ")", "\n", "\n", "", "save_dic", "[", "\"best_val_accuracy\"", "]", "=", "best_val_accuracy", "\n", "torch", ".", "save", "(", "save_dic", ",", "model_snapshot_file", ")", "\n", "\n", "if", "best_iter", "==", "i_iter", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "best_model_snapshot_file", ")", ":", "\n", "                ", "os", ".", "remove", "(", "best_model_snapshot_file", ")", "\n", "", "os", ".", "link", "(", "model_snapshot_file", ",", "best_model_snapshot_file", ")", "\n", "\n", "", "", "return", "best_val_accuracy", ",", "best_epoch", ",", "best_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.one_stage_train": [[154, 241], ["tensorboardX.SummaryWriter", "tools.timer.Timer", "tools.timer.Timer", "tensorboardX.SummaryWriter.export_scalars_to_json", "tensorboardX.SummaryWriter.close", "print", "sys.stdout.flush", "enumerate", "os.path.join", "scheduler.step", "my_optimizer.zero_grad", "Engineer.compute_a_batch", "total_loss.backward", "Engineer.clip_gradients", "my_optimizer.step", "Engineer.save_a_report", "Engineer.save_a_snapshot"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.vqa_html_writer.vqa_html_writer.close", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.compute_a_batch", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.clip_gradients", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.save_a_report", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.save_a_snapshot"], ["", "def", "one_stage_train", "(", "\n", "myModel", ",", "\n", "data_reader_trn", ",", "\n", "my_optimizer", ",", "\n", "loss_criterion", ",", "\n", "snapshot_dir", ",", "\n", "log_dir", ",", "\n", "i_iter", ",", "\n", "start_epoch", ",", "\n", "best_val_accuracy", "=", "0", ",", "\n", "data_reader_eval", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", ")", ":", "\n", "    ", "report_interval", "=", "cfg", ".", "training_parameters", ".", "report_interval", "\n", "snapshot_interval", "=", "cfg", ".", "training_parameters", ".", "snapshot_interval", "\n", "max_iter", "=", "cfg", ".", "training_parameters", ".", "max_iter", "\n", "\n", "avg_accuracy", "=", "0", "\n", "accuracy_decay", "=", "0.99", "\n", "best_epoch", "=", "0", "\n", "writer", "=", "SummaryWriter", "(", "log_dir", ")", "\n", "best_iter", "=", "i_iter", "\n", "iepoch", "=", "start_epoch", "\n", "snapshot_timer", "=", "Timer", "(", "\"m\"", ")", "\n", "report_timer", "=", "Timer", "(", "\"s\"", ")", "\n", "\n", "while", "i_iter", "<", "max_iter", ":", "\n", "        ", "iepoch", "+=", "1", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "data_reader_trn", ")", ":", "\n", "            ", "i_iter", "+=", "1", "\n", "if", "i_iter", ">", "max_iter", ":", "\n", "                ", "break", "\n", "\n", "", "scheduler", ".", "step", "(", "i_iter", ")", "\n", "\n", "my_optimizer", ".", "zero_grad", "(", ")", "\n", "add_graph", "=", "False", "\n", "scores", ",", "total_loss", ",", "n_sample", "=", "compute_a_batch", "(", "\n", "batch", ",", "\n", "myModel", ",", "\n", "eval_mode", "=", "False", ",", "\n", "loss_criterion", "=", "loss_criterion", ",", "\n", "add_graph", "=", "add_graph", ",", "\n", "log_dir", "=", "log_dir", ",", "\n", ")", "\n", "total_loss", ".", "backward", "(", ")", "\n", "accuracy", "=", "scores", "/", "n_sample", "\n", "avg_accuracy", "+=", "(", "1", "-", "accuracy_decay", ")", "*", "(", "accuracy", "-", "avg_accuracy", ")", "\n", "\n", "clip_gradients", "(", "myModel", ",", "i_iter", ",", "writer", ")", "\n", "my_optimizer", ".", "step", "(", ")", "\n", "\n", "if", "i_iter", "%", "report_interval", "==", "0", ":", "\n", "                ", "save_a_report", "(", "\n", "i_iter", ",", "\n", "total_loss", ".", "data", "[", "0", "]", ",", "\n", "accuracy", ",", "\n", "avg_accuracy", ",", "\n", "report_timer", ",", "\n", "writer", ",", "\n", "data_reader_eval", ",", "\n", "myModel", ",", "\n", "loss_criterion", ",", "\n", ")", "\n", "\n", "", "if", "i_iter", "%", "snapshot_interval", "==", "0", "or", "i_iter", "==", "max_iter", ":", "\n", "                ", "best_val_accuracy", ",", "best_epoch", ",", "best_iter", "=", "save_a_snapshot", "(", "\n", "snapshot_dir", ",", "\n", "i_iter", ",", "\n", "iepoch", ",", "\n", "myModel", ",", "\n", "my_optimizer", ",", "\n", "loss_criterion", ",", "\n", "best_val_accuracy", ",", "\n", "best_epoch", ",", "\n", "best_iter", ",", "\n", "snapshot_timer", ",", "\n", "data_reader_eval", ",", "\n", ")", "\n", "\n", "", "", "", "writer", ".", "export_scalars_to_json", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "\"all_scalars.json\"", ")", ")", "\n", "writer", ".", "close", "(", ")", "\n", "print", "(", "\n", "\"best_acc:%.6f after epoch: %d/%d at iter %d\"", "\n", "%", "(", "best_val_accuracy", ",", "best_epoch", ",", "iepoch", ",", "best_iter", ")", "\n", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.evaluate_a_batch": [[243, 258], ["answer_scores.size", "torch.autograd.Variable", "Engineer.one_stage_run_model", "torch.sum", "torch.sum", "torch.sum", "loss_criterion", "answer_scores.type", "input_answers_variable.cuda.cuda", "Engineer.compute_score_with_logits"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.one_stage_run_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.compute_score_with_logits"], ["", "def", "evaluate_a_batch", "(", "batch", ",", "myModel", ",", "loss_criterion", ")", ":", "\n", "    ", "answer_scores", "=", "batch", "[", "\"ans_scores\"", "]", "\n", "n_sample", "=", "answer_scores", ".", "size", "(", "0", ")", "\n", "\n", "input_answers_variable", "=", "Variable", "(", "answer_scores", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "input_answers_variable", "=", "input_answers_variable", ".", "cuda", "(", ")", "\n", "\n", "", "logit_res", "=", "one_stage_run_model", "(", "batch", ",", "myModel", ")", "\n", "predicted_scores", "=", "torch", ".", "sum", "(", "\n", "compute_score_with_logits", "(", "logit_res", ",", "input_answers_variable", ".", "data", ")", "\n", ")", "\n", "total_loss", "=", "loss_criterion", "(", "logit_res", ",", "input_answers_variable", ")", "\n", "\n", "return", "predicted_scores", "/", "n_sample", ",", "total_loss", ".", "data", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.compute_a_batch": [[260, 276], ["torch.autograd.Variable", "obs_res.cuda.size", "Engineer.one_stage_run_model", "torch.sum", "torch.sum", "torch.sum", "obs_res.cuda.type", "obs_res.cuda.cuda", "Engineer.compute_score_with_logits", "loss_criterion"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.one_stage_run_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.compute_score_with_logits"], ["", "def", "compute_a_batch", "(", "\n", "batch", ",", "my_model", ",", "eval_mode", ",", "loss_criterion", "=", "None", ",", "add_graph", "=", "False", ",", "log_dir", "=", "None", "\n", ")", ":", "\n", "\n", "    ", "obs_res", "=", "batch", "[", "\"ans_scores\"", "]", "\n", "obs_res", "=", "Variable", "(", "obs_res", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "obs_res", "=", "obs_res", ".", "cuda", "(", ")", "\n", "\n", "", "n_sample", "=", "obs_res", ".", "size", "(", "0", ")", "\n", "logit_res", "=", "one_stage_run_model", "(", "batch", ",", "my_model", ",", "eval_mode", ",", "add_graph", ",", "log_dir", ")", "\n", "predicted_scores", "=", "torch", ".", "sum", "(", "compute_score_with_logits", "(", "logit_res", ",", "obs_res", ".", "data", ")", ")", "\n", "\n", "total_loss", "=", "None", "if", "loss_criterion", "is", "None", "else", "loss_criterion", "(", "logit_res", ",", "obs_res", ")", "\n", "\n", "return", "predicted_scores", ",", "total_loss", ",", "n_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.one_stage_eval_model": [[278, 291], ["enumerate", "Engineer.compute_a_batch"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.compute_a_batch"], ["", "def", "one_stage_eval_model", "(", "data_reader_eval", ",", "myModel", ",", "loss_criterion", "=", "None", ")", ":", "\n", "    ", "score_tot", "=", "0", "\n", "n_sample_tot", "=", "0", "\n", "loss_tot", "=", "0", "\n", "for", "idx", ",", "batch", "in", "enumerate", "(", "data_reader_eval", ")", ":", "\n", "        ", "score", ",", "loss", ",", "n_sample", "=", "compute_a_batch", "(", "\n", "batch", ",", "myModel", ",", "eval_mode", "=", "True", ",", "loss_criterion", "=", "loss_criterion", "\n", ")", "\n", "score_tot", "+=", "score", "\n", "n_sample_tot", "+=", "n_sample", "\n", "if", "loss", "is", "not", "None", ":", "\n", "            ", "loss_tot", "+=", "loss", ".", "data", "[", "0", "]", "*", "n_sample", "\n", "", "", "return", "score_tot", "/", "n_sample_tot", ",", "loss_tot", "/", "n_sample_tot", ",", "n_sample_tot", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.one_stage_run_model": [[293, 333], ["torch.autograd.Variable", "torch.autograd.Variable", "my_model", "my_model.eval", "my_model.train", "input_text_seqs.type", "input_txt_variable.cuda.cuda", "image_feat_variable.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "image_feat_variables.append", "image_dim_variable.cuda.cuda", "str", "tmp_image_variable.cuda.cuda", "str"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.train"], ["", "def", "one_stage_run_model", "(", "batch", ",", "my_model", ",", "eval_mode", ",", "add_graph", "=", "False", ",", "log_dir", "=", "None", ")", ":", "\n", "    ", "if", "eval_mode", ":", "\n", "        ", "my_model", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "        ", "my_model", ".", "train", "(", ")", "\n", "\n", "", "input_text_seqs", "=", "batch", "[", "\"input_seq_batch\"", "]", "\n", "input_images", "=", "batch", "[", "\"image_feat_batch\"", "]", "\n", "input_txt_variable", "=", "Variable", "(", "input_text_seqs", ".", "type", "(", "torch", ".", "LongTensor", ")", ")", "\n", "image_feat_variable", "=", "Variable", "(", "input_images", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "input_txt_variable", "=", "input_txt_variable", ".", "cuda", "(", ")", "\n", "image_feat_variable", "=", "image_feat_variable", ".", "cuda", "(", ")", "\n", "\n", "", "image_feat_variables", "=", "[", "image_feat_variable", "]", "\n", "\n", "image_dim_variable", "=", "None", "\n", "if", "\"image_dim\"", "in", "batch", ":", "\n", "        ", "image_dims", "=", "batch", "[", "\"image_dim\"", "]", "\n", "image_dim_variable", "=", "Variable", "(", "image_dims", ",", "requires_grad", "=", "False", ",", "volatile", "=", "False", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "image_dim_variable", "=", "image_dim_variable", ".", "cuda", "(", ")", "\n", "\n", "# check if more than 1 image_feat_batch", "\n", "", "", "i", "=", "1", "\n", "image_feat_key", "=", "\"image_feat_batch_%s\"", "\n", "while", "image_feat_key", "%", "str", "(", "i", ")", "in", "batch", ":", "\n", "        ", "tmp_image_variable", "=", "Variable", "(", "batch", "[", "image_feat_key", "%", "str", "(", "i", ")", "]", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "tmp_image_variable", "=", "tmp_image_variable", ".", "cuda", "(", ")", "\n", "", "image_feat_variables", ".", "append", "(", "tmp_image_variable", ")", "\n", "i", "+=", "1", "\n", "\n", "", "logit_res", "=", "my_model", "(", "\n", "input_question_variable", "=", "input_txt_variable", ",", "\n", "image_dim_variable", "=", "image_dim_variable", ",", "\n", "image_feat_variables", "=", "image_feat_variables", ",", "\n", ")", "\n", "\n", "return", "logit_res", "\n", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Error_analysis.one_stage_model_error_analysis": [[24, 86], ["torch.autograd.Variable", "torch.autograd.Variable", "myModel", "enumerate", "input_text_seqs.type", "torch.autograd.Variable.cuda", "torch.autograd.Variable.cuda", "[].cpu().data.numpy", "torch.max", "torch.max", "answer_dict.idx2word", "valid_answer_variable.cpu().tolist", "valid_answer_variable.cpu().tolist.count", "min", "str", "writer.write", "torch.softmax", "valid_answer_variable.cpu", "[].cpu", "str", "torch.topk", "torch.topk", "str"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.idx2word", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["def", "one_stage_model_error_analysis", "(", "batch", ",", "myModel", ",", "answer_dict", ",", "writer", ")", ":", "\n", "    ", "n_sample", ",", "_", "=", "batch", "[", "\"input_seq_batch\"", "]", ".", "shape", "\n", "input_text_seq_lens", "=", "batch", "[", "\"seq_length_batch\"", "]", "\n", "input_text_seqs", "=", "batch", "[", "\"input_seq_batch\"", "]", "\n", "input_images", "=", "batch", "[", "\"image_feat_batch\"", "]", "\n", "\n", "input_valid_answers", "=", "batch", "[", "\"valid_ans_label_batch\"", "]", "\n", "\n", "input_txt_variable", "=", "Variable", "(", "input_text_seqs", ".", "type", "(", "torch", ".", "LongTensor", ")", ")", "\n", "input_txt_variable", "=", "input_txt_variable", ".", "cuda", "(", ")", "if", "use_cuda", "else", "input_txt_variable", "\n", "\n", "image_feat_variable", "=", "Variable", "(", "input_images", ")", "\n", "image_feat_variable", "=", "(", "\n", "image_feat_variable", ".", "cuda", "(", ")", "if", "use_cuda", "else", "image_feat_variable", "\n", ")", "\n", "\n", "logit_res", "=", "myModel", "(", "\n", "input_question_variable", "=", "input_txt_variable", ",", "\n", "input_text_seq_lens", "=", "input_text_seq_lens", ",", "\n", "image_feat_variable", "=", "image_feat_variable", ",", "\n", ")", "\n", "\n", "predicted_answers", "=", "torch", ".", "topk", "(", "logit_res", ",", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "[", ":", ",", "0", "]", "\n", "predicted_answers_prob", "=", "torch", ".", "max", "(", "F", ".", "softmax", "(", "logit_res", ",", "dim", "=", "1", ")", ",", "dim", "=", "1", ")", "[", "0", "]", "\n", "\n", "score", "=", "0", "\n", "verbose_info", "=", "batch", "[", "\"verbose_info\"", "]", "\n", "\n", "for", "idx", ",", "valid_answer_variable", "in", "enumerate", "(", "input_valid_answers", ")", ":", "\n", "\n", "        ", "pred_ans", "=", "predicted_answers", "[", "idx", "]", "\n", "pred_ans_prob", "=", "predicted_answers_prob", "[", "idx", "]", "\n", "pred_ans_des", "=", "answer_dict", ".", "idx2word", "(", "pred_ans", ")", "\n", "valid_answer", "=", "valid_answer_variable", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "pred_ans_count", "=", "valid_answer", ".", "count", "(", "pred_ans", ")", "\n", "score", "=", "min", "(", "pred_ans_count", "*", "0.3", ",", "1", ")", "\n", "image_name", "=", "verbose_info", "[", "\"image_name\"", "]", "[", "idx", "]", "\n", "question_id", "=", "str", "(", "verbose_info", "[", "\"question_id\"", "]", "[", "idx", "]", ")", "\n", "question", "=", "verbose_info", "[", "\"question_str\"", "]", "[", "idx", "]", "\n", "\n", "writer", ".", "write", "(", "\n", "question_id", "\n", "+", "\"\\t\"", "\n", "+", "image_name", "\n", "+", "\"\\t\"", "\n", "+", "'\"'", "\n", "+", "question", "\n", "+", "'\"'", "\n", "+", "\"\\t\"", "\n", "+", "'\"'", "\n", "+", "pred_ans_des", "\n", "+", "'\"'", "\n", "+", "\"\\t\"", "\n", "+", "str", "(", "pred_ans_count", ")", "\n", "+", "\"\\t\"", "\n", "+", "str", "(", "score", ")", "\n", "+", "\"\\t\"", "\n", "+", "\"%.5f\"", "%", "pred_ans_prob", "\n", "+", "\"\\n\"", "\n", ")", "\n", "\n", "", "return", "score", ",", "n_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.dataset_utils.prepare_data_set": [[15, 82], ["os.path.join", "os.path.join", "zip", "dataset_utils.vqa_concate_dataset.vqa_concate_dataset", "len", "len", "os.path.join", "dataset_utils.dataSet.vqa_dataset", "datasets.append", "os.path.join", "image_feat_dir.split"], "function", ["None"], ["\n", "infos", "=", "infos", "[", ":", "num_bbox", "]", "\n", "sample", "=", "Sample", "(", ")", "\n", "\n", "for", "idx", ",", "info", "in", "enumerate", "(", "infos", ")", ":", "\n", "        ", "bbox", "=", "info", "[", "\"bounding_box\"", "]", "\n", "x", "=", "bbox", "[", "\"top_left_x\"", "]", "\n", "y", "=", "bbox", "[", "\"top_left_y\"", "]", "\n", "width", "=", "bbox", "[", "\"width\"", "]", "\n", "height", "=", "bbox", "[", "\"height\"", "]", "\n", "\n", "coord_tensor", "[", "idx", "]", "[", "0", "]", "=", "x", "\n", "coord_tensor", "[", "idx", "]", "[", "1", "]", "=", "y", "\n", "coord_tensor", "[", "idx", "]", "[", "2", "]", "=", "x", "+", "width", "\n", "coord_tensor", "[", "idx", "]", "[", "3", "]", "=", "y", "+", "height", "\n", "\n", "width_tensor", "[", "idx", "]", "=", "width", "\n", "height_tensor", "[", "idx", "]", "=", "height", "\n", "", "sample", ".", "coordinates", "=", "coord_tensor", "\n", "sample", ".", "width", "=", "width_tensor", "\n", "sample", ".", "height", "=", "height_tensor", "\n", "sample", ".", "bbox_types", "=", "bbox_types", "\n", "\n", "return", "sample", "\n", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.dataset_utils.prepare_train_data_set": [[84, 86], ["dataset_utils.prepare_data_set"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.original.VisualDialogTask.prepare_data_set"], []], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.dataset_utils.prepare_eval_data_set": [[88, 93], ["dataset_utils.prepare_data_set"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.original.VisualDialogTask.prepare_data_set"], []], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.dataset_utils.prepare_test_data_set": [[95, 98], ["dataset_utils.prepare_data_set"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.original.VisualDialogTask.prepare_data_set"], []], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.model_factory.get_two_layer": [[24, 26], ["top_down_bottom_up.intermediate_layer.inter_layer"], "function", ["None"], ["def", "get_two_layer", "(", "img_dim", ")", ":", "\n", "    ", "return", "inter_layer", "(", "img_dim", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.model_factory.prepare_model": [[28, 111], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "top_down_bottom_up.multi_modal_combine.build_modal_combine_module", "top_down_bottom_up.classifier.build_classifier", "top_down_bottom_up.top_down_bottom_up_model.vqa_multi_modal_model", "top_down_bottom_up.question_embeding.build_question_encoding_module", "nn.ModuleList.append", "top_down_bottom_up.image_feature_encoding.build_image_feature_encoding", "nn.ModuleList.append", "torch.ModuleList", "nn.ModuleList.append", "nn.DataParallel.cuda", "torch.cuda.device_count", "torch.cuda.device_count", "torch.DataParallel", "top_down_bottom_up.image_attention.build_image_attention_module", "top_down_bottom_up.image_embedding.image_embedding", "nn.ModuleList.append"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.multi_modal_combine.build_modal_combine_module", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.classifier.build_classifier", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.question_embeding.build_question_encoding_module", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_feature_encoding.build_image_feature_encoding", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.build_image_attention_module"], ["", "def", "prepare_model", "(", "num_vocab_txt", ",", "num_choices", ",", "**", "model_config", ")", ":", "\n", "    ", "image_feat_dim", "=", "model_config", "[", "\"image_feat_dim\"", "]", "\n", "\n", "# generate the list of question embedding models", "\n", "ques_embeding_models_list", "=", "model_config", "[", "\"question_embedding\"", "]", "\n", "question_embeding_models", "=", "nn", ".", "ModuleList", "(", ")", "\n", "final_question_embeding_dim", "=", "0", "\n", "for", "ques_embeding_model", "in", "ques_embeding_models_list", ":", "\n", "        ", "ques_model_key", "=", "ques_embeding_model", "[", "\"method\"", "]", "\n", "ques_model_par", "=", "ques_embeding_model", "[", "\"par\"", "]", "\n", "tmp_model", "=", "build_question_encoding_module", "(", "\n", "ques_model_key", ",", "ques_model_par", ",", "num_vocab", "=", "num_vocab_txt", "\n", ")", "\n", "\n", "question_embeding_models", ".", "append", "(", "tmp_model", ")", "\n", "final_question_embeding_dim", "+=", "tmp_model", ".", "text_out_dim", "\n", "\n", "", "image_feature_encode_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "image_feat_model_par", "in", "model_config", "[", "\"image_feature_encoding\"", "]", ":", "\n", "        ", "image_feat_model", "=", "build_image_feature_encoding", "(", "\n", "image_feat_model_par", "[", "\"method\"", "]", ",", "image_feat_model_par", "[", "\"par\"", "]", ",", "image_feat_dim", "\n", ")", "\n", "image_feature_encode_list", ".", "append", "(", "image_feat_model", ")", "\n", "image_feat_dim", "=", "image_feat_model", ".", "out_dim", "\n", "\n", "# generate the list of image attention models", "\n", "", "image_emdedding_models_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "num_image_feat", "=", "model_config", "[", "\"num_image_feat\"", "]", "\n", "final_image_embedding_dim", "=", "0", "\n", "for", "i_image", "in", "range", "(", "num_image_feat", ")", ":", "\n", "        ", "image_emdedding_models", "=", "nn", ".", "ModuleList", "(", ")", "\n", "image_att_model_list", "=", "model_config", "[", "\"image_embedding_models\"", "]", "\n", "\n", "for", "image_att_model", "in", "image_att_model_list", ":", "\n", "            ", "image_att_model_par", "=", "image_att_model", "\n", "tmp_img_att_model", "=", "build_image_attention_module", "(", "\n", "image_att_model_par", ",", "\n", "image_dim", "=", "image_feat_dim", ",", "\n", "ques_dim", "=", "final_question_embeding_dim", ",", "\n", ")", "\n", "\n", "tmp_img_model", "=", "image_embedding", "(", "tmp_img_att_model", ")", "\n", "final_image_embedding_dim", "+=", "tmp_img_model", ".", "out_dim", "\n", "image_emdedding_models", ".", "append", "(", "tmp_img_model", ")", "\n", "", "image_emdedding_models_list", ".", "append", "(", "image_emdedding_models", ")", "\n", "\n", "", "final_image_embedding_dim", "*=", "image_feat_dim", "\n", "\n", "inter_model", "=", "None", "\n", "\n", "# parse multi-modal combination after image-embedding & question-embedding", "\n", "multi_modal_combine", "=", "build_modal_combine_module", "(", "\n", "model_config", "[", "\"modal_combine\"", "]", "[", "\"method\"", "]", ",", "\n", "model_config", "[", "\"modal_combine\"", "]", "[", "\"par\"", "]", ",", "\n", "final_image_embedding_dim", ",", "\n", "final_question_embeding_dim", ",", "\n", ")", "\n", "\n", "joint_embedding_dim", "=", "multi_modal_combine", ".", "out_dim", "\n", "# generate the classifier", "\n", "classifier", "=", "build_classifier", "(", "\n", "model_config", "[", "\"classifier\"", "]", "[", "\"method\"", "]", ",", "\n", "model_config", "[", "\"classifier\"", "]", "[", "\"par\"", "]", ",", "\n", "in_dim", "=", "joint_embedding_dim", ",", "\n", "out_dim", "=", "num_choices", ",", "\n", ")", "\n", "\n", "my_model", "=", "vqa_multi_modal_model", "(", "\n", "image_emdedding_models_list", ",", "\n", "question_embeding_models", ",", "\n", "multi_modal_combine", ",", "\n", "classifier", ",", "\n", "image_feature_encode_list", ",", "\n", "inter_model", ",", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "        ", "my_model", "=", "my_model", ".", "cuda", "(", ")", "\n", "\n", "", "if", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "        ", "my_model", "=", "nn", ".", "DataParallel", "(", "my_model", ")", "\n", "\n", "", "return", "my_model", "\n", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.evaluate_with_ensemble.answer_json.__init__": [[28, 30], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "answers", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.evaluate_with_ensemble.answer_json.add": [[31, 34], ["evaluate_with_ensemble.answer_json.answers.append"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "ques_id", ",", "ans", ")", ":", "\n", "        ", "res", "=", "{", "\"question_id\"", ":", "ques_id", ",", "\"answer\"", ":", "ans", "}", "\n", "self", ".", "answers", ".", "append", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.evaluate_with_ensemble.compute_score_with_prob": [[36, 40], ["numpy.sum", "prob.max"], "function", ["None"], ["", "", "def", "compute_score_with_prob", "(", "prob", ",", "scores", ")", ":", "\n", "    ", "max_prob_pos", "=", "prob", ".", "max", "(", "axis", "=", "1", ",", "keepdims", "=", "1", ")", "==", "prob", "\n", "score_sum", "=", "np", ".", "sum", "(", "scores", "*", "max_prob_pos", ")", "\n", "return", "score_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.evaluate_with_ensemble.ensemble": [[42, 52], ["train_model.Engineer.masked_unk_softmax", "len", "train_model.Engineer.masked_unk_softmax"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.masked_unk_softmax", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.masked_unk_softmax"], ["", "def", "ensemble", "(", "results", ",", "ans_unk_idx", ")", ":", "\n", "    ", "final_result", "=", "masked_unk_softmax", "(", "results", "[", "0", "]", ",", "dim", "=", "1", ",", "mask_idx", "=", "ans_unk_idx", ")", "\n", "\n", "if", "len", "(", "results", ")", "==", "1", ":", "\n", "        ", "return", "final_result", "\n", "\n", "", "for", "result", "in", "results", "[", "1", ":", "]", ":", "\n", "        ", "final_result", "+=", "masked_unk_softmax", "(", "result", ",", "dim", "=", "1", ",", "mask_idx", "=", "ans_unk_idx", ")", "\n", "\n", "", "return", "final_result", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.evaluate_with_ensemble.ensemble_model": [[54, 73], ["glob.glob", "os.path.join", "open", "_pickle.load", "os.remove", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["", "def", "ensemble_model", "(", "model_dir", ",", "max_model", "=", "None", ",", "clear", "=", "True", ")", ":", "\n", "    ", "count", "=", "0", "\n", "final_result", "=", "None", "\n", "for", "model_file", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "tmp_model_file_name_pattern", ")", ")", ":", "\n", "        ", "count", "+=", "1", "\n", "if", "max_model", "is", "not", "None", "and", "count", ">", "max_model", ":", "\n", "            ", "break", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "model_file", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "pred_result", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "if", "final_result", "is", "None", ":", "\n", "            ", "final_result", "=", "pred_result", "\n", "", "else", ":", "\n", "            ", "final_result", "+=", "pred_result", "\n", "\n", "# remove tmp file after ensembling", "\n", "", "if", "clear", ":", "\n", "            ", "os", ".", "remove", "(", "os", ".", "path", ".", "join", "(", "model_dir", ",", "model_file", ")", ")", "\n", "\n", "", "", "return", "final_result", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.LogitBinaryCrossEntropy.__init__": [[30, 32], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "LogitBinaryCrossEntropy", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.LogitBinaryCrossEntropy.forward": [[33, 39], ["torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "target_score.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pred_score", ",", "target_score", ",", "weights", "=", "None", ")", ":", "\n", "        ", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred_score", ",", "target_score", ",", "size_average", "=", "True", "\n", ")", "\n", "loss", "=", "loss", "*", "target_score", ".", "size", "(", "1", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.weighted_softmax_loss.__init__": [[52, 54], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "weighted_softmax_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.weighted_softmax_loss.forward": [[55, 66], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "Loss.kl_div", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "kl_div.size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.kl_div"], ["", "def", "forward", "(", "self", ",", "pred_score", ",", "target_score", ")", ":", "\n", "        ", "tar_sum", "=", "torch", ".", "sum", "(", "target_score", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "tar_sum_is_0", "=", "torch", ".", "eq", "(", "tar_sum", ",", "0", ")", "\n", "tar_sum", ".", "masked_fill_", "(", "tar_sum_is_0", ",", "1.0e-06", ")", "\n", "tar", "=", "target_score", "/", "tar_sum", "\n", "\n", "res", "=", "F", ".", "log_softmax", "(", "pred_score", ",", "dim", "=", "1", ")", "\n", "loss", "=", "kl_div", "(", "res", ",", "tar", ")", "\n", "loss", "=", "loss", "*", "tar_sum", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "loss", ".", "size", "(", "0", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.SoftmaxKlDivLoss.__init__": [[69, 71], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SoftmaxKlDivLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.SoftmaxKlDivLoss.forward": [[72, 82], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "Loss.kl_div", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "kl_div.size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.kl_div"], ["", "def", "forward", "(", "self", ",", "pred_score", ",", "target_score", ")", ":", "\n", "        ", "tar_sum", "=", "torch", ".", "sum", "(", "target_score", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "tar_sum_is_0", "=", "torch", ".", "eq", "(", "tar_sum", ",", "0", ")", "\n", "tar_sum", ".", "masked_fill_", "(", "tar_sum_is_0", ",", "1.0e-06", ")", "\n", "tar", "=", "target_score", "/", "tar_sum", "\n", "\n", "res", "=", "F", ".", "log_softmax", "(", "pred_score", ",", "dim", "=", "1", ")", "\n", "loss", "=", "kl_div", "(", "res", ",", "tar", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "/", "loss", ".", "size", "(", "0", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.wrong_loss.__init__": [[85, 87], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "wrong_loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.wrong_loss.forward": [[88, 98], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.kl_div", "torch.kl_div", "torch.kl_div", "target_score.size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.kl_div", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.kl_div", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.kl_div"], ["", "def", "forward", "(", "self", ",", "pred_score", ",", "target_score", ")", ":", "\n", "        ", "tar_sum", "=", "torch", ".", "sum", "(", "target_score", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "tar_sum_is_0", "=", "torch", ".", "eq", "(", "tar_sum", ",", "0", ")", "\n", "tar_sum", ".", "masked_fill_", "(", "tar_sum_is_0", ",", "1.0e-06", ")", "\n", "tar", "=", "target_score", "/", "tar_sum", "\n", "\n", "res", "=", "F", ".", "log_softmax", "(", "pred_score", ",", "dim", "=", "1", ")", "\n", "loss", "=", "F", ".", "kl_div", "(", "res", ",", "tar", ",", "size_average", "=", "True", ")", "\n", "loss", "*=", "target_score", ".", "size", "(", "1", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.CombinedLoss.__init__": [[101, 104], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight_softmax", ")", ":", "\n", "        ", "super", "(", "CombinedLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight_softmax", "=", "weight_softmax", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.CombinedLoss.forward": [[105, 123], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.sum.masked_fill_", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "Loss.kl_div", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "target_score.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "kl_div.size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.kl_div"], ["", "def", "forward", "(", "self", ",", "pred_score", ",", "target_score", ")", ":", "\n", "        ", "tar_sum", "=", "torch", ".", "sum", "(", "target_score", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "tar_sum_is_0", "=", "torch", ".", "eq", "(", "tar_sum", ",", "0", ")", "\n", "tar_sum", ".", "masked_fill_", "(", "tar_sum_is_0", ",", "1.0e-06", ")", "\n", "tar", "=", "target_score", "/", "tar_sum", "\n", "\n", "res", "=", "F", ".", "log_softmax", "(", "pred_score", ",", "dim", "=", "1", ")", "\n", "loss1", "=", "kl_div", "(", "res", ",", "tar", ")", "\n", "loss1", "=", "torch", ".", "sum", "(", "loss1", ")", "/", "loss1", ".", "size", "(", "0", ")", "\n", "\n", "loss2", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "\n", "pred_score", ",", "target_score", ",", "size_average", "=", "True", "\n", ")", "\n", "loss2", "*=", "target_score", ".", "size", "(", "1", ")", "\n", "\n", "loss", "=", "self", ".", "weight_softmax", "*", "loss1", "+", "loss2", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.get_loss_criterion": [[14, 27], ["Loss.LogitBinaryCrossEntropy", "Loss.SoftmaxKlDivLoss", "Loss.wrong_loss", "Loss.CombinedLoss"], "function", ["None"], ["def", "get_loss_criterion", "(", "loss_config", ")", ":", "\n", "    ", "if", "loss_config", "==", "\"logitBCE\"", ":", "\n", "        ", "loss_criterion", "=", "LogitBinaryCrossEntropy", "(", ")", "\n", "", "elif", "loss_config", "==", "\"softmaxKL\"", ":", "\n", "        ", "loss_criterion", "=", "SoftmaxKlDivLoss", "(", ")", "\n", "", "elif", "loss_config", "==", "\"wrong\"", ":", "\n", "        ", "loss_criterion", "=", "wrong_loss", "(", ")", "\n", "", "elif", "loss_config", "==", "\"combined\"", ":", "\n", "        ", "loss_criterion", "=", "CombinedLoss", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "return", "loss_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Loss.kl_div": [[41, 49], ["torch.eq", "torch.eq", "torch.eq", "y.data.masked_fill_", "torch.log", "torch.log", "torch.log", "y.data.masked_fill_", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "def", "kl_div", "(", "log_x", ",", "y", ")", ":", "\n", "    ", "y_is_0", "=", "torch", ".", "eq", "(", "y", ".", "data", ",", "0", ")", "\n", "y", ".", "data", ".", "masked_fill_", "(", "y_is_0", ",", "1", ")", "\n", "log_y", "=", "torch", ".", "log", "(", "y", ")", "\n", "y", ".", "data", ".", "masked_fill_", "(", "y_is_0", ",", "0", ")", "\n", "res", "=", "y", "*", "(", "log_y", "-", "log_x", ")", "\n", "\n", "return", "torch", ".", "sum", "(", "res", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.helper.answer_json.__init__": [[20, 22], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "answers", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.helper.answer_json.add": [[23, 26], ["helper.answer_json.answers.append"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "ques_id", ",", "ans", ")", ":", "\n", "        ", "res", "=", "{", "\"question_id\"", ":", "ques_id", ",", "\"answer\"", ":", "ans", "}", "\n", "self", ".", "answers", ".", "append", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.helper.build_model": [[28, 37], ["len", "train_model.model_factory.prepare_model", "[].split"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.model_factory.prepare_model"], ["", "", "def", "build_model", "(", "config", ",", "dataset", ")", ":", "\n", "    ", "num_vocab_txt", "=", "dataset", ".", "vocab_dict", ".", "num_vocab", "\n", "num_choices", "=", "dataset", ".", "answer_dict", ".", "num_vocab", "\n", "\n", "num_image_feat", "=", "len", "(", "config", "[", "\"data\"", "]", "[", "\"image_feat_train\"", "]", "[", "0", "]", ".", "split", "(", "\",\"", ")", ")", "\n", "my_model", "=", "prepare_model", "(", "\n", "num_vocab_txt", ",", "num_choices", ",", "**", "config", "[", "\"model\"", "]", ",", "num_image_feat", "=", "num_image_feat", "\n", ")", "\n", "return", "my_model", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.helper.run_model": [[39, 62], ["timeit.default_timer", "enumerate", "numpy.vstack", "verbose_info[].cpu().numpy().tolist", "train_model.Engineer.one_stage_run_model", "train_model.Engineer.masked_unk_softmax", "softmax_res.data.cpu().numpy().astype.data.cpu().numpy().astype", "softmax_tot.append", "timeit.default_timer", "timeit.default_timer", "print", "sys.stdout.flush", "verbose_info[].cpu().numpy", "softmax_res.data.cpu().numpy().astype.data.cpu().numpy", "verbose_info[].cpu", "softmax_res.data.cpu().numpy().astype.data.cpu"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.one_stage_run_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.masked_unk_softmax", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print"], ["", "def", "run_model", "(", "current_model", ",", "data_reader", ",", "UNK_idx", "=", "0", ")", ":", "\n", "    ", "softmax_tot", "=", "[", "]", "\n", "q_id_tot", "=", "[", "]", "\n", "\n", "start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "data_reader", ")", ":", "\n", "        ", "if", "(", "i", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "            ", "end", "=", "timeit", ".", "default_timer", "(", ")", "\n", "time", "=", "end", "-", "start", "\n", "start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "print", "(", "\" process batch %d for test for %.1f s\"", "%", "(", "i", "+", "1", ",", "time", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "verbose_info", "=", "batch", "[", "\"verbose_info\"", "]", "\n", "q_ids", "=", "verbose_info", "[", "\"question_id\"", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "logit_res", "=", "one_stage_run_model", "(", "batch", ",", "current_model", ",", "eval_mode", "=", "True", ")", "\n", "softmax_res", "=", "masked_unk_softmax", "(", "logit_res", ",", "dim", "=", "1", ",", "mask_idx", "=", "UNK_idx", ")", "\n", "softmax_res", "=", "softmax_res", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "np", ".", "float16", ")", "\n", "q_id_tot", "+=", "q_ids", "\n", "softmax_tot", ".", "append", "(", "softmax_res", ")", "\n", "", "softmax_result", "=", "np", ".", "vstack", "(", "softmax_tot", ")", "\n", "\n", "return", "q_id_tot", ",", "softmax_result", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.helper.print_result": [[64, 83], ["numpy.argmax", "helper.answer_json", "enumerate", "ans_dic.idx2word", "helper.answer_json.add", "open", "json.dump", "open", "_pickle.dump", "_pickle.dump", "_pickle.dump"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.idx2word", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.helper.answer_json.add"], ["", "def", "print_result", "(", "\n", "question_ids", ",", "soft_max_result", ",", "ans_dic", ",", "out_file", ",", "json_only", "=", "True", ",", "pkl_res_file", "=", "None", "\n", ")", ":", "\n", "    ", "predicted_answers", "=", "np", ".", "argmax", "(", "soft_max_result", ",", "axis", "=", "1", ")", "\n", "\n", "if", "not", "json_only", ":", "\n", "        ", "with", "open", "(", "pkl_res_file", ",", "\"wb\"", ")", "as", "writeFile", ":", "\n", "            ", "pickle", ".", "dump", "(", "soft_max_result", ",", "writeFile", ")", "\n", "pickle", ".", "dump", "(", "question_ids", ",", "writeFile", ")", "\n", "pickle", ".", "dump", "(", "ans_dic", ",", "writeFile", ")", "\n", "\n", "", "", "ans_json_out", "=", "answer_json", "(", ")", "\n", "for", "idx", ",", "pred_idx", "in", "enumerate", "(", "predicted_answers", ")", ":", "\n", "        ", "question_id", "=", "question_ids", "[", "idx", "]", "\n", "pred_ans", "=", "ans_dic", ".", "idx2word", "(", "pred_idx", ")", "\n", "ans_json_out", ".", "add", "(", "question_id", ",", "pred_ans", ")", "\n", "\n", "", "with", "open", "(", "out_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "ans_json_out", ".", "answers", ",", "f", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.eval_utils.get_final_validation": [[15, 37], ["torch.utils.data.DataLoader", "sorted", "os.path.join", "torch.load", "enumerate", "print", "os.listdir", "file.startswith", "eval_model"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print"], ["def", "get_final_validation", "(", "data_set_val", ",", "batch_size", ",", "snapshot_dir", ",", "eval_model", ")", ":", "\n", "    ", "final_val_data_reader", "=", "DataLoader", "(", "\n", "data_set_val", ",", "shuffle", "=", "False", ",", "batch_size", "=", "batch_size", "\n", ")", "\n", "\n", "files", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "snapshot_dir", ",", "file", ")", "\n", "for", "file", "in", "os", ".", "listdir", "(", "snapshot_dir", ")", "\n", "if", "file", ".", "startswith", "(", "\"model\"", ")", "\n", "]", "\n", "\n", "for", "model_file", "in", "sorted", "(", "files", ",", "key", "=", "os", ".", "path", ".", "getctime", ",", "reverse", "=", "True", ")", ":", "\n", "        ", "current_model", "=", "torch", ".", "load", "(", "model_file", ")", "\n", "total_sample", "=", "0", "\n", "total_score", "=", "0", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "final_val_data_reader", ")", ":", "\n", "            ", "score", ",", "n_sample", ",", "_", "=", "eval_model", "(", "batch", ",", "current_model", ")", "\n", "total_sample", "+=", "n_sample", "\n", "total_score", "+=", "score", "\n", "\n", "", "acc", "=", "total_score", "/", "total_sample", "\n", "print", "(", "model_file", ",", "\": %.6f\"", "%", "acc", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.__init__": [[14, 185], ["re.compile", "re.compile"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "q_2_annotation", ",", "q_2_answer", ",", "n", "=", "2", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "self", ".", "accuracy", "=", "{", "}", "\n", "self", ".", "evalQA", "=", "{", "}", "\n", "self", ".", "evalQuesType", "=", "{", "}", "\n", "self", ".", "evalAnsType", "=", "{", "}", "\n", "self", ".", "q_2_annotat", "=", "q_2_annotation", "\n", "self", ".", "q_2_ans", "=", "q_2_answer", "\n", "\n", "self", ".", "contractions", "=", "{", "\n", "\"aint\"", ":", "\"ain't\"", ",", "\n", "\"arent\"", ":", "\"aren't\"", ",", "\n", "\"cant\"", ":", "\"can't\"", ",", "\n", "\"couldve\"", ":", "\"could've\"", ",", "\n", "\"couldnt\"", ":", "\"couldn't\"", ",", "\n", "\"couldn'tve\"", ":", "\"couldn't've\"", ",", "\n", "\"couldnt've\"", ":", "\"couldn't've\"", ",", "\n", "\"didnt\"", ":", "\"didn't\"", ",", "\n", "\"doesnt\"", ":", "\"doesn't\"", ",", "\n", "\"dont\"", ":", "\"don't\"", ",", "\n", "\"hadnt\"", ":", "\"hadn't\"", ",", "\n", "\"hadnt've\"", ":", "\"hadn't've\"", ",", "\n", "\"hadn'tve\"", ":", "\"hadn't've\"", ",", "\n", "\"hasnt\"", ":", "\"hasn't\"", ",", "\n", "\"havent\"", ":", "\"haven't\"", ",", "\n", "\"hed\"", ":", "\"he'd\"", ",", "\n", "\"hed've\"", ":", "\"he'd've\"", ",", "\n", "\"he'dve\"", ":", "\"he'd've\"", ",", "\n", "\"hes\"", ":", "\"he's\"", ",", "\n", "\"howd\"", ":", "\"how'd\"", ",", "\n", "\"howll\"", ":", "\"how'll\"", ",", "\n", "\"hows\"", ":", "\"how's\"", ",", "\n", "\"Id've\"", ":", "\"I'd've\"", ",", "\n", "\"I'dve\"", ":", "\"I'd've\"", ",", "\n", "\"Im\"", ":", "\"I'm\"", ",", "\n", "\"Ive\"", ":", "\"I've\"", ",", "\n", "\"isnt\"", ":", "\"isn't\"", ",", "\n", "\"itd\"", ":", "\"it'd\"", ",", "\n", "\"itd've\"", ":", "\"it'd've\"", ",", "\n", "\"it'dve\"", ":", "\"it'd've\"", ",", "\n", "\"itll\"", ":", "\"it'll\"", ",", "\n", "\"let's\"", ":", "\"let's\"", ",", "\n", "\"maam\"", ":", "\"ma'am\"", ",", "\n", "\"mightnt\"", ":", "\"mightn't\"", ",", "\n", "\"mightnt've\"", ":", "\"mightn't've\"", ",", "\n", "\"mightn'tve\"", ":", "\"mightn't've\"", ",", "\n", "\"mightve\"", ":", "\"might've\"", ",", "\n", "\"mustnt\"", ":", "\"mustn't\"", ",", "\n", "\"mustve\"", ":", "\"must've\"", ",", "\n", "\"neednt\"", ":", "\"needn't\"", ",", "\n", "\"notve\"", ":", "\"not've\"", ",", "\n", "\"oclock\"", ":", "\"o'clock\"", ",", "\n", "\"oughtnt\"", ":", "\"oughtn't\"", ",", "\n", "\"ow's'at\"", ":", "\"'ow's'at\"", ",", "\n", "\"'ows'at\"", ":", "\"'ow's'at\"", ",", "\n", "\"'ow'sat\"", ":", "\"'ow's'at\"", ",", "\n", "\"shant\"", ":", "\"shan't\"", ",", "\n", "\"shed've\"", ":", "\"she'd've\"", ",", "\n", "\"she'dve\"", ":", "\"she'd've\"", ",", "\n", "\"she's\"", ":", "\"she's\"", ",", "\n", "\"shouldve\"", ":", "\"should've\"", ",", "\n", "\"shouldnt\"", ":", "\"shouldn't\"", ",", "\n", "\"shouldnt've\"", ":", "\"shouldn't've\"", ",", "\n", "\"shouldn'tve\"", ":", "\"shouldn't've\"", ",", "\n", "\"somebody'd\"", ":", "\"somebodyd\"", ",", "\n", "\"somebodyd've\"", ":", "\"somebody'd've\"", ",", "\n", "\"somebody'dve\"", ":", "\"somebody'd've\"", ",", "\n", "\"somebodyll\"", ":", "\"somebody'll\"", ",", "\n", "\"somebodys\"", ":", "\"somebody's\"", ",", "\n", "\"someoned\"", ":", "\"someone'd\"", ",", "\n", "\"someoned've\"", ":", "\"someone'd've\"", ",", "\n", "\"someone'dve\"", ":", "\"someone'd've\"", ",", "\n", "\"someonell\"", ":", "\"someone'll\"", ",", "\n", "\"someones\"", ":", "\"someone's\"", ",", "\n", "\"somethingd\"", ":", "\"something'd\"", ",", "\n", "\"somethingd've\"", ":", "\"something'd've\"", ",", "\n", "\"something'dve\"", ":", "\"something'd've\"", ",", "\n", "\"somethingll\"", ":", "\"something'll\"", ",", "\n", "\"thats\"", ":", "\"that's\"", ",", "\n", "\"thered\"", ":", "\"there'd\"", ",", "\n", "\"thered've\"", ":", "\"there'd've\"", ",", "\n", "\"there'dve\"", ":", "\"there'd've\"", ",", "\n", "\"therere\"", ":", "\"there're\"", ",", "\n", "\"theres\"", ":", "\"there's\"", ",", "\n", "\"theyd\"", ":", "\"they'd\"", ",", "\n", "\"theyd've\"", ":", "\"they'd've\"", ",", "\n", "\"they'dve\"", ":", "\"they'd've\"", ",", "\n", "\"theyll\"", ":", "\"they'll\"", ",", "\n", "\"theyre\"", ":", "\"they're\"", ",", "\n", "\"theyve\"", ":", "\"they've\"", ",", "\n", "\"twas\"", ":", "\"'twas\"", ",", "\n", "\"wasnt\"", ":", "\"wasn't\"", ",", "\n", "\"wed've\"", ":", "\"we'd've\"", ",", "\n", "\"we'dve\"", ":", "\"we'd've\"", ",", "\n", "\"weve\"", ":", "\"we've\"", ",", "\n", "\"werent\"", ":", "\"weren't\"", ",", "\n", "\"whatll\"", ":", "\"what'll\"", ",", "\n", "\"whatre\"", ":", "\"what're\"", ",", "\n", "\"whats\"", ":", "\"what's\"", ",", "\n", "\"whatve\"", ":", "\"what've\"", ",", "\n", "\"whens\"", ":", "\"when's\"", ",", "\n", "\"whered\"", ":", "\"where'd\"", ",", "\n", "\"wheres\"", ":", "\"where's\"", ",", "\n", "\"whereve\"", ":", "\"where've\"", ",", "\n", "\"whod\"", ":", "\"who'd\"", ",", "\n", "\"whod've\"", ":", "\"who'd've\"", ",", "\n", "\"who'dve\"", ":", "\"who'd've\"", ",", "\n", "\"wholl\"", ":", "\"who'll\"", ",", "\n", "\"whos\"", ":", "\"who's\"", ",", "\n", "\"whove\"", ":", "\"who've\"", ",", "\n", "\"whyll\"", ":", "\"why'll\"", ",", "\n", "\"whyre\"", ":", "\"why're\"", ",", "\n", "\"whys\"", ":", "\"why's\"", ",", "\n", "\"wont\"", ":", "\"won't\"", ",", "\n", "\"wouldve\"", ":", "\"would've\"", ",", "\n", "\"wouldnt\"", ":", "\"wouldn't\"", ",", "\n", "\"wouldnt've\"", ":", "\"wouldn't've\"", ",", "\n", "\"wouldn'tve\"", ":", "\"wouldn't've\"", ",", "\n", "\"yall\"", ":", "\"y'all\"", ",", "\n", "\"yall'll\"", ":", "\"y'all'll\"", ",", "\n", "\"y'allll\"", ":", "\"y'all'll\"", ",", "\n", "\"yall'd've\"", ":", "\"y'all'd've\"", ",", "\n", "\"y'alld've\"", ":", "\"y'all'd've\"", ",", "\n", "\"y'all'dve\"", ":", "\"y'all'd've\"", ",", "\n", "\"youd\"", ":", "\"you'd\"", ",", "\n", "\"youd've\"", ":", "\"you'd've\"", ",", "\n", "\"you'dve\"", ":", "\"you'd've\"", ",", "\n", "\"youll\"", ":", "\"you'll\"", ",", "\n", "\"youre\"", ":", "\"you're\"", ",", "\n", "\"youve\"", ":", "\"you've\"", ",", "\n", "}", "\n", "self", ".", "manualMap", "=", "{", "\n", "\"none\"", ":", "\"0\"", ",", "\n", "\"zero\"", ":", "\"0\"", ",", "\n", "\"one\"", ":", "\"1\"", ",", "\n", "\"two\"", ":", "\"2\"", ",", "\n", "\"three\"", ":", "\"3\"", ",", "\n", "\"four\"", ":", "\"4\"", ",", "\n", "\"five\"", ":", "\"5\"", ",", "\n", "\"six\"", ":", "\"6\"", ",", "\n", "\"seven\"", ":", "\"7\"", ",", "\n", "\"eight\"", ":", "\"8\"", ",", "\n", "\"nine\"", ":", "\"9\"", ",", "\n", "\"ten\"", ":", "\"10\"", ",", "\n", "}", "\n", "self", ".", "articles", "=", "[", "\"a\"", ",", "\"an\"", ",", "\"the\"", "]", "\n", "\n", "self", ".", "periodStrip", "=", "re", ".", "compile", "(", "\"(?!<=\\d)(\\.)(?!\\d)\"", ")", "\n", "self", ".", "commaStrip", "=", "re", ".", "compile", "(", "\"(\\d)(\\,)(\\d)\"", ")", "\n", "self", ".", "punct", "=", "[", "\n", "\";\"", ",", "\n", "r\"/\"", ",", "\n", "\"[\"", ",", "\n", "\"]\"", ",", "\n", "'\"'", ",", "\n", "\"{\"", ",", "\n", "\"}\"", ",", "\n", "\"(\"", ",", "\n", "\")\"", ",", "\n", "\"=\"", ",", "\n", "\"+\"", ",", "\n", "\"\\\\\"", ",", "\n", "\"_\"", ",", "\n", "\"-\"", ",", "\n", "\">\"", ",", "\n", "\"<\"", ",", "\n", "\"@\"", ",", "\n", "\"`\"", ",", "\n", "\",\"", ",", "\n", "\"?\"", ",", "\n", "\"!\"", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.evaluate": [[187, 241], ["vqaEval.VQAEval.q_2_ans.keys", "vqaEval.VQAEval.setAccuracy", "print", "vqaEval.VQAEval.replace", "vqaEval.VQAEval.replace", "vqaEval.VQAEval.strip", "vqaEval.VQAEval.processPunctuation", "vqaEval.VQAEval.processDigitArticle", "accQA.append", "accQuesType[].append", "accAnsType[].append", "vqaEval.VQAEval.setEvalQA", "vqaEval.VQAEval.setEvalQuesType", "vqaEval.VQAEval.setEvalAnsType", "len", "min", "gtAcc.append", "float", "len", "vqaEval.VQAEval.updateProgress", "set", "vqaEval.VQAEval.processPunctuation", "sum", "float", "float", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.setAccuracy", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.processPunctuation", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.processDigitArticle", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.setEvalQA", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.setEvalQuesType", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.setEvalAnsType", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.updateProgress", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.processPunctuation"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "\n", "        ", "gts", "=", "self", ".", "q_2_annotat", "\n", "res", "=", "self", ".", "q_2_ans", "\n", "quesIds", "=", "self", ".", "q_2_ans", ".", "keys", "(", ")", "\n", "\n", "# =================================================", "\n", "# Compute accuracy", "\n", "# =================================================", "\n", "accQA", "=", "[", "]", "\n", "accQuesType", "=", "{", "}", "\n", "accAnsType", "=", "{", "}", "\n", "print", "\n", "\"computing accuracy\"", "\n", "step", "=", "0", "\n", "for", "quesId", "in", "quesIds", ":", "\n", "            ", "resAns", "=", "res", "[", "quesId", "]", "[", "\"answer\"", "]", "\n", "resAns", "=", "resAns", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", "\n", "resAns", "=", "resAns", ".", "replace", "(", "\"\\t\"", ",", "\" \"", ")", "\n", "resAns", "=", "resAns", ".", "strip", "(", ")", "\n", "resAns", "=", "self", ".", "processPunctuation", "(", "resAns", ")", "\n", "resAns", "=", "self", ".", "processDigitArticle", "(", "resAns", ")", "\n", "gtAcc", "=", "[", "]", "\n", "gtAnswers", "=", "[", "ans", "[", "\"answer\"", "]", "for", "ans", "in", "gts", "[", "quesId", "]", "[", "\"answers\"", "]", "]", "\n", "if", "len", "(", "set", "(", "gtAnswers", ")", ")", ">", "1", ":", "\n", "                ", "for", "ansDic", "in", "gts", "[", "quesId", "]", "[", "\"answers\"", "]", ":", "\n", "                    ", "ansDic", "[", "\"answer\"", "]", "=", "self", ".", "processPunctuation", "(", "ansDic", "[", "\"answer\"", "]", ")", "\n", "", "", "for", "gtAnsDatum", "in", "gts", "[", "quesId", "]", "[", "\"answers\"", "]", ":", "\n", "                ", "otherGTAns", "=", "[", "\n", "item", "for", "item", "in", "gts", "[", "quesId", "]", "[", "\"answers\"", "]", "if", "item", "!=", "gtAnsDatum", "\n", "]", "\n", "matchingAns", "=", "[", "item", "for", "item", "in", "otherGTAns", "if", "item", "[", "\"answer\"", "]", "==", "resAns", "]", "\n", "acc", "=", "min", "(", "1", ",", "float", "(", "len", "(", "matchingAns", ")", ")", "/", "3", ")", "\n", "gtAcc", ".", "append", "(", "acc", ")", "\n", "", "quesType", "=", "gts", "[", "quesId", "]", "[", "\"question_type\"", "]", "\n", "ansType", "=", "gts", "[", "quesId", "]", "[", "\"answer_type\"", "]", "\n", "avgGTAcc", "=", "float", "(", "sum", "(", "gtAcc", ")", ")", "/", "len", "(", "gtAcc", ")", "\n", "accQA", ".", "append", "(", "avgGTAcc", ")", "\n", "if", "quesType", "not", "in", "accQuesType", ":", "\n", "                ", "accQuesType", "[", "quesType", "]", "=", "[", "]", "\n", "", "accQuesType", "[", "quesType", "]", ".", "append", "(", "avgGTAcc", ")", "\n", "if", "ansType", "not", "in", "accAnsType", ":", "\n", "                ", "accAnsType", "[", "ansType", "]", "=", "[", "]", "\n", "", "accAnsType", "[", "ansType", "]", ".", "append", "(", "avgGTAcc", ")", "\n", "self", ".", "setEvalQA", "(", "quesId", ",", "avgGTAcc", ")", "\n", "self", ".", "setEvalQuesType", "(", "quesId", ",", "quesType", ",", "avgGTAcc", ")", "\n", "self", ".", "setEvalAnsType", "(", "quesId", ",", "ansType", ",", "avgGTAcc", ")", "\n", "if", "step", "%", "100", "==", "0", ":", "\n", "                ", "self", ".", "updateProgress", "(", "step", "/", "float", "(", "len", "(", "quesIds", ")", ")", ")", "\n", "", "step", "=", "step", "+", "1", "\n", "\n", "", "self", ".", "setAccuracy", "(", "accQA", ",", "accQuesType", ",", "accAnsType", ")", "\n", "\n", "print", "(", "\"Done computing accuracy\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.processPunctuation": [[242, 253], ["vqaEval.VQAEval.periodStrip.sub", "outText.replace.replace.replace", "outText.replace.replace.replace", "re.search"], "methods", ["None"], ["", "def", "processPunctuation", "(", "self", ",", "inText", ")", ":", "\n", "        ", "outText", "=", "inText", "\n", "for", "p", "in", "self", ".", "punct", ":", "\n", "            ", "if", "(", "p", "+", "\" \"", "in", "inText", "or", "\" \"", "+", "p", "in", "inText", ")", "or", "(", "\n", "re", ".", "search", "(", "self", ".", "commaStrip", ",", "inText", ")", "is", "not", "None", "\n", ")", ":", "\n", "                ", "outText", "=", "outText", ".", "replace", "(", "p", ",", "\"\"", ")", "\n", "", "else", ":", "\n", "                ", "outText", "=", "outText", ".", "replace", "(", "p", ",", "\" \"", ")", "\n", "", "", "outText", "=", "self", ".", "periodStrip", ".", "sub", "(", "\"\"", ",", "outText", ",", "re", ".", "UNICODE", ")", "\n", "return", "outText", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.processDigitArticle": [[254, 268], ["inText.lower().split", "enumerate", "vqaEval.VQAEval.manualMap.setdefault", "inText.lower", "outText.append"], "methods", ["None"], ["", "def", "processDigitArticle", "(", "self", ",", "inText", ")", ":", "\n", "        ", "outText", "=", "[", "]", "\n", "tempText", "=", "inText", ".", "lower", "(", ")", ".", "split", "(", ")", "\n", "for", "word", "in", "tempText", ":", "\n", "            ", "word", "=", "self", ".", "manualMap", ".", "setdefault", "(", "word", ",", "word", ")", "\n", "if", "word", "not", "in", "self", ".", "articles", ":", "\n", "                ", "outText", ".", "append", "(", "word", ")", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "for", "wordId", ",", "word", "in", "enumerate", "(", "outText", ")", ":", "\n", "            ", "if", "word", "in", "self", ".", "contractions", ":", "\n", "                ", "outText", "[", "wordId", "]", "=", "self", ".", "contractions", "[", "word", "]", "\n", "", "", "outText", "=", "\" \"", ".", "join", "(", "outText", ")", "\n", "return", "outText", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.setAccuracy": [[269, 283], ["round", "round", "round", "len", "float", "len", "len", "sum", "float", "float", "sum", "sum"], "methods", ["None"], ["", "def", "setAccuracy", "(", "self", ",", "accQA", ",", "accQuesType", ",", "accAnsType", ")", ":", "\n", "        ", "self", ".", "accuracy", "[", "\"overall\"", "]", "=", "round", "(", "100", "*", "float", "(", "sum", "(", "accQA", ")", ")", "/", "len", "(", "accQA", ")", ",", "self", ".", "n", ")", "\n", "self", ".", "accuracy", "[", "\"perQuestionType\"", "]", "=", "{", "\n", "quesType", ":", "round", "(", "\n", "100", "*", "float", "(", "sum", "(", "accQuesType", "[", "quesType", "]", ")", ")", "/", "len", "(", "accQuesType", "[", "quesType", "]", ")", ",", "\n", "self", ".", "n", ",", "\n", ")", "\n", "for", "quesType", "in", "accQuesType", "\n", "}", "\n", "self", ".", "accuracy", "[", "\"perAnswerType\"", "]", "=", "{", "\n", "ansType", ":", "round", "(", "\n", "100", "*", "float", "(", "sum", "(", "accAnsType", "[", "ansType", "]", ")", ")", "/", "len", "(", "accAnsType", "[", "ansType", "]", ")", ",", "self", ".", "n", "\n", ")", "\n", "for", "ansType", "in", "accAnsType", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.setEvalQA": [[285, 287], ["round"], "methods", ["None"], ["", "def", "setEvalQA", "(", "self", ",", "quesId", ",", "acc", ")", ":", "\n", "        ", "self", ".", "evalQA", "[", "quesId", "]", "=", "round", "(", "100", "*", "acc", ",", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.setEvalQuesType": [[288, 292], ["round"], "methods", ["None"], ["", "def", "setEvalQuesType", "(", "self", ",", "quesId", ",", "quesType", ",", "acc", ")", ":", "\n", "        ", "if", "quesType", "not", "in", "self", ".", "evalQuesType", ":", "\n", "            ", "self", ".", "evalQuesType", "[", "quesType", "]", "=", "{", "}", "\n", "", "self", ".", "evalQuesType", "[", "quesType", "]", "[", "quesId", "]", "=", "round", "(", "100", "*", "acc", ",", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.setEvalAnsType": [[293, 297], ["round"], "methods", ["None"], ["", "def", "setEvalAnsType", "(", "self", ",", "quesId", ",", "ansType", ",", "acc", ")", ":", "\n", "        ", "if", "ansType", "not", "in", "self", ".", "evalAnsType", ":", "\n", "            ", "self", ".", "evalAnsType", "[", "ansType", "]", "=", "{", "}", "\n", "", "self", ".", "evalAnsType", "[", "ansType", "]", "[", "quesId", "]", "=", "round", "(", "100", "*", "acc", ",", "self", ".", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.vqaEval.VQAEval.updateProgress": [[298, 318], ["isinstance", "int", "sys.stdout.write", "sys.stdout.flush", "float", "isinstance", "round", "int"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "def", "updateProgress", "(", "self", ",", "progress", ")", ":", "\n", "        ", "barLength", "=", "20", "\n", "status", "=", "\"\"", "\n", "if", "isinstance", "(", "progress", ",", "int", ")", ":", "\n", "            ", "progress", "=", "float", "(", "progress", ")", "\n", "", "if", "not", "isinstance", "(", "progress", ",", "float", ")", ":", "\n", "            ", "progress", "=", "0", "\n", "status", "=", "\"error: progress var must be float\\r\\n\"", "\n", "", "if", "progress", "<", "0", ":", "\n", "            ", "progress", "=", "0", "\n", "status", "=", "\"Halt...\\r\\n\"", "\n", "", "if", "progress", ">=", "1", ":", "\n", "            ", "progress", "=", "1", "\n", "status", "=", "\"Done...\\r\\n\"", "\n", "", "block", "=", "int", "(", "round", "(", "barLength", "*", "progress", ")", ")", "\n", "text", "=", "\"\\rFinshed Percent: [{0}] {1}% {2}\"", ".", "format", "(", "\n", "\"#\"", "*", "block", "+", "\"-\"", "*", "(", "barLength", "-", "block", ")", ",", "int", "(", "progress", "*", "100", ")", ",", "status", "\n", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "text", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.eval_demo.parse_annotation": [[15, 21], ["dict", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["def", "parse_annotation", "(", "anno_file", ")", ":", "\n", "    ", "with", "open", "(", "anno_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "annotations", "=", "json", ".", "load", "(", "f", ")", "[", "\"annotations\"", "]", "\n", "\n", "", "q_2_anno", "=", "dict", "(", "[", "(", "a", "[", "\"question_id\"", "]", ",", "a", ")", "for", "a", "in", "annotations", "]", ")", "\n", "return", "q_2_anno", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.eval_model.eval_demo.parse_ans": [[23, 29], ["dict", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["", "def", "parse_ans", "(", "answ_file", ")", ":", "\n", "    ", "with", "open", "(", "answ_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "answers", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "q_2_answ", "=", "dict", "(", "[", "(", "a", "[", "\"question_id\"", "]", ",", "a", ")", "for", "a", "in", "answers", "]", ")", "\n", "return", "q_2_answ", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.top_down_bottom_up_model.top_down_bottom_up_model.__init__": [[16, 28], ["torch.Module.__init__", "sum", "top_down_bottom_up.nonlinear_layer.nonlinear_layer", "top_down_bottom_up.nonlinear_layer.nonlinear_layer"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_attention_model", ",", "question_embedding_models", ",", "classifier", ")", ":", "\n", "        ", "super", "(", "top_down_bottom_up_model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_attention_model", "=", "image_attention_model", "\n", "self", ".", "question_embedding_models", "=", "question_embedding_models", "\n", "self", ".", "classifier", "=", "classifier", "\n", "text_lstm_dim", "=", "sum", "(", "[", "q", ".", "text_out_dim", "for", "q", "in", "question_embedding_models", "]", ")", "\n", "joint_embedding_out_dim", "=", "classifier", ".", "input_dim", "\n", "image_feat_dim", "=", "image_attention_model", ".", "image_feat_dim", "\n", "self", ".", "nonLinear_question", "=", "nonlinear_layer", "(", "\n", "text_lstm_dim", ",", "joint_embedding_out_dim", "\n", ")", "\n", "self", ".", "nonLinear_image", "=", "nonlinear_layer", "(", "image_feat_dim", ",", "joint_embedding_out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.top_down_bottom_up_model.top_down_bottom_up_model.forward": [[29, 62], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "isinstance", "top_down_bottom_up_model.top_down_bottom_up_model.classifier", "q_model", "question_embeddings.append", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "top_down_bottom_up_model.top_down_bottom_up_model.image_attention_model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "top_down_bottom_up_model.top_down_bottom_up_model.nonLinear_question", "top_down_bottom_up_model.top_down_bottom_up_model.nonLinear_image", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "top_down_bottom_up_model.top_down_bottom_up_model.image_attention_model", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "image_embeddings.append"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "image_feat_variable", ",", "input_question_variable", ",", "input_answers", "=", "None", ",", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "question_embeddings", "=", "[", "]", "\n", "for", "q_model", "in", "self", ".", "question_embedding_models", ":", "\n", "            ", "q_embedding", "=", "q_model", "(", "input_question_variable", ")", "\n", "question_embeddings", ".", "append", "(", "q_embedding", ")", "\n", "", "question_embedding", "=", "torch", ".", "cat", "(", "question_embeddings", ",", "dim", "=", "1", ")", "\n", "\n", "if", "isinstance", "(", "image_feat_variable", ",", "list", ")", ":", "\n", "            ", "image_embeddings", "=", "[", "]", "\n", "for", "idx", ",", "image_feat", "in", "enumerate", "(", "image_feat_variable", ")", ":", "\n", "                ", "ques_embedding_each", "=", "torch", ".", "unsqueeze", "(", "question_embedding", "[", "idx", ",", ":", "]", ",", "0", ")", "\n", "image_feat_each", "=", "torch", ".", "unsqueeze", "(", "image_feat", ",", "dim", "=", "0", ")", "\n", "attention_each", "=", "self", ".", "image_attention_model", "(", "\n", "image_feat_each", ",", "ques_embedding_each", "\n", ")", "\n", "image_embedding_each", "=", "torch", ".", "sum", "(", "attention_each", "*", "image_feat", ",", "dim", "=", "1", ")", "\n", "image_embeddings", ".", "append", "(", "image_embedding_each", ")", "\n", "", "image_embedding", "=", "torch", ".", "cat", "(", "image_embeddings", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "attention", "=", "self", ".", "image_attention_model", "(", "\n", "image_feat_variable", ",", "question_embedding", "\n", ")", "\n", "image_embedding", "=", "torch", ".", "sum", "(", "attention", "*", "image_feat_variable", ",", "dim", "=", "1", ")", "\n", "\n", "", "joint_embedding", "=", "self", ".", "nonLinear_question", "(", "\n", "question_embedding", "\n", ")", "*", "self", ".", "nonLinear_image", "(", "image_embedding", ")", "\n", "logit_res", "=", "self", ".", "classifier", "(", "joint_embedding", ")", "\n", "\n", "return", "logit_res", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.top_down_bottom_up_model.vqa_multi_modal_model.__init__": [[65, 81], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "image_embedding_models_list", ",", "\n", "question_embedding_models", ",", "\n", "multi_modal_combine", ",", "\n", "classifier", ",", "\n", "image_feature_encode_list", ",", "\n", "inter_model", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "vqa_multi_modal_model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_embedding_models_list", "=", "image_embedding_models_list", "\n", "self", ".", "question_embedding_models", "=", "question_embedding_models", "\n", "self", ".", "multi_modal_combine", "=", "multi_modal_combine", "\n", "self", ".", "classifier", "=", "classifier", "\n", "self", ".", "image_feature_encode_list", "=", "image_feature_encode_list", "\n", "self", ".", "inter_model", "=", "inter_model", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.top_down_bottom_up_model.vqa_multi_modal_model.forward": [[82, 128], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "top_down_bottom_up_model.vqa_multi_modal_model.multi_modal_combine", "top_down_bottom_up_model.vqa_multi_modal_model.classifier", "q_model", "question_embeddings.append", "len", "len", "top_down_bottom_up_model.vqa_multi_modal_model.inter_model", "i_model", "image_embeddings.append"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "image_feat_variables", ",", "\n", "input_question_variable", ",", "\n", "image_dim_variable", ",", "\n", "input_answers", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "question_embeddings", "=", "[", "]", "\n", "for", "q_model", "in", "self", ".", "question_embedding_models", ":", "\n", "            ", "q_embedding", "=", "q_model", "(", "input_question_variable", ")", "\n", "question_embeddings", ".", "append", "(", "q_embedding", ")", "\n", "", "question_embedding_total", "=", "torch", ".", "cat", "(", "question_embeddings", ",", "dim", "=", "1", ")", "\n", "\n", "assert", "len", "(", "image_feat_variables", ")", "==", "len", "(", "\n", "self", ".", "image_feature_encode_list", "\n", ")", ",", "\"number of image feature model doesnot equal \\\n             to number of image features\"", "\n", "\n", "image_embeddings", "=", "[", "]", "\n", "for", "i", ",", "image_feat_variable", "in", "enumerate", "(", "image_feat_variables", ")", ":", "\n", "            ", "image_dim_variable_use", "=", "None", "if", "i", ">", "0", "else", "image_dim_variable", "\n", "image_feat_variable_ft", "=", "self", ".", "image_feature_encode_list", "[", "i", "]", "(", "\n", "image_feat_variable", "\n", ")", "\n", "\n", "image_embedding_models_i", "=", "self", ".", "image_embedding_models_list", "[", "i", "]", "\n", "for", "i_model", "in", "image_embedding_models_i", ":", "\n", "                ", "i_embedding", "=", "i_model", "(", "\n", "image_feat_variable_ft", ",", "\n", "question_embedding_total", ",", "\n", "image_dim_variable_use", ",", "\n", ")", "\n", "image_embeddings", ".", "append", "(", "i_embedding", ")", "\n", "\n", "", "", "image_embedding_total", "=", "torch", ".", "cat", "(", "image_embeddings", ",", "dim", "=", "1", ")", "\n", "\n", "if", "self", ".", "inter_model", "is", "not", "None", ":", "\n", "            ", "image_embedding_total", "=", "self", ".", "inter_model", "(", "image_embedding_total", ")", "\n", "\n", "", "joint_embedding", "=", "self", ".", "multi_modal_combine", "(", "\n", "image_embedding_total", ",", "question_embedding_total", "\n", ")", "\n", "logit_res", "=", "self", ".", "classifier", "(", "joint_embedding", ")", "\n", "\n", "return", "logit_res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.intermediate_layer.inter_layer.__init__": [[13, 21], ["torch.Module.__init__", "range", "torch.Sequential", "layers.append", "layers.append", "torch.Linear", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", ",", "n_layer", ")", ":", "\n", "        ", "super", "(", "inter_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_layer", ")", ":", "\n", "            ", "layers", ".", "append", "(", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.intermediate_layer.inter_layer.forward": [[22, 24], ["intermediate_layer.inter_layer.main"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.concatenate_attention.__init__": [[21, 27], ["torch.Module.__init__", "top_down_bottom_up.nonlinear_layer.nonlinear_layer", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_feat_dim", ",", "txt_rnn_embeding_dim", ",", "hidden_size", ")", ":", "\n", "        ", "super", "(", "concatenate_attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_feat_dim", "=", "image_feat_dim", "\n", "self", ".", "txt_embeding_dim", "=", "txt_rnn_embeding_dim", "\n", "self", ".", "Fa", "=", "nonlinear_layer", "(", "image_feat_dim", "+", "txt_rnn_embeding_dim", ",", "hidden_size", ")", "\n", "self", ".", "lc", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.concatenate_attention.forward": [[28, 38], ["torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "image_attention.concatenate_attention.lc", "torch.softmax().expand_as", "torch.softmax().expand_as", "torch.softmax().expand_as", "image_attention.concatenate_attention.Fa", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embedding", ")", ":", "\n", "        ", "_", ",", "num_location", ",", "_", "=", "image_feat", ".", "shape", "\n", "question_embedding_expand", "=", "torch", ".", "unsqueeze", "(", "question_embedding", ",", "1", ")", ".", "expand", "(", "\n", "-", "1", ",", "num_location", ",", "-", "1", "\n", ")", "\n", "concat_feature", "=", "torch", ".", "cat", "(", "(", "image_feat", ",", "question_embedding_expand", ")", ",", "dim", "=", "2", ")", "\n", "raw_attention", "=", "self", ".", "lc", "(", "self", ".", "Fa", "(", "concat_feature", ")", ")", "\n", "# softmax across locations", "\n", "attention", "=", "F", ".", "softmax", "(", "raw_attention", ",", "dim", "=", "1", ")", ".", "expand_as", "(", "image_feat", ")", "\n", "return", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.project_attention.__init__": [[41, 49], ["torch.Module.__init__", "top_down_bottom_up.nonlinear_layer.nonlinear_layer", "top_down_bottom_up.nonlinear_layer.nonlinear_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_feat_dim", ",", "txt_rnn_embeding_dim", ",", "hidden_size", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "project_attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_feat_dim", "=", "image_feat_dim", "\n", "self", ".", "txt_embeding_dim", "=", "txt_rnn_embeding_dim", "\n", "self", ".", "Fa_image", "=", "nonlinear_layer", "(", "image_feat_dim", ",", "hidden_size", ")", "\n", "self", ".", "Fa_txt", "=", "nonlinear_layer", "(", "txt_rnn_embeding_dim", ",", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "lc", "=", "nn", ".", "Linear", "(", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.project_attention.compute_raw_att": [[50, 61], ["image_attention.project_attention.Fa_image", "image_attention.project_attention.Fa_txt", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "image_attention.project_attention.dropout", "image_attention.project_attention.lc", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "def", "compute_raw_att", "(", "self", ",", "image_feat", ",", "question_embedding", ")", ":", "\n", "        ", "_", ",", "num_location", ",", "_", "=", "image_feat", ".", "shape", "\n", "image_fa", "=", "self", ".", "Fa_image", "(", "image_feat", ")", "\n", "question_fa", "=", "self", ".", "Fa_txt", "(", "question_embedding", ")", "\n", "question_fa_expand", "=", "torch", ".", "unsqueeze", "(", "question_fa", ",", "1", ")", ".", "expand", "(", "\n", "-", "1", ",", "num_location", ",", "-", "1", "\n", ")", "\n", "joint_feature", "=", "image_fa", "*", "question_fa_expand", "\n", "joint_feature", "=", "self", ".", "dropout", "(", "joint_feature", ")", "\n", "raw_attention", "=", "self", ".", "lc", "(", "joint_feature", ")", "\n", "return", "raw_attention", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.project_attention.forward": [[62, 67], ["image_attention.project_attention.compute_raw_att", "torch.softmax().expand_as", "torch.softmax().expand_as", "torch.softmax().expand_as", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.project_attention.compute_raw_att"], ["", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embedding", ")", ":", "\n", "        ", "raw_attention", "=", "self", ".", "compute_raw_att", "(", "image_feat", ",", "question_embedding", ")", "\n", "# softmax across locations", "\n", "attention", "=", "F", ".", "softmax", "(", "raw_attention", ",", "dim", "=", "1", ")", ".", "expand_as", "(", "image_feat", ")", "\n", "return", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.doubel_project_attention.__init__": [[70, 80], ["torch.Module.__init__", "image_attention.project_attention", "image_attention.project_attention"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_feat_dim", ",", "txt_rnn_embeding_dim", ",", "hidden_size", ",", "dropout", "=", "0.2", ")", ":", "\n", "        ", "super", "(", "doubel_project_attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "att1", "=", "project_attention", "(", "\n", "image_feat_dim", ",", "txt_rnn_embeding_dim", ",", "hidden_size", ",", "dropout", "\n", ")", "\n", "self", ".", "att2", "=", "project_attention", "(", "\n", "image_feat_dim", ",", "txt_rnn_embeding_dim", ",", "hidden_size", ",", "dropout", "\n", ")", "\n", "self", ".", "image_feat_dim", "=", "image_feat_dim", "\n", "self", ".", "txt_embeding_dim", "=", "txt_rnn_embeding_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.doubel_project_attention.forward": [[81, 88], ["image_attention.doubel_project_attention.att1.compute_raw_att", "image_attention.doubel_project_attention.att2.compute_raw_att", "torch.softmax().expand_as", "torch.softmax().expand_as", "torch.softmax().expand_as", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.project_attention.compute_raw_att", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.project_attention.compute_raw_att"], ["", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embedding", ")", ":", "\n", "        ", "att1", "=", "self", ".", "att1", ".", "compute_raw_att", "(", "image_feat", ",", "question_embedding", ")", "\n", "att2", "=", "self", ".", "att2", ".", "compute_raw_att", "(", "image_feat", ",", "question_embedding", ")", "\n", "raw_attention", "=", "att1", "+", "att2", "\n", "# softmax across locations", "\n", "attention", "=", "F", ".", "softmax", "(", "raw_attention", ",", "dim", "=", "1", ")", ".", "expand_as", "(", "image_feat", ")", "\n", "return", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.top_down_attention.__init__": [[116, 122], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "modal_combine_module", ",", "normalization", ",", "transform_module", ")", ":", "\n", "        ", "super", "(", "top_down_attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "modal_combine", "=", "modal_combine_module", "\n", "self", ".", "normalization", "=", "normalization", "\n", "self", ".", "transform", "=", "transform_module", "\n", "self", ".", "out_dim", "=", "self", ".", "transform", ".", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.top_down_attention._mask_attentions": [[123, 135], ["torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.ge", "torch.unsqueeze().expand_as", "torch.unsqueeze().expand_as", "torch.unsqueeze().expand_as", "torch.unsqueeze().expand_as", "torch.unsqueeze().expand_as", "torch.unsqueeze().expand_as", "torch.unsqueeze().expand_as", "torch.unsqueeze().expand_as", "torch.unsqueeze().expand_as", "attention.data.masked_fill_", "torch.unsqueeze().expand.cuda", "torch.unsqueeze().expand.cuda", "torch.unsqueeze().expand.cuda", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange().type", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_mask_attentions", "(", "attention", ",", "image_locs", ")", ":", "\n", "        ", "batch_size", ",", "num_loc", ",", "n_att", "=", "attention", ".", "data", ".", "shape", "\n", "tmp1", "=", "torch", ".", "unsqueeze", "(", "\n", "torch", ".", "arange", "(", "0", ",", "num_loc", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", ",", "dim", "=", "0", "\n", ")", ".", "expand", "(", "batch_size", ",", "num_loc", ")", "\n", "tmp1", "=", "tmp1", ".", "cuda", "(", ")", "if", "use_cuda", "else", "tmp1", "\n", "tmp2", "=", "torch", ".", "unsqueeze", "(", "image_locs", ".", "data", ",", "1", ")", ".", "expand", "(", "batch_size", ",", "num_loc", ")", "\n", "mask", "=", "torch", ".", "ge", "(", "tmp1", ",", "tmp2", ")", "\n", "mask", "=", "torch", ".", "unsqueeze", "(", "mask", ",", "2", ")", ".", "expand_as", "(", "attention", ")", "\n", "attention", ".", "data", ".", "masked_fill_", "(", "mask", ",", "0", ")", "\n", "return", "attention", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.top_down_attention.forward": [[136, 158], ["image_attention.top_down_attention.modal_combine", "image_attention.top_down_attention.transform", "image_attention.top_down_attention.normalization.lower", "torch.softmax", "torch.softmax", "torch.softmax", "image_attention.top_down_attention._mask_attentions", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "image_attention.top_down_attention.normalization.lower", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "image_attention.top_down_attention._mask_attentions"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.top_down_attention._mask_attentions", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.top_down_attention._mask_attentions"], ["", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embedding", ",", "image_locs", "=", "None", ")", ":", "\n", "# N x K x joint_dim", "\n", "        ", "joint_feature", "=", "self", ".", "modal_combine", "(", "image_feat", ",", "question_embedding", ")", "\n", "# N x K x n_att", "\n", "raw_attention", "=", "self", ".", "transform", "(", "joint_feature", ")", "\n", "\n", "if", "self", ".", "normalization", ".", "lower", "(", ")", "==", "\"softmax\"", ":", "\n", "            ", "attention", "=", "F", ".", "softmax", "(", "raw_attention", ",", "dim", "=", "1", ")", "\n", "if", "image_locs", "is", "not", "None", ":", "\n", "                ", "masked_attention", "=", "self", ".", "_mask_attentions", "(", "attention", ",", "image_locs", ")", "\n", "masked_attention_sum", "=", "torch", ".", "sum", "(", "masked_attention", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "masked_attention", "=", "masked_attention", "/", "masked_attention_sum", "\n", "", "else", ":", "\n", "                ", "masked_attention", "=", "attention", "\n", "\n", "", "", "elif", "self", ".", "normalization", ".", "lower", "(", ")", "==", "\"sigmoid\"", ":", "\n", "            ", "attention", "=", "F", ".", "sigmoid", "(", "raw_attention", ")", "\n", "masked_attention", "=", "attention", "\n", "if", "image_locs", "is", "not", "None", ":", "\n", "                ", "masked_attention", "=", "self", ".", "_mask_attentions", "(", "attention", ",", "image_locs", ")", "\n", "\n", "", "", "return", "masked_attention", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_attention.build_image_attention_module": [[90, 107], ["top_down_bottom_up.multi_modal_combine.build_modal_combine_module", "top_down_bottom_up.post_combine_transform.build_post_combine_transform", "image_attention.top_down_attention"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.multi_modal_combine.build_modal_combine_module", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.post_combine_transform.build_post_combine_transform"], ["", "", "def", "build_image_attention_module", "(", "image_att_model_par", ",", "image_dim", ",", "ques_dim", ")", ":", "\n", "    ", "modal_combine_module", "=", "build_modal_combine_module", "(", "\n", "image_att_model_par", "[", "\"modal_combine\"", "]", "[", "\"method\"", "]", ",", "\n", "image_att_model_par", "[", "\"modal_combine\"", "]", "[", "\"par\"", "]", ",", "\n", "image_feat_dim", "=", "image_dim", ",", "\n", "ques_emb_dim", "=", "ques_dim", ",", "\n", ")", "\n", "\n", "transform_module", "=", "build_post_combine_transform", "(", "\n", "image_att_model_par", "[", "\"transform\"", "]", "[", "\"method\"", "]", ",", "\n", "image_att_model_par", "[", "\"transform\"", "]", "[", "\"par\"", "]", ",", "\n", "in_dim", "=", "modal_combine_module", ".", "out_dim", ",", "\n", ")", "\n", "\n", "normalization", "=", "image_att_model_par", "[", "\"normalization\"", "]", "\n", "\n", "return", "top_down_attention", "(", "modal_combine_module", ",", "normalization", ",", "transform_module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.unittests.Test_top_down_bottom_up_model.test_classifier": [[24, 40], ["top_down_bottom_up.classifier.logit_classifier", "torch.autograd.Variable", "top_down_bottom_up.classifier.logit_classifier.", "unittests.Test_top_down_bottom_up_model.assertEqual", "torch.randn"], "methods", ["None"], ["    ", "def", "test_classifier", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "12", "\n", "joint_embedding_dim", "=", "10", "\n", "num_ans_candidates", "=", "20", "\n", "text_embeding_dim", "=", "64", "\n", "image_embedding_dim", "=", "32", "\n", "\n", "my_classifier", "=", "logit_classifier", "(", "\n", "joint_embedding_dim", ",", "\n", "num_ans_candidates", ",", "\n", "image_embedding_dim", ",", "\n", "text_embeding_dim", ",", "\n", ")", "\n", "joint_embedding", "=", "Variable", "(", "torch", ".", "randn", "(", "batch_size", ",", "joint_embedding_dim", ")", ")", "\n", "res", "=", "my_classifier", "(", "joint_embedding", ")", "\n", "self", ".", "assertEqual", "(", "(", "12", ",", "20", ")", ",", "res", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.unittests.Test_top_down_bottom_up_model.test_classifier_batch_size_1": [[41, 57], ["top_down_bottom_up.classifier.logit_classifier", "torch.autograd.Variable", "top_down_bottom_up.classifier.logit_classifier.", "unittests.Test_top_down_bottom_up_model.assertEqual", "torch.randn"], "methods", ["None"], ["", "def", "test_classifier_batch_size_1", "(", "self", ")", ":", "\n", "        ", "batch_size", "=", "1", "\n", "joint_embedding_dim", "=", "10", "\n", "num_ans_candidates", "=", "20", "\n", "text_embeding_dim", "=", "64", "\n", "image_embedding_dim", "=", "32", "\n", "\n", "my_classifier", "=", "logit_classifier", "(", "\n", "joint_embedding_dim", ",", "\n", "num_ans_candidates", ",", "\n", "image_embedding_dim", ",", "\n", "text_embeding_dim", ",", "\n", ")", "\n", "joint_embedding", "=", "Variable", "(", "torch", ".", "randn", "(", "batch_size", ",", "joint_embedding_dim", ")", ")", "\n", "res", "=", "my_classifier", "(", "joint_embedding", ")", "\n", "self", ".", "assertEqual", "(", "(", "1", ",", "20", ")", ",", "res", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.unittests.Test_top_down_bottom_up_model.test_question_embedding": [[58, 79], ["top_down_bottom_up.question_embeding.QuestionEmbeding", "torch.autograd.Variable", "top_down_bottom_up.question_embeding.QuestionEmbeding.", "unittests.Test_top_down_bottom_up_model.assertEqual", "top_down_bottom_up.question_embeding.QuestionEmbeding.cuda", "torch.autograd.Variable.cuda", "torch.rand().type", "torch.rand"], "methods", ["None"], ["", "def", "test_question_embedding", "(", "self", ")", ":", "\n", "        ", "num_vocab", "=", "20", "\n", "embedding_dim", "=", "300", "\n", "lstm_dim", "=", "512", "\n", "lstm_layer", "=", "1", "\n", "dropout", "=", "0.1", "\n", "batch_first", "=", "True", "\n", "batch_size", "=", "32", "\n", "question_len", "=", "10", "\n", "my_word_embedding_model", "=", "QuestionEmbeding", "(", "\n", "num_vocab", ",", "embedding_dim", ",", "lstm_dim", ",", "lstm_layer", ",", "dropout", ",", "batch_first", "\n", ")", "\n", "my_word_embedding_model", "=", "(", "\n", "my_word_embedding_model", ".", "cuda", "(", ")", "if", "use_cuda", "else", "my_word_embedding_model", "\n", ")", "\n", "input_txt", "=", "Variable", "(", "\n", "torch", ".", "rand", "(", "batch_size", ",", "question_len", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "%", "num_vocab", "\n", ")", "\n", "input_txt", "=", "input_txt", ".", "cuda", "(", ")", "if", "use_cuda", "else", "input_txt", "\n", "embedding", "=", "my_word_embedding_model", "(", "input_txt", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "assertEqual", "(", "(", "32", ",", "512", ")", ",", "embedding", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.unittests.Test_top_down_bottom_up_model.test_image_embedding": [[80, 93], ["top_down_bottom_up.image_embedding.image_embedding", "torch.autograd.Variable", "torch.autograd.Variable", "top_down_bottom_up.image_embedding.image_embedding.", "unittests.Test_top_down_bottom_up_model.assertEqual", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "test_image_embedding", "(", "self", ")", ":", "\n", "        ", "image_feat_dim", "=", "40", "\n", "txt_embedding_dim", "=", "50", "\n", "hidden_size", "=", "30", "\n", "num_of_loc", "=", "5", "\n", "batch_size", "=", "16", "\n", "my_image_embeding", "=", "image_embedding", "(", "\n", "image_feat_dim", ",", "txt_embedding_dim", ",", "hidden_size", "\n", ")", "\n", "image_feat", "=", "Variable", "(", "torch", ".", "randn", "(", "batch_size", ",", "num_of_loc", ",", "image_feat_dim", ")", ")", "\n", "txt", "=", "Variable", "(", "torch", ".", "randn", "(", "batch_size", ",", "txt_embedding_dim", ")", ")", "\n", "res", "=", "my_image_embeding", "(", "image_feat", ",", "txt", ")", "\n", "self", ".", "assertEqual", "(", "(", "batch_size", ",", "image_feat_dim", ")", ",", "res", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.unittests.Test_top_down_bottom_up_model.test_model": [[94, 129], ["top_down_bottom_up.image_embedding.image_embedding", "top_down_bottom_up.question_embeding.QuestionEmbeding", "top_down_bottom_up.classifier.logit_classifier", "torch.nn.CrossEntropyLoss", "top_down_bottom_up.top_down_bottom_up_model.top_down_bottom_up_model", "numpy.random.rand", "torch.autograd.Variable", "top_down_bottom_up.top_down_bottom_up_model.top_down_bottom_up_model.", "unittests.Test_top_down_bottom_up_model.assertEqual", "torch.rand().type", "torch.rand"], "methods", ["None"], ["", "def", "test_model", "(", "self", ")", ":", "\n", "        ", "image_feat_dim", "=", "40", "\n", "txt_embedding_dim", "=", "300", "\n", "lstm_dim", "=", "512", "\n", "hidden_size", "=", "30", "\n", "num_of_loc", "=", "5", "\n", "batch_size", "=", "16", "\n", "num_vocab", "=", "60", "\n", "num_ans_candidates", "=", "35", "\n", "joint_embedding_dim", "=", "500", "\n", "question_len", "=", "13", "\n", "batch_first", "=", "True", "\n", "image_embedding_model", "=", "image_embedding", "(", "image_feat_dim", ",", "lstm_dim", ",", "hidden_size", ")", "\n", "question_embedding_model", "=", "QuestionEmbeding", "(", "\n", "num_vocab", ",", "\n", "txt_embedding_dim", ",", "\n", "lstm_dim", ",", "\n", "lstm_layer", "=", "2", ",", "\n", "dropout", "=", "0.1", ",", "\n", "batch_first", "=", "batch_first", ",", "\n", ")", "\n", "my_classifier", "=", "logit_classifier", "(", "\n", "joint_embedding_dim", ",", "num_ans_candidates", ",", "image_feat_dim", ",", "txt_embedding_dim", "\n", ")", "\n", "loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "my_model", "=", "top_down_bottom_up_model", "(", "\n", "image_embedding_model", ",", "question_embedding_model", ",", "my_classifier", ",", "loss", "\n", ")", "\n", "image_feat", "=", "np", ".", "random", ".", "rand", "(", "batch_size", ",", "num_of_loc", ",", "image_feat_dim", ")", "\n", "input_txt", "=", "Variable", "(", "\n", "torch", ".", "rand", "(", "batch_size", ",", "question_len", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "%", "num_vocab", "\n", ")", "\n", "res", "=", "my_model", "(", "image_feat", ",", "input_txt", ",", "batch_first", ")", "\n", "self", ".", "assertEqual", "(", "(", "batch_size", ",", "num_ans_candidates", ")", ",", "res", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.nonlinear_layer.nonlinear_layer_org.__init__": [[26, 30], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "nonlinear_layer_org", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "gate", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.nonlinear_layer.nonlinear_layer_org.forward": [[31, 36], ["torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "nonlinear_layer.nonlinear_layer_org.fc1", "nonlinear_layer.nonlinear_layer_org.gate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y_tilda", "=", "F", ".", "tanh", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "g", "=", "F", ".", "sigmoid", "(", "self", ".", "gate", "(", "x", ")", ")", "\n", "y", "=", "y_tilda", "*", "g", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.nonlinear_layer.FCNet.__init__": [[42, 55], ["torch.Module.__init__", "range", "layers.append", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "layers.append", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "len", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ",", "dims", ")", ":", "\n", "        ", "super", "(", "FCNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dims", ")", "-", "2", ")", ":", "\n", "            ", "in_dim", "=", "dims", "[", "i", "]", "\n", "out_dim", "=", "dims", "[", "i", "+", "1", "]", "\n", "layers", ".", "append", "(", "weight_norm", "(", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", ",", "dim", "=", "None", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "layers", ".", "append", "(", "weight_norm", "(", "nn", ".", "Linear", "(", "dims", "[", "-", "2", "]", ",", "dims", "[", "-", "1", "]", ")", ",", "dim", "=", "None", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.nonlinear_layer.FCNet.forward": [[56, 58], ["nonlinear_layer.FCNet.main"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.nonlinear_layer.nonlinear_layer.__init__": [[64, 72], ["torch.Module.__init__", "layers.append", "layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "nonlinear_layer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "weight_norm", "(", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", ",", "dim", "=", "None", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.nonlinear_layer.nonlinear_layer.forward": [[73, 75], ["nonlinear_layer.nonlinear_layer.main"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "main", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_embedding.image_embedding.__init__": [[33, 37], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_attention_model", ")", ":", "\n", "        ", "super", "(", "image_embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "image_attention_model", "=", "image_attention_model", "\n", "self", ".", "out_dim", "=", "image_attention_model", ".", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_embedding.image_embedding.forward": [[38, 51], ["tmp_embedding.view.image_embedding.image_attention_model", "tmp_embedding.view.image_embedding.permute", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "image_embedding.image_embedding.permute.size", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image_feat_variable", ",", "question_embedding", ",", "image_dims", ")", ":", "\n", "# N x K x n_att", "\n", "        ", "attention", "=", "self", ".", "image_attention_model", "(", "\n", "image_feat_variable", ",", "question_embedding", ",", "image_dims", "\n", ")", "\n", "att_reshape", "=", "attention", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "tmp_embedding", "=", "torch", ".", "bmm", "(", "\n", "att_reshape", ",", "image_feat_variable", "\n", ")", "# N x n_att x image_dim", "\n", "batch_size", "=", "att_reshape", ".", "size", "(", "0", ")", "\n", "image_embedding", "=", "tmp_embedding", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "return", "image_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_embedding.image_finetune.__init__": [[54, 66], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "image_embedding.image_finetune.lc.weight.data.copy_", "image_embedding.image_finetune.lc.bias.data.copy_", "open", "pickle.load", "open", "pickle.load", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "weights_file", ",", "bias_file", ")", ":", "\n", "        ", "super", "(", "image_finetune", ",", "self", ")", ".", "__init__", "(", ")", "\n", "with", "open", "(", "weights_file", ",", "\"rb\"", ")", "as", "w", ":", "\n", "            ", "weights", "=", "pickle", ".", "load", "(", "w", ")", "\n", "", "with", "open", "(", "bias_file", ",", "\"rb\"", ")", "as", "b", ":", "\n", "            ", "bias", "=", "pickle", ".", "load", "(", "b", ")", "\n", "", "out_dim", "=", "bias", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "lc", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "lc", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "weights", ")", ")", "\n", "self", ".", "lc", ".", "bias", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "bias", ")", ")", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_embedding.image_finetune.forward": [[67, 71], ["image_embedding.image_finetune.lc", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "i2", "=", "self", ".", "lc", "(", "image", ")", "\n", "i3", "=", "F", ".", "relu", "(", "i2", ")", "\n", "return", "i3", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.post_combine_transform.LinearTransform.__init__": [[25, 31], ["torch.Module.__init__", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LinearTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lc", "=", "weight_norm", "(", "\n", "nn", ".", "Linear", "(", "in_features", "=", "in_dim", ",", "out_features", "=", "kwargs", "[", "\"out_dim\"", "]", ")", ",", "dim", "=", "None", "\n", ")", "\n", "self", ".", "out_dim", "=", "kwargs", "[", "\"out_dim\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.post_combine_transform.LinearTransform.forward": [[32, 34], ["post_combine_transform.LinearTransform.lc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lc", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.post_combine_transform.ConvTransform.__init__": [[37, 48], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ConvTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "in_dim", ",", "out_channels", "=", "kwargs", "[", "\"hidden_dim\"", "]", ",", "kernel_size", "=", "1", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "=", "kwargs", "[", "\"hidden_dim\"", "]", ",", "\n", "out_channels", "=", "kwargs", "[", "\"out_dim\"", "]", ",", "\n", "kernel_size", "=", "1", ",", "\n", ")", "\n", "self", ".", "out_dim", "=", "kwargs", "[", "\"out_dim\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.post_combine_transform.ConvTransform.forward": [[49, 67], ["post_combine_transform.ConvTransform.conv1", "torch.relu", "torch.relu", "torch.relu", "post_combine_transform.ConvTransform.conv2", "len", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "len", "torch.squeeze().permute", "torch.squeeze().permute", "torch.squeeze().permute", "torch.squeeze().permute", "torch.squeeze().permute", "torch.squeeze().permute", "torch.squeeze().permute", "torch.squeeze().permute", "torch.squeeze().permute", "x.size", "x.permute", "len", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "x.size", "len", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "x.size", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "x.size", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "len", "(", "x", ".", "size", "(", ")", ")", "==", "3", ":", "# N x k xdim", "\n", "# N x dim x k x 1", "\n", "            ", "x_reshape", "=", "torch", ".", "unsqueeze", "(", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "3", ")", "\n", "", "elif", "len", "(", "x", ".", "size", "(", ")", ")", "==", "2", ":", "# N x dim", "\n", "# N x dim x 1 x 1", "\n", "            ", "x_reshape", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "unsqueeze", "(", "x", ",", "2", ")", ",", "3", ")", "\n", "\n", "", "iatt_conv1", "=", "self", ".", "conv1", "(", "x_reshape", ")", "# N x hidden_dim x * x 1", "\n", "iatt_relu", "=", "F", ".", "relu", "(", "iatt_conv1", ")", "\n", "iatt_conv2", "=", "self", ".", "conv2", "(", "iatt_relu", ")", "# N x out_dim x * x 1", "\n", "\n", "if", "len", "(", "x", ".", "size", "(", ")", ")", "==", "3", ":", "\n", "            ", "iatt_conv3", "=", "torch", ".", "squeeze", "(", "iatt_conv2", ",", "3", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "", "elif", "len", "(", "x", ".", "size", "(", ")", ")", "==", "2", ":", "\n", "            ", "iatt_conv3", "=", "torch", ".", "squeeze", "(", "torch", ".", "squeeze", "(", "iatt_conv2", ",", "3", ")", ",", "2", ")", "\n", "\n", "", "return", "iatt_conv3", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.post_combine_transform.build_post_combine_transform": [[15, 22], ["post_combine_transform.LinearTransform", "post_combine_transform.ConvTransform", "NotImplementedError"], "function", ["None"], ["def", "build_post_combine_transform", "(", "method", ",", "par", ",", "in_dim", ")", ":", "\n", "    ", "if", "method", "==", "\"linear_transform\"", ":", "\n", "        ", "return", "LinearTransform", "(", "in_dim", ",", "**", "par", ")", "\n", "", "elif", "method", "==", "\"conv_transform\"", ":", "\n", "        ", "return", "ConvTransform", "(", "in_dim", ",", "**", "par", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"unkown post combime transform type %s\"", "%", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_feature_encoding.DefaultImageFeature.__init__": [[29, 33], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ")", ":", "\n", "        ", "super", "(", "DefaultImageFeature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_dim", "=", "in_dim", "\n", "self", ".", "out_dim", "=", "in_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_feature_encoding.DefaultImageFeature.forward": [[34, 36], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_feature_encoding.FinetuneFasterRcnnFpnFc7.__init__": [[39, 55], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "image_feature_encoding.FinetuneFasterRcnnFpnFc7.lc.weight.data.copy_", "image_feature_encoding.FinetuneFasterRcnnFpnFc7.lc.bias.data.copy_", "os.path.isabs", "os.path.join", "os.path.isabs", "os.path.join", "open", "pickle.load", "open", "pickle.load", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "weights_file", ",", "bias_file", ")", ":", "\n", "        ", "super", "(", "FinetuneFasterRcnnFpnFc7", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "isabs", "(", "weights_file", ")", ":", "\n", "            ", "weights_file", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "data", ".", "data_root_dir", ",", "weights_file", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isabs", "(", "bias_file", ")", ":", "\n", "            ", "bias_file", "=", "os", ".", "path", ".", "join", "(", "cfg", ".", "data", ".", "data_root_dir", ",", "bias_file", ")", "\n", "", "with", "open", "(", "weights_file", ",", "\"rb\"", ")", "as", "w", ":", "\n", "            ", "weights", "=", "pickle", ".", "load", "(", "w", ")", "\n", "", "with", "open", "(", "bias_file", ",", "\"rb\"", ")", "as", "b", ":", "\n", "            ", "bias", "=", "pickle", ".", "load", "(", "b", ")", "\n", "", "out_dim", "=", "bias", ".", "shape", "[", "0", "]", "\n", "\n", "self", ".", "lc", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "self", ".", "lc", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "weights", ")", ")", "\n", "self", ".", "lc", ".", "bias", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "bias", ")", ")", "\n", "self", ".", "out_dim", "=", "out_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_feature_encoding.FinetuneFasterRcnnFpnFc7.forward": [[56, 60], ["image_feature_encoding.FinetuneFasterRcnnFpnFc7.lc", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "        ", "i2", "=", "self", ".", "lc", "(", "image", ")", "\n", "i3", "=", "F", ".", "relu", "(", "i2", ")", "\n", "return", "i3", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.image_feature_encoding.build_image_feature_encoding": [[19, 26], ["image_feature_encoding.DefaultImageFeature", "image_feature_encoding.FinetuneFasterRcnnFpnFc7", "NotImplementedError"], "function", ["None"], ["def", "build_image_feature_encoding", "(", "method", ",", "par", ",", "in_dim", ")", ":", "\n", "    ", "if", "method", "==", "\"default_image\"", ":", "\n", "        ", "return", "DefaultImageFeature", "(", "in_dim", ")", "\n", "", "elif", "method", "==", "\"finetune_faster_rcnn_fpn_fc7\"", ":", "\n", "        ", "return", "FinetuneFasterRcnnFpnFc7", "(", "in_dim", ",", "**", "par", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"unknown image feature encoding %s\"", "%", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.multi_modal_combine.MfbExpand.__init__": [[28, 37], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MfbExpand", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lc_image", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "kwargs", "[", "\"image_feat_dim\"", "]", ",", "out_features", "=", "kwargs", "[", "\"hidden_size\"", "]", "\n", ")", "\n", "self", ".", "lc_ques", "=", "nn", ".", "Linear", "(", "\n", "in_features", "=", "kwargs", "[", "\"ques_emb_dim\"", "]", ",", "out_features", "=", "kwargs", "[", "\"hidden_size\"", "]", "\n", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "kwargs", "[", "\"dropout\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.multi_modal_combine.MfbExpand.forward": [[38, 49], ["multi_modal_combine.MfbExpand.lc_image", "multi_modal_combine.MfbExpand.lc_ques", "multi_modal_combine.MfbExpand.dropout", "len", "image_feat.data.size", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embed", ")", ":", "\n", "        ", "image1", "=", "self", ".", "lc_image", "(", "image_feat", ")", "\n", "ques1", "=", "self", ".", "lc_ques", "(", "question_embed", ")", "\n", "if", "len", "(", "image_feat", ".", "data", ".", "shape", ")", "==", "3", ":", "\n", "            ", "num_location", "=", "image_feat", ".", "data", ".", "size", "(", "1", ")", "\n", "ques1_expand", "=", "torch", ".", "unsqueeze", "(", "ques1", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "num_location", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "ques1_expand", "=", "ques1", "\n", "", "joint_feature", "=", "image1", "*", "ques1_expand", "\n", "joint_feature", "=", "self", ".", "dropout", "(", "joint_feature", ")", "\n", "return", "joint_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.multi_modal_combine.MfbSqueeze.__init__": [[53, 56], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MfbSqueeze", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pool_size", "=", "kwargs", "[", "\"pool_size\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.multi_modal_combine.MfbSqueeze.forward": [[57, 85], ["len", "torch.unsqueeze.size", "torch.unsqueeze.size", "torch.unsqueeze.size", "torch.unsqueeze.view", "torch.unsqueeze.view", "torch.unsqueeze.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "iatt_iq_sqrt.view.view.view", "torch.normalize", "torch.normalize", "torch.normalize", "torch.squeeze.view", "torch.squeeze.view", "torch.squeeze.view", "torch.unsqueeze.size", "torch.unsqueeze.size", "torch.unsqueeze.size", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "exit", "int", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "int", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.squeeze", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "joint_feature", ")", ":", "\n", "\n", "        ", "orig_feature_size", "=", "len", "(", "joint_feature", ".", "size", "(", ")", ")", "\n", "if", "orig_feature_size", "==", "2", ":", "\n", "            ", "joint_feature", "=", "torch", ".", "unsqueeze", "(", "joint_feature", ",", "dim", "=", "1", ")", "\n", "", "batch_size", ",", "num_loc", ",", "dim", "=", "joint_feature", ".", "size", "(", ")", "\n", "\n", "if", "dim", "%", "self", ".", "pool_size", "!=", "0", ":", "\n", "            ", "exit", "(", "\n", "\"the dim %d is not multiply of \\\n             pool_size %d\"", "\n", "%", "(", "dim", ",", "self", ".", "pool_size", ")", "\n", ")", "\n", "", "joint_feature_reshape", "=", "joint_feature", ".", "view", "(", "\n", "batch_size", ",", "num_loc", ",", "int", "(", "dim", "/", "self", ".", "pool_size", ")", ",", "self", ".", "pool_size", "\n", ")", "\n", "# N x 100 x 1000 x 1", "\n", "iatt_iq_sumpool", "=", "torch", ".", "sum", "(", "joint_feature_reshape", ",", "3", ")", "\n", "iatt_iq_sqrt", "=", "torch", ".", "sqrt", "(", "F", ".", "relu", "(", "iatt_iq_sumpool", ")", ")", "-", "torch", ".", "sqrt", "(", "\n", "F", ".", "relu", "(", "-", "iatt_iq_sumpool", ")", "\n", ")", "\n", "iatt_iq_sqrt", "=", "iatt_iq_sqrt", ".", "view", "(", "batch_size", ",", "-", "1", ")", "# N x 100000", "\n", "iatt_iq_l2", "=", "F", ".", "normalize", "(", "iatt_iq_sqrt", ")", "\n", "iatt_iq_l2", "=", "iatt_iq_l2", ".", "view", "(", "batch_size", ",", "num_loc", ",", "int", "(", "dim", "/", "self", ".", "pool_size", ")", ")", "\n", "if", "orig_feature_size", "==", "2", ":", "\n", "            ", "iatt_iq_l2", "=", "torch", ".", "squeeze", "(", "iatt_iq_l2", ",", "dim", "=", "1", ")", "\n", "\n", "", "return", "iatt_iq_l2", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.multi_modal_combine.MFH.__init__": [[88, 105], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "int", "range", "multi_modal_combine.MfbExpand", "multi_modal_combine.MFH.mfb_expand_list.append", "multi_modal_combine.MfbSqueeze", "multi_modal_combine.MFH.mfb_sqz_list.append", "sum"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_feat_dim", ",", "ques_emb_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MFH", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "order", "=", "kwargs", "[", "\"order\"", "]", "\n", "hidden_sizes", "=", "kwargs", "[", "\"hidden_sizes\"", "]", "\n", "self", ".", "mfb_expand_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "mfb_sqz_list", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "out_dim", "=", "int", "(", "sum", "(", "hidden_sizes", ")", "/", "kwargs", "[", "\"pool_size\"", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "order", ")", ":", "\n", "            ", "mfb_exp_i", "=", "MfbExpand", "(", "\n", "image_feat_dim", "=", "image_feat_dim", ",", "\n", "ques_emb_dim", "=", "ques_emb_dim", ",", "\n", "hidden_size", "=", "hidden_sizes", "[", "i", "]", ",", "\n", "dropout", "=", "kwargs", "[", "\"dropout\"", "]", ",", "\n", ")", "\n", "self", ".", "mfb_expand_list", ".", "append", "(", "mfb_exp_i", ")", "\n", "mfb_sqz_i", "=", "MfbSqueeze", "(", "pool_size", "=", "kwargs", "[", "\"pool_size\"", "]", ")", "\n", "self", ".", "mfb_sqz_list", ".", "append", "(", "mfb_sqz_i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.multi_modal_combine.MFH.forward": [[106, 123], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mfb_exp", "mfb_sqz", "feature_list.append", "len", "feature_list[].size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embedding", ")", ":", "\n", "        ", "feature_list", "=", "[", "]", "\n", "prev_mfb_exp", "=", "1", "\n", "for", "i", "in", "range", "(", "self", ".", "order", ")", ":", "\n", "            ", "mfb_exp", "=", "self", ".", "mfb_expand_list", "[", "i", "]", "\n", "mfb_sqz", "=", "self", ".", "mfb_sqz_list", "[", "i", "]", "\n", "z_exp_i", "=", "mfb_exp", "(", "image_feat", ",", "question_embedding", ")", "\n", "if", "i", ">", "0", ":", "\n", "                ", "z_exp_i", "=", "prev_mfb_exp", "*", "z_exp_i", "\n", "", "prev_mfb_exp", "=", "z_exp_i", "\n", "z", "=", "mfb_sqz", "(", "z_exp_i", ")", "\n", "feature_list", ".", "append", "(", "z", ")", "\n", "\n", "# append at last feature", "\n", "", "cat_dim", "=", "len", "(", "feature_list", "[", "0", "]", ".", "size", "(", ")", ")", "-", "1", "\n", "feature", "=", "torch", ".", "cat", "(", "feature_list", ",", "dim", "=", "cat_dim", ")", "\n", "return", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.multi_modal_combine.non_linear_elmt_multiply.__init__": [[129, 135], ["torch.Module.__init__", "top_down_bottom_up.nonlinear_layer.nonlinear_layer", "top_down_bottom_up.nonlinear_layer.nonlinear_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_feat_dim", ",", "ques_emb_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "non_linear_elmt_multiply", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Fa_image", "=", "nonlinear_layer", "(", "image_feat_dim", ",", "kwargs", "[", "\"hidden_size\"", "]", ")", "\n", "self", ".", "Fa_txt", "=", "nonlinear_layer", "(", "ques_emb_dim", ",", "kwargs", "[", "\"hidden_size\"", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "kwargs", "[", "\"dropout\"", "]", ")", "\n", "self", ".", "out_dim", "=", "kwargs", "[", "\"hidden_size\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.multi_modal_combine.non_linear_elmt_multiply.forward": [[136, 152], ["multi_modal_combine.non_linear_elmt_multiply.Fa_image", "multi_modal_combine.non_linear_elmt_multiply.Fa_txt", "multi_modal_combine.non_linear_elmt_multiply.dropout", "len", "image_feat.data.size", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embedding", ")", ":", "\n", "        ", "image_fa", "=", "self", ".", "Fa_image", "(", "image_feat", ")", "\n", "question_fa", "=", "self", ".", "Fa_txt", "(", "question_embedding", ")", "\n", "\n", "if", "len", "(", "image_feat", ".", "data", ".", "shape", ")", "==", "3", ":", "\n", "            ", "num_location", "=", "image_feat", ".", "data", ".", "size", "(", "1", ")", "\n", "question_fa_expand", "=", "torch", ".", "unsqueeze", "(", "question_fa", ",", "1", ")", ".", "expand", "(", "\n", "-", "1", ",", "num_location", ",", "-", "1", "\n", ")", "\n", "", "else", ":", "\n", "            ", "question_fa_expand", "=", "question_fa", "\n", "\n", "", "joint_feature", "=", "image_fa", "*", "question_fa_expand", "\n", "joint_feature", "=", "self", ".", "dropout", "(", "joint_feature", ")", "\n", "\n", "return", "joint_feature", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.multi_modal_combine.two_layer_elmt_multiply.__init__": [[155, 163], ["torch.Module.__init__", "top_down_bottom_up.nonlinear_layer.nonlinear_layer", "top_down_bottom_up.nonlinear_layer.nonlinear_layer", "top_down_bottom_up.nonlinear_layer.nonlinear_layer", "top_down_bottom_up.nonlinear_layer.nonlinear_layer", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "image_feat_dim", ",", "ques_emb_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "two_layer_elmt_multiply", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Fa_image1", "=", "nonlinear_layer", "(", "image_feat_dim", ",", "kwargs", "[", "\"hidden_size\"", "]", ")", "\n", "self", ".", "Fa_image2", "=", "nonlinear_layer", "(", "kwargs", "[", "\"hidden_size\"", "]", ",", "kwargs", "[", "\"hidden_size\"", "]", ")", "\n", "self", ".", "Fa_txt1", "=", "nonlinear_layer", "(", "ques_emb_dim", ",", "kwargs", "[", "\"hidden_size\"", "]", ")", "\n", "self", ".", "Fa_txt2", "=", "nonlinear_layer", "(", "kwargs", "[", "\"hidden_size\"", "]", ",", "kwargs", "[", "\"hidden_size\"", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "kwargs", "[", "\"dropout\"", "]", ")", "\n", "self", ".", "out_dim", "=", "kwargs", "[", "\"hidden_size\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.multi_modal_combine.two_layer_elmt_multiply.forward": [[164, 180], ["multi_modal_combine.two_layer_elmt_multiply.Fa_image2", "multi_modal_combine.two_layer_elmt_multiply.Fa_txt2", "multi_modal_combine.two_layer_elmt_multiply.dropout", "multi_modal_combine.two_layer_elmt_multiply.Fa_image1", "multi_modal_combine.two_layer_elmt_multiply.Fa_txt1", "len", "image_feat.data.size", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze().expand", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image_feat", ",", "question_embedding", ")", ":", "\n", "        ", "image_fa", "=", "self", ".", "Fa_image2", "(", "self", ".", "Fa_image1", "(", "image_feat", ")", ")", "\n", "question_fa", "=", "self", ".", "Fa_txt2", "(", "self", ".", "Fa_txt1", "(", "question_embedding", ")", ")", "\n", "\n", "if", "len", "(", "image_feat", ".", "data", ".", "shape", ")", "==", "3", ":", "\n", "            ", "num_location", "=", "image_feat", ".", "data", ".", "size", "(", "1", ")", "\n", "question_fa_expand", "=", "torch", ".", "unsqueeze", "(", "question_fa", ",", "1", ")", ".", "expand", "(", "\n", "-", "1", ",", "num_location", ",", "-", "1", "\n", ")", "\n", "", "else", ":", "\n", "            ", "question_fa_expand", "=", "question_fa", "\n", "\n", "", "joint_feature", "=", "image_fa", "*", "question_fa_expand", "\n", "joint_feature", "=", "self", ".", "dropout", "(", "joint_feature", ")", "\n", "\n", "return", "joint_feature", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.multi_modal_combine.build_modal_combine_module": [[16, 25], ["multi_modal_combine.MFH", "multi_modal_combine.non_linear_elmt_multiply", "multi_modal_combine.two_layer_elmt_multiply", "NotImplemented"], "function", ["None"], ["def", "build_modal_combine_module", "(", "method", ",", "par", ",", "image_feat_dim", ",", "ques_emb_dim", ")", ":", "\n", "    ", "if", "method", "==", "\"MFH\"", ":", "\n", "        ", "return", "MFH", "(", "image_feat_dim", ",", "ques_emb_dim", ",", "**", "par", ")", "\n", "", "elif", "method", "==", "\"non_linear_elmt_multiply\"", ":", "\n", "        ", "return", "non_linear_elmt_multiply", "(", "image_feat_dim", ",", "ques_emb_dim", ",", "**", "par", ")", "\n", "", "elif", "method", "==", "\"two_layer_elmt_multiply\"", ":", "\n", "        ", "return", "two_layer_elmt_multiply", "(", "image_feat_dim", ",", "ques_emb_dim", ",", "**", "par", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplemented", "(", "\"unimplemented %s for modal combine module\"", "%", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.question_embeding.QuestionEmbeding.__init__": [[29, 46], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.GRU", "torch.GRU", "torch.GRU", "question_embeding.QuestionEmbeding.embedding.weight.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "QuestionEmbeding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "text_out_dim", "=", "kwargs", "[", "\"LSTM_hidden_size\"", "]", "\n", "self", ".", "num_vocab", "=", "kwargs", "[", "\"num_vocab\"", "]", "\n", "self", ".", "embedding_dim", "=", "kwargs", "[", "\"embedding_dim\"", "]", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "kwargs", "[", "\"num_vocab\"", "]", ",", "kwargs", "[", "\"embedding_dim\"", "]", ")", "\n", "self", ".", "gru", "=", "nn", ".", "GRU", "(", "\n", "input_size", "=", "kwargs", "[", "\"embedding_dim\"", "]", ",", "\n", "hidden_size", "=", "kwargs", "[", "\"LSTM_hidden_size\"", "]", ",", "\n", "num_layers", "=", "kwargs", "[", "\"lstm_layer\"", "]", ",", "\n", "dropout", "=", "kwargs", "[", "\"lstm_dropout\"", "]", ",", "\n", "batch_first", "=", "True", ",", "\n", ")", "\n", "self", ".", "batch_first", "=", "True", "\n", "\n", "if", "\"embedding_init\"", "in", "kwargs", "and", "kwargs", "[", "\"embedding_init\"", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "embedding", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "kwargs", "[", "\"embedding_init\"", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.question_embeding.QuestionEmbeding.forward": [[47, 52], ["question_embeding.QuestionEmbeding.embedding", "question_embeding.QuestionEmbeding.gru"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_text", ")", ":", "\n", "        ", "embeded_txt", "=", "self", ".", "embedding", "(", "input_text", ")", "\n", "out", ",", "hidden_state", "=", "self", ".", "gru", "(", "embeded_txt", ")", "\n", "res", "=", "out", "[", ":", ",", "-", "1", "]", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.question_embeding.AttQuestionEmbedding.__init__": [[55, 91], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "os.path.isabs", "numpy.load", "question_embeding.AttQuestionEmbedding.embedding.weight.data.copy_", "os.path.join", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["    ", "def", "__init__", "(", "self", ",", "num_vocab", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttQuestionEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "num_vocab", ",", "kwargs", "[", "\"embedding_dim\"", "]", ")", "\n", "self", ".", "LSTM", "=", "nn", ".", "LSTM", "(", "\n", "input_size", "=", "kwargs", "[", "\"embedding_dim\"", "]", ",", "\n", "hidden_size", "=", "kwargs", "[", "\"LSTM_hidden_size\"", "]", ",", "\n", "num_layers", "=", "kwargs", "[", "\"LSTM_layer\"", "]", ",", "\n", "batch_first", "=", "True", ",", "\n", ")", "\n", "self", ".", "Dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "kwargs", "[", "\"dropout\"", "]", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "kwargs", "[", "\"LSTM_hidden_size\"", "]", ",", "\n", "out_channels", "=", "kwargs", "[", "\"conv1_out\"", "]", ",", "\n", "kernel_size", "=", "kwargs", "[", "\"kernel_size\"", "]", ",", "\n", "padding", "=", "kwargs", "[", "\"padding\"", "]", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv1d", "(", "\n", "in_channels", "=", "kwargs", "[", "\"conv1_out\"", "]", ",", "\n", "out_channels", "=", "kwargs", "[", "\"conv2_out\"", "]", ",", "\n", "kernel_size", "=", "kwargs", "[", "\"kernel_size\"", "]", ",", "\n", "padding", "=", "kwargs", "[", "\"padding\"", "]", ",", "\n", ")", "\n", "self", ".", "text_out_dim", "=", "kwargs", "[", "\"LSTM_hidden_size\"", "]", "*", "kwargs", "[", "\"conv2_out\"", "]", "\n", "\n", "if", "(", "\n", "\"embedding_init_file\"", "in", "kwargs", "\n", "and", "kwargs", "[", "\"embedding_init_file\"", "]", "is", "not", "None", "\n", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isabs", "(", "kwargs", "[", "\"embedding_init_file\"", "]", ")", ":", "\n", "                ", "embedding_file", "=", "kwargs", "[", "\"embedding_init_file\"", "]", "\n", "", "else", ":", "\n", "                ", "embedding_file", "=", "os", ".", "path", ".", "join", "(", "\n", "cfg", ".", "data", ".", "data_root_dir", ",", "kwargs", "[", "\"embedding_init_file\"", "]", "\n", ")", "\n", "", "embedding_init", "=", "np", ".", "load", "(", "embedding_file", ")", "\n", "self", ".", "embedding", ".", "weight", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "embedding_init", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.question_embeding.AttQuestionEmbedding.forward": [[92, 112], ["question_embeding.AttQuestionEmbedding.embedding", "question_embeding.AttQuestionEmbedding.LSTM", "question_embeding.AttQuestionEmbedding.Dropout", "question_embeding.AttQuestionEmbedding.permute", "question_embeding.AttQuestionEmbedding.conv1", "torch.relu", "torch.relu", "torch.relu", "question_embeding.AttQuestionEmbedding.conv2", "torch.softmax", "torch.softmax", "torch.softmax", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_text", ")", ":", "\n", "        ", "batch_size", ",", "_", "=", "input_text", ".", "data", ".", "shape", "\n", "embed_txt", "=", "self", ".", "embedding", "(", "input_text", ")", "# N * T * embedding_dim", "\n", "\n", "# self.LSTM.flatten_parameters()", "\n", "lstm_out", ",", "_", "=", "self", ".", "LSTM", "(", "embed_txt", ")", "# N * T * LSTM_hidden_size", "\n", "lstm_drop", "=", "self", ".", "Dropout", "(", "lstm_out", ")", "# N * T * LSTM_hidden_size", "\n", "lstm_reshape", "=", "lstm_drop", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "# N * LSTM_hidden_size * T", "\n", "\n", "qatt_conv1", "=", "self", ".", "conv1", "(", "lstm_reshape", ")", "# N x conv1_out x T", "\n", "qatt_relu", "=", "F", ".", "relu", "(", "qatt_conv1", ")", "\n", "qatt_conv2", "=", "self", ".", "conv2", "(", "qatt_relu", ")", "# N x conv2_out x T", "\n", "\n", "qtt_softmax", "=", "F", ".", "softmax", "(", "qatt_conv2", ",", "dim", "=", "2", ")", "\n", "# N * conv2_out * LSTM_hidden_size", "\n", "qtt_feature", "=", "torch", ".", "bmm", "(", "qtt_softmax", ",", "lstm_drop", ")", "\n", "# N * (conv2_out * LSTM_hidden_size)", "\n", "qtt_feature_concat", "=", "qtt_feature", ".", "view", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "return", "qtt_feature_concat", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.question_embeding.build_question_encoding_module": [[19, 26], ["question_embeding.QuestionEmbeding", "question_embeding.AttQuestionEmbedding", "NotImplementedError"], "function", ["None"], ["def", "build_question_encoding_module", "(", "method", ",", "par", ",", "num_vocab", ")", ":", "\n", "    ", "if", "method", "==", "\"default_que_embed\"", ":", "\n", "        ", "return", "QuestionEmbeding", "(", "num_vocab", ",", "**", "par", ")", "\n", "", "elif", "method", "==", "\"att_que_embed\"", ":", "\n", "        ", "return", "AttQuestionEmbedding", "(", "num_vocab", ",", "**", "par", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"unknown question encoding model %s\"", "%", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.classifier.logit_classifier.__init__": [[29, 46], ["torch.Module.__init__", "top_down_bottom_up.nonlinear_layer.nonlinear_layer", "top_down_bottom_up.nonlinear_layer.nonlinear_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "classifier.logit_classifier.linear_text.weight.data.copy_", "classifier.logit_classifier.linear_image.weight.data.copy_", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "logit_classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "input_dim", "=", "in_dim", "\n", "num_ans_candidates", "=", "out_dim", "\n", "txt_nonLinear_dim", "=", "kwargs", "[", "\"txt_hidden_dim\"", "]", "\n", "image_nonLinear_dim", "=", "kwargs", "[", "\"img_hidden_dim\"", "]", "\n", "self", ".", "f_o_text", "=", "nonlinear_layer", "(", "input_dim", ",", "txt_nonLinear_dim", ")", "\n", "self", ".", "f_o_image", "=", "nonlinear_layer", "(", "input_dim", ",", "image_nonLinear_dim", ")", "\n", "self", ".", "linear_text", "=", "nn", ".", "Linear", "(", "txt_nonLinear_dim", ",", "num_ans_candidates", ")", "\n", "self", ".", "linear_image", "=", "nn", ".", "Linear", "(", "image_nonLinear_dim", ",", "num_ans_candidates", ")", "\n", "if", "\"pretrained_image\"", "in", "kwargs", "and", "kwargs", "[", "\"pretrained_text\"", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "linear_text", ".", "weight", ".", "data", ".", "copy_", "(", "\n", "torch", ".", "from_numpy", "(", "kwargs", "[", "\"pretrained_text\"", "]", ")", "\n", ")", "\n", "", "if", "\"pretrained_image\"", "in", "kwargs", "and", "kwargs", "[", "\"pretrained_image\"", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "linear_image", ".", "weight", ".", "data", ".", "copy_", "(", "\n", "torch", ".", "from_numpy", "(", "kwargs", "[", "\"pretrained_image\"", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.classifier.logit_classifier.forward": [[48, 54], ["classifier.logit_classifier.linear_text", "classifier.logit_classifier.linear_image", "classifier.logit_classifier.f_o_text", "classifier.logit_classifier.f_o_image"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "joint_embedding", ")", ":", "\n", "        ", "text_val", "=", "self", ".", "linear_text", "(", "self", ".", "f_o_text", "(", "joint_embedding", ")", ")", "\n", "image_val", "=", "self", ".", "linear_image", "(", "self", ".", "f_o_image", "(", "joint_embedding", ")", ")", "\n", "logit_value", "=", "text_val", "+", "image_val", "\n", "\n", "return", "logit_value", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.classifier.WeightNormClassifier.__init__": [[57, 66], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.nn.utils.weight_norm.weight_norm", "torch.nn.utils.weight_norm.weight_norm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "WeightNormClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "layers", "=", "[", "\n", "weight_norm", "(", "nn", ".", "Linear", "(", "in_dim", ",", "kwargs", "[", "\"hidden_dim\"", "]", ")", ",", "dim", "=", "None", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "kwargs", "[", "\"dropout\"", "]", ",", "inplace", "=", "True", ")", ",", "\n", "weight_norm", "(", "nn", ".", "Linear", "(", "kwargs", "[", "\"hidden_dim\"", "]", ",", "out_dim", ")", ",", "dim", "=", "None", ")", ",", "\n", "]", "\n", "self", ".", "main", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.classifier.WeightNormClassifier.forward": [[67, 70], ["classifier.WeightNormClassifier.main"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.main"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "logits", "=", "self", ".", "main", "(", "x", ")", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.classifier.LinearClassifier.__init__": [[73, 76], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "        ", "super", "(", "LinearClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lc", "=", "nn", ".", "Linear", "(", "in_dim", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.classifier.LinearClassifier.forward": [[77, 79], ["classifier.LinearClassifier.lc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lc", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.top_down_bottom_up.classifier.build_classifier": [[16, 26], ["classifier.WeightNormClassifier", "classifier.logit_classifier", "classifier.LinearClassifier", "NotImplementedError"], "function", ["None"], ["def", "build_classifier", "(", "method", ",", "par", ",", "in_dim", ",", "out_dim", ")", ":", "\n", "    ", "classifier_par", "=", "par", "\n", "if", "method", "==", "\"weight_norm_classifier\"", ":", "\n", "        ", "return", "WeightNormClassifier", "(", "in_dim", ",", "out_dim", ",", "**", "classifier_par", ")", "\n", "", "elif", "method", "==", "\"logit_classifier\"", ":", "\n", "        ", "return", "logit_classifier", "(", "in_dim", ",", "out_dim", ",", "**", "classifier_par", ")", "\n", "", "elif", "method", "==", "\"linear_classifier\"", ":", "\n", "        ", "return", "LinearClassifier", "(", "in_dim", ",", "out_dim", ",", "**", "classifier_par", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"unknown classifier %s\"", "%", "method", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.collections.AttrDict.__init__": [[17, 20], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttrDict", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.collections.AttrDict.__getattr__": [[21, 28], ["AttributeError"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "if", "name", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "name", "]", "\n", "", "elif", "name", "in", "self", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.collections.AttrDict.__setattr__": [[29, 39], ["AttributeError"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "not", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", ":", "\n", "            ", "if", "name", "in", "self", ".", "__dict__", ":", "\n", "                ", "self", ".", "__dict__", "[", "name", "]", "=", "value", "\n", "", "else", ":", "\n", "                ", "self", "[", "name", "]", "=", "value", "\n", "", "", "else", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "'Attempted to set \"{}\" to \"{}\", but AttrDict is immutable'", ".", "format", "(", "\n", "name", ",", "value", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.collections.AttrDict.immutable": [[42, 54], ["collections.AttrDict.__dict__.values", "collections.AttrDict.values", "isinstance", "isinstance", "v.immutable", "v.immutable"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.collections.AttrDict.immutable", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.collections.AttrDict.immutable"], ["", "", "def", "immutable", "(", "self", ",", "is_immutable", ")", ":", "\n", "        ", "\"\"\"Set immutability to is_immutable and recursively apply the setting\n        to all nested AttrDicts.\n        \"\"\"", "\n", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", "=", "is_immutable", "\n", "# Recursively set immutable state", "\n", "for", "v", "in", "self", ".", "__dict__", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "AttrDict", ")", ":", "\n", "                ", "v", ".", "immutable", "(", "is_immutable", ")", "\n", "", "", "for", "v", "in", "self", ".", "values", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "AttrDict", ")", ":", "\n", "                ", "v", ".", "immutable", "(", "is_immutable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.collections.AttrDict.is_immutable": [[55, 57], ["None"], "methods", ["None"], ["", "", "", "def", "is_immutable", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "[", "AttrDict", ".", "IMMUTABLE", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.object_2_attributes": [[16, 34], ["isinstance", "isinstance", "config.function_config_lib.ModelParPair", "config_utils.update_config", "config.collections.AttrDict", "vals.items", "len", "config_utils.object_2_attributes", "v3.append", "config_utils.object_2_attributes"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.update_config", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.object_2_attributes", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.object_2_attributes"], ["def", "object_2_attributes", "(", "vals", ")", ":", "\n", "    ", "if", "isinstance", "(", "vals", ",", "dict", ")", ":", "\n", "        ", "if", "\"type\"", "in", "vals", "and", "\"par\"", "in", "vals", "and", "len", "(", "vals", ")", "==", "2", ":", "\n", "            ", "v1", "=", "ModelParPair", "(", "vals", "[", "\"type\"", "]", ")", "\n", "update_config", "(", "v1", ",", "vals", "[", "\"par\"", "]", ")", "\n", "return", "v1", "\n", "", "else", ":", "\n", "            ", "v2", "=", "AttrDict", "(", ")", "\n", "for", "key", ",", "value", "in", "vals", ".", "items", "(", ")", ":", "\n", "                ", "v2", "[", "key", "]", "=", "object_2_attributes", "(", "value", ")", "\n", "", "return", "v2", "\n", "", "", "elif", "isinstance", "(", "vals", ",", "list", ")", ":", "\n", "        ", "v3", "=", "[", "]", "\n", "for", "val", "in", "vals", ":", "\n", "            ", "v3", ".", "append", "(", "object_2_attributes", "(", "val", ")", ")", "\n", "", "return", "v3", "\n", "", "else", ":", "\n", "        ", "return", "vals", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.update_config": [[36, 83], ["isinstance", "isinstance", "other.items", "isinstance", "enumerate", "orig.clear", "TypeError", "exit", "exit", "isinstance", "isinstance", "config_utils.update_config", "isinstance", "TypeError", "len", "len", "range", "orig.update_type", "config_utils.update_config", "len", "orig.append", "len", "len", "enumerate", "config_utils.object_2_attributes", "elm_to_remove.append", "isinstance", "config_utils.update_config"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.update_config", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.function_config_lib.ModelParPair.update_type", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.update_config", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.object_2_attributes", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.update_config"], ["", "", "def", "update_config", "(", "orig", ",", "other", ")", ":", "\n", "    ", "if", "isinstance", "(", "other", ",", "dict", ")", ":", "\n", "        ", "if", "isinstance", "(", "orig", ",", "ModelParPair", ")", ":", "\n", "            ", "if", "\"method\"", "not", "in", "other", "and", "\"par\"", "not", "in", "other", ":", "\n", "                ", "exit", "(", "\n", "\"could not update a model_par_pair when \\\n                     neither type or par exist\"", "\n", ")", "\n", "", "else", ":", "\n", "                ", "if", "\"method\"", "in", "other", ":", "\n", "                    ", "orig", ".", "update_type", "(", "other", "[", "\"method\"", "]", ")", "\n", "", "if", "\"par\"", "in", "other", ":", "\n", "                    ", "update_config", "(", "orig", "[", "\"par\"", "]", ",", "other", "[", "\"par\"", "]", ")", "\n", "\n", "", "", "", "for", "key", ",", "value", "in", "other", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "orig", ":", "\n", "                ", "exit", "(", "\"unkown key:%s, in new config string \"", "%", "key", ")", "\n", "", "if", "isinstance", "(", "value", ",", "dict", ")", "or", "isinstance", "(", "value", ",", "list", ")", ":", "\n", "                ", "update_config", "(", "orig", "[", "key", "]", ",", "value", ")", "\n", "", "else", ":", "\n", "                ", "orig", "[", "key", "]", "=", "value", "\n", "\n", "", "", "", "elif", "isinstance", "(", "other", ",", "list", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "orig", ",", "list", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"the updated value is not a list\"", ")", "\n", "\n", "", "elm_to_remove", "=", "[", "]", "\n", "for", "i", ",", "other_i", "in", "enumerate", "(", "other", ")", ":", "\n", "            ", "if", "i", ">=", "len", "(", "orig", ")", ":", "\n", "                ", "orig", ".", "append", "(", "object_2_attributes", "(", "other_i", ")", ")", "\n", "", "if", "other_i", "==", "\".\"", ":", "\n", "                ", "pass", "\n", "", "elif", "other_i", "==", "\"-\"", ":", "\n", "                ", "elm_to_remove", ".", "append", "(", "i", ")", "\n", "", "elif", "isinstance", "(", "other_i", ",", "dict", ")", ":", "\n", "                ", "update_config", "(", "orig", "[", "i", "]", ",", "other_i", ")", "\n", "", "else", ":", "\n", "                ", "orig", "[", "i", "]", "=", "other_i", "\n", "\n", "", "", "if", "len", "(", "orig", ")", ">", "len", "(", "other", ")", ":", "\n", "            ", "elm_to_remove", "+=", "range", "(", "len", "(", "other", ")", ",", "len", "(", "orig", ")", ")", "\n", "\n", "", "final_attr", "=", "[", "i", "for", "j", ",", "i", "in", "enumerate", "(", "orig", ")", "if", "j", "not", "in", "elm_to_remove", "]", "\n", "orig", ".", "clear", "(", ")", "\n", "orig", "+=", "final_attr", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"unkown type of updated config\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.__merge_config_from_file": [[88, 92], ["config_utils.update_config", "open", "yaml.load"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.update_config", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["", "", "def", "__merge_config_from_file", "(", "cfg", ",", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "updates", "=", "yaml", ".", "load", "(", "f", ")", "\n", "", "update_config", "(", "cfg", ",", "updates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.__merge_config_from_cmdline": [[94, 97], ["demjson.decode", "config_utils.update_config"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.text_utils.NucleusSampling.decode", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.update_config"], ["", "def", "__merge_config_from_cmdline", "(", "cfg", ",", "cmdstring", ")", ":", "\n", "    ", "updates", "=", "demjson", ".", "decode", "(", "cmdstring", ")", "\n", "update_config", "(", "cfg", ",", "updates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.finalize_config": [[99, 107], ["cfg.immutable", "config_utils.__merge_config_from_file", "config_utils.__merge_config_from_cmdline"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.collections.AttrDict.immutable", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.__merge_config_from_file", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.__merge_config_from_cmdline"], ["", "def", "finalize_config", "(", "cfg", ",", "cfg_file_path", ",", "cfg_cmd_string", ")", ":", "\n", "    ", "if", "cfg_file_path", "is", "not", "None", ":", "\n", "        ", "__merge_config_from_file", "(", "cfg", ",", "cfg_file_path", ")", "\n", "\n", "", "if", "cfg_cmd_string", "is", "not", "None", ":", "\n", "        ", "__merge_config_from_cmdline", "(", "cfg", ",", "cfg_cmd_string", ")", "\n", "\n", "", "cfg", ".", "immutable", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.convert_cfg_to_dict": [[112, 127], ["isinstance", "cfg.items", "isinstance", "isinstance", "config_utils.convert_cfg_to_dict", "config_utils.convert_cfg_to_dict", "config_utils.convert_cfg_to_dict"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.convert_cfg_to_dict", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.convert_cfg_to_dict", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.convert_cfg_to_dict"], ["", "def", "convert_cfg_to_dict", "(", "cfg", ")", ":", "\n", "    ", "if", "isinstance", "(", "cfg", ",", "AttrDict", ")", ":", "\n", "        ", "cfg_dict", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "cfg", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "list", ")", ":", "\n", "                ", "val_list", "=", "[", "convert_cfg_to_dict", "(", "x", ")", "for", "x", "in", "val", "]", "\n", "cfg_dict", "[", "key", "]", "=", "val_list", "\n", "", "else", ":", "\n", "                ", "cfg_dict", "[", "key", "]", "=", "convert_cfg_to_dict", "(", "val", ")", "\n", "", "", "return", "cfg_dict", "\n", "", "elif", "isinstance", "(", "cfg", ",", "ModelParPair", ")", ":", "\n", "        ", "cfg_dict", "=", "{", "\"method\"", ":", "cfg", ".", "method", ",", "\"par\"", ":", "convert_cfg_to_dict", "(", "cfg", ".", "par", ")", "}", "\n", "return", "cfg_dict", "\n", "", "else", ":", "\n", "        ", "return", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.dump_config": [[132, 136], ["open", "yaml.dump", "config_utils.convert_cfg_to_dict"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.config_utils.convert_cfg_to_dict"], ["", "", "def", "dump_config", "(", "cfg", ",", "config_file", ")", ":", "\n", "    ", "with", "open", "(", "config_file", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "        ", "yaml", ".", "dump", "(", "\n", "convert_cfg_to_dict", "(", "cfg", ")", ",", "outfile", ",", "default_flow_style", "=", "False", ",", "encoding", "=", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.function_config_lib.ModelParPair.__init__": [[144, 154], ["config.collections.AttrDict.__init__", "exit"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ",", "model_type", ")", ":", "\n", "        ", "super", "(", "ModelParPair", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "method", "=", "model_type", "\n", "if", "self", ".", "method", "not", "in", "MODEL_TYPE_PAR_DICT", ":", "\n", "            ", "exit", "(", "\n", "\"unkown model type %s, please check \\\n                 config/function_config_lib.py for allowed options\"", "\n", ")", "\n", "", "self", ".", "par", "=", "MODEL_TYPE_PAR_DICT", "[", "self", ".", "method", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.function_config_lib.ModelParPair.update_type": [[155, 159], ["None"], "methods", ["None"], ["", "def", "update_type", "(", "self", ",", "updated_pair_type", ")", ":", "\n", "        ", "if", "updated_pair_type", "!=", "self", ".", "method", ":", "\n", "            ", "self", ".", "method", "=", "updated_pair_type", "\n", "self", ".", "par", "=", "MODEL_TYPE_PAR_DICT", "[", "self", ".", "method", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.config.function_config_lib.ModelParPair.is_immutable": [[160, 162], ["None"], "methods", ["None"], ["", "", "def", "is_immutable", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "[", "ModelParPair", ".", "IMMUTABLE", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.faster_RCNN_feat_reader.read": [[19, 21], ["numpy.load"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["    ", "def", "read", "(", "self", ",", "image_feat_path", ")", ":", "\n", "        ", "return", "np", ".", "load", "(", "image_feat_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.CHW_feat_reader.read": [[24, 29], ["numpy.load", "feat.squeeze.squeeze.squeeze"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["    ", "def", "read", "(", "self", ",", "image_feat_path", ")", ":", "\n", "        ", "feat", "=", "np", ".", "load", "(", "image_feat_path", ")", "\n", "assert", "feat", ".", "shape", "[", "0", "]", "==", "1", ",", "\"batch is not 1\"", "\n", "feat", "=", "feat", ".", "squeeze", "(", "0", ")", "\n", "return", "feat", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.dim_3_reader.read": [[32, 37], ["numpy.load", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["    ", "def", "read", "(", "self", ",", "image_feat_path", ")", ":", "\n", "        ", "tmp", "=", "np", ".", "load", "(", "image_feat_path", ")", "\n", "_", ",", "_", ",", "c_dim", "=", "tmp", ".", "shape", "\n", "image_feat", "=", "np", ".", "reshape", "(", "tmp", ",", "(", "-", "1", ",", "c_dim", ")", ")", "\n", "return", "image_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.HWC_feat_reader.read": [[40, 46], ["numpy.load", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["    ", "def", "read", "(", "self", ",", "image_feat_path", ")", ":", "\n", "        ", "tmp", "=", "np", ".", "load", "(", "image_feat_path", ")", "\n", "assert", "tmp", ".", "shape", "[", "0", "]", "==", "1", ",", "\"batch is not 1\"", "\n", "_", ",", "_", ",", "_", ",", "c_dim", "=", "tmp", ".", "shape", "\n", "image_feat", "=", "np", ".", "reshape", "(", "tmp", ",", "(", "-", "1", ",", "c_dim", ")", ")", "\n", "return", "image_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.padded_faster_RCNN_feat_reader.__init__": [[49, 51], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_loc", ")", ":", "\n", "        ", "self", ".", "max_loc", "=", "max_loc", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.padded_faster_RCNN_feat_reader.read": [[52, 59], ["numpy.load", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["", "def", "read", "(", "self", ",", "image_feat_path", ")", ":", "\n", "        ", "image_feat", "=", "np", ".", "load", "(", "image_feat_path", ")", "\n", "image_loc", ",", "image_dim", "=", "image_feat", ".", "shape", "\n", "tmp_image_feat", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_loc", ",", "image_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_image_feat", "[", "0", ":", "image_loc", ",", "]", "=", "image_feat", "\n", "image_feat", "=", "tmp_image_feat", "\n", "return", "(", "image_feat", ",", "image_loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.padded_faster_RCNN_with_bbox_feat_reader.__init__": [[62, 64], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "max_loc", ")", ":", "\n", "        ", "self", ".", "max_loc", "=", "max_loc", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.padded_faster_RCNN_with_bbox_feat_reader.read": [[65, 76], ["numpy.load", "numpy.load.item().get", "numpy.load.item().get", "numpy.zeros", "numpy.zeros", "numpy.load.item", "numpy.load.item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "def", "read", "(", "self", ",", "image_feat_path", ")", ":", "\n", "        ", "image_feat_bbox", "=", "np", ".", "load", "(", "image_feat_path", ")", "\n", "image_boxes", "=", "image_feat_bbox", ".", "item", "(", ")", ".", "get", "(", "\"image_bboxes\"", ")", "\n", "tmp_image_feat", "=", "image_feat_bbox", ".", "item", "(", ")", ".", "get", "(", "\"image_feat\"", ")", "\n", "image_loc", ",", "image_dim", "=", "tmp_image_feat", ".", "shape", "\n", "tmp_image_feat_2", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_loc", ",", "image_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_image_feat_2", "[", "0", ":", "image_loc", ",", "]", "=", "tmp_image_feat", "\n", "tmp_image_box", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_loc", ",", "4", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "tmp_image_box", "[", "0", ":", "image_loc", "]", "=", "image_boxes", "\n", "\n", "return", "(", "tmp_image_feat_2", ",", "image_loc", ",", "tmp_image_box", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.vqa_dataset.__init__": [[129, 211], ["torch.utils.data.Dataset.__init__", "imdb_file.endswith", "dataset_utils.text_processing.VocabDict", "dataset_utils.text_processing.VocabDict", "numpy.load", "TypeError", "print", "TypeError", "print", "print", "os.path.basename", "os.path.join", "numpy.load", "dataSet.vqa_dataset.image_feat_readers.append", "os.listdir", "print", "dataSet.get_image_feat_reader", "feat_file.endswith", "dataSet.read_in_image_feats"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.get_image_feat_reader", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.read_in_image_feats"], ["    ", "def", "__init__", "(", "self", ",", "imdb_file", ",", "image_feat_directories", ",", "verbose", "=", "False", ",", "**", "data_params", ")", ":", "\n", "        ", "super", "(", "vqa_dataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "imdb_file", ".", "endswith", "(", "\".npy\"", ")", ":", "\n", "            ", "imdb", "=", "np", ".", "load", "(", "imdb_file", ")", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"unknown imdb format.\"", ")", "\n", "", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "imdb", "=", "imdb", "\n", "self", ".", "image_feat_directories", "=", "image_feat_directories", "\n", "self", ".", "data_params", "=", "data_params", "\n", "self", ".", "image_depth_first", "=", "data_params", "[", "\"image_depth_first\"", "]", "\n", "self", ".", "image_max_loc", "=", "(", "\n", "data_params", "[", "\"image_max_loc\"", "]", "if", "\"image_max_loc\"", "in", "data_params", "else", "None", "\n", ")", "\n", "self", ".", "vocab_dict", "=", "text_processing", ".", "VocabDict", "(", "data_params", "[", "\"vocab_question_file\"", "]", ")", "\n", "self", ".", "T_encoder", "=", "data_params", "[", "\"T_encoder\"", "]", "\n", "\n", "# read the header of imdb file", "\n", "header_idx", "=", "0", "\n", "self", ".", "first_element_idx", "=", "1", "\n", "header", "=", "self", ".", "imdb", "[", "header_idx", "]", "\n", "self", ".", "load_answer", "=", "header", "[", "\"has_answer\"", "]", "\n", "self", ".", "load_gt_layout", "=", "header", "[", "\"has_gt_layout\"", "]", "\n", "self", ".", "load_gt_layout", "=", "False", "\n", "data_version", "=", "header", "[", "\"version\"", "]", "\n", "if", "data_version", "!=", "imdb_version", ":", "\n", "            ", "print", "(", "\n", "\"observed imdb_version is\"", ",", "\n", "data_version", ",", "\n", "\"expected imdb version is\"", ",", "\n", "imdb_version", ",", "\n", ")", "\n", "raise", "TypeError", "(", "\"imdb version do not match.\"", ")", "\n", "\n", "", "if", "\"load_gt_layout\"", "in", "data_params", ":", "\n", "            ", "self", ".", "load_gt_layout", "=", "data_params", "[", "\"load_gt_layout\"", "]", "\n", "# the answer dict is always loaded, regardless of self.load_answer", "\n", "", "self", ".", "answer_dict", "=", "text_processing", ".", "VocabDict", "(", "data_params", "[", "\"vocab_answer_file\"", "]", ")", "\n", "\n", "if", "self", ".", "load_gt_layout", ":", "\n", "            ", "self", ".", "T_decoder", "=", "data_params", "[", "\"T_decoder\"", "]", "\n", "self", ".", "assembler", "=", "data_params", "[", "\"assembler\"", "]", "\n", "self", ".", "prune_filter_module", "=", "(", "\n", "data_params", "[", "\"prune_filter_module\"", "]", "\n", "if", "\"prune_filter_module\"", "in", "data_params", "\n", "else", "False", "\n", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"imdb does not contain ground-truth layout\"", ")", "\n", "print", "(", "\"Loading model and config ...\"", ")", "\n", "\n", "# load one feature map to peek its size", "\n", "", "self", ".", "image_feat_readers", "=", "[", "]", "\n", "for", "image_dir", "in", "self", ".", "image_feat_directories", ":", "\n", "            ", "image_file_name", "=", "os", ".", "path", ".", "basename", "(", "\n", "self", ".", "imdb", "[", "self", ".", "first_element_idx", "]", "[", "\"feature_path\"", "]", "\n", ")", "\n", "image_feat_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_file_name", ")", "\n", "feats", "=", "np", ".", "load", "(", "image_feat_path", ")", "\n", "self", ".", "image_feat_readers", ".", "append", "(", "\n", "get_image_feat_reader", "(", "\n", "feats", ".", "ndim", ",", "self", ".", "image_depth_first", ",", "feats", ",", "self", ".", "image_max_loc", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "fastRead", "=", "False", "\n", "self", ".", "testMode", "=", "False", "\n", "if", "data_params", "[", "\"test_mode\"", "]", ":", "\n", "            ", "self", ".", "testMode", "=", "True", "\n", "", "if", "data_params", "[", "\"fastRead\"", "]", ":", "\n", "            ", "self", ".", "fastRead", "=", "True", "\n", "self", ".", "featDict", "=", "{", "}", "\n", "image_count", "=", "0", "\n", "image_dir0", "=", "self", ".", "image_feat_directories", "[", "0", "]", "\n", "for", "feat_file", "in", "os", ".", "listdir", "(", "image_dir0", ")", ":", "\n", "                ", "if", "feat_file", ".", "endswith", "(", "\"npy\"", ")", ":", "\n", "                    ", "image_feats", "=", "read_in_image_feats", "(", "\n", "self", ".", "image_feat_directories", ",", "self", ".", "image_feat_readers", ",", "feat_file", "\n", ")", "\n", "self", ".", "featDict", "[", "feat_file", "]", "=", "image_feats", "\n", "image_count", "+=", "1", "\n", "", "", "print", "(", "\"load %d images\"", "%", "image_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.vqa_dataset.__len__": [[212, 217], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "testMode", ":", "\n", "            ", "return", "1", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "imdb", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.vqa_dataset._get_image_features_": [[218, 240], ["isinstance", "dataSet.read_in_image_feats", "len", "len", "exit", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.read_in_image_feats"], ["", "", "def", "_get_image_features_", "(", "self", ",", "image_file_name", ")", ":", "\n", "        ", "if", "self", ".", "fastRead", ":", "\n", "            ", "image_feats", "=", "self", ".", "featDict", "[", "image_file_name", "]", "\n", "if", "len", "(", "image_feats", ")", "!=", "len", "(", "self", ".", "image_feat_directories", ")", ":", "\n", "                ", "exit", "(", "image_file_name", "+", "\"have %d features\"", "%", "len", "(", "image_feats", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "image_feats", "=", "read_in_image_feats", "(", "\n", "self", ".", "image_feat_directories", ",", "self", ".", "image_feat_readers", ",", "image_file_name", "\n", ")", "\n", "\n", "", "image_boxes", "=", "None", "\n", "image_loc", "=", "None", "\n", "\n", "if", "isinstance", "(", "image_feats", "[", "0", "]", ",", "tuple", ")", ":", "\n", "            ", "image_loc", "=", "image_feats", "[", "0", "]", "[", "1", "]", "\n", "image_feats_return", "=", "[", "image_feats", "[", "0", "]", "[", "0", "]", "]", "+", "image_feats", "[", "1", ":", "]", "\n", "if", "len", "(", "image_feats", "[", "0", "]", ")", "==", "3", ":", "\n", "                ", "image_boxes", "=", "image_feats", "[", "0", "]", "[", "2", "]", "\n", "", "", "else", ":", "\n", "            ", "image_feats_return", "=", "image_feats", "\n", "\n", "", "return", "image_feats_return", ",", "image_boxes", ",", "image_loc", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.vqa_dataset.__getitem__": [[241, 317], ["numpy.zeros", "len", "min", "dataSet.vqa_dataset._get_image_features_", "numpy.zeros", "numpy.zeros.fill", "numpy.zeros", "dict", "enumerate", "dataSet.vqa_dataset.vocab_dict.word2idx", "dataSet.vqa_dataset.answer_dict.word2idx", "numpy.array", "range", "dataSet.vqa_dataset.assembler.module_list2tokens", "numpy.random.choice", "dataSet.compute_answer_scores", "str", "dataSet.vqa_dataset.answer_dict.word2idx", "dataSet.vqa_dataset.answer_dict.word2idx", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.vqa_dataset._get_image_features_", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.word2idx", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.word2idx", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.compute_answer_scores", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.word2idx", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.word2idx"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "input_seq", "=", "np", ".", "zeros", "(", "(", "self", ".", "T_encoder", ")", ",", "np", ".", "int32", ")", "\n", "idx", "+=", "self", ".", "first_element_idx", "\n", "iminfo", "=", "self", ".", "imdb", "[", "idx", "]", "\n", "question_inds", "=", "[", "self", ".", "vocab_dict", ".", "word2idx", "(", "w", ")", "for", "w", "in", "iminfo", "[", "\"question_tokens\"", "]", "]", "\n", "seq_length", "=", "len", "(", "question_inds", ")", "\n", "read_len", "=", "min", "(", "seq_length", ",", "self", ".", "T_encoder", ")", "\n", "input_seq", "[", ":", "read_len", "]", "=", "question_inds", "[", ":", "read_len", "]", "\n", "\n", "image_file_name", "=", "self", ".", "imdb", "[", "idx", "]", "[", "\"feature_path\"", "]", "\n", "image_feats", ",", "image_boxes", ",", "image_loc", "=", "self", ".", "_get_image_features_", "(", "image_file_name", ")", "\n", "\n", "answer", "=", "None", "\n", "valid_answers_idx", "=", "np", ".", "zeros", "(", "(", "10", ")", ",", "np", ".", "int32", ")", "\n", "valid_answers_idx", ".", "fill", "(", "-", "1", ")", "\n", "answer_scores", "=", "np", ".", "zeros", "(", "self", ".", "answer_dict", ".", "num_vocab", ",", "np", ".", "float32", ")", "\n", "if", "self", ".", "load_answer", ":", "\n", "            ", "if", "\"answer\"", "in", "iminfo", ":", "\n", "                ", "answer", "=", "iminfo", "[", "\"answer\"", "]", "\n", "", "elif", "\"valid_answers\"", "in", "iminfo", ":", "\n", "                ", "valid_answers", "=", "iminfo", "[", "\"valid_answers\"", "]", "\n", "answer", "=", "np", ".", "random", ".", "choice", "(", "valid_answers", ")", "\n", "valid_answers_idx", "[", ":", "len", "(", "valid_answers", ")", "]", "=", "[", "\n", "self", ".", "answer_dict", ".", "word2idx", "(", "ans", ")", "for", "ans", "in", "valid_answers", "\n", "]", "\n", "ans_idx", "=", "[", "self", ".", "answer_dict", ".", "word2idx", "(", "ans", ")", "for", "ans", "in", "valid_answers", "]", "\n", "answer_scores", "=", "compute_answer_scores", "(", "\n", "ans_idx", ",", "self", ".", "answer_dict", ".", "num_vocab", ",", "self", ".", "answer_dict", ".", "UNK_idx", "\n", ")", "\n", "\n", "", "answer_idx", "=", "self", ".", "answer_dict", ".", "word2idx", "(", "answer", ")", "\n", "\n", "", "if", "self", ".", "load_gt_layout", ":", "\n", "            ", "gt_layout_tokens", "=", "iminfo", "[", "\"gt_layout_tokens\"", "]", "\n", "if", "self", ".", "prune_filter_module", ":", "\n", "                ", "for", "n_t", "in", "range", "(", "len", "(", "gt_layout_tokens", ")", "-", "1", ",", "0", ",", "-", "1", ")", ":", "\n", "                    ", "if", "(", "\n", "gt_layout_tokens", "[", "n_t", "-", "1", "]", "in", "{", "\"_Filter\"", ",", "\"_Find\"", "}", "\n", "and", "gt_layout_tokens", "[", "n_t", "]", "==", "\"_Filter\"", "\n", ")", ":", "\n", "                        ", "gt_layout_tokens", "[", "n_t", "]", "=", "None", "\n", "", "", "gt_layout_tokens", "=", "[", "t", "for", "t", "in", "gt_layout_tokens", "if", "t", "]", "\n", "", "gt_layout", "=", "np", ".", "array", "(", "\n", "self", ".", "assembler", ".", "module_list2tokens", "(", "gt_layout_tokens", ",", "self", ".", "T_decoder", ")", "\n", ")", "\n", "\n", "", "sample", "=", "dict", "(", "input_seq_batch", "=", "input_seq", ",", "seq_length_batch", "=", "seq_length", ")", "\n", "\n", "for", "im_idx", ",", "image_feat", "in", "enumerate", "(", "image_feats", ")", ":", "\n", "            ", "if", "im_idx", "==", "0", ":", "\n", "                ", "sample", "[", "\"image_feat_batch\"", "]", "=", "image_feat", "\n", "", "else", ":", "\n", "                ", "feat_key", "=", "\"image_feat_batch_%s\"", "%", "str", "(", "im_idx", ")", "\n", "sample", "[", "feat_key", "]", "=", "image_feat", "\n", "\n", "", "", "if", "image_loc", "is", "not", "None", ":", "\n", "            ", "sample", "[", "\"image_dim\"", "]", "=", "image_loc", "\n", "\n", "", "if", "self", ".", "load_answer", ":", "\n", "            ", "sample", "[", "\"answer_label_batch\"", "]", "=", "answer_idx", "\n", "", "if", "self", ".", "load_gt_layout", ":", "\n", "            ", "sample", "[", "\"gt_layout_batch\"", "]", "=", "gt_layout", "\n", "\n", "", "if", "valid_answers_idx", "is", "not", "None", ":", "\n", "            ", "sample", "[", "\"valid_ans_label_batch\"", "]", "=", "valid_answers_idx", "\n", "sample", "[", "\"ans_scores\"", "]", "=", "answer_scores", "\n", "\n", "", "if", "image_boxes", "is", "not", "None", ":", "\n", "            ", "sample", "[", "\"image_boxes\"", "]", "=", "image_boxes", "\n", "\n", "# used for error analysis and debug,", "\n", "# output question_id, image_id, question, answer,valid_answers,", "\n", "", "if", "self", ".", "verbose", ":", "\n", "            ", "sample", "[", "\"verbose_info\"", "]", "=", "iminfo", "\n", "\n", "", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.parse_npz_img_feat": [[78, 80], ["None"], "function", ["None"], ["", "", "def", "parse_npz_img_feat", "(", "feat", ")", ":", "\n", "    ", "return", "feat", "[", "\"x\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.get_image_feat_reader": [[82, 99], ["dataSet.faster_RCNN_feat_reader", "isinstance", "dataSet.dim_3_reader", "image_feat.item", "dataSet.padded_faster_RCNN_with_bbox_feat_reader", "dataSet.padded_faster_RCNN_feat_reader", "dataSet.CHW_feat_reader", "dataSet.HWC_feat_reader", "TypeError"], "function", ["None"], ["", "def", "get_image_feat_reader", "(", "ndim", ",", "channel_first", ",", "image_feat", ",", "max_loc", "=", "None", ")", ":", "\n", "    ", "if", "ndim", "==", "2", "or", "ndim", "==", "0", ":", "\n", "        ", "if", "max_loc", "is", "None", ":", "\n", "            ", "return", "faster_RCNN_feat_reader", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "image_feat", ".", "item", "(", "0", ")", ",", "dict", ")", ":", "\n", "                ", "return", "padded_faster_RCNN_with_bbox_feat_reader", "(", "max_loc", ")", "\n", "", "else", ":", "\n", "                ", "return", "padded_faster_RCNN_feat_reader", "(", "max_loc", ")", "\n", "", "", "", "elif", "ndim", "==", "3", "and", "not", "channel_first", ":", "\n", "        ", "return", "dim_3_reader", "(", ")", "\n", "", "elif", "ndim", "==", "4", "and", "channel_first", ":", "\n", "        ", "return", "CHW_feat_reader", "(", ")", "\n", "", "elif", "ndim", "==", "4", "and", "not", "channel_first", ":", "\n", "        ", "return", "HWC_feat_reader", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "\"unkown image feature format\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.compute_answer_scores": [[101, 110], ["numpy.zeros", "set", "answers.count", "min", "numpy.float32"], "function", ["None"], ["", "", "def", "compute_answer_scores", "(", "answers", ",", "num_of_answers", ",", "unk_idx", ")", ":", "\n", "    ", "scores", "=", "np", ".", "zeros", "(", "(", "num_of_answers", ")", ",", "np", ".", "float32", ")", "\n", "for", "answer", "in", "set", "(", "answers", ")", ":", "\n", "        ", "if", "answer", "==", "unk_idx", ":", "\n", "            ", "scores", "[", "answer", "]", "=", "0", "\n", "", "else", ":", "\n", "            ", "answer_count", "=", "answers", ".", "count", "(", "answer", ")", "\n", "scores", "[", "answer", "]", "=", "min", "(", "np", ".", "float32", "(", "answer_count", ")", "*", "0.3", ",", "1", ")", "\n", "", "", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.read_in_image_feats": [[112, 120], ["enumerate", "os.path.join", "image_readers[].read", "image_feats.append"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.padded_faster_RCNN_with_bbox_feat_reader.read"], ["", "def", "read_in_image_feats", "(", "image_dirs", ",", "image_readers", ",", "image_file_name", ")", ":", "\n", "    ", "image_feats", "=", "[", "]", "\n", "for", "i", ",", "image_dir", "in", "enumerate", "(", "image_dirs", ")", ":", "\n", "        ", "image_feat_path", "=", "os", ".", "path", ".", "join", "(", "image_dir", ",", "image_file_name", ")", "\n", "tmp_image_feat", "=", "image_readers", "[", "i", "]", ".", "read", "(", "image_feat_path", ")", "\n", "image_feats", ".", "append", "(", "tmp_image_feat", ")", "\n", "\n", "", "return", "image_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.__init__": [[30, 36], ["text_processing.load_str_list", "len", "enumerate"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.load_str_list"], ["    ", "def", "__init__", "(", "self", ",", "vocab_file", ")", ":", "\n", "        ", "self", ".", "word_list", "=", "load_str_list", "(", "vocab_file", ")", "\n", "self", ".", "word2idx_dict", "=", "{", "w", ":", "n_w", "for", "n_w", ",", "w", "in", "enumerate", "(", "self", ".", "word_list", ")", "}", "\n", "self", ".", "num_vocab", "=", "len", "(", "self", ".", "word_list", ")", "\n", "self", ".", "UNK_idx", "=", "(", "\n", "self", ".", "word2idx_dict", "[", "\"<unk>\"", "]", "if", "\"<unk>\"", "in", "self", ".", "word2idx_dict", "else", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.idx2word": [[38, 40], ["None"], "methods", ["None"], ["", "def", "idx2word", "(", "self", ",", "n_w", ")", ":", "\n", "        ", "return", "self", ".", "word_list", "[", "n_w", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.word2idx": [[41, 51], ["ValueError"], "methods", ["None"], ["", "def", "word2idx", "(", "self", ",", "w", ")", ":", "\n", "        ", "if", "w", "in", "self", ".", "word2idx_dict", ":", "\n", "            ", "return", "self", ".", "word2idx_dict", "[", "w", "]", "\n", "", "elif", "self", ".", "UNK_idx", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "UNK_idx", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"word %s not in dictionary \\\n                             (while dictionary does not contain <unk>)\"", "\n", "%", "w", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.tokenize_and_index": [[53, 56], ["text_processing.VocabDict.word2idx", "text_processing.tokenize"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.word2idx", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.tokenize"], ["", "", "def", "tokenize_and_index", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "inds", "=", "[", "self", ".", "word2idx", "(", "w", ")", "for", "w", "in", "tokenize", "(", "sentence", ")", "]", "\n", "return", "inds", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.tokenize": [[14, 20], ["sentence.replace().replace().replace.lower", "sentence.replace().replace().replace.replace().replace().replace", "SENTENCE_SPLIT_REGEX.split", "t.strip", "sentence.replace().replace().replace.replace().replace", "len", "sentence.replace().replace().replace.replace", "t.strip"], "function", ["None"], ["def", "tokenize", "(", "sentence", ")", ":", "\n", "    ", "sentence", "=", "sentence", ".", "lower", "(", ")", "\n", "sentence", "=", "sentence", ".", "replace", "(", "\",\"", ",", "\"\"", ")", ".", "replace", "(", "\"?\"", ",", "\"\"", ")", ".", "replace", "(", "\"'s\"", ",", "\" 's\"", ")", "\n", "tokens", "=", "SENTENCE_SPLIT_REGEX", ".", "split", "(", "sentence", ")", "\n", "tokens", "=", "[", "t", ".", "strip", "(", ")", "for", "t", "in", "tokens", "if", "len", "(", "t", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.load_str_list": [[22, 27], ["open", "f.readlines", "l.strip"], "function", ["None"], ["", "def", "load_str_list", "(", "fname", ")", ":", "\n", "    ", "with", "open", "(", "fname", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "lines", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "lines", "]", "\n", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.create_imdb_header.create_header": [[14, 26], ["datetime.datetime.now", "datetime.datetime.now.strftime", "dict"], "function", ["None"], ["def", "create_header", "(", "dataset_name", ",", "has_answer", ",", "has_gt_layout", ")", ":", "\n", "    ", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "time", "=", "now", ".", "strftime", "(", "\"%Y-%m-%d %H:%M\"", ")", "\n", "version", "=", "imdb_version", "\n", "header", "=", "dict", "(", "\n", "create_time", "=", "time", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "version", "=", "version", ",", "\n", "has_answer", "=", "has_answer", ",", "\n", "has_gt_layout", "=", "has_gt_layout", ",", "\n", ")", "\n", "return", "header", "\n", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.vqa_collates.filter_unk_collate": [[13, 16], ["list", "torch.utils.data.dataloader.default_collate", "filter", "numpy.sum"], "function", ["None"], ["def", "filter_unk_collate", "(", "batch", ")", ":", "\n", "    ", "batch", "=", "list", "(", "filter", "(", "lambda", "x", ":", "np", ".", "sum", "(", "x", "[", "\"ans_scores\"", "]", ")", ">", "0", ",", "batch", ")", ")", "\n", "return", "default_collate", "(", "batch", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.vqa_concate_dataset.vqa_concate_dataset.__init__": [[13, 17], ["torch.utils.data.ConcatDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", "vqa_concate_dataset", ",", "self", ")", ".", "__init__", "(", "datasets", ")", "\n", "self", ".", "vocab_dict", "=", "datasets", "[", "0", "]", ".", "vocab_dict", "\n", "self", ".", "answer_dict", "=", "datasets", "[", "0", "]", ".", "answer_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.vqa_html_writer.vqa_html_writer.__init__": [[40, 45], ["open", "vqa_html_writer.vqa_html_writer._writer.write"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["    ", "def", "__init__", "(", "self", ",", "file_path", ",", "elements_per_row", "=", "4", ")", ":", "\n", "        ", "self", ".", "_writer", "=", "open", "(", "file_path", ",", "\"w\"", ")", "\n", "self", ".", "_writer", ".", "write", "(", "html_header", ")", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "elements_per_row", "=", "elements_per_row", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.vqa_html_writer.vqa_html_writer.write_element": [[46, 57], ["vqa_html_writer.vqa_html_writer._writer.write", "vqa_html_writer.vqa_html_writer._writer.write", "kwarg.items", "vqa_html_writer.vqa_html_writer._writer.write", "vqa_html_writer.vqa_html_writer._writer.write", "vqa_html_writer.vqa_html_writer._writer.write", "vqa_html_writer.vqa_html_writer._writer.write"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "def", "write_element", "(", "self", ",", "image", ",", "**", "kwarg", ")", ":", "\n", "        ", "if", "self", ".", "count", "%", "self", ".", "elements_per_row", "==", "0", ":", "\n", "            ", "self", ".", "_writer", ".", "write", "(", "row_header", "+", "\"\\n\"", ")", "\n", "", "self", ".", "_writer", ".", "write", "(", "element_header", ")", "\n", "self", ".", "_writer", ".", "write", "(", "'<img src=\" '", "+", "image", "+", "'\" width = 100%\">'", ")", "\n", "for", "key", ",", "value", "in", "kwarg", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "_writer", ".", "write", "(", "\"<p>%s : %s</p>\"", "%", "(", "key", ",", "value", ")", ")", "\n", "", "self", ".", "_writer", ".", "write", "(", "\"</div>\"", ")", "\n", "self", ".", "count", "+=", "1", "\n", "if", "self", ".", "count", "%", "self", ".", "elements_per_row", "==", "0", "and", "self", ".", "count", ">", "0", ":", "\n", "            ", "self", ".", "_writer", ".", "write", "(", "\"</div>\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.vqa_html_writer.vqa_html_writer.close": [[58, 63], ["vqa_html_writer.vqa_html_writer._writer.write", "vqa_html_writer.vqa_html_writer._writer.close", "vqa_html_writer.vqa_html_writer._writer.write"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.vqa_html_writer.vqa_html_writer.close", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "count", "%", "self", ".", "elements_per_row", "!=", "0", ":", "\n", "            ", "self", ".", "_writer", ".", "write", "(", "\"</div>\"", ")", "\n", "", "self", ".", "_writer", ".", "write", "(", "html_footer", ")", "\n", "self", ".", "_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.utils.unique_columns": [[12, 19], ["numpy.dtype", "numpy.asfortranarray().view", "numpy.unique", "u.view().reshape", "numpy.asfortranarray", "numpy.where", "range", "u.view"], "function", ["None"], ["def", "unique_columns", "(", "data", ")", ":", "\n", "    ", "dt", "=", "np", ".", "dtype", "(", "(", "np", ".", "void", ",", "data", ".", "dtype", ".", "itemsize", "*", "data", ".", "shape", "[", "0", "]", ")", ")", "\n", "dataf", "=", "np", ".", "asfortranarray", "(", "data", ")", ".", "view", "(", "dt", ")", "\n", "u", ",", "uind", "=", "np", ".", "unique", "(", "dataf", ",", "return_inverse", "=", "True", ")", "\n", "m", "=", "u", ".", "view", "(", "data", ".", "dtype", ")", ".", "reshape", "(", "-", "1", ",", "data", ".", "shape", "[", "0", "]", ")", ".", "T", "\n", "res", "=", "[", "np", ".", "where", "(", "uind", "==", "x", ")", "[", "0", "]", "for", "x", "in", "range", "(", "m", ".", "shape", "[", "1", "]", ")", "]", "\n", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.process_answers.get_score": [[179, 190], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.process_answers.process_punctuation": [[192, 203], ["period_strip.sub", "outText.replace.replace", "outText.replace.replace", "re.search"], "function", ["None"], []], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.process_answers.process_digit_article": [[205, 219], ["inText.lower().split", "enumerate", "manual_map.setdefault", "inText.lower", "outText.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.process_answers.multiple_replace": [[221, 225], ["text.replace.replace"], "function", ["None"], []], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.process_answers.preprocess_answer": [[227, 231], ["process_answers.process_digit_article", "answer.replace.replace", "process_answers.process_punctuation"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.process_answers.process_digit_article", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.process_answers.process_punctuation"], []], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.process_answers.filter_answers": [[233, 252], ["occurence.keys", "print", "process_answers.preprocess_answer", "occurence[].add", "set", "len", "answer_list.append", "len"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.process_answers.preprocess_answer", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.helper.answer_json.add"], []], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.build_vqa_2.extract_answers": [[19, 23], ["None"], "function", ["None"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.build_vqa_2.build_imdb": [[25, 107], ["os.path.join", "os.path.join", "print", "os.path.exists", "enumerate", "print", "dataset_utils.create_imdb_header.create_header", "open", "image_set.replace", "dataset_utils.text_processing.tokenize", "dict", "open", "json.load", "len", "print", "build_vqa_2.extract_answers", "json.load", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.create_imdb_header.create_header", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.tokenize", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.build_vqa_2.extract_answers", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.extract_word_glove_embedding.subset_weights": [[17, 40], ["print", "dataset_utils.text_processing.VocabDict", "numpy.zeros", "dataset_utils.text_processing.VocabDict.word2idx_dict.items", "open", "f.readlines", "len", "entry.split", "numpy.array", "numpy.array", "entries[].split", "list", "map"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print"], ["def", "subset_weights", "(", "glove_file", ",", "vocabulary_file", ")", ":", "\n", "    ", "with", "open", "(", "glove_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "entries", "=", "f", ".", "readlines", "(", ")", "\n", "", "emb_dim", "=", "len", "(", "entries", "[", "0", "]", ".", "split", "(", "\" \"", ")", ")", "-", "1", "\n", "print", "(", "\"embedding dim is %d\"", "%", "emb_dim", ")", "\n", "\n", "vocabulary", "=", "VocabDict", "(", "vocab_file", "=", "vocabulary_file", ")", "\n", "\n", "weights", "=", "np", ".", "zeros", "(", "(", "vocabulary", ".", "num_vocab", ",", "emb_dim", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "word2emb", "=", "{", "}", "\n", "for", "entry", "in", "entries", ":", "\n", "        ", "vals", "=", "entry", ".", "split", "(", "\" \"", ")", "\n", "word", "=", "vals", "[", "0", "]", "\n", "vals", "=", "np", ".", "array", "(", "list", "(", "map", "(", "float", ",", "vals", "[", "1", ":", "]", ")", ")", ")", "\n", "word2emb", "[", "word", "]", "=", "np", ".", "array", "(", "vals", ")", "\n", "\n", "", "for", "word", ",", "idx", "in", "vocabulary", ".", "word2idx_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "word", "not", "in", "word2emb", ":", "\n", "            ", "continue", "\n", "", "weights", "[", "idx", "]", "=", "word2emb", "[", "word", "]", "\n", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.extract_ques_info.extract_info": [[13, 37], ["writer.write", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["def", "extract_info", "(", "annotations", ",", "writer", ")", ":", "\n", "    ", "for", "annotation", "in", "annotations", ":", "\n", "        ", "question_id", "=", "annotation", "[", "\"question_id\"", "]", "\n", "answer_type", "=", "annotation", "[", "\"answer_type\"", "]", "\n", "question_type", "=", "annotation", "[", "\"question_type\"", "]", "\n", "multiple_choice_answer", "=", "annotation", "[", "\"multiple_choice_answer\"", "]", "\n", "answers", "=", "[", "a", "[", "\"answer\"", "]", "for", "a", "in", "annotation", "[", "\"answers\"", "]", "]", "\n", "answers_out", "=", "\"|\"", ".", "join", "(", "[", "str", "(", "a", ")", "for", "a", "in", "answers", "]", ")", "\n", "confidences", "=", "[", "a", "[", "\"answer_confidence\"", "]", "for", "a", "in", "annotation", "[", "\"answers\"", "]", "]", "\n", "confidences_out", "=", "\"|\"", ".", "join", "(", "str", "(", "a", ")", "for", "a", "in", "confidences", ")", "\n", "\n", "writer", ".", "write", "(", "\n", "str", "(", "question_id", ")", "\n", "+", "\"\\t\"", "\n", "+", "question_type", "\n", "+", "\"\\t\"", "\n", "+", "answer_type", "\n", "+", "\"\\t\"", "\n", "+", "str", "(", "multiple_choice_answer", ")", "\n", "+", "\"\\t\"", "\n", "+", "answers_out", "\n", "+", "\"\\t\"", "\n", "+", "confidences_out", "\n", "+", "\"\\n\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.__init__": [[31, 34], ["pythia.utils.timer.Timer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "profiler", "=", "Timer", "(", ")", "\n", "#self.importance_scores = defaultdict(dict)", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load": [[36, 54], ["base_trainer.BaseTrainer._init_process_group", "base_trainer.BaseTrainer.config.training_parameters.get", "pythia.common.task_loader.TaskLoader", "pythia.utils.logger.Logger", "pythia.common.registry.registry.register", "pythia.common.registry.registry.get", "base_trainer.BaseTrainer.configuration.pretty_print", "base_trainer.BaseTrainer.config_based_setup", "base_trainer.BaseTrainer.load_task", "base_trainer.BaseTrainer.load_model", "base_trainer.BaseTrainer.load_optimizer", "base_trainer.BaseTrainer.load_extras"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._init_process_group", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.pretty_print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.config_based_setup", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.load_task", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load_optimizer", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load_extras"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "self", ".", "_init_process_group", "(", ")", "\n", "\n", "self", ".", "run_type", "=", "self", ".", "config", ".", "training_parameters", ".", "get", "(", "\"run_type\"", ",", "\"train\"", ")", "\n", "self", ".", "task_loader", "=", "TaskLoader", "(", "self", ".", "config", ")", "\n", "\n", "self", ".", "writer", "=", "Logger", "(", "self", ".", "config", ")", "\n", "registry", ".", "register", "(", "\"writer\"", ",", "self", ".", "writer", ")", "\n", "\n", "self", ".", "configuration", "=", "registry", ".", "get", "(", "\"configuration\"", ")", "\n", "self", ".", "configuration", ".", "pretty_print", "(", ")", "\n", "\n", "self", ".", "config_based_setup", "(", ")", "\n", "\n", "self", ".", "load_task", "(", ")", "\n", "self", ".", "load_model", "(", ")", "\n", "self", ".", "load_optimizer", "(", ")", "\n", "self", ".", "load_extras", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._init_process_group": [[55, 76], ["pythia.common.registry.registry.register", "torch.distributed.init_process_group", "pythia.utils.distributed_utils.synchronize", "torch.device", "torch.distributed.is_nccl_available", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.synchronize"], ["", "def", "_init_process_group", "(", "self", ")", ":", "\n", "        ", "training_parameters", "=", "self", ".", "config", ".", "training_parameters", "\n", "self", ".", "local_rank", "=", "training_parameters", ".", "local_rank", "\n", "self", ".", "device", "=", "training_parameters", ".", "device", "\n", "\n", "if", "self", ".", "local_rank", "is", "not", "None", "and", "training_parameters", ".", "distributed", ":", "\n", "            ", "if", "not", "torch", ".", "distributed", ".", "is_nccl_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "\"Unable to initialize process group: NCCL is not available\"", "\n", ")", "\n", "", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "\"nccl\"", ")", "\n", "synchronize", "(", ")", "\n", "\n", "", "if", "(", "\n", "\"cuda\"", "in", "self", ".", "device", "\n", "and", "training_parameters", ".", "distributed", "\n", "and", "self", ".", "local_rank", "is", "not", "None", "\n", ")", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "self", ".", "local_rank", ")", "\n", "\n", "", "registry", ".", "register", "(", "\"current_device\"", ",", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load_task": [[77, 94], ["base_trainer.BaseTrainer.writer.write", "base_trainer.BaseTrainer.task_loader.load_task", "base_trainer.BaseTrainer.task_loader.make_dataloaders", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.load_task", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.make_dataloaders"], ["", "def", "load_task", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", ".", "write", "(", "\"Loading tasks and data\"", ",", "\"info\"", ")", "\n", "self", ".", "task_loader", ".", "load_task", "(", ")", "\n", "\n", "self", ".", "task_loader", ".", "make_dataloaders", "(", ")", "\n", "\n", "self", ".", "train_loader", "=", "self", ".", "task_loader", ".", "train_loader", "\n", "self", ".", "val_loader", "=", "self", ".", "task_loader", ".", "val_loader", "\n", "self", ".", "test_loader", "=", "self", ".", "task_loader", ".", "test_loader", "\n", "self", ".", "train_task", "=", "self", ".", "task_loader", ".", "train_task", "\n", "self", ".", "val_task", "=", "self", ".", "task_loader", ".", "val_task", "\n", "\n", "# Total iterations for snapshot", "\n", "self", ".", "snapshot_iterations", "=", "len", "(", "self", ".", "val_task", ")", "\n", "self", ".", "snapshot_iterations", "//=", "self", ".", "config", ".", "training_parameters", ".", "batch_size", "\n", "\n", "self", ".", "test_task", "=", "self", ".", "task_loader", ".", "test_task", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load_model": [[95, 141], ["isinstance", "base_trainer.BaseTrainer.task_loader.update_registry_for_model", "pythia.utils.build_utils.build_model", "base_trainer.BaseTrainer.task_loader.clean_config", "pythia.common.registry.registry.register", "pythia.common.registry.registry.register", "base_trainer.BaseTrainer.model.to", "base_trainer.BaseTrainer.writer.write", "str", "base_trainer.BaseTrainer.writer.write", "torch.nn.DataParallel", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.get_device_name", "str", "torch.cuda.device_count", "str"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.update_registry_for_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.helper.build_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.clean_config", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.to", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "def", "load_model", "(", "self", ")", ":", "\n", "        ", "attributes", "=", "self", ".", "config", ".", "model_attributes", "[", "self", ".", "config", ".", "model", "]", "\n", "# Easy way to point to config for other model", "\n", "if", "isinstance", "(", "attributes", ",", "str", ")", ":", "\n", "            ", "attributes", "=", "self", ".", "config", ".", "model_attributes", "[", "attributes", "]", "\n", "\n", "", "attributes", "[", "\"model\"", "]", "=", "self", ".", "config", ".", "model", "\n", "\n", "self", ".", "task_loader", ".", "update_registry_for_model", "(", "attributes", ")", "\n", "self", ".", "model", "=", "build_model", "(", "attributes", ")", "\n", "self", ".", "task_loader", ".", "clean_config", "(", "attributes", ")", "\n", "training_parameters", "=", "self", ".", "config", ".", "training_parameters", "\n", "\n", "data_parallel", "=", "training_parameters", ".", "data_parallel", "\n", "distributed", "=", "training_parameters", ".", "distributed", "\n", "\n", "registry", ".", "register", "(", "\"data_parallel\"", ",", "data_parallel", ")", "\n", "registry", ".", "register", "(", "\"distributed\"", ",", "distributed", ")", "\n", "\n", "if", "\"cuda\"", "in", "str", "(", "self", ".", "config", ".", "training_parameters", ".", "device", ")", ":", "\n", "            ", "rank", "=", "self", ".", "local_rank", "if", "self", ".", "local_rank", "is", "not", "None", "else", "0", "\n", "device_info", "=", "\"CUDA Device {} is: {}\"", ".", "format", "(", "\n", "rank", ",", "torch", ".", "cuda", ".", "get_device_name", "(", "self", ".", "local_rank", ")", "\n", ")", "\n", "\n", "self", ".", "writer", ".", "write", "(", "device_info", ",", "log_all", "=", "True", ")", "\n", "\n", "", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "writer", ".", "write", "(", "\"Torch version is: \"", "+", "torch", ".", "__version__", ")", "\n", "\n", "if", "(", "\n", "\"cuda\"", "in", "str", "(", "self", ".", "device", ")", "\n", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", "\n", "and", "data_parallel", "is", "True", "\n", ")", ":", "\n", "            ", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ")", "\n", "\n", "", "if", "(", "\n", "\"cuda\"", "in", "str", "(", "self", ".", "device", ")", "\n", "and", "self", ".", "local_rank", "is", "not", "None", "\n", "and", "distributed", "is", "True", "\n", ")", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "self", ".", "local_rank", ")", "\n", "self", ".", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "\n", "self", ".", "model", ",", "device_ids", "=", "[", "self", ".", "local_rank", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load_optimizer": [[143, 145], ["pythia.utils.build_utils.build_optimizer"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.build_utils.build_optimizer"], ["", "", "def", "load_optimizer", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "build_optimizer", "(", "self", ".", "model", ",", "self", ".", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load_extras": [[146, 187], ["pythia.utils.checkpoint.Checkpoint", "pythia.common.meter.Meter", "pythia.utils.early_stopping.EarlyStopping", "base_trainer.BaseTrainer.checkpoint.load_state_dict", "scheduler_class", "pythia.utils.general.lr_lambda_update"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.load_state_dict", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.lr_lambda_update"], ["", "def", "load_extras", "(", "self", ")", ":", "\n", "        ", "self", ".", "checkpoint", "=", "Checkpoint", "(", "self", ")", "\n", "self", ".", "meter", "=", "Meter", "(", ")", "\n", "\n", "self", ".", "training_parameters", "=", "self", ".", "config", ".", "training_parameters", "\n", "\n", "monitored_metric", "=", "self", ".", "training_parameters", ".", "monitored_metric", "\n", "metric_minimize", "=", "self", ".", "training_parameters", ".", "metric_minimize", "\n", "should_early_stop", "=", "self", ".", "training_parameters", ".", "should_early_stop", "\n", "patience", "=", "self", ".", "training_parameters", ".", "patience", "\n", "\n", "self", ".", "log_interval", "=", "self", ".", "training_parameters", ".", "log_interval", "\n", "self", ".", "snapshot_interval", "=", "self", ".", "training_parameters", ".", "snapshot_interval", "\n", "self", ".", "test_interval", "=", "self", ".", "training_parameters", ".", "test_interval", "\n", "self", ".", "max_iterations", "=", "self", ".", "training_parameters", ".", "max_iterations", "\n", "self", ".", "should_clip_gradients", "=", "self", ".", "training_parameters", ".", "clip_gradients", "\n", "self", ".", "max_epochs", "=", "self", ".", "training_parameters", ".", "max_epochs", "\n", "\n", "self", ".", "early_stopping", "=", "EarlyStopping", "(", "\n", "self", ".", "model", ",", "\n", "self", ".", "checkpoint", ",", "\n", "monitored_metric", ",", "\n", "patience", "=", "patience", ",", "\n", "minimize", "=", "metric_minimize", ",", "\n", "should_stop", "=", "should_early_stop", ",", "\n", ")", "\n", "self", ".", "current_epoch", "=", "0", "\n", "self", ".", "current_iteration", "=", "0", "\n", "\n", "self", ".", "checkpoint", ".", "load_state_dict", "(", ")", "\n", "\n", "self", ".", "not_debug", "=", "self", ".", "training_parameters", ".", "logger_level", "!=", "\"debug\"", "\n", "\n", "self", ".", "lr_scheduler", "=", "None", "\n", "\n", "# TODO: Allow custom scheduler", "\n", "if", "self", ".", "training_parameters", ".", "lr_scheduler", "is", "True", ":", "\n", "            ", "scheduler_class", "=", "optim", ".", "lr_scheduler", ".", "LambdaLR", "\n", "scheduler_func", "=", "lambda", "x", ":", "lr_lambda_update", "(", "x", ",", "self", ".", "config", ")", "\n", "self", ".", "lr_scheduler", "=", "scheduler_class", "(", "\n", "self", ".", "optimizer", ",", "lr_lambda", "=", "scheduler_func", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.config_based_setup": [[189, 199], ["random.seed", "torch.manual_seed", "torch.cuda.manual_seed"], "methods", ["None"], ["", "", "def", "config_based_setup", "(", "self", ")", ":", "\n", "        ", "seed", "=", "self", ".", "config", ".", "training_parameters", ".", "seed", "\n", "if", "seed", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.train": [[200, 256], ["base_trainer.BaseTrainer.writer.write", "base_trainer.BaseTrainer.writer.write", "base_trainer.BaseTrainer.model.train", "pythia.utils.timer.Timer", "pythia.utils.timer.Timer", "base_trainer.BaseTrainer.profile", "torch.autograd.set_detect_anomaly", "base_trainer.BaseTrainer.writer.write", "base_trainer.BaseTrainer.finalize", "base_trainer.BaseTrainer.inference", "pythia.common.registry.registry.register", "base_trainer.BaseTrainer.task_loader.seed_sampler", "base_trainer.BaseTrainer.profile", "base_trainer.BaseTrainer.writer.write", "pythia.common.registry.registry.register", "base_trainer.BaseTrainer._run_scheduler", "base_trainer.BaseTrainer._forward_pass", "base_trainer.BaseTrainer._update_meter", "base_trainer.BaseTrainer._extract_loss", "base_trainer.BaseTrainer._backward", "base_trainer.BaseTrainer._logistics"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.profile", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.finalize", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.inference", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.seed_sampler", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.profile", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._run_scheduler", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._forward_pass", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._update_meter", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._extract_loss", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._backward", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._logistics"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", ".", "write", "(", "\"===== Model =====\"", ")", "\n", "self", ".", "writer", ".", "write", "(", "self", ".", "model", ")", "\n", "\n", "if", "\"train\"", "not", "in", "self", ".", "run_type", ":", "\n", "            ", "self", ".", "inference", "(", ")", "\n", "return", "\n", "\n", "", "should_break", "=", "False", "\n", "\n", "if", "self", ".", "max_epochs", "is", "None", ":", "\n", "            ", "self", ".", "max_epochs", "=", "math", ".", "inf", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_iterations", "=", "math", ".", "inf", "\n", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "train_timer", "=", "Timer", "(", ")", "\n", "self", ".", "snapshot_timer", "=", "Timer", "(", ")", "\n", "\n", "self", ".", "profile", "(", "\"Setup Time\"", ")", "\n", "\n", "torch", ".", "autograd", ".", "set_detect_anomaly", "(", "True", ")", "\n", "\n", "self", ".", "writer", ".", "write", "(", "\"Starting training...\"", ")", "\n", "while", "self", ".", "current_iteration", "<", "self", ".", "max_iterations", "and", "not", "should_break", ":", "\n", "            ", "self", ".", "current_epoch", "+=", "1", "\n", "registry", ".", "register", "(", "\"current_epoch\"", ",", "self", ".", "current_epoch", ")", "\n", "\n", "# Seed the sampler in case if it is distributed", "\n", "self", ".", "task_loader", ".", "seed_sampler", "(", "\"train\"", ",", "self", ".", "current_epoch", ")", "\n", "\n", "if", "self", ".", "current_epoch", ">", "self", ".", "max_epochs", ":", "\n", "                ", "break", "\n", "\n", "", "for", "batch", "in", "self", ".", "train_loader", ":", "\n", "                ", "self", ".", "profile", "(", "\"Batch load time\"", ")", "\n", "self", ".", "current_iteration", "+=", "1", "\n", "self", ".", "writer", ".", "write", "(", "self", ".", "current_iteration", ",", "\"debug\"", ")", "\n", "\n", "registry", ".", "register", "(", "\"current_iteration\"", ",", "self", ".", "current_iteration", ")", "\n", "\n", "if", "self", ".", "current_iteration", ">", "self", ".", "max_iterations", ":", "\n", "                    ", "break", "\n", "\n", "", "self", ".", "_run_scheduler", "(", ")", "\n", "report", "=", "self", ".", "_forward_pass", "(", "batch", ")", "\n", "#pdb.set_trace()", "\n", "self", ".", "_update_meter", "(", "report", ",", "self", ".", "meter", ")", "\n", "loss", "=", "self", ".", "_extract_loss", "(", "report", ")", "\n", "self", ".", "_backward", "(", "loss", ")", "\n", "should_break", "=", "self", ".", "_logistics", "(", "report", ")", "\n", "\n", "if", "should_break", ":", "\n", "                    ", "break", "\n", "\n", "", "", "", "self", ".", "finalize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._run_scheduler": [[257, 260], ["base_trainer.BaseTrainer.lr_scheduler.step"], "methods", ["None"], ["", "def", "_run_scheduler", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "step", "(", "self", ".", "current_iteration", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.compute_grad_cam": [[261, 274], ["torch.zeros_like", "[].to", "importance_vectors.append", "importance_vectors.append", "importance_vectors.append", "torch.cat", "range", "torch.autograd.grad"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.to"], ["", "", "def", "compute_grad_cam", "(", "self", ",", "report", ",", "model_output", ")", ":", "\n", "        ", "importance_vectors", "=", "[", "]", "\n", "scores", "=", "model_output", "[", "'scores'", "]", "\n", "classes", "=", "report", "[", "'gt_answer_index'", "]", "\n", "classes_one_hot", "=", "torch", ".", "zeros_like", "(", "scores", ")", "\n", "classes_one_hot", "[", "range", "(", "classes_one_hot", ".", "shape", "[", "0", "]", ")", ",", "classes", "]", "=", "1", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "scores", ",", "inputs", "=", "self", ".", "model", ".", "joint_embedding", ",", "grad_outputs", "=", "classes_one_hot", ",", "create_graph", "=", "True", ")", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "importance_vectors_cam", "=", "grads", "*", "self", ".", "model", ".", "joint_embedding", "\n", "importance_vectors", ".", "append", "(", "self", ".", "model", ".", "question_embedding", ")", "\n", "importance_vectors", ".", "append", "(", "importance_vectors_cam", ")", "\n", "importance_vectors", ".", "append", "(", "torch", ".", "cat", "(", "(", "importance_vectors_cam", ",", "self", ".", "model", ".", "question_embedding", ")", ",", "1", ")", ")", "\n", "\n", "return", "importance_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.store_importance_vectors": [[275, 283], ["open", "json.load", "collections.defaultdict", "range", "file.seek", "json.dump", "len", "data_df[].append", "dict", "str", "[].item", "importance_vectors[].tolist", "str", "[].item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["", "def", "store_importance_vectors", "(", "self", ",", "report", ",", "importance_vectors", ")", ":", "\n", "        ", "with", "open", "(", "\"importance_scores_other_questions_2.json\"", ",", "\"r+\"", ")", "as", "file", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "file", ")", "\n", "data_df", "=", "defaultdict", "(", "list", ",", "data", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "report", "[", "'image_id'", "]", ")", ")", ":", "\n", "                ", "data_df", "[", "str", "(", "report", "[", "'image_id'", "]", "[", "idx", "]", ".", "item", "(", ")", ")", "]", ".", "append", "(", "{", "str", "(", "report", "[", "'question_id'", "]", "[", "idx", "]", ".", "item", "(", ")", ")", ":", "[", "report", "[", "'question_text'", "]", "[", "idx", "]", ",", "importance_vectors", "[", "idx", "]", ".", "tolist", "(", ")", "]", "}", ")", "\n", "", "file", ".", "seek", "(", "0", ")", "\n", "json", ".", "dump", "(", "dict", "(", "data_df", ")", ",", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.store_importance_vectors_csv": [[284, 293], ["report[].argmax", "open", "pythia.common.registry.registry.get", "range", "len", "pythia.common.registry.registry.get.idx2word", "csv.writer", "csv.writer.writerow", "str", "[].item", "[].tolist", "[].tolist", "[].tolist", "[].item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.idx2word"], ["", "", "def", "store_importance_vectors_csv", "(", "self", ",", "report", ",", "importance_vectors", ")", ":", "\n", "        ", "predicted_answer_ids", "=", "report", "[", "'scores'", "]", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "with", "open", "(", "\"/srv/share/sameer/pythia_results/clean_val_reas.csv\"", ",", "\"a+\"", ",", "newline", "=", "''", ")", "as", "file", ":", "\n", "            ", "answer_processor", "=", "registry", ".", "get", "(", "\"vqa_introspect_answer_processor\"", ")", "\n", "for", "idx", "in", "range", "(", "len", "(", "report", "[", "'image_id'", "]", ")", ")", ":", "\n", "                ", "predicted_answer", "=", "answer_processor", ".", "idx2word", "(", "predicted_answer_ids", "[", "idx", "]", ")", "\n", "row_to_append", "=", "[", "str", "(", "report", "[", "'image_id'", "]", "[", "idx", "]", ".", "item", "(", ")", ")", ",", "report", "[", "'image_url'", "]", "[", "idx", "]", ",", "report", "[", "'question_id'", "]", "[", "idx", "]", ".", "item", "(", ")", ",", "report", "[", "'reasoning_question'", "]", "[", "idx", "]", ",", "report", "[", "'reasoning_answer'", "]", "[", "idx", "]", ",", "report", "[", "'question_text'", "]", "[", "idx", "]", ",", "predicted_answer", ",", "report", "[", "'answers'", "]", "[", "idx", "]", "[", "0", "]", ",", "importance_vectors", "[", "0", "]", "[", "idx", "]", ".", "tolist", "(", ")", ",", "importance_vectors", "[", "1", "]", "[", "idx", "]", ".", "tolist", "(", ")", ",", "importance_vectors", "[", "2", "]", "[", "idx", "]", ".", "tolist", "(", ")", "]", "\n", "csv_writer", "=", "writer", "(", "file", ")", "\n", "csv_writer", ".", "writerow", "(", "row_to_append", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._forward_pass": [[294, 303], ["base_trainer.BaseTrainer.task_loader.prepare_batch", "base_trainer.BaseTrainer.profile", "base_trainer.BaseTrainer.model", "pythia.common.report.Report", "base_trainer.BaseTrainer.profile"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.prepare_batch", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.profile", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.profile"], ["", "", "", "def", "_forward_pass", "(", "self", ",", "batch", ")", ":", "\n", "\n", "        ", "prepared_batch", "=", "self", ".", "task_loader", ".", "prepare_batch", "(", "batch", ")", "\n", "self", ".", "profile", "(", "\"Batch prepare time\"", ")", "\n", "model_output", "=", "self", ".", "model", "(", "prepared_batch", ")", "\n", "report", "=", "Report", "(", "prepared_batch", ",", "model_output", ")", "\n", "self", ".", "profile", "(", "\"Forward time\"", ")", "\n", "\n", "return", "report", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._backward": [[304, 313], ["base_trainer.BaseTrainer.optimizer.zero_grad", "loss.backward", "base_trainer.BaseTrainer.optimizer.step", "base_trainer.BaseTrainer.profile", "pythia.utils.general.clip_gradients"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.profile", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.train_model.Engineer.clip_gradients"], ["", "def", "_backward", "(", "self", ",", "loss", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "if", "self", ".", "should_clip_gradients", ":", "\n", "            ", "clip_gradients", "(", "self", ".", "model", ",", "self", ".", "current_iteration", ",", "self", ".", "writer", ",", "self", ".", "config", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "profile", "(", "\"Backward time\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._extract_loss": [[314, 318], ["sum", "sum.mean", "loss_dict.values"], "methods", ["None"], ["", "def", "_extract_loss", "(", "self", ",", "report", ")", ":", "\n", "        ", "loss_dict", "=", "report", ".", "losses", "\n", "loss", "=", "sum", "(", "[", "loss", ".", "mean", "(", ")", "for", "loss", "in", "loss_dict", ".", "values", "(", ")", "]", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.finalize": [[319, 325], ["base_trainer.BaseTrainer.writer.write", "base_trainer.BaseTrainer._try_full_validation", "base_trainer.BaseTrainer.checkpoint.restore", "base_trainer.BaseTrainer.checkpoint.finalize", "base_trainer.BaseTrainer.inference"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._try_full_validation", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.restore", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.finalize", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.inference"], ["", "def", "finalize", "(", "self", ")", ":", "\n", "        ", "self", ".", "writer", ".", "write", "(", "\"Stepping into final validation check\"", ")", "\n", "self", ".", "_try_full_validation", "(", "force", "=", "True", ")", "\n", "self", ".", "checkpoint", ".", "restore", "(", ")", "\n", "self", ".", "checkpoint", ".", "finalize", "(", ")", "\n", "self", ".", "inference", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._update_meter": [[326, 350], ["pythia.utils.distributed_utils.reduce_dict", "pythia.utils.distributed_utils.reduce_dict", "torch.no_grad", "sum", "hasattr", "pythia.common.registry.registry.register", "meter_update_dict.update", "meter_update_dict.update", "meter.update", "reduced_loss.item.item.item", "loss.mean", "pythia.utils.distributed_utils.reduce_dict.values"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.reduce_dict", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.reduce_dict", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update"], ["", "def", "_update_meter", "(", "self", ",", "report", ",", "meter", "=", "None", ",", "eval_mode", "=", "False", ")", ":", "\n", "        ", "if", "meter", "is", "None", ":", "\n", "            ", "meter", "=", "self", ".", "meter", "\n", "#pdb.set_trace()", "\n", "\n", "", "loss_dict", "=", "report", ".", "losses", "\n", "metrics_dict", "=", "report", ".", "metrics", "\n", "\n", "reduced_loss_dict", "=", "reduce_dict", "(", "loss_dict", ")", "\n", "reduced_metrics_dict", "=", "reduce_dict", "(", "metrics_dict", ")", "\n", "\n", "loss_key", "=", "report", ".", "dataset_type", "+", "\"/total_loss\"", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "reduced_loss", "=", "sum", "(", "[", "loss", ".", "mean", "(", ")", "for", "loss", "in", "reduced_loss_dict", ".", "values", "(", ")", "]", ")", "\n", "if", "hasattr", "(", "reduced_loss", ",", "\"item\"", ")", ":", "\n", "                ", "reduced_loss", "=", "reduced_loss", ".", "item", "(", ")", "\n", "\n", "", "registry", ".", "register", "(", "loss_key", ",", "reduced_loss", ")", "\n", "\n", "meter_update_dict", "=", "{", "loss_key", ":", "reduced_loss", "}", "\n", "meter_update_dict", ".", "update", "(", "reduced_loss_dict", ")", "\n", "meter_update_dict", ".", "update", "(", "reduced_metrics_dict", ")", "\n", "meter", ".", "update", "(", "meter_update_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._logistics": [[351, 388], ["base_trainer.BaseTrainer._summarize_report", "base_trainer.BaseTrainer._try_full_validation", "extra.update", "base_trainer.BaseTrainer.train_timer.reset", "base_trainer.BaseTrainer.evaluate", "base_trainer.BaseTrainer.meter.update_from_meter", "str", "torch.cuda.max_memory_allocated", "base_trainer.BaseTrainer.train_timer.get_time_since_start", "base_trainer.BaseTrainer._calculate_time_left"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._summarize_report", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._try_full_validation", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.SmoothedValue.reset", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.COCOEvalCap.evaluate", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update_from_meter", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.get_time_since_start", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._calculate_time_left"], ["", "", "def", "_logistics", "(", "self", ",", "report", ")", ":", "\n", "        ", "should_print", "=", "self", ".", "current_iteration", "%", "self", ".", "log_interval", "==", "0", "\n", "should_break", "=", "False", "\n", "extra", "=", "{", "}", "\n", "\n", "if", "should_print", "is", "True", ":", "\n", "            ", "if", "\"cuda\"", "in", "str", "(", "self", ".", "device", ")", ":", "\n", "                ", "extra", "[", "\"max mem\"", "]", "=", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "1024", "\n", "extra", "[", "\"max mem\"", "]", "//=", "1024", "\n", "\n", "", "extra", ".", "update", "(", "\n", "{", "\n", "\"lr\"", ":", "\"{:.5f}\"", ".", "format", "(", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", ".", "rstrip", "(", "\n", "\"0\"", "\n", ")", ",", "\n", "\"time\"", ":", "self", ".", "train_timer", ".", "get_time_since_start", "(", ")", ",", "\n", "\"eta\"", ":", "self", ".", "_calculate_time_left", "(", ")", ",", "\n", "}", "\n", ")", "\n", "\n", "self", ".", "train_timer", ".", "reset", "(", ")", "\n", "\n", "_", ",", "meter", "=", "self", ".", "evaluate", "(", "self", ".", "val_loader", ",", "single_batch", "=", "True", ")", "\n", "self", ".", "meter", ".", "update_from_meter", "(", "meter", ")", "\n", "\n", "# Don't print train metrics if it is not log interval", "\n", "# so as to escape clutter", "\n", "", "self", ".", "_summarize_report", "(", "\n", "self", ".", "meter", ",", "\n", "should_print", "=", "should_print", ",", "\n", "extra", "=", "extra", ",", "\n", "prefix", "=", "report", ".", "dataset_name", ",", "\n", ")", "\n", "\n", "should_break", "=", "self", ".", "_try_full_validation", "(", ")", "\n", "\n", "return", "should_break", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._try_full_validation": [[389, 428], ["base_trainer.BaseTrainer.writer.write", "base_trainer.BaseTrainer.evaluate", "base_trainer.BaseTrainer.early_stopping", "bool", "extra.update", "base_trainer.BaseTrainer._summarize_report", "base_trainer.BaseTrainer.snapshot_timer.reset", "gc.collect", "base_trainer.BaseTrainer.writer.write", "base_trainer.BaseTrainer.evaluate", "base_trainer.BaseTrainer._summarize_report", "base_trainer.BaseTrainer.snapshot_timer.get_time_since_start", "pythia.utils.distributed_utils.broadcast_scalar", "base_trainer.BaseTrainer.early_stopping.get_info", "str", "torch.cuda.empty_cache", "base_trainer.BaseTrainer.writer.write", "base_trainer.BaseTrainer.snapshot_timer.get_time_since_start"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.COCOEvalCap.evaluate", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._summarize_report", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.SmoothedValue.reset", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.COCOEvalCap.evaluate", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._summarize_report", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.get_time_since_start", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.broadcast_scalar", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.early_stopping.EarlyStopping.get_info", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.get_time_since_start"], ["", "def", "_try_full_validation", "(", "self", ",", "force", "=", "False", ")", ":", "\n", "        ", "should_break", "=", "False", "\n", "\n", "\n", "if", "self", ".", "current_iteration", "%", "self", ".", "snapshot_interval", "==", "0", "or", "force", ":", "\n", "            ", "self", ".", "writer", ".", "write", "(", "\"Evaluation time. Running on full validation set...\"", ")", "\n", "# Validation and Early stopping", "\n", "# Create a new meter for this case", "\n", "report", ",", "meter", "=", "self", ".", "evaluate", "(", "self", ".", "val_loader", ")", "\n", "\n", "extra", "=", "{", "\"validation time\"", ":", "self", ".", "snapshot_timer", ".", "get_time_since_start", "(", ")", "}", "\n", "\n", "stop", "=", "self", ".", "early_stopping", "(", "self", ".", "current_iteration", ",", "meter", ")", "\n", "stop", "=", "bool", "(", "broadcast_scalar", "(", "stop", ",", "src", "=", "0", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "\n", "extra", ".", "update", "(", "self", ".", "early_stopping", ".", "get_info", "(", ")", ")", "\n", "\n", "prefix", "=", "\"{}: full val\"", ".", "format", "(", "report", ".", "dataset_name", ")", "\n", "\n", "self", ".", "_summarize_report", "(", "meter", ",", "prefix", "=", "prefix", ",", "extra", "=", "extra", ")", "\n", "self", ".", "snapshot_timer", ".", "reset", "(", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "if", "\"cuda\"", "in", "str", "(", "self", ".", "device", ")", ":", "\n", "                ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "if", "stop", "is", "True", ":", "\n", "                ", "self", ".", "writer", ".", "write", "(", "\"Early stopping activated\"", ")", "\n", "should_break", "=", "True", "\n", "\n", "", "", "if", "self", ".", "current_iteration", "==", "22001", ":", "\n", "            ", "self", ".", "writer", ".", "write", "(", "\"Testing time. Running on full test set...\"", ")", "\n", "# test evaluation:", "\n", "report_test", ",", "meter_test", "=", "self", ".", "evaluate", "(", "self", ".", "test_loader", ")", "\n", "extra", "=", "{", "\"test time\"", ":", "self", ".", "snapshot_timer", ".", "get_time_since_start", "(", ")", "}", "\n", "prefix", "=", "\"{}: full test\"", ".", "format", "(", "report_test", ".", "dataset_name", ")", "\n", "self", ".", "_summarize_report", "(", "meter_test", ",", "prefix", "=", "prefix", ",", "extra", "=", "extra", ")", "\n", "\n", "", "return", "should_break", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.evaluate": [[429, 441], ["pythia.common.meter.Meter", "tqdm.tqdm.tqdm", "base_trainer.BaseTrainer.model.train", "base_trainer.BaseTrainer._forward_pass", "base_trainer.BaseTrainer._update_meter"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._forward_pass", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._update_meter"], ["", "def", "evaluate", "(", "self", ",", "loader", ",", "use_tqdm", "=", "False", ",", "single_batch", "=", "False", ")", ":", "\n", "        ", "meter", "=", "Meter", "(", ")", "\n", "\n", "for", "batch", "in", "tqdm", "(", "loader", ",", "disable", "=", "not", "use_tqdm", ")", ":", "\n", "            ", "report", "=", "self", ".", "_forward_pass", "(", "batch", ")", "\n", "self", ".", "_update_meter", "(", "report", ",", "meter", ",", "eval_mode", "=", "True", ")", "\n", "\n", "if", "single_batch", "is", "True", ":", "\n", "                ", "break", "\n", "", "", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "return", "report", ",", "meter", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._summarize_report": [[442, 462], ["meter.get_scalar_dict", "base_trainer.BaseTrainer.writer.add_scalars", "len", "base_trainer.BaseTrainer.writer.write", "pythia.utils.distributed_utils.is_main_process", "pythia.common.registry.registry.get", "str", "meter.delimiter.join", "extra.items"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.get_scalar_dict", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.add_scalars", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.is_main_process", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "def", "_summarize_report", "(", "self", ",", "meter", ",", "prefix", "=", "\"\"", ",", "should_print", "=", "True", ",", "extra", "=", "{", "}", ")", ":", "\n", "        ", "if", "not", "is_main_process", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "scalar_dict", "=", "meter", ".", "get_scalar_dict", "(", ")", "\n", "self", ".", "writer", ".", "add_scalars", "(", "scalar_dict", ",", "registry", ".", "get", "(", "\"current_iteration\"", ")", ")", "\n", "\n", "if", "not", "should_print", ":", "\n", "            ", "return", "\n", "\n", "", "print_str", "=", "[", "]", "\n", "\n", "if", "len", "(", "prefix", ")", ":", "\n", "            ", "print_str", "+=", "[", "prefix", "+", "\":\"", "]", "\n", "\n", "", "print_str", "+=", "[", "\"{}/{}\"", ".", "format", "(", "self", ".", "current_iteration", ",", "self", ".", "max_iterations", ")", "]", "\n", "print_str", "+=", "[", "str", "(", "meter", ")", "]", "\n", "print_str", "+=", "[", "\"{}: {}\"", ".", "format", "(", "key", ",", "value", ")", "for", "key", ",", "value", "in", "extra", ".", "items", "(", ")", "]", "\n", "\n", "self", ".", "writer", ".", "write", "(", "meter", ".", "delimiter", ".", "join", "(", "print_str", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.inference": [[463, 469], ["base_trainer.BaseTrainer._inference_run", "base_trainer.BaseTrainer._inference_run"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._inference_run", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._inference_run"], ["", "def", "inference", "(", "self", ")", ":", "\n", "        ", "if", "\"val\"", "in", "self", ".", "run_type", ":", "\n", "            ", "self", ".", "_inference_run", "(", "\"val\"", ")", "\n", "\n", "", "if", "\"inference\"", "in", "self", ".", "run_type", "or", "\"predict\"", "in", "self", ".", "run_type", ":", "\n", "            ", "self", ".", "_inference_run", "(", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._inference_run": [[470, 482], ["base_trainer.BaseTrainer.writer.write", "base_trainer.BaseTrainer.evaluate", "base_trainer.BaseTrainer._summarize_report", "base_trainer.BaseTrainer.predict_for_evalai", "getattr"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.COCOEvalCap.evaluate", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._summarize_report", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.predict_for_evalai"], ["", "", "def", "_inference_run", "(", "self", ",", "dataset_type", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "training_parameters", ".", "evalai_inference", "is", "True", ":", "\n", "            ", "self", ".", "predict_for_evalai", "(", "dataset_type", ")", "\n", "return", "\n", "\n", "", "self", ".", "writer", ".", "write", "(", "\"Starting inference on {} set\"", ".", "format", "(", "dataset_type", ")", ")", "\n", "\n", "report", ",", "meter", "=", "self", ".", "evaluate", "(", "\n", "getattr", "(", "self", ",", "\"{}_loader\"", ".", "format", "(", "dataset_type", ")", ")", ",", "use_tqdm", "=", "True", "\n", ")", "\n", "prefix", "=", "\"{}: full {}\"", ".", "format", "(", "report", ".", "dataset_name", ",", "dataset_type", ")", "\n", "self", ".", "_summarize_report", "(", "meter", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer._calculate_time_left": [[483, 494], ["base_trainer.BaseTrainer.train_timer.get_time_hhmmss", "time.time"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.get_time_hhmmss"], ["", "def", "_calculate_time_left", "(", "self", ")", ":", "\n", "        ", "time_taken_for_log", "=", "time", ".", "time", "(", ")", "*", "1000", "-", "self", ".", "train_timer", ".", "start", "\n", "iterations_left", "=", "self", ".", "max_iterations", "-", "self", ".", "current_iteration", "\n", "num_logs_left", "=", "iterations_left", "/", "self", ".", "log_interval", "\n", "time_left", "=", "num_logs_left", "*", "time_taken_for_log", "\n", "\n", "snapshot_iteration", "=", "self", ".", "snapshot_iterations", "/", "self", ".", "log_interval", "\n", "snapshot_iteration", "*=", "iterations_left", "/", "self", ".", "snapshot_interval", "\n", "time_left", "+=", "snapshot_iteration", "*", "time_taken_for_log", "\n", "\n", "return", "self", ".", "train_timer", ".", "get_time_hhmmss", "(", "gap", "=", "time_left", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.profile": [[495, 500], ["base_trainer.BaseTrainer.writer.write", "base_trainer.BaseTrainer.profiler.reset", "base_trainer.BaseTrainer.profiler.get_time_since_start"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.SmoothedValue.reset", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.get_time_since_start"], ["", "def", "profile", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "not_debug", ":", "\n", "            ", "return", "\n", "", "self", ".", "writer", ".", "write", "(", "text", "+", "\": \"", "+", "self", ".", "profiler", ".", "get_time_since_start", "(", ")", ",", "\"debug\"", ")", "\n", "self", ".", "profiler", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.predict_for_evalai": [[501, 519], ["base_trainer.BaseTrainer.task_loader.get_test_reporter", "torch.no_grad", "base_trainer.BaseTrainer.model.eval", "base_trainer.BaseTrainer.writer.write", "base_trainer.BaseTrainer.next_dataset", "base_trainer.BaseTrainer.writer.write", "base_trainer.BaseTrainer.model.train", "base_trainer.BaseTrainer.get_dataloader", "tqdm.tqdm.tqdm", "base_trainer.BaseTrainer.prepare_batch", "base_trainer.BaseTrainer.model", "pythia.common.report.Report", "base_trainer.BaseTrainer.add_to_report"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.get_test_reporter", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter.next_dataset", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.train", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter.get_dataloader", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.prepare_batch", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter.add_to_report"], ["", "def", "predict_for_evalai", "(", "self", ",", "dataset_type", ")", ":", "\n", "        ", "reporter", "=", "self", ".", "task_loader", ".", "get_test_reporter", "(", "dataset_type", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "message", "=", "\"Starting {} inference for evalai\"", ".", "format", "(", "dataset_type", ")", "\n", "self", ".", "writer", ".", "write", "(", "message", ")", "\n", "\n", "while", "reporter", ".", "next_dataset", "(", ")", ":", "\n", "                ", "dataloader", "=", "reporter", ".", "get_dataloader", "(", ")", "\n", "\n", "for", "batch", "in", "tqdm", "(", "dataloader", ")", ":", "\n", "                    ", "prepared_batch", "=", "reporter", ".", "prepare_batch", "(", "batch", ")", "\n", "model_output", "=", "self", ".", "model", "(", "prepared_batch", ")", "\n", "report", "=", "Report", "(", "prepared_batch", ",", "model_output", ")", "\n", "reporter", ".", "add_to_report", "(", "report", ")", "\n", "\n", "", "", "self", ".", "writer", ".", "write", "(", "\"Finished predicting\"", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa.vqa_task.VQATask.__init__": [[8, 10], ["pythia.tasks.BaseTask.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "VQATask", ",", "self", ")", ".", "__init__", "(", "\"vqa\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa.vqa_task.VQATask._get_available_datasets": [[11, 13], ["None"], "methods", ["None"], ["", "def", "_get_available_datasets", "(", "self", ")", ":", "\n", "        ", "return", "[", "\"vqa2\"", ",", "\"vizwiz\"", ",", "\"vqa_introspect\"", ",", "\"textvqa\"", ",", "\"vqa2_ocr\"", ",", "\"clevr\"", ",", "\"visual_genome\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa.vqa_task.VQATask._preprocess_item": [[14, 16], ["None"], "methods", ["None"], ["", "def", "_preprocess_item", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "item", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.ocr_dataset.VQA2OCRDataset.__init__": [[7, 12], ["pythia.tasks.vqa.vizwiz.VizWizDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "imdb_file", ",", "image_feat_directories", ",", "verbose", "=", "False", ",", "**", "data_params", ")", ":", "\n", "        ", "super", "(", "VQA2OCRDataset", ",", "self", ")", ".", "__init__", "(", "\n", "imdb_file", ",", "image_feat_directories", ",", "verbose", ",", "**", "data_params", "\n", ")", "\n", "self", ".", "name", "=", "\"vqa2_ocr\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.ocr_dataset.VQA2OCRDataset.format_for_evalai": [[13, 28], ["answers.argmax.argmax.argmax", "enumerate", "predictions.append", "pythia.utils.text_utils.word_tokenize", "ocr_dataset.VQA2OCRDataset.answer_dict.idx2word", "question_id.item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.EvalAIAnswerProcessor.word_tokenize", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.idx2word"], ["", "def", "format_for_evalai", "(", "self", ",", "batch", ",", "answers", ")", ":", "\n", "        ", "answers", "=", "answers", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "predictions", "=", "[", "]", "\n", "for", "idx", ",", "question_id", "in", "enumerate", "(", "batch", "[", "\"question_id\"", "]", ")", ":", "\n", "            ", "answer_id", "=", "answers", "[", "idx", "]", "\n", "\n", "if", "answer_id", ">=", "self", ".", "answer_space_size", ":", "\n", "                ", "answer_id", "-=", "self", ".", "answer_space_size", "\n", "answer", "=", "word_tokenize", "(", "batch", "[", "\"ocr_tokens\"", "]", "[", "answer_id", "]", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "                ", "answer", "=", "self", ".", "answer_dict", ".", "idx2word", "(", "answer_id", ")", "\n", "", "predictions", ".", "append", "(", "{", "\"question_id\"", ":", "question_id", ".", "item", "(", ")", ",", "\"answer\"", ":", "answer", "}", ")", "\n", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.ocr_dataset.VQA2OCRDataset.__getitem__": [[29, 35], ["pythia.tasks.vqa.vizwiz.VizWizDataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample", "=", "super", "(", "VQA2OCRDataset", ",", "self", ")", ".", "__getitem__", "(", "idx", ")", "\n", "\n", "if", "sample", "[", "\"question_id\"", "]", "is", "None", ":", "\n", "            ", "sample", "[", "\"question_id\"", "]", "=", "-", "1", "\n", "", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.dataset.VQA2Dataset.__init__": [[17, 57], ["pythia.tasks.base_dataset.BaseDataset.__init__", "dataset.VQA2Dataset._get_absolute_path", "pythia.tasks.image_database.ImageDatabase", "hasattr", "ValueError", "dataset.VQA2Dataset.config.get", "dataset.VQA2Dataset.split", "dataset.VQA2Dataset._get_absolute_path", "pythia.tasks.features_dataset.FeaturesDataset"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset._get_absolute_path", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset._get_absolute_path"], ["    ", "def", "__init__", "(", "self", ",", "dataset_type", ",", "imdb_file_index", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"vqa2\"", ",", "dataset_type", ",", "config", ")", "\n", "imdb_files", "=", "self", ".", "config", ".", "imdb_files", "\n", "#pdb.set_trace()", "\n", "if", "dataset_type", "not", "in", "imdb_files", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Dataset type {} is not present in \"", "\n", "\"imdb_files of dataset config\"", ".", "format", "(", "dataset_type", ")", "\n", ")", "\n", "\n", "", "self", ".", "imdb_file", "=", "imdb_files", "[", "dataset_type", "]", "[", "imdb_file_index", "]", "\n", "self", ".", "imdb_file", "=", "self", ".", "_get_absolute_path", "(", "self", ".", "imdb_file", ")", "\n", "self", ".", "imdb", "=", "ImageDatabase", "(", "self", ".", "imdb_file", ")", "\n", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "image_depth_first", "=", "self", ".", "config", ".", "image_depth_first", "\n", "self", ".", "_should_fast_read", "=", "self", ".", "config", ".", "fast_read", "\n", "\n", "self", ".", "use_ocr", "=", "self", ".", "config", ".", "use_ocr", "\n", "self", ".", "use_ocr_info", "=", "self", ".", "config", ".", "use_ocr_info", "\n", "\n", "self", ".", "_use_features", "=", "False", "\n", "if", "hasattr", "(", "self", ".", "config", ",", "\"image_features\"", ")", ":", "\n", "            ", "self", ".", "_use_features", "=", "True", "\n", "self", ".", "features_max_len", "=", "self", ".", "config", ".", "features_max_len", "\n", "self", ".", "_return_info", "=", "self", ".", "config", ".", "get", "(", "\"return_info\"", ",", "True", ")", "\n", "\n", "all_image_feature_dirs", "=", "self", ".", "config", ".", "image_features", "[", "dataset_type", "]", "\n", "curr_image_features_dir", "=", "all_image_feature_dirs", "[", "imdb_file_index", "]", "\n", "curr_image_features_dir", "=", "curr_image_features_dir", ".", "split", "(", "\",\"", ")", "\n", "curr_image_features_dir", "=", "self", ".", "_get_absolute_path", "(", "curr_image_features_dir", ")", "\n", "\n", "self", ".", "features_db", "=", "FeaturesDataset", "(", "\n", "\"coco\"", ",", "\n", "directories", "=", "curr_image_features_dir", ",", "\n", "depth_first", "=", "self", ".", "image_depth_first", ",", "\n", "max_features", "=", "self", ".", "features_max_len", ",", "\n", "fast_read", "=", "self", ".", "_should_fast_read", ",", "\n", "imdb", "=", "self", ".", "imdb", ",", "\n", "return_info", "=", "self", ".", "_return_info", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.dataset.VQA2Dataset._get_absolute_path": [[59, 70], ["isinstance", "isinstance", "dataset.VQA2Dataset._get_absolute_path", "TypeError", "os.path.isabs", "pythia.utils.general.get_pythia_root", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset._get_absolute_path", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root"], ["", "", "def", "_get_absolute_path", "(", "self", ",", "paths", ")", ":", "\n", "        ", "if", "isinstance", "(", "paths", ",", "list", ")", ":", "\n", "            ", "return", "[", "self", ".", "_get_absolute_path", "(", "path", ")", "for", "path", "in", "paths", "]", "\n", "", "elif", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isabs", "(", "paths", ")", ":", "\n", "                ", "pythia_root", "=", "get_pythia_root", "(", ")", "\n", "paths", "=", "os", ".", "path", ".", "join", "(", "pythia_root", ",", "self", ".", "config", ".", "data_root_dir", ",", "paths", ")", "\n", "", "return", "paths", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Paths passed to dataset should either be \"", "\"string or list\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.dataset.VQA2Dataset.__len__": [[72, 74], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imdb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.dataset.VQA2Dataset.try_fast_read": [[75, 91], ["hasattr", "dataset.VQA2Dataset.writer.write", "tqdm.tqdm", "range", "dataset.VQA2Dataset.load_item", "len", "pythia.utils.distributed_utils.is_main_process"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.dataset.COCODataset.load_item", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.is_main_process"], ["", "def", "try_fast_read", "(", "self", ")", ":", "\n", "# Don't fast read in case of test set.", "\n", "        ", "if", "self", ".", "_dataset_type", "==", "\"test\"", ":", "\n", "            ", "return", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "\"_should_fast_read\"", ")", "and", "self", ".", "_should_fast_read", "is", "True", ":", "\n", "            ", "self", ".", "writer", ".", "write", "(", "\n", "\"Starting to fast read {} {} dataset\"", ".", "format", "(", "\n", "self", ".", "_name", ",", "self", ".", "_dataset_type", "\n", ")", "\n", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "for", "idx", "in", "tqdm", ".", "tqdm", "(", "\n", "range", "(", "len", "(", "self", ".", "imdb", ")", ")", ",", "miniters", "=", "100", ",", "disable", "=", "not", "is_main_process", "(", ")", "\n", ")", ":", "\n", "                ", "self", ".", "cache", "[", "idx", "]", "=", "self", ".", "load_item", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.dataset.VQA2Dataset.get_item": [[92, 97], ["dataset.VQA2Dataset.load_item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.dataset.COCODataset.load_item"], ["", "", "", "def", "get_item", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "_should_fast_read", "is", "True", "and", "self", ".", "_dataset_type", "!=", "\"test\"", ":", "\n", "            ", "return", "self", ".", "cache", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "load_item", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.dataset.VQA2Dataset.load_item": [[98, 158], ["pythia.common.sample.Sample", "dataset.VQA2Dataset.text_processor", "dataset.VQA2Dataset.text_processor", "dataset.VQA2Dataset.text_processor", "torch.tensor", "isinstance", "torch.tensor", "dataset.VQA2Dataset.add_ocr_details", "dataset.VQA2Dataset.add_answer_info", "torch.tensor", "len", "dataset.VQA2Dataset.update"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.add_ocr_details", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.add_answer_info", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update"], ["", "", "def", "load_item", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample_info", "=", "self", ".", "imdb", "[", "idx", "]", "\n", "current_sample", "=", "Sample", "(", ")", "\n", "\n", "if", "\"question_tokens\"", "in", "sample_info", ":", "\n", "            ", "text_processor_argument", "=", "{", "\"tokens\"", ":", "sample_info", "[", "\"question_tokens\"", "]", "}", "\n", "", "else", ":", "\n", "#text_processor_argument = {\"text\": sample_info[\"question\"]}", "\n", "            ", "text_processor_argument", "=", "{", "\"text\"", ":", "sample_info", "[", "\"main_question_str\"", "]", "}", "\n", "if", "\"sub_question_str\"", "in", "sample_info", ":", "\n", "                ", "text_processor_argument_sq", "=", "{", "\"text\"", ":", "sample_info", "[", "\"sub_question_str\"", "]", "}", "\n", "", "if", "\"other_question_str\"", "in", "sample_info", ":", "\n", "                ", "text_processor_argument_oq", "=", "{", "\"text\"", ":", "sample_info", "[", "\"other_question_str\"", "]", "}", "\n", "\n", "", "", "processed_question", "=", "self", ".", "text_processor", "(", "text_processor_argument", ")", "\n", "processed_question_sq", "=", "self", ".", "text_processor", "(", "text_processor_argument_sq", ")", "\n", "processed_question_oq", "=", "self", ".", "text_processor", "(", "text_processor_argument_oq", ")", "\n", "\n", "current_sample", ".", "text", "=", "processed_question", "[", "\"text\"", "]", "\n", "current_sample", ".", "text_sq", "=", "processed_question_sq", "[", "\"text\"", "]", "\n", "current_sample", ".", "text_oq", "=", "processed_question_oq", "[", "\"text\"", "]", "\n", "current_sample", ".", "question_text", "=", "sample_info", "[", "\"main_question_str\"", "]", "\n", "current_sample", ".", "reasoning_question", "=", "sample_info", "[", "\"main_question_str\"", "]", "\n", "current_sample", ".", "reasoning_answer", "=", "sample_info", "[", "\"main_answer_str\"", "]", "[", "0", "]", "\n", "#current_sample.image_url = sample_info[\"img_path\"]", "\n", "current_sample", ".", "image_url", "=", "sample_info", "[", "\"image_path\"", "]", "\n", "\n", "current_sample", ".", "sub_question", "=", "sample_info", "[", "\"sub_question_str\"", "]", "\n", "current_sample", ".", "other_question", "=", "sample_info", "[", "\"other_question_str\"", "]", "\n", "\n", "current_sample", ".", "question_id", "=", "torch", ".", "tensor", "(", "\n", "sample_info", "[", "\"question_id\"", "]", ",", "dtype", "=", "torch", ".", "int", "\n", ")", "\n", "\n", "if", "isinstance", "(", "sample_info", "[", "\"image_id\"", "]", ",", "int", ")", ":", "\n", "            ", "current_sample", ".", "image_id", "=", "torch", ".", "tensor", "(", "\n", "sample_info", "[", "\"image_id\"", "]", ",", "dtype", "=", "torch", ".", "int", "\n", ")", "\n", "", "else", ":", "\n", "            ", "current_sample", ".", "image_id", "=", "sample_info", "[", "\"image_id\"", "]", "\n", "\n", "", "current_sample", ".", "text_len", "=", "torch", ".", "tensor", "(", "\n", "#len(sample_info[\"question_tokens\"]), dtype=torch.int", "\n", "len", "(", "sample_info", "[", "\"main_question_tokens\"", "]", ")", ",", "dtype", "=", "torch", ".", "int", "\n", ")", "\n", "\n", "if", "self", ".", "_use_features", "is", "True", ":", "\n", "            ", "features", "=", "self", ".", "features_db", "[", "idx", "]", "\n", "current_sample", ".", "update", "(", "features", ")", "\n", "\n", "# Add details for OCR like OCR bbox, vectors, tokens here", "\n", "", "current_sample", "=", "self", ".", "add_ocr_details", "(", "sample_info", ",", "current_sample", ")", "\n", "# Depending on whether we are using soft copy this can add", "\n", "# dynamic answer space", "\n", "current_sample", "=", "self", ".", "add_answer_info", "(", "sample_info", ",", "current_sample", ")", "\n", "#print(\"current sample : {}\".format(current_sample))", "\n", "#pdb.set_trace()", "\n", "#print(\"Current sample : {}\".format(current_sample))", "\n", "\n", "return", "current_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.dataset.VQA2Dataset.add_ocr_details": [[159, 184], ["dataset.VQA2Dataset.context_processor", "pythia.common.sample.Sample", "torch.eye", "len", "dataset.VQA2Dataset.bbox_processor", "dataset.VQA2Dataset.ocr_token_processor"], "methods", ["None"], ["", "def", "add_ocr_details", "(", "self", ",", "sample_info", ",", "sample", ")", ":", "\n", "        ", "if", "self", ".", "use_ocr", ":", "\n", "# Preprocess OCR tokens", "\n", "            ", "ocr_tokens", "=", "[", "\n", "self", ".", "ocr_token_processor", "(", "{", "\"text\"", ":", "token", "}", ")", "[", "\"text\"", "]", "\n", "for", "token", "in", "sample_info", "[", "\"ocr_tokens\"", "]", "\n", "]", "\n", "# Get embeddings for tokens", "\n", "context", "=", "self", ".", "context_processor", "(", "{", "\"tokens\"", ":", "ocr_tokens", "}", ")", "\n", "sample", ".", "context", "=", "context", "[", "\"text\"", "]", "\n", "sample", ".", "context_tokens", "=", "context", "[", "\"tokens\"", "]", "\n", "sample", ".", "context_feature_0", "=", "context", "[", "\"text\"", "]", "\n", "sample", ".", "context_info_0", "=", "Sample", "(", ")", "\n", "sample", ".", "context_info_0", ".", "max_features", "=", "context", "[", "\"length\"", "]", "\n", "\n", "order_vectors", "=", "torch", ".", "eye", "(", "len", "(", "sample", ".", "context_tokens", ")", ")", "\n", "order_vectors", "[", "context", "[", "\"length\"", "]", ":", "]", "=", "0", "\n", "sample", ".", "order_vectors", "=", "order_vectors", "\n", "\n", "", "if", "self", ".", "use_ocr_info", "and", "\"ocr_info\"", "in", "sample_info", ":", "\n", "            ", "sample", ".", "ocr_bbox", "=", "self", ".", "bbox_processor", "(", "{", "\"info\"", ":", "sample_info", "[", "\"ocr_info\"", "]", "}", ")", "[", "\n", "\"bbox\"", "\n", "]", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.dataset.VQA2Dataset.add_answer_info": [[185, 221], ["dataset.VQA2Dataset.answer_processor", "dataset.VQA2Dataset.answer_processor", "dataset.VQA2Dataset.answer_processor"], "methods", ["None"], ["", "def", "add_answer_info", "(", "self", ",", "sample_info", ",", "sample", ")", ":", "\n", "        ", "if", "\"answers\"", "in", "sample_info", ":", "\n", "            ", "answers", "=", "sample_info", "[", "\"answers\"", "]", "\n", "answer_processor_arg", "=", "{", "\"answers\"", ":", "answers", "}", "\n", "\n", "if", "self", ".", "use_ocr", ":", "\n", "                ", "answer_processor_arg", "[", "\"tokens\"", "]", "=", "sample_info", "[", "\"ocr_tokens\"", "]", "\n", "", "processed_soft_copy_answers", "=", "self", ".", "answer_processor", "(", "answer_processor_arg", ")", "\n", "sample", ".", "answers", "=", "processed_soft_copy_answers", "[", "\"answers\"", "]", "\n", "sample", ".", "targets", "=", "processed_soft_copy_answers", "[", "\"answers_scores\"", "]", "\n", "sample", ".", "gt_answer_index", "=", "processed_soft_copy_answers", "[", "\"answers_indices\"", "]", "[", "0", "]", "\n", "\n", "", "if", "\"answers_sq\"", "in", "sample_info", ":", "\n", "            ", "answers", "=", "sample_info", "[", "\"answers_sq\"", "]", "\n", "answer_processor_arg", "=", "{", "\"answers\"", ":", "answers", "}", "\n", "\n", "if", "self", ".", "use_ocr", ":", "\n", "                ", "answer_processor_arg", "[", "\"tokens\"", "]", "=", "sample_info", "[", "\"ocr_tokens\"", "]", "\n", "", "processed_soft_copy_answers", "=", "self", ".", "answer_processor", "(", "answer_processor_arg", ")", "\n", "sample", ".", "answers_sq", "=", "processed_soft_copy_answers", "[", "\"answers\"", "]", "\n", "sample", ".", "targets_sq", "=", "processed_soft_copy_answers", "[", "\"answers_scores\"", "]", "\n", "sample", ".", "gt_answer_index_sq", "=", "processed_soft_copy_answers", "[", "\"answers_indices\"", "]", "[", "0", "]", "\n", "\n", "", "if", "\"answers_oq\"", "in", "sample_info", ":", "\n", "            ", "answers", "=", "sample_info", "[", "\"answers_oq\"", "]", "\n", "answer_processor_arg", "=", "{", "\"answers\"", ":", "answers", "}", "\n", "\n", "if", "self", ".", "use_ocr", ":", "\n", "                ", "answer_processor_arg", "[", "\"tokens\"", "]", "=", "sample_info", "[", "\"ocr_tokens\"", "]", "\n", "", "processed_soft_copy_answers", "=", "self", ".", "answer_processor", "(", "answer_processor_arg", ")", "\n", "sample", ".", "answers_oq", "=", "processed_soft_copy_answers", "[", "\"answers\"", "]", "\n", "sample", ".", "targets_oq", "=", "processed_soft_copy_answers", "[", "\"answers_scores\"", "]", "\n", "sample", ".", "gt_answer_index_oq", "=", "processed_soft_copy_answers", "[", "\"answers_indices\"", "]", "[", "0", "]", "\n", "#print(\"Sample : {}\".format(sample))", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.dataset.VQA2Dataset.idx_to_answer": [[222, 224], ["dataset.VQA2Dataset.answer_processor.convert_idx_to_answer"], "methods", ["None"], ["", "def", "idx_to_answer", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "answer_processor", ".", "convert_idx_to_answer", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.dataset.VQA2Dataset.format_for_evalai": [[225, 245], ["report.scores.argmax", "dataset.VQA2Dataset.answer_processor.get_true_vocab_size", "enumerate", "answers[].item", "predictions.append", "dataset.VQA2Dataset.answer_processor.idx2word", "question_id.item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_true_vocab_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.idx2word"], ["", "def", "format_for_evalai", "(", "self", ",", "report", ")", ":", "\n", "        ", "answers", "=", "report", ".", "scores", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "predictions", "=", "[", "]", "\n", "answer_space_size", "=", "self", ".", "answer_processor", ".", "get_true_vocab_size", "(", ")", "\n", "\n", "for", "idx", ",", "question_id", "in", "enumerate", "(", "report", ".", "question_id", ")", ":", "\n", "            ", "answer_id", "=", "answers", "[", "idx", "]", ".", "item", "(", ")", "\n", "\n", "if", "answer_id", ">=", "answer_space_size", ":", "\n", "                ", "answer_id", "-=", "answer_space_size", "\n", "answer", "=", "report", ".", "context_tokens", "[", "idx", "]", "[", "answer_id", "]", "\n", "", "else", ":", "\n", "                ", "answer", "=", "self", ".", "answer_processor", ".", "idx2word", "(", "answer_id", ")", "\n", "", "if", "answer", "==", "self", ".", "context_processor", ".", "PAD_TOKEN", ":", "\n", "                ", "answer", "=", "\"unanswerable\"", "\n", "\n", "", "predictions", ".", "append", "(", "{", "\"question_id\"", ":", "question_id", ".", "item", "(", ")", ",", "\"answer\"", ":", "answer", "}", ")", "\n", "\n", "", "return", "predictions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.builder.VQA2Builder.__init__": [[20, 23], ["pythia.tasks.base_dataset_builder.BaseDatasetBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"vqa2\"", ")", "\n", "self", ".", "dataset_class", "=", "VQA2Dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.builder.VQA2Builder._load": [[24, 35], ["[].split", "len", "pythia.common.registry.registry.register", "builder.VQA2Builder.prepare_data_set"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.original.VisualDialogTask.prepare_data_set"], ["", "def", "_load", "(", "self", ",", "dataset_type", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n", "image_features", "=", "config", "[", "\"image_features\"", "]", "[", "\"train\"", "]", "[", "0", "]", ".", "split", "(", "\",\"", ")", "\n", "self", ".", "num_image_features", "=", "len", "(", "image_features", ")", "\n", "\n", "registry", ".", "register", "(", "\"num_image_features\"", ",", "self", ".", "num_image_features", ")", "\n", "\n", "self", ".", "dataset", "=", "self", ".", "prepare_data_set", "(", "dataset_type", ",", "config", ")", "\n", "\n", "return", "self", ".", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.builder.VQA2Builder._build": [[36, 39], ["None"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "dataset_type", ",", "config", ")", ":", "\n", "# TODO: Build actually here", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.builder.VQA2Builder.update_registry_for_model": [[40, 48], ["pythia.common.registry.registry.register", "pythia.common.registry.registry.register", "builder.VQA2Builder.dataset.text_processor.get_vocab_size", "builder.VQA2Builder.dataset.answer_processor.get_vocab_size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_vocab_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_vocab_size"], ["", "def", "update_registry_for_model", "(", "self", ",", "config", ")", ":", "\n", "        ", "registry", ".", "register", "(", "\n", "self", ".", "dataset_name", "+", "\"_text_vocab_size\"", ",", "\n", "self", ".", "dataset", ".", "text_processor", ".", "get_vocab_size", "(", ")", ",", "\n", ")", "\n", "registry", ".", "register", "(", "\n", "self", ".", "dataset_name", "+", "\"_num_final_outputs\"", ",", "\n", "self", ".", "dataset", ".", "answer_processor", ".", "get_vocab_size", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.builder.VQA2Builder.init_args": [[50, 64], ["parser.add_argument_group", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "def", "init_args", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument_group", "(", "\"VQA2 task specific arguments\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data_root_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"../data\"", ",", "\n", "help", "=", "\"Root directory for data\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-nfr\"", ",", "\n", "\"--fast_read\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Disable fast read and load features on fly\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.builder.VQA2Builder.set_dataset_class": [[66, 68], ["None"], "methods", ["None"], ["", "def", "set_dataset_class", "(", "self", ",", "cls", ")", ":", "\n", "        ", "self", ".", "dataset_class", "=", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.builder.VQA2Builder.prepare_data_set": [[69, 93], ["range", "pythia.tasks.concat_dataset.PythiaConcatDataset", "warnings.warn", "len", "cls", "datasets.append"], "methods", ["None"], ["", "def", "prepare_data_set", "(", "self", ",", "dataset_type", ",", "config", ")", ":", "\n", "        ", "if", "dataset_type", "not", "in", "config", ".", "imdb_files", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"Dataset type {} is not present in \"", "\n", "\"imdb_files of dataset config. Returning None. \"", "\n", "\"This dataset won't be used.\"", ".", "format", "(", "dataset_type", ")", "\n", ")", "\n", "return", "None", "\n", "\n", "", "imdb_files", "=", "config", "[", "\"imdb_files\"", "]", "[", "dataset_type", "]", "\n", "\n", "datasets", "=", "[", "]", "\n", "\n", "for", "imdb_idx", "in", "range", "(", "len", "(", "imdb_files", ")", ")", ":", "\n", "            ", "cls", "=", "self", ".", "dataset_class", "\n", "dataset", "=", "cls", "(", "dataset_type", ",", "imdb_idx", ",", "config", ")", "\n", "#print(\"Dataset type : {}\".format(dataset_type))", "\n", "#print(\"IMDB IDX : {}\".format(imdb_idx))", "\n", "#print(\"Config: {}\".format(config))", "\n", "datasets", ".", "append", "(", "dataset", ")", "\n", "\n", "", "dataset", "=", "PythiaConcatDataset", "(", "datasets", ")", "\n", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa2.ocr_builder.TextVQABuilder.__init__": [[9, 13], ["pythia.tasks.vqa.vizwiz.VizWizBuilder.__init__", "ocr_builder.TextVQABuilder.set_dataset_class"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder.set_dataset_class"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_name", "=", "\"VQA2_OCR\"", "\n", "self", ".", "set_dataset_class", "(", "VQA2OCRDataset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.ocr_dataset.VQAIntrospectOCRDataset.__init__": [[7, 12], ["pythia.tasks.vqa.vizwiz.VizWizDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "imdb_file", ",", "image_feat_directories", ",", "verbose", "=", "False", ",", "**", "data_params", ")", ":", "\n", "        ", "super", "(", "VQA2OCRDataset", ",", "self", ")", ".", "__init__", "(", "\n", "imdb_file", ",", "image_feat_directories", ",", "verbose", ",", "**", "data_params", "\n", ")", "\n", "self", ".", "name", "=", "\"vqa2_ocr\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.ocr_dataset.VQAIntrospectOCRDataset.format_for_evalai": [[13, 28], ["answers.argmax.argmax.argmax", "enumerate", "predictions.append", "pythia.utils.text_utils.word_tokenize", "ocr_dataset.VQAIntrospectOCRDataset.answer_dict.idx2word", "question_id.item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.EvalAIAnswerProcessor.word_tokenize", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.idx2word"], ["", "def", "format_for_evalai", "(", "self", ",", "batch", ",", "answers", ")", ":", "\n", "        ", "answers", "=", "answers", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "predictions", "=", "[", "]", "\n", "for", "idx", ",", "question_id", "in", "enumerate", "(", "batch", "[", "\"question_id\"", "]", ")", ":", "\n", "            ", "answer_id", "=", "answers", "[", "idx", "]", "\n", "\n", "if", "answer_id", ">=", "self", ".", "answer_space_size", ":", "\n", "                ", "answer_id", "-=", "self", ".", "answer_space_size", "\n", "answer", "=", "word_tokenize", "(", "batch", "[", "\"ocr_tokens\"", "]", "[", "answer_id", "]", "[", "idx", "]", ")", "\n", "", "else", ":", "\n", "                ", "answer", "=", "self", ".", "answer_dict", ".", "idx2word", "(", "answer_id", ")", "\n", "", "predictions", ".", "append", "(", "{", "\"question_id\"", ":", "question_id", ".", "item", "(", ")", ",", "\"answer\"", ":", "answer", "}", ")", "\n", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.ocr_dataset.VQAIntrospectOCRDataset.__getitem__": [[29, 35], ["pythia.tasks.vqa.vizwiz.VizWizDataset.__getitem__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample", "=", "super", "(", "VQA2OCRDataset", ",", "self", ")", ".", "__getitem__", "(", "idx", ")", "\n", "\n", "if", "sample", "[", "\"question_id\"", "]", "is", "None", ":", "\n", "            ", "sample", "[", "\"question_id\"", "]", "=", "-", "1", "\n", "", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.__init__": [[17, 64], ["pythia.tasks.base_dataset.BaseDataset.__init__", "dataset.VQAIntrospectDataset._get_absolute_path", "pythia.tasks.image_database.ImageDatabase", "hasattr", "ValueError", "dataset.VQAIntrospectDataset.config.get", "dataset.VQAIntrospectDataset.split", "dataset.VQAIntrospectDataset._get_absolute_path", "pythia.tasks.features_dataset.FeaturesDataset"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset._get_absolute_path", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset._get_absolute_path"], ["    ", "def", "__init__", "(", "self", ",", "dataset_type", ",", "imdb_file_index", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"vqa2\"", ",", "dataset_type", ",", "config", ")", "\n", "imdb_files", "=", "self", ".", "config", ".", "imdb_files", "\n", "#pdb.set_trace()", "\n", "if", "dataset_type", "not", "in", "imdb_files", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Dataset type {} is not present in \"", "\n", "\"imdb_files of dataset config\"", ".", "format", "(", "dataset_type", ")", "\n", ")", "\n", "\n", "", "self", ".", "imdb_file", "=", "imdb_files", "[", "dataset_type", "]", "[", "imdb_file_index", "]", "\n", "self", ".", "imdb_file", "=", "self", ".", "_get_absolute_path", "(", "self", ".", "imdb_file", ")", "\n", "self", ".", "imdb", "=", "ImageDatabase", "(", "self", ".", "imdb_file", ")", "\n", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "image_depth_first", "=", "self", ".", "config", ".", "image_depth_first", "\n", "self", ".", "_should_fast_read", "=", "self", ".", "config", ".", "fast_read", "\n", "\n", "self", ".", "use_ocr", "=", "self", ".", "config", ".", "use_ocr", "\n", "self", ".", "use_ocr_info", "=", "self", ".", "config", ".", "use_ocr_info", "\n", "\n", "self", ".", "_use_features", "=", "False", "\n", "if", "hasattr", "(", "self", ".", "config", ",", "\"image_features\"", ")", ":", "\n", "            ", "self", ".", "_use_features", "=", "True", "\n", "self", ".", "features_max_len", "=", "self", ".", "config", ".", "features_max_len", "\n", "self", ".", "_return_info", "=", "self", ".", "config", ".", "get", "(", "\"return_info\"", ",", "True", ")", "\n", "\n", "all_image_feature_dirs", "=", "self", ".", "config", ".", "image_features", "[", "dataset_type", "]", "\n", "curr_image_features_dir", "=", "all_image_feature_dirs", "[", "imdb_file_index", "]", "\n", "curr_image_features_dir", "=", "curr_image_features_dir", ".", "split", "(", "\",\"", ")", "\n", "curr_image_features_dir", "=", "self", ".", "_get_absolute_path", "(", "curr_image_features_dir", ")", "\n", "\n", "self", ".", "features_db", "=", "FeaturesDataset", "(", "\n", "\"coco\"", ",", "\n", "directories", "=", "curr_image_features_dir", ",", "\n", "depth_first", "=", "self", ".", "image_depth_first", ",", "\n", "max_features", "=", "self", ".", "features_max_len", ",", "\n", "fast_read", "=", "self", ".", "_should_fast_read", ",", "\n", "imdb", "=", "self", ".", "imdb", ",", "\n", "return_info", "=", "self", ".", "_return_info", ",", "\n", ")", "\n", "\n", "", "", "def", "_get_absolute_path", "(", "self", ",", "paths", ")", ":", "\n", "        ", "if", "isinstance", "(", "paths", ",", "list", ")", ":", "\n", "            ", "return", "[", "self", ".", "_get_absolute_path", "(", "path", ")", "for", "path", "in", "paths", "]", "\n", "", "elif", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isabs", "(", "paths", ")", ":", "\n", "                ", "pythia_root", "=", "get_pythia_root", "(", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset._get_absolute_path": [[66, 77], ["isinstance", "isinstance", "dataset.VQAIntrospectDataset._get_absolute_path", "TypeError", "os.path.isabs", "pythia.utils.general.get_pythia_root", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset._get_absolute_path", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root"], ["", "return", "paths", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Paths passed to dataset should either be \"", "\"string or list\"", "\n", ")", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imdb", ")", "\n", "\n", "", "def", "try_fast_read", "(", "self", ")", ":", "\n", "# Don't fast read in case of test set.", "\n", "        ", "if", "self", ".", "_dataset_type", "==", "\"test\"", ":", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.__len__": [[79, 81], ["len"], "methods", ["None"], ["\n", "", "if", "hasattr", "(", "self", ",", "\"_should_fast_read\"", ")", "and", "self", ".", "_should_fast_read", "is", "True", ":", "\n", "            ", "self", ".", "writer", ".", "write", "(", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.try_fast_read": [[82, 98], ["hasattr", "dataset.VQAIntrospectDataset.writer.write", "tqdm.tqdm", "range", "dataset.VQAIntrospectDataset.load_item", "len", "pythia.utils.distributed_utils.is_main_process"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.dataset.COCODataset.load_item", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.is_main_process"], ["\"Starting to fast read {} {} dataset\"", ".", "format", "(", "\n", "self", ".", "_name", ",", "self", ".", "_dataset_type", "\n", ")", "\n", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "for", "idx", "in", "tqdm", ".", "tqdm", "(", "\n", "range", "(", "len", "(", "self", ".", "imdb", ")", ")", ",", "miniters", "=", "100", ",", "disable", "=", "not", "is_main_process", "(", ")", "\n", ")", ":", "\n", "                ", "self", ".", "cache", "[", "idx", "]", "=", "self", ".", "load_item", "(", "idx", ")", "\n", "\n", "", "", "", "def", "get_item", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "_should_fast_read", "is", "True", "and", "self", ".", "_dataset_type", "!=", "\"test\"", ":", "\n", "            ", "return", "self", ".", "cache", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "load_item", "(", "idx", ")", "\n", "\n", "", "", "def", "load_item", "(", "self", ",", "idx", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.get_item": [[99, 104], ["dataset.VQAIntrospectDataset.load_item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.dataset.COCODataset.load_item"], ["        ", "sample_info", "=", "self", ".", "imdb", "[", "idx", "]", "\n", "current_sample", "=", "Sample", "(", ")", "\n", "\n", "if", "\"question_tokens\"", "in", "sample_info", ":", "\n", "            ", "text_processor_argument", "=", "{", "\"tokens\"", ":", "sample_info", "[", "\"question_tokens\"", "]", "}", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.load_item": [[105, 198], ["pythia.common.sample.Sample", "torch.tensor", "isinstance", "dataset.VQAIntrospectDataset.add_ocr_details", "dataset.VQAIntrospectDataset.add_answer_info", "dataset.VQAIntrospectDataset.text_processor", "torch.tensor", "torch.tensor", "dataset.VQAIntrospectDataset.update", "len", "dataset.VQAIntrospectDataset.text_processor", "torch.tensor", "dataset.VQAIntrospectDataset.text_processor", "torch.tensor", "dataset.VQAIntrospectDataset.text_processor", "dataset.VQAIntrospectDataset.text_processor", "len", "dataset.VQAIntrospectDataset.text_processor", "dataset.VQAIntrospectDataset.text_processor", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.add_ocr_details", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.add_answer_info", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update"], ["#text_processor_argument = {\"text\": sample_info[\"question\"]}", "\n", "            ", "text_processor_argument", "=", "{", "\"text\"", ":", "sample_info", "[", "\"main_question_str\"", "]", "}", "\n", "if", "\"sub_question_str\"", "in", "sample_info", ":", "\n", "                ", "text_processor_argument_sq", "=", "{", "\"text\"", ":", "sample_info", "[", "\"sub_question_str\"", "]", "}", "\n", "", "if", "\"other_question_str\"", "in", "sample_info", ":", "\n", "                ", "text_processor_argument_oq", "=", "{", "\"text\"", ":", "sample_info", "[", "\"other_question_str\"", "]", "}", "\n", "\n", "", "", "processed_question", "=", "self", ".", "text_processor", "(", "text_processor_argument", ")", "\n", "processed_question_sq", "=", "self", ".", "text_processor", "(", "text_processor_argument_sq", ")", "\n", "processed_question_oq", "=", "self", ".", "text_processor", "(", "text_processor_argument_oq", ")", "\n", "\n", "current_sample", ".", "text", "=", "processed_question", "[", "\"text\"", "]", "\n", "current_sample", ".", "text_sq", "=", "processed_question_sq", "[", "\"text\"", "]", "\n", "current_sample", ".", "text_oq", "=", "processed_question_oq", "[", "\"text\"", "]", "\n", "current_sample", ".", "question_text", "=", "sample_info", "[", "\"main_question_str\"", "]", "\n", "current_sample", ".", "reasoning_question", "=", "sample_info", "[", "\"main_question_str\"", "]", "\n", "current_sample", ".", "reasoning_answer", "=", "sample_info", "[", "\"main_answer_str\"", "]", "[", "0", "]", "\n", "#current_sample.image_url = sample_info[\"img_path\"]", "\n", "current_sample", ".", "image_url", "=", "sample_info", "[", "\"image_path\"", "]", "\n", "\n", "current_sample", ".", "sub_question", "=", "sample_info", "[", "\"sub_question_str\"", "]", "\n", "current_sample", ".", "other_question", "=", "sample_info", "[", "\"other_question_str\"", "]", "\n", "\n", "current_sample", ".", "question_id", "=", "torch", ".", "tensor", "(", "\n", "sample_info", "[", "\"question_id\"", "]", ",", "dtype", "=", "torch", ".", "int", "\n", ")", "\n", "\n", "if", "isinstance", "(", "sample_info", "[", "\"image_id\"", "]", ",", "int", ")", ":", "\n", "            ", "current_sample", ".", "image_id", "=", "torch", ".", "tensor", "(", "\n", "sample_info", "[", "\"image_id\"", "]", ",", "dtype", "=", "torch", ".", "int", "\n", ")", "\n", "", "else", ":", "\n", "            ", "current_sample", ".", "image_id", "=", "sample_info", "[", "\"image_id\"", "]", "\n", "\n", "", "current_sample", ".", "text_len", "=", "torch", ".", "tensor", "(", "\n", "#len(sample_info[\"question_tokens\"]), dtype=torch.int", "\n", "len", "(", "sample_info", "[", "\"main_question_tokens\"", "]", ")", ",", "dtype", "=", "torch", ".", "int", "\n", ")", "\n", "\n", "if", "self", ".", "_use_features", "is", "True", ":", "\n", "            ", "features", "=", "self", ".", "features_db", "[", "idx", "]", "\n", "current_sample", ".", "update", "(", "features", ")", "\n", "\n", "# Add details for OCR like OCR bbox, vectors, tokens here", "\n", "", "current_sample", "=", "self", ".", "add_ocr_details", "(", "sample_info", ",", "current_sample", ")", "\n", "# Depending on whether we are using soft copy this can add", "\n", "# dynamic answer space", "\n", "current_sample", "=", "self", ".", "add_answer_info", "(", "sample_info", ",", "current_sample", ")", "\n", "#print(\"current sample : {}\".format(current_sample))", "\n", "#pdb.set_trace()", "\n", "#print(\"Current sample : {}\".format(current_sample))", "\n", "\n", "return", "current_sample", "\n", "\n", "", "def", "add_ocr_details", "(", "self", ",", "sample_info", ",", "sample", ")", ":", "\n", "        ", "if", "self", ".", "use_ocr", ":", "\n", "# Preprocess OCR tokens", "\n", "            ", "ocr_tokens", "=", "[", "\n", "self", ".", "ocr_token_processor", "(", "{", "\"text\"", ":", "token", "}", ")", "[", "\"text\"", "]", "\n", "for", "token", "in", "sample_info", "[", "\"ocr_tokens\"", "]", "\n", "]", "\n", "# Get embeddings for tokens", "\n", "context", "=", "self", ".", "context_processor", "(", "{", "\"tokens\"", ":", "ocr_tokens", "}", ")", "\n", "sample", ".", "context", "=", "context", "[", "\"text\"", "]", "\n", "sample", ".", "context_tokens", "=", "context", "[", "\"tokens\"", "]", "\n", "sample", ".", "context_feature_0", "=", "context", "[", "\"text\"", "]", "\n", "sample", ".", "context_info_0", "=", "Sample", "(", ")", "\n", "sample", ".", "context_info_0", ".", "max_features", "=", "context", "[", "\"length\"", "]", "\n", "\n", "order_vectors", "=", "torch", ".", "eye", "(", "len", "(", "sample", ".", "context_tokens", ")", ")", "\n", "order_vectors", "[", "context", "[", "\"length\"", "]", ":", "]", "=", "0", "\n", "sample", ".", "order_vectors", "=", "order_vectors", "\n", "\n", "", "if", "self", ".", "use_ocr_info", "and", "\"ocr_info\"", "in", "sample_info", ":", "\n", "            ", "sample", ".", "ocr_bbox", "=", "self", ".", "bbox_processor", "(", "{", "\"info\"", ":", "sample_info", "[", "\"ocr_info\"", "]", "}", ")", "[", "\n", "\"bbox\"", "\n", "]", "\n", "\n", "", "return", "sample", "\n", "\n", "", "def", "add_answer_info", "(", "self", ",", "sample_info", ",", "sample", ")", ":", "\n", "        ", "if", "\"answers\"", "in", "sample_info", ":", "\n", "            ", "answers", "=", "sample_info", "[", "\"answers\"", "]", "\n", "answer_processor_arg", "=", "{", "\"answers\"", ":", "answers", "}", "\n", "\n", "if", "self", ".", "use_ocr", ":", "\n", "                ", "answer_processor_arg", "[", "\"tokens\"", "]", "=", "sample_info", "[", "\"ocr_tokens\"", "]", "\n", "", "processed_soft_copy_answers", "=", "self", ".", "answer_processor", "(", "answer_processor_arg", ")", "\n", "sample", ".", "answers", "=", "processed_soft_copy_answers", "[", "\"answers\"", "]", "\n", "sample", ".", "targets", "=", "processed_soft_copy_answers", "[", "\"answers_scores\"", "]", "\n", "sample", ".", "gt_answer_index", "=", "processed_soft_copy_answers", "[", "\"answers_indices\"", "]", "[", "0", "]", "\n", "\n", "", "if", "\"answers_sq\"", "in", "sample_info", ":", "\n", "            ", "answers", "=", "sample_info", "[", "\"answers_sq\"", "]", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.add_ocr_details": [[199, 224], ["dataset.VQAIntrospectDataset.context_processor", "pythia.common.sample.Sample", "torch.eye", "len", "dataset.VQAIntrospectDataset.bbox_processor", "dataset.VQAIntrospectDataset.ocr_token_processor"], "methods", ["None"], ["answer_processor_arg", "=", "{", "\"answers\"", ":", "answers", "}", "\n", "\n", "if", "self", ".", "use_ocr", ":", "\n", "                ", "answer_processor_arg", "[", "\"tokens\"", "]", "=", "sample_info", "[", "\"ocr_tokens\"", "]", "\n", "", "processed_soft_copy_answers", "=", "self", ".", "answer_processor", "(", "answer_processor_arg", ")", "\n", "sample", ".", "answers_sq", "=", "processed_soft_copy_answers", "[", "\"answers\"", "]", "\n", "sample", ".", "targets_sq", "=", "processed_soft_copy_answers", "[", "\"answers_scores\"", "]", "\n", "sample", ".", "gt_answer_index_sq", "=", "processed_soft_copy_answers", "[", "\"answers_indices\"", "]", "[", "0", "]", "\n", "\n", "", "if", "\"answers_oq\"", "in", "sample_info", ":", "\n", "            ", "answers", "=", "sample_info", "[", "\"answers_oq\"", "]", "\n", "answer_processor_arg", "=", "{", "\"answers\"", ":", "answers", "}", "\n", "\n", "if", "self", ".", "use_ocr", ":", "\n", "                ", "answer_processor_arg", "[", "\"tokens\"", "]", "=", "sample_info", "[", "\"ocr_tokens\"", "]", "\n", "", "processed_soft_copy_answers", "=", "self", ".", "answer_processor", "(", "answer_processor_arg", ")", "\n", "sample", ".", "answers_oq", "=", "processed_soft_copy_answers", "[", "\"answers\"", "]", "\n", "sample", ".", "targets_oq", "=", "processed_soft_copy_answers", "[", "\"answers_scores\"", "]", "\n", "sample", ".", "gt_answer_index_oq", "=", "processed_soft_copy_answers", "[", "\"answers_indices\"", "]", "[", "0", "]", "\n", "#print(\"Sample : {}\".format(sample))", "\n", "\n", "", "return", "sample", "\n", "\n", "", "def", "idx_to_answer", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "answer_processor", ".", "convert_idx_to_answer", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.add_answer_info": [[225, 277], ["dataset.VQAIntrospectDataset.answer_processor", "dataset.VQAIntrospectDataset.answer_processor", "dataset.VQAIntrospectDataset.answer_processor", "dataset.VQAIntrospectDataset.answer_processor"], "methods", ["None"], ["", "def", "format_for_evalai", "(", "self", ",", "report", ")", ":", "\n", "        ", "answers", "=", "report", ".", "scores", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "predictions", "=", "[", "]", "\n", "answer_space_size", "=", "self", ".", "answer_processor", ".", "get_true_vocab_size", "(", ")", "\n", "\n", "for", "idx", ",", "question_id", "in", "enumerate", "(", "report", ".", "question_id", ")", ":", "\n", "            ", "answer_id", "=", "answers", "[", "idx", "]", ".", "item", "(", ")", "\n", "\n", "if", "answer_id", ">=", "answer_space_size", ":", "\n", "                ", "answer_id", "-=", "answer_space_size", "\n", "answer", "=", "report", ".", "context_tokens", "[", "idx", "]", "[", "answer_id", "]", "\n", "", "else", ":", "\n", "                ", "answer", "=", "self", ".", "answer_processor", ".", "idx2word", "(", "answer_id", ")", "\n", "", "if", "answer", "==", "self", ".", "context_processor", ".", "PAD_TOKEN", ":", "\n", "                ", "answer", "=", "\"unanswerable\"", "\n", "\n", "", "predictions", ".", "append", "(", "{", "\"question_id\"", ":", "question_id", ".", "item", "(", ")", ",", "\"answer\"", ":", "answer", "}", ")", "\n", "\n", "", "return", "predictions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.idx_to_answer": [[278, 280], ["dataset.VQAIntrospectDataset.answer_processor.convert_idx_to_answer"], "methods", ["None"], []], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.format_for_evalai": [[281, 301], ["report.scores.argmax", "dataset.VQAIntrospectDataset.answer_processor.get_true_vocab_size", "enumerate", "answers[].item", "predictions.append", "dataset.VQAIntrospectDataset.answer_processor.idx2word", "question_id.item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_true_vocab_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.idx2word"], []], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder.__init__": [[20, 23], ["pythia.tasks.base_dataset_builder.BaseDatasetBuilder.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"vqa2\"", ")", "\n", "self", ".", "dataset_class", "=", "VQA2Dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder._load": [[24, 35], ["[].split", "len", "pythia.common.registry.registry.register", "builder.VQAIntrospectBuilder.prepare_data_set"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.original.VisualDialogTask.prepare_data_set"], ["", "def", "_load", "(", "self", ",", "dataset_type", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n", "image_features", "=", "config", "[", "\"image_features\"", "]", "[", "\"train\"", "]", "[", "0", "]", ".", "split", "(", "\",\"", ")", "\n", "self", ".", "num_image_features", "=", "len", "(", "image_features", ")", "\n", "\n", "registry", ".", "register", "(", "\"num_image_features\"", ",", "self", ".", "num_image_features", ")", "\n", "\n", "self", ".", "dataset", "=", "self", ".", "prepare_data_set", "(", "dataset_type", ",", "config", ")", "\n", "\n", "return", "self", ".", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder._build": [[36, 39], ["None"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "dataset_type", ",", "config", ")", ":", "\n", "# TODO: Build actually here", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder.update_registry_for_model": [[40, 48], ["pythia.common.registry.registry.register", "pythia.common.registry.registry.register", "builder.VQAIntrospectBuilder.dataset.text_processor.get_vocab_size", "builder.VQAIntrospectBuilder.dataset.answer_processor.get_vocab_size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_vocab_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_vocab_size"], ["", "def", "update_registry_for_model", "(", "self", ",", "config", ")", ":", "\n", "        ", "registry", ".", "register", "(", "\n", "self", ".", "dataset_name", "+", "\"_text_vocab_size\"", ",", "\n", "self", ".", "dataset", ".", "text_processor", ".", "get_vocab_size", "(", ")", ",", "\n", ")", "\n", "registry", ".", "register", "(", "\n", "self", ".", "dataset_name", "+", "\"_num_final_outputs\"", ",", "\n", "self", ".", "dataset", ".", "answer_processor", ".", "get_vocab_size", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder.init_args": [[50, 64], ["parser.add_argument_group", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "def", "init_args", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument_group", "(", "\"VQA2 task specific arguments\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data_root_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"../data\"", ",", "\n", "help", "=", "\"Root directory for data\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-nfr\"", ",", "\n", "\"--fast_read\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Disable fast read and load features on fly\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder.set_dataset_class": [[66, 68], ["None"], "methods", ["None"], ["", "def", "set_dataset_class", "(", "self", ",", "cls", ")", ":", "\n", "        ", "self", ".", "dataset_class", "=", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder.prepare_data_set": [[69, 93], ["range", "pythia.tasks.concat_dataset.PythiaConcatDataset", "warnings.warn", "len", "cls", "datasets.append"], "methods", ["None"], ["", "def", "prepare_data_set", "(", "self", ",", "dataset_type", ",", "config", ")", ":", "\n", "        ", "if", "dataset_type", "not", "in", "config", ".", "imdb_files", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"Dataset type {} is not present in \"", "\n", "\"imdb_files of dataset config. Returning None. \"", "\n", "\"This dataset won't be used.\"", ".", "format", "(", "dataset_type", ")", "\n", ")", "\n", "return", "None", "\n", "\n", "", "imdb_files", "=", "config", "[", "\"imdb_files\"", "]", "[", "dataset_type", "]", "\n", "\n", "datasets", "=", "[", "]", "\n", "\n", "for", "imdb_idx", "in", "range", "(", "len", "(", "imdb_files", ")", ")", ":", "\n", "            ", "cls", "=", "self", ".", "dataset_class", "\n", "dataset", "=", "cls", "(", "dataset_type", ",", "imdb_idx", ",", "config", ")", "\n", "#print(\"Dataset type : {}\".format(dataset_type))", "\n", "#print(\"IMDB IDX : {}\".format(imdb_idx))", "\n", "#print(\"Config: {}\".format(config))", "\n", "datasets", ".", "append", "(", "dataset", ")", "\n", "\n", "", "dataset", "=", "PythiaConcatDataset", "(", "datasets", ")", "\n", "\n", "return", "dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.ocr_builder.TextVQABuilder.__init__": [[9, 13], ["pythia.tasks.vqa.vizwiz.VizWizBuilder.__init__", "ocr_builder.TextVQABuilder.set_dataset_class"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder.set_dataset_class"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset_name", "=", "\"VQA2_OCR\"", "\n", "self", ".", "set_dataset_class", "(", "VQA2OCRDataset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vizwiz.dataset.VizWizDataset.__init__": [[9, 14], ["pythia.tasks.vqa.vqa2.VQA2Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["from", "pythia", ".", "tasks", ".", "base_dataset", "import", "BaseDataset", "\n", "from", "pythia", ".", "tasks", ".", "features_dataset", "import", "FeaturesDataset", "\n", "from", "pythia", ".", "tasks", ".", "image_database", "import", "ImageDatabase", "\n", "from", "pythia", ".", "utils", ".", "distributed_utils", "import", "is_main_process", "\n", "from", "pythia", ".", "utils", ".", "general", "import", "get_pythia_root", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vizwiz.dataset.VizWizDataset.load_item": [[15, 24], ["super().load_item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.dataset.COCODataset.load_item"], ["\n", "class", "VQA2Dataset", "(", "BaseDataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dataset_type", ",", "imdb_file_index", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"vqa2\"", ",", "dataset_type", ",", "config", ")", "\n", "imdb_files", "=", "self", ".", "config", ".", "imdb_files", "\n", "#pdb.set_trace()", "\n", "if", "dataset_type", "not", "in", "imdb_files", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Dataset type {} is not present in \"", "\n", "\"imdb_files of dataset config\"", ".", "format", "(", "dataset_type", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vizwiz.dataset.VizWizDataset.format_for_evalai": [[25, 49], ["report.scores.argmax", "dataset.VizWizDataset.answer_processor.get_true_vocab_size", "enumerate", "answers[].item", "predictions.append", "dataset.VizWizDataset.answer_processor.idx2word", "image_id.split"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_true_vocab_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.idx2word"], [")", "\n", "\n", "", "self", ".", "imdb_file", "=", "imdb_files", "[", "dataset_type", "]", "[", "imdb_file_index", "]", "\n", "self", ".", "imdb_file", "=", "self", ".", "_get_absolute_path", "(", "self", ".", "imdb_file", ")", "\n", "self", ".", "imdb", "=", "ImageDatabase", "(", "self", ".", "imdb_file", ")", "\n", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "image_depth_first", "=", "self", ".", "config", ".", "image_depth_first", "\n", "self", ".", "_should_fast_read", "=", "self", ".", "config", ".", "fast_read", "\n", "\n", "self", ".", "use_ocr", "=", "self", ".", "config", ".", "use_ocr", "\n", "self", ".", "use_ocr_info", "=", "self", ".", "config", ".", "use_ocr_info", "\n", "\n", "self", ".", "_use_features", "=", "False", "\n", "if", "hasattr", "(", "self", ".", "config", ",", "\"image_features\"", ")", ":", "\n", "            ", "self", ".", "_use_features", "=", "True", "\n", "self", ".", "features_max_len", "=", "self", ".", "config", ".", "features_max_len", "\n", "self", ".", "_return_info", "=", "self", ".", "config", ".", "get", "(", "\"return_info\"", ",", "True", ")", "\n", "\n", "all_image_feature_dirs", "=", "self", ".", "config", ".", "image_features", "[", "dataset_type", "]", "\n", "curr_image_features_dir", "=", "all_image_feature_dirs", "[", "imdb_file_index", "]", "\n", "curr_image_features_dir", "=", "curr_image_features_dir", ".", "split", "(", "\",\"", ")", "\n", "curr_image_features_dir", "=", "self", ".", "_get_absolute_path", "(", "curr_image_features_dir", ")", "\n", "\n", "self", ".", "features_db", "=", "FeaturesDataset", "(", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vizwiz.builder.VizWizBuilder.__init__": [[9, 13], ["pythia.tasks.vqa.vqa2.VQA2Builder.__init__", "builder.VizWizBuilder.set_dataset_class"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder.set_dataset_class"], ["import", "os", "\n", "import", "warnings", "\n", "\n", "from", "pythia", ".", "common", ".", "registry", "import", "registry", "\n", "from", "pythia", ".", "tasks", ".", "base_dataset_builder", "import", "BaseDatasetBuilder", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vizwiz.builder.VizWizBuilder.update_registry_for_model": [[14, 16], ["super().update_registry_for_model"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.update_registry_for_model"], ["from", "pythia", ".", "tasks", ".", "concat_dataset", "import", "PythiaConcatDataset", "\n", "from", "pythia", ".", "tasks", ".", "vqa", ".", "vqa2", ".", "dataset", "import", "VQA2Dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.textvqa.dataset.TextVQADataset.__init__": [[7, 10], ["pythia.tasks.vqa.vizwiz.VizWizDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["\n", "from", "pythia", ".", "common", ".", "sample", "import", "Sample", "\n", "from", "pythia", ".", "tasks", ".", "base_dataset", "import", "BaseDataset", "\n", "from", "pythia", ".", "tasks", ".", "features_dataset", "import", "FeaturesDataset", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.textvqa.dataset.TextVQADataset.format_for_evalai": [[11, 27], ["report.scores.argmax", "dataset.TextVQADataset.answer_processor.get_true_vocab_size", "enumerate", "answers[].item", "predictions.append", "pythia.utils.text_utils.word_tokenize", "dataset.TextVQADataset.answer_processor.idx2word", "question_id.item"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_true_vocab_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.EvalAIAnswerProcessor.word_tokenize", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.VocabDict.idx2word"], ["from", "pythia", ".", "tasks", ".", "image_database", "import", "ImageDatabase", "\n", "from", "pythia", ".", "utils", ".", "distributed_utils", "import", "is_main_process", "\n", "from", "pythia", ".", "utils", ".", "general", "import", "get_pythia_root", "\n", "\n", "\n", "class", "VQA2Dataset", "(", "BaseDataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dataset_type", ",", "imdb_file_index", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"vqa2\"", ",", "dataset_type", ",", "config", ")", "\n", "imdb_files", "=", "self", ".", "config", ".", "imdb_files", "\n", "#pdb.set_trace()", "\n", "if", "dataset_type", "not", "in", "imdb_files", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Dataset type {} is not present in \"", "\n", "\"imdb_files of dataset config\"", ".", "format", "(", "dataset_type", ")", "\n", ")", "\n", "\n", "", "self", ".", "imdb_file", "=", "imdb_files", "[", "dataset_type", "]", "[", "imdb_file_index", "]", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.textvqa.builder.TextVQABuilder.__init__": [[9, 13], ["pythia.tasks.vqa.vizwiz.VizWizBuilder.__init__", "builder.TextVQABuilder.set_dataset_class"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder.set_dataset_class"], ["import", "os", "\n", "import", "warnings", "\n", "\n", "from", "pythia", ".", "common", ".", "registry", "import", "registry", "\n", "from", "pythia", ".", "tasks", ".", "base_dataset_builder", "import", "BaseDatasetBuilder", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.dataset.CLEVRDataset.__init__": [[48, 67], ["pythia.tasks.base_dataset.BaseDataset.__init__", "os.path.join", "dataset.CLEVRDataset._load", "pythia.utils.general.get_pythia_root", "os.path.join", "os.path.exists", "RuntimeError", "os.listdir", "os.path.join", "len", "FileNotFoundError", "_TEMPLATES[].format", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.builder.CLEVRBuilder._load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root"], ["\n", "self", ".", "features_db", "=", "FeaturesDataset", "(", "\n", "\"coco\"", ",", "\n", "directories", "=", "curr_image_features_dir", ",", "\n", "depth_first", "=", "self", ".", "image_depth_first", ",", "\n", "max_features", "=", "self", ".", "features_max_len", ",", "\n", "fast_read", "=", "self", ".", "_should_fast_read", ",", "\n", "imdb", "=", "self", ".", "imdb", ",", "\n", "return_info", "=", "self", ".", "_return_info", ",", "\n", ")", "\n", "\n", "", "", "def", "_get_absolute_path", "(", "self", ",", "paths", ")", ":", "\n", "        ", "if", "isinstance", "(", "paths", ",", "list", ")", ":", "\n", "            ", "return", "[", "self", ".", "_get_absolute_path", "(", "path", ")", "for", "path", "in", "paths", "]", "\n", "", "elif", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isabs", "(", "paths", ")", ":", "\n", "                ", "pythia_root", "=", "get_pythia_root", "(", ")", "\n", "paths", "=", "os", ".", "path", ".", "join", "(", "pythia_root", ",", "self", ".", "config", ".", "data_root_dir", ",", "paths", ")", "\n", "", "return", "paths", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.dataset.CLEVRDataset._load": [[68, 85], ["os.path.join", "open", "pythia.utils.distributed_utils.is_main_process", "pythia.utils.distributed_utils.synchronize", "os.path.join", "json.load", "dataset.CLEVRDataset._build_vocab", "dataset.CLEVRDataset._build_vocab", "_TEMPLATES[].format"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.is_main_process", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.synchronize", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.dataset.CLEVRDataset._build_vocab", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.dataset.CLEVRDataset._build_vocab"], ["            ", "raise", "TypeError", "(", "\n", "\"Paths passed to dataset should either be \"", "\"string or list\"", "\n", ")", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imdb", ")", "\n", "\n", "", "def", "try_fast_read", "(", "self", ")", ":", "\n", "# Don't fast read in case of test set.", "\n", "        ", "if", "self", ".", "_dataset_type", "==", "\"test\"", ":", "\n", "            ", "return", "\n", "\n", "", "if", "hasattr", "(", "self", ",", "\"_should_fast_read\"", ")", "and", "self", ".", "_should_fast_read", "is", "True", ":", "\n", "            ", "self", ".", "writer", ".", "write", "(", "\n", "\"Starting to fast read {} {} dataset\"", ".", "format", "(", "\n", "self", ".", "_name", ",", "self", ".", "_dataset_type", "\n", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.dataset.CLEVRDataset.__len__": [[86, 88], ["len"], "methods", ["None"], ["self", ".", "cache", "=", "{", "}", "\n", "for", "idx", "in", "tqdm", ".", "tqdm", "(", "\n", "range", "(", "len", "(", "self", ".", "imdb", ")", ")", ",", "miniters", "=", "100", ",", "disable", "=", "not", "is_main_process", "(", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.dataset.CLEVRDataset._get_vocab_path": [[89, 93], ["os.path.join", "_TEMPLATES[].format"], "methods", ["None"], [")", ":", "\n", "                ", "self", ".", "cache", "[", "idx", "]", "=", "self", ".", "load_item", "(", "idx", ")", "\n", "\n", "", "", "", "def", "get_item", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "_should_fast_read", "is", "True", "and", "self", ".", "_dataset_type", "!=", "\"test\"", ":", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.dataset.CLEVRDataset._build_vocab": [[95, 126], ["dataset.CLEVRDataset._get_vocab_path", "os.path.exists", "os.makedirs", "pythia.utils.text_utils.VocabFromText", "os.path.dirname", "build_attributes.get", "build_attributes.get", "build_attributes.get", "open", "f.write"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.dataset.CLEVRDataset._get_vocab_path", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "else", ":", "\n", "            ", "return", "self", ".", "load_item", "(", "idx", ")", "\n", "\n", "", "", "def", "load_item", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample_info", "=", "self", ".", "imdb", "[", "idx", "]", "\n", "current_sample", "=", "Sample", "(", ")", "\n", "\n", "if", "\"question_tokens\"", "in", "sample_info", ":", "\n", "            ", "text_processor_argument", "=", "{", "\"tokens\"", ":", "sample_info", "[", "\"question_tokens\"", "]", "}", "\n", "", "else", ":", "\n", "#text_processor_argument = {\"text\": sample_info[\"question\"]}", "\n", "            ", "text_processor_argument", "=", "{", "\"text\"", ":", "sample_info", "[", "\"main_question_str\"", "]", "}", "\n", "if", "\"sub_question_str\"", "in", "sample_info", ":", "\n", "                ", "text_processor_argument_sq", "=", "{", "\"text\"", ":", "sample_info", "[", "\"sub_question_str\"", "]", "}", "\n", "", "if", "\"other_question_str\"", "in", "sample_info", ":", "\n", "                ", "text_processor_argument_oq", "=", "{", "\"text\"", ":", "sample_info", "[", "\"other_question_str\"", "]", "}", "\n", "\n", "", "", "processed_question", "=", "self", ".", "text_processor", "(", "text_processor_argument", ")", "\n", "processed_question_sq", "=", "self", ".", "text_processor", "(", "text_processor_argument_sq", ")", "\n", "processed_question_oq", "=", "self", ".", "text_processor", "(", "text_processor_argument_oq", ")", "\n", "\n", "current_sample", ".", "text", "=", "processed_question", "[", "\"text\"", "]", "\n", "current_sample", ".", "text_sq", "=", "processed_question_sq", "[", "\"text\"", "]", "\n", "current_sample", ".", "text_oq", "=", "processed_question_oq", "[", "\"text\"", "]", "\n", "current_sample", ".", "question_text", "=", "sample_info", "[", "\"main_question_str\"", "]", "\n", "current_sample", ".", "reasoning_question", "=", "sample_info", "[", "\"main_question_str\"", "]", "\n", "current_sample", ".", "reasoning_answer", "=", "sample_info", "[", "\"main_answer_str\"", "]", "[", "0", "]", "\n", "#current_sample.image_url = sample_info[\"img_path\"]", "\n", "current_sample", ".", "image_url", "=", "sample_info", "[", "\"image_path\"", "]", "\n", "\n", "current_sample", ".", "sub_question", "=", "sample_info", "[", "\"sub_question_str\"", "]", "\n", "current_sample", ".", "other_question", "=", "sample_info", "[", "\"other_question_str\"", "]", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.dataset.CLEVRDataset.get_item": [[127, 150], ["pythia.common.sample.Sample", "pythia.utils.text_utils.tokenize", "dataset.CLEVRDataset.text_processor", "dataset.CLEVRDataset.answer_processor", "os.path.join", "numpy.true_divide", "image.astype.astype.astype", "torch.from_numpy", "PIL.Image.open().convert", "image.astype.astype.transpose", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.tokenize"], ["\n", "current_sample", ".", "question_id", "=", "torch", ".", "tensor", "(", "\n", "sample_info", "[", "\"question_id\"", "]", ",", "dtype", "=", "torch", ".", "int", "\n", ")", "\n", "\n", "if", "isinstance", "(", "sample_info", "[", "\"image_id\"", "]", ",", "int", ")", ":", "\n", "            ", "current_sample", ".", "image_id", "=", "torch", ".", "tensor", "(", "\n", "sample_info", "[", "\"image_id\"", "]", ",", "dtype", "=", "torch", ".", "int", "\n", ")", "\n", "", "else", ":", "\n", "            ", "current_sample", ".", "image_id", "=", "sample_info", "[", "\"image_id\"", "]", "\n", "\n", "", "current_sample", ".", "text_len", "=", "torch", ".", "tensor", "(", "\n", "#len(sample_info[\"question_tokens\"]), dtype=torch.int", "\n", "len", "(", "sample_info", "[", "\"main_question_tokens\"", "]", ")", ",", "dtype", "=", "torch", ".", "int", "\n", ")", "\n", "\n", "if", "self", ".", "_use_features", "is", "True", ":", "\n", "            ", "features", "=", "self", ".", "features_db", "[", "idx", "]", "\n", "current_sample", ".", "update", "(", "features", ")", "\n", "\n", "# Add details for OCR like OCR bbox, vectors, tokens here", "\n", "", "current_sample", "=", "self", ".", "add_ocr_details", "(", "sample_info", ",", "current_sample", ")", "\n", "# Depending on whether we are using soft copy this can add", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.builder.CLEVRBuilder.__init__": [[16, 20], ["pythia.tasks.base_dataset_builder.BaseDatasetBuilder.__init__", "pythia.common.registry.registry.get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["\n", "\n", "@", "registry", ".", "register_builder", "(", "\"vqa2\"", ")", "\n", "class", "VQA2Builder", "(", "BaseDatasetBuilder", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.builder.CLEVRBuilder._build": [[21, 46], ["os.path.join", "os.path.join", "os.path.join", "os.path.exists", "builder.CLEVRBuilder.writer.write", "pythia.utils.general.download_file", "builder.CLEVRBuilder.writer.write", "pythia.utils.general.get_pythia_root", "pythia.common.constants.CLEVR_DOWNLOAD_URL.split", "builder.CLEVRBuilder.writer.write", "os.path.exists", "zipfile.ZipFile", "zip_ref.extractall", "len", "file_name.split", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.download_file", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["        ", "super", "(", ")", ".", "__init__", "(", "\"vqa2\"", ")", "\n", "self", ".", "dataset_class", "=", "VQA2Dataset", "\n", "\n", "", "def", "_load", "(", "self", ",", "dataset_type", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n", "image_features", "=", "config", "[", "\"image_features\"", "]", "[", "\"train\"", "]", "[", "0", "]", ".", "split", "(", "\",\"", ")", "\n", "self", ".", "num_image_features", "=", "len", "(", "image_features", ")", "\n", "\n", "registry", ".", "register", "(", "\"num_image_features\"", ",", "self", ".", "num_image_features", ")", "\n", "\n", "self", ".", "dataset", "=", "self", ".", "prepare_data_set", "(", "dataset_type", ",", "config", ")", "\n", "\n", "return", "self", ".", "dataset", "\n", "\n", "", "def", "_build", "(", "self", ",", "dataset_type", ",", "config", ")", ":", "\n", "# TODO: Build actually here", "\n", "        ", "return", "\n", "\n", "", "def", "update_registry_for_model", "(", "self", ",", "config", ")", ":", "\n", "        ", "registry", ".", "register", "(", "\n", "self", ".", "dataset_name", "+", "\"_text_vocab_size\"", ",", "\n", "self", ".", "dataset", ".", "text_processor", ".", "get_vocab_size", "(", ")", ",", "\n", ")", "\n", "registry", ".", "register", "(", "\n", "self", ".", "dataset_name", "+", "\"_num_final_outputs\"", ",", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.builder.CLEVRBuilder._load": [[48, 53], ["pythia.tasks.vqa.clevr.dataset.CLEVRDataset"], "methods", ["None"], [")", "\n", "\n", "", "def", "init_args", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument_group", "(", "\"VQA2 task specific arguments\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data_root_dir\"", ",", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.clevr.builder.CLEVRBuilder.update_registry_for_model": [[54, 62], ["pythia.common.registry.registry.register", "pythia.common.registry.registry.register", "builder.CLEVRBuilder.dataset.text_processor.get_vocab_size", "builder.CLEVRBuilder.dataset.answer_processor.get_vocab_size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_vocab_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_vocab_size"], ["type", "=", "str", ",", "\n", "default", "=", "\"../data\"", ",", "\n", "help", "=", "\"Root directory for data\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-nfr\"", ",", "\n", "\"--fast_read\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset.__init__": [[16, 34], ["pythia.tasks.vqa.vqa2.VQA2Dataset.__init__", "dataset.VisualGenomeDataset._get_absolute_path", "pythia.tasks.scene_graph_database.SceneGraphDatabase"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset._get_absolute_path"], ["class", "VQA2Dataset", "(", "BaseDataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dataset_type", ",", "imdb_file_index", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"vqa2\"", ",", "dataset_type", ",", "config", ")", "\n", "imdb_files", "=", "self", ".", "config", ".", "imdb_files", "\n", "#pdb.set_trace()", "\n", "if", "dataset_type", "not", "in", "imdb_files", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Dataset type {} is not present in \"", "\n", "\"imdb_files of dataset config\"", ".", "format", "(", "dataset_type", ")", "\n", ")", "\n", "\n", "", "self", ".", "imdb_file", "=", "imdb_files", "[", "dataset_type", "]", "[", "imdb_file_index", "]", "\n", "self", ".", "imdb_file", "=", "self", ".", "_get_absolute_path", "(", "self", ".", "imdb_file", ")", "\n", "self", ".", "imdb", "=", "ImageDatabase", "(", "self", ".", "imdb_file", ")", "\n", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "image_depth_first", "=", "self", ".", "config", ".", "image_depth_first", "\n", "self", ".", "_should_fast_read", "=", "self", ".", "config", ".", "fast_read", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset.load_item": [[35, 72], ["dataset.VisualGenomeDataset._preprocess_answer", "pythia.common.sample.Sample", "dataset.VisualGenomeDataset.text_processor", "torch.tensor", "isinstance", "torch.tensor", "dataset.VisualGenomeDataset.add_ocr_details", "dataset.VisualGenomeDataset.add_answer_info", "dataset.VisualGenomeDataset._load_scene_graph", "torch.tensor", "len", "dataset.VisualGenomeDataset.update"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._preprocess_answer", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.add_ocr_details", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.dataset.VQAIntrospectDataset.add_answer_info", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._load_scene_graph", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update"], ["self", ".", "use_ocr", "=", "self", ".", "config", ".", "use_ocr", "\n", "self", ".", "use_ocr_info", "=", "self", ".", "config", ".", "use_ocr_info", "\n", "\n", "self", ".", "_use_features", "=", "False", "\n", "if", "hasattr", "(", "self", ".", "config", ",", "\"image_features\"", ")", ":", "\n", "            ", "self", ".", "_use_features", "=", "True", "\n", "self", ".", "features_max_len", "=", "self", ".", "config", ".", "features_max_len", "\n", "self", ".", "_return_info", "=", "self", ".", "config", ".", "get", "(", "\"return_info\"", ",", "True", ")", "\n", "\n", "all_image_feature_dirs", "=", "self", ".", "config", ".", "image_features", "[", "dataset_type", "]", "\n", "curr_image_features_dir", "=", "all_image_feature_dirs", "[", "imdb_file_index", "]", "\n", "curr_image_features_dir", "=", "curr_image_features_dir", ".", "split", "(", "\",\"", ")", "\n", "curr_image_features_dir", "=", "self", ".", "_get_absolute_path", "(", "curr_image_features_dir", ")", "\n", "\n", "self", ".", "features_db", "=", "FeaturesDataset", "(", "\n", "\"coco\"", ",", "\n", "directories", "=", "curr_image_features_dir", ",", "\n", "depth_first", "=", "self", ".", "image_depth_first", ",", "\n", "max_features", "=", "self", ".", "features_max_len", ",", "\n", "fast_read", "=", "self", ".", "_should_fast_read", ",", "\n", "imdb", "=", "self", ".", "imdb", ",", "\n", "return_info", "=", "self", ".", "_return_info", ",", "\n", ")", "\n", "\n", "", "", "def", "_get_absolute_path", "(", "self", ",", "paths", ")", ":", "\n", "        ", "if", "isinstance", "(", "paths", ",", "list", ")", ":", "\n", "            ", "return", "[", "self", ".", "_get_absolute_path", "(", "path", ")", "for", "path", "in", "paths", "]", "\n", "", "elif", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isabs", "(", "paths", ")", ":", "\n", "                ", "pythia_root", "=", "get_pythia_root", "(", ")", "\n", "paths", "=", "os", ".", "path", ".", "join", "(", "pythia_root", ",", "self", ".", "config", ".", "data_root_dir", ",", "paths", ")", "\n", "", "return", "paths", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Paths passed to dataset should either be \"", "\"string or list\"", "\n", ")", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._get_image_id": [[73, 75], ["None"], "methods", ["None"], ["        ", "return", "len", "(", "self", ".", "imdb", ")", "\n", "\n", "", "def", "try_fast_read", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._get_image_info": [[76, 79], ["copy.deepcopy", "dataset.VisualGenomeDataset._get_image_id"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._get_image_id"], ["# Don't fast read in case of test set.", "\n", "        ", "if", "self", ".", "_dataset_type", "==", "\"test\"", ":", "\n", "            ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._preprocess_answer": [[80, 86], ["dataset.VisualGenomeDataset.vg_answer_preprocessor"], "methods", ["None"], ["", "if", "hasattr", "(", "self", ",", "\"_should_fast_read\"", ")", "and", "self", ".", "_should_fast_read", "is", "True", ":", "\n", "            ", "self", ".", "writer", ".", "write", "(", "\n", "\"Starting to fast read {} {} dataset\"", ".", "format", "(", "\n", "self", ".", "_name", ",", "self", ".", "_dataset_type", "\n", ")", "\n", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._load_scene_graph": [[87, 110], ["dataset.VisualGenomeDataset._get_image_info", "dataset.VisualGenomeDataset._load_objects", "dataset.VisualGenomeDataset._load_relationships", "dataset.VisualGenomeDataset._load_regions"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._get_image_info", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._load_objects", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._load_relationships", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._load_regions"], ["for", "idx", "in", "tqdm", ".", "tqdm", "(", "\n", "range", "(", "len", "(", "self", ".", "imdb", ")", ")", ",", "miniters", "=", "100", ",", "disable", "=", "not", "is_main_process", "(", ")", "\n", ")", ":", "\n", "                ", "self", ".", "cache", "[", "idx", "]", "=", "self", ".", "load_item", "(", "idx", ")", "\n", "\n", "", "", "", "def", "get_item", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "_should_fast_read", "is", "True", "and", "self", ".", "_dataset_type", "!=", "\"test\"", ":", "\n", "            ", "return", "self", ".", "cache", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "load_item", "(", "idx", ")", "\n", "\n", "", "", "def", "load_item", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample_info", "=", "self", ".", "imdb", "[", "idx", "]", "\n", "current_sample", "=", "Sample", "(", ")", "\n", "\n", "if", "\"question_tokens\"", "in", "sample_info", ":", "\n", "            ", "text_processor_argument", "=", "{", "\"tokens\"", ":", "sample_info", "[", "\"question_tokens\"", "]", "}", "\n", "", "else", ":", "\n", "#text_processor_argument = {\"text\": sample_info[\"question\"]}", "\n", "            ", "text_processor_argument", "=", "{", "\"text\"", ":", "sample_info", "[", "\"main_question_str\"", "]", "}", "\n", "if", "\"sub_question_str\"", "in", "sample_info", ":", "\n", "                ", "text_processor_argument_sq", "=", "{", "\"text\"", ":", "sample_info", "[", "\"sub_question_str\"", "]", "}", "\n", "", "if", "\"other_question_str\"", "in", "sample_info", ":", "\n", "                ", "text_processor_argument_oq", "=", "{", "\"text\"", ":", "sample_info", "[", "\"other_question_str\"", "]", "}", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._load_objects": [[111, 136], ["dataset.VisualGenomeDataset._get_image_info", "pythia.common.sample.SampleList", "pythia.common.sample.Sample.pop", "pythia.common.sample.Sample.pop", "pythia.common.sample.Sample", "pythia.common.sample.SampleList.append", "dataset.VisualGenomeDataset.synset_processor", "dataset.VisualGenomeDataset.name_processor", "dataset.VisualGenomeDataset.attribute_processor"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._get_image_info"], ["\n", "", "", "processed_question", "=", "self", ".", "text_processor", "(", "text_processor_argument", ")", "\n", "processed_question_sq", "=", "self", ".", "text_processor", "(", "text_processor_argument_sq", ")", "\n", "processed_question_oq", "=", "self", ".", "text_processor", "(", "text_processor_argument_oq", ")", "\n", "\n", "current_sample", ".", "text", "=", "processed_question", "[", "\"text\"", "]", "\n", "current_sample", ".", "text_sq", "=", "processed_question_sq", "[", "\"text\"", "]", "\n", "current_sample", ".", "text_oq", "=", "processed_question_oq", "[", "\"text\"", "]", "\n", "current_sample", ".", "question_text", "=", "sample_info", "[", "\"main_question_str\"", "]", "\n", "current_sample", ".", "reasoning_question", "=", "sample_info", "[", "\"main_question_str\"", "]", "\n", "current_sample", ".", "reasoning_answer", "=", "sample_info", "[", "\"main_answer_str\"", "]", "[", "0", "]", "\n", "#current_sample.image_url = sample_info[\"img_path\"]", "\n", "current_sample", ".", "image_url", "=", "sample_info", "[", "\"image_path\"", "]", "\n", "\n", "current_sample", ".", "sub_question", "=", "sample_info", "[", "\"sub_question_str\"", "]", "\n", "current_sample", ".", "other_question", "=", "sample_info", "[", "\"other_question_str\"", "]", "\n", "\n", "current_sample", ".", "question_id", "=", "torch", ".", "tensor", "(", "\n", "sample_info", "[", "\"question_id\"", "]", ",", "dtype", "=", "torch", ".", "int", "\n", ")", "\n", "\n", "if", "isinstance", "(", "sample_info", "[", "\"image_id\"", "]", ",", "int", ")", ":", "\n", "            ", "current_sample", ".", "image_id", "=", "torch", ".", "tensor", "(", "\n", "sample_info", "[", "\"image_id\"", "]", ",", "dtype", "=", "torch", ".", "int", "\n", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._load_relationships": [[137, 161], ["dataset.VisualGenomeDataset._get_image_info", "pythia.common.sample.SampleList", "pythia.common.sample.Sample", "pythia.common.sample.SampleList.append", "dataset.VisualGenomeDataset.synset_processor", "dataset.VisualGenomeDataset.predicate_processor"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._get_image_info"], ["            ", "current_sample", ".", "image_id", "=", "sample_info", "[", "\"image_id\"", "]", "\n", "\n", "", "current_sample", ".", "text_len", "=", "torch", ".", "tensor", "(", "\n", "#len(sample_info[\"question_tokens\"]), dtype=torch.int", "\n", "len", "(", "sample_info", "[", "\"main_question_tokens\"", "]", ")", ",", "dtype", "=", "torch", ".", "int", "\n", ")", "\n", "\n", "if", "self", ".", "_use_features", "is", "True", ":", "\n", "            ", "features", "=", "self", ".", "features_db", "[", "idx", "]", "\n", "current_sample", ".", "update", "(", "features", ")", "\n", "\n", "# Add details for OCR like OCR bbox, vectors, tokens here", "\n", "", "current_sample", "=", "self", ".", "add_ocr_details", "(", "sample_info", ",", "current_sample", ")", "\n", "# Depending on whether we are using soft copy this can add", "\n", "# dynamic answer space", "\n", "current_sample", "=", "self", ".", "add_answer_info", "(", "sample_info", ",", "current_sample", ")", "\n", "#print(\"current sample : {}\".format(current_sample))", "\n", "#pdb.set_trace()", "\n", "#print(\"Current sample : {}\".format(current_sample))", "\n", "\n", "return", "current_sample", "\n", "\n", "", "def", "add_ocr_details", "(", "self", ",", "sample_info", ",", "sample", ")", ":", "\n", "        ", "if", "self", ".", "use_ocr", ":", "\n", "# Preprocess OCR tokens", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._load_regions": [[162, 207], ["dataset.VisualGenomeDataset._get_image_info", "pythia.common.sample.SampleList", "pythia.common.sample.Sample", "pythia.common.sample.SampleList.append", "relationships.append", "objects.append", "dataset.VisualGenomeDataset.text_processor", "dataset.VisualGenomeDataset.name_processor", "dataset.VisualGenomeDataset.synset_processor"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.dataset.VisualGenomeDataset._get_image_info"], ["            ", "ocr_tokens", "=", "[", "\n", "self", ".", "ocr_token_processor", "(", "{", "\"text\"", ":", "token", "}", ")", "[", "\"text\"", "]", "\n", "for", "token", "in", "sample_info", "[", "\"ocr_tokens\"", "]", "\n", "]", "\n", "# Get embeddings for tokens", "\n", "context", "=", "self", ".", "context_processor", "(", "{", "\"tokens\"", ":", "ocr_tokens", "}", ")", "\n", "sample", ".", "context", "=", "context", "[", "\"text\"", "]", "\n", "sample", ".", "context_tokens", "=", "context", "[", "\"tokens\"", "]", "\n", "sample", ".", "context_feature_0", "=", "context", "[", "\"text\"", "]", "\n", "sample", ".", "context_info_0", "=", "Sample", "(", ")", "\n", "sample", ".", "context_info_0", ".", "max_features", "=", "context", "[", "\"length\"", "]", "\n", "\n", "order_vectors", "=", "torch", ".", "eye", "(", "len", "(", "sample", ".", "context_tokens", ")", ")", "\n", "order_vectors", "[", "context", "[", "\"length\"", "]", ":", "]", "=", "0", "\n", "sample", ".", "order_vectors", "=", "order_vectors", "\n", "\n", "", "if", "self", ".", "use_ocr_info", "and", "\"ocr_info\"", "in", "sample_info", ":", "\n", "            ", "sample", ".", "ocr_bbox", "=", "self", ".", "bbox_processor", "(", "{", "\"info\"", ":", "sample_info", "[", "\"ocr_info\"", "]", "}", ")", "[", "\n", "\"bbox\"", "\n", "]", "\n", "\n", "", "return", "sample", "\n", "\n", "", "def", "add_answer_info", "(", "self", ",", "sample_info", ",", "sample", ")", ":", "\n", "        ", "if", "\"answers\"", "in", "sample_info", ":", "\n", "            ", "answers", "=", "sample_info", "[", "\"answers\"", "]", "\n", "answer_processor_arg", "=", "{", "\"answers\"", ":", "answers", "}", "\n", "\n", "if", "self", ".", "use_ocr", ":", "\n", "                ", "answer_processor_arg", "[", "\"tokens\"", "]", "=", "sample_info", "[", "\"ocr_tokens\"", "]", "\n", "", "processed_soft_copy_answers", "=", "self", ".", "answer_processor", "(", "answer_processor_arg", ")", "\n", "sample", ".", "answers", "=", "processed_soft_copy_answers", "[", "\"answers\"", "]", "\n", "sample", ".", "targets", "=", "processed_soft_copy_answers", "[", "\"answers_scores\"", "]", "\n", "sample", ".", "gt_answer_index", "=", "processed_soft_copy_answers", "[", "\"answers_indices\"", "]", "[", "0", "]", "\n", "\n", "", "if", "\"answers_sq\"", "in", "sample_info", ":", "\n", "            ", "answers", "=", "sample_info", "[", "\"answers_sq\"", "]", "\n", "answer_processor_arg", "=", "{", "\"answers\"", ":", "answers", "}", "\n", "\n", "if", "self", ".", "use_ocr", ":", "\n", "                ", "answer_processor_arg", "[", "\"tokens\"", "]", "=", "sample_info", "[", "\"ocr_tokens\"", "]", "\n", "", "processed_soft_copy_answers", "=", "self", ".", "answer_processor", "(", "answer_processor_arg", ")", "\n", "sample", ".", "answers_sq", "=", "processed_soft_copy_answers", "[", "\"answers\"", "]", "\n", "sample", ".", "targets_sq", "=", "processed_soft_copy_answers", "[", "\"answers_scores\"", "]", "\n", "sample", ".", "gt_answer_index_sq", "=", "processed_soft_copy_answers", "[", "\"answers_indices\"", "]", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.builder.VisualGenomeBuilder.__init__": [[14, 19], ["pythia.tasks.vqa.vqa2.builder.VQA2Builder.__init__", "pythia.common.registry.registry.get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["from", "pythia", ".", "tasks", ".", "concat_dataset", "import", "PythiaConcatDataset", "\n", "from", "pythia", ".", "tasks", ".", "vqa", ".", "vqa2", ".", "dataset", "import", "VQA2Dataset", "\n", "\n", "\n", "@", "registry", ".", "register_builder", "(", "\"vqa2\"", ")", "\n", "class", "VQA2Builder", "(", "BaseDatasetBuilder", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.builder.VisualGenomeBuilder._build": [[20, 32], ["os.path.join", "builder.VisualGenomeBuilder._download_and_extract_imdb", "builder.VisualGenomeBuilder._download_and_extract_features", "pythia.utils.general.get_pythia_root"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.builder.VisualGenomeBuilder._download_and_extract_imdb", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.builder.VisualGenomeBuilder._download_and_extract_features", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.get_pythia_root"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"vqa2\"", ")", "\n", "self", ".", "dataset_class", "=", "VQA2Dataset", "\n", "\n", "", "def", "_load", "(", "self", ",", "dataset_type", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n", "image_features", "=", "config", "[", "\"image_features\"", "]", "[", "\"train\"", "]", "[", "0", "]", ".", "split", "(", "\",\"", ")", "\n", "self", ".", "num_image_features", "=", "len", "(", "image_features", ")", "\n", "\n", "registry", ".", "register", "(", "\"num_image_features\"", ",", "self", ".", "num_image_features", ")", "\n", "\n", "self", ".", "dataset", "=", "self", ".", "prepare_data_set", "(", "dataset_type", ",", "config", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.builder.VisualGenomeBuilder._download_and_extract_imdb": [[33, 45], ["os.path.join", "os.path.join", "os.path.join", "os.makedirs", "builder.VisualGenomeBuilder._download_and_extract", "os.path.exists", "shutil.move", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.builder.VisualGenomeBuilder._download_and_extract"], ["\n", "return", "self", ".", "dataset", "\n", "\n", "", "def", "_build", "(", "self", ",", "dataset_type", ",", "config", ")", ":", "\n", "# TODO: Build actually here", "\n", "        ", "return", "\n", "\n", "", "def", "update_registry_for_model", "(", "self", ",", "config", ")", ":", "\n", "        ", "registry", ".", "register", "(", "\n", "self", ".", "dataset_name", "+", "\"_text_vocab_size\"", ",", "\n", "self", ".", "dataset", ".", "text_processor", ".", "get_vocab_size", "(", ")", ",", "\n", ")", "\n", "registry", ".", "register", "(", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.builder.VisualGenomeBuilder._download_and_extract_features": [[47, 49], ["builder.VisualGenomeBuilder._download_and_extract"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.builder.VisualGenomeBuilder._download_and_extract"], ["self", ".", "dataset", ".", "answer_processor", ".", "get_vocab_size", "(", ")", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visual_genome.builder.VisualGenomeBuilder._download_and_extract": [[50, 74], ["os.makedirs", "os.path.join", "os.path.join", "builder.VisualGenomeBuilder.writer.write", "pythia.utils.general.download_file", "builder.VisualGenomeBuilder.writer.write", "pythia.utils.general.extract_file", "key.split", "VISUAL_GENOME_CONSTS[].split", "os.path.exists", "builder.VisualGenomeBuilder.writer.write", "os.path.join.split", "os.path.exists", "len", "os.listdir"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.download_file", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.extract_file", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "def", "init_args", "(", "self", ",", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument_group", "(", "\"VQA2 task specific arguments\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--data_root_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"../data\"", ",", "\n", "help", "=", "\"Root directory for data\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-nfr\"", ",", "\n", "\"--fast_read\"", ",", "\n", "type", "=", "bool", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "\"Disable fast read and load features on fly\"", ",", "\n", ")", "\n", "\n", "", "def", "set_dataset_class", "(", "self", ",", "cls", ")", ":", "\n", "        ", "self", ".", "dataset_class", "=", "cls", "\n", "\n", "", "def", "prepare_data_set", "(", "self", ",", "dataset_type", ",", "config", ")", ":", "\n", "        ", "if", "dataset_type", "not", "in", "config", ".", "imdb_files", ":", "\n", "            ", "warnings", ".", "warn", "(", "\n", "\"Dataset type {} is not present in \"", "\n", "\"imdb_files of dataset config. Returning None. \"", "\n", "\"This dataset won't be used.\"", ".", "format", "(", "dataset_type", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.captioning.captioning_task.CaptioningTask.__init__": [[8, 10], ["pythia.tasks.BaseTask.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CaptioningTask", ",", "self", ")", ".", "__init__", "(", "\"captioning\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.captioning.captioning_task.CaptioningTask._get_available_datasets": [[11, 13], ["None"], "methods", ["None"], ["", "def", "_get_available_datasets", "(", "self", ")", ":", "\n", "        ", "return", "[", "\"coco\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.captioning.captioning_task.CaptioningTask._preprocess_item": [[14, 16], ["None"], "methods", ["None"], ["", "def", "_preprocess_item", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "item", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.dataset.COCODataset.__init__": [[9, 12], ["pythia.tasks.vqa.vqa2.VQA2Dataset.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["from", "pythia", ".", "tasks", ".", "base_dataset", "import", "BaseDataset", "\n", "from", "pythia", ".", "tasks", ".", "features_dataset", "import", "FeaturesDataset", "\n", "from", "pythia", ".", "tasks", ".", "image_database", "import", "ImageDatabase", "\n", "from", "pythia", ".", "utils", ".", "distributed_utils", "import", "is_main_process", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.dataset.COCODataset.load_item": [[13, 43], ["pythia.common.sample.Sample", "isinstance", "dataset.COCODataset.add_reference_caption", "dataset.COCODataset.text_processor", "torch.tensor", "torch.tensor", "torch.tensor", "dataset.COCODataset.update", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.dataset.COCODataset.add_reference_caption", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update"], ["from", "pythia", ".", "utils", ".", "general", "import", "get_pythia_root", "\n", "\n", "\n", "class", "VQA2Dataset", "(", "BaseDataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dataset_type", ",", "imdb_file_index", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"vqa2\"", ",", "dataset_type", ",", "config", ")", "\n", "imdb_files", "=", "self", ".", "config", ".", "imdb_files", "\n", "#pdb.set_trace()", "\n", "if", "dataset_type", "not", "in", "imdb_files", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Dataset type {} is not present in \"", "\n", "\"imdb_files of dataset config\"", ".", "format", "(", "dataset_type", ")", "\n", ")", "\n", "\n", "", "self", ".", "imdb_file", "=", "imdb_files", "[", "dataset_type", "]", "[", "imdb_file_index", "]", "\n", "self", ".", "imdb_file", "=", "self", ".", "_get_absolute_path", "(", "self", ".", "imdb_file", ")", "\n", "self", ".", "imdb", "=", "ImageDatabase", "(", "self", ".", "imdb_file", ")", "\n", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "image_depth_first", "=", "self", ".", "config", ".", "image_depth_first", "\n", "self", ".", "_should_fast_read", "=", "self", ".", "config", ".", "fast_read", "\n", "\n", "self", ".", "use_ocr", "=", "self", ".", "config", ".", "use_ocr", "\n", "self", ".", "use_ocr_info", "=", "self", ".", "config", ".", "use_ocr_info", "\n", "\n", "self", ".", "_use_features", "=", "False", "\n", "if", "hasattr", "(", "self", ".", "config", ",", "\"image_features\"", ")", ":", "\n", "            ", "self", ".", "_use_features", "=", "True", "\n", "self", ".", "features_max_len", "=", "self", ".", "config", ".", "features_max_len", "\n", "self", ".", "_return_info", "=", "self", ".", "config", ".", "get", "(", "\"return_info\"", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.dataset.COCODataset.add_reference_caption": [[44, 55], ["dataset.COCODataset.text_processor", "reference_list.append", "torch.stack"], "methods", ["None"], ["all_image_feature_dirs", "=", "self", ".", "config", ".", "image_features", "[", "dataset_type", "]", "\n", "curr_image_features_dir", "=", "all_image_feature_dirs", "[", "imdb_file_index", "]", "\n", "curr_image_features_dir", "=", "curr_image_features_dir", ".", "split", "(", "\",\"", ")", "\n", "curr_image_features_dir", "=", "self", ".", "_get_absolute_path", "(", "curr_image_features_dir", ")", "\n", "\n", "self", ".", "features_db", "=", "FeaturesDataset", "(", "\n", "\"coco\"", ",", "\n", "directories", "=", "curr_image_features_dir", ",", "\n", "depth_first", "=", "self", ".", "image_depth_first", ",", "\n", "max_features", "=", "self", ".", "features_max_len", ",", "\n", "fast_read", "=", "self", ".", "_should_fast_read", ",", "\n", "imdb", "=", "self", ".", "imdb", ",", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.dataset.COCODataset.format_for_evalai": [[56, 64], ["report.captions.tolist", "enumerate", "predictions.append", "dataset.COCODataset.caption_processor", "image_id.item"], "methods", ["None"], ["return_info", "=", "self", ".", "_return_info", ",", "\n", ")", "\n", "\n", "", "", "def", "_get_absolute_path", "(", "self", ",", "paths", ")", ":", "\n", "        ", "if", "isinstance", "(", "paths", ",", "list", ")", ":", "\n", "            ", "return", "[", "self", ".", "_get_absolute_path", "(", "path", ")", "for", "path", "in", "paths", "]", "\n", "", "elif", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isabs", "(", "paths", ")", ":", "\n", "                ", "pythia_root", "=", "get_pythia_root", "(", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.builder.COCOBuilder.__init__": [[16, 20], ["pythia.tasks.vqa.vqa2.VQA2Builder.__init__", "builder.COCOBuilder.set_dataset_class"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_introspect.builder.VQAIntrospectBuilder.set_dataset_class"], ["\n", "\n", "@", "registry", ".", "register_builder", "(", "\"vqa2\"", ")", "\n", "class", "VQA2Builder", "(", "BaseDatasetBuilder", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.builder.COCOBuilder.update_registry_for_model": [[21, 25], ["pythia.common.registry.registry.register", "builder.COCOBuilder.dataset.text_processor.get_vocab_size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.processors.SoftCopyAnswerProcessor.get_vocab_size"], ["        ", "super", "(", ")", ".", "__init__", "(", "\"vqa2\"", ")", "\n", "self", ".", "dataset_class", "=", "VQA2Dataset", "\n", "\n", "", "def", "_load", "(", "self", ",", "dataset_type", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.COCOEvalCap.__init__": [[25, 31], ["builtins.dict", "builtins.dict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "img_ids", ",", "coco", ",", "coco_res", ")", ":", "\n", "        ", "self", ".", "eval_imgs", "=", "[", "]", "\n", "self", ".", "eval", "=", "dict", "(", ")", "\n", "self", ".", "img_to_eval", "=", "dict", "(", ")", "\n", "self", ".", "coco", "=", "coco", "\n", "self", ".", "coco_res", "=", "coco_res", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.COCOEvalCap.evaluate": [[32, 72], ["print", "pycocoevalcap.tokenizer.ptbtokenizer.PTBTokenizer", "pycocoevalcap.tokenizer.ptbtokenizer.PTBTokenizer.tokenize", "pycocoevalcap.tokenizer.ptbtokenizer.PTBTokenizer.tokenize", "print", "coco_caption_eval.COCOEvalCap.set_eval_imgs", "print", "scorer.compute_score", "pycocoevalcap.bleu.bleu.Bleu", "pycocoevalcap.meteor.meteor.Meteor", "pycocoevalcap.rouge.rouge.Rouge", "pycocoevalcap.cider.cider.Cider", "pycocoevalcap.spice.spice.Spice", "type", "zip", "coco_caption_eval.COCOEvalCap.set_eval", "coco_caption_eval.COCOEvalCap.set_img_to_eval_imgs", "print", "scorer.method", "coco_caption_eval.COCOEvalCap.set_eval", "coco_caption_eval.COCOEvalCap.set_img_to_eval_imgs", "print", "pycocoevalcap.tokenizer.ptbtokenizer.PTBTokenizer.tokenize.keys", "pycocoevalcap.tokenizer.ptbtokenizer.PTBTokenizer.tokenize.keys"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.tokenize", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.tokenize", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.COCOEvalCap.set_eval_imgs", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.COCOEvalCap.set_eval", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.COCOEvalCap.set_img_to_eval_imgs", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.COCOEvalCap.set_eval", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.COCOEvalCap.set_img_to_eval_imgs", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "gts", "=", "self", ".", "coco", "\n", "res", "=", "self", ".", "coco_res", "\n", "\n", "# =================================================", "\n", "# Set up scorers", "\n", "# =================================================", "\n", "print", "(", "\"tokenization...\"", ")", "\n", "tokenizer", "=", "PTBTokenizer", "(", ")", "\n", "gts", "=", "tokenizer", ".", "tokenize", "(", "gts", ")", "\n", "res", "=", "tokenizer", ".", "tokenize", "(", "res", ")", "\n", "\n", "# =================================================", "\n", "# Set up scorers", "\n", "# =================================================", "\n", "print", "(", "\"setting up scorers...\"", ")", "\n", "scorers", "=", "[", "\n", "(", "Bleu", "(", "4", ")", ",", "[", "\"Bleu_1\"", ",", "\"Bleu_2\"", ",", "\"Bleu_3\"", ",", "\"Bleu_4\"", "]", ")", ",", "\n", "(", "Meteor", "(", ")", ",", "\"METEOR\"", ")", ",", "\n", "(", "Rouge", "(", ")", ",", "\"ROUGE_L\"", ")", ",", "\n", "(", "Cider", "(", ")", ",", "\"CIDEr\"", ")", ",", "\n", "(", "Spice", "(", ")", ",", "\"SPICE\"", ")", ",", "\n", "]", "\n", "\n", "# =================================================", "\n", "# Compute scores", "\n", "# =================================================", "\n", "for", "scorer", ",", "method", "in", "scorers", ":", "\n", "            ", "print", "(", "\"computing %s score...\"", "%", "(", "scorer", ".", "method", "(", ")", ")", ")", "\n", "score", ",", "scores", "=", "scorer", ".", "compute_score", "(", "gts", ",", "res", ")", "\n", "if", "type", "(", "method", ")", "==", "list", ":", "\n", "                ", "for", "sc", ",", "scs", ",", "m", "in", "zip", "(", "score", ",", "scores", ",", "method", ")", ":", "\n", "                    ", "self", ".", "set_eval", "(", "sc", ",", "m", ")", "\n", "self", ".", "set_img_to_eval_imgs", "(", "scs", ",", "gts", ".", "keys", "(", ")", ",", "m", ")", "\n", "print", "(", "\"%s: %0.3f\"", "%", "(", "m", ",", "sc", ")", ")", "\n", "", "", "else", ":", "\n", "                ", "self", ".", "set_eval", "(", "score", ",", "method", ")", "\n", "self", ".", "set_img_to_eval_imgs", "(", "scores", ",", "gts", ".", "keys", "(", ")", ",", "method", ")", "\n", "print", "(", "\"%s: %0.3f\"", "%", "(", "method", ",", "score", ")", ")", "\n", "", "", "self", ".", "set_eval_imgs", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.COCOEvalCap.set_eval": [[73, 75], ["None"], "methods", ["None"], ["", "def", "set_eval", "(", "self", ",", "score", ",", "method", ")", ":", "\n", "        ", "self", ".", "eval", "[", "method", "]", "=", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.COCOEvalCap.set_img_to_eval_imgs": [[76, 82], ["zip", "builtins.dict"], "methods", ["None"], ["", "def", "set_img_to_eval_imgs", "(", "self", ",", "scores", ",", "img_ids", ",", "method", ")", ":", "\n", "        ", "for", "img_id", ",", "score", "in", "zip", "(", "img_ids", ",", "scores", ")", ":", "\n", "            ", "if", "img_id", "not", "in", "self", ".", "img_to_eval", ":", "\n", "                ", "self", ".", "img_to_eval", "[", "img_id", "]", "=", "dict", "(", ")", "\n", "self", ".", "img_to_eval", "[", "img_id", "]", "[", "\"image_id\"", "]", "=", "img_id", "\n", "", "self", ".", "img_to_eval", "[", "img_id", "]", "[", "method", "]", "=", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.COCOEvalCap.set_eval_imgs": [[83, 85], ["coco_caption_eval.COCOEvalCap.img_to_eval.items"], "methods", ["None"], ["", "", "def", "set_eval_imgs", "(", "self", ")", ":", "\n", "        ", "self", ".", "eval_imgs", "=", "[", "eval", "for", "img_id", ",", "eval", "in", "self", ".", "img_to_eval", ".", "items", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.calculate_metrics": [[87, 99], ["coco_caption_eval.COCOEvalCap", "coco_caption_eval.COCOEvalCap.evaluate"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.coco_caption_eval.COCOEvalCap.evaluate"], ["", "", "def", "calculate_metrics", "(", "img_ids", ",", "dataset_gts", ",", "dataset_res", ")", ":", "\n", "    ", "img_to_anns_gts", "=", "{", "id", ":", "[", "]", "for", "id", "in", "img_ids", "}", "\n", "for", "ann", "in", "dataset_gts", "[", "\"annotations\"", "]", ":", "\n", "        ", "img_to_anns_gts", "[", "ann", "[", "\"image_id\"", "]", "]", "+=", "[", "ann", "]", "\n", "\n", "", "img_to_anns_res", "=", "{", "id", ":", "[", "]", "for", "id", "in", "img_ids", "}", "\n", "for", "ann", "in", "dataset_res", "[", "\"annotations\"", "]", ":", "\n", "        ", "img_to_anns_res", "[", "ann", "[", "\"image_id\"", "]", "]", "+=", "[", "ann", "]", "\n", "\n", "", "eval_obj", "=", "COCOEvalCap", "(", "img_ids", ",", "img_to_anns_gts", ",", "img_to_anns_res", ")", "\n", "eval_obj", ".", "evaluate", "(", ")", "\n", "return", "eval_obj", ".", "eval", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.original.VisualDialogTask.__init__": [[14, 17], ["pythia.tasks.vqa2.task.VQA2Task.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset_type", ")", ":", "\n", "        ", "super", "(", "VisualDialogTask", ",", "self", ")", ".", "__init__", "(", "dataset_type", ")", "\n", "self", ".", "task_name", "=", "\"VisualDialog\"", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.original.VisualDialogTask.prepare_data_set": [[18, 76], ["os.path.join", "zip", "original.VisualDialogConcatDataset", "len", "len", "os.path.join", "dataset.VisualDialogDataset", "datasets.append", "os.path.join", "image_feature_dir.split"], "methods", ["None"], ["", "def", "prepare_data_set", "(", "self", ",", "imdb_file_label", ",", "image_feature_dir_label", ",", "**", "data_config", ")", ":", "\n", "        ", "data_root_dir", "=", "data_config", "[", "\"data_root_dir\"", "]", "\n", "\n", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "data_root_dir", ",", "data_config", "[", "\"vocab_file\"", "]", ")", "\n", "embedding_name", "=", "data_config", "[", "\"embedding_name\"", "]", "\n", "max_seq_len", "=", "data_config", "[", "\"max_seq_len\"", "]", "\n", "max_history_len", "=", "data_config", "[", "\"max_history_len\"", "]", "\n", "image_depth_first", "=", "data_config", "[", "\"image_depth_first\"", "]", "\n", "image_fast_reader", "=", "data_config", "[", "\"image_fast_reader\"", "]", "\n", "\n", "if", "\"verbose\"", "in", "data_config", ":", "\n", "            ", "verbose", "=", "data_config", "[", "\"verbose\"", "]", "\n", "", "else", ":", "\n", "            ", "verbose", "=", "False", "\n", "\n", "", "if", "\"test_mode\"", "in", "data_config", ":", "\n", "            ", "test_mode", "=", "data_config", "[", "\"test_mode\"", "]", "\n", "", "else", ":", "\n", "            ", "test_mode", "=", "False", "\n", "\n", "", "if", "\"image_max_loc\"", "in", "data_config", ":", "\n", "            ", "image_max_loc", "=", "data_config", "[", "\"image_max_loc\"", "]", "\n", "", "else", ":", "\n", "            ", "image_max_loc", "=", "False", "\n", "\n", "", "imdb_files", "=", "data_config", "[", "imdb_file_label", "]", "\n", "image_feat_dirs", "=", "data_config", "[", "image_feature_dir_label", "]", "\n", "\n", "condition", "=", "len", "(", "imdb_files", ")", "==", "len", "(", "image_feat_dirs", ")", "\n", "error", "=", "imdb_file_label", "+", "\"length != \"", "+", "image_feature_dir_label", "\n", "error", "+=", "\"length\"", "\n", "assert", "condition", ",", "error", "\n", "\n", "datasets", "=", "[", "]", "\n", "\n", "for", "imdb_file", ",", "image_feature_dir", "in", "zip", "(", "imdb_files", ",", "image_feat_dirs", ")", ":", "\n", "            ", "imdb_file", "=", "os", ".", "path", ".", "join", "(", "data_root_dir", ",", "imdb_file", ")", "\n", "image_feat_dirs", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "data_root_dir", ",", "d", ")", "for", "d", "in", "image_feature_dir", ".", "split", "(", "\",\"", ")", "\n", "]", "\n", "args", "=", "{", "\n", "\"imdb_file\"", ":", "imdb_file", ",", "\n", "\"image_feat_directories\"", ":", "image_feat_dirs", ",", "\n", "\"max_seq_len\"", ":", "max_seq_len", ",", "\n", "\"max_history_len\"", ":", "max_history_len", ",", "\n", "\"vocab_file\"", ":", "vocab_file", ",", "\n", "\"image_depth_first\"", ":", "image_depth_first", ",", "\n", "\"fast_read\"", ":", "image_fast_reader", ",", "\n", "\"verbose\"", ":", "verbose", ",", "\n", "\"test_mode\"", ":", "test_mode", ",", "\n", "\"image_max_loc\"", ":", "image_max_loc", ",", "\n", "\"embedding_name\"", ":", "embedding_name", ",", "\n", "}", "\n", "\n", "train_dataset", "=", "VisualDialogDataset", "(", "**", "args", ")", "\n", "datasets", ".", "append", "(", "train_dataset", ")", "\n", "\n", "", "return", "VisualDialogConcatDataset", "(", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.original.VisualDialogTask.prepare_batch": [[77, 134], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "y.cuda.cuda.view", "questions.cuda.cuda.type", "histories.cuda.cuda.type", "answer_options.cuda.cuda.type", "questions.cuda.cuda.cuda", "histories.cuda.cuda.cuda", "answer_options.cuda.cuda.cuda", "input_image_features.cuda.cuda.cuda", "torch.autograd.Variable", "torch.autograd.Variable", "image_feature_variables.append", "y.cuda.cuda.type", "y.cuda.cuda.size", "y.cuda.cuda.cuda", "image_dim_variable.cuda.cuda.cuda", "str", "tmp_image_variable.cuda.cuda.cuda", "str"], "methods", ["None"], ["", "def", "prepare_batch", "(", "self", ",", "batch", ",", "use_cuda", ")", ":", "\n", "        ", "questions", "=", "batch", "[", "\"questions\"", "]", "\n", "input_image_features", "=", "batch", "[", "\"image_feat_batch\"", "]", "\n", "answer_options", "=", "batch", "[", "\"answer_options\"", "]", "\n", "histories", "=", "batch", "[", "\"histories\"", "]", "\n", "\n", "questions", "=", "Variable", "(", "questions", ".", "type", "(", "torch", ".", "LongTensor", ")", ")", "\n", "histories", "=", "Variable", "(", "histories", ".", "type", "(", "torch", ".", "LongTensor", ")", ")", "\n", "answer_options", "=", "Variable", "(", "answer_options", ".", "type", "(", "torch", ".", "LongTensor", ")", ")", "\n", "input_image_features", "=", "Variable", "(", "input_image_features", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "            ", "questions", "=", "questions", ".", "cuda", "(", ")", "\n", "histories", "=", "histories", ".", "cuda", "(", ")", "\n", "answer_options", "=", "answer_options", ".", "cuda", "(", ")", "\n", "input_image_features", "=", "input_image_features", ".", "cuda", "(", ")", "\n", "\n", "", "image_feature_variables", "=", "[", "input_image_features", "]", "\n", "image_dim_variable", "=", "None", "\n", "\n", "if", "\"image_dim\"", "in", "batch", ":", "\n", "            ", "image_dims", "=", "batch", "[", "\"image_dim\"", "]", "\n", "image_dim_variable", "=", "Variable", "(", "\n", "image_dims", ",", "requires_grad", "=", "False", ",", "volatile", "=", "False", "\n", ")", "\n", "\n", "if", "use_cuda", ":", "\n", "                ", "image_dim_variable", "=", "image_dim_variable", ".", "cuda", "(", ")", "\n", "\n", "# check if more than 1 image_feat_batch", "\n", "", "", "i", "=", "1", "\n", "image_feat_key", "=", "\"image_feat_batch_%s\"", "\n", "while", "image_feat_key", "%", "str", "(", "i", ")", "in", "batch", ":", "\n", "            ", "tmp_image_variable", "=", "Variable", "(", "batch", "[", "image_feat_key", "%", "str", "(", "i", ")", "]", ")", "\n", "if", "use_cuda", ":", "\n", "                ", "tmp_image_variable", "=", "tmp_image_variable", ".", "cuda", "(", ")", "\n", "", "image_feature_variables", ".", "append", "(", "tmp_image_variable", ")", "\n", "i", "+=", "1", "\n", "\n", "", "y", "=", "batch", "[", "\"expected\"", "]", "\n", "y", "=", "Variable", "(", "y", ".", "type", "(", "torch", ".", "FloatTensor", ")", ")", "\n", "y", "=", "y", ".", "view", "(", "-", "1", ",", "y", ".", "size", "(", "-", "1", ")", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "y", "=", "y", ".", "cuda", "(", ")", "\n", "\n", "", "out", "=", "{", "\n", "\"texts\"", ":", "questions", ",", "\n", "\"answer_options\"", ":", "answer_options", ",", "\n", "\"histories\"", ":", "histories", ",", "\n", "\"image_features\"", ":", "image_feature_variables", ",", "\n", "\"image_dims\"", ":", "image_dim_variable", ",", "\n", "\"texts_len\"", ":", "batch", "[", "\"questions_len\"", "]", ",", "\n", "\"answer_options_len\"", ":", "batch", "[", "\"answer_options_len\"", "]", ",", "\n", "\"histories_len\"", ":", "batch", "[", "\"histories_len\"", "]", ",", "\n", "}", "\n", "\n", "return", "out", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.original.VisualDialogTask.update_registry_for_model": [[135, 140], ["original.VisualDialogTask.dataset.vocab.get_size", "original.VisualDialogTask.dataset.vocab.get_size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_size"], ["", "def", "update_registry_for_model", "(", "self", ",", "config", ")", ":", "\n", "        ", "config", "[", "\"num_vocab_txt\"", "]", "=", "self", ".", "dataset", ".", "vocab", ".", "get_size", "(", ")", "\n", "config", "[", "\"vocab_size\"", "]", "=", "self", ".", "dataset", ".", "vocab", ".", "get_size", "(", ")", "\n", "config", "[", "\"num_image_features\"", "]", "=", "self", ".", "num_image_features", "\n", "config", "[", "\"embedding_vectors\"", "]", "=", "self", ".", "dataset", ".", "vocab", ".", "vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.original.VisualDialogTask.clean_config": [[141, 143], ["config.pop"], "methods", ["None"], ["", "def", "clean_config", "(", "self", ",", "config", ")", ":", "\n", "        ", "config", ".", "pop", "(", "\"embedding_vectors\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.original.VisualDialogConcatDataset.__init__": [[146, 149], ["torch.utils.data.ConcatDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "datasets", ")", ":", "\n", "        ", "super", "(", "VisualDialogConcatDataset", ",", "self", ")", ".", "__init__", "(", "datasets", ")", "\n", "self", ".", "vocab", "=", "datasets", "[", "0", "]", ".", "vocab", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.dialog_task.DialogTask.__init__": [[8, 10], ["pythia.tasks.BaseTask.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "DialogTask", ",", "self", ")", ".", "__init__", "(", "\"dialog\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.dialog_task.DialogTask._get_available_datasets": [[11, 13], ["None"], "methods", ["None"], ["", "def", "_get_available_datasets", "(", "self", ")", ":", "\n", "        ", "return", "[", "\"visdial\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dialog.dialog_task.DialogTask._preprocess_item": [[14, 16], ["None"], "methods", ["None"], ["", "def", "_preprocess_item", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "item", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset.__init__": [[15, 50], ["torch.utils.data.Dataset.__init__", "imdb_file.endswith", "pythia.utils.vocab.GloVeIntersectedVocab", "dataset.VisualDialogDataset._init_image_readers", "dataset.VisualDialogDataset._try_fast_read", "dataset.VisualDialogDataset._process_dialogues", "numpy.load", "imdb_file.endswith", "TypeError", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset._init_image_readers", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset._try_fast_read", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset._process_dialogues", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["\n", "class", "VQA2Dataset", "(", "BaseDataset", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "dataset_type", ",", "imdb_file_index", ",", "config", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"vqa2\"", ",", "dataset_type", ",", "config", ")", "\n", "imdb_files", "=", "self", ".", "config", ".", "imdb_files", "\n", "#pdb.set_trace()", "\n", "if", "dataset_type", "not", "in", "imdb_files", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Dataset type {} is not present in \"", "\n", "\"imdb_files of dataset config\"", ".", "format", "(", "dataset_type", ")", "\n", ")", "\n", "\n", "", "self", ".", "imdb_file", "=", "imdb_files", "[", "dataset_type", "]", "[", "imdb_file_index", "]", "\n", "self", ".", "imdb_file", "=", "self", ".", "_get_absolute_path", "(", "self", ".", "imdb_file", ")", "\n", "self", ".", "imdb", "=", "ImageDatabase", "(", "self", ".", "imdb_file", ")", "\n", "\n", "self", ".", "kwargs", "=", "kwargs", "\n", "self", ".", "image_depth_first", "=", "self", ".", "config", ".", "image_depth_first", "\n", "self", ".", "_should_fast_read", "=", "self", ".", "config", ".", "fast_read", "\n", "\n", "self", ".", "use_ocr", "=", "self", ".", "config", ".", "use_ocr", "\n", "self", ".", "use_ocr_info", "=", "self", ".", "config", ".", "use_ocr_info", "\n", "\n", "self", ".", "_use_features", "=", "False", "\n", "if", "hasattr", "(", "self", ".", "config", ",", "\"image_features\"", ")", ":", "\n", "            ", "self", ".", "_use_features", "=", "True", "\n", "self", ".", "features_max_len", "=", "self", ".", "config", ".", "features_max_len", "\n", "self", ".", "_return_info", "=", "self", ".", "config", ".", "get", "(", "\"return_info\"", ",", "True", ")", "\n", "\n", "all_image_feature_dirs", "=", "self", ".", "config", ".", "image_features", "[", "dataset_type", "]", "\n", "curr_image_features_dir", "=", "all_image_feature_dirs", "[", "imdb_file_index", "]", "\n", "curr_image_features_dir", "=", "curr_image_features_dir", ".", "split", "(", "\",\"", ")", "\n", "curr_image_features_dir", "=", "self", ".", "_get_absolute_path", "(", "curr_image_features_dir", ")", "\n", "\n", "self", ".", "features_db", "=", "FeaturesDataset", "(", "\n", "\"coco\"", ",", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset._try_fast_read": [[51, 65], ["os.listdir", "print", "feat_file.endswith", "pythia.tasks.vqa2.dataset.read_in_image_feats"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.read_in_image_feats"], ["directories", "=", "curr_image_features_dir", ",", "\n", "depth_first", "=", "self", ".", "image_depth_first", ",", "\n", "max_features", "=", "self", ".", "features_max_len", ",", "\n", "fast_read", "=", "self", ".", "_should_fast_read", ",", "\n", "imdb", "=", "self", ".", "imdb", ",", "\n", "return_info", "=", "self", ".", "_return_info", ",", "\n", ")", "\n", "\n", "", "", "def", "_get_absolute_path", "(", "self", ",", "paths", ")", ":", "\n", "        ", "if", "isinstance", "(", "paths", ",", "list", ")", ":", "\n", "            ", "return", "[", "self", ".", "_get_absolute_path", "(", "path", ")", "for", "path", "in", "paths", "]", "\n", "", "elif", "isinstance", "(", "paths", ",", "str", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isabs", "(", "paths", ")", ":", "\n", "                ", "pythia_root", "=", "get_pythia_root", "(", ")", "\n", "paths", "=", "os", ".", "path", ".", "join", "(", "pythia_root", ",", "self", ".", "config", ".", "data_root_dir", ",", "paths", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset._init_image_readers": [[66, 77], ["os.path.join", "numpy.load", "dataset.VisualDialogDataset.image_feat_readers.append", "pythia.tasks.vqa2.dataset.get_image_feat_reader"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.get_image_feat_reader"], ["", "return", "paths", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\n", "\"Paths passed to dataset should either be \"", "\"string or list\"", "\n", ")", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "imdb", ")", "\n", "\n", "", "def", "try_fast_read", "(", "self", ")", ":", "\n", "# Don't fast read in case of test set.", "\n", "        ", "if", "self", ".", "_dataset_type", "==", "\"test\"", ":", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset._get_image_features": [[80, 102], ["isinstance", "pythia.tasks.vqa2.dataset.read_in_image_feats", "len", "len", "exit", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.dataSet.read_in_image_feats"], ["", "if", "hasattr", "(", "self", ",", "\"_should_fast_read\"", ")", "and", "self", ".", "_should_fast_read", "is", "True", ":", "\n", "            ", "self", ".", "writer", ".", "write", "(", "\n", "\"Starting to fast read {} {} dataset\"", ".", "format", "(", "\n", "self", ".", "_name", ",", "self", ".", "_dataset_type", "\n", ")", "\n", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "for", "idx", "in", "tqdm", ".", "tqdm", "(", "\n", "range", "(", "len", "(", "self", ".", "imdb", ")", ")", ",", "miniters", "=", "100", ",", "disable", "=", "not", "is_main_process", "(", ")", "\n", ")", ":", "\n", "                ", "self", ".", "cache", "[", "idx", "]", "=", "self", ".", "load_item", "(", "idx", ")", "\n", "\n", "", "", "", "def", "get_item", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "self", ".", "_should_fast_read", "is", "True", "and", "self", ".", "_dataset_type", "!=", "\"test\"", ":", "\n", "            ", "return", "self", ".", "cache", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "load_item", "(", "idx", ")", "\n", "\n", "", "", "def", "load_item", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample_info", "=", "self", ".", "imdb", "[", "idx", "]", "\n", "current_sample", "=", "Sample", "(", ")", "\n", "\n", "if", "\"question_tokens\"", "in", "sample_info", ":", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset._tokens_to_word_indices": [[103, 114], ["dataset.VisualDialogDataset.vocab.get_stoi", "isinstance", "enumerate"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.vocab.BaseVocab.get_stoi"], ["            ", "text_processor_argument", "=", "{", "\"tokens\"", ":", "sample_info", "[", "\"question_tokens\"", "]", "}", "\n", "", "else", ":", "\n", "#text_processor_argument = {\"text\": sample_info[\"question\"]}", "\n", "            ", "text_processor_argument", "=", "{", "\"text\"", ":", "sample_info", "[", "\"main_question_str\"", "]", "}", "\n", "if", "\"sub_question_str\"", "in", "sample_info", ":", "\n", "                ", "text_processor_argument_sq", "=", "{", "\"text\"", ":", "sample_info", "[", "\"sub_question_str\"", "]", "}", "\n", "", "if", "\"other_question_str\"", "in", "sample_info", ":", "\n", "                ", "text_processor_argument_oq", "=", "{", "\"text\"", ":", "sample_info", "[", "\"other_question_str\"", "]", "}", "\n", "\n", "", "", "processed_question", "=", "self", ".", "text_processor", "(", "text_processor_argument", ")", "\n", "processed_question_sq", "=", "self", ".", "text_processor", "(", "text_processor_argument_sq", ")", "\n", "processed_question_oq", "=", "self", ".", "text_processor", "(", "text_processor_argument_oq", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset._process_dialogues": [[115, 182], ["dataset.VisualDialogDataset.__len__", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "torch.zeros().long", "dataset.VisualDialogDataset._tokens_to_word_indices", "dataset.VisualDialogDataset._tokens_to_word_indices", "torch.zeros().long", "enumerate", "dataset.VisualDialogDataset._tokens_to_word_indices", "enumerate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Tensor().long", "len", "torch.Tensor().long", "len", "torch.LongTensor", "torch.LongTensor.long", "len", "previous_dialog.index", "torch.Tensor", "torch.Tensor", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter.__len__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset._tokens_to_word_indices", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset._tokens_to_word_indices", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset._tokens_to_word_indices"], ["\n", "current_sample", ".", "text", "=", "processed_question", "[", "\"text\"", "]", "\n", "current_sample", ".", "text_sq", "=", "processed_question_sq", "[", "\"text\"", "]", "\n", "current_sample", ".", "text_oq", "=", "processed_question_oq", "[", "\"text\"", "]", "\n", "current_sample", ".", "question_text", "=", "sample_info", "[", "\"main_question_str\"", "]", "\n", "current_sample", ".", "reasoning_question", "=", "sample_info", "[", "\"main_question_str\"", "]", "\n", "current_sample", ".", "reasoning_answer", "=", "sample_info", "[", "\"main_answer_str\"", "]", "[", "0", "]", "\n", "#current_sample.image_url = sample_info[\"img_path\"]", "\n", "current_sample", ".", "image_url", "=", "sample_info", "[", "\"image_path\"", "]", "\n", "\n", "current_sample", ".", "sub_question", "=", "sample_info", "[", "\"sub_question_str\"", "]", "\n", "current_sample", ".", "other_question", "=", "sample_info", "[", "\"other_question_str\"", "]", "\n", "\n", "current_sample", ".", "question_id", "=", "torch", ".", "tensor", "(", "\n", "sample_info", "[", "\"question_id\"", "]", ",", "dtype", "=", "torch", ".", "int", "\n", ")", "\n", "\n", "if", "isinstance", "(", "sample_info", "[", "\"image_id\"", "]", ",", "int", ")", ":", "\n", "            ", "current_sample", ".", "image_id", "=", "torch", ".", "tensor", "(", "\n", "sample_info", "[", "\"image_id\"", "]", ",", "dtype", "=", "torch", ".", "int", "\n", ")", "\n", "", "else", ":", "\n", "            ", "current_sample", ".", "image_id", "=", "sample_info", "[", "\"image_id\"", "]", "\n", "\n", "", "current_sample", ".", "text_len", "=", "torch", ".", "tensor", "(", "\n", "#len(sample_info[\"question_tokens\"]), dtype=torch.int", "\n", "len", "(", "sample_info", "[", "\"main_question_tokens\"", "]", ")", ",", "dtype", "=", "torch", ".", "int", "\n", ")", "\n", "\n", "if", "self", ".", "_use_features", "is", "True", ":", "\n", "            ", "features", "=", "self", ".", "features_db", "[", "idx", "]", "\n", "current_sample", ".", "update", "(", "features", ")", "\n", "\n", "# Add details for OCR like OCR bbox, vectors, tokens here", "\n", "", "current_sample", "=", "self", ".", "add_ocr_details", "(", "sample_info", ",", "current_sample", ")", "\n", "# Depending on whether we are using soft copy this can add", "\n", "# dynamic answer space", "\n", "current_sample", "=", "self", ".", "add_answer_info", "(", "sample_info", ",", "current_sample", ")", "\n", "#print(\"current sample : {}\".format(current_sample))", "\n", "#pdb.set_trace()", "\n", "#print(\"Current sample : {}\".format(current_sample))", "\n", "\n", "return", "current_sample", "\n", "\n", "", "def", "add_ocr_details", "(", "self", ",", "sample_info", ",", "sample", ")", ":", "\n", "        ", "if", "self", ".", "use_ocr", ":", "\n", "# Preprocess OCR tokens", "\n", "            ", "ocr_tokens", "=", "[", "\n", "self", ".", "ocr_token_processor", "(", "{", "\"text\"", ":", "token", "}", ")", "[", "\"text\"", "]", "\n", "for", "token", "in", "sample_info", "[", "\"ocr_tokens\"", "]", "\n", "]", "\n", "# Get embeddings for tokens", "\n", "context", "=", "self", ".", "context_processor", "(", "{", "\"tokens\"", ":", "ocr_tokens", "}", ")", "\n", "sample", ".", "context", "=", "context", "[", "\"text\"", "]", "\n", "sample", ".", "context_tokens", "=", "context", "[", "\"tokens\"", "]", "\n", "sample", ".", "context_feature_0", "=", "context", "[", "\"text\"", "]", "\n", "sample", ".", "context_info_0", "=", "Sample", "(", ")", "\n", "sample", ".", "context_info_0", ".", "max_features", "=", "context", "[", "\"length\"", "]", "\n", "\n", "order_vectors", "=", "torch", ".", "eye", "(", "len", "(", "sample", ".", "context_tokens", ")", ")", "\n", "order_vectors", "[", "context", "[", "\"length\"", "]", ":", "]", "=", "0", "\n", "sample", ".", "order_vectors", "=", "order_vectors", "\n", "\n", "", "if", "self", ".", "use_ocr_info", "and", "\"ocr_info\"", "in", "sample_info", ":", "\n", "            ", "sample", ".", "ocr_bbox", "=", "self", ".", "bbox_processor", "(", "{", "\"info\"", ":", "sample_info", "[", "\"ocr_info\"", "]", "}", ")", "[", "\n", "\"bbox\"", "\n", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset.__len__": [[183, 188], ["len"], "methods", ["None"], ["", "return", "sample", "\n", "\n", "", "def", "add_answer_info", "(", "self", ",", "sample_info", ",", "sample", ")", ":", "\n", "        ", "if", "\"answers\"", "in", "sample_info", ":", "\n", "            ", "answers", "=", "sample_info", "[", "\"answers\"", "]", "\n", "answer_processor_arg", "=", "{", "\"answers\"", ":", "answers", "}", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset.__getitem__": [[189, 245], ["torch.zeros().long", "torch.zeros().long", "enumerate", "torch.zeros().long", "enumerate", "dataset.VisualDialogDataset._get_image_features", "questions.size", "enumerate", "enumerate", "torch.from_numpy", "len", "image_feat.unsqueeze().repeat.unsqueeze().repeat.unsqueeze().repeat", "torch.LongTensor", "torch.zeros", "torch.zeros", "len", "torch.LongTensor", "torch.zeros", "image_feat.unsqueeze().repeat.unsqueeze().repeat.size", "len", "len", "len", "gt_index.item", "image_feat.unsqueeze().repeat.unsqueeze().repeat.unsqueeze", "str", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset._get_image_features"], ["\n", "if", "self", ".", "use_ocr", ":", "\n", "                ", "answer_processor_arg", "[", "\"tokens\"", "]", "=", "sample_info", "[", "\"ocr_tokens\"", "]", "\n", "", "processed_soft_copy_answers", "=", "self", ".", "answer_processor", "(", "answer_processor_arg", ")", "\n", "sample", ".", "answers", "=", "processed_soft_copy_answers", "[", "\"answers\"", "]", "\n", "sample", ".", "targets", "=", "processed_soft_copy_answers", "[", "\"answers_scores\"", "]", "\n", "sample", ".", "gt_answer_index", "=", "processed_soft_copy_answers", "[", "\"answers_indices\"", "]", "[", "0", "]", "\n", "\n", "", "if", "\"answers_sq\"", "in", "sample_info", ":", "\n", "            ", "answers", "=", "sample_info", "[", "\"answers_sq\"", "]", "\n", "answer_processor_arg", "=", "{", "\"answers\"", ":", "answers", "}", "\n", "\n", "if", "self", ".", "use_ocr", ":", "\n", "                ", "answer_processor_arg", "[", "\"tokens\"", "]", "=", "sample_info", "[", "\"ocr_tokens\"", "]", "\n", "", "processed_soft_copy_answers", "=", "self", ".", "answer_processor", "(", "answer_processor_arg", ")", "\n", "sample", ".", "answers_sq", "=", "processed_soft_copy_answers", "[", "\"answers\"", "]", "\n", "sample", ".", "targets_sq", "=", "processed_soft_copy_answers", "[", "\"answers_scores\"", "]", "\n", "sample", ".", "gt_answer_index_sq", "=", "processed_soft_copy_answers", "[", "\"answers_indices\"", "]", "[", "0", "]", "\n", "\n", "", "if", "\"answers_oq\"", "in", "sample_info", ":", "\n", "            ", "answers", "=", "sample_info", "[", "\"answers_oq\"", "]", "\n", "answer_processor_arg", "=", "{", "\"answers\"", ":", "answers", "}", "\n", "\n", "if", "self", ".", "use_ocr", ":", "\n", "                ", "answer_processor_arg", "[", "\"tokens\"", "]", "=", "sample_info", "[", "\"ocr_tokens\"", "]", "\n", "", "processed_soft_copy_answers", "=", "self", ".", "answer_processor", "(", "answer_processor_arg", ")", "\n", "sample", ".", "answers_oq", "=", "processed_soft_copy_answers", "[", "\"answers\"", "]", "\n", "sample", ".", "targets_oq", "=", "processed_soft_copy_answers", "[", "\"answers_scores\"", "]", "\n", "sample", ".", "gt_answer_index_oq", "=", "processed_soft_copy_answers", "[", "\"answers_indices\"", "]", "[", "0", "]", "\n", "#print(\"Sample : {}\".format(sample))", "\n", "\n", "", "return", "sample", "\n", "\n", "", "def", "idx_to_answer", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "answer_processor", ".", "convert_idx_to_answer", "(", "idx", ")", "\n", "\n", "", "def", "format_for_evalai", "(", "self", ",", "report", ")", ":", "\n", "        ", "answers", "=", "report", ".", "scores", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "\n", "predictions", "=", "[", "]", "\n", "answer_space_size", "=", "self", ".", "answer_processor", ".", "get_true_vocab_size", "(", ")", "\n", "\n", "for", "idx", ",", "question_id", "in", "enumerate", "(", "report", ".", "question_id", ")", ":", "\n", "            ", "answer_id", "=", "answers", "[", "idx", "]", ".", "item", "(", ")", "\n", "\n", "if", "answer_id", ">=", "answer_space_size", ":", "\n", "                ", "answer_id", "-=", "answer_space_size", "\n", "answer", "=", "report", ".", "context_tokens", "[", "idx", "]", "[", "answer_id", "]", "\n", "", "else", ":", "\n", "                ", "answer", "=", "self", ".", "answer_processor", ".", "idx2word", "(", "answer_id", ")", "\n", "", "if", "answer", "==", "self", ".", "context_processor", ".", "PAD_TOKEN", ":", "\n", "                ", "answer", "=", "\"unanswerable\"", "\n", "\n", "", "predictions", ".", "append", "(", "{", "\"question_id\"", ":", "question_id", ".", "item", "(", ")", ",", "\"answer\"", ":", "answer", "}", ")", "\n", "\n", "", "return", "predictions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.visdial.dataset.VisualDialogDataset.collate_fn": [[246, 254], ["torch.stack"], "methods", ["None"], []], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.extract_vocabulary.ExtractVisdialVocabulary.__init__": [[8, 10], ["pythia.scripts.extract_vocabulary.ExtractVocabulary.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["\n", "import", "argparse", "\n", "import", "json", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.extract_vocabulary.ExtractVisdialVocabulary.get_text": [[11, 25], ["open", "json.load"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["import", "os", "\n", "from", "collections", "import", "Counter", "\n", "\n", "from", "dataset_utils", ".", "text_processing", "import", "tokenize", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--input_files\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"input question json files, \\\n                         if more than 1, split by space\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--out_dir\"", ",", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.__init__": [[11, 13], ["build_imdb.IMDBBuilder.get_args"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.extract_vocabulary.ExtractVocabulary.get_args"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "args", "=", "self", ".", "get_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.get_args": [[14, 49], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.parse_args"], ["", "def", "get_args", "(", "self", ")", ":", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\"Build IMDB for VisDial\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-o\"", ",", "\n", "\"--out_file\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./imdb.npy\"", ",", "\n", "help", "=", "\"Output file for IMDB\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-i\"", ",", "\n", "\"--image_root\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./COCO\"", ",", "\n", "help", "=", "\"Image directory for COCO\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-v\"", ",", "\"--version\"", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "\"Visdial version\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-d\"", ",", "\n", "\"--data_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./visdial\"", ",", "\n", "help", "=", "\"Directory which contains visdial jsons\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"-s\"", ",", "\n", "\"--set_type\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"train\"", ",", "\n", "help", "=", "\"Dataset type train|val|test\"", ",", "\n", ")", "\n", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.get_id_to_path_dict": [[50, 60], ["glob.iglob", "os.path.join", "int", "image_path.split"], "methods", ["None"], ["", "def", "get_id_to_path_dict", "(", "self", ")", ":", "\n", "        ", "id2path", "=", "{", "}", "\n", "globs", "=", "glob", ".", "iglob", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "image_root", ",", "\"*\"", ",", "\"*.npy\"", ")", ")", "\n", "# NOTE: based on assumption that image_id is unique across all splits", "\n", "for", "image_path", "in", "globs", ":", "\n", "            ", "path", "=", "\"/\"", ".", "join", "(", "image_path", ".", "split", "(", "\"/\"", ")", "[", "-", "2", ":", "]", ")", "\n", "image_id", "=", "int", "(", "image_path", "[", "-", "16", ":", "-", "4", "]", ")", "\n", "id2path", "[", "image_id", "]", "=", "path", "\n", "\n", "", "return", "id2path", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.build": [[61, 84], ["os.path.join", "build_imdb.IMDBBuilder.get_tokens", "build_imdb.IMDBBuilder.get_tokens", "build_imdb.IMDBBuilder.parse_dialogs", "build_imdb.IMDBBuilder.save_imdb", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.get_tokens", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.get_tokens", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.parse_dialogs", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.save_imdb", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["", "def", "build", "(", "self", ")", ":", "\n", "        ", "visdial_json_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "args", ".", "data_dir", ",", "\n", "\"visdial_%.1f_%s.json\"", "%", "(", "self", ".", "args", ".", "version", ",", "self", ".", "args", ".", "set_type", ")", ",", "\n", ")", "\n", "data", "=", "None", "\n", "\n", "with", "open", "(", "visdial_json_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "f", ")", "[", "\"data\"", "]", "\n", "\n", "", "final_questions", "=", "self", ".", "get_tokens", "(", "data", "[", "\"questions\"", "]", ")", "\n", "final_answers", "=", "self", ".", "get_tokens", "(", "data", "[", "\"answers\"", "]", ")", "\n", "dialogs", "=", "data", "[", "\"dialogs\"", "]", "\n", "\n", "dialogs_with_features", "=", "self", ".", "parse_dialogs", "(", "dialogs", ")", "\n", "\n", "imdb", "=", "{", "\n", "\"questions\"", ":", "final_questions", ",", "\n", "\"answers\"", ":", "final_answers", ",", "\n", "\"dialogs\"", ":", "dialogs_with_features", ",", "\n", "}", "\n", "\n", "self", ".", "save_imdb", "(", "imdb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.save_imdb": [[85, 88], ["open", "json.dump"], "methods", ["None"], ["", "def", "save_imdb", "(", "self", ",", "imdb", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "args", ".", "out_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "imdb", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.get_tokens": [[89, 98], ["enumerate", "isinstance", "pythia.utils.preprocessing.text_tokenize", "final_sentences.append"], "methods", ["None"], ["", "", "def", "get_tokens", "(", "self", ",", "sentences", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "sentences", ",", "list", ")", ":", "\n", "            ", "sentences", "=", "[", "sentences", "]", "\n", "", "final_sentences", "=", "[", "]", "\n", "for", "idx", ",", "sentence", "in", "enumerate", "(", "sentences", ")", ":", "\n", "            ", "tokens", "=", "text_tokenize", "(", "sentence", ")", "\n", "final_sentences", ".", "append", "(", "tokens", ")", "\n", "\n", "", "return", "final_sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.parse_dialogs": [[99, 109], ["build_imdb.IMDBBuilder.get_id_to_path_dict", "build_imdb.IMDBBuilder.get_tokens"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.get_id_to_path_dict", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.build_imdb.IMDBBuilder.get_tokens"], ["", "def", "parse_dialogs", "(", "self", ",", "dialogs", ")", ":", "\n", "        ", "id2path", "=", "self", ".", "get_id_to_path_dict", "(", ")", "\n", "\n", "for", "dialog", "in", "dialogs", ":", "\n", "            ", "image_id", "=", "dialog", "[", "\"image_id\"", "]", "\n", "image_feature_path", "=", "id2path", "[", "image_id", "]", "\n", "dialog", "[", "\"image_feature_path\"", "]", "=", "image_feature_path", "\n", "dialog", "[", "\"caption\"", "]", "=", "self", ".", "get_tokens", "(", "dialog", "[", "\"caption\"", "]", ")", "\n", "\n", "", "return", "dialogs", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.extract_vocabulary.ExtractVocabulary.__init__": [[18, 24], ["extract_vocabulary.ExtractVocabulary.get_args"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.extract_vocabulary.ExtractVocabulary.get_args"], ["\"--input_files\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"input question json files, \\\n                         if more than 1, split by space\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.extract_vocabulary.ExtractVocabulary.extract": [[25, 46], ["os.makedirs", "collections.Counter", "extract_vocabulary.ExtractVocabulary.get_text", "enumerate", "vocabulary.sort", "extract_vocabulary.ExtractVocabulary.save_vocabulary", "print", "print", "len", "pythia.utils.text_utils.tokenize", "len", "collections.Counter.update", "min", "max", "collections.Counter.items"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.extract_vocabulary.ExtractVocabulary.get_text", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.extract_vocabulary.ExtractVocabulary.save_vocabulary", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.dataset_utils.text_processing.tokenize", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update"], ["\"--out_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"./\"", ",", "\n", "help", "=", "\"output directory, default is current directory\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--min_freq\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "help", "=", "\"the minimum times of word occurrence \\\n                          to be included in vocabulary, default 0\"", ",", "\n", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "input_files", "=", "args", ".", "input_files", "\n", "out_dir", "=", "args", ".", "out_dir", "\n", "min_freq", "=", "args", ".", "min_freq", "\n", "\n", "os", ".", "makedirs", "(", "out_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "vocab_file_name", "=", "\"vocabulary_vqa.txt\"", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.extract_vocabulary.ExtractVocabulary.save_vocabulary": [[47, 51], ["os.path.join", "open", "f.writelines"], "methods", ["None"], ["\n", "word_count", "=", "Counter", "(", ")", "\n", "questions", "=", "[", "]", "\n", "\n", "for", "idx", ",", "input_file", "in", "enumerate", "(", "input_files", ")", ":", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.extract_vocabulary.ExtractVocabulary.get_text": [[52, 64], ["open", "json.load"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load"], ["    ", "with", "open", "(", "input_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "questions", "+=", "json", ".", "load", "(", "f", ")", "[", "\"questions\"", "]", "\n", "\n", "", "", "question_length", "=", "[", "None", "]", "*", "len", "(", "questions", ")", "\n", "\n", "for", "inx", ",", "question", "in", "enumerate", "(", "questions", ")", ":", "\n", "    ", "words", "=", "tokenize", "(", "question", "[", "\"question\"", "]", ")", "\n", "question_length", "[", "inx", "]", "=", "len", "(", "words", ")", "\n", "word_count", ".", "update", "(", "words", ")", "\n", "\n", "", "vocabulary", "=", "[", "w", "[", "0", "]", "for", "w", "in", "word_count", ".", "items", "(", ")", "if", "w", "[", "1", "]", ">=", "min_freq", "]", "\n", "vocabulary", ".", "sort", "(", ")", "\n", "vocabulary", "=", "[", "\"<unk>\"", "]", "+", "vocabulary", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.scripts.extract_vocabulary.ExtractVocabulary.get_args": [[65, 97], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.parse_args"], ["\n", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "vocab_file_name", ")", "\n", "with", "open", "(", "vocab_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "    ", "f", ".", "writelines", "(", "[", "w", "+", "\"\\n\"", "for", "w", "in", "vocabulary", "]", ")", "\n", "\n", "\n", "", "print", "(", "\"min question len=\"", ",", "min", "(", "question_length", ")", ")", "\n", "print", "(", "\"max question len=\"", ",", "max", "(", "question_length", ")", ")", "\n", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.gqa.convert_gqa_to_vqa.merge_train": [[16, 28], ["tqdm.tqdm", "os.path.abspath", "os.listdir", "os.path.join", "json.load", "merged_dic.update", "os.path.join", "open", "json.dump", "open", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update"], ["def", "merge_train", "(", "train_q_dir", ")", ":", "\n", "    ", "merged_dic", "=", "{", "}", "\n", "\n", "for", "file_name", "in", "tqdm", ".", "tqdm", "(", "os", ".", "listdir", "(", "train_q_dir", ")", ")", ":", "\n", "        ", "full_path", "=", "os", ".", "path", ".", "join", "(", "train_q_dir", ",", "file_name", ")", "\n", "partial_questions", "=", "json", ".", "load", "(", "open", "(", "full_path", ",", "\"r\"", ")", ")", "\n", "merged_dic", ".", "update", "(", "partial_questions", ")", "\n", "\n", "", "save_dir", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "train_q_dir", ",", "os", ".", "pardir", ")", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"train_all_questions.json\"", ")", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "merged_dic", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.gqa.convert_gqa_to_vqa.get_objects": [[30, 41], ["re.findall", "list", "match.isdigit", "map", "match.split", "int"], "function", ["None"], ["", "", "def", "get_objects", "(", "semantic_str", ")", ":", "\n", "    ", "matches", "=", "re", ".", "findall", "(", "\"\\(([^)]+)\"", ",", "semantic_str", ")", "\n", "result", "=", "[", "]", "\n", "for", "match", "in", "matches", ":", "\n", "        ", "if", "\",\"", "in", "match", ":", "\n", "            ", "result", "+=", "list", "(", "map", "(", "int", ",", "match", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "", "elif", "match", ".", "isdigit", "(", ")", ":", "\n", "            ", "result", "+=", "[", "int", "(", "match", ")", "]", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.gqa.convert_gqa_to_vqa.get_imdb": [[43, 69], ["json.load", "print", "tqdm.tqdm", "numpy.array", "open", "json.load.items", "imdb.append", "pythia.utils.text_processing.text_tokenize", "convert_gqa_to_vqa.get_objects", "range", "range"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.gqa.convert_gqa_to_vqa.get_objects"], ["", "def", "get_imdb", "(", "file_path", ")", ":", "\n", "\n", "    ", "imdb", "=", "[", "{", "\"dataset_name\"", ":", "\"gqa\"", "}", "]", "\n", "\n", "questions", "=", "json", ".", "load", "(", "open", "(", "file_path", ",", "\"r\"", ")", ")", "\n", "print", "(", "\"Processing file {}\"", ".", "format", "(", "file_path", ")", ")", "\n", "\n", "for", "qid", ",", "item", "in", "tqdm", ".", "tqdm", "(", "questions", ".", "items", "(", ")", ")", ":", "\n", "        ", "entry", "=", "{", "\n", "\"image_name\"", ":", "item", "[", "\"imageId\"", "]", "+", "\"jpg\"", ",", "\n", "\"image_id\"", ":", "item", "[", "\"imageId\"", "]", ",", "\n", "\"question_id\"", ":", "qid", ",", "\n", "\"question_str\"", ":", "item", "[", "\"question\"", "]", ",", "\n", "\"question_tokens\"", ":", "tokenize", "(", "item", "[", "\"question\"", "]", ")", ",", "\n", "}", "\n", "\n", "if", "\"answer\"", "in", "item", ":", "\n", "            ", "entry", "[", "\"all_answers\"", "]", "=", "[", "item", "[", "\"answer\"", "]", "for", "_", "in", "range", "(", "10", ")", "]", "\n", "entry", "[", "\"valid_answers\"", "]", "=", "[", "item", "[", "\"answer\"", "]", "for", "_", "in", "range", "(", "10", ")", "]", "\n", "entry", "[", "\"semantic_string\"", "]", "=", "(", "item", "[", "\"semanticStr\"", "]", ",", ")", "\n", "entry", "[", "\"gt_object_ids\"", "]", "=", "(", "get_objects", "(", "item", "[", "\"semanticStr\"", "]", ")", ",", ")", "\n", "entry", "[", "\"meta_data\"", "]", "=", "item", "[", "\"types\"", "]", "\n", "\n", "", "imdb", ".", "append", "(", "entry", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "imdb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.gqa.convert_gqa_to_vqa.extract_bbox_feats": [[71, 100], ["os.path.join", "json.load", "json.load.items", "range", "open", "os.path.join", "print", "h5py.File", "tqdm.tqdm", "range", "os.path.join", "numpy.save", "str"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save"], ["", "def", "extract_bbox_feats", "(", "feat_dir", ",", "out_dir", ")", ":", "\n", "\n", "    ", "info_json_path", "=", "os", ".", "path", ".", "join", "(", "feat_dir", ",", "\"gqa_objects_info.json\"", ")", "\n", "info_dict", "=", "json", ".", "load", "(", "open", "(", "info_json_path", ",", "\"r\"", ")", ")", "\n", "\n", "file_mapping", "=", "{", "k", ":", "[", "]", "for", "k", "in", "range", "(", "16", ")", "}", "\n", "\n", "for", "k", ",", "v", "in", "info_dict", ".", "items", "(", ")", ":", "\n", "        ", "file_mapping", "[", "v", "[", "\"file\"", "]", "]", "+=", "[", "(", "k", ",", "v", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "feat_dir", ",", "\"gqa_objects_{}.h5\"", ".", "format", "(", "i", ")", ")", "\n", "print", "(", "\"Processing file {}\"", ".", "format", "(", "file_path", ")", ")", "\n", "\n", "feat_db", "=", "h5py", ".", "File", "(", "file_path", ",", "\"r\"", ")", "\n", "for", "entry", "in", "tqdm", ".", "tqdm", "(", "file_mapping", "[", "i", "]", ")", ":", "\n", "            ", "image_id", "=", "entry", "[", "0", "]", "\n", "meta", "=", "entry", "[", "1", "]", "\n", "to_save", "=", "{", "\n", "\"image_id\"", ":", "image_id", ",", "\n", "\"boxes\"", ":", "feat_db", "[", "\"bboxes\"", "]", "[", "meta", "[", "\"idx\"", "]", "]", ",", "\n", "\"feats\"", ":", "feat_db", "[", "\"features\"", "]", "[", "meta", "[", "\"idx\"", "]", "]", ",", "\n", "\"height\"", ":", "meta", "[", "\"height\"", "]", ",", "\n", "\"width\"", ":", "meta", "[", "\"width\"", "]", ",", "\n", "\"n_objects\"", ":", "meta", "[", "\"objectsNum\"", "]", ",", "\n", "}", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "str", "(", "image_id", ")", "+", "\".npy\"", ")", "\n", "np", ".", "save", "(", "save_path", ",", "to_save", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.gqa.convert_gqa_to_vqa.extract_spatial_feats": [[102, 123], ["os.path.join", "json.load", "json.load.items", "range", "open", "os.path.join", "print", "h5py.File", "tqdm.tqdm", "range", "to_save.reshape.reshape", "os.path.join", "numpy.save", "str"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save"], ["", "", "", "def", "extract_spatial_feats", "(", "feat_dir", ",", "out_dir", ")", ":", "\n", "    ", "info_json_path", "=", "os", ".", "path", ".", "join", "(", "feat_dir", ",", "\"gqa_spatial_info.json\"", ")", "\n", "info_dict", "=", "json", ".", "load", "(", "open", "(", "info_json_path", ",", "\"r\"", ")", ")", "\n", "\n", "file_mapping", "=", "{", "k", ":", "[", "]", "for", "k", "in", "range", "(", "16", ")", "}", "\n", "\n", "for", "k", ",", "v", "in", "info_dict", ".", "items", "(", ")", ":", "\n", "        ", "file_mapping", "[", "v", "[", "\"file\"", "]", "]", "+=", "[", "(", "k", ",", "v", ")", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "16", ")", ":", "\n", "        ", "file_path", "=", "os", ".", "path", ".", "join", "(", "feat_dir", ",", "\"gqa_spatial_{}.h5\"", ".", "format", "(", "i", ")", ")", "\n", "print", "(", "\"Processing file {}\"", ".", "format", "(", "file_path", ")", ")", "\n", "\n", "feat_db", "=", "h5py", ".", "File", "(", "file_path", ",", "\"r\"", ")", "\n", "for", "entry", "in", "tqdm", ".", "tqdm", "(", "file_mapping", "[", "i", "]", ")", ":", "\n", "            ", "image_id", "=", "entry", "[", "0", "]", "\n", "meta", "=", "entry", "[", "1", "]", "\n", "to_save", "=", "feat_db", "[", "\"features\"", "]", "[", "meta", "[", "\"idx\"", "]", "]", "\n", "to_save", "=", "to_save", ".", "reshape", "(", "1", ",", "7", ",", "7", ",", "2048", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "str", "(", "image_id", ")", "+", "\".npy\"", ")", "\n", "np", ".", "save", "(", "save_path", ",", "to_save", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.gqa.convert_gqa_to_vqa.extract_image_features": [[125, 132], ["convert_gqa_to_vqa.extract_bbox_feats", "convert_gqa_to_vqa.extract_spatial_feats", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.gqa.convert_gqa_to_vqa.extract_bbox_feats", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.gqa.convert_gqa_to_vqa.extract_spatial_feats"], ["", "", "", "def", "extract_image_features", "(", "image_dir", ",", "out_dir", ")", ":", "\n", "    ", "extract_bbox_feats", "(", "\n", "os", ".", "path", ".", "join", "(", "image_dir", ",", "\"objects\"", ")", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"objects\"", ")", "\n", ")", "\n", "\n", "extract_spatial_feats", "(", "\n", "os", ".", "path", ".", "join", "(", "image_dir", ",", "\"spatial\"", ")", ",", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"spatial\"", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.gqa.convert_gqa_to_vqa.convert_gqa_to_vqa": [[135, 234], ["os.path.join", "convert_gqa_to_vqa.extract_image_features", "os.path.join", "os.path.isfile", "collections.Counter", "collections.Counter", "collections.Counter", "print", "print", "print", "print", "print", "q_vocabulary.sort", "os.path.join", "answer_list.sort", "os.path.join", "os.path.join", "print", "convert_gqa_to_vqa.merge_train", "len", "len", "min", "max", "open", "f.writelines", "pythia.utils.process_answers.preprocess_answer", "t.strip", "open", "fp.writelines", "os.path.join", "os.path.join", "convert_gqa_to_vqa.get_imdb", "os.path.join", "numpy.save", "os.path.join", "json.load", "print", "collections.Counter", "collections.Counter", "tqdm.tqdm", "collections.Counter.items", "collections.Counter.items", "filename.replace.replace", "open", "json.load.items", "pythia.utils.text_processing.text_tokenize", "collections.Counter.update", "collections.Counter.update", "collections.Counter.update", "collections.Counter.update", "collections.Counter.update", "len", "t.strip", "q[].lower", "q[].lower", "len"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.gqa.convert_gqa_to_vqa.extract_image_features", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.gqa.convert_gqa_to_vqa.merge_train", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.vqa_v2.0.process_answers.preprocess_answer", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.gqa.convert_gqa_to_vqa.get_imdb", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update"], ["", "def", "convert_gqa_to_vqa", "(", "gqa_dir", ",", "out_dir", ")", ":", "\n", "    ", "\"\"\"\n    Takes GQA dataset and converts it into VQA format\n\n    Assumes GQA dir structure as:\n\n    -gqa_dir/\n      -images/\n         -images/\n         -objects/\n         -spatial/\n      -questions/\n      -scenegraphs/\n    \"\"\"", "\n", "\n", "image_feat_path", "=", "os", ".", "path", ".", "join", "(", "gqa_dir", ",", "\"images\"", ")", "\n", "extract_image_features", "(", "image_feat_path", ",", "out_dir", ")", "\n", "\n", "questions_dir", "=", "os", ".", "path", ".", "join", "(", "gqa_dir", ",", "\"questions\"", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "questions_dir", ",", "\"train_all_questions.json\"", ")", ")", ":", "\n", "        ", "print", "(", "\"Using previously generated train_all_questions.json file\"", ")", "\n", "", "else", ":", "\n", "        ", "merge_train", "(", "os", ".", "path", ".", "join", "(", "gqa_dir", ",", "\"questions\"", ",", "\"train_all_questions\"", ")", ")", "\n", "\n", "", "split_mapping", "=", "{", "\n", "\"test\"", ":", "\"test_all_questions.json\"", ",", "\n", "\"val\"", ":", "\"val_all_questions.json\"", ",", "\n", "\"challenge\"", ":", "\"challenge_all_questions.json\"", ",", "\n", "\"train\"", ":", "\"train_all_questions.json\"", ",", "\n", "}", "\n", "\n", "for", "split", "in", "split_mapping", ":", "\n", "        ", "for", "balance_type", "in", "[", "\"balanced\"", ",", "\"all\"", "]", ":", "\n", "            ", "filename", "=", "split_mapping", "[", "split", "]", "\n", "csplit", "=", "split", "\n", "if", "balance_type", "==", "\"balanced\"", ":", "\n", "                ", "filename", "=", "filename", ".", "replace", "(", "\"_all\"", ",", "\"_balanced\"", ")", "\n", "csplit", "=", "split", "+", "\"_balanced\"", "\n", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "questions_dir", ",", "filename", ")", "\n", "imdb", "=", "get_imdb", "(", "file_path", ")", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"imdb_{}.npy\"", ".", "format", "(", "csplit", ")", ")", "\n", "np", ".", "save", "(", "save_path", ",", "imdb", ")", "\n", "\n", "", "", "splits", "=", "[", "\"val\"", ",", "\"train\"", "]", "\n", "split_type", "=", "[", "\"balanced\"", ",", "\"all\"", "]", "\n", "\n", "global_answer", "=", "Counter", "(", ")", "\n", "global_q", "=", "Counter", "(", ")", "\n", "question_len", "=", "Counter", "(", ")", "\n", "\n", "for", "s", "in", "splits", ":", "\n", "        ", "for", "st", "in", "split_type", ":", "\n", "            ", "questions_json", "=", "os", ".", "path", ".", "join", "(", "\n", "questions_dir", ",", "\"{}_{}_questions.json\"", ".", "format", "(", "s", ",", "st", ")", "\n", ")", "\n", "questions", "=", "json", ".", "load", "(", "open", "(", "questions_json", ",", "\"r\"", ")", ")", "\n", "\n", "print", "(", "\"Processing split {}_{}\"", ".", "format", "(", "s", ",", "st", ")", ")", "\n", "\n", "answers", "=", "Counter", "(", ")", "\n", "q_tokens", "=", "Counter", "(", ")", "\n", "\n", "for", "qs", ",", "q", "in", "tqdm", ".", "tqdm", "(", "questions", ".", "items", "(", ")", ")", ":", "\n", "                ", "tokens", "=", "tokenize", "(", "q", "[", "\"question\"", "]", ")", "\n", "q_tokens", ".", "update", "(", "tokens", ")", "\n", "global_q", ".", "update", "(", "tokens", ")", "\n", "answers", ".", "update", "(", "[", "q", "[", "\"answer\"", "]", ".", "lower", "(", ")", "]", ")", "\n", "global_answer", ".", "update", "(", "[", "q", "[", "\"answer\"", "]", ".", "lower", "(", ")", "]", ")", "\n", "question_len", ".", "update", "(", "[", "len", "(", "tokens", ")", "]", ")", "\n", "\n", "", "", "", "print", "(", "\"N_unique answers :\"", ",", "len", "(", "global_answer", ")", ")", "\n", "print", "(", "\"N unique q tokens:\"", ",", "len", "(", "global_q", ")", ")", "\n", "print", "(", "\"Min Q length\"", ",", "min", "(", "[", "x", "for", "x", "in", "question_len", "]", ")", ")", "\n", "print", "(", "\"Max Q length\"", ",", "max", "(", "[", "x", "for", "x", "in", "question_len", "]", ")", ")", "\n", "print", "(", "\"Q length distribution\"", ",", "question_len", ")", "\n", "\n", "# Save question vocabulary", "\n", "q_vocabulary", "=", "[", "w", "[", "0", "]", "for", "w", "in", "global_q", ".", "items", "(", ")", "]", "\n", "q_vocabulary", ".", "sort", "(", ")", "\n", "q_vocabulary", "=", "[", "\"<unk>\"", "]", "+", "q_vocabulary", "\n", "\n", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"vocabulary_gqa.txt\"", ")", "\n", "with", "open", "(", "vocab_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "writelines", "(", "[", "w", "+", "\"\\n\"", "for", "w", "in", "q_vocabulary", "]", ")", "\n", "\n", "# Save answer vocabulary", "\n", "", "answer_list", "=", "[", "preprocess_answer", "(", "ans", "[", "0", "]", ")", "for", "ans", "in", "global_answer", ".", "items", "(", ")", "]", "\n", "answer_list", "=", "[", "t", ".", "strip", "(", ")", "for", "t", "in", "answer_list", "if", "len", "(", "t", ".", "strip", "(", ")", ")", ">", "0", "]", "\n", "answer_list", ".", "sort", "(", ")", "\n", "\n", "if", "\"<unk>\"", "not", "in", "answer_list", ":", "\n", "        ", "answer_list", "=", "[", "\"<unk>\"", "]", "+", "answer_list", "\n", "\n", "", "answer_file", "=", "os", ".", "path", ".", "join", "(", "out_dir", ",", "\"answers_gqa.txt\"", ")", "\n", "with", "open", "(", "answer_file", ",", "\"w\"", ")", "as", "fp", ":", "\n", "        ", "fp", ".", "writelines", "(", "[", "w", "+", "\"\\n\"", "for", "w", "in", "answer_list", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_resnet152_feat.ResNet152FeatModule.__init__": [[39, 43], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "list", "RESNET152_MODEL.children"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ResNet152FeatModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules", "=", "list", "(", "RESNET152_MODEL", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", "\n", "self", ".", "feature_module", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_resnet152_feat.ResNet152FeatModule.forward": [[44, 46], ["extract_resnet152_feat.ResNet152FeatModule.feature_module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "feature_module", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_resnet152_feat.extract_image_feat": [[53, 65], ["PIL.Image.open().convert", "data_transforms", "torch.autograd.Variable", "_resnet_module", "img_transform.expand.expand", "img_transform.expand.unsqueeze", "img_var.cuda.cuda", "PIL.Image.open"], "function", ["None"], ["", "def", "extract_image_feat", "(", "img_file", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "img_file", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img_transform", "=", "data_transforms", "(", "img", ")", "\n", "# make sure grey scale image is processed correctly", "\n", "if", "img_transform", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "img_transform", "=", "img_transform", ".", "expand", "(", "3", ",", "-", "1", ",", "-", "1", ")", "\n", "", "img_var", "=", "Variable", "(", "img_transform", ".", "unsqueeze", "(", "0", ")", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "img_var", "=", "img_var", ".", "cuda", "(", ")", "\n", "\n", "", "img_feat", "=", "_resnet_module", "(", "img_var", ")", "\n", "return", "img_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_resnet152_feat.get_image_id": [[67, 70], ["int", "[].split", "image_name.split"], "function", ["None"], ["", "def", "get_image_id", "(", "image_name", ")", ":", "\n", "    ", "image_id", "=", "int", "(", "image_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "\n", "return", "image_id", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_resnet152_feat.extract_dataset_pool5": [[72, 104], ["glob.glob", "enumerate", "os.path.exists", "os.makedirs", "os.path.basename", "extract_resnet152_feat.get_image_id", "os.path.basename.replace", "os.path.join", "extract_image_feat().permute.data.cpu().numpy", "numpy.save", "os.rmdir", "print", "os.path.exists", "os.path.exists", "os.makedirs", "extract_image_feat().permute", "os.path.exists", "print", "extract_image_feat().permute.data.cpu", "extract_resnet152_feat.extract_image_feat", "len"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_resnet152_feat.get_image_id", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_resnet_features.extract_image_feat"], ["", "def", "extract_dataset_pool5", "(", "image_dir", ",", "save_dir", ",", "total_group", ",", "group_id", ",", "ext_filter", ")", ":", "\n", "    ", "image_list", "=", "glob", "(", "image_dir", "+", "\"/*.\"", "+", "ext_filter", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "for", "n_im", ",", "impath", "in", "enumerate", "(", "image_list", ")", ":", "\n", "        ", "if", "(", "n_im", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "\"processing %d / %d\"", "%", "(", "n_im", "+", "1", ",", "len", "(", "image_list", ")", ")", ")", "\n", "", "image_name", "=", "os", ".", "path", ".", "basename", "(", "impath", ")", "\n", "image_id", "=", "get_image_id", "(", "image_name", ")", "\n", "if", "image_id", "%", "total_group", "!=", "group_id", ":", "\n", "            ", "continue", "\n", "\n", "", "feat_name", "=", "image_name", ".", "replace", "(", "ext_filter", ",", "\"npy\"", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "feat_name", ")", "\n", "tmp_lock", "=", "save_path", "+", "\".lock\"", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", "and", "not", "os", ".", "path", ".", "exists", "(", "tmp_lock", ")", ":", "\n", "            ", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "tmp_lock", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "tmp_lock", ")", "\n", "\n", "# pool5_val = extract_image_feat(impath).permute(0, 2, 3, 1)", "\n", "", "try", ":", "\n", "            ", "pool5_val", "=", "extract_image_feat", "(", "impath", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"error for\"", "+", "image_name", ")", "\n", "continue", "\n", "\n", "", "feat", "=", "pool5_val", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np", ".", "save", "(", "save_path", ",", "feat", ")", "\n", "os", ".", "rmdir", "(", "tmp_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.parse_args": [[95, 160], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "argparse.ArgumentParser.print_help", "sys.exit"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"End-to-end inference\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--cfg\"", ",", "\n", "dest", "=", "\"cfg\"", ",", "\n", "help", "=", "\"cfg model file (/path/to/model_config.yaml)\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--wts\"", ",", "\n", "dest", "=", "\"weights\"", ",", "\n", "help", "=", "\"weights model file (/path/to/model_weights.pkl)\"", ",", "\n", "default", "=", "None", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_dir\"", ",", "\n", "dest", "=", "\"output_dir\"", ",", "\n", "help", "=", "\"output dir name\"", ",", "\n", "required", "=", "True", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--image-ext\"", ",", "\n", "dest", "=", "\"image_ext\"", ",", "\n", "help", "=", "\"image file name extension (default: jpg)\"", ",", "\n", "default", "=", "\"jpg\"", ",", "\n", "type", "=", "str", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--bbox_file\"", ",", "help", "=", "\"csv file from bottom-up attention model\"", ",", "default", "=", "None", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--total_group\"", ",", "help", "=", "\"the number of group for exracting\"", ",", "type", "=", "int", ",", "default", "=", "1", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--group_id\"", ",", "\n", "help", "=", "\" group id for current analysis, used to shard\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--min_bboxes\"", ",", "help", "=", "\" min number of bboxes\"", ",", "type", "=", "int", ",", "default", "=", "10", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--max_bboxes\"", ",", "help", "=", "\" min number of bboxes\"", ",", "type", "=", "int", ",", "default", "=", "100", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--feat_name\"", ",", "\n", "help", "=", "\" the name of the feature to extract, default: gpu_0/fc7\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "\"gpu_0/fc7\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"im_or_folder\"", ",", "help", "=", "\"image or folder of images\"", ",", "default", "=", "None", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\n", "\"--background\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"The model will output predictions for the background class when set\"", "\n", ")", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "1", ":", "\n", "        ", "parser", ".", "print_help", "(", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.get_detections_from_im": [[162, 207], ["utils.NamedCudaScope", "common.im_detect_bbox", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FetchBlob", "caffe2.python.workspace.FetchBlob", "numpy.zeros", "range", "numpy.argmax", "numpy.hstack().astype", "numpy.array", "numpy.where", "numpy.where", "len", "utils.boxes.nms", "len", "numpy.hstack", "numpy.argsort", "numpy.argsort", "common.config.cfg"], "function", ["None"], ["", "def", "get_detections_from_im", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "im", ",", "\n", "image_id", ",", "\n", "feat_blob_name", ",", "\n", "MIN_BOXES", ",", "\n", "MAX_BOXES", ",", "\n", "background", "=", "False", ",", "\n", "conf_thresh", "=", "0.2", ",", "\n", "bboxes", "=", "None", ",", "\n", ")", ":", "\n", "\n", "    ", "with", "c2_utils", ".", "NamedCudaScope", "(", "0", ")", ":", "\n", "        ", "scores", ",", "cls_boxes", ",", "im_scale", "=", "infer_engine", ".", "im_detect_bbox", "(", "\n", "model", ",", "im", ",", "cfg", ".", "TEST", ".", "SCALE", ",", "cfg", ".", "TEST", ".", "MAX_SIZE", ",", "boxes", "=", "bboxes", "\n", ")", "\n", "box_features", "=", "workspace", ".", "FetchBlob", "(", "feat_blob_name", ")", "\n", "cls_prob", "=", "workspace", ".", "FetchBlob", "(", "\"gpu_0/cls_prob\"", ")", "\n", "rois", "=", "workspace", ".", "FetchBlob", "(", "\"gpu_0/rois\"", ")", "\n", "max_conf", "=", "np", ".", "zeros", "(", "(", "rois", ".", "shape", "[", "0", "]", ")", ")", "\n", "# unscale back to raw image space", "\n", "cls_boxes", "=", "rois", "[", ":", ",", "1", ":", "5", "]", "/", "im_scale", "\n", "\n", "start_index", "=", "1", "\n", "# Column 0 of the scores matrix is for the background class", "\n", "if", "background", ":", "\n", "            ", "start_index", "=", "0", "\n", "", "for", "cls_ind", "in", "range", "(", "start_index", ",", "cls_prob", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "cls_scores", "=", "scores", "[", ":", ",", "cls_ind", "]", "\n", "dets", "=", "np", ".", "hstack", "(", "(", "cls_boxes", ",", "cls_scores", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "keep", "=", "np", ".", "array", "(", "nms", "(", "dets", ",", "cfg", ".", "TEST", ".", "NMS", ")", ")", "\n", "max_conf", "[", "keep", "]", "=", "np", ".", "where", "(", "\n", "cls_scores", "[", "keep", "]", ">", "max_conf", "[", "keep", "]", ",", "cls_scores", "[", "keep", "]", ",", "max_conf", "[", "keep", "]", "\n", ")", "\n", "\n", "", "keep_boxes", "=", "np", ".", "where", "(", "max_conf", ">=", "conf_thresh", ")", "[", "0", "]", "\n", "if", "len", "(", "keep_boxes", ")", "<", "MIN_BOXES", ":", "\n", "            ", "keep_boxes", "=", "np", ".", "argsort", "(", "max_conf", ")", "[", ":", ":", "-", "1", "]", "[", ":", "MIN_BOXES", "]", "\n", "", "elif", "len", "(", "keep_boxes", ")", ">", "MAX_BOXES", ":", "\n", "            ", "keep_boxes", "=", "np", ".", "argsort", "(", "max_conf", ")", "[", ":", ":", "-", "1", "]", "[", ":", "MAX_BOXES", "]", "\n", "# Predict the class label using the scores", "\n", "", "objects", "=", "np", ".", "argmax", "(", "cls_prob", "[", "keep_boxes", "]", "[", "start_index", ":", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "return", "box_features", "[", "keep_boxes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.extract_bboxes": [[219, 238], ["open", "csv.DictReader", "int", "int", "float", "float", "numpy.frombuffer().reshape", "numpy.frombuffer", "base64.b64decode"], "function", ["None"], ["", "def", "extract_bboxes", "(", "bottom_up_csv_file", ")", ":", "\n", "    ", "image_bboxes", "=", "{", "}", "\n", "\n", "with", "open", "(", "bottom_up_csv_file", ",", "\"r\"", ")", "as", "tsv_in_file", ":", "\n", "        ", "reader", "=", "csv", ".", "DictReader", "(", "\n", "tsv_in_file", ",", "delimiter", "=", "\"\\t\"", ",", "fieldnames", "=", "BOTTOM_UP_FIELDNAMES", "\n", ")", "\n", "for", "item", "in", "reader", ":", "\n", "            ", "item", "[", "\"num_boxes\"", "]", "=", "int", "(", "item", "[", "\"num_boxes\"", "]", ")", "\n", "image_id", "=", "int", "(", "item", "[", "\"image_id\"", "]", ")", "\n", "image_w", "=", "float", "(", "item", "[", "\"image_w\"", "]", ")", "\n", "image_h", "=", "float", "(", "item", "[", "\"image_h\"", "]", ")", "\n", "\n", "bbox", "=", "np", ".", "frombuffer", "(", "\n", "base64", ".", "b64decode", "(", "item", "[", "\"boxes\"", "]", ")", ",", "dtype", "=", "np", ".", "float32", "\n", ")", ".", "reshape", "(", "(", "item", "[", "\"num_boxes\"", "]", ",", "-", "1", ")", ")", "\n", "\n", "image_bboxes", "[", "image_id", "]", "=", "bbox", "\n", "", "", "return", "image_bboxes", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.main": [[240, 300], ["logging.getLogger", "common.config.merge_cfg_from_file", "utils.io.cache_url", "common.config.assert_and_infer_cfg", "common.initialize_model_from_cfg", "timeit.default_timer", "os.path.isdir", "enumerate", "glob.iglob", "extract_features.extract_bboxes", "os.path.exists", "os.makedirs", "os.path.basename", "int", "cv2.imread", "[].split", "os.path.join", "os.path.join.replace", "extract_features.get_detections_from_im", "numpy.save", "os.rmdir", "timeit.default_timer", "print", "os.path.basename.replace", "os.path.exists", "os.path.exists", "os.makedirs", "os.path.exists", "os.path.basename.split"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.extract_bboxes", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.get_detections_from_im", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "merge_cfg_from_file", "(", "args", ".", "cfg", ")", "\n", "cfg", ".", "NUM_GPUS", "=", "1", "\n", "args", ".", "weights", "=", "cache_url", "(", "args", ".", "weights", ",", "cfg", ".", "DOWNLOAD_CACHE", ")", "\n", "assert_and_infer_cfg", "(", "cache_urls", "=", "False", ")", "\n", "model", "=", "infer_engine", ".", "initialize_model_from_cfg", "(", "args", ".", "weights", ")", "\n", "start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "\n", "if", "os", ".", "path", ".", "isdir", "(", "args", ".", "im_or_folder", ")", ":", "\n", "        ", "im_list", "=", "glob", ".", "iglob", "(", "args", ".", "im_or_folder", "+", "\"/*.\"", "+", "args", ".", "image_ext", ")", "\n", "", "else", ":", "\n", "        ", "im_list", "=", "[", "args", ".", "im_or_folder", "]", "\n", "\n", "# extract bboxes from bottom-up attention model", "\n", "", "image_bboxes", "=", "{", "}", "\n", "if", "args", ".", "bbox_file", "is", "not", "None", ":", "\n", "        ", "image_bboxes", "=", "extract_bboxes", "(", "args", ".", "bbox_file", ")", "\n", "\n", "", "count", "=", "0", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_dir", ")", "\n", "\n", "", "for", "i", ",", "im_name", "in", "enumerate", "(", "im_list", ")", ":", "\n", "        ", "im_base_name", "=", "os", ".", "path", ".", "basename", "(", "im_name", ")", "\n", "image_id", "=", "int", "(", "im_base_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", ".", "split", "(", "\"_\"", ")", "[", "-", "1", "]", ")", "# for COCO", "\n", "if", "image_id", "%", "args", ".", "total_group", "==", "args", ".", "group_id", ":", "\n", "            ", "bbox", "=", "image_bboxes", "[", "image_id", "]", "if", "image_id", "in", "image_bboxes", "else", "None", "\n", "im", "=", "cv2", ".", "imread", "(", "im_name", ")", "\n", "if", "im", "is", "not", "None", ":", "\n", "                ", "outfile", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "output_dir", ",", "im_base_name", ".", "replace", "(", "\"jpg\"", ",", "\"npy\"", ")", "\n", ")", "\n", "lock_folder", "=", "outfile", ".", "replace", "(", "\"npy\"", ",", "\"lock\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "lock_folder", ")", "and", "os", ".", "path", ".", "exists", "(", "outfile", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "lock_folder", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "lock_folder", ")", "\n", "\n", "", "result", "=", "get_detections_from_im", "(", "\n", "cfg", ",", "\n", "model", ",", "\n", "im", ",", "\n", "image_id", ",", "\n", "args", ".", "feat_name", ",", "\n", "args", ".", "min_bboxes", ",", "\n", "args", ".", "max_bboxes", ",", "\n", "background", "=", "args", ".", "background", ",", "\n", "bboxes", "=", "bbox", ",", "\n", ")", "\n", "\n", "np", ".", "save", "(", "outfile", ",", "result", ")", "\n", "os", ".", "rmdir", "(", "lock_folder", ")", "\n", "\n", "", "count", "+=", "1", "\n", "\n", "if", "count", "%", "100", "==", "0", ":", "\n", "                ", "end", "=", "timeit", ".", "default_timer", "(", ")", "\n", "epoch_time", "=", "end", "-", "start", "\n", "print", "(", "\"process {:d} images after {:.1f} s\"", ".", "format", "(", "count", ",", "epoch_time", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_resnet_features.ResNet152FeatModule.__init__": [[39, 43], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "list", "RESNET152_MODEL.children"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ResNet152FeatModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "modules", "=", "list", "(", "RESNET152_MODEL", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", "\n", "self", ".", "feature_module", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_resnet_features.ResNet152FeatModule.forward": [[44, 46], ["extract_resnet_features.ResNet152FeatModule.feature_module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "feature_module", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_resnet_features.extract_image_feat": [[53, 65], ["PIL.Image.open().convert", "data_transforms", "torch.autograd.Variable", "_resnet_module", "img_transform.expand.expand", "img_transform.expand.unsqueeze", "img_var.cuda.cuda", "PIL.Image.open"], "function", ["None"], ["", "def", "extract_image_feat", "(", "img_file", ")", ":", "\n", "    ", "img", "=", "Image", ".", "open", "(", "img_file", ")", ".", "convert", "(", "\"RGB\"", ")", "\n", "img_transform", "=", "data_transforms", "(", "img", ")", "\n", "# make sure grey scale image is processed correctly", "\n", "if", "img_transform", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "        ", "img_transform", "=", "img_transform", ".", "expand", "(", "3", ",", "-", "1", ",", "-", "1", ")", "\n", "", "img_var", "=", "Variable", "(", "img_transform", ".", "unsqueeze", "(", "0", ")", ")", "\n", "if", "use_cuda", ":", "\n", "        ", "img_var", "=", "img_var", ".", "cuda", "(", ")", "\n", "\n", "", "img_feat", "=", "_resnet_module", "(", "img_var", ")", "\n", "return", "img_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_resnet_features.extract_dataset_pool5": [[67, 97], ["glob.glob", "enumerate", "os.path.exists", "os.makedirs", "os.path.basename", "os.path.basename.replace", "os.path.join", "extract_image_feat().permute.data.cpu().numpy", "numpy.save", "os.rmdir", "print", "os.path.exists", "os.path.exists", "os.makedirs", "extract_image_feat().permute", "os.path.exists", "print", "extract_image_feat().permute.data.cpu", "extract_resnet_features.extract_image_feat", "len"], "function", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_resnet_features.extract_image_feat"], ["", "def", "extract_dataset_pool5", "(", "image_dir", ",", "save_dir", ",", "prefix", ",", "ext_filter", ")", ":", "\n", "    ", "image_list", "=", "glob", "(", "image_dir", "+", "\"/*.\"", "+", "ext_filter", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "for", "n_im", ",", "impath", "in", "enumerate", "(", "image_list", ")", ":", "\n", "        ", "if", "(", "n_im", "+", "1", ")", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "\"processing %d / %d\"", "%", "(", "n_im", "+", "1", ",", "len", "(", "image_list", ")", ")", ")", "\n", "", "image_name", "=", "os", ".", "path", ".", "basename", "(", "impath", ")", "\n", "\n", "feat_name", "=", "image_name", ".", "replace", "(", "ext_filter", ",", "\"npy\"", ")", "\n", "feat_name", "=", "prefix", "+", "feat_name", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "feat_name", ")", "\n", "tmp_lock", "=", "save_path", "+", "\".lock\"", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", "and", "not", "os", ".", "path", ".", "exists", "(", "tmp_lock", ")", ":", "\n", "            ", "continue", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "tmp_lock", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "tmp_lock", ")", "\n", "\n", "# pool5_val = extract_image_feat(impath).permute(0, 2, 3, 1)", "\n", "", "try", ":", "\n", "            ", "pool5_val", "=", "extract_image_feat", "(", "impath", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"error for\"", "+", "image_name", ")", "\n", "continue", "\n", "\n", "", "feat", "=", "pool5_val", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "np", ".", "save", "(", "save_path", ",", "feat", ")", "\n", "os", ".", "rmdir", "(", "tmp_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor.__init__": [[36, 41], ["extract_features_vmb.FeatureExtractor.get_parser().parse_args", "extract_features_vmb.FeatureExtractor._build_detection_model", "os.makedirs", "extract_features_vmb.FeatureExtractor.get_parser"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features.parse_args", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor._build_detection_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor.get_parser"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "args", "=", "self", ".", "get_parser", "(", ")", ".", "parse_args", "(", ")", "\n", "self", ".", "detection_model", "=", "self", ".", "_build_detection_model", "(", ")", "\n", "\n", "os", ".", "makedirs", "(", "self", ".", "args", ".", "output_folder", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor._try_downloading_necessities": [[42, 49], ["print", "pythia.utils.general.download_file", "pythia.utils.general.download_file", "extract_features_vmb.FeatureExtractor.MODEL_URL.split", "extract_features_vmb.FeatureExtractor.CONFIG_URL.split"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.download_file", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.download_file"], ["", "def", "_try_downloading_necessities", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "model_file", "is", "None", ":", "\n", "            ", "print", "(", "\"Downloading model and configuration\"", ")", "\n", "self", ".", "args", ".", "model_file", "=", "self", ".", "MODEL_URL", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "self", ".", "args", ".", "config_file", "=", "self", ".", "CONFIG_URL", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "download_file", "(", "self", ".", "MODEL_URL", ")", "\n", "download_file", "(", "self", ".", "CONFIG_URL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor.get_parser": [[50, 79], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "methods", ["None"], ["", "", "def", "get_parser", "(", "self", ")", ":", "\n", "        ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--model_file\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "\"Detectron model file\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--config_file\"", ",", "default", "=", "None", ",", "type", "=", "str", ",", "help", "=", "\"Detectron config file\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--batch_size\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Batch size\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--num_features\"", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "\"Number of features to extract.\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output_folder\"", ",", "type", "=", "str", ",", "default", "=", "\"./output\"", ",", "help", "=", "\"Output folder\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--image_dir\"", ",", "type", "=", "str", ",", "help", "=", "\"Image directory or file\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--feature_name\"", ",", "type", "=", "str", ",", "help", "=", "\"The name of the feature to extract\"", ",", "\n", "default", "=", "\"fc6\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--confidence_threshold\"", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "\"Threshold of detection confidence above which boxes will be selected\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--background\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"The model will output predictions for the background class when set\"", "\n", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor._build_detection_model": [[80, 92], ["maskrcnn_benchmark.config.cfg.merge_from_file", "maskrcnn_benchmark.config.cfg.freeze", "maskrcnn_benchmark.modeling.detector.build_detection_model", "torch.load", "maskrcnn_benchmark.utils.model_serialization.load_state_dict", "maskrcnn_benchmark.modeling.detector.build_detection_model.to", "maskrcnn_benchmark.modeling.detector.build_detection_model.eval", "torch.load.pop", "torch.device"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.configuration.Configuration.freeze", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.load_state_dict", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.to"], ["", "def", "_build_detection_model", "(", "self", ")", ":", "\n", "        ", "cfg", ".", "merge_from_file", "(", "self", ".", "args", ".", "config_file", ")", "\n", "cfg", ".", "freeze", "(", ")", "\n", "\n", "model", "=", "build_detection_model", "(", "cfg", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "args", ".", "model_file", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n", "load_state_dict", "(", "model", ",", "checkpoint", ".", "pop", "(", "\"model\"", ")", ")", "\n", "\n", "model", ".", "to", "(", "\"cuda\"", ")", "\n", "model", ".", "eval", "(", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor._image_transform": [[93, 126], ["PIL.Image.open", "numpy.array().astype", "numpy.array", "numpy.min", "numpy.max", "cv2.resize", "torch.from_numpy().permute", "len", "numpy.repeat", "numpy.round", "numpy.array", "torch.from_numpy"], "methods", ["None"], ["", "def", "_image_transform", "(", "self", ",", "path", ")", ":", "\n", "        ", "img", "=", "Image", ".", "open", "(", "path", ")", "\n", "im", "=", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# IndexError: too many indices for array, grayscale images", "\n", "if", "len", "(", "im", ".", "shape", ")", "<", "3", ":", "\n", "            ", "im", "=", "np", ".", "repeat", "(", "im", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "3", ",", "axis", "=", "2", ")", "\n", "", "im", "=", "im", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "im", "-=", "np", ".", "array", "(", "[", "102.9801", ",", "115.9465", ",", "122.7717", "]", ")", "\n", "im_shape", "=", "im", ".", "shape", "\n", "im_height", "=", "im_shape", "[", "0", "]", "\n", "im_width", "=", "im_shape", "[", "1", "]", "\n", "im_size_min", "=", "np", ".", "min", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "im_size_max", "=", "np", ".", "max", "(", "im_shape", "[", "0", ":", "2", "]", ")", "\n", "\n", "# Scale based on minimum size", "\n", "im_scale", "=", "self", ".", "MIN_SIZE", "/", "im_size_min", "\n", "\n", "# Prevent the biggest axis from being more than max_size", "\n", "# If bigger, scale it down", "\n", "if", "np", ".", "round", "(", "im_scale", "*", "im_size_max", ")", ">", "self", ".", "MAX_SIZE", ":", "\n", "            ", "im_scale", "=", "self", ".", "MAX_SIZE", "/", "im_size_max", "\n", "\n", "", "im", "=", "cv2", ".", "resize", "(", "\n", "im", ",", "None", ",", "None", ",", "fx", "=", "im_scale", ",", "fy", "=", "im_scale", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", "\n", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "im", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "im_info", "=", "{", "\n", "\"width\"", ":", "im_width", ",", "\n", "\"height\"", ":", "im_height", "\n", "}", "\n", "\n", "return", "img", ",", "im_scale", ",", "im_info", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor._process_feature_extraction": [[127, 178], ["len", "[].split", "[].split", "range", "len", "torch.nn.functional.softmax", "torch.zeros().to", "torch.full_like", "range", "torch.sort", "feat_list.append", "torch.argmax", "info_list.append", "maskrcnn_benchmark.layers.nms", "torch.where", "torch.zeros", "bbox.cpu().numpy", "num_boxes.item", "torch.argmax.cpu().numpy", "bbox.cpu", "torch.argmax.cpu"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.to"], ["", "def", "_process_feature_extraction", "(", "\n", "self", ",", "output", ",", "im_scales", ",", "im_infos", ",", "feature_name", "=", "\"fc6\"", ",", "conf_thresh", "=", "0", "\n", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "output", "[", "0", "]", "[", "\"proposals\"", "]", ")", "\n", "n_boxes_per_image", "=", "[", "len", "(", "boxes", ")", "for", "boxes", "in", "output", "[", "0", "]", "[", "\"proposals\"", "]", "]", "\n", "score_list", "=", "output", "[", "0", "]", "[", "\"scores\"", "]", ".", "split", "(", "n_boxes_per_image", ")", "\n", "score_list", "=", "[", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "x", ",", "-", "1", ")", "for", "x", "in", "score_list", "]", "\n", "feats", "=", "output", "[", "0", "]", "[", "feature_name", "]", ".", "split", "(", "n_boxes_per_image", ")", "\n", "cur_device", "=", "score_list", "[", "0", "]", ".", "device", "\n", "\n", "feat_list", "=", "[", "]", "\n", "info_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "            ", "dets", "=", "output", "[", "0", "]", "[", "\"proposals\"", "]", "[", "i", "]", ".", "bbox", "/", "im_scales", "[", "i", "]", "\n", "scores", "=", "score_list", "[", "i", "]", "\n", "max_conf", "=", "torch", ".", "zeros", "(", "(", "scores", ".", "shape", "[", "0", "]", ")", ")", ".", "to", "(", "cur_device", ")", "\n", "conf_thresh_tensor", "=", "torch", ".", "full_like", "(", "max_conf", ",", "conf_thresh", ")", "\n", "start_index", "=", "1", "\n", "# Column 0 of the scores matrix is for the background class", "\n", "if", "self", ".", "args", ".", "background", ":", "\n", "                ", "start_index", "=", "0", "\n", "", "for", "cls_ind", "in", "range", "(", "start_index", ",", "scores", ".", "shape", "[", "1", "]", ")", ":", "\n", "                ", "cls_scores", "=", "scores", "[", ":", ",", "cls_ind", "]", "\n", "keep", "=", "nms", "(", "dets", ",", "cls_scores", ",", "0.5", ")", "\n", "max_conf", "[", "keep", "]", "=", "torch", ".", "where", "(", "\n", "# Better than max one till now and minimally greater than conf_thresh", "\n", "(", "cls_scores", "[", "keep", "]", ">", "max_conf", "[", "keep", "]", ")", "&", "\n", "(", "cls_scores", "[", "keep", "]", ">", "conf_thresh_tensor", "[", "keep", "]", ")", ",", "\n", "cls_scores", "[", "keep", "]", ",", "max_conf", "[", "keep", "]", "\n", ")", "\n", "\n", "", "sorted_scores", ",", "sorted_indices", "=", "torch", ".", "sort", "(", "max_conf", ",", "descending", "=", "True", ")", "\n", "num_boxes", "=", "(", "sorted_scores", "[", ":", "self", ".", "args", ".", "num_features", "]", "!=", "0", ")", ".", "sum", "(", ")", "\n", "keep_boxes", "=", "sorted_indices", "[", ":", "self", ".", "args", ".", "num_features", "]", "\n", "feat_list", ".", "append", "(", "feats", "[", "i", "]", "[", "keep_boxes", "]", ")", "\n", "bbox", "=", "output", "[", "0", "]", "[", "\"proposals\"", "]", "[", "i", "]", "[", "keep_boxes", "]", ".", "bbox", "/", "im_scales", "[", "i", "]", "\n", "# Predict the class label using the scores", "\n", "objects", "=", "torch", ".", "argmax", "(", "scores", "[", "keep_boxes", "]", "[", ":", ",", "start_index", ":", "]", ",", "dim", "=", "1", ")", "\n", "\n", "info_list", ".", "append", "(", "\n", "{", "\n", "\"bbox\"", ":", "bbox", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"num_boxes\"", ":", "num_boxes", ".", "item", "(", ")", ",", "\n", "\"objects\"", ":", "objects", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "\"image_width\"", ":", "im_infos", "[", "i", "]", "[", "\"width\"", "]", ",", "\n", "\"image_height\"", ":", "im_infos", "[", "i", "]", "[", "\"height\"", "]", ",", "\n", "}", "\n", ")", "\n", "\n", "", "return", "feat_list", ",", "info_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor.get_detectron_features": [[179, 202], ["maskrcnn_benchmark.structures.image_list.to_image_list", "current_img_list.to.to.to", "extract_features_vmb.FeatureExtractor._process_feature_extraction", "extract_features_vmb.FeatureExtractor._image_transform", "img_tensor.append", "im_scales.append", "im_infos.append", "torch.no_grad", "extract_features_vmb.FeatureExtractor.detection_model"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.to", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor._process_feature_extraction", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor._image_transform"], ["", "def", "get_detectron_features", "(", "self", ",", "image_paths", ")", ":", "\n", "        ", "img_tensor", ",", "im_scales", ",", "im_infos", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "\n", "for", "image_path", "in", "image_paths", ":", "\n", "            ", "im", ",", "im_scale", ",", "im_info", "=", "self", ".", "_image_transform", "(", "image_path", ")", "\n", "img_tensor", ".", "append", "(", "im", ")", "\n", "im_scales", ".", "append", "(", "im_scale", ")", "\n", "im_infos", ".", "append", "(", "im_info", ")", "\n", "\n", "# Image dimensions should be divisible by 32, to allow convolutions", "\n", "# in detector to work", "\n", "", "current_img_list", "=", "to_image_list", "(", "img_tensor", ",", "size_divisible", "=", "32", ")", "\n", "current_img_list", "=", "current_img_list", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "self", ".", "detection_model", "(", "current_img_list", ")", "\n", "\n", "", "feat_list", "=", "self", ".", "_process_feature_extraction", "(", "\n", "output", ",", "im_scales", ",", "im_infos", ",", "self", ".", "args", ".", "feature_name", ",", "\n", "self", ".", "args", ".", "confidence_threshold", "\n", ")", "\n", "\n", "return", "feat_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor._chunks": [[203, 206], ["range", "len"], "methods", ["None"], ["", "def", "_chunks", "(", "self", ",", "array", ",", "chunk_size", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "array", ")", ",", "chunk_size", ")", ":", "\n", "            ", "yield", "array", "[", "i", ":", "i", "+", "chunk_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor._save_feature": [[207, 217], ["os.path.basename", "numpy.save", "numpy.save", "os.path.basename.split", "os.path.join", "feature.cpu().numpy", "os.path.join", "feature.cpu"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.checkpoint.Checkpoint.save"], ["", "", "def", "_save_feature", "(", "self", ",", "file_name", ",", "feature", ",", "info", ")", ":", "\n", "        ", "file_base_name", "=", "os", ".", "path", ".", "basename", "(", "file_name", ")", "\n", "file_base_name", "=", "file_base_name", ".", "split", "(", "\".\"", ")", "[", "0", "]", "\n", "info_file_base_name", "=", "file_base_name", "+", "\"_info.npy\"", "\n", "file_base_name", "=", "file_base_name", "+", "\".npy\"", "\n", "\n", "np", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_folder", ",", "file_base_name", ")", ",", "feature", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_folder", ",", "info_file_base_name", ")", ",", "info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor.extract_features": [[218, 230], ["os.path.isfile", "extract_features_vmb.FeatureExtractor.get_detectron_features", "extract_features_vmb.FeatureExtractor._save_feature", "glob.glob", "extract_features_vmb.FeatureExtractor._chunks", "os.path.join", "extract_features_vmb.FeatureExtractor.get_detectron_features", "enumerate", "extract_features_vmb.FeatureExtractor._save_feature"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor.get_detectron_features", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor._save_feature", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor._chunks", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor.get_detectron_features", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.features.extract_features_vmb.FeatureExtractor._save_feature"], ["", "def", "extract_features", "(", "self", ")", ":", "\n", "        ", "image_dir", "=", "self", ".", "args", ".", "image_dir", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "image_dir", ")", ":", "\n", "            ", "features", ",", "infos", "=", "self", ".", "get_detectron_features", "(", "[", "image_dir", "]", ")", "\n", "self", ".", "_save_feature", "(", "image_dir", ",", "features", "[", "0", "]", ",", "infos", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "image_dir", ",", "\"*.jpg\"", ")", ")", "\n", "for", "chunk", "in", "self", ".", "_chunks", "(", "files", ",", "self", ".", "args", ".", "batch_size", ")", ":", "\n", "                ", "features", ",", "infos", "=", "self", ".", "get_detectron_features", "(", "chunk", ")", "\n", "for", "idx", ",", "file_name", "in", "enumerate", "(", "chunk", ")", ":", "\n", "                    ", "self", ".", "_save_feature", "(", "file_name", ",", "features", "[", "idx", "]", ",", "infos", "[", "idx", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter.__init__": [[18, 52], ["pythia.common.registry.registry.get", "pythia.common.registry.registry.get", "pythia.utils.timer.Timer", "test_reporter.TestReporter.config.get", "test_reporter.TestReporter.training_parameters.get", "test_reporter.TestReporter.test_task.get_tasks", "test_reporter.TestReporter.config.get", "pythia.utils.general.ckpt_name_from_core_args", "pythia.utils.general.foldername_from_config_override", "os.path.join", "os.path.join", "task.get_datasets", "os.path.exists", "os.makedirs", "test_reporter.TestReporter.datasets.append"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.multi_task.MultiTask.get_tasks", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.ckpt_name_from_core_args", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.general.foldername_from_config_override", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.base_task.BaseTask.get_datasets"], ["    ", "def", "__init__", "(", "self", ",", "multi_task_instance", ")", ":", "\n", "        ", "self", ".", "test_task", "=", "multi_task_instance", "\n", "self", ".", "task_type", "=", "multi_task_instance", ".", "dataset_type", "\n", "self", ".", "config", "=", "registry", ".", "get", "(", "\"config\"", ")", "\n", "self", ".", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "self", ".", "report", "=", "[", "]", "\n", "self", ".", "timer", "=", "Timer", "(", ")", "\n", "self", ".", "training_parameters", "=", "self", ".", "config", "[", "\"training_parameters\"", "]", "\n", "self", ".", "num_workers", "=", "self", ".", "training_parameters", "[", "\"num_workers\"", "]", "\n", "self", ".", "batch_size", "=", "self", ".", "training_parameters", "[", "\"batch_size\"", "]", "\n", "self", ".", "report_folder_arg", "=", "self", ".", "config", ".", "get", "(", "\"report_folder\"", ",", "None", ")", "\n", "self", ".", "experiment_name", "=", "self", ".", "training_parameters", ".", "get", "(", "\"experiment_name\"", ",", "\"\"", ")", "\n", "\n", "self", ".", "datasets", "=", "[", "]", "\n", "\n", "for", "task", "in", "self", ".", "test_task", ".", "get_tasks", "(", ")", ":", "\n", "            ", "for", "dataset", "in", "task", ".", "get_datasets", "(", ")", ":", "\n", "                ", "self", ".", "datasets", ".", "append", "(", "dataset", ")", "\n", "\n", "", "", "self", ".", "current_dataset_idx", "=", "-", "1", "\n", "self", ".", "current_dataset", "=", "self", ".", "datasets", "[", "self", ".", "current_dataset_idx", "]", "\n", "\n", "self", ".", "save_dir", "=", "self", ".", "config", ".", "get", "(", "\"save_dir\"", ",", "\"./save\"", ")", "\n", "self", ".", "report_folder", "=", "ckpt_name_from_core_args", "(", "self", ".", "config", ")", "\n", "self", ".", "report_folder", "+=", "foldername_from_config_override", "(", "self", ".", "config", ")", "\n", "\n", "self", ".", "report_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "self", ".", "report_folder", ")", "\n", "self", ".", "report_folder", "=", "os", ".", "path", ".", "join", "(", "self", ".", "report_folder", ",", "\"reports\"", ")", "\n", "\n", "if", "self", ".", "report_folder_arg", "is", "not", "None", ":", "\n", "            ", "self", ".", "report_folder", "=", "self", ".", "report_folder_arg", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "report_folder", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "report_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter.next_dataset": [[53, 65], ["test_reporter.TestReporter.flush_report", "len", "test_reporter.TestReporter.writer.write"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter.flush_report", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "", "def", "next_dataset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "current_dataset_idx", ">=", "0", ":", "\n", "            ", "self", ".", "flush_report", "(", ")", "\n", "\n", "", "self", ".", "current_dataset_idx", "+=", "1", "\n", "\n", "if", "self", ".", "current_dataset_idx", "==", "len", "(", "self", ".", "datasets", ")", ":", "\n", "            ", "return", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "current_dataset", "=", "self", ".", "datasets", "[", "self", ".", "current_dataset_idx", "]", "\n", "self", ".", "writer", ".", "write", "(", "\"Predicting for \"", "+", "self", ".", "current_dataset", ".", "_name", ")", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter.flush_report": [[66, 91], ["test_reporter.TestReporter.timer.get_time_hhmmss", "os.path.join", "test_reporter.TestReporter.writer.write", "pythia.utils.distributed_utils.is_main_process", "len", "open", "json.dump", "os.path.abspath"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.timer.Timer.get_time_hhmmss", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.is_main_process"], ["", "", "def", "flush_report", "(", "self", ")", ":", "\n", "        ", "if", "not", "is_main_process", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "name", "=", "self", ".", "current_dataset", ".", "_name", "\n", "time_format", "=", "\"%Y-%m-%dT%H:%M:%S\"", "\n", "time", "=", "self", ".", "timer", ".", "get_time_hhmmss", "(", "None", ",", "format", "=", "time_format", ")", "\n", "\n", "filename", "=", "name", "+", "\"_\"", "\n", "\n", "if", "len", "(", "self", ".", "experiment_name", ")", ">", "0", ":", "\n", "            ", "filename", "+=", "self", ".", "experiment_name", "+", "\"_\"", "\n", "\n", "", "filename", "+=", "self", ".", "task_type", "+", "\"_\"", "\n", "\n", "filename", "+=", "time", "+", "\".json\"", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "self", ".", "report_folder", ",", "filename", ")", "\n", "\n", "with", "open", "(", "filepath", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "self", ".", "report", ",", "f", ")", "\n", "\n", "", "self", ".", "writer", ".", "write", "(", "\n", "\"Wrote evalai predictions for %s to %s\"", "%", "(", "name", ",", "os", ".", "path", ".", "abspath", "(", "filepath", ")", ")", "\n", ")", "\n", "self", ".", "report", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter.get_dataloader": [[92, 100], ["test_reporter.TestReporter._add_extra_args_for_dataloader", "torch.utils.data.DataLoader", "pythia.common.batch_collator.BatchCollator"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader._add_extra_args_for_dataloader"], ["", "def", "get_dataloader", "(", "self", ")", ":", "\n", "        ", "other_args", "=", "self", ".", "_add_extra_args_for_dataloader", "(", ")", "\n", "return", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "current_dataset", ",", "\n", "collate_fn", "=", "BatchCollator", "(", ")", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "\n", "pin_memory", "=", "self", ".", "config", ".", "training_parameters", ".", "pin_memory", ",", "\n", "**", "other_args", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter._add_extra_args_for_dataloader": [[102, 126], ["pythia.utils.distributed_utils.get_world_size", "torch.utils.data.distributed.DistributedSampler", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_world_size"], ["", "def", "_add_extra_args_for_dataloader", "(", "self", ",", "other_args", "=", "{", "}", ")", ":", "\n", "        ", "training_parameters", "=", "self", ".", "config", ".", "training_parameters", "\n", "\n", "if", "(", "\n", "training_parameters", ".", "local_rank", "is", "not", "None", "\n", "and", "training_parameters", ".", "distributed", "\n", ")", ":", "\n", "            ", "other_args", "[", "\"sampler\"", "]", "=", "DistributedSampler", "(", "self", ".", "current_dataset", ")", "\n", "", "else", ":", "\n", "            ", "other_args", "[", "\"shuffle\"", "]", "=", "True", "\n", "\n", "", "batch_size", "=", "training_parameters", ".", "batch_size", "\n", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "batch_size", "%", "world_size", "!=", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Batch size {} must be divisible by number \"", "\n", "\"of GPUs {} used.\"", ".", "format", "(", "batch_size", ",", "world_size", ")", "\n", ")", "\n", "\n", "", "other_args", "[", "\"batch_size\"", "]", "=", "batch_size", "//", "world_size", "\n", "\n", "return", "other_args", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter.prepare_batch": [[127, 129], ["test_reporter.TestReporter.current_dataset.prepare_batch"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.prepare_batch"], ["", "def", "prepare_batch", "(", "self", ",", "batch", ")", ":", "\n", "        ", "return", "self", ".", "current_dataset", ".", "prepare_batch", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter.__len__": [[130, 132], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "current_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter.__getitem__": [[133, 135], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "current_dataset", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.test_reporter.TestReporter.add_to_report": [[136, 151], ["test_reporter.TestReporter.current_dataset.format_for_evalai", "pythia.utils.distributed_utils.gather_tensor", "pythia.utils.distributed_utils.gather_tensor().view", "pythia.utils.distributed_utils.gather_tensor().view", "pythia.utils.distributed_utils.gather_tensor().view", "pythia.utils.distributed_utils.is_main_process", "report.scores.size", "pythia.utils.distributed_utils.gather_tensor", "pythia.utils.distributed_utils.gather_tensor", "pythia.utils.distributed_utils.gather_tensor"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.coco.dataset.COCODataset.format_for_evalai", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.gather_tensor", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.is_main_process", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.gather_tensor", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.gather_tensor", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.gather_tensor"], ["", "def", "add_to_report", "(", "self", ",", "report", ")", ":", "\n", "# TODO: Later gather whole report for no opinions", "\n", "        ", "if", "self", ".", "current_dataset", ".", "_name", "==", "\"coco\"", ":", "\n", "            ", "report", ".", "captions", "=", "gather_tensor", "(", "report", ".", "captions", ")", "\n", "report", ".", "image_id", "=", "gather_tensor", "(", "report", ".", "image_id", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "report", ".", "scores", "=", "gather_tensor", "(", "report", ".", "scores", ")", ".", "view", "(", "-", "1", ",", "report", ".", "scores", ".", "size", "(", "-", "1", ")", ")", "\n", "report", ".", "question_id", "=", "gather_tensor", "(", "report", ".", "question_id", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "if", "not", "is_main_process", "(", ")", ":", "\n", "            ", "return", "\n", "\n", "", "results", "=", "self", ".", "current_dataset", ".", "format_for_evalai", "(", "report", ")", "\n", "\n", "self", ".", "report", "=", "self", ".", "report", "+", "results", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.Sample.__init__": [[36, 38], ["collections.OrderedDict.__init__"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__"], ["def", "__init__", "(", "self", ",", "init_dict", "=", "{", "}", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "init_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.Sample.__setattr__": [[39, 41], ["None"], "methods", ["None"], ["", "def", "__setattr__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.Sample.__getattr__": [[42, 47], ["AttributeError"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "key", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "key", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "AttributeError", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.Sample.fields": [[48, 56], ["list", "sample.Sample.keys"], "methods", ["None"], ["", "", "def", "fields", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get current attributes/fields registered under the sample.\n\n        Returns:\n            List[str]: Attributes registered under the Sample.\n\n        \"\"\"", "\n", "return", "list", "(", "self", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.__init__": [[78, 119], ["collections.OrderedDict.__init__", "sample.SampleList._check_and_load_dict", "sample.SampleList._check_and_load_tuple", "samples[].keys", "len", "isinstance", "enumerate", "isinstance", "[].new_empty", "sample.SampleList._get_data_copy", "sample.SampleList", "len", "sample.SampleList._get_tensor_field", "sample.SampleList._set_tensor_field", "isinstance", "AssertionError", "[].size", "range", "len", "sample[].size", "[].size", "len", "sample[].size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList._check_and_load_dict", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.report.Report._check_and_load_tuple", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList._get_data_copy", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList._get_tensor_field", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList._set_tensor_field"], ["def", "__init__", "(", "self", ",", "samples", "=", "[", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "self", ")", "\n", "\n", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "_check_and_load_dict", "(", "samples", ")", ":", "\n", "            ", "return", "\n", "# If passed sample list was in form of key, value pairs of tuples", "\n", "# return after loading these", "\n", "", "if", "self", ".", "_check_and_load_tuple", "(", "samples", ")", ":", "\n", "            ", "return", "\n", "\n", "", "fields", "=", "samples", "[", "0", "]", ".", "keys", "(", ")", "\n", "\n", "for", "field", "in", "fields", ":", "\n", "            ", "if", "isinstance", "(", "samples", "[", "0", "]", "[", "field", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "size", "=", "(", "len", "(", "samples", ")", ",", "*", "samples", "[", "0", "]", "[", "field", "]", ".", "size", "(", ")", ")", "\n", "self", "[", "field", "]", "=", "samples", "[", "0", "]", "[", "field", "]", ".", "new_empty", "(", "size", ")", "\n", "if", "self", ".", "_get_tensor_field", "(", ")", "is", "None", ":", "\n", "                    ", "self", ".", "_set_tensor_field", "(", "field", ")", "\n", "", "", "else", ":", "\n", "                ", "self", "[", "field", "]", "=", "[", "None", "for", "_", "in", "range", "(", "len", "(", "samples", ")", ")", "]", "\n", "\n", "", "for", "idx", ",", "sample", "in", "enumerate", "(", "samples", ")", ":", "\n", "# it should be a tensor but not a 0-d tensor", "\n", "#print(\"Field : {}\".format(field))", "\n", "                ", "if", "(", "\n", "isinstance", "(", "sample", "[", "field", "]", ",", "torch", ".", "Tensor", ")", "\n", "and", "len", "(", "sample", "[", "field", "]", ".", "size", "(", ")", ")", "!=", "0", "\n", "and", "sample", "[", "field", "]", ".", "size", "(", "0", ")", "!=", "samples", "[", "0", "]", "[", "field", "]", ".", "size", "(", "0", ")", "\n", ")", ":", "\n", "                    ", "raise", "AssertionError", "(", "\n", "\"Fields for all samples must be equally sized. \"", "\n", "\"{} is of different sizes\"", ".", "format", "(", "field", ")", "\n", ")", "\n", "\n", "", "self", "[", "field", "]", "[", "idx", "]", "=", "self", ".", "_get_data_copy", "(", "sample", "[", "field", "]", ")", "\n", "\n", "", "if", "isinstance", "(", "samples", "[", "0", "]", "[", "field", "]", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "                ", "self", "[", "field", "]", "=", "SampleList", "(", "self", "[", "field", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList._check_and_load_tuple": [[120, 127], ["isinstance", "isinstance", "sample.SampleList.add_field"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.add_field"], ["", "", "", "def", "_check_and_load_tuple", "(", "self", ",", "samples", ")", ":", "\n", "        ", "if", "isinstance", "(", "samples", "[", "0", "]", ",", "(", "tuple", ",", "list", ")", ")", "and", "isinstance", "(", "samples", "[", "0", "]", "[", "0", "]", ",", "str", ")", ":", "\n", "            ", "for", "kv_pair", "in", "samples", ":", "\n", "                ", "self", ".", "add_field", "(", "kv_pair", "[", "0", "]", ",", "kv_pair", "[", "1", "]", ")", "\n", "", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList._check_and_load_dict": [[128, 135], ["isinstance", "samples.items", "sample.SampleList.add_field"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.add_field"], ["", "", "def", "_check_and_load_dict", "(", "self", ",", "samples", ")", ":", "\n", "        ", "if", "isinstance", "(", "samples", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "            ", "for", "key", ",", "value", "in", "samples", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "add_field", "(", "key", ",", "value", ")", "\n", "", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList._fix_sample_type": [[136, 143], ["isinstance", "proper_samples.append", "sample.Sample"], "methods", ["None"], ["", "", "def", "_fix_sample_type", "(", "self", ",", "samples", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "samples", "[", "0", "]", ",", "Sample", ")", ":", "\n", "            ", "proper_samples", "=", "[", "]", "\n", "for", "sample", "in", "samples", ":", "\n", "                ", "proper_samples", ".", "append", "(", "Sample", "(", "sample", ")", ")", "\n", "", "samples", "=", "proper_samples", "\n", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.__getattr__": [[144, 161], ["Sample.SampleList.keys", "Sample.Sample", "AttributeError", "Sample.SampleList.fields"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.report.Report.fields"], ["", "def", "__getattr__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "key", "not", "in", "self", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Key {} not found in the SampleList. \"", "\n", "\"Valid choices are {}\"", ".", "format", "(", "key", ",", "self", ".", "fields", "(", ")", ")", "\n", ")", "\n", "", "fields", "=", "self", ".", "keys", "(", ")", "\n", "\n", "if", "key", "in", "fields", ":", "\n", "            ", "return", "self", "[", "key", "]", "\n", "\n", "", "sample", "=", "Sample", "(", ")", "\n", "\n", "for", "field", "in", "fields", ":", "\n", "            ", "sample", "[", "field", "]", "=", "self", "[", "field", "]", "[", "key", "]", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.get_item_list": [[162, 177], ["sample.SampleList"], "methods", ["None"], ["", "def", "get_item_list", "(", "self", ",", "key", ")", ":", "\n", "        ", "\"\"\"Get ``SampleList`` of only one particular attribute that is present\n        in the ``SampleList``.\n\n        Args:\n            key (str): Attribute whose ``SampleList`` will be made.\n\n        Returns:\n            SampleList: SampleList containing only the attribute value of the key\n            which was passed.\n\n        \"\"\"", "\n", "sample", "=", "self", "[", "key", "]", "\n", "\n", "return", "SampleList", "(", "[", "sample", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.copy": [[178, 193], ["sample.SampleList", "sample.SampleList.fields", "sample.SampleList.add_field"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.report.Report.fields", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.add_field"], ["", "def", "copy", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get a copy of the current SampleList\n\n        Returns:\n            SampleList: Copy of current SampleList.\n\n        \"\"\"", "\n", "sample_list", "=", "SampleList", "(", ")", "\n", "\n", "fields", "=", "self", ".", "fields", "(", ")", "\n", "\n", "for", "field", "in", "fields", ":", "\n", "            ", "sample_list", ".", "add_field", "(", "field", ",", "self", "[", "field", "]", ")", "\n", "\n", "", "return", "sample_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.fields": [[194, 202], ["list", "sample.SampleList.keys"], "methods", ["None"], ["", "def", "fields", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get current attributes/fields registered under the SampleList.\n\n        Returns:\n            List[str]: list of attributes of the SampleList.\n\n        \"\"\"", "\n", "return", "list", "(", "self", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.get_fields": [[203, 228], ["sample.SampleList.fields", "sample.SampleList", "sample.SampleList.add_field", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.report.Report.fields", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.add_field"], ["", "def", "get_fields", "(", "self", ",", "fields", ")", ":", "\n", "        ", "\"\"\"Get a new ``SampleList`` generated from the current ``SampleList``\n        but contains only the attributes passed in `fields` argument\n\n        Args:\n            fields (List[str]): Attributes whose ``SampleList`` will be made.\n\n        Returns:\n            SampleList: SampleList containing only the attribute values of the fields\n            which were passed.\n\n        \"\"\"", "\n", "current_fields", "=", "self", ".", "fields", "(", ")", "\n", "\n", "return_list", "=", "SampleList", "(", ")", "\n", "\n", "for", "field", "in", "fields", ":", "\n", "            ", "if", "field", "not", "in", "current_fields", ":", "\n", "                ", "raise", "AttributeError", "(", "\n", "\"{} not present in SampleList. \"", "\n", "\"Valid choices are {}\"", ".", "format", "(", "field", ",", "current_fields", ")", "\n", ")", "\n", "", "return_list", ".", "add_field", "(", "field", ",", "self", "[", "field", "]", ")", "\n", "\n", "", "return", "return_list", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.get_field": [[229, 236], ["None"], "methods", ["None"], ["", "def", "get_field", "(", "self", ",", "field", ")", ":", "\n", "        ", "\"\"\"Get value of a particular attribute\n\n        Args:\n            field (str): Attribute whose value is to be returned.\n        \"\"\"", "\n", "return", "self", "[", "field", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList._get_data_copy": [[237, 243], ["isinstance", "data.clone", "copy.deepcopy"], "methods", ["None"], ["", "def", "_get_data_copy", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "copy_", "=", "data", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "copy_", "=", "deepcopy", "(", "data", ")", "\n", "", "return", "copy_", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList._get_tensor_field": [[244, 246], ["sample.SampleList.__dict__.get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "def", "_get_tensor_field", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", ".", "get", "(", "SampleList", ".", "_TENSOR_FIELD_", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList._set_tensor_field": [[247, 249], ["None"], "methods", ["None"], ["", "def", "_set_tensor_field", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "__dict__", "[", "SampleList", ".", "_TENSOR_FIELD_", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.get_batch_size": [[250, 262], ["sample.SampleList._get_tensor_field", "sample.SampleList.size"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList._get_tensor_field"], ["", "def", "get_batch_size", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get batch size of the current ``SampleList``. There must be a tensor\n        field present in the ``SampleList`` currently.\n\n        Returns:\n            int: Size of the batch in ``SampleList``.\n\n        \"\"\"", "\n", "tensor_field", "=", "self", ".", "_get_tensor_field", "(", ")", "\n", "assert", "tensor_field", "is", "not", "None", ",", "\"There is no tensor yet in SampleList\"", "\n", "\n", "return", "self", "[", "tensor_field", "]", ".", "size", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.add_field": [[263, 295], ["sample.SampleList.fields", "sample.SampleList._get_tensor_field", "len", "sample.SampleList._get_data_copy", "sample.SampleList._get_data_copy", "isinstance", "sample.SampleList._set_tensor_field", "isinstance", "AssertionError", "len", "data.size", "sample.SampleList.size", "data.size", "len", "len"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.report.Report.fields", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList._get_tensor_field", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList._get_data_copy", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList._get_data_copy", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList._set_tensor_field"], ["", "def", "add_field", "(", "self", ",", "field", ",", "data", ")", ":", "\n", "        ", "\"\"\"Add an attribute ``field`` with value ``data`` to the SampleList\n\n        Args:\n            field (str): Key under which the data will be added.\n            data (object): Data to be added, can be a ``torch.Tensor``, ``list``\n                         or ``Sample``\n        \"\"\"", "\n", "fields", "=", "self", ".", "fields", "(", ")", "\n", "tensor_field", "=", "self", ".", "_get_tensor_field", "(", ")", "\n", "\n", "if", "len", "(", "fields", ")", "==", "0", ":", "\n", "            ", "self", "[", "field", "]", "=", "self", ".", "_get_data_copy", "(", "data", ")", "\n", "", "else", ":", "\n", "            ", "if", "(", "\n", "isinstance", "(", "data", ",", "torch", ".", "Tensor", ")", "\n", "and", "len", "(", "data", ".", "size", "(", ")", ")", "!=", "0", "\n", "and", "tensor_field", "is", "not", "None", "\n", "and", "data", ".", "size", "(", "0", ")", "!=", "self", "[", "tensor_field", "]", ".", "size", "(", "0", ")", "\n", ")", ":", "\n", "                ", "raise", "AssertionError", "(", "\n", "\"A tensor field to be added must \"", "\n", "\"have same size as existing tensor \"", "\n", "\"fields in SampleList. \"", "\n", "\"Passed size: {}, Required size: {}\"", ".", "format", "(", "\n", "len", "(", "data", ")", ",", "len", "(", "self", "[", "fields", "[", "0", "]", "]", ")", "\n", ")", "\n", ")", "\n", "", "self", "[", "field", "]", "=", "self", ".", "_get_data_copy", "(", "data", ")", "\n", "\n", "", "if", "isinstance", "(", "self", "[", "field", "]", ",", "torch", ".", "Tensor", ")", "and", "tensor_field", "is", "None", ":", "\n", "            ", "self", ".", "_set_tensor_field", "(", "field", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.to": [[296, 327], ["sample.SampleList.keys", "sample.SampleList.copy", "isinstance", "torch.device", "hasattr", "isinstance", "TypeError", "sample_list[].to", "type"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.copy", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.sample.SampleList.to"], ["", "", "def", "to", "(", "self", ",", "device", ",", "non_blocking", "=", "True", ")", ":", "\n", "        ", "\"\"\"Similar to ``.to`` function on a `torch.Tensor`. Moves all of the\n        tensors present inside the ``SampleList`` to a particular device. If an\n        attribute's value is not a tensor, it is ignored and kept as it is.\n\n        Args:\n            device (str|torch.device): Device on which the ``SampleList`` should\n                                       moved.\n            non_blocking (bool): Whether the move should be non_blocking. Default: True\n\n        Returns:\n            SampleList: a SampleList moved to the ``device``.\n\n        \"\"\"", "\n", "fields", "=", "self", ".", "keys", "(", ")", "\n", "sample_list", "=", "self", ".", "copy", "(", ")", "\n", "if", "not", "isinstance", "(", "device", ",", "torch", ".", "device", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "device", ",", "str", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"device must be either 'str' or \"", "\n", "\"'torch.device' type, {} found\"", ".", "format", "(", "type", "(", "device", ")", ")", "\n", ")", "\n", "", "device", "=", "torch", ".", "device", "(", "device", ")", "\n", "\n", "", "for", "field", "in", "fields", ":", "\n", "            ", "if", "hasattr", "(", "sample_list", "[", "field", "]", ",", "\"to\"", ")", ":", "\n", "                ", "sample_list", "[", "field", "]", "=", "sample_list", "[", "field", "]", ".", "to", "(", "\n", "device", ",", "non_blocking", "=", "non_blocking", "\n", ")", "\n", "\n", "", "", "return", "sample_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.SmoothedValue.__init__": [[13, 16], ["meter.SmoothedValue.reset"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.SmoothedValue.reset"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ")", ":", "\n", "        ", "self", ".", "window_size", "=", "window_size", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.SmoothedValue.reset": [[17, 22], ["collections.deque"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "self", ".", "window_size", ")", "\n", "self", ".", "series", "=", "[", "]", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.SmoothedValue.update": [[23, 28], ["meter.SmoothedValue.deque.append", "meter.SmoothedValue.series.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "series", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "total", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.SmoothedValue.median": [[29, 33], ["torch.tensor", "torch.tensor.median().item", "list", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.SmoothedValue.avg": [[34, 38], ["torch.tensor", "torch.tensor.mean().item", "list", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.SmoothedValue.global_avg": [[39, 42], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.SmoothedValue.get_latest": [[43, 45], ["None"], "methods", ["None"], ["", "def", "get_latest", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "deque", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.__init__": [[48, 51], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\", \"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update": [[52, 60], ["update_dict.items", "isinstance", "isinstance", "meter.Meter.meters[].update", "v.mean.mean.item", "v.mean.mean.dim", "v.mean.mean.mean"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update"], ["", "def", "update", "(", "self", ",", "update_dict", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "update_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "if", "v", ".", "dim", "(", ")", "!=", "0", ":", "\n", "                    ", "v", "=", "v", ".", "mean", "(", ")", "\n", "", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.update_from_meter": [[61, 65], ["meter.meters.items", "isinstance"], "methods", ["None"], ["", "", "def", "update_from_meter", "(", "self", ",", "meter", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "meter", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "assert", "isinstance", "(", "value", ",", "SmoothedValue", ")", "\n", "self", ".", "meters", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.__getattr__": [[66, 73], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\n", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.get_scalar_dict": [[75, 81], ["meter.Meter.meters.items", "v.get_latest"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.SmoothedValue.get_latest"], ["", "def", "get_scalar_dict", "(", "self", ")", ":", "\n", "        ", "scalar_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "scalar_dict", "[", "k", "]", "=", "v", ".", "get_latest", "(", ")", "\n", "\n", "", "return", "scalar_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.meter.Meter.__str__": [[82, 94], ["meter.Meter.meters.items", "meter.Meter.delimiter.join", "loss_str.append", "loss_str.append"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "if", "\"train\"", "in", "name", ":", "\n", "                ", "loss_str", ".", "append", "(", "\n", "\"{}: {:.4f} ({:.4f})\"", ".", "format", "(", "name", ",", "meter", ".", "median", ",", "meter", ".", "global_avg", ")", "\n", ")", "\n", "", "else", ":", "\n", "# In case of val print global avg", "\n", "                ", "loss_str", ".", "append", "(", "\"{}: {:.4f}\"", ".", "format", "(", "name", ",", "meter", ".", "global_avg", ")", ")", "\n", "\n", "", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.report.Report.__init__": [[10, 41], ["collections.OrderedDict.__init__", "report.Report._check_and_load_tuple", "enumerate", "pythia.common.registry.registry.get", "enumerate", "arg.items", "isinstance", "TypeError", "report.Report.warning_string.format", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.report.Report._check_and_load_tuple", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["    ", "def", "__init__", "(", "self", ",", "batch", ",", "model_output", "=", "{", "}", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "self", ")", "\n", "if", "self", ".", "_check_and_load_tuple", "(", "batch", ")", ":", "\n", "            ", "return", "\n", "\n", "", "all_args", "=", "[", "batch", ",", "model_output", "]", "+", "[", "*", "args", "]", "\n", "for", "idx", ",", "arg", "in", "enumerate", "(", "all_args", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "arg", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "                ", "raise", "TypeError", "(", "\n", "\"Argument {:d}, {} must be of instance of \"", "\n", "\"collections.abc.Mapping\"", ".", "format", "(", "idx", ",", "arg", ")", "\n", ")", "\n", "\n", "", "", "self", ".", "writer", "=", "registry", ".", "get", "(", "\"writer\"", ")", "\n", "\n", "self", ".", "warning_string", "=", "(", "\n", "\"Updating forward report with key {}\"", "\n", "\"{}, but it already exists in {}. \"", "\n", "\"Please consider using a different key, \"", "\n", "\"as this can cause issues during loss and \"", "\n", "\"metric calculations.\"", "\n", ")", "\n", "\n", "for", "idx", ",", "arg", "in", "enumerate", "(", "all_args", ")", ":", "\n", "            ", "for", "key", ",", "item", "in", "arg", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "in", "self", "and", "idx", ">=", "2", ":", "\n", "                    ", "log", "=", "self", ".", "warning_string", ".", "format", "(", "\n", "key", ",", "\"\"", ",", "\"in previous arguments to report\"", "\n", ")", "\n", "warnings", ".", "warn", "(", "log", ")", "\n", "", "self", "[", "key", "]", "=", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.report.Report._check_and_load_tuple": [[42, 52], ["isinstance", "isinstance", "isinstance"], "methods", ["None"], ["", "", "", "def", "_check_and_load_tuple", "(", "self", ",", "batch", ")", ":", "\n", "        ", "if", "isinstance", "(", "batch", ",", "collections", ".", "abc", ".", "Mapping", ")", ":", "\n", "            ", "return", "False", "\n", "\n", "", "if", "isinstance", "(", "batch", "[", "0", "]", ",", "(", "tuple", ",", "list", ")", ")", "and", "isinstance", "(", "batch", "[", "0", "]", "[", "0", "]", ",", "str", ")", ":", "\n", "            ", "for", "kv_pair", "in", "batch", ":", "\n", "                ", "self", "[", "kv_pair", "[", "0", "]", "]", "=", "kv_pair", "[", "1", "]", "\n", "", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.report.Report.__setattr__": [[53, 55], ["None"], "methods", ["None"], ["", "", "def", "__setattr__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.report.Report.__getattr__": [[56, 58], ["None"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.report.Report.fields": [[59, 61], ["list", "report.Report.keys"], "methods", ["None"], ["", "def", "fields", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "keys", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register_task": [[55, 84], ["issubclass"], "methods", ["None"], ["@", "classmethod", "\n", "def", "register_task", "(", "cls", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Register a task to registry with key 'name'\n\n        Args:\n            name: Key with which the task will be registered.\n\n        Usage::\n\n            from pythia.common.registry import registry\n            from pythia.tasks.base_task import BaseTask\n\n\n            @registry.register_task(\"vqa\")\n            class VQATask(BaseTask):\n                ...\n\n        \"\"\"", "\n", "\n", "def", "wrap", "(", "task_cls", ")", ":", "\n", "            ", "from", "pythia", ".", "tasks", ".", "base_task", "import", "BaseTask", "\n", "\n", "assert", "issubclass", "(", "\n", "task_cls", ",", "BaseTask", "\n", ")", ",", "\"All task must inherit BaseTask class\"", "\n", "cls", ".", "mapping", "[", "\"task_name_mapping\"", "]", "[", "name", "]", "=", "task_cls", "\n", "return", "task_cls", "\n", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register_trainer": [[85, 107], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "register_trainer", "(", "cls", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Register a trainer to registry with key 'name'\n\n        Args:\n            name: Key with which the trainer will be registered.\n\n        Usage::\n\n            from pythia.common.registry import registry\n            from pythia.trainers.custom_trainer import CustomTrainer\n\n\n            @registry.register_trainer(\"custom_trainer\")\n            class CustomTrainer():\n                ...\n\n        \"\"\"", "\n", "def", "wrap", "(", "trainer_cls", ")", ":", "\n", "            ", "cls", ".", "mapping", "[", "\"trainer_name_mapping\"", "]", "[", "name", "]", "=", "trainer_cls", "\n", "return", "trainer_cls", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register_builder": [[108, 137], ["issubclass"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "register_builder", "(", "cls", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Register a dataset builder to registry with key 'name'\n\n        Args:\n            name: Key with which the metric will be registered.\n\n        Usage::\n\n            from pythia.common.registry import registry\n            from pythia.tasks.base_dataset_builder import BaseDatasetBuilder\n\n\n            @registry.register_builder(\"vqa2\")\n            class VQA2Builder(BaseDatasetBuilder):\n                ...\n\n        \"\"\"", "\n", "\n", "def", "wrap", "(", "builder_cls", ")", ":", "\n", "            ", "from", "pythia", ".", "tasks", ".", "base_dataset_builder", "import", "BaseDatasetBuilder", "\n", "\n", "assert", "issubclass", "(", "\n", "builder_cls", ",", "BaseDatasetBuilder", "\n", ")", ",", "\"All builders must inherit BaseDatasetBuilder class\"", "\n", "cls", ".", "mapping", "[", "\"builder_name_mapping\"", "]", "[", "name", "]", "=", "builder_cls", "\n", "return", "builder_cls", "\n", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register_metric": [[138, 167], ["issubclass"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "register_metric", "(", "cls", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Register a metric to registry with key 'name'\n\n        Args:\n            name: Key with which the metric will be registered.\n\n        Usage::\n\n            from pythia.common.registry import registry\n            from pythia.modules.metrics import BaseMetric\n\n\n            @registry.register_metric(\"r@1\")\n            class RecallAt1(BaseMetric):\n                ...\n\n        \"\"\"", "\n", "\n", "def", "wrap", "(", "func", ")", ":", "\n", "            ", "from", "pythia", ".", "modules", ".", "metrics", "import", "BaseMetric", "\n", "\n", "assert", "issubclass", "(", "\n", "func", ",", "BaseMetric", "\n", ")", ",", "\"All Metric must inherit BaseMetric class\"", "\n", "cls", ".", "mapping", "[", "\"metric_name_mapping\"", "]", "[", "name", "]", "=", "func", "\n", "return", "func", "\n", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register_loss": [[168, 196], ["issubclass"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "register_loss", "(", "cls", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Register a loss to registry with key 'name'\n\n        Args:\n            name: Key with which the loss will be registered.\n\n        Usage::\n\n            from pythia.common.registry import registry\n            from torch import nn\n\n            @registry.register_task(\"logit_bce\")\n            class LogitBCE(nn.Module):\n                ...\n\n        \"\"\"", "\n", "\n", "def", "wrap", "(", "func", ")", ":", "\n", "            ", "from", "torch", "import", "nn", "\n", "\n", "assert", "issubclass", "(", "\n", "func", ",", "nn", ".", "Module", "\n", ")", ",", "\"All loss must inherit torch.nn.Module class\"", "\n", "cls", ".", "mapping", "[", "\"loss_name_mapping\"", "]", "[", "name", "]", "=", "func", "\n", "return", "func", "\n", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register_fusion": [[197, 224], ["issubclass"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "register_fusion", "(", "cls", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Register a fusion technique to registry with key 'name'\n\n        Args:\n            name: Key with which the fusion technique will be registered\n\n        Usage::\n\n            from pythia.common.registry import registry\n            from torch import nn\n\n            @registry.register_fusion(\"linear_sum\")\n            class LinearSum():\n                ...\n        \"\"\"", "\n", "\n", "def", "wrap", "(", "func", ")", ":", "\n", "            ", "from", "torch", "import", "nn", "\n", "\n", "assert", "issubclass", "(", "\n", "func", ",", "nn", ".", "Module", "\n", ")", ",", "\"All Fusion must inherit torch.nn.Module class\"", "\n", "cls", ".", "mapping", "[", "\"fusion_name_mapping\"", "]", "[", "name", "]", "=", "func", "\n", "return", "func", "\n", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register_model": [[225, 252], ["issubclass"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "register_model", "(", "cls", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Register a model to registry with key 'name'\n\n        Args:\n            name: Key with which the model will be registered.\n\n        Usage::\n\n            from pythia.common.registry import registry\n            from pythia.models.base_model import BaseModel\n\n            @registry.register_task(\"pythia\")\n            class Pythia(BaseModel):\n                ...\n        \"\"\"", "\n", "\n", "def", "wrap", "(", "func", ")", ":", "\n", "            ", "from", "pythia", ".", "models", ".", "base_model", "import", "BaseModel", "\n", "\n", "assert", "issubclass", "(", "\n", "func", ",", "BaseModel", "\n", ")", ",", "\"All models must inherit BaseModel class\"", "\n", "cls", ".", "mapping", "[", "\"model_name_mapping\"", "]", "[", "name", "]", "=", "func", "\n", "return", "func", "\n", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register_processor": [[253, 281], ["issubclass"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "register_processor", "(", "cls", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Register a processor to registry with key 'name'\n\n        Args:\n            name: Key with which the processor will be registered.\n\n        Usage::\n\n            from pythia.common.registry import registry\n            from pythia.tasks.processors import BaseProcessor\n\n            @registry.register_task(\"glove\")\n            class GloVe(BaseProcessor):\n                ...\n\n        \"\"\"", "\n", "\n", "def", "wrap", "(", "func", ")", ":", "\n", "            ", "from", "pythia", ".", "tasks", ".", "processors", "import", "BaseProcessor", "\n", "\n", "assert", "issubclass", "(", "\n", "func", ",", "BaseProcessor", "\n", ")", ",", "\"All Processor classes must inherit BaseProcessor class\"", "\n", "cls", ".", "mapping", "[", "\"processor_name_mapping\"", "]", "[", "name", "]", "=", "func", "\n", "return", "func", "\n", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register_optimizer": [[282, 289], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "register_optimizer", "(", "cls", ",", "name", ")", ":", "\n", "        ", "def", "wrap", "(", "func", ")", ":", "\n", "            ", "cls", ".", "mapping", "[", "\"optimizer_name_mapping\"", "]", "[", "name", "]", "=", "func", "\n", "return", "func", "\n", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register_scheduler": [[290, 297], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "register_scheduler", "(", "cls", ",", "name", ")", ":", "\n", "        ", "def", "wrap", "(", "func", ")", ":", "\n", "            ", "cls", ".", "mapping", "[", "\"scheduler_name_mapping\"", "]", "[", "name", "]", "=", "func", "\n", "return", "func", "\n", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register_decoder": [[298, 327], ["issubclass"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "register_decoder", "(", "cls", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Register a decoder to registry with key 'name'\n\n        Args:\n            name: Key with which the decoder will be registered.\n\n        Usage::\n\n            from pythia.common.registry import registry\n            from pythia.utils.text_utils import TextDecoder\n\n\n            @registry.register_decoder(\"nucleus_sampling\")\n            class NucleusSampling(TextDecoder):\n                ...\n\n        \"\"\"", "\n", "\n", "def", "wrap", "(", "decoder_cls", ")", ":", "\n", "            ", "from", "pythia", ".", "utils", ".", "text_utils", "import", "TextDecoder", "\n", "\n", "assert", "issubclass", "(", "\n", "decoder_cls", ",", "TextDecoder", "\n", ")", ",", "\"All decoders must inherit TextDecoder class\"", "\n", "cls", ".", "mapping", "[", "\"decoder_name_mapping\"", "]", "[", "name", "]", "=", "decoder_cls", "\n", "return", "decoder_cls", "\n", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.register": [[328, 350], ["name.split"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "register", "(", "cls", ",", "name", ",", "obj", ")", ":", "\n", "        ", "r\"\"\"Register an item to registry with key 'name'\n\n        Args:\n            name: Key with which the item will be registered.\n\n        Usage::\n\n            from pythia.common.registry import registry\n\n            registry.register(\"config\", {})\n        \"\"\"", "\n", "path", "=", "name", ".", "split", "(", "\".\"", ")", "\n", "current", "=", "cls", ".", "mapping", "[", "\"state\"", "]", "\n", "\n", "for", "part", "in", "path", "[", ":", "-", "1", "]", ":", "\n", "            ", "if", "part", "not", "in", "current", ":", "\n", "                ", "current", "[", "part", "]", "=", "{", "}", "\n", "", "current", "=", "current", "[", "part", "]", "\n", "\n", "", "current", "[", "path", "[", "-", "1", "]", "]", "=", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_task_class": [[351, 354], ["cls.mapping[].get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "@", "classmethod", "\n", "def", "get_task_class", "(", "cls", ",", "name", ")", ":", "\n", "        ", "return", "cls", ".", "mapping", "[", "\"task_name_mapping\"", "]", ".", "get", "(", "name", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_trainer_class": [[355, 358], ["cls.mapping[].get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "@", "classmethod", "\n", "def", "get_trainer_class", "(", "cls", ",", "name", ")", ":", "\n", "        ", "return", "cls", ".", "mapping", "[", "\"trainer_name_mapping\"", "]", ".", "get", "(", "name", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_builder_class": [[359, 362], ["cls.mapping[].get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "@", "classmethod", "\n", "def", "get_builder_class", "(", "cls", ",", "name", ")", ":", "\n", "        ", "return", "cls", ".", "mapping", "[", "\"builder_name_mapping\"", "]", ".", "get", "(", "name", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_model_class": [[363, 366], ["cls.mapping[].get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "@", "classmethod", "\n", "def", "get_model_class", "(", "cls", ",", "name", ")", ":", "\n", "        ", "return", "cls", ".", "mapping", "[", "\"model_name_mapping\"", "]", ".", "get", "(", "name", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_processor_class": [[367, 370], ["cls.mapping[].get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "@", "classmethod", "\n", "def", "get_processor_class", "(", "cls", ",", "name", ")", ":", "\n", "        ", "return", "cls", ".", "mapping", "[", "\"processor_name_mapping\"", "]", ".", "get", "(", "name", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_metric_class": [[371, 374], ["cls.mapping[].get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "@", "classmethod", "\n", "def", "get_metric_class", "(", "cls", ",", "name", ")", ":", "\n", "        ", "return", "cls", ".", "mapping", "[", "\"metric_name_mapping\"", "]", ".", "get", "(", "name", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_loss_class": [[375, 378], ["cls.mapping[].get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "@", "classmethod", "\n", "def", "get_loss_class", "(", "cls", ",", "name", ")", ":", "\n", "        ", "return", "cls", ".", "mapping", "[", "\"loss_name_mapping\"", "]", ".", "get", "(", "name", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_optimizer_class": [[379, 382], ["cls.mapping[].get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "@", "classmethod", "\n", "def", "get_optimizer_class", "(", "cls", ",", "name", ")", ":", "\n", "        ", "return", "cls", ".", "mapping", "[", "\"optimizer_name_mapping\"", "]", ".", "get", "(", "name", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_scheduler_class": [[383, 386], ["cls.mapping[].get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "@", "classmethod", "\n", "def", "get_scheduler_class", "(", "cls", ",", "name", ")", ":", "\n", "        ", "return", "cls", ".", "mapping", "[", "\"scheduler_name_mapping\"", "]", ".", "get", "(", "name", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get_decoder_class": [[387, 390], ["cls.mapping[].get"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get"], ["", "@", "classmethod", "\n", "def", "get_decoder_class", "(", "cls", ",", "name", ")", ":", "\n", "        ", "return", "cls", ".", "mapping", "[", "\"decoder_name_mapping\"", "]", ".", "get", "(", "name", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get": [[391, 426], ["name.split.split.split", "value.get.get.get", "[].write"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.get", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.logger.Logger.write"], ["", "@", "classmethod", "\n", "def", "get", "(", "cls", ",", "name", ",", "default", "=", "None", ",", "no_warning", "=", "False", ")", ":", "\n", "        ", "r\"\"\"Get an item from registry with key 'name'\n\n        Args:\n            name (string): Key whose value needs to be retreived.\n            default: If passed and key is not in registry, default value will\n                     be returned with a warning. Default: None\n            no_warning (bool): If passed as True, warning when key doesn't exist\n                               will not be generated. Useful for Pythia's\n                               internal operations. Default: False\n        Usage::\n\n            from pythia.common.registry import registry\n\n            config = registry.get(\"config\")\n        \"\"\"", "\n", "original_name", "=", "name", "\n", "name", "=", "name", ".", "split", "(", "\".\"", ")", "\n", "value", "=", "cls", ".", "mapping", "[", "\"state\"", "]", "\n", "for", "subname", "in", "name", ":", "\n", "            ", "value", "=", "value", ".", "get", "(", "subname", ",", "default", ")", "\n", "if", "value", "is", "default", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "(", "\n", "\"writer\"", "in", "cls", ".", "mapping", "[", "\"state\"", "]", "\n", "and", "value", "==", "default", "\n", "and", "no_warning", "is", "False", "\n", ")", ":", "\n", "            ", "cls", ".", "mapping", "[", "\"state\"", "]", "[", "\"writer\"", "]", ".", "write", "(", "\n", "\"Key {} is not present in registry, returning default value \"", "\n", "\"of {}\"", ".", "format", "(", "original_name", ",", "default", ")", "\n", ")", "\n", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.registry.Registry.unregister": [[427, 440], ["cls.mapping[].pop"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "unregister", "(", "cls", ",", "name", ")", ":", "\n", "        ", "r\"\"\"Remove an item from registry with key 'name'\n\n        Args:\n            name: Key which needs to be removed.\n        Usage::\n\n            from pythia.common.registry import registry\n\n            config = registry.unregister(\"config\")\n        \"\"\"", "\n", "return", "cls", ".", "mapping", "[", "\"state\"", "]", ".", "pop", "(", "name", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.batch_collator.BatchCollator.__call__": [[9, 16], ["pythia.common.sample.SampleList"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "sample_list", "=", "SampleList", "(", "batch", ")", "\n", "\n", "for", "key", "in", "self", ".", "_IDENTICAL_VALUE_KEYS", ":", "\n", "            ", "sample_list", "[", "key", "]", "=", "sample_list", "[", "key", "]", "[", "0", "]", "\n", "\n", "", "return", "sample_list", "\n", "", "", ""]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.__init__": [[15, 17], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.load_task": [[18, 31], ["pythia.tasks.MultiTask", "pythia.tasks.MultiTask", "pythia.tasks.MultiTask"], "methods", ["None"], ["", "def", "load_task", "(", "self", ")", ":", "\n", "        ", "self", ".", "train_task", "=", "MultiTask", "(", "\"train\"", ",", "self", ".", "config", ")", "\n", "self", ".", "val_task", "=", "MultiTask", "(", "\"val\"", ",", "self", ".", "config", ")", "\n", "self", ".", "test_task", "=", "MultiTask", "(", "\"test\"", ",", "self", ".", "config", ")", "\n", "\n", "self", ".", "mapping", "=", "{", "\n", "\"train\"", ":", "self", ".", "train_task", ",", "\n", "\"val\"", ":", "self", ".", "val_task", ",", "\n", "\"test\"", ":", "self", ".", "test_task", ",", "\n", "}", "\n", "\n", "self", ".", "test_reporter", "=", "None", "\n", "self", ".", "should_not_log", "=", "self", ".", "config", ".", "training_parameters", ".", "should_not_log", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.task_config": [[36, 39], ["None"], "methods", ["None"], ["", "@", "task_config", ".", "setter", "\n", "def", "task_config", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "_task_config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.get_config": [[40, 42], ["None"], "methods", ["None"], ["", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_task_config", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.get_test_reporter": [[43, 46], ["getattr", "pythia.common.test_reporter.TestReporter"], "methods", ["None"], ["", "def", "get_test_reporter", "(", "self", ",", "dataset_type", ")", ":", "\n", "        ", "task", "=", "getattr", "(", "self", ",", "\"{}_task\"", ".", "format", "(", "dataset_type", ")", ")", "\n", "return", "TestReporter", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader._load_task_config": [[47, 64], ["os.path.dirname", "os.path.join", "os.path.abspath", "os.path.exists", "print", "open", "yaml.load", "print"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.trainers.base_trainer.BaseTrainer.load", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tools.convert_VG_to_COCO.COCO_annotation.print"], ["", "def", "_load_task_config", "(", "self", ",", "task_name", ")", ":", "\n", "        ", "directory", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")", "\n", "config_path", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "\"..\"", ",", "\"tasks\"", ",", "task_name", ",", "\"config.yml\"", ")", "\n", "\n", "self", ".", "_task_config", "=", "{", "}", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "config_path", ")", ":", "\n", "            ", "print", "(", "\"[Warning] No config present for task %s\"", "%", "task_name", ")", "\n", "return", "{", "}", "\n", "\n", "", "with", "open", "(", "config_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "_task_config", "=", "yaml", ".", "load", "(", "f", ")", "\n", "", "except", "yaml", ".", "YAMLError", "as", "err", ":", "\n", "                ", "print", "(", "\"[Error] Task %s's config yaml error\"", "%", "task_name", ",", "err", ")", "\n", "\n", "", "", "return", "self", ".", "_task_config", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.make_dataloaders": [[65, 104], ["task_loader.TaskLoader._add_extra_args_for_dataloader", "torch.utils.data.DataLoader", "task_loader.TaskLoader._add_extra_args_for_dataloader", "torch.utils.data.DataLoader", "task_loader.TaskLoader._add_extra_args_for_dataloader", "torch.utils.data.DataLoader", "pythia.common.batch_collator.BatchCollator", "pythia.common.batch_collator.BatchCollator", "pythia.common.batch_collator.BatchCollator"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader._add_extra_args_for_dataloader", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader._add_extra_args_for_dataloader", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader._add_extra_args_for_dataloader"], ["", "def", "make_dataloaders", "(", "self", ")", ":", "\n", "        ", "training_parameters", "=", "self", ".", "config", ".", "training_parameters", "\n", "num_workers", "=", "training_parameters", ".", "num_workers", "\n", "pin_memory", "=", "training_parameters", ".", "pin_memory", "\n", "\n", "other_args", "=", "{", "}", "\n", "\n", "self", ".", "_add_extra_args_for_dataloader", "(", "self", ".", "train_task", ",", "other_args", ")", "\n", "self", ".", "train_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "train_task", ",", "\n", "pin_memory", "=", "pin_memory", ",", "\n", "collate_fn", "=", "BatchCollator", "(", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "**", "other_args", "\n", ")", "\n", "\n", "self", ".", "train_loader", ".", "dataset_type", "=", "\"train\"", "\n", "\n", "self", ".", "_add_extra_args_for_dataloader", "(", "self", ".", "val_task", ",", "other_args", ")", "\n", "self", ".", "val_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "val_task", ",", "\n", "pin_memory", "=", "pin_memory", ",", "\n", "collate_fn", "=", "BatchCollator", "(", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "**", "other_args", "\n", ")", "\n", "self", ".", "val_loader", ".", "dataset_type", "=", "\"val\"", "\n", "\n", "self", ".", "_add_extra_args_for_dataloader", "(", "self", ".", "test_task", ",", "other_args", ")", "\n", "self", ".", "test_loader", "=", "DataLoader", "(", "\n", "dataset", "=", "self", ".", "test_task", ",", "\n", "pin_memory", "=", "pin_memory", ",", "\n", "collate_fn", "=", "BatchCollator", "(", ")", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "**", "other_args", "\n", ")", "\n", "self", ".", "test_loader", ".", "dataset_type", "=", "\"test\"", "\n", "\n", "self", ".", "use_cuda", "=", "\"cuda\"", "in", "self", ".", "config", ".", "training_parameters", ".", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader._add_extra_args_for_dataloader": [[105, 135], ["pythia.utils.distributed_utils.get_world_size", "pythia.tasks.samplers.DistributedSampler", "other_args.pop", "setattr", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.utils.distributed_utils.get_world_size"], ["", "def", "_add_extra_args_for_dataloader", "(", "self", ",", "task", ",", "other_args", "=", "{", "}", ")", ":", "\n", "        ", "training_parameters", "=", "self", ".", "config", ".", "training_parameters", "\n", "\n", "other_args", "[", "\"shuffle\"", "]", "=", "False", "\n", "if", "task", ".", "dataset_type", "!=", "\"test\"", ":", "\n", "            ", "other_args", "[", "\"shuffle\"", "]", "=", "True", "\n", "\n", "", "if", "(", "\n", "training_parameters", ".", "local_rank", "is", "not", "None", "\n", "and", "training_parameters", ".", "distributed", "\n", ")", ":", "\n", "            ", "other_args", "[", "\"sampler\"", "]", "=", "DistributedSampler", "(", "task", ",", "shuffle", "=", "other_args", "[", "\"shuffle\"", "]", ")", "\n", "# Shuffle is mutually exclusive with sampler, let DistributedSampler take care of", "\n", "# shuffle and pop from main args", "\n", "other_args", ".", "pop", "(", "\"shuffle\"", ")", "\n", "setattr", "(", "self", ",", "\"{}_sampler\"", ".", "format", "(", "task", ".", "dataset_type", ")", ",", "other_args", "[", "\"sampler\"", "]", ")", "\n", "\n", "", "batch_size", "=", "training_parameters", ".", "batch_size", "\n", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "if", "batch_size", "%", "world_size", "!=", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "\"Batch size {} must be divisible by number \"", "\n", "\"of GPUs {} used.\"", ".", "format", "(", "batch_size", ",", "world_size", ")", "\n", ")", "\n", "\n", "", "other_args", "[", "\"batch_size\"", "]", "=", "batch_size", "//", "world_size", "\n", "\n", "return", "other_args", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.update_registry_for_model": [[136, 140], ["task_loader.TaskLoader.train_task.update_registry_for_model", "task_loader.TaskLoader.val_task.update_registry_for_model", "task_loader.TaskLoader.test_task.update_registry_for_model"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.update_registry_for_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.update_registry_for_model", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.update_registry_for_model"], ["", "def", "update_registry_for_model", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "train_task", ".", "update_registry_for_model", "(", "config", ")", "\n", "self", ".", "val_task", ".", "update_registry_for_model", "(", "config", ")", "\n", "self", ".", "test_task", ".", "update_registry_for_model", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.clean_config": [[141, 145], ["task_loader.TaskLoader.train_task.clean_config", "task_loader.TaskLoader.val_task.clean_config", "task_loader.TaskLoader.test_task.clean_config"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.clean_config", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.clean_config", "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.clean_config"], ["", "def", "clean_config", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "train_task", ".", "clean_config", "(", "config", ")", "\n", "self", ".", "val_task", ".", "clean_config", "(", "config", ")", "\n", "self", ".", "test_task", ".", "clean_config", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.prepare_batch": [[146, 148], ["task_loader.TaskLoader.mapping[].prepare_batch"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.prepare_batch"], ["", "def", "prepare_batch", "(", "self", ",", "batch", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "mapping", "[", "batch", ".", "dataset_type", "]", ".", "prepare_batch", "(", "batch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.verbose_dump": [[149, 153], ["task_loader.TaskLoader.mapping[].verbose_dump"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.verbose_dump"], ["", "def", "verbose_dump", "(", "self", ",", "report", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "training_parameters", ".", "verbose_dump", ":", "\n", "            ", "dataset_type", "=", "report", ".", "dataset_type", "\n", "self", ".", "mapping", "[", "dataset_type", "]", ".", "verbose_dump", "(", "report", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.common.task_loader.TaskLoader.seed_sampler": [[154, 163], ["getattr", "hasattr", "getattr.set_epoch"], "methods", ["home.repos.pwc.inspect_result.sameerdharur_sorting-vqa.tasks.samplers.DistributedSampler.set_epoch"], ["", "", "def", "seed_sampler", "(", "self", ",", "task_type", ",", "seed", ")", ":", "\n", "        ", "training_parameters", "=", "self", ".", "config", ".", "training_parameters", "\n", "if", "(", "\n", "training_parameters", ".", "local_rank", "is", "not", "None", "\n", "and", "training_parameters", ".", "distributed", "\n", ")", ":", "\n", "            ", "sampler", "=", "getattr", "(", "self", ",", "\"{}_sampler\"", ".", "format", "(", "task_type", ")", ")", "\n", "assert", "hasattr", "(", "sampler", ",", "\"set_epoch\"", ")", ",", "\"Can't seed without `set_epoch` method\"", "\n", "sampler", ".", "set_epoch", "(", "seed", ")", "\n", "", "", "", ""]]}