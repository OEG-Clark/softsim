{"home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.dataset.timit_dataset": [[11, 54], ["print", "os.walk", "glob.glob", "print", "os.path.join", "soundfile.SoundFile", "soundfile.SoundFile.seek", "read_wav", "len", "i.split", "spk_list.append", "[].append", "[].append", "[].append", "[].append", "j.split"], "function", ["home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.utils.read_wav"], ["def", "timit_dataset", "(", "timit_path", ")", ":", "\n", "\t", "\"\"\"\n\tFor the TIMIT corpus detirmines the speakers and their training and test observations.\n\tFor training, the si* and sx* sets are used, for testing, the sa* set is\n\tused.\n\n\tArgument/s:\n\t\ttimit_path - path to the TIMIT corpus.\n\n\tReturns:\n\t\tspk_list - list of speakers.\n\t\tspk_obs - observations for each speaker.\n\t\"\"\"", "\n", "## SPEAKER LIST", "\n", "print", "(", "'Finding speakers and speaker observations...'", ")", "\n", "spk_list", "=", "[", "]", "\n", "spk_obs", "=", "{", "}", "# speaker list.", "\n", "id_count", "=", "0", "\n", "for", "i", ",", "_", ",", "_", "in", "os", ".", "walk", "(", "timit_path", ")", ":", "\n", "\t\t", "if", "i", "[", "-", "5", "]", "in", "(", "'m'", ",", "'f'", ")", ":", "\n", "\t\t\t", "for", "j", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "i", ",", "'*.wav'", ")", ")", ":", "\n", "\t\t\t\t", "f", "=", "SoundFile", "(", "j", ")", "\n", "wav_len", "=", "f", ".", "seek", "(", "0", ",", "SEEK_END", ")", "\n", "if", "wav_len", "==", "-", "1", ":", "\n", "\t\t\t\t\t", "wav", ",", "_", "=", "read_wav", "(", "i", ")", "\n", "wav_len", "=", "len", "(", "wav", ")", "\n", "", "spk", "=", "i", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "if", "spk", "not", "in", "spk_obs", ":", "\n", "\t\t\t\t\t", "spk_obs", "[", "spk", "]", "=", "{", "'spk_id'", ":", "id_count", ",", "\n", "'train_x'", ":", "{", "'wav_path'", ":", "[", "]", ",", "'wav_len'", ":", "[", "]", "}", ",", "\n", "'test_x'", ":", "{", "'wav_path'", ":", "[", "]", ",", "'wav_len'", ":", "[", "]", "}", ",", "\n", "}", "\n", "id_count", "=", "id_count", "+", "1", "\n", "spk_list", ".", "append", "(", "spk", ")", "\n", "", "timit_set", "=", "j", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", "0", ":", "2", "]", "\n", "if", "timit_set", "in", "[", "'si'", ",", "'sx'", "]", ":", "\n", "\t\t\t\t\t", "spk_obs", "[", "spk", "]", "[", "'train_x'", "]", "[", "'wav_path'", "]", ".", "append", "(", "j", ")", "\n", "spk_obs", "[", "spk", "]", "[", "'train_x'", "]", "[", "'wav_len'", "]", ".", "append", "(", "wav_len", ")", "\n", "", "if", "timit_set", "==", "'sa'", ":", "\n", "\t\t\t\t\t", "spk_obs", "[", "spk", "]", "[", "'test_x'", "]", "[", "'wav_path'", "]", ".", "append", "(", "j", ")", "\n", "spk_obs", "[", "spk", "]", "[", "'test_x'", "]", "[", "'wav_len'", "]", ".", "append", "(", "wav_len", ")", "\n", "", "", "print", "(", "'%i total speakers.'", "%", "(", "id_count", ")", ",", "end", "=", "\"\\r\"", ")", "\n", "", "", "return", "spk_list", ",", "spk_obs", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.dataset.noisy_speech_dataset": [[55, 95], ["print", "glob.glob", "os.path.join", "soundfile.SoundFile", "soundfile.SoundFile.seek", "int", "[].append", "[].append", "[].append", "[].append", "read_wav", "len", "[].split", "spk_list.append", "[].split", "[].split", "i.split", "i.split", "i.split"], "function", ["home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.utils.read_wav"], ["", "def", "noisy_speech_dataset", "(", "noisy_speech_path", ")", ":", "\n", "\t", "\"\"\"\n\tDetirmines the noisy speech test observations.\n\n\tArgument/s:\n\t\tnoisy_speech_path - path to the noisy_speech .wav files.\n\n\tReturns:\n\t\tspk_list - list of speakers.\n\t\tspk_obs - observations for each speaker.\n\t\"\"\"", "\n", "## SPEAKER LIST", "\n", "print", "(", "'Finding noisy speaker observations...'", ")", "\n", "spk_list", "=", "[", "]", "\n", "spk_obs", "=", "{", "}", "# speaker list.", "\n", "id_count", "=", "0", "\n", "for", "i", "in", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "noisy_speech_path", ",", "'*.wav'", ")", ")", ":", "\n", "\t\t", "f", "=", "SoundFile", "(", "i", ")", "\n", "wav_len", "=", "f", ".", "seek", "(", "0", ",", "SEEK_END", ")", "\n", "if", "wav_len", "==", "-", "1", ":", "\n", "\t\t\t", "wav", ",", "_", "=", "read_wav", "(", "i", ")", "\n", "wav_len", "=", "len", "(", "wav", ")", "\n", "", "spk", "=", "i", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", "\n", "if", "spk", "not", "in", "spk_obs", ":", "\n", "\t\t\t", "spk_obs", "[", "spk", "]", "=", "{", "'spk_id'", ":", "id_count", ",", "\n", "'test_x'", ":", "{", "'wav_path'", ":", "[", "]", ",", "'wav_len'", ":", "[", "]", ",", "\n", "'noise_src'", ":", "[", "]", ",", "'snr'", ":", "[", "]", "}", ",", "\n", "}", "\n", "id_count", "=", "id_count", "+", "1", "\n", "spk_list", ".", "append", "(", "spk", ")", "\n", "\n", "", "noise_src", "=", "i", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'_'", ")", "[", "2", "]", "\n", "snr", "=", "int", "(", "i", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'_'", ")", "[", "3", "]", "[", ":", "-", "6", "]", ")", "\n", "\n", "spk_obs", "[", "spk", "]", "[", "'test_x'", "]", "[", "'wav_path'", "]", ".", "append", "(", "i", ")", "\n", "spk_obs", "[", "spk", "]", "[", "'test_x'", "]", "[", "'wav_len'", "]", ".", "append", "(", "wav_len", ")", "\n", "spk_obs", "[", "spk", "]", "[", "'test_x'", "]", "[", "'noise_src'", "]", ".", "append", "(", "noise_src", ")", "\n", "spk_obs", "[", "spk", "]", "[", "'test_x'", "]", "[", "'snr'", "]", ".", "append", "(", "snr", ")", "\n", "\n", "", "return", "spk_list", ",", "spk_obs", "\n", "", ""]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.model.SPNASISystem.__init__": [[55, 80], ["len", "spn_asi.sig.SubbandFeatures"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "N_d", ",", "\n", "N_s", ",", "\n", "K", ",", "\n", "f_s", ",", "\n", "M", ",", "\n", "spk_list", ",", "\n", "ver", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tArgument/s:\n\t\t\tN_d - window duration (samples).\n\t\t\tN_s - window shift (samples).\n\t\t\tK - number of frequency bins.\n\t\t\tf_s - sampling frequency.\n\t\t\tM - number of filters.\n\t\t\tspk_list - list of speakers.\n\t\t\tver - system version.\n\t\t\"\"\"", "\n", "self", ".", "spk_list", "=", "spk_list", "\n", "self", ".", "ver", "=", "ver", "\n", "self", ".", "n_spk", "=", "len", "(", "self", ".", "spk_list", ")", "\n", "self", ".", "feat", "=", "SubbandFeatures", "(", "N_d", ",", "N_s", ",", "K", ",", "f_s", ",", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.model.SPNASISystem.train": [[81, 130], ["multiprocessing.cpu_count", "print", "enumerate", "print", "print", "max", "numpy.zeros", "enumerate", "model.SPNASISystem.feat.observation().numpy", "print", "spn.structure.Base.Context().add_domains", "spn_asi.utils.read_wav", "model.Silence", "spn.algorithms.LearningWrappers.learn_parametric", "open", "pickle.dump", "chr", "len", "model.SPNASISystem.feat.observation", "spn.structure.Base.Context"], "methods", ["home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.utils.read_wav", "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.observation"], ["", "def", "train", "(", "\n", "self", ",", "\n", "spk_obs", ",", "\n", "model_path", ",", "\n", "min_instances_slice", ",", "\n", "threshold", ",", "\n", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tSpeaker model training.\n\n\t\tArgument/s:\n\t\t\tspk_obs - observations for each speaker.\n\t\t\tmodel_path - path to speaker models.\n\t\t\tmin_instances_slice - minimum number of instances to slice.\n\t\t\tthreshold - threshold.\n\t\t\"\"\"", "\n", "\n", "ncores", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "\n", "print", "(", "'Training...'", ")", "\n", "for", "i", ",", "j", "in", "enumerate", "(", "self", ".", "spk_list", ")", ":", "\n", "\n", "\t\t\t", "print", "(", "chr", "(", "27", ")", "+", "\"[2J\"", ")", "\n", "print", "(", "\"Training speaker: %i/%i (%s)...\"", "%", "(", "i", "+", "1", ",", "self", ".", "n_spk", ",", "j", ")", ")", "\n", "\n", "max_len", "=", "max", "(", "spk_obs", "[", "j", "]", "[", "'train_x'", "]", "[", "'wav_len'", "]", ")", "# find maximum sequence length.", "\n", "train_x_wav", "=", "np", ".", "zeros", "(", "[", "len", "(", "spk_obs", "[", "j", "]", "[", "'train_x'", "]", "[", "'wav_path'", "]", ")", ",", "max_len", "]", ",", "np", ".", "int16", ")", "\n", "for", "k", ",", "l", "in", "enumerate", "(", "spk_obs", "[", "j", "]", "[", "'train_x'", "]", "[", "'wav_path'", "]", ")", ":", "\n", "\t\t\t\t", "wav", ",", "_", "=", "read_wav", "(", "l", ")", "\n", "wav_len", "=", "spk_obs", "[", "j", "]", "[", "'train_x'", "]", "[", "'wav_len'", "]", "[", "k", "]", "\n", "train_x_wav", "[", "k", ",", ":", "wav_len", "]", "=", "wav", "\n", "\n", "", "train_x", "=", "self", ".", "feat", ".", "observation", "(", "train_x_wav", ",", "\n", "spk_obs", "[", "j", "]", "[", "'train_x'", "]", "[", "'wav_len'", "]", ")", ".", "numpy", "(", ")", "\n", "\n", "print", "(", "\"Features extracted.\"", ")", "\n", "\n", "ds_context", "=", "Context", "(", "parametric_types", "=", "[", "Gaussian", "]", "*", "self", ".", "feat", ".", "M", ")", ".", "add_domains", "(", "train_x", ")", "\n", "with", "Silence", "(", ")", ":", "\n", "\t\t\t\t", "spn_spk", "=", "learn_parametric", "(", "\n", "train_x", ",", "\n", "ds_context", ",", "\n", "min_instances_slice", "=", "min_instances_slice", ",", "\n", "threshold", "=", "threshold", ",", "\n", "cpus", "=", "ncores", "\n", ")", "\n", "\n", "", "spk_path", "=", "model_path", "+", "'/'", "+", "i", "+", "'.p'", "# speaker model save path.", "\n", "with", "open", "(", "spk_path", ",", "'wb'", ")", "as", "f", ":", "pickle", ".", "dump", "(", "spn_spk", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.model.SPNASISystem.identification": [[131, 231], ["print", "tqdm.tqdm.tqdm", "tqdm.tqdm.trange", "range", "os.path.exists", "os.makedirs", "os.path.exists", "open", "f.write", "model.SPNASISystem.items", "open", "pickle.load", "len", "spn_asi.utils.read_wav", "model.SPNASISystem.feat.observation().numpy", "numpy.array", "tqdm.tqdm.trange.set_description", "tqdm.tqdm.trange.refresh", "open", "f.write", "set", "set", "noise_srcs.add", "snr_levels.add", "os.path.exists", "open", "sorted", "spn_asi.utils.read_mat", "tensorflow.greater().numpy", "numpy.where", "model.SPNASISystem.add_score", "open", "f.write", "sorted", "model.SPNASISystem.feat.observation", "numpy.full_like", "joblib.Parallel", "f.write", "tensorflow.greater", "tensorflow.linalg.matmul", "joblib.delayed", "range", "numpy.argmax", "wav_path.split", "sll[].astype", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.utils.read_wav", "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.utils.read_mat", "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.model.SPNASISystem.add_score", "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.observation"], ["", "", "def", "identification", "(", "\n", "self", ",", "\n", "spk_obs", ",", "\n", "model_path", ",", "\n", "marg", ",", "\n", "bounds", ",", "\n", "n_workers", ",", "\n", "eval_cond", ",", "\n", "xi_hat_path", "=", "None", ",", "\n", "test_set_name", "=", "\"\"", ",", "\n", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tAutomatic speaker identification.\n\n\t\tArgument/s:\n\t\t\tspk_obs - list of training examples for each speaker.\n\t\t\tmodel_path - path to speaker models.\n\t\t\tmarg - marginalisation flag.\n\t\t\tbounds - bounds flag.\n\t\t\tn_workers - number of workers for Parallel().\n\t\t\teval_cond - evaluate different SNR level and noise source\n\t\t\t\tconditions.\n\t\t\txi_hat_path - path to a priori SNR estimate .mat files used to\n\t\t\t\tcompute the ideal binary mask (IBM) estimates.\n\t\t\ttest_set_name - name of test set.\n\t\t\"\"\"", "\n", "\n", "ibm_hat", "=", "None", "\n", "\n", "## LOAD SPEAKER MODELS", "\n", "spk_models", "=", "{", "}", "\n", "print", "(", "\"Loading speaker models...\"", ")", "\n", "for", "i", "in", "tqdm", "(", "self", ".", "spk_list", ")", ":", "\n", "\t\t\t", "with", "open", "(", "model_path", "+", "'/'", "+", "i", "+", "'.p'", ",", "'rb'", ")", "as", "f", ":", "\n", "\t\t\t\t", "spk_models", "[", "i", "]", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "", "correct", "=", "0", ";", "total", "=", "0", "\n", "results", "=", "{", "}", "\n", "t", "=", "trange", "(", "self", ".", "n_spk", ",", "desc", "=", "'Acc=0%'", ",", "leave", "=", "True", ")", "\n", "for", "i", "in", "t", ":", "\n", "\t\t\t", "for", "j", "in", "range", "(", "len", "(", "spk_obs", "[", "self", ".", "spk_list", "[", "i", "]", "]", "[", "'test_x'", "]", "[", "'wav_path'", "]", ")", ")", ":", "\n", "\n", "\t\t\t\t", "tgt_spk", "=", "self", ".", "spk_list", "[", "i", "]", "\n", "wav_path", "=", "spk_obs", "[", "tgt_spk", "]", "[", "'test_x'", "]", "[", "'wav_path'", "]", "[", "j", "]", "\n", "wav_len", "=", "spk_obs", "[", "tgt_spk", "]", "[", "'test_x'", "]", "[", "'wav_len'", "]", "[", "j", "]", "\n", "\n", "wav", ",", "_", "=", "read_wav", "(", "wav_path", ")", "\n", "test_x", "=", "self", ".", "feat", ".", "observation", "(", "wav", ",", "wav_len", ")", ".", "numpy", "(", ")", "\n", "\n", "if", "marg", ":", "\n", "\t\t\t\t\t", "xi_hat", "=", "read_mat", "(", "xi_hat_path", "+", "'/'", "+", "wav_path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", ")", "\n", "xi_hat", "=", "xi_hat", "[", "'xi_hat'", "]", "\n", "ibm_hat", "=", "tf", ".", "greater", "(", "tf", ".", "linalg", ".", "matmul", "(", "xi_hat", ",", "\n", "self", ".", "feat", ".", "H", ",", "transpose_b", "=", "True", ")", ",", "1.0", ")", ".", "numpy", "(", ")", "\n", "\n", "", "if", "marg", "and", "not", "bounds", ":", "test_x", "=", "np", ".", "where", "(", "ibm_hat", ",", "test_x", ",", "np", ".", "full_like", "(", "test_x", ",", "np", ".", "nan", ")", ")", "\n", "\n", "sll", "=", "np", ".", "array", "(", "Parallel", "(", "n_jobs", "=", "n_workers", ")", "(", "delayed", "(", "self", ".", "sequence_log_likelihood", ")", "(", "spk_models", "[", "self", ".", "spk_list", "[", "l", "]", "]", ",", "\n", "test_x", ",", "self", ".", "spk_list", "[", "l", "]", ",", "bounds", "=", "bounds", ",", "ibm", "=", "ibm_hat", ")", "for", "l", "in", "range", "(", "self", ".", "n_spk", ")", ")", ")", "\n", "\n", "if", "sll", "[", "np", ".", "argmax", "(", "sll", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "float32", ")", ")", ",", "1", "]", "==", "tgt_spk", ":", "\n", "\t\t\t\t\t", "correct_identification", "=", "1", "\n", "", "else", ":", "correct_identification", "=", "0", "\n", "\n", "correct", "=", "correct", "+", "correct_identification", "\n", "total", "=", "total", "+", "1", "\n", "\n", "if", "eval_cond", ":", "\n", "\t\t\t\t\t", "noise_src", "=", "spk_obs", "[", "tgt_spk", "]", "[", "'test_x'", "]", "[", "'noise_src'", "]", "[", "j", "]", "\n", "snr_level", "=", "spk_obs", "[", "tgt_spk", "]", "[", "'test_x'", "]", "[", "'snr'", "]", "[", "j", "]", "\n", "results", "=", "self", ".", "add_score", "(", "results", ",", "(", "noise_src", ",", "snr_level", ")", ",", "correct_identification", ")", "\n", "\n", "", "t", ".", "set_description", "(", "\"Acc={:3.2f}%\"", ".", "format", "(", "100", "*", "(", "correct", "/", "total", ")", ")", ")", "\n", "t", ".", "refresh", "(", ")", "\n", "\n", "", "", "results_path", "=", "\"results/\"", "+", "test_set_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "results_path", ")", ":", "os", ".", "makedirs", "(", "results_path", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "results_path", "+", "\"/average.csv\"", ")", ":", "\n", "\t\t\t", "with", "open", "(", "results_path", "+", "\"/average.csv\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "\t\t\t\t", "f", ".", "write", "(", "\"ver,acc\\n\"", ")", "\n", "\n", "", "", "with", "open", "(", "results_path", "+", "\"/average.csv\"", ",", "\"a\"", ")", "as", "f", ":", "\n", "\t\t\t", "f", ".", "write", "(", "\"{:s},{:.2f}\\n\"", ".", "format", "(", "self", ".", "ver", ",", "100", "*", "(", "correct", "/", "total", ")", ")", ")", "\n", "\n", "", "if", "eval_cond", ":", "\n", "\t\t\t", "noise_srcs", ",", "snr_levels", "=", "set", "(", ")", ",", "set", "(", ")", "\n", "for", "key", ",", "value", "in", "results", ".", "items", "(", ")", ":", "\n", "\t\t\t\t", "noise_srcs", ".", "add", "(", "key", "[", "0", "]", ")", "\n", "snr_levels", ".", "add", "(", "key", "[", "1", "]", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "results_path", "+", "\"/\"", "+", "self", ".", "ver", "+", "\".csv\"", ")", ":", "\n", "\t\t\t\t", "with", "open", "(", "results_path", "+", "\"/\"", "+", "self", ".", "ver", "+", "\".csv\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "\t\t\t\t\t", "f", ".", "write", "(", "\"marg,bounds,noise,snr_db,acc\\n\"", ")", "\n", "\n", "", "", "with", "open", "(", "results_path", "+", "\"/\"", "+", "self", ".", "ver", "+", "\".csv\"", ",", "\"a\"", ")", "as", "f", ":", "\n", "\t\t\t\t", "for", "i", "in", "sorted", "(", "noise_srcs", ")", ":", "\n", "\t\t\t\t\t", "for", "j", "in", "sorted", "(", "snr_levels", ")", ":", "\n", "\t\t\t\t\t\t", "f", ".", "write", "(", "\"{},{},{},{},{:.2f}\\n\"", ".", "format", "(", "marg", ",", "\n", "bounds", ",", "i", ",", "j", ",", "100", "*", "np", ".", "mean", "(", "results", "[", "(", "i", ",", "j", ")", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.model.SPNASISystem.sequence_log_likelihood": [[232, 249], ["numpy.sum", "spn.algorithms.Inference.log_likelihood"], "methods", ["None"], ["", "", "", "", "", "def", "sequence_log_likelihood", "(", "self", ",", "model", ",", "observation", ",", "spk", ",", "bounds", "=", "False", ",", "ibm", "=", "None", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tCompute sequence log-likelihood for over observation.\n\n\t\tArgument/s:\n\t\t\tmodel - SPN speaker model.\n\t\t\tobservation - LSSE observation.\n\t\t\tspk - speaker.\n\t\t\tbounds - bounds flag.\n\t\t\tibm - ideal binary mask (IBM).\n\n\t\tReturns:\n\t\t\tsll - sequence log-likelihood.\n\t\t\tspk - speaker.\n\t\t\"\"\"", "\n", "sll", "=", "np", ".", "sum", "(", "log_likelihood", "(", "model", ",", "observation", ",", "bounds", "=", "bounds", ",", "ibm", "=", "ibm", ")", ")", "\n", "return", "sll", ",", "spk", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.model.SPNASISystem.add_score": [[250, 270], ["isinstance", "dict.keys", "dict[].extend", "dict.keys", "dict[].append"], "methods", ["None"], ["", "def", "add_score", "(", "self", ",", "dict", ",", "key", ",", "score", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tAdds score/s to the list for the given key.\n\n\t\tArgument/s:\n\t\t\tdict - dictionary with condition as keys and a list of objective\n\t\t\t\tscores as values.\n\t\t\tkey - noisy-speech conditions.\n\t\t\tscore - objective score.\n\n\t\tReturns:\n\t\t\tdict - updated dictionary.\n\t\t\"\"\"", "\n", "if", "isinstance", "(", "score", ",", "list", ")", ":", "\n", "\t\t\t", "if", "key", "in", "dict", ".", "keys", "(", ")", ":", "dict", "[", "key", "]", ".", "extend", "(", "score", ")", "\n", "else", ":", "dict", "[", "key", "]", "=", "score", "\n", "", "else", ":", "\n", "\t\t\t", "if", "key", "in", "dict", ".", "keys", "(", ")", ":", "dict", "[", "key", "]", ".", "append", "(", "score", ")", "\n", "else", ":", "dict", "[", "key", "]", "=", "[", "score", "]", "\n", "", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.model.Silence.__init__": [[272, 276], ["open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "stdout", "=", "None", ",", "stderr", "=", "None", ")", ":", "\n", "        ", "self", ".", "devnull", "=", "open", "(", "os", ".", "devnull", ",", "'w'", ")", "\n", "self", ".", "_stdout", "=", "stdout", "or", "self", ".", "devnull", "or", "sys", ".", "stdout", "\n", "self", ".", "_stderr", "=", "stderr", "or", "self", ".", "devnull", "or", "sys", ".", "stderr", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.model.Silence.__enter__": [[277, 281], ["model.Silence.old_stdout.flush", "model.Silence.old_stderr.flush"], "methods", ["None"], ["", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "old_stdout", ",", "self", ".", "old_stderr", "=", "sys", ".", "stdout", ",", "sys", ".", "stderr", "\n", "self", ".", "old_stdout", ".", "flush", "(", ")", ";", "self", ".", "old_stderr", ".", "flush", "(", ")", "\n", "sys", ".", "stdout", ",", "sys", ".", "stderr", "=", "self", ".", "_stdout", ",", "self", ".", "_stderr", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.model.Silence.__exit__": [[282, 287], ["model.Silence._stdout.flush", "model.Silence._stderr.flush", "model.Silence.devnull.close"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "exc_type", ",", "exc_value", ",", "traceback", ")", ":", "\n", "        ", "self", ".", "_stdout", ".", "flush", "(", ")", ";", "self", ".", "_stderr", ".", "flush", "(", ")", "\n", "sys", ".", "stdout", "=", "self", ".", "old_stdout", "\n", "sys", ".", "stderr", "=", "self", ".", "old_stderr", "\n", "self", ".", "devnull", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.model.continuous_log_likelihood": [[23, 48], ["spn.algorithms.Inference.leaf_marginalized_likelihood", "spn.structure.leaves.parametric.utils.get_scipy_obj_params", "numpy.expand_dims", "numpy.expand_dims", "numpy.where", "scipy_obj.logpdf", "scipy_obj.logpdf", "scipy.stats.norm.logcdf"], "function", ["None"], ["def", "continuous_log_likelihood", "(", "node", ",", "data", "=", "None", ",", "dtype", "=", "np", ".", "float64", ",", "**", "kwargs", ")", ":", "\n", "\t", "\"\"\"\n\tModified Gaussian log-likelihood function with marginalisation and bounded\n\tmarginalisation for the leaves.\n\n\tArgument/s:\n\t\tnode - defined in spflow documentation.\n\t\tdata - defined in spflow documentation.\n\t\tdtype - defined in spflow documentation.\n\t\tkwargs - keyword arguments where bounds flag and IBM is passed.\n\n\tReturns:\n\t\tprobs - defined in spflow documentation.\n\t\"\"\"", "\n", "bounds", "=", "kwargs", "[", "'bounds'", "]", "\n", "ibm", "=", "kwargs", "[", "'ibm'", "]", "\n", "probs", ",", "marg_ids", ",", "observations", "=", "leaf_marginalized_likelihood", "(", "node", ",", "data", ",", "dtype", ",", "log_space", "=", "True", ")", "\n", "scipy_obj", ",", "params", "=", "get_scipy_obj_params", "(", "node", ")", "\n", "if", "bounds", ":", "\n", "\t\t", "ibm", "=", "ibm", "[", ":", ",", "node", ".", "scope", "]", "\n", "probs_reliable", "=", "np", ".", "expand_dims", "(", "scipy_obj", ".", "logpdf", "(", "observations", ",", "**", "params", ")", ",", "axis", "=", "1", ")", "\n", "probs_unreliable", "=", "np", ".", "expand_dims", "(", "norm", ".", "logcdf", "(", "observations", ",", "loc", "=", "params", "[", "'loc'", "]", ",", "scale", "=", "params", "[", "'scale'", "]", ")", ",", "axis", "=", "1", ")", "\n", "probs", "=", "np", ".", "where", "(", "ibm", ",", "probs_reliable", ",", "probs_unreliable", ")", "\n", "", "else", ":", "probs", "[", "~", "marg_ids", "]", "=", "scipy_obj", ".", "logpdf", "(", "observations", ",", "**", "params", ")", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.AnalysisSynthesis.__init__": [[24, 40], ["functools.partial", "tensorflow.cast", "tensorflow.cast"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "N_d", ",", "N_s", ",", "K", ",", "f_s", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tArgument/s:\n\t\t\tN_d - window duration (samples).\n\t\t\tN_s - window shift (samples).\n\t\t\tK - number of frequency bins.\n\t\t\tf_s - sampling frequency.\n\t\t\"\"\"", "\n", "self", ".", "N_d", "=", "N_d", "\n", "self", ".", "N_s", "=", "N_s", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "f_s", "=", "f_s", "\n", "self", ".", "W", "=", "functools", ".", "partial", "(", "window_ops", ".", "hamming_window", ",", "\n", "periodic", "=", "False", ")", "\n", "self", ".", "ten", "=", "tf", ".", "cast", "(", "10.0", ",", "tf", ".", "float32", ")", "\n", "self", ".", "one", "=", "tf", ".", "cast", "(", "1.0", ",", "tf", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.AnalysisSynthesis.polar_analysis": [[41, 54], ["tensorflow.signal.stft", "tensorflow.abs", "tensorflow.math.angle"], "methods", ["None"], ["", "def", "polar_analysis", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tPolar-form acoustic-domain analysis.\n\n\t\tArgument/s:\n\t\t\tx - waveform.\n\n\t\tReturns:\n\t\t\tShort-time magnitude and phase spectrums.\n\t\t\"\"\"", "\n", "STFT", "=", "tf", ".", "signal", ".", "stft", "(", "x", ",", "self", ".", "N_d", ",", "self", ".", "N_s", ",", "self", ".", "K", ",", "\n", "window_fn", "=", "self", ".", "W", ",", "pad_end", "=", "True", ")", "\n", "return", "tf", ".", "abs", "(", "STFT", ")", ",", "tf", ".", "math", ".", "angle", "(", "STFT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.__init__": [[59, 71], ["sig.AnalysisSynthesis.__init__", "sig.SubbandFeatures.mel_filterbank"], "methods", ["home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.__init__", "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.mel_filterbank"], ["def", "__init__", "(", "self", ",", "N_d", ",", "N_s", ",", "K", ",", "f_s", ",", "M", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", "N_d", ",", "N_s", ",", "K", ",", "f_s", ")", "\n", "\"\"\"\n\t\tArgument/s\n\t\t\tN_d - window duration (samples).\n\t\t\tN_s - window shift (samples).\n\t\t\tK - number of frequency bins.\n\t\t\tf_s - sampling frequency.\n\t\t\tM - number of filters.\n\t\t\"\"\"", "\n", "self", ".", "M", "=", "M", "\n", "self", ".", "H", "=", "self", ".", "mel_filterbank", "(", "self", ".", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.observation": [[72, 87], ["sig.SubbandFeatures.normalise", "sig.SubbandFeatures.lsse", "tensorflow.boolean_mask", "tensorflow.sequence_mask", "sig.SubbandFeatures.n_frames"], "methods", ["home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.normalise", "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.lsse", "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.n_frames"], ["", "def", "observation", "(", "self", ",", "x", ",", "x_len", ")", ":", "\n", "\t\t", "\"\"\"\n\t    Observations for training (LSSEs).\n\n\t\tArgument/s:\n\t\t\tx - speech (dtype=tf.int32).\n\t\t\tx_len - speech length without padding (samples).\n\n\t\tReturns:\n\t\t\tx_STMS - short-time magnitude spectrum.\n\t\t\tx_STPS - short-time phase spectrum.\n\t\t\"\"\"", "\n", "x", "=", "self", ".", "normalise", "(", "x", ")", "\n", "x_LSSE", "=", "self", ".", "lsse", "(", "x", ")", "\n", "return", "tf", ".", "boolean_mask", "(", "x_LSSE", ",", "tf", ".", "sequence_mask", "(", "self", ".", "n_frames", "(", "x_len", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.lsse": [[88, 105], ["sig.SubbandFeatures.polar_analysis", "tensorflow.math.square", "tensorflow.linalg.matmul", "tensorflow.math.log"], "methods", ["home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.AnalysisSynthesis.polar_analysis"], ["", "def", "lsse", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "\"\"\"\n\t    Compute log-spectral subband energies (LSSEs).\n\n\t\tArgument/s:\n\t\t\tx - noisy speech (dtype=tf.int32).\n\t\t\tx_len - noisy speech length without padding (samples).\n\n\t\tReturns:\n\t\t\tx_STMS - short-time magnitude spectrum.\n\t\t\tx_STPS - short-time phase spectrum.\n\t\t\"\"\"", "\n", "x_STMS", ",", "_", "=", "self", ".", "polar_analysis", "(", "x", ")", "\n", "x_POW", "=", "tf", ".", "math", ".", "square", "(", "x_STMS", ")", "\n", "x_SSE", "=", "tf", ".", "linalg", ".", "matmul", "(", "x_POW", ",", "self", ".", "H", ",", "transpose_b", "=", "True", ")", "\n", "x_LSSE", "=", "tf", ".", "math", ".", "log", "(", "x_SSE", ")", "\n", "return", "x_LSSE", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.normalise": [[106, 117], ["tensorflow.truediv", "tensorflow.cast"], "methods", ["None"], ["", "def", "normalise", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tConvert waveform from int32 to float32 and normalise between [-1.0, 1.0].\n\n\t\tArgument/s:\n\t\t\tx - tf.int32 waveform.\n\n\t\tReturns:\n\t\t\ttf.float32 waveform between [-1.0, 1.0].\n\t\t\"\"\"", "\n", "return", "tf", ".", "truediv", "(", "tf", ".", "cast", "(", "x", ",", "tf", ".", "float32", ")", ",", "32768.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.n_frames": [[118, 130], ["tensorflow.cast", "tensorflow.math.ceil", "tensorflow.truediv", "tensorflow.cast", "tensorflow.cast"], "methods", ["None"], ["", "def", "n_frames", "(", "self", ",", "N", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tReturns the number of frames for a given sequence length, and\n\t\tframe shift.\n\n\t\tArgument/s:\n\t\t\tN - sequence length (samples).\n\n\t\tReturns:\n\t\t\tNumber of frames\n\t\t\"\"\"", "\n", "return", "tf", ".", "cast", "(", "tf", ".", "math", ".", "ceil", "(", "tf", ".", "truediv", "(", "tf", ".", "cast", "(", "N", ",", "tf", ".", "float32", ")", ",", "tf", ".", "cast", "(", "self", ".", "N_s", ",", "tf", ".", "float32", ")", ")", ")", ",", "tf", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.mel_filterbank": [[131, 160], ["numpy.zeros", "range", "sig.SubbandFeatures.bpoint", "sig.SubbandFeatures.bpoint", "sig.SubbandFeatures.bpoint", "range"], "methods", ["home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.bpoint", "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.bpoint", "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.bpoint"], ["", "def", "mel_filterbank", "(", "self", ",", "M", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tCreated a mel-scale filterbank using the equations from [1].\n\t\tThe notation from [1] is also used. For this case, each filter\n\t\tsums to unity, so that it can be used to weight the STMS a\n\t\tpriori SNR to compute the a priori SNR for each subband, i.e.\n\t\teach filter bank.\n\n\t\tArgument/s:\n\t\t\tM - number of filters.\n\n\t\tReturns:\n\t\t\tH - triangular mel filterbank matrix.\n\n\t\t\"\"\"", "\n", "f_l", "=", "0", "# lowest frequency (Hz).", "\n", "f_h", "=", "self", ".", "f_s", "/", "2", "# highest frequency (Hz).", "\n", "K", "=", "self", ".", "K", "//", "2", "+", "1", "# number of frequency bins.", "\n", "H", "=", "np", ".", "zeros", "(", "[", "M", ",", "K", "]", ",", "dtype", "=", "np", ".", "float32", ")", "# mel filter bank.", "\n", "for", "m", "in", "range", "(", "1", ",", "M", "+", "1", ")", ":", "\n", "\t\t\t", "bl", "=", "self", ".", "bpoint", "(", "m", "-", "1", ",", "M", ",", "f_l", ",", "f_h", ")", "# lower boundary point, f(m - 1) for m-th filterbank.", "\n", "c", "=", "self", ".", "bpoint", "(", "m", ",", "M", ",", "f_l", ",", "f_h", ")", "# m-th filterbank centre point, f(m).", "\n", "bh", "=", "self", ".", "bpoint", "(", "m", "+", "1", ",", "M", ",", "f_l", ",", "f_h", ")", "# higher boundary point f(m + 1) for m-th filterbank.", "\n", "for", "k", "in", "range", "(", "K", ")", ":", "\n", "\t\t\t\t", "if", "k", ">=", "bl", "and", "k", "<=", "c", ":", "\n", "\t\t\t\t\t", "H", "[", "m", "-", "1", ",", "k", "]", "=", "(", "2", "*", "(", "k", "-", "bl", ")", ")", "/", "(", "(", "bh", "-", "bl", ")", "*", "(", "c", "-", "bl", ")", ")", "# m-th filterbank up-slope.", "\n", "", "if", "k", ">=", "c", "and", "k", "<=", "bh", ":", "\n", "\t\t\t\t\t", "H", "[", "m", "-", "1", ",", "k", "]", "=", "(", "2", "*", "(", "bh", "-", "k", ")", ")", "/", "(", "(", "bh", "-", "bl", ")", "*", "(", "bh", "-", "c", ")", ")", "# m-th filterbank down-slope.", "\n", "", "", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.bpoint": [[161, 177], ["sig.SubbandFeatures.mel_to_hz", "sig.SubbandFeatures.hz_to_mel", "sig.SubbandFeatures.hz_to_mel", "sig.SubbandFeatures.hz_to_mel"], "methods", ["home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.mel_to_hz", "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.hz_to_mel", "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.hz_to_mel", "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.hz_to_mel"], ["", "def", "bpoint", "(", "self", ",", "m", ",", "M", ",", "f_l", ",", "f_h", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tDetirmines the frequency bin boundary point for a filterbank.\n\n\t\tArgument/s:\n\t\t\tm - filterbank.\n\t\t\tM - total filterbanks.\n\t\t\tf_l - lowest frequency.\n\t\t\tf_h - highest frequency.\n\n\t\tReturns:\n\t\t\tFrequency bin boundary point.\n\t\t\"\"\"", "\n", "K", "=", "self", ".", "K", "//", "2", "+", "1", "# number of frequency bins.", "\n", "return", "(", "(", "2", "*", "K", ")", "/", "self", ".", "f_s", ")", "*", "self", ".", "mel_to_hz", "(", "self", ".", "hz_to_mel", "(", "f_l", ")", "+", "m", "*", "(", "(", "self", ".", "hz_to_mel", "(", "f_h", ")", "-", "self", ".", "hz_to_mel", "(", "f_l", ")", ")", "/", "(", "M", "+", "1", ")", ")", ")", "# boundary point.", "\n", "", "def", "log_10", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.log_10": [[212, 223], ["tensorflow.truediv", "tensorflow.math.log", "tensorflow.math.log"], "methods", ["None"], ["", "def", "log_10", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tlog_10(x).\n\n\t\tArgument/s:\n\t\t\tx - input.\n\n\t\tReturns:\n\t\t\tlog_10(x)\n\t\t\"\"\"", "\n", "return", "tf", ".", "truediv", "(", "tf", ".", "math", ".", "log", "(", "x", ")", ",", "tf", ".", "math", ".", "log", "(", "self", ".", "ten", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.hz_to_mel": [[188, 199], ["numpy.log10"], "methods", ["None"], ["", "def", "hz_to_mel", "(", "self", ",", "f", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tConverts a value from the Hz scale to a value in the mel scale.\n\n\t\tArgument/s:\n\t\t\tf - Hertz value.\n\n\t\tReturns:\n\t\t\tMel value.\n\t\t\"\"\"", "\n", "return", "2595", "*", "np", ".", "log10", "(", "1", "+", "(", "f", "/", "700", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.sig.SubbandFeatures.mel_to_hz": [[200, 211], ["None"], "methods", ["None"], ["", "def", "mel_to_hz", "(", "self", ",", "m", ")", ":", "\n", "\t\t", "\"\"\"\n\t\tConverts a value from the mel scale to a value in the Hz scale.\n\n\t\tArgument/s:\n\t\t\tm - mel value.\n\n\t\tReturns:\n\t\t\tHertz value.\n\t\t\"\"\"", "\n", "return", "700", "*", "(", "(", "10", "**", "(", "m", "/", "2595", ")", ")", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.utils.save_wav": [[15, 27], ["numpy.squeeze", "isinstance", "soundfile.write", "numpy.asarray", "numpy.multiply"], "function", ["None"], ["def", "save_wav", "(", "path", ",", "wav", ",", "f_s", ")", ":", "\n", "\t", "\"\"\"\n\tSave .wav file.\n\n\tArgument/s:\n\t\tpath - absolute path to save .wav file.\n\t\twav - waveform to be saved.\n\t\tf_s - sampling frequency.\n\t\"\"\"", "\n", "wav", "=", "np", ".", "squeeze", "(", "wav", ")", "\n", "if", "isinstance", "(", "wav", "[", "0", "]", ",", "np", ".", "float32", ")", ":", "wav", "=", "np", ".", "asarray", "(", "np", ".", "multiply", "(", "wav", ",", "32768.0", ")", ",", "dtype", "=", "np", ".", "int16", ")", "\n", "sf", ".", "write", "(", "path", ",", "wav", ",", "f_s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.utils.read_wav": [[28, 41], ["soundfile.read"], "function", ["None"], ["", "def", "read_wav", "(", "path", ")", ":", "\n", "\t", "\"\"\"\n\tRead .wav file.\n\n\tArgument/s:\n\t\tpath - absolute path to save .wav file.\n\n\tReturns:\n\t\twav - waveform.\n\t\tf_s - sampling frequency.\n\t\"\"\"", "\n", "wav", ",", "f_s", "=", "sf", ".", "read", "(", "path", ",", "dtype", "=", "'int16'", ")", "\n", "return", "wav", ",", "f_s", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.utils.save_mat": [[42, 53], ["scipy.io.savemat", "path.endswith"], "function", ["None"], ["", "def", "save_mat", "(", "path", ",", "data", ",", "name", ")", ":", "\n", "\t", "\"\"\"\n\tSave .mat file.\n\n\tArgument/s:\n\t\tpath - absolute path to save .mat file.\n\t\tdata - data to be saved.\n\t\tname - dictionary key name.\n\t\"\"\"", "\n", "if", "not", "path", ".", "endswith", "(", "'.mat'", ")", ":", "path", "=", "path", "+", "'.mat'", "\n", "savemat", "(", "path", ",", "{", "name", ":", "data", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.utils.read_mat": [[54, 66], ["scipy.io.loadmat", "path.endswith"], "function", ["None"], ["", "def", "read_mat", "(", "path", ")", ":", "\n", "\t", "\"\"\"\n\tRead .mat file.\n\n\tArgument/s:\n\t\tpath - absolute path to save .mat file.\n\n\tReturns:\n\t\tDictionary.\n\t\"\"\"", "\n", "if", "not", "path", ".", "endswith", "(", "'.mat'", ")", ":", "path", "=", "path", "+", "'.mat'", "\n", "return", "loadmat", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.utils.gpu_config": [[67, 79], ["str", "tensorflow.config.experimental.list_physical_devices", "tensorflow.config.experimental.set_memory_growth"], "function", ["None"], ["", "def", "gpu_config", "(", "gpu_selection", ",", "log_device_placement", "=", "False", ")", ":", "\n", "\t", "\"\"\"\n\tSelects GPU.\n\n\tArgument/s:\n\t\tgpu_selection - GPU to use.\n\t\tlog_device_placement - log the device that each node is placed on.\n\t\"\"\"", "\n", "os", ".", "environ", "[", "\"CUDA_DEVICE_ORDER\"", "]", "=", "\"PCI_BUS_ID\"", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "gpu_selection", ")", "\n", "gpus", "=", "tf", ".", "config", ".", "experimental", ".", "list_physical_devices", "(", "'GPU'", ")", "\n", "for", "gpu", "in", "gpus", ":", "tf", ".", "config", ".", "experimental", ".", "set_memory_growth", "(", "gpu", ",", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.args.read_dtype": [[11, 20], ["x.replace.replace", "any", "map", "float", "int"], "function", ["None"], ["def", "read_dtype", "(", "x", ")", ":", "\n", "\t", "x", "=", "x", ".", "replace", "(", "\"neg_\"", ",", "\"-\"", ")", "\n", "if", "x", "==", "'pi'", ":", "return", "math", ".", "pi", "\n", "elif", "x", "==", "'-pi'", ":", "return", "-", "math", ".", "pi", "\n", "elif", "any", "(", "map", "(", "str", ".", "isdigit", ",", "x", ")", ")", ":", "\n", "\t\t", "if", "'.'", "in", "x", ":", "return", "float", "(", "x", ")", "\n", "else", ":", "return", "int", "(", "x", ")", "\n", "", "else", ":", "\n", "\t\t", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.args.str_to_list": [[21, 25], ["args.read_dtype", "args.read_dtype", "x.split", "args.read_dtype", "y.split", "x.split"], "function", ["home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.args.read_dtype", "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.args.read_dtype", "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.args.read_dtype"], ["", "", "def", "str_to_list", "(", "x", ")", ":", "\n", "\t", "if", "';'", "in", "x", ":", "return", "[", "[", "read_dtype", "(", "z", ")", "for", "z", "in", "y", ".", "split", "(", "','", ")", "]", "for", "y", "in", "x", ".", "split", "(", "';'", ")", "]", "\n", "elif", "','", "in", "x", ":", "return", "[", "read_dtype", "(", "y", ")", "for", "y", "in", "x", ".", "split", "(", "','", ")", "]", "\n", "else", ":", "return", "read_dtype", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.args.str_to_bool": [[26, 27], ["s.lower"], "function", ["None"], ["", "def", "str_to_bool", "(", "s", ")", ":", "return", "s", ".", "lower", "(", ")", "in", "(", "\"yes\"", ",", "\"true\"", ",", "\"t\"", ",", "\"1\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.anicolson_SPN-ASI.spn_asi.args.get_args": [[28, 61], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "get_args", "(", ")", ":", "\n", "\t", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "## OPTIONS (GENERAL)", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "default", "=", "'0'", ",", "type", "=", "str", ",", "help", "=", "'GPU selection'", ")", "\n", "parser", ".", "add_argument", "(", "'--ver'", ",", "type", "=", "str", ",", "help", "=", "'Model version'", ")", "\n", "parser", ".", "add_argument", "(", "'--train'", ",", "default", "=", "False", ",", "type", "=", "str_to_bool", ",", "help", "=", "'Perform training'", ")", "\n", "parser", ".", "add_argument", "(", "'--identification'", ",", "default", "=", "False", ",", "type", "=", "str_to_bool", ",", "help", "=", "'Perform identification'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_workers'", ",", "type", "=", "int", ",", "help", "=", "'Number of workers for Parallel().'", ")", "\n", "\n", "## PATHS", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "default", "=", "'model'", ",", "type", "=", "str", ",", "help", "=", "'Model save path'", ")", "\n", "parser", ".", "add_argument", "(", "'--set_path'", ",", "default", "=", "'set'", ",", "type", "=", "str", ",", "help", "=", "'Path to datasets'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "default", "=", "'data'", ",", "type", "=", "str", ",", "help", "=", "'Save data path'", ")", "\n", "parser", ".", "add_argument", "(", "'--noisy_speech_path'", ",", "type", "=", "str", ",", "help", "=", "'Path to noisy speech files'", ")", "\n", "parser", ".", "add_argument", "(", "'--xi_hat_path'", ",", "type", "=", "str", ",", "help", "=", "'Path to a priori SNR estimate .mat files for ideal binary mask (IBM) estimates.'", ")", "\n", "\n", "## FEATURES", "\n", "parser", ".", "add_argument", "(", "'--f_s'", ",", "type", "=", "int", ",", "help", "=", "'Sampling frequency (Hz)'", ")", "\n", "parser", ".", "add_argument", "(", "'--T_d'", ",", "type", "=", "int", ",", "help", "=", "'Window duration (ms)'", ")", "\n", "parser", ".", "add_argument", "(", "'--T_s'", ",", "type", "=", "int", ",", "help", "=", "'Window shift (ms)'", ")", "\n", "parser", ".", "add_argument", "(", "'--n_subbands'", ",", "type", "=", "int", ",", "help", "=", "'Number of subbands for filterbank'", ")", "\n", "\n", "## MFT", "\n", "parser", ".", "add_argument", "(", "'--marg'", ",", "default", "=", "False", ",", "type", "=", "str_to_bool", ",", "help", "=", "'Use marginalisation'", ")", "\n", "parser", ".", "add_argument", "(", "'--bounds'", ",", "default", "=", "False", ",", "type", "=", "str_to_bool", ",", "help", "=", "'Use bounds for integration'", ")", "\n", "\n", "## SPN", "\n", "parser", ".", "add_argument", "(", "'--min_instances_slice'", ",", "type", "=", "int", ",", "help", "=", "'Minimum number of instances to slice'", ")", "\n", "parser", ".", "add_argument", "(", "'--threshold'", ",", "type", "=", "float", ",", "help", "=", "'Threshold'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "", ""]]}