{"home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.Capsule.__init__": [[62, 78], ["keras.layers.Layer.__init__", "keras.activations.get"], "methods", ["home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.Capsule.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "num_capsule", ",", "\n", "dim_capsule", ",", "\n", "routings", "=", "3", ",", "\n", "share_weights", "=", "True", ",", "\n", "activation", "=", "'squash'", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Capsule", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_capsule", "=", "num_capsule", "\n", "self", ".", "dim_capsule", "=", "dim_capsule", "\n", "self", ".", "routings", "=", "routings", "\n", "self", ".", "share_weights", "=", "share_weights", "\n", "if", "activation", "==", "'squash'", ":", "\n", "            ", "self", ".", "activation", "=", "squash", "\n", "", "else", ":", "\n", "            ", "self", ".", "activation", "=", "activations", ".", "get", "(", "activation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.Capsule.get_config": [[79, 91], ["super().get_config().copy", "super().get_config().copy.update", "super().get_config"], "methods", ["home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.Capsule.get_config"], ["", "", "def", "get_config", "(", "self", ")", ":", "\n", "        ", "config", "=", "super", "(", ")", ".", "get_config", "(", ")", ".", "copy", "(", ")", "\n", "config", ".", "update", "(", "{", "\n", "'num_capsule'", ":", "self", ".", "num_capsule", ",", "\n", "'dim_capsule'", ":", "self", ".", "dim_capsule", ",", "\n", "'routings'", ":", "self", ".", "routings", ",", "\n", "'share_weight'", ":", "self", ".", "share_weights", ",", "\n", "\n", "\n", "\n", "}", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.Capsule.build": [[92, 109], ["COVID-FACT_binary_test.Capsule.add_weight", "COVID-FACT_binary_test.Capsule.add_weight"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "input_dim_capsule", "=", "input_shape", "[", "-", "1", "]", "\n", "if", "self", ".", "share_weights", ":", "\n", "            ", "self", ".", "kernel", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "'capsule_kernel'", ",", "\n", "shape", "=", "(", "1", ",", "input_dim_capsule", ",", "\n", "self", ".", "num_capsule", "*", "self", ".", "dim_capsule", ")", ",", "\n", "initializer", "=", "'glorot_uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "input_num_capsule", "=", "input_shape", "[", "-", "2", "]", "\n", "self", ".", "kernel", "=", "self", ".", "add_weight", "(", "\n", "name", "=", "'capsule_kernel'", ",", "\n", "shape", "=", "(", "input_num_capsule", ",", "input_dim_capsule", ",", "\n", "self", ".", "num_capsule", "*", "self", ".", "dim_capsule", ")", ",", "\n", "initializer", "=", "'glorot_uniform'", ",", "\n", "trainable", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.Capsule.call": [[110, 135], ["keras.backend.reshape", "keras.backend.permute_dimensions", "keras.backend.zeros_like", "range", "keras.backend.conv1d", "keras.backend.local_conv1d", "keras.backend.shape", "keras.backend.shape", "COVID-FACT_binary_test.softmax", "COVID-FACT_binary_test.Capsule.activation", "keras.backend.batch_dot", "keras.backend.batch_dot", "keras.backend.backend", "keras.backend.sum"], "methods", ["home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.softmax"], ["", "", "def", "call", "(", "self", ",", "inputs", ")", ":", "\n", "\n", "\n", "        ", "if", "self", ".", "share_weights", ":", "\n", "            ", "hat_inputs", "=", "K", ".", "conv1d", "(", "inputs", ",", "self", ".", "kernel", ")", "\n", "", "else", ":", "\n", "            ", "hat_inputs", "=", "K", ".", "local_conv1d", "(", "inputs", ",", "self", ".", "kernel", ",", "[", "1", "]", ",", "[", "1", "]", ")", "\n", "\n", "", "batch_size", "=", "K", ".", "shape", "(", "inputs", ")", "[", "0", "]", "\n", "input_num_capsule", "=", "K", ".", "shape", "(", "inputs", ")", "[", "1", "]", "\n", "hat_inputs", "=", "K", ".", "reshape", "(", "hat_inputs", ",", "\n", "(", "batch_size", ",", "input_num_capsule", ",", "\n", "self", ".", "num_capsule", ",", "self", ".", "dim_capsule", ")", ")", "\n", "hat_inputs", "=", "K", ".", "permute_dimensions", "(", "hat_inputs", ",", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "\n", "b", "=", "K", ".", "zeros_like", "(", "hat_inputs", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "routings", ")", ":", "\n", "            ", "c", "=", "softmax", "(", "b", ",", "1", ")", "\n", "o", "=", "self", ".", "activation", "(", "keras", ".", "backend", ".", "batch_dot", "(", "c", ",", "hat_inputs", ",", "[", "2", ",", "2", "]", ")", ")", "\n", "if", "i", "<", "self", ".", "routings", "-", "1", ":", "\n", "                ", "b", "=", "keras", ".", "backend", ".", "batch_dot", "(", "o", ",", "hat_inputs", ",", "[", "2", ",", "3", "]", ")", "\n", "if", "K", ".", "backend", "(", ")", "==", "'theano'", ":", "\n", "                    ", "o", "=", "K", ".", "sum", "(", "o", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "", "return", "o", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.Capsule.compute_output_shape": [[136, 138], ["None"], "methods", ["None"], ["", "def", "compute_output_shape", "(", "self", ",", "input_shape", ")", ":", "\n", "        ", "return", "(", "None", ",", "self", ".", "num_capsule", ",", "self", ".", "dim_capsule", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.squash": [[40, 44], ["keras.backend.sum", "keras.backend.epsilon", "keras.backend.sqrt", "keras.backend.square"], "function", ["None"], ["def", "squash", "(", "x", ",", "axis", "=", "-", "1", ")", ":", "\n", "    ", "s_squared_norm", "=", "K", ".", "sum", "(", "K", ".", "square", "(", "x", ")", ",", "axis", ",", "keepdims", "=", "True", ")", "+", "K", ".", "epsilon", "(", ")", "\n", "scale", "=", "K", ".", "sqrt", "(", "s_squared_norm", ")", "/", "(", "1", "+", "s_squared_norm", ")", "\n", "return", "scale", "*", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.softmax": [[46, 50], ["keras.backend.exp", "keras.backend.sum", "keras.backend.max"], "function", ["None"], ["", "def", "softmax", "(", "x", ",", "axis", "=", "-", "1", ")", ":", "\n", "\n", "    ", "ex", "=", "K", ".", "exp", "(", "x", "-", "K", ".", "max", "(", "x", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "ex", "/", "K", ".", "sum", "(", "ex", ",", "axis", "=", "axis", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.margin_loss": [[52, 57], ["keras.backend.sum", "keras.backend.square", "keras.backend.square", "keras.backend.relu", "keras.backend.relu"], "function", ["None"], ["", "def", "margin_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "\n", "    ", "lamb", ",", "margin", "=", "0.5", ",", "0.1", "\n", "return", "K", ".", "sum", "(", "(", "y_true", "*", "K", ".", "square", "(", "K", ".", "relu", "(", "1", "-", "margin", "-", "y_pred", ")", ")", "+", "lamb", "*", "(", "\n", "1", "-", "y_true", ")", "*", "K", ".", "square", "(", "K", ".", "relu", "(", "y_pred", "-", "margin", ")", ")", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.normalize_image": [[140, 147], ["numpy.max", "numpy.max", "numpy.min", "numpy.max", "numpy.max", "numpy.max", "numpy.min", "numpy.min", "numpy.max", "numpy.min"], "function", ["None"], ["", "", "def", "normalize_image", "(", "x", ")", ":", "#normalize image pixels between 0 and 1", "\n", "        ", "if", "np", ".", "max", "(", "x", ")", "-", "np", ".", "min", "(", "x", ")", "==", "0", "and", "np", ".", "max", "(", "x", ")", "==", "0", ":", "\n", "            ", "return", "x", "\n", "", "elif", "np", ".", "max", "(", "x", ")", "-", "np", ".", "min", "(", "x", ")", "==", "0", "and", "np", ".", "max", "(", "x", ")", "!=", "0", ":", "\n", "            ", "return", "x", "/", "np", ".", "max", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "x", "-", "np", ".", "min", "(", "x", ")", ")", "/", "(", "np", ".", "max", "(", "x", ")", "-", "np", ".", "min", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.segment_lung": [[148, 200], ["os.walk", "pydicom.dcmread", "len", "list", "numpy.zeros", "numpy.uint8", "numpy.zeros", "range", "int", "int", "pydicom.dcmread", "slice_z_locations.append", "zip", "sorted", "numpy.zeros", "SimpleITK.ReadImage", "lungmask.mask.apply", "numpy.uint8", "SimpleITK.GetArrayFromImage", "COVID-FACT_binary_test.normalize_image", "cv2.resize", "COVID-FACT_binary_test.normalize_image", "numpy.expand_dims", "sitk.ReadImage.get", "filename.lower", "lstFilesDCM.append", "os.path.join", "lungmask.mask"], "function", ["home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.normalize_image", "home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.normalize_image"], ["", "", "def", "segment_lung", "(", "mask", ",", "model", ",", "volume_path", ")", ":", "\n", "\n", "# model = mask.get_model('unet','R231CovidWeb')", "\n", "#loop through all dcm files", "\n", "    ", "lstFilesDCM", "=", "[", "]", "# create an empty list", "\n", "for", "dirName", ",", "subdirList", ",", "fileList", "in", "os", ".", "walk", "(", "volume_path", ")", ":", "\n", "        ", "for", "filename", "in", "fileList", ":", "\n", "            ", "if", "\".dcm\"", "in", "filename", ".", "lower", "(", ")", ":", "# check whether the file's DICOM", "\n", "                ", "lstFilesDCM", ".", "append", "(", "os", ".", "path", ".", "join", "(", "dirName", ",", "filename", ")", ")", "\n", "\n", "", "", "", "dataset", "=", "pydicom", ".", "dcmread", "(", "lstFilesDCM", "[", "0", "]", ")", "# a sample image", "\n", "slice_numbers", "=", "len", "(", "lstFilesDCM", ")", "#number of slices", "\n", "# print('Slices:',slice_numbers)", "\n", "\n", "if", "'PixelData'", "in", "dataset", ":", "\n", "        ", "rows", "=", "int", "(", "dataset", ".", "Rows", ")", "\n", "cols", "=", "int", "(", "dataset", ".", "Columns", ")", "\n", "# print('Image size:',rows,cols)", "\n", "\n", "", "slice_z_locations", "=", "[", "]", "\n", "for", "filenameDCM", "in", "lstFilesDCM", ":", "\n", "        ", "ds", "=", "pydicom", ".", "dcmread", "(", "filenameDCM", ")", "\n", "slice_z_locations", ".", "append", "(", "ds", ".", "get", "(", "'SliceLocation'", ")", ")", "\n", "\n", "#sorting slices based on z locations", "\n", "", "slice_locations", "=", "list", "(", "zip", "(", "lstFilesDCM", ",", "slice_z_locations", ")", ")", "\n", "sorted_slice_locations", "=", "sorted", "(", "slice_locations", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "-", "1", ":", ":", "-", "1", "]", "\n", "\n", "# Saving Slices in a numpy array", "\n", "ArrayDicom", "=", "np", ".", "zeros", "(", "(", "slice_numbers", ",", "rows", ",", "cols", ")", ")", "\n", "lung_mask", "=", "np", ".", "uint8", "(", "np", ".", "zeros", "(", "(", "slice_numbers", ",", "rows", ",", "cols", ")", ")", ")", "\n", "# loop through all the DICOM files", "\n", "i", "=", "0", "\n", "for", "filenameDCM", ",", "z_location", "in", "sorted_slice_locations", ":", "\n", "# read the file", "\n", "        ", "ds", "=", "sitk", ".", "ReadImage", "(", "filenameDCM", ")", "\n", "segmentation", "=", "mask", ".", "apply", "(", "ds", ",", "model", ")", "\n", "lung_mask", "[", "i", ",", ":", ",", ":", "]", "=", "np", ".", "uint8", "(", "(", "(", "segmentation", ">", "0", ")", "*", "1", ")", "[", "0", "]", ")", "\n", "ArrayDicom", "[", "i", ",", ":", ",", ":", "]", "=", "sitk", ".", "GetArrayFromImage", "(", "ds", ")", "\n", "i", "=", "i", "+", "1", "\n", "\n", "", "lungs", "=", "np", ".", "zeros", "(", "(", "ArrayDicom", ".", "shape", "[", "0", "]", ",", "256", ",", "256", ",", "1", ")", ")", "\n", "# resizing the data", "\n", "for", "i", "in", "range", "(", "ArrayDicom", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ct", "=", "normalize_image", "(", "ArrayDicom", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "mask_l", "=", "lung_mask", "[", "i", ",", ":", ",", ":", "]", "\n", "seg", "=", "mask_l", "*", "ct", "#apply mask on the image", "\n", "img", "=", "cv2", ".", "resize", "(", "seg", ",", "(", "256", ",", "256", ")", ")", "\n", "img", "=", "normalize_image", "(", "img", ")", "\n", "lungs", "[", "i", ",", ":", ",", ":", ",", ":", "]", "=", "np", ".", "expand_dims", "(", "img", ",", "axis", "=", "-", "1", ")", "\n", "# print('Successfully segmented.')    ", "\n", "", "return", "lung_mask", ",", "ArrayDicom", ",", "lungs", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.test_one_dicom": [[201, 211], ["numpy.zeros", "range", "model.predict", "numpy.argmax", "print", "COVID-FACT_binary_test.normalize_image", "sum"], "function", ["home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.normalize_image"], ["", "def", "test_one_dicom", "(", "model", ",", "X_test", ")", ":", "\n", "# Test", "\n", "    ", "X_test_normal", "=", "np", ".", "zeros", "(", "X_test", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "X_test", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "X_test_normal", "[", "i", ",", ":", ",", ":", ",", ":", "]", "=", "normalize_image", "(", "X_test", "[", "i", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "predict", "=", "model", ".", "predict", "(", "[", "X_test_normal", "]", ")", "\n", "predict", "=", "np", ".", "argmax", "(", "predict", ",", "axis", "=", "1", ")", "\n", "print", "(", "'Abnormal slices:'", ",", "sum", "(", "predict", ")", ")", "\n", "return", "X_test_normal", ",", "predict", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.stage_one_output": [[212, 235], ["COVID-FACT_binary_test.test_one_dicom", "numpy.sum", "numpy.where", "sum", "len", "print", "numpy.zeros", "numpy.zeros", "range", "numpy.sum", "len"], "function", ["home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.test_one_dicom"], ["", "def", "stage_one_output", "(", "model", ",", "X_test", ")", ":", "\n", "    ", "X_test", ",", "predict_init", "=", "test_one_dicom", "(", "model", ",", "X_test", ")", "# predict classes for all slices      ", "\n", "sum_seg", "=", "np", ".", "sum", "(", "np", ".", "sum", "(", "X_test", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "a", "=", "np", ".", "where", "(", "sum_seg", "[", ":", ",", "0", "]", "!=", "0", ")", "# to find out if lung exists or not", "\n", "predict", "=", "predict_init", "[", "a", "]", "\n", "infected_slices", "=", "sum", "(", "predict", ")", "#save the number of infected slices", "\n", "case_slices", "=", "len", "(", "predict", ")", "\n", "print", "(", "'Total Slices:'", ",", "case_slices", ")", "\n", "\n", "X_numpy_inf", "=", "np", ".", "zeros", "(", "(", "infected_slices", ",", "256", ",", "256", ",", "1", ")", ")", "\n", "X_numpy_hlt", "=", "np", ".", "zeros", "(", "(", "case_slices", "-", "infected_slices", ",", "256", ",", "256", ",", "1", ")", ")", "\n", "hlt_ind", "=", "0", "\n", "inf_ind", "=", "0", "\n", "for", "i", "in", "range", "(", "X_test", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "sum_seg", "[", "i", ",", "0", "]", "!=", "0", ":", "#if lung exists", "\n", "            ", "if", "predict_init", "[", "i", "]", "==", "0", ":", "#save healthy slices", "\n", "                ", "X_numpy_hlt", "[", "hlt_ind", ",", ":", ",", ":", ",", ":", "]", "=", "X_test", "[", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "hlt_ind", "=", "hlt_ind", "+", "1", "\n", "", "if", "predict_init", "[", "i", "]", "==", "1", ":", "#save healthy slices", "\n", "                ", "X_numpy_inf", "[", "inf_ind", ",", ":", ",", ":", ",", ":", "]", "=", "X_test", "[", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "inf_ind", "=", "inf_ind", "+", "1", "\n", "\n", "", "", "", "return", "X_numpy_hlt", ",", "X_numpy_inf", ",", "len", "(", "predict_init", ")", ",", "infected_slices", ",", "case_slices", "\n", "\n"]], "home.repos.pwc.inspect_result.ShahinSHH_COVID-FACT.None.COVID-FACT_binary_test.stage_two_output": [[236, 247], ["len", "model2.predict", "sum", "len"], "function", ["None"], ["", "def", "stage_two_output", "(", "x_test", ",", "normal_thresh", ",", "model2", ",", "cutoff", ")", ":", "\n", "\n", "    ", "if", "(", "len", "(", "x_test", ")", "<=", "0.03", "*", "normal_thresh", ")", ":", "\n", "        ", "pred_final", "=", "0", "\n", "prob_one", "=", "0", "\n", "# print('A nonCOVID case.')", "\n", "", "else", ":", "\n", "        ", "pred", "=", "model2", ".", "predict", "(", "x_test", ")", "\n", "prob_one", "=", "sum", "(", "pred", "[", ":", ",", "1", "]", ")", "/", "len", "(", "pred", "[", ":", ",", "1", "]", ")", "\n", "pred_final", "=", "(", "prob_one", ">=", "cutoff", ")", "*", "1", "# cut-off probability  ", "\n", "", "return", "prob_one", ",", "pred_final", "\n", "\n"]]}