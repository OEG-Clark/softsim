{"home.repos.pwc.inspect_result.TACJu_TransFG.None.train.AverageMeter.__init__": [[30, 32], ["train.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.None.train.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.AverageMeter.reset": [[33, 38], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.AverageMeter.update": [[39, 44], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.simple_accuracy": [[45, 47], ["None"], "function", ["None"], ["", "", "def", "simple_accuracy", "(", "preds", ",", "labels", ")", ":", "\n", "    ", "return", "(", "preds", "==", "labels", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.reduce_mean": [[48, 53], ["tensor.clone", "torch.all_reduce"], "function", ["None"], ["", "def", "reduce_mean", "(", "tensor", ",", "nprocs", ")", ":", "\n", "    ", "rt", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "rt", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "rt", "/=", "nprocs", "\n", "return", "rt", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.save_model": [[54, 68], ["os.path.join", "torch.save", "torch.save", "logger.info", "hasattr", "model_to_save.state_dict", "apex.amp.state_dict", "model_to_save.state_dict"], "function", ["None"], ["", "def", "save_model", "(", "args", ",", "model", ")", ":", "\n", "    ", "model_to_save", "=", "model", ".", "module", "if", "hasattr", "(", "model", ",", "'module'", ")", "else", "model", "\n", "model_checkpoint", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "\"%s_checkpoint.bin\"", "%", "args", ".", "name", ")", "\n", "if", "args", ".", "fp16", ":", "\n", "        ", "checkpoint", "=", "{", "\n", "'model'", ":", "model_to_save", ".", "state_dict", "(", ")", ",", "\n", "'amp'", ":", "amp", ".", "state_dict", "(", ")", "\n", "}", "\n", "", "else", ":", "\n", "        ", "checkpoint", "=", "{", "\n", "'model'", ":", "model_to_save", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "", "torch", ".", "save", "(", "checkpoint", ",", "model_checkpoint", ")", "\n", "logger", ".", "info", "(", "\"Saved model checkpoint to [DIR: %s]\"", ",", "args", ".", "output_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.setup": [[69, 99], ["models.modeling.VisionTransformer", "models.modeling.VisionTransformer.load_from", "models.modeling.VisionTransformer.to", "train.count_parameters", "logger.info", "logger.info", "logger.info", "numpy.load", "models.modeling.VisionTransformer.load_state_dict", "torch.load", "torch.load"], "function", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.load_from", "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.count_parameters"], ["", "def", "setup", "(", "args", ")", ":", "\n", "# Prepare model", "\n", "    ", "config", "=", "CONFIGS", "[", "args", ".", "model_type", "]", "\n", "config", ".", "split", "=", "args", ".", "split", "\n", "config", ".", "slide_step", "=", "args", ".", "slide_step", "\n", "\n", "if", "args", ".", "dataset", "==", "\"CUB_200_2011\"", ":", "\n", "        ", "num_classes", "=", "200", "\n", "", "elif", "args", ".", "dataset", "==", "\"car\"", ":", "\n", "        ", "num_classes", "=", "196", "\n", "", "elif", "args", ".", "dataset", "==", "\"nabirds\"", ":", "\n", "        ", "num_classes", "=", "555", "\n", "", "elif", "args", ".", "dataset", "==", "\"dog\"", ":", "\n", "        ", "num_classes", "=", "120", "\n", "", "elif", "args", ".", "dataset", "==", "\"INat2017\"", ":", "\n", "        ", "num_classes", "=", "5089", "\n", "\n", "", "model", "=", "VisionTransformer", "(", "config", ",", "args", ".", "img_size", ",", "zero_head", "=", "True", ",", "num_classes", "=", "num_classes", ",", "smoothing_value", "=", "args", ".", "smoothing_value", ")", "\n", "\n", "model", ".", "load_from", "(", "np", ".", "load", "(", "args", ".", "pretrained_dir", ")", ")", "\n", "if", "args", ".", "pretrained_model", "is", "not", "None", ":", "\n", "        ", "pretrained_model", "=", "torch", ".", "load", "(", "args", ".", "pretrained_model", ")", "[", "'model'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained_model", ")", "\n", "", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "num_params", "=", "count_parameters", "(", "model", ")", "\n", "\n", "logger", ".", "info", "(", "\"{}\"", ".", "format", "(", "config", ")", ")", "\n", "logger", ".", "info", "(", "\"Training parameters %s\"", ",", "args", ")", "\n", "logger", ".", "info", "(", "\"Total Parameter: \\t%2.1fM\"", "%", "num_params", ")", "\n", "return", "args", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.count_parameters": [[100, 103], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "return", "params", "/", "1000000", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.set_seed": [[104, 110], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_seed", "(", "args", ")", ":", "\n", "    ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "if", "args", ".", "n_gpu", ">", "0", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.valid": [[111, 167], ["train.AverageMeter", "logger.info", "logger.info", "logger.info", "model.eval", "tqdm.tqdm", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "enumerate", "train.simple_accuracy", "torch.tensor().to", "torch.tensor().to", "torch.barrier", "train.reduce_mean", "val_accuracy.detach().cpu().numpy.detach().cpu().numpy", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "len", "tuple", "tqdm.tqdm.set_description", "writer.add_scalar", "torch.no_grad", "torch.no_grad", "model", "torch.nn.CrossEntropyLoss.", "eval_loss.mean.mean", "train.AverageMeter.update", "torch.argmax", "torch.argmax", "len", "all_preds.append", "all_label.append", "numpy.append", "numpy.append", "torch.tensor", "torch.tensor", "val_accuracy.detach().cpu().numpy.detach().cpu", "t.to", "eval_loss.mean.item", "torch.argmax.detach().cpu().numpy", "y.detach().cpu().numpy", "torch.argmax.detach().cpu().numpy", "y.detach().cpu().numpy", "val_accuracy.detach().cpu().numpy.detach", "torch.argmax.detach().cpu", "y.detach().cpu", "torch.argmax.detach().cpu", "y.detach().cpu", "torch.argmax.detach", "y.detach", "torch.argmax.detach", "y.detach"], "function", ["home.repos.pwc.inspect_result.TACJu_TransFG.None.train.simple_accuracy", "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.reduce_mean", "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.AverageMeter.update"], ["", "", "def", "valid", "(", "args", ",", "model", ",", "writer", ",", "test_loader", ",", "global_step", ")", ":", "\n", "# Validation!", "\n", "    ", "eval_losses", "=", "AverageMeter", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"***** Running Validation *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num steps = %d\"", ",", "len", "(", "test_loader", ")", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "args", ".", "eval_batch_size", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "all_preds", ",", "all_label", "=", "[", "]", ",", "[", "]", "\n", "epoch_iterator", "=", "tqdm", "(", "test_loader", ",", "\n", "desc", "=", "\"Validating... (loss=X.X)\"", ",", "\n", "bar_format", "=", "\"{l_bar}{r_bar}\"", ",", "\n", "dynamic_ncols", "=", "True", ",", "\n", "disable", "=", "args", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ")", "\n", "loss_fct", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "epoch_iterator", ")", ":", "\n", "        ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "args", ".", "device", ")", "for", "t", "in", "batch", ")", "\n", "x", ",", "y", "=", "batch", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "logits", "=", "model", "(", "x", ")", "\n", "\n", "eval_loss", "=", "loss_fct", "(", "logits", ",", "y", ")", "\n", "eval_loss", "=", "eval_loss", ".", "mean", "(", ")", "\n", "eval_losses", ".", "update", "(", "eval_loss", ".", "item", "(", ")", ")", "\n", "\n", "preds", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "if", "len", "(", "all_preds", ")", "==", "0", ":", "\n", "            ", "all_preds", ".", "append", "(", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_label", ".", "append", "(", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "all_preds", "[", "0", "]", "=", "np", ".", "append", "(", "\n", "all_preds", "[", "0", "]", ",", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "0", "\n", ")", "\n", "all_label", "[", "0", "]", "=", "np", ".", "append", "(", "\n", "all_label", "[", "0", "]", ",", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "0", "\n", ")", "\n", "", "epoch_iterator", ".", "set_description", "(", "\"Validating... (loss=%2.5f)\"", "%", "eval_losses", ".", "val", ")", "\n", "\n", "", "all_preds", ",", "all_label", "=", "all_preds", "[", "0", "]", ",", "all_label", "[", "0", "]", "\n", "accuracy", "=", "simple_accuracy", "(", "all_preds", ",", "all_label", ")", "\n", "accuracy", "=", "torch", ".", "tensor", "(", "accuracy", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "val_accuracy", "=", "reduce_mean", "(", "accuracy", ",", "args", ".", "nprocs", ")", "\n", "val_accuracy", "=", "val_accuracy", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"\\n\"", ")", "\n", "logger", ".", "info", "(", "\"Validation Results\"", ")", "\n", "logger", ".", "info", "(", "\"Global Steps: %d\"", "%", "global_step", ")", "\n", "logger", ".", "info", "(", "\"Valid Loss: %2.5f\"", "%", "eval_losses", ".", "avg", ")", "\n", "logger", ".", "info", "(", "\"Valid Accuracy: %2.5f\"", "%", "val_accuracy", ")", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "writer", ".", "add_scalar", "(", "\"test/accuracy\"", ",", "scalar_value", "=", "val_accuracy", ",", "global_step", "=", "global_step", ")", "\n", "\n", "", "return", "val_accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.train": [[168, 295], ["torch.utils.tensorboard.SummaryWriter", "utils.data_utils.get_loader", "torch.optim.SGD", "torch.optim.SGD", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "apex.parallel.DistributedDataParallel.zero_grad", "train.set_seed", "train.AverageMeter", "time.time", "torch.utils.tensorboard.SummaryWriter.close", "logger.info", "logger.info", "time.time", "logger.info", "os.makedirs", "apex.parallel.DistributedDataParallel.parameters", "utils.scheduler.WarmupCosineSchedule", "utils.scheduler.WarmupLinearSchedule", "apex.amp.initialize", "apex.parallel.DistributedDataParallel", "apex.parallel.DistributedDataParallel.train", "tqdm.tqdm", "enumerate", "train.simple_accuracy", "torch.tensor().to", "torch.tensor().to", "torch.barrier", "train.reduce_mean", "train_accuracy.detach().cpu().numpy.detach().cpu().numpy", "logger.info", "train.AverageMeter.reset", "os.path.join", "tuple", "apex.parallel.DistributedDataParallel", "loss.mean.mean", "torch.argmax", "torch.argmax", "utils.dist_util.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "len", "all_preds.append", "all_label.append", "numpy.append", "numpy.append", "loss.mean.backward", "train.AverageMeter.update", "utils.scheduler.WarmupLinearSchedule.step", "torch.optim.SGD.step", "torch.optim.SGD.zero_grad", "tqdm.tqdm.set_description", "torch.tensor", "torch.tensor", "train_accuracy.detach().cpu().numpy.detach().cpu", "t.to", "torch.argmax.detach().cpu().numpy", "y.detach().cpu().numpy", "torch.argmax.detach().cpu().numpy", "y.detach().cpu().numpy", "apex.amp.scale_loss", "scaled_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "apex.parallel.DistributedDataParallel.train", "loss.mean.item", "apex.amp.master_params", "apex.parallel.DistributedDataParallel.parameters", "torch.no_grad", "torch.no_grad", "train.valid", "logger.info", "train_accuracy.detach().cpu().numpy.detach", "torch.argmax.detach().cpu", "y.detach().cpu", "torch.argmax.detach().cpu", "y.detach().cpu", "train.save_model", "utils.scheduler.WarmupLinearSchedule.get_lr", "torch.argmax.detach", "y.detach", "torch.argmax.detach", "y.detach"], "function", ["home.repos.pwc.inspect_result.TACJu_TransFG.utils.data_utils.get_loader", "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.set_seed", "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.train", "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.simple_accuracy", "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.reduce_mean", "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.AverageMeter.reset", "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dist_util.get_world_size", "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dist_util.get_world_size", "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dist_util.get_world_size", "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.train", "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.valid", "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.save_model"], ["", "def", "train", "(", "args", ",", "model", ")", ":", "\n", "    ", "\"\"\" Train the model \"\"\"", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "writer", "=", "SummaryWriter", "(", "log_dir", "=", "os", ".", "path", ".", "join", "(", "\"logs\"", ",", "args", ".", "name", ")", ")", "\n", "\n", "args", ".", "train_batch_size", "=", "args", ".", "train_batch_size", "//", "args", ".", "gradient_accumulation_steps", "\n", "\n", "# Prepare dataset", "\n", "train_loader", ",", "test_loader", "=", "get_loader", "(", "args", ")", "\n", "\n", "# Prepare optimizer and scheduler", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "learning_rate", ",", "\n", "momentum", "=", "0.9", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "t_total", "=", "args", ".", "num_steps", "\n", "if", "args", ".", "decay_type", "==", "\"cosine\"", ":", "\n", "        ", "scheduler", "=", "WarmupCosineSchedule", "(", "optimizer", ",", "warmup_steps", "=", "args", ".", "warmup_steps", ",", "t_total", "=", "t_total", ")", "\n", "", "else", ":", "\n", "        ", "scheduler", "=", "WarmupLinearSchedule", "(", "optimizer", ",", "warmup_steps", "=", "args", ".", "warmup_steps", ",", "t_total", "=", "t_total", ")", "\n", "\n", "", "if", "args", ".", "fp16", ":", "\n", "        ", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "models", "=", "model", ",", "\n", "optimizers", "=", "optimizer", ",", "\n", "opt_level", "=", "args", ".", "fp16_opt_level", ")", "\n", "amp", ".", "_amp_state", ".", "loss_scalers", "[", "0", "]", ".", "_loss_scale", "=", "2", "**", "20", "\n", "\n", "# Distributed training", "\n", "", "if", "args", ".", "local_rank", "!=", "-", "1", ":", "\n", "        ", "model", "=", "DDP", "(", "model", ",", "message_size", "=", "250000000", ",", "gradient_predivide_factor", "=", "get_world_size", "(", ")", ")", "\n", "\n", "# Train!", "\n", "", "logger", ".", "info", "(", "\"***** Running training *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Total optimization steps = %d\"", ",", "args", ".", "num_steps", ")", "\n", "logger", ".", "info", "(", "\"  Instantaneous batch size per GPU = %d\"", ",", "args", ".", "train_batch_size", ")", "\n", "logger", ".", "info", "(", "\"  Total train batch size (w. parallel, distributed & accumulation) = %d\"", ",", "\n", "args", ".", "train_batch_size", "*", "args", ".", "gradient_accumulation_steps", "*", "(", "\n", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "if", "args", ".", "local_rank", "!=", "-", "1", "else", "1", ")", ")", "\n", "logger", ".", "info", "(", "\"  Gradient Accumulation steps = %d\"", ",", "args", ".", "gradient_accumulation_steps", ")", "\n", "\n", "model", ".", "zero_grad", "(", ")", "\n", "set_seed", "(", "args", ")", "# Added here for reproducibility (even between python 2 and 3)", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "global_step", ",", "best_acc", "=", "0", ",", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "while", "True", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "epoch_iterator", "=", "tqdm", "(", "train_loader", ",", "\n", "desc", "=", "\"Training (X / X Steps) (loss=X.X)\"", ",", "\n", "bar_format", "=", "\"{l_bar}{r_bar}\"", ",", "\n", "dynamic_ncols", "=", "True", ",", "\n", "disable", "=", "args", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ")", "\n", "all_preds", ",", "all_label", "=", "[", "]", ",", "[", "]", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "epoch_iterator", ")", ":", "\n", "            ", "batch", "=", "tuple", "(", "t", ".", "to", "(", "args", ".", "device", ")", "for", "t", "in", "batch", ")", "\n", "x", ",", "y", "=", "batch", "\n", "\n", "loss", ",", "logits", "=", "model", "(", "x", ",", "y", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "\n", "preds", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "len", "(", "all_preds", ")", "==", "0", ":", "\n", "                ", "all_preds", ".", "append", "(", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "all_label", ".", "append", "(", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "all_preds", "[", "0", "]", "=", "np", ".", "append", "(", "\n", "all_preds", "[", "0", "]", ",", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "0", "\n", ")", "\n", "all_label", "[", "0", "]", "=", "np", ".", "append", "(", "\n", "all_label", "[", "0", "]", ",", "y", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "axis", "=", "0", "\n", ")", "\n", "\n", "", "if", "args", ".", "gradient_accumulation_steps", ">", "1", ":", "\n", "                ", "loss", "=", "loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "", "if", "args", ".", "fp16", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "\n", "", "if", "(", "step", "+", "1", ")", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "                ", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", "*", "args", ".", "gradient_accumulation_steps", ")", "\n", "if", "args", ".", "fp16", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "args", ".", "max_grad_norm", ")", "\n", "", "else", ":", "\n", "                    ", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "max_grad_norm", ")", "\n", "", "scheduler", ".", "step", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "global_step", "+=", "1", "\n", "\n", "epoch_iterator", ".", "set_description", "(", "\n", "\"Training (%d / %d Steps) (loss=%2.5f)\"", "%", "(", "global_step", ",", "t_total", ",", "losses", ".", "val", ")", "\n", ")", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "                    ", "writer", ".", "add_scalar", "(", "\"train/loss\"", ",", "scalar_value", "=", "losses", ".", "val", ",", "global_step", "=", "global_step", ")", "\n", "writer", ".", "add_scalar", "(", "\"train/lr\"", ",", "scalar_value", "=", "scheduler", ".", "get_lr", "(", ")", "[", "0", "]", ",", "global_step", "=", "global_step", ")", "\n", "", "if", "global_step", "%", "args", ".", "eval_every", "==", "0", ":", "\n", "                    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                        ", "accuracy", "=", "valid", "(", "args", ",", "model", ",", "writer", ",", "test_loader", ",", "global_step", ")", "\n", "", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "                        ", "if", "best_acc", "<", "accuracy", ":", "\n", "                            ", "save_model", "(", "args", ",", "model", ")", "\n", "best_acc", "=", "accuracy", "\n", "", "logger", ".", "info", "(", "\"best accuracy so far: %f\"", "%", "best_acc", ")", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "", "if", "global_step", "%", "t_total", "==", "0", ":", "\n", "                    ", "break", "\n", "", "", "", "all_preds", ",", "all_label", "=", "all_preds", "[", "0", "]", ",", "all_label", "[", "0", "]", "\n", "accuracy", "=", "simple_accuracy", "(", "all_preds", ",", "all_label", ")", "\n", "accuracy", "=", "torch", ".", "tensor", "(", "accuracy", ")", ".", "to", "(", "args", ".", "device", ")", "\n", "dist", ".", "barrier", "(", ")", "\n", "train_accuracy", "=", "reduce_mean", "(", "accuracy", ",", "args", ".", "nprocs", ")", "\n", "train_accuracy", "=", "train_accuracy", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "logger", ".", "info", "(", "\"train accuracy so far: %f\"", "%", "train_accuracy", ")", "\n", "losses", ".", "reset", "(", ")", "\n", "if", "global_step", "%", "t_total", "==", "0", ":", "\n", "            ", "break", "\n", "\n", "", "", "writer", ".", "close", "(", ")", "\n", "logger", ".", "info", "(", "\"Best Accuracy: \\t%f\"", "%", "best_acc", ")", "\n", "logger", ".", "info", "(", "\"End Training!\"", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "logger", ".", "info", "(", "\"Total Training Time: \\t%f\"", "%", "(", "(", "end_time", "-", "start_time", ")", "/", "3600", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.main": [[296, 393], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "logging.basicConfig", "logger.warning", "train.set_seed", "train.setup", "train.train", "torch.device", "torch.device", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.device", "torch.device", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.cuda.is_available", "torch.cuda.is_available", "datetime.timedelta", "bool"], "function", ["home.repos.pwc.inspect_result.TACJu_TransFG.None.train.set_seed", "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.setup", "home.repos.pwc.inspect_result.TACJu_TransFG.None.train.train"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# Required parameters", "\n", "parser", ".", "add_argument", "(", "\"--name\"", ",", "required", "=", "True", ",", "\n", "help", "=", "\"Name of this run. Used for monitoring.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset\"", ",", "choices", "=", "[", "\"CUB_200_2011\"", ",", "\"car\"", ",", "\"dog\"", ",", "\"nabirds\"", ",", "\"INat2017\"", "]", ",", "default", "=", "\"CUB_200_2011\"", ",", "\n", "help", "=", "\"Which dataset.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "default", "=", "'/opt/tiger/minist'", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_type\"", ",", "choices", "=", "[", "\"ViT-B_16\"", ",", "\"ViT-B_32\"", ",", "\"ViT-L_16\"", ",", "\n", "\"ViT-L_32\"", ",", "\"ViT-H_14\"", "]", ",", "\n", "default", "=", "\"ViT-B_16\"", ",", "\n", "help", "=", "\"Which variant to use.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--pretrained_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"/opt/tiger/minist/ViT-B_16.npz\"", ",", "\n", "help", "=", "\"Where to search for pretrained ViT models.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--pretrained_model\"", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "\"load pretrained model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_dir\"", ",", "default", "=", "\"./output\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"The output directory where checkpoints will be written.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--img_size\"", ",", "default", "=", "448", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Resolution size\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_batch_size\"", ",", "default", "=", "16", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Total batch size for training.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_batch_size\"", ",", "default", "=", "8", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Total batch size for eval.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_every\"", ",", "default", "=", "100", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Run prediction on validation set every so many steps.\"", "\n", "\"Will always run one evaluation at the end of training.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--learning_rate\"", ",", "default", "=", "3e-2", ",", "type", "=", "float", ",", "\n", "help", "=", "\"The initial learning rate for SGD.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--weight_decay\"", ",", "default", "=", "0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Weight deay if we apply some.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--num_steps\"", ",", "default", "=", "10000", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Total number of training epochs to perform.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--decay_type\"", ",", "choices", "=", "[", "\"cosine\"", ",", "\"linear\"", "]", ",", "default", "=", "\"cosine\"", ",", "\n", "help", "=", "\"How to decay the learning rate.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--warmup_steps\"", ",", "default", "=", "500", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Step of training to perform learning rate warmup for.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_grad_norm\"", ",", "default", "=", "1.0", ",", "type", "=", "float", ",", "\n", "help", "=", "\"Max gradient norm.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "\"local_rank for distributed training on gpus\"", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "42", ",", "\n", "help", "=", "\"random seed for initialization\"", ")", "\n", "parser", ".", "add_argument", "(", "'--gradient_accumulation_steps'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of updates steps to accumulate before performing a backward/update pass.\"", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"Whether to use 16-bit float precision instead of 32-bit\"", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16_opt_level'", ",", "type", "=", "str", ",", "default", "=", "'O2'", ",", "\n", "help", "=", "\"For fp16: Apex AMP optimization level selected in ['O0', 'O1', 'O2', and 'O3'].\"", "\n", "\"See details at https://nvidia.github.io/apex/amp.html\"", ")", "\n", "parser", ".", "add_argument", "(", "'--loss_scale'", ",", "type", "=", "float", ",", "default", "=", "0", ",", "\n", "help", "=", "\"Loss scaling to improve fp16 numeric stability. Only used when fp16 set to True.\\n\"", "\n", "\"0 (default value): dynamic loss scaling.\\n\"", "\n", "\"Positive power of 2: static loss scaling value.\\n\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--smoothing_value'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "\n", "help", "=", "\"Label smoothing value\\n\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--split'", ",", "type", "=", "str", ",", "default", "=", "'non-overlap'", ",", "\n", "help", "=", "\"Split method\"", ")", "\n", "parser", ".", "add_argument", "(", "'--slide_step'", ",", "type", "=", "int", ",", "default", "=", "12", ",", "\n", "help", "=", "\"Slide step for overlap split\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# if args.fp16 and args.smoothing_value != 0:", "\n", "#     raise NotImplementedError(\"label smoothing not supported for fp16 training now\")", "\n", "args", ".", "data_root", "=", "'{}/{}'", ".", "format", "(", "args", ".", "data_root", ",", "args", ".", "dataset", ")", "\n", "# Setup CUDA, GPU & distributed training", "\n", "if", "args", ".", "local_rank", "==", "-", "1", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "args", ".", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "", "else", ":", "# Initializes the distributed backend which will take care of sychronizing nodes/GPUs", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "\n", "timeout", "=", "timedelta", "(", "minutes", "=", "60", ")", ")", "\n", "args", ".", "n_gpu", "=", "1", "\n", "", "args", ".", "device", "=", "device", "\n", "args", ".", "nprocs", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "# Setup logging", "\n", "logging", ".", "basicConfig", "(", "format", "=", "'%(asctime)s - %(levelname)s - %(name)s - %(message)s'", ",", "\n", "datefmt", "=", "'%m/%d/%Y %H:%M:%S'", ",", "\n", "level", "=", "logging", ".", "INFO", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "else", "logging", ".", "WARN", ")", "\n", "logger", ".", "warning", "(", "\"Process rank: %s, device: %s, n_gpu: %s, distributed training: %s, 16-bits training: %s\"", "%", "\n", "(", "args", ".", "local_rank", ",", "args", ".", "device", ",", "args", ".", "n_gpu", ",", "bool", "(", "args", ".", "local_rank", "!=", "-", "1", ")", ",", "args", ".", "fp16", ")", ")", "\n", "\n", "# Set seed", "\n", "set_seed", "(", "args", ")", "\n", "\n", "# Model & Tokenizer Setup", "\n", "args", ",", "model", "=", "setup", "(", "args", ")", "\n", "# Training", "\n", "train", "(", "args", ",", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dist_util.get_rank": [[3, 9], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.TACJu_TransFG.utils.dist_util.get_rank"], ["def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dist_util.get_world_size": [[10, 16], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.TACJu_TransFG.utils.dist_util.get_world_size"], ["", "def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dist_util.is_main_process": [[17, 19], ["dist_util.get_rank"], "function", ["home.repos.pwc.inspect_result.TACJu_TransFG.utils.dist_util.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dist_util.format_step": [[20, 31], ["isinstance", "len", "len", "len"], "function", ["None"], ["", "def", "format_step", "(", "step", ")", ":", "\n", "    ", "if", "isinstance", "(", "step", ",", "str", ")", ":", "\n", "        ", "return", "step", "\n", "", "s", "=", "\"\"", "\n", "if", "len", "(", "step", ")", ">", "0", ":", "\n", "        ", "s", "+=", "\"Training Epoch: {} \"", ".", "format", "(", "step", "[", "0", "]", ")", "\n", "", "if", "len", "(", "step", ")", ">", "1", ":", "\n", "        ", "s", "+=", "\"Training Iteration: {} \"", ".", "format", "(", "step", "[", "1", "]", ")", "\n", "", "if", "len", "(", "step", ")", ">", "2", ":", "\n", "        ", "s", "+=", "\"Validation Iteration: {} \"", ".", "format", "(", "step", "[", "2", "]", ")", "\n", "", "return", "s", "\n", "", ""]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.data_utils.get_loader": [[16, 121], ["torch.utils.data.DataLoader", "torch.distributed.barrier", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "dataset.CUB", "dataset.CUB", "torch.distributed.barrier", "torch.utils.data.RandomSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.SequentialSampler", "torch.utils.data.DistributedSampler", "torch.utils.data.DataLoader", "dataset.CarsDataset", "dataset.CarsDataset", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "dataset.dogs", "dataset.dogs", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "dataset.NABirds", "dataset.NABirds", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "dataset.INat2017", "dataset.INat2017", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "autoaugment.AutoAugImageNetPolicy", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "autoaugment.AutoAugImageNetPolicy", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "get_loader", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "local_rank", "not", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "\n", "", "if", "args", ".", "dataset", "==", "'CUB_200_2011'", ":", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "600", ",", "600", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "(", "448", ",", "448", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "600", ",", "600", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "(", "448", ",", "448", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "trainset", "=", "CUB", "(", "root", "=", "args", ".", "data_root", ",", "is_train", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "testset", "=", "CUB", "(", "root", "=", "args", ".", "data_root", ",", "is_train", "=", "False", ",", "transform", "=", "test_transform", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'car'", ":", "\n", "        ", "trainset", "=", "CarsDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'devkit/cars_train_annos.mat'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'cars_train'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'devkit/cars_meta.mat'", ")", ",", "\n", "# cleaned=os.path.join(data_dir,'cleaned.dat'),", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "600", ",", "600", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "(", "448", ",", "448", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "AutoAugImageNetPolicy", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", ")", "\n", "testset", "=", "CarsDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'cars_test_annos_withlabels.mat'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'cars_test'", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "'devkit/cars_meta.mat'", ")", ",", "\n", "# cleaned=os.path.join(data_dir,'cleaned_test.dat'),", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "600", ",", "600", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "(", "448", ",", "448", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'dog'", ":", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "600", ",", "600", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "(", "448", ",", "448", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "600", ",", "600", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "(", "448", ",", "448", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "trainset", "=", "dogs", "(", "root", "=", "args", ".", "data_root", ",", "\n", "train", "=", "True", ",", "\n", "cropped", "=", "False", ",", "\n", "transform", "=", "train_transform", ",", "\n", "download", "=", "False", "\n", ")", "\n", "testset", "=", "dogs", "(", "root", "=", "args", ".", "data_root", ",", "\n", "train", "=", "False", ",", "\n", "cropped", "=", "False", ",", "\n", "transform", "=", "test_transform", ",", "\n", "download", "=", "False", "\n", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'nabirds'", ":", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "600", ",", "600", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "(", "448", ",", "448", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "600", ",", "600", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "(", "448", ",", "448", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "trainset", "=", "NABirds", "(", "root", "=", "args", ".", "data_root", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "testset", "=", "NABirds", "(", "root", "=", "args", ".", "data_root", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'INat2017'", ":", "\n", "        ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "400", ",", "400", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "(", "304", ",", "304", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "AutoAugImageNetPolicy", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "Resize", "(", "(", "400", ",", "400", ")", ",", "Image", ".", "BILINEAR", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "(", "304", ",", "304", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "trainset", "=", "INat2017", "(", "args", ".", "data_root", ",", "'train'", ",", "train_transform", ")", "\n", "testset", "=", "INat2017", "(", "args", ".", "data_root", ",", "'val'", ",", "test_transform", ")", "\n", "\n", "", "if", "args", ".", "local_rank", "==", "0", ":", "\n", "        ", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "\n", "", "train_sampler", "=", "RandomSampler", "(", "trainset", ")", "if", "args", ".", "local_rank", "==", "-", "1", "else", "DistributedSampler", "(", "trainset", ")", "\n", "test_sampler", "=", "SequentialSampler", "(", "testset", ")", "if", "args", ".", "local_rank", "==", "-", "1", "else", "DistributedSampler", "(", "testset", ")", "\n", "train_loader", "=", "DataLoader", "(", "trainset", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "batch_size", "=", "args", ".", "train_batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "drop_last", "=", "True", ",", "\n", "pin_memory", "=", "True", ")", "\n", "test_loader", "=", "DataLoader", "(", "testset", ",", "\n", "sampler", "=", "test_sampler", ",", "\n", "batch_size", "=", "args", ".", "eval_batch_size", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ")", "if", "testset", "is", "not", "None", "else", "None", "\n", "\n", "return", "train_loader", ",", "test_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.CUB.__init__": [[20, 48], ["open", "open", "open", "os.path.join", "os.path.join", "os.path.join", "img_name_list.append", "label_list.append", "train_test_list.append", "int", "zip", "zip", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "scipy.misc.imread", "line[].split", "int", "os.path.join", "os.path.join", "line[].split", "zip", "zip", "line[].split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "is_train", "=", "True", ",", "data_len", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "is_train", "=", "is_train", "\n", "self", ".", "transform", "=", "transform", "\n", "img_txt_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'images.txt'", ")", ")", "\n", "label_txt_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'image_class_labels.txt'", ")", ")", "\n", "train_val_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'train_test_split.txt'", ")", ")", "\n", "img_name_list", "=", "[", "]", "\n", "for", "line", "in", "img_txt_file", ":", "\n", "            ", "img_name_list", ".", "append", "(", "line", "[", ":", "-", "1", "]", ".", "split", "(", "' '", ")", "[", "-", "1", "]", ")", "\n", "", "label_list", "=", "[", "]", "\n", "for", "line", "in", "label_txt_file", ":", "\n", "            ", "label_list", ".", "append", "(", "int", "(", "line", "[", ":", "-", "1", "]", ".", "split", "(", "' '", ")", "[", "-", "1", "]", ")", "-", "1", ")", "\n", "", "train_test_list", "=", "[", "]", "\n", "for", "line", "in", "train_val_file", ":", "\n", "            ", "train_test_list", ".", "append", "(", "int", "(", "line", "[", ":", "-", "1", "]", ".", "split", "(", "' '", ")", "[", "-", "1", "]", ")", ")", "\n", "", "train_file_list", "=", "[", "x", "for", "i", ",", "x", "in", "zip", "(", "train_test_list", ",", "img_name_list", ")", "if", "i", "]", "\n", "test_file_list", "=", "[", "x", "for", "i", ",", "x", "in", "zip", "(", "train_test_list", ",", "img_name_list", ")", "if", "not", "i", "]", "\n", "if", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "train_img", "=", "[", "scipy", ".", "misc", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'images'", ",", "train_file", ")", ")", "for", "train_file", "in", "\n", "train_file_list", "[", ":", "data_len", "]", "]", "\n", "self", ".", "train_label", "=", "[", "x", "for", "i", ",", "x", "in", "zip", "(", "train_test_list", ",", "label_list", ")", "if", "i", "]", "[", ":", "data_len", "]", "\n", "self", ".", "train_imgname", "=", "[", "x", "for", "x", "in", "train_file_list", "[", ":", "data_len", "]", "]", "\n", "", "if", "not", "self", ".", "is_train", ":", "\n", "            ", "self", ".", "test_img", "=", "[", "scipy", ".", "misc", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "'images'", ",", "test_file", ")", ")", "for", "test_file", "in", "\n", "test_file_list", "[", ":", "data_len", "]", "]", "\n", "self", ".", "test_label", "=", "[", "x", "for", "i", ",", "x", "in", "zip", "(", "train_test_list", ",", "label_list", ")", "if", "not", "i", "]", "[", ":", "data_len", "]", "\n", "self", ".", "test_imgname", "=", "[", "x", "for", "x", "in", "test_file_list", "[", ":", "data_len", "]", "]", "\n", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.CUB.__getitem__": [[48, 65], ["PIL.Image.fromarray", "PIL.Image.fromarray", "len", "numpy.stack", "dataset.CUB.transform", "len", "numpy.stack", "dataset.CUB.transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "img", ",", "target", ",", "imgname", "=", "self", ".", "train_img", "[", "index", "]", ",", "self", ".", "train_label", "[", "index", "]", ",", "self", ".", "train_imgname", "[", "index", "]", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "                ", "img", "=", "np", ".", "stack", "(", "[", "img", "]", "*", "3", ",", "2", ")", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "'RGB'", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "", "else", ":", "\n", "            ", "img", ",", "target", ",", "imgname", "=", "self", ".", "test_img", "[", "index", "]", ",", "self", ".", "test_label", "[", "index", "]", ",", "self", ".", "test_imgname", "[", "index", "]", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "                ", "img", "=", "np", ".", "stack", "(", "[", "img", "]", "*", "3", ",", "2", ")", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ",", "mode", "=", "'RGB'", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.CUB.__len__": [[66, 71], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "is_train", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_label", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.CarsDataset.__init__": [[74, 101], ["scipy.io.loadmat", "scipy.io.loadmat", "numpy.array", "print", "numpy.loadtxt", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "cleaned_annos.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mat_anno", ",", "data_dir", ",", "car_names", ",", "cleaned", "=", "None", ",", "transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            mat_anno (string): Path to the MATLAB annotation file.\n            data_dir (string): Directory with all the images.\n            transform (callable, optional): Optional transform to be applied\n                on a sample.\n        \"\"\"", "\n", "\n", "self", ".", "full_data_set", "=", "io", ".", "loadmat", "(", "mat_anno", ")", "\n", "self", ".", "car_annotations", "=", "self", ".", "full_data_set", "[", "'annotations'", "]", "\n", "self", ".", "car_annotations", "=", "self", ".", "car_annotations", "[", "0", "]", "\n", "\n", "if", "cleaned", "is", "not", "None", ":", "\n", "            ", "cleaned_annos", "=", "[", "]", "\n", "print", "(", "\"Cleaning up data set (only take pics with rgb chans)...\"", ")", "\n", "clean_files", "=", "np", ".", "loadtxt", "(", "cleaned", ",", "dtype", "=", "str", ")", "\n", "for", "c", "in", "self", ".", "car_annotations", ":", "\n", "                ", "if", "c", "[", "-", "1", "]", "[", "0", "]", "in", "clean_files", ":", "\n", "                    ", "cleaned_annos", ".", "append", "(", "c", ")", "\n", "", "", "self", ".", "car_annotations", "=", "cleaned_annos", "\n", "\n", "", "self", ".", "car_names", "=", "scipy", ".", "io", ".", "loadmat", "(", "car_names", ")", "[", "'class_names'", "]", "\n", "self", ".", "car_names", "=", "np", ".", "array", "(", "self", ".", "car_names", "[", "0", "]", ")", "\n", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.CarsDataset.__len__": [[102, 104], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "car_annotations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.CarsDataset.__getitem__": [[105, 117], ["os.path.join", "PIL.Image.open().convert", "torch.from_numpy().long", "dataset.CarsDataset.transform", "PIL.Image.open", "torch.from_numpy", "numpy.array", "car_class.astype"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_name", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_dir", ",", "self", ".", "car_annotations", "[", "idx", "]", "[", "-", "1", "]", "[", "0", "]", ")", "\n", "image", "=", "Image", ".", "open", "(", "img_name", ")", ".", "convert", "(", "'RGB'", ")", "\n", "car_class", "=", "self", ".", "car_annotations", "[", "idx", "]", "[", "-", "2", "]", "[", "0", "]", "[", "0", "]", "\n", "car_class", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "car_class", ".", "astype", "(", "np", ".", "float32", ")", ")", ")", ".", "long", "(", ")", "-", "1", "\n", "assert", "car_class", "<", "196", "\n", "\n", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "# return image, car_class, img_name", "\n", "", "return", "image", ",", "car_class", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.CarsDataset.map_class": [[118, 122], ["numpy.ravel"], "methods", ["None"], ["", "def", "map_class", "(", "self", ",", "id", ")", ":", "\n", "        ", "id", "=", "np", ".", "ravel", "(", "id", ")", "\n", "ret", "=", "self", ".", "car_names", "[", "id", "-", "1", "]", "[", "0", "]", "[", "0", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.CarsDataset.show_batch": [[123, 132], ["range", "matplotlib.subplot", "dataset.CarsDataset.map_class", "numpy.transpose", "matplotlib.subplot.imshow", "matplotlib.subplot.set_title", "matplotlib.tight_layout", "int", "dataset.CarsDataset.__str__"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.CarsDataset.map_class"], ["", "def", "show_batch", "(", "self", ",", "img_batch", ",", "class_batch", ")", ":", "\n", "\n", "        ", "for", "i", "in", "range", "(", "img_batch", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "img_batch", ".", "shape", "[", "0", "]", ",", "i", "+", "1", ")", "\n", "title_str", "=", "self", ".", "map_class", "(", "int", "(", "class_batch", "[", "i", "]", ")", ")", "\n", "img", "=", "np", ".", "transpose", "(", "img_batch", "[", "i", ",", "...", "]", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "ax", ".", "imshow", "(", "img", ")", "\n", "ax", ".", "set_title", "(", "title_str", ".", "__str__", "(", ")", ",", "{", "'fontsize'", ":", "5", "}", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.dogs.__init__": [[179, 335], ["dataset.dogs.load_split", "os.path.join", "os.path.join", "torchvision.datasets.utils.list_dir", "dataset.dogs.download", "sum", "dataset.dogs.get_boxes", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.dogs.load_split", "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.dogs.download", "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.dogs.get_boxes"], ["def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "train", "=", "True", ",", "\n", "cropped", "=", "False", ",", "\n", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "\n", "# self.root = join(os.path.expanduser(root), self.folder)", "\n", "        ", "self", ".", "root", "=", "root", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "cropped", "=", "cropped", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "split", "=", "self", ".", "load_split", "(", ")", "\n", "\n", "self", ".", "images_folder", "=", "join", "(", "self", ".", "root", ",", "'Images'", ")", "\n", "self", ".", "annotations_folder", "=", "join", "(", "self", ".", "root", ",", "'Annotation'", ")", "\n", "self", ".", "_breeds", "=", "list_dir", "(", "self", ".", "images_folder", ")", "\n", "\n", "if", "self", ".", "cropped", ":", "\n", "            ", "self", ".", "_breed_annotations", "=", "[", "[", "(", "annotation", ",", "box", ",", "idx", ")", "\n", "for", "box", "in", "self", ".", "get_boxes", "(", "join", "(", "self", ".", "annotations_folder", ",", "annotation", ")", ")", "]", "\n", "for", "annotation", ",", "idx", "in", "split", "]", "\n", "self", ".", "_flat_breed_annotations", "=", "sum", "(", "self", ".", "_breed_annotations", ",", "[", "]", ")", "\n", "\n", "self", ".", "_flat_breed_images", "=", "[", "(", "annotation", "+", "'.jpg'", ",", "idx", ")", "for", "annotation", ",", "box", ",", "idx", "in", "self", ".", "_flat_breed_annotations", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_breed_images", "=", "[", "(", "annotation", "+", "'.jpg'", ",", "idx", ")", "for", "annotation", ",", "idx", "in", "split", "]", "\n", "\n", "self", ".", "_flat_breed_images", "=", "self", ".", "_breed_images", "\n", "\n", "", "self", ".", "classes", "=", "[", "\"Chihuaha\"", ",", "\n", "\"Japanese Spaniel\"", ",", "\n", "\"Maltese Dog\"", ",", "\n", "\"Pekinese\"", ",", "\n", "\"Shih-Tzu\"", ",", "\n", "\"Blenheim Spaniel\"", ",", "\n", "\"Papillon\"", ",", "\n", "\"Toy Terrier\"", ",", "\n", "\"Rhodesian Ridgeback\"", ",", "\n", "\"Afghan Hound\"", ",", "\n", "\"Basset Hound\"", ",", "\n", "\"Beagle\"", ",", "\n", "\"Bloodhound\"", ",", "\n", "\"Bluetick\"", ",", "\n", "\"Black-and-tan Coonhound\"", ",", "\n", "\"Walker Hound\"", ",", "\n", "\"English Foxhound\"", ",", "\n", "\"Redbone\"", ",", "\n", "\"Borzoi\"", ",", "\n", "\"Irish Wolfhound\"", ",", "\n", "\"Italian Greyhound\"", ",", "\n", "\"Whippet\"", ",", "\n", "\"Ibizian Hound\"", ",", "\n", "\"Norwegian Elkhound\"", ",", "\n", "\"Otterhound\"", ",", "\n", "\"Saluki\"", ",", "\n", "\"Scottish Deerhound\"", ",", "\n", "\"Weimaraner\"", ",", "\n", "\"Staffordshire Bullterrier\"", ",", "\n", "\"American Staffordshire Terrier\"", ",", "\n", "\"Bedlington Terrier\"", ",", "\n", "\"Border Terrier\"", ",", "\n", "\"Kerry Blue Terrier\"", ",", "\n", "\"Irish Terrier\"", ",", "\n", "\"Norfolk Terrier\"", ",", "\n", "\"Norwich Terrier\"", ",", "\n", "\"Yorkshire Terrier\"", ",", "\n", "\"Wirehaired Fox Terrier\"", ",", "\n", "\"Lakeland Terrier\"", ",", "\n", "\"Sealyham Terrier\"", ",", "\n", "\"Airedale\"", ",", "\n", "\"Cairn\"", ",", "\n", "\"Australian Terrier\"", ",", "\n", "\"Dandi Dinmont\"", ",", "\n", "\"Boston Bull\"", ",", "\n", "\"Miniature Schnauzer\"", ",", "\n", "\"Giant Schnauzer\"", ",", "\n", "\"Standard Schnauzer\"", ",", "\n", "\"Scotch Terrier\"", ",", "\n", "\"Tibetan Terrier\"", ",", "\n", "\"Silky Terrier\"", ",", "\n", "\"Soft-coated Wheaten Terrier\"", ",", "\n", "\"West Highland White Terrier\"", ",", "\n", "\"Lhasa\"", ",", "\n", "\"Flat-coated Retriever\"", ",", "\n", "\"Curly-coater Retriever\"", ",", "\n", "\"Golden Retriever\"", ",", "\n", "\"Labrador Retriever\"", ",", "\n", "\"Chesapeake Bay Retriever\"", ",", "\n", "\"German Short-haired Pointer\"", ",", "\n", "\"Vizsla\"", ",", "\n", "\"English Setter\"", ",", "\n", "\"Irish Setter\"", ",", "\n", "\"Gordon Setter\"", ",", "\n", "\"Brittany\"", ",", "\n", "\"Clumber\"", ",", "\n", "\"English Springer Spaniel\"", ",", "\n", "\"Welsh Springer Spaniel\"", ",", "\n", "\"Cocker Spaniel\"", ",", "\n", "\"Sussex Spaniel\"", ",", "\n", "\"Irish Water Spaniel\"", ",", "\n", "\"Kuvasz\"", ",", "\n", "\"Schipperke\"", ",", "\n", "\"Groenendael\"", ",", "\n", "\"Malinois\"", ",", "\n", "\"Briard\"", ",", "\n", "\"Kelpie\"", ",", "\n", "\"Komondor\"", ",", "\n", "\"Old English Sheepdog\"", ",", "\n", "\"Shetland Sheepdog\"", ",", "\n", "\"Collie\"", ",", "\n", "\"Border Collie\"", ",", "\n", "\"Bouvier des Flandres\"", ",", "\n", "\"Rottweiler\"", ",", "\n", "\"German Shepard\"", ",", "\n", "\"Doberman\"", ",", "\n", "\"Miniature Pinscher\"", ",", "\n", "\"Greater Swiss Mountain Dog\"", ",", "\n", "\"Bernese Mountain Dog\"", ",", "\n", "\"Appenzeller\"", ",", "\n", "\"EntleBucher\"", ",", "\n", "\"Boxer\"", ",", "\n", "\"Bull Mastiff\"", ",", "\n", "\"Tibetan Mastiff\"", ",", "\n", "\"French Bulldog\"", ",", "\n", "\"Great Dane\"", ",", "\n", "\"Saint Bernard\"", ",", "\n", "\"Eskimo Dog\"", ",", "\n", "\"Malamute\"", ",", "\n", "\"Siberian Husky\"", ",", "\n", "\"Affenpinscher\"", ",", "\n", "\"Basenji\"", ",", "\n", "\"Pug\"", ",", "\n", "\"Leonberg\"", ",", "\n", "\"Newfoundland\"", ",", "\n", "\"Great Pyrenees\"", ",", "\n", "\"Samoyed\"", ",", "\n", "\"Pomeranian\"", ",", "\n", "\"Chow\"", ",", "\n", "\"Keeshond\"", ",", "\n", "\"Brabancon Griffon\"", ",", "\n", "\"Pembroke\"", ",", "\n", "\"Cardigan\"", ",", "\n", "\"Toy Poodle\"", ",", "\n", "\"Miniature Poodle\"", ",", "\n", "\"Standard Poodle\"", ",", "\n", "\"Mexican Hairless\"", ",", "\n", "\"Dingo\"", ",", "\n", "\"Dhole\"", ",", "\n", "\"African Hunting Dog\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.dogs.__len__": [[336, 338], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_flat_breed_images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.dogs.__getitem__": [[339, 360], ["os.path.join", "PIL.Image.open().convert", "dataset.dogs.crop", "dataset.dogs.transform", "dataset.dogs.target_transform", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n        Returns:\n            tuple: (image, target) where target is index of the target character class.\n        \"\"\"", "\n", "image_name", ",", "target_class", "=", "self", ".", "_flat_breed_images", "[", "index", "]", "\n", "image_path", "=", "join", "(", "self", ".", "images_folder", ",", "image_name", ")", "\n", "image", "=", "Image", ".", "open", "(", "image_path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "if", "self", ".", "cropped", ":", "\n", "            ", "image", "=", "image", ".", "crop", "(", "self", ".", "_flat_breed_annotations", "[", "index", "]", "[", "1", "]", ")", "\n", "\n", "", "if", "self", ".", "transform", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "\n", "", "if", "self", ".", "target_transform", ":", "\n", "            ", "target_class", "=", "self", ".", "target_transform", "(", "target_class", ")", "\n", "\n", "", "return", "image", ",", "target_class", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.dogs.download": [[361, 377], ["os.path.exists", "os.path.exists", "torchvision.datasets.utils.download_url", "print", "os.remove", "os.path.join", "os.path.join", "len", "len", "print", "tarfile.open", "tar_file.extractall", "os.path.join", "os.listdir", "os.listdir", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "import", "tarfile", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "join", "(", "self", ".", "root", ",", "'Images'", ")", ")", "and", "os", ".", "path", ".", "exists", "(", "join", "(", "self", ".", "root", ",", "'Annotation'", ")", ")", ":", "\n", "            ", "if", "len", "(", "os", ".", "listdir", "(", "join", "(", "self", ".", "root", ",", "'Images'", ")", ")", ")", "==", "len", "(", "os", ".", "listdir", "(", "join", "(", "self", ".", "root", ",", "'Annotation'", ")", ")", ")", "==", "120", ":", "\n", "                ", "print", "(", "'Files already downloaded and verified'", ")", "\n", "return", "\n", "\n", "", "", "for", "filename", "in", "[", "'images'", ",", "'annotation'", ",", "'lists'", "]", ":", "\n", "            ", "tar_filename", "=", "filename", "+", "'.tar'", "\n", "url", "=", "self", ".", "download_url_prefix", "+", "'/'", "+", "tar_filename", "\n", "download_url", "(", "url", ",", "self", ".", "root", ",", "tar_filename", ",", "None", ")", "\n", "print", "(", "'Extracting downloaded file: '", "+", "join", "(", "self", ".", "root", ",", "tar_filename", ")", ")", "\n", "with", "tarfile", ".", "open", "(", "join", "(", "self", ".", "root", ",", "tar_filename", ")", ",", "'r'", ")", "as", "tar_file", ":", "\n", "                ", "tar_file", ".", "extractall", "(", "self", ".", "root", ")", "\n", "", "os", ".", "remove", "(", "join", "(", "self", ".", "root", ",", "tar_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.dogs.get_boxes": [[378, 389], ["xml.etree.ElementTree.parse().getroot", "xml.etree.ElementTree.parse().getroot.iter", "boxes.append", "xml.etree.ElementTree.parse", "int", "int", "int", "int", "objs.find().find", "objs.find().find", "objs.find().find", "objs.find().find", "objs.find", "objs.find", "objs.find", "objs.find"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "get_boxes", "(", "path", ")", ":", "\n", "        ", "import", "xml", ".", "etree", ".", "ElementTree", "\n", "e", "=", "xml", ".", "etree", ".", "ElementTree", ".", "parse", "(", "path", ")", ".", "getroot", "(", ")", "\n", "boxes", "=", "[", "]", "\n", "for", "objs", "in", "e", ".", "iter", "(", "'object'", ")", ":", "\n", "            ", "boxes", ".", "append", "(", "[", "int", "(", "objs", ".", "find", "(", "'bndbox'", ")", ".", "find", "(", "'xmin'", ")", ".", "text", ")", ",", "\n", "int", "(", "objs", ".", "find", "(", "'bndbox'", ")", ".", "find", "(", "'ymin'", ")", ".", "text", ")", ",", "\n", "int", "(", "objs", ".", "find", "(", "'bndbox'", ")", ".", "find", "(", "'xmax'", ")", ".", "text", ")", ",", "\n", "int", "(", "objs", ".", "find", "(", "'bndbox'", ")", ".", "find", "(", "'ymax'", ")", ".", "text", ")", "]", ")", "\n", "", "return", "boxes", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.dogs.load_split": [[390, 401], ["list", "zip", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "scipy.io.loadmat", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "load_split", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "train", ":", "\n", "            ", "split", "=", "scipy", ".", "io", ".", "loadmat", "(", "join", "(", "self", ".", "root", ",", "'train_list.mat'", ")", ")", "[", "'annotation_list'", "]", "\n", "labels", "=", "scipy", ".", "io", ".", "loadmat", "(", "join", "(", "self", ".", "root", ",", "'train_list.mat'", ")", ")", "[", "'labels'", "]", "\n", "", "else", ":", "\n", "            ", "split", "=", "scipy", ".", "io", ".", "loadmat", "(", "join", "(", "self", ".", "root", ",", "'test_list.mat'", ")", ")", "[", "'annotation_list'", "]", "\n", "labels", "=", "scipy", ".", "io", ".", "loadmat", "(", "join", "(", "self", ".", "root", ",", "'test_list.mat'", ")", ")", "[", "'labels'", "]", "\n", "\n", "", "split", "=", "[", "item", "[", "0", "]", "[", "0", "]", "for", "item", "in", "split", "]", "\n", "labels", "=", "[", "item", "[", "0", "]", "-", "1", "for", "item", "in", "labels", "]", "\n", "return", "list", "(", "zip", "(", "split", ",", "labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.dogs.stats": [[402, 414], ["range", "print", "len", "counts.keys", "len", "len", "counts.keys", "float", "float", "len", "len", "counts.keys"], "methods", ["None"], ["", "def", "stats", "(", "self", ")", ":", "\n", "        ", "counts", "=", "{", "}", "\n", "for", "index", "in", "range", "(", "len", "(", "self", ".", "_flat_breed_images", ")", ")", ":", "\n", "            ", "image_name", ",", "target_class", "=", "self", ".", "_flat_breed_images", "[", "index", "]", "\n", "if", "target_class", "not", "in", "counts", ".", "keys", "(", ")", ":", "\n", "                ", "counts", "[", "target_class", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "counts", "[", "target_class", "]", "+=", "1", "\n", "\n", "", "", "print", "(", "\"%d samples spanning %d classes (avg %f per class)\"", "%", "(", "len", "(", "self", ".", "_flat_breed_images", ")", ",", "len", "(", "counts", ".", "keys", "(", ")", ")", ",", "float", "(", "len", "(", "self", ".", "_flat_breed_images", ")", ")", "/", "float", "(", "len", "(", "counts", ".", "keys", "(", ")", ")", ")", ")", ")", "\n", "\n", "return", "counts", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.NABirds.__init__": [[432, 458], ["os.path.join", "pandas.read_csv", "pandas.read_csv", "dataset.get_continuous_class_map", "pandas.read_csv", "pandas.read_csv.merge", "pd.read_csv.merge.merge", "dataset.load_class_names", "dataset.load_hierarchy", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.get_continuous_class_map", "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.load_class_names", "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.load_hierarchy"], ["def", "__init__", "(", "self", ",", "root", ",", "train", "=", "True", ",", "transform", "=", "None", ")", ":", "\n", "        ", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'nabirds'", ")", "\n", "self", ".", "root", "=", "root", "\n", "self", ".", "loader", "=", "default_loader", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "transform", "=", "transform", "\n", "\n", "image_paths", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'images.txt'", ")", ",", "\n", "sep", "=", "' '", ",", "names", "=", "[", "'img_id'", ",", "'filepath'", "]", ")", "\n", "image_class_labels", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'image_class_labels.txt'", ")", ",", "\n", "sep", "=", "' '", ",", "names", "=", "[", "'img_id'", ",", "'target'", "]", ")", "\n", "# Since the raw labels are non-continuous, map them to new ones", "\n", "self", ".", "label_map", "=", "get_continuous_class_map", "(", "image_class_labels", "[", "'target'", "]", ")", "\n", "train_test_split", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'train_test_split.txt'", ")", ",", "\n", "sep", "=", "' '", ",", "names", "=", "[", "'img_id'", ",", "'is_training_img'", "]", ")", "\n", "data", "=", "image_paths", ".", "merge", "(", "image_class_labels", ",", "on", "=", "'img_id'", ")", "\n", "self", ".", "data", "=", "data", ".", "merge", "(", "train_test_split", ",", "on", "=", "'img_id'", ")", "\n", "# Load in the train / test split", "\n", "if", "self", ".", "train", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "data", ".", "is_training_img", "==", "1", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "data", "[", "self", ".", "data", ".", "is_training_img", "==", "0", "]", "\n", "\n", "# Load in the class data", "\n", "", "self", ".", "class_names", "=", "load_class_names", "(", "dataset_path", ")", "\n", "self", ".", "class_hierarchy", "=", "load_hierarchy", "(", "dataset_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.NABirds.__len__": [[459, 461], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.NABirds.__getitem__": [[462, 471], ["os.path.join", "dataset.NABirds.loader", "dataset.NABirds.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "sample", "=", "self", ".", "data", ".", "iloc", "[", "idx", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "sample", ".", "filepath", ")", "\n", "target", "=", "self", ".", "label_map", "[", "sample", ".", "target", "]", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.INat2017.__init__": [[521, 545], ["torchvision.datasets.VisionDataset.__init__", "torchvision.datasets.utils.verify_str_arg", "dataset.INat2017._check_exists", "print", "open", "json.load", "print", "torchvision.datasets.utils.extract_archive", "torchvision.datasets.utils.extract_archive", "RuntimeError", "os.path.join", "print", "dataset.INat2017._download", "os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.__init__", "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.INat2017._check_exists", "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.INat2017._download"], ["def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train'", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "INat2017", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "loader", "=", "default_loader", "\n", "self", ".", "split", "=", "verify_str_arg", "(", "split", ",", "\"split\"", ",", "(", "\"train\"", ",", "\"val\"", ",", ")", ")", "\n", "\n", "if", "self", ".", "_check_exists", "(", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded and verified.'", ")", "\n", "", "elif", "download", ":", "\n", "            ", "if", "not", "(", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "file_list", "[", "'imgs'", "]", "[", "1", "]", ")", ")", "\n", "and", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "file_list", "[", "'annos'", "]", "[", "1", "]", ")", ")", ")", ":", "\n", "                ", "print", "(", "'Downloading...'", ")", "\n", "self", ".", "_download", "(", ")", "\n", "", "print", "(", "'Extracting...'", ")", "\n", "extract_archive", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "file_list", "[", "'imgs'", "]", "[", "1", "]", ")", ")", "\n", "extract_archive", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "file_list", "[", "'annos'", "]", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'Dataset not found. You can use download=True to download it.'", ")", "\n", "", "anno_filename", "=", "split", "+", "'2017.json'", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "anno_filename", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "all_annos", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "self", ".", "annos", "=", "all_annos", "[", "'annotations'", "]", "\n", "self", ".", "images", "=", "all_annos", "[", "'images'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.INat2017.__getitem__": [[546, 557], ["os.path.join", "dataset.INat2017.loader", "dataset.INat2017.transform", "dataset.INat2017.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "images", "[", "index", "]", "[", "'file_name'", "]", ")", "\n", "target", "=", "self", ".", "annos", "[", "index", "]", "[", "'category_id'", "]", "\n", "\n", "image", "=", "self", ".", "loader", "(", "path", ")", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "image", "=", "self", ".", "transform", "(", "image", ")", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "image", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.INat2017.__len__": [[558, 560], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.INat2017._check_exists": [[561, 563], ["os.path.exists", "os.path.join"], "methods", ["None"], ["", "def", "_check_exists", "(", "self", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.INat2017._download": [[564, 569], ["dataset.INat2017.file_list.values", "torchvision.datasets.utils.download_url", "torchvision.datasets.utils.check_integrity", "RuntimeError", "os.path.join"], "methods", ["None"], ["", "def", "_download", "(", "self", ")", ":", "\n", "        ", "for", "url", ",", "filename", ",", "md5", "in", "self", ".", "file_list", ".", "values", "(", ")", ":", "\n", "            ", "download_url", "(", "url", ",", "root", "=", "self", ".", "root", ",", "filename", "=", "filename", ")", "\n", "if", "not", "check_integrity", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "filename", ")", ",", "md5", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"File not found or corrupted.\"", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.make_dataset": [[133, 142], ["os.path.expanduser", "range", "len", "len", "len", "images.append", "os.path.join"], "function", ["None"], ["", "", "", "def", "make_dataset", "(", "dir", ",", "image_ids", ",", "targets", ")", ":", "\n", "    ", "assert", "(", "len", "(", "image_ids", ")", "==", "len", "(", "targets", ")", ")", "\n", "images", "=", "[", "]", "\n", "dir", "=", "os", ".", "path", ".", "expanduser", "(", "dir", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "image_ids", ")", ")", ":", "\n", "        ", "item", "=", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "'data'", ",", "'images'", ",", "\n", "'%s.jpg'", "%", "image_ids", "[", "i", "]", ")", ",", "targets", "[", "i", "]", ")", "\n", "images", ".", "append", "(", "item", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.find_classes": [[143, 160], ["open", "open.close", "numpy.unique", "line.split", "image_ids.append", "targets.append", "range", "len"], "function", ["None"], ["", "def", "find_classes", "(", "classes_file", ")", ":", "\n", "# read classes file, separating out image IDs and class names", "\n", "    ", "image_ids", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "f", "=", "open", "(", "classes_file", ",", "'r'", ")", "\n", "for", "line", "in", "f", ":", "\n", "        ", "split_line", "=", "line", ".", "split", "(", "' '", ")", "\n", "image_ids", ".", "append", "(", "split_line", "[", "0", "]", ")", "\n", "targets", ".", "append", "(", "' '", ".", "join", "(", "split_line", "[", "1", ":", "]", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "# index class names", "\n", "classes", "=", "np", ".", "unique", "(", "targets", ")", "\n", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "targets", "=", "[", "class_to_idx", "[", "c", "]", "for", "c", "in", "targets", "]", "\n", "\n", "return", "(", "image_ids", ",", "targets", ",", "classes", ",", "class_to_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.get_continuous_class_map": [[472, 475], ["set", "enumerate"], "function", ["None"], ["", "", "def", "get_continuous_class_map", "(", "class_labels", ")", ":", "\n", "    ", "label_set", "=", "set", "(", "class_labels", ")", "\n", "return", "{", "k", ":", "i", "for", "i", ",", "k", "in", "enumerate", "(", "label_set", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.load_class_names": [[476, 486], ["open", "os.path.join", "line.strip().split", "line.strip"], "function", ["None"], ["", "def", "load_class_names", "(", "dataset_path", "=", "''", ")", ":", "\n", "    ", "names", "=", "{", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'classes.txt'", ")", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "pieces", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "class_id", "=", "pieces", "[", "0", "]", "\n", "names", "[", "class_id", "]", "=", "' '", ".", "join", "(", "pieces", "[", "1", ":", "]", ")", "\n", "\n", "", "", "return", "names", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.dataset.load_hierarchy": [[487, 497], ["open", "os.path.join", "line.strip().split", "line.strip"], "function", ["None"], ["", "def", "load_hierarchy", "(", "dataset_path", "=", "''", ")", ":", "\n", "    ", "parents", "=", "{", "}", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dataset_path", ",", "'hierarchy.txt'", ")", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "pieces", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "child_id", ",", "parent_id", "=", "pieces", "\n", "parents", "[", "child_id", "]", "=", "parent_id", "\n", "\n", "", "", "return", "parents", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.scheduler.ConstantLRSchedule.__init__": [[11, 13], ["torch.optim.lr_scheduler.LambdaLR.__init__"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "ConstantLRSchedule", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "lambda", "_", ":", "1.0", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.scheduler.WarmupConstantSchedule.__init__": [[20, 23], ["torch.optim.lr_scheduler.LambdaLR.__init__"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_steps", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "super", "(", "WarmupConstantSchedule", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "self", ".", "lr_lambda", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.scheduler.WarmupConstantSchedule.lr_lambda": [[24, 28], ["float", "float", "max"], "methods", ["None"], ["", "def", "lr_lambda", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "step", "<", "self", ".", "warmup_steps", ":", "\n", "            ", "return", "float", "(", "step", ")", "/", "float", "(", "max", "(", "1.0", ",", "self", ".", "warmup_steps", ")", ")", "\n", "", "return", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.scheduler.WarmupLinearSchedule.__init__": [[35, 39], ["torch.optim.lr_scheduler.LambdaLR.__init__"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_steps", ",", "t_total", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "self", ".", "t_total", "=", "t_total", "\n", "super", "(", "WarmupLinearSchedule", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "self", ".", "lr_lambda", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.scheduler.WarmupLinearSchedule.lr_lambda": [[40, 44], ["max", "float", "float", "float", "float", "max", "max"], "methods", ["None"], ["", "def", "lr_lambda", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "step", "<", "self", ".", "warmup_steps", ":", "\n", "            ", "return", "float", "(", "step", ")", "/", "float", "(", "max", "(", "1", ",", "self", ".", "warmup_steps", ")", ")", "\n", "", "return", "max", "(", "0.0", ",", "float", "(", "self", ".", "t_total", "-", "step", ")", "/", "float", "(", "max", "(", "1.0", ",", "self", ".", "t_total", "-", "self", ".", "warmup_steps", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.scheduler.WarmupCosineSchedule.__init__": [[52, 57], ["torch.optim.lr_scheduler.LambdaLR.__init__"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_steps", ",", "t_total", ",", "cycles", "=", ".5", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "self", ".", "t_total", "=", "t_total", "\n", "self", ".", "cycles", "=", "cycles", "\n", "super", "(", "WarmupCosineSchedule", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "self", ".", "lr_lambda", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.scheduler.WarmupCosineSchedule.lr_lambda": [[58, 64], ["max", "float", "float", "float", "float", "max", "max", "math.cos", "float"], "methods", ["None"], ["", "def", "lr_lambda", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "step", "<", "self", ".", "warmup_steps", ":", "\n", "            ", "return", "float", "(", "step", ")", "/", "float", "(", "max", "(", "1.0", ",", "self", ".", "warmup_steps", ")", ")", "\n", "# progress after warmup", "\n", "", "progress", "=", "float", "(", "step", "-", "self", ".", "warmup_steps", ")", "/", "float", "(", "max", "(", "1", ",", "self", ".", "t_total", "-", "self", ".", "warmup_steps", ")", ")", "\n", "return", "max", "(", "0.0", ",", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "float", "(", "self", ".", "cycles", ")", "*", "2.0", "*", "progress", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.autoaugment.AutoAugImageNetPolicy.__init__": [[13, 43], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.4", ",", "\"posterize\"", ",", "8", ",", "0.6", ",", "\"rotate\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"posterize\"", ",", "7", ",", "0.6", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"posterize\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"rotate\"", ",", "3", ",", "0.6", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "8", ",", "0.4", ",", "\"posterize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "0.4", ",", "\"color\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"rotate\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.0", ",", "\"equalize\"", ",", "7", ",", "0.8", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"rotate\"", ",", "8", ",", "1.0", ",", "\"color\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"color\"", ",", "8", ",", "0.8", ",", "\"solarize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"sharpness\"", ",", "7", ",", "0.6", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"shearX\"", ",", "5", ",", "1.0", ",", "\"equalize\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "0", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"equalize\"", ",", "7", ",", "0.2", ",", "\"solarize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"solarize\"", ",", "5", ",", "0.6", ",", "\"autocontrast\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "1.0", ",", "\"equalize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"color\"", ",", "4", ",", "1.0", ",", "\"contrast\"", ",", "8", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.autoaugment.AutoAugImageNetPolicy.__call__": [[45, 48], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.autoaugment.AutoAugImageNetPolicy.__repr__": [[49, 51], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment ImageNet Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.autoaugment.AutoAugCIFAR10Policy.__init__": [[54, 85], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.1", ",", "\"invert\"", ",", "7", ",", "0.2", ",", "\"contrast\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"rotate\"", ",", "2", ",", "0.3", ",", "\"translateX\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"sharpness\"", ",", "1", ",", "0.9", ",", "\"sharpness\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"autocontrast\"", ",", "8", ",", "0.9", ",", "\"equalize\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "\"shearY\"", ",", "7", ",", "0.3", ",", "\"posterize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"color\"", ",", "3", ",", "0.6", ",", "\"brightness\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"sharpness\"", ",", "9", ",", "0.7", ",", "\"brightness\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.5", ",", "\"equalize\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"contrast\"", ",", "7", ",", "0.6", ",", "\"sharpness\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "\"color\"", ",", "7", ",", "0.5", ",", "\"translateX\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"equalize\"", ",", "7", ",", "0.4", ",", "\"autocontrast\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.4", ",", "\"translateY\"", ",", "3", ",", "0.2", ",", "\"sharpness\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"brightness\"", ",", "6", ",", "0.2", ",", "\"color\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.5", ",", "\"solarize\"", ",", "2", ",", "0.0", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "0", ",", "0.6", ",", "\"autocontrast\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.2", ",", "\"equalize\"", ",", "8", ",", "0.8", ",", "\"equalize\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"color\"", ",", "9", ",", "0.6", ",", "\"equalize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"autocontrast\"", ",", "4", ",", "0.2", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"brightness\"", ",", "3", ",", "0.7", ",", "\"color\"", ",", "0", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.4", ",", "\"solarize\"", ",", "5", ",", "0.9", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"translateY\"", ",", "9", ",", "0.7", ",", "\"translateY\"", ",", "9", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"autocontrast\"", ",", "2", ",", "0.8", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"equalize\"", ",", "8", ",", "0.1", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"translateY\"", ",", "9", ",", "0.9", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.autoaugment.AutoAugCIFAR10Policy.__call__": [[87, 90], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.autoaugment.AutoAugCIFAR10Policy.__repr__": [[91, 93], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment CIFAR10 Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.autoaugment.AutoAugSVHNPolicy.__init__": [[96, 127], ["autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy", "autoaugment.SubPolicy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "self", ".", "policies", "=", "[", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.2", ",", "\"invert\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "3", ",", "0.6", ",", "\"equalize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "1", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.8", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "8", ",", "0.4", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"shearY\"", ",", "5", ",", "0.2", ",", "\"solarize\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "6", ",", "0.8", ",", "\"autocontrast\"", ",", "1", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"equalize\"", ",", "3", ",", "0.9", ",", "\"rotate\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.9", ",", "\"shearX\"", ",", "4", ",", "0.3", ",", "\"solarize\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "8", ",", "0.7", ",", "\"invert\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"equalize\"", ",", "5", ",", "0.6", ",", "\"translateY\"", ",", "6", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.9", ",", "\"invert\"", ",", "4", ",", "0.6", ",", "\"equalize\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"contrast\"", ",", "3", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.8", ",", "\"invert\"", ",", "5", ",", "0.0", ",", "\"translateY\"", ",", "2", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearY\"", ",", "6", ",", "0.4", ",", "\"solarize\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.6", ",", "\"invert\"", ",", "4", ",", "0.8", ",", "\"rotate\"", ",", "4", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.3", ",", "\"shearY\"", ",", "7", ",", "0.9", ",", "\"translateX\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.1", ",", "\"shearX\"", ",", "6", ",", "0.6", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", ",", "\n", "\n", "SubPolicy", "(", "0.7", ",", "\"solarize\"", ",", "2", ",", "0.6", ",", "\"translateY\"", ",", "7", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "4", ",", "0.8", ",", "\"invert\"", ",", "8", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "9", ",", "0.8", ",", "\"translateY\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.8", ",", "\"shearY\"", ",", "5", ",", "0.7", ",", "\"autocontrast\"", ",", "3", ",", "fillcolor", ")", ",", "\n", "SubPolicy", "(", "0.7", ",", "\"shearX\"", ",", "2", ",", "0.1", ",", "\"invert\"", ",", "5", ",", "fillcolor", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.autoaugment.AutoAugSVHNPolicy.__call__": [[129, 132], ["random.randint", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "policy_idx", "=", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "policies", ")", "-", "1", ")", "\n", "return", "self", ".", "policies", "[", "policy_idx", "]", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.autoaugment.AutoAugSVHNPolicy.__repr__": [[133, 135], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"AutoAugment SVHN Policy\"", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.autoaugment.SubPolicy.__init__": [[138, 198], ["numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.round().astype", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace", "img.convert().rotate", "PIL.Image.composite().convert", "img.transform", "img.transform", "img.transform", "img.transform", "autoaugment.SubPolicy.__init__.rotate_with_fill"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "p1", ",", "operation1", ",", "magnitude_idx1", ",", "p2", ",", "operation2", ",", "magnitude_idx2", ",", "fillcolor", "=", "(", "128", ",", "128", ",", "128", ")", ")", ":", "\n", "        ", "ranges", "=", "{", "\n", "\"shearX\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"shearY\"", ":", "np", ".", "linspace", "(", "0", ",", "0.3", ",", "10", ")", ",", "\n", "\"translateX\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"translateY\"", ":", "np", ".", "linspace", "(", "0", ",", "150", "/", "331", ",", "10", ")", ",", "\n", "\"rotate\"", ":", "np", ".", "linspace", "(", "0", ",", "30", ",", "10", ")", ",", "\n", "\"color\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"posterize\"", ":", "np", ".", "round", "(", "np", ".", "linspace", "(", "8", ",", "4", ",", "10", ")", ",", "0", ")", ".", "astype", "(", "np", ".", "int", ")", ",", "\n", "\"solarize\"", ":", "np", ".", "linspace", "(", "256", ",", "0", ",", "10", ")", ",", "\n", "\"contrast\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"sharpness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"brightness\"", ":", "np", ".", "linspace", "(", "0.0", ",", "0.9", ",", "10", ")", ",", "\n", "\"autocontrast\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"equalize\"", ":", "[", "0", "]", "*", "10", ",", "\n", "\"invert\"", ":", "[", "0", "]", "*", "10", "\n", "}", "\n", "\n", "def", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ":", "\n", "            ", "rot", "=", "img", ".", "convert", "(", "\"RGBA\"", ")", ".", "rotate", "(", "magnitude", ")", "\n", "return", "Image", ".", "composite", "(", "rot", ",", "Image", ".", "new", "(", "\"RGBA\"", ",", "rot", ".", "size", ",", "(", "128", ",", ")", "*", "4", ")", ",", "rot", ")", ".", "convert", "(", "img", ".", "mode", ")", "\n", "\n", "", "func", "=", "{", "\n", "\"shearX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"shearY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "1", ",", "0", ")", ",", "\n", "Image", ".", "BICUBIC", ",", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"translateX\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "magnitude", "*", "img", ".", "size", "[", "0", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ",", "0", ",", "1", ",", "0", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"translateY\"", ":", "lambda", "img", ",", "magnitude", ":", "img", ".", "transform", "(", "\n", "img", ".", "size", ",", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "magnitude", "*", "img", ".", "size", "[", "1", "]", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "fillcolor", "=", "fillcolor", ")", ",", "\n", "\"rotate\"", ":", "lambda", "img", ",", "magnitude", ":", "rotate_with_fill", "(", "img", ",", "magnitude", ")", ",", "\n", "# \"rotate\": lambda img, magnitude: img.rotate(magnitude * random.choice([-1, 1])),", "\n", "\"color\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"posterize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "posterize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"solarize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "solarize", "(", "img", ",", "magnitude", ")", ",", "\n", "\"contrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"sharpness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"brightness\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "\n", "1", "+", "magnitude", "*", "random", ".", "choice", "(", "[", "-", "1", ",", "1", "]", ")", ")", ",", "\n", "\"autocontrast\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "autocontrast", "(", "img", ")", ",", "\n", "\"equalize\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "equalize", "(", "img", ")", ",", "\n", "\"invert\"", ":", "lambda", "img", ",", "magnitude", ":", "ImageOps", ".", "invert", "(", "img", ")", "\n", "}", "\n", "\n", "# self.name = \"{}_{:.2f}_and_{}_{:.2f}\".format(", "\n", "#     operation1, ranges[operation1][magnitude_idx1],", "\n", "#     operation2, ranges[operation2][magnitude_idx2])", "\n", "self", ".", "p1", "=", "p1", "\n", "self", ".", "operation1", "=", "func", "[", "operation1", "]", "\n", "self", ".", "magnitude1", "=", "ranges", "[", "operation1", "]", "[", "magnitude_idx1", "]", "\n", "self", ".", "p2", "=", "p2", "\n", "self", ".", "operation2", "=", "func", "[", "operation2", "]", "\n", "self", ".", "magnitude2", "=", "ranges", "[", "operation2", "]", "[", "magnitude_idx2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.utils.autoaugment.SubPolicy.__call__": [[199, 205], ["random.random", "autoaugment.SubPolicy.operation1", "random.random", "autoaugment.SubPolicy.operation2"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p1", ":", "\n", "            ", "img", "=", "self", ".", "operation1", "(", "img", ",", "self", ".", "magnitude1", ")", "\n", "", "if", "random", ".", "random", "(", ")", "<", "self", ".", "p2", ":", "\n", "            ", "img", "=", "self", ".", "operation2", "(", "img", ",", "self", ".", "magnitude2", ")", "\n", "", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.LabelSmoothing.__init__": [[49, 57], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.__init__"], ["def", "__init__", "(", "self", ",", "smoothing", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Constructor for the LabelSmoothing module.\n        :param smoothing: label smoothing factor\n        \"\"\"", "\n", "super", "(", "LabelSmoothing", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "confidence", "=", "1.0", "-", "smoothing", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.LabelSmoothing.forward": [[58, 66], ["torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "torch.nn.functional.log_softmax", "nll_loss.squeeze.squeeze.squeeze", "loss.mean", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.gather", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "torch.nn.functional.log_softmax.mean", "target.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", ")", ":", "\n", "        ", "logprobs", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n", "nll_loss", "=", "-", "logprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ".", "unsqueeze", "(", "1", ")", ")", "\n", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "1", ")", "\n", "smooth_loss", "=", "-", "logprobs", ".", "mean", "(", "dim", "=", "-", "1", ")", "\n", "loss", "=", "self", ".", "confidence", "*", "nll_loss", "+", "self", ".", "smoothing", "*", "smooth_loss", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Attention.__init__": [[68, 83], ["torch.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Softmax", "torch.nn.Softmax", "torch.nn.Softmax"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_attention_heads", "=", "config", ".", "transformer", "[", "\"num_heads\"", "]", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "self", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "out", "=", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "attn_dropout", "=", "Dropout", "(", "config", ".", "transformer", "[", "\"attention_dropout_rate\"", "]", ")", "\n", "self", ".", "proj_dropout", "=", "Dropout", "(", "config", ".", "transformer", "[", "\"attention_dropout_rate\"", "]", ")", "\n", "\n", "self", ".", "softmax", "=", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Attention.transpose_for_scores": [[84, 88], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Attention.forward": [[89, 111], ["modeling.Attention.query", "modeling.Attention.key", "modeling.Attention.value", "modeling.Attention.transpose_for_scores", "modeling.Attention.transpose_for_scores", "modeling.Attention.transpose_for_scores", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "modeling.Attention.softmax", "modeling.Attention.attn_dropout", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "modeling.Attention.out", "modeling.Attention.proj_dropout", "modeling.Attention.transpose", "math.sqrt", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Attention.transpose_for_scores", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Attention.transpose_for_scores", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Attention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "attention_probs", "=", "self", ".", "softmax", "(", "attention_scores", ")", "\n", "weights", "=", "attention_probs", "\n", "attention_probs", "=", "self", ".", "attn_dropout", "(", "attention_probs", ")", "\n", "\n", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "attention_output", "=", "self", ".", "out", "(", "context_layer", ")", "\n", "attention_output", "=", "self", ".", "proj_dropout", "(", "attention_output", ")", "\n", "return", "attention_output", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Mlp.__init__": [[113, 121], ["torch.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "modeling.Mlp._init_weights"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.__init__", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Mlp._init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Mlp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc1", "=", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "transformer", "[", "\"mlp_dim\"", "]", ")", "\n", "self", ".", "fc2", "=", "Linear", "(", "config", ".", "transformer", "[", "\"mlp_dim\"", "]", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "act_fn", "=", "ACT2FN", "[", "\"gelu\"", "]", "\n", "self", ".", "dropout", "=", "Dropout", "(", "config", ".", "transformer", "[", "\"dropout_rate\"", "]", ")", "\n", "\n", "self", ".", "_init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Mlp._init_weights": [[122, 127], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc1", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "fc2", ".", "weight", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "fc1", ".", "bias", ",", "std", "=", "1e-6", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "fc2", ".", "bias", ",", "std", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Mlp.forward": [[128, 135], ["modeling.Mlp.fc1", "modeling.Mlp.act_fn", "modeling.Mlp.dropout", "modeling.Mlp.fc2", "modeling.Mlp.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "act_fn", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Embeddings.__init__": [[139, 161], ["torch.Module.__init__", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "img_size", ",", "in_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "Embeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hybrid", "=", "None", "\n", "img_size", "=", "_pair", "(", "img_size", ")", "\n", "\n", "patch_size", "=", "_pair", "(", "config", ".", "patches", "[", "\"size\"", "]", ")", "\n", "if", "config", ".", "split", "==", "'non-overlap'", ":", "\n", "            ", "n_patches", "=", "(", "img_size", "[", "0", "]", "//", "patch_size", "[", "0", "]", ")", "*", "(", "img_size", "[", "1", "]", "//", "patch_size", "[", "1", "]", ")", "\n", "self", ".", "patch_embeddings", "=", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "config", ".", "hidden_size", ",", "\n", "kernel_size", "=", "patch_size", ",", "\n", "stride", "=", "patch_size", ")", "\n", "", "elif", "config", ".", "split", "==", "'overlap'", ":", "\n", "            ", "n_patches", "=", "(", "(", "img_size", "[", "0", "]", "-", "patch_size", "[", "0", "]", ")", "//", "config", ".", "slide_step", "+", "1", ")", "*", "(", "(", "img_size", "[", "1", "]", "-", "patch_size", "[", "1", "]", ")", "//", "config", ".", "slide_step", "+", "1", ")", "\n", "self", ".", "patch_embeddings", "=", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "config", ".", "hidden_size", ",", "\n", "kernel_size", "=", "patch_size", ",", "\n", "stride", "=", "(", "config", ".", "slide_step", ",", "config", ".", "slide_step", ")", ")", "\n", "", "self", ".", "position_embeddings", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "n_patches", "+", "1", ",", "config", ".", "hidden_size", ")", ")", "\n", "self", ".", "cls_token", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "1", ",", "1", ",", "config", ".", "hidden_size", ")", ")", "\n", "\n", "self", ".", "dropout", "=", "Dropout", "(", "config", ".", "transformer", "[", "\"dropout_rate\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Embeddings.forward": [[162, 176], ["modeling.Embeddings.cls_token.expand", "modeling.Embeddings.patch_embeddings", "modeling.Embeddings.flatten", "modeling.Embeddings.transpose", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling.Embeddings.dropout", "modeling.Embeddings.hybrid_model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "B", "=", "x", ".", "shape", "[", "0", "]", "\n", "cls_tokens", "=", "self", ".", "cls_token", ".", "expand", "(", "B", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "hybrid", ":", "\n", "            ", "x", "=", "self", ".", "hybrid_model", "(", "x", ")", "\n", "", "x", "=", "self", ".", "patch_embeddings", "(", "x", ")", "\n", "x", "=", "x", ".", "flatten", "(", "2", ")", "\n", "x", "=", "x", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "cls_tokens", ",", "x", ")", ",", "dim", "=", "1", ")", "\n", "\n", "embeddings", "=", "x", "+", "self", ".", "position_embeddings", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Block.__init__": [[178, 185], ["torch.Module.__init__", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "modeling.Mlp", "modeling.Attention"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_size", "=", "config", ".", "hidden_size", "\n", "self", ".", "attention_norm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "ffn_norm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-6", ")", "\n", "self", ".", "ffn", "=", "Mlp", "(", "config", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Block.forward": [[186, 197], ["modeling.Block.attention_norm", "modeling.Block.attn", "modeling.Block.ffn_norm", "modeling.Block.ffn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "x", "\n", "x", "=", "self", ".", "attention_norm", "(", "x", ")", "\n", "x", ",", "weights", "=", "self", ".", "attn", "(", "x", ")", "\n", "x", "=", "x", "+", "h", "\n", "\n", "h", "=", "x", "\n", "x", "=", "self", ".", "ffn_norm", "(", "x", ")", "\n", "x", "=", "self", ".", "ffn", "(", "x", ")", "\n", "x", "=", "x", "+", "h", "\n", "return", "x", ",", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Block.load_from": [[198, 234], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "np2th().view().t", "np2th().view().t", "np2th().view().t", "np2th().view().t", "np2th().view", "np2th().view", "np2th().view", "np2th().view", "modeling.Block.attn.query.weight.copy_", "modeling.Block.attn.key.weight.copy_", "modeling.Block.attn.value.weight.copy_", "modeling.Block.attn.out.weight.copy_", "modeling.Block.attn.query.bias.copy_", "modeling.Block.attn.key.bias.copy_", "modeling.Block.attn.value.bias.copy_", "modeling.Block.attn.out.bias.copy_", "np2th().t", "np2th().t", "np2th().t", "np2th().t", "modeling.Block.ffn.fc1.weight.copy_", "modeling.Block.ffn.fc2.weight.copy_", "modeling.Block.ffn.fc1.bias.copy_", "modeling.Block.ffn.fc2.bias.copy_", "modeling.Block.attention_norm.weight.copy_", "modeling.Block.attention_norm.bias.copy_", "modeling.Block.ffn_norm.weight.copy_", "modeling.Block.ffn_norm.bias.copy_", "modeling.np2th", "modeling.np2th", "modeling.np2th", "modeling.np2th", "np2th().view", "np2th().view", "np2th().view", "np2th().view", "modeling.np2th", "modeling.np2th", "modeling.np2th", "modeling.np2th", "modeling.np2th", "modeling.np2th", "modeling.np2th", "modeling.np2th", "modeling.np2th", "modeling.np2th", "modeling.np2th", "modeling.np2th", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th"], ["", "def", "load_from", "(", "self", ",", "weights", ",", "n_block", ")", ":", "\n", "        ", "ROOT", "=", "f\"Transformer/encoderblock_{n_block}\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "query_weight", "=", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "ATTENTION_Q", ",", "\"kernel\"", ")", "]", ")", ".", "view", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ")", ".", "t", "(", ")", "\n", "key_weight", "=", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "ATTENTION_K", ",", "\"kernel\"", ")", "]", ")", ".", "view", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ")", ".", "t", "(", ")", "\n", "value_weight", "=", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "ATTENTION_V", ",", "\"kernel\"", ")", "]", ")", ".", "view", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ")", ".", "t", "(", ")", "\n", "out_weight", "=", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "ATTENTION_OUT", ",", "\"kernel\"", ")", "]", ")", ".", "view", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ")", ".", "t", "(", ")", "\n", "\n", "query_bias", "=", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "ATTENTION_Q", ",", "\"bias\"", ")", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "key_bias", "=", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "ATTENTION_K", ",", "\"bias\"", ")", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "value_bias", "=", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "ATTENTION_V", ",", "\"bias\"", ")", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "out_bias", "=", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "ATTENTION_OUT", ",", "\"bias\"", ")", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "self", ".", "attn", ".", "query", ".", "weight", ".", "copy_", "(", "query_weight", ")", "\n", "self", ".", "attn", ".", "key", ".", "weight", ".", "copy_", "(", "key_weight", ")", "\n", "self", ".", "attn", ".", "value", ".", "weight", ".", "copy_", "(", "value_weight", ")", "\n", "self", ".", "attn", ".", "out", ".", "weight", ".", "copy_", "(", "out_weight", ")", "\n", "self", ".", "attn", ".", "query", ".", "bias", ".", "copy_", "(", "query_bias", ")", "\n", "self", ".", "attn", ".", "key", ".", "bias", ".", "copy_", "(", "key_bias", ")", "\n", "self", ".", "attn", ".", "value", ".", "bias", ".", "copy_", "(", "value_bias", ")", "\n", "self", ".", "attn", ".", "out", ".", "bias", ".", "copy_", "(", "out_bias", ")", "\n", "\n", "mlp_weight_0", "=", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "FC_0", ",", "\"kernel\"", ")", "]", ")", ".", "t", "(", ")", "\n", "mlp_weight_1", "=", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "FC_1", ",", "\"kernel\"", ")", "]", ")", ".", "t", "(", ")", "\n", "mlp_bias_0", "=", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "FC_0", ",", "\"bias\"", ")", "]", ")", ".", "t", "(", ")", "\n", "mlp_bias_1", "=", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "FC_1", ",", "\"bias\"", ")", "]", ")", ".", "t", "(", ")", "\n", "\n", "self", ".", "ffn", ".", "fc1", ".", "weight", ".", "copy_", "(", "mlp_weight_0", ")", "\n", "self", ".", "ffn", ".", "fc2", ".", "weight", ".", "copy_", "(", "mlp_weight_1", ")", "\n", "self", ".", "ffn", ".", "fc1", ".", "bias", ".", "copy_", "(", "mlp_bias_0", ")", "\n", "self", ".", "ffn", ".", "fc2", ".", "bias", ".", "copy_", "(", "mlp_bias_1", ")", "\n", "\n", "self", ".", "attention_norm", ".", "weight", ".", "copy_", "(", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "ATTENTION_NORM", ",", "\"scale\"", ")", "]", ")", ")", "\n", "self", ".", "attention_norm", ".", "bias", ".", "copy_", "(", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "ATTENTION_NORM", ",", "\"bias\"", ")", "]", ")", ")", "\n", "self", ".", "ffn_norm", ".", "weight", ".", "copy_", "(", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "MLP_NORM", ",", "\"scale\"", ")", "]", ")", ")", "\n", "self", ".", "ffn_norm", ".", "bias", ".", "copy_", "(", "np2th", "(", "weights", "[", "pjoin", "(", "ROOT", ",", "MLP_NORM", ",", "\"bias\"", ")", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Part_Attention.__init__": [[236, 238], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Part_Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Part_Attention.forward": [[239, 248], ["len", "range", "torch.matmul.max", "torch.matmul.max", "torch.matmul.max", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "length", "=", "len", "(", "x", ")", "\n", "last_map", "=", "x", "[", "0", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "length", ")", ":", "\n", "            ", "last_map", "=", "torch", ".", "matmul", "(", "x", "[", "i", "]", ",", "last_map", ")", "\n", "", "last_map", "=", "last_map", "[", ":", ",", ":", ",", "0", ",", "1", ":", "]", "\n", "\n", "_", ",", "max_inx", "=", "last_map", ".", "max", "(", "2", ")", "\n", "return", "_", ",", "max_inx", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Encoder.__init__": [[250, 259], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "modeling.Part_Attention", "modeling.Block", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "torch.nn.LayerNorm", "modeling.Block", "modeling.Encoder.layer.append", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "_", "in", "range", "(", "config", ".", "transformer", "[", "\"num_layers\"", "]", "-", "1", ")", ":", "\n", "            ", "layer", "=", "Block", "(", "config", ")", "\n", "self", ".", "layer", ".", "append", "(", "copy", ".", "deepcopy", "(", "layer", ")", ")", "\n", "", "self", ".", "part_select", "=", "Part_Attention", "(", ")", "\n", "self", ".", "part_layer", "=", "Block", "(", "config", ")", "\n", "self", ".", "part_norm", "=", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Encoder.forward": [[260, 277], ["modeling.Encoder.part_select", "range", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.stack().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling.Encoder.part_layer", "modeling.Encoder.part_norm", "layer", "attn_weights.append", "torch.stack().squeeze.append", "torch.stack().squeeze.append", "torch.stack().squeeze.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "hidden_states[].unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "attn_weights", "=", "[", "]", "\n", "for", "layer", "in", "self", ".", "layer", ":", "\n", "            ", "hidden_states", ",", "weights", "=", "layer", "(", "hidden_states", ")", "\n", "attn_weights", ".", "append", "(", "weights", ")", "\n", "", "part_num", ",", "part_inx", "=", "self", ".", "part_select", "(", "attn_weights", ")", "\n", "part_inx", "=", "part_inx", "+", "1", "\n", "parts", "=", "[", "]", "\n", "B", ",", "num", "=", "part_inx", ".", "shape", "\n", "for", "i", "in", "range", "(", "B", ")", ":", "\n", "            ", "parts", ".", "append", "(", "hidden_states", "[", "i", ",", "part_inx", "[", "i", ",", ":", "]", "]", ")", "\n", "", "parts", "=", "torch", ".", "stack", "(", "parts", ")", ".", "squeeze", "(", "1", ")", "\n", "concat", "=", "torch", ".", "cat", "(", "(", "hidden_states", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "1", ")", ",", "parts", ")", ",", "dim", "=", "1", ")", "\n", "part_states", ",", "part_weights", "=", "self", ".", "part_layer", "(", "concat", ")", "\n", "part_encoded", "=", "self", ".", "part_norm", "(", "part_states", ")", "\n", "\n", "return", "part_encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Transformer.__init__": [[279, 283], ["torch.Module.__init__", "modeling.Embeddings", "modeling.Encoder"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "img_size", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embeddings", "=", "Embeddings", "(", "config", ",", "img_size", "=", "img_size", ")", "\n", "self", ".", "encoder", "=", "Encoder", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.Transformer.forward": [[284, 288], ["modeling.Transformer.embeddings", "modeling.Transformer.encoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ")", ":", "\n", "        ", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", ")", "\n", "part_encoded", "=", "self", ".", "encoder", "(", "embedding_output", ")", "\n", "return", "part_encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.__init__": [[290, 298], ["torch.Module.__init__", "modeling.Transformer", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "img_size", "=", "224", ",", "num_classes", "=", "21843", ",", "smoothing_value", "=", "0", ",", "zero_head", "=", "False", ")", ":", "\n", "        ", "super", "(", "VisionTransformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "smoothing_value", "=", "smoothing_value", "\n", "self", ".", "zero_head", "=", "zero_head", "\n", "self", ".", "classifier", "=", "config", ".", "classifier", "\n", "self", ".", "transformer", "=", "Transformer", "(", "config", ",", "img_size", ")", "\n", "self", ".", "part_head", "=", "Linear", "(", "config", ".", "hidden_size", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.forward": [[299, 314], ["modeling.VisionTransformer.transformer", "modeling.VisionTransformer.part_head", "LabelSmoothing.", "modeling.con_loss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "modeling.LabelSmoothing", "modeling.VisionTransformer.view", "labels.view", "labels.view"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.con_loss"], ["", "def", "forward", "(", "self", ",", "x", ",", "labels", "=", "None", ")", ":", "\n", "        ", "part_tokens", "=", "self", ".", "transformer", "(", "x", ")", "\n", "part_logits", "=", "self", ".", "part_head", "(", "part_tokens", "[", ":", ",", "0", "]", ")", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "smoothing_value", "==", "0", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "LabelSmoothing", "(", "self", ".", "smoothing_value", ")", "\n", "", "part_loss", "=", "loss_fct", "(", "part_logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_classes", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "contrast_loss", "=", "con_loss", "(", "part_tokens", "[", ":", ",", "0", "]", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "loss", "=", "part_loss", "+", "contrast_loss", "\n", "return", "loss", ",", "part_logits", "\n", "", "else", ":", "\n", "            ", "return", "part_logits", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.load_from": [[315, 363], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "modeling.VisionTransformer.transformer.embeddings.patch_embeddings.weight.copy_", "modeling.VisionTransformer.transformer.embeddings.patch_embeddings.bias.copy_", "modeling.VisionTransformer.transformer.embeddings.cls_token.copy_", "modeling.VisionTransformer.transformer.encoder.part_norm.weight.copy_", "modeling.VisionTransformer.transformer.encoder.part_norm.bias.copy_", "modeling.np2th", "modeling.VisionTransformer.transformer.encoder.named_children", "modeling.np2th", "modeling.np2th", "modeling.np2th", "modeling.np2th", "modeling.np2th", "numpy.concatenate.size", "posemb_new.size", "modeling.VisionTransformer.transformer.embeddings.position_embeddings.copy_", "logger.info", "posemb_new.size", "int", "int", "print", "posemb_grid.reshape.reshape.reshape", "scipy.ndimage.zoom", "posemb_grid.reshape.reshape.reshape", "numpy.concatenate", "modeling.VisionTransformer.transformer.embeddings.position_embeddings.copy_", "modeling.VisionTransformer.transformer.embeddings.hybrid_model.root.conv.weight.copy_", "np2th().view", "np2th().view", "modeling.VisionTransformer.transformer.embeddings.hybrid_model.root.gn.weight.copy_", "modeling.VisionTransformer.transformer.embeddings.hybrid_model.root.gn.bias.copy_", "modeling.VisionTransformer.transformer.embeddings.hybrid_model.body.named_children", "numpy.sqrt", "numpy.sqrt", "modeling.np2th", "bname.startswith", "block.named_children", "modeling.np2th", "block.named_children", "len", "unit.load_from", "modeling.np2th", "modeling.np2th", "unit.load_from", "numpy.concatenate.size", "posemb_new.size"], "methods", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.load_from", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th", "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.VisionTransformer.load_from"], ["", "", "def", "load_from", "(", "self", ",", "weights", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "transformer", ".", "embeddings", ".", "patch_embeddings", ".", "weight", ".", "copy_", "(", "np2th", "(", "weights", "[", "\"embedding/kernel\"", "]", ",", "conv", "=", "True", ")", ")", "\n", "self", ".", "transformer", ".", "embeddings", ".", "patch_embeddings", ".", "bias", ".", "copy_", "(", "np2th", "(", "weights", "[", "\"embedding/bias\"", "]", ")", ")", "\n", "self", ".", "transformer", ".", "embeddings", ".", "cls_token", ".", "copy_", "(", "np2th", "(", "weights", "[", "\"cls\"", "]", ")", ")", "\n", "self", ".", "transformer", ".", "encoder", ".", "part_norm", ".", "weight", ".", "copy_", "(", "np2th", "(", "weights", "[", "\"Transformer/encoder_norm/scale\"", "]", ")", ")", "\n", "self", ".", "transformer", ".", "encoder", ".", "part_norm", ".", "bias", ".", "copy_", "(", "np2th", "(", "weights", "[", "\"Transformer/encoder_norm/bias\"", "]", ")", ")", "\n", "\n", "posemb", "=", "np2th", "(", "weights", "[", "\"Transformer/posembed_input/pos_embedding\"", "]", ")", "\n", "posemb_new", "=", "self", ".", "transformer", ".", "embeddings", ".", "position_embeddings", "\n", "if", "posemb", ".", "size", "(", ")", "==", "posemb_new", ".", "size", "(", ")", ":", "\n", "                ", "self", ".", "transformer", ".", "embeddings", ".", "position_embeddings", ".", "copy_", "(", "posemb", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"load_pretrained: resized variant: %s to %s\"", "%", "(", "posemb", ".", "size", "(", ")", ",", "posemb_new", ".", "size", "(", ")", ")", ")", "\n", "ntok_new", "=", "posemb_new", ".", "size", "(", "1", ")", "\n", "\n", "if", "self", ".", "classifier", "==", "\"token\"", ":", "\n", "                    ", "posemb_tok", ",", "posemb_grid", "=", "posemb", "[", ":", ",", ":", "1", "]", ",", "posemb", "[", "0", ",", "1", ":", "]", "\n", "ntok_new", "-=", "1", "\n", "", "else", ":", "\n", "                    ", "posemb_tok", ",", "posemb_grid", "=", "posemb", "[", ":", ",", ":", "0", "]", ",", "posemb", "[", "0", "]", "\n", "\n", "", "gs_old", "=", "int", "(", "np", ".", "sqrt", "(", "len", "(", "posemb_grid", ")", ")", ")", "\n", "gs_new", "=", "int", "(", "np", ".", "sqrt", "(", "ntok_new", ")", ")", "\n", "print", "(", "'load_pretrained: grid-size from %s to %s'", "%", "(", "gs_old", ",", "gs_new", ")", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "reshape", "(", "gs_old", ",", "gs_old", ",", "-", "1", ")", "\n", "\n", "zoom", "=", "(", "gs_new", "/", "gs_old", ",", "gs_new", "/", "gs_old", ",", "1", ")", "\n", "posemb_grid", "=", "ndimage", ".", "zoom", "(", "posemb_grid", ",", "zoom", ",", "order", "=", "1", ")", "\n", "posemb_grid", "=", "posemb_grid", ".", "reshape", "(", "1", ",", "gs_new", "*", "gs_new", ",", "-", "1", ")", "\n", "posemb", "=", "np", ".", "concatenate", "(", "[", "posemb_tok", ",", "posemb_grid", "]", ",", "axis", "=", "1", ")", "\n", "self", ".", "transformer", ".", "embeddings", ".", "position_embeddings", ".", "copy_", "(", "np2th", "(", "posemb", ")", ")", "\n", "\n", "", "for", "bname", ",", "block", "in", "self", ".", "transformer", ".", "encoder", ".", "named_children", "(", ")", ":", "\n", "                ", "if", "bname", ".", "startswith", "(", "'part'", ")", "==", "False", ":", "\n", "                    ", "for", "uname", ",", "unit", "in", "block", ".", "named_children", "(", ")", ":", "\n", "                        ", "unit", ".", "load_from", "(", "weights", ",", "n_block", "=", "uname", ")", "\n", "\n", "", "", "", "if", "self", ".", "transformer", ".", "embeddings", ".", "hybrid", ":", "\n", "                ", "self", ".", "transformer", ".", "embeddings", ".", "hybrid_model", ".", "root", ".", "conv", ".", "weight", ".", "copy_", "(", "np2th", "(", "weights", "[", "\"conv_root/kernel\"", "]", ",", "conv", "=", "True", ")", ")", "\n", "gn_weight", "=", "np2th", "(", "weights", "[", "\"gn_root/scale\"", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "gn_bias", "=", "np2th", "(", "weights", "[", "\"gn_root/bias\"", "]", ")", ".", "view", "(", "-", "1", ")", "\n", "self", ".", "transformer", ".", "embeddings", ".", "hybrid_model", ".", "root", ".", "gn", ".", "weight", ".", "copy_", "(", "gn_weight", ")", "\n", "self", ".", "transformer", ".", "embeddings", ".", "hybrid_model", ".", "root", ".", "gn", ".", "bias", ".", "copy_", "(", "gn_bias", ")", "\n", "\n", "for", "bname", ",", "block", "in", "self", ".", "transformer", ".", "embeddings", ".", "hybrid_model", ".", "body", ".", "named_children", "(", ")", ":", "\n", "                    ", "for", "uname", ",", "unit", "in", "block", ".", "named_children", "(", ")", ":", "\n", "                        ", "unit", ".", "load_from", "(", "weights", ",", "n_block", "=", "bname", ",", "n_unit", "=", "uname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.np2th": [[34, 39], ["torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "weights.transpose.transpose"], "function", ["None"], ["def", "np2th", "(", "weights", ",", "conv", "=", "False", ")", ":", "\n", "    ", "\"\"\"Possibly convert HWIO to OIHW.\"\"\"", "\n", "if", "conv", ":", "\n", "        ", "weights", "=", "weights", ".", "transpose", "(", "[", "3", ",", "2", ",", "0", ",", "1", "]", ")", "\n", "", "return", "torch", ".", "from_numpy", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.swish": [[40, 42], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.modeling.con_loss": [[364, 376], ["torch.normalize", "F.normalize.mm", "torch.stack().float", "torch.stack().float", "torch.stack().float", "F.normalize.t", "torch.stack", "torch.stack", "torch.stack", "range"], "function", ["None"], ["", "", "", "", "", "", "def", "con_loss", "(", "features", ",", "labels", ")", ":", "\n", "    ", "B", ",", "_", "=", "features", ".", "shape", "\n", "features", "=", "F", ".", "normalize", "(", "features", ")", "\n", "cos_matrix", "=", "features", ".", "mm", "(", "features", ".", "t", "(", ")", ")", "\n", "pos_label_matrix", "=", "torch", ".", "stack", "(", "[", "labels", "==", "labels", "[", "i", "]", "for", "i", "in", "range", "(", "B", ")", "]", ")", ".", "float", "(", ")", "\n", "neg_label_matrix", "=", "1", "-", "pos_label_matrix", "\n", "pos_cos_matrix", "=", "1", "-", "cos_matrix", "\n", "neg_cos_matrix", "=", "cos_matrix", "-", "0.4", "\n", "neg_cos_matrix", "[", "neg_cos_matrix", "<", "0", "]", "=", "0", "\n", "loss", "=", "(", "pos_cos_matrix", "*", "pos_label_matrix", ")", ".", "sum", "(", ")", "+", "(", "neg_cos_matrix", "*", "neg_label_matrix", ")", ".", "sum", "(", ")", "\n", "loss", "/=", "(", "B", "*", "B", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.configs.get_testing": [[3, 17], ["ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict"], "function", ["None"], ["def", "get_testing", "(", ")", ":", "\n", "    ", "\"\"\"Returns a minimal configuration for testing.\"\"\"", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "patches", "=", "ml_collections", ".", "ConfigDict", "(", "{", "'size'", ":", "(", "16", ",", "16", ")", "}", ")", "\n", "config", ".", "hidden_size", "=", "1", "\n", "config", ".", "transformer", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "transformer", ".", "mlp_dim", "=", "1", "\n", "config", ".", "transformer", ".", "num_heads", "=", "1", "\n", "config", ".", "transformer", ".", "num_layers", "=", "1", "\n", "config", ".", "transformer", ".", "attention_dropout_rate", "=", "0.0", "\n", "config", ".", "transformer", ".", "dropout_rate", "=", "0.1", "\n", "config", ".", "classifier", "=", "'token'", "\n", "config", ".", "representation_size", "=", "None", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.configs.get_b16_config": [[18, 34], ["ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict"], "function", ["None"], ["", "def", "get_b16_config", "(", ")", ":", "\n", "    ", "\"\"\"Returns the ViT-B/16 configuration.\"\"\"", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "patches", "=", "ml_collections", ".", "ConfigDict", "(", "{", "'size'", ":", "(", "16", ",", "16", ")", "}", ")", "\n", "config", ".", "split", "=", "'non-overlap'", "\n", "config", ".", "slide_step", "=", "12", "\n", "config", ".", "hidden_size", "=", "768", "\n", "config", ".", "transformer", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "transformer", ".", "mlp_dim", "=", "3072", "\n", "config", ".", "transformer", ".", "num_heads", "=", "12", "\n", "config", ".", "transformer", ".", "num_layers", "=", "12", "\n", "config", ".", "transformer", ".", "attention_dropout_rate", "=", "0.0", "\n", "config", ".", "transformer", ".", "dropout_rate", "=", "0.1", "\n", "config", ".", "classifier", "=", "'token'", "\n", "config", ".", "representation_size", "=", "None", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.configs.get_b32_config": [[35, 40], ["configs.get_b16_config"], "function", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.configs.get_b16_config"], ["", "def", "get_b32_config", "(", ")", ":", "\n", "    ", "\"\"\"Returns the ViT-B/32 configuration.\"\"\"", "\n", "config", "=", "get_b16_config", "(", ")", "\n", "config", ".", "patches", ".", "size", "=", "(", "32", ",", "32", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.configs.get_l16_config": [[41, 55], ["ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict"], "function", ["None"], ["", "def", "get_l16_config", "(", ")", ":", "\n", "    ", "\"\"\"Returns the ViT-L/16 configuration.\"\"\"", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "patches", "=", "ml_collections", ".", "ConfigDict", "(", "{", "'size'", ":", "(", "16", ",", "16", ")", "}", ")", "\n", "config", ".", "hidden_size", "=", "1024", "\n", "config", ".", "transformer", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "transformer", ".", "mlp_dim", "=", "4096", "\n", "config", ".", "transformer", ".", "num_heads", "=", "16", "\n", "config", ".", "transformer", ".", "num_layers", "=", "24", "\n", "config", ".", "transformer", ".", "attention_dropout_rate", "=", "0.0", "\n", "config", ".", "transformer", ".", "dropout_rate", "=", "0.1", "\n", "config", ".", "classifier", "=", "'token'", "\n", "config", ".", "representation_size", "=", "None", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.configs.get_l32_config": [[56, 61], ["configs.get_l16_config"], "function", ["home.repos.pwc.inspect_result.TACJu_TransFG.models.configs.get_l16_config"], ["", "def", "get_l32_config", "(", ")", ":", "\n", "    ", "\"\"\"Returns the ViT-L/32 configuration.\"\"\"", "\n", "config", "=", "get_l16_config", "(", ")", "\n", "config", ".", "patches", ".", "size", "=", "(", "32", ",", "32", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.TACJu_TransFG.models.configs.get_h14_config": [[62, 76], ["ml_collections.ConfigDict", "ml_collections.ConfigDict", "ml_collections.ConfigDict"], "function", ["None"], ["", "def", "get_h14_config", "(", ")", ":", "\n", "    ", "\"\"\"Returns the ViT-L/16 configuration.\"\"\"", "\n", "config", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "patches", "=", "ml_collections", ".", "ConfigDict", "(", "{", "'size'", ":", "(", "14", ",", "14", ")", "}", ")", "\n", "config", ".", "hidden_size", "=", "1280", "\n", "config", ".", "transformer", "=", "ml_collections", ".", "ConfigDict", "(", ")", "\n", "config", ".", "transformer", ".", "mlp_dim", "=", "5120", "\n", "config", ".", "transformer", ".", "num_heads", "=", "16", "\n", "config", ".", "transformer", ".", "num_layers", "=", "32", "\n", "config", ".", "transformer", ".", "attention_dropout_rate", "=", "0.0", "\n", "config", ".", "transformer", ".", "dropout_rate", "=", "0.1", "\n", "config", ".", "classifier", "=", "'token'", "\n", "config", ".", "representation_size", "=", "None", "\n", "return", "config", "\n", "", ""]]}