{"home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Pipeline.Pipeline.__init__": [[14, 25], ["len", "isinstance", "Exception", "isinstance", "Exception"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "processors", "=", "[", "]", ",", "classifier", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "processors", ")", ">", "0", ",", "'No processors are used!'", "\n", "for", "processor", "in", "processors", ":", "\n", "            ", "if", "not", "isinstance", "(", "processor", ",", "ProcessingBlock", ")", ":", "\n", "                ", "raise", "Exception", "(", "'The processor in \\\"processors\\\" must be a ProcessingBlock!'", ")", "\n", "", "", "if", "not", "isinstance", "(", "classifier", ",", "ClassifierBlock", ")", ":", "\n", "            ", "raise", "Exception", "(", "'The classifier must be a ClassifierBlock!'", ")", "\n", "\n", "", "self", ".", "processors", "=", "processors", "\n", "self", ".", "classifier", "=", "classifier", "\n", "self", ".", "fitted", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Pipeline.Pipeline.__fit_processors": [[26, 34], ["numpy.copy", "numpy.copy", "len", "len", "precessor.fit", "precessor.transform"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.fit", "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.TangentSpaceFeature.transform"], ["", "def", "__fit_processors", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "_x", "=", "np", ".", "copy", "(", "x", ")", "\n", "_y", "=", "np", ".", "copy", "(", "y", ")", "\n", "assert", "len", "(", "_x", ")", "==", "len", "(", "_y", ")", ",", "\"\\'x\\' and \\'y\\' should have the same length!\"", "\n", "for", "precessor", "in", "self", ".", "processors", ":", "\n", "            ", "precessor", ".", "fit", "(", "_x", ",", "_y", ")", "\n", "_x", "=", "precessor", ".", "transform", "(", "_x", ")", "\n", "", "return", "_x", ",", "_y", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Pipeline.Pipeline.__fit_classifier": [[35, 38], ["Pipeline.Pipeline.classifier.fit", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.fit"], ["", "def", "__fit_classifier", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "len", "(", "y", ")", ",", "\"\\'x\\' and \\'y\\' should have the same length!\"", "\n", "self", ".", "classifier", ".", "fit", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Pipeline.Pipeline.fit": [[39, 44], ["Pipeline.Pipeline.__fit_processors", "Pipeline.Pipeline.__fit_classifier", "len", "len"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Pipeline.Pipeline.__fit_processors", "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Pipeline.Pipeline.__fit_classifier"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "len", "(", "y", ")", ",", "\"\\'x\\' and \\'y\\' should have the same length!\"", "\n", "_x", ",", "_y", "=", "self", ".", "__fit_processors", "(", "x", ",", "y", ")", "\n", "self", ".", "__fit_classifier", "(", "_x", ",", "_y", ")", "\n", "self", ".", "fitted", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Pipeline.Pipeline.predict": [[45, 50], ["numpy.copy", "Pipeline.Pipeline.classifier.predict", "processer.transform"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.predict", "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.TangentSpaceFeature.transform"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "_x", "=", "np", ".", "copy", "(", "x", ")", "\n", "for", "processer", "in", "self", ".", "processors", ":", "\n", "            ", "_x", "=", "processer", ".", "transform", "(", "_x", ")", "\n", "", "return", "self", ".", "classifier", ".", "predict", "(", "_x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Pipeline.Pipeline.save": [[51, 60], ["weights.append", "weights.append", "Pipeline.Pipeline.classifier.get_weights", "open", "pickle.dump", "f.flush", "f.close", "processer.get_weights"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ClassifierBlock.get_weights", "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ClassifierBlock.get_weights"], ["", "def", "save", "(", "self", ",", "save_path", ")", ":", "\n", "        ", "weights", "=", "[", "]", "\n", "for", "processer", "in", "self", ".", "processors", ":", "\n", "            ", "weights", ".", "append", "(", "processer", ".", "get_weights", "(", ")", ")", "\n", "", "weights", ".", "append", "(", "self", ".", "classifier", ".", "get_weights", "(", ")", ")", "\n", "with", "open", "(", "save_path", ",", "'wb'", ")", "as", "f", ":", "# open file with write-mode", "\n", "            ", "picklestring", "=", "pickle", ".", "dump", "(", "weights", ",", "f", ")", "# serialize and save object", "\n", "f", ".", "flush", "(", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Pipeline.Pipeline.load": [[61, 69], ["open", "pickle.load", "f.close", "range", "Pipeline.Pipeline.classifier.load_weights", "len", "Pipeline.Pipeline.processors[].load_weights"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Pipeline.Pipeline.load", "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ClassifierBlock.load_weights", "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ClassifierBlock.load_weights"], ["", "", "def", "load", "(", "self", ",", "load_path", ")", ":", "\n", "        ", "with", "open", "(", "load_path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "weights", "=", "pickle", ".", "load", "(", "f", ")", "# read file and build object", "\n", "f", ".", "close", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "processors", ")", ")", ":", "\n", "                ", "self", ".", "processors", "[", "i", "]", ".", "load_weights", "(", "weights", "[", "i", "]", ")", "\n", "", "self", ".", "classifier", ".", "load_weights", "(", "weights", "[", "-", "1", "]", ")", "\n", "self", ".", "fitted", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Pipeline.Pipeline.get_keras_model": [[70, 90], ["range", "Pipeline.Pipeline.classifier.get_keras_layer", "processer.get_keras_layer.", "tensorflow.keras.layers.Input", "len", "processer.get_keras_layer", "tensorflow.keras.models.Model", "processer.get_keras_layer.", "processer.get_keras_layer."], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.get_keras_layer", "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.get_keras_layer"], ["", "", "def", "get_keras_model", "(", "self", ",", "input_shape", "=", "None", ",", "input_tensor", "=", "None", ",", "only_output", "=", "False", ")", ":", "\n", "        ", "assert", "self", ".", "fitted", ",", "\"The pipeline has not been trained yet!\"", "\n", "if", "input_tensor", "is", "None", ":", "\n", "            ", "input_x", "=", "Input", "(", "shape", "=", "input_shape", ",", "dtype", "=", "tf", ".", "float64", ")", "\n", "", "else", ":", "\n", "            ", "input_x", "=", "input_tensor", "\n", "", "for", "i", "in", "range", "(", "len", "(", "self", ".", "processors", ")", ")", ":", "\n", "            ", "processer", "=", "self", ".", "processors", "[", "i", "]", "\n", "layer", "=", "processer", ".", "get_keras_layer", "(", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "x", "=", "layer", "(", "input_x", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "", "", "layer", "=", "self", ".", "classifier", ".", "get_keras_layer", "(", ")", "\n", "output", "=", "layer", "(", "x", ")", "\n", "if", "only_output", ":", "\n", "            ", "return", "output", "\n", "", "else", ":", "\n", "            ", "return", "Model", "(", "inputs", "=", "input_x", ",", "outputs", "=", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Pipeline.Pipeline.pipeline_information": [[91, 94], ["print", "print"], "methods", ["None"], ["", "", "def", "pipeline_information", "(", "self", ")", ":", "\n", "        ", "print", "(", "'processors: {}'", ".", "format", "(", "', '", ".", "join", "(", "[", "processor", ".", "name", "for", "processor", "in", "self", ".", "processors", "]", ")", ")", ")", "\n", "print", "(", "'classifier: {}'", ".", "format", "(", "self", ".", "classifier", ".", "name", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks.__init__": [[28, 49], ["KerasAdversary.WhiteBoxAttacks.set_loss_function", "tensorflow.keras.backend.gradients"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks.set_loss_function"], ["def", "__init__", "(", "self", ",", "model", ",", "sess", ",", "loss_fn", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        To generate the White-box Attack Agent.\n        RNN is not supported now.\n        :param model: the target model which should have the input tensor, the target tensor and the loss tensor.\n        :param sess: the tensorflow session.\n        :param loss_fn: None if using original loss of the model.\n               You can also use your own loss function instead, e.g. keras.losses.sparse_categorical_crossentropy\n               NOTE: the original loss always involves regular loss!\n        \"\"\"", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "input_tensor", "=", "model", ".", "inputs", "[", "0", "]", "\n", "self", ".", "output_tensor", "=", "model", ".", "outputs", "[", "0", "]", "\n", "self", ".", "target_tensor", "=", "model", ".", "targets", "[", "0", "]", "\n", "self", ".", "_sample_weights", "=", "model", ".", "sample_weights", "[", "0", "]", "\n", "if", "loss_fn", "is", "None", ":", "\n", "            ", "self", ".", "loss_tensor", "=", "model", ".", "total_loss", "\n", "self", ".", "gradient_tensor", "=", "K", ".", "gradients", "(", "self", ".", "loss_tensor", ",", "self", ".", "input_tensor", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "set_loss_function", "(", "loss_fn", ")", "\n", "", "self", ".", "sess", "=", "sess", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks.set_loss_function": [[50, 59], ["loss_fn", "tensorflow.keras.backend.ndim", "tensorflow.keras.backend.ndim", "tensorflow.keras.backend.mean", "tensorflow.keras.backend.mean", "tensorflow.keras.backend.mean", "tensorflow.keras.backend.cast", "tensorflow.keras.backend.gradients", "list", "tensorflow.keras.backend.not_equal", "tensorflow.keras.backend.floatx", "range"], "methods", ["None"], ["", "def", "set_loss_function", "(", "self", ",", "loss_fn", ")", ":", "\n", "        ", "score", "=", "loss_fn", "(", "self", ".", "target_tensor", ",", "self", ".", "output_tensor", ")", "\n", "ndim", "=", "K", ".", "ndim", "(", "score", ")", "\n", "weight_ndim", "=", "K", ".", "ndim", "(", "self", ".", "_sample_weights", ")", "\n", "score", "=", "K", ".", "mean", "(", "score", ",", "axis", "=", "list", "(", "range", "(", "weight_ndim", ",", "ndim", ")", ")", ")", "\n", "score", "*=", "self", ".", "_sample_weights", "\n", "score", "/=", "K", ".", "mean", "(", "K", ".", "cast", "(", "K", ".", "not_equal", "(", "self", ".", "_sample_weights", ",", "0", ")", ",", "K", ".", "floatx", "(", ")", ")", ")", "\n", "self", ".", "loss_tensor", "=", "K", ".", "mean", "(", "score", ")", "\n", "self", ".", "gradient_tensor", "=", "K", ".", "gradients", "(", "self", ".", "loss_tensor", ",", "self", ".", "input_tensor", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks.get_model": [[60, 62], ["None"], "methods", ["None"], ["", "def", "get_model", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks.get_sess": [[63, 65], ["None"], "methods", ["None"], ["", "def", "get_sess", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sess", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks._get_batch_loss": [[66, 81], ["len", "numpy.reshape", "KerasAdversary.WhiteBoxAttacks.sess.run", "numpy.ones", "tensorflow.keras.backend.learning_phase"], "methods", ["None"], ["", "def", "_get_batch_loss", "(", "self", ",", "x_batch", ",", "y_batch", ",", "sample_weights", "=", "None", ",", "mean", "=", "True", ")", ":", "\n", "        ", "num", "=", "len", "(", "y_batch", ")", "\n", "y_batch", "=", "np", ".", "reshape", "(", "y_batch", ",", "newshape", "=", "[", "num", ",", "1", "]", ")", "\n", "if", "sample_weights", "is", "None", ":", "\n", "            ", "sample_weights", "=", "np", ".", "ones", "(", "(", "num", ",", ")", ")", "\n", "", "feed_dict", "=", "{", "\n", "self", ".", "input_tensor", ":", "x_batch", ",", "\n", "self", ".", "target_tensor", ":", "y_batch", ",", "\n", "self", ".", "_sample_weights", ":", "sample_weights", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "0", "\n", "}", "\n", "batch_loss", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "loss_tensor", ",", "feed_dict", "=", "feed_dict", ")", "\n", "if", "not", "mean", ":", "\n", "            ", "batch_loss", "=", "num", "*", "batch_loss", "\n", "", "return", "batch_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks._get_batch_gradients": [[82, 96], ["len", "numpy.reshape", "KerasAdversary.WhiteBoxAttacks.sess.run", "numpy.ones", "tensorflow.keras.backend.learning_phase"], "methods", ["None"], ["", "def", "_get_batch_gradients", "(", "self", ",", "x_batch", ",", "y_batch", ",", "sample_weights", "=", "None", ")", ":", "\n", "        ", "num", "=", "len", "(", "y_batch", ")", "\n", "y_batch", "=", "np", ".", "reshape", "(", "y_batch", ",", "newshape", "=", "[", "num", ",", "1", "]", ")", "\n", "if", "sample_weights", "is", "None", ":", "\n", "            ", "sample_weights", "=", "np", ".", "ones", "(", "(", "num", ",", ")", ")", "\n", "", "feed_dict", "=", "{", "\n", "self", ".", "input_tensor", ":", "x_batch", ",", "\n", "self", ".", "target_tensor", ":", "y_batch", ",", "\n", "self", ".", "_sample_weights", ":", "sample_weights", ",", "\n", "K", ".", "learning_phase", "(", ")", ":", "0", "\n", "}", "\n", "gradient_batch", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "gradient_tensor", ",", "feed_dict", "=", "feed_dict", ")", "\n", "gradient_batch", "=", "num", "*", "gradient_batch", "# To remove 1/Batchsize before the loss", "\n", "return", "gradient_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks.get_gradients": [[97, 114], ["zip", "list", "tqdm.tqdm.tqdm", "numpy.concatenate", "lib.utils.batch_iter", "zip", "KerasAdversary.WhiteBoxAttacks._get_batch_gradients", "numpy.concatenate.append"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils.batch_iter", "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks._get_batch_gradients"], ["", "def", "get_gradients", "(", "self", ",", "x", ",", "y", ",", "batch_size", "=", "256", ")", ":", "\n", "        ", "\"\"\"\n        This function is used to get the gradients \\Delta_{x}Loss(x,y;\\theta)\n        :param x: the normal examples\n        :param y: the labels of x\n        :param batch_size: batch size\n        :return: gradients\n        \"\"\"", "\n", "gradients", "=", "[", "]", "\n", "data", "=", "zip", "(", "x", ",", "y", ")", "\n", "batches", "=", "list", "(", "utils", ".", "batch_iter", "(", "data", ",", "batchsize", "=", "batch_size", ",", "shuffle", "=", "False", ")", ")", "\n", "for", "batch", "in", "tqdm", "(", "batches", ")", ":", "\n", "            ", "x_batch", ",", "y_batch", "=", "zip", "(", "*", "batch", ")", "\n", "gradient_batch", "=", "self", ".", "_get_batch_gradients", "(", "x_batch", "=", "x_batch", ",", "y_batch", "=", "y_batch", ")", "\n", "gradients", ".", "append", "(", "gradient_batch", ")", "\n", "", "gradients", "=", "np", ".", "concatenate", "(", "gradients", ",", "axis", "=", "0", ")", "\n", "return", "gradients", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks.l_bfgs_b": [[115, 225], ["zip", "list", "tqdm.tqdm.tqdm", "numpy.concatenate", "numpy.reshape", "KerasAdversary.WhiteBoxAttacks._get_batch_loss", "numpy.sum", "KerasAdversary.WhiteBoxAttacks._get_batch_gradients", "lib.utils.batch_iter", "zip", "numpy.array", "numpy.array", "len", "list", "numpy.zeros", "numpy.copy", "range", "numpy.concatenate.append", "numpy.square", "numpy.reshape", "KerasAdversary.WhiteBoxAttacks.flatten().astype", "constrain_gradients.flatten().astype", "numpy.ones", "numpy.ones", "numpy.ones", "zip", "numpy.ones", "scipy.optimize.fmin_l_bfgs_b", "numpy.reshape", "numpy.argmax", "numpy.zeros", "range", "enumerate", "range", "numpy.array", "numpy.array", "min_x_bound.flatten", "max_x_bound.flatten", "numpy.array.flatten().astype", "KerasAdversary.WhiteBoxAttacks.model.predict", "numpy.sum", "zip", "KerasAdversary.WhiteBoxAttacks.flatten", "constrain_gradients.flatten", "numpy.amax", "numpy.amin", "numpy.square", "min", "max", "len", "numpy.array.flatten"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks._get_batch_loss", "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks._get_batch_gradients", "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils.batch_iter", "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.predict"], ["", "def", "l_bfgs_b", "(", "self", ",", "x", ",", "y", ",", "batch_size", "=", "256", ",", "initial_const", "=", "1e10", ",", "max_iteration", "=", "10", ",", "binary_search_steps", "=", "20", ",", "clip_min", "=", "None", ",", "clip_max", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        L-BFGS-B (our implementation referenced CleverHans https://github.com/tensorflow/cleverhans)\n        The original paper can be found at: https://arxiv.org/abs/1412.6572\n        @Article{LBFGSB,\n            author        = {Christian Szegedy and Wojciech Zaremba and Ilya Sutskever and Joan Bruna and Dumitru Erhan and Ian J. Goodfellow and Rob Fergus},\n            title         = {Intriguing properties of neural networks},\n            journal       = {CoRR},\n            year          = {2013},\n            volume        = {abs/1312.6199},\n            archiveprefix = {arXiv},\n            url           = {http://arxiv.org/abs/1312.6199},\n        }\n        :param x: the normal examples\n        :param y: target labels of x\n        :param batch_size: batch size\n        :param initial_const: initial constant for\n        :param max_iteration: max iterations for L-BFGS-B\n        :param clip_min: minimum input component value. If `None`, clipping is not performed on lower\n        interval edge.\n        :param clip_max: maximum input component value. If `None`, clipping is not performed on upper\n        interval edge.\n        :return: adversarial examples of x.\n        \"\"\"", "\n", "if", "clip_min", "is", "None", ":", "\n", "            ", "clip_min", "=", "-", "np", ".", "Inf", "\n", "", "if", "clip_max", "is", "None", ":", "\n", "            ", "clip_max", "=", "np", ".", "Inf", "\n", "\n", "", "def", "objective", "(", "batch_adv_x", ",", "batch_y", ",", "batch_x", ",", "const", ")", ":", "\n", "            ", "batch_adv_x", "=", "np", ".", "reshape", "(", "batch_adv_x", ",", "newshape", "=", "batch_x", ".", "shape", ")", "\n", "\n", "class_loss", "=", "self", ".", "_get_batch_loss", "(", "x_batch", "=", "batch_adv_x", ",", "y_batch", "=", "batch_y", ",", "sample_weights", "=", "const", ",", "mean", "=", "False", ")", "\n", "constrain_loss", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "batch_adv_x", "-", "batch_x", ")", ")", "\n", "class_gradients", "=", "self", ".", "_get_batch_gradients", "(", "batch_adv_x", ",", "batch_y", ",", "sample_weights", "=", "const", ")", "\n", "constrain_gradients", "=", "2", "*", "np", ".", "reshape", "(", "batch_adv_x", "-", "batch_x", ",", "newshape", "=", "[", "len", "(", "batch_x", ")", ",", "-", "1", "]", ")", "\n", "\n", "loss", "=", "class_loss", "+", "constrain_loss", "\n", "gradients", "=", "class_gradients", ".", "flatten", "(", ")", ".", "astype", "(", "float", ")", "+", "constrain_gradients", ".", "flatten", "(", ")", ".", "astype", "(", "float", ")", "\n", "return", "loss", ",", "gradients", "\n", "\n", "", "data", "=", "zip", "(", "x", ",", "y", ")", "\n", "batches", "=", "list", "(", "utils", ".", "batch_iter", "(", "data", ",", "batchsize", "=", "batch_size", ",", "shuffle", "=", "False", ")", ")", "\n", "adv_x", "=", "[", "]", "\n", "\n", "for", "batch", "in", "tqdm", "(", "batches", ")", ":", "\n", "            ", "x_batch", ",", "y_batch", "=", "zip", "(", "*", "batch", ")", "\n", "x_batch", "=", "np", ".", "array", "(", "x_batch", ")", "\n", "y_batch", "=", "np", ".", "array", "(", "y_batch", ")", "\n", "num", "=", "len", "(", "y_batch", ")", "\n", "CONST", "=", "np", ".", "ones", "(", "[", "num", ",", "]", ")", "*", "initial_const", "\n", "\n", "min_x_bound", "=", "np", ".", "ones", "(", "x_batch", ".", "shape", "[", ":", "]", ")", "*", "clip_min", "\n", "max_x_bound", "=", "np", ".", "ones", "(", "x_batch", ".", "shape", "[", ":", "]", ")", "*", "clip_max", "\n", "clip_bound", "=", "list", "(", "zip", "(", "min_x_bound", ".", "flatten", "(", ")", ",", "max_x_bound", ".", "flatten", "(", ")", ")", ")", "\n", "\n", "# set the lower and upper bounds accordingly", "\n", "lower_bound", "=", "np", ".", "zeros", "(", "[", "num", ",", "]", ")", "\n", "upper_bound", "=", "np", ".", "ones", "(", "[", "num", ",", "]", ")", "*", "1e10", "\n", "\n", "o_bestl2", "=", "[", "1e10", "]", "*", "num", "\n", "o_bestattack", "=", "np", ".", "copy", "(", "x_batch", ")", "\n", "\n", "for", "step", "in", "range", "(", "binary_search_steps", ")", ":", "\n", "# The last iteration (if we run many steps) repeat the search once.", "\n", "                ", "if", "step", "==", "binary_search_steps", "-", "1", ":", "\n", "                    ", "CONST", "=", "upper_bound", "\n", "", "adv_x_batch", ",", "min_loss", ",", "_", "=", "optimize", ".", "fmin_l_bfgs_b", "(", "\n", "objective", ",", "x_batch", ".", "flatten", "(", ")", ".", "astype", "(", "float", ")", ",", "\n", "args", "=", "(", "y_batch", ",", "x_batch", ",", "CONST", ")", ",", "\n", "bounds", "=", "clip_bound", ",", "\n", "maxiter", "=", "max_iteration", ",", "\n", "iprint", "=", "0", "\n", ")", "\n", "adv_x_batch", "=", "np", ".", "reshape", "(", "adv_x_batch", ",", "newshape", "=", "x_batch", ".", "shape", ")", "\n", "assert", "np", ".", "amax", "(", "adv_x_batch", ")", "<=", "clip_max", "and", "np", ".", "amin", "(", "adv_x_batch", ")", ">=", "clip_min", ",", "'fmin_l_bfgs_b returns are invalid'", "\n", "\n", "preds", "=", "np", ".", "argmax", "(", "self", ".", "model", ".", "predict", "(", "adv_x_batch", ",", "verbose", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "\n", "l2s", "=", "np", ".", "zeros", "(", "num", ")", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "                    ", "l2s", "[", "i", "]", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "adv_x_batch", "[", "i", "]", "-", "x_batch", "[", "i", "]", ")", ")", "\n", "\n", "", "for", "e", ",", "(", "l2", ",", "pred", ",", "ii", ")", "in", "enumerate", "(", "zip", "(", "l2s", ",", "preds", ",", "adv_x_batch", ")", ")", ":", "\n", "                    ", "if", "l2", "<", "o_bestl2", "[", "e", "]", "and", "preds", "[", "e", "]", "==", "y_batch", "[", "e", "]", ":", "\n", "                        ", "o_bestl2", "[", "e", "]", "=", "l2", "\n", "o_bestattack", "[", "e", "]", "=", "ii", "\n", "\n", "# adjust the constant as needed", "\n", "", "", "for", "e", "in", "range", "(", "num", ")", ":", "\n", "                    ", "if", "preds", "[", "e", "]", "==", "y_batch", "[", "e", "]", ":", "\n", "# success, divide const by two", "\n", "                        ", "upper_bound", "[", "e", "]", "=", "min", "(", "upper_bound", "[", "e", "]", ",", "CONST", "[", "e", "]", ")", "\n", "if", "upper_bound", "[", "e", "]", "<", "1e9", ":", "\n", "                            ", "CONST", "[", "e", "]", "=", "(", "lower_bound", "[", "e", "]", "+", "upper_bound", "[", "e", "]", ")", "/", "2", "\n", "", "", "else", ":", "\n", "# failure, either multiply by 10 if no solution found yet", "\n", "#          or do binary search with the known upper bound", "\n", "                        ", "lower_bound", "[", "e", "]", "=", "max", "(", "lower_bound", "[", "e", "]", ",", "CONST", "[", "e", "]", ")", "\n", "if", "upper_bound", "[", "e", "]", "<", "1e9", ":", "\n", "                            ", "CONST", "[", "e", "]", "=", "(", "lower_bound", "[", "e", "]", "+", "upper_bound", "[", "e", "]", ")", "/", "2", "\n", "", "else", ":", "\n", "                            ", "CONST", "[", "e", "]", "*=", "10", "\n", "", "", "", "o_bestl2", "=", "np", ".", "array", "(", "o_bestl2", ")", "\n", "\n", "", "adv_x", ".", "append", "(", "np", ".", "array", "(", "o_bestattack", ")", ")", "\n", "", "adv_x", "=", "np", ".", "concatenate", "(", "adv_x", ",", "axis", "=", "0", ")", "\n", "return", "adv_x", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks.fgm": [[226, 258], ["KerasAdversary.WhiteBoxAttacks.get_gradients", "numpy.reshape", "numpy.linalg.norm", "numpy.reshape", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks.get_gradients"], ["", "def", "fgm", "(", "self", ",", "x", ",", "y", ",", "target", "=", "False", ",", "epsilon", "=", "0.1", ",", "norm_ord", "=", "None", ",", "batch_size", "=", "256", ",", "clip_min", "=", "None", ",", "clip_max", "=", "None", ",", "tol", "=", "1e-8", ")", ":", "\n", "        ", "\"\"\"\n        Fast Gradient Method (fgm).\n        Just add the gradients whose ord norm is epsilon (fixed).\n        :param x: the normal examples\n        :param y: the labels of x for target attack or none-target attack (according to target=True or False)\n        :param target: True -> target attack and y is the target. False -> none-target attack and y is the true label.\n        :param epsilon: the limit of the norm of the gradient.\n        :param norm_ord: the ord of the norm. If is None, the gradients will not be normalized.\n        :param batch_size: batch size\n        :param clip_min: minimum input component value. If `None`, clipping is not performed on lower\n        interval edge.\n        :param clip_max: maximum input component value. If `None`, clipping is not performed on upper\n        interval edge.\n        :return: adversarial examples of x.\n        \"\"\"", "\n", "gradients", "=", "self", ".", "get_gradients", "(", "x", ",", "y", ",", "batch_size", "=", "batch_size", ")", "\n", "\n", "if", "norm_ord", "is", "not", "None", ":", "\n", "            ", "adv_flat", "=", "np", ".", "reshape", "(", "gradients", ",", "newshape", "=", "[", "gradients", ".", "shape", "[", "0", "]", ",", "-", "1", "]", ")", "\n", "norms", "=", "np", ".", "linalg", ".", "norm", "(", "adv_flat", ",", "ord", "=", "norm_ord", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "tol", "\n", "gradients", "=", "np", ".", "reshape", "(", "adv_flat", "/", "norms", ",", "newshape", "=", "gradients", ".", "shape", ")", "\n", "\n", "", "adv_noise", "=", "epsilon", "*", "gradients", "\n", "if", "target", ":", "\n", "            ", "adv_x", "=", "x", "-", "adv_noise", "\n", "", "else", ":", "\n", "            ", "adv_x", "=", "x", "+", "adv_noise", "\n", "\n", "", "if", "(", "clip_min", "is", "not", "None", ")", "or", "(", "clip_max", "is", "not", "None", ")", ":", "\n", "            ", "adv_x", "=", "np", ".", "clip", "(", "adv_x", ",", "a_min", "=", "clip_min", ",", "a_max", "=", "clip_max", ")", "\n", "", "return", "adv_x", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks.fgsm": [[259, 294], ["KerasAdversary.WhiteBoxAttacks.get_gradients", "numpy.sign", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks.get_gradients"], ["", "def", "fgsm", "(", "self", ",", "x", ",", "y", ",", "target", "=", "False", ",", "epsilon", "=", "0.1", ",", "batch_size", "=", "256", ",", "clip_min", "=", "None", ",", "clip_max", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Fast Gradient Sign Method (FGSM).\n        The original paper can be found at: https://arxiv.org/abs/1412.6572\n        @Article{FGSM,\n          author        = {Ian J. Goodfellow and Jonathon Shlens and Christian Szegedy},\n          title         = {Explaining and Harnessing Adversarial Examples},\n          journal       = {CoRR},\n          year          = {2014},\n          volume        = {abs/1412.6572},\n          archiveprefix = {arXiv},\n          eprint        = {1412.6572},\n          url           = {http://arxiv.org/abs/1412.6572},\n        }\n        :param x: the normal examples\n        :param y: the labels of x for target attack or none-target attack (according to target=True or False)\n        :param target: True -> target attack and y is the target. False -> none-target attack and y is the true label.\n        :param epsilon: the limit of the permutation\n        :param batch_size: batch size\n        :param clip_min: minimum input component value. If `None`, clipping is not performed on lower\n        interval edge.\n        :param clip_max: maximum input component value. If `None`, clipping is not performed on upper\n        interval edge.\n        :return: adversarial examples of x.\n        \"\"\"", "\n", "gradients", "=", "self", ".", "get_gradients", "(", "x", ",", "y", ",", "batch_size", "=", "batch_size", ")", "\n", "adv_noise", "=", "epsilon", "*", "np", ".", "sign", "(", "gradients", ")", "\n", "if", "target", ":", "\n", "            ", "adv_x", "=", "x", "-", "adv_noise", "\n", "", "else", ":", "\n", "            ", "adv_x", "=", "x", "+", "adv_noise", "\n", "\n", "", "if", "(", "clip_min", "is", "not", "None", ")", "or", "(", "clip_max", "is", "not", "None", ")", ":", "\n", "            ", "adv_x", "=", "np", ".", "clip", "(", "adv_x", ",", "a_min", "=", "clip_min", ",", "a_max", "=", "clip_max", ")", "\n", "", "return", "adv_x", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks.bim": [[295, 326], ["range", "print", "KerasAdversary.WhiteBoxAttacks.fgsm"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks.fgsm"], ["", "def", "bim", "(", "self", ",", "x", ",", "y", ",", "target", "=", "False", ",", "epsilon", "=", "0.1", ",", "iterations", "=", "3", ",", "batch_size", "=", "256", ",", "clip_min", "=", "None", ",", "clip_max", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Basic Iterative Method (BIM).\n        The original paper can be found at: https://arxiv.org/abs/1607.02533\n        @Article{BIM,\n          author        = {Alexey Kurakin and Ian J. Goodfellow and Samy Bengio},\n          title         = {Adversarial examples in the physical world},\n          journal       = {CoRR},\n          year          = {2016},\n          volume        = {abs/1607.02533},\n          archiveprefix = {arXiv},\n          eprint        = {1607.02533},\n          url           = {http://arxiv.org/abs/1607.02533},\n        }\n        :param x: the normal examples\n        :param y: the labels of x for target attack or none-target attack (according to target=True or False)\n        :param target: True -> target attack and y is the target. False -> none-target attack and y is the true label.\n        :param epsilon: the limit of the permutation\n        :param iterations: number of attack iterations.\n        :param batch_size: batch size\n        :param clip_min: minimum input component value. If `None`, clipping is not performed on lower\n        interval edge.\n        :param clip_max: maximum input component value. If `None`, clipping is not performed on upper\n        interval edge.\n        :return: adversarial examples of x.\n        \"\"\"", "\n", "adv_x", "=", "x", "\n", "for", "iteration", "in", "range", "(", "iterations", ")", ":", "\n", "            ", "print", "(", "'Performing BIM: {}/{} iterations'", ".", "format", "(", "iteration", "+", "1", ",", "iterations", ")", ")", "\n", "adv_x", "=", "self", ".", "fgsm", "(", "adv_x", ",", "y", ",", "target", "=", "target", ",", "epsilon", "=", "epsilon", ",", "batch_size", "=", "batch_size", ",", "clip_min", "=", "clip_min", ",", "clip_max", "=", "clip_max", ")", "\n", "", "return", "adv_x", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.KerasAdversary.WhiteBoxAttacks.carlini_and_wagner": [[327, 342], ["None"], "methods", ["None"], ["", "def", "carlini_and_wagner", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Carlini & Wagner (C&W).\n        The original paper can be found at: https://arxiv.org/abs/1608.04644\n        @Article{CandW,\n          author  = {Nicholas Carlini and David A. Wagner},\n          title   = {Towards Evaluating the Robustness of Neural Networks},\n          journal = {CoRR},\n          year    = {2016},\n          volume  = {abs/1608.04644},\n          url     = {https://arxiv.org/abs/1608.04644},\n        }\n        TODO:\n        \"\"\"", "\n", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ProcessingBlock.__init__": [[35, 38], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "weights", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ProcessingBlock.fit": [[39, 42], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "fit", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ProcessingBlock.transform": [[47, 50], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "transform", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ProcessingBlock.get_keras_layer": [[51, 54], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_keras_layer", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ProcessingBlock.get_weights": [[55, 57], ["None"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ProcessingBlock.load_weights": [[58, 60], ["None"], "methods", ["None"], ["", "def", "load_weights", "(", "self", ",", "weights", ")", ":", "\n", "        ", "self", ".", "weights", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ClassifierBlock.__init__": [[63, 66], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "weights", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ClassifierBlock.fit": [[67, 70], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "fit", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ClassifierBlock.predict": [[71, 74], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "predict", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ClassifierBlock.get_keras_layer": [[75, 78], ["None"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "get_keras_layer", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ClassifierBlock.get_weights": [[79, 81], ["None"], "methods", ["None"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ClassifierBlock.load_weights": [[82, 84], ["None"], "methods", ["None"], ["", "def", "load_weights", "(", "self", ",", "weights", ")", ":", "\n", "        ", "self", ".", "weights", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.Normalizer.__init__": [[88, 92], ["Blocks.ProcessingBlock.__init__", "sklearn.preprocessing.Normalizer"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.TraceCCA.TraceCCA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "norm", "=", "'l1'", ",", "name", "=", "\"Normalizer\"", ")", ":", "\n", "        ", "super", "(", "Normalizer", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "self", ".", "norm", "=", "norm", "\n", "self", ".", "model", "=", "sklearn_Normalizer", "(", "norm", "=", "self", ".", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.Normalizer.fit": [[93, 95], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.Normalizer.transform": [[96, 98], ["Blocks.Normalizer.model.transform"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.TangentSpaceFeature.transform"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "model", ".", "transform", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.Normalizer.get_keras_layer": [[99, 111], ["tensorflow.keras.layers.Lambda", "tensorflow.norm", "tensorflow.norm", "Exception"], "methods", ["None"], ["", "def", "get_keras_layer", "(", "self", ")", ":", "\n", "\n", "        ", "def", "norm_transform", "(", "_x", ")", ":", "\n", "            ", "if", "self", ".", "norm", "==", "'l1'", ":", "\n", "                ", "norms", "=", "tf", ".", "norm", "(", "_x", ",", "ord", "=", "1", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "", "elif", "self", ".", "norm", "==", "'l2'", ":", "\n", "                ", "norms", "=", "tf", ".", "norm", "(", "_x", ",", "ord", "=", "2", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'\\'{}\\' is not available, should be in (\\'l1\\', \\'l2\\').'", ".", "format", "(", "self", ".", "norm", ")", ")", "\n", "", "return", "_x", "/", "norms", "\n", "\n", "", "return", "Lambda", "(", "norm_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.Flatten.__init__": [[114, 116], ["Blocks.ProcessingBlock.__init__"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.TraceCCA.TraceCCA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "name", "=", "\"Flatten\"", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.Flatten.fit": [[117, 119], ["None"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.Flatten.transform": [[120, 123], ["numpy.reshape"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "n_epochs", "=", "x", ".", "shape", "[", "0", "]", "\n", "return", "np", ".", "reshape", "(", "x", ",", "newshape", "=", "(", "n_epochs", ",", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.Flatten.get_keras_layer": [[124, 126], ["tensorflow.keras.layers.Flatten"], "methods", ["None"], ["", "def", "get_keras_layer", "(", "self", ")", ":", "\n", "        ", "return", "keras_Flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.CSP.__init__": [[129, 138], ["Blocks.ProcessingBlock.__init__", "mne.decoding.CSP"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.TraceCCA.TraceCCA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_components", "=", "4", ",", "reg", "=", "None", ",", "log", "=", "None", ",", "\n", "transform_into", "=", "'csp_space'", ",", "norm_trace", "=", "False", ",", "name", "=", "\"CSP\"", ")", ":", "\n", "        ", "super", "(", "CSP", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "self", ".", "n_components", "=", "n_components", "\n", "self", ".", "reg", "=", "reg", "\n", "self", ".", "log", "=", "log", "\n", "self", ".", "transform_into", "=", "transform_into", "\n", "self", ".", "norm_trace", "=", "norm_trace", "\n", "self", ".", "model", "=", "mne_CSP", "(", "n_components", ",", "reg", ",", "log", ",", "'epoch'", ",", "transform_into", ",", "norm_trace", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.CSP.fit": [[139, 143], ["Blocks.CSP.model.fit", "len", "numpy.array().astype", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.fit"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "3", "\n", "self", ".", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "self", ".", "weights", "=", "[", "np", ".", "array", "(", "self", ".", "model", ".", "filters_", "[", ":", "self", ".", "model", ".", "n_components", "]", ")", ".", "astype", "(", "np", ".", "float64", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.CSP.transform": [[144, 147], ["Blocks.CSP.model.transform", "len"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.TangentSpaceFeature.transform"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "3", "\n", "return", "self", ".", "model", ".", "transform", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.CSP.get_keras_layer": [[148, 170], ["tensorflow.keras.layers.Lambda", "tensorflow.constant", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.conv2d", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.square", "tensorflow.log"], "methods", ["None"], ["", "def", "get_keras_layer", "(", "self", ")", ":", "\n", "        ", "csp_matrix", "=", "self", ".", "weights", "[", "0", "]", "\n", "\n", "def", "csp_transform", "(", "_x", ")", ":", "\n", "            ", "csp_tensor", "=", "tf", ".", "constant", "(", "csp_matrix", ".", "T", ")", "# (channels, n_components)", "\n", "channels", ",", "samples", "=", "_x", ".", "shape", "[", "1", "]", ",", "_x", ".", "shape", "[", "2", "]", "\n", "_x", "=", "tf", ".", "reshape", "(", "_x", ",", "shape", "=", "(", "-", "1", ",", "1", ",", "channels", ",", "samples", ")", ")", "\n", "conv_filters", "=", "tf", ".", "reshape", "(", "csp_tensor", ",", "(", "csp_tensor", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "n_components", ")", ")", "\n", "_x", "=", "tf", ".", "nn", ".", "conv2d", "(", "_x", ",", "conv_filters", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "data_format", "=", "'NCHW'", ")", "\n", "_x", "=", "tf", ".", "reshape", "(", "_x", ",", "(", "-", "1", ",", "self", ".", "n_components", ",", "samples", ")", ")", "\n", "# compute features (mean band power)", "\n", "if", "self", ".", "transform_into", "==", "'average_power'", ":", "\n", "                ", "_x", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "_x", ")", ",", "axis", "=", "2", ")", "\n", "log", "=", "True", "if", "self", ".", "log", "is", "None", "else", "self", ".", "log", "\n", "if", "log", ":", "\n", "                    ", "_x", "=", "tf", ".", "log", "(", "_x", ")", "\n", "", "else", ":", "\n", "                    ", "_x", "=", "_x", "-", "self", ".", "model", ".", "mean_", "\n", "_x", "=", "_x", "/", "self", ".", "model", ".", "std_", "\n", "", "", "return", "_x", "\n", "\n", "", "return", "Lambda", "(", "csp_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.PCA4Channel.__init__": [[173, 178], ["Blocks.ProcessingBlock.__init__", "sklearn.decomposition.PCA"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.TraceCCA.TraceCCA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_components", "=", "4", ",", "whiten", "=", "True", ",", "name", "=", "\"PCA4Channel\"", ")", ":", "\n", "        ", "super", "(", "PCA4Channel", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "self", ".", "n_components", "=", "n_components", "\n", "self", ".", "whiten", "=", "whiten", "\n", "self", ".", "model", "=", "sklearn_PCA", "(", "n_components", "=", "self", ".", "n_components", ",", "whiten", "=", "self", ".", "whiten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.PCA4Channel.fit": [[179, 187], ["numpy.hstack", "Blocks.PCA4Channel.model.fit", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "len", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.fit"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "3", "\n", "_x", "=", "np", ".", "hstack", "(", "x", ")", "# (n_channels, n_samples * n_epochs)", "\n", "self", ".", "model", ".", "fit", "(", "_x", ".", "T", ",", "y", ")", "\n", "pca_matrix", "=", "np", ".", "array", "(", "self", ".", "model", ".", "components_", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mean", "=", "np", ".", "array", "(", "self", ".", "model", ".", "mean_", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "variance", "=", "np", ".", "array", "(", "self", ".", "model", ".", "explained_variance_", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "self", ".", "weights", "=", "[", "mean", ",", "pca_matrix", ",", "variance", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.PCA4Channel.transform": [[188, 198], ["numpy.copy", "numpy.transpose().reshape", "Blocks.PCA4Channel.model.transform", "numpy.transpose.reshape", "numpy.transpose", "len", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.TangentSpaceFeature.transform"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "3", "\n", "n_epochs", ",", "n_channels", ",", "n_samples", "=", "x", ".", "shape", "\n", "_x", "=", "np", ".", "copy", "(", "x", ")", "\n", "_x", "=", "np", ".", "transpose", "(", "_x", ",", "axes", "=", "(", "1", ",", "0", ",", "2", ")", ")", ".", "reshape", "(", "(", "n_channels", ",", "n_epochs", "*", "n_samples", ")", ")", "\n", "_x", "=", "self", ".", "model", ".", "transform", "(", "_x", ".", "T", ")", "\n", "_x", "=", "_x", ".", "T", "\n", "_x", "=", "_x", ".", "reshape", "(", "(", "self", ".", "n_components", ",", "n_epochs", ",", "n_samples", ")", ")", "\n", "_x", "=", "np", ".", "transpose", "(", "_x", ",", "axes", "=", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "return", "_x", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.PCA4Channel.get_keras_layer": [[199, 218], ["tensorflow.keras.layers.Lambda", "numpy.sqrt", "tensorflow.constant", "tensorflow.constant", "tensorflow.reshape", "tensorflow.nn.bias_add", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.conv2d", "tensorflow.reshape", "numpy.reshape"], "methods", ["None"], ["", "def", "get_keras_layer", "(", "self", ")", ":", "\n", "        ", "mean", ",", "pca_matrix", ",", "variance", "=", "self", ".", "weights", "# shape(pca_matrix) = (n_components, n_samples)", "\n", "if", "self", ".", "whiten", ":", "\n", "            ", "sqrt_variance", "=", "np", ".", "sqrt", "(", "variance", ")", "\n", "pca_matrix", "=", "pca_matrix", "/", "np", ".", "reshape", "(", "sqrt_variance", ",", "newshape", "=", "(", "self", ".", "n_components", ",", "1", ")", ")", "\n", "\n", "", "def", "pca_transform", "(", "_x", ")", ":", "\n", "            ", "pca_tensor", "=", "tf", ".", "constant", "(", "pca_matrix", ".", "T", ")", "# (channels, n_components)", "\n", "mean_tensor", "=", "tf", ".", "constant", "(", "mean", ")", "# (n_components,)", "\n", "channels", ",", "samples", "=", "_x", ".", "shape", "[", "1", "]", ",", "_x", ".", "shape", "[", "2", "]", "\n", "_x", "=", "tf", ".", "reshape", "(", "_x", ",", "shape", "=", "(", "-", "1", ",", "channels", ",", "1", ",", "samples", ")", ")", "\n", "_x", "=", "tf", ".", "nn", ".", "bias_add", "(", "_x", ",", "-", "mean_tensor", ",", "data_format", "=", "'NCHW'", ")", "\n", "_x", "=", "tf", ".", "reshape", "(", "_x", ",", "shape", "=", "(", "-", "1", ",", "1", ",", "channels", ",", "samples", ")", ")", "\n", "conv_filters", "=", "tf", ".", "reshape", "(", "pca_tensor", ",", "(", "pca_tensor", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "n_components", ")", ")", "\n", "_x", "=", "tf", ".", "nn", ".", "conv2d", "(", "_x", ",", "conv_filters", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "data_format", "=", "'NCHW'", ")", "\n", "_x", "=", "tf", ".", "reshape", "(", "_x", ",", "(", "-", "1", ",", "self", ".", "n_components", ",", "samples", ")", ")", "\n", "return", "_x", "\n", "\n", "", "return", "Lambda", "(", "pca_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.PCA4Feature.__init__": [[221, 226], ["Blocks.ProcessingBlock.__init__", "sklearn.decomposition.PCA"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.TraceCCA.TraceCCA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_components", "=", "4", ",", "whiten", "=", "True", ",", "name", "=", "\"PCA4Feature\"", ")", ":", "\n", "        ", "super", "(", "PCA4Feature", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "self", ".", "n_components", "=", "n_components", "\n", "self", ".", "whiten", "=", "whiten", "\n", "self", ".", "model", "=", "sklearn_PCA", "(", "n_components", "=", "self", ".", "n_components", ",", "whiten", "=", "self", ".", "whiten", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.PCA4Feature.fit": [[227, 234], ["Blocks.PCA4Feature.model.fit", "numpy.array().astype", "numpy.array().astype", "numpy.array().astype", "len", "numpy.array", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.fit"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", ">=", "2", "# (n_epochs, n_features)", "\n", "self", ".", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "pca_matrix", "=", "np", ".", "array", "(", "self", ".", "model", ".", "components_", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mean", "=", "np", ".", "array", "(", "self", ".", "model", ".", "mean_", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "variance", "=", "np", ".", "array", "(", "self", ".", "model", ".", "explained_variance_", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "self", ".", "weights", "=", "[", "mean", ",", "pca_matrix", ",", "variance", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.PCA4Feature.transform": [[235, 240], ["numpy.copy", "Blocks.PCA4Feature.model.transform", "len"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.TangentSpaceFeature.transform"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "2", "\n", "_x", "=", "np", ".", "copy", "(", "x", ")", "\n", "_x", "=", "self", ".", "model", ".", "transform", "(", "_x", ")", "\n", "return", "_x", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.PCA4Feature.get_keras_layer": [[241, 255], ["tensorflow.keras.layers.Lambda", "numpy.sqrt", "tensorflow.constant", "tensorflow.constant", "tensorflow.nn.bias_add", "tensorflow.matmul", "numpy.reshape"], "methods", ["None"], ["", "def", "get_keras_layer", "(", "self", ")", ":", "\n", "        ", "mean", ",", "pca_matrix", ",", "variance", "=", "self", ".", "weights", "# shape(pca_matrix) = (n_components, n_samples)", "\n", "if", "self", ".", "whiten", ":", "\n", "            ", "sqrt_variance", "=", "np", ".", "sqrt", "(", "variance", ")", "\n", "pca_matrix", "=", "pca_matrix", "/", "np", ".", "reshape", "(", "sqrt_variance", ",", "newshape", "=", "(", "self", ".", "n_components", ",", "1", ")", ")", "\n", "\n", "", "def", "pca_transform", "(", "_x", ")", ":", "\n", "            ", "pca_tensor", "=", "tf", ".", "constant", "(", "pca_matrix", ".", "T", ")", "# (n_features, n_components)", "\n", "mean_tensor", "=", "tf", ".", "constant", "(", "mean", ")", "# (n_components,)", "\n", "_x", "=", "tf", ".", "nn", ".", "bias_add", "(", "_x", ",", "-", "mean_tensor", ")", "\n", "_x", "=", "tf", ".", "matmul", "(", "_x", ",", "pca_tensor", ")", "\n", "return", "_x", "\n", "\n", "", "return", "Lambda", "(", "pca_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ICA.__init__": [[258, 264], ["Blocks.ProcessingBlock.__init__", "sklearn.decomposition.FastICA"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.TraceCCA.TraceCCA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_components", "=", "4", ",", "max_iter", "=", "200", ",", "tol", "=", "1e-6", ",", "name", "=", "\"ICA\"", ")", ":", "\n", "        ", "super", "(", "ICA", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "self", ".", "n_components", "=", "n_components", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "tol", "=", "tol", "\n", "self", ".", "model", "=", "sklearn_ICA", "(", "n_components", "=", "self", ".", "n_components", ",", "whiten", "=", "True", ",", "tol", "=", "self", ".", "tol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ICA.fit": [[265, 272], ["numpy.hstack", "Blocks.ICA.model.fit", "numpy.array().astype", "numpy.array().astype", "len", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.fit"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "3", "\n", "_x", "=", "np", ".", "hstack", "(", "x", ")", "# (n_channels, n_samples * n_epochs)", "\n", "self", ".", "model", ".", "fit", "(", "_x", ".", "T", ")", "\n", "unmixing_matrix", "=", "np", ".", "array", "(", "self", ".", "model", ".", "components_", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "mean_matrix", "=", "np", ".", "array", "(", "self", ".", "model", ".", "mean_", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "self", ".", "weights", "=", "[", "unmixing_matrix", ",", "mean_matrix", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ICA.transform": [[273, 283], ["numpy.copy", "numpy.transpose().reshape", "Blocks.ICA.model.transform", "numpy.transpose.reshape", "numpy.transpose", "len", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.TangentSpaceFeature.transform"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "3", "\n", "n_epochs", ",", "n_channels", ",", "n_samples", "=", "x", ".", "shape", "\n", "_x", "=", "np", ".", "copy", "(", "x", ")", "\n", "_x", "=", "np", ".", "transpose", "(", "_x", ",", "axes", "=", "(", "1", ",", "0", ",", "2", ")", ")", ".", "reshape", "(", "(", "n_channels", ",", "n_epochs", "*", "n_samples", ")", ")", "\n", "_x", "=", "self", ".", "model", ".", "transform", "(", "_x", ".", "T", ")", "\n", "_x", "=", "_x", ".", "T", "\n", "_x", "=", "_x", ".", "reshape", "(", "(", "self", ".", "n_components", ",", "n_epochs", ",", "n_samples", ")", ")", "\n", "_x", "=", "np", ".", "transpose", "(", "_x", ",", "axes", "=", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "return", "_x", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.ICA.get_keras_layer": [[284, 300], ["tensorflow.keras.layers.Lambda", "tensorflow.constant", "tensorflow.reshape", "tensorflow.constant", "tensorflow.nn.bias_add", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.conv2d", "tensorflow.reshape"], "methods", ["None"], ["", "def", "get_keras_layer", "(", "self", ")", ":", "\n", "        ", "unmixing_matrix", ",", "mean_matrix", "=", "self", ".", "weights", "\n", "\n", "def", "ica_transform", "(", "_x", ")", ":", "\n", "            ", "ica_tensor", "=", "tf", ".", "constant", "(", "unmixing_matrix", ".", "T", ")", "# (channels, n_components)", "\n", "channels", ",", "samples", "=", "_x", ".", "shape", "[", "1", "]", ",", "_x", ".", "shape", "[", "2", "]", "\n", "_x", "=", "tf", ".", "reshape", "(", "_x", ",", "shape", "=", "(", "-", "1", ",", "channels", ",", "1", ",", "samples", ")", ")", "\n", "mean_tensor", "=", "tf", ".", "constant", "(", "mean_matrix", ")", "# (n_components,)", "\n", "_x", "=", "tf", ".", "nn", ".", "bias_add", "(", "_x", ",", "-", "mean_tensor", ",", "data_format", "=", "'NCHW'", ")", "\n", "_x", "=", "tf", ".", "reshape", "(", "_x", ",", "shape", "=", "(", "-", "1", ",", "1", ",", "channels", ",", "samples", ")", ")", "\n", "conv_filters", "=", "tf", ".", "reshape", "(", "ica_tensor", ",", "(", "ica_tensor", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "self", ".", "n_components", ")", ")", "\n", "_x", "=", "tf", ".", "nn", ".", "conv2d", "(", "_x", ",", "conv_filters", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "data_format", "=", "'NCHW'", ")", "\n", "_x", "=", "tf", ".", "reshape", "(", "_x", ",", "(", "-", "1", ",", "self", ".", "n_components", ",", "samples", ")", ")", "\n", "return", "_x", "\n", "\n", "", "return", "Lambda", "(", "ica_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.CovarianceFeature.__init__": [[303, 312], ["Blocks.ProcessingBlock.__init__"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.TraceCCA.TraceCCA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "with_mean_templates", "=", "False", ",", "name", "=", "\"CovarianceFeature\"", ")", ":", "\n", "        ", "\"\"\"\n        Covariance Matrix of the inputs.\n        :param with_mean_templates: boolean. Always set to True when decoding ERP data. However, you should be\n        ware that Xdawn block have already added mean templates.\n        :param name: The name of the block.\n        \"\"\"", "\n", "super", "(", "CovarianceFeature", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "self", ".", "with_templates", "=", "with_mean_templates", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.CovarianceFeature.fit": [[313, 323], ["len", "numpy.unique", "numpy.concatenate().astype", "template_list.append", "numpy.mean", "numpy.concatenate"], "methods", ["None"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "3", "\n", "if", "self", ".", "with_templates", ":", "\n", "            ", "assert", "y", "is", "not", "None", ",", "\"\\'y\\' is needed to calculate the mean templates!\"", "\n", "y_unique", "=", "np", ".", "unique", "(", "y", ")", "\n", "template_list", "=", "[", "]", "\n", "for", "label", "in", "y_unique", ":", "\n", "                ", "template_list", ".", "append", "(", "np", ".", "mean", "(", "x", "[", "y", "==", "label", ",", ":", ",", ":", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "False", ")", ")", "\n", "", "templates", "=", "np", ".", "concatenate", "(", "template_list", ",", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "self", ".", "weights", "=", "[", "templates", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.CovarianceFeature.transform": [[324, 339], ["numpy.mean", "numpy.transpose", "len", "Blocks.CovarianceFeature.__get_weights", "numpy.repeat", "numpy.concatenate", "numpy.matmul"], "methods", ["None"], ["", "", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "3", "# (n_epochs, n_channels, n_samples)", "\n", "n_epochs", ",", "n_samples", "=", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "2", "]", "\n", "if", "self", ".", "with_templates", ":", "\n", "            ", "templates", "=", "self", ".", "__get_weights", "(", ")", "\n", "templates", "=", "templates", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "templates", "=", "np", ".", "repeat", "(", "templates", ",", "repeats", "=", "n_epochs", ",", "axis", "=", "0", ")", "\n", "_x", "=", "np", ".", "concatenate", "(", "(", "x", ",", "templates", ")", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "_x", "=", "x", "\n", "", "x_mean", "=", "np", ".", "mean", "(", "_x", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "_x", "=", "_x", "-", "x_mean", "\n", "_x_T", "=", "np", ".", "transpose", "(", "_x", ",", "axes", "=", "(", "0", ",", "2", ",", "1", ")", ")", "# (n_epochs, n_samples, n_channels)", "\n", "c", "=", "np", ".", "matmul", "(", "_x", ",", "_x_T", ")", "/", "(", "n_samples", "-", "1.", ")", "\n", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.CovarianceFeature.get_keras_layer": [[340, 357], ["tensorflow.keras.layers.Lambda", "int", "tensorflow.reduce_mean", "tensorflow.transpose", "tensorflow.constant", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.concat", "tensorflow.matmul", "tensorflow.shape"], "methods", ["None"], ["", "def", "get_keras_layer", "(", "self", ")", ":", "\n", "\n", "        ", "def", "cov_transform", "(", "_x", ")", ":", "\n", "            ", "n_samples", "=", "int", "(", "_x", ".", "shape", "[", "2", "]", ")", "\n", "if", "self", ".", "with_templates", ":", "\n", "                ", "t", "=", "self", ".", "weights", "[", "0", "]", "\n", "templates_tensor", "=", "tf", ".", "constant", "(", "t", ")", "\n", "templates_tensor", "=", "tf", ".", "expand_dims", "(", "templates_tensor", ",", "0", ")", "\n", "templates_tensor", "=", "tf", ".", "tile", "(", "templates_tensor", ",", "(", "tf", ".", "shape", "(", "_x", ")", "[", "0", "]", ",", "1", ",", "1", ")", ")", "\n", "_x", "=", "tf", ".", "concat", "(", "(", "_x", ",", "templates_tensor", ")", ",", "axis", "=", "1", ")", "\n", "", "_x_mean", "=", "tf", ".", "reduce_mean", "(", "_x", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "_x", "=", "_x", "-", "_x_mean", "\n", "_x_T", "=", "tf", ".", "transpose", "(", "_x", ",", "perm", "=", "(", "0", ",", "2", ",", "1", ")", ")", "# (n_epochs, n_samples, n_channel)", "\n", "c", "=", "tf", ".", "matmul", "(", "_x", ",", "_x_T", ")", "/", "(", "n_samples", "-", "1.", ")", "\n", "return", "c", "\n", "\n", "", "return", "Lambda", "(", "cov_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.Xdawn.__init__": [[360, 377], ["Blocks.ProcessingBlock.__init__", "pyriemann.spatialfilters.Xdawn"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.TraceCCA.TraceCCA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_filters", "=", "4", ",", "with_xdawn_templates", "=", "False", ",", "apply_filters", "=", "True", ",", "name", "=", "\"Xdawn\"", ")", ":", "\n", "        ", "\"\"\"\n\n        :param n_filters: The number of spatial filters. When \"transform_flag=False\", the original_data would\n               not be filtered.\n        :param with_xdawn_templates: Set True if padding the templates on the original EEG epochs.\n               Usually used to calculate Xdawn Covariance Matrix.\n        :param apply_filters: Sometimes only the templates are needed, in this case set\n               'transform=False' to just pad the templates on the original EEG epochs. Usually\n               set to 'False' when using Xdawn Covariance Matrix.\n        :param name: The name of the block.\n        \"\"\"", "\n", "super", "(", "Xdawn", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "self", ".", "n_filters", "=", "n_filters", "\n", "self", ".", "apply_filters", "=", "apply_filters", "\n", "self", ".", "with_templates", "=", "with_xdawn_templates", "\n", "self", ".", "model", "=", "riemman_Xdawn", "(", "nfilter", "=", "self", ".", "n_filters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.Xdawn.fit": [[378, 385], ["Blocks.Xdawn.model.fit", "numpy.array().astype", "numpy.array", "len", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.fit"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "3", "# (n_epochs, n_channels, n_samples)", "\n", "self", ".", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "Xdawn_matrix", "=", "np", ".", "array", "(", "self", ".", "model", ".", "filters_", ")", ".", "astype", "(", "np", ".", "float64", ")", "# (n_filters * n_classes, channels)", "\n", "templates", "=", "np", ".", "array", "(", "self", ".", "model", ".", "evokeds_", ")", "\n", "n_components", "=", "len", "(", "self", ".", "model", ".", "classes_", ")", "*", "self", ".", "n_filters", "\n", "self", ".", "weights", "=", "[", "Xdawn_matrix", ",", "templates", ",", "n_components", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.Xdawn.transform": [[386, 399], ["len", "Blocks.Xdawn.model.transform", "numpy.copy", "numpy.repeat", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.TangentSpaceFeature.transform"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "3", "# (n_epochs, n_channels, n_samples)", "\n", "_x", "=", "x", "\n", "n_epochs", "=", "x", ".", "shape", "[", "0", "]", "\n", "if", "self", ".", "apply_filters", ":", "\n", "            ", "_x", "=", "self", ".", "model", ".", "transform", "(", "_x", ")", "\n", "", "if", "self", ".", "with_templates", ":", "\n", "            ", "_", ",", "templates_origin", ",", "_", "=", "self", ".", "weights", "\n", "templates", "=", "np", ".", "copy", "(", "templates_origin", ")", "\n", "templates", "=", "templates", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "\n", "templates", "=", "np", ".", "repeat", "(", "templates", ",", "repeats", "=", "n_epochs", ",", "axis", "=", "0", ")", "\n", "_x", "=", "np", ".", "concatenate", "(", "(", "_x", ",", "templates", ")", ",", "axis", "=", "1", ")", "\n", "", "return", "_x", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.Xdawn.get_keras_layer": [[400, 422], ["tensorflow.keras.layers.Lambda", "tensorflow.constant", "tensorflow.constant", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.conv2d", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.concat", "tensorflow.shape"], "methods", ["None"], ["", "def", "get_keras_layer", "(", "self", ")", ":", "\n", "        ", "Xdawn_matrix", ",", "templates", ",", "n_components", "=", "self", ".", "weights", "\n", "\n", "def", "xdawn_transform", "(", "_x", ")", ":", "\n", "            ", "Xdawn_tensor", "=", "tf", ".", "constant", "(", "Xdawn_matrix", ".", "T", ")", "# (channels, n_components)", "\n", "templates_tensor", "=", "tf", ".", "constant", "(", "templates", ")", "\n", "n_channels", ",", "n_samples", "=", "_x", ".", "shape", "[", "1", "]", ",", "_x", ".", "shape", "[", "2", "]", "\n", "\n", "if", "self", ".", "apply_filters", ":", "\n", "                ", "_x", "=", "tf", ".", "reshape", "(", "_x", ",", "shape", "=", "(", "-", "1", ",", "1", ",", "n_channels", ",", "n_samples", ")", ")", "\n", "conv_filters", "=", "tf", ".", "reshape", "(", "Xdawn_tensor", ",", "(", "Xdawn_tensor", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "n_components", ")", ")", "\n", "_x", "=", "tf", ".", "nn", ".", "conv2d", "(", "_x", ",", "conv_filters", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "data_format", "=", "'NCHW'", ")", "\n", "_x", "=", "tf", ".", "reshape", "(", "_x", ",", "(", "-", "1", ",", "n_components", ",", "n_samples", ")", ")", "\n", "\n", "", "if", "self", ".", "with_templates", ":", "\n", "                ", "_templates_tensor", "=", "tf", ".", "expand_dims", "(", "templates_tensor", ",", "0", ")", "\n", "_templates_tensor", "=", "tf", ".", "tile", "(", "_templates_tensor", ",", "(", "tf", ".", "shape", "(", "_x", ")", "[", "0", "]", ",", "1", ",", "1", ")", ")", "\n", "_x", "=", "tf", ".", "concat", "(", "(", "_x", ",", "_templates_tensor", ")", ",", "axis", "=", "1", ")", "\n", "\n", "", "return", "_x", "\n", "\n", "", "return", "Lambda", "(", "xdawn_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.TangentSpaceFeature.__init__": [[425, 429], ["Blocks.ProcessingBlock.__init__", "pyriemann.tangentspace.TangentSpace"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.TraceCCA.TraceCCA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "mean_metric", "=", "'riemann'", ",", "name", "=", "\"TangentSpaceFeature\"", ")", ":", "\n", "        ", "super", "(", "TangentSpaceFeature", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "self", ".", "mean_metric", "=", "mean_metric", "\n", "self", ".", "model", "=", "riemann_TangentSpace", "(", "metric", "=", "self", ".", "mean_metric", ",", "tsupdate", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.TangentSpaceFeature.fit": [[430, 437], ["Blocks.TangentSpaceFeature.model.fit", "numpy.array().astype", "len", "len", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.fit"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "3", ",", "'The shape of \\'x\\' should be (n_epochs, n_channels, n_channles).'", "\n", "assert", "x", ".", "shape", "[", "1", "]", "==", "x", ".", "shape", "[", "2", "]", ",", "'The shape of \\'x\\' should be (n_epochs, n_channels, n_channles).'", "\n", "assert", "len", "(", "y", ")", "==", "len", "(", "x", ")", "\n", "self", ".", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "Cref", "=", "np", ".", "array", "(", "self", ".", "model", ".", "reference_", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "self", ".", "weights", "=", "[", "Cref", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.TangentSpaceFeature.transform": [[438, 442], ["Blocks.TangentSpaceFeature.model.transform", "len"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.TangentSpaceFeature.transform"], ["", "def", "transform", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "3", ",", "'The shape of \\'x\\' should be (n_epochs, n_channels, n_channles).'", "\n", "assert", "x", ".", "shape", "[", "1", "]", "==", "x", ".", "shape", "[", "2", "]", ",", "'The shape of \\'x\\' should be (n_epochs, n_channels, n_channles).'", "\n", "return", "self", ".", "model", ".", "transform", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.TangentSpaceFeature.get_keras_layer": [[443, 451], ["tensorflow.keras.layers.Lambda", "tensorflow.constant", "lib.tf_Riemann.TangentSpace.tangent_space"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.tf_Riemann.TangentSpace.tangent_space"], ["", "def", "get_keras_layer", "(", "self", ")", ":", "\n", "        ", "Cref", "=", "self", ".", "weights", "[", "0", "]", "\n", "\n", "def", "tangent_space_transform", "(", "_x", ")", ":", "\n", "            ", "Cref_tensor", "=", "tf", ".", "constant", "(", "Cref", ")", "# (channels, channels)", "\n", "return", "tangent_space", "(", "_x", ",", "Cref_tensor", ")", "\n", "\n", "", "return", "Lambda", "(", "tangent_space_transform", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LogisticRegression.__init__": [[455, 464], ["Blocks.ClassifierBlock.__init__", "sklearn.linear_model.LogisticRegression"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.TraceCCA.TraceCCA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "penalty", "=", "'l2'", ",", "tol", "=", "1e-6", ",", "C", "=", "1.0", ",", "class_weight", "=", "None", ",", "max_iter", "=", "500", ",", "name", "=", "\"LogisticRegression\"", ")", ":", "\n", "        ", "super", "(", "LogisticRegression", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "self", ".", "penalty", "=", "penalty", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "class_weight", "=", "class_weight", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "tol", "=", "tol", "\n", "self", ".", "model", "=", "sklearn_LR", "(", "penalty", "=", "self", ".", "penalty", ",", "tol", "=", "self", ".", "tol", ",", "C", "=", "self", ".", "C", ",", "solver", "=", "'sag'", ",", "\n", "class_weight", "=", "self", ".", "class_weight", ",", "multi_class", "=", "'multinomial'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LogisticRegression.fit": [[465, 481], ["Blocks.LogisticRegression.model.fit", "numpy.array().astype", "numpy.array().astype", "len", "len", "len", "len", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.fit"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "2", "\n", "assert", "len", "(", "y", ")", "==", "len", "(", "x", ")", "\n", "self", ".", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "coef", "=", "self", ".", "model", ".", "coef_", "\n", "intercept_", "=", "self", ".", "model", ".", "intercept_", "\n", "if", "len", "(", "intercept_", ")", "==", "1", ":", "\n", "            ", "\"\"\"\n            This is important! When len(class)==2, Sklearn gives a different type of coef_\n            and intercept. Look at Sklearn for more information!\n            \"\"\"", "\n", "coef", "=", "np", ".", "concatenate", "(", "(", "-", "coef", ",", "coef", ")", ",", "axis", "=", "0", ")", "\n", "intercept_", "=", "np", ".", "concatenate", "(", "(", "-", "intercept_", ",", "intercept_", ")", ",", "axis", "=", "0", ")", "\n", "", "w", "=", "np", ".", "array", "(", "coef", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "b", "=", "np", ".", "array", "(", "intercept_", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "self", ".", "weights", "=", "[", "w", ",", "b", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LogisticRegression.predict": [[482, 486], ["Blocks.LogisticRegression.model.predict_proba", "len"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "2", "\n", "y", "=", "self", ".", "model", ".", "predict_proba", "(", "x", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LogisticRegression.get_keras_layer": [[487, 498], ["tensorflow.keras.layers.Lambda", "tensorflow.constant", "tensorflow.constant", "tensorflow.nn.xw_plus_b", "tensorflow.nn.softmax"], "methods", ["None"], ["", "def", "get_keras_layer", "(", "self", ")", ":", "\n", "        ", "w", ",", "b", "=", "self", ".", "weights", "# shape(w) = (n_class, n_features)", "\n", "\n", "def", "LR_predict", "(", "_x", ")", ":", "\n", "            ", "w_tensor", "=", "tf", ".", "constant", "(", "w", ".", "T", ")", "# (n_features, n_class)", "\n", "b_tensor", "=", "tf", ".", "constant", "(", "b", ")", "# (n_class,)", "\n", "_logits", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "_x", ",", "w_tensor", ",", "b_tensor", ")", "\n", "_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "_logits", ")", "\n", "return", "_probs", "\n", "\n", "", "return", "Lambda", "(", "LR_predict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.MDM.__init__": [[504, 511], ["Blocks.ClassifierBlock.__init__", "pyriemann.classification.MDM"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.TraceCCA.TraceCCA.__init__"], ["def", "__init__", "(", "self", ",", "mean_metric", "=", "'riemann'", ",", "dist_metric", "=", "'riemann'", ",", "n_jobs", "=", "1", ",", "name", "=", "\"MDM\"", ")", ":", "\n", "        ", "super", "(", "MDM", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "self", ".", "mean_metric", "=", "mean_metric", "\n", "self", ".", "dist_metric", "=", "dist_metric", "\n", "self", ".", "n_jobs", "=", "n_jobs", "\n", "metric", "=", "{", "'mean'", ":", "self", ".", "mean_metric", ",", "'distance'", ":", "self", ".", "dist_metric", "}", "\n", "self", ".", "model", "=", "riemann_MDM", "(", "metric", "=", "metric", ",", "n_jobs", "=", "self", ".", "n_jobs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.MDM.fit": [[512, 520], ["Blocks.MDM.model.fit", "numpy.array().astype", "len", "len", "len", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.fit"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "3", ",", "'The shape of \\'x\\' should be (n_epochs, n_channels, n_channles).'", "\n", "assert", "x", ".", "shape", "[", "1", "]", "==", "x", ".", "shape", "[", "2", "]", ",", "'The shape of \\'x\\' should be (n_epochs, n_channels, n_channles).'", "\n", "assert", "len", "(", "y", ")", "==", "len", "(", "x", ")", "\n", "self", ".", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "covmeans", "=", "np", ".", "array", "(", "self", ".", "model", ".", "covmeans_", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "dist_metric", "=", "self", ".", "dist_metric", "\n", "self", ".", "weights", "=", "[", "covmeans", ",", "dist_metric", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.MDM.predict": [[521, 526], ["Blocks.MDM.model.predict_proba", "len"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "3", ",", "'The shape of \\'x\\' should be (n_epochs, n_channels, n_channles).'", "\n", "assert", "x", ".", "shape", "[", "1", "]", "==", "x", ".", "shape", "[", "2", "]", ",", "'The shape of \\'x\\' should be (n_epochs, n_channels, n_channles).'", "\n", "y", "=", "self", ".", "model", ".", "predict_proba", "(", "x", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.MDM.get_keras_layer": [[527, 546], ["tensorflow.keras.layers.Lambda", "tensorflow.concat", "tensorflow.nn.softmax", "tensorflow.constant", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.tile", "lib.tf_Riemann.Distance.distance", "tensorflow.reshape", "dist_list.append", "range"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.tf_Riemann.Distance.distance"], ["", "def", "get_keras_layer", "(", "self", ")", ":", "\n", "        ", "covmeans", ",", "dist_metric", "=", "self", ".", "weights", "# shape(w) = (n_class, n_channels, n_channels)", "\n", "\n", "def", "mdm_predict", "(", "_x", ")", ":", "\n", "            ", "covmean_tensor_list", "=", "[", "tf", ".", "constant", "(", "covmeans", "[", "c", ",", ":", ",", ":", "]", ")", "for", "c", "in", "range", "(", "covmeans", ".", "shape", "[", "0", "]", ")", "]", "\n", "dist_list", "=", "[", "]", "\n", "n_epochs", "=", "tf", ".", "shape", "(", "_x", ")", "[", "0", "]", "\n", "for", "covmean_tensor", "in", "covmean_tensor_list", ":", "\n", "                ", "covmean_tensor", "=", "tf", ".", "expand_dims", "(", "covmean_tensor", ",", "0", ")", "\n", "covmean_tensor", "=", "tf", ".", "tile", "(", "covmean_tensor", ",", "(", "n_epochs", ",", "1", ",", "1", ")", ")", "\n", "dist", "=", "distance", "(", "_x", ",", "covmean_tensor", ",", "metric", "=", "dist_metric", ")", "\n", "dist", "=", "tf", ".", "reshape", "(", "dist", ",", "shape", "=", "(", "-", "1", ",", "1", ")", ")", "\n", "dist_list", ".", "append", "(", "dist", ")", "\n", "", "dist_tensor", "=", "tf", ".", "concat", "(", "dist_list", ",", "axis", "=", "1", ")", "\n", "_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "-", "dist_tensor", ")", "\n", "return", "_probs", "\n", "# return dist_tensor", "\n", "\n", "", "return", "Lambda", "(", "mdm_predict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LDA.__init__": [[549, 554], ["Blocks.ClassifierBlock.__init__", "sklearn.discriminant_analysis.LinearDiscriminantAnalysis"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.TraceCCA.TraceCCA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_components", "=", "None", ",", "tol", "=", "1e-5", ",", "name", "=", "\"LDA\"", ")", ":", "\n", "        ", "super", "(", "LDA", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "self", ".", "n_components", "=", "n_components", "\n", "self", ".", "tol", "=", "tol", "\n", "self", ".", "model", "=", "sklearn_LDA", "(", "solver", "=", "'svd'", ",", "n_components", "=", "self", ".", "n_components", ",", "tol", "=", "self", ".", "tol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LDA.fit": [[555, 568], ["Blocks.LDA.model.fit", "numpy.array().astype", "numpy.array().astype", "len", "len", "len", "len", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.fit"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "2", "\n", "assert", "len", "(", "y", ")", "==", "len", "(", "x", ")", "\n", "self", ".", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "coef", "=", "self", ".", "model", ".", "coef_", "\n", "intercept_", "=", "self", ".", "model", ".", "intercept_", "\n", "if", "len", "(", "intercept_", ")", "==", "1", ":", "\n", "            ", "coef", "=", "np", ".", "concatenate", "(", "(", "-", "coef", ",", "coef", ")", ",", "axis", "=", "0", ")", "/", "2.", "\n", "intercept_", "=", "np", ".", "concatenate", "(", "(", "-", "intercept_", ",", "intercept_", ")", ",", "axis", "=", "0", ")", "/", "2.", "\n", "\n", "", "w", "=", "np", ".", "array", "(", "coef", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "b", "=", "np", ".", "array", "(", "intercept_", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "self", ".", "weights", "=", "[", "w", ",", "b", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LDA.predict": [[569, 573], ["Blocks.LDA.model.predict_proba", "len"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "2", "\n", "y", "=", "self", ".", "model", ".", "predict_proba", "(", "x", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LDA.get_keras_layer": [[574, 585], ["tensorflow.keras.layers.Lambda", "tensorflow.constant", "tensorflow.constant", "tensorflow.nn.xw_plus_b", "tensorflow.nn.softmax"], "methods", ["None"], ["", "def", "get_keras_layer", "(", "self", ")", ":", "\n", "        ", "w", ",", "b", "=", "self", ".", "weights", "\n", "\n", "def", "LR_predict", "(", "_x", ")", ":", "\n", "            ", "w_tensor", "=", "tf", ".", "constant", "(", "w", ".", "T", ")", "# (n_features, n_class)", "\n", "b_tensor", "=", "tf", ".", "constant", "(", "b", ")", "# (n_class,)", "\n", "_logits", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "_x", ",", "w_tensor", ",", "b_tensor", ")", "\n", "_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "_logits", ")", "\n", "return", "_probs", "\n", "\n", "", "return", "Lambda", "(", "LR_predict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.__init__": [[588, 600], ["Blocks.ClassifierBlock.__init__", "sklearn.svm.LinearSVC"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.TraceCCA.TraceCCA.__init__"], ["    ", "def", "__init__", "(", "self", ",", "penalty", "=", "'l2'", ",", "loss", "=", "'squared_hinge'", ",", "tol", "=", "1e-6", ",", "C", "=", "1.0", ",", "class_weight", "=", "None", ",", "\n", "multi_class", "=", "'ovr'", ",", "max_iter", "=", "1000", ",", "name", "=", "\"LinearSVC\"", ")", ":", "\n", "        ", "super", "(", "LinearSVC", ",", "self", ")", ".", "__init__", "(", "name", ")", "\n", "self", ".", "penalty", "=", "penalty", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "C", "=", "C", "\n", "self", ".", "class_weight", "=", "class_weight", "\n", "self", ".", "multi_class", "=", "multi_class", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "tol", "=", "tol", "\n", "self", ".", "model", "=", "sklearn_LSVC", "(", "penalty", "=", "self", ".", "penalty", ",", "loss", "=", "self", ".", "loss", ",", "tol", "=", "self", ".", "tol", ",", "C", "=", "self", ".", "C", ",", "\n", "multi_class", "=", "self", ".", "multi_class", ",", "class_weight", "=", "self", ".", "class_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.fit": [[601, 617], ["Blocks.LinearSVC.model.fit", "numpy.array().astype", "numpy.array().astype", "len", "len", "len", "len", "numpy.concatenate", "numpy.concatenate", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.fit"], ["", "def", "fit", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "2", "\n", "assert", "len", "(", "y", ")", "==", "len", "(", "x", ")", "\n", "self", ".", "model", ".", "fit", "(", "x", ",", "y", ")", "\n", "coef", "=", "self", ".", "model", ".", "coef_", "\n", "intercept_", "=", "self", ".", "model", ".", "intercept_", "\n", "if", "len", "(", "intercept_", ")", "==", "1", ":", "\n", "            ", "\"\"\"\n            This is important! When len(class)==2, Sklearn gives a different type of coef_\n            and intercept. Look at Sklearn for more information!\n            \"\"\"", "\n", "coef", "=", "np", ".", "concatenate", "(", "(", "-", "coef", ",", "coef", ")", ",", "axis", "=", "0", ")", "/", "2.", "\n", "intercept_", "=", "np", ".", "concatenate", "(", "(", "-", "intercept_", ",", "intercept_", ")", ",", "axis", "=", "0", ")", "/", "2.", "\n", "", "w", "=", "np", ".", "array", "(", "coef", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "b", "=", "np", ".", "array", "(", "intercept_", ")", ".", "astype", "(", "np", ".", "float64", ")", "\n", "self", ".", "weights", "=", "[", "w", ",", "b", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.predict": [[618, 629], ["Blocks.LinearSVC.model.decision_function", "numpy.exp", "numpy.sum", "len", "len", "numpy.reshape", "numpy.concatenate", "numpy.max"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "2", "\n", "y", "=", "self", ".", "model", ".", "decision_function", "(", "x", ")", "\n", "if", "len", "(", "y", ".", "shape", ")", "==", "1", ":", "\n", "            ", "y", "=", "np", ".", "reshape", "(", "y", ",", "newshape", "=", "(", "-", "1", ",", "1", ")", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "(", "-", "y", "/", "2.", ",", "y", "/", "2.", ")", ",", "axis", "=", "1", ")", "\n", "", "y", "=", "y", "-", "np", ".", "max", "(", "y", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "y", "=", "np", ".", "exp", "(", "y", ")", "\n", "y_sum", "=", "np", ".", "sum", "(", "y", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "y", "=", "y", "/", "y_sum", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.Blocks.LinearSVC.get_keras_layer": [[630, 641], ["tensorflow.keras.layers.Lambda", "tensorflow.constant", "tensorflow.constant", "tensorflow.nn.xw_plus_b", "tensorflow.nn.softmax"], "methods", ["None"], ["", "def", "get_keras_layer", "(", "self", ")", ":", "\n", "        ", "w", ",", "b", "=", "self", ".", "weights", "# shape(w) = (n_class, n_features)", "\n", "\n", "def", "LR_predict", "(", "_x", ")", ":", "\n", "            ", "w_tensor", "=", "tf", ".", "constant", "(", "w", ".", "T", ")", "# (n_features, n_class)", "\n", "b_tensor", "=", "tf", ".", "constant", "(", "b", ")", "# (n_class,)", "\n", "_logits", "=", "tf", ".", "nn", ".", "xw_plus_b", "(", "_x", ",", "w_tensor", ",", "b_tensor", ")", "\n", "_probs", "=", "tf", ".", "nn", ".", "softmax", "(", "_logits", ")", "\n", "return", "_probs", "\n", "\n", "", "return", "Lambda", "(", "LR_predict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils_P300Speller.get_start_indics": [[14, 24], ["len", "range", "numpy.array().squeeze", "start_indics.append", "start_indics.append", "numpy.array"], "function", ["None"], ["def", "get_start_indics", "(", "flashing", ")", ":", "\n", "    ", "n_samples", "=", "len", "(", "flashing", ")", "\n", "start_indics", "=", "[", "]", "\n", "for", "sample", "in", "range", "(", "n_samples", ")", ":", "\n", "        ", "if", "sample", "==", "0", ":", "\n", "            ", "start_indics", ".", "append", "(", "0", ")", "\n", "continue", "\n", "", "if", "flashing", "[", "sample", "]", "==", "1", "and", "flashing", "[", "sample", "-", "1", "]", "==", "0", ":", "\n", "            ", "start_indics", ".", "append", "(", "sample", ")", "\n", "", "", "return", "np", ".", "array", "(", "start_indics", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils_P300Speller.get_char": [[26, 31], ["numpy.min", "numpy.max"], "function", ["None"], ["", "def", "get_char", "(", "location", ",", "char_matrix", "=", "_CHAR_MATRIX", ")", ":", "\n", "    ", "column", ",", "row", "=", "np", ".", "min", "(", "location", ")", ",", "np", ".", "max", "(", "location", ")", "\n", "column", "-=", "1", "\n", "row", "-=", "7", "\n", "return", "char_matrix", "[", "row", ",", "column", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils_P300Speller.get_locations": [[33, 40], ["numpy.zeros", "range", "numpy.sum", "numpy.argmax", "numpy.argmax"], "function", ["None"], ["", "def", "get_locations", "(", "stimuli_code", ",", "stimuli_prob", ")", ":", "\n", "    ", "prob_sum", "=", "np", ".", "zeros", "(", "(", "12", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "12", ")", ":", "\n", "        ", "prob_sum", "[", "i", "]", "=", "np", ".", "sum", "(", "stimuli_prob", "[", "stimuli_code", "==", "i", "+", "1", "]", ")", "\n", "", "column", "=", "np", ".", "argmax", "(", "prob_sum", "[", "0", ":", "6", "]", ")", "+", "1", "\n", "row", "=", "np", ".", "argmax", "(", "prob_sum", "[", "6", ":", "]", ")", "+", "7", "\n", "return", "[", "column", ",", "row", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils_P300Speller.add_template_noise": [[42, 67], ["numpy.copy", "range", "numpy.linalg.norm", "numpy.argwhere().ravel", "stimuli[].ravel", "range", "len", "numpy.argwhere"], "function", ["None"], ["", "def", "add_template_noise", "(", "original_signal", ",", "stimuli", ",", "target_locations", ",", "to_target_template", ",", "perturb_length", ",", "epsilon", ",", "time_delay", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Add template noise to the character trial.\n    :param original_signal: EEG trials. (n_trial, n_channel, n_sample).\n    :param stimuli: stimuli code. (n_trial, n_sample).\n    :param target_locations: Turple which shows the stimuli code of the target row and column. (row_code, column_code).\n    :param to_target_template: the noise template. (n_channel, n_sample).\n    :param perturb_length: Integer. The number of perturbation points.\n    :param epsilon: float. The energy of the perturbation.\n    :param time_delay: int. The delay points when adding the template.\n    :return: adversarial signal\n    \"\"\"", "\n", "signal", "=", "np", ".", "copy", "(", "original_signal", ")", "\n", "n_trial", "=", "signal", ".", "shape", "[", "0", "]", "\n", "target_template", "=", "to_target_template", "[", ":", ",", ":", "perturb_length", "]", "\n", "target_template", "=", "epsilon", "*", "target_template", "/", "np", ".", "linalg", ".", "norm", "(", "target_template", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "for", "i_trial", "in", "range", "(", "n_trial", ")", ":", "\n", "        ", "start_ids", "=", "np", ".", "argwhere", "(", "stimuli", "[", "i_trial", ",", ":", "]", "!=", "0", ")", ".", "ravel", "(", ")", "\n", "temp_stimuli", "=", "stimuli", "[", "i_trial", ",", "start_ids", "]", ".", "ravel", "(", ")", "\n", "for", "sti", "in", "range", "(", "len", "(", "start_ids", ")", ")", ":", "\n", "            ", "start_id", "=", "start_ids", "[", "sti", "]", "+", "time_delay", "\n", "if", "temp_stimuli", "[", "sti", "]", "in", "target_locations", ":", "\n", "                ", "signal", "[", "i_trial", ",", ":", ",", "start_id", ":", "(", "start_id", "+", "perturb_length", ")", "]", "+=", "target_template", "\n", "\n", "", "", "", "return", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils_P300Speller.add_template_noise_both_template": [[69, 93], ["numpy.copy", "range", "numpy.argwhere().ravel", "stimuli[].ravel", "range", "len", "numpy.argwhere"], "function", ["None"], ["", "def", "add_template_noise_both_template", "(", "original_signal", ",", "stimuli", ",", "target_locations", ",", "to_target_template", ",", "to_nontarget_template", ",", "perturb_length", ")", ":", "\n", "    ", "\"\"\"\n    Add template noise to the character trial.\n    :param original_signal: EEG trials. (n_trial, n_channel, n_sample).\n    :param stimuli: stimuli code. (n_trial, n_sample).\n    :param target_locations: the stimuli code of the target row and column. (row_code, column_code).\n    :param to_target_template: the noise template. (n_channel, n_sample).\n    :param perturb_length: Integer. The number of perturbation points.\n    :return: adversarial signal\n    \"\"\"", "\n", "signal", "=", "np", ".", "copy", "(", "original_signal", ")", "\n", "n_trial", "=", "signal", ".", "shape", "[", "0", "]", "\n", "\n", "for", "i_trial", "in", "range", "(", "n_trial", ")", ":", "\n", "        ", "start_ids", "=", "np", ".", "argwhere", "(", "stimuli", "[", "i_trial", ",", ":", "]", "!=", "0", ")", ".", "ravel", "(", ")", "\n", "temp_stimuli", "=", "stimuli", "[", "i_trial", ",", "start_ids", "]", ".", "ravel", "(", ")", "\n", "for", "sti", "in", "range", "(", "len", "(", "start_ids", ")", ")", ":", "\n", "            ", "start_id", "=", "start_ids", "[", "sti", "]", "\n", "if", "temp_stimuli", "[", "sti", "]", "in", "target_locations", ":", "\n", "                ", "signal", "[", "i_trial", ",", ":", ",", "start_id", ":", "(", "start_id", "+", "perturb_length", ")", "]", "+=", "to_target_template", "[", ":", ",", ":", "perturb_length", "]", "\n", "", "else", ":", "\n", "                ", "signal", "[", "i_trial", ",", ":", ",", "start_id", ":", "(", "start_id", "+", "perturb_length", ")", "]", "+=", "to_nontarget_template", "[", ":", ",", ":", "perturb_length", "]", "\n", "\n", "", "", "", "return", "signal", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils_P300Speller.trials_to_epochs": [[95, 125], ["range", "numpy.array().squeeze", "numpy.array().ravel", "range", "numpy.array().squeeze", "numpy.argwhere().ravel", "numpy.argwhere().ravel", "np.array().squeeze.append", "np.array().ravel.append", "numpy.array", "numpy.array", "np.array().squeeze.append", "numpy.array", "numpy.argwhere", "numpy.argwhere"], "function", ["None"], ["", "def", "trials_to_epochs", "(", "signal", ",", "label", ",", "stimuli", ",", "epoch_length", ")", ":", "\n", "    ", "\"\"\"\n    Segment trials into epochs.\n    :param signal: EEG signal. (n_trial, n_channel, n_sample).\n    :param label: labels for epochs. 1 for \"Target\" and 0 for \"Nontarget\".\n    :param stimuli: stimuli code. (n_trial, n_sample).\n    :param epoch_length: The number of sample points in an epoch.\n    :return: epochs and their labels.\n    \"\"\"", "\n", "n_trial", "=", "signal", ".", "shape", "[", "0", "]", "\n", "\n", "if", "label", "is", "not", "None", ":", "\n", "        ", "epochs", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "for", "i_trial", "in", "range", "(", "n_trial", ")", ":", "\n", "            ", "start_ids", "=", "np", ".", "argwhere", "(", "stimuli", "[", "i_trial", ",", ":", "]", "!=", "0", ")", ".", "ravel", "(", ")", "\n", "for", "start_id", "in", "start_ids", ":", "\n", "                ", "epochs", ".", "append", "(", "signal", "[", "i_trial", ",", ":", ",", "start_id", ":", "(", "start_id", "+", "epoch_length", ")", "]", ")", "\n", "y", ".", "append", "(", "label", "[", "i_trial", ",", "start_id", "]", ")", "\n", "", "", "epochs", "=", "np", ".", "array", "(", "epochs", ")", ".", "squeeze", "(", ")", "\n", "y", "=", "np", ".", "array", "(", "y", ")", ".", "ravel", "(", ")", "\n", "return", "epochs", ",", "y", "\n", "", "else", ":", "\n", "        ", "epochs", "=", "[", "]", "\n", "for", "i_trial", "in", "range", "(", "n_trial", ")", ":", "\n", "            ", "start_ids", "=", "np", ".", "argwhere", "(", "stimuli", "[", "i_trial", ",", ":", "]", "!=", "0", ")", ".", "ravel", "(", ")", "\n", "for", "start_id", "in", "start_ids", ":", "\n", "                ", "epochs", ".", "append", "(", "signal", "[", "i_trial", ",", ":", ",", "start_id", ":", "(", "start_id", "+", "epoch_length", ")", "]", ")", "\n", "", "", "epochs", "=", "np", ".", "array", "(", "epochs", ")", ".", "squeeze", "(", ")", "\n", "return", "epochs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.P300Data.P300Data.__init__": [[6, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "signal", ",", "flashing", ")", ":", "\n", "        ", "pass", "", "", "", ""]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils.bca": [[7, 15], ["sklearn.metrics.confusion_matrix", "range", "numpy.sum().astype", "numpy.sum"], "function", ["None"], ["    ", "m", "=", "confusion_matrix", "(", "y_true", ",", "y_pred", ")", "\n", "numb", "=", "m", ".", "shape", "[", "0", "]", "\n", "acc_each_label", "=", "0", "\n", "for", "i", "in", "range", "(", "numb", ")", ":", "\n", "        ", "acc", "=", "m", "[", "i", ",", "i", "]", "/", "np", ".", "sum", "(", "m", "[", "i", ",", ":", "]", ",", "keepdims", "=", "False", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "acc_each_label", "+=", "acc", "\n", "", "return", "acc_each_label", "/", "numb", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils.ITR": [[10, 20], ["Exception", "warnings.warn", "math.log2", "math.log2", "math.log2", "math.log2"], "function", ["None"], ["for", "i", "in", "range", "(", "numb", ")", ":", "\n", "        ", "acc", "=", "m", "[", "i", ",", "i", "]", "/", "np", ".", "sum", "(", "m", "[", "i", ",", ":", "]", ",", "keepdims", "=", "False", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "acc_each_label", "+=", "acc", "\n", "", "return", "acc_each_label", "/", "numb", "\n", "\n", "\n", "", "def", "ITR", "(", "p", ",", "n", ",", "t", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils.acc": [[29, 33], ["y_true.squeeze.squeeze", "y_pred.squeeze.squeeze", "numpy.sum().astype", "len", "numpy.sum"], "function", ["None"], ["return", "0", "\n", "", "elif", "p", "==", "1", ":", "\n", "        ", "return", "math", ".", "log2", "(", "n", ")", "*", "60", "/", "t", "\n", "", "else", ":", "\n", "        ", "return", "(", "math", ".", "log2", "(", "n", ")", "+", "p", "*", "math", ".", "log2", "(", "p", ")", "+", "(", "1", "-", "p", ")", "*", "math", ".", "log2", "(", "(", "1", "-", "p", ")", "/", "(", "n", "-", "1", ")", ")", ")", "*", "60", "/", "t", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils.batch_iter": [[35, 49], ["numpy.array", "range", "list", "int", "utils.shuffle_data", "min"], "function", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils.shuffle_data"], ["", "", "def", "acc", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "y_true", "=", "y_true", ".", "squeeze", "(", ")", "\n", "y_pred", "=", "y_pred", ".", "squeeze", "(", ")", "\n", "return", "np", ".", "sum", "(", "y_pred", "==", "y_true", ")", ".", "astype", "(", "np", ".", "float64", ")", "/", "len", "(", "y_pred", ")", "\n", "\n", "\n", "", "def", "batch_iter", "(", "data", ",", "batchsize", ",", "shuffle", "=", "True", ")", ":", "\n", "    ", "data", "=", "np", ".", "array", "(", "list", "(", "data", ")", ")", "\n", "data_size", "=", "data", ".", "shape", "[", "0", "]", "\n", "num_batches", "=", "np", ".", "ceil", "(", "data_size", "/", "batchsize", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "# Shuffle the data", "\n", "if", "shuffle", ":", "\n", "        ", "shuffle_indices", "=", "shuffle_data", "(", "data_size", ")", "\n", "shuffled_data", "=", "data", "[", "shuffle_indices", "]", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils.get_split_indices": [[51, 68], ["numpy.array", "range", "split_indices_list.append", "len", "TypeError", "numpy.sum", "utils.shuffle_data", "numpy.arange", "split_indices_list.append", "len", "int", "len", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils.shuffle_data"], ["", "for", "batch_num", "in", "range", "(", "num_batches", ")", ":", "\n", "        ", "start_index", "=", "batch_num", "*", "batchsize", "\n", "end_index", "=", "min", "(", "(", "batch_num", "+", "1", ")", "*", "batchsize", ",", "data_size", ")", "\n", "yield", "shuffled_data", "[", "start_index", ":", "end_index", "]", "\n", "\n", "\n", "", "", "def", "get_split_indices", "(", "data_size", ",", "split", "=", "[", "9", ",", "1", "]", ",", "shuffle", "=", "True", ")", ":", "\n", "    ", "if", "len", "(", "split", ")", "<", "2", ":", "\n", "        ", "raise", "TypeError", "(", "'The length of split should be larger than 2 while the length of your split is {}!'", ".", "format", "(", "len", "(", "split", ")", ")", ")", "\n", "", "split", "=", "np", ".", "array", "(", "split", ")", "\n", "split", "=", "split", "/", "np", ".", "sum", "(", "split", ")", "\n", "if", "shuffle", ":", "\n", "        ", "indices", "=", "shuffle_data", "(", "data_size", ")", "\n", "", "else", ":", "\n", "        ", "indices", "=", "np", ".", "arange", "(", "data_size", ")", "\n", "", "split_indices_list", "=", "[", "]", "\n", "start", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "split", ")", "-", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils.shuffle_data": [[70, 75], ["numpy.arange", "numpy.random.permutation().squeeze", "numpy.random.seed", "numpy.random.permutation"], "function", ["None"], ["split_indices_list", ".", "append", "(", "indices", "[", "start", ":", "end", "]", ")", "\n", "start", "=", "end", "\n", "", "split_indices_list", ".", "append", "(", "indices", "[", "start", ":", "]", ")", "\n", "return", "split_indices_list", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.TraceCCA.TraceCCA.__init__": [[5, 27], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.linalg.trace", "tensorflow.matrix_transpose", "tensorflow.matrix_transpose", "tensorflow.matrix_transpose", "tensorflow.matrix_transpose", "tensorflow.linalg.inv", "tensorflow.linalg.inv"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tensor_x", ",", "tensor_y", ")", ":", "\n", "        ", "\"\"\"\n        :param tensor_x: (..., channel_x, sample)\n        :param tensor_y: (..., channel_y, sample)\n        \"\"\"", "\n", "self", ".", "x", "=", "tensor_x", "\n", "self", ".", "y", "=", "tensor_y", "\n", "\n", "self", ".", "mean_x", "=", "tf", ".", "reduce_mean", "(", "tensor_x", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "self", ".", "mean_y", "=", "tf", ".", "reduce_mean", "(", "tensor_y", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "x_", "=", "self", ".", "x", "-", "self", ".", "mean_x", "\n", "y_", "=", "self", ".", "y", "-", "self", ".", "mean_y", "\n", "\n", "s_xx", "=", "tf", ".", "matmul", "(", "x_", ",", "tf", ".", "matrix_transpose", "(", "x_", ")", ")", "\n", "s_yy", "=", "tf", ".", "matmul", "(", "y_", ",", "tf", ".", "matrix_transpose", "(", "y_", ")", ")", "\n", "s_xy", "=", "tf", ".", "matmul", "(", "x_", ",", "tf", ".", "matrix_transpose", "(", "y_", ")", ")", "\n", "s_yx", "=", "tf", ".", "matmul", "(", "y_", ",", "tf", ".", "matrix_transpose", "(", "x_", ")", ")", "\n", "\n", "self", ".", "M", "=", "tf", ".", "linalg", ".", "inv", "(", "s_xx", ")", "@", "s_xy", "@", "tf", ".", "linalg", ".", "inv", "(", "s_yy", ")", "@", "s_yx", "\n", "\n", "self", ".", "rho", "=", "tf", ".", "linalg", ".", "trace", "(", "self", ".", "M", ")", "# \\sum\\rho^2", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.lib.utils.filterband": [[22, 29], ["scipy.cheb1ord", "scipy.cheby1", "scipy.filtfilt"], "function", ["None"], ["\n", "if", "p", "<", "0", "or", "1", "<", "p", ":", "\n", "        ", "raise", "Exception", "(", "'Accuracy need to be between 0 and 1.'", ")", "\n", "", "elif", "p", "<", "1", "/", "n", ":", "\n", "        ", "warnings", ".", "warn", "(", "'The ITR might be incorrect because the accuracy < chance level.'", ")", "\n", "return", "0", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.tf_Riemann.op.logm": [[4, 14], ["tensorflow.linalg.eigh", "tensorflow.linalg.diag", "tensorflow.matmul", "tensorflow.log", "tensorflow.matmul", "tensorflow.linalg.inv"], "function", ["None"], ["def", "logm", "(", "A", ")", ":", "\n", "    ", "\"\"\"\n    This is especially used for Symmetric Matrix, the original \"tf.linalg.logm\"\n    has no defined gradient operation.\n    :param A:\n    :return: Matrix Logarithm (A)\n    \"\"\"", "\n", "e", ",", "v", "=", "tf", ".", "linalg", ".", "eigh", "(", "A", ")", "\n", "e", "=", "tf", ".", "linalg", ".", "diag", "(", "tf", ".", "log", "(", "e", ")", ")", "\n", "return", "tf", ".", "matmul", "(", "v", ",", "tf", ".", "matmul", "(", "e", ",", "tf", ".", "linalg", ".", "inv", "(", "v", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.tf_Riemann.Distance.distance_euclid": [[5, 7], ["tensorflow.norm"], "function", ["None"], ["def", "distance_euclid", "(", "A", ",", "B", ")", ":", "\n", "    ", "return", "tf", ".", "norm", "(", "A", "-", "B", ",", "axis", "=", "(", "1", ",", "2", ")", ",", "ord", "=", "'fro'", ",", "keepdims", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.tf_Riemann.Distance.distance_logeuclid": [[9, 13], ["lib.tf_Riemann.op.logm", "lib.tf_Riemann.op.logm", "Distance.distance_euclid"], "function", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.tf_Riemann.op.logm", "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.tf_Riemann.op.logm", "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.tf_Riemann.Distance.distance_euclid"], ["", "def", "distance_logeuclid", "(", "A", ",", "B", ")", ":", "\n", "    ", "A", "=", "op", ".", "logm", "(", "A", ")", "\n", "B", "=", "op", ".", "logm", "(", "B", ")", "\n", "return", "distance_euclid", "(", "A", ",", "B", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.tf_Riemann.Distance.distance_riemann": [[15, 21], ["tensorflow.linalg.inv", "tensorflow.matmul", "tensorflow.matmul", "lib.tf_Riemann.op.logm", "tensorflow.norm", "tensorflow.linalg.sqrtm"], "function", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.tf_Riemann.op.logm"], ["", "def", "distance_riemann", "(", "A", ",", "B", ")", ":", "\n", "    ", "sqrt_B_1", "=", "tf", ".", "linalg", ".", "inv", "(", "tf", ".", "linalg", ".", "sqrtm", "(", "B", ")", ")", "\n", "m", "=", "tf", ".", "matmul", "(", "sqrt_B_1", ",", "A", ")", "\n", "m", "=", "tf", ".", "matmul", "(", "m", ",", "sqrt_B_1", ")", "\n", "m", "=", "op", ".", "logm", "(", "m", ")", "\n", "return", "tf", ".", "norm", "(", "m", ",", "axis", "=", "(", "-", "2", ",", "-", "1", ")", ",", "keepdims", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.tf_Riemann.Distance.distance_logdet": [[23, 28], ["tensorflow.linalg.logdet", "tensorflow.sqrt", "tensorflow.linalg.logdet", "tensorflow.linalg.logdet"], "function", ["None"], ["", "def", "distance_logdet", "(", "A", ",", "B", ")", ":", "\n", "    ", "m1", "=", "tf", ".", "linalg", ".", "logdet", "(", "(", "A", "+", "B", ")", "/", "2.", ")", "\n", "m2", "=", "tf", ".", "linalg", ".", "logdet", "(", "A", ")", "+", "tf", ".", "linalg", ".", "logdet", "(", "B", ")", "\n", "m", "=", "tf", ".", "sqrt", "(", "m1", "-", "0.5", "*", "m2", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.tf_Riemann.Distance.distance": [[36, 44], ["callable", "distance_function"], "function", ["None"], ["def", "distance", "(", "A", ",", "B", ",", "metric", "=", "'riemann'", ")", ":", "\n", "\n", "    ", "if", "callable", "(", "metric", ")", ":", "\n", "        ", "distance_function", "=", "metric", "\n", "", "else", ":", "\n", "        ", "distance_function", "=", "distance_methods", "[", "metric", "]", "\n", "\n", "", "return", "distance_function", "(", "A", ",", "B", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.tf_Riemann.TangentSpace.tangent_space": [[7, 33], ["tensorflow.linalg.inv", "tensorflow.expand_dims", "tensorflow.tile", "tensorflow.matmul", "tensorflow.matmul", "lib.tf_Riemann.op.logm", "tensorflow.constant", "tensorflow.expand_dims", "tensorflow.multiply", "range", "tensorflow.concat", "tensorflow.shape", "tensorflow.linalg.sqrtm", "numpy.eye", "T_list.append", "numpy.sqrt", "numpy.triu", "tensorflow.reshape", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.ZhangXiao96_Speller-Attacks.tf_Riemann.op.logm"], ["    ", "\"\"\"Project a set of covariance matrices in the tangent space according to the given reference point Cref\n\n    :param covmats: Covariance matrices set, Ntrials X Nchannels X Nchannels\n    :param Cref: The reference covariance matrix\n    :returns: the Tangent space , a matrix of Ntrials X (Nchannels*(Nchannels+1)/2)\n\n    \"\"\"", "\n", "n_epochs", "=", "tf", ".", "shape", "(", "covmats", ")", "[", "0", "]", "\n", "n_channel", "=", "covmats", ".", "shape", "[", "1", "]", "\n", "Cm12", "=", "tf", ".", "linalg", ".", "inv", "(", "tf", ".", "linalg", ".", "sqrtm", "(", "Cref", ")", ")", "\n", "Cm12", "=", "tf", ".", "expand_dims", "(", "Cm12", ",", "0", ")", "\n", "Cm12", "=", "tf", ".", "tile", "(", "Cm12", ",", "(", "n_epochs", ",", "1", ",", "1", ")", ")", "\n", "m", "=", "tf", ".", "matmul", "(", "Cm12", ",", "covmats", ")", "\n", "m", "=", "tf", ".", "matmul", "(", "m", ",", "Cm12", ")", "\n", "m", "=", "op", ".", "logm", "(", "m", ")", "\n", "coeffs", "=", "(", "np", ".", "sqrt", "(", "2", ")", "*", "np", ".", "triu", "(", "np", ".", "ones", "(", "(", "n_channel", ",", "n_channel", ")", ")", ",", "1", ")", "+", "np", ".", "eye", "(", "n_channel", ")", ")", "\n", "coeffs_tensor", "=", "tf", ".", "constant", "(", "coeffs", ")", "\n", "coeffs_tensor", "=", "tf", ".", "expand_dims", "(", "coeffs_tensor", ",", "0", ")", "\n", "\n", "m", "=", "tf", ".", "multiply", "(", "m", ",", "coeffs_tensor", ")", "\n", "T_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_channel", ")", ":", "\n", "        ", "T_list", ".", "append", "(", "tf", ".", "reshape", "(", "m", "[", ":", ",", "i", ",", "i", ":", "]", ",", "shape", "=", "(", "n_epochs", ",", "-", "1", ")", ")", ")", "\n", "", "T", "=", "tf", ".", "concat", "(", "T_list", ",", "axis", "=", "1", ")", "\n", "return", "T", "", "", ""]]}