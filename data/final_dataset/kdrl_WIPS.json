{"home.repos.pwc.inspect_result.kdrl_WIPS.None.models.Embedding.__init__": [[10, 25], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "models.Embedding.build_NN", "torch.nn.Linear", "torch.nn.Linear", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.data.GraphDataset.__init__", "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.Embedding.build_NN"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "Embedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "opt", "[", "\"model_name\"", "]", "\n", "self", ".", "total_node_num", "=", "opt", "[", "\"total_node_num\"", "]", "\n", "self", ".", "train_node_num", "=", "opt", "[", "\"train_node_num\"", "]", "\n", "self", ".", "parameter_num", "=", "opt", "[", "\"parameter_num\"", "]", "\n", "assert", "opt", "[", "\"data_vectors\"", "]", ".", "shape", "[", "0", "]", "==", "opt", "[", "\"total_node_num\"", "]", "\n", "assert", "opt", "[", "\"hidden_layer_num\"", "]", ">=", "1", "\n", "self", ".", "data_vectors", "=", "nn", ".", "Embedding", "(", "\n", "opt", "[", "\"data_vectors\"", "]", ".", "shape", "[", "0", "]", ",", "opt", "[", "\"data_vectors\"", "]", ".", "shape", "[", "1", "]", "\n", ")", "\n", "self", ".", "data_vectors", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "opt", "[", "\"data_vectors\"", "]", ")", ".", "float", "(", ")", "\n", "self", ".", "data_vectors", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "U_NN", "=", "self", ".", "build_NN", "(", "opt", "[", "\"data_vectors\"", "]", ",", "opt", "[", "\"hidden_layer_num\"", "]", ",", "opt", "[", "\"hidden_size\"", "]", ")", "\n", "self", ".", "U", "=", "nn", ".", "Linear", "(", "opt", "[", "\"hidden_size\"", "]", ",", "opt", "[", "\"parameter_num\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.Embedding.initialization": [[26, 41], ["models.Embedding.named_parameters", "torch.uniform_", "torch.uniform_", "torch.constant_", "torch.constant_", "torch.kaiming_uniform_", "torch.kaiming_uniform_", "Exception"], "methods", ["None"], ["", "def", "initialization", "(", "self", ")", ":", "\n", "\n", "        ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "'data_vectors'", "in", "name", ":", "\n", "                ", "continue", "\n", "", "if", "'ips_weight'", "in", "name", ":", "\n", "# init.uniform_(param, 0.0, 1.0/self.parameter_num) # **For simplicity**, the results of the paper came from this line.", "\n", "                ", "init", ".", "uniform_", "(", "param", ",", "-", "0.5", "/", "self", ".", "parameter_num", ",", "0.5", "/", "self", ".", "parameter_num", ")", "# Recommended (since it shows better results for most cases).", "\n", "continue", "\n", "", "if", "'bias'", "in", "name", ":", "\n", "                ", "init", ".", "constant_", "(", "param", ",", "0.0", ")", "\n", "", "elif", "'weight'", "in", "name", ":", "\n", "                ", "init", ".", "kaiming_uniform_", "(", "param", ",", "mode", "=", "'fan_in'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.Embedding.build_NN": [[42, 48], ["range", "NN.append", "torch.nn.Sequential", "torch.nn.Sequential", "NN.extend", "collections.OrderedDict", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["None"], ["", "", "", "def", "build_NN", "(", "self", ",", "given_data_vectors", ",", "hidden_layer_num", ",", "hidden_size", ")", ":", "\n", "        ", "NN", "=", "[", "(", "\"fc0\"", ",", "nn", ".", "Linear", "(", "given_data_vectors", ".", "shape", "[", "1", "]", ",", "hidden_size", ")", ")", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "hidden_layer_num", ")", ":", "\n", "            ", "NN", ".", "extend", "(", "[", "(", "f\"relu{i-1}\"", ",", "nn", ".", "ReLU", "(", "True", ")", ")", ",", "(", "f\"fc{i}\"", ",", "nn", ".", "Linear", "(", "hidden_size", ",", "hidden_size", ")", ")", "]", ")", "\n", "", "NN", ".", "append", "(", "(", "f\"relu{hidden_layer_num-1}\"", ",", "nn", ".", "ReLU", "(", "True", ")", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "OrderedDict", "(", "NN", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.Embedding.forward": [[49, 56], ["models.Embedding.U_NN", "models.Embedding.U", "models.Embedding.narrow", "models.Embedding.narrow().expand_as", "models.Embedding.distfn().squeeze", "models.Embedding.data_vectors", "models.Embedding.size", "models.Embedding.narrow", "models.Embedding.distfn"], "methods", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.models.NPD.distfn"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "inputs", "=", "self", ".", "U_NN", "(", "self", ".", "data_vectors", "(", "inputs", ")", ")", "\n", "e", "=", "self", ".", "U", "(", "inputs", ")", "\n", "o", "=", "e", ".", "narrow", "(", "1", ",", "1", ",", "e", ".", "size", "(", "1", ")", "-", "1", ")", "\n", "s", "=", "e", ".", "narrow", "(", "1", ",", "0", ",", "1", ")", ".", "expand_as", "(", "o", ")", "\n", "dists", "=", "self", ".", "distfn", "(", "[", "s", ",", "o", "]", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "return", "-", "dists", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.Embedding.embed": [[57, 60], ["models.Embedding.U().data.cpu().numpy", "models.Embedding.U().data.cpu", "models.Embedding.U", "models.Embedding.U_NN", "models.Embedding.data_vectors.state_dict"], "methods", ["None"], ["", "def", "embed", "(", "self", ")", ":", "\n", "        ", "embeddings", "=", "self", ".", "U", "(", "self", ".", "U_NN", "(", "self", ".", "data_vectors", ".", "state_dict", "(", ")", "[", "'weight'", "]", ")", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "[", "embeddings", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.Embedding.get_similarity": [[61, 63], ["models.Embedding.forward"], "methods", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.models.PDF.forward"], ["", "def", "get_similarity", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "return", "self", ".", "forward", "(", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.WIPS.__init__": [[68, 72], ["models.Embedding.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "models.WIPS.initialization", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.data.GraphDataset.__init__", "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.Embedding.initialization"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "WIPS", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "self", ".", "ips_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "opt", "[", "\"parameter_num\"", "]", ")", ")", "\n", "self", ".", "initialization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.WIPS.distfn": [[73, 77], ["torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "distfn", "(", "self", ",", "input", ",", "w", "=", "None", ")", ":", "\n", "        ", "u", ",", "v", "=", "input", "\n", "if", "w", "is", "None", ":", "w", "=", "self", ".", "ips_weight", "\n", "return", "-", "torch", ".", "sum", "(", "u", "*", "v", "*", "w", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.WIPS.get_ips_weight": [[78, 80], ["models.WIPS.ips_weight.data.cpu().numpy", "models.WIPS.ips_weight.data.cpu"], "methods", ["None"], ["", "def", "get_ips_weight", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ips_weight", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.IPS.__init__": [[85, 88], ["models.Embedding.__init__", "models.IPS.initialization"], "methods", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.data.GraphDataset.__init__", "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.Embedding.initialization"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "IPS", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "self", ".", "initialization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.IPS.distfn": [[89, 92], ["torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "distfn", "(", "self", ",", "input", ")", ":", "\n", "        ", "u", ",", "v", "=", "input", "\n", "return", "-", "(", "torch", ".", "sum", "(", "u", "*", "v", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.SIPS.__init__": [[97, 110], ["models.Embedding.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "models.SIPS.initialization"], "methods", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.data.GraphDataset.__init__", "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.Embedding.initialization"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "SIPS", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "self", ".", "U", "=", "nn", ".", "Embedding", "(", "\n", "opt", "[", "\"train_node_num\"", "]", ",", "\n", "opt", "[", "\"parameter_num\"", "]", "-", "1", ",", "\n", ")", "\n", "self", ".", "U_bias", "=", "nn", ".", "Embedding", "(", "\n", "opt", "[", "\"train_node_num\"", "]", ",", "\n", "1", "\n", ")", "\n", "self", ".", "U", "=", "nn", ".", "Linear", "(", "opt", "[", "\"hidden_size\"", "]", ",", "opt", "[", "\"parameter_num\"", "]", "-", "1", ")", "\n", "self", ".", "U_bias", "=", "nn", ".", "Linear", "(", "opt", "[", "\"hidden_size\"", "]", ",", "1", ")", "\n", "self", ".", "initialization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.SIPS.distfn": [[111, 114], ["v_bias.squeeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "u_bias.squeeze"], "methods", ["None"], ["", "def", "distfn", "(", "self", ",", "input", ")", ":", "\n", "        ", "u", ",", "u_bias", ",", "v", ",", "v_bias", "=", "input", "\n", "return", "-", "(", "torch", ".", "sum", "(", "u", "*", "v", ",", "dim", "=", "-", "1", ")", "+", "u_bias", ".", "squeeze", "(", "-", "1", ")", "+", "v_bias", ".", "squeeze", "(", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.SIPS.forward": [[115, 125], ["models.SIPS.U_NN", "models.SIPS.U", "models.SIPS.U_bias", "models.SIPS.narrow", "models.SIPS.narrow().expand_as", "models.SIPS.narrow", "models.SIPS.narrow().expand_as", "models.SIPS.distfn().squeeze", "models.SIPS.data_vectors", "models.SIPS.size", "models.SIPS.narrow", "models.SIPS.size", "models.SIPS.narrow", "models.SIPS.distfn"], "methods", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.models.NPD.distfn"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "inputs", "=", "self", ".", "U_NN", "(", "self", ".", "data_vectors", "(", "inputs", ")", ")", "\n", "e", "=", "self", ".", "U", "(", "inputs", ")", "\n", "eb", "=", "self", ".", "U_bias", "(", "inputs", ")", "\n", "o", "=", "e", ".", "narrow", "(", "1", ",", "1", ",", "e", ".", "size", "(", "1", ")", "-", "1", ")", "\n", "s", "=", "e", ".", "narrow", "(", "1", ",", "0", ",", "1", ")", ".", "expand_as", "(", "o", ")", "\n", "ob", "=", "eb", ".", "narrow", "(", "1", ",", "1", ",", "e", ".", "size", "(", "1", ")", "-", "1", ")", "\n", "sb", "=", "eb", ".", "narrow", "(", "1", ",", "0", ",", "1", ")", ".", "expand_as", "(", "ob", ")", "\n", "dists", "=", "self", ".", "distfn", "(", "[", "s", ",", "sb", ",", "o", ",", "ob", "]", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "return", "-", "dists", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.SIPS.embed": [[126, 129], ["models.SIPS.U_NN", "models.SIPS.U().data.cpu().numpy", "models.SIPS.U_bias().data.cpu().numpy", "models.SIPS.data_vectors.state_dict", "models.SIPS.U().data.cpu", "models.SIPS.U_bias().data.cpu", "models.SIPS.U", "models.SIPS.U_bias"], "methods", ["None"], ["", "def", "embed", "(", "self", ")", ":", "\n", "        ", "tmp", "=", "self", ".", "U_NN", "(", "self", ".", "data_vectors", ".", "state_dict", "(", ")", "[", "'weight'", "]", ")", "\n", "return", "[", "self", ".", "U", "(", "tmp", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "U_bias", "(", "tmp", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.IPDS.__init__": [[134, 149], ["models.Embedding.__init__", "models.IPDS.initialization", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.data.GraphDataset.__init__", "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.Embedding.initialization"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "IPDS", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "if", "opt", "[", "\"data_vectors\"", "]", "is", "None", ":", "\n", "            ", "self", ".", "U", "=", "nn", ".", "Embedding", "(", "\n", "opt", "[", "\"train_node_num\"", "]", ",", "\n", "opt", "[", "\"parameter_num\"", "]", "-", "opt", "[", "\"neg_dim\"", "]", "\n", ")", "\n", "self", ".", "U_neg", "=", "nn", ".", "Embedding", "(", "\n", "opt", "[", "\"train_node_num\"", "]", ",", "\n", "opt", "[", "\"neg_dim\"", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "U", "=", "nn", ".", "Linear", "(", "opt", "[", "\"hidden_size\"", "]", ",", "opt", "[", "\"parameter_num\"", "]", "-", "opt", "[", "\"neg_dim\"", "]", ")", "\n", "self", ".", "U_neg", "=", "nn", ".", "Linear", "(", "opt", "[", "\"hidden_size\"", "]", ",", "opt", "[", "\"neg_dim\"", "]", ")", "\n", "", "self", ".", "initialization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.IPDS.distfn": [[150, 153], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "distfn", "(", "self", ",", "input", ")", ":", "\n", "        ", "u", ",", "u_neg", ",", "v", ",", "v_neg", "=", "input", "\n", "return", "-", "(", "torch", ".", "sum", "(", "u", "*", "v", ",", "dim", "=", "-", "1", ")", "-", "torch", ".", "sum", "(", "u_neg", "*", "v_neg", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.IPDS.forward": [[154, 164], ["models.IPDS.U_NN", "models.IPDS.U", "models.IPDS.U_neg", "models.IPDS.narrow", "models.IPDS.narrow().expand_as", "models.IPDS.narrow", "models.IPDS.narrow().expand_as", "models.IPDS.distfn().squeeze", "models.IPDS.data_vectors", "models.IPDS.size", "models.IPDS.narrow", "models.IPDS.size", "models.IPDS.narrow", "models.IPDS.distfn"], "methods", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.models.NPD.distfn"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "inputs", "=", "self", ".", "U_NN", "(", "self", ".", "data_vectors", "(", "inputs", ")", ")", "\n", "u", "=", "self", ".", "U", "(", "inputs", ")", "\n", "u_neg", "=", "self", ".", "U_neg", "(", "inputs", ")", "\n", "ui", "=", "u", ".", "narrow", "(", "1", ",", "1", ",", "u", ".", "size", "(", "1", ")", "-", "1", ")", "\n", "uj", "=", "u", ".", "narrow", "(", "1", ",", "0", ",", "1", ")", ".", "expand_as", "(", "ui", ")", "\n", "u_negi", "=", "u_neg", ".", "narrow", "(", "1", ",", "1", ",", "u_neg", ".", "size", "(", "1", ")", "-", "1", ")", "\n", "u_negj", "=", "u_neg", ".", "narrow", "(", "1", ",", "0", ",", "1", ")", ".", "expand_as", "(", "u_negi", ")", "\n", "dists", "=", "self", ".", "distfn", "(", "[", "ui", ",", "u_negi", ",", "uj", ",", "u_negj", "]", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "return", "-", "dists", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.IPDS.embed": [[165, 168], ["models.IPDS.U_NN", "models.IPDS.U().data.cpu().numpy", "models.IPDS.U_neg().data.cpu().numpy", "models.IPDS.data_vectors.state_dict", "models.IPDS.U().data.cpu", "models.IPDS.U_neg().data.cpu", "models.IPDS.U", "models.IPDS.U_neg"], "methods", ["None"], ["", "def", "embed", "(", "self", ")", ":", "\n", "        ", "tmp", "=", "self", ".", "U_NN", "(", "self", ".", "data_vectors", ".", "state_dict", "(", ")", "[", "'weight'", "]", ")", "\n", "return", "[", "self", ".", "U", "(", "tmp", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "U_neg", "(", "tmp", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.NPD.__init__": [[177, 189], ["models.Embedding.__init__", "models.NPD.initialization", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.data.GraphDataset.__init__", "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.Embedding.initialization"], ["def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "super", "(", "NPD", ",", "self", ")", ".", "__init__", "(", "opt", ")", "\n", "self", ".", "dist", "=", "PDF", "\n", "if", "opt", "[", "\"data_vectors\"", "]", "is", "None", ":", "\n", "            ", "self", ".", "U", "=", "nn", ".", "Embedding", "(", "\n", "opt", "[", "\"train_node_num\"", "]", ",", "\n", "opt", "[", "\"parameter_num\"", "]", ",", "\n", "max_norm", "=", "1", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "U", "=", "nn", ".", "Linear", "(", "opt", "[", "\"hidden_size\"", "]", ",", "opt", "[", "\"parameter_num\"", "]", ")", "\n", "", "self", ".", "initialization", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.NPD.distfn": [[190, 193], ["models.NPD.dist"], "methods", ["None"], ["", "def", "distfn", "(", "self", ",", "input", ")", ":", "\n", "        ", "s", ",", "o", "=", "input", "\n", "return", "self", ".", "dist", "(", ")", "(", "s", ",", "o", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.NPD.forward": [[194, 206], ["models.NPD.U", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "models.NPD.narrow", "models.NPD.narrow().expand_as", "models.NPD.distfn().squeeze", "models.NPD.U_NN", "mask.type", "models.NPD.clone", "f.unsqueeze", "models.NPD.data_vectors", "torch.norm.type", "torch.norm.type", "models.NPD.size", "models.NPD.narrow", "models.NPD.distfn"], "methods", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.models.NPD.distfn"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "e", "=", "self", ".", "U", "(", "self", ".", "U_NN", "(", "self", ".", "data_vectors", "(", "inputs", ")", ")", ")", "\n", "n", "=", "torch", ".", "norm", "(", "e", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "mask", "=", "(", "n", ">=", "1.0", ")", "\n", "f", "=", "n", "*", "mask", ".", "type", "(", "n", ".", "type", "(", ")", ")", "\n", "f", "[", "f", "!=", "0", "]", "/=", "(", "1.0", "-", "eps", ")", "\n", "f", "[", "f", "==", "0", "]", "=", "1.0", "\n", "e", "=", "e", ".", "clone", "(", ")", "/", "f", ".", "unsqueeze", "(", "2", ")", "\n", "o", "=", "e", ".", "narrow", "(", "1", ",", "1", ",", "e", ".", "size", "(", "1", ")", "-", "1", ")", "\n", "s", "=", "e", ".", "narrow", "(", "1", ",", "0", ",", "1", ")", ".", "expand_as", "(", "o", ")", "\n", "dists", "=", "self", ".", "distfn", "(", "[", "s", ",", "o", "]", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "return", "-", "dists", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.NPD.embed": [[207, 216], ["models.NPD.U", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "models.NPD.U_NN", "mask.type", "models.NPD.clone", "f.unsqueeze", "models.NPD.data.cpu().numpy", "torch.norm.type", "torch.norm.type", "models.NPD.data_vectors.state_dict", "models.NPD.data.cpu"], "methods", ["None"], ["", "def", "embed", "(", "self", ")", ":", "\n", "        ", "e", "=", "self", ".", "U", "(", "self", ".", "U_NN", "(", "self", ".", "data_vectors", ".", "state_dict", "(", ")", "[", "'weight'", "]", ")", ")", "\n", "n", "=", "torch", ".", "norm", "(", "e", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "mask", "=", "(", "n", ">=", "1.0", ")", "\n", "f", "=", "n", "*", "mask", ".", "type", "(", "n", ".", "type", "(", ")", ")", "\n", "f", "[", "f", "!=", "0", "]", "/=", "(", "1.0", "-", "eps", ")", "\n", "f", "[", "f", "==", "0", "]", "=", "1.0", "\n", "e", "=", "e", ".", "clone", "(", ")", "/", "f", ".", "unsqueeze", "(", "1", ")", "\n", "return", "[", "e", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.PDF.grad": [[225, 234], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze", "torch.clamp().unsqueeze.expand_as", "torch.clamp().unsqueeze.expand_as", "alpha.unsqueeze().expand_as", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "alpha.unsqueeze", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["def", "grad", "(", "self", ",", "x", ",", "v", ",", "sqnormx", ",", "sqnormv", ",", "sqdist", ")", ":", "\n", "        ", "alpha", "=", "(", "1", "-", "sqnormx", ")", "\n", "beta", "=", "(", "1", "-", "sqnormv", ")", "\n", "z", "=", "1", "+", "2", "*", "sqdist", "/", "(", "alpha", "*", "beta", ")", "\n", "a", "=", "(", "(", "sqnormv", "-", "2", "*", "torch", ".", "sum", "(", "x", "*", "v", ",", "dim", "=", "-", "1", ")", "+", "1", ")", "/", "torch", ".", "pow", "(", "alpha", ",", "2", ")", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "a", "=", "a", "*", "x", "-", "v", "/", "alpha", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand_as", "(", "v", ")", "\n", "z", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "z", ",", "2", ")", "-", "1", ")", "\n", "z", "=", "torch", ".", "clamp", "(", "z", "*", "beta", ",", "min", "=", "self", ".", "eps", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "return", "4", "*", "a", "/", "z", ".", "expand_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.PDF.forward": [[235, 243], ["models.PDF.save_for_backward", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "u", ",", "v", ")", ":", "\n", "        ", "self", ".", "save_for_backward", "(", "u", ",", "v", ")", "\n", "self", ".", "squnorm", "=", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "u", "*", "u", ",", "dim", "=", "-", "1", ")", ",", "0", ",", "1", "-", "self", ".", "eps", ")", "\n", "self", ".", "sqvnorm", "=", "torch", ".", "clamp", "(", "torch", ".", "sum", "(", "v", "*", "v", ",", "dim", "=", "-", "1", ")", ",", "0", ",", "1", "-", "self", ".", "eps", ")", "\n", "self", ".", "sqdist", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "u", "-", "v", ",", "2", ")", ",", "dim", "=", "-", "1", ")", "\n", "x", "=", "self", ".", "sqdist", "/", "(", "(", "1", "-", "self", ".", "squnorm", ")", "*", "(", "1", "-", "self", ".", "sqvnorm", ")", ")", "*", "2", "+", "1", "\n", "z", "=", "torch", ".", "sqrt", "(", "torch", ".", "pow", "(", "x", ",", "2", ")", "-", "1", ")", "\n", "return", "torch", ".", "log", "(", "x", "+", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.PDF.backward": [[244, 250], ["g.unsqueeze.unsqueeze.unsqueeze", "models.PDF.grad", "models.PDF.grad", "g.unsqueeze.unsqueeze.expand_as", "g.unsqueeze.unsqueeze.expand_as"], "methods", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.models.PDF.grad", "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.PDF.grad"], ["", "def", "backward", "(", "self", ",", "g", ")", ":", "\n", "        ", "u", ",", "v", "=", "self", ".", "saved_tensors", "\n", "g", "=", "g", ".", "unsqueeze", "(", "-", "1", ")", "\n", "gu", "=", "self", ".", "grad", "(", "u", ",", "v", ",", "self", ".", "squnorm", ",", "self", ".", "sqvnorm", ",", "self", ".", "sqdist", ")", "\n", "gv", "=", "self", ".", "grad", "(", "v", ",", "u", ",", "self", ".", "sqvnorm", ",", "self", ".", "squnorm", ",", "self", ".", "sqdist", ")", "\n", "return", "g", ".", "expand_as", "(", "gu", ")", "*", "gu", ",", "g", ".", "expand_as", "(", "gv", ")", "*", "gv", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.main.main": [[13, 103], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "torch.manual_seed", "torch.manual_seed", "torch.cuda.is_available", "torch.cuda.is_available", "numpy.random.seed", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.set_default_tensor_type", "torch.set_default_tensor_type", "logging.getLogger", "logging.FileHandler", "logging.StreamHandler", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger.setLevel", "logging.getLogger.info", "data.GraphDataset", "model.cuda.named_parameters", "sum", "torch.optim.Adam", "train.trainer", "random.randint", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "str().replace", "data.preprocess_hirearchy", "int", "getattr", "model.cuda.cuda", "str().replace", "data.preprocess_co_author_network", "numpy.round", "filtered_parameters.append", "numpy.prod", "str", "str", "data.preprocess_webkb_network", "p.size", "filter", "str", "datetime.datetime.now", "model.cuda.parameters", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.train.trainer", "home.repos.pwc.inspect_result.kdrl_WIPS.None.data.preprocess_hirearchy", "home.repos.pwc.inspect_result.kdrl_WIPS.None.data.preprocess_co_author_network", "home.repos.pwc.inspect_result.kdrl_WIPS.None.data.preprocess_webkb_network"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'-debug'", ",", "help", "=", "'Print debug output'", ",", "action", "=", "'store_true'", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-save_dir'", ",", "help", "=", "'Path for saving checkpoints'", ",", "type", "=", "str", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'-exp_name'", ",", "help", "=", "'Experiment name'", ",", "type", "=", "str", ",", "default", "=", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "'-graph_type'", ",", "help", "=", "'Graph type: \"webkb\", \"collab\" or \"hirearchy\"'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "choices", "=", "[", "\"hirearchy\"", ",", "\"collab\"", ",", "\"webkb\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "'-neproc'", ",", "help", "=", "'Number of eval processes'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'-seed'", ",", "help", "=", "'Random seed'", ",", "type", "=", "int", ",", "required", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-dblp_path'", ",", "help", "=", "'dblp_path'", ",", "type", "=", "str", ",", "required", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-webkb_path'", ",", "help", "=", "'webkb_path'", ",", "type", "=", "str", ",", "required", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-word2vec_path'", ",", "help", "=", "'word2vec_path'", ",", "type", "=", "str", ",", "required", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-iter'", ",", "help", "=", "'Number of iterations'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'-eval_each'", ",", "help", "=", "'Run evaluation at every n-th iter'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "'-init_lr'", ",", "help", "=", "'Initial learning rate'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'-batchsize'", ",", "help", "=", "'Batchsize'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'-negs'", ",", "help", "=", "'Number of negative samples'", ",", "type", "=", "int", ",", "default", "=", "10", ")", "\n", "parser", ".", "add_argument", "(", "'-smoothing_rate_for_node'", ",", "help", "=", "'Smoothing rate for the negative sampling'", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-hidden_layer_num'", ",", "help", "=", "'Number of hidden layers'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'-hidden_size'", ",", "help", "=", "'Number of units in a hidden layer'", ",", "type", "=", "int", ",", "default", "=", "2000", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-model_name'", ",", "help", "=", "'Model: \"IPS\", \"SIPS\", \"NPD\", \"IPDS\" or \"WIPS\"'", ",", "type", "=", "str", ",", "required", "=", "True", ",", "choices", "=", "[", "\"IPS\"", ",", "\"SIPS\"", ",", "\"NPD\"", ",", "\"IPDS\"", ",", "\"WIPS\"", "]", ")", "\n", "parser", ".", "add_argument", "(", "'-task'", ",", "help", "=", "''", ",", "type", "=", "str", ",", "default", "=", "\"reconst\"", ")", "\n", "parser", ".", "add_argument", "(", "'-parameter_num'", ",", "help", "=", "'Parameter number K for each node'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'-neg_ratio'", ",", "help", "=", "'Dimension ratio for negative IPS in IPDS'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "required", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'-neg_dim'", ",", "help", "=", "'Dimension for negative IPS in IPDS'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "required", "=", "False", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "opt", ".", "seed", "==", "None", ":", "opt", ".", "seed", "=", "random", ".", "randint", "(", "1", ",", "1000000", ")", "\n", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "opt", ".", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "opt", ".", "cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "opt", ".", "seed", ")", "\n", "", "np", ".", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "random", ".", "seed", "(", "opt", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "opt", ".", "seed", ")", "\n", "\n", "torch", ".", "set_default_tensor_type", "(", "'torch.FloatTensor'", ")", "\n", "opt", ".", "exp_name", "+=", "\"@\"", "+", "str", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "if", "opt", ".", "debug", ":", "log_level", "=", "logging", ".", "DEBUG", "\n", "else", ":", "log_level", "=", "logging", ".", "INFO", "\n", "log", "=", "logging", ".", "getLogger", "(", "opt", ".", "exp_name", ")", "\n", "fileHandler", "=", "logging", ".", "FileHandler", "(", "f'{opt.save_dir}/{opt.exp_name}.log'", ")", "\n", "streamHandler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "log", ".", "addHandler", "(", "fileHandler", ")", "\n", "log", ".", "addHandler", "(", "streamHandler", ")", "\n", "log", ".", "setLevel", "(", "log_level", ")", "\n", "\n", "log", ".", "info", "(", "f\"Experiment {opt.exp_name} start with the following setting:\\n{str(opt.__dict__)}\"", ")", "\n", "\n", "if", "opt", ".", "graph_type", "==", "\"hirearchy\"", ":", "\n", "        ", "word2id", ",", "id2freq", ",", "edges2freq", ",", "vectors", "=", "data", ".", "preprocess_hirearchy", "(", "opt", ".", "word2vec_path", ",", "use_rich_information", "=", "False", ")", "\n", "", "elif", "opt", ".", "graph_type", "==", "\"collab\"", ":", "\n", "        ", "word2id", ",", "id2freq", ",", "edges2freq", ",", "vectors", "=", "data", ".", "preprocess_co_author_network", "(", "opt", ".", "dblp_path", ")", "\n", "", "elif", "opt", ".", "graph_type", "==", "\"webkb\"", ":", "\n", "        ", "word2id", ",", "id2freq", ",", "edges2freq", ",", "vectors", "=", "data", ".", "preprocess_webkb_network", "(", "opt", ".", "webkb_path", ")", "\n", "\n", "", "dataset", "=", "data", ".", "GraphDataset", "(", "word2id", ",", "id2freq", ",", "edges2freq", ",", "opt", ".", "negs", ",", "opt", ".", "smoothing_rate_for_node", ",", "vectors", ",", "opt", ".", "task", ",", "opt", ".", "seed", ")", "\n", "opt", ".", "data_vectors", "=", "dataset", ".", "data_vectors", "\n", "opt", ".", "total_node_num", "=", "dataset", ".", "total_node_num", "\n", "opt", ".", "train_node_num", "=", "dataset", ".", "train_node_num", "\n", "\n", "if", "opt", ".", "model_name", "==", "\"IPDS\"", ":", "\n", "        ", "if", "opt", ".", "neg_dim", "==", "0", ":", "\n", "          ", "opt", ".", "neg_dim", "=", "np", ".", "round", "(", "opt", ".", "neg_ratio", "*", "opt", ".", "parameter_num", ")", "\n", "", "if", "opt", ".", "neg_dim", "==", "0", ":", "opt", ".", "neg_dim", "=", "1", "\n", "if", "opt", ".", "neg_dim", "==", "opt", ".", "parameter_num", ":", "opt", ".", "neg_dim", "=", "opt", ".", "parameter_num", "-", "1", "\n", "opt", ".", "neg_dim", "=", "int", "(", "opt", ".", "neg_dim", ")", "\n", "\n", "", "model", "=", "getattr", "(", "models", ",", "opt", ".", "model_name", ")", "(", "opt", ".", "__dict__", ")", "\n", "\n", "filtered_parameters", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "requires_grad", ":", "\n", "            ", "filtered_parameters", ".", "append", "(", "param", ")", "\n", "", "", "params_num", "=", "sum", "(", "[", "np", ".", "prod", "(", "p", ".", "size", "(", ")", ")", "for", "p", "in", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "model", ".", "parameters", "(", ")", ")", "]", ")", "\n", "\n", "if", "opt", ".", "cuda", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", "=", "Adam", "(", "\n", "filtered_parameters", ",", "\n", "lr", "=", "opt", ".", "init_lr", "\n", ")", "\n", "\n", "train", ".", "trainer", "(", "model", ",", "dataset", ",", "lossfn", ",", "optimizer", ",", "opt", ".", "__dict__", ",", "log", ",", "opt", ".", "cuda", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.main.lossfn": [[105, 112], ["preds.narrow", "preds.narrow", "torch.logsigmoid().squeeze().sum", "torch.logsigmoid().squeeze().sum", "preds.size", "torch.logsigmoid().squeeze", "torch.logsigmoid().squeeze", "torch.logsigmoid", "torch.logsigmoid"], "function", ["None"], ["", "def", "lossfn", "(", "preds", ",", "target", ")", ":", "\n", "    ", "pos_score", "=", "preds", ".", "narrow", "(", "1", ",", "0", ",", "1", ")", "\n", "neg_score", "=", "preds", ".", "narrow", "(", "1", ",", "1", ",", "preds", ".", "size", "(", "1", ")", "-", "1", ")", "\n", "pos_loss", "=", "F", ".", "logsigmoid", "(", "pos_score", ")", ".", "squeeze", "(", ")", ".", "sum", "(", ")", "\n", "neg_loss", "=", "F", ".", "logsigmoid", "(", "-", "1", "*", "neg_score", ")", ".", "squeeze", "(", ")", ".", "sum", "(", ")", "\n", "loss", "=", "pos_loss", "+", "neg_loss", "\n", "return", "-", "1", "*", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.train.trainer": [[14, 115], ["torch.utils.data.DataLoader", "timeit.default_timer", "tqdm.tqdm", "tqdm.tqdm.update", "optimizer.zero_grad", "model", "lossfn", "lossfn.backward", "optimizer.step", "train_loss.append", "inputs.cuda.cuda", "targets.cuda.cuda", "lossfn.item", "tqdm.tqdm.close", "model.eval", "train.evaluation", "model.train", "log.info", "numpy.mean", "timeit.default_timer", "log.info", "print", "model.embed", "torch.save", "torch.save", "sys.exit", "model.state_dict", "model.embed", "tqdm.tqdm", "model.state_dict", "numpy.mean", "timeit.default_timer"], "function", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.main.lossfn", "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.PDF.backward", "home.repos.pwc.inspect_result.kdrl_WIPS.None.train.evaluation", "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.NPD.embed", "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.NPD.embed"], ["def", "trainer", "(", "model", ",", "dataset", ",", "lossfn", ",", "optimizer", ",", "opt", ",", "log", ",", "cuda", ")", ":", "\n", "    ", "loader", "=", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "opt", "[", "\"batchsize\"", "]", ",", "\n", "collate_fn", "=", "dataset", ".", "collate", ",", "\n", "sampler", "=", "dataset", ".", "sampler", "\n", ")", "\n", "\n", "max_ROCAUC", "=", "(", "-", "1", ",", "-", "1", ")", "\n", "max_ROCAUC_model", "=", "None", "\n", "max_ROCAUC_model_on_test", "=", "None", "\n", "\n", "iter_counter", "=", "0", "\n", "former_loss", "=", "np", ".", "Inf", "\n", "\n", "t_start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "\n", "assert", "opt", "[", "\"iter\"", "]", "%", "opt", "[", "\"eval_each\"", "]", "==", "0", "\n", "pbar", "=", "tqdm", "(", "total", "=", "opt", "[", "\"eval_each\"", "]", ")", "\n", "\n", "while", "True", ":", "\n", "        ", "train_loss", "=", "[", "]", "\n", "loss", "=", "None", "\n", "\n", "for", "inputs", ",", "targets", "in", "loader", ":", "\n", "            ", "pbar", ".", "update", "(", "1", ")", "\n", "\n", "if", "cuda", ":", "\n", "                ", "inputs", "=", "inputs", ".", "cuda", "(", ")", "\n", "targets", "=", "targets", ".", "cuda", "(", ")", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "preds", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "lossfn", "(", "preds", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "train_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "iter_counter", "+=", "1", "\n", "\n", "if", "iter_counter", "%", "opt", "[", "\"eval_each\"", "]", "==", "0", ":", "\n", "                ", "pbar", ".", "close", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "ROCAUC_train", ",", "ROCAUC_valid", ",", "ROCAUC_test", ",", "eval_elapsed", "=", "evaluation", "(", "model", ",", "dataset", ".", "neighbor_train", ",", "dataset", ".", "neighbor_valid", ",", "dataset", ".", "neighbor_test", ",", "dataset", ".", "task", ",", "log", ",", "opt", "[", "\"neproc\"", "]", ",", "cuda", ",", "True", ")", "\n", "model", ".", "train", "(", ")", "\n", "if", "ROCAUC_valid", ">", "max_ROCAUC", "[", "0", "]", ":", "\n", "                    ", "max_ROCAUC", "=", "(", "ROCAUC_valid", ",", "iter_counter", ")", "\n", "max_ROCAUC_model", "=", "model", ".", "state_dict", "(", ")", "\n", "embeds", "=", "model", ".", "embed", "(", ")", "\n", "max_ROCAUC_model_embed", "=", "embeds", "\n", "max_ROCAUC_model_on_test", "=", "ROCAUC_test", "\n", "\n", "", "log", ".", "info", "(", "\n", "(", "'[%s] Eval: {'", "\n", "'\"iter\": %d, '", "\n", "'\"loss\": %.6f, '", "\n", "'\"elapsed (for %d iter.)\": %.2f, '", "\n", "'\"elapsed (for eval.)\": %.2f, '", "\n", "'\"rocauc_train\": %.6f, '", "\n", "'\"rocauc_valid\": %.6f, '", "\n", "'\"rocauc_test\": %.6f, '", "\n", "'\"best_rocauc_valid\": %.6f, '", "\n", "'\"best_rocauc_valid_iter\": %d, '", "\n", "'\"best_rocauc_valid_test\": %.6f, '", "\n", "'}'", ")", "%", "(", "\n", "opt", "[", "\"exp_name\"", "]", ",", "iter_counter", ",", "np", ".", "mean", "(", "train_loss", ")", ",", "opt", "[", "\"eval_each\"", "]", ",", "timeit", ".", "default_timer", "(", ")", "-", "t_start", ",", "eval_elapsed", ",", "\n", "ROCAUC_train", ",", "ROCAUC_valid", ",", "ROCAUC_test", ",", "max_ROCAUC", "[", "0", "]", ",", "max_ROCAUC", "[", "1", "]", ",", "max_ROCAUC_model_on_test", ",", "\n", ")", "\n", ")", "\n", "\n", "former_loss", "=", "np", ".", "mean", "(", "train_loss", ")", "\n", "train_loss", "=", "[", "]", "\n", "t_start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "if", "iter_counter", "<", "opt", "[", "\"iter\"", "]", ":", "\n", "                    ", "pbar", "=", "tqdm", "(", "total", "=", "opt", "[", "\"eval_each\"", "]", ")", "\n", "\n", "", "", "if", "iter_counter", ">=", "opt", "[", "\"iter\"", "]", ":", "\n", "                ", "log", ".", "info", "(", "\n", "(", "'[%s] RESULT: {'", "\n", "'\"best_rocauc_valid\": %.6f, '", "\n", "'\"best_rocauc_valid_test\": %.6f, '", "\n", "'}'", ")", "%", "(", "\n", "opt", "[", "\"exp_name\"", "]", ",", "\n", "max_ROCAUC", "[", "0", "]", ",", "max_ROCAUC_model_on_test", ",", "\n", ")", "\n", ")", "\n", "\n", "print", "(", "\"\"\" save model \"\"\"", ")", "\n", "embeds", "=", "model", ".", "embed", "(", ")", "\n", "\n", "torch", ".", "save", "(", "{", "\n", "'model'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'node2id'", ":", "dataset", ".", "node2id", ",", "\n", "'data_vectors'", ":", "dataset", ".", "data_vectors", ",", "\n", "'embeds_at_final_iteration'", ":", "embeds", ",", "\n", "'best_rocauc_model'", ":", "max_ROCAUC_model", ",", "\n", "'best_rocauc_valid'", ":", "max_ROCAUC", "[", "0", "]", ",", "\n", "'best_rocauc_valid_embeds'", ":", "max_ROCAUC_model_embed", ",", "\n", "'best_rocauc_valid_test'", ":", "max_ROCAUC_model_on_test", ",", "\n", "'best_rocauc_valid_iteration'", ":", "max_ROCAUC", "[", "1", "]", ",", "\n", "'total_iteration'", ":", "iter_counter", ",", "\n", "}", ",", "f'{opt[\"save_dir\"]}/{opt[\"exp_name\"]}.pth'", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.train.evaluation": [[117, 181], ["timeit.default_timer", "model.embed", "list", "int", "torch.Manager().Queue", "range", "list", "range", "list.copy", "list.copy", "model.get_ips_weight", "log.info", "list.items", "torch.Process", "mp.Process.start", "processes.append", "mp.Manager().Queue.get", "list", "int", "torch.Manager().Queue", "range", "list", "range", "list", "int", "torch.Manager().Queue", "range", "list", "range", "numpy.mean", "numpy.mean", "numpy.mean", "torch.Manager", "list.items", "torch.Process", "mp.Process.start", "processes.append", "mp.Manager().Queue.get", "list.items", "torch.Process", "mp.Process.start", "processes.append", "mp.Manager().Queue.get", "timeit.default_timer", "numpy.sum", "numpy.sum", "len", "torch.Manager", "torch.Manager", "len", "len"], "function", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.models.NPD.embed", "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.WIPS.get_ips_weight"], ["", "", "", "", "def", "evaluation", "(", "model", ",", "neighbor_train", ",", "neighbor_valid", ",", "neighbor_test", ",", "task", ",", "log", ",", "neproc", ",", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "t_start", "=", "timeit", ".", "default_timer", "(", ")", "\n", "\n", "ips_weight", "=", "None", "\n", "\n", "embeds", "=", "model", ".", "embed", "(", ")", "\n", "if", "model", ".", "model", "==", "\"WIPS\"", ":", "\n", "        ", "ips_weight", "=", "model", ".", "get_ips_weight", "(", ")", "\n", "log", ".", "info", "(", "\"WIPS's ips weight's ratio : pos {}, neg {}\"", ".", "format", "(", "np", ".", "sum", "(", "ips_weight", ">=", "0", ")", ",", "np", ".", "sum", "(", "ips_weight", "<", "0", ")", ")", ")", "\n", "\n", "", "neighbor_train", "=", "list", "(", "neighbor_train", ".", "items", "(", ")", ")", "\n", "chunk", "=", "int", "(", "len", "(", "neighbor_train", ")", "/", "neproc", "+", "1", ")", "\n", "queue", "=", "mp", ".", "Manager", "(", ")", ".", "Queue", "(", ")", "\n", "processes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "neproc", ")", ":", "\n", "            ", "p", "=", "mp", ".", "Process", "(", "\n", "target", "=", "eval_thread", ",", "\n", "args", "=", "(", "neighbor_train", "[", "i", "*", "chunk", ":", "(", "i", "+", "1", ")", "*", "chunk", "]", ",", "model", ",", "embeds", ",", "ips_weight", ",", "queue", ",", "cuda", ",", "i", "==", "0", "and", "verbose", ")", "\n", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "", "rocauc_scores_train", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "neproc", ")", ":", "\n", "        ", "rocauc_score", "=", "queue", ".", "get", "(", ")", "\n", "rocauc_scores_train", "+=", "rocauc_score", "\n", "\n", "", "rocauc_scores_valid", "=", "rocauc_scores_train", ".", "copy", "(", ")", "\n", "rocauc_scores_test", "=", "rocauc_scores_train", ".", "copy", "(", ")", "\n", "\n", "if", "neighbor_valid", "is", "not", "None", ":", "\n", "        ", "neighbor_valid", "=", "list", "(", "neighbor_valid", ".", "items", "(", ")", ")", "\n", "chunk", "=", "int", "(", "len", "(", "neighbor_valid", ")", "/", "neproc", "+", "1", ")", "\n", "queue", "=", "mp", ".", "Manager", "(", ")", ".", "Queue", "(", ")", "\n", "processes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "neproc", ")", ":", "\n", "            ", "p", "=", "mp", ".", "Process", "(", "\n", "target", "=", "eval_thread", ",", "\n", "args", "=", "(", "neighbor_valid", "[", "i", "*", "chunk", ":", "(", "i", "+", "1", ")", "*", "chunk", "]", ",", "model", ",", "embeds", ",", "ips_weight", ",", "queue", ",", "cuda", ",", "i", "==", "0", "and", "verbose", ")", "\n", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "", "rocauc_scores_valid", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "neproc", ")", ":", "\n", "            ", "rocauc_score", "=", "queue", ".", "get", "(", ")", "\n", "rocauc_scores_valid", "+=", "rocauc_score", "\n", "\n", "", "", "if", "neighbor_test", "is", "not", "None", ":", "\n", "        ", "neighbor_test", "=", "list", "(", "neighbor_test", ".", "items", "(", ")", ")", "\n", "chunk", "=", "int", "(", "len", "(", "neighbor_test", ")", "/", "neproc", "+", "1", ")", "\n", "queue", "=", "mp", ".", "Manager", "(", ")", ".", "Queue", "(", ")", "\n", "processes", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "neproc", ")", ":", "\n", "            ", "p", "=", "mp", ".", "Process", "(", "\n", "target", "=", "eval_thread", ",", "\n", "args", "=", "(", "neighbor_test", "[", "i", "*", "chunk", ":", "(", "i", "+", "1", ")", "*", "chunk", "]", ",", "model", ",", "embeds", ",", "ips_weight", ",", "queue", ",", "cuda", ",", "i", "==", "0", "and", "verbose", ")", "\n", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "", "rocauc_scores_test", "=", "list", "(", ")", "\n", "for", "i", "in", "range", "(", "neproc", ")", ":", "\n", "            ", "rocauc_score", "=", "queue", ".", "get", "(", ")", "\n", "rocauc_scores_test", "+=", "rocauc_score", "\n", "\n", "", "", "return", "np", ".", "mean", "(", "rocauc_scores_train", ")", ",", "np", ".", "mean", "(", "rocauc_scores_valid", ")", ",", "np", ".", "mean", "(", "rocauc_scores_test", ")", ",", "timeit", ".", "default_timer", "(", ")", "-", "t_start", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.train.eval_thread": [[183, 223], ["queue.put", "torch.from_numpy", "torch.from_numpy", "torch.no_grad", "torch.no_grad", "range", "tqdm.tqdm", "torch.tensor", "torch.tensor", "numpy.zeros", "sklearn.metrics.roc_auc_score", "rocauc_scores.append", "tqdm.tqdm.close", "len", "embeddings.append", "torch.autograd.Variable", "tqdm.tqdm.update", "torch.no_grad", "torch.no_grad", "range", "torch.tensor", "torch.tensor", "torch.autograd.Variable", "torch.from_numpy", "torch.from_numpy", "len", "len", "target_embeddings.append", "model.distfn().data.cpu().numpy().flatten", "model.distfn().data.cpu().numpy().flatten", "model.distfn().data.numpy().flatten", "model.distfn().data.numpy().flatten", "torch.autograd.Variable", "[].expand_as", "model.distfn().data.cpu().numpy", "model.distfn().data.cpu().numpy", "model.distfn().data.numpy", "model.distfn().data.numpy", "model.distfn().data.cpu", "model.distfn().data.cpu", "model.distfn", "model.distfn", "model.distfn", "model.distfn"], "function", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.models.NPD.distfn", "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.NPD.distfn", "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.NPD.distfn", "home.repos.pwc.inspect_result.kdrl_WIPS.None.models.NPD.distfn"], ["", "def", "eval_thread", "(", "neighbor_thread", ",", "model", ",", "embeds", ",", "ips_weight", ",", "queue", ",", "cuda", ",", "verbose", ")", ":", "\n", "    ", "embeds", "=", "[", "torch", ".", "from_numpy", "(", "i", ")", "for", "i", "in", "embeds", "]", "\n", "embeddings", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "embeds", ")", ")", ":", "\n", "            ", "embeddings", ".", "append", "(", "Variable", "(", "embeds", "[", "i", "]", ")", ")", "\n", "", "if", "ips_weight", "is", "not", "None", ":", "\n", "            ", "ips_weight", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "ips_weight", ")", ")", "\n", "", "", "rocauc_scores", "=", "[", "]", "\n", "if", "verbose", ":", "bar", "=", "tqdm", "(", "desc", "=", "'Eval'", ",", "total", "=", "len", "(", "neighbor_thread", ")", ",", "mininterval", "=", "1", ",", "bar_format", "=", "'{desc}: {percentage:3.0f}% ({remaining} left)'", ")", "\n", "for", "_s", ",", "s_neighbor", "in", "neighbor_thread", ":", "\n", "        ", "if", "verbose", ":", "bar", ".", "update", "(", ")", "\n", "s", "=", "torch", ".", "tensor", "(", "_s", ")", "\n", "target_embeddings", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "embeds", ")", ")", ":", "\n", "                ", "target_embeddings", ".", "append", "(", "Variable", "(", "embeds", "[", "i", "]", "[", "s", "]", ".", "expand_as", "(", "embeddings", "[", "i", "]", ")", ")", ")", "\n", "", "", "if", "cuda", ":", "\n", "            ", "input_embeddings", "=", "target_embeddings", "+", "embeddings", "\n", "if", "ips_weight", "is", "not", "None", ":", "\n", "                ", "_dists", "=", "model", ".", "distfn", "(", "input_embeddings", ",", "w", "=", "ips_weight", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "", "else", ":", "\n", "                ", "_dists", "=", "model", ".", "distfn", "(", "input_embeddings", ")", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "", "node_num", "=", "model", ".", "total_node_num", "\n", "", "else", ":", "\n", "            ", "input_embeddings", "=", "target_embeddings", "+", "embeddings", "\n", "if", "ips_weight", "is", "not", "None", ":", "\n", "                ", "_dists", "=", "model", ".", "distfn", "(", "input_embeddings", ",", "w", "=", "ips_weight", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "", "else", ":", "\n", "                ", "_dists", "=", "model", ".", "distfn", "(", "input_embeddings", ")", ".", "data", ".", "numpy", "(", ")", ".", "flatten", "(", ")", "\n", "", "node_num", "=", "model", ".", "total_node_num", "\n", "", "_dists", "[", "s", "]", "=", "1e+12", "\n", "_labels", "=", "np", ".", "zeros", "(", "node_num", ")", "\n", "for", "o", "in", "s_neighbor", ":", "\n", "            ", "o", "=", "torch", ".", "tensor", "(", "o", ")", "\n", "_labels", "[", "o", "]", "=", "1", "\n", "", "_rocauc_scores", "=", "roc_auc_score", "(", "_labels", ",", "-", "_dists", ")", "\n", "rocauc_scores", ".", "append", "(", "_rocauc_scores", ")", "\n", "", "if", "verbose", ":", "bar", ".", "close", "(", ")", "\n", "queue", ".", "put", "(", "rocauc_scores", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.data.EdgeSampler.__init__": [[15, 34], ["len", "int", "numpy.zeros", "tqdm.tqdm.tqdm", "c.sum", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "edges", ",", "edge_freq", ",", "smoothing_rate_for_edge", ",", "edge_table_size", ",", "node_freq", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "self", ".", "edge_num", "=", "len", "(", "edges", ")", "\n", "self", ".", "edge_freq", "=", "edge_freq", "\n", "self", ".", "smoothing_rate_for_edge", "=", "smoothing_rate_for_edge", "\n", "self", ".", "edge_table_size", "=", "int", "(", "edge_table_size", ")", "\n", "\n", "c", "=", "self", ".", "edge_freq", "**", "self", ".", "smoothing_rate_for_edge", "\n", "\n", "self", ".", "sample_edge_table", "=", "np", ".", "zeros", "(", "self", ".", "edge_table_size", ",", "dtype", "=", "int", ")", "\n", "index", "=", "0", "\n", "p", "=", "c", "/", "c", ".", "sum", "(", ")", "\n", "d", "=", "p", "[", "index", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "self", ".", "edge_table_size", ")", ")", ":", "\n", "            ", "self", ".", "sample_edge_table", "[", "i", "]", "=", "index", "\n", "if", "i", "/", "self", ".", "edge_table_size", ">", "d", ":", "\n", "                ", "index", "+=", "1", "\n", "d", "+=", "p", "[", "index", "]", "\n", "", "if", "index", ">=", "self", ".", "edge_num", ":", "\n", "                ", "index", "=", "self", ".", "edge_num", "-", "1", ";", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.data.EdgeSampler.__iter__": [[35, 37], ["torch.randperm"], "methods", ["None"], ["", "", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "(", "self", ".", "sample_edge_table", "[", "i", "]", "for", "i", "in", "torch", ".", "randperm", "(", "self", ".", "edge_table_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.data.EdgeSampler.__len__": [[38, 40], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "edge_table_size", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.data.GraphDataset.__init__": [[48, 161], ["numpy.zeros", "tqdm.tqdm.tqdm", "data.EdgeSampler", "sklearn.model_selection.train_test_split", "sklearn.model_selection.train_test_split", "set", "list", "set", "set", "print", "collections.defaultdict", "numpy.empty", "dict", "dict", "list", "list", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "edges2freq.items", "numpy.array", "dict", "dict", "dict", "len", "len", "len", "len", "numpy.array", "numpy.array", "c.sum", "range", "list", "list.append", "len", "list", "list", "edges2freq.items", "numpy.array", "numpy.array", "len", "numpy.zeros", "id2freq.items", "collections.defaultdict", "dict", "node2id.keys", "len", "set", "set", "set", "numpy.array.append", "list.append", "neighbor_train[].add", "neighbor_train[].add", "data.GraphDataset.edges.append", "data.GraphDataset.edge_freq.append", "data.GraphDataset.neighbor_train[].add", "data.GraphDataset.neighbor_train[].add", "len", "len", "len", "len", "node2id.items", "set", "neighbor_test[].add", "neighbor_test[].add", "neighbor_valid[].add", "neighbor_valid[].add"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "node2id", ",", "id2freq", ",", "edges2freq", ",", "nnegs", ",", "smoothing_rate_for_node", ",", "data_vectors", "=", "None", ",", "task", "=", "\"reconst\"", ",", "seed", "=", "0", ")", ":", "\n", "        ", "assert", "task", "in", "[", "\"reconst\"", ",", "\"linkpred\"", "]", "\n", "\n", "self", ".", "smoothing_rate_for_node", "=", "smoothing_rate_for_node", "\n", "self", ".", "nnegs", "=", "nnegs", "\n", "self", ".", "task", "=", "task", "\n", "\n", "if", "task", "==", "\"linkpred\"", ":", "\n", "            ", "assert", "data_vectors", "is", "not", "None", "\n", "train_node", ",", "test_node", "=", "train_test_split", "(", "list", "(", "node2id", ".", "keys", "(", ")", ")", ",", "test_size", "=", "0.2", ",", "random_state", "=", "seed", ")", "\n", "train_node", ",", "valid_node", "=", "train_test_split", "(", "train_node", ",", "test_size", "=", "0.2", ",", "random_state", "=", "seed", ")", "\n", "train_node_set", "=", "set", "(", "train_node", ")", "\n", "node_freq", "=", "list", "(", ")", "\n", "valid_node_set", "=", "set", "(", "valid_node", ")", "\n", "test_node_set", "=", "set", "(", "test_node", ")", "\n", "print", "(", "f\"len(train_node) : {len(train_node)}, len(valid_node) : {len(valid_node)}, len(test_node) : {len(test_node)}\"", ")", "\n", "new_node2id", "=", "defaultdict", "(", "lambda", ":", "len", "(", "new_node2id", ")", ")", "\n", "new_data_vectors", "=", "np", ".", "empty", "(", "data_vectors", ".", "shape", ")", "\n", "for", "i", "in", "train_node", ":", "\n", "                ", "new_data_vectors", "[", "new_node2id", "[", "i", "]", "]", "=", "data_vectors", "[", "node2id", "[", "i", "]", "]", "\n", "node_freq", ".", "append", "(", "id2freq", "[", "node2id", "[", "i", "]", "]", ")", "\n", "", "for", "i", "in", "valid_node", ":", "new_data_vectors", "[", "new_node2id", "[", "i", "]", "]", "=", "data_vectors", "[", "node2id", "[", "i", "]", "]", "\n", "for", "i", "in", "test_node", ":", "new_data_vectors", "[", "new_node2id", "[", "i", "]", "]", "=", "data_vectors", "[", "node2id", "[", "i", "]", "]", "\n", "new_node2id", "=", "dict", "(", "new_node2id", ")", "\n", "\n", "id2node", "=", "dict", "(", "(", "y", ",", "x", ")", "for", "x", ",", "y", "in", "node2id", ".", "items", "(", ")", ")", "\n", "train_edges", "=", "list", "(", ")", "\n", "edge_freq", "=", "list", "(", ")", "\n", "\n", "neighbor_train", "=", "defaultdict", "(", "lambda", ":", "set", "(", ")", ")", "\n", "neighbor_valid", "=", "defaultdict", "(", "lambda", ":", "set", "(", ")", ")", "\n", "neighbor_test", "=", "defaultdict", "(", "lambda", ":", "set", "(", ")", ")", "\n", "\n", "for", "edge", ",", "edgefreq", "in", "edges2freq", ".", "items", "(", ")", ":", "\n", "                ", "i", ",", "j", "=", "[", "id2node", "[", "k", "]", "for", "k", "in", "edge", "]", "\n", "if", "i", "in", "train_node_set", "and", "j", "in", "train_node_set", ":", "\n", "                    ", "train_edges", ".", "append", "(", "(", "new_node2id", "[", "i", "]", ",", "new_node2id", "[", "j", "]", ")", ")", "\n", "edge_freq", ".", "append", "(", "edgefreq", ")", "\n", "neighbor_train", "[", "new_node2id", "[", "i", "]", "]", ".", "add", "(", "new_node2id", "[", "j", "]", ")", "\n", "neighbor_train", "[", "new_node2id", "[", "j", "]", "]", ".", "add", "(", "new_node2id", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                    ", "if", "i", "in", "test_node_set", "or", "j", "in", "test_node_set", ":", "\n", "                        ", "if", "i", "in", "test_node_set", ":", "\n", "                            ", "neighbor_test", "[", "new_node2id", "[", "i", "]", "]", ".", "add", "(", "new_node2id", "[", "j", "]", ")", "\n", "", "if", "j", "in", "test_node_set", ":", "\n", "                            ", "neighbor_test", "[", "new_node2id", "[", "j", "]", "]", ".", "add", "(", "new_node2id", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "                        ", "if", "i", "in", "valid_node_set", ":", "\n", "                            ", "neighbor_valid", "[", "new_node2id", "[", "i", "]", "]", ".", "add", "(", "new_node2id", "[", "j", "]", ")", "\n", "", "if", "j", "in", "valid_node_set", ":", "\n", "                            ", "neighbor_valid", "[", "new_node2id", "[", "j", "]", "]", ".", "add", "(", "new_node2id", "[", "i", "]", ")", "\n", "\n", "", "", "", "", "train_edges", "=", "np", ".", "array", "(", "train_edges", ",", "dtype", "=", "np", ".", "int", ")", "\n", "neighbor_train", "=", "dict", "(", "neighbor_train", ")", "\n", "neighbor_valid", "=", "dict", "(", "neighbor_valid", ")", "\n", "neighbor_test", "=", "dict", "(", "neighbor_test", ")", "\n", "\n", "self", ".", "node2id", "=", "new_node2id", "\n", "self", ".", "data_vectors", "=", "new_data_vectors", "\n", "self", ".", "total_node_num", "=", "len", "(", "node2id", ")", "\n", "self", ".", "train_node_num", "=", "len", "(", "train_node", ")", "\n", "self", ".", "edges", "=", "train_edges", "\n", "self", ".", "total_edge_num", "=", "len", "(", "edges2freq", ")", "\n", "self", ".", "train_edge_num", "=", "len", "(", "self", ".", "edges", ")", "\n", "self", ".", "node_freq", "=", "np", ".", "array", "(", "node_freq", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "edge_freq", "=", "np", ".", "array", "(", "edge_freq", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "max_tries", "=", "self", ".", "nnegs", "*", "self", ".", "ntries", "\n", "self", ".", "neighbor_train", "=", "neighbor_train", "\n", "self", ".", "neighbor_valid", "=", "neighbor_valid", "\n", "self", ".", "neighbor_test", "=", "neighbor_test", "\n", "\n", "", "elif", "task", "==", "\"reconst\"", ":", "\n", "            ", "self", ".", "node2id", "=", "node2id", "\n", "self", ".", "data_vectors", "=", "data_vectors", "\n", "self", ".", "total_node_num", "=", "len", "(", "node2id", ")", "\n", "self", ".", "train_node_num", "=", "self", ".", "total_node_num", "\n", "self", ".", "edges", "=", "list", "(", ")", "\n", "self", ".", "edge_freq", "=", "list", "(", ")", "\n", "for", "edge", ",", "freq", "in", "edges2freq", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "edges", ".", "append", "(", "edge", ")", "\n", "self", ".", "edge_freq", ".", "append", "(", "freq", ")", "\n", "", "self", ".", "edges", "=", "np", ".", "array", "(", "self", ".", "edges", ",", "dtype", "=", "np", ".", "int", ")", "\n", "self", ".", "edge_freq", "=", "np", ".", "array", "(", "self", ".", "edge_freq", ",", "dtype", "=", "np", ".", "float", ")", "\n", "self", ".", "total_edge_num", "=", "len", "(", "self", ".", "edges", ")", "\n", "self", ".", "train_edge_num", "=", "self", ".", "total_edge_num", "\n", "self", ".", "node_freq", "=", "np", ".", "zeros", "(", "self", ".", "train_node_num", ",", "dtype", "=", "np", ".", "float", ")", "\n", "for", "i", ",", "f", "in", "id2freq", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "node_freq", "[", "i", "]", "=", "f", "\n", "", "self", ".", "max_tries", "=", "self", ".", "nnegs", "*", "self", ".", "ntries", "\n", "self", ".", "neighbor_train", "=", "defaultdict", "(", "lambda", ":", "set", "(", ")", ")", "\n", "for", "i", ",", "j", "in", "self", ".", "edges", ":", "\n", "                ", "self", ".", "neighbor_train", "[", "i", "]", ".", "add", "(", "j", ")", "\n", "self", ".", "neighbor_train", "[", "j", "]", ".", "add", "(", "i", ")", "\n", "", "self", ".", "neighbor_train", "=", "dict", "(", "self", ".", "neighbor_train", ")", "\n", "self", ".", "neighbor_valid", "=", "None", "\n", "self", ".", "neighbor_test", "=", "None", "\n", "assert", "len", "(", "self", ".", "neighbor_train", ")", "==", "self", ".", "train_node_num", "\n", "\n", "", "c", "=", "self", ".", "node_freq", "**", "self", ".", "smoothing_rate_for_node", "\n", "\n", "self", ".", "sample_node_table", "=", "np", ".", "zeros", "(", "self", ".", "node_table_size", ",", "dtype", "=", "int", ")", "\n", "index", "=", "0", "\n", "p", "=", "c", "/", "c", ".", "sum", "(", ")", "\n", "d", "=", "p", "[", "index", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "self", ".", "node_table_size", ")", ")", ":", "\n", "            ", "self", ".", "sample_node_table", "[", "i", "]", "=", "index", "\n", "if", "i", "/", "self", ".", "node_table_size", ">", "d", ":", "\n", "                ", "index", "+=", "1", "\n", "d", "+=", "p", "[", "index", "]", "\n", "", "if", "index", ">=", "self", ".", "train_node_num", ":", "\n", "                ", "index", "=", "self", ".", "train_node_num", "-", "1", ";", "\n", "\n", "", "", "self", ".", "sampler", "=", "EdgeSampler", "(", "self", ".", "edges", ",", "self", ".", "edge_freq", ",", "self", ".", "smoothing_rate_for_edge", ",", "self", ".", "edge_table_size", ",", "self", ".", "node_freq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.data.GraphDataset.__len__": [[162, 164], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_edge_num", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.data.GraphDataset.__getitem__": [[165, 184], ["set", "int", "numpy.random.randint", "numpy.random.randint", "int", "list", "len", "ix.append", "torch.LongTensor().view", "torch.zeros().long", "len", "set.add", "len", "torch.LongTensor", "torch.zeros", "numpy.random.randint", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "i", ",", "j", "=", "[", "int", "(", "x", ")", "for", "x", "in", "self", ".", "edges", "[", "i", "]", "]", "\n", "if", "np", ".", "random", ".", "randint", "(", "2", ")", "==", "1", ":", "\n", "            ", "i", ",", "j", "=", "j", ",", "i", "\n", "\n", "", "negs", "=", "set", "(", ")", "\n", "ntries", "=", "0", "\n", "nnegs", "=", "self", ".", "nnegs", "\n", "while", "ntries", "<", "self", ".", "max_tries", "and", "len", "(", "negs", ")", "<", "nnegs", ":", "\n", "            ", "n", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "self", ".", "node_table_size", ")", "\n", "n", "=", "int", "(", "self", ".", "sample_node_table", "[", "n", "]", ")", "\n", "if", "n", "!=", "i", "and", "n", "!=", "j", ":", "\n", "                ", "negs", ".", "add", "(", "n", ")", "\n", "", "ntries", "+=", "1", "\n", "", "ix", "=", "[", "i", ",", "j", "]", "+", "list", "(", "negs", ")", "\n", "while", "len", "(", "ix", ")", "<", "nnegs", "+", "2", ":", "\n", "            ", "ix", ".", "append", "(", "ix", "[", "np", ".", "random", ".", "randint", "(", "2", ",", "len", "(", "ix", ")", ")", "]", ")", "\n", "\n", "", "return", "torch", ".", "LongTensor", "(", "ix", ")", ".", "view", "(", "1", ",", "len", "(", "ix", ")", ")", ",", "torch", ".", "zeros", "(", "1", ")", ".", "long", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.data.GraphDataset.collate": [[185, 189], ["zip", "torch.autograd.Variable", "torch.autograd.Variable", "torch.cat", "torch.cat"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "collate", "(", "cls", ",", "batch", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "zip", "(", "*", "batch", ")", "\n", "return", "Variable", "(", "torch", ".", "cat", "(", "inputs", ",", "0", ")", ")", ",", "Variable", "(", "torch", ".", "cat", "(", "targets", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.data.preprocess_hirearchy": [[191, 251], ["gensim.models.KeyedVectors.load_word2vec_format", "set", "dict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "nltk.corpus.wordnet.all_synsets", "dict", "dict", "dict", "numpy.empty", "dict.items", "print", "KeyedVectors.load_word2vec_format.vocab.keys", "word.lower.lower", "tqdm.tqdm", "synset.closure", "synset.instance_hyponyms", "tqdm.tqdm.close", "word.lower.lower", "len", "tqdm.tqdm.update", "data.preprocess_hirearchy._clean"], "function", ["None"], ["", "", "def", "preprocess_hirearchy", "(", "word2vec_path", ",", "use_rich_information", "=", "False", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "if", "word2vec_path", "is", "not", "None", ":", "\n", "        ", "assert", "use_rich_information", "==", "False", "\n", "", "def", "_clean", "(", "word", ")", ":", "\n", "        ", "if", "use_rich_information", ":", "\n", "            ", "return", "word", "\n", "", "else", ":", "\n", "            ", "word", "=", "word", ".", "split", "(", "\".n.\"", ")", "[", "0", "]", "\n", "word", "=", "word", ".", "lower", "(", ")", "\n", "return", "word", "\n", "\n", "", "", "word2vec", "=", "KeyedVectors", ".", "load_word2vec_format", "(", "word2vec_path", ",", "binary", "=", "True", ")", "\n", "word2vec_vocab", "=", "set", "(", "word2vec", ".", "vocab", ".", "keys", "(", ")", ")", "\n", "word2data_vector", "=", "dict", "(", ")", "\n", "for", "word", "in", "word2vec_vocab", ":", "\n", "        ", "lowerword", "=", "word", ".", "lower", "(", ")", "\n", "if", "lowerword", "in", "word2vec_vocab", ":", "\n", "            ", "word2data_vector", "[", "lowerword", "]", "=", "word2vec", "[", "lowerword", "]", "\n", "", "else", ":", "\n", "            ", "word2data_vector", "[", "lowerword", "]", "=", "word2vec", "[", "word", "]", "\n", "\n", "", "", "word2id", "=", "defaultdict", "(", "lambda", ":", "len", "(", "word2id", ")", ")", "\n", "id2freq", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "edges2freq", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "\n", "def", "_memo", "(", "word1", ",", "word2", ")", ":", "\n", "        ", "if", "word1", "in", "word2data_vector", "and", "word2", "in", "word2data_vector", ":", "\n", "            ", "id_1", "=", "word2id", "[", "word1", "]", "\n", "id_2", "=", "word2id", "[", "word2", "]", "\n", "id2freq", "[", "id_1", "]", "+=", "1", "\n", "id2freq", "[", "id_2", "]", "+=", "1", "\n", "if", "id_1", ">", "id_2", ":", "\n", "                ", "id_1", ",", "id_2", "=", "id_2", ",", "id_1", "\n", "", "edges2freq", "[", "(", "id_1", ",", "id_2", ")", "]", "=", "1", "\n", "\n", "", "", "if", "verbose", ":", "pbar", "=", "tqdm", "(", "total", "=", "len", "(", "list", "(", "wn", ".", "all_synsets", "(", "pos", "=", "'n'", ")", ")", ")", ")", "\n", "for", "synset", "in", "wn", ".", "all_synsets", "(", "pos", "=", "'n'", ")", ":", "\n", "        ", "if", "verbose", ":", "pbar", ".", "update", "(", "1", ")", "\n", "for", "hyper", "in", "synset", ".", "closure", "(", "lambda", "s", ":", "s", ".", "hypernyms", "(", ")", ")", ":", "\n", "            ", "word1", "=", "_clean", "(", "hyper", ".", "name", "(", ")", ")", ";", "word2", "=", "_clean", "(", "synset", ".", "name", "(", ")", ")", ";", "_memo", "(", "word1", ",", "word2", ")", "\n", "", "for", "instance", "in", "synset", ".", "instance_hyponyms", "(", ")", ":", "\n", "            ", "for", "hyper", "in", "instance", ".", "closure", "(", "lambda", "s", ":", "s", ".", "instance_hypernyms", "(", ")", ")", ":", "\n", "                ", "word1", "=", "_clean", "(", "hyper", ".", "name", "(", ")", ")", ";", "word2", "=", "_clean", "(", "instance", ".", "name", "(", ")", ")", ";", "_memo", "(", "word1", ",", "word2", ")", "\n", "for", "h", "in", "hyper", ".", "closure", "(", "lambda", "s", ":", "s", ".", "hypernyms", "(", ")", ")", ":", "\n", "                    ", "word1", "=", "_clean", "(", "h", ".", "name", "(", ")", ")", ";", "_memo", "(", "word1", ",", "word2", ")", "\n", "", "", "", "", "if", "verbose", ":", "pbar", ".", "close", "(", ")", "\n", "\n", "word2id", "=", "dict", "(", "word2id", ")", "\n", "id2freq", "=", "dict", "(", "id2freq", ")", "\n", "edges2freq", "=", "dict", "(", "edges2freq", ")", "\n", "vectors", "=", "np", ".", "empty", "(", "(", "len", "(", "word2id", ")", ",", "300", ")", ")", "\n", "for", "word", ",", "index", "in", "word2id", ".", "items", "(", ")", ":", "\n", "        ", "vectors", "[", "index", "]", "=", "word2data_vector", "[", "word", "]", "\n", "\n", "", "print", "(", "f\"\"\"Node num : {len(word2id)},\n    Node frequency max :{np.max(list(id2freq.values()))} min :{np.min(list(id2freq.values()))} mean :{np.mean(list(id2freq.values()))},\n    Edge num : {len(edges2freq)},\n    Edge frequency max :{np.max(list(edges2freq.values()))} min :{np.min(list(edges2freq.values()))} mean :{np.mean(list(edges2freq.values()))}\"\"\"", ")", "\n", "\n", "return", "word2id", ",", "id2freq", ",", "edges2freq", ",", "vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.data.iter_line": [[253, 270], ["open", "type", "line.strip().split", "convert", "line.strip().split", "line.strip", "line.strip"], "function", ["None"], ["", "def", "iter_line", "(", "fname", ",", "sep", "=", "'\\t'", ",", "type", "=", "tuple", ",", "comment", "=", "'#'", ",", "return_idx", "=", "False", ",", "convert", "=", "None", ")", ":", "\n", "    ", "with", "open", "(", "fname", ",", "'r'", ")", "as", "fin", ":", "\n", "        ", "if", "return_idx", ":", "index", "=", "-", "1", "\n", "for", "line", "in", "fin", ":", "\n", "            ", "if", "line", "[", "0", "]", "==", "comment", ":", "\n", "                ", "continue", "\n", "", "if", "convert", "is", "not", "None", ":", "\n", "                ", "d", "=", "[", "convert", "(", "i", ")", "for", "i", "in", "line", ".", "strip", "(", ")", ".", "split", "(", "sep", ")", "]", "\n", "", "else", ":", "\n", "                ", "d", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "sep", ")", "\n", "", "out", "=", "type", "(", "d", ")", "\n", "if", "out", "is", "not", "None", ":", "\n", "                ", "if", "return_idx", ":", "\n", "                    ", "index", "+=", "1", "\n", "yield", "(", "index", ",", "out", ")", "\n", "", "else", ":", "\n", "                    ", "yield", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.data.preprocess_co_author_network": [[272, 302], ["collections.defaultdict", "dict", "data.iter_line", "dict", "numpy.empty", "numpy.array", "data.iter_line", "collections.defaultdict", "dict.items", "dict", "print", "len", "len", "vec.astype", "len", "numpy.max", "numpy.min", "numpy.mean", "len", "numpy.max", "numpy.min", "numpy.mean", "list", "list", "list", "list", "list", "list", "dict.values", "dict.values", "dict.values", "dict.values", "dict.values", "dict.values"], "function", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.data.iter_line", "home.repos.pwc.inspect_result.kdrl_WIPS.None.data.iter_line"], ["", "", "", "", "", "def", "preprocess_co_author_network", "(", "dir_path", ",", "undirect", "=", "True", ",", "seed", "=", "0", ")", ":", "\n", "    ", "author2id", "=", "defaultdict", "(", "lambda", ":", "len", "(", "author2id", ")", ")", "\n", "edges2freq", "=", "dict", "(", ")", "\n", "for", "_i", ",", "_j", "in", "iter_line", "(", "dir_path", "+", "\"/graph_dblp.txt\"", ",", "sep", "=", "'\\t'", ",", "type", "=", "tuple", ",", "convert", "=", "int", ")", ":", "\n", "        ", "i", "=", "author2id", "[", "_i", "]", ";", "j", "=", "author2id", "[", "_j", "]", "\n", "if", "i", ">", "j", ":", "j", ",", "i", "=", "i", ",", "j", "\n", "edges2freq", "[", "(", "i", ",", "j", ")", "]", "=", "1", "\n", "\n", "", "author2id", "=", "dict", "(", "author2id", ")", "\n", "\n", "vectors", "=", "np", ".", "empty", "(", "(", "len", "(", "author2id", ")", ",", "33", ")", ")", "\n", "selected_attributes", "=", "np", ".", "array", "(", "[", "0", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21", ",", "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28", ",", "29", ",", "34", ",", "35", ",", "37", "]", ")", "\n", "for", "i", ",", "vec", "in", "iter_line", "(", "dir_path", "+", "\"/db_normalz_clus.txt\"", ",", "sep", "=", "','", ",", "type", "=", "np", ".", "array", ",", "convert", "=", "float", ",", "return_idx", "=", "True", ")", ":", "\n", "        ", "assert", "vec", ".", "shape", "[", "0", "]", "==", "38", "\n", "if", "i", "in", "author2id", ":", "\n", "            ", "vec", "=", "vec", ".", "astype", "(", "np", ".", "float32", ")", "[", "selected_attributes", "]", "\n", "vectors", "[", "author2id", "[", "i", "]", "]", "=", "vec", "\n", "\n", "", "", "id2freq", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "for", "key", ",", "value", "in", "edges2freq", ".", "items", "(", ")", ":", "\n", "        ", "id2freq", "[", "key", "[", "0", "]", "]", "+=", "value", "\n", "id2freq", "[", "key", "[", "1", "]", "]", "+=", "value", "\n", "", "id2freq", "=", "dict", "(", "id2freq", ")", "\n", "\n", "print", "(", "f\"\"\"Node num : {len(author2id)},\n    Node frequency max :{np.max(list(id2freq.values()))} min :{np.min(list(id2freq.values()))} mean :{np.mean(list(id2freq.values()))},\n    Edge num : {len(edges2freq)},\n    Edge frequency max :{np.max(list(edges2freq.values()))} min :{np.min(list(edges2freq.values()))} mean :{np.mean(list(edges2freq.values()))}\"\"\"", ")", "\n", "\n", "return", "author2id", ",", "id2freq", ",", "edges2freq", ",", "vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.kdrl_WIPS.None.data.preprocess_webkb_network": [[304, 332], ["collections.defaultdict", "dict", "data.iter_line", "dict", "collections.defaultdict", "dict.items", "dict", "numpy.empty", "open().readlines", "print", "line.strip().split", "str", "numpy.array", "len", "len", "open", "len", "line.strip", "int", "len", "numpy.max", "numpy.min", "numpy.mean", "len", "numpy.max", "numpy.min", "numpy.mean", "list", "list", "list", "list", "list", "list", "dict.values", "dict.values", "dict.values", "dict.values", "dict.values", "dict.values"], "function", ["home.repos.pwc.inspect_result.kdrl_WIPS.None.data.iter_line"], ["", "def", "preprocess_webkb_network", "(", "dir_path", ")", ":", "\n", "    ", "node2id", "=", "defaultdict", "(", "lambda", ":", "len", "(", "node2id", ")", ")", "\n", "edges2freq", "=", "dict", "(", ")", "\n", "for", "_i", ",", "_j", "in", "iter_line", "(", "dir_path", "+", "\"/WebKB.cites\"", ",", "sep", "=", "'\\t'", ",", "type", "=", "tuple", ",", "convert", "=", "str", ")", ":", "\n", "        ", "i", "=", "node2id", "[", "_i", "]", ";", "j", "=", "node2id", "[", "_j", "]", "\n", "if", "i", ">", "j", ":", "j", ",", "i", "=", "i", ",", "j", "\n", "edges2freq", "[", "(", "i", ",", "j", ")", "]", "=", "1", "\n", "", "node2id", "=", "dict", "(", "node2id", ")", "\n", "id2freq", "=", "defaultdict", "(", "lambda", ":", "0", ")", "\n", "for", "key", ",", "value", "in", "edges2freq", ".", "items", "(", ")", ":", "\n", "        ", "id2freq", "[", "key", "[", "0", "]", "]", "+=", "value", "\n", "id2freq", "[", "key", "[", "1", "]", "]", "+=", "value", "\n", "", "id2freq", "=", "dict", "(", "id2freq", ")", "\n", "vectors", "=", "np", ".", "empty", "(", "(", "len", "(", "node2id", ")", ",", "1703", ")", ",", "dtype", "=", "np", ".", "float", ")", "\n", "lines", "=", "open", "(", "dir_path", "+", "\"/WebKB.content\"", ")", ".", "readlines", "(", ")", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "elements", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "node", "=", "str", "(", "elements", "[", "0", "]", ")", "\n", "vec", "=", "np", ".", "array", "(", "[", "int", "(", "i", ")", "for", "i", "in", "elements", "[", "1", ":", "-", "1", "]", "]", ",", "dtype", "=", "np", ".", "float", ")", "\n", "assert", "len", "(", "vec", ")", "==", "1703", "\n", "vectors", "[", "node2id", "[", "node", "]", "]", "=", "vec", "\n", "\n", "", "print", "(", "f\"\"\"Node num : {len(node2id)},\n    Node frequency max :{np.max(list(id2freq.values()))} min :{np.min(list(id2freq.values()))} mean :{np.mean(list(id2freq.values()))},\n    Edge num : {len(edges2freq)},\n    Edge frequency max :{np.max(list(edges2freq.values()))} min :{np.min(list(edges2freq.values()))} mean :{np.mean(list(edges2freq.values()))}\"\"\"", ")", "\n", "\n", "return", "node2id", ",", "id2freq", ",", "edges2freq", ",", "vectors", "\n", "", ""]]}