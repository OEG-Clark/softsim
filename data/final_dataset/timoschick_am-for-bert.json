{"home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.EntryResult.__init__": [[25, 30], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "entry", ":", "DatasetEntry", ",", "predictions", ":", "List", "[", "List", "[", "str", "]", "]", ",", "rank", ":", "int", ",", "precision_at", ":", "Dict", "[", "int", ",", "float", "]", ")", ":", "\n", "        ", "self", ".", "entry", "=", "entry", "\n", "self", ".", "predictions", "=", "predictions", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "precision_at", "=", "precision_at", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.EntryResult.to_tsv_str": [[31, 44], ["None"], "methods", ["None"], ["", "def", "to_tsv_str", "(", "self", ",", "use_rank", ":", "bool", ",", "precision_k_values", ":", "List", "[", "int", "]", ")", "->", "str", ":", "\n", "        ", "predictions_str", "=", "[", "','", ".", "join", "(", "pred", ")", "for", "pred", "in", "self", ".", "predictions", "]", "\n", "predictions_str", "=", "' '", ".", "join", "(", "predictions_str", ")", "\n", "\n", "ret", "=", "self", ".", "entry", ".", "base_word", ".", "word", "+", "'\\t'", "+", "self", ".", "entry", ".", "relation", "+", "'\\t'", "+", "' '", ".", "join", "(", "[", "w", ".", "word", "for", "w", "in", "self", ".", "entry", ".", "matching_words", "]", ")", "\n", "if", "use_rank", ":", "\n", "            ", "ret", "+=", "'\\t{}'", ".", "format", "(", "self", ".", "rank", ")", "\n", "", "for", "k", "in", "precision_k_values", ":", "\n", "            ", "ret", "+=", "'\\t{}'", ".", "format", "(", "self", ".", "precision_at", "[", "k", "]", ")", "\n", "", "ret", "+=", "'\\t'", "+", "predictions_str", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.EntryResult.headline_tsv": [[45, 54], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "headline_tsv", "(", "use_rank", ":", "bool", ",", "precision_k_values", ":", "List", "[", "int", "]", ")", ":", "\n", "        ", "headline", "=", "'keyword\\trelation\\ttargets'", "\n", "if", "use_rank", ":", "\n", "            ", "headline", "+=", "'\\tMRR'", "\n", "", "for", "k", "in", "precision_k_values", ":", "\n", "            ", "headline", "+=", "'\\tP@{}'", ".", "format", "(", "k", ")", "\n", "", "headline", "+=", "'\\tpredictions'", "\n", "return", "headline", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.EntryResult.to_file": [[55, 61], ["open", "f.write", "f.write", "evaluate.EntryResult.headline_tsv", "res.to_tsv_str"], "methods", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.EntryResult.headline_tsv", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.EntryResult.to_tsv_str"], ["", "@", "staticmethod", "\n", "def", "to_file", "(", "results", ":", "List", "[", "'EntryResult'", "]", ",", "use_rank", ":", "bool", ",", "precision_k_values", ":", "List", "[", "int", "]", ",", "path", ":", "str", ")", "->", "None", ":", "\n", "        ", "with", "open", "(", "path", ",", "'w'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "EntryResult", ".", "headline_tsv", "(", "use_rank", ",", "precision_k_values", ")", "+", "'\\n'", ")", "\n", "for", "res", "in", "results", ":", "\n", "                ", "f", ".", "write", "(", "res", ".", "to_tsv_str", "(", "use_rank", ",", "precision_k_values", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.Result.__init__": [[64, 71], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "mrr", ":", "float", ",", "precision_at", ":", "Dict", "[", "int", ",", "float", "]", ",", "ranks", ":", "List", "[", "float", "]", "=", "None", ",", "\n", "precision_vals", ":", "Dict", "[", "int", ",", "List", "[", "float", "]", "]", "=", "None", ",", "entry_results", ":", "List", "[", "EntryResult", "]", "=", "None", ")", ":", "\n", "        ", "self", ".", "mrr", "=", "mrr", "\n", "self", ".", "precision_at", "=", "precision_at", "\n", "self", ".", "ranks", "=", "ranks", "\n", "self", ".", "precision_vals", "=", "precision_vals", "\n", "self", ".", "entry_results", "=", "entry_results", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.Result.stringify": [[72, 79], ["None"], "methods", ["None"], ["", "def", "stringify", "(", "self", ",", "use_mrr", ",", "precision_k_values", ")", ":", "\n", "        ", "ret", "=", "''", "\n", "if", "use_mrr", ":", "\n", "            ", "ret", "+=", "'{:5.3f} '", ".", "format", "(", "self", ".", "mrr", ")", "\n", "", "for", "k", "in", "precision_k_values", ":", "\n", "            ", "ret", "+=", "'{:5.3f} '", ".", "format", "(", "self", ".", "precision_at", "[", "k", "]", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.Result.stringify_results": [[80, 89], ["max", "evaluate.Result.headline", "len", "results[].stringify", "results.keys", "str"], "methods", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.Result.headline", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.Result.stringify"], ["", "@", "staticmethod", "\n", "def", "stringify_results", "(", "results", ":", "Dict", "[", "str", ",", "'Result'", "]", ",", "use_mrr", "=", "True", ",", "precision_k_values", "=", "None", ")", "->", "str", ":", "\n", "        ", "space_for_name", "=", "max", "(", "len", "(", "key", ")", "for", "key", "in", "results", ".", "keys", "(", ")", ")", "+", "2", "\n", "ret", "=", "' '", "*", "space_for_name", "+", "Result", ".", "headline", "(", "use_mrr", ",", "precision_k_values", ")", "+", "'\\n'", "\n", "\n", "for", "key", "in", "results", ":", "\n", "            ", "ret", "+=", "(", "(", "'{:'", "+", "str", "(", "space_for_name", ")", "+", "'s}'", ")", ".", "format", "(", "key", ")", "+", "\n", "results", "[", "key", "]", ".", "stringify", "(", "use_mrr", ",", "precision_k_values", ")", ")", "+", "'\\n'", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.Result.headline": [[90, 98], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "headline", "(", "use_mrr", ",", "precision_k_values", ")", "->", "str", ":", "\n", "        ", "headline", "=", "''", "\n", "if", "use_mrr", ":", "\n", "            ", "headline", "+=", "'MRR   '", "\n", "", "for", "k", "in", "precision_k_values", ":", "\n", "            ", "headline", "+=", "'P@{:<3d} '", ".", "format", "(", "k", ")", "\n", "", "return", "headline", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.evaluate_from_predictions": [[100, 150], ["collections.defaultdict", "enumerate", "evaluate.Result", "evaluate.EntryResult", "entry_results.append", "evaluate.avg", "evaluate.avg", "logger.warning", "evaluate.get_reciprocal_rank", "reciprocal_ranks.append", "evaluate.get_precision_at", "precision_vals[].append", "logger.info", "len"], "function", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.avg", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.avg", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.get_reciprocal_rank", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.get_precision_at"], ["", "", "def", "evaluate_from_predictions", "(", "dataset", ":", "List", "[", "DatasetEntry", "]", ",", "predictions", ":", "Dict", "[", "str", ",", "List", "[", "List", "[", "str", "]", "]", "]", ",", "compute_mrr", "=", "True", ",", "\n", "precision_at", "=", "None", ",", "with_raw", ":", "bool", "=", "False", ")", "->", "Result", ":", "\n", "    ", "if", "precision_at", "is", "None", ":", "\n", "        ", "precision_at", "=", "[", "3", ",", "10", ",", "100", "]", "\n", "\n", "", "reciprocal_ranks", "=", "[", "]", "\n", "precision_vals", "=", "defaultdict", "(", "list", ")", "\n", "entry_results", "=", "[", "]", "\n", "\n", "for", "idx", ",", "entry", "in", "enumerate", "(", "dataset", ")", ":", "\n", "\n", "        ", "if", "entry", ".", "id", "not", "in", "predictions", ":", "\n", "            ", "logger", ".", "warning", "(", "'Found no predictions for entry with id \"{}\"'", ".", "format", "(", "entry", ".", "id", ")", ")", "\n", "continue", "\n", "\n", "", "prediction", "=", "predictions", "[", "entry", ".", "id", "]", "\n", "actuals", "=", "[", "w", ".", "word", "for", "w", "in", "entry", ".", "matching_words", "]", "\n", "\n", "entry_rank", "=", "-", "1", "\n", "entry_precision_at", "=", "{", "}", "\n", "\n", "if", "compute_mrr", ":", "\n", "            ", "reciprocal_rank", "=", "get_reciprocal_rank", "(", "actuals", ",", "prediction", ")", "\n", "reciprocal_ranks", ".", "append", "(", "reciprocal_rank", ")", "\n", "entry_rank", "=", "1", "/", "reciprocal_rank", "if", "reciprocal_rank", ">", "0", "else", "1000", "\n", "\n", "", "for", "k", "in", "precision_at", ":", "\n", "            ", "precision_at_k", "=", "get_precision_at", "(", "k", ",", "actuals", ",", "prediction", ")", "\n", "precision_vals", "[", "k", "]", ".", "append", "(", "precision_at_k", ")", "\n", "entry_precision_at", "[", "k", "]", "=", "precision_at_k", "\n", "\n", "", "entry_result", "=", "EntryResult", "(", "entry", ",", "prediction", ",", "entry_rank", ",", "entry_precision_at", ")", "\n", "entry_results", ".", "append", "(", "entry_result", ")", "\n", "\n", "if", "idx", "%", "100", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'Done processing {} of {} entries'", ".", "format", "(", "idx", "+", "1", ",", "len", "(", "dataset", ")", ")", ")", "\n", "\n", "", "", "result", "=", "Result", "(", "0", ",", "{", "}", ",", "entry_results", "=", "entry_results", ")", "\n", "\n", "if", "compute_mrr", ":", "\n", "        ", "mrr", "=", "avg", "(", "reciprocal_ranks", ")", "\n", "result", ".", "mrr", "=", "mrr", "\n", "", "for", "k", "in", "precision_at", ":", "\n", "        ", "p_at_k", "=", "avg", "(", "precision_vals", "[", "k", "]", ")", "\n", "result", ".", "precision_at", "[", "k", "]", "=", "p_at_k", "\n", "\n", "", "if", "with_raw", ":", "\n", "        ", "result", ".", "ranks", "=", "[", "1", "/", "r", "if", "r", ">", "0", "else", "1000", "for", "r", "in", "reciprocal_ranks", "]", "\n", "result", ".", "precision_vals", "=", "precision_vals", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.avg": [[152, 157], ["len", "logger.warning", "sum", "len"], "function", ["None"], ["", "def", "avg", "(", "l", ":", "List", "[", "float", "]", ")", ":", "\n", "    ", "if", "len", "(", "l", ")", "==", "0", ":", "\n", "        ", "logger", ".", "warning", "(", "'Computing average of empty list, returning -1 instead'", ")", "\n", "return", "-", "1", "\n", "", "return", "sum", "(", "l", ")", "/", "len", "(", "l", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.get_reciprocal_rank": [[159, 166], ["enumerate", "max"], "function", ["None"], ["", "def", "get_reciprocal_rank", "(", "actuals", ":", "List", "[", "str", "]", ",", "predictions", ":", "List", "[", "List", "[", "str", "]", "]", ")", ":", "\n", "    ", "rr", "=", "0", "\n", "for", "pattern_predictions", "in", "predictions", ":", "\n", "        ", "for", "idx", ",", "predicted_word", "in", "enumerate", "(", "pattern_predictions", ")", ":", "\n", "            ", "if", "predicted_word", "in", "actuals", ":", "\n", "                ", "rr", "=", "max", "(", "1", "/", "(", "idx", "+", "1", ")", ",", "rr", ")", "\n", "", "", "", "return", "rr", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.get_precision_at": [[168, 171], ["evaluate.get_matches_at", "min", "len"], "function", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.get_matches_at"], ["", "def", "get_precision_at", "(", "k", ":", "int", ",", "actuals", ":", "List", "[", "str", "]", ",", "predictions", ":", "List", "[", "List", "[", "str", "]", "]", ")", ":", "\n", "    ", "matches", "=", "get_matches_at", "(", "k", ",", "actuals", ",", "predictions", ")", "\n", "return", "min", "(", "1", ",", "len", "(", "matches", ")", "/", "k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.get_matches_at": [[173, 186], ["set", "evaluate.get_matches", "set", "evaluate.get_matches", "set.update", "set", "len", "len", "evaluate.get_matches", "evaluate.get_matches"], "function", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.get_matches", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.get_matches", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.get_matches", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.get_matches"], ["", "def", "get_matches_at", "(", "k", ":", "int", ",", "actuals", ":", "List", "[", "str", "]", ",", "predictions", ":", "List", "[", "List", "[", "str", "]", "]", ",", "use_sum_instead_of_max", ":", "bool", "=", "False", ")", ":", "\n", "    ", "if", "use_sum_instead_of_max", ":", "\n", "        ", "all_predictions", "=", "set", "(", ")", "\n", "for", "pattern_predictions", "in", "predictions", ":", "\n", "            ", "all_predictions", ".", "update", "(", "pattern_predictions", "[", ":", "k", "]", ")", "\n", "", "return", "get_matches", "(", "all_predictions", ",", "actuals", ")", "\n", "", "else", ":", "\n", "        ", "best_predictions", "=", "set", "(", ")", "\n", "for", "pattern_predictions", "in", "predictions", ":", "\n", "            ", "pp_set", "=", "set", "(", "pattern_predictions", "[", ":", "k", "]", ")", "\n", "if", "len", "(", "get_matches", "(", "pp_set", ",", "actuals", ")", ")", ">", "len", "(", "get_matches", "(", "best_predictions", ",", "actuals", ")", ")", ":", "\n", "                ", "best_predictions", "=", "pp_set", "\n", "", "", "return", "get_matches", "(", "best_predictions", ",", "actuals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.predictions_to_file": [[188, 211], ["os.path.isfile", "FileExistsError", "open", "time.time", "enumerate", "evaluate.predictions_for_entry", "evaluate._write_predictions_to_file", "logger.info", "time.time", "len", "len"], "function", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.predictions_for_entry", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate._write_predictions_to_file"], ["", "", "def", "predictions_to_file", "(", "model", ":", "AbstractMaskedLanguageModel", ",", "dataset", ":", "List", "[", "DatasetEntry", "]", ",", "num_predictions", "=", "100", ",", "\n", "out_path", ":", "str", "=", "None", ")", "->", "None", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "out_path", ")", ":", "\n", "        ", "raise", "FileExistsError", "(", "'File {} already exists'", ".", "format", "(", "out_path", ")", ")", "\n", "\n", "", "with", "open", "(", "out_path", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "out_file", ":", "\n", "\n", "        ", "t0", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "idx", ",", "entry", "in", "enumerate", "(", "dataset", ")", ":", "\n", "            ", "if", "entry", ".", "relation", "==", "SYNONYM", ":", "\n", "                ", "continue", "\n", "\n", "", "entry_predictions", "=", "predictions_for_entry", "(", "model", ",", "entry", ",", "num_predictions", ")", "\n", "_write_predictions_to_file", "(", "out_file", ",", "entry", ".", "id", ",", "entry_predictions", ")", "\n", "\n", "if", "idx", "%", "100", "==", "0", ":", "\n", "                ", "total_time", "=", "time", ".", "time", "(", ")", "-", "t0", "\n", "time_per_entry", "=", "total_time", "/", "(", "idx", "+", "1", ")", "\n", "remaining_entries", "=", "len", "(", "dataset", ")", "-", "(", "idx", "+", "1", ")", "\n", "time_for_remaining_entries", "=", "remaining_entries", "*", "time_per_entry", "\n", "logger", ".", "info", "(", "'Done processing {} of {} dataset entries, estimated remaining time: {}s'", ".", "format", "(", "\n", "idx", "+", "1", ",", "len", "(", "dataset", ")", ",", "time_for_remaining_entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate._write_predictions_to_file": [[213, 215], ["file.write", "jsonpickle.dumps", "str"], "function", ["None"], ["", "", "", "", "def", "_write_predictions_to_file", "(", "file", ",", "entry_id", ",", "predictions", ":", "List", "[", "List", "[", "str", "]", "]", ")", "->", "None", ":", "\n", "    ", "file", ".", "write", "(", "str", "(", "entry_id", ")", "+", "'\\t'", "+", "jsonpickle", ".", "dumps", "(", "predictions", ")", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate._load_predictions_from_file": [[217, 227], ["logger.info", "logger.info", "open", "line.split", "jsonpickle.decode"], "function", ["None"], ["", "def", "_load_predictions_from_file", "(", "path", ":", "str", ")", "->", "Dict", "[", "str", ",", "List", "[", "List", "[", "str", "]", "]", "]", ":", "\n", "    ", "logger", ".", "info", "(", "\"Loading model predictions from {}\"", ".", "format", "(", "path", ")", ")", "\n", "predictions", "=", "{", "}", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "key", ",", "value", "=", "line", ".", "split", "(", "'\\t'", ",", "1", ")", "\n", "value_as_list", "=", "jsonpickle", ".", "decode", "(", "value", ")", "\n", "predictions", "[", "key", "]", "=", "value_as_list", "\n", "", "", "logger", ".", "info", "(", "'Done loading model predictions'", ")", "\n", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.predictions_for_entry": [[229, 239], ["patterns.get_patterns", "model.get_predictions", "predictions.append"], "function", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.patterns.get_patterns", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.mlm.RobertaMaskedLanguageModel.get_predictions"], ["", "def", "predictions_for_entry", "(", "model", ":", "AbstractMaskedLanguageModel", ",", "entry", ":", "DatasetEntry", ",", "num_predictions", "=", "100", ")", ":", "\n", "# get the corresponding patterns", "\n", "    ", "patterns", "=", "get_patterns", "(", "entry", ".", "base_word", ",", "entry", ".", "relation", ")", "\n", "predictions", "=", "[", "]", "\n", "\n", "for", "pattern", "in", "patterns", ":", "\n", "        ", "pattern_predictions", "=", "model", ".", "get_predictions", "(", "pattern", ",", "entry", ".", "base_word", ".", "word", ",", "num_predictions", ")", "\n", "predictions", ".", "append", "(", "pattern_predictions", ")", "\n", "\n", "", "return", "predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.evaluate.get_matches": [[241, 243], ["predictions.intersection"], "function", ["None"], ["", "def", "get_matches", "(", "predictions", ",", "actuals", ")", ":", "\n", "    ", "return", "predictions", ".", "intersection", "(", "actuals", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.mlm.OverwriteableEmbedding.__init__": [[16, 20], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.dataset.DatasetEntry.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embedding", ":", "Embedding", ",", "overwrite_fct", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "embedding", "\n", "self", ".", "overwrite_fct", "=", "overwrite_fct", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.mlm.OverwriteableEmbedding.forward": [[21, 26], ["mlm.OverwriteableEmbedding.embedding", "mlm.OverwriteableEmbedding.overwrite_fct"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "embds", "=", "self", ".", "embedding", "(", "inp", ")", "\n", "if", "self", ".", "overwrite_fct", "is", "not", "None", ":", "\n", "            ", "embds", "=", "self", ".", "overwrite_fct", "(", "embds", ")", "\n", "", "return", "embds", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.mlm.AbstractMaskedLanguageModel.get_predictions": [[29, 32], ["None"], "methods", ["None"], ["    ", "@", "abstractmethod", "\n", "def", "get_predictions", "(", "self", ",", "pattern", ":", "str", ",", "base_word", ":", "str", ",", "num_predictions", ":", "int", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.mlm.MockMaskedLanguageModel.get_predictions": [[35, 37], ["None"], "methods", ["None"], ["    ", "def", "get_predictions", "(", "self", ",", "pattern", ":", "str", ",", "base_word", ":", "str", ",", "num_predictions", ":", "int", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "[", "'cat'", ",", "'dog'", ",", "'coffee'", ",", "'mouse'", ",", "'tree'", ",", "'apple'", ",", "'orange'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.mlm.BertMaskedLanguageModel.__init__": [[44, 59], ["type().tokenizer_cls.from_pretrained", "type().model_cls.from_pretrained", "mlm.BertMaskedLanguageModel.model.eval", "mlm.OverwriteableEmbedding", "torch.device", "mlm.BertMaskedLanguageModel.model.to", "mlm.BertMaskedLanguageModel.embeddings.values", "getattr", "getattr", "torch.cuda.is_available", "embedding.to", "type", "type", "type", "type"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model_name", ":", "str", ",", "embeddings", ":", "Optional", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", "=", "None", ")", ":", "\n", "        ", "self", ".", "tokenizer", "=", "type", "(", "self", ")", ".", "tokenizer_cls", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "model", "=", "type", "(", "self", ")", ".", "model_cls", ".", "from_pretrained", "(", "model_name", ")", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "word_embeddings", "=", "getattr", "(", "self", ".", "model", ",", "type", "(", "self", ")", ".", "model_str", ")", ".", "embeddings", ".", "word_embeddings", "\n", "getattr", "(", "self", ".", "model", ",", "type", "(", "self", ")", ".", "model_str", ")", ".", "embeddings", ".", "word_embeddings", "=", "OverwriteableEmbedding", "(", "word_embeddings", ")", "\n", "self", ".", "embeddings", "=", "embeddings", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "self", ".", "embeddings", ":", "\n", "            ", "for", "embedding", "in", "self", ".", "embeddings", ".", "values", "(", ")", ":", "\n", "                ", "embedding", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.mlm.BertMaskedLanguageModel.get_predictions": [[60, 109], ["pattern.replace.replace.replace", "pattern.replace.replace.split", "mlm.BertMaskedLanguageModel._prepare_text", "logger.debug", "mlm.BertMaskedLanguageModel._prepare_text", "model_input[].index", "logger.debug", "len", "ValueError", "torch.no_grad", "torch.topk", "range", "ValueError", "mlm.BertMaskedLanguageModel._overwrite_embeddings", "mlm.BertMaskedLanguageModel.model", "len", "predicted_tokens.append", "getattr", "mlm.BertMaskedLanguageModel.tokenizer.convert_ids_to_tokens", "getattr", "model_input[].to", "model_input[].to", "type", "predicted_index.item", "type"], "methods", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.mlm.BertMaskedLanguageModel._prepare_text", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.mlm.BertMaskedLanguageModel._prepare_text", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.mlm.BertMaskedLanguageModel._overwrite_embeddings"], ["", "", "", "def", "get_predictions", "(", "self", ",", "pattern", ":", "str", ",", "base_word", ":", "str", ",", "num_predictions", ":", "int", ")", "->", "List", "[", "str", "]", ":", "\n", "\n", "        ", "replace_base_word", "=", "self", ".", "embeddings", "and", "base_word", "in", "self", ".", "embeddings", "\n", "\n", "pattern", "=", "pattern", ".", "replace", "(", "MASK_TOKEN", ",", "self", ".", "tokenizer", ".", "mask_token", ")", "\n", "left_context", ",", "right_context", "=", "pattern", ".", "split", "(", "WORD_TOKEN", ")", "\n", "\n", "if", "not", "replace_base_word", ":", "\n", "            ", "model_input", "=", "self", ".", "_prepare_text", "(", "''", ".", "join", "(", "[", "left_context", ",", "base_word", ",", "right_context", "]", ")", ")", "\n", "logger", ".", "debug", "(", "'Inferring embedding for {} without replacement'", ".", "format", "(", "model_input", "[", "'tokenized_text'", "]", ")", ")", "\n", "\n", "", "else", ":", "\n", "            ", "model_input", "=", "self", ".", "_prepare_text", "(", "' '", ".", "join", "(", "[", "left_context", ",", "self", ".", "tokenizer", ".", "unk_token", ",", "right_context", "]", ")", ")", "\n", "base_word_idx", "=", "model_input", "[", "'tokenized_text'", "]", ".", "index", "(", "self", ".", "tokenizer", ".", "unk_token", ")", "\n", "\n", "if", "model_input", "[", "'tokenized_text'", "]", "[", "base_word_idx", "]", "!=", "self", ".", "tokenizer", ".", "unk_token", ":", "\n", "                ", "raise", "ValueError", "(", "\"Got wrong base_word_idx, word at position {} is {} and not [UNK]\"", ".", "format", "(", "\n", "base_word_idx", ",", "model_input", "[", "'tokenized_text'", "]", "[", "base_word_idx", "]", ")", ")", "\n", "\n", "", "getattr", "(", "self", ".", "model", ",", "type", "(", "self", ")", ".", "model_str", ")", ".", "embeddings", ".", "word_embeddings", ".", "overwrite_fct", "=", "lambda", "embeddings", ":", "self", ".", "_overwrite_embeddings", "(", "embeddings", ",", "base_word_idx", ",", "self", ".", "embeddings", "[", "base_word", "]", ")", "\n", "\n", "logger", ".", "debug", "(", "\n", "'Inferring embedding for {} with replacement, base_word_idx = {}'", ".", "format", "(", "model_input", "[", "'tokenized_text'", "]", ",", "\n", "base_word_idx", ")", ")", "\n", "\n", "", "if", "len", "(", "model_input", "[", "'masked_indices'", "]", ")", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'The pattern must contain exactly one \"{}\", got \"{}\" with base word \"{}\"'", ".", "format", "(", "\n", "self", ".", "tokenizer", ".", "mask_token", ",", "pattern", ",", "base_word", ")", "\n", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "predictions", "=", "self", ".", "model", "(", "\n", "input_ids", "=", "model_input", "[", "'tokens'", "]", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "token_type_ids", "=", "model_input", "[", "'segments'", "]", ".", "to", "(", "self", ".", "device", ")", "\n", ")", "[", "0", "]", "\n", "\n", "", "getattr", "(", "self", ".", "model", ",", "type", "(", "self", ")", ".", "model_str", ")", ".", "embeddings", ".", "word_embeddings", ".", "overwrite_fct", "=", "None", "\n", "predicted_tokens", "=", "[", "]", "\n", "\n", "for", "masked_index", "in", "model_input", "[", "'masked_indices'", "]", ":", "\n", "            ", "_", ",", "predicted_indices", "=", "torch", ".", "topk", "(", "predictions", "[", "0", ",", "masked_index", "]", ",", "num_predictions", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "predicted_indices", ")", ")", ":", "\n", "                ", "predicted_index", "=", "predicted_indices", "[", "i", "]", "\n", "predicted_token", "=", "self", ".", "tokenizer", ".", "convert_ids_to_tokens", "(", "[", "predicted_index", ".", "item", "(", ")", "]", ")", "[", "0", "]", "\n", "predicted_tokens", ".", "append", "(", "predicted_token", ")", "\n", "", "", "return", "predicted_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.mlm.BertMaskedLanguageModel._prepare_text": [[110, 137], ["isinstance", "mlm.BertMaskedLanguageModel.tokenizer.convert_tokens_to_ids", "torch.tensor", "torch.tensor", "mlm.BertMaskedLanguageModel.tokenizer.tokenize", "mlm.BertMaskedLanguageModel.tokenizer.tokenize", "len", "enumerate", "len"], "methods", ["None"], ["", "def", "_prepare_text", "(", "self", ",", "text", ",", "use_sep", "=", "True", ",", "use_cls", "=", "True", ",", "use_full_stop", "=", "True", ")", ":", "\n", "        ", "if", "use_cls", ":", "\n", "            ", "text", "=", "self", ".", "tokenizer", ".", "cls_token", "+", "' '", "+", "text", "\n", "", "if", "use_full_stop", "and", "not", "text", "[", "len", "(", "text", ")", "-", "1", "]", "in", "[", "'?'", ",", "'.'", ",", "'!'", "]", ":", "\n", "            ", "text", "+=", "'.'", "\n", "", "if", "use_sep", ":", "\n", "            ", "text", "+=", "' '", "+", "self", ".", "tokenizer", ".", "sep_token", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "tokenizer", ",", "GPT2Tokenizer", ")", ":", "\n", "            ", "tokenized_text", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ",", "add_prefix_space", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "tokenized_text", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "\n", "", "indexed_tokens", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokenized_text", ")", "\n", "segments_ids", "=", "[", "0", "]", "*", "len", "(", "indexed_tokens", ")", "\n", "\n", "# Convert inputs to PyTorch tensors", "\n", "tokens_tensor", "=", "torch", ".", "tensor", "(", "[", "indexed_tokens", "]", ")", "\n", "segments_tensors", "=", "torch", ".", "tensor", "(", "[", "segments_ids", "]", ")", "\n", "\n", "# get all masked indices", "\n", "masked_indices", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "tokenized_text", ")", "if", "x", "==", "self", ".", "tokenizer", ".", "mask_token", "]", "\n", "\n", "return", "{", "'tokenized_text'", ":", "tokenized_text", ",", "\n", "'tokens'", ":", "tokens_tensor", ",", "\n", "'segments'", ":", "segments_tensors", ",", "\n", "'masked_indices'", ":", "masked_indices", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.mlm.BertMaskedLanguageModel._overwrite_embeddings": [[138, 146], ["ValueError", "str", "embeddings.shape[].item"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_overwrite_embeddings", "(", "embeddings", ":", "torch", ".", "Tensor", ",", "index", ":", "int", ",", "replacement_embedding", ":", "torch", ".", "Tensor", ")", ":", "\n", "# this function is currently not designed to work with more than one batch", "\n", "        ", "if", "embeddings", ".", "shape", "[", "0", "]", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'expected a batch of size 1 but found '", "+", "str", "(", "embeddings", ".", "shape", "[", "0", "]", ".", "item", "(", ")", ")", ")", "\n", "\n", "", "embeddings", "[", "0", ",", "index", ",", ":", "]", "=", "replacement_embedding", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.mlm.RobertaMaskedLanguageModel.get_predictions": [[153, 156], ["mlm.BertMaskedLanguageModel.get_predictions", "w.replace().lower", "w.replace"], "methods", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.mlm.RobertaMaskedLanguageModel.get_predictions"], ["def", "get_predictions", "(", "self", ",", "pattern", ":", "str", ",", "base_word", ":", "str", ",", "num_predictions", ":", "int", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "predictions", "=", "super", "(", ")", ".", "get_predictions", "(", "pattern", ",", "base_word", ",", "num_predictions", ")", "\n", "return", "[", "w", ".", "replace", "(", "'\u0120'", ",", "''", ")", ".", "lower", "(", ")", "for", "w", "in", "predictions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.patterns.get_patterns": [[8, 18], ["ValueError", "patterns.get_patterns_antonym", "patterns.get_patterns_cohyponym", "patterns.get_patterns_hypernym", "patterns.get_patterns_corruption"], "function", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.patterns.get_patterns_antonym", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.patterns.get_patterns_cohyponym", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.patterns.get_patterns_hypernym", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.patterns.get_patterns_corruption"], ["def", "get_patterns", "(", "word", ":", "AnnotatedWord", ",", "relation", ":", "str", ")", ":", "\n", "    ", "if", "relation", "==", "ANTONYM", ":", "\n", "        ", "return", "get_patterns_antonym", "(", "word", ")", "\n", "", "if", "relation", "==", "COHYPONYM", ":", "\n", "        ", "return", "get_patterns_cohyponym", "(", "word", ")", "\n", "", "if", "relation", "==", "HYPERNYM", ":", "\n", "        ", "return", "get_patterns_hypernym", "(", "word", ")", "\n", "", "if", "relation", "==", "CORRUPTION", ":", "\n", "        ", "return", "get_patterns_corruption", "(", "word", ")", "\n", "", "raise", "ValueError", "(", "\"No patterns found for relation {}\"", ".", "format", "(", "relation", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.patterns.get_patterns_antonym": [[20, 27], ["None"], "function", ["None"], ["", "def", "get_patterns_antonym", "(", "_", ")", ":", "\n", "    ", "return", "[", "\n", "'<W> is the opposite of [MASK]'", ",", "\n", "'<W> is not [MASK]'", ",", "\n", "'someone who is <W> is not [MASK]'", ",", "\n", "'something that is <W> is not [MASK]'", ",", "\n", "'\" <W> \" is the opposite of \" [MASK] \"'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.patterns.get_patterns_hypernym": [[30, 42], ["patterns._get_article"], "function", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.patterns._get_article"], ["", "def", "get_patterns_hypernym", "(", "word", ")", ":", "\n", "    ", "article", "=", "_get_article", "(", "word", ")", "\n", "\n", "return", "[", "\n", "'<W> is a [MASK]'", ",", "\n", "'<W> is an [MASK]'", ",", "\n", "article", "+", "' <W> is a [MASK]'", ",", "\n", "article", "+", "' <W> is an [MASK]'", ",", "\n", "'\" <W> \" refers to a [MASK]'", ",", "\n", "'\" <W> \" refers to an [MASK]'", ",", "\n", "'<W> is a kind of [MASK]'", ",", "\n", "article", "+", "' <W> is a kind of [MASK]'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.patterns.get_patterns_cohyponym": [[45, 49], ["None"], "function", ["None"], ["", "def", "get_patterns_cohyponym", "(", "_", ")", ":", "\n", "    ", "return", "[", "\n", "'<W> and [MASK]'", ",", "\n", "'\" <W> \" and \" [MASK] \"'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.patterns.get_patterns_corruption": [[52, 56], ["None"], "function", ["None"], ["", "def", "get_patterns_corruption", "(", "_", ")", ":", "\n", "    ", "return", "[", "\n", "'\" <W> \" is a misspelling of \" [MASK] \" .'", ",", "\n", "'\" <W> \" . did you mean \" [MASK] \" ?'", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.patterns._get_article": [[59, 63], ["None"], "function", ["None"], ["", "def", "_get_article", "(", "word", ")", ":", "\n", "    ", "if", "word", ".", "word", "[", "0", "]", "in", "[", "'a'", ",", "'e'", ",", "'i'", ",", "'o'", ",", "'u'", "]", ":", "\n", "        ", "return", "'an'", "\n", "", "return", "'a'", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.dataset.AnnotatedWord.__init__": [[20, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "word", ",", "pos", "=", "None", ",", "freq", "=", "None", ",", "count", "=", "None", ")", ":", "\n", "        ", "self", ".", "word", "=", "word", "\n", "self", ".", "pos", "=", "pos", "\n", "self", ".", "freq", "=", "freq", "\n", "self", ".", "count", "=", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.dataset.AnnotatedWord.__repr__": [[26, 28], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{} ({},{},{})'", ".", "format", "(", "self", ".", "word", ",", "self", ".", "pos", ",", "self", ".", "freq", ",", "self", ".", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.dataset.DatasetEntry.__init__": [[31, 40], ["ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "base_word", ":", "AnnotatedWord", ",", "relation", ":", "str", ",", "matching_words", ":", "List", "[", "AnnotatedWord", "]", ",", "\n", "set_type", ":", "str", "=", "TEST", ",", "eid", "=", "None", ")", ":", "\n", "        ", "if", "relation", "not", "in", "RELATIONS", ":", "\n", "            ", "raise", "ValueError", "(", "'Relation must be one of {}, got {}'", ".", "format", "(", "RELATIONS", ",", "relation", ")", ")", "\n", "", "self", ".", "base_word", "=", "base_word", "\n", "self", ".", "relation", "=", "relation", "\n", "self", ".", "matching_words", "=", "matching_words", "\n", "self", ".", "set_type", "=", "set_type", "\n", "self", ".", "id", "=", "eid", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.dataset.DatasetEntry.__repr__": [[41, 43], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}): {} <{}> {}'", ".", "format", "(", "self", ".", "id", ",", "self", ".", "set_type", ",", "self", ".", "base_word", ",", "self", ".", "relation", ",", "self", ".", "matching_words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.dataset.Dataset.select": [[47, 70], ["dataset.Dataset", "Dataset.append"], "methods", ["None"], ["    ", "def", "select", "(", "self", ",", "pos", ":", "str", "=", "None", ",", "relation", ":", "str", "=", "None", ",", "freq", ":", "Tuple", "[", "int", ",", "int", "]", "=", "None", ",", "\n", "count", ":", "Tuple", "[", "int", ",", "int", "]", "=", "None", ",", "set_type", ":", "str", "=", "None", ")", "->", "'Dataset'", ":", "\n", "        ", "ret", "=", "Dataset", "(", ")", "\n", "for", "entry", "in", "self", ":", "\n", "            ", "if", "pos", "and", "entry", ".", "base_word", ".", "pos", "!=", "pos", ":", "\n", "                ", "continue", "\n", "", "if", "relation", "and", "entry", ".", "relation", "!=", "relation", ":", "\n", "                ", "continue", "\n", "", "if", "freq", ":", "\n", "                ", "if", "entry", ".", "base_word", ".", "freq", "<", "freq", "[", "0", "]", ":", "\n", "                    ", "continue", "\n", "", "if", "0", "<", "freq", "[", "1", "]", "<=", "entry", ".", "base_word", ".", "freq", ":", "\n", "                    ", "continue", "\n", "", "", "if", "count", ":", "\n", "                ", "if", "entry", ".", "base_word", ".", "count", "<", "count", "[", "0", "]", ":", "\n", "                    ", "continue", "\n", "", "if", "0", "<", "count", "[", "1", "]", "<=", "entry", ".", "base_word", ".", "count", ":", "\n", "                    ", "continue", "\n", "", "", "if", "set_type", "and", "entry", ".", "set_type", "!=", "set_type", ":", "\n", "                ", "continue", "\n", "", "ret", ".", "append", "(", "entry", ")", "\n", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.dataset.Dataset.print_statistics": [[71, 94], ["dataset.Dataset.select", "logger.info", "len", "len", "statistics.mean", "statistics.median"], "methods", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.dataset.Dataset.select"], ["", "def", "print_statistics", "(", "self", ",", "relations", "=", "None", ",", "set_types", "=", "None", ",", "counts", "=", "None", ")", "->", "None", ":", "\n", "        ", "if", "relations", "is", "None", ":", "\n", "            ", "relations", "=", "RELATIONS", "\n", "\n", "", "if", "set_types", "is", "None", ":", "\n", "            ", "set_types", "=", "[", "DEV", ",", "TEST", "]", "\n", "\n", "", "if", "counts", "is", "None", ":", "\n", "            ", "counts", "=", "[", "(", "0", ",", "9", ")", ",", "(", "10", ",", "99", ")", ",", "(", "100", ",", "-", "1", ")", "]", "\n", "\n", "", "for", "relation", "in", "relations", ":", "\n", "            ", "for", "set_type", "in", "set_types", ":", "\n", "\n", "                ", "for", "(", "min_count", ",", "max_count", ")", "in", "counts", ":", "\n", "                    ", "ds_subset", "=", "self", ".", "select", "(", "relation", "=", "relation", ",", "set_type", "=", "set_type", ",", "count", "=", "(", "min_count", ",", "max_count", ")", ")", "\n", "\n", "if", "not", "ds_subset", ":", "\n", "                        ", "continue", "\n", "", "matching_words", "=", "[", "len", "(", "x", ".", "matching_words", ")", "for", "x", "in", "ds_subset", "]", "\n", "\n", "logger", ".", "info", "(", "'{} - {} ({},{}): size = {}, mean targets = {}, median targets = {}'", ".", "format", "(", "\n", "relation", ",", "set_type", ",", "min_count", ",", "max_count", ",", "len", "(", "ds_subset", ")", ",", "\n", "statistics", ".", "mean", "(", "matching_words", ")", ",", "statistics", ".", "median", "(", "matching_words", ")", "\n", ")", ")", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.dataset._string_to_entry": [[97, 105], ["estr.split", "dataset._string_to_annotated_word", "dataset.DatasetEntry", "dataset._string_to_annotated_word"], "function", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.dataset._string_to_annotated_word", "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.dataset._string_to_annotated_word"], ["", "", "", "", "", "def", "_string_to_entry", "(", "estr", ":", "str", ")", "->", "DatasetEntry", ":", "\n", "    ", "cmps", "=", "estr", ".", "split", "(", "'\\t'", ")", "\n", "eid", "=", "cmps", "[", "0", "]", "\n", "set_type", "=", "cmps", "[", "1", "]", "\n", "base_word", "=", "_string_to_annotated_word", "(", "cmps", "[", "2", "]", ")", "\n", "relation", "=", "cmps", "[", "3", "]", "\n", "matching_words", "=", "[", "_string_to_annotated_word", "(", "w", ")", "for", "w", "in", "cmps", "[", "4", ":", "]", "]", "\n", "return", "DatasetEntry", "(", "base_word", ",", "relation", ",", "matching_words", ",", "eid", "=", "eid", ",", "set_type", "=", "set_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.dataset._string_to_annotated_word": [[107, 115], ["astr.split", "meta_info.split", "float", "int", "dataset.AnnotatedWord"], "function", ["None"], ["", "def", "_string_to_annotated_word", "(", "astr", ":", "str", ")", "->", "AnnotatedWord", ":", "\n", "# e.g. disease (n,4.95,64105)", "\n", "    ", "word", ",", "meta_info", "=", "astr", ".", "split", "(", ")", "\n", "meta_info", "=", "meta_info", "[", "1", ":", "-", "1", "]", "\n", "pos", ",", "freq", ",", "count", "=", "meta_info", ".", "split", "(", "','", ")", "\n", "freq", "=", "float", "(", "freq", ")", "\n", "count", "=", "int", "(", "count", ")", "\n", "return", "AnnotatedWord", "(", "word", ",", "pos", "=", "pos", ",", "freq", "=", "freq", ",", "count", "=", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.dataset.file_to_dataset": [[117, 128], ["logger.info", "dataset.Dataset", "logger.info", "open", "dataset._string_to_entry", "Dataset.append"], "function", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.dataset._string_to_entry"], ["", "def", "file_to_dataset", "(", "path", ":", "str", ",", "keep_frequent_corruptions", ":", "bool", "=", "False", ")", "->", "Dataset", ":", "\n", "    ", "logger", ".", "info", "(", "'Loading dataset from {}'", ".", "format", "(", "path", ")", ")", "\n", "ret", "=", "Dataset", "(", ")", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "file", ":", "\n", "        ", "for", "line", "in", "file", ":", "\n", "            ", "entry", "=", "_string_to_entry", "(", "line", ")", "\n", "if", "entry", ".", "relation", "==", "CORRUPTION", "and", "entry", ".", "base_word", ".", "count", ">=", "10", "and", "not", "keep_frequent_corruptions", ":", "\n", "                ", "continue", "\n", "", "ret", ".", "append", "(", "entry", ")", "\n", "", "", "logger", ".", "info", "(", "'Done loading dataset'", ")", "\n", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.log.__setup_custom_logger": [[6, 18], ["logging.Formatter", "names.add", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.addHandler"], "function", ["None"], ["def", "__setup_custom_logger", "(", "name", ":", "str", ")", "->", "logging", ".", "Logger", ":", "\n", "    ", "formatter", "=", "logging", ".", "Formatter", "(", "fmt", "=", "'%(asctime)s - %(levelname)s - %(module)s - %(message)s'", ")", "\n", "\n", "names", ".", "add", "(", "name", ")", "\n", "\n", "handler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.log.get_logger": [[20, 25], ["logging.getLogger", "log.__setup_custom_logger"], "function", ["home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.log.__setup_custom_logger"], ["", "def", "get_logger", "(", "name", ":", "str", ")", "->", "logging", ".", "Logger", ":", "\n", "    ", "if", "name", "in", "names", ":", "\n", "        ", "return", "logging", ".", "getLogger", "(", "name", ")", "\n", "", "else", ":", "\n", "        ", "return", "__setup_custom_logger", "(", "name", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.utils.pairwise": [[12, 16], ["itertools.tee", "next", "zip"], "function", ["None"], ["def", "pairwise", "(", "iterable", ")", ":", "\n", "    ", "a", ",", "b", "=", "itertools", ".", "tee", "(", "iterable", ")", "\n", "next", "(", "b", ",", "None", ")", "\n", "return", "zip", "(", "a", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.timoschick_am-for-bert.eval-script.utils.load_embeddings": [[18, 29], ["logger.info", "logger.info", "io.open", "line.split", "torch.tensor", "len", "float"], "function", ["None"], ["", "def", "load_embeddings", "(", "embd_file", ":", "str", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "logger", ".", "info", "(", "'Loading embeddings from {}'", ".", "format", "(", "embd_file", ")", ")", "\n", "embds", "=", "{", "}", "\n", "with", "io", ".", "open", "(", "embd_file", ",", "'r'", ",", "encoding", "=", "'utf8'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "comps", "=", "line", ".", "split", "(", ")", "\n", "word", "=", "comps", "[", "0", "]", "\n", "embd", "=", "[", "float", "(", "x", ")", "for", "x", "in", "comps", "[", "1", ":", "]", "]", "\n", "embds", "[", "word", "]", "=", "torch", ".", "tensor", "(", "embd", ")", "\n", "", "", "logger", ".", "info", "(", "'Found {} embeddings'", ".", "format", "(", "len", "(", "embds", ")", ")", ")", "\n", "return", "embds", "\n", "", ""]]}